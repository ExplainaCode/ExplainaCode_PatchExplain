record_number,buggy_code,fixed_code,code_similarity
161001,"@Override @Transactional(isolation=Isolation.READ_COMMITTED,propagation=Propagation.REQUIRES_NEW) protected void loadSplitFiles(Result result,String... filenames){
  result.addText(""String_Node_Str"");
  for (  String filename : filenames) {
    File file=new File(filename);
    if (!file.isFile()) {
      result.addText(String.format(""String_Node_Str"",filename));
      continue;
    }
    if (!file.exists()) {
      result.addText(String.format(""String_Node_Str"",filename));
      continue;
    }
    if (file.length() > FILE_SIZE_LIMIT_IN_MB * 1024 * 1024) {
      result.addText(String.format(""String_Node_Str"",FILE_SIZE_LIMIT_IN_MB));
      continue;
    }
    runPassSafe(result,filename,1);
    runPassSafe(result,filename,2);
  }
}","@Transactional(isolation=Isolation.READ_COMMITTED,propagation=Propagation.REQUIRES_NEW) private Result loadSplitFiles(final List<String> filenames){
  final Result result=new Result();
  try {
    validateFiles(filenames);
    for (    final String filename : filenames) {
      runPassSafe(result,filename,1);
      runPassSafe(result,filename,2);
    }
    return result;
  }
 catch (  Exception e) {
    throw new GetResultException(result,e);
  }
}",0.170997485331098
161002,"private void runPassSafe(final Result result,final String filename,final int pass){
  try {
    for (    final String nextObject : new RpslObjectFileReader(filename)) {
      objectLoader.processObject(nextObject,result,pass,LoaderMode.SAFE);
    }
  }
 catch (  Exception e) {
    result.addText(String.format(""String_Node_Str"",filename,e.getMessage()));
  }
}","private void runPassSafe(final Result result,final String filename,final int pass){
  try {
    for (    final String nextObject : new RpslObjectFileReader(filename)) {
      objectLoader.processObject(nextObject,result,pass,LoaderMode.SAFE);
    }
  }
 catch (  IllegalArgumentException e) {
    result.addText(String.format(""String_Node_Str"",filename,e.getMessage()));
    throw new GetResultException(result,e);
  }
}",0.9244558258642764
161003,"@Transactional(isolation=Isolation.READ_COMMITTED,propagation=Propagation.REQUIRES_NEW) public void addObjectRisky(RpslObject rpslObject,Result result,int pass){
  addObject(rpslObject,result,pass);
}","@Transactional(isolation=Isolation.READ_COMMITTED,propagation=Propagation.REQUIRES_NEW) public void addObjectRisky(RpslObject rpslObject,Result result,int pass){
  try {
    addObject(rpslObject,result,pass);
  }
 catch (  Exception e) {
    StringWriter stringWriter=new StringWriter();
    e.printStackTrace(new PrintWriter(stringWriter));
    result.addFail(String.format(""String_Node_Str"",pass,rpslObject.getFormattedKey(),stringWriter),pass);
  }
}",0.6125574272588055
161004,"private void checkForReservedNicHandle(final RpslObject object) throws ClaimException {
  if (object.getType() == ObjectType.PERSON || object.getType() == ObjectType.ROLE) {
    if (!nicHandleFactory.isAvailable(object.getKey().toString())) {
      throw new ClaimException(UpdateMessages.nicHandleNotAvailable(object.getKey()));
    }
  }
}","public void checkForReservedNicHandle(final RpslObject object) throws ClaimException {
  if (object.getType() != ObjectType.PERSON && object.getType() != ObjectType.ROLE) {
    return;
  }
  final CIString pkey=object.getKey();
  if (pkey.equals(""String_Node_Str"")) {
    throw new ClaimException(new Message(Messages.Type.ERROR,""String_Node_Str""));
  }
  if (!nicHandleFactory.isAvailable(object.getKey().toString())) {
    throw new ClaimException(UpdateMessages.nicHandleNotAvailable(object.getKey()));
  }
}",0.6291079812206573
161005,"private void addObject(RpslObject rpslObject,Result result,int pass){
  try {
    if (pass == 1) {
      checkForReservedNicHandle(rpslObject);
      rpslObject=RpslObjectFilter.keepKeyAttributesOnly(new RpslObjectBuilder(rpslObject)).get();
      rpslObjectUpdateDao.createObject(rpslObject);
    }
 else {
      final RpslObjectInfo existing=rpslObjectDao.findByKey(rpslObject.getType(),rpslObject.getKey().toString());
      rpslObjectUpdateDao.updateObject(existing.getObjectId(),rpslObject);
      claimIds(rpslObject);
      result.addSuccess();
    }
  }
 catch (  Exception e) {
    StringWriter stringWriter=new StringWriter();
    e.printStackTrace(new PrintWriter(stringWriter));
    result.addFail(String.format(""String_Node_Str"",pass,rpslObject.getFormattedKey(),stringWriter),pass);
  }
}","private void addObject(RpslObject rpslObject,Result result,int pass) throws Exception {
  if (pass == 1) {
    checkForReservedNicHandle(rpslObject);
    rpslObject=RpslObjectFilter.keepKeyAttributesOnly(new RpslObjectBuilder(rpslObject)).get();
    rpslObjectUpdateDao.createObject(rpslObject);
  }
 else {
    final RpslObjectInfo existing=rpslObjectDao.findByKey(rpslObject.getType(),rpslObject.getKey().toString());
    rpslObjectUpdateDao.updateObject(existing.getObjectId(),rpslObject);
    claimIds(rpslObject);
    result.addSuccess();
  }
}",0.7860843819393042
161006,"@Transactional(propagation=Propagation.MANDATORY) public void addObjectSafe(RpslObject rpslObject,Result result,int pass){
  addObject(rpslObject,result,pass);
}","@Transactional(propagation=Propagation.MANDATORY) private void addObjectSafe(RpslObject rpslObject,Result result,int pass){
  try {
    addObject(rpslObject,result,pass);
  }
 catch (  Exception e) {
    StringWriter stringWriter=new StringWriter();
    e.printStackTrace(new PrintWriter(stringWriter));
    result.addFail(String.format(""String_Node_Str"",pass,rpslObject.getFormattedKey(),stringWriter),pass);
    throw new UpdateAbortedException();
  }
}",0.2012987012987013
161007,"@Test public void new_mode_modify_original_has_no_timestamps_input_has_wrong_timestamps(){
  testDateTimeProvider.setTime(actionTime());
  when(updateContext.getAction(update)).thenReturn(Action.MODIFY);
  when(overrideOptions.isSkipLastModified()).thenReturn(false);
  final RpslObject input=new RpslObjectBuilder(TEMPLATE).addAttributeSorted(new RpslAttribute(AttributeType.CREATED,TIMESTAMP_STRING_OTHER)).addAttributeSorted(new RpslAttribute(AttributeType.LAST_MODIFIED,TIMESTAMP_STRING_OTHER)).get();
  final RpslObject updatedObject=subject.generateAttributes(TEMPLATE,input,update,updateContext);
  assertThat(updatedObject.containsAttribute(AttributeType.CREATED),is(true));
  assertThat(updatedObject.findAttribute(AttributeType.LAST_MODIFIED).getValue(),is(TIMESTAMP_STRING_ACTION));
  testHelper.assertAttributeMessage(ValidationMessages.suppliedAttributeReplacedWithGeneratedValue(AttributeType.CREATED));
  testHelper.assertAttributeMessage(updatedObject.findAttribute(AttributeType.LAST_MODIFIED),ValidationMessages.suppliedAttributeReplacedWithGeneratedValue(AttributeType.LAST_MODIFIED));
}","@Test public void new_mode_modify_original_has_no_timestamps_input_has_wrong_timestamps(){
  testDateTimeProvider.setTime(actionTime());
  when(updateContext.getAction(update)).thenReturn(Action.MODIFY);
  when(overrideOptions.isSkipLastModified()).thenReturn(false);
  final RpslObject orig=TEMPLATE;
  final RpslObject input=new RpslObjectBuilder(TEMPLATE).addAttributeSorted(new RpslAttribute(AttributeType.CREATED,TIMESTAMP_STRING_OTHER)).addAttributeSorted(new RpslAttribute(AttributeType.LAST_MODIFIED,TIMESTAMP_STRING_OTHER)).get();
  final RpslObject updatedObject=subject.generateAttributes(orig,input,update,updateContext);
  assertThat(updatedObject.containsAttribute(AttributeType.CREATED),is(false));
  assertThat(updatedObject.findAttribute(AttributeType.LAST_MODIFIED).getValue(),is(TIMESTAMP_STRING_ACTION));
  testHelper.assertAttributeMessage(ValidationMessages.suppliedAttributeReplacedWithGeneratedValue(AttributeType.CREATED));
  testHelper.assertAttributeMessage(updatedObject.findAttribute(AttributeType.LAST_MODIFIED),ValidationMessages.suppliedAttributeReplacedWithGeneratedValue(AttributeType.LAST_MODIFIED));
}",0.9522960320998662
161008,"@Test public void new_mode_delete_original_no_timestamps_input_has_right_timestamps(){
  testDateTimeProvider.setTime(actionTime());
  when(updateContext.getAction(update)).thenReturn(Action.DELETE);
  final RpslObject input=new RpslObjectBuilder(TEMPLATE).addAttributeSorted(new RpslAttribute(AttributeType.CREATED,TIMESTAMP_STRING_PAST)).addAttributeSorted(new RpslAttribute(AttributeType.LAST_MODIFIED,TIMESTAMP_STRING_PAST)).get();
  final RpslObject updatedObject=subject.generateAttributes(TEMPLATE,input,update,updateContext);
  assertThat(updatedObject.containsAttribute(AttributeType.CREATED),is(true));
  assertThat(updatedObject.containsAttribute(AttributeType.LAST_MODIFIED),is(true));
  testHelper.assertAttributeMessage(ValidationMessages.suppliedAttributeReplacedWithGeneratedValue(AttributeType.CREATED));
  testHelper.assertAttributeMessage(ValidationMessages.suppliedAttributeReplacedWithGeneratedValue(AttributeType.LAST_MODIFIED));
}","@Test public void new_mode_delete_original_no_timestamps_input_has_right_timestamps(){
  testDateTimeProvider.setTime(actionTime());
  when(updateContext.getAction(update)).thenReturn(Action.DELETE);
  final RpslObject original=TEMPLATE;
  final RpslObject input=new RpslObjectBuilder(TEMPLATE).addAttributeSorted(new RpslAttribute(AttributeType.CREATED,TIMESTAMP_STRING_PAST)).addAttributeSorted(new RpslAttribute(AttributeType.LAST_MODIFIED,TIMESTAMP_STRING_PAST)).get();
  final RpslObject updatedObject=subject.generateAttributes(original,input,update,updateContext);
  assertThat(updatedObject.containsAttribute(AttributeType.CREATED),is(false));
  assertThat(updatedObject.containsAttribute(AttributeType.LAST_MODIFIED),is(false));
  testHelper.assertAttributeMessage(ValidationMessages.suppliedAttributeReplacedWithGeneratedValue(AttributeType.CREATED));
  testHelper.assertAttributeMessage(ValidationMessages.suppliedAttributeReplacedWithGeneratedValue(AttributeType.LAST_MODIFIED));
}",0.9650565262076052
161009,"@Test public void new_mode_delete_original_no_timestamps_input_has_wrong_timestamps(){
  testDateTimeProvider.setTime(actionTime());
  when(updateContext.getAction(update)).thenReturn(Action.DELETE);
  final RpslObject original=TEMPLATE;
  final RpslObject input=new RpslObjectBuilder(TEMPLATE).addAttributeSorted(new RpslAttribute(AttributeType.CREATED,TIMESTAMP_STRING_OTHER)).addAttributeSorted(new RpslAttribute(AttributeType.LAST_MODIFIED,TIMESTAMP_STRING_OTHER)).get();
  final RpslObject updatedObject=subject.generateAttributes(original,input,update,updateContext);
  assertThat(updatedObject.containsAttribute(AttributeType.CREATED),is(true));
  assertThat(updatedObject.containsAttribute(AttributeType.LAST_MODIFIED),is(true));
  testHelper.assertAttributeMessage(ValidationMessages.suppliedAttributeReplacedWithGeneratedValue(AttributeType.CREATED));
  testHelper.assertAttributeMessage(ValidationMessages.suppliedAttributeReplacedWithGeneratedValue(AttributeType.LAST_MODIFIED));
}","@Test public void new_mode_delete_original_no_timestamps_input_has_wrong_timestamps(){
  testDateTimeProvider.setTime(actionTime());
  when(updateContext.getAction(update)).thenReturn(Action.DELETE);
  final RpslObject original=TEMPLATE;
  final RpslObject input=new RpslObjectBuilder(TEMPLATE).addAttributeSorted(new RpslAttribute(AttributeType.CREATED,TIMESTAMP_STRING_OTHER)).addAttributeSorted(new RpslAttribute(AttributeType.LAST_MODIFIED,TIMESTAMP_STRING_OTHER)).get();
  final RpslObject updatedObject=subject.generateAttributes(original,input,update,updateContext);
  assertThat(updatedObject.containsAttribute(AttributeType.CREATED),is(false));
  assertThat(updatedObject.containsAttribute(AttributeType.LAST_MODIFIED),is(false));
  testHelper.assertAttributeMessage(ValidationMessages.suppliedAttributeReplacedWithGeneratedValue(AttributeType.CREATED));
  testHelper.assertAttributeMessage(ValidationMessages.suppliedAttributeReplacedWithGeneratedValue(AttributeType.LAST_MODIFIED));
}",0.9929577464788732
161010,"@Test public void old_mode_delete_original_has_timestamps_input_has_no_timestamps(){
  testTimestampsMode.setTimestampsOff(true);
  testDateTimeProvider.setTime(actionTime());
  when(updateContext.getAction(update)).thenReturn(Action.DELETE);
  final RpslObject original=new RpslObjectBuilder(TEMPLATE).addAttributeSorted(new RpslAttribute(AttributeType.CREATED,TIMESTAMP_STRING_PAST)).addAttributeSorted(new RpslAttribute(AttributeType.LAST_MODIFIED,TIMESTAMP_STRING_PAST)).get();
  final RpslObject updatedObject=subject.generateAttributes(original,TEMPLATE,update,updateContext);
  assertThat(updatedObject.containsAttribute(AttributeType.CREATED),is(true));
  assertThat(updatedObject.containsAttribute(AttributeType.LAST_MODIFIED),is(true));
  testHelper.assertNoMessages();
}","@Test public void old_mode_delete_original_has_timestamps_input_has_no_timestamps(){
  testTimestampsMode.setTimestampsOff(true);
  testDateTimeProvider.setTime(actionTime());
  when(updateContext.getAction(update)).thenReturn(Action.DELETE);
  final RpslObject original=new RpslObjectBuilder(TEMPLATE).addAttributeSorted(new RpslAttribute(AttributeType.CREATED,TIMESTAMP_STRING_PAST)).addAttributeSorted(new RpslAttribute(AttributeType.LAST_MODIFIED,TIMESTAMP_STRING_PAST)).get();
  final RpslObject input=TEMPLATE;
  final RpslObject updatedObject=subject.generateAttributes(original,input,update,updateContext);
  assertThat(updatedObject.containsAttribute(AttributeType.CREATED),is(false));
  assertThat(updatedObject.containsAttribute(AttributeType.LAST_MODIFIED),is(false));
  testHelper.assertNoMessages();
}",0.9035087719298246
161011,"@Test public void no_original_object(){
  final ObjectMessages messages=validateUpdate(subject,null,OBJECT);
  assertThat(messages.getMessages().getAllMessages(),hasSize(0));
}","@Test public void no_original_object(){
  newMode();
  final ObjectMessages messages=validateUpdate(subject,null,OBJECT);
  assertThat(messages.getMessages().getAllMessages(),hasSize(0));
}",0.9643835616438357
161012,"@Test public void identical(){
  final ObjectMessages messages=validateUpdate(subject,OBJECT,OBJECT);
  assertThat(messages.getMessages().getAllMessages(),hasSize(0));
}","@Test public void identical(){
  newMode();
  final ObjectMessages messages=validateUpdate(subject,OBJECT,OBJECT);
  assertThat(messages.getMessages().getAllMessages(),hasSize(0));
}",0.9629629629629628
161013,"@Test public void not_identical(){
  final RpslObject updatedObject=RpslObject.parse(""String_Node_Str"");
  final ObjectMessages messages=validateUpdate(subject,OBJECT,updatedObject);
  assertThat(messages.getMessages().getAllMessages(),contains(UpdateMessages.objectMismatch(String.format(""String_Node_Str"",updatedObject.getType().getName(),updatedObject.getKey()))));
}","@Test public void not_identical(){
  newMode();
  final RpslObject updatedObject=RpslObject.parse(""String_Node_Str"");
  final ObjectMessages messages=validateUpdate(subject,OBJECT,updatedObject);
  assertThat(messages.getMessages().getAllMessages(),contains(UpdateMessages.objectMismatch(String.format(""String_Node_Str"",updatedObject.getType().getName(),updatedObject.getKey()))));
}",0.9827357237715804
161014,"private void generateTimestampAttributes(final RpslObjectBuilder builder,final RpslObject originalObject,final RpslObject updatedObject,final Update update,final UpdateContext updateContext){
  final Action action=updateContext.getAction(update);
  Preconditions.checkArgument(action == CREATE || action == MODIFY || action == DELETE);
  final DateTime now=dateTimeProvider.getCurrentUtcTime();
  final String nowString=now.toString(ISODateTimeFormat.dateTimeNoMillis().withZone(DateTimeZone.UTC));
  if (action == CREATE) {
    builder.addAttributeSorted(new RpslAttribute(CREATED,nowString));
    builder.addAttributeSorted(new RpslAttribute(LAST_MODIFIED,nowString));
  }
 else   if (action == MODIFY) {
    String createdString=BEGINNING_OF_TIMES;
    if (originalObject.containsAttribute(CREATED)) {
      createdString=originalObject.getValueForAttribute(CREATED).toString();
    }
    builder.addAttributeSorted(new RpslAttribute(CREATED,createdString));
    builder.addAttributeSorted(new RpslAttribute(LAST_MODIFIED,nowString));
  }
 else   if (action == DELETE) {
    if (originalObject.containsAttribute(CREATED)) {
      String createdString=originalObject.getValueForAttribute(CREATED).toString();
      builder.addAttributeSorted(new RpslAttribute(CREATED,createdString));
    }
    if (originalObject.containsAttribute(LAST_MODIFIED)) {
      String lastModifiedString=originalObject.getValueForAttribute(CREATED).toString();
      builder.addAttributeSorted(new RpslAttribute(LAST_MODIFIED,lastModifiedString));
    }
  }
}","private void generateTimestampAttributes(final RpslObjectBuilder builder,final RpslObject originalObject,final RpslObject updatedObject,final Update update,final UpdateContext updateContext){
  final Action action=updateContext.getAction(update);
  Preconditions.checkArgument(action == CREATE || action == MODIFY || action == DELETE);
  final DateTime now=dateTimeProvider.getCurrentUtcTime();
  final String nowString=now.toString(ISODateTimeFormat.dateTimeNoMillis().withZone(DateTimeZone.UTC));
  if (action == CREATE) {
    builder.addAttributeSorted(new RpslAttribute(CREATED,nowString));
    builder.addAttributeSorted(new RpslAttribute(LAST_MODIFIED,nowString));
  }
 else   if (action == MODIFY) {
    String createdString=BEGINNING_OF_TIMES;
    if (originalObject.containsAttribute(CREATED)) {
      createdString=originalObject.getValueForAttribute(CREATED).toString();
    }
    builder.addAttributeSorted(new RpslAttribute(CREATED,createdString));
    builder.addAttributeSorted(new RpslAttribute(LAST_MODIFIED,nowString));
  }
 else   if (action == DELETE) {
    if (originalObject.containsAttribute(CREATED)) {
      String createdString=originalObject.getValueForAttribute(CREATED).toString();
      builder.addAttributeSorted(new RpslAttribute(CREATED,createdString));
    }
    if (originalObject.containsAttribute(LAST_MODIFIED)) {
      String lastModifiedString=originalObject.getValueForAttribute(LAST_MODIFIED).toString();
      builder.addAttributeSorted(new RpslAttribute(LAST_MODIFIED,lastModifiedString));
    }
  }
}",0.95136186770428
161015,"public static WhoisResources unMarshalError(final InputStream inputStream){
  try {
    return (WhoisResources)unmarshaller.unmarshal(inputStream);
  }
 catch (  JAXBException e) {
    throw new StreamingException(e);
  }
}","public static WhoisResources unMarshalError(final InputStream inputStream){
  final StreamingRestClient streamingRestClient=new StreamingRestClient(inputStream);
  try {
    return (WhoisResources)streamingRestClient.unmarshaller.unmarshal(inputStream);
  }
 catch (  JAXBException e) {
    throw new StreamingException(e);
  }
}",0.8079710144927537
161016,"public StreamingRestClient(final InputStream inputStream){
  this.inputStream=inputStream;
  try {
    eventReader=xmlInputFactory.createXMLEventReader(inputStream);
    filteredReader=xmlInputFactory.createFilteredReader(eventReader,whoisObjectFilter);
  }
 catch (  XMLStreamException e) {
    throw new StreamingException(e);
  }
}","public StreamingRestClient(final InputStream inputStream){
  try {
    unmarshaller=jaxbContext.createUnmarshaller();
  }
 catch (  JAXBException e) {
    throw new StreamingException(e);
  }
  this.inputStream=inputStream;
  try {
    eventReader=xmlInputFactory.createXMLEventReader(inputStream);
    filteredReader=xmlInputFactory.createFilteredReader(eventReader,whoisObjectFilter);
  }
 catch (  XMLStreamException e) {
    throw new StreamingException(e);
  }
}",0.8339575530586767
161017,"@Ignore @Test public void concurrent_test() throws Exception {
  final AtomicInteger exceptions=new AtomicInteger();
  final ExecutorService executorService=Executors.newFixedThreadPool(NUM_THREADS);
  for (int thread=0; thread < NUM_THREADS; thread++) {
    executorService.submit(new Runnable(){
      @Override public void run(){
        final StreamingRestClient streamingRestClient=new StreamingRestClient((new ByteArrayInputStream((""String_Node_Str"" + ""String_Node_Str"" + ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str"").getBytes())));
        while (streamingRestClient.hasNext()) {
          try {
            streamingRestClient.next();
          }
 catch (          Exception e) {
            exceptions.incrementAndGet();
          }
        }
      }
    }
);
  }
  executorService.shutdown();
  executorService.awaitTermination(10,TimeUnit.SECONDS);
  assertThat(exceptions.get(),is(0));
}","@Test public void concurrent_test() throws Exception {
  final AtomicInteger exceptions=new AtomicInteger();
  final ExecutorService executorService=Executors.newFixedThreadPool(NUM_THREADS);
  for (int thread=0; thread < NUM_THREADS; thread++) {
    executorService.submit(new Runnable(){
      @Override public void run(){
        final StreamingRestClient streamingRestClient=new StreamingRestClient((new ByteArrayInputStream((""String_Node_Str"" + ""String_Node_Str"" + ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str"").getBytes())));
        while (streamingRestClient.hasNext()) {
          try {
            streamingRestClient.next();
          }
 catch (          Exception e) {
            exceptions.incrementAndGet();
          }
        }
      }
    }
);
  }
  executorService.shutdown();
  executorService.awaitTermination(10,TimeUnit.SECONDS);
  assertThat(exceptions.get(),is(0));
}",0.9965307892454468
161018,"private static SerialEntry getSerialEntryWithoutBlobs(final JdbcTemplate jdbcTemplate,final int serialId){
  return jdbcTemplate.queryForObject(""String_Node_Str"" + ""String_Node_Str"" + ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str"",new RowMapper<SerialEntry>(){
    @Override public SerialEntry mapRow(    ResultSet rs,    int rowNum) throws SQLException {
      return new SerialEntry(Operation.getByCode(rs.getInt(1)),rs.getBoolean(2),rs.getInt(4),rs.getInt(5));
    }
  }
,serialId);
}","private static SerialEntry getSerialEntryWithoutBlobs(final JdbcTemplate jdbcTemplate,final int serialId){
  return jdbcTemplate.queryForObject(""String_Node_Str"" + ""String_Node_Str"" + ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str"",new RowMapper<SerialEntry>(){
    @Override public SerialEntry mapRow(    ResultSet rs,    int rowNum) throws SQLException {
      return new SerialEntry(Operation.getByCode(rs.getInt(1)),rs.getBoolean(2),rs.getInt(4),rs.getInt(5));
    }
  }
,serialId);
}",0.8699619771863117
161019,"@Override public void messageReceived(final ChannelHandlerContext ctx,final MessageEvent e){
  if (isKeepAlive()) {
    return;
  }
  final String queryString=e.getMessage().toString().trim();
  nrtmLog.log(ChannelUtil.getRemoteAddress(ctx.getChannel()),queryString);
  LOGGER.debug(""String_Node_Str"",queryString);
  final Query query=parseQueryString(queryString);
  final Channel channel=ctx.getChannel();
  if (query.isMirrorQuery()) {
    SerialRange range=serialDao.getSerials();
    if (query.getSerialEnd() == -1 || query.isKeepalive()) {
      query.setSerialEnd(range.getEnd());
    }
    if (!isRequestedSerialInRange(query,range)) {
      throw new IllegalArgumentException(""String_Node_Str"" + range.getBegin() + ""String_Node_Str""+ range.getEnd());
    }
    if (serialDao.getSerialAge(query.getSerialBegin()) > HISTORY_AGE_LIMIT) {
      throw new IllegalArgumentException(String.format(""String_Node_Str"",HISTORY_AGE_LIMIT / SECONDS_PER_DAY));
    }
    final int version=query.getVersion();
    writeMessage(channel,String.format(""String_Node_Str"",version,source,query.getSerialBegin(),query.getSerialEnd()));
    if (version < NrtmServer.NRTM_VERSION) {
      writeMessage(channel,String.format(""String_Node_Str"",version,NrtmServer.NRTM_VERSION));
    }
    if (query.isKeepalive()) {
      handleMirrorQueryWithKeepalive(query,channel);
      return;
    }
 else {
      handleMirrorQuery(query,channel);
    }
  }
 else   if (query.isInfoQuery()) {
switch (query.getQueryOption()) {
case SOURCES:
      handleSourcesQuery(channel);
    break;
case VERSION:
  handleVersionQuery(channel);
break;
}
}
channel.write(ChannelBuffers.EMPTY_BUFFER).addListener(ChannelFutureListener.CLOSE);
}","@Override public void messageReceived(final ChannelHandlerContext ctx,final MessageEvent e){
  if (isKeepAlive()) {
    return;
  }
  final String queryString=e.getMessage().toString().trim();
  nrtmLog.log(ChannelUtil.getRemoteAddress(ctx.getChannel()),queryString);
  LOGGER.debug(""String_Node_Str"",queryString);
  final Query query=parseQueryString(queryString);
  final Channel channel=ctx.getChannel();
  if (query.isMirrorQuery()) {
    SerialRange range=serialDao.getSerials();
    if (query.getSerialEnd() == -1 || query.isKeepalive()) {
      query.setSerialEnd(range.getEnd());
    }
    if (!isRequestedSerialInRange(query,range)) {
      throw new IllegalArgumentException(""String_Node_Str"" + range.getBegin() + ""String_Node_Str""+ range.getEnd());
    }
    final Integer serialAge=serialDao.getAgeOfExactOrNextExistingSerial(query.getSerialBegin());
    if (serialAge == null || serialAge > HISTORY_AGE_LIMIT) {
      throw new IllegalArgumentException(String.format(""String_Node_Str"",HISTORY_AGE_LIMIT / SECONDS_PER_DAY));
    }
    final int version=query.getVersion();
    writeMessage(channel,String.format(""String_Node_Str"",version,source,query.getSerialBegin(),query.getSerialEnd()));
    if (version < NrtmServer.NRTM_VERSION) {
      writeMessage(channel,String.format(""String_Node_Str"",version,NrtmServer.NRTM_VERSION));
    }
    if (query.isKeepalive()) {
      handleMirrorQueryWithKeepalive(query,channel);
      return;
    }
 else {
      handleMirrorQuery(query,channel);
    }
  }
 else   if (query.isInfoQuery()) {
switch (query.getQueryOption()) {
case SOURCES:
      handleSourcesQuery(channel);
    break;
case VERSION:
  handleVersionQuery(channel);
break;
}
}
channel.write(ChannelBuffers.EMPTY_BUFFER).addListener(ChannelFutureListener.CLOSE);
}",0.9710020097616996
161020,"@Override public void run(){
  try {
    sourceContext.setCurrent(Source.master(nrtmSource.getName()));
    while (true) {
      try {
        connect();
        reader=SocketChannelFactory.createReader(socketChannel);
        writer=SocketChannelFactory.createWriter(socketChannel);
        readHeader();
        writeMirrorCommand();
        readMirrorResult();
        readUpdates();
      }
 catch (      ClosedByInterruptException e) {
        LOGGER.info(""String_Node_Str"");
        break;
      }
catch (      IllegalStateException e) {
        LOGGER.error(e.getMessage());
        break;
      }
catch (      IOException ignored) {
      }
catch (      RuntimeException e) {
        LOGGER.info(""String_Node_Str"",e);
      }
 finally {
        IOUtils.closeQuietly(socketChannel);
      }
    }
  }
  finally {
    sourceContext.removeCurrentSource();
  }
}","@Override public void run(){
  try {
    sourceContext.setCurrent(Source.master(nrtmSource.getName()));
    while (true) {
      try {
        connect();
        reader=SocketChannelFactory.createReader(socketChannel);
        writer=SocketChannelFactory.createWriter(socketChannel);
        readHeader();
        writeMirrorCommandAndReadResponse();
        readUpdates();
      }
 catch (      ClosedByInterruptException e) {
        LOGGER.info(""String_Node_Str"");
        break;
      }
catch (      IllegalStateException e) {
        LOGGER.error(e.getMessage());
        break;
      }
catch (      IOException ignored) {
      }
catch (      RuntimeException e) {
        LOGGER.info(""String_Node_Str"",e);
      }
 finally {
        IOUtils.closeQuietly(socketChannel);
      }
    }
  }
  finally {
    sourceContext.removeCurrentSource();
  }
}",0.9773123909249564
161021,"@Test public void gFlagRequestOutOfDateSerial(){
  when(serialDaoMock.getSerialAge(1)).thenReturn(NrtmQueryHandler.HISTORY_AGE_LIMIT + 1);
  when(messageEventMock.getMessage()).thenReturn(""String_Node_Str"");
  try {
    subject.messageReceived(contextMock,messageEventMock);
    fail(""String_Node_Str"");
  }
 catch (  IllegalArgumentException e) {
    assertThat(e.getMessage(),containsString(""String_Node_Str"" + (NrtmQueryHandler.HISTORY_AGE_LIMIT / NrtmQueryHandler.SECONDS_PER_DAY) + ""String_Node_Str""));
  }
}","@Test public void gFlagRequestOutOfDateSerial(){
  when(serialDaoMock.getAgeOfExactOrNextExistingSerial(1)).thenReturn(Integer.valueOf(NrtmQueryHandler.HISTORY_AGE_LIMIT + 1));
  when(messageEventMock.getMessage()).thenReturn(""String_Node_Str"");
  try {
    subject.messageReceived(contextMock,messageEventMock);
    fail(""String_Node_Str"");
  }
 catch (  IllegalArgumentException e) {
    assertThat(e.getMessage(),containsString(""String_Node_Str"" + (NrtmQueryHandler.HISTORY_AGE_LIMIT / NrtmQueryHandler.SECONDS_PER_DAY) + ""String_Node_Str""));
  }
}",0.9530075187969924
161022,"private Response doSyncUpdate(final HttpServletRequest httpServletRequest,final Request request,final Charset charset){
  loggerContext.init(getRequestId(request.getRemoteAddress()));
  try {
    if (!sourceMatchesContext(request.getSource())) {
      return Response.status(Response.Status.BAD_REQUEST).entity(""String_Node_Str"" + request.getSource()).build();
    }
    if (request.isParam(Command.DIFF)) {
      return Response.status(Response.Status.BAD_REQUEST).entity(""String_Node_Str"").build();
    }
    boolean notificationsEnabled=true;
    if (request.isParam(Command.REDIRECT)) {
      if (!ipRanges.isTrusted(IpInterval.parse(request.getRemoteAddress()))) {
        return Response.status(Response.Status.FORBIDDEN).entity(""String_Node_Str"" + request.getRemoteAddress()).build();
      }
      notificationsEnabled=false;
    }
    if (!request.hasParam(Command.DATA) && request.isParam(Command.NEW)) {
      return Response.status(Response.Status.BAD_REQUEST).entity(""String_Node_Str"").build();
    }
    if (!request.hasParam(Command.DATA) && !request.isParam(Command.HELP)) {
      return Response.status(Response.Status.BAD_REQUEST).entity(""String_Node_Str"").build();
    }
    InternalUpdatePerformer.logHttpHeaders(loggerContext,httpServletRequest);
    InternalUpdatePerformer.logHttpUri(loggerContext,httpServletRequest);
    loggerContext.log(""String_Node_Str"",new SyncUpdateLogCallback(request.toString()));
    final UpdateContext updateContext=new UpdateContext(loggerContext);
    setSsoSessionToContext(updateContext,request.getSsoToken());
    final String content=request.hasParam(""String_Node_Str"") ? request.getParam(""String_Node_Str"") : ""String_Node_Str"";
    final UpdateRequest updateRequest=new UpdateRequest(new SyncUpdate(dateTimeProvider,request.getRemoteAddress()),getKeyword(request),content,updatesParser.parse(updateContext,Lists.newArrayList(new ContentWithCredentials(content,null,charset))),notificationsEnabled);
    final UpdateResponse updateResponse=updateRequestHandler.handle(updateRequest,updateContext);
    loggerContext.log(""String_Node_Str"",new SyncUpdateLogCallback(updateResponse.getResponse()));
    return getResponse(updateResponse);
  }
  finally {
    loggerContext.remove();
  }
}","private Response doSyncUpdate(final HttpServletRequest httpServletRequest,final Request request,final Charset charset){
  loggerContext.init(getRequestId(request.getRemoteAddress()));
  try {
    if (!sourceMatchesContext(request.getSource())) {
      return Response.status(Response.Status.BAD_REQUEST).entity(""String_Node_Str"" + request.getSource()).build();
    }
    if (request.isParam(Command.DIFF)) {
      return Response.status(Response.Status.BAD_REQUEST).entity(""String_Node_Str"").build();
    }
    boolean notificationsEnabled=true;
    if (request.isParam(Command.REDIRECT)) {
      if (!ipRanges.isTrusted(IpInterval.parse(request.getRemoteAddress()))) {
        return Response.status(Response.Status.FORBIDDEN).entity(""String_Node_Str"" + request.getRemoteAddress()).build();
      }
      notificationsEnabled=false;
    }
    if (!request.hasParam(Command.DATA) && request.isParam(Command.NEW)) {
      return Response.status(Response.Status.BAD_REQUEST).entity(""String_Node_Str"").build();
    }
    if (!request.hasParam(Command.DATA) && !request.isParam(Command.HELP)) {
      return Response.status(Response.Status.BAD_REQUEST).entity(""String_Node_Str"").build();
    }
    InternalUpdatePerformer.logHttpHeaders(loggerContext,httpServletRequest);
    InternalUpdatePerformer.logHttpUri(loggerContext,httpServletRequest);
    loggerContext.log(""String_Node_Str"",new SyncUpdateLogCallback(request.toString()));
    final UpdateContext updateContext=new UpdateContext(loggerContext);
    setSsoSessionToContext(updateContext,request.getSsoToken());
    final String content=request.hasParam(""String_Node_Str"") ? request.getParam(""String_Node_Str"") : ""String_Node_Str"";
    final UpdateRequest updateRequest=new UpdateRequest(new SyncUpdate(dateTimeProvider,request.getRemoteAddress()),getKeyword(request),content,updatesParser.parse(updateContext,Lists.newArrayList(new ContentWithCredentials(content,charset))),notificationsEnabled);
    final UpdateResponse updateResponse=updateRequestHandler.handle(updateRequest,updateContext);
    loggerContext.log(""String_Node_Str"",new SyncUpdateLogCallback(updateResponse.getResponse()));
    return getResponse(updateResponse);
  }
  finally {
    loggerContext.remove();
  }
}",0.99888417763892
161023,"@Test public void multiple_paragraphs_signed(){
  final String content=""String_Node_Str"" + ""String_Node_Str"" + INPUT + ""String_Node_Str""+ SIGNATURE;
  final ContentWithCredentials contentWithCredentials=new ContentWithCredentials(content + ""String_Node_Str"" + content);
  final List<Paragraph> paragraphs=subject.createParagraphs(contentWithCredentials,updateContext);
  assertThat(paragraphs,hasSize(2));
  for (  final Paragraph paragraph : paragraphs) {
    assertParagraphNoDryRun(paragraph,""String_Node_Str"",new PasswordCredential(""String_Node_Str""),PgpCredential.createOfferedCredential(content));
  }
}","@Test public void multiple_paragraphs_signed(){
  final String content=""String_Node_Str"" + ""String_Node_Str"" + INPUT + ""String_Node_Str""+ SIGNATURE;
  final ContentWithCredentials contentWithCredentials=new ContentWithCredentials(content + ""String_Node_Str"" + content);
  final List<Paragraph> paragraphs=subject.createParagraphs(contentWithCredentials,updateContext);
  assertThat(paragraphs,hasSize(2));
  for (  final Paragraph paragraph : paragraphs) {
    assertParagraphNoDryRun(paragraph,""String_Node_Str"",new PasswordCredential(""String_Node_Str""),PgpCredential.createOfferedCredential(content,Charsets.ISO_8859_1));
  }
}",0.9838449111470112
161024,"@Test public void single_paragraph_signed(){
  final String content=""String_Node_Str"" + ""String_Node_Str"" + INPUT + ""String_Node_Str""+ SIGNATURE;
  final List<Paragraph> paragraphs=subject.createParagraphs(new ContentWithCredentials(content),updateContext);
  assertThat(paragraphs,hasSize(1));
  assertParagraphNoDryRun(paragraphs.get(0),""String_Node_Str"",PgpCredential.createOfferedCredential(content),new PasswordCredential(""String_Node_Str""));
}","@Test public void single_paragraph_signed(){
  final String content=""String_Node_Str"" + ""String_Node_Str"" + INPUT + ""String_Node_Str""+ SIGNATURE;
  final List<Paragraph> paragraphs=subject.createParagraphs(new ContentWithCredentials(content),updateContext);
  assertThat(paragraphs,hasSize(1));
  assertParagraphNoDryRun(paragraphs.get(0),""String_Node_Str"",PgpCredential.createOfferedCredential(content,Charsets.ISO_8859_1),new PasswordCredential(""String_Node_Str""));
}",0.9782135076252724
161025,"@Test public void multiple_paragraphs_mixed(){
  final String content1=""String_Node_Str"" + ""String_Node_Str"" + ""String_Node_Str"";
  final String content2=""String_Node_Str"";
  final String content=""String_Node_Str"" + ""String_Node_Str"" + ""String_Node_Str"" + INPUT + ""String_Node_Str""+ SIGNATURE+ ""String_Node_Str""+ content1+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ INPUT+ ""String_Node_Str""+ SIGNATURE+ ""String_Node_Str""+ content2;
  final List<Paragraph> paragraphs=subject.createParagraphs(new ContentWithCredentials(content),updateContext);
  assertThat(paragraphs,hasSize(4));
  final PasswordCredential pass=new PasswordCredential(""String_Node_Str"");
  final PasswordCredential pw=new PasswordCredential(""String_Node_Str"");
  final PgpCredential pgpCredential=PgpCredential.createOfferedCredential(""String_Node_Str"" + ""String_Node_Str"" + INPUT + ""String_Node_Str""+ SIGNATURE+ ""String_Node_Str"");
  assertParagraphNoDryRun(paragraphs.get(0),""String_Node_Str"",pass,pw,pgpCredential);
  assertParagraphNoDryRun(paragraphs.get(1),""String_Node_Str"",pass,pw);
  assertParagraphNoDryRun(paragraphs.get(2),""String_Node_Str"",pass,pw,pgpCredential);
  assertParagraphNoDryRun(paragraphs.get(3),""String_Node_Str"",pass,pw);
}","@Test public void multiple_paragraphs_mixed(){
  final String content1=""String_Node_Str"" + ""String_Node_Str"" + ""String_Node_Str"";
  final String content2=""String_Node_Str"";
  final String content=""String_Node_Str"" + ""String_Node_Str"" + ""String_Node_Str"" + INPUT + ""String_Node_Str""+ SIGNATURE+ ""String_Node_Str""+ content1+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ INPUT+ ""String_Node_Str""+ SIGNATURE+ ""String_Node_Str""+ content2;
  final List<Paragraph> paragraphs=subject.createParagraphs(new ContentWithCredentials(content),updateContext);
  assertThat(paragraphs,hasSize(4));
  final PasswordCredential pass=new PasswordCredential(""String_Node_Str"");
  final PasswordCredential pw=new PasswordCredential(""String_Node_Str"");
  final PgpCredential pgpCredential=PgpCredential.createOfferedCredential(""String_Node_Str"" + ""String_Node_Str"" + INPUT + ""String_Node_Str""+ SIGNATURE+ ""String_Node_Str"",Charsets.ISO_8859_1);
  assertParagraphNoDryRun(paragraphs.get(0),""String_Node_Str"",pass,pw,pgpCredential);
  assertParagraphNoDryRun(paragraphs.get(1),""String_Node_Str"",pass,pw);
  assertParagraphNoDryRun(paragraphs.get(2),""String_Node_Str"",pass,pw,pgpCredential);
  assertParagraphNoDryRun(paragraphs.get(3),""String_Node_Str"",pass,pw);
}",0.9919484702093396
161026,"@Test public void signed_message() throws Exception {
  final String content=""String_Node_Str"" + ""String_Node_Str"" + ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str"";
  final List<Paragraph> paragraphs=subject.createParagraphs(new ContentWithCredentials(content),updateContext);
  assertThat(paragraphs.size(),is(1));
  assertThat(paragraphs.get(0).getContent(),is(""String_Node_Str"" + ""String_Node_Str"" + ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""));
  assertThat(paragraphs.get(0).getCredentials().all(),hasSize(1));
  assertThat(paragraphs.get(0).getCredentials().all(),containsInAnyOrder((Credential)PgpCredential.createOfferedCredential(content)));
}","@Test public void signed_message() throws Exception {
  final String content=""String_Node_Str"" + ""String_Node_Str"" + ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str"";
  final List<Paragraph> paragraphs=subject.createParagraphs(new ContentWithCredentials(content),updateContext);
  assertThat(paragraphs.size(),is(1));
  assertThat(paragraphs.get(0).getContent(),is(""String_Node_Str"" + ""String_Node_Str"" + ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""));
  assertThat(paragraphs.get(0).getCredentials().all(),hasSize(1));
  assertThat(paragraphs.get(0).getCredentials().all(),containsInAnyOrder((Credential)PgpCredential.createOfferedCredential(content,Charsets.ISO_8859_1)));
}",0.9921445404556166
161027,"@Test public void handle_multipart_post() throws Exception {
  final String data=""String_Node_Str"" + ""String_Node_Str"" + ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str"";
  final String help=null;
  final String nnew=null;
  final String diff=null;
  final String redirect=null;
  final String source=""String_Node_Str"";
  final String ssoToken=""String_Node_Str"";
  subject.doMultipartPost(request,source,data,help,nnew,diff,redirect,ssoToken);
  verify(messageHandler).handle(argThat(new ArgumentMatcher<UpdateRequest>(){
    @Override public boolean matches(    final Object argument){
      final UpdateRequest updateRequest=(UpdateRequest)argument;
      assertThat(updateRequest.getKeyword(),is(Keyword.NONE));
      assertThat(updateRequest.getUpdateMessage(),is(data));
      return true;
    }
  }
),argThat(new ArgumentMatcher<UpdateContext>(){
    @Override public boolean matches(    final Object argument){
      final UpdateContext updateContext=(UpdateContext)argument;
      assertThat(updateContext.getUserSession().getUsername(),is(""String_Node_Str""));
      return true;
    }
  }
));
}","@Test public void handle_multipart_post() throws Exception {
  final String data=""String_Node_Str"" + ""String_Node_Str"" + ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str"";
  final String help=null;
  final String nnew=null;
  final String diff=null;
  final String redirect=null;
  final String source=""String_Node_Str"";
  final String ssoToken=""String_Node_Str"";
  final String contentType=""String_Node_Str"";
  subject.doMultipartPost(request,source,data,help,nnew,diff,redirect,contentType,ssoToken);
  verify(messageHandler).handle(argThat(new ArgumentMatcher<UpdateRequest>(){
    @Override public boolean matches(    final Object argument){
      final UpdateRequest updateRequest=(UpdateRequest)argument;
      assertThat(updateRequest.getKeyword(),is(Keyword.NONE));
      assertThat(updateRequest.getUpdateMessage(),is(data));
      return true;
    }
  }
),argThat(new ArgumentMatcher<UpdateContext>(){
    @Override public boolean matches(    final Object argument){
      final UpdateContext updateContext=(UpdateContext)argument;
      assertThat(updateContext.getUserSession().getUsername(),is(""String_Node_Str""));
      return true;
    }
  }
));
}",0.9764991896272284
161028,"@Test public void handle_multipart_post_invalid_sso_token() throws Exception {
  final String data=""String_Node_Str"" + ""String_Node_Str"" + ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str"";
  final String help=null;
  final String nnew=null;
  final String diff=null;
  final String redirect=null;
  final String source=""String_Node_Str"";
  final String ssoToken=""String_Node_Str"";
  subject.doMultipartPost(request,source,data,help,nnew,diff,redirect,ssoToken);
  verify(messageHandler).handle(argThat(new ArgumentMatcher<UpdateRequest>(){
    @Override public boolean matches(    final Object argument){
      final UpdateRequest updateRequest=(UpdateRequest)argument;
      assertThat(updateRequest.getKeyword(),is(Keyword.NONE));
      assertThat(updateRequest.getUpdateMessage(),is(data));
      return true;
    }
  }
),argThat(new ArgumentMatcher<UpdateContext>(){
    @Override public boolean matches(    final Object argument){
      final UpdateContext updateContext=(UpdateContext)argument;
      assertThat(updateContext.getUserSession(),is(nullValue()));
      return true;
    }
  }
));
}","@Test public void handle_multipart_post_invalid_sso_token() throws Exception {
  final String data=""String_Node_Str"" + ""String_Node_Str"" + ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str"";
  final String help=null;
  final String nnew=null;
  final String diff=null;
  final String redirect=null;
  final String source=""String_Node_Str"";
  final String ssoToken=""String_Node_Str"";
  final String contentType=""String_Node_Str"";
  subject.doMultipartPost(request,source,data,help,nnew,diff,redirect,contentType,ssoToken);
  verify(messageHandler).handle(argThat(new ArgumentMatcher<UpdateRequest>(){
    @Override public boolean matches(    final Object argument){
      final UpdateRequest updateRequest=(UpdateRequest)argument;
      assertThat(updateRequest.getKeyword(),is(Keyword.NONE));
      assertThat(updateRequest.getUpdateMessage(),is(data));
      return true;
    }
  }
),argThat(new ArgumentMatcher<UpdateContext>(){
    @Override public boolean matches(    final Object argument){
      final UpdateContext updateContext=(UpdateContext)argument;
      assertThat(updateContext.getUserSession(),is(nullValue()));
      return true;
    }
  }
));
}",0.976461038961039
161029,"@Test public void references_for_self_referenced_maintainer(){
  final WhoisVersionInternal mntnerV1=versionMapper.mapVersion(objectReferenceDao.getVersion(MNTNER,""String_Node_Str"",1),""String_Node_Str"");
  final WhoisVersionInternal personV1=versionMapper.mapVersion(objectReferenceDao.getVersion(PERSON,""String_Node_Str"",1),""String_Node_Str"");
  final WhoisVersionInternal orgV1=versionMapper.mapVersion(objectReferenceDao.getVersion(ORGANISATION,""String_Node_Str"",1),""String_Node_Str"");
  final WhoisVersionInternal orgV2=versionMapper.mapVersion(objectReferenceDao.getVersion(ORGANISATION,""String_Node_Str"",2),""String_Node_Str"");
  final WhoisInternalResources whoisResources=RestTest.target(getPort(),""String_Node_Str"",null,apiKey).request(MediaType.APPLICATION_JSON).get(WhoisInternalResources.class);
  assertThat(whoisResources.getObject().getAttributes(),hasItems(new Attribute(""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",null,null),new Attribute(""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",null,null)));
  assertThat(whoisResources.getVersion(),is(mntnerV1));
  assertThat(whoisResources.getErrorMessages(),is(empty()));
  assertThat(whoisResources.getOutgoing().get(0),is(mntnerV1));
  assertThat(whoisResources.getIncoming(),hasItem(personV1));
  assertThat(whoisResources.getIncoming(),hasItem(mntnerV1));
}","@Test public void references_for_self_referenced_maintainer(){
  final WhoisVersionInternal mntnerV1=versionMapper.mapVersion(objectReferenceDao.getVersion(MNTNER,""String_Node_Str"",1),""String_Node_Str"");
  final WhoisVersionInternal personV1=versionMapper.mapVersion(objectReferenceDao.getVersion(PERSON,""String_Node_Str"",1),""String_Node_Str"");
  final WhoisVersionInternal orgV1=versionMapper.mapVersion(objectReferenceDao.getVersion(ORGANISATION,""String_Node_Str"",1),""String_Node_Str"");
  final WhoisVersionInternal orgV2=versionMapper.mapVersion(objectReferenceDao.getVersion(ORGANISATION,""String_Node_Str"",2),""String_Node_Str"");
  final WhoisInternalResources whoisResources=RestTest.target(getPort(),""String_Node_Str"",null,apiKey).request(MediaType.APPLICATION_JSON).get(WhoisInternalResources.class);
  assertThat(whoisResources.getObject().getAttributes(),hasItems(new Attribute(""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",null,null),new Attribute(""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",null,null)));
  assertThat(whoisResources.getVersion(),is(mntnerV1));
  assertThat(whoisResources.getErrorMessages(),is(empty()));
  assertThat(whoisResources.getOutgoing().get(0),is(mntnerV1));
  assertThat(whoisResources.getIncoming(),containsInAnyOrder(mntnerV1,personV1,orgV1,orgV2));
  assertThat(whoisResources.getIncoming(),hasItem(personV1));
  assertThat(whoisResources.getIncoming(),hasItem(mntnerV1));
}",0.966089466089466
161030,"public void clearAndExecute(final RedisRunner runner){
  final Jedis jedis=pool.getResource();
  jedis.flushAll();
  jedis.close();
  runner.run(pool.getResource());
  pool.returnResource(jedis);
}","public void clearAndExecute(final RedisRunner runner){
  final Jedis jedis=pool.getResource();
  jedis.flushAll();
  pool.returnResource(jedis);
  runner.run(pool.getResource());
  pool.returnResource(jedis);
}",0.9090909090909092
161031,"public RevisionWithReferences(final boolean isDeleted,@CheckForNull final Set<RpslObjectReference> outgoingReferences,int revision){
  this.isDeleted=isDeleted;
  this.outgoingReferences=outgoingReferences;
  this.revision=revision;
}","public RevisionWithReferences(final boolean isDeleted,@CheckForNull final Set<RpslObjectReference> outgoingReferences,int revision){
  this.isDeleted=isDeleted;
  if (outgoingReferences != null) {
    this.outgoingReferences=outgoingReferences;
  }
 else {
    this.outgoingReferences=new HashSet<>();
  }
  this.revision=revision;
}",0.8253968253968254
161032,"public StreamingOutput streamVersions(final String key,final ObjectType type,final String source,final HttpServletRequest request){
  return new StreamingOutput(){
    @Override public void write(    final OutputStream output) throws IOException, WebApplicationException {
      final StreamingMarshal marshal=StreamingHelper.getStreamingMarshal(request,output);
      final VersionsStreamHandler versionsStreamHandler=new VersionsStreamHandler(marshal,source,versionObjectMapper);
      objectReferenceDao.streamVersions(key,type,versionsStreamHandler);
      if (!versionsStreamHandler.flushHasStreamedObjects()) {
        throwNotFoundException(key,request);
      }
    }
  }
;
}","public StreamingOutput streamVersions(final String key,final ObjectType type,final String source,final HttpServletRequest request){
  return new StreamingOutput(){
    @Override public void write(    final OutputStream output) throws IOException, WebApplicationException {
      final StreamingMarshal marshal=StreamingHelper.getStreamingMarshal(request,output);
      final VersionsStreamHandler versionsStreamHandler=new VersionsStreamHandler(marshal,source,versionObjectMapper);
      objectReferenceDao.streamVersions(key,type,versionsStreamHandler);
      if (!versionsStreamHandler.flushHasStreamedObjects()) {
        throwNotFoundException(request,InternalMessages.noVersions(key));
      }
    }
  }
;
}",0.967741935483871
161033,"@Override public void write(final OutputStream output) throws IOException, WebApplicationException {
  final StreamingMarshal marshal=StreamingHelper.getStreamingMarshal(request,output);
  final ReferenceStreamHandler streamHandler=new ReferenceStreamHandler(marshal,source,versionObjectMapper);
  ObjectVersion version=null;
  RpslObject rpslObject=null;
  try {
    version=objectReferenceDao.getVersion(type,key,revision);
    final List<VersionInfo> entriesInSameVersion=lookupRpslObjectByVersion(version);
    rpslObject=versionDao.getRpslObject(entriesInSameVersion.get(0));
    rpslObject=decorateRpslObject(rpslObject);
  }
 catch (  DataAccessException e) {
    throwNotFoundException(key,request);
  }
  streamHandler.streamWhoisObject(rpslObject);
  streamHandler.streamVersion(version);
  objectReferenceDao.streamIncoming(version,streamHandler);
  streamHandler.endStreamingIncoming();
  objectReferenceDao.streamOutgoing(version,streamHandler);
  streamHandler.flush();
}","@Override public void write(final OutputStream output) throws IOException, WebApplicationException {
  final StreamingMarshal marshal=StreamingHelper.getStreamingMarshal(request,output);
  final ReferenceStreamHandler streamHandler=new ReferenceStreamHandler(marshal,source,versionObjectMapper);
  ObjectVersion version=null;
  RpslObject rpslObject=null;
  try {
    version=objectReferenceDao.getVersion(type,key,revision);
    final List<VersionInfo> entriesInSameVersion=lookupRpslObjectByVersion(version);
    rpslObject=versionDao.getRpslObject(entriesInSameVersion.get(0));
    rpslObject=decorateRpslObject(rpslObject);
  }
 catch (  DataAccessException e) {
    throwNotFoundException(request,InternalMessages.noVersion(key));
  }
  streamHandler.streamWhoisObject(rpslObject);
  streamHandler.streamVersion(version);
  objectReferenceDao.streamIncoming(version,streamHandler);
  streamHandler.endStreamingIncoming();
  objectReferenceDao.streamOutgoing(version,streamHandler);
  streamHandler.flush();
}",0.977977977977978
161034,"private void throwNotFoundException(final String key,final HttpServletRequest request){
  final WhoisResources whoisResources=new WhoisResources();
  whoisResources.setErrorMessages(Lists.newArrayList(new ErrorMessage(InternalMessages.noVersions(key))));
  whoisResources.setLink(new Link(""String_Node_Str"",RestServiceHelper.getRequestURL(request)));
  whoisResources.includeTermsAndConditions();
  throw new WebApplicationException(Response.status(Response.Status.NOT_FOUND).entity(whoisResources).build());
}","private void throwNotFoundException(final HttpServletRequest request,Message message){
  final WhoisInternalResources whoisResources=new WhoisInternalResources();
  whoisResources.setErrorMessages(Lists.newArrayList(new ErrorMessage(message)));
  whoisResources.setLink(new Link(""String_Node_Str"",RestServiceHelper.getRequestURL(request)));
  whoisResources.includeTermsAndConditions();
  throw new WebApplicationException(Response.status(Response.Status.NOT_FOUND).entity(whoisResources).build());
}",0.8653465346534653
161035,"public StreamingOutput streamVersion(final ObjectType type,final String key,final String source,final Integer revision,final HttpServletRequest request){
  return new StreamingOutput(){
    @Override public void write(    final OutputStream output) throws IOException, WebApplicationException {
      final StreamingMarshal marshal=StreamingHelper.getStreamingMarshal(request,output);
      final ReferenceStreamHandler streamHandler=new ReferenceStreamHandler(marshal,source,versionObjectMapper);
      ObjectVersion version=null;
      RpslObject rpslObject=null;
      try {
        version=objectReferenceDao.getVersion(type,key,revision);
        final List<VersionInfo> entriesInSameVersion=lookupRpslObjectByVersion(version);
        rpslObject=versionDao.getRpslObject(entriesInSameVersion.get(0));
        rpslObject=decorateRpslObject(rpslObject);
      }
 catch (      DataAccessException e) {
        throwNotFoundException(key,request);
      }
      streamHandler.streamWhoisObject(rpslObject);
      streamHandler.streamVersion(version);
      objectReferenceDao.streamIncoming(version,streamHandler);
      streamHandler.endStreamingIncoming();
      objectReferenceDao.streamOutgoing(version,streamHandler);
      streamHandler.flush();
    }
  }
;
}","public StreamingOutput streamVersion(final ObjectType type,final String key,final String source,final Integer revision,final HttpServletRequest request){
  return new StreamingOutput(){
    @Override public void write(    final OutputStream output) throws IOException, WebApplicationException {
      final StreamingMarshal marshal=StreamingHelper.getStreamingMarshal(request,output);
      final ReferenceStreamHandler streamHandler=new ReferenceStreamHandler(marshal,source,versionObjectMapper);
      ObjectVersion version=null;
      RpslObject rpslObject=null;
      try {
        version=objectReferenceDao.getVersion(type,key,revision);
        final List<VersionInfo> entriesInSameVersion=lookupRpslObjectByVersion(version);
        rpslObject=versionDao.getRpslObject(entriesInSameVersion.get(0));
        rpslObject=decorateRpslObject(rpslObject);
      }
 catch (      DataAccessException e) {
        throwNotFoundException(request,InternalMessages.noVersion(key));
      }
      streamHandler.streamWhoisObject(rpslObject);
      streamHandler.streamVersion(version);
      objectReferenceDao.streamIncoming(version,streamHandler);
      streamHandler.endStreamingIncoming();
      objectReferenceDao.streamOutgoing(version,streamHandler);
      streamHandler.flush();
    }
  }
;
}",0.9828259172521469
161036,"@Test public void listVersions_key_does_not_exist(){
  try {
    RestTest.target(getPort(),""String_Node_Str"",null,apiKey).request(MediaType.APPLICATION_JSON).get(WhoisInternalResources.class);
    fail();
  }
 catch (  ClientErrorException e) {
    final String str=e.getResponse().readEntity(String.class);
    System.out.println(str);
    final WhoisInternalResources whoisResources=e.getResponse().readEntity(WhoisInternalResources.class);
    assertThat(whoisResources.getErrorMessages().get(0).toString(),is(""String_Node_Str""));
    assertThat(e.getResponse().getStatus(),is(404));
  }
}","@Test public void listVersions_key_does_not_exist(){
  try {
    RestTest.target(getPort(),""String_Node_Str"",null,apiKey).request(MediaType.APPLICATION_JSON).get(WhoisInternalResources.class);
    fail();
  }
 catch (  ClientErrorException e) {
    final WhoisInternalResources whoisResources=e.getResponse().readEntity(WhoisInternalResources.class);
    assertThat(e.getResponse().getStatus(),is(404));
    assertThat(whoisResources.getErrorMessages().get(0).toString(),is(""String_Node_Str""));
  }
}",0.6703296703296703
161037,"@Test public void listVersions_created_deleted_expected_json(){
  final DateTime start=new DateTime(2008,2,20,0,0,0,0);
  final DateTime end=new DateTime(2008,2,21,0,0,0,0);
  objectReferenceDao.createVersion(new ObjectVersion(1l,ObjectType.AUT_NUM,""String_Node_Str"",start,end,1));
  final String response=RestTest.target(getPort(),""String_Node_Str"",null,apiKey).request(MediaType.APPLICATION_JSON_TYPE).get(String.class);
  System.out.println(response);
  assertThat(response,is(String.format(""String_Node_Str"" + ""String_Node_Str"" + ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str"",dateTimeFormatter.print(start),dateTimeFormatter.print(end))));
}","@Test public void listVersions_created_deleted_expected_json(){
  final DateTime start=new DateTime(2008,2,20,0,0,0,0);
  final DateTime end=new DateTime(2008,2,21,0,0,0,0);
  objectReferenceDao.createVersion(new ObjectVersion(1l,ObjectType.AUT_NUM,""String_Node_Str"",start,end,1));
  final String response=RestTest.target(getPort(),""String_Node_Str"",null,apiKey).request(MediaType.APPLICATION_JSON_TYPE).get(String.class);
  assertThat(response,is(String.format(""String_Node_Str"" + ""String_Node_Str"" + ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str"",dateTimeFormatter.print(start),dateTimeFormatter.print(end))));
}",0.9815455594002308
161038,"@Test public void references_for_self_referenced_maintainer(){
  final WhoisInternalResources whoisResources=RestTest.target(getPort(),""String_Node_Str"",null,apiKey).request(MediaType.APPLICATION_JSON).get(WhoisInternalResources.class);
  assertThat(whoisResources.getObject().getAttributes(),hasSize(greaterThan(1)));
  final WhoisVersionInternal expectedMntnerVersion=new WhoisVersionInternal(1,""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",null,new Link(""String_Node_Str"",""String_Node_Str"" + API_REST_RND_BASEURL + ""String_Node_Str""));
  assertThat(whoisResources.getOutgoing().get(0),is(expectedMntnerVersion));
  assertThat(whoisResources.getIncoming(),containsInAnyOrder(expectedMntnerVersion,new WhoisVersionInternal(1,""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",null,new Link(""String_Node_Str"",""String_Node_Str"" + API_REST_RND_BASEURL + ""String_Node_Str"")),new WhoisVersionInternal(1,""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",new Link(""String_Node_Str"",""String_Node_Str"" + API_REST_RND_BASEURL + ""String_Node_Str"")),new WhoisVersionInternal(2,""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",null,new Link(""String_Node_Str"",""String_Node_Str"" + API_REST_RND_BASEURL + ""String_Node_Str""))));
}","@Test public void references_for_self_referenced_maintainer(){
  final WhoisInternalResources whoisResources=RestTest.target(getPort(),""String_Node_Str"",null,apiKey).request(MediaType.APPLICATION_JSON).get(WhoisInternalResources.class);
  assertThat(whoisResources.getObject().getAttributes(),hasItems(new Attribute(""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",null,null),new Attribute(""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",null,null)));
  final WhoisVersionInternal expectedMntnerVersion=new WhoisVersionInternal(1,""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",null,new Link(""String_Node_Str"",""String_Node_Str"" + API_REST_RND_BASEURL + ""String_Node_Str""));
  assertThat(whoisResources.getVersion(),is(expectedMntnerVersion));
  assertThat(whoisResources.getOutgoing().get(0),is(expectedMntnerVersion));
  assertThat(whoisResources.getIncoming(),containsInAnyOrder(expectedMntnerVersion,new WhoisVersionInternal(1,""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",null,new Link(""String_Node_Str"",""String_Node_Str"" + API_REST_RND_BASEURL + ""String_Node_Str"")),new WhoisVersionInternal(1,""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",new Link(""String_Node_Str"",""String_Node_Str"" + API_REST_RND_BASEURL + ""String_Node_Str"")),new WhoisVersionInternal(2,""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",null,new Link(""String_Node_Str"",""String_Node_Str"" + API_REST_RND_BASEURL + ""String_Node_Str""))));
}",0.9083548030916452
161039,"public void version_not_found(){
  JdbcTestUtils.deleteFromTables(whoisTemplate,""String_Node_Str"",""String_Node_Str"");
  try {
    RestTest.target(getPort(),""String_Node_Str"",null,apiKey).request(MediaType.APPLICATION_JSON).get(WhoisInternalResources.class);
  }
 catch (  NotFoundException e) {
    WhoisInternalResources whoisResources=e.getResponse().readEntity(WhoisInternalResources.class);
    assertThat(whoisResources.getErrorMessages(),hasSize(1));
    assertThat(whoisResources.getErrorMessages().get(0).toString(),Is.is(""String_Node_Str""));
  }
}","@Test public void version_not_found(){
  JdbcTestUtils.deleteFromTables(whoisTemplate,""String_Node_Str"",""String_Node_Str"");
  try {
    RestTest.target(getPort(),""String_Node_Str"",null,apiKey).request(MediaType.APPLICATION_JSON).get(WhoisInternalResources.class);
    fail();
  }
 catch (  NotFoundException e) {
    WhoisInternalResources whoisResources=e.getResponse().readEntity(WhoisInternalResources.class);
    assertThat(e.getResponse().getStatus(),is(404));
    assertThat(whoisResources.getErrorMessages(),hasSize(1));
    assertThat(whoisResources.getErrorMessages().get(0).toString(),is(""String_Node_Str""));
  }
}",0.9372881355932204
161040,"public StreamingOutput streamVersions(final String key,final ObjectType type,final String source,final HttpServletRequest request){
  return new StreamingOutput(){
    @Override public void write(    final OutputStream output) throws IOException, WebApplicationException {
      final StreamingMarshal marshal=StreamingHelper.getStreamingMarshal(request,output);
      final VersionsStreamHandler versionsStreamHandler=new VersionsStreamHandler(marshal,source,versionObjectMapper);
      objectReferenceDao.streamVersions(key,type,versionsStreamHandler);
      if (!versionsStreamHandler.flushHasStreamedObjects()) {
        throw new WebApplicationException(Response.status(Response.Status.NOT_FOUND).entity(notFoundWhoisInternalResources(request,InternalMessages.noVersion(key))).build());
      }
    }
  }
;
}","public StreamingOutput streamVersions(final String key,final ObjectType type,final String source,final HttpServletRequest request){
  return new StreamingOutput(){
    @Override public void write(    final OutputStream output) throws IOException, WebApplicationException {
      final StreamingMarshal marshal=StreamingHelper.getStreamingMarshal(request,output);
      final VersionsStreamHandler versionsStreamHandler=new VersionsStreamHandler(marshal,source,versionObjectMapper);
      objectReferenceDao.streamVersions(key,type,versionsStreamHandler);
      if (!versionsStreamHandler.flushHasStreamedObjects()) {
        throw new WebApplicationException(Response.status(Response.Status.NOT_FOUND).entity(notFoundWhoisInternalResources(request,InternalMessages.noVersions(key))).build());
      }
    }
  }
;
}",0.9993853718500308
161041,"@Override public void write(final OutputStream output) throws IOException, WebApplicationException {
  final StreamingMarshal marshal=StreamingHelper.getStreamingMarshal(request,output);
  final ReferenceStreamHandler streamHandler=new ReferenceStreamHandler(marshal,source,versionObjectMapper);
  ObjectVersion version=null;
  RpslObject rpslObject=null;
  List<VersionInfo> entriesInSameVersion=null;
  try {
    version=objectReferenceDao.getVersion(type,key,revision);
    entriesInSameVersion=lookupRpslObjectByVersion(version);
    rpslObject=versionDao.getRpslObject(entriesInSameVersion.get(0));
    rpslObject=decorateRpslObject(rpslObject);
  }
 catch (  DataAccessException e) {
    throw new WebApplicationException(Response.status(Response.Status.NOT_FOUND).entity(notFoundWhoisInternalResources(request,InternalMessages.noVersion(key))).build());
  }
  streamHandler.streamWhoisObject(rpslObject);
  streamHandler.streamVersion(version);
  if (entriesInSameVersion.size() > 1) {
    streamHandler.streamErrorMessage(InternalMessages.multipleVersionsForTimestamp(entriesInSameVersion.size()));
  }
  objectReferenceDao.streamIncoming(version,streamHandler);
  streamHandler.endStreamingIncoming();
  objectReferenceDao.streamOutgoing(version,streamHandler);
  streamHandler.flush();
}","@Override public void write(final OutputStream output) throws IOException, WebApplicationException {
  final StreamingMarshal marshal=StreamingHelper.getStreamingMarshal(request,output);
  final ReferenceStreamHandler streamHandler=new ReferenceStreamHandler(marshal,source,versionObjectMapper);
  ObjectVersion version;
  RpslObject rpslObject;
  List<VersionInfo> entriesInSameVersion=null;
  try {
    version=objectReferenceDao.getVersion(type,key,revision);
    entriesInSameVersion=lookupRpslObjectByVersion(version);
    rpslObject=versionDao.getRpslObject(entriesInSameVersion.get(0));
    rpslObject=decorateRpslObject(rpslObject);
  }
 catch (  DataAccessException e) {
    throw new WebApplicationException(Response.status(Response.Status.NOT_FOUND).entity(notFoundWhoisInternalResources(request,InternalMessages.noVersion(key))).build());
  }
  streamHandler.streamWhoisObject(rpslObject);
  streamHandler.streamVersion(version);
  if (entriesInSameVersion.size() > 1) {
    streamHandler.streamErrorMessage(InternalMessages.multipleVersionsForTimestamp(entriesInSameVersion.size()));
  }
  objectReferenceDao.streamIncoming(version,streamHandler);
  streamHandler.endStreamingIncoming();
  objectReferenceDao.streamOutgoing(version,streamHandler);
  streamHandler.flush();
}",0.9961300309597524
161042,"public StreamingOutput streamVersion(final ObjectType type,final String key,final String source,final Integer revision,final HttpServletRequest request){
  return new StreamingOutput(){
    @Override public void write(    final OutputStream output) throws IOException, WebApplicationException {
      final StreamingMarshal marshal=StreamingHelper.getStreamingMarshal(request,output);
      final ReferenceStreamHandler streamHandler=new ReferenceStreamHandler(marshal,source,versionObjectMapper);
      ObjectVersion version=null;
      RpslObject rpslObject=null;
      List<VersionInfo> entriesInSameVersion=null;
      try {
        version=objectReferenceDao.getVersion(type,key,revision);
        entriesInSameVersion=lookupRpslObjectByVersion(version);
        rpslObject=versionDao.getRpslObject(entriesInSameVersion.get(0));
        rpslObject=decorateRpslObject(rpslObject);
      }
 catch (      DataAccessException e) {
        throw new WebApplicationException(Response.status(Response.Status.NOT_FOUND).entity(notFoundWhoisInternalResources(request,InternalMessages.noVersion(key))).build());
      }
      streamHandler.streamWhoisObject(rpslObject);
      streamHandler.streamVersion(version);
      if (entriesInSameVersion.size() > 1) {
        streamHandler.streamErrorMessage(InternalMessages.multipleVersionsForTimestamp(entriesInSameVersion.size()));
      }
      objectReferenceDao.streamIncoming(version,streamHandler);
      streamHandler.endStreamingIncoming();
      objectReferenceDao.streamOutgoing(version,streamHandler);
      streamHandler.flush();
    }
  }
;
}","public StreamingOutput streamVersion(final ObjectType type,final String key,final String source,final Integer revision,final HttpServletRequest request){
  return new StreamingOutput(){
    @Override public void write(    final OutputStream output) throws IOException, WebApplicationException {
      final StreamingMarshal marshal=StreamingHelper.getStreamingMarshal(request,output);
      final ReferenceStreamHandler streamHandler=new ReferenceStreamHandler(marshal,source,versionObjectMapper);
      ObjectVersion version;
      RpslObject rpslObject;
      List<VersionInfo> entriesInSameVersion=null;
      try {
        version=objectReferenceDao.getVersion(type,key,revision);
        entriesInSameVersion=lookupRpslObjectByVersion(version);
        rpslObject=versionDao.getRpslObject(entriesInSameVersion.get(0));
        rpslObject=decorateRpslObject(rpslObject);
      }
 catch (      DataAccessException e) {
        throw new WebApplicationException(Response.status(Response.Status.NOT_FOUND).entity(notFoundWhoisInternalResources(request,InternalMessages.noVersion(key))).build());
      }
      streamHandler.streamWhoisObject(rpslObject);
      streamHandler.streamVersion(version);
      if (entriesInSameVersion.size() > 1) {
        streamHandler.streamErrorMessage(InternalMessages.multipleVersionsForTimestamp(entriesInSameVersion.size()));
      }
      objectReferenceDao.streamIncoming(version,streamHandler);
      streamHandler.endStreamingIncoming();
      objectReferenceDao.streamOutgoing(version,streamHandler);
      streamHandler.flush();
    }
  }
;
}",0.9968553459119496
161043,"public void flush(){
  if (!outgoingFound) {
    return;
  }
  streamObjectVersion(queue.poll());
  marshal.endArray();
  marshal.write(""String_Node_Str"",new Link(""String_Node_Str"",WhoisResources.TERMS_AND_CONDITIONS));
  marshal.end(""String_Node_Str"");
  marshal.close();
}","public void flush(){
  if (outgoingFound) {
    streamObjectVersion(queue.poll());
    marshal.endArray();
  }
  marshal.write(""String_Node_Str"",new Link(""String_Node_Str"",WhoisResources.TERMS_AND_CONDITIONS));
  marshal.end(""String_Node_Str"");
  marshal.close();
}",0.961038961038961
161044,"@Override public int hashCode(){
  int result=type != null ? type.hashCode() : 0;
  result=31 * result + (key != null ? key.hashCode() : 0);
  result=31 * result + revision;
  result=31 * result + from.hashCode();
  result=31 * result + to.hashCode();
  result=31 * result + link.hashCode();
  return result;
}","@Override public int hashCode(){
  int result=type != null ? type.hashCode() : 0;
  result=31 * result + (key != null ? key.hashCode() : 0);
  result=31 * result + revision;
  result=31 * result + (from != null ? from.hashCode() : 0);
  result=31 * result + (to != null ? to.hashCode() : 0);
  result=31 * result + (link != null ? link.hashCode() : 0);
  return result;
}",0.6637298091042585
161045,"@Override public boolean equals(Object o){
  if (this == o)   return true;
  if (!(o instanceof WhoisVersionInternal))   return false;
  WhoisVersionInternal that=(WhoisVersionInternal)o;
  if (revision != that.revision)   return false;
  if (!from.equals(that.from))   return false;
  if (key != null ? !key.equals(that.key) : that.key != null)   return false;
  if (!link.equals(that.link))   return false;
  if (!to.equals(that.to))   return false;
  if (type != null ? !type.equals(that.type) : that.type != null)   return false;
  return true;
}","@Override public boolean equals(final Object o){
  if (this == o)   return true;
  if (o == null || getClass() != o.getClass())   return false;
  WhoisVersionInternal that=(WhoisVersionInternal)o;
  if (revision != that.revision)   return false;
  if (from != null ? !from.equals(that.from) : that.from != null)   return false;
  if (key != null ? !key.equals(that.key) : that.key != null)   return false;
  if (link != null ? !link.equals(that.link) : that.link != null)   return false;
  if (to != null ? !to.equals(that.to) : that.to != null)   return false;
  if (type != null ? !type.equalsIgnoreCase(that.type) : that.type != null)   return false;
  return true;
}",0.2918032786885245
161046,"@Test public void listVersions_key_does_not_exist(){
  try {
    RestTest.target(getPort(),""String_Node_Str"",null,apiKey).request(MediaType.APPLICATION_JSON).get(WhoisInternalResources.class);
    fail();
  }
 catch (  ClientErrorException e) {
    final WhoisInternalResources whoisResources=e.getResponse().readEntity(WhoisInternalResources.class);
    assertThat(whoisResources.getErrorMessages().get(0).toString(),is(""String_Node_Str""));
    assertThat(e.getResponse().getStatus(),is(404));
  }
}","@Test public void listVersions_key_does_not_exist(){
  try {
    RestTest.target(getPort(),""String_Node_Str"",null,apiKey).request(MediaType.APPLICATION_JSON).get(WhoisInternalResources.class);
    fail();
  }
 catch (  ClientErrorException e) {
    final String str=e.getResponse().readEntity(String.class);
    System.out.println(str);
    final WhoisInternalResources whoisResources=e.getResponse().readEntity(WhoisInternalResources.class);
    assertThat(whoisResources.getErrorMessages().get(0).toString(),is(""String_Node_Str""));
    assertThat(e.getResponse().getStatus(),is(404));
  }
}",0.9157509157509156
161047,"@Test public void listVersions_created_deleted_expected_json(){
  final DateTime start=new DateTime(2008,2,20,0,0,0,0);
  final DateTime end=new DateTime(2008,2,21,0,0,0,0);
  objectReferenceDao.createVersion(new ObjectVersion(1l,ObjectType.AUT_NUM,""String_Node_Str"",start,end,1));
  final String response=RestTest.target(getPort(),""String_Node_Str"",null,apiKey).request(MediaType.APPLICATION_JSON_TYPE).get(String.class);
  assertThat(response,is(String.format(""String_Node_Str"" + ""String_Node_Str"" + ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str"",dateTimeFormatter.print(start),dateTimeFormatter.print(end))));
}","@Test public void listVersions_created_deleted_expected_json(){
  final DateTime start=new DateTime(2008,2,20,0,0,0,0);
  final DateTime end=new DateTime(2008,2,21,0,0,0,0);
  objectReferenceDao.createVersion(new ObjectVersion(1l,ObjectType.AUT_NUM,""String_Node_Str"",start,end,1));
  final String response=RestTest.target(getPort(),""String_Node_Str"",null,apiKey).request(MediaType.APPLICATION_JSON_TYPE).get(String.class);
  System.out.println(response);
  assertThat(response,is(String.format(""String_Node_Str"" + ""String_Node_Str"" + ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str"",dateTimeFormatter.print(start),dateTimeFormatter.print(end))));
}",0.9587264150943396
161048,"@Before public void setUp() throws Exception {
  testDateTimeProvider.reset();
  databaseHelper.setupWhoisDatabase(new JdbcTemplate(dataSource));
  databaseHelper.insertApiKey(apiKey,""String_Node_Str"",""String_Node_Str"");
}","@Before public void setUp() throws Exception {
  testDateTimeProvider.reset();
  databaseHelper.setupWhoisDatabase(new JdbcTemplate(dataSource));
  databaseHelper.insertApiKey(apiKey,""String_Node_Str"",""String_Node_Str"");
  JdbcTestUtils.deleteFromTables(whoisTemplate,""String_Node_Str"");
  JdbcTestUtils.deleteFromTables(whoisTemplate,""String_Node_Str"");
}",0.7681660899653979
161049,"@Test public void references_for_self_referenced_maintainer(){
  final WhoisInternalResources whoisResources=RestTest.target(getPort(),""String_Node_Str"",null,apiKey).request(MediaType.APPLICATION_JSON).get(WhoisInternalResources.class);
  assertThat(whoisResources.getObject().getAttributes(),hasSize(greaterThan(1)));
  assertThat(whoisResources.getIncoming(),is(nullValue()));
  assertThat(whoisResources.getOutgoing(),is(nullValue()));
  final WhoisVersionInternal expectedMntnerVersion=new WhoisVersionInternal(1,""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",null,new Link(""String_Node_Str"",""String_Node_Str"" + API_REST_RND_BASEURL + ""String_Node_Str""));
  assertThat(whoisResources.getOutgoing().get(0),is(expectedMntnerVersion));
  assertThat(whoisResources.getIncoming(),containsInAnyOrder(expectedMntnerVersion,new WhoisVersionInternal(1,""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",null,new Link(""String_Node_Str"",""String_Node_Str"" + API_REST_RND_BASEURL + ""String_Node_Str"")),new WhoisVersionInternal(1,""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",new Link(""String_Node_Str"",""String_Node_Str"" + API_REST_RND_BASEURL + ""String_Node_Str"")),new WhoisVersionInternal(2,""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",null,new Link(""String_Node_Str"",""String_Node_Str"" + API_REST_RND_BASEURL + ""String_Node_Str""))));
}","@Test public void references_for_self_referenced_maintainer(){
  final WhoisInternalResources whoisResources=RestTest.target(getPort(),""String_Node_Str"",null,apiKey).request(MediaType.APPLICATION_JSON).get(WhoisInternalResources.class);
  assertThat(whoisResources.getObject().getAttributes(),hasSize(greaterThan(1)));
  final WhoisVersionInternal expectedMntnerVersion=new WhoisVersionInternal(1,""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",null,new Link(""String_Node_Str"",""String_Node_Str"" + API_REST_RND_BASEURL + ""String_Node_Str""));
  assertThat(whoisResources.getOutgoing().get(0),is(expectedMntnerVersion));
  assertThat(whoisResources.getIncoming(),containsInAnyOrder(expectedMntnerVersion,new WhoisVersionInternal(1,""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",null,new Link(""String_Node_Str"",""String_Node_Str"" + API_REST_RND_BASEURL + ""String_Node_Str"")),new WhoisVersionInternal(1,""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",new Link(""String_Node_Str"",""String_Node_Str"" + API_REST_RND_BASEURL + ""String_Node_Str"")),new WhoisVersionInternal(2,""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",null,new Link(""String_Node_Str"",""String_Node_Str"" + API_REST_RND_BASEURL + ""String_Node_Str""))));
}",0.9542682926829268
161050,"@Before public void setUp() throws Exception {
  testDateTimeProvider.reset();
  databaseHelper.setupWhoisDatabase(whoisTemplate);
  databaseHelper.insertApiKey(apiKey,""String_Node_Str"",""String_Node_Str"");
  whoisTemplate.execute(""String_Node_Str"" + ""String_Node_Str"" + ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str"");
  whoisTemplate.execute(""String_Node_Str"" + ""String_Node_Str"" + ""String_Node_Str""+ ""String_Node_Str"");
  whoisTemplate.execute(""String_Node_Str"" + ""String_Node_Str"" + ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str"");
  whoisTemplate.execute(""String_Node_Str"" + ""String_Node_Str"" + ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str"");
  whoisTemplate.execute(""String_Node_Str"" + ""String_Node_Str"" + ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str"");
}","@Before public void setUp() throws Exception {
  testDateTimeProvider.reset();
  databaseHelper.insertApiKey(apiKey,""String_Node_Str"",""String_Node_Str"");
  JdbcTestUtils.deleteFromTables(whoisTemplate,""String_Node_Str"");
  JdbcTestUtils.deleteFromTables(whoisTemplate,""String_Node_Str"");
  JdbcTestUtils.deleteFromTables(whoisTemplate,""String_Node_Str"");
  JdbcTestUtils.deleteFromTables(whoisTemplate,""String_Node_Str"");
  JdbcTestUtils.deleteFromTables(whoisTemplate,""String_Node_Str"");
  whoisTemplate.execute(""String_Node_Str"" + ""String_Node_Str"" + ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str"");
  whoisTemplate.execute(""String_Node_Str"" + ""String_Node_Str"" + ""String_Node_Str""+ ""String_Node_Str"");
  whoisTemplate.execute(""String_Node_Str"" + ""String_Node_Str"" + ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str"");
  whoisTemplate.execute(""String_Node_Str"" + ""String_Node_Str"" + ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str"");
  whoisTemplate.execute(""String_Node_Str"" + ""String_Node_Str"" + ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str"");
}",0.8293561458802341
161051,"@Override public void processRow(final ResultSet rs) throws SQLException {
  handler.streamReference(isIncoming,new ObjectVersionRowMapper().mapRow(rs,rs.getRow()));
}","@Override public void processRow(final ResultSet rs) throws SQLException {
  handler.streamReference(isIncoming,createObjectVersion(rs));
}",0.8758169934640523
161052,"@Override public void streamVersions(final String pkey,final ObjectType objectType,final VersionsStreamHandler versionsStreamHandler){
  JdbcStreamingHelper.executeStreaming(jdbcTemplate,""String_Node_Str"" + ""String_Node_Str"" + ""String_Node_Str"",new PreparedStatementSetter(){
    @Override public void setValues(    final PreparedStatement ps) throws SQLException {
      ps.setString(1,pkey);
      ps.setInt(2,ObjectTypeIds.getId(objectType));
    }
  }
,new RowCallbackHandler(){
    @Override public void processRow(    final ResultSet rs) throws SQLException {
      versionsStreamHandler.streamObjectVersion(new ObjectVersionRowMapper().mapRow(rs,rs.getRow()));
    }
  }
);
}","@Override public void streamVersions(final String pkey,final ObjectType objectType,final VersionsStreamHandler versionsStreamHandler){
  JdbcStreamingHelper.executeStreaming(jdbcTemplate,""String_Node_Str"" + ""String_Node_Str"" + ""String_Node_Str"",new PreparedStatementSetter(){
    @Override public void setValues(    final PreparedStatement ps) throws SQLException {
      ps.setString(1,pkey);
      ps.setInt(2,ObjectTypeIds.getId(objectType));
    }
  }
,new RowCallbackHandler(){
    @Override public void processRow(    final ResultSet rs) throws SQLException {
      versionsStreamHandler.streamObjectVersion(createObjectVersion(rs));
    }
  }
);
}",0.9655688622754492
161053,"private void streamReference(final boolean isIncoming,final String query,final ObjectVersion objectVersion,final ReferenceStreamHandler handler){
  JdbcStreamingHelper.executeStreaming(jdbcTemplate,query,new PreparedStatementSetter(){
    @Override public void setValues(    final PreparedStatement ps) throws SQLException {
      ps.setLong(1,objectVersion.getVersionId());
    }
  }
,new RowCallbackHandler(){
    @Override public void processRow(    final ResultSet rs) throws SQLException {
      handler.streamReference(isIncoming,new ObjectVersionRowMapper().mapRow(rs,rs.getRow()));
    }
  }
);
}","private void streamReference(final boolean isIncoming,final String query,final ObjectVersion objectVersion,final ReferenceStreamHandler handler){
  JdbcStreamingHelper.executeStreaming(jdbcTemplate,query,new PreparedStatementSetter(){
    @Override public void setValues(    final PreparedStatement ps) throws SQLException {
      ps.setLong(1,objectVersion.getVersionId());
    }
  }
,new RowCallbackHandler(){
    @Override public void processRow(    final ResultSet rs) throws SQLException {
      handler.streamReference(isIncoming,createObjectVersion(rs));
    }
  }
);
}",0.9610169491525424
161054,"@Override public ObjectVersion mapRow(final ResultSet rs,final int rowNum) throws SQLException {
  return new ObjectVersion(rs.getLong(1),ObjectTypeIds.getType(rs.getInt(2)),rs.getString(3),rs.getLong(4),rs.getLong(5),rs.getInt(6));
}","@Override public ObjectVersion mapRow(final ResultSet rs,final int rowNum) throws SQLException {
  return createObjectVersion(rs);
}",0.6939890710382514
161055,"public static void main(final String[] argv) throws Exception {
  final OptionParser parser=new OptionParser();
  parser.accepts(PASSWORD_OPTION).withRequiredArg().required();
  parser.accepts(DBURL_OPTION).withRequiredArg().required();
  parser.accepts(TO_DB_OPTION);
  parser.accepts(START).withRequiredArg().ofType(Long.class);
  final OptionSet options=parser.parse(argv);
  final RndRetrieveReferenceAndReferencedBy app=new RndRetrieveReferenceAndReferencedBy(options.valueOf(PASSWORD_OPTION).toString(),options.valueOf(DBURL_OPTION).toString());
  if (options.has(START)) {
    app.run((Long)options.valueOf(START),options.has(TO_DB_OPTION));
  }
 else {
    app.run(FROM_BEGINNING,options.has(TO_DB_OPTION));
  }
}","public static void main(final String[] argv) throws Exception {
  final OptionParser parser=new OptionParser();
  parser.accepts(PASSWORD_OPTION).withRequiredArg().required();
  parser.accepts(DBURL_OPTION).withRequiredArg().required();
  parser.accepts(TO_DB_OPTION);
  parser.accepts(START).withRequiredArg().ofType(Long.class);
  parser.accepts(MAX_TIMESTAMP_OPTION).withRequiredArg().ofType(Integer.class);
  final OptionSet options=parser.parse(argv);
  if (options.has(MAX_TIMESTAMP_OPTION)) {
    MAX_TIMESTAMP=(Integer)options.valueOf(MAX_TIMESTAMP_OPTION);
  }
  final RndRetrieveReferenceAndReferencedBy app=new RndRetrieveReferenceAndReferencedBy(options.valueOf(PASSWORD_OPTION).toString(),options.valueOf(DBURL_OPTION).toString());
  if (options.has(START)) {
    app.run((Long)options.valueOf(START),options.has(TO_DB_OPTION));
  }
 else {
    app.run(FROM_BEGINNING,options.has(TO_DB_OPTION));
  }
}",0.8819571865443425
161056,"private Set<RpslObjectReference> getReferencingObjects(final RpslObject rpslObject){
  final Set<RpslObjectReference> referencing=Sets.newHashSet();
  for (  final RpslAttribute attribute : rpslObject.findAttributes(RELATED_TO_ATTRIBUTES)) {
    for (    final CIString referenceValue : attribute.getReferenceValues()) {
      Set<ObjectType> objectTypes=attribute.getType().getReferences(referenceValue);
      if (attribute.getType() == AttributeType.SPONSORING_ORG) {
        objectTypes=Sets.newHashSet(ObjectType.ORGANISATION);
      }
      if (objectTypes.size() == 1) {
        referencing.add(new RpslObjectReference(new RpslObjectKey(ObjectTypeIds.getId(objectTypes.iterator().next()),referenceValue.toString()),new ArrayList<Integer>()));
      }
 else {
switch (attribute.getType()) {
case AUTH:
          break;
default :
        referencing.add(new RpslObjectReference(new RpslObjectKey(DUMMY_OBJECT_TYPE_ID,referenceValue.toUpperCase()),new ArrayList<Integer>()));
    }
  }
}
}
return referencing;
}","private Set<RpslObjectReference> getReferencingObjects(final RpslObject rpslObject){
  final Set<RpslObjectReference> referencing=Sets.newHashSet();
  for (  final RpslAttribute attribute : rpslObject.findAttributes(OBJECT_REFERENCE_ATTRIBUTES)) {
    for (    final CIString referenceValue : attribute.getReferenceValues()) {
      Set<ObjectType> objectTypes=attribute.getType().getReferences(referenceValue);
      if (attribute.getType() == AttributeType.SPONSORING_ORG) {
        objectTypes=Sets.newHashSet(ObjectType.ORGANISATION);
      }
      if (objectTypes.size() == 1) {
        referencing.add(new RpslObjectReference(new RpslObjectKey(ObjectTypeIds.getId(objectTypes.iterator().next()),referenceValue.toString()),new ArrayList<Integer>()));
      }
 else {
switch (attribute.getType()) {
case AUTH:
          break;
default :
        referencing.add(new RpslObjectReference(new RpslObjectKey(DUMMY_OBJECT_TYPE_ID,referenceValue.toUpperCase()),new ArrayList<Integer>()));
    }
  }
}
}
return referencing;
}",0.9891944990176816
161057,"private Set<RpslObjectReference> getReferencingObjects(final RpslObject rpslObject){
  final Set<RpslObjectReference> referencing=Sets.newHashSet();
  for (  final RpslAttribute attribute : rpslObject.findAttributes(RELATED_TO_ATTRIBUTES)) {
    for (    final CIString referenceValue : attribute.getReferenceValues()) {
      Set<ObjectType> objectTypes=attribute.getType().getReferences(referenceValue);
      if (attribute.getType() == AttributeType.SPONSORING_ORG) {
        objectTypes=Sets.newHashSet(ObjectType.ORGANISATION);
      }
      if (objectTypes.size() == 1) {
        referencing.add(new RpslObjectReference(new RpslObjectKey(ObjectTypeIds.getId(objectTypes.iterator().next()),referenceValue.toString()),new ArrayList<Integer>()));
      }
 else {
switch (attribute.getType()) {
case AUTH:
          break;
default :
        referencing.add(new RpslObjectReference(new RpslObjectKey(DUMMY_OBJECT_TYPE_ID,referenceValue.toString()),new ArrayList<Integer>()));
    }
  }
}
}
return referencing;
}","private Set<RpslObjectReference> getReferencingObjects(final RpslObject rpslObject){
  final Set<RpslObjectReference> referencing=Sets.newHashSet();
  for (  final RpslAttribute attribute : rpslObject.findAttributes(RELATED_TO_ATTRIBUTES)) {
    for (    final CIString referenceValue : attribute.getReferenceValues()) {
      Set<ObjectType> objectTypes=attribute.getType().getReferences(referenceValue);
      if (attribute.getType() == AttributeType.SPONSORING_ORG) {
        objectTypes=Sets.newHashSet(ObjectType.ORGANISATION);
      }
      if (objectTypes.size() == 1) {
        referencing.add(new RpslObjectReference(new RpslObjectKey(ObjectTypeIds.getId(objectTypes.iterator().next()),referenceValue.toString()),new ArrayList<Integer>()));
      }
 else {
switch (attribute.getType()) {
case AUTH:
          break;
default :
        referencing.add(new RpslObjectReference(new RpslObjectKey(DUMMY_OBJECT_TYPE_ID,referenceValue.toUpperCase()),new ArrayList<Integer>()));
    }
  }
}
}
return referencing;
}",0.9925999013320178
161058,"private void writeJson(final Jedis jedis){
  try {
    final JsonWriter writer=new JsonWriter(new OutputStreamWriter(new FileOutputStream(""String_Node_Str""),""String_Node_Str""));
    writer.beginArray();
    for (    String key : jedis.keys(""String_Node_Str"")) {
      JsonElement element=gson.fromJson(jedis.get(key),JsonElement.class);
      gson.toJson(element,writer);
    }
    writer.endArray();
    writer.close();
  }
 catch (  IOException ex) {
    LOGGER.error(""String_Node_Str"",ex.getMessage());
  }
}","private void writeJson(final Jedis jedis){
  try {
    final JsonWriter writer=new JsonWriter(new OutputStreamWriter(new FileOutputStream(""String_Node_Str""),""String_Node_Str""));
    writer.beginArray();
    for (    String key : jedis.keys(""String_Node_Str"")) {
      LOGGER.info(""String_Node_Str"",key);
      JsonElement element=gson.fromJson(jedis.get(key),JsonElement.class);
      gson.toJson(element,writer);
    }
    writer.endArray();
    writer.close();
  }
 catch (  IOException ex) {
    LOGGER.error(""String_Node_Str"",ex.getMessage());
  }
}",0.5939849624060151
161059,"private Map<Interval,RpslObjectWithReferences> constructTimeLine(final String key,final List<DatabaseRpslObject> allEvents){
  final Map<Interval,RpslObjectWithReferences> rpslObjectTimeline=new HashMap<>();
  int revision=0;
  for (int i=0; i < allEvents.size(); i++) {
    final DatabaseRpslObject databaseRpslObject=allEvents.get(i);
    Interval interval;
    if (i == (allEvents.size() - 1)) {
      interval=new Interval(databaseRpslObject.getEventDate(),INFINITE_END_DATE);
    }
 else {
      interval=new Interval(databaseRpslObject.getEventDate(),allEvents.get(i + 1).getEventDate());
    }
    if (!interval.getEnd().equals(interval.getStart())) {
      if (databaseRpslObject instanceof LastEvent && ((LastEvent)databaseRpslObject).isDeleteEvent()) {
        rpslObjectTimeline.put(interval,new RpslObjectWithReferences(true,null,revision++));
      }
 else {
        try {
          final RpslObject rpslObject=(databaseRpslObject instanceof LastEvent ? ((LastEvent)databaseRpslObject).getRpslObject() : RpslObject.parse(((HistoricRpslObject)databaseRpslObject).getObjectBytes()));
          rpslObjectTimeline.put(interval,new RpslObjectWithReferences(false,getReferencingObjects(rpslObject),revision++));
        }
 catch (        Exception ex) {
          LOGGER.error(""String_Node_Str"",key);
          LOGGER.error(""String_Node_Str"",key);
          rpslObjectTimeline.put(interval,new RpslObjectWithReferences(false,null,revision++));
        }
      }
    }
  }
  return rpslObjectTimeline;
}","private Map<Interval,RpslObjectWithReferences> constructTimeLine(final String key,final List<DatabaseRpslObject> allEvents){
  final Map<Interval,RpslObjectWithReferences> rpslObjectTimeline=new HashMap<>();
  int revision=0;
  for (int i=0; i < allEvents.size(); i++) {
    final DatabaseRpslObject databaseRpslObject=allEvents.get(i);
    Interval interval;
    if (i == (allEvents.size() - 1)) {
      interval=new Interval(databaseRpslObject.getEventDate(),INFINITE_END_DATE);
    }
 else {
      interval=new Interval(databaseRpslObject.getEventDate(),allEvents.get(i + 1).getEventDate());
    }
    if (!interval.getEnd().equals(interval.getStart())) {
      if (databaseRpslObject instanceof LastEvent && ((LastEvent)databaseRpslObject).isDeleteEvent()) {
        revision++;
        rpslObjectTimeline.put(interval,new RpslObjectWithReferences(true,null,revision));
      }
 else {
        try {
          final RpslObject rpslObject=(databaseRpslObject instanceof LastEvent ? ((LastEvent)databaseRpslObject).getRpslObject() : RpslObject.parse(((HistoricRpslObject)databaseRpslObject).getObjectBytes()));
          revision++;
          rpslObjectTimeline.put(interval,new RpslObjectWithReferences(false,getReferencingObjects(rpslObject),revision));
        }
 catch (        Exception ex) {
          LOGGER.error(""String_Node_Str"",key);
          LOGGER.error(""String_Node_Str"",key);
          revision++;
          rpslObjectTimeline.put(interval,new RpslObjectWithReferences(false,null,revision));
        }
      }
    }
  }
  return rpslObjectTimeline;
}",0.8869395711500975
161060,"@Test public void get_versions_for_existing_object(){
  final LocalDateTime localDateTime=new LocalDateTime();
  final RpslObjectUpdateInfo objectInfo=updateDao.createObject(RpslObject.parse(""String_Node_Str""));
  updateDao.updateObject(objectInfo.getObjectId(),RpslObject.parse(""String_Node_Str""));
  updateDao.updateObject(objectInfo.getObjectId(),RpslObject.parse(""String_Node_Str""));
  final List<VersionInfo> versions=subject.getVersionsBeforeTimestamp(ObjectType.DOMAIN,""String_Node_Str"",localDateTime.toDateTime().getMillis());
  assertThat(versions,hasSize(3));
}","@Test public void get_versions_for_existing_object(){
  final LocalDateTime localDateTime=new LocalDateTime();
  final RpslObjectUpdateInfo objectInfo=updateDao.createObject(RpslObject.parse(""String_Node_Str""));
  updateDao.updateObject(objectInfo.getObjectId(),RpslObject.parse(""String_Node_Str""));
  updateDao.updateObject(objectInfo.getObjectId(),RpslObject.parse(""String_Node_Str""));
  final List<VersionInfo> versions=subject.getVersionsBeforeTimestamp(ObjectType.DOMAIN,""String_Node_Str"",localDateTime.plusDays(1).toDateTime().getMillis());
  assertThat(versions,hasSize(3));
}",0.9896013864818024
161061,"@Test public void get_versions_for_deleted_object(){
  final LocalDateTime localDateTime=new LocalDateTime();
  final RpslObjectUpdateInfo objectInfo=updateDao.createObject(RpslObject.parse(""String_Node_Str""));
  updateDao.updateObject(objectInfo.getObjectId(),RpslObject.parse(""String_Node_Str""));
  updateDao.deleteObject(objectInfo.getObjectId(),objectInfo.getKey());
  final List<VersionInfo> versions=subject.getVersionsBeforeTimestamp(ObjectType.DOMAIN,""String_Node_Str"",localDateTime.toDateTime().getMillis());
  assertThat(versions,hasSize(3));
}","@Test public void get_versions_for_deleted_object(){
  final LocalDateTime localDateTime=new LocalDateTime();
  final RpslObjectUpdateInfo objectInfo=updateDao.createObject(RpslObject.parse(""String_Node_Str""));
  updateDao.updateObject(objectInfo.getObjectId(),RpslObject.parse(""String_Node_Str""));
  updateDao.deleteObject(objectInfo.getObjectId(),objectInfo.getKey());
  final List<VersionInfo> versions=subject.getVersionsBeforeTimestamp(ObjectType.DOMAIN,""String_Node_Str"",localDateTime.plusDays(1).toDateTime().getMillis());
  assertThat(versions,hasSize(3));
}",0.9892857142857144
161062,"private Iterable<? extends ResponseObject> getResponseObjects(final Query query){
  final List<ResponseObject> results=new ArrayList<>();
  final List<ObjectVersion> versions=objectReferenceDao.getObjectVersion(query.getObjectTypes().iterator().next(),query.getSearchValue(),query.getObjectTimestamp() / 1000);
  if (CollectionUtils.isEmpty(versions)) {
    return makeListWithNoResultsMessage(query.getSearchValue());
  }
  final ObjectVersion latestVersion=versions.get(0);
  if (versions.size() > 2) {
    results.add(new MessageObject(InternalMessages.multipleVersionsForTimestamp(versions.size())));
  }
  final RpslObject rpslObject=lookupRpslObjectByVersion(latestVersion);
  final List<ObjectReference> referencing=objectReferenceDao.getReferencing(latestVersion.getVersionId());
  final List<ObjectReference> referencedBy=objectReferenceDao.getReferencedBy(latestVersion.getVersionId());
  final RpslObjectWithTimestamp rpslObjectWithTimestamp=new RpslObjectWithTimestamp(decorateRpslObject(rpslObject),versions.size(),new VersionDateTime(latestVersion.getInterval().getStartMillis()),referencing,referencedBy);
  results.add(rpslObjectWithTimestamp);
  return results;
}","private Iterable<? extends ResponseObject> getResponseObjects(final Query query){
  final List<ResponseObject> results=new ArrayList<>();
  final List<ObjectVersion> versions=objectReferenceDao.getObjectVersion(query.getObjectTypes().iterator().next(),query.getSearchValue(),query.getObjectTimestamp() / 1000);
  if (CollectionUtils.isEmpty(versions)) {
    return makeListWithNoResultsMessage(query.getSearchValue());
  }
  final ObjectVersion latestVersion=versions.get(0);
  if (versions.size() > 2) {
    results.add(new MessageObject(InternalMessages.multipleVersionsForTimestamp(versions.size())));
  }
  final RpslObject rpslObject=lookupRpslObjectByVersion(latestVersion);
  final List<ObjectReference> referencing=objectReferenceDao.getReferencing(latestVersion.getVersionId());
  final List<ObjectReference> referencedBy=objectReferenceDao.getReferencedBy(latestVersion.getVersionId());
  final RpslObjectWithTimestamp rpslObjectWithTimestamp=new RpslObjectWithTimestamp(decorateRpslObject(rpslObject),versions.size(),new VersionDateTime(latestVersion.getInterval().getStartMillis() / 1000L),referencing,referencedBy);
  results.add(rpslObjectWithTimestamp);
  return results;
}",0.9966216216216216
161063,"@Before public void setUp() throws Exception {
  testDateTimeProvider.reset();
  databaseHelper.setupWhoisDatabase(whoisTemplate);
  databaseHelper.insertApiKey(apiKey,""String_Node_Str"",""String_Node_Str"");
  whoisTemplate.execute(""String_Node_Str"" + ""String_Node_Str"" + ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str"");
  whoisTemplate.execute(""String_Node_Str"" + ""String_Node_Str"" + ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str"");
  whoisTemplate.execute(""String_Node_Str"" + ""String_Node_Str"" + ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str"");
  whoisTemplate.execute(""String_Node_Str"" + ""String_Node_Str"" + ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str"");
  whoisTemplate.execute(""String_Node_Str"" + ""String_Node_Str"" + ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str"");
}","@Before public void setUp() throws Exception {
  testDateTimeProvider.reset();
  databaseHelper.setupWhoisDatabase(whoisTemplate);
  databaseHelper.insertApiKey(apiKey,""String_Node_Str"",""String_Node_Str"");
  whoisTemplate.execute(""String_Node_Str"" + ""String_Node_Str"" + ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str"");
  whoisTemplate.execute(""String_Node_Str"" + ""String_Node_Str"" + ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str"");
  whoisTemplate.execute(""String_Node_Str"" + ""String_Node_Str"" + ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str"");
  whoisTemplate.execute(""String_Node_Str"" + ""String_Node_Str"" + ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str"");
  whoisTemplate.execute(""String_Node_Str"" + ""String_Node_Str"" + ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str"");
}",0.9693877551020408
161064,"@Nullable @Override public List<VersionInfo> getVersionsBeforeTimestamp(ObjectType type,String searchKey,long timestamp){
  final List<Integer> objectIds=getObjectIds(type,searchKey);
  if (objectIds.isEmpty()) {
    return null;
  }
  final List<VersionInfo> versionInfos=Lists.newArrayList();
  versionInfos.addAll(getJdbcTemplate().query(""String_Node_Str"" + ""String_Node_Str"" + ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str"",new VersionInfoRowMapper(),Joiner.on(',').join(objectIds),timestamp));
  return versionInfos;
}","@Nullable @Override public List<VersionInfo> getVersionsBeforeTimestamp(ObjectType type,String searchKey,long timestamp){
  final List<Integer> objectIds=getObjectIds(type,searchKey);
  if (objectIds.isEmpty()) {
    return null;
  }
  final List<VersionInfo> versionInfos=Lists.newArrayList();
  versionInfos.addAll(getJdbcTemplate().query(""String_Node_Str"" + ""String_Node_Str"" + ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str"",new VersionInfoRowMapper(),Joiner.on(',').join(objectIds),timestamp / 1000L));
  return versionInfos;
}",0.9952380952380953
161065,"private long validateDateTimeAndConvertToTimestamp(final HttpServletRequest request,final String timestamp){
  try {
    return VersionDateTime.formatter.parseDateTime(timestamp).getMillis();
  }
 catch (  IllegalArgumentException e) {
    throw new WebApplicationException(Response.status(Response.Status.BAD_REQUEST).entity(whoisService.createErrorEntity(request,RestMessages.invalidTimestampFormat(timestamp))).build());
  }
}","private long validateDateTimeAndConvertToTimestamp(final HttpServletRequest request,final String timestamp){
  try {
    return new LocalDateTime(VersionDateTime.formatter.parseDateTime(timestamp)).withSecondOfMinute(59).withMillisOfSecond(999).toDateTime().getMillis();
  }
 catch (  IllegalArgumentException e) {
    throw new WebApplicationException(Response.status(Response.Status.BAD_REQUEST).entity(whoisService.createErrorEntity(request,RestMessages.invalidTimestampFormat(timestamp))).build());
  }
}",0.9156883671291356
161066,"@Test public void lookupFirstVersion(){
  final RpslObject mntner=RpslObject.parse(""String_Node_Str"" + ""String_Node_Str"" + ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str"");
  final RpslObjectUpdateInfo objectInfo=updateDao.createObject(mntner);
  final LocalDateTime localDateTime=new LocalDateTime();
  testDateTimeProvider.setTime(localDateTime.plusDays(1));
  updateDao.updateObject(objectInfo.getObjectId(),new RpslObjectBuilder(mntner).removeAttribute(new RpslAttribute(AttributeType.AUTH,""String_Node_Str"")).get());
  final String creationTimestamp=DEFAULT_DATE_TIME_FORMATTER.print(localDateTime);
  final WhoisResources result=RestTest.target(getPort(),String.format(""String_Node_Str"",creationTimestamp),null,apiKey).request(MediaType.APPLICATION_JSON_TYPE).get(WhoisResources.class);
  assertThat(result,not(is(nullValue())));
  assertThat(result.getWhoisObjects(),hasSize(1));
  assertThat(result.getWhoisObjects().get(0).getVersionDateTime(),is(creationTimestamp));
}","@Test public void lookupFirstVersion(){
  final RpslObject mntner=RpslObject.parse(""String_Node_Str"" + ""String_Node_Str"" + ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str"");
  final RpslObjectUpdateInfo objectInfo=updateDao.createObject(mntner);
  final LocalDateTime localDateTime=new LocalDateTime();
  testDateTimeProvider.setTime(localDateTime.plusDays(1));
  updateDao.updateObject(objectInfo.getObjectId(),new RpslObjectBuilder(mntner).removeAttribute(new RpslAttribute(AttributeType.AUTH,""String_Node_Str"")).get());
  final String creationTimestamp=DEFAULT_DATE_TIME_FORMATTER.print(localDateTime);
  final WhoisResources result=RestTest.target(getPort(),String.format(""String_Node_Str"",creationTimestamp),null,apiKey).request(MediaType.APPLICATION_JSON_TYPE).get(WhoisResources.class);
  assertThat(result,not(is(nullValue())));
  assertThat(result.getWhoisObjects(),hasSize(1));
  final WhoisObject whoisObject=result.getWhoisObjects().get(0);
  assertThat(whoisObject.getVersionDateTime(),is(creationTimestamp));
  assertThat(whoisObject.getAttributes(),hasItems(new Attribute(""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",null,null),new Attribute(""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",null,null)));
  assertThat(whoisObject.getAttributes(),not(hasItems(new Attribute(""String_Node_Str"",""String_Node_Str""),new Attribute(""String_Node_Str"",""String_Node_Str""))));
}",0.8223429014740109
161067,"@Override public boolean apply(@Nullable VersionInfo input){
  return input.getTimestamp() != maxTimestamp && input.getOperation() != Operation.DELETE;
}","@Override public boolean apply(@Nullable VersionInfo input){
  return input.getTimestamp().equals(maxTimestamp) || input.getOperation() != Operation.DELETE;
}",0.945337620578778
161068,"private Iterable<? extends ResponseObject> getResponseObjects(final Query query){
  final List<ResponseObject> results=new ArrayList<>();
  final List<VersionInfo> versionInfos=versionDao.getVersionsBeforeTimestamp(query.getObjectTypes().iterator().next(),query.getSearchValue(),query.getObjectTimestamp());
  if (CollectionUtils.isEmpty(versionInfos)) {
    return makeListWithNoResultsMessage();
  }
  final VersionDateTime maxTimestamp=versionInfos.get(0).getTimestamp();
  final List<VersionInfo> latestVersionInfos=Lists.newArrayList(Iterables.filter(versionInfos,new Predicate<VersionInfo>(){
    @Override public boolean apply(    @Nullable VersionInfo input){
      return input.getTimestamp() != maxTimestamp && input.getOperation() != Operation.DELETE;
    }
  }
));
  Collections.sort(latestVersionInfos);
  if (latestVersionInfos.isEmpty()) {
    return makeListWithNoResultsMessage();
  }
  if (latestVersionInfos.size() > 1) {
    results.add(new MessageObject(multipleVersionsForTimestamp(latestVersionInfos.size())));
  }
  final RpslObject rpslObject=versionDao.getRpslObject(Iterables.getLast(latestVersionInfos));
  results.add(new RpslObjectWithTimestamp(decorateRpslObject(rpslObject),latestVersionInfos.size(),Iterables.getLast(latestVersionInfos).getTimestamp()));
  return results;
}","private Iterable<? extends ResponseObject> getResponseObjects(final Query query){
  final List<ResponseObject> results=new ArrayList<>();
  final List<VersionInfo> versionInfos=versionDao.getVersionsBeforeTimestamp(query.getObjectTypes().iterator().next(),query.getSearchValue(),query.getObjectTimestamp());
  if (CollectionUtils.isEmpty(versionInfos)) {
    return makeListWithNoResultsMessage();
  }
  final VersionDateTime maxTimestamp=versionInfos.get(0).getTimestamp();
  final List<VersionInfo> latestVersionInfos=Lists.newArrayList(Iterables.filter(versionInfos,new Predicate<VersionInfo>(){
    @Override public boolean apply(    @Nullable VersionInfo input){
      return input.getTimestamp().equals(maxTimestamp) || input.getOperation() != Operation.DELETE;
    }
  }
));
  Collections.sort(latestVersionInfos);
  if (latestVersionInfos.isEmpty()) {
    return makeListWithNoResultsMessage();
  }
  if (latestVersionInfos.size() > 1) {
    results.add(new MessageObject(multipleVersionsForTimestamp(latestVersionInfos.size())));
  }
  final RpslObject rpslObject=versionDao.getRpslObject(Iterables.getLast(latestVersionInfos));
  results.add(new RpslObjectWithTimestamp(decorateRpslObject(rpslObject),latestVersionInfos.size(),Iterables.getLast(latestVersionInfos).getTimestamp()));
  return results;
}",0.9927453226422298
161069,"@Test public void sameOrVeryNearlyTheSameTimestamp(){
  final RpslObject before=RpslObject.parse(""String_Node_Str"" + ""String_Node_Str"" + ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str"");
  final RpslObject after=RpslObject.parse(""String_Node_Str"" + ""String_Node_Str"" + ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str"");
  final RpslObjectUpdateInfo objectInfo=updateDao.createObject(before);
  updateDao.updateObject(objectInfo.getObjectId(),after);
  final WhoisResources result=RestTest.target(getPort(),String.format(""String_Node_Str"",new LocalDateTime()),null,apiKey).request(MediaType.APPLICATION_JSON_TYPE).get(WhoisResources.class);
  assertThat(result.getWhoisObjects().get(0).getAttributes().get(1).getValue(),is(""String_Node_Str""));
}","@Test public void sameOrVeryNearlyTheSameTimestamp(){
  final RpslObject before=RpslObject.parse(""String_Node_Str"" + ""String_Node_Str"" + ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str"");
  final RpslObject after=RpslObject.parse(""String_Node_Str"" + ""String_Node_Str"" + ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str"");
  final RpslObjectUpdateInfo objectInfo=updateDao.createObject(before);
  updateDao.updateObject(objectInfo.getObjectId(),after);
  final WhoisResources result=RestTest.target(getPort(),String.format(""String_Node_Str"",DEFAULT_DATE_TIME_FORMATTER.print(new LocalDateTime())),null,apiKey).request(MediaType.APPLICATION_JSON_TYPE).get(WhoisResources.class);
  assertThat(result.getWhoisObjects().get(0).getAttributes().get(1).getValue(),is(""String_Node_Str""));
}",0.9794721407624634
161070,"@Test public void listVersions_created_deleted(){
  final RpslObjectUpdateInfo add=updateDao.createObject(RpslObject.parse(""String_Node_Str"" + ""String_Node_Str"" + ""String_Node_Str""));
  LocalDateTime deleteDate=new LocalDateTime().plusDays(3);
  testDateTimeProvider.setTime(deleteDate);
  updateDao.deleteObject(add.getObjectId(),""String_Node_Str"");
  final WhoisResources result=RestTest.target(getPort(),""String_Node_Str"",null,apiKey).request(MediaType.APPLICATION_JSON_TYPE).get(WhoisResources.class);
  assertThat(result.getErrorMessages(),hasSize(0));
  final List<WhoisVersionInternal> versions=result.getVersionsInternal().getVersions();
  assertThat(versions,hasSize(1));
  LocalDateTime fromDate=parse(versions.get(0).getFrom(),DEFAULT_DATE_TIME_FORMATTER);
  LocalDateTime toDate=parse(versions.get(0).getTo(),DEFAULT_DATE_TIME_FORMATTER);
  assertThat(versions.get(0).getOperation(),is(Operation.UPDATE.toString()));
  assertThat(Period.fieldDifference(fromDate,toDate).getDays(),is(3));
}","@Test public void listVersions_created_deleted(){
  final RpslObjectUpdateInfo add=updateDao.createObject(RpslObject.parse(""String_Node_Str"" + ""String_Node_Str"" + ""String_Node_Str""));
  LocalDateTime deleteDate=new LocalDateTime().plusDays(3);
  testDateTimeProvider.setTime(deleteDate);
  updateDao.deleteObject(add.getObjectId(),""String_Node_Str"");
  final WhoisResources result=RestTest.target(getPort(),""String_Node_Str"",null,apiKey).request(MediaType.APPLICATION_JSON_TYPE).get(WhoisResources.class);
  assertThat(result.getErrorMessages(),hasSize(0));
  final List<WhoisVersionInternal> versions=result.getVersionsInternal().getVersions();
  assertThat(versions,hasSize(1));
  LocalDateTime fromDate=parse(versions.get(0).getFrom(),DEFAULT_DATE_TIME_FORMATTER);
  LocalDateTime toDate=parse(versions.get(0).getTo(),DEFAULT_DATE_TIME_FORMATTER);
  assertThat(versions.get(0).getOperation(),is(Operation.UPDATE.toString()));
  assertThat(new Period(fromDate,toDate).getDays(),is(3));
}",0.9889447236180904
161071,"@Test public void listVersions_created_deleted_recreated(){
  final RpslObject rpslObject=RpslObject.parse(""String_Node_Str"" + ""String_Node_Str"" + ""String_Node_Str"");
  final RpslObject person=RpslObject.parse(""String_Node_Str"" + ""String_Node_Str"" + ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str"");
  final RpslObjectUpdateInfo add=updateDao.createObject(rpslObject);
  updateDao.createObject(person);
  testDateTimeProvider.setTime(new LocalDateTime().plusDays(3));
  updateDao.deleteObject(add.getObjectId(),""String_Node_Str"");
  testDateTimeProvider.setTime(new LocalDateTime().plusDays(5));
  updateDao.createObject(rpslObject);
  final WhoisResources result=RestTest.target(getPort(),""String_Node_Str"",null,apiKey).request(MediaType.APPLICATION_JSON_TYPE).get(WhoisResources.class);
  String baseHref=""String_Node_Str"";
  assertThat(result.getErrorMessages(),hasSize(0));
  final List<WhoisVersionInternal> versions=result.getVersionsInternal().getVersions();
  assertThat(versions,hasSize(2));
  LocalDateTime fromDateFirst=parse(versions.get(0).getFrom(),DEFAULT_DATE_TIME_FORMATTER);
  LocalDateTime toDateFirst=parse(versions.get(0).getTo(),DEFAULT_DATE_TIME_FORMATTER);
  assertThat(Period.fieldDifference(fromDateFirst,toDateFirst).getDays(),is(3));
  assertThat(versions.get(0).getLink().toString(),containsString(baseHref + ""String_Node_Str""));
  LocalDateTime fromDateLast=parse(versions.get(1).getFrom(),DEFAULT_DATE_TIME_FORMATTER);
  assertThat(Period.fieldDifference(toDateFirst,fromDateLast).getDays(),is(2));
  assertThat(versions.get(1).getTo(),is(""String_Node_Str""));
  assertThat(versions.get(1).getLink().toString(),containsString(baseHref + ""String_Node_Str""));
}","@Test public void listVersions_created_deleted_recreated(){
  final RpslObject rpslObject=RpslObject.parse(""String_Node_Str"" + ""String_Node_Str"" + ""String_Node_Str"");
  final RpslObject person=RpslObject.parse(""String_Node_Str"" + ""String_Node_Str"" + ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str"");
  final RpslObjectUpdateInfo add=updateDao.createObject(rpslObject);
  updateDao.createObject(person);
  testDateTimeProvider.setTime(new LocalDateTime().plusDays(3));
  updateDao.deleteObject(add.getObjectId(),""String_Node_Str"");
  testDateTimeProvider.setTime(new LocalDateTime().plusDays(5));
  updateDao.createObject(rpslObject);
  final WhoisResources result=RestTest.target(getPort(),""String_Node_Str"",null,apiKey).request(MediaType.APPLICATION_JSON_TYPE).get(WhoisResources.class);
  String baseHref=""String_Node_Str"";
  assertThat(result.getErrorMessages(),hasSize(0));
  final List<WhoisVersionInternal> versions=result.getVersionsInternal().getVersions();
  assertThat(versions,hasSize(2));
  LocalDateTime fromDateFirst=parse(versions.get(0).getFrom(),DEFAULT_DATE_TIME_FORMATTER);
  LocalDateTime toDateFirst=parse(versions.get(0).getTo(),DEFAULT_DATE_TIME_FORMATTER);
  assertThat(new Period(fromDateFirst,toDateFirst).getDays(),is(3));
  assertThat(versions.get(0).getLink().toString(),containsString(baseHref + ""String_Node_Str""));
  LocalDateTime fromDateLast=parse(versions.get(1).getFrom(),DEFAULT_DATE_TIME_FORMATTER);
  assertThat(new Period(toDateFirst,fromDateLast).getDays(),is(2));
  assertThat(versions.get(1).getTo(),is(""String_Node_Str""));
  assertThat(versions.get(1).getLink().toString(),containsString(baseHref + ""String_Node_Str""));
}",0.9881305637982196
161072,"@Test public void listVersions_created_updated(){
  final RpslObjectUpdateInfo add=updateDao.createObject(RpslObject.parse(""String_Node_Str"" + ""String_Node_Str"" + ""String_Node_Str""));
  testDateTimeProvider.setTime(new LocalDateTime().plusDays(3));
  updateDao.updateObject(add.getObjectId(),RpslObject.parse(""String_Node_Str"" + ""String_Node_Str"" + ""String_Node_Str""+ ""String_Node_Str""));
  final WhoisResources result=RestTest.target(getPort(),""String_Node_Str"",null,apiKey).request(MediaType.APPLICATION_JSON_TYPE).get(WhoisResources.class);
  assertThat(result.getErrorMessages(),hasSize(0));
  final List<WhoisVersionInternal> versions=result.getVersionsInternal().getVersions();
  assertThat(versions,hasSize(2));
  final String fromFirst=versions.get(0).getFrom();
  final String toFirst=versions.get(0).getTo();
  final String fromLast=versions.get(1).getFrom();
  final String toLast=versions.get(1).getTo();
  final LocalDateTime fromDate=parse(fromFirst,DEFAULT_DATE_TIME_FORMATTER);
  final LocalDateTime toDate=parse(toFirst,DEFAULT_DATE_TIME_FORMATTER);
  final LocalDateTime fromLastDate=parse(fromLast,DEFAULT_DATE_TIME_FORMATTER);
  assertThat(Period.fieldDifference(fromDate,toDate).getDays(),is(3));
  assertThat(toDate,is(fromLastDate));
  assertThat(toLast,is(""String_Node_Str""));
}","@Test public void listVersions_created_updated(){
  final RpslObjectUpdateInfo add=updateDao.createObject(RpslObject.parse(""String_Node_Str"" + ""String_Node_Str"" + ""String_Node_Str""));
  testDateTimeProvider.setTime(new LocalDateTime().plusDays(3));
  updateDao.updateObject(add.getObjectId(),RpslObject.parse(""String_Node_Str"" + ""String_Node_Str"" + ""String_Node_Str""+ ""String_Node_Str""));
  final WhoisResources result=RestTest.target(getPort(),""String_Node_Str"",null,apiKey).request(MediaType.APPLICATION_JSON_TYPE).get(WhoisResources.class);
  assertThat(result.getErrorMessages(),hasSize(0));
  final List<WhoisVersionInternal> versions=result.getVersionsInternal().getVersions();
  assertThat(versions,hasSize(2));
  final String fromFirst=versions.get(0).getFrom();
  final String toFirst=versions.get(0).getTo();
  final String fromLast=versions.get(1).getFrom();
  final String toLast=versions.get(1).getTo();
  final LocalDateTime fromDate=parse(fromFirst,DEFAULT_DATE_TIME_FORMATTER);
  final LocalDateTime toDate=parse(toFirst,DEFAULT_DATE_TIME_FORMATTER);
  final LocalDateTime fromLastDate=parse(fromLast,DEFAULT_DATE_TIME_FORMATTER);
  assertThat(new Period(fromDate,toDate).getDays(),is(3));
  assertThat(toDate,is(fromLastDate));
  assertThat(toLast,is(""String_Node_Str""));
}",0.992283950617284
161073,"private WhoisResources createResponse(final HttpServletRequest request,final UpdateContext updateContext,final Update update){
  final WhoisResources whoisResources=new WhoisResources();
  final List<ErrorMessage> errorMessages=Lists.newArrayList();
  for (  Message message : updateContext.getGlobalMessages().getAllMessages()) {
    errorMessages.add(new ErrorMessage(message));
  }
  for (  Message message : updateContext.getMessages(update).getMessages().getAllMessages()) {
    errorMessages.add(new ErrorMessage(message));
  }
  for (  Map.Entry<RpslAttribute,Messages> entry : updateContext.getMessages(update).getAttributeMessages().entrySet()) {
    RpslAttribute rpslAttribute=entry.getKey();
    for (    Message message : entry.getValue().getAllMessages()) {
      errorMessages.add(new ErrorMessage(message,rpslAttribute));
    }
  }
  if (!errorMessages.isEmpty()) {
    whoisResources.setErrorMessages(errorMessages);
  }
  final PreparedUpdate preparedUpdate=updateContext.getPreparedUpdate(update);
  if (preparedUpdate != null) {
    whoisResources.setWhoisObjects(Collections.singletonList(whoisObjectMapper.map(preparedUpdate.getUpdatedObject(),RestServiceHelper.getServerAttributeMapper(request))));
  }
  whoisResources.setLink(new Link(""String_Node_Str"",RestServiceHelper.getRequestURL(request).replaceFirst(""String_Node_Str"",""String_Node_Str"")));
  whoisResources.includeTermsAndConditions();
  return whoisResources;
}","private WhoisResources createResponse(final HttpServletRequest request,final UpdateContext updateContext,final Update update){
  final WhoisResources whoisResources=new WhoisResources();
  final List<ErrorMessage> errorMessages=Lists.newArrayList();
  for (  Message message : updateContext.getGlobalMessages().getAllMessages()) {
    errorMessages.add(new ErrorMessage(message));
  }
  for (  Message message : updateContext.getMessages(update).getMessages().getAllMessages()) {
    errorMessages.add(new ErrorMessage(message));
  }
  for (  Map.Entry<RpslAttribute,Messages> entry : updateContext.getMessages(update).getAttributeMessages().entrySet()) {
    RpslAttribute rpslAttribute=entry.getKey();
    for (    Message message : entry.getValue().getAllMessages()) {
      errorMessages.add(new ErrorMessage(message,rpslAttribute));
    }
  }
  if (!errorMessages.isEmpty()) {
    whoisResources.setErrorMessages(errorMessages);
  }
  final PreparedUpdate preparedUpdate=updateContext.getPreparedUpdate(update);
  if (preparedUpdate != null) {
    final WhoisObject whoisObject=whoisObjectMapper.map(preparedUpdate.getUpdatedObject(),RestServiceHelper.getServerAttributeMapper(request.getQueryString()));
    whoisResources.setWhoisObjects(Collections.singletonList(whoisObject));
  }
  whoisResources.setLink(new Link(""String_Node_Str"",RestServiceHelper.getRequestURL(request).replaceFirst(""String_Node_Str"",""String_Node_Str"")));
  whoisResources.includeTermsAndConditions();
  return whoisResources;
}",0.9214092140921408
161074,"public static Class<? extends AttributeMapper> getServerAttributeMapper(HttpServletRequest request){
  return isQueryParamSet(request.getQueryString(),""String_Node_Str"") ? DirtyServerAttributeMapper.class : FormattedServerAttributeMapper.class;
}","public static Class<? extends AttributeMapper> getServerAttributeMapper(String queryString){
  return isQueryParamSet(queryString,""String_Node_Str"") ? DirtyServerAttributeMapper.class : FormattedServerAttributeMapper.class;
}",0.8577494692144374
161075,"public static boolean isQueryParamSet(final String queryString,final String key){
  if (queryString == null) {
    return false;
  }
  for (  String next : AMPERSAND_SPLITTER.split(queryString)) {
    final Iterator<String> iterator=EQUALS_SPLITTER.split(next).iterator();
    if (iterator.hasNext()) {
      if (iterator.next().equals(key) && (!iterator.hasNext() || iterator.next().equals(""String_Node_Str""))) {
        return true;
      }
    }
  }
  return false;
}","public static boolean isQueryParamSet(final String queryString,final String key){
  if (queryString == null) {
    return false;
  }
  for (  String next : AMPERSAND_SPLITTER.split(queryString)) {
    final Iterator<String> iterator=EQUALS_SPLITTER.split(next).iterator();
    if (iterator.hasNext()) {
      if (iterator.next().equals(key)) {
        if (!iterator.hasNext())         return true;
        String value=iterator.next();
        if (StringUtils.isEmpty(value) || value.equalsIgnoreCase(""String_Node_Str""))         return true;
      }
    }
  }
  return false;
}",0.8557784145176696
161076,"/** 
 * The search interface resembles a standard Whois client query with the extra features of multi-registry client, multiple response styles that can be selected via content negotiation and with an extensible URL parameters schema.
 */
@GET @Produces({MediaType.APPLICATION_XML,MediaType.APPLICATION_JSON}) @Path(""String_Node_Str"") public Response search(@Context final HttpServletRequest request,@QueryParam(""String_Node_Str"") final Set<String> sources,@QueryParam(""String_Node_Str"") final String searchKey,@QueryParam(""String_Node_Str"") final Set<String> inverseAttributes,@QueryParam(""String_Node_Str"") final Set<String> includeTags,@QueryParam(""String_Node_Str"") final Set<String> excludeTags,@QueryParam(""String_Node_Str"") final Set<String> types,@QueryParam(""String_Node_Str"") final Set<String> flags){
  validateSources(request,sources);
  validateSearchKey(request,searchKey);
  final Set<QueryFlag> separateFlags=splitInputFlags(request,flags);
  checkForInvalidFlags(request,separateFlags);
  final QueryBuilder queryBuilder=new QueryBuilder();
  queryBuilder.addFlag(QueryFlag.SHOW_TAG_INFO);
  queryBuilder.addCommaList(QueryFlag.SOURCES,sources);
  queryBuilder.addCommaList(QueryFlag.SELECT_TYPES,types);
  queryBuilder.addCommaList(QueryFlag.INVERSE,inverseAttributes);
  queryBuilder.addCommaList(QueryFlag.FILTER_TAG_INCLUDE,includeTags);
  queryBuilder.addCommaList(QueryFlag.FILTER_TAG_EXCLUDE,excludeTags);
  for (  QueryFlag separateFlag : separateFlags) {
    queryBuilder.addFlag(separateFlag);
  }
  final Query query=Query.parse(queryBuilder.build(searchKey),Query.Origin.REST);
  final Parameters parameters=new Parameters(new InverseAttributes(inverseAttributes),new TypeFilters(types),new Flags(separateFlags),new QueryStrings(new QueryString(searchKey)),new Sources(sources),null);
  final Service service=new Service(SERVICE_SEARCH);
  return handleQueryAndStreamResponse(query,request,InetAddresses.forString(request.getRemoteAddr()),parameters,service,getServerAttributeMapper(request));
}","/** 
 * The search interface resembles a standard Whois client query with the extra features of multi-registry client, multiple response styles that can be selected via content negotiation and with an extensible URL parameters schema.
 */
@GET @Produces({MediaType.APPLICATION_XML,MediaType.APPLICATION_JSON}) @Path(""String_Node_Str"") public Response search(@Context final HttpServletRequest request,@QueryParam(""String_Node_Str"") final Set<String> sources,@QueryParam(""String_Node_Str"") final String searchKey,@QueryParam(""String_Node_Str"") final Set<String> inverseAttributes,@QueryParam(""String_Node_Str"") final Set<String> includeTags,@QueryParam(""String_Node_Str"") final Set<String> excludeTags,@QueryParam(""String_Node_Str"") final Set<String> types,@QueryParam(""String_Node_Str"") final Set<String> flags){
  validateSources(request,sources);
  validateSearchKey(request,searchKey);
  final Set<QueryFlag> separateFlags=splitInputFlags(request,flags);
  checkForInvalidFlags(request,separateFlags);
  final QueryBuilder queryBuilder=new QueryBuilder();
  queryBuilder.addFlag(QueryFlag.SHOW_TAG_INFO);
  queryBuilder.addCommaList(QueryFlag.SOURCES,sources);
  queryBuilder.addCommaList(QueryFlag.SELECT_TYPES,types);
  queryBuilder.addCommaList(QueryFlag.INVERSE,inverseAttributes);
  queryBuilder.addCommaList(QueryFlag.FILTER_TAG_INCLUDE,includeTags);
  queryBuilder.addCommaList(QueryFlag.FILTER_TAG_EXCLUDE,excludeTags);
  for (  QueryFlag separateFlag : separateFlags) {
    queryBuilder.addFlag(separateFlag);
  }
  final Query query=Query.parse(queryBuilder.build(searchKey),Query.Origin.REST);
  final Parameters parameters=new Parameters(new InverseAttributes(inverseAttributes),new TypeFilters(types),new Flags(separateFlags),new QueryStrings(new QueryString(searchKey)),new Sources(sources),null);
  final Service service=new Service(SERVICE_SEARCH);
  return handleQueryAndStreamResponse(query,request,InetAddresses.forString(request.getRemoteAddr()),parameters,service);
}",0.9915296462381664
161077,"private Response handleQueryAndStreamResponse(final Query query,final HttpServletRequest request,final InetAddress remoteAddress,@Nullable final Parameters parameters,@Nullable final Service service,final Class<? extends AttributeMapper> attributeMapper){
  return Response.ok(new RpslObjectStreamer(request,query,remoteAddress,parameters,service,attributeMapper)).build();
}","private Response handleQueryAndStreamResponse(final Query query,final HttpServletRequest request,final InetAddress remoteAddress,@Nullable final Parameters parameters,@Nullable final Service service){
  return Response.ok(new RpslObjectStreamer(request,query,remoteAddress,parameters,service)).build();
}",0.8954344624447718
161078,"@GET @Produces({MediaType.APPLICATION_XML,MediaType.APPLICATION_JSON}) @Path(""String_Node_Str"") public Response lookup(@Context final HttpServletRequest request,@PathParam(""String_Node_Str"") final String source,@PathParam(""String_Node_Str"") final String objectType,@PathParam(""String_Node_Str"") final String key,@QueryParam(""String_Node_Str"") final List<String> passwords,@CookieParam(""String_Node_Str"") final String crowdTokenKey){
  if (!sourceContext.getAllSourceNames().contains(ciString(source))) {
    throw new WebApplicationException(Response.status(Response.Status.BAD_REQUEST).entity(createErrorEntity(request,RestMessages.invalidSource(source))).build());
  }
  QueryBuilder queryBuilder=new QueryBuilder().addFlag(QueryFlag.EXACT).addFlag(QueryFlag.NO_GROUPING).addFlag(QueryFlag.NO_REFERENCED).addFlag(QueryFlag.SHOW_TAG_INFO).addCommaList(QueryFlag.SOURCES,source).addCommaList(QueryFlag.SELECT_TYPES,ObjectType.getByName(objectType).getName());
  if (isQueryParamSet(request.getQueryString(),""String_Node_Str"")) {
    queryBuilder.addFlag(QueryFlag.NO_FILTERING);
  }
  try {
    final Query query=Query.parse(queryBuilder.build(key),crowdTokenKey,passwords).setMatchPrimaryKeyOnly(true);
    return handleQueryAndStreamResponse(query,request,InetAddresses.forString(request.getRemoteAddr()),null,null,getServerAttributeMapper(request));
  }
 catch (  QueryException e) {
    throw getWebApplicationException(e,request,Lists.<Message>newArrayList());
  }
}","@GET @Produces({MediaType.APPLICATION_XML,MediaType.APPLICATION_JSON}) @Path(""String_Node_Str"") public Response lookup(@Context final HttpServletRequest request,@PathParam(""String_Node_Str"") final String source,@PathParam(""String_Node_Str"") final String objectType,@PathParam(""String_Node_Str"") final String key,@QueryParam(""String_Node_Str"") final List<String> passwords,@CookieParam(""String_Node_Str"") final String crowdTokenKey){
  if (!sourceContext.getAllSourceNames().contains(ciString(source))) {
    throw new WebApplicationException(Response.status(Response.Status.BAD_REQUEST).entity(createErrorEntity(request,RestMessages.invalidSource(source))).build());
  }
  QueryBuilder queryBuilder=new QueryBuilder().addFlag(QueryFlag.EXACT).addFlag(QueryFlag.NO_GROUPING).addFlag(QueryFlag.NO_REFERENCED).addFlag(QueryFlag.SHOW_TAG_INFO).addCommaList(QueryFlag.SOURCES,source).addCommaList(QueryFlag.SELECT_TYPES,ObjectType.getByName(objectType).getName());
  if (isQueryParamSet(request.getQueryString(),""String_Node_Str"")) {
    queryBuilder.addFlag(QueryFlag.NO_FILTERING);
  }
  try {
    final Query query=Query.parse(queryBuilder.build(key),crowdTokenKey,passwords).setMatchPrimaryKeyOnly(true);
    return handleQueryAndStreamResponse(query,request,InetAddresses.forString(request.getRemoteAddr()),null,null);
  }
 catch (  QueryException e) {
    throw getWebApplicationException(e,request,Lists.<Message>newArrayList());
  }
}",0.9883081155433288
161079,"public RpslObjectStreamer(final HttpServletRequest request,final Query query,final InetAddress remoteAddress,final Parameters parameters,final Service service,final Class<? extends AttributeMapper> attributeMapper){
  this.request=request;
  this.query=query;
  this.remoteAddress=remoteAddress;
  this.parameters=parameters;
  this.service=service;
  this.attributeMapper=attributeMapper;
}","public RpslObjectStreamer(final HttpServletRequest request,final Query query,final InetAddress remoteAddress,final Parameters parameters,final Service service){
  this.request=request;
  this.query=query;
  this.remoteAddress=remoteAddress;
  this.parameters=parameters;
  this.service=service;
  this.attributeMapper=RestServiceHelper.getServerAttributeMapper(request.getQueryString());
}",0.8589743589743589
161080,"private RpslObject getSubmittedObject(final HttpServletRequest request,final WhoisResources whoisResources){
  if (whoisResources.getWhoisObjects().isEmpty() || whoisResources.getWhoisObjects().size() > 1) {
    throw new WebApplicationException(Response.status(Response.Status.BAD_REQUEST).entity(createErrorEntity(request,RestMessages.singleObjectExpected(whoisResources.getWhoisObjects().size()))).build());
  }
  return whoisObjectMapper.map(whoisResources.getWhoisObjects().get(0),getServerAttributeMapper(request));
}","private RpslObject getSubmittedObject(final HttpServletRequest request,final WhoisResources whoisResources){
  if (whoisResources.getWhoisObjects().isEmpty() || whoisResources.getWhoisObjects().size() > 1) {
    throw new WebApplicationException(Response.status(Response.Status.BAD_REQUEST).entity(createErrorEntity(request,RestMessages.singleObjectExpected(whoisResources.getWhoisObjects().size()))).build());
  }
  return whoisObjectMapper.map(whoisResources.getWhoisObjects().get(0),getServerAttributeMapper(request.getQueryString()));
}",0.9840075258701788
161081,"@Override public Collection<Attribute> map(RpslAttribute rpslAttribute,String source){
  final Set<CIString> cleanValues=rpslAttribute.getCleanValues();
  if (cleanValues.size() == 1) {
    final CIString cleanValue=cleanValues.iterator().next();
    final String referencedType=(rpslAttribute.getType() != null) ? referencedTypeResolver.getReferencedType(rpslAttribute.getType(),cleanValue) : null;
    final Link link=(referencedType != null) ? createLink(source,referencedType,cleanValue.toString()) : null;
    return Collections.singleton(new Attribute(rpslAttribute.getKey(),rpslAttribute.getValue(),null,referencedType,link));
  }
 else {
    return Collections.singleton(new Attribute(rpslAttribute.getKey(),rpslAttribute.getValue(),null,null,null));
  }
}","@Override public Collection<Attribute> map(RpslAttribute rpslAttribute,String source){
  final Set<CIString> cleanValues=rpslAttribute.getCleanValues();
  if (cleanValues.size() == 1) {
    final CIString cleanValue=cleanValues.iterator().next();
    final String referencedType=(rpslAttribute.getType() != null) ? referencedTypeResolver.getReferencedType(rpslAttribute.getType(),cleanValue) : null;
    final Link link=(referencedType != null) ? createLink(source,referencedType,cleanValue.toString()) : null;
    return Collections.singleton(new Attribute(rpslAttribute.getKey(),rpslAttribute.getFormattedValue(),null,referencedType,link));
  }
 else {
    return Collections.singleton(new Attribute(rpslAttribute.getKey(),rpslAttribute.getFormattedValue(),null,null,null));
  }
}",0.9883570504527812
161082,"@Test @Ignore(""String_Node_Str"") public void lookup_inet6num_without_prefix_length() throws InterruptedException {
  databaseHelper.addObject(""String_Node_Str"" + ""String_Node_Str"" + ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str"");
  databaseHelper.addObject(""String_Node_Str"" + ""String_Node_Str"" + ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str"");
  ipTreeUpdater.rebuild();
  Thread.sleep(Long.MAX_VALUE);
  RestTest.target(getPort(),""String_Node_Str"").request().get(WhoisResources.class);
}","@Test(expected=NotFoundException.class) public void lookup_inet6num_without_prefix_length() throws InterruptedException {
  databaseHelper.addObject(""String_Node_Str"" + ""String_Node_Str"" + ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str"");
  ipTreeUpdater.rebuild();
  RestTest.target(getPort(),""String_Node_Str"").request().get(WhoisResources.class);
}",0.601420678768745
161083,"@Override public Boolean call() throws Exception {
  for (  MimeMessage message : messages) {
    if (message.getRecipients(Message.RecipientType.TO)[0].toString().equalsIgnoreCase(to)) {
      this.message=message;
      return true;
    }
  }
  return false;
}","@Override public Boolean call() throws Exception {
synchronized (messages) {
    for (    MimeMessage message : messages) {
      if (message.getRecipients(Message.RecipientType.TO)[0].toString().equalsIgnoreCase(to)) {
        this.message=message;
        return true;
      }
    }
  }
  return false;
}",0.9225352112676056
161084,"@GET @Produces({MediaType.APPLICATION_XML,MediaType.APPLICATION_JSON}) @Path(""String_Node_Str"") public Response lookup(@Context final HttpServletRequest request,@PathParam(""String_Node_Str"") final String source,@PathParam(""String_Node_Str"") final String objectType,@PathParam(""String_Node_Str"") final String key,@QueryParam(""String_Node_Str"") final List<String> passwords,@CookieParam(""String_Node_Str"") final String crowdTokenKey){
  if (!sourceContext.getAllSourceNames().contains(ciString(source))) {
    throw new WebApplicationException(Response.status(Response.Status.BAD_REQUEST).entity(createErrorEntity(request,RestMessages.invalidSource(source))).build());
  }
  QueryBuilder queryBuilder=new QueryBuilder().addFlag(QueryFlag.EXACT).addFlag(QueryFlag.NO_GROUPING).addFlag(QueryFlag.NO_REFERENCED).addFlag(QueryFlag.SHOW_TAG_INFO).addCommaList(QueryFlag.SOURCES,source).addCommaList(QueryFlag.SELECT_TYPES,ObjectType.getByName(objectType).getName());
  if (isQueryParamSet(request.getQueryString(),""String_Node_Str"")) {
    queryBuilder.addFlag(QueryFlag.NO_FILTERING);
  }
  final Query query=Query.parse(queryBuilder.build(key),crowdTokenKey,passwords);
  return handleQueryAndStreamResponse(query,request,InetAddresses.forString(request.getRemoteAddr()),null,null);
}","@GET @Produces({MediaType.APPLICATION_XML,MediaType.APPLICATION_JSON}) @Path(""String_Node_Str"") public Response lookup(@Context final HttpServletRequest request,@PathParam(""String_Node_Str"") final String source,@PathParam(""String_Node_Str"") final String objectType,@PathParam(""String_Node_Str"") final String key,@QueryParam(""String_Node_Str"") final List<String> passwords,@CookieParam(""String_Node_Str"") final String crowdTokenKey){
  if (!sourceContext.getAllSourceNames().contains(ciString(source))) {
    throw new WebApplicationException(Response.status(Response.Status.BAD_REQUEST).entity(createErrorEntity(request,RestMessages.invalidSource(source))).build());
  }
  QueryBuilder queryBuilder=new QueryBuilder().addFlag(QueryFlag.EXACT).addFlag(QueryFlag.NO_GROUPING).addFlag(QueryFlag.NO_REFERENCED).addFlag(QueryFlag.SHOW_TAG_INFO).addCommaList(QueryFlag.SOURCES,source).addCommaList(QueryFlag.SELECT_TYPES,ObjectType.getByName(objectType).getName());
  if (isQueryParamSet(request.getQueryString(),""String_Node_Str"")) {
    queryBuilder.addFlag(QueryFlag.NO_FILTERING);
  }
  final Query query=Query.parse(queryBuilder.build(key),crowdTokenKey,passwords);
  query.setMatchPrimaryKeyOnly(true);
  return handleQueryAndStreamResponse(query,request,InetAddresses.forString(request.getRemoteAddr()),null,null);
}",0.985362095531587
161085,"@Override public boolean supports(final Query query){
  if ((!query.hasOptions() && query.isHelp()) || query.isSystemInfo() || query.isTemplate()|| query.isVerbose()|| query.isVersionList()|| query.isObjectVersion()|| query.isVersionDiff()) {
    return false;
  }
  return true;
}","@Override public boolean supports(final Query query){
  if ((!query.hasOptions() && query.isHelp()) || query.isSystemInfo() || query.isTemplate()|| query.isVerbose()|| query.isVersionList()|| query.isObjectVersion()|| query.isVersionDiff()|| query.isMatchPrimaryKeyOnly()) {
    return false;
  }
  return true;
}",0.9461279461279462
161086,"public void addValidationMessagesForAttributeTemplate(ObjectMessages objectMessages,AttributeTemplate attributeTemplate,Map<AttributeType,Integer> attributeCount){
  final AttributeType attributeType=attributeTemplate.getAttributeType();
  final int attributeTypeCount=attributeCount.get(attributeType);
  if (attributeTemplate.getRequirement() == MANDATORY && attributeTypeCount == 0) {
    objectMessages.addMessage(ValidationMessages.missingMandatoryAttribute(attributeType));
  }
  if (attributeTemplate.getCardinality() == SINGLE && attributeTypeCount > 1) {
    objectMessages.addMessage(ValidationMessages.tooManyAttributesOfType(attributeType));
  }
}","public void addValidationMessagesForAttributeTemplate(ObjectMessages objectMessages,AttributeTemplate attributeTemplate,Map<AttributeType,Integer> attributeCount){
  final AttributeType attributeType=attributeTemplate.getAttributeType();
  final int attributeTypeCount=attributeCount.get(attributeType);
  if (attributeTemplate.getRequirement() == MANDATORY && attributeTypeCount == 0) {
    objectMessages.addMessage(ValidationMessages.missingMandatoryAttribute(attributeType));
  }
  if ((attributeTemplate.getCardinality() == SINGLE || attributeTemplate.getRequirement() == GENERATED) && attributeTypeCount > 1) {
    objectMessages.addMessage(ValidationMessages.tooManyAttributesOfType(attributeType));
  }
}",0.9613420860685632
161087,"public ObjectMessages validate(final RpslObject rpslObject){
  final ObjectMessages objectMessages=new ObjectMessages();
  final ObjectType rpslObjectType=rpslObject.getType();
  final Map<AttributeType,Integer> attributeCount=Maps.newEnumMap(AttributeType.class);
  for (  final AttributeTemplate attributeTemplate : attributeTemplates) {
    attributeCount.put(attributeTemplate.getAttributeType(),0);
  }
  for (  final RpslAttribute attribute : rpslObject.getAttributes()) {
    final AttributeType attributeType=attribute.getType();
    if (attributeType == null) {
      objectMessages.addMessage(attribute,ValidationMessages.unknownAttribute(attribute.getKey()));
    }
 else {
      final AttributeTemplate attributeTemplate=attributeTemplateMap.get(attributeType);
      if (attributeTemplate == null) {
        objectMessages.addMessage(attribute,ValidationMessages.invalidAttributeForObject(attributeType));
      }
 else       if (!attributeTemplate.getRequirement().equals(GENERATED)) {
        attribute.validateSyntax(rpslObjectType,objectMessages);
        attributeCount.put(attributeType,attributeCount.get(attributeType) + 1);
      }
    }
  }
  for (  final AttributeTemplate attributeTemplate : attributeTemplates) {
    addValidationMessagesForAttributeTemplate(objectMessages,attributeTemplate,attributeCount);
  }
  return objectMessages;
}","public ObjectMessages validate(final RpslObject rpslObject){
  final ObjectMessages objectMessages=new ObjectMessages();
  final ObjectType rpslObjectType=rpslObject.getType();
  final Map<AttributeType,Integer> attributeCount=Maps.newEnumMap(AttributeType.class);
  for (  final AttributeTemplate attributeTemplate : attributeTemplates) {
    attributeCount.put(attributeTemplate.getAttributeType(),0);
  }
  for (  final RpslAttribute attribute : rpslObject.getAttributes()) {
    final AttributeType attributeType=attribute.getType();
    if (attributeType == null) {
      objectMessages.addMessage(attribute,ValidationMessages.unknownAttribute(attribute.getKey()));
    }
 else {
      final AttributeTemplate attributeTemplate=attributeTemplateMap.get(attributeType);
      if (attributeTemplate == null) {
        objectMessages.addMessage(attribute,ValidationMessages.invalidAttributeForObject(attributeType));
      }
 else {
        attribute.validateSyntax(rpslObjectType,objectMessages);
        attributeCount.put(attributeType,attributeCount.get(attributeType) + 1);
      }
    }
  }
  for (  final AttributeTemplate attributeTemplate : attributeTemplates) {
    addValidationMessagesForAttributeTemplate(objectMessages,attributeTemplate,attributeCount);
  }
  return objectMessages;
}",0.975609756097561
161088,"@Override public void start(){
  if (!nrtmEnabled) {
    LOGGER.warn(""String_Node_Str"");
    return;
  }
  serverChannel=bootstrapChannel(nrtmServerPipelineFactory,port,""String_Node_Str"");
  serverChannelLegacy=bootstrapChannel(legacyNrtmServerPipelineFactory,legacyPort,""String_Node_Str"");
  port=((InetSocketAddress)serverChannel.getLocalAddress()).getPort();
  legacyPort=((InetSocketAddress)serverChannelLegacy.getLocalAddress()).getPort();
}","@Override public void start(){
  if (!nrtmEnabled) {
    LOGGER.warn(""String_Node_Str"");
    return;
  }
  serverChannel=bootstrapChannel(nrtmServerPipelineFactory,nrtmPort,""String_Node_Str"");
  serverChannelLegacy=bootstrapChannel(legacyNrtmServerPipelineFactory,nrtmPortLegacy,""String_Node_Str"");
  port=((InetSocketAddress)serverChannel.getLocalAddress()).getPort();
  legacyPort=((InetSocketAddress)serverChannelLegacy.getLocalAddress()).getPort();
}",0.9666666666666668
161089,"@Before public void before() throws Exception {
  databaseHelper.addObject(MNTNER);
  databaseHelper.addObjectToSource(""String_Node_Str"",MNTNER);
  databaseHelper.addObjectToSource(""String_Node_Str"",MNTNER);
  databaseHelper.addObjectToSource(""String_Node_Str"",MNTNER);
  nrtmServer.start();
  System.setProperty(""String_Node_Str"",""String_Node_Str"");
  System.setProperty(""String_Node_Str"",""String_Node_Str"");
  System.setProperty(""String_Node_Str"",Integer.toString(NrtmServer.port));
  System.setProperty(""String_Node_Str"",""String_Node_Str"");
  System.setProperty(""String_Node_Str"",""String_Node_Str"");
  System.setProperty(""String_Node_Str"",Integer.toString(NrtmServer.port));
  System.setProperty(""String_Node_Str"",""String_Node_Str"");
  System.setProperty(""String_Node_Str"",""String_Node_Str"");
  System.setProperty(""String_Node_Str"",Integer.toString(NrtmServer.port));
  nrtmImporter.start();
}","@Before public void before() throws Exception {
  databaseHelper.addObject(MNTNER);
  databaseHelper.addObjectToSource(""String_Node_Str"",MNTNER);
  databaseHelper.addObjectToSource(""String_Node_Str"",MNTNER);
  databaseHelper.addObjectToSource(""String_Node_Str"",MNTNER);
  nrtmServer.start();
  System.setProperty(""String_Node_Str"",""String_Node_Str"");
  System.setProperty(""String_Node_Str"",""String_Node_Str"");
  System.setProperty(""String_Node_Str"",Integer.toString(NrtmServer.getPort()));
  System.setProperty(""String_Node_Str"",""String_Node_Str"");
  System.setProperty(""String_Node_Str"",""String_Node_Str"");
  System.setProperty(""String_Node_Str"",Integer.toString(NrtmServer.getPort()));
  System.setProperty(""String_Node_Str"",""String_Node_Str"");
  System.setProperty(""String_Node_Str"",""String_Node_Str"");
  System.setProperty(""String_Node_Str"",Integer.toString(NrtmServer.getPort()));
  nrtmImporter.start();
}",0.9784172661870504
161090,"@Test public void network_error() throws Exception {
  final RpslObject person=RpslObject.parse(""String_Node_Str"" + ""String_Node_Str"" + ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str"");
  databaseHelper.addObject(person);
  objectExists(ObjectType.PERSON,""String_Node_Str"",true);
  nrtmImporter.stop(true);
  nrtmServer.stop(true);
  final RpslObject person2=RpslObject.parse(""String_Node_Str"" + ""String_Node_Str"" + ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str"");
  databaseHelper.addObject(person2);
  nrtmServer.start();
  System.setProperty(""String_Node_Str"",Integer.toString(NrtmServer.port));
  nrtmImporter.start();
  objectExists(ObjectType.PERSON,""String_Node_Str"",true);
}","@Test public void network_error() throws Exception {
  final RpslObject person=RpslObject.parse(""String_Node_Str"" + ""String_Node_Str"" + ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str"");
  databaseHelper.addObject(person);
  objectExists(ObjectType.PERSON,""String_Node_Str"",true);
  nrtmImporter.stop(true);
  nrtmServer.stop(true);
  final RpslObject person2=RpslObject.parse(""String_Node_Str"" + ""String_Node_Str"" + ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str"");
  databaseHelper.addObject(person2);
  nrtmServer.start();
  System.setProperty(""String_Node_Str"",Integer.toString(NrtmServer.getPort()));
  nrtmImporter.start();
  objectExists(ObjectType.PERSON,""String_Node_Str"",true);
}",0.9907341411261582
161091,"@Before public void before() throws Exception {
  databaseHelper.addObject(MNTNER);
  databaseHelper.addObjectToSource(""String_Node_Str"",MNTNER);
  nrtmServer.start();
  System.setProperty(""String_Node_Str"",""String_Node_Str"");
  System.setProperty(""String_Node_Str"",""String_Node_Str"");
  System.setProperty(""String_Node_Str"",Integer.toString(NrtmServer.port));
  nrtmImporter.start();
}","@Before public void before() throws Exception {
  databaseHelper.addObject(MNTNER);
  databaseHelper.addObjectToSource(""String_Node_Str"",MNTNER);
  nrtmServer.start();
  System.setProperty(""String_Node_Str"",""String_Node_Str"");
  System.setProperty(""String_Node_Str"",""String_Node_Str"");
  System.setProperty(""String_Node_Str"",Integer.toString(NrtmServer.getPort()));
  nrtmImporter.start();
}",0.9832689832689832
161092,"@Test public void add_person_from_nrtm_gap_in_serials() throws Exception {
  final RpslObject person=RpslObject.parse(""String_Node_Str"" + ""String_Node_Str"" + ""String_Node_Str""+ ""String_Node_Str"");
  nrtmImporter.stop(true);
  nrtmServer.stop(true);
  final RpslObject rpslObject=databaseHelper.addObject(""String_Node_Str"");
  databaseHelper.getWhoisTemplate().update(""String_Node_Str"",rpslObject.getObjectId());
  databaseHelper.addObject(person);
  nrtmServer.start();
  System.setProperty(""String_Node_Str"",Integer.toString(NrtmServer.port));
  nrtmImporter.start();
  objectExists(ObjectType.PERSON,""String_Node_Str"",true);
}","@Test public void add_person_from_nrtm_gap_in_serials() throws Exception {
  final RpslObject person=RpslObject.parse(""String_Node_Str"" + ""String_Node_Str"" + ""String_Node_Str""+ ""String_Node_Str"");
  nrtmImporter.stop(true);
  nrtmServer.stop(true);
  final RpslObject rpslObject=databaseHelper.addObject(""String_Node_Str"");
  databaseHelper.getWhoisTemplate().update(""String_Node_Str"",rpslObject.getObjectId());
  databaseHelper.addObject(person);
  nrtmServer.start();
  System.setProperty(""String_Node_Str"",Integer.toString(NrtmServer.getPort()));
  nrtmImporter.start();
  objectExists(ObjectType.PERSON,""String_Node_Str"",true);
}",0.9896907216494846
161093,"@Override public void run(){
  PrintWriter out=null;
  BufferedReader in=null;
  Socket socket=null;
  try {
    socket=new Socket(""String_Node_Str"",NrtmServer.port);
    socket.setSoTimeout(1000);
    out=new PrintWriter(socket.getOutputStream(),true);
    in=new BufferedReader(new InputStreamReader(socket.getInputStream(),ChannelUtil.BYTE_ENCODING));
    out.println(query);
    for (; ; ) {
      try {
        String line=in.readLine();
        if (line == null) {
          error=""String_Node_Str"";
          return;
        }
        if (line.startsWith(""String_Node_Str"")) {
          error=line;
          return;
        }
        if (line.startsWith(""String_Node_Str"")) {
          addCount++;
          signalLatch(line.substring(4));
        }
        if (line.startsWith(""String_Node_Str"")) {
          delCount++;
          signalLatch(line.substring(4));
        }
      }
 catch (      SocketTimeoutException ignored) {
      }
      if (stop) {
        return;
      }
    }
  }
 catch (  Exception e) {
    error=e.getMessage();
  }
 finally {
    IOUtils.closeQuietly(out);
    IOUtils.closeQuietly(in);
    if (socket != null) {
      try {
        socket.close();
      }
 catch (      IOException ignored) {
      }
    }
  }
}","@Override public void run(){
  PrintWriter out=null;
  BufferedReader in=null;
  Socket socket=null;
  try {
    socket=new Socket(""String_Node_Str"",NrtmServer.getPort());
    socket.setSoTimeout(1000);
    out=new PrintWriter(socket.getOutputStream(),true);
    in=new BufferedReader(new InputStreamReader(socket.getInputStream(),ChannelUtil.BYTE_ENCODING));
    out.println(query);
    for (; ; ) {
      try {
        String line=in.readLine();
        if (line == null) {
          error=""String_Node_Str"";
          return;
        }
        if (line.startsWith(""String_Node_Str"")) {
          error=line;
          return;
        }
        if (line.startsWith(""String_Node_Str"")) {
          addCount++;
          signalLatch(line.substring(4));
        }
        if (line.startsWith(""String_Node_Str"")) {
          delCount++;
          signalLatch(line.substring(4));
        }
      }
 catch (      SocketTimeoutException ignored) {
      }
      if (stop) {
        return;
      }
    }
  }
 catch (  Exception e) {
    error=e.getMessage();
  }
 finally {
    IOUtils.closeQuietly(out);
    IOUtils.closeQuietly(in);
    if (socket != null) {
      try {
        socket.close();
      }
 catch (      IOException ignored) {
      }
    }
  }
}",0.9948145193458316
161094,"@Test public void dontHangOnHugeAutNumObject() throws Exception {
  String response=DummyWhoisClient.query(NrtmServer.port,String.format(""String_Node_Str"",MIN_RANGE,MAX_RANGE),5 * 1000);
  assertTrue(response,response.contains(String.format(""String_Node_Str"",MIN_RANGE)));
  assertTrue(response,response.contains(String.format(""String_Node_Str"",MIN_RANGE + 1)));
}","@Test public void dontHangOnHugeAutNumObject() throws Exception {
  String response=DummyWhoisClient.query(NrtmServer.getPort(),String.format(""String_Node_Str"",MIN_RANGE,MAX_RANGE),5 * 1000);
  assertTrue(response,response.contains(String.format(""String_Node_Str"",MIN_RANGE)));
  assertTrue(response,response.contains(String.format(""String_Node_Str"",MIN_RANGE + 1)));
}",0.9822646657571624
161095,"@Test public void queryKeepAliveOnePreExistingObjectsOneNewObject() throws Exception {
  databaseHelper.addObject(RpslObject.parse(""String_Node_Str""));
  AsyncNrtmClient client=new AsyncNrtmClient(NrtmServer.port,""String_Node_Str"",(updateInterval + 1));
  client.start();
  super.databaseHelper.addObject(RpslObject.parse(""String_Node_Str""));
  String response=client.end();
  assertThat(response,containsString(""String_Node_Str""));
  assertThat(response,containsString(""String_Node_Str""));
}","@Test public void queryKeepAliveOnePreExistingObjectsOneNewObject() throws Exception {
  databaseHelper.addObject(RpslObject.parse(""String_Node_Str""));
  AsyncNrtmClient client=new AsyncNrtmClient(NrtmServer.getPort(),""String_Node_Str"",(updateInterval + 1));
  client.start();
  super.databaseHelper.addObject(RpslObject.parse(""String_Node_Str""));
  String response=client.end();
  assertThat(response,containsString(""String_Node_Str""));
  assertThat(response,containsString(""String_Node_Str""));
}",0.98685540950455
161096,"@Test public void emptyQuery() throws Exception {
  final String response=DummyWhoisClient.query(NrtmServer.port,""String_Node_Str"");
  assertThat(response,containsString(""String_Node_Str""));
}","@Test public void emptyQuery() throws Exception {
  final String response=DummyWhoisClient.query(NrtmServer.getPort(),""String_Node_Str"");
  assertThat(response,containsString(""String_Node_Str""));
}",0.9820051413881749
161097,"@Test public void sourcesQuery() throws Exception {
  final String response=DummyWhoisClient.query(NrtmServer.port,""String_Node_Str"");
  assertThat(response,containsString(""String_Node_Str""));
}","@Test public void sourcesQuery() throws Exception {
  final String response=DummyWhoisClient.query(NrtmServer.getPort(),""String_Node_Str"");
  assertThat(response,containsString(""String_Node_Str""));
}",0.9821882951653944
161098,"@Test public void queryKeepAliveNoPreExistingObjectsOneNewObject() throws Exception {
  databaseHelper.addObject(RpslObject.parse(""String_Node_Str""));
  AsyncNrtmClient client=new AsyncNrtmClient(NrtmServer.port,""String_Node_Str"",(updateInterval + 1));
  client.start();
  databaseHelper.addObject(RpslObject.parse(""String_Node_Str""));
  String response=client.end();
  assertThat(response,containsString(""String_Node_Str""));
}","@Test public void queryKeepAliveNoPreExistingObjectsOneNewObject() throws Exception {
  databaseHelper.addObject(RpslObject.parse(""String_Node_Str""));
  AsyncNrtmClient client=new AsyncNrtmClient(NrtmServer.getPort(),""String_Node_Str"",(updateInterval + 1));
  client.start();
  databaseHelper.addObject(RpslObject.parse(""String_Node_Str""));
  String response=client.end();
  assertThat(response,containsString(""String_Node_Str""));
}",0.9848661233993016
161099,"@Test public void mirrorQueryMultipleSerialEntry() throws Exception {
  databaseHelper.addObject(""String_Node_Str"");
  databaseHelper.addObject(""String_Node_Str"");
  databaseHelper.addObject(""String_Node_Str"");
  final String response=DummyWhoisClient.query(NrtmServer.port,""String_Node_Str"");
  assertThat(response,containsString(""String_Node_Str""));
  assertThat(response,containsString(""String_Node_Str""));
  assertThat(response,containsString(""String_Node_Str""));
  assertThat(response,containsString(""String_Node_Str""));
  assertThat(response,containsString(""String_Node_Str""));
  assertThat(response,containsString(""String_Node_Str""));
}","@Test public void mirrorQueryMultipleSerialEntry() throws Exception {
  databaseHelper.addObject(""String_Node_Str"");
  databaseHelper.addObject(""String_Node_Str"");
  databaseHelper.addObject(""String_Node_Str"");
  final String response=DummyWhoisClient.query(NrtmServer.getPort(),""String_Node_Str"");
  assertThat(response,containsString(""String_Node_Str""));
  assertThat(response,containsString(""String_Node_Str""));
  assertThat(response,containsString(""String_Node_Str""));
  assertThat(response,containsString(""String_Node_Str""));
  assertThat(response,containsString(""String_Node_Str""));
  assertThat(response,containsString(""String_Node_Str""));
}",0.9899302865995352
161100,"@Test public void mirrorQueryOutofRange() throws Exception {
  databaseHelper.addObject(""String_Node_Str"");
  final String response=DummyWhoisClient.query(NrtmServer.port,""String_Node_Str"");
  assertThat(response,containsString(""String_Node_Str""));
}","@Test public void mirrorQueryOutofRange() throws Exception {
  databaseHelper.addObject(""String_Node_Str"");
  final String response=DummyWhoisClient.query(NrtmServer.getPort(),""String_Node_Str"");
  assertThat(response,containsString(""String_Node_Str""));
}",0.9742574257425742
161101,"@Test public void versionQuery() throws Exception {
  final String response=DummyWhoisClient.query(NrtmServer.port,""String_Node_Str"");
  assertThat(response,containsString(""String_Node_Str""));
}","@Test public void versionQuery() throws Exception {
  final String response=DummyWhoisClient.query(NrtmServer.getPort(),""String_Node_Str"");
  assertThat(response,containsString(""String_Node_Str""));
}",0.9821882951653944
161102,"@Test public void mirrorQueryOneSerialEntry() throws Exception {
  databaseHelper.addObject(""String_Node_Str"");
  final String response=DummyWhoisClient.query(NrtmServer.port,""String_Node_Str"");
  assertThat(response,containsString(""String_Node_Str""));
}","@Test public void mirrorQueryOneSerialEntry() throws Exception {
  databaseHelper.addObject(""String_Node_Str"");
  final String response=DummyWhoisClient.query(NrtmServer.getPort(),""String_Node_Str"");
  assertThat(response,containsString(""String_Node_Str""));
}",0.9746588693957114
161103,"@Test public void queryKeepaliveNoPreExistingObjects() throws Exception {
  final String response=DummyWhoisClient.query(NrtmServer.port,""String_Node_Str"",(updateInterval + 1) * 1000);
  assertThat(response,containsString(""String_Node_Str""));
}","@Test public void queryKeepaliveNoPreExistingObjects() throws Exception {
  final String response=DummyWhoisClient.query(NrtmServer.getPort(),""String_Node_Str"",(updateInterval + 1) * 1000);
  assertThat(response,containsString(""String_Node_Str""));
}",0.973630831643002
161104,"@Test public void mirrorQueryWithLastKeyword() throws Exception {
  databaseHelper.addObject(""String_Node_Str"");
  databaseHelper.addObject(""String_Node_Str"");
  databaseHelper.addObject(""String_Node_Str"");
  final String response=DummyWhoisClient.query(NrtmServer.port,""String_Node_Str"");
  assertThat(response,containsString(""String_Node_Str""));
  assertThat(response,containsString(""String_Node_Str""));
}","@Test public void mirrorQueryWithLastKeyword() throws Exception {
  databaseHelper.addObject(""String_Node_Str"");
  databaseHelper.addObject(""String_Node_Str"");
  databaseHelper.addObject(""String_Node_Str"");
  final String response=DummyWhoisClient.query(NrtmServer.getPort(),""String_Node_Str"");
  assertThat(response,containsString(""String_Node_Str""));
  assertThat(response,containsString(""String_Node_Str""));
}",0.984126984126984
161105,"@Test public void mirrorQueryLegacyStillAvailable() throws Exception {
  databaseHelper.addObject(""String_Node_Str"" + ""String_Node_Str"" + ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str"");
  final String legacyResponse=DummyWhoisClient.query(NrtmServer.legacyPort,""String_Node_Str"");
  assertThat(legacyResponse,containsString(""String_Node_Str""));
  final String response=DummyWhoisClient.query(NrtmServer.port,""String_Node_Str"");
  assertThat(response,not(containsString(""String_Node_Str"")));
  assertThat(response,containsString(""String_Node_Str"" + ""String_Node_Str"" + ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""));
}","@Test public void mirrorQueryLegacyStillAvailable() throws Exception {
  databaseHelper.addObject(""String_Node_Str"" + ""String_Node_Str"" + ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str"");
  final String legacyResponse=DummyWhoisClient.query(NrtmServer.getLegacyPort(),""String_Node_Str"");
  assertThat(legacyResponse,containsString(""String_Node_Str""));
  final String response=DummyWhoisClient.query(NrtmServer.getPort(),""String_Node_Str"");
  assertThat(response,not(containsString(""String_Node_Str"")));
  assertThat(response,containsString(""String_Node_Str"" + ""String_Node_Str"" + ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""));
}",0.9853157121879588
161106,"@Test public void lookup_mntner_xml_text(){
  final String result=RestTest.target(getPort(),""String_Node_Str"").request().get(String.class);
  assertThat(result,is(""String_Node_Str"" + ""String_Node_Str"" + ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""));
}","@Test public void lookup_mntner_xml_text() throws Exception {
  final RpslObject TRICKY_MNT=RpslObject.parse(""String_Node_Str"" + ""String_Node_Str"" + ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str"");
  databaseHelper.addObject(TRICKY_MNT);
  final String response=RestTest.target(getPort(),""String_Node_Str"").request(MediaType.APPLICATION_XML_TYPE).get(String.class);
  assertThat(response,is(""String_Node_Str"" + ""String_Node_Str"" + ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""));
}",0.767515923566879
161107,"@Test public void lookup_mntner_json_text(){
  final String result=RestTest.target(getPort(),""String_Node_Str"").request().get(String.class);
  assertThat(result,is(""String_Node_Str"" + ""String_Node_Str"" + ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""));
}","@Test public void lookup_mntner_json_text() throws Exception {
  final RpslObject TRICKY_MNT=RpslObject.parse(""String_Node_Str"" + ""String_Node_Str"" + ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str"");
  databaseHelper.addObject(TRICKY_MNT);
  final String response=RestTest.target(getPort(),""String_Node_Str"").request(MediaType.APPLICATION_JSON_TYPE).get(String.class);
  assertThat(response,matchesPattern(""String_Node_Str""));
  assertThat(response,not(matchesPattern(""String_Node_Str"")));
  assertThat(response,is(""String_Node_Str"" + ""String_Node_Str"" + ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""));
}",0.7959183673469388
161108,"@Autowired public MailMessageDaoJdbc(@Qualifier(""String_Node_Str"") final DataSource dataSource,final DateTimeProvider dateTimeProvider){
  this.dateTimeProvider=dateTimeProvider;
  this.jdbcTemplate=new JdbcTemplate(dataSource);
  this.host=Hosts.getLocalHost();
}","@Autowired public MailMessageDaoJdbc(@Qualifier(""String_Node_Str"") final DataSource dataSource,final DateTimeProvider dateTimeProvider){
  this.dateTimeProvider=dateTimeProvider;
  this.jdbcTemplate=new JdbcTemplate(dataSource);
}",0.931174089068826
161109,"@Override @CheckForNull public String claimMessage(){
  final String uuid=UUID.randomUUID().toString();
  final int rows=jdbcTemplate.update(""String_Node_Str"" + ""String_Node_Str"" + ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str"",DequeueStatus.CLAIMED.name(),dateTimeProvider.getCurrentDateTime().toDate().getTime() / 1000,host.name(),uuid);
switch (rows) {
case 0:
    return null;
case 1:
  return uuid;
default :
throw new IllegalStateException(""String_Node_Str"");
}
}","@Override @CheckForNull public String claimMessage(){
  final String uuid=UUID.randomUUID().toString();
  final int rows=jdbcTemplate.update(""String_Node_Str"" + ""String_Node_Str"" + ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str"",DequeueStatus.CLAIMED.name(),dateTimeProvider.getCurrentDateTime().toDate().getTime() / 1000,Hosts.getLocalHostName(),uuid);
switch (rows) {
case 0:
    return null;
case 1:
  return uuid;
default :
throw new IllegalStateException(""String_Node_Str"");
}
}",0.9742002063983488
161110,"public long getDailyTaskFinishTime(final LocalDate date,final Class taskClass){
  final List<Long> result=jdbcTemplate.queryForList(""String_Node_Str"",Long.class,date.toString(),taskClass.getSimpleName());
  return result.isEmpty() ? -1 : result.get(0) * 1000;
}","public long getDailyTaskFinishTime(final LocalDate date,final Class taskClass){
  final List<Long> result=jdbcTemplate.queryForList(""String_Node_Str"",Long.class,date.toString(),taskClass.getSimpleName());
  return result.isEmpty() || result.get(0) == null ? -1 : result.get(0) * 1000;
}",0.9542961608775136
161111,"@Scheduled(cron=""String_Node_Str"") public void executeScheduledTasks(){
  final LocalDate date=dateTimeProvider.getCurrentDate();
  final String hostName=Hosts.getLocalHost().getHostName();
  for (  final DailyScheduledTask task : scheduledTasks) {
    if (!dailySchedulerDao.acquireDailyTask(date,task.getClass(),hostName)) {
      continue;
    }
    final Stopwatch stopwatch=new Stopwatch().start();
    try {
      LOGGER.info(""String_Node_Str"",task);
      task.run();
      dailySchedulerDao.markTaskDone(System.currentTimeMillis(),date,task.getClass());
    }
 catch (    RuntimeException e) {
      LOGGER.error(""String_Node_Str"",task,e);
    }
 finally {
      LOGGER.info(""String_Node_Str"",task,stopwatch.stop());
    }
  }
  LOGGER.info(""String_Node_Str"");
  final int deletedRows=dailySchedulerDao.removeOldScheduledEntries(date);
  LOGGER.info(""String_Node_Str"",date,deletedRows);
}","@Scheduled(cron=""String_Node_Str"") public void executeScheduledTasks(){
  final LocalDate date=dateTimeProvider.getCurrentDate();
  for (  final DailyScheduledTask task : scheduledTasks) {
    if (!dailySchedulerDao.acquireDailyTask(date,task.getClass(),Hosts.getLocalHostName())) {
      continue;
    }
    final Stopwatch stopwatch=new Stopwatch().start();
    try {
      LOGGER.info(""String_Node_Str"",task);
      task.run();
      dailySchedulerDao.markTaskDone(System.currentTimeMillis(),date,task.getClass());
    }
 catch (    RuntimeException e) {
      LOGGER.error(""String_Node_Str"",task,e);
    }
 finally {
      LOGGER.info(""String_Node_Str"",task,stopwatch.stop());
    }
  }
  LOGGER.info(""String_Node_Str"");
  final int deletedRows=dailySchedulerDao.removeOldScheduledEntries(date);
  LOGGER.info(""String_Node_Str"",date,deletedRows);
}",0.9553775743707094
161112,"public static Message servedByNotice(final CharSequence version){
  return new Message(Type.INFO,""String_Node_Str"",version,Hosts.getLocalHost());
}","public static Message servedByNotice(final CharSequence version){
  return new Message(Type.INFO,""String_Node_Str"",version,Hosts.getLocalHostName());
}",0.9865771812080536
161113,"private String createResponse(final String templateName,final UpdateContext updateContext,final VelocityContext velocityContext,final Origin origin){
  velocityContext.put(""String_Node_Str"",updateContext.printGlobalMessages());
  velocityContext.put(""String_Node_Str"",origin);
  velocityContext.put(""String_Node_Str"",version);
  velocityContext.put(""String_Node_Str"",Hosts.getLocalHost().name());
  velocityContext.put(""String_Node_Str"",source);
  velocityContext.put(""String_Node_Str"",FormatHelper.dateTimeToString(dateTimeProvider.getCurrentDateTime()));
  final Template template=velocityEngine.getTemplate(templateName);
  final StringWriter writer=new StringWriter();
  template.merge(velocityContext,writer);
  return cleanupResponse(writer.toString());
}","private String createResponse(final String templateName,final UpdateContext updateContext,final VelocityContext velocityContext,final Origin origin){
  velocityContext.put(""String_Node_Str"",updateContext.printGlobalMessages());
  velocityContext.put(""String_Node_Str"",origin);
  velocityContext.put(""String_Node_Str"",version);
  velocityContext.put(""String_Node_Str"",Hosts.getLocalHostName());
  velocityContext.put(""String_Node_Str"",source);
  velocityContext.put(""String_Node_Str"",FormatHelper.dateTimeToString(dateTimeProvider.getCurrentDateTime()));
  final Template template=velocityEngine.getTemplate(templateName);
  final StringWriter writer=new StringWriter();
  template.merge(velocityContext,writer);
  return cleanupResponse(writer.toString());
}",0.9967083607636604
161114,"private void extractCleanValueAndComment(final String value){
  final StringBuilder cleanedValue=new StringBuilder(value.length());
  final StringBuilder commentValue=new StringBuilder(value.length());
  boolean comment=false;
  boolean space=false;
  boolean newline=false;
  boolean written=false, commentwritten=false;
  for (  final char c : value.toCharArray()) {
    if (c == '\n') {
      newline=true;
      space=true;
      comment=false;
      continue;
    }
    if (newline) {
      newline=false;
      if (c == '+') {
        continue;
      }
    }
    if (c == '#') {
      comment=true;
      continue;
    }
    if (c == ' ' || c == '\t' || c == '\r') {
      space=true;
      continue;
    }
    if (comment) {
      if (commentwritten) {
        if (space) {
          commentValue.append(' ');
          space=false;
        }
      }
 else {
        commentwritten=true;
        space=false;
      }
      commentValue.append(c);
      continue;
    }
    if (written) {
      if (space) {
        cleanedValue.append(' ');
        space=false;
      }
    }
 else {
      written=true;
      space=false;
    }
    cleanedValue.append(c);
  }
  this.comment=commentwritten ? commentValue.toString() : null;
  if (type == null) {
    cleanValues=Collections.singleton(ciString(cleanedValue.toString()));
  }
 else {
    cleanValues=ciImmutableSet(type.splitValue(cleanedValue.toString()));
  }
}","private void extractCleanValueAndComment(final String value){
  final StringBuilder cleanedValue=new StringBuilder(value.length());
  final StringBuilder commentValue=new StringBuilder(value.length());
  boolean comment=false;
  boolean space=false;
  boolean newline=false;
  boolean written=false, commentwritten=false;
  for (  final char c : value.toCharArray()) {
    if (c == '\n') {
      newline=true;
      space=true;
      comment=false;
      continue;
    }
    if (newline) {
      newline=false;
      if (c == '+') {
        continue;
      }
    }
    if (c == '#') {
      comment=true;
      continue;
    }
    if (c == ' ' || c == '\t' || c == '\r') {
      space=true;
      continue;
    }
    if (comment) {
      if (commentwritten) {
        if (space) {
          commentValue.append(' ');
          space=false;
        }
      }
 else {
        commentwritten=true;
        space=false;
      }
      commentValue.append(c);
      continue;
    }
    if (written) {
      if (space) {
        cleanedValue.append(' ');
        space=false;
      }
    }
 else {
      written=true;
      space=false;
    }
    cleanedValue.append(c);
  }
  if (this.comment == null) {
    this.comment=commentwritten ? commentValue.toString() : null;
  }
  if (type == null) {
    cleanValues=Collections.singleton(ciString(cleanedValue.toString()));
  }
 else {
    cleanValues=ciImmutableSet(type.splitValue(cleanedValue.toString()));
  }
}",0.9874739039665972
161115,"public String getComment(){
  if (comment == null) {
    extractCleanValueAndComment(value);
  }
  return comment;
}","public String getComment(){
  if (comment == null && cleanValues == null) {
    extractCleanValueAndComment(value);
  }
  return comment;
}",0.9098039215686274
161116,"@Override Attribute buildAttribute(RpslAttribute attribute,final CIString value,final String source){
  final String referencedType=(attribute.getType() != null && referencedTypeResolver != null) ? referencedTypeResolver.getReferencedType(attribute.getType(),value) : null;
  final Link link=(referencedType != null) ? createLink(source,referencedType,value.toString()) : null;
  return createAttribute(attribute.getKey(),value.toString(),attribute.getComment(),referencedType,link);
}","@Override Attribute buildAttribute(RpslAttribute attribute,final CIString value,final String source){
  final String referencedType=(attribute.getType() != null && referencedTypeResolver != null) ? referencedTypeResolver.getReferencedType(attribute.getType(),value) : null;
  final Link link=(referencedType != null) ? createLink(source,referencedType,value.toString()) : null;
  return createAttribute(attribute.getKey(),value.toString(),attribute.getCleanComment(),referencedType,link);
}",0.9948717948717948
161117,"@Test public void lookup_without_password() throws Exception {
  final RpslObject object=restClient.lookup(ObjectType.MNTNER,OWNER_MNT.getKey().toString());
  assertThat(object.findAttribute(AttributeType.AUTH).getValue(),is(""String_Node_Str""));
  assertThat(object.findAttribute(AttributeType.AUTH).getComment(),is(""String_Node_Str""));
}","@Test public void lookup_without_password() throws Exception {
  final RpslObject object=restClient.lookup(ObjectType.MNTNER,OWNER_MNT.getKey().toString());
  assertThat(object.findAttribute(AttributeType.AUTH).getValue(),is(""String_Node_Str""));
  assertThat(object.findAttribute(AttributeType.AUTH).getCleanComment(),is(""String_Node_Str""));
}",0.9926578560939796
161118,"@Test public void lookup_with_password() throws Exception {
  final RpslObject object=restClient.lookup(ObjectType.MNTNER,OWNER_MNT.getKey().toString(),""String_Node_Str"");
  assertThat(object.findAttribute(AttributeType.AUTH).getValue(),is(""String_Node_Str""));
}","@Test public void lookup_with_password() throws Exception {
  final RpslObject object=restClient.lookup(ObjectType.MNTNER,OWNER_MNT.getKey().toString(),""String_Node_Str"");
  assertThat(object.findAttribute(AttributeType.AUTH).getValue(),is(""String_Node_Str""));
  assertThat(object.findAttribute(AttributeType.AUTH).getCleanComment(),is(""String_Node_Str""));
}",0.8451612903225807
161119,"@Test public void lookup_with_wrong_password() throws Exception {
  final RpslObject object=restClient.lookup(ObjectType.MNTNER,OWNER_MNT.getKey().toString());
  assertThat(object.getValueForAttribute(AttributeType.SOURCE).toString(),is(""String_Node_Str""));
  assertThat(object.findAttribute(AttributeType.SOURCE).getComment(),is(""String_Node_Str""));
  assertThat(object.getValueForAttribute(AttributeType.AUTH).toString(),is(""String_Node_Str""));
  assertThat(object.findAttribute(AttributeType.AUTH).getComment(),is(""String_Node_Str""));
}","@Test public void lookup_with_wrong_password() throws Exception {
  final RpslObject object=restClient.lookup(ObjectType.MNTNER,OWNER_MNT.getKey().toString());
  assertThat(object.getValueForAttribute(AttributeType.SOURCE).toString(),is(""String_Node_Str""));
  assertThat(object.findAttribute(AttributeType.SOURCE).getCleanComment(),is(""String_Node_Str""));
  assertThat(object.getValueForAttribute(AttributeType.AUTH).toString(),is(""String_Node_Str""));
  assertThat(object.findAttribute(AttributeType.AUTH).getCleanComment(),is(""String_Node_Str""));
}",0.9908088235294118
161120,"@Override Attribute buildAttribute(RpslAttribute attribute,final CIString value,final String source){
  return createAttribute(attribute.getKey(),value.toString(),attribute.getComment(),null,null);
}","@Override Attribute buildAttribute(RpslAttribute attribute,final CIString value,final String source){
  return createAttribute(attribute.getKey(),value.toString(),attribute.getCleanComment(),null,null);
}",0.9875930521091812
161121,"public RpslAttribute(final String key,final String value,final String comment){
  Validate.notNull(key);
  Validate.notNull(value);
  this.key=key.toLowerCase();
  this.value=value;
  this.type=AttributeType.getByNameOrNull(this.key);
  this.comment=comment;
}","public RpslAttribute(final String key,final String value){
  Validate.notNull(key);
  Validate.notNull(value);
  this.key=key.toLowerCase();
  this.value=value;
  this.type=AttributeType.getByNameOrNull(this.key);
}",0.9052631578947368
161122,"private void extractCleanValueAndComment(final String value){
  final StringBuilder cleanedValue=new StringBuilder(value.length());
  final StringBuilder commentValue=new StringBuilder(value.length());
  boolean comment=false;
  boolean space=false;
  boolean newline=false;
  boolean written=false, commentwritten=false;
  for (  final char c : value.toCharArray()) {
    if (c == '\n') {
      newline=true;
      space=true;
      comment=false;
      continue;
    }
    if (newline) {
      newline=false;
      if (c == '+') {
        continue;
      }
    }
    if (c == '#') {
      comment=true;
      continue;
    }
    if (c == ' ' || c == '\t' || c == '\r') {
      space=true;
      continue;
    }
    if (comment) {
      if (commentwritten) {
        if (space) {
          commentValue.append(' ');
          space=false;
        }
      }
 else {
        commentwritten=true;
        space=false;
      }
      commentValue.append(c);
      continue;
    }
    if (written) {
      if (space) {
        cleanedValue.append(' ');
        space=false;
      }
    }
 else {
      written=true;
      space=false;
    }
    cleanedValue.append(c);
  }
  if (this.comment == null) {
    this.comment=commentwritten ? commentValue.toString() : null;
  }
  if (type == null) {
    cleanValues=Collections.singleton(ciString(cleanedValue.toString()));
  }
 else {
    cleanValues=ciImmutableSet(type.splitValue(cleanedValue.toString()));
  }
}","private void extractCleanValueAndComment(final String value){
  final StringBuilder cleanedValue=new StringBuilder(value.length());
  final StringBuilder commentValue=new StringBuilder(value.length());
  boolean comment=false;
  boolean space=false;
  boolean newline=false;
  boolean valueWritten=false;
  boolean commentWritten=false;
  for (  final char c : value.toCharArray()) {
    if (c == '\n') {
      newline=true;
      space=true;
      comment=false;
      continue;
    }
    if (newline) {
      newline=false;
      if (c == '+') {
        continue;
      }
    }
    if (c == '#') {
      comment=true;
      continue;
    }
    if (c == ' ' || c == '\t' || c == '\r') {
      space=true;
      continue;
    }
    if (comment) {
      if (commentWritten) {
        if (space) {
          commentValue.append(' ');
          space=false;
        }
      }
 else {
        commentWritten=true;
        space=false;
      }
      commentValue.append(c);
      continue;
    }
    if (valueWritten) {
      if (space) {
        cleanedValue.append(' ');
        space=false;
      }
    }
 else {
      valueWritten=true;
      space=false;
    }
    cleanedValue.append(c);
  }
  this.cleanComment=commentWritten ? commentValue.toString() : null;
  if (type == null) {
    cleanValues=Collections.singleton(ciString(cleanedValue.toString()));
  }
 else {
    cleanValues=ciImmutableSet(type.splitValue(cleanedValue.toString()));
  }
}",0.9338842975206612
161123,"@Test public void get_comment_in_second_line() throws Exception {
  subject=new RpslAttribute(""String_Node_Str"",""String_Node_Str"");
  assertThat(subject.getComment(),is(""String_Node_Str""));
  subject=new RpslAttribute(""String_Node_Str"",""String_Node_Str"");
  assertThat(subject.getComment(),is(""String_Node_Str""));
}","@Test public void get_comment_in_second_line() throws Exception {
  subject=new RpslAttribute(""String_Node_Str"",""String_Node_Str"");
  assertThat(subject.getCleanComment(),is(""String_Node_Str""));
  subject=new RpslAttribute(""String_Node_Str"",""String_Node_Str"");
  assertThat(subject.getCleanComment(),is(""String_Node_Str""));
}",0.984375
161124,"@Test public void remove_comments_on_single_line() throws Exception {
  subject=new RpslAttribute(""String_Node_Str"",""String_Node_Str"");
  assertThat(subject.getCleanValue().toString(),is(""String_Node_Str""));
  assertThat(subject.getComment(),is(""String_Node_Str""));
}","@Test public void remove_comments_on_single_line() throws Exception {
  subject=new RpslAttribute(""String_Node_Str"",""String_Node_Str"");
  assertThat(subject.getCleanValue().toString(),is(""String_Node_Str""));
  assertThat(subject.getCleanComment(),is(""String_Node_Str""));
}",0.9907235621521336
161125,"@Test public void remove_comments_single_line() throws Exception {
  subject=new RpslAttribute(""String_Node_Str"",""String_Node_Str"");
  assertThat(subject.getCleanValue().toString(),is(""String_Node_Str""));
  assertThat(subject.getComment(),equalTo(null));
}","@Test public void remove_comments_single_line() throws Exception {
  subject=new RpslAttribute(""String_Node_Str"",""String_Node_Str"");
  assertThat(subject.getCleanValue().toString(),is(""String_Node_Str""));
  assertThat(subject.getCleanComment(),equalTo(null));
}",0.9903288201160542
161126,"@Test public void remove_comments_multiple_lines() throws Exception {
  subject=new RpslAttribute(""String_Node_Str"",""String_Node_Str"");
  assertThat(subject.getCleanValue().toString(),is(""String_Node_Str""));
  assertThat(subject.getComment(),equalTo(null));
}","@Test public void remove_comments_multiple_lines() throws Exception {
  subject=new RpslAttribute(""String_Node_Str"",""String_Node_Str"");
  assertThat(subject.getCleanValue().toString(),is(""String_Node_Str""));
  assertThat(subject.getCleanComment(),equalTo(null));
}",0.9904397705544932
161127,"private boolean stopExecutor(ExecutorService executorService){
  if (executorService == null) {
    return true;
  }
  executorService.shutdownNow();
  try {
    executorService.awaitTermination(2,TimeUnit.HOURS);
  }
 catch (  Exception e) {
    LOGGER.error(""String_Node_Str"",e);
    return false;
  }
  return true;
}","private boolean stopExecutor(ExecutorService executorService){
  if (executorService == null) {
    return true;
  }
  executorService.shutdown();
  try {
    executorService.awaitTermination(2,TimeUnit.HOURS);
  }
 catch (  Exception e) {
    LOGGER.error(""String_Node_Str"",e);
    return false;
  }
  return true;
}",0.9952904238618524
161128,"@Override public void start(){
  if (handlerExecutor != null || pollerExecutor != null) {
    throw new IllegalStateException(""String_Node_Str"");
  }
  freeThreads.set(nrThreads);
  handlerExecutor=Executors.newFixedThreadPool(nrThreads);
  pollerExecutor=Executors.newSingleThreadExecutor();
  pollerExecutor.submit(new MessagePoller());
  LOGGER.info(""String_Node_Str"");
}","@Override public void start(){
  if (handlerExecutor != null || pollerExecutor != null) {
    throw new IllegalStateException(""String_Node_Str"");
  }
  freeThreads.set(nrThreads);
  handlerExecutor=Executors.newFixedThreadPool(nrThreads);
  pollerExecutor=Executors.newSingleThreadScheduledExecutor();
  pollerExecutor.scheduleWithFixedDelay(new MessagePoller(),intervalMs,intervalMs,TimeUnit.MILLISECONDS);
  LOGGER.info(""String_Node_Str"");
}",0.8592411260709915
161129,"@Override public void stop(final boolean force){
  LOGGER.info(""String_Node_Str"",force);
  if (force) {
    if (stopExecutor(pollerExecutor)) {
      pollerExecutor=null;
    }
    if (stopExecutor(handlerExecutor)) {
      handlerExecutor=null;
    }
    LOGGER.info(""String_Node_Str"",force);
  }
 else {
    if (pollerExecutor != null)     pollerExecutor.shutdown();
    if (handlerExecutor != null)     handlerExecutor.shutdown();
  }
}","@Override public void stop(final boolean force){
  LOGGER.info(""String_Node_Str"");
  if (stopExecutor(pollerExecutor)) {
    pollerExecutor=null;
  }
  if (stopExecutor(handlerExecutor)) {
    handlerExecutor=null;
  }
  LOGGER.info(""String_Node_Str"");
}",0.5165945165945166
161130,"@Before public void setUp() throws Exception {
  subject.setNrThreads(1);
  when(maintenanceMode.allowUpdate()).thenReturn(true);
}","@Before public void setUp() throws Exception {
  subject.setNrThreads(1);
  subject.setIntervalMs(1);
  when(maintenanceMode.allowUpdate()).thenReturn(true);
}",0.903448275862069
161131,"private void extractCleanValueAndComment(final String value){
  final StringBuilder cleanedValue=new StringBuilder(value.length());
  final StringBuilder commentValue=new StringBuilder(value.length());
  boolean comment=false;
  boolean space=false;
  boolean newline=false;
  boolean written=false;
  for (  final char c : value.toCharArray()) {
    if (c == '\n') {
      newline=true;
      space=true;
      comment=false;
      continue;
    }
    if (newline) {
      newline=false;
      if (c == '+') {
        continue;
      }
    }
    if (c == '#') {
      comment=true;
      continue;
    }
    if (c == ' ' || c == '\t' || c == '\r') {
      space=true;
      continue;
    }
    if (comment) {
      if (space) {
        commentValue.append(' ');
        space=false;
      }
      commentValue.append(c);
      continue;
    }
    if (written) {
      if (space) {
        cleanedValue.append(' ');
        space=false;
      }
    }
 else {
      written=true;
      space=false;
    }
    cleanedValue.append(c);
  }
  this.comment=commentValue.toString().trim();
  if (type == null) {
    cleanValues=Collections.singleton(ciString(cleanedValue.toString()));
  }
 else {
    cleanValues=ciImmutableSet(type.splitValue(cleanedValue.toString()));
  }
}","private void extractCleanValueAndComment(final String value){
  final StringBuilder cleanedValue=new StringBuilder(value.length());
  final StringBuilder commentValue=new StringBuilder(value.length());
  boolean comment=false;
  boolean space=false;
  boolean newline=false;
  boolean written=false, commentwritten=false;
  for (  final char c : value.toCharArray()) {
    if (c == '\n') {
      newline=true;
      space=true;
      comment=false;
      continue;
    }
    if (newline) {
      newline=false;
      if (c == '+') {
        continue;
      }
    }
    if (c == '#') {
      comment=true;
      continue;
    }
    if (c == ' ' || c == '\t' || c == '\r') {
      space=true;
      continue;
    }
    if (comment) {
      if (commentwritten) {
        if (space) {
          commentValue.append(' ');
          space=false;
        }
      }
 else {
        commentwritten=true;
        space=false;
      }
      commentValue.append(c);
      continue;
    }
    if (written) {
      if (space) {
        cleanedValue.append(' ');
        space=false;
      }
    }
 else {
      written=true;
      space=false;
    }
    cleanedValue.append(c);
  }
  this.comment=commentwritten ? commentValue.toString() : null;
  if (type == null) {
    cleanValues=Collections.singleton(ciString(cleanedValue.toString()));
  }
 else {
    cleanValues=ciImmutableSet(type.splitValue(cleanedValue.toString()));
  }
}",0.932688731870584
161132,"@Test public void remove_comments_single_line() throws Exception {
  subject=new RpslAttribute(""String_Node_Str"",""String_Node_Str"");
  assertThat(subject.getCleanValue().toString(),is(""String_Node_Str""));
  assertThat(subject.getComment(),is(""String_Node_Str""));
}","@Test public void remove_comments_single_line() throws Exception {
  subject=new RpslAttribute(""String_Node_Str"",""String_Node_Str"");
  assertThat(subject.getCleanValue().toString(),is(""String_Node_Str""));
  assertThat(subject.getComment(),equalTo(null));
}",0.9384615384615383
161133,"@Test public void remove_comments_multiple_lines() throws Exception {
  subject=new RpslAttribute(""String_Node_Str"",""String_Node_Str"");
  assertThat(subject.getCleanValue().toString(),is(""String_Node_Str""));
  assertThat(subject.getComment(),is(""String_Node_Str""));
}","@Test public void remove_comments_multiple_lines() throws Exception {
  subject=new RpslAttribute(""String_Node_Str"",""String_Node_Str"");
  assertThat(subject.getCleanValue().toString(),is(""String_Node_Str""));
  assertThat(subject.getComment(),equalTo(null));
}",0.9391634980988594
161134,"@Override protected TokenStreamComponents createComponents(final String fieldName,final Reader reader){
  final WhitespaceTokenizer tokenizer=new WhitespaceTokenizer(matchVersion,reader);
  TokenStream tok=new LowerCaseFilter(matchVersion,new WordDelimiterFilter(tokenizer,WordDelimiterFilter.GENERATE_WORD_PARTS | WordDelimiterFilter.SPLIT_ON_CASE_CHANGE | WordDelimiterFilter.PRESERVE_ORIGINAL,CharArraySet.EMPTY_SET));
  tok=new LogFilePatternFilter(tok);
  return new TokenStreamComponents(tokenizer,tok);
}","@Override protected TokenStreamComponents createComponents(final String fieldName,final Reader reader){
  final WhitespaceAndCommaTokenizer tokenizer=new WhitespaceAndCommaTokenizer(matchVersion,reader);
  TokenStream tok=new LowerCaseFilter(matchVersion,new WordDelimiterFilter(tokenizer,WordDelimiterFilter.GENERATE_WORD_PARTS | WordDelimiterFilter.SPLIT_ON_CASE_CHANGE | WordDelimiterFilter.PRESERVE_ORIGINAL,CharArraySet.EMPTY_SET));
  tok=new LogFilePatternFilter(tok);
  return new TokenStreamComponents(tokenizer,tok);
}",0.9845857418111752
161135,"@Override protected void tokenize(final CharSequence input){
  final Matcher matcher=requestFromPattern.matcher(input);
  if (matcher.matches()) {
    super.tokens.add(matcher.group(1));
    super.tokens.add(matcher.group(2));
    return;
  }
}","@Override protected void tokenize(final CharSequence input){
  final Matcher matcher=requestFromPattern.matcher(input);
  if (matcher.matches()) {
    super.tokens.add(matcher.group(1));
    return;
  }
}",0.8839285714285714
161136,"@Ignore(""String_Node_Str"") @Test public void ticket_number_is_found() throws Exception {
  addToIndex(LogFileHelper.createLogFile(logDirectory,""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str""));
  addToIndex(LogFileHelper.createLogFile(logDirectory,""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str""));
  final String response=getUpdates(""String_Node_Str"");
  assertThat(response,containsString(""String_Node_Str""));
  assertThat(response,not(containsString(""String_Node_Str"")));
}","@Ignore(""String_Node_Str"") @Test public void ticket_number_is_found() throws Exception {
  addToIndex(LogFileHelper.createLogFile(logDirectory,""String_Node_Str""));
  addToIndex(LogFileHelper.createLogFile(logDirectory,""String_Node_Str""));
  final String response=getUpdates(""String_Node_Str"");
  assertThat(response,containsString(""String_Node_Str""));
  assertThat(response,not(containsString(""String_Node_Str"")));
}",0.8851063829787233
161137,"@Override public Object doInTransaction(TransactionStatus status){
  try {
    final RpslObject rpslObject=RpslObject.parse(object);
    final RpslObject dummyObject=dummifier.dummify(3,rpslObject);
    jdbcTemplate.update(""String_Node_Str"" + table + ""String_Node_Str"",dummyObject.toByteArray(),objectId,sequenceId);
  }
 catch (  RuntimeException e) {
    LOGGER.error(table + ""String_Node_Str"" + objectId+ ""String_Node_Str""+ sequenceId+ ""String_Node_Str""+ object.toString(),e);
  }
  int count=jobsDone.incrementAndGet();
  if (count % 100000 == 0) {
    LOGGER.info(""String_Node_Str"" + count);
  }
  return null;
}","@Override public Object doInTransaction(TransactionStatus status){
  try {
    final RpslObject rpslObject=RpslObject.parse(object);
    final RpslObject dummyObject=dummifier.dummify(3,rpslObject);
    jdbcTemplate.update(""String_Node_Str"" + table + ""String_Node_Str"",dummyObject.toByteArray(),objectId,sequenceId);
  }
 catch (  RuntimeException e) {
    LOGGER.error(table + ""String_Node_Str"" + objectId+ ""String_Node_Str""+ sequenceId+ ""String_Node_Str""+ new String(object),e);
  }
  int count=jobsDone.incrementAndGet();
  if (count % 100000 == 0) {
    LOGGER.info(""String_Node_Str"" + count);
  }
  return null;
}",0.9846153846153848
161138,"@Override public void run(){
  transactionTemplate.execute(new TransactionCallback<Object>(){
    @Override public Object doInTransaction(    TransactionStatus status){
      try {
        final RpslObject rpslObject=RpslObject.parse(object);
        final RpslObject dummyObject=dummifier.dummify(3,rpslObject);
        jdbcTemplate.update(""String_Node_Str"" + table + ""String_Node_Str"",dummyObject.toByteArray(),objectId,sequenceId);
      }
 catch (      RuntimeException e) {
        LOGGER.error(table + ""String_Node_Str"" + objectId+ ""String_Node_Str""+ sequenceId+ ""String_Node_Str""+ object.toString(),e);
      }
      int count=jobsDone.incrementAndGet();
      if (count % 100000 == 0) {
        LOGGER.info(""String_Node_Str"" + count);
      }
      return null;
    }
  }
);
}","@Override public void run(){
  transactionTemplate.execute(new TransactionCallback<Object>(){
    @Override public Object doInTransaction(    TransactionStatus status){
      try {
        final RpslObject rpslObject=RpslObject.parse(object);
        final RpslObject dummyObject=dummifier.dummify(3,rpslObject);
        jdbcTemplate.update(""String_Node_Str"" + table + ""String_Node_Str"",dummyObject.toByteArray(),objectId,sequenceId);
      }
 catch (      RuntimeException e) {
        LOGGER.error(table + ""String_Node_Str"" + objectId+ ""String_Node_Str""+ sequenceId+ ""String_Node_Str""+ new String(object),e);
      }
      int count=jobsDone.incrementAndGet();
      if (count % 100000 == 0) {
        LOGGER.info(""String_Node_Str"" + count);
      }
      return null;
    }
  }
);
}",0.9878903760356916
161139,"public RpslObject lookup(final ObjectType objectType,final String pkey,final String... passwords){
  try {
    final WhoisResources whoisResources=client.target(String.format(""String_Node_Str"",restApiUrl,sourceName,objectType.getName(),pkey,joinQueryParams(createQueryParams(""String_Node_Str"",passwords)),(passwords.length == 0) ? ""String_Node_Str"" : ""String_Node_Str"")).request().get(WhoisResources.class);
    return whoisObjectClientMapper.map(whoisResources.getWhoisObjects().get(0));
  }
 catch (  ClientErrorException e) {
    throw createException(e);
  }
}","public RpslObject lookup(final ObjectType objectType,final String pkey,final String... passwords){
  try {
    final WhoisResources whoisResources=client.target(String.format(""String_Node_Str"",restApiUrl,sourceName,objectType.getName(),pkey,joinQueryParams(createQueryParams(""String_Node_Str"",passwords),(passwords.length == 0) ? null : ""String_Node_Str""))).request().get(WhoisResources.class);
    return whoisObjectClientMapper.map(whoisResources.getWhoisObjects().get(0));
  }
 catch (  ClientErrorException e) {
    throw createException(e);
  }
}",0.9739910313901344
161140,"@Override public void write(final OutputStream output) throws IOException, WebApplicationException {
  try {
    SearchResponseHandler responseHandler=new SearchResponseHandler(output);
    try {
      final int contextId=System.identityHashCode(Thread.currentThread());
      queryHandler.streamResults(query,remoteAddress,contextId,responseHandler);
      if (!responseHandler.rpslObjectFound()) {
        throw new WebApplicationException(Response.status(Response.Status.NOT_FOUND).entity(createErrorEntity(request,responseHandler.flushAndGetErrors())).build());
      }
      responseHandler.flushAndGetErrors();
    }
 catch (    QueryException e) {
      Response.ResponseBuilder responseBuilder;
      if (e.getCompletionInfo() == QueryCompletionInfo.BLOCKED) {
        responseBuilder=Response.status(STATUS_TOO_MANY_REQUESTS);
      }
 else {
        responseBuilder=Response.status(Response.Status.BAD_REQUEST);
      }
      List<Message> messages=responseHandler.flushAndGetErrors();
      messages.addAll(e.getMessages());
      if (!messages.isEmpty()) {
        responseBuilder.entity(createErrorEntity(request,messages));
      }
      throw new WebApplicationException(responseBuilder.build());
    }
catch (    RuntimeException e) {
      LOGGER.info(""String_Node_Str"",e);
      Response.ResponseBuilder responseBuilder;
      responseBuilder=Response.status(Response.Status.INTERNAL_SERVER_ERROR);
      List<Message> messages=responseHandler.flushAndGetErrors();
      messages.add(QueryMessages.internalErroroccurred());
      responseBuilder.entity(createErrorEntity(request,messages));
      throw new WebApplicationException(responseBuilder.build());
    }
  }
 catch (  StreamingException ignored) {
  }
}","@Override public void write(final OutputStream output) throws IOException, WebApplicationException {
  try {
    SearchResponseHandler responseHandler=new SearchResponseHandler(output);
    try {
      final int contextId=System.identityHashCode(Thread.currentThread());
      queryHandler.streamResults(query,remoteAddress,contextId,responseHandler);
      if (!responseHandler.rpslObjectFound()) {
        throw new WebApplicationException(Response.status(Response.Status.NOT_FOUND).entity(createErrorEntity(request,responseHandler.flushAndGetErrors())).build());
      }
      responseHandler.flushAndGetErrors();
    }
 catch (    RuntimeException e) {
      throw createWebApplicationException(e,responseHandler);
    }
  }
 catch (  StreamingException ignored) {
  }
}",0.5710862619808307
161141,"private RpslObject createAbuseCRole(final RpslObject organisation,final String abuseMailbox){
  final List<RpslAttribute> attributes=Lists.newArrayList();
  attributes.add(new RpslAttribute(AttributeType.ROLE,""String_Node_Str""));
  attributes.add(new RpslAttribute(AttributeType.NIC_HDL,""String_Node_Str""));
  attributes.add(new RpslAttribute(AttributeType.ABUSE_MAILBOX,abuseMailbox));
  for (  RpslAttribute mntRef : organisation.findAttributes(AttributeType.MNT_REF)) {
    attributes.add(new RpslAttribute(AttributeType.MNT_BY,mntRef.getValue()));
  }
  for (  RpslAttribute address : organisation.findAttributes(AttributeType.ADDRESS)) {
    attributes.add(address);
  }
  final RpslAttribute email=organisation.findAttribute(AttributeType.E_MAIL);
  attributes.add(organisation.findAttribute(AttributeType.E_MAIL));
  attributes.add(new RpslAttribute(AttributeType.CHANGED,email.getValue()));
  final RpslAttribute source=organisation.findAttribute(AttributeType.SOURCE);
  attributes.add(source);
  return new RpslObject(attributes);
}","private RpslObject createAbuseCRole(final RpslObject organisation,final String abuseMailbox){
  final List<RpslAttribute> attributes=Lists.newArrayList();
  attributes.add(new RpslAttribute(AttributeType.ROLE,""String_Node_Str""));
  attributes.add(new RpslAttribute(AttributeType.NIC_HDL,""String_Node_Str""));
  attributes.add(new RpslAttribute(AttributeType.ABUSE_MAILBOX,abuseMailbox));
  for (  RpslAttribute mntRef : organisation.findAttributes(AttributeType.MNT_REF)) {
    attributes.add(new RpslAttribute(AttributeType.MNT_BY,mntRef.getValue()));
  }
  for (  RpslAttribute address : organisation.findAttributes(AttributeType.ADDRESS)) {
    attributes.add(address);
  }
  final RpslAttribute email=organisation.findAttributes(AttributeType.E_MAIL).get(0);
  attributes.add(organisation.findAttribute(AttributeType.E_MAIL));
  attributes.add(new RpslAttribute(AttributeType.CHANGED,email.getValue()));
  final RpslAttribute source=organisation.findAttribute(AttributeType.SOURCE);
  attributes.add(source);
  return new RpslObject(attributes);
}",0.9961759082217974
161142,"public WhoisObject lookupWhoisObject(final ObjectType objectType,final String pkey,final String... passwords){
  try {
    final WhoisResources whoisResources=client.target(String.format(""String_Node_Str"",restApiUrl,sourceName,objectType.getName(),pkey,joinQueryParams(createQueryParams(""String_Node_Str"",passwords)),(passwords.length == 0) ? ""String_Node_Str"" : ""String_Node_Str"")).request().get(WhoisResources.class);
    return whoisResources.getWhoisObjects().get(0);
  }
 catch (  ClientErrorException e) {
    throw createException(e);
  }
}","public WhoisObject lookupWhoisObject(final ObjectType objectType,final String pkey,final String... passwords){
  try {
    final WhoisResources whoisResources=client.target(String.format(""String_Node_Str"",restApiUrl,sourceName,objectType.getName(),pkey,joinQueryParams(createQueryParams(""String_Node_Str"",passwords),(passwords.length == 0) ? null : ""String_Node_Str""))).request().get(WhoisResources.class);
    return whoisResources.getWhoisObjects().get(0);
  }
 catch (  ClientErrorException e) {
    throw createException(e);
  }
}",0.973172987974098
161143,"public Response performUpdate(final Origin origin,final Update update,final String content,final Keyword keyword,final HttpServletRequest request){
  loggerContext.init(getRequestId(origin.getFrom()));
  try {
    final UpdateContext updateContext=new UpdateContext(loggerContext);
    final boolean notificationsEnabled=true;
    logHttpHeaders(loggerContext,request);
    final UpdateRequest updateRequest=new UpdateRequest(origin,keyword,content,Lists.newArrayList(update),notificationsEnabled);
    updateRequestHandler.handle(updateRequest,updateContext);
    final RpslObject responseObject=updateContext.getPreparedUpdate(update).getUpdatedObject();
    Response.ResponseBuilder responseBuilder;
    UpdateStatus status=updateContext.getStatus(update);
    if (status == UpdateStatus.FAILED_AUTHENTICATION) {
      responseBuilder=Response.status(Response.Status.UNAUTHORIZED);
    }
 else     if (status == UpdateStatus.EXCEPTION) {
      responseBuilder=Response.status(Response.Status.INTERNAL_SERVER_ERROR);
    }
 else     if (status != UpdateStatus.SUCCESS) {
      if (updateContext.getMessages(update).contains(UpdateMessages.newKeywordAndObjectExists())) {
        responseBuilder=Response.status(Response.Status.CONFLICT);
      }
 else {
        responseBuilder=Response.status(Response.Status.BAD_REQUEST);
      }
    }
 else {
      responseBuilder=Response.status(Response.Status.OK);
    }
    responseBuilder.entity(createResponse(request,updateContext,update,responseObject));
    return responseBuilder.build();
  }
  finally {
    loggerContext.remove();
  }
}","public Response performUpdate(final Origin origin,final Update update,final String content,final Keyword keyword,final HttpServletRequest request){
  final UpdateContext updateContext=initContext(origin);
  try {
    return performUpdate(updateContext,origin,update,content,keyword,request);
  }
  finally {
    closeContext();
  }
}",0.1989583333333333
161144,"@DELETE @Produces({MediaType.APPLICATION_XML,MediaType.APPLICATION_JSON}) @Path(""String_Node_Str"") public Response delete(@Context final HttpServletRequest request,@PathParam(""String_Node_Str"") final String source,@PathParam(""String_Node_Str"") final String objectType,@PathParam(""String_Node_Str"") final String key,@QueryParam(""String_Node_Str"") @DefaultValue(""String_Node_Str"") final String reason,@QueryParam(""String_Node_Str"") final List<String> passwords,@QueryParam(""String_Node_Str"") final String override){
  checkForMainSource(request,source);
  final RpslObject originalObject=rpslObjectDao.getByKey(ObjectType.getByName(objectType),key);
  return updatePerformer.performUpdate(updatePerformer.createOrigin(request),updatePerformer.createUpdate(originalObject,passwords,reason,override),updatePerformer.createContent(originalObject,passwords,reason,override),Keyword.NONE,request);
}","@DELETE @Produces({MediaType.APPLICATION_XML,MediaType.APPLICATION_JSON}) @Path(""String_Node_Str"") public Response delete(@Context final HttpServletRequest request,@PathParam(""String_Node_Str"") final String source,@PathParam(""String_Node_Str"") final String objectType,@PathParam(""String_Node_Str"") final String key,@QueryParam(""String_Node_Str"") @DefaultValue(""String_Node_Str"") final String reason,@QueryParam(""String_Node_Str"") final List<String> passwords,@QueryParam(""String_Node_Str"") final String override){
  checkForMainSource(request,source);
  Origin origin=updatePerformer.createOrigin(request);
  UpdateContext updateContext=updatePerformer.initContext(origin);
  try {
    RpslObject originalObject=rpslObjectDao.getByKey(ObjectType.getByName(objectType),key);
    originalObject=ssoTranslator.translateAuthToUsername(updateContext,originalObject);
    return updatePerformer.performUpdate(updateContext,origin,updatePerformer.createUpdate(originalObject,passwords,reason,override),updatePerformer.createContent(originalObject,passwords,reason,override),Keyword.NONE,request);
  }
  finally {
    updatePerformer.closeContext();
  }
}",0.6738597351642962
161145,"@Autowired public WhoisRestService(final RpslObjectDao rpslObjectDao,final SourceContext sourceContext,final QueryHandler queryHandler,final WhoisObjectServerMapper whoisObjectMapper,final InternalUpdatePerformer updatePerformer){
  this.rpslObjectDao=rpslObjectDao;
  this.sourceContext=sourceContext;
  this.queryHandler=queryHandler;
  this.whoisObjectMapper=whoisObjectMapper;
  this.updatePerformer=updatePerformer;
}","@Autowired public WhoisRestService(final RpslObjectDao rpslObjectDao,final SourceContext sourceContext,final QueryHandler queryHandler,final WhoisObjectServerMapper whoisObjectMapper,final InternalUpdatePerformer updatePerformer,final SsoTranslator ssoTranslator){
  this.rpslObjectDao=rpslObjectDao;
  this.sourceContext=sourceContext;
  this.queryHandler=queryHandler;
  this.whoisObjectMapper=whoisObjectMapper;
  this.updatePerformer=updatePerformer;
  this.ssoTranslator=ssoTranslator;
}",0.9234135667396062
161146,"public static RpslObject translateAuth(final RpslObject rpslObject,final AuthTranslator authTranslator){
  if (!rpslObject.containsAttribute(AttributeType.AUTH)) {
    return rpslObject;
  }
  Map<RpslAttribute,RpslAttribute> replace=Maps.newHashMap();
  for (  RpslAttribute authAttribute : rpslObject.findAttributes(AttributeType.AUTH)) {
    final Iterator<String> authIterator=SPACE_SPLITTER.split(authAttribute.getCleanValue()).iterator();
    final String authType=authIterator.next().toUpperCase();
    final String authToken=authIterator.next();
    RpslAttribute result=authTranslator.translate(authType,authToken,authAttribute);
    if (result != null) {
      replace.put(authAttribute,result);
    }
  }
  if (replace.isEmpty()) {
    return rpslObject;
  }
 else {
    return new RpslObjectBuilder(rpslObject).replaceAttributes(replace).get();
  }
}","public static RpslObject translateAuth(final RpslObject rpslObject,final AuthTranslator authTranslator){
  if (!rpslObject.containsAttribute(AttributeType.AUTH)) {
    return rpslObject;
  }
  final Map<RpslAttribute,RpslAttribute> replace=Maps.newHashMap();
  for (  RpslAttribute authAttribute : rpslObject.findAttributes(AttributeType.AUTH)) {
    final Iterator<String> authIterator=SPACE_SPLITTER.split(authAttribute.getCleanValue()).iterator();
    final String authType=authIterator.next().toUpperCase();
    if (authIterator.hasNext()) {
      final String authToken=authIterator.next();
      final RpslAttribute result=authTranslator.translate(authType,authToken,authAttribute);
      if (result != null) {
        replace.put(authAttribute,result);
      }
    }
  }
  if (replace.isEmpty()) {
    return rpslObject;
  }
 else {
    return new RpslObjectBuilder(rpslObject).replaceAttributes(replace).get();
  }
}",0.9652855543113102
161147,"@Nullable public String getReferencedType(final AttributeType attributeType,final CIString value){
  final Set<ObjectType> references=attributeType.getReferences();
switch (references.size()) {
case 0:
    if (AttributeType.MEMBERS.equals(attributeType)) {
      if (AttributeType.AUT_NUM.isValidValue(ObjectType.AUT_NUM,value)) {
        return ObjectType.AUT_NUM.getName();
      }
      if (AttributeType.AS_SET.isValidValue(ObjectType.AS_SET,value)) {
        return ObjectType.AS_SET.getName();
      }
      if (AttributeType.ROUTE_SET.isValidValue(ObjectType.ROUTE_SET,value)) {
        return ObjectType.ROUTE_SET.getName();
      }
      if (AttributeType.RTR_SET.isValidValue(ObjectType.RTR_SET,value)) {
        return ObjectType.RTR_SET.getName();
      }
    }
  return null;
case 1:
if (AttributeType.AUTH.equals(attributeType)) {
  if (value.toLowerCase().startsWith(""String_Node_Str"") || value.toLowerCase().startsWith(""String_Node_Str"")) {
    return null;
  }
}
if (AttributeType.MBRS_BY_REF.equals(attributeType)) {
if (value.toLowerCase().equals(""String_Node_Str"")) {
  return null;
}
}
if (AttributeType.MNT_ROUTES.equals(attributeType)) {
if (MNT_ROUTES_NO_REFERENCE.matcher(value).matches()) {
return null;
}
}
return references.iterator().next().getName();
default :
if (references.contains(ObjectType.PERSON) || references.contains(ObjectType.ROLE)) {
for (ObjectType objectType : references) {
if (attributeType.isValidValue(objectType,value)) {
try {
return rpslObjectDao.findByKey(objectType,value.toString()).getObjectType().getName();
}
 catch (EmptyResultDataAccessException ignored) {
}
}
}
}
 else {
for (ObjectType objectType : references) {
for (AttributeType lookupAttribute : ObjectTemplate.getTemplate(objectType).getLookupAttributes()) {
if (lookupAttribute.isValidValue(objectType,value)) {
return objectType.getName();
}
}
}
}
return null;
}
}","@Nullable public String getReferencedType(final AttributeType attributeType,final CIString value){
  final Set<ObjectType> references=attributeType.getReferences();
switch (references.size()) {
case 0:
    if (AttributeType.MEMBERS.equals(attributeType)) {
      if (AttributeType.AUT_NUM.isValidValue(ObjectType.AUT_NUM,value)) {
        return ObjectType.AUT_NUM.getName();
      }
      if (AttributeType.AS_SET.isValidValue(ObjectType.AS_SET,value)) {
        return ObjectType.AS_SET.getName();
      }
      if (AttributeType.ROUTE_SET.isValidValue(ObjectType.ROUTE_SET,value)) {
        return ObjectType.ROUTE_SET.getName();
      }
      if (AttributeType.RTR_SET.isValidValue(ObjectType.RTR_SET,value)) {
        return ObjectType.RTR_SET.getName();
      }
    }
  return null;
case 1:
if (AttributeType.AUTH.equals(attributeType)) {
  String authType=SPACE_SPLITTER.split(value).iterator().next().toUpperCase();
  if (authType.endsWith(""String_Node_Str"") || authType.equals(""String_Node_Str"")) {
    return null;
  }
}
if (AttributeType.MBRS_BY_REF.equals(attributeType)) {
if (value.toLowerCase().equals(""String_Node_Str"")) {
  return null;
}
}
if (AttributeType.MNT_ROUTES.equals(attributeType)) {
if (MNT_ROUTES_NO_REFERENCE.matcher(value).matches()) {
return null;
}
}
return references.iterator().next().getName();
default :
if (references.contains(ObjectType.PERSON) || references.contains(ObjectType.ROLE)) {
for (ObjectType objectType : references) {
if (attributeType.isValidValue(objectType,value)) {
try {
return rpslObjectDao.findByKey(objectType,value.toString()).getObjectType().getName();
}
 catch (EmptyResultDataAccessException ignored) {
}
}
}
}
 else {
for (ObjectType objectType : references) {
for (AttributeType lookupAttribute : ObjectTemplate.getTemplate(objectType).getLookupAttributes()) {
if (lookupAttribute.isValidValue(objectType,value)) {
return objectType.getName();
}
}
}
}
return null;
}
}",0.964126734747316
161148,"@Test public void lookup_mntner_multiple_passwords(){
  final WhoisResources whoisResources=RestTest.target(getPort(),""String_Node_Str"").request().get(WhoisResources.class);
  assertThat(whoisResources.getErrorMessages(),is(nullValue()));
  assertThat(whoisResources.getWhoisObjects(),hasSize(1));
  final WhoisObject whoisObject=whoisResources.getWhoisObjects().get(0);
  assertThat(whoisObject.getAttributes(),contains(new Attribute(""String_Node_Str"",""String_Node_Str""),new Attribute(""String_Node_Str"",""String_Node_Str""),new Attribute(""String_Node_Str"",""String_Node_Str"",null,""String_Node_Str"",new Link(""String_Node_Str"",""String_Node_Str"")),new Attribute(""String_Node_Str"",""String_Node_Str"",null,null,null),new Attribute(""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",null,null),new Attribute(""String_Node_Str"",""String_Node_Str"",null,""String_Node_Str"",new Link(""String_Node_Str"",""String_Node_Str"")),new Attribute(""String_Node_Str"",""String_Node_Str"",null,""String_Node_Str"",new Link(""String_Node_Str"",""String_Node_Str"")),new Attribute(""String_Node_Str"",""String_Node_Str"",null,null,null),new Attribute(""String_Node_Str"",""String_Node_Str"",null,null,null)));
}","@Test public void lookup_mntner_multiple_passwords(){
  final WhoisResources whoisResources=RestTest.target(getPort(),""String_Node_Str"").request().get(WhoisResources.class);
  assertThat(whoisResources.getErrorMessages(),is(nullValue()));
  assertThat(whoisResources.getWhoisObjects(),hasSize(1));
  final WhoisObject whoisObject=whoisResources.getWhoisObjects().get(0);
  assertThat(whoisObject.getAttributes(),contains(new Attribute(""String_Node_Str"",""String_Node_Str""),new Attribute(""String_Node_Str"",""String_Node_Str""),new Attribute(""String_Node_Str"",""String_Node_Str"",null,""String_Node_Str"",new Link(""String_Node_Str"",""String_Node_Str"")),new Attribute(""String_Node_Str"",""String_Node_Str"",null,null,null),new Attribute(""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",null,null),new Attribute(""String_Node_Str"",""String_Node_Str"",null,null,null),new Attribute(""String_Node_Str"",""String_Node_Str"",null,""String_Node_Str"",new Link(""String_Node_Str"",""String_Node_Str"")),new Attribute(""String_Node_Str"",""String_Node_Str"",null,""String_Node_Str"",new Link(""String_Node_Str"",""String_Node_Str"")),new Attribute(""String_Node_Str"",""String_Node_Str"",null,null,null),new Attribute(""String_Node_Str"",""String_Node_Str"",null,null,null)));
}",0.9724310776942356
161149,"@Test public void lookup_mntner_incorrect_password(){
  final WhoisResources whoisResources=RestTest.target(getPort(),""String_Node_Str"").request().get(WhoisResources.class);
  assertThat(whoisResources.getErrorMessages(),is(nullValue()));
  assertThat(whoisResources.getWhoisObjects(),hasSize(1));
  final WhoisObject whoisObject=whoisResources.getWhoisObjects().get(0);
  assertThat(whoisObject.getAttributes(),contains(new Attribute(""String_Node_Str"",""String_Node_Str""),new Attribute(""String_Node_Str"",""String_Node_Str""),new Attribute(""String_Node_Str"",""String_Node_Str"",null,""String_Node_Str"",new Link(""String_Node_Str"",""String_Node_Str"")),new Attribute(""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",null,null),new Attribute(""String_Node_Str"",""String_Node_Str"",null,""String_Node_Str"",new Link(""String_Node_Str"",""String_Node_Str"")),new Attribute(""String_Node_Str"",""String_Node_Str"",null,""String_Node_Str"",new Link(""String_Node_Str"",""String_Node_Str"")),new Attribute(""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",null,null)));
}","@Test public void lookup_mntner_incorrect_password(){
  final WhoisResources whoisResources=RestTest.target(getPort(),""String_Node_Str"").request().get(WhoisResources.class);
  assertThat(whoisResources.getErrorMessages(),is(nullValue()));
  assertThat(whoisResources.getWhoisObjects(),hasSize(1));
  final WhoisObject whoisObject=whoisResources.getWhoisObjects().get(0);
  assertThat(whoisObject.getAttributes(),contains(new Attribute(""String_Node_Str"",""String_Node_Str""),new Attribute(""String_Node_Str"",""String_Node_Str""),new Attribute(""String_Node_Str"",""String_Node_Str"",null,""String_Node_Str"",new Link(""String_Node_Str"",""String_Node_Str"")),new Attribute(""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",null,null),new Attribute(""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",null,null),new Attribute(""String_Node_Str"",""String_Node_Str"",null,""String_Node_Str"",new Link(""String_Node_Str"",""String_Node_Str"")),new Attribute(""String_Node_Str"",""String_Node_Str"",null,""String_Node_Str"",new Link(""String_Node_Str"",""String_Node_Str"")),new Attribute(""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",null,null)));
}",0.9635776855693868
161150,"@Test public void lookup_mntner(){
  final WhoisResources whoisResources=RestTest.target(getPort(),""String_Node_Str"").request().get(WhoisResources.class);
  assertThat(whoisResources.getErrorMessages(),is(nullValue()));
  assertThat(whoisResources.getWhoisObjects(),hasSize(1));
  final WhoisObject whoisObject=whoisResources.getWhoisObjects().get(0);
  assertThat(whoisObject.getAttributes(),contains(new Attribute(""String_Node_Str"",""String_Node_Str""),new Attribute(""String_Node_Str"",""String_Node_Str""),new Attribute(""String_Node_Str"",""String_Node_Str"",null,""String_Node_Str"",new Link(""String_Node_Str"",""String_Node_Str"")),new Attribute(""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",null,null),new Attribute(""String_Node_Str"",""String_Node_Str"",null,""String_Node_Str"",new Link(""String_Node_Str"",""String_Node_Str"")),new Attribute(""String_Node_Str"",""String_Node_Str"",null,""String_Node_Str"",new Link(""String_Node_Str"",""String_Node_Str"")),new Attribute(""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",null,null)));
}","@Test public void lookup_mntner(){
  final WhoisResources whoisResources=RestTest.target(getPort(),""String_Node_Str"").request().get(WhoisResources.class);
  assertThat(whoisResources.getErrorMessages(),is(nullValue()));
  assertThat(whoisResources.getWhoisObjects(),hasSize(1));
  final WhoisObject whoisObject=whoisResources.getWhoisObjects().get(0);
  assertThat(whoisObject.getAttributes(),contains(new Attribute(""String_Node_Str"",""String_Node_Str""),new Attribute(""String_Node_Str"",""String_Node_Str""),new Attribute(""String_Node_Str"",""String_Node_Str"",null,""String_Node_Str"",new Link(""String_Node_Str"",""String_Node_Str"")),new Attribute(""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",null,null),new Attribute(""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",null,null),new Attribute(""String_Node_Str"",""String_Node_Str"",null,""String_Node_Str"",new Link(""String_Node_Str"",""String_Node_Str"")),new Attribute(""String_Node_Str"",""String_Node_Str"",null,""String_Node_Str"",new Link(""String_Node_Str"",""String_Node_Str"")),new Attribute(""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",null,null)));
}",0.9629282027217267
161151,"@Test public void search_inverse(){
  databaseHelper.addObject(""String_Node_Str"" + ""String_Node_Str"" + ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str"");
  final WhoisResources whoisResources=RestTest.target(getPort(),""String_Node_Str"").request(MediaType.APPLICATION_XML).get(WhoisResources.class);
  assertThat(whoisResources.getErrorMessages(),is(nullValue()));
  assertThat(whoisResources.getWhoisObjects(),hasSize(4));
  WhoisObject aut_num=whoisResources.getWhoisObjects().get(0);
  assertThat(aut_num.getLink(),is(new Link(""String_Node_Str"",""String_Node_Str"")));
  assertThat(aut_num.getAttributes(),contains(new Attribute(""String_Node_Str"",""String_Node_Str""),new Attribute(""String_Node_Str"",""String_Node_Str""),new Attribute(""String_Node_Str"",""String_Node_Str""),new Attribute(""String_Node_Str"",""String_Node_Str"",null,""String_Node_Str"",new Link(""String_Node_Str"",""String_Node_Str"")),new Attribute(""String_Node_Str"",""String_Node_Str"",null,""String_Node_Str"",new Link(""String_Node_Str"",""String_Node_Str"")),new Attribute(""String_Node_Str"",""String_Node_Str"",null,""String_Node_Str"",new Link(""String_Node_Str"",""String_Node_Str"")),new Attribute(""String_Node_Str"",""String_Node_Str"")));
  WhoisObject person=whoisResources.getWhoisObjects().get(1);
  assertThat(person.getLink(),is(new Link(""String_Node_Str"",""String_Node_Str"")));
  assertThat(person.getAttributes(),contains(new Attribute(""String_Node_Str"",""String_Node_Str""),new Attribute(""String_Node_Str"",""String_Node_Str""),new Attribute(""String_Node_Str"",""String_Node_Str""),new Attribute(""String_Node_Str"",""String_Node_Str""),new Attribute(""String_Node_Str"",""String_Node_Str"",null,""String_Node_Str"",new Link(""String_Node_Str"",""String_Node_Str"")),new Attribute(""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",null,null)));
  WhoisObject mntner=whoisResources.getWhoisObjects().get(2);
  assertThat(mntner.getLink(),is(new Link(""String_Node_Str"",""String_Node_Str"")));
  assertThat(mntner.getAttributes(),contains(new Attribute(""String_Node_Str"",""String_Node_Str""),new Attribute(""String_Node_Str"",""String_Node_Str""),new Attribute(""String_Node_Str"",""String_Node_Str"",null,""String_Node_Str"",new Link(""String_Node_Str"",""String_Node_Str"")),new Attribute(""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",null,null),new Attribute(""String_Node_Str"",""String_Node_Str"",null,""String_Node_Str"",new Link(""String_Node_Str"",""String_Node_Str"")),new Attribute(""String_Node_Str"",""String_Node_Str"",null,""String_Node_Str"",new Link(""String_Node_Str"",""String_Node_Str"")),new Attribute(""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",null,null)));
  WhoisObject person2=whoisResources.getWhoisObjects().get(3);
  assertThat(person2.getLink(),is(new Link(""String_Node_Str"",""String_Node_Str"")));
  assertThat(person2.getAttributes(),contains(new Attribute(""String_Node_Str"",""String_Node_Str""),new Attribute(""String_Node_Str"",""String_Node_Str""),new Attribute(""String_Node_Str"",""String_Node_Str""),new Attribute(""String_Node_Str"",""String_Node_Str""),new Attribute(""String_Node_Str"",""String_Node_Str"",null,""String_Node_Str"",new Link(""String_Node_Str"",""String_Node_Str"")),new Attribute(""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",null,null)));
}","@Test public void search_inverse(){
  databaseHelper.addObject(""String_Node_Str"" + ""String_Node_Str"" + ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str"");
  final WhoisResources whoisResources=RestTest.target(getPort(),""String_Node_Str"").request(MediaType.APPLICATION_XML).get(WhoisResources.class);
  assertThat(whoisResources.getErrorMessages(),is(nullValue()));
  assertThat(whoisResources.getWhoisObjects(),hasSize(4));
  WhoisObject aut_num=whoisResources.getWhoisObjects().get(0);
  assertThat(aut_num.getLink(),is(new Link(""String_Node_Str"",""String_Node_Str"")));
  assertThat(aut_num.getAttributes(),contains(new Attribute(""String_Node_Str"",""String_Node_Str""),new Attribute(""String_Node_Str"",""String_Node_Str""),new Attribute(""String_Node_Str"",""String_Node_Str""),new Attribute(""String_Node_Str"",""String_Node_Str"",null,""String_Node_Str"",new Link(""String_Node_Str"",""String_Node_Str"")),new Attribute(""String_Node_Str"",""String_Node_Str"",null,""String_Node_Str"",new Link(""String_Node_Str"",""String_Node_Str"")),new Attribute(""String_Node_Str"",""String_Node_Str"",null,""String_Node_Str"",new Link(""String_Node_Str"",""String_Node_Str"")),new Attribute(""String_Node_Str"",""String_Node_Str"")));
  WhoisObject person=whoisResources.getWhoisObjects().get(1);
  assertThat(person.getLink(),is(new Link(""String_Node_Str"",""String_Node_Str"")));
  assertThat(person.getAttributes(),contains(new Attribute(""String_Node_Str"",""String_Node_Str""),new Attribute(""String_Node_Str"",""String_Node_Str""),new Attribute(""String_Node_Str"",""String_Node_Str""),new Attribute(""String_Node_Str"",""String_Node_Str""),new Attribute(""String_Node_Str"",""String_Node_Str"",null,""String_Node_Str"",new Link(""String_Node_Str"",""String_Node_Str"")),new Attribute(""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",null,null)));
  WhoisObject mntner=whoisResources.getWhoisObjects().get(2);
  assertThat(mntner.getLink(),is(new Link(""String_Node_Str"",""String_Node_Str"")));
  assertThat(mntner.getAttributes(),contains(new Attribute(""String_Node_Str"",""String_Node_Str""),new Attribute(""String_Node_Str"",""String_Node_Str""),new Attribute(""String_Node_Str"",""String_Node_Str"",null,""String_Node_Str"",new Link(""String_Node_Str"",""String_Node_Str"")),new Attribute(""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",null,null),new Attribute(""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",null,null),new Attribute(""String_Node_Str"",""String_Node_Str"",null,""String_Node_Str"",new Link(""String_Node_Str"",""String_Node_Str"")),new Attribute(""String_Node_Str"",""String_Node_Str"",null,""String_Node_Str"",new Link(""String_Node_Str"",""String_Node_Str"")),new Attribute(""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",null,null)));
  WhoisObject person2=whoisResources.getWhoisObjects().get(3);
  assertThat(person2.getLink(),is(new Link(""String_Node_Str"",""String_Node_Str"")));
  assertThat(person2.getAttributes(),contains(new Attribute(""String_Node_Str"",""String_Node_Str""),new Attribute(""String_Node_Str"",""String_Node_Str""),new Attribute(""String_Node_Str"",""String_Node_Str""),new Attribute(""String_Node_Str"",""String_Node_Str""),new Attribute(""String_Node_Str"",""String_Node_Str"",null,""String_Node_Str"",new Link(""String_Node_Str"",""String_Node_Str"")),new Attribute(""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",null,null)));
}",0.9879993923742976
161152,"@Test public void lookup_mntner_correct_password_filtered(){
  final WhoisResources whoisResources=RestTest.target(getPort(),""String_Node_Str"").request().get(WhoisResources.class);
  assertThat(whoisResources.getErrorMessages(),is(nullValue()));
  assertThat(whoisResources.getWhoisObjects(),hasSize(1));
  final WhoisObject whoisObject=whoisResources.getWhoisObjects().get(0);
  assertThat(whoisObject.getAttributes(),contains(new Attribute(""String_Node_Str"",""String_Node_Str""),new Attribute(""String_Node_Str"",""String_Node_Str""),new Attribute(""String_Node_Str"",""String_Node_Str"",null,""String_Node_Str"",new Link(""String_Node_Str"",""String_Node_Str"")),new Attribute(""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",null,null),new Attribute(""String_Node_Str"",""String_Node_Str"",null,""String_Node_Str"",new Link(""String_Node_Str"",""String_Node_Str"")),new Attribute(""String_Node_Str"",""String_Node_Str"",null,""String_Node_Str"",new Link(""String_Node_Str"",""String_Node_Str"")),new Attribute(""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",null,null)));
}","@Test public void lookup_mntner_correct_password_filtered(){
  final WhoisResources whoisResources=RestTest.target(getPort(),""String_Node_Str"").request().get(WhoisResources.class);
  assertThat(whoisResources.getErrorMessages(),is(nullValue()));
  assertThat(whoisResources.getWhoisObjects(),hasSize(1));
  final WhoisObject whoisObject=whoisResources.getWhoisObjects().get(0);
  assertThat(whoisObject.getAttributes(),contains(new Attribute(""String_Node_Str"",""String_Node_Str""),new Attribute(""String_Node_Str"",""String_Node_Str""),new Attribute(""String_Node_Str"",""String_Node_Str"",null,""String_Node_Str"",new Link(""String_Node_Str"",""String_Node_Str"")),new Attribute(""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",null,null),new Attribute(""String_Node_Str"",""String_Node_Str"",null,null,null),new Attribute(""String_Node_Str"",""String_Node_Str"",null,""String_Node_Str"",new Link(""String_Node_Str"",""String_Node_Str"")),new Attribute(""String_Node_Str"",""String_Node_Str"",null,""String_Node_Str"",new Link(""String_Node_Str"",""String_Node_Str"")),new Attribute(""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",null,null)));
}",0.9695852534562212
161153,"@Test public void lookup_mntner_correct_password(){
  final WhoisResources whoisResources=RestTest.target(getPort(),""String_Node_Str"").request().get(WhoisResources.class);
  assertThat(whoisResources.getErrorMessages(),is(nullValue()));
  assertThat(whoisResources.getWhoisObjects(),hasSize(1));
  final WhoisObject whoisObject=whoisResources.getWhoisObjects().get(0);
  assertThat(whoisObject.getAttributes(),contains(new Attribute(""String_Node_Str"",""String_Node_Str""),new Attribute(""String_Node_Str"",""String_Node_Str""),new Attribute(""String_Node_Str"",""String_Node_Str"",null,""String_Node_Str"",new Link(""String_Node_Str"",""String_Node_Str"")),new Attribute(""String_Node_Str"",""String_Node_Str"",null,null,null),new Attribute(""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",null,null),new Attribute(""String_Node_Str"",""String_Node_Str"",null,""String_Node_Str"",new Link(""String_Node_Str"",""String_Node_Str"")),new Attribute(""String_Node_Str"",""String_Node_Str"",null,""String_Node_Str"",new Link(""String_Node_Str"",""String_Node_Str"")),new Attribute(""String_Node_Str"",""String_Node_Str"",null,null,null),new Attribute(""String_Node_Str"",""String_Node_Str"",null,null,null)));
}","@Test public void lookup_mntner_correct_password(){
  final WhoisResources whoisResources=RestTest.target(getPort(),""String_Node_Str"").request().get(WhoisResources.class);
  assertThat(whoisResources.getErrorMessages(),is(nullValue()));
  assertThat(whoisResources.getWhoisObjects(),hasSize(1));
  final WhoisObject whoisObject=whoisResources.getWhoisObjects().get(0);
  assertThat(whoisObject.getAttributes(),contains(new Attribute(""String_Node_Str"",""String_Node_Str""),new Attribute(""String_Node_Str"",""String_Node_Str""),new Attribute(""String_Node_Str"",""String_Node_Str"",null,""String_Node_Str"",new Link(""String_Node_Str"",""String_Node_Str"")),new Attribute(""String_Node_Str"",""String_Node_Str"",null,null,null),new Attribute(""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",null,null),new Attribute(""String_Node_Str"",""String_Node_Str"",null,null,null),new Attribute(""String_Node_Str"",""String_Node_Str"",null,""String_Node_Str"",new Link(""String_Node_Str"",""String_Node_Str"")),new Attribute(""String_Node_Str"",""String_Node_Str"",null,""String_Node_Str"",new Link(""String_Node_Str"",""String_Node_Str"")),new Attribute(""String_Node_Str"",""String_Node_Str"",null,null,null),new Attribute(""String_Node_Str"",""String_Node_Str"",null,null,null)));
}",0.9723849372384936
161154,"public String toString(){
  if (StringUtils.isBlank(comment)) {
    return String.format(""String_Node_Str"",name,value);
  }
 else {
    return String.format(""String_Node_Str"",name,value,comment);
  }
}","public String toString(){
  StringBuilder builder=new StringBuilder();
  builder.append(name).append(""String_Node_Str"").append(value);
  if (!StringUtils.isBlank(comment)) {
    builder.append(""String_Node_Str"").append(comment);
  }
  if (!StringUtils.isBlank(referencedType)) {
    builder.append(""String_Node_Str"").append(referencedType).append(""String_Node_Str"");
  }
  if (link != null) {
    builder.append(""String_Node_Str"").append(link).append(""String_Node_Str"");
  }
  return builder.toString();
}",0.2861189801699716
161155,"public FilterAuthFunction(){
  passwords=Collections.emptyList();
  cookie=null;
}","public FilterAuthFunction(){
}",0.5357142857142857
161156,"@Override public RpslObject apply(RpslObject rpslObject){
  if (!rpslObject.containsAttribute(AttributeType.AUTH)) {
    return rpslObject;
  }
  Map<RpslAttribute,RpslAttribute> replace=Maps.newHashMap();
  for (  RpslAttribute auth : rpslObject.findAttributes(AttributeType.AUTH)) {
    CIString authValue=auth.getCleanValue();
    Iterator<String> authIterator=SPACE_SPLITTER.split(authValue).iterator();
    String passwordType=authIterator.next().toUpperCase();
    if (passwordType.endsWith(""String_Node_Str"")) {
      if (passwords.isEmpty() || !passwordType.startsWith(""String_Node_Str"") || !PasswordHelper.authenticateMd5Passwords(authValue.toString(),passwords)) {
        replace.put(auth,new RpslAttribute(auth.getKey(),passwordType + FILTERED_APPENDIX));
      }
    }
 else     if (passwordType.equals(""String_Node_Str"")) {
      String replacement=FILTERED_APPENDIX;
      if (cookie != null) {
        final String username=checkCookieAgainstUuidAndReturnUsername(cookie,authIterator.next());
        if (username != null) {
          replacement=username;
        }
      }
      replace.put(auth,new RpslAttribute(auth.getKey(),passwordType + replacement));
    }
  }
  if (replace.isEmpty()) {
    return rpslObject;
  }
 else {
    RpslObjectFilter.addFilteredSourceReplacement(rpslObject,replace);
    return new RpslObjectBuilder(rpslObject).replaceAttributes(replace).get();
  }
}","@Override public RpslObject apply(RpslObject rpslObject){
  if (!rpslObject.containsAttribute(AttributeType.AUTH)) {
    return rpslObject;
  }
  Map<RpslAttribute,RpslAttribute> replace=Maps.newHashMap();
  List<RpslAttribute> authAttributes=rpslObject.findAttributes(AttributeType.AUTH);
  boolean authenticated=passwordAuthentication(passwords,authAttributes) || ssoAuthentication(cookie,authAttributes);
  for (  RpslAttribute authAttribute : authAttributes) {
    Iterator<String> authIterator=SPACE_SPLITTER.split(authAttribute.getCleanValue()).iterator();
    String passwordType=authIterator.next().toUpperCase();
    if (authenticated) {
      if (passwordType.equals(""String_Node_Str"")) {
        final String username=crowdClient.getUsername(authIterator.next());
        replace.put(authAttribute,new RpslAttribute(authAttribute.getKey(),""String_Node_Str"" + username));
      }
    }
 else {
      if (passwordType.endsWith(""String_Node_Str"") || passwordType.equals(""String_Node_Str"")) {
        replace.put(authAttribute,new RpslAttribute(authAttribute.getKey(),passwordType + FILTERED_APPENDIX));
      }
    }
  }
  if (replace.isEmpty()) {
    return rpslObject;
  }
 else {
    if (!authenticated) {
      RpslObjectFilter.addFilteredSourceReplacement(rpslObject,replace);
    }
    return new RpslObjectBuilder(rpslObject).replaceAttributes(replace).get();
  }
}",0.5706072583542939
161157,"public Map<RpslObject,RpslObjectUpdateInfo> addObjects(final Collection<RpslObject> rpslObjects){
  final Map<RpslObject,RpslObjectUpdateInfo> transformedInfoMap=Maps.newHashMap();
  final Map<RpslObject,RpslObjectUpdateInfo> updateInfoMap=Maps.newHashMap();
  for (  final RpslObject rpslObject : rpslObjects) {
    RpslObject transformedObject=attributeSanitizer.sanitize(rpslObject,new ObjectMessages());
    final RpslObjectUpdateInfo updateInfo=addObjectWithoutReferences(transformedObject,rpslObjectUpdateDao);
    updateInfoMap.put(rpslObject,updateInfo);
    transformedInfoMap.put(transformedObject,updateInfo);
  }
  for (  RpslObject transformedObject : transformedInfoMap.keySet()) {
    rpslObjectUpdateDao.updateObject(transformedInfoMap.get(transformedObject).getObjectId(),transformedObject);
  }
  return updateInfoMap;
}","public Map<RpslObject,RpslObjectUpdateInfo> addObjects(final Collection<RpslObject> rpslObjects){
  final Map<RpslObject,RpslObjectUpdateInfo> transformedInfoMap=Maps.newHashMap();
  final Map<RpslObject,RpslObjectUpdateInfo> updateInfoMap=Maps.newHashMap();
  for (  final RpslObject rpslObject : rpslObjects) {
    RpslObject transformedObject=attributeSanitizer.sanitize(rpslObject,new ObjectMessages());
    transformedObject=translateAuth(transformedObject);
    final RpslObjectUpdateInfo updateInfo=addObjectWithoutReferences(transformedObject,rpslObjectUpdateDao);
    updateInfoMap.put(rpslObject,updateInfo);
    transformedInfoMap.put(transformedObject,updateInfo);
  }
  for (  RpslObject transformedObject : transformedInfoMap.keySet()) {
    rpslObjectUpdateDao.updateObject(transformedInfoMap.get(transformedObject).getObjectId(),transformedObject);
  }
  return updateInfoMap;
}",0.9676674364896074
161158,"public RpslObject addObject(final RpslObject rpslObject){
  final RpslObjectUpdateInfo objectUpdateInfo=rpslObjectUpdateDao.createObject(rpslObject);
  return RpslObject.parse(objectUpdateInfo.getObjectId(),rpslObject.toByteArray());
}","public RpslObject addObject(final RpslObject rpslObject){
  final RpslObjectUpdateInfo objectUpdateInfo=rpslObjectUpdateDao.createObject(translateAuth(rpslObject));
  return RpslObject.parse(objectUpdateInfo.getObjectId(),rpslObject.toByteArray());
}",0.9278350515463918
161159,"private StreamingMarshal getStreamingMarshal(final HttpServletRequest request){
  final String acceptHeader=request.getHeader(HttpHeaders.ACCEPT);
  for (  final String accept : Splitter.on(',').split(acceptHeader)) {
    try {
      final MediaType mediaType=MediaType.valueOf(accept);
      final String subtype=mediaType.getSubtype().toLowerCase();
      if (subtype.equals(""String_Node_Str"") || subtype.endsWith(""String_Node_Str"")) {
        return new StreamingMarshalJson();
      }
 else       if (subtype.equals(""String_Node_Str"") || subtype.endsWith(""String_Node_Str"")) {
        return new StreamingMarshalXml();
      }
    }
 catch (    IllegalArgumentException ignored) {
    }
  }
  return new StreamingMarshalXml();
}","StreamingMarshal getStreamingMarshal(final HttpServletRequest request){
  final String acceptHeader=request.getHeader(HttpHeaders.ACCEPT);
  if (acceptHeader != null) {
    for (    final String accept : Splitter.on(',').split(acceptHeader)) {
      try {
        final MediaType mediaType=MediaType.valueOf(accept);
        final String subtype=mediaType.getSubtype().toLowerCase();
        if (subtype.equals(""String_Node_Str"") || subtype.endsWith(""String_Node_Str"")) {
          return new StreamingMarshalJson();
        }
 else         if (subtype.equals(""String_Node_Str"") || subtype.endsWith(""String_Node_Str"")) {
          return new StreamingMarshalXml();
        }
      }
 catch (      IllegalArgumentException ignored) {
      }
    }
  }
  return new StreamingMarshalXml();
}",0.9460526315789474
161160,"public void setErrorMessages(List<ErrorMessage> errorMessages){
  this.errorMessages=new ErrorMessages(errorMessages);
}","public void setErrorMessages(List<ErrorMessage> errorMessages){
  if (!CollectionUtils.isEmpty(errorMessages)) {
    this.errorMessages=new ErrorMessages(errorMessages);
  }
}",0.8135593220338984
161161,"@Override public RpslObject apply(RpslObject rpslObject){
  if (!rpslObject.containsAttribute(AttributeType.AUTH)) {
    return rpslObject;
  }
  Map<RpslAttribute,RpslAttribute> replace=Maps.newHashMap();
  for (  RpslAttribute auth : rpslObject.findAttributes(AttributeType.AUTH)) {
    CIString authValue=auth.getCleanValue();
    Iterator<String> authIterator=SPACE_SPLITTER.split(authValue.toUpperCase()).iterator();
    String passwordType=authIterator.next();
    if (passwordType.endsWith(""String_Node_Str"")) {
      if (passwords.isEmpty() || !passwordType.startsWith(""String_Node_Str"") || !PasswordHelper.authenticateMd5Passwords(authValue.toString(),passwords)) {
        replace.put(auth,new RpslAttribute(auth.getKey(),passwordType + FILTERED_APPENDIX));
      }
    }
 else     if (passwordType.equals(""String_Node_Str"")) {
      String replacement=FILTERED_APPENDIX;
      if (cookie != null) {
        final String username=checkCookieAgainstUuidAndReturnUsername(cookie,authIterator.next());
        if (username != null) {
          replacement=username;
        }
      }
      replace.put(auth,new RpslAttribute(auth.getKey(),passwordType + replacement));
    }
  }
  if (replace.isEmpty()) {
    return rpslObject;
  }
 else {
    RpslObjectFilter.addFilteredSourceReplacement(rpslObject,replace);
    return new RpslObjectBuilder(rpslObject).replaceAttributes(replace).get();
  }
}","@Override public RpslObject apply(RpslObject rpslObject){
  if (!rpslObject.containsAttribute(AttributeType.AUTH)) {
    return rpslObject;
  }
  Map<RpslAttribute,RpslAttribute> replace=Maps.newHashMap();
  for (  RpslAttribute auth : rpslObject.findAttributes(AttributeType.AUTH)) {
    CIString authValue=auth.getCleanValue();
    Iterator<String> authIterator=SPACE_SPLITTER.split(authValue).iterator();
    String passwordType=authIterator.next().toUpperCase();
    if (passwordType.endsWith(""String_Node_Str"")) {
      if (passwords.isEmpty() || !passwordType.startsWith(""String_Node_Str"") || !PasswordHelper.authenticateMd5Passwords(authValue.toString(),passwords)) {
        replace.put(auth,new RpslAttribute(auth.getKey(),passwordType + FILTERED_APPENDIX));
      }
    }
 else     if (passwordType.equals(""String_Node_Str"")) {
      String replacement=FILTERED_APPENDIX;
      if (cookie != null) {
        final String username=checkCookieAgainstUuidAndReturnUsername(cookie,authIterator.next());
        if (username != null) {
          replacement=username;
        }
      }
      replace.put(auth,new RpslAttribute(auth.getKey(),passwordType + replacement));
    }
  }
  if (replace.isEmpty()) {
    return rpslObject;
  }
 else {
    RpslObjectFilter.addFilteredSourceReplacement(rpslObject,replace);
    return new RpslObjectBuilder(rpslObject).replaceAttributes(replace).get();
  }
}",0.9900213827512472
161162,"public void populate(Update update,UpdateContext updateContext){
  RpslObject submittedObject=update.getSubmittedObject();
  if (!ObjectType.MNTNER.equals(submittedObject.getType())) {
    return;
  }
  for (  RpslAttribute auth : submittedObject.findAttributes(AttributeType.AUTH)) {
    CIString authValue=auth.getCleanValue();
    Iterator<String> authIterator=SPACE_SPLITTER.split(authValue.toUpperCase()).iterator();
    String passwordType=authIterator.next();
    if (passwordType.equals(""String_Node_Str"")) {
      getUuidForUsername(updateContext,authIterator.next());
    }
  }
}","public void populate(Update update,UpdateContext updateContext){
  RpslObject submittedObject=update.getSubmittedObject();
  if (!ObjectType.MNTNER.equals(submittedObject.getType())) {
    return;
  }
  for (  RpslAttribute auth : submittedObject.findAttributes(AttributeType.AUTH)) {
    CIString authValue=auth.getCleanValue();
    Iterator<String> authIterator=SPACE_SPLITTER.split(authValue).iterator();
    String passwordType=authIterator.next();
    if (passwordType.equalsIgnoreCase(""String_Node_Str"")) {
      getUuidForUsername(updateContext,authIterator.next());
    }
  }
}",0.979557069846678
161163,"private WhoisResources createResponse(final HttpServletRequest request,UpdateContext updateContext,Update update,RpslObject responseObject){
  final WhoisResources whoisResources=new WhoisResources();
  List<ErrorMessage> errorMessages=Lists.newArrayList();
  for (  Message message : updateContext.getGlobalMessages().getAllMessages()) {
    errorMessages.add(new ErrorMessage(message));
  }
  for (  Message message : updateContext.getMessages(update).getMessages().getAllMessages()) {
    errorMessages.add(new ErrorMessage(message));
  }
  for (  Map.Entry<RpslAttribute,Messages> entry : updateContext.getMessages(update).getAttributeMessages().entrySet()) {
    RpslAttribute rpslAttribute=entry.getKey();
    for (    Message message : entry.getValue().getAllMessages()) {
      errorMessages.add(new ErrorMessage(message,rpslAttribute));
    }
  }
  whoisResources.setErrorMessages(errorMessages);
  whoisResources.setWhoisObjects(Collections.singletonList(whoisObjectMapper.map(responseObject)));
  whoisResources.setLink(new Link(""String_Node_Str"",RestServiceHelper.getRequestURL(request).replaceFirst(""String_Node_Str"",""String_Node_Str"")));
  whoisResources.includeTermsAndConditions();
  return whoisResources;
}","private WhoisResources createResponse(final HttpServletRequest request,UpdateContext updateContext,Update update,RpslObject responseObject){
  final WhoisResources whoisResources=new WhoisResources();
  List<ErrorMessage> errorMessages=Lists.newArrayList();
  for (  Message message : updateContext.getGlobalMessages().getAllMessages()) {
    errorMessages.add(new ErrorMessage(message));
  }
  for (  Message message : updateContext.getMessages(update).getMessages().getAllMessages()) {
    errorMessages.add(new ErrorMessage(message));
  }
  for (  Map.Entry<RpslAttribute,Messages> entry : updateContext.getMessages(update).getAttributeMessages().entrySet()) {
    RpslAttribute rpslAttribute=entry.getKey();
    for (    Message message : entry.getValue().getAllMessages()) {
      errorMessages.add(new ErrorMessage(message,rpslAttribute));
    }
  }
  if (!errorMessages.isEmpty()) {
    whoisResources.setErrorMessages(errorMessages);
  }
  whoisResources.setWhoisObjects(Collections.singletonList(whoisObjectMapper.map(responseObject)));
  whoisResources.setLink(new Link(""String_Node_Str"",RestServiceHelper.getRequestURL(request).replaceFirst(""String_Node_Str"",""String_Node_Str"")));
  whoisResources.includeTermsAndConditions();
  return whoisResources;
}",0.9839228295819936
161164,"@Test public void lookup_person_acl_denied() throws Exception {
  try {
    databaseHelper.insertAclIpDenied(LOCALHOST_WITH_PREFIX);
    ipResourceConfiguration.reload();
    try {
      RestTest.target(getPort(),""String_Node_Str"").request().get(String.class);
      fail();
    }
 catch (    ClientErrorException e) {
      assertThat(e.getResponse().getStatus(),is(429));
      assertThat(e.getResponse().readEntity(String.class),containsString(""String_Node_Str""));
    }
  }
  finally {
    databaseHelper.unban(LOCALHOST_WITH_PREFIX);
    ipResourceConfiguration.reload();
    testPersonalObjectAccounting.resetAccounting();
  }
}","@Test public void lookup_person_acl_denied() throws Exception {
  try {
    databaseHelper.insertAclIpDenied(LOCALHOST_WITH_PREFIX);
    ipResourceConfiguration.reload();
    try {
      RestTest.target(getPort(),""String_Node_Str"").request().get(String.class);
      fail();
    }
 catch (    ClientErrorException e) {
      assertThat(e.getResponse().getStatus(),is(429));
      WhoisRestServiceTestIntegration.assertOnlyErrorMessage(e,""String_Node_Str"",""String_Node_Str"",""String_Node_Str"");
    }
  }
  finally {
    databaseHelper.unban(LOCALHOST_WITH_PREFIX);
    ipResourceConfiguration.reload();
    testPersonalObjectAccounting.resetAccounting();
  }
}",0.8847641144624904
161165,"private void assertErrorMessage(final ClientErrorException e,final String severity,final String text,final String... argument){
  WhoisResources whoisResources=e.getResponse().readEntity(WhoisResources.class);
  assertThat(whoisResources.getErrorMessages(),hasSize(1));
  assertThat(whoisResources.getErrorMessages().get(0).getText(),is(text));
  assertThat(whoisResources.getErrorMessages().get(0).getSeverity(),is(severity));
  assertThat(whoisResources.getErrorMessages().get(0).getArgs(),hasSize(argument.length));
  for (int i=0; i < argument.length; i++) {
    assertThat(whoisResources.getErrorMessages().get(0).getArgs().get(i).getValue(),is(argument[i]));
  }
}","static void assertErrorMessage(final WhoisResources whoisResources,final int number,final String severity,final String text,final String... argument){
  assertThat(whoisResources.getErrorMessages().get(number).getText(),is(text));
  assertThat(whoisResources.getErrorMessages().get(number).getSeverity(),is(severity));
  if (argument.length > 0) {
    assertThat(whoisResources.getErrorMessages().get(number).getArgs(),hasSize(argument.length));
    for (int i=0; i < argument.length; i++) {
      assertThat(whoisResources.getErrorMessages().get(number).getArgs().get(i).getValue(),is(argument[i]));
    }
  }
}",0.2776911076443057
161166,"@Test public void create_already_exists(){
  try {
    RestTest.target(getPort(),""String_Node_Str"").request().post(Entity.entity(whoisObjectMapper.mapRpslObjects(Arrays.asList(OWNER_MNT)),MediaType.APPLICATION_XML),String.class);
    fail();
  }
 catch (  ClientErrorException e) {
    assertThat(e.getResponse().getStatus(),is(HttpURLConnection.HTTP_CONFLICT));
    assertThat(e.getResponse().readEntity(String.class),containsString(""String_Node_Str""));
  }
}","@Test public void create_already_exists(){
  try {
    RestTest.target(getPort(),""String_Node_Str"").request().post(Entity.entity(whoisObjectMapper.mapRpslObjects(Arrays.asList(OWNER_MNT)),MediaType.APPLICATION_XML),String.class);
    fail();
  }
 catch (  BadRequestException e) {
    assertOnlyErrorMessage(e,""String_Node_Str"",""String_Node_Str"");
  }
}",0.7109471094710947
161167,"@Test public void create_invalid_source_in_request_body(){
  final RpslObject rpslObject=RpslObject.parse(""String_Node_Str"" + ""String_Node_Str"" + ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str"");
  try {
    RestTest.target(getPort(),""String_Node_Str"").request().post(Entity.entity(whoisObjectMapper.mapRpslObjects(Arrays.asList(rpslObject)),MediaType.APPLICATION_XML),String.class);
    fail(""String_Node_Str"");
  }
 catch (  BadRequestException e) {
    assertThat(e.getResponse().readEntity(String.class),containsString(""String_Node_Str""));
  }
}","@Test public void create_invalid_source_in_request_body(){
  final RpslObject rpslObject=RpslObject.parse(""String_Node_Str"" + ""String_Node_Str"" + ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str"");
  try {
    RestTest.target(getPort(),""String_Node_Str"").request().post(Entity.entity(whoisObjectMapper.mapRpslObjects(Arrays.asList(rpslObject)),MediaType.APPLICATION_XML),String.class);
    fail(""String_Node_Str"");
  }
 catch (  BadRequestException e) {
    assertOnlyErrorMessage(e,""String_Node_Str"",""String_Node_Str"",""String_Node_Str"");
  }
}",0.8866615265998458
161168,"@Test public void create_invalid_password(){
  try {
    RestTest.target(getPort(),""String_Node_Str"").request().post(Entity.entity(whoisObjectMapper.mapRpslObjects(Arrays.asList(PAULETH_PALTHEN)),MediaType.APPLICATION_XML),String.class);
    fail();
  }
 catch (  NotAuthorizedException e) {
    assertErrorMessage(e,""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"");
  }
}","@Test public void create_invalid_password(){
  try {
    RestTest.target(getPort(),""String_Node_Str"").request().post(Entity.entity(whoisObjectMapper.mapRpslObjects(Arrays.asList(PAULETH_PALTHEN)),MediaType.APPLICATION_XML),String.class);
    fail();
  }
 catch (  NotAuthorizedException e) {
    assertOnlyErrorMessage(e,""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"");
  }
}",0.9953917050691244
161169,"@Test public void grs_lookup_object_wrong_source(){
  try {
    RestTest.target(getPort(),""String_Node_Str"").request().get(String.class);
    fail();
  }
 catch (  BadRequestException e) {
    assertErrorMessage(e,""String_Node_Str"",""String_Node_Str"",""String_Node_Str"");
  }
}","@Test public void grs_lookup_object_wrong_source(){
  try {
    RestTest.target(getPort(),""String_Node_Str"").request().get(String.class);
    fail();
  }
 catch (  BadRequestException e) {
    assertOnlyErrorMessage(e,""String_Node_Str"",""String_Node_Str"",""String_Node_Str"");
  }
}",0.9927797833935018
161170,"@Test public void delete_invalid_password(){
  try {
    databaseHelper.addObject(PAULETH_PALTHEN);
    RestTest.target(getPort(),""String_Node_Str"").request().delete(String.class);
    fail();
  }
 catch (  NotAuthorizedException e) {
    assertThat(e.getResponse().readEntity(String.class),containsString(""String_Node_Str""));
  }
}","@Test public void delete_invalid_password(){
  try {
    databaseHelper.addObject(PAULETH_PALTHEN);
    RestTest.target(getPort(),""String_Node_Str"").request().delete(String.class);
    fail();
  }
 catch (  NotAuthorizedException e) {
    assertOnlyErrorMessage(e,""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"");
  }
}",0.7144866385372715
161171,"@Test public void create_no_password(){
  try {
    RestTest.target(getPort(),""String_Node_Str"").request(MediaType.APPLICATION_XML).post(Entity.entity(whoisObjectMapper.mapRpslObjects(Arrays.asList(PAULETH_PALTHEN)),MediaType.APPLICATION_XML),String.class);
    fail();
  }
 catch (  NotAuthorizedException e) {
    assertThat(e.getResponse().readEntity(String.class),containsString(""String_Node_Str""));
  }
}","@Test public void create_no_password(){
  try {
    RestTest.target(getPort(),""String_Node_Str"").request(MediaType.APPLICATION_XML).post(Entity.entity(whoisObjectMapper.mapRpslObjects(Arrays.asList(PAULETH_PALTHEN)),MediaType.APPLICATION_XML),String.class);
    fail();
  }
 catch (  NotAuthorizedException e) {
    assertOnlyErrorMessage(e,""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"");
  }
}",0.7653179190751445
161172,"@Test public void delete_no_password(){
  try {
    databaseHelper.addObject(PAULETH_PALTHEN);
    RestTest.target(getPort(),""String_Node_Str"").request().delete(String.class);
    fail();
  }
 catch (  NotAuthorizedException e) {
    assertThat(e.getResponse().readEntity(String.class),containsString(""String_Node_Str""));
  }
}","@Test public void delete_no_password(){
  try {
    databaseHelper.addObject(PAULETH_PALTHEN);
    RestTest.target(getPort(),""String_Node_Str"").request().delete(String.class);
    fail();
  }
 catch (  NotAuthorizedException e) {
    assertOnlyErrorMessage(e,""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"");
  }
}",0.7104136947218259
161173,"@Test public void search_invalid_flag(){
  try {
    RestTest.target(getPort(),""String_Node_Str"").request(MediaType.APPLICATION_XML).get(WhoisResources.class);
    fail();
  }
 catch (  BadRequestException e) {
    assertErrorMessage(e,""String_Node_Str"",""String_Node_Str"",""String_Node_Str"");
  }
}","@Test public void search_invalid_flag(){
  try {
    RestTest.target(getPort(),""String_Node_Str"").request(MediaType.APPLICATION_XML).get(WhoisResources.class);
    fail();
  }
 catch (  BadRequestException e) {
    assertOnlyErrorMessage(e,""String_Node_Str"",""String_Node_Str"",""String_Node_Str"");
  }
}",0.9933110367892976
161174,"@Test public void delete_referenced_from_other_objects(){
  try {
    RestTest.target(getPort(),""String_Node_Str"").request().delete(WhoisResources.class);
    fail();
  }
 catch (  BadRequestException e) {
    assertErrorMessage(e,""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"");
  }
}","@Test public void delete_referenced_from_other_objects(){
  try {
    RestTest.target(getPort(),""String_Node_Str"").request().delete(WhoisResources.class);
    fail();
  }
 catch (  BadRequestException e) {
    assertOnlyErrorMessage(e,""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"");
  }
}",0.9935897435897436
161175,"@Test public void search_invalid_source(){
  try {
    RestTest.target(getPort(),""String_Node_Str"").request(MediaType.APPLICATION_XML).get(WhoisResources.class);
    fail();
  }
 catch (  BadRequestException e) {
    assertErrorMessage(e,""String_Node_Str"",""String_Node_Str"",""String_Node_Str"");
  }
}","@Test public void search_invalid_source(){
  try {
    RestTest.target(getPort(),""String_Node_Str"").request(MediaType.APPLICATION_XML).get(WhoisResources.class);
    fail();
  }
 catch (  BadRequestException e) {
    assertOnlyErrorMessage(e,""String_Node_Str"",""String_Node_Str"",""String_Node_Str"");
  }
}",0.9933554817275748
161176,"@Test public void create_invalid_reference(){
  try {
    RestTest.target(getPort(),""String_Node_Str"").request().post(Entity.entity(""String_Node_Str"" + ""String_Node_Str"" + ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str"",MediaType.APPLICATION_XML),String.class);
    fail();
  }
 catch (  BadRequestException e) {
    assertThat(e.getResponse().readEntity(String.class),containsString(""String_Node_Str""));
  }
}","@Test public void create_invalid_reference(){
  try {
    RestTest.target(getPort(),""String_Node_Str"").request().post(Entity.entity(""String_Node_Str"" + ""String_Node_Str"" + ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str"",MediaType.APPLICATION_XML),String.class);
    fail();
  }
 catch (  BadRequestException e) {
    WhoisResources whoisResources=mapClientException(e);
    assertErrorMessage(whoisResources,0,""String_Node_Str"",""String_Node_Str"",""String_Node_Str"");
    assertErrorMessage(whoisResources,1,""String_Node_Str"",""String_Node_Str"",""String_Node_Str"");
  }
}",0.7881640887693342
161177,"@Test public void search_with_short_and_long_options_together(){
  databaseHelper.addObject(""String_Node_Str"" + ""String_Node_Str"" + ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str"");
  try {
    RestTest.target(getPort(),""String_Node_Str"").request(MediaType.APPLICATION_XML).get(WhoisResources.class);
    fail();
  }
 catch (  BadRequestException e) {
    assertThat(e.getResponse().readEntity(String.class),is(""String_Node_Str""));
  }
}","@Test public void search_with_short_and_long_options_together(){
  databaseHelper.addObject(""String_Node_Str"" + ""String_Node_Str"" + ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str"");
  try {
    RestTest.target(getPort(),""String_Node_Str"").request(MediaType.APPLICATION_XML).get(WhoisResources.class);
    fail();
  }
 catch (  BadRequestException e) {
    assertOnlyErrorMessage(e,""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"");
  }
}",0.8452982810920121
161178,"@Test public void search_multiple_sources(){
  try {
    RestTest.target(getPort(),""String_Node_Str"").request(MediaType.APPLICATION_XML).get(WhoisResources.class);
    fail();
  }
 catch (  BadRequestException e) {
    assertErrorMessage(e,""String_Node_Str"",""String_Node_Str"",""String_Node_Str"");
  }
}","@Test public void search_multiple_sources(){
  try {
    RestTest.target(getPort(),""String_Node_Str"").request(MediaType.APPLICATION_XML).get(WhoisResources.class);
    fail();
  }
 catch (  BadRequestException e) {
    assertOnlyErrorMessage(e,""String_Node_Str"",""String_Node_Str"",""String_Node_Str"");
  }
}",0.9933993399339934
161179,"@Test public void search_invalid_flags(){
  try {
    RestTest.target(getPort(),""String_Node_Str"").request(MediaType.APPLICATION_XML).get(WhoisResources.class);
    fail();
  }
 catch (  BadRequestException e) {
    assertThat(e.getResponse().readEntity(String.class),is(""String_Node_Str""));
  }
}","@Test public void search_invalid_flags(){
  try {
    RestTest.target(getPort(),""String_Node_Str"").request(MediaType.APPLICATION_XML).get(WhoisResources.class);
    fail();
  }
 catch (  BadRequestException e) {
    assertOnlyErrorMessage(e,""String_Node_Str"",""String_Node_Str"",""String_Node_Str"");
  }
}",0.7746243739565943
161180,"@Scheduled(fixedDelay=60 * 1000) public void incrementalUpdate(){
  logFileIndex.update(new IndexTemplate.WriteCallback(){
    @Override public void write(    final IndexWriter indexWriter,    final TaxonomyWriter taxonomyWriter) throws IOException {
      final Set<String> todaysIndexedFiles=Sets.newHashSet(Iterables.transform(logFileIndex.searchByDate(LocalDate.now()),new Function<LoggedUpdate,String>(){
        @Override public String apply(        final LoggedUpdate input){
          return input.getUpdateId();
        }
      }
));
      final String todaysFolder=LogFileIndex.DATE_FORMATTER.print(LocalDate.now());
      try {
        Files.walkFileTree(Paths.get(logDirectory),new SimpleFileVisitor<Path>(){
          @Override public FileVisitResult preVisitDirectory(          final Path dir,          final BasicFileAttributes attrs) throws IOException {
            if (dir.getFileName().toString().equals(todaysFolder)) {
              new DailyLogFolder(dir).processLoggedFiles(new LoggedUpdateProcessor<DailyLogEntry>(){
                @Override public boolean accept(                DailyLogEntry dailyLogEntry){
                  return INDEXED_LOG_ENTRIES.matcher(dailyLogEntry.getUpdateId()).matches() && !todaysIndexedFiles.contains(dailyLogEntry.getUpdateId());
                }
                @Override public void process(                DailyLogEntry dailyLogEntry,                String contents){
                  LogFileIndex.addToIndex(dailyLogEntry,contents,indexWriter);
                }
              }
);
              return FileVisitResult.SKIP_SUBTREE;
            }
            return FileVisitResult.CONTINUE;
          }
          @Override public FileVisitResult visitFileFailed(          Path file,          IOException e){
            LOGGER.info(""String_Node_Str"",file.toAbsolutePath(),e.getMessage());
            return FileVisitResult.CONTINUE;
          }
        }
);
      }
 catch (      IOException e) {
        LOGGER.error(e.getMessage(),e);
      }
    }
  }
);
}","@Scheduled(fixedDelay=60 * 1000) public void incrementalUpdate(){
  logFileIndex.update(new IndexTemplate.WriteCallback(){
    @Override public void write(    final IndexWriter indexWriter,    final TaxonomyWriter taxonomyWriter) throws IOException {
      final Set<String> todaysIndexedFiles=Sets.newHashSet(Iterables.transform(logFileIndex.searchByDate(LocalDate.now()),new Function<LoggedUpdate,String>(){
        @Override public String apply(        final LoggedUpdate input){
          return input.getUpdateId();
        }
      }
));
      final String todaysFolder=LogFileIndex.DATE_FORMATTER.print(LocalDate.now());
      try {
        Files.walkFileTree(Paths.get(logDirectory),new SimpleFileVisitor<Path>(){
          @Override public FileVisitResult preVisitDirectory(          final Path dir,          final BasicFileAttributes attrs) throws IOException {
            if (dir.getFileName().toString().equals(todaysFolder)) {
              new DailyLogFolder(dir).processLoggedFiles(new LoggedUpdateProcessor<DailyLogEntry>(){
                @Override public boolean accept(                DailyLogEntry dailyLogEntry){
                  return INDEXED_LOG_ENTRIES.matcher(dailyLogEntry.getUpdateId()).matches() && !todaysIndexedFiles.contains(dailyLogEntry.getUpdateId());
                }
                @Override public void process(                DailyLogEntry dailyLogEntry,                String contents){
                  LogFileIndex.addToIndex(dailyLogEntry,contents,indexWriter);
                }
              }
);
              return FileVisitResult.SKIP_SUBTREE;
            }
            return FileVisitResult.CONTINUE;
          }
          @Override public FileVisitResult visitFileFailed(          Path file,          IOException e){
            LOGGER.info(""String_Node_Str"",file.toAbsolutePath(),e.getMessage());
            return FileVisitResult.CONTINUE;
          }
        }
);
      }
 catch (      FileSystemException e) {
        if (!e.getReason().equals(""String_Node_Str"")) {
          LOGGER.error(e.getMessage(),e);
        }
      }
catch (      IOException e) {
        LOGGER.error(e.getMessage(),e);
      }
    }
  }
);
}",0.9624346172135044
161181,"@Override public void write(final IndexWriter indexWriter,final TaxonomyWriter taxonomyWriter) throws IOException {
  final Set<String> todaysIndexedFiles=Sets.newHashSet(Iterables.transform(logFileIndex.searchByDate(LocalDate.now()),new Function<LoggedUpdate,String>(){
    @Override public String apply(    final LoggedUpdate input){
      return input.getUpdateId();
    }
  }
));
  final String todaysFolder=LogFileIndex.DATE_FORMATTER.print(LocalDate.now());
  try {
    Files.walkFileTree(Paths.get(logDirectory),new SimpleFileVisitor<Path>(){
      @Override public FileVisitResult preVisitDirectory(      final Path dir,      final BasicFileAttributes attrs) throws IOException {
        if (dir.getFileName().toString().equals(todaysFolder)) {
          new DailyLogFolder(dir).processLoggedFiles(new LoggedUpdateProcessor<DailyLogEntry>(){
            @Override public boolean accept(            DailyLogEntry dailyLogEntry){
              return INDEXED_LOG_ENTRIES.matcher(dailyLogEntry.getUpdateId()).matches() && !todaysIndexedFiles.contains(dailyLogEntry.getUpdateId());
            }
            @Override public void process(            DailyLogEntry dailyLogEntry,            String contents){
              LogFileIndex.addToIndex(dailyLogEntry,contents,indexWriter);
            }
          }
);
          return FileVisitResult.SKIP_SUBTREE;
        }
        return FileVisitResult.CONTINUE;
      }
      @Override public FileVisitResult visitFileFailed(      Path file,      IOException e){
        LOGGER.info(""String_Node_Str"",file.toAbsolutePath(),e.getMessage());
        return FileVisitResult.CONTINUE;
      }
    }
);
  }
 catch (  IOException e) {
    LOGGER.error(e.getMessage(),e);
  }
}","@Override public void write(final IndexWriter indexWriter,final TaxonomyWriter taxonomyWriter) throws IOException {
  final Set<String> todaysIndexedFiles=Sets.newHashSet(Iterables.transform(logFileIndex.searchByDate(LocalDate.now()),new Function<LoggedUpdate,String>(){
    @Override public String apply(    final LoggedUpdate input){
      return input.getUpdateId();
    }
  }
));
  final String todaysFolder=LogFileIndex.DATE_FORMATTER.print(LocalDate.now());
  try {
    Files.walkFileTree(Paths.get(logDirectory),new SimpleFileVisitor<Path>(){
      @Override public FileVisitResult preVisitDirectory(      final Path dir,      final BasicFileAttributes attrs) throws IOException {
        if (dir.getFileName().toString().equals(todaysFolder)) {
          new DailyLogFolder(dir).processLoggedFiles(new LoggedUpdateProcessor<DailyLogEntry>(){
            @Override public boolean accept(            DailyLogEntry dailyLogEntry){
              return INDEXED_LOG_ENTRIES.matcher(dailyLogEntry.getUpdateId()).matches() && !todaysIndexedFiles.contains(dailyLogEntry.getUpdateId());
            }
            @Override public void process(            DailyLogEntry dailyLogEntry,            String contents){
              LogFileIndex.addToIndex(dailyLogEntry,contents,indexWriter);
            }
          }
);
          return FileVisitResult.SKIP_SUBTREE;
        }
        return FileVisitResult.CONTINUE;
      }
      @Override public FileVisitResult visitFileFailed(      Path file,      IOException e){
        LOGGER.info(""String_Node_Str"",file.toAbsolutePath(),e.getMessage());
        return FileVisitResult.CONTINUE;
      }
    }
);
  }
 catch (  FileSystemException e) {
    if (!e.getReason().equals(""String_Node_Str"")) {
      LOGGER.error(e.getMessage(),e);
    }
  }
catch (  IOException e) {
    LOGGER.error(e.getMessage(),e);
  }
}",0.961430967020682
161182,"public Response performUpdate(final Origin origin,final Update update,final String content,final Keyword keyword,final LoggerContext loggerContext,final HttpServletRequest request){
  loggerContext.init(getRequestId(origin.getFrom()));
  try {
    final UpdateContext updateContext=new UpdateContext(loggerContext);
    final boolean notificationsEnabled=true;
    logHttpHeaders(loggerContext,request);
    final UpdateRequest updateRequest=new UpdateRequest(origin,keyword,content,Lists.newArrayList(update),notificationsEnabled);
    final UpdateResponse response=updateRequestHandler.handle(updateRequest,updateContext);
    final RpslObject responseObject=updateContext.getPreparedUpdate(update).getUpdatedObject();
    Response.ResponseBuilder responseBuilder=response.getStatus() != UpdateStatus.SUCCESS ? Response.status(Response.Status.BAD_REQUEST) : Response.status(Response.Status.OK);
    responseBuilder.entity(createResponse(request,updateContext,update,responseObject));
    return responseBuilder.build();
  }
  finally {
    loggerContext.remove();
  }
}","public Response performUpdate(final Origin origin,final Update update,final String content,final Keyword keyword,final LoggerContext loggerContext,final HttpServletRequest request){
  loggerContext.init(getRequestId(origin.getFrom()));
  try {
    final UpdateContext updateContext=new UpdateContext(loggerContext);
    final boolean notificationsEnabled=true;
    logHttpHeaders(loggerContext,request);
    final UpdateRequest updateRequest=new UpdateRequest(origin,keyword,content,Lists.newArrayList(update),notificationsEnabled);
    updateRequestHandler.handle(updateRequest,updateContext);
    final RpslObject responseObject=updateContext.getPreparedUpdate(update).getUpdatedObject();
    Response.ResponseBuilder responseBuilder;
    UpdateStatus status=updateContext.getStatus(update);
    if (status == UpdateStatus.FAILED_AUTHENTICATION) {
      responseBuilder=Response.status(Response.Status.UNAUTHORIZED);
    }
 else     if (status == UpdateStatus.EXCEPTION) {
      responseBuilder=Response.status(Response.Status.INTERNAL_SERVER_ERROR);
    }
 else     if (status != UpdateStatus.SUCCESS) {
      responseBuilder=Response.status(Response.Status.BAD_REQUEST);
    }
 else {
      responseBuilder=Response.status(Response.Status.OK);
    }
    responseBuilder.entity(createResponse(request,updateContext,update,responseObject));
    return responseBuilder.build();
  }
  finally {
    loggerContext.remove();
  }
}",0.8123249299719888
161183,"private void assertErrorMessage(final WhoisResources whoisResources,final String text,final String severity,final String... argument){
  assertThat(whoisResources.getErrorMessages(),hasSize(1));
  assertThat(whoisResources.getErrorMessages().get(0).getText(),is(text));
  assertThat(whoisResources.getErrorMessages().get(0).getSeverity(),is(severity));
  assertThat(whoisResources.getErrorMessages().get(0).getArgs(),hasSize(argument.length));
  for (int i=0; i < argument.length; i++) {
    assertThat(whoisResources.getErrorMessages().get(0).getArgs().get(i).getValue(),is(argument[i]));
  }
}","private void assertErrorMessage(final ClientErrorException e,final String severity,final String text,final String... argument){
  WhoisResources whoisResources=e.getResponse().readEntity(WhoisResources.class);
  assertThat(whoisResources.getErrorMessages(),hasSize(1));
  assertThat(whoisResources.getErrorMessages().get(0).getText(),is(text));
  assertThat(whoisResources.getErrorMessages().get(0).getSeverity(),is(severity));
  assertThat(whoisResources.getErrorMessages().get(0).getArgs(),hasSize(argument.length));
  for (int i=0; i < argument.length; i++) {
    assertThat(whoisResources.getErrorMessages().get(0).getArgs().get(i).getValue(),is(argument[i]));
  }
}",0.8395256916996048
161184,"@Test public void create_invalid_password(){
  try {
    RestTest.target(getPort(),""String_Node_Str"").request().post(Entity.entity(whoisObjectMapper.mapRpslObjects(Arrays.asList(PAULETH_PALTHEN)),MediaType.APPLICATION_XML),String.class);
    fail();
  }
 catch (  NotAuthorizedException e) {
    assertThat(e.getResponse().readEntity(String.class),containsString(""String_Node_Str""));
  }
}","@Test public void create_invalid_password(){
  try {
    RestTest.target(getPort(),""String_Node_Str"").request().post(Entity.entity(whoisObjectMapper.mapRpslObjects(Arrays.asList(PAULETH_PALTHEN)),MediaType.APPLICATION_XML),String.class);
    fail();
  }
 catch (  NotAuthorizedException e) {
    assertErrorMessage(e,""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"");
  }
}",0.7576126674786845
161185,"@Test public void grs_lookup_object_wrong_source(){
  try {
    RestTest.target(getPort(),""String_Node_Str"").request().get(String.class);
    fail();
  }
 catch (  BadRequestException e) {
    assertErrorMessage(e.getResponse().readEntity(WhoisResources.class),""String_Node_Str"",""String_Node_Str"",""String_Node_Str"");
  }
}","@Test public void grs_lookup_object_wrong_source(){
  try {
    RestTest.target(getPort(),""String_Node_Str"").request().get(String.class);
    fail();
  }
 catch (  BadRequestException e) {
    assertErrorMessage(e,""String_Node_Str"",""String_Node_Str"",""String_Node_Str"");
  }
}",0.9212730318257956
161186,"@Test public void search_invalid_flag(){
  try {
    RestTest.target(getPort(),""String_Node_Str"").request(MediaType.APPLICATION_XML).get(WhoisResources.class);
    fail();
  }
 catch (  BadRequestException e) {
    assertErrorMessage(e.getResponse().readEntity(WhoisResources.class),""String_Node_Str"",""String_Node_Str"",""String_Node_Str"");
  }
}","@Test public void search_invalid_flag(){
  try {
    RestTest.target(getPort(),""String_Node_Str"").request(MediaType.APPLICATION_XML).get(WhoisResources.class);
    fail();
  }
 catch (  BadRequestException e) {
    assertErrorMessage(e,""String_Node_Str"",""String_Node_Str"",""String_Node_Str"");
  }
}",0.9266770670826832
161187,"@Test public void delete_referenced_from_other_objects(){
  try {
    RestTest.target(getPort(),""String_Node_Str"").request().delete(WhoisResources.class);
    fail();
  }
 catch (  BadRequestException e) {
    assertErrorMessage(e.getResponse().readEntity(WhoisResources.class),""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"");
  }
}","@Test public void delete_referenced_from_other_objects(){
  try {
    RestTest.target(getPort(),""String_Node_Str"").request().delete(WhoisResources.class);
    fail();
  }
 catch (  BadRequestException e) {
    assertErrorMessage(e,""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"");
  }
}",0.929535232383808
161188,"@Test public void search_invalid_source(){
  try {
    RestTest.target(getPort(),""String_Node_Str"").request(MediaType.APPLICATION_XML).get(WhoisResources.class);
    fail();
  }
 catch (  BadRequestException e) {
    assertErrorMessage(e.getResponse().readEntity(WhoisResources.class),""String_Node_Str"",""String_Node_Str"",""String_Node_Str"");
  }
}","@Test public void search_invalid_source(){
  try {
    RestTest.target(getPort(),""String_Node_Str"").request(MediaType.APPLICATION_XML).get(WhoisResources.class);
    fail();
  }
 catch (  BadRequestException e) {
    assertErrorMessage(e,""String_Node_Str"",""String_Node_Str"",""String_Node_Str"");
  }
}",0.9271317829457364
161189,"@Test public void search_multiple_sources(){
  try {
    RestTest.target(getPort(),""String_Node_Str"").request(MediaType.APPLICATION_XML).get(WhoisResources.class);
    fail();
  }
 catch (  BadRequestException e) {
    assertErrorMessage(e.getResponse().readEntity(WhoisResources.class),""String_Node_Str"",""String_Node_Str"",""String_Node_Str"");
  }
}","@Test public void search_multiple_sources(){
  try {
    RestTest.target(getPort(),""String_Node_Str"").request(MediaType.APPLICATION_XML).get(WhoisResources.class);
    fail();
  }
 catch (  BadRequestException e) {
    assertErrorMessage(e,""String_Node_Str"",""String_Node_Str"",""String_Node_Str"");
  }
}",0.9275808936825886
161190,"private WhoisResources createResponse(final HttpServletRequest request,UpdateContext updateContext,Update update,RpslObject responseObject){
  final WhoisResources whoisResources=new WhoisResources();
  ErrorMessages errorMessages=new ErrorMessages();
  for (  Message message : updateContext.getGlobalMessages().getAllMessages()) {
    errorMessages.addErrorMessage(new ErrorMessage(message));
  }
  for (  Map.Entry<RpslAttribute,Messages> entry : updateContext.getMessages(update).getAttributeMessages().entrySet()) {
    RpslAttribute rpslAttribute=entry.getKey();
    for (    Message message : entry.getValue().getAllMessages()) {
      errorMessages.addErrorMessage(new ErrorMessage(message,rpslAttribute));
    }
  }
  whoisResources.setErrorMessages(errorMessages);
  whoisResources.setWhoisObjects(Collections.singletonList(whoisObjectMapper.map(responseObject)));
  whoisResources.setLink(new Link(""String_Node_Str"",RestServiceHelper.getRequestURL(request).replaceFirst(""String_Node_Str"",""String_Node_Str"")));
  whoisResources.includeTermsAndConditions();
  return whoisResources;
}","private WhoisResources createResponse(final HttpServletRequest request,UpdateContext updateContext,Update update,RpslObject responseObject){
  final WhoisResources whoisResources=new WhoisResources();
  ErrorMessages errorMessages=new ErrorMessages();
  for (  Message message : updateContext.getGlobalMessages().getAllMessages()) {
    errorMessages.addErrorMessage(new ErrorMessage(message));
  }
  for (  Message message : updateContext.getMessages(update).getMessages().getAllMessages()) {
    errorMessages.addErrorMessage(new ErrorMessage(message));
  }
  for (  Map.Entry<RpslAttribute,Messages> entry : updateContext.getMessages(update).getAttributeMessages().entrySet()) {
    RpslAttribute rpslAttribute=entry.getKey();
    for (    Message message : entry.getValue().getAllMessages()) {
      errorMessages.addErrorMessage(new ErrorMessage(message,rpslAttribute));
    }
  }
  whoisResources.setErrorMessages(errorMessages);
  whoisResources.setWhoisObjects(Collections.singletonList(whoisObjectMapper.map(responseObject)));
  whoisResources.setLink(new Link(""String_Node_Str"",RestServiceHelper.getRequestURL(request).replaceFirst(""String_Node_Str"",""String_Node_Str"")));
  whoisResources.includeTermsAndConditions();
  return whoisResources;
}",0.9314017895185344
161191,"@DELETE @Produces({MediaType.APPLICATION_XML,MediaType.APPLICATION_JSON}) @Path(""String_Node_Str"") public Response delete(@Context final HttpServletRequest request,@PathParam(""String_Node_Str"") final String source,@PathParam(""String_Node_Str"") final String objectType,@PathParam(""String_Node_Str"") final String key,@QueryParam(""String_Node_Str"") @DefaultValue(""String_Node_Str"") final String reason,@QueryParam(""String_Node_Str"") final List<String> passwords,@QueryParam(""String_Node_Str"") final String override){
  checkForMainSource(request,source);
  final RpslObject originalObject=rpslObjectDao.getByKey(ObjectType.getByName(objectType),key);
  updatePerformer.performUpdate(updatePerformer.createOrigin(request),updatePerformer.createUpdate(originalObject,passwords,reason,override),updatePerformer.createContent(originalObject,passwords,reason,override),Keyword.NONE,loggerContext,request);
  return Response.status(Response.Status.OK).build();
}","@DELETE @Produces({MediaType.APPLICATION_XML,MediaType.APPLICATION_JSON}) @Path(""String_Node_Str"") public Response delete(@Context final HttpServletRequest request,@PathParam(""String_Node_Str"") final String source,@PathParam(""String_Node_Str"") final String objectType,@PathParam(""String_Node_Str"") final String key,@QueryParam(""String_Node_Str"") @DefaultValue(""String_Node_Str"") final String reason,@QueryParam(""String_Node_Str"") final List<String> passwords,@QueryParam(""String_Node_Str"") final String override){
  checkForMainSource(request,source);
  final RpslObject originalObject=rpslObjectDao.getByKey(ObjectType.getByName(objectType),key);
  return updatePerformer.performUpdate(updatePerformer.createOrigin(request),updatePerformer.createUpdate(originalObject,passwords,reason,override),updatePerformer.createContent(originalObject,passwords,reason,override),Keyword.NONE,loggerContext,request);
}",0.9671866594943518
161192,"@Test public void grs_lookup_object_wrong_source(){
  try {
    RestTest.target(getPort(),""String_Node_Str"").request().get(String.class);
    fail();
  }
 catch (  BadRequestException e) {
    assertThat(e.getResponse().readEntity(String.class),is(""String_Node_Str""));
  }
}","@Test public void grs_lookup_object_wrong_source(){
  try {
    RestTest.target(getPort(),""String_Node_Str"").request().get(String.class);
    fail();
  }
 catch (  BadRequestException e) {
    assertErrorMessage(e.getResponse().readEntity(WhoisResources.class),""String_Node_Str"",""String_Node_Str"",""String_Node_Str"");
  }
}",0.7919463087248322
161193,"@Test public void search_invalid_flag(){
  try {
    RestTest.target(getPort(),""String_Node_Str"").request(MediaType.APPLICATION_XML).get(WhoisResources.class);
    fail();
  }
 catch (  BadRequestException e) {
    assertThat(e.getResponse().readEntity(String.class),is(""String_Node_Str""));
  }
}","@Test public void search_invalid_flag(){
  try {
    RestTest.target(getPort(),""String_Node_Str"").request(MediaType.APPLICATION_XML).get(WhoisResources.class);
    fail();
  }
 catch (  BadRequestException e) {
    assertErrorMessage(e.getResponse().readEntity(WhoisResources.class),""String_Node_Str"",""String_Node_Str"",""String_Node_Str"");
  }
}",0.74375
161194,"@Test public void delete_referenced_from_other_objects(){
  try {
    RestTest.target(getPort(),""String_Node_Str"").request().delete(String.class);
    fail();
  }
 catch (  BadRequestException e) {
    assertThat(e.getResponse().readEntity(String.class),containsString(""String_Node_Str""));
  }
}","@Test public void delete_referenced_from_other_objects(){
  try {
    RestTest.target(getPort(),""String_Node_Str"").request().delete(WhoisResources.class);
    fail();
  }
 catch (  BadRequestException e) {
    assertErrorMessage(e.getResponse().readEntity(WhoisResources.class),""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"");
  }
}",0.647239263803681
161195,"@Test public void search_invalid_source(){
  try {
    RestTest.target(getPort(),""String_Node_Str"").request(MediaType.APPLICATION_XML).get(WhoisResources.class);
    fail();
  }
 catch (  BadRequestException e) {
    final String response=e.getResponse().readEntity(String.class);
    assertThat(response,is(""String_Node_Str""));
    assertThat(response,not(containsString(""String_Node_Str"")));
  }
}","@Test public void search_invalid_source(){
  try {
    RestTest.target(getPort(),""String_Node_Str"").request(MediaType.APPLICATION_XML).get(WhoisResources.class);
    fail();
  }
 catch (  BadRequestException e) {
    assertErrorMessage(e.getResponse().readEntity(WhoisResources.class),""String_Node_Str"",""String_Node_Str"",""String_Node_Str"");
  }
}",0.6604026845637584
161196,"@Test public void search_multiple_sources(){
  try {
    RestTest.target(getPort(),""String_Node_Str"").request(MediaType.APPLICATION_XML).get(WhoisResources.class);
    fail();
  }
 catch (  BadRequestException ignored) {
  }
}","@Test public void search_multiple_sources(){
  try {
    RestTest.target(getPort(),""String_Node_Str"").request(MediaType.APPLICATION_XML).get(WhoisResources.class);
    fail();
  }
 catch (  BadRequestException e) {
    assertErrorMessage(e.getResponse().readEntity(WhoisResources.class),""String_Node_Str"",""String_Node_Str"",""String_Node_Str"");
  }
}",0.7630662020905923
161197,"@Before public void setup(){
  databaseHelper.addObject(""String_Node_Str"");
  databaseHelper.addObject(""String_Node_Str"");
  databaseHelper.addObject(OWNER_MNT);
  databaseHelper.updateObject(TEST_PERSON);
}","@Before public void setup(){
  databaseHelper.addObject(""String_Node_Str"");
  databaseHelper.addObject(OWNER_MNT);
  databaseHelper.updateObject(TEST_PERSON);
}",0.8719346049046321
161198,"public Replay(final String whoisHost,final int whoisPort,final Resource queryLog,final int delayBetweenQueries,final int nrThreads) throws UnknownHostException {
  this.queryLog=queryLog;
  this.delayBetweenQueries=delayBetweenQueries;
  this.executorService=Executors.newFixedThreadPool(nrThreads);
  this.accessControlListManager=mock(AccessControlListManager.class);
  when(accessControlListManager.requiresAcl(any(RpslObject.class),any(Source.class))).thenReturn(false);
  queryExecutor=new QueryExecutor(new QueryExecutorConfiguration(""String_Node_Str"",whoisHost,whoisPort),accessControlListManager,LOGGER);
}","public Replay(final String whoisHost,final int whoisPort,final Resource queryLog,final int delayBetweenQueries,final int nrThreads) throws UnknownHostException {
  this.queryLog=queryLog;
  this.delayBetweenQueries=delayBetweenQueries;
  this.executorService=Executors.newFixedThreadPool(nrThreads);
  this.accessControlListManager=mock(AccessControlListManager.class);
  when(accessControlListManager.requiresAcl(any(RpslObject.class),any(Source.class))).thenReturn(false);
  queryExecutor=new QueryExecutor(new QueryExecutorConfiguration(""String_Node_Str"",whoisHost,whoisPort,-1),accessControlListManager,LOGGER);
}",0.9975629569455728
161199,"@POST @Path(""String_Node_Str"") @Consumes(MediaType.APPLICATION_FORM_URLENCODED) @Produces(MediaType.TEXT_PLAIN) public Response createAbuseRole(@PathParam(""String_Node_Str"") final String orgkey,@FormParam(""String_Node_Str"") final String email){
  final RpslObject organisation=objectDao.getByKey(ORGANISATION,orgkey);
  final CIString abuseContact=getAbuseContact(organisation);
  if (abuseContact != null) {
    return Response.status(Response.Status.CONFLICT).entity(abuseContact.toString()).build();
  }
  final RpslObject role=buildRole(organisation,email);
  final List<String> overridePasswords=Lists.newArrayList();
  final Origin origin=new InternalJob(""String_Node_Str"");
  final RpslObject createdRole=updatePerformer.performUpdate(origin,updatePerformer.createUpdate(role,overridePasswords,null),role.toString(),Keyword.NEW,loggerContext);
  final RpslObject org=addAbuseCToOrganisation(organisation,createdRole.getKey().toString());
  updatePerformer.performUpdate(origin,updatePerformer.createUpdate(org,overridePasswords,null),org.toString(),Keyword.NONE,loggerContext);
  return Response.ok(String.format(""String_Node_Str"",source.getName(),orgkey)).build();
}","@POST @Path(""String_Node_Str"") @Consumes(MediaType.APPLICATION_FORM_URLENCODED) @Produces(MediaType.TEXT_PLAIN) public Response createAbuseRole(@PathParam(""String_Node_Str"") final String orgkey,@FormParam(""String_Node_Str"") final String email){
  final List<RpslObject> organisation=objectDao.getByKeys(ORGANISATION,Lists.newArrayList(CIString.ciString(orgkey)));
  if (organisation.isEmpty()) {
    throw new WebApplicationException(Response.Status.NOT_FOUND);
  }
  final CIString abuseContact=getAbuseContact(organisation.get(0));
  if (abuseContact != null) {
    return Response.status(Response.Status.CONFLICT).entity(abuseContact.toString()).build();
  }
  final RpslObject role=buildRole(organisation.get(0),email);
  final Map<String,String> credentials=Maps.newHashMap();
  credentials.put(""String_Node_Str"",""String_Node_Str"");
  final Origin origin=new InternalJob(""String_Node_Str"");
  final RpslObject createdRole=updatePerformer.performUpdate(origin,updatePerformer.createOverrideUpdate(role,credentials,null),role.toString(),Keyword.NEW,loggerContext);
  final RpslObject org=addAbuseCToOrganisation(organisation.get(0),createdRole.getKey().toString());
  updatePerformer.performUpdate(origin,updatePerformer.createOverrideUpdate(org,credentials,null),org.toString(),Keyword.NONE,loggerContext);
  return Response.ok(String.format(""String_Node_Str"",source.getName(),orgkey)).build();
}",0.8391608391608392
161200,"private boolean isStopStatus(final RpslObject rpslObject){
switch (rpslObject.getType()) {
case INETNUM:
{
      final CIString status=rpslObject.getValueForAttribute(AttributeType.STATUS);
      return STOP_AT_STATUS_IPV4.contains(InetnumStatus.getStatusFor(status));
    }
case INET6NUM:
{
    final CIString status=rpslObject.getValueForAttribute(AttributeType.STATUS);
    return STOP_AT_STATUS_IPV6.contains(InetnumStatus.getStatusFor(status));
  }
default :
throw new IllegalArgumentException(""String_Node_Str"");
}
}","private boolean isStopStatus(final RpslObject rpslObject){
switch (rpslObject.getType()) {
case INETNUM:
{
      final CIString status=rpslObject.getValueForAttribute(AttributeType.STATUS);
      return STOP_AT_STATUS_IPV4.contains(InetnumStatus.getStatusFor(status));
    }
case INET6NUM:
{
    final CIString status=rpslObject.getValueForAttribute(AttributeType.STATUS);
    return STOP_AT_STATUS_IPV6.contains(Inet6numStatus.getStatusFor(status));
  }
default :
throw new IllegalArgumentException(""String_Node_Str"");
}
}",0.999043062200957
161201,"/** 
 * @param ipkey IPv4 or IPv6 address
 * @return Returns geolocation information for the specified address.
 */
@GET @Produces({MediaType.APPLICATION_XML,MediaType.APPLICATION_JSON}) public WhoisResources geolocation(@Context final HttpServletRequest request,@QueryParam(value=""String_Node_Str"") final String ipkey){
  List<Language> languages=null;
  Location location=null;
  if (ipkey == null) {
    throw new IllegalArgumentException(""String_Node_Str"");
  }
  try {
    final IpInterval interval=IpInterval.parse(ipkey);
    try {
      for (      IpEntry ipEntry : lookupEntries(interval)) {
        final RpslObject rpslObject=lookup(ipEntry);
        final RpslObject orgObject=lookupOrg(rpslObject);
        if (location == null) {
          location=getLocation(rpslObject);
          if (location == null) {
            location=getLocation(orgObject);
          }
        }
        if (languages == null) {
          languages=getLanguages(rpslObject);
          if (languages == null) {
            languages=getLanguages(orgObject);
          }
        }
        if (location != null && languages != null) {
          break;
        }
        if (isStopStatus(rpslObject)) {
          break;
        }
      }
    }
 catch (    EmptyResultDataAccessException ignored) {
    }
  }
 catch (  IllegalArgumentException e) {
    throw new WebApplicationException(Response.status(Response.Status.NOT_FOUND).entity(""String_Node_Str"").build());
  }
  if (languages == null && location == null) {
    throw new WebApplicationException(Response.status(Response.Status.NOT_FOUND).entity(""String_Node_Str"" + ipkey).build());
  }
  final WhoisResources whoisResources=new WhoisResources();
  whoisResources.setService(new Service(SERVICE_NAME));
  whoisResources.setGeolocationAttributes(new GeolocationAttributes(location,languages));
  whoisResources.setLink(new Link(""String_Node_Str"",RestServiceHelper.getRequestURL(request)));
  whoisResources.includeTermsAndConditions();
  return whoisResources;
}","/** 
 * @param ipkey IPv4 or IPv6 address
 * @return Returns geolocation information for the specified address.
 */
@GET @Produces({MediaType.APPLICATION_XML,MediaType.APPLICATION_JSON}) public WhoisResources geolocation(@Context final HttpServletRequest request,@QueryParam(value=""String_Node_Str"") final String ipkey){
  List<Language> languages=null;
  Location location=null;
  if (ipkey == null) {
    throw new IllegalArgumentException(""String_Node_Str"");
  }
  try {
    final IpInterval interval=IpInterval.parse(ipkey);
    try {
      for (      IpEntry ipEntry : lookupEntries(interval)) {
        final RpslObject rpslObject=lookup(ipEntry);
        final RpslObject orgObject=lookupOrg(rpslObject);
        if (location == null) {
          location=getLocation(rpslObject);
          if (location == null) {
            location=getLocation(orgObject);
          }
        }
        if (languages == null) {
          languages=getLanguages(rpslObject);
          if (languages == null) {
            languages=getLanguages(orgObject);
          }
        }
        if (location != null && languages != null) {
          break;
        }
        if (isStopStatus(rpslObject)) {
          break;
        }
      }
    }
 catch (    EmptyResultDataAccessException ignored) {
    }
  }
 catch (  IllegalArgumentException e) {
    throw new WebApplicationException(Response.status(Response.Status.NOT_FOUND).entity(""String_Node_Str"").build());
  }
  if (languages == null && location == null) {
    throw new WebApplicationException(Response.status(Response.Status.NOT_FOUND).entity(""String_Node_Str"" + ipkey).build());
  }
  final WhoisResources whoisResources=new WhoisResources();
  whoisResources.setService(new Service(SERVICE_NAME));
  whoisResources.setGeolocationAttributes(new GeolocationAttributes(location,languages));
  whoisResources.setLink(new Link(""String_Node_Str"",RestServiceHelper.getRequestURL(request).replaceFirst(""String_Node_Str"",""String_Node_Str"")));
  whoisResources.includeTermsAndConditions();
  return whoisResources;
}",0.9877029021151008
161202,"private WhoisResources createWhoisResources(final HttpServletRequest request,final RpslObject rpslObject,boolean filter){
  final WhoisResources whoisResources=new WhoisResources();
  whoisResources.setWhoisObjects(Collections.singletonList(whoisObjectMapper.map(rpslObject,filter)));
  whoisResources.setLink(new Link(""String_Node_Str"",RestServiceHelper.getRequestURL(request)));
  whoisResources.includeTermsAndConditions();
  return whoisResources;
}","private WhoisResources createWhoisResources(final HttpServletRequest request,final RpslObject rpslObject,boolean filter){
  final WhoisResources whoisResources=new WhoisResources();
  whoisResources.setWhoisObjects(Collections.singletonList(whoisObjectMapper.map(rpslObject,filter)));
  whoisResources.setLink(new Link(""String_Node_Str"",RestServiceHelper.getRequestURL(request).replaceFirst(""String_Node_Str"",""String_Node_Str"")));
  whoisResources.includeTermsAndConditions();
  return whoisResources;
}",0.9476987447698744
161203,"@Test public void inet6num_with_geolocation_and_language() throws Exception {
  databaseHelper.addObject(""String_Node_Str"" + ""String_Node_Str"" + ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str"");
  ipTreeUpdater.rebuild();
  final String response=createResource(""String_Node_Str"").request(MediaType.APPLICATION_XML).get(String.class);
  assertThat(response,containsString(""String_Node_Str""));
  assertThat(response,containsString(""String_Node_Str""));
  assertThat(response,containsString(""String_Node_Str""));
  assertThat(response,containsString(""String_Node_Str""));
  assertThat(response,containsString(""String_Node_Str""));
  assertThat(response,containsString(""String_Node_Str""));
}","@Test public void inet6num_with_geolocation_and_language() throws Exception {
  databaseHelper.addObject(""String_Node_Str"" + ""String_Node_Str"" + ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str"");
  ipTreeUpdater.rebuild();
  final String response=createResource(""String_Node_Str"").request(MediaType.APPLICATION_XML).get(String.class);
  assertThat(response,containsString(String.format(""String_Node_Str"",getPort(Audience.PUBLIC))));
  assertThat(response,containsString(""String_Node_Str""));
  assertThat(response,containsString(""String_Node_Str""));
  assertThat(response,containsString(""String_Node_Str""));
  assertThat(response,containsString(""String_Node_Str""));
  assertThat(response,containsString(""String_Node_Str""));
}",0.9551515151515152
161204,"@Test public void create_succeeds() throws Exception {
  final boolean filter=false;
  final WhoisResources response=createResource(AUDIENCE,""String_Node_Str"").request().post(Entity.entity(whoisObjectMapper.map(Lists.newArrayList(PAULETH_PALTHEN),filter),MediaType.APPLICATION_XML)).readEntity(WhoisResources.class);
  final WhoisObject object=response.getWhoisObjects().get(0);
  assertThat(object.getAttributes(),contains(new Attribute(""String_Node_Str"",""String_Node_Str""),new Attribute(""String_Node_Str"",""String_Node_Str""),new Attribute(""String_Node_Str"",""String_Node_Str""),new Attribute(""String_Node_Str"",""String_Node_Str""),new Attribute(""String_Node_Str"",""String_Node_Str"",null,""String_Node_Str"",new Link(""String_Node_Str"",""String_Node_Str"")),new Attribute(""String_Node_Str"",""String_Node_Str""),new Attribute(""String_Node_Str"",""String_Node_Str""),new Attribute(""String_Node_Str"",""String_Node_Str""),new Attribute(""String_Node_Str"",""String_Node_Str"")));
  assertThat(response.getTermsAndConditions().getHref(),is(WhoisResources.TERMS_AND_CONDITIONS));
}","@Test public void create_succeeds() throws Exception {
  final boolean filter=false;
  final WhoisResources response=createResource(AUDIENCE,""String_Node_Str"").request().post(Entity.entity(whoisObjectMapper.map(Lists.newArrayList(PAULETH_PALTHEN),filter),MediaType.APPLICATION_XML)).readEntity(WhoisResources.class);
  assertThat(response.getLink().getHref(),is(String.format(""String_Node_Str"",getPort(AUDIENCE))));
  final WhoisObject object=response.getWhoisObjects().get(0);
  assertThat(object.getAttributes(),contains(new Attribute(""String_Node_Str"",""String_Node_Str""),new Attribute(""String_Node_Str"",""String_Node_Str""),new Attribute(""String_Node_Str"",""String_Node_Str""),new Attribute(""String_Node_Str"",""String_Node_Str""),new Attribute(""String_Node_Str"",""String_Node_Str"",null,""String_Node_Str"",new Link(""String_Node_Str"",""String_Node_Str"")),new Attribute(""String_Node_Str"",""String_Node_Str""),new Attribute(""String_Node_Str"",""String_Node_Str""),new Attribute(""String_Node_Str"",""String_Node_Str""),new Attribute(""String_Node_Str"",""String_Node_Str"")));
  assertThat(response.getTermsAndConditions().getHref(),is(WhoisResources.TERMS_AND_CONDITIONS));
}",0.9551427276846398
161205,"/** 
 * The search interface resembles a standard Whois client query with the extra features of multi-registry client, multiple response styles that can be selected via content negotiation and with an extensible URL parameters schema.
 * @param sources           Mandatory. It's possible to specify multiple sources.
 * @param queryString       Mandatory.
 * @param inverseAttributes If specified the query is an inverse lookup on the given attribute, if not specified the query is a direct lookup search.
 * @param includeTags       Only show RPSL objects with given tags. Can be multiple.
 * @param excludeTags       Only show RPSL objects that <i>do not</i> have given tags. Can be multiple.
 * @param types             If specified the results will be filtered by object-type, multiple type-filters can be specified.
 * @param flags             Optional query-flags. Use separate flags parameters for each option (see examples above)
 * @return Returns the query result.
 */
@GET @Produces({MediaType.APPLICATION_XML,MediaType.APPLICATION_JSON}) @Path(""String_Node_Str"") public Response search(@Context HttpServletRequest request,@QueryParam(""String_Node_Str"") Set<String> sources,@QueryParam(""String_Node_Str"") String queryString,@QueryParam(""String_Node_Str"") Set<String> inverseAttributes,@QueryParam(""String_Node_Str"") Set<String> includeTags,@QueryParam(""String_Node_Str"") Set<String> excludeTags,@QueryParam(""String_Node_Str"") Set<String> types,@QueryParam(""String_Node_Str"") Set<String> flags){
  if (sources == null || sources.isEmpty()) {
    sources=Collections.singleton(sourceContext.getCurrentSource().getName().toString());
  }
 else {
    checkForInvalidSources(sources);
  }
  final Set<String> separateFlags=splitInputFlags(flags);
  checkForInvalidFlags(separateFlags);
  final Query query=Query.parse(String.format(""String_Node_Str"",QueryFlag.SOURCES.getLongFlag(),JOINER.join(sources),QueryFlag.SHOW_TAG_INFO.getLongFlag(),(types == null || types.isEmpty()) ? ""String_Node_Str"" : QueryFlag.SELECT_TYPES.getLongFlag(),JOINER.join(types),(inverseAttributes == null || inverseAttributes.isEmpty()) ? ""String_Node_Str"" : QueryFlag.INVERSE.getLongFlag(),JOINER.join(inverseAttributes),(includeTags == null || includeTags.isEmpty()) ? ""String_Node_Str"" : QueryFlag.FILTER_TAG_INCLUDE.getLongFlag(),JOINER.join(includeTags),(excludeTags == null || excludeTags.isEmpty()) ? ""String_Node_Str"" : QueryFlag.FILTER_TAG_EXCLUDE.getLongFlag(),JOINER.join(excludeTags),Joiner.on(""String_Node_Str"").join(Iterables.transform(separateFlags,new Function<String,String>(){
    @Override public String apply(    String input){
      return input.length() > 1 ? ""String_Node_Str"" + input : ""String_Node_Str"" + input;
    }
  }
)),(queryString == null ? ""String_Node_Str"" : queryString)));
  final Parameters parameters=new Parameters();
  parameters.setSources(sources);
  parameters.setQueryStrings(queryString);
  parameters.setInverseLookup(inverseAttributes);
  parameters.setTypeFilters(types);
  parameters.setFlags(separateFlags);
  Service service=new Service(SERVICE_SEARCH);
  return handleQueryAndStreamResponse(query,request,InetAddresses.forString(request.getRemoteAddr()),parameters,service);
}","/** 
 * The search interface resembles a standard Whois client query with the extra features of multi-registry client, multiple response styles that can be selected via content negotiation and with an extensible URL parameters schema.
 * @param sources           Mandatory. It's possible to specify multiple sources.
 * @param queryString       Mandatory.
 * @param inverseAttributes If specified the query is an inverse lookup on the given attribute, if not specified the query is a direct lookup search.
 * @param includeTags       Only show RPSL objects with given tags. Can be multiple.
 * @param excludeTags       Only show RPSL objects that <i>do not</i> have given tags. Can be multiple.
 * @param types             If specified the results will be filtered by object-type, multiple type-filters can be specified.
 * @param flags             Optional query-flags. Use separate flags parameters for each option (see examples above)
 * @return Returns the query result.
 */
@GET @Produces({MediaType.APPLICATION_XML,MediaType.APPLICATION_JSON}) @Path(""String_Node_Str"") public Response search(@Context HttpServletRequest request,@QueryParam(""String_Node_Str"") Set<String> sources,@QueryParam(""String_Node_Str"") String queryString,@QueryParam(""String_Node_Str"") Set<String> inverseAttributes,@QueryParam(""String_Node_Str"") Set<String> includeTags,@QueryParam(""String_Node_Str"") Set<String> excludeTags,@QueryParam(""String_Node_Str"") Set<String> types,@QueryParam(""String_Node_Str"") Set<String> flags){
  Set<String> validSources;
  if (sources == null || sources.isEmpty()) {
    validSources=Collections.singleton(sourceContext.getCurrentSource().getName().toString());
  }
 else {
    validSources=sources;
    checkForInvalidSources(validSources);
  }
  final Set<String> separateFlags=splitInputFlags(flags);
  checkForInvalidFlags(separateFlags);
  final Query query=Query.parse(String.format(""String_Node_Str"",QueryFlag.SOURCES.getLongFlag(),JOINER.join(validSources),QueryFlag.SHOW_TAG_INFO.getLongFlag(),isNullOrEmpty(types) ? ""String_Node_Str"" : QueryFlag.SELECT_TYPES.getLongFlag(),JOINER.join(types),isNullOrEmpty(inverseAttributes) ? ""String_Node_Str"" : QueryFlag.INVERSE.getLongFlag(),JOINER.join(inverseAttributes),isNullOrEmpty(includeTags) ? ""String_Node_Str"" : QueryFlag.FILTER_TAG_INCLUDE.getLongFlag(),JOINER.join(includeTags),isNullOrEmpty(excludeTags) ? ""String_Node_Str"" : QueryFlag.FILTER_TAG_EXCLUDE.getLongFlag(),JOINER.join(excludeTags),Joiner.on(""String_Node_Str"").join(Iterables.transform(separateFlags,new Function<String,String>(){
    @Override public String apply(    String input){
      return input.length() > 1 ? ""String_Node_Str"" + input : ""String_Node_Str"" + input;
    }
  }
)),(queryString == null ? ""String_Node_Str"" : queryString)));
  final Parameters parameters=new Parameters();
  parameters.setSources(validSources);
  parameters.setQueryStrings(queryString);
  parameters.setInverseLookup(inverseAttributes);
  parameters.setTypeFilters(types);
  parameters.setFlags(separateFlags);
  Service service=new Service(SERVICE_SEARCH);
  return handleQueryAndStreamResponse(query,request,InetAddresses.forString(request.getRemoteAddr()),parameters,service);
}",0.9585282195198004
161206,"public static IpInterval<?> parseReverseDomain(String reverse){
  reverse=removeTrailingDot(reverse).toLowerCase();
  if (reverse.endsWith(Ipv4Resource.IPV4_REVERSE_DOMAIN)) {
    return Ipv4Resource.parseReverseDomain(reverse);
  }
  return Ipv6Resource.parseReverseDomain(reverse);
}","public static IpInterval<?> parseReverseDomain(String reverse){
  String result=removeTrailingDot(reverse).toLowerCase();
  if (result.endsWith(Ipv4Resource.IPV4_REVERSE_DOMAIN)) {
    return Ipv4Resource.parseReverseDomain(result);
  }
  return Ipv6Resource.parseReverseDomain(result);
}",0.9179755671902268
161207,"@Override public boolean intersects(Ipv4Resource that){
  return (this.begin() >= that.begin() && this.begin() <= that.end()) || (this.end() >= that.begin() && this.end() <= that.end()) || (that.begin() >= this.begin() && that.begin() <= this.end());
}","@Override public boolean intersects(Ipv4Resource that){
  return (isIPWithinRange(this.begin(),that) || isIPWithinRange(this.end(),that) || isIPWithinRange(that.begin(),this));
}",0.6
161208,"public ObjectMessages validate(final RpslObject rpslObject){
  final ObjectMessages objectMessages=new ObjectMessages();
  final ObjectType objectType=rpslObject.getType();
  final Map<AttributeType,Integer> attributeCount=Maps.newEnumMap(AttributeType.class);
  for (  final AttributeTemplate attributeTemplate : attributeTemplates) {
    attributeCount.put(attributeTemplate.getAttributeType(),0);
  }
  for (  final RpslAttribute attribute : rpslObject.getAttributes()) {
    final AttributeType attributeType=attribute.getType();
    if (attributeType == null) {
      objectMessages.addMessage(attribute,ValidationMessages.unknownAttribute(attribute.getKey()));
    }
 else {
      final AttributeTemplate attributeTemplate=attributeTemplateMap.get(attributeType);
      if (attributeTemplate == null) {
        objectMessages.addMessage(attribute,ValidationMessages.invalidAttributeForObject(attributeType));
      }
 else       if (!attributeTemplate.getRequirement().equals(GENERATED)) {
        attribute.validateSyntax(objectType,objectMessages);
        attributeCount.put(attributeType,attributeCount.get(attributeType) + 1);
      }
    }
  }
  for (  final AttributeTemplate attributeTemplate : attributeTemplates) {
    final AttributeType attributeType=attributeTemplate.getAttributeType();
    final int count=attributeCount.get(attributeType);
    if (MANDATORY.equals(attributeTemplate.getRequirement()) && count == 0) {
      objectMessages.addMessage(ValidationMessages.missingMandatoryAttribute(attributeType));
    }
    if (SINGLE.equals(attributeTemplate.getCardinality()) && count > 1) {
      objectMessages.addMessage(ValidationMessages.tooManyAttributesOfType(attributeType));
    }
  }
  return objectMessages;
}","public ObjectMessages validate(final RpslObject rpslObject){
  final ObjectMessages objectMessages=new ObjectMessages();
  final ObjectType rpslObjectType=rpslObject.getType();
  final Map<AttributeType,Integer> attributeCount=Maps.newEnumMap(AttributeType.class);
  for (  final AttributeTemplate attributeTemplate : attributeTemplates) {
    attributeCount.put(attributeTemplate.getAttributeType(),0);
  }
  for (  final RpslAttribute attribute : rpslObject.getAttributes()) {
    final AttributeType attributeType=attribute.getType();
    if (attributeType == null) {
      objectMessages.addMessage(attribute,ValidationMessages.unknownAttribute(attribute.getKey()));
    }
 else {
      final AttributeTemplate attributeTemplate=attributeTemplateMap.get(attributeType);
      if (attributeTemplate == null) {
        objectMessages.addMessage(attribute,ValidationMessages.invalidAttributeForObject(attributeType));
      }
 else       if (!attributeTemplate.getRequirement().equals(GENERATED)) {
        attribute.validateSyntax(rpslObjectType,objectMessages);
        attributeCount.put(attributeType,attributeCount.get(attributeType) + 1);
      }
    }
  }
  for (  final AttributeTemplate attributeTemplate : attributeTemplates) {
    addValidationMessagesForAttributeTemplate(objectMessages,attributeTemplate,attributeCount);
  }
  return objectMessages;
}",0.8207273897650467
161209,"public CIString getKey(){
  if (key == null) {
    final ObjectTemplate objectTemplate=ObjectTemplate.getTemplate(type);
    final Iterator<AttributeType> keyAttributeIterator=objectTemplate.getKeyAttributes().iterator();
    CIString tmpKey=findAttribute(keyAttributeIterator.next()).getCleanValue();
    while (keyAttributeIterator.hasNext()) {
      tmpKey=tmpKey.append(findAttribute(keyAttributeIterator.next()).getCleanValue());
    }
    key=tmpKey;
  }
  return key;
}","public final CIString getKey(){
  if (key == null) {
    final ObjectTemplate objectTemplate=ObjectTemplate.getTemplate(type);
    final Iterator<AttributeType> keyAttributeIterator=objectTemplate.getKeyAttributes().iterator();
    CIString tmpKey=findAttribute(keyAttributeIterator.next()).getCleanValue();
    while (keyAttributeIterator.hasNext()) {
      tmpKey=tmpKey.append(findAttribute(keyAttributeIterator.next()).getCleanValue());
    }
    key=tmpKey;
  }
  return key;
}",0.9937369519832986
161210,"public RpslAttribute findAttribute(final AttributeType attributeType){
  final List<RpslAttribute> attributes=findAttributes(attributeType);
switch (attributes.size()) {
case 0:
    throw new IllegalArgumentException(""String_Node_Str"" + attributeType);
case 1:
  return attributes.get(0);
default :
throw new IllegalArgumentException(""String_Node_Str"" + attributeType);
}
}","public RpslAttribute findAttribute(final AttributeType attributeType){
  final List<RpslAttribute> foundAttributes=findAttributes(attributeType);
switch (foundAttributes.size()) {
case 0:
    throw new IllegalArgumentException(""String_Node_Str"" + attributeType);
case 1:
  return foundAttributes.get(0);
default :
throw new IllegalArgumentException(""String_Node_Str"" + attributeType);
}
}",0.9724047306176083
161211,"@Autowired public SourceContext(@Value(""String_Node_Str"") final String mainSourceNameString,@Value(""String_Node_Str"") final String additionalSourceNames,@Value(""String_Node_Str"") final String grsSourceNames,@Value(""String_Node_Str"") final String nrtmSourceNames,@Value(""String_Node_Str"") final String grsSourceNamesForDummification,@Value(""String_Node_Str"") final String grsSourceNamesToTagRoutes,@Value(""String_Node_Str"") final String grsMasterBaseUrl,@Value(""String_Node_Str"") final String whoisMasterUsername,@Value(""String_Node_Str"") final String whoisMasterPassword,@Value(""String_Node_Str"") final String grsSlaveBaseUrl,@Value(""String_Node_Str"") final String whoisSlaveUsername,@Value(""String_Node_Str"") final String whoisSlavePassword,@Qualifier(""String_Node_Str"") final DataSource whoisMasterDataSource,@Qualifier(""String_Node_Str"") final DataSource whoisSlaveDataSource,final DataSourceFactory dataSourceFactory){
  mainSourceName=ciString(mainSourceNameString);
  this.mainMasterSource=Source.master(mainSourceName);
  this.mainSlaveSource=Source.slave(mainSourceName);
  final Set<CIString> additionalSources=Sets.newLinkedHashSet();
  final Set<CIString> grsSources=Sets.newLinkedHashSet();
  final Map<CIString,CIString> aliases=Maps.newLinkedHashMap();
  sourceConfigurations.put(mainMasterSource,new SourceConfiguration(mainMasterSource,whoisMasterDataSource));
  sourceConfigurations.put(mainSlaveSource,new SourceConfiguration(mainSlaveSource,whoisSlaveDataSource));
  final Iterable<CIString> grsSourceNameIterable=Iterables.transform(COMMA_SPLITTER.split(grsSourceNames),new Function<String,CIString>(){
    @Nullable @Override public CIString apply(    final String input){
      return ciString(input);
    }
  }
);
  final Iterable<CIString> nrtmSourceNameIterable=Iterables.transform(COMMA_SPLITTER.split(nrtmSourceNames),new Function<String,CIString>(){
    @Nullable @Override public CIString apply(    final String input){
      return ciString(input);
    }
  }
);
  for (  final CIString grsSourceName : Iterables.concat(grsSourceNameIterable,nrtmSourceNameIterable)) {
    if (!grsSourceName.endsWith(ciString(""String_Node_Str""))) {
      LOGGER.warn(""String_Node_Str"",grsSourceName);
      continue;
    }
    if (!grsSources.add(grsSourceName)) {
      LOGGER.warn(""String_Node_Str"",grsSourceName);
      continue;
    }
    final Source grsMasterSource=Source.master(grsSourceName);
    final Source grsSlaveSource=Source.slave(grsSourceName);
    if (grsSourceName.contains(mainSourceName)) {
      LOGGER.info(""String_Node_Str"",grsSourceName,mainSourceName);
      aliases.put(grsSourceName,mainSlaveSource.getName());
      sourceConfigurations.put(grsMasterSource,new SourceConfiguration(grsMasterSource,whoisMasterDataSource));
      sourceConfigurations.put(grsSlaveSource,new SourceConfiguration(grsSlaveSource,whoisSlaveDataSource));
    }
 else {
      final String grsSlaveUrl=createGrsUrl(grsSlaveBaseUrl,grsSourceName);
      final DataSource grsSlaveDataSource=dataSourceFactory.createDataSource(grsSlaveUrl,whoisSlaveUsername,whoisSlavePassword);
      sourceConfigurations.put(grsSlaveSource,new SourceConfiguration(grsSlaveSource,grsSlaveDataSource));
      final String grsMasterUrl=createGrsUrl(grsMasterBaseUrl,grsSourceName);
      final DataSource grsMasterDataSource=dataSourceFactory.createDataSource(grsMasterUrl,whoisMasterUsername,whoisMasterPassword);
      sourceConfigurations.put(grsMasterSource,new SourceConfiguration(grsMasterSource,grsMasterDataSource));
    }
  }
  LOGGER.info(""String_Node_Str"",sourceConfigurations.keySet());
  this.grsSourceNames=Collections.unmodifiableSet(grsSources);
  this.grsSourceNamesForDummification=ciSet(COMMA_SPLITTER.split(grsSourceNamesForDummification));
  this.grsSourceNamesToTagRoutes=ciSet(COMMA_SPLITTER.split(grsSourceNamesToTagRoutes));
  this.aliases=Collections.unmodifiableMap(aliases);
  this.allSourceNames=Collections.unmodifiableSet(Sets.newLinkedHashSet(Iterables.transform(sourceConfigurations.keySet(),new Function<Source,CIString>(){
    @Nullable @Override public CIString apply(    final Source source){
      return source.getName();
    }
  }
)));
  for (  final CIString sourceName : CIString.ciSet(COMMA_SPLITTER.split(additionalSourceNames))) {
    if (this.allSourceNames.contains(sourceName)) {
      additionalSources.add(sourceName);
    }
 else {
      LOGGER.error(""String_Node_Str"",sourceName);
      throw new IllegalSourceException(sourceName.toString());
    }
  }
  this.additionalSourceNames=Collections.unmodifiableSet(additionalSources);
  if (!additionalSources.isEmpty()) {
    LOGGER.info(""String_Node_Str"",additionalSources);
  }
}","@Autowired public SourceContext(@Value(""String_Node_Str"") final String mainSourceNameString,@Value(""String_Node_Str"") final String additionalSourceNames,@Value(""String_Node_Str"") final String grsSourceNames,@Value(""String_Node_Str"") final String nrtmSourceNames,@Value(""String_Node_Str"") final String grsSourceNamesForDummification,@Value(""String_Node_Str"") final String grsSourceNamesToTagRoutes,@Value(""String_Node_Str"") final String grsMasterBaseUrl,@Value(""String_Node_Str"") final String whoisMasterUsername,@Value(""String_Node_Str"") final String whoisMasterPassword,@Value(""String_Node_Str"") final String grsSlaveBaseUrl,@Value(""String_Node_Str"") final String whoisSlaveUsername,@Value(""String_Node_Str"") final String whoisSlavePassword,@Qualifier(""String_Node_Str"") final DataSource whoisMasterDataSource,@Qualifier(""String_Node_Str"") final DataSource whoisSlaveDataSource,final DataSourceFactory dataSourceFactory){
  mainSourceName=ciString(mainSourceNameString);
  this.mainMasterSource=Source.master(mainSourceName);
  this.mainSlaveSource=Source.slave(mainSourceName);
  final Set<CIString> additionalSources=Sets.newLinkedHashSet();
  final Set<CIString> grsSources=Sets.newLinkedHashSet();
  final Map<CIString,CIString> newAliases=Maps.newLinkedHashMap();
  sourceConfigurations.put(mainMasterSource,new SourceConfiguration(mainMasterSource,whoisMasterDataSource));
  sourceConfigurations.put(mainSlaveSource,new SourceConfiguration(mainSlaveSource,whoisSlaveDataSource));
  final Iterable<CIString> grsSourceNameIterable=Iterables.transform(COMMA_SPLITTER.split(grsSourceNames),new Function<String,CIString>(){
    @Nullable @Override public CIString apply(    final String input){
      return ciString(input);
    }
  }
);
  final Iterable<CIString> nrtmSourceNameIterable=Iterables.transform(COMMA_SPLITTER.split(nrtmSourceNames),new Function<String,CIString>(){
    @Nullable @Override public CIString apply(    final String input){
      return ciString(input);
    }
  }
);
  for (  final CIString grsSourceName : Iterables.concat(grsSourceNameIterable,nrtmSourceNameIterable)) {
    if (!grsSourceName.endsWith(ciString(""String_Node_Str""))) {
      LOGGER.warn(""String_Node_Str"",grsSourceName);
      continue;
    }
    if (!grsSources.add(grsSourceName)) {
      LOGGER.warn(""String_Node_Str"",grsSourceName);
      continue;
    }
    final Source grsMasterSource=Source.master(grsSourceName);
    final Source grsSlaveSource=Source.slave(grsSourceName);
    if (grsSourceName.contains(mainSourceName)) {
      LOGGER.info(""String_Node_Str"",grsSourceName,mainSourceName);
      newAliases.put(grsSourceName,mainSlaveSource.getName());
      sourceConfigurations.put(grsMasterSource,new SourceConfiguration(grsMasterSource,whoisMasterDataSource));
      sourceConfigurations.put(grsSlaveSource,new SourceConfiguration(grsSlaveSource,whoisSlaveDataSource));
    }
 else {
      final String grsSlaveUrl=createGrsUrl(grsSlaveBaseUrl,grsSourceName);
      final DataSource grsSlaveDataSource=dataSourceFactory.createDataSource(grsSlaveUrl,whoisSlaveUsername,whoisSlavePassword);
      sourceConfigurations.put(grsSlaveSource,new SourceConfiguration(grsSlaveSource,grsSlaveDataSource));
      final String grsMasterUrl=createGrsUrl(grsMasterBaseUrl,grsSourceName);
      final DataSource grsMasterDataSource=dataSourceFactory.createDataSource(grsMasterUrl,whoisMasterUsername,whoisMasterPassword);
      sourceConfigurations.put(grsMasterSource,new SourceConfiguration(grsMasterSource,grsMasterDataSource));
    }
  }
  LOGGER.info(""String_Node_Str"",sourceConfigurations.keySet());
  this.grsSourceNames=Collections.unmodifiableSet(grsSources);
  this.grsSourceNamesForDummification=ciSet(COMMA_SPLITTER.split(grsSourceNamesForDummification));
  this.grsSourceNamesToTagRoutes=ciSet(COMMA_SPLITTER.split(grsSourceNamesToTagRoutes));
  this.aliases=Collections.unmodifiableMap(newAliases);
  this.allSourceNames=Collections.unmodifiableSet(Sets.newLinkedHashSet(Iterables.transform(sourceConfigurations.keySet(),new Function<Source,CIString>(){
    @Nullable @Override public CIString apply(    final Source source){
      return source.getName();
    }
  }
)));
  for (  final CIString sourceName : CIString.ciSet(COMMA_SPLITTER.split(additionalSourceNames))) {
    if (this.allSourceNames.contains(sourceName)) {
      additionalSources.add(sourceName);
    }
 else {
      LOGGER.error(""String_Node_Str"",sourceName);
      throw new IllegalSourceException(sourceName.toString());
    }
  }
  this.additionalSourceNames=Collections.unmodifiableSet(additionalSources);
  if (!additionalSources.isEmpty()) {
    LOGGER.info(""String_Node_Str"",additionalSources);
  }
}",0.9983976070932592
161212,"public Iterable<? extends ResponseObject> getResponse(final Query query,Iterable<? extends ResponseObject> result){
  result=filterPlaceholdersDecorator.decorate(query,result);
  result=dummify(result);
  result=groupRelatedObjects(query,result);
  result=filterTagsDecorator.decorate(query,result);
  result=filterPersonalDecorator.decorate(query,result);
  result=applyAbuseC(query,result);
  result=applySyntaxFilter(query,result);
  result=filterEmail(query,result);
  result=filterAuth(result);
  result=applyOutputFilters(query,result);
  return result;
}","public Iterable<? extends ResponseObject> getResponse(final Query query,Iterable<? extends ResponseObject> result){
  Iterable<? extends ResponseObject> decoratedResult=filterPlaceholdersDecorator.decorate(query,result);
  decoratedResult=filterPlaceholdersDecorator.decorate(query,decoratedResult);
  decoratedResult=dummify(decoratedResult);
  decoratedResult=groupRelatedObjects(query,decoratedResult);
  decoratedResult=filterTagsDecorator.decorate(query,decoratedResult);
  decoratedResult=filterPersonalDecorator.decorate(query,decoratedResult);
  decoratedResult=applyAbuseC(query,decoratedResult);
  decoratedResult=applySyntaxFilter(query,decoratedResult);
  decoratedResult=filterEmail(query,decoratedResult);
  decoratedResult=filterAuth(decoratedResult);
  decoratedResult=applyOutputFilters(query,decoratedResult);
  return decoratedResult;
}",0.4858757062146893
161213,"public Update(final PreparedUpdate update,UpdateContext updateContext){
  this.referenceObject=new FilterAuthFunction().apply(update.getReferenceObject());
  this.updatedObject=new FilterAuthFunction().apply(update.getUpdatedObject());
  this.action=update.getAction().name();
  this.result=RESULT_MAP.get(update.getAction());
  this.update=update;
  String reason=StringUtils.join(update.getUpdate().getDeleteReasons(),""String_Node_Str"");
  if (StringUtils.isNotEmpty(reason)) {
    reason=prettyPrint(String.format(""String_Node_Str"",Messages.Type.INFO),reason,12,80);
  }
  versionId=updateContext.getVersionId(update);
  this.reason=reason;
}","public Update(final PreparedUpdate update,UpdateContext updateContext){
  this.referenceObject=new FilterAuthFunction().apply(update.getReferenceObject());
  this.updatedObject=new FilterAuthFunction().apply(update.getUpdatedObject());
  this.action=update.getAction().name();
  this.result=RESULT_MAP.get(update.getAction());
  this.update=update;
  String updateReason=StringUtils.join(update.getUpdate().getDeleteReasons(),""String_Node_Str"");
  if (StringUtils.isNotEmpty(updateReason)) {
    updateReason=prettyPrint(String.format(""String_Node_Str"",Messages.Type.INFO),updateReason,12,80);
  }
  versionId=updateContext.getVersionId(update);
  this.reason=updateReason;
}",0.9696969696969696
161214,"static int readInputLine(final ByteArrayOutputStream out,int lookAhead,final InputStream in) throws IOException {
  out.reset();
  int ch=lookAhead;
  do {
    out.write(ch);
    if (ch == '\r' || ch == '\n') {
      lookAhead=readPassedEOL(out,ch,in);
      break;
    }
  }
 while ((ch=in.read()) >= 0);
  if (ch < 0) {
    lookAhead=-1;
  }
  return lookAhead;
}","static int readInputLine(final ByteArrayOutputStream out,int lookAhead,final InputStream in) throws IOException {
  int newLookAhead=lookAhead;
  out.reset();
  int ch=lookAhead;
  do {
    out.write(ch);
    if (ch == '\r' || ch == '\n') {
      newLookAhead=readPassedEOL(out,ch,in);
      break;
    }
  }
 while ((ch=in.read()) >= 0);
  if (ch < 0) {
    newLookAhead=-1;
  }
  return newLookAhead;
}",0.94148244473342
161215,"public void setup(){
  final Splitter splitter=Splitter.on(',');
  final Iterable<String> mainSources=Collections.singletonList(valueResolver.resolveStringValue(""String_Node_Str""));
  final Iterable<String> grsSources=splitter.split(valueResolver.resolveStringValue(""String_Node_Str""));
  final Iterable<String> nrtmSources=splitter.split(valueResolver.resolveStringValue(""String_Node_Str""));
  final Set<String> sources=Sets.newLinkedHashSet(Iterables.concat(mainSources,grsSources,nrtmSources));
  for (  final String source : sources) {
    try {
      final JdbcTemplate jdbcTemplate=sourceContext.getSourceConfiguration(Source.master(source)).getJdbcTemplate();
      truncateTables(jdbcTemplate);
      loadScripts(jdbcTemplate,""String_Node_Str"");
    }
 catch (    IllegalSourceException e) {
      LOGGER.warn(""String_Node_Str"",source);
    }
  }
  truncateTables(aclTemplate,schedulerTemplate,mailupdatesTemplate,internalsTemplate);
}","public void setup(){
  final Splitter splitter=Splitter.on(',').trimResults();
  final Iterable<String> mainSources=Collections.singletonList(valueResolver.resolveStringValue(""String_Node_Str""));
  final Iterable<String> grsSources=splitter.split(valueResolver.resolveStringValue(""String_Node_Str""));
  final Iterable<String> nrtmSources=splitter.split(valueResolver.resolveStringValue(""String_Node_Str""));
  final Set<String> sources=Sets.newLinkedHashSet(Iterables.concat(mainSources,grsSources,nrtmSources));
  for (  final String source : sources) {
    try {
      final JdbcTemplate jdbcTemplate=sourceContext.getSourceConfiguration(Source.master(source)).getJdbcTemplate();
      truncateTables(jdbcTemplate);
      loadScripts(jdbcTemplate,""String_Node_Str"");
    }
 catch (    IllegalSourceException e) {
      LOGGER.warn(""String_Node_Str"",source);
    }
  }
  truncateTables(aclTemplate,schedulerTemplate,mailupdatesTemplate,internalsTemplate);
  loadScripts(internalsTemplate,""String_Node_Str"");
}",0.966188524590164
161216,"private static List<RpslAttribute> getDummificationRemarks(final RpslObject rpslObject){
  final String source=rpslObject.getValueForAttribute(AttributeType.SOURCE).toString();
switch (source) {
case ""String_Node_Str"":
case ""String_Node_Str"":
case ""String_Node_Str"":
case ""String_Node_Str"":
    return Lists.newArrayList(new RpslAttribute(""String_Node_Str"",""String_Node_Str""),new RpslAttribute(""String_Node_Str"",""String_Node_Str""),new RpslAttribute(""String_Node_Str"",""String_Node_Str""),new RpslAttribute(""String_Node_Str"",""String_Node_Str""),new RpslAttribute(""String_Node_Str"",""String_Node_Str""),new RpslAttribute(""String_Node_Str"",""String_Node_Str""),new RpslAttribute(""String_Node_Str"",""String_Node_Str""));
case ""String_Node_Str"":
  return Lists.newArrayList(new RpslAttribute(""String_Node_Str"",""String_Node_Str""),new RpslAttribute(""String_Node_Str"",""String_Node_Str""),new RpslAttribute(""String_Node_Str"",""String_Node_Str""),new RpslAttribute(""String_Node_Str"",""String_Node_Str""),new RpslAttribute(""String_Node_Str"",""String_Node_Str""),new RpslAttribute(""String_Node_Str"",""String_Node_Str""),new RpslAttribute(""String_Node_Str"",""String_Node_Str""));
case ""String_Node_Str"":
return Lists.newArrayList(new RpslAttribute(""String_Node_Str"",""String_Node_Str""),new RpslAttribute(""String_Node_Str"",""String_Node_Str""),new RpslAttribute(""String_Node_Str"",""String_Node_Str""),new RpslAttribute(""String_Node_Str"",""String_Node_Str""),new RpslAttribute(""String_Node_Str"",""String_Node_Str""),new RpslAttribute(""String_Node_Str"",""String_Node_Str""),new RpslAttribute(""String_Node_Str"",""String_Node_Str""));
case ""String_Node_Str"":
return Lists.newArrayList(new RpslAttribute(""String_Node_Str"",""String_Node_Str""),new RpslAttribute(""String_Node_Str"",""String_Node_Str""),new RpslAttribute(""String_Node_Str"",""String_Node_Str""),new RpslAttribute(""String_Node_Str"",""String_Node_Str""),new RpslAttribute(""String_Node_Str"",""String_Node_Str""),new RpslAttribute(""String_Node_Str"",""String_Node_Str""),new RpslAttribute(""String_Node_Str"",""String_Node_Str""));
case ""String_Node_Str"":
return Lists.newArrayList(new RpslAttribute(""String_Node_Str"",""String_Node_Str""),new RpslAttribute(""String_Node_Str"",""String_Node_Str""),new RpslAttribute(""String_Node_Str"",""String_Node_Str""),new RpslAttribute(""String_Node_Str"",""String_Node_Str""),new RpslAttribute(""String_Node_Str"",""String_Node_Str""),new RpslAttribute(""String_Node_Str"",""String_Node_Str""),new RpslAttribute(""String_Node_Str"",""String_Node_Str""));
case ""String_Node_Str"":
return Lists.newArrayList(new RpslAttribute(""String_Node_Str"",""String_Node_Str""),new RpslAttribute(""String_Node_Str"",""String_Node_Str""),new RpslAttribute(""String_Node_Str"",""String_Node_Str""),new RpslAttribute(""String_Node_Str"",""String_Node_Str""),new RpslAttribute(""String_Node_Str"",""String_Node_Str""),new RpslAttribute(""String_Node_Str"",""String_Node_Str""),new RpslAttribute(""String_Node_Str"",""String_Node_Str""));
case ""String_Node_Str"":
return Lists.newArrayList(new RpslAttribute(""String_Node_Str"",""String_Node_Str""),new RpslAttribute(""String_Node_Str"",""String_Node_Str""),new RpslAttribute(""String_Node_Str"",""String_Node_Str""),new RpslAttribute(""String_Node_Str"",""String_Node_Str""),new RpslAttribute(""String_Node_Str"",""String_Node_Str""),new RpslAttribute(""String_Node_Str"",""String_Node_Str""),new RpslAttribute(""String_Node_Str"",""String_Node_Str""));
default :
LOGGER.warn(""String_Node_Str"",source,rpslObject.getKey());
return Lists.newArrayList();
}
}","private static List<RpslAttribute> getDummificationRemarks(final RpslObject rpslObject){
  final String source=rpslObject.getValueForAttribute(AttributeType.SOURCE).toLowerCase();
switch (source) {
case ""String_Node_Str"":
case ""String_Node_Str"":
case ""String_Node_Str"":
case ""String_Node_Str"":
    return Lists.newArrayList(new RpslAttribute(""String_Node_Str"",""String_Node_Str""),new RpslAttribute(""String_Node_Str"",""String_Node_Str""),new RpslAttribute(""String_Node_Str"",""String_Node_Str""),new RpslAttribute(""String_Node_Str"",""String_Node_Str""),new RpslAttribute(""String_Node_Str"",""String_Node_Str""),new RpslAttribute(""String_Node_Str"",""String_Node_Str""),new RpslAttribute(""String_Node_Str"",""String_Node_Str""));
case ""String_Node_Str"":
  return Lists.newArrayList(new RpslAttribute(""String_Node_Str"",""String_Node_Str""),new RpslAttribute(""String_Node_Str"",""String_Node_Str""),new RpslAttribute(""String_Node_Str"",""String_Node_Str""),new RpslAttribute(""String_Node_Str"",""String_Node_Str""),new RpslAttribute(""String_Node_Str"",""String_Node_Str""),new RpslAttribute(""String_Node_Str"",""String_Node_Str""),new RpslAttribute(""String_Node_Str"",""String_Node_Str""));
case ""String_Node_Str"":
return Lists.newArrayList(new RpslAttribute(""String_Node_Str"",""String_Node_Str""),new RpslAttribute(""String_Node_Str"",""String_Node_Str""),new RpslAttribute(""String_Node_Str"",""String_Node_Str""),new RpslAttribute(""String_Node_Str"",""String_Node_Str""),new RpslAttribute(""String_Node_Str"",""String_Node_Str""),new RpslAttribute(""String_Node_Str"",""String_Node_Str""),new RpslAttribute(""String_Node_Str"",""String_Node_Str""));
case ""String_Node_Str"":
return Lists.newArrayList(new RpslAttribute(""String_Node_Str"",""String_Node_Str""),new RpslAttribute(""String_Node_Str"",""String_Node_Str""),new RpslAttribute(""String_Node_Str"",""String_Node_Str""),new RpslAttribute(""String_Node_Str"",""String_Node_Str""),new RpslAttribute(""String_Node_Str"",""String_Node_Str""),new RpslAttribute(""String_Node_Str"",""String_Node_Str""),new RpslAttribute(""String_Node_Str"",""String_Node_Str""));
case ""String_Node_Str"":
return Lists.newArrayList(new RpslAttribute(""String_Node_Str"",""String_Node_Str""),new RpslAttribute(""String_Node_Str"",""String_Node_Str""),new RpslAttribute(""String_Node_Str"",""String_Node_Str""),new RpslAttribute(""String_Node_Str"",""String_Node_Str""),new RpslAttribute(""String_Node_Str"",""String_Node_Str""),new RpslAttribute(""String_Node_Str"",""String_Node_Str""),new RpslAttribute(""String_Node_Str"",""String_Node_Str""));
case ""String_Node_Str"":
return Lists.newArrayList(new RpslAttribute(""String_Node_Str"",""String_Node_Str""),new RpslAttribute(""String_Node_Str"",""String_Node_Str""),new RpslAttribute(""String_Node_Str"",""String_Node_Str""),new RpslAttribute(""String_Node_Str"",""String_Node_Str""),new RpslAttribute(""String_Node_Str"",""String_Node_Str""),new RpslAttribute(""String_Node_Str"",""String_Node_Str""),new RpslAttribute(""String_Node_Str"",""String_Node_Str""));
case ""String_Node_Str"":
return Lists.newArrayList(new RpslAttribute(""String_Node_Str"",""String_Node_Str""),new RpslAttribute(""String_Node_Str"",""String_Node_Str""),new RpslAttribute(""String_Node_Str"",""String_Node_Str""),new RpslAttribute(""String_Node_Str"",""String_Node_Str""),new RpslAttribute(""String_Node_Str"",""String_Node_Str""),new RpslAttribute(""String_Node_Str"",""String_Node_Str""),new RpslAttribute(""String_Node_Str"",""String_Node_Str""));
default :
LOGGER.warn(""String_Node_Str"",source,rpslObject.getKey());
return Lists.newArrayList();
}
}",0.9978162760227108
161217,"public AbuseResources mapAbuseContact(String key,String foundKey,String abuseEmail,String source){
  final AbuseResources abuseResources=new AbuseResources();
  abuseResources.setAbuseContact(new AbuseContact().setEmail(abuseEmail));
  abuseResources.setLink(new Link(""String_Node_Str"",String.format(""String_Node_Str"",source,key)));
  abuseResources.setService(""String_Node_Str"");
  final Parameters parameters=new Parameters();
  parameters.setPrimaryKey(new AbusePKey(foundKey));
  parameters.setSources(Lists.newArrayList(new Source(source).setName(source.toUpperCase())));
  abuseResources.setParameters(parameters);
  abuseResources.setTermsAndConditions(new Link(""String_Node_Str"",WhoisRestService.TERMS_AND_CONDITIONS));
  return abuseResources;
}","public AbuseResources mapAbuseContact(final String soughtKey,final String source,final Iterable<RpslAttribute> attributes){
  String foundKey=""String_Node_Str"";
  String abuseEmail=""String_Node_Str"";
  for (  final RpslAttribute attribute : attributes) {
    if (attribute.getType() == AttributeType.ABUSE_MAILBOX) {
      abuseEmail=attribute.getCleanValue().toString();
    }
 else {
      foundKey=attribute.getCleanValue().toString();
    }
  }
  final AbuseResources abuseResources=new AbuseResources();
  abuseResources.setAbuseContact(new AbuseContact().setEmail(abuseEmail));
  abuseResources.setLink(new Link(""String_Node_Str"",String.format(""String_Node_Str"",source,soughtKey)));
  abuseResources.setService(""String_Node_Str"");
  final Parameters parameters=new Parameters();
  parameters.setPrimaryKey(new AbusePKey(foundKey));
  parameters.setSources(Lists.newArrayList(new Source(source).setName(source.toUpperCase())));
  abuseResources.setParameters(parameters);
  abuseResources.setTermsAndConditions(new Link(""String_Node_Str"",WhoisRestService.TERMS_AND_CONDITIONS));
  return abuseResources;
}",0.7821888412017167
161218,"@GET @Produces({MediaType.APPLICATION_XML,MediaType.APPLICATION_JSON}) @Path(""String_Node_Str"") public Response abuseFind(@Context HttpServletRequest request,@PathParam(""String_Node_Str"") String source,@PathParam(""String_Node_Str"") String key){
  checkForMainSource(source);
  final String format=String.format(""String_Node_Str"",QueryFlag.ABUSE_CONTACT.getLongFlag(),key == null ? ""String_Node_Str"" : key);
  final Query query=Query.parse(format);
  final ApiResponseHandlerAbuseC apiResponseHandlerAbuseC=new ApiResponseHandlerAbuseC();
  queryHandler.streamResults(query,InetAddresses.forString(request.getRemoteAddr()),System.identityHashCode(Thread.currentThread()),apiResponseHandlerAbuseC);
  String foundKey=""String_Node_Str"";
  String abuseEmail=""String_Node_Str"";
  final RpslAttributes abuseContactInfo=apiResponseHandlerAbuseC.getAbuseContactInfo();
  if (abuseContactInfo == null) {
    throw new NotFoundException();
  }
  for (  final RpslAttribute attribute : abuseContactInfo.getAttributes()) {
    if (attribute.getType() == AttributeType.ABUSE_MAILBOX) {
      abuseEmail=attribute.getCleanValue().toString();
    }
 else {
      foundKey=attribute.getCleanValue().toString();
    }
  }
  return Response.ok(whoisObjectMapper.mapAbuseContact(key,foundKey,abuseEmail,source)).build();
}","@GET @Produces({MediaType.APPLICATION_XML,MediaType.APPLICATION_JSON}) @Path(""String_Node_Str"") public Response abuseFind(@Context HttpServletRequest request,@PathParam(""String_Node_Str"") String source,@PathParam(""String_Node_Str"") String key){
  checkForMainSource(source);
  final String format=String.format(""String_Node_Str"",QueryFlag.ABUSE_CONTACT.getLongFlag(),key == null ? ""String_Node_Str"" : key);
  final Query query=Query.parse(format);
  final ApiResponseHandlerAbuseC apiResponseHandlerAbuseC=new ApiResponseHandlerAbuseC();
  queryHandler.streamResults(query,InetAddresses.forString(request.getRemoteAddr()),System.identityHashCode(Thread.currentThread()),apiResponseHandlerAbuseC);
  final RpslAttributes abuseContactInfo=apiResponseHandlerAbuseC.getAbuseContactInfo();
  if (abuseContactInfo == null) {
    throw new NotFoundException();
  }
  return Response.ok(whoisObjectMapper.mapAbuseContact(key,source,abuseContactInfo.getAttributes())).build();
}",0.823943661971831
161219,"@Test public void abuse_contact_not_found(){
}","@Test public void abuse_contact_not_found(){
  databaseHelper.addObject(""String_Node_Str"" + ""String_Node_Str"" + ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str"");
  databaseHelper.addObject(""String_Node_Str"" + ""String_Node_Str"" + ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str"");
  try {
    createResource(AUDIENCE,""String_Node_Str"").accept(MediaType.APPLICATION_XML).get(AbuseResources.class);
  }
 catch (  UniformInterfaceException e) {
    assertThat(e.getResponse().getStatus(),is(Response.Status.NOT_FOUND.getStatusCode()));
  }
}",0.1327561327561327
161220,"@Override public ResponseObject apply(final @Nullable ResponseObject input){
  if (!(input instanceof RpslObject)) {
    return input;
  }
  final RpslObject rpslObject=(RpslObject)input;
  final List<RpslAttribute> newAttributes=new ArrayList<>();
  final List<RpslAttribute> abuseCAttributes=new ArrayList<>();
  if (ABUSE_CONTACT_OBJECT_TYPES.contains(rpslObject.getType())) {
    final Map<CIString,CIString> abuseContacts=abuseCFinder.getAbuseContacts(rpslObject);
    if (!abuseContacts.isEmpty()) {
      abuseCAttributes.add(rpslObject.getTypeAttribute());
      for (      final CIString abuseContact : abuseContacts.keySet()) {
        abuseCAttributes.add(new RpslAttribute(AttributeType.ABUSE_MAILBOX,abuseContact.toString()));
      }
      return new RpslAttributes(abuseCAttributes);
    }
  }
  for (  final RpslAttribute attribute : rpslObject.getAttributes()) {
    if (BRIEF_ATTRIBUTES.contains(attribute.getType())) {
      newAttributes.add(attribute);
    }
  }
  if (newAttributes.isEmpty()) {
    return null;
  }
  return new RpslAttributes(newAttributes);
}","@Override public ResponseObject apply(final @Nullable ResponseObject input){
  if (!(input instanceof RpslObject)) {
    return input;
  }
  final RpslObject rpslObject=(RpslObject)input;
  final List<RpslAttribute> newAttributes=new ArrayList<>();
  final List<RpslAttribute> abuseCAttributes=new ArrayList<>();
  if (ABUSE_CONTACT_OBJECT_TYPES.contains(rpslObject.getType())) {
    final Map<CIString,CIString> abuseContacts=abuseCFinder.getAbuseContacts(rpslObject);
    if (!abuseContacts.isEmpty()) {
      abuseCAttributes.add(rpslObject.getTypeAttribute());
      for (      final CIString abuseContact : abuseContacts.keySet()) {
        abuseCAttributes.add(new RpslAttribute(AttributeType.ABUSE_MAILBOX,abuseContacts.get(abuseContact).toString()));
      }
      return new RpslAttributes(abuseCAttributes);
    }
  }
  for (  final RpslAttribute attribute : rpslObject.getAttributes()) {
    if (BRIEF_ATTRIBUTES.contains(attribute.getType())) {
      newAttributes.add(attribute);
    }
  }
  if (newAttributes.isEmpty()) {
    return null;
  }
  return new RpslAttributes(newAttributes);
}",0.991304347826087
161221,"@Test public void map_abuseContact() throws XMLStreamException {
  final AbuseResources result=subject.mapAbuseContact(""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"");
  assertThat(result.getAbuseContact().getEmail(),is(""String_Node_Str""));
  assertThat(result.getLink().getHref(),is(""String_Node_Str""));
  assertThat(result.getParameters().getPrimaryKey().getValue(),is(""String_Node_Str""));
  assertThat(result.getParameters().getSources().getSources().get(0).getId(),is(""String_Node_Str""));
  assertThat(result.getService(),is(""String_Node_Str""));
}","@Test public void map_abuseContact() throws XMLStreamException {
  final AbuseResources result=subject.mapAbuseContact(""String_Node_Str"",""String_Node_Str"",Lists.newArrayList(new RpslAttribute(""String_Node_Str"",""String_Node_Str""),new RpslAttribute(""String_Node_Str"",""String_Node_Str"")));
  assertThat(result.getAbuseContact().getEmail(),is(""String_Node_Str""));
  assertThat(result.getLink().getHref(),is(""String_Node_Str""));
  assertThat(result.getParameters().getPrimaryKey().getValue(),is(""String_Node_Str""));
  assertThat(result.getParameters().getSources().getSources().get(0).getId(),is(""String_Node_Str""));
  assertThat(result.getService(),is(""String_Node_Str""));
}",0.8683788121990369
161222,"@Transactional public AuthoritativeResource load(final Logger logger,final String source){
  final Set<CIString> autNums=Sets.newHashSet();
  final IntervalMap<Ipv4Resource,Ipv4Resource> inetnums=new NestedIntervalMap<>();
  final IntervalMap<Ipv6Resource,Ipv6Resource> inet6nums=new NestedIntervalMap<>();
  jdbcTemplate.query(""String_Node_Str"",new RowCallbackHandler(){
    @Override public void processRow(    ResultSet rs) throws SQLException {
      String resource=rs.getString(1);
      if (resource.startsWith(""String_Node_Str"")) {
        autNums.add(CIString.ciString(resource));
      }
 else       if (resource.indexOf(':') >= 0) {
        Ipv6Resource ipv6Resource=Ipv6Resource.parseIPv6Resource(resource);
        inet6nums.put(ipv6Resource,ipv6Resource);
      }
 else {
        Ipv4Resource ipv4Resource=Ipv4Resource.parseIPv4Resource(resource);
        inetnums.put(ipv4Resource,ipv4Resource);
      }
    }
  }
,source);
  return new AuthoritativeResource(logger,autNums,inetnums,inet6nums);
}","public AuthoritativeResource load(final Logger logger,final String source){
  final Set<CIString> autNums=Sets.newHashSet();
  final IntervalMap<Ipv4Resource,Ipv4Resource> inetnums=new NestedIntervalMap<>();
  final IntervalMap<Ipv6Resource,Ipv6Resource> inet6nums=new NestedIntervalMap<>();
  jdbcTemplate.query(""String_Node_Str"",new RowCallbackHandler(){
    @Override public void processRow(    ResultSet rs) throws SQLException {
      String resource=rs.getString(1);
      if (resource.startsWith(""String_Node_Str"")) {
        autNums.add(CIString.ciString(resource));
      }
 else       if (resource.indexOf(':') >= 0) {
        Ipv6Resource ipv6Resource=Ipv6Resource.parseIPv6Resource(resource);
        inet6nums.put(ipv6Resource,ipv6Resource);
      }
 else {
        Ipv4Resource ipv4Resource=Ipv4Resource.parseIPv4Resource(resource);
        inetnums.put(ipv4Resource,ipv4Resource);
      }
    }
  }
,source);
  return new AuthoritativeResource(logger,autNums,inetnums,inet6nums);
}",0.992526158445441
161223,"@Transactional public void store(final String source,final AuthoritativeResource authoritativeResource){
  jdbcTemplate.update(""String_Node_Str"",source);
  final List<String> resources=authoritativeResource.getResources();
  jdbcTemplate.batchUpdate(""String_Node_Str"",new BatchPreparedStatementSetter(){
    @Override public void setValues(    final PreparedStatement ps,    final int i) throws SQLException {
      ps.setString(1,source);
      ps.setString(2,resources.get(i));
    }
    @Override public int getBatchSize(){
      return resources.size();
    }
  }
);
}","public void store(final String source,final AuthoritativeResource authoritativeResource){
  jdbcTemplate.update(""String_Node_Str"",source);
  final List<String> resources=authoritativeResource.getResources();
  jdbcTemplate.batchUpdate(""String_Node_Str"",new BatchPreparedStatementSetter(){
    @Override public void setValues(    final PreparedStatement ps,    final int i) throws SQLException {
      ps.setString(1,source);
      ps.setString(2,resources.get(i));
    }
    @Override public int getBatchSize(){
      return resources.size();
    }
  }
);
}",0.9867139061116031
161224,"@Autowired public AuthoritativeResourceData(@Value(""String_Node_Str"") final List<String> grsSourceNames,final ResourceDataDao resourceDataDao,final DailyScheduler dailyScheduler){
  this.resourceDataDao=resourceDataDao;
  this.dailyScheduler=dailyScheduler;
  this.sourceNames=Sets.newHashSet(Iterables.transform(grsSourceNames,new Function<String,String>(){
    @Nullable @Override public String apply(    @Nullable String input){
      return input.toLowerCase().replace(""String_Node_Str"",""String_Node_Str"");
    }
  }
));
}","@Autowired public AuthoritativeResourceData(@Value(""String_Node_Str"") final List<String> grsSourceNames,final ResourceDataDao resourceDataDao,final DailySchedulerDao dailySchedulerDao,DateTimeProvider dateTimeProvider){
  this.resourceDataDao=resourceDataDao;
  this.dailySchedulerDao=dailySchedulerDao;
  this.dateTimeProvider=dateTimeProvider;
  this.sourceNames=Sets.newHashSet(Iterables.transform(grsSourceNames,new Function<String,String>(){
    @Nullable @Override public String apply(    @Nullable String input){
      return input.toLowerCase().replace(""String_Node_Str"",""String_Node_Str"");
    }
  }
));
}",0.9228070175438596
161225,"@Scheduled(fixedDelay=REFRESH_DELAY) synchronized public void refreshAuthoritativeResourceCache(){
  final long lastImportTime=dailyScheduler.getDailyTaskFinishTime(AuthoritativeResourceImportTask.class);
  if (lastImportTime > lastRefresh) {
    LOGGER.debug(""String_Node_Str"",new LocalDateTime(lastImportTime),new LocalDateTime(lastRefresh));
    lastRefresh=lastImportTime;
    for (    final String sourceName : sourceNames) {
      try {
        LOGGER.debug(""String_Node_Str"",sourceName);
        authoritativeResourceCache.put(sourceName,resourceDataDao.load(LOGGER,sourceName));
      }
 catch (      RuntimeException e) {
        LOGGER.error(""String_Node_Str"",sourceName,e);
      }
    }
  }
}","@Scheduled(fixedDelay=REFRESH_DELAY) synchronized public void refreshAuthoritativeResourceCache(){
  final LocalDate date=dateTimeProvider.getCurrentDate();
  final long lastImportTime=dailySchedulerDao.getDailyTaskFinishTime(date,AuthoritativeResourceImportTask.class);
  if (lastImportTime > lastRefresh) {
    LOGGER.debug(""String_Node_Str"",new LocalDateTime(lastImportTime),new LocalDateTime(lastRefresh));
    lastRefresh=lastImportTime;
    for (    final String sourceName : sourceNames) {
      try {
        LOGGER.debug(""String_Node_Str"",sourceName);
        authoritativeResourceCache.put(sourceName,resourceDataDao.load(LOGGER,sourceName));
      }
 catch (      RuntimeException e) {
        LOGGER.error(""String_Node_Str"",sourceName,e);
      }
    }
  }
}",0.9552238805970148
161226,"@Autowired public DailyScheduler(final DateTimeProvider dateTimeProvider,@Qualifier(""String_Node_Str"") final DataSource internalsDataSource){
  this.dateTimeProvider=dateTimeProvider;
  this.internalsTemplate=new JdbcTemplate(internalsDataSource);
}","@Autowired public DailyScheduler(final DateTimeProvider dateTimeProvider,DailySchedulerDao dailySchedulerDao){
  this.dateTimeProvider=dateTimeProvider;
  this.dailySchedulerDao=dailySchedulerDao;
}",0.6890380313199105
161227,"@Scheduled(cron=""String_Node_Str"") public void executeScheduledTasks(){
  final String date=dateTimeProvider.getCurrentDate().toString();
  final String hostName=Hosts.getLocalHost().getHostName();
  for (  final DailyScheduledTask task : scheduledTasks) {
    final String taskName=task.getClass().getSimpleName();
    if (!acquireDailyTask(date,taskName,hostName)) {
      continue;
    }
    final Stopwatch stopwatch=new Stopwatch().start();
    try {
      LOGGER.debug(""String_Node_Str"",task);
      task.run();
      internalsTemplate.update(""String_Node_Str"",System.currentTimeMillis(),date,taskName);
    }
 catch (    RuntimeException e) {
      LOGGER.error(""String_Node_Str"",task,e);
    }
 finally {
      LOGGER.info(""String_Node_Str"",task,stopwatch.stop());
    }
  }
  final int deletedRows=internalsTemplate.update(""String_Node_Str"",date);
  LOGGER.info(""String_Node_Str"",date,deletedRows);
}","@Scheduled(cron=""String_Node_Str"") public void executeScheduledTasks(){
  final LocalDate date=dateTimeProvider.getCurrentDate();
  final String hostName=Hosts.getLocalHost().getHostName();
  for (  final DailyScheduledTask task : scheduledTasks) {
    if (!dailySchedulerDao.acquireDailyTask(date,task.getClass(),hostName)) {
      continue;
    }
    final Stopwatch stopwatch=new Stopwatch().start();
    try {
      LOGGER.debug(""String_Node_Str"",task);
      task.run();
      dailySchedulerDao.markTaskDone(System.currentTimeMillis(),date,task.getClass());
    }
 catch (    RuntimeException e) {
      LOGGER.error(""String_Node_Str"",task,e);
    }
 finally {
      LOGGER.info(""String_Node_Str"",task,stopwatch.stop());
    }
  }
  final int deletedRows=dailySchedulerDao.removeOldScheduledEntries(date);
  LOGGER.info(""String_Node_Str"",date,deletedRows);
}",0.8216704288939052
161228,"@Override public String call(){
  final Class<?> taskClass;
  try {
    taskClass=Class.forName(className);
  }
 catch (  ClassNotFoundException e) {
    return ""String_Node_Str"" + className + ""String_Node_Str"";
  }
  dailyScheduler.removeFinishedScheduledTask(taskClass);
  dailyScheduler.executeScheduledTasks();
  return ""String_Node_Str"";
}","@Override public String call(){
  final Class<?> taskClass;
  try {
    taskClass=Class.forName(className);
  }
 catch (  ClassNotFoundException e) {
    return ""String_Node_Str"" + className + ""String_Node_Str"";
  }
  dailySchedulerDao.removeFinishedScheduledTask(taskClass);
  dailyScheduler.executeScheduledTasks();
  return ""String_Node_Str"";
}",0.9956584659913168
161229,"@ManagedOperation(description=""String_Node_Str"") @ManagedOperationParameters({@ManagedOperationParameter(name=""String_Node_Str"",description=""String_Node_Str"")}) public String runDailyScheduledTasks(final String className){
  return invokeOperation(""String_Node_Str"",""String_Node_Str"",new Callable<String>(){
    @Override public String call(){
      final Class<?> taskClass;
      try {
        taskClass=Class.forName(className);
      }
 catch (      ClassNotFoundException e) {
        return ""String_Node_Str"" + className + ""String_Node_Str"";
      }
      dailyScheduler.removeFinishedScheduledTask(taskClass);
      dailyScheduler.executeScheduledTasks();
      return ""String_Node_Str"";
    }
  }
);
}","@ManagedOperation(description=""String_Node_Str"") @ManagedOperationParameters({@ManagedOperationParameter(name=""String_Node_Str"",description=""String_Node_Str"")}) public String runDailyScheduledTasks(final String className){
  return invokeOperation(""String_Node_Str"",""String_Node_Str"",new Callable<String>(){
    @Override public String call(){
      final Class<?> taskClass;
      try {
        taskClass=Class.forName(className);
      }
 catch (      ClassNotFoundException e) {
        return ""String_Node_Str"" + className + ""String_Node_Str"";
      }
      dailySchedulerDao.removeFinishedScheduledTask(taskClass);
      dailyScheduler.executeScheduledTasks();
      return ""String_Node_Str"";
    }
  }
);
}",0.9978888106966924
161230,"@Autowired public DailySchedulerJmx(final DailyScheduler dailyScheduler){
  super(LOGGER);
  this.dailyScheduler=dailyScheduler;
}","@Autowired public DailySchedulerJmx(final DailyScheduler dailyScheduler,DailySchedulerDao dailySchedulerDao){
  super(LOGGER);
  this.dailyScheduler=dailyScheduler;
  this.dailySchedulerDao=dailySchedulerDao;
}",0.7647058823529411
161231,"@Before public void setUp(){
  subject=new AuthoritativeResourceData(Arrays.asList(""String_Node_Str""),resourceDataDao,dailyScheduler);
}","@Before public void setUp(){
  subject=new AuthoritativeResourceData(Arrays.asList(""String_Node_Str""),resourceDataDao,dailySchedulerDao,dateTimeProvider);
}",0.9315068493150684
161232,"@Test public void refresh(){
  when(dailyScheduler.getDailyTaskFinishTime(any(Class.class))).thenReturn(new Long(10));
  final AuthoritativeResource unknown=AuthoritativeResource.unknown(logger);
  when(resourceDataDao.load(any(Logger.class),any(String.class))).thenReturn(unknown);
  subject.init();
  verify(resourceDataDao).load(any(Logger.class),eq(""String_Node_Str""));
  assertThat(subject.getAuthoritativeResource(ciString(""String_Node_Str"")),isA(AuthoritativeResource.class));
}","@Test public void refresh(){
  when(dailySchedulerDao.getDailyTaskFinishTime(any(LocalDate.class),any(Class.class))).thenReturn(new Long(10));
  final AuthoritativeResource unknown=AuthoritativeResource.unknown(logger);
  when(resourceDataDao.load(any(Logger.class),any(String.class))).thenReturn(unknown);
  subject.init();
  verify(resourceDataDao).load(any(Logger.class),eq(""String_Node_Str""));
  assertThat(subject.getAuthoritativeResource(ciString(""String_Node_Str"")),isA(AuthoritativeResource.class));
}",0.9758551307847082
161233,"private int getResultLimit(final int maxResults,final int numDocs){
  return (maxResults <= 0) ? numDocs : Math.max(Math.min(maxResults,numDocs),1);
}","private int getResultLimit(final int maxResults,final int numDocs){
  return Math.max(Math.min(maxResults,numDocs),1);
}",0.8888888888888888
161234,"public void processLoggedFiles(final LoggedUpdateProcessor loggedUpdateProcessor){
  try {
    DirectoryStream<Path> updateLogFolders=Files.newDirectoryStream(dailyLogFolder,new DirectoryStream.Filter<Path>(){
      @Override public boolean accept(      Path entry) throws IOException {
        if (Files.isDirectory(entry) && UPDATE_LOG_FOLDER_PATTERN.matcher(entry.toString()).matches()) {
          final long lastModifiedTime=Files.getLastModifiedTime(entry).toMillis();
          return lastModifiedTime >= updateFrom && lastModifiedTime < updateTo;
        }
        return false;
      }
    }
);
    for (    final Path updateLogFolder : updateLogFolders) {
      final DirectoryStream<Path> updateLogEntries=Files.newDirectoryStream(updateLogFolder,new DirectoryStream.Filter<Path>(){
        @Override public boolean accept(        Path entry) throws IOException {
          return Files.isRegularFile(entry) && NewLogFormatProcessor.INDEXED_LOG_ENTRIES.matcher(entry.toString()).matches();
        }
      }
);
      for (      final Path updateLogEntry : updateLogEntries) {
        final DailyLogEntry dailyLogEntry=new DailyLogEntry(updateLogEntry.toAbsolutePath().toString(),date);
        if (loggedUpdateProcessor.accept(dailyLogEntry)) {
          try (InputStream is=Files.newInputStream(updateLogEntry)){
            loggedUpdateProcessor.process(dailyLogEntry,getGzippedContent(is,Files.size(updateLogEntry)));
          }
 catch (          IOException e) {
            LOGGER.warn(""String_Node_Str"",updateLogEntry,e);
          }
catch (          RuntimeException e) {
            LOGGER.warn(""String_Node_Str"",updateLogEntry,e);
          }
        }
      }
    }
  }
 catch (  IOException e) {
  }
}","public void processLoggedFiles(final LoggedUpdateProcessor loggedUpdateProcessor){
  try (final DirectoryStream<Path> updateLogFolders=Files.newDirectoryStream(dailyLogFolder,new DirectoryStream.Filter<Path>(){
    @Override public boolean accept(    Path entry) throws IOException {
      if (Files.isDirectory(entry) && UPDATE_LOG_FOLDER_PATTERN.matcher(entry.toString()).matches()) {
        final long lastModifiedTime=Files.getLastModifiedTime(entry).toMillis();
        return lastModifiedTime >= updateFrom && lastModifiedTime < updateTo;
      }
      return false;
    }
  }
)){
    for (    final Path updateLogFolder : updateLogFolders) {
      try (final DirectoryStream<Path> updateLogEntries=Files.newDirectoryStream(updateLogFolder,new DirectoryStream.Filter<Path>(){
        @Override public boolean accept(        Path entry) throws IOException {
          return Files.isRegularFile(entry) && NewLogFormatProcessor.INDEXED_LOG_ENTRIES.matcher(entry.toString()).matches();
        }
      }
)){
        for (        final Path updateLogEntry : updateLogEntries) {
          final DailyLogEntry dailyLogEntry=new DailyLogEntry(updateLogEntry.toAbsolutePath().toString(),date);
          if (loggedUpdateProcessor.accept(dailyLogEntry)) {
            try (InputStream is=Files.newInputStream(updateLogEntry)){
              loggedUpdateProcessor.process(dailyLogEntry,getGzippedContent(is,Files.size(updateLogEntry)));
            }
 catch (            IOException e) {
              LOGGER.warn(""String_Node_Str"",updateLogEntry,e);
            }
catch (            RuntimeException e) {
              LOGGER.warn(""String_Node_Str"",updateLogEntry,e);
            }
          }
        }
      }
     }
  }
 catch (  IOException e) {
  }
}",0.9767040552200172
161235,"public static IpInterval<?> parseReverseDomain(String reverse){
  reverse=removeTrailingDot(reverse);
  if (reverse.endsWith(Ipv4Resource.IPV4_REVERSE_DOMAIN)) {
    return Ipv4Resource.parseReverseDomain(reverse);
  }
  return Ipv6Resource.parseReverseDomain(reverse);
}","public static IpInterval<?> parseReverseDomain(String reverse){
  reverse=removeTrailingDot(reverse).toLowerCase();
  if (reverse.endsWith(Ipv4Resource.IPV4_REVERSE_DOMAIN)) {
    return Ipv4Resource.parseReverseDomain(reverse);
  }
  return Ipv6Resource.parseReverseDomain(reverse);
}",0.974820143884892
161236,"@Test public void personQueryWithoutSearchKey() throws Exception {
  final String response=DummyWhoisClient.query(QueryServer.port,""String_Node_Str"");
  assertThat(response,containsString(""String_Node_Str""));
  assertThat(response,not(containsString(QueryMessages.internalErrorOccured().toString())));
}","@Test public void personQueryWithoutSearchKey() throws Exception {
  final String response=DummyWhoisClient.query(QueryServer.port,""String_Node_Str"");
  assertThat(response,containsString(QueryMessages.noSearchKeySpecified().toString()));
  assertThat(response,not(containsString(QueryMessages.internalErrorOccured().toString())));
}",0.9025157232704404
161237,"public RegExpMatcher(final String pattern){
  this.pattern=Pattern.compile(""String_Node_Str"" + pattern);
}","public RegExpMatcher(final String pattern){
  this.pattern=Pattern.compile(pattern,Pattern.CASE_INSENSITIVE);
}",0.7926267281105991
161238,"private Set<ObjectType> parseObjectTypes(){
  final Set<String> objectTypes=getOptionValues(QueryFlag.SELECT_TYPES);
  final Set<ObjectType> response=Sets.newTreeSet(ObjectType.COMPARATOR);
  if (objectTypes.isEmpty()) {
    if (isLookupInBothDirections()) {
      response.addAll(DEFAULT_TYPES_LOOKUP_IN_BOTH_DIRECTIONS);
    }
 else {
      response.addAll(DEFAULT_TYPES_ALL);
    }
  }
 else {
    for (    final String objectType : objectTypes) {
      try {
        response.add(ObjectType.getByName(objectType));
      }
 catch (      IllegalArgumentException e) {
        throw new QueryException(QueryCompletionInfo.PARAMETER_ERROR,QueryMessages.invalidObjectType(objectType));
      }
    }
  }
  if (hasOption(QueryFlag.NO_PERSONAL)) {
    response.remove(ObjectType.PERSON);
    response.remove(ObjectType.ROLE);
  }
  if (hasOption(QueryFlag.RESOURCE)) {
    response.retainAll(GRS_LIMIT_TYPES);
  }
  nextObjectType:   for (Iterator<ObjectType> it=response.iterator(); it.hasNext(); ) {
    ObjectType objectType=it.next();
    for (    final AttributeType attribute : ObjectTemplate.getTemplate(objectType).getLookupAttributes()) {
      if (AttributeMatcher.fetchableBy(attribute,this)) {
        continue nextObjectType;
      }
    }
    it.remove();
  }
  return Collections.unmodifiableSet(response);
}","private Set<ObjectType> parseObjectTypes(){
  final Set<String> objectTypes=getOptionValues(QueryFlag.SELECT_TYPES);
  final Set<ObjectType> response=Sets.newTreeSet(ObjectType.COMPARATOR);
  if (objectTypes.isEmpty()) {
    if (isLookupInBothDirections()) {
      response.addAll(DEFAULT_TYPES_LOOKUP_IN_BOTH_DIRECTIONS);
    }
 else {
      response.addAll(DEFAULT_TYPES_ALL);
    }
  }
 else {
    for (    final String objectType : objectTypes) {
      try {
        response.add(ObjectType.getByName(objectType));
      }
 catch (      IllegalArgumentException e) {
        throw new QueryException(QueryCompletionInfo.PARAMETER_ERROR,QueryMessages.invalidObjectType(objectType));
      }
    }
  }
  if (hasOption(QueryFlag.NO_PERSONAL)) {
    response.remove(ObjectType.PERSON);
    response.remove(ObjectType.ROLE);
  }
  if (hasOption(QueryFlag.RESOURCE)) {
    response.retainAll(GRS_LIMIT_TYPES);
  }
  if (!isInverse()) {
    nextObjectType:     for (Iterator<ObjectType> it=response.iterator(); it.hasNext(); ) {
      ObjectType objectType=it.next();
      for (      final AttributeType attribute : ObjectTemplate.getTemplate(objectType).getLookupAttributes()) {
        if (AttributeMatcher.fetchableBy(attribute,this)) {
          continue nextObjectType;
        }
      }
      it.remove();
    }
  }
  return Collections.unmodifiableSet(response);
}",0.9784386617100372
161239,"@Autowired public UpdateObjectHandlerImpl(final RpslObjectUpdateDao rpslObjectUpdateDao,final List<BusinessRuleValidator> businessRuleValidators,final DateTimeProvider dateTimeProvider){
  this.rpslObjectUpdateDao=rpslObjectUpdateDao;
  this.dateTimeProvider=dateTimeProvider;
  validatorsByActionAndType=Maps.newEnumMap(Action.class);
  for (  final Action action : Action.values()) {
    final Map<ObjectType,List<BusinessRuleValidator>> validatorsByType=Maps.newEnumMap(ObjectType.class);
    for (    final ObjectType objectType : ObjectType.values()) {
      validatorsByType.put(objectType,Lists.<BusinessRuleValidator>newArrayList());
    }
    validatorsByActionAndType.put(action,validatorsByType);
  }
  for (  final BusinessRuleValidator businessRuleValidator : businessRuleValidators) {
    final List<Action> actions=businessRuleValidator.getActions();
    for (    final Action action : actions) {
      for (      final ObjectType objectType : businessRuleValidator.getTypes()) {
        validatorsByActionAndType.get(action).get(objectType).add(businessRuleValidator);
      }
    }
  }
}","@Autowired public UpdateObjectHandlerImpl(final RpslObjectUpdateDao rpslObjectUpdateDao,final List<BusinessRuleValidator> businessRuleValidators,final DateTimeProvider dateTimeProvider){
  Collections.sort(businessRuleValidators,new Comparator<BusinessRuleValidator>(){
    public int compare(    BusinessRuleValidator b1,    BusinessRuleValidator b2){
      return b1.getClass().getName().compareToIgnoreCase(b2.getClass().getName());
    }
  }
);
  this.rpslObjectUpdateDao=rpslObjectUpdateDao;
  this.dateTimeProvider=dateTimeProvider;
  validatorsByActionAndType=Maps.newEnumMap(Action.class);
  for (  final Action action : Action.values()) {
    final Map<ObjectType,List<BusinessRuleValidator>> validatorsByType=Maps.newEnumMap(ObjectType.class);
    for (    final ObjectType objectType : ObjectType.values()) {
      validatorsByType.put(objectType,Lists.<BusinessRuleValidator>newArrayList());
    }
    validatorsByActionAndType.put(action,validatorsByType);
  }
  for (  final BusinessRuleValidator businessRuleValidator : businessRuleValidators) {
    final List<Action> actions=businessRuleValidator.getActions();
    for (    final Action action : actions) {
      for (      final ObjectType objectType : businessRuleValidator.getTypes()) {
        validatorsByActionAndType.get(action).get(objectType).add(businessRuleValidator);
      }
    }
  }
}",0.8939271255060729
161240,"@RetryFor(value=Exception.class) private Server createAndStartServer(int port,HandlerList handlers,Audience audience) throws Exception {
  int tryPort=(port <= 0) ? ServerHelper.getAvailablePort() : port;
  LOGGER.debug(""String_Node_Str"",tryPort);
  final Server server=new Server(tryPort);
  server.setHandler(handlers);
  server.setStopAtShutdown(true);
  server.start();
  jettyConfig.setPort(audience,tryPort);
  LOGGER.info(""String_Node_Str"",tryPort,audience);
  return server;
}","@RetryFor(attempts=5,value=Exception.class) private Server createAndStartServer(int port,HandlerList handlers,Audience audience) throws Exception {
  int tryPort=(port <= 0) ? ServerHelper.getAvailablePort() : port;
  LOGGER.debug(""String_Node_Str"",tryPort);
  final Server server=new Server(tryPort);
  server.setHandler(handlers);
  server.setStopAtShutdown(true);
  server.start();
  jettyConfig.setPort(audience,tryPort);
  LOGGER.info(""String_Node_Str"",tryPort,audience);
  return server;
}",0.9887640449438202
161241,"@Nullable @Override public String apply(@Nullable String input){
  return QueryFlag.getValidLongFlags().contains(input) ? ""String_Node_Str"" + input : ""String_Node_Str"" + input;
}","@Override public String apply(String input){
  return input.length() > 1 ? ""String_Node_Str"" + input : ""String_Node_Str"" + input;
}",0.7702265372168284
161242,"private Response doSearch(final HttpServletRequest request,final String queryString,final Set<String> sources,final Set<String> inverseAttributes,final Set<String> types,final Set<String> flags,final boolean isGrsExpected){
  if (sources == null || sources.isEmpty()) {
    throw new IllegalArgumentException(""String_Node_Str"");
  }
  for (  final String source : sources) {
    if (isGrsExpected) {
      if (!sourceContext.getGrsSourceNames().contains(ciString(source))) {
        throw new IllegalArgumentException(String.format(""String_Node_Str"",source));
      }
    }
 else     if (!sourceContext.getCurrentSource().getName().contains(ciString(source))) {
      throw new IllegalArgumentException(String.format(""String_Node_Str"",source));
    }
  }
  final Set<String> separateFlags=Sets.newHashSet();
  for (  final String flagParameter : flags) {
    if (QueryFlag.getValidLongFlags().contains(flagParameter)) {
      separateFlags.add(flagParameter);
    }
 else {
      final CharacterIterator charIterator=new StringCharacterIterator(flagParameter);
      for (char flag=charIterator.first(); flag != CharacterIterator.DONE; flag=charIterator.next()) {
        if (NOT_ALLOWED_SEARCH_FLAGS.contains(flag)) {
          throw new IllegalArgumentException(String.format(""String_Node_Str"",flag));
        }
        separateFlags.add(String.valueOf(flag));
      }
    }
  }
  final Query query=Query.parse(String.format(""String_Node_Str"",QueryFlag.SOURCES.getLongFlag(),JOINER.join(sources),QueryFlag.SHOW_TAG_INFO.getLongFlag(),(types == null || types.isEmpty()) ? ""String_Node_Str"" : QueryFlag.SELECT_TYPES.getLongFlag(),JOINER.join(types),(inverseAttributes == null || inverseAttributes.isEmpty()) ? ""String_Node_Str"" : QueryFlag.INVERSE.getLongFlag(),JOINER.join(inverseAttributes),Joiner.on(""String_Node_Str"").join(Iterables.transform(separateFlags,new Function<String,String>(){
    @Nullable @Override public String apply(    @Nullable String input){
      return QueryFlag.getValidLongFlags().contains(input) ? ""String_Node_Str"" + input : ""String_Node_Str"" + input;
    }
  }
)),(queryString == null ? ""String_Node_Str"" : queryString)));
  final Parameters parameters=new Parameters();
  parameters.setSources(sources);
  parameters.setQueryStrings(queryString);
  parameters.setInverseLookup(inverseAttributes);
  parameters.setTypeFilters(types);
  parameters.setFlags(separateFlags);
  return handleQuery(query,JOINER.join(sources),queryString,request,parameters);
}","private Response doSearch(final HttpServletRequest request,final String queryString,final Set<String> sources,final Set<String> inverseAttributes,final Set<String> types,final Set<String> flags,final boolean isGrsExpected){
  if (sources == null || sources.isEmpty()) {
    throw new IllegalArgumentException(""String_Node_Str"");
  }
  for (  final String source : sources) {
    if (isGrsExpected) {
      if (!sourceContext.getGrsSourceNames().contains(ciString(source))) {
        throw new IllegalArgumentException(String.format(""String_Node_Str"",source));
      }
    }
 else     if (!sourceContext.getCurrentSource().getName().contains(ciString(source))) {
      throw new IllegalArgumentException(String.format(""String_Node_Str"",source));
    }
  }
  final Set<String> separateFlags=Sets.newHashSet();
  for (  final String flagParameter : flags) {
    if (QueryFlag.getValidLongFlags().contains(flagParameter)) {
      separateFlags.add(flagParameter);
    }
 else {
      final CharacterIterator charIterator=new StringCharacterIterator(flagParameter);
      for (char flag=charIterator.first(); flag != CharacterIterator.DONE; flag=charIterator.next()) {
        if (NOT_ALLOWED_SEARCH_FLAGS.contains(flag) || !QueryFlag.getValidShortFlags().contains(flag)) {
          throw new IllegalArgumentException(String.format(""String_Node_Str"",flag));
        }
        separateFlags.add(String.valueOf(flag));
      }
    }
  }
  final Query query=Query.parse(String.format(""String_Node_Str"",QueryFlag.SOURCES.getLongFlag(),JOINER.join(sources),QueryFlag.SHOW_TAG_INFO.getLongFlag(),(types == null || types.isEmpty()) ? ""String_Node_Str"" : QueryFlag.SELECT_TYPES.getLongFlag(),JOINER.join(types),(inverseAttributes == null || inverseAttributes.isEmpty()) ? ""String_Node_Str"" : QueryFlag.INVERSE.getLongFlag(),JOINER.join(inverseAttributes),Joiner.on(""String_Node_Str"").join(Iterables.transform(separateFlags,new Function<String,String>(){
    @Override public String apply(    String input){
      return input.length() > 1 ? ""String_Node_Str"" + input : ""String_Node_Str"" + input;
    }
  }
)),(queryString == null ? ""String_Node_Str"" : queryString)));
  final Parameters parameters=new Parameters();
  parameters.setSources(sources);
  parameters.setQueryStrings(queryString);
  parameters.setInverseLookup(inverseAttributes);
  parameters.setTypeFilters(types);
  parameters.setFlags(separateFlags);
  return handleQuery(query,JOINER.join(sources),queryString,request,parameters);
}",0.9732448199557432
161243,"private Response handleVersionQuery(final Query query,final String source,final String key,final InetAddress remoteAddress,final int contextId){
  final ApiResponseHandlerVersions apiResponseHandlerVersions=new ApiResponseHandlerVersions();
  queryHandler.streamResults(query,remoteAddress,contextId,apiResponseHandlerVersions);
  final VersionWithRpslResponseObject versionResponseObject=apiResponseHandlerVersions.getVersionWithRpslResponseObject();
  final List<DeletedVersionResponseObject> deleted=apiResponseHandlerVersions.getDeletedObjects();
  final List<VersionResponseObject> versions=apiResponseHandlerVersions.getVersionObjects();
  if (versionResponseObject == null && deleted.isEmpty() && versions.isEmpty()) {
    throw new WebApplicationException(Response.Status.NOT_FOUND);
  }
  final WhoisResources whoisResources=new WhoisResources();
  if (versionResponseObject != null) {
    final WhoisObject whoisObject=WhoisObjectMapper.map(versionResponseObject.getRpslObject());
    whoisObject.setVersion(versionResponseObject.getVersion());
    whoisResources.setWhoisObjects(Collections.singletonList(whoisObject));
  }
 else {
    final String type=(versions.size() > 0) ? versions.get(0).getType().getName() : deleted.size() > 0 ? deleted.get(0).getType().getName() : null;
    final WhoisVersions whoisVersions=new WhoisVersions(source,type,key,WhoisObjectMapper.mapVersions(deleted,versions));
    whoisResources.setVersions(whoisVersions);
  }
  return Response.ok(whoisResources).build();
}","private Response handleVersionQuery(final Query query,final String source,final String key,final InetAddress remoteAddress,final int contextId){
  final ApiResponseHandlerVersions apiResponseHandlerVersions=new ApiResponseHandlerVersions();
  queryHandler.streamResults(query,remoteAddress,contextId,apiResponseHandlerVersions);
  final VersionWithRpslResponseObject versionResponseObject=apiResponseHandlerVersions.getVersionWithRpslResponseObject();
  final List<DeletedVersionResponseObject> deleted=apiResponseHandlerVersions.getDeletedObjects();
  final List<VersionResponseObject> versions=apiResponseHandlerVersions.getVersionObjects();
  if (versionResponseObject == null && versions.isEmpty()) {
    if (deleted.isEmpty() || query.isObjectVersion()) {
      throw new WebApplicationException(Response.Status.NOT_FOUND);
    }
  }
  final WhoisResources whoisResources=new WhoisResources();
  if (versionResponseObject != null) {
    final WhoisObject whoisObject=WhoisObjectMapper.map(versionResponseObject.getRpslObject());
    whoisObject.setVersion(versionResponseObject.getVersion());
    whoisResources.setWhoisObjects(Collections.singletonList(whoisObject));
  }
 else {
    final String type=(versions.size() > 0) ? versions.get(0).getType().getName() : deleted.size() > 0 ? deleted.get(0).getType().getName() : null;
    final WhoisVersions whoisVersions=new WhoisVersions(source,type,key,WhoisObjectMapper.mapVersions(deleted,versions));
    whoisResources.setVersions(whoisVersions);
  }
  return Response.ok(whoisResources).build();
}",0.9735725938009788
161244,"private Iterable<? extends ResponseObject> getVersion(final VersionLookupResult res,final Query query){
  final List<VersionInfo> versionInfos=res.getVersionInfos();
  final int version=query.getObjectVersion();
  if (version < 1 || version > versionInfos.size()) {
    return Collections.singletonList(new MessageObject(QueryMessages.versionOutOfRange(versionInfos.size())));
  }
  final VersionInfo info=versionInfos.get(version - 1);
  final RpslObject rpslObject=versionDao.getRpslObject(info);
  return Lists.newArrayList(new MessageObject(QueryMessages.versionInformation(version,(version == versionInfos.size()),rpslObject.getKey(),info.getOperation(),info.getTimestamp())),rpslObject);
}","private Iterable<? extends ResponseObject> getVersion(final VersionLookupResult res,final int version){
  final List<VersionInfo> versionInfos=res.getVersionInfos();
  final VersionInfo info=versionInfos.get(version - 1);
  final RpslObject rpslObject=versionDao.getRpslObject(info);
  return Lists.newArrayList(new MessageObject(QueryMessages.versionInformation(version,(version == versionInfos.size()),rpslObject.getKey(),info.getOperation(),info.getTimestamp())),rpslObject);
}",0.7982978723404255
161245,"private Iterable<? extends ResponseObject> getAllVersions(final VersionLookupResult res,final Query query){
  final ObjectType objectType=res.getObjectType();
  final List<ResponseObject> messages=Lists.newArrayList();
  messages.add(new MessageObject(QueryMessages.versionListHeader(objectType.getName().toUpperCase(),query.getCleanSearchValue())));
  final VersionDateTime lastDeletionTimestamp=res.getLastDeletionTimestamp();
  final String pkey=res.getPkey();
  if (lastDeletionTimestamp != null) {
    messages.add(new DeletedVersionResponseObject(lastDeletionTimestamp,objectType,pkey));
  }
  final List<VersionInfo> versionInfos=res.getVersionInfos();
  int versionPadding=getPadding(versionInfos);
  messages.add(new MessageObject(String.format(""String_Node_Str"" + versionPadding + ""String_Node_Str"",VERSION_HEADER,DATE_HEADER,OPERATION_HEADER)));
  for (int i=0; i < versionInfos.size(); i++) {
    final VersionInfo versionInfo=versionInfos.get(i);
    messages.add(new VersionResponseObject(versionPadding,versionInfo.getOperation(),i + 1,versionInfo.getTimestamp(),objectType,pkey));
  }
  messages.add(new MessageObject(""String_Node_Str""));
  return messages;
}","private Iterable<? extends ResponseObject> getAllVersions(final VersionLookupResult res,final String searchKey){
  final ObjectType objectType=res.getObjectType();
  final List<ResponseObject> messages=Lists.newArrayList();
  messages.add(new MessageObject(QueryMessages.versionListHeader(objectType.getName().toUpperCase(),searchKey)));
  final VersionDateTime lastDeletionTimestamp=res.getLastDeletionTimestamp();
  final String pkey=res.getPkey();
  if (lastDeletionTimestamp != null) {
    messages.add(new DeletedVersionResponseObject(lastDeletionTimestamp,objectType,pkey));
  }
  final List<VersionInfo> versionInfos=res.getVersionInfos();
  int versionPadding=getPadding(versionInfos);
  messages.add(new MessageObject(String.format(""String_Node_Str"" + versionPadding + ""String_Node_Str"",VERSION_HEADER,DATE_HEADER,OPERATION_HEADER)));
  for (int i=0; i < versionInfos.size(); i++) {
    final VersionInfo versionInfo=versionInfos.get(i);
    messages.add(new VersionResponseObject(versionPadding,versionInfo.getOperation(),i + 1,versionInfo.getTimestamp(),objectType,pkey));
  }
  messages.add(new MessageObject(""String_Node_Str""));
  return messages;
}",0.8378262729995721
161246,"private Iterable<? extends ResponseObject> getResponseObjects(final Query query){
  VersionLookupResult res=getVersionInfo(query);
  if (res == null) {
    return Collections.emptyList();
  }
  final ObjectType objectType=res.getObjectType();
  if (objectType == ObjectType.PERSON || objectType == ObjectType.ROLE) {
    return Collections.singletonList(new MessageObject(QueryMessages.versionPersonRole(objectType.getName().toUpperCase(),query.getSearchValue())));
  }
  final List<VersionInfo> versionInfos=res.getVersionInfos();
  final VersionDateTime lastDeletionTimestamp=res.getLastDeletionTimestamp();
  if (versionInfos.isEmpty() && lastDeletionTimestamp != null) {
    return Collections.singletonList(new MessageObject(QueryMessages.versionDeleted(lastDeletionTimestamp.toString())));
  }
  if (query.isVersionList()) {
    return getAllVersions(res,query);
  }
 else   if (query.isVersionDiff()) {
    return getVersionDiffs(res,query);
  }
 else {
    return getVersion(res,query);
  }
}","private Iterable<? extends ResponseObject> getResponseObjects(final Query query){
  VersionLookupResult res=getVersionInfo(query);
  if (res == null) {
    return Collections.emptyList();
  }
  final ObjectType objectType=res.getObjectType();
  final String searchKey=query.getCleanSearchValue();
  if (objectType == ObjectType.PERSON || objectType == ObjectType.ROLE) {
    return Collections.singletonList(new MessageObject(QueryMessages.versionPersonRole(objectType.getName().toUpperCase(),searchKey)));
  }
  final List<VersionInfo> versionInfos=res.getVersionInfos();
  final VersionDateTime lastDeletionTimestamp=res.getLastDeletionTimestamp();
  if (versionInfos.isEmpty() && lastDeletionTimestamp != null) {
    return Collections.singletonList(new DeletedVersionResponseObject(lastDeletionTimestamp,objectType,searchKey));
  }
  final int version=query.getObjectVersion();
  final int[] versions=query.getObjectVersions();
  if (version > versionInfos.size() || versions[0] > versionInfos.size() || versions[1] > versionInfos.size()) {
    return Collections.singletonList(new MessageObject(QueryMessages.versionOutOfRange(versionInfos.size())));
  }
  if (query.isVersionList()) {
    return getAllVersions(res,searchKey);
  }
 else   if (query.isVersionDiff()) {
    return getVersionDiffs(res,versions);
  }
 else {
    return getVersion(res,version);
  }
}",0.6449978894048122
161247,"private Iterable<? extends ResponseObject> getVersionDiffs(final VersionLookupResult res,final Query query){
  final List<VersionInfo> versionInfos=res.getVersionInfos();
  final int[] versions=query.getObjectVersions();
  if ((versions[0] < 1 || versions[0] > versionInfos.size()) || (versions[1] < 1 || versions[1] > versionInfos.size())) {
    return Collections.singletonList(new MessageObject(QueryMessages.versionOutOfRange(versionInfos.size())));
  }
  final VersionInfo firstInfo=versionInfos.get(versions[0] - 1);
  final RpslObject firstObject=filter(versionDao.getRpslObject(firstInfo));
  final VersionInfo secondInfo=versionInfos.get(versions[1] - 1);
  final RpslObject secondObject=filter(versionDao.getRpslObject(secondInfo));
  return Lists.newArrayList(new MessageObject(QueryMessages.versionDifferenceHeader(versions[0],versions[1],firstObject.getKey())),new MessageObject(secondObject.diff(firstObject)));
}","private Iterable<? extends ResponseObject> getVersionDiffs(final VersionLookupResult res,final int[] versions){
  final List<VersionInfo> versionInfos=res.getVersionInfos();
  final RpslObject firstObject=filter(versionDao.getRpslObject(versionInfos.get(versions[0] - 1)));
  final RpslObject secondObject=filter(versionDao.getRpslObject(versionInfos.get(versions[1] - 1)));
  return Lists.newArrayList(new MessageObject(QueryMessages.versionDifferenceHeader(versions[0],versions[1],firstObject.getKey())),new MessageObject(secondObject.diff(firstObject)));
}",0.5383580080753702
161248,"public int[] getObjectVersions(){
  try {
    if (hasOption(QueryFlag.DIFF_VERSIONS)) {
      final String[] values=StringUtils.split(getOptionValue(QueryFlag.DIFF_VERSIONS),':');
      if (values.length != 2) {
        throw new QueryException(QueryCompletionInfo.PARAMETER_ERROR,QueryMessages.malformedQuery(""String_Node_Str""));
      }
      final int firstValue=Integer.parseInt(values[0]);
      final int secondValue=Integer.parseInt(values[1]);
      if (firstValue < 1 || secondValue < 1) {
        throw new QueryException(QueryCompletionInfo.PARAMETER_ERROR,QueryMessages.malformedQuery(""String_Node_Str""));
      }
      if (secondValue == firstValue) {
        throw new QueryException(QueryCompletionInfo.PARAMETER_ERROR,QueryMessages.malformedQuery(""String_Node_Str""));
      }
      return new int[]{firstValue,secondValue};
    }
  }
 catch (  OptionException ignored) {
  }
  throw new QueryException(QueryCompletionInfo.PARAMETER_ERROR,QueryMessages.malformedQuery());
}","public int[] getObjectVersions(){
  if (hasOption(QueryFlag.DIFF_VERSIONS)) {
    final String[] values=StringUtils.split(getOptionValue(QueryFlag.DIFF_VERSIONS),':');
    if (values.length != 2) {
      throw new QueryException(QueryCompletionInfo.PARAMETER_ERROR,QueryMessages.malformedQuery(""String_Node_Str""));
    }
    final int firstValue=Integer.parseInt(values[0]);
    final int secondValue=Integer.parseInt(values[1]);
    if (firstValue < 1 || secondValue < 1) {
      throw new QueryException(QueryCompletionInfo.PARAMETER_ERROR,QueryMessages.malformedQuery(""String_Node_Str""));
    }
    if (secondValue == firstValue) {
      throw new QueryException(QueryCompletionInfo.PARAMETER_ERROR,QueryMessages.malformedQuery(""String_Node_Str""));
    }
    return new int[]{firstValue,secondValue};
  }
  return new int[]{-1,-1};
}",0.8903508771929824
161249,"public int getObjectVersion(){
  try {
    if (hasOption(QueryFlag.SHOW_VERSION)) {
      int version=Integer.parseInt(getOptionValue(QueryFlag.SHOW_VERSION));
      if (version < 1) {
        throw new QueryException(QueryCompletionInfo.PARAMETER_ERROR,QueryMessages.malformedQuery(""String_Node_Str""));
      }
      return version;
    }
    return -1;
  }
 catch (  OptionException e) {
    throw new QueryException(QueryCompletionInfo.PARAMETER_ERROR,QueryMessages.malformedQuery());
  }
}","public int getObjectVersion(){
  if (hasOption(QueryFlag.SHOW_VERSION)) {
    int version=Integer.parseInt(getOptionValue(QueryFlag.SHOW_VERSION));
    if (version < 1) {
      throw new QueryException(QueryCompletionInfo.PARAMETER_ERROR,QueryMessages.malformedQuery(""String_Node_Str""));
    }
    return version;
  }
  return -1;
}",0.5066666666666667
161250,"public int getNrUpdate(){
  return getCount(Action.MODIFY,succeededUpdates);
}","public int getNrUpdate(){
  return Iterables.size(Iterables.filter(succeededUpdates,new Predicate<UpdateResult>(){
    @Override public boolean apply(    @Nullable UpdateResult input){
      return Action.MODIFY.equals(input.getAction()) && UpdateStatus.SUCCESS.equals(input.getStatus());
    }
  }
));
}",0.2774869109947644
161251,"public Ack(final List<UpdateResult> updateResults,final List<Paragraph> ignoredParagraphs){
  final List<UpdateResult> succeeded=Lists.newArrayList();
  final List<UpdateResult> failed=Lists.newArrayList();
  for (  final UpdateResult updateResult : updateResults) {
switch (updateResult.getStatus()) {
case SUCCESS:
      succeeded.add(updateResult);
    break;
case PENDING_AUTHENTICATION:
  break;
default :
failed.add(updateResult);
}
}
this.succeededUpdates=Collections.unmodifiableList(succeeded);
this.failedUpdates=Collections.unmodifiableList(failed);
this.ignoredParagraphs=Collections.unmodifiableList(ignoredParagraphs);
}","public Ack(final List<UpdateResult> updateResults,final List<Paragraph> ignoredParagraphs){
  final List<UpdateResult> succeeded=Lists.newArrayList();
  final List<UpdateResult> failed=Lists.newArrayList();
  for (  final UpdateResult updateResult : updateResults) {
switch (updateResult.getStatus()) {
case SUCCESS:
case PENDING_AUTHENTICATION:
      succeeded.add(updateResult);
    break;
default :
  failed.add(updateResult);
}
}
this.succeededUpdates=Collections.unmodifiableList(succeeded);
this.failedUpdates=Collections.unmodifiableList(failed);
this.ignoredParagraphs=Collections.unmodifiableList(ignoredParagraphs);
}",0.9325931800158604
161252,"public int getNrDelete(){
  return getCount(Action.DELETE,succeededUpdates);
}","public int getNrDelete(){
  return Iterables.size(Iterables.filter(succeededUpdates,new Predicate<UpdateResult>(){
    @Override public boolean apply(    @Nullable UpdateResult input){
      return Action.DELETE.equals(input.getAction()) && UpdateStatus.SUCCESS.equals(input.getStatus());
    }
  }
));
}",0.2774869109947644
161253,"public int getNrNoop(){
  return getCount(Action.NOOP,succeededUpdates);
}","public int getNrNoop(){
  return Iterables.size(Iterables.filter(succeededUpdates,new Predicate<UpdateResult>(){
    @Override public boolean apply(    @Nullable UpdateResult input){
      return Action.NOOP.equals(input.getAction()) || UpdateStatus.PENDING_AUTHENTICATION.equals(input.getStatus());
    }
  }
));
}",0.2467866323907455
161254,"public int getNrDeleteErrors(){
  return getCount(Action.DELETE,failedUpdates);
}","public int getNrDeleteErrors(){
  return Iterables.size(Iterables.filter(failedUpdates,new Predicate<UpdateResult>(){
    @Override public boolean apply(    @Nullable UpdateResult input){
      return Action.DELETE.equals(input.getAction());
    }
  }
));
}",0.3195266272189349
161255,"public int getNrCreateErrors(){
  return getCount(Action.CREATE,failedUpdates);
}","public int getNrCreateErrors(){
  return Iterables.size(Iterables.filter(failedUpdates,new Predicate<UpdateResult>(){
    @Override public boolean apply(    @Nullable UpdateResult input){
      return Action.CREATE.equals(input.getAction());
    }
  }
));
}",0.3431952662721893
161256,"public int getNrUpdateErrors(){
  return getCount(Action.MODIFY,failedUpdates);
}","public int getNrUpdateErrors(){
  return Iterables.size(Iterables.filter(failedUpdates,new Predicate<UpdateResult>(){
    @Override public boolean apply(    @Nullable UpdateResult input){
      return Action.MODIFY.equals(input.getAction());
    }
  }
));
}",0.3431952662721893
161257,"public int getNrCreate(){
  return getCount(Action.CREATE,succeededUpdates);
}","public int getNrCreate(){
  return Iterables.size(Iterables.filter(succeededUpdates,new Predicate<UpdateResult>(){
    @Override public boolean apply(    @Nullable UpdateResult input){
      return Action.CREATE.equals(input.getAction()) && UpdateStatus.SUCCESS.equals(input.getStatus());
    }
  }
));
}",0.2774869109947644
161258,"@Override @Transactional(isolation=Isolation.READ_COMMITTED,propagation=Propagation.REQUIRES_NEW) public void handle(final Origin origin,final Keyword keyword,final Update update,final UpdateContext updateContext){
  updateLockDao.setUpdateLock();
  ipTreeUpdater.updateCurrent();
  final OverrideOptions overrideOptions=OverrideOptions.parse(update,updateContext);
  final RpslObject updatedObject=getUpdatedObject(update,updateContext,keyword);
  final RpslObject originalObject=getOriginalObject(updatedObject,update,updateContext,overrideOptions);
  final Action action=getAction(originalObject,updatedObject,update,updateContext,keyword);
  updateContext.setAction(update,action);
  checkForUnexpectedModification(update);
  PreparedUpdate preparedUpdate=new PreparedUpdate(update,originalObject,updatedObject,action,overrideOptions);
  updateContext.setPreparedUpdate(preparedUpdate);
  if (updateContext.hasErrors(preparedUpdate)) {
    throw new UpdateFailedException();
  }
  if (Action.DELETE.equals(preparedUpdate.getAction()) && !preparedUpdate.hasOriginalObject()) {
    updateContext.addMessage(preparedUpdate,UpdateMessages.objectNotFound(preparedUpdate.getKey()));
    throw new UpdateFailedException();
  }
  final RpslObject objectWithResolvedKeys=autoKeyResolver.resolveAutoKeys(updatedObject,update,updateContext,action);
  preparedUpdate=new PreparedUpdate(update,originalObject,objectWithResolvedKeys,action,overrideOptions);
  loggerContext.logPreparedUpdate(preparedUpdate);
  authenticator.authenticate(origin,preparedUpdate,updateContext);
  final boolean businessRulesOk=updateObjectHandler.validateBusinessRules(preparedUpdate,updateContext);
  final boolean pendingAuthentication=UpdateStatus.PENDING_AUTHENTICATION.equals(updateContext.getStatus(preparedUpdate));
  if (businessRulesOk && pendingAuthentication) {
    pendingUpdateHandler.handle(preparedUpdate,updateContext);
  }
 else   if (updateContext.hasErrors(update)) {
    throw new UpdateFailedException();
  }
 else {
    updateObjectHandler.execute(preparedUpdate,updateContext);
  }
  updateContext.setPreparedUpdate(preparedUpdate);
}","@Override @Transactional(isolation=Isolation.READ_COMMITTED,propagation=Propagation.REQUIRES_NEW) public void handle(final Origin origin,final Keyword keyword,final Update update,final UpdateContext updateContext){
  updateLockDao.setUpdateLock();
  ipTreeUpdater.updateCurrent();
  final OverrideOptions overrideOptions=OverrideOptions.parse(update,updateContext);
  final RpslObject updatedObject=getUpdatedObject(update,updateContext,keyword);
  final RpslObject originalObject=getOriginalObject(updatedObject,update,updateContext,overrideOptions);
  final Action action=getAction(originalObject,updatedObject,update,updateContext,keyword);
  updateContext.setAction(update,action);
  checkForUnexpectedModification(update);
  PreparedUpdate preparedUpdate=new PreparedUpdate(update,originalObject,updatedObject,action,overrideOptions);
  updateContext.setPreparedUpdate(preparedUpdate);
  if (updateContext.hasErrors(preparedUpdate)) {
    throw new UpdateFailedException();
  }
  if (Action.DELETE.equals(preparedUpdate.getAction()) && !preparedUpdate.hasOriginalObject()) {
    updateContext.addMessage(preparedUpdate,UpdateMessages.objectNotFound(preparedUpdate.getKey()));
    throw new UpdateFailedException();
  }
  final RpslObject objectWithResolvedKeys=autoKeyResolver.resolveAutoKeys(updatedObject,update,updateContext,action);
  preparedUpdate=new PreparedUpdate(update,originalObject,objectWithResolvedKeys,action,overrideOptions);
  loggerContext.logPreparedUpdate(preparedUpdate);
  authenticator.authenticate(origin,preparedUpdate,updateContext);
  final boolean businessRulesOk=updateObjectHandler.validateBusinessRules(preparedUpdate,updateContext);
  final boolean pendingAuthentication=UpdateStatus.PENDING_AUTHENTICATION.equals(updateContext.getStatus(preparedUpdate));
  if (pendingAuthentication) {
    if (businessRulesOk) {
      pendingUpdateHandler.handle(preparedUpdate,updateContext);
    }
 else {
      updateContext.status(preparedUpdate,UpdateStatus.FAILED);
    }
  }
  if (updateContext.hasErrors(update)) {
    throw new UpdateFailedException();
  }
 else {
    updateObjectHandler.execute(preparedUpdate,updateContext);
  }
  updateContext.setPreparedUpdate(preparedUpdate);
}",0.8683241252302025
161259,"@Autowired public SourceContext(@Value(""String_Node_Str"") final String mainSourceNameString,@Value(""String_Node_Str"") final String grsSourceNames,@Value(""String_Node_Str"") final String nrtmSourceNames,@Value(""String_Node_Str"") final String grsSourceNamesForDummification,@Value(""String_Node_Str"") final String grsMasterBaseUrl,@Value(""String_Node_Str"") final String whoisMasterUsername,@Value(""String_Node_Str"") final String whoisMasterPassword,@Value(""String_Node_Str"") final String grsSlaveBaseUrl,@Value(""String_Node_Str"") final String whoisSlaveUsername,@Value(""String_Node_Str"") final String whoisSlavePassword,@Qualifier(""String_Node_Str"") final DataSource whoisMasterDataSource,@Qualifier(""String_Node_Str"") final DataSource whoisSlaveDataSource,final DataSourceFactory dataSourceFactory){
  final CIString mainSourceName=ciString(mainSourceNameString);
  this.mainMasterSource=Source.master(mainSourceName);
  this.mainSlaveSource=Source.slave(mainSourceName);
  final Set<CIString> grsSources=Sets.newLinkedHashSet();
  final Map<CIString,CIString> aliases=Maps.newLinkedHashMap();
  sourceConfigurations.put(mainMasterSource,new SourceConfiguration(mainMasterSource,whoisMasterDataSource));
  sourceConfigurations.put(mainSlaveSource,new SourceConfiguration(mainSlaveSource,whoisSlaveDataSource));
  final Iterable<CIString> grsSourceNameIterable=Iterables.transform(Splitter.on(',').split(grsSourceNames),new Function<String,CIString>(){
    @Nullable @Override public CIString apply(    final String input){
      return ciString(input);
    }
  }
);
  final Iterable<CIString> nrtmSourceNameIterable=Iterables.transform(Splitter.on(',').omitEmptyStrings().split(nrtmSourceNames),new Function<String,CIString>(){
    @Nullable @Override public CIString apply(    final String input){
      return ciString(input);
    }
  }
);
  for (  final CIString grsSourceName : Iterables.concat(grsSourceNameIterable,nrtmSourceNameIterable)) {
    if (!grsSourceName.endsWith(ciString(""String_Node_Str""))) {
      LOGGER.warn(""String_Node_Str"",grsSourceName);
      continue;
    }
    if (!grsSources.add(grsSourceName)) {
      LOGGER.warn(""String_Node_Str"",grsSourceName);
      continue;
    }
    final Source grsMasterSource=Source.master(grsSourceName);
    final Source grsSlaveSource=Source.slave(grsSourceName);
    if (grsSourceName.contains(mainSourceName)) {
      LOGGER.info(""String_Node_Str"",grsSourceName,mainSourceName);
      aliases.put(grsSourceName,mainSlaveSource.getName());
      sourceConfigurations.put(grsMasterSource,new SourceConfiguration(grsMasterSource,whoisMasterDataSource));
      sourceConfigurations.put(grsSlaveSource,new SourceConfiguration(grsSlaveSource,whoisSlaveDataSource));
    }
 else {
      final String grsSlaveUrl=createGrsUrl(grsSlaveBaseUrl,grsSourceName);
      final DataSource grsSlaveDataSource=dataSourceFactory.createDataSource(grsSlaveUrl,whoisSlaveUsername,whoisSlavePassword);
      sourceConfigurations.put(grsSlaveSource,new SourceConfiguration(grsSlaveSource,grsSlaveDataSource));
      final String grsMasterUrl=createGrsUrl(grsMasterBaseUrl,grsSourceName);
      final DataSource grsMasterDataSource=dataSourceFactory.createDataSource(grsMasterUrl,whoisMasterUsername,whoisMasterPassword);
      sourceConfigurations.put(grsMasterSource,new SourceConfiguration(grsMasterSource,grsMasterDataSource));
    }
  }
  this.grsSourceNames=Collections.unmodifiableSet(grsSources);
  this.grsSourceNamesForDummification=ciSet(grsSourceNamesForDummification);
  this.aliases=Collections.unmodifiableMap(aliases);
  this.allSourceNames=Collections.unmodifiableSet(Sets.newLinkedHashSet(Iterables.transform(sourceConfigurations.keySet(),new Function<Source,CIString>(){
    @Nullable @Override public CIString apply(    final Source source){
      return source.getName();
    }
  }
)));
  LOGGER.info(""String_Node_Str"",sourceConfigurations.keySet());
}","@Autowired public SourceContext(@Value(""String_Node_Str"") final String mainSourceNameString,@Value(""String_Node_Str"") final String grsSourceNames,@Value(""String_Node_Str"") final String nrtmSourceNames,@Value(""String_Node_Str"") final String grsSourceNamesForDummification,@Value(""String_Node_Str"") final String grsMasterBaseUrl,@Value(""String_Node_Str"") final String whoisMasterUsername,@Value(""String_Node_Str"") final String whoisMasterPassword,@Value(""String_Node_Str"") final String grsSlaveBaseUrl,@Value(""String_Node_Str"") final String whoisSlaveUsername,@Value(""String_Node_Str"") final String whoisSlavePassword,@Qualifier(""String_Node_Str"") final DataSource whoisMasterDataSource,@Qualifier(""String_Node_Str"") final DataSource whoisSlaveDataSource,final DataSourceFactory dataSourceFactory){
  final CIString mainSourceName=ciString(mainSourceNameString);
  this.mainMasterSource=Source.master(mainSourceName);
  this.mainSlaveSource=Source.slave(mainSourceName);
  final Set<CIString> grsSources=Sets.newLinkedHashSet();
  final Map<CIString,CIString> aliases=Maps.newLinkedHashMap();
  sourceConfigurations.put(mainMasterSource,new SourceConfiguration(mainMasterSource,whoisMasterDataSource));
  sourceConfigurations.put(mainSlaveSource,new SourceConfiguration(mainSlaveSource,whoisSlaveDataSource));
  final Iterable<CIString> grsSourceNameIterable=Iterables.transform(COMMA_SPLITTER.split(grsSourceNames),new Function<String,CIString>(){
    @Nullable @Override public CIString apply(    final String input){
      return ciString(input);
    }
  }
);
  final Iterable<CIString> nrtmSourceNameIterable=Iterables.transform(COMMA_SPLITTER.split(nrtmSourceNames),new Function<String,CIString>(){
    @Nullable @Override public CIString apply(    final String input){
      return ciString(input);
    }
  }
);
  for (  final CIString grsSourceName : Iterables.concat(grsSourceNameIterable,nrtmSourceNameIterable)) {
    if (!grsSourceName.endsWith(ciString(""String_Node_Str""))) {
      LOGGER.warn(""String_Node_Str"",grsSourceName);
      continue;
    }
    if (!grsSources.add(grsSourceName)) {
      LOGGER.warn(""String_Node_Str"",grsSourceName);
      continue;
    }
    final Source grsMasterSource=Source.master(grsSourceName);
    final Source grsSlaveSource=Source.slave(grsSourceName);
    if (grsSourceName.contains(mainSourceName)) {
      LOGGER.info(""String_Node_Str"",grsSourceName,mainSourceName);
      aliases.put(grsSourceName,mainSlaveSource.getName());
      sourceConfigurations.put(grsMasterSource,new SourceConfiguration(grsMasterSource,whoisMasterDataSource));
      sourceConfigurations.put(grsSlaveSource,new SourceConfiguration(grsSlaveSource,whoisSlaveDataSource));
    }
 else {
      final String grsSlaveUrl=createGrsUrl(grsSlaveBaseUrl,grsSourceName);
      final DataSource grsSlaveDataSource=dataSourceFactory.createDataSource(grsSlaveUrl,whoisSlaveUsername,whoisSlavePassword);
      sourceConfigurations.put(grsSlaveSource,new SourceConfiguration(grsSlaveSource,grsSlaveDataSource));
      final String grsMasterUrl=createGrsUrl(grsMasterBaseUrl,grsSourceName);
      final DataSource grsMasterDataSource=dataSourceFactory.createDataSource(grsMasterUrl,whoisMasterUsername,whoisMasterPassword);
      sourceConfigurations.put(grsMasterSource,new SourceConfiguration(grsMasterSource,grsMasterDataSource));
    }
  }
  this.grsSourceNames=Collections.unmodifiableSet(grsSources);
  this.grsSourceNamesForDummification=ciSet(COMMA_SPLITTER.split(grsSourceNamesForDummification));
  this.aliases=Collections.unmodifiableMap(aliases);
  this.allSourceNames=Collections.unmodifiableSet(Sets.newLinkedHashSet(Iterables.transform(sourceConfigurations.keySet(),new Function<Source,CIString>(){
    @Nullable @Override public CIString apply(    final Source source){
      return source.getName();
    }
  }
)));
  LOGGER.info(""String_Node_Str"",sourceConfigurations.keySet());
}",0.9873352948701548
161260,"@Override @RetryFor(value=MailSendException.class,attempts=20,intervalMs=10000) public void sendEmail(final String to,final String subject,final String text){
  if (!outgoingMailEnabled) {
    LOGGER.warn(""String_Node_Str"" + ""String_Node_Str"" + ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str"",to,subject,text);
    return;
  }
  try {
    sendEmailAttempt(to,subject,text);
  }
 catch (  MailSendException e) {
    loggerContext.log(new Message(Messages.Type.ERROR,""String_Node_Str"",to,subject),e);
    throw e;
  }
catch (  MailParseException e) {
    loggerContext.log(new Message(Messages.Type.ERROR,""String_Node_Str"",to,subject),e);
  }
catch (  MailException e) {
    LOGGER.error(""String_Node_Str"",to,e);
  }
}","@Override public void sendEmail(final String to,final String subject,final String text){
  if (!outgoingMailEnabled) {
    LOGGER.warn(""String_Node_Str"" + ""String_Node_Str"" + ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str"",to,subject,text);
    return;
  }
  try {
    sendEmailAttempt(to,subject,text);
  }
 catch (  MailException e) {
    loggerContext.log(new Message(Messages.Type.ERROR,""String_Node_Str"",to,subject),e);
    LOGGER.error(""String_Node_Str"",to,e);
  }
}",0.8200589970501475
161261,"private void sendEmailAttempt(final String to,final String subject,final String text){
  mailSender.send(new MimeMessagePreparator(){
    @Override public void prepare(    final MimeMessage mimeMessage) throws MessagingException {
      final MimeMessageHelper message=new MimeMessageHelper(mimeMessage,MimeMessageHelper.MULTIPART_MODE_NO,""String_Node_Str"");
      message.setFrom(mailConfiguration.getFrom());
      message.setTo(to);
      message.setSubject(subject);
      message.setText(text);
      mimeMessage.addHeader(""String_Node_Str"",""String_Node_Str"");
      mimeMessage.addHeader(""String_Node_Str"",""String_Node_Str"");
      loggerContext.log(""String_Node_Str"",new MailMessageLogCallback(mimeMessage));
    }
  }
);
}","@RetryFor(value=MailSendException.class,attempts=20,intervalMs=10000) private void sendEmailAttempt(final String to,final String subject,final String text){
  mailSender.send(new MimeMessagePreparator(){
    @Override public void prepare(    final MimeMessage mimeMessage) throws MessagingException {
      final MimeMessageHelper message=new MimeMessageHelper(mimeMessage,MimeMessageHelper.MULTIPART_MODE_NO,""String_Node_Str"");
      message.setFrom(mailConfiguration.getFrom());
      message.setTo(to);
      message.setSubject(subject);
      message.setText(text);
      mimeMessage.addHeader(""String_Node_Str"",""String_Node_Str"");
      mimeMessage.addHeader(""String_Node_Str"",""String_Node_Str"");
      loggerContext.log(""String_Node_Str"",new MailMessageLogCallback(mimeMessage));
    }
  }
);
}",0.954248366013072
161262,"private void createOrUpdate(final RpslObject importedObject){
  final GrsObjectInfo grsObjectInfo=grsSource.getDao().find(importedObject.getKey().toString(),importedObject.getType());
  if (grsObjectInfo == null) {
    create(importedObject);
  }
 else {
    currentObjectIds.remove(grsObjectInfo.getObjectId());
    if (!grsObjectInfo.getRpslObject().equals(importedObject)) {
      update(importedObject,grsObjectInfo);
    }
  }
}","private void createOrUpdate(final RpslObject importedObject){
  final String pkey=importedObject.getKey().toString();
  final ObjectType type=importedObject.getType();
  final GrsObjectInfo grsObjectInfo=grsSource.getDao().find(pkey,type);
  if (grsObjectInfo == null) {
    if (type == ObjectType.PERSON && grsSource.getDao().find(pkey,ObjectType.ROLE) != null) {
      return;
    }
    if (type == ObjectType.ROLE && grsSource.getDao().find(pkey,ObjectType.PERSON) != null) {
      return;
    }
    create(importedObject);
  }
 else {
    currentObjectIds.remove(grsObjectInfo.getObjectId());
    if (!grsObjectInfo.getRpslObject().equals(importedObject)) {
      update(importedObject,grsObjectInfo);
    }
  }
}",0.2626086956521739
161263,"private void acquireAndUpdateGrsData(final GrsSource grsSource,final boolean rebuild,final ResourceData resourceData){
  final Logger logger=grsSource.getLogger();
  new Runnable(){
    private int nrCreated;
    private int nrUpdated;
    private int nrDeleted;
    private int nrIgnored;
    private int nrHandled;
    private Set<Integer> currentObjectIds;
    private Set<Integer> incompletelyIndexedObjectIds=Sets.newHashSet();
    @Override public void run(){
      final File dumpFile=new File(downloadDir,String.format(""String_Node_Str"",grsSource.getSource()));
      grsDownloader.acquire(grsSource,dumpFile,new GrsDownloader.AcquireHandler(){
        @Override public void acquire(        final File file) throws IOException {
          grsSource.acquireDump(file);
        }
      }
);
      final Stopwatch stopwatch=new Stopwatch().start();
      if (rebuild) {
        grsSource.getDao().cleanDatabase();
        currentObjectIds=Collections.emptySet();
        logger.info(""String_Node_Str"");
      }
 else {
        currentObjectIds=Sets.newHashSet(grsSource.getDao().getCurrentObjectIds());
        logger.info(""String_Node_Str"",currentObjectIds.size());
      }
      try {
        importObjects(dumpFile);
        deleteNotFoundInImport();
      }
 catch (      IOException e) {
        throw new RuntimeException(e);
      }
 finally {
        logger.info(""String_Node_Str"",nrCreated,nrUpdated,nrDeleted,nrIgnored,stopwatch.stop());
      }
      updateIndexes();
    }
    private void importObjects(    final File dumpFile) throws IOException {
      grsSource.handleObjects(dumpFile,new ObjectHandler(){
        @Override public void handle(        final List<String> lines){
          final String rpslObjectString=LINE_JOINER.join(lines);
          final RpslObjectBase rpslObject;
          try {
            rpslObject=RpslObjectBase.parse(rpslObjectString);
          }
 catch (          RuntimeException e) {
            logger.warn(""String_Node_Str"",rpslObjectString);
            return;
          }
          handle(rpslObject);
        }
        @Override public void handle(        final RpslObjectBase rpslObjectBase){
          if (rpslObjectBase.getType() == null) {
            logger.debug(""String_Node_Str"",rpslObjectBase);
            nrIgnored++;
          }
 else {
            final ObjectMessages messages=new ObjectMessages();
            final RpslObject filteredObject=new RpslObject(filterObject(rpslObjectBase));
            final RpslObject rpslObject=sanitizer.sanitize(filteredObject,messages);
            final RpslAttribute typeAttribute=rpslObject.getTypeAttribute();
            typeAttribute.validateSyntax(rpslObject.getType(),messages);
            if (messages.hasErrors()) {
              logger.debug(""String_Node_Str"",typeAttribute,messages);
              nrIgnored++;
            }
 else             if (resourceData.isMaintainedInRirSpace(rpslObject)) {
              createOrUpdate(rpslObject);
            }
          }
          nrHandled++;
          if (nrHandled % LOG_EVERY_NR_HANDLED == 0) {
            logger.debug(""String_Node_Str"",nrHandled);
          }
        }
        private RpslObjectBase filterObject(        final RpslObjectBase rpslObject){
          final RpslAttribute sourceAttribute=new RpslAttribute(AttributeType.SOURCE,grsSource.getSource());
          final ObjectTemplate objectTemplate=ObjectTemplate.getTemplate(rpslObject.getType());
          final Set<AttributeType> attributeTypes=objectTemplate.getAllAttributes();
          final List<RpslAttribute> attributes=rpslObject.getAttributes();
          final List<RpslAttribute> newAttributes=Lists.newArrayListWithExpectedSize(attributes.size());
          final Set<AttributeType> newAttributeTypes=Sets.newHashSet();
          for (          final RpslAttribute attribute : attributes) {
            final AttributeType attributeType=attribute.getType();
            if (attributeType == null || !attributeTypes.contains(attributeType)) {
              logger.debug(""String_Node_Str"",rpslObject.getFormattedKey(),attribute);
              continue;
            }
            newAttributeTypes.add(attributeType);
            if (attributeType.equals(AttributeType.SOURCE)) {
              newAttributes.add(sourceAttribute);
            }
 else {
              newAttributes.add(attribute);
            }
          }
          if (!newAttributeTypes.contains(AttributeType.SOURCE)) {
            newAttributes.add(sourceAttribute);
          }
          return new RpslObjectBase(newAttributes);
        }
        private void createOrUpdate(        final RpslObject importedObject){
          final GrsObjectInfo grsObjectInfo=grsSource.getDao().find(importedObject.getKey().toString(),importedObject.getType());
          if (grsObjectInfo == null) {
            create(importedObject);
          }
 else {
            currentObjectIds.remove(grsObjectInfo.getObjectId());
            if (!grsObjectInfo.getRpslObject().equals(importedObject)) {
              update(importedObject,grsObjectInfo);
            }
          }
        }
        private void create(        final RpslObject importedObject){
          final GrsDao.UpdateResult updateResult=grsSource.getDao().createObject(importedObject);
          if (updateResult.hasMissingReferences()) {
            incompletelyIndexedObjectIds.add(updateResult.getObjectId());
          }
          nrCreated++;
        }
        private void update(        final RpslObject importedObject,        final GrsObjectInfo grsObjectInfo){
          final GrsDao.UpdateResult updateResult=grsSource.getDao().updateObject(grsObjectInfo,importedObject);
          if (updateResult.hasMissingReferences()) {
            incompletelyIndexedObjectIds.add(updateResult.getObjectId());
          }
          nrUpdated++;
        }
      }
);
    }
    private void deleteNotFoundInImport(){
      if (nrCreated == 0 && nrUpdated == 0) {
        logger.warn(""String_Node_Str"");
        return;
      }
      logger.info(""String_Node_Str"",currentObjectIds.size());
      for (      final Integer objectId : currentObjectIds) {
        try {
          grsSource.getDao().deleteObject(objectId);
          nrDeleted++;
        }
 catch (        RuntimeException e) {
          logger.error(""String_Node_Str"",objectId,e);
        }
      }
    }
    private void updateIndexes(){
      logger.info(""String_Node_Str"",incompletelyIndexedObjectIds.size());
      int nrUpdated=0;
      for (      final Integer objectId : incompletelyIndexedObjectIds) {
        try {
          grsSource.getDao().updateIndexes(objectId);
        }
 catch (        RuntimeException e) {
          logger.error(""String_Node_Str"",objectId,e);
        }
        nrUpdated++;
        if (nrUpdated % LOG_EVERY_NR_HANDLED == 0) {
          logger.info(""String_Node_Str"",nrUpdated);
        }
      }
    }
  }
.run();
}","private void acquireAndUpdateGrsData(final GrsSource grsSource,final boolean rebuild,final ResourceData resourceData){
  final Logger logger=grsSource.getLogger();
  new Runnable(){
    private int nrCreated;
    private int nrUpdated;
    private int nrDeleted;
    private int nrIgnored;
    private int nrHandled;
    private Set<Integer> currentObjectIds;
    private Set<Integer> incompletelyIndexedObjectIds=Sets.newHashSet();
    @Override public void run(){
      final File dumpFile=new File(downloadDir,String.format(""String_Node_Str"",grsSource.getSource()));
      grsDownloader.acquire(grsSource,dumpFile,new GrsDownloader.AcquireHandler(){
        @Override public void acquire(        final File file) throws IOException {
          grsSource.acquireDump(file);
        }
      }
);
      final Stopwatch stopwatch=new Stopwatch().start();
      if (rebuild) {
        grsSource.getDao().cleanDatabase();
        currentObjectIds=Collections.emptySet();
        logger.info(""String_Node_Str"");
      }
 else {
        currentObjectIds=Sets.newHashSet(grsSource.getDao().getCurrentObjectIds());
        logger.info(""String_Node_Str"",currentObjectIds.size());
      }
      try {
        importObjects(dumpFile);
        deleteNotFoundInImport();
      }
 catch (      IOException e) {
        throw new RuntimeException(e);
      }
 finally {
        logger.info(""String_Node_Str"",nrCreated,nrUpdated,nrDeleted,nrIgnored,stopwatch.stop());
      }
      updateIndexes();
    }
    private void importObjects(    final File dumpFile) throws IOException {
      grsSource.handleObjects(dumpFile,new ObjectHandler(){
        @Override public void handle(        final List<String> lines){
          final String rpslObjectString=LINE_JOINER.join(lines);
          final RpslObjectBase rpslObject;
          try {
            rpslObject=RpslObjectBase.parse(rpslObjectString);
          }
 catch (          RuntimeException e) {
            logger.warn(""String_Node_Str"",rpslObjectString);
            return;
          }
          handle(rpslObject);
        }
        @Override public void handle(        final RpslObjectBase rpslObjectBase){
          if (rpslObjectBase.getType() == null) {
            logger.debug(""String_Node_Str"",rpslObjectBase);
            nrIgnored++;
          }
 else {
            final ObjectMessages messages=new ObjectMessages();
            final RpslObject filteredObject=new RpslObject(filterObject(rpslObjectBase));
            final RpslObject rpslObject=sanitizer.sanitize(filteredObject,messages);
            final RpslAttribute typeAttribute=rpslObject.getTypeAttribute();
            typeAttribute.validateSyntax(rpslObject.getType(),messages);
            if (messages.hasErrors()) {
              logger.debug(""String_Node_Str"",typeAttribute,messages);
              nrIgnored++;
            }
 else             if (resourceData.isMaintainedInRirSpace(rpslObject)) {
              createOrUpdate(rpslObject);
            }
          }
          nrHandled++;
          if (nrHandled % LOG_EVERY_NR_HANDLED == 0) {
            logger.debug(""String_Node_Str"",nrHandled);
          }
        }
        private RpslObjectBase filterObject(        final RpslObjectBase rpslObject){
          final RpslAttribute sourceAttribute=new RpslAttribute(AttributeType.SOURCE,grsSource.getSource());
          final ObjectTemplate objectTemplate=ObjectTemplate.getTemplate(rpslObject.getType());
          final Set<AttributeType> attributeTypes=objectTemplate.getAllAttributes();
          final List<RpslAttribute> attributes=rpslObject.getAttributes();
          final List<RpslAttribute> newAttributes=Lists.newArrayListWithExpectedSize(attributes.size());
          final Set<AttributeType> newAttributeTypes=Sets.newHashSet();
          for (          final RpslAttribute attribute : attributes) {
            final AttributeType attributeType=attribute.getType();
            if (attributeType == null || !attributeTypes.contains(attributeType)) {
              logger.debug(""String_Node_Str"",rpslObject.getFormattedKey(),attribute);
              continue;
            }
            newAttributeTypes.add(attributeType);
            if (attributeType.equals(AttributeType.SOURCE)) {
              newAttributes.add(sourceAttribute);
            }
 else {
              newAttributes.add(attribute);
            }
          }
          if (!newAttributeTypes.contains(AttributeType.SOURCE)) {
            newAttributes.add(sourceAttribute);
          }
          return new RpslObjectBase(newAttributes);
        }
        private void createOrUpdate(        final RpslObject importedObject){
          final String pkey=importedObject.getKey().toString();
          final ObjectType type=importedObject.getType();
          final GrsObjectInfo grsObjectInfo=grsSource.getDao().find(pkey,type);
          if (grsObjectInfo == null) {
            if (type == ObjectType.PERSON && grsSource.getDao().find(pkey,ObjectType.ROLE) != null) {
              return;
            }
            if (type == ObjectType.ROLE && grsSource.getDao().find(pkey,ObjectType.PERSON) != null) {
              return;
            }
            create(importedObject);
          }
 else {
            currentObjectIds.remove(grsObjectInfo.getObjectId());
            if (!grsObjectInfo.getRpslObject().equals(importedObject)) {
              update(importedObject,grsObjectInfo);
            }
          }
        }
        private void create(        final RpslObject importedObject){
          final GrsDao.UpdateResult updateResult=grsSource.getDao().createObject(importedObject);
          if (updateResult.hasMissingReferences()) {
            incompletelyIndexedObjectIds.add(updateResult.getObjectId());
          }
          nrCreated++;
        }
        private void update(        final RpslObject importedObject,        final GrsObjectInfo grsObjectInfo){
          final GrsDao.UpdateResult updateResult=grsSource.getDao().updateObject(grsObjectInfo,importedObject);
          if (updateResult.hasMissingReferences()) {
            incompletelyIndexedObjectIds.add(updateResult.getObjectId());
          }
          nrUpdated++;
        }
      }
);
    }
    private void deleteNotFoundInImport(){
      if (nrCreated == 0 && nrUpdated == 0) {
        logger.warn(""String_Node_Str"");
        return;
      }
      logger.info(""String_Node_Str"",currentObjectIds.size());
      for (      final Integer objectId : currentObjectIds) {
        try {
          grsSource.getDao().deleteObject(objectId);
          nrDeleted++;
        }
 catch (        RuntimeException e) {
          logger.error(""String_Node_Str"",objectId,e);
        }
      }
    }
    private void updateIndexes(){
      logger.info(""String_Node_Str"",incompletelyIndexedObjectIds.size());
      int nrUpdated=0;
      for (      final Integer objectId : incompletelyIndexedObjectIds) {
        try {
          grsSource.getDao().updateIndexes(objectId);
        }
 catch (        RuntimeException e) {
          logger.error(""String_Node_Str"",objectId,e);
        }
        nrUpdated++;
        if (nrUpdated % LOG_EVERY_NR_HANDLED == 0) {
          logger.info(""String_Node_Str"",nrUpdated);
        }
      }
    }
  }
.run();
}",0.9652974504249292
161264,"private void importObjects(final File dumpFile) throws IOException {
  grsSource.handleObjects(dumpFile,new ObjectHandler(){
    @Override public void handle(    final List<String> lines){
      final String rpslObjectString=LINE_JOINER.join(lines);
      final RpslObjectBase rpslObject;
      try {
        rpslObject=RpslObjectBase.parse(rpslObjectString);
      }
 catch (      RuntimeException e) {
        logger.warn(""String_Node_Str"",rpslObjectString);
        return;
      }
      handle(rpslObject);
    }
    @Override public void handle(    final RpslObjectBase rpslObjectBase){
      if (rpslObjectBase.getType() == null) {
        logger.debug(""String_Node_Str"",rpslObjectBase);
        nrIgnored++;
      }
 else {
        final ObjectMessages messages=new ObjectMessages();
        final RpslObject filteredObject=new RpslObject(filterObject(rpslObjectBase));
        final RpslObject rpslObject=sanitizer.sanitize(filteredObject,messages);
        final RpslAttribute typeAttribute=rpslObject.getTypeAttribute();
        typeAttribute.validateSyntax(rpslObject.getType(),messages);
        if (messages.hasErrors()) {
          logger.debug(""String_Node_Str"",typeAttribute,messages);
          nrIgnored++;
        }
 else         if (resourceData.isMaintainedInRirSpace(rpslObject)) {
          createOrUpdate(rpslObject);
        }
      }
      nrHandled++;
      if (nrHandled % LOG_EVERY_NR_HANDLED == 0) {
        logger.debug(""String_Node_Str"",nrHandled);
      }
    }
    private RpslObjectBase filterObject(    final RpslObjectBase rpslObject){
      final RpslAttribute sourceAttribute=new RpslAttribute(AttributeType.SOURCE,grsSource.getSource());
      final ObjectTemplate objectTemplate=ObjectTemplate.getTemplate(rpslObject.getType());
      final Set<AttributeType> attributeTypes=objectTemplate.getAllAttributes();
      final List<RpslAttribute> attributes=rpslObject.getAttributes();
      final List<RpslAttribute> newAttributes=Lists.newArrayListWithExpectedSize(attributes.size());
      final Set<AttributeType> newAttributeTypes=Sets.newHashSet();
      for (      final RpslAttribute attribute : attributes) {
        final AttributeType attributeType=attribute.getType();
        if (attributeType == null || !attributeTypes.contains(attributeType)) {
          logger.debug(""String_Node_Str"",rpslObject.getFormattedKey(),attribute);
          continue;
        }
        newAttributeTypes.add(attributeType);
        if (attributeType.equals(AttributeType.SOURCE)) {
          newAttributes.add(sourceAttribute);
        }
 else {
          newAttributes.add(attribute);
        }
      }
      if (!newAttributeTypes.contains(AttributeType.SOURCE)) {
        newAttributes.add(sourceAttribute);
      }
      return new RpslObjectBase(newAttributes);
    }
    private void createOrUpdate(    final RpslObject importedObject){
      final GrsObjectInfo grsObjectInfo=grsSource.getDao().find(importedObject.getKey().toString(),importedObject.getType());
      if (grsObjectInfo == null) {
        create(importedObject);
      }
 else {
        currentObjectIds.remove(grsObjectInfo.getObjectId());
        if (!grsObjectInfo.getRpslObject().equals(importedObject)) {
          update(importedObject,grsObjectInfo);
        }
      }
    }
    private void create(    final RpslObject importedObject){
      final GrsDao.UpdateResult updateResult=grsSource.getDao().createObject(importedObject);
      if (updateResult.hasMissingReferences()) {
        incompletelyIndexedObjectIds.add(updateResult.getObjectId());
      }
      nrCreated++;
    }
    private void update(    final RpslObject importedObject,    final GrsObjectInfo grsObjectInfo){
      final GrsDao.UpdateResult updateResult=grsSource.getDao().updateObject(grsObjectInfo,importedObject);
      if (updateResult.hasMissingReferences()) {
        incompletelyIndexedObjectIds.add(updateResult.getObjectId());
      }
      nrUpdated++;
    }
  }
);
}","private void importObjects(final File dumpFile) throws IOException {
  grsSource.handleObjects(dumpFile,new ObjectHandler(){
    @Override public void handle(    final List<String> lines){
      final String rpslObjectString=LINE_JOINER.join(lines);
      final RpslObjectBase rpslObject;
      try {
        rpslObject=RpslObjectBase.parse(rpslObjectString);
      }
 catch (      RuntimeException e) {
        logger.warn(""String_Node_Str"",rpslObjectString);
        return;
      }
      handle(rpslObject);
    }
    @Override public void handle(    final RpslObjectBase rpslObjectBase){
      if (rpslObjectBase.getType() == null) {
        logger.debug(""String_Node_Str"",rpslObjectBase);
        nrIgnored++;
      }
 else {
        final ObjectMessages messages=new ObjectMessages();
        final RpslObject filteredObject=new RpslObject(filterObject(rpslObjectBase));
        final RpslObject rpslObject=sanitizer.sanitize(filteredObject,messages);
        final RpslAttribute typeAttribute=rpslObject.getTypeAttribute();
        typeAttribute.validateSyntax(rpslObject.getType(),messages);
        if (messages.hasErrors()) {
          logger.debug(""String_Node_Str"",typeAttribute,messages);
          nrIgnored++;
        }
 else         if (resourceData.isMaintainedInRirSpace(rpslObject)) {
          createOrUpdate(rpslObject);
        }
      }
      nrHandled++;
      if (nrHandled % LOG_EVERY_NR_HANDLED == 0) {
        logger.debug(""String_Node_Str"",nrHandled);
      }
    }
    private RpslObjectBase filterObject(    final RpslObjectBase rpslObject){
      final RpslAttribute sourceAttribute=new RpslAttribute(AttributeType.SOURCE,grsSource.getSource());
      final ObjectTemplate objectTemplate=ObjectTemplate.getTemplate(rpslObject.getType());
      final Set<AttributeType> attributeTypes=objectTemplate.getAllAttributes();
      final List<RpslAttribute> attributes=rpslObject.getAttributes();
      final List<RpslAttribute> newAttributes=Lists.newArrayListWithExpectedSize(attributes.size());
      final Set<AttributeType> newAttributeTypes=Sets.newHashSet();
      for (      final RpslAttribute attribute : attributes) {
        final AttributeType attributeType=attribute.getType();
        if (attributeType == null || !attributeTypes.contains(attributeType)) {
          logger.debug(""String_Node_Str"",rpslObject.getFormattedKey(),attribute);
          continue;
        }
        newAttributeTypes.add(attributeType);
        if (attributeType.equals(AttributeType.SOURCE)) {
          newAttributes.add(sourceAttribute);
        }
 else {
          newAttributes.add(attribute);
        }
      }
      if (!newAttributeTypes.contains(AttributeType.SOURCE)) {
        newAttributes.add(sourceAttribute);
      }
      return new RpslObjectBase(newAttributes);
    }
    private void createOrUpdate(    final RpslObject importedObject){
      final String pkey=importedObject.getKey().toString();
      final ObjectType type=importedObject.getType();
      final GrsObjectInfo grsObjectInfo=grsSource.getDao().find(pkey,type);
      if (grsObjectInfo == null) {
        if (type == ObjectType.PERSON && grsSource.getDao().find(pkey,ObjectType.ROLE) != null) {
          return;
        }
        if (type == ObjectType.ROLE && grsSource.getDao().find(pkey,ObjectType.PERSON) != null) {
          return;
        }
        create(importedObject);
      }
 else {
        currentObjectIds.remove(grsObjectInfo.getObjectId());
        if (!grsObjectInfo.getRpslObject().equals(importedObject)) {
          update(importedObject,grsObjectInfo);
        }
      }
    }
    private void create(    final RpslObject importedObject){
      final GrsDao.UpdateResult updateResult=grsSource.getDao().createObject(importedObject);
      if (updateResult.hasMissingReferences()) {
        incompletelyIndexedObjectIds.add(updateResult.getObjectId());
      }
      nrCreated++;
    }
    private void update(    final RpslObject importedObject,    final GrsObjectInfo grsObjectInfo){
      final GrsDao.UpdateResult updateResult=grsSource.getDao().updateObject(grsObjectInfo,importedObject);
      if (updateResult.hasMissingReferences()) {
        incompletelyIndexedObjectIds.add(updateResult.getObjectId());
      }
      nrUpdated++;
    }
  }
);
}",0.9475728155339804
161265,"private Set<Principal> performAuthentication(final PreparedUpdate update,final UpdateContext updateContext){
  final Set<Message> authenticationMessages=Sets.newLinkedHashSet();
  final Set<RpslObject> authenticatedObjects=Sets.newLinkedHashSet();
  if (update.getCredentials().ofType(PasswordCredential.class).size() > 20) {
    authenticationMessages.add(UpdateMessages.tooManyPasswordsSpecified());
  }
 else {
    for (    final AuthenticationStrategy authenticationStrategy : authenticationStrategies) {
      if (authenticationStrategy.supports(update)) {
        try {
          authenticatedObjects.addAll(authenticationStrategy.authenticate(update,updateContext));
        }
 catch (        AuthenticationFailedException e) {
          authenticationMessages.addAll(e.getAuthenticationMessages());
        }
      }
    }
  }
  if (!authenticationMessages.isEmpty()) {
    authenticationFailed(update,updateContext,authenticationMessages);
  }
  final Set<Principal> principals=Sets.newLinkedHashSet();
  for (  final RpslObject authenticatedObject : authenticatedObjects) {
    principals.addAll(getPrincipals(authenticatedObject));
  }
  return principals;
}","private Set<Principal> performAuthentication(Origin origin,final PreparedUpdate update,final UpdateContext updateContext){
  final Set<Message> authenticationMessages=Sets.newLinkedHashSet();
  final Set<RpslObject> authenticatedObjects=Sets.newLinkedHashSet();
  if (update.getCredentials().ofType(PasswordCredential.class).size() > 20) {
    authenticationMessages.add(UpdateMessages.tooManyPasswordsSpecified());
  }
 else {
    for (    final AuthenticationStrategy authenticationStrategy : authenticationStrategies) {
      if (authenticationStrategy.supports(update)) {
        try {
          authenticatedObjects.addAll(authenticationStrategy.authenticate(update,updateContext));
        }
 catch (        AuthenticationFailedException e) {
          authenticationMessages.addAll(e.getAuthenticationMessages());
        }
      }
    }
  }
  final Set<Principal> principals=Sets.newLinkedHashSet();
  for (  final RpslObject authenticatedObject : authenticatedObjects) {
    principals.addAll(getPrincipals(authenticatedObject));
  }
  if (!principals.isEmpty() && !origin.isDefaultOverride() && WhoisProfile.isDeployed()) {
    if (!origin.allowAdminOperations() || !ipRanges.isInRipeRange(IpInterval.parse(origin.getFrom()))) {
      authenticationMessages.add(UpdateMessages.ripeMntnerUpdatesOnlyAllowedFromWithinNetwork());
    }
  }
  if (!authenticationMessages.isEmpty()) {
    authenticationFailed(update,updateContext,authenticationMessages);
  }
  return principals;
}",0.7786144578313253
161266,"public void authenticate(final Origin origin,final PreparedUpdate update,final UpdateContext updateContext){
  final Set<Principal> principals;
  if (origin.isDefaultOverride()) {
    principals=Collections.singleton(Principal.OVERRIDE_MAINTAINER);
  }
 else   if (update.isOverride()) {
    principals=performOverrideAuthentication(origin,update,updateContext);
  }
 else {
    principals=performAuthentication(update,updateContext);
  }
  final Subject subject=new Subject(principals);
  updateContext.subject(update,subject);
}","public void authenticate(final Origin origin,final PreparedUpdate update,final UpdateContext updateContext){
  final Set<Principal> principals;
  if (origin.isDefaultOverride()) {
    principals=Collections.singleton(Principal.OVERRIDE_MAINTAINER);
  }
 else   if (update.isOverride()) {
    principals=performOverrideAuthentication(origin,update,updateContext);
  }
 else {
    principals=performAuthentication(origin,update,updateContext);
  }
  final Subject subject=new Subject(principals);
  updateContext.subject(update,subject);
}",0.993439550140581
161267,"@Autowired JpirrGrsSource(@Value(""String_Node_Str"") final String source,@Value(""String_Node_Str"") final String resourceDataUrl,final SourceContext sourceContext,final DateTimeProvider dateTimeProvider){
  super(source,resourceDataUrl,sourceContext,dateTimeProvider);
}","@Autowired JpirrGrsSource(@Value(""String_Node_Str"") final String source,@Value(""String_Node_Str"") final String resourceDataUrl,@Value(""String_Node_Str"") final String download,final SourceContext sourceContext,final DateTimeProvider dateTimeProvider){
  super(source,resourceDataUrl,sourceContext,dateTimeProvider);
  this.download=download;
}",0.8786885245901639
161268,"@Autowired RadbGrsSource(@Value(""String_Node_Str"") final String source,@Value(""String_Node_Str"") final String resourceDataUrl,final SourceContext sourceContext,final DateTimeProvider dateTimeProvider){
  super(source,resourceDataUrl,sourceContext,dateTimeProvider);
}","@Autowired RadbGrsSource(@Value(""String_Node_Str"") final String source,@Value(""String_Node_Str"") final String resourceDataUrl,@Value(""String_Node_Str"") final String download,final SourceContext sourceContext,final DateTimeProvider dateTimeProvider){
  super(source,resourceDataUrl,sourceContext,dateTimeProvider);
  this.download=download;
}",0.8782894736842105
161269,"@Before public void setUp() throws Exception {
  objectHandler=new CaptureInputObjectHandler();
  subject=new JpirrGrsSource(""String_Node_Str"",""String_Node_Str"",sourceContext,dateTimeProvider);
}","@Before public void setUp() throws Exception {
  objectHandler=new CaptureInputObjectHandler();
  subject=new JpirrGrsSource(""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",sourceContext,dateTimeProvider);
}",0.9558823529411764
161270,"@Test public void acquire() throws IOException {
  final String download=""String_Node_Str"";
  subject=spy(subject);
  subject.setDownload(download);
  doNothing().when(subject).downloadToFile(any(URL.class),any(File.class));
  final File file=File.createTempFile(""String_Node_Str"",""String_Node_Str"");
  subject.acquireDump(file);
  verify(subject).downloadToFile(new URL(download),file);
}","@Test public void acquire() throws IOException {
  final String download=""String_Node_Str"";
  subject=spy(subject);
  doNothing().when(subject).downloadToFile(any(URL.class),any(File.class));
  final File file=File.createTempFile(""String_Node_Str"",""String_Node_Str"");
  subject.acquireDump(file);
  verify(subject).downloadToFile(new URL(download),file);
}",0.9557046979865772
161271,"@Before public void setUp() throws Exception {
  objectHandler=new CaptureInputObjectHandler();
  subject=new RadbGrsSource(""String_Node_Str"",""String_Node_Str"",sourceContext,dateTimeProvider);
}","@Before public void setUp() throws Exception {
  objectHandler=new CaptureInputObjectHandler();
  subject=new RadbGrsSource(""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",sourceContext,dateTimeProvider);
}",0.955665024630542
161272,"@Test public void acquire() throws IOException {
  final String download=""String_Node_Str"";
  subject=spy(subject);
  subject.setDownload(download);
  doNothing().when(subject).downloadToFile(any(URL.class),any(File.class));
  final File file=File.createTempFile(""String_Node_Str"",""String_Node_Str"");
  subject.acquireDump(file);
  verify(subject).downloadToFile(new URL(download),file);
}","@Test public void acquire() throws IOException {
  final String download=""String_Node_Str"";
  subject=spy(subject);
  doNothing().when(subject).downloadToFile(any(URL.class),any(File.class));
  final File file=File.createTempFile(""String_Node_Str"",""String_Node_Str"");
  subject.acquireDump(file);
  verify(subject).downloadToFile(new URL(download),file);
}",0.9557046979865772
161273,"/** 
 * Search for updates on all machines based on query string
 * @param search The search query
 * @param date   date the updates was handled
 * @return List of updateIds matching search query
 */
@GET @Path(""String_Node_Str"") @Produces({MediaType.APPLICATION_JSON,MediaType.APPLICATION_XML}) @TypeHint(Update.class) public List<Update> getUpdateIds(@QueryParam(""String_Node_Str"") final String search,@DefaultValue(""String_Node_Str"") @QueryParam(""String_Node_Str"") final String date) throws IOException {
  final List<Update> updates=getCurrentUpdateIds(search,date);
  final List<Hosts> clusterMembers=host.getClusterMembers();
  if (clusterMembers.isEmpty()) {
    return updates;
  }
  final Map<Hosts,Future<List<Update>>> futures=Maps.newEnumMap(Hosts.class);
  for (  final Hosts clusterMember : clusterMembers) {
    if (clusterMember.equals(host)) {
      continue;
    }
    final String url=String.format(""String_Node_Str"",clusterMember.getHostName(),jettyConfig.getPort(Audience.INTERNAL),search,date,apiKey);
    final Future<List<Update>> future=client.asyncResource(url).accept(MediaType.APPLICATION_JSON_TYPE).get(new GenericType<List<Update>>(){
    }
);
    futures.put(clusterMember,future);
  }
  for (  final Map.Entry<Hosts,Future<List<Update>>> futureEntry : futures.entrySet()) {
    final Hosts host=futureEntry.getKey();
    final Future<List<Update>> future=futureEntry.getValue();
    try {
      updates.addAll(future.get(CLUSTER_TIMEOUT,TimeUnit.MILLISECONDS));
    }
 catch (    InterruptedException e) {
      updates.add(new Update(host.name(),remoteError(host.name(),e)));
    }
catch (    ExecutionException e) {
      updates.add(new Update(host.name(),remoteError(host.name(),e)));
    }
catch (    TimeoutException e) {
      updates.add(new Update(host.name(),remoteError(host.name(),e)));
    }
  }
  Collections.sort(updates,new Comparator<Update>(){
    @Override public int compare(    final Update update1,    final Update update2){
      return update1.getId().compareTo(update2.toString());
    }
  }
);
  return updates;
}","/** 
 * Search for updates on all machines based on query string
 * @param search The search query
 * @param date   date the updates was handled
 * @return List of updateIds matching search query
 */
@GET @Path(""String_Node_Str"") @Produces({MediaType.APPLICATION_JSON,MediaType.APPLICATION_XML}) @TypeHint(Update.class) public List<Update> getUpdateIds(@QueryParam(""String_Node_Str"") final String search,@DefaultValue(""String_Node_Str"") @QueryParam(""String_Node_Str"") final String date) throws IOException {
  final List<Update> updates=getCurrentUpdateIds(search,date);
  final List<Hosts> clusterMembers=host.getClusterMembers();
  if (clusterMembers.isEmpty()) {
    return updates;
  }
  final Map<Hosts,Future<List<Update>>> futures=Maps.newEnumMap(Hosts.class);
  for (  final Hosts clusterMember : clusterMembers) {
    if (clusterMember.equals(host)) {
      continue;
    }
    final String url=String.format(""String_Node_Str"",clusterMember.getHostName(),jettyConfig.getPort(Audience.INTERNAL),URLEncoder.encode(search,""String_Node_Str""),date,apiKey);
    final Future<List<Update>> future=client.asyncResource(url).accept(MediaType.APPLICATION_JSON_TYPE).get(new GenericType<List<Update>>(){
    }
);
    futures.put(clusterMember,future);
  }
  for (  final Map.Entry<Hosts,Future<List<Update>>> futureEntry : futures.entrySet()) {
    final Hosts host=futureEntry.getKey();
    final Future<List<Update>> future=futureEntry.getValue();
    try {
      updates.addAll(future.get(CLUSTER_TIMEOUT,TimeUnit.MILLISECONDS));
    }
 catch (    InterruptedException e) {
      updates.add(new Update(host.name(),remoteError(host.name(),e)));
    }
catch (    ExecutionException e) {
      updates.add(new Update(host.name(),remoteError(host.name(),e)));
    }
catch (    TimeoutException e) {
      updates.add(new Update(host.name(),remoteError(host.name(),e)));
    }
  }
  Collections.sort(updates,new Comparator<Update>(){
    @Override public int compare(    final Update update1,    final Update update2){
      return update1.getId().compareTo(update2.toString());
    }
  }
);
  return updates;
}",0.9882747068676716
161274,"@Override public int doWork(final List<String> args){
  if (this.bedFile == null || !this.bedFile.exists()) {
    LOG.error(""String_Node_Str"");
    return -1;
  }
  if (args.isEmpty()) {
    LOG.error(""String_Node_Str"");
    return -1;
  }
  if (this.minCoverages.isEmpty()) {
    this.minCoverages.add(0);
  }
  final String NO_PARTITION=""String_Node_Str"";
  BufferedReader bedIn=null;
  final List<SamReader> samReaders=new ArrayList<>(args.size());
  PrintWriter pw=null;
  ReferenceGenome referenceGenome=null;
  ReferenceContig referenceContig=null;
  try {
    final BedLineCodec codec=new BedLineCodec();
    final Set<String> all_partitions=new TreeSet<>();
    bedIn=IOUtils.openFileForBufferedReading(this.bedFile);
    SAMSequenceDictionary dict=null;
    for (    final String filename : IOUtils.unrollFiles(args)) {
      LOG.info(filename);
      final SamReader samReader=super.openSamReader(filename);
      if (!samReader.hasIndex()) {
        LOG.error(filename + ""String_Node_Str"");
        samReader.close();
        return -1;
      }
      final SAMFileHeader samFileheader=samReader.getFileHeader();
      if (samFileheader == null) {
        LOG.error(""String_Node_Str"" + filename);
        return -1;
      }
      final List<SAMReadGroupRecord> readGroups=samFileheader.getReadGroups();
      if (readGroups == null || readGroups.isEmpty()) {
        LOG.warn(""String_Node_Str"" + filename);
        all_partitions.add(NO_PARTITION);
      }
 else {
        for (        final SAMReadGroupRecord rg : readGroups) {
          all_partitions.add(this.partition.apply(rg,NO_PARTITION));
        }
      }
      final SAMSequenceDictionary d=samFileheader.getSequenceDictionary();
      if (d == null) {
        samReader.close();
        LOG.error(JvarkitException.BamDictionaryMissing.getMessage(filename));
        return -1;
      }
      samReaders.add(samReader);
      if (dict == null) {
        dict=d;
      }
 else       if (SequenceUtil.areSequenceDictionariesEqual(d,dict)) {
        LOG.error(JvarkitException.DictionariesAreNotTheSame.getMessage(d,dict));
        return -1;
      }
    }
    if (samReaders.isEmpty()) {
      LOG.error(""String_Node_Str"");
      return -1;
    }
    if (!StringUtil.isBlank(this.faidxUri)) {
      referenceGenome=new ReferenceGenomeFactory().open(this.faidxUri);
    }
    pw=super.openFileOrStdoutAsPrintWriter(this.outputFile);
    pw.print(""String_Node_Str"" + this.partition.name() + (referenceGenome == null ? ""String_Node_Str"" : ""String_Node_Str""));
    pw.print(""String_Node_Str"");
    for (    final int MIN_COVERAGE : this.minCoverages) {
      pw.print(""String_Node_Str"" + MIN_COVERAGE + ""String_Node_Str""+ MIN_COVERAGE+ ""String_Node_Str""+ MIN_COVERAGE+ ""String_Node_Str""+ MIN_COVERAGE);
    }
    pw.println();
    String line=null;
    while ((line=bedIn.readLine()) != null) {
      if (line.isEmpty() || line.startsWith(""String_Node_Str""))       continue;
      final BedLine bedLine=codec.decode(line);
      if (bedLine == null)       continue;
      if (dict.getSequence(bedLine.getContig()) == null) {
        LOG.error(""String_Node_Str"" + line);
        return -1;
      }
      if (bedLine.getStart() > bedLine.getEnd()) {
        LOG.info(""String_Node_Str"" + bedLine);
        continue;
      }
      if (referenceGenome != null && (referenceContig == null || !referenceContig.hasName(bedLine.getContig()))) {
        referenceContig=referenceGenome.getContig(bedLine.getContig());
      }
      final Map<String,IntervalStat> sample2stats=new HashMap<>(all_partitions.size());
      for (      final String rgId : all_partitions) {
        sample2stats.put(rgId,new IntervalStat(bedLine));
      }
      for (      final SamReader samReader : samReaders) {
        final SAMRecordIterator r=samReader.queryOverlapping(bedLine.getContig(),bedLine.getStart(),bedLine.getEnd());
        while (r.hasNext()) {
          final SAMRecord rec=r.next();
          if (rec.getReadUnmappedFlag())           continue;
          if (this.filter.filterOut(rec))           continue;
          if (!rec.getReferenceName().equals(bedLine.getContig()))           continue;
          final String partition;
          final SAMReadGroupRecord group=rec.getReadGroup();
          if (group == null) {
            partition=NO_PARTITION;
          }
 else {
            final String name=this.partition.apply(group);
            partition=(StringUtil.isBlank(name) ? NO_PARTITION : name);
          }
          IntervalStat stat=sample2stats.get(partition);
          if (stat == null) {
            stat=new IntervalStat(bedLine);
            sample2stats.put(partition,stat);
          }
          stat.visit(rec);
        }
        r.close();
      }
      final OptionalInt gcPercentInt=(referenceContig == null ? OptionalInt.empty() : referenceContig.getGCPercent(bedLine.getStart() - 1,bedLine.getEnd()).getGCPercentAsInteger());
      for (      final String partitionName : sample2stats.keySet()) {
        final IntervalStat stat=sample2stats.get(partitionName);
        Arrays.sort(stat.counts);
        pw.print(bedLine.getContig() + ""String_Node_Str"" + (bedLine.getStart() - 1)+ ""String_Node_Str""+ (bedLine.getEnd())+ ""String_Node_Str""+ stat.counts.length+ ""String_Node_Str""+ partitionName);
        if (referenceGenome != null) {
          pw.print(""String_Node_Str"");
          if (gcPercentInt.isPresent())           pw.print(gcPercentInt.getAsInt());
        }
        pw.print(""String_Node_Str"" + stat.counts[0] + ""String_Node_Str""+ stat.counts[stat.counts.length - 1]);
        for (        final int MIN_COVERAGE : this.minCoverages) {
          final IntUnaryOperator depthAdjuster=(D) -> (D <= MIN_COVERAGE ? 0 : D);
          final int count_no_coverage=(int)Arrays.stream(stat.counts).filter(D -> depthAdjuster.applyAsInt(D) <= 0).count();
          final double mean=Percentile.average().evaluate(Arrays.stream(stat.counts).map(depthAdjuster));
          final double median_depth=Percentile.median().evaluate(Arrays.stream(stat.counts).map(depthAdjuster));
          pw.print(""String_Node_Str"" + mean + ""String_Node_Str""+ median_depth+ ""String_Node_Str""+ count_no_coverage+ ""String_Node_Str""+ (int)(((stat.counts.length - count_no_coverage) / (double)stat.counts.length) * 100.0));
        }
        pw.println();
      }
    }
    pw.flush();
    pw.close();
    pw=null;
    LOG.info(""String_Node_Str"");
    return RETURN_OK;
  }
 catch (  final Exception err) {
    LOG.error(err);
    return -1;
  }
 finally {
    CloserUtil.close(referenceGenome);
    CloserUtil.close(pw);
    CloserUtil.close(bedIn);
    CloserUtil.close(samReaders);
  }
}","@Override public int doWork(final List<String> args){
  if (this.bedFile == null || !this.bedFile.exists()) {
    LOG.error(""String_Node_Str"");
    return -1;
  }
  if (args.isEmpty()) {
    LOG.error(""String_Node_Str"");
    return -1;
  }
  if (this.minCoverages.isEmpty()) {
    this.minCoverages.add(0);
  }
  final String NO_PARTITION=""String_Node_Str"";
  BufferedReader bedIn=null;
  final List<SamReader> samReaders=new ArrayList<>(args.size());
  PrintWriter pw=null;
  ReferenceGenome referenceGenome=null;
  ReferenceContig referenceContig=null;
  try {
    final BedLineCodec codec=new BedLineCodec();
    final Set<String> all_partitions=new TreeSet<>();
    bedIn=IOUtils.openFileForBufferedReading(this.bedFile);
    SAMSequenceDictionary dict=null;
    for (    final String filename : IOUtils.unrollFiles(args)) {
      LOG.info(filename);
      final SamReader samReader=super.openSamReader(filename);
      if (!samReader.hasIndex()) {
        LOG.error(filename + ""String_Node_Str"");
        samReader.close();
        return -1;
      }
      final SAMFileHeader samFileheader=samReader.getFileHeader();
      if (samFileheader == null) {
        LOG.error(""String_Node_Str"" + filename);
        return -1;
      }
      final List<SAMReadGroupRecord> readGroups=samFileheader.getReadGroups();
      if (readGroups == null || readGroups.isEmpty()) {
        LOG.warn(""String_Node_Str"" + filename);
        all_partitions.add(NO_PARTITION);
      }
 else {
        for (        final SAMReadGroupRecord rg : readGroups) {
          all_partitions.add(this.partition.apply(rg,NO_PARTITION));
        }
      }
      final SAMSequenceDictionary d=samFileheader.getSequenceDictionary();
      if (d == null) {
        samReader.close();
        LOG.error(JvarkitException.BamDictionaryMissing.getMessage(filename));
        return -1;
      }
      samReaders.add(samReader);
      if (dict == null) {
        dict=d;
      }
 else       if (!SequenceUtil.areSequenceDictionariesEqual(d,dict)) {
        LOG.error(JvarkitException.DictionariesAreNotTheSame.getMessage(d,dict));
        return -1;
      }
    }
    if (samReaders.isEmpty()) {
      LOG.error(""String_Node_Str"");
      return -1;
    }
    if (!StringUtil.isBlank(this.faidxUri)) {
      referenceGenome=new ReferenceGenomeFactory().open(this.faidxUri);
    }
    pw=super.openFileOrStdoutAsPrintWriter(this.outputFile);
    pw.print(""String_Node_Str"" + this.partition.name() + (referenceGenome == null ? ""String_Node_Str"" : ""String_Node_Str""));
    pw.print(""String_Node_Str"");
    for (    final int MIN_COVERAGE : this.minCoverages) {
      pw.print(""String_Node_Str"" + MIN_COVERAGE + ""String_Node_Str""+ MIN_COVERAGE+ ""String_Node_Str""+ MIN_COVERAGE+ ""String_Node_Str""+ MIN_COVERAGE);
    }
    pw.println();
    String line=null;
    while ((line=bedIn.readLine()) != null) {
      if (line.isEmpty() || line.startsWith(""String_Node_Str""))       continue;
      final BedLine bedLine=codec.decode(line);
      if (bedLine == null)       continue;
      if (dict.getSequence(bedLine.getContig()) == null) {
        LOG.error(""String_Node_Str"" + line);
        return -1;
      }
      if (bedLine.getStart() > bedLine.getEnd()) {
        LOG.info(""String_Node_Str"" + bedLine);
        continue;
      }
      if (referenceGenome != null && (referenceContig == null || !referenceContig.hasName(bedLine.getContig()))) {
        referenceContig=referenceGenome.getContig(bedLine.getContig());
      }
      final Map<String,IntervalStat> sample2stats=new HashMap<>(all_partitions.size());
      for (      final String rgId : all_partitions) {
        sample2stats.put(rgId,new IntervalStat(bedLine));
      }
      for (      final SamReader samReader : samReaders) {
        final SAMRecordIterator r=samReader.queryOverlapping(bedLine.getContig(),bedLine.getStart(),bedLine.getEnd());
        while (r.hasNext()) {
          final SAMRecord rec=r.next();
          if (rec.getReadUnmappedFlag())           continue;
          if (this.filter.filterOut(rec))           continue;
          if (!rec.getReferenceName().equals(bedLine.getContig()))           continue;
          final String partition;
          final SAMReadGroupRecord group=rec.getReadGroup();
          if (group == null) {
            partition=NO_PARTITION;
          }
 else {
            final String name=this.partition.apply(group);
            partition=(StringUtil.isBlank(name) ? NO_PARTITION : name);
          }
          IntervalStat stat=sample2stats.get(partition);
          if (stat == null) {
            stat=new IntervalStat(bedLine);
            sample2stats.put(partition,stat);
          }
          stat.visit(rec);
        }
        r.close();
      }
      final OptionalInt gcPercentInt=(referenceContig == null ? OptionalInt.empty() : referenceContig.getGCPercent(bedLine.getStart() - 1,bedLine.getEnd()).getGCPercentAsInteger());
      for (      final String partitionName : sample2stats.keySet()) {
        final IntervalStat stat=sample2stats.get(partitionName);
        Arrays.sort(stat.counts);
        pw.print(bedLine.getContig() + ""String_Node_Str"" + (bedLine.getStart() - 1)+ ""String_Node_Str""+ (bedLine.getEnd())+ ""String_Node_Str""+ stat.counts.length+ ""String_Node_Str""+ partitionName);
        if (referenceGenome != null) {
          pw.print(""String_Node_Str"");
          if (gcPercentInt.isPresent())           pw.print(gcPercentInt.getAsInt());
        }
        pw.print(""String_Node_Str"" + stat.counts[0] + ""String_Node_Str""+ stat.counts[stat.counts.length - 1]);
        for (        final int MIN_COVERAGE : this.minCoverages) {
          final IntUnaryOperator depthAdjuster=(D) -> (D <= MIN_COVERAGE ? 0 : D);
          final int count_no_coverage=(int)Arrays.stream(stat.counts).filter(D -> depthAdjuster.applyAsInt(D) <= 0).count();
          final double mean=Percentile.average().evaluate(Arrays.stream(stat.counts).map(depthAdjuster));
          final double median_depth=Percentile.median().evaluate(Arrays.stream(stat.counts).map(depthAdjuster));
          pw.print(""String_Node_Str"" + mean + ""String_Node_Str""+ median_depth+ ""String_Node_Str""+ count_no_coverage+ ""String_Node_Str""+ (int)(((stat.counts.length - count_no_coverage) / (double)stat.counts.length) * 100.0));
        }
        pw.println();
      }
    }
    pw.flush();
    pw.close();
    pw=null;
    LOG.info(""String_Node_Str"");
    return RETURN_OK;
  }
 catch (  final Exception err) {
    LOG.error(err);
    return -1;
  }
 finally {
    CloserUtil.close(referenceGenome);
    CloserUtil.close(pw);
    CloserUtil.close(bedIn);
    CloserUtil.close(samReaders);
  }
}",0.999924761116545
161275,"@Test public void testVcfTrap() throws IOException {
  final File dbFile=new File(TEST_RESULTS_DIR,""String_Node_Str"");
  PrintWriter pw=new PrintWriter(dbFile);
  pw.println(""String_Node_Str"");
  pw.println(""String_Node_Str"");
  pw.println(""String_Node_Str"");
  pw.flush();
  pw.close();
  final File indexFile=new File(TEST_RESULTS_DIR,""String_Node_Str"");
  Assert.assertEquals(0,new TrapIndexer().instanceMain(new String[]{""String_Node_Str"",indexFile.getPath(),dbFile.getPath()}));
  final File manifestFile=new File(TEST_RESULTS_DIR,""String_Node_Str"");
  pw=new PrintWriter(manifestFile);
  pw.println(""String_Node_Str"" + indexFile.getPath());
  pw.flush();
  pw.close();
  final File outvcf=new File(TEST_RESULTS_DIR,""String_Node_Str"");
  Assert.assertEquals(0,new VcfTrap().instanceMain(new String[]{""String_Node_Str"",outvcf.getPath(),""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",manifestFile.getPath(),""String_Node_Str""}));
  Assert.assertTrue(streamVcf(outvcf).anyMatch(V -> V.hasAttribute(""String_Node_Str"")));
  Assert.assertTrue(manifestFile.delete());
  Assert.assertTrue(indexFile.delete());
  Assert.assertTrue(dbFile.delete());
  Assert.assertTrue(outvcf.delete());
}","@Test public void testVcfTrap() throws IOException {
  final File dbFile=new File(TEST_RESULTS_DIR,""String_Node_Str"");
  PrintWriter pw=new PrintWriter(dbFile);
  pw.println(""String_Node_Str"");
  pw.println(""String_Node_Str"");
  pw.println(""String_Node_Str"");
  pw.println(""String_Node_Str"");
  pw.println(""String_Node_Str"");
  pw.flush();
  pw.close();
  final File indexFile=new File(TEST_RESULTS_DIR,""String_Node_Str"");
  Assert.assertEquals(0,new TrapIndexer().instanceMain(new String[]{""String_Node_Str"",indexFile.getPath(),dbFile.getPath()}));
  final File manifestFile=new File(TEST_RESULTS_DIR,""String_Node_Str"");
  pw=new PrintWriter(manifestFile);
  pw.println(""String_Node_Str"" + indexFile.getPath());
  pw.flush();
  pw.close();
  final File outvcf=new File(TEST_RESULTS_DIR,""String_Node_Str"");
  Assert.assertEquals(0,new VcfTrap().instanceMain(new String[]{""String_Node_Str"",outvcf.getPath(),""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",manifestFile.getPath(),""String_Node_Str""}));
  Assert.assertTrue(streamVcf(outvcf).anyMatch(V -> V.hasAttribute(""String_Node_Str"")));
  Assert.assertTrue(manifestFile.delete());
  Assert.assertTrue(indexFile.delete());
  Assert.assertTrue(dbFile.delete());
  Assert.assertTrue(outvcf.delete());
}",0.9730171708912512
161276,"@Override public int doWork(final List<String> args){
  final Pattern TAB=Pattern.compile(""String_Node_Str"");
  OutputStream fos=null;
  BufferedReader r=null;
  try {
    final File inputFile=new File(oneAndOnlyOneFile(args));
    IOUtil.assertFileIsReadable(inputFile);
    if (!inputFile.getName().startsWith(""String_Node_Str"")) {
      LOG.error(""String_Node_Str"" + inputFile);
      return -1;
    }
    int dot=inputFile.getName().indexOf(""String_Node_Str"");
    if (dot == -1) {
      LOG.error(""String_Node_Str"" + inputFile.getName());
      return -1;
    }
    final String contig=inputFile.getName().substring(3,dot);
    if (args.isEmpty()) {
      LOG.error(""String_Node_Str"");
      return -1;
    }
    if (this.outfilename == null) {
      fos=stdout();
    }
 else {
      if (!this.outfilename.getName().endsWith(""String_Node_Str"")) {
        LOG.error(""String_Node_Str"" + outfilename);
        return -1;
      }
      if (!this.outfilename.getName().contains(contig + ""String_Node_Str"")) {
        LOG.error(""String_Node_Str"" + contig + ""String_Node_Str""+ outfilename);
        return -1;
      }
      LOG.info(""String_Node_Str"" + this.outfilename);
      fos=new FileOutputStream(this.outfilename);
    }
    fos.write(MAGIC);
    final byte score_str[]=new byte[SCORE_SIZEOF];
    long nRecords=0L;
    int prev_pos=0;
    LOG.info(""String_Node_Str"" + inputFile + ""String_Node_Str""+ contig+ ""String_Node_Str"");
    r=IOUtils.openFileForBufferedReading(inputFile);
    String line;
    while ((line=r.readLine()) != null) {
      if (StringUtil.isBlank(line)) {
        LOG.error(""String_Node_Str"" + inputFile + ""String_Node_Str"");
        return -1;
      }
      nRecords++;
      if (nRecords % 1000000 == 0) {
        LOG.info(""String_Node_Str"" + nRecords + ""String_Node_Str""+ line+ ""String_Node_Str"");
      }
      final String tokens[]=TAB.split(line);
      if (tokens.length < 5)       throw new JvarkitException.TokenErrors(tokens);
      if (StringUtil.isBlank(tokens[0]))       throw new JvarkitException.FileFormatError(""String_Node_Str"" + line);
      if (StringUtil.isBlank(tokens[1]))       throw new JvarkitException.FileFormatError(""String_Node_Str"" + line);
      if (StringUtil.isBlank(tokens[2]))       throw new JvarkitException.FileFormatError(""String_Node_Str"" + line);
      if (tokens[1] == tokens[2])       throw new JvarkitException.FileFormatError(""String_Node_Str"" + line);
      if (tokens[1].length() != 1)       throw new JvarkitException.FileFormatError(""String_Node_Str"" + line);
      if (tokens[2].length() != 1)       throw new JvarkitException.FileFormatError(""String_Node_Str"" + line);
      if (tokens[3].length() > ENSG_STRLEN)       throw new JvarkitException.FileFormatError(""String_Node_Str"" + ENSG_STRLEN + ""String_Node_Str""+ line);
      if (!tokens[3].startsWith(""String_Node_Str""))       throw new JvarkitException.FileFormatError(""String_Node_Str"" + line);
      if (tokens[4].length() > SCORE_STRLEN)       throw new JvarkitException.FileFormatError(""String_Node_Str"" + SCORE_STRLEN + ""String_Node_Str""+ line);
      final float f=Float.parseFloat(tokens[4]);
      if (f < 0)       throw new JvarkitException.FileFormatError(""String_Node_Str"" + tokens[4] + ""String_Node_Str""+ f+ ""String_Node_Str"");
      if (f > 1.0f)       throw new JvarkitException.FileFormatError(""String_Node_Str"" + tokens[4] + ""String_Node_Str""+ f+ ""String_Node_Str"");
      final int pos=Integer.parseInt(tokens[0]);
      if (prev_pos > pos) {
        LOG.error(""String_Node_Str"" + prev_pos + ""String_Node_Str""+ pos);
        return -1;
      }
      prev_pos=pos;
      final ByteArrayOutputStream baos=new ByteArrayOutputStream(RECORD_SIZOF);
      final DataOutputStream daos=new DataOutputStream(baos);
      daos.writeInt(pos);
      daos.writeByte(tokens[1].charAt(0));
      daos.writeByte(tokens[2].charAt(0));
      daos.writeInt(Integer.parseInt(tokens[3].substring(4)));
      Arrays.fill(score_str,(byte)'0');
      if (tokens[4].equals(""String_Node_Str"") || tokens[4].equals(""String_Node_Str"")) {
        score_str[1]=(byte)1;
      }
 else       if (tokens[4].equals(""String_Node_Str"")) {
      }
 else       if (tokens[4].startsWith(""String_Node_Str"")) {
        final byte b_array[]=tokens[4].substring(2).getBytes();
        if (b_array.length > SCORE_SIZEOF)         throw new JvarkitException.FileFormatError(""String_Node_Str"" + SCORE_STRLEN + ""String_Node_Str""+ line);
        System.arraycopy(b_array,0,score_str,0,b_array.length);
      }
 else {
        LOG.error(""String_Node_Str"" + tokens[4]);
        return -1;
      }
      daos.write(score_str,0,score_str.length);
      final byte record_bytes[]=baos.toByteArray();
      if (record_bytes.length != RECORD_SIZOF) {
        LOG.error(""String_Node_Str"" + record_bytes.length);
        return -1;
      }
      fos.write(record_bytes);
    }
    r.close();
    fos.flush();
    fos.close();
    LOG.info(""String_Node_Str"" + nRecords + ""String_Node_Str""+ (RECORD_SIZOF * nRecords));
    return 0;
  }
 catch (  final Exception err) {
    LOG.error(err);
    return -1;
  }
 finally {
    CloserUtil.close(fos);
    CloserUtil.close(r);
  }
}","@Override public int doWork(final List<String> args){
  final Pattern TAB=Pattern.compile(""String_Node_Str"");
  OutputStream fos=null;
  BufferedReader r=null;
  try {
    final File inputFile=new File(oneAndOnlyOneFile(args));
    IOUtil.assertFileIsReadable(inputFile);
    if (!inputFile.getName().startsWith(""String_Node_Str"")) {
      LOG.error(""String_Node_Str"" + inputFile);
      return -1;
    }
    int dot=inputFile.getName().indexOf(""String_Node_Str"");
    if (dot == -1) {
      LOG.error(""String_Node_Str"" + inputFile.getName());
      return -1;
    }
    final String contig=inputFile.getName().substring(3,dot);
    if (args.isEmpty()) {
      LOG.error(""String_Node_Str"");
      return -1;
    }
    if (this.outfilename == null) {
      fos=stdout();
    }
 else {
      if (!this.outfilename.getName().endsWith(""String_Node_Str"")) {
        LOG.error(""String_Node_Str"" + outfilename);
        return -1;
      }
      if (!this.outfilename.getName().contains(contig + ""String_Node_Str"")) {
        LOG.error(""String_Node_Str"" + contig + ""String_Node_Str""+ outfilename);
        return -1;
      }
      LOG.info(""String_Node_Str"" + this.outfilename);
      fos=new FileOutputStream(this.outfilename);
    }
    fos.write(MAGIC);
    final byte score_str[]=new byte[SCORE_SIZEOF];
    long nRecords=0L;
    int prev_pos=0;
    LOG.info(""String_Node_Str"" + inputFile + ""String_Node_Str""+ contig+ ""String_Node_Str"");
    r=IOUtils.openFileForBufferedReading(inputFile);
    String line;
    while ((line=r.readLine()) != null) {
      if (StringUtil.isBlank(line)) {
        LOG.error(""String_Node_Str"" + inputFile + ""String_Node_Str"");
        return -1;
      }
      nRecords++;
      if (nRecords % 1000000 == 0) {
        LOG.info(""String_Node_Str"" + nRecords + ""String_Node_Str""+ line+ ""String_Node_Str"");
      }
      final String tokens[]=TAB.split(line);
      if (tokens.length < 5)       throw new JvarkitException.TokenErrors(tokens);
      if (StringUtil.isBlank(tokens[0]))       throw new JvarkitException.FileFormatError(""String_Node_Str"" + line);
      if (StringUtil.isBlank(tokens[1]))       throw new JvarkitException.FileFormatError(""String_Node_Str"" + line);
      if (StringUtil.isBlank(tokens[2]))       throw new JvarkitException.FileFormatError(""String_Node_Str"" + line);
      if (tokens[1] == tokens[2])       throw new JvarkitException.FileFormatError(""String_Node_Str"" + line);
      if (tokens[1].length() != 1)       throw new JvarkitException.FileFormatError(""String_Node_Str"" + line);
      if (tokens[2].length() != 1)       throw new JvarkitException.FileFormatError(""String_Node_Str"" + line);
      if (tokens[3].length() > ENSG_STRLEN)       throw new JvarkitException.FileFormatError(""String_Node_Str"" + ENSG_STRLEN + ""String_Node_Str""+ line);
      if (!tokens[3].startsWith(""String_Node_Str""))       throw new JvarkitException.FileFormatError(""String_Node_Str"" + line);
      if (tokens[4].length() > SCORE_STRLEN)       throw new JvarkitException.FileFormatError(""String_Node_Str"" + SCORE_STRLEN + ""String_Node_Str""+ line);
      final float f=Float.parseFloat(tokens[4]);
      if (f < 0)       throw new JvarkitException.FileFormatError(""String_Node_Str"" + tokens[4] + ""String_Node_Str""+ f+ ""String_Node_Str"");
      if (f > 1.0f)       throw new JvarkitException.FileFormatError(""String_Node_Str"" + tokens[4] + ""String_Node_Str""+ f+ ""String_Node_Str"");
      final int pos=Integer.parseInt(tokens[0]);
      if (prev_pos > pos) {
        LOG.error(""String_Node_Str"" + prev_pos + ""String_Node_Str""+ pos);
        return -1;
      }
      prev_pos=pos;
      final ByteArrayOutputStream baos=new ByteArrayOutputStream(RECORD_SIZOF);
      final DataOutputStream daos=new DataOutputStream(baos);
      daos.writeInt(pos);
      daos.writeByte(tokens[1].charAt(0));
      daos.writeByte(tokens[2].charAt(0));
      daos.writeInt(Integer.parseInt(tokens[3].substring(4)));
      Arrays.fill(score_str,(byte)'0');
      if (tokens[4].equals(""String_Node_Str"") || tokens[4].equals(""String_Node_Str"")) {
        score_str[0]=(byte)1;
      }
 else       if (tokens[4].equals(""String_Node_Str"")) {
      }
 else       if (tokens[4].startsWith(""String_Node_Str"")) {
        final byte b_array[]=tokens[4].substring(2).getBytes();
        if (b_array.length > SCORE_SIZEOF)         throw new JvarkitException.FileFormatError(""String_Node_Str"" + SCORE_STRLEN + ""String_Node_Str""+ line);
        System.arraycopy(b_array,0,score_str,0,b_array.length);
      }
 else {
        LOG.error(""String_Node_Str"" + tokens[4]);
        return -1;
      }
      daos.write(score_str,0,score_str.length);
      final byte record_bytes[]=baos.toByteArray();
      if (record_bytes.length != RECORD_SIZOF) {
        LOG.error(""String_Node_Str"" + record_bytes.length);
        return -1;
      }
      fos.write(record_bytes);
    }
    r.close();
    fos.flush();
    fos.close();
    LOG.info(""String_Node_Str"" + nRecords + ""String_Node_Str""+ (RECORD_SIZOF * nRecords));
    return 0;
  }
 catch (  final Exception err) {
    LOG.error(err);
    return -1;
  }
 finally {
    CloserUtil.close(fos);
    CloserUtil.close(r);
  }
}",0.999806426635695
161277,"/** 
 * public for knime 
 */
@Override public int doVcfToVcf(final String inputName,final VcfIterator vcfIn,final VariantContextWriter out){
  try {
    final Set<String> unmatchedcontigs=new HashSet<>();
    final VCFHeader h=vcfIn.getHeader();
    final VCFHeader h2=new VCFHeader(h);
    super.addMetaData(h2);
    final Map<String,VCFInfoHeaderLine> databaseTags=new HashMap<String,VCFInfoHeaderLine>();
    final VCFHeader databaseHeader=this.indexedVcfFileReader.getFileHeader();
    final ContigNameConverter nameConverter=ContigNameConverter.fromDictionaries(h.getSequenceDictionary(),databaseHeader.getSequenceDictionary()).setOnNotFound(this.onContigNotFound);
    for (    final String key : this.peek_info_tags) {
      VCFInfoHeaderLine hinfo=databaseHeader.getInfoHeaderLine(key);
      if (hinfo == null) {
        final String msg=""String_Node_Str"" + key + ""String_Node_Str""+ this.resourceVcfFile;
        if (this.missingIdIsError) {
          LOG.warn(msg);
          continue;
        }
 else {
          LOG.error(msg);
          return -1;
        }
      }
switch (hinfo.getCountType()) {
case G:
        throw new JvarkitException.UserError(""String_Node_Str"" + hinfo.getID());
default :
      databaseTags.put(hinfo.getID(),hinfo);
    break;
}
hinfo=VCFUtils.renameVCFInfoHeaderLine(hinfo,this.peekTagPrefix + key);
if (h2.getInfoHeaderLine(hinfo.getID()) != null) {
  throw new JvarkitException.UserError(""String_Node_Str"" + this.peekTagPrefix + key+ ""String_Node_Str"");
}
h2.addMetaDataLine(hinfo);
;
}
out.writeHeader(h2);
final SAMSequenceDictionaryProgress progress=new SAMSequenceDictionaryProgress(h);
while (vcfIn.hasNext()) {
final VariantContext ctx=progress.watch(vcfIn.next());
final String outContig=nameConverter.apply(ctx.getContig());
if (outContig == null) {
  unmatchedcontigs.add(ctx.getContig());
  continue;
}
final VariantContextBuilder vcb=new VariantContextBuilder(ctx);
CloseableIterator<VariantContext> iter=this.indexedVcfFileReader.query(outContig,Math.max(0,ctx.getStart() - 1),(ctx.getEnd() + 1));
while (iter.hasNext()) {
  final VariantContext ctx2=iter.next();
  if (!outContig.equals(ctx2.getContig()))   continue;
  if (ctx.getStart() != ctx2.getStart())   continue;
  if (!ctx.getReference().equals(ctx2.getReference()))   continue;
  final boolean okAllele;
switch (altAlleleMatcher) {
case all:
{
      okAllele=ctx.getAlternateAlleles().stream().filter(A -> ctx2.hasAlternateAllele(A)).count() == ctx.getAlternateAlleles().size();
      break;
    }
case at_least_one:
{
    okAllele=ctx.getAlternateAlleles().stream().filter(A -> ctx2.hasAlternateAllele(A)).findAny().isPresent();
    break;
  }
case none:
okAllele=true;
break;
default :
throw new IllegalStateException(altAlleleMatcher.name());
}
if (!okAllele) continue;
if (this.peekId && ctx2.hasID()) {
vcb.id(ctx2.getID());
}
boolean somethingWasChanged=false;
for (final String key : databaseTags.keySet()) {
if (!ctx2.hasAttribute(key)) continue;
final VCFInfoHeaderLine dbHeader=databaseTags.get(key);
switch (dbHeader.getCountType()) {
case A:
{
final List<Object> newatt=new ArrayList<>();
final List<Object> ctx2att=ctx2.getAttributeAsList(key);
for (int i=0; i < ctx.getAlternateAlleles().size(); ++i) {
final Allele ctxalt=ctx.getAlternateAllele(i);
int index2=ctx2.getAlleleIndex(ctxalt);
if (index2 == -1 || index2 >= ctx2att.size()) {
  newatt.add(null);
}
 else {
  newatt.add(ctx2att.get(index2));
}
}
if (newatt.stream().filter(Obj -> !(Obj == null || VCFConstants.EMPTY_INFO_FIELD.equals(Obj))).count() > 0) {
vcb.attribute(this.peekTagPrefix + key,newatt);
somethingWasChanged=true;
}
break;
}
case R:
{
final List<Object> newatt=new ArrayList<>();
final List<Object> ctx2att=ctx2.getAttributeAsList(key);
for (int i=0; i < ctx.getAlleles().size(); ++i) {
final Allele ctxalt=ctx.getAlleles().get(i);
int index2=ctx2.getAlleleIndex(ctxalt);
if (index2 == -1 || index2 >= ctx2att.size()) {
newatt.add(null);
}
 else {
newatt.add(ctx2att.get(index2));
}
}
if (newatt.stream().filter(Obj -> !(Obj == null || VCFConstants.EMPTY_INFO_FIELD.equals(Obj))).count() > 0) {
vcb.attribute(this.peekTagPrefix + key,newatt);
somethingWasChanged=true;
}
break;
}
default :
{
final Object o=ctx2.getAttribute(key);
vcb.attribute(this.peekTagPrefix + key,o);
somethingWasChanged=true;
break;
}
}
}
if (somethingWasChanged) break;
}
iter.close();
iter=null;
out.add(vcb.make());
if (out.checkError()) break;
}
progress.finish();
if (!unmatchedcontigs.isEmpty()) {
LOG.debug(""String_Node_Str"" + unmatchedcontigs.stream().collect(Collectors.joining(""String_Node_Str"")));
}
return 0;
}
 catch (final Exception err) {
LOG.error(err);
return -1;
}
}","/** 
 * public for knime 
 */
@Override public int doVcfToVcf(final String inputName,final VcfIterator vcfIn,final VariantContextWriter out){
  try {
    final Set<String> unmatchedcontigs=new HashSet<>();
    final VCFHeader h=vcfIn.getHeader();
    final VCFHeader h2=new VCFHeader(h);
    super.addMetaData(h2);
    final Map<String,VCFInfoHeaderLine> databaseTags=new HashMap<String,VCFInfoHeaderLine>();
    final VCFHeader databaseHeader=this.indexedVcfFileReader.getFileHeader();
    final ContigNameConverter nameConverter=ContigNameConverter.fromDictionaries(h.getSequenceDictionary(),databaseHeader.getSequenceDictionary()).setOnNotFound(this.onContigNotFound);
    for (    final String key : this.peek_info_tags) {
      VCFInfoHeaderLine hinfo=databaseHeader.getInfoHeaderLine(key);
      if (hinfo == null) {
        final String msg=""String_Node_Str"" + key + ""String_Node_Str""+ this.resourceVcfFile;
        if (this.missingIdIsError) {
          LOG.warn(msg);
          continue;
        }
 else {
          LOG.error(msg);
          return -1;
        }
      }
switch (hinfo.getCountType()) {
case G:
        throw new JvarkitException.UserError(""String_Node_Str"" + hinfo.getID());
default :
      databaseTags.put(hinfo.getID(),hinfo);
    break;
}
hinfo=VCFUtils.renameVCFInfoHeaderLine(hinfo,this.peekTagPrefix + key);
if (h2.getInfoHeaderLine(hinfo.getID()) != null) {
  throw new JvarkitException.UserError(""String_Node_Str"" + this.peekTagPrefix + key+ ""String_Node_Str"");
}
h2.addMetaDataLine(hinfo);
;
}
out.writeHeader(h2);
final SAMSequenceDictionaryProgress progress=new SAMSequenceDictionaryProgress(h);
while (vcfIn.hasNext()) {
final VariantContext ctx=progress.watch(vcfIn.next());
final String outContig=nameConverter.apply(ctx.getContig());
if (outContig == null) {
  unmatchedcontigs.add(ctx.getContig());
  continue;
}
final VariantContextBuilder vcb=new VariantContextBuilder(ctx);
CloseableIterator<VariantContext> iter=this.indexedVcfFileReader.query(outContig,Math.max(0,ctx.getStart() - 1),(ctx.getEnd() + 1));
while (iter.hasNext()) {
  final VariantContext ctx2=iter.next();
  if (!outContig.equals(ctx2.getContig()))   continue;
  if (ctx.getStart() != ctx2.getStart())   continue;
  if (!ctx.getReference().equals(ctx2.getReference()))   continue;
  final boolean okAllele;
switch (altAlleleMatcher) {
case all:
{
      okAllele=ctx.getAlternateAlleles().stream().filter(A -> ctx2.hasAlternateAllele(A)).count() == ctx.getAlternateAlleles().size();
      break;
    }
case at_least_one:
{
    okAllele=ctx.getAlternateAlleles().stream().filter(A -> ctx2.hasAlternateAllele(A)).findAny().isPresent();
    break;
  }
case none:
okAllele=true;
break;
default :
throw new IllegalStateException(altAlleleMatcher.name());
}
if (!okAllele) continue;
if (this.peekId && ctx2.hasID()) {
vcb.id(ctx2.getID());
}
boolean somethingWasChanged=false;
for (final String key : databaseTags.keySet()) {
if (!ctx2.hasAttribute(key)) continue;
final VCFInfoHeaderLine dbHeader=databaseTags.get(key);
switch (dbHeader.getCountType()) {
case A:
{
final List<Object> newatt=new ArrayList<>();
final List<Object> ctx2att=ctx2.getAttributeAsList(key);
for (int i=0; i < ctx.getAlternateAlleles().size(); ++i) {
final Allele ctxalt=ctx.getAlternateAllele(i);
int index2=ctx2.getAlternateAlleles().indexOf(ctxalt);
if (index2 == -1 || index2 >= ctx2att.size()) {
  newatt.add(null);
}
 else {
  newatt.add(ctx2att.get(index2));
}
}
if (newatt.stream().filter(Obj -> !(Obj == null || VCFConstants.EMPTY_INFO_FIELD.equals(Obj))).count() > 0) {
vcb.attribute(this.peekTagPrefix + key,newatt);
somethingWasChanged=true;
}
break;
}
case R:
{
final List<Object> newatt=new ArrayList<>();
final List<Object> ctx2att=ctx2.getAttributeAsList(key);
for (int i=0; i < ctx.getAlleles().size(); ++i) {
final Allele ctxalt=ctx.getAlleles().get(i);
int index2=ctx2.getAlleleIndex(ctxalt);
if (index2 == -1 || index2 >= ctx2att.size()) {
newatt.add(null);
}
 else {
newatt.add(ctx2att.get(index2));
}
}
if (newatt.stream().filter(Obj -> !(Obj == null || VCFConstants.EMPTY_INFO_FIELD.equals(Obj))).count() > 0) {
vcb.attribute(this.peekTagPrefix + key,newatt);
somethingWasChanged=true;
}
break;
}
default :
{
final Object o=ctx2.getAttribute(key);
vcb.attribute(this.peekTagPrefix + key,o);
somethingWasChanged=true;
break;
}
}
}
if (somethingWasChanged) break;
}
iter.close();
iter=null;
out.add(vcb.make());
if (out.checkError()) break;
}
progress.finish();
if (!unmatchedcontigs.isEmpty()) {
LOG.debug(""String_Node_Str"" + unmatchedcontigs.stream().collect(Collectors.joining(""String_Node_Str"")));
}
return 0;
}
 catch (final Exception err) {
LOG.error(err);
return -1;
}
}",0.9964686998394864
161278,"private void build(){
  final Function<SAMRecord,Color> samRecord2color=new ColorUtils.SAMRecordColorExtractor();
  final Function<Character,Color> base2color=C -> {
switch (Character.toUpperCase(C)) {
case 'N':
      return Color.BLACK;
case 'A':
    return Color.RED;
case 'T':
  return Color.GREEN;
case 'G':
return Color.YELLOW;
case 'C':
return Color.BLUE;
default :
return Color.ORANGE;
}
}
;
final Predicate<Integer> inInterval=refPos -> !(refPos < Bam2Raster.this.interval.getStart() || refPos > Bam2Raster.this.interval.getEnd());
String positionFormat=""String_Node_Str"";
final int refw=(int)Math.max(1.0,WIDTH / (double)(1 + interval.getEnd() - interval.getStart()));
final int ruler_height=String.format(positionFormat,Bam2Raster.this.interval.getEnd()).length() * refw;
final Dimension imageSize=new Dimension(WIDTH,refw + Bam2Raster.this.spaceYbetweenFeatures + ruler_height+ Bam2Raster.this.spaceYbetweenFeatures+ refw+ Bam2Raster.this.spaceYbetweenFeatures+ refw+ Bam2Raster.this.spaceYbetweenFeatures+ (Math.max(0,Bam2Raster.this.depthSize))+ (Bam2Raster.this.depthSize > 0 ? Bam2Raster.this.spaceYbetweenFeatures : 0)+ (Bam2Raster.this.maxNumberOfRows < 0 ? this.rows.size() : Math.min(this.rows.size(),Bam2Raster.this.maxNumberOfRows)) * (Bam2Raster.this.spaceYbetweenFeatures + refw) + Bam2Raster.this.spaceYbetweenFeatures);
this.image=new BufferedImage(imageSize.width,imageSize.height,BufferedImage.TYPE_INT_RGB);
final CharSequence genomicSequence;
if (Bam2Raster.this.indexedFastaSequenceFile != null) {
genomicSequence=new GenomicSequence(Bam2Raster.this.indexedFastaSequenceFile,Bam2Raster.this.interval.getContig());
}
 else {
genomicSequence=new AbstractCharSequence(){
@Override public int length(){
return interval.getEnd() + 10;
}
@Override public char charAt(int index){
return 'N';
}
}
;
}
final Graphics2D g=this.image.createGraphics();
g.setRenderingHint(RenderingHints.KEY_RENDERING,RenderingHints.VALUE_COLOR_RENDER_QUALITY);
g.setColor(Color.WHITE);
g.fillRect(0,0,imageSize.width,imageSize.height);
LOG.info(""String_Node_Str"" + imageSize.width + ""String_Node_Str""+ imageSize.height);
Map<Integer,Counter<Character>> ref2consensus=new HashMap<Integer,Counter<Character>>();
for (final Integer refpos : Bam2Raster.this.highlightPositions) {
g.setColor(new Color(255,235,246));
g.fill(new Rectangle2D.Double(convertToX(refpos),0,refw,this.image.getHeight()));
}
int y=0;
{
String title=interval.getContig() + ""String_Node_Str"" + this.key;
g.setColor(Color.BLACK);
hersheyFont.paint(g,title,new Rectangle2D.Double(1,1,title.length() * refw,refw));
y+=refw + Bam2Raster.this.spaceYbetweenFeatures;
}
for (int x=Bam2Raster.this.interval.getStart(); x <= Bam2Raster.this.interval.getEnd(); ++x) {
final double oneBaseWidth=convertToX(x + 1) - convertToX(x);
g.setColor(x % 10 == 0 ? Color.BLACK : Color.LIGHT_GRAY);
g.draw(new Line2D.Double(convertToX(x),0,convertToX(x),imageSize.height));
if ((x - Bam2Raster.this.interval.getStart()) % 10 == 0) {
g.setColor(Color.BLACK);
final String xStr=String.format(positionFormat,x);
final AffineTransform tr=g.getTransform();
final AffineTransform tr2=new AffineTransform(tr);
tr2.translate(convertToX(x + 1),y);
tr2.rotate(Math.PI / 2.0);
g.setTransform(tr2);
hersheyFont.paint(g,xStr,0,0,ruler_height,oneBaseWidth);
g.setTransform(tr);
}
}
y+=ruler_height + Bam2Raster.this.spaceYbetweenFeatures;
for (int x=Bam2Raster.this.interval.getStart(); x <= Bam2Raster.this.interval.getEnd(); ++x) {
final double oneBaseWidth=convertToX(x + 1) - convertToX(x);
final char c=x < 1 || x > genomicSequence.length() ? 'N' : genomicSequence.charAt(x - 1);
g.setColor(base2color.apply(c));
Bam2Raster.this.hersheyFont.paint(g,String.valueOf(c),convertToX(x) + 1,y,oneBaseWidth - 2,oneBaseWidth - 2);
}
y+=refw + Bam2Raster.this.spaceYbetweenFeatures;
final int consensus_y=y;
y+=refw + Bam2Raster.this.spaceYbetweenFeatures;
final int depth_y=y;
final int depth_array[]=new int[1 + (interval.getEnd() - interval.getStart())];
if (depthSize > 0) {
Arrays.fill(depth_array,0);
y+=depthSize + Bam2Raster.this.spaceYbetweenFeatures;
}
for (int rowIndex=0; rowIndex < rows.size(); ++rowIndex) {
final List<SAMRecord> row=rows.get(rowIndex);
boolean printThisRow=(Bam2Raster.this.maxNumberOfRows < 0 || rowIndex < Bam2Raster.this.maxNumberOfRows);
for (final SAMRecord rec : row) {
final Set<Integer> refposOfInsertions=new HashSet<>();
double x0=left2pixel(rec);
double x1=right2pixel(rec);
double y0=y;
double y1=y0 + refw;
Shape shapeRec=null;
if (x1 - x0 < Bam2Raster.this.minArrowWidth) {
shapeRec=new Rectangle2D.Double(x0,y0,x1 - x0,y1 - y0);
}
 else {
final GeneralPath path=new GeneralPath();
double arrow=Math.max(Bam2Raster.this.minArrowWidth,Math.min(Bam2Raster.this.maxArrowWidth,x1 - x0));
if (!rec.getReadNegativeStrandFlag()) {
path.moveTo(x0,y0);
path.lineTo(x1 - arrow,y0);
path.lineTo(x1,(y0 + y1) / 2);
path.lineTo(x1 - arrow,y1);
path.lineTo(x0,y1);
}
 else {
path.moveTo(x0 + arrow,y0);
path.lineTo(x0,(y0 + y1) / 2);
path.lineTo(x0 + arrow,y1);
path.lineTo(x1,y1);
path.lineTo(x1,y0);
}
path.closePath();
shapeRec=path;
}
if (printThisRow) {
Color ycColor=samRecord2color.apply(rec);
final Stroke oldStroke=g.getStroke();
g.setStroke(new BasicStroke(2f));
if (noReadGradient) {
if (ycColor == null) ycColor=new Color(255,222,173);
g.setColor(ycColor);
g.fill(shapeRec);
}
 else {
if (ycColor == null) ycColor=Color.DARK_GRAY;
final Paint oldpaint=g.getPaint();
final LinearGradientPaint gradient=new LinearGradientPaint(0f,(float)shapeRec.getBounds2D().getY(),0f,(float)shapeRec.getBounds2D().getMaxY(),new float[]{0f,0.5f,1f},new Color[]{ycColor,Color.WHITE,ycColor});
g.setPaint(gradient);
g.fill(shapeRec);
g.setPaint(oldpaint);
}
g.setColor(Bam2Raster.this.strokeColorizer.getColor(rec));
g.draw(shapeRec);
g.setStroke(oldStroke);
}
final Shape oldClip=g.getClip();
g.setClip(shapeRec);
final Cigar cigar=rec.getCigar();
if (cigar != null) {
final Function<Integer,Character> readBaseAt=IDX -> {
final byte bases[]=rec.getReadBases();
if (SAMRecord.NULL_SEQUENCE.equals(bases)) return 'N';
if (IDX < 0 || IDX >= bases.length) return 'N';
return (char)bases[IDX];
}
;
final Function<Integer,Character> readNameAt=readpos -> {
char c1;
if (readpos < rec.getReadName().length()) {
c1=rec.getReadName().charAt(readpos);
c1=rec.getReadNegativeStrandFlag() ? Character.toLowerCase(c1) : Character.toUpperCase(c1);
}
 else {
c1=' ';
}
return c1;
}
;
int refpos=rec.getUnclippedStart();
int readpos=0;
for (final CigarElement ce : cigar.getCigarElements()) {
switch (ce.getOperator()) {
case S:
case H:
{
  if (Bam2Raster.this.showClip) {
    g.setColor(Color.PINK);
    if (printThisRow)     g.fill(new Rectangle2D.Double(convertToX(refpos),y0,convertToX(refpos + ce.getLength()) - convertToX(refpos),y1 - y0));
    if (ce.getOperator().equals(CigarOperator.S)) {
      final double mutW=convertToX(refpos + 1) - convertToX(refpos);
      for (int i=0; i < ce.getLength(); ++i) {
        if (!inInterval.test(refpos + i))         continue;
        char c1=readBaseAt.apply(readpos + i);
        g.setColor(base2color.apply(c1));
        final Shape mut=new Rectangle2D.Double(convertToX(refpos + i),y0,mutW,y1 - y0);
        if (Bam2Raster.this.printName)         c1=readNameAt.apply(readpos + i);
        if (printThisRow)         Bam2Raster.this.hersheyFont.paint(g,String.valueOf(c1),mut);
      }
    }
  }
  refpos+=ce.getLength();
  if (ce.getOperator().equals(CigarOperator.S))   readpos+=ce.getLength();
  break;
}
case I:
{
refposOfInsertions.add(refpos);
readpos+=ce.getLength();
break;
}
case P:
break;
case D:
case N:
{
g.setColor(Color.ORANGE);
if (printThisRow) g.fill(new Rectangle2D.Double(convertToX(refpos),y0,convertToX(refpos + ce.getLength()) - convertToX(refpos),y1 - y0));
refpos+=ce.getLength();
break;
}
case EQ:
case X:
case M:
{
for (int i=0; i < ce.getLength(); ++i) {
boolean drawbase=!Bam2Raster.this.hideBases;
char c1=readBaseAt.apply(readpos);
Counter<Character> consensus=ref2consensus.get(refpos);
if (consensus == null) {
consensus=new Counter<Character>();
ref2consensus.put(refpos,consensus);
}
consensus.incr(Character.toUpperCase(c1));
char c2=genomicSequence.charAt(refpos - 1);
double mutW=convertToX(refpos + 1) - convertToX(refpos);
g.setColor(Color.BLACK);
final Shape mut=new Rectangle2D.Double(convertToX(refpos),y0,mutW,y1 - y0);
if (ce.getOperator() == CigarOperator.X || (c2 != 'N' && c2 != 'n' && Character.toUpperCase(c1) != Character.toUpperCase(c2))) {
drawbase=true;
g.setColor(Color.RED);
if (printThisRow) g.fill(mut);
g.setColor(Color.WHITE);
}
 else {
g.setColor(base2color.apply(c1));
}
if (Bam2Raster.this.printName) {
drawbase=true;
c1=readNameAt.apply(readpos);
}
if (!inInterval.test(refpos)) {
drawbase=false;
}
if (!printThisRow) {
drawbase=false;
}
if (drawbase) {
Bam2Raster.this.hersheyFont.paint(g,String.valueOf(c1),mut);
}
if (inInterval.test(refpos)) {
depth_array[refpos - Bam2Raster.this.interval.getStart()]++;
}
readpos++;
refpos++;
}
break;
}
default :
LOG.error(""String_Node_Str"" + ce.getOperator());
break;
}
}
}
for (final Integer refpos : refposOfInsertions) {
g.setColor(Color.GREEN);
if (printThisRow) g.fill(new Rectangle2D.Double(convertToX(refpos),y0,2,y1 - y0));
}
g.setClip(oldClip);
}
if (printThisRow) {
y+=refw + Bam2Raster.this.spaceYbetweenFeatures;
}
}
for (int x=Bam2Raster.this.interval.getStart(); x <= Bam2Raster.this.interval.getEnd(); ++x) {
Counter<Character> cons=ref2consensus.get(x);
if (cons == null || cons.getCountCategories() == 0) {
continue;
}
final double oneBaseWidth=(convertToX(x + 1) - convertToX(x)) - 1;
double x0=convertToX(x) + 1;
for (final Character c : cons.keySetDecreasing()) {
double weight=oneBaseWidth * (cons.count(c) / (double)cons.getTotal());
g.setColor(Color.BLACK);
if (genomicSequence != null && Character.toUpperCase(genomicSequence.charAt(x - 1)) != Character.toUpperCase(c)) {
g.setColor(Color.RED);
}
hersheyFont.paint(g,String.valueOf(c),x0,consensus_y,weight,oneBaseWidth - 2);
x0+=weight;
}
}
if (Bam2Raster.this.depthSize > 0) {
double minDepth=Arrays.stream(depth_array).min().orElse(0);
double maxDepth=Arrays.stream(depth_array).max().orElse(1);
if (minDepth == maxDepth) minDepth--;
for (int i=0; i < depth_array.length; ++i) {
final double d=depth_array[i];
final double h=((d - minDepth) / (maxDepth - minDepth)) * Bam2Raster.this.depthSize;
final Rectangle2D.Double rd=new Rectangle2D.Double();
rd.x=convertToX(interval.getStart() + i);
rd.y=depth_y + Bam2Raster.this.depthSize - h;
rd.width=refw;
rd.height=h;
g.setColor(d < 10 ? Color.RED : (d < 50 ? Color.BLUE : Color.GREEN));
g.fill(rd);
g.setColor(Color.BLACK);
g.draw(rd);
}
final String label=""String_Node_Str"" + (int)minDepth + ""String_Node_Str""+ (int)maxDepth+ ""String_Node_Str"";
for (int x=0; x < 2; ++x) {
g.setColor(x == 0 ? Color.WHITE : Color.BLACK);
hersheyFont.paint(g,label,new Rectangle2D.Double(1 + x,depth_y + x + Bam2Raster.this.depthSize - refw,label.length() * refw,refw));
}
}
for (final Integer refpos : Bam2Raster.this.highlightPositions) {
g.setColor(Color.RED);
g.draw(new Rectangle2D.Double(convertToX(refpos),0,refw,this.image.getHeight()));
}
g.dispose();
}","private void build(){
  final Function<SAMRecord,Color> samRecord2color=new ColorUtils.SAMRecordColorExtractor();
  final Function<Character,Color> base2color=C -> {
switch (Character.toUpperCase(C)) {
case 'N':
      return Color.BLACK;
case 'A':
    return Color.RED;
case 'T':
  return Color.GREEN;
case 'G':
return Color.YELLOW;
case 'C':
return Color.BLUE;
default :
return Color.ORANGE;
}
}
;
final Predicate<Integer> inInterval=refPos -> !(refPos < Bam2Raster.this.interval.getStart() || refPos > Bam2Raster.this.interval.getEnd());
String positionFormat=""String_Node_Str"";
final int refw=(int)Math.max(1.0,WIDTH / (double)(1 + interval.getEnd() - interval.getStart()));
final int ruler_height=String.format(positionFormat,Bam2Raster.this.interval.getEnd()).length() * refw;
final Dimension imageSize=new Dimension(WIDTH,refw + Bam2Raster.this.spaceYbetweenFeatures + ruler_height+ Bam2Raster.this.spaceYbetweenFeatures+ refw+ Bam2Raster.this.spaceYbetweenFeatures+ refw+ Bam2Raster.this.spaceYbetweenFeatures+ (Math.max(0,Bam2Raster.this.depthSize))+ (Bam2Raster.this.depthSize > 0 ? Bam2Raster.this.spaceYbetweenFeatures : 0)+ (Bam2Raster.this.maxNumberOfRows < 0 ? this.rows.size() : Math.min(this.rows.size(),Bam2Raster.this.maxNumberOfRows)) * (Bam2Raster.this.spaceYbetweenFeatures + refw) + Bam2Raster.this.spaceYbetweenFeatures);
this.image=new BufferedImage(imageSize.width,imageSize.height,BufferedImage.TYPE_INT_RGB);
final CharSequence genomicSequence;
if (Bam2Raster.this.indexedFastaSequenceFile != null) {
genomicSequence=new GenomicSequence(Bam2Raster.this.indexedFastaSequenceFile,Bam2Raster.this.interval.getContig());
}
 else {
genomicSequence=new AbstractCharSequence(){
@Override public int length(){
return interval.getEnd() + 10;
}
@Override public char charAt(int index){
return 'N';
}
}
;
}
final Graphics2D g=this.image.createGraphics();
g.setColor(Color.WHITE);
g.fillRect(0,0,imageSize.width,imageSize.height);
LOG.info(""String_Node_Str"" + imageSize.width + ""String_Node_Str""+ imageSize.height);
Map<Integer,Counter<Character>> ref2consensus=new HashMap<Integer,Counter<Character>>();
for (final Integer refpos : Bam2Raster.this.highlightPositions) {
g.setColor(new Color(255,235,246));
g.fill(new Rectangle2D.Double(convertToX(refpos),0,refw,this.image.getHeight()));
}
int y=0;
{
String title=interval.getContig() + ""String_Node_Str"" + this.key;
g.setColor(Color.BLACK);
hersheyFont.paint(g,title,new Rectangle2D.Double(1,1,title.length() * refw,refw));
y+=refw + Bam2Raster.this.spaceYbetweenFeatures;
}
for (int x=Bam2Raster.this.interval.getStart(); x <= Bam2Raster.this.interval.getEnd(); ++x) {
final double oneBaseWidth=convertToX(x + 1) - convertToX(x);
g.setColor(x % 10 == 0 ? Color.BLACK : Color.LIGHT_GRAY);
g.draw(new Line2D.Double(convertToX(x),0,convertToX(x),imageSize.height));
if ((x - Bam2Raster.this.interval.getStart()) % 10 == 0) {
g.setColor(Color.BLACK);
final String xStr=String.format(positionFormat,x);
final AffineTransform tr=g.getTransform();
final AffineTransform tr2=new AffineTransform(tr);
tr2.translate(convertToX(x + 1),y);
tr2.rotate(Math.PI / 2.0);
g.setTransform(tr2);
hersheyFont.paint(g,xStr,0,0,ruler_height,oneBaseWidth);
g.setTransform(tr);
}
}
y+=ruler_height + Bam2Raster.this.spaceYbetweenFeatures;
for (int x=Bam2Raster.this.interval.getStart(); x <= Bam2Raster.this.interval.getEnd(); ++x) {
final double oneBaseWidth=convertToX(x + 1) - convertToX(x);
final char c=x < 1 || x > genomicSequence.length() ? 'N' : genomicSequence.charAt(x - 1);
g.setColor(base2color.apply(c));
Bam2Raster.this.hersheyFont.paint(g,String.valueOf(c),convertToX(x) + 1,y,oneBaseWidth - 2,oneBaseWidth - 2);
}
y+=refw + Bam2Raster.this.spaceYbetweenFeatures;
final int consensus_y=y;
y+=refw + Bam2Raster.this.spaceYbetweenFeatures;
final int depth_y=y;
final int depth_array[]=new int[1 + (interval.getEnd() - interval.getStart())];
if (depthSize > 0) {
Arrays.fill(depth_array,0);
y+=depthSize + Bam2Raster.this.spaceYbetweenFeatures;
}
for (int rowIndex=0; rowIndex < rows.size(); ++rowIndex) {
final List<SAMRecord> row=rows.get(rowIndex);
boolean printThisRow=(Bam2Raster.this.maxNumberOfRows < 0 || rowIndex < Bam2Raster.this.maxNumberOfRows);
for (final SAMRecord rec : row) {
final Set<Integer> refposOfInsertions=new HashSet<>();
double x0=left2pixel(rec);
double x1=right2pixel(rec);
double y0=y;
double y1=y0 + refw;
Shape shapeRec=null;
if (x1 - x0 < Bam2Raster.this.minArrowWidth) {
shapeRec=new Rectangle2D.Double(x0,y0,x1 - x0,y1 - y0);
}
 else {
final GeneralPath path=new GeneralPath();
double arrow=Math.max(Bam2Raster.this.minArrowWidth,Math.min(Bam2Raster.this.maxArrowWidth,x1 - x0));
if (!rec.getReadNegativeStrandFlag()) {
path.moveTo(x0,y0);
path.lineTo(x1 - arrow,y0);
path.lineTo(x1,(y0 + y1) / 2);
path.lineTo(x1 - arrow,y1);
path.lineTo(x0,y1);
}
 else {
path.moveTo(x0 + arrow,y0);
path.lineTo(x0,(y0 + y1) / 2);
path.lineTo(x0 + arrow,y1);
path.lineTo(x1,y1);
path.lineTo(x1,y0);
}
path.closePath();
shapeRec=path;
}
if (printThisRow) {
Color ycColor=samRecord2color.apply(rec);
final Stroke oldStroke=g.getStroke();
g.setStroke(new BasicStroke(2f));
if (noReadGradient) {
if (ycColor == null) ycColor=new Color(255,222,173);
g.setColor(ycColor);
g.fill(shapeRec);
}
 else {
if (ycColor == null) ycColor=Color.DARK_GRAY;
final Paint oldpaint=g.getPaint();
final LinearGradientPaint gradient=new LinearGradientPaint(0f,(float)shapeRec.getBounds2D().getY(),0f,(float)shapeRec.getBounds2D().getMaxY(),new float[]{0f,0.5f,1f},new Color[]{ycColor,Color.WHITE,ycColor});
g.setPaint(gradient);
g.fill(shapeRec);
g.setPaint(oldpaint);
}
g.setColor(Bam2Raster.this.strokeColorizer.getColor(rec));
g.draw(shapeRec);
g.setStroke(oldStroke);
}
final Shape oldClip=g.getClip();
g.setClip(shapeRec);
final Cigar cigar=rec.getCigar();
if (cigar != null) {
final Function<Integer,Character> readBaseAt=IDX -> {
final byte bases[]=rec.getReadBases();
if (SAMRecord.NULL_SEQUENCE.equals(bases)) return 'N';
if (IDX < 0 || IDX >= bases.length) return 'N';
return (char)bases[IDX];
}
;
final Function<Integer,Character> readNameAt=readpos -> {
char c1;
if (readpos < rec.getReadName().length()) {
c1=rec.getReadName().charAt(readpos);
c1=rec.getReadNegativeStrandFlag() ? Character.toLowerCase(c1) : Character.toUpperCase(c1);
}
 else {
c1=' ';
}
return c1;
}
;
int refpos=rec.getUnclippedStart();
int readpos=0;
for (final CigarElement ce : cigar.getCigarElements()) {
switch (ce.getOperator()) {
case S:
case H:
{
  if (Bam2Raster.this.showClip) {
    g.setColor(Color.PINK);
    if (printThisRow)     g.fill(new Rectangle2D.Double(convertToX(refpos),y0,convertToX(refpos + ce.getLength()) - convertToX(refpos),y1 - y0));
    if (ce.getOperator().equals(CigarOperator.S)) {
      final double mutW=convertToX(refpos + 1) - convertToX(refpos);
      for (int i=0; i < ce.getLength(); ++i) {
        if (!inInterval.test(refpos + i))         continue;
        char c1=readBaseAt.apply(readpos + i);
        g.setColor(base2color.apply(c1));
        final Shape mut=new Rectangle2D.Double(convertToX(refpos + i),y0,mutW,y1 - y0);
        if (Bam2Raster.this.printName)         c1=readNameAt.apply(readpos + i);
        if (printThisRow)         Bam2Raster.this.hersheyFont.paint(g,String.valueOf(c1),mut);
      }
    }
  }
  refpos+=ce.getLength();
  if (ce.getOperator().equals(CigarOperator.S))   readpos+=ce.getLength();
  break;
}
case I:
{
refposOfInsertions.add(refpos);
readpos+=ce.getLength();
break;
}
case P:
break;
case D:
case N:
{
g.setColor(Color.ORANGE);
if (printThisRow) g.fill(new Rectangle2D.Double(convertToX(refpos),y0,convertToX(refpos + ce.getLength()) - convertToX(refpos),y1 - y0));
refpos+=ce.getLength();
break;
}
case EQ:
case X:
case M:
{
for (int i=0; i < ce.getLength(); ++i) {
boolean drawbase=!Bam2Raster.this.hideBases;
char c1=readBaseAt.apply(readpos);
Counter<Character> consensus=ref2consensus.get(refpos);
if (consensus == null) {
consensus=new Counter<Character>();
ref2consensus.put(refpos,consensus);
}
consensus.incr(Character.toUpperCase(c1));
char c2=genomicSequence.charAt(refpos - 1);
double mutW=convertToX(refpos + 1) - convertToX(refpos);
g.setColor(Color.BLACK);
final Shape mut=new Rectangle2D.Double(convertToX(refpos),y0,mutW,y1 - y0);
if (ce.getOperator() == CigarOperator.X || (c2 != 'N' && c2 != 'n' && Character.toUpperCase(c1) != Character.toUpperCase(c2))) {
drawbase=true;
g.setColor(Color.RED);
if (printThisRow) g.fill(mut);
g.setColor(Color.WHITE);
}
 else {
g.setColor(base2color.apply(c1));
}
if (Bam2Raster.this.printName) {
drawbase=true;
c1=readNameAt.apply(readpos);
}
if (!inInterval.test(refpos)) {
drawbase=false;
}
if (!printThisRow) {
drawbase=false;
}
if (drawbase) {
Bam2Raster.this.hersheyFont.paint(g,String.valueOf(c1),mut);
}
if (inInterval.test(refpos)) {
depth_array[refpos - Bam2Raster.this.interval.getStart()]++;
}
readpos++;
refpos++;
}
break;
}
default :
LOG.error(""String_Node_Str"" + ce.getOperator());
break;
}
}
}
for (final Integer refpos : refposOfInsertions) {
g.setColor(Color.GREEN);
if (printThisRow) g.fill(new Rectangle2D.Double(convertToX(refpos),y0,2,y1 - y0));
}
g.setClip(oldClip);
}
if (printThisRow) {
y+=refw + Bam2Raster.this.spaceYbetweenFeatures;
}
}
for (int x=Bam2Raster.this.interval.getStart(); x <= Bam2Raster.this.interval.getEnd(); ++x) {
Counter<Character> cons=ref2consensus.get(x);
if (cons == null || cons.getCountCategories() == 0) {
continue;
}
final double oneBaseWidth=(convertToX(x + 1) - convertToX(x)) - 1;
double x0=convertToX(x) + 1;
for (final Character c : cons.keySetDecreasing()) {
double weight=oneBaseWidth * (cons.count(c) / (double)cons.getTotal());
g.setColor(Color.BLACK);
if (genomicSequence != null && Character.toUpperCase(genomicSequence.charAt(x - 1)) != Character.toUpperCase(c)) {
g.setColor(Color.RED);
}
hersheyFont.paint(g,String.valueOf(c),x0,consensus_y,weight,oneBaseWidth - 2);
x0+=weight;
}
}
if (Bam2Raster.this.depthSize > 0) {
double minDepth=Arrays.stream(depth_array).min().orElse(0);
double maxDepth=Arrays.stream(depth_array).max().orElse(1);
if (minDepth == maxDepth) minDepth--;
for (int i=0; i < depth_array.length; ++i) {
final double d=depth_array[i];
final double h=((d - minDepth) / (maxDepth - minDepth)) * Bam2Raster.this.depthSize;
final Rectangle2D.Double rd=new Rectangle2D.Double();
rd.x=convertToX(interval.getStart() + i);
rd.y=depth_y + Bam2Raster.this.depthSize - h;
rd.width=refw;
rd.height=h;
g.setColor(d < 10 ? Color.RED : (d < 50 ? Color.BLUE : Color.GREEN));
g.fill(rd);
g.setColor(Color.BLACK);
g.draw(rd);
}
final String label=""String_Node_Str"" + (int)minDepth + ""String_Node_Str""+ (int)maxDepth+ ""String_Node_Str"";
for (int x=0; x < 2; ++x) {
g.setColor(x == 0 ? Color.WHITE : Color.BLACK);
hersheyFont.paint(g,label,new Rectangle2D.Double(1 + x,depth_y + x + Bam2Raster.this.depthSize - refw,label.length() * refw,refw));
}
}
for (final Integer refpos : Bam2Raster.this.highlightPositions) {
g.setColor(Color.RED);
g.draw(new Rectangle2D.Double(convertToX(refpos),0,refw,this.image.getHeight()));
}
g.dispose();
}",0.995863309352518
161279,"@Override public int doWork(final List<String> args){
  if (this.regionStr == null) {
    LOG.error(""String_Node_Str"");
    return -1;
  }
  if (this.WIDTH < 100) {
    LOG.info(""String_Node_Str"");
    this.WIDTH=100;
  }
  SamReader samFileReader=null;
  try {
    final SamReaderFactory srf=super.createSamReaderFactory();
    if (this.referenceFile != null) {
      LOG.info(""String_Node_Str"");
      this.indexedFastaSequenceFile=new IndexedFastaSequenceFile(this.referenceFile);
      srf.referenceSequence(this.referenceFile);
    }
    final IntervalParser intervalParser=new IntervalParser(this.indexedFastaSequenceFile.getSequenceDictionary()).setFixContigName(true);
    this.interval=intervalParser.parse(this.regionStr);
    if (this.interval == null) {
      LOG.error(""String_Node_Str"" + regionStr + ""String_Node_Str"");
      return -1;
    }
    LOG.info(""String_Node_Str"" + this.interval);
    for (    final String vcfFile : IOUtils.unrollFiles(variants)) {
      final VCFFileReader vcfFileReader=new VCFFileReader(new File(vcfFile),true);
      final CloseableIterator<VariantContext> r=vcfFileReader.query(this.interval.getContig(),this.interval.getStart(),this.interval.getEnd());
      while (r.hasNext()) {
        this.highlightPositions.add(r.next().getStart());
      }
      r.close();
      vcfFileReader.close();
    }
    for (    final String bamFile : IOUtils.unrollFiles(args)) {
      samFileReader=srf.open(SamInputResource.of(bamFile));
      final SAMFileHeader header=samFileReader.getFileHeader();
      final SAMSequenceDictionary dict=header.getSequenceDictionary();
      if (dict == null) {
        LOG.error(""String_Node_Str"" + bamFile);
        return -1;
      }
      if (dict.getSequence(this.interval.getContig()) == null) {
        LOG.error(""String_Node_Str"" + bamFile + ""String_Node_Str""+ this.interval);
        return -1;
      }
      scan(samFileReader);
      samFileReader.close();
      samFileReader=null;
    }
    if (this.key2partition.isEmpty()) {
      LOG.error(""String_Node_Str"");
      return -1;
    }
    this.key2partition.values().stream().forEach(P -> P.build());
    int image_width=this.key2partition.values().stream().mapToInt(P -> P.image.getWidth()).max().getAsInt();
    int image_height=this.key2partition.values().stream().mapToInt(P -> P.image.getHeight()).sum();
    final BufferedImage img=new BufferedImage(image_width,image_height,BufferedImage.TYPE_INT_RGB);
    final Graphics2D g=img.createGraphics();
    g.setRenderingHint(RenderingHints.KEY_RENDERING,RenderingHints.VALUE_COLOR_RENDER_QUALITY);
    int y=0;
    for (    final String key : this.key2partition.keySet()) {
      BufferedImage subImg=this.key2partition.get(key).image;
      g.drawImage(subImg,0,y,null);
      y+=subImg.getHeight();
    }
    g.dispose();
    if (this.outputFile == null) {
      ImageIO.write(img,""String_Node_Str"",stdout());
    }
 else {
      LOG.info(""String_Node_Str"" + this.outputFile);
      final String format=(this.outputFile.getName().toLowerCase().endsWith(""String_Node_Str"") ? ""String_Node_Str"" : ""String_Node_Str"");
      ImageIO.write(img,format,this.outputFile);
    }
    return RETURN_OK;
  }
 catch (  Exception err) {
    LOG.error(err);
    return -1;
  }
 finally {
    CloserUtil.close(indexedFastaSequenceFile);
    CloserUtil.close(samFileReader);
    indexedFastaSequenceFile=null;
  }
}","@Override public int doWork(final List<String> args){
  if (this.regionStr == null) {
    LOG.error(""String_Node_Str"");
    return -1;
  }
  if (this.WIDTH < 100) {
    LOG.info(""String_Node_Str"");
    this.WIDTH=100;
  }
  SamReader samFileReader=null;
  try {
    final SamReaderFactory srf=super.createSamReaderFactory();
    if (this.referenceFile != null) {
      LOG.info(""String_Node_Str"");
      this.indexedFastaSequenceFile=new IndexedFastaSequenceFile(this.referenceFile);
      srf.referenceSequence(this.referenceFile);
    }
    final IntervalParser intervalParser=new IntervalParser(this.indexedFastaSequenceFile == null ? null : this.indexedFastaSequenceFile.getSequenceDictionary()).setFixContigName(true);
    this.interval=intervalParser.parse(this.regionStr);
    if (this.interval == null) {
      LOG.error(""String_Node_Str"" + regionStr + ""String_Node_Str"");
      return -1;
    }
    LOG.info(""String_Node_Str"" + this.interval);
    for (    final String vcfFile : IOUtils.unrollFiles(variants)) {
      final VCFFileReader vcfFileReader=new VCFFileReader(new File(vcfFile),true);
      final CloseableIterator<VariantContext> r=vcfFileReader.query(this.interval.getContig(),this.interval.getStart(),this.interval.getEnd());
      while (r.hasNext()) {
        this.highlightPositions.add(r.next().getStart());
      }
      r.close();
      vcfFileReader.close();
    }
    for (    final String bamFile : IOUtils.unrollFiles(args)) {
      samFileReader=srf.open(SamInputResource.of(bamFile));
      final SAMFileHeader header=samFileReader.getFileHeader();
      final SAMSequenceDictionary dict=header.getSequenceDictionary();
      if (dict == null) {
        LOG.error(""String_Node_Str"" + bamFile);
        return -1;
      }
      if (dict.getSequence(this.interval.getContig()) == null) {
        LOG.error(""String_Node_Str"" + bamFile + ""String_Node_Str""+ this.interval);
        return -1;
      }
      scan(samFileReader);
      samFileReader.close();
      samFileReader=null;
    }
    if (this.key2partition.isEmpty()) {
      LOG.error(""String_Node_Str"");
      return -1;
    }
    this.key2partition.values().stream().forEach(P -> P.build());
    int image_width=this.key2partition.values().stream().mapToInt(P -> P.image.getWidth()).max().getAsInt();
    int image_height=this.key2partition.values().stream().mapToInt(P -> P.image.getHeight()).sum();
    final BufferedImage img=new BufferedImage(image_width,image_height,BufferedImage.TYPE_INT_RGB);
    final Graphics2D g=img.createGraphics();
    int y=0;
    for (    final String key : this.key2partition.keySet()) {
      BufferedImage subImg=this.key2partition.get(key).image;
      g.drawImage(subImg,0,y,null);
      y+=subImg.getHeight();
    }
    g.dispose();
    if (this.outputFile == null) {
      ImageIO.write(img,""String_Node_Str"",stdout());
    }
 else {
      LOG.info(""String_Node_Str"" + this.outputFile);
      final String format=(this.outputFile.getName().toLowerCase().endsWith(""String_Node_Str"") ? ""String_Node_Str"" : ""String_Node_Str"");
      ImageIO.write(img,format,this.outputFile);
    }
    return RETURN_OK;
  }
 catch (  Exception err) {
    LOG.error(err);
    return -1;
  }
 finally {
    CloserUtil.close(indexedFastaSequenceFile);
    CloserUtil.close(samFileReader);
    indexedFastaSequenceFile=null;
  }
}",0.9787423814478964
161280,"public String bwamem(){
  if (getSample().isBamAlreadyProvided())   return ""String_Node_Str"";
  final String inputs[]=new String[2];
  final StringBuilder sb=new StringBuilder().append(this.getSortedFilename()).append(""String_Node_Str"").append(this.get(0).getFilename());
  if (this.fastqs.size() > 1) {
    sb.append(""String_Node_Str"").append(this.get(1).getFilename());
    inputs[0]=this.get(0).getFilename();
    inputs[1]=this.get(1).getFilename();
  }
  sb.append(""String_Node_Str"").append(rulePrefix());
  if (this.fastqs.size() == 1 && this.fastqs.get(0).isBam()) {
    inputs[0]=""String_Node_Str"";
    inputs[1]=""String_Node_Str"";
    sb.append(""String_Node_Str"").append(""String_Node_Str"").append(inputs[0]).append(""String_Node_Str"").append(inputs[1]).append(""String_Node_Str"").append(""String_Node_Str"").append(""String_Node_Str"");
  }
  String fq1;
  String fq2;
  if (isUsingCutadapt()) {
    fq1=""String_Node_Str"";
    fq2=""String_Node_Str"";
    for (int side=0; side < 2; ++side) {
      sb.append(""String_Node_Str"").append(getAttribute(side == 0 ? PROP_CUTADAPT_ADAPTER5 : PROP_CUTADAPT_ADAPTER3)).append(""String_Node_Str"").append(inputs[side]).append(""String_Node_Str"").append(""String_Node_Str"").append(""String_Node_Str"").append(side == 0 ? fq1 : fq2).append(""String_Node_Str"");
    }
  }
 else {
    fq1=inputs[0];
    fq2=inputs[1];
  }
  final Integer laneIndex=getLane();
  final String bwaRef=""String_Node_Str"";
  sb.append(""String_Node_Str"").append(getAttribute(PROP_BWA_MEM_NTHREADS)).append(""String_Node_Str"" + new SimpleDateFormat(""String_Node_Str"").format(new Date()));
  if (getProject().hasCapture()) {
    sb.append(""String_Node_Str"").append(getProject().getCapture().getName()).append(""String_Node_Str"").append(getProject().getCapture().getBedFilename()).append(""String_Node_Str"");
  }
  sb.append(""String_Node_Str"").append(getProject().getName() + ""String_Node_Str"" + getProject().getDescription()+ ""String_Node_Str"").append(""String_Node_Str"" + getSample().getName()).append(laneIndex == null ? ""String_Node_Str"" : ""String_Node_Str"" + laneIndex).append(""String_Node_Str"" + getSample() + ""String_Node_Str""+ getSample()+ ""String_Node_Str""+ bwaRef+ ""String_Node_Str""+ fq1+ ""String_Node_Str""+ fq2+ ""String_Node_Str"").append(""String_Node_Str"").append(getAttribute(PROP_DEFAULT_COMPRESSION_LEVEL)).append(""String_Node_Str"").append(getAttribute(PROP_SAMTOOLS_SORT_NTHREADS)).append(""String_Node_Str"" + getTmpPrefixToken() + getSample().getName()+ ""String_Node_Str""+ getIndex()+ ""String_Node_Str"").append(""String_Node_Str"");
  if (isUsingCutadapt()) {
    sb.append(""String_Node_Str"" + fq1 + ""String_Node_Str""+ fq2);
  }
  if (this.fastqs.size() == 1 && this.fastqs.get(0).isBam()) {
    sb.append(""String_Node_Str"" + inputs[0] + ""String_Node_Str""+ inputs[1]);
  }
  return sb.append(""String_Node_Str"").toString();
}","public String bwamem(){
  if (getSample().isBamAlreadyProvided())   return ""String_Node_Str"";
  final String inputs[]=new String[2];
  final StringBuilder sb=new StringBuilder().append(this.getSortedFilename()).append(""String_Node_Str"").append(this.get(0).getFilename());
  if (this.fastqs.size() > 1) {
    sb.append(""String_Node_Str"").append(this.get(1).getFilename());
    inputs[0]=this.get(0).getFilename();
    inputs[1]=this.get(1).getFilename();
  }
  sb.append(""String_Node_Str"").append(rulePrefix());
  if (this.fastqs.size() == 1 && this.fastqs.get(0).isBam()) {
    inputs[0]=""String_Node_Str"";
    inputs[1]=""String_Node_Str"";
    sb.append(""String_Node_Str"").append(""String_Node_Str"").append(inputs[0]).append(""String_Node_Str"").append(inputs[1]).append(""String_Node_Str"").append(""String_Node_Str"").append(""String_Node_Str"");
  }
  String fq1;
  String fq2;
  if (isUsingCutadapt()) {
    fq1=""String_Node_Str"";
    fq2=""String_Node_Str"";
    for (int side=0; side < 2; ++side) {
      sb.append(""String_Node_Str"").append(getAttribute(side == 0 ? PROP_CUTADAPT_ADAPTER5 : PROP_CUTADAPT_ADAPTER3)).append(""String_Node_Str"").append(inputs[side]).append(""String_Node_Str"").append(""String_Node_Str"").append(""String_Node_Str"").append(side == 0 ? fq1 : fq2).append(""String_Node_Str"");
    }
  }
 else {
    fq1=inputs[0];
    fq2=inputs[1];
  }
  final Integer laneIndex=getLane();
  final String bwaRef=""String_Node_Str"";
  sb.append(""String_Node_Str"").append(getAttribute(PROP_BWA_MEM_NTHREADS)).append(""String_Node_Str"" + new SimpleDateFormat(""String_Node_Str"").format(new Date()));
  if (getProject().hasCapture()) {
    sb.append(""String_Node_Str"").append(getProject().getCapture().getName()).append(""String_Node_Str"").append(getProject().getCapture().getBedFilename()).append(""String_Node_Str"");
  }
  sb.append(""String_Node_Str"").append(getProject().getName() + ""String_Node_Str"" + getProject().getDescription()+ ""String_Node_Str"").append(""String_Node_Str"" + getSample().getName()).append(laneIndex == null ? ""String_Node_Str"" : ""String_Node_Str"" + laneIndex).append(""String_Node_Str"" + getSample() + ""String_Node_Str""+ getSample()+ ""String_Node_Str""+ bwaRef+ ""String_Node_Str""+ fq1+ ""String_Node_Str""+ fq2+ ""String_Node_Str"");
  if (!getAttribute(PROP_MAPPING_REGION,""String_Node_Str"").isEmpty()) {
    final String rgn=getAttribute(PROP_MAPPING_REGION,""String_Node_Str"");
    sb.append(""String_Node_Str"").append(""String_Node_Str"").append(rgn).append(""String_Node_Str"");
  }
  sb.append(""String_Node_Str"").append(getAttribute(PROP_DEFAULT_COMPRESSION_LEVEL)).append(""String_Node_Str"").append(getAttribute(PROP_SAMTOOLS_SORT_NTHREADS)).append(""String_Node_Str"" + getTmpPrefixToken() + getSample().getName()+ ""String_Node_Str""+ getIndex()+ ""String_Node_Str"").append(""String_Node_Str"");
  if (isUsingCutadapt()) {
    sb.append(""String_Node_Str"" + fq1 + ""String_Node_Str""+ fq2);
  }
  if (this.fastqs.size() == 1 && this.fastqs.get(0).isBam()) {
    sb.append(""String_Node_Str"" + inputs[0] + ""String_Node_Str""+ inputs[1]);
  }
  return sb.append(""String_Node_Str"").toString();
}",0.9571524966261808
161281,"@Override protected VariantContext mapVariant(final VariantContext ctx,final RefMetaDataTracker tracker,final ReferenceContext ref,final AlignmentContext context){
  final Map<String,Object> m=annotator.getAnnotations(ctx);
  if (m == null || m.isEmpty()) {
    return ctx;
  }
 else {
    final VariantContextBuilder vcb=new VariantContextBuilder(ctx);
    for (    final String key : m.keySet()) {
      vcb.attribute(key,m.get(key));
    }
    return vcb.make();
  }
}","@Override protected VariantContext mapVariant(final VariantContext ctx,final RefMetaDataTracker tracker,final ReferenceContext ref,final AlignmentContext context){
  final Map<String,Object> m=this.annotator.getAnnotations(ctx);
  if (m == null || m.isEmpty()) {
    return ctx;
  }
 else {
    final VariantContextBuilder vcb=new VariantContextBuilder(ctx);
    for (    final String key : m.keySet()) {
      vcb.attribute(key,m.get(key));
    }
    return vcb.make();
  }
}",0.9947201689545936
161282,"@Override public Map<String,Object> getAnnotations(final VariantContext ctx){
  if (!ctx.isVariant())   return Collections.emptyMap();
  final int contig=contig2eigen(ctx.getContig());
  if (contig < 1)   return Collections.emptyMap();
  try {
    if (this.codingFeatureReader == null) {
      this.codingFeatureReader=new TabixFeatureReader<>(new File(this.eigenDirectory,getTabixPrefix() + ""String_Node_Str"").getPath(),new CodingFeatureCodec());
    }
    if (this.prev_contig == -1 || prev_contig != contig) {
      CloserUtil.close(this.nonCodingFeatureReader);
      this.nonCodingFeatureReader=new TabixFeatureReader<>(getNonCodingFileForContig(contig).getPath(),new NonCodingFeatureCodec());
      this.prev_contig=contig;
    }
    final Map<Allele,NonCodingFeature> alt2nonCoding=new HashMap<>();
    CloseableTribbleIterator<NonCodingFeature> iter1=this.nonCodingFeatureReader.query(String.valueOf(contig),ctx.getStart(),ctx.getEnd());
    while (iter1.hasNext()) {
      NonCodingFeature feat=iter1.next();
      if (feat == null || !feat.accept(ctx))       continue;
      alt2nonCoding.put(feat.alt,feat);
    }
    iter1.close();
    final Map<Allele,CodingFeature> alt2coding=new HashMap<>();
    CloseableTribbleIterator<CodingFeature> iter2=this.codingFeatureReader.query(String.valueOf(contig),ctx.getStart(),ctx.getEnd());
    while (iter2.hasNext()) {
      CodingFeature feat=iter2.next();
      if (feat == null || !feat.accept(ctx))       continue;
      alt2coding.put(feat.alt,feat);
    }
    iter2.close();
    if (alt2nonCoding.isEmpty() && alt2coding.isEmpty())     return Collections.emptyMap();
    final List<Allele> alternateAlleles=ctx.getAlternateAlleles();
    final Map<String,Object> map=new HashMap<>();
    for (int side=0; side < 2; ++side) {
      for (int i=0; i < (side == 0 ? noncodingheaderlines.size() : codingheaderlines.size()); ++i) {
        final VCFInfoHeaderLine vihl=(side == 0 ? noncodingheaderlines.get(i) : codingheaderlines.get(i));
        final List<Object> atts=new ArrayList<>(alternateAlleles.size());
        boolean found_one=false;
        for (int altn=0; altn < alternateAlleles.size(); ++altn) {
          final Allele alt=alternateAlleles.get(altn);
          final AbstractFeature feat=(side == 0 ? alt2nonCoding.get(alt) : alt2coding.get(alt));
          if (feat == null) {
            atts.add(""String_Node_Str"");
            continue;
          }
          final String token=feat.get(4 + i);
          if (token == null || token.isEmpty() || token.equals(""String_Node_Str"")) {
            atts.add(""String_Node_Str"");
            continue;
          }
 else           if (vihl.getType() == VCFHeaderLineType.String) {
            found_one=true;
            atts.add(token.replace(',','|'));
          }
 else {
            try {
              Float dbl=new Float(token);
              atts.add(dbl);
              found_one=true;
            }
 catch (            NumberFormatException err) {
              throw new IOException(""String_Node_Str"" + token + ""String_Node_Str""+ vihl);
            }
          }
        }
        if (!found_one) {
        }
 else         if (vihl.getCountType() != VCFHeaderLineCount.R) {
          map.put(vihl.getID(),new ArrayList<>(new HashSet<>(atts)));
        }
 else {
          map.put(vihl.getID(),atts);
        }
      }
    }
    return map;
  }
 catch (  final IOException err) {
    throw new RuntimeException(err);
  }
}","@Override public Map<String,Object> getAnnotations(final VariantContext ctx){
  if (!ctx.isVariant())   return Collections.emptyMap();
  final int contig=contig2eigen(ctx.getContig());
  if (contig < 1)   return Collections.emptyMap();
  try {
    if (this.codingFeatureReader == null) {
      this.codingFeatureReader=new TabixFeatureReader<>(new File(this.eigenDirectory,getTabixPrefix() + ""String_Node_Str"").getPath(),new CodingFeatureCodec());
    }
    if (this.prev_contig == -1 || prev_contig != contig) {
      CloserUtil.close(this.nonCodingFeatureReader);
      this.nonCodingFeatureReader=new TabixFeatureReader<>(getNonCodingFileForContig(contig).getPath(),new NonCodingFeatureCodec());
      this.prev_contig=contig;
    }
    final Map<Allele,NonCodingFeature> alt2nonCoding=new HashMap<>();
    CloseableTribbleIterator<NonCodingFeature> iter1=this.nonCodingFeatureReader.query(String.valueOf(contig),ctx.getStart(),ctx.getEnd());
    while (iter1.hasNext()) {
      NonCodingFeature feat=iter1.next();
      if (feat == null || !feat.accept(ctx))       continue;
      alt2nonCoding.put(feat.alt,feat);
    }
    iter1.close();
    final Map<Allele,CodingFeature> alt2coding=new HashMap<>();
    CloseableTribbleIterator<CodingFeature> iter2=this.codingFeatureReader.query(String.valueOf(contig),ctx.getStart(),ctx.getEnd());
    while (iter2.hasNext()) {
      CodingFeature feat=iter2.next();
      if (feat == null || !feat.accept(ctx))       continue;
      alt2coding.put(feat.alt,feat);
    }
    iter2.close();
    if (alt2nonCoding.isEmpty() && alt2coding.isEmpty())     return Collections.emptyMap();
    final List<Allele> alternateAlleles=ctx.getAlternateAlleles();
    final Map<String,Object> map=new HashMap<>();
    for (int side=0; side < 2; ++side) {
      for (int i=0; i < (side == 0 ? noncodingheaderlines.size() : codingheaderlines.size()); ++i) {
        final VCFInfoHeaderLine vihl=(side == 0 ? noncodingheaderlines.get(i) : codingheaderlines.get(i));
        final List<Object> atts=new ArrayList<>(alternateAlleles.size());
        boolean found_one=false;
        for (int altn=0; altn < alternateAlleles.size(); ++altn) {
          final Allele alt=alternateAlleles.get(altn);
          final AbstractFeature feat=(side == 0 ? alt2nonCoding.get(alt) : alt2coding.get(alt));
          if (feat == null) {
            atts.add(""String_Node_Str"");
            continue;
          }
          final String token=feat.get(4 + i);
          if (token == null || token.isEmpty() || token.equals(""String_Node_Str"")) {
            atts.add(""String_Node_Str"");
            continue;
          }
 else           if (vihl.getType() == VCFHeaderLineType.String) {
            found_one=true;
            atts.add(token.replace(',','|'));
          }
 else {
            try {
              Float dbl=new Float(token);
              atts.add(dbl);
              found_one=true;
            }
 catch (            NumberFormatException err) {
              throw new IOException(""String_Node_Str"" + token + ""String_Node_Str""+ vihl);
            }
          }
        }
        if (!found_one) {
        }
 else         if (vihl.getCountType() == VCFHeaderLineCount.R) {
          map.put(vihl.getID(),new ArrayList<>(new LinkedHashSet<>(atts)));
        }
 else {
          if (atts.size() != ctx.getAlternateAlleles().size()) {
            System.err.println(""String_Node_Str"");
          }
          map.put(vihl.getID(),atts);
        }
      }
    }
    return map;
  }
 catch (  final IOException err) {
    throw new RuntimeException(err);
  }
}",0.9806378132118452
161283,protected abstract B getThis();,protected abstract BUILDER getThis();,0.9117647058823528
161284,"protected B shortOpt(final String s){
  this.instance.shortopt=s;
  return getThis();
}","public BUILDER shortOpt(final String s){
  this.get().shortArg=s;
  return getThis();
}",0.8045977011494253
161285,"protected B longOpt(final String s){
  this.instance.longOpt=s;
  return getThis();
}","public BUILDER longOpt(final String s){
  this.get().longArg=s;
  return getThis();
}",0.8
161286,"private TrioGenotype(final Genotype children,final Genotype father,final Genotype mother){
  this.children=children;
  this.father=father;
  this.mother=father;
}","private TrioGenotype(final Genotype children,final Genotype father,final Genotype mother){
  this.children=children;
  this.father=father;
  this.mother=mother;
}",0.9876543209876544
161287,"public boolean isMendelianIncompatibility(){
  if (children == null || children.isNoCall())   return false;
  if (father == null || father.isNoCall()) {
    return this._isMendelianIncompatibility(children,mother);
  }
  if (mother == null || mother.isNoCall()) {
    return this._isMendelianIncompatibility(children,father);
  }
  final Allele alleles[]=new Allele[2];
  for (  final Allele af : father.getAlleles()) {
    alleles[0]=af;
    for (    final Allele am : mother.getAlleles()) {
      alleles[1]=am;
      final Genotype sim=new GenotypeBuilder(children.getSampleName()).alleles(Arrays.asList(alleles)).make();
      if (sim.sameGenotype(sim,true))       return false;
    }
  }
  return true;
}","public boolean isMendelianIncompatibility(){
  if (children == null || children.isNoCall())   return false;
  if (father == null || father.isNoCall()) {
    return this._isMendelianIncompatibility(children,mother);
  }
  if (mother == null || mother.isNoCall()) {
    return this._isMendelianIncompatibility(children,father);
  }
  final Allele alleles[]=new Allele[2];
  for (  final Allele af : father.getAlleles()) {
    alleles[0]=af;
    for (    final Allele am : mother.getAlleles()) {
      alleles[1]=am;
      final Genotype sim=new GenotypeBuilder(children.getSampleName()).alleles(Arrays.asList(alleles)).make();
      if (children.sameGenotype(sim,true))       return false;
    }
  }
  return true;
}",0.9922698524244554
161288,"public boolean isMendelianIncompatibility(final Genotype child,final Genotype father,final Genotype mother){
  if (child == null || child.isNoCall())   return false;
  if (father == null || father.isNoCall()) {
    return this.isMendelianIncompatibility(child,mother);
  }
  if (mother == null || mother.isNoCall()) {
    return this.isMendelianIncompatibility(child,father);
  }
  final Allele alleles[]=new Allele[2];
  for (  final Allele af : father.getAlleles()) {
    alleles[0]=af;
    for (    final Allele am : mother.getAlleles()) {
      alleles[1]=am;
      final Genotype sim=new GenotypeBuilder(child.getSampleName()).alleles(Arrays.asList(alleles)).make();
      if (sim.sameGenotype(sim,true))       return false;
    }
  }
  return true;
}","public boolean isMendelianIncompatibility(final Genotype child,final Genotype father,final Genotype mother){
  if (child == null || child.isNoCall())   return false;
  if (father == null || father.isNoCall()) {
    return this.isMendelianIncompatibility(child,mother);
  }
  if (mother == null || mother.isNoCall()) {
    return this.isMendelianIncompatibility(child,father);
  }
  final Allele alleles[]=new Allele[2];
  for (  final Allele af : father.getAlleles()) {
    alleles[0]=af;
    for (    final Allele am : mother.getAlleles()) {
      alleles[1]=am;
      final Genotype sim=new GenotypeBuilder(child.getSampleName()).alleles(Arrays.asList(alleles)).make();
      if (child.sameGenotype(sim,true))       return false;
    }
  }
  return true;
}",0.9947159841479524
161289,"@Override public Collection<Throwable> call() throws Exception {
  final List<String> args=getInputFiles();
  if (getRegion() == null) {
    return wrapException(""String_Node_Str"");
  }
  if (args.isEmpty()) {
    this.bamFile=null;
  }
 else   if (args.size() == 1) {
    this.bamFile=new File(args.get(0));
  }
 else {
    return wrapException(""String_Node_Str"");
  }
  if (getWIDTH() < 100) {
    LOG.info(""String_Node_Str"");
    setWIDTH(100);
  }
  SamReader samFileReader=null;
  try {
    if (getReferenceFile() != null) {
      LOG.info(""String_Node_Str"");
      this.indexedFastaSequenceFile=new IndexedFastaSequenceFile(getReferenceFile());
    }
    SamReaderFactory srf=SamReaderFactory.makeDefault().validationStringency(ValidationStringency.LENIENT);
    if (this.bamFile == null) {
      LOG.warn(""String_Node_Str"");
      samFileReader=srf.open(SamInputResource.of(stdin()));
    }
 else {
      LOG.info(""String_Node_Str"" + this.bamFile);
      samFileReader=srf.open(this.bamFile);
    }
    final SAMFileHeader header=samFileReader.getFileHeader();
    this.interval=IntervalUtils.parseOne(header.getSequenceDictionary(),region);
    if (this.interval == null) {
      return wrapException(""String_Node_Str"" + region + ""String_Node_Str"");
    }
    BufferedImage img=build(samFileReader);
    samFileReader.close();
    samFileReader=null;
    if (img == null) {
      return wrapException(""String_Node_Str"");
    }
    if (getOutputFile() == null) {
      ImageIO.write(img,""String_Node_Str"",stdout());
    }
 else {
      LOG.info(""String_Node_Str"" + getOutputFile());
      ImageIO.write(img,""String_Node_Str"",getOutputFile());
    }
    return Collections.emptyList();
  }
 catch (  IOException err) {
    return wrapException(err);
  }
 finally {
    CloserUtil.close(indexedFastaSequenceFile);
    CloserUtil.close(samFileReader);
    indexedFastaSequenceFile=null;
  }
}","@Override public Collection<Throwable> call() throws Exception {
  final List<String> args=getInputFiles();
  if (getRegion() == null) {
    return wrapException(""String_Node_Str"");
  }
  if (args.isEmpty()) {
    this.bamFile=null;
  }
 else   if (args.size() == 1) {
    this.bamFile=new File(args.get(0));
  }
 else {
    return wrapException(""String_Node_Str"");
  }
  if (getWIDTH() < 100) {
    LOG.info(""String_Node_Str"");
    setWIDTH(100);
  }
  SamReader samFileReader=null;
  try {
    if (getReferenceFile() != null) {
      LOG.info(""String_Node_Str"");
      this.indexedFastaSequenceFile=new IndexedFastaSequenceFile(getReferenceFile());
    }
    SamReaderFactory srf=SamReaderFactory.makeDefault().validationStringency(ValidationStringency.LENIENT);
    if (this.bamFile == null) {
      LOG.warn(""String_Node_Str"");
      samFileReader=srf.open(SamInputResource.of(stdin()));
    }
 else {
      LOG.info(""String_Node_Str"" + this.bamFile);
      samFileReader=srf.open(this.bamFile);
    }
    final SAMFileHeader header=samFileReader.getFileHeader();
    this.interval=IntervalUtils.parseOne(header.getSequenceDictionary(),region);
    if (this.interval == null) {
      return wrapException(""String_Node_Str"" + region + ""String_Node_Str"");
    }
    LOG.info(""String_Node_Str"" + this.interval);
    BufferedImage img=build(samFileReader);
    samFileReader.close();
    samFileReader=null;
    if (img == null) {
      return wrapException(""String_Node_Str"");
    }
    if (getOutputFile() == null) {
      ImageIO.write(img,""String_Node_Str"",stdout());
    }
 else {
      LOG.info(""String_Node_Str"" + getOutputFile());
      ImageIO.write(img,""String_Node_Str"",getOutputFile());
    }
    return Collections.emptyList();
  }
 catch (  IOException err) {
    return wrapException(err);
  }
 finally {
    CloserUtil.close(indexedFastaSequenceFile);
    CloserUtil.close(samFileReader);
    indexedFastaSequenceFile=null;
  }
}",0.9872429054933612
161290,"private BufferedImage build(final SamReader r){
  List<List<SAMRecord>> rows=new ArrayList<List<SAMRecord>>();
  SAMRecordIterator iter=null;
  if (bamFile != null) {
    iter=r.queryOverlapping(interval.getContig(),interval.getStart(),interval.getEnd());
  }
 else {
    iter=r.iterator();
  }
  int countReads=0;
  while (iter.hasNext()) {
    SAMRecord rec=iter.next();
    if (rec.getReadUnmappedFlag())     continue;
    if (this.bamFile == null) {
      if (!this.interval.getContig().equals(rec.getReferenceName()))       continue;
      if (rec.getAlignmentEnd() < this.interval.getStart())       continue;
      if (rec.getAlignmentStart() > this.interval.getEnd())       break;
    }
    countReads++;
    for (    List<SAMRecord> row : rows) {
      SAMRecord last=row.get(row.size() - 1);
      if (this.interval != null) {
        if (right(last) + this.minHDistance > left(rec))         continue;
      }
 else {
        if (last.getAlignmentEnd() + 1 > rec.getAlignmentStart())         continue;
      }
      row.add(rec);
      rec=null;
      break;
    }
    if (rec != null) {
      List<SAMRecord> row=new ArrayList<SAMRecord>();
      row.add(rec);
      rows.add(row);
    }
  }
  iter.close();
  LOG.info(""String_Node_Str"" + countReads);
  final int ruler_height=String.valueOf(this.interval.getEnd()).length() * 20;
  final int refw=(int)Math.max(1.0,WIDTH / (double)(1 + interval.getEnd() - interval.getStart()));
  LOG.info(""String_Node_Str"" + refw + ""String_Node_Str""+ WIDTH+ ""String_Node_Str""+ (1 + interval.getEnd() - interval.getStart()));
  final int margin_top=10 + (refw * 2) + ruler_height;
  Dimension imageSize=new Dimension(WIDTH,margin_top + rows.size() * (this.spaceYbetweenFeatures + this.featureHeight) + this.spaceYbetweenFeatures);
  BufferedImage img=new BufferedImage(imageSize.width,imageSize.height,BufferedImage.TYPE_INT_RGB);
  CharSequence genomicSequence=null;
  if (this.indexedFastaSequenceFile != null) {
    genomicSequence=new GenomicSequence(this.indexedFastaSequenceFile,this.interval.getContig());
  }
 else {
    genomicSequence=new AbstractCharSequence(){
      @Override public int length(){
        return interval.getStart() + 10;
      }
      @Override public char charAt(      int index){
        return 'N';
      }
    }
;
  }
  Graphics2D g=img.createGraphics();
  g.setColor(Color.WHITE);
  g.fillRect(0,0,imageSize.width,imageSize.height);
  LOG.info(""String_Node_Str"" + imageSize.width + ""String_Node_Str""+ imageSize.height);
  Map<Integer,Counter<Character>> ref2consensus=new HashMap<Integer,Counter<Character>>();
  for (int x=this.interval.getStart(); x <= this.interval.getEnd(); ++x) {
    final double oneBaseWidth=convertToX(x + 1) - convertToX(x);
    g.setColor(x % 10 == 0 ? Color.BLACK : Color.LIGHT_GRAY);
    g.draw(new Line2D.Double(convertToX(x),0,convertToX(x),imageSize.height));
    if ((x - this.interval.getStart()) % 10 == 0) {
      g.setColor(Color.BLACK);
      String xStr=String.format(""String_Node_Str"",x);
      AffineTransform tr=g.getTransform();
      AffineTransform tr2=new AffineTransform(tr);
      tr2.translate(convertToX(x),0);
      tr2.rotate(Math.PI / 2.0);
      g.setTransform(tr2);
      hersheyFont.paint(g,xStr,0,0,ruler_height,oneBaseWidth);
      g.setTransform(tr);
    }
    char c=genomicSequence.charAt(x - 1);
    g.setColor(base2color(c));
    hersheyFont.paint(g,String.valueOf(c),convertToX(x) + 1,ruler_height,oneBaseWidth - 2,oneBaseWidth - 2);
  }
  int y=margin_top + this.spaceYbetweenFeatures;
  for (  List<SAMRecord> row : rows) {
    for (    SAMRecord rec : row) {
      double x0=left(rec);
      double x1=right(rec);
      double y0=y;
      double y1=y0 + this.featureHeight;
      Shape shapeRec=null;
      if (x1 - x0 < minArrowWidth) {
        shapeRec=new Rectangle2D.Double(x0,y0,x1 - x0,y1 - y0);
      }
 else {
        GeneralPath path=new GeneralPath();
        double arrow=Math.max(this.minArrowWidth,Math.min(this.maxArrowWidth,x1 - x0));
        if (!rec.getReadNegativeStrandFlag()) {
          path.moveTo(x0,y0);
          path.lineTo(x1 - arrow,y0);
          path.lineTo(x1,(y0 + y1) / 2);
          path.lineTo(x1 - arrow,y1);
          path.lineTo(x0,y1);
        }
 else {
          path.moveTo(x0 + arrow,y0);
          path.lineTo(x0,(y0 + y1) / 2);
          path.lineTo(x0 + arrow,y1);
          path.lineTo(x1,y1);
          path.lineTo(x1,y0);
        }
        path.closePath();
        shapeRec=path;
      }
      Stroke oldStroke=g.getStroke();
      g.setStroke(new BasicStroke(2f));
      Paint oldpaint=g.getPaint();
      LinearGradientPaint gradient=new LinearGradientPaint(0f,(float)shapeRec.getBounds2D().getY(),0f,(float)shapeRec.getBounds2D().getMaxY(),new float[]{0f,0.5f,1f},new Color[]{Color.DARK_GRAY,Color.WHITE,Color.DARK_GRAY});
      g.setPaint(gradient);
      g.fill(shapeRec);
      g.setPaint(oldpaint);
      g.setColor(this.strokeColorizer.getColor(rec));
      g.draw(shapeRec);
      g.setStroke(oldStroke);
      Shape oldClip=g.getClip();
      g.setClip(shapeRec);
      Cigar cigar=rec.getCigar();
      if (cigar != null) {
        byte bases[]=rec.getReadBases();
        int refpos=rec.getAlignmentStart();
        int readpos=0;
        for (        CigarElement ce : cigar.getCigarElements()) {
switch (ce.getOperator()) {
case H:
            break;
case S:
          readpos+=ce.getLength();
        break;
case I:
{
        g.setColor(Color.GREEN);
        g.fill(new Rectangle2D.Double(convertToX(refpos),y0,2,y1 - y0));
        readpos+=ce.getLength();
        break;
      }
case D:
case N:
case P:
{
      g.setColor(Color.ORANGE);
      g.fill(new Rectangle2D.Double(convertToX(refpos),y0,convertToX(refpos + ce.getLength()) - convertToX(refpos),y1 - y0));
      refpos+=ce.getLength();
      break;
    }
case EQ:
case X:
case M:
{
    for (int i=0; i < ce.getLength(); ++i) {
      if (readpos >= bases.length) {
        System.err.println(rec.getReadName() + ""String_Node_Str"" + rec.getCigarString()+ ""String_Node_Str""+ rec.getReadString());
      }
      char c1=(char)bases[readpos];
      Counter<Character> consensus=ref2consensus.get(refpos);
      if (consensus == null) {
        consensus=new Counter<Character>();
        ref2consensus.put(refpos,consensus);
      }
      consensus.incr(Character.toUpperCase(c1));
      char c2=genomicSequence.charAt(refpos - 1);
      double mutW=convertToX(refpos + 1) - convertToX(refpos);
      g.setColor(Color.BLACK);
      Shape mut=new Rectangle2D.Double(convertToX(refpos),y0,mutW,y1 - y0);
      if (ce.getOperator() == CigarOperator.X || (c2 != 'N' && c2 != 'n' && Character.toUpperCase(c1) != Character.toUpperCase(c2))) {
        g.setColor(Color.RED);
        g.fill(mut);
        g.setColor(Color.WHITE);
      }
      if (isPrintName()) {
        if (readpos < rec.getReadName().length()) {
          c1=rec.getReadName().charAt(readpos);
          c1=rec.getReadNegativeStrandFlag() ? Character.toLowerCase(c1) : Character.toUpperCase(c1);
        }
 else {
          c1=' ';
        }
      }
 else       if (!super.disablePrintBases) {
        c1=' ';
      }
      this.hersheyFont.paint(g,String.valueOf(c1),mut);
      readpos++;
      refpos++;
    }
    break;
  }
default :
LOG.error(""String_Node_Str"" + ce.getOperator());
break;
}
}
}
g.setClip(oldClip);
}
y+=this.featureHeight + this.spaceYbetweenFeatures;
}
for (int x=this.interval.getStart(); x <= this.interval.getEnd(); ++x) {
Counter<Character> cons=ref2consensus.get(x);
if (cons == null || cons.getCountCategories() == 0) {
continue;
}
final double oneBaseWidth=(convertToX(x + 1) - convertToX(x)) - 1;
double x0=convertToX(x) + 1;
for (Character c : cons.keySetDecreasing()) {
double weight=oneBaseWidth * (cons.count(c) / (double)cons.getTotal());
g.setColor(Color.BLACK);
if (genomicSequence != null && Character.toUpperCase(genomicSequence.charAt(x - 1)) != Character.toUpperCase(c)) {
g.setColor(Color.RED);
}
hersheyFont.paint(g,String.valueOf(c),x0,ruler_height + refw,weight,oneBaseWidth - 2);
x0+=weight;
}
}
g.dispose();
return img;
}","private BufferedImage build(final SamReader r){
  List<List<SAMRecord>> rows=new ArrayList<List<SAMRecord>>();
  SAMRecordIterator iter=null;
  if (bamFile != null) {
    iter=r.queryOverlapping(interval.getContig(),interval.getStart(),interval.getEnd());
  }
 else {
    iter=r.iterator();
  }
  int countReads=0;
  while (iter.hasNext()) {
    SAMRecord rec=iter.next();
    if (rec.getReadUnmappedFlag())     continue;
    if (this.bamFile == null) {
      if (!this.interval.getContig().equals(rec.getReferenceName()))       continue;
      if (rec.getAlignmentEnd() < this.interval.getStart())       continue;
      if (rec.getAlignmentStart() > this.interval.getEnd())       break;
    }
    countReads++;
    for (    List<SAMRecord> row : rows) {
      SAMRecord last=row.get(row.size() - 1);
      if (this.interval != null) {
        if (right(last) + this.minHDistance > left(rec))         continue;
      }
 else {
        if (last.getAlignmentEnd() + 1 > rec.getAlignmentStart())         continue;
      }
      row.add(rec);
      rec=null;
      break;
    }
    if (rec != null) {
      List<SAMRecord> row=new ArrayList<SAMRecord>();
      row.add(rec);
      rows.add(row);
    }
  }
  iter.close();
  LOG.info(""String_Node_Str"" + countReads);
  final int ruler_height=String.valueOf(this.interval.getEnd()).length() * 20;
  final int refw=(int)Math.max(1.0,WIDTH / (double)(1 + interval.getEnd() - interval.getStart()));
  LOG.info(""String_Node_Str"" + refw + ""String_Node_Str""+ WIDTH+ ""String_Node_Str""+ (1 + interval.getEnd() - interval.getStart()));
  final int margin_top=10 + (refw * 2) + ruler_height;
  Dimension imageSize=new Dimension(WIDTH,margin_top + rows.size() * (this.spaceYbetweenFeatures + this.featureHeight) + this.spaceYbetweenFeatures);
  BufferedImage img=new BufferedImage(imageSize.width,imageSize.height,BufferedImage.TYPE_INT_RGB);
  CharSequence genomicSequence=null;
  if (this.indexedFastaSequenceFile != null) {
    genomicSequence=new GenomicSequence(this.indexedFastaSequenceFile,this.interval.getContig());
  }
 else {
    genomicSequence=new AbstractCharSequence(){
      @Override public int length(){
        return interval.getStart() + 10;
      }
      @Override public char charAt(      int index){
        return 'N';
      }
    }
;
  }
  Graphics2D g=img.createGraphics();
  g.setColor(Color.WHITE);
  g.fillRect(0,0,imageSize.width,imageSize.height);
  LOG.info(""String_Node_Str"" + imageSize.width + ""String_Node_Str""+ imageSize.height);
  Map<Integer,Counter<Character>> ref2consensus=new HashMap<Integer,Counter<Character>>();
  for (int x=this.interval.getStart(); x <= this.interval.getEnd(); ++x) {
    final double oneBaseWidth=convertToX(x + 1) - convertToX(x);
    g.setColor(x % 10 == 0 ? Color.BLACK : Color.LIGHT_GRAY);
    g.draw(new Line2D.Double(convertToX(x),0,convertToX(x),imageSize.height));
    if ((x - this.interval.getStart()) % 10 == 0) {
      g.setColor(Color.BLACK);
      final String xStr=String.format(""String_Node_Str"",x);
      final AffineTransform tr=g.getTransform();
      final AffineTransform tr2=new AffineTransform(tr);
      tr2.translate(convertToX(x + 1),0);
      tr2.rotate(Math.PI / 2.0);
      g.setTransform(tr2);
      hersheyFont.paint(g,xStr,0,0,ruler_height,oneBaseWidth);
      g.setTransform(tr);
    }
    char c=genomicSequence.charAt(x - 1);
    g.setColor(base2color(c));
    hersheyFont.paint(g,String.valueOf(c),convertToX(x) + 1,ruler_height,oneBaseWidth - 2,oneBaseWidth - 2);
  }
  int y=margin_top + this.spaceYbetweenFeatures;
  for (  List<SAMRecord> row : rows) {
    for (    SAMRecord rec : row) {
      double x0=left(rec);
      double x1=right(rec);
      double y0=y;
      double y1=y0 + this.featureHeight;
      Shape shapeRec=null;
      if (x1 - x0 < minArrowWidth) {
        shapeRec=new Rectangle2D.Double(x0,y0,x1 - x0,y1 - y0);
      }
 else {
        GeneralPath path=new GeneralPath();
        double arrow=Math.max(this.minArrowWidth,Math.min(this.maxArrowWidth,x1 - x0));
        if (!rec.getReadNegativeStrandFlag()) {
          path.moveTo(x0,y0);
          path.lineTo(x1 - arrow,y0);
          path.lineTo(x1,(y0 + y1) / 2);
          path.lineTo(x1 - arrow,y1);
          path.lineTo(x0,y1);
        }
 else {
          path.moveTo(x0 + arrow,y0);
          path.lineTo(x0,(y0 + y1) / 2);
          path.lineTo(x0 + arrow,y1);
          path.lineTo(x1,y1);
          path.lineTo(x1,y0);
        }
        path.closePath();
        shapeRec=path;
      }
      Stroke oldStroke=g.getStroke();
      g.setStroke(new BasicStroke(2f));
      Paint oldpaint=g.getPaint();
      LinearGradientPaint gradient=new LinearGradientPaint(0f,(float)shapeRec.getBounds2D().getY(),0f,(float)shapeRec.getBounds2D().getMaxY(),new float[]{0f,0.5f,1f},new Color[]{Color.DARK_GRAY,Color.WHITE,Color.DARK_GRAY});
      g.setPaint(gradient);
      g.fill(shapeRec);
      g.setPaint(oldpaint);
      g.setColor(this.strokeColorizer.getColor(rec));
      g.draw(shapeRec);
      g.setStroke(oldStroke);
      Shape oldClip=g.getClip();
      g.setClip(shapeRec);
      Cigar cigar=rec.getCigar();
      if (cigar != null) {
        byte bases[]=rec.getReadBases();
        int refpos=rec.getAlignmentStart();
        int readpos=0;
        for (        CigarElement ce : cigar.getCigarElements()) {
switch (ce.getOperator()) {
case H:
            break;
case S:
          readpos+=ce.getLength();
        break;
case I:
{
        g.setColor(Color.GREEN);
        g.fill(new Rectangle2D.Double(convertToX(refpos),y0,2,y1 - y0));
        readpos+=ce.getLength();
        break;
      }
case D:
case N:
case P:
{
      g.setColor(Color.ORANGE);
      g.fill(new Rectangle2D.Double(convertToX(refpos),y0,convertToX(refpos + ce.getLength()) - convertToX(refpos),y1 - y0));
      refpos+=ce.getLength();
      break;
    }
case EQ:
case X:
case M:
{
    for (int i=0; i < ce.getLength(); ++i) {
      if (readpos >= bases.length) {
        System.err.println(rec.getReadName() + ""String_Node_Str"" + rec.getCigarString()+ ""String_Node_Str""+ rec.getReadString());
      }
      char c1=(char)bases[readpos];
      Counter<Character> consensus=ref2consensus.get(refpos);
      if (consensus == null) {
        consensus=new Counter<Character>();
        ref2consensus.put(refpos,consensus);
      }
      consensus.incr(Character.toUpperCase(c1));
      char c2=genomicSequence.charAt(refpos - 1);
      double mutW=convertToX(refpos + 1) - convertToX(refpos);
      g.setColor(Color.BLACK);
      Shape mut=new Rectangle2D.Double(convertToX(refpos),y0,mutW,y1 - y0);
      if (ce.getOperator() == CigarOperator.X || (c2 != 'N' && c2 != 'n' && Character.toUpperCase(c1) != Character.toUpperCase(c2))) {
        g.setColor(Color.RED);
        g.fill(mut);
        g.setColor(Color.WHITE);
      }
      if (isPrintName()) {
        if (readpos < rec.getReadName().length()) {
          c1=rec.getReadName().charAt(readpos);
          c1=rec.getReadNegativeStrandFlag() ? Character.toLowerCase(c1) : Character.toUpperCase(c1);
        }
 else {
          c1=' ';
        }
      }
 else       if (!super.disablePrintBases) {
        c1=' ';
      }
      this.hersheyFont.paint(g,String.valueOf(c1),mut);
      readpos++;
      refpos++;
    }
    break;
  }
default :
LOG.error(""String_Node_Str"" + ce.getOperator());
break;
}
}
}
g.setClip(oldClip);
}
y+=this.featureHeight + this.spaceYbetweenFeatures;
}
for (int x=this.interval.getStart(); x <= this.interval.getEnd(); ++x) {
Counter<Character> cons=ref2consensus.get(x);
if (cons == null || cons.getCountCategories() == 0) {
continue;
}
final double oneBaseWidth=(convertToX(x + 1) - convertToX(x)) - 1;
double x0=convertToX(x) + 1;
for (Character c : cons.keySetDecreasing()) {
double weight=oneBaseWidth * (cons.count(c) / (double)cons.getTotal());
g.setColor(Color.BLACK);
if (genomicSequence != null && Character.toUpperCase(genomicSequence.charAt(x - 1)) != Character.toUpperCase(c)) {
g.setColor(Color.RED);
}
hersheyFont.paint(g,String.valueOf(c),x0,ruler_height + refw,weight,oneBaseWidth - 2);
x0+=weight;
}
}
g.dispose();
return img;
}",0.9986431478968792
161291,"@Override public Collection<Throwable> doVcfToVcf(final String inputName,final VcfIterator in,final VariantContextWriter out) throws IOException {
  final VCFHeader header=in.getHeader();
  final Pedigree pedigree=Pedigree.readPedigree(header);
  if (pedigree.isEmpty()) {
    throw new IOException(""String_Node_Str"" + inputName + ""String_Node_Str"");
  }
  final Set<Pedigree.Person> caseSamples=pedigree.getAffected();
  final Set<Pedigree.Person> controlSamples=pedigree.getUnaffected();
  try {
    final VCFHeader h2=addMetaData(new VCFHeader(header));
    final VCFInfoHeaderLine mafCasInfoHeader=new VCFInfoHeaderLine(""String_Node_Str"",VCFHeaderLineCount.A,VCFHeaderLineType.Float,""String_Node_Str"");
    final VCFInfoHeaderLine mafControlsInfoHeader=new VCFInfoHeaderLine(""String_Node_Str"",VCFHeaderLineCount.A,VCFHeaderLineType.Float,""String_Node_Str"");
    final VCFFilterHeaderLine filterCasHeader=new VCFFilterHeaderLine(mafCasInfoHeader.getID(),""String_Node_Str"" + super.maxMAF);
    final VCFFilterHeaderLine filterControlsHeader=new VCFFilterHeaderLine(mafControlsInfoHeader.getID(),""String_Node_Str"" + super.maxMAF);
    final VCFFilterHeaderLine filterCaseOrControlsHeader=new VCFFilterHeaderLine(""String_Node_Str"",""String_Node_Str"" + super.maxMAF);
    h2.addMetaDataLine(mafCasInfoHeader);
    h2.addMetaDataLine(mafControlsInfoHeader);
    h2.addMetaDataLine(filterCasHeader);
    h2.addMetaDataLine(filterControlsHeader);
    h2.addMetaDataLine(filterCaseOrControlsHeader);
    final SAMSequenceDictionaryProgress progess=new SAMSequenceDictionaryProgress(header.getSequenceDictionary());
    out.writeHeader(h2);
    while (in.hasNext() && !out.checkError()) {
      final VariantContext ctx=progess.watch(in.next());
      final VariantContextBuilder vcb=new VariantContextBuilder(ctx);
      final List<Double> mafCasList=new ArrayList<>();
      final List<Double> mafCtrlList=new ArrayList<>();
      boolean set_max_maf_cas=true;
      boolean set_max_maf_control=true;
      boolean seen_data=false;
      for (      final Allele observed_alt : ctx.getAlternateAlleles()) {
        for (int pop=0; pop < 2; ++pop) {
          final MafCalculator mafCalculator=new MafCalculator(observed_alt,ctx.getContig());
          for (          final Pedigree.Person p : (pop == CASE_POP ? caseSamples : controlSamples)) {
            final Genotype genotype=ctx.getGenotype(p.getId());
            mafCalculator.add(genotype,p.isMale());
          }
          if (!mafCalculator.isEmpty()) {
            seen_data=true;
            final double maf=mafCalculator.getMaf();
            if (pop == CASE_POP) {
              mafCasList.add(maf);
              if (maf <= super.maxMAF)               set_max_maf_cas=false;
            }
 else {
              mafCtrlList.add(maf);
              if (maf <= super.maxMAF)               set_max_maf_control=false;
            }
          }
 else {
            if (pop == CASE_POP) {
              mafCasList.add(-1.0);
            }
 else {
              mafCtrlList.add(-1.0);
            }
          }
        }
      }
      vcb.attribute(mafCasInfoHeader.getID(),mafCasList);
      vcb.attribute(mafControlsInfoHeader.getID(),mafCtrlList);
      if (seen_data) {
        if (set_max_maf_cas)         vcb.filter(filterCasHeader.getID());
        if (set_max_maf_control)         vcb.filter(filterControlsHeader.getID());
        if (set_max_maf_cas || set_max_maf_control) {
          vcb.filter(filterCaseOrControlsHeader.getID());
        }
      }
      out.add(vcb.make());
    }
    progess.finish();
    LOG.info(""String_Node_Str"");
    return RETURN_OK;
  }
 catch (  Exception err) {
    return wrapException(err);
  }
 finally {
    CloserUtil.close(in);
  }
}","@Override public Collection<Throwable> doVcfToVcf(final String inputName,final VcfIterator in,final VariantContextWriter out) throws IOException {
  final VCFHeader header=in.getHeader();
  final Pedigree pedigree=Pedigree.readPedigree(header);
  if (pedigree.isEmpty()) {
    throw new IOException(""String_Node_Str"" + inputName + ""String_Node_Str"");
  }
  final Set<Pedigree.Person> caseSamples=pedigree.getAffected();
  final Set<Pedigree.Person> controlSamples=pedigree.getUnaffected();
  try {
    final VCFHeader h2=addMetaData(new VCFHeader(header));
    final VCFInfoHeaderLine mafCasInfoHeader=new VCFInfoHeaderLine(""String_Node_Str"",VCFHeaderLineCount.A,VCFHeaderLineType.Float,""String_Node_Str"");
    final VCFInfoHeaderLine mafControlsInfoHeader=new VCFInfoHeaderLine(""String_Node_Str"",VCFHeaderLineCount.A,VCFHeaderLineType.Float,""String_Node_Str"");
    final VCFFilterHeaderLine filterCasHeader=new VCFFilterHeaderLine(mafCasInfoHeader.getID(),""String_Node_Str"" + super.maxMAF);
    final VCFFilterHeaderLine filterControlsHeader=new VCFFilterHeaderLine(mafControlsInfoHeader.getID(),""String_Node_Str"" + super.maxMAF);
    final VCFFilterHeaderLine filterCaseOrControlsHeader=new VCFFilterHeaderLine(""String_Node_Str"",""String_Node_Str"" + super.maxMAF);
    h2.addMetaDataLine(mafCasInfoHeader);
    h2.addMetaDataLine(mafControlsInfoHeader);
    h2.addMetaDataLine(filterCasHeader);
    h2.addMetaDataLine(filterControlsHeader);
    h2.addMetaDataLine(filterCaseOrControlsHeader);
    final SAMSequenceDictionaryProgress progess=new SAMSequenceDictionaryProgress(header.getSequenceDictionary());
    out.writeHeader(h2);
    while (in.hasNext() && !out.checkError()) {
      final VariantContext ctx=progess.watch(in.next());
      final VariantContextBuilder vcb=new VariantContextBuilder(ctx);
      final List<Double> mafCasList=new ArrayList<>();
      final List<Double> mafCtrlList=new ArrayList<>();
      boolean set_max_maf_cas=true;
      boolean set_max_maf_control=true;
      boolean seen_data=false;
      for (      final Allele observed_alt : ctx.getAlternateAlleles()) {
        for (int pop=0; pop < 2; ++pop) {
          final MafCalculator mafCalculator=new MafCalculator(observed_alt,ctx.getContig());
          for (          final Pedigree.Person p : (pop == CASE_POP ? caseSamples : controlSamples)) {
            final Genotype genotype=ctx.getGenotype(p.getId());
            mafCalculator.add(genotype,p.isMale());
          }
          if (!mafCalculator.isEmpty()) {
            seen_data=true;
            final double maf=mafCalculator.getMaf();
            if (pop == CASE_POP) {
              mafCasList.add(maf);
              if (maf <= super.maxMAF)               set_max_maf_cas=false;
            }
 else {
              mafCtrlList.add(maf);
              if (maf <= super.maxMAF)               set_max_maf_control=false;
            }
          }
 else {
            if (pop == CASE_POP) {
              mafCasList.add(-1.0);
              set_max_maf_cas=false;
            }
 else {
              mafCtrlList.add(-1.0);
              set_max_maf_control=false;
            }
          }
        }
      }
      vcb.attribute(mafCasInfoHeader.getID(),mafCasList);
      vcb.attribute(mafControlsInfoHeader.getID(),mafCtrlList);
      if (seen_data) {
        if (set_max_maf_cas)         vcb.filter(filterCasHeader.getID());
        if (set_max_maf_control)         vcb.filter(filterControlsHeader.getID());
        if (set_max_maf_cas || set_max_maf_control) {
          vcb.filter(filterCaseOrControlsHeader.getID());
        }
      }
      out.add(vcb.make());
    }
    progess.finish();
    LOG.info(""String_Node_Str"");
    return RETURN_OK;
  }
 catch (  Exception err) {
    return wrapException(err);
  }
 finally {
    CloserUtil.close(in);
  }
}",0.9896579156722356
161292,"@Override protected Collection<Throwable> call(final String inputName) throws Exception {
  PrintWriter pw=null;
  VcfIterator in=null;
  LineIterator lr=null;
  long vcf_id=System.currentTimeMillis();
  try {
    lr=(inputName == null ? IOUtils.openStreamForLineIterator(stdin()) : IOUtils.openURIForLineIterator(inputName));
    pw=super.openFileOrStdoutAsPrintWriter();
    pw.println(""String_Node_Str"");
    pw.println(""String_Node_Str"" + getName());
    pw.println(""String_Node_Str"" + getGitHash());
    if (super.userDefinedFunName != null && !super.userDefinedFunName.trim().isEmpty()) {
      pw.println(""String_Node_Str"" + userDefinedFunName + ""String_Node_Str"");
      pw.println(""String_Node_Str"");
    }
    if (!lr.hasNext()) {
      LOG.warn(""String_Node_Str"");
    }
    while (lr.hasNext()) {
      vcf_id++;
      in=VCFUtils.createVcfIteratorFromLineIterator(lr,true);
      final VCFHeader header=in.getHeader();
      final Set<Pedigree.Person> samples=new TreeSet<>(super.getCasesControlsInPedigree(header));
      final List<Variant> variants=new ArrayList<>();
      boolean first=true;
      pw.println(""String_Node_Str"");
      pw.println(""String_Node_Str"");
      final VCFHeaderLine vcfTitle=(super.titleHeaderStr == null || super.titleHeaderStr.trim().isEmpty() ? null : header.getOtherHeaderLine(super.titleHeaderStr.trim()));
      if (vcfTitle == null) {
        pw.println(""String_Node_Str"");
        pw.println(""String_Node_Str"" + String.format(""String_Node_Str"",vcf_id) + ""String_Node_Str"");
      }
 else {
        pw.println(""String_Node_Str"" + vcfTitle.getValue() + ""String_Node_Str"");
      }
      first=true;
      pw.println(""String_Node_Str"");
      pw.print(""String_Node_Str"");
      first=true;
      for (      final Pedigree.Person person : samples) {
        if (!first)         pw.print(""String_Node_Str"");
        pw.print(""String_Node_Str"" + person.getFamily().getId() + ""String_Node_Str"");
        first=false;
      }
      pw.print(""String_Node_Str"");
      first=true;
      for (      final Pedigree.Person person : samples) {
        if (!first)         pw.print(""String_Node_Str"");
        pw.print(""String_Node_Str"" + person.getId() + ""String_Node_Str"");
        first=false;
      }
      pw.print(""String_Node_Str"");
      first=true;
      for (      final Pedigree.Person person : samples) {
        if (!first)         pw.print(""String_Node_Str"");
        pw.print(person.isUnaffected() ? 0 : 1);
        first=false;
      }
      pw.println(""String_Node_Str"");
      first=true;
      pw.println();
      pw.println(""String_Node_Str"");
      pw.println(""String_Node_Str"");
      pw.println(""String_Node_Str"");
      pw.print(""String_Node_Str"");
      final SAMSequenceDictionaryProgress progess=new SAMSequenceDictionaryProgress(header.getSequenceDictionary());
      while (in.hasNext()) {
        final VariantContext ctx=progess.watch(in.next());
        if (ctx.isFiltered() && !super.acceptFiltered)         continue;
        final int n_alts=ctx.getAlternateAlleles().size();
        if (n_alts == 0) {
          LOG.warn(""String_Node_Str"");
          continue;
        }
        if (n_alts > 1) {
          LOG.warn(""String_Node_Str"");
        }
        final Allele observed_alt=ctx.getAltAlleleWithHighestAlleleCount();
        final MafCalculator mafCalculator=new MafCalculator(observed_alt,ctx.getContig());
        for (        final Pedigree.Person person : samples) {
          final Genotype genotype=ctx.getGenotype(person.getId());
          if (genotype == null) {
            pw.close();
            pw=null;
            in.close();
            throw new IllegalStateException();
          }
          mafCalculator.add(genotype,person.isMale());
          if (!first)           pw.print(""String_Node_Str"");
          if (genotype.isHomRef()) {
            pw.print('0');
          }
 else           if (genotype.isHomVar() && genotype.getAlleles().contains(observed_alt)) {
            pw.print('2');
          }
 else           if (genotype.isHet() && genotype.getAlleles().contains(observed_alt) && genotype.getAlleles().contains(ctx.getReference())) {
            pw.print('1');
          }
 else           if (genotype.isHet() && !genotype.getAlleles().contains(observed_alt) && genotype.getAlleles().contains(ctx.getReference())) {
            LOG.warn(""String_Node_Str"" + genotype + ""String_Node_Str""+ observed_alt);
            pw.print('0');
          }
 else           if (genotype.isHomVar() && !genotype.getAlleles().contains(observed_alt)) {
            LOG.warn(""String_Node_Str"" + genotype + ""String_Node_Str""+ observed_alt);
            pw.print('0');
          }
 else {
            pw.print(""String_Node_Str"");
          }
          first=false;
        }
        final Variant variant=new Variant();
        variant.contig=ctx.getContig();
        variant.start=ctx.getStart();
        variant.end=ctx.getEnd();
        variant.ref=ctx.getReference();
        variant.alt=observed_alt;
        if (!mafCalculator.isEmpty()) {
          variant.maf=mafCalculator.getMaf();
        }
 else {
          variant.maf=null;
        }
        variants.add(variant);
      }
      progess.finish();
      in.close();
      pw.println(""String_Node_Str"");
      first=true;
      pw.println(""String_Node_Str"");
      pw.print(""String_Node_Str"");
      first=true;
      for (      final Variant v : variants) {
        if (!first)         pw.print(""String_Node_Str"");
        pw.print(""String_Node_Str"" + v.contig + ""String_Node_Str"");
        first=false;
      }
      pw.print(""String_Node_Str"");
      first=true;
      for (      final Variant v : variants) {
        if (!first)         pw.print(""String_Node_Str"");
        pw.print(v.start);
        first=false;
      }
      pw.print(""String_Node_Str"");
      first=true;
      for (      final Variant v : variants) {
        if (!first)         pw.print(""String_Node_Str"");
        pw.print(v.end);
        first=false;
      }
      pw.print(""String_Node_Str"");
      first=true;
      for (      final Variant v : variants) {
        if (!first)         pw.print(""String_Node_Str"");
        pw.print(""String_Node_Str"" + v.ref.getDisplayString() + ""String_Node_Str"");
        first=false;
      }
      pw.print(""String_Node_Str"");
      first=true;
      for (      final Variant v : variants) {
        if (!first)         pw.print(""String_Node_Str"");
        pw.print(""String_Node_Str"" + v.alt.getDisplayString() + ""String_Node_Str"");
        first=false;
      }
      pw.print(""String_Node_Str"");
      first=true;
      for (      final Variant v : variants) {
        if (!first)         pw.print(""String_Node_Str"");
        pw.print(v.maf == null ? ""String_Node_Str"" : String.valueOf(v.maf));
        first=false;
      }
      pw.println(""String_Node_Str"");
      pw.println(""String_Node_Str"");
      pw.println(""String_Node_Str"");
      pw.println(""String_Node_Str"");
      if (super.userDefinedFunName == null || super.userDefinedFunName.trim().isEmpty()) {
        pw.println(""String_Node_Str"");
      }
 else {
        pw.println(""String_Node_Str"");
        pw.println(super.userDefinedFunName + ""String_Node_Str"");
      }
      pw.println(""String_Node_Str"");
    }
    pw.flush();
    if (pw.checkError()) {
      return wrapException(""String_Node_Str"");
    }
    pw.close();
    pw=null;
    LOG.info(""String_Node_Str"");
    return RETURN_OK;
  }
 catch (  Exception err) {
    return wrapException(err);
  }
 finally {
    CloserUtil.close(pw);
    CloserUtil.close(in);
    CloserUtil.close(lr);
  }
}","@Override protected Collection<Throwable> call(final String inputName) throws Exception {
  PrintWriter pw=null;
  VcfIterator in=null;
  LineIterator lr=null;
  long vcf_id=System.currentTimeMillis();
  try {
    lr=(inputName == null ? IOUtils.openStreamForLineIterator(stdin()) : IOUtils.openURIForLineIterator(inputName));
    pw=super.openFileOrStdoutAsPrintWriter();
    pw.println(""String_Node_Str"");
    pw.println(""String_Node_Str"" + getName());
    pw.println(""String_Node_Str"" + getGitHash());
    if (super.userDefinedFunName != null && !super.userDefinedFunName.trim().isEmpty()) {
      pw.println(""String_Node_Str"" + userDefinedFunName + ""String_Node_Str"");
      pw.println(""String_Node_Str"");
    }
    if (!lr.hasNext()) {
      LOG.warn(""String_Node_Str"");
    }
    while (lr.hasNext()) {
      vcf_id++;
      in=VCFUtils.createVcfIteratorFromLineIterator(lr,true);
      final VCFHeader header=in.getHeader();
      final Set<Pedigree.Person> samples=new TreeSet<>(super.getCasesControlsInPedigree(header));
      final List<Variant> variants=new ArrayList<>();
      boolean first=true;
      pw.println(""String_Node_Str"");
      pw.println(""String_Node_Str"");
      final VCFHeaderLine vcfTitle=(super.titleHeaderStr == null || super.titleHeaderStr.trim().isEmpty() ? null : header.getOtherHeaderLine(super.titleHeaderStr.trim()));
      if (vcfTitle == null) {
        pw.println(""String_Node_Str"");
        pw.println(""String_Node_Str"" + String.format(""String_Node_Str"",vcf_id) + ""String_Node_Str"");
      }
 else {
        pw.println(""String_Node_Str"" + vcfTitle.getValue() + ""String_Node_Str"");
      }
      first=true;
      pw.println(""String_Node_Str"");
      pw.print(""String_Node_Str"");
      first=true;
      for (      final Pedigree.Person person : samples) {
        if (!first)         pw.print(""String_Node_Str"");
        pw.print(""String_Node_Str"" + person.getFamily().getId() + ""String_Node_Str"");
        first=false;
      }
      pw.print(""String_Node_Str"");
      first=true;
      for (      final Pedigree.Person person : samples) {
        if (!first)         pw.print(""String_Node_Str"");
        pw.print(""String_Node_Str"" + person.getId() + ""String_Node_Str"");
        first=false;
      }
      pw.print(""String_Node_Str"");
      first=true;
      for (      final Pedigree.Person person : samples) {
        if (!first)         pw.print(""String_Node_Str"");
        pw.print(person.isUnaffected() ? 0 : 1);
        first=false;
      }
      pw.println(""String_Node_Str"");
      first=true;
      pw.println();
      pw.println(""String_Node_Str"");
      pw.println(""String_Node_Str"");
      pw.println(""String_Node_Str"");
      pw.print(""String_Node_Str"");
      final SAMSequenceDictionaryProgress progess=new SAMSequenceDictionaryProgress(header.getSequenceDictionary());
      while (in.hasNext()) {
        final VariantContext ctx=progess.watch(in.next());
        if (ctx.isFiltered() && !super.acceptFiltered)         continue;
        final int n_alts=ctx.getAlternateAlleles().size();
        if (n_alts == 0) {
          LOG.warn(""String_Node_Str"");
          continue;
        }
        if (n_alts > 1) {
          LOG.warn(""String_Node_Str"");
        }
        final Allele observed_alt=ctx.getAltAlleleWithHighestAlleleCount();
        final MafCalculator mafCalculator=new MafCalculator(observed_alt,ctx.getContig());
        for (        final Pedigree.Person person : samples) {
          final Genotype genotype=ctx.getGenotype(person.getId());
          if (genotype == null) {
            pw.close();
            pw=null;
            in.close();
            throw new IllegalStateException();
          }
          mafCalculator.add(genotype,person.isMale());
          if (!first)           pw.print(""String_Node_Str"");
          if (genotype.isHomRef()) {
            pw.print('0');
          }
 else           if (genotype.isHomVar() && genotype.getAlleles().contains(observed_alt)) {
            pw.print('2');
          }
 else           if (genotype.isHet() && genotype.getAlleles().contains(observed_alt) && genotype.getAlleles().contains(ctx.getReference())) {
            pw.print('1');
          }
 else           if (genotype.isHet() && !genotype.getAlleles().contains(observed_alt) && genotype.getAlleles().contains(ctx.getReference())) {
            LOG.warn(""String_Node_Str"" + genotype + ""String_Node_Str""+ observed_alt);
            pw.print('0');
          }
 else           if (genotype.isHomVar() && !genotype.getAlleles().contains(observed_alt)) {
            LOG.warn(""String_Node_Str"" + genotype + ""String_Node_Str""+ observed_alt);
            pw.print('0');
          }
 else {
            pw.print(super.nocalliszero ? ""String_Node_Str"" : ""String_Node_Str"");
          }
          first=false;
        }
        final Variant variant=new Variant();
        variant.contig=ctx.getContig();
        variant.start=ctx.getStart();
        variant.end=ctx.getEnd();
        variant.ref=ctx.getReference();
        variant.alt=observed_alt;
        if (!mafCalculator.isEmpty()) {
          variant.maf=mafCalculator.getMaf();
        }
 else {
          variant.maf=null;
        }
        variants.add(variant);
      }
      progess.finish();
      in.close();
      pw.println(""String_Node_Str"");
      first=true;
      pw.println(""String_Node_Str"");
      pw.print(""String_Node_Str"");
      first=true;
      for (      final Variant v : variants) {
        if (!first)         pw.print(""String_Node_Str"");
        pw.print(""String_Node_Str"" + v.contig + ""String_Node_Str"");
        first=false;
      }
      pw.print(""String_Node_Str"");
      first=true;
      for (      final Variant v : variants) {
        if (!first)         pw.print(""String_Node_Str"");
        pw.print(v.start);
        first=false;
      }
      pw.print(""String_Node_Str"");
      first=true;
      for (      final Variant v : variants) {
        if (!first)         pw.print(""String_Node_Str"");
        pw.print(v.end);
        first=false;
      }
      pw.print(""String_Node_Str"");
      first=true;
      for (      final Variant v : variants) {
        if (!first)         pw.print(""String_Node_Str"");
        pw.print(""String_Node_Str"" + v.ref.getDisplayString() + ""String_Node_Str"");
        first=false;
      }
      pw.print(""String_Node_Str"");
      first=true;
      for (      final Variant v : variants) {
        if (!first)         pw.print(""String_Node_Str"");
        pw.print(""String_Node_Str"" + v.alt.getDisplayString() + ""String_Node_Str"");
        first=false;
      }
      pw.print(""String_Node_Str"");
      first=true;
      for (      final Variant v : variants) {
        if (!first)         pw.print(""String_Node_Str"");
        pw.print(v.maf == null ? ""String_Node_Str"" : String.valueOf(v.maf));
        first=false;
      }
      pw.println(""String_Node_Str"");
      pw.println(""String_Node_Str"");
      pw.println(""String_Node_Str"");
      pw.println(""String_Node_Str"");
      if (super.userDefinedFunName == null || super.userDefinedFunName.trim().isEmpty()) {
        pw.println(""String_Node_Str"");
      }
 else {
        pw.println(""String_Node_Str"");
        pw.println(super.userDefinedFunName + ""String_Node_Str"");
      }
      pw.println(""String_Node_Str"");
    }
    pw.flush();
    if (pw.checkError()) {
      return wrapException(""String_Node_Str"");
    }
    pw.close();
    pw=null;
    LOG.info(""String_Node_Str"");
    return RETURN_OK;
  }
 catch (  Exception err) {
    return wrapException(err);
  }
 finally {
    CloserUtil.close(pw);
    CloserUtil.close(in);
    CloserUtil.close(lr);
  }
}",0.9973013887974724
161293,"@Override protected Collection<Throwable> call(final String inputName) throws Exception {
  if (this.XML == null) {
    return wrapException(""String_Node_Str"" + OPTION_XML + ""String_Node_Str"");
  }
  final Map<String,Map<Integer,String>> flowcell2lane2id=new HashMap<String,Map<Integer,String>>();
  SamReader sfr=null;
  SAMFileWriter sfw=null;
  try {
    final Pattern readNameSignature=Pattern.compile(super.readNameSignatureStr);
    final JAXBContext context=JAXBContext.newInstance(ReadGroup.class,ReadGroupList.class);
    final Unmarshaller unmarshaller=context.createUnmarshaller();
    final ReadGroupList rgl=unmarshaller.unmarshal(new StreamSource(XML),ReadGroupList.class).getValue();
    if (rgl.flowcells.isEmpty()) {
      return wrapException(""String_Node_Str"" + XML);
    }
    sfr=openSamReader(inputName);
    final SAMFileHeader header=sfr.getFileHeader().clone();
    header.addComment(""String_Node_Str"" + getName());
    final Set<String> seenids=new HashSet<String>();
    final List<SAMReadGroupRecord> samReadGroupRecords=new ArrayList<SAMReadGroupRecord>();
    for (    final FlowCell fc : rgl.flowcells) {
      final Map<Integer,String> lane2id=new HashMap<Integer,String>();
      for (      final Lane lane : fc.lanes) {
        for (        final ReadGroup rg : lane.readGroups) {
          if (seenids.contains(rg.id)) {
            return wrapException(""String_Node_Str"" + rg.id + ""String_Node_Str"");
          }
          seenids.add(rg.id);
          final SAMReadGroupRecord rgrec=new SAMReadGroupRecord(rg.id);
          rgrec.setLibrary(rg.library);
          rgrec.setPlatform(rg.platform);
          rgrec.setSample(rg.sample);
          rgrec.setPlatformUnit(rg.platform);
          if (rg.center != null)           rgrec.setSequencingCenter(rg.center);
          if (rg.description != null)           rgrec.setDescription(rg.description);
          lane2id.put(lane.id,rg.id);
          samReadGroupRecords.add(rgrec);
        }
      }
      if (flowcell2lane2id.containsKey(fc.name)) {
        return wrapException(""String_Node_Str"" + fc.name + ""String_Node_Str"");
      }
      flowcell2lane2id.put(fc.name,lane2id);
    }
    header.setReadGroups(samReadGroupRecords);
    sfw=openSAMFileWriter(header,true);
    final SAMSequenceDictionaryProgress progress=new SAMSequenceDictionaryProgress(header);
    final SAMRecordIterator iter=sfr.iterator();
    while (iter.hasNext()) {
      final SAMRecord rec=progress.watch(iter.next());
      final Matcher matcher=readNameSignature.matcher(rec.getReadName());
      final String flowcellStr;
      final String laneStr;
      if (matcher.matches()) {
        flowcellStr=matcher.group(1);
        laneStr=matcher.group(2);
      }
 else {
        return wrapException(""String_Node_Str"" + rec.getReadName() + ""String_Node_Str""+ readNameSignature.pattern()+ ""String_Node_Str""+ OPTION_READNAMESIGNATURESTR);
      }
      String RGID=null;
      final Map<Integer,String> lane2id=flowcell2lane2id.get(flowcellStr);
      if (lane2id == null)       throw new RuntimeException(""String_Node_Str"" + rec.getReadName());
      try {
        RGID=lane2id.get(Integer.parseInt(laneStr));
      }
 catch (      final Exception e) {
        return wrapException(""String_Node_Str"" + rec.getReadName());
      }
      if (RGID == null) {
        throw new RuntimeException(""String_Node_Str"" + rec.getReadName() + ""String_Node_Str""+ flowcellStr+ ""String_Node_Str""+ laneStr+ ""String_Node_Str""+ lane2id);
      }
      rec.setAttribute(SAMTag.RG.name(),RGID);
      sfw.addAlignment(rec);
    }
    progress.finish();
    iter.close();
    LOG.info(""String_Node_Str"");
    return RETURN_OK;
  }
 catch (  Exception err) {
    return wrapException(err);
  }
 finally {
    CloserUtil.close(sfw);
    CloserUtil.close(sfr);
  }
}","@Override protected Collection<Throwable> call(final String inputName) throws Exception {
  if (this.XML == null) {
    return wrapException(""String_Node_Str"" + OPTION_XML + ""String_Node_Str"");
  }
  final Map<String,Map<Integer,String>> flowcell2lane2id=new HashMap<String,Map<Integer,String>>();
  SamReader sfr=null;
  SAMFileWriter sfw=null;
  try {
    final Pattern readNameSignature=Pattern.compile(super.readNameSignatureStr);
    final JAXBContext context=JAXBContext.newInstance(ReadGroup.class,ReadGroupList.class);
    final Unmarshaller unmarshaller=context.createUnmarshaller();
    final ReadGroupList rgl=unmarshaller.unmarshal(new StreamSource(XML),ReadGroupList.class).getValue();
    if (rgl.flowcells.isEmpty()) {
      return wrapException(""String_Node_Str"" + XML);
    }
    sfr=openSamReader(inputName);
    final SAMFileHeader header=sfr.getFileHeader().clone();
    header.addComment(""String_Node_Str"" + getName());
    final Set<String> seenids=new HashSet<String>();
    final List<SAMReadGroupRecord> samReadGroupRecords=new ArrayList<SAMReadGroupRecord>();
    for (    final FlowCell fc : rgl.flowcells) {
      final Map<Integer,String> lane2id=new HashMap<Integer,String>();
      for (      final Lane lane : fc.lanes) {
        for (        final ReadGroup rg : lane.readGroups) {
          if (seenids.contains(rg.id)) {
            return wrapException(""String_Node_Str"" + rg.id + ""String_Node_Str"");
          }
          seenids.add(rg.id);
          final SAMReadGroupRecord rgrec=new SAMReadGroupRecord(rg.id);
          rgrec.setLibrary(rg.library);
          rgrec.setPlatform(rg.platform);
          rgrec.setSample(rg.sample);
          rgrec.setPlatformUnit(rg.platformunit);
          if (rg.center != null)           rgrec.setSequencingCenter(rg.center);
          if (rg.description != null)           rgrec.setDescription(rg.description);
          lane2id.put(lane.id,rg.id);
          samReadGroupRecords.add(rgrec);
        }
      }
      if (flowcell2lane2id.containsKey(fc.name)) {
        return wrapException(""String_Node_Str"" + fc.name + ""String_Node_Str"");
      }
      flowcell2lane2id.put(fc.name,lane2id);
    }
    header.setReadGroups(samReadGroupRecords);
    sfw=openSAMFileWriter(header,true);
    final SAMSequenceDictionaryProgress progress=new SAMSequenceDictionaryProgress(header);
    final SAMRecordIterator iter=sfr.iterator();
    while (iter.hasNext()) {
      final SAMRecord rec=progress.watch(iter.next());
      final Matcher matcher=readNameSignature.matcher(rec.getReadName());
      final String flowcellStr;
      final String laneStr;
      if (matcher.matches()) {
        flowcellStr=matcher.group(1);
        laneStr=matcher.group(2);
      }
 else {
        return wrapException(""String_Node_Str"" + rec.getReadName() + ""String_Node_Str""+ readNameSignature.pattern()+ ""String_Node_Str""+ OPTION_READNAMESIGNATURESTR);
      }
      String RGID=null;
      final Map<Integer,String> lane2id=flowcell2lane2id.get(flowcellStr);
      if (lane2id == null)       throw new RuntimeException(""String_Node_Str"" + rec.getReadName());
      try {
        RGID=lane2id.get(Integer.parseInt(laneStr));
      }
 catch (      final Exception e) {
        return wrapException(""String_Node_Str"" + rec.getReadName());
      }
      if (RGID == null) {
        throw new RuntimeException(""String_Node_Str"" + rec.getReadName() + ""String_Node_Str""+ flowcellStr+ ""String_Node_Str""+ laneStr+ ""String_Node_Str""+ lane2id);
      }
      rec.setAttribute(SAMTag.RG.name(),RGID);
      sfw.addAlignment(rec);
    }
    progress.finish();
    iter.close();
    LOG.info(""String_Node_Str"");
    return RETURN_OK;
  }
 catch (  Exception err) {
    return wrapException(err);
  }
 finally {
    CloserUtil.close(sfw);
    CloserUtil.close(sfr);
  }
}",0.9994747899159664
161294,"public IndexedBedReader(File bedFile) throws IOException {
  this.source=bedFile;
  this.bedCodec=new BedLineCodec();
  if (bedFile == null)   throw new NullPointerException(""String_Node_Str"");
  if (!bedFile.isFile())   throw new IOException(""String_Node_Str"" + bedFile);
  if (!bedFile.canRead())   throw new IOException(""String_Node_Str"" + bedFile);
  this.reader=AbstractFeatureReader.getFeatureReader(bedFile.getPath(),bedCodec,false);
  File indexFile=Tribble.indexFile(this.source);
  if (indexFile.exists() && indexFile.lastModified() < bedFile.lastModified()) {
    LOG.info(""String_Node_Str"" + this.source);
    this.tribbleIndex=IndexFactory.loadIndex(indexFile.getPath());
  }
 else {
    LOG.info(""String_Node_Str"" + this.source + ""String_Node_Str""+ indexFile);
    this.tribbleIndex=IndexFactory.createLinearIndex(bedFile,this.bedCodec);
  }
  this.reader=AbstractFeatureReader.getFeatureReader(bedFile.getPath(),this.bedCodec,this.tribbleIndex);
}","public IndexedBedReader(File bedFile) throws IOException {
  this.source=bedFile;
  if (bedFile == null)   throw new NullPointerException(""String_Node_Str"");
  if (!bedFile.isFile())   throw new IOException(""String_Node_Str"" + bedFile);
  if (!bedFile.canRead())   throw new IOException(""String_Node_Str"" + bedFile);
  if (bedFile.getName().endsWith(""String_Node_Str"")) {
    this.reader=new TabixReader(bedFile);
  }
 else {
    this.reader=new TribbleReader(bedFile);
  }
}",0.5010438413361169
161295,"public CloseableIterator<BedLine> iterator(String chrom,int start,int end) throws IOException {
  checkOpen();
  return this.reader.query(chrom,start,end);
}","@Override protected CloseableIterator<BedLine> iterator(Iterator<String> delegate){
  return new MyIterator(delegate);
}",0.51985559566787
161296,"@Override public void close() throws IOException {
  CloserUtil.close(reader);
  this.reader=null;
  this.tribbleIndex=null;
}","@Override public void close(){
}",0.4050632911392405
161297,"@Override public int doWork(String[] args){
  Set<File> bamFiles=new HashSet<>();
  com.github.lindenb.jvarkit.util.cli.GetOpt opt=new com.github.lindenb.jvarkit.util.cli.GetOpt();
  int c;
  while ((c=opt.getopt(args,getGetOptDefault() + ""String_Node_Str"")) != -1) {
switch (c) {
case 'd':
      this.minDepth=Integer.parseInt(opt.getOptArg());
    break;
case 'f':
{
    try {
      BufferedReader in=IOUtils.openURIForBufferedReading(opt.getOptArg());
      String line;
      while ((line=in.readLine()) != null) {
        if (line.startsWith(""String_Node_Str"") || line.trim().isEmpty())         continue;
        bamFiles.add(new File(line));
      }
      in.close();
    }
 catch (    Exception e) {
      error(e);
      return -1;
    }
    break;
  }
default :
{
switch (handleOtherOptions(c,opt,args)) {
case EXIT_FAILURE:
    return -1;
case EXIT_SUCCESS:
  return 0;
default :
break;
}
}
}
}
VcfIterator in=null;
try {
SamReaderFactory srf=SamReaderFactory.makeDefault();
srf.validationStringency(ValidationStringency.SILENT);
for (File bam : bamFiles) {
info(""String_Node_Str"" + bam);
SamReader reader=srf.open(bam);
SAMFileHeader header=reader.getFileHeader();
for (SAMReadGroupRecord g : header.getReadGroups()) {
if (g.getSample() == null) continue;
String sample=g.getSample();
if (sample.isEmpty()) continue;
Set<File> set=this.sample2bam.get(sample);
if (set == null) {
set=new HashSet<>();
this.sample2bam.put(sample,set);
}
set.add(bam);
}
reader.close();
}
if (opt.getOptInd() == args.length) {
in=VCFUtils.createVcfIteratorStdin();
}
 else if (opt.getOptInd() + 1 == args.length) {
in=VCFUtils.createVcfIterator(args[opt.getOptInd()]);
}
 else {
error(getMessageBundle(""String_Node_Str""));
return -1;
}
File tmpFile1=File.createTempFile(""String_Node_Str"",""String_Node_Str"",getTmpDirectories().get(0));
File tmpFile2=File.createTempFile(""String_Node_Str"",""String_Node_Str"",getTmpDirectories().get(0));
VCFHeader header=in.getHeader();
VCFHeader h2=new VCFHeader(header);
final String FIXED_TAG=""String_Node_Str"";
h2.addMetaDataLine(new VCFFormatHeaderLine(FIXED_TAG,1,VCFHeaderLineType.Integer,""String_Node_Str"" + this.minDepth + ""String_Node_Str""));
h2.addMetaDataLine(new VCFHeaderLine(getClass().getSimpleName() + ""String_Node_Str"",String.valueOf(getProgramCommandLine())));
h2.addMetaDataLine(new VCFHeaderLine(getClass().getSimpleName() + ""String_Node_Str"",String.valueOf(getVersion())));
h2.addMetaDataLine(new VCFHeaderLine(getClass().getSimpleName() + ""String_Node_Str"",HtsjdkVersion.getVersion()));
h2.addMetaDataLine(new VCFHeaderLine(getClass().getSimpleName() + ""String_Node_Str"",HtsjdkVersion.getHome()));
for (int i=0; i < header.getNGenotypeSamples(); ++i) {
int countFixed=0;
int countNonFixed=0;
int countTotal=0;
String sample=header.getSampleNamesInOrder().get(i);
info(""String_Node_Str"" + sample);
Set<File> bams=this.sample2bam.get(sample);
if (bamFiles == null || bamFiles.isEmpty()) {
warning(""String_Node_Str"" + sample);
}
List<SamReader> samReaders=new ArrayList<>(bams.size());
for (File bam : bams) {
info(""String_Node_Str"" + bam);
samReaders.add(srf.open(bam));
}
VariantContextWriter w=VCFUtils.createVariantContextWriter(i % 2 == 0 ? tmpFile1 : tmpFile2);
w.writeHeader(h2);
while (in.hasNext()) {
VariantContext ctx=in.next();
countTotal++;
if (samReaders.isEmpty()) {
w.add(ctx);
continue;
}
Genotype genotype=ctx.getGenotype(sample);
if (genotype != null && genotype.isCalled()) {
w.add(ctx);
continue;
}
int depth=0;
for (SamReader sr : samReaders) {
SAMRecordIterator iter=sr.query(ctx.getChr(),ctx.getStart(),ctx.getEnd(),false);
while (iter.hasNext()) {
SAMRecord rec=iter.next();
if (rec.getReadUnmappedFlag()) continue;
if (rec.getDuplicateReadFlag()) continue;
if (rec.isSecondaryOrSupplementary()) continue;
SAMReadGroupRecord rg=rec.getReadGroup();
if (!sample.equals(rg.getSample())) continue;
Cigar cigar=rec.getCigar();
if (cigar == null) continue;
int refPos=rec.getAlignmentStart();
for (CigarElement ce : cigar.getCigarElements()) {
if (!ce.getOperator().consumesReferenceBases()) continue;
if (ce.getOperator().consumesReadBases() && refPos <= ctx.getStart() && ctx.getStart() <= refPos + ce.getLength()) {
  depth++;
  break;
}
refPos=ce.getLength();
}
}
iter.close();
}
if (depth < this.minDepth) {
countNonFixed++;
w.add(ctx);
continue;
}
List<Allele> homozygous=new ArrayList<>(2);
homozygous.add(ctx.getReference());
homozygous.add(ctx.getReference());
GenotypeBuilder gb=new GenotypeBuilder(genotype);
gb.alleles(homozygous);
gb.attribute(FIXED_TAG,1);
if (header.getFormatHeaderLine(""String_Node_Str"") != null) {
gb.DP(depth);
}
GenotypesContext gtx=GenotypesContext.copy(ctx.getGenotypes());
gtx.replace(gb.make());
VariantContextBuilder vcb=new VariantContextBuilder(ctx);
vcb.genotypes(gtx);
w.add(vcb.make());
countFixed++;
}
w.close();
in.close();
for (SamReader r : samReaders) CloserUtil.close(r);
info(""String_Node_Str"" + sample + ""String_Node_Str""+ countFixed+ ""String_Node_Str""+ countNonFixed+ ""String_Node_Str""+ countTotal+ ""String_Node_Str"");
in=VCFUtils.createVcfIteratorFromFile(i % 2 == 0 ? tmpFile1 : tmpFile2);
h2=in.getHeader();
}
VariantContextWriter w=VCFUtils.createVariantContextWriterToStdout();
w.writeHeader(h2);
while (in.hasNext()) {
w.add(in.next());
}
in.close();
w.close();
tmpFile1.delete();
tmpFile2.delete();
return 0;
}
 catch (Exception err) {
error(err);
return -1;
}
 finally {
CloserUtil.close(in);
}
}","@Override public int doWork(String[] args){
  Set<File> bamFiles=new HashSet<>();
  com.github.lindenb.jvarkit.util.cli.GetOpt opt=new com.github.lindenb.jvarkit.util.cli.GetOpt();
  int c;
  while ((c=opt.getopt(args,getGetOptDefault() + ""String_Node_Str"")) != -1) {
switch (c) {
case 'd':
      this.minDepth=Integer.parseInt(opt.getOptArg());
    break;
case 'f':
{
    try {
      BufferedReader in=IOUtils.openURIForBufferedReading(opt.getOptArg());
      String line;
      while ((line=in.readLine()) != null) {
        if (line.startsWith(""String_Node_Str"") || line.trim().isEmpty())         continue;
        bamFiles.add(new File(line));
      }
      in.close();
    }
 catch (    Exception e) {
      error(e);
      return -1;
    }
    break;
  }
default :
{
switch (handleOtherOptions(c,opt,args)) {
case EXIT_FAILURE:
    return -1;
case EXIT_SUCCESS:
  return 0;
default :
break;
}
}
}
}
VcfIterator in=null;
try {
SamReaderFactory srf=SamReaderFactory.makeDefault();
srf.validationStringency(ValidationStringency.SILENT);
for (File bam : bamFiles) {
info(""String_Node_Str"" + bam);
SamReader reader=srf.open(bam);
SAMFileHeader header=reader.getFileHeader();
for (SAMReadGroupRecord g : header.getReadGroups()) {
if (g.getSample() == null) continue;
String sample=g.getSample();
if (sample.isEmpty()) continue;
Set<File> set=this.sample2bam.get(sample);
if (set == null) {
set=new HashSet<>();
this.sample2bam.put(sample,set);
}
set.add(bam);
}
reader.close();
}
if (opt.getOptInd() == args.length) {
in=VCFUtils.createVcfIteratorStdin();
}
 else if (opt.getOptInd() + 1 == args.length) {
in=VCFUtils.createVcfIterator(args[opt.getOptInd()]);
}
 else {
error(getMessageBundle(""String_Node_Str""));
return -1;
}
File tmpFile1=File.createTempFile(""String_Node_Str"",""String_Node_Str"",getTmpDirectories().get(0));
File tmpFile2=File.createTempFile(""String_Node_Str"",""String_Node_Str"",getTmpDirectories().get(0));
VCFHeader header=in.getHeader();
VCFHeader h2=new VCFHeader(header);
final String FIXED_TAG=""String_Node_Str"";
h2.addMetaDataLine(new VCFFormatHeaderLine(FIXED_TAG,1,VCFHeaderLineType.Integer,""String_Node_Str"" + this.minDepth + ""String_Node_Str""));
h2.addMetaDataLine(new VCFHeaderLine(getClass().getSimpleName() + ""String_Node_Str"",String.valueOf(getProgramCommandLine())));
h2.addMetaDataLine(new VCFHeaderLine(getClass().getSimpleName() + ""String_Node_Str"",String.valueOf(getVersion())));
h2.addMetaDataLine(new VCFHeaderLine(getClass().getSimpleName() + ""String_Node_Str"",HtsjdkVersion.getVersion()));
h2.addMetaDataLine(new VCFHeaderLine(getClass().getSimpleName() + ""String_Node_Str"",HtsjdkVersion.getHome()));
for (int i=0; i < header.getNGenotypeSamples(); ++i) {
int countFixed=0;
int countNonFixed=0;
int countTotal=0;
String sample=header.getSampleNamesInOrder().get(i);
info(""String_Node_Str"" + sample);
Set<File> bams=this.sample2bam.get(sample);
if (bams == null) bams=new HashSet<File>();
if (bams.isEmpty()) {
warning(""String_Node_Str"" + sample);
}
List<SamReader> samReaders=new ArrayList<>(bams.size());
for (File bam : bams) {
info(""String_Node_Str"" + bam);
samReaders.add(srf.open(bam));
}
VariantContextWriter w=VCFUtils.createVariantContextWriter(i % 2 == 0 ? tmpFile1 : tmpFile2);
w.writeHeader(h2);
while (in.hasNext()) {
VariantContext ctx=in.next();
countTotal++;
if (samReaders.isEmpty()) {
w.add(ctx);
continue;
}
Genotype genotype=ctx.getGenotype(sample);
if (genotype != null && genotype.isCalled()) {
w.add(ctx);
continue;
}
int depth=0;
for (SamReader sr : samReaders) {
SAMRecordIterator iter=sr.query(ctx.getChr(),ctx.getStart(),ctx.getEnd(),false);
while (iter.hasNext()) {
SAMRecord rec=iter.next();
if (rec.getReadUnmappedFlag()) continue;
if (rec.getDuplicateReadFlag()) continue;
if (rec.isSecondaryOrSupplementary()) continue;
SAMReadGroupRecord rg=rec.getReadGroup();
if (!sample.equals(rg.getSample())) continue;
Cigar cigar=rec.getCigar();
if (cigar == null) continue;
int refPos=rec.getAlignmentStart();
for (CigarElement ce : cigar.getCigarElements()) {
if (!ce.getOperator().consumesReferenceBases()) continue;
if (ce.getOperator().consumesReadBases() && refPos <= ctx.getStart() && ctx.getStart() <= refPos + ce.getLength()) {
  depth++;
  break;
}
refPos=ce.getLength();
}
}
iter.close();
}
if (depth < this.minDepth) {
countNonFixed++;
w.add(ctx);
continue;
}
List<Allele> homozygous=new ArrayList<>(2);
homozygous.add(ctx.getReference());
homozygous.add(ctx.getReference());
GenotypeBuilder gb=new GenotypeBuilder(genotype);
gb.alleles(homozygous);
gb.attribute(FIXED_TAG,1);
if (header.getFormatHeaderLine(""String_Node_Str"") != null) {
gb.DP(depth);
}
GenotypesContext gtx=GenotypesContext.copy(ctx.getGenotypes());
gtx.replace(gb.make());
VariantContextBuilder vcb=new VariantContextBuilder(ctx);
vcb.genotypes(gtx);
w.add(vcb.make());
countFixed++;
}
w.close();
in.close();
for (SamReader r : samReaders) CloserUtil.close(r);
info(""String_Node_Str"" + sample + ""String_Node_Str""+ countFixed+ ""String_Node_Str""+ countNonFixed+ ""String_Node_Str""+ countTotal+ ""String_Node_Str"");
in=VCFUtils.createVcfIteratorFromFile(i % 2 == 0 ? tmpFile1 : tmpFile2);
h2=in.getHeader();
}
VariantContextWriter w=VCFUtils.createVariantContextWriterToStdout();
w.writeHeader(h2);
while (in.hasNext()) {
w.add(in.next());
}
in.close();
w.close();
tmpFile1.delete();
tmpFile2.delete();
return 0;
}
 catch (Exception err) {
error(err);
return -1;
}
 finally {
CloserUtil.close(in);
}
}",0.9944741204641738
161298,"private void failing(SAMRecord rec,SAMFileHeader h){
  openFailing(h);
  failingReadsWriter.addAlignment(rec);
}","private void failing(SAMRecord rec,SAMFileHeader h){
  openFailing(h);
  if (failingReadsWriter != null)   failingReadsWriter.addAlignment(rec);
}",0.8682170542635659
161299,"private void analyze(File f){
  LOG.debug(""String_Node_Str"" + f);
  if (f.isDirectory()) {
    for (    File c : f.listFiles()) {
      analyze(c);
    }
  }
 else {
    String name=f.getName();
    if (name.endsWith(""String_Node_Str"") || name.endsWith(""String_Node_Str"")) {
      readBam(f);
    }
 else     if (name.endsWith(""String_Node_Str"") || name.endsWith(""String_Node_Str"")) {
      readVCF(f);
    }
 else     if (name.endsWith(""String_Node_Str"") || name.endsWith(""String_Node_Str"") || name.endsWith(""String_Node_Str"")|| name.endsWith(""String_Node_Str"")) {
      readFastq(f);
    }
  }
}","private void analyze(File f){
  if (f == null)   return;
  if (!f.canRead())   return;
  LOG.debug(""String_Node_Str"" + f);
  if (f.isDirectory()) {
    File children[]=f.listFiles();
    if (children == null)     return;
    for (    File c : f.listFiles()) {
      analyze(c);
    }
  }
 else {
    String name=f.getName();
    if (name.endsWith(""String_Node_Str"") || name.endsWith(""String_Node_Str"")) {
      readBam(f);
    }
 else     if (name.endsWith(""String_Node_Str"") || name.endsWith(""String_Node_Str"")) {
      readVCF(f);
    }
 else     if (name.endsWith(""String_Node_Str"") || name.endsWith(""String_Node_Str"") || name.endsWith(""String_Node_Str"")|| name.endsWith(""String_Node_Str"")) {
      readFastq(f);
    }
  }
}",0.9018126888217524
161300,"@Override public String getBedName(){
  String fkey=this.gbFeature.getGBFeatureKey();
  TreeMap<QualKey,String> t=new TreeMap<QualKey,String>();
  for (  GBQualifier q : this.gbFeature.getGBFeatureQuals().getGBQualifier()) {
    String key=q.getGBQualifierName();
    for (    QualKey qk : QualKey.values()) {
      if (qk.name().equals(key)) {
        t.put(qk,q.getGBQualifierValue());
        break;
      }
    }
  }
  if (t.isEmpty()) {
    LOG.info(""String_Node_Str"" + fkey);
    if (!APPEND_ACN)     return fkey;
    return gbName() + ""String_Node_Str"" + fkey;
  }
  if (!APPEND_ACN)   return fkey + ""String_Node_Str"" + t.get(t.keySet().iterator().next());
  return gbName() + ""String_Node_Str"" + fkey+ ""String_Node_Str""+ t.get(t.keySet().iterator().next());
}","@Override public String getBedName(){
  String fkey=this.gbFeature.getGBFeatureKey();
  TreeMap<QualKey,String> t=new TreeMap<QualKey,String>();
  if (this.gbFeature.getGBFeatureQuals() != null && this.gbFeature.getGBFeatureQuals().getGBQualifier() != null) {
    for (    GBQualifier q : this.gbFeature.getGBFeatureQuals().getGBQualifier()) {
      String key=q.getGBQualifierName();
      for (      QualKey qk : QualKey.values()) {
        if (qk.name().equals(key)) {
          t.put(qk,q.getGBQualifierValue());
          break;
        }
      }
    }
  }
  if (t.isEmpty()) {
    LOG.info(""String_Node_Str"" + fkey);
    if (!APPEND_ACN)     return fkey;
    return gbName() + ""String_Node_Str"" + fkey;
  }
  if (!APPEND_ACN)   return fkey + ""String_Node_Str"" + t.get(t.keySet().iterator().next());
  return gbName() + ""String_Node_Str"" + fkey+ ""String_Node_Str""+ t.get(t.keySet().iterator().next());
}",0.875223880597015
161301,"private void printUniprot(Uniprot uniprotSet){
  if (uniprotSet.getEntry().isEmpty()) {
    LOG.warn(""String_Node_Str"");
    return;
  }
  if (uniprotSet.getEntry().size() > 1) {
    LOG.warn(""String_Node_Str"");
  }
  for (  Entry entry : uniprotSet.getEntry()) {
    BlastOutputIterations iterations=this.blastOutput.getBlastOutputIterations();
    for (    Iteration iteration : iterations.getIteration()) {
      for (      FeatureType feature : entry.getFeature()) {
        if (!this.FK.isEmpty()) {
          if (!FK.contains(feature.getType())) {
            continue;
          }
        }
        for (        Hit hit : iteration.getIterationHits().getHit()) {
          for (          Hsp hsp : hit.getHitHsps().getHsp()) {
            UniprotInterval bi=new UniprotInterval();
            bi.entry=entry;
            bi.featureType=feature;
            bi.hit=hit;
            bi.hsp=hsp;
            LOG.info(""String_Node_Str"" + bi);
            if (!bi.isFeatureOverlapHsp()) {
              continue;
            }
            System.out.println(bi.toBedString());
          }
        }
      }
      break;
    }
    break;
  }
}","private void printUniprot(Uniprot uniprotSet){
  if (uniprotSet.getEntry().isEmpty()) {
    LOG.warn(""String_Node_Str"");
    return;
  }
  if (uniprotSet.getEntry().size() > 1) {
    LOG.warn(""String_Node_Str"");
  }
  for (  Entry entry : uniprotSet.getEntry()) {
    BlastOutputIterations iterations=this.blastOutput.getBlastOutputIterations();
    for (    Iteration iteration : iterations.getIteration()) {
      for (      FeatureType feature : entry.getFeature()) {
        if (!this.FK.isEmpty()) {
          if (!FK.contains(feature.getType())) {
            continue;
          }
        }
        for (        Hit hit : iteration.getIterationHits().getHit()) {
          for (          Hsp hsp : hit.getHitHsps().getHsp()) {
            UniprotInterval bi=new UniprotInterval();
            bi.entry=entry;
            bi.featureType=feature;
            bi.hit=hit;
            bi.hsp=hsp;
            LOG.debug(""String_Node_Str"" + bi);
            if (!bi.isFeatureOverlapHsp()) {
              continue;
            }
            System.out.println(bi.toBedString());
          }
        }
      }
      break;
    }
    break;
  }
}",0.9960681520314548
161302,"private void printGB(GBSet gbSet){
  for (  GBSeq gbSeq : gbSet.getGBSeq()) {
    BlastOutputIterations iterations=this.blastOutput.getBlastOutputIterations();
    for (    Iteration iteration : iterations.getIteration()) {
      for (      GBFeature feature : gbSeq.getGBSeqFeatureTable().getGBFeature()) {
        if (feature.getGBFeatureIntervals() == null)         continue;
        if (!this.FK.isEmpty()) {
          if (!FK.contains(feature.getGBFeatureKey())) {
            continue;
          }
        }
        for (        GBInterval interval : feature.getGBFeatureIntervals().getGBInterval()) {
          for (          Hit hit : iteration.getIterationHits().getHit()) {
            for (            Hsp hsp : hit.getHitHsps().getHsp()) {
              GenbankInterval bi=new GenbankInterval();
              bi.gbSeq=gbSeq;
              bi.gbFeature=feature;
              bi.gbInterval=interval;
              bi.hit=hit;
              bi.hsp=hsp;
              LOG.info(""String_Node_Str"" + bi);
              if (!bi.isGbForward())               LOG.info(""String_Node_Str"");
              if (!bi.isFeatureOverlapHsp())               continue;
              System.out.println(bi.toBedString());
            }
          }
        }
      }
      break;
    }
  }
}","private void printGB(GBSet gbSet){
  for (  GBSeq gbSeq : gbSet.getGBSeq()) {
    BlastOutputIterations iterations=this.blastOutput.getBlastOutputIterations();
    for (    Iteration iteration : iterations.getIteration()) {
      for (      GBFeature feature : gbSeq.getGBSeqFeatureTable().getGBFeature()) {
        if (feature.getGBFeatureIntervals() == null)         continue;
        if (!this.FK.isEmpty()) {
          if (!FK.contains(feature.getGBFeatureKey())) {
            continue;
          }
        }
        for (        GBInterval interval : feature.getGBFeatureIntervals().getGBInterval()) {
          for (          Hit hit : iteration.getIterationHits().getHit()) {
            for (            Hsp hsp : hit.getHitHsps().getHsp()) {
              GenbankInterval bi=new GenbankInterval();
              bi.gbSeq=gbSeq;
              bi.gbFeature=feature;
              bi.gbInterval=interval;
              bi.hit=hit;
              bi.hsp=hsp;
              LOG.debug(""String_Node_Str"" + bi);
              if (!bi.isGbForward())               LOG.info(""String_Node_Str"");
              if (!bi.isFeatureOverlapHsp())               continue;
              System.out.println(bi.toBedString());
            }
          }
        }
      }
      break;
    }
  }
}",0.9964884900507218
161303,"public int maxPoints(Point[] points){
  Map<Double,Integer> map=new HashMap<Double,Integer>();
  int ret=0;
  int size=points.length;
  for (int i=0; i < size; i++) {
    int invalidK=0;
    int add=1;
    for (int j=i + 1; j < size; j++) {
      if (points[j].x == points[i].x) {
        if (points[j].y == points[i].y) {
          add++;
        }
 else {
          invalidK++;
        }
        continue;
      }
      double k=points[j].y == points[i].y ? 0.0 : (1.0 * (points[j].y - points[i].y)) / (points[j].x - points[i].x);
      if (map.containsKey(k)) {
        int count=map.get(k);
        map.put(k,count + 1);
      }
 else {
        map.put(k,1);
      }
    }
    for (    Integer it : map.values()) {
      if (it + add > ret) {
        ret=it.intValue() + add;
      }
    }
    ret=Math.max(invalidK + add,ret);
    map.clear();
  }
  return ret;
}","public int maxPoints(Point[] points){
  Map<Line,Integer> map=new HashMap<Line,Integer>();
  int ret=0;
  int size=points.length;
  for (int i=0; i < size; i++) {
    int dup=0;
    for (int j=i + 1; j < size; j++) {
      Line line=null;
      if (points[j].x == points[i].x) {
        if (points[j].y == points[i].y) {
          dup++;
          continue;
        }
        line=new Line(Double.MAX_VALUE,Double.MAX_VALUE);
      }
 else {
        double slope=points[j].y == points[i].y ? 0.0 : (1.0 * (points[j].y - points[i].y)) / (points[j].x - points[i].x);
        double intercept=points[i].y - slope * points[i].x;
        line=new Line(slope,intercept);
      }
      if (map.containsKey(line)) {
        map.put(line,map.get(line) + 1);
      }
 else {
        map.put(line,2);
      }
    }
    for (    Integer count : map.values()) {
      ret=Math.max(ret,count.intValue() + dup);
    }
    map.clear();
  }
  return ret > 0 ? ret : points.length;
}",0.3993453355155483
161304,"/** 
 * Returns a collection of classes whose non-abstract methods should always be replaced with no-ops. By default, this list includes   {@link Composite},   {@link DOM} {@link UIObject},  {@link Widget},   {@link Image}, and most subclasses of   {@link Panel}. It will also include any classes specified via the   {@link WithClassesToStub} annotation on the test class. This makesit much safer to test code that uses or extends these types. <p> This list can be customized via  {@link WithClassesToStub} or by defining a new test runnerextending  {@link GwtMockitoTestRunner} and overriding this method. This allows users toexplicitly stub out particular classes that are causing problems in tests. If you override this method, you will probably want to retain the classes that are stubbed here by doing something like this: <pre> &#064;Override protected Collection&lt;Class&lt;?&gt;&gt; getClassesToStub() { Collection&lt;Class&lt;?&gt;&gt; classes = super.getClassesToStub(); classes.add(MyBaseWidget.class); return classes; } </pre>
 * @return a collection of classes whose methods should be stubbed with no-ops while running tests
 */
protected Collection<Class<?>> getClassesToStub(){
  Collection<Class<?>> classes=new LinkedList<Class<?>>();
  classes.add(Composite.class);
  classes.add(DOM.class);
  classes.add(UIObject.class);
  classes.add(Widget.class);
  classes.add(Image.class);
  classes.add(AbsolutePanel.class);
  classes.add(CellList.class);
  classes.add(CellPanel.class);
  classes.add(CellTable.class);
  classes.add(ComplexPanel.class);
  classes.add(DeckLayoutPanel.class);
  classes.add(DeckPanel.class);
  classes.add(DecoratorPanel.class);
  classes.add(DockLayoutPanel.class);
  classes.add(DockPanel.class);
  classes.add(FlowPanel.class);
  classes.add(FocusPanel.class);
  classes.add(HorizontalPanel.class);
  classes.add(HTMLPanel.class);
  classes.add(LayoutPanel.class);
  classes.add(Panel.class);
  classes.add(PopupPanel.class);
  classes.add(RenderablePanel.class);
  classes.add(ResizeLayoutPanel.class);
  classes.add(SimpleLayoutPanel.class);
  classes.add(SimplePanel.class);
  classes.add(SplitLayoutPanel.class);
  classes.add(StackPanel.class);
  classes.add(VerticalPanel.class);
  WithClassesToStub annotation=unitTestClass.getAnnotation(WithClassesToStub.class);
  if (annotation != null) {
    classes.addAll(Arrays.asList(annotation.value()));
  }
  return classes;
}","/** 
 * Returns a collection of classes whose non-abstract methods should always be replaced with no-ops. By default, this list includes   {@link Composite},   {@link DOM} {@link UIObject},  {@link Widget},   {@link Image}, and most subclasses of   {@link Panel}. It will also include any classes specified via the   {@link WithClassesToStub} annotation on the test class. This makesit much safer to test code that uses or extends these types. <p> This list can be customized via  {@link WithClassesToStub} or by defining a new test runnerextending  {@link GwtMockitoTestRunner} and overriding this method. This allows users toexplicitly stub out particular classes that are causing problems in tests. If you override this method, you will probably want to retain the classes that are stubbed here by doing something like this: <pre> &#064;Override protected Collection&lt;Class&lt;?&gt;&gt; getClassesToStub() { Collection&lt;Class&lt;?&gt;&gt; classes = super.getClassesToStub(); classes.add(MyBaseWidget.class); return classes; } </pre>
 * @return a collection of classes whose methods should be stubbed with no-ops while running tests
 */
protected Collection<Class<?>> getClassesToStub(){
  Collection<Class<?>> classes=new LinkedList<Class<?>>();
  classes.add(Composite.class);
  classes.add(DOM.class);
  classes.add(UIObject.class);
  classes.add(Widget.class);
  classes.add(DataGrid.class);
  classes.add(Image.class);
  classes.add(AbsolutePanel.class);
  classes.add(CellList.class);
  classes.add(CellPanel.class);
  classes.add(CellTable.class);
  classes.add(ComplexPanel.class);
  classes.add(DeckLayoutPanel.class);
  classes.add(DeckPanel.class);
  classes.add(DecoratorPanel.class);
  classes.add(DockLayoutPanel.class);
  classes.add(DockPanel.class);
  classes.add(FlowPanel.class);
  classes.add(FocusPanel.class);
  classes.add(HorizontalPanel.class);
  classes.add(HTMLPanel.class);
  classes.add(LayoutPanel.class);
  classes.add(Panel.class);
  classes.add(PopupPanel.class);
  classes.add(RenderablePanel.class);
  classes.add(ResizeLayoutPanel.class);
  classes.add(SimpleLayoutPanel.class);
  classes.add(SimplePanel.class);
  classes.add(SplitLayoutPanel.class);
  classes.add(StackPanel.class);
  classes.add(VerticalPanel.class);
  WithClassesToStub annotation=unitTestClass.getAnnotation(WithClassesToStub.class);
  if (annotation != null) {
    classes.addAll(Arrays.asList(annotation.value()));
  }
  return classes;
}",0.993643633381177
161305,"@Override public Class<?> loadClass(String name) throws ClassNotFoundException {
  for (  String blacklistedPackage : getPackagesToLoadViaStandardClassloader()) {
    if (name.startsWith(blacklistedPackage)) {
      return GwtMockitoTestRunner.class.getClassLoader().loadClass(name);
    }
  }
  return super.loadClass(name);
}","@Override protected Class<?> loadClass(String name,boolean resolve) throws ClassNotFoundException {
  for (  String blacklistedPackage : getPackagesToLoadViaStandardClassloader()) {
    if (name.startsWith(blacklistedPackage)) {
      Class<?> clazz=GwtMockitoTestRunner.class.getClassLoader().loadClass(name);
      if (resolve) {
        resolveClass(clazz);
      }
      return clazz;
    }
  }
  return super.loadClass(name,resolve);
}",0.8213820078226858
161306,"/** 
 * Returns a collection of classes whose non-abstract methods should always be replaced with no-ops. By default, this list includes   {@link Composite},   {@link DOM} {@link UIObject},  {@link Widget}, and most subclasses of   {@link Panel}. It will also include any classes specified via the   {@link WithClassesToStub} annotation on the test class. This makes it muchsafer to test code that uses or extends these types. <p> This list can be customized via  {@link WithClassesToStub} or by defining a new test runnerextending  {@link GwtMockitoTestRunner} and overriding this method. This allows users toexplicitly stub out particular classes that are causing problems in tests. If you override this method, you will probably want to retain the classes that are stubbed here by doing something like this: <pre> &#064;Override protected Collection&lt;Class&lt;?&gt;&gt; getClassesToStub() { Collection&lt;Class&lt;?&gt;&gt; classes = super.getClassesToStub(); classes.add(MyBaseWidget.class); return classes; } </pre>
 * @return a collection of classes whose methods should be stubbed with no-ops while running tests
 */
protected Collection<Class<?>> getClassesToStub(){
  Collection<Class<?>> classes=new LinkedList<Class<?>>();
  classes.add(Composite.class);
  classes.add(DOM.class);
  classes.add(UIObject.class);
  classes.add(Widget.class);
  classes.add(AbsolutePanel.class);
  classes.add(CellPanel.class);
  classes.add(ComplexPanel.class);
  classes.add(DeckLayoutPanel.class);
  classes.add(DeckPanel.class);
  classes.add(DecoratorPanel.class);
  classes.add(DockLayoutPanel.class);
  classes.add(DockPanel.class);
  classes.add(FlowPanel.class);
  classes.add(FocusPanel.class);
  classes.add(HorizontalPanel.class);
  classes.add(HTMLPanel.class);
  classes.add(LabelBase.class);
  classes.add(LayoutPanel.class);
  classes.add(Panel.class);
  classes.add(PopupPanel.class);
  classes.add(RenderablePanel.class);
  classes.add(ResizeLayoutPanel.class);
  classes.add(SimpleLayoutPanel.class);
  classes.add(SimplePanel.class);
  classes.add(SplitLayoutPanel.class);
  classes.add(StackPanel.class);
  classes.add(VerticalPanel.class);
  WithClassesToStub annotation=unitTestClass.getAnnotation(WithClassesToStub.class);
  if (annotation != null) {
    classes.addAll(Arrays.asList(annotation.value()));
  }
  return classes;
}","/** 
 * Returns a collection of classes whose non-abstract methods should always be replaced with no-ops. By default, this list includes   {@link Composite},   {@link DOM} {@link UIObject},  {@link Widget}, and most subclasses of   {@link Panel}. It will also include any classes specified via the   {@link WithClassesToStub} annotation on the test class. This makes it muchsafer to test code that uses or extends these types. <p> This list can be customized via  {@link WithClassesToStub} or by defining a new test runnerextending  {@link GwtMockitoTestRunner} and overriding this method. This allows users toexplicitly stub out particular classes that are causing problems in tests. If you override this method, you will probably want to retain the classes that are stubbed here by doing something like this: <pre> &#064;Override protected Collection&lt;Class&lt;?&gt;&gt; getClassesToStub() { Collection&lt;Class&lt;?&gt;&gt; classes = super.getClassesToStub(); classes.add(MyBaseWidget.class); return classes; } </pre>
 * @return a collection of classes whose methods should be stubbed with no-ops while running tests
 */
protected Collection<Class<?>> getClassesToStub(){
  Collection<Class<?>> classes=new LinkedList<Class<?>>();
  classes.add(Composite.class);
  classes.add(DOM.class);
  classes.add(UIObject.class);
  classes.add(Widget.class);
  classes.add(AbsolutePanel.class);
  classes.add(CellList.class);
  classes.add(CellPanel.class);
  classes.add(ComplexPanel.class);
  classes.add(DeckLayoutPanel.class);
  classes.add(DeckPanel.class);
  classes.add(DecoratorPanel.class);
  classes.add(DockLayoutPanel.class);
  classes.add(DockPanel.class);
  classes.add(FlowPanel.class);
  classes.add(FocusPanel.class);
  classes.add(HorizontalPanel.class);
  classes.add(HTMLPanel.class);
  classes.add(LabelBase.class);
  classes.add(LayoutPanel.class);
  classes.add(Panel.class);
  classes.add(PopupPanel.class);
  classes.add(RenderablePanel.class);
  classes.add(ResizeLayoutPanel.class);
  classes.add(SimpleLayoutPanel.class);
  classes.add(SimplePanel.class);
  classes.add(SplitLayoutPanel.class);
  classes.add(StackPanel.class);
  classes.add(VerticalPanel.class);
  WithClassesToStub annotation=unitTestClass.getAnnotation(WithClassesToStub.class);
  if (annotation != null) {
    classes.addAll(Arrays.asList(annotation.value()));
  }
  return classes;
}",0.9934391534391536
161307,"private String makeNullParameters(int count){
  if (count == 0) {
    return ""String_Node_Str"";
  }
  StringBuilder params=new StringBuilder();
  for (int i=0; i < count; i++) {
    params.append(""String_Node_Str"");
  }
  return params.substring(1).toString();
}","private String makeNullParameters(CtClass[] paramClasses){
  if (paramClasses.length == 0) {
    return ""String_Node_Str"";
  }
  StringBuilder params=new StringBuilder();
  for (  CtClass paramClass : paramClasses) {
    params.append(""String_Node_Str"");
    String className=paramClass.getName();
    if (className.equals(""String_Node_Str"")) {
      params.append(""String_Node_Str"");
    }
 else     if (className.equals(""String_Node_Str"")) {
      params.append(""String_Node_Str"");
    }
 else     if (className.equals(""String_Node_Str"")) {
      params.append(""String_Node_Str"");
    }
 else     if (className.equals(""String_Node_Str"")) {
      params.append(""String_Node_Str"");
    }
 else     if (className.equals(""String_Node_Str"")) {
      params.append(""String_Node_Str"");
    }
 else     if (className.equals(""String_Node_Str"")) {
      params.append(""String_Node_Str"");
    }
 else     if (className.equals(""String_Node_Str"")) {
      params.append(""String_Node_Str"");
    }
 else     if (className.equals(""String_Node_Str"")) {
      params.append(""String_Node_Str"");
    }
 else {
      params.append(""String_Node_Str"");
    }
  }
  return params.substring(1).toString();
}",0.2669432918395574
161308,"@Override public void onLoad(ClassPool pool,String name) throws NotFoundException, CannotCompileException {
  CtClass clazz=pool.get(name);
  clazz.setModifiers(clazz.getModifiers() & ~Modifier.FINAL);
  for (  CtMethod method : clazz.getDeclaredMethods()) {
    method.setModifiers(method.getModifiers() & ~Modifier.FINAL);
  }
  for (  CtMethod method : clazz.getDeclaredMethods()) {
    if (shouldStubMethod(method)) {
      method.setModifiers(method.getModifiers() & ~Modifier.NATIVE);
      CtClass returnType=method.getReturnType();
      if (typeIs(returnType,String.class)) {
        method.setBody(""String_Node_Str"");
      }
 else       if (typeIs(returnType,Boolean.class)) {
        method.setBody(String.format(""String_Node_Str""));
      }
 else       if (typeIs(returnType,Byte.class)) {
        method.setBody(String.format(""String_Node_Str""));
      }
 else       if (typeIs(returnType,Character.class)) {
        method.setBody(String.format(""String_Node_Str""));
      }
 else       if (typeIs(returnType,Double.class)) {
        method.setBody(String.format(""String_Node_Str""));
      }
 else       if (typeIs(returnType,Integer.class)) {
        method.setBody(String.format(""String_Node_Str""));
      }
 else       if (typeIs(returnType,Float.class)) {
        method.setBody(String.format(""String_Node_Str""));
      }
 else       if (typeIs(returnType,Long.class)) {
        method.setBody(String.format(""String_Node_Str""));
      }
 else       if (typeIs(returnType,Short.class)) {
        method.setBody(String.format(""String_Node_Str""));
      }
 else       if (returnType.isPrimitive()) {
        method.setBody(null);
      }
 else       if (returnType.isEnum()) {
        method.setBody(String.format(""String_Node_Str"",returnType.getName()));
      }
 else {
        method.setBody(String.format(""String_Node_Str"" + ""String_Node_Str"",returnType.getName()));
      }
    }
  }
  for (  Class<?> classToStub : getClassesToStub()) {
    if (classToStub.getName().equals(clazz.getName())) {
      for (      CtConstructor constructor : clazz.getConstructors()) {
        String parameters=makeNullParameters(clazz.getSuperclass().getConstructors()[0].getParameterTypes().length);
        constructor.setBody(""String_Node_Str"" + parameters + ""String_Node_Str"");
      }
    }
  }
}","@Override public void onLoad(ClassPool pool,String name) throws NotFoundException, CannotCompileException {
  CtClass clazz=pool.get(name);
  clazz.setModifiers(clazz.getModifiers() & ~Modifier.FINAL);
  for (  CtMethod method : clazz.getDeclaredMethods()) {
    method.setModifiers(method.getModifiers() & ~Modifier.FINAL);
  }
  for (  CtMethod method : clazz.getDeclaredMethods()) {
    if (shouldStubMethod(method)) {
      method.setModifiers(method.getModifiers() & ~Modifier.NATIVE);
      CtClass returnType=method.getReturnType();
      if (typeIs(returnType,String.class)) {
        method.setBody(""String_Node_Str"");
      }
 else       if (typeIs(returnType,Boolean.class)) {
        method.setBody(String.format(""String_Node_Str""));
      }
 else       if (typeIs(returnType,Byte.class)) {
        method.setBody(String.format(""String_Node_Str""));
      }
 else       if (typeIs(returnType,Character.class)) {
        method.setBody(String.format(""String_Node_Str""));
      }
 else       if (typeIs(returnType,Double.class)) {
        method.setBody(String.format(""String_Node_Str""));
      }
 else       if (typeIs(returnType,Integer.class)) {
        method.setBody(String.format(""String_Node_Str""));
      }
 else       if (typeIs(returnType,Float.class)) {
        method.setBody(String.format(""String_Node_Str""));
      }
 else       if (typeIs(returnType,Long.class)) {
        method.setBody(String.format(""String_Node_Str""));
      }
 else       if (typeIs(returnType,Short.class)) {
        method.setBody(String.format(""String_Node_Str""));
      }
 else       if (returnType.isPrimitive()) {
        method.setBody(null);
      }
 else       if (returnType.isEnum()) {
        method.setBody(String.format(""String_Node_Str"",returnType.getName()));
      }
 else {
        method.setBody(String.format(""String_Node_Str"" + ""String_Node_Str"",returnType.getName()));
      }
    }
  }
  for (  Class<?> classToStub : getClassesToStub()) {
    if (classToStub.getName().equals(clazz.getName())) {
      for (      CtConstructor constructor : clazz.getConstructors()) {
        String parameters=makeNullParameters(clazz.getSuperclass().getConstructors()[0].getParameterTypes());
        constructor.setBody(""String_Node_Str"" + parameters + ""String_Node_Str"");
      }
    }
  }
}",0.9984785916105194
161309,"/** 
 * Creates a test runner which allows final GWT classes to be mocked. Works by reloading the test class using a custom classloader and substituting the reference.
 */
public GwtMockitoTestRunner(Class<?> unitTestClass) throws InitializationError {
  super(unitTestClass);
  this.unitTestClass=unitTestClass;
  ClassPool classPool=new ClassPool();
  classPool.appendSystemPath();
  for (  String path : getAdditionalClasspaths()) {
    try {
      classPool.appendClassPath(path);
    }
 catch (    NotFoundException e) {
      throw new IllegalStateException(""String_Node_Str"" + path,e);
    }
  }
  gwtMockitoClassLoader=new GwtMockitoClassLoader(getParentClassloader(),classPool);
  ClassLoader originalClassLoader=Thread.currentThread().getContextClassLoader();
  Thread.currentThread().setContextClassLoader(gwtMockitoClassLoader);
  try {
    Class<?> customLoadedTestClass=gwtMockitoClassLoader.loadClass(unitTestClass.getName());
    customLoadedGwtMockito=gwtMockitoClassLoader.loadClass(GwtMockito.class.getName());
    Field testClassField=ParentRunner.class.getDeclaredField(""String_Node_Str"");
    testClassField.setAccessible(true);
    testClassField.set(this,new TestClass(customLoadedTestClass));
  }
 catch (  Exception e) {
    throw new InitializationError(e);
  }
 finally {
    Thread.currentThread().setContextClassLoader(originalClassLoader);
  }
}","/** 
 * Creates a test runner which allows final GWT classes to be mocked. Works by reloading the test class using a custom classloader and substituting the reference.
 */
public GwtMockitoTestRunner(Class<?> unitTestClass) throws InitializationError {
  super(unitTestClass);
  this.unitTestClass=unitTestClass;
  ClassPool classPool=new ClassPool();
  classPool.appendSystemPath();
  for (  String path : getAdditionalClasspaths()) {
    try {
      classPool.appendClassPath(path);
    }
 catch (    NotFoundException e) {
      throw new IllegalStateException(""String_Node_Str"" + path,e);
    }
  }
  gwtMockitoClassLoader=new GwtMockitoClassLoader(getParentClassloader(),classPool);
  ClassLoader originalClassLoader=Thread.currentThread().getContextClassLoader();
  Thread.currentThread().setContextClassLoader(gwtMockitoClassLoader);
  try {
    Class<?> customLoadedTestClass=gwtMockitoClassLoader.loadClass(unitTestClass.getName());
    customLoadedGwtMockito=gwtMockitoClassLoader.loadClass(GwtMockito.class.getName());
    Field testClassField;
    try {
      testClassField=ParentRunner.class.getDeclaredField(""String_Node_Str"");
    }
 catch (    NoSuchFieldException e) {
      testClassField=ParentRunner.class.getDeclaredField(""String_Node_Str"");
    }
    testClassField.setAccessible(true);
    testClassField.set(this,new TestClass(customLoadedTestClass));
  }
 catch (  Exception e) {
    throw new InitializationError(e);
  }
 finally {
    Thread.currentThread().setContextClassLoader(originalClassLoader);
  }
}",0.9453795946410168
161310,"@Override public Void answer(InvocationOnMock invocation){
  for (  Object arg : invocation.getArguments()) {
    if (arg instanceof AsyncCallback<?>) {
      ((AsyncCallback<?>)invocation.getArguments()[1]).onFailure(result);
      return null;
    }
  }
  throw new IllegalStateException(""String_Node_Str"");
}","@Override public Void answer(InvocationOnMock invocation){
  for (  Object arg : invocation.getArguments()) {
    if (arg instanceof AsyncCallback<?>) {
      ((AsyncCallback<?>)arg).onFailure(result);
      return null;
    }
  }
  throw new IllegalStateException(""String_Node_Str"");
}",0.948073701842546
161311,"/** 
 * Invokes   {@link AsyncCallback#onSuccess} on the first argument of type {@link AsyncCallback}passed to the method. The method must take an   {@link AsyncCallback} parameter of theappropriate type.
 * @param result argument to pass to onSuccess
 * @return an answer that invokes onSuccess with the given argument
 */
public static <T>Answer<Void> returnSuccess(final T result){
  return new Answer<Void>(){
    @Override @SuppressWarnings(""String_Node_Str"") public Void answer(    InvocationOnMock invocation){
      for (      Object arg : invocation.getArguments()) {
        if (arg instanceof AsyncCallback<?>) {
          ((AsyncCallback<T>)invocation.getArguments()[1]).onSuccess(result);
          return null;
        }
      }
      throw new IllegalStateException(""String_Node_Str"");
    }
  }
;
}","/** 
 * Invokes   {@link AsyncCallback#onSuccess} on the first argument of type {@link AsyncCallback}passed to the method. The method must take an   {@link AsyncCallback} parameter of theappropriate type.
 * @param result argument to pass to onSuccess
 * @return an answer that invokes onSuccess with the given argument
 */
public static <T>Answer<Void> returnSuccess(final T result){
  return new Answer<Void>(){
    @Override @SuppressWarnings(""String_Node_Str"") public Void answer(    InvocationOnMock invocation){
      for (      Object arg : invocation.getArguments()) {
        if (arg instanceof AsyncCallback<?>) {
          ((AsyncCallback<T>)arg).onSuccess(result);
          return null;
        }
      }
      throw new IllegalStateException(""String_Node_Str"");
    }
  }
;
}",0.9806612601372426
161312,"/** 
 * Invokes   {@link AsyncCallback#onFailure} on the first argument of type {@link AsyncCallback}passed to the method. The method must take an   {@link AsyncCallback} parameter of theappropriate type.
 * @param result argument to pass to onFailure
 * @return an answer that invokes onFailure with the given argument
 */
public static Answer<Void> returnFailure(final Throwable result){
  return new Answer<Void>(){
    @Override public Void answer(    InvocationOnMock invocation){
      for (      Object arg : invocation.getArguments()) {
        if (arg instanceof AsyncCallback<?>) {
          ((AsyncCallback<?>)invocation.getArguments()[1]).onFailure(result);
          return null;
        }
      }
      throw new IllegalStateException(""String_Node_Str"");
    }
  }
;
}","/** 
 * Invokes   {@link AsyncCallback#onFailure} on the first argument of type {@link AsyncCallback}passed to the method. The method must take an   {@link AsyncCallback} parameter of theappropriate type.
 * @param result argument to pass to onFailure
 * @return an answer that invokes onFailure with the given argument
 */
public static Answer<Void> returnFailure(final Throwable result){
  return new Answer<Void>(){
    @Override public Void answer(    InvocationOnMock invocation){
      for (      Object arg : invocation.getArguments()) {
        if (arg instanceof AsyncCallback<?>) {
          ((AsyncCallback<?>)arg).onFailure(result);
          return null;
        }
      }
      throw new IllegalStateException(""String_Node_Str"");
    }
  }
;
}",0.9798570500324886
161313,"/** 
 * Returns a collection of classes whose non-abstract methods should always be replaced with no-ops. By default, this list includes   {@link Composite},   {@link DOM} {@link UIObject},  {@link Widget}, and most subclasses of   {@link Panel}. This makes it much safer to test code that uses or extends these types. <p> This list can be customized by defining a new test runner extending  {@link GwtMockitoTestRunner} and overriding this method. This allows users to explicitly stubout particular classes that are causing problems in tests. If you do this, you will probably want to retain the classes that are stubbed here by doing something like this: <pre> &#064;Override protected Collection&lt;Class&lt;?&gt;&gt; getClassesToStub() { Collection&lt;Class&lt;?&gt;&gt; classes = super.getClassesToStub(); classes.add(MyBaseWidget.class); return classes; } </pre>
 * @return a collection of classes whose methods should be stubbed with no-ops while running tests
 */
protected Collection<Class<?>> getClassesToStub(){
  Collection<Class<?>> classes=new LinkedList<Class<?>>();
  classes.add(Composite.class);
  classes.add(DOM.class);
  classes.add(UIObject.class);
  classes.add(Widget.class);
  classes.add(AbsolutePanel.class);
  classes.add(CellPanel.class);
  classes.add(ComplexPanel.class);
  classes.add(DeckLayoutPanel.class);
  classes.add(DeckPanel.class);
  classes.add(DecoratorPanel.class);
  classes.add(DockLayoutPanel.class);
  classes.add(DockPanel.class);
  classes.add(FlowPanel.class);
  classes.add(FocusPanel.class);
  classes.add(HorizontalPanel.class);
  classes.add(HTMLPanel.class);
  classes.add(LayoutPanel.class);
  classes.add(Panel.class);
  classes.add(PopupPanel.class);
  classes.add(RenderablePanel.class);
  classes.add(ResizeLayoutPanel.class);
  classes.add(SimpleLayoutPanel.class);
  classes.add(SimplePanel.class);
  classes.add(SplitLayoutPanel.class);
  classes.add(StackPanel.class);
  classes.add(VerticalPanel.class);
  return classes;
}","/** 
 * Returns a collection of classes whose non-abstract methods should always be replaced with no-ops. By default, this list includes   {@link Composite},   {@link DOM} {@link UIObject},  {@link Widget}, and most subclasses of   {@link Panel}. This makes it much safer to test code that uses or extends these types. <p> This list can be customized by defining a new test runner extending  {@link GwtMockitoTestRunner} and overriding this method. This allows users to explicitly stubout particular classes that are causing problems in tests. If you do this, you will probably want to retain the classes that are stubbed here by doing something like this: <pre> &#064;Override protected Collection&lt;Class&lt;?&gt;&gt; getClassesToStub() { Collection&lt;Class&lt;?&gt;&gt; classes = super.getClassesToStub(); classes.add(MyBaseWidget.class); return classes; } </pre>
 * @return a collection of classes whose methods should be stubbed with no-ops while running tests
 */
protected Collection<Class<?>> getClassesToStub(){
  Collection<Class<?>> classes=new LinkedList<Class<?>>();
  classes.add(Composite.class);
  classes.add(DOM.class);
  classes.add(UIObject.class);
  classes.add(Widget.class);
  classes.add(AbsolutePanel.class);
  classes.add(CellPanel.class);
  classes.add(ComplexPanel.class);
  classes.add(DeckLayoutPanel.class);
  classes.add(DeckPanel.class);
  classes.add(DecoratorPanel.class);
  classes.add(DockLayoutPanel.class);
  classes.add(DockPanel.class);
  classes.add(FlowPanel.class);
  classes.add(FocusPanel.class);
  classes.add(HorizontalPanel.class);
  classes.add(HTMLPanel.class);
  classes.add(LabelBase.class);
  classes.add(LayoutPanel.class);
  classes.add(Panel.class);
  classes.add(PopupPanel.class);
  classes.add(RenderablePanel.class);
  classes.add(ResizeLayoutPanel.class);
  classes.add(SimpleLayoutPanel.class);
  classes.add(SimplePanel.class);
  classes.add(SplitLayoutPanel.class);
  classes.add(StackPanel.class);
  classes.add(VerticalPanel.class);
  return classes;
}",0.9920199501246882
161314,"@Override public void onLoad(ClassPool pool,String name) throws NotFoundException, CannotCompileException {
  CtClass clazz=pool.get(name);
  clazz.setModifiers(clazz.getModifiers() & ~Modifier.FINAL);
  for (  CtMethod method : clazz.getDeclaredMethods()) {
    method.setModifiers(method.getModifiers() & ~Modifier.FINAL);
  }
  for (  CtMethod method : clazz.getDeclaredMethods()) {
    if (shouldStubMethod(method)) {
      method.setModifiers(method.getModifiers() & ~Modifier.NATIVE);
      CtClass returnType=method.getReturnType();
      if (typeIs(returnType,String.class)) {
        method.setBody(""String_Node_Str"");
      }
 else       if (typeIs(returnType,Boolean.class)) {
        method.setBody(String.format(""String_Node_Str""));
      }
 else       if (typeIs(returnType,Byte.class)) {
        method.setBody(String.format(""String_Node_Str""));
      }
 else       if (typeIs(returnType,Character.class)) {
        method.setBody(String.format(""String_Node_Str""));
      }
 else       if (typeIs(returnType,Double.class)) {
        method.setBody(String.format(""String_Node_Str""));
      }
 else       if (typeIs(returnType,Integer.class)) {
        method.setBody(String.format(""String_Node_Str""));
      }
 else       if (typeIs(returnType,Float.class)) {
        method.setBody(String.format(""String_Node_Str""));
      }
 else       if (typeIs(returnType,Long.class)) {
        method.setBody(String.format(""String_Node_Str""));
      }
 else       if (typeIs(returnType,Short.class)) {
        method.setBody(String.format(""String_Node_Str""));
      }
 else       if (returnType.isPrimitive()) {
        method.setBody(null);
      }
 else       if (returnType.isEnum()) {
        method.setBody(String.format(""String_Node_Str"",returnType.getName()));
      }
 else {
        method.setBody(String.format(""String_Node_Str"" + ""String_Node_Str"",returnType.getName()));
      }
    }
  }
}","@Override public void onLoad(ClassPool pool,String name) throws NotFoundException, CannotCompileException {
  CtClass clazz=pool.get(name);
  clazz.setModifiers(clazz.getModifiers() & ~Modifier.FINAL);
  for (  CtMethod method : clazz.getDeclaredMethods()) {
    method.setModifiers(method.getModifiers() & ~Modifier.FINAL);
  }
  for (  CtMethod method : clazz.getDeclaredMethods()) {
    if (shouldStubMethod(method)) {
      method.setModifiers(method.getModifiers() & ~Modifier.NATIVE);
      CtClass returnType=method.getReturnType();
      if (typeIs(returnType,String.class)) {
        method.setBody(""String_Node_Str"");
      }
 else       if (typeIs(returnType,Boolean.class)) {
        method.setBody(String.format(""String_Node_Str""));
      }
 else       if (typeIs(returnType,Byte.class)) {
        method.setBody(String.format(""String_Node_Str""));
      }
 else       if (typeIs(returnType,Character.class)) {
        method.setBody(String.format(""String_Node_Str""));
      }
 else       if (typeIs(returnType,Double.class)) {
        method.setBody(String.format(""String_Node_Str""));
      }
 else       if (typeIs(returnType,Integer.class)) {
        method.setBody(String.format(""String_Node_Str""));
      }
 else       if (typeIs(returnType,Float.class)) {
        method.setBody(String.format(""String_Node_Str""));
      }
 else       if (typeIs(returnType,Long.class)) {
        method.setBody(String.format(""String_Node_Str""));
      }
 else       if (typeIs(returnType,Short.class)) {
        method.setBody(String.format(""String_Node_Str""));
      }
 else       if (returnType.isPrimitive()) {
        method.setBody(null);
      }
 else       if (returnType.isEnum()) {
        method.setBody(String.format(""String_Node_Str"",returnType.getName()));
      }
 else {
        method.setBody(String.format(""String_Node_Str"" + ""String_Node_Str"",returnType.getName()));
      }
    }
  }
  for (  Class<?> classToStub : getClassesToStub()) {
    if (classToStub.getName().equals(clazz.getName())) {
      for (      CtConstructor constructor : clazz.getConstructors()) {
        String parameters=makeNullParameters(clazz.getSuperclass().getConstructors()[0].getParameterTypes().length);
        constructor.setBody(""String_Node_Str"" + parameters + ""String_Node_Str"");
      }
    }
  }
}",0.9052031361368496
161315,"@Override public void initGui(){
  super.initGui();
  int leftX=guiLeft + 8;
  int topY=guiTop + 6;
  titleString=new BeefGuiLabel(this,_entity.getInventoryName(),leftX,topY);
  topY+=titleString.getHeight() + 8;
  fluidBar=new BeefGuiFluidBar(this,guiLeft + 8,guiTop + 16,_entity,0);
  powerBar=new BeefGuiPowerBar(this,guiLeft + 148,guiTop + 16,_entity);
  progressArrow=new BeefGuiProgressArrow(this,guiLeft + 76,guiTop + 41,0,178,_entity);
  registerControl(titleString);
  registerControl(powerBar);
  registerControl(fluidBar);
  registerControl(progressArrow);
  createInventoryExposureButtons(guiLeft + 180,guiTop + 4);
}","@Override public void initGui(){
  super.initGui();
  titleString=new BeefGuiLabel(this,_entity.getInventoryName(),guiLeft + 8,guiTop + 6);
  fluidBar=new BeefGuiFluidBar(this,guiLeft + 8,guiTop + 16,_entity,0);
  powerBar=new BeefGuiPowerBar(this,guiLeft + 148,guiTop + 16,_entity);
  progressArrow=new BeefGuiProgressArrow(this,guiLeft + 76,guiTop + 41,0,178,_entity);
  registerControl(titleString);
  registerControl(powerBar);
  registerControl(fluidBar);
  registerControl(progressArrow);
  createInventoryExposureButtons(guiLeft + 180,guiTop + 4);
}",0.9063291139240506
161316,"@Override public void initGui(){
  super.initGui();
  int xCenter=guiLeft + this.xSize / 2;
  int yCenter=this.ySize / 2;
  int metadata=_port.getWorldObj().getBlockMetadata(_port.xCoord,_port.yCoord,_port.zCoord);
  ejectFuel=new GuiIconButton(2,guiLeft + xSize - 97,guiTop + 53,18,18,ClientProxy.GuiIcons.getIcon(""String_Node_Str""),new String[]{EnumChatFormatting.AQUA + ""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str""});
  ejectWaste=new GuiIconButton(3,guiLeft + xSize - 77,guiTop + 53,18,18,ClientProxy.GuiIcons.getIcon(""String_Node_Str""),new String[]{EnumChatFormatting.AQUA + ""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str""});
  btnInlet=new GuiIconButton(0,guiLeft + xSize - 47,guiTop + 53,18,18,ClientProxy.GuiIcons.getIcon(""String_Node_Str""),new String[]{EnumChatFormatting.AQUA + ""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str""});
  btnOutlet=new GuiIconButton(1,guiLeft + xSize - 27,guiTop + 53,18,18,ClientProxy.GuiIcons.getIcon(""String_Node_Str""),new String[]{EnumChatFormatting.AQUA + ""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str""});
  inventoryLabel=new BeefGuiLabel(this,""String_Node_Str"",guiLeft + 8,guiTop + 64);
  registerControl(ejectFuel);
  registerControl(ejectWaste);
  registerControl(btnOutlet);
  registerControl(btnInlet);
  registerControl(inventoryLabel);
  updateIcons();
}","@Override public void initGui(){
  super.initGui();
  ejectFuel=new GuiIconButton(2,guiLeft + xSize - 97,guiTop + 53,18,18,ClientProxy.GuiIcons.getIcon(""String_Node_Str""),new String[]{EnumChatFormatting.AQUA + ""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str""});
  ejectWaste=new GuiIconButton(3,guiLeft + xSize - 77,guiTop + 53,18,18,ClientProxy.GuiIcons.getIcon(""String_Node_Str""),new String[]{EnumChatFormatting.AQUA + ""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str""});
  btnInlet=new GuiIconButton(0,guiLeft + xSize - 47,guiTop + 53,18,18,ClientProxy.GuiIcons.getIcon(""String_Node_Str""),new String[]{EnumChatFormatting.AQUA + ""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str""});
  btnOutlet=new GuiIconButton(1,guiLeft + xSize - 27,guiTop + 53,18,18,ClientProxy.GuiIcons.getIcon(""String_Node_Str""),new String[]{EnumChatFormatting.AQUA + ""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str""});
  inventoryLabel=new BeefGuiLabel(this,""String_Node_Str"",guiLeft + 8,guiTop + 64);
  registerControl(ejectFuel);
  registerControl(ejectWaste);
  registerControl(btnOutlet);
  registerControl(btnInlet);
  registerControl(inventoryLabel);
  updateIcons();
}",0.949363156259708
161317,"public void onChannelChanged(int changedChannel){
  if (this.selectedChannel != changedChannel) {
    return;
  }
  CoordTriplet[] controlRodLocations=port.getReactorController().getControlRodLocations();
  CircuitType currentCircuitType=grabTargets[selectedChannel].getCircuitType();
  if (CircuitType.hasCoordinate(currentCircuitType)) {
    subSettingString.setLabelText(""String_Node_Str"");
    subSettingForwardBtn.visible=true;
    subSettingBackBtn.visible=true;
  }
 else   if (TileEntityReactorRedNetPort.isInput(currentCircuitType) && CircuitType.canBeToggledBetweenPulseAndNormal(currentCircuitType)) {
    subSettingString.setLabelText(""String_Node_Str"");
    subSettingForwardBtn.visible=true;
    subSettingBackBtn.visible=true;
  }
 else   if (currentCircuitType == CircuitType.inputEjectWaste) {
    subSettingString.setLabelText(""String_Node_Str"");
    subSettingForwardBtn.visible=false;
    subSettingBackBtn.visible=false;
  }
 else {
    subSettingString.setLabelText(""String_Node_Str"");
    subSettingForwardBtn.visible=false;
    subSettingBackBtn.visible=false;
  }
  updateSubSettingValueText();
}","public void onChannelChanged(int changedChannel){
  if (this.selectedChannel != changedChannel) {
    return;
  }
  CircuitType currentCircuitType=grabTargets[selectedChannel].getCircuitType();
  if (CircuitType.hasCoordinate(currentCircuitType)) {
    subSettingString.setLabelText(""String_Node_Str"");
    subSettingForwardBtn.visible=true;
    subSettingBackBtn.visible=true;
  }
 else   if (TileEntityReactorRedNetPort.isInput(currentCircuitType) && CircuitType.canBeToggledBetweenPulseAndNormal(currentCircuitType)) {
    subSettingString.setLabelText(""String_Node_Str"");
    subSettingForwardBtn.visible=true;
    subSettingBackBtn.visible=true;
  }
 else   if (currentCircuitType == CircuitType.inputEjectWaste) {
    subSettingString.setLabelText(""String_Node_Str"");
    subSettingForwardBtn.visible=false;
    subSettingBackBtn.visible=false;
  }
 else {
    subSettingString.setLabelText(""String_Node_Str"");
    subSettingForwardBtn.visible=false;
    subSettingBackBtn.visible=false;
  }
  updateSubSettingValueText();
}",0.9576940957694096
161318,"private void validateInputValues(){
  outputLevel=0;
  String in1=this.subInputRodSetting.getText();
  int val1;
  if (in1.isEmpty()) {
    val1=0;
  }
 else {
    val1=Integer.valueOf(in1);
    if (val1 < 0) {
      val1=0;
    }
 else     if (val1 > 100) {
      val1=100;
    }
  }
  this.subInputRodSetting.setText(Integer.toString(val1));
  if (this.subInputRodSettingOff.getVisible()) {
    int val2;
    String in2=this.subInputRodSettingOff.getText();
    if (in2.isEmpty()) {
      val2=0;
    }
 else {
      val2=Integer.valueOf(in2);
      if (val2 < 0) {
        val2=0;
      }
 else       if (val2 > 100) {
        val2=100;
      }
    }
    this.outputLevel=(val2 << 8) & 0xFF00;
    this.subInputRodSettingOff.setText(Integer.toString(val2));
  }
 else {
    this.outputLevel=this.outputLevel & 0xFF00;
  }
  this.outputLevel|=val1 & 0xFF;
}","private void validateInputValues(){
  outputLevel=0;
  String in1=this.subInputRodSetting.getText();
  int val1;
  if (in1.isEmpty()) {
    val1=0;
  }
 else {
    val1=Integer.parseInt(in1);
    if (val1 < 0) {
      val1=0;
    }
 else     if (val1 > 100) {
      val1=100;
    }
  }
  this.subInputRodSetting.setText(Integer.toString(val1));
  if (this.subInputRodSettingOff.getVisible()) {
    int val2;
    String in2=this.subInputRodSettingOff.getText();
    if (in2.isEmpty()) {
      val2=0;
    }
 else {
      val2=Integer.parseInt(in2);
      if (val2 < 0) {
        val2=0;
      }
 else       if (val2 > 100) {
        val2=100;
      }
    }
    this.outputLevel=(val2 << 8) & 0xFF00;
    this.subInputRodSettingOff.setText(Integer.toString(val2));
  }
 else {
    this.outputLevel=this.outputLevel & 0xFF00;
  }
  this.outputLevel|=val1 & 0xFF;
}",0.9825581395348836
161319,"private void validateOutputValues(){
  CircuitType selectedType=getUserSelectedCircuitType();
  int maxVal=Integer.MAX_VALUE;
  if (selectedType == CircuitType.outputFuelMix || selectedType == CircuitType.outputEnergyAmount) {
    maxVal=100;
  }
  String in1=this.subOutputValue.getText();
  int val1;
  if (in1.isEmpty()) {
    val1=0;
  }
 else {
    val1=Integer.valueOf(in1);
    if (val1 < 0) {
      val1=0;
    }
 else     if (val1 > maxVal) {
      val1=maxVal;
    }
  }
  this.subOutputValue.setText(Integer.toString(val1));
  this.outputLevel=val1;
}","private void validateOutputValues(){
  CircuitType selectedType=getUserSelectedCircuitType();
  int maxVal=Integer.MAX_VALUE;
  if (selectedType == CircuitType.outputFuelMix || selectedType == CircuitType.outputEnergyAmount) {
    maxVal=100;
  }
  String in1=this.subOutputValue.getText();
  int val1;
  if (in1.isEmpty()) {
    val1=0;
  }
 else {
    val1=Integer.parseInt(in1);
    if (val1 < 0) {
      val1=0;
    }
 else     if (val1 > maxVal) {
      val1=maxVal;
    }
  }
  this.subOutputValue.setText(Integer.toString(val1));
  this.outputLevel=val1;
}",0.9866666666666668
161320,"@Override protected void actionPerformed(GuiButton button){
  CoordTriplet saveDelegate=reactor.getReferenceCoord();
  if (button.id == 0 || button.id == 1) {
    boolean newSetting=button.id == 0;
    if (newSetting != reactor.getActive()) {
      CommonPacketHandler.INSTANCE.sendToServer(new MachineCommandActivateMessage(reactor,newSetting));
    }
  }
 else   if (button.id >= 2 && button.id <= 4) {
    WasteEjectionSetting newEjectionSetting;
switch (button.id) {
case 4:
      newEjectionSetting=WasteEjectionSetting.kManual;
    break;
default :
  newEjectionSetting=WasteEjectionSetting.kAutomatic;
break;
}
if (reactor.getWasteEjection() != newEjectionSetting) {
CommonPacketHandler.INSTANCE.sendToServer(new ReactorChangeWasteEjectionMessage(reactor,newEjectionSetting));
}
}
 else if (button.id == 5) {
CommonPacketHandler.INSTANCE.sendToServer(new ReactorCommandEjectMessage(reactor,false,isShiftKeyDown()));
}
}","@Override protected void actionPerformed(GuiButton button){
  if (button.id == 0 || button.id == 1) {
    boolean newSetting=button.id == 0;
    if (newSetting != reactor.getActive()) {
      CommonPacketHandler.INSTANCE.sendToServer(new MachineCommandActivateMessage(reactor,newSetting));
    }
  }
 else   if (button.id >= 2 && button.id <= 4) {
    WasteEjectionSetting newEjectionSetting;
switch (button.id) {
case 4:
      newEjectionSetting=WasteEjectionSetting.kManual;
    break;
default :
  newEjectionSetting=WasteEjectionSetting.kAutomatic;
break;
}
if (reactor.getWasteEjection() != newEjectionSetting) {
CommonPacketHandler.INSTANCE.sendToServer(new ReactorChangeWasteEjectionMessage(reactor,newEjectionSetting));
}
}
 else if (button.id == 5) {
CommonPacketHandler.INSTANCE.sendToServer(new ReactorCommandEjectMessage(reactor,false,isShiftKeyDown()));
}
}",0.9682451253481894
161321,"@Override public void initGui(){
  super.initGui();
  int xCenter=guiLeft + this.xSize / 2;
  int yCenter=this.ySize / 2;
  btnReactorOn=new GuiIconButton(0,guiLeft + 4,guiTop + 164,18,18,ClientProxy.GuiIcons.getIcon(""String_Node_Str""));
  btnReactorOff=new GuiIconButton(1,guiLeft + 22,guiTop + 164,18,18,ClientProxy.GuiIcons.getIcon(""String_Node_Str""));
  btnReactorOn.setTooltip(new String[]{EnumChatFormatting.AQUA + ""String_Node_Str""});
  btnReactorOff.setTooltip(new String[]{EnumChatFormatting.AQUA + ""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str""});
  btnWasteAutoEject=new GuiIconButton(2,guiLeft + 4,guiTop + 144,18,18,ClientProxy.GuiIcons.getIcon(""String_Node_Str""));
  btnWasteManual=new GuiIconButton(4,guiLeft + 22,guiTop + 144,18,18,ClientProxy.GuiIcons.getIcon(""String_Node_Str""));
  btnWasteEject=new GuiIconButton(5,guiLeft + 50,guiTop + 144,18,18,ClientProxy.GuiIcons.getIcon(""String_Node_Str""));
  btnWasteEject.visible=false;
  btnWasteAutoEject.setTooltip(new String[]{EnumChatFormatting.AQUA + ""String_Node_Str"",""String_Node_Str"",""String_Node_Str""});
  btnWasteManual.setTooltip(new String[]{EnumChatFormatting.AQUA + ""String_Node_Str"",EnumChatFormatting.LIGHT_PURPLE + ""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str""});
  btnWasteEject.setTooltip(new String[]{EnumChatFormatting.AQUA + ""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str""});
  registerControl(btnReactorOn);
  registerControl(btnReactorOff);
  registerControl(btnWasteAutoEject);
  registerControl(btnWasteManual);
  registerControl(btnWasteEject);
  int leftX=guiLeft + 4;
  int topY=guiTop + 4;
  titleString=new BeefGuiLabel(this,""String_Node_Str"",leftX,topY);
  topY+=titleString.getHeight() + 4;
  heatIcon=new BeefGuiIcon(this,leftX - 2,topY,16,16,ClientProxy.GuiIcons.getIcon(""String_Node_Str""),new String[]{EnumChatFormatting.AQUA + ""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str""});
  heatString=new BeefGuiLabel(this,""String_Node_Str"",leftX + 22,topY + 4);
  topY+=heatIcon.getHeight() + 5;
  outputIcon=new BeefGuiIcon(this,leftX + 1,topY);
  outputString=new BeefGuiLabel(this,""String_Node_Str"",leftX + 22,topY + 4);
  topY+=outputIcon.getHeight() + 5;
  fuelConsumedIcon=new BeefGuiIcon(this,leftX + 1,topY,16,16,ClientProxy.GuiIcons.getIcon(""String_Node_Str""),new String[]{EnumChatFormatting.AQUA + ""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str""});
  fuelConsumedString=new BeefGuiLabel(this,""String_Node_Str"",leftX + 22,topY + 4);
  topY+=fuelConsumedIcon.getHeight() + 5;
  reactivityIcon=new BeefGuiIcon(this,leftX,topY,16,16,ClientProxy.GuiIcons.getIcon(""String_Node_Str""),new String[]{EnumChatFormatting.AQUA + ""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str""});
  reactivityString=new BeefGuiLabel(this,""String_Node_Str"",leftX + 22,topY + 4);
  topY+=reactivityIcon.getHeight() + 6;
  statusString=new BeefGuiLabel(this,""String_Node_Str"",leftX + 1,topY);
  topY+=statusString.getHeight() + 4;
  powerBar=new BeefGuiPowerBar(this,guiLeft + 152,guiTop + 22,this.reactor);
  coreHeatBar=new BeefGuiHeatBar(this,guiLeft + 130,guiTop + 22,EnumChatFormatting.AQUA + ""String_Node_Str"",new String[]{""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str""});
  caseHeatBar=new BeefGuiHeatBar(this,guiLeft + 108,guiTop + 22,EnumChatFormatting.AQUA + ""String_Node_Str"",new String[]{""String_Node_Str"",""String_Node_Str"",""String_Node_Str""});
  fuelMixBar=new BeefGuiFuelMixBar(this,guiLeft + 86,guiTop + 22,this.reactor);
  coolantIcon=new BeefGuiIcon(this,guiLeft + 132,guiTop + 91,16,16,ClientProxy.GuiIcons.getIcon(""String_Node_Str""),new String[]{EnumChatFormatting.AQUA + ""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str""});
  coolantBar=new BeefGuiFluidBar(this,guiLeft + 131,guiTop + 108,this.reactor,MultiblockReactor.FLUID_COOLANT);
  hotFluidIcon=new BeefGuiIcon(this,guiLeft + 154,guiTop + 91,16,16,ClientProxy.GuiIcons.getIcon(""String_Node_Str""),new String[]{EnumChatFormatting.AQUA + ""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str""});
  hotFluidBar=new BeefGuiFluidBar(this,guiLeft + 153,guiTop + 108,this.reactor,MultiblockReactor.FLUID_SUPERHEATED);
  registerControl(titleString);
  registerControl(statusString);
  registerControl(heatIcon);
  registerControl(heatString);
  registerControl(outputIcon);
  registerControl(outputString);
  registerControl(fuelConsumedIcon);
  registerControl(fuelConsumedString);
  registerControl(reactivityIcon);
  registerControl(reactivityString);
  registerControl(powerBar);
  registerControl(coreHeatBar);
  registerControl(caseHeatBar);
  registerControl(fuelMixBar);
  registerControl(coolantBar);
  registerControl(hotFluidBar);
  registerControl(coolantIcon);
  registerControl(hotFluidIcon);
  updateIcons();
}","@Override public void initGui(){
  super.initGui();
  btnReactorOn=new GuiIconButton(0,guiLeft + 4,guiTop + 164,18,18,ClientProxy.GuiIcons.getIcon(""String_Node_Str""));
  btnReactorOff=new GuiIconButton(1,guiLeft + 22,guiTop + 164,18,18,ClientProxy.GuiIcons.getIcon(""String_Node_Str""));
  btnReactorOn.setTooltip(new String[]{EnumChatFormatting.AQUA + ""String_Node_Str""});
  btnReactorOff.setTooltip(new String[]{EnumChatFormatting.AQUA + ""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str""});
  btnWasteAutoEject=new GuiIconButton(2,guiLeft + 4,guiTop + 144,18,18,ClientProxy.GuiIcons.getIcon(""String_Node_Str""));
  btnWasteManual=new GuiIconButton(4,guiLeft + 22,guiTop + 144,18,18,ClientProxy.GuiIcons.getIcon(""String_Node_Str""));
  btnWasteEject=new GuiIconButton(5,guiLeft + 50,guiTop + 144,18,18,ClientProxy.GuiIcons.getIcon(""String_Node_Str""));
  btnWasteEject.visible=false;
  btnWasteAutoEject.setTooltip(new String[]{EnumChatFormatting.AQUA + ""String_Node_Str"",""String_Node_Str"",""String_Node_Str""});
  btnWasteManual.setTooltip(new String[]{EnumChatFormatting.AQUA + ""String_Node_Str"",EnumChatFormatting.LIGHT_PURPLE + ""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str""});
  btnWasteEject.setTooltip(new String[]{EnumChatFormatting.AQUA + ""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str""});
  registerControl(btnReactorOn);
  registerControl(btnReactorOff);
  registerControl(btnWasteAutoEject);
  registerControl(btnWasteManual);
  registerControl(btnWasteEject);
  int leftX=guiLeft + 4;
  int topY=guiTop + 4;
  titleString=new BeefGuiLabel(this,""String_Node_Str"",leftX,topY);
  topY+=titleString.getHeight() + 4;
  heatIcon=new BeefGuiIcon(this,leftX - 2,topY,16,16,ClientProxy.GuiIcons.getIcon(""String_Node_Str""),new String[]{EnumChatFormatting.AQUA + ""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str""});
  heatString=new BeefGuiLabel(this,""String_Node_Str"",leftX + 22,topY + 4);
  topY+=heatIcon.getHeight() + 5;
  outputIcon=new BeefGuiIcon(this,leftX + 1,topY);
  outputString=new BeefGuiLabel(this,""String_Node_Str"",leftX + 22,topY + 4);
  topY+=outputIcon.getHeight() + 5;
  fuelConsumedIcon=new BeefGuiIcon(this,leftX + 1,topY,16,16,ClientProxy.GuiIcons.getIcon(""String_Node_Str""),new String[]{EnumChatFormatting.AQUA + ""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str""});
  fuelConsumedString=new BeefGuiLabel(this,""String_Node_Str"",leftX + 22,topY + 4);
  topY+=fuelConsumedIcon.getHeight() + 5;
  reactivityIcon=new BeefGuiIcon(this,leftX,topY,16,16,ClientProxy.GuiIcons.getIcon(""String_Node_Str""),new String[]{EnumChatFormatting.AQUA + ""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str""});
  reactivityString=new BeefGuiLabel(this,""String_Node_Str"",leftX + 22,topY + 4);
  topY+=reactivityIcon.getHeight() + 6;
  statusString=new BeefGuiLabel(this,""String_Node_Str"",leftX + 1,topY);
  topY+=statusString.getHeight() + 4;
  powerBar=new BeefGuiPowerBar(this,guiLeft + 152,guiTop + 22,this.reactor);
  coreHeatBar=new BeefGuiHeatBar(this,guiLeft + 130,guiTop + 22,EnumChatFormatting.AQUA + ""String_Node_Str"",new String[]{""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str""});
  caseHeatBar=new BeefGuiHeatBar(this,guiLeft + 108,guiTop + 22,EnumChatFormatting.AQUA + ""String_Node_Str"",new String[]{""String_Node_Str"",""String_Node_Str"",""String_Node_Str""});
  fuelMixBar=new BeefGuiFuelMixBar(this,guiLeft + 86,guiTop + 22,this.reactor);
  coolantIcon=new BeefGuiIcon(this,guiLeft + 132,guiTop + 91,16,16,ClientProxy.GuiIcons.getIcon(""String_Node_Str""),new String[]{EnumChatFormatting.AQUA + ""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str""});
  coolantBar=new BeefGuiFluidBar(this,guiLeft + 131,guiTop + 108,this.reactor,MultiblockReactor.FLUID_COOLANT);
  hotFluidIcon=new BeefGuiIcon(this,guiLeft + 154,guiTop + 91,16,16,ClientProxy.GuiIcons.getIcon(""String_Node_Str""),new String[]{EnumChatFormatting.AQUA + ""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str""});
  hotFluidBar=new BeefGuiFluidBar(this,guiLeft + 153,guiTop + 108,this.reactor,MultiblockReactor.FLUID_SUPERHEATED);
  registerControl(titleString);
  registerControl(statusString);
  registerControl(heatIcon);
  registerControl(heatString);
  registerControl(outputIcon);
  registerControl(outputString);
  registerControl(fuelConsumedIcon);
  registerControl(fuelConsumedString);
  registerControl(reactivityIcon);
  registerControl(reactivityString);
  registerControl(powerBar);
  registerControl(coreHeatBar);
  registerControl(caseHeatBar);
  registerControl(fuelMixBar);
  registerControl(coolantBar);
  registerControl(hotFluidBar);
  registerControl(coolantIcon);
  registerControl(hotFluidIcon);
  updateIcons();
}",0.9929957974784872
161322,"@Override protected void actionPerformed(GuiButton button){
  CoordTriplet saveDelegate=turbine.getReferenceCoord();
  if (button.id == 0 || button.id == 1) {
    boolean setActive=button.id == 0;
    if (setActive != turbine.getActive()) {
      CommonPacketHandler.INSTANCE.sendToServer(new MachineCommandActivateMessage(turbine,setActive));
    }
  }
  if (button.id == 2 || button.id == 3) {
    int exponent=0;
    if (isShiftKeyDown()) {
      exponent+=1;
    }
    if (isCtrlKeyDown()) {
      exponent+=2;
    }
    int newMax=(int)Math.round(Math.pow(10,exponent));
    if (button.id == 3) {
      newMax*=-1;
    }
    newMax=Math.max(0,Math.min(turbine.getMaxIntakeRateMax(),turbine.getMaxIntakeRate() + newMax));
    if (newMax != turbine.getMaxIntakeRate()) {
      CommonPacketHandler.INSTANCE.sendToServer(new TurbineChangeMaxIntakeMessage(turbine,newMax));
    }
  }
  if (button.id >= 4 && button.id <= 6) {
    VentStatus newStatus;
switch (button.id) {
case 5:
      newStatus=VentStatus.VentOverflow;
    break;
case 6:
  newStatus=VentStatus.DoNotVent;
break;
default :
newStatus=VentStatus.VentAll;
break;
}
if (newStatus != turbine.getVentSetting()) {
CommonPacketHandler.INSTANCE.sendToServer(new TurbineChangeVentMessage(turbine,newStatus));
}
}
if (button.id == 7 || button.id == 8) {
boolean newStatus=button.id == 7;
if (newStatus != turbine.getInductorEngaged()) {
CommonPacketHandler.INSTANCE.sendToServer(new TurbineChangeInductorMessage(turbine,newStatus));
}
}
}","@Override protected void actionPerformed(GuiButton button){
  if (button.id == 0 || button.id == 1) {
    boolean setActive=button.id == 0;
    if (setActive != turbine.getActive()) {
      CommonPacketHandler.INSTANCE.sendToServer(new MachineCommandActivateMessage(turbine,setActive));
    }
  }
  if (button.id == 2 || button.id == 3) {
    int exponent=0;
    if (isShiftKeyDown()) {
      exponent+=1;
    }
    if (isCtrlKeyDown()) {
      exponent+=2;
    }
    int newMax=(int)Math.round(Math.pow(10,exponent));
    if (button.id == 3) {
      newMax*=-1;
    }
    newMax=Math.max(0,Math.min(turbine.getMaxIntakeRateMax(),turbine.getMaxIntakeRate() + newMax));
    if (newMax != turbine.getMaxIntakeRate()) {
      CommonPacketHandler.INSTANCE.sendToServer(new TurbineChangeMaxIntakeMessage(turbine,newMax));
    }
  }
  if (button.id >= 4 && button.id <= 6) {
    VentStatus newStatus;
switch (button.id) {
case 5:
      newStatus=VentStatus.VentOverflow;
    break;
case 6:
  newStatus=VentStatus.DoNotVent;
break;
default :
newStatus=VentStatus.VentAll;
break;
}
if (newStatus != turbine.getVentSetting()) {
CommonPacketHandler.INSTANCE.sendToServer(new TurbineChangeVentMessage(turbine,newStatus));
}
}
if (button.id == 7 || button.id == 8) {
boolean newStatus=button.id == 7;
if (newStatus != turbine.getInductorEngaged()) {
CommonPacketHandler.INSTANCE.sendToServer(new TurbineChangeInductorMessage(turbine,newStatus));
}
}
}",0.980579216354344
161323,"@Override public boolean renderWorldBlock(IBlockAccess world,int x,int y,int z,Block block,int modelId,RenderBlocks renderer){
  if (!(block instanceof BlockFuelRod)) {
    return false;
  }
  Tessellator tessellator=Tessellator.instance;
  BlockFuelRod blockFuelRod=(BlockFuelRod)block;
  boolean renderTop=block.shouldSideBeRendered(world,x,y + 1,z,0);
  boolean renderBottom=block.shouldSideBeRendered(world,x,y - 1,z,0);
  boolean renderedFuelOnTop=false;
  boolean renderedFuelOnBottom=false;
  boolean[] renderSides=new boolean[]{block.shouldSideBeRendered(world,x,y,z - 1,2),block.shouldSideBeRendered(world,x,y,z + 1,3),block.shouldSideBeRendered(world,x - 1,y,z,4),block.shouldSideBeRendered(world,x + 1,y,z,5)};
  if (!renderTop && !renderBottom && !renderSides[0]&& !renderSides[1]&& !renderSides[2]&& !renderSides[3]) {
    return false;
  }
  boolean rendered=false;
  int blockMetadata=world.getBlockMetadata(x,y,z);
  TileEntity te;
  te=world.getTileEntity(x,y,z);
  if (te instanceof TileEntityReactorFuelRod) {
    TileEntityReactorFuelRod fuelRod=(TileEntityReactorFuelRod)te;
    if (fuelRod.isConnected()) {
      MultiblockReactor reactor=(MultiblockReactor)fuelRod.getMultiblockController();
      int fuelAmount=reactor.getFuelAmount();
      int wasteAmount=reactor.getWasteAmount();
      int totalFluid=fuelAmount + wasteAmount;
      int capacity=reactor.getCapacity();
      if (capacity > 0 && totalFluid > 0) {
        float fluidColumnOffsetFromCenter=-1f;
        float red, green, blue;
        IIcon iconSide, iconBottom;
        iconSide=iconBottom=null;
        red=green=blue=1f;
        iconSide=BigReactors.fluidFuelColumn.getFlowingIcon();
        iconBottom=BigReactors.fluidFuelColumn.getStillIcon();
        ReactantData fuelData=Reactants.getReactant(reactor.getFuelType());
        ReactantData wasteData=Reactants.getReactant(reactor.getWasteType());
        int fuelColor=fuelData != null ? fuelData.getColor() : StandardReactants.colorYellorium;
        int wasteColor=wasteData != null ? wasteData.getColor() : StandardReactants.colorCyanite;
        if (fuelAmount == 0) {
          red=unpackR(wasteColor);
          green=unpackG(wasteColor);
          blue=unpackB(wasteColor);
        }
 else         if (fuelAmount >= totalFluid) {
          red=unpackR(fuelColor);
          green=unpackG(fuelColor);
          blue=unpackB(fuelColor);
        }
 else {
          float proportion=(float)fuelAmount / (float)totalFluid;
          float fuelR, fuelG, fuelB;
          float wasteR, wasteG, wasteB;
          fuelR=unpackR(fuelColor);
          fuelG=unpackG(fuelColor);
          fuelB=unpackB(fuelColor);
          wasteR=unpackR(wasteColor);
          wasteG=unpackG(wasteColor);
          wasteB=unpackB(wasteColor);
          red=lerp(wasteR,fuelR,proportion);
          green=lerp(wasteG,fuelG,proportion);
          blue=lerp(wasteB,fuelB,proportion);
        }
        float pctFilled=Math.min(1f,Math.max(0f,(float)totalFluid / (float)capacity));
        fluidColumnOffsetFromCenter=lerp(FLUID_RENDER_OFFSET_MIN,FLUID_RENDER_OFFSET_MAX,pctFilled);
        if (iconSide != null && iconBottom != null) {
          tessellator.setColorRGBA_F(red,green,blue,0.75f);
          tessellator.setBrightness(world.getLightBrightnessForSkyBlocks(x,y,z,15));
          renderer.setOverrideBlockTexture(iconBottom);
          float xzMin=fluidColumnOffsetFromCenter;
          float xzMax=1f - fluidColumnOffsetFromCenter;
          renderer.setRenderBounds(xzMin,0.01f,xzMin,xzMax,0.99f,xzMax);
          if (renderer.renderAllFaces || renderBottom) {
            rendered=true;
            renderer.renderFaceYNeg(block,x,y,z,iconBottom);
          }
          if (renderer.renderAllFaces || renderTop) {
            rendered=true;
            renderer.renderFaceYPos(block,x,y,z,iconBottom);
          }
          renderer.setOverrideBlockTexture(iconSide);
          renderer.setRenderBounds(xzMin,0f,xzMin,xzMax,1f,xzMax);
          if (renderer.renderAllFaces || renderSides[0]) {
            rendered=true;
            renderer.renderFaceZNeg(block,x,y,z,iconSide);
          }
          if (renderer.renderAllFaces || renderSides[1]) {
            rendered=true;
            renderer.renderFaceZPos(block,x,y,z,iconSide);
          }
          if (renderer.renderAllFaces || renderSides[2]) {
            rendered=true;
            renderer.renderFaceXNeg(block,x,y,z,iconSide);
          }
          if (renderer.renderAllFaces || renderSides[3]) {
            rendered=true;
            renderer.renderFaceXPos(block,x,y,z,iconSide);
          }
        }
      }
    }
  }
  tessellator.setColorRGBA(255,255,255,255);
  renderer.setRenderBoundsFromBlock(block);
  renderer.setOverrideBlockTexture(null);
  if (!renderedFuelOnBottom && (renderer.renderAllFaces || renderBottom)) {
    rendered=true;
    tessellator.setBrightness(block.getMixedBrightnessForBlock(world,x,y,z));
    renderer.renderFaceYNeg(block,x,y,z,block.getIcon(0,blockMetadata));
  }
  if (renderer.renderAllFaces || renderTop) {
    rendered=true;
    tessellator.setBrightness(block.getMixedBrightnessForBlock(world,x,y,z));
    renderer.renderFaceYPos(block,x,y,z,block.getIcon(1,blockMetadata));
  }
  if (renderer.renderAllFaces || renderSides[0]) {
    rendered=true;
    tessellator.setBrightness(block.getMixedBrightnessForBlock(world,x,y,z));
    renderer.renderFaceZNeg(block,x,y,z,block.getIcon(2,blockMetadata));
  }
  if (renderer.renderAllFaces || renderSides[1]) {
    rendered=true;
    tessellator.setBrightness(block.getMixedBrightnessForBlock(world,x,y,z));
    renderer.renderFaceZPos(block,x,y,z,block.getIcon(3,blockMetadata));
  }
  if (renderer.renderAllFaces || renderSides[2]) {
    rendered=true;
    tessellator.setBrightness(block.getMixedBrightnessForBlock(world,x,y,z));
    renderer.renderFaceXNeg(block,x,y,z,block.getIcon(4,blockMetadata));
  }
  if (renderer.renderAllFaces || renderSides[3]) {
    rendered=true;
    tessellator.setBrightness(block.getMixedBrightnessForBlock(world,x,y,z));
    renderer.renderFaceXPos(block,x,y,z,block.getIcon(5,blockMetadata));
  }
  return rendered;
}","@Override public boolean renderWorldBlock(IBlockAccess world,int x,int y,int z,Block block,int modelId,RenderBlocks renderer){
  if (!(block instanceof BlockFuelRod)) {
    return false;
  }
  Tessellator tessellator=Tessellator.instance;
  boolean renderTop=block.shouldSideBeRendered(world,x,y + 1,z,0);
  boolean renderBottom=block.shouldSideBeRendered(world,x,y - 1,z,0);
  boolean renderedFuelOnTop=false;
  boolean renderedFuelOnBottom=false;
  boolean[] renderSides=new boolean[]{block.shouldSideBeRendered(world,x,y,z - 1,2),block.shouldSideBeRendered(world,x,y,z + 1,3),block.shouldSideBeRendered(world,x - 1,y,z,4),block.shouldSideBeRendered(world,x + 1,y,z,5)};
  if (!renderTop && !renderBottom && !renderSides[0]&& !renderSides[1]&& !renderSides[2]&& !renderSides[3]) {
    return false;
  }
  boolean rendered=false;
  int blockMetadata=world.getBlockMetadata(x,y,z);
  TileEntity te;
  te=world.getTileEntity(x,y,z);
  if (te instanceof TileEntityReactorFuelRod) {
    TileEntityReactorFuelRod fuelRod=(TileEntityReactorFuelRod)te;
    if (fuelRod.isConnected()) {
      MultiblockReactor reactor=(MultiblockReactor)fuelRod.getMultiblockController();
      int fuelAmount=reactor.getFuelAmount();
      int wasteAmount=reactor.getWasteAmount();
      int totalFluid=fuelAmount + wasteAmount;
      int capacity=reactor.getCapacity();
      if (capacity > 0 && totalFluid > 0) {
        float fluidColumnOffsetFromCenter=-1f;
        float red, green, blue;
        IIcon iconSide, iconBottom;
        iconSide=iconBottom=null;
        red=green=blue=1f;
        iconSide=BigReactors.fluidFuelColumn.getFlowingIcon();
        iconBottom=BigReactors.fluidFuelColumn.getStillIcon();
        ReactantData fuelData=Reactants.getReactant(reactor.getFuelType());
        ReactantData wasteData=Reactants.getReactant(reactor.getWasteType());
        int fuelColor=fuelData != null ? fuelData.getColor() : StandardReactants.colorYellorium;
        int wasteColor=wasteData != null ? wasteData.getColor() : StandardReactants.colorCyanite;
        if (fuelAmount == 0) {
          red=unpackR(wasteColor);
          green=unpackG(wasteColor);
          blue=unpackB(wasteColor);
        }
 else         if (fuelAmount >= totalFluid) {
          red=unpackR(fuelColor);
          green=unpackG(fuelColor);
          blue=unpackB(fuelColor);
        }
 else {
          float proportion=(float)fuelAmount / (float)totalFluid;
          float fuelR, fuelG, fuelB;
          float wasteR, wasteG, wasteB;
          fuelR=unpackR(fuelColor);
          fuelG=unpackG(fuelColor);
          fuelB=unpackB(fuelColor);
          wasteR=unpackR(wasteColor);
          wasteG=unpackG(wasteColor);
          wasteB=unpackB(wasteColor);
          red=lerp(wasteR,fuelR,proportion);
          green=lerp(wasteG,fuelG,proportion);
          blue=lerp(wasteB,fuelB,proportion);
        }
        float pctFilled=Math.min(1f,Math.max(0f,(float)totalFluid / (float)capacity));
        fluidColumnOffsetFromCenter=lerp(FLUID_RENDER_OFFSET_MIN,FLUID_RENDER_OFFSET_MAX,pctFilled);
        if (iconSide != null && iconBottom != null) {
          tessellator.setColorRGBA_F(red,green,blue,0.75f);
          tessellator.setBrightness(world.getLightBrightnessForSkyBlocks(x,y,z,15));
          renderer.setOverrideBlockTexture(iconBottom);
          float xzMin=fluidColumnOffsetFromCenter;
          float xzMax=1f - fluidColumnOffsetFromCenter;
          renderer.setRenderBounds(xzMin,0.01f,xzMin,xzMax,0.99f,xzMax);
          if (renderer.renderAllFaces || renderBottom) {
            rendered=true;
            renderer.renderFaceYNeg(block,x,y,z,iconBottom);
          }
          if (renderer.renderAllFaces || renderTop) {
            rendered=true;
            renderer.renderFaceYPos(block,x,y,z,iconBottom);
          }
          renderer.setOverrideBlockTexture(iconSide);
          renderer.setRenderBounds(xzMin,0f,xzMin,xzMax,1f,xzMax);
          if (renderer.renderAllFaces || renderSides[0]) {
            rendered=true;
            renderer.renderFaceZNeg(block,x,y,z,iconSide);
          }
          if (renderer.renderAllFaces || renderSides[1]) {
            rendered=true;
            renderer.renderFaceZPos(block,x,y,z,iconSide);
          }
          if (renderer.renderAllFaces || renderSides[2]) {
            rendered=true;
            renderer.renderFaceXNeg(block,x,y,z,iconSide);
          }
          if (renderer.renderAllFaces || renderSides[3]) {
            rendered=true;
            renderer.renderFaceXPos(block,x,y,z,iconSide);
          }
        }
      }
    }
  }
  tessellator.setColorRGBA(255,255,255,255);
  renderer.setRenderBoundsFromBlock(block);
  renderer.setOverrideBlockTexture(null);
  if (!renderedFuelOnBottom && (renderer.renderAllFaces || renderBottom)) {
    rendered=true;
    tessellator.setBrightness(block.getMixedBrightnessForBlock(world,x,y,z));
    renderer.renderFaceYNeg(block,x,y,z,block.getIcon(0,blockMetadata));
  }
  if (renderer.renderAllFaces || renderTop) {
    rendered=true;
    tessellator.setBrightness(block.getMixedBrightnessForBlock(world,x,y,z));
    renderer.renderFaceYPos(block,x,y,z,block.getIcon(1,blockMetadata));
  }
  if (renderer.renderAllFaces || renderSides[0]) {
    rendered=true;
    tessellator.setBrightness(block.getMixedBrightnessForBlock(world,x,y,z));
    renderer.renderFaceZNeg(block,x,y,z,block.getIcon(2,blockMetadata));
  }
  if (renderer.renderAllFaces || renderSides[1]) {
    rendered=true;
    tessellator.setBrightness(block.getMixedBrightnessForBlock(world,x,y,z));
    renderer.renderFaceZPos(block,x,y,z,block.getIcon(3,blockMetadata));
  }
  if (renderer.renderAllFaces || renderSides[2]) {
    rendered=true;
    tessellator.setBrightness(block.getMixedBrightnessForBlock(world,x,y,z));
    renderer.renderFaceXNeg(block,x,y,z,block.getIcon(4,blockMetadata));
  }
  if (renderer.renderAllFaces || renderSides[3]) {
    rendered=true;
    tessellator.setBrightness(block.getMixedBrightnessForBlock(world,x,y,z));
    renderer.renderFaceXPos(block,x,y,z,block.getIcon(5,blockMetadata));
  }
  return rendered;
}",0.996004240397945
161324,"private void sendInterModAPIMessages(){
  ItemIngot ingotGeneric=BigReactors.ingotGeneric;
  ItemStack yelloriteOre=new ItemStack(BigReactors.blockYelloriteOre,1);
  final int YELLORIUM=0;
  String[] names={""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str""};
  ItemStack[] ingots=new ItemStack[names.length];
  ItemStack[] dusts=new ItemStack[names.length];
  for (int i=0; i < names.length; i++) {
    ingots[i]=ingotGeneric.getIngotItem(names[i]);
    dusts[i]=ingotGeneric.getDustItem(names[i]);
  }
  ItemStack doubledYelloriumDust=null;
  if (dusts[YELLORIUM] != null) {
    doubledYelloriumDust=dusts[YELLORIUM].copy();
    doubledYelloriumDust.stackSize=2;
  }
  if (Loader.isModLoaded(""String_Node_Str"")) {
    ItemStack sandStack=new ItemStack(Blocks.sand,1);
    ItemStack doubleYellorium=ingots[YELLORIUM].copy();
    doubleYellorium.stackSize=2;
    if (yelloriteOre != null && ingots[YELLORIUM] != null) {
      ThermalExpansionHelper.addFurnaceRecipe(400,yelloriteOre,ingots[YELLORIUM]);
      ThermalExpansionHelper.addSmelterRecipe(1600,yelloriteOre,sandStack,doubleYellorium);
    }
    if (yelloriteOre != null && doubledYelloriumDust != null) {
      ThermalExpansionHelper.addPulverizerRecipe(4000,yelloriteOre,doubledYelloriumDust);
    }
    if (doubledYelloriumDust != null && doubleYellorium != null) {
      ThermalExpansionHelper.addSmelterRecipe(200,doubledYelloriumDust,sandStack,doubleYellorium);
    }
    for (int i=0; i < ingots.length; i++) {
      if (ingots[i] == null || dusts[i] == null) {
        continue;
      }
      ThermalExpansionHelper.addPulverizerRecipe(2400,ingots[i],dusts[i]);
      ThermalExpansionHelper.addSmelterRecipe(200,doubledYelloriumDust,sandStack,doubleYellorium);
      ItemStack doubleDust=dusts[i].copy();
      doubleDust.stackSize=2;
      ItemStack doubleIngot=ingots[i].copy();
      doubleIngot.stackSize=2;
      ThermalExpansionHelper.addSmelterRecipe(200,doubleDust,sandStack,doubleIngot);
    }
  }
  if (Loader.isModLoaded(""String_Node_Str"")) {
    IMCHelper.MFR.addOreToMiningLaserFocus(yelloriteOre,2);
    IMCHelper.MFR.setMiningLaserFocusPreferredOre(yelloriteOre,9);
  }
  if (Loader.isModLoaded(""String_Node_Str"")) {
    if (yelloriteOre != null && doubledYelloriumDust != null) {
      IMCHelper.AE2.addGrinderRecipe(yelloriteOre,doubledYelloriumDust,4);
    }
    for (int i=0; i < ingots.length; i++) {
      if (ingots[i] == null || dusts[i] == null) {
        continue;
      }
      IMCHelper.AE2.addGrinderRecipe(ingots[i],dusts[i],2);
    }
  }
}","private void sendInterModAPIMessages(){
  ItemIngot ingotGeneric=BigReactors.ingotGeneric;
  ItemStack yelloriteOre=new ItemStack(BigReactors.blockYelloriteOre,1);
  final int YELLORIUM=0;
  String[] names={""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str""};
  ItemStack[] ingots=new ItemStack[names.length];
  ItemStack[] dusts=new ItemStack[names.length];
  for (int i=0; i < names.length; i++) {
    ingots[i]=ingotGeneric.getIngotItem(names[i]);
    dusts[i]=ingotGeneric.getDustItem(names[i]);
  }
  ItemStack doubledYelloriumDust=null;
  if (dusts[YELLORIUM] != null) {
    doubledYelloriumDust=dusts[YELLORIUM].copy();
    doubledYelloriumDust.stackSize=2;
  }
  if (Loader.isModLoaded(""String_Node_Str"")) {
    ItemStack sandStack=new ItemStack(Blocks.sand,1);
    ItemStack doubleYellorium=ingots[YELLORIUM].copy();
    doubleYellorium.stackSize=2;
    if (ingots[YELLORIUM] != null) {
      ThermalExpansionHelper.addFurnaceRecipe(400,yelloriteOre,ingots[YELLORIUM]);
      ThermalExpansionHelper.addSmelterRecipe(1600,yelloriteOre,sandStack,doubleYellorium);
    }
    if (doubledYelloriumDust != null) {
      ThermalExpansionHelper.addPulverizerRecipe(4000,yelloriteOre,doubledYelloriumDust);
    }
    if (doubledYelloriumDust != null) {
      ThermalExpansionHelper.addSmelterRecipe(200,doubledYelloriumDust,sandStack,doubleYellorium);
    }
    for (int i=0; i < ingots.length; i++) {
      if (ingots[i] == null || dusts[i] == null) {
        continue;
      }
      ThermalExpansionHelper.addPulverizerRecipe(2400,ingots[i],dusts[i]);
      ThermalExpansionHelper.addSmelterRecipe(200,doubledYelloriumDust,sandStack,doubleYellorium);
      ItemStack doubleDust=dusts[i].copy();
      doubleDust.stackSize=2;
      ItemStack doubleIngot=ingots[i].copy();
      doubleIngot.stackSize=2;
      ThermalExpansionHelper.addSmelterRecipe(200,doubleDust,sandStack,doubleIngot);
    }
  }
  if (Loader.isModLoaded(""String_Node_Str"")) {
    IMCHelper.MFR.addOreToMiningLaserFocus(yelloriteOre,2);
    IMCHelper.MFR.setMiningLaserFocusPreferredOre(yelloriteOre,9);
  }
  if (Loader.isModLoaded(""String_Node_Str"")) {
    if (doubledYelloriumDust != null) {
      IMCHelper.AE2.addGrinderRecipe(yelloriteOre,doubledYelloriumDust,4);
    }
    for (int i=0; i < ingots.length; i++) {
      if (ingots[i] == null || dusts[i] == null) {
        continue;
      }
      IMCHelper.AE2.addGrinderRecipe(ingots[i],dusts[i],2);
    }
  }
}",0.980259222333001
161325,"public void changeAllControlRodInsertionValues(short delta){
  if (this.assemblyState != AssemblyState.Assembled) {
    return;
  }
  for (  TileEntityReactorControlRod cr : attachedControlRods) {
    if (cr != null && cr.isConnected()) {
      cr.setControlRodInsertion((short)(cr.getControlRodInsertion() + delta));
    }
  }
}","public void changeAllControlRodInsertionValues(short delta){
  if (this.assemblyState != AssemblyState.Assembled) {
    return;
  }
  for (  TileEntityReactorControlRod cr : attachedControlRods) {
    if (cr.isConnected()) {
      cr.setControlRodInsertion((short)(cr.getControlRodInsertion() + delta));
    }
  }
}",0.9782608695652174
161326,"/** 
 * Eject fuel contained in the reactor.
 * @param dumpAll If true, any remaining fuel will simply be lost.
 * @param destination If not null, then fuel will only be distributed to a port matching these coordinates.
 */
public void ejectFuel(boolean dumpAll,CoordTriplet destination){
  int amtEjected=0;
  String fuelReactantType=fuelContainer.getFuelType();
  if (fuelReactantType == null) {
    return;
  }
  int minimumReactantAmount=Reactants.getMinimumReactantToProduceSolid(fuelReactantType);
  if (fuelContainer.getFuelAmount() >= minimumReactantAmount) {
    for (    TileEntityReactorAccessPort port : attachedAccessPorts) {
      if (fuelContainer.getFuelAmount() < minimumReactantAmount) {
        continue;
      }
      if (port == null || !port.isConnected()) {
        continue;
      }
      if (destination != null && !destination.equals(port.xCoord,port.yCoord,port.zCoord)) {
        continue;
      }
      int reactantEjected=port.emitReactant(fuelReactantType,fuelContainer.getFuelAmount());
      fuelContainer.dumpFuel(reactantEjected);
      amtEjected+=reactantEjected;
    }
  }
  if (dumpAll) {
    amtEjected+=fuelContainer.getFuelAmount();
    fuelContainer.setFuel(null);
  }
  if (amtEjected > 0) {
    markReferenceCoordForUpdate();
    markReferenceCoordDirty();
  }
}","/** 
 * Eject fuel contained in the reactor.
 * @param dumpAll If true, any remaining fuel will simply be lost.
 * @param destination If not null, then fuel will only be distributed to a port matching these coordinates.
 */
public void ejectFuel(boolean dumpAll,CoordTriplet destination){
  int amtEjected=0;
  String fuelReactantType=fuelContainer.getFuelType();
  if (fuelReactantType == null) {
    return;
  }
  int minimumReactantAmount=Reactants.getMinimumReactantToProduceSolid(fuelReactantType);
  if (fuelContainer.getFuelAmount() >= minimumReactantAmount) {
    for (    TileEntityReactorAccessPort port : attachedAccessPorts) {
      if (fuelContainer.getFuelAmount() < minimumReactantAmount) {
        continue;
      }
      if (!port.isConnected()) {
        continue;
      }
      if (destination != null && !destination.equals(port.xCoord,port.yCoord,port.zCoord)) {
        continue;
      }
      int reactantEjected=port.emitReactant(fuelReactantType,fuelContainer.getFuelAmount());
      fuelContainer.dumpFuel(reactantEjected);
      amtEjected+=reactantEjected;
    }
  }
  if (dumpAll) {
    amtEjected+=fuelContainer.getFuelAmount();
    fuelContainer.setFuel(null);
  }
  if (amtEjected > 0) {
    markReferenceCoordForUpdate();
    markReferenceCoordDirty();
  }
}",0.993841416474211
161327,"protected void refuel(){
  if (fuelContainer.getRemainingSpace() < Reactants.standardSolidReactantAmount) {
    return;
  }
  int amtAdded=0;
  for (  TileEntityReactorAccessPort port : attachedAccessPorts) {
    if (fuelContainer.getRemainingSpace() <= 0) {
      break;
    }
    if (port == null || !port.isConnected()) {
      continue;
    }
    String portReactantType=port.getInputReactantType();
    int portReactantAmount=port.getInputReactantAmount();
    if (portReactantType == null || portReactantAmount <= 0) {
      continue;
    }
    if (!Reactants.isFuel(portReactantType)) {
      continue;
    }
    int amountToAdd=fuelContainer.addFuel(portReactantType,portReactantAmount,false);
    if (amountToAdd <= 0) {
      continue;
    }
    int portCanAdd=port.consumeReactantItem(amountToAdd);
    if (portCanAdd <= 0) {
      continue;
    }
    amtAdded=fuelContainer.addFuel(portReactantType,portReactantAmount,true);
  }
  if (amtAdded > 0) {
    markReferenceCoordForUpdate();
    markReferenceCoordDirty();
  }
}","protected void refuel(){
  if (fuelContainer.getRemainingSpace() < Reactants.standardSolidReactantAmount) {
    return;
  }
  int amtAdded=0;
  for (  TileEntityReactorAccessPort port : attachedAccessPorts) {
    if (fuelContainer.getRemainingSpace() <= 0) {
      break;
    }
    if (!port.isConnected()) {
      continue;
    }
    String portReactantType=port.getInputReactantType();
    int portReactantAmount=port.getInputReactantAmount();
    if (portReactantType == null || portReactantAmount <= 0) {
      continue;
    }
    if (!Reactants.isFuel(portReactantType)) {
      continue;
    }
    int amountToAdd=fuelContainer.addFuel(portReactantType,portReactantAmount,false);
    if (amountToAdd <= 0) {
      continue;
    }
    int portCanAdd=port.consumeReactantItem(amountToAdd);
    if (portCanAdd <= 0) {
      continue;
    }
    amtAdded=fuelContainer.addFuel(portReactantType,portReactantAmount,true);
  }
  if (amtAdded > 0) {
    markReferenceCoordForUpdate();
    markReferenceCoordDirty();
  }
}",0.3625730994152046
161328,"@Override public boolean updateServer(){
  if (Float.isNaN(this.getReactorHeat())) {
    this.setReactorHeat(0.0f);
  }
  float oldHeat=this.getReactorHeat();
  float oldEnergy=this.getEnergyStored();
  energyGeneratedLastTick=0f;
  fuelConsumedLastTick=0f;
  float newHeat=0f;
  if (getActive()) {
    if (!currentFuelRod.hasNext()) {
      currentFuelRod=attachedFuelRods.iterator();
    }
    TileEntityReactorFuelRod source=currentFuelRod.next();
    TileEntityReactorControlRod sourceControlRod=(TileEntityReactorControlRod)worldObj.getTileEntity(source.xCoord,getMaximumCoord().y,source.zCoord);
    if (source != null && sourceControlRod != null) {
      RadiationData radData=radiationHelper.radiate(worldObj,fuelContainer,source,sourceControlRod,getFuelHeat(),getReactorHeat(),attachedControlRods.size());
      if (radData != null) {
        addFuelHeat(radData.getFuelHeatChange(attachedFuelRods.size()));
        addReactorHeat(radData.getEnvironmentHeatChange(getReactorVolume()));
        fuelConsumedLastTick+=radData.fuelUsage;
      }
    }
  }
  radiationHelper.tick(getActive());
  if (wasteEjection == WasteEjectionSetting.kAutomatic) {
    ejectWaste(false,null);
  }
  refuel();
  float tempDiff=fuelHeat - reactorHeat;
  if (tempDiff > 0.01f) {
    float rfTransferred=tempDiff * fuelToReactorHeatTransferCoefficient;
    float fuelRf=StaticUtils.Energy.getRFFromVolumeAndTemp(attachedFuelRods.size(),fuelHeat);
    fuelRf-=rfTransferred;
    setFuelHeat(StaticUtils.Energy.getTempFromVolumeAndRF(attachedFuelRods.size(),fuelRf));
    float reactorRf=StaticUtils.Energy.getRFFromVolumeAndTemp(getReactorVolume(),getReactorHeat());
    reactorRf+=rfTransferred;
    setReactorHeat(StaticUtils.Energy.getTempFromVolumeAndRF(getReactorVolume(),reactorRf));
  }
  tempDiff=getReactorHeat() - getCoolantTemperature();
  if (tempDiff > 0.01f) {
    float rfTransferred=tempDiff * reactorToCoolantSystemHeatTransferCoefficient;
    float reactorRf=StaticUtils.Energy.getRFFromVolumeAndTemp(getReactorVolume(),getReactorHeat());
    if (isPassivelyCooled()) {
      rfTransferred*=passiveCoolingTransferEfficiency;
      generateEnergy(rfTransferred * passiveCoolingPowerEfficiency);
    }
 else {
      rfTransferred-=coolantContainer.onAbsorbHeat(rfTransferred);
      energyGeneratedLastTick=coolantContainer.getFluidVaporizedLastTick();
    }
    reactorRf-=rfTransferred;
    setReactorHeat(StaticUtils.Energy.getTempFromVolumeAndRF(getReactorVolume(),reactorRf));
  }
  tempDiff=getReactorHeat() - getPassiveCoolantTemperature();
  if (tempDiff > 0.000001f) {
    float rfLost=Math.max(1f,tempDiff * reactorHeatLossCoefficient);
    float reactorNewRf=Math.max(0f,StaticUtils.Energy.getRFFromVolumeAndTemp(getReactorVolume(),getReactorHeat()) - rfLost);
    setReactorHeat(StaticUtils.Energy.getTempFromVolumeAndRF(getReactorVolume(),reactorNewRf));
  }
  if (reactorHeat < 0f) {
    setReactorHeat(0f);
  }
  if (fuelHeat < 0f) {
    setFuelHeat(0f);
  }
  int energyAvailable=(int)getEnergyStored();
  int energyRemaining=energyAvailable;
  if (attachedPowerTaps.size() > 0 && energyRemaining > 0) {
    int splitEnergy=energyRemaining / attachedPowerTaps.size();
    for (    TileEntityReactorPowerTap powerTap : attachedPowerTaps) {
      if (energyRemaining <= 0) {
        break;
      }
      if (powerTap == null || !powerTap.isConnected()) {
        continue;
      }
      energyRemaining-=splitEnergy - powerTap.onProvidePower(splitEnergy);
    }
    if (energyRemaining > 0) {
      for (      TileEntityReactorPowerTap powerTap : attachedPowerTaps) {
        if (energyRemaining <= 0) {
          break;
        }
        if (powerTap == null || !powerTap.isConnected()) {
          continue;
        }
        energyRemaining=powerTap.onProvidePower(energyRemaining);
      }
    }
  }
  if (energyAvailable != energyRemaining) {
    reduceStoredEnergy((energyAvailable - energyRemaining));
  }
  ticksSinceLastUpdate++;
  if (ticksSinceLastUpdate >= ticksBetweenUpdates) {
    ticksSinceLastUpdate=0;
    sendTickUpdate();
  }
  for (  ITickableMultiblockPart tickable : attachedTickables) {
    if (tickable == null) {
      continue;
    }
    tickable.onMultiblockServerTick();
  }
  if (attachedGlass.size() > 0 && fuelContainer.shouldUpdate()) {
    markReferenceCoordForUpdate();
  }
  return (oldHeat != this.getReactorHeat() || oldEnergy != this.getEnergyStored());
}","@Override public boolean updateServer(){
  if (Float.isNaN(this.getReactorHeat())) {
    this.setReactorHeat(0.0f);
  }
  float oldHeat=this.getReactorHeat();
  float oldEnergy=this.getEnergyStored();
  energyGeneratedLastTick=0f;
  fuelConsumedLastTick=0f;
  float newHeat=0f;
  if (getActive()) {
    if (!currentFuelRod.hasNext()) {
      currentFuelRod=attachedFuelRods.iterator();
    }
    TileEntityReactorFuelRod source=currentFuelRod.next();
    TileEntityReactorControlRod sourceControlRod=(TileEntityReactorControlRod)worldObj.getTileEntity(source.xCoord,getMaximumCoord().y,source.zCoord);
    if (sourceControlRod != null) {
      RadiationData radData=radiationHelper.radiate(worldObj,fuelContainer,source,sourceControlRod,getFuelHeat(),getReactorHeat(),attachedControlRods.size());
      if (radData != null) {
        addFuelHeat(radData.getFuelHeatChange(attachedFuelRods.size()));
        addReactorHeat(radData.getEnvironmentHeatChange(getReactorVolume()));
        fuelConsumedLastTick+=radData.fuelUsage;
      }
    }
  }
  radiationHelper.tick(getActive());
  if (wasteEjection == WasteEjectionSetting.kAutomatic) {
    ejectWaste(false,null);
  }
  refuel();
  float tempDiff=fuelHeat - reactorHeat;
  if (tempDiff > 0.01f) {
    float rfTransferred=tempDiff * fuelToReactorHeatTransferCoefficient;
    float fuelRf=StaticUtils.Energy.getRFFromVolumeAndTemp(attachedFuelRods.size(),fuelHeat);
    fuelRf-=rfTransferred;
    setFuelHeat(StaticUtils.Energy.getTempFromVolumeAndRF(attachedFuelRods.size(),fuelRf));
    float reactorRf=StaticUtils.Energy.getRFFromVolumeAndTemp(getReactorVolume(),getReactorHeat());
    reactorRf+=rfTransferred;
    setReactorHeat(StaticUtils.Energy.getTempFromVolumeAndRF(getReactorVolume(),reactorRf));
  }
  tempDiff=getReactorHeat() - getCoolantTemperature();
  if (tempDiff > 0.01f) {
    float rfTransferred=tempDiff * reactorToCoolantSystemHeatTransferCoefficient;
    float reactorRf=StaticUtils.Energy.getRFFromVolumeAndTemp(getReactorVolume(),getReactorHeat());
    if (isPassivelyCooled()) {
      rfTransferred*=passiveCoolingTransferEfficiency;
      generateEnergy(rfTransferred * passiveCoolingPowerEfficiency);
    }
 else {
      rfTransferred-=coolantContainer.onAbsorbHeat(rfTransferred);
      energyGeneratedLastTick=coolantContainer.getFluidVaporizedLastTick();
    }
    reactorRf-=rfTransferred;
    setReactorHeat(StaticUtils.Energy.getTempFromVolumeAndRF(getReactorVolume(),reactorRf));
  }
  tempDiff=getReactorHeat() - getPassiveCoolantTemperature();
  if (tempDiff > 0.000001f) {
    float rfLost=Math.max(1f,tempDiff * reactorHeatLossCoefficient);
    float reactorNewRf=Math.max(0f,StaticUtils.Energy.getRFFromVolumeAndTemp(getReactorVolume(),getReactorHeat()) - rfLost);
    setReactorHeat(StaticUtils.Energy.getTempFromVolumeAndRF(getReactorVolume(),reactorNewRf));
  }
  if (reactorHeat < 0f) {
    setReactorHeat(0f);
  }
  if (fuelHeat < 0f) {
    setFuelHeat(0f);
  }
  int energyAvailable=(int)getEnergyStored();
  int energyRemaining=energyAvailable;
  if (attachedPowerTaps.size() > 0 && energyRemaining > 0) {
    int splitEnergy=energyRemaining / attachedPowerTaps.size();
    for (    TileEntityReactorPowerTap powerTap : attachedPowerTaps) {
      if (energyRemaining <= 0) {
        break;
      }
      if (!powerTap.isConnected()) {
        continue;
      }
      energyRemaining-=splitEnergy - powerTap.onProvidePower(splitEnergy);
    }
    if (energyRemaining > 0) {
      for (      TileEntityReactorPowerTap powerTap : attachedPowerTaps) {
        if (energyRemaining <= 0) {
          break;
        }
        if (!powerTap.isConnected()) {
          continue;
        }
        energyRemaining=powerTap.onProvidePower(energyRemaining);
      }
    }
  }
  if (energyAvailable != energyRemaining) {
    reduceStoredEnergy((energyAvailable - energyRemaining));
  }
  ticksSinceLastUpdate++;
  if (ticksSinceLastUpdate >= ticksBetweenUpdates) {
    ticksSinceLastUpdate=0;
    sendTickUpdate();
  }
  for (  ITickableMultiblockPart tickable : attachedTickables) {
    tickable.onMultiblockServerTick();
  }
  if (attachedGlass.size() > 0 && fuelContainer.shouldUpdate()) {
    markReferenceCoordForUpdate();
  }
  return (oldHeat != this.getReactorHeat() || oldEnergy != this.getEnergyStored());
}",0.7663529951801699
161329,"/** 
 * Attempt to eject waste contained in the reactor
 * @param dumpAll If true, any waste remaining after ejection will be discarded.
 * @param destination If set, waste will only be ejected to ports with coordinates matching this one.
 */
public void ejectWaste(boolean dumpAll,CoordTriplet destination){
  int amtEjected=0;
  String wasteReactantType=fuelContainer.getWasteType();
  if (wasteReactantType == null) {
    return;
  }
  int minimumReactantAmount=Reactants.getMinimumReactantToProduceSolid(wasteReactantType);
  if (fuelContainer.getWasteAmount() >= minimumReactantAmount) {
    for (    TileEntityReactorAccessPort port : attachedAccessPorts) {
      if (fuelContainer.getWasteAmount() < minimumReactantAmount) {
        continue;
      }
      if (port == null || !port.isConnected()) {
        continue;
      }
      if (destination != null && !destination.equals(port.xCoord,port.yCoord,port.zCoord)) {
        continue;
      }
      if (destination == null && !port.isInlet()) {
        int reactantEjected=port.emitReactant(wasteReactantType,fuelContainer.getWasteAmount());
        fuelContainer.dumpWaste(reactantEjected);
        amtEjected+=reactantEjected;
      }
    }
    if (destination == null && fuelContainer.getWasteAmount() > minimumReactantAmount) {
      for (      TileEntityReactorAccessPort port : attachedAccessPorts) {
        if (fuelContainer.getWasteAmount() < minimumReactantAmount) {
          continue;
        }
        if (port == null || !port.isConnected()) {
          continue;
        }
        int reactantEjected=port.emitReactant(wasteReactantType,fuelContainer.getWasteAmount());
        fuelContainer.dumpWaste(reactantEjected);
        amtEjected+=reactantEjected;
      }
    }
  }
  if (dumpAll) {
    amtEjected+=fuelContainer.getWasteAmount();
    fuelContainer.setWaste(null);
  }
  if (amtEjected > 0) {
    markReferenceCoordForUpdate();
    markReferenceCoordDirty();
  }
}","/** 
 * Attempt to eject waste contained in the reactor
 * @param dumpAll If true, any waste remaining after ejection will be discarded.
 * @param destination If set, waste will only be ejected to ports with coordinates matching this one.
 */
public void ejectWaste(boolean dumpAll,CoordTriplet destination){
  int amtEjected=0;
  String wasteReactantType=fuelContainer.getWasteType();
  if (wasteReactantType == null) {
    return;
  }
  int minimumReactantAmount=Reactants.getMinimumReactantToProduceSolid(wasteReactantType);
  if (fuelContainer.getWasteAmount() >= minimumReactantAmount) {
    for (    TileEntityReactorAccessPort port : attachedAccessPorts) {
      if (fuelContainer.getWasteAmount() < minimumReactantAmount) {
        continue;
      }
      if (!port.isConnected()) {
        continue;
      }
      if (destination != null && !destination.equals(port.xCoord,port.yCoord,port.zCoord)) {
        continue;
      }
      if (destination == null && !port.isInlet()) {
        int reactantEjected=port.emitReactant(wasteReactantType,fuelContainer.getWasteAmount());
        fuelContainer.dumpWaste(reactantEjected);
        amtEjected+=reactantEjected;
      }
    }
    if (destination == null && fuelContainer.getWasteAmount() > minimumReactantAmount) {
      for (      TileEntityReactorAccessPort port : attachedAccessPorts) {
        if (fuelContainer.getWasteAmount() < minimumReactantAmount) {
          continue;
        }
        if (!port.isConnected()) {
          continue;
        }
        int reactantEjected=port.emitReactant(wasteReactantType,fuelContainer.getWasteAmount());
        fuelContainer.dumpWaste(reactantEjected);
        amtEjected+=reactantEjected;
      }
    }
  }
  if (dumpAll) {
    amtEjected+=fuelContainer.getWasteAmount();
    fuelContainer.setWaste(null);
  }
  if (amtEjected > 0) {
    markReferenceCoordForUpdate();
    markReferenceCoordDirty();
  }
}",0.6229932677369239
161330,"private void recalculateDerivedValues(){
  CoordTriplet minCoord, maxCoord;
  minCoord=getMinimumCoord();
  maxCoord=getMaximumCoord();
  fuelContainer.setCapacity(attachedFuelRods.size() * FuelCapacityPerFuelRod);
  fuelToReactorHeatTransferCoefficient=0f;
  for (  TileEntityReactorFuelRod fuelRod : attachedFuelRods) {
    fuelToReactorHeatTransferCoefficient+=fuelRod.getHeatTransferRate();
  }
  int maxFuelRodY=maxCoord.y - 1;
  int minFuelRodY=minCoord.y + 1;
  currentFuelRod=attachedFuelRods.iterator();
  int xSize=maxCoord.x - minCoord.x - 1;
  int ySize=maxCoord.y - minCoord.y - 1;
  int zSize=maxCoord.z - minCoord.z - 1;
  int surfaceArea=2 * (xSize * ySize + xSize * zSize + ySize * zSize);
  reactorToCoolantSystemHeatTransferCoefficient=IHeatEntity.conductivityIron * surfaceArea;
  xSize+=2;
  ySize+=2;
  zSize+=2;
  surfaceArea=2 * (xSize * ySize + xSize * zSize + ySize * zSize);
  reactorHeatLossCoefficient=reactorHeatLossConductivity * surfaceArea;
  if (worldObj.isRemote) {
    this.onFuelStatusChanged();
  }
 else {
    markReferenceCoordForUpdate();
  }
  calculateReactorVolume();
  if (attachedCoolantPorts.size() > 0) {
    int outerVolume=StaticUtils.ExtraMath.Volume(minCoord,maxCoord) - reactorVolume;
    coolantContainer.setCapacity(Math.max(0,Math.min(50000,outerVolume * 100)));
  }
 else {
    coolantContainer.setCapacity(0);
  }
}","private void recalculateDerivedValues(){
  CoordTriplet minCoord, maxCoord;
  minCoord=getMinimumCoord();
  maxCoord=getMaximumCoord();
  fuelContainer.setCapacity(attachedFuelRods.size() * FuelCapacityPerFuelRod);
  fuelToReactorHeatTransferCoefficient=0f;
  for (  TileEntityReactorFuelRod fuelRod : attachedFuelRods) {
    fuelToReactorHeatTransferCoefficient+=fuelRod.getHeatTransferRate();
  }
  int xSize=maxCoord.x - minCoord.x - 1;
  int ySize=maxCoord.y - minCoord.y - 1;
  int zSize=maxCoord.z - minCoord.z - 1;
  int surfaceArea=2 * (xSize * ySize + xSize * zSize + ySize * zSize);
  reactorToCoolantSystemHeatTransferCoefficient=IHeatEntity.conductivityIron * surfaceArea;
  xSize+=2;
  ySize+=2;
  zSize+=2;
  surfaceArea=2 * (xSize * ySize + xSize * zSize + ySize * zSize);
  reactorHeatLossCoefficient=reactorHeatLossConductivity * surfaceArea;
  if (worldObj.isRemote) {
    this.onFuelStatusChanged();
  }
 else {
    markReferenceCoordForUpdate();
  }
  calculateReactorVolume();
  if (attachedCoolantPorts.size() > 0) {
    int outerVolume=StaticUtils.ExtraMath.Volume(minCoord,maxCoord) - reactorVolume;
    coolantContainer.setCapacity(Math.max(0,Math.min(50000,outerVolume * 100)));
  }
 else {
    coolantContainer.setCapacity(0);
  }
}",0.9566869300911854
161331,"/** 
 * Directly set the waste ejection setting. Will dispatch network updates from server to interested clients.
 * @param newSetting The new waste ejection setting.
 */
public void setWasteEjection(WasteEjectionSetting newSetting){
  if (this.wasteEjection != newSetting) {
    this.wasteEjection=newSetting;
    if (!this.worldObj.isRemote) {
      if (this.updatePlayers.size() > 0) {
        CoordTriplet coord=getReferenceCoord();
        for (        EntityPlayer player : updatePlayers) {
          CommonPacketHandler.INSTANCE.sendTo(new ReactorUpdateWasteEjectionMessage(this),(EntityPlayerMP)player);
        }
      }
    }
  }
}","/** 
 * Directly set the waste ejection setting. Will dispatch network updates from server to interested clients.
 * @param newSetting The new waste ejection setting.
 */
public void setWasteEjection(WasteEjectionSetting newSetting){
  if (this.wasteEjection != newSetting) {
    this.wasteEjection=newSetting;
    if (!this.worldObj.isRemote) {
      if (this.updatePlayers.size() > 0) {
        for (        EntityPlayer player : updatePlayers) {
          CommonPacketHandler.INSTANCE.sendTo(new ReactorUpdateWasteEjectionMessage(this),(EntityPlayerMP)player);
        }
      }
    }
  }
}",0.9611021069692058
161332,"public void setAllControlRodInsertionValues(int newValue){
  if (this.assemblyState != AssemblyState.Assembled) {
    return;
  }
  for (  TileEntityReactorControlRod cr : attachedControlRods) {
    if (cr != null && cr.isConnected()) {
      cr.setControlRodInsertion((short)newValue);
    }
  }
}","public void setAllControlRodInsertionValues(int newValue){
  if (this.assemblyState != AssemblyState.Assembled) {
    return;
  }
  for (  TileEntityReactorControlRod cr : attachedControlRods) {
    if (cr.isConnected()) {
      cr.setControlRodInsertion((short)newValue);
    }
  }
}",0.9759450171821306
161333,"@Override public boolean onBlockActivated(World world,int x,int y,int z,EntityPlayer player,int par6,float par7,float par8,float par9){
  if (player.isSneaking()) {
    return false;
  }
  int metadata=world.getBlockMetadata(x,y,z);
  TileEntity te=world.getTileEntity(x,y,z);
  IMultiblockPart part=null;
  MultiblockControllerBase controller=null;
  if (te instanceof IMultiblockPart) {
    part=(IMultiblockPart)te;
    controller=part.getMultiblockController();
  }
  if (isCasing(metadata) || isPowerTap(metadata) || isComputerPort(metadata)) {
    if (player.getCurrentEquippedItem() == null) {
      if (controller != null) {
        Exception e=controller.getLastValidationException();
        if (e != null) {
          player.addChatMessage(new ChatComponentText(e.getMessage()));
          return true;
        }
      }
 else {
        player.addChatMessage(new ChatComponentText(""String_Node_Str""));
        return true;
      }
    }
    return false;
  }
  if (!world.isRemote && (isAccessPort(metadata) || isCoolantPort(metadata))) {
    ItemStack currentEquippedItem=player.getCurrentEquippedItem();
    if (StaticUtils.Inventory.isPlayerHoldingWrench(player)) {
      if (te instanceof TileEntityReactorCoolantPort) {
        TileEntityReactorCoolantPort cp=(TileEntityReactorCoolantPort)te;
        cp.setInlet(!cp.isInlet(),true);
        return true;
      }
 else       if (te instanceof TileEntityReactorAccessPort) {
        TileEntityReactorAccessPort cp=(TileEntityReactorAccessPort)te;
        cp.setInlet(!cp.isInlet());
        return true;
      }
    }
 else     if (isCoolantPort(metadata)) {
      return false;
    }
  }
  if (isController(metadata) && (controller == null || !controller.isAssembled())) {
    return false;
  }
  if (!world.isRemote) {
    player.openGui(BRLoader.instance,0,world,x,y,z);
  }
  return true;
}","@Override public boolean onBlockActivated(World world,int x,int y,int z,EntityPlayer player,int par6,float par7,float par8,float par9){
  if (player.isSneaking()) {
    return false;
  }
  int metadata=world.getBlockMetadata(x,y,z);
  TileEntity te=world.getTileEntity(x,y,z);
  IMultiblockPart part=null;
  MultiblockControllerBase controller=null;
  if (te instanceof IMultiblockPart) {
    part=(IMultiblockPart)te;
    controller=part.getMultiblockController();
  }
  if (isCasing(metadata) || isPowerTap(metadata) || isComputerPort(metadata)) {
    if (player.getCurrentEquippedItem() == null) {
      if (controller != null) {
        Exception e=controller.getLastValidationException();
        if (e != null) {
          player.addChatMessage(new ChatComponentText(e.getMessage()));
          return true;
        }
      }
 else {
        player.addChatMessage(new ChatComponentText(""String_Node_Str""));
        return true;
      }
    }
    return false;
  }
  if (!world.isRemote && (isAccessPort(metadata) || isCoolantPort(metadata))) {
    if (StaticUtils.Inventory.isPlayerHoldingWrench(player)) {
      if (te instanceof TileEntityReactorCoolantPort) {
        TileEntityReactorCoolantPort cp=(TileEntityReactorCoolantPort)te;
        cp.setInlet(!cp.isInlet(),true);
        return true;
      }
 else       if (te instanceof TileEntityReactorAccessPort) {
        TileEntityReactorAccessPort cp=(TileEntityReactorAccessPort)te;
        cp.setInlet(!cp.isInlet());
        return true;
      }
    }
 else     if (isCoolantPort(metadata)) {
      return false;
    }
  }
  if (isController(metadata) && (controller == null || !controller.isAssembled())) {
    return false;
  }
  if (!world.isRemote) {
    player.openGui(BRLoader.instance,0,world,x,y,z);
  }
  return true;
}",0.9816589104845332
161334,"private void moderateByFluid(RadiationData data,RadiationPacket radiation,Fluid fluid){
  float absorption, heatEfficiency, moderation;
  String name=fluid.getName();
  ReactorInteriorData moderatorData=ReactorInterior.getFluidData(fluid.getName());
  if (moderatorData == null) {
    moderatorData=waterData;
  }
  applyModerationFactors(data,radiation,moderatorData);
}","private void moderateByFluid(RadiationData data,RadiationPacket radiation,Fluid fluid){
  float absorption, heatEfficiency, moderation;
  ReactorInteriorData moderatorData=ReactorInterior.getFluidData(fluid.getName());
  if (moderatorData == null) {
    moderatorData=waterData;
  }
  applyModerationFactors(data,radiation,moderatorData);
}",0.7791842475386779
161335,"@Override public int[] getAccessibleSlotsFromSide(int side){
  int metadata=this.getBlockMetadata();
  if (isInlet()) {
    return kInletExposed;
  }
 else {
    return kOutletExposed;
  }
}","@Override public int[] getAccessibleSlotsFromSide(int side){
  if (isInlet()) {
    return kInletExposed;
  }
 else {
    return kOutletExposed;
  }
}",0.8823529411764706
161336,"/** 
 * @param newType The type of the new circuit.
 * @param param1 For input/control rods, the level(s) to change or set. For outputs, the numerical value
 * @param greaterThan For outputs, whether to activate when greater than or less than the outputLevel value. For input/control rods, whether to set (true) or change (false) the values.
 */
public void onReceiveUpdatePacket(int newType,int outputLevel,boolean greaterThan,boolean activeOnPulse){
  boolean oldTypeWasInput=this.isInput();
  this.circuitType=CircuitType.values()[newType];
  this.outputLevel=outputLevel;
  this.greaterThan=greaterThan;
  this.activeOnPulse=activeOnPulse;
  if (isAlwaysActiveOnPulse(circuitType)) {
    this.activeOnPulse=true;
  }
 else   if (TileEntityReactorRedNetPort.isOutput(this.circuitType)) {
    this.activeOnPulse=false;
  }
  if (this.isInput()) {
    ForgeDirection out=getOutwardsDir();
    this.isExternallyPowered=isReceivingRedstonePowerFrom(worldObj,xCoord + out.offsetX,yCoord + out.offsetY,zCoord + out.offsetZ,out);
    if (!this.isInputActiveOnPulse()) {
      onRedstoneInputUpdated();
    }
  }
 else {
    this.isExternallyPowered=false;
  }
  this.sendRedstoneUpdate();
  if (!this.worldObj.isRemote) {
    this.worldObj.markBlockForUpdate(xCoord,yCoord,zCoord);
    this.worldObj.markTileEntityChunkModified(xCoord,yCoord,zCoord,this);
  }
}","/** 
 * @param newType The type of the new circuit.
 * @param param1 For input/control rods, the level(s) to change or set. For outputs, the numerical value
 * @param greaterThan For outputs, whether to activate when greater than or less than the outputLevel value. For input/control rods, whether to set (true) or change (false) the values.
 */
public void onReceiveUpdatePacket(int newType,int outputLevel,boolean greaterThan,boolean activeOnPulse){
  this.circuitType=CircuitType.values()[newType];
  this.outputLevel=outputLevel;
  this.greaterThan=greaterThan;
  this.activeOnPulse=activeOnPulse;
  if (isAlwaysActiveOnPulse(circuitType)) {
    this.activeOnPulse=true;
  }
 else   if (TileEntityReactorRedNetPort.isOutput(this.circuitType)) {
    this.activeOnPulse=false;
  }
  if (this.isInput()) {
    ForgeDirection out=getOutwardsDir();
    this.isExternallyPowered=isReceivingRedstonePowerFrom(worldObj,xCoord + out.offsetX,yCoord + out.offsetY,zCoord + out.offsetZ,out);
    if (!this.isInputActiveOnPulse()) {
      onRedstoneInputUpdated();
    }
  }
 else {
    this.isExternallyPowered=false;
  }
  this.sendRedstoneUpdate();
  if (!this.worldObj.isRemote) {
    this.worldObj.markBlockForUpdate(xCoord,yCoord,zCoord);
    this.worldObj.markTileEntityChunkModified(xCoord,yCoord,zCoord,this);
  }
}",0.9842814371257484
161337,"@SideOnly(Side.CLIENT) public void setDisplayList(int newList){
  displayList=new Integer(newList);
}","@SideOnly(Side.CLIENT) public void setDisplayList(int newList){
  displayList=newList;
}",0.9312169312169312
161338,"@Override public void onPoweredCycleEnd(){
  if (_inventories[SLOT_OUTLET] != null) {
    if (consumeInputs()) {
      _inventories[SLOT_OUTLET].stackSize+=1;
    }
  }
 else {
    ItemStack sourceItem=_inventories[SLOT_INLET];
    ArrayList<ItemStack> candidates=OreDictionaryArbiter.getOres(""String_Node_Str"");
    if (candidates == null || candidates.isEmpty()) {
      return;
    }
    if (consumeInputs()) {
      _inventories[SLOT_OUTLET]=candidates.get(0).copy();
      _inventories[SLOT_OUTLET].stackSize=1;
    }
  }
  distributeItemsFromSlot(SLOT_OUTLET);
  markChunkDirty();
}","@Override public void onPoweredCycleEnd(){
  if (_inventories[SLOT_OUTLET] != null) {
    if (consumeInputs()) {
      _inventories[SLOT_OUTLET].stackSize+=1;
    }
  }
 else {
    ArrayList<ItemStack> candidates=OreDictionaryArbiter.getOres(""String_Node_Str"");
    if (candidates == null || candidates.isEmpty()) {
      return;
    }
    if (consumeInputs()) {
      _inventories[SLOT_OUTLET]=candidates.get(0).copy();
      _inventories[SLOT_OUTLET].stackSize=1;
    }
  }
  distributeItemsFromSlot(SLOT_OUTLET);
  markChunkDirty();
}",0.9546666666666668
161339,"private void checkAdjacentInventory(ForgeDirection dir){
  int side=dir.ordinal();
  TileEntity te=worldObj.getTileEntity(xCoord + dir.offsetX,yCoord + dir.offsetY,zCoord + dir.offsetZ);
  if (adjacentInvs[dir.ordinal()].set(te)) {
    distributeSide(dir);
  }
}","private void checkAdjacentInventory(ForgeDirection dir){
  TileEntity te=worldObj.getTileEntity(xCoord + dir.offsetX,yCoord + dir.offsetY,zCoord + dir.offsetZ);
  if (adjacentInvs[dir.ordinal()].set(te)) {
    distributeSide(dir);
  }
}",0.9477911646586346
161340,"public void setLabelText(String newText){
  if (newText == labelText) {
    return;
  }
  labelText=newText;
  recalculateSize();
}","public void setLabelText(String newText){
  if (newText.equals(labelText)) {
    return;
  }
  labelText=newText;
  recalculateSize();
}",0.951310861423221
161341,"public GuiSelectableButton(int id,int x,int y,IIcon icon,int selectedColor,BeefGuiBase containingWindow){
  super(id,x,y,24,24,""String_Node_Str"");
  selected=false;
  this.icon=icon;
  this.selectedColor=selectedColor;
  window=containingWindow;
  relativeX=x - window.getGuiLeft();
  relativeY=y - window.getGuiTop();
}","public GuiSelectableButton(int id,int x,int y,IIcon icon,int selectedColor,BeefGuiBase containingWindow){
  super(id,x,y,24,24,""String_Node_Str"");
  selected=false;
  this.icon=icon;
  this.selectedColor=selectedColor;
  window=containingWindow;
}",0.8712522045855379
161342,"@Override public void onSlotSet(){
  currentCircuitType=((RedNetConfigGrabbable)this.grabbable).GetCircuitType();
  tooltip=((RedNetConfigGrabbable)this.grabbable).getName();
  if (guiContainer instanceof GuiReactorRedNetPort) {
    ((GuiReactorRedNetPort)guiContainer).onChannelChanged(this.channel);
  }
}","@Override public void onSlotSet(){
  currentCircuitType=((RedNetConfigGrabbable)this.grabbable).getCircuitType();
  tooltip=((RedNetConfigGrabbable)this.grabbable).getName();
  if (guiContainer instanceof GuiReactorRedNetPort) {
    ((GuiReactorRedNetPort)guiContainer).onChannelChanged(this.channel);
  }
}",0.996742671009772
161343,"@Override public void init(){
  super.init();
  CommonPacketHandler.initClient();
  FMLCommonHandler.instance().bus().register(new MultiblockClientTickHandler());
  FMLCommonHandler.instance().bus().register(new BRRenderTickHandler());
  BlockFuelRod.renderId=RenderingRegistry.getNextAvailableRenderId();
  ISimpleBlockRenderingHandler fuelRodISBRH=new SimpleRendererFuelRod();
  RenderingRegistry.registerBlockHandler(BlockFuelRod.renderId,fuelRodISBRH);
  BlockTurbineRotorPart.renderId=RenderingRegistry.getNextAvailableRenderId();
  ISimpleBlockRenderingHandler rotorISBRH=new RotorSimpleRenderer();
  RenderingRegistry.registerBlockHandler(BlockTurbineRotorPart.renderId,rotorISBRH);
  if (BigReactors.blockTurbinePart != null) {
    ClientRegistry.bindTileEntitySpecialRenderer(TileEntityTurbineRotorBearing.class,new RotorSpecialRenderer());
  }
}","@Override public void init(){
  super.init();
  FMLCommonHandler.instance().bus().register(new MultiblockClientTickHandler());
  FMLCommonHandler.instance().bus().register(new BRRenderTickHandler());
  BlockFuelRod.renderId=RenderingRegistry.getNextAvailableRenderId();
  ISimpleBlockRenderingHandler fuelRodISBRH=new SimpleRendererFuelRod();
  RenderingRegistry.registerBlockHandler(BlockFuelRod.renderId,fuelRodISBRH);
  BlockTurbineRotorPart.renderId=RenderingRegistry.getNextAvailableRenderId();
  ISimpleBlockRenderingHandler rotorISBRH=new RotorSimpleRenderer();
  RenderingRegistry.registerBlockHandler(BlockTurbineRotorPart.renderId,rotorISBRH);
  if (BigReactors.blockTurbinePart != null) {
    ClientRegistry.bindTileEntitySpecialRenderer(TileEntityTurbineRotorBearing.class,new RotorSpecialRenderer());
  }
}",0.978494623655914
161344,"public void init(){
  BigReactors.registerTileEntities();
  CommonPacketHandler.initServer();
  NetworkRegistry.INSTANCE.registerGuiHandler(BRLoader.instance,new BigReactorsGUIHandler());
  BigReactors.tickHandler=new BigReactorsTickHandler();
  FMLCommonHandler.instance().bus().register(BigReactors.tickHandler);
  FMLCommonHandler.instance().bus().register(new MultiblockServerTickHandler());
  sendInterModAPIMessages();
}","public void init(){
  BigReactors.registerTileEntities();
  CommonPacketHandler.init();
  NetworkRegistry.INSTANCE.registerGuiHandler(BRLoader.instance,new BigReactorsGUIHandler());
  BigReactors.tickHandler=new BigReactorsTickHandler();
  FMLCommonHandler.instance().bus().register(BigReactors.tickHandler);
  FMLCommonHandler.instance().bus().register(new MultiblockServerTickHandler());
  sendInterModAPIMessages();
}",0.9929078014184396
161345,"public static void initClient(){
  INSTANCE.registerMessage(DeviceUpdateMessage.Handler.class,DeviceUpdateMessage.class,1,Side.CLIENT);
  INSTANCE.registerMessage(DeviceUpdateRotationMessage.Handler.class,DeviceUpdateRotationMessage.class,3,Side.CLIENT);
  INSTANCE.registerMessage(DeviceUpdateInvExposureMessage.Handler.class,DeviceUpdateInvExposureMessage.class,5,Side.CLIENT);
  INSTANCE.registerMessage(DeviceUpdateFluidExposureMessage.Handler.class,DeviceUpdateFluidExposureMessage.class,7,Side.CLIENT);
  INSTANCE.registerMessage(ControlRodUpdateMessage.Handler.class,ControlRodUpdateMessage.class,9,Side.CLIENT);
  INSTANCE.registerMessage(ReactorUpdateMessage.Handler.class,ReactorUpdateMessage.class,11,Side.CLIENT);
  INSTANCE.registerMessage(ReactorUpdateWasteEjectionMessage.Handler.class,ReactorUpdateWasteEjectionMessage.class,13,Side.CLIENT);
  INSTANCE.registerMessage(TurbineUpdateMessage.Handler.class,TurbineUpdateMessage.class,15,Side.CLIENT);
}","protected static void initClient(){
  INSTANCE.registerMessage(DeviceUpdateMessage.Handler.class,DeviceUpdateMessage.class,1,Side.CLIENT);
  INSTANCE.registerMessage(DeviceUpdateRotationMessage.Handler.class,DeviceUpdateRotationMessage.class,3,Side.CLIENT);
  INSTANCE.registerMessage(DeviceUpdateInvExposureMessage.Handler.class,DeviceUpdateInvExposureMessage.class,5,Side.CLIENT);
  INSTANCE.registerMessage(DeviceUpdateFluidExposureMessage.Handler.class,DeviceUpdateFluidExposureMessage.class,7,Side.CLIENT);
  INSTANCE.registerMessage(ControlRodUpdateMessage.Handler.class,ControlRodUpdateMessage.class,9,Side.CLIENT);
  INSTANCE.registerMessage(ReactorUpdateMessage.Handler.class,ReactorUpdateMessage.class,11,Side.CLIENT);
  INSTANCE.registerMessage(ReactorUpdateWasteEjectionMessage.Handler.class,ReactorUpdateWasteEjectionMessage.class,13,Side.CLIENT);
  INSTANCE.registerMessage(TurbineUpdateMessage.Handler.class,TurbineUpdateMessage.class,15,Side.CLIENT);
}",0.9932747025349198
161346,"public static void initServer(){
  INSTANCE.registerMessage(MachineCommandActivateMessage.Handler.class,MachineCommandActivateMessage.class,0,Side.SERVER);
  INSTANCE.registerMessage(DeviceChangeExposureMessage.Handler.class,DeviceChangeExposureMessage.class,2,Side.SERVER);
  INSTANCE.registerMessage(ControlRodChangeNameMessage.Handler.class,ControlRodChangeNameMessage.class,4,Side.SERVER);
  INSTANCE.registerMessage(ControlRodChangeInsertionMessage.Handler.class,ControlRodChangeInsertionMessage.class,6,Side.SERVER);
  INSTANCE.registerMessage(ReactorRedNetPortChangeMessage.Handler.class,ReactorRedNetPortChangeMessage.class,8,Side.SERVER);
  INSTANCE.registerMessage(ReactorRedstonePortChangeMessage.Handler.class,ReactorRedstonePortChangeMessage.class,10,Side.SERVER);
  INSTANCE.registerMessage(ReactorCommandEjectMessage.Handler.class,ReactorCommandEjectMessage.class,12,Side.SERVER);
  INSTANCE.registerMessage(ReactorCommandEjectToPortMessage.Handler.class,ReactorCommandEjectToPortMessage.class,14,Side.SERVER);
  INSTANCE.registerMessage(ReactorChangeWasteEjectionMessage.Handler.class,ReactorChangeWasteEjectionMessage.class,16,Side.SERVER);
  INSTANCE.registerMessage(ReactorAccessPortChangeDirectionMessage.Handler.class,ReactorAccessPortChangeDirectionMessage.class,18,Side.SERVER);
  INSTANCE.registerMessage(TurbineChangeMaxIntakeMessage.Handler.class,TurbineChangeMaxIntakeMessage.class,20,Side.SERVER);
  INSTANCE.registerMessage(TurbineChangeVentMessage.Handler.class,TurbineChangeVentMessage.class,22,Side.SERVER);
  INSTANCE.registerMessage(TurbineChangeInductorMessage.Handler.class,TurbineChangeInductorMessage.class,24,Side.SERVER);
}","protected static void initServer(){
  INSTANCE.registerMessage(MachineCommandActivateMessage.Handler.class,MachineCommandActivateMessage.class,0,Side.SERVER);
  INSTANCE.registerMessage(DeviceChangeExposureMessage.Handler.class,DeviceChangeExposureMessage.class,2,Side.SERVER);
  INSTANCE.registerMessage(ControlRodChangeNameMessage.Handler.class,ControlRodChangeNameMessage.class,4,Side.SERVER);
  INSTANCE.registerMessage(ControlRodChangeInsertionMessage.Handler.class,ControlRodChangeInsertionMessage.class,6,Side.SERVER);
  INSTANCE.registerMessage(ReactorRedNetPortChangeMessage.Handler.class,ReactorRedNetPortChangeMessage.class,8,Side.SERVER);
  INSTANCE.registerMessage(ReactorRedstonePortChangeMessage.Handler.class,ReactorRedstonePortChangeMessage.class,10,Side.SERVER);
  INSTANCE.registerMessage(ReactorCommandEjectMessage.Handler.class,ReactorCommandEjectMessage.class,12,Side.SERVER);
  INSTANCE.registerMessage(ReactorCommandEjectToPortMessage.Handler.class,ReactorCommandEjectToPortMessage.class,14,Side.SERVER);
  INSTANCE.registerMessage(ReactorChangeWasteEjectionMessage.Handler.class,ReactorChangeWasteEjectionMessage.class,16,Side.SERVER);
  INSTANCE.registerMessage(ReactorAccessPortChangeDirectionMessage.Handler.class,ReactorAccessPortChangeDirectionMessage.class,18,Side.SERVER);
  INSTANCE.registerMessage(TurbineChangeMaxIntakeMessage.Handler.class,TurbineChangeMaxIntakeMessage.class,20,Side.SERVER);
  INSTANCE.registerMessage(TurbineChangeVentMessage.Handler.class,TurbineChangeVentMessage.class,22,Side.SERVER);
  INSTANCE.registerMessage(TurbineChangeInductorMessage.Handler.class,TurbineChangeInductorMessage.class,24,Side.SERVER);
}",0.9960949234004204
161347,"public static boolean isFuel(String name){
  if (name == null) {
    return false;
  }
 else {
    ReactantData data=getReactant(name);
    return data != null && data.isFuel();
  }
}","/** 
 * Returns true if a given name represents a reactant.
 * @param name
 * @return
 */
public static boolean isFuel(String name){
  if (name == null) {
    return false;
  }
 else {
    ReactantData data=getReactant(name);
    return data != null && data.isFuel();
  }
}",0.8026315789473685
161348,"public static ItemStack registerIngots(int id){
  if (BigReactors.ingotGeneric == null) {
    BRConfig.CONFIGURATION.load();
    registerYelloriumAsUranium=BRConfig.CONFIGURATION.get(""String_Node_Str"",""String_Node_Str"",true,""String_Node_Str"").getBoolean(true);
    BigReactors.ingotGeneric=new ItemIngot();
    GameRegistry.registerItem(ingotGeneric,""String_Node_Str"");
    String itemName;
    for (int i=0; i < ItemIngot.TYPES.length; i++) {
      itemName=ItemIngot.TYPES[i];
      OreDictionaryArbiter.registerOreDictionaryEntry(ingotGeneric.getItemStackForType(itemName),itemName);
    }
    if (registerYelloriumAsUranium) {
      OreDictionaryArbiter.registerOreDictionaryEntry(ingotGeneric.getItemStackForType(""String_Node_Str""),""String_Node_Str"");
      OreDictionaryArbiter.registerOreDictionaryEntry(ingotGeneric.getItemStackForType(""String_Node_Str""),""String_Node_Str"");
      OreDictionaryArbiter.registerOreDictionaryEntry(ingotGeneric.getItemStackForType(""String_Node_Str""),""String_Node_Str"");
      OreDictionaryArbiter.registerOreDictionaryEntry(ingotGeneric.getItemStackForType(""String_Node_Str""),""String_Node_Str"");
    }
    BRConfig.CONFIGURATION.save();
  }
  return new ItemStack(ingotGeneric);
}","public static ItemStack registerIngots(int id){
  if (BigReactors.ingotGeneric == null) {
    BRConfig.CONFIGURATION.load();
    registerYelloriumAsUranium=BRConfig.CONFIGURATION.get(""String_Node_Str"",""String_Node_Str"",true,""String_Node_Str"").getBoolean(true);
    BigReactors.ingotGeneric=new ItemIngot();
    GameRegistry.registerItem(ingotGeneric,""String_Node_Str"");
    String itemName;
    for (int i=0; i < ItemIngot.TYPES.length; i++) {
      itemName=ItemIngot.TYPES[i];
      OreDictionaryArbiter.registerOreDictionaryEntry(ingotGeneric.getItemStackForType(itemName),itemName);
    }
    if (registerYelloriumAsUranium) {
      OreDictionary.registerOre(""String_Node_Str"",ingotGeneric.getItemStackForType(""String_Node_Str""));
      OreDictionary.registerOre(""String_Node_Str"",ingotGeneric.getItemStackForType(""String_Node_Str""));
      OreDictionary.registerOre(""String_Node_Str"",ingotGeneric.getItemStackForType(""String_Node_Str""));
      OreDictionary.registerOre(""String_Node_Str"",ingotGeneric.getItemStackForType(""String_Node_Str""));
    }
    BRConfig.CONFIGURATION.save();
  }
  return new ItemStack(ingotGeneric);
}",0.8034042553191489
161349,"public static void registerTurbineParts(){
  if (BigReactors.blockTurbinePart == null) {
    BRConfig.CONFIGURATION.load();
    BigReactors.blockTurbinePart=new BlockTurbinePart(Material.iron);
    GameRegistry.registerBlock(BigReactors.blockTurbinePart,ItemBlockBigReactors.class,""String_Node_Str"");
    OreDictionaryArbiter.registerOreDictionaryEntry(BigReactors.blockTurbinePart.getItemStack(""String_Node_Str""),""String_Node_Str"");
    OreDictionaryArbiter.registerOreDictionaryEntry(BigReactors.blockTurbinePart.getItemStack(""String_Node_Str""),""String_Node_Str"");
    OreDictionaryArbiter.registerOreDictionaryEntry(BigReactors.blockTurbinePart.getItemStack(""String_Node_Str""),""String_Node_Str"");
    OreDictionaryArbiter.registerOreDictionaryEntry(BigReactors.blockTurbinePart.getItemStack(""String_Node_Str""),""String_Node_Str"");
    OreDictionaryArbiter.registerOreDictionaryEntry(BigReactors.blockTurbinePart.getItemStack(""String_Node_Str""),""String_Node_Str"");
    BRConfig.CONFIGURATION.save();
  }
  if (BigReactors.blockTurbineRotorPart == null) {
    BRConfig.CONFIGURATION.load();
    BigReactors.blockTurbineRotorPart=new BlockTurbineRotorPart(Material.iron);
    GameRegistry.registerBlock(BigReactors.blockTurbineRotorPart,ItemBlockBigReactors.class,""String_Node_Str"");
    OreDictionaryArbiter.registerOreDictionaryEntry(BigReactors.blockTurbineRotorPart.getItemStack(""String_Node_Str""),""String_Node_Str"");
    OreDictionaryArbiter.registerOreDictionaryEntry(BigReactors.blockTurbineRotorPart.getItemStack(""String_Node_Str""),""String_Node_Str"");
    BRConfig.CONFIGURATION.save();
  }
}","public static void registerTurbineParts(){
  if (BigReactors.blockTurbinePart == null) {
    BRConfig.CONFIGURATION.load();
    BigReactors.blockTurbinePart=new BlockTurbinePart(Material.iron);
    GameRegistry.registerBlock(BigReactors.blockTurbinePart,ItemBlockBigReactors.class,""String_Node_Str"");
    OreDictionary.registerOre(""String_Node_Str"",BigReactors.blockTurbinePart.getItemStack(""String_Node_Str""));
    OreDictionary.registerOre(""String_Node_Str"",BigReactors.blockTurbinePart.getItemStack(""String_Node_Str""));
    OreDictionary.registerOre(""String_Node_Str"",BigReactors.blockTurbinePart.getItemStack(""String_Node_Str""));
    OreDictionary.registerOre(""String_Node_Str"",BigReactors.blockTurbinePart.getItemStack(""String_Node_Str""));
    OreDictionary.registerOre(""String_Node_Str"",BigReactors.blockTurbinePart.getItemStack(""String_Node_Str""));
    BRConfig.CONFIGURATION.save();
  }
  if (BigReactors.blockTurbineRotorPart == null) {
    BRConfig.CONFIGURATION.load();
    BigReactors.blockTurbineRotorPart=new BlockTurbineRotorPart(Material.iron);
    GameRegistry.registerBlock(BigReactors.blockTurbineRotorPart,ItemBlockBigReactors.class,""String_Node_Str"");
    OreDictionary.registerOre(""String_Node_Str"",BigReactors.blockTurbineRotorPart.getItemStack(""String_Node_Str""));
    OreDictionary.registerOre(""String_Node_Str"",BigReactors.blockTurbineRotorPart.getItemStack(""String_Node_Str""));
    BRConfig.CONFIGURATION.save();
  }
}",0.6123521681997371
161350,"public static void registerReactorPartBlocks(int id,boolean require){
  if (BigReactors.blockReactorPart == null) {
    BRConfig.CONFIGURATION.load();
    BigReactors.blockReactorPart=new BlockReactorPart(Material.iron);
    GameRegistry.registerBlock(BigReactors.blockReactorPart,ItemBlockBigReactors.class,""String_Node_Str"");
    OreDictionaryArbiter.registerOreDictionaryEntry(BigReactors.blockReactorPart.getReactorCasingItemStack(),""String_Node_Str"");
    OreDictionaryArbiter.registerOreDictionaryEntry(BigReactors.blockReactorPart.getReactorControllerItemStack(),""String_Node_Str"");
    OreDictionaryArbiter.registerOreDictionaryEntry(BigReactors.blockReactorPart.getReactorPowerTapItemStack(),""String_Node_Str"");
    OreDictionaryArbiter.registerOreDictionaryEntry(BigReactors.blockReactorPart.getRedNetPortItemStack(),""String_Node_Str"");
    OreDictionaryArbiter.registerOreDictionaryEntry(BigReactors.blockReactorPart.getComputerPortItemStack(),""String_Node_Str"");
    OreDictionaryArbiter.registerOreDictionaryEntry(BigReactors.blockReactorPart.getCoolantPortItemStack(),""String_Node_Str"");
    OreDictionaryArbiter.registerOreDictionaryEntry(BigReactors.blockReactorPart.getControlRodItemStack(),""String_Node_Str"");
    BRConfig.CONFIGURATION.save();
  }
  if (BigReactors.blockMultiblockGlass == null) {
    BRConfig.CONFIGURATION.load();
    BigReactors.blockMultiblockGlass=new BlockMultiblockGlass(Material.glass);
    GameRegistry.registerBlock(BigReactors.blockMultiblockGlass,ItemBlockBigReactors.class,""String_Node_Str"");
    OreDictionaryArbiter.registerOreDictionaryEntry(blockMultiblockGlass.getItemStack(""String_Node_Str""),""String_Node_Str"");
    OreDictionaryArbiter.registerOreDictionaryEntry(blockMultiblockGlass.getItemStack(""String_Node_Str""),""String_Node_Str"");
    BRConfig.CONFIGURATION.save();
  }
  if (BigReactors.blockReactorRedstonePort == null) {
    BRConfig.CONFIGURATION.load();
    BigReactors.blockReactorRedstonePort=new BlockReactorRedstonePort(Material.iron);
    GameRegistry.registerBlock(BigReactors.blockReactorRedstonePort,ItemBlock.class,""String_Node_Str"");
    OreDictionaryArbiter.registerOreDictionaryEntry(new ItemStack(blockReactorRedstonePort,1),""String_Node_Str"");
    BRConfig.CONFIGURATION.save();
  }
}","public static void registerReactorPartBlocks(int id,boolean require){
  if (BigReactors.blockReactorPart == null) {
    BRConfig.CONFIGURATION.load();
    BigReactors.blockReactorPart=new BlockReactorPart(Material.iron);
    GameRegistry.registerBlock(BigReactors.blockReactorPart,ItemBlockBigReactors.class,""String_Node_Str"");
    OreDictionary.registerOre(""String_Node_Str"",BigReactors.blockReactorPart.getReactorCasingItemStack());
    OreDictionary.registerOre(""String_Node_Str"",BigReactors.blockReactorPart.getReactorControllerItemStack());
    OreDictionary.registerOre(""String_Node_Str"",BigReactors.blockReactorPart.getReactorPowerTapItemStack());
    OreDictionary.registerOre(""String_Node_Str"",BigReactors.blockReactorPart.getRedNetPortItemStack());
    OreDictionary.registerOre(""String_Node_Str"",BigReactors.blockReactorPart.getComputerPortItemStack());
    OreDictionary.registerOre(""String_Node_Str"",BigReactors.blockReactorPart.getCoolantPortItemStack());
    OreDictionary.registerOre(""String_Node_Str"",BigReactors.blockReactorPart.getControlRodItemStack());
    BRConfig.CONFIGURATION.save();
  }
  if (BigReactors.blockMultiblockGlass == null) {
    BRConfig.CONFIGURATION.load();
    BigReactors.blockMultiblockGlass=new BlockMultiblockGlass(Material.glass);
    GameRegistry.registerBlock(BigReactors.blockMultiblockGlass,ItemBlockBigReactors.class,""String_Node_Str"");
    OreDictionary.registerOre(""String_Node_Str"",blockMultiblockGlass.getItemStack(""String_Node_Str""));
    OreDictionary.registerOre(""String_Node_Str"",blockMultiblockGlass.getItemStack(""String_Node_Str""));
    BRConfig.CONFIGURATION.save();
  }
  if (BigReactors.blockReactorRedstonePort == null) {
    BRConfig.CONFIGURATION.load();
    BigReactors.blockReactorRedstonePort=new BlockReactorRedstonePort(Material.iron);
    GameRegistry.registerBlock(BigReactors.blockReactorRedstonePort,ItemBlock.class,""String_Node_Str"");
    OreDictionaryArbiter.registerOreDictionaryEntry(new ItemStack(blockReactorRedstonePort,1),""String_Node_Str"");
    BRConfig.CONFIGURATION.save();
  }
}",0.2882217090069284
161351,"public static void registerDevices(int id,boolean require){
  if (BigReactors.blockDevice == null) {
    BRConfig.CONFIGURATION.load();
    BigReactors.blockDevice=new BlockBRDevice(Material.iron);
    GameRegistry.registerBlock(BigReactors.blockDevice,ItemBlockBigReactors.class,""String_Node_Str"");
    OreDictionaryArbiter.registerOreDictionaryEntry(((BlockBRDevice)BigReactors.blockDevice).getCyaniteReprocessorItemStack(),""String_Node_Str"");
    BRConfig.CONFIGURATION.save();
  }
}","public static void registerDevices(int id,boolean require){
  if (BigReactors.blockDevice == null) {
    BRConfig.CONFIGURATION.load();
    BigReactors.blockDevice=new BlockBRDevice(Material.iron);
    GameRegistry.registerBlock(BigReactors.blockDevice,ItemBlockBigReactors.class,""String_Node_Str"");
    OreDictionary.registerOre(""String_Node_Str"",((BlockBRDevice)BigReactors.blockDevice).getCyaniteReprocessorItemStack());
    BRConfig.CONFIGURATION.save();
  }
}",0.911578947368421
161352,"/** 
 * Call this function in your mod init stage.
 */
public static void register(Object modInstance){
  if (!INITIALIZED) {
    BRConfig.CONFIGURATION.load();
    enableWorldGen=BRConfig.CONFIGURATION.get(""String_Node_Str"",""String_Node_Str"",true,""String_Node_Str"").getBoolean(true);
    enableWorldGenInNegativeDimensions=BRConfig.CONFIGURATION.get(""String_Node_Str"",""String_Node_Str"",false,""String_Node_Str"").getBoolean(false);
    enableWorldRegeneration=BRConfig.CONFIGURATION.get(""String_Node_Str"",""String_Node_Str"",false,""String_Node_Str"").getBoolean(false);
    userWorldGenVersion=BRConfig.CONFIGURATION.get(""String_Node_Str"",""String_Node_Str"",0,""String_Node_Str"").getInt();
    boolean registerCoalFurnaceRecipe=BRConfig.CONFIGURATION.get(""String_Node_Str"",""String_Node_Str"",true,""String_Node_Str"").getBoolean(true);
    boolean registerCharcoalFurnaceRecipe=BRConfig.CONFIGURATION.get(""String_Node_Str"",""String_Node_Str"",true,""String_Node_Str"").getBoolean(true);
    boolean registerCoalCraftingRecipe=BRConfig.CONFIGURATION.get(""String_Node_Str"",""String_Node_Str"",false,""String_Node_Str"").getBoolean(false);
    boolean registerCharcoalCraftingRecipe=BRConfig.CONFIGURATION.get(""String_Node_Str"",""String_Node_Str"",false,""String_Node_Str"").getBoolean(false);
    registerYelloriteSmeltToUranium=BRConfig.CONFIGURATION.get(""String_Node_Str"",""String_Node_Str"",true,""String_Node_Str"").getBoolean(true);
    boolean useSteelForIron=BRConfig.CONFIGURATION.get(""String_Node_Str"",""String_Node_Str"",false,""String_Node_Str"").getBoolean(false);
    boolean useExpensiveGlass=BRConfig.CONFIGURATION.get(""String_Node_Str"",""String_Node_Str"",false,""String_Node_Str"").getBoolean(false);
    boolean enableReactorPowerTapRecipe=BRConfig.CONFIGURATION.get(""String_Node_Str"",""String_Node_Str"",true,""String_Node_Str"").getBoolean(true);
    boolean enableCyaniteFromYelloriumRecipe=BRConfig.CONFIGURATION.get(""String_Node_Str"",""String_Node_Str"",true,""String_Node_Str"").getBoolean(true);
    maximumReactorSize=BRConfig.CONFIGURATION.get(""String_Node_Str"",""String_Node_Str"",32,""String_Node_Str"").getInt();
    maximumReactorHeight=BRConfig.CONFIGURATION.get(""String_Node_Str"",""String_Node_Str"",48,""String_Node_Str"").getInt();
    ticksPerRedstoneUpdate=BRConfig.CONFIGURATION.get(""String_Node_Str"",""String_Node_Str"",20,""String_Node_Str"").getInt();
    powerProductionMultiplier=(float)BRConfig.CONFIGURATION.get(""String_Node_Str"",""String_Node_Str"",1.0f,""String_Node_Str"").getDouble(1.0);
    fuelUsageMultiplier=(float)BRConfig.CONFIGURATION.get(""String_Node_Str"",""String_Node_Str"",1.0f,""String_Node_Str"").getDouble(1.0);
    maximumTurbineSize=BRConfig.CONFIGURATION.get(""String_Node_Str"",""String_Node_Str"",16,""String_Node_Str"").getInt();
    maximumTurbineHeight=BRConfig.CONFIGURATION.get(""String_Node_Str"",""String_Node_Str"",32,""String_Node_Str"").getInt();
    BRConfig.CONFIGURATION.save();
    if (enableWorldGen) {
      worldGenerator=new BRWorldGenerator();
      GameRegistry.registerWorldGenerator(worldGenerator,0);
    }
    if (!ItemHelper.oreProxy.oreNameExists(""String_Node_Str"")) {
      OreDictionaryArbiter.registerOreDictionaryEntry(new ItemStack(Items.iron_ingot,1),""String_Node_Str"");
    }
    if (!ItemHelper.oreProxy.oreNameExists(""String_Node_Str"")) {
      OreDictionaryArbiter.registerOreDictionaryEntry(new ItemStack(Items.gold_ingot,1),""String_Node_Str"");
    }
    if (!ItemHelper.oreProxy.oreNameExists(""String_Node_Str"")) {
      OreDictionaryArbiter.registerOreDictionaryEntry(new ItemStack(Blocks.snow,1),""String_Node_Str"");
    }
    if (!ItemHelper.oreProxy.oreNameExists(""String_Node_Str"")) {
      OreDictionaryArbiter.registerOreDictionaryEntry(new ItemStack(Blocks.ice,1),""String_Node_Str"");
    }
    if (ItemHelper.oreProxy.getOreID(new ItemStack(Blocks.glass)) < 0) {
      OreDictionaryArbiter.registerOreDictionaryEntry(new ItemStack(Blocks.glass,1),""String_Node_Str"");
    }
    String ironOrSteelIngot=""String_Node_Str"";
    if (useSteelForIron && ItemHelper.oreProxy.oreNameExists(""String_Node_Str"")) {
      ironOrSteelIngot=""String_Node_Str"";
    }
    String yelloriumIngot=""String_Node_Str"";
    String blutoniumIngot=""String_Node_Str"";
    if (registerYelloriumAsUranium) {
      yelloriumIngot=""String_Node_Str"";
      blutoniumIngot=""String_Node_Str"";
    }
    if (blockYelloriteOre != null) {
      ItemStack product;
      if (registerYelloriteSmeltToUranium) {
        ArrayList<ItemStack> candidateOres=OreDictionaryArbiter.getOres(""String_Node_Str"");
        if (candidateOres == null || candidateOres.size() <= 0) {
          BRLog.warning(""String_Node_Str"");
          candidateOres=OreDictionaryArbiter.getOres(""String_Node_Str"");
        }
        product=candidateOres.get(0).copy();
      }
 else {
        product=OreDictionaryArbiter.getOres(""String_Node_Str"").get(0).copy();
      }
      GameRegistry.addSmelting(blockYelloriteOre,product,0.5f);
    }
    if (blockMetal != null && ingotGeneric != null) {
      blockMetal.registerIngotRecipes(ingotGeneric);
    }
    if (ingotGeneric != null) {
      for (int i=0; i < ItemIngot.DUST_OFFSET; i++) {
        GameRegistry.addSmelting(new ItemStack(ingotGeneric,1,i + ItemIngot.DUST_OFFSET),new ItemStack(ingotGeneric,1,i),0f);
      }
    }
    ItemStack ingotGraphite=OreDictionaryArbiter.getOres(""String_Node_Str"").get(0).copy();
    ItemStack ingotCyanite=OreDictionaryArbiter.getOres(""String_Node_Str"").get(0).copy();
    if (registerCoalFurnaceRecipe) {
      GameRegistry.addSmelting(Items.coal,ingotGraphite,1);
    }
    if (registerCharcoalFurnaceRecipe) {
      GameRegistry.addSmelting(new ItemStack(Items.coal,1,1),ingotGraphite,1);
    }
    if (registerCoalCraftingRecipe) {
      GameRegistry.addRecipe(new ShapedOreRecipe(ingotGraphite,""String_Node_Str"",'G',Blocks.gravel,'C',new ItemStack(Items.coal,1,0)));
    }
    if (registerCharcoalCraftingRecipe) {
      GameRegistry.addRecipe(new ShapedOreRecipe(ingotGraphite,""String_Node_Str"",'G',Blocks.gravel,'C',new ItemStack(Items.coal,1,1)));
    }
    if (enableCyaniteFromYelloriumRecipe) {
      GameRegistry.addRecipe(new ShapelessOreRecipe(ingotCyanite,yelloriumIngot,Blocks.sand));
    }
    if (blockYelloriumFuelRod != null) {
      GameRegistry.addRecipe(new ShapedOreRecipe(new ItemStack(blockYelloriumFuelRod,1),""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",'I',ironOrSteelIngot,'C',""String_Node_Str"",'U',yelloriumIngot));
    }
    if (blockReactorPart != null) {
      ItemStack reactorPartStack=BigReactors.blockReactorPart.getReactorCasingItemStack();
      reactorPartStack.stackSize=4;
      GameRegistry.addRecipe(new ShapedOreRecipe(reactorPartStack,""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",'I',ironOrSteelIngot,'C',""String_Node_Str"",'U',yelloriumIngot));
    }
    if (blockReactorPart != null) {
      ItemStack reactorPartStack=BigReactors.blockReactorPart.getReactorControllerItemStack();
      GameRegistry.addRecipe(new ShapedOreRecipe(reactorPartStack,""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",'D',Items.diamond,'G',yelloriumIngot,'C',""String_Node_Str"",'R',Items.redstone));
      if (enableReactorPowerTapRecipe) {
        reactorPartStack=BigReactors.blockReactorPart.getReactorPowerTapItemStack();
        GameRegistry.addRecipe(new ShapedOreRecipe(reactorPartStack,""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",'C',""String_Node_Str"",'R',Items.redstone));
      }
      reactorPartStack=BigReactors.blockReactorPart.getAccessPortItemStack();
      GameRegistry.addRecipe(new ShapedOreRecipe(reactorPartStack,""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",'C',""String_Node_Str"",'V',Blocks.chest,'P',Blocks.piston));
      reactorPartStack=BigReactors.blockReactorPart.getCoolantPortItemStack();
      GameRegistry.addRecipe(new ShapedOreRecipe(reactorPartStack,""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",'C',""String_Node_Str"",'V',Items.bucket,'P',Blocks.piston,'I',ironOrSteelIngot));
      reactorPartStack=BigReactors.blockReactorPart.getControlRodItemStack();
      GameRegistry.addRecipe(new ShapedOreRecipe(reactorPartStack,""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",'G',""String_Node_Str"",'C',""String_Node_Str"",'R',Items.redstone,'U',yelloriumIngot));
      if (Loader.isModLoaded(""String_Node_Str"")) {
        reactorPartStack=BigReactors.blockReactorPart.getRedNetPortItemStack();
        GameRegistry.addRecipe(new ShapedOreRecipe(reactorPartStack,""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",'C',""String_Node_Str"",'R',""String_Node_Str"",'G',""String_Node_Str""));
      }
      if (Loader.isModLoaded(""String_Node_Str"") || Loader.isModLoaded(""String_Node_Str"")) {
        reactorPartStack=BigReactors.blockReactorPart.getComputerPortItemStack();
        GameRegistry.addRecipe(new ShapedOreRecipe(reactorPartStack,""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",'C',""String_Node_Str"",'R',Items.redstone,'G',""String_Node_Str"",'P',Items.repeater));
      }
    }
    if (blockMultiblockGlass != null) {
      ItemStack reactorGlassStack=blockMultiblockGlass.getItemStack(""String_Node_Str"");
      ItemStack turbineGlassStack=blockMultiblockGlass.getItemStack(""String_Node_Str"");
      if (useExpensiveGlass && (ItemHelper.oreProxy.oreNameExists(""String_Node_Str"") || ItemHelper.oreProxy.oreNameExists(""String_Node_Str""))) {
        GameRegistry.addRecipe(new ShapedOreRecipe(reactorGlassStack,""String_Node_Str"",'G',""String_Node_Str"",'C',""String_Node_Str""));
        GameRegistry.addRecipe(new ShapedOreRecipe(reactorGlassStack,""String_Node_Str"",'G',""String_Node_Str"",'C',""String_Node_Str""));
        GameRegistry.addRecipe(new ShapedOreRecipe(turbineGlassStack,""String_Node_Str"",'G',""String_Node_Str"",'C',""String_Node_Str""));
        GameRegistry.addRecipe(new ShapedOreRecipe(turbineGlassStack,""String_Node_Str"",'G',""String_Node_Str"",'C',""String_Node_Str""));
      }
 else {
        GameRegistry.addRecipe(new ShapedOreRecipe(reactorGlassStack,""String_Node_Str"",'G',""String_Node_Str"",'C',""String_Node_Str""));
        GameRegistry.addRecipe(new ShapedOreRecipe(turbineGlassStack,""String_Node_Str"",'G',""String_Node_Str"",'C',""String_Node_Str""));
      }
    }
    if (blockDevice != null) {
      ItemStack cyaniteReprocessorStack=((BlockBRDevice)blockDevice).getCyaniteReprocessorItemStack();
      GameRegistry.addRecipe(new ShapedOreRecipe(cyaniteReprocessorStack,""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",'C',""String_Node_Str"",'I',ironOrSteelIngot,'F',blockYelloriumFuelRod,'P',Blocks.piston,'R',Items.redstone));
    }
    if (blockReactorRedstonePort != null) {
      ItemStack redstonePortStack=new ItemStack(BigReactors.blockReactorRedstonePort,1);
      GameRegistry.addRecipe(new ShapedOreRecipe(redstonePortStack,""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",'C',""String_Node_Str"",'R',Items.redstone,'G',Items.gold_ingot));
    }
    if (blockTurbinePart != null) {
      ItemStack turbineHousing=blockTurbinePart.getItemStack(""String_Node_Str"");
      ItemStack turbineController=blockTurbinePart.getItemStack(""String_Node_Str"");
      ItemStack turbinePowerTap=blockTurbinePart.getItemStack(""String_Node_Str"");
      ItemStack turbineFluidPort=blockTurbinePart.getItemStack(""String_Node_Str"");
      ItemStack turbineBearing=blockTurbinePart.getItemStack(""String_Node_Str"");
      turbineHousing.stackSize=4;
      GameRegistry.addRecipe(new ShapedOreRecipe(turbineHousing,""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",'C',""String_Node_Str"",'I',ironOrSteelIngot,'Q',Items.quartz,'G',""String_Node_Str""));
      GameRegistry.addRecipe(new ShapedOreRecipe(turbineController,""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",'H',""String_Node_Str"",'D',Items.diamond,'B',blutoniumIngot));
      GameRegistry.addRecipe(new ShapedOreRecipe(turbinePowerTap,""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",'H',""String_Node_Str"",'R',Items.redstone));
      GameRegistry.addRecipe(new ShapedOreRecipe(turbineFluidPort,""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",'H',""String_Node_Str"",'I',ironOrSteelIngot,'V',Items.bucket,'P',Blocks.piston));
      GameRegistry.addRecipe(new ShapedOreRecipe(turbineBearing,""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",'H',""String_Node_Str"",'D',Items.diamond,'R',""String_Node_Str""));
      if (Loader.isModLoaded(""String_Node_Str"") || Loader.isModLoaded(""String_Node_Str"")) {
        ItemStack turbineComputerPort=blockTurbinePart.getItemStack(""String_Node_Str"");
        GameRegistry.addRecipe(new ShapedOreRecipe(turbineComputerPort,""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",'H',""String_Node_Str"",'G',""String_Node_Str"",'R',""String_Node_Str""));
      }
    }
    if (blockTurbineRotorPart != null) {
      ItemStack rotorShaft=blockTurbineRotorPart.getItemStack(""String_Node_Str"");
      ItemStack rotorBlade=blockTurbineRotorPart.getItemStack(""String_Node_Str"");
      GameRegistry.addRecipe(new ShapedOreRecipe(rotorShaft,""String_Node_Str"",'C',""String_Node_Str"",'I',ironOrSteelIngot));
      GameRegistry.addRecipe(new ShapedOreRecipe(rotorBlade,""String_Node_Str"",'C',""String_Node_Str"",'I',ironOrSteelIngot));
    }
    registerGameBalanceData();
  }
  INITIALIZED=true;
}","/** 
 * Call this function in your mod init stage.
 */
public static void register(Object modInstance){
  if (!INITIALIZED) {
    BRConfig.CONFIGURATION.load();
    enableWorldGen=BRConfig.CONFIGURATION.get(""String_Node_Str"",""String_Node_Str"",true,""String_Node_Str"").getBoolean(true);
    enableWorldGenInNegativeDimensions=BRConfig.CONFIGURATION.get(""String_Node_Str"",""String_Node_Str"",false,""String_Node_Str"").getBoolean(false);
    enableWorldRegeneration=BRConfig.CONFIGURATION.get(""String_Node_Str"",""String_Node_Str"",false,""String_Node_Str"").getBoolean(false);
    userWorldGenVersion=BRConfig.CONFIGURATION.get(""String_Node_Str"",""String_Node_Str"",0,""String_Node_Str"").getInt();
    boolean registerCoalFurnaceRecipe=BRConfig.CONFIGURATION.get(""String_Node_Str"",""String_Node_Str"",true,""String_Node_Str"").getBoolean(true);
    boolean registerCharcoalFurnaceRecipe=BRConfig.CONFIGURATION.get(""String_Node_Str"",""String_Node_Str"",true,""String_Node_Str"").getBoolean(true);
    boolean registerCoalCraftingRecipe=BRConfig.CONFIGURATION.get(""String_Node_Str"",""String_Node_Str"",false,""String_Node_Str"").getBoolean(false);
    boolean registerCharcoalCraftingRecipe=BRConfig.CONFIGURATION.get(""String_Node_Str"",""String_Node_Str"",false,""String_Node_Str"").getBoolean(false);
    registerYelloriteSmeltToUranium=BRConfig.CONFIGURATION.get(""String_Node_Str"",""String_Node_Str"",true,""String_Node_Str"").getBoolean(true);
    boolean useSteelForIron=BRConfig.CONFIGURATION.get(""String_Node_Str"",""String_Node_Str"",false,""String_Node_Str"").getBoolean(false);
    boolean useExpensiveGlass=BRConfig.CONFIGURATION.get(""String_Node_Str"",""String_Node_Str"",false,""String_Node_Str"").getBoolean(false);
    boolean enableReactorPowerTapRecipe=BRConfig.CONFIGURATION.get(""String_Node_Str"",""String_Node_Str"",true,""String_Node_Str"").getBoolean(true);
    boolean enableCyaniteFromYelloriumRecipe=BRConfig.CONFIGURATION.get(""String_Node_Str"",""String_Node_Str"",true,""String_Node_Str"").getBoolean(true);
    maximumReactorSize=BRConfig.CONFIGURATION.get(""String_Node_Str"",""String_Node_Str"",32,""String_Node_Str"").getInt();
    maximumReactorHeight=BRConfig.CONFIGURATION.get(""String_Node_Str"",""String_Node_Str"",48,""String_Node_Str"").getInt();
    ticksPerRedstoneUpdate=BRConfig.CONFIGURATION.get(""String_Node_Str"",""String_Node_Str"",20,""String_Node_Str"").getInt();
    powerProductionMultiplier=(float)BRConfig.CONFIGURATION.get(""String_Node_Str"",""String_Node_Str"",1.0f,""String_Node_Str"").getDouble(1.0);
    fuelUsageMultiplier=(float)BRConfig.CONFIGURATION.get(""String_Node_Str"",""String_Node_Str"",1.0f,""String_Node_Str"").getDouble(1.0);
    maximumTurbineSize=BRConfig.CONFIGURATION.get(""String_Node_Str"",""String_Node_Str"",16,""String_Node_Str"").getInt();
    maximumTurbineHeight=BRConfig.CONFIGURATION.get(""String_Node_Str"",""String_Node_Str"",32,""String_Node_Str"").getInt();
    BRConfig.CONFIGURATION.save();
    if (enableWorldGen) {
      worldGenerator=new BRWorldGenerator();
      GameRegistry.registerWorldGenerator(worldGenerator,0);
    }
    if (!ItemHelper.oreNameExists(""String_Node_Str"")) {
      OreDictionaryArbiter.registerOreDictionaryEntry(new ItemStack(Items.iron_ingot,1),""String_Node_Str"");
    }
    if (!ItemHelper.oreNameExists(""String_Node_Str"")) {
      OreDictionaryArbiter.registerOreDictionaryEntry(new ItemStack(Items.gold_ingot,1),""String_Node_Str"");
    }
    if (!ItemHelper.oreNameExists(""String_Node_Str"")) {
      OreDictionaryArbiter.registerOreDictionaryEntry(new ItemStack(Blocks.snow,1),""String_Node_Str"");
    }
    if (!ItemHelper.oreNameExists(""String_Node_Str"")) {
      OreDictionaryArbiter.registerOreDictionaryEntry(new ItemStack(Blocks.ice,1),""String_Node_Str"");
    }
    if (ItemHelper.oreProxy.getOreID(new ItemStack(Blocks.glass)) < 0) {
      OreDictionaryArbiter.registerOreDictionaryEntry(new ItemStack(Blocks.glass,1),""String_Node_Str"");
    }
    String ironOrSteelIngot=""String_Node_Str"";
    if (useSteelForIron && ItemHelper.oreNameExists(""String_Node_Str"")) {
      ironOrSteelIngot=""String_Node_Str"";
    }
    String yelloriumIngot=""String_Node_Str"";
    String blutoniumIngot=""String_Node_Str"";
    if (registerYelloriumAsUranium) {
      yelloriumIngot=""String_Node_Str"";
      blutoniumIngot=""String_Node_Str"";
    }
    if (blockYelloriteOre != null) {
      ItemStack product;
      if (registerYelloriteSmeltToUranium) {
        ArrayList<ItemStack> candidateOres=OreDictionaryArbiter.getOres(""String_Node_Str"");
        if (candidateOres == null || candidateOres.size() <= 0) {
          BRLog.warning(""String_Node_Str"");
          candidateOres=OreDictionaryArbiter.getOres(""String_Node_Str"");
        }
        product=candidateOres.get(0).copy();
      }
 else {
        product=OreDictionaryArbiter.getOres(""String_Node_Str"").get(0).copy();
      }
      GameRegistry.addSmelting(blockYelloriteOre,product,0.5f);
    }
    if (blockMetal != null && ingotGeneric != null) {
      blockMetal.registerIngotRecipes(ingotGeneric);
    }
    if (ingotGeneric != null) {
      for (int i=0; i < ItemIngot.DUST_OFFSET; i++) {
        GameRegistry.addSmelting(new ItemStack(ingotGeneric,1,i + ItemIngot.DUST_OFFSET),new ItemStack(ingotGeneric,1,i),0f);
      }
    }
    ItemStack ingotGraphite=OreDictionaryArbiter.getOres(""String_Node_Str"").get(0).copy();
    ItemStack ingotCyanite=OreDictionaryArbiter.getOres(""String_Node_Str"").get(0).copy();
    if (registerCoalFurnaceRecipe) {
      GameRegistry.addSmelting(Items.coal,ingotGraphite,1);
    }
    if (registerCharcoalFurnaceRecipe) {
      GameRegistry.addSmelting(new ItemStack(Items.coal,1,1),ingotGraphite,1);
    }
    if (registerCoalCraftingRecipe) {
      GameRegistry.addRecipe(new ShapedOreRecipe(ingotGraphite,""String_Node_Str"",'G',Blocks.gravel,'C',new ItemStack(Items.coal,1,0)));
    }
    if (registerCharcoalCraftingRecipe) {
      GameRegistry.addRecipe(new ShapedOreRecipe(ingotGraphite,""String_Node_Str"",'G',Blocks.gravel,'C',new ItemStack(Items.coal,1,1)));
    }
    if (enableCyaniteFromYelloriumRecipe) {
      GameRegistry.addRecipe(new ShapelessOreRecipe(ingotCyanite,yelloriumIngot,Blocks.sand));
    }
    if (blockYelloriumFuelRod != null) {
      GameRegistry.addRecipe(new ShapedOreRecipe(new ItemStack(blockYelloriumFuelRod,1),""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",'I',ironOrSteelIngot,'C',""String_Node_Str"",'U',yelloriumIngot));
    }
    if (blockReactorPart != null) {
      ItemStack reactorPartStack=BigReactors.blockReactorPart.getReactorCasingItemStack();
      reactorPartStack.stackSize=4;
      GameRegistry.addRecipe(new ShapedOreRecipe(reactorPartStack,""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",'I',ironOrSteelIngot,'C',""String_Node_Str"",'U',yelloriumIngot));
    }
    if (blockReactorPart != null) {
      ItemStack reactorPartStack=BigReactors.blockReactorPart.getReactorControllerItemStack();
      GameRegistry.addRecipe(new ShapedOreRecipe(reactorPartStack,""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",'D',Items.diamond,'G',yelloriumIngot,'C',""String_Node_Str"",'R',Items.redstone));
      if (enableReactorPowerTapRecipe) {
        reactorPartStack=BigReactors.blockReactorPart.getReactorPowerTapItemStack();
        GameRegistry.addRecipe(new ShapedOreRecipe(reactorPartStack,""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",'C',""String_Node_Str"",'R',Items.redstone));
      }
      reactorPartStack=BigReactors.blockReactorPart.getAccessPortItemStack();
      GameRegistry.addRecipe(new ShapedOreRecipe(reactorPartStack,""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",'C',""String_Node_Str"",'V',Blocks.chest,'P',Blocks.piston));
      reactorPartStack=BigReactors.blockReactorPart.getCoolantPortItemStack();
      GameRegistry.addRecipe(new ShapedOreRecipe(reactorPartStack,""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",'C',""String_Node_Str"",'V',Items.bucket,'P',Blocks.piston,'I',ironOrSteelIngot));
      reactorPartStack=BigReactors.blockReactorPart.getControlRodItemStack();
      GameRegistry.addRecipe(new ShapedOreRecipe(reactorPartStack,""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",'G',""String_Node_Str"",'C',""String_Node_Str"",'R',Items.redstone,'U',yelloriumIngot));
      if (Loader.isModLoaded(""String_Node_Str"")) {
        reactorPartStack=BigReactors.blockReactorPart.getRedNetPortItemStack();
        GameRegistry.addRecipe(new ShapedOreRecipe(reactorPartStack,""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",'C',""String_Node_Str"",'R',""String_Node_Str"",'G',""String_Node_Str""));
      }
      if (Loader.isModLoaded(""String_Node_Str"") || Loader.isModLoaded(""String_Node_Str"")) {
        reactorPartStack=BigReactors.blockReactorPart.getComputerPortItemStack();
        GameRegistry.addRecipe(new ShapedOreRecipe(reactorPartStack,""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",'C',""String_Node_Str"",'R',Items.redstone,'G',""String_Node_Str"",'P',Items.repeater));
      }
    }
    if (blockMultiblockGlass != null) {
      ItemStack reactorGlassStack=blockMultiblockGlass.getItemStack(""String_Node_Str"");
      ItemStack turbineGlassStack=blockMultiblockGlass.getItemStack(""String_Node_Str"");
      if (useExpensiveGlass && (ItemHelper.oreNameExists(""String_Node_Str"") || ItemHelper.oreNameExists(""String_Node_Str""))) {
        GameRegistry.addRecipe(new ShapedOreRecipe(reactorGlassStack,""String_Node_Str"",'G',""String_Node_Str"",'C',""String_Node_Str""));
        GameRegistry.addRecipe(new ShapedOreRecipe(reactorGlassStack,""String_Node_Str"",'G',""String_Node_Str"",'C',""String_Node_Str""));
        GameRegistry.addRecipe(new ShapedOreRecipe(turbineGlassStack,""String_Node_Str"",'G',""String_Node_Str"",'C',""String_Node_Str""));
        GameRegistry.addRecipe(new ShapedOreRecipe(turbineGlassStack,""String_Node_Str"",'G',""String_Node_Str"",'C',""String_Node_Str""));
      }
 else {
        GameRegistry.addRecipe(new ShapedOreRecipe(reactorGlassStack,""String_Node_Str"",'G',""String_Node_Str"",'C',""String_Node_Str""));
        GameRegistry.addRecipe(new ShapedOreRecipe(turbineGlassStack,""String_Node_Str"",'G',""String_Node_Str"",'C',""String_Node_Str""));
      }
    }
    if (blockDevice != null) {
      ItemStack cyaniteReprocessorStack=((BlockBRDevice)blockDevice).getCyaniteReprocessorItemStack();
      GameRegistry.addRecipe(new ShapedOreRecipe(cyaniteReprocessorStack,""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",'C',""String_Node_Str"",'I',ironOrSteelIngot,'F',blockYelloriumFuelRod,'P',Blocks.piston,'R',Items.redstone));
    }
    if (blockReactorRedstonePort != null) {
      ItemStack redstonePortStack=new ItemStack(BigReactors.blockReactorRedstonePort,1);
      GameRegistry.addRecipe(new ShapedOreRecipe(redstonePortStack,""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",'C',""String_Node_Str"",'R',Items.redstone,'G',Items.gold_ingot));
    }
    if (blockTurbinePart != null) {
      ItemStack turbineHousing=blockTurbinePart.getItemStack(""String_Node_Str"");
      ItemStack turbineController=blockTurbinePart.getItemStack(""String_Node_Str"");
      ItemStack turbinePowerTap=blockTurbinePart.getItemStack(""String_Node_Str"");
      ItemStack turbineFluidPort=blockTurbinePart.getItemStack(""String_Node_Str"");
      ItemStack turbineBearing=blockTurbinePart.getItemStack(""String_Node_Str"");
      turbineHousing.stackSize=4;
      GameRegistry.addRecipe(new ShapedOreRecipe(turbineHousing,""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",'C',""String_Node_Str"",'I',ironOrSteelIngot,'Q',Items.quartz,'G',""String_Node_Str""));
      GameRegistry.addRecipe(new ShapedOreRecipe(turbineController,""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",'H',""String_Node_Str"",'D',Items.diamond,'B',blutoniumIngot));
      GameRegistry.addRecipe(new ShapedOreRecipe(turbinePowerTap,""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",'H',""String_Node_Str"",'R',Items.redstone));
      GameRegistry.addRecipe(new ShapedOreRecipe(turbineFluidPort,""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",'H',""String_Node_Str"",'I',ironOrSteelIngot,'V',Items.bucket,'P',Blocks.piston));
      GameRegistry.addRecipe(new ShapedOreRecipe(turbineBearing,""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",'H',""String_Node_Str"",'D',Items.diamond,'R',""String_Node_Str""));
      if (Loader.isModLoaded(""String_Node_Str"") || Loader.isModLoaded(""String_Node_Str"")) {
        ItemStack turbineComputerPort=blockTurbinePart.getItemStack(""String_Node_Str"");
        GameRegistry.addRecipe(new ShapedOreRecipe(turbineComputerPort,""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",'H',""String_Node_Str"",'G',""String_Node_Str"",'R',""String_Node_Str""));
      }
    }
    if (blockTurbineRotorPart != null) {
      ItemStack rotorShaft=blockTurbineRotorPart.getItemStack(""String_Node_Str"");
      ItemStack rotorBlade=blockTurbineRotorPart.getItemStack(""String_Node_Str"");
      GameRegistry.addRecipe(new ShapedOreRecipe(rotorShaft,""String_Node_Str"",'C',""String_Node_Str"",'I',ironOrSteelIngot));
      GameRegistry.addRecipe(new ShapedOreRecipe(rotorBlade,""String_Node_Str"",'C',""String_Node_Str"",'I',ironOrSteelIngot));
    }
    registerGameBalanceData();
  }
  INITIALIZED=true;
}",0.9436389237736424
161353,"public void registerOreDictEntries(){
  for (int i=0; i < NUM_BLOCKS; i++) {
    OreDictionaryArbiter.registerOreDictionaryEntry(new ItemStack(this,1,i),_subBlocks[i]);
  }
}","public void registerOreDictEntries(){
  for (int i=0; i < NUM_BLOCKS; i++) {
    OreDictionary.registerOre(_subBlocks[i],new ItemStack(this,1,i));
  }
}",0.8466257668711656
161354,"@Override public int[] getAccessibleSlotsFromSide(int side){
  int metadata=this.getBlockMetadata();
  if (isInlet()) {
    return new int[]{SLOT_INLET};
  }
 else {
    return new int[]{SLOT_OUTLET};
  }
}","@Override public int[] getAccessibleSlotsFromSide(int side){
  int metadata=this.getBlockMetadata();
  if (isInlet()) {
    return kInletExposed;
  }
 else {
    return kOutletExposed;
  }
}",0.8585858585858586
161355,"@Override public boolean isItemValid(ItemStack stack){
  FluidStack data;
  if (fuel)   return Reactants.isFuel(stack);
 else   return Reactants.isWaste(stack);
}","@Override public boolean isItemValid(ItemStack stack){
  if (stack == null) {
    return false;
  }
  if (fuel) {
    return Reactants.isFuel(stack);
  }
 else {
    return Reactants.isWaste(stack);
  }
}",0.5136612021857924
161356,"@EventHandler public void preInit(FMLPreInitializationEvent event){
  BigReactors.registerOres(0,true);
  BigReactors.registerIngots(0);
  BigReactors.registerFuelRods(0,true);
  BigReactors.registerReactorPartBlocks(0,true);
  BigReactors.registerTurbineParts();
  BigReactors.registerDevices(0,true);
  BigReactors.registerFluids(0,true);
  BigReactors.registerCreativeParts(0,true);
  BigReactors.eventHandler=new BREventHandler();
  MinecraftForge.EVENT_BUS.register(BigReactors.eventHandler);
  MinecraftForge.EVENT_BUS.register(proxy);
  multiblockEventHandler=new MultiblockEventHandler();
  MinecraftForge.EVENT_BUS.register(multiblockEventHandler);
  proxy.preInit();
  Fluid waterFluid=FluidRegistry.WATER;
}","@EventHandler public void preInit(FMLPreInitializationEvent event){
  BigReactors.registerOres(0,true);
  BigReactors.registerIngots(0);
  BigReactors.registerFuelRods(0,true);
  BigReactors.registerReactorPartBlocks(0,true);
  BigReactors.registerTurbineParts();
  BigReactors.registerDevices(0,true);
  BigReactors.registerFluids(0,true);
  BigReactors.registerCreativeParts(0,true);
  StandardReactants.register();
  BigReactors.eventHandler=new BREventHandler();
  MinecraftForge.EVENT_BUS.register(BigReactors.eventHandler);
  MinecraftForge.EVENT_BUS.register(proxy);
  multiblockEventHandler=new MultiblockEventHandler();
  MinecraftForge.EVENT_BUS.register(multiblockEventHandler);
  proxy.preInit();
  Fluid waterFluid=FluidRegistry.WATER;
}",0.9782016348773842
161357,"protected static void registerGameBalanceData(){
  StandardReactants.yelloriumMapping=Reactants.registerSolid(""String_Node_Str"",StandardReactants.yellorium);
  StandardReactants.cyaniteMapping=Reactants.registerSolid(""String_Node_Str"",StandardReactants.cyanite);
  Reactants.registerSolid(""String_Node_Str"",StandardReactants.blutonium);
  ItemStack blockYellorium=blockMetal.getItemStackForMaterial(""String_Node_Str"");
  Reactants.registerSolid(blockYellorium,StandardReactants.yellorium,Reactants.standardSolidReactantAmount * 9);
  ItemStack blockBlutonium=blockMetal.getItemStackForMaterial(""String_Node_Str"");
  Reactants.registerSolid(blockBlutonium,StandardReactants.blutonium,Reactants.standardSolidReactantAmount * 9);
  Reactants.registerFluid(fluidYellorium,StandardReactants.yellorium);
  Reactants.registerFluid(fluidCyanite,StandardReactants.cyanite);
  BRConfig.CONFIGURATION.load();
  boolean enableFantasyMetals=BRConfig.CONFIGURATION.get(""String_Node_Str"",""String_Node_Str"",true,""String_Node_Str"").getBoolean(true);
  boolean enableComedy=BRConfig.CONFIGURATION.get(""String_Node_Str"",""String_Node_Str"",true,""String_Node_Str"").getBoolean(true);
  BRConfig.CONFIGURATION.save();
  TurbineCoil.registerBlock(""String_Node_Str"",1f,1f,1f);
  TurbineCoil.registerBlock(""String_Node_Str"",2f,1f,1.75f);
  TurbineCoil.registerBlock(""String_Node_Str"",1.2f,1f,1.2f);
  TurbineCoil.registerBlock(""String_Node_Str"",1.2f,1f,1.2f);
  TurbineCoil.registerBlock(""String_Node_Str"",1.35f,1f,1.3f);
  TurbineCoil.registerBlock(""String_Node_Str"",1.35f,1.01f,1.3f);
  TurbineCoil.registerBlock(""String_Node_Str"",1.4f,1f,1.2f);
  TurbineCoil.registerBlock(""String_Node_Str"",1.4f,1f,1.2f);
  TurbineCoil.registerBlock(""String_Node_Str"",1.5f,1f,1.3f);
  TurbineCoil.registerBlock(""String_Node_Str"",1.5f,1f,1.3f);
  TurbineCoil.registerBlock(""String_Node_Str"",1.5f,1f,1.4f);
  TurbineCoil.registerBlock(""String_Node_Str"",1.7f,1f,1.5f);
  TurbineCoil.registerBlock(""String_Node_Str"",2.5f,1f,2.0f);
  TurbineCoil.registerBlock(""String_Node_Str"",2.5f,1.01f,2.2f);
  TurbineCoil.registerBlock(""String_Node_Str"",3.0f,1f,2.5f);
  TurbineCoil.registerBlock(""String_Node_Str"",3.0f,1f,2.5f);
  TurbineCoil.registerBlock(""String_Node_Str"",3.1f,1f,2.7f);
  TurbineCoil.registerBlock(""String_Node_Str"",3.0f,1.02f,3.0f);
  if (enableFantasyMetals) {
    TurbineCoil.registerBlock(""String_Node_Str"",2.2f,1f,1.5f);
    TurbineCoil.registerBlock(""String_Node_Str"",2.3f,1f,1.7f);
    TurbineCoil.registerBlock(""String_Node_Str"",2.6f,1f,1.8f);
    TurbineCoil.registerBlock(""String_Node_Str"",3.0f,1f,2.0f);
    TurbineCoil.registerBlock(""String_Node_Str"",3.3f,1f,2.25f);
    TurbineCoil.registerBlock(""String_Node_Str"",3.5f,1f,2.5f);
    TurbineCoil.registerBlock(""String_Node_Str"",3.5f,1f,2.5f);
  }
  ReactorInterior.registerBlock(""String_Node_Str"",0.50f,0.75f,1.40f,IHeatEntity.conductivityIron);
  ReactorInterior.registerBlock(""String_Node_Str"",0.52f,0.80f,1.45f,IHeatEntity.conductivityGold);
  ReactorInterior.registerBlock(""String_Node_Str"",0.55f,0.85f,1.50f,IHeatEntity.conductivityDiamond);
  ReactorInterior.registerBlock(""String_Node_Str"",0.55f,0.85f,1.50f,IHeatEntity.conductivityEmerald);
  ReactorInterior.registerBlock(""String_Node_Str"",0.10f,0.50f,2.00f,IHeatEntity.conductivityGold);
  ReactorInterior.registerBlock(""String_Node_Str"",0.20f,0.25f,1.10f,IHeatEntity.conductivityGlass);
  ReactorInterior.registerBlock(""String_Node_Str"",0.33f,0.33f,1.15f,IHeatEntity.conductivityWater);
  ReactorInterior.registerBlock(""String_Node_Str"",0.15f,0.33f,1.05f,IHeatEntity.conductivityWater / 2f);
  ReactorInterior.registerBlock(""String_Node_Str"",0.50f,0.75f,1.40f,IHeatEntity.conductivityCopper);
  ReactorInterior.registerBlock(""String_Node_Str"",0.51f,0.77f,1.41f,IHeatEntity.conductivityCopper);
  ReactorInterior.registerBlock(""String_Node_Str"",0.51f,0.77f,1.41f,IHeatEntity.conductivityCopper);
  ReactorInterior.registerBlock(""String_Node_Str"",0.51f,0.77f,1.41f,IHeatEntity.conductivityCopper);
  ReactorInterior.registerBlock(""String_Node_Str"",0.51f,0.77f,1.41f,IHeatEntity.conductivityCopper);
  ReactorInterior.registerBlock(""String_Node_Str"",0.50f,0.78f,1.42f,IHeatEntity.conductivityIron);
  ReactorInterior.registerBlock(""String_Node_Str"",0.50f,0.78f,1.42f,IHeatEntity.conductivityIron);
  ReactorInterior.registerBlock(""String_Node_Str"",0.50f,0.79f,1.43f,IHeatEntity.conductivityIron);
  ReactorInterior.registerBlock(""String_Node_Str"",0.51f,0.79f,1.43f,IHeatEntity.conductivitySilver);
  ReactorInterior.registerBlock(""String_Node_Str"",0.75f,0.75f,1.75f,IHeatEntity.conductivitySilver);
  ReactorInterior.registerBlock(""String_Node_Str"",0.53f,0.82f,1.47f,2.2f);
  ReactorInterior.registerBlock(""String_Node_Str"",0.54f,0.83f,1.48f,2.4f);
  ReactorInterior.registerBlock(""String_Node_Str"",0.57f,0.86f,1.58f,IHeatEntity.conductivityEmerald);
  ReactorInterior.registerBlock(""String_Node_Str"",0.57f,0.86f,1.58f,IHeatEntity.conductivityEmerald);
  ReactorInterior.registerBlock(""String_Node_Str"",0.58f,0.87f,1.59f,2.7f);
  ReactorInterior.registerBlock(""String_Node_Str"",0.60f,0.88f,1.60f,IHeatEntity.conductivityDiamond);
  if (enableFantasyMetals) {
    ReactorInterior.registerBlock(""String_Node_Str"",0.53f,0.81f,1.45f,IHeatEntity.conductivitySilver);
    ReactorInterior.registerBlock(""String_Node_Str"",0.52f,0.83f,1.46f,1.7f);
    ReactorInterior.registerBlock(""String_Node_Str"",0.53f,0.84f,1.48f,IHeatEntity.conductivityGold);
    ReactorInterior.registerBlock(""String_Node_Str"",0.54f,0.84f,1.49f,IHeatEntity.conductivityEmerald);
    ReactorInterior.registerBlock(""String_Node_Str"",0.54f,0.84f,1.49f,IHeatEntity.conductivityDiamond);
    ReactorInterior.registerBlock(""String_Node_Str"",0.65f,0.90f,1.62f,4f);
    ReactorInterior.registerBlock(""String_Node_Str"",0.68f,0.88f,1.75f,4.5f);
  }
  ReactorInterior.registerFluid(""String_Node_Str"",RadiationHelper.waterData.absorption,RadiationHelper.waterData.heatEfficiency,RadiationHelper.waterData.moderation,IHeatEntity.conductivityWater);
  ReactorInterior.registerFluid(""String_Node_Str"",0.75f,0.55f,1.60f,IHeatEntity.conductivityEmerald);
  ReactorInterior.registerFluid(""String_Node_Str"",0.20f,0.60f,1.75f,IHeatEntity.conductivityCopper);
  ReactorInterior.registerFluid(""String_Node_Str"",0.66f,0.95f,6.00f,IHeatEntity.conductivityDiamond);
  ReactorInterior.registerFluid(""String_Node_Str"",0.90f,0.75f,2.00f,IHeatEntity.conductivityGold);
  ReactorInterior.registerFluid(""String_Node_Str"",0.66f,0.90f,1.00f,IHeatEntity.conductivityIron);
  ReactorInterior.registerFluid(""String_Node_Str"",0.70f,0.55f,1.75f,IHeatEntity.conductivityGold);
  if (enableComedy) {
    ReactorInterior.registerBlock(""String_Node_Str"",0.50f,0.33f,1.33f,IHeatEntity.conductivityStone);
    ReactorInterior.registerBlock(""String_Node_Str"",0.40f,0.50f,1.50f,IHeatEntity.conductivityStone);
    ReactorInterior.registerFluid(""String_Node_Str"",0.40f,0.60f,1.33f,IHeatEntity.conductivityStone);
    ReactorInterior.registerFluid(""String_Node_Str"",0.45f,0.70f,1.50f,IHeatEntity.conductivityIron);
    ReactorInterior.registerFluid(""String_Node_Str"",0.50f,0.65f,1.44f,IHeatEntity.conductivityIron);
  }
}","protected static void registerGameBalanceData(){
  StandardReactants.yelloriumMapping=Reactants.registerSolid(""String_Node_Str"",StandardReactants.yellorium);
  StandardReactants.cyaniteMapping=Reactants.registerSolid(""String_Node_Str"",StandardReactants.cyanite);
  Reactants.registerSolid(""String_Node_Str"",StandardReactants.blutonium);
  ItemStack blockYellorium=blockMetal.getItemStackForMaterial(""String_Node_Str"");
  Reactants.registerSolid(blockYellorium,StandardReactants.yellorium,Reactants.standardSolidReactantAmount * 9);
  ItemStack blockBlutonium=blockMetal.getItemStackForMaterial(""String_Node_Str"");
  Reactants.registerSolid(blockBlutonium,StandardReactants.blutonium,Reactants.standardSolidReactantAmount * 9);
  Reactants.registerFluid(fluidYellorium,StandardReactants.yellorium);
  Reactants.registerFluid(fluidCyanite,StandardReactants.cyanite);
  ReactorConversions.register(StandardReactants.yellorium,StandardReactants.cyanite);
  ReactorConversions.register(StandardReactants.blutonium,StandardReactants.cyanite);
  BRConfig.CONFIGURATION.load();
  boolean enableFantasyMetals=BRConfig.CONFIGURATION.get(""String_Node_Str"",""String_Node_Str"",true,""String_Node_Str"").getBoolean(true);
  boolean enableComedy=BRConfig.CONFIGURATION.get(""String_Node_Str"",""String_Node_Str"",true,""String_Node_Str"").getBoolean(true);
  BRConfig.CONFIGURATION.save();
  TurbineCoil.registerBlock(""String_Node_Str"",1f,1f,1f);
  TurbineCoil.registerBlock(""String_Node_Str"",2f,1f,1.75f);
  TurbineCoil.registerBlock(""String_Node_Str"",1.2f,1f,1.2f);
  TurbineCoil.registerBlock(""String_Node_Str"",1.2f,1f,1.2f);
  TurbineCoil.registerBlock(""String_Node_Str"",1.35f,1f,1.3f);
  TurbineCoil.registerBlock(""String_Node_Str"",1.35f,1.01f,1.3f);
  TurbineCoil.registerBlock(""String_Node_Str"",1.4f,1f,1.2f);
  TurbineCoil.registerBlock(""String_Node_Str"",1.4f,1f,1.2f);
  TurbineCoil.registerBlock(""String_Node_Str"",1.5f,1f,1.3f);
  TurbineCoil.registerBlock(""String_Node_Str"",1.5f,1f,1.3f);
  TurbineCoil.registerBlock(""String_Node_Str"",1.5f,1f,1.4f);
  TurbineCoil.registerBlock(""String_Node_Str"",1.7f,1f,1.5f);
  TurbineCoil.registerBlock(""String_Node_Str"",2.5f,1f,2.0f);
  TurbineCoil.registerBlock(""String_Node_Str"",2.5f,1.01f,2.2f);
  TurbineCoil.registerBlock(""String_Node_Str"",3.0f,1f,2.5f);
  TurbineCoil.registerBlock(""String_Node_Str"",3.0f,1f,2.5f);
  TurbineCoil.registerBlock(""String_Node_Str"",3.1f,1f,2.7f);
  TurbineCoil.registerBlock(""String_Node_Str"",3.0f,1.02f,3.0f);
  if (enableFantasyMetals) {
    TurbineCoil.registerBlock(""String_Node_Str"",2.2f,1f,1.5f);
    TurbineCoil.registerBlock(""String_Node_Str"",2.3f,1f,1.7f);
    TurbineCoil.registerBlock(""String_Node_Str"",2.6f,1f,1.8f);
    TurbineCoil.registerBlock(""String_Node_Str"",3.0f,1f,2.0f);
    TurbineCoil.registerBlock(""String_Node_Str"",3.3f,1f,2.25f);
    TurbineCoil.registerBlock(""String_Node_Str"",3.5f,1f,2.5f);
    TurbineCoil.registerBlock(""String_Node_Str"",3.5f,1f,2.5f);
  }
  ReactorInterior.registerBlock(""String_Node_Str"",0.50f,0.75f,1.40f,IHeatEntity.conductivityIron);
  ReactorInterior.registerBlock(""String_Node_Str"",0.52f,0.80f,1.45f,IHeatEntity.conductivityGold);
  ReactorInterior.registerBlock(""String_Node_Str"",0.55f,0.85f,1.50f,IHeatEntity.conductivityDiamond);
  ReactorInterior.registerBlock(""String_Node_Str"",0.55f,0.85f,1.50f,IHeatEntity.conductivityEmerald);
  ReactorInterior.registerBlock(""String_Node_Str"",0.10f,0.50f,2.00f,IHeatEntity.conductivityGold);
  ReactorInterior.registerBlock(""String_Node_Str"",0.20f,0.25f,1.10f,IHeatEntity.conductivityGlass);
  ReactorInterior.registerBlock(""String_Node_Str"",0.33f,0.33f,1.15f,IHeatEntity.conductivityWater);
  ReactorInterior.registerBlock(""String_Node_Str"",0.15f,0.33f,1.05f,IHeatEntity.conductivityWater / 2f);
  ReactorInterior.registerBlock(""String_Node_Str"",0.50f,0.75f,1.40f,IHeatEntity.conductivityCopper);
  ReactorInterior.registerBlock(""String_Node_Str"",0.51f,0.77f,1.41f,IHeatEntity.conductivityCopper);
  ReactorInterior.registerBlock(""String_Node_Str"",0.51f,0.77f,1.41f,IHeatEntity.conductivityCopper);
  ReactorInterior.registerBlock(""String_Node_Str"",0.51f,0.77f,1.41f,IHeatEntity.conductivityCopper);
  ReactorInterior.registerBlock(""String_Node_Str"",0.51f,0.77f,1.41f,IHeatEntity.conductivityCopper);
  ReactorInterior.registerBlock(""String_Node_Str"",0.50f,0.78f,1.42f,IHeatEntity.conductivityIron);
  ReactorInterior.registerBlock(""String_Node_Str"",0.50f,0.78f,1.42f,IHeatEntity.conductivityIron);
  ReactorInterior.registerBlock(""String_Node_Str"",0.50f,0.79f,1.43f,IHeatEntity.conductivityIron);
  ReactorInterior.registerBlock(""String_Node_Str"",0.51f,0.79f,1.43f,IHeatEntity.conductivitySilver);
  ReactorInterior.registerBlock(""String_Node_Str"",0.75f,0.75f,1.75f,IHeatEntity.conductivitySilver);
  ReactorInterior.registerBlock(""String_Node_Str"",0.53f,0.82f,1.47f,2.2f);
  ReactorInterior.registerBlock(""String_Node_Str"",0.54f,0.83f,1.48f,2.4f);
  ReactorInterior.registerBlock(""String_Node_Str"",0.57f,0.86f,1.58f,IHeatEntity.conductivityEmerald);
  ReactorInterior.registerBlock(""String_Node_Str"",0.57f,0.86f,1.58f,IHeatEntity.conductivityEmerald);
  ReactorInterior.registerBlock(""String_Node_Str"",0.58f,0.87f,1.59f,2.7f);
  ReactorInterior.registerBlock(""String_Node_Str"",0.60f,0.88f,1.60f,IHeatEntity.conductivityDiamond);
  if (enableFantasyMetals) {
    ReactorInterior.registerBlock(""String_Node_Str"",0.53f,0.81f,1.45f,IHeatEntity.conductivitySilver);
    ReactorInterior.registerBlock(""String_Node_Str"",0.52f,0.83f,1.46f,1.7f);
    ReactorInterior.registerBlock(""String_Node_Str"",0.53f,0.84f,1.48f,IHeatEntity.conductivityGold);
    ReactorInterior.registerBlock(""String_Node_Str"",0.54f,0.84f,1.49f,IHeatEntity.conductivityEmerald);
    ReactorInterior.registerBlock(""String_Node_Str"",0.54f,0.84f,1.49f,IHeatEntity.conductivityDiamond);
    ReactorInterior.registerBlock(""String_Node_Str"",0.65f,0.90f,1.62f,4f);
    ReactorInterior.registerBlock(""String_Node_Str"",0.68f,0.88f,1.75f,4.5f);
  }
  ReactorInterior.registerFluid(""String_Node_Str"",RadiationHelper.waterData.absorption,RadiationHelper.waterData.heatEfficiency,RadiationHelper.waterData.moderation,IHeatEntity.conductivityWater);
  ReactorInterior.registerFluid(""String_Node_Str"",0.75f,0.55f,1.60f,IHeatEntity.conductivityEmerald);
  ReactorInterior.registerFluid(""String_Node_Str"",0.20f,0.60f,1.75f,IHeatEntity.conductivityCopper);
  ReactorInterior.registerFluid(""String_Node_Str"",0.66f,0.95f,6.00f,IHeatEntity.conductivityDiamond);
  ReactorInterior.registerFluid(""String_Node_Str"",0.90f,0.75f,2.00f,IHeatEntity.conductivityGold);
  ReactorInterior.registerFluid(""String_Node_Str"",0.66f,0.90f,1.00f,IHeatEntity.conductivityIron);
  ReactorInterior.registerFluid(""String_Node_Str"",0.70f,0.55f,1.75f,IHeatEntity.conductivityGold);
  if (enableComedy) {
    ReactorInterior.registerBlock(""String_Node_Str"",0.50f,0.33f,1.33f,IHeatEntity.conductivityStone);
    ReactorInterior.registerBlock(""String_Node_Str"",0.40f,0.50f,1.50f,IHeatEntity.conductivityStone);
    ReactorInterior.registerFluid(""String_Node_Str"",0.40f,0.60f,1.33f,IHeatEntity.conductivityStone);
    ReactorInterior.registerFluid(""String_Node_Str"",0.45f,0.70f,1.50f,IHeatEntity.conductivityIron);
    ReactorInterior.registerFluid(""String_Node_Str"",0.50f,0.65f,1.44f,IHeatEntity.conductivityIron);
  }
}",0.9880688124306326
161358,"public void preInit(){
  StandardReactants.register();
}","public void preInit(){
}",0.6
161359,"public static ReactantStack createFromNBT(NBTTagCompound tag){
  String name=null;
  int amount=0;
  if (tag.hasKey(""String_Node_Str"")) {
    name=tag.getString(""String_Node_Str"");
  }
 else {
    BRLog.warning(""String_Node_Str"");
    return null;
  }
  if (tag.hasKey(""String_Node_Str"")) {
    amount=tag.getInteger(""String_Node_Str"");
  }
  return new ReactantStack(name,amount);
}","public static ReactantStack createFromNBT(NBTTagCompound tag){
  String name=null;
  int amount=0;
  if (tag.hasKey(""String_Node_Str"")) {
    name=tag.getString(""String_Node_Str"");
  }
 else {
    return null;
  }
  if (tag.hasKey(""String_Node_Str"")) {
    amount=tag.getInteger(""String_Node_Str"");
  }
  return new ReactantStack(name,amount);
}",0.9478021978021978
161360,"public static void register(){
  Reactants.registerReactant(yellorium,0,colorYellorium);
  Reactants.registerReactant(cyanite,0,colorCyanite);
  Reactants.registerReactant(blutonium,0,colorYellorium);
}","public static void register(){
  Reactants.registerReactant(yellorium,0,colorYellorium);
  Reactants.registerReactant(cyanite,1,colorCyanite);
  Reactants.registerReactant(blutonium,0,colorYellorium);
}",0.995049504950495
161361,"@Override public boolean isReactantValidForStack(int idx,String name){
switch (idx) {
case FUEL:
    return Reactants.isFuel(name);
case WASTE:
  return Reactants.isWaste(name);
default :
return false;
}
}","@Override public boolean isReactantValidForStack(int idx,String name){
switch (idx) {
case FUEL:
    return Reactants.isFuel(name);
case WASTE:
  return true;
default :
return false;
}
}",0.9360613810741688
161362,"public int addFuel(String name,int amount,boolean doAdd){
  if (name == null || amount <= 0) {
    return 0;
  }
 else {
    return fill(FUEL,name,amount,doAdd);
  }
}","/** 
 * Add some fuel to the current pile, if possible.
 * @param name The name of the reactant to add.
 * @param amount The quantity of reactant to add.
 * @param doAdd If true, this will only simulate a fill and will not alter the fuel amount.
 * @return The amount of reactant actually added
 */
public int addFuel(String name,int amount,boolean doAdd){
  if (name == null || amount <= 0) {
    return 0;
  }
 else {
    return fill(FUEL,name,amount,doAdd);
  }
}",0.5276461295418642
161363,"protected void readFromNBT(NBTTagCompound data){
  for (int i=0; i < tankNames.length; i++) {
    if (data.hasKey(tankNames[i])) {
      tanks[i]=ReactantStack.createFromNBT(data.getCompoundTag(tankNames[i]));
      levelAtLastUpdate[i]=tanks[i].amount;
    }
 else {
      tanks[i]=null;
      levelAtLastUpdate[i]=0;
    }
  }
}","protected void readFromNBT(NBTTagCompound data){
  for (int i=0; i < tankNames.length; i++) {
    if (data.hasKey(tankNames[i])) {
      tanks[i]=ReactantStack.createFromNBT(data.getCompoundTag(tankNames[i]));
      levelAtLastUpdate[i]=tanks[i] != null ? tanks[i].amount : FORCE_UPDATE;
    }
 else {
      tanks[i]=null;
      levelAtLastUpdate[i]=FORCE_UPDATE;
    }
  }
}",0.9134751773049644
161364,"public int fill(int idx,ReactantStack incoming,boolean doFill){
  if (incoming == null) {
    return 0;
  }
  return fill(idx,incoming.getName(),incoming.amount,doFill);
}","public int fill(int idx,String reactantName,int amount,boolean doFill){
  assert(idx >= 0 && idx < tanks.length);
  if (reactantName == null || amount <= 0) {
    return 0;
  }
  if (!canAddToStack(idx,reactantName)) {
    return 0;
  }
  int amtToAdd=Math.min(amount,getRemainingSpace());
  if (amtToAdd <= 0) {
    return 0;
  }
  if (!doFill) {
    return amtToAdd;
  }
  if (tanks[idx] == null) {
    tanks[idx]=new ReactantStack(reactantName,amtToAdd);
  }
 else {
    tanks[idx].amount+=amtToAdd;
  }
  return amtToAdd;
}",0.1690544412607449
161365,"public void serialize(ByteBuf buffer){
  for (int i=0; i < tankNames.length; i++) {
    if (getReactantAmount(i) <= 0) {
      buffer.writeBoolean(false);
    }
 else {
      ByteBufUtils.writeUTF8String(buffer,tanks[i].getName());
      buffer.writeInt(tanks[i].amount);
    }
  }
}","public void serialize(ByteBuf buffer){
  buffer.writeInt(capacity);
  for (int i=0; i < tankNames.length; i++) {
    boolean hasReactant=getReactantAmount(i) > 0;
    buffer.writeBoolean(hasReactant);
    if (hasReactant) {
      ByteBufUtils.writeUTF8String(buffer,tanks[i].getName());
      buffer.writeInt(tanks[i].amount);
    }
  }
}",0.8115942028985508
161366,"public void deserialize(ByteBuf buffer){
  for (int i=0; i < tankNames.length; i++) {
    boolean hasData=buffer.readBoolean();
    if (hasData) {
      String reactantName=ByteBufUtils.readUTF8String(buffer);
      int amount=buffer.readInt();
      if (!Reactants.isKnown(reactantName)) {
        BRLog.warning(""String_Node_Str"",reactantName,tankNames[i]);
      }
 else {
        tanks[i]=new ReactantStack(reactantName,amount);
        levelAtLastUpdate[i]=amount;
      }
    }
  }
}","public void deserialize(ByteBuf buffer){
  capacity=buffer.readInt();
  for (int i=0; i < tankNames.length; i++) {
    tanks[i]=null;
    boolean hasReactant=buffer.readBoolean();
    if (hasReactant) {
      String reactantName=ByteBufUtils.readUTF8String(buffer);
      int amount=buffer.readInt();
      if (!Reactants.isKnown(reactantName)) {
        BRLog.warning(""String_Node_Str"",reactantName,tankNames[i]);
      }
 else {
        tanks[i]=new ReactantStack(reactantName,amount);
        levelAtLastUpdate[i]=amount;
      }
    }
  }
}",0.9302325581395348
161367,"@Override public void decodeDescriptionPacket(NBTTagCompound data){
  if (data.hasKey(""String_Node_Str"")) {
    this.wasteEjection=s_EjectionSettings[data.getInteger(""String_Node_Str"")];
  }
  if (data.hasKey(""String_Node_Str"")) {
    this.setActive(data.getBoolean(""String_Node_Str""));
  }
  if (data.hasKey(""String_Node_Str"")) {
    this.energyStored=data.getFloat(""String_Node_Str"");
  }
  if (data.hasKey(""String_Node_Str"")) {
    setReactorHeat(data.getFloat(""String_Node_Str""));
  }
  if (data.hasKey(""String_Node_Str"")) {
    setFuelHeat(data.getFloat(""String_Node_Str""));
  }
  if (data.hasKey(""String_Node_Str"")) {
    fuelContainer.readFromNBT(data.getCompoundTag(""String_Node_Str""));
  }
  if (data.hasKey(""String_Node_Str"")) {
    radiationHelper.readFromNBT(data.getCompoundTag(""String_Node_Str""));
  }
  if (data.hasKey(""String_Node_Str"")) {
    coolantContainer.readFromNBT(data.getCompoundTag(""String_Node_Str""));
  }
  onFuelStatusChanged();
}","@Override public void decodeDescriptionPacket(NBTTagCompound data){
  readFromNBT(data);
  onFuelStatusChanged();
}",0.213953488372093
161368,"@Override public void formatDescriptionPacket(NBTTagCompound data){
  data.setInteger(""String_Node_Str"",this.wasteEjection.ordinal());
  data.setFloat(""String_Node_Str"",this.energyStored);
  data.setFloat(""String_Node_Str"",this.reactorHeat);
  data.setBoolean(""String_Node_Str"",this.getActive());
  data.setFloat(""String_Node_Str"",fuelHeat);
  data.setTag(""String_Node_Str"",fuelContainer.writeToNBT(new NBTTagCompound()));
  data.setTag(""String_Node_Str"",radiationHelper.writeToNBT(new NBTTagCompound()));
  data.setTag(""String_Node_Str"",coolantContainer.writeToNBT(new NBTTagCompound()));
}","@Override public void formatDescriptionPacket(NBTTagCompound data){
  writeToNBT(data);
}",0.2617647058823529
161369,"public void setActive(boolean act){
  if (act == this.active) {
    return;
  }
  this.active=act;
  for (  IMultiblockPart part : connectedParts) {
    if (this.active) {
      part.onMachineActivated();
    }
 else {
      part.onMachineDeactivated();
    }
  }
}","public void setActive(boolean act){
  if (act == this.active) {
    return;
  }
  this.active=act;
  for (  IMultiblockPart part : connectedParts) {
    if (this.active) {
      part.onMachineActivated();
    }
 else {
      part.onMachineDeactivated();
    }
  }
  if (worldObj.isRemote) {
    for (    IMultiblockPart part : attachedControllers) {
      worldObj.markBlockForUpdate(part.xCoord,part.yCoord,part.zCoord);
    }
  }
}",0.7564469914040115
161370,"@Override public void readFromNBT(NBTTagCompound tag){
  super.readFromNBT(tag);
  _inventories=new ItemStack[getSizeInventory()];
  if (tag.hasKey(""String_Node_Str"")) {
    NBTTagList tagList=tag.getTagList(""String_Node_Str"",10);
    for (int i=0; i < tagList.tagCount(); i++) {
      NBTTagCompound itemTag=(NBTTagCompound)tagList.getCompoundTagAt(i);
      int slot=itemTag.getByte(""String_Node_Str"") & 0xff;
      if (slot >= 0 && slot <= _inventories.length) {
        ItemStack itemStack=new ItemStack((Block)null,0,0);
        itemStack.readFromNBT(itemTag);
        _inventories[slot]=itemStack;
      }
    }
  }
  if (tag.hasKey(""String_Node_Str"")) {
    setInlet(tag.getBoolean(""String_Node_Str""),false);
  }
}","@Override public void readFromNBT(NBTTagCompound tag){
  super.readFromNBT(tag);
  _inventories=new ItemStack[getSizeInventory()];
  if (tag.hasKey(""String_Node_Str"")) {
    NBTTagList tagList=tag.getTagList(""String_Node_Str"",10);
    for (int i=0; i < tagList.tagCount(); i++) {
      NBTTagCompound itemTag=(NBTTagCompound)tagList.getCompoundTagAt(i);
      int slot=itemTag.getByte(""String_Node_Str"") & 0xff;
      if (slot >= 0 && slot <= _inventories.length) {
        ItemStack itemStack=new ItemStack((Block)null,0,0);
        itemStack.readFromNBT(itemTag);
        _inventories[slot]=itemStack;
      }
    }
  }
  if (tag.hasKey(""String_Node_Str"")) {
    this.isInlet=tag.getBoolean(""String_Node_Str"");
  }
}",0.9423210562890896
161371,"protected void setInlet(boolean shouldBeInlet,boolean markDirty){
  if (isInlet == shouldBeInlet) {
    return;
  }
  isInlet=shouldBeInlet;
  worldObj.markBlockForUpdate(xCoord,yCoord,zCoord);
  if (markDirty && !worldObj.isRemote) {
    markDirty();
  }
}","public void setInlet(boolean shouldBeInlet){
  if (isInlet == shouldBeInlet) {
    return;
  }
  isInlet=shouldBeInlet;
  worldObj.markBlockForUpdate(xCoord,yCoord,zCoord);
  if (!worldObj.isRemote) {
    markDirty();
  }
 else {
    notifyNeighborsOfTileChange();
  }
}",0.7020872865275142
161372,"@Override protected void isBlockGoodForInterior(World world,int x,int y,int z) throws MultiblockValidationException {
  if (world.isAirBlock(x,y,z)) {
    return;
  }
  Material material=world.getBlock(x,y,z).getMaterial();
  if (material == net.minecraft.block.material.MaterialLiquid.water) {
    return;
  }
  Block block=world.getBlock(x,y,z);
  if (block == Blocks.iron_block || block == Blocks.gold_block || block == Blocks.diamond_block || block == Blocks.emerald_block) {
    return;
  }
  int metadata=world.getBlockMetadata(x,y,z);
  int oreId=OreDictionary.getOreID(new ItemStack(block,1,metadata));
  if (oreId >= 0 && BRRegistry.getReactorInteriorBlockData(OreDictionary.getOreName(oreId)) != null) {
    return;
  }
  if (block != null) {
    if (block instanceof IFluidBlock) {
      Fluid fluid=((IFluidBlock)block).getFluid();
      String fluidName=fluid.getName();
      if (BRRegistry.getReactorInteriorFluidData(fluidName) != null) {
        return;
      }
      throw new MultiblockValidationException(String.format(""String_Node_Str"",x,y,z,fluidName));
    }
 else {
      throw new MultiblockValidationException(String.format(""String_Node_Str"",x,y,z,block.getLocalizedName()));
    }
  }
 else {
    throw new MultiblockValidationException(String.format(""String_Node_Str"",x,y,z,block.getLocalizedName()));
  }
}","@Override protected void isBlockGoodForInterior(World world,int x,int y,int z) throws MultiblockValidationException {
  if (world.isAirBlock(x,y,z)) {
    return;
  }
  Material material=world.getBlock(x,y,z).getMaterial();
  if (material == net.minecraft.block.material.MaterialLiquid.water) {
    return;
  }
  Block block=world.getBlock(x,y,z);
  if (block == Blocks.iron_block || block == Blocks.gold_block || block == Blocks.diamond_block || block == Blocks.emerald_block) {
    return;
  }
  int metadata=world.getBlockMetadata(x,y,z);
  int oreId=OreDictionary.getOreID(new ItemStack(block,1,metadata));
  if (oreId >= 0 && BRRegistry.getReactorInteriorBlockData(OreDictionary.getOreName(oreId)) != null) {
    return;
  }
  if (block != null) {
    if (block instanceof IFluidBlock) {
      Fluid fluid=((IFluidBlock)block).getFluid();
      String fluidName=fluid.getName();
      if (BRRegistry.getReactorInteriorFluidData(fluidName) != null) {
        return;
      }
      throw new MultiblockValidationException(String.format(""String_Node_Str"",x,y,z,fluidName));
    }
 else {
      throw new MultiblockValidationException(String.format(""String_Node_Str"",x,y,z,block.getLocalizedName()));
    }
  }
 else {
    throw new MultiblockValidationException(String.format(""String_Node_Str"",x,y,z));
  }
}",0.9905482041587902
161373,"@Override public void onNeighborTileChange(World world,int x,int y,int z,int neighborX,int neighborY,int neighborZ){
  checkForAdjacentTank();
}","@Override public void onNeighborTileChange(IBlockAccess world,int x,int y,int z,int neighborX,int neighborY,int neighborZ){
  checkForAdjacentTank();
}",0.9491525423728814
161374,"@Override protected void onBlockAdded(IMultiblockPart part){
  if (part instanceof TileEntityReactorAccessPort) {
    attachedAccessPorts.add((TileEntityReactorAccessPort)part);
  }
  if (part instanceof TileEntityReactorControlRod) {
    TileEntityReactorControlRod controlRod=(TileEntityReactorControlRod)part;
    attachedControlRods.add(controlRod);
    if (controlRod.getCachedFuel() != null) {
      fuelContainer.addFuel(controlRod.getCachedFuel());
      worldObj.markTileEntityChunkModified(controlRod.xCoord,controlRod.yCoord,controlRod.zCoord,controlRod);
    }
  }
  if (part instanceof TileEntityReactorPowerTap) {
    attachedPowerTaps.add((TileEntityReactorPowerTap)part);
  }
  if (part instanceof TileEntityReactorPart) {
    TileEntityReactorPart reactorPart=(TileEntityReactorPart)part;
    if (BlockReactorPart.isController(reactorPart.getBlockMetadata())) {
      attachedControllers.add(reactorPart);
    }
  }
  if (part instanceof ITickableMultiblockPart) {
    attachedTickables.add((ITickableMultiblockPart)part);
  }
  if (part instanceof TileEntityReactorFuelRod) {
    TileEntityReactorFuelRod fuelRod=(TileEntityReactorFuelRod)part;
    attachedFuelRods.add(fuelRod);
    currentFuelRod=attachedFuelRods.iterator();
    if (worldObj.isRemote) {
      worldObj.markBlockForRenderUpdate(fuelRod.xCoord,fuelRod.yCoord,fuelRod.zCoord);
    }
  }
  if (part instanceof TileEntityReactorCoolantPort) {
    attachedCoolantPorts.add((TileEntityReactorCoolantPort)part);
  }
}","@Override protected void onBlockAdded(IMultiblockPart part){
  if (part instanceof TileEntityReactorAccessPort) {
    attachedAccessPorts.add((TileEntityReactorAccessPort)part);
  }
  if (part instanceof TileEntityReactorControlRod) {
    TileEntityReactorControlRod controlRod=(TileEntityReactorControlRod)part;
    attachedControlRods.add(controlRod);
    if (controlRod.getCachedFuel() != null) {
      fuelContainer.addFuel(controlRod.getCachedFuel());
      worldObj.markTileEntityChunkModified(controlRod.xCoord,controlRod.yCoord,controlRod.zCoord,controlRod);
    }
  }
  if (part instanceof TileEntityReactorPowerTap) {
    attachedPowerTaps.add((TileEntityReactorPowerTap)part);
  }
  if (part instanceof TileEntityReactorPart) {
    TileEntityReactorPart reactorPart=(TileEntityReactorPart)part;
    if (BlockReactorPart.isController(reactorPart.getBlockMetadata())) {
      attachedControllers.add(reactorPart);
    }
  }
  if (part instanceof ITickableMultiblockPart) {
    attachedTickables.add((ITickableMultiblockPart)part);
  }
  if (part instanceof TileEntityReactorFuelRod) {
    TileEntityReactorFuelRod fuelRod=(TileEntityReactorFuelRod)part;
    attachedFuelRods.add(fuelRod);
    currentFuelRod=attachedFuelRods.iterator();
    if (worldObj.isRemote) {
      worldObj.markBlockForUpdate(fuelRod.xCoord,fuelRod.yCoord,fuelRod.zCoord);
    }
  }
  if (part instanceof TileEntityReactorCoolantPort) {
    attachedCoolantPorts.add((TileEntityReactorCoolantPort)part);
  }
}",0.997991967871486
161375,"@Override protected void decodeDescriptionPacket(NBTTagCompound packet){
  super.decodeDescriptionPacket(packet);
  if (packet.hasKey(""String_Node_Str"")) {
    NBTTagCompound localData=packet.getCompoundTag(""String_Node_Str"");
    this.readLocalDataFromNBT(localData);
    if (this.worldObj != null) {
      this.worldObj.markBlockForRenderUpdate(xCoord,yCoord,zCoord);
    }
  }
}","@Override protected void decodeDescriptionPacket(NBTTagCompound packet){
  super.decodeDescriptionPacket(packet);
  if (packet.hasKey(""String_Node_Str"")) {
    NBTTagCompound localData=packet.getCompoundTag(""String_Node_Str"");
    this.readLocalDataFromNBT(localData);
    if (worldObj != null && worldObj.isRemote) {
      this.worldObj.markBlockForUpdate(xCoord,yCoord,zCoord);
    }
  }
}",0.9196891191709844
161376,"@Override public void onNeighborBlockChange(World world,int x,int y,int z,int neighborBlockID){
  if (isConnected()) {
    checkForConnections(world,x,y,z);
  }
}","@Override public void onNeighborBlockChange(World world,int x,int y,int z,int neighborBlockID){
  checkForConnections(world,x,y,z);
}",0.9016949152542372
161377,"/** 
 * Check for a world connection, if we're assembled.
 * @param world
 * @param x
 * @param y
 * @param z
 */
protected void checkForConnections(World world,int x,int y,int z){
  boolean wasConnected=(rfNetwork != null);
  ForgeDirection out=getOutwardsDir();
  if (out == ForgeDirection.UNKNOWN) {
    wasConnected=false;
    rfNetwork=null;
  }
 else {
    rfNetwork=null;
    TileEntity te=world.getBlockTileEntity(x + out.offsetX,y + out.offsetY,z + out.offsetZ);
    if (!(te instanceof TileEntityReactorPowerTap)) {
      if (te instanceof IEnergyHandler) {
        rfNetwork=(IEnergyHandler)te;
      }
    }
  }
  boolean isConnected=(rfNetwork != null);
  if (wasConnected != isConnected && worldObj.isRemote) {
    world.markBlockForRenderUpdate(xCoord,yCoord,zCoord);
  }
}","/** 
 * Check for a world connection, if we're assembled.
 * @param world
 * @param x
 * @param y
 * @param z
 */
protected void checkForConnections(World world,int x,int y,int z){
  boolean wasConnected=(rfNetwork != null);
  ForgeDirection out=getOutwardsDir();
  if (out == ForgeDirection.UNKNOWN) {
    wasConnected=false;
    rfNetwork=null;
  }
 else {
    rfNetwork=null;
    TileEntity te=world.getBlockTileEntity(x + out.offsetX,y + out.offsetY,z + out.offsetZ);
    if (!(te instanceof TileEntityReactorPowerTap)) {
      if (te instanceof IEnergyHandler) {
        rfNetwork=(IEnergyHandler)te;
      }
    }
  }
  boolean isConnected=(rfNetwork != null);
  if (wasConnected != isConnected && worldObj.isRemote) {
    world.markBlockForUpdate(xCoord,yCoord,zCoord);
  }
}",0.9961783439490446
161378,"/** 
 * Attempt to transfer some heat (in RF) into the coolant system. This method assumes you've already checked the coolant temperature, above, and scaled the energy absorbed into the coolant based on surface area.
 * @param rfAbsorbed RF to transfer into the coolant system.
 * @return RF remaining after absorption.
 */
public float onAbsorbHeat(float rfAbsorbed){
  if (getFluidAmount(COLD) <= 0 || rfAbsorbed <= 0) {
    return rfAbsorbed;
  }
  Fluid coolantType=getCoolantType();
  int coolantAmt=getFluidAmount(COLD);
  int vaporAmt=getFluidAmount(HOT);
  float heatOfVaporization=getHeatOfVaporization(coolantType);
  int mbVaporized=Math.min(coolantAmt,(int)(rfAbsorbed / heatOfVaporization));
  mbVaporized=Math.min(mbVaporized,getRemainingSpaceForFluid(HOT));
  if (mbVaporized < 1) {
    return rfAbsorbed;
  }
  Fluid newVaporType=getVaporizedCoolantFluid(coolantType);
  if (newVaporType == null) {
    BRLog.warning(""String_Node_Str"",coolantType.getName());
    return rfAbsorbed;
  }
  Fluid existingVaporType=getVaporType();
  if (existingVaporType != null && getVaporType().getID() != existingVaporType.getID()) {
    return rfAbsorbed;
  }
  fluidVaporizedLastTick=mbVaporized;
  this.drainCoolant(mbVaporized);
  if (existingVaporType != null) {
    addFluidToStack(HOT,mbVaporized);
  }
 else {
    fill(HOT,new FluidStack(newVaporType,mbVaporized),true);
  }
  float energyConsumed=(float)mbVaporized * heatOfVaporization;
  return Math.max(0f,rfAbsorbed - energyConsumed);
}","/** 
 * Attempt to transfer some heat (in RF) into the coolant system. This method assumes you've already checked the coolant temperature, above, and scaled the energy absorbed into the coolant based on surface area.
 * @param rfAbsorbed RF to transfer into the coolant system.
 * @return RF remaining after absorption.
 */
public float onAbsorbHeat(float rfAbsorbed){
  if (getFluidAmount(COLD) <= 0 || rfAbsorbed <= 0) {
    return rfAbsorbed;
  }
  Fluid coolantType=getCoolantType();
  int coolantAmt=getFluidAmount(COLD);
  float heatOfVaporization=getHeatOfVaporization(coolantType);
  int mbVaporized=Math.min(coolantAmt,(int)(rfAbsorbed / heatOfVaporization));
  mbVaporized=Math.min(mbVaporized,getRemainingSpaceForFluid(HOT));
  if (mbVaporized < 1) {
    return rfAbsorbed;
  }
  Fluid newVaporType=getVaporizedCoolantFluid(coolantType);
  if (newVaporType == null) {
    BRLog.warning(""String_Node_Str"",coolantType.getName());
    return rfAbsorbed;
  }
  Fluid existingVaporType=getVaporType();
  if (existingVaporType != null && getVaporType().getID() != existingVaporType.getID()) {
    return rfAbsorbed;
  }
  fluidVaporizedLastTick=mbVaporized;
  this.drainCoolant(mbVaporized);
  if (existingVaporType != null) {
    addFluidToStack(HOT,mbVaporized);
  }
 else {
    fill(HOT,new FluidStack(newVaporType,mbVaporized),true);
  }
  float energyConsumed=(float)mbVaporized * heatOfVaporization;
  return Math.max(0f,rfAbsorbed - energyConsumed);
}",0.987846049966239
161379,"public FluidStack drain(int idx,int maxDrain,boolean doDrain){
  if (maxDrain <= 0 || idx < 0 || idx >= fluids.length) {
    return null;
  }
  if (getFluidType(idx) == null) {
    return null;
  }
  FluidStack drained=new FluidStack(getFluidType(idx),0);
  if (!doDrain) {
    drained.amount=Math.max(getFluidAmount(idx),maxDrain);
  }
 else {
    drained.amount=drainFluidFromStack(idx,maxDrain);
  }
  return drained;
}","public FluidStack drain(int idx,int maxDrain,boolean doDrain){
  if (maxDrain <= 0 || idx < 0 || idx >= fluids.length) {
    return null;
  }
  if (getFluidType(idx) == null) {
    return null;
  }
  FluidStack drained=new FluidStack(getFluidType(idx),0);
  if (!doDrain) {
    drained.amount=Math.min(getFluidAmount(idx),maxDrain);
  }
 else {
    drained.amount=drainFluidFromStack(idx,maxDrain);
  }
  return drained;
}",0.995260663507109
161380,"@Override public int fill(ForgeDirection from,FluidStack resource,boolean doFill){
  if (!isConnected() || from != getOutwardsDir()) {
    return 0;
  }
  if (!inlet) {
    return 0;
  }
  CoolantContainer cc=getReactorController().getCoolantContainer();
  return cc.fill(getConnectedTank(),resource,doFill);
}","@Override public int fill(ForgeDirection from,FluidStack resource,boolean doFill){
  if (!isConnected() || !inlet || from != getOutwardsDir()) {
    return 0;
  }
  CoolantContainer cc=getReactorController().getCoolantContainer();
  return cc.fill(getConnectedTank(),resource,doFill);
}",0.5369127516778524
161381,"@Override protected boolean updateServer(){
  energyGeneratedLastTick=0f;
  int steamIn=0;
  float fluidEnergyDensity=0.001f;
  if (isActive()) {
    fluidEnergyDensity=0.001f;
    steamIn=Math.min(maxIntakeRate,tanks[TANK_INPUT].getFluidAmount());
    if (ventStatus == VentStatus.DoNotVent) {
      int availableSpace=tanks[TANK_OUTPUT].getCapacity() - tanks[TANK_OUTPUT].getFluidAmount();
      steamIn=Math.max(steamIn,availableSpace);
    }
  }
  if (steamIn > 0 || rotorSpeed > 0) {
    float inductionTorque=(float)(Math.pow(rotorSpeed * 0.1f,1.5) * inductorDragCoefficient * coilSize);
    float aerodynamicDragTorque=(float)Math.pow(rotorSpeed,2) * fluidEnergyDensity * bladeDragCoefficient* bladeSurfaceArea / 2f;
    float frictionalDragTorque=rotorDragCoefficient * rotorMass;
    float liftTorque=2 * (float)Math.pow(steamIn,2) * fluidEnergyDensity* bladeLiftCoefficient* bladeSurfaceArea;
    float deltaV=(2 * (liftTorque + -1f * inductionTorque + -1f * aerodynamicDragTorque + -1f * frictionalDragTorque)) / rotorMass;
    float energyToGenerate=(float)Math.pow(inductionTorque,inductionEnergyCoefficient + inductionEnergyExponentBonus) * inductionEnergyBonus * BigReactors.powerProductionMultiplier;
    generateEnergy(energyToGenerate);
    rotorSpeed+=deltaV;
    if (rotorSpeed < 0f) {
      rotorSpeed=0f;
    }
    if (steamIn > 0) {
      Fluid effluent=FluidRegistry.WATER;
      FluidStack effluentStack=new FluidStack(effluent,steamIn);
      fill(TANK_OUTPUT,effluentStack,true);
      drain(TANK_INPUT,steamIn,true);
    }
  }
  int energyAvailable=(int)getEnergyStored();
  int energyRemaining=energyAvailable;
  if (energyStored > 0 && attachedPowerTaps.size() > 0) {
    int splitEnergy=energyRemaining / attachedPowerTaps.size();
    for (    TileEntityTurbinePowerTap powerTap : attachedPowerTaps) {
      if (energyRemaining <= 0) {
        break;
      }
      if (powerTap == null || !powerTap.isConnected()) {
        continue;
      }
      energyRemaining-=splitEnergy - powerTap.onProvidePower(splitEnergy);
    }
    if (energyRemaining > 0) {
      for (      TileEntityTurbinePowerTap powerTap : attachedPowerTaps) {
        if (energyRemaining <= 0) {
          break;
        }
        if (powerTap == null || !powerTap.isConnected()) {
          continue;
        }
        energyRemaining=powerTap.onProvidePower(energyRemaining);
      }
    }
  }
  if (energyAvailable != energyRemaining) {
    reduceStoredEnergy((energyAvailable - energyRemaining));
  }
  for (  ITickableMultiblockPart part : attachedTickables) {
    part.onMultiblockServerTick();
  }
  ticksSinceLastUpdate++;
  if (ticksSinceLastUpdate >= ticksBetweenUpdates) {
    sendTickUpdate();
    ticksSinceLastUpdate=0;
  }
  return false;
}","@Override protected boolean updateServer(){
  energyGeneratedLastTick=0f;
  int steamIn=0;
  float fluidEnergyDensity=0.001f;
  if (isActive()) {
    fluidEnergyDensity=0.001f;
    steamIn=Math.min(maxIntakeRate,tanks[TANK_INPUT].getFluidAmount());
    if (ventStatus == VentStatus.DoNotVent) {
      int availableSpace=tanks[TANK_OUTPUT].getCapacity() - tanks[TANK_OUTPUT].getFluidAmount();
      steamIn=Math.max(steamIn,availableSpace);
    }
  }
  if (steamIn > 0 || rotorSpeed > 0) {
    float inductionTorque=(float)(Math.pow(rotorSpeed * 0.1f,1.5) * inductorDragCoefficient * coilSize);
    float aerodynamicDragTorque=(float)Math.pow(rotorSpeed,2) * fluidEnergyDensity * bladeDragCoefficient* bladeSurfaceArea / 2f;
    float frictionalDragTorque=rotorDragCoefficient * rotorMass;
    float liftTorque=2 * (float)Math.pow(steamIn,2) * fluidEnergyDensity* bladeLiftCoefficient* bladeSurfaceArea;
    float deltaV=(2 * (liftTorque + -1f * inductionTorque + -1f * aerodynamicDragTorque + -1f * frictionalDragTorque)) / rotorMass;
    float energyToGenerate=(float)Math.pow(inductionTorque,inductionEnergyCoefficient + inductionEnergyExponentBonus) * inductionEnergyBonus * BigReactors.powerProductionMultiplier;
    generateEnergy(energyToGenerate);
    rotorSpeed+=deltaV;
    if (rotorSpeed < 0f) {
      rotorSpeed=0f;
    }
    if (steamIn > 0) {
      Fluid effluent=FluidRegistry.WATER;
      FluidStack effluentStack=new FluidStack(effluent,steamIn);
      fill(TANK_OUTPUT,effluentStack,true);
      drain(TANK_INPUT,steamIn,true);
    }
  }
  int energyAvailable=(int)getEnergyStored();
  int energyRemaining=energyAvailable;
  if (energyStored > 0 && attachedPowerTaps.size() > 0) {
    int splitEnergy=energyRemaining / attachedPowerTaps.size();
    for (    TileEntityTurbinePowerTap powerTap : attachedPowerTaps) {
      if (energyRemaining <= 0) {
        break;
      }
      if (powerTap == null || !powerTap.isConnected()) {
        continue;
      }
      energyRemaining-=splitEnergy - powerTap.onProvidePower(splitEnergy);
    }
    if (energyRemaining > 0) {
      for (      TileEntityTurbinePowerTap powerTap : attachedPowerTaps) {
        if (energyRemaining <= 0) {
          break;
        }
        if (powerTap == null || !powerTap.isConnected()) {
          continue;
        }
        energyRemaining=powerTap.onProvidePower(energyRemaining);
      }
    }
  }
  if (energyAvailable != energyRemaining) {
    reduceStoredEnergy((energyAvailable - energyRemaining));
  }
  for (  ITickableMultiblockPart part : attachedTickables) {
    part.onMultiblockServerTick();
  }
  ticksSinceLastUpdate++;
  if (ticksSinceLastUpdate >= ticksBetweenUpdates) {
    sendTickUpdate();
    ticksSinceLastUpdate=0;
  }
  return true;
}",0.9987293519695044
161382,"public void onNetworkPacket(int packetType,DataInputStream data) throws IOException {
  if (packetType == Packets.MultiblockControllerButton) {
    Class decodeAs[]={String.class,Boolean.class};
    Object[] decodedData=PacketWrapper.readPacketData(data,decodeAs);
    String buttonName=(String)decodedData[0];
    boolean newValue=(Boolean)decodedData[1];
    if (buttonName.equals(""String_Node_Str"")) {
      setActive(newValue);
    }
  }
  if (packetType == Packets.MultiblockTurbineGovernorUpdate) {
    setMaxIntakeRate(data.readInt());
  }
  if (packetType == Packets.MultiblockTurbineVentUpdate) {
    int idx=data.readInt();
    if (idx >= 0 && idx < VentStatus.values().length) {
      ventStatus=VentStatus.values()[idx];
    }
  }
  if (packetType == Packets.MultiblockTurbineFullUpdate) {
    onReceiveUpdatePacket(data);
  }
}","public void onNetworkPacket(int packetType,DataInputStream data) throws IOException {
  if (packetType == Packets.MultiblockControllerButton) {
    Class decodeAs[]={String.class,Boolean.class};
    Object[] decodedData=PacketWrapper.readPacketData(data,decodeAs);
    String buttonName=(String)decodedData[0];
    boolean newValue=(Boolean)decodedData[1];
    if (buttonName.equals(""String_Node_Str"")) {
      setActive(newValue);
      markReferenceCoordDirty();
    }
  }
  if (packetType == Packets.MultiblockTurbineGovernorUpdate) {
    setMaxIntakeRate(data.readInt());
    markReferenceCoordDirty();
  }
  if (packetType == Packets.MultiblockTurbineVentUpdate) {
    int idx=data.readInt();
    if (idx >= 0 && idx < VentStatus.values().length) {
      ventStatus=VentStatus.values()[idx];
      markReferenceCoordDirty();
    }
  }
  if (packetType == Packets.MultiblockTurbineFullUpdate) {
    onReceiveUpdatePacket(data);
  }
}",0.9454136184580754
161383,"@Override public void readFromNBT(NBTTagCompound data){
  if (data.hasKey(""String_Node_Str"")) {
    setActive(data.getBoolean(""String_Node_Str""));
  }
  if (data.hasKey(""String_Node_Str"")) {
    setHeat(data.getFloat(""String_Node_Str""));
  }
 else {
    setHeat(0.0f);
  }
  if (data.hasKey(""String_Node_Str"")) {
    setStoredEnergy(data.getFloat(""String_Node_Str""));
  }
 else {
    setStoredEnergy(0.0f);
  }
  if (data.hasKey(""String_Node_Str"")) {
    this.wasteEjection=WasteEjectionSetting.values()[data.getInteger(""String_Node_Str"")];
  }
}","@Override public void readFromNBT(NBTTagCompound data){
  if (data.hasKey(""String_Node_Str"")) {
    setActive(data.getBoolean(""String_Node_Str""));
  }
  if (data.hasKey(""String_Node_Str"")) {
    setHeat(Math.max(getHeat(),data.getFloat(""String_Node_Str"")));
  }
  if (data.hasKey(""String_Node_Str"")) {
    setStoredEnergy(Math.max(getEnergyStored(),data.getFloat(""String_Node_Str"")));
  }
  if (data.hasKey(""String_Node_Str"")) {
    this.wasteEjection=WasteEjectionSetting.values()[data.getInteger(""String_Node_Str"")];
  }
}",0.8149532710280374
161384,"public MultiblockReactor(World world){
  super(world);
  active=false;
  latentHeat=0f;
  energyGeneratedLastTick=0f;
  fuelConsumedLastTick=0;
  wasteEjection=WasteEjectionSetting.kAutomatic;
  attachedPowerTaps=new HashSet<CoordTriplet>();
  attachedTickables=new HashSet<CoordTriplet>();
  attachedControlRods=new LinkedList<CoordTriplet>();
  attachedAccessPorts=new LinkedList<CoordTriplet>();
  attachedControllers=new LinkedList<CoordTriplet>();
  updatePlayers=new HashSet<EntityPlayer>();
  ticksSinceLastUpdate=0;
}","public MultiblockReactor(World world){
  super(world);
  active=false;
  latentHeat=0f;
  energyStored=0f;
  energyGeneratedLastTick=0f;
  fuelConsumedLastTick=0;
  wasteEjection=WasteEjectionSetting.kAutomatic;
  attachedPowerTaps=new HashSet<CoordTriplet>();
  attachedTickables=new HashSet<CoordTriplet>();
  attachedControlRods=new LinkedList<CoordTriplet>();
  attachedAccessPorts=new LinkedList<CoordTriplet>();
  attachedControllers=new LinkedList<CoordTriplet>();
  updatePlayers=new HashSet<EntityPlayer>();
  ticksSinceLastUpdate=0;
}",0.9822263797942
161385,"@Override public void onContainerClosed(EntityPlayer player){
  super.onContainerClosed(player);
  part.getReactorController().stopUpdatingPlayer(player);
}","@Override public void onContainerClosed(EntityPlayer player){
  super.onContainerClosed(player);
  if (part != null && part.getReactorController() != null)   part.getReactorController().stopUpdatingPlayer(player);
}",0.8409703504043127
161386,"public void postInit(){
  BRConfig.CONFIGURATION.load();
  boolean autoAddUranium=BRConfig.CONFIGURATION.get(""String_Node_Str"",""String_Node_Str"",true,""String_Node_Str"" + ""String_Node_Str"" + ""String_Node_Str"").getBoolean(true);
  if (autoAddUranium) {
    List<ItemStack> candidates=OreDictionary.getOres(""String_Node_Str"");
    for (    ItemStack candidate : candidates) {
      BRRegistry.registerFuel(new ReactorFuel(candidate,BigReactors.defaultLiquidColorFuel));
    }
  }
  BRConfig.CONFIGURATION.save();
  ItemIngot ingotGeneric=((ItemIngot)BigReactors.ingotGeneric);
  ItemStack yelloriteOre=new ItemStack(BigReactors.blockYelloriteOre,1);
  ItemStack ingotYellorium=ingotGeneric.getItemStackForType(""String_Node_Str"");
  ItemStack ingotCyanite=ingotGeneric.getItemStackForType(""String_Node_Str"");
  ItemStack ingotGraphite=ingotGeneric.getItemStackForType(""String_Node_Str"");
  ItemStack ingotBlutonium=ingotGeneric.getItemStackForType(""String_Node_Str"");
  ItemStack dustYellorium=ingotGeneric.getItemStackForType(""String_Node_Str"");
  ItemStack dustCyanite=ingotGeneric.getItemStackForType(""String_Node_Str"");
  ItemStack dustGraphite=ingotGeneric.getItemStackForType(""String_Node_Str"");
  ItemStack dustBlutonium=ingotGeneric.getItemStackForType(""String_Node_Str"");
  ItemStack doubledYelloriumDust=dustYellorium.copy();
  doubledYelloriumDust.stackSize=2;
  if (Loader.isModLoaded(""String_Node_Str"")) {
    if (yelloriteOre != null && ingotYellorium != null) {
      CraftingHelpers.addSmelterOreToIngotsRecipe(yelloriteOre.copy(),ingotYellorium.copy());
    }
    if (yelloriteOre != null && dustYellorium != null) {
      CraftingHelpers.addPulverizerOreToDustRecipe(yelloriteOre.copy(),dustYellorium.copy());
    }
    if (ingotYellorium != null && dustYellorium != null) {
      CraftingHelpers.addPulverizerIngotToDustRecipe(ingotYellorium.copy(),dustYellorium.copy());
      CraftingHelpers.addSmelterDustToIngotsRecipe(dustYellorium.copy(),ingotYellorium.copy());
    }
    if (ingotCyanite != null && dustCyanite != null) {
      CraftingHelpers.addPulverizerIngotToDustRecipe(ingotCyanite.copy(),dustCyanite.copy());
      CraftingHelpers.addSmelterDustToIngotsRecipe(dustCyanite.copy(),ingotCyanite.copy());
    }
    if (ingotGraphite != null && dustGraphite != null) {
      CraftingHelpers.addPulverizerIngotToDustRecipe(ingotGraphite.copy(),dustGraphite.copy());
      CraftingHelpers.addSmelterDustToIngotsRecipe(dustGraphite.copy(),ingotGraphite.copy());
    }
    if (ingotBlutonium != null && dustBlutonium != null) {
      CraftingHelpers.addPulverizerIngotToDustRecipe(ingotBlutonium.copy(),dustBlutonium.copy());
      CraftingHelpers.addSmelterDustToIngotsRecipe(dustBlutonium.copy(),ingotBlutonium.copy());
    }
  }
  if (Loader.isModLoaded(""String_Node_Str"")) {
    appeng.api.IGrinderRecipeManager grinderRM=appeng.api.Util.getGrinderRecipeManage();
    if (grinderRM != null) {
      if (yelloriteOre != null && dustYellorium != null) {
        grinderRM.addRecipe(yelloriteOre.copy(),doubledYelloriumDust.copy(),4);
      }
      if (ingotYellorium != null && dustYellorium != null) {
        grinderRM.addRecipe(ingotYellorium.copy(),dustYellorium.copy(),2);
      }
      if (ingotCyanite != null && dustCyanite != null) {
        grinderRM.addRecipe(ingotCyanite.copy(),dustCyanite.copy(),2);
      }
      if (ingotGraphite != null && dustGraphite != null) {
        grinderRM.addRecipe(ingotGraphite.copy(),dustGraphite.copy(),2);
      }
      if (ingotBlutonium != null && dustBlutonium != null) {
        grinderRM.addRecipe(ingotBlutonium.copy(),dustBlutonium.copy(),2);
      }
    }
  }
  if (Loader.isModLoaded(""String_Node_Str"")) {
    if (yelloriteOre != null && dustYellorium != null) {
      addMekanismEnrichmentChamberRecipe(yelloriteOre.copy(),doubledYelloriumDust.copy());
      addMekanismCombinerRecipe(dustYellorium.copy(),yelloriteOre.copy());
    }
    if (ingotYellorium != null && dustYellorium != null) {
      addMekanismCrusherRecipe(ingotYellorium.copy(),dustYellorium.copy());
    }
    if (ingotCyanite != null && dustCyanite != null) {
      addMekanismCrusherRecipe(ingotCyanite.copy(),dustCyanite.copy());
    }
    if (ingotGraphite != null && dustGraphite != null) {
      addMekanismCrusherRecipe(ingotGraphite.copy(),dustGraphite.copy());
    }
    if (ingotBlutonium != null && dustBlutonium != null) {
      addMekanismCrusherRecipe(ingotBlutonium.copy(),dustBlutonium.copy());
    }
  }
}","public void postInit(){
  BRConfig.CONFIGURATION.load();
  boolean autoAddUranium=BRConfig.CONFIGURATION.get(""String_Node_Str"",""String_Node_Str"",true,""String_Node_Str"" + ""String_Node_Str"" + ""String_Node_Str"").getBoolean(true);
  if (autoAddUranium) {
    List<ItemStack> candidates=OreDictionary.getOres(""String_Node_Str"");
    for (    ItemStack candidate : candidates) {
      BRRegistry.registerFuel(new ReactorFuel(candidate,BigReactors.defaultLiquidColorFuel));
    }
  }
  BRConfig.CONFIGURATION.save();
  ItemIngot ingotGeneric=((ItemIngot)BigReactors.ingotGeneric);
  ItemStack yelloriteOre=new ItemStack(BigReactors.blockYelloriteOre,1);
  ItemStack ingotYellorium=ingotGeneric.getItemStackForType(""String_Node_Str"");
  ItemStack ingotCyanite=ingotGeneric.getItemStackForType(""String_Node_Str"");
  ItemStack ingotGraphite=ingotGeneric.getItemStackForType(""String_Node_Str"");
  ItemStack ingotBlutonium=ingotGeneric.getItemStackForType(""String_Node_Str"");
  ItemStack dustYellorium=ingotGeneric.getItemStackForType(""String_Node_Str"");
  ItemStack dustCyanite=ingotGeneric.getItemStackForType(""String_Node_Str"");
  ItemStack dustGraphite=ingotGeneric.getItemStackForType(""String_Node_Str"");
  ItemStack dustBlutonium=ingotGeneric.getItemStackForType(""String_Node_Str"");
  ItemStack doubledYelloriumDust=null;
  if (dustYellorium != null) {
    doubledYelloriumDust=dustYellorium.copy();
    doubledYelloriumDust.stackSize=2;
  }
  if (Loader.isModLoaded(""String_Node_Str"")) {
    if (yelloriteOre != null && ingotYellorium != null) {
      CraftingHelpers.addSmelterOreToIngotsRecipe(yelloriteOre.copy(),ingotYellorium.copy());
    }
    if (yelloriteOre != null && dustYellorium != null) {
      CraftingHelpers.addPulverizerOreToDustRecipe(yelloriteOre.copy(),dustYellorium.copy());
    }
    if (ingotYellorium != null && dustYellorium != null) {
      CraftingHelpers.addPulverizerIngotToDustRecipe(ingotYellorium.copy(),dustYellorium.copy());
      CraftingHelpers.addSmelterDustToIngotsRecipe(dustYellorium.copy(),ingotYellorium.copy());
    }
    if (ingotCyanite != null && dustCyanite != null) {
      CraftingHelpers.addPulverizerIngotToDustRecipe(ingotCyanite.copy(),dustCyanite.copy());
      CraftingHelpers.addSmelterDustToIngotsRecipe(dustCyanite.copy(),ingotCyanite.copy());
    }
    if (ingotGraphite != null && dustGraphite != null) {
      CraftingHelpers.addPulverizerIngotToDustRecipe(ingotGraphite.copy(),dustGraphite.copy());
      CraftingHelpers.addSmelterDustToIngotsRecipe(dustGraphite.copy(),ingotGraphite.copy());
    }
    if (ingotBlutonium != null && dustBlutonium != null) {
      CraftingHelpers.addPulverizerIngotToDustRecipe(ingotBlutonium.copy(),dustBlutonium.copy());
      CraftingHelpers.addSmelterDustToIngotsRecipe(dustBlutonium.copy(),ingotBlutonium.copy());
    }
  }
  if (Loader.isModLoaded(""String_Node_Str"")) {
    appeng.api.IGrinderRecipeManager grinderRM=appeng.api.Util.getGrinderRecipeManage();
    if (grinderRM != null) {
      if (yelloriteOre != null && dustYellorium != null) {
        grinderRM.addRecipe(yelloriteOre.copy(),doubledYelloriumDust.copy(),4);
      }
      if (ingotYellorium != null && dustYellorium != null) {
        grinderRM.addRecipe(ingotYellorium.copy(),dustYellorium.copy(),2);
      }
      if (ingotCyanite != null && dustCyanite != null) {
        grinderRM.addRecipe(ingotCyanite.copy(),dustCyanite.copy(),2);
      }
      if (ingotGraphite != null && dustGraphite != null) {
        grinderRM.addRecipe(ingotGraphite.copy(),dustGraphite.copy(),2);
      }
      if (ingotBlutonium != null && dustBlutonium != null) {
        grinderRM.addRecipe(ingotBlutonium.copy(),dustBlutonium.copy(),2);
      }
    }
  }
  if (Loader.isModLoaded(""String_Node_Str"")) {
    if (yelloriteOre != null && doubledYelloriumDust != null) {
      addMekanismEnrichmentChamberRecipe(yelloriteOre.copy(),doubledYelloriumDust.copy());
      addMekanismCombinerRecipe(doubledYelloriumDust.copy(),yelloriteOre.copy());
    }
    if (ingotYellorium != null && dustYellorium != null) {
      addMekanismCrusherRecipe(ingotYellorium.copy(),dustYellorium.copy());
    }
    if (ingotCyanite != null && dustCyanite != null) {
      addMekanismCrusherRecipe(ingotCyanite.copy(),dustCyanite.copy());
    }
    if (ingotGraphite != null && dustGraphite != null) {
      addMekanismCrusherRecipe(ingotGraphite.copy(),dustGraphite.copy());
    }
    if (ingotBlutonium != null && dustBlutonium != null) {
      addMekanismCrusherRecipe(ingotBlutonium.copy(),dustBlutonium.copy());
    }
  }
}",0.9895833333333334
161387,"@Override public boolean isStackValidForSlot(int slot,ItemStack itemstack){
  if (itemstack == null) {
    return true;
  }
  if (itemstack.itemID == BigReactors.ingotGeneric.itemID) {
    if (ItemIngot.isFuel(itemstack.getItemDamage()) && slot == SLOT_OUTLET) {
      return true;
    }
 else     if (ItemIngot.isWaste(itemstack.getItemDamage()) && slot == SLOT_INLET) {
      return true;
    }
  }
  return false;
}","@Override public boolean isStackValidForSlot(int slot,ItemStack itemstack){
  if (itemstack == null) {
    return true;
  }
  if (slot == SLOT_OUTLET) {
    return BRRegistry.getDataForFuel(itemstack) != null;
  }
 else   if (slot == SLOT_INLET) {
    return BRRegistry.getDataForWaste(itemstack) != null;
  }
  return false;
}",0.5342281879194631
161388,"@Override public boolean isStackValidForSlot(int slot,ItemStack itemstack){
  if (itemstack == null) {
    return true;
  }
  if (itemstack.itemID == BigReactors.ingotGeneric.itemID) {
    if (ItemIngot.isFuel(itemstack.getItemDamage()) && slot == SLOT_INLET) {
      return true;
    }
 else     if (ItemIngot.isWaste(itemstack.getItemDamage()) && slot == SLOT_OUTLET) {
      return true;
    }
  }
  return false;
}","@Override public boolean isStackValidForSlot(int slot,ItemStack itemstack){
  if (itemstack == null) {
    return true;
  }
  if (slot == SLOT_INLET) {
    return BRRegistry.getDataForFuel(itemstack) != null;
  }
 else   if (slot == SLOT_OUTLET) {
    return BRRegistry.getDataForWaste(itemstack) != null;
  }
  return false;
}",0.5342281879194631
161389,"@Override public boolean update(){
  if (Double.isNaN(this.getHeat())) {
    this.setHeat(0.0);
  }
  if (Double.isNaN(this.storedEnergy)) {
    this.storedEnergy=0.0;
  }
  double oldHeat=this.getHeat();
  double oldEnergy=this.storedEnergy;
  energyGeneratedLastTick=0.0;
  int wasteAmt=0;
  int freeFuelSpace=0;
  double newHeat=0.0;
  IRadiationPulse radiationResult;
  TileEntityReactorControlRod controlRod;
  for (  CoordTriplet coord : attachedControlRods) {
    controlRod=(TileEntityReactorControlRod)worldObj.getBlockTileEntity(coord.x,coord.y,coord.z);
    if (controlRod == null) {
      continue;
    }
    if (this.isActive()) {
      radiationResult=controlRod.radiate();
      this.addStoredEnergy(radiationResult.getPowerProduced());
      this.addLatentHeat(radiationResult.getHeatProduced());
    }
    HeatPulse heatPulse=controlRod.onRadiateHeat(getHeat());
    if (heatPulse != null) {
      this.addStoredEnergy(heatPulse.powerProduced);
      this.addLatentHeat(heatPulse.heatChange);
    }
    wasteAmt+=controlRod.getWasteAmount();
    freeFuelSpace+=controlRod.getSizeOfFuelTank() - controlRod.getTotalContainedAmount();
  }
  if (freeFuelSpace >= 1000 || wasteAmt >= 1000) {
    if (this.wasteEjection == WasteEjectionSetting.kAutomaticOnlyIfCanReplace) {
      int fuelIngotsAvailable=0;
      for (      CoordTriplet coord : attachedAccessPorts) {
        TileEntityReactorAccessPort port=(TileEntityReactorAccessPort)worldObj.getBlockTileEntity(coord.x,coord.y,coord.z);
        if (port == null) {
          continue;
        }
        ItemStack fuelStack=port.getStackInSlot(TileEntityReactorAccessPort.SLOT_INLET);
        if (fuelStack != null) {
          fuelIngotsAvailable+=fuelStack.stackSize;
        }
      }
      if (wasteAmt / 1000 > fuelIngotsAvailable) {
        wasteAmt=fuelIngotsAvailable * 1000;
      }
      freeFuelSpace+=wasteAmt;
    }
 else     if (this.wasteEjection == WasteEjectionSetting.kManual) {
      wasteAmt=0;
    }
 else {
      freeFuelSpace+=wasteAmt;
    }
    if (freeFuelSpace >= 1000 || wasteAmt >= 1000) {
      tryEjectWaste(freeFuelSpace,wasteAmt);
    }
  }
  energyGeneratedLastTick=getStoredEnergy() - oldEnergy;
  if (latentHeat > 0.0) {
    double lossRate=0.01 + ((double)this.latentHeat * 0.000001);
    double latentHeatLoss=Math.max(0.02,this.latentHeat * 0.01);
    this.addLatentHeat(-1 * latentHeatLoss);
    this.addStoredEnergy(latentHeatLoss * BigReactors.powerPerHeat);
    energyGeneratedLastTick+=latentHeatLoss * BigReactors.powerPerHeat;
  }
  if (latentHeat < 0.0) {
    setHeat(0.0);
  }
  int energyAvailable=(int)getStoredEnergy();
  int energyRemaining=energyAvailable;
  if (activePowerTaps.size() > 0 && energyRemaining > 0) {
    for (    CoordTriplet coord : activePowerTaps) {
      if (energyRemaining <= 0) {
        break;
      }
      TileEntityReactorPowerTap tap=(TileEntityReactorPowerTap)this.worldObj.getBlockTileEntity(coord.x,coord.y,coord.z);
      if (tap == null) {
        continue;
      }
      energyRemaining=tap.onProvidePower(energyRemaining);
    }
  }
  if (energyAvailable != energyRemaining) {
    reduceStoredEnergy((double)(energyAvailable - energyRemaining));
  }
  ticksSinceLastUpdate++;
  if (ticksSinceLastUpdate >= ticksBetweenUpdates) {
    ticksSinceLastUpdate=0;
    sendTickUpdate();
  }
  return (oldHeat != this.getHeat() || oldEnergy != this.storedEnergy);
}","@Override public boolean update(){
  if (Double.isNaN(this.getHeat())) {
    this.setHeat(0.0);
  }
  if (Double.isNaN(this.storedEnergy)) {
    this.storedEnergy=0.0;
  }
  double oldHeat=this.getHeat();
  double oldEnergy=this.storedEnergy;
  energyGeneratedLastTick=0.0;
  int wasteAmt=0;
  int freeFuelSpace=0;
  double newHeat=0.0;
  IRadiationPulse radiationResult;
  TileEntityReactorControlRod controlRod;
  for (  CoordTriplet coord : attachedControlRods) {
    controlRod=(TileEntityReactorControlRod)worldObj.getBlockTileEntity(coord.x,coord.y,coord.z);
    if (controlRod == null) {
      continue;
    }
    if (this.isActive()) {
      radiationResult=controlRod.radiate();
      this.addStoredEnergy(radiationResult.getPowerProduced());
      this.addLatentHeat(radiationResult.getHeatProduced());
    }
    HeatPulse heatPulse=controlRod.onRadiateHeat(getHeat());
    if (heatPulse != null) {
      this.addStoredEnergy(heatPulse.powerProduced);
      this.addLatentHeat(heatPulse.heatChange);
    }
    wasteAmt+=controlRod.getWasteAmount();
    freeFuelSpace+=controlRod.getSizeOfFuelTank() - controlRod.getTotalContainedAmount();
  }
  if (freeFuelSpace >= 1000 || wasteAmt >= 1000) {
    if (this.wasteEjection == WasteEjectionSetting.kAutomaticOnlyIfCanReplace) {
      int fuelIngotsAvailable=0;
      for (      CoordTriplet coord : attachedAccessPorts) {
        TileEntityReactorAccessPort port=(TileEntityReactorAccessPort)worldObj.getBlockTileEntity(coord.x,coord.y,coord.z);
        if (port == null) {
          continue;
        }
        ItemStack fuelStack=port.getStackInSlot(TileEntityReactorAccessPort.SLOT_INLET);
        if (fuelStack != null) {
          fuelIngotsAvailable+=fuelStack.stackSize;
        }
      }
      if (wasteAmt / 1000 > fuelIngotsAvailable) {
        wasteAmt=fuelIngotsAvailable * 1000;
      }
      freeFuelSpace+=wasteAmt;
    }
 else     if (this.wasteEjection == WasteEjectionSetting.kManual) {
      wasteAmt=0;
    }
 else {
      freeFuelSpace+=wasteAmt;
    }
    if (freeFuelSpace >= 1000 || wasteAmt >= 1000) {
      tryEjectWaste(freeFuelSpace,wasteAmt);
    }
  }
  energyGeneratedLastTick=getStoredEnergy() - oldEnergy;
  if (latentHeat > 0.0) {
    double lossRate=0.01 + ((double)this.latentHeat * 0.000001);
    double latentHeatLoss=Math.max(0.02,this.latentHeat * 0.01);
    this.addLatentHeat(-1 * latentHeatLoss);
    this.addStoredEnergy(latentHeatLoss * BigReactors.powerPerHeat);
    energyGeneratedLastTick+=latentHeatLoss * BigReactors.powerPerHeat;
  }
  if (latentHeat < 0.0) {
    setHeat(0.0);
  }
  int energyAvailable=(int)getStoredEnergy();
  int energyRemaining=energyAvailable;
  if (attachedPowerTaps.size() > 0 && energyRemaining > 0) {
    for (    CoordTriplet coord : attachedPowerTaps) {
      if (energyRemaining <= 0) {
        break;
      }
      TileEntityReactorPowerTap tap=(TileEntityReactorPowerTap)this.worldObj.getBlockTileEntity(coord.x,coord.y,coord.z);
      if (tap == null) {
        continue;
      }
      energyRemaining=tap.onProvidePower(energyRemaining);
    }
  }
  if (energyAvailable != energyRemaining) {
    reduceStoredEnergy((double)(energyAvailable - energyRemaining));
  }
  ticksSinceLastUpdate++;
  if (ticksSinceLastUpdate >= ticksBetweenUpdates) {
    ticksSinceLastUpdate=0;
    sendTickUpdate();
  }
  return (oldHeat != this.getHeat() || oldEnergy != this.storedEnergy);
}",0.9964819700967458
161390,"@Override protected void onMachineMerge(MultiblockControllerBase otherMachine){
  this.activePowerTaps.clear();
  this.attachedAccessPorts.clear();
  this.attachedControllers.clear();
  this.attachedControlRods.clear();
}","@Override protected void onMachineMerge(MultiblockControllerBase otherMachine){
  this.attachedPowerTaps.clear();
  this.attachedAccessPorts.clear();
  this.attachedControllers.clear();
  this.attachedControlRods.clear();
}",0.972972972972973
161391,"@Override protected void onBlockRemoved(IMultiblockPart part){
  CoordTriplet coord=part.getWorldLocation();
  if (part instanceof TileEntityReactorAccessPort) {
    if (attachedAccessPorts.contains(coord)) {
      attachedAccessPorts.remove(coord);
    }
  }
 else   if (part instanceof TileEntityReactorControlRod) {
    attachedControlRods.remove(coord);
    if (attachedControlRods.contains(coord)) {
      attachedControlRods.remove(coord);
    }
  }
 else   if (part instanceof TileEntityReactorPart) {
    int metadata=((TileEntityReactorPart)part).getBlockMetadata();
    if (BlockReactorPart.isController(metadata) && attachedControllers.contains(coord)) {
      attachedControllers.remove(coord);
    }
  }
}","@Override protected void onBlockRemoved(IMultiblockPart part){
  CoordTriplet coord=part.getWorldLocation();
  if (part instanceof TileEntityReactorAccessPort) {
    if (attachedAccessPorts.contains(coord)) {
      attachedAccessPorts.remove(coord);
    }
  }
 else   if (part instanceof TileEntityReactorControlRod) {
    attachedControlRods.remove(coord);
    if (attachedControlRods.contains(coord)) {
      attachedControlRods.remove(coord);
    }
  }
 else   if (part instanceof TileEntityReactorPowerTap) {
    attachedPowerTaps.remove(coord);
  }
 else   if (part instanceof TileEntityReactorPart) {
    int metadata=((TileEntityReactorPart)part).getBlockMetadata();
    if (BlockReactorPart.isController(metadata) && attachedControllers.contains(coord)) {
      attachedControllers.remove(coord);
    }
  }
}",0.9361147327249022
161392,"@Override protected void onBlockAdded(IMultiblockPart part){
  CoordTriplet coord=part.getWorldLocation();
  if (part instanceof TileEntityReactorAccessPort) {
    if (!attachedAccessPorts.contains(coord)) {
      attachedAccessPorts.add(coord);
    }
  }
 else   if (part instanceof TileEntityReactorControlRod) {
    if (!attachedControlRods.contains(coord)) {
      attachedControlRods.add(coord);
    }
  }
 else   if (part instanceof TileEntityReactorPart) {
    int metadata=((TileEntityReactorPart)part).getBlockMetadata();
    if (BlockReactorPart.isController(metadata) && !attachedControllers.contains(coord)) {
      attachedControllers.add(coord);
    }
  }
}","@Override protected void onBlockAdded(IMultiblockPart part){
  CoordTriplet coord=part.getWorldLocation();
  if (part instanceof TileEntityReactorAccessPort) {
    if (!attachedAccessPorts.contains(coord)) {
      attachedAccessPorts.add(coord);
    }
  }
 else   if (part instanceof TileEntityReactorControlRod) {
    if (!attachedControlRods.contains(coord)) {
      attachedControlRods.add(coord);
    }
  }
 else   if (part instanceof TileEntityReactorPowerTap) {
    attachedPowerTaps.add(coord);
  }
 else   if (part instanceof TileEntityReactorPart) {
    int metadata=((TileEntityReactorPart)part).getBlockMetadata();
    if (BlockReactorPart.isController(metadata) && !attachedControllers.contains(coord)) {
      attachedControllers.add(coord);
    }
  }
}",0.9338900487125956
161393,"public MultiblockReactor(World world){
  super(world);
  active=false;
  latentHeat=0.0;
  storedEnergy=0;
  energyGeneratedLastTick=0.0;
  wasteEjection=WasteEjectionSetting.kAutomatic;
  activePowerTaps=new LinkedList<CoordTriplet>();
  attachedControlRods=new LinkedList<CoordTriplet>();
  attachedAccessPorts=new LinkedList<CoordTriplet>();
  attachedControllers=new LinkedList<CoordTriplet>();
  updatePlayers=new HashSet<EntityPlayer>();
  ticksSinceLastUpdate=0;
}","public MultiblockReactor(World world){
  super(world);
  active=false;
  latentHeat=0.0;
  storedEnergy=0;
  energyGeneratedLastTick=0.0;
  wasteEjection=WasteEjectionSetting.kAutomatic;
  attachedPowerTaps=new HashSet<CoordTriplet>();
  attachedControlRods=new LinkedList<CoordTriplet>();
  attachedAccessPorts=new LinkedList<CoordTriplet>();
  attachedControllers=new LinkedList<CoordTriplet>();
  updatePlayers=new HashSet<EntityPlayer>();
  ticksSinceLastUpdate=0;
}",0.971307120085016
161394,"protected void checkForConnections(World world,int x,int y,int z){
  CoordTriplet[] blocksToCheck=new CoordTriplet[]{new CoordTriplet(x + 1,y,z),new CoordTriplet(x - 1,y,z),new CoordTriplet(x,y + 1,z),new CoordTriplet(x,y - 1,z),new CoordTriplet(x,y,z + 1),new CoordTriplet(x,y,z - 1)};
  boolean wasConnected=powerConnections.size() > 0;
  for (  CoordTriplet coord : blocksToCheck) {
    TileEntity te=world.getBlockTileEntity(coord.x,coord.y,coord.z);
    boolean shouldAdd=false;
    if (te == null || te instanceof TileEntityReactorPowerTap) {
      shouldAdd=false;
    }
 else     if (te instanceof IPowerReceptor) {
      shouldAdd=true;
    }
 else     if (te instanceof IConnector) {
      IConnector connector=(IConnector)te;
      ForgeDirection directionFromThereToHere=coord.getOppositeDirectionFromSourceCoords(this.xCoord,this.yCoord,this.zCoord);
      if (connector.canConnect(directionFromThereToHere)) {
        shouldAdd=true;
      }
    }
    if (shouldAdd && !powerConnections.contains(coord)) {
      powerConnections.add(coord);
    }
 else     if (!shouldAdd && powerConnections.contains(coord)) {
      powerConnections.remove(coord);
    }
  }
  if (wasConnected && powerConnections.size() == 0) {
    world.setBlockMetadataWithNotify(x,y,z,BlockReactorPart.POWERTAP_METADATA_BASE,2);
  }
 else   if (!wasConnected && powerConnections.size() > 0) {
    world.setBlockMetadataWithNotify(x,y,z,BlockReactorPart.POWERTAP_METADATA_BASE + 1,2);
  }
  if (this.isConnected()) {
    getReactorController().onPowerTapConnectionChanged(x,y,z,powerConnections.size());
  }
}","protected void checkForConnections(World world,int x,int y,int z){
  boolean wasConnected=isConnected;
  if (out == ForgeDirection.UNKNOWN) {
    wasConnected=false;
    isConnected=false;
  }
 else {
    TileEntity te=world.getBlockTileEntity(x + out.offsetX,y + out.offsetY,z + out.offsetZ);
    if (te == null || te instanceof TileEntityReactorPowerTap) {
      isConnected=false;
    }
 else     if (te instanceof IPowerReceptor) {
      isConnected=true;
    }
 else     if (te instanceof IConnector) {
      IConnector connector=(IConnector)te;
      if (connector.canConnect(out.getOpposite())) {
        isConnected=true;
      }
 else {
        isConnected=false;
      }
    }
  }
  if (wasConnected != isConnected) {
    if (isConnected) {
      world.setBlockMetadataWithNotify(x,y,z,BlockReactorPart.POWERTAP_METADATA_BASE + 1,2);
    }
 else {
      world.setBlockMetadataWithNotify(x,y,z,BlockReactorPart.POWERTAP_METADATA_BASE,2);
    }
  }
}",0.3590748725989808
161395,"public void onMachineBroken(){
  checkForConnections(this.worldObj,this.xCoord,this.yCoord,this.zCoord);
}","public void onMachineBroken(){
  checkForConnections(this.worldObj,xCoord,yCoord,zCoord);
}",0.9238578680203046
161396,"public TileEntityReactorPowerTap(){
  super();
  powerConnections=new HashSet<CoordTriplet>();
  activeConductors=new HashSet<IConductor>();
  powerProvider=new PowerProviderBeef();
}","public TileEntityReactorPowerTap(){
  super();
  isConnected=false;
  powerProvider=new PowerProviderBeef();
  out=ForgeDirection.UNKNOWN;
}",0.631578947368421
161397,"@Override public void onAttached(MultiblockControllerBase newController){
  super.onAttached(newController);
  if (isConnected()) {
    checkForConnections(this.worldObj,xCoord,yCoord,zCoord);
  }
}","@Override public void onAttached(MultiblockControllerBase newController){
  super.onAttached(newController);
  checkForConnections(this.worldObj,xCoord,yCoord,zCoord);
}",0.9209809264305178
161398,"public int onProvidePower(int units){
  ArrayList<CoordTriplet> deadCoords=null;
  for (  CoordTriplet outputCoord : powerConnections) {
    TileEntity te=this.worldObj.getBlockTileEntity(outputCoord.x,outputCoord.y,outputCoord.z);
    if (te instanceof IPowerReceptor) {
      int mjAvailable=(int)Math.floor((float)units / bcPowerFactor);
      IPowerReceptor ipr=(IPowerReceptor)te;
      IPowerProvider ipp=ipr.getPowerProvider();
      ForgeDirection approachDirection=outputCoord.getOppositeDirectionFromSourceCoords(this.xCoord,this.yCoord,this.zCoord);
      if (ipp != null && ipp.preConditions(ipr) && ipp.getMinEnergyReceived() <= mjAvailable) {
        int energyUsed=Math.min(Math.min(ipp.getMaxEnergyReceived(),mjAvailable),ipp.getMaxEnergyStored() - (int)Math.floor(ipp.getEnergyStored()));
        ipp.receiveEnergy(energyUsed,approachDirection);
        units-=(int)((float)energyUsed * bcPowerFactor);
      }
    }
 else     if (te instanceof IConnector) {
      ForgeDirection approachDirection=outputCoord.getDirectionFromSourceCoords(this.xCoord,this.yCoord,this.zCoord);
      IElectricityNetwork network=ElectricityNetworkHelper.getNetworkFromTileEntity(te,approachDirection);
      if (network != null) {
        double wattsAvailable=(double)units / (double)uePowerFactor;
        double wattsWanted=network.getRequest().getWatts();
        if (wattsWanted > 0) {
          if (wattsWanted > wattsAvailable) {
            wattsWanted=wattsAvailable;
          }
          network.startProducing(this,wattsWanted / getVoltage(),getVoltage());
          units-=(int)Math.ceil(wattsWanted * uePowerFactor);
        }
 else {
          network.stopProducing(this);
        }
      }
    }
 else {
      if (deadCoords == null) {
        deadCoords=new ArrayList<CoordTriplet>();
      }
      deadCoords.add(outputCoord);
    }
  }
  if (deadCoords != null && deadCoords.size() > 0) {
    powerConnections.removeAll(deadCoords);
    if (powerConnections.size() <= 0) {
      worldObj.setBlockMetadataWithNotify(xCoord,yCoord,zCoord,BlockReactorPart.POWERTAP_METADATA_BASE,2);
    }
    if (this.isConnected()) {
      getReactorController().onPowerTapConnectionChanged(xCoord,yCoord,zCoord,powerConnections.size());
    }
  }
  return units;
}","/** 
 * This will be called by the Reactor Controller when this tap should be providing power.
 * @return Power units remaining after consumption.
 */
public int onProvidePower(int units){
  ArrayList<CoordTriplet> deadCoords=null;
  if (!isConnected) {
    return units;
  }
  TileEntity te=this.worldObj.getBlockTileEntity(xCoord + out.offsetX,yCoord + out.offsetY,zCoord + out.offsetZ);
  if (te instanceof IPowerReceptor) {
    int mjAvailable=(int)Math.floor((float)units / bcPowerFactor);
    IPowerReceptor ipr=(IPowerReceptor)te;
    IPowerProvider ipp=ipr.getPowerProvider();
    ForgeDirection approachDirection=out.getOpposite();
    if (ipp != null && ipp.preConditions(ipr) && ipp.getMinEnergyReceived() <= mjAvailable) {
      int energyUsed=Math.min(Math.min(ipp.getMaxEnergyReceived(),mjAvailable),ipp.getMaxEnergyStored() - (int)Math.floor(ipp.getEnergyStored()));
      ipp.receiveEnergy(energyUsed,approachDirection);
      units-=(int)((float)energyUsed * bcPowerFactor);
    }
  }
 else   if (te instanceof IConnector) {
    ForgeDirection approachDirection=out.getOpposite();
    IElectricityNetwork network=ElectricityNetworkHelper.getNetworkFromTileEntity(te,approachDirection);
    if (network != null) {
      double wattsAvailable=(double)units / (double)uePowerFactor;
      double wattsWanted=network.getRequest().getWatts();
      if (wattsWanted > 0) {
        if (wattsWanted > wattsAvailable) {
          wattsWanted=wattsAvailable;
        }
        network.startProducing(this,wattsWanted / getVoltage(),getVoltage());
        units-=(int)Math.ceil(wattsWanted * uePowerFactor);
      }
 else {
        network.stopProducing(this);
      }
    }
  }
 else {
    isConnected=false;
    worldObj.setBlockMetadataWithNotify(xCoord,yCoord,zCoord,BlockReactorPart.POWERTAP_METADATA_BASE,2);
  }
  return units;
}",0.7591916240564889
161399,"@Override public boolean canConnect(ForgeDirection direction){
  if (direction == ForgeDirection.UP || direction == ForgeDirection.DOWN) {
    return false;
  }
 else {
    return true;
  }
}","@Override public boolean canConnect(ForgeDirection direction){
  return direction == out;
}",0.624113475177305
161400,"public void onMachineAssembled(CoordTriplet machineMinCoords,CoordTriplet machineMaxCoords){
  checkForConnections(this.worldObj,this.xCoord,this.yCoord,this.zCoord);
}","public void onMachineAssembled(CoordTriplet machineMinCoords,CoordTriplet machineMaxCoords){
  MultiblockControllerBase controller=this.getMultiblockController();
  CoordTriplet minCoord=controller.getMinimumCoord();
  CoordTriplet maxCoord=controller.getMaximumCoord();
  if (this.xCoord == minCoord.x) {
    out=ForgeDirection.EAST;
  }
 else   if (this.xCoord == maxCoord.x) {
    out=ForgeDirection.WEST;
  }
 else   if (this.zCoord == minCoord.z) {
    out=ForgeDirection.NORTH;
  }
 else   if (this.zCoord == maxCoord.z) {
    out=ForgeDirection.SOUTH;
  }
 else   if (this.yCoord == minCoord.y) {
    out=ForgeDirection.DOWN;
  }
 else   if (this.yCoord == maxCoord.y) {
    out=ForgeDirection.UP;
  }
 else {
    System.err.println(""String_Node_Str"" + this.getWorldLocation().toString() + ""String_Node_Str"");
    out=ForgeDirection.UNKNOWN;
  }
  checkForConnections(this.worldObj,xCoord,yCoord,zCoord);
}",0.2830712303422756
161401,"/** 
 * Discover which direction is normal to the multiblock face.
 */
protected void checkOutwardDirection(){
  MultiblockControllerBase controller=this.getMultiblockController();
  CoordTriplet minCoord=controller.getMinimumCoord();
  CoordTriplet maxCoord=controller.getMaximumCoord();
  if (this.xCoord == minCoord.x) {
    out=ForgeDirection.WEST;
  }
 else   if (this.xCoord == maxCoord.x) {
    out=ForgeDirection.EAST;
  }
 else   if (this.zCoord == minCoord.z) {
    out=ForgeDirection.SOUTH;
  }
 else   if (this.zCoord == maxCoord.z) {
    out=ForgeDirection.NORTH;
  }
 else   if (this.yCoord == minCoord.y) {
    out=ForgeDirection.DOWN;
  }
 else   if (this.yCoord == maxCoord.y) {
    out=ForgeDirection.UP;
  }
 else {
    System.err.println(""String_Node_Str"" + this.getWorldLocation().toString() + ""String_Node_Str"");
    out=ForgeDirection.UNKNOWN;
  }
}","/** 
 * Discover which direction is normal to the multiblock face.
 */
protected void checkOutwardDirection(){
  MultiblockControllerBase controller=this.getMultiblockController();
  CoordTriplet minCoord=controller.getMinimumCoord();
  CoordTriplet maxCoord=controller.getMaximumCoord();
  if (this.xCoord == minCoord.x) {
    out=ForgeDirection.WEST;
  }
 else   if (this.xCoord == maxCoord.x) {
    out=ForgeDirection.EAST;
  }
 else   if (this.zCoord == minCoord.z) {
    out=ForgeDirection.NORTH;
  }
 else   if (this.zCoord == maxCoord.z) {
    out=ForgeDirection.SOUTH;
  }
 else   if (this.yCoord == minCoord.y) {
    out=ForgeDirection.DOWN;
  }
 else   if (this.yCoord == maxCoord.y) {
    out=ForgeDirection.UP;
  }
 else {
    System.err.println(""String_Node_Str"" + this.getWorldLocation().toString() + ""String_Node_Str"");
    out=ForgeDirection.UNKNOWN;
  }
}",0.9139908256880734
161402,"public void postInit(){
  BRConfig.CONFIGURATION.load();
  boolean autoAddUranium=BRConfig.CONFIGURATION.get(""String_Node_Str"",""String_Node_Str"",true,""String_Node_Str"" + ""String_Node_Str"" + ""String_Node_Str"").getBoolean(true);
  if (autoAddUranium) {
    List<ItemStack> candidates=OreDictionary.getOres(""String_Node_Str"");
    for (    ItemStack candidate : candidates) {
      BRRegistry.registerFuel(new ReactorFuel(candidate,BigReactors.defaultLiquidColorFuel));
    }
  }
  BRConfig.CONFIGURATION.save();
  ItemIngot ingotGeneric=((ItemIngot)BigReactors.ingotGeneric);
  ItemStack yelloriteOre=new ItemStack(BigReactors.blockYelloriteOre,1);
  ItemStack ingotYellorium=ingotGeneric.getItemStackForType(""String_Node_Str"");
  ItemStack ingotCyanite=ingotGeneric.getItemStackForType(""String_Node_Str"");
  ItemStack ingotGraphite=ingotGeneric.getItemStackForType(""String_Node_Str"");
  ItemStack ingotBlutonium=ingotGeneric.getItemStackForType(""String_Node_Str"");
  ItemStack dustYellorium=ingotGeneric.getItemStackForType(""String_Node_Str"");
  ItemStack dustCyanite=ingotGeneric.getItemStackForType(""String_Node_Str"");
  ItemStack dustGraphite=ingotGeneric.getItemStackForType(""String_Node_Str"");
  ItemStack dustBlutonium=ingotGeneric.getItemStackForType(""String_Node_Str"");
  ItemStack doubledYelloriumDust=dustYellorium.copy();
  doubledYelloriumDust.stackSize=2;
  if (Loader.isModLoaded(""String_Node_Str"")) {
    if (yelloriteOre != null && ingotYellorium != null) {
      CraftingHelpers.addSmelterOreToIngotsRecipe(yelloriteOre.copy(),ingotYellorium.copy());
    }
    if (yelloriteOre != null && dustYellorium != null) {
      CraftingHelpers.addPulverizerOreToDustRecipe(yelloriteOre.copy(),dustYellorium.copy());
    }
    if (ingotYellorium != null && dustYellorium != null) {
      CraftingHelpers.addPulverizerIngotToDustRecipe(ingotYellorium.copy(),dustYellorium.copy());
      CraftingHelpers.addSmelterDustToIngotsRecipe(dustYellorium.copy(),ingotYellorium.copy());
    }
    if (ingotCyanite != null && dustCyanite != null) {
      CraftingHelpers.addPulverizerIngotToDustRecipe(ingotCyanite.copy(),dustCyanite.copy());
      CraftingHelpers.addSmelterDustToIngotsRecipe(dustCyanite.copy(),ingotCyanite.copy());
    }
    if (ingotGraphite != null && dustGraphite != null) {
      CraftingHelpers.addPulverizerIngotToDustRecipe(ingotGraphite.copy(),dustGraphite.copy());
      CraftingHelpers.addSmelterDustToIngotsRecipe(dustGraphite.copy(),ingotGraphite.copy());
    }
    if (ingotBlutonium != null && dustBlutonium != null) {
      CraftingHelpers.addPulverizerIngotToDustRecipe(ingotBlutonium.copy(),dustBlutonium.copy());
      CraftingHelpers.addSmelterDustToIngotsRecipe(dustBlutonium.copy(),ingotBlutonium.copy());
    }
  }
  if (Loader.isModLoaded(""String_Node_Str"")) {
    appeng.api.IGrinderRecipeManager grinderRM=appeng.api.Util.getGrinderRecipeManage();
    if (grinderRM != null) {
      if (yelloriteOre != null && dustYellorium != null) {
        grinderRM.addRecipe(yelloriteOre.copy(),doubledYelloriumDust.copy(),4);
      }
      if (ingotYellorium != null && dustYellorium != null) {
        grinderRM.addRecipe(ingotYellorium.copy(),dustYellorium.copy(),2);
      }
      if (ingotCyanite != null && dustCyanite != null) {
        grinderRM.addRecipe(ingotCyanite.copy(),dustCyanite.copy(),2);
      }
      if (ingotGraphite != null && dustGraphite != null) {
        grinderRM.addRecipe(ingotGraphite.copy(),dustGraphite.copy(),2);
      }
      if (ingotBlutonium != null && dustBlutonium != null) {
        grinderRM.addRecipe(ingotBlutonium.copy(),dustBlutonium.copy(),2);
      }
    }
  }
  if (Loader.isModLoaded(""String_Node_Str"")) {
    if (yelloriteOre != null && dustYellorium != null) {
      addMekanismEnrichmentChamberRecipe(yelloriteOre.copy(),doubledYelloriumDust.copy());
      addMekanismCombinerRecipe(dustYellorium.copy(),yelloriteOre.copy());
    }
    if (ingotYellorium != null && dustYellorium != null) {
      addMekanismCrusherRecipe(ingotYellorium.copy(),dustYellorium.copy());
    }
    if (ingotCyanite != null && dustCyanite != null) {
      addMekanismCrusherRecipe(ingotCyanite.copy(),dustCyanite.copy());
    }
    if (ingotGraphite != null && dustGraphite != null) {
      addMekanismCrusherRecipe(ingotGraphite.copy(),dustGraphite.copy());
    }
    if (ingotBlutonium != null && dustBlutonium != null) {
      addMekanismCrusherRecipe(dustGraphite.copy(),dustBlutonium.copy());
    }
  }
}","public void postInit(){
  BRConfig.CONFIGURATION.load();
  boolean autoAddUranium=BRConfig.CONFIGURATION.get(""String_Node_Str"",""String_Node_Str"",true,""String_Node_Str"" + ""String_Node_Str"" + ""String_Node_Str"").getBoolean(true);
  if (autoAddUranium) {
    List<ItemStack> candidates=OreDictionary.getOres(""String_Node_Str"");
    for (    ItemStack candidate : candidates) {
      BRRegistry.registerFuel(new ReactorFuel(candidate,BigReactors.defaultLiquidColorFuel));
    }
  }
  BRConfig.CONFIGURATION.save();
  ItemIngot ingotGeneric=((ItemIngot)BigReactors.ingotGeneric);
  ItemStack yelloriteOre=new ItemStack(BigReactors.blockYelloriteOre,1);
  ItemStack ingotYellorium=ingotGeneric.getItemStackForType(""String_Node_Str"");
  ItemStack ingotCyanite=ingotGeneric.getItemStackForType(""String_Node_Str"");
  ItemStack ingotGraphite=ingotGeneric.getItemStackForType(""String_Node_Str"");
  ItemStack ingotBlutonium=ingotGeneric.getItemStackForType(""String_Node_Str"");
  ItemStack dustYellorium=ingotGeneric.getItemStackForType(""String_Node_Str"");
  ItemStack dustCyanite=ingotGeneric.getItemStackForType(""String_Node_Str"");
  ItemStack dustGraphite=ingotGeneric.getItemStackForType(""String_Node_Str"");
  ItemStack dustBlutonium=ingotGeneric.getItemStackForType(""String_Node_Str"");
  ItemStack doubledYelloriumDust=dustYellorium.copy();
  doubledYelloriumDust.stackSize=2;
  if (Loader.isModLoaded(""String_Node_Str"")) {
    if (yelloriteOre != null && ingotYellorium != null) {
      CraftingHelpers.addSmelterOreToIngotsRecipe(yelloriteOre.copy(),ingotYellorium.copy());
    }
    if (yelloriteOre != null && dustYellorium != null) {
      CraftingHelpers.addPulverizerOreToDustRecipe(yelloriteOre.copy(),dustYellorium.copy());
    }
    if (ingotYellorium != null && dustYellorium != null) {
      CraftingHelpers.addPulverizerIngotToDustRecipe(ingotYellorium.copy(),dustYellorium.copy());
      CraftingHelpers.addSmelterDustToIngotsRecipe(dustYellorium.copy(),ingotYellorium.copy());
    }
    if (ingotCyanite != null && dustCyanite != null) {
      CraftingHelpers.addPulverizerIngotToDustRecipe(ingotCyanite.copy(),dustCyanite.copy());
      CraftingHelpers.addSmelterDustToIngotsRecipe(dustCyanite.copy(),ingotCyanite.copy());
    }
    if (ingotGraphite != null && dustGraphite != null) {
      CraftingHelpers.addPulverizerIngotToDustRecipe(ingotGraphite.copy(),dustGraphite.copy());
      CraftingHelpers.addSmelterDustToIngotsRecipe(dustGraphite.copy(),ingotGraphite.copy());
    }
    if (ingotBlutonium != null && dustBlutonium != null) {
      CraftingHelpers.addPulverizerIngotToDustRecipe(ingotBlutonium.copy(),dustBlutonium.copy());
      CraftingHelpers.addSmelterDustToIngotsRecipe(dustBlutonium.copy(),ingotBlutonium.copy());
    }
  }
  if (Loader.isModLoaded(""String_Node_Str"")) {
    appeng.api.IGrinderRecipeManager grinderRM=appeng.api.Util.getGrinderRecipeManage();
    if (grinderRM != null) {
      if (yelloriteOre != null && dustYellorium != null) {
        grinderRM.addRecipe(yelloriteOre.copy(),doubledYelloriumDust.copy(),4);
      }
      if (ingotYellorium != null && dustYellorium != null) {
        grinderRM.addRecipe(ingotYellorium.copy(),dustYellorium.copy(),2);
      }
      if (ingotCyanite != null && dustCyanite != null) {
        grinderRM.addRecipe(ingotCyanite.copy(),dustCyanite.copy(),2);
      }
      if (ingotGraphite != null && dustGraphite != null) {
        grinderRM.addRecipe(ingotGraphite.copy(),dustGraphite.copy(),2);
      }
      if (ingotBlutonium != null && dustBlutonium != null) {
        grinderRM.addRecipe(ingotBlutonium.copy(),dustBlutonium.copy(),2);
      }
    }
  }
  if (Loader.isModLoaded(""String_Node_Str"")) {
    if (yelloriteOre != null && dustYellorium != null) {
      addMekanismEnrichmentChamberRecipe(yelloriteOre.copy(),doubledYelloriumDust.copy());
      addMekanismCombinerRecipe(dustYellorium.copy(),yelloriteOre.copy());
    }
    if (ingotYellorium != null && dustYellorium != null) {
      addMekanismCrusherRecipe(ingotYellorium.copy(),dustYellorium.copy());
    }
    if (ingotCyanite != null && dustCyanite != null) {
      addMekanismCrusherRecipe(ingotCyanite.copy(),dustCyanite.copy());
    }
    if (ingotGraphite != null && dustGraphite != null) {
      addMekanismCrusherRecipe(ingotGraphite.copy(),dustGraphite.copy());
    }
    if (ingotBlutonium != null && dustBlutonium != null) {
      addMekanismCrusherRecipe(ingotBlutonium.copy(),dustBlutonium.copy());
    }
  }
}",0.9970917225950784
161403,"public void postInit(){
  BRConfig.CONFIGURATION.load();
  boolean autoAddUranium=BRConfig.CONFIGURATION.get(""String_Node_Str"",""String_Node_Str"",true,""String_Node_Str"" + ""String_Node_Str"" + ""String_Node_Str"").getBoolean(true);
  if (autoAddUranium) {
    List<ItemStack> candidates=OreDictionary.getOres(""String_Node_Str"");
    for (    ItemStack candidate : candidates) {
      BRRegistry.registerFuel(new ReactorFuel(candidate,BigReactors.defaultLiquidColorFuel));
    }
  }
  BRConfig.CONFIGURATION.save();
  ItemIngot ingotGeneric=((ItemIngot)BigReactors.ingotGeneric);
  ItemStack yelloriteOre=new ItemStack(BigReactors.blockYelloriteOre,1);
  ItemStack ingotYellorium=ingotGeneric.getItemStackForType(""String_Node_Str"");
  ItemStack ingotCyanite=ingotGeneric.getItemStackForType(""String_Node_Str"");
  ItemStack ingotGraphite=ingotGeneric.getItemStackForType(""String_Node_Str"");
  ItemStack ingotBlutonium=ingotGeneric.getItemStackForType(""String_Node_Str"");
  ItemStack dustYellorium=ingotGeneric.getItemStackForType(""String_Node_Str"");
  ItemStack dustCyanite=ingotGeneric.getItemStackForType(""String_Node_Str"");
  ItemStack dustGraphite=ingotGeneric.getItemStackForType(""String_Node_Str"");
  ItemStack dustBlutonium=ingotGeneric.getItemStackForType(""String_Node_Str"");
  if (Loader.isModLoaded(""String_Node_Str"")) {
    if (yelloriteOre != null && ingotYellorium != null) {
      CraftingHelpers.addSmelterOreToIngotsRecipe(yelloriteOre,ingotYellorium);
    }
    if (yelloriteOre != null && dustYellorium != null) {
      CraftingHelpers.addPulverizerOreToDustRecipe(yelloriteOre,dustYellorium);
    }
    if (ingotYellorium != null && dustYellorium != null) {
      CraftingHelpers.addPulverizerIngotToDustRecipe(ingotYellorium,dustYellorium);
      CraftingHelpers.addSmelterDustToIngotsRecipe(dustYellorium,ingotYellorium);
    }
    if (ingotCyanite != null && dustCyanite != null) {
      CraftingHelpers.addPulverizerIngotToDustRecipe(ingotCyanite,dustCyanite);
      CraftingHelpers.addSmelterDustToIngotsRecipe(dustCyanite,ingotCyanite);
    }
    if (ingotGraphite != null && dustGraphite != null) {
      CraftingHelpers.addPulverizerIngotToDustRecipe(ingotGraphite,dustGraphite);
      CraftingHelpers.addSmelterDustToIngotsRecipe(dustGraphite,ingotGraphite);
    }
    if (ingotBlutonium != null && dustBlutonium != null) {
      CraftingHelpers.addPulverizerIngotToDustRecipe(ingotBlutonium,dustBlutonium);
      CraftingHelpers.addSmelterDustToIngotsRecipe(dustBlutonium,ingotBlutonium);
    }
  }
  if (Loader.isModLoaded(""String_Node_Str"")) {
    appeng.api.IGrinderRecipeManager grinderRM=appeng.api.Util.getGrinderRecipeManage();
    if (grinderRM != null) {
      if (yelloriteOre != null && dustYellorium != null) {
        ItemStack doubledYelloriumDust=dustYellorium.copy();
        doubledYelloriumDust.stackSize=2;
        grinderRM.addRecipe(yelloriteOre,doubledYelloriumDust,4);
      }
      if (ingotYellorium != null && dustYellorium != null) {
        grinderRM.addRecipe(ingotYellorium,dustYellorium,2);
      }
      if (ingotCyanite != null && dustCyanite != null) {
        grinderRM.addRecipe(ingotCyanite,dustCyanite,2);
      }
      if (ingotGraphite != null && dustGraphite != null) {
        grinderRM.addRecipe(ingotGraphite,dustGraphite,2);
      }
      if (ingotBlutonium != null && dustBlutonium != null) {
        grinderRM.addRecipe(ingotBlutonium,dustBlutonium,2);
      }
    }
  }
  if (Loader.isModLoaded(""String_Node_Str"")) {
    if (yelloriteOre != null && dustYellorium != null) {
      addMekanismEnrichmentChamberRecipe(yelloriteOre,dustYellorium);
      addMekanismCombinerRecipe(dustYellorium,yelloriteOre);
    }
    if (ingotYellorium != null && dustYellorium != null) {
      addMekanismCrusherRecipe(ingotYellorium,dustYellorium);
    }
    if (ingotCyanite != null && dustCyanite != null) {
      addMekanismCrusherRecipe(ingotCyanite,dustCyanite);
    }
    if (ingotGraphite != null && dustGraphite != null) {
      addMekanismCrusherRecipe(ingotGraphite,dustGraphite);
    }
    if (ingotBlutonium != null && dustBlutonium != null) {
      addMekanismCrusherRecipe(dustGraphite,dustBlutonium);
    }
  }
}","public void postInit(){
  BRConfig.CONFIGURATION.load();
  boolean autoAddUranium=BRConfig.CONFIGURATION.get(""String_Node_Str"",""String_Node_Str"",true,""String_Node_Str"" + ""String_Node_Str"" + ""String_Node_Str"").getBoolean(true);
  if (autoAddUranium) {
    List<ItemStack> candidates=OreDictionary.getOres(""String_Node_Str"");
    for (    ItemStack candidate : candidates) {
      BRRegistry.registerFuel(new ReactorFuel(candidate,BigReactors.defaultLiquidColorFuel));
    }
  }
  BRConfig.CONFIGURATION.save();
  ItemIngot ingotGeneric=((ItemIngot)BigReactors.ingotGeneric);
  ItemStack yelloriteOre=new ItemStack(BigReactors.blockYelloriteOre,1);
  ItemStack ingotYellorium=ingotGeneric.getItemStackForType(""String_Node_Str"");
  ItemStack ingotCyanite=ingotGeneric.getItemStackForType(""String_Node_Str"");
  ItemStack ingotGraphite=ingotGeneric.getItemStackForType(""String_Node_Str"");
  ItemStack ingotBlutonium=ingotGeneric.getItemStackForType(""String_Node_Str"");
  ItemStack dustYellorium=ingotGeneric.getItemStackForType(""String_Node_Str"");
  ItemStack dustCyanite=ingotGeneric.getItemStackForType(""String_Node_Str"");
  ItemStack dustGraphite=ingotGeneric.getItemStackForType(""String_Node_Str"");
  ItemStack dustBlutonium=ingotGeneric.getItemStackForType(""String_Node_Str"");
  ItemStack doubledYelloriumDust=dustYellorium.copy();
  doubledYelloriumDust.stackSize=2;
  if (Loader.isModLoaded(""String_Node_Str"")) {
    if (yelloriteOre != null && ingotYellorium != null) {
      CraftingHelpers.addSmelterOreToIngotsRecipe(yelloriteOre.copy(),ingotYellorium.copy());
    }
    if (yelloriteOre != null && dustYellorium != null) {
      CraftingHelpers.addPulverizerOreToDustRecipe(yelloriteOre.copy(),dustYellorium.copy());
    }
    if (ingotYellorium != null && dustYellorium != null) {
      CraftingHelpers.addPulverizerIngotToDustRecipe(ingotYellorium.copy(),dustYellorium.copy());
      CraftingHelpers.addSmelterDustToIngotsRecipe(dustYellorium.copy(),ingotYellorium.copy());
    }
    if (ingotCyanite != null && dustCyanite != null) {
      CraftingHelpers.addPulverizerIngotToDustRecipe(ingotCyanite.copy(),dustCyanite.copy());
      CraftingHelpers.addSmelterDustToIngotsRecipe(dustCyanite.copy(),ingotCyanite.copy());
    }
    if (ingotGraphite != null && dustGraphite != null) {
      CraftingHelpers.addPulverizerIngotToDustRecipe(ingotGraphite.copy(),dustGraphite.copy());
      CraftingHelpers.addSmelterDustToIngotsRecipe(dustGraphite.copy(),ingotGraphite.copy());
    }
    if (ingotBlutonium != null && dustBlutonium != null) {
      CraftingHelpers.addPulverizerIngotToDustRecipe(ingotBlutonium.copy(),dustBlutonium.copy());
      CraftingHelpers.addSmelterDustToIngotsRecipe(dustBlutonium.copy(),ingotBlutonium.copy());
    }
  }
  if (Loader.isModLoaded(""String_Node_Str"")) {
    appeng.api.IGrinderRecipeManager grinderRM=appeng.api.Util.getGrinderRecipeManage();
    if (grinderRM != null) {
      if (yelloriteOre != null && dustYellorium != null) {
        grinderRM.addRecipe(yelloriteOre.copy(),doubledYelloriumDust.copy(),4);
      }
      if (ingotYellorium != null && dustYellorium != null) {
        grinderRM.addRecipe(ingotYellorium.copy(),dustYellorium.copy(),2);
      }
      if (ingotCyanite != null && dustCyanite != null) {
        grinderRM.addRecipe(ingotCyanite.copy(),dustCyanite.copy(),2);
      }
      if (ingotGraphite != null && dustGraphite != null) {
        grinderRM.addRecipe(ingotGraphite.copy(),dustGraphite.copy(),2);
      }
      if (ingotBlutonium != null && dustBlutonium != null) {
        grinderRM.addRecipe(ingotBlutonium.copy(),dustBlutonium.copy(),2);
      }
    }
  }
  if (Loader.isModLoaded(""String_Node_Str"")) {
    if (yelloriteOre != null && dustYellorium != null) {
      addMekanismEnrichmentChamberRecipe(yelloriteOre.copy(),doubledYelloriumDust.copy());
      addMekanismCombinerRecipe(dustYellorium.copy(),yelloriteOre.copy());
    }
    if (ingotYellorium != null && dustYellorium != null) {
      addMekanismCrusherRecipe(ingotYellorium.copy(),dustYellorium.copy());
    }
    if (ingotCyanite != null && dustCyanite != null) {
      addMekanismCrusherRecipe(ingotCyanite.copy(),dustCyanite.copy());
    }
    if (ingotGraphite != null && dustGraphite != null) {
      addMekanismCrusherRecipe(ingotGraphite.copy(),dustGraphite.copy());
    }
    if (ingotBlutonium != null && dustBlutonium != null) {
      addMekanismCrusherRecipe(dustGraphite.copy(),dustBlutonium.copy());
    }
  }
}",0.942074228234478
161404,"/** 
 * @param itemToDistribute An ItemStack to distribute to pipes
 * @return Null if the stack was distributed, the same ItemStack otherwise.
 */
protected ItemStack distributeItemToPipes(ItemStack itemToDistribute){
  if (itemToDistribute == null) {
    return null;
  }
  ForgeDirection[] dirsToCheck={ForgeDirection.NORTH,ForgeDirection.SOUTH,ForgeDirection.EAST,ForgeDirection.WEST};
  for (  ForgeDirection dir : dirsToCheck) {
    TileEntity te=this.worldObj.getBlockTileEntity(xCoord + dir.offsetX,yCoord + dir.offsetY,zCoord + dir.offsetZ);
    if (te != null && te instanceof IPipeEntry) {
      IPipeEntry pipe=(IPipeEntry)te;
      if (pipe.acceptItems()) {
        pipe.entityEntering(itemToDistribute.copy(),dir.getOpposite());
        return null;
      }
    }
  }
  return itemToDistribute;
}","/** 
 * @param itemToDistribute An ItemStack to distribute to pipes
 * @return Null if the stack was distributed, the same ItemStack otherwise.
 */
protected ItemStack distributeItemToPipes(ItemStack itemToDistribute){
  if (itemToDistribute == null) {
    return null;
  }
  ForgeDirection[] dirsToCheck={ForgeDirection.NORTH,ForgeDirection.SOUTH,ForgeDirection.EAST,ForgeDirection.WEST};
  for (  ForgeDirection dir : dirsToCheck) {
    TileEntity te=this.worldObj.getBlockTileEntity(xCoord + dir.offsetX,yCoord + dir.offsetY,zCoord + dir.offsetZ);
    if (te != null && te instanceof IPipeEntry) {
      IPipeEntry pipe=(IPipeEntry)te;
      if (pipe.acceptItems()) {
        pipe.entityEntering(itemToDistribute.copy(),dir);
        return null;
      }
    }
  }
  return itemToDistribute;
}",0.9912826899128268
161405,"/** 
 * @param fromSlot The inventory slot into which this object would normally go.
 * @param itemToDistribute An ItemStack to distribute to pipes
 * @return Null if the stack was distributed, the same ItemStack otherwise.
 */
protected ItemStack distributeItemToPipes(int fromSlot,ItemStack itemToDistribute){
  if (itemToDistribute == null) {
    return null;
  }
  ForgeDirection[] dirsToCheck={ForgeDirection.NORTH,ForgeDirection.SOUTH,ForgeDirection.EAST,ForgeDirection.WEST};
  for (  ForgeDirection dir : dirsToCheck) {
    int rotatedSide=this.getRotatedSide(dir.ordinal());
    if (invExposures[rotatedSide] != fromSlot) {
      continue;
    }
    TileEntity te=this.worldObj.getBlockTileEntity(xCoord + dir.offsetX,yCoord + dir.offsetY,zCoord + dir.offsetZ);
    if (te != null && te instanceof IPipeEntry) {
      IPipeEntry pipe=(IPipeEntry)te;
      if (pipe.acceptItems()) {
        pipe.entityEntering(itemToDistribute.copy(),dir.getOpposite());
        return null;
      }
    }
  }
  return itemToDistribute;
}","/** 
 * @param fromSlot The inventory slot into which this object would normally go.
 * @param itemToDistribute An ItemStack to distribute to pipes
 * @return Null if the stack was distributed, the same ItemStack otherwise.
 */
protected ItemStack distributeItemToPipes(int fromSlot,ItemStack itemToDistribute){
  if (itemToDistribute == null) {
    return null;
  }
  ForgeDirection[] dirsToCheck={ForgeDirection.NORTH,ForgeDirection.SOUTH,ForgeDirection.EAST,ForgeDirection.WEST};
  for (  ForgeDirection dir : dirsToCheck) {
    int rotatedSide=this.getRotatedSide(dir.ordinal());
    if (invExposures[rotatedSide] != fromSlot) {
      continue;
    }
    TileEntity te=this.worldObj.getBlockTileEntity(xCoord + dir.offsetX,yCoord + dir.offsetY,zCoord + dir.offsetZ);
    if (te != null && te instanceof IPipeEntry) {
      IPipeEntry pipe=(IPipeEntry)te;
      if (pipe.acceptItems()) {
        pipe.entityEntering(itemToDistribute.copy(),dir);
        return null;
      }
    }
  }
  return itemToDistribute;
}",0.9931573802541545
161406,"/** 
 * Set the exposed inventory slot on a given side, using the reference side index. Only use this if you know what you're doing.
 * @param side Reference side. 2 = North, 3 = South, 4 = East, 5 = West
 * @param slot The inventory slot to expose, or -1 (INVENTORY_UNEXPOSED) if none.
 */
public void setExposedInventorySlotReference(int referenceSide,int slot){
  invExposures[referenceSide]=slot;
  if (!this.worldObj.isRemote) {
    Packet updatePacket=PacketWrapper.createPacket(BigReactors.CHANNEL,Packets.SmallMachineInventoryExposureUpdate,new Object[]{xCoord,yCoord,zCoord,referenceSide,slot});
    PacketDispatcher.sendPacketToAllAround(xCoord,yCoord,zCoord,50,worldObj.provider.dimensionId,updatePacket);
  }
}","/** 
 * Set the exposed inventory slot on a given side, using the reference side index. Only use this if you know what you're doing.
 * @param side Reference side. 2 = North, 3 = South, 4 = East, 5 = West
 * @param slot The inventory slot to expose, or -1 (INVENTORY_UNEXPOSED) if none.
 */
public void setExposedInventorySlotReference(int referenceSide,int slot){
  if (referenceSide < 0 || referenceSide >= invExposures.length) {
    return;
  }
  if (invExposures[referenceSide] == slot) {
    return;
  }
  invExposures[referenceSide]=slot;
  if (!this.worldObj.isRemote) {
    Packet updatePacket=PacketWrapper.createPacket(BigReactors.CHANNEL,Packets.SmallMachineInventoryExposureUpdate,new Object[]{xCoord,yCoord,zCoord,referenceSide,slot});
    PacketDispatcher.sendPacketToAllAround(xCoord,yCoord,zCoord,50,worldObj.provider.dimensionId,updatePacket);
    this.worldObj.notifyBlocksOfNeighborChange(xCoord,yCoord,zCoord,this.worldObj.getBlockId(this.xCoord,this.yCoord,this.zCoord));
  }
}",0.8395348837209302
161407,"/** 
 * Set the externally-accessible liquid tank for a given reference direction.
 * @param side Reference direction (north/front, south/back, west/left, east/right)
 * @param tankIdx The index of the tank which can be accessed from that direction.
 */
public void setExposedTank(ForgeDirection side,int tankIdx){
  if (side == ForgeDirection.UNKNOWN) {
    return;
  }
  if (tankExposure[side.ordinal()] == tankIdx) {
    return;
  }
  tankExposure[side.ordinal()]=tankIdx;
  if (!this.worldObj.isRemote) {
    Packet updatePacket=PacketWrapper.createPacket(BigReactors.CHANNEL,Packets.SmallMachineLiquidExposureUpdate,new Object[]{xCoord,yCoord,zCoord,side.ordinal(),tankIdx});
    PacketDispatcher.sendPacketToAllAround(xCoord,yCoord,zCoord,50,worldObj.provider.dimensionId,updatePacket);
  }
}","/** 
 * Set the externally-accessible liquid tank for a given reference direction.
 * @param side Reference direction (north/front, south/back, west/left, east/right)
 * @param tankIdx The index of the tank which can be accessed from that direction.
 */
public void setExposedTank(ForgeDirection side,int tankIdx){
  if (side == ForgeDirection.UNKNOWN) {
    return;
  }
  if (tankExposure[side.ordinal()] == tankIdx) {
    return;
  }
  tankExposure[side.ordinal()]=tankIdx;
  if (!this.worldObj.isRemote) {
    Packet updatePacket=PacketWrapper.createPacket(BigReactors.CHANNEL,Packets.SmallMachineLiquidExposureUpdate,new Object[]{xCoord,yCoord,zCoord,side.ordinal(),tankIdx});
    PacketDispatcher.sendPacketToAllAround(xCoord,yCoord,zCoord,50,worldObj.provider.dimensionId,updatePacket);
    this.worldObj.notifyBlocksOfNeighborChange(xCoord,yCoord,zCoord,this.worldObj.getBlockId(this.xCoord,this.yCoord,this.zCoord));
  }
}",0.9236111111111112
161408,"@Override public Icon getBlockTexture(IBlockAccess blockAccess,int x,int y,int z,int side){
  TileEntity te=blockAccess.getBlockTileEntity(x,y,z);
  if (te instanceof TileEntityBeefBase) {
    if (side == ((TileEntityBeefBase)te).getFacingDirection().ordinal()) {
      int metadata=blockAccess.getBlockMetadata(x,y,z);
      if (te instanceof TileEntityPoweredInventory) {
        if (((TileEntityPoweredInventory)te).isActive()) {
          return _activeIcons[metadata];
        }
      }
      return _icons[metadata];
    }
  }
  if (te instanceof TileEntityInventory) {
    int[] slots=((TileEntityInventory)te).getAccessibleSlotsFromSide(side);
    if (slots != null && slots[0] != TileEntityInventory.INVENTORY_UNEXPOSED) {
      return _inventorySideIcons[slots[0]];
    }
  }
  if (te instanceof TileEntityPoweredInventoryLiquid) {
    if (((TileEntityPoweredInventoryLiquid)te).getTank(ForgeDirection.getOrientation(side).getOpposite(),null) != null) {
      return _liquidSideIcons[0];
    }
  }
  return this.blockIcon;
}","@Override public Icon getBlockTexture(IBlockAccess blockAccess,int x,int y,int z,int side){
  TileEntity te=blockAccess.getBlockTileEntity(x,y,z);
  if (te instanceof TileEntityBeefBase) {
    if (side == ((TileEntityBeefBase)te).getFacingDirection().ordinal()) {
      int metadata=blockAccess.getBlockMetadata(x,y,z);
      if (te instanceof TileEntityPoweredInventory) {
        if (((TileEntityPoweredInventory)te).isActive()) {
          return _activeIcons[metadata];
        }
      }
      return _icons[metadata];
    }
  }
  if (te instanceof TileEntityInventory) {
    int[] slots=((TileEntityInventory)te).getAccessibleSlotsFromSide(side);
    if (slots != null && slots.length > 0 && slots[0] != TileEntityInventory.INVENTORY_UNEXPOSED) {
      return _inventorySideIcons[slots[0]];
    }
  }
  if (te instanceof TileEntityPoweredInventoryLiquid) {
    if (((TileEntityPoweredInventoryLiquid)te).getTank(ForgeDirection.getOrientation(side),null) != null) {
      return _liquidSideIcons[0];
    }
  }
  return this.blockIcon;
}",0.9836065573770492
161409,"@Override public int[] getAccessibleSlotsFromSide(int side){
  int rotatedSide=this.getRotatedSide(side);
  if (invExposures[rotatedSide] == INVENTORY_UNEXPOSED) {
    return null;
  }
  int[] slots=new int[1];
  slots[0]=invExposures[rotatedSide];
  return slots;
}","@Override public int[] getAccessibleSlotsFromSide(int side){
  int rotatedSide=this.getRotatedSide(side);
  if (invExposures[rotatedSide] == INVENTORY_UNEXPOSED) {
    return new int[0];
  }
  int[] slots=new int[1];
  slots[0]=invExposures[rotatedSide];
  return slots;
}",0.9776951672862454
161410,"/** 
 * Return the tank that this tank container desired to be used for the specified liquid type from the specified direction
 * @param direction the direction
 * @param type the liquid type, null is always an acceptable value
 * @return a tank or null for no such tank
 */
public ILiquidTank getTank(ForgeDirection direction,LiquidStack type){
  if (direction == ForgeDirection.UNKNOWN) {
    return null;
  }
 else {
    direction=direction.getOpposite();
    int tankIdx=tankExposure[this.getRotatedSide(direction.ordinal())];
    if (tankIdx == LIQUIDTANK_NONE) {
      return null;
    }
    ILiquidTank t=tanks[tankIdx];
    if (type == null || isLiquidValidForTank(tankIdx,type)) {
      return t;
    }
    return null;
  }
}","/** 
 * Return the tank that this tank container desired to be used for the specified liquid type from the specified direction
 * @param direction the direction
 * @param type the liquid type, null is always an acceptable value
 * @return a tank or null for no such tank
 */
public ILiquidTank getTank(ForgeDirection direction,LiquidStack type){
  if (direction == ForgeDirection.UNKNOWN) {
    return null;
  }
 else {
    int tankIdx=tankExposure[this.getRotatedSide(direction.ordinal())];
    if (tankIdx == LIQUIDTANK_NONE) {
      return null;
    }
    ILiquidTank t=tanks[tankIdx];
    if (type == null || isLiquidValidForTank(tankIdx,type)) {
      return t;
    }
    return null;
  }
}",0.9727081875437368
161411,"/** 
 * @param direction tank side: UNKNOWN for default tank set
 * @return Array of {@link LiquidTank}s contained in this ITankContainer for this direction
 */
public ILiquidTank[] getTanks(ForgeDirection direction){
  if (direction == ForgeDirection.UNKNOWN) {
    return tanks;
  }
 else {
    direction=direction.getOpposite();
    int exposure=tankExposure[this.getRotatedSide(direction.ordinal())];
    if (exposure == LIQUIDTANK_NONE) {
      return null;
    }
    ILiquidTank[] exposedTanks=new ILiquidTank[1];
    exposedTanks[0]=tanks[exposure];
    return exposedTanks;
  }
}","/** 
 * @param direction tank side: UNKNOWN for default tank set
 * @return Array of {@link LiquidTank}s contained in this ITankContainer for this direction
 */
public ILiquidTank[] getTanks(ForgeDirection direction){
  if (direction == ForgeDirection.UNKNOWN) {
    return tanks;
  }
 else {
    int exposure=tankExposure[this.getRotatedSide(direction.ordinal())];
    if (exposure == LIQUIDTANK_NONE) {
      return new ILiquidTank[0];
    }
    ILiquidTank[] exposedTanks=new ILiquidTank[1];
    exposedTanks[0]=tanks[exposure];
    return exposedTanks;
  }
}",0.948651000870322
161412,"public ItemBase(String name,int id){
  super(id);
  this.setUnlocalizedName(name);
  this.setCreativeTab(BigReactors.TAB);
}","public ItemBase(String name,int id){
  super(id);
  this.setUnlocalizedName(name);
  this.setCreativeTab(BigReactors.TAB);
  icons=new Icon[getNumberOfSubItems()];
}",0.8581314878892734
161413,"@Override @SideOnly(Side.CLIENT) public Icon getIconFromDamage(int damage){
  if (this.icons.size() > damage && !this.isDamageable()) {
    return icons.get(damage);
  }
  return super.getIconFromDamage(damage);
}","@Override @SideOnly(Side.CLIENT) public Icon getIconFromDamage(int damage){
  if (icons.length > damage && !this.isDamageable()) {
    return icons[damage];
  }
  return super.getIconFromDamage(damage);
}",0.8920863309352518
161414,"@Override @SideOnly(Side.CLIENT) public void registerIcons(IconRegister iconRegister){
  List<ItemStack> list=new ArrayList<ItemStack>();
  this.getSubItems(this.itemID,this.getCreativeTab(),list);
  if (list.size() > 1) {
    for (    ItemStack itemStack : list) {
      this.icons.add(iconRegister.registerIcon(this.getUnlocalizedName(itemStack).replace(""String_Node_Str"",BigReactors.TEXTURE_NAME_PREFIX)));
    }
  }
 else {
    this.itemIcon=iconRegister.registerIcon(this.getUnlocalizedName().replace(""String_Node_Str"",BigReactors.TEXTURE_NAME_PREFIX));
  }
}","@Override @SideOnly(Side.CLIENT) public void registerIcons(IconRegister iconRegister){
  String[] subItemNames=getSubItemNames();
  if (subItemNames != null) {
    for (int i=0; i < subItemNames.length; i++) {
      icons[i]=iconRegister.registerIcon(BigReactors.TEXTURE_NAME_PREFIX + subItemNames[i]);
    }
  }
 else {
    this.itemIcon=iconRegister.registerIcon(this.getUnlocalizedName().replace(""String_Node_Str"",BigReactors.TEXTURE_NAME_PREFIX));
  }
}",0.3506366307541625
161415,"public static boolean isFuel(int itemDamage){
  return itemDamage == 0;
}","public static boolean isFuel(int itemDamage){
  return itemDamage == 0 || itemDamage == 3;
}",0.8848484848484849
161416,"@Override public boolean canExtractItem(int slot,ItemStack itemstack,int side){
  if (side == 0 || side == 1) {
    return false;
  }
  return isStackValidForSlot(slot,itemstack);
}","@Override public boolean canExtractItem(int slot,ItemStack itemstack,int side){
  return isStackValidForSlot(slot,itemstack);
}",0.8246753246753247
161417,"/** 
 * @param fromSlot The inventory slot into which this object would normally go.
 * @param itemToDistribute An ItemStack to distribute to pipes
 * @return Null if the stack was distributed, the same ItemStack otherwise.
 */
protected ItemStack distributeItemToPipes(int fromSlot,ItemStack itemToDistribute){
  if (itemToDistribute == null) {
    return null;
  }
  ForgeDirection[] dirsToCheck={ForgeDirection.NORTH,ForgeDirection.SOUTH,ForgeDirection.EAST,ForgeDirection.WEST};
  for (  ForgeDirection dir : dirsToCheck) {
    int rotatedSide=this.getRotatedSide(dir.ordinal());
    if (invExposures[rotatedSide] != fromSlot) {
      continue;
    }
    TileEntity te=this.worldObj.getBlockTileEntity(xCoord + dir.offsetX,yCoord + dir.offsetY,zCoord + dir.offsetZ);
    if (te != null && te instanceof IPipeEntry) {
      IPipeEntry pipe=(IPipeEntry)te;
      if (pipe.acceptItems()) {
        pipe.entityEntering(itemToDistribute.copy(),dir);
        return null;
      }
    }
  }
  return itemToDistribute;
}","/** 
 * @param fromSlot The inventory slot into which this object would normally go.
 * @param itemToDistribute An ItemStack to distribute to pipes
 * @return Null if the stack was distributed, the same ItemStack otherwise.
 */
protected ItemStack distributeItemToPipes(int fromSlot,ItemStack itemToDistribute){
  if (itemToDistribute == null) {
    return null;
  }
  ForgeDirection[] dirsToCheck={ForgeDirection.NORTH,ForgeDirection.SOUTH,ForgeDirection.EAST,ForgeDirection.WEST,ForgeDirection.UP,ForgeDirection.DOWN};
  for (  ForgeDirection dir : dirsToCheck) {
    int rotatedSide=this.getRotatedSide(dir.ordinal());
    if (invExposures[rotatedSide] != fromSlot) {
      continue;
    }
    TileEntity te=this.worldObj.getBlockTileEntity(xCoord + dir.offsetX,yCoord + dir.offsetY,zCoord + dir.offsetZ);
    if (te != null && te instanceof IPipeEntry) {
      IPipeEntry pipe=(IPipeEntry)te;
      if (pipe.acceptItems()) {
        pipe.entityEntering(itemToDistribute.copy(),dir);
        return null;
      }
    }
  }
  return itemToDistribute;
}",0.9816425120772948
161418,"@Override public boolean canInsertItem(int slot,ItemStack itemstack,int side){
  if (side == 0 || side == 1) {
    return false;
  }
  return isStackValidForSlot(slot,itemstack);
}","@Override public boolean canInsertItem(int slot,ItemStack itemstack,int side){
  return isStackValidForSlot(slot,itemstack);
}",0.8235294117647058
161419,"@Override public void onItemSelected(AdapterView<?> parent,View view,int position,long id){
  list.smoothScrollToPositionFromTop(position,0);
}","@Override public void onItemSelected(AdapterView<?> parent,View view,int position,long id){
  list.smoothScrollToPositionFromTop(list.getSelectedItemPosition(),0);
}",0.922077922077922
161420,"@Override protected void onCreate(Bundle savedInstanceState){
  super.onCreate(savedInstanceState);
  setContentView(R.layout.activity_main);
  mAppHelper=new AppHelper(this);
  mAppHelper.loadApplications(true);
  mAppHelper.bindApplications();
  mAppHelper.registerIntentReceivers();
  final ListView list=(ListView)findViewById(android.R.id.list);
  list.setOnItemSelectedListener(new OnItemSelectedListener(){
    @Override public void onItemSelected(    AdapterView<?> parent,    View view,    int position,    long id){
      list.smoothScrollToPositionFromTop(position,0);
    }
    @Override public void onNothingSelected(    AdapterView<?> arg0){
    }
  }
);
  IntentFilter intentFilter=new IntentFilter();
  intentFilter.addAction(Intent.ACTION_PACKAGE_ADDED);
  intentFilter.addDataScheme(""String_Node_Str"");
  registerReceiver(mPackageBroadcastReciever,intentFilter);
}","@Override protected void onCreate(Bundle savedInstanceState){
  super.onCreate(savedInstanceState);
  setContentView(R.layout.activity_main);
  mAppHelper=new AppHelper(this);
  mAppHelper.loadApplications(true);
  mAppHelper.bindApplications();
  mAppHelper.registerIntentReceivers();
  mGestureDetector=createGestureDetector(this);
  final ListView list=(ListView)findViewById(android.R.id.list);
  list.setSelection(0);
  list.requestFocus();
  list.setOnItemSelectedListener(new OnItemSelectedListener(){
    @Override public void onItemSelected(    AdapterView<?> parent,    View view,    int position,    long id){
      list.smoothScrollToPositionFromTop(list.getSelectedItemPosition(),0);
    }
    @Override public void onNothingSelected(    AdapterView<?> arg0){
    }
  }
);
  IntentFilter intentFilter=new IntentFilter();
  intentFilter.addAction(Intent.ACTION_PACKAGE_ADDED);
  intentFilter.addDataScheme(""String_Node_Str"");
  registerReceiver(mPackageBroadcastReciever,intentFilter);
}",0.9292929292929292
161421,"@Override public void handleMessage(Message msg){
switch (msg.what) {
case BluetoothChatService.MSG_CONNECTED:
    connected=true;
  mStatusView.setText(formatStatusMessage(R.string.btstatus_connected_to_fmt,msg.obj));
onBluetoothStateChanged();
break;
case BluetoothChatService.MSG_CONNECTING:
mStatusView.setText(formatStatusMessage(R.string.btstatus_connecting_to_fmt,msg.obj));
onBluetoothStateChanged();
break;
case BluetoothChatService.MSG_NOT_CONNECTED:
connected=false;
mStatusView.setText(R.string.btstatus_not_connected);
onBluetoothStateChanged();
break;
case BluetoothChatService.MSG_BYTES_WRITTEN:
String written=new String((byte[])msg.obj);
mConversationArrayAdapter.add(""String_Node_Str"" + written);
Log.i(TAG,""String_Node_Str"" + written + ""String_Node_Str"");
break;
case BluetoothChatService.MSG_LINE_READ:
if (paused) break;
String readMessage=(String)msg.obj;
if (D) Log.d(TAG,readMessage);
mConversationArrayAdapter.add(readMessage);
break;
}
}","@Override public void handleMessage(Message msg){
switch (msg.what) {
case BluetoothChatService.MSG_CONNECTED:
    connected=true;
  mStatusView.setText(formatStatusMessage(R.string.btstatus_connected_to_fmt,msg.obj));
onBluetoothStateChanged();
break;
case BluetoothChatService.MSG_CONNECTING:
connected=false;
mStatusView.setText(formatStatusMessage(R.string.btstatus_connecting_to_fmt,msg.obj));
onBluetoothStateChanged();
break;
case BluetoothChatService.MSG_NOT_CONNECTED:
connected=false;
mStatusView.setText(R.string.btstatus_not_connected);
onBluetoothStateChanged();
break;
case BluetoothChatService.MSG_CONNECTION_FAILED:
connected=false;
mStatusView.setText(R.string.btstatus_not_connected);
onBluetoothStateChanged();
break;
case BluetoothChatService.MSG_CONNECTION_LOST:
connected=false;
mStatusView.setText(R.string.btstatus_not_connected);
onBluetoothStateChanged();
break;
case BluetoothChatService.MSG_BYTES_WRITTEN:
String written=new String((byte[])msg.obj);
mConversationArrayAdapter.add(""String_Node_Str"" + written);
Log.i(TAG,""String_Node_Str"" + written + ""String_Node_Str"");
break;
case BluetoothChatService.MSG_LINE_READ:
if (paused) break;
String readMessage=(String)msg.obj;
if (D) Log.d(TAG,readMessage);
mConversationArrayAdapter.add(readMessage);
break;
}
}",0.8563806136060471
161422,"public void run(){
  Log.i(TAG,""String_Node_Str"");
  BufferedReader reader=new BufferedReader(new InputStreamReader(mmInStream));
  while (!stop) {
    try {
      String line=reader.readLine();
      if (line != null) {
        mHandler.obtainMessage(BluetoothChat.MESSAGE_READ,line.length(),-1,line.toCharArray()).sendToTarget();
      }
    }
 catch (    IOException e) {
      Log.e(TAG,""String_Node_Str"",e);
      connectionLost();
      break;
    }
  }
}","public void run(){
  Log.i(TAG,""String_Node_Str"");
  BufferedReader reader=new BufferedReader(new InputStreamReader(mmInStream));
  while (!stop) {
    try {
      String line=reader.readLine();
      if (line != null) {
        mHandler.obtainMessage(BluetoothChat.MESSAGE_READ,line.length(),-1,line.getBytes()).sendToTarget();
      }
    }
 catch (    IOException e) {
      Log.e(TAG,""String_Node_Str"",e);
      connectionLost();
      break;
    }
  }
}",0.9815016322089228
161423,"private void onBluetoothStateChanged(){
  if (mChatService != null) {
    if (connectMenuItem != null) {
switch (mChatService.getState()) {
case BluetoothChatService.STATE_CONNECTED:
        connectMenuItem.setVisible(false);
      disconnectMenuItem.setVisible(true);
    resumeMenuItem.setVisible(false);
  pauseMenuItem.setVisible(true);
break;
case BluetoothChatService.STATE_NONE:
case BluetoothChatService.STATE_CONNECTING:
default :
connectMenuItem.setVisible(true);
disconnectMenuItem.setVisible(false);
resumeMenuItem.setVisible(false);
pauseMenuItem.setVisible(false);
break;
}
}
}
}","private void onBluetoothStateChanged(){
  if (!menuReady)   return;
  if (mChatService != null) {
    if (connectMenuItem != null) {
switch (mChatService.getState()) {
case BluetoothChatService.STATE_CONNECTED:
        connectMenuItem.setVisible(false);
      disconnectMenuItem.setVisible(true);
    resumeMenuItem.setVisible(false);
  pauseMenuItem.setVisible(true);
break;
case BluetoothChatService.STATE_NONE:
case BluetoothChatService.STATE_CONNECTING:
default :
connectMenuItem.setVisible(true);
disconnectMenuItem.setVisible(false);
resumeMenuItem.setVisible(false);
pauseMenuItem.setVisible(false);
break;
}
}
}
}",0.9769357495881384
161424,"private void onPauseChanged(){
  if (mChatService != null && mChatService.getState() == BluetoothChatService.STATE_CONNECTED) {
    if (pauseMenuItem != null) {
      if (paused) {
        pauseMenuItem.setVisible(false);
        resumeMenuItem.setVisible(true);
      }
 else {
        pauseMenuItem.setVisible(true);
        resumeMenuItem.setVisible(false);
      }
    }
  }
 else {
    pauseMenuItem.setVisible(false);
    resumeMenuItem.setVisible(false);
  }
}","private void onPauseChanged(){
  if (mChatService != null && mChatService.getState() == BluetoothChatService.STATE_CONNECTED) {
    if (paused) {
      pauseMenuItem.setVisible(false);
      resumeMenuItem.setVisible(true);
    }
 else {
      pauseMenuItem.setVisible(true);
      resumeMenuItem.setVisible(false);
    }
  }
 else {
    pauseMenuItem.setVisible(false);
    resumeMenuItem.setVisible(false);
  }
}",0.5402951191827469
161425,"@Override public boolean onCreateOptionsMenu(Menu menu){
  MenuInflater inflater=getMenuInflater();
  inflater.inflate(R.menu.option_menu,menu);
  connectMenuItem=menu.findItem(R.id.scan);
  disconnectMenuItem=menu.findItem(R.id.menu_disconnect);
  onBluetoothStateChanged();
  pauseMenuItem=menu.findItem(R.id.menu_pause_on);
  resumeMenuItem=menu.findItem(R.id.menu_pause_off);
  onPauseChanged();
  return true;
}","@Override public boolean onCreateOptionsMenu(Menu menu){
  MenuInflater inflater=getMenuInflater();
  inflater.inflate(R.menu.option_menu,menu);
  connectMenuItem=menu.findItem(R.id.scan);
  disconnectMenuItem=menu.findItem(R.id.menu_disconnect);
  onBluetoothStateChanged();
  pauseMenuItem=menu.findItem(R.id.menu_pause_on);
  resumeMenuItem=menu.findItem(R.id.menu_pause_off);
  onPauseChanged();
  menuReady=true;
  return true;
}",0.9788235294117648
161426,"@Override protected void onCreate(Bundle savedInstanceState){
  super.onCreate(savedInstanceState);
  requestWindowFeature(Window.FEATURE_INDETERMINATE_PROGRESS);
  setContentView(R.layout.device_list);
  setResult(Activity.RESULT_CANCELED);
  Button scanButton=(Button)findViewById(R.id.button_scan);
  scanButton.setOnClickListener(new OnClickListener(){
    public void onClick(    View v){
      doDiscovery();
      v.setVisibility(View.GONE);
    }
  }
);
  mPairedDevicesArrayAdapter=new ArrayAdapter<String>(this,R.layout.device_name);
  mNewDevicesArrayAdapter=new ArrayAdapter<String>(this,R.layout.device_name);
  ListView pairedListView=(ListView)findViewById(R.id.paired_devices);
  pairedListView.setAdapter(mPairedDevicesArrayAdapter);
  pairedListView.setOnItemClickListener(mDeviceClickListener);
  ListView newDevicesListView=(ListView)findViewById(R.id.new_devices);
  newDevicesListView.setAdapter(mNewDevicesArrayAdapter);
  newDevicesListView.setOnItemClickListener(mDeviceClickListener);
  IntentFilter filter=new IntentFilter(BluetoothDevice.ACTION_FOUND);
  this.registerReceiver(mReceiver,filter);
  filter=new IntentFilter(BluetoothAdapter.ACTION_DISCOVERY_FINISHED);
  this.registerReceiver(mReceiver,filter);
  mBtAdapter=BluetoothAdapter.getDefaultAdapter();
  Set<BluetoothDevice> pairedDevices=mBtAdapter.getBondedDevices();
  if (pairedDevices.size() > 0) {
    findViewById(R.id.title_paired_devices).setVisibility(View.VISIBLE);
    for (    BluetoothDevice device : pairedDevices) {
      mPairedDevicesArrayAdapter.add(device.getName() + ""String_Node_Str"" + device.getAddress());
    }
  }
 else {
    String noDevices=getResources().getText(R.string.none_paired).toString();
    mPairedDevicesArrayAdapter.add(noDevices);
  }
}","@Override protected void onCreate(Bundle savedInstanceState){
  super.onCreate(savedInstanceState);
  requestWindowFeature(Window.FEATURE_INDETERMINATE_PROGRESS);
  setContentView(R.layout.device_list);
  setResult(Activity.RESULT_CANCELED);
  scanButton=(Button)findViewById(R.id.button_scan);
  scanButton.setOnClickListener(new OnClickListener(){
    public void onClick(    View v){
      doDiscovery();
      v.setVisibility(View.GONE);
    }
  }
);
  mPairedDevicesArrayAdapter=new ArrayAdapter<String>(this,R.layout.device_name);
  mNewDevicesArrayAdapter=new ArrayAdapter<String>(this,R.layout.device_name);
  mNewDevicesSet=new HashSet<String>();
  ListView pairedListView=(ListView)findViewById(R.id.paired_devices);
  pairedListView.setAdapter(mPairedDevicesArrayAdapter);
  pairedListView.setOnItemClickListener(mDeviceClickListener);
  ListView newDevicesListView=(ListView)findViewById(R.id.new_devices);
  newDevicesListView.setAdapter(mNewDevicesArrayAdapter);
  newDevicesListView.setOnItemClickListener(mDeviceClickListener);
  IntentFilter filter=new IntentFilter(BluetoothDevice.ACTION_FOUND);
  this.registerReceiver(mReceiver,filter);
  filter=new IntentFilter(BluetoothAdapter.ACTION_DISCOVERY_FINISHED);
  this.registerReceiver(mReceiver,filter);
  mBtAdapter=BluetoothAdapter.getDefaultAdapter();
  Set<BluetoothDevice> pairedDevices=mBtAdapter.getBondedDevices();
  if (pairedDevices.size() > 0) {
    findViewById(R.id.title_paired_devices).setVisibility(View.VISIBLE);
    for (    BluetoothDevice device : pairedDevices) {
      mPairedDevicesArrayAdapter.add(device.getName() + ""String_Node_Str"" + device.getAddress());
    }
  }
 else {
    String noDevices=getResources().getText(R.string.none_paired).toString();
    mPairedDevicesArrayAdapter.add(noDevices);
  }
}",0.9868088689306764
161427,"/** 
 * Start device discover with the BluetoothAdapter
 */
private void doDiscovery(){
  if (D)   Log.d(TAG,""String_Node_Str"");
  setProgressBarIndeterminateVisibility(true);
  setTitle(R.string.scanning);
  findViewById(R.id.title_new_devices).setVisibility(View.VISIBLE);
  if (mBtAdapter.isDiscovering()) {
    mBtAdapter.cancelDiscovery();
  }
  mBtAdapter.startDiscovery();
}","/** 
 * Start device discover with the BluetoothAdapter
 */
private void doDiscovery(){
  if (D)   Log.d(TAG,""String_Node_Str"");
  mNewDevicesArrayAdapter.clear();
  mNewDevicesSet.clear();
  setProgressBarIndeterminateVisibility(true);
  setTitle(R.string.scanning);
  findViewById(R.id.title_new_devices).setVisibility(View.VISIBLE);
  if (mBtAdapter.isDiscovering()) {
    mBtAdapter.cancelDiscovery();
  }
  mBtAdapter.startDiscovery();
}",0.9258809234507898
161428,"@Override public void onReceive(Context context,Intent intent){
  String action=intent.getAction();
  if (BluetoothDevice.ACTION_FOUND.equals(action)) {
    BluetoothDevice device=intent.getParcelableExtra(BluetoothDevice.EXTRA_DEVICE);
    if (device.getBondState() != BluetoothDevice.BOND_BONDED) {
      mNewDevicesArrayAdapter.add(device.getName() + ""String_Node_Str"" + device.getAddress());
    }
  }
 else   if (BluetoothAdapter.ACTION_DISCOVERY_FINISHED.equals(action)) {
    setProgressBarIndeterminateVisibility(false);
    setTitle(R.string.select_device);
    if (mNewDevicesArrayAdapter.getCount() == 0) {
      String noDevices=getResources().getText(R.string.none_found).toString();
      mNewDevicesArrayAdapter.add(noDevices);
    }
  }
}","@Override public void onReceive(Context context,Intent intent){
  String action=intent.getAction();
  if (BluetoothDevice.ACTION_FOUND.equals(action)) {
    BluetoothDevice device=intent.getParcelableExtra(BluetoothDevice.EXTRA_DEVICE);
    if (device.getBondState() != BluetoothDevice.BOND_BONDED) {
      String address=device.getAddress();
      if (!mNewDevicesSet.contains(address)) {
        mNewDevicesSet.add(address);
        mNewDevicesArrayAdapter.add(device.getName() + ""String_Node_Str"" + device.getAddress());
      }
    }
  }
 else   if (BluetoothAdapter.ACTION_DISCOVERY_FINISHED.equals(action)) {
    setProgressBarIndeterminateVisibility(false);
    setTitle(R.string.select_device);
    if (mNewDevicesSet.isEmpty()) {
      String noDevices=getResources().getText(R.string.none_found).toString();
      mNewDevicesArrayAdapter.add(noDevices);
    }
    scanButton.setVisibility(View.VISIBLE);
  }
}",0.8690974297668859
161429,"@Override public Result preprocessEnter(@NotNull final PsiFile file,@NotNull final Editor editor,@NotNull final Ref<Integer> caretOffset,@NotNull final Ref<Integer> caretAdvance,@NotNull final DataContext dataContext,final EditorActionHandler originalHandler){
  final Result result=skipWithResultQ(file,editor,dataContext);
  if (result != null) {
    return result;
  }
  Document document=editor.getDocument();
  final Project project=editor.getProject();
  PsiElement atCaret=file.findElementAt(caretOffset.get());
  if (atCaret == null) {
    return Result.Continue;
  }
  if (!(atCaret.getParent() instanceof FunctionCall && atCaret.getNode().getElementType() == MathematicaElementTypes.RIGHT_BRACKET)) {
    return Result.Continue;
  }
  final int offset=caretOffset.get();
  final int lineNumber=document.getLineNumber(offset);
  final int lineStartOffset=document.getLineStartOffset(lineNumber);
  final int prevLineStartOffset=lineNumber > 0 ? document.getLineStartOffset(lineNumber - 1) : lineStartOffset;
  final EditorHighlighter highlighter=((EditorEx)editor).getHighlighter();
  final HighlighterIterator iterator=highlighter.createIterator(caretOffset.get() - 1);
  final IElementType type=getNonWhitespaceElementType(iterator,lineStartOffset,prevLineStartOffset);
  if (!separators.contains(type)) {
    return Result.Continue;
  }
  originalHandler.execute(editor,editor.getCaretModel().getCurrentCaret(),dataContext);
  if (project != null) {
    CodeStyleManager.getInstance(project).adjustLineIndent(editor.getDocument(),caretOffset.get() + 1);
  }
  return Result.DefaultForceIndent;
}","@Override public Result preprocessEnter(@NotNull final PsiFile file,@NotNull final Editor editor,@NotNull final Ref<Integer> caretOffset,@NotNull final Ref<Integer> caretAdvance,@NotNull final DataContext dataContext,final EditorActionHandler originalHandler){
  final Result result=skipWithResultQ(file,editor,dataContext);
  if (result != null) {
    return result;
  }
  Document document=editor.getDocument();
  final Project project=editor.getProject();
  PsiElement atCaret=file.findElementAt(caretOffset.get());
  if (atCaret == null) {
    return Result.Continue;
  }
  if (!(atCaret.getParent() instanceof FunctionCall && atCaret.getNode().getElementType() == MathematicaElementTypes.RIGHT_BRACKET)) {
    return Result.Continue;
  }
  final int offset=caretOffset.get();
  final int lineNumber=document.getLineNumber(offset);
  final int lineStartOffset=document.getLineStartOffset(lineNumber);
  final int prevLineStartOffset=lineNumber > 0 ? document.getLineStartOffset(lineNumber - 1) : lineStartOffset;
  final EditorHighlighter highlighter=((EditorEx)editor).getHighlighter();
  final HighlighterIterator iterator=highlighter.createIterator(caretOffset.get() - 1);
  final IElementType type=getNonWhitespaceElementType(iterator,lineStartOffset,prevLineStartOffset);
  if (!separators.contains(type)) {
    return Result.Continue;
  }
  originalHandler.execute(editor,editor.getCaretModel().getCurrentCaret(),dataContext);
  if (project != null) {
    CodeStyleManager.getInstance(project).adjustLineIndent(editor.getDocument(),caretOffset.get() + 1);
  }
  PsiDocumentManager.getInstance(file.getProject()).commitDocument(document);
  return Result.DefaultForceIndent;
}",0.9763061968408262
161430,"@Override public boolean isApplicable(@NotNull PsiElement[] elements){
  return true;
}","@Override public boolean isApplicable(@NotNull PsiElement[] elements){
  return elements.length > 0 && elements[0].getContainingFile() instanceof MathematicaPsiFile;
}",0.6692913385826772
161431,"@NotNull @Override public PsiElement[] getElementsToSurround(PsiFile file,int startOffset,int endOffset){
  return findElementsInRange(file,startOffset,endOffset);
}","@NotNull @Override public PsiElement[] getElementsToSurround(PsiFile file,int startOffset,int endOffset){
  if (file instanceof MathematicaPsiFile) {
    return findElementsInRange(file,startOffset,endOffset);
  }
  return PsiElement.EMPTY_ARRAY;
}",0.7990314769975787
161432,"@Nullable @Override public TextRange adjustSurroundWithRange(PsiFile file,TextRange selectedRange,boolean hasSelection){
  int startOffset=selectedRange.getStartOffset();
  int endOffset=selectedRange.getEndOffset();
  if (endOffset < startOffset) {
    int tmp=endOffset;
    endOffset=startOffset;
    startOffset=tmp;
  }
  if (hasSelection) {
    final FileViewProvider viewProvider=file.getViewProvider();
    PsiElement element1=viewProvider.findElementAt(startOffset,MathematicaLanguage.INSTANCE);
    PsiElement element2=viewProvider.findElementAt(endOffset - 1,MathematicaLanguage.INSTANCE);
    if (element1 instanceof PsiWhiteSpace) {
      startOffset=element1.getTextRange().getEndOffset();
      element1=file.findElementAt(startOffset);
    }
    if (element2 instanceof PsiWhiteSpace) {
      endOffset=element2.getTextRange().getStartOffset();
      element2=file.findElementAt(endOffset - 1);
    }
    if (element1 != null && element2 != null) {
      final int startOffset1=element1.getTextRange().getStartOffset();
      final int endOffset1=element2.getTextRange().getEndOffset();
      if (startOffset1 < endOffset1) {
        return TextRange.create(startOffset1,endOffset1);
      }
    }
    return null;
  }
 else {
    final Project project=file.getProject();
    final Editor selectedTextEditor=FileEditorManager.getInstance(project).getSelectedTextEditor();
    if (selectedTextEditor == null) {
      return null;
    }
    PsiElement element=PsiUtilBase.getElementAtCaret(selectedTextEditor);
    if (element == null) {
      return null;
    }
    SurroundExpressionFinder expressionFinder=new SurroundExpressionFinder();
    element.accept(expressionFinder);
    PsiElement bestExpression=expressionFinder.getBestExpression();
    if (bestExpression instanceof Expression) {
      final TextRange textRange=bestExpression.getTextRange();
      selectedTextEditor.getSelectionModel().setSelection(textRange.getStartOffset(),textRange.getEndOffset());
      return bestExpression.getTextRange();
    }
  }
  return null;
}","@Nullable @Override public TextRange adjustSurroundWithRange(PsiFile file,TextRange selectedRange,boolean hasSelection){
  if (!(file instanceof MathematicaPsiFile)) {
    return selectedRange;
  }
  int startOffset=selectedRange.getStartOffset();
  int endOffset=selectedRange.getEndOffset();
  if (endOffset < startOffset) {
    int tmp=endOffset;
    endOffset=startOffset;
    startOffset=tmp;
  }
  if (hasSelection) {
    final FileViewProvider viewProvider=file.getViewProvider();
    PsiElement element1=viewProvider.findElementAt(startOffset,MathematicaLanguage.INSTANCE);
    PsiElement element2=viewProvider.findElementAt(endOffset - 1,MathematicaLanguage.INSTANCE);
    if (element1 instanceof PsiWhiteSpace) {
      startOffset=element1.getTextRange().getEndOffset();
      element1=file.findElementAt(startOffset);
    }
    if (element2 instanceof PsiWhiteSpace) {
      endOffset=element2.getTextRange().getStartOffset();
      element2=file.findElementAt(endOffset - 1);
    }
    if (element1 != null && element2 != null) {
      final int startOffset1=element1.getTextRange().getStartOffset();
      final int endOffset1=element2.getTextRange().getEndOffset();
      if (startOffset1 < endOffset1) {
        return TextRange.create(startOffset1,endOffset1);
      }
    }
    return null;
  }
 else {
    final Project project=file.getProject();
    final Editor selectedTextEditor=FileEditorManager.getInstance(project).getSelectedTextEditor();
    if (selectedTextEditor == null) {
      return null;
    }
    PsiElement element=PsiUtilBase.getElementAtCaret(selectedTextEditor);
    if (element == null) {
      return null;
    }
    SurroundExpressionFinder expressionFinder=new SurroundExpressionFinder();
    element.accept(expressionFinder);
    PsiElement bestExpression=expressionFinder.getBestExpression();
    if (bestExpression instanceof Expression) {
      final TextRange textRange=bestExpression.getTextRange();
      selectedTextEditor.getSelectionModel().setSelection(textRange.getStartOffset(),textRange.getEndOffset());
      return bestExpression.getTextRange();
    }
  }
  return selectedRange;
}",0.977587029089175
161433,"@Override public boolean isReferenceTo(PsiElement element){
  return getManager().areElementsEquivalent(resolve(),element);
}","@Override public boolean isReferenceTo(PsiElement element){
  return (element instanceof Symbol || element instanceof LightSymbol) && getManager().areElementsEquivalent(resolve(),element);
}",0.7936507936507936
161434,"public String submit(){
  if (isEmpty(this.myDescription)) {
    throw new RuntimeException(DESCRIPTION);
  }
  String project=""String_Node_Str"";
  if (isEmpty(project)) {
    throw new RuntimeException(PROJECT);
  }
  String area=""String_Node_Str"";
  if (isEmpty(area)) {
    throw new RuntimeException(AREA);
  }
  String response=""String_Node_Str"";
  String data;
  try {
    String userName=""String_Node_Str"";
    data=URLEncoder.encode(""String_Node_Str"",""String_Node_Str"") + ""String_Node_Str"" + URLEncoder.encode(userName,""String_Node_Str"");
    data+=""String_Node_Str"" + URLEncoder.encode(""String_Node_Str"",""String_Node_Str"") + ""String_Node_Str""+ URLEncoder.encode(""String_Node_Str"",""String_Node_Str"");
    URL url=new URL(LOGIN_URL);
    URLConnection conn=url.openConnection();
    conn.setDoOutput(true);
    OutputStreamWriter wr=new OutputStreamWriter(conn.getOutputStream());
    wr.write(data);
    wr.flush();
    BufferedReader rd=new BufferedReader(new InputStreamReader(conn.getInputStream()));
    String line;
    while ((line=rd.readLine()) != null) {
      response+=line;
    }
    log.info(response);
    myCookieManager.storeCookies(conn);
    this.myDescription=this.myDescription.replaceAll(""String_Node_Str"",""String_Node_Str"");
    data=URLEncoder.encode(""String_Node_Str"",""String_Node_Str"") + ""String_Node_Str"" + URLEncoder.encode(project,""String_Node_Str"");
    data+=""String_Node_Str"" + URLEncoder.encode(""String_Node_Str"",""String_Node_Str"") + ""String_Node_Str""+ URLEncoder.encode(""String_Node_Str"",""String_Node_Str"");
    data+=""String_Node_Str"" + URLEncoder.encode(""String_Node_Str"",""String_Node_Str"") + ""String_Node_Str""+ URLEncoder.encode(myDescription,""String_Node_Str"");
    data+=""String_Node_Str"" + URLEncoder.encode(""String_Node_Str"",""String_Node_Str"") + ""String_Node_Str""+ URLEncoder.encode(myExtraInformation,""String_Node_Str"");
    data+=""String_Node_Str"" + URLEncoder.encode(""String_Node_Str"",""String_Node_Str"") + ""String_Node_Str""+ URLEncoder.encode(""String_Node_Str"",""String_Node_Str"");
    data+=""String_Node_Str"" + URLEncoder.encode(""String_Node_Str"",""String_Node_Str"") + ""String_Node_Str""+ URLEncoder.encode(""String_Node_Str"",""String_Node_Str"");
    if (this.myAffectedVersion != null) {
      data+=""String_Node_Str"" + URLEncoder.encode(""String_Node_Str"",""String_Node_Str"") + ""String_Node_Str""+ URLEncoder.encode(this.myAffectedVersion,""String_Node_Str"");
    }
    data=data.replaceAll(""String_Node_Str"",""String_Node_Str"");
    url=new URL(SERVER_ISSUE_URL);
    conn=url.openConnection();
    conn.setDoOutput(true);
    myCookieManager.setCookies(conn);
    wr=new OutputStreamWriter(conn.getOutputStream());
    wr.write(data);
    wr.flush();
    rd=new BufferedReader(new InputStreamReader(conn.getInputStream()));
    while ((line=rd.readLine()) != null) {
      response+=line;
    }
  }
 catch (  Exception e) {
    log.info(""String_Node_Str"",e);
  }
  return response;
}","private String submit(){
  if (isEmpty(this.myDescription)) {
    throw new RuntimeException(DESCRIPTION);
  }
  String project=""String_Node_Str"";
  if (isEmpty(project)) {
    throw new RuntimeException(PROJECT);
  }
  String area=""String_Node_Str"";
  if (isEmpty(area)) {
    throw new RuntimeException(AREA);
  }
  String response=""String_Node_Str"";
  String data;
  try {
    String userName=""String_Node_Str"";
    data=URLEncoder.encode(""String_Node_Str"",""String_Node_Str"") + ""String_Node_Str"" + URLEncoder.encode(userName,""String_Node_Str"");
    data+=""String_Node_Str"" + URLEncoder.encode(""String_Node_Str"",""String_Node_Str"") + ""String_Node_Str""+ URLEncoder.encode(""String_Node_Str"",""String_Node_Str"");
    URL url=new URL(LOGIN_URL);
    URLConnection conn=url.openConnection();
    conn.setDoOutput(true);
    OutputStreamWriter wr=new OutputStreamWriter(conn.getOutputStream());
    wr.write(data);
    wr.flush();
    BufferedReader rd=new BufferedReader(new InputStreamReader(conn.getInputStream()));
    String line;
    while ((line=rd.readLine()) != null) {
      response+=line;
    }
    log.info(response);
    this.myDescription=this.myDescription.replaceAll(""String_Node_Str"",""String_Node_Str"");
    data=URLEncoder.encode(""String_Node_Str"",""String_Node_Str"") + ""String_Node_Str"" + URLEncoder.encode(project,""String_Node_Str"");
    data+=""String_Node_Str"" + URLEncoder.encode(""String_Node_Str"",""String_Node_Str"") + ""String_Node_Str""+ URLEncoder.encode(""String_Node_Str"",""String_Node_Str"");
    data+=""String_Node_Str"" + URLEncoder.encode(""String_Node_Str"",""String_Node_Str"") + ""String_Node_Str""+ URLEncoder.encode(myDescription,""String_Node_Str"");
    data+=""String_Node_Str"" + URLEncoder.encode(""String_Node_Str"",""String_Node_Str"") + ""String_Node_Str""+ URLEncoder.encode(myExtraInformation,""String_Node_Str"");
    data+=""String_Node_Str"" + URLEncoder.encode(""String_Node_Str"",""String_Node_Str"") + ""String_Node_Str""+ URLEncoder.encode(""String_Node_Str"",""String_Node_Str"");
    data+=""String_Node_Str"" + URLEncoder.encode(""String_Node_Str"",""String_Node_Str"") + ""String_Node_Str""+ URLEncoder.encode(""String_Node_Str"",""String_Node_Str"");
    if (this.myAffectedVersion != null) {
      data+=""String_Node_Str"" + URLEncoder.encode(""String_Node_Str"",""String_Node_Str"") + ""String_Node_Str""+ URLEncoder.encode(this.myAffectedVersion,""String_Node_Str"");
    }
    data=data.replaceAll(""String_Node_Str"",""String_Node_Str"");
    url=new URL(SERVER_ISSUE_URL);
    conn=url.openConnection();
    conn.setDoOutput(true);
    wr=new OutputStreamWriter(conn.getOutputStream());
    wr.write(data);
    wr.flush();
    rd=new BufferedReader(new InputStreamReader(conn.getInputStream()));
    while ((line=rd.readLine()) != null) {
      response+=line;
    }
  }
 catch (  Exception e) {
    e.printStackTrace();
    log.info(""String_Node_Str"",e);
  }
  return response;
}",0.9803651395108508
161435,"@Override public String getReportActionText(){
  return ""String_Node_Str"";
}","@NotNull @Override public String getReportActionText(){
  return ""String_Node_Str"";
}",0.9440993788819876
161436,"/** 
 * There are several places where a local variable can be ""defined"". First I check all localization constructs which are always function call like <code >Module[{blub},...]</code>. The complete list of localization constructs can be found in   {@link LocalizationConstruct.ConstructType}. <p/> Secondly I check the patterns in e.g. <code >f[var_]:=...</code> for <code >SetDelayed</code> and <code >TagSetDelayed</code>. <p/> Finally, <code >RuleDelayed</code> constructs are checked.
 * @param element Element to check for defining the {@link #myStartElement}.
 * @param state   State of the resolving.
 * @return <code >false</code> if the search can be stopped, <code >true</code> otherwise
 */
@Override public boolean execute(@NotNull PsiElement element,ResolveState state){
  if (element instanceof FunctionCall) {
    final FunctionCall functionCall=(FunctionCall)element;
    if (functionCall.isScopingConstruct()) {
      List<Symbol> vars=Lists.newArrayList();
      final LocalizationConstruct.ConstructType scopingConstruct=functionCall.getScopingConstruct();
      if (LocalizationConstruct.isFunctionLike(scopingConstruct)) {
        vars=MathematicaPsiUtililities.getLocalFunctionVariables(functionCall);
      }
      if (LocalizationConstruct.isModuleLike(scopingConstruct)) {
        vars=MathematicaPsiUtililities.getLocalModuleLikeVariables(functionCall);
      }
      if (LocalizationConstruct.isTableLike(scopingConstruct)) {
        vars=MathematicaPsiUtililities.getLocalTableLikeVariables(functionCall);
      }
      if (LocalizationConstruct.isManipulateLike(scopingConstruct)) {
        vars=MathematicaPsiUtililities.getLocalManipulateLikeVariables(functionCall);
      }
      if (LocalizationConstruct.isCompileLike(scopingConstruct)) {
        vars=MathematicaPsiUtililities.getLocalCompileLikeVariables(functionCall);
      }
      if (LocalizationConstruct.isLimitLike(scopingConstruct)) {
        vars=MathematicaPsiUtililities.getLocalLimitVariables(functionCall);
      }
      for (      Symbol v : vars) {
        if (v.getSymbolName().equals(myStartElement.getSymbolName())) {
          myReferringSymbol=v;
          myLocalizationSymbol=element.getFirstChild();
          myLocalization=scopingConstruct;
          return false;
        }
      }
    }
  }
 else   if (element instanceof SetDelayed || element instanceof TagSetDelayed) {
    MathematicaPatternVisitor patternVisitor=new MathematicaPatternVisitor();
    element.accept(patternVisitor);
    for (    Symbol p : patternVisitor.getMyPatternSymbols()) {
      if (p.getSymbolName().equals(myStartElement.getSymbolName())) {
        myReferringSymbol=p;
        myLocalization=LocalizationConstruct.ConstructType.SETDELAYEDPATTERN;
        return false;
      }
    }
  }
 else   if (element instanceof RuleDelayed) {
    PsiElement lhs=element.getFirstChild();
    MathematicaPatternVisitor patternVisitor=new MathematicaPatternVisitor();
    lhs.accept(patternVisitor);
    for (    Symbol symbol : patternVisitor.getMyPatternSymbols()) {
      if (symbol.getSymbolName().equals(myStartElement.getSymbolName())) {
        myReferringSymbol=symbol;
        myLocalization=LocalizationConstruct.ConstructType.RULEDELAYED;
        return false;
      }
    }
  }
  return true;
}","/** 
 * There are several places where a local variable can be ""defined"". First I check all localization constructs which are always function call like <code >Module[{blub},...]</code>. The complete list of localization constructs can be found in   {@link LocalizationConstruct.ConstructType}. <p/> Secondly I check the patterns in e.g. <code >f[var_]:=...</code> for <code >SetDelayed</code> and <code >TagSetDelayed</code>. <p/> Finally, <code >RuleDelayed</code> constructs are checked.
 * @param element Element to check for defining the {@link #myStartElement}.
 * @param state   State of the resolving.
 * @return <code >false</code> if the search can be stopped, <code >true</code> otherwise
 */
@Override public boolean execute(@NotNull PsiElement element,ResolveState state){
  if (element instanceof FunctionCall) {
    final FunctionCall functionCall=(FunctionCall)element;
    if (functionCall.isScopingConstruct()) {
      List<Symbol> vars=Lists.newArrayList();
      final LocalizationConstruct.ConstructType scopingConstruct=functionCall.getScopingConstruct();
      if (LocalizationConstruct.isFunctionLike(scopingConstruct)) {
        vars=MathematicaPsiUtililities.getLocalFunctionVariables(functionCall);
      }
      if (LocalizationConstruct.isModuleLike(scopingConstruct)) {
        vars=MathematicaPsiUtililities.getLocalModuleLikeVariables(functionCall);
      }
      if (LocalizationConstruct.isTableLike(scopingConstruct)) {
        vars=MathematicaPsiUtililities.getLocalTableLikeVariables(functionCall);
      }
      if (LocalizationConstruct.isManipulateLike(scopingConstruct)) {
        vars=MathematicaPsiUtililities.getLocalManipulateLikeVariables(functionCall);
      }
      if (LocalizationConstruct.isCompileLike(scopingConstruct)) {
        vars=MathematicaPsiUtililities.getLocalCompileLikeVariables(functionCall);
      }
      if (LocalizationConstruct.isLimitLike(scopingConstruct)) {
        vars=MathematicaPsiUtililities.getLocalLimitVariables(functionCall);
      }
      for (      Symbol v : vars) {
        if (v.getSymbolName().equals(myStartElement.getSymbolName())) {
          myReferringSymbol=v;
          myLocalizationSymbol=element.getFirstChild();
          myLocalization=scopingConstruct;
          return false;
        }
      }
    }
  }
 else   if (element instanceof SetDelayed || element instanceof TagSetDelayed) {
    MathematicaPatternVisitor patternVisitor=new MathematicaPatternVisitor();
    element.accept(patternVisitor);
    for (    Symbol p : patternVisitor.getMyPatternSymbols()) {
      if (p.getSymbolName().equals(myStartElement.getSymbolName())) {
        myReferringSymbol=p;
        myLocalization=LocalizationConstruct.ConstructType.SETDELAYEDPATTERN;
        myLocalizationSymbol=element;
        return false;
      }
    }
  }
 else   if (element instanceof RuleDelayed) {
    PsiElement lhs=element.getFirstChild();
    MathematicaPatternVisitor patternVisitor=new MathematicaPatternVisitor();
    lhs.accept(patternVisitor);
    for (    Symbol symbol : patternVisitor.getMyPatternSymbols()) {
      if (symbol.getSymbolName().equals(myStartElement.getSymbolName())) {
        myReferringSymbol=symbol;
        myLocalization=LocalizationConstruct.ConstructType.RULEDELAYED;
        myLocalizationSymbol=element;
        return false;
      }
    }
  }
  return true;
}",0.9849624060150376
161437,"@Override public String getName(){
  return ""String_Node_Str"";
}","@NotNull @Override public String getName(){
  return ""String_Node_Str"";
}",0.9343065693430656
161438,"@Override public MathematicaModuleBuilder createModuleBuilder(){
  return new MathematicaModuleBuilder.Empty();
}","@NotNull @Override public MathematicaModuleBuilder createModuleBuilder(){
  return new MathematicaModuleBuilder.Empty();
}",0.9617021276595744
161439,"@Override public String getDescription(){
  return ""String_Node_Str"";
}","@NotNull @Override public String getDescription(){
  return ""String_Node_Str"";
}",0.9403973509933776
161440,"@Nullable @Override public String suggestHomePath(){
  String path=""String_Node_Str"";
  if (new File(path).exists()) {
    return path;
  }
  return null;
}","@Nullable @Override public String suggestHomePath(){
  final String property=System.getProperty(""String_Node_Str"");
  String path=""String_Node_Str"";
  if (property.matches(""String_Node_Str"")) {
    path=""String_Node_Str"";
  }
  if (new File(path).exists()) {
    return path;
  }
  return null;
}",0.6415929203539823
161441,"@Nullable @Override public String getVersionString(Sdk sdk){
  return getMathematicaVersionString(sdk.getHomePath());
}","@Nullable @Override public String getVersionString(@NotNull Sdk sdk){
  return getMathematicaVersionString(sdk.getHomePath());
}",0.9635627530364372
161442,"/** 
 * Extracts the precedence of an infix operator connected to the first token in the token stream of builder.
 * @param builder Builder from which the first token is extracted to find the required precedence
 * @return The precedence of the specified token or 0 whether the precedence is not available.
 */
public static int getPrecedence(PsiBuilder builder){
  if (ourInstance == null) {
    ourInstance=new ParseletProvider();
  }
  IElementType token=builder.getTokenType();
  if (token == null) {
    return 0;
  }
  InfixParselet parselet=INFIX_PARSELETS.get(token);
  if (parselet != null) {
    return parselet.getMyPrecedence();
  }
  return 0;
}","/** 
 * Extracts the precedence of an infix operator connected to the first token in the token stream of builder.
 * @param builder Builder from which the first token is extracted to find the required precedence
 * @return The precedence of the specified token or 0 whether the precedence is not available.
 */
public static int getPrecedence(PsiBuilder builder){
  IElementType token=builder.getTokenType();
  if (token == null) {
    return 0;
  }
  InfixParselet parselet=INFIX_PARSELETS.get(token);
  if (parselet != null) {
    return parselet.getMyPrecedence();
  }
  return 0;
}",0.9412711182622688
161443,"/** 
 * Provides the infix-parselet which is connected to the specified token.
 * @param token The token for which the parselet is wanted
 * @return The {@link InfixParselet} if available for this token and {@code null} otherwise.
 */
public static InfixParselet getInfixParselet(IElementType token){
  if (ourInstance == null) {
    ourInstance=new ParseletProvider();
  }
  return INFIX_PARSELETS.get(token);
}","/** 
 * Provides the infix-parselet which is connected to the specified token.
 * @param token The token for which the parselet is wanted
 * @return The {@link InfixParselet} if available for this token and {@code null} otherwise.
 */
public static InfixParselet getInfixParselet(IElementType token){
  return INFIX_PARSELETS.get(token);
}",0.9027962716378164
161444,"/** 
 * Provides the prefix-parselet which is connected to the specified token.
 * @param token The token for which the parselet is wanted
 * @return The {@link PrefixParselet} if available for this token and {@code null} otherwise.
 */
public static PrefixParselet getPrefixParselet(IElementType token){
  if (ourInstance == null) {
    ourInstance=new ParseletProvider();
  }
  return PREFIX_PARSELETS.get(token);
}","/** 
 * Provides the prefix-parselet which is connected to the specified token.
 * @param token The token for which the parselet is wanted
 * @return The {@link PrefixParselet} if available for this token and {@code null} otherwise.
 */
public static PrefixParselet getPrefixParselet(IElementType token){
  return PREFIX_PARSELETS.get(token);
}",0.9040735873850198
161445,"private ParseletProvider(){
  registerAll();
}","private ParseletProvider(){
}",0.7733333333333333
161446,"/** 
 * Implementation note: This roundabout way of implementation is required to ensure that a   {@link CloudFactory} bean if created in some other configuration is available, we should usethat.
 */
@Override public void setBeanFactory(BeanFactory beanFactory) throws BeansException {
  if (cloudFactory == null) {
    try {
      cloudFactory=beanFactory.getBean(CloudFactory.class);
    }
 catch (    NoSuchBeanDefinitionException ex) {
      cloudFactory=new CloudFactory();
      ((SingletonBeanRegistry)beanFactory).registerSingleton(CLOUD_FACTORY_BEAN_NAME,cloudFactory);
    }
  }
  this.cloud=cloudFactory.getCloud();
  this.connectionFactory=new ServiceConnectionFactory();
}","/** 
 * Implementation note: This roundabout way of implementation is required to ensure that a   {@link CloudFactory} bean if created in some other configuration is available, we should usethat.
 */
@Override public void setBeanFactory(BeanFactory beanFactory) throws BeansException {
  if (cloudFactory == null) {
    try {
      cloudFactory=beanFactory.getBean(CloudFactory.class);
    }
 catch (    NoSuchBeanDefinitionException ex) {
      cloudFactory=new CloudFactory();
      ((SingletonBeanRegistry)beanFactory).registerSingleton(CLOUD_FACTORY_BEAN_NAME,cloudFactory);
    }
  }
  this.cloud=cloudFactory.getCloud();
  this.connectionFactory=new CloudServiceConnectionFactory(cloud);
}",0.9927536231884058
161447,"/** 
 * Get the cloud factory. Most applications will never need this method, but provided here to cover corner cases. Implementation note: This roundabout way of implementation is required to ensure that a CloudFoundry bean if created in some other configuration is available, we should use that.
 * @return
 */
protected CloudFactory cloudFactory(){
  if (cloudFactory == null) {
    cloudFactory=beanFactory.getBean(CloudFactory.class);
    if (cloudFactory == null) {
      cloudFactory=new CloudFactory();
      ((SingletonBeanRegistry)beanFactory).registerSingleton(CLOUD_FACTORY_BEAN_NAME,cloudFactory);
    }
  }
  return cloudFactory;
}","/** 
 * Get the cloud factory. Most applications will never need this method, but provided here to cover corner cases. Implementation note: This roundabout way of implementation is required to ensure that a CloudFoundry bean if created in some other configuration is available, we should use that.
 * @return
 */
protected CloudFactory cloudFactory(){
  if (cloudFactory == null) {
    try {
      cloudFactory=beanFactory.getBean(CloudFactory.class);
    }
 catch (    NoSuchBeanDefinitionException ex) {
      cloudFactory=new CloudFactory();
      ((SingletonBeanRegistry)beanFactory).registerSingleton(CLOUD_FACTORY_BEAN_NAME,cloudFactory);
    }
  }
  return cloudFactory;
}",0.9395770392749244
161448,"public static synchronized TcaDb getInstance(Context context){
  if (instance == null || !instance.isOpen()) {
    instance=Room.databaseBuilder(context.getApplicationContext(),TcaDb.class,Const.DATABASE_NAME).allowMainThreadQueries().addMigrations(migrations).fallbackToDestructiveMigration().build();
  }
  return instance;
}","public static synchronized TcaDb getInstance(Context context){
  if (instance == null) {
    instance=Room.databaseBuilder(context.getApplicationContext(),TcaDb.class,Const.DATABASE_NAME).allowMainThreadQueries().addMigrations(migrations).fallbackToDestructiveMigration().build();
  }
  return instance;
}",0.9651898734177216
161449,"private static void addStationResult(Collection<StationResult> results,JSONObject point) throws JSONException {
  String name=point.getString(""String_Node_Str"");
  String id=point.getJSONObject(""String_Node_Str"").getString(""String_Node_Str"");
  int quality=point.getInt(""String_Node_Str"");
  results.add(new StationResult(name,id,quality));
}","private static void addStationResult(Collection<StationResult> results,JSONObject point) throws JSONException {
  String name=point.getString(""String_Node_Str"");
  String id=point.getJSONObject(""String_Node_Str"").getString(""String_Node_Str"");
  int quality=(point.has(""String_Node_Str"")) ? point.getInt(""String_Node_Str"") : 0;
  results.add(new StationResult(name,id,quality));
}",0.9486823855755896
161450,"@GET(API_KINOS + ""String_Node_Str"") Observable<List<Kino>> getKinos(@Path(""String_Node_Str"") String lastId);","@GET(API_KINOS + ""String_Node_Str"") Flowable<List<Kino>> getKinos(@Path(""String_Node_Str"") String lastId);",0.9532710280373832
161451,"public Observable<List<Kino>> getKinos(String lastId){
  return service.getKinos(lastId);
}","public Flowable<List<Kino>> getKinos(String lastId){
  return service.getKinos(lastId);
}",0.9444444444444444
161452,"protected void initFilterCheckboxes(){
  boolean settings=Utils.getSettingBool(this,Const.CALENDAR_FILTER_FIT_SCREEN,false);
  menuItemFilterFitScreen.setChecked(settings);
  applyFilterFitScreen(settings);
  settings=Utils.getSettingBool(this,Const.CALENDAR_FILTER_CANCELED,true);
  menuItemFilterCanceled.setChecked(settings);
  applyFilterCanceled(settings);
  int savedMin=Integer.parseInt(Utils.getSetting(this,Const.CALENDAR_FILTER_HOUR_LIMIT_MIN,Const.CALENDAR_FILTER_HOUR_LIMIT_MIN_DEFAULT));
  int savedMax=Integer.parseInt(Utils.getSetting(this,Const.CALENDAR_FILTER_HOUR_LIMIT_MAX,Const.CALENDAR_FILTER_HOUR_LIMIT_MAX_DEFAULT));
  applyFilterLimitHours(savedMin,savedMax);
}","protected void initFilterCheckboxes(){
  boolean settings=Utils.getSettingBool(this,Const.CALENDAR_FILTER_CANCELED,true);
  menuItemFilterCanceled.setChecked(settings);
  applyFilterCanceled(settings);
  int savedMin=Integer.parseInt(Utils.getSetting(this,Const.CALENDAR_FILTER_HOUR_LIMIT_MIN,Const.CALENDAR_FILTER_HOUR_LIMIT_MIN_DEFAULT));
  int savedMax=Integer.parseInt(Utils.getSetting(this,Const.CALENDAR_FILTER_HOUR_LIMIT_MAX,Const.CALENDAR_FILTER_HOUR_LIMIT_MAX_DEFAULT));
  applyFilterLimitHours(savedMin,savedMax);
}",0.8363636363636363
161453,"@Override public boolean onOptionsItemSelected(MenuItem item){
  int i=item.getItemId();
switch (i) {
case R.id.action_switch_view_mode:
    mWeekMode=!mWeekMode;
  Utils.setSetting(this,Const.CALENDAR_WEEK_MODE,mWeekMode);
this.refreshWeekView();
return true;
case R.id.action_export_calendar:
exportCalendarToGoogle();
Utils.setSetting(this,Const.SYNC_CALENDAR,true);
supportInvalidateOptionsMenu();
return true;
case R.id.action_delete_calendar:
deleteCalendarFromGoogle();
return true;
case R.id.action_create_event:
startActivity(new Intent(this,CreateEventActivity.class));
return true;
case R.id.action_calendar_filter_canceled:
item.setChecked(!item.isChecked());
applyFilterCanceled(item.isChecked());
return true;
case R.id.action_calendar_filter_fit_screen:
item.setChecked(!item.isChecked());
applyFilterFitScreen(item.isChecked());
return true;
case R.id.action_calendar_filter_hour_limit:
showHourLimitFilterDialog();
return true;
case R.id.action_update_calendar:
requestFetch(true);
refreshWeekView();
return true;
default :
isFetched=false;
return super.onOptionsItemSelected(item);
}
}","@Override public boolean onOptionsItemSelected(MenuItem item){
  int i=item.getItemId();
switch (i) {
case R.id.action_switch_view_mode:
    mWeekMode=!mWeekMode;
  Utils.setSetting(this,Const.CALENDAR_WEEK_MODE,mWeekMode);
this.refreshWeekView();
return true;
case R.id.action_export_calendar:
exportCalendarToGoogle();
Utils.setSetting(this,Const.SYNC_CALENDAR,true);
supportInvalidateOptionsMenu();
return true;
case R.id.action_delete_calendar:
deleteCalendarFromGoogle();
return true;
case R.id.action_create_event:
startActivity(new Intent(this,CreateEventActivity.class));
return true;
case R.id.action_calendar_filter_canceled:
item.setChecked(!item.isChecked());
applyFilterCanceled(item.isChecked());
return true;
case R.id.action_calendar_filter_hour_limit:
showHourLimitFilterDialog();
return true;
case R.id.action_update_calendar:
requestFetch(true);
refreshWeekView();
return true;
default :
isFetched=false;
return super.onOptionsItemSelected(item);
}
}",0.9353281853281852
161454,"protected void applyFilterLimitHours(int min,int max){
  Utils.setSetting(this,Const.CALENDAR_FILTER_HOUR_LIMIT_MIN,Integer.toString(min));
  Utils.setSetting(this,Const.CALENDAR_FILTER_HOUR_LIMIT_MAX,Integer.toString(max));
  mWeekView.setMinTime(min);
  mWeekView.setMaxTime(max);
  if (Utils.getSettingBool(this,Const.CALENDAR_FILTER_FIT_SCREEN,false)) {
    mWeekView.setHourHeight(calcHourHeightToFit(min,max));
  }
  applyFilterFitScreen(Utils.getSettingBool(this,Const.CALENDAR_FILTER_FIT_SCREEN,false));
}","protected void applyFilterLimitHours(int min,int max){
  int oldMax=Integer.parseInt(Utils.getSetting(this,Const.CALENDAR_FILTER_HOUR_LIMIT_MAX,""String_Node_Str""));
  Utils.setSetting(this,Const.CALENDAR_FILTER_HOUR_LIMIT_MIN,Integer.toString(min));
  Utils.setSetting(this,Const.CALENDAR_FILTER_HOUR_LIMIT_MAX,Integer.toString(max));
  if (min > oldMax) {
    mWeekView.setMaxTime(max);
    mWeekView.setMinTime(min);
  }
 else {
    mWeekView.setMinTime(min);
    mWeekView.setMaxTime(max);
  }
}",0.506429277942631
161455,"@Override public boolean onCreateOptionsMenu(Menu menu){
  super.onCreateOptionsMenu(menu);
  getMenuInflater().inflate(R.menu.menu_sync_calendar,menu);
  menuItemSwitchView=menu.findItem(R.id.action_switch_view_mode);
  menuItemFilterCanceled=menu.findItem(R.id.action_calendar_filter_canceled);
  menuItemFilterFitScreen=menu.findItem(R.id.action_calendar_filter_fit_screen);
  this.refreshWeekView();
  initFilterCheckboxes();
  return true;
}","@Override public boolean onCreateOptionsMenu(Menu menu){
  super.onCreateOptionsMenu(menu);
  getMenuInflater().inflate(R.menu.menu_sync_calendar,menu);
  menuItemSwitchView=menu.findItem(R.id.action_switch_view_mode);
  menuItemFilterCanceled=menu.findItem(R.id.action_calendar_filter_canceled);
  this.refreshWeekView();
  initFilterCheckboxes();
  return true;
}",0.9001233045622689
161456,"@Override public View getDropDownView(int position,View convertView,@NonNull ViewGroup parent){
  View v=LayoutInflater.from(parent.getContext()).inflate(R.layout.simple_spinner_dropdown_item_actionbar,parent,false);
  StudyRoomGroup studyRoomGroup=getItem(position);
  TextView name=v.findViewById(android.R.id.text1);
  TextView details=v.findViewById(android.R.id.text2);
  if (studyRoomGroup != null) {
    name.setText(studyRoomGroup.getName());
    details.setText(studyRoomGroup.getDetails());
  }
  return v;
}","@Override public View getDropDownView(int position,View convertView,@NonNull ViewGroup parent){
  View v=inflater.inflate(R.layout.simple_spinner_dropdown_item_actionbar,parent,false);
  StudyRoomGroup studyRoomGroup=getItem(position);
  TextView nameTextView=v.findViewById(android.R.id.text1);
  TextView detailsTextView=v.findViewById(android.R.id.text2);
  if (studyRoomGroup != null) {
    String name=studyRoomGroup.getName();
    String details=studyRoomGroup.getDetails();
    nameTextView.setText(name);
    detailsTextView.setText(details);
    if (details.isEmpty()) {
      detailsTextView.setVisibility(View.GONE);
    }
  }
  return v;
}",0.7630453378956373
161457,"private Spinner getStudyRoomGroupsSpinner(){
  SpinnerAdapter adapterCafeterias=new ArrayAdapter<StudyRoomGroup>(this,R.layout.simple_spinner_item_actionbar,android.R.id.text1,mStudyRoomGroupList){
    @Override public View getDropDownView(    int position,    View convertView,    @NonNull ViewGroup parent){
      View v=LayoutInflater.from(parent.getContext()).inflate(R.layout.simple_spinner_dropdown_item_actionbar,parent,false);
      StudyRoomGroup studyRoomGroup=getItem(position);
      TextView name=v.findViewById(android.R.id.text1);
      TextView details=v.findViewById(android.R.id.text2);
      if (studyRoomGroup != null) {
        name.setText(studyRoomGroup.getName());
        details.setText(studyRoomGroup.getDetails());
      }
      return v;
    }
  }
;
  Spinner spinner=findViewById(R.id.spinnerToolbar);
  spinner.setAdapter(adapterCafeterias);
  spinner.setOnItemSelectedListener(this);
  return spinner;
}","private Spinner getStudyRoomGroupsSpinner(){
  SpinnerAdapter adapterCafeterias=new ArrayAdapter<StudyRoomGroup>(this,R.layout.simple_spinner_item_actionbar,android.R.id.text1,mStudyRoomGroupList){
    final LayoutInflater inflater=LayoutInflater.from(getContext());
    @Override public View getDropDownView(    int position,    View convertView,    @NonNull ViewGroup parent){
      View v=inflater.inflate(R.layout.simple_spinner_dropdown_item_actionbar,parent,false);
      StudyRoomGroup studyRoomGroup=getItem(position);
      TextView nameTextView=v.findViewById(android.R.id.text1);
      TextView detailsTextView=v.findViewById(android.R.id.text2);
      if (studyRoomGroup != null) {
        String name=studyRoomGroup.getName();
        String details=studyRoomGroup.getDetails();
        nameTextView.setText(name);
        detailsTextView.setText(details);
        if (details.isEmpty()) {
          detailsTextView.setVisibility(View.GONE);
        }
      }
      return v;
    }
  }
;
  Spinner spinner=findViewById(R.id.spinnerToolbar);
  spinner.setAdapter(adapterCafeterias);
  spinner.setOnItemSelectedListener(this);
  return spinner;
}",0.5898661567877629
161458,"@Override protected Notification fillNotification(NotificationCompat.Builder notificationBuilder){
  NewsSourcesDao newsSourcesDao=TcaDb.getInstance(getContext()).newsSourcesDao();
  NewsSources newsSource=newsSourcesDao.getNewsSource(Integer.parseInt(mNews.getSrc()));
  notificationBuilder.setContentTitle(getContext().getString(R.string.news));
  notificationBuilder.setContentText(mNews.getTitle());
  notificationBuilder.setContentInfo(newsSource.getTitle());
  notificationBuilder.setTicker(mNews.getTitle());
  notificationBuilder.setSmallIcon(R.drawable.ic_notification);
  try {
    Bitmap bgImg=Picasso.get().load(mNews.getImage()).get();
    notificationBuilder.extend(new NotificationCompat.WearableExtender().setBackground(bgImg));
  }
 catch (  IOException e) {
  }
  return notificationBuilder.build();
}","@Override protected Notification fillNotification(NotificationCompat.Builder notificationBuilder){
  NewsSourcesDao newsSourcesDao=TcaDb.getInstance(getContext()).newsSourcesDao();
  NewsSources newsSource=newsSourcesDao.getNewsSource(Integer.parseInt(mNews.getSrc()));
  notificationBuilder.setContentTitle(getContext().getString(R.string.news));
  notificationBuilder.setContentText(mNews.getTitle());
  notificationBuilder.setContentInfo(newsSource.getTitle());
  notificationBuilder.setTicker(mNews.getTitle());
  notificationBuilder.setSmallIcon(R.drawable.ic_notification);
  try {
    if (!mNews.getImage().isEmpty()) {
      Bitmap bgImg=Picasso.get().load(mNews.getImage()).get();
      notificationBuilder.extend(new NotificationCompat.WearableExtender().setBackground(bgImg));
    }
  }
 catch (  IOException e) {
  }
  return notificationBuilder.build();
}",0.970954356846473
161459,"private void updateImageView(){
  String imageURL=Utils.getSetting(context,Const.NEWS_ALERT_IMAGE,""String_Node_Str"");
  Picasso.get().load(imageURL).into(imageView,new Callback(){
    @Override public void onSuccess(){
      progress.setVisibility(View.GONE);
    }
    @Override public void onError(    Exception e){
      discardCard();
    }
  }
);
}","private void updateImageView(){
  String imageURL=Utils.getSetting(context,Const.NEWS_ALERT_IMAGE,""String_Node_Str"");
  if (imageURL.isEmpty() || imageView == null) {
    return;
  }
  Picasso.get().load(imageURL).into(imageView,new Callback(){
    @Override public void onSuccess(){
      progress.setVisibility(View.GONE);
    }
    @Override public void onError(    Exception e){
      discardCard();
    }
  }
);
}",0.8690012970168612
161460,"private void populateNewsSources(){
  PreferenceCategory newsSourcesPreference=(PreferenceCategory)findPreference(""String_Node_Str"");
  NewsController newsController=new NewsController(mContext);
  List<NewsSources> newsSources=newsController.getNewsSources();
  final NetUtils net=new NetUtils(mContext);
  for (  NewsSources newsSource : newsSources) {
    final CheckBoxPreference pref=new CheckBoxPreference(mContext);
    pref.setKey(""String_Node_Str"" + newsSource.getId());
    pref.setDefaultValue(true);
    final String url=newsSource.getIcon();
    if (!url.trim().isEmpty()) {
      new Thread(() -> {
        try {
          Bitmap bmp=Picasso.get().load(url).get();
          mContext.runOnUiThread(() -> {
            pref.setIcon(new BitmapDrawable(getResources(),bmp));
          }
);
        }
 catch (        IOException e) {
        }
      }
).start();
    }
    pref.setTitle(newsSource.getTitle());
    if (newsSourcesPreference != null) {
      newsSourcesPreference.addPreference(pref);
    }
  }
}","private void populateNewsSources(){
  PreferenceCategory newsSourcesPreference=(PreferenceCategory)findPreference(""String_Node_Str"");
  NewsController newsController=new NewsController(mContext);
  List<NewsSources> newsSources=newsController.getNewsSources();
  final NetUtils net=new NetUtils(mContext);
  for (  NewsSources newsSource : newsSources) {
    final CheckBoxPreference pref=new CheckBoxPreference(mContext);
    pref.setKey(""String_Node_Str"" + newsSource.getId());
    pref.setDefaultValue(true);
    final String url=newsSource.getIcon();
    if (!url.trim().isEmpty()) {
      new Thread(() -> {
        try {
          Bitmap bmp=Picasso.get().load(url).get();
          mContext.runOnUiThread(() -> {
            if (isAdded()) {
              pref.setIcon(new BitmapDrawable(getResources(),bmp));
            }
          }
);
        }
 catch (        IOException e) {
        }
      }
).start();
    }
    pref.setTitle(newsSource.getTitle());
    if (newsSourcesPreference != null) {
      newsSourcesPreference.addPreference(pref);
    }
  }
}",0.9784585926280516
161461,"private void populateNewsSources(){
  PreferenceCategory newsSourcesPreference=(PreferenceCategory)findPreference(""String_Node_Str"");
  NewsController newsController=new NewsController(mContext);
  List<NewsSources> newsSources=newsController.getNewsSources();
  final NetUtils net=new NetUtils(mContext);
  for (  NewsSources newsSource : newsSources) {
    final CheckBoxPreference pref=new CheckBoxPreference(mContext);
    pref.setKey(""String_Node_Str"" + newsSource.getId());
    pref.setDefaultValue(true);
    final String url=newsSource.getIcon();
    if (!url.trim().isEmpty()) {
      new Thread(() -> {
        try {
          Bitmap bmp=Picasso.get().load(url).get();
          mContext.runOnUiThread(() -> {
            pref.setIcon(new BitmapDrawable(getResources(),bmp));
          }
);
        }
 catch (        IOException e) {
        }
      }
).start();
    }
    pref.setTitle(newsSource.getTitle());
    if (newsSourcesPreference != null) {
      newsSourcesPreference.addPreference(pref);
    }
  }
}","private void populateNewsSources(){
  PreferenceCategory newsSourcesPreference=(PreferenceCategory)findPreference(""String_Node_Str"");
  NewsController newsController=new NewsController(mContext);
  List<NewsSources> newsSources=newsController.getNewsSources();
  final NetUtils net=new NetUtils(mContext);
  for (  NewsSources newsSource : newsSources) {
    final CheckBoxPreference pref=new CheckBoxPreference(mContext);
    pref.setKey(""String_Node_Str"" + newsSource.getId());
    pref.setDefaultValue(true);
    final String url=newsSource.getIcon();
    if (!url.trim().isEmpty()) {
      new Thread(() -> {
        try {
          Bitmap bmp=Picasso.get().load(url).get();
          mContext.runOnUiThread(() -> {
            if (isAdded()) {
              pref.setIcon(new BitmapDrawable(getResources(),bmp));
            }
          }
);
        }
 catch (        IOException e) {
        }
      }
).start();
    }
    pref.setTitle(newsSource.getTitle());
    if (newsSourcesPreference != null) {
      newsSourcesPreference.addPreference(pref);
    }
  }
}",0.9784585926280516
161462,"/** 
 * Check Calendar permission for Android 6.0
 * @param id the request id
 * @return If the calendar permission was granted
 */
private boolean isPermissionGranted(int id){
  if (ContextCompat.checkSelfPermission(this,Manifest.permission.READ_CALENDAR) == PackageManager.PERMISSION_GRANTED && ContextCompat.checkSelfPermission(this,Manifest.permission.WRITE_CALENDAR) == PackageManager.PERMISSION_GRANTED) {
    return true;
  }
 else {
    if (ActivityCompat.shouldShowRequestPermissionRationale(this,Manifest.permission.READ_CALENDAR) || ActivityCompat.shouldShowRequestPermissionRationale(this,Manifest.permission.WRITE_CALENDAR)) {
      new AlertDialog.Builder(this).setMessage(getString(R.string.permission_calendar_explanation)).setPositiveButton(R.string.ok,(dialog,id1) -> ActivityCompat.requestPermissions(CalendarActivity.this,PERMISSIONS_CALENDAR,id1)).show();
    }
 else {
      ActivityCompat.requestPermissions(this,PERMISSIONS_CALENDAR,id);
    }
  }
  return false;
}","/** 
 * Check Calendar permission for Android 6.0
 * @param id the request id
 * @return If the calendar permission was granted
 */
private boolean isPermissionGranted(int id){
  if (ContextCompat.checkSelfPermission(this,Manifest.permission.READ_CALENDAR) == PackageManager.PERMISSION_GRANTED && ContextCompat.checkSelfPermission(this,Manifest.permission.WRITE_CALENDAR) == PackageManager.PERMISSION_GRANTED) {
    return true;
  }
 else {
    if (ActivityCompat.shouldShowRequestPermissionRationale(this,Manifest.permission.READ_CALENDAR) || ActivityCompat.shouldShowRequestPermissionRationale(this,Manifest.permission.WRITE_CALENDAR)) {
      new AlertDialog.Builder(this).setMessage(getString(R.string.permission_calendar_explanation)).setPositiveButton(R.string.ok,(dialog,id1) -> ActivityCompat.requestPermissions(CalendarActivity.this,PERMISSIONS_CALENDAR,id)).show();
    }
 else {
      ActivityCompat.requestPermissions(this,PERMISSIONS_CALENDAR,id);
    }
  }
  return false;
}",0.9994941831057156
161463,"/** 
 * Check Calendar permission for Android 6.0
 * @param id the request id
 * @return If the calendar permission was granted
 */
private boolean isPermissionGranted(int id){
  if (ContextCompat.checkSelfPermission(this,Manifest.permission.READ_CALENDAR) == PackageManager.PERMISSION_GRANTED && ContextCompat.checkSelfPermission(this,Manifest.permission.WRITE_CALENDAR) == PackageManager.PERMISSION_GRANTED) {
    return true;
  }
 else {
    if (ActivityCompat.shouldShowRequestPermissionRationale(this,Manifest.permission.READ_CALENDAR) || ActivityCompat.shouldShowRequestPermissionRationale(this,Manifest.permission.WRITE_CALENDAR)) {
      new AlertDialog.Builder(this).setMessage(getString(R.string.permission_calendar_explanation)).setPositiveButton(R.string.ok,(dialog,id1) -> ActivityCompat.requestPermissions(CalendarActivity.this,PERMISSIONS_CALENDAR,id1)).show();
    }
 else {
      ActivityCompat.requestPermissions(this,PERMISSIONS_CALENDAR,id);
    }
  }
  return false;
}","/** 
 * Check Calendar permission for Android 6.0
 * @param id the request id
 * @return If the calendar permission was granted
 */
private boolean isPermissionGranted(int id){
  if (ContextCompat.checkSelfPermission(this,Manifest.permission.READ_CALENDAR) == PackageManager.PERMISSION_GRANTED && ContextCompat.checkSelfPermission(this,Manifest.permission.WRITE_CALENDAR) == PackageManager.PERMISSION_GRANTED) {
    return true;
  }
 else {
    if (ActivityCompat.shouldShowRequestPermissionRationale(this,Manifest.permission.READ_CALENDAR) || ActivityCompat.shouldShowRequestPermissionRationale(this,Manifest.permission.WRITE_CALENDAR)) {
      new AlertDialog.Builder(this).setMessage(getString(R.string.permission_calendar_explanation)).setPositiveButton(R.string.ok,(dialog,id1) -> ActivityCompat.requestPermissions(CalendarActivity.this,PERMISSIONS_CALENDAR,id)).show();
    }
 else {
      ActivityCompat.requestPermissions(this,PERMISSIONS_CALENDAR,id);
    }
  }
  return false;
}",0.9994941831057156
161464,"/** 
 * Returns the name of the station that is nearby and/or set by the user
 * @return Name of the station or null if the user is not near any campus
 */
@Nullable public StationResult getStation(){
  int campus=getCurrentCampus();
  if (campus == -1) {
    return null;
  }
  final StationResult defaultVal=DEFAULT_CAMPUS_STATION[campus];
  final String campusSetting=""String_Node_Str"" + CAMPUS_SHORT[campus];
  String station=Utils.getSetting(mContext,campusSetting,""String_Node_Str"");
  if (!""String_Node_Str"".equals(station)) {
    for (    StationResult s : DEFAULT_CAMPUS_STATION) {
      if (s.getStation().equals(station)) {
        return s;
      }
    }
  }
  return defaultVal;
}","/** 
 * Returns the name of the station that is nearby and/or set by the user
 * @return Name of the station or null if the user is not near any campus
 */
@Nullable public StationResult getStation(){
  int campus=getCurrentCampus();
  if (campus == -1) {
    return null;
  }
  final String campusSetting=""String_Node_Str"" + CAMPUS_SHORT[campus];
  String station=Utils.getSetting(mContext,campusSetting,""String_Node_Str"");
  if (!""String_Node_Str"".equals(station)) {
    for (    StationResult s : DEFAULT_CAMPUS_STATION) {
      if (s.getStation().equals(station)) {
        return s;
      }
    }
  }
  return DEFAULT_CAMPUS_STATION[campus];
}",0.5100671140939598
161465,"public void setStation(StationResult station){
  this.mStationNameIDPair=new Pair<>(station.getStation(),station.getId());
}","public void setStation(StationResult station){
  setStation(new Pair<>(station.getStation(),station.getId()));
}",0.9152542372881356
161466,"/** 
 * Loads older chat messages from the server and sets the adapter accordingly
 */
private void getNextHistoryFromServer(final boolean newMsg){
  loadingMore=true;
  new Thread(() -> {
    ChatVerification verification;
    try {
      verification=ChatVerification.Companion.getChatVerification(ChatActivity.this,currentChatMember);
    }
 catch (    NoPrivateKey noPrivateKey) {
      return;
    }
    if (chatHistoryAdapter == null || chatHistoryAdapter.getCount() == 0 || newMsg) {
      chatMessageViewModel.getNewMessages(currentChatRoom.getId(),verification);
    }
 else {
      long id=chatHistoryAdapter.getItemId(0);
      chatMessageViewModel.getMessages(currentChatRoom.getId(),id,verification);
    }
    final List<ChatMessage> msgs=chatMessageViewModel.getAllChatMessagesList(currentChatRoom.getId());
    runOnUiThread(() -> {
      if (chatHistoryAdapter == null) {
        chatHistoryAdapter=new ChatHistoryAdapter(ChatActivity.this,msgs,currentChatMember);
        lvMessageHistory.setAdapter(chatHistoryAdapter);
      }
 else {
        chatHistoryAdapter.updateHistory(chatMessageViewModel.getAllChatMessagesList(currentChatRoom.getId()));
      }
      if ((msgs.size() != 0 && msgs.get(0).getPrevious() == 0) || chatHistoryAdapter.getCount() == 0) {
        lvMessageHistory.removeHeaderView(bar);
      }
 else {
        loadingMore=false;
      }
    }
);
  }
).start();
}","/** 
 * Loads older chat messages from the server and sets the adapter accordingly
 */
private void getNextHistoryFromServer(final boolean newMsg){
  loadingMore=true;
  new Thread(() -> {
    ChatVerification verification;
    try {
      verification=ChatVerification.Companion.getChatVerification(ChatActivity.this,currentChatMember);
    }
 catch (    NoPrivateKey noPrivateKey) {
      return;
    }
    if (chatHistoryAdapter == null || chatHistoryAdapter.getCount() == 0 || newMsg) {
      chatMessageViewModel.getNewMessages(currentChatRoom.getId(),verification);
    }
 else {
      long id=chatHistoryAdapter.getItemId(0);
      chatMessageViewModel.getMessages(currentChatRoom.getId(),id,verification);
    }
    final List<ChatMessage> msgs=chatMessageViewModel.getAllChatMessagesList(currentChatRoom.getId());
    runOnUiThread(() -> {
      if (chatHistoryAdapter == null) {
        chatHistoryAdapter=new ChatHistoryAdapter(ChatActivity.this,msgs,currentChatMember);
        lvMessageHistory.setAdapter(chatHistoryAdapter);
        chatHistoryAdapter.notifyDataSetChanged();
      }
 else {
        chatHistoryAdapter.updateHistory(chatMessageViewModel.getAllChatMessagesList(currentChatRoom.getId()));
      }
      if ((msgs.size() != 0 && msgs.get(0).getPrevious() == 0) || chatHistoryAdapter.getCount() == 0) {
        lvMessageHistory.removeHeaderView(bar);
      }
 else {
        loadingMore=false;
      }
    }
);
  }
).start();
}",0.9821491074553728
161467,"private void handleRoomBroadcast(GCMChat extras){
  if (!(extras.getRoom() == currentChatRoom.getId() && chatHistoryAdapter != null)) {
    return;
  }
  if (extras.getMember() == currentChatMember.getId()) {
    chatHistoryAdapter.setUnsentMessages(chatMessageViewModel.getAllUnsentFromCurrentRoomList());
  }
 else   if (extras.getMessage() == -1) {
    AudioManager am=(AudioManager)getSystemService(Context.AUDIO_SERVICE);
    if (am.getRingerMode() == AudioManager.RINGER_MODE_NORMAL) {
      MediaPlayer mediaPlayer=MediaPlayer.create(ChatActivity.this,R.raw.message);
      mediaPlayer.start();
    }
 else     if (am.getRingerMode() == AudioManager.RINGER_MODE_VIBRATE) {
      Vibrator v=(Vibrator)getSystemService(Context.VIBRATOR_SERVICE);
      vibrate(v);
    }
  }
  chatHistoryAdapter.updateHistory(chatMessageViewModel.getAllChatMessagesList(currentChatRoom.getId()));
  chatMessageViewModel.markAsRead(currentChatRoom.getId());
}","private void handleRoomBroadcast(GCMChat extras){
  if (!(extras.getRoom() == currentChatRoom.getId() && chatHistoryAdapter != null)) {
    return;
  }
  if (extras.getMember() == currentChatMember.getId()) {
    chatHistoryAdapter.setUnsentMessages(chatMessageViewModel.getAllUnsentFromCurrentRoomList());
  }
 else   if (extras.getMessage() == -1) {
    AudioManager am=(AudioManager)getSystemService(Context.AUDIO_SERVICE);
    if (am.getRingerMode() == AudioManager.RINGER_MODE_NORMAL) {
      MediaPlayer mediaPlayer=MediaPlayer.create(ChatActivity.this,R.raw.message);
      mediaPlayer.start();
    }
 else     if (am.getRingerMode() == AudioManager.RINGER_MODE_VIBRATE) {
      Vibrator v=(Vibrator)getSystemService(Context.VIBRATOR_SERVICE);
      vibrate(v);
    }
  }
  chatMessageViewModel.markAsRead(currentChatRoom.getId());
  chatHistoryAdapter.updateHistory(chatMessageViewModel.getAllChatMessagesList(currentChatRoom.getId()));
}",0.9365750528541226
161468,"public Observable<List<ChatMessage>> getMessages(int roomId,long messageId,@Body ChatVerification verification) throws IOException {
  return service.getMessages(roomId,messageId,verification);
}","public Observable<List<ChatMessage>> getMessages(int roomId,long messageId,@Body ChatVerification verification){
  return service.getMessages(roomId,messageId,verification);
}",0.945945945945946
161469,"public Observable<List<ChatMessage>> getNewMessages(int roomId,@Body ChatVerification verification) throws IOException {
  return service.getNewMessages(roomId,verification);
}","public Observable<List<ChatMessage>> getNewMessages(int roomId,@Body ChatVerification verification){
  return service.getNewMessages(roomId,verification);
}",0.9397590361445785
161470,"public Observable<ChatMessage> sendMessage(int roomId,ChatMessage chatMessageCreate) throws IOException {
  return service.sendMessage(roomId,chatMessageCreate);
}","public Observable<ChatMessage> sendMessage(int roomId,ChatMessage chatMessageCreate){
  return service.sendMessage(roomId,chatMessageCreate);
}",0.934640522875817
161471,"public Observable<ChatMessage> updateMessage(int roomId,ChatMessage message) throws IOException {
  return service.updateMessage(roomId,message.getId(),message);
}","public Observable<ChatMessage> updateMessage(int roomId,ChatMessage message){
  return service.updateMessage(roomId,message.getId(),message);
}",0.934640522875817
161472,"public Chat(String payload,Context context,int notfication){
  super(context,1,notfication,true);
  if (payload == null) {
    throw new IllegalArgumentException();
  }
  this.extras=new Gson().fromJson(payload,GCMChat.class);
  try {
    this.prepare();
  }
 catch (  IOException e) {
    Utils.log(e);
  }
  TcaDb tcaDb=TcaDb.getInstance(context);
  chatMessageDao=tcaDb.chatMessageDao();
}","public Chat(String payload,Context context,int notfication){
  super(context,1,notfication,true);
  if (payload == null) {
    throw new IllegalArgumentException();
  }
  this.extras=new Gson().fromJson(payload,GCMChat.class);
  try {
    this.prepare();
  }
 catch (  IOException e) {
    Utils.log(e);
  }
}",0.8815977175463623
161473,"public static void bindNewsView(NetUtils net,RecyclerView.ViewHolder newsViewHolder,Cursor cursor){
  NewsViewHolder holder=(NewsViewHolder)newsViewHolder;
  String imgUrl=cursor.getString(4);
  if (imgUrl == null || imgUrl.isEmpty() || imgUrl.equals(""String_Node_Str"")) {
    holder.img.setVisibility(View.GONE);
  }
 else {
    holder.img.setVisibility(View.VISIBLE);
    net.loadAndSetImage(imgUrl,holder.img);
  }
  String title=cursor.getString(2);
  if (cursor.getInt(1) == 2) {
    title=COMPILE.matcher(title).replaceAll(""String_Node_Str"");
  }
  holder.title.setText(title);
  String date=cursor.getString(5);
  Date d=Utils.getISODateTime(date);
  DateFormat sdf=DateFormat.getDateInstance();
  holder.srcDate.setText(sdf.format(d));
  holder.srcTitle.setText(cursor.getString(8));
  String icon=cursor.getString(7);
  if (icon.isEmpty() || ""String_Node_Str"".equals(icon)) {
    holder.srcIcon.setImageResource(R.drawable.ic_comment);
  }
 else {
    net.loadAndSetImage(icon,holder.srcIcon);
  }
}","public static void bindNewsView(NetUtils net,RecyclerView.ViewHolder newsViewHolder,Cursor cursor){
  NewsViewHolder holder=(NewsViewHolder)newsViewHolder;
  String imgUrl=cursor.getString(4);
  if (imgUrl == null || imgUrl.isEmpty() || imgUrl.equals(""String_Node_Str"")) {
    holder.img.setVisibility(View.GONE);
  }
 else {
    holder.img.setVisibility(View.VISIBLE);
    net.loadAndSetImage(imgUrl,holder.img);
  }
  String title=cursor.getString(2);
  if (cursor.getInt(1) == 2) {
    title=COMPILE.matcher(title).replaceAll(""String_Node_Str"");
  }
  holder.title.setText(title);
  String date=cursor.getString(5);
  Date d=Utils.getDateTime(date);
  DateFormat sdf=DateFormat.getDateInstance();
  holder.srcDate.setText(sdf.format(d));
  holder.srcTitle.setText(cursor.getString(8));
  String icon=cursor.getString(7);
  if (icon.isEmpty() || ""String_Node_Str"".equals(icon)) {
    holder.srcIcon.setImageResource(R.drawable.ic_comment);
  }
 else {
    net.loadAndSetImage(icon,holder.srcIcon);
  }
}",0.9985096870342772
161474,"private static Calendar getEventStartFromCursor(Cursor cEvents){
  String eventStart=cEvents.getString(5);
  Calendar result=Calendar.getInstance();
  result.setTime(Utils.getISODateTime(eventStart));
  return result;
}","private static Calendar getEventStartFromCursor(Cursor cEvents){
  String eventStart=cEvents.getString(5);
  Calendar result=Calendar.getInstance();
  result.setTime(Utils.getDateTime(eventStart));
  return result;
}",0.993103448275862
161475,"private static Calendar getEventEndFromCursor(Cursor cEvents){
  String eventEnd=cEvents.getString(6);
  Calendar result=Calendar.getInstance();
  result.setTime(Utils.getISODateTime(eventEnd));
  return result;
}","private static Calendar getEventEndFromCursor(Cursor cEvents){
  String eventEnd=cEvents.getString(6);
  Calendar result=Calendar.getInstance();
  result.setTime(Utils.getDateTime(eventEnd));
  return result;
}",0.9929078014184396
161476,"public void setLectures(Cursor cur){
  do {
    CalendarItem item=new CalendarItem();
    item.start=Utils.getISODateTime(cur.getString(1));
    item.end=Utils.getISODateTime(cur.getString(2));
    item.title=cur.getString(0);
    item.title=item.title.replaceAll(""String_Node_Str"",""String_Node_Str"");
    item.title=item.title.replaceAll(""String_Node_Str"",""String_Node_Str"");
    item.title=item.title.replaceAll(""String_Node_Str"",""String_Node_Str"");
    item.title=item.title.trim();
    item.location=cur.getString(3);
    if (item.location != null) {
      item.location=item.location.replaceAll(""String_Node_Str"",""String_Node_Str"").trim();
    }
    lectures.add(item);
  }
 while (cur.moveToNext());
  cur.close();
}","public void setLectures(Cursor cur){
  do {
    CalendarItem item=new CalendarItem();
    item.start=Utils.getDateTime(cur.getString(1));
    item.end=Utils.getDateTime(cur.getString(2));
    item.title=cur.getString(0);
    item.title=item.title.replaceAll(""String_Node_Str"",""String_Node_Str"");
    item.title=item.title.replaceAll(""String_Node_Str"",""String_Node_Str"");
    item.title=item.title.replaceAll(""String_Node_Str"",""String_Node_Str"");
    item.title=item.title.trim();
    item.location=cur.getString(3);
    if (item.location != null) {
      item.location=item.location.replaceAll(""String_Node_Str"",""String_Node_Str"").trim();
    }
    lectures.add(item);
  }
 while (cur.moveToNext());
  cur.close();
}",0.995827538247566
161477,"@TypeConverter public static Date fromIso(String str){
  return Utils.getISODateTime(str);
}","@TypeConverter public static Date fromIso(String str){
  return Utils.getDateTime(str);
}",0.9834254143646408
161478,"private List<WeekViewEvent> fetchEventList(String roomId,String startDate,String endDate){
  List<WeekViewEvent> events=new ArrayList<>();
  try {
    Optional<List<RoomFinderSchedule>> result=Optional.of(TUMCabeClient.getInstance(context).fetchSchedule(roomId,startDate,endDate));
    List<RoomFinderSchedule> schedules=result.get();
    for (    RoomFinderSchedule schedule : schedules) {
      Calendar startCal=Calendar.getInstance();
      startCal.setTime(Utils.getISODateTime(schedule.getStart()));
      Calendar endCal=Calendar.getInstance();
      endCal.setTime(Utils.getISODateTime(schedule.getEnd()));
      IntegratedCalendarEvent calendarEvent=new IntegratedCalendarEvent(schedule.getEvent_id(),schedule.getTitle(),startCal,endCal,""String_Node_Str"",IntegratedCalendarEvent.getDisplayColorFromColor(0xff28921f));
      events.add(calendarEvent);
    }
    return events;
  }
 catch (  IOException|NullPointerException e) {
    Utils.log(e);
  }
  return events;
}","private List<WeekViewEvent> fetchEventList(String roomId,String startDate,String endDate){
  List<WeekViewEvent> events=new ArrayList<>();
  try {
    Optional<List<RoomFinderSchedule>> result=Optional.of(TUMCabeClient.getInstance(context).fetchSchedule(roomId,startDate,endDate));
    List<RoomFinderSchedule> schedules=result.get();
    for (    RoomFinderSchedule schedule : schedules) {
      Calendar startCal=Calendar.getInstance();
      startCal.setTime(Utils.getDateTime(schedule.getStart()));
      Calendar endCal=Calendar.getInstance();
      endCal.setTime(Utils.getDateTime(schedule.getEnd()));
      IntegratedCalendarEvent calendarEvent=new IntegratedCalendarEvent(schedule.getEvent_id(),schedule.getTitle(),startCal,endCal,""String_Node_Str"",IntegratedCalendarEvent.getDisplayColorFromColor(0xff28921f));
      events.add(calendarEvent);
    }
    return events;
  }
 catch (  IOException|NullPointerException e) {
    Utils.log(e);
  }
  return events;
}",0.9014373716632444
161479,"private static void addEvents(Context c,Uri uri){
  if (ContextCompat.checkSelfPermission(c,Manifest.permission.WRITE_CALENDAR) != PackageManager.PERMISSION_GRANTED) {
    return;
  }
  ContentResolver contentResolver=c.getContentResolver();
  String id=""String_Node_Str"";
  try (Cursor cursor=contentResolver.query(uri,PROJECTION,null,null,null)){
    while (cursor.moveToNext()) {
      id=cursor.getString(0);
    }
  }
   CalendarManager calendarManager=new CalendarManager(c);
  Date dtstart;
  Date dtend;
  try (Cursor cursor=calendarManager.getAllFromDb()){
    while (cursor.moveToNext()) {
      final String title=cursor.getString(3);
      final String description=cursor.getString(4);
      final String strStart=cursor.getString(5);
      final String strEnd=cursor.getString(6);
      final String location=cursor.getString(7);
      try {
        dtstart=new SimpleDateFormat(""String_Node_Str"",Locale.ENGLISH).parse(strStart);
        dtend=new SimpleDateFormat(""String_Node_Str"",Locale.ENGLISH).parse(strEnd);
        Calendar beginTime=Calendar.getInstance();
        beginTime.setTime(dtstart);
        Calendar endTime=Calendar.getInstance();
        endTime.setTime(dtend);
        long startMillis=beginTime.getTimeInMillis();
        long endMillis=endTime.getTimeInMillis();
        ContentValues values=new ContentValues();
        values.put(CalendarContract.Events.DTSTART,startMillis);
        values.put(CalendarContract.Events.DTEND,endMillis);
        values.put(CalendarContract.Events.TITLE,title);
        values.put(CalendarContract.Events.DESCRIPTION,description);
        values.put(CalendarContract.Events.CALENDAR_ID,id);
        values.put(CalendarContract.Events.EVENT_LOCATION,location);
        values.put(CalendarContract.Events.EVENT_TIMEZONE,R.string.calendarTimeZone);
        contentResolver.insert(CalendarContract.Events.CONTENT_URI,values);
      }
 catch (      ParseException e) {
        Utils.log(e);
      }
    }
  }
 }","private static void addEvents(Context c,Uri uri){
  if (ContextCompat.checkSelfPermission(c,Manifest.permission.WRITE_CALENDAR) != PackageManager.PERMISSION_GRANTED) {
    return;
  }
  ContentResolver contentResolver=c.getContentResolver();
  String id=""String_Node_Str"";
  try (Cursor cursor=contentResolver.query(uri,PROJECTION,null,null,null)){
    while (cursor.moveToNext()) {
      id=cursor.getString(0);
    }
  }
   CalendarManager calendarManager=new CalendarManager(c);
  try (Cursor cursor=calendarManager.getAllFromDb()){
    while (cursor.moveToNext()) {
      final String title=cursor.getString(3);
      final String description=cursor.getString(4);
      final String strStart=cursor.getString(5);
      final String strEnd=cursor.getString(6);
      final String location=cursor.getString(7);
      long startMillis=Utils.getDateTime(strStart).getTime();
      long endMillis=Utils.getDateTime(strEnd).getTime();
      ContentValues values=new ContentValues();
      values.put(CalendarContract.Events.DTSTART,startMillis);
      values.put(CalendarContract.Events.DTEND,endMillis);
      values.put(CalendarContract.Events.TITLE,title);
      values.put(CalendarContract.Events.DESCRIPTION,description);
      values.put(CalendarContract.Events.CALENDAR_ID,id);
      values.put(CalendarContract.Events.EVENT_LOCATION,location);
      values.put(CalendarContract.Events.EVENT_TIMEZONE,R.string.calendarTimeZone);
      contentResolver.insert(CalendarContract.Events.CONTENT_URI,values);
    }
  }
 }",0.7871853546910755
161480,"public static ChatMessage toObject(Cursor cursor){
  SimpleDateFormat formatter=new SimpleDateFormat(""String_Node_Str"",Locale.ENGLISH);
  int id=cursor.getInt(COL_ID);
  String text=cursor.getString(COL_TEXT);
  String time=formatter.format(Utils.getISODateTime(cursor.getString(COL_TIMESTAMP)));
  int previous=cursor.getInt(COL_PREVIOUS);
  ChatMember member=new Gson().fromJson(cursor.getString(COL_MEMBER),ChatMember.class);
  ChatMessage msg=new ChatMessage(id,text,member,time,previous);
  msg.setSignature(cursor.getString(COL_SIGNATURE));
  msg.setRoom(cursor.getInt(COL_ROOM));
  msg.setRead(cursor.getInt(COL_READ) == 1);
  msg.setStatus(cursor.getInt(COL_SENDING));
  return msg;
}","public static ChatMessage toObject(Cursor cursor){
  SimpleDateFormat formatter=new SimpleDateFormat(""String_Node_Str"",Locale.ENGLISH);
  int id=cursor.getInt(COL_ID);
  String text=cursor.getString(COL_TEXT);
  String time=formatter.format(Utils.getDateTime(cursor.getString(COL_TIMESTAMP)));
  int previous=cursor.getInt(COL_PREVIOUS);
  ChatMember member=new Gson().fromJson(cursor.getString(COL_MEMBER),ChatMember.class);
  ChatMessage msg=new ChatMessage(id,text,member,time,previous);
  msg.setSignature(cursor.getString(COL_SIGNATURE));
  msg.setRoom(cursor.getInt(COL_ROOM));
  msg.setRead(cursor.getInt(COL_READ) == 1);
  msg.setStatus(cursor.getInt(COL_SENDING));
  return msg;
}",0.997827661115134
161481,"/** 
 * Convert JSON object to Kino
 * @param json JsonObject from external
 * @return Kino
 * @throws JSONException
 */
private static Kino getFromJson(JSONObject json) throws JSONException {
  String id=json.getString(Const.JSON_KINO);
  String title=json.getString(Const.JSON_TITLE);
  String year=json.getString(Const.JSON_YEAR);
  String runtime=json.getString(Const.JSON_RUNTIME);
  String genre=json.getString(Const.JSON_GENRE);
  String director=json.getString(Const.JSON_DIRECTOR);
  String actors=json.getString(Const.JSON_ACTORS);
  String rating=json.getString(Const.JSON_RATING);
  String description=json.getString(Const.JSON_DESCRIPTION).replaceAll(""String_Node_Str"",""String_Node_Str"").trim();
  String cover=json.getString(Const.JSON_COVER);
  String trailer=json.getString(Const.JSON_TRAILER);
  Date date=Utils.getISODateTime(json.getString(Const.JSON_DATE));
  Date created=Utils.getISODateTime(json.getString(Const.JSON_CREATED));
  String link=json.getString(Const.JSON_LINK);
  return new Kino(id,title,year,runtime,genre,director,actors,rating,description,cover,trailer,date,created,link);
}","/** 
 * Convert JSON object to Kino
 * @param json JsonObject from external
 * @return Kino
 * @throws JSONException
 */
private static Kino getFromJson(JSONObject json) throws JSONException {
  String id=json.getString(Const.JSON_KINO);
  String title=json.getString(Const.JSON_TITLE);
  String year=json.getString(Const.JSON_YEAR);
  String runtime=json.getString(Const.JSON_RUNTIME);
  String genre=json.getString(Const.JSON_GENRE);
  String director=json.getString(Const.JSON_DIRECTOR);
  String actors=json.getString(Const.JSON_ACTORS);
  String rating=json.getString(Const.JSON_RATING);
  String description=json.getString(Const.JSON_DESCRIPTION).replaceAll(""String_Node_Str"",""String_Node_Str"").trim();
  String cover=json.getString(Const.JSON_COVER);
  String trailer=json.getString(Const.JSON_TRAILER);
  Date date=Utils.getDateTime(json.getString(Const.JSON_DATE));
  Date created=Utils.getDateTime(json.getString(Const.JSON_CREATED));
  String link=json.getString(Const.JSON_LINK);
  return new Kino(id,title,year,runtime,genre,director,actors,rating,description,cover,trailer,date,created,link);
}",0.9972997299729972
161482,"/** 
 * Convert JSON object to News and download news image
 * @param json see above
 * @return News
 * @throws JSONException if the json is invalid
 */
private static News getFromJson(JSONObject json) throws JSONException {
  String id=json.getString(Const.JSON_NEWS);
  String src=json.getString(Const.JSON_SRC);
  String title=json.getString(Const.JSON_TITLE);
  String link=json.getString(Const.JSON_LINK);
  String image=json.getString(Const.JSON_IMAGE);
  Date date=Utils.getISODateTime(json.getString(Const.JSON_DATE));
  Date created=Utils.getISODateTime(json.getString(Const.JSON_CREATED));
  return new News(id,title,link,src,image,date,created);
}","/** 
 * Convert JSON object to News and download news image
 * @param json see above
 * @return News
 * @throws JSONException if the json is invalid
 */
private static News getFromJson(JSONObject json) throws JSONException {
  String id=json.getString(Const.JSON_NEWS);
  String src=json.getString(Const.JSON_SRC);
  String title=json.getString(Const.JSON_TITLE);
  String link=json.getString(Const.JSON_LINK);
  String image=json.getString(Const.JSON_IMAGE);
  Date date=Utils.getDateTime(json.getString(Const.JSON_DATE));
  Date created=Utils.getDateTime(json.getString(Const.JSON_CREATED));
  return new News(id,title,link,src,image,date,created);
}",0.9954198473282444
161483,"@Override public View onCreateView(@NonNull LayoutInflater inflater,ViewGroup container,Bundle savedInstanceState){
  View rootView=inflater.inflate(R.layout.fragment_item_detail,container,false);
  RecyclerView recyclerView;
  LinearLayoutManager layoutManager;
  try (Cursor studyRoomCursor=new StudyRoomGroupManager(getActivity()).getStudyRoomsFromDb(mStudyRoomGroupId)){
    recyclerView=rootView.findViewById(R.id.fragment_item_detail_recyclerview);
    recyclerView.setAdapter(new StudyRoomAdapter(studyRoomCursor));
  }
   layoutManager=new LinearLayoutManager(getContext());
  layoutManager.setOrientation(LinearLayoutManager.VERTICAL);
  recyclerView.setLayoutManager(layoutManager);
  recyclerView.setHasFixedSize(true);
  return rootView;
}","@Override public View onCreateView(@NonNull LayoutInflater inflater,ViewGroup container,Bundle savedInstanceState){
  View rootView=inflater.inflate(R.layout.fragment_item_detail,container,false);
  Cursor studyRoomCursor=new StudyRoomGroupManager(getActivity()).getStudyRoomsFromDb(mStudyRoomGroupId);
  RecyclerView recyclerView=rootView.findViewById(R.id.fragment_item_detail_recyclerview);
  recyclerView.setAdapter(new StudyRoomAdapter(studyRoomCursor));
  LinearLayoutManager layoutManager=new LinearLayoutManager(getContext());
  layoutManager.setOrientation(LinearLayoutManager.VERTICAL);
  recyclerView.setLayoutManager(layoutManager);
  recyclerView.setHasFixedSize(true);
  return rootView;
}",0.9188445667125172
161484,"public String addLock(String url,String data){
  reqStatus r=this.getLock(url);
  int lockTime=TumManager.DEFAULT_LOCK;
  if (r != null) {
    lockTime=r.lockedFor * 2;
    if (lockTime > TumManager.MAX_AGE) {
      lockTime=TumManager.MAX_AGE;
    }
  }
  String msg=""String_Node_Str"";
  try {
    Error res=new Persister().read(Error.class,data);
    msg=res.getMessage();
  }
 catch (  Exception e) {
    Utils.log(e);
  }
  db.execSQL(""String_Node_Str"",new String[]{url,msg,String.valueOf(lockTime)});
  return msg;
}","public String addLock(String url,String data){
  reqStatus r=this.getLock(url);
  int lockTime=TumManager.DEFAULT_LOCK;
  if (r != null) {
    lockTime=r.lockedFor * 2;
    if (lockTime > TumManager.MAX_AGE) {
      lockTime=TumManager.MAX_AGE;
    }
  }
  String msg=""String_Node_Str"";
  try {
    if (data.contains(TUMOnlineRequest.NO_ENTRIES)) {
      return data;
    }
    Error res=new Persister().read(Error.class,data);
    msg=res.getMessage();
  }
 catch (  Exception e) {
    Utils.log(e);
  }
  db.execSQL(""String_Node_Str"",new String[]{url,msg,String.valueOf(lockTime)});
  return msg;
}",0.9295272078501338
161485,"/** 
 * this fetch method will fetch the data from the TUMOnline Request and will address the listeners onFetch if the fetch succeeded, else the onFetchError will be called
 * @param context  the current context (may provide the current activity)
 * @param listener the listener, which takes the result
 */
public void fetchInteractive(final Context context,final TUMOnlineRequestFetchListener<T> listener){
  if (!loadAccessTokenFromPreferences(context)) {
    listener.onFetchCancelled();
  }
  backgroundTask=new AsyncTask<Void,Void,Optional<T>>(){
    @Override protected Optional<T> doInBackground(    Void... params){
      return fetch();
    }
    @Override protected void onPostExecute(    Optional<T> result){
      if (result.isPresent()) {
        Utils.logv(""String_Node_Str"" + result + '>');
      }
 else {
        Utils.log(""String_Node_Str"");
      }
      if (!NetUtils.isConnected(mContext)) {
        if (result.isPresent()) {
          Utils.showToast(mContext,R.string.no_internet_connection);
        }
 else {
          listener.onNoInternetError();
          return;
        }
      }
      if (!result.isPresent()) {
        String error;
        if (lastError.contains(TOKEN_NOT_CONFIRMED)) {
          error=context.getString(R.string.dialog_access_token_invalid);
        }
 else         if (lastError.contains(NO_FUNCTION_RIGHTS)) {
          error=context.getString(R.string.dialog_no_rights_function);
        }
 else         if (lastError.isEmpty()) {
          error=context.getString(R.string.empty_result);
        }
 else {
          error=lastError;
        }
        listener.onFetchError(error);
        return;
      }
      tumManager.releaseLock(TUMOnlineRequest.this.getRequestURL());
      listener.onFetch(result.get());
    }
  }
.execute();
}","/** 
 * this fetch method will fetch the data from the TUMOnline Request and will address the listeners onFetch if the fetch succeeded, else the onFetchError will be called
 * @param context  the current context (may provide the current activity)
 * @param listener the listener, which takes the result
 */
public void fetchInteractive(final Context context,final TUMOnlineRequestFetchListener<T> listener){
  if (!loadAccessTokenFromPreferences(context)) {
    listener.onFetchCancelled();
  }
  backgroundTask=new AsyncTask<Void,Void,Optional<T>>(){
    @Override protected Optional<T> doInBackground(    Void... params){
      return fetch();
    }
    @Override protected void onPostExecute(    Optional<T> result){
      if (result.isPresent()) {
        Utils.logv(""String_Node_Str"" + result + '>');
      }
 else {
        Utils.log(""String_Node_Str"");
      }
      if (!NetUtils.isConnected(mContext)) {
        if (result.isPresent()) {
          Utils.showToast(mContext,R.string.no_internet_connection);
        }
 else {
          listener.onNoInternetError();
          return;
        }
      }
      if (!result.isPresent()) {
        if (lastError.contains(NO_ENTRIES)) {
          listener.onNoDataToShow();
          return;
        }
        String error;
        if (lastError.contains(TOKEN_NOT_CONFIRMED)) {
          error=context.getString(R.string.dialog_access_token_invalid);
        }
 else         if (lastError.contains(NO_FUNCTION_RIGHTS)) {
          error=context.getString(R.string.dialog_no_rights_function);
        }
 else         if (lastError.isEmpty()) {
          error=context.getString(R.string.empty_result);
        }
 else {
          error=lastError;
        }
        listener.onFetchError(error);
        return;
      }
      tumManager.releaseLock(TUMOnlineRequest.this.getRequestURL());
      listener.onFetch(result.get());
    }
  }
.execute();
}",0.9699268490923868
161486,"@Override protected void onPostExecute(Optional<T> result){
  if (result.isPresent()) {
    Utils.logv(""String_Node_Str"" + result + '>');
  }
 else {
    Utils.log(""String_Node_Str"");
  }
  if (!NetUtils.isConnected(mContext)) {
    if (result.isPresent()) {
      Utils.showToast(mContext,R.string.no_internet_connection);
    }
 else {
      listener.onNoInternetError();
      return;
    }
  }
  if (!result.isPresent()) {
    String error;
    if (lastError.contains(TOKEN_NOT_CONFIRMED)) {
      error=context.getString(R.string.dialog_access_token_invalid);
    }
 else     if (lastError.contains(NO_FUNCTION_RIGHTS)) {
      error=context.getString(R.string.dialog_no_rights_function);
    }
 else     if (lastError.isEmpty()) {
      error=context.getString(R.string.empty_result);
    }
 else {
      error=lastError;
    }
    listener.onFetchError(error);
    return;
  }
  tumManager.releaseLock(TUMOnlineRequest.this.getRequestURL());
  listener.onFetch(result.get());
}","@Override protected void onPostExecute(Optional<T> result){
  if (result.isPresent()) {
    Utils.logv(""String_Node_Str"" + result + '>');
  }
 else {
    Utils.log(""String_Node_Str"");
  }
  if (!NetUtils.isConnected(mContext)) {
    if (result.isPresent()) {
      Utils.showToast(mContext,R.string.no_internet_connection);
    }
 else {
      listener.onNoInternetError();
      return;
    }
  }
  if (!result.isPresent()) {
    if (lastError.contains(NO_ENTRIES)) {
      listener.onNoDataToShow();
      return;
    }
    String error;
    if (lastError.contains(TOKEN_NOT_CONFIRMED)) {
      error=context.getString(R.string.dialog_access_token_invalid);
    }
 else     if (lastError.contains(NO_FUNCTION_RIGHTS)) {
      error=context.getString(R.string.dialog_no_rights_function);
    }
 else     if (lastError.isEmpty()) {
      error=context.getString(R.string.empty_result);
    }
 else {
      error=lastError;
    }
    listener.onFetchError(error);
    return;
  }
  tumManager.releaseLock(TUMOnlineRequest.this.getRequestURL());
  listener.onFetch(result.get());
}",0.9539505574406204
161487,"@Override public List<WeekViewEvent> onMonthChange(int newYear,int newMonth){
  this.newYear=newYear;
  this.newMonth=newMonth;
  if (!isLoaded(newYear,newMonth)) {
    Calendar calendar=Calendar.getInstance();
    calendar.set(newYear,newMonth - 1,1);
    int daysInMonth=calendar.getActualMaximum(Calendar.DAY_OF_MONTH);
    String startTime=Long.toString(calendar.getTimeInMillis());
    calendar.set(newYear,newMonth - 1,daysInMonth);
    String endTime=Long.toString(calendar.getTimeInMillis());
    startLoading(roomApiCode,startTime,endTime);
    return new ArrayList<>();
  }
  return loadedEvents.get(calculateLoadedKey(newYear,newMonth));
}","@Override public List<WeekViewEvent> onMonthChange(int newYear,int newMonth){
  if (!isLoaded(newYear,newMonth)) {
    loadEventsInBackground(newYear,newMonth);
    return new ArrayList<>();
  }
  return loadedEvents.get(calculateLoadedKey(newYear,newMonth));
}",0.2107574094401756
161488,"private void onLoadFinished(Optional<List<RoomFinderSchedule>> result){
  if (!result.isPresent()) {
    return;
  }
  List<RoomFinderSchedule> schedules=result.get();
  List<WeekViewEvent> events=new ArrayList<>(schedules.size());
  for (  RoomFinderSchedule schedule : schedules) {
    Calendar startCal=Calendar.getInstance();
    startCal.setTime(Utils.getISODateTime(schedule.getStart()));
    Calendar endCal=Calendar.getInstance();
    endCal.setTime(Utils.getISODateTime(schedule.getEnd()));
    IntegratedCalendarEvent calendarEvent=new IntegratedCalendarEvent(schedule.getEvent_id(),schedule.getTitle(),startCal,endCal,""String_Node_Str"",IntegratedCalendarEvent.getDisplayColorFromColor(0xff28921f));
    events.add(calendarEvent);
  }
  loadedEvents.put(calculateLoadedKey(newYear,newMonth),events);
  mWeekView.notifyDatasetChanged();
}","private void onLoadFinished(Optional<List<RoomFinderSchedule>> result){
  List<RoomFinderSchedule> schedules;
  if (result.isPresent()) {
    schedules=result.get();
  }
 else {
    schedules=new ArrayList<>();
  }
  List<WeekViewEvent> events=new ArrayList<>(schedules.size());
  for (  RoomFinderSchedule schedule : schedules) {
    Calendar startCal=Calendar.getInstance();
    startCal.setTime(Utils.getISODateTime(schedule.getStart()));
    Calendar endCal=Calendar.getInstance();
    endCal.setTime(Utils.getISODateTime(schedule.getEnd()));
    IntegratedCalendarEvent calendarEvent=new IntegratedCalendarEvent(schedule.getEvent_id(),schedule.getTitle(),startCal,endCal,""String_Node_Str"",IntegratedCalendarEvent.getDisplayColorFromColor(0xff28921f));
    events.add(calendarEvent);
  }
  loadedEvents.put(calculateLoadedKey(newYear,newMonth),events);
  mWeekView.notifyDatasetChanged();
}",0.9213095921883976
161489,"/** 
 * Called after using getInstance() to initialize correct variables
 * @param context
 * @return
 */
public synchronized FavoriteFoodAlarmStorage initialize(Context context){
  this.context=context;
  this.sharedPreferences=context.getSharedPreferences(""String_Node_Str"",Context.MODE_PRIVATE);
  this.editor=sharedPreferences.edit();
  return this;
}","/** 
 * Called after using getInstance() to initialize correct variables
 * @param context
 * @return
 */
public synchronized FavoriteFoodAlarmStorage initialize(Context context){
  this.context=context;
  this.sharedPreferences=this.context.getSharedPreferences(""String_Node_Str"",Context.MODE_PRIVATE);
  this.editor=this.sharedPreferences.edit();
  return this;
}",0.9861111111111112
161490,"/** 
 * Prepares a bundle, which can be sent to the FavoriteDishAlarmScheduler, which contains all necessary information to schedule the FavoriteDishAlarms. Its procedure is the following: Get the names of all the favorite dishes and their corresponding mensaId (the user flags a food as favorite, which also stores the mensaId). By assuming that the user will only rate the food as a favorite, if he actually goes to that specific mensa. The alarm is then stored and scheduled, if it's not scheduled already.
 * @param completeReschedule True if all currently scheduled alarms should be discarded, False if not
 */
public void scheduleFoodAlarms(boolean completeReschedule){
  FavoriteFoodAlarmStorage favoriteFoodAlarmStorage=FavoriteFoodAlarmStorage.getInstance(mContext);
  if (completeReschedule) {
    favoriteFoodAlarmStorage.cancelOutstandingAlarms();
  }
  Cursor favoriteFoodWhere=db.rawQuery(""String_Node_Str"",null);
  while (favoriteFoodWhere.moveToNext()) {
    int mensaId=favoriteFoodWhere.getInt(0);
    String dishName=favoriteFoodWhere.getString(1);
    Cursor upcomingServings=db.rawQuery(""String_Node_Str"",new String[]{""String_Node_Str"" + mensaId,dishName});
    while (upcomingServings.moveToNext()) {
      favoriteFoodAlarmStorage.scheduleAlarm(upcomingServings.getString(0));
    }
  }
}","/** 
 * Prepares a bundle, which can be sent to the FavoriteDishAlarmScheduler, which contains all necessary information to schedule the FavoriteDishAlarms. Its procedure is the following: Get the names of all the favorite dishes and their corresponding mensaId (the user flags a food as favorite, which also stores the mensaId). By assuming that the user will only rate the food as a favorite, if he actually goes to that specific mensa. The alarm is then stored and scheduled, if it's not scheduled already.
 * @param completeReschedule True if all currently scheduled alarms should be discarded, False if not
 */
public void scheduleFoodAlarms(boolean completeReschedule){
  FavoriteFoodAlarmStorage favoriteFoodAlarmStorage=FavoriteFoodAlarmStorage.getInstance().initialize(mContext);
  if (completeReschedule) {
    favoriteFoodAlarmStorage.cancelOutstandingAlarms();
  }
  Cursor favoriteFoodWhere=db.rawQuery(""String_Node_Str"",null);
  while (favoriteFoodWhere.moveToNext()) {
    int mensaId=favoriteFoodWhere.getInt(0);
    String dishName=favoriteFoodWhere.getString(1);
    Cursor upcomingServings=db.rawQuery(""String_Node_Str"",new String[]{""String_Node_Str"" + mensaId,dishName});
    while (upcomingServings.moveToNext()) {
      favoriteFoodAlarmStorage.scheduleAlarm(upcomingServings.getString(0));
    }
  }
}",0.9950664136622392
161491,"/** 
 * Prepares a bundle, which can be sent to the FavoriteDishAlarmScheduler, which contains all necessary information to schedule the FavoriteDishAlarms. Its procedure is the following: Get the names of all the favorite dishes and their corresponding mensaId (the user flags a food as favorite, which also stores the mensaId). By assuming that the user will only rate the food as a favorite, if he actually goes to that specific mensa, the method checks if there's any information about any of these mensas serving a user's favorite food in the future. If that is the case a Bundle containing the following information: MensaId, FavoriteDishName, Date will be constructed and sent to the FavoriteDishAlarmScheduler. This way it is possible to schedule multiple alarms in advance.
 * @param completeReschedule True if all currently scheduled alarms should be discarded, False if not
 */
public void scheduleFoodAlarms(boolean completeReschedule){
  if (completeReschedule) {
    FavoriteFoodAlarmEntry.removeAll();
  }
  Cursor favoriteFoodWhere=db.rawQuery(""String_Node_Str"",null);
  while (favoriteFoodWhere.moveToNext()) {
    int mensaId=favoriteFoodWhere.getInt(0);
    String dishName=favoriteFoodWhere.getString(1);
    Cursor upcomingServings=db.rawQuery(""String_Node_Str"" + ""String_Node_Str"",new String[]{""String_Node_Str"" + mensaId,dishName});
    while (upcomingServings.moveToNext()) {
      Calendar upcomingDate=Calendar.getInstance();
      upcomingDate.setTime(Utils.getDate(upcomingServings.getString(1)));
      new FavoriteFoodAlarmEntry(mensaId,dishName,upcomingDate,mContext);
    }
  }
}","/** 
 * Prepares a bundle, which can be sent to the FavoriteDishAlarmScheduler, which contains all necessary information to schedule the FavoriteDishAlarms. Its procedure is the following: Get the names of all the favorite dishes and their corresponding mensaId (the user flags a food as favorite, which also stores the mensaId). By assuming that the user will only rate the food as a favorite, if he actually goes to that specific mensa, the method checks if there's any information about any of these mensas serving a user's favorite food in the future. If that is the case a Bundle containing the following information: MensaId, FavoriteDishName, Date will be constructed and sent to the FavoriteDishAlarmScheduler. This way it is possible to schedule multiple alarms in advance.
 * @param completeReschedule True if all currently scheduled alarms should be discarded, False if not
 */
public void scheduleFoodAlarms(boolean completeReschedule){
  if (completeReschedule) {
    FavoriteFoodAlarmEntry.removeAll();
  }
  Cursor favoriteFoodWhere=db.rawQuery(""String_Node_Str"",null);
  while (favoriteFoodWhere.moveToNext()) {
    int mensaId=favoriteFoodWhere.getInt(0);
    String dishName=favoriteFoodWhere.getString(1);
    Cursor upcomingServings=db.rawQuery(""String_Node_Str"",new String[]{""String_Node_Str"" + mensaId,dishName});
    while (upcomingServings.moveToNext()) {
      Calendar upcomingDate=Calendar.getInstance();
      upcomingDate.setTime(Utils.getDate(upcomingServings.getString(0)));
      new FavoriteFoodAlarmEntry(mensaId,dishName,upcomingDate,mContext);
    }
  }
}",0.9931292941911304
161492,"public FavoriteDishAlarmScheduler(Calendar triggeredAt,Context context){
  Calendar scheduledAt=(Calendar)triggeredAt.clone();
  if (!loadTriggerHourAndMinute(context,scheduledAt)) {
    return;
  }
  AlarmManager alarmManager=(AlarmManager)context.getSystemService(Context.ALARM_SERVICE);
  Intent intent=new Intent(context,FavoriteDishAlarmScheduler.class);
  intent.putExtra(""String_Node_Str"",Utils.getDateString(triggeredAt.getTime()));
  PendingIntent schedule=PendingIntent.getBroadcast(context,0,intent,PendingIntent.FLAG_UPDATE_CURRENT);
  alarmManager.set(AlarmManager.RTC_WAKEUP,scheduledAt.getTimeInMillis(),schedule);
}","public FavoriteDishAlarmScheduler(Calendar triggeredAtDayMonthYear,Context context){
  Calendar scheduledAt=(Calendar)triggeredAtDayMonthYear.clone();
  if (!loadTriggerHourAndMinute(context,scheduledAt)) {
    return;
  }
  AlarmManager alarmManager=(AlarmManager)context.getSystemService(Context.ALARM_SERVICE);
  Intent intent=new Intent(context,FavoriteDishAlarmScheduler.class);
  intent.putExtra(""String_Node_Str"",Utils.getDateString(triggeredAtDayMonthYear.getTime()));
  PendingIntent schedule=PendingIntent.getBroadcast(context,triggeredAtDayMonthYear.hashCode(),intent,PendingIntent.FLAG_UPDATE_CURRENT);
  if (Build.VERSION.SDK_INT < 19) {
    alarmManager.set(AlarmManager.RTC_WAKEUP,scheduledAt.getTimeInMillis(),schedule);
  }
 else {
    alarmManager.setWindow(AlarmManager.RTC_WAKEUP,scheduledAt.getTimeInMillis(),2000,schedule);
  }
}",0.8502024291497976
161493,"/** 
 * @param date date as day, month, year. all other values like minutes, seconds etc. have to be zero
 * @param context
 * @param favoriteFoodAlarmEntry
 * @return
 */
private static boolean put(Calendar date,Context context,FavoriteFoodAlarmEntry favoriteFoodAlarmEntry){
synchronized (scheduledEntries) {
    Calendar today=Calendar.getInstance();
    today.setTime(Utils.getDate(Utils.getDateString(today.getTime())));
    if (date.before(today)) {
      return false;
    }
    for (    Calendar calendar : scheduledEntries.keySet()) {
      if (calendar.before(today)) {
        scheduledEntries.remove(calendar);
      }
    }
    int yearScheduled=date.get(Calendar.YEAR);
    int dayOfYearScheduled=date.get(Calendar.DAY_OF_YEAR);
    today=Calendar.getInstance();
    int year=today.get(Calendar.YEAR);
    int dayOfYear=today.get(Calendar.DAY_OF_YEAR);
    int currentMinutes=today.get(Calendar.HOUR_OF_DAY) * 60 + today.get(Calendar.MINUTE);
    if (year == yearScheduled && dayOfYear == dayOfYearScheduled) {
      CafeteriaNotificationSettings cfs=new CafeteriaNotificationSettings(context);
      Pair<Integer,Integer> preferredHourAndMinute=cfs.retrieveHourMinute(date);
      int inMinutesPreferred=preferredHourAndMinute.first * 60 + preferredHourAndMinute.second;
      if (currentMinutes >= inMinutesPreferred) {
        return false;
      }
    }
    HashSet<FavoriteFoodAlarmEntry> alarmEntries;
    if (scheduledEntries.containsKey(date)) {
      alarmEntries=scheduledEntries.get(date);
    }
 else {
      alarmEntries=new HashSet<>();
    }
    int sizeBefore=alarmEntries.size();
    alarmEntries.add(favoriteFoodAlarmEntry);
    scheduledEntries.put(date,alarmEntries);
    new FavoriteDishAlarmScheduler(date,favoriteFoodAlarmEntry.getContext());
    return (alarmEntries.size() > sizeBefore);
  }
}","/** 
 * @param date date as day, month, year. all other values like minutes, seconds etc. have to be zero
 * @param context
 * @param favoriteFoodAlarmEntry
 * @return
 */
private static boolean put(Calendar dateDayMonthYear,Context context,FavoriteFoodAlarmEntry favoriteFoodAlarmEntry){
synchronized (scheduledEntries) {
    Calendar today=Calendar.getInstance();
    today.setTime(Utils.getDate(Utils.getDateString(today.getTime())));
    if (dateDayMonthYear.before(today)) {
      return false;
    }
    for (    Calendar calendar : scheduledEntries.keySet()) {
      if (calendar.before(today)) {
        scheduledEntries.remove(calendar);
      }
    }
    int yearScheduled=dateDayMonthYear.get(Calendar.YEAR);
    int dayOfYearScheduled=dateDayMonthYear.get(Calendar.DAY_OF_YEAR);
    today=Calendar.getInstance();
    int year=today.get(Calendar.YEAR);
    int dayOfYear=today.get(Calendar.DAY_OF_YEAR);
    int currentMinutes=today.get(Calendar.HOUR_OF_DAY) * 60 + today.get(Calendar.MINUTE);
    if (year == yearScheduled && dayOfYear == dayOfYearScheduled) {
      CafeteriaNotificationSettings cfs=new CafeteriaNotificationSettings(context);
      Pair<Integer,Integer> preferredHourAndMinute=cfs.retrieveHourMinute(dateDayMonthYear);
      int inMinutesPreferred=preferredHourAndMinute.first * 60 + preferredHourAndMinute.second;
      if (currentMinutes >= inMinutesPreferred) {
        return false;
      }
    }
    HashSet<FavoriteFoodAlarmEntry> alarmEntries;
    if (scheduledEntries.containsKey(dateDayMonthYear)) {
      alarmEntries=scheduledEntries.get(dateDayMonthYear);
    }
 else {
      alarmEntries=new HashSet<>();
    }
    int sizeBefore=alarmEntries.size();
    alarmEntries.add(favoriteFoodAlarmEntry);
    scheduledEntries.put(dateDayMonthYear,alarmEntries);
    new FavoriteDishAlarmScheduler(dateDayMonthYear,favoriteFoodAlarmEntry.getContext());
    return (alarmEntries.size() > sizeBefore);
  }
}",0.9713679745493108
161494,"@Override protected void onResume(){
  super.onResume();
  Intent cancelPendingFoodNotifications=new Intent(this,FavoriteDishAlarmScheduler.class);
  cancelPendingFoodNotifications.putExtra(FavoriteDishAlarmScheduler.INTENT_CANCEL_ALL_NOTIFICATIONS,true);
  sendBroadcast(cancelPendingFoodNotifications);
}","@Override protected void onResume(){
  super.onResume();
}",0.3186813186813186
161495,"/** 
 * Can either receive a date or a boolean cancelNotifications value. This way other activities can close the currently opened notifications and it is possible to schedule dates, where the alarm has to check for favorite dishes.
 * @param context
 * @param extra Extra can either be ""cancelNotifications"" or a date, when the alarm should check, if there are any favorite dishes at a given date.
 */
@Override public void onReceive(Context context,Intent extra){
  NotificationManager mNotificationManager=(NotificationManager)context.getSystemService(Context.NOTIFICATION_SERVICE);
  cancelFoodNotifications(mNotificationManager);
  if (extra.getBooleanExtra(""String_Node_Str"",false)) {
    return;
  }
  String triggeredAt=extra.getStringExtra(""String_Node_Str"");
  Calendar triggeredCal=Calendar.getInstance();
  triggeredCal.setTime(Utils.getDate(triggeredAt));
  HashSet<FavoriteFoodAlarmEntry> scheduledNow=FavoriteFoodAlarmEntry.getEntriesByCalendar(triggeredCal);
  if (scheduledNow == null) {
    return;
  }
  CafeteriaManager cmm=new CafeteriaManager(context);
  int i=0;
  for (  FavoriteFoodAlarmEntry fae : scheduledNow) {
    activeNotifications.add(i);
    String mensaName=cmm.getMensaNameFromId(fae.getMensaId());
    Intent intent=new Intent(context,CafeteriaActivity.class);
    intent.putExtra(Const.MENSA_FOR_FAVORITEDISH,fae.getMensaId());
    PendingIntent pi=PendingIntent.getActivity(context,fae.getMensaId(),intent,PendingIntent.FLAG_UPDATE_CURRENT);
    String message=mensaName + ""String_Node_Str"" + fae.getDishName();
    NotificationCompat.Builder mBuilder=new NotificationCompat.Builder(context).setSmallIcon(R.mipmap.ic_launcher).setContentTitle(""String_Node_Str"").setStyle(new NotificationCompat.BigTextStyle().bigText(message)).setContentText(message).setAutoCancel(true);
    mBuilder.setContentIntent(pi);
    mBuilder.setDefaults(Notification.DEFAULT_SOUND);
    mBuilder.setAutoCancel(true);
    mNotificationManager.notify(NOTIFICATION_TAG,i,mBuilder.build());
    i++;
  }
}","/** 
 * Can either receive a date or a boolean cancelNotifications value. This way other activities can close the currently opened notifications and it is possible to schedule dates, where the alarm has to check for favorite dishes.
 * @param context
 * @param extra Extra can either be ""cancelNotifications"" or a date, when the alarm should check, if there are any favorite dishes at a given date.
 */
@Override public void onReceive(Context context,Intent extra){
  NotificationManager mNotificationManager=(NotificationManager)context.getSystemService(Context.NOTIFICATION_SERVICE);
  cancelFoodNotifications(mNotificationManager);
  if (extra.getBooleanExtra(""String_Node_Str"",false)) {
    return;
  }
  String triggeredAt=extra.getStringExtra(""String_Node_Str"");
  Calendar triggeredCal=Calendar.getInstance();
  triggeredCal.setTime(Utils.getDate(triggeredAt));
  HashSet<FavoriteFoodAlarmEntry> scheduledNow=FavoriteFoodAlarmEntry.getEntriesByCalendar(triggeredCal);
  if (scheduledNow == null) {
    return;
  }
  CafeteriaManager cmm=new CafeteriaManager(context);
  int i=0;
  for (  FavoriteFoodAlarmEntry fae : scheduledNow) {
    activeNotifications.add(i);
    String mensaName=cmm.getMensaNameFromId(fae.getMensaId());
    Intent intent=new Intent(context,CafeteriaActivity.class);
    intent.putExtra(Const.MENSA_FOR_FAVORITEDISH,fae.getMensaId());
    PendingIntent pi=PendingIntent.getActivity(context,fae.getMensaId(),intent,PendingIntent.FLAG_UPDATE_CURRENT);
    NotificationCompat.Builder mBuilder=new NotificationCompat.Builder(context).setSmallIcon(R.mipmap.ic_launcher).setContentTitle(mensaName).setContentText(fae.getDishName()).setAutoCancel(true);
    mBuilder.setContentIntent(pi);
    mBuilder.setDefaults(Notification.DEFAULT_SOUND);
    mBuilder.setAutoCancel(true);
    mNotificationManager.notify(NOTIFICATION_TAG,i,mBuilder.build());
    i++;
  }
}",0.8885472713297463
161496,"private static boolean put(Calendar date,Context context,FavoriteFoodAlarmEntry favoriteFoodAlarmEntry){
synchronized (scheduledEntries) {
    Calendar today=Calendar.getInstance();
    today.setTime(Utils.getDate(Utils.getDateString(today.getTime())));
    for (    Calendar calendar : scheduledEntries.keySet()) {
      if (calendar.before(today)) {
        scheduledEntries.remove(calendar);
      }
    }
    int yearScheduled=date.get(Calendar.YEAR);
    int dayOfYearScheduled=date.get(Calendar.DAY_OF_YEAR);
    int hourScheduled=date.get(Calendar.HOUR_OF_DAY);
    int minuteScheduled=date.get(Calendar.MINUTE);
    today=Calendar.getInstance();
    int year=today.get(Calendar.YEAR);
    int dayOfYear=today.get(Calendar.DAY_OF_YEAR);
    CafeteriaNotificationSettings cfs=new CafeteriaNotificationSettings(context);
    Pair<Integer,Integer> preferredHourAndMinute=cfs.retrieveHourMinute(date);
    int inMinutesScheduled=hourScheduled * 60 + minuteScheduled;
    int inMinutesPreferred=preferredHourAndMinute.first * 60 + preferredHourAndMinute.second;
    if (yearScheduled == year && dayOfYear == dayOfYearScheduled && inMinutesScheduled >= inMinutesPreferred) {
      return false;
    }
    HashSet<FavoriteFoodAlarmEntry> alarmEntries;
    if (scheduledEntries.containsKey(date)) {
      alarmEntries=scheduledEntries.get(date);
    }
 else {
      alarmEntries=new HashSet<>();
    }
    int sizeBefore=alarmEntries.size();
    alarmEntries.add(favoriteFoodAlarmEntry);
    scheduledEntries.put(date,alarmEntries);
    new FavoriteDishAlarmScheduler(date,favoriteFoodAlarmEntry.getContext());
    return (alarmEntries.size() > sizeBefore);
  }
}","/** 
 * @param date date as day, month, year. all other values like minutes, seconds etc. have to be zero
 * @param context
 * @param favoriteFoodAlarmEntry
 * @return
 */
private static boolean put(Calendar date,Context context,FavoriteFoodAlarmEntry favoriteFoodAlarmEntry){
synchronized (scheduledEntries) {
    Calendar today=Calendar.getInstance();
    today.setTime(Utils.getDate(Utils.getDateString(today.getTime())));
    if (date.before(today)) {
      return false;
    }
    for (    Calendar calendar : scheduledEntries.keySet()) {
      if (calendar.before(today)) {
        scheduledEntries.remove(calendar);
      }
    }
    int yearScheduled=date.get(Calendar.YEAR);
    int dayOfYearScheduled=date.get(Calendar.DAY_OF_YEAR);
    today=Calendar.getInstance();
    int year=today.get(Calendar.YEAR);
    int dayOfYear=today.get(Calendar.DAY_OF_YEAR);
    int currentMinutes=today.get(Calendar.HOUR_OF_DAY) * 60 + today.get(Calendar.MINUTE);
    if (year == yearScheduled && dayOfYear == dayOfYearScheduled) {
      CafeteriaNotificationSettings cfs=new CafeteriaNotificationSettings(context);
      Pair<Integer,Integer> preferredHourAndMinute=cfs.retrieveHourMinute(date);
      int inMinutesPreferred=preferredHourAndMinute.first * 60 + preferredHourAndMinute.second;
      if (currentMinutes >= inMinutesPreferred) {
        return false;
      }
    }
    HashSet<FavoriteFoodAlarmEntry> alarmEntries;
    if (scheduledEntries.containsKey(date)) {
      alarmEntries=scheduledEntries.get(date);
    }
 else {
      alarmEntries=new HashSet<>();
    }
    int sizeBefore=alarmEntries.size();
    alarmEntries.add(favoriteFoodAlarmEntry);
    scheduledEntries.put(date,alarmEntries);
    new FavoriteDishAlarmScheduler(date,favoriteFoodAlarmEntry.getContext());
    return (alarmEntries.size() > sizeBefore);
  }
}",0.6920435031482541
161497,"@Override public View getView(int position,View convertView,ViewGroup parent){
  final ViewHolder holder;
  View view=convertView;
  if (view == null) {
    view=inflater.inflate(R.layout.activity_barrier_free_contact_listview,parent,false);
    holder=new ViewHolder();
    holder.name=(TextView)view.findViewById(R.id.barrierfreeContactListViewName);
    holder.phone=(TextView)view.findViewById(R.id.barrierfreeContactListViewPhone);
    holder.email=(TextView)view.findViewById(R.id.barrierfreeContactListViewEmail);
    holder.more=(TextView)view.findViewById(R.id.barrierfreeContactListViewTumOnlineMore);
    view.setTag(holder);
  }
 else {
    holder=(ViewHolder)view.getTag();
  }
  final BarrierfreeContact contact=contacts.get(position);
  if (contact != null) {
    holder.name.setText(contact.getName());
    holder.phone.setText(contact.getPhone(),TextView.BufferType.SPANNABLE);
    Linkify.addLinks(holder.phone,Linkify.ALL);
    holder.email.setText(contact.getEmail());
    if (!contact.getTumonlineID().equals(""String_Node_Str"")) {
      holder.more.setVisibility(View.VISIBLE);
      holder.more.setText(context.getString(R.string.more_info));
      holder.more.setOnClickListener(new View.OnClickListener(){
        @Override public void onClick(        View v){
          Person person=new Person();
          person.setName(contact.getName());
          person.setId(contact.getTumonlineID());
          Bundle bundle=new Bundle();
          bundle.putSerializable(""String_Node_Str"",person);
          Intent intent=new Intent(context,PersonsDetailsActivity.class);
          intent.putExtras(bundle);
          context.startActivity(intent);
        }
      }
);
    }
 else {
      holder.more.setVisibility(View.GONE);
    }
  }
  return view;
}","@Override public View getView(int position,View convertView,ViewGroup parent){
  final ViewHolder holder;
  View view=convertView;
  if (view == null) {
    view=inflater.inflate(R.layout.activity_barrier_free_contact_listview,parent,false);
    holder=new ViewHolder();
    holder.name=(TextView)view.findViewById(R.id.barrierfreeContactListViewName);
    holder.phone=(TextView)view.findViewById(R.id.barrierfreeContactListViewPhone);
    holder.email=(TextView)view.findViewById(R.id.barrierfreeContactListViewEmail);
    holder.more=(TextView)view.findViewById(R.id.barrierfreeContactListViewTumOnlineMore);
    view.setTag(holder);
  }
 else {
    holder=(ViewHolder)view.getTag();
  }
  final BarrierfreeContact contact=contacts.get(position);
  if (contact != null) {
    holder.name.setText(contact.getName());
    holder.phone.setText(contact.getPhone(),TextView.BufferType.SPANNABLE);
    Linkify.addLinks(holder.phone,Linkify.ALL);
    holder.email.setText(contact.getEmail());
    if (!contact.getTumonlineID().equals(""String_Node_Str"") && !contact.getTumonlineID().equals(""String_Node_Str"")) {
      holder.more.setVisibility(View.VISIBLE);
      holder.more.setText(context.getString(R.string.more_info));
      holder.more.setOnClickListener(new View.OnClickListener(){
        @Override public void onClick(        View v){
          Person person=new Person();
          person.setName(contact.getName());
          person.setId(contact.getTumonlineID());
          Bundle bundle=new Bundle();
          bundle.putSerializable(""String_Node_Str"",person);
          Intent intent=new Intent(context,PersonsDetailsActivity.class);
          intent.putExtras(bundle);
          context.startActivity(intent);
        }
      }
);
    }
 else {
      holder.more.setVisibility(View.GONE);
    }
  }
  return view;
}",0.9847179772158932
161498,"/** 
 * Prepares a bundle, which can be sent to the FavoriteDishAlarmScheduler, which contains all necessary information to schedule the FavoriteDishAlarms. Its procedure is the following: Get the names of all the favorite dishes and their corresponding mensaId (the user flags a food as favorite, which also stores the mensaId). By assuming that the user will only rate the food as a favorite, if he actually goes to that specific mensa, the method checks if there's any information about any of these mensas serving a user's favorite food in the future. If that is the case a Bundle containing the following information: MensaId, FavoriteDishName, Date will be constructed and sent to the FavoriteDishAlarmScheduler. This way it is possible to schedule multiple alarms in advance.
 * @param completeReschedule True if all currently scheduled alarms should be discarded, False if not
 */
public void scheduleFoodAlarms(boolean completeReschedule){
  if (completeReschedule) {
    FavoriteFoodAlarmEntry.removeAll();
  }
  Cursor favoriteFoodWhere=db.rawQuery(""String_Node_Str"",null);
  while (favoriteFoodWhere.moveToNext()) {
    int mensaId=favoriteFoodWhere.getInt(0);
    String dishName=favoriteFoodWhere.getString(1);
    Cursor upcomingServings=db.rawQuery(""String_Node_Str"" + ""String_Node_Str"",new String[]{""String_Node_Str"" + mensaId,dishName});
    while (upcomingServings.moveToNext()) {
      Calendar upcomingDate=Calendar.getInstance();
      upcomingDate.setTime(Utils.getDate(upcomingServings.getString(1)));
      new FavoriteFoodAlarmEntry(mensaId,dishName,upcomingDate,mContext);
    }
  }
}","/** 
 * Prepares a bundle, which can be sent to the FavoriteDishAlarmScheduler, which contains all necessary information to schedule the FavoriteDishAlarms. Its procedure is the following: Get the names of all the favorite dishes and their corresponding mensaId (the user flags a food as favorite, which also stores the mensaId). By assuming that the user will only rate the food as a favorite, if he actually goes to that specific mensa, the method checks if there's any information about any of these mensas serving a user's favorite food in the future. If that is the case a Bundle containing the following information: MensaId, FavoriteDishName, Date will be constructed and sent to the FavoriteDishAlarmScheduler. This way it is possible to schedule multiple alarms in advance.
 * @param completeReschedule True if all currently scheduled alarms should be discarded, False if not
 */
public void scheduleFoodAlarms(boolean completeReschedule){
  if (completeReschedule) {
    FavoriteFoodAlarmEntry.removeAll();
  }
  Cursor favoriteFoodWhere=db.rawQuery(""String_Node_Str"",null);
  while (favoriteFoodWhere.moveToNext()) {
    int mensaId=favoriteFoodWhere.getInt(0);
    String dishName=favoriteFoodWhere.getString(1);
    Cursor upcomingServings=db.rawQuery(""String_Node_Str"",new String[]{""String_Node_Str"" + mensaId,dishName});
    while (upcomingServings.moveToNext()) {
      Calendar upcomingDate=Calendar.getInstance();
      upcomingDate.setTime(Utils.getDate(upcomingServings.getString(0)));
      new FavoriteFoodAlarmEntry(mensaId,dishName,upcomingDate,mContext);
    }
  }
}",0.9931292941911304
161499,"public FavoriteDishAlarmScheduler(Calendar triggeredAt,Context context){
  Calendar scheduledAt=(Calendar)triggeredAt.clone();
  if (!loadTriggerHourAndMinute(context,scheduledAt)) {
    return;
  }
  AlarmManager alarmManager=(AlarmManager)context.getSystemService(Context.ALARM_SERVICE);
  Intent intent=new Intent(context,FavoriteDishAlarmScheduler.class);
  intent.putExtra(""String_Node_Str"",Utils.getDateString(triggeredAt.getTime()));
  PendingIntent schedule=PendingIntent.getBroadcast(context,0,intent,PendingIntent.FLAG_UPDATE_CURRENT);
  alarmManager.set(AlarmManager.RTC_WAKEUP,scheduledAt.getTimeInMillis(),schedule);
}","public FavoriteDishAlarmScheduler(Calendar triggeredAtDayMonthYear,Context context){
  Calendar scheduledAt=(Calendar)triggeredAtDayMonthYear.clone();
  if (!loadTriggerHourAndMinute(context,scheduledAt)) {
    return;
  }
  AlarmManager alarmManager=(AlarmManager)context.getSystemService(Context.ALARM_SERVICE);
  Intent intent=new Intent(context,FavoriteDishAlarmScheduler.class);
  intent.putExtra(""String_Node_Str"",Utils.getDateString(triggeredAtDayMonthYear.getTime()));
  PendingIntent schedule=PendingIntent.getBroadcast(context,triggeredAtDayMonthYear.hashCode(),intent,PendingIntent.FLAG_UPDATE_CURRENT);
  if (Build.VERSION.SDK_INT < 19) {
    alarmManager.set(AlarmManager.RTC_WAKEUP,scheduledAt.getTimeInMillis(),schedule);
  }
 else {
    alarmManager.setWindow(AlarmManager.RTC_WAKEUP,scheduledAt.getTimeInMillis(),2000,schedule);
  }
}",0.8502024291497976
161500,"/** 
 * @param date date as day, month, year. all other values like minutes, seconds etc. have to be zero
 * @param context
 * @param favoriteFoodAlarmEntry
 * @return
 */
private static boolean put(Calendar date,Context context,FavoriteFoodAlarmEntry favoriteFoodAlarmEntry){
synchronized (scheduledEntries) {
    Calendar today=Calendar.getInstance();
    today.setTime(Utils.getDate(Utils.getDateString(today.getTime())));
    if (date.before(today)) {
      return false;
    }
    for (    Calendar calendar : scheduledEntries.keySet()) {
      if (calendar.before(today)) {
        scheduledEntries.remove(calendar);
      }
    }
    int yearScheduled=date.get(Calendar.YEAR);
    int dayOfYearScheduled=date.get(Calendar.DAY_OF_YEAR);
    today=Calendar.getInstance();
    int year=today.get(Calendar.YEAR);
    int dayOfYear=today.get(Calendar.DAY_OF_YEAR);
    int currentMinutes=today.get(Calendar.HOUR_OF_DAY) * 60 + today.get(Calendar.MINUTE);
    if (year == yearScheduled && dayOfYear == dayOfYearScheduled) {
      CafeteriaNotificationSettings cfs=new CafeteriaNotificationSettings(context);
      Pair<Integer,Integer> preferredHourAndMinute=cfs.retrieveHourMinute(date);
      int inMinutesPreferred=preferredHourAndMinute.first * 60 + preferredHourAndMinute.second;
      if (currentMinutes >= inMinutesPreferred) {
        return false;
      }
    }
    HashSet<FavoriteFoodAlarmEntry> alarmEntries;
    if (scheduledEntries.containsKey(date)) {
      alarmEntries=scheduledEntries.get(date);
    }
 else {
      alarmEntries=new HashSet<>();
    }
    int sizeBefore=alarmEntries.size();
    alarmEntries.add(favoriteFoodAlarmEntry);
    scheduledEntries.put(date,alarmEntries);
    new FavoriteDishAlarmScheduler(date,favoriteFoodAlarmEntry.getContext());
    return (alarmEntries.size() > sizeBefore);
  }
}","/** 
 * @param date date as day, month, year. all other values like minutes, seconds etc. have to be zero
 * @param context
 * @param favoriteFoodAlarmEntry
 * @return
 */
private static boolean put(Calendar dateDayMonthYear,Context context,FavoriteFoodAlarmEntry favoriteFoodAlarmEntry){
synchronized (scheduledEntries) {
    Calendar today=Calendar.getInstance();
    today.setTime(Utils.getDate(Utils.getDateString(today.getTime())));
    if (dateDayMonthYear.before(today)) {
      return false;
    }
    for (    Calendar calendar : scheduledEntries.keySet()) {
      if (calendar.before(today)) {
        scheduledEntries.remove(calendar);
      }
    }
    int yearScheduled=dateDayMonthYear.get(Calendar.YEAR);
    int dayOfYearScheduled=dateDayMonthYear.get(Calendar.DAY_OF_YEAR);
    today=Calendar.getInstance();
    int year=today.get(Calendar.YEAR);
    int dayOfYear=today.get(Calendar.DAY_OF_YEAR);
    int currentMinutes=today.get(Calendar.HOUR_OF_DAY) * 60 + today.get(Calendar.MINUTE);
    if (year == yearScheduled && dayOfYear == dayOfYearScheduled) {
      CafeteriaNotificationSettings cfs=new CafeteriaNotificationSettings(context);
      Pair<Integer,Integer> preferredHourAndMinute=cfs.retrieveHourMinute(dateDayMonthYear);
      int inMinutesPreferred=preferredHourAndMinute.first * 60 + preferredHourAndMinute.second;
      if (currentMinutes >= inMinutesPreferred) {
        return false;
      }
    }
    HashSet<FavoriteFoodAlarmEntry> alarmEntries;
    if (scheduledEntries.containsKey(dateDayMonthYear)) {
      alarmEntries=scheduledEntries.get(dateDayMonthYear);
    }
 else {
      alarmEntries=new HashSet<>();
    }
    int sizeBefore=alarmEntries.size();
    alarmEntries.add(favoriteFoodAlarmEntry);
    scheduledEntries.put(dateDayMonthYear,alarmEntries);
    new FavoriteDishAlarmScheduler(dateDayMonthYear,favoriteFoodAlarmEntry.getContext());
    return (alarmEntries.size() > sizeBefore);
  }
}",0.9713679745493108
161501,"@Override protected void onResume(){
  super.onResume();
  Intent cancelPendingFoodNotifications=new Intent(this,FavoriteDishAlarmScheduler.class);
  cancelPendingFoodNotifications.putExtra(FavoriteDishAlarmScheduler.INTENT_CANCEL_ALL_NOTIFICATIONS,true);
  sendBroadcast(cancelPendingFoodNotifications);
}","@Override protected void onResume(){
  super.onResume();
}",0.3186813186813186
161502,"/** 
 * Can either receive a date or a boolean cancelNotifications value. This way other activities can close the currently opened notifications and it is possible to schedule dates, where the alarm has to check for favorite dishes.
 * @param context
 * @param extra Extra can either be ""cancelNotifications"" or a date, when the alarm should check, if there are any favorite dishes at a given date.
 */
@Override public void onReceive(Context context,Intent extra){
  NotificationManager mNotificationManager=(NotificationManager)context.getSystemService(Context.NOTIFICATION_SERVICE);
  cancelFoodNotifications(mNotificationManager);
  if (extra.getBooleanExtra(""String_Node_Str"",false)) {
    return;
  }
  String triggeredAt=extra.getStringExtra(""String_Node_Str"");
  Calendar triggeredCal=Calendar.getInstance();
  triggeredCal.setTime(Utils.getDate(triggeredAt));
  HashSet<FavoriteFoodAlarmEntry> scheduledNow=FavoriteFoodAlarmEntry.getEntriesByCalendar(triggeredCal);
  if (scheduledNow == null) {
    return;
  }
  CafeteriaManager cmm=new CafeteriaManager(context);
  int i=0;
  for (  FavoriteFoodAlarmEntry fae : scheduledNow) {
    activeNotifications.add(i);
    String mensaName=cmm.getMensaNameFromId(fae.getMensaId());
    Intent intent=new Intent(context,CafeteriaActivity.class);
    intent.putExtra(Const.MENSA_FOR_FAVORITEDISH,fae.getMensaId());
    PendingIntent pi=PendingIntent.getActivity(context,fae.getMensaId(),intent,PendingIntent.FLAG_UPDATE_CURRENT);
    String message=mensaName + ""String_Node_Str"" + fae.getDishName();
    NotificationCompat.Builder mBuilder=new NotificationCompat.Builder(context).setSmallIcon(R.mipmap.ic_launcher).setContentTitle(""String_Node_Str"").setStyle(new NotificationCompat.BigTextStyle().bigText(message)).setContentText(message).setAutoCancel(true);
    mBuilder.setContentIntent(pi);
    mBuilder.setDefaults(Notification.DEFAULT_SOUND);
    mBuilder.setAutoCancel(true);
    mNotificationManager.notify(NOTIFICATION_TAG,i,mBuilder.build());
    i++;
  }
}","/** 
 * Can either receive a date or a boolean cancelNotifications value. This way other activities can close the currently opened notifications and it is possible to schedule dates, where the alarm has to check for favorite dishes.
 * @param context
 * @param extra Extra can either be ""cancelNotifications"" or a date, when the alarm should check, if there are any favorite dishes at a given date.
 */
@Override public void onReceive(Context context,Intent extra){
  NotificationManager mNotificationManager=(NotificationManager)context.getSystemService(Context.NOTIFICATION_SERVICE);
  cancelFoodNotifications(mNotificationManager);
  if (extra.getBooleanExtra(""String_Node_Str"",false)) {
    return;
  }
  String triggeredAt=extra.getStringExtra(""String_Node_Str"");
  Calendar triggeredCal=Calendar.getInstance();
  triggeredCal.setTime(Utils.getDate(triggeredAt));
  HashSet<FavoriteFoodAlarmEntry> scheduledNow=FavoriteFoodAlarmEntry.getEntriesByCalendar(triggeredCal);
  if (scheduledNow == null) {
    return;
  }
  CafeteriaManager cmm=new CafeteriaManager(context);
  int i=0;
  for (  FavoriteFoodAlarmEntry fae : scheduledNow) {
    activeNotifications.add(i);
    String mensaName=cmm.getMensaNameFromId(fae.getMensaId());
    Intent intent=new Intent(context,CafeteriaActivity.class);
    intent.putExtra(Const.MENSA_FOR_FAVORITEDISH,fae.getMensaId());
    PendingIntent pi=PendingIntent.getActivity(context,fae.getMensaId(),intent,PendingIntent.FLAG_UPDATE_CURRENT);
    NotificationCompat.Builder mBuilder=new NotificationCompat.Builder(context).setSmallIcon(R.mipmap.ic_launcher).setContentTitle(mensaName).setContentText(fae.getDishName()).setAutoCancel(true);
    mBuilder.setContentIntent(pi);
    mBuilder.setDefaults(Notification.DEFAULT_SOUND);
    mBuilder.setAutoCancel(true);
    mNotificationManager.notify(NOTIFICATION_TAG,i,mBuilder.build());
    i++;
  }
}",0.8885472713297463
161503,"private static boolean put(Calendar date,Context context,FavoriteFoodAlarmEntry favoriteFoodAlarmEntry){
synchronized (scheduledEntries) {
    Calendar today=Calendar.getInstance();
    today.setTime(Utils.getDate(Utils.getDateString(today.getTime())));
    for (    Calendar calendar : scheduledEntries.keySet()) {
      if (calendar.before(today)) {
        scheduledEntries.remove(calendar);
      }
    }
    int yearScheduled=date.get(Calendar.YEAR);
    int dayOfYearScheduled=date.get(Calendar.DAY_OF_YEAR);
    int hourScheduled=date.get(Calendar.HOUR_OF_DAY);
    int minuteScheduled=date.get(Calendar.MINUTE);
    today=Calendar.getInstance();
    int year=today.get(Calendar.YEAR);
    int dayOfYear=today.get(Calendar.DAY_OF_YEAR);
    CafeteriaNotificationSettings cfs=new CafeteriaNotificationSettings(context);
    Pair<Integer,Integer> preferredHourAndMinute=cfs.retrieveHourMinute(date);
    int inMinutesScheduled=hourScheduled * 60 + minuteScheduled;
    int inMinutesPreferred=preferredHourAndMinute.first * 60 + preferredHourAndMinute.second;
    if (yearScheduled == year && dayOfYear == dayOfYearScheduled && inMinutesScheduled >= inMinutesPreferred) {
      return false;
    }
    HashSet<FavoriteFoodAlarmEntry> alarmEntries;
    if (scheduledEntries.containsKey(date)) {
      alarmEntries=scheduledEntries.get(date);
    }
 else {
      alarmEntries=new HashSet<>();
    }
    int sizeBefore=alarmEntries.size();
    alarmEntries.add(favoriteFoodAlarmEntry);
    scheduledEntries.put(date,alarmEntries);
    new FavoriteDishAlarmScheduler(date,favoriteFoodAlarmEntry.getContext());
    return (alarmEntries.size() > sizeBefore);
  }
}","/** 
 * @param date date as day, month, year. all other values like minutes, seconds etc. have to be zero
 * @param context
 * @param favoriteFoodAlarmEntry
 * @return
 */
private static boolean put(Calendar date,Context context,FavoriteFoodAlarmEntry favoriteFoodAlarmEntry){
synchronized (scheduledEntries) {
    Calendar today=Calendar.getInstance();
    today.setTime(Utils.getDate(Utils.getDateString(today.getTime())));
    if (date.before(today)) {
      return false;
    }
    for (    Calendar calendar : scheduledEntries.keySet()) {
      if (calendar.before(today)) {
        scheduledEntries.remove(calendar);
      }
    }
    int yearScheduled=date.get(Calendar.YEAR);
    int dayOfYearScheduled=date.get(Calendar.DAY_OF_YEAR);
    today=Calendar.getInstance();
    int year=today.get(Calendar.YEAR);
    int dayOfYear=today.get(Calendar.DAY_OF_YEAR);
    int currentMinutes=today.get(Calendar.HOUR_OF_DAY) * 60 + today.get(Calendar.MINUTE);
    if (year == yearScheduled && dayOfYear == dayOfYearScheduled) {
      CafeteriaNotificationSettings cfs=new CafeteriaNotificationSettings(context);
      Pair<Integer,Integer> preferredHourAndMinute=cfs.retrieveHourMinute(date);
      int inMinutesPreferred=preferredHourAndMinute.first * 60 + preferredHourAndMinute.second;
      if (currentMinutes >= inMinutesPreferred) {
        return false;
      }
    }
    HashSet<FavoriteFoodAlarmEntry> alarmEntries;
    if (scheduledEntries.containsKey(date)) {
      alarmEntries=scheduledEntries.get(date);
    }
 else {
      alarmEntries=new HashSet<>();
    }
    int sizeBefore=alarmEntries.size();
    alarmEntries.add(favoriteFoodAlarmEntry);
    scheduledEntries.put(date,alarmEntries);
    new FavoriteDishAlarmScheduler(date,favoriteFoodAlarmEntry.getContext());
    return (alarmEntries.size() > sizeBefore);
  }
}",0.6920435031482541
161504,"@Override public boolean onPreferenceStartScreen(PreferenceFragmentCompat preferenceFragmentCompat,PreferenceScreen preferenceScreen){
  FragmentTransaction ft=getSupportFragmentManager().beginTransaction();
  SettingsFragment fragment=new SettingsFragment();
  Bundle args=new Bundle();
  args.putString(PreferenceFragmentCompat.ARG_PREFERENCE_ROOT,preferenceScreen.getKey());
  fragment.setArguments(args);
  ft.add(R.id.settings_frame,fragment,preferenceScreen.getKey());
  ft.addToBackStack(preferenceScreen.getKey());
  ft.commit();
  return true;
}","@Override public boolean onPreferenceStartScreen(PreferenceFragmentCompat preferenceFragmentCompat,PreferenceScreen preferenceScreen){
  FragmentTransaction ft=getSupportFragmentManager().beginTransaction();
  SettingsFragment fragment=new SettingsFragment();
  Bundle args=new Bundle();
  args.putString(PreferenceFragmentCompat.ARG_PREFERENCE_ROOT,preferenceScreen.getKey());
  fragment.setArguments(args);
  ft.replace(R.id.settings_frame,fragment,preferenceScreen.getKey());
  ft.addToBackStack(preferenceScreen.getKey());
  ft.commit();
  return true;
}",0.9910071942446044
161505,"@Override public void onDataSetChanged(){
  CalendarManager calendarManager=new CalendarManager(this.applicationContext);
  calendarEvents=calendarManager.getNextDaysFromDb(14);
  Collections.sort(calendarEvents);
  Calendar currentDate=Calendar.getInstance();
  Date startDate=new Date();
  startDate.setTime(0);
  currentDate.setTime(startDate);
  for (  IntegratedCalendarEvent calendarEvent : calendarEvents) {
    Calendar calendarDate=calendarEvent.getStartTime();
    if (!DateUtils.isSameDay(currentDate,calendarDate)) {
      currentDate=calendarDate;
      calendarEvent.setIsFirstOnDay(true);
    }
  }
}","@Override public void onDataSetChanged(){
  CalendarManager calendarManager=new CalendarManager(this.applicationContext);
  calendarEvents=calendarManager.getNextDaysFromDb(14);
  Calendar currentDate=Calendar.getInstance();
  Date startDate=new Date();
  startDate.setTime(0);
  currentDate.setTime(startDate);
  for (  IntegratedCalendarEvent calendarEvent : calendarEvents) {
    Calendar calendarDate=calendarEvent.getStartTime();
    if (!DateUtils.isSameDay(currentDate,calendarDate)) {
      currentDate=calendarDate;
      calendarEvent.setIsFirstOnDay(true);
    }
  }
}",0.9698492462311558
161506,"@Override public RemoteViews getViewAt(int position){
  RemoteViews rv=new RemoteViews(applicationContext.getPackageName(),R.layout.timetable_widget_item);
  if (this.calendarEvents == null) {
    return rv;
  }
  IntegratedCalendarEvent currentItem=this.calendarEvents.get(position);
  if (currentItem == null) {
    return null;
  }
  Calendar calendar=currentItem.getStartTime();
  if (currentItem.isFirstOnDay()) {
    rv.setTextViewText(R.id.timetable_widget_date_day,String.valueOf(calendar.get(Calendar.DAY_OF_MONTH)));
    rv.setTextViewText(R.id.timetable_widget_date_weekday,calendar.getDisplayName(Calendar.DAY_OF_WEEK,Calendar.SHORT,Locale.getDefault()));
    if (Build.VERSION.SDK_INT >= Build.VERSION_CODES.JELLY_BEAN) {
      rv.setViewPadding(R.id.timetable_widget_item,0,15,0,0);
    }
  }
  rv.setInt(R.id.timetable_widget_event,""String_Node_Str"",currentItem.getColor());
  rv.setTextViewText(R.id.timetable_widget_event_title,currentItem.getName());
  DateFormat timeFormat=android.text.format.DateFormat.getTimeFormat(applicationContext);
  String time=timeFormat.format(currentItem.getStartTime().getTime());
  time+=""String_Node_Str"" + timeFormat.format(currentItem.getEndTime().getTime());
  rv.setTextViewText(R.id.timetable_widget_event_time,time);
  rv.setTextViewText(R.id.timetable_widget_event_location,currentItem.getLocation());
  return rv;
}","@Override public RemoteViews getViewAt(int position){
  RemoteViews rv=new RemoteViews(applicationContext.getPackageName(),R.layout.timetable_widget_item);
  if (this.calendarEvents == null) {
    return rv;
  }
  IntegratedCalendarEvent currentItem=this.calendarEvents.get(position);
  if (currentItem == null) {
    return null;
  }
  Calendar calendar=currentItem.getStartTime();
  if (currentItem.isFirstOnDay()) {
    rv.setTextViewText(R.id.timetable_widget_date_day,String.valueOf(calendar.get(Calendar.DAY_OF_MONTH)));
    rv.setTextViewText(R.id.timetable_widget_date_weekday,calendar.getDisplayName(Calendar.DAY_OF_WEEK,Calendar.SHORT,Locale.getDefault()));
    if (Build.VERSION.SDK_INT >= Build.VERSION_CODES.JELLY_BEAN) {
      rv.setViewPadding(R.id.timetable_widget_item,0,15,0,0);
    }
  }
 else {
    rv.setTextViewText(R.id.timetable_widget_date_day,""String_Node_Str"");
    rv.setTextViewText(R.id.timetable_widget_date_weekday,""String_Node_Str"");
    if (Build.VERSION.SDK_INT >= Build.VERSION_CODES.JELLY_BEAN) {
      rv.setViewPadding(R.id.timetable_widget_item,0,0,0,0);
    }
  }
  rv.setInt(R.id.timetable_widget_event,""String_Node_Str"",currentItem.getColor());
  rv.setTextViewText(R.id.timetable_widget_event_title,currentItem.getName());
  DateFormat timeFormat=android.text.format.DateFormat.getTimeFormat(applicationContext);
  String time=timeFormat.format(currentItem.getStartTime().getTime());
  time+=""String_Node_Str"" + timeFormat.format(currentItem.getEndTime().getTime());
  rv.setTextViewText(R.id.timetable_widget_event_time,time);
  rv.setTextViewText(R.id.timetable_widget_event_location,currentItem.getLocation());
  return rv;
}",0.902166776099803
161507,"private void displayDebugInfo(){
  TableLayout table=(TableLayout)findViewById(R.id.debugInfos);
  SharedPreferences sp=PreferenceManager.getDefaultSharedPreferences(this);
  this.addDebugRow(table,""String_Node_Str"",sp.getString(Const.LRZ_ID,""String_Node_Str""));
  this.addDebugRow(table,""String_Node_Str"",sp.getString(Const.ACCESS_TOKEN,""String_Node_Str""));
  this.addDebugRow(table,""String_Node_Str"",sp.getBoolean(Const.BUG_REPORTS,false) + ""String_Node_Str"");
  this.addDebugRow(table,""String_Node_Str"",Utils.getInternalSettingString(this,Const.GCM_REG_ID,""String_Node_Str""));
  this.addDebugRow(table,""String_Node_Str"",DateUtils.getRelativeDateTimeString(this,Utils.getInternalSettingLong(this,Const.GCM_REG_ID_LAST_TRANSMISSION,0),DateUtils.MINUTE_IN_MILLIS,DateUtils.DAY_IN_MILLIS * 2,0).toString());
  table.setVisibility(View.VISIBLE);
}","private void displayDebugInfo(){
  TableLayout table=(TableLayout)findViewById(R.id.debugInfos);
  SharedPreferences sp=PreferenceManager.getDefaultSharedPreferences(this);
  this.addDebugRow(table,""String_Node_Str"",sp.getString(Const.LRZ_ID,""String_Node_Str""));
  this.addDebugRow(table,""String_Node_Str"",sp.getString(Const.ACCESS_TOKEN,""String_Node_Str""));
  this.addDebugRow(table,""String_Node_Str"",sp.getBoolean(Const.BUG_REPORTS,false) + ""String_Node_Str"");
  this.addDebugRow(table,""String_Node_Str"",Utils.getInternalSettingString(this,Const.GCM_REG_ID,""String_Node_Str""));
  this.addDebugRow(table,""String_Node_Str"",DateUtils.getRelativeDateTimeString(this,Utils.getInternalSettingLong(this,Const.GCM_REG_ID_LAST_TRANSMISSION,0),DateUtils.MINUTE_IN_MILLIS,DateUtils.DAY_IN_MILLIS * 2,0).toString());
  try {
    PackageInfo packageInfo=getPackageManager().getPackageInfo(getPackageName(),0);
    this.addDebugRow(table,""String_Node_Str"",String.valueOf(packageInfo.versionCode));
  }
 catch (  NameNotFoundException e) {
    Utils.log(e);
  }
  table.setVisibility(View.VISIBLE);
}",0.8747412008281573
161508,"private void populateNewsSources(){
  PreferenceCategory newsSources=(PreferenceCategory)findPreference(""String_Node_Str"");
  NewsManager cm=new NewsManager(mContext);
  Cursor cur=cm.getNewsSources();
  if (cur.moveToFirst()) {
    do {
      final CheckBoxPreference pref=new CheckBoxPreference(mContext);
      pref.setKey(""String_Node_Str"" + cur.getString(0));
      pref.setDefaultValue(true);
      if (Build.VERSION.SDK_INT >= 11) {
        final String url=cur.getString(1);
        new Thread(new Runnable(){
          @Override public void run(){
            NetUtils net=new NetUtils(mContext);
            try {
              final Optional<Bitmap> bmp=net.downloadImageToBitmap(url);
              if (!bmp.isPresent()) {
                return;
              }
              mContext.runOnUiThread(new Runnable(){
                @TargetApi(11) @Override public void run(){
                  pref.setIcon(new BitmapDrawable(getResources(),bmp.get()));
                }
              }
);
            }
 catch (            NullPointerException e) {
            }
          }
        }
).start();
      }
      pref.setTitle(cur.getString(2));
      newsSources.addPreference(pref);
    }
 while (cur.moveToNext());
  }
  cur.close();
}","private void populateNewsSources(){
  PreferenceCategory newsSources=(PreferenceCategory)findPreference(""String_Node_Str"");
  NewsManager cm=new NewsManager(mContext);
  Cursor cur=cm.getNewsSources();
  if (cur.moveToFirst()) {
    do {
      final CheckBoxPreference pref=new CheckBoxPreference(mContext);
      pref.setKey(""String_Node_Str"" + cur.getString(0));
      pref.setDefaultValue(true);
      if (Build.VERSION.SDK_INT >= 11) {
        final String url=cur.getString(1);
        new Thread(new Runnable(){
          @Override public void run(){
            NetUtils net=new NetUtils(mContext);
            final Optional<Bitmap> bmp=net.downloadImageToBitmap(url);
            mContext.runOnUiThread(new Runnable(){
              @TargetApi(11) @Override public void run(){
                if (bmp.isPresent()) {
                  pref.setIcon(new BitmapDrawable(getResources(),bmp.get()));
                }
              }
            }
);
          }
        }
).start();
      }
      pref.setTitle(cur.getString(2));
      newsSources.addPreference(pref);
    }
 while (cur.moveToNext());
  }
  cur.close();
}",0.7764210526315789
161509,"@TargetApi(11) @Override public void run(){
  pref.setIcon(new BitmapDrawable(getResources(),bmp.get()));
}","@TargetApi(11) @Override public void run(){
  if (bmp.isPresent()) {
    pref.setIcon(new BitmapDrawable(getResources(),bmp.get()));
  }
}",0.8734693877551021
161510,"public static void loadGeo(Context c){
  LocationManager locationManager=new LocationManager(c);
  SQLiteDatabase db=getDb(c);
  Cursor cur=db.rawQuery(""String_Node_Str"" + ""String_Node_Str"" + ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str"",null);
  if (cur.moveToFirst()) {
    do {
      String location=cur.getString(0);
      if (location != null && !location.isEmpty()) {
        Optional<Geo> geo=locationManager.roomLocationStringToGeo(location);
        if (geo.isPresent()) {
          Utils.logv(""String_Node_Str"" + location + ' '+ geo);
          db.execSQL(""String_Node_Str"",new String[]{location,geo.get().getLatitude(),geo.get().getLongitude()});
        }
      }
    }
 while (cur.moveToNext());
  }
  cur.close();
  boolean syncCalendar=Utils.getInternalSettingBool(c,Const.SYNC_CALENDAR,false) && ContextCompat.checkSelfPermission(c,Manifest.permission.WRITE_CALENDAR) == PackageManager.PERMISSION_GRANTED;
  if (syncCalendar && new SyncManager(c).needSync(Const.SYNC_CALENDAR,TIME_TO_SYNC_CALENDAR)) {
    syncCalendar(c);
    new SyncManager(c).replaceIntoDb(Const.SYNC_CALENDAR);
  }
}","public static void loadGeo(Context c){
  LocationManager locationManager=new LocationManager(c);
  SQLiteDatabase db=getDb(c);
  Cursor cur=db.rawQuery(""String_Node_Str"" + ""String_Node_Str"" + ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str"",null);
  if (cur.moveToFirst()) {
    do {
      String location=cur.getString(0);
      if (location == null || location.isEmpty()) {
        continue;
      }
      Optional<Geo> geo=locationManager.roomLocationStringToGeo(location);
      if (geo.isPresent()) {
        Utils.logv(""String_Node_Str"" + location + ' '+ geo);
        db.execSQL(""String_Node_Str"",new String[]{location,geo.get().getLatitude(),geo.get().getLongitude()});
      }
    }
 while (cur.moveToNext());
  }
  cur.close();
  boolean syncCalendar=Utils.getInternalSettingBool(c,Const.SYNC_CALENDAR,false) && ContextCompat.checkSelfPermission(c,Manifest.permission.WRITE_CALENDAR) == PackageManager.PERMISSION_GRANTED;
  if (syncCalendar && new SyncManager(c).needSync(Const.SYNC_CALENDAR,TIME_TO_SYNC_CALENDAR)) {
    syncCalendar(c);
    new SyncManager(c).replaceIntoDb(Const.SYNC_CALENDAR);
  }
}",0.9726824899238692
161511,"/** 
 * Adds the newest news card
 * @param context Context
 */
@Override public void onRequestCard(Context context){
  StringBuilder and=new StringBuilder();
  Cursor c=getNewsSources();
  if (c.moveToFirst()) {
    do {
      int id=c.getInt(0);
      boolean show=Utils.getSettingBool(context,""String_Node_Str"" + id,true);
      if (show) {
        if (!and.toString().isEmpty()) {
          and.append(""String_Node_Str"");
        }
        and.append(""String_Node_Str"").append(id).append('\""');
      }
    }
 while (c.moveToNext());
  }
  c.close();
  if (!and.toString().isEmpty()) {
    StringBuilder query=new StringBuilder(""String_Node_Str"" + ""String_Node_Str"" + ""String_Node_Str"");
    if (Utils.getSettingBool(context,""String_Node_Str"",true)) {
      query.append(""String_Node_Str"" + ""String_Node_Str"" + ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str"");
    }
 else {
      query.append(""String_Node_Str"");
    }
    query.append(""String_Node_Str"").append(and).append(""String_Node_Str"").append(""String_Node_Str"");
    Cursor cur=db.rawQuery(query.toString(),null);
    int i=0;
    if (cur.moveToFirst()) {
      do {
        NewsCard card;
        if (FilmCard.isNewsAFilm(cur,i)) {
          card=new FilmCard(context);
        }
 else {
          card=new NewsCard(context);
        }
        card.setNews(cur,i);
        card.apply();
        i++;
      }
 while (cur.moveToNext());
    }
 else {
      cur.close();
    }
  }
}","/** 
 * Adds the newest news card
 * @param context Context
 */
@Override public void onRequestCard(Context context){
  StringBuilder and=new StringBuilder();
  Cursor c=getNewsSources();
  if (c.moveToFirst()) {
    do {
      int id=c.getInt(0);
      boolean show=Utils.getSettingBool(context,""String_Node_Str"" + id,true);
      if (!show) {
        continue;
      }
      if (!and.toString().isEmpty()) {
        and.append(""String_Node_Str"");
      }
      and.append(""String_Node_Str"").append(id).append('\""');
    }
 while (c.moveToNext());
  }
  c.close();
  if (!and.toString().isEmpty()) {
    StringBuilder query=new StringBuilder(""String_Node_Str"" + ""String_Node_Str"" + ""String_Node_Str"");
    if (Utils.getSettingBool(context,""String_Node_Str"",true)) {
      query.append(""String_Node_Str"" + ""String_Node_Str"" + ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str"");
    }
 else {
      query.append(""String_Node_Str"");
    }
    query.append(""String_Node_Str"").append(and).append(""String_Node_Str"").append(""String_Node_Str"");
    Cursor cur=db.rawQuery(query.toString(),null);
    int i=0;
    if (cur.moveToFirst()) {
      do {
        NewsCard card;
        if (FilmCard.isNewsAFilm(cur,i)) {
          card=new FilmCard(context);
        }
 else {
          card=new NewsCard(context);
        }
        card.setNews(cur,i);
        card.apply();
        i++;
      }
 while (cur.moveToNext());
    }
 else {
      cur.close();
    }
  }
}",0.9657511020684978
161512,"/** 
 * Get all news from the database
 * @return Database cursor (_id, src, title, description, link, image, date, created, icon, source)
 */
public Cursor getAllFromDb(Context context){
  String selectedNewspread=Utils.getSetting(mContext,""String_Node_Str"",""String_Node_Str"");
  StringBuilder and=new StringBuilder();
  Cursor c=getNewsSources();
  if (c.moveToFirst()) {
    do {
      int id=c.getInt(0);
      boolean show=Utils.getSettingBool(context,""String_Node_Str"" + id,id <= 7);
      if (show) {
        if (!and.toString().isEmpty()) {
          and.append(""String_Node_Str"");
        }
        and.append(""String_Node_Str"").append(id).append('\""');
      }
    }
 while (c.moveToNext());
  }
  c.close();
  return db.rawQuery(""String_Node_Str"" + ""String_Node_Str"" + ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str"" + (and.toString().isEmpty() ? ""String_Node_Str"" : ""String_Node_Str"" + and.toString() + ""String_Node_Str"") + ""String_Node_Str""+ ""String_Node_Str"",new String[]{selectedNewspread});
}","/** 
 * Get all news from the database
 * @return Database cursor (_id, src, title, description, link, image, date, created, icon, source)
 */
public Cursor getAllFromDb(Context context){
  String selectedNewspread=Utils.getSetting(mContext,""String_Node_Str"",""String_Node_Str"");
  StringBuilder and=new StringBuilder();
  Cursor c=getNewsSources();
  if (c.moveToFirst()) {
    do {
      int id=c.getInt(0);
      boolean show=Utils.getSettingBool(context,""String_Node_Str"" + id,id <= 7);
      if (!show) {
        continue;
      }
      if (!and.toString().isEmpty()) {
        and.append(""String_Node_Str"");
      }
      and.append(""String_Node_Str"").append(id).append('\""');
    }
 while (c.moveToNext());
  }
  c.close();
  return db.rawQuery(""String_Node_Str"" + ""String_Node_Str"" + ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str"" + (and.toString().isEmpty() ? ""String_Node_Str"" : ""String_Node_Str"" + and.toString() + ""String_Node_Str"") + ""String_Node_Str""+ ""String_Node_Str"",new String[]{selectedNewspread});
}",0.9809104258443464
161513,"/** 
 * Calculates the average grade of the given exams
 * @param filteredExamList List of exams
 * @return Average grade
 */
Double calculateAverageGrade(List<Exam> filteredExamList){
  List<Exam> removedDoubles=removeDuplicates(filteredExamList);
  double weightedGrade=0.0;
  double creditSum=0.0;
  for (  Exam item : removedDoubles) {
    creditSum+=Double.valueOf(item.getCredits());
    try {
      weightedGrade+=format.parse(item.getGrade()).doubleValue() * Double.valueOf(item.getCredits());
    }
 catch (    NumberFormatException|ParseException e) {
      Utils.log(e);
    }
  }
  return weightedGrade / creditSum;
}","/** 
 * Calculates the average grade of the given exams
 * @param filteredExamList List of exams
 * @return Average grade
 */
Double calculateAverageGrade(List<Exam> filteredExamList){
  double weightedGrade=0.0;
  double creditSum=0.0;
  for (  Exam item : filteredExamList) {
    creditSum+=Double.valueOf(item.getCredits());
    try {
      weightedGrade+=format.parse(item.getGrade()).doubleValue() * Double.valueOf(item.getCredits());
    }
 catch (    NumberFormatException|ParseException e) {
      Utils.log(e);
    }
  }
  return weightedGrade / creditSum;
}",0.9214046822742477
161514,"@Override public void onCreate(Bundle savedInstanceState){
  super.onCreate(savedInstanceState);
  overridePendingTransition(R.anim.fadein,R.anim.fadeout);
  preferences=PreferenceManager.getDefaultSharedPreferences(getApplicationContext());
  Intent i=getIntent();
  if (i != null && i.hasExtra(Const.TOKEN_IS_SETUP)) {
    tokenSetup=i.getBooleanExtra(Const.TOKEN_IS_SETUP,false);
  }
  checkSilentMode=(CheckBox)findViewById(R.id.chk_silent_mode);
  bugReport=(CheckBox)findViewById(R.id.chk_bug_reports);
  if (new AccessTokenManager(this).hasValidAccessToken()) {
    checkSilentMode.setChecked(preferences.getBoolean(Const.SILENCE_SERVICE,true));
  }
 else {
    checkSilentMode.setChecked(false);
    checkSilentMode.setEnabled(false);
  }
  groupChatMode=(CheckBox)findViewById(R.id.chk_group_chat);
  if (new AccessTokenManager(this).hasValidAccessToken()) {
    groupChatMode.setChecked(preferences.getBoolean(Const.GROUP_CHAT_ENABLED,true));
  }
 else {
    groupChatMode.setChecked(false);
    groupChatMode.setEnabled(false);
  }
}","@Override public void onCreate(Bundle savedInstanceState){
  super.onCreate(savedInstanceState);
  overridePendingTransition(R.anim.fadein,R.anim.fadeout);
  preferences=PreferenceManager.getDefaultSharedPreferences(getApplicationContext());
  Intent i=getIntent();
  if (i != null && i.hasExtra(Const.TOKEN_IS_SETUP)) {
    tokenSetup=i.getBooleanExtra(Const.TOKEN_IS_SETUP,false);
  }
  checkSilentMode=(CheckBox)findViewById(R.id.chk_silent_mode);
  bugReport=(CheckBox)findViewById(R.id.chk_bug_reports);
  bugReport.setChecked(preferences.getBoolean(Const.BUG_REPORTS,true));
  if (new AccessTokenManager(this).hasValidAccessToken()) {
    checkSilentMode.setChecked(preferences.getBoolean(Const.SILENCE_SERVICE,true));
  }
 else {
    checkSilentMode.setChecked(false);
    checkSilentMode.setEnabled(false);
  }
  groupChatMode=(CheckBox)findViewById(R.id.chk_group_chat);
  if (new AccessTokenManager(this).hasValidAccessToken()) {
    groupChatMode.setChecked(preferences.getBoolean(Const.GROUP_CHAT_ENABLED,true));
  }
 else {
    groupChatMode.setChecked(false);
    groupChatMode.setEnabled(false);
  }
}",0.9666666666666668
161515,"@Override protected ChatMember onLoadInBackground(Void... arg){
  if (groupChatMode.isChecked()) {
    if (!NetUtils.isConnected(this)) {
      showNoInternetLayout();
      return null;
    }
    ChatMember currentChatMember=new ChatMember(Utils.getSetting(this,Const.LRZ_ID,""String_Node_Str""));
    currentChatMember.setDisplayName(Utils.getSetting(this,Const.CHAT_ROOM_DISPLAY_NAME,""String_Node_Str""));
    ChatMember member;
    try {
      member=TUMCabeClient.getInstance(this).createMember(currentChatMember);
    }
 catch (    IOException e) {
      Utils.log(e);
      Utils.showToastOnUIThread(this,R.string.error_setup_chat_member);
      return null;
    }
    if (member == null || member.getLrzId() == null) {
      Utils.showToastOnUIThread(this,R.string.error_setup_chat_member);
      return null;
    }
    AuthenticationManager am=new AuthenticationManager(this);
    if (!am.generatePrivateKey(member)) {
      Utils.showToastOnUIThread(this,getString(R.string.failure_uploading_public_key));
      return null;
    }
    try {
      List<ChatRoom> rooms=TUMCabeClient.getInstance(this).getMemberRooms(member.getId(),new ChatVerification(this,member));
      new ChatRoomManager(this).replaceIntoRooms(rooms);
      Utils.setInternalSetting(this,Const.PRIVATE_KEY_ACTIVE,true);
      return member;
    }
 catch (    IOException e) {
      Utils.log(e);
    }
catch (    NoPrivateKey e) {
      Utils.log(e);
    }
  }
  return null;
}","@Override protected ChatMember onLoadInBackground(Void... arg){
  if (!NetUtils.isConnected(this)) {
    showNoInternetLayout();
    return null;
  }
  ChatMember currentChatMember=new ChatMember(Utils.getSetting(this,Const.LRZ_ID,""String_Node_Str""));
  currentChatMember.setDisplayName(Utils.getSetting(this,Const.CHAT_ROOM_DISPLAY_NAME,""String_Node_Str""));
  if (currentChatMember.getLrzId().equals(""String_Node_Str"")) {
    return currentChatMember;
  }
  ChatMember member;
  try {
    member=TUMCabeClient.getInstance(this).createMember(currentChatMember);
  }
 catch (  IOException e) {
    Utils.log(e);
    Utils.showToastOnUIThread(this,R.string.error_setup_chat_member);
    return null;
  }
  if (member == null || member.getLrzId() == null) {
    Utils.showToastOnUIThread(this,R.string.error_setup_chat_member);
    return null;
  }
  AuthenticationManager am=new AuthenticationManager(this);
  if (!am.generatePrivateKey(member)) {
    Utils.showToastOnUIThread(this,getString(R.string.failure_uploading_public_key));
    return null;
  }
  try {
    List<ChatRoom> rooms=TUMCabeClient.getInstance(this).getMemberRooms(member.getId(),new ChatVerification(this,member));
    new ChatRoomManager(this).replaceIntoRooms(rooms);
    Utils.setInternalSetting(this,Const.PRIVATE_KEY_ACTIVE,true);
    return member;
  }
 catch (  IOException e) {
    Utils.log(e);
  }
catch (  NoPrivateKey e) {
    Utils.log(e);
  }
  return null;
}",0.8595098377632033
161516,"@Override protected void onLoadFinished(ChatMember member){
  if (member != null) {
    Editor editor=preferences.edit();
    editor.putBoolean(Const.SILENCE_SERVICE,checkSilentMode.isChecked());
    editor.putBoolean(Const.BACKGROUND_MODE,true);
    editor.putBoolean(Const.BUG_REPORTS,bugReport.isChecked());
    editor.putBoolean(Const.HIDE_WIZARD_ON_STARTUP,true);
    Utils.setSetting(this,Const.GROUP_CHAT_ENABLED,groupChatMode.isChecked());
    Utils.setSetting(this,Const.AUTO_JOIN_NEW_ROOMS,groupChatMode.isChecked());
    Utils.setSetting(this,Const.CHAT_MEMBER,member);
    editor.apply();
    finish();
    startActivity(new Intent(this,StartupActivity.class));
  }
 else {
    showLoadingEnded();
  }
}","@Override protected void onLoadFinished(ChatMember member){
  if (member == null) {
    showLoadingEnded();
    return;
  }
  Editor editor=preferences.edit();
  editor.putBoolean(Const.SILENCE_SERVICE,checkSilentMode.isChecked());
  editor.putBoolean(Const.BACKGROUND_MODE,true);
  editor.putBoolean(Const.BUG_REPORTS,bugReport.isChecked());
  editor.putBoolean(Const.HIDE_WIZARD_ON_STARTUP,true);
  if (!member.getLrzId().equals(""String_Node_Str"")) {
    Utils.setSetting(this,Const.GROUP_CHAT_ENABLED,groupChatMode.isChecked());
    Utils.setSetting(this,Const.AUTO_JOIN_NEW_ROOMS,groupChatMode.isChecked());
    Utils.setSetting(this,Const.CHAT_MEMBER,member);
  }
  editor.apply();
  finish();
  startActivity(new Intent(this,StartupActivity.class));
}",0.8994565217391305
161517,"@Override public Response intercept(Chain chain) throws IOException {
  Request newRequest=chain.request().newBuilder().addHeader(""String_Node_Str"",AuthenticationManager.getDeviceID(c)).build();
  return chain.proceed(newRequest);
}","@Override public Response intercept(Chain chain) throws IOException {
  Utils.log(""String_Node_Str"" + chain.request().url().toString());
  Request.Builder newRequest=chain.request().newBuilder().addHeader(""String_Node_Str"",AuthenticationManager.getDeviceID(c)).addHeader(""String_Node_Str"",userAgent.toString()).addHeader(""String_Node_Str"",Build.VERSION.RELEASE);
  try {
    newRequest.addHeader(""String_Node_Str"",c.getPackageManager().getPackageInfo(c.getPackageName(),0).versionName);
  }
 catch (  PackageManager.NameNotFoundException e) {
  }
  return chain.proceed(newRequest.build());
}",0.4733009708737864
161518,"private static Interceptor getDeviceInterceptor(final Context c){
  return new Interceptor(){
    @Override public Response intercept(    Chain chain) throws IOException {
      Request newRequest=chain.request().newBuilder().addHeader(""String_Node_Str"",AuthenticationManager.getDeviceID(c)).build();
      return chain.proceed(newRequest);
    }
  }
;
}","private static Interceptor getDeviceInterceptor(final Context c){
  final StringBuilder userAgent=new StringBuilder(""String_Node_Str"");
  if (G.appVersion != null && !G.appVersion.equals(G.UNKNOWN)) {
    userAgent.append(' ').append(G.appVersion);
    if (G.appVersionCode != -1) {
      userAgent.append('/').append(G.appVersionCode);
    }
  }
  return new Interceptor(){
    @Override public Response intercept(    Chain chain) throws IOException {
      Utils.log(""String_Node_Str"" + chain.request().url().toString());
      Request.Builder newRequest=chain.request().newBuilder().addHeader(""String_Node_Str"",AuthenticationManager.getDeviceID(c)).addHeader(""String_Node_Str"",userAgent.toString()).addHeader(""String_Node_Str"",Build.VERSION.RELEASE);
      try {
        newRequest.addHeader(""String_Node_Str"",c.getPackageManager().getPackageInfo(c.getPackageName(),0).versionName);
      }
 catch (      PackageManager.NameNotFoundException e) {
      }
      return chain.proceed(newRequest.build());
    }
  }
;
}",0.4763292061179898
161519,@PUT(API_STATISTICS) Call<String> putStatistics(@Body Statistics r);,@PUT(API_STATISTICS) Call<List<String>> putStatistics(@Body Statistics r);,0.9577464788732394
161520,"@Override public void onFailure(Call<String> call,Throwable t){
  Utils.log(t);
}","@Override public void onFailure(Call<List<String>> call,Throwable t){
}",0.8552631578947368
161521,"@Override public void onResponse(Call<String> call,Response<String> response){
}","@Override public void onResponse(Call<List<String>> call,Response<List<String>> response){
}",0.9302325581395348
161522,"/** 
 * Gets private key from preferences or generates one.
 * @return true if a private key is present
 */
public boolean generatePrivateKey(ChatMember member){
  try {
    this.getPrivateKeyString();
    this.uploadKey(this.getPublicKeyString(),member);
    return true;
  }
 catch (  NoPrivateKey|NoPublicKey e) {
    Utils.log(e);
  }
  this.clearKeys();
  KeyPair keyPair=this.generateKeyPair();
  String publicKeyString=this.keyToBase64(keyPair.getPublic().getEncoded());
  String privateKeyString=this.keyToBase64(keyPair.getPrivate().getEncoded());
  this.saveKeys(privateKeyString,publicKeyString);
  this.uploadKey(publicKeyString,member);
  return true;
}","/** 
 * Gets private key from preferences or generates one.
 * @return true if a private key is present
 */
public boolean generatePrivateKey(ChatMember member){
  try {
    this.getPrivateKeyString();
    this.uploadKey(this.getPublicKeyString(),member);
    return true;
  }
 catch (  NoPrivateKey|NoPublicKey e) {
  }
  this.clearKeys();
  KeyPair keyPair=this.generateKeyPair();
  String publicKeyString=this.keyToBase64(keyPair.getPublic().getEncoded());
  String privateKeyString=this.keyToBase64(keyPair.getPrivate().getEncoded());
  this.saveKeys(privateKeyString,publicKeyString);
  this.uploadKey(publicKeyString,member);
  return true;
}",0.9863013698630136
161523,"public void setUpSpinner(){
  new AsyncTask<Void,Void,String[]>(){
    @Override protected String[] doInBackground(    Void... voids){
      ArrayList<String> fetchedFaculties=new ArrayList<>();
      SurveyManager sm=new SurveyManager(getApplicationContext());
      sm.downloadFacultiesFromExternal();
      Cursor cursor=sm.getAllFaculties();
      if (cursor.moveToFirst()) {
        do {
          fetchedFaculties.add(cursor.getString(cursor.getColumnIndex(""String_Node_Str"")));
        }
 while (cursor.moveToNext());
      }
      fetchedFaculties.add(0,getResources().getString(R.string.choose_own_faculty));
      return fetchedFaculties.toArray(new String[fetchedFaculties.size()]);
    }
    @Override protected void onPostExecute(    String[] majors){
      ArrayAdapter<String> adapter=new ArrayAdapter<>(getBaseContext(),android.R.layout.simple_list_item_1,majors);
      adapter.setDropDownViewResource(android.R.layout.simple_spinner_dropdown_item);
      userMajorSpinner.setAdapter(adapter);
      Utils.setInternalSetting(getApplicationContext(),""String_Node_Str"",""String_Node_Str"");
      userMajorSpinner.setSelection(Integer.parseInt(Utils.getInternalSettingString(getApplicationContext(),""String_Node_Str"",""String_Node_Str"")));
      userMajorSpinner.setOnTouchListener((view,motionEvent) -> {
        if (!NetUtils.isConnected(getApplicationContext())) {
          Toast.makeText(getApplicationContext(),getString(R.string.please_connect_to_internet),Toast.LENGTH_LONG).show();
        }
        return view.performClick();
      }
);
      userMajorSpinner.setOnItemSelectedListener(new AdapterView.OnItemSelectedListener(){
        @Override public void onItemSelected(        AdapterView<?> adapterView,        View view,        int i,        long l){
          SurveyManager sm=new SurveyManager(getApplicationContext());
          Cursor c=sm.getFacultyID((String)adapterView.getItemAtPosition(i));
          if (c.moveToFirst()) {
            Utils.setInternalSetting(getApplicationContext(),""String_Node_Str"",c.getString(c.getColumnIndex(""String_Node_Str"")));
            Utils.setInternalSetting(getApplicationContext(),""String_Node_Str"",userMajorSpinner.getSelectedItemPosition() + ""String_Node_Str"");
          }
          TextView selectedItem=(TextView)adapterView.getChildAt(0);
          if (selectedItem != null) {
            selectedItem.setTextColor(ContextCompat.getColor(getApplicationContext(),R.color.color_primary));
          }
        }
        @Override public void onNothingSelected(        AdapterView<?> adapterView){
        }
      }
);
    }
  }
.execute();
}","public void setUpSpinner(){
  new AsyncTask<Void,Void,String[]>(){
    @Override protected String[] doInBackground(    Void... voids){
      ArrayList<String> fetchedFaculties=new ArrayList<>();
      SurveyManager sm=new SurveyManager(getApplicationContext());
      sm.downloadFacultiesFromExternal();
      Cursor cursor=sm.getAllFaculties();
      if (cursor.moveToFirst()) {
        do {
          fetchedFaculties.add(cursor.getString(cursor.getColumnIndex(""String_Node_Str"")));
        }
 while (cursor.moveToNext());
      }
      fetchedFaculties.add(0,getResources().getString(R.string.choose_own_faculty));
      return fetchedFaculties.toArray(new String[fetchedFaculties.size()]);
    }
    @SuppressLint(""String_Node_Str"") @Override protected void onPostExecute(    String[] majors){
      ArrayAdapter<String> adapter=new ArrayAdapter<>(getBaseContext(),android.R.layout.simple_list_item_1,majors);
      adapter.setDropDownViewResource(android.R.layout.simple_spinner_dropdown_item);
      userMajorSpinner.setAdapter(adapter);
      Utils.setInternalSetting(getApplicationContext(),""String_Node_Str"",""String_Node_Str"");
      userMajorSpinner.setSelection(Integer.parseInt(Utils.getInternalSettingString(getApplicationContext(),""String_Node_Str"",""String_Node_Str"")));
      userMajorSpinner.setOnTouchListener((view,motionEvent) -> {
        if (!NetUtils.isConnected(getApplicationContext())) {
          Toast.makeText(getApplicationContext(),getString(R.string.please_connect_to_internet),Toast.LENGTH_LONG).show();
        }
        return view.performClick();
      }
);
      userMajorSpinner.setOnItemSelectedListener(new AdapterView.OnItemSelectedListener(){
        @Override public void onItemSelected(        AdapterView<?> adapterView,        View view,        int i,        long l){
          SurveyManager sm=new SurveyManager(getApplicationContext());
          Cursor c=sm.getFacultyID((String)adapterView.getItemAtPosition(i));
          if (c.moveToFirst()) {
            Utils.setInternalSetting(getApplicationContext(),""String_Node_Str"",c.getString(c.getColumnIndex(""String_Node_Str"")));
            Utils.setInternalSetting(getApplicationContext(),""String_Node_Str"",userMajorSpinner.getSelectedItemPosition() + ""String_Node_Str"");
          }
          TextView selectedItem=(TextView)adapterView.getChildAt(0);
          if (selectedItem != null) {
            selectedItem.setTextColor(ContextCompat.getColor(getApplicationContext(),R.color.color_primary));
          }
        }
        @Override public void onNothingSelected(        AdapterView<?> adapterView){
        }
      }
);
    }
  }
.execute();
}",0.9937321937321936
161524,"@Override protected void onPostExecute(String[] majors){
  ArrayAdapter<String> adapter=new ArrayAdapter<>(getBaseContext(),android.R.layout.simple_list_item_1,majors);
  adapter.setDropDownViewResource(android.R.layout.simple_spinner_dropdown_item);
  userMajorSpinner.setAdapter(adapter);
  Utils.setInternalSetting(getApplicationContext(),""String_Node_Str"",""String_Node_Str"");
  userMajorSpinner.setSelection(Integer.parseInt(Utils.getInternalSettingString(getApplicationContext(),""String_Node_Str"",""String_Node_Str"")));
  userMajorSpinner.setOnTouchListener((view,motionEvent) -> {
    if (!NetUtils.isConnected(getApplicationContext())) {
      Toast.makeText(getApplicationContext(),getString(R.string.please_connect_to_internet),Toast.LENGTH_LONG).show();
    }
    return view.performClick();
  }
);
  userMajorSpinner.setOnItemSelectedListener(new AdapterView.OnItemSelectedListener(){
    @Override public void onItemSelected(    AdapterView<?> adapterView,    View view,    int i,    long l){
      SurveyManager sm=new SurveyManager(getApplicationContext());
      Cursor c=sm.getFacultyID((String)adapterView.getItemAtPosition(i));
      if (c.moveToFirst()) {
        Utils.setInternalSetting(getApplicationContext(),""String_Node_Str"",c.getString(c.getColumnIndex(""String_Node_Str"")));
        Utils.setInternalSetting(getApplicationContext(),""String_Node_Str"",userMajorSpinner.getSelectedItemPosition() + ""String_Node_Str"");
      }
      TextView selectedItem=(TextView)adapterView.getChildAt(0);
      if (selectedItem != null) {
        selectedItem.setTextColor(ContextCompat.getColor(getApplicationContext(),R.color.color_primary));
      }
    }
    @Override public void onNothingSelected(    AdapterView<?> adapterView){
    }
  }
);
}","@SuppressLint(""String_Node_Str"") @Override protected void onPostExecute(String[] majors){
  ArrayAdapter<String> adapter=new ArrayAdapter<>(getBaseContext(),android.R.layout.simple_list_item_1,majors);
  adapter.setDropDownViewResource(android.R.layout.simple_spinner_dropdown_item);
  userMajorSpinner.setAdapter(adapter);
  Utils.setInternalSetting(getApplicationContext(),""String_Node_Str"",""String_Node_Str"");
  userMajorSpinner.setSelection(Integer.parseInt(Utils.getInternalSettingString(getApplicationContext(),""String_Node_Str"",""String_Node_Str"")));
  userMajorSpinner.setOnTouchListener((view,motionEvent) -> {
    if (!NetUtils.isConnected(getApplicationContext())) {
      Toast.makeText(getApplicationContext(),getString(R.string.please_connect_to_internet),Toast.LENGTH_LONG).show();
    }
    return view.performClick();
  }
);
  userMajorSpinner.setOnItemSelectedListener(new AdapterView.OnItemSelectedListener(){
    @Override public void onItemSelected(    AdapterView<?> adapterView,    View view,    int i,    long l){
      SurveyManager sm=new SurveyManager(getApplicationContext());
      Cursor c=sm.getFacultyID((String)adapterView.getItemAtPosition(i));
      if (c.moveToFirst()) {
        Utils.setInternalSetting(getApplicationContext(),""String_Node_Str"",c.getString(c.getColumnIndex(""String_Node_Str"")));
        Utils.setInternalSetting(getApplicationContext(),""String_Node_Str"",userMajorSpinner.getSelectedItemPosition() + ""String_Node_Str"");
      }
      TextView selectedItem=(TextView)adapterView.getChildAt(0);
      if (selectedItem != null) {
        selectedItem.setTextColor(ContextCompat.getColor(getApplicationContext(),R.color.color_primary));
      }
    }
    @Override public void onNothingSelected(    AdapterView<?> adapterView){
    }
  }
);
}",0.9907016060862216
161525,"/** 
 * Inflates the cafeteria menu layout. This is put into an extra static method to be able to reuse it in   {@link de.tum.in.tumcampusapp.cards.CafeteriaMenuCard}
 * @param rootView    Parent layout
 * @param cafeteriaId Cafeteria id
 * @param dateStr     Date in yyyy-mm-dd format
 * @param big         True to show big lines
 */
public static List<View> showMenu(LinearLayout rootView,int cafeteriaId,String dateStr,boolean big){
  final Context context=rootView.getContext();
  final Map<String,String> rolePrices=CafeteriaPrices.getRolePrices(context);
  final int padding=(int)context.getResources().getDimension(R.dimen.card_text_padding);
  List<View> addedViews=new ArrayList<>();
  LayoutInflater inflater=(LayoutInflater)context.getSystemService(Context.LAYOUT_INFLATER_SERVICE);
  Cursor cursorCafeteriaMenu=new CafeteriaMenuManager(context).getTypeNameFromDbCard(cafeteriaId,dateStr);
  TextView textview;
  if (!big) {
    OpenHoursManager lm=new OpenHoursManager(context);
    textview=new TextView(context);
    textview.setText(lm.getHoursByIdAsString(context,cafeteriaId,Utils.getDate(dateStr)));
    textview.setTextColor(ContextCompat.getColor(context,R.color.sections_green));
    rootView.addView(textview);
    addedViews.add(textview);
  }
  String curShort=""String_Node_Str"";
  if (cursorCafeteriaMenu.moveToFirst()) {
    do {
      String typeShort=cursorCafeteriaMenu.getString(3);
      String typeLong=cursorCafeteriaMenu.getString(0);
      String menu=cursorCafeteriaMenu.getString(1);
      boolean shouldShow=Utils.getSettingBool(context,""String_Node_Str"" + typeShort,typeShort.equals(""String_Node_Str"") || typeShort.equals(""String_Node_Str""));
      if (!big && !shouldShow) {
        continue;
      }
      if (!typeShort.equals(curShort)) {
        curShort=typeShort;
        View view=inflater.inflate(big ? R.layout.list_header_big : R.layout.card_list_header,rootView,false);
        textview=(TextView)view.findViewById(R.id.list_header);
        textview.setText(typeLong.replaceAll(""String_Node_Str"",""String_Node_Str"").trim());
        rootView.addView(view);
        addedViews.add(view);
      }
      SpannableString text=menuToSpan(context,big ? menu : prepare(menu));
      int dishId=cursorCafeteriaMenu.getInt(2);
      if (rolePrices.containsKey(typeLong)) {
        View view=inflater.inflate(big ? R.layout.price_line_big : R.layout.card_price_line,rootView,false);
        textview=(TextView)view.findViewById(R.id.line_name);
        TextView priceView=(TextView)view.findViewById(R.id.line_price);
        final ToggleButton favDish=(ToggleButton)view.findViewById(R.id.favortieDish);
        favDish.setOnClickListener(v -> {
          if (favDish.isChecked()) {
            Intent myIntent=new Intent(context,FavoriteDishReceiver.class);
            PendingIntent pendingIntent=PendingIntent.getBroadcast(context,0,myIntent,0);
            AlarmManager alarmManager=(AlarmManager)context.getSystemService(Context.ALARM_SERVICE);
            alarmManager.set(AlarmManager.RTC,System.currentTimeMillis() + 5000,pendingIntent);
            Toast.makeText(context,favDish.getTag().toString(),Toast.LENGTH_SHORT).show();
          }
 else {
          }
        }
);
        favDish.setTag(dishId + ""String_Node_Str"");
        textview.setText(text);
        priceView.setText(String.format(""String_Node_Str"",rolePrices.get(typeLong)));
        rootView.addView(view);
        addedViews.add(view);
      }
 else {
        textview=new TextView(context);
        textview.setText(text);
        textview.setPadding(padding,padding,padding,padding);
        rootView.addView(textview);
        addedViews.add(textview);
      }
    }
 while (cursorCafeteriaMenu.moveToNext());
  }
  cursorCafeteriaMenu.close();
  return addedViews;
}","/** 
 * Inflates the cafeteria menu layout. This is put into an extra static method to be able to reuse it in   {@link de.tum.in.tumcampusapp.cards.CafeteriaMenuCard}
 * @param rootView    Parent layout
 * @param cafeteriaId Cafeteria id
 * @param dateStr     Date in yyyy-mm-dd format
 * @param big         True to show big lines
 */
@SuppressLint(""String_Node_Str"") public static List<View> showMenu(LinearLayout rootView,int cafeteriaId,String dateStr,boolean big){
  final Context context=rootView.getContext();
  final Map<String,String> rolePrices=CafeteriaPrices.getRolePrices(context);
  final int padding=(int)context.getResources().getDimension(R.dimen.card_text_padding);
  List<View> addedViews=new ArrayList<>();
  LayoutInflater inflater=(LayoutInflater)context.getSystemService(Context.LAYOUT_INFLATER_SERVICE);
  Cursor cursorCafeteriaMenu=new CafeteriaMenuManager(context).getTypeNameFromDbCard(cafeteriaId,dateStr);
  TextView textview;
  if (!big) {
    OpenHoursManager lm=new OpenHoursManager(context);
    textview=new TextView(context);
    textview.setText(lm.getHoursByIdAsString(context,cafeteriaId,Utils.getDate(dateStr)));
    textview.setTextColor(ContextCompat.getColor(context,R.color.sections_green));
    rootView.addView(textview);
    addedViews.add(textview);
  }
  String curShort=""String_Node_Str"";
  if (cursorCafeteriaMenu.moveToFirst()) {
    do {
      String typeShort=cursorCafeteriaMenu.getString(3);
      String typeLong=cursorCafeteriaMenu.getString(0);
      String menu=cursorCafeteriaMenu.getString(1);
      boolean shouldShow=Utils.getSettingBool(context,""String_Node_Str"" + typeShort,typeShort.equals(""String_Node_Str"") || typeShort.equals(""String_Node_Str""));
      if (!big && !shouldShow) {
        continue;
      }
      if (!typeShort.equals(curShort)) {
        curShort=typeShort;
        View view=inflater.inflate(big ? R.layout.list_header_big : R.layout.card_list_header,rootView,false);
        textview=(TextView)view.findViewById(R.id.list_header);
        textview.setText(typeLong.replaceAll(""String_Node_Str"",""String_Node_Str"").trim());
        rootView.addView(view);
        addedViews.add(view);
      }
      SpannableString text=menuToSpan(context,big ? menu : prepare(menu));
      int dishId=cursorCafeteriaMenu.getInt(2);
      if (rolePrices.containsKey(typeLong)) {
        View view=inflater.inflate(big ? R.layout.price_line_big : R.layout.card_price_line,rootView,false);
        textview=(TextView)view.findViewById(R.id.line_name);
        TextView priceView=(TextView)view.findViewById(R.id.line_price);
        final ToggleButton favDish=(ToggleButton)view.findViewById(R.id.favortieDish);
        favDish.setOnClickListener(v -> {
          if (favDish.isChecked()) {
            Intent myIntent=new Intent(context,FavoriteDishReceiver.class);
            PendingIntent pendingIntent=PendingIntent.getBroadcast(context,0,myIntent,0);
            AlarmManager alarmManager=(AlarmManager)context.getSystemService(Context.ALARM_SERVICE);
            alarmManager.set(AlarmManager.RTC,System.currentTimeMillis() + 5000,pendingIntent);
            Toast.makeText(context,favDish.getTag().toString(),Toast.LENGTH_SHORT).show();
          }
 else {
          }
        }
);
        favDish.setTag(dishId + ""String_Node_Str"");
        textview.setText(text);
        priceView.setText(String.format(""String_Node_Str"",rolePrices.get(typeLong)));
        rootView.addView(view);
        addedViews.add(view);
      }
 else {
        textview=new TextView(context);
        textview.setText(text);
        textview.setPadding(padding,padding,padding,padding);
        rootView.addView(textview);
        addedViews.add(textview);
      }
    }
 while (cursorCafeteriaMenu.moveToNext());
  }
  cursorCafeteriaMenu.close();
  return addedViews;
}",0.995665309339288
161526,"/** 
 * Download cafeteria menus from external interface (JSON)
 * @param force True to force download over normal sync period, else false
 * @throws Exception
 */
public void downloadFromExternal(Context context,boolean force) throws Exception {
  if (!force && !SyncManager.needSync(db,this,TIME_TO_SYNC)) {
    return;
  }
  String url=""String_Node_Str"";
  JSONObject json=NetUtils.downloadJson(context,url);
  db.beginTransaction();
  removeCache();
  try {
    JSONArray menu=json.getJSONArray(""String_Node_Str"");
    for (int j=0; j < menu.length(); j++) {
      replaceIntoDb(getFromJson(menu.getJSONObject(j)));
    }
    JSONArray beilagen=json.getJSONArray(""String_Node_Str"");
    for (int j=0; j < beilagen.length(); j++) {
      replaceIntoDb(getFromJsonAddendum(beilagen.getJSONObject(j)));
    }
    db.setTransactionSuccessful();
  }
  finally {
    db.endTransaction();
  }
  SyncManager.replaceIntoDb(db,this);
}","/** 
 * Download cafeteria menus from external interface (JSON)
 * @param force True to force download over normal sync period, else false
 * @throws Exception
 */
public void downloadFromExternal(Context context,boolean force) throws JSONException {
  if (!force && !SyncManager.needSync(db,this,TIME_TO_SYNC)) {
    return;
  }
  String url=""String_Node_Str"";
  Optional<JSONObject> json=NetUtils.downloadJson(context,url);
  if (!json.isPresent()) {
    return;
  }
  JSONObject obj=json.get();
  db.beginTransaction();
  removeCache();
  try {
    JSONArray menu=obj.getJSONArray(""String_Node_Str"");
    for (int j=0; j < menu.length(); j++) {
      replaceIntoDb(getFromJson(menu.getJSONObject(j)));
    }
    JSONArray beilagen=obj.getJSONArray(""String_Node_Str"");
    for (int j=0; j < beilagen.length(); j++) {
      replaceIntoDb(getFromJsonAddendum(beilagen.getJSONObject(j)));
    }
    db.setTransactionSuccessful();
  }
 catch (  Exception e) {
  }
 finally {
    db.endTransaction();
  }
  SyncManager.replaceIntoDb(db,this);
}",0.9248730964467003
161527,"/** 
 * Load departure times
 * @param arg Station name
 * @return List of departures
 */
@Override protected List<TransportManager.Departure> onLoadInBackground(String... arg){
  final String location=arg[0];
  recentsManager.replaceIntoDb(location);
  if (!NetUtils.isConnected(this)) {
    showNoInternetLayout();
    return null;
  }
  final String locationID=arg[1];
  List<TransportManager.Departure> departureCursor=TransportManager.getDeparturesFromExternal(this,locationID);
  if (departureCursor == null) {
    showError(R.string.no_departures_found);
  }
  return departureCursor;
}","/** 
 * Load departure times
 * @param arg Station name
 * @return List of departures
 */
@Override protected List<TransportManager.Departure> onLoadInBackground(String... arg){
  final String location=arg[0];
  recentsManager.replaceIntoDb(location);
  if (!NetUtils.isConnected(this)) {
    showNoInternetLayout();
    return null;
  }
  final String locationID=arg[1];
  List<TransportManager.Departure> departureCursor=TransportManager.getDeparturesFromExternal(this,locationID);
  if (departureCursor.isEmpty()) {
    showError(R.string.no_departures_found);
  }
  return departureCursor;
}",0.9848484848484848
161528,"/** 
 * Download a JSON stream from a URL
 * @param url Valid URL
 * @return JSONObject
 * @throws IOException , JSONException
 */
public Optional<JSONObject> downloadJson(String url) throws IOException, JSONException {
  Optional<String> data=downloadStringHttp(url);
  if (data.isPresent()) {
    Utils.logv(""String_Node_Str"" + data);
    return Optional.of(new JSONObject(data.get()));
  }
  return Optional.absent();
}","/** 
 * Download a JSON stream from a URL
 * @param url Valid URL
 * @return JSONObject
 */
public Optional<JSONObject> downloadJson(String url){
  try {
    Optional<String> data=downloadStringHttp(url);
    if (data.isPresent()) {
      Utils.logv(""String_Node_Str"" + data);
      return Optional.of(new JSONObject(data.get()));
    }
  }
 catch (  IOException|JSONException e) {
    Utils.log(e);
  }
  return Optional.absent();
}",0.2830409356725146
161529,"/** 
 * Download cafeteria menus from external interface (JSON)
 * @param force True to force download over normal sync period, else false
 */
public void downloadFromExternal(Context context,boolean force) throws JSONException, IOException {
  if (!force && !SyncManager.needSync(db,this,TIME_TO_SYNC)) {
    return;
  }
  String url=""String_Node_Str"";
  Optional<JSONObject> json=NetUtils.downloadJson(context,url);
  if (!json.isPresent()) {
    return;
  }
  JSONObject obj=json.get();
  db.beginTransaction();
  removeCache();
  try {
    JSONArray menu=obj.getJSONArray(""String_Node_Str"");
    for (int j=0; j < menu.length(); j++) {
      replaceIntoDb(getFromJson(menu.getJSONObject(j)));
    }
    JSONArray beilagen=obj.getJSONArray(""String_Node_Str"");
    for (int j=0; j < beilagen.length(); j++) {
      replaceIntoDb(getFromJsonAddendum(beilagen.getJSONObject(j)));
    }
    db.setTransactionSuccessful();
  }
  finally {
    db.endTransaction();
  }
  SyncManager.replaceIntoDb(db,this);
}","/** 
 * Download cafeteria menus from external interface (JSON)
 * @param force True to force download over normal sync period, else false
 */
public void downloadFromExternal(Context context,boolean force) throws JSONException {
  if (!force && !SyncManager.needSync(db,this,TIME_TO_SYNC)) {
    return;
  }
  String url=""String_Node_Str"";
  Optional<JSONObject> json=NetUtils.downloadJson(context,url);
  if (!json.isPresent()) {
    return;
  }
  JSONObject obj=json.get();
  db.beginTransaction();
  removeCache();
  try {
    JSONArray menu=obj.getJSONArray(""String_Node_Str"");
    for (int j=0; j < menu.length(); j++) {
      replaceIntoDb(getFromJson(menu.getJSONObject(j)));
    }
    JSONArray beilagen=obj.getJSONArray(""String_Node_Str"");
    for (int j=0; j < beilagen.length(); j++) {
      replaceIntoDb(getFromJsonAddendum(beilagen.getJSONObject(j)));
    }
    db.setTransactionSuccessful();
  }
  finally {
    db.endTransaction();
  }
  SyncManager.replaceIntoDb(db,this);
}",0.9934902353530296
161530,"/** 
 * Get all departures for a station. Cursor includes target station name, departure in remaining minutes.
 * @param stationID Station ID, station name might or might not work
 * @return List of departures
 */
public static List<Departure> getDeparturesFromExternal(Context context,String stationID){
  try {
    String language=LANGUAGE + Locale.getDefault().getLanguage();
    String departureQuery=DEPARTURE_QUERY_STATION + URLEncoder.encode(stationID,""String_Node_Str"");
    String query=DEPARTURE_QUERY_CONST + language + '&'+ departureQuery;
    Utils.logv(query);
    NetUtils net=new NetUtils(context);
    List<Departure> result=new ArrayList<>();
    Optional<JSONArray> departures=net.downloadJsonArray(query,CacheManager.VALIDITY_DO_NOT_CACHE,true);
    if (!departures.isPresent()) {
      return result;
    }
    JSONArray arr=departures.get();
    for (int i=0; i < arr.length(); i++) {
      JSONObject departure=arr.getJSONObject(i);
      JSONObject servingLine=departure.getJSONObject(""String_Node_Str"");
      result.add(new Departure(servingLine.getString(""String_Node_Str""),servingLine.getString(""String_Node_Str""),String.format(""String_Node_Str"",servingLine.getString(""String_Node_Str"")).trim(),departure.getInt(""String_Node_Str"")));
    }
    Collections.sort(result,new Comparator<Departure>(){
      @Override public int compare(      Departure lhs,      Departure rhs){
        return lhs.countDown - rhs.countDown;
      }
    }
);
    return result;
  }
 catch (  UnsupportedEncodingException e) {
    throw new Error(e);
  }
catch (  JSONException e) {
    Utils.log(e,ERROR_INVALID_JSON + DEPARTURE_QUERY);
    return null;
  }
}","/** 
 * Get all departures for a station. Cursor includes target station name, departure in remaining minutes.
 * @param stationID Station ID, station name might or might not work
 * @return List of departures
 */
public static List<Departure> getDeparturesFromExternal(Context context,String stationID){
  List<Departure> result=new ArrayList<>();
  try {
    String language=LANGUAGE + Locale.getDefault().getLanguage();
    String departureQuery=DEPARTURE_QUERY_STATION + URLEncoder.encode(stationID,""String_Node_Str"");
    String query=DEPARTURE_QUERY_CONST + language + '&'+ departureQuery;
    Utils.logv(query);
    NetUtils net=new NetUtils(context);
    Optional<JSONObject> departures=net.downloadJson(query);
    if (!departures.isPresent()) {
      return result;
    }
    JSONArray arr=departures.get().getJSONArray(""String_Node_Str"");
    for (int i=0; i < arr.length(); i++) {
      JSONObject departure=arr.getJSONObject(i);
      JSONObject servingLine=departure.getJSONObject(""String_Node_Str"");
      result.add(new Departure(servingLine.getString(""String_Node_Str""),servingLine.getString(""String_Node_Str""),String.format(""String_Node_Str"",servingLine.getString(""String_Node_Str"")).trim(),departure.getInt(""String_Node_Str"")));
    }
    Collections.sort(result,new Comparator<Departure>(){
      @Override public int compare(      Departure lhs,      Departure rhs){
        return lhs.countDown - rhs.countDown;
      }
    }
);
  }
 catch (  UnsupportedEncodingException e) {
    throw new Error(e);
  }
catch (  JSONException e) {
    Utils.log(e,ERROR_INVALID_JSON + DEPARTURE_QUERY);
  }
  return result;
}",0.8571428571428571
161531,"private boolean downloadNews(boolean force){
  try {
    NewsManager nm=new NewsManager(this);
    nm.downloadFromExternal(force);
    return true;
  }
 catch (  Exception e) {
    Utils.log(e);
    return false;
  }
}","private boolean downloadNews(boolean force){
  try {
    NewsManager nm=new NewsManager(this);
    nm.downloadFromExternal(force);
    return true;
  }
 catch (  JSONException e) {
    Utils.log(e);
    return false;
  }
}",0.990909090909091
161532,"private boolean downloadStudyRooms(){
  try {
    StudyRoomGroupManager sm=new StudyRoomGroupManager(this);
    sm.downloadFromExternal();
    return true;
  }
 catch (  Exception e) {
    Utils.log(e);
    return false;
  }
}","private boolean downloadStudyRooms(){
  try {
    StudyRoomGroupManager sm=new StudyRoomGroupManager(this);
    sm.downloadFromExternal();
    return true;
  }
 catch (  JSONException e) {
    Utils.log(e);
    return false;
  }
}",0.9912280701754386
161533,"private boolean downloadCafeterias(boolean force){
  try {
    CafeteriaManager cm=new CafeteriaManager(this);
    CafeteriaMenuManager cmm=new CafeteriaMenuManager(this);
    cm.downloadFromExternal(force);
    cmm.downloadFromExternal(this,force);
    return true;
  }
 catch (  Exception e) {
    Utils.log(e);
    return false;
  }
}","private boolean downloadCafeterias(boolean force){
  try {
    CafeteriaManager cm=new CafeteriaManager(this);
    CafeteriaMenuManager cmm=new CafeteriaMenuManager(this);
    cm.downloadFromExternal(force);
    cmm.downloadFromExternal(this,force);
    return true;
  }
 catch (  JSONException e) {
    Utils.log(e);
    return false;
  }
}",0.9941002949852508
161534,"private boolean downLoadKino(boolean force){
  try {
    KinoManager km=new KinoManager(this);
    km.downloadFromExternal(force);
    return true;
  }
 catch (  Exception e) {
    Utils.log(e);
    return false;
  }
}","private boolean downLoadKino(boolean force){
  try {
    KinoManager km=new KinoManager(this);
    km.downloadFromExternal(force);
    return true;
  }
 catch (  JSONException e) {
    Utils.log(e);
    return false;
  }
}",0.990909090909091
161535,"/** 
 * fetches the room coordinates
 * @param archId architecture id
 * @return coordinates of the room
 */
public Optional<Geo> fetchCoordinates(String archId){
  String url=API_URL_COORDINATES + encodeUrl(archId);
  Geo result=null;
  try {
    Optional<JSONObject> jsonObject=net.downloadJson(url);
    if (jsonObject.isPresent()) {
      double zone=jsonObject.get().getDouble(KEY_UTM_ZONE);
      double easting=jsonObject.get().getDouble(KEY_UTM_EASTING);
      double northing=jsonObject.get().getDouble(KEY_UTM_NORTHING);
      result=convertUTMtoLL(northing,easting,zone);
    }
  }
 catch (  IOException|JSONException e) {
    Utils.log(String.valueOf(e));
  }
  return Optional.fromNullable(result);
}","/** 
 * fetches the room coordinates
 * @param archId architecture id
 * @return coordinates of the room
 */
public Optional<Geo> fetchCoordinates(String archId){
  String url=API_URL_COORDINATES + encodeUrl(archId);
  Geo result=null;
  try {
    Optional<JSONObject> jsonObject=net.downloadJson(url);
    if (jsonObject.isPresent()) {
      double zone=jsonObject.get().getDouble(KEY_UTM_ZONE);
      double easting=jsonObject.get().getDouble(KEY_UTM_EASTING);
      double northing=jsonObject.get().getDouble(KEY_UTM_NORTHING);
      result=convertUTMtoLL(northing,easting,zone);
    }
  }
 catch (  JSONException e) {
    Utils.log(String.valueOf(e));
  }
  return Optional.fromNullable(result);
}",0.9915134370579916
161536,"private boolean checkSurveyData(){
  int numberOfQuestion=aSpinner1.getSelectedItemPosition() + 1;
  boolean done=true;
  for (int i=0; i < numberOfQuestion; i++) {
    EditText v=(EditText)questionsLayout.findViewWithTag(""String_Node_Str"" + (i + 1));
    if (hasQuestion(v)) {
      questions.add(v.getText().toString());
    }
 else {
      done=false;
      questions.clear();
      break;
    }
  }
  if (done) {
    newDate=getDateTime();
    chosenFaculties=getSelectedFaculties(selectedFaculties);
    return true;
  }
 else   Toast.makeText(getApplicationContext(),getResources().getString(R.string.complete_question_form),Toast.LENGTH_SHORT).show();
  return false;
}","private boolean checkSurveyData(){
  int numberOfQuestion=aSpinner1.getSelectedItemPosition() + 1;
  boolean done=true;
  for (int i=0; i < numberOfQuestion; i++) {
    EditText v=(EditText)questionsLayout.findViewWithTag(""String_Node_Str"" + (i + 1));
    if (hasQuestion(v)) {
      questions.add(v.getText().toString());
    }
 else {
      done=false;
      questions.clear();
      break;
    }
  }
  if (done) {
    newDate=getDateTime();
    chosenFaculties=getSelectedFaculties(selectedFaculties);
    return true;
  }
 else {
    Toast.makeText(getApplicationContext(),getResources().getString(R.string.complete_question_form),Toast.LENGTH_SHORT).show();
  }
  return false;
}",0.973529411764706
161537,"@Override public void onClick(View view){
  if (!checkSurveyData()) {
    return;
  }
  final ArrayList<String> selectedFacIds=new ArrayList<String>();
  if (!selectedFaculties.isEmpty()) {
    for (int j=0; j < selectedFaculties.size(); j++) {
      for (int x=0; x < fetchedFaculties.size(); x++) {
        if (selectedFaculties.get(j).equals(fetchedFaculties.get(x))) {
          Cursor cursor=surveyManager.getFacultyID(selectedFaculties.get(j));
          if (cursor.moveToFirst()) {
            selectedFacIds.add(cursor.getString(cursor.getColumnIndex(""String_Node_Str"")));
          }
        }
      }
    }
  }
 else {
    Cursor c=surveyManager.getAllFaculties();
    if (c.moveToFirst()) {
      do {
        selectedFacIds.add(c.getString(c.getColumnIndex(""String_Node_Str"")));
      }
 while (c.moveToNext());
    }
  }
  if (NetUtils.isConnected(getApplication())) {
    for (int i=0; i < aSpinner1.getSelectedItemPosition() + 1; i++) {
      Question ques=new Question(questions.get(i),selectedFacIds);
      try {
        TUMCabeClient.getInstance(getApplicationContext()).createQuestion(ques,new Callback<Question>(){
          @Override public void success(          Question question,          Response response){
            Utils.log(""String_Node_Str"" + response.getBody().toString());
            numberOfQuestion++;
            Toast.makeText(getApplicationContext(),getResources().getString(R.string.survey_submitted),Toast.LENGTH_SHORT).show();
          }
          @Override public void failure(          RetrofitError error){
            Utils.log(""String_Node_Str"" + error.toString());
          }
        }
);
      }
 catch (      Exception e) {
        Utils.log(e.toString());
      }
    }
    clearData();
    new AsyncTask<Void,Void,Void>(){
      @Override protected Void doInBackground(      Void... voids){
        surveyManager.downLoadOwnQuestions();
        return null;
      }
      @Override protected void onPostExecute(      Void v){
        restartActivity();
      }
    }
.execute();
  }
 else   restartActivity();
}","@Override public void onClick(View view){
  if (!checkSurveyData()) {
    return;
  }
  final ArrayList<String> selectedFacIds=new ArrayList<String>();
  if (!selectedFaculties.isEmpty()) {
    for (int j=0; j < selectedFaculties.size(); j++) {
      for (int x=0; x < fetchedFaculties.size(); x++) {
        if (selectedFaculties.get(j).equals(fetchedFaculties.get(x))) {
          Cursor cursor=surveyManager.getFacultyID(selectedFaculties.get(j));
          if (cursor.moveToFirst()) {
            selectedFacIds.add(cursor.getString(cursor.getColumnIndex(""String_Node_Str"")));
          }
        }
      }
    }
  }
 else {
    Cursor c=surveyManager.getAllFaculties();
    if (c.moveToFirst()) {
      do {
        selectedFacIds.add(c.getString(c.getColumnIndex(""String_Node_Str"")));
      }
 while (c.moveToNext());
    }
  }
  if (NetUtils.isConnected(getApplication())) {
    new AsyncTask<Void,Void,Void>(){
      @Override protected void onPreExecute(){
        for (int i=0; i < aSpinner1.getSelectedItemPosition() + 1; i++) {
          Question ques=new Question(questions.get(i),selectedFacIds);
          try {
            TUMCabeClient.getInstance(getApplicationContext()).createQuestion(ques,new Callback<Question>(){
              @Override public void success(              Question question,              Response response){
                Utils.log(""String_Node_Str"" + response.getBody().toString());
                numberOfQuestion++;
                Toast.makeText(getApplicationContext(),getResources().getString(R.string.survey_submitted),Toast.LENGTH_SHORT).show();
              }
              @Override public void failure(              RetrofitError error){
                Utils.log(""String_Node_Str"" + error.toString());
              }
            }
);
          }
 catch (          Exception e) {
            Utils.log(e.toString());
          }
        }
      }
      @Override protected Void doInBackground(      Void... voids){
        try {
          Thread.sleep(1000);
        }
 catch (        InterruptedException e) {
          e.printStackTrace();
        }
        surveyManager.downLoadOwnQuestions();
        return null;
      }
      @Override protected void onPostExecute(      Void v){
        finish();
        clearData();
        restartActivity();
      }
    }
.execute();
  }
 else {
    restartActivity();
  }
}",0.909009009009009
161538,"@Override public void onTabChanged(String s){
  int currentTab=tabHost.getCurrentTab();
  Utils.log(""String_Node_Str"" + currentTab);
  if (currentTab == 0) {
    mainResponseLayout.removeAllViews();
  }
 else {
    if (NetUtils.isConnected(getApplication())) {
      new AsyncTask<Void,Void,Void>(){
        @Override protected Void doInBackground(        Void... voids){
          surveyManager.downLoadOwnQuestions();
          return null;
        }
        @Override protected void onPostExecute(        Void v){
          setUpResponseTab();
        }
      }
.execute();
    }
 else {
      setUpResponseTab();
    }
  }
}","@Override public void onTabChanged(String s){
  int currentTab=tabHost.getCurrentTab();
  if (currentTab == 0) {
    mainResponseLayout.removeAllViews();
  }
 else {
    if (NetUtils.isConnected(getApplication())) {
      new AsyncTask<Void,Void,Void>(){
        @Override protected Void doInBackground(        Void... voids){
          surveyManager.downLoadOwnQuestions();
          return null;
        }
        @Override protected void onPostExecute(        Void v){
          setUpResponseTab();
        }
      }
.execute();
    }
 else {
      setUpResponseTab();
    }
  }
}",0.962840627580512
161539,"@Override public void onCreate(Bundle savedInstanceState){
  surveyManager=new SurveyManager(this);
  super.onCreate(savedInstanceState);
  lrzId=Utils.getSetting(this,Const.LRZ_ID,""String_Node_Str"");
  registerReceiver(connectivityChangeReceiver,new IntentFilter(ConnectivityManager.CONNECTIVITY_ACTION));
  if (NetUtils.isConnected(this)) {
    findViewsById();
    setUpTabHost();
    setUpSpinner();
    setUpSelectTargets();
    submitAndTabListeners();
    userAllowed();
    unregisterReceiver(connectivityChangeReceiver);
  }
 else   setContentView(R.layout.layout_no_internet);
}","@Override public void onCreate(Bundle savedInstanceState){
  surveyManager=new SurveyManager(this);
  super.onCreate(savedInstanceState);
  lrzId=Utils.getSetting(this,Const.LRZ_ID,""String_Node_Str"");
  registerReceiver(connectivityChangeReceiver,new IntentFilter(ConnectivityManager.CONNECTIVITY_ACTION));
  if (NetUtils.isConnected(this)) {
    findViewsById();
    setUpTabHost();
    setUpSpinner();
    setUpSelectTargets();
    submitAndTabListeners();
    userAllowed();
    unregisterReceiver(connectivityChangeReceiver);
  }
 else {
    setContentView(R.layout.layout_no_internet);
  }
}",0.9932432432432432
161540,"private void clearData(){
  selectedFaculties.clear();
  chosenFaculties=""String_Node_Str"";
  questions.clear();
  newDate=""String_Node_Str"";
  for (int i=0; i < checked.length; i++) {
    checked[i]=false;
  }
  aSpinner1.setSelection(0);
  questionsLayout.removeAllViews();
}","private void clearData(){
  selectedFaculties.clear();
  chosenFaculties=""String_Node_Str"";
  questions.clear();
  newDate=""String_Node_Str"";
  for (int i=0; i < checked.length; i++) {
    checked[i]=false;
  }
  aSpinner1.setSelection(0);
}",0.9305019305019304
161541,"@SuppressLint(""String_Node_Str"") private void userAllowed(){
  String weekAgo=getDateBefore1Week();
  Utils.log(""String_Node_Str"" + weekAgo);
  Cursor c=surveyManager.numberOfQuestionsFrom(weekAgo);
  if (c.getCount() > 0) {
    c.moveToFirst();
  }
  int x=c.getInt(0);
  if (x < 3) {
    numQues=new String[3 - x];
    for (int i=0; i < numQues.length; i++) {
      numQues[i]=String.valueOf(i + 1);
    }
    ArrayAdapter<String> adapter=new ArrayAdapter<String>(this,android.R.layout.simple_spinner_item,numQues);
    adapter.setDropDownViewResource(android.R.layout.simple_spinner_dropdown_item);
    aSpinner1.setAdapter(adapter);
    if (x == 2) {
      selectTv.setText(getResources().getString(R.string.one_question_left));
    }
  }
 else {
    String strDate=getNextPossibleDate();
    selectTv.setVisibility(View.VISIBLE);
    selectTv.setText(getResources().getString(R.string.next_possible_survey_date) + ""String_Node_Str"" + strDate);
    submitSurveyButton.setVisibility(View.GONE);
    questionsLayout.setVisibility(View.GONE);
    facultiesButton.setVisibility(View.GONE);
    aSpinner1.setVisibility(View.GONE);
  }
}","@SuppressLint(""String_Node_Str"") private void userAllowed(){
  String weekAgo=getDateBefore1Week();
  Utils.log(""String_Node_Str"" + weekAgo);
  Cursor c=surveyManager.numberOfQuestionsFrom(weekAgo);
  if (c.getCount() > 0) {
    c.moveToFirst();
  }
  int x=c.getInt(0);
  Utils.log(""String_Node_Str"" + x);
  if (x < 3) {
    numQues=new String[3 - x];
    for (int i=0; i < numQues.length; i++) {
      numQues[i]=String.valueOf(i + 1);
    }
    ArrayAdapter<String> adapter=new ArrayAdapter<String>(this,android.R.layout.simple_spinner_item,numQues);
    adapter.setDropDownViewResource(android.R.layout.simple_spinner_dropdown_item);
    aSpinner1.setAdapter(adapter);
    if (x == 2) {
      selectTv.setText(getResources().getString(R.string.one_question_left));
    }
  }
 else {
    String strDate=getNextPossibleDate();
    selectTv.setVisibility(View.VISIBLE);
    selectTv.setText(getResources().getString(R.string.next_possible_survey_date) + ""String_Node_Str"" + strDate);
    submitSurveyButton.setVisibility(View.GONE);
    questionsLayout.setVisibility(View.GONE);
    facultiesButton.setVisibility(View.GONE);
    aSpinner1.setVisibility(View.GONE);
  }
}",0.98438855160451
161542,"private void submitAndTabListeners(){
  submitSurveyButton.setOnClickListener(new View.OnClickListener(){
    @Override public void onClick(    View view){
      if (!checkSurveyData()) {
        return;
      }
      final ArrayList<String> selectedFacIds=new ArrayList<String>();
      if (!selectedFaculties.isEmpty()) {
        for (int j=0; j < selectedFaculties.size(); j++) {
          for (int x=0; x < fetchedFaculties.size(); x++) {
            if (selectedFaculties.get(j).equals(fetchedFaculties.get(x))) {
              Cursor cursor=surveyManager.getFacultyID(selectedFaculties.get(j));
              if (cursor.moveToFirst()) {
                selectedFacIds.add(cursor.getString(cursor.getColumnIndex(""String_Node_Str"")));
              }
            }
          }
        }
      }
 else {
        Cursor c=surveyManager.getAllFaculties();
        if (c.moveToFirst()) {
          do {
            selectedFacIds.add(c.getString(c.getColumnIndex(""String_Node_Str"")));
          }
 while (c.moveToNext());
        }
      }
      if (NetUtils.isConnected(getApplication())) {
        for (int i=0; i < aSpinner1.getSelectedItemPosition() + 1; i++) {
          Question ques=new Question(questions.get(i),selectedFacIds);
          try {
            TUMCabeClient.getInstance(getApplicationContext()).createQuestion(ques,new Callback<Question>(){
              @Override public void success(              Question question,              Response response){
                Utils.log(""String_Node_Str"" + response.getBody().toString());
                numberOfQuestion++;
                Toast.makeText(getApplicationContext(),getResources().getString(R.string.survey_submitted),Toast.LENGTH_SHORT).show();
              }
              @Override public void failure(              RetrofitError error){
                Utils.log(""String_Node_Str"" + error.toString());
              }
            }
);
          }
 catch (          Exception e) {
            Utils.log(e.toString());
          }
        }
        clearData();
        new AsyncTask<Void,Void,Void>(){
          @Override protected Void doInBackground(          Void... voids){
            surveyManager.downLoadOwnQuestions();
            return null;
          }
          @Override protected void onPostExecute(          Void v){
            restartActivity();
          }
        }
.execute();
      }
 else       restartActivity();
    }
  }
);
  tabHost.setOnTabChangedListener(new TabHost.OnTabChangeListener(){
    @Override public void onTabChanged(    String s){
      int currentTab=tabHost.getCurrentTab();
      Utils.log(""String_Node_Str"" + currentTab);
      if (currentTab == 0) {
        mainResponseLayout.removeAllViews();
      }
 else {
        if (NetUtils.isConnected(getApplication())) {
          new AsyncTask<Void,Void,Void>(){
            @Override protected Void doInBackground(            Void... voids){
              surveyManager.downLoadOwnQuestions();
              return null;
            }
            @Override protected void onPostExecute(            Void v){
              setUpResponseTab();
            }
          }
.execute();
        }
 else {
          setUpResponseTab();
        }
      }
    }
  }
);
}","private void submitAndTabListeners(){
  submitSurveyButton.setOnClickListener(new View.OnClickListener(){
    @Override public void onClick(    View view){
      if (!checkSurveyData()) {
        return;
      }
      final ArrayList<String> selectedFacIds=new ArrayList<String>();
      if (!selectedFaculties.isEmpty()) {
        for (int j=0; j < selectedFaculties.size(); j++) {
          for (int x=0; x < fetchedFaculties.size(); x++) {
            if (selectedFaculties.get(j).equals(fetchedFaculties.get(x))) {
              Cursor cursor=surveyManager.getFacultyID(selectedFaculties.get(j));
              if (cursor.moveToFirst()) {
                selectedFacIds.add(cursor.getString(cursor.getColumnIndex(""String_Node_Str"")));
              }
            }
          }
        }
      }
 else {
        Cursor c=surveyManager.getAllFaculties();
        if (c.moveToFirst()) {
          do {
            selectedFacIds.add(c.getString(c.getColumnIndex(""String_Node_Str"")));
          }
 while (c.moveToNext());
        }
      }
      if (NetUtils.isConnected(getApplication())) {
        new AsyncTask<Void,Void,Void>(){
          @Override protected void onPreExecute(){
            for (int i=0; i < aSpinner1.getSelectedItemPosition() + 1; i++) {
              Question ques=new Question(questions.get(i),selectedFacIds);
              try {
                TUMCabeClient.getInstance(getApplicationContext()).createQuestion(ques,new Callback<Question>(){
                  @Override public void success(                  Question question,                  Response response){
                    Utils.log(""String_Node_Str"" + response.getBody().toString());
                    numberOfQuestion++;
                    Toast.makeText(getApplicationContext(),getResources().getString(R.string.survey_submitted),Toast.LENGTH_SHORT).show();
                  }
                  @Override public void failure(                  RetrofitError error){
                    Utils.log(""String_Node_Str"" + error.toString());
                  }
                }
);
              }
 catch (              Exception e) {
                Utils.log(e.toString());
              }
            }
          }
          @Override protected Void doInBackground(          Void... voids){
            try {
              Thread.sleep(1000);
            }
 catch (            InterruptedException e) {
              e.printStackTrace();
            }
            surveyManager.downLoadOwnQuestions();
            return null;
          }
          @Override protected void onPostExecute(          Void v){
            finish();
            clearData();
            restartActivity();
          }
        }
.execute();
      }
 else {
        restartActivity();
      }
    }
  }
);
  tabHost.setOnTabChangedListener(new TabHost.OnTabChangeListener(){
    @Override public void onTabChanged(    String s){
      int currentTab=tabHost.getCurrentTab();
      if (currentTab == 0) {
        mainResponseLayout.removeAllViews();
      }
 else {
        if (NetUtils.isConnected(getApplication())) {
          new AsyncTask<Void,Void,Void>(){
            @Override protected Void doInBackground(            Void... voids){
              surveyManager.downLoadOwnQuestions();
              return null;
            }
            @Override protected void onPostExecute(            Void v){
              setUpResponseTab();
            }
          }
.execute();
        }
 else {
          setUpResponseTab();
        }
      }
    }
  }
);
}",0.7258470187897618
161543,"@Override public void onClick(View view){
  if (!checkSurveyData()) {
    return;
  }
  final ArrayList<String> selectedFacIds=new ArrayList<String>();
  if (!selectedFaculties.isEmpty()) {
    for (int j=0; j < selectedFaculties.size(); j++) {
      for (int x=0; x < fetchedFaculties.size(); x++) {
        if (selectedFaculties.get(j).equals(fetchedFaculties.get(x))) {
          Cursor cursor=surveyManager.getFacultyID(selectedFaculties.get(j));
          if (cursor.moveToFirst()) {
            selectedFacIds.add(cursor.getString(cursor.getColumnIndex(""String_Node_Str"")));
          }
        }
      }
    }
  }
 else {
    Cursor c=surveyManager.getAllFaculties();
    if (c.moveToFirst()) {
      do {
        selectedFacIds.add(c.getString(c.getColumnIndex(""String_Node_Str"")));
      }
 while (c.moveToNext());
    }
  }
  if (NetUtils.isConnected(getApplication())) {
    for (int i=0; i < aSpinner1.getSelectedItemPosition() + 1; i++) {
      Question ques=new Question(questions.get(i),selectedFacIds);
      try {
        TUMCabeClient.getInstance(getApplicationContext()).createQuestion(ques,new Callback<Question>(){
          @Override public void success(          Question question,          Response response){
            Utils.log(""String_Node_Str"" + response.getBody().toString());
            numberOfQuestion++;
            Toast.makeText(getApplicationContext(),getResources().getString(R.string.survey_submitted),Toast.LENGTH_SHORT).show();
          }
          @Override public void failure(          RetrofitError error){
            Utils.log(""String_Node_Str"" + error.toString());
          }
        }
);
      }
 catch (      Exception e) {
        Utils.log(e.toString());
      }
    }
    clearData();
    new AsyncTask<Void,Void,Void>(){
      @Override protected Void doInBackground(      Void... voids){
        surveyManager.downLoadOwnQuestions();
        return null;
      }
      @Override protected void onPostExecute(      Void v){
        restartActivity();
      }
    }
.execute();
  }
 else   Toast.makeText(getApplicationContext(),""String_Node_Str"",Toast.LENGTH_LONG).show();
}","@Override public void onClick(View view){
  if (!checkSurveyData()) {
    return;
  }
  final ArrayList<String> selectedFacIds=new ArrayList<String>();
  if (!selectedFaculties.isEmpty()) {
    for (int j=0; j < selectedFaculties.size(); j++) {
      for (int x=0; x < fetchedFaculties.size(); x++) {
        if (selectedFaculties.get(j).equals(fetchedFaculties.get(x))) {
          Cursor cursor=surveyManager.getFacultyID(selectedFaculties.get(j));
          if (cursor.moveToFirst()) {
            selectedFacIds.add(cursor.getString(cursor.getColumnIndex(""String_Node_Str"")));
          }
        }
      }
    }
  }
 else {
    Cursor c=surveyManager.getAllFaculties();
    if (c.moveToFirst()) {
      do {
        selectedFacIds.add(c.getString(c.getColumnIndex(""String_Node_Str"")));
      }
 while (c.moveToNext());
    }
  }
  if (NetUtils.isConnected(getApplication())) {
    for (int i=0; i < aSpinner1.getSelectedItemPosition() + 1; i++) {
      Question ques=new Question(questions.get(i),selectedFacIds);
      try {
        TUMCabeClient.getInstance(getApplicationContext()).createQuestion(ques,new Callback<Question>(){
          @Override public void success(          Question question,          Response response){
            Utils.log(""String_Node_Str"" + response.getBody().toString());
            numberOfQuestion++;
            Toast.makeText(getApplicationContext(),getResources().getString(R.string.survey_submitted),Toast.LENGTH_SHORT).show();
          }
          @Override public void failure(          RetrofitError error){
            Utils.log(""String_Node_Str"" + error.toString());
          }
        }
);
      }
 catch (      Exception e) {
        Utils.log(e.toString());
      }
    }
    clearData();
    new AsyncTask<Void,Void,Void>(){
      @Override protected Void doInBackground(      Void... voids){
        surveyManager.downLoadOwnQuestions();
        return null;
      }
      @Override protected void onPostExecute(      Void v){
        restartActivity();
      }
    }
.execute();
  }
 else   restartActivity();
}",0.978328173374613
161544,"@Override public void onReceive(Context context,Intent intent){
  if (NetUtils.isConnected(context)) {
    restartActivity();
  }
}","@Override public void onReceive(Context context,Intent intent){
  if (NetUtils.isConnected(getApplicationContext())) {
    restartActivity();
    unregisterReceiver(connectivityChangeReceiver);
  }
}",0.793939393939394
161545,"private void submitAndTabListeners(){
  submitSurveyButton.setOnClickListener(new View.OnClickListener(){
    @Override public void onClick(    View view){
      if (!checkSurveyData()) {
        return;
      }
      final ArrayList<String> selectedFacIds=new ArrayList<String>();
      if (!selectedFaculties.isEmpty()) {
        for (int j=0; j < selectedFaculties.size(); j++) {
          for (int x=0; x < fetchedFaculties.size(); x++) {
            if (selectedFaculties.get(j).equals(fetchedFaculties.get(x))) {
              Cursor cursor=surveyManager.getFacultyID(selectedFaculties.get(j));
              if (cursor.moveToFirst()) {
                selectedFacIds.add(cursor.getString(cursor.getColumnIndex(""String_Node_Str"")));
              }
            }
          }
        }
      }
 else {
        Cursor c=surveyManager.getAllFaculties();
        if (c.moveToFirst()) {
          do {
            selectedFacIds.add(c.getString(c.getColumnIndex(""String_Node_Str"")));
          }
 while (c.moveToNext());
        }
      }
      if (NetUtils.isConnected(getApplication())) {
        for (int i=0; i < aSpinner1.getSelectedItemPosition() + 1; i++) {
          Question ques=new Question(questions.get(i),selectedFacIds);
          try {
            TUMCabeClient.getInstance(getApplicationContext()).createQuestion(ques,new Callback<Question>(){
              @Override public void success(              Question question,              Response response){
                Utils.log(""String_Node_Str"" + response.getBody().toString());
                numberOfQuestion++;
                Toast.makeText(getApplicationContext(),getResources().getString(R.string.survey_submitted),Toast.LENGTH_SHORT).show();
              }
              @Override public void failure(              RetrofitError error){
                Utils.log(""String_Node_Str"" + error.toString());
              }
            }
);
          }
 catch (          Exception e) {
            Utils.log(e.toString());
          }
        }
        clearData();
        new AsyncTask<Void,Void,Void>(){
          @Override protected Void doInBackground(          Void... voids){
            surveyManager.downLoadOwnQuestions();
            return null;
          }
          @Override protected void onPostExecute(          Void v){
            restartActivity();
          }
        }
.execute();
      }
 else       Toast.makeText(getApplicationContext(),""String_Node_Str"",Toast.LENGTH_LONG).show();
    }
  }
);
  tabHost.setOnTabChangedListener(new TabHost.OnTabChangeListener(){
    @Override public void onTabChanged(    String s){
      int currentTab=tabHost.getCurrentTab();
      Utils.log(""String_Node_Str"" + currentTab);
      if (currentTab == 0) {
        mainResponseLayout.removeAllViews();
      }
 else {
        if (NetUtils.isConnected(getApplication())) {
          new AsyncTask<Void,Void,Void>(){
            @Override protected Void doInBackground(            Void... voids){
              surveyManager.downLoadOwnQuestions();
              return null;
            }
            @Override protected void onPostExecute(            Void v){
              setUpResponseTab();
            }
          }
.execute();
        }
 else {
          setUpResponseTab();
        }
      }
    }
  }
);
}","private void submitAndTabListeners(){
  submitSurveyButton.setOnClickListener(new View.OnClickListener(){
    @Override public void onClick(    View view){
      if (!checkSurveyData()) {
        return;
      }
      final ArrayList<String> selectedFacIds=new ArrayList<String>();
      if (!selectedFaculties.isEmpty()) {
        for (int j=0; j < selectedFaculties.size(); j++) {
          for (int x=0; x < fetchedFaculties.size(); x++) {
            if (selectedFaculties.get(j).equals(fetchedFaculties.get(x))) {
              Cursor cursor=surveyManager.getFacultyID(selectedFaculties.get(j));
              if (cursor.moveToFirst()) {
                selectedFacIds.add(cursor.getString(cursor.getColumnIndex(""String_Node_Str"")));
              }
            }
          }
        }
      }
 else {
        Cursor c=surveyManager.getAllFaculties();
        if (c.moveToFirst()) {
          do {
            selectedFacIds.add(c.getString(c.getColumnIndex(""String_Node_Str"")));
          }
 while (c.moveToNext());
        }
      }
      if (NetUtils.isConnected(getApplication())) {
        for (int i=0; i < aSpinner1.getSelectedItemPosition() + 1; i++) {
          Question ques=new Question(questions.get(i),selectedFacIds);
          try {
            TUMCabeClient.getInstance(getApplicationContext()).createQuestion(ques,new Callback<Question>(){
              @Override public void success(              Question question,              Response response){
                Utils.log(""String_Node_Str"" + response.getBody().toString());
                numberOfQuestion++;
                Toast.makeText(getApplicationContext(),getResources().getString(R.string.survey_submitted),Toast.LENGTH_SHORT).show();
              }
              @Override public void failure(              RetrofitError error){
                Utils.log(""String_Node_Str"" + error.toString());
              }
            }
);
          }
 catch (          Exception e) {
            Utils.log(e.toString());
          }
        }
        clearData();
        new AsyncTask<Void,Void,Void>(){
          @Override protected Void doInBackground(          Void... voids){
            surveyManager.downLoadOwnQuestions();
            return null;
          }
          @Override protected void onPostExecute(          Void v){
            restartActivity();
          }
        }
.execute();
      }
 else       restartActivity();
    }
  }
);
  tabHost.setOnTabChangedListener(new TabHost.OnTabChangeListener(){
    @Override public void onTabChanged(    String s){
      int currentTab=tabHost.getCurrentTab();
      Utils.log(""String_Node_Str"" + currentTab);
      if (currentTab == 0) {
        mainResponseLayout.removeAllViews();
      }
 else {
        if (NetUtils.isConnected(getApplication())) {
          new AsyncTask<Void,Void,Void>(){
            @Override protected Void doInBackground(            Void... voids){
              surveyManager.downLoadOwnQuestions();
              return null;
            }
            @Override protected void onPostExecute(            Void v){
              setUpResponseTab();
            }
          }
.execute();
        }
 else {
          setUpResponseTab();
        }
      }
    }
  }
);
}",0.876972575455799
161546,"@Override protected Boolean onLoadInBackground(Void... arg){
  ChatRoomManager manager=new ChatRoomManager(this);
  ChatMember member=Utils.getSetting(this,Const.CHAT_MEMBER,ChatMember.class);
  if (member == null)   return false;
  try {
    List<ChatRoom> rooms=TUMCabeClient.getInstance(this).getMemberRooms(member.getId(),new ChatVerification(this,member));
    manager.replaceIntoRooms(rooms);
    return true;
  }
 catch (  RetrofitError e) {
    Utils.log(e);
  }
catch (  NoPrivateKey e) {
    Utils.log(e);
  }
  return false;
}","@Override protected Boolean onLoadInBackground(Void... arg){
  ChatRoomManager manager=new ChatRoomManager(this);
  ChatMember member=Utils.getSetting(this,Const.CHAT_MEMBER,ChatMember.class);
  if (member == null)   return false;
  try {
    List<ChatRoom> rooms=TUMCabeClient.getInstance(this).getMemberRooms(member.getId(),new ChatVerification(this,member));
    manager.replaceIntoRooms(rooms);
    Utils.setInternalSetting(this,Const.PRIVATE_KEY_ACTIVE,true);
    return true;
  }
 catch (  RetrofitError e) {
    Utils.log(e);
  }
catch (  NoPrivateKey e) {
    Utils.log(e);
  }
  return false;
}",0.9280701754385964
161547,"/** 
 * Open next activity on skip
 * @param skip Skip button handle
 */
@SuppressWarnings(""String_Node_Str"") public void onClickSkip(View skip){
  startNextActivity();
}","/** 
 * Open next activity on skip
 * @param skip Skip button handle
 */
@SuppressWarnings(""String_Node_Str"") public void onClickSkip(View skip){
  startNextActivity(true);
}",0.9883720930232558
161548,"@Override protected void onLoadFinished(ChatMember member){
  if (member != null) {
    Utils.setSetting(this,Const.GROUP_CHAT_ENABLED,groupChatMode.isChecked());
    Utils.setSetting(this,Const.AUTO_JOIN_NEW_ROOMS,groupChatMode.isChecked() && autoJoin.isChecked());
    Utils.setSetting(this,Const.CHAT_MEMBER,member);
    Utils.log(""String_Node_Str"" + new Gson().toJson(member));
    startNextActivity();
  }
 else {
    showLoadingEnded();
  }
}","@Override protected void onLoadFinished(ChatMember member){
  if (member != null) {
    Utils.setSetting(this,Const.GROUP_CHAT_ENABLED,groupChatMode.isChecked());
    Utils.setSetting(this,Const.AUTO_JOIN_NEW_ROOMS,groupChatMode.isChecked() && autoJoin.isChecked());
    Utils.setSetting(this,Const.CHAT_MEMBER,member);
    Utils.log(""String_Node_Str"" + new Gson().toJson(member));
    startNextActivity(false);
  }
 else {
    showLoadingEnded();
  }
}",0.9944506104328524
161549,"/** 
 * Opens next wizard page
 */
private void startNextActivity(){
  finish();
  Intent intent;
  if (!Utils.getInternalSettingBool(this,Const.PRIVATE_KEY_ACTIVE,false)) {
    intent=new Intent(this,WizNavActivatePublicKeyActivity.class);
  }
 else {
    intent=new Intent(this,WizNavExtrasActivity.class);
  }
  intent.putExtra(Const.TOKEN_IS_SETUP,tokenSetup);
  startActivity(intent);
  overridePendingTransition(R.anim.fadein,R.anim.fadeout);
}","/** 
 * Opens next wizard page
 */
private void startNextActivity(boolean skip){
  finish();
  Intent intent;
  if (skip) {
    intent=new Intent(this,WizNavExtrasActivity.class);
  }
 else {
    if (!Utils.getInternalSettingBool(this,Const.PRIVATE_KEY_ACTIVE,false)) {
      intent=new Intent(this,WizNavActivatePublicKeyActivity.class);
    }
 else {
      intent=new Intent(this,WizNavExtrasActivity.class);
    }
  }
  intent.putExtra(Const.TOKEN_IS_SETUP,tokenSetup);
  startActivity(intent);
  overridePendingTransition(R.anim.fadein,R.anim.fadeout);
}",0.8928571428571429
161550,"@Override public void onItemSelected(AdapterView<?> adapterView,View view,int i,long l){
  SurveyManager sm=new SurveyManager(getApplicationContext());
  Cursor c=sm.getFacultyID((String)adapterView.getItemAtPosition(i));
  if (c.moveToFirst()) {
    Utils.setInternalSetting(getApplicationContext(),""String_Node_Str"",c.getString(c.getColumnIndex(""String_Node_Str"")));
  }
  TextView selectedItem=(TextView)adapterView.getChildAt(0);
  if (selectedItem != null) {
    selectedItem.setTextColor(ContextCompat.getColor(getApplicationContext(),R.color.color_primary));
  }
  userMajor=(String)adapterView.getItemAtPosition(i);
}","@Override public void onItemSelected(AdapterView<?> adapterView,View view,int i,long l){
  SurveyManager sm=new SurveyManager(getApplicationContext());
  Cursor c=sm.getFacultyID((String)adapterView.getItemAtPosition(i));
  if (c.moveToFirst()) {
    Utils.setInternalSetting(getApplicationContext(),""String_Node_Str"",c.getString(c.getColumnIndex(""String_Node_Str"")));
  }
  TextView selectedItem=(TextView)adapterView.getChildAt(0);
  if (selectedItem != null) {
    selectedItem.setTextColor(ContextCompat.getColor(getApplicationContext(),R.color.color_primary));
  }
}",0.9548494983277592
161551,"@Override public void onCreate(Bundle savedInstanceState){
  super.onCreate(savedInstanceState);
  disableRefresh();
  sharedPrefs=PreferenceManager.getDefaultSharedPreferences(this);
  LinearLayout layout=(LinearLayout)findViewById(R.id.wizard_start_layout);
  layout.requestFocus();
  userMajorSpinner=(Spinner)findViewById(R.id.majorSpinner);
  editText=(EditText)findViewById(R.id.lrd_id);
  setUpSpinner();
  lrzId=sharedPrefs.getString(Const.LRZ_ID,""String_Node_Str"");
  if (lrzId != null) {
    editText.setText(lrzId);
  }
}","@Override public void onCreate(Bundle savedInstanceState){
  super.onCreate(savedInstanceState);
  disableRefresh();
  sharedPrefs=PreferenceManager.getDefaultSharedPreferences(this);
  LinearLayout layout=(LinearLayout)findViewById(R.id.wizard_start_layout);
  layout.requestFocus();
  userMajorSpinner=(Spinner)findViewById(R.id.majorSpinner);
  setUpSpinner();
  editTxtLrzId=(EditText)findViewById(R.id.lrd_id);
  lrzId=sharedPrefs.getString(Const.LRZ_ID,""String_Node_Str"");
  if (lrzId != null) {
    editTxtLrzId.setText(lrzId);
  }
}",0.9552238805970148
161552,"/** 
 * Handle click in dialog buttons
 * @param dialog Dialog handle
 * @param which Button clicked
 */
@Override public void onClick(DialogInterface dialog,int which){
  if (which == DialogInterface.BUTTON_POSITIVE) {
    startLoading();
  }
 else   if (which == DialogInterface.BUTTON_NEGATIVE) {
    onLoadFinished(true);
  }
}","/** 
 * Handle click in dialog buttons
 * @param dialog Dialog handle
 * @param which  Button clicked
 */
@Override public void onClick(DialogInterface dialog,int which){
  if (which == DialogInterface.BUTTON_POSITIVE) {
    startLoading();
  }
 else   if (which == DialogInterface.BUTTON_NEGATIVE) {
    onLoadFinished(true);
  }
}",0.9984917043740572
161553,"public void setUpSpinner(){
  new AsyncTask<Void,Void,String[]>(){
    @Override protected String[] doInBackground(    Void... voids){
      ArrayList<String> fetchedFaculties=new ArrayList<>();
      SurveyManager sm=new SurveyManager(getApplicationContext());
      try {
        sm.downloadFacultiesFromExternal();
      }
 catch (      Exception e) {
        e.printStackTrace();
      }
      Cursor cursor=sm.getAllFaculties();
      if (cursor.moveToFirst()) {
        do {
          fetchedFaculties.add(cursor.getString(cursor.getColumnIndex(""String_Node_Str"")));
        }
 while (cursor.moveToNext());
      }
      fetchedFaculties.add(0,getResources().getString(R.string.choose_own_faculty));
      final String[] majors=fetchedFaculties.toArray(new String[fetchedFaculties.size()]);
      return majors;
    }
    @Override protected void onPostExecute(    String[] majors){
      ArrayAdapter<String> adapter=new ArrayAdapter<String>(getBaseContext(),android.R.layout.simple_list_item_1,majors);
      adapter.setDropDownViewResource(android.R.layout.simple_spinner_dropdown_item);
      userMajorSpinner.setAdapter(adapter);
      userMajorSpinner.setOnItemSelectedListener(new AdapterView.OnItemSelectedListener(){
        @Override public void onItemSelected(        AdapterView<?> adapterView,        View view,        int i,        long l){
          SurveyManager sm=new SurveyManager(getApplicationContext());
          Cursor c=sm.getFacultyID((String)adapterView.getItemAtPosition(i));
          if (c.moveToFirst()) {
            Utils.setInternalSetting(getApplicationContext(),""String_Node_Str"",c.getString(c.getColumnIndex(""String_Node_Str"")));
          }
          TextView selectedItem=(TextView)adapterView.getChildAt(0);
          if (selectedItem != null) {
            selectedItem.setTextColor(ContextCompat.getColor(getApplicationContext(),R.color.color_primary));
          }
          userMajor=(String)adapterView.getItemAtPosition(i);
        }
        @Override public void onNothingSelected(        AdapterView<?> adapterView){
        }
      }
);
      return;
    }
  }
.execute();
}","public void setUpSpinner(){
  new AsyncTask<Void,Void,String[]>(){
    @Override protected String[] doInBackground(    Void... voids){
      ArrayList<String> fetchedFaculties=new ArrayList<>();
      SurveyManager sm=new SurveyManager(getApplicationContext());
      try {
        sm.downloadFacultiesFromExternal();
      }
 catch (      Exception e) {
        e.printStackTrace();
      }
      Cursor cursor=sm.getAllFaculties();
      if (cursor.moveToFirst()) {
        do {
          fetchedFaculties.add(cursor.getString(cursor.getColumnIndex(""String_Node_Str"")));
        }
 while (cursor.moveToNext());
      }
      fetchedFaculties.add(0,getResources().getString(R.string.choose_own_faculty));
      final String[] majors=fetchedFaculties.toArray(new String[fetchedFaculties.size()]);
      return majors;
    }
    @Override protected void onPostExecute(    String[] majors){
      ArrayAdapter<String> adapter=new ArrayAdapter<String>(getBaseContext(),android.R.layout.simple_list_item_1,majors);
      adapter.setDropDownViewResource(android.R.layout.simple_spinner_dropdown_item);
      userMajorSpinner.setAdapter(adapter);
      userMajorSpinner.setOnItemSelectedListener(new AdapterView.OnItemSelectedListener(){
        @Override public void onItemSelected(        AdapterView<?> adapterView,        View view,        int i,        long l){
          SurveyManager sm=new SurveyManager(getApplicationContext());
          Cursor c=sm.getFacultyID((String)adapterView.getItemAtPosition(i));
          if (c.moveToFirst()) {
            Utils.setInternalSetting(getApplicationContext(),""String_Node_Str"",c.getString(c.getColumnIndex(""String_Node_Str"")));
          }
          TextView selectedItem=(TextView)adapterView.getChildAt(0);
          if (selectedItem != null) {
            selectedItem.setTextColor(ContextCompat.getColor(getApplicationContext(),R.color.color_primary));
          }
        }
        @Override public void onNothingSelected(        AdapterView<?> adapterView){
        }
      }
);
      return;
    }
  }
.execute();
}",0.9852240228789324
161554,"@Override protected void onPostExecute(String[] majors){
  ArrayAdapter<String> adapter=new ArrayAdapter<String>(getBaseContext(),android.R.layout.simple_list_item_1,majors);
  adapter.setDropDownViewResource(android.R.layout.simple_spinner_dropdown_item);
  userMajorSpinner.setAdapter(adapter);
  userMajorSpinner.setOnItemSelectedListener(new AdapterView.OnItemSelectedListener(){
    @Override public void onItemSelected(    AdapterView<?> adapterView,    View view,    int i,    long l){
      SurveyManager sm=new SurveyManager(getApplicationContext());
      Cursor c=sm.getFacultyID((String)adapterView.getItemAtPosition(i));
      if (c.moveToFirst()) {
        Utils.setInternalSetting(getApplicationContext(),""String_Node_Str"",c.getString(c.getColumnIndex(""String_Node_Str"")));
      }
      TextView selectedItem=(TextView)adapterView.getChildAt(0);
      if (selectedItem != null) {
        selectedItem.setTextColor(ContextCompat.getColor(getApplicationContext(),R.color.color_primary));
      }
      userMajor=(String)adapterView.getItemAtPosition(i);
    }
    @Override public void onNothingSelected(    AdapterView<?> adapterView){
    }
  }
);
  return;
}","@Override protected void onPostExecute(String[] majors){
  ArrayAdapter<String> adapter=new ArrayAdapter<String>(getBaseContext(),android.R.layout.simple_list_item_1,majors);
  adapter.setDropDownViewResource(android.R.layout.simple_spinner_dropdown_item);
  userMajorSpinner.setAdapter(adapter);
  userMajorSpinner.setOnItemSelectedListener(new AdapterView.OnItemSelectedListener(){
    @Override public void onItemSelected(    AdapterView<?> adapterView,    View view,    int i,    long l){
      SurveyManager sm=new SurveyManager(getApplicationContext());
      Cursor c=sm.getFacultyID((String)adapterView.getItemAtPosition(i));
      if (c.moveToFirst()) {
        Utils.setInternalSetting(getApplicationContext(),""String_Node_Str"",c.getString(c.getColumnIndex(""String_Node_Str"")));
      }
      TextView selectedItem=(TextView)adapterView.getChildAt(0);
      if (selectedItem != null) {
        selectedItem.setTextColor(ContextCompat.getColor(getApplicationContext(),R.color.color_primary));
      }
    }
    @Override public void onNothingSelected(    AdapterView<?> adapterView){
    }
  }
);
  return;
}",0.974694589877836
161555,"/** 
 * Handle click on next button
 * @param next Next button handle
 */
@SuppressWarnings(""String_Node_Str"") public void onClickNext(View next){
  if (userMajorSpinner.getSelectedItemPosition() == 0) {
    Toast.makeText(getApplicationContext(),""String_Node_Str"",Toast.LENGTH_SHORT).show();
    return;
  }
  userMajor=userMajorSpinner.getSelectedItem().toString();
  lrzId=editText.getText().toString();
  Editor editor=sharedPrefs.edit();
  editor.putString(Const.LRZ_ID,lrzId);
  editor.apply();
  if (lrzId.length() >= AccessTokenManager.MIN_LRZ_LENGTH) {
    if (accessTokenManager.hasValidAccessToken()) {
      new AlertDialog.Builder(this).setMessage(getString(R.string.dialog_new_token)).setPositiveButton(getString(R.string.yes),this).setNegativeButton(getString(R.string.no),this).show();
    }
 else {
      startLoading();
    }
  }
 else {
    Utils.showToast(this,R.string.error_lrz_wrong);
  }
}","/** 
 * Handle click on next button
 * @param next Next button handle
 */
@SuppressWarnings(""String_Node_Str"") public void onClickNext(View next){
  if (userMajorSpinner.getSelectedItemPosition() == 0) {
    Toast.makeText(getApplicationContext(),""String_Node_Str"",Toast.LENGTH_SHORT).show();
    return;
  }
  lrzId=editTxtLrzId.getText().toString();
  Editor editor=sharedPrefs.edit();
  editor.putString(Const.LRZ_ID,lrzId);
  editor.apply();
  if (lrzId.length() >= AccessTokenManager.MIN_LRZ_LENGTH) {
    if (accessTokenManager.hasValidAccessToken()) {
      new AlertDialog.Builder(this).setMessage(getString(R.string.dialog_new_token)).setPositiveButton(getString(R.string.yes),this).setNegativeButton(getString(R.string.no),this).show();
    }
 else {
      startLoading();
    }
  }
 else {
    Utils.showToast(this,R.string.error_lrz_wrong);
  }
}",0.9632975719932242
161556,"private String getDateTime(){
  Calendar c=Calendar.getInstance();
  SimpleDateFormat sdf=new SimpleDateFormat(""String_Node_Str"");
  String strDate=sdf.format(c.getTime());
  return strDate;
}","private String getDateTime(){
  Calendar c=Calendar.getInstance();
  SimpleDateFormat sdf=new SimpleDateFormat(""String_Node_Str"");
  return sdf.format(c.getTime());
}",0.9106145251396648
161557,"/** 
 * This method populates the data for lists which will be shown on this activity. It is called by Moodlemanager when the requested data is ready. In this case after requesting requestUserData() after the first login or requestUserCourseList()
 */
public void refresh(){
  try {
    if (!NetUtils.isConnected(this)) {
      Utils.showToast(this,R.string.no_internet_connection);
      showNoInternetLayout();
      return;
    }
    emptyListViewData();
    Map<String,String> courses=(Map<String,String>)realManager.getCoursesList();
    if (realManager.getMoodleUserInfo() == null) {
      Utils.log(""String_Node_Str"");
      Intent intent=new Intent(this,MoodleLoginActivity.class);
      intent.putExtra(""String_Node_Str"",this.getClass());
      intent.putExtra(""String_Node_Str"",false);
      startActivity(intent);
      finish();
      return;
    }
    if (courses == null) {
      realManager.requestUserCourseList(this);
      return;
    }
 else {
      coursesIds=(Map<String,Integer>)realManager.getCoursesId();
      for (      Map.Entry<String,String> item : courses.entrySet()) {
        List<String> temp=new ArrayList<String>();
        temp.add(item.getValue());
        courseListChilds.put(item.getKey(),temp);
        courseListHeaders.add(item.getKey());
      }
      baseSetupForListView();
      showLoadingEnded();
      coursesAdapter.notifyDataSetChanged();
    }
  }
 catch (  Exception e) {
    Utils.log(e);
    showLoadingEnded();
    Utils.showToast(this,R.string.error_something_wrong);
  }
}","/** 
 * This method populates the data for lists which will be shown on this activity. It is called by Moodlemanager when the requested data is ready. In this case after requesting requestUserData() after the first login or requestUserCourseList()
 */
public void refresh(){
  try {
    if (!NetUtils.isConnected(this)) {
      Utils.showToast(this,R.string.no_internet_connection);
      showNoInternetLayout();
      return;
    }
    emptyListViewData();
    Map<String,String> courses=realManager.getCoursesList();
    if (realManager.getMoodleUserInfo() == null) {
      Utils.log(""String_Node_Str"");
      Intent intent=new Intent(this,MoodleLoginActivity.class);
      intent.putExtra(""String_Node_Str"",this.getClass());
      intent.putExtra(""String_Node_Str"",false);
      startActivity(intent);
      finish();
      return;
    }
    if (courses == null) {
      realManager.requestUserCourseList(this);
      return;
    }
 else {
      coursesIds=realManager.getCoursesId();
      for (      Map.Entry<String,String> item : courses.entrySet()) {
        List<String> temp=new ArrayList<String>();
        temp.add(item.getValue());
        courseListChilds.put(item.getKey(),temp);
        courseListHeaders.add(item.getKey());
      }
      baseSetupForListView();
      showLoadingEnded();
      coursesAdapter.notifyDataSetChanged();
    }
  }
 catch (  Exception e) {
    Utils.log(e);
    showLoadingEnded();
    Utils.showToast(this,R.string.error_something_wrong);
  }
}",0.9864283349884144
161558,"/** 
 * Checks if play services are available and registers for GCM
 */
private boolean checkPlayServicesAndRegister(){
  if (GcmIdentificationService.checkPlayServices(this)) {
    GcmIdentificationService idService=new GcmIdentificationService();
    idService.checkSetup();
    return true;
  }
 else {
    Utils.log(""String_Node_Str"");
    return false;
  }
}","/** 
 * Checks if play services are available and registers for GCM
 */
private boolean checkPlayServicesAndRegister(){
  if (GcmIdentificationService.checkPlayServices(this)) {
    GcmIdentificationService idService=new GcmIdentificationService(this);
    idService.checkSetup();
    return true;
  }
 else {
    Utils.log(""String_Node_Str"");
    return false;
  }
}",0.9945205479452056
161559,"public String getCurrentToken(){
  return Utils.getInternalSettingString(this,Const.GCM_TOKEN_ID,""String_Node_Str"");
}","public String getCurrentToken(){
  return Utils.getInternalSettingString(this.mContext,Const.GCM_TOKEN_ID,""String_Node_Str"");
}",0.963265306122449
161560,"@Override protected String doInBackground(Void... params){
  try {
    String regId=GcmIdentificationService.this.register();
    Utils.setInternalSetting(GcmIdentificationService.this,Const.GCM_REG_ID_SENT_TO_SERVER,false);
    Utils.setInternalSetting(GcmIdentificationService.this,Const.GCM_REG_ID_LAST_TRANSMISSION,(new Date()).getTime());
    GcmIdentificationService.this.sendRegistrationIdToBackend(regId);
    return ""String_Node_Str"";
  }
 catch (  IOException ex) {
    return ""String_Node_Str"" + ex.getMessage();
  }
}","@Override protected String doInBackground(Void... params){
  try {
    String regId=GcmIdentificationService.this.register();
    Utils.setInternalSetting(mContext,Const.GCM_REG_ID_SENT_TO_SERVER,false);
    Utils.setInternalSetting(mContext,Const.GCM_REG_ID_LAST_TRANSMISSION,(new Date()).getTime());
    GcmIdentificationService.this.sendRegistrationIdToBackend(regId);
    return ""String_Node_Str"";
  }
 catch (  IOException ex) {
    return ""String_Node_Str"" + ex.getMessage();
  }
}",0.9271653543307088
161561,"/** 
 * Helper function to check if we need to update the regid
 * @param regId registration ID
 */
private void checkRegisterIdUpdate(String regId){
  long lastTransmission=Utils.getInternalSettingLong(this,Const.GCM_REG_ID_LAST_TRANSMISSION,0);
  Date now=new Date();
  if (now.getTime() - 24 * 3600000 > lastTransmission) {
    this.sendRegistrationIdToBackend(regId);
  }
}","/** 
 * Helper function to check if we need to update the regid
 * @param regId registration ID
 */
private void checkRegisterIdUpdate(String regId){
  long lastTransmission=Utils.getInternalSettingLong(mContext,Const.GCM_REG_ID_LAST_TRANSMISSION,0);
  Date now=new Date();
  if (now.getTime() - 24 * 3600000 > lastTransmission) {
    this.sendRegistrationIdToBackend(regId);
  }
}",0.9841688654353562
161562,"public void unregister() throws IOException {
  InstanceID.getInstance(this).deleteInstanceID();
  Utils.setInternalSetting(this,Const.GCM_INSTANCE_ID,""String_Node_Str"");
  Utils.setInternalSetting(this,Const.GCM_TOKEN_ID,""String_Node_Str"");
}","public void unregister() throws IOException {
  InstanceID.getInstance(mContext).deleteInstanceID();
  Utils.setInternalSetting(mContext,Const.GCM_INSTANCE_ID,""String_Node_Str"");
  Utils.setInternalSetting(mContext,Const.GCM_TOKEN_ID,""String_Node_Str"");
}",0.927710843373494
161563,"/** 
 * Registers the application with GCM servers asynchronously. <p/> Stores the registration ID and app versionCode in the application's shared preferences.
 */
private void registerInBackground(){
  new AsyncTask<Void,Void,String>(){
    @Override protected String doInBackground(    Void... params){
      try {
        String regId=GcmIdentificationService.this.register();
        Utils.setInternalSetting(GcmIdentificationService.this,Const.GCM_REG_ID_SENT_TO_SERVER,false);
        Utils.setInternalSetting(GcmIdentificationService.this,Const.GCM_REG_ID_LAST_TRANSMISSION,(new Date()).getTime());
        GcmIdentificationService.this.sendRegistrationIdToBackend(regId);
        return ""String_Node_Str"";
      }
 catch (      IOException ex) {
        return ""String_Node_Str"" + ex.getMessage();
      }
    }
    @Override protected void onPostExecute(    String msg){
      Utils.log(msg);
    }
  }
.execute();
}","/** 
 * Registers the application with GCM servers asynchronously. <p/> Stores the registration ID and app versionCode in the application's shared preferences.
 */
private void registerInBackground(){
  new AsyncTask<Void,Void,String>(){
    @Override protected String doInBackground(    Void... params){
      try {
        String regId=GcmIdentificationService.this.register();
        Utils.setInternalSetting(mContext,Const.GCM_REG_ID_SENT_TO_SERVER,false);
        Utils.setInternalSetting(mContext,Const.GCM_REG_ID_LAST_TRANSMISSION,(new Date()).getTime());
        GcmIdentificationService.this.sendRegistrationIdToBackend(regId);
        return ""String_Node_Str"";
      }
 catch (      IOException ex) {
        return ""String_Node_Str"" + ex.getMessage();
      }
    }
    @Override protected void onPostExecute(    String msg){
      Utils.log(msg);
    }
  }
.execute();
}",0.961283185840708
161564,"public void checkSetup(){
  String regId=this.getCurrentToken();
  if (regId.isEmpty()) {
    this.registerInBackground();
  }
 else {
    if (!Utils.getInternalSettingBool(this,Const.GCM_REG_ID_SENT_TO_SERVER,false)) {
      this.sendRegistrationIdToBackend(regId);
    }
    this.checkRegisterIdUpdate(regId);
  }
}","public void checkSetup(){
  String regId=this.getCurrentToken();
  if (regId.isEmpty()) {
    this.registerInBackground();
  }
 else {
    if (!Utils.getInternalSettingBool(mContext,Const.GCM_REG_ID_SENT_TO_SERVER,false)) {
      this.sendRegistrationIdToBackend(regId);
    }
    this.checkRegisterIdUpdate(regId);
  }
}",0.9811912225705328
161565,"/** 
 * Registers this phone with InstanceID and returns a valid token to be transmitted to the server
 * @return String token that can be used to transmit messages to this client
 */
public String register() throws IOException {
  String iid=InstanceID.getInstance(this).getId();
  String token=InstanceID.getInstance(this).getToken(senderId,GoogleCloudMessaging.INSTANCE_ID_SCOPE);
  Utils.setInternalSetting(this,Const.GCM_INSTANCE_ID,iid);
  Utils.setInternalSetting(this,Const.GCM_TOKEN_ID,token);
  return token;
}","/** 
 * Registers this phone with InstanceID and returns a valid token to be transmitted to the server
 * @return String token that can be used to transmit messages to this client
 */
public String register() throws IOException {
  String iid=InstanceID.getInstance(mContext).getId();
  String token=InstanceID.getInstance(mContext).getToken(senderId,GoogleCloudMessaging.INSTANCE_ID_SCOPE);
  Utils.setInternalSetting(mContext,Const.GCM_INSTANCE_ID,iid);
  Utils.setInternalSetting(mContext,Const.GCM_TOKEN_ID,token);
  return token;
}",0.9545454545454546
161566,"@Override public void onViewCreated(View view,Bundle savedInstanceState){
  super.onViewCreated(view,savedInstanceState);
  view.setBackgroundColor(ContextCompat.getColor(getContext(),R.color.background_material_light));
}","@Override public void onViewCreated(View view,Bundle savedInstanceState){
  super.onViewCreated(view,savedInstanceState);
  view.setBackgroundColor(Color.WHITE);
}",0.8207792207792208
161567,"@Override public void onItemClick(AdapterView<?> parent,View view,int position,long id){
  @SuppressWarnings(""String_Node_Str"") HashMap<String,String> room=(HashMap<String,String>)list.getAdapter().getItem(position);
  String val=""String_Node_Str"";
  Bundle b=new Bundle();
  for (  Map.Entry<String,String> entry : room.entrySet()) {
    val+=entry.getKey() + ""String_Node_Str"" + entry.getValue()+ ""String_Node_Str"";
    b.putString(entry.getKey(),entry.getValue());
  }
  recentsManager.replaceIntoDb(val);
  Intent intent=new Intent(this,RoomFinderDetailsActivity.class);
  intent.putExtra(RoomFinderDetailsActivity.EXTRA_ROOM_INFO,b);
  startActivity(intent);
}","@Override public void onItemClick(AdapterView<?> parent,View view,int position,long id){
  @SuppressWarnings(""String_Node_Str"") TreeMap<String,String> room=new TreeMap((HashMap<String,String>)list.getAdapter().getItem(position));
  String val=""String_Node_Str"";
  Bundle b=new Bundle();
  for (  Map.Entry<String,String> entry : room.entrySet()) {
    val+=entry.getKey() + ""String_Node_Str"" + entry.getValue()+ ""String_Node_Str"";
    b.putString(entry.getKey(),entry.getValue());
  }
  recentsManager.replaceIntoDb(val);
  Intent intent=new Intent(this,RoomFinderDetailsActivity.class);
  intent.putExtra(RoomFinderDetailsActivity.EXTRA_ROOM_INFO,b);
  startActivity(intent);
}",0.896500372300819
161568,"@Override public void onReceive(Context context,Intent intent){
  GCMChat extras=(GCMChat)intent.getSerializableExtra(""String_Node_Str"");
  Utils.log(""String_Node_Str"" + extras.room + ""String_Node_Str""+ extras.member);
  if (extras.room == currentChatRoom.getId() && chatHistoryAdapter != null) {
    if (extras.member == currentChatMember.getId()) {
      chatHistoryAdapter.setUnsentMessages(chatManager.getAllUnsent());
    }
 else     if (extras.message == -1) {
      AudioManager am=(AudioManager)getSystemService(Context.AUDIO_SERVICE);
      if (am.getRingerMode() == AudioManager.RINGER_MODE_NORMAL) {
        MediaPlayer mediaPlayer=MediaPlayer.create(ChatActivity.this,R.raw.message);
        mediaPlayer.start();
      }
 else       if (am.getRingerMode() == AudioManager.RINGER_MODE_VIBRATE) {
        Vibrator v=(Vibrator)getSystemService(Context.VIBRATOR_SERVICE);
        v.vibrate(500);
      }
    }
    chatHistoryAdapter.changeCursor(chatManager.getAll());
  }
}","@Override public void onReceive(Context context,Intent intent){
  GCMChat extras=(GCMChat)intent.getSerializableExtra(""String_Node_Str"");
  if (extras == null) {
    return;
  }
  Utils.log(""String_Node_Str"" + extras.room + ""String_Node_Str""+ extras.member);
  if (extras.room == currentChatRoom.getId() && chatHistoryAdapter != null) {
    if (extras.member == currentChatMember.getId()) {
      chatHistoryAdapter.setUnsentMessages(chatManager.getAllUnsent());
    }
 else     if (extras.message == -1) {
      AudioManager am=(AudioManager)getSystemService(Context.AUDIO_SERVICE);
      if (am.getRingerMode() == AudioManager.RINGER_MODE_NORMAL) {
        MediaPlayer mediaPlayer=MediaPlayer.create(ChatActivity.this,R.raw.message);
        mediaPlayer.start();
      }
 else       if (am.getRingerMode() == AudioManager.RINGER_MODE_VIBRATE) {
        Vibrator v=(Vibrator)getSystemService(Context.VIBRATOR_SERVICE);
        v.vibrate(500);
      }
    }
    chatHistoryAdapter.changeCursor(chatManager.getAll());
  }
}",0.9800399201596808
161569,"@Override public void onClick(View v){
  mAdapter.insert(lastPos,card);
}","@Override public void onClick(View v){
  mAdapter.insert(lastPos,card);
  mCardsView.scrollToPosition(lastPos);
}",0.7849462365591398
161570,"/** 
 * Executed when the RestoreCard is pressed
 */
public void restoreCards(View view){
  CardManager.restoreCards();
  refreshCards();
}","/** 
 * Executed when the RestoreCard is pressed
 */
public void restoreCards(View view){
  CardManager.restoreCards();
  refreshCards();
  mCardsView.scrollToPosition(0);
}",0.8910256410256411
161571,"@Override public void onSwiped(RecyclerView.ViewHolder viewHolder,int direction){
  Card.CardViewHolder cardViewHolder=(Card.CardViewHolder)viewHolder;
  final Card card=cardViewHolder.getCurrentCard();
  final int lastPos=mAdapter.remove(card);
  final View coordinatorLayoutView=findViewById(R.id.snackbarPosition);
  Snackbar.make(coordinatorLayoutView,R.string.card_dismissed,Snackbar.LENGTH_LONG).setAction(R.string.undo,new View.OnClickListener(){
    @Override public void onClick(    View v){
      mAdapter.insert(lastPos,card);
    }
  }
).show();
}","@Override public void onSwiped(RecyclerView.ViewHolder viewHolder,int direction){
  Card.CardViewHolder cardViewHolder=(Card.CardViewHolder)viewHolder;
  final Card card=cardViewHolder.getCurrentCard();
  final int lastPos=mAdapter.remove(card);
  final View coordinatorLayoutView=findViewById(R.id.snackbarPosition);
  Snackbar.make(coordinatorLayoutView,R.string.card_dismissed,Snackbar.LENGTH_LONG).setAction(R.string.undo,new View.OnClickListener(){
    @Override public void onClick(    View v){
      mAdapter.insert(lastPos,card);
      mCardsView.scrollToPosition(lastPos);
    }
  }
).setCallback(new Snackbar.Callback(){
    @Override public void onDismissed(    Snackbar snackbar,    int event){
      super.onDismissed(snackbar,event);
      if (event != Snackbar.Callback.DISMISS_EVENT_ACTION) {
        card.discardCard();
      }
    }
  }
).show();
}",0.7845614035087719
161572,"@Override protected void onPostExecute(Void result){
  super.onPostExecute(result);
  if (mAdapter == null)   initAdapter();
 else   mAdapter.notifyDataSetChanged();
  mSwipeRefreshlayout.setRefreshing(false);
  if (!registered && !NetUtils.isConnected(MainActivity.this)) {
    registerReceiver(connectivityChangeReceiver,new IntentFilter(ConnectivityManager.CONNECTIVITY_ACTION));
    registered=true;
  }
}","@Override protected void onPostExecute(Void result){
  super.onPostExecute(result);
  if (mAdapter == null)   initAdapter();
 else {
    mAdapter.notifyItemRangeChanged(0,mAdapter.getItemCount());
  }
  mSwipeRefreshlayout.setRefreshing(false);
  if (!registered && !NetUtils.isConnected(MainActivity.this)) {
    registerReceiver(connectivityChangeReceiver,new IntentFilter(ConnectivityManager.CONNECTIVITY_ACTION));
    registered=true;
  }
}",0.9378663540445488
161573,"/** 
 * Starts updating cards in background Called when   {@link SwipeRefreshLayout} gets triggered.
 */
@Override public void onRefresh(){
  new AsyncTask<Void,Void,Void>(){
    @Override protected void onPreExecute(){
      super.onPreExecute();
    }
    @Override protected Void doInBackground(    Void... params){
      CardManager.update(MainActivity.this);
      return null;
    }
    @Override protected void onPostExecute(    Void result){
      super.onPostExecute(result);
      if (mAdapter == null)       initAdapter();
 else       mAdapter.notifyDataSetChanged();
      mSwipeRefreshlayout.setRefreshing(false);
      if (!registered && !NetUtils.isConnected(MainActivity.this)) {
        registerReceiver(connectivityChangeReceiver,new IntentFilter(ConnectivityManager.CONNECTIVITY_ACTION));
        registered=true;
      }
    }
  }
.execute();
}","/** 
 * Starts updating cards in background Called when   {@link SwipeRefreshLayout} gets triggered.
 */
@Override public void onRefresh(){
  new AsyncTask<Void,Void,Void>(){
    @Override protected void onPreExecute(){
      super.onPreExecute();
    }
    @Override protected Void doInBackground(    Void... params){
      CardManager.update(MainActivity.this);
      return null;
    }
    @Override protected void onPostExecute(    Void result){
      super.onPostExecute(result);
      if (mAdapter == null)       initAdapter();
 else {
        mAdapter.notifyItemRangeChanged(0,mAdapter.getItemCount());
      }
      mSwipeRefreshlayout.setRefreshing(false);
      if (!registered && !NetUtils.isConnected(MainActivity.this)) {
        registerReceiver(connectivityChangeReceiver,new IntentFilter(ConnectivityManager.CONNECTIVITY_ACTION));
        registered=true;
      }
    }
  }
.execute();
}",0.9700056593095644
161574,"/** 
 * Translates room title to Geo HINT: Don't call from UI thread
 * @param loc Room title
 * @return Location or null on failure
 */
public Geo roomLocationStringToGeo(String loc){
  TUMRoomFinderRequest requestHandler=new TUMRoomFinderRequest();
  if (loc.contains(""String_Node_Str""))   loc=loc.substring(0,loc.indexOf('(')).trim();
  ArrayList<HashMap<String,String>> request=requestHandler.fetchRooms(loc);
  if (request.size() > 0) {
    String room=request.get(0).get(TUMRoomFinderRequest.KEY_ARCHITECT_NUMBER);
    return requestHandler.fetchCoordinates(room);
  }
  return null;
}","/** 
 * Translates room title to Geo HINT: Don't call from UI thread
 * @param loc Room title
 * @return Location or null on failure
 */
public Geo roomLocationStringToGeo(String loc){
  TUMRoomFinderRequest requestHandler=new TUMRoomFinderRequest(mContext);
  if (loc.contains(""String_Node_Str""))   loc=loc.substring(0,loc.indexOf('(')).trim();
  ArrayList<HashMap<String,String>> request=requestHandler.fetchRooms(loc);
  if (request.size() > 0) {
    String room=request.get(0).get(TUMRoomFinderRequest.KEY_ARCHITECT_NUMBER);
    return requestHandler.fetchCoordinates(room);
  }
  return null;
}",0.9932773109243698
161575,"@Override protected void onStartSearch(String query){
  Utils.log(""String_Node_Str"" + query);
  if (!NetUtils.isConnected(this)) {
    showNoInternetLayout();
    return;
  }
  showLoadingStart();
  (new MVVJsoupParser(this)).execute(new String[]{query});
}","@Override protected void onStartSearch(String query){
  if (!NetUtils.isConnected(this)) {
    showNoInternetLayout();
    return;
  }
  showLoadingStart();
  (new MVVJsoupParser(this)).execute(new String[]{query});
}",0.9156118143459916
161576,"@Override public void showDepartureList(MVVObject dep){
  try {
    recentsManager.replaceIntoDb(dep.getDepartureHeader().trim());
    String stationHeader=dep.getDepartureHeader().trim() + ""String_Node_Str"" + dep.getDepartureServerTime()+ ""String_Node_Str"";
    listHeader.setText(stationHeader);
    listHeader.setTypeface(null,Typeface.BOLD);
    dataAdapter=new MvvAdapter(dep,this,this);
    departurelist.setAdapter(dataAdapter);
    showLoadingEnded();
  }
 catch (  Exception e) {
    Utils.log(e);
    Utils.showToast(this,""String_Node_Str"");
  }
}","@Override public void showDepartureList(MVVObject dep){
  try {
    recentsManager.replaceIntoDb(dep.getDepartureHeader().trim());
    SharedPreferences sharedPreferences=getSharedPreferences(getString(R.string.mvv_shared_pref_key),MODE_PRIVATE);
    SharedPreferences.Editor editor=sharedPreferences.edit();
    editor.remove(getString(R.string.most_recent_station));
    editor.commit();
    editor.putString(getString(R.string.most_recent_station),dep.getDepartureHeader().trim());
    editor.commit();
    Utils.log(""String_Node_Str"" + dep.getDepartureHeader().trim());
    String stationHeader=dep.getDepartureHeader().trim() + ""String_Node_Str"" + dep.getDepartureServerTime()+ ""String_Node_Str"";
    listHeader.setText(stationHeader);
    listHeader.setTypeface(null,Typeface.BOLD);
    dataAdapter=new MvvAdapter(dep,this,this);
    departurelist.setAdapter(dataAdapter);
    showLoadingEnded();
  }
 catch (  Exception e) {
    Utils.log(e);
    Utils.showToast(this,""String_Node_Str"");
  }
}",0.7154784842646115
161577,"@Override public void onReceive(Context context,Intent intent){
  super.onReceive(context,intent);
  if (SYNC_CLICKED.equals(intent.getAction())) {
    if (!MVVWidgetService.loadRecentData())     Utils.showToast(context,""String_Node_Str"");
  }
}","@Override public void onReceive(Context context,Intent intent){
  super.onReceive(context,intent);
  if (Const.SYNC_CLICKED.equals(intent.getAction())) {
    if (!MVVWidgetService.loadRecentData())     Utils.showToast(context,""String_Node_Str"");
  }
}",0.9879032258064516
161578,"@Override public void onUpdate(Context context,AppWidgetManager appWidgetManager,int[] appWidgetIds){
  widgetIDs=appWidgetIds;
  final int N=appWidgetIds.length;
  this.appWidgetManager=appWidgetManager;
  for (int i=0; i < N; i++) {
    Intent intent=new Intent(context,MVVWidgetService.class);
    intent.putExtra(AppWidgetManager.EXTRA_APPWIDGET_ID,appWidgetIds[i]);
    intent.setData(Uri.parse(intent.toUri(Intent.URI_INTENT_SCHEME)));
    rv=new RemoteViews(context.getPackageName(),R.layout.mvv_widget);
    Calendar c=Calendar.getInstance();
    String headerMVVWidget=""String_Node_Str"" + c.get(Calendar.DAY_OF_MONTH) + ""String_Node_Str""+ c.get(Calendar.MONTH)+ ""String_Node_Str""+ c.get(Calendar.YEAR);
    rv.setTextViewText(R.id.mvv_widget_header,headerMVVWidget);
    rv.setRemoteAdapter(appWidgetIds[i],R.id.mvv_widget_item,intent);
    rv.setEmptyView(R.id.empty_view,R.id.empty_view);
    rv.setOnClickPendingIntent(R.id.mvv_refresh,getPendingSelfIntent(context,SYNC_CLICKED));
    appWidgetManager.updateAppWidget(appWidgetIds[i],rv);
  }
  super.onUpdate(context,appWidgetManager,appWidgetIds);
}","@Override public void onUpdate(Context context,AppWidgetManager appWidgetManager,int[] appWidgetIds){
  widgetIDs=appWidgetIds;
  final int N=appWidgetIds.length;
  this.appWidgetManager=appWidgetManager;
  for (int i=0; i < N; i++) {
    Intent intent=new Intent(context,MVVWidgetService.class);
    intent.putExtra(AppWidgetManager.EXTRA_APPWIDGET_ID,appWidgetIds[i]);
    intent.setData(Uri.parse(intent.toUri(Intent.URI_INTENT_SCHEME)));
    rv=new RemoteViews(context.getPackageName(),R.layout.mvv_widget);
    Calendar c=Calendar.getInstance();
    String headerMVVWidget=""String_Node_Str"" + c.get(Calendar.DAY_OF_MONTH) + ""String_Node_Str""+ c.get(Calendar.MONTH)+ ""String_Node_Str""+ c.get(Calendar.YEAR);
    rv.setTextViewText(R.id.mvv_widget_header,headerMVVWidget);
    rv.setRemoteAdapter(appWidgetIds[i],R.id.mvv_widget_item,intent);
    rv.setEmptyView(R.id.empty_view,R.id.empty_view);
    rv.setOnClickPendingIntent(R.id.mvv_refresh,getPendingSelfIntent(context,Const.SYNC_CLICKED));
    appWidgetManager.updateAppWidget(appWidgetIds[i],rv);
  }
  super.onUpdate(context,appWidgetManager,appWidgetIds);
}",0.9973118279569892
161579,"@Override public void onCreate(){
  recentsManager=new RecentsManager(applicationContext,RecentsManager.STATIONS);
  callRecentVisitedStation();
  appWidgetManager=AppWidgetManager.getInstance(applicationContext);
  mostRecentStationName=null;
}","@Override public void onCreate(){
  recentsManager=new RecentsManager(applicationContext,RecentsManager.STATIONS);
  callRecentVisitedStation();
  appWidgetManager=AppWidgetManager.getInstance(applicationContext);
}",0.9347826086956522
161580,"@Override public RemoteViews getViewAt(int position){
  RemoteViews rv=new RemoteViews(applicationContext.getPackageName(),R.layout.mvv_widget_item);
  MVVDeparture currentSearch=(MVVDeparture)mvvList.get(position);
  if (currentSearch != null) {
    int icon_id=getImageResource(currentSearch);
    String number=currentSearch.getLine();
    String station=currentSearch.getDirection();
    String minutes=String.valueOf(currentSearch.getMin() + ""String_Node_Str"");
    rv.setImageViewResource(R.id.mvv_icon,icon_id);
    rv.setTextViewText(R.id.line_number,number);
    String stationString=(mostRecentStationName == null ? station : mostRecentStationName + ""String_Node_Str"" + station);
    rv.setTextViewText(R.id.station,stationString);
    rv.setTextViewText(R.id.minutes,minutes);
    return rv;
  }
  return null;
}","@Override public RemoteViews getViewAt(int position){
  RemoteViews rv=new RemoteViews(applicationContext.getPackageName(),R.layout.mvv_widget_item);
  MVVDeparture currentSearch=(MVVDeparture)mvvList.get(position);
  SharedPreferences sharedPreferences=applicationContext.getSharedPreferences(applicationContext.getString(R.string.mvv_shared_pref_key),Context.MODE_PRIVATE);
  String mostRecentStationName=sharedPreferences.getString(applicationContext.getString(R.string.most_recent_station),null);
  Utils.log(""String_Node_Str"" + mostRecentStationName);
  if (currentSearch != null) {
    int icon_id=getImageResource(currentSearch);
    String number=currentSearch.getLine();
    String station=currentSearch.getDirection();
    String minutes=String.valueOf(currentSearch.getMin() + ""String_Node_Str"");
    rv.setImageViewResource(R.id.mvv_icon,icon_id);
    rv.setTextViewText(R.id.line_number,number);
    String stationString=(mostRecentStationName == null ? station : mostRecentStationName + ""String_Node_Str"" + station);
    rv.setTextViewText(R.id.station,stationString);
    rv.setTextViewText(R.id.minutes,minutes);
    return rv;
  }
  return null;
}",0.828384499245093
161581,"@Override public void showSuggestionList(MVVObject sug){
  try {
    mvvList=sug.getResultList();
    final MVVSuggestion sugestion=(MVVSuggestion)mvvList.get(0);
    final MVVDelegate delegate=this;
    new Thread(new Runnable(){
      @Override public void run(){
        (new MVVJsoupParser(delegate)).execute(sugestion.getName());
      }
    }
).run();
    mvvList=null;
  }
 catch (  Exception e) {
    Utils.log(e);
    Utils.showToast(applicationContext,""String_Node_Str"");
  }
}","@Override public void showSuggestionList(MVVObject sug){
  try {
    mvvList=sug.getResultList();
    final MVVSuggestion sugestion=(MVVSuggestion)mvvList.get(0);
    final MVVDelegate delegate=this;
    new Thread(new Runnable(){
      @Override public void run(){
        (new MVVJsoupParser(delegate)).execute(sugestion.getName());
      }
    }
).run();
    mvvList=null;
  }
 catch (  Exception e) {
    Utils.log(e);
    Utils.showToast(applicationContext,applicationContext.getString(R.string.something_is_wrong));
  }
}",0.9428007889546351
161582,"public boolean callRecentVisitedStation(){
  boolean isValid=true;
  try {
    String query=getFirstRecentStation();
    if (query != null)     (new MVVJsoupParser(this)).execute(new String[]{query});
  }
 catch (  Exception e) {
    Utils.showToast(applicationContext,""String_Node_Str"");
    e.printStackTrace();
    isValid=false;
    return isValid;
  }
  return isValid;
}","public boolean callRecentVisitedStation(){
  SharedPreferences sharedPreferences=applicationContext.getSharedPreferences(applicationContext.getString(R.string.mvv_shared_pref_key),Context.MODE_PRIVATE);
  String queryString=sharedPreferences.getString(applicationContext.getString(R.string.most_recent_station),null);
  boolean isValid=true;
  Utils.log(""String_Node_Str"" + queryString);
  try {
    if (queryString != null)     (new MVVJsoupParser(this)).execute(new String[]{queryString});
 else {
      Utils.showToast(applicationContext,applicationContext.getString(R.string.no_recent_found));
    }
  }
 catch (  Exception e) {
    Utils.showToast(applicationContext,applicationContext.getString(R.string.something_is_wrong));
    e.printStackTrace();
    isValid=false;
    return isValid;
  }
  return isValid;
}",0.4803347280334728
161583,"@Override public void showError(MVVObject object){
  Utils.log(""String_Node_Str"" + object.getMessage());
  Utils.showToast(applicationContext,""String_Node_Str"");
}","@Override public void showError(MVVObject object){
  Utils.log(""String_Node_Str"" + object.getMessage());
  Utils.showToast(applicationContext,applicationContext.getString(R.string.something_is_wrong));
}",0.8306010928961749
161584,"@Override public void showDepartureList(MVVObject dep){
  try {
    mvvList=dep.getResultList();
    int widgetID=intent.getIntExtra(AppWidgetManager.EXTRA_APPWIDGET_ID,-1);
    appWidgetManager.notifyAppWidgetViewDataChanged(widgetID,R.id.mvv_widget_item);
  }
 catch (  Exception e) {
    Utils.log(e);
    Utils.showToast(applicationContext,""String_Node_Str"");
  }
}","@Override public void showDepartureList(MVVObject dep){
  try {
    mvvList=dep.getResultList();
    int widgetID=intent.getIntExtra(AppWidgetManager.EXTRA_APPWIDGET_ID,-1);
    appWidgetManager.notifyAppWidgetViewDataChanged(widgetID,R.id.mvv_widget_item);
  }
 catch (  Exception e) {
    Utils.log(e);
    Utils.showToast(applicationContext,applicationContext.getString(R.string.something_is_wrong));
  }
}",0.9203084832904884
161585,"/** 
 * Constructor by parsing the JSONObject
 * @param jsonObject the JSONObject
 */
public MoodleCourseModule(JSONObject jsonObject){
  this.id=null;
  this.instance=null;
  this.modicon=null;
  this.modname=null;
  this.modplural=null;
  this.name=null;
  this.url=null;
  this.visible=null;
  this.contents=null;
  if (jsonObject != null) {
    if (!jsonObject.has(""String_Node_Str"")) {
      this.instance=jsonObject.optInt(""String_Node_Str"");
      this.id=jsonObject.optInt(""String_Node_Str"");
      this.modicon=jsonObject.optString(""String_Node_Str"");
      this.modname=jsonObject.optString(""String_Node_Str"");
      this.name=jsonObject.optString(""String_Node_Str"");
      this.modplural=jsonObject.optString(""String_Node_Str"");
      this.visible=jsonObject.optDouble(""String_Node_Str"");
      try {
        this.url=new URL(jsonObject.optString(""String_Node_Str""));
      }
 catch (      MalformedURLException m) {
        this.url=null;
        this.message=m.getMessage();
        this.exception=""String_Node_Str"";
        this.errorCode=""String_Node_Str"";
      }
      MoodleCourseContent content;
      try {
        JSONArray jsonArray=jsonObject.getJSONArray(""String_Node_Str"");
        for (int i=0; i < jsonArray.length(); i++) {
          JSONObject c=jsonArray.getJSONObject(i);
          content=new MoodleCourseContent(c);
          contents.add(content);
        }
      }
 catch (      JSONException e) {
        this.contents=null;
        this.message=""String_Node_Str"";
        this.exception=""String_Node_Str"";
        this.errorCode=""String_Node_Str"";
        this.isValid=false;
      }
    }
 else {
      this.exception=jsonObject.optString(""String_Node_Str"");
      this.errorCode=jsonObject.optString(""String_Node_Str"");
      this.message=jsonObject.optString(""String_Node_Str"");
      this.isValid=false;
    }
  }
 else {
    this.exception=""String_Node_Str"";
    this.message=""String_Node_Str"";
    this.errorCode=""String_Node_Str"";
    this.isValid=false;
  }
}","/** 
 * Constructor by parsing the JSONObject
 * @param jsonObject the JSONObject
 */
public MoodleCourseModule(JSONObject jsonObject){
  this.id=null;
  this.instance=null;
  this.modicon=null;
  this.modname=null;
  this.modplural=null;
  this.name=null;
  this.url=null;
  this.visible=null;
  this.contents=null;
  if (jsonObject != null) {
    if (!jsonObject.has(""String_Node_Str"")) {
      this.instance=jsonObject.optInt(""String_Node_Str"");
      this.id=jsonObject.optInt(""String_Node_Str"");
      this.modicon=jsonObject.optString(""String_Node_Str"");
      this.modname=jsonObject.optString(""String_Node_Str"");
      this.name=jsonObject.optString(""String_Node_Str"");
      this.modplural=jsonObject.optString(""String_Node_Str"");
      this.visible=jsonObject.optDouble(""String_Node_Str"");
      try {
        this.url=new URL(jsonObject.optString(""String_Node_Str""));
      }
 catch (      MalformedURLException m) {
        this.url=null;
        this.message=m.getMessage();
        this.exception=""String_Node_Str"";
        this.errorCode=""String_Node_Str"";
      }
      MoodleCourseContent content;
      try {
        JSONArray jsonArray=jsonObject.getJSONArray(""String_Node_Str"");
        this.contents=new ArrayList<MoodleCourseContent>();
        for (int i=0; i < jsonArray.length(); i++) {
          JSONObject c=jsonArray.getJSONObject(i);
          content=new MoodleCourseContent(c);
          contents.add(content);
        }
      }
 catch (      JSONException e) {
        this.contents=null;
        this.message=""String_Node_Str"";
        this.exception=""String_Node_Str"";
        this.errorCode=""String_Node_Str"";
        this.isValid=false;
      }
    }
 else {
      this.exception=jsonObject.optString(""String_Node_Str"");
      this.errorCode=jsonObject.optString(""String_Node_Str"");
      this.message=jsonObject.optString(""String_Node_Str"");
      this.isValid=false;
    }
  }
 else {
    this.exception=""String_Node_Str"";
    this.message=""String_Node_Str"";
    this.errorCode=""String_Node_Str"";
    this.isValid=false;
  }
}",0.9852507374631267
161586,"private void sendMessage(String text){
  if (mEditedItem == null) {
    final ChatMessage message=new ChatMessage(text,currentChatMember);
    chatHistoryAdapter.add(message);
    chatManager.addToUnsent(message);
  }
 else {
    mEditedItem.setText(etMessage.getText().toString());
    chatManager.addToUnsent(mEditedItem);
    mEditedItem.setStatus(ChatMessage.STATUS_SENDING);
    chatManager.replaceMessage(mEditedItem);
    chatHistoryAdapter.notifyDataSetChanged();
  }
  startService(new Intent(this,SendMessageService.class));
}","private void sendMessage(String text){
  if (mEditedItem == null) {
    final ChatMessage message=new ChatMessage(text,currentChatMember);
    chatHistoryAdapter.add(message);
    chatManager.addToUnsent(message);
  }
 else {
    mEditedItem.setText(etMessage.getText().toString());
    chatManager.addToUnsent(mEditedItem);
    mEditedItem.setStatus(ChatMessage.STATUS_SENDING);
    chatManager.replaceMessage(mEditedItem);
    chatHistoryAdapter.notifyDataSetChanged();
    mEditedItem=null;
  }
  startService(new Intent(this,SendMessageService.class));
}",0.979890310786106
161587,"@Override public boolean onActionItemClicked(ActionMode mode,MenuItem item){
  ChatMessage msg=chatHistoryAdapter.mCheckedItem;
switch (item.getItemId()) {
case R.id.action_edit:
    if (msg.getStatus() == ChatMessage.STATUS_SENDING) {
      chatManager.removeFromUnsent(msg);
      chatHistoryAdapter.removeUnsent(msg);
    }
 else {
      mEditedItem=msg;
    }
  InputMethodManager imm=(InputMethodManager)ChatActivity.this.getSystemService(Service.INPUT_METHOD_SERVICE);
imm.showSoftInput(etMessage,0);
etMessage.setText(msg.getText());
int position=msg.getText().length();
etMessage.setSelection(position);
mode.finish();
return true;
case R.id.action_info:
showInfo(msg);
mode.finish();
return true;
default :
return false;
}
}","@Override public boolean onActionItemClicked(ActionMode mode,MenuItem item){
  ChatMessage msg=chatHistoryAdapter.mCheckedItem;
switch (item.getItemId()) {
case R.id.action_edit:
    if (msg.getStatus() == ChatMessage.STATUS_SENDING) {
      chatManager.removeFromUnsent(msg);
      chatHistoryAdapter.removeUnsent(msg);
    }
 else {
      chatHistoryAdapter.mEditedItem=msg;
    }
  InputMethodManager imm=(InputMethodManager)ChatActivity.this.getSystemService(Service.INPUT_METHOD_SERVICE);
imm.showSoftInput(etMessage,0);
etMessage.setText(msg.getText());
int position=msg.getText().length();
etMessage.setSelection(position);
mode.finish();
return true;
case R.id.action_info:
showInfo(msg);
mode.finish();
return true;
default :
return false;
}
}",0.9872053872053872
161588,"private void sendMessage(String text){
  if (mEditedItem == null) {
    final ChatMessage message=new ChatMessage(text,currentChatMember);
    chatHistoryAdapter.add(message);
    chatManager.addToUnsent(message);
  }
 else {
    mEditedItem.setText(etMessage.getText().toString());
    chatManager.addToUnsent(mEditedItem);
    mEditedItem.setStatus(ChatMessage.STATUS_SENDING);
    chatManager.replaceMessage(mEditedItem);
    chatHistoryAdapter.changeCursor(chatManager.getAll());
    mEditedItem=null;
  }
  startService(new Intent(this,SendMessageService.class));
}","private void sendMessage(String text){
  if (chatHistoryAdapter.mEditedItem == null) {
    final ChatMessage message=new ChatMessage(text,currentChatMember);
    chatHistoryAdapter.add(message);
    chatManager.addToUnsent(message);
  }
 else {
    chatHistoryAdapter.mEditedItem.setText(etMessage.getText().toString());
    chatManager.addToUnsent(chatHistoryAdapter.mEditedItem);
    chatHistoryAdapter.mEditedItem.setStatus(ChatMessage.STATUS_SENDING);
    chatManager.replaceMessage(chatHistoryAdapter.mEditedItem);
    chatHistoryAdapter.mEditedItem=null;
    chatHistoryAdapter.changeCursor(chatManager.getAll());
  }
  startService(new Intent(this,SendMessageService.class));
}",0.8740031897926634
161589,"@Override public void onReceive(Context context,Intent intent){
  Bundle extras=intent.getExtras();
  String chatRoomString=extras.getString(""String_Node_Str"");
  String memberString=extras.getString(""String_Node_Str"");
  Utils.log(""String_Node_Str"" + chatRoomString + ""String_Node_Str""+ memberString);
  if (chatRoomString.equals(""String_Node_Str"" + currentChatRoom.getId()) && chatHistoryAdapter != null) {
    if (memberString.equals(""String_Node_Str"" + currentChatMember.getId())) {
      chatHistoryAdapter.setUnsentMessages(chatManager.getAllUnsent());
    }
 else {
      AudioManager am=(AudioManager)getSystemService(Context.AUDIO_SERVICE);
      if (am.getRingerMode() == AudioManager.RINGER_MODE_NORMAL) {
        MediaPlayer mediaPlayer=MediaPlayer.create(ChatActivity.this,R.raw.message);
        mediaPlayer.start();
      }
 else       if (am.getRingerMode() == AudioManager.RINGER_MODE_VIBRATE) {
        Vibrator v=(Vibrator)getSystemService(Context.VIBRATOR_SERVICE);
        v.vibrate(500);
      }
    }
    chatHistoryAdapter.changeCursor(chatManager.getAll());
  }
}","@Override public void onReceive(Context context,Intent intent){
  Bundle extras=intent.getExtras();
  String chatRoomString=extras.getString(""String_Node_Str"");
  String memberString=extras.getString(""String_Node_Str"");
  int messageId=-1;
  if (extras.containsKey(""String_Node_Str""))   messageId=Integer.parseInt(extras.getString(""String_Node_Str""));
  Utils.log(""String_Node_Str"" + chatRoomString + ""String_Node_Str""+ memberString);
  if (chatRoomString.equals(""String_Node_Str"" + currentChatRoom.getId()) && chatHistoryAdapter != null) {
    if (memberString.equals(""String_Node_Str"" + currentChatMember.getId())) {
      chatHistoryAdapter.setUnsentMessages(chatManager.getAllUnsent());
    }
 else     if (messageId == -1) {
      AudioManager am=(AudioManager)getSystemService(Context.AUDIO_SERVICE);
      if (am.getRingerMode() == AudioManager.RINGER_MODE_NORMAL) {
        MediaPlayer mediaPlayer=MediaPlayer.create(ChatActivity.this,R.raw.message);
        mediaPlayer.start();
      }
 else       if (am.getRingerMode() == AudioManager.RINGER_MODE_VIBRATE) {
        Vibrator v=(Vibrator)getSystemService(Context.VIBRATOR_SERVICE);
        v.vibrate(500);
      }
    }
    chatHistoryAdapter.changeCursor(chatManager.getAll());
  }
}",0.9327046720960136
161590,"/** 
 * Prompt the user to type in a name for the new chat room
 */
private void newChatRoom(){
  final EditText input=new EditText(this);
  new AlertDialog.Builder(this).setTitle(""String_Node_Str"").setMessage(""String_Node_Str"").setView(input).setPositiveButton(android.R.string.ok,new DialogInterface.OnClickListener(){
    public void onClick(    DialogInterface dialog,    int whichButton){
      String value=input.getText().toString();
      String randId=Integer.toHexString((int)(Math.random() * 4096));
      createOrJoinChatRoom(randId + ""String_Node_Str"" + value);
    }
  }
).setNegativeButton(android.R.string.cancel,null).show();
}","/** 
 * Prompt the user to type in a name for the new chat room
 */
private void newChatRoom(){
  final EditText input=new EditText(this);
  new AlertDialog.Builder(this).setTitle(R.string.new_chat_room).setMessage(R.string.new_chat_room_desc).setView(input).setPositiveButton(android.R.string.ok,new DialogInterface.OnClickListener(){
    public void onClick(    DialogInterface dialog,    int whichButton){
      String value=input.getText().toString();
      String randId=Integer.toHexString((int)(Math.random() * 4096));
      createOrJoinChatRoom(randId + ""String_Node_Str"" + value);
    }
  }
).setNegativeButton(android.R.string.cancel,null).show();
}",0.9424405218726016
161591,"@SuppressWarnings(""String_Node_Str"") public void setCafeteriaId(Activity mainActivity,int cafeteriaId){
  mCafeteriaId=cafeteriaId;
  CafeteriaMenuManager cmm=new CafeteriaMenuManager(mainActivity);
  cursorCafeteriaDates=cmm.getDatesFromDb();
  mainActivity.startManagingCursor(cursorCafeteriaDates);
  for (int position=0; position < getCount(); position++) {
    cursorCafeteriaDates.moveToPosition(position);
    dates.add(cursorCafeteriaDates.getString(cursorCafeteriaDates.getColumnIndex(Const.ID_COLUMN)));
  }
  CafeteriaMenuManager.lastInserted=0;
  this.notifyDataSetChanged();
}","@SuppressWarnings(""String_Node_Str"") public void setCafeteriaId(Activity mainActivity,int cafeteriaId){
  mCafeteriaId=cafeteriaId;
  CafeteriaMenuManager cmm=new CafeteriaMenuManager(mainActivity);
  cursorCafeteriaDates=cmm.getDatesFromDb();
  mainActivity.startManagingCursor(cursorCafeteriaDates);
  for (int position=0; position < getCount(); position++) {
    cursorCafeteriaDates.moveToPosition(position);
    dates.add(cursorCafeteriaDates.getString(cursorCafeteriaDates.getColumnIndex(Const.ID_COLUMN)));
  }
  this.notifyDataSetChanged();
}",0.9657594381035997
161592,"private void bindViewChatMessage(View view,ChatMessage chatMessage){
  ViewHolder holder=(ViewHolder)view.getTag();
  holder.tvUser.setText(chatMessage.getMember().getDisplayName());
  holder.tvMessage.setText(chatMessage.getText());
  holder.tvTimestamp.setText(chatMessage.getTimestampString(mContext));
  if (holder.ivSent != null) {
    boolean sending=chatMessage.getStatus() == ChatMessage.STATUS_SENDING;
    holder.ivSent.setVisibility(sending ? View.GONE : View.VISIBLE);
    holder.pbSending.setVisibility(sending ? View.VISIBLE : View.GONE);
  }
  if (chatMessage.getMember().getLrzId().equals(""String_Node_Str"")) {
    holder.tvUser.setText(""String_Node_Str"");
    holder.tvTimestamp.setText(""String_Node_Str"");
  }
  if (mCheckedItem != null && mCheckedItem.getId() == chatMessage.getId() && mCheckedItem.getStatus() == chatMessage.getStatus()) {
    holder.layout.setBackgroundResource(R.drawable.bg_message_outgoing_selected);
  }
 else   if (holder.ivSent != null) {
    holder.layout.setBackgroundResource(R.drawable.bg_message_outgoing);
  }
}","private void bindViewChatMessage(View view,ChatMessage chatMessage){
  ViewHolder holder=(ViewHolder)view.getTag();
  holder.tvUser.setText(chatMessage.getMember().getDisplayName());
  holder.tvMessage.setText(chatMessage.getText());
  holder.tvTimestamp.setText(chatMessage.getTimestampString(mContext));
  if (holder.ivSent != null) {
    boolean sending=chatMessage.getStatus() == ChatMessage.STATUS_SENDING;
    holder.ivSent.setVisibility(sending ? View.GONE : View.VISIBLE);
    holder.pbSending.setVisibility(sending ? View.VISIBLE : View.GONE);
  }
  if (chatMessage.getMember().getLrzId().equals(""String_Node_Str"")) {
    holder.tvUser.setText(""String_Node_Str"");
    holder.tvTimestamp.setText(""String_Node_Str"");
  }
  if ((mCheckedItem != null && mCheckedItem.getId() == chatMessage.getId() && mCheckedItem.getStatus() == chatMessage.getStatus()) || (mEditedItem != null && mEditedItem.getId() == chatMessage.getId() && mEditedItem.getStatus() == chatMessage.getStatus())) {
    holder.layout.setBackgroundResource(R.drawable.bg_message_outgoing_selected);
  }
 else   if (holder.ivSent != null) {
    holder.layout.setBackgroundResource(R.drawable.bg_message_outgoing);
  }
}",0.9435304579813252
161593,"/** 
 * Download cafeteria menus from external interface (JSON)
 * @param force True to force download over normal sync period, else false
 * @throws Exception
 */
public void downloadFromExternal(Context context,boolean force) throws Exception {
  if (!force && !SyncManager.needSync(db,this,TIME_TO_SYNC)) {
    return;
  }
  cleanupDb();
  int count=Utils.dbGetTableCount(db,""String_Node_Str"");
  Cursor c=db.rawQuery(""String_Node_Str"",null);
  if (c.getCount() > 0) {
    c.close();
    return;
  }
  c.close();
  String url=""String_Node_Str"";
  JSONObject json=NetUtils.downloadJson(context,url);
  removeCache();
  db.beginTransaction();
  try {
    JSONArray menu=json.getJSONArray(""String_Node_Str"");
    for (int j=0; j < menu.length(); j++) {
      replaceIntoDb(getFromJson(menu.getJSONObject(j)));
    }
    JSONArray beilagen=json.getJSONArray(""String_Node_Str"");
    for (int j=0; j < beilagen.length(); j++) {
      replaceIntoDb(getFromJsonAddendum(beilagen.getJSONObject(j)));
    }
    db.setTransactionSuccessful();
  }
  finally {
    db.endTransaction();
  }
  SyncManager.replaceIntoDb(db,this);
  lastInserted+=Utils.dbGetTableCount(db,""String_Node_Str"") - count;
}","/** 
 * Download cafeteria menus from external interface (JSON)
 * @param force True to force download over normal sync period, else false
 * @throws Exception
 */
public void downloadFromExternal(Context context,boolean force) throws Exception {
  if (!force && !SyncManager.needSync(db,this,TIME_TO_SYNC)) {
    return;
  }
  String url=""String_Node_Str"";
  JSONObject json=NetUtils.downloadJson(context,url);
  db.beginTransaction();
  removeCache();
  try {
    JSONArray menu=json.getJSONArray(""String_Node_Str"");
    for (int j=0; j < menu.length(); j++) {
      replaceIntoDb(getFromJson(menu.getJSONObject(j)));
    }
    JSONArray beilagen=json.getJSONArray(""String_Node_Str"");
    for (int j=0; j < beilagen.length(); j++) {
      replaceIntoDb(getFromJsonAddendum(beilagen.getJSONObject(j)));
    }
    db.setTransactionSuccessful();
  }
  finally {
    db.endTransaction();
  }
  SyncManager.replaceIntoDb(db,this);
}",0.8540387340576288
161594,"/** 
 * Saves the given message into database
 */
public void replaceInto(List<ChatMessage> m){
  db.beginTransaction();
  for (  ChatMessage msg : m) {
    replaceInto(msg,false);
  }
  db.setTransactionSuccessful();
  db.endTransaction();
}","/** 
 * Saves the given message into database
 */
public void replaceInto(List<ChatMessage> m){
  ChatMember member=Utils.getSetting(mContext,Const.CHAT_MEMBER,ChatMember.class);
  db.beginTransaction();
  for (  ChatMessage msg : m) {
    replaceInto(msg,member.getId());
  }
  db.setTransactionSuccessful();
  db.endTransaction();
}",0.7951388888888888
161595,"private void sendNotification(Bundle extras){
  int chatRoomId=Integer.parseInt(extras.getString(""String_Node_Str""));
  int memberId=Integer.parseInt(extras.getString(""String_Node_Str""));
  int messageId=-1;
  if (extras.containsKey(""String_Node_Str""))   messageId=Integer.parseInt(extras.getString(""String_Node_Str""));
  Utils.logv(""String_Node_Str"" + chatRoomId + ""String_Node_Str""+ memberId+ ""String_Node_Str""+ messageId);
  ChatMember member=Utils.getSetting(this,Const.CHAT_MEMBER,ChatMember.class);
  ChatRoom chatRoom=ChatClient.getInstance(this).getChatRoom(chatRoomId);
  ChatMessageManager manager=new ChatMessageManager(this,chatRoom.getId());
  Cursor messages=manager.getNewMessages(this.getPrivateKeyFromSharedPrefs(),member,messageId);
  Intent intent=new Intent(""String_Node_Str"");
  intent.putExtras(extras);
  LocalBroadcastManager.getInstance(this).sendBroadcast(intent);
  if (ChatActivity.mCurrentOpenChatRoom != null && chatRoomId == ChatActivity.mCurrentOpenChatRoom.getId()) {
    return;
  }
  String txt=null;
  if (messages.moveToFirst()) {
    do {
      if (txt == null)       txt=messages.getString(3);
 else       txt+=""String_Node_Str"" + messages.getString(3);
    }
 while (messages.moveToNext());
  }
  Intent notificationIntent=new Intent(this,ChatActivity.class);
  notificationIntent.putExtra(Const.CURRENT_CHAT_ROOM,new Gson().toJson(chatRoom));
  if (Utils.getSettingBool(this,""String_Node_Str"",true)) {
    PendingIntent contentIntent=PendingIntent.getActivity(this,0,notificationIntent,PendingIntent.FLAG_UPDATE_CURRENT | PendingIntent.FLAG_ONE_SHOT);
    Uri sound=Uri.parse(""String_Node_Str"" + getPackageName() + ""String_Node_Str""+ R.raw.message);
    String replyLabel=getResources().getString(R.string.reply_label);
    RemoteInput remoteInput=new RemoteInput.Builder(ChatActivity.EXTRA_VOICE_REPLY).setLabel(replyLabel).build();
    NotificationCompat.Action action=new NotificationCompat.Action.Builder(R.drawable.ic_reply,getString(R.string.reply_label),contentIntent).addRemoteInput(remoteInput).build();
    Notification notification=new NotificationCompat.Builder(this).setSmallIcon(R.drawable.tum_logo_notification).setContentTitle(chatRoom.getName().substring(4)).setStyle(new NotificationCompat.BigTextStyle().bigText(txt)).setContentText(txt).setContentIntent(contentIntent).setDefaults(Notification.DEFAULT_VIBRATE).setLights(0xff0000ff,500,500).setSound(sound).setAutoCancel(true).extend(new NotificationCompat.WearableExtender().addAction(action)).build();
    NotificationManager mNotificationManager=(NotificationManager)this.getSystemService(Context.NOTIFICATION_SERVICE);
    mNotificationManager.notify(chatRoomId << 4 + NOTIFICATION_ID,notification);
  }
}","private void sendNotification(Bundle extras){
  int chatRoomId=Integer.parseInt(extras.getString(""String_Node_Str""));
  int memberId=Integer.parseInt(extras.getString(""String_Node_Str""));
  int messageId=-1;
  if (extras.containsKey(""String_Node_Str""))   messageId=Integer.parseInt(extras.getString(""String_Node_Str""));
  Utils.logv(""String_Node_Str"" + chatRoomId + ""String_Node_Str""+ memberId+ ""String_Node_Str""+ messageId);
  ChatMember member=Utils.getSetting(this,Const.CHAT_MEMBER,ChatMember.class);
  ChatRoom chatRoom=ChatClient.getInstance(this).getChatRoom(chatRoomId);
  ChatMessageManager manager=new ChatMessageManager(this,chatRoom.getId());
  Cursor messages=manager.getNewMessages(this.getPrivateKeyFromSharedPrefs(),member,messageId);
  Intent intent=new Intent(""String_Node_Str"");
  intent.putExtras(extras);
  LocalBroadcastManager.getInstance(this).sendBroadcast(intent);
  if (ChatActivity.mCurrentOpenChatRoom != null && chatRoomId == ChatActivity.mCurrentOpenChatRoom.getId()) {
    return;
  }
  String txt=null;
  if (messages.moveToFirst()) {
    do {
      if (txt == null)       txt=messages.getString(3);
 else       txt+=""String_Node_Str"" + messages.getString(3);
    }
 while (messages.moveToNext());
  }
  Intent notificationIntent=new Intent(this,ChatActivity.class);
  notificationIntent.putExtra(Const.CURRENT_CHAT_ROOM,new Gson().toJson(chatRoom));
  if (Utils.getSettingBool(this,""String_Node_Str"",true) && messageId == -1) {
    PendingIntent contentIntent=PendingIntent.getActivity(this,0,notificationIntent,PendingIntent.FLAG_UPDATE_CURRENT | PendingIntent.FLAG_ONE_SHOT);
    Uri sound=Uri.parse(""String_Node_Str"" + getPackageName() + ""String_Node_Str""+ R.raw.message);
    String replyLabel=getResources().getString(R.string.reply_label);
    RemoteInput remoteInput=new RemoteInput.Builder(ChatActivity.EXTRA_VOICE_REPLY).setLabel(replyLabel).build();
    NotificationCompat.Action action=new NotificationCompat.Action.Builder(R.drawable.ic_reply,getString(R.string.reply_label),contentIntent).addRemoteInput(remoteInput).build();
    Notification notification=new NotificationCompat.Builder(this).setSmallIcon(R.drawable.tum_logo_notification).setContentTitle(chatRoom.getName().substring(4)).setStyle(new NotificationCompat.BigTextStyle().bigText(txt)).setContentText(txt).setContentIntent(contentIntent).setDefaults(Notification.DEFAULT_VIBRATE).setLights(0xff0000ff,500,500).setSound(sound).setAutoCancel(true).extend(new NotificationCompat.WearableExtender().addAction(action)).build();
    NotificationManager mNotificationManager=(NotificationManager)this.getSystemService(Context.NOTIFICATION_SERVICE);
    mNotificationManager.notify(chatRoomId << 4 + NOTIFICATION_ID,notification);
  }
}",0.9965195090675948
161596,"@Override protected void onHandleIntent(Intent intent){
  ArrayList<ChatMessage> unsentMsg=ChatMessageManager.getAllUnsentUpdated(this);
  if (unsentMsg.size() == 0)   return;
  RSASigner signer=new RSASigner(getPrivateKeyFromSharedPrefs());
  int numberOfAttempts=0;
  while (numberOfAttempts < 5) {
    try {
      for (      ChatMessage message : unsentMsg) {
        String signature=signer.sign(message.getText());
        message.setSignature(signature);
        ChatMessage createdMessage;
        if (message.getId() == 0) {
          createdMessage=ChatClient.getInstance(this).sendMessage(message.getRoom(),message);
          Utils.logv(""String_Node_Str"" + createdMessage.getText());
        }
 else {
          createdMessage=ChatClient.getInstance(this).updateMessage(message.getRoom(),message);
          Utils.logv(""String_Node_Str"" + createdMessage.getText());
        }
        createdMessage.setStatus(ChatMessage.STATUS_SENT);
        ChatMessageManager messageManager=new ChatMessageManager(this,message.getRoom());
        messageManager.replaceInto(createdMessage,true);
        messageManager.removeFromUnsent(message);
        Intent i=new Intent(""String_Node_Str"");
        Bundle extras=new Bundle();
        extras.putString(""String_Node_Str"",""String_Node_Str"" + message.getRoom());
        extras.putString(""String_Node_Str"",""String_Node_Str"" + message.getMember().getId());
        i.putExtras(extras);
        LocalBroadcastManager.getInstance(this).sendBroadcast(i);
      }
      return;
    }
 catch (    RetrofitError e) {
      Utils.log(e);
      numberOfAttempts++;
    }
    try {
      Thread.sleep(5000);
    }
 catch (    InterruptedException e) {
      e.printStackTrace();
    }
  }
}","@Override protected void onHandleIntent(Intent intent){
  ArrayList<ChatMessage> unsentMsg=ChatMessageManager.getAllUnsentUpdated(this);
  if (unsentMsg.size() == 0)   return;
  RSASigner signer=new RSASigner(getPrivateKeyFromSharedPrefs());
  int numberOfAttempts=0;
  while (numberOfAttempts < 5) {
    try {
      for (      ChatMessage message : unsentMsg) {
        String signature=signer.sign(message.getText());
        message.setSignature(signature);
        ChatMessage createdMessage;
        if (message.getId() == 0) {
          createdMessage=ChatClient.getInstance(this).sendMessage(message.getRoom(),message);
          Utils.logv(""String_Node_Str"" + createdMessage.getText());
        }
 else {
          createdMessage=ChatClient.getInstance(this).updateMessage(message.getRoom(),message);
          Utils.logv(""String_Node_Str"" + createdMessage.getText());
        }
        createdMessage.setStatus(ChatMessage.STATUS_SENT);
        ChatMessageManager messageManager=new ChatMessageManager(this,message.getRoom());
        messageManager.replaceInto(createdMessage,message.getMember().getId());
        messageManager.removeFromUnsent(message);
        Intent i=new Intent(""String_Node_Str"");
        Bundle extras=new Bundle();
        extras.putString(""String_Node_Str"",""String_Node_Str"" + message.getRoom());
        extras.putString(""String_Node_Str"",""String_Node_Str"" + message.getMember().getId());
        i.putExtras(extras);
        LocalBroadcastManager.getInstance(this).sendBroadcast(i);
      }
      return;
    }
 catch (    RetrofitError e) {
      Utils.log(e);
      numberOfAttempts++;
    }
    try {
      Thread.sleep(5000);
    }
 catch (    InterruptedException e) {
      e.printStackTrace();
    }
  }
}",0.9910842680471672
161597,"@Override public Intent getIntent(){
  return new Intent(mContext,ChatRoomsActivity.class);
}","@Override public Intent getIntent(){
  Bundle bundle=new Bundle();
  final Intent intent=new Intent(mContext,ChatActivity.class);
  ChatRoom currentChatRoom=new ChatRoom(mRoomIdString);
  currentChatRoom.setId(mRoomId);
  intent.putExtra(Const.CURRENT_CHAT_ROOM,new Gson().toJson(currentChatRoom));
  intent.putExtra(Const.CURRENT_CHAT_MEMBER,new Gson().toJson(mMember));
  intent.putExtras(bundle);
  return intent;
}",0.3170254403131115
161598,"/** 
 * Sets the information needed to build the card
 * @param roomName Name of the chat room
 * @param roomId Id of the chat room
 */
public void setChatRoom(String roomName,int roomId){
  mRoomName=roomName;
  mRoomName=mRoomName.replaceAll(""String_Node_Str"",""String_Node_Str"");
  mRoomName=mRoomName.replaceAll(""String_Node_Str"",""String_Node_Str"");
  mRoomName=mRoomName.replaceAll(""String_Node_Str"",""String_Node_Str"");
  mRoomName=mRoomName.trim();
  manager=new ChatMessageManager(mContext,roomId);
  mUnread=manager.getLastUnread();
}","/** 
 * Sets the information needed to build the card
 * @param roomName Name of the chat room
 * @param roomId Id of the chat room
 */
public void setChatRoom(String roomName,int roomId,String roomIdString,ChatMember member){
  mRoomName=roomName;
  mRoomName=mRoomName.replaceAll(""String_Node_Str"",""String_Node_Str"");
  mRoomName=mRoomName.replaceAll(""String_Node_Str"",""String_Node_Str"");
  mRoomName=mRoomName.replaceAll(""String_Node_Str"",""String_Node_Str"");
  mRoomName=mRoomName.trim();
  manager=new ChatMessageManager(mContext,roomId);
  mUnread=manager.getLastUnread();
  mRoomIdString=roomIdString;
  mRoomId=roomId;
  mMember=member;
}",0.9123102866779088
161599,"public Cursor getNewMessages(PrivateKey pk,ChatMember member,int messageId){
  ArrayList<ChatMessage> messages;
  if (messageId == -1)   messages=ChatClient.getInstance(mContext).getNewMessages(mChatRoom,new ChatVerification(pk,member));
 else   messages=ChatClient.getInstance(mContext).getMessages(mChatRoom,messageId + 1,new ChatVerification(pk,member));
  replaceInto(messages);
  return getUnread();
}","public Cursor getNewMessages(PrivateKey pk,ChatMember member,int messageId){
  ArrayList<ChatMessage> messages;
  if (messageId == -1)   messages=ChatClient.getInstance(mContext).getNewMessages(mChatRoom,new ChatVerification(pk,member));
 else   messages=ChatClient.getInstance(mContext).getMessages(mChatRoom,messageId,new ChatVerification(pk,member));
  replaceInto(messages);
  return getUnread();
}",0.995049504950495
161600,"@Override public void onRequestCard(Context context){
  ChatRoomManager manager=new ChatRoomManager(context);
  new ChatMessageManager(context,0);
  if (Utils.getSettingBool(context,Const.AUTO_JOIN_NEW_ROOMS,false)) {
    ArrayList<String> newRooms=manager.getNewUnjoined();
    for (    String roomId : newRooms) {
      try {
        ChatRoom currentChatRoom=new ChatRoom(roomId);
        currentChatRoom=ChatClient.getInstance(context).createGroup(currentChatRoom);
        manager.join(currentChatRoom);
      }
 catch (      RetrofitError e) {
        Utils.log(e);
      }
    }
  }
  Cursor cur=manager.getUnreadRooms();
  if (cur.moveToFirst()) {
    do {
      ChatMessagesCard card=new ChatMessagesCard(context);
      card.setChatRoom(cur.getString(0),cur.getInt(1));
      card.apply();
    }
 while (cur.moveToNext());
  }
  cur.close();
}","@Override public void onRequestCard(Context context){
  ChatRoomManager manager=new ChatRoomManager(context);
  new ChatMessageManager(context,0);
  ChatMember member;
  try {
    if (Utils.getSettingBool(context,Const.AUTO_JOIN_NEW_ROOMS,false)) {
      ArrayList<String> newRooms=manager.getNewUnjoined();
      for (      String roomId : newRooms) {
        try {
          ChatRoom currentChatRoom=new ChatRoom(roomId);
          currentChatRoom=ChatClient.getInstance(context).createGroup(currentChatRoom);
          manager.join(currentChatRoom);
        }
 catch (        RetrofitError e) {
          Utils.log(e);
        }
      }
    }
    String lrzId=Utils.getSetting(context,Const.LRZ_ID,""String_Node_Str"");
    member=ChatClient.getInstance(context).getMember(lrzId);
    if (member == null || member.getLrzId() == null) {
      return;
    }
  }
 catch (  RetrofitError e) {
    Utils.log(e);
    return;
  }
  Cursor cur=manager.getUnreadRooms();
  if (cur.moveToFirst()) {
    do {
      ChatMessagesCard card=new ChatMessagesCard(context);
      card.setChatRoom(cur.getString(0),cur.getInt(1),cur.getString(2) + ""String_Node_Str"" + cur.getString(0),member);
      card.apply();
    }
 while (cur.moveToNext());
  }
  cur.close();
}",0.7773549000951475
161601,"@Override public void run(){
  adapter.changeCursor(newCursor);
  Utils.showToast(ChatRoomsActivity.this,R.string.joined_chat_room);
}","public void run(){
  GooglePlayServicesUtil.getErrorDialog(resultCode,ChatRoomsActivity.this,PLAY_SERVICES_RESOLUTION_REQUEST).show();
}",0.4740740740740741
161602,"/** 
 * Check the device to make sure it has the Google Play Services APK. If it doesn't, display a dialog that allows users to download the APK from the Google Play Store or enable it in the device's system settings.
 */
private boolean checkPlayServices(){
  int resultCode=GooglePlayServicesUtil.isGooglePlayServicesAvailable(this);
  if (resultCode != ConnectionResult.SUCCESS) {
    if (GooglePlayServicesUtil.isUserRecoverableError(resultCode)) {
      try {
        GooglePlayServicesUtil.getErrorDialog(resultCode,this,PLAY_SERVICES_RESOLUTION_REQUEST).show();
      }
 catch (      Exception e) {
        Utils.log(e);
        return false;
      }
    }
 else {
      Utils.log(""String_Node_Str"");
      finish();
    }
    return false;
  }
  return true;
}","/** 
 * Check the device to make sure it has the Google Play Services APK. If it doesn't, display a dialog that allows users to download the APK from the Google Play Store or enable it in the device's system settings.
 */
private boolean checkPlayServices(){
  final int resultCode=GooglePlayServicesUtil.isGooglePlayServicesAvailable(this);
  if (resultCode != ConnectionResult.SUCCESS) {
    if (GooglePlayServicesUtil.isUserRecoverableError(resultCode)) {
      this.runOnUiThread(new Runnable(){
        public void run(){
          GooglePlayServicesUtil.getErrorDialog(resultCode,ChatRoomsActivity.this,PLAY_SERVICES_RESOLUTION_REQUEST).show();
        }
      }
);
    }
 else {
      Utils.log(""String_Node_Str"");
      finish();
    }
    return false;
  }
  return true;
}",0.8877419354838709
161603,"/** 
 * Sets the actionbar title to the current chat room
 */
private void getIntentData(){
  Bundle extras=getIntent().getExtras();
  currentChatRoom=new Gson().fromJson(extras.getString(Const.CURRENT_CHAT_ROOM),ChatRoom.class);
  currentChatMember=new Gson().fromJson(extras.getString(Const.CURRENT_CHAT_MEMBER),ChatMember.class);
  getSupportActionBar().setTitle(currentChatRoom.getName().substring(4));
  CharSequence message=getMessageText(getIntent());
  if (message != null) {
    sendMessage(message.toString());
  }
}","/** 
 * Sets the actionbar title to the current chat room
 */
private void getIntentData(){
  Bundle extras=getIntent().getExtras();
  currentChatRoom=new Gson().fromJson(extras.getString(Const.CURRENT_CHAT_ROOM),ChatRoom.class);
  currentChatMember=new Gson().fromJson(extras.getString(Const.CURRENT_CHAT_MEMBER),ChatMember.class);
  getSupportActionBar().setTitle(currentChatRoom.getName().substring(4));
  chatManager=new ChatMessageManager(this,currentChatRoom.getId());
  CharSequence message=getMessageText(getIntent());
  if (message != null) {
    sendMessage(message.toString());
  }
}",0.9392857142857144
161604,"@Override public void onReceive(Context context,Intent intent){
  Bundle extras=intent.getExtras();
  String chatRoomString=extras.getString(""String_Node_Str"");
  if (chatRoomString.equals(""String_Node_Str"" + currentChatRoom.getId())) {
    if (extras.getBoolean(""String_Node_Str"",false)) {
      chatHistoryAdapter.setUnsentMessages(chatManager.getAllUnsent());
    }
 else {
      AudioManager am=(AudioManager)getSystemService(Context.AUDIO_SERVICE);
      if (am.getRingerMode() == AudioManager.RINGER_MODE_NORMAL) {
        MediaPlayer mediaPlayer=MediaPlayer.create(ChatActivity.this,R.raw.message);
        mediaPlayer.start();
      }
 else       if (am.getRingerMode() == AudioManager.RINGER_MODE_VIBRATE) {
        Vibrator v=(Vibrator)getSystemService(Context.VIBRATOR_SERVICE);
        v.vibrate(500);
      }
    }
    chatHistoryAdapter.changeCursor(chatManager.getAll());
  }
}","@Override public void onReceive(Context context,Intent intent){
  Bundle extras=intent.getExtras();
  String chatRoomString=extras.getString(""String_Node_Str"");
  if (chatRoomString.equals(""String_Node_Str"" + currentChatRoom.getId()) && chatHistoryAdapter != null) {
    if (extras.getBoolean(""String_Node_Str"",false)) {
      chatHistoryAdapter.setUnsentMessages(chatManager.getAllUnsent());
    }
 else {
      AudioManager am=(AudioManager)getSystemService(Context.AUDIO_SERVICE);
      if (am.getRingerMode() == AudioManager.RINGER_MODE_NORMAL) {
        MediaPlayer mediaPlayer=MediaPlayer.create(ChatActivity.this,R.raw.message);
        mediaPlayer.start();
      }
 else       if (am.getRingerMode() == AudioManager.RINGER_MODE_VIBRATE) {
        Vibrator v=(Vibrator)getSystemService(Context.VIBRATOR_SERVICE);
        v.vibrate(500);
      }
    }
    chatHistoryAdapter.changeCursor(chatManager.getAll());
  }
}",0.9834619625137816
161605,"@Override protected void onResume(){
  super.onResume();
  getNextHistoryFromServer();
  mCurrentOpenChatRoom=currentChatRoom;
  chatManager=new ChatMessageManager(this,currentChatRoom.getId());
}","@Override protected void onResume(){
  super.onResume();
  getNextHistoryFromServer();
  mCurrentOpenChatRoom=currentChatRoom;
}",0.7901234567901234
161606,"/** 
 * Translates room title to Geo HINT: Don't call from UI thread
 * @param loc Room title
 * @return Location or null on failure
 */
public Geo roomLocationStringToGeo(String loc){
  TUMRoomFinderRequest requestHandler=new TUMRoomFinderRequest();
  loc=loc.substring(0,loc.indexOf('(')).trim();
  ArrayList<HashMap<String,String>> request=requestHandler.fetchRooms(loc);
  if (request.size() > 0) {
    String room=request.get(0).get(TUMRoomFinderRequest.KEY_ARCHITECT_NUMBER);
    return requestHandler.fetchCoordinates(room);
  }
  return null;
}","/** 
 * Translates room title to Geo HINT: Don't call from UI thread
 * @param loc Room title
 * @return Location or null on failure
 */
public Geo roomLocationStringToGeo(String loc){
  TUMRoomFinderRequest requestHandler=new TUMRoomFinderRequest();
  if (loc.contains(""String_Node_Str""))   loc=loc.substring(0,loc.indexOf('(')).trim();
  ArrayList<HashMap<String,String>> request=requestHandler.fetchRooms(loc);
  if (request.size() > 0) {
    String room=request.get(0).get(TUMRoomFinderRequest.KEY_ARCHITECT_NUMBER);
    return requestHandler.fetchCoordinates(room);
  }
  return null;
}",0.9658792650918636
161607,"@Override protected Cursor onLoadInBackground(Integer... arg){
  LecturesSearchRowSet lecturesList=requestHandler.fetch();
  if (lecturesList != null) {
    List<LecturesSearchRow> lectures=lecturesList.getLehrveranstaltungen();
    manager.replaceInto(lectures);
  }
  populateCurrentChatMember();
  try {
    List<ChatRoom> rooms=ChatClient.getInstance(this).getMemberRooms(currentChatMember.getId(),new ChatVerification(currentPrivateKey,currentChatMember));
    manager.replaceIntoRooms(rooms);
    return manager.getAllByStatus(arg[0]);
  }
 catch (  RetrofitError e) {
    Utils.log(e);
    return null;
  }
}","@Override protected Cursor onLoadInBackground(Void... arg){
  if (!firstLoad) {
    LecturesSearchRowSet lecturesList=requestHandler.fetch();
    if (lecturesList != null) {
      List<LecturesSearchRow> lectures=lecturesList.getLehrveranstaltungen();
      manager.replaceInto(lectures);
    }
  }
  populateCurrentChatMember();
  if (!firstLoad) {
    try {
      List<ChatRoom> rooms=ChatClient.getInstance(this).getMemberRooms(currentChatMember.getId(),new ChatVerification(currentPrivateKey,currentChatMember));
      manager.replaceIntoRooms(rooms);
    }
 catch (    RetrofitError e) {
      Utils.log(e);
      return null;
    }
  }
  firstLoad=false;
  return manager.getAllByStatus(mCurrentMode);
}",0.7960725075528701
161608,"@Override public void onCreate(Bundle savedInstanceState){
  super.onCreate(savedInstanceState);
  lvMyLecturesList=(StickyListHeadersListView)findViewById(R.id.lvMyLecturesList);
  lvMyLecturesList.setOnItemClickListener(this);
  manager=new ChatRoomManager(this);
  requestHandler=new TUMOnlineRequest<LecturesSearchRowSet>(TUMOnlineConst.LECTURES_PERSONAL,this,true);
  final ActionBar actionBar=getSupportActionBar();
  actionBar.setNavigationMode(ActionBar.NAVIGATION_MODE_TABS);
  ActionBar.TabListener tabListener=new ActionBar.TabListener(){
    public void onTabSelected(    ActionBar.Tab tab,    FragmentTransaction ft){
      mCurrentMode=1 - tab.getPosition();
      startLoading(mCurrentMode);
    }
    public void onTabUnselected(    ActionBar.Tab tab,    FragmentTransaction ft){
    }
    public void onTabReselected(    ActionBar.Tab tab,    FragmentTransaction ft){
    }
  }
;
  actionBar.addTab(actionBar.newTab().setText(R.string.joined).setTabListener(tabListener));
  actionBar.addTab(actionBar.newTab().setText(R.string.not_joined).setTabListener(tabListener));
}","@Override public void onCreate(Bundle savedInstanceState){
  super.onCreate(savedInstanceState);
  lvMyLecturesList=(StickyListHeadersListView)findViewById(R.id.lvMyLecturesList);
  lvMyLecturesList.setOnItemClickListener(this);
  manager=new ChatRoomManager(this);
  requestHandler=new TUMOnlineRequest<LecturesSearchRowSet>(TUMOnlineConst.LECTURES_PERSONAL,this,true);
  final ActionBar actionBar=getSupportActionBar();
  actionBar.setNavigationMode(ActionBar.NAVIGATION_MODE_TABS);
  ActionBar.TabListener tabListener=new ActionBar.TabListener(){
    public void onTabSelected(    ActionBar.Tab tab,    FragmentTransaction ft){
      mCurrentMode=1 - tab.getPosition();
      firstLoad=true;
      startLoading();
    }
    public void onTabUnselected(    ActionBar.Tab tab,    FragmentTransaction ft){
    }
    public void onTabReselected(    ActionBar.Tab tab,    FragmentTransaction ft){
    }
  }
;
  actionBar.addTab(actionBar.newTab().setText(R.string.joined).setTabListener(tabListener));
  actionBar.addTab(actionBar.newTab().setText(R.string.not_joined).setTabListener(tabListener));
}",0.9844464775846294
161609,"public void onTabSelected(ActionBar.Tab tab,FragmentTransaction ft){
  mCurrentMode=1 - tab.getPosition();
  startLoading(mCurrentMode);
}","public void onTabSelected(ActionBar.Tab tab,FragmentTransaction ft){
  mCurrentMode=1 - tab.getPosition();
  firstLoad=true;
  startLoading();
}",0.8936170212765957
161610,"@Override public long getHeaderId(int i){
  Cursor item=(Cursor)getItem(i);
  String semesterId=item.getString(ChatRoomManager.COL_SEMESTER_ID);
  if (!filters.contains(semesterId)) {
    filters.add(semesterId);
  }
  return filters.indexOf(semesterId);
}","@Override public long getHeaderId(int i){
  Cursor item=(Cursor)getItem(i);
  String semester=item.getString(ChatRoomManager.COL_SEMESTER);
  if (!filters.contains(semester)) {
    filters.add(semester);
  }
  return filters.indexOf(semester);
}",0.9780439121756488
161611,"/** 
 * this function allows us to import all lecture items from TUMOnline
 */
void importLecturesFromTUMOnline(){
  TUMOnlineRequest<LecturesSearchRowSet> requestHandler=new TUMOnlineRequest<LecturesSearchRowSet>(TUMOnlineConst.LECTURES_PERSONAL,mContext);
  if (!shouldRefresh(requestHandler.getRequestURL()))   return;
  requestHandler.fetch();
}","/** 
 * this function allows us to import all lecture items from TUMOnline
 */
void importLecturesFromTUMOnline(){
  TUMOnlineRequest<LecturesSearchRowSet> requestHandler=new TUMOnlineRequest<LecturesSearchRowSet>(TUMOnlineConst.LECTURES_PERSONAL,mContext);
  if (!shouldRefresh(requestHandler.getRequestURL()))   return;
  LecturesSearchRowSet lecturesList=requestHandler.fetch();
  List<LecturesSearchRow> lectures=lecturesList.getLehrveranstaltungen();
  ChatRoomManager manager=new ChatRoomManager(mContext);
  manager.replaceInto(lectures);
}",0.7790178571428571
161612,"/** 
 * Saves the given chat rooms into database
 */
public void replaceIntoRooms(List<ChatRoom> rooms){
  for (  ChatRoom room : rooms) {
    String roomName=room.getName();
    String semester=""String_Node_Str"";
    if (roomName.contains(""String_Node_Str"")) {
      semester=roomName.substring(0,3);
      roomName=roomName.substring(4);
    }
    Cursor cur=db.rawQuery(""String_Node_Str"",new String[]{roomName,semester});
    cur.moveToFirst();
    if (cur.getCount() >= 1) {
      db.execSQL(""String_Node_Str"",new String[]{""String_Node_Str"" + room.getId(),roomName,semester});
    }
 else {
      db.execSQL(""String_Node_Str"" + ""String_Node_Str"",new String[]{roomName,semester});
    }
  }
}","/** 
 * Saves the given chat rooms into database
 */
public void replaceIntoRooms(List<ChatRoom> rooms){
  for (  ChatRoom room : rooms) {
    String roomName=room.getName();
    String semester=""String_Node_Str"";
    if (roomName.contains(""String_Node_Str"")) {
      semester=roomName.substring(0,3);
      roomName=roomName.substring(4);
    }
    Cursor cur=db.rawQuery(""String_Node_Str"",new String[]{roomName,semester});
    cur.moveToFirst();
    if (cur.getCount() >= 1) {
      db.execSQL(""String_Node_Str"",new String[]{""String_Node_Str"" + room.getId(),roomName,semester});
    }
 else {
      db.execSQL(""String_Node_Str"" + ""String_Node_Str"",new String[]{""String_Node_Str"" + room.getId(),roomName,semester});
    }
  }
}",0.9768095572733662
161613,"/** 
 * Setup action bar navigation (to switch between cafeterias)
 */
@Override protected void onStart(){
  super.onStart();
  mCafeterias=new LocationManager(this).getCafeterias();
  int selIndex=-1;
  for (int i=0; i < mCafeterias.size(); i++) {
    Cafeteria c=mCafeterias.get(i);
    if (mCafeteriaId == -1 || mCafeteriaId == c.id) {
      mCafeteriaId=c.id;
      selIndex=i;
      break;
    }
  }
  if (mCafeterias.size() == 0) {
    showErrorLayout();
    return;
  }
  ArrayAdapter adapterCafeterias=new ArrayAdapter<Cafeteria>(this,R.layout.simple_spinner_item_actionbar,mCafeterias){
    final LayoutInflater inflater=(LayoutInflater)getContext().getSystemService(LAYOUT_INFLATER_SERVICE);
    @Override public View getDropDownView(    int position,    View convertView,    ViewGroup parent){
      View v=inflater.inflate(R.layout.simple_spinner_dropdown_item_actionbar,parent,false);
      Cafeteria c=getItem(position);
      TextView name=(TextView)v.findViewById(android.R.id.text1);
      name.setText(c.name);
      TextView address=(TextView)v.findViewById(android.R.id.text2);
      address.setText(c.address);
      TextView dist=(TextView)v.findViewById(R.id.distance);
      dist.setText(Utils.formatDist(c.distance));
      return v;
    }
  }
;
  getSupportActionBar().setNavigationMode(ActionBar.NAVIGATION_MODE_LIST);
  getSupportActionBar().setListNavigationCallbacks(adapterCafeterias,this);
  if (selIndex > -1)   getSupportActionBar().setSelectedNavigationItem(selIndex);
}","/** 
 * Setup action bar navigation (to switch between cafeterias)
 */
@Override protected void onStart(){
  super.onStart();
  mCafeterias=new LocationManager(this).getCafeterias();
  if (mCafeterias.size() == 0) {
    if (!NetUtils.isConnected(this)) {
      showNoInternetLayout();
    }
 else {
      showErrorLayout();
    }
    return;
  }
  int selIndex=-1;
  for (int i=0; i < mCafeterias.size(); i++) {
    Cafeteria c=mCafeterias.get(i);
    if (mCafeteriaId == -1 || mCafeteriaId == c.id) {
      mCafeteriaId=c.id;
      selIndex=i;
      break;
    }
  }
  ArrayAdapter adapterCafeterias=new ArrayAdapter<Cafeteria>(this,R.layout.simple_spinner_item_actionbar,mCafeterias){
    final LayoutInflater inflater=(LayoutInflater)getContext().getSystemService(LAYOUT_INFLATER_SERVICE);
    @Override public View getDropDownView(    int position,    View convertView,    ViewGroup parent){
      View v=inflater.inflate(R.layout.simple_spinner_dropdown_item_actionbar,parent,false);
      Cafeteria c=getItem(position);
      TextView name=(TextView)v.findViewById(android.R.id.text1);
      name.setText(c.name);
      TextView address=(TextView)v.findViewById(android.R.id.text2);
      address.setText(c.address);
      TextView dist=(TextView)v.findViewById(R.id.distance);
      dist.setText(Utils.formatDist(c.distance));
      return v;
    }
  }
;
  getSupportActionBar().setNavigationMode(ActionBar.NAVIGATION_MODE_LIST);
  getSupportActionBar().setListNavigationCallbacks(adapterCafeterias,this);
  if (selIndex > -1)   getSupportActionBar().setSelectedNavigationItem(selIndex);
}",0.9242179941954208
161614,"@Override protected Cursor onLoadInBackground(Void... arg){
  if (!firstLoad) {
    LecturesSearchRowSet lecturesList=requestHandler.fetch();
    if (lecturesList != null) {
      List<LecturesSearchRow> lectures=lecturesList.getLehrveranstaltungen();
      manager.replaceInto(lectures);
    }
  }
  populateCurrentChatMember();
  if (!firstLoad) {
    try {
      List<ChatRoom> rooms=ChatClient.getInstance(this).getMemberRooms(currentChatMember.getId(),new ChatVerification(currentPrivateKey,currentChatMember));
      manager.replaceIntoRooms(rooms);
    }
 catch (    RetrofitError e) {
      Utils.log(e);
      return null;
    }
  }
  firstLoad=false;
  return manager.getAllByStatus(mCurrentMode);
}","@Override protected Cursor onLoadInBackground(Void... arg){
  if (!firstLoad) {
    LecturesSearchRowSet lecturesList=requestHandler.fetch();
    if (lecturesList != null) {
      List<LecturesSearchRow> lectures=lecturesList.getLehrveranstaltungen();
      manager.replaceInto(lectures);
    }
  }
  populateCurrentChatMember();
  if (!firstLoad && currentChatMember != null) {
    try {
      List<ChatRoom> rooms=ChatClient.getInstance(this).getMemberRooms(currentChatMember.getId(),new ChatVerification(currentPrivateKey,currentChatMember));
      manager.replaceIntoRooms(rooms);
    }
 catch (    RetrofitError e) {
      Utils.log(e);
      return null;
    }
  }
  firstLoad=false;
  return manager.getAllByStatus(mCurrentMode);
}",0.9799585348997928
161615,"@Override protected void onStart(){
  super.onStart();
  nm=new NewsManager(this);
  Cursor cursor=nm.getAllFromDb(this);
  if (cursor.getCount() > 0) {
    NewsAdapter adapter=new NewsAdapter(this,cursor);
    lv=(ListView)findViewById(R.id.activity_news_list_view);
    lv.setOnItemClickListener(this);
    lv.setDividerHeight(0);
    lv.setAdapter(adapter);
    lv.setSelection(nm.getTodayIndex());
    if (state != null)     lv.onRestoreInstanceState(state);
  }
 else {
    showErrorLayout();
  }
}","@Override protected void onStart(){
  super.onStart();
  nm=new NewsManager(this);
  Cursor cursor=nm.getAllFromDb(this);
  if (cursor.getCount() > 0) {
    NewsAdapter adapter=new NewsAdapter(this,cursor);
    lv=(ListView)findViewById(R.id.activity_news_list_view);
    lv.setOnItemClickListener(this);
    lv.setDividerHeight(0);
    lv.setAdapter(adapter);
    lv.setSelection(nm.getTodayIndex());
    if (state != null)     lv.onRestoreInstanceState(state);
  }
 else   if (!NetUtils.isConnected(this)) {
    showNoInternetLayout();
  }
 else {
    showErrorLayout();
  }
}",0.9306197964847364
161616,"/** 
 * Shows the stations
 * @param stationCursor Cursor with stations (name, _id)
 */
@Override protected void onSearchFinished(Cursor stationCursor){
  showLoadingEnded();
  if (stationCursor == null)   return;
  if (stationCursor.getCount() == 1 && mQuery != null) {
    stationCursor.moveToFirst();
    showStation(stationCursor.getString(0));
    return;
  }
 else   if (stationCursor.getCount() == 0) {
    if (stationCursor instanceof MatrixCursor) {
      listViewResults.setAdapter(new NoResultsAdapter(this));
      listViewResults.requestFocus();
    }
 else {
      finish();
    }
    return;
  }
  adapterStations.changeCursor(stationCursor);
  listViewResults.setAdapter(adapterStations);
  listViewResults.requestFocus();
}","/** 
 * Shows the stations
 * @param stationCursor Cursor with stations (name, _id)
 */
@Override protected void onSearchFinished(Cursor stationCursor){
  if (stationCursor == null)   return;
  showLoadingEnded();
  if (stationCursor.getCount() == 1 && mQuery != null) {
    stationCursor.moveToFirst();
    showStation(stationCursor.getString(0));
    return;
  }
 else   if (stationCursor.getCount() == 0) {
    if (stationCursor instanceof MatrixCursor) {
      listViewResults.setAdapter(new NoResultsAdapter(this));
      listViewResults.requestFocus();
    }
 else {
      finish();
    }
    return;
  }
  adapterStations.changeCursor(stationCursor);
  listViewResults.setAdapter(adapterStations);
  listViewResults.requestFocus();
}",0.3418918918918919
161617,"@Override public void onReceive(Context context,Intent intent){
  if (!intent.getAction().equals(DownloadService.BROADCAST_NAME)) {
    return;
  }
  String action=intent.getStringExtra(Const.ACTION_EXTRA);
  if (action.length() != 0) {
    Log.i(ActivityForDownloadingExternal.this.getClass().getSimpleName(),""String_Node_Str"" + action + ""String_Node_Str"");
    if (action.equals(Const.COMPLETED)) {
      showLoadingEnded();
      onStart();
    }
    if (action.equals(Const.WARNING)) {
      String message=intent.getStringExtra(Const.WARNING_MESSAGE);
      Utils.showToast(ActivityForDownloadingExternal.this,message);
      showLoadingEnded();
    }
    if (action.equals(Const.ERROR)) {
      String message=intent.getStringExtra(Const.ERROR_MESSAGE);
      showError(message);
    }
  }
}","@Override public void onReceive(Context context,Intent intent){
  if (!intent.getAction().equals(DownloadService.BROADCAST_NAME)) {
    return;
  }
  String action=intent.getStringExtra(Const.ACTION_EXTRA);
  if (action.length() != 0) {
    Utils.logv(""String_Node_Str"" + action + ""String_Node_Str"");
    if (action.equals(Const.COMPLETED)) {
      showLoadingEnded();
      onStart();
    }
    if (action.equals(Const.WARNING)) {
      String message=intent.getStringExtra(Const.WARNING_MESSAGE);
      Utils.showToast(ActivityForDownloadingExternal.this,message);
      showLoadingEnded();
    }
    if (action.equals(Const.ERROR)) {
      String message=intent.getStringExtra(Const.ERROR_MESSAGE);
      showError(message);
    }
  }
}",0.94921875
161618,"/** 
 * this function allows us to import all lecture items from TUMOnline
 */
void importLecturesFromTUMOnline(){
  TUMOnlineRequest<LecturesSearchRowSet> requestHandler=new TUMOnlineRequest<LecturesSearchRowSet>(TUMOnlineConst.LECTURES_PERSONAL,mContext);
  if (!shouldRefresh(requestHandler.getRequestURL()))   return;
  LecturesSearchRowSet lecturesList=requestHandler.fetch();
  List<LecturesSearchRow> lectures=lecturesList.getLehrveranstaltungen();
  ChatRoomManager manager=new ChatRoomManager(mContext);
  manager.replaceInto(lectures);
}","/** 
 * this function allows us to import all lecture items from TUMOnline
 */
void importLecturesFromTUMOnline(){
  TUMOnlineRequest<LecturesSearchRowSet> requestHandler=new TUMOnlineRequest<LecturesSearchRowSet>(TUMOnlineConst.LECTURES_PERSONAL,mContext);
  if (!shouldRefresh(requestHandler.getRequestURL()))   return;
  LecturesSearchRowSet lecturesList=requestHandler.fetch();
  if (lecturesList == null)   return;
  List<LecturesSearchRow> lectures=lecturesList.getLehrveranstaltungen();
  if (lectures == null)   return;
  ChatRoomManager manager=new ChatRoomManager(mContext);
  manager.replaceInto(lectures);
}",0.9382504288164666
161619,"private void download(Intent intent){
  boolean successful=true;
  String action=intent.getStringExtra(Const.ACTION_EXTRA);
  boolean force=intent.getBooleanExtra(Const.FORCE_DOWNLOAD,false);
  boolean launch=intent.getBooleanExtra(Const.APP_LAUNCHES,false);
  if (action == null) {
    return;
  }
  if (NetUtils.isConnected(this) && (launch || !NetUtils.isConnectedMobileData(this))) {
    Log.i(getClass().getSimpleName(),""String_Node_Str"" + action + ""String_Node_Str"");
    try {
      if ((action.equals(Const.DOWNLOAD_ALL_FROM_EXTERNAL))) {
        try {
          downloadNews(force);
        }
 catch (        Exception e) {
          Utils.log(e);
          successful=false;
        }
        try {
          downloadCafeterias(force);
        }
 catch (        Exception e) {
          Utils.log(e);
          successful=false;
        }
        try {
          importLocationsDefaults();
        }
 catch (        Exception e) {
          Utils.log(e);
          successful=false;
        }
        boolean isSetup=Utils.getInternalSettingBool(this,Const.EVERYTHING_SETUP,false);
        if (!isSetup) {
          CacheManager cm=new CacheManager(this);
          cm.syncCalendar();
          if (successful)           Utils.setInternalSetting(this,Const.EVERYTHING_SETUP,true);
        }
      }
 else       if ((action.equals(Const.NEWS))) {
        downloadNews(force);
      }
 else       if ((action.equals(Const.CAFETERIAS))) {
        downloadCafeterias(force);
      }
    }
 catch (    TimeoutException e) {
      Utils.log(e);
      broadcastWarning(getResources().getString(R.string.exception_timeout));
      successful=false;
    }
catch (    IOException e) {
      Utils.log(e);
      broadcastError(getResources().getString(R.string.exception_sdcard));
      successful=false;
    }
catch (    Exception e) {
      Utils.log(e,""String_Node_Str"" + action + ""String_Node_Str"");
      broadcastError(getResources().getString(R.string.exception_unknown));
      successful=false;
    }
  }
  if ((action.equals(Const.DOWNLOAD_ALL_FROM_EXTERNAL))) {
    if (successful) {
      SharedPreferences prefs=getSharedPreferences(Const.INTERNAL_PREFS,0);
      prefs.edit().putLong(LAST_UPDATE,System.currentTimeMillis()).apply();
    }
    CardManager.update(this);
    successful=true;
  }
  if (successful) {
    broadcastDownloadCompleted();
  }
  if ((action.equals(Const.DOWNLOAD_ALL_FROM_EXTERNAL))) {
    startService(new Intent(this,FillCacheService.class));
  }
}","private void download(Intent intent){
  boolean successful=true;
  String action=intent.getStringExtra(Const.ACTION_EXTRA);
  boolean force=intent.getBooleanExtra(Const.FORCE_DOWNLOAD,false);
  boolean launch=intent.getBooleanExtra(Const.APP_LAUNCHES,false);
  if (action == null) {
    return;
  }
  if (NetUtils.isConnected(this) && (launch || !NetUtils.isConnectedMobileData(this))) {
    Log.i(getClass().getSimpleName(),""String_Node_Str"" + action + ""String_Node_Str"");
    try {
      if ((action.equals(Const.DOWNLOAD_ALL_FROM_EXTERNAL))) {
        try {
          downloadNews(force);
        }
 catch (        Exception e) {
          Utils.log(e);
          successful=false;
        }
        try {
          downloadCafeterias(force);
        }
 catch (        Exception e) {
          Utils.log(e);
          successful=false;
        }
        boolean isSetup=Utils.getInternalSettingBool(this,Const.EVERYTHING_SETUP,false);
        if (!isSetup) {
          CacheManager cm=new CacheManager(this);
          cm.syncCalendar();
          if (successful)           Utils.setInternalSetting(this,Const.EVERYTHING_SETUP,true);
        }
      }
 else       if ((action.equals(Const.NEWS))) {
        downloadNews(force);
      }
 else       if ((action.equals(Const.CAFETERIAS))) {
        downloadCafeterias(force);
      }
    }
 catch (    TimeoutException e) {
      Utils.log(e);
      broadcastWarning(getResources().getString(R.string.exception_timeout));
      successful=false;
    }
catch (    IOException e) {
      Utils.log(e);
      broadcastError(getResources().getString(R.string.exception_sdcard));
      successful=false;
    }
catch (    Exception e) {
      Utils.log(e,""String_Node_Str"" + action + ""String_Node_Str"");
      broadcastError(getResources().getString(R.string.exception_unknown));
      successful=false;
    }
  }
 else {
    successful=false;
  }
  if ((action.equals(Const.DOWNLOAD_ALL_FROM_EXTERNAL))) {
    try {
      importLocationsDefaults();
    }
 catch (    Exception e) {
      Utils.log(e);
      successful=false;
    }
    if (successful) {
      SharedPreferences prefs=getSharedPreferences(Const.INTERNAL_PREFS,0);
      prefs.edit().putLong(LAST_UPDATE,System.currentTimeMillis()).apply();
    }
    CardManager.update(this);
    successful=true;
  }
  if (successful) {
    broadcastDownloadCompleted();
  }
  if ((action.equals(Const.DOWNLOAD_ALL_FROM_EXTERNAL))) {
    startService(new Intent(this,FillCacheService.class));
  }
}",0.9369731031714172
161620,"@Override public void onFetch(final String rawResponse){
  new AsyncTask<Void,Void,Boolean>(){
    @Override protected void onPreExecute(){
      showLoadingStart();
      isFetched=true;
    }
    @Override protected Boolean doInBackground(    Void... params){
      calendarManager.importKalendar(rawResponse);
      return true;
    }
    @Override protected void onPostExecute(    Boolean result){
      showLoadingEnded();
      attachSectionPagerAdapter();
      if (Build.VERSION.SDK_INT >= 14) {
        invalidateOptionsMenu();
      }
    }
  }
.execute();
}","@Override public void onFetch(final String rawResponse){
  new AsyncTask<Void,Void,Boolean>(){
    @Override protected void onPreExecute(){
      showLoadingStart();
      isFetched=true;
    }
    @Override protected Boolean doInBackground(    Void... params){
      calendarManager.importCalendar(rawResponse);
      return true;
    }
    @Override protected void onPostExecute(    Boolean result){
      showLoadingEnded();
      attachSectionPagerAdapter();
      if (Build.VERSION.SDK_INT >= 14) {
        invalidateOptionsMenu();
      }
    }
  }
.execute();
}",0.9982394366197184
161621,"@Override protected Boolean doInBackground(Void... params){
  calendarManager.importKalendar(rawResponse);
  return true;
}","@Override protected Boolean doInBackground(Void... params){
  calendarManager.importCalendar(rawResponse);
  return true;
}",0.991869918699187
161622,"@Override public void onFetch(ArrayList<HashMap<String,String>> result){
  list=(ListView)findViewById(R.id.list);
  adapter=new RoomFinderListAdapter(this,result);
  list.setAdapter(adapter);
  list.setOnItemClickListener(this);
  if (result.size() == 0) {
    showError(R.string.no_rooms_found);
  }
 else {
    showLoadingEnded();
  }
}","@Override public void onFetch(ArrayList<HashMap<String,String>> result){
  list=(ListView)findViewById(R.id.list);
  RoomFinderListAdapter adapter=new RoomFinderListAdapter(this,result);
  list.setAdapter(adapter);
  list.setOnItemClickListener(this);
  if (result.size() == 0) {
    showError(R.string.no_rooms_found);
  }
 else {
    showLoadingEnded();
  }
}",0.9342857142857144
161623,"/** 
 * Starts fetching data from TumOnline in background  {@link #onFetch(String)} gets called if data was fetched successfully.If an error occurred it is handled by  {@link ActivityForAccessingTumOnline}.
 * @param force Force reload of content
 */
void requestFetch(boolean force){
  String accessToken=PreferenceManager.getDefaultSharedPreferences(this).getString(Const.ACCESS_TOKEN,null);
  if (accessToken != null) {
    Log.i(getClass().getSimpleName(),""String_Node_Str"" + accessToken + ""String_Node_Str"");
    showLoadingStart();
    requestHandler.setForce(force);
    requestHandler.fetchInteractive(this,this);
  }
 else {
    Log.i(getClass().getSimpleName(),""String_Node_Str"");
    noTokenLayout.setVisibility(View.VISIBLE);
  }
}","/** 
 * Starts fetching data from TumOnline in background  {@link #onFetch(String)} gets called if data was fetched successfully.If an error occurred it is handled by  {@link ActivityForAccessingTumOnline}.
 * @param force Force reload of content
 */
protected void requestFetch(boolean force){
  String accessToken=PreferenceManager.getDefaultSharedPreferences(this).getString(Const.ACCESS_TOKEN,null);
  if (accessToken != null) {
    Log.i(getClass().getSimpleName(),""String_Node_Str"" + accessToken + ""String_Node_Str"");
    showLoadingStart();
    requestHandler.setForce(force);
    requestHandler.fetchInteractive(this,this);
  }
 else {
    Log.i(getClass().getSimpleName(),""String_Node_Str"");
    noTokenLayout.setVisibility(View.VISIBLE);
  }
}",0.9933155080213903
161624,"/** 
 * Download a JSON stream from a URL
 * @param url Valid URL
 * @return JSONObject
 * @throws Exception
 */
public static JSONObject downloadJson(String url) throws Exception {
  logv(""String_Node_Str"" + url);
  HttpClient httpclient=new DefaultHttpClient();
  HttpParams params=httpclient.getParams();
  HttpConnectionParams.setSoTimeout(params,Const.HTTP_TIMEOUT);
  HttpConnectionParams.setConnectionTimeout(params,Const.HTTP_TIMEOUT);
  HttpEntity entity;
  try {
    entity=httpclient.execute(new HttpGet(url)).getEntity();
  }
 catch (  Exception e) {
    throw new TimeoutException(""String_Node_Str"");
  }
  String data=""String_Node_Str"";
  if (entity != null) {
    InputStream inStream=entity.getContent();
    data=convertStreamToString(inStream);
    logv(""String_Node_Str"" + data);
    inStream.close();
  }
  return new JSONObject(data);
}","/** 
 * Download a JSON stream from a URL
 * @param url Valid URL
 * @return JSONObject
 * @throws Exception
 */
public static JSONObject downloadJson(String url) throws Exception {
  logv(""String_Node_Str"" + url);
  HttpClient httpClient=new DefaultHttpClient();
  HttpParams params=httpClient.getParams();
  HttpConnectionParams.setSoTimeout(params,Const.HTTP_TIMEOUT);
  HttpConnectionParams.setConnectionTimeout(params,Const.HTTP_TIMEOUT);
  HttpEntity entity=httpClient.execute(new HttpGet(url)).getEntity();
  String data=""String_Node_Str"";
  if (entity != null) {
    InputStream inStream=entity.getContent();
    data=convertStreamToString(inStream);
    logv(""String_Node_Str"" + data);
    inStream.close();
  }
  return new JSONObject(data);
}",0.7652173913043478
161625,"@Override public void run(){
  try {
    log(url);
    downloadFile(url,target);
    openDownloads--;
  }
 catch (  Exception e) {
    log(e,url);
  }
}","@Override public void run(){
  try {
    log(url);
    downloadFile(url,target);
  }
 catch (  Exception e) {
    log(e,url);
  }
}",0.9257950530035336
161626,"/** 
 * Download a file in a new thread
 * @param url Download location
 * @param target Target filename in local file system
 */
public static void downloadFileThread(final String url,final String target){
  openDownloads++;
  new Thread(new Runnable(){
    @Override public void run(){
      try {
        log(url);
        downloadFile(url,target);
        openDownloads--;
      }
 catch (      Exception e) {
        log(e,url);
      }
    }
  }
).start();
}","/** 
 * Download a file in a new thread
 * @param url Download location
 * @param target Target filename in local file system
 */
public static void downloadFileThread(final String url,final String target){
  new Thread(new Runnable(){
    @Override public void run(){
      try {
        log(url);
        downloadFile(url,target);
      }
 catch (      Exception e) {
        log(e,url);
      }
    }
  }
).start();
}",0.9502262443438914
161627,"/** 
 * Downloads an image synchronously from the given url
 * @param url Image url
 * @return Downloaded image as {@link Bitmap}
 */
public static Bitmap downloadImage(final String url){
  openDownloads++;
  Bitmap sourceImage=null;
  try {
    log(url);
    InputStream is=downloadFileStream(url);
    try {
      sourceImage=BitmapFactory.decodeStream(is);
    }
 catch (    Exception e) {
      Utils.log(e);
    }
 finally {
      is.close();
      openDownloads--;
    }
  }
 catch (  Exception e) {
    log(e,url);
  }
  return sourceImage;
}","/** 
 * Downloads an image synchronously from the given url
 * @param url Image url
 * @return Downloaded image as {@link Bitmap}
 */
public static Bitmap downloadImage(final String url){
  Bitmap sourceImage=null;
  try {
    log(url);
    InputStream is=downloadFileStream(url);
    try {
      sourceImage=BitmapFactory.decodeStream(is);
    }
 catch (    Exception e) {
      Utils.log(e);
    }
 finally {
      is.close();
    }
  }
 catch (  Exception e) {
    log(e,url);
  }
  return sourceImage;
}",0.9602272727272728
161628,"/** 
 * Replace or Insert a cafeteria in the database
 * @param c Cafeteria object
 * @throws Exception
 */
void replaceIntoDb(Cafeteria c) throws Exception {
  Utils.log(c.toString());
  if (c.id <= 0) {
    throw new Exception(""String_Node_Str"");
  }
  if (c.name.length() == 0) {
    throw new Exception(""String_Node_Str"");
  }
  db.execSQL(""String_Node_Str"",new String[]{String.valueOf(c.id),c.name,c.address,Double.toString(c.latitude),Double.toString(c.longitude)});
}","/** 
 * Replace or Insert a cafeteria in the database
 * @param c Cafeteria object
 * @throws Exception
 */
void replaceIntoDb(Cafeteria c) throws Exception {
  if (c.id <= 0) {
    throw new Exception(""String_Node_Str"");
  }
  if (c.name.length() == 0) {
    throw new Exception(""String_Node_Str"");
  }
  db.execSQL(""String_Node_Str"",new String[]{String.valueOf(c.id),c.name,c.address,Double.toString(c.latitude),Double.toString(c.longitude)});
}",0.970684039087948
161629,"/** 
 * Download cafeterias from external interface (JSON)
 * @param force True to force download over normal sync period, else false
 * @throws Exception
 */
public void downloadFromExternal(boolean force) throws Exception {
  int oldVersion=Utils.getInternalSettingInt(mContext,Const.CAFETERIA_DB_VERSION,1);
  if (oldVersion < 2) {
    db.execSQL(""String_Node_Str"");
    db.execSQL(""String_Node_Str"");
    Utils.setInternalSetting(mContext,Const.CAFETERIA_DB_VERSION,2);
    force=true;
  }
  if (!force && !SyncManager.needSync(db,this,TIME_TO_SYNC)) {
    return;
  }
  String url=""String_Node_Str"";
  JSONArray jsonArray=Utils.downloadJson(url).getJSONArray(Const.JSON_MENSA_MENSEN);
  removeCache();
  db.beginTransaction();
  try {
    for (int i=0; i < jsonArray.length(); i++) {
      replaceIntoDb(getFromJson(jsonArray.getJSONObject(i)));
    }
    SyncManager.replaceIntoDb(db,this);
    db.setTransactionSuccessful();
  }
  finally {
    db.endTransaction();
  }
}","/** 
 * Download cafeterias from external interface (JSON)
 * @param force True to force download over normal sync period, else false
 * @throws Exception
 */
public void downloadFromExternal(boolean force) throws Exception {
  int oldVersion=Utils.getInternalSettingInt(mContext,Const.CAFETERIA_DB_VERSION,1);
  if (oldVersion < 2) {
    db.execSQL(""String_Node_Str"");
    db.execSQL(""String_Node_Str"");
    Utils.setInternalSetting(mContext,Const.CAFETERIA_DB_VERSION,2);
    force=true;
  }
  if (!force && !SyncManager.needSync(db,this,TIME_TO_SYNC)) {
    return;
  }
  String url=""String_Node_Str"";
  JSONArray jsonArray=Utils.downloadJsonArray(mContext,url);
  removeCache();
  db.beginTransaction();
  try {
    for (int i=0; i < jsonArray.length(); i++) {
      replaceIntoDb(getFromJson(jsonArray.getJSONObject(i)));
    }
    SyncManager.replaceIntoDb(db,this);
    db.setTransactionSuccessful();
  }
  finally {
    db.endTransaction();
  }
}",0.9720496894409938
161630,"/** 
 * Get Cafeteria object by JSON object Example JSON: e.g. {""id"":""411"",""name"":""Mensa Leopoldstra\u00dfe"",""anschrift"" :""Leopoldstra\u00dfe 13a, M\u00fcnchen""}
 * @param json See example
 * @return Cafeteria object
 * @throws JSONException
 */
private static Cafeteria getFromJson(JSONObject json) throws JSONException {
  return new Cafeteria(json.getInt(Const.JSON_ID),json.getString(Const.JSON_NAME),json.getString(Const.JSON_ANSCHRIFT),48.267510,11.671278);
}","/** 
 * Get Cafeteria object by JSON object Example JSON: e.g. {""mensa"":""4"", ""id"":""411"",""name"":""Mensa Leopoldstra\u00dfe"",""anschrift"" :""Leopoldstra\u00dfe 13a, M\u00fcnchen"", ""latitude"":0.0000, ""longitude"":0.0000}
 * @param json See example
 * @return Cafeteria object
 * @throws JSONException
 */
private static Cafeteria getFromJson(JSONObject json) throws JSONException {
  return new Cafeteria(json.getInt(Const.JSON_ID),json.getString(Const.JSON_NAME),json.getString(Const.JSON_ADDRESS),json.getDouble(Const.JSON_LATITUDE),json.getDouble(Const.JSON_LONGITUDE));
}",0.8499515972894482
161631,"@Override public void onCreate(Bundle savedInstanceState){
  super.onCreate(savedInstanceState);
  httpClient=new DefaultHttpClient();
  browser=(WebView)this.findViewById(R.id.activity_curricula_web_view);
  browser.getSettings().setBuiltInZoomControls(true);
  String url=getIntent().getExtras().getString(CurriculaActivity.URL);
  String name=getIntent().getExtras().getString(CurriculaActivity.NAME);
  setTitle(name);
  getCurriculum(name,url);
}","@Override public void onCreate(Bundle savedInstanceState){
  super.onCreate(savedInstanceState);
  browser=(WebView)findViewById(R.id.activity_curricula_web_view);
  browser.getSettings().setBuiltInZoomControls(true);
  String url=getIntent().getExtras().getString(CurriculaActivity.URL);
  String name=getIntent().getExtras().getString(CurriculaActivity.NAME);
  setTitle(name);
  startLoading(url);
}",0.9120750293083236
161632,"/** 
 * Extract the results from a document fetched from the given URL.
 * @param url URL pointing to a document where the results are extracted from.
 * @return The results.
 */
private String extractResultsFromURL(String url){
  String text=FileUtils.sendGetRequest(this.httpClient,url);
  if (text == null) {
    return this.getString(R.string.something_wrong);
  }
  return Utils.cutText(text,""String_Node_Str"",""String_Node_Str"");
}","/** 
 * Extract the results from a document fetched from the given URL.
 * @param url URL pointing to a document where the results are extracted from.
 * @return The results.
 */
private String extractResultsFromURL(String url){
  String text=Utils.downloadFileAndCache(this,url,CacheManager.VALIDITY_ONE_MONTH);
  if (text == null && !Utils.isConnected(this)) {
    showNoInternetLayout();
  }
 else   if (text == null) {
    showError(R.string.something_wrong);
  }
  return Utils.cutText(text,""String_Node_Str"",""String_Node_Str"");
}",0.7826982492276005
161633,"/** 
 * Fetch information in a background task and show progress dialog in meantime
 */
@Override protected File onLoadInBackground(Object... params){
  fetchCurriculum((String)params[0],(File)params[1]);
  return (File)params[1];
}","/** 
 * Fetch information in a background task and show progress dialog in meantime
 */
@Override protected String onLoadInBackground(String... params){
  return fetchCurriculum(params[0]);
}",0.8226950354609929
161634,"/** 
 * When file is available, open it
 * @param result File
 */
@Override protected void onLoadFinished(File result){
  openFile(result);
  showLoadingEnded();
}","/** 
 * When html data is loaded show it in webView
 * @param result File
 */
@Override protected void onLoadFinished(String result){
  browser.loadData(result,""String_Node_Str"",null);
  showLoadingEnded();
}",0.6792452830188679
161635,"/** 
 * Fetches the curriculum document and extracts all relevant information.
 * @param url URL of the curriculum document
 * @param targetFile Target where the results should be written to
 */
private void fetchCurriculum(String url,File targetFile){
  String text=Utils.buildHTMLDocument(FileUtils.sendGetRequest(httpClient,""String_Node_Str""),""String_Node_Str"" + extractResultsFromURL(url) + ""String_Node_Str"");
  text=text.replace(""String_Node_Str"",""String_Node_Str"");
  FileUtils.writeFile(targetFile,text);
}","/** 
 * Fetches the curriculum document and extracts all relevant information.
 * @param url URL of the curriculum document
 */
private String fetchCurriculum(String url){
  String text=Utils.buildHTMLDocument(Utils.downloadFileAndCache(this,""String_Node_Str"",CacheManager.VALIDITY_ONE_MONTH),""String_Node_Str"" + extractResultsFromURL(url) + ""String_Node_Str"");
  return text.replace(""String_Node_Str"",""String_Node_Str"");
}",0.7086446104589115
161636,"@SuppressWarnings(""String_Node_Str"") @Override protected void onStart(){
  super.onStart();
  NewsManager nm=new NewsManager(this);
  Cursor cursor=nm.getAllFromDb();
  startManagingCursor(cursor);
  if (cursor.getCount() > 0) {
    SimpleCursorAdapter adapter=new SimpleCursorAdapter(this,R.layout.card_news_item,cursor,cursor.getColumnNames(),new int[]{R.id.news_img,R.id.news_title,R.id.news_src_date,R.id.news_src_title,R.id.news_src_icon});
    adapter.setViewBinder(this);
    ListView lv=(ListView)findViewById(R.id.activity_news_list_view);
    lv.setAdapter(adapter);
    lv.setOnItemClickListener(this);
    lv.setDividerHeight(0);
    NewsManager.lastInserted=0;
  }
 else {
    showErrorLayout();
  }
}","@Override protected void onStart(){
  super.onStart();
  NewsManager nm=new NewsManager(this);
  Cursor cursor=nm.getAllFromDb();
  if (cursor.getCount() > 0) {
    NewsAdapter adapter=new NewsAdapter(this,cursor);
    lv=(ListView)findViewById(R.id.activity_news_list_view);
    lv.setAdapter(adapter);
    lv.setOnItemClickListener(this);
    lv.setDividerHeight(0);
    lv.setSelection(nm.getTodayIndex());
    if (state != null)     lv.onRestoreInstanceState(state);
  }
 else {
    showErrorLayout();
  }
}",0.6318367346938776
161637,"/** 
 * If news item has been clicked open the corresponding link
 * @param adapterView Containing listView
 * @param view Item view
 * @param position Index of the item
 * @param id Item id
 */
@SuppressWarnings(""String_Node_Str"") @Override public void onItemClick(AdapterView<?> adapterView,View view,int position,long id){
  ListView lv=(ListView)findViewById(R.id.activity_news_list_view);
  Cursor cursor=(Cursor)lv.getAdapter().getItem(position);
  startManagingCursor(cursor);
  String url=cursor.getString(cursor.getColumnIndex(Const.LINK_COLUMN));
  if (url.length() == 0) {
    Utils.showToast(this,R.string.no_link_existing);
    return;
  }
  Intent viewIntent=new Intent(Intent.ACTION_VIEW,Uri.parse(url));
  startActivity(viewIntent);
}","/** 
 * If news item has been clicked open the corresponding link
 * @param adapterView Containing listView
 * @param view Item view
 * @param position Index of the item
 * @param id Item id
 */
@Override public void onItemClick(AdapterView<?> adapterView,View view,int position,long id){
  Cursor cursor=(Cursor)lv.getAdapter().getItem(position);
  String url=cursor.getString(cursor.getColumnIndex(Const.LINK_COLUMN));
  if (url.length() == 0) {
    Utils.showToast(this,R.string.no_link_existing);
    return;
  }
  startActivity(new Intent(Intent.ACTION_VIEW,Uri.parse(url)));
}",0.8318318318318318
161638,"/** 
 * Callback method from   {@link de.tum.in.tumcampus.fragments.OpeningHoursListFragment.Callbacks}indicating that the item with the given ID was selected.
 * @param id id of institution
 * @param name name of institution
 */
@Override public void onItemSelected(int id,String name){
  if (mTwoPane) {
    Bundle arguments=new Bundle();
    arguments.putInt(OpeningHoursDetailFragment.ARG_ITEM_ID,id);
    arguments.putString(OpeningHoursDetailFragment.ARG_ITEM_CONTENT,name);
    OpeningHoursDetailFragment fragment=new OpeningHoursDetailFragment();
    fragment.setArguments(arguments);
    getSupportFragmentManager().beginTransaction().replace(R.id.item_detail_container,fragment).commit();
  }
 else {
    Intent detailIntent=new Intent(this,OpeningHoursDetailActivity.class);
    detailIntent.putExtra(OpeningHoursDetailFragment.ARG_ITEM_ID,id);
    detailIntent.putExtra(OpeningHoursDetailFragment.TWO_PANE,mTwoPane);
    startActivity(detailIntent);
  }
}","/** 
 * Callback method from   {@link de.tum.in.tumcampus.fragments.OpeningHoursListFragment.Callbacks}indicating that the item with the given ID was selected.
 * @param id id of institution
 * @param name name of institution
 */
@Override public void onItemSelected(int id,String name){
  if (mTwoPane) {
    Bundle arguments=new Bundle();
    arguments.putInt(OpeningHoursDetailFragment.ARG_ITEM_ID,id);
    arguments.putString(OpeningHoursDetailFragment.ARG_ITEM_CONTENT,name);
    OpeningHoursDetailFragment fragment=new OpeningHoursDetailFragment();
    fragment.setArguments(arguments);
    getSupportFragmentManager().beginTransaction().replace(R.id.item_detail_container,fragment).commit();
  }
 else {
    Intent detailIntent=new Intent(this,OpeningHoursDetailActivity.class);
    detailIntent.putExtra(OpeningHoursDetailFragment.ARG_ITEM_ID,id);
    detailIntent.putExtra(OpeningHoursDetailFragment.ARG_ITEM_CONTENT,name);
    detailIntent.putExtra(OpeningHoursDetailFragment.TWO_PANE,mTwoPane);
    startActivity(detailIntent);
  }
}",0.9617105917454004
161639,"private void handleIntent(Intent intent){
  if (intent != null && intent.getAction().equals(Intent.ACTION_SEARCH)) {
    String query=intent.getStringExtra(SearchManager.QUERY);
    EditText searchView=(EditText)this.findViewById(R.id.search_field);
    searchView.setText(query);
    performSearchAlgorithm();
  }
}","private void handleIntent(Intent intent){
  if (intent != null && intent.getAction() != null && intent.getAction().equals(Intent.ACTION_SEARCH)) {
    String query=intent.getStringExtra(SearchManager.QUERY);
    EditText searchView=(EditText)this.findViewById(R.id.search_field);
    searchView.setText(query);
    performSearchAlgorithm();
  }
}",0.9546827794561934
161640,"private void checkPlayServicesAndRegister(){
  if (checkPlayServices()) {
    gcm=GoogleCloudMessaging.getInstance(this);
    regId=getRegistrationId(getApplicationContext());
    if (regId.isEmpty()) {
      registerInBackground();
    }
 else {
      boolean sentToTCAServer=isRegistrationIdSentToTCAServer(getApplicationContext());
      if (!sentToTCAServer) {
        sendRegistrationIdToBackend();
      }
    }
  }
 else {
    Log.i(TAG,""String_Node_Str"");
  }
}","private void checkPlayServicesAndRegister(){
  currentPrivateKey=retrieveOrGeneratePrivateKey();
  if (checkPlayServices()) {
    gcm=GoogleCloudMessaging.getInstance(this);
    regId=getRegistrationId(getApplicationContext());
    if (regId.isEmpty()) {
      registerInBackground();
    }
 else {
      boolean sentToTCAServer=isRegistrationIdSentToTCAServer(getApplicationContext());
      if (!sentToTCAServer) {
        sendRegistrationIdToBackend();
      }
    }
  }
 else {
    Log.i(TAG,""String_Node_Str"");
  }
}",0.9474747474747476
161641,"private void populateCurrentChatMember(final SharedPreferences sharedPrefs){
  String lrzId=sharedPrefs.getString(Const.LRZ_ID,""String_Node_Str"");
  if (sharedPrefs.contains(Const.CHAT_ROOM_DISPLAY_NAME)) {
    List<ChatMember> members=ChatClient.getInstance().getMember(lrzId);
    currentChatMember=members.get(0);
    checkPlayServicesAndRegister();
    currentPrivateKey=retrieveOrGeneratePrivateKey();
  }
 else {
    currentChatMember=new ChatMember(lrzId);
    LinearLayout layout=new LinearLayout(this);
    layout.setOrientation(LinearLayout.VERTICAL);
    final EditText etDisplayName=new EditText(this);
    etDisplayName.setHint(R.string.display_name);
    layout.addView(etDisplayName);
    AlertDialog.Builder builder=new AlertDialog.Builder(ChatRoomsSearchActivity.this);
    builder.setTitle(R.string.chat_display_name_title).setView(layout).setPositiveButton(getResources().getString(android.R.string.ok),new DialogInterface.OnClickListener(){
      @Override public void onClick(      DialogInterface dialog,      int which){
        currentChatMember.setDisplayName(etDisplayName.getText().toString());
        Editor editor=sharedPrefs.edit();
        editor.putString(Const.CHAT_ROOM_DISPLAY_NAME,currentChatMember.getDisplayName());
        editor.commit();
        currentChatMember=ChatClient.getInstance().createMember(currentChatMember);
        checkPlayServicesAndRegister();
        currentPrivateKey=retrieveOrGeneratePrivateKey();
      }
    }
);
    AlertDialog alertDialog=builder.create();
    alertDialog.show();
  }
}","private void populateCurrentChatMember(final SharedPreferences sharedPrefs){
  String lrzId=sharedPrefs.getString(Const.LRZ_ID,""String_Node_Str"");
  if (sharedPrefs.contains(Const.CHAT_ROOM_DISPLAY_NAME)) {
    List<ChatMember> members=ChatClient.getInstance().getMember(lrzId);
    currentChatMember=members.get(0);
    checkPlayServicesAndRegister();
  }
 else {
    currentChatMember=new ChatMember(lrzId);
    LinearLayout layout=new LinearLayout(this);
    layout.setOrientation(LinearLayout.VERTICAL);
    final EditText etDisplayName=new EditText(this);
    etDisplayName.setHint(R.string.display_name);
    layout.addView(etDisplayName);
    AlertDialog.Builder builder=new AlertDialog.Builder(ChatRoomsSearchActivity.this);
    builder.setTitle(R.string.chat_display_name_title).setView(layout).setPositiveButton(getResources().getString(android.R.string.ok),new DialogInterface.OnClickListener(){
      @Override public void onClick(      DialogInterface dialog,      int which){
        currentChatMember.setDisplayName(etDisplayName.getText().toString());
        Editor editor=sharedPrefs.edit();
        editor.putString(Const.CHAT_ROOM_DISPLAY_NAME,currentChatMember.getDisplayName());
        editor.commit();
        currentChatMember=ChatClient.getInstance().createMember(currentChatMember);
        checkPlayServicesAndRegister();
      }
    }
);
    AlertDialog alertDialog=builder.create();
    alertDialog.show();
  }
}",0.9092122830440588
161642,"@Override public void onClick(View view){
  if (view.getId() == btnSend.getId()) {
    ChatMessage newMessage=new ChatMessage(etMessage.getText().toString(),currentChatMember.getUrl());
    if (privateKey == null) {
      SharedPreferences sharedPrefs=PreferenceManager.getDefaultSharedPreferences(this);
      if (sharedPrefs.contains(Const.PRIVATE_KEY)) {
        privateKey=new Gson().fromJson(sharedPrefs.getString(Const.PRIVATE_KEY,""String_Node_Str""),PrivateKey.class);
      }
 else {
        KeyPairGenerator keyGen=null;
        try {
          keyGen=KeyPairGenerator.getInstance(""String_Node_Str"");
        }
 catch (        NoSuchAlgorithmException e) {
          e.printStackTrace();
        }
        keyGen.initialize(1024);
        KeyPair keyPair=keyGen.generateKeyPair();
        byte[] publicKey=keyPair.getPublic().getEncoded();
        String publicKeyString=Base64.encodeToString(publicKey,Base64.DEFAULT);
        privateKey=keyPair.getPrivate();
        Editor editor=sharedPrefs.edit();
        editor.putString(Const.PRIVATE_KEY,new Gson().toJson(privateKey));
        editor.commit();
        ChatClient.getInstance().uploadPublicKey(currentChatMember.getUserId(),new ChatPublicKey(publicKeyString),new Callback<ChatPublicKey>(){
          @Override public void success(          ChatPublicKey arg0,          Response arg1){
            Log.d(""String_Node_Str"",arg0.toString());
          }
          @Override public void failure(          RetrofitError arg0){
            Log.d(""String_Node_Str"",arg0.toString());
          }
        }
);
      }
    }
    RSASigner signer=new RSASigner(privateKey);
    newMessage.setSignature(signer.sign(newMessage.getText()));
    ChatClient.getInstance().sendMessage(currentChatRoom.getGroupId(),newMessage,new Callback<ChatMessage>(){
      @Override public void success(      ChatMessage arg0,      Response arg1){
        Log.d(""String_Node_Str"",arg0.toString());
      }
      @Override public void failure(      RetrofitError arg0){
        Log.d(""String_Node_Str"",arg0.toString());
      }
    }
);
    etMessage.setText(""String_Node_Str"");
  }
}","@Override public void onClick(View view){
  if (view.getId() == btnSend.getId()) {
    ChatMessage newMessage=new ChatMessage(etMessage.getText().toString(),currentChatMember.getUrl());
    if (privateKey == null) {
      SharedPreferences sharedPrefs=PreferenceManager.getDefaultSharedPreferences(this);
      if (sharedPrefs.contains(Const.PRIVATE_KEY)) {
        String privateKeyString=sharedPrefs.getString(Const.PRIVATE_KEY,""String_Node_Str"");
        byte[] privateKeyBytes=Base64.decode(privateKeyString,Base64.DEFAULT);
        KeyFactory keyFactory;
        try {
          keyFactory=KeyFactory.getInstance(""String_Node_Str"");
          PKCS8EncodedKeySpec privateKeySpec=new PKCS8EncodedKeySpec(privateKeyBytes);
          privateKey=keyFactory.generatePrivate(privateKeySpec);
        }
 catch (        NoSuchAlgorithmException e) {
          e.printStackTrace();
        }
catch (        InvalidKeySpecException e) {
          e.printStackTrace();
        }
      }
 else {
        KeyPairGenerator keyGen=null;
        try {
          keyGen=KeyPairGenerator.getInstance(""String_Node_Str"");
        }
 catch (        NoSuchAlgorithmException e) {
          e.printStackTrace();
        }
        keyGen.initialize(1024);
        KeyPair keyPair=keyGen.generateKeyPair();
        byte[] publicKey=keyPair.getPublic().getEncoded();
        String publicKeyString=Base64.encodeToString(publicKey,Base64.DEFAULT);
        privateKey=keyPair.getPrivate();
        String privateKeyString=Base64.encodeToString(privateKey.getEncoded(),Base64.DEFAULT);
        Editor editor=sharedPrefs.edit();
        editor.putString(Const.PRIVATE_KEY,privateKeyString);
        editor.commit();
        ChatClient.getInstance().uploadPublicKey(currentChatMember.getUserId(),new ChatPublicKey(publicKeyString),new Callback<ChatPublicKey>(){
          @Override public void success(          ChatPublicKey arg0,          Response arg1){
            Log.d(""String_Node_Str"",arg0.toString());
            Utils.showLongCenteredToast(ChatActivity.this,""String_Node_Str"" + currentChatMember.getLrzId() + ""String_Node_Str"");
          }
          @Override public void failure(          RetrofitError arg0){
            Log.e(""String_Node_Str"",arg0.toString());
          }
        }
);
      }
    }
    RSASigner signer=new RSASigner(privateKey);
    String signature=signer.sign(newMessage.getText());
    newMessage.setSignature(signature);
    ChatClient.getInstance().sendMessage(currentChatRoom.getGroupId(),newMessage,new Callback<ChatMessage>(){
      @Override public void success(      ChatMessage arg0,      Response arg1){
        Log.d(""String_Node_Str"",arg0.toString());
      }
      @Override public void failure(      RetrofitError arg0){
        Log.e(""String_Node_Str"",arg0.getMessage() + ""String_Node_Str"" + arg0.getCause());
      }
    }
);
    etMessage.setText(""String_Node_Str"");
  }
}",0.6217616580310881
161643,"private void loadChatHistory(){
  final List<ChatMessage> messageHistory=new ArrayList<ChatMessage>();
  ChatClient.getInstance().getMessagesCb(currentChatRoom.getGroupId(),new Callback<List<ChatMessage>>(){
    @Override public void success(    List<ChatMessage> arg0,    Response arg1){
      Log.d(""String_Node_Str"",arg0.toString());
    }
    @Override public void failure(    RetrofitError arg0){
      Log.d(""String_Node_Str"",arg0.toString());
    }
  }
);
  lvMessageHistory.setAdapter(new ChatHistoryAdapter(this,messageHistory));
}","private void loadChatHistory(){
  ChatClient.getInstance().getMessagesCb(currentChatRoom.getGroupId(),new Callback<List<ChatMessage>>(){
    @Override public void success(    List<ChatMessage> chatHistory,    Response arg1){
      Log.d(""String_Node_Str"",chatHistory.toString());
      lvMessageHistory.setAdapter(new ChatHistoryAdapter(ChatActivity.this,chatHistory));
    }
    @Override public void failure(    RetrofitError arg0){
      Log.e(""String_Node_Str"",arg0.toString());
    }
  }
);
}",0.7213114754098361
161644,"@Override public void success(List<ChatMessage> arg0,Response arg1){
  Log.d(""String_Node_Str"",arg0.toString());
}","@Override public void success(List<ChatMessage> chatHistory,Response arg1){
  Log.d(""String_Node_Str"",chatHistory.toString());
  lvMessageHistory.setAdapter(new ChatHistoryAdapter(ChatActivity.this,chatHistory));
}",0.6463414634146342
161645,"@Override public void failure(RetrofitError arg0){
  Log.d(""String_Node_Str"",arg0.toString());
}","@Override public void failure(RetrofitError arg0){
  Log.e(""String_Node_Str"",arg0.toString());
}",0.9895833333333334
161646,"public Date getTimestamp(){
  return timestamp;
}","public String getTimestamp(){
  return timestamp;
}",0.92
161647,"public void setTimestamp(Date timestamp){
  this.timestamp=timestamp;
}","public void setTimestamp(String timestamp){
  this.timestamp=timestamp;
}",0.9444444444444444
161648,"/** 
 * This returns a future which provides the results of all the provided futures.  Thus  preventing the need to iterate over all the futures and manually extract the results.  This  call does NOT block, instead it will return a future which will not complete until all the  provided futures complete.   <p> The order of the result list is NOT deterministic. <p> If called with   {@code true} for {@code ignoreFailedFutures}, even if some of the provided  futures finished in error, they will be ignored and just the successful results will be  provided.  If called with   {@code false} then if any futures complete in error, then the returned future will throw a  {@link ExecutionException} with the error as the cause when {@link Future#get()} is invoked.  In addition if called with {@code false} and any of the provided futures are canceled, then the returned future will also be canceled, resulting in a  {@link CancellationException} being thrown when {@link Future#get()} is invoked.  In the case where there is canceled and failed exceptions in the collection, this will prefer to throw the  failure as an  {@link ExecutionException} rather than obscure it with a {@link CancellationException}.  In other words   {@link CancellationException} will be thrown ONLY if there was canceled tasks, but NO tasks which finished in error.
 * @since 4.0.0
 * @param < T > The result object type returned from the futures
 * @param futures Structure of futures to iterate over and extract results from
 * @param ignoreFailedFutures {@code true} to ignore any failed or canceled futures
 * @return A {@link ListenableFuture} which will provide a list of the results from the provided futures
 */
public static <T>ListenableFuture<List<T>> makeResultListFuture(Iterable<? extends ListenableFuture<? extends T>> futures,final boolean ignoreFailedFutures){
  if (futures == null) {
    return immediateResultFuture(Collections.<T>emptyList());
  }
  ListenableFuture<List<ListenableFuture<? extends T>>> completeFuture=makeCompleteListFuture(futures);
  final SettableListenableFuture<List<T>> result;
  result=new CancelDelegateSettableListenableFuture<>(completeFuture);
  completeFuture.addCallback(new FutureCallback<List<ListenableFuture<? extends T>>>(){
    @Override public void handleResult(    List<ListenableFuture<? extends T>> resultFutures){
      boolean needToCancel=false;
      ArrayList<T> results=new ArrayList<>(resultFutures.size());
      Iterator<ListenableFuture<? extends T>> it=resultFutures.iterator();
      while (it.hasNext()) {
        ListenableFuture<? extends T> f=it.next();
        if (f.isCancelled()) {
          if (!ignoreFailedFutures) {
            needToCancel=true;
          }
          continue;
        }
        try {
          results.add(f.get());
        }
 catch (        ExecutionException e) {
          if (!ignoreFailedFutures) {
            result.setFailure(e.getCause());
            return;
          }
        }
catch (        Exception e) {
          result.setFailure(new Exception(e));
          return;
        }
      }
      if (needToCancel) {
        if (!result.cancel(false)) {
          throw new IllegalStateException();
        }
      }
 else {
        result.setResult(results);
      }
    }
    @Override public void handleFailure(    Throwable t){
      if (t instanceof CancellationException) {
      }
 else {
        result.setFailure(t);
      }
    }
  }
);
  return result;
}","/** 
 * This returns a future which provides the results of all the provided futures.  Thus  preventing the need to iterate over all the futures and manually extract the results.  This  call does NOT block, instead it will return a future which will not complete until all the  provided futures complete.   <p> The order of the result list is NOT deterministic. <p> If called with   {@code true} for {@code ignoreFailedFutures}, even if some of the provided  futures finished in error, they will be ignored and just the successful results will be  provided.  If called with   {@code false} then if any futures complete in error, then the returned future will throw a  {@link ExecutionException} with the error as the cause when {@link Future#get()} is invoked.  In addition if called with {@code false} and any of the provided futures are canceled, then the returned future will also be canceled, resulting in a  {@link CancellationException} being thrown when {@link Future#get()} is invoked.  In the case where there is canceled and failed exceptions in the collection, this will prefer to throw the  failure as an  {@link ExecutionException} rather than obscure it with a {@link CancellationException}.  In other words   {@link CancellationException} will be thrown ONLY if there was canceled tasks, but NO tasks which finished in error.
 * @since 4.0.0
 * @param < T > The result object type returned from the futures
 * @param futures Structure of futures to iterate over and extract results from
 * @param ignoreFailedFutures {@code true} to ignore any failed or canceled futures
 * @return A {@link ListenableFuture} which will provide a list of the results from the provided futures
 */
public static <T>ListenableFuture<List<T>> makeResultListFuture(Iterable<? extends ListenableFuture<? extends T>> futures,final boolean ignoreFailedFutures){
  if (futures == null) {
    return immediateResultFuture(Collections.<T>emptyList());
  }
  ListenableFuture<List<ListenableFuture<? extends T>>> completeFuture=makeCompleteListFuture(futures);
  final SettableListenableFuture<List<T>> result;
  result=new CancelDelegateSettableListenableFuture<>(completeFuture);
  completeFuture.addCallback(new FutureCallback<List<ListenableFuture<? extends T>>>(){
    @Override public void handleResult(    List<ListenableFuture<? extends T>> resultFutures){
      boolean needToCancel=false;
      ArrayList<T> results=new ArrayList<>(resultFutures.size());
      Iterator<ListenableFuture<? extends T>> it=resultFutures.iterator();
      while (it.hasNext()) {
        ListenableFuture<? extends T> f=it.next();
        if (f.isCancelled()) {
          if (!ignoreFailedFutures) {
            needToCancel=true;
          }
          continue;
        }
        try {
          results.add(f.get());
        }
 catch (        ExecutionException e) {
          if (!ignoreFailedFutures) {
            result.setFailure(e.getCause());
            return;
          }
        }
catch (        Exception e) {
          result.setFailure(new Exception(e));
          return;
        }
      }
      if (needToCancel) {
        if (!result.cancel(false)) {
          throw new IllegalStateException();
        }
      }
 else {
        result.setResult(results);
      }
    }
    @Override public void handleFailure(    Throwable t){
      result.setFailure(t);
    }
  }
);
  return result;
}",0.9774853801169592
161649,"/** 
 * An alternative to   {@link #blockTillAllComplete(Iterable)}, this provides the ability to know  when all futures are complete without blocking.  Unlike   {@link #blockTillAllComplete(Iterable)}, this requires that you provide a collection of   {@link ListenableFuture}'s.  But will return immediately, providing a new   {@link ListenableFuture} that will be called once all the provided futures have finished.  <p> The future returned will provide the result object once all provided futures have completed.   If any failures occured, they will not be represented in the returned future.  If that is  desired you should consider using  {@link #makeFailurePropagatingCompleteFuture(Iterable,Object)}, it has the same semantics as  this one except it will put the returned future into an error state if any of the provided  futures error.
 * @since 3.3.0
 * @param < T > type of result returned from the future
 * @param futures Collection of futures that must finish before returned future is satisfied
 * @param result Result to provide returned future once all futures complete
 * @return ListenableFuture which will be done once all futures provided are done
 */
@SuppressWarnings(""String_Node_Str"") public static <T>ListenableFuture<T> makeCompleteFuture(Iterable<? extends ListenableFuture<?>> futures,final T result){
  if (result == null) {
    return (ListenableFuture<T>)makeCompleteFuture(futures);
  }
  final EmptyFutureCollection efc=new EmptyFutureCollection(futures);
  if (efc.isDone()) {
    return immediateResultFuture(result);
  }
  final SettableListenableFuture<T> resultFuture=new CancelDelegateSettableListenableFuture<>(efc);
  efc.addCallback(new FutureCallback<Object>(){
    @Override public void handleResult(    Object ignored){
      resultFuture.setResult(result);
    }
    @Override public void handleFailure(    Throwable t){
      if (t instanceof CancellationException) {
      }
 else {
        resultFuture.setFailure(t);
      }
    }
  }
);
  return resultFuture;
}","/** 
 * An alternative to   {@link #blockTillAllComplete(Iterable)}, this provides the ability to know  when all futures are complete without blocking.  Unlike   {@link #blockTillAllComplete(Iterable)}, this requires that you provide a collection of   {@link ListenableFuture}'s.  But will return immediately, providing a new   {@link ListenableFuture} that will be called once all the provided futures have finished.  <p> The future returned will provide the result object once all provided futures have completed.   If any failures occured, they will not be represented in the returned future.  If that is  desired you should consider using  {@link #makeFailurePropagatingCompleteFuture(Iterable,Object)}, it has the same semantics as  this one except it will put the returned future into an error state if any of the provided  futures error.
 * @since 3.3.0
 * @param < T > type of result returned from the future
 * @param futures Collection of futures that must finish before returned future is satisfied
 * @param result Result to provide returned future once all futures complete
 * @return ListenableFuture which will be done once all futures provided are done
 */
@SuppressWarnings(""String_Node_Str"") public static <T>ListenableFuture<T> makeCompleteFuture(Iterable<? extends ListenableFuture<?>> futures,final T result){
  if (result == null) {
    return (ListenableFuture<T>)makeCompleteFuture(futures);
  }
  final EmptyFutureCollection efc=new EmptyFutureCollection(futures);
  if (efc.isDone()) {
    return immediateResultFuture(result);
  }
  final SettableListenableFuture<T> resultFuture=new CancelDelegateSettableListenableFuture<>(efc);
  efc.addCallback(new FutureCallback<Object>(){
    @Override public void handleResult(    Object ignored){
      resultFuture.setResult(result);
    }
    @Override public void handleFailure(    Throwable t){
      resultFuture.setFailure(t);
    }
  }
);
  return resultFuture;
}",0.9812753036437248
161650,"/** 
 * The ultimate start call for the profiler.  This handles all possible start permutations.   If an   {@link Executor} is provided, that will be used to run the profiler thread.  If there is a duration provided > 0, a thread will be started to perform profiler shutdown.  If  {@code sampleDurationInMillis} is greater than {@code 0} and the profiler is already running, it will be stopped and restarted.
 * @param executor Executor or scheduler to use for execution as possible
 * @param sampleDurationInMillis if greater than {@code 0} an automatic stop will occur after that many milliseconds 
 * @param completionFuture If not {@code null} future will be called once the next {@link #stop()} is invoked
 */
private void start(Executor executor,final long sampleDurationInMillis,SettableListenableFuture<String> completionFuture){
synchronized (startStopLock) {
    if (sampleDurationInMillis > 0) {
      stop();
    }
    if (completionFuture != null) {
      stopFutures.add(completionFuture);
    }
    if (pStore.collectorThread.get() == null) {
      final ProfilerRunner pr=new ProfilerRunner(pStore);
      if (executor == null) {
        Thread thread=new Thread(pr);
        pStore.collectorThread.set(thread);
        thread.setName(""String_Node_Str"");
        thread.setPriority(Thread.MAX_PRIORITY);
        thread.start();
      }
 else {
        final SettableListenableFuture<?> runningThreadFuture;
        runningThreadFuture=new SettableListenableFuture<>();
        executor.execute(() -> {
          try {
            if (!pStore.collectorThread.compareAndSet(null,Thread.currentThread())) {
              return;
            }
          }
  finally {
            runningThreadFuture.setResult(null);
          }
          pr.run();
        }
);
        try {
          runningThreadFuture.get();
        }
 catch (        InterruptedException e) {
          Thread.currentThread().interrupt();
          return;
        }
catch (        ExecutionException e) {
          throw ExceptionUtils.makeRuntime(e.getCause());
        }
      }
      if (sampleDurationInMillis > 0) {
        pStore.dumpLoopRun=new Runnable(){
          private final long startTime=Clock.accurateForwardProgressingMillis();
          @Override public void run(){
            if (Clock.lastKnownForwardProgressingMillis() - startTime > sampleDurationInMillis) {
              pStore.dumpLoopRun=null;
              stop();
            }
          }
        }
;
      }
    }
  }
}","/** 
 * The ultimate start call for the profiler.  This handles all possible start permutations.   If an   {@link Executor} is provided, that will be used to run the profiler thread.  If there is a duration provided > 0, a thread will be started to perform profiler shutdown.  If  {@code sampleDurationInMillis} is greater than {@code 0} and the profiler is already running, it will be stopped and restarted.
 * @param executor Executor or scheduler to use for execution as possible
 * @param sampleDurationInMillis if greater than {@code 0} an automatic stop will occur after that many milliseconds 
 * @param completionFuture If not {@code null} future will be called once the next {@link #stop()} is invoked
 */
private void start(Executor executor,final long sampleDurationInMillis,SettableListenableFuture<String> completionFuture){
  final ProfilerRunner pr=new ProfilerRunner(pStore);
  boolean runInCallingThread=false;
  Thread callingThread=null;
synchronized (startStopLock) {
    if (sampleDurationInMillis > 0) {
      stop();
    }
    if (completionFuture != null) {
      stopFutures.add(completionFuture);
    }
    if (pStore.collectorThread.get() == null) {
      if (executor == null) {
        Thread thread=new Thread(pr);
        pStore.collectorThread.set(thread);
        thread.setName(""String_Node_Str"");
        thread.setPriority(Thread.MAX_PRIORITY);
        thread.start();
      }
 else       if (executor == SameThreadSubmitterExecutor.instance() || executor instanceof SameThreadSubmitterExecutor) {
        callingThread=Thread.currentThread();
        pStore.collectorThread.set(callingThread);
        runInCallingThread=true;
      }
 else {
        final SettableListenableFuture<?> runningThreadFuture;
        runningThreadFuture=new SettableListenableFuture<>();
        executor.execute(() -> {
          Thread currentThread=Thread.currentThread();
          try {
            if (!pStore.collectorThread.compareAndSet(null,currentThread)) {
              return;
            }
          }
  finally {
            runningThreadFuture.setResult(null);
          }
          String originalName=currentThread.getName();
          int origPriority=currentThread.getPriority();
          try {
            if (origPriority < Thread.MAX_PRIORITY) {
              currentThread.setPriority(Thread.MAX_PRIORITY);
            }
            currentThread.setName(""String_Node_Str"" + originalName + ""String_Node_Str"");
            pr.run();
          }
  finally {
            if (origPriority < Thread.MAX_PRIORITY) {
              currentThread.setPriority(origPriority);
            }
            currentThread.setName(originalName);
          }
        }
);
        try {
          runningThreadFuture.get();
        }
 catch (        InterruptedException e) {
          Thread.currentThread().interrupt();
          return;
        }
catch (        ExecutionException e) {
          throw ExceptionUtils.makeRuntime(e.getCause());
        }
      }
      if (sampleDurationInMillis > 0) {
        pStore.dumpLoopRun=new Runnable(){
          private final long startTime=Clock.accurateForwardProgressingMillis();
          @Override public void run(){
            if (Clock.lastKnownForwardProgressingMillis() - startTime > sampleDurationInMillis) {
              pStore.dumpLoopRun=null;
              stop();
            }
          }
        }
;
      }
    }
  }
  if (runInCallingThread) {
    int origPriority=callingThread.getPriority();
    try {
      if (origPriority < Thread.MAX_PRIORITY) {
        callingThread.setPriority(Thread.MAX_PRIORITY);
      }
      pr.run();
    }
  finally {
      if (origPriority < Thread.MAX_PRIORITY) {
        callingThread.setPriority(origPriority);
      }
    }
    Thread.interrupted();
  }
}",0.7646401787138982
161651,"@Test public void startWithoutExecutorTest(){
  profiler.start(null);
  assertTrue(profiler.isRunning());
}","@Test public void startWithoutExecutorTest(){
  profiler.start(null);
  assertTrue(profiler.isRunning());
  blockForProfilerSample();
}",0.8842975206611571
161652,"@Override public SubmitterScheduler makeSubmitterScheduler(int poolSize,boolean prestartIfAvailable){
  PriorityScheduler scheduler=schedulerFactory.makePriorityScheduler(poolSize);
  if (prestartIfAvailable) {
    scheduler.prestartAllThreads();
  }
  return new ThreadRenamingPriorityScheduler(scheduler,""String_Node_Str"",false);
}","@Override public SubmitterScheduler makeSubmitterScheduler(int poolSize,boolean prestartIfAvailable){
  PriorityScheduler scheduler=schedulerFactory.makePriorityScheduler(poolSize);
  if (prestartIfAvailable) {
    scheduler.prestartAllThreads();
  }
  return new ThreadRenamingPriorityScheduler(scheduler,THREAD_NAME,false);
}",0.9636363636363636
161653,"@Test public void getExecutionDurationPercentilesTest(){
  assertEquals(0,statWrapper.getExecutionDurationPercentiles(50).get(50.),0);
  statWrapper.execute(DoNothingRunnable.instance());
  assertEquals(1,statWrapper.getExecutionDurationPercentiles(50).get(50.),1);
  statWrapper.execute(DoNothingRunnable.instance());
  statWrapper.execute(DoNothingRunnable.instance());
  statWrapper.execute(DoNothingRunnable.instance());
  statWrapper.execute(new TestRunnable(DELAY_TIME));
  assertEquals(1,statWrapper.getExecutionDurationPercentiles(75).get(75.),1);
  assertTrue(statWrapper.getExecutionDurationPercentiles(90).get(90.) >= DELAY_TIME);
}","@Test public void getExecutionDurationPercentilesTest(){
  assertEquals(0,statWrapper.getExecutionDurationPercentiles(50).get(50.),0);
  statWrapper.execute(DoNothingRunnable.instance());
  assertEquals(1,statWrapper.getExecutionDurationPercentiles(50).get(50.),1);
  statWrapper.execute(DoNothingRunnable.instance());
  statWrapper.execute(DoNothingRunnable.instance());
  statWrapper.execute(DoNothingRunnable.instance());
  statWrapper.execute(new TestRunnable(DELAY_TIME));
  assertEquals(1,statWrapper.getExecutionDurationPercentiles(75).get(75.),1);
  assertTrue(statWrapper.getExecutionDurationPercentiles(90).get(90.) >= (DELAY_TIME - ALLOWED_VARIANCE));
}",0.9839326702371844
161654,"@Test public void getExecutionDurationSamplesTest(){
  assertTrue(statWrapper.getExecutionDurationSamples().isEmpty());
  statWrapper.execute(DoNothingRunnable.instance());
  assertEquals(1,statWrapper.getExecutionDurationSamples().size());
  statWrapper.execute(new TestRunnable(DELAY_TIME));
  assertEquals(2,statWrapper.getExecutionDurationSamples().size());
  assertTrue(statWrapper.getExecutionDurationSamples().get(0) < 2);
  assertTrue(statWrapper.getExecutionDurationSamples().get(1) >= DELAY_TIME);
}","@Test public void getExecutionDurationSamplesTest(){
  assertTrue(statWrapper.getExecutionDurationSamples().isEmpty());
  statWrapper.execute(DoNothingRunnable.instance());
  assertEquals(1,statWrapper.getExecutionDurationSamples().size());
  statWrapper.execute(new TestRunnable(DELAY_TIME));
  assertEquals(2,statWrapper.getExecutionDurationSamples().size());
  assertTrue(statWrapper.getExecutionDurationSamples().get(0) < 2);
  assertTrue(statWrapper.getExecutionDurationSamples().get(1) >= (DELAY_TIME - ALLOWED_VARIANCE));
}",0.9797882579403272
161655,"@Test public void getWithPriorityExecutionDurationPercentilesTest(){
  NoThreadSchedulerStatisticTracker scheduler=new NoThreadSchedulerStatisticTracker();
  assertEquals(0,scheduler.getExecutionDurationPercentiles(TaskPriority.High,50).get(50.),0);
  scheduler.execute(new ClockUpdateRunnable(),TaskPriority.Low);
  scheduler.execute(new ClockUpdateRunnable(),TaskPriority.Low);
  scheduler.execute(new ClockUpdateRunnable(),TaskPriority.Low);
  scheduler.execute(new ClockUpdateRunnable(),TaskPriority.Low);
  scheduler.execute(new ClockUpdateRunnable(),TaskPriority.Low);
  scheduler.execute(new ClockUpdateRunnable(),TaskPriority.High);
  scheduler.execute(new ClockUpdateRunnable(),TaskPriority.High);
  scheduler.execute(new ClockUpdateRunnable(),TaskPriority.High);
  scheduler.execute(new ClockUpdateRunnable(),TaskPriority.High);
  scheduler.execute(new ClockUpdateRunnable(DELAY_TIME),TaskPriority.High);
  scheduler.tick(null);
  assertEquals(1,scheduler.getExecutionDurationPercentiles(TaskPriority.High,75).get(75.),1);
  assertTrue(scheduler.getExecutionDurationPercentiles(TaskPriority.High,90).get(90.) >= DELAY_TIME);
  assertEquals(1,scheduler.getExecutionDurationPercentiles(TaskPriority.Low,90).get(90.),1);
}","@Test public void getWithPriorityExecutionDurationPercentilesTest(){
  NoThreadSchedulerStatisticTracker scheduler=new NoThreadSchedulerStatisticTracker();
  assertEquals(0,scheduler.getExecutionDurationPercentiles(TaskPriority.High,50).get(50.),0);
  scheduler.execute(new ClockUpdateRunnable(),TaskPriority.Low);
  scheduler.execute(new ClockUpdateRunnable(),TaskPriority.Low);
  scheduler.execute(new ClockUpdateRunnable(),TaskPriority.Low);
  scheduler.execute(new ClockUpdateRunnable(),TaskPriority.Low);
  scheduler.execute(new ClockUpdateRunnable(),TaskPriority.Low);
  scheduler.execute(new ClockUpdateRunnable(),TaskPriority.High);
  scheduler.execute(new ClockUpdateRunnable(),TaskPriority.High);
  scheduler.execute(new ClockUpdateRunnable(),TaskPriority.High);
  scheduler.execute(new ClockUpdateRunnable(),TaskPriority.High);
  scheduler.execute(new ClockUpdateRunnable(DELAY_TIME),TaskPriority.High);
  scheduler.tick(null);
  assertEquals(1,scheduler.getExecutionDurationPercentiles(TaskPriority.High,75).get(75.),1);
  assertTrue(scheduler.getExecutionDurationPercentiles(TaskPriority.High,90).get(90.) >= (DELAY_TIME - ALLOWED_VARIANCE));
  assertEquals(1,scheduler.getExecutionDurationPercentiles(TaskPriority.Low,90).get(90.),1);
}",0.991528842275111
161656,"@Test public void getExecutionDurationPercentilesTest(){
  NoThreadSchedulerStatisticTracker scheduler=new NoThreadSchedulerStatisticTracker();
  assertEquals(0,scheduler.getExecutionDurationPercentiles(50).get(50.),0);
  scheduler.execute(new ClockUpdateRunnable());
  scheduler.tick(null);
  assertEquals(1,scheduler.getExecutionDurationPercentiles(50).get(50.),1);
  scheduler.execute(new ClockUpdateRunnable());
  scheduler.execute(new ClockUpdateRunnable());
  scheduler.execute(new ClockUpdateRunnable());
  scheduler.execute(new ClockUpdateRunnable(DELAY_TIME));
  scheduler.tick(null);
  assertEquals(1,scheduler.getExecutionDurationPercentiles(75).get(75.),1);
  assertTrue(scheduler.getExecutionDurationPercentiles(90).get(90.) >= DELAY_TIME);
}","@Test public void getExecutionDurationPercentilesTest(){
  NoThreadSchedulerStatisticTracker scheduler=new NoThreadSchedulerStatisticTracker();
  assertEquals(0,scheduler.getExecutionDurationPercentiles(50).get(50.),0);
  scheduler.execute(new ClockUpdateRunnable());
  scheduler.tick(null);
  assertEquals(1,scheduler.getExecutionDurationPercentiles(50).get(50.),1);
  scheduler.execute(new ClockUpdateRunnable());
  scheduler.execute(new ClockUpdateRunnable());
  scheduler.execute(new ClockUpdateRunnable());
  scheduler.execute(new ClockUpdateRunnable(DELAY_TIME));
  scheduler.tick(null);
  assertEquals(1,scheduler.getExecutionDurationPercentiles(75).get(75.),1);
  System.out.println(scheduler.getExecutionDurationPercentiles(90).get(90.));
  assertTrue(scheduler.getExecutionDurationPercentiles(90).get(90.) >= (DELAY_TIME - ALLOWED_VARIANCE));
}",0.9384711000621504
161657,"public static void getWithPriorityExecutionDurationPercentilesTest(StatisticPriorityScheduler scheduler){
  assertEquals(0,scheduler.getExecutionDurationPercentiles(TaskPriority.High,50).get(50.),0);
  scheduler.execute(new ClockUpdateRunnable(),TaskPriority.Low);
  scheduler.execute(new ClockUpdateRunnable(),TaskPriority.Low);
  scheduler.execute(new ClockUpdateRunnable(),TaskPriority.Low);
  scheduler.execute(new ClockUpdateRunnable(),TaskPriority.Low);
  scheduler.execute(new ClockUpdateRunnable(),TaskPriority.Low);
  scheduler.execute(new ClockUpdateRunnable(),TaskPriority.High);
  scheduler.execute(new ClockUpdateRunnable(),TaskPriority.High);
  scheduler.execute(new ClockUpdateRunnable(),TaskPriority.High);
  scheduler.execute(new ClockUpdateRunnable(),TaskPriority.High);
  scheduler.execute(new ClockUpdateRunnable(DELAY_TIME),TaskPriority.High);
  blockTillSchedulerIdle(scheduler,10);
  assertEquals(1,scheduler.getExecutionDurationPercentiles(TaskPriority.High,75).get(75.),1);
  assertTrue(scheduler.getExecutionDurationPercentiles(TaskPriority.High,90).get(90.) >= DELAY_TIME);
  assertEquals(1,scheduler.getExecutionDurationPercentiles(TaskPriority.Low,90).get(90.),1);
}","public static void getWithPriorityExecutionDurationPercentilesTest(StatisticPriorityScheduler scheduler){
  assertEquals(0,scheduler.getExecutionDurationPercentiles(TaskPriority.High,50).get(50.),0);
  scheduler.execute(new ClockUpdateRunnable(),TaskPriority.Low);
  scheduler.execute(new ClockUpdateRunnable(),TaskPriority.Low);
  scheduler.execute(new ClockUpdateRunnable(),TaskPriority.Low);
  scheduler.execute(new ClockUpdateRunnable(),TaskPriority.Low);
  scheduler.execute(new ClockUpdateRunnable(),TaskPriority.Low);
  scheduler.execute(new ClockUpdateRunnable(),TaskPriority.High);
  scheduler.execute(new ClockUpdateRunnable(),TaskPriority.High);
  scheduler.execute(new ClockUpdateRunnable(),TaskPriority.High);
  scheduler.execute(new ClockUpdateRunnable(),TaskPriority.High);
  scheduler.execute(new ClockUpdateRunnable(DELAY_TIME),TaskPriority.High);
  blockTillSchedulerIdle(scheduler,10);
  assertEquals(1,scheduler.getExecutionDurationPercentiles(TaskPriority.High,75).get(75.),1);
  assertTrue(scheduler.getExecutionDurationPercentiles(TaskPriority.High,90).get(90.) >= (DELAY_TIME - ALLOWED_VARIANCE));
  assertEquals(1,scheduler.getExecutionDurationPercentiles(TaskPriority.Low,90).get(90.),1);
}",0.9912899211945252
161658,"public static void getExecutionDurationPercentilesTest(StatisticPriorityScheduler scheduler){
  assertEquals(0,scheduler.getExecutionDurationPercentiles(50).get(50.),0);
  scheduler.execute(new ClockUpdateRunnable());
  blockTillSchedulerIdle(scheduler,1);
  assertEquals(1,scheduler.getExecutionDurationPercentiles(50).get(50.),1);
  scheduler.execute(new ClockUpdateRunnable());
  scheduler.execute(new ClockUpdateRunnable());
  scheduler.execute(new ClockUpdateRunnable());
  scheduler.execute(new ClockUpdateRunnable(DELAY_TIME));
  blockTillSchedulerIdle(scheduler,5);
  assertEquals(1,scheduler.getExecutionDurationPercentiles(75).get(75.),1);
  assertTrue(scheduler.getExecutionDurationPercentiles(90).get(90.) >= DELAY_TIME);
}","public static void getExecutionDurationPercentilesTest(StatisticPriorityScheduler scheduler){
  assertEquals(0,scheduler.getExecutionDurationPercentiles(50).get(50.),0);
  scheduler.execute(new ClockUpdateRunnable());
  blockTillSchedulerIdle(scheduler,1);
  assertEquals(1,scheduler.getExecutionDurationPercentiles(50).get(50.),1);
  scheduler.execute(new ClockUpdateRunnable());
  scheduler.execute(new ClockUpdateRunnable());
  scheduler.execute(new ClockUpdateRunnable());
  scheduler.execute(new ClockUpdateRunnable(DELAY_TIME));
  blockTillSchedulerIdle(scheduler,5);
  assertEquals(1,scheduler.getExecutionDurationPercentiles(75).get(75.),1);
  assertTrue(scheduler.getExecutionDurationPercentiles(90).get(90.) >= DELAY_TIME - ALLOWED_VARIANCE);
}",0.987239758226998
161659,"@Test public void getExecutionDurationPercentilesTest(){
  assertEquals(0,statWrapper.getExecutionDurationPercentiles(50).get(50.),0);
  statWrapper.execute(DoNothingRunnable.instance());
  assertEquals(1,statWrapper.getExecutionDurationPercentiles(50).get(50.),1);
  statWrapper.execute(DoNothingRunnable.instance());
  statWrapper.execute(DoNothingRunnable.instance());
  statWrapper.execute(DoNothingRunnable.instance());
  statWrapper.execute(new TestRunnable(DELAY_TIME));
  assertEquals(1,statWrapper.getExecutionDurationPercentiles(75).get(75.),1);
  assertTrue(statWrapper.getExecutionDurationPercentiles(90).get(90.) >= DELAY_TIME);
}","@Test public void getExecutionDurationPercentilesTest(){
  assertEquals(0,statWrapper.getExecutionDurationPercentiles(50).get(50.),0);
  statWrapper.execute(DoNothingRunnable.instance());
  assertEquals(1,statWrapper.getExecutionDurationPercentiles(50).get(50.),1);
  statWrapper.execute(DoNothingRunnable.instance());
  statWrapper.execute(DoNothingRunnable.instance());
  statWrapper.execute(DoNothingRunnable.instance());
  statWrapper.execute(new TestRunnable(DELAY_TIME));
  assertEquals(1,statWrapper.getExecutionDurationPercentiles(75).get(75.),1);
  assertTrue(statWrapper.getExecutionDurationPercentiles(90).get(90.) >= DELAY_TIME - ALLOWED_VARIANCE);
}",0.98544061302682
161660,"@Test public void getExecutionDurationSamplesTest(){
  assertTrue(statWrapper.getExecutionDurationSamples().isEmpty());
  statWrapper.execute(DoNothingRunnable.instance());
  assertEquals(1,statWrapper.getExecutionDurationSamples().size());
  statWrapper.execute(new TestRunnable(DELAY_TIME));
  assertEquals(2,statWrapper.getExecutionDurationSamples().size());
  assertTrue(statWrapper.getExecutionDurationSamples().get(0) < 2);
  assertTrue(statWrapper.getExecutionDurationSamples().get(1) >= DELAY_TIME);
}","@Test public void getExecutionDurationSamplesTest(){
  assertTrue(statWrapper.getExecutionDurationSamples().isEmpty());
  statWrapper.execute(DoNothingRunnable.instance());
  assertEquals(1,statWrapper.getExecutionDurationSamples().size());
  statWrapper.execute(new TestRunnable(DELAY_TIME));
  assertEquals(2,statWrapper.getExecutionDurationSamples().size());
  assertTrue(statWrapper.getExecutionDurationSamples().get(0) < 2);
  assertTrue(statWrapper.getExecutionDurationSamples().get(1) >= DELAY_TIME - ALLOWED_VARIANCE);
}",0.9816779170684669
161661,"@Override public TaskWrapper workerIdle(Worker worker){
  TaskWrapper result=super.workerIdle(worker);
  if (result != null && result.task instanceof Wrapper) {
    long taskDelay=result.getRunTime() - Clock.lastKnownForwardProgressingMillis();
    Wrapper statWrapper=(Wrapper)result.task;
    ConcurrentArrayList<Long> priorityStats;
switch (statWrapper.priority) {
case High:
      priorityStats=statsManager.highPriorityExecutionDelay;
    break;
case Low:
  priorityStats=statsManager.lowPriorityExecutionDelay;
break;
case Starvable:
priorityStats=statsManager.starvablePriorityExecutionDelay;
break;
default :
throw new UnsupportedOperationException();
}
synchronized (priorityStats.getModificationLock()) {
priorityStats.add(taskDelay);
StatsManager.trimWindow(priorityStats);
}
}
return result;
}","@Override public TaskWrapper workerIdle(Worker worker){
  TaskWrapper result=super.workerIdle(worker);
  if (result != null && result.task instanceof Wrapper) {
    long taskDelay=result.getPureRunTime() - Clock.lastKnownForwardProgressingMillis();
    Wrapper statWrapper=(Wrapper)result.task;
    ConcurrentArrayList<Long> priorityStats;
switch (statWrapper.priority) {
case High:
      priorityStats=statsManager.highPriorityExecutionDelay;
    break;
case Low:
  priorityStats=statsManager.lowPriorityExecutionDelay;
break;
case Starvable:
priorityStats=statsManager.starvablePriorityExecutionDelay;
break;
default :
throw new UnsupportedOperationException();
}
synchronized (priorityStats.getModificationLock()) {
priorityStats.add(taskDelay);
StatsManager.trimWindow(priorityStats);
}
}
return result;
}",0.9975216852540272
161662,"@Override protected void doExecute(Runnable task){
  if (queuedTaskCount.get() >= queuedTaskLimit) {
    throw new RejectedExecutionException();
  }
 else   if (queuedTaskCount.incrementAndGet() > queuedTaskLimit) {
    queuedTaskCount.decrementAndGet();
    throw new RejectedExecutionException();
  }
 else {
    parentExecutor.execute(new DecrementingRunnable(task,queuedTaskCount));
  }
}","@Override protected void doExecute(Runnable task){
  if (queuedTaskCount.get() >= queuedTaskLimit) {
    throw new RejectedExecutionException();
  }
 else   if (queuedTaskCount.incrementAndGet() > queuedTaskLimit) {
    queuedTaskCount.decrementAndGet();
    throw new RejectedExecutionException();
  }
 else {
    try {
      parentExecutor.execute(new DecrementingRunnable(task,queuedTaskCount));
    }
 catch (    RejectedExecutionException e) {
      queuedTaskCount.decrementAndGet();
      throw e;
    }
  }
}",0.8634361233480177
161663,"@Override protected void doSchedule(Runnable task,long delayInMillis){
  if (queuedTaskCount.get() >= queuedTaskLimit) {
    throw new RejectedExecutionException();
  }
 else   if (queuedTaskCount.incrementAndGet() > queuedTaskLimit) {
    queuedTaskCount.decrementAndGet();
    throw new RejectedExecutionException();
  }
 else {
    parentScheduler.schedule(new DecrementingRunnable(task,queuedTaskCount),delayInMillis);
  }
}","@Override protected void doSchedule(Runnable task,long delayInMillis){
  if (queuedTaskCount.get() >= queuedTaskLimit) {
    throw new RejectedExecutionException();
  }
 else   if (queuedTaskCount.incrementAndGet() > queuedTaskLimit) {
    queuedTaskCount.decrementAndGet();
    throw new RejectedExecutionException();
  }
 else {
    try {
      parentScheduler.schedule(new DecrementingRunnable(task,queuedTaskCount),delayInMillis);
    }
 catch (    RejectedExecutionException e) {
      queuedTaskCount.decrementAndGet();
      throw e;
    }
  }
}",0.8734693877551021
161664,"/** 
 * This adds a log message to the stored log.  Keep in mind this will continue to consume more  and more memory until   {@link #getAllStoredMessages()} is called.
 * @param msg message to be stored into log map
 */
public static void log(String msg){
  long startTime=Clock.systemNanoTime();
  long time=startTime;
  String replacement=logMap.putIfAbsent(time,msg);
  while (replacement != null) {
    replacement=logMap.putIfAbsent(++time,msg);
  }
}","/** 
 * This adds a log message to the stored log.  Keep in mind this will continue to consume more  and more memory until   {@link #getAllStoredMessages()} is called.
 * @param msg message to be stored into log map
 */
public static void log(String msg){
  long startTime=Clock.accurateNanoTime();
  long time=startTime;
  String replacement=logMap.putIfAbsent(time,msg);
  while (replacement != null) {
    replacement=logMap.putIfAbsent(++time,msg);
  }
}",0.9846827133479212
161665,"/** 
 * Counts how many futures provided completed with a result that matches the one provided here.   This can be most useful if your looking to know if an error occurred that was not an   {@link ExecutionException}.  For example assume an API return's   {@code Future<Boolean>} and a {@code false} represents a failure, this can be used to look for those types of error results.   Just like  {@link #blockTillAllComplete(Iterable)}, this will block until all futures have  completed (so we can verify if their result matches or not).
 * @since 4.0.0
 * @param < T > type of result futures provide to compare against
 * @param futures Structure of futures to iterate over
 * @param comparisonResult Object to compare future results against to look for match
 * @param timeoutInMillis timeout to wait for futures to complete in milliseconds
 * @return Number of futures which match the result using a {@link Object#equals(Object)} comparison
 * @throws InterruptedException Thrown if thread is interrupted while waiting on future's result
 * @throws TimeoutException Thrown if the timeout elapsed while waiting on futures to complete
 */
public static <T>int countFuturesWithResult(Iterable<? extends Future<?>> futures,T comparisonResult,long timeoutInMillis) throws InterruptedException, TimeoutException {
  if (futures == null) {
    return 0;
  }
  int resultCount=0;
  Iterator<? extends Future<?>> it=futures.iterator();
  long startTime=Clock.accurateForwardProgressingMillis();
  long remainingTime;
  while (it.hasNext() && (remainingTime=timeoutInMillis - (Clock.lastKnownForwardProgressingMillis() - startTime)) > 0) {
    Future<?> f=it.next();
    try {
      if (comparisonResult == null && f.get(remainingTime,TimeUnit.MILLISECONDS) == null) {
        resultCount++;
      }
 else       if (comparisonResult.equals(f.get(remainingTime,TimeUnit.MILLISECONDS))) {
        resultCount++;
      }
    }
 catch (    CancellationException e) {
    }
catch (    ExecutionException e) {
    }
  }
  if (it.hasNext()) {
    throw new TimeoutException();
  }
  return resultCount;
}","/** 
 * Counts how many futures provided completed with a result that matches the one provided here.   This can be most useful if your looking to know if an error occurred that was not an   {@link ExecutionException}.  For example assume an API return's   {@code Future<Boolean>} and a {@code false} represents a failure, this can be used to look for those types of error results.   Just like  {@link #blockTillAllComplete(Iterable)}, this will block until all futures have  completed (so we can verify if their result matches or not).
 * @since 4.0.0
 * @param < T > type of result futures provide to compare against
 * @param futures Structure of futures to iterate over
 * @param comparisonResult Object to compare future results against to look for match
 * @param timeoutInMillis timeout to wait for futures to complete in milliseconds
 * @return Number of futures which match the result using a {@link Object#equals(Object)} comparison
 * @throws InterruptedException Thrown if thread is interrupted while waiting on future's result
 * @throws TimeoutException Thrown if the timeout elapsed while waiting on futures to complete
 */
public static <T>int countFuturesWithResult(Iterable<? extends Future<?>> futures,T comparisonResult,long timeoutInMillis) throws InterruptedException, TimeoutException {
  if (futures == null) {
    return 0;
  }
  int resultCount=0;
  Iterator<? extends Future<?>> it=futures.iterator();
  long startTime=Clock.accurateForwardProgressingMillis();
  long remainingTime;
  while (it.hasNext() && (remainingTime=timeoutInMillis - (Clock.lastKnownForwardProgressingMillis() - startTime)) > 0) {
    Future<?> f=it.next();
    try {
      if (comparisonResult == null) {
        if (f.get(remainingTime,TimeUnit.MILLISECONDS) == null) {
          resultCount++;
        }
      }
 else       if (comparisonResult.equals(f.get(remainingTime,TimeUnit.MILLISECONDS))) {
        resultCount++;
      }
    }
 catch (    CancellationException e) {
    }
catch (    ExecutionException e) {
    }
  }
  if (it.hasNext()) {
    throw new TimeoutException();
  }
  return resultCount;
}",0.9923809523809524
161666,"@Override public boolean cancel(boolean interruptThread){
  if (done.get()) {
    return false;
  }
  Thread localThread=runningThread;
  if (setDone()) {
    this.canceled=true;
    if (interruptThread) {
      if (localThread != null) {
        localThread.interrupt();
      }
    }
    listenerHelper.callListeners();
    return true;
  }
 else {
    return false;
  }
}","@Override public boolean cancel(boolean interruptThread){
  Thread localThread=runningThread;
  if (setDone()) {
    this.canceled=true;
    if (interruptThread) {
      if (localThread != null) {
        localThread.interrupt();
      }
    }
synchronized (resultLock) {
      resultLock.notifyAll();
    }
    listenerHelper.callListeners();
    return true;
  }
 else {
    return false;
  }
}",0.8623376623376623
161667,"/** 
 * Call to indicate this future is done, and provide the given result.  It is expected that only  this or   {@link #setFailure(Throwable)} are called.If future has already completed and constructed with  {@link #SettableListenableFuture()} or {@code true} provided to {@link #SettableListenableFuture(boolean)} this will throw an {@link IllegalStateException}.  If complete but constructed with a   {@code false} this result will be ignored.
 * @param result result to provide for {@link #get()} call, can be {@code null}
 * @return {@code true} if the result was set (ie future did not complete in failure or cancel}
 */
public boolean setResult(T result){
  if (!setDone()) {
    return false;
  }
  this.result=result;
  listenerHelper.callListeners();
  return true;
}","/** 
 * Call to indicate this future is done, and provide the given result.  It is expected that only  this or   {@link #setFailure(Throwable)} are called.If future has already completed and constructed with  {@link #SettableListenableFuture()} or {@code true} provided to {@link #SettableListenableFuture(boolean)} this will throw an {@link IllegalStateException}.  If complete but constructed with a   {@code false} this result will be ignored.
 * @param result result to provide for {@link #get()} call, can be {@code null}
 * @return {@code true} if the result was set (ie future did not complete in failure or cancel}
 */
public boolean setResult(T result){
  if (setDone()) {
    this.result=result;
synchronized (resultLock) {
      resultLock.notifyAll();
    }
    listenerHelper.callListeners();
    return true;
  }
  return false;
}",0.9130166563849476
161668,"private boolean setDone(){
  if (done.compareAndSet(false,true)) {
    runningThread=null;
synchronized (resultLock) {
      resultLock.notifyAll();
    }
    return true;
  }
 else {
    if (throwIfAlreadyComplete) {
      throw new IllegalStateException(""String_Node_Str"");
    }
    return false;
  }
}","private boolean setDone(){
  if (done.compareAndSet(false,true)) {
    runningThread=null;
    return true;
  }
 else {
    if (throwIfAlreadyComplete) {
      throw new IllegalStateException(""String_Node_Str"");
    }
    return false;
  }
}",0.8827838827838828
161669,"/** 
 * Call to indicate this future is done, and provide the occurred failure.  It is expected that  only this or   {@link #setResult(Object)} are called, and only called once.  If the provided failure is  {@code null}, a new   {@link Exception} will be created so that something is always provided in the  {@link ExecutionException} on calls to {@link #get()}. If future has already completed and constructed with   {@link #SettableListenableFuture()} or {@code true} provided to {@link #SettableListenableFuture(boolean)} this will throw an {@link IllegalStateException}.  If complete but constructed with a   {@code false} this failure result will be ignored.
 * @param failure Throwable that caused failure during computation.
 * @return {@code true} if the failure was set (ie future did not complete with result or cancel}
 */
public boolean setFailure(Throwable failure){
  if (!setDone()) {
    return false;
  }
  if (failure == null) {
    failure=new Exception();
  }
  this.failure=failure;
  listenerHelper.callListeners();
  return true;
}","/** 
 * Call to indicate this future is done, and provide the occurred failure.  It is expected that  only this or   {@link #setResult(Object)} are called, and only called once.  If the provided failure is  {@code null}, a new   {@link Exception} will be created so that something is always provided in the  {@link ExecutionException} on calls to {@link #get()}. If future has already completed and constructed with   {@link #SettableListenableFuture()} or {@code true} provided to {@link #SettableListenableFuture(boolean)} this will throw an {@link IllegalStateException}.  If complete but constructed with a   {@code false} this failure result will be ignored.
 * @param failure Throwable that caused failure during computation.
 * @return {@code true} if the failure was set (ie future did not complete with result or cancel}
 */
public boolean setFailure(Throwable failure){
  if (setDone()) {
    if (failure == null) {
      failure=new Exception();
    }
    this.failure=failure;
synchronized (resultLock) {
      resultLock.notifyAll();
    }
    listenerHelper.callListeners();
    return true;
  }
  return false;
}",0.907840440165062
161670,"/** 
 * Call to calculate how many milliseconds until the provided time.  If we are past the  provided hour/minute, it will be the milliseconds until we reach that time with the NEXT day.   Because of use of   {@link Clock#lastKnownTimeMillis()}, this calculation will only be accurate  within about 100 milliseconds.  Of course if provided to a scheduler, depending on it's work  load that variation may be greater.
 * @param now Current time in milliseconds since epoc
 * @param hour Hour in the 24 hour format, can not be negative and must be less than 24
 * @param minute Minute to calculate too, can not be negative and must be less than 60
 * @return Time in milliseconds till provided time is reached
 */
protected static long getDelayTillHour(long now,int hour,int minute){
  long delayInMillis=TimeUnit.MINUTES.toMillis(minute);
  long currentHour=TimeUnit.MILLISECONDS.toHours(now % TimeUnit.DAYS.toMillis(1));
  if (hour > currentHour) {
    delayInMillis+=TimeUnit.HOURS.toMillis(hour - currentHour);
  }
 else   if (hour < currentHour) {
    delayInMillis+=TimeUnit.HOURS.toMillis(TimeUnit.DAYS.toHours(1) - currentHour + hour);
  }
 else {
    return getDelayTillMinute(Clock.lastKnownTimeMillis(),minute);
  }
  long offset=now % TimeUnit.HOURS.toMillis(1);
  return delayInMillis - offset;
}","/** 
 * Call to calculate how many milliseconds until the provided time.  If we are past the  provided hour/minute, it will be the milliseconds until we reach that time with the NEXT day.   Because of use of   {@link Clock#lastKnownTimeMillis()}, this calculation will only be accurate  within about 100 milliseconds.  Of course if provided to a scheduler, depending on it's work  load that variation may be greater.
 * @param now Current time in milliseconds since epoc
 * @param hour Hour in the 24 hour format, can not be negative and must be less than 24
 * @param minute Minute to calculate too, can not be negative and must be less than 60
 * @return Time in milliseconds till provided time is reached
 */
protected static long getDelayTillHour(long now,int hour,int minute){
  long delayInMillis=TimeUnit.MINUTES.toMillis(minute);
  long currentHour=TimeUnit.MILLISECONDS.toHours(now % TimeUnit.DAYS.toMillis(1));
  if (hour > currentHour) {
    delayInMillis+=TimeUnit.HOURS.toMillis(hour - currentHour);
  }
 else   if (hour < currentHour) {
    delayInMillis+=TimeUnit.HOURS.toMillis(TimeUnit.DAYS.toHours(1) - currentHour + hour);
  }
 else {
    long result=getDelayTillMinute(Clock.lastKnownTimeMillis(),minute);
    if (TimeUnit.MILLISECONDS.toMinutes(result) <= minute) {
      return result;
    }
 else {
      return result + TimeUnit.HOURS.toMillis(TimeUnit.DAYS.toHours(1) - 1);
    }
  }
  long offset=now % TimeUnit.HOURS.toMillis(1);
  return delayInMillis - offset;
}",0.9163688348820586
161671,"/** 
 * Call to check if the service has been started, and not shutdown yet.
 * @return {@code true} if the service is currently running
 */
public boolean isRunning(){
  return state.get() == 1;
}","/** 
 * Call to check if the service has been started, and not shutdown yet.  If you need a check  that will be consistent while both new and while running please see   {@link #hasBeenStopped()}.
 * @return {@code true} if the service is currently running
 */
public boolean isRunning(){
  return state.get() == 1;
}",0.7680311890838206
161672,"/** 
 * Finishes shutdown process, and clears any tasks that remain in the queue.
 * @return a list of runnables which remained in the queue after shutdown
 */
private List<Runnable> finishShutdown(){
  shutdownFinished=true;
  scheduler.cancelTick();
  return scheduler.clearTasks();
}","/** 
 * Finishes shutdown process, and clears any tasks that remain in the queue.
 * @return a list of runnables which remained in the queue after shutdown
 */
private List<Runnable> finishShutdown(){
  state.set(2);
  scheduler.cancelTick();
  return scheduler.clearTasks();
}",0.9449378330373002
161673,"/** 
 * Gets the instance of the scheduler for this instance.  The scheduler must be accessed from  this function because it is lazily constructed and started.  This call will verify the  scheduler is running before it is returned
 * @return instance of the internal scheduler
 * @throws RejectedExecutionException thrown if the scheduler has been shutdown
 */
protected NoThreadScheduler getRunningScheduler() throws RejectedExecutionException {
  SchedulerManager result=getSchedulerManager();
  if (!result.isRunning()) {
    throw new RejectedExecutionException(""String_Node_Str"");
  }
  return result.scheduler;
}","/** 
 * Gets the instance of the scheduler for this instance.  The scheduler must be accessed from  this function because it is lazily constructed and started.  This call will verify the  scheduler is running before it is returned
 * @return instance of the internal scheduler
 * @throws RejectedExecutionException thrown if the scheduler has been shutdown
 */
protected NoThreadScheduler getRunningScheduler() throws RejectedExecutionException {
  SchedulerManager result=getSchedulerManager();
  if (result.hasBeenStopped()) {
    throw new RejectedExecutionException(""String_Node_Str"");
  }
  return result.scheduler;
}",0.9806451612903224
161674,"@Override public void run(){
  while (!shutdownFinished) {
    try {
      scheduler.tick(null);
    }
 catch (    InterruptedException e) {
      Thread.interrupted();
    }
catch (    Throwable t) {
      ExceptionUtils.handleException(t);
    }
  }
}","@Override public void run(){
  while (state.get() != 2) {
    try {
      scheduler.tick(null);
    }
 catch (    InterruptedException e) {
      Thread.interrupted();
    }
catch (    Throwable t) {
      ExceptionUtils.handleException(t);
    }
  }
}",0.9386138613861386
161675,"protected SchedulerManager(ThreadFactory threadFactory){
  scheduler=new NoThreadScheduler(true);
  execThread=threadFactory.newThread(this);
  if (execThread.isAlive()) {
    throw new IllegalThreadStateException();
  }
  shutdownFinished=false;
}","public SchedulerManager(ThreadFactory threadFactory){
  scheduler=new NoThreadScheduler(true);
  execThread=threadFactory.newThread(this);
  if (execThread.isAlive()) {
    throw new IllegalThreadStateException();
  }
}",0.9164882226980728
161676,"/** 
 * Call to stop the thread which is running tasks.  If this has already been stopped this call  will have no effect.  Regardless if true or false is passed in, running tasks will NOT be  Interrupted or stopped.  True will only prevent ANY extra tasks from running, while a false  will let tasks ready to run complete before shutting down.
 * @param stopImmediately {@code false} if the scheduler should let ready tasks run, {@code true} stops scheduler immediately
 * @return if {@code stopImmediately} is {@code true}, this will include tasks which were queued to run,  otherwise will be an empty list
 */
protected List<Runnable> stop(boolean stopImmediately){
  if (stopIfRunning()) {
    if (stopImmediately) {
      return finishShutdown();
    }
 else {
      scheduler.execute(new Runnable(){
        @Override public void run(){
          finishShutdown();
        }
      }
);
    }
  }
  return Collections.emptyList();
}","/** 
 * Call to stop the thread which is running tasks.  If this has already been stopped this call  will have no effect.  Regardless if true or false is passed in, running tasks will NOT be  Interrupted or stopped.  True will only prevent ANY extra tasks from running, while a false  will let tasks ready to run complete before shutting down.
 * @param stopImmediately {@code false} if the scheduler should let ready tasks run, {@code true} stops scheduler immediately
 * @return if {@code stopImmediately} is {@code true}, this will include tasks which were queued to run,  otherwise will be an empty list
 */
public List<Runnable> stop(boolean stopImmediately){
  int stateVal=state.get();
  while (stateVal < 1) {
    if (state.compareAndSet(stateVal,1)) {
      if (stopImmediately || stateVal == -1) {
        return finishShutdown();
      }
 else {
        scheduler.execute(new Runnable(){
          @Override public void run(){
            finishShutdown();
          }
        }
);
      }
      break;
    }
 else {
      stateVal=state.get();
    }
  }
  return Collections.emptyList();
}",0.7952871870397643
161677,"@Override public boolean isShutdown(){
  SchedulerManager sm=sManager.get();
  if (sm != null) {
    return !sm.isRunning();
  }
 else {
    return false;
  }
}","@Override public boolean isShutdown(){
  SchedulerManager sm=sManager.get();
  if (sm != null) {
    return sm.hasBeenStopped();
  }
 else {
    return false;
  }
}",0.9382716049382716
161678,"@Override public boolean isTerminated(){
  SchedulerManager sm=singleThreadScheduler.sManager.get();
  if (sm == null || sm.isRunning()) {
    return false;
  }
 else {
    return !sm.execThread.isAlive();
  }
}","@Override public boolean isTerminated(){
  SchedulerManager sm=singleThreadScheduler.sManager.get();
  if (sm == null || !sm.hasBeenStopped()) {
    return false;
  }
 else {
    return !sm.execThread.isAlive();
  }
}",0.9299065420560748
161679,"/** 
 * Getter for the currently set keep alive time.
 * @return current keep alive time
 */
public long getKeepAliveTime(){
  return keepAliveTimeInMs;
}","/** 
 * Getter for the currently set worker keep alive time.
 * @return current keep alive time
 */
public long getKeepAliveTime(){
  return keepAliveTimeInMs;
}",0.9777777777777776
161680,"@Override public void run(){
  shutdownNow();
}","@Override public void run(){
  lowPriorityConsumer.stopAndDrainQueueInto(null);
  highPriorityConsumer.stopAndDrainQueueInto(null);
  wm.finishShutdown();
}",0.4334975369458128
161681,"@Override public void executing(){
  if (canceled) {
    return;
  }
  executing=true;
switch (priority) {
case High:
    highPriorityConsumer.addScheduledLast(this);
  break;
case Low:
lowPriorityConsumer.addScheduledLast(this);
break;
default :
throw new UnsupportedOperationException();
}
}","@Override public void executing(){
  if (canceled) {
    return;
  }
  executing=true;
  queueManager.addScheduledLast(this);
}",0.5619047619047619
161682,"/** 
 * After a task has been pulled from the queue and is ready to execute it is provided here.   This function will get an available worker (or create one if necessary and possible), and  then provide the task to that available worker.
 * @param task Task to execute once we have an available worker
 * @throws InterruptedException Thrown if thread is interrupted while waiting for a worker
 */
protected void runHighPriorityTask(TaskWrapper task) throws InterruptedException {
  Worker w=null;
synchronized (workersLock) {
    if (!shutdownFinishing) {
      if (currentPoolSize >= maxPoolSize) {
        lastHighDelay=task.getDelayEstimateInMillis();
        w=getExistingWorker(Long.MAX_VALUE);
      }
 else {
        lastHighDelay=0;
        if (availableWorkers.isEmpty()) {
          w=makeNewWorker();
        }
 else {
          w=availableWorkers.removeFirst();
        }
      }
    }
  }
  if (w != null) {
    w.nextTask(task);
  }
}","/** 
 * After a task has been pulled from the queue and is ready to execute it is provided here.   This function will get an available worker (or create one if necessary and possible), and  then provide the task to that available worker.
 * @param task Task to execute once we have an available worker
 * @throws InterruptedException Thrown if thread is interrupted while waiting for a worker
 */
protected void runHighPriorityTask(TaskWrapper task) throws InterruptedException {
  Worker w=null;
synchronized (workersLock) {
    if (!shutdownFinishing) {
      if (currentPoolSize >= maxPoolSize) {
        lastHighDelayMillis=task.getDelayEstimateInMs();
        w=getExistingWorker(Long.MAX_VALUE);
        lastHighDelayMillis=task.getDelayEstimateInMs();
      }
 else {
        lastHighDelayMillis=0;
        if (availableWorkers.isEmpty()) {
          w=makeNewWorker();
        }
 else {
          w=availableWorkers.removeFirst();
        }
      }
    }
  }
  if (w != null) {
    w.nextTask(task);
  }
}",0.9627740948495666
161683,"/** 
 * Call to check how many tasks are currently being executed in this thread pool.
 * @return current number of running tasks
 */
public int getCurrentRunningCount(){
synchronized (workersLock) {
    return currentPoolSize - availableWorkers.size();
  }
}","/** 
 * Call to check how many workers are currently executing tasks.
 * @return current number of workers executing tasks
 */
public int getCurrentRunningCount(){
synchronized (workersLock) {
    return currentPoolSize - availableWorkers.size();
  }
}",0.87279843444227
161684,"@Override public void scheduleAtFixedRate(Runnable task,long initialDelay,long period,TaskPriority priority){
  ArgumentVerifier.assertNotNull(task,""String_Node_Str"");
  ArgumentVerifier.assertNotNegative(initialDelay,""String_Node_Str"");
  ArgumentVerifier.assertGreaterThanZero(period,""String_Node_Str"");
  if (priority == null) {
    priority=defaultPriority;
  }
  addToScheduleQueue(new RecurringRateTaskWrapper(task,priority,initialDelay,period));
}","@Override public void scheduleAtFixedRate(Runnable task,long initialDelay,long period,TaskPriority priority){
  ArgumentVerifier.assertNotNull(task,""String_Node_Str"");
  ArgumentVerifier.assertNotNegative(initialDelay,""String_Node_Str"");
  ArgumentVerifier.assertGreaterThanZero(period,""String_Node_Str"");
  if (priority == null) {
    priority=defaultPriority;
  }
  addToScheduleQueue(priority,new RecurringRateTaskWrapper(task,getQueueManager(priority),initialDelay,period));
}",0.9550321199143468
161685,"public TaskWrapper(Runnable task,TaskPriority priority){
  this.priority=priority;
  this.task=task;
  canceled=false;
}","public TaskWrapper(Runnable task){
  this.task=task;
  canceled=false;
}",0.75
161686,"protected RecurringRateTaskWrapper(Runnable task,TaskPriority priority,long initialDelay,long period){
  super(task,priority,initialDelay);
  this.period=period;
}","protected RecurringRateTaskWrapper(Runnable task,QueueManager queueManager,long initialDelay,long period){
  super(task,queueManager,initialDelay);
  this.period=period;
}",0.8263473053892215
161687,"/** 
 * After a task has been pulled from the queue and is ready to execute it is provided here.   This function will get an available worker, waiting a bit of time for one to become  available if none are immediately available.  If after that there is still none available it  will create one (assuming we have not reached our max pool size).  Then the acquired worker  will be provided the task to execute.
 * @param task Task to execute once we have an available worker
 * @throws InterruptedException Thrown if thread is interrupted while waiting for a worker
 */
protected void runLowPriorityTask(TaskWrapper task) throws InterruptedException {
  Worker w=null;
synchronized (workersLock) {
    if (!shutdownFinishing) {
      long waitAmount;
      while (currentPoolSize >= maxPoolSize && availableWorkers.size() < WORKER_CONTENTION_LEVEL && !shutdownFinishing && !highPriorityConsumer.isQueueEmpty() && (waitAmount=task.getDelayEstimateInMillis() - lastHighDelay) > LOW_PRIORITY_WAIT_TOLLERANCE_IN_MS) {
        workersLock.wait(waitAmount);
        Clock.systemNanoTime();
      }
      if (highPriorityConsumer.isQueueEmpty()) {
        lastHighDelay=0;
      }
      if (!shutdownFinishing) {
        if (currentPoolSize >= maxPoolSize) {
          w=getExistingWorker(Long.MAX_VALUE);
        }
 else         if (currentPoolSize == 0) {
          w=makeNewWorker();
        }
 else {
          w=getExistingWorker(maxWaitForLowPriorityInMs);
          if (w == null) {
            if (currentPoolSize >= maxPoolSize) {
              w=getExistingWorker(Long.MAX_VALUE);
            }
 else {
              w=makeNewWorker();
            }
          }
        }
      }
    }
  }
  if (w != null) {
    w.nextTask(task);
  }
}","/** 
 * After a task has been pulled from the queue and is ready to execute it is provided here.   This function will get an available worker, waiting a bit of time for one to become  available if none are immediately available.  If after that there is still none available it  will create one (assuming we have not reached our max pool size).  Then the acquired worker  will be provided the task to execute.
 * @param task Task to execute once we have an available worker
 * @throws InterruptedException Thrown if thread is interrupted while waiting for a worker
 */
protected void runLowPriorityTask(TaskWrapper task) throws InterruptedException {
  Worker w=null;
synchronized (workersLock) {
    if (!shutdownFinishing) {
      long waitMs;
      while (currentPoolSize >= maxPoolSize && availableWorkers.size() < WORKER_CONTENTION_LEVEL && !shutdownFinishing && (waitMs=task.getDelayEstimateInMs() - lastHighDelayMillis) > LOW_PRIORITY_WAIT_TOLLERANCE_IN_MS) {
        workersLock.wait(waitMs);
        Clock.systemNanoTime();
      }
      if (!shutdownFinishing) {
        if (currentPoolSize >= maxPoolSize) {
          w=getExistingWorker(Long.MAX_VALUE);
        }
 else         if (currentPoolSize == 0) {
          w=makeNewWorker();
        }
 else {
          w=getExistingWorker(maxWaitForLowPriorityInMs);
          if (w == null) {
            if (currentPoolSize >= maxPoolSize) {
              w=getExistingWorker(Long.MAX_VALUE);
            }
 else {
              w=makeNewWorker();
            }
          }
        }
      }
    }
  }
  if (w != null) {
    w.nextTask(task);
  }
}",0.9503291442250148
161688,"/** 
 * Returns a count of how many tasks are either waiting to be executed, or are scheduled to be  executed at a future point for a specific priority.
 * @param priority priority for tasks to be counted
 * @return quantity of tasks waiting execution or scheduled to be executed later
 */
public int getScheduledTaskCount(TaskPriority priority){
  if (priority == null) {
    return getScheduledTaskCount();
  }
switch (priority) {
case High:
    return highPriorityConsumer.queueSize();
case Low:
  return lowPriorityConsumer.queueSize();
default :
throw new UnsupportedOperationException();
}
}","/** 
 * Returns a count of how many tasks are either waiting to be executed, or are scheduled to be  executed at a future point for a specific priority.
 * @param priority priority for tasks to be counted
 * @return quantity of tasks waiting execution or scheduled to be executed later
 */
public int getScheduledTaskCount(TaskPriority priority){
  if (priority == null) {
    return getScheduledTaskCount();
  }
  return getQueueManager(priority).queueSize();
}",0.8271954674220963
161689,"protected RecurringDelayTaskWrapper(Runnable task,TaskPriority priority,long initialDelay,long recurringDelay){
  super(task,priority,initialDelay);
  this.recurringDelay=recurringDelay;
}","protected RecurringDelayTaskWrapper(Runnable task,QueueManager queueManager,long initialDelay,long recurringDelay){
  super(task,queueManager,initialDelay);
  this.recurringDelay=recurringDelay;
}",0.8489583333333334
161690,"public QueueManager(ThreadFactory threadFactory,String threadName){
  this.threadFactory=threadFactory;
  this.threadName=threadName;
  this.executeQueue=new ConcurrentLinkedQueue<OneTimeTaskWrapper>();
  this.scheduleQueue=new ConcurrentArrayList<TaskWrapper>(QUEUE_FRONT_PADDING,QUEUE_REAR_PADDING);
  runningThread=null;
}","public QueueManager(WorkerPool workerPool,TaskPriority queuePriority,String threadName){
  this.workerPool=workerPool;
  this.threadName=threadName;
  this.executeQueue=new ConcurrentLinkedQueue<OneTimeTaskWrapper>();
  this.scheduleQueue=new ConcurrentArrayList<TaskWrapper>(QUEUE_FRONT_PADDING,QUEUE_REAR_PADDING);
  this.queuePriority=queuePriority;
  runningThread=null;
}",0.776034236804565
161691,"/** 
 * Stops any new tasks from being submitted to the pool.  But allows all tasks which are  submitted to execute, or scheduled (and have elapsed their delay time) to run.  If recurring  tasks are present they will also be unable to reschedule.  If   {@code shutdown()} or {@link #shutdownNow()} has already been called, this will have no effect.  If you wish to not want to run any queued tasks you should use  {@link #shutdownNow()}.
 */
public void shutdown(){
  if (!shutdownStarted.getAndSet(true)) {
    highPriorityConsumer.addExecute(new OneTimeTaskWrapper(new ShutdownRunnable(),TaskPriority.High,1));
  }
}","/** 
 * Stops any new tasks from being submitted to the pool.  But allows all tasks which are  submitted to execute, or scheduled (and have elapsed their delay time) to run.  If recurring  tasks are present they will also be unable to reschedule.  If   {@code shutdown()} or {@link #shutdownNow()} has already been called, this will have no effect.  If you wish to not want to run any queued tasks you should use  {@link #shutdownNow()}.
 */
public void shutdown(){
  if (workerPool.startShutdown()) {
    ShutdownRunnable sr=new ShutdownRunnable(workerPool,lowPriorityConsumer,highPriorityConsumer);
    highPriorityConsumer.addExecute(new OneTimeTaskWrapper(sr,1));
  }
}",0.8443067389620449
161692,"/** 
 * Change the set idle thread keep alive time.  If this is a reduction in the previously set  keep alive time, this call will then check for expired worker threads.
 * @param keepAliveTimeInMs New keep alive time in milliseconds
 */
public void setKeepAliveTime(long keepAliveTimeInMs){
  ArgumentVerifier.assertNotNegative(keepAliveTimeInMs,""String_Node_Str"");
  boolean checkForExpiredWorkers=this.keepAliveTimeInMs > keepAliveTimeInMs;
  this.keepAliveTimeInMs=keepAliveTimeInMs;
  if (checkForExpiredWorkers) {
synchronized (workersLock) {
      expireOldWorkers();
    }
  }
}","/** 
 * Change the set idle worker keep alive time.  If this is a reduction in the previously set  keep alive time, this call will then check for expired workers.
 * @param keepAliveTimeInMs New keep alive time in milliseconds
 */
public void setKeepAliveTime(long keepAliveTimeInMs){
  ArgumentVerifier.assertNotNegative(keepAliveTimeInMs,""String_Node_Str"");
  boolean checkForExpiredWorkers=this.keepAliveTimeInMs > keepAliveTimeInMs;
  this.keepAliveTimeInMs=keepAliveTimeInMs;
  if (checkForExpiredWorkers) {
synchronized (workersLock) {
      expireOldWorkers();
    }
  }
}",0.9836909871244636
161693,"@Override public boolean isShutdown(){
  return shutdownStarted.get();
}","@Override public boolean isShutdown(){
  return workerPool.isShutdownStarted();
}",0.8888888888888888
161694,"/** 
 * Adds the ready TaskWrapper to the correct schedule queue.  Using the priority specified in the  task, we pick the correct queue and add it. If this is just a single execution with no delay use   {@link #addToExecuteQueue(OneTimeTaskWrapper)}.
 * @param task {@link TaskWrapper} to queue for the scheduler
 */
protected void addToScheduleQueue(TaskWrapper task){
  if (shutdownStarted.get()) {
    throw new RejectedExecutionException(""String_Node_Str"");
  }
switch (task.priority) {
case High:
    highPriorityConsumer.addScheduled(task);
  break;
case Low:
lowPriorityConsumer.addScheduled(task);
break;
default :
throw new UnsupportedOperationException();
}
}","/** 
 * Adds the ready TaskWrapper to the correct schedule queue.  Using the priority specified in the  task, we pick the correct queue and add it. If this is just a single execution with no delay use   {@link #addToExecuteQueue(OneTimeTaskWrapper)}.
 * @param task {@link TaskWrapper} to queue for the scheduler
 */
protected void addToScheduleQueue(TaskPriority priority,TaskWrapper task){
  if (workerPool.isShutdownStarted()) {
    throw new RejectedExecutionException(""String_Node_Str"");
  }
  getQueueManager(priority).addScheduled(task);
}",0.7753086419753087
161695,"protected RecurringTaskWrapper(Runnable task,TaskPriority priority,long initialDelay){
  super(task,priority);
  executing=false;
  this.nextRunTime=Clock.accurateForwardProgressingMillis() + initialDelay;
}","protected RecurringTaskWrapper(Runnable task,QueueManager queueManager,long initialDelay){
  super(task);
  this.queueManager=queueManager;
  executing=false;
  this.nextRunTime=Clock.accurateForwardProgressingMillis() + initialDelay;
}",0.7990970654627539
161696,"@Override public void scheduleWithFixedDelay(Runnable task,long initialDelay,long recurringDelay,TaskPriority priority){
  ArgumentVerifier.assertNotNull(task,""String_Node_Str"");
  ArgumentVerifier.assertNotNegative(initialDelay,""String_Node_Str"");
  ArgumentVerifier.assertNotNegative(recurringDelay,""String_Node_Str"");
  if (priority == null) {
    priority=defaultPriority;
  }
  addToScheduleQueue(new RecurringDelayTaskWrapper(task,priority,initialDelay,recurringDelay));
}","@Override public void scheduleWithFixedDelay(Runnable task,long initialDelay,long recurringDelay,TaskPriority priority){
  ArgumentVerifier.assertNotNull(task,""String_Node_Str"");
  ArgumentVerifier.assertNotNegative(initialDelay,""String_Node_Str"");
  ArgumentVerifier.assertNotNegative(recurringDelay,""String_Node_Str"");
  if (priority == null) {
    priority=defaultPriority;
  }
  addToScheduleQueue(priority,new RecurringDelayTaskWrapper(task,getQueueManager(priority),initialDelay,recurringDelay));
}",0.9572301425661914
161697,"/** 
 * Constructs a new thread pool, though no threads will be started till it accepts it's first  request.  This provides the extra parameters to tune what tasks submitted without a priority  will be scheduled as.  As well as the maximum wait for low priority tasks.  The longer low  priority tasks wait for a worker, the less chance they will have to make a thread.  But it  also makes low priority tasks execution time less predictable.
 * @param corePoolSize pool size that should be maintained
 * @param maxPoolSize maximum allowed thread count
 * @param keepAliveTimeInMs time to wait for a given thread to be idle before killing
 * @param defaultPriority priority to give tasks which do not specify it
 * @param maxWaitForLowPriorityInMs time low priority tasks wait for a worker
 * @param threadFactory thread factory for producing new threads within executor
 */
public PriorityScheduler(int corePoolSize,int maxPoolSize,long keepAliveTimeInMs,TaskPriority defaultPriority,long maxWaitForLowPriorityInMs,ThreadFactory threadFactory){
  ArgumentVerifier.assertGreaterThanZero(corePoolSize,""String_Node_Str"");
  if (maxPoolSize < corePoolSize) {
    throw new IllegalArgumentException(""String_Node_Str"");
  }
  setKeepAliveTime(keepAliveTimeInMs);
  setMaxWaitForLowPriority(maxWaitForLowPriorityInMs);
  if (defaultPriority == null) {
    defaultPriority=DEFAULT_PRIORITY;
  }
  if (threadFactory == null) {
    threadFactory=new ConfigurableThreadFactory(PriorityScheduler.class.getSimpleName() + ""String_Node_Str"",true);
  }
  this.defaultPriority=defaultPriority;
  workersLock=new Object();
  poolSizeChangeLock=new Object();
  availableWorkers=new ArrayDeque<Worker>(corePoolSize);
  this.threadFactory=threadFactory;
  highPriorityConsumer=new QueueManager(threadFactory,TaskPriority.High + QUEUE_CONSUMER_THREAD_NAME_SUFFIX);
  lowPriorityConsumer=new QueueManager(threadFactory,TaskPriority.Low + QUEUE_CONSUMER_THREAD_NAME_SUFFIX);
  shutdownStarted=new AtomicBoolean(false);
  shutdownFinishing=false;
  this.corePoolSize=corePoolSize;
  this.maxPoolSize=maxPoolSize;
  this.allowCorePoolTimeout=false;
  this.lastHighDelay=0;
  waitingForWorkerCount=0;
  currentPoolSize=0;
}","/** 
 * This constructor is designed for extending classes to be able to provide their own  implementation of   {@link WorkerPool}.  Ultimately all constructors will defer to this one.
 * @param workerPool WorkerPool to handle accepting tasks and providing them to a worker for execution
 * @param defaultPriority Default priority to store in case no priority is provided for tasks
 */
protected PriorityScheduler(WorkerPool workerPool,TaskPriority defaultPriority){
  if (defaultPriority == null) {
    defaultPriority=DEFAULT_PRIORITY;
  }
  this.workerPool=workerPool;
  this.defaultPriority=defaultPriority;
  highPriorityConsumer=new QueueManager(workerPool,TaskPriority.High,TaskPriority.High + QUEUE_CONSUMER_THREAD_NAME_SUFFIX);
  lowPriorityConsumer=new QueueManager(workerPool,TaskPriority.Low,TaskPriority.Low + QUEUE_CONSUMER_THREAD_NAME_SUFFIX);
}",0.1931260229132569
161698,"private void clearQueue(Collection<? extends TaskWrapper> queue,List<Runnable> resultList){
  Iterator<? extends TaskWrapper> it=queue.iterator();
  while (it.hasNext()) {
    TaskWrapper tw=it.next();
    tw.cancel();
    if (!(tw.task instanceof ShutdownRunnable)) {
      resultList.add(tw.task);
    }
  }
  queue.clear();
}","private static void clearQueue(Collection<? extends TaskWrapper> queue,List<Runnable> resultList){
  Iterator<? extends TaskWrapper> it=queue.iterator();
  while (it.hasNext()) {
    TaskWrapper tw=it.next();
    tw.cancel();
    if (resultList != null && !(tw.task instanceof ShutdownRunnable)) {
      resultList.add(tw.task);
    }
  }
  queue.clear();
}",0.9576642335766424
161699,"/** 
 * Getter for the current set core pool size.
 * @return current core pool size
 */
public int getCorePoolSize(){
  return corePoolSize;
}","/** 
 * Getter for the current set core worker pool size.
 * @return current core pool size
 */
public int getCorePoolSize(){
  return corePoolSize;
}",0.9761092150170648
161700,"protected TaskWrapper getNextTask() throws InterruptedException {
  while (runningThread != null) {
    TaskWrapper nextScheduledTask=scheduleQueue.peekFirst();
    TaskWrapper nextExecuteTask=executeQueue.peek();
    if (nextExecuteTask != null) {
      if (nextScheduledTask != null) {
        long scheduleDelay;
        long executeDelay;
        ClockWrapper.stopForcingUpdate();
        try {
          scheduleDelay=nextScheduledTask.getDelay(TimeUnit.MILLISECONDS);
          executeDelay=nextExecuteTask.getDelay(TimeUnit.MILLISECONDS);
        }
  finally {
          ClockWrapper.resumeForcingUpdate();
        }
        if (scheduleDelay < executeDelay) {
synchronized (scheduleQueue.getModificationLock()) {
            if (scheduleQueue.remove(nextScheduledTask)) {
              nextScheduledTask.executing();
              return nextScheduledTask;
            }
          }
        }
 else         if (executeQueue.remove(nextExecuteTask)) {
          nextExecuteTask.executing();
          return nextExecuteTask;
        }
      }
 else       if (executeQueue.remove(nextExecuteTask)) {
        nextExecuteTask.executing();
        return nextExecuteTask;
      }
    }
 else     if (nextScheduledTask != null) {
      if (nextScheduledTask.getDelay(TimeUnit.MILLISECONDS) <= 0) {
synchronized (scheduleQueue.getModificationLock()) {
          if (scheduleQueue.remove(nextScheduledTask)) {
            nextScheduledTask.executing();
            return nextScheduledTask;
          }
        }
      }
 else {
        LockSupport.parkNanos(Clock.NANOS_IN_MILLISECOND * nextScheduledTask.getDelay(TimeUnit.MILLISECONDS));
      }
    }
 else {
      LockSupport.park();
    }
    if (Thread.currentThread().isInterrupted()) {
      throw new InterruptedException();
    }
  }
  return null;
}","protected TaskWrapper getNextTask() throws InterruptedException {
  while (runningThread != null) {
    TaskWrapper nextScheduledTask=scheduleQueue.peekFirst();
    TaskWrapper nextExecuteTask=executeQueue.peek();
    if (nextExecuteTask != null) {
      if (nextScheduledTask != null) {
        long scheduleDelay;
        long executeDelay;
        ClockWrapper.stopForcingUpdate();
        try {
          scheduleDelay=nextScheduledTask.getDelay(TimeUnit.MILLISECONDS);
          executeDelay=nextExecuteTask.getDelay(TimeUnit.MILLISECONDS);
        }
  finally {
          ClockWrapper.resumeForcingUpdate();
        }
        if (scheduleDelay < executeDelay) {
synchronized (scheduleQueue.getModificationLock()) {
            if (scheduleQueue.remove(nextScheduledTask)) {
              nextScheduledTask.executing();
              return nextScheduledTask;
            }
          }
        }
 else         if (executeQueue.remove(nextExecuteTask)) {
          nextExecuteTask.executing();
          return nextExecuteTask;
        }
      }
 else       if (executeQueue.remove(nextExecuteTask)) {
        nextExecuteTask.executing();
        return nextExecuteTask;
      }
    }
 else     if (nextScheduledTask != null) {
      if (nextScheduledTask.getDelay(TimeUnit.MILLISECONDS) <= 0) {
synchronized (scheduleQueue.getModificationLock()) {
          if (scheduleQueue.remove(nextScheduledTask)) {
            nextScheduledTask.executing();
            return nextScheduledTask;
          }
        }
      }
 else {
        if (queuePriority == TaskPriority.High) {
          workerPool.handleEstimatedTimeTillNextHighPriority(nextScheduledTask.getDelayEstimateInMs());
        }
        LockSupport.parkNanos(Clock.NANOS_IN_MILLISECOND * nextScheduledTask.getDelay(TimeUnit.MILLISECONDS));
      }
    }
 else {
      if (queuePriority == TaskPriority.High) {
        workerPool.handleEstimatedTimeTillNextHighPriority(Long.MAX_VALUE);
      }
      LockSupport.park();
    }
    if (Thread.currentThread().isInterrupted()) {
      throw new InterruptedException();
    }
  }
  return null;
}",0.9167517875383044
161701,"/** 
 * After the task has completed, this will reschedule the task to run again.
 */
private void reschedule(){
  updateNextRunTime();
switch (priority) {
case High:
    highPriorityConsumer.reschedule(this);
  break;
case Low:
lowPriorityConsumer.reschedule(this);
break;
default :
throw new UnsupportedOperationException();
}
executing=false;
}","/** 
 * After the task has completed, this will reschedule the task to run again.
 */
private void reschedule(){
  updateNextRunTime();
  queueManager.reschedule(this);
  executing=false;
}",0.6716417910447762
161702,"/** 
 * Checks the interrupted status of the workers thread.  If it is interrupted the status will  be cleared (unless the pool is shutting down, in which case we will gracefully shutdown the  worker).
 */
private void checkInterrupted(){
  if (Thread.interrupted()) {
    if (shutdownFinishing) {
      killWorker(this);
    }
  }
}","/** 
 * Checks the interrupted status of the workers thread.  If it is interrupted the status will  be cleared (unless the pool is shutting down, in which case we will gracefully shutdown the  worker).
 */
private void checkInterrupted(){
  if (Thread.interrupted()) {
    if (workerPool.isShutdownFinished()) {
      workerPool.killWorker(this);
    }
  }
}",0.9522431259044862
161703,"/** 
 * Makes a new   {@link PrioritySchedulerLimiter} that uses this pool as it's execution source.
 * @param maxConcurrency maximum number of threads to run in parallel in sub pool
 * @param subPoolName name to describe threads while running under this sub pool
 * @return newly created {@link PrioritySchedulerLimiter} that uses this pool as it's execution source
 */
public PrioritySchedulerInterface makeSubPool(int maxConcurrency,String subPoolName){
  if (maxConcurrency > maxPoolSize) {
    throw new IllegalArgumentException(""String_Node_Str"");
  }
  return new PrioritySchedulerLimiter(this,maxConcurrency,subPoolName);
}","/** 
 * Makes a new   {@link PrioritySchedulerLimiter} that uses this pool as it's execution source.
 * @param maxConcurrency maximum number of threads to run in parallel in sub pool
 * @param subPoolName name to describe threads while running under this sub pool
 * @return newly created {@link PrioritySchedulerLimiter} that uses this pool as it's execution source
 */
public PrioritySchedulerInterface makeSubPool(int maxConcurrency,String subPoolName){
  if (maxConcurrency > workerPool.getMaxPoolSize()) {
    throw new IllegalArgumentException(""String_Node_Str"");
  }
  return new PrioritySchedulerLimiter(this,maxConcurrency,subPoolName);
}",0.9859154929577464
161704,"/** 
 * Adds the ready TaskWrapper to the correct execute queue.  Using the priority specified in the  task, we pick the correct queue and add it. If this is a scheduled or recurring task use   {@link #addToScheduleQueue(TaskWrapper)}.
 * @param task {@link TaskWrapper} to queue for the scheduler
 */
protected void addToExecuteQueue(OneTimeTaskWrapper task){
  if (shutdownStarted.get()) {
    throw new RejectedExecutionException(""String_Node_Str"");
  }
switch (task.priority) {
case High:
    highPriorityConsumer.addExecute(task);
  break;
case Low:
lowPriorityConsumer.addExecute(task);
break;
default :
throw new UnsupportedOperationException();
}
}","/** 
 * Adds the ready TaskWrapper to the correct execute queue.  Using the priority specified in the  task, we pick the correct queue and add it. If this is a scheduled or recurring task use   {@link #addToScheduleQueue(TaskWrapper)}.
 * @param task {@link TaskWrapper} to queue for the scheduler
 */
protected void addToExecuteQueue(TaskPriority priority,OneTimeTaskWrapper task){
  if (workerPool.isShutdownStarted()) {
    throw new RejectedExecutionException(""String_Node_Str"");
  }
  getQueueManager(priority).addExecute(task);
}",0.7875734676742233
161705,"/** 
 * This function REQUIRES that workersLock is synchronized before calling.  This call creates  a new worker, starts it, but does NOT add it as an available worker (so you can immediately  use it).  If you want this worker to be available for other tasks, it must be added to the   {@code availableWorkers} queue.
 * @return Newly created worker, started and ready to accept work
 */
protected Worker makeNewWorker(){
  Worker w=new Worker();
  currentPoolSize++;
  w.start();
  return w;
}","/** 
 * This function REQUIRES that workersLock is synchronized before calling.  This call creates  a new worker, starts it, but does NOT add it as an available worker (so you can immediately  use it).  If you want this worker to be available for other tasks, it must be added to the   {@code availableWorkers} queue.
 * @return Newly created worker, started and ready to accept work
 */
protected Worker makeNewWorker(){
  Worker w=new Worker(this,threadFactory);
  currentPoolSize++;
  w.start();
  return w;
}",0.9821073558648112
161706,"/** 
 * Getter for the currently set max pool size.
 * @return current max pool size
 */
public int getMaxPoolSize(){
  return maxPoolSize;
}","/** 
 * Getter for the currently set max worker pool size.
 * @return current max pool size
 */
public int getMaxPoolSize(){
  return maxPoolSize;
}",0.9757785467128028
161707,"protected Worker(){
  thread=threadFactory.newThread(this);
  if (thread.isAlive()) {
    throw new IllegalThreadStateException();
  }
  lastRunTime=Clock.lastKnownForwardProgressingMillis();
  nextTask=null;
}","protected Worker(WorkerPool workerPool,ThreadFactory threadFactory){
  this.workerPool=workerPool;
  thread=threadFactory.newThread(this);
  if (thread.isAlive()) {
    throw new IllegalThreadStateException();
  }
  lastRunTime=Clock.lastKnownForwardProgressingMillis();
  nextTask=null;
}",0.8416833667334669
161708,"/** 
 * Stops any new tasks from being able to be executed and removes workers from the pool. This implementation refuses new submissions after this call.  And will NOT interrupt any  tasks which are currently running.  However any tasks which are waiting in queue to be run  (but have not started yet), will not be run.  Those waiting tasks will be removed, and as  workers finish with their current tasks the threads will be joined.
 * @return List of runnables which were waiting to execute
 */
public List<Runnable> shutdownNow(){
  shutdownStarted.set(true);
  shutdownAllIdleWorkers();
  List<Runnable> awaitingTasks=clearTaskQueue();
  shutdownFinishing=true;
  return awaitingTasks;
}","/** 
 * Stops any new tasks from being able to be executed and removes workers from the pool. This implementation refuses new submissions after this call.  And will NOT interrupt any  tasks which are currently running.  However any tasks which are waiting in queue to be run  (but have not started yet), will not be run.  Those waiting tasks will be removed, and as  workers finish with their current tasks the threads will be joined.
 * @return List of runnables which were waiting to execute
 */
public List<Runnable> shutdownNow(){
  workerPool.startShutdown();
  List<Runnable> awaitingTasks=clearTaskQueue();
  workerPool.finishShutdown();
  return awaitingTasks;
}",0.9104258443465492
161709,"/** 
 * Constructs a   {@link OneTimeTaskWrapper} and adds it to the most efficent queue.  If there is no delay it will use  {@link #addToExecuteQueue(OneTimeTaskWrapper)}, if there is a delay it  will be added to   {@link #addToScheduleQueue(TaskWrapper)}.
 * @param task Runnable to be executed
 * @param delayInMillis delay to wait before task is run
 * @param priority Priority for task execution
 */
protected void doSchedule(Runnable task,long delayInMillis,TaskPriority priority){
  OneTimeTaskWrapper taskWrapper=new OneTimeTaskWrapper(task,priority,delayInMillis);
  if (delayInMillis == 0) {
    addToExecuteQueue(taskWrapper);
  }
 else {
    addToScheduleQueue(taskWrapper);
  }
}","/** 
 * Constructs a   {@link OneTimeTaskWrapper} and adds it to the most efficent queue.  If there is no delay it will use  {@link #addToExecuteQueue(OneTimeTaskWrapper)}, if there is a delay it  will be added to   {@link #addToScheduleQueue(TaskWrapper)}.
 * @param task Runnable to be executed
 * @param delayInMillis delay to wait before task is run
 * @param priority Priority for task execution
 */
protected void doSchedule(Runnable task,long delayInMillis,TaskPriority priority){
  OneTimeTaskWrapper taskWrapper=new OneTimeTaskWrapper(task,delayInMillis);
  if (delayInMillis == 0) {
    addToExecuteQueue(priority,taskWrapper);
  }
 else {
    addToScheduleQueue(priority,taskWrapper);
  }
}",0.9806173725771716
161710,"protected OneTimeTaskWrapper(Runnable task,TaskPriority priority,long delay){
  super(task,priority);
  runTime=Clock.accurateForwardProgressingMillis() + delay;
}","protected OneTimeTaskWrapper(Runnable task,long delay){
  super(task);
  runTime=Clock.accurateForwardProgressingMillis() + delay;
}",0.8949152542372881
161711,"/** 
 * Ensures all core threads have been started.  This will make new idle workers to accept tasks.
 */
public void prestartAllCoreThreads(){
synchronized (workersLock) {
    boolean startedThreads=false;
    while (currentPoolSize <= corePoolSize) {
      availableWorkers.addFirst(makeNewWorker());
      startedThreads=true;
    }
    if (startedThreads) {
      workersLock.notifyAll();
    }
  }
}","/** 
 * Ensures all core threads have been started.  This will make new idle workers to accept tasks.
 */
public void prestartAllCoreThreads(){
synchronized (workersLock) {
    boolean startedThreads=false;
    while (currentPoolSize < corePoolSize) {
      availableWorkers.addFirst(makeNewWorker());
      startedThreads=true;
    }
    if (startedThreads) {
      workersLock.notifyAll();
    }
  }
}",0.9987608426270136
161712,"@Override protected ListenableScheduledFuture<?> scheduleAtFixedRate(Runnable task,long initialDelayInMillis,long periodInMillis){
  task=new ThrowableHandlingRecurringRunnable(pScheduler,task);
  ListenableRunnableFuture<Object> taskFuture=new ListenableFutureTask<Object>(true,task);
  RecurringRateTaskWrapper rrtw=pScheduler.new RecurringRateTaskWrapper(taskFuture,pScheduler.getDefaultPriority(),initialDelayInMillis,periodInMillis);
  pScheduler.addToScheduleQueue(rrtw);
  return new ScheduledFutureDelegate<Object>(taskFuture,rrtw);
}","@Override protected ListenableScheduledFuture<?> scheduleAtFixedRate(Runnable task,long initialDelayInMillis,long periodInMillis){
  task=new ThrowableHandlingRecurringRunnable(pScheduler,task);
  ListenableRunnableFuture<Object> taskFuture=new ListenableFutureTask<Object>(true,task);
  TaskPriority priority=pScheduler.getDefaultPriority();
  RecurringRateTaskWrapper rrtw=new RecurringRateTaskWrapper(taskFuture,pScheduler.getQueueManager(priority),initialDelayInMillis,periodInMillis);
  pScheduler.addToScheduleQueue(priority,rrtw);
  return new ScheduledFutureDelegate<Object>(taskFuture,rrtw);
}",0.8146853146853147
161713,"@Override protected <V>ListenableScheduledFuture<V> schedule(Callable<V> callable,long delayInMillis){
  ListenableRunnableFuture<V> taskFuture=new ListenableFutureTask<V>(false,callable);
  OneTimeTaskWrapper ottw=pScheduler.new OneTimeTaskWrapper(taskFuture,pScheduler.getDefaultPriority(),delayInMillis);
  if (delayInMillis == 0) {
    pScheduler.addToExecuteQueue(ottw);
  }
 else {
    pScheduler.addToScheduleQueue(ottw);
  }
  return new ScheduledFutureDelegate<V>(taskFuture,ottw);
}","@Override protected <V>ListenableScheduledFuture<V> schedule(Callable<V> callable,long delayInMillis){
  ListenableRunnableFuture<V> taskFuture=new ListenableFutureTask<V>(false,callable);
  OneTimeTaskWrapper ottw=new OneTimeTaskWrapper(taskFuture,delayInMillis);
  if (delayInMillis == 0) {
    pScheduler.addToExecuteQueue(pScheduler.getDefaultPriority(),ottw);
  }
 else {
    pScheduler.addToScheduleQueue(pScheduler.getDefaultPriority(),ottw);
  }
  return new ScheduledFutureDelegate<V>(taskFuture,ottw);
}",0.700497512437811
161714,"@Override protected ListenableScheduledFuture<?> scheduleWithFixedDelay(Runnable task,long initialDelayInMs,long delayInMs){
  task=new ThrowableHandlingRecurringRunnable(scheduler,task);
  ListenableRunnableFuture<Object> taskFuture=new ListenableFutureTask<Object>(true,task);
  RecurringDelayTaskWrapper rdtw=pScheduler.new RecurringDelayTaskWrapper(taskFuture,pScheduler.getDefaultPriority(),initialDelayInMs,delayInMs);
  pScheduler.addToScheduleQueue(rdtw);
  return new ScheduledFutureDelegate<Object>(taskFuture,rdtw);
}","@Override protected ListenableScheduledFuture<?> scheduleWithFixedDelay(Runnable task,long initialDelayInMs,long delayInMs){
  task=new ThrowableHandlingRecurringRunnable(scheduler,task);
  ListenableRunnableFuture<Object> taskFuture=new ListenableFutureTask<Object>(true,task);
  TaskPriority priority=pScheduler.getDefaultPriority();
  RecurringDelayTaskWrapper rdtw=new RecurringDelayTaskWrapper(taskFuture,pScheduler.getQueueManager(priority),initialDelayInMs,delayInMs);
  pScheduler.addToScheduleQueue(priority,rdtw);
  return new ScheduledFutureDelegate<Object>(taskFuture,rdtw);
}",0.7329749103942652
161715,"@Override protected void runHighPriorityTask(TaskWrapper task) throws InterruptedException {
  Worker w=null;
synchronized (workersLock) {
    if (!getShutdownFinishing()) {
synchronized (highPriorityWorkerAvailable.getModificationLock()) {
        highPriorityWorkerAvailable.add(!availableWorkers.isEmpty());
        trimList(highPriorityWorkerAvailable);
      }
      if (getCurrentPoolSize() >= getMaxPoolSize()) {
        w=getExistingWorker(Long.MAX_VALUE);
      }
 else {
        lastHighDelay=0;
        if (availableWorkers.isEmpty()) {
          w=makeNewWorker();
        }
 else {
          w=availableWorkers.removeFirst();
        }
      }
    }
  }
  if (w != null) {
    Clock.systemNanoTime();
    long executionDelay=task.getDelayEstimateInMillis();
    if (executionDelay <= 0) {
synchronized (highPriorityExecutionDelay.getModificationLock()) {
        highPriorityExecutionDelay.add(executionDelay * -1);
        trimList(highPriorityExecutionDelay);
      }
    }
    w.nextTask(task);
  }
}","@Override protected void runHighPriorityTask(TaskWrapper task) throws InterruptedException {
  Worker w=null;
synchronized (workersLock) {
    if (!getShutdownFinishing()) {
synchronized (highPriorityWorkerAvailable.getModificationLock()) {
        highPriorityWorkerAvailable.add(!availableWorkers.isEmpty());
        trimList(highPriorityWorkerAvailable);
      }
      if (getCurrentPoolSize() >= getMaxPoolSize()) {
        lastHighDelay=task.getDelayEstimateInMillis();
        w=getExistingWorker(Long.MAX_VALUE);
      }
 else {
        lastHighDelay=0;
        if (availableWorkers.isEmpty()) {
          w=makeNewWorker();
        }
 else {
          w=availableWorkers.removeFirst();
        }
      }
    }
  }
  if (w != null) {
    Clock.systemNanoTime();
    long executionDelay=task.getDelayEstimateInMillis();
    if (executionDelay <= 0) {
synchronized (highPriorityExecutionDelay.getModificationLock()) {
        highPriorityExecutionDelay.add(executionDelay * -1);
        trimList(highPriorityExecutionDelay);
      }
    }
    w.nextTask(task);
  }
}",0.973646382367034
161716,"/** 
 * Stops task consumers, and clears all waiting tasks (low and high priority).
 * @return A list of Runnables that had been removed from the queues
 */
protected List<Runnable> clearTaskQueue(){
synchronized (highPriorityLock) {
synchronized (lowPriorityLock) {
      highPriorityConsumer.stopIfRunning();
      highPriorityConsumer.stopIfRunning();
      List<Runnable> removedTasks=new ArrayList<Runnable>(highPriorityQueue.size() + lowPriorityQueue.size());
synchronized (highPriorityQueue.getLock()) {
        Iterator<TaskWrapper> it=highPriorityQueue.iterator();
        while (it.hasNext()) {
          TaskWrapper tw=it.next();
          tw.cancel();
          if (!(tw.task instanceof ShutdownRunnable)) {
            removedTasks.add(tw.task);
          }
        }
        lowPriorityQueue.clear();
      }
synchronized (lowPriorityQueue.getLock()) {
        Iterator<TaskWrapper> it=lowPriorityQueue.iterator();
        while (it.hasNext()) {
          TaskWrapper tw=it.next();
          tw.cancel();
          removedTasks.add(tw.task);
        }
        lowPriorityQueue.clear();
      }
      return removedTasks;
    }
  }
}","/** 
 * Stops task consumers, and clears all waiting tasks (low and high priority).
 * @return A list of Runnables that had been removed from the queues
 */
protected List<Runnable> clearTaskQueue(){
synchronized (highPriorityLock) {
synchronized (lowPriorityLock) {
      highPriorityConsumer.stopIfRunning();
      highPriorityConsumer.stopIfRunning();
      List<Runnable> removedTasks=new ArrayList<Runnable>(highPriorityQueue.size() + lowPriorityQueue.size());
synchronized (highPriorityQueue.getLock()) {
        Iterator<TaskWrapper> it=highPriorityQueue.iterator();
        while (it.hasNext()) {
          TaskWrapper tw=it.next();
          tw.cancel();
          if (!(tw.task instanceof ShutdownRunnable)) {
            removedTasks.add(tw.task);
          }
        }
        highPriorityQueue.clear();
      }
synchronized (lowPriorityQueue.getLock()) {
        Iterator<TaskWrapper> it=lowPriorityQueue.iterator();
        while (it.hasNext()) {
          TaskWrapper tw=it.next();
          tw.cancel();
          removedTasks.add(tw.task);
        }
        lowPriorityQueue.clear();
      }
      return removedTasks;
    }
  }
}",0.996947230702137
161717,"@Override public boolean get(){
  return scheduler.getCurrentPoolSize() == 0;
}","@Override public boolean get(){
  int queuedTaskQty=scheduler.lowPriorityQueue.size() + scheduler.highPriorityQueue.size();
  return queuedTaskQty == expectedRunnables.size();
}",0.5
161718,"@Test public void shutdownNowTest(){
  PrioritySchedulerFactory factory=getPrioritySchedulerFactory();
  BlockingTestRunnable btr=new BlockingTestRunnable();
  try {
    PriorityScheduler scheduler=factory.makePriorityScheduler(1,1,1000);
    scheduler.execute(btr);
    List<TestRunnable> expectedRunnables=new ArrayList<TestRunnable>(TEST_QTY);
    for (int i=0; i < TEST_QTY; i++) {
      TestRunnable tr=new TestRunnable();
      if (i != 0) {
        expectedRunnables.add(tr);
      }
      scheduler.execute(tr);
    }
    btr.blockTillStarted();
    List<Runnable> canceledRunnables=scheduler.shutdownNow();
    btr.unblock();
    assertNotNull(canceledRunnables);
    assertTrue(canceledRunnables.containsAll(expectedRunnables));
    assertTrue(expectedRunnables.containsAll(canceledRunnables));
    Iterator<TestRunnable> it=expectedRunnables.iterator();
    while (it.hasNext()) {
      assertEquals(0,it.next().getRunCount());
    }
  }
  finally {
    btr.unblock();
    factory.shutdown();
  }
}","@Test public void shutdownNowTest(){
  PrioritySchedulerFactory factory=getPrioritySchedulerFactory();
  BlockingTestRunnable btr=new BlockingTestRunnable();
  try {
    final PriorityScheduler scheduler=factory.makePriorityScheduler(1,1,1000);
    scheduler.execute(btr);
    btr.blockTillStarted();
    final List<TestRunnable> expectedRunnables=new ArrayList<TestRunnable>(TEST_QTY);
    for (int i=0; i < TEST_QTY; i++) {
      TestRunnable tr=new TestRunnable();
      if (i > 1) {
        expectedRunnables.add(tr);
      }
      scheduler.execute(tr,i % 2 == 0 ? TaskPriority.High : TaskPriority.Low);
    }
    new TestCondition(){
      @Override public boolean get(){
        int queuedTaskQty=scheduler.lowPriorityQueue.size() + scheduler.highPriorityQueue.size();
        return queuedTaskQty == expectedRunnables.size();
      }
    }
.blockTillTrue();
    List<Runnable> canceledRunnables=scheduler.shutdownNow();
    btr.unblock();
    assertNotNull(canceledRunnables);
    assertTrue(canceledRunnables.containsAll(expectedRunnables));
    assertTrue(expectedRunnables.containsAll(canceledRunnables));
    Iterator<TestRunnable> it=expectedRunnables.iterator();
    while (it.hasNext()) {
      assertEquals(0,it.next().getRunCount());
    }
  }
  finally {
    btr.unblock();
    factory.shutdown();
  }
}",0.6437768240343348
161719,"@Test public void lastKnownTimeMillisTest(){
  long before=Clock.lastKnownTimeMillis();
  TestUtils.blockTillClockAdvances();
  long newTime;
  assertTrue((newTime=Clock.accurateTimeMillis()) > before);
  assertTrue(newTime <= Clock.lastKnownTimeMillis());
}","@Test public void lastKnownTimeMillisTest(){
  long before=Clock.lastKnownTimeMillis();
  TestUtils.blockTillClockAdvances();
  long newTime=-1;
  assertTrue((newTime=Clock.accurateTimeMillis()) > before);
  assertTrue(newTime <= Clock.lastKnownTimeMillis());
}",0.9942196531791908
161720,"@Override public <T>List<Future<T>> invokeAll(Collection<? extends Callable<T>> tasks,long timeout,TimeUnit unit) throws InterruptedException {
  long startTime=Clock.accurateTimeMillis();
  long timeoutInMs=unit.toMillis(timeout);
  List<Future<T>> resultList=new ArrayList<Future<T>>(tasks.size());
{
    Iterator<? extends Callable<T>> it=tasks.iterator();
    while (it.hasNext()) {
      Callable<T> c=it.next();
      if (c == null) {
        throw new NullPointerException();
      }
      ListenableRunnableFuture<T> fr=new ListenableFutureTask<T>(false,c);
      resultList.add(fr);
      scheduler.execute(fr);
    }
  }
{
    Iterator<Future<T>> it=resultList.iterator();
    long remainingTime=Math.max(0,timeoutInMs - (Clock.accurateTimeMillis() - startTime));
    while (it.hasNext() && remainingTime > 0) {
      try {
        it.next().get(remainingTime,TimeUnit.MILLISECONDS);
      }
 catch (      ExecutionException e) {
      }
catch (      TimeoutException e) {
        break;
      }
      remainingTime=Math.max(0,timeoutInMs - (Clock.accurateTimeMillis() - startTime));
    }
    while (it.hasNext()) {
      it.next().cancel(true);
    }
  }
  return resultList;
}","@Override public <T>List<Future<T>> invokeAll(Collection<? extends Callable<T>> tasks,long timeout,TimeUnit unit) throws InterruptedException {
  long startTime=Clock.accurateTimeMillis();
  long timeoutInMs=unit.toMillis(timeout);
  List<Future<T>> resultList=new ArrayList<Future<T>>(tasks.size());
{
    Iterator<? extends Callable<T>> it=tasks.iterator();
    while (it.hasNext()) {
      Callable<T> c=it.next();
      if (c == null) {
        throw new NullPointerException();
      }
      ListenableRunnableFuture<T> fr=new ListenableFutureTask<T>(false,c);
      resultList.add(fr);
      scheduler.execute(fr);
    }
  }
{
    Iterator<Future<T>> it=resultList.iterator();
    long remainingTime=timeoutInMs - (Clock.accurateTimeMillis() - startTime);
    while (it.hasNext() && remainingTime > 0) {
      Future<T> f=it.next();
      try {
        f.get(remainingTime,TimeUnit.MILLISECONDS);
      }
 catch (      ExecutionException e) {
      }
catch (      TimeoutException e) {
        f.cancel(true);
        break;
      }
      remainingTime=timeoutInMs - (Clock.accurateTimeMillis() - startTime);
    }
    while (it.hasNext()) {
      it.next().cancel(true);
    }
  }
  return resultList;
}",0.8837015423092955
161721,"/** 
 * Progresses tasks for the current time.  This will block as it runs as many scheduled or waiting tasks as possible.  It is CRITICAL that  only one thread at a time calls the .tick() function.  While this class  is in general thread safe, if multiple threads call .tick() at the same  time, it is possible a given task may run more than once.  In order to  maintain high performance, threadly does not guard against this condition. Depending on how this class was constructed, this may or may not block  if there are no tasks to run yet. If any tasks throw a RuntimeException, they will be bubbled up to this  tick call.  Any tasks past that task will not run till the next call to  tick.  So it is important that the implementor handle those exceptions.   This call is NOT thread safe, calling tick in parallel could cause the  same task to be run multiple times in parallel.
 * @return qty of tasks run during this tick call
 * @throws InterruptedException thrown if thread is interrupted waiting for task to run(this can only throw if constructed with a true to allow blocking)
 */
public int tick() throws InterruptedException {
  int tasks=0;
  while (true) {
    TaskContainer nextTask;
    while ((nextTask=getNextReadyTask()) != null && !cancelTick) {
      tasks++;
      nextTask.runTask();
    }
    if (tickBlocksTillAvailable && tasks == 0) {
synchronized (taskQueue.getModificationLock()) {
        if (cancelTick) {
          break;
        }
        nextTask=taskQueue.peekFirst();
        if (nextTask == null) {
          taskQueue.getModificationLock().wait();
        }
 else {
          long nextTaskDelay=nextTask.getDelay(TimeUnit.MILLISECONDS);
          if (nextTaskDelay > 0) {
            taskQueue.getModificationLock().wait(nextTaskDelay);
          }
        }
      }
    }
 else {
      break;
    }
  }
  if (cancelTick) {
    cancelTick=false;
  }
  return tasks;
}","/** 
 * Progresses tasks for the current time.  This will block as it runs as many scheduled or waiting tasks as possible.  It is CRITICAL that  only one thread at a time calls the .tick() function.  While this class  is in general thread safe, if multiple threads call .tick() at the same  time, it is possible a given task may run more than once.  In order to  maintain high performance, threadly does not guard against this condition. Depending on how this class was constructed, this may or may not block  if there are no tasks to run yet. If any tasks throw a RuntimeException, they will be bubbled up to this  tick call.  Any tasks past that task will not run till the next call to  tick.  So it is important that the implementor handle those exceptions.   This call is NOT thread safe, calling tick in parallel could cause the  same task to be run multiple times in parallel.
 * @return quantity of tasks run during this tick invocation
 * @throws InterruptedException thrown if thread is interrupted waiting for task to run(this can only throw if constructed with a true to allow blocking)
 */
public int tick() throws InterruptedException {
  int tasks=0;
  while (true) {
    TaskContainer nextTask;
    while ((nextTask=getNextReadyTask()) != null && !cancelTick) {
      tasks++;
      nextTask.runTask();
    }
    if (tickBlocksTillAvailable && tasks == 0) {
synchronized (taskQueue.getModificationLock()) {
        if (cancelTick) {
          break;
        }
        nextTask=taskQueue.peekFirst();
        if (nextTask == null) {
          taskQueue.getModificationLock().wait();
        }
 else {
          long nextTaskDelay=nextTask.getDelay(TimeUnit.MILLISECONDS);
          if (nextTaskDelay > 0) {
            taskQueue.getModificationLock().wait(nextTaskDelay);
          }
        }
      }
    }
 else {
      break;
    }
  }
  if (cancelTick) {
    cancelTick=false;
  }
  return tasks;
}",0.9950274797173516
161722,"/** 
 * Returns a count of how many tasks are either waiting to be executed,  or are scheduled to be executed at a future point for a specific priority.
 * @param priority priority for tasks to be counted
 * @return qty of tasks waiting execution or scheduled to be executed later
 */
public int getScheduledTaskCount(TaskPriority priority){
  if (priority == null) {
    return getScheduledTaskCount();
  }
switch (priority) {
case High:
    return highPriorityQueue.size();
case Low:
  return lowPriorityQueue.size();
default :
throw new UnsupportedOperationException();
}
}","/** 
 * Returns a count of how many tasks are either waiting to be executed,  or are scheduled to be executed at a future point for a specific priority.
 * @param priority priority for tasks to be counted
 * @return quantity of tasks waiting execution or scheduled to be executed later
 */
public int getScheduledTaskCount(TaskPriority priority){
  if (priority == null) {
    return getScheduledTaskCount();
  }
switch (priority) {
case High:
    return highPriorityQueue.size();
case Low:
  return lowPriorityQueue.size();
default :
throw new UnsupportedOperationException();
}
}",0.9956784788245462
161723,"/** 
 * Getter for the current qty of workers constructed (ether running or idle).
 * @return current worker count
 */
public int getCurrentPoolSize(){
synchronized (workersLock) {
    return currentPoolSize;
  }
}","/** 
 * Getter for the current quantity of workers constructed (either running or idle).
 * @return current worker count
 */
public int getCurrentPoolSize(){
synchronized (workersLock) {
    return currentPoolSize;
  }
}",0.9861751152073732
161724,"/** 
 * Stops any new tasks from being submitted to the pool.  But allows all tasks which are  submitted to execute, or scheduled (and have elapsed their delay time) to run.  If  recurring tasks are present they will also be unable to reschedule.  If shutdown or  shutdownNow has already been called, this will have no effect. If you wish to not want to run any queued tasks you should use {#link shutdownNow()).
 */
public void shutdown(){
  if (!shutdownStarted.getAndSet(true)) {
    addToHighPriorityQueue(new OneTimeTaskWrapper(new ShutdownRunnable(),TaskPriority.High,1));
  }
}","/** 
 * Stops any new tasks from being submitted to the pool.  But allows all tasks which are  submitted to execute, or scheduled (and have elapsed their delay time) to run.  If  recurring tasks are present they will also be unable to reschedule.  If shutdown or  shutdownNow has already been called, this will have no effect. If you wish to not want to run any queued tasks you should use shutdownNow().
 */
public void shutdown(){
  if (!shutdownStarted.getAndSet(true)) {
    addToHighPriorityQueue(new OneTimeTaskWrapper(new ShutdownRunnable(),TaskPriority.High,1));
  }
}",0.993103448275862
161725,"/** 
 * Prestarts all core threads.  This will make new idle workers to accept future tasks.
 */
public void prestartAllCoreThreads(){
synchronized (workersLock) {
    boolean startedThreads=false;
    while (currentPoolSize <= corePoolSize) {
      availableWorkers.addFirst(makeNewWorker());
      startedThreads=true;
    }
    if (startedThreads) {
      workersLock.notifyAll();
    }
  }
}","/** 
 * Ensures all core threads have been started.  This will make new idle workers  to accept tasks.
 */
public void prestartAllCoreThreads(){
synchronized (workersLock) {
    boolean startedThreads=false;
    while (currentPoolSize <= corePoolSize) {
      availableWorkers.addFirst(makeNewWorker());
      startedThreads=true;
    }
    if (startedThreads) {
      workersLock.notifyAll();
    }
  }
}",0.905
161726,"/** 
 * Call to get the total qty of high priority tasks this executor has handled.
 * @return total qty of high priority tasks run
 */
public int getHighPriorityTotalExecutionCount(){
  return totalHighPriorityExecutions.get();
}","/** 
 * Call to get the total quantity of high priority tasks this executor has handled.
 * @return total quantity of high priority tasks run
 */
public int getHighPriorityTotalExecutionCount(){
  return totalHighPriorityExecutions.get();
}",0.9787234042553192
161727,"/** 
 * Call to get the total qty of tasks this executor has handled.
 * @return total qty of tasks run
 */
public int getTotalExecutionCount(){
  return getHighPriorityTotalExecutionCount() + getLowPriorityTotalExecutionCount();
}","/** 
 * Call to get the total quantity of tasks this executor has handled.
 * @return total quantity of tasks run
 */
public int getTotalExecutionCount(){
  return getHighPriorityTotalExecutionCount() + getLowPriorityTotalExecutionCount();
}",0.9788135593220338
161728,"/** 
 * Call to return the number of callables and/or runnables which have been running longer  than the provided amount of time in milliseconds.
 * @param timeInMs threshold of time to search for execution
 * @return total qty of runnables and callables which have or are running longer than the provided time length
 */
public int getQtyRunningOverTime(long timeInMs){
  int result=0;
  long now=Clock.accurateTimeMillis();
  Iterator<Long> it=runningTasks.values().iterator();
  while (it.hasNext()) {
    Long startTime=it.next();
    if (now - startTime >= timeInMs) {
      result++;
    }
  }
  return result;
}","/** 
 * Call to return the number of callables and/or runnables which have been running longer  than the provided amount of time in milliseconds.
 * @param timeInMs threshold of time to search for execution
 * @return total quantity of runnables and callables which have or are running longer than the provided time length
 */
public int getQtyRunningOverTime(long timeInMs){
  int result=0;
  long now=Clock.accurateTimeMillis();
  Iterator<Long> it=runningTasks.values().iterator();
  while (it.hasNext()) {
    Long startTime=it.next();
    if (now - startTime >= timeInMs) {
      result++;
    }
  }
  return result;
}",0.9959709911361804
161729,"/** 
 * Call to get the total qty of low priority tasks this executor has handled.
 * @return total qty of low priority tasks run
 */
public int getLowPriorityTotalExecutionCount(){
  return totalLowPriorityExecutions.get();
}","/** 
 * Call to get the total quantity of low priority tasks this executor has handled.
 * @return total quantity of low priority tasks run
 */
public int getLowPriorityTotalExecutionCount(){
  return totalLowPriorityExecutions.get();
}",0.9783549783549784
161730,"@Override public Thread newThread(Runnable runnable){
  Thread thread=defaultFactory.newThread(runnable);
  thread.setDaemon(daemonThread);
  thread.setName(""String_Node_Str"" + NEXT_THREAD_ID.getAndIncrement());
  return thread;
}","@Override public Thread newThread(Runnable runnable){
  Thread thread=defaultFactory.newThread(runnable);
  thread.setDaemon(daemonThread);
  thread.setName(SingleThreadScheduler.class.getSimpleName() + ""String_Node_Str"" + NEXT_THREAD_ID.getAndIncrement());
  return thread;
}",0.9090909090909092
161731,"/** 
 * Call to check how many tasks have been queued up for a given key.  Depending on  what constructor was used, and if a true was passed in for ""accurateQueueSize"", the  accuracy of this call varies dramatically. If true was not supplied in the constructor for ""accurateQueueSize"", this will only  report how many tasks have not been accepted by the worker yet.  The accepting of those  tasks occur in batches, so this number will varry dramatically (and probably be unusable). So it is highly recommended that if your interested in this functionality you supply a  true into the constructor. Supplying a true for ""accurateQueueSize"" in the constructor does involve some performance  cost, but that overhead should be minimal (just no reason to accept any loss if not  interested in this feature).
 * @since 1.2.0
 * @param threadKey key for task queue to examine
 * @return the number of tasks queued for the key
 */
public int getTaskQueueSize(Object threadKey){
  TaskQueueWorker worker=taskWorkers.get(threadKey);
  if (worker == null) {
    return 0;
  }
 else {
    return worker.getQueueSize();
  }
}","/** 
 * Call to check how many tasks have been queued up for a given key.  Depending on  what constructor was used, and if a true was passed in for ""accurateQueueSize"", the  accuracy of this call varies dramatically. If true was not supplied in the constructor for ""accurateQueueSize"", this will only  report how many tasks have not been accepted by the worker yet.  The accepting of those  tasks occur in batches, so this number will vary dramatically (and probably be unusable). So it is highly recommended that if your interested in this functionality you supply a  true into the constructor. Supplying a true for ""accurateQueueSize"" in the constructor does involve some performance  cost, but that overhead should be minimal (just no reason to accept any loss if not  interested in this feature).
 * @since 1.2.0
 * @param threadKey key for task queue to examine
 * @return the number of tasks queued for the key
 */
public int getTaskQueueSize(Object threadKey){
  TaskQueueWorker worker=taskWorkers.get(threadKey);
  if (worker == null) {
    return 0;
  }
 else {
    return worker.getQueueSize();
  }
}",0.9995497523638
161732,"@Override public String toString(){
  return ""String_Node_Str"" + queue.toString();
}","@Override public String toString(){
  return queue.toString();
}",0.8648648648648649
161733,"/** 
 * This call is similar to makeCompleteFuture in that it will immediately provide a  future that can not be canceled, and will not be satifised till all provided  futures complete.   This future provides a list of the completed futures as the result.  The order  of this list is NOT deterministic.
 * @since 1.2.0
 * @param < T > type of result returned from the futures
 * @param futures Structure of futures to iterate over
 * @return ListenableFuture which will be done once all futures provided are done
 */
public static <T>ListenableFuture<List<ListenableFuture<? extends T>>> makeCompleteListFuture(Iterable<? extends ListenableFuture<? extends T>> futures){
  return new AllFutureCollection<T>(futures);
}","/** 
 * This call is similar to makeCompleteFuture in that it will immediately provide a  future that can not be canceled, and will not be satisfied till all provided  futures complete.   This future provides a list of the completed futures as the result.  The order  of this list is NOT deterministic.
 * @since 1.2.0
 * @param < T > type of result returned from the futures
 * @param futures Structure of futures to iterate over
 * @return ListenableFuture which will be done once all futures provided are done
 */
public static <T>ListenableFuture<List<ListenableFuture<? extends T>>> makeCompleteListFuture(Iterable<? extends ListenableFuture<? extends T>> futures){
  return new AllFutureCollection<T>(futures);
}",0.9958217270194986
161734,"/** 
 * This call is similar to makeCompleteFuture in that it will immediately provide a  future that can not be canceled, and will not be satifised till all provided  futures complete.   This future provides a list of the futures that completed without throwing  an exception nor were canceled.  The order of the resulting list is NOT  deterministic.
 * @since 1.2.0
 * @param < T > type of result returned from the futures
 * @param futures Structure of futures to iterate over
 * @return ListenableFuture which will be done once all futures provided are done
 */
public static <T>ListenableFuture<List<ListenableFuture<? extends T>>> makeSuccessListFuture(Iterable<? extends ListenableFuture<? extends T>> futures){
  return new SuccessFutureCollection<T>(futures);
}","/** 
 * This call is similar to makeCompleteFuture in that it will immediately provide a  future that can not be canceled, and will not be satisfied till all provided  futures complete.   This future provides a list of the futures that completed without throwing  an exception nor were canceled.  The order of the resulting list is NOT  deterministic.
 * @since 1.2.0
 * @param < T > type of result returned from the futures
 * @param futures Structure of futures to iterate over
 * @return ListenableFuture which will be done once all futures provided are done
 */
public static <T>ListenableFuture<List<ListenableFuture<? extends T>>> makeSuccessListFuture(Iterable<? extends ListenableFuture<? extends T>> futures){
  return new SuccessFutureCollection<T>(futures);
}",0.9961038961038962
161735,"/** 
 * This call is similar to makeCompleteFuture in that it will immediately provide a  future that can not be canceled, and will not be satifised till all provided  futures complete.   This future provides a list of the futures that failed by either throwing an  exception or were canceled.  The order of the resulting list is NOT  deterministic.
 * @since 1.2.0
 * @param < T > type of result returned from the futures
 * @param futures Structure of futures to iterate over
 * @return ListenableFuture which will be done once all futures provided are done
 */
public static <T>ListenableFuture<List<ListenableFuture<? extends T>>> makeFailureListFuture(Iterable<? extends ListenableFuture<? extends T>> futures){
  return new FailureFutureCollection<T>(futures);
}","/** 
 * This call is similar to makeCompleteFuture in that it will immediately provide a  future that can not be canceled, and will not be satisfied till all provided  futures complete.   This future provides a list of the futures that failed by either throwing an  exception or were canceled.  The order of the resulting list is NOT  deterministic.
 * @since 1.2.0
 * @param < T > type of result returned from the futures
 * @param futures Structure of futures to iterate over
 * @return ListenableFuture which will be done once all futures provided are done
 */
public static <T>ListenableFuture<List<ListenableFuture<? extends T>>> makeFailureListFuture(Iterable<? extends ListenableFuture<? extends T>> futures){
  return new FailureFutureCollection<T>(futures);
}",0.99609375
161736,"/** 
 * Construct a new execution limiter that implements the   {@link Executor} interface.
 * @param executor {@link Executor} to submit task executions to.
 * @param maxConcurrency maximum qty of runnables to run in parallel
 * @param subPoolName name to describe threads while tasks running in pool (null to not change thread names)
 */
public ExecutorLimiter(Executor executor,int maxConcurrency,String subPoolName){
  super(maxConcurrency,subPoolName);
  if (executor == null) {
    throw new IllegalArgumentException(""String_Node_Str"");
  }
  this.executor=executor;
  waitingTasks=new ConcurrentLinkedQueue<LimiterRunnableWrapper>();
}","/** 
 * Construct a new execution limiter that implements the   {@link Executor} interface.
 * @param executor {@link Executor} to submit task executions to.
 * @param maxConcurrency maximum quantity of runnables to run in parallel
 * @param subPoolName name to describe threads while tasks running in pool (null to not change thread names)
 */
public ExecutorLimiter(Executor executor,int maxConcurrency,String subPoolName){
  super(maxConcurrency,subPoolName);
  if (executor == null) {
    throw new IllegalArgumentException(""String_Node_Str"");
  }
  this.executor=executor;
  waitingTasks=new ConcurrentLinkedQueue<LimiterRunnableWrapper>();
}",0.9961210240496507
161737,"/** 
 * Constructs a new limiter that implements the   {@link PrioritySchedulerInterface}.
 * @param scheduler {@link PrioritySchedulerInterface} implementation to submit task executions to.
 * @param maxConcurrency maximum qty of runnables to run in parallel
 * @param subPoolName name to describe threads while tasks running in pool (null to not change thread names)
 */
public PrioritySchedulerLimiter(PrioritySchedulerInterface scheduler,int maxConcurrency,String subPoolName){
  super(scheduler,maxConcurrency,subPoolName);
  this.scheduler=scheduler;
}","/** 
 * Constructs a new limiter that implements the   {@link PrioritySchedulerInterface}.
 * @param scheduler {@link PrioritySchedulerInterface} implementation to submit task executions to.
 * @param maxConcurrency maximum quantity of runnables to run in parallel
 * @param subPoolName name to describe threads while tasks running in pool (null to not change thread names)
 */
public PrioritySchedulerLimiter(PrioritySchedulerInterface scheduler,int maxConcurrency,String subPoolName){
  super(scheduler,maxConcurrency,subPoolName);
  this.scheduler=scheduler;
}",0.9955396966993756
161738,"/** 
 * Constructs a new limiter that implements the   {@link SchedulerServiceInterface}.
 * @param scheduler {@link SchedulerServiceInterface} implementation to submit task executions to.
 * @param maxConcurrency maximum qty of runnables to run in parallel
 * @param subPoolName name to describe threads while tasks running in pool (null to not change thread names)
 */
public SchedulerServiceLimiter(SchedulerServiceInterface scheduler,int maxConcurrency,String subPoolName){
  super(scheduler,maxConcurrency,subPoolName);
  this.scheduler=scheduler;
}","/** 
 * Constructs a new limiter that implements the   {@link SchedulerServiceInterface}.
 * @param scheduler {@link SchedulerServiceInterface} implementation to submit task executions to.
 * @param maxConcurrency maximum quantity of runnables to run in parallel
 * @param subPoolName name to describe threads while tasks running in pool (null to not change thread names)
 */
public SchedulerServiceLimiter(SchedulerServiceInterface scheduler,int maxConcurrency,String subPoolName){
  super(scheduler,maxConcurrency,subPoolName);
  this.scheduler=scheduler;
}",0.995507637017071
161739,"@Override public void scheduleWithFixedDelay(Runnable task,long initialDelay,long recurringDelay){
  if (task == null) {
    throw new IllegalArgumentException(""String_Node_Str"");
  }
 else   if (initialDelay < 0) {
    throw new IllegalArgumentException(""String_Node_Str"");
  }
 else   if (recurringDelay < 0) {
    throw new IllegalArgumentException(""String_Node_Str"");
  }
  scheduler.scheduleWithFixedDelay(new ThrowableSurpressingRunnable(task),initialDelay,recurringDelay,TimeUnit.MILLISECONDS);
}","@Override public void scheduleWithFixedDelay(Runnable task,long initialDelay,long recurringDelay){
  if (task == null) {
    throw new IllegalArgumentException(""String_Node_Str"");
  }
 else   if (initialDelay < 0) {
    throw new IllegalArgumentException(""String_Node_Str"");
  }
 else   if (recurringDelay < 0) {
    throw new IllegalArgumentException(""String_Node_Str"");
  }
  scheduler.scheduleWithFixedDelay(new ThrowableSuppressingRunnable(task),initialDelay,recurringDelay,TimeUnit.MILLISECONDS);
}",0.9980119284294234
161740,"/** 
 * Constructs a new ThrowableSurpressingRunnable with the provided task.   If the task is null, when this is run no operation will occur.
 * @param task task to be executed and have exceptions prevented from being thrown
 */
public ThrowableSurpressingRunnable(Runnable task){
  this.task=task;
}","/** 
 * Constructs a new ThrowableSurpressingRunnable with the provided task.   If the task is null, when this is run no operation will occur.
 * @param task task to be executed and have exceptions prevented from being thrown
 */
public ThrowableSurpressingRunnable(Runnable task){
  super(task);
}",0.9582637729549248
161741,"/** 
 * Starts the profiler running in a new thread. If this profiler had the life cycle of:  start -> stop -> start The stats from the previous run will still be included  in this run.  If you wish to clear out previous runs  you must call {#link reset()} first. If an executor is provided, this call will block until the the  profiler has been started on the provided executor.
 * @param executor executor to execute on, or null if new thread should be created
 */
public void start(Executor executor){
synchronized (startStopLock) {
    if (collectorThread.get() == null) {
      final ProfilerRunner pr=new ProfilerRunner();
      if (executor == null) {
        Thread thread=new Thread(pr);
        collectorThread.set(thread);
        thread.setName(COLLECTOR_THREAD_NAME);
        thread.setPriority(Thread.MAX_PRIORITY);
        thread.start();
      }
 else {
        final ListenableFutureTask<Thread> runningThreadFuture;
        runningThreadFuture=new ListenableFutureTask<Thread>(false,new Runnable(){
          @Override public void run(){
          }
        }
);
        executor.execute(new Runnable(){
          @Override public void run(){
            try {
              if (!collectorThread.compareAndSet(null,Thread.currentThread())) {
                return;
              }
            }
  finally {
              runningThreadFuture.run();
            }
            pr.run();
          }
        }
);
        try {
          runningThreadFuture.get();
        }
 catch (        InterruptedException e) {
          Thread.currentThread().interrupt();
          return;
        }
catch (        ExecutionException e) {
          throw ExceptionUtils.makeRuntime(e.getCause());
        }
      }
    }
  }
}","/** 
 * Starts the profiler running in a new thread. If this profiler had the life cycle of:  start -> stop -> start The stats from the previous run will still be included  in this run.  If you wish to clear out previous runs  you must call {#link reset()} first. If an executor is provided, this call will block until the the  profiler has been started on the provided executor.
 * @param executor executor to execute on, or null if new thread should be created
 */
public void start(Executor executor){
synchronized (startStopLock) {
    if (collectorThread.get() == null) {
      final ProfilerRunner pr=new ProfilerRunner();
      if (executor == null) {
        Thread thread=new Thread(pr);
        collectorThread.set(thread);
        thread.setName(COLLECTOR_THREAD_NAME);
        thread.setPriority(Thread.MAX_PRIORITY);
        thread.start();
      }
 else {
        final SettableListenableFuture<?> runningThreadFuture;
        runningThreadFuture=new SettableListenableFuture<Object>();
        executor.execute(new Runnable(){
          @Override public void run(){
            try {
              if (!collectorThread.compareAndSet(null,Thread.currentThread())) {
                return;
              }
            }
  finally {
              runningThreadFuture.setResult(null);
            }
            pr.run();
          }
        }
);
        try {
          runningThreadFuture.get();
        }
 catch (        InterruptedException e) {
          Thread.currentThread().interrupt();
          return;
        }
catch (        ExecutionException e) {
          throw ExceptionUtils.makeRuntime(e.getCause());
        }
      }
    }
  }
}",0.8372641509433962
161742,"@Test public void resetTest(){
  profiler.start();
  blockForProfilerSample();
  profiler.stop();
  profiler.reset();
  assertEquals(0,profiler.threadTraces.size());
  assertEquals(0,profiler.getCollectedSampleQty());
}","@Test public void resetTest(){
  profiler.start();
  blockForProfilerSample();
  final Thread runningThread=profiler.collectorThread.get();
  profiler.stop();
  new TestCondition(){
    @Override public boolean get(){
      return !runningThread.isAlive();
    }
  }
.blockTillTrue();
  profiler.reset();
  assertEquals(0,profiler.threadTraces.size());
  assertEquals(0,profiler.getCollectedSampleQty());
}",0.6592
161743,"@Override public boolean get(){
  return profiler.getCollectedSampleQty() > 0;
}","@Override public boolean get(){
  return !runningThread.isAlive();
}",0.6756756756756757
161744,"/** 
 * Checks if there are tasks ready to be run on the scheduler.  If this returns  true, the next .tick() call is guaranteed to run at least one task.
 * @return true if there are task waiting to run.
 */
public boolean hasTaskReadyToRun(){
  return getNextReadyTask() != null;
}","/** 
 * Checks if there are tasks ready to be run on the scheduler.  Generally this is called from  the same thread that would call .tick() (but does not have to be).  If .tick() is not  currently being called, this call indicates if the next .tick() will have at least one task  to run.  If .tick() is currently running, this call will indicate if there is at least one  more task to run (not including the task which may currently be running).
 * @return true if there are task waiting to run.
 */
public boolean hasTaskReadyToRun(){
synchronized (taskQueue.getModificationLock()) {
    TaskContainer nextTask=getNextReadyTask();
    if (nextTask == null) {
      return false;
    }
 else     if (nextTask.running && taskQueue.size() == 1) {
      return false;
    }
 else {
      return true;
    }
  }
}",0.377635197066911
161745,"@Override public void prepareForRun(){
synchronized (taskQueue.getModificationLock()) {
    startInsertion();
    try {
      int insertionIndex=ListUtils.getInsertionEndIndex(taskQueue,recurringDelay,true);
      taskQueue.reposition(this,insertionIndex,false);
      nextRunTime=nowInMillis() + recurringDelay;
    }
  finally {
      endInsertion();
    }
  }
}","@Override public void prepareForRun(){
}",0.198019801980198
161746,"protected TaskContainer(Runnable runnable){
  this.runnable=runnable;
}","protected TaskContainer(Runnable runnable){
  this.runnable=runnable;
  this.running=false;
}",0.8658536585365854
161747,"protected void runTask(){
  prepareForRun();
  runnable.run();
}","protected void runTask(){
  running=true;
  prepareForRun();
  try {
    runnable.run();
  }
  finally {
    runComplete();
    running=false;
  }
}",0.6037735849056604
161748,"protected TestContainer(int delay){
  scheduler.super(new TestRunnable());
  this.delay=delay;
}","protected TestContainer(int delay,boolean throwException){
  scheduler.super(throwException ? new TestRuntimeFailureRunnable() : new TestRunnable());
  this.delay=delay;
}",0.7191011235955056
161749,"@Test public void compareToTest(){
  TestContainer tc0=new TestContainer(0);
  assertEquals(0,tc0.compareTo(tc0));
  assertEquals(0,tc0.compareTo(new TestContainer(0)));
  assertTrue(tc0.compareTo(new TestContainer(1)) < 0);
  assertTrue(tc0.compareTo(new TestContainer(-1)) > 0);
  Random r=new Random(Clock.lastKnownTimeMillis());
  List<TestContainer> testList=new ArrayList<TestContainer>(TEST_QTY);
  for (int i=0; i < TEST_QTY; i++) {
    testList.add(new TestContainer(r.nextInt(100)));
  }
  Collections.sort(testList);
  int lastDelay=Integer.MIN_VALUE;
  Iterator<TestContainer> it=testList.iterator();
  while (it.hasNext()) {
    assertTrue(lastDelay <= (lastDelay=it.next().delay));
  }
}","@Test public void compareToTest(){
  TestContainer tc0=new TestContainer(0,false);
  assertEquals(0,tc0.compareTo(tc0));
  assertEquals(0,tc0.compareTo(new TestContainer(0,false)));
  assertTrue(tc0.compareTo(new TestContainer(1,false)) < 0);
  assertTrue(tc0.compareTo(new TestContainer(-1,false)) > 0);
  Random r=new Random(Clock.lastKnownTimeMillis());
  List<TestContainer> testList=new ArrayList<TestContainer>(TEST_QTY);
  for (int i=0; i < TEST_QTY; i++) {
    testList.add(new TestContainer(r.nextInt(100),false));
  }
  Collections.sort(testList);
  int lastDelay=Integer.MIN_VALUE;
  Iterator<TestContainer> it=testList.iterator();
  while (it.hasNext()) {
    assertTrue(lastDelay <= (lastDelay=it.next().delay));
  }
}",0.979050279329609
161750,"@Test public void getContainedRunnableTest(){
  TestContainer tc=new TestContainer(0);
  assertTrue(tc.getContainedRunnable() == tc.runnable);
}","@Test public void getContainedRunnableTest(){
  TestContainer tc=new TestContainer(0,false);
  assertTrue(tc.getContainedRunnable() == tc.runnable);
}",0.979591836734694
161751,"protected void runLowPriorityTask(TaskWrapper task) throws InterruptedException {
  Worker w=null;
synchronized (workersLock) {
    if (!shutdownFinishing) {
      long waitAmount;
      while (currentPoolSize >= maxPoolSize && availableWorkers.size() < WORKER_CONTENTION_LEVEL && !shutdownFinishing && (waitAmount=task.getDelayEstimateInMillis() - lastHighDelay) > LOW_PRIORITY_WAIT_TOLLERANCE_IN_MS) {
        if (highPriorityQueue.isEmpty()) {
          lastHighDelay=0;
        }
 else {
          workersLock.wait(waitAmount);
          Clock.accurateTime();
        }
      }
      if (!shutdownFinishing) {
        long waitTime;
        if (currentPoolSize >= maxPoolSize) {
          waitTime=Long.MAX_VALUE;
        }
 else {
          waitTime=maxWaitForLowPriorityInMs;
        }
        w=getExistingWorker(waitTime);
        if (w == null) {
          if (currentPoolSize >= maxPoolSize) {
            w=getExistingWorker(Long.MAX_VALUE);
          }
 else {
            w=makeNewWorker();
          }
        }
      }
    }
  }
  if (w != null) {
    w.nextTask(task);
  }
}","protected void runLowPriorityTask(TaskWrapper task) throws InterruptedException {
  Worker w=null;
synchronized (workersLock) {
    if (!shutdownFinishing) {
      long waitAmount;
      while (currentPoolSize >= maxPoolSize && availableWorkers.size() < WORKER_CONTENTION_LEVEL && !shutdownFinishing && !highPriorityQueue.isEmpty() && (waitAmount=task.getDelayEstimateInMillis() - lastHighDelay) > LOW_PRIORITY_WAIT_TOLLERANCE_IN_MS) {
        workersLock.wait(waitAmount);
        Clock.accurateTime();
      }
      if (highPriorityQueue.isEmpty()) {
        lastHighDelay=0;
      }
      if (!shutdownFinishing) {
        long waitTime;
        if (currentPoolSize >= maxPoolSize) {
          waitTime=Long.MAX_VALUE;
        }
 else {
          waitTime=maxWaitForLowPriorityInMs;
        }
        w=getExistingWorker(waitTime);
        if (w == null) {
          if (currentPoolSize >= maxPoolSize) {
            w=getExistingWorker(Long.MAX_VALUE);
          }
 else {
            w=makeNewWorker();
          }
        }
      }
    }
  }
  if (w != null) {
    w.nextTask(task);
  }
}",0.9047619047619048
161752,"protected void addToQueue(TaskWrapper task){
  verifyNotShutdown();
switch (task.priority) {
case High:
    addToHighPriorityQueue(task);
  break;
case Low:
addToLowPriorityQueue(task);
break;
default :
throw new UnsupportedOperationException(""String_Node_Str"" + task.priority);
}
}","protected void addToQueue(TaskWrapper task){
  if (shutdownStarted.get()) {
    throw new IllegalStateException(""String_Node_Str"");
  }
switch (task.priority) {
case High:
    addToHighPriorityQueue(task);
  break;
case Low:
addToLowPriorityQueue(task);
break;
default :
throw new UnsupportedOperationException(""String_Node_Str"" + task.priority);
}
}",0.8417721518987342
161753,"protected void shutdownAllWorkers(){
synchronized (workersLock) {
    Iterator<Worker> it=availableWorkers.iterator();
    while (it.hasNext()) {
      Worker w=it.next();
      it.remove();
      killWorker(w);
    }
  }
}","protected void shutdownAllWorkers(){
synchronized (workersLock) {
    Iterator<Worker> it=availableWorkers.iterator();
    while (it.hasNext()) {
      Worker w=it.next();
      it.remove();
      killWorker(w);
    }
    workersLock.notifyAll();
  }
}",0.9389473684210526
161754,"@Override protected void runHighPriorityTask(TaskWrapper task) throws InterruptedException {
  Worker w=null;
synchronized (workersLock) {
    if (!isShutdown()) {
synchronized (highPriorityWorkerAvailable.getModificationLock()) {
        highPriorityWorkerAvailable.add(!availableWorkers.isEmpty());
        trimList(highPriorityWorkerAvailable);
      }
      if (getCurrentPoolSize() >= getMaxPoolSize()) {
        w=getExistingWorker(Long.MAX_VALUE);
      }
 else {
        if (availableWorkers.isEmpty()) {
          w=makeNewWorker();
        }
 else {
          w=availableWorkers.removeFirst();
        }
      }
    }
  }
  if (w != null) {
    Clock.accurateTime();
    long executionDelay=task.getDelayEstimateInMillis();
    if (executionDelay <= 0) {
synchronized (highPriorityExecutionDelay.getModificationLock()) {
        highPriorityExecutionDelay.add(executionDelay * -1);
        trimList(highPriorityExecutionDelay);
      }
    }
    w.nextTask(task);
  }
}","@Override protected void runHighPriorityTask(TaskWrapper task) throws InterruptedException {
  Worker w=null;
synchronized (workersLock) {
    if (!getShutdownFinishing()) {
synchronized (highPriorityWorkerAvailable.getModificationLock()) {
        highPriorityWorkerAvailable.add(!availableWorkers.isEmpty());
        trimList(highPriorityWorkerAvailable);
      }
      if (getCurrentPoolSize() >= getMaxPoolSize()) {
        w=getExistingWorker(Long.MAX_VALUE);
      }
 else {
        lastHighDelay=0;
        if (availableWorkers.isEmpty()) {
          w=makeNewWorker();
        }
 else {
          w=availableWorkers.removeFirst();
        }
      }
    }
  }
  if (w != null) {
    Clock.accurateTime();
    long executionDelay=task.getDelayEstimateInMillis();
    if (executionDelay <= 0) {
synchronized (highPriorityExecutionDelay.getModificationLock()) {
        highPriorityExecutionDelay.add(executionDelay * -1);
        trimList(highPriorityExecutionDelay);
      }
    }
    w.nextTask(task);
  }
}",0.980431510286001
161755,"@Override protected void runLowPriorityTask(TaskWrapper task) throws InterruptedException {
  Worker w=null;
synchronized (workersLock) {
    if (!isShutdown()) {
      if (getCurrentPoolSize() >= getMaxPoolSize()) {
synchronized (lowPriorityWorkerAvailable.getModificationLock()) {
          lowPriorityWorkerAvailable.add(!availableWorkers.isEmpty());
          trimList(lowPriorityWorkerAvailable);
        }
        w=getExistingWorker(Long.MAX_VALUE);
      }
 else {
        w=getExistingWorker(getMaxWaitForLowPriority());
synchronized (lowPriorityWorkerAvailable.getModificationLock()) {
          lowPriorityWorkerAvailable.add(w != null);
          trimList(lowPriorityWorkerAvailable);
        }
      }
      if (w == null) {
        if (getCurrentPoolSize() >= getMaxPoolSize()) {
          w=getExistingWorker(Long.MAX_VALUE);
        }
 else {
          w=makeNewWorker();
        }
      }
    }
  }
  if (w != null) {
    Clock.accurateTime();
    long executionDelay=task.getDelayEstimateInMillis();
    if (executionDelay <= 0) {
synchronized (lowPriorityExecutionDelay.getModificationLock()) {
        lowPriorityExecutionDelay.add(executionDelay * -1);
        trimList(lowPriorityExecutionDelay);
      }
    }
    w.nextTask(task);
  }
}","@Override protected void runLowPriorityTask(TaskWrapper task) throws InterruptedException {
  Worker w=null;
synchronized (workersLock) {
    if (!getShutdownFinishing()) {
      long waitAmount;
      while (getCurrentPoolSize() >= getMaxPoolSize() && availableWorkers.size() < WORKER_CONTENTION_LEVEL && !getShutdownFinishing() && !highPriorityQueue.isEmpty() && (waitAmount=task.getDelayEstimateInMillis() - lastHighDelay) > LOW_PRIORITY_WAIT_TOLLERANCE_IN_MS) {
        workersLock.wait(waitAmount);
        Clock.accurateTime();
      }
      if (highPriorityQueue.isEmpty()) {
        lastHighDelay=0;
      }
      if (!getShutdownFinishing()) {
        if (getCurrentPoolSize() >= getMaxPoolSize()) {
synchronized (lowPriorityWorkerAvailable.getModificationLock()) {
            lowPriorityWorkerAvailable.add(!availableWorkers.isEmpty());
            trimList(lowPriorityWorkerAvailable);
          }
          w=getExistingWorker(Long.MAX_VALUE);
        }
 else {
          w=getExistingWorker(getMaxWaitForLowPriority());
synchronized (lowPriorityWorkerAvailable.getModificationLock()) {
            lowPriorityWorkerAvailable.add(w != null);
            trimList(lowPriorityWorkerAvailable);
          }
        }
        if (w == null) {
          if (getCurrentPoolSize() >= getMaxPoolSize()) {
            w=getExistingWorker(Long.MAX_VALUE);
          }
 else {
            w=makeNewWorker();
          }
        }
      }
    }
  }
  if (w != null) {
    Clock.accurateTime();
    long executionDelay=task.getDelayEstimateInMillis();
    if (executionDelay <= 0) {
synchronized (lowPriorityExecutionDelay.getModificationLock()) {
        lowPriorityExecutionDelay.add(executionDelay * -1);
        trimList(lowPriorityExecutionDelay);
      }
    }
    w.nextTask(task);
  }
}",0.822527832351015
161756,"@Override public void handleRunFinish(){
  if (!added) {
    distributor.addTask(threadTracker,this);
    added=true;
  }
}","@Override public void handleRunFinish(){
  throw testException;
}",0.574468085106383
161757,"@Test public void handleExceptionWithUncaughtExceptionHandler(){
  PrintStream originalSystemErr=System.err;
  try {
    final StringBuilder sb=new StringBuilder();
    System.setErr(new PrintStream(new OutputStream(){
      @Override public void write(      int b) throws IOException {
        sb.append((char)b);
      }
    }
));
    TestUncaughtExceptionHandler ueh=new TestUncaughtExceptionHandler();
    Thread.setDefaultUncaughtExceptionHandler(ueh);
    Exception e=new Exception();
    ExceptionUtils.handleException(e);
    assertEquals(sb.length(),0);
    assertEquals(ueh.callCount,1);
    assertTrue(ueh.calledWithThread == Thread.currentThread());
    assertTrue(ueh.providedThrowable == e);
  }
  finally {
    System.setErr(originalSystemErr);
  }
}","@Test public void handleExceptionWithUncaughtExceptionHandler(){
  PrintStream originalSystemErr=System.err;
  try {
    final StringBuilder sb=new StringBuilder();
    System.setErr(new PrintStream(new OutputStream(){
      @Override public void write(      int b) throws IOException {
        sb.append((char)b);
      }
    }
));
    TestUncaughtExceptionHandler ueh=new TestUncaughtExceptionHandler();
    Thread.setDefaultUncaughtExceptionHandler(ueh);
    Exception e=new Exception();
    ExceptionUtils.handleException(e);
    assertEquals(sb.length(),0);
    assertEquals(ueh.getCallCount(),1);
    assertTrue(ueh.getCalledWithThread() == Thread.currentThread());
    assertTrue(ueh.getCalledWithThrowable() == e);
  }
  finally {
    System.setErr(originalSystemErr);
  }
}",0.967032967032967
161758,"@Override public boolean isDone(){
synchronized (lock) {
    return done;
  }
}","@Override public boolean isDone(){
synchronized (lock) {
    return done || canceled;
  }
}",0.9294117647058824
161759,"@Override public void addListener(Runnable listener,Executor executor){
synchronized (lock) {
    if (done || canceled) {
      runListener(listener,executor,true);
    }
 else {
      listeners.put(listener,executor);
    }
  }
}","@Override public void addListener(Runnable listener,Executor executor){
synchronized (lock) {
    if (isDone()) {
      runListener(listener,executor,true);
    }
 else {
      listeners.put(listener,executor);
    }
  }
}",0.9469026548672568
161760,"@Override public void run(){
  while (true) {
    List<Runnable> nextList;
synchronized (agentLock) {
      nextList=queue;
      if (nextList.isEmpty()) {
        taskWorkers.remove(mapKey);
        break;
      }
 else {
        queue=new LinkedList<Runnable>();
      }
    }
    Iterator<Runnable> it=nextList.iterator();
    while (it.hasNext()) {
      try {
        Runnable next=it.next();
        if (factory != null && next instanceof VirtualRunnable) {
          ((VirtualRunnable)next).run(factory);
        }
 else {
          next.run();
        }
      }
 catch (      Throwable t) {
        UncaughtExceptionHandler ueh=Thread.getDefaultUncaughtExceptionHandler();
        ueh.uncaughtException(Thread.currentThread(),t);
      }
    }
  }
}","@Override public void run(){
  while (true) {
    List<Runnable> nextList;
synchronized (agentLock) {
      nextList=queue;
      if (nextList.isEmpty()) {
        taskWorkers.remove(mapKey);
        break;
      }
 else {
        queue=new LinkedList<Runnable>();
      }
    }
    Iterator<Runnable> it=nextList.iterator();
    while (it.hasNext()) {
      try {
        Runnable next=it.next();
        if (factory != null && next instanceof VirtualRunnable) {
          ((VirtualRunnable)next).run(factory);
        }
 else {
          next.run();
        }
      }
 catch (      Throwable t) {
        UncaughtExceptionHandler ueh=Thread.getDefaultUncaughtExceptionHandler();
        if (ueh != null) {
          ueh.uncaughtException(Thread.currentThread(),t);
        }
 else {
          t.printStackTrace();
        }
      }
    }
  }
}",0.9288389513108616
161761,"protected void trackTaskStart(Wrapper taskWrapper){
  runningTasks.put(taskWrapper,Clock.accurateTime());
switch (taskWrapper.priority) {
case High:
    totalHighPriorityExecutions.incrementAndGet();
  break;
case Low:
totalLowPriorityExecutions.incrementAndGet();
break;
default :
throw new UnsupportedOperationException(""String_Node_Str"" + taskWrapper.priority);
}
}","protected synchronized void trackTaskStart(Wrapper taskWrapper){
  runningTasks.put(taskWrapper,Clock.accurateTime());
switch (taskWrapper.priority) {
case High:
    totalHighPriorityExecutions.incrementAndGet();
  break;
case Low:
totalLowPriorityExecutions.incrementAndGet();
break;
default :
throw new UnsupportedOperationException(""String_Node_Str"" + taskWrapper.priority);
}
}",0.9826435246995996
161762,"/** 
 * Call to see how frequently high priority tasks are able to run without creating  a new thread. Returns -1 if no statistics for high priority tasks have been recorded yet.
 * @return percent that an existing worker could be used on high priority tasks
 */
public double getHighPriorityThreadReusePercent(){
  return getTruePercent(highPriorityWorkerAvailable);
}","/** 
 * Call to see how frequently high priority tasks are able to run without creating  a new thread. Returns -1 if no statistics for high priority tasks have been recorded yet.
 * @return percent of time that threads are able to be reused for high priority tasks
 */
public double getHighPriorityThreadReusePercent(){
  return getTruePercent(highPriorityWorkerAvailable);
}",0.8844086021505376
161763,"/** 
 * Call to see how frequently low priority tasks are able to run without creating  a new thread. Returns -1 if no statistics for high priority tasks have been recorded yet.
 * @return percent that an existing worker could be used on low priority tasks
 */
public double getLowPriorityThreadReusePercent(){
  return getTruePercent(lowPriorityWorkerAvailable);
}","/** 
 * Call to see how frequently low priority tasks are able to run without creating  a new thread. Returns -1 if no statistics for high priority tasks have been recorded yet.
 * @return percent of time that threads are able to be reused for low priority tasks
 */
public double getLowPriorityThreadReusePercent(){
  return getTruePercent(lowPriorityWorkerAvailable);
}",0.8831521739130435
161764,"@Override public long getDelay(TimeUnit unit){
  if (executing) {
    return Long.MAX_VALUE;
  }
 else {
    return TimeUnit.MILLISECONDS.convert(nextRunTime - ClockWrapper.getAccurateTime(),unit);
  }
}","@Override public long getDelay(TimeUnit unit){
  if (executing) {
    return Long.MAX_VALUE;
  }
 else {
    return TimeUnit.MILLISECONDS.convert(getNextDelayInMillis(),unit);
  }
}",0.875
161765,"private void reschedule(){
  nextRunTime=ClockWrapper.getAccurateTime() + recurringDelay;
  executing=false;
switch (priority) {
case High:
synchronized (highPriorityLock) {
      if (running) {
        ClockWrapper.stopForcingUpdate();
        try {
          ClockWrapper.updateClock();
          highPriorityQueue.reposition(this);
        }
  finally {
          ClockWrapper.resumeForcingUpdate();
        }
      }
    }
  break;
case Low:
synchronized (lowPriorityLock) {
  if (running) {
    ClockWrapper.stopForcingUpdate();
    try {
      ClockWrapper.updateClock();
      lowPriorityQueue.reposition(this);
    }
  finally {
      ClockWrapper.resumeForcingUpdate();
    }
  }
}
break;
default :
throw new UnsupportedOperationException(""String_Node_Str"" + priority);
}
}","private void reschedule(){
  nextRunTime=ClockWrapper.getAccurateTime() + recurringDelay;
switch (priority) {
case High:
synchronized (highPriorityLock) {
      if (running) {
        ClockWrapper.stopForcingUpdate();
        try {
          ClockWrapper.updateClock();
          highPriorityQueue.reposition(this,getNextDelayInMillis());
        }
  finally {
          ClockWrapper.resumeForcingUpdate();
        }
      }
    }
  break;
case Low:
synchronized (lowPriorityLock) {
  if (running) {
    ClockWrapper.stopForcingUpdate();
    try {
      ClockWrapper.updateClock();
      lowPriorityQueue.reposition(this,getNextDelayInMillis());
    }
  finally {
      ClockWrapper.resumeForcingUpdate();
    }
  }
}
break;
default :
throw new UnsupportedOperationException(""String_Node_Str"" + priority);
}
executing=false;
}",0.1330845771144278
161766,"/** 
 * Called to reposition an item in the queue which's delay has updated since original insertion (or was originally inserted as addLast().
 * @param e item currently in the queue
 */
public void reposition(T e){
  if (e == null) {
    return;
  }
synchronized (queueLock) {
    int insertionIndex=ListUtils.getInsertionEndIndex(queue,e,randomAccessQueue);
    queue.reposition(e,insertionIndex,true);
    queueLock.signalAll();
  }
}","/** 
 * Called to reposition an item in the queue which's delay wants to be updated since original insertion (or was originally inserted as addLast()). It is expected that this function will be called to reposition before the items  delay time is updated in the .getDelay(TimeUnit) call.  After this function the  provided item should update it's delay to the one provided here immediately.
 * @param e item currently in the queue
 * @param newDelayInMillis delay time that e will be updated to after reposition
 */
public void reposition(T e,long newDelayInMillis){
  if (e == null) {
    return;
  }
synchronized (queueLock) {
    int insertionIndex=ListUtils.getInsertionEndIndex(queue,newDelayInMillis,randomAccessQueue);
    queue.reposition(e,insertionIndex,true);
    queueLock.signalAll();
  }
}",0.6983870967741935
161767,"/** 
 * A faster binary search algorithm for sorting a list. This algorithm works by actually knowing the values  and making smart decisions about how far to jump in  the list based on those values.  Which is why this can not take in a comparable interface like Collections does.  This was adapted from code posted from this  blog post: http://ochafik.com/blog/?p=106
 * @param list to be searched through
 * @param key delay value to search for
 * @param randomAccessList true to optimize for list that have cheap random access
 * @return index where found, or -(insertion point) - 1 if not found
 */
public static int binarySearch(List<? extends Delayed> list,Delayed key,boolean randomAccessList){
  if (list.isEmpty()) {
    return -1;
  }
  final int absoluteMin=0;
  final int absoluteMax=list.size() - 1;
  long keyValue=key.getDelay(TimeUnit.MILLISECONDS);
  int min=absoluteMin;
  int max=absoluteMax;
  long minVal=list.get(absoluteMin).getDelay(TimeUnit.MILLISECONDS);
  long maxVal=list.get(absoluteMax).getDelay(TimeUnit.MILLISECONDS);
  int nPreviousSteps=1;
  while (true) {
    if (keyValue <= minVal) {
      return keyValue == minVal ? min : -1 - min;
    }
 else     if (keyValue >= maxVal) {
      return keyValue == maxVal ? max : -2 - max;
    }
    int pivot;
    if (nPreviousSteps > MAX_STEPS_TILL_B_SEARCH_SWITCH) {
      pivot=(min + max) >> 1;
    }
 else {
      pivot=min + (int)((keyValue - (float)minVal) / (maxVal - (float)minVal) * (max - min));
      nPreviousSteps++;
    }
    long pivotVal=list.get(pivot).getDelay(TimeUnit.MILLISECONDS);
    if (keyValue > pivotVal) {
      min=pivot + 1;
      if (min > absoluteMax) {
        return absoluteMax + 1;
      }
      minVal=list.get(min).getDelay(TimeUnit.MILLISECONDS);
      if (randomAccessList) {
        max--;
        maxVal=list.get(max).getDelay(TimeUnit.MILLISECONDS);
      }
    }
 else     if (keyValue < pivotVal) {
      max=pivot - 1;
      if (max < absoluteMin) {
        return absoluteMin;
      }
      maxVal=list.get(max).getDelay(TimeUnit.MILLISECONDS);
      if (randomAccessList) {
        min++;
        minVal=list.get(min).getDelay(TimeUnit.MILLISECONDS);
      }
    }
 else {
      return pivot;
    }
  }
}","/** 
 * A faster binary search algorithm for sorting a list. This algorithm works by actually knowing the values  and making smart decisions about how far to jump in  the list based on those values.  Which is why this can not take in a comparable interface like Collections does.  This was adapted from code posted from this  blog post: http://ochafik.com/blog/?p=106
 * @param list to be searched through
 * @param insertionValueInMillis delay time in milliseconds to search for insertion point
 * @param randomAccessList true to optimize for list that have cheap random access
 * @return index where found, or -(insertion point) - 1 if not found
 */
public static int binarySearch(List<? extends Delayed> list,long insertionValueInMillis,boolean randomAccessList){
  if (list.isEmpty()) {
    return -1;
  }
  final int absoluteMin=0;
  final int absoluteMax=list.size() - 1;
  int min=absoluteMin;
  int max=absoluteMax;
  long minVal=list.get(absoluteMin).getDelay(TimeUnit.MILLISECONDS);
  long maxVal=list.get(absoluteMax).getDelay(TimeUnit.MILLISECONDS);
  int nPreviousSteps=1;
  while (true) {
    if (insertionValueInMillis <= minVal) {
      return insertionValueInMillis == minVal ? min : -1 - min;
    }
 else     if (insertionValueInMillis >= maxVal) {
      return insertionValueInMillis == maxVal ? max : -2 - max;
    }
    int pivot;
    if (nPreviousSteps > MAX_STEPS_TILL_B_SEARCH_SWITCH) {
      pivot=(min + max) >> 1;
    }
 else {
      pivot=min + (int)((insertionValueInMillis - (float)minVal) / (maxVal - (float)minVal) * (max - min));
      nPreviousSteps++;
    }
    long pivotVal=list.get(pivot).getDelay(TimeUnit.MILLISECONDS);
    if (insertionValueInMillis > pivotVal) {
      min=pivot + 1;
      if (min > absoluteMax) {
        return absoluteMax + 1;
      }
      minVal=list.get(min).getDelay(TimeUnit.MILLISECONDS);
      if (randomAccessList) {
        max--;
        maxVal=list.get(max).getDelay(TimeUnit.MILLISECONDS);
      }
    }
 else     if (insertionValueInMillis < pivotVal) {
      max=pivot - 1;
      if (max < absoluteMin) {
        return absoluteMin;
      }
      maxVal=list.get(max).getDelay(TimeUnit.MILLISECONDS);
      if (randomAccessList) {
        min++;
        minVal=list.get(min).getDelay(TimeUnit.MILLISECONDS);
      }
    }
 else {
      return pivot;
    }
  }
}",0.8687267148805611
161768,"/** 
 * This function uses the binary search and adds a small amount of logic such that it determines the placement index for a given item.  It is  designed to always place the item after any existing items that match the  key's delay.
 * @param list List to search entries for placement
 * @param key key for searching placement of
 * @param randomAccessList boolean for optimization with binary search
 * @return the index to insert the key into the list
 */
public static int getInsertionEndIndex(List<? extends Delayed> list,Delayed key,boolean randomAccessList){
  int searchResult=binarySearch(list,key,randomAccessList);
  if (searchResult >= 0) {
    long keyDelay=key.getDelay(TimeUnit.MILLISECONDS);
    Iterator<? extends Delayed> it=list.listIterator(searchResult);
    while (it.hasNext() && it.next().getDelay(TimeUnit.MILLISECONDS) == keyDelay) {
      searchResult++;
    }
    return searchResult;
  }
 else {
    return Math.abs(searchResult) - 1;
  }
}","/** 
 * This function uses the binary search and adds a small amount of logic such that it determines the placement index for a given item.  It is  designed to always place the item after any existing items that match the  key's delay.
 * @param list List to search entries for placement
 * @param insertionValueInMillis delay time in milliseconds to search for insertion point
 * @param randomAccessList boolean for optimization with binary search
 * @return the index to insert the key into the list
 */
public static int getInsertionEndIndex(List<? extends Delayed> list,long insertionValueInMillis,boolean randomAccessList){
  int searchResult=binarySearch(list,insertionValueInMillis,randomAccessList);
  if (searchResult >= 0) {
    Iterator<? extends Delayed> it=list.listIterator(searchResult);
    while (it.hasNext() && it.next().getDelay(TimeUnit.MILLISECONDS) == insertionValueInMillis) {
      searchResult++;
    }
    return searchResult;
  }
 else {
    return Math.abs(searchResult) - 1;
  }
}",0.7804139323573952
161769,"@Override public boolean add(T e){
  if (e == null) {
    return false;
  }
synchronized (queueLock) {
    int insertionIndex=ListUtils.getInsertionEndIndex(queue,e,randomAccessQueue);
    queue.add(insertionIndex,e);
    queueLock.notify();
  }
  return true;
}","@Override public boolean add(T e){
  if (e == null) {
    return false;
  }
synchronized (queueLock) {
    int insertionIndex=ListUtils.getInsertionEndIndex(queue,e,randomAccessQueue);
    queue.add(insertionIndex,e);
    queueLock.signal();
  }
  return true;
}",0.9770992366412212
161770,"@Override public int drainTo(Collection<? super T> c,int maxElements){
  if (maxElements <= 0) {
    return 0;
  }
  int addedElements=0;
  while (addedElements < maxElements && peek() != null) {
    c.add(poll());
    addedElements++;
  }
  return addedElements;
}","@Override public int drainTo(Collection<? super T> c,int maxElements){
  if (maxElements <= 0) {
    return 0;
  }
  int addedElements=0;
synchronized (queueLock) {
    while (addedElements < maxElements && peek() != null) {
      c.add(poll());
      addedElements++;
    }
  }
  return addedElements;
}",0.8541300527240774
161771,"@Override public int drainTo(Collection<? super T> c,int maxElements){
  if (maxElements <= 0) {
    return 0;
  }
  int addedElements=0;
  T next=poll();
  while (addedElements < maxElements && next != null) {
    c.add(next);
    addedElements++;
    next=poll();
  }
  return addedElements;
}","@Override public int drainTo(Collection<? super T> c,int maxElements){
  if (maxElements <= 0) {
    return 0;
  }
  int addedElements=0;
  while (addedElements < maxElements && peek() != null) {
    c.add(poll());
    addedElements++;
  }
  return addedElements;
}",0.9035714285714286
161772,"@Override public T pollFirst(){
synchronized (modificationLock) {
    T result=peekFirst();
    if (result != null) {
      currentData=currentData.remove(size() - 1);
    }
    return result;
  }
}","@Override public T pollFirst(){
synchronized (modificationLock) {
    T result=peekFirst();
    if (result != null) {
      currentData=currentData.remove(0);
    }
    return result;
  }
}",0.9715762273901808
161773,"@Override public <T>T invokeAny(Collection<? extends Callable<T>> tasks,long timeout,TimeUnit unit) throws InterruptedException, ExecutionException, TimeoutException {
  return invokeAny(tasks,timeout,unit);
}","@Override public <T>T invokeAny(Collection<? extends Callable<T>> tasks,long timeout,TimeUnit unit) throws InterruptedException, ExecutionException, TimeoutException {
  throw new UnsupportedOperationException();
}",0.8274231678486997
161774,"@Override public <T>List<Future<T>> invokeAll(Collection<? extends Callable<T>> tasks,long timeout,TimeUnit unit) throws InterruptedException {
  long startTime=Clock.accurateTime();
  long timeoutInMs=TimeUnit.MILLISECONDS.convert(timeout,unit);
  List<Future<T>> resultList=new ArrayList<Future<T>>(tasks.size());
{
    Iterator<? extends Callable<T>> it=tasks.iterator();
    while (it.hasNext()) {
      Callable<T> c=it.next();
      FutureRunnable<T> fr=new FutureRunnable<T>(c);
      resultList.add(fr);
      scheduler.execute(fr);
    }
  }
{
    Iterator<Future<T>> it=resultList.iterator();
    long remainingTime=Math.max(0,timeoutInMs - (Clock.accurateTime() - startTime));
    while (it.hasNext() && remainingTime > 0) {
      try {
        it.next().get(remainingTime,TimeUnit.MILLISECONDS);
      }
 catch (      ExecutionException e) {
      }
catch (      TimeoutException e) {
        break;
      }
      remainingTime=Math.max(0,timeoutInMs - (Clock.accurateTime() - startTime));
    }
  }
  return resultList;
}","@Override public <T>List<Future<T>> invokeAll(Collection<? extends Callable<T>> tasks,long timeout,TimeUnit unit) throws InterruptedException {
  long startTime=Clock.accurateTime();
  long timeoutInMs=TimeUnit.MILLISECONDS.convert(timeout,unit);
  List<Future<T>> resultList=new ArrayList<Future<T>>(tasks.size());
{
    Iterator<? extends Callable<T>> it=tasks.iterator();
    while (it.hasNext()) {
      Callable<T> c=it.next();
      if (c == null) {
        throw new NullPointerException();
      }
      FutureRunnable<T> fr=new FutureRunnable<T>(c);
      resultList.add(fr);
      scheduler.execute(fr);
    }
  }
{
    Iterator<Future<T>> it=resultList.iterator();
    long remainingTime=Math.max(0,timeoutInMs - (Clock.accurateTime() - startTime));
    while (it.hasNext() && remainingTime > 0) {
      try {
        it.next().get(remainingTime,TimeUnit.MILLISECONDS);
      }
 catch (      ExecutionException e) {
      }
catch (      TimeoutException e) {
        break;
      }
      remainingTime=Math.max(0,timeoutInMs - (Clock.accurateTime() - startTime));
    }
  }
  return resultList;
}",0.9659037832788416
161775,"public static void invokeAllTest(ScheduledExecutorService scheduler){
}","public static void invokeAllTest(ScheduledExecutorService scheduler) throws InterruptedException, ExecutionException {
  int callableQty=10;
  List<TestCallable> toInvoke=new ArrayList<TestCallable>(callableQty);
  for (int i=0; i < callableQty; i++) {
    toInvoke.add(new TestCallable(0));
  }
  List<Future<Object>> result=scheduler.invokeAll(toInvoke);
  assertEquals(result.size(),toInvoke.size());
  Iterator<TestCallable> it=toInvoke.iterator();
  Iterator<Future<Object>> resultIt=result.iterator();
  while (it.hasNext()) {
    assertTrue(resultIt.next().get() == it.next().result);
  }
}",0.2125748502994012
161776,"@Override public int drainTo(Collection<? super T> c,int maxElements){
  int addedElements=0;
  T next=poll();
  while (addedElements < maxElements && next != null) {
    c.add(next);
    addedElements++;
    next=poll();
  }
  return addedElements;
}","@Override public int drainTo(Collection<? super T> c,int maxElements){
  if (maxElements <= 0) {
    return 0;
  }
  int addedElements=0;
  T next=poll();
  while (addedElements < maxElements && next != null) {
    c.add(next);
    addedElements++;
    next=poll();
  }
  return addedElements;
}",0.9194139194139194
161777,"/** 
 * Constructs a new thread pool, though no threads will be started  till it accepts it's first request.  This provides the extra parameters to tune what tasks submitted without a priority will be  scheduled as.  As well as the maximum wait for low priority tasks. The longer low priority tasks wait for a worker, the less chance they will have to make a thread.  But it also makes low priority tasks execution time less predictable.
 * @param corePoolSize pool size that should be maintained
 * @param maxPoolSize maximum allowed thread count
 * @param keepAliveTimeInMs time to wait for a given thread to be idle before killing
 * @param defaultPriority priority to give tasks which do not specify it
 * @param maxWaitForLowPriorityInMs time low priority tasks wait for a worker
 */
public PriorityScheduledExecutor(int corePoolSize,int maxPoolSize,long keepAliveTimeInMs,TaskPriority defaultPriority,long maxWaitForLowPriorityInMs){
  if (corePoolSize < 1) {
    throw new IllegalArgumentException(""String_Node_Str"");
  }
 else   if (maxPoolSize < corePoolSize) {
    throw new IllegalArgumentException(""String_Node_Str"");
  }
 else   if (keepAliveTimeInMs < 0) {
    throw new IllegalArgumentException(""String_Node_Str"");
  }
 else   if (maxWaitForLowPriorityInMs < 0) {
    throw new IllegalArgumentException(""String_Node_Str"");
  }
  if (defaultPriority == null) {
    defaultPriority=GLOBAL_DEFAULT_PRIORITY;
  }
  this.defaultPriority=defaultPriority;
  highPriorityLock=makeLock();
  lowPriorityLock=makeLock();
  workersLock=makeLock();
  highPriorityQueue=new DynamicDelayQueue<TaskWrapper>(highPriorityLock);
  lowPriorityQueue=new DynamicDelayQueue<TaskWrapper>(lowPriorityLock);
  availableWorkers=new ArrayDeque<Worker>(maxPoolSize);
  threadFactory=new ThreadFactory(){
    private final ThreadFactory defaultFactory=Executors.defaultThreadFactory();
    @Override public Thread newThread(    Runnable runnable){
      Thread thread=defaultFactory.newThread(runnable);
      thread.setDaemon(USE_DAEMON_THREADS);
      return thread;
    }
  }
;
  highPriorityConsumer=new TaskConsumer(highPriorityQueue,highPriorityLock,new TaskAcceptor(){
    @Override public void acceptTask(    TaskWrapper task) throws InterruptedException {
      runHighPriorityTask(task);
    }
  }
);
  lowPriorityConsumer=new TaskConsumer(lowPriorityQueue,lowPriorityLock,new TaskAcceptor(){
    @Override public void acceptTask(    TaskWrapper task) throws InterruptedException {
      runLowPriorityTask(task);
    }
  }
);
  running=true;
  this.corePoolSize=corePoolSize;
  this.maxPoolSize=maxPoolSize;
  this.keepAliveTimeInMs=keepAliveTimeInMs;
  this.maxWaitForLowPriorityInMs=maxWaitForLowPriorityInMs;
  this.allowCorePoolTimeout=false;
  currentPoolSize=0;
}","/** 
 * Constructs a new thread pool, though no threads will be started  till it accepts it's first request.  This provides the extra parameters to tune what tasks submitted without a priority will be  scheduled as.  As well as the maximum wait for low priority tasks. The longer low priority tasks wait for a worker, the less chance they will have to make a thread.  But it also makes low priority tasks execution time less predictable.
 * @param corePoolSize pool size that should be maintained
 * @param maxPoolSize maximum allowed thread count
 * @param keepAliveTimeInMs time to wait for a given thread to be idle before killing
 * @param defaultPriority priority to give tasks which do not specify it
 * @param maxWaitForLowPriorityInMs time low priority tasks wait for a worker
 * @param threadFactory thread factory for producing new threads within executor
 */
public PriorityScheduledExecutor(int corePoolSize,int maxPoolSize,long keepAliveTimeInMs,TaskPriority defaultPriority,long maxWaitForLowPriorityInMs,ThreadFactory threadFactory){
  if (corePoolSize < 1) {
    throw new IllegalArgumentException(""String_Node_Str"");
  }
 else   if (maxPoolSize < corePoolSize) {
    throw new IllegalArgumentException(""String_Node_Str"");
  }
 else   if (keepAliveTimeInMs < 0) {
    throw new IllegalArgumentException(""String_Node_Str"");
  }
 else   if (maxWaitForLowPriorityInMs < 0) {
    throw new IllegalArgumentException(""String_Node_Str"");
  }
  if (defaultPriority == null) {
    defaultPriority=DEFAULT_PRIORITY;
  }
  if (threadFactory == null) {
    threadFactory=Executors.defaultThreadFactory();
  }
  this.defaultPriority=defaultPriority;
  highPriorityLock=makeLock();
  lowPriorityLock=makeLock();
  workersLock=makeLock();
  highPriorityQueue=new DynamicDelayQueue<TaskWrapper>(highPriorityLock);
  lowPriorityQueue=new DynamicDelayQueue<TaskWrapper>(lowPriorityLock);
  availableWorkers=new ArrayDeque<Worker>(maxPoolSize);
  this.threadFactory=threadFactory;
  highPriorityConsumer=new TaskConsumer(highPriorityQueue,highPriorityLock,new TaskAcceptor(){
    @Override public void acceptTask(    TaskWrapper task) throws InterruptedException {
      runHighPriorityTask(task);
    }
  }
);
  lowPriorityConsumer=new TaskConsumer(lowPriorityQueue,lowPriorityLock,new TaskAcceptor(){
    @Override public void acceptTask(    TaskWrapper task) throws InterruptedException {
      runLowPriorityTask(task);
    }
  }
);
  running=true;
  this.corePoolSize=corePoolSize;
  this.maxPoolSize=maxPoolSize;
  this.keepAliveTimeInMs=keepAliveTimeInMs;
  this.maxWaitForLowPriorityInMs=maxWaitForLowPriorityInMs;
  this.allowCorePoolTimeout=false;
  currentPoolSize=0;
}",0.8081587651598677
161778,"public void maybeStart(){
  if (started) {
    return;
  }
synchronized (queueLock) {
    if (started) {
      return;
    }
    started=true;
    runningThread=new Thread(this);
    runningThread.setDaemon(USE_DAEMON_THREADS);
    runningThread.setName(""String_Node_Str"");
    runningThread.start();
  }
}","public void maybeStart(){
  if (started) {
    return;
  }
synchronized (queueLock) {
    if (started) {
      return;
    }
    started=true;
    runningThread=threadFactory.newThread(this);
    runningThread.setDaemon(true);
    runningThread.setName(""String_Node_Str"");
    runningThread.start();
  }
}",0.939443535188216
161779,"protected Worker getExistingWorker(long maxWaitForLowPriorityInMs) throws InterruptedException {
synchronized (workersLock) {
    long startTime=ClockWrapper.getAccurateTime();
    long waitTime=maxWaitForLowPriorityInMs;
    while (availableWorkers.isEmpty() && waitTime > 0) {
      if (waitTime == Long.MAX_VALUE) {
        workersLock.await();
      }
 else {
        long elapsedTime=ClockWrapper.getAccurateTime() - startTime;
        waitTime=maxWaitForLowPriorityInMs - elapsedTime;
        workersLock.await(waitTime);
      }
    }
    if (availableWorkers.isEmpty()) {
      return null;
    }
 else {
      return availableWorkers.removeFirst();
    }
  }
}","protected Worker getExistingWorker(long maxWaitForLowPriorityInMs) throws InterruptedException {
synchronized (workersLock) {
    long startTime=ClockWrapper.getAccurateTime();
    long waitTime=maxWaitForLowPriorityInMs;
    while (availableWorkers.isEmpty() && waitTime > 0) {
      if (waitTime == Long.MAX_VALUE) {
        workersLock.await();
      }
 else {
        long elapsedTime=ClockWrapper.getAccurateTime() - startTime;
        waitTime=maxWaitForLowPriorityInMs - elapsedTime;
        if (waitTime > 0) {
          workersLock.await(waitTime);
        }
      }
    }
    if (availableWorkers.isEmpty()) {
      return null;
    }
 else {
      return availableWorkers.removeFirst();
    }
  }
}",0.9709724238026124
161780,"@Override public Thread newThread(Runnable runnable){
  Thread thread=defaultFactory.newThread(runnable);
  thread.setDaemon(USE_DAEMON_THREADS);
  return thread;
}","@Override public Thread newThread(Runnable runnable){
  Thread thread=defaultFactory.newThread(runnable);
  thread.setDaemon(useDaemonThreads);
  return thread;
}",0.9079754601226994
161781,"@Test public void repositionNormalMoveMiddleTest(){
  DataSet<Integer> result=orderedNormal.reposition(1,0);
  Integer[] expectedResult=new Integer[]{1,0,2,3,4,5,6,7,8,9};
  System.out.println(result);
  assertTrue(result.equals(getDataSet(expectedResult,0,expectedResult.length)));
  result=orderedNormal.reposition(1,5);
  expectedResult=new Integer[]{0,2,3,4,1,5,6,7,8,9};
  assertTrue(result.equals(getDataSet(expectedResult,0,expectedResult.length)));
  result=orderedNormal.reposition(5,1);
  expectedResult=new Integer[]{0,5,1,2,3,4,6,7,8,9};
  assertTrue(result.equals(getDataSet(expectedResult,0,expectedResult.length)));
  result=orderedNormal.reposition(1,10);
  expectedResult=new Integer[]{0,2,3,4,5,6,7,8,9,1};
  assertTrue(result.equals(getDataSet(expectedResult,0,expectedResult.length)));
}","@Test public void repositionNormalMoveMiddleTest(){
  DataSet<Integer> result=orderedNormal.reposition(1,0);
  Integer[] expectedResult=new Integer[]{1,0,2,3,4,5,6,7,8,9};
  assertTrue(result.equals(getDataSet(expectedResult,0,expectedResult.length)));
  result=orderedNormal.reposition(1,5);
  expectedResult=new Integer[]{0,2,3,4,1,5,6,7,8,9};
  assertTrue(result.equals(getDataSet(expectedResult,0,expectedResult.length)));
  result=orderedNormal.reposition(5,1);
  expectedResult=new Integer[]{0,5,1,2,3,4,6,7,8,9};
  assertTrue(result.equals(getDataSet(expectedResult,0,expectedResult.length)));
  result=orderedNormal.reposition(1,10);
  expectedResult=new Integer[]{0,2,3,4,5,6,7,8,9,1};
  assertTrue(result.equals(getDataSet(expectedResult,0,expectedResult.length)));
}",0.981060606060606
161782,"protected void blockTillAvailable() throws InterruptedException {
synchronized (queueLock) {
    while (queue.isEmpty()) {
      queueLock.await();
    }
    long nextDelay=-1;
    while ((nextDelay=queue.getFirst().getDelay(TimeUnit.MILLISECONDS)) > 0) {
      if (nextDelay > 5) {
        queueLock.await(nextDelay);
      }
    }
  }
}","protected void blockTillAvailable() throws InterruptedException {
synchronized (queueLock) {
    while (true) {
      if (queue.isEmpty()) {
        queueLock.await();
      }
      T next=queue.getFirst();
      long nextDelay=next.getDelay(TimeUnit.MILLISECONDS);
      if (nextDelay > 5) {
        queueLock.await(nextDelay);
      }
 else       if (nextDelay > 0) {
        long startTime=ClockWrapper.getAccurateTime();
        long startDelay=nextDelay;
        while ((nextDelay=next.getDelay(TimeUnit.MILLISECONDS)) > 0 && (nextDelay != startDelay || ClockWrapper.getAccurateTime() < startTime + 5)) {
        }
        if (nextDelay > 0) {
          queueLock.await(nextDelay);
        }
      }
 else {
        return;
      }
    }
  }
}",0.5027624309392266
161783,"private RunnableContainer getNextTask(long nowInMs){
synchronized (queueLock) {
    RunnableContainer firstResult=null;
    long nextDelay=Long.MIN_VALUE;
    Iterator<RunnableContainer> it=taskQueue.iterator();
    while (it.hasNext() && nextDelay <= 0) {
      RunnableContainer next=it.next();
      nextDelay=next.getDelay(nowInMs,TimeUnit.MILLISECONDS);
      if (nextDelay <= 0) {
        if (firstResult == null) {
          if (next.priority == TaskPriority.Low) {
            firstResult=next;
          }
 else {
            it.remove();
            return next;
          }
        }
 else         if (next.priority == TaskPriority.High) {
          it.remove();
          return next;
        }
      }
    }
    taskQueue.removeFirst();
    return firstResult;
  }
}","private RunnableContainer getNextTask(long nowInMs){
synchronized (queueLock) {
    RunnableContainer firstResult=null;
    long nextDelay=Long.MIN_VALUE;
    Iterator<RunnableContainer> it=taskQueue.iterator();
    while (it.hasNext() && nextDelay <= 0) {
      RunnableContainer next=it.next();
      nextDelay=next.getDelay(nowInMs,TimeUnit.MILLISECONDS);
      if (nextDelay <= 0) {
        if (firstResult == null) {
          if (next.priority == TaskPriority.Low) {
            firstResult=next;
          }
 else {
            it.remove();
            return next;
          }
        }
 else         if (next.priority == TaskPriority.High) {
          it.remove();
          return next;
        }
      }
    }
    if (firstResult != null) {
      taskQueue.removeFirst();
    }
    return firstResult;
  }
}",0.9755792110206636
161784,"@After public void tearDown(){
  testScheduler=null;
  parentScheduler=null;
  parentScheduler.shutdown();
}","@After public void tearDown(){
  testScheduler=null;
  parentScheduler.shutdown();
  parentScheduler=null;
}",0.8703703703703703
161785,"@Override protected void toSVG(RRDiagramToSVG rrDiagramToSVG,int xOffset,int yOffset,SvgContent svgContent){
  LayoutInfo layoutInfo1=rrElement.getLayoutInfo();
  int width1=layoutInfo1.getWidth();
  int maxWidth=width1;
  int yOffset2=yOffset;
  LayoutInfo layoutInfo=getLayoutInfo();
  int connectorOffset=layoutInfo.getConnectorOffset();
  int y1=yOffset;
  int loopOffset=0;
  int loopWidth=0;
  if (loopElement != null) {
    LayoutInfo layoutInfo2=loopElement.getLayoutInfo();
    loopWidth=layoutInfo2.getWidth();
    maxWidth=Math.max(maxWidth,loopWidth);
    loopOffset=xOffset + 20 + (maxWidth - loopWidth) / 2;
    yOffset2+=5 + layoutInfo2.getHeight();
    y1+=layoutInfo2.getConnectorOffset();
  }
 else {
    yOffset2+=15;
    y1+=5;
  }
  int x1=xOffset + 10;
  int x2=xOffset + 20 + maxWidth+ 10+ cardinalitiesWidth;
  int y2=yOffset + connectorOffset;
  svgContent.addLineConnector(x1 - 10,y2,x1 + 10 + (maxWidth - width1) / 2,y2);
  int loopPathStartX=x1 + 5;
  svgContent.addPathConnector(x1 + 5,y2,""String_Node_Str"",x1,y2 - 5);
  svgContent.addLineConnector(x1,y2 - 5,x1,y1 + 5);
  svgContent.addPathConnector(x1,y1 + 5,""String_Node_Str"",x1 + 5,y1);
  if (loopElement != null) {
    svgContent.addLineConnector(x1 + 5,y1,loopOffset,y1);
    loopElement.toSVG(rrDiagramToSVG,loopOffset,yOffset,svgContent);
    loopPathStartX=loopOffset + loopWidth;
  }
  svgContent.addLineConnector(loopPathStartX,y1,x2 - 5,y1);
  svgContent.addPathConnector(x2 - 5,y1,""String_Node_Str"",x2,y1 + 5);
  svgContent.addLineConnector(x2,y1 + 5,x2,y2 - 5);
  svgContent.addPathConnector(x2,y2 - 5,""String_Node_Str"",x2 - 5,y2);
  if (cardinalitiesText != null) {
    String cssClass=RRDiagram.CSS_LOOP_CARDINALITIES_TEXT_CLASS;
    if (!svgContent.isStyleDefined(cssClass)) {
      Font loopFont=rrDiagramToSVG.getLoopFont();
      String loopTextColor=Utils.convertColorToHtml(rrDiagramToSVG.getLoopTextColor());
      cssClass=svgContent.setCSSClass(cssClass,""String_Node_Str"" + loopTextColor + ""String_Node_Str""+ Utils.convertFontToCss(loopFont));
    }
    svgContent.addElement(""String_Node_Str"" + cssClass + ""String_Node_Str""+ (x2 - cardinalitiesWidth)+ ""String_Node_Str""+ (y2 - fontYOffset - 5)+ ""String_Node_Str""+ Utils.escapeXML(cardinalitiesText)+ ""String_Node_Str"");
  }
  rrElement.toSVG(rrDiagramToSVG,xOffset + 20 + (maxWidth - width1) / 2,yOffset2,svgContent);
  svgContent.addLineConnector(x2 - cardinalitiesWidth - 10- (maxWidth - width1) / 2,y2,xOffset + layoutInfo.getWidth(),y2);
}","@Override protected void toSVG(RRDiagramToSVG rrDiagramToSVG,int xOffset,int yOffset,SvgContent svgContent){
  LayoutInfo layoutInfo1=rrElement.getLayoutInfo();
  int width1=layoutInfo1.getWidth();
  int maxWidth=width1;
  int yOffset2=yOffset;
  LayoutInfo layoutInfo=getLayoutInfo();
  int connectorOffset=layoutInfo.getConnectorOffset();
  int y1=yOffset;
  int loopOffset=0;
  int loopWidth=0;
  if (loopElement != null) {
    LayoutInfo layoutInfo2=loopElement.getLayoutInfo();
    loopWidth=layoutInfo2.getWidth();
    maxWidth=Math.max(maxWidth,loopWidth);
    loopOffset=xOffset + 20 + (maxWidth - loopWidth) / 2;
    yOffset2+=5 + layoutInfo2.getHeight();
    y1+=layoutInfo2.getConnectorOffset();
  }
 else {
    yOffset2+=15;
    y1+=5;
  }
  int x1=xOffset + 10;
  int x2=xOffset + 20 + maxWidth+ 10+ cardinalitiesWidth;
  int y2=yOffset + connectorOffset;
  svgContent.addLineConnector(x1 - 10,y2,x1 + 10 + (maxWidth - width1) / 2,y2);
  int loopPathStartX=x1 + 5;
  svgContent.addPathConnector(x1 + 5,y2,""String_Node_Str"",x1,y2 - 5);
  svgContent.addLineConnector(x1,y2 - 5,x1,y1 + 5);
  svgContent.addPathConnector(x1,y1 + 5,""String_Node_Str"",x1 + 5,y1);
  if (loopElement != null) {
    svgContent.addLineConnector(x1 + 5,y1,loopOffset,y1);
    loopElement.toSVG(rrDiagramToSVG,loopOffset,yOffset,svgContent);
    loopPathStartX=loopOffset + loopWidth;
  }
  svgContent.addLineConnector(loopPathStartX,y1,x2 - 5,y1);
  svgContent.addPathConnector(x2 - 5,y1,""String_Node_Str"",x2,y1 + 5);
  svgContent.addLineConnector(x2,y1 + 5,x2,y2 - 5);
  svgContent.addPathConnector(x2,y2 - 5,""String_Node_Str"",x2 - 5,y2);
  if (cardinalitiesText != null) {
    String cssClass=svgContent.getDefinedCSSClass(RRDiagram.CSS_LOOP_CARDINALITIES_TEXT_CLASS);
    if (cssClass == null) {
      Font loopFont=rrDiagramToSVG.getLoopFont();
      String loopTextColor=Utils.convertColorToHtml(rrDiagramToSVG.getLoopTextColor());
      cssClass=svgContent.setCSSClass(RRDiagram.CSS_LOOP_CARDINALITIES_TEXT_CLASS,""String_Node_Str"" + loopTextColor + ""String_Node_Str""+ Utils.convertFontToCss(loopFont));
    }
    svgContent.addElement(""String_Node_Str"" + cssClass + ""String_Node_Str""+ (x2 - cardinalitiesWidth)+ ""String_Node_Str""+ (y2 - fontYOffset - 5)+ ""String_Node_Str""+ Utils.escapeXML(cardinalitiesText)+ ""String_Node_Str"");
  }
  rrElement.toSVG(rrDiagramToSVG,xOffset + 20 + (maxWidth - width1) / 2,yOffset2,svgContent);
  svgContent.addLineConnector(x2 - cardinalitiesWidth - 10- (maxWidth - width1) / 2,y2,xOffset + layoutInfo.getWidth(),y2);
}",0.969456564855216
161786,"@Override protected void toSVG(RRDiagramToSVG rrDiagramToSVG,int xOffset,int yOffset,SvgContent svgContent){
  LayoutInfo layoutInfo=getLayoutInfo();
  int width=layoutInfo.getWidth();
  int height=layoutInfo.getHeight();
  if (link != null) {
    svgContent.addElement(""String_Node_Str"" + Utils.escapeXML(link) + ""String_Node_Str"");
  }
  Insets insets;
  Font font;
  String cssClass;
  String cssTextClass;
  BoxShape shape;
switch (type) {
case RULE:
    insets=rrDiagramToSVG.getRuleInsets();
  font=rrDiagramToSVG.getRuleFont();
cssClass=RRDiagram.CSS_RULE_CLASS;
cssTextClass=RRDiagram.CSS_RULE_TEXT_CLASS;
if (!svgContent.isStyleDefined(cssClass)) {
String ruleBorderColor=Utils.convertColorToHtml(rrDiagramToSVG.getRuleBorderColor());
String ruleFillColor=Utils.convertColorToHtml(rrDiagramToSVG.getRuleFillColor());
Font ruleFont=rrDiagramToSVG.getRuleFont();
String ruleTextColor=Utils.convertColorToHtml(rrDiagramToSVG.getRuleTextColor());
cssClass=svgContent.setCSSClass(cssClass,""String_Node_Str"" + ruleFillColor + ""String_Node_Str""+ ruleBorderColor+ ""String_Node_Str"");
cssTextClass=svgContent.setCSSClass(cssTextClass,""String_Node_Str"" + ruleTextColor + ""String_Node_Str""+ Utils.convertFontToCss(ruleFont));
}
shape=rrDiagramToSVG.getRuleShape();
break;
case LITERAL:
insets=rrDiagramToSVG.getLiteralInsets();
font=rrDiagramToSVG.getLiteralFont();
cssClass=RRDiagram.CSS_LITERAL_CLASS;
cssTextClass=RRDiagram.CSS_LITERAL_TEXT_CLASS;
if (!svgContent.isStyleDefined(cssClass)) {
String literalBorderColor=Utils.convertColorToHtml(rrDiagramToSVG.getLiteralBorderColor());
String literalFillColor=Utils.convertColorToHtml(rrDiagramToSVG.getLiteralFillColor());
Font literalFont=rrDiagramToSVG.getLiteralFont();
String literalTextColor=Utils.convertColorToHtml(rrDiagramToSVG.getLiteralTextColor());
cssClass=svgContent.setCSSClass(cssClass,""String_Node_Str"" + literalFillColor + ""String_Node_Str""+ literalBorderColor+ ""String_Node_Str"");
cssTextClass=svgContent.setCSSClass(cssTextClass,""String_Node_Str"" + literalTextColor + ""String_Node_Str""+ Utils.convertFontToCss(literalFont));
}
shape=rrDiagramToSVG.getLiteralShape();
break;
case SPECIAL_SEQUENCE:
insets=rrDiagramToSVG.getSpecialSequenceInsets();
font=rrDiagramToSVG.getSpecialSequenceFont();
cssClass=RRDiagram.CSS_SPECIAL_SEQUENCE_CLASS;
cssTextClass=RRDiagram.CSS_SPECIAL_SEQUENCE_TEXT_CLASS;
if (!svgContent.isStyleDefined(cssClass)) {
String specialSequenceBorderColor=Utils.convertColorToHtml(rrDiagramToSVG.getSpecialSequenceBorderColor());
String specialSequenceFillColor=Utils.convertColorToHtml(rrDiagramToSVG.getSpecialSequenceFillColor());
Font specialSequenceFont=rrDiagramToSVG.getSpecialSequenceFont();
String specialSequenceTextColor=Utils.convertColorToHtml(rrDiagramToSVG.getSpecialSequenceTextColor());
cssClass=svgContent.setCSSClass(cssClass,""String_Node_Str"" + specialSequenceFillColor + ""String_Node_Str""+ specialSequenceBorderColor+ ""String_Node_Str"");
cssTextClass=svgContent.setCSSClass(cssTextClass,""String_Node_Str"" + specialSequenceTextColor + ""String_Node_Str""+ Utils.convertFontToCss(specialSequenceFont));
}
shape=rrDiagramToSVG.getSpecialSequenceShape();
break;
default :
throw new IllegalStateException(""String_Node_Str"" + type);
}
switch (shape) {
case RECTANGLE:
svgContent.addElement(""String_Node_Str"" + cssClass + ""String_Node_Str""+ xOffset+ ""String_Node_Str""+ yOffset+ ""String_Node_Str""+ width+ ""String_Node_Str""+ height+ ""String_Node_Str"");
break;
case ROUNDED_RECTANGLE:
int rx=(insets.left + insets.right + insets.top+ insets.bottom) / 4;
svgContent.addElement(""String_Node_Str"" + cssClass + ""String_Node_Str""+ xOffset+ ""String_Node_Str""+ yOffset+ ""String_Node_Str""+ width+ ""String_Node_Str""+ height+ ""String_Node_Str""+ rx+ ""String_Node_Str"");
break;
case HEXAGON:
int connectorOffset=layoutInfo.getConnectorOffset();
svgContent.addLineConnector(xOffset,yOffset + connectorOffset,xOffset + insets.left,yOffset + connectorOffset);
svgContent.addElement(""String_Node_Str"" + cssClass + ""String_Node_Str""+ xOffset+ ""String_Node_Str""+ (yOffset + height / 2)+ ""String_Node_Str""+ (xOffset + insets.left)+ ""String_Node_Str""+ yOffset+ ""String_Node_Str""+ (xOffset + width - insets.right)+ ""String_Node_Str""+ yOffset+ ""String_Node_Str""+ (xOffset + width)+ ""String_Node_Str""+ (yOffset + height / 2)+ ""String_Node_Str""+ (xOffset + width - insets.right)+ ""String_Node_Str""+ (yOffset + height)+ ""String_Node_Str""+ (xOffset + insets.left)+ ""String_Node_Str""+ (yOffset + height)+ ""String_Node_Str"");
svgContent.addLineConnector(xOffset + width,yOffset + connectorOffset,xOffset + width - insets.right,yOffset + connectorOffset);
break;
}
FontRenderContext fontRenderContext=new FontRenderContext(null,true,false);
Rectangle2D stringBounds=font.getStringBounds(text,fontRenderContext);
int textXOffset=xOffset + insets.left;
int textYOffset=yOffset + insets.top + (int)Math.round(stringBounds.getHeight()) - fontYOffset;
svgContent.addElement(""String_Node_Str"" + cssTextClass + ""String_Node_Str""+ textXOffset+ ""String_Node_Str""+ textYOffset+ ""String_Node_Str""+ Utils.escapeXML(text)+ ""String_Node_Str"");
if (link != null) {
svgContent.addElement(""String_Node_Str"");
}
}","@Override protected void toSVG(RRDiagramToSVG rrDiagramToSVG,int xOffset,int yOffset,SvgContent svgContent){
  LayoutInfo layoutInfo=getLayoutInfo();
  int width=layoutInfo.getWidth();
  int height=layoutInfo.getHeight();
  if (link != null) {
    svgContent.addElement(""String_Node_Str"" + Utils.escapeXML(link) + ""String_Node_Str"");
  }
  Insets insets;
  Font font;
  String cssClass;
  String cssTextClass;
  BoxShape shape;
switch (type) {
case RULE:
    insets=rrDiagramToSVG.getRuleInsets();
  font=rrDiagramToSVG.getRuleFont();
cssClass=svgContent.getDefinedCSSClass(RRDiagram.CSS_RULE_CLASS);
cssTextClass=svgContent.getDefinedCSSClass(RRDiagram.CSS_RULE_TEXT_CLASS);
if (cssClass == null) {
String ruleBorderColor=Utils.convertColorToHtml(rrDiagramToSVG.getRuleBorderColor());
String ruleFillColor=Utils.convertColorToHtml(rrDiagramToSVG.getRuleFillColor());
Font ruleFont=rrDiagramToSVG.getRuleFont();
String ruleTextColor=Utils.convertColorToHtml(rrDiagramToSVG.getRuleTextColor());
cssClass=svgContent.setCSSClass(RRDiagram.CSS_RULE_CLASS,""String_Node_Str"" + ruleFillColor + ""String_Node_Str""+ ruleBorderColor+ ""String_Node_Str"");
cssTextClass=svgContent.setCSSClass(RRDiagram.CSS_RULE_TEXT_CLASS,""String_Node_Str"" + ruleTextColor + ""String_Node_Str""+ Utils.convertFontToCss(ruleFont));
}
shape=rrDiagramToSVG.getRuleShape();
break;
case LITERAL:
insets=rrDiagramToSVG.getLiteralInsets();
font=rrDiagramToSVG.getLiteralFont();
cssClass=svgContent.getDefinedCSSClass(RRDiagram.CSS_LITERAL_CLASS);
cssTextClass=svgContent.getDefinedCSSClass(RRDiagram.CSS_LITERAL_TEXT_CLASS);
if (cssClass == null) {
String literalBorderColor=Utils.convertColorToHtml(rrDiagramToSVG.getLiteralBorderColor());
String literalFillColor=Utils.convertColorToHtml(rrDiagramToSVG.getLiteralFillColor());
Font literalFont=rrDiagramToSVG.getLiteralFont();
String literalTextColor=Utils.convertColorToHtml(rrDiagramToSVG.getLiteralTextColor());
cssClass=svgContent.setCSSClass(RRDiagram.CSS_LITERAL_CLASS,""String_Node_Str"" + literalFillColor + ""String_Node_Str""+ literalBorderColor+ ""String_Node_Str"");
cssTextClass=svgContent.setCSSClass(RRDiagram.CSS_LITERAL_TEXT_CLASS,""String_Node_Str"" + literalTextColor + ""String_Node_Str""+ Utils.convertFontToCss(literalFont));
}
shape=rrDiagramToSVG.getLiteralShape();
break;
case SPECIAL_SEQUENCE:
insets=rrDiagramToSVG.getSpecialSequenceInsets();
font=rrDiagramToSVG.getSpecialSequenceFont();
cssClass=svgContent.getDefinedCSSClass(RRDiagram.CSS_SPECIAL_SEQUENCE_CLASS);
cssTextClass=svgContent.getDefinedCSSClass(RRDiagram.CSS_SPECIAL_SEQUENCE_TEXT_CLASS);
if (cssClass == null) {
String specialSequenceBorderColor=Utils.convertColorToHtml(rrDiagramToSVG.getSpecialSequenceBorderColor());
String specialSequenceFillColor=Utils.convertColorToHtml(rrDiagramToSVG.getSpecialSequenceFillColor());
Font specialSequenceFont=rrDiagramToSVG.getSpecialSequenceFont();
String specialSequenceTextColor=Utils.convertColorToHtml(rrDiagramToSVG.getSpecialSequenceTextColor());
cssClass=svgContent.setCSSClass(RRDiagram.CSS_SPECIAL_SEQUENCE_CLASS,""String_Node_Str"" + specialSequenceFillColor + ""String_Node_Str""+ specialSequenceBorderColor+ ""String_Node_Str"");
cssTextClass=svgContent.setCSSClass(RRDiagram.CSS_SPECIAL_SEQUENCE_TEXT_CLASS,""String_Node_Str"" + specialSequenceTextColor + ""String_Node_Str""+ Utils.convertFontToCss(specialSequenceFont));
}
shape=rrDiagramToSVG.getSpecialSequenceShape();
break;
default :
throw new IllegalStateException(""String_Node_Str"" + type);
}
switch (shape) {
case RECTANGLE:
svgContent.addElement(""String_Node_Str"" + cssClass + ""String_Node_Str""+ xOffset+ ""String_Node_Str""+ yOffset+ ""String_Node_Str""+ width+ ""String_Node_Str""+ height+ ""String_Node_Str"");
break;
case ROUNDED_RECTANGLE:
int rx=(insets.left + insets.right + insets.top+ insets.bottom) / 4;
svgContent.addElement(""String_Node_Str"" + cssClass + ""String_Node_Str""+ xOffset+ ""String_Node_Str""+ yOffset+ ""String_Node_Str""+ width+ ""String_Node_Str""+ height+ ""String_Node_Str""+ rx+ ""String_Node_Str"");
break;
case HEXAGON:
int connectorOffset=layoutInfo.getConnectorOffset();
svgContent.addLineConnector(xOffset,yOffset + connectorOffset,xOffset + insets.left,yOffset + connectorOffset);
svgContent.addElement(""String_Node_Str"" + cssClass + ""String_Node_Str""+ xOffset+ ""String_Node_Str""+ (yOffset + height / 2)+ ""String_Node_Str""+ (xOffset + insets.left)+ ""String_Node_Str""+ yOffset+ ""String_Node_Str""+ (xOffset + width - insets.right)+ ""String_Node_Str""+ yOffset+ ""String_Node_Str""+ (xOffset + width)+ ""String_Node_Str""+ (yOffset + height / 2)+ ""String_Node_Str""+ (xOffset + width - insets.right)+ ""String_Node_Str""+ (yOffset + height)+ ""String_Node_Str""+ (xOffset + insets.left)+ ""String_Node_Str""+ (yOffset + height)+ ""String_Node_Str"");
svgContent.addLineConnector(xOffset + width,yOffset + connectorOffset,xOffset + width - insets.right,yOffset + connectorOffset);
break;
}
FontRenderContext fontRenderContext=new FontRenderContext(null,true,false);
Rectangle2D stringBounds=font.getStringBounds(text,fontRenderContext);
int textXOffset=xOffset + insets.left;
int textYOffset=yOffset + insets.top + (int)Math.round(stringBounds.getHeight()) - fontYOffset;
svgContent.addElement(""String_Node_Str"" + cssTextClass + ""String_Node_Str""+ textXOffset+ ""String_Node_Str""+ textYOffset+ ""String_Node_Str""+ Utils.escapeXML(text)+ ""String_Node_Str"");
if (link != null) {
svgContent.addElement(""String_Node_Str"");
}
}",0.94074284094131
161787,"@Override protected void toBNF(GrammarToBNF grammarToBNF,StringBuilder sb,boolean isNested){
  boolean isUsingMultiplicationTokens=grammarToBNF.isUsingMultiplicationTokens();
  if (maxRepetitionCount == null) {
    if (minRepetitionCount > 0) {
      if (minRepetitionCount == 1 && isUsingMultiplicationTokens) {
        expression.toBNF(grammarToBNF,sb,true);
        sb.append(""String_Node_Str"");
      }
 else {
        if (isNested) {
          sb.append(""String_Node_Str"");
        }
        if (minRepetitionCount > 1) {
          sb.append(minRepetitionCount);
          sb.append(""String_Node_Str"");
        }
        expression.toBNF(grammarToBNF,sb,false);
        if (grammarToBNF.isCommaSeparator()) {
          sb.append(""String_Node_Str"");
        }
        sb.append(""String_Node_Str"");
        sb.append(""String_Node_Str"");
        expression.toBNF(grammarToBNF,sb,false);
        sb.append(""String_Node_Str"");
        if (isNested) {
          sb.append(""String_Node_Str"");
        }
      }
    }
 else {
      if (isUsingMultiplicationTokens) {
        expression.toBNF(grammarToBNF,sb,true);
        sb.append(""String_Node_Str"");
      }
 else {
        sb.append(""String_Node_Str"");
        expression.toBNF(grammarToBNF,sb,false);
        sb.append(""String_Node_Str"");
      }
    }
  }
 else {
    if (minRepetitionCount == 0) {
      if (maxRepetitionCount == 1 && isUsingMultiplicationTokens) {
        expression.toBNF(grammarToBNF,sb,true);
        sb.append(""String_Node_Str"");
      }
 else {
        if (maxRepetitionCount > 1) {
          sb.append(maxRepetitionCount);
          sb.append(""String_Node_Str"");
        }
        sb.append(""String_Node_Str"");
        expression.toBNF(grammarToBNF,sb,false);
        sb.append(""String_Node_Str"");
      }
    }
 else {
      if (minRepetitionCount == maxRepetitionCount) {
        sb.append(minRepetitionCount);
        sb.append(""String_Node_Str"");
        expression.toBNF(grammarToBNF,sb,false);
      }
 else {
        if (isNested) {
          sb.append(""String_Node_Str"");
        }
        sb.append(minRepetitionCount);
        sb.append(""String_Node_Str"");
        expression.toBNF(grammarToBNF,sb,false);
        if (grammarToBNF.isCommaSeparator()) {
          sb.append(""String_Node_Str"");
        }
        sb.append(""String_Node_Str"");
        sb.append(maxRepetitionCount - minRepetitionCount);
        sb.append(""String_Node_Str"");
        sb.append(""String_Node_Str"");
        expression.toBNF(grammarToBNF,sb,false);
        sb.append(""String_Node_Str"");
        if (isNested) {
          sb.append(""String_Node_Str"");
        }
      }
    }
  }
}","@Override protected void toBNF(GrammarToBNF grammarToBNF,StringBuilder sb,boolean isNested){
  boolean isUsingMultiplicationTokens=grammarToBNF.isUsingMultiplicationTokens();
  if (maxRepetitionCount == null) {
    if (minRepetitionCount > 0) {
      if (minRepetitionCount == 1 && isUsingMultiplicationTokens) {
        expression.toBNF(grammarToBNF,sb,true);
        sb.append(""String_Node_Str"");
      }
 else {
        if (isNested) {
          sb.append(""String_Node_Str"");
        }
        if (minRepetitionCount > 1) {
          sb.append(minRepetitionCount);
          sb.append(""String_Node_Str"");
        }
        expression.toBNF(grammarToBNF,sb,false);
        if (grammarToBNF.isCommaSeparator()) {
          sb.append(""String_Node_Str"");
        }
        sb.append(""String_Node_Str"");
        sb.append(""String_Node_Str"");
        expression.toBNF(grammarToBNF,sb,false);
        sb.append(""String_Node_Str"");
        if (isNested) {
          sb.append(""String_Node_Str"");
        }
      }
    }
 else {
      if (isUsingMultiplicationTokens) {
        expression.toBNF(grammarToBNF,sb,true);
        sb.append(""String_Node_Str"");
      }
 else {
        sb.append(""String_Node_Str"");
        expression.toBNF(grammarToBNF,sb,false);
        sb.append(""String_Node_Str"");
      }
    }
  }
 else {
    if (minRepetitionCount == 0) {
      if (maxRepetitionCount == 1 && isUsingMultiplicationTokens) {
        expression.toBNF(grammarToBNF,sb,true);
        sb.append(""String_Node_Str"");
      }
 else {
        if (maxRepetitionCount > 1) {
          sb.append(maxRepetitionCount);
          sb.append(""String_Node_Str"");
        }
        sb.append(""String_Node_Str"");
        expression.toBNF(grammarToBNF,sb,false);
        sb.append(""String_Node_Str"");
      }
    }
 else {
      if (minRepetitionCount == maxRepetitionCount) {
        sb.append(minRepetitionCount);
        sb.append(""String_Node_Str"");
        expression.toBNF(grammarToBNF,sb,isNested);
      }
 else {
        if (isNested) {
          sb.append(""String_Node_Str"");
        }
        sb.append(minRepetitionCount);
        sb.append(""String_Node_Str"");
        expression.toBNF(grammarToBNF,sb,false);
        if (grammarToBNF.isCommaSeparator()) {
          sb.append(""String_Node_Str"");
        }
        sb.append(""String_Node_Str"");
        sb.append(maxRepetitionCount - minRepetitionCount);
        sb.append(""String_Node_Str"");
        sb.append(""String_Node_Str"");
        expression.toBNF(grammarToBNF,sb,false);
        sb.append(""String_Node_Str"");
        if (isNested) {
          sb.append(""String_Node_Str"");
        }
      }
    }
  }
}",0.9975439259399208
161788,"@Override protected RRElement toRRElement(GrammarToRRDiagram grammarToRRDiagram){
  List<RRElement> rrElementList=new ArrayList<RRElement>();
  for (int i=0; i < expressions.length; i++) {
    Expression expression=expressions[i];
    RRElement rrElement=expression.toRRElement(grammarToRRDiagram);
    if (i < expressions.length - 1 && expression instanceof RuleReference && expressions[i + 1] instanceof Repetition) {
      RuleReference ruleLink=(RuleReference)expression;
      Repetition repetition=(Repetition)expressions[i + 1];
      Expression repetitionExpression=repetition.getExpression();
      if (repetitionExpression instanceof Sequence) {
        Expression[] subExpressions=((Sequence)repetitionExpression).getExpressions();
        if (subExpressions.length == 2 && subExpressions[0] instanceof Literal && subExpressions[1] instanceof RuleReference && ((RuleReference)subExpressions[1]).getRuleName().equals(ruleLink.getRuleName())) {
          Integer maxRepetitionCount=repetition.getMaxRepetitionCount();
          if (maxRepetitionCount == null || maxRepetitionCount > 1) {
            rrElement=new RRLoop(ruleLink.toRRElement(grammarToRRDiagram),subExpressions[0].toRRElement(grammarToRRDiagram),repetition.getMinRepetitionCount(),(maxRepetitionCount == null ? null : maxRepetitionCount));
            i++;
          }
        }
      }
    }
    rrElementList.add(rrElement);
  }
  return new RRSequence(rrElementList.toArray(new RRElement[0]));
}","@Override protected RRElement toRRElement(GrammarToRRDiagram grammarToRRDiagram){
  List<RRElement> rrElementList=new ArrayList<RRElement>();
  for (int i=0; i < expressions.length; i++) {
    Expression expression=expressions[i];
    RRElement rrElement=expression.toRRElement(grammarToRRDiagram);
    if (i < expressions.length - 1 && expression instanceof RuleReference && expressions[i + 1] instanceof Repetition) {
      RuleReference ruleLink=(RuleReference)expression;
      Repetition repetition=(Repetition)expressions[i + 1];
      Expression repetitionExpression=repetition.getExpression();
      if (repetitionExpression instanceof RuleReference && ((RuleReference)repetitionExpression).getRuleName().equals(ruleLink.getRuleName())) {
        Integer maxRepetitionCount=repetition.getMaxRepetitionCount();
        if (maxRepetitionCount == null || maxRepetitionCount > 1) {
          rrElement=new RRLoop(ruleLink.toRRElement(grammarToRRDiagram),null,repetition.getMinRepetitionCount(),(maxRepetitionCount == null ? null : maxRepetitionCount));
          i++;
        }
      }
 else       if (repetitionExpression instanceof Sequence) {
        Expression[] subExpressions=((Sequence)repetitionExpression).getExpressions();
        if (subExpressions.length == 2 && subExpressions[0] instanceof Literal && subExpressions[1] instanceof RuleReference && ((RuleReference)subExpressions[1]).getRuleName().equals(ruleLink.getRuleName())) {
          Integer maxRepetitionCount=repetition.getMaxRepetitionCount();
          if (maxRepetitionCount == null || maxRepetitionCount > 1) {
            rrElement=new RRLoop(ruleLink.toRRElement(grammarToRRDiagram),subExpressions[0].toRRElement(grammarToRRDiagram),repetition.getMinRepetitionCount(),(maxRepetitionCount == null ? null : maxRepetitionCount));
            i++;
          }
        }
      }
    }
    rrElementList.add(rrElement);
  }
  return new RRSequence(rrElementList.toArray(new RRElement[0]));
}",0.8563953488372092
161789,"@Override protected void toSVG(RRDiagramToSVG rrDiagramToSVG,int xOffset,int yOffset,StringBuilder sb){
  LayoutInfo layoutInfo1=rrElement.getLayoutInfo();
  int width1=layoutInfo1.getWidth();
  int maxWidth=width1;
  int yOffset2=yOffset;
  LayoutInfo layoutInfo=getLayoutInfo();
  int connectorOffset=layoutInfo.getConnectorOffset();
  int y1=yOffset;
  int loopOffset=0;
  int loopWidth=0;
  if (loopElement != null) {
    LayoutInfo layoutInfo2=loopElement.getLayoutInfo();
    loopWidth=layoutInfo2.getWidth();
    maxWidth=Math.max(maxWidth,loopWidth);
    loopOffset=xOffset + 20 + (maxWidth - loopWidth) / 2;
    loopElement.toSVG(rrDiagramToSVG,loopOffset,yOffset,sb);
    yOffset2+=5 + layoutInfo2.getHeight();
    y1+=layoutInfo2.getConnectorOffset();
  }
 else {
    yOffset2+=15;
    y1+=5;
  }
  rrElement.toSVG(rrDiagramToSVG,xOffset + 20 + (maxWidth - width1) / 2,yOffset2,sb);
  int x1=xOffset + 10;
  int x2=xOffset + 20 + maxWidth+ 10+ cardinalitiesWidth;
  int y2=yOffset + connectorOffset;
  sb.append(""String_Node_Str"").append(x1 - 10).append(""String_Node_Str"").append(y2).append(""String_Node_Str"").append(x1 + 10).append(""String_Node_Str"").append(y2).append(""String_Node_Str"");
  sb.append(""String_Node_Str"");
  sb.append(""String_Node_Str"").append(x1 + 5).append(""String_Node_Str"").append(y2);
  sb.append(""String_Node_Str"").append(x1).append(""String_Node_Str"").append(y2).append(""String_Node_Str"").append(x1).append(""String_Node_Str"").append(y2 - 5);
  sb.append(""String_Node_Str"").append(y1 + 5);
  sb.append(""String_Node_Str"").append(x1).append(""String_Node_Str"").append(y1).append(""String_Node_Str"").append(x1 + 5).append(""String_Node_Str"").append(y1);
  if (loopElement != null) {
    sb.append(""String_Node_Str"").append(loopOffset);
    sb.append(""String_Node_Str"").append(loopOffset + loopWidth).append(""String_Node_Str"").append(y1);
    sb.append(""String_Node_Str"").append(x2 - 5);
  }
 else {
    sb.append(""String_Node_Str"").append(x2 - 5);
  }
  sb.append(""String_Node_Str"").append(x2).append(""String_Node_Str"").append(y1).append(""String_Node_Str"").append(x2).append(""String_Node_Str"").append(y1 + 5);
  sb.append(""String_Node_Str"").append(y2 - 5);
  sb.append(""String_Node_Str"").append(x2).append(""String_Node_Str"").append(y2).append(""String_Node_Str"").append(x2 - 5).append(""String_Node_Str"").append(y2);
  sb.append(""String_Node_Str"");
  sb.append(""String_Node_Str"").append(x2 - cardinalitiesWidth - 10).append(""String_Node_Str"").append(y2).append(""String_Node_Str"").append(xOffset + layoutInfo.getWidth()).append(""String_Node_Str"").append(y2).append(""String_Node_Str"");
  if (cardinalitiesText != null) {
    sb.append(""String_Node_Str"").append(x2 - cardinalitiesWidth).append(""String_Node_Str"").append(y2 - fontOffset - 5).append(""String_Node_Str"").append(cardinalitiesText).append(""String_Node_Str"");
  }
}","@Override protected void toSVG(RRDiagramToSVG rrDiagramToSVG,int xOffset,int yOffset,StringBuilder sb){
  LayoutInfo layoutInfo1=rrElement.getLayoutInfo();
  int width1=layoutInfo1.getWidth();
  int maxWidth=width1;
  int yOffset2=yOffset;
  LayoutInfo layoutInfo=getLayoutInfo();
  int connectorOffset=layoutInfo.getConnectorOffset();
  int y1=yOffset;
  int loopOffset=0;
  int loopWidth=0;
  if (loopElement != null) {
    LayoutInfo layoutInfo2=loopElement.getLayoutInfo();
    loopWidth=layoutInfo2.getWidth();
    maxWidth=Math.max(maxWidth,loopWidth);
    loopOffset=xOffset + 20 + (maxWidth - loopWidth) / 2;
    loopElement.toSVG(rrDiagramToSVG,loopOffset,yOffset,sb);
    yOffset2+=5 + layoutInfo2.getHeight();
    y1+=layoutInfo2.getConnectorOffset();
  }
 else {
    yOffset2+=15;
    y1+=5;
  }
  rrElement.toSVG(rrDiagramToSVG,xOffset + 20 + (maxWidth - width1) / 2,yOffset2,sb);
  int x1=xOffset + 10;
  int x2=xOffset + 20 + maxWidth+ 10+ cardinalitiesWidth;
  int y2=yOffset + connectorOffset;
  sb.append(""String_Node_Str"").append(x1 - 10).append(""String_Node_Str"").append(y2).append(""String_Node_Str"").append(x1 + 10 + (maxWidth - width1) / 2).append(""String_Node_Str"").append(y2).append(""String_Node_Str"");
  sb.append(""String_Node_Str"");
  sb.append(""String_Node_Str"").append(x1 + 5).append(""String_Node_Str"").append(y2);
  sb.append(""String_Node_Str"").append(x1).append(""String_Node_Str"").append(y2).append(""String_Node_Str"").append(x1).append(""String_Node_Str"").append(y2 - 5);
  sb.append(""String_Node_Str"").append(y1 + 5);
  sb.append(""String_Node_Str"").append(x1).append(""String_Node_Str"").append(y1).append(""String_Node_Str"").append(x1 + 5).append(""String_Node_Str"").append(y1);
  if (loopElement != null) {
    sb.append(""String_Node_Str"").append(loopOffset);
    sb.append(""String_Node_Str"").append(loopOffset + loopWidth).append(""String_Node_Str"").append(y1);
    sb.append(""String_Node_Str"").append(x2 - 5);
  }
 else {
    sb.append(""String_Node_Str"").append(x2 - 5);
  }
  sb.append(""String_Node_Str"").append(x2).append(""String_Node_Str"").append(y1).append(""String_Node_Str"").append(x2).append(""String_Node_Str"").append(y1 + 5);
  sb.append(""String_Node_Str"").append(y2 - 5);
  sb.append(""String_Node_Str"").append(x2).append(""String_Node_Str"").append(y2).append(""String_Node_Str"").append(x2 - 5).append(""String_Node_Str"").append(y2);
  sb.append(""String_Node_Str"");
  sb.append(""String_Node_Str"").append(x2 - cardinalitiesWidth - 10- (maxWidth - width1) / 2).append(""String_Node_Str"").append(y2).append(""String_Node_Str"").append(xOffset + layoutInfo.getWidth()).append(""String_Node_Str"").append(y2).append(""String_Node_Str"");
  if (cardinalitiesText != null) {
    sb.append(""String_Node_Str"").append(x2 - cardinalitiesWidth).append(""String_Node_Str"").append(y2 - fontOffset - 5).append(""String_Node_Str"").append(cardinalitiesText).append(""String_Node_Str"");
  }
}",0.991119623889953
161790,"public static int findNumHops(int[] array){
  if (array == null) {
    throw new NullPointerException(""String_Node_Str"");
  }
  Set<Integer> steps=new HashSet<Integer>();
  int lastSeenStep=array.length - 1;
  steps.add(lastSeenStep);
  for (int index=array.length - 2; index >= 0; index--) {
    int hopSize=array[index];
    int reachableStep=hopSize + index;
    if (steps.contains(reachableStep)) {
      for (Iterator<Integer> iter=steps.iterator(); iter.hasNext(); ) {
        int step=iter.next();
        if (step < reachableStep) {
          iter.remove();
        }
      }
      steps.add(index);
      lastSeenStep=index;
    }
  }
  return steps.size() - 1 + lastSeenStep;
}","public static int findNumHops(int[] array){
  if (array == null) {
    throw new NullPointerException(""String_Node_Str"");
  }
  if (array.length == 0) {
    return 0;
  }
  Set<Integer> steps=new HashSet<Integer>();
  int lastSeenStep=array.length - 1;
  steps.add(lastSeenStep);
  for (int index=array.length - 2; index >= 0; index--) {
    int hopSize=array[index];
    int reachableStep=hopSize + index;
    if (steps.contains(reachableStep)) {
      for (Iterator<Integer> iter=steps.iterator(); iter.hasNext(); ) {
        int step=iter.next();
        if (step < reachableStep) {
          iter.remove();
        }
      }
      steps.add(index);
      lastSeenStep=index;
    }
  }
  return steps.size() - 1 + lastSeenStep;
}",0.9682875264270612
161791,"public synchronized void add(T element) throws InterruptedException {
  long threadId=Thread.currentThread().getId();
  writerQueue.add(threadId);
  while (writerQueue.size() == capacity || writerQueue.peek() != threadId) {
    wait();
  }
  writerQueue.remove();
  elementQueue.add(element);
  notifyAll();
}","public synchronized void add(T element) throws InterruptedException {
  long threadId=Thread.currentThread().getId();
  writerQueue.add(threadId);
  while (elementQueue.size() == capacity || writerQueue.peek() != threadId) {
    wait();
  }
  writerQueue.remove();
  elementQueue.add(element);
  notifyAll();
}",0.9789983844911146
161792,"public static int findNumHops(int[] array){
  if (array == null) {
    throw new NullPointerException(""String_Node_Str"");
  }
  Set<Integer> steps=new HashSet<Integer>();
  steps.add(array.length - 1);
  int lastSeenStep=array.length - 1;
  for (int index=array.length - 2; index >= 0; index--) {
    int hopSize=array[index];
    int reachableStep=hopSize + index;
    if (steps.contains(reachableStep)) {
      for (Iterator<Integer> iter=steps.iterator(); iter.hasNext(); ) {
        int step=iter.next();
        if (step < reachableStep) {
          iter.remove();
        }
      }
      steps.add(index);
      lastSeenStep=index;
    }
  }
  return steps.size() - 2 + lastSeenStep;
}","public static int findNumHops(int[] array){
  if (array == null) {
    throw new NullPointerException(""String_Node_Str"");
  }
  Set<Integer> steps=new HashSet<Integer>();
  int lastSeenStep=array.length - 1;
  steps.add(lastSeenStep);
  for (int index=array.length - 2; index >= 0; index--) {
    int hopSize=array[index];
    int reachableStep=hopSize + index;
    if (steps.contains(reachableStep)) {
      for (Iterator<Integer> iter=steps.iterator(); iter.hasNext(); ) {
        int step=iter.next();
        if (step < reachableStep) {
          iter.remove();
        }
      }
      steps.add(index);
      lastSeenStep=index;
    }
  }
  return steps.size() - 1 + lastSeenStep;
}",0.9317851959361392
161793,"public void setCapacity(int capacity){
  checkCapacity(capacity);
  this.capacity=capacity;
}","public void setCapacity(int capacity){
  checkCapacity(capacity);
  for (int count=cache.size(); count > capacity; count--) {
    CacheNode<K,V> evicted=evict();
    cache.remove(evicted.getKey());
  }
  this.capacity=capacity;
}",0.4409937888198758
161794,"@Override public boolean onTouchEvent(MotionEvent event){
  int touchCount=event.getPointerCount();
switch (event.getAction()) {
case MotionEvent.ACTION_DOWN:
case MotionEvent.ACTION_POINTER_1_DOWN:
case MotionEvent.ACTION_POINTER_2_DOWN:
    if (touchCount >= 2) {
      float distance=distance(event.getX(0),event.getX(1),event.getY(0),event.getY(1));
      mPrevDistance=distance;
      isScaling=true;
    }
 else {
      if (System.currentTimeMillis() <= mLastTime + DOUBLE_TAP_SECOND) {
        if (30 > Math.abs(mPrevMoveX - event.getX()) + Math.abs(mPrevMoveY - event.getY())) {
          isDoubleTap=true;
          mDoubleTapX=(int)event.getX();
          mDoubleTapY=(int)event.getY();
        }
      }
      mLastTime=System.currentTimeMillis();
      mPrevMoveX=(int)event.getX();
      mPrevMoveY=(int)event.getY();
    }
  break;
case MotionEvent.ACTION_MOVE:
if (touchCount >= 2 && isScaling) {
  float dist=distance(event.getX(0),event.getX(1),event.getY(0),event.getY(1));
  float scale=(dist - mPrevDistance) / dispDistance();
  mPrevDistance=dist;
  scale+=1;
  scale=scale * scale;
  zoomTo(scale,getWidth() / 2,getHeight() / 2);
  cutting();
}
 else if (!isScaling) {
  int distanceX=mPrevMoveX - (int)event.getX();
  int distanceY=mPrevMoveY - (int)event.getY();
  mPrevMoveX=(int)event.getX();
  mPrevMoveY=(int)event.getY();
  mMatrix.postTranslate(-distanceX,-distanceY);
  cutting();
}
break;
case MotionEvent.ACTION_UP:
case MotionEvent.ACTION_POINTER_UP:
case MotionEvent.ACTION_POINTER_2_UP:
if (event.getPointerCount() <= 1) {
isScaling=false;
if (isDoubleTap) {
if (30 > Math.abs(mDoubleTapX - event.getX()) + Math.abs(mDoubleTapY - event.getY())) {
  maxZoomTo(mDoubleTapX,mDoubleTapY);
  cutting();
}
}
}
isDoubleTap=false;
break;
}
return true;
}","@Override public boolean onTouchEvent(MotionEvent event){
  int touchCount=event.getPointerCount();
switch (event.getAction()) {
case MotionEvent.ACTION_DOWN:
case MotionEvent.ACTION_POINTER_1_DOWN:
case MotionEvent.ACTION_POINTER_2_DOWN:
    if (touchCount >= 2) {
      float distance=distance(event.getX(0),event.getX(1),event.getY(0),event.getY(1));
      mPrevDistance=distance;
      isScaling=true;
    }
 else {
      if (System.currentTimeMillis() <= mLastTime + DOUBLE_TAP_SECOND) {
        if (30 > Math.abs(mPrevMoveX - event.getX()) + Math.abs(mPrevMoveY - event.getY())) {
          isDoubleTap=true;
          mDoubleTapX=(int)event.getX();
          mDoubleTapY=(int)event.getY();
        }
      }
      mLastTime=System.currentTimeMillis();
      mPrevMoveX=(int)event.getX();
      mPrevMoveY=(int)event.getY();
    }
  break;
case MotionEvent.ACTION_MOVE:
if (touchCount >= 2 && isScaling) {
  float dist=distance(event.getX(0),event.getX(1),event.getY(0),event.getY(1));
  float scale=(dist - mPrevDistance) / dispDistance();
  mPrevDistance=dist;
  scale+=1;
  scale=scale * scale;
  zoomTo(scale,mWidth / 2,mHeight / 2);
  cutting();
}
 else if (!isScaling) {
  int distanceX=mPrevMoveX - (int)event.getX();
  int distanceY=mPrevMoveY - (int)event.getY();
  mPrevMoveX=(int)event.getX();
  mPrevMoveY=(int)event.getY();
  mMatrix.postTranslate(-distanceX,-distanceY);
  cutting();
}
break;
case MotionEvent.ACTION_UP:
case MotionEvent.ACTION_POINTER_UP:
case MotionEvent.ACTION_POINTER_2_UP:
if (event.getPointerCount() <= 1) {
isScaling=false;
if (isDoubleTap) {
if (30 > Math.abs(mDoubleTapX - event.getX()) + Math.abs(mDoubleTapY - event.getY())) {
  maxZoomTo(mDoubleTapX,mDoubleTapY);
  cutting();
}
}
}
isDoubleTap=false;
break;
}
return true;
}",0.9966254218222722
161795,"protected void zoomTo(float scale,int x,int y){
  if (getScale() * scale < mMinScale) {
    return;
  }
  if (scale >= 1 && getScale() * scale > MAX_SCALE) {
    return;
  }
  mMatrix.postScale(scale,scale);
  mMatrix.postTranslate(-(getWidth() * scale - getWidth()) / 2,-(getHeight() * scale - getHeight()) / 2);
  mMatrix.postTranslate(-(x - (getWidth() / 2)) * scale,0);
  mMatrix.postTranslate(0,-(y - (getHeight() / 2)) * scale);
  setImageMatrix(mMatrix);
}","protected void zoomTo(float scale,int x,int y){
  if (getScale() * scale < mMinScale) {
    return;
  }
  if (scale >= 1 && getScale() * scale > MAX_SCALE) {
    return;
  }
  mMatrix.postScale(scale,scale);
  mMatrix.postTranslate(-(mWidth * scale - mWidth) / 2,-(mHeight * scale - mHeight) / 2);
  mMatrix.postTranslate(-(x - (mWidth / 2)) * scale,0);
  mMatrix.postTranslate(0,-(y - (mHeight / 2)) * scale);
  setImageMatrix(mMatrix);
}",0.9113082039911308
161796,"@Override protected boolean setFrame(int l,int t,int r,int b){
  mMatrix.reset();
  mScale=(float)r / (float)mIntrinsicWidth;
  int paddingHeight=0;
  int paddingWidth=0;
  if (mScale * mIntrinsicHeight > b) {
    mScale=(float)b / (float)mIntrinsicHeight;
    int width=(int)((float)mScale * (float)mIntrinsicWidth);
    mMatrix.postScale(mScale,mScale);
    paddingWidth=(r - width) / 2;
    paddingHeight=0;
  }
 else {
    mMatrix.postScale(mScale,mScale);
    int height=(int)((float)mScale * (float)mIntrinsicHeight);
    paddingHeight=(b - height) / 2;
    paddingWidth=0;
  }
  mMatrix.postTranslate(paddingWidth,paddingHeight);
  setImageMatrix(mMatrix);
  mMinScale=mScale;
  return super.setFrame(l,t,r,b);
}","@Override protected boolean setFrame(int l,int t,int r,int b){
  mWidth=r - l;
  mHeight=b - t;
  mMatrix.reset();
  mScale=(float)r / (float)mIntrinsicWidth;
  int paddingHeight=0;
  int paddingWidth=0;
  if (mScale * mIntrinsicHeight > mHeight) {
    mScale=(float)mHeight / (float)mIntrinsicHeight;
    mMatrix.postScale(mScale,mScale);
    paddingWidth=(r - mWidth) / 2;
    paddingHeight=0;
  }
 else {
    mMatrix.postScale(mScale,mScale);
    paddingHeight=(b - mHeight) / 2;
    paddingWidth=0;
  }
  mMatrix.postTranslate(paddingWidth,paddingHeight);
  setImageMatrix(mMatrix);
  mMinScale=mScale;
  zoomTo(mScale,mWidth / 2,mHeight / 2);
  cutting();
  return super.setFrame(l,t,r,b);
}",0.8254416961130742
161797,"public void cutting(){
  int width=(int)(mIntrinsicWidth * getScale());
  int height=(int)(mIntrinsicHeight * getScale());
  if (getTranslateX() < -(width - getWidth())) {
    mMatrix.postTranslate(-(getTranslateX() + width - getWidth()),0);
  }
  if (getTranslateX() > 0) {
    mMatrix.postTranslate(-getTranslateX(),0);
  }
  if (getTranslateY() < -(height - getHeight())) {
    mMatrix.postTranslate(0,-(getTranslateY() + height - getHeight()));
  }
  if (getTranslateY() > 0) {
    mMatrix.postTranslate(0,-getTranslateY());
  }
  if (width < getWidth()) {
    mMatrix.postTranslate((getWidth() - width) / 2,0);
  }
  if (height < getHeight()) {
    mMatrix.postTranslate(0,(getHeight() - height) / 2);
  }
  setImageMatrix(mMatrix);
}","public void cutting(){
  int width=(int)(mIntrinsicWidth * getScale());
  int height=(int)(mIntrinsicHeight * getScale());
  if (getTranslateX() < -(width - mWidth)) {
    mMatrix.postTranslate(-(getTranslateX() + width - mWidth),0);
  }
  if (getTranslateX() > 0) {
    mMatrix.postTranslate(-getTranslateX(),0);
  }
  if (getTranslateY() < -(height - mHeight)) {
    mMatrix.postTranslate(0,-(getTranslateY() + height - mHeight));
  }
  if (getTranslateY() > 0) {
    mMatrix.postTranslate(0,-getTranslateY());
  }
  if (width < mWidth) {
    mMatrix.postTranslate((mWidth - width) / 2,0);
  }
  if (height < mHeight) {
    mMatrix.postTranslate(0,(mHeight - height) / 2);
  }
  setImageMatrix(mMatrix);
}",0.966804979253112
161798,"private float dispDistance(){
  return FloatMath.sqrt(getWidth() * getWidth() + getHeight() * getHeight());
}","private float dispDistance(){
  return FloatMath.sqrt(mWidth * mWidth + mHeight * mHeight);
}",0.8811881188118812
161799,"/** 
 * Find offset match either in an array of bytes or chars, which ever is not null.
 */
protected String findOffsetMatch(TestInfo info,int startOffset,MutableOffset mutableOffset,byte[] bytes,char[] chars,int maxPos){
  int targetPos=startOffset;
  boolean lastMagicCompactWhitespace=false;
  for (int magicPos=0; magicPos < info.pattern.length(); magicPos++) {
    char magicCh=info.pattern.charAt(magicPos);
    boolean lastChar=(magicPos == info.pattern.length() - 1);
    if (targetPos >= maxPos) {
      return null;
    }
    char targetCh;
    if (bytes == null) {
      targetCh=chars[targetPos];
    }
 else {
      targetCh=charFromByte(bytes,targetPos);
    }
    targetPos++;
    if (info.operator.doTest(targetCh,magicCh,lastChar)) {
      if (info.compactWhiteSpace) {
        lastMagicCompactWhitespace=Character.isWhitespace(magicCh);
      }
      continue;
    }
    if ((lastMagicCompactWhitespace || info.optionalWhiteSpace) && Character.isWhitespace(targetCh)) {
      do {
        if (targetPos >= maxPos) {
          break;
        }
        if (bytes == null) {
          targetCh=chars[targetPos];
        }
 else {
          targetCh=charFromByte(bytes,targetPos);
        }
        targetPos++;
      }
 while (Character.isWhitespace(targetCh));
      if (info.operator.doTest(targetCh,magicCh,lastChar)) {
        if (info.compactWhiteSpace) {
          lastMagicCompactWhitespace=Character.isWhitespace(magicCh);
        }
        continue;
      }
    }
    if (info.caseInsensitive && Character.isLowerCase(magicCh)) {
      if (info.operator.doTest(Character.toLowerCase(targetCh),magicCh,lastChar)) {
        continue;
      }
    }
    return null;
  }
  if (bytes == null) {
    chars=Arrays.copyOfRange(chars,startOffset,targetPos);
  }
 else {
    chars=new char[targetPos - startOffset];
    for (int i=0; i < chars.length; i++) {
      chars[i]=charFromByte(bytes,startOffset + i);
    }
  }
  mutableOffset.offset=targetPos;
  return new String(chars);
}","/** 
 * Find offset match either in an array of bytes or chars, which ever is not null.
 */
protected String findOffsetMatch(TestInfo info,int startOffset,MutableOffset mutableOffset,final byte[] bytes,final char[] chars,final int maxPos){
  if (startOffset < 0) {
    return null;
  }
  int targetPos=startOffset;
  boolean lastMagicCompactWhitespace=false;
  for (int magicPos=0; magicPos < info.pattern.length(); magicPos++) {
    char magicCh=info.pattern.charAt(magicPos);
    boolean lastChar=(magicPos == info.pattern.length() - 1);
    if (targetPos >= maxPos) {
      return null;
    }
    char targetCh;
    if (bytes == null) {
      targetCh=chars[targetPos];
    }
 else {
      targetCh=charFromByte(bytes,targetPos);
    }
    targetPos++;
    if (info.operator.doTest(targetCh,magicCh,lastChar)) {
      if (info.compactWhiteSpace) {
        lastMagicCompactWhitespace=Character.isWhitespace(magicCh);
      }
      continue;
    }
    if ((lastMagicCompactWhitespace || info.optionalWhiteSpace) && Character.isWhitespace(targetCh)) {
      do {
        if (targetPos >= maxPos) {
          break;
        }
        if (bytes == null) {
          targetCh=chars[targetPos];
        }
 else {
          targetCh=charFromByte(bytes,targetPos);
        }
        targetPos++;
      }
 while (Character.isWhitespace(targetCh));
      if (info.operator.doTest(targetCh,magicCh,lastChar)) {
        if (info.compactWhiteSpace) {
          lastMagicCompactWhitespace=Character.isWhitespace(magicCh);
        }
        continue;
      }
    }
    if (info.caseInsensitive && Character.isLowerCase(magicCh)) {
      if (info.operator.doTest(Character.toLowerCase(targetCh),magicCh,lastChar)) {
        continue;
      }
    }
    return null;
  }
  char[] resultChars;
  if (bytes == null) {
    resultChars=Arrays.copyOfRange(chars,startOffset,targetPos);
  }
 else {
    resultChars=new char[targetPos - startOffset];
    for (int i=0; i < resultChars.length; i++) {
      resultChars[i]=charFromByte(bytes,startOffset + i);
    }
  }
  mutableOffset.offset=targetPos;
  return new String(resultChars);
}",0.9693579766536964
161800,"private MagicEntries readEntriesFromResource(String resource) throws IOException {
  InputStream stream=getClass().getResourceAsStream(resource);
  if (stream == null) {
    throw new FileNotFoundException(""String_Node_Str"" + resource);
  }
  Reader reader=null;
  try {
    if (resource.endsWith(""String_Node_Str"")) {
      reader=new InputStreamReader(new GZIPInputStream(new BufferedInputStream(stream)));
    }
 else {
      reader=new InputStreamReader(new BufferedInputStream(stream));
    }
    stream=null;
    return readEntries(reader);
  }
  finally {
    closeQuietly(reader);
    closeQuietly(stream);
  }
}","private MagicEntries readEntriesFromResource(String resource) throws IOException {
  InputStream stream=getClass().getResourceAsStream(resource);
  if (stream == null) {
    return null;
  }
  Reader reader=null;
  try {
    if (resource.endsWith(""String_Node_Str"")) {
      reader=new InputStreamReader(new GZIPInputStream(new BufferedInputStream(stream)));
    }
 else {
      reader=new InputStreamReader(new BufferedInputStream(stream));
    }
    stream=null;
    return readEntries(reader);
  }
  finally {
    closeQuietly(reader);
    closeQuietly(stream);
  }
}",0.8403361344537815
161801,"private Long convertNumber(int offset,byte[] bytes,int size,int shift,int mask){
  if (size != 4) {
    throw new UnsupportedOperationException(""String_Node_Str"");
  }
  if (offset + size > bytes.length) {
    return null;
  }
  long value=0;
  value=value << shift | (bytes[1] & mask);
  value=value << shift | (bytes[0] & mask);
  value=value << shift | (bytes[3] & mask);
  value=value << shift | (bytes[2] & mask);
  return value;
}","private Long convertNumber(int offset,byte[] bytes,int size,int shift,int mask){
  if (size != 4) {
    throw new UnsupportedOperationException(""String_Node_Str"");
  }
  if (offset + size > bytes.length) {
    return null;
  }
  long value=0;
  value=(value << shift) | (bytes[1] & mask);
  value=(value << shift) | (bytes[0] & mask);
  value=(value << shift) | (bytes[3] & mask);
  value=(value << shift) | (bytes[2] & mask);
  return value;
}",0.8636363636363636
161802,"@Override public Object extractValueFromBytes(int offset,byte[] bytes){
  int len;
  for (len=offset; len < bytes.length - 1; len+=2) {
    if (bytes[len] == 0 && bytes[len + 1] == 0) {
      break;
    }
  }
  char[] chars=new char[len / 2];
  for (int i=0; i < len; i++) {
    chars[i]=bytesToChar(bytes[i * 2],bytes[i * 2 + 1]);
  }
  return chars;
}","@Override public Object extractValueFromBytes(int offset,byte[] bytes){
  int len;
  for (len=offset; len < bytes.length - 1; len+=2) {
    if (bytes[len] == 0 && bytes[len + 1] == 0) {
      break;
    }
  }
  char[] chars=new char[len / 2];
  for (int i=0; i < chars.length; i++) {
    chars[i]=bytesToChar(bytes[i * 2],bytes[i * 2 + 1]);
  }
  return chars;
}",0.9790209790209792
161803,"protected char bytesToChar(int firstByte,int secondByte){
  return (char)(firstByte << 8 + secondByte);
}","/** 
 * Convert 2 bytes into a character.
 */
protected char bytesToChar(int firstByte,int secondByte){
  return (char)((firstByte << 8) + secondByte);
}",0.813953488372093
161804,"@Override protected char bytesToChar(int firstByte,int secondByte){
  return (char)(secondByte << 8 + firstByte);
}","@Override protected char bytesToChar(int firstByte,int secondByte){
  return (char)((secondByte << 8) + firstByte);
}",0.9913793103448276
161805,"@Override public Object extractValueFromBytes(int offset,byte[] bytes){
  int len;
  for (len=offset; len < bytes.length - 1; len+=2) {
    if (bytes[len] == 0 && bytes[len + 1] == 0) {
      break;
    }
  }
  char[] chars=new char[len / 2];
  for (int i=0; i < chars.length; i++) {
    chars[i]=bytesToChar(bytes[i * 2],bytes[i * 2 + 1]);
  }
  return chars;
}","@Override public Object extractValueFromBytes(int offset,byte[] bytes,boolean required){
  int len;
  for (len=offset; len < bytes.length - 1; len+=2) {
    if (bytes[len] == 0 && bytes[len + 1] == 0) {
      break;
    }
  }
  char[] chars=new char[len / 2];
  for (int i=0; i < chars.length; i++) {
    chars[i]=bytesToChar(bytes[i * 2],bytes[i * 2 + 1]);
  }
  return chars;
}",0.9770580296896086
161806,"@Test public void testStuff(){
  BigEndianString16Type type=new BigEndianString16Type();
  char[] value=(char[])type.extractValueFromBytes(0,new byte[]{1,'a',2,'b'});
  assertEquals(""String_Node_Str"",new String(value));
}","@Test public void testStuff(){
  BigEndianString16Type type=new BigEndianString16Type();
  byte[] bytes=new byte[]{1,'a',2,'b'};
  char[] value=(char[])type.extractValueFromBytes(0,bytes,true);
  assertEquals(""String_Node_Str"",new String(value));
}",0.8443496801705757
161807,"@Test public void testStuff(){
  LittleEndianString16Type type=new LittleEndianString16Type();
  char[] value=(char[])type.extractValueFromBytes(0,new byte[]{1,'a',2,'b'});
  System.out.println((int)value[0]);
  assertEquals(""String_Node_Str"",new String(value));
}","@Test public void testStuff(){
  LittleEndianString16Type type=new LittleEndianString16Type();
  byte[] bytes=new byte[]{1,'a',2,'b'};
  char[] value=(char[])type.extractValueFromBytes(0,bytes,true);
  System.out.println((int)value[0]);
  assertEquals(""String_Node_Str"",new String(value));
}",0.8684684684684685
161808,"/** 
 * Optimize the magic entries by removing the first-bytes information into their own lists
 */
public void optimizeFirstBytes(){
  levelNexts=null;
  MagicEntry[] firstByteNexts=new MagicEntry[firstByteLinkedLists.length];
  MagicEntry previousNonFirstByteEntry=null;
  MagicEntry next;
  for (MagicEntry entry=entryLinkedList; entry != null; entry=next) {
    byte[] startingBytes=entry.getStartsWithByte();
    if (startingBytes == null || startingBytes.length == 0) {
      if (previousNonFirstByteEntry == null) {
        entryLinkedList=entry;
      }
 else {
        previousNonFirstByteEntry.setNext(entry);
      }
      previousNonFirstByteEntry=entry;
    }
 else {
      int index=(0xFF & startingBytes[0]);
      if (firstByteNexts[index] == null) {
        firstByteLinkedLists[index]=entry;
      }
 else {
        firstByteNexts[index].setNext(entry);
      }
      firstByteNexts[index]=entry;
    }
    next=entry.getNext();
    entry.setNext(null);
  }
}","/** 
 * Optimize the magic entries by removing the first-bytes information into their own lists
 */
public void optimizeFirstBytes(){
  levelNexts=null;
  MagicEntry[] firstByteNexts=new MagicEntry[firstByteLinkedLists.length];
  MagicEntry previousNonFirstByteEntry=null;
  MagicEntry next;
  for (MagicEntry entry=entryLinkedList; entry != null; entry=next) {
    byte[] startingBytes=entry.getStartsWithByte();
    if (startingBytes == null || startingBytes.length == 0) {
      if (previousNonFirstByteEntry == null) {
        entryLinkedList=entry;
      }
 else {
        previousNonFirstByteEntry.setNext(entry);
      }
      previousNonFirstByteEntry=entry;
    }
 else {
      if (entry.leaveInMatchList()) {
        entry=entry.clone();
      }
      int index=(0xFF & startingBytes[0]);
      if (firstByteNexts[index] == null) {
        firstByteLinkedLists[index]=entry;
      }
 else {
        firstByteNexts[index].setNext(entry);
      }
      firstByteNexts[index]=entry;
    }
    next=entry.getNext();
    entry.setNext(null);
  }
}",0.9630359783144408
161809,"public byte[] getStartingBytes(){
  if (pattern.length() < 4) {
    return null;
  }
 else {
    return new byte[]{(byte)pattern.charAt(0),(byte)pattern.charAt(1),(byte)pattern.charAt(2),(byte)pattern.charAt(3)};
  }
}","/** 
 * Get the bytes that start the pattern from an optimization standpoint. 
 */
public byte[] getStartingBytes(){
  if (pattern.length() < 4) {
    return null;
  }
 else {
    return new byte[]{(byte)pattern.charAt(0),(byte)pattern.charAt(1),(byte)pattern.charAt(2),(byte)pattern.charAt(3)};
  }
}",0.8400770712909441
161810,"private void readFile(List<MagicEntry> entryList,Reader reader) throws IOException {
  BufferedReader lineReader=new BufferedReader(reader);
  MagicEntry previous=null;
  while (true) {
    String line=lineReader.readLine();
    if (line == null) {
      return;
    }
    if (line.length() == 0 || line.charAt(0) == '#') {
      continue;
    }
    MagicEntry entry;
    try {
      entry=MagicEntry.parseString(previous,line);
    }
 catch (    IllegalArgumentException e) {
      continue;
    }
    if (entry == null) {
      continue;
    }
    if (entry.getLevel() == 0) {
      entryList.add(entry);
    }
    previous=entry;
  }
}","private void readFile(List<MagicEntry> entryList,Reader reader) throws IOException {
  BufferedReader lineReader=new BufferedReader(reader);
  MagicEntry previous=null;
  while (true) {
    String line=lineReader.readLine();
    if (line == null) {
      return;
    }
    if (line.length() == 0 || line.charAt(0) == '#') {
      continue;
    }
    MagicEntry entry;
    try {
      entry=MagicEntry.parseLine(previous,line);
    }
 catch (    IllegalArgumentException e) {
      System.err.println(""String_Node_Str"" + e);
      continue;
    }
    if (entry == null) {
      continue;
    }
    if (entry.getLevel() == 0) {
      entryList.add(entry);
    }
    previous=entry;
  }
}",0.9554043839758124
161811,"private ContentInfo processBytes(byte[] bytes,ContentInfo contentInfo){
  Object val=matcher.extractValueFromBytes(offset,bytes);
  if (val == null) {
    return null;
  }
  if (testValue != null) {
    val=matcher.isMatch(testValue,andValue,unsignedType,val,offset,bytes);
    if (val == null) {
      return null;
    }
  }
  if (contentInfo == null) {
    contentInfo=new ContentInfo(name,mimeType);
  }
  if (formatter != null) {
    if (formatSpacePrefix && contentInfo.sb.length() > 0) {
      contentInfo.sb.append(' ');
    }
    matcher.renderValue(contentInfo.sb,val,formatter);
  }
  if (children != null) {
    boolean matched=false;
    for (    MagicEntry child : children) {
      if (child.processBytes(bytes,contentInfo) != null) {
        matched=true;
        if (contentInfo.name == UNKNOWN_NAME && child.name != null) {
          contentInfo.name=child.name;
        }
        if (contentInfo.mimeType == null && child.mimeType != null) {
          contentInfo.mimeType=child.mimeType;
        }
      }
    }
    if (!matched) {
      contentInfo=null;
    }
  }
  return contentInfo;
}","private ContentInfo processBytes(byte[] bytes,ContentInfo contentInfo){
  Object val=matcher.extractValueFromBytes(offset,bytes);
  if (val == null) {
    return null;
  }
  if (testValue != null) {
    val=matcher.isMatch(testValue,andValue,unsignedType,val,offset,bytes);
    if (val == null) {
      return null;
    }
  }
  if (contentInfo == null) {
    contentInfo=new ContentInfo(name,mimeType);
  }
  if (formatter != null) {
    if (formatSpacePrefix && contentInfo.sb.length() > 0) {
      contentInfo.sb.append(' ');
    }
    matcher.renderValue(contentInfo.sb,val,formatter);
  }
  if (children != null) {
    boolean matched=false;
    boolean assignName=(contentInfo.name == UNKNOWN_NAME);
    for (    MagicEntry child : children) {
      if (child.processBytes(bytes,contentInfo) != null) {
        matched=true;
        if (assignName && child.name != null && child.name != UNKNOWN_NAME) {
          contentInfo.name=child.name;
        }
        if (contentInfo.mimeType == null && child.mimeType != null) {
          contentInfo.mimeType=child.mimeType;
        }
      }
    }
    if (!matched) {
      return null;
    }
  }
  return contentInfo;
}",0.7313432835820896
161812,"/** 
 * Converts the test-string from the magic line to be an object to be passed into  {@link #isMatch(Object,int,byte[])}.
 */
public Object convertTestString(String test,int offset);","/** 
 * Converts the test-string from the magic line to be an object to be passed into  {@link #isMatch(Object,int,byte[])}.
 */
public Object convertTestString(String typeStr,String testStr,int offset);",0.9381443298969072
161813,"public Object convertTestString(String test,int offset){
  return EMPTY;
}","public Object convertTestString(String typeStr,String testStr,int offset){
  return EMPTY;
}",0.891566265060241
161814,"public Object convertTestString(String test,int offset){
  try {
    return Double.parseDouble(test);
  }
 catch (  NumberFormatException e) {
    throw new IllegalArgumentException(""String_Node_Str"" + test);
  }
}","public Object convertTestString(String typeStr,String testStr,int offset){
  try {
    return Double.parseDouble(testStr);
  }
 catch (  NumberFormatException e) {
    throw new IllegalArgumentException(""String_Node_Str"" + testStr);
  }
}",0.9336283185840708
161815,"public Object convertTestString(String test,int offset){
  try {
    return Float.parseFloat(test);
  }
 catch (  NumberFormatException e) {
    throw new IllegalArgumentException(""String_Node_Str"" + test);
  }
}","public Object convertTestString(String typeStr,String testStr,int offset){
  try {
    return Float.parseFloat(testStr);
  }
 catch (  NumberFormatException e) {
    throw new IllegalArgumentException(""String_Node_Str"" + testStr);
  }
}",0.9330357142857144
161816,"@Override public Long extractValueFromBytes(int offset,byte[] bytes){
  return endianConverter.convertNumber(offset,bytes,4);
}","@Override public Object extractValueFromBytes(int offset,byte[] bytes){
  return endianConverter.convertNumber(offset,bytes,4);
}",0.9609375
161817,"@Override public void renderValue(StringBuilder sb,Object extractedValue,Formatter formatter){
  long val=(Integer)extractedValue;
  val*=1000;
  Calendar calendar=Calendar.getInstance();
  calendar.setTimeInMillis(val);
  sb.append(dateFormat.get().format(calendar));
}","@Override public void renderValue(StringBuilder sb,Object extractedValue,Formatter formatter){
  long val=(Long)extractedValue;
  formatter.format(sb,dateFormat.get().format(dateFromExtractedValue(val)));
}",0.5966386554621849
161818,"public Object convertTestString(String test,int offset){
  return new NumberOperator(test);
}","public Object convertTestString(String typeStr,String testStr,int offset){
  return new NumberOperator(testStr);
}",0.8985507246376812
161819,"public Object convertTestString(String test,int offset){
  int index=test.lastIndexOf('/');
  PatternInfo patternInfo=new PatternInfo();
  if (index >= 0 && (index == test.length() - 2 || index == test.length() - 3)) {
    boolean valid=handleFlag(patternInfo,test.charAt(index + 1));
    if (valid && index == test.length() - 3) {
      valid=handleFlag(patternInfo,test.charAt(index + 2));
    }
    if (valid) {
      test=test.substring(0,index);
    }
  }
  patternInfo.pattern=Pattern.compile(""String_Node_Str"" + test + ""String_Node_Str"",patternInfo.patternFlags);
  return patternInfo;
}","public Object convertTestString(String typeStr,String testStr,int offset){
  Matcher matcher=TYPE_PATTERN.matcher(typeStr);
  PatternInfo patternInfo=new PatternInfo();
  if (matcher.matches()) {
    String flagsStr=matcher.group(1);
    if (flagsStr != null && flagsStr.length() > 1) {
      for (      char ch : flagsStr.toCharArray()) {
        if (ch == 'c') {
          patternInfo.patternFlags|=Pattern.CASE_INSENSITIVE;
        }
 else         if (ch == 's') {
          patternInfo.updateOffsetStart=true;
        }
      }
    }
  }
  patternInfo.pattern=Pattern.compile(""String_Node_Str"" + testStr + ""String_Node_Str"",patternInfo.patternFlags);
  return patternInfo;
}",0.4323899371069182
161820,"@Override public Object isMatch(Object testValue,Long andValue,boolean unsignedType,Object extractedValue,int offset,byte[] bytes){
  StringTestInfo info=(StringTestInfo)testValue;
  BufferedReader reader=new BufferedReader(new InputStreamReader(new ByteArrayInputStream(bytes)));
  try {
    int lineCount;
    for (lineCount=0; lineCount < offset; lineCount++) {
      if (reader.readLine() == null) {
        return null;
      }
    }
    for (; lineCount < info.maxOffset; lineCount++) {
      String line=reader.readLine();
      if (line == null) {
        break;
      }
      for (int i=0; i < line.length(); i++) {
        String match=findOffsetMatch(info,i,null,line);
        if (match != null) {
          return match;
        }
      }
    }
    return null;
  }
 catch (  IOException e) {
    return null;
  }
}","@Override public Object isMatch(Object testValue,Long andValue,boolean unsignedType,Object extractedValue,int offset,byte[] bytes){
  if (offset > MAX_NUM_LINES) {
    return false;
  }
  StringTestInfo info=(StringTestInfo)testValue;
  BufferedReader reader=new BufferedReader(new InputStreamReader(new ByteArrayInputStream(bytes)));
  try {
    int lineCount;
    for (lineCount=0; lineCount < offset; lineCount++) {
      if (reader.readLine() == null) {
        return null;
      }
    }
    for (; lineCount < info.maxOffset; lineCount++) {
      String line=reader.readLine();
      if (line == null) {
        break;
      }
      for (int i=0; i < line.length(); i++) {
        String match=findOffsetMatch(info,i,null,line);
        if (match != null) {
          return match;
        }
      }
    }
    return null;
  }
 catch (  IOException e) {
    return null;
  }
}",0.968421052631579
161821,"/** 
 * Get the active MAC address on the current machine as a byte array. This is called when generating a new UUID. Note that a machine can have multiple or no active MAC addresses. This method works by iterating through the list of network interfaces, ignoring the loopback interface and any virtual interfaces (which often have made-up addresses), and returning the first one we find. If no valid addresses are found, then a byte array of the same length with all zeros is returned.
 * @return 6-byte array for first active MAC address, or 6-byte zeroed array if no interfaces are active.
 */
private static byte[] macAddress(){
  try {
    Enumeration<NetworkInterface> interfaces=NetworkInterface.getNetworkInterfaces();
    byte[] mac=null;
    while (interfaces.hasMoreElements() && mac != null && mac.length != 6) {
      NetworkInterface netInterface=interfaces.nextElement();
      if (netInterface.isLoopback() || netInterface.isVirtual())       continue;
      mac=netInterface.getHardwareAddress();
    }
    if (mac == null)     mac=new byte[]{0,0,0,0,0,0};
    return mac;
  }
 catch (  Exception e) {
    throw new RuntimeException(""String_Node_Str"");
  }
}","/** 
 * Get the active MAC address on the current machine as a byte array. This is called when generating a new UUID. Note that a machine can have multiple or no active MAC addresses. This method works by iterating through the list of network interfaces, ignoring the loopback interface and any virtual interfaces (which often have made-up addresses), and returning the first one we find. If no valid addresses are found, then a byte array of the same length with all zeros is returned.
 * @return 6-byte array for first active MAC address, or 6-byte zeroed array if no interfaces are active.
 */
private static byte[] macAddress(){
  try {
    Enumeration<NetworkInterface> interfaces=NetworkInterface.getNetworkInterfaces();
    byte[] mac=null;
    while (interfaces.hasMoreElements() && (mac == null || mac.length != 6)) {
      NetworkInterface netInterface=interfaces.nextElement();
      if (netInterface.isLoopback() || netInterface.isVirtual())       continue;
      mac=netInterface.getHardwareAddress();
    }
    if (mac == null)     mac=new byte[]{0,0,0,0,0,0};
    return mac;
  }
 catch (  Exception e) {
    throw new RuntimeException(""String_Node_Str"");
  }
}",0.977872340425532
161822,"/** 
 * Exposes the MAC address that us used in the UUID via injection.
 * @return the MAC address.
 */
private static byte[] macAddress() throws NoSuchMethodException, InvocationTargetException, IllegalAccessException {
  Method macAddress=com.groupon.uuid.UUID.class.getDeclaredMethod(""String_Node_Str"");
  macAddress.setAccessible(true);
  return (byte[])macAddress.invoke(new UUID());
}","/** 
 * Exposes the MAC address that us used in the UUID via reflection.
 * @return the MAC address.
 */
private static byte[] macAddress() throws NoSuchMethodException, InvocationTargetException, IllegalAccessException {
  Method macAddress=com.groupon.uuid.UUID.class.getDeclaredMethod(""String_Node_Str"");
  macAddress.setAccessible(true);
  return (byte[])macAddress.invoke(new UUID());
}",0.9910371318822024
161823,"/** 
 * Creates a new   {@link CandidatePacketExtension} with the specified<tt>elementName</tt> so that this class would be usable as a <tt>RemoteCandidatePacketExtension</tt> parent.
 * @param elementName the element name that this instance should be using.
 */
protected CandidatePacketExtension(String elementName){
  super(null,elementName);
}","/** 
 * Creates a new   {@link CandidatePacketExtension} with the specified<tt>elementName</tt> so that this class would be usable as a <tt>RemoteCandidatePacketExtension</tt> parent.
 * @param elementName the element name that this instance should be using.
 */
protected CandidatePacketExtension(String elementName){
  super(NAMESPACE,elementName);
}",0.9814020028612304
161824,"/** 
 * Creates a new   {@link PayloadTypePacketExtension} instance.
 */
public PayloadTypePacketExtension(){
  super(null,ELEMENT_NAME);
}","/** 
 * Creates a new   {@link PayloadTypePacketExtension} instance.
 */
public PayloadTypePacketExtension(){
  super(NAMESPACE,ELEMENT_NAME);
}",0.9540636042402828
161825,"private MediaFormat getSupportedFormat(String name,PayloadTypePacketExtension payloadType){
  MediaDevice dev=devices.get(name);
  for (  MediaFormat mf : dev.getSupportedFormats()) {
    if ((mf.getRTPPayloadType() == MediaFormat.RTP_PAYLOAD_TYPE_UNKNOWN || mf.getRTPPayloadType() == payloadType.getID()) && mf.getClockRateString().equals(String.valueOf(payloadType.getClockrate())) && mf.getEncoding().equals(payloadType.getName())) {
      return mf;
    }
  }
  return null;
}","private MediaFormat getSupportedFormat(String name,PayloadTypePacketExtension payloadType){
  MediaDevice dev=devices.get(name);
  MediaType mediaType=dev.getMediaType();
  for (  MediaFormat mf : dev.getSupportedFormats()) {
    if (mf.matches(mediaType,payloadType.getName(),payloadType.getClockrate(),payloadType.getChannels(),null)) {
      return mf;
    }
  }
  return null;
}",0.617169373549884
161826,"public IceAgent(final boolean controling,String username,final String streamname,TransportAddress stunAddresses[],TransportAddress turnAddresses[]) throws IOException {
  this.agent=new Agent();
  this.controling=controling;
  this.streamname=streamname;
  agent.setControlling(controling);
  agent.setNominationStrategy(NominationStrategy.NOMINATE_HIGHEST_PRIO);
  if (stunAddresses != null)   for (  TransportAddress ta : stunAddresses)   agent.addCandidateHarvester(new StunCandidateHarvester(ta,username));
  LongTermCredential ltr=new LongTermCredential(username,generateNonce(15));
  if (turnAddresses != null)   for (  TransportAddress ta : turnAddresses)   agent.addCandidateHarvester(new TurnCandidateHarvester(ta,ltr));
  try {
    createStream(9090,streamname);
  }
 catch (  BindException be) {
    throw new IOException(be);
  }
}","public IceAgent(final boolean controling,String username,final String streamname,TransportAddress stunAddresses[],TransportAddress turnAddresses[]) throws IOException {
  this.agent=new Agent();
  this.controling=controling;
  this.streamname=streamname;
  agent.setControlling(controling);
  agent.setNominationStrategy(NominationStrategy.NOMINATE_FIRST_VALID);
  if (stunAddresses != null)   for (  TransportAddress ta : stunAddresses)   agent.addCandidateHarvester(new StunCandidateHarvester(ta));
  LongTermCredential ltr=new LongTermCredential(generateNonce(5),generateNonce(15));
  if (turnAddresses != null)   for (  TransportAddress ta : turnAddresses)   agent.addCandidateHarvester(new TurnCandidateHarvester(ta,ltr));
  try {
    createStream(9090,streamname);
  }
 catch (  BindException be) {
    throw new IOException(be);
  }
}",0.9726840855106887
161827,"private void createStream(int rtpPort,String name) throws BindException, IllegalArgumentException, IOException {
  IceMediaStream stream=agent.createMediaStream(name);
  agent.createComponent(stream,Transport.UDP,rtpPort,rtpPort,rtpPort + 100);
  agent.createComponent(stream,Transport.UDP,rtpPort + 1,rtpPort + 1,rtpPort + 101);
}","public void createStream(int rtpPort,String name) throws BindException, IllegalArgumentException, IOException {
  IceMediaStream stream=agent.createMediaStream(name);
  agent.createComponent(stream,Transport.UDP,rtpPort,rtpPort,rtpPort + 100);
  agent.createComponent(stream,Transport.UDP,rtpPort + 1,rtpPort + 1,rtpPort + 101);
}",0.983358547655068
161828,"public void addRemoteCandidates(JingleIQ jiq){
  for (  ContentPacketExtension contentpe : jiq.getContentList()) {
    String name=contentpe.getName();
    IceMediaStream ims=agent.getStream(name);
    if (ims != null) {
      for (      IceUdpTransportPacketExtension tpe : contentpe.getChildExtensionsOfType(IceUdpTransportPacketExtension.class)) {
        ims.setRemotePassword(tpe.getPassword());
        ims.setRemoteUfrag(tpe.getUfrag());
        for (        CandidatePacketExtension cpe : tpe.getCandidateList()) {
          InetAddress ia;
          try {
            ia=InetAddress.getByName(cpe.getIP());
          }
 catch (          UnknownHostException uhe) {
            continue;
          }
          for (          Component component : ims.getComponents()) {
            component.addRemoteCandidate(new RemoteCandidate(new TransportAddress(ia,cpe.getPort(),Transport.parse(cpe.getProtocol().toLowerCase())),component,convertType(cpe.getType()),Integer.toString(cpe.getFoundation()),cpe.getPriority(),null));
          }
        }
      }
    }
  }
}","public void addRemoteCandidates(JingleIQ jiq){
  for (  ContentPacketExtension contentpe : jiq.getContentList()) {
    String name=contentpe.getName();
    IceMediaStream ims=agent.getStream(name);
    if (ims != null) {
      for (      IceUdpTransportPacketExtension tpe : contentpe.getChildExtensionsOfType(IceUdpTransportPacketExtension.class)) {
        ims.setRemotePassword(tpe.getPassword());
        ims.setRemoteUfrag(tpe.getUfrag());
        for (        CandidatePacketExtension cpe : tpe.getCandidateList()) {
          InetAddress ia;
          try {
            ia=InetAddress.getByName(cpe.getIP());
          }
 catch (          UnknownHostException uhe) {
            continue;
          }
          Component component=ims.getComponent(cpe.getComponent());
          if (component != null) {
            component.addRemoteCandidate(new RemoteCandidate(new TransportAddress(ia,cpe.getPort(),Transport.parse(cpe.getProtocol().toLowerCase())),component,convertType(cpe.getType()),Integer.toString(cpe.getFoundation()),cpe.getPriority(),null));
          }
        }
      }
    }
  }
}",0.707508060801474
161829,"public IceUdpTransportPacketExtension getLocalCandidatePacketExtension(){
  IceUdpTransportPacketExtension transport=new IceUdpTransportPacketExtension();
  transport.setPassword(agent.getLocalPassword());
  transport.setUfrag(agent.getLocalUfrag());
  for (  IceMediaStream ims : agent.getStreams()) {
    for (    Component c : ims.getComponents()) {
      for (      Candidate<?> can : c.getLocalCandidates()) {
        CandidatePacketExtension candidate=new CandidatePacketExtension();
        candidate.setComponent(c.getComponentID());
        candidate.setFoundation(Integer.parseInt(can.getFoundation()));
        candidate.setGeneration(agent.getGeneration());
        candidate.setID(generateNonce(10));
        candidate.setNetwork(0);
        TransportAddress ta=can.getTransportAddress();
        candidate.setIP(ta.getHostAddress());
        candidate.setPort(ta.getPort());
        candidate.setPriority(can.getPriority());
        candidate.setProtocol(can.getTransport().name().toLowerCase());
        if (can.getRelatedAddress() != null) {
          candidate.setRelAddr(can.getRelatedAddress().getHostAddress());
          candidate.setRelPort(can.getRelatedAddress().getPort());
        }
        candidate.setType(convertType(can.getType()));
        transport.addCandidate(candidate);
      }
    }
  }
  return transport;
}","public IceUdpTransportPacketExtension getLocalCandidatePacketExtension(){
  IceUdpTransportPacketExtension transport=new IceUdpTransportPacketExtension();
  transport.setPassword(agent.getLocalPassword());
  transport.setUfrag(agent.getLocalUfrag());
  for (  IceMediaStream ims : agent.getStreams()) {
    for (    Component c : ims.getComponents()) {
      for (      Candidate<?> can : c.getLocalCandidates()) {
        CandidatePacketExtension candidate=new CandidatePacketExtension();
        candidate.setComponent(c.getComponentID());
        candidate.setFoundation(Integer.parseInt(can.getFoundation()));
        candidate.setGeneration(agent.getGeneration());
        candidate.setID(String.valueOf(c.getComponentID()));
        candidate.setNetwork(0);
        TransportAddress ta=can.getTransportAddress();
        candidate.setIP(ta.getHostAddress());
        candidate.setPort(ta.getPort());
        candidate.setPriority(can.getPriority());
        candidate.setProtocol(can.getTransport().name().toLowerCase());
        if (can.getRelatedAddress() != null) {
          candidate.setRelAddr(can.getRelatedAddress().getHostAddress());
          candidate.setRelPort(can.getRelatedAddress().getPort());
        }
        candidate.setType(convertType(can.getType()));
        transport.addCandidate(candidate);
      }
    }
  }
  return transport;
}",0.9819121447028424
161830,"/** 
 * Creates artificial annotations for non-overridden methods in subclasses. If the class A implements some method foo() which is marked as e.g. a source and class B extends A, but does not overwrite foo(), B.foo() must also be a source.
 * @param methods The list of method for which to create subclassannotations
 */
private void createSubclassAnnotations(final Set<AndroidMethod> methods){
  int copyCount=-1;
  int totalCopyCount=0;
  while (copyCount != 0)   copyCount=0;
  for (  AndroidMethod am : methods) {
    AbstractSootFeature asf=new AbstractSootFeature(ANDROID){
      @Override public Type appliesInternal(      AndroidMethod method){
        SootMethod parentMethod=getSootMethod(method);
        if (parentMethod == null)         return Type.NOT_SUPPORTED;
        boolean copied=false;
        if (!parentMethod.getDeclaringClass().getName().equals(method.getClassName())) {
          AndroidMethod parentMethodData=findAndroidMethod(parentMethod);
          if (parentMethodData == null)           return Type.NOT_SUPPORTED;
          if (parentMethodData.isAnnotated() && method.isAnnotated())           if (parentMethodData.isSource() != method.isSource() || parentMethodData.isSink() != method.isSink() || parentMethodData.isNeitherNor() != method.isNeitherNor())           throw new RuntimeException(""String_Node_Str"" + parentMethodData + ""String_Node_Str""+ method);
          if (parentMethodData.getCategory() != null && method.getCategory() != null)           if (parentMethodData.getCategory() != method.getCategory())           throw new RuntimeException(""String_Node_Str"" + parentMethod + ""String_Node_Str""+ method);
          if (parentMethodData.isAnnotated() && !method.isAnnotated()) {
            method.setSource(parentMethodData.isSource());
            method.setSink(parentMethodData.isSink());
            method.setNeitherNor(parentMethodData.isNeitherNor());
            copied=true;
          }
          if (parentMethodData.getCategory() != null && method.getCategory() == null)           method.setCategory(parentMethodData.getCategory());
          if (!parentMethodData.isAnnotated() && method.isAnnotated()) {
            parentMethodData.setSource(method.isSource());
            parentMethodData.setSink(method.isSink());
            parentMethodData.setNeitherNor(method.isNeitherNor());
            copied=true;
          }
          if (parentMethodData.getCategory() == null && method.getCategory() != null)           parentMethodData.setCategory(method.getCategory());
        }
        return copied ? Type.TRUE : Type.FALSE;
      }
      private AndroidMethod findAndroidMethod(      SootMethod sm){
        AndroidMethod smData=new AndroidMethod(sm);
        for (        AndroidMethod am : methods)         if (am.equals(smData))         return am;
        return null;
      }
    }
;
    if (asf.applies(am) == Type.TRUE) {
      copyCount++;
      totalCopyCount++;
    }
  }
  System.out.println(""String_Node_Str"" + totalCopyCount + ""String_Node_Str"");
}","/** 
 * Creates artificial annotations for non-overridden methods in subclasses. If the class A implements some method foo() which is marked as e.g. a source and class B extends A, but does not overwrite foo(), B.foo() must also be a source.
 * @param methods The list of method for which to create subclassannotations
 */
private void createSubclassAnnotations(final Set<AndroidMethod> methods){
  int copyCount=-1;
  int totalCopyCount=0;
  while (copyCount != 0) {
    copyCount=0;
    for (    AndroidMethod am : methods) {
      AbstractSootFeature asf=new AbstractSootFeature(ANDROID){
        @Override public Type appliesInternal(        AndroidMethod method){
          SootMethod parentMethod=getSootMethod(method);
          if (parentMethod == null)           return Type.NOT_SUPPORTED;
          boolean copied=false;
          if (!parentMethod.getDeclaringClass().getName().equals(method.getClassName())) {
            AndroidMethod parentMethodData=findAndroidMethod(parentMethod);
            if (parentMethodData == null)             return Type.NOT_SUPPORTED;
            if (parentMethodData.isAnnotated() && method.isAnnotated())             if (parentMethodData.isSource() != method.isSource() || parentMethodData.isSink() != method.isSink() || parentMethodData.isNeitherNor() != method.isNeitherNor())             throw new RuntimeException(""String_Node_Str"" + parentMethodData + ""String_Node_Str""+ method);
            if (parentMethodData.getCategory() != null && method.getCategory() != null)             if (parentMethodData.getCategory() != method.getCategory())             throw new RuntimeException(""String_Node_Str"" + parentMethod + ""String_Node_Str""+ method);
            if (parentMethodData.isAnnotated() && !method.isAnnotated()) {
              method.setSource(parentMethodData.isSource());
              method.setSink(parentMethodData.isSink());
              method.setNeitherNor(parentMethodData.isNeitherNor());
              copied=true;
            }
            if (parentMethodData.getCategory() != null && method.getCategory() == null)             method.setCategory(parentMethodData.getCategory());
            if (!parentMethodData.isAnnotated() && method.isAnnotated()) {
              parentMethodData.setSource(method.isSource());
              parentMethodData.setSink(method.isSink());
              parentMethodData.setNeitherNor(method.isNeitherNor());
              copied=true;
            }
            if (parentMethodData.getCategory() == null && method.getCategory() != null)             parentMethodData.setCategory(method.getCategory());
          }
          return copied ? Type.TRUE : Type.FALSE;
        }
        private AndroidMethod findAndroidMethod(        SootMethod sm){
          AndroidMethod smData=new AndroidMethod(sm);
          for (          AndroidMethod am : methods)           if (am.equals(smData))           return am;
          return null;
        }
      }
;
      if (asf.applies(am) == Type.TRUE) {
        copyCount++;
        totalCopyCount++;
      }
    }
  }
  System.out.println(""String_Node_Str"" + totalCopyCount + ""String_Node_Str"");
}",0.9814935064935064
161831,"private Set<AndroidMethod> loadMethodsFromFile(String[] sourceFileName) throws IOException {
  Set<AndroidMethod> methods=new HashSet<AndroidMethod>();
  for (  String fileName : sourceFileName) {
    IPermissionMethodParser pmp=createParser(fileName);
    Set<AndroidMethod> meths=pmp.parse();
    for (    AndroidMethod am : meths) {
      if (methods.contains(am)) {
        for (        AndroidMethod amOrig : methods)         if (am.equals(amOrig)) {
          if (am.isSource())           amOrig.setSource(true);
          if (am.isSource())           amOrig.setSink(true);
          if (am.isNeitherNor())           amOrig.setNeitherNor(true);
          amOrig.getPermissions().addAll(am.getPermissions());
          amOrig.getParameters().addAll(am.getParameters());
          break;
        }
      }
 else {
        methods.add(am);
        if (fileName.endsWith(""String_Node_Str""))         methodsWithPermissions.add(am);
      }
    }
  }
  if (ENABLE_PERMISSION) {
    createPermissionFeatures(methods,this.featuresSourceSink);
    createPermissionFeatures(methods,this.featuresCategories);
  }
  System.out.println(""String_Node_Str"" + featuresSourceSink.size() + ""String_Node_Str""+ methods.size()+ ""String_Node_Str"");
  return methods;
}","private Set<AndroidMethod> loadMethodsFromFile(String[] sourceFileName) throws IOException {
  Set<AndroidMethod> methods=new HashSet<AndroidMethod>();
  for (  String fileName : sourceFileName) {
    IPermissionMethodParser pmp=createParser(fileName);
    Set<AndroidMethod> meths=pmp.parse();
    for (    AndroidMethod am : meths) {
      if (methods.contains(am)) {
        for (        AndroidMethod amOrig : methods)         if (am.equals(amOrig)) {
          if (am.isSource())           amOrig.setSource(true);
          if (am.isSink())           amOrig.setSink(true);
          if (am.isNeitherNor())           amOrig.setNeitherNor(true);
          amOrig.getPermissions().addAll(am.getPermissions());
          amOrig.getParameters().addAll(am.getParameters());
          break;
        }
      }
 else {
        methods.add(am);
        if (fileName.endsWith(""String_Node_Str""))         methodsWithPermissions.add(am);
      }
    }
  }
  if (ENABLE_PERMISSION) {
    createPermissionFeatures(methods,this.featuresSourceSink);
    createPermissionFeatures(methods,this.featuresCategories);
  }
  System.out.println(""String_Node_Str"" + featuresSourceSink.size() + ""String_Node_Str""+ methods.size()+ ""String_Node_Str"");
  return methods;
}",0.9968
161832,"/** 
 * Checks whether there are semantic errors in the given set of Android methods and tries to filter out duplicates by merging.
 * @param methods The set of method definitions to check
 * @return The purged set of Android methods without duplicates
 */
private Set<AndroidMethod> sanityCheck(Set<AndroidMethod> methods){
  Map<String,AndroidMethod> signatureToMethod=new HashMap<>(methods.size());
  for (  AndroidMethod m1 : methods) {
    String sig=m1.getSignature();
    AndroidMethod m2=signatureToMethod.get(sig);
    if (m2 == null)     signatureToMethod.put(sig,m1);
 else {
      if (!m1.equals(m2)) {
        if (!m1.isAnnotated() && m2.isAnnotated()) {
          m1.setSource(m2.isSource());
          m1.setSink(m2.isSink());
          m1.setNeitherNor(m2.isNeitherNor());
          for (          String permission : m2.getPermissions())           m1.addPermission(permission);
        }
        if (!m2.getPermissions().isEmpty()) {
          for (          String permission : m2.getPermissions())           m1.addPermission(permission);
        }
        if (m1.getCategory() == null && m2.getCategory() != null)         m1.setCategory(m2.getCategory());
      }
    }
  }
  System.out.println(""String_Node_Str"" + (methods.size() - signatureToMethod.size()) + ""String_Node_Str"");
  return new HashSet<>(signatureToMethod.values());
}","/** 
 * Checks whether there are semantic errors in the given set of Android methods and tries to filter out duplicates by merging.
 * @param methods The set of method definitions to check
 * @return The purged set of Android methods without duplicates
 */
private Set<AndroidMethod> sanityCheck(Set<AndroidMethod> methods){
  Map<String,AndroidMethod> signatureToMethod=new HashMap<>(methods.size());
  for (  AndroidMethod m1 : methods) {
    String sig=m1.getSignature();
    AndroidMethod m2=signatureToMethod.get(sig);
    if (m2 == null)     signatureToMethod.put(sig,m1);
 else {
      if (!m1.equals(m2)) {
        if (!m2.isAnnotated() && m1.isAnnotated()) {
          m2.setSource(m1.isSource());
          m2.setSink(m1.isSink());
          m2.setNeitherNor(m1.isNeitherNor());
          for (          String permission : m1.getPermissions())           m2.addPermission(permission);
        }
        if (!m1.getPermissions().isEmpty()) {
          for (          String permission : m1.getPermissions())           m2.addPermission(permission);
        }
        if (m2.getCategory() == null && m1.getCategory() != null)         m2.setCategory(m1.getCategory());
      }
    }
  }
  System.out.println(""String_Node_Str"" + (methods.size() - signatureToMethod.size()) + ""String_Node_Str"");
  return new HashSet<>(signatureToMethod.values());
}",0.6962305986696231
161833,"private void writeRIFLSpecification(String targetFileName,Set<AndroidMethod> methods) throws IOException {
  RIFLDocument doc=new RIFLDocument();
  DomainSpec topDomain=doc.new DomainSpec(""String_Node_Str"");
  DomainSpec bottomDomain=doc.new DomainSpec(""String_Node_Str"");
  doc.getDomains().add(topDomain);
  doc.getDomains().add(bottomDomain);
  doc.getFlowPolicy().add(doc.new FlowPair(topDomain,topDomain));
  doc.getFlowPolicy().add(doc.new FlowPair(bottomDomain,bottomDomain));
  doc.getFlowPolicy().add(doc.new FlowPair(bottomDomain,topDomain));
  Map<String,Category> categoryMap=new HashMap<String,Category>();
  Map<CATEGORY,Assignable> assignableMap=new HashMap<CATEGORY,Assignable>();
  for (  AndroidMethod am : methods) {
    SootMethodAndClass smac=SootMethodRepresentationParser.v().parseSootMethodString(am.getSignature());
    String halfSignature=am.getSubSignature().substring(am.getSubSignature().indexOf(""String_Node_Str"") + 1);
    if (am.getCategory() != null && !categoryMap.containsKey(am.getCategory())) {
      if (am.isSource()) {
        String catName=am.getCategory().toString() + ""String_Node_Str"";
        Category riflCat=doc.new Category(catName);
        categoryMap.put(catName,riflCat);
        Assignable riflAssignable=doc.new Assignable(catName,riflCat);
        assignableMap.put(am.getCategory(),riflAssignable);
        doc.getInterfaceSpec().getSourcesSinks().add(riflAssignable);
        doc.getDomainAssignment().add(doc.new DomainAssignment(riflAssignable,topDomain));
      }
 else       if (am.isSink()) {
        String catName=am.getCategory().toString() + ""String_Node_Str"";
        Category riflCat=doc.new Category(catName);
        categoryMap.put(catName,riflCat);
        Assignable riflAssignable=doc.new Assignable(catName,riflCat);
        assignableMap.put(am.getCategory(),riflAssignable);
        doc.getInterfaceSpec().getSourcesSinks().add(riflAssignable);
        doc.getDomainAssignment().add(doc.new DomainAssignment(riflAssignable,bottomDomain));
      }
    }
    if (am.getCategory() != null && (am.isSource() || am.isSink())) {
      String catName=am.getCategory().toString() + (am.isSource() ? ""String_Node_Str"" : ""String_Node_Str"");
      Category riflCat=categoryMap.get(catName);
      if (riflCat == null)       throw new RuntimeException(""String_Node_Str"" + catName);
      if (am.isSource()) {
        SourceSinkSpec sourceSinkSpec=doc.new JavaReturnValueSpec(SourceSinkType.Source,smac.getClassName(),halfSignature);
        riflCat.getElements().add(sourceSinkSpec);
      }
 else       if (am.isSink()) {
        for (int i=0; i < am.getParameters().size(); i++) {
          SourceSinkSpec sourceSinkSpec=doc.new JavaParameterSpec(SourceSinkType.Sink,smac.getClassName(),halfSignature,i + 1);
          riflCat.getElements().add(sourceSinkSpec);
        }
      }
    }
  }
  RIFLWriter writer=new RIFLWriter(doc);
  String fileName=appendFileName(targetFileName,""String_Node_Str"");
  PrintWriter wr=new PrintWriter(fileName);
  wr.print(writer.write());
  wr.flush();
  wr.close();
}","private void writeRIFLSpecification(String targetFileName,Set<AndroidMethod> methods) throws IOException {
  RIFLDocument doc=new RIFLDocument();
  DomainSpec topDomain=doc.new DomainSpec(""String_Node_Str"");
  DomainSpec bottomDomain=doc.new DomainSpec(""String_Node_Str"");
  doc.getDomains().add(topDomain);
  doc.getDomains().add(bottomDomain);
  doc.getFlowPolicy().add(doc.new FlowPair(topDomain,topDomain));
  doc.getFlowPolicy().add(doc.new FlowPair(bottomDomain,bottomDomain));
  doc.getFlowPolicy().add(doc.new FlowPair(bottomDomain,topDomain));
  Map<String,Category> categoryMap=new HashMap<String,Category>();
  Map<CATEGORY,Assignable> assignableMap=new HashMap<CATEGORY,Assignable>();
  for (  AndroidMethod am : methods) {
    SootMethodAndClass smac=SootMethodRepresentationParser.v().parseSootMethodString(am.getSignature());
    String halfSignature=am.getSubSignature().substring(am.getSubSignature().indexOf(""String_Node_Str"") + 1);
    if (am.getCategory() != null) {
      if (am.isSource()) {
        String catName=am.getCategory().toString() + ""String_Node_Str"";
        if (!categoryMap.containsKey(catName)) {
          Category riflCat=doc.new Category(catName);
          categoryMap.put(catName,riflCat);
          Assignable riflAssignable=doc.new Assignable(catName,riflCat);
          assignableMap.put(am.getCategory(),riflAssignable);
          doc.getInterfaceSpec().getSourcesSinks().add(riflAssignable);
          doc.getDomainAssignment().add(doc.new DomainAssignment(riflAssignable,topDomain));
        }
      }
 else       if (am.isSink()) {
        String catName=am.getCategory().toString() + ""String_Node_Str"";
        if (!categoryMap.containsKey(catName)) {
          Category riflCat=doc.new Category(catName);
          categoryMap.put(catName,riflCat);
          Assignable riflAssignable=doc.new Assignable(catName,riflCat);
          assignableMap.put(am.getCategory(),riflAssignable);
          doc.getInterfaceSpec().getSourcesSinks().add(riflAssignable);
          doc.getDomainAssignment().add(doc.new DomainAssignment(riflAssignable,bottomDomain));
        }
      }
    }
    if (am.getCategory() != null && (am.isSource() || am.isSink())) {
      String catName=am.getCategory().toString() + (am.isSource() ? ""String_Node_Str"" : ""String_Node_Str"");
      Category riflCat=categoryMap.get(catName);
      if (riflCat == null)       throw new RuntimeException(""String_Node_Str"" + catName);
      if (am.isSource()) {
        SourceSinkSpec sourceSinkSpec=doc.new JavaReturnValueSpec(SourceSinkType.Source,smac.getClassName(),halfSignature);
        riflCat.getElements().add(sourceSinkSpec);
      }
 else       if (am.isSink()) {
        for (int i=0; i < am.getParameters().size(); i++) {
          SourceSinkSpec sourceSinkSpec=doc.new JavaParameterSpec(SourceSinkType.Sink,smac.getClassName(),halfSignature,i + 1);
          riflCat.getElements().add(sourceSinkSpec);
        }
      }
    }
  }
  RIFLWriter writer=new RIFLWriter(doc);
  String fileName=appendFileName(targetFileName,""String_Node_Str"");
  PrintWriter wr=new PrintWriter(fileName);
  wr.print(writer.write());
  wr.flush();
  wr.close();
}",0.8116778954122553
161834,"public String NIFGerbil(InputStream input,NEDAlgo_HITS agdistis) throws IOException {
  org.aksw.gerbil.transfer.nif.Document document;
  String nifDocument=""String_Node_Str"";
  String textWithMentions=""String_Node_Str"";
  List<MeaningSpan> annotations=new ArrayList<>();
  try {
    document=parser.getDocumentFromNIFStream(input);
    log.info(""String_Node_Str"");
    textWithMentions=nifParser.createTextWithMentions(document.getText(),document.getMarkings(Span.class));
    Document d=textToDocument(textWithMentions);
    agdistis.run(d,null);
    for (    NamedEntityInText namedEntity : d.getNamedEntitiesInText()) {
      String disambiguatedURL=namedEntity.getNamedEntityUri();
      if (disambiguatedURL == null) {
        annotations.add(new NamedEntity(namedEntity.getStartPos(),namedEntity.getLength(),URLDecoder.decode(""String_Node_Str"" + namedEntity.getSingleWordLabel(),""String_Node_Str"")));
      }
 else {
        annotations.add(new NamedEntity(namedEntity.getStartPos(),namedEntity.getLength(),URLDecoder.decode(namedEntity.getNamedEntityUri(),""String_Node_Str"")));
      }
    }
    document.setMarkings(new ArrayList<Marking>(annotations));
    log.debug(""String_Node_Str"" + document.toString());
    nifDocument=creator.getDocumentAsNIFString(document);
    log.debug(nifDocument);
  }
 catch (  Exception e) {
    log.error(""String_Node_Str"",e);
    return ""String_Node_Str"";
  }
  return nifDocument;
}","public String NIFGerbil(InputStream input,NEDAlgo_HITS agdistis) throws IOException {
  org.aksw.gerbil.transfer.nif.Document document;
  String nifDocument=""String_Node_Str"";
  String textWithMentions=""String_Node_Str"";
  List<MeaningSpan> annotations=new ArrayList<>();
  try {
    document=parser.getDocumentFromNIFStream(input);
    log.info(""String_Node_Str"");
    textWithMentions=nifParser.createTextWithMentions(document.getText(),document.getMarkings(Span.class));
    Document d=textToDocument(textWithMentions);
    agdistis.run(d,null);
    for (    NamedEntityInText namedEntity : d.getNamedEntitiesInText()) {
      String disambiguatedURL=namedEntity.getNamedEntityUri();
      if (!namedEntity.getNamedEntityUri().contains(""String_Node_Str"")) {
        annotations.add(new NamedEntity(namedEntity.getStartPos(),namedEntity.getLength(),URLDecoder.decode(""String_Node_Str"" + namedEntity.getSingleWordLabel(),""String_Node_Str"")));
      }
 else {
        annotations.add(new NamedEntity(namedEntity.getStartPos(),namedEntity.getLength(),URLDecoder.decode(namedEntity.getNamedEntityUri(),""String_Node_Str"")));
      }
    }
    document.setMarkings(new ArrayList<Marking>(annotations));
    log.debug(""String_Node_Str"" + document.toString());
    nifDocument=creator.getDocumentAsNIFString(document);
    log.debug(nifDocument);
  }
 catch (  Exception e) {
    log.error(""String_Node_Str"",e);
    return ""String_Node_Str"";
  }
  return nifDocument;
}",0.9716262975778548
161835,"private List<Triple> getFromIndex(int maxNumberOfResults,BooleanQuery bq) throws IOException {
  ScoreDoc[] hits=isearcher.search(bq,null,maxNumberOfResults).scoreDocs;
  if (hits.length == 0) {
    return new ArrayList<Triple>();
  }
  List<Triple> triples=new ArrayList<Triple>();
  String s, p, o;
  for (int i=0; i < hits.length; i++) {
    Document hitDoc=isearcher.doc(hits[i].doc);
    s=hitDoc.get(FIELD_NAME_CONTEXT);
    p=hitDoc.get(FIELD_NAME_URI);
    o=hitDoc.get(FIELD_NAME_URI_COUNT);
    Triple triple=new Triple(s,p,o);
    triples.add(triple);
  }
  log.debug(""String_Node_Str"");
  Collections.sort(triples);
  if (triples.size() < 500) {
    return triples.subList(0,triples.size());
  }
  return triples.subList(0,500);
}","private List<Triple> getFromIndex(int maxNumberOfResults,BooleanQuery bq) throws IOException {
  ScoreDoc[] hits=isearcher.search(bq,null,maxNumberOfResults).scoreDocs;
  if (hits.length == 0) {
    return new ArrayList<Triple>();
  }
  List<Triple> triples=new ArrayList<Triple>();
  String s, p, o;
  for (int i=0; i < hits.length; i++) {
    Document hitDoc=isearcher.doc(hits[i].doc);
    s=hitDoc.get(FIELD_NAME_CONTEXT);
    p=hitDoc.get(FIELD_NAME_URI);
    o=hitDoc.get(FIELD_NAME_URI_COUNT);
    Triple triple=new Triple(s,p,o);
    triples.add(triple);
  }
  log.debug(""String_Node_Str"");
  Collections.sort(triples);
  if (triples.size() < 500) {
    return triples.subList(0,triples.size());
  }
 else {
    return triples.subList(0,500);
  }
}",0.9906542056074766
161836,"private void checkLabelCandidates(DirectedSparseGraph<Node,String> graph,double threshholdTrigram,HashMap<String,Node> nodes,NamedEntityInText entity,String label,boolean searchInSurfaceForms,String entities) throws IOException {
  List<Triple> candidates=new ArrayList<Triple>();
  List<Triple> acronymCandidatesTemp=new ArrayList<Triple>();
  List<Triple> acronymCandidatesTemp2=new ArrayList<Triple>();
  List<Triple> candidatesContext=new ArrayList<Triple>();
  List<Triple> candidatesContextbyLabel=new ArrayList<Triple>();
  List<Triple> linkedsbyContext=new ArrayList<Triple>();
  int countFinalCandidates=0;
  PreprocessingNLP nlp=new PreprocessingNLP();
  label=corporationAffixCleaner.cleanLabelsfromCorporationIdentifier(label);
  log.info(""String_Node_Str"" + label);
  label=nlp.Preprocessing(label);
  if (acronym == true) {
    if (label.equals(label.toUpperCase()) && label.length() <= 4) {
      acronymCandidatesTemp=searchbyAcronym(label,searchInSurfaceForms,entity.getType());
      for (      Triple triple : acronymCandidatesTemp) {
        acronymCandidatesTemp2=searchAcronymByLabel(triple.getSubject(),searchInSurfaceForms,entity.getType());
        for (        Triple triple2 : acronymCandidatesTemp2) {
          if (nGramDistance.getDistance(triple.getSubject(),triple2.getObject()) > threshholdTrigram) {
            if (isDisambiguationResource(triple2.getSubject())) {
              continue;
            }
            triple2.setSubject(redirect(triple2.getSubject()));
            if (commonEntities == true) {
              addNodeToGraph(graph,nodes,entity,triple2,triple2.getSubject());
              countFinalCandidates++;
            }
 else {
              if (domainWhiteLister.fitsIntoDomain(triple2.getSubject())) {
                addNodeToGraph(graph,nodes,entity,triple2,triple2.getSubject());
                countFinalCandidates++;
              }
            }
          }
        }
        acronymCandidatesTemp2.clear();
      }
      log.info(""String_Node_Str"" + countFinalCandidates);
    }
  }
  if (countFinalCandidates == 0) {
    candidates=searchCandidatesByLabel(label,searchInSurfaceForms,""String_Node_Str"",popularity);
    if (searchInSurfaceForms) {
      log.info(""String_Node_Str"" + candidates.size());
    }
 else {
      log.info(""String_Node_Str"" + candidates.size());
    }
    if (candidates.size() == 0) {
      log.info(""String_Node_Str"" + label);
      if (label.endsWith(""String_Node_Str"")) {
        label=label.substring(0,label.lastIndexOf(""String_Node_Str""));
        candidates=searchCandidatesByLabel(label,searchInSurfaceForms,""String_Node_Str"",popularity);
        log.info(""String_Node_Str"");
      }
 else       if (label.endsWith(""String_Node_Str"")) {
        label=label.substring(0,label.lastIndexOf(""String_Node_Str""));
        candidates=searchCandidatesByLabel(label,searchInSurfaceForms,""String_Node_Str"",popularity);
        log.info(""String_Node_Str"");
      }
    }
    if (candidates.isEmpty()) {
      Stemming stemmer=new Stemming();
      String temp=stemmer.stemming(label);
      candidates=searchCandidatesByLabel(temp,searchInSurfaceForms,""String_Node_Str"",popularity);
      log.info(""String_Node_Str"" + candidates.size());
    }
    boolean added=false;
    for (    Triple c : candidates) {
      log.debug(""String_Node_Str"" + c);
      String candidateURL=c.getSubject();
      String surfaceForm=c.getObject();
      surfaceForm=nlp.Preprocessing(surfaceForm);
      if (candidateURL.startsWith(nodeType)) {
        if (c.getPredicate().equals(""String_Node_Str"")) {
          if (nGramDistance.getDistance(surfaceForm,label) < 1.0) {
            continue;
          }
        }
 else         if (!c.getPredicate().equals(""String_Node_Str"")) {
          if (nGramDistance.getDistance(surfaceForm,label) < threshholdTrigram) {
            continue;
          }
        }
        if (isDisambiguationResource(candidateURL)) {
          continue;
        }
        candidateURL=redirect(candidateURL);
        if (commonEntities == true) {
          addNodeToGraph(graph,nodes,entity,c,candidateURL);
          added=true;
          countFinalCandidates++;
        }
 else {
          if (domainWhiteLister.fitsIntoDomain(candidateURL)) {
            addNodeToGraph(graph,nodes,entity,c,candidateURL);
            added=true;
            countFinalCandidates++;
          }
        }
      }
    }
    if (!added && !searchInSurfaceForms && context == true) {
      log.info(""String_Node_Str"");
      candidatesContext=searchCandidatesByContext(entities,label);
      log.info(""String_Node_Str"" + candidatesContext.size());
      if (candidatesContext != null) {
        for (        Triple triple : candidatesContext) {
          String url=nodeType + triple.getPredicate();
          candidatesContextbyLabel.addAll(searchCandidatesByUrl(url,searchInSurfaceForms));
        }
      }
      for (      Triple c : candidatesContextbyLabel) {
        log.debug(""String_Node_Str"" + c);
        String candidateURL=c.getSubject();
        String cleanCandidateURL=candidateURL.replace(nodeType,""String_Node_Str"");
        cleanCandidateURL=nlp.Preprocessing(cleanCandidateURL);
        if (candidateURL.startsWith(nodeType)) {
          if (nGramDistance.getDistance(cleanCandidateURL,label) < 0.3) {
            continue;
          }
          for (          Triple temp : candidatesContext) {
            String candidateTemp=nodeType + temp.getPredicate();
            linkedsbyContext.addAll(searchbyConnections(candidateURL,candidateTemp));
          }
          if (linkedsbyContext.size() < 1) {
            continue;
          }
          if (isDisambiguationResource(candidateURL)) {
            continue;
          }
          candidateURL=redirect(candidateURL);
          if (commonEntities == true) {
            addNodeToGraph(graph,nodes,entity,c,candidateURL);
            added=true;
            countFinalCandidates++;
          }
 else {
            if (domainWhiteLister.fitsIntoDomain(candidateURL)) {
              addNodeToGraph(graph,nodes,entity,c,candidateURL);
              added=true;
              countFinalCandidates++;
            }
          }
        }
        linkedsbyContext.clear();
      }
    }
    if (!added && !searchInSurfaceForms) {
      log.info(""String_Node_Str"");
      checkLabelCandidates(graph,threshholdTrigram,nodes,entity,label,true,entities);
    }
  }
  log.info(""String_Node_Str"" + countFinalCandidates);
}","private void checkLabelCandidates(DirectedSparseGraph<Node,String> graph,double threshholdTrigram,HashMap<String,Node> nodes,NamedEntityInText entity,String label,boolean searchInSurfaceForms,String entities) throws IOException {
  List<Triple> candidates=new ArrayList<Triple>();
  List<Triple> acronymCandidatesTemp=new ArrayList<Triple>();
  List<Triple> acronymCandidatesTemp2=new ArrayList<Triple>();
  List<Triple> candidatesContext=new ArrayList<Triple>();
  List<Triple> candidatesContextbyLabel=new ArrayList<Triple>();
  List<Triple> linkedsbyContext=new ArrayList<Triple>();
  int countFinalCandidates=0;
  PreprocessingNLP nlp=new PreprocessingNLP();
  label=corporationAffixCleaner.cleanLabelsfromCorporationIdentifier(label);
  log.info(""String_Node_Str"" + label);
  label=nlp.Preprocessing(label);
  if (acronym == true) {
    if (label.equals(label.toUpperCase()) && label.length() <= 4) {
      acronymCandidatesTemp=searchbyAcronym(label,searchInSurfaceForms,entity.getType());
      for (      Triple triple : acronymCandidatesTemp) {
        acronymCandidatesTemp2=searchAcronymByLabel(triple.getSubject(),searchInSurfaceForms,entity.getType());
        for (        Triple triple2 : acronymCandidatesTemp2) {
          if (nGramDistance.getDistance(triple.getSubject(),triple2.getObject()) > threshholdTrigram) {
            triple2.setSubject(redirect(triple2.getSubject()));
            if (isDisambiguationResource(triple2.getSubject())) {
              continue;
            }
            if (commonEntities == true) {
              addNodeToGraph(graph,nodes,entity,triple2,triple2.getSubject());
              countFinalCandidates++;
            }
 else {
              if (domainWhiteLister.fitsIntoDomain(triple2.getSubject())) {
                addNodeToGraph(graph,nodes,entity,triple2,triple2.getSubject());
                countFinalCandidates++;
              }
            }
          }
        }
        acronymCandidatesTemp2.clear();
      }
      log.info(""String_Node_Str"" + countFinalCandidates);
    }
  }
  if (countFinalCandidates == 0) {
    candidates=searchCandidatesByLabel(label,searchInSurfaceForms,""String_Node_Str"",popularity);
    if (searchInSurfaceForms) {
      log.info(""String_Node_Str"" + candidates.size());
    }
 else {
      log.info(""String_Node_Str"" + candidates.size());
    }
    if (candidates.size() == 0) {
      log.info(""String_Node_Str"" + label);
      if (label.endsWith(""String_Node_Str"")) {
        label=label.substring(0,label.lastIndexOf(""String_Node_Str""));
        candidates=searchCandidatesByLabel(label,searchInSurfaceForms,""String_Node_Str"",popularity);
        log.info(""String_Node_Str"");
      }
 else       if (label.endsWith(""String_Node_Str"")) {
        label=label.substring(0,label.lastIndexOf(""String_Node_Str""));
        candidates=searchCandidatesByLabel(label,searchInSurfaceForms,""String_Node_Str"",popularity);
        log.info(""String_Node_Str"");
      }
    }
    if (candidates.isEmpty()) {
      Stemming stemmer=new Stemming();
      String temp=stemmer.stemming(label);
      candidates=searchCandidatesByLabel(temp,searchInSurfaceForms,""String_Node_Str"",popularity);
      log.info(""String_Node_Str"" + candidates.size());
    }
    boolean added=false;
    for (    Triple c : candidates) {
      log.info(""String_Node_Str"" + c);
      String candidateURL=c.getSubject();
      String surfaceForm=c.getObject();
      surfaceForm=nlp.Preprocessing(surfaceForm);
      if (candidateURL.startsWith(nodeType)) {
        if (c.getPredicate().equals(""String_Node_Str"")) {
          if (nGramDistance.getDistance(surfaceForm,label) < 1.0) {
            continue;
          }
        }
 else         if (!c.getPredicate().equals(""String_Node_Str"")) {
          if (nGramDistance.getDistance(surfaceForm,label) < threshholdTrigram) {
            continue;
          }
        }
        candidateURL=redirect(candidateURL);
        if (isDisambiguationResource(candidateURL)) {
          log.info(""String_Node_Str"" + candidateURL);
          continue;
        }
        if (commonEntities == true) {
          addNodeToGraph(graph,nodes,entity,c,candidateURL);
          added=true;
          countFinalCandidates++;
        }
 else {
          if (domainWhiteLister.fitsIntoDomain(candidateURL)) {
            addNodeToGraph(graph,nodes,entity,c,candidateURL);
            added=true;
            countFinalCandidates++;
          }
        }
      }
    }
    if (!added && !searchInSurfaceForms && context == true) {
      log.info(""String_Node_Str"");
      candidatesContext=searchCandidatesByContext(entities,label);
      log.info(""String_Node_Str"" + candidatesContext.size());
      if (candidatesContext != null) {
        for (        Triple triple : candidatesContext) {
          String url=nodeType + triple.getPredicate();
          candidatesContextbyLabel.addAll(searchCandidatesByUrl(url,searchInSurfaceForms));
        }
      }
      for (      Triple c : candidatesContextbyLabel) {
        log.debug(""String_Node_Str"" + c);
        String candidateURL=c.getSubject();
        String cleanCandidateURL=candidateURL.replace(nodeType,""String_Node_Str"");
        cleanCandidateURL=nlp.Preprocessing(cleanCandidateURL);
        if (candidateURL.startsWith(nodeType)) {
          if (nGramDistance.getDistance(cleanCandidateURL,label) < 0.3) {
            continue;
          }
          for (          Triple temp : candidatesContext) {
            String candidateTemp=nodeType + temp.getPredicate();
            linkedsbyContext.addAll(searchbyConnections(candidateURL,candidateTemp));
          }
          if (linkedsbyContext.size() < 1) {
            continue;
          }
          candidateURL=redirect(candidateURL);
          if (isDisambiguationResource(candidateURL)) {
            continue;
          }
          if (commonEntities == true) {
            addNodeToGraph(graph,nodes,entity,c,candidateURL);
            added=true;
            countFinalCandidates++;
          }
 else {
            if (domainWhiteLister.fitsIntoDomain(candidateURL)) {
              addNodeToGraph(graph,nodes,entity,c,candidateURL);
              added=true;
              countFinalCandidates++;
            }
          }
        }
        linkedsbyContext.clear();
      }
    }
    if (!added && !searchInSurfaceForms) {
      log.info(""String_Node_Str"");
      checkLabelCandidates(graph,threshholdTrigram,nodes,entity,label,true,entities);
    }
  }
  log.info(""String_Node_Str"" + countFinalCandidates);
}",0.9236576534935677
161837,"public void addNodeToGraph(DirectedSparseGraph<Node,String> graph,HashMap<String,Node> nodes,NamedEntityInText entity,Triple c,String candidateURL) throws IOException {
  Node currentNode=new Node(candidateURL,0,0);
  log.debug(""String_Node_Str"" + candidateURL);
  if (!graph.addVertex(currentNode)) {
    int st=entity.getStartPos();
    if (nodes.get(candidateURL) != null) {
      nodes.get(candidateURL).addId(st);
    }
 else {
      log.error(""String_Node_Str"" + candidateURL);
    }
  }
 else {
    currentNode.addId(entity.getStartPos());
    nodes.put(candidateURL,currentNode);
  }
}","public void addNodeToGraph(DirectedSparseGraph<Node,String> graph,HashMap<String,Node> nodes,NamedEntityInText entity,Triple c,String candidateURL) throws IOException {
  Node currentNode=new Node(candidateURL,0,0,algorithm);
  log.debug(""String_Node_Str"" + candidateURL);
  if (!graph.addVertex(currentNode)) {
    int st=entity.getStartPos();
    if (nodes.get(candidateURL) != null) {
      nodes.get(candidateURL).addId(st);
    }
 else {
      log.error(""String_Node_Str"" + candidateURL);
    }
  }
 else {
    currentNode.addId(entity.getStartPos());
    nodes.put(candidateURL,currentNode);
  }
}",0.991638795986622
161838,"public CandidateUtil() throws IOException {
  Properties prop=new Properties();
  InputStream input=CandidateUtil.class.getResourceAsStream(""String_Node_Str"");
  prop.load(input);
  this.nodeType=prop.getProperty(""String_Node_Str"");
  this.nGramDistance=new NGramDistance(Integer.valueOf(prop.getProperty(""String_Node_Str"")));
  this.index=new TripleIndex();
  this.context=Boolean.valueOf(prop.getProperty(""String_Node_Str""));
  if (context == true) {
    this.index2=new TripleIndexContext();
  }
  this.corporationAffixCleaner=new CorporationAffixCleaner();
  this.domainWhiteLister=new DomainWhiteLister(index);
  this.popularity=Boolean.valueOf(prop.getProperty(""String_Node_Str""));
  this.acronym=Boolean.valueOf(prop.getProperty(""String_Node_Str""));
  this.commonEntities=Boolean.valueOf(prop.getProperty(""String_Node_Str""));
}","public CandidateUtil() throws IOException {
  Properties prop=new Properties();
  InputStream input=CandidateUtil.class.getResourceAsStream(""String_Node_Str"");
  prop.load(input);
  this.nodeType=prop.getProperty(""String_Node_Str"");
  this.nGramDistance=new NGramDistance(Integer.valueOf(prop.getProperty(""String_Node_Str"")));
  this.index=new TripleIndex();
  this.context=Boolean.valueOf(prop.getProperty(""String_Node_Str""));
  if (context == true) {
    this.index2=new TripleIndexContext();
  }
  this.corporationAffixCleaner=new CorporationAffixCleaner();
  this.domainWhiteLister=new DomainWhiteLister(index);
  this.popularity=Boolean.valueOf(prop.getProperty(""String_Node_Str""));
  this.acronym=Boolean.valueOf(prop.getProperty(""String_Node_Str""));
  this.commonEntities=Boolean.valueOf(prop.getProperty(""String_Node_Str""));
  this.algorithm=prop.getProperty(""String_Node_Str"");
}",0.9686411149825784
161839,"public void run(Document document,Map<NamedEntityInText,List<CandidatesScore>> candidatesPerNE){
  try {
    NamedEntitiesInText namedEntities=document.getNamedEntitiesInText();
    DirectedSparseGraph<Node,String> graph=new DirectedSparseGraph<Node,String>();
    log.debug(""String_Node_Str"");
    cu.insertCandidatesIntoText(graph,document,threshholdTrigram,heuristicExpansionOn);
    log.info(""String_Node_Str"" + graph.getVertexCount());
    BreadthFirstSearch bfs=new BreadthFirstSearch(index);
    bfs.run(maxDepth,graph,edgeType,nodeType);
    log.info(""String_Node_Str"" + graph.getVertexCount());
    if (algorithm.equals(""String_Node_Str"")) {
      log.info(""String_Node_Str"");
      HITS h=new HITS();
      h.runHits(graph,20);
    }
 else     if (algorithm.equals(""String_Node_Str"")) {
      log.info(""String_Node_Str"");
      PageRank pr=new PageRank();
      pr.runPr(graph,50,0.1);
    }
    log.debug(""String_Node_Str"");
    ArrayList<Node> orderedList=new ArrayList<Node>();
    orderedList.addAll(graph.getVertices());
    Collections.sort(orderedList);
    for (    NamedEntityInText entity : namedEntities) {
      for (int i=0; i < orderedList.size(); i++) {
        Node m=orderedList.get(i);
        if (m.containsId(entity.getStartPos())) {
          entity.setNamedEntity(m.getCandidateURI());
          break;
        }
      }
    }
    if (candidatesPerNE != null) {
      List<CandidatesScore> listCandidates=new ArrayList<>();
      for (      NamedEntityInText entity : namedEntities) {
        for (int i=0; i < orderedList.size(); i++) {
          Node m=orderedList.get(i);
          if (m.containsId(entity.getStartPos())) {
            CandidatesScore candidates=new CandidatesScore();
            candidates.setStart(entity.getStartPos());
            candidates.setUri(m.getCandidateURI());
            candidates.setScore(m.getAuthorityWeight());
            listCandidates.add(candidates);
          }
        }
        candidatesPerNE.put(entity,listCandidates);
      }
    }
  }
 catch (  Exception e) {
    log.error(""String_Node_Str"",e);
  }
}","public void run(Document document,Map<NamedEntityInText,List<CandidatesScore>> candidatesPerNE){
  try {
    NamedEntitiesInText namedEntities=document.getNamedEntitiesInText();
    DirectedSparseGraph<Node,String> graph=new DirectedSparseGraph<Node,String>();
    log.debug(""String_Node_Str"");
    cu.insertCandidatesIntoText(graph,document,threshholdTrigram,heuristicExpansionOn);
    log.info(""String_Node_Str"" + graph.getVertexCount());
    BreadthFirstSearch bfs=new BreadthFirstSearch(index,algorithm);
    bfs.run(maxDepth,graph,edgeType,nodeType);
    log.info(""String_Node_Str"" + graph.getVertexCount());
    if (algorithm.equals(""String_Node_Str"")) {
      log.info(""String_Node_Str"");
      HITS h=new HITS();
      h.runHits(graph,20);
    }
 else     if (algorithm.equals(""String_Node_Str"")) {
      log.info(""String_Node_Str"");
      PageRank pr=new PageRank();
      pr.runPr(graph,50,0.1);
    }
    log.debug(""String_Node_Str"");
    ArrayList<Node> orderedList=new ArrayList<Node>();
    orderedList.addAll(graph.getVertices());
    Collections.sort(orderedList);
    for (    NamedEntityInText entity : namedEntities) {
      for (int i=0; i < orderedList.size(); i++) {
        Node m=orderedList.get(i);
        if (m.containsId(entity.getStartPos())) {
          entity.setNamedEntity(m.getCandidateURI());
          break;
        }
      }
    }
    if (candidatesPerNE != null) {
      List<CandidatesScore> listCandidates=new ArrayList<>();
      for (      NamedEntityInText entity : namedEntities) {
        for (int i=0; i < orderedList.size(); i++) {
          Node m=orderedList.get(i);
          if (m.containsId(entity.getStartPos())) {
            CandidatesScore candidates=new CandidatesScore();
            candidates.setStart(entity.getStartPos());
            candidates.setUri(m.getCandidateURI());
            candidates.setScore(m.getAuthorityWeight());
            listCandidates.add(candidates);
          }
        }
        candidatesPerNE.put(entity,listCandidates);
      }
    }
  }
 catch (  Exception e) {
    log.error(""String_Node_Str"",e);
  }
}",0.9976099426386232
161840,"public BreadthFirstSearch(TripleIndex index){
  this.index=index;
}","public BreadthFirstSearch(TripleIndex index,String algo){
  this.index=index;
  this.algo=algo;
}",0.8170731707317073
161841,"public void run(int maxDepth,DirectedSparseGraph<Node,String> graph,String edgeType,String nodeType) throws UnsupportedEncodingException, IOException {
  Queue<Node> q=new LinkedList<Node>();
  for (  Node node : graph.getVertices()) {
    findNode.put(node.getCandidateURI(),node);
    q.add(node);
  }
  while (!q.isEmpty()) {
    Node currentNode=q.poll();
    int level=currentNode.getLevel();
    if (level < maxDepth) {
      List<Triple> outgoingNodes=null;
      outgoingNodes=index.search(currentNode.getCandidateURI(),null,null);
      if (outgoingNodes == null) {
        continue;
      }
      for (      Triple targetNode : outgoingNodes) {
        if (targetNode.getPredicate() == null && targetNode.getObject() == null) {
          continue;
        }
        if (targetNode.getPredicate().startsWith(edgeType) && targetNode.getObject().startsWith(nodeType)) {
          int levelNow=level + 1;
          Node Node=null;
          if (findNode.containsKey(targetNode)) {
            Node=findNode.get(targetNode);
          }
 else {
            Node=new Node(targetNode.getObject(),0,levelNow);
            findNode.put(targetNode.getObject(),Node);
            q.add(Node);
          }
          graph.addEdge(graph.getEdgeCount() + ""String_Node_Str"" + targetNode.getPredicate(),currentNode,Node);
        }
      }
    }
  }
}","public void run(int maxDepth,DirectedSparseGraph<Node,String> graph,String edgeType,String nodeType) throws UnsupportedEncodingException, IOException {
  Queue<Node> q=new LinkedList<Node>();
  for (  Node node : graph.getVertices()) {
    findNode.put(node.getCandidateURI(),node);
    q.add(node);
  }
  while (!q.isEmpty()) {
    Node currentNode=q.poll();
    int level=currentNode.getLevel();
    if (level < maxDepth) {
      List<Triple> outgoingNodes=null;
      outgoingNodes=index.search(currentNode.getCandidateURI(),null,null);
      if (outgoingNodes == null) {
        continue;
      }
      for (      Triple targetNode : outgoingNodes) {
        if (targetNode.getPredicate() == null && targetNode.getObject() == null) {
          continue;
        }
        if (targetNode.getPredicate().startsWith(edgeType) && targetNode.getObject().startsWith(nodeType)) {
          int levelNow=level + 1;
          Node Node=null;
          if (findNode.containsKey(targetNode)) {
            Node=findNode.get(targetNode);
          }
 else {
            Node=new Node(targetNode.getObject(),0,levelNow,algo);
            findNode.put(targetNode.getObject(),Node);
            q.add(Node);
          }
          graph.addEdge(graph.getEdgeCount() + ""String_Node_Str"" + targetNode.getPredicate(),currentNode,Node);
        }
      }
    }
  }
}",0.9981447124304268
161842,"public Node(String uri,double activation,int level) throws IOException {
  this.candidateURI=uri;
  this.activation=activation;
  this.level=level;
  this.hubWeight=1;
  this.authorityWeight=1;
  ids=new HashSet<Integer>();
  this.successors=new HashSet<Node>();
  this.predecessors=new HashSet<Node>();
  this.pageRank=0;
  Properties prop=new Properties();
  InputStream input=Node.class.getResourceAsStream(""String_Node_Str"");
  prop.load(input);
  this.algorithm=prop.getProperty(""String_Node_Str"");
}","public Node(String uri,double activation,int level,String algo) throws IOException {
  this.candidateURI=uri;
  this.activation=activation;
  this.level=level;
  this.hubWeight=1;
  this.authorityWeight=1;
  ids=new HashSet<Integer>();
  this.successors=new HashSet<Node>();
  this.predecessors=new HashSet<Node>();
  this.pageRank=0;
  this.algo=algo;
}",0.7636786961583236
161843,"@Override public int compareTo(Node m){
  if (algorithm.equals(""String_Node_Str"")) {
    if (m.getAuthorityWeight() == this.getAuthorityWeight()) {
      return 0;
    }
 else     if (m.getAuthorityWeight() > this.getAuthorityWeight()) {
      return 1;
    }
 else {
      return -1;
    }
  }
 else   if (algorithm.equals(""String_Node_Str"")) {
    if (m.getPageRank() == this.getPageRank()) {
      return 0;
    }
 else     if (m.getPageRank() > this.getPageRank()) {
      return 1;
    }
 else {
      return -1;
    }
  }
 else {
    return -1;
  }
}","@Override public int compareTo(Node m){
  if (m.algo.equals(""String_Node_Str"")) {
    if (m.getAuthorityWeight() == this.getAuthorityWeight()) {
      return 0;
    }
 else     if (m.getAuthorityWeight() > this.getAuthorityWeight()) {
      return 1;
    }
 else {
      return -1;
    }
  }
 else   if (m.algo.equals(""String_Node_Str"")) {
    if (m.getPageRank() == this.getPageRank()) {
      return 0;
    }
 else     if (m.getPageRank() > this.getPageRank()) {
      return 1;
    }
 else {
      return -1;
    }
  }
 else {
    return -1;
  }
}",0.972875226039783
161844,"public String candidateType(String text,NEDAlgo_HITS agdistis){
  JSONArray arr=new org.json.simple.JSONArray();
  Document d=textToDocument(text);
  Map<NamedEntityInText,List<CandidatesScore>> candidatesPerNE=new HashMap<>();
  agdistis.run(d,candidatesPerNE);
  for (  NamedEntityInText namedEntity : candidatesPerNE.keySet()) {
    List<CandidatesScore> candidates=candidatesPerNE.get(namedEntity);
    JSONObject obj=new JSONObject();
    obj.put(""String_Node_Str"",namedEntity.getLabel());
    obj.put(""String_Node_Str"",candidates.toString());
    arr.add(obj);
  }
  log.info(""String_Node_Str"" + arr.toString());
  log.info(""String_Node_Str"");
  return arr.toString();
}","@SuppressWarnings(""String_Node_Str"") public String candidateType(String text,NEDAlgo_HITS agdistis){
  JSONArray arr=new org.json.simple.JSONArray();
  Document d=textToDocument(text);
  Map<NamedEntityInText,List<CandidatesScore>> candidatesPerNE=new HashMap<>();
  agdistis.run(d,candidatesPerNE);
  for (  NamedEntityInText namedEntity : candidatesPerNE.keySet()) {
    List<CandidatesScore> candidates=candidatesPerNE.get(namedEntity);
    JSONObject obj=new JSONObject();
    obj.put(""String_Node_Str"",namedEntity.getLabel());
    obj.put(""String_Node_Str"",candidates.toString());
    arr.add(obj);
  }
  log.info(""String_Node_Str"" + arr.toString());
  log.info(""String_Node_Str"");
  return arr.toString();
}",0.9733621310295176
161845,"@Post public String postText(Representation entity) throws IOException, Exception {
  NEDAlgo_HITS agdistis=null;
  log.info(""String_Node_Str"");
  String result=""String_Node_Str"";
  String text=""String_Node_Str"";
  String type=""String_Node_Str"";
  InputStream input=entity.getStream();
  byte[] byteArray=IOUtils.toByteArray(input);
  InputStream input1=new ByteArrayInputStream(byteArray);
  InputStream input2=new ByteArrayInputStream(byteArray);
  try {
    agdistis=new NEDAlgo_HITS();
  }
 catch (  IOException e) {
    log.error(""String_Node_Str"",e);
    System.exit(0);
  }
  String string=IOUtils.toString(input1);
  Form form=new Form(string);
  text=form.getFirstValue(""String_Node_Str"");
  type=form.getFirstValue(""String_Node_Str"");
  log.info(""String_Node_Str"" + text);
  log.info(""String_Node_Str"" + type);
  if (text == null) {
    result=NIFGerbil(input2,agdistis);
    return result;
  }
  if (type == null) {
    type=""String_Node_Str"";
  }
  if (type.equals(""String_Node_Str"")) {
    return standardAG(text,agdistis);
  }
 else   if (type.equals(""String_Node_Str"")) {
    return NIFType(text,agdistis);
  }
 else   if (type.equals(""String_Node_Str"")) {
    return candidateType(text,agdistis);
  }
 else {
    return ""String_Node_Str"";
  }
}","@Post public String postText(Representation entity) throws IOException, Exception {
  NEDAlgo_HITS agdistis=null;
  try {
    agdistis=new NEDAlgo_HITS();
  }
 catch (  IOException e) {
    log.error(""String_Node_Str"",e);
    System.exit(0);
  }
  log.info(""String_Node_Str"");
  String result=""String_Node_Str"";
  String text=""String_Node_Str"";
  String type=""String_Node_Str"";
  InputStream input=entity.getStream();
  byte[] byteArray=IOUtils.toByteArray(input);
  InputStream input1=new ByteArrayInputStream(byteArray);
  InputStream input2=new ByteArrayInputStream(byteArray);
  String string=IOUtils.toString(input1);
  Form form=new Form(string);
  text=form.getFirstValue(""String_Node_Str"");
  type=form.getFirstValue(""String_Node_Str"");
  log.info(""String_Node_Str"" + text);
  log.info(""String_Node_Str"" + type);
  if (text == null) {
    result=NIFGerbil(input2,agdistis);
    return result;
  }
  if (type == null) {
    type=""String_Node_Str"";
  }
  if (type.equals(""String_Node_Str"")) {
    return standardAG(text,agdistis);
  }
 else   if (type.equals(""String_Node_Str"")) {
    return NIFType(text,agdistis);
  }
 else   if (type.equals(""String_Node_Str"")) {
    return candidateType(text,agdistis);
  }
 else {
    return ""String_Node_Str"";
  }
}",0.7238095238095238
161846,"public String standardAG(String text,NEDAlgo_HITS agdistis){
  JSONArray arr=new org.json.simple.JSONArray();
  Document d=textToDocument(text);
  agdistis.run(d,null);
  for (  NamedEntityInText namedEntity : d.getNamedEntitiesInText()) {
    JSONObject obj=new JSONObject();
    obj.put(""String_Node_Str"",namedEntity.getLabel());
    obj.put(""String_Node_Str"",namedEntity.getStartPos());
    obj.put(""String_Node_Str"",namedEntity.getLength());
    obj.put(""String_Node_Str"",namedEntity.getNamedEntityUri());
    arr.add(obj);
  }
  log.info(""String_Node_Str"" + arr.toString());
  log.info(""String_Node_Str"");
  return arr.toString();
}","@SuppressWarnings(""String_Node_Str"") public String standardAG(String text,NEDAlgo_HITS agdistis){
  JSONArray arr=new org.json.simple.JSONArray();
  Document d=textToDocument(text);
  agdistis.run(d,null);
  for (  NamedEntityInText namedEntity : d.getNamedEntitiesInText()) {
    JSONObject obj=new JSONObject();
    obj.put(""String_Node_Str"",namedEntity.getLabel());
    obj.put(""String_Node_Str"",namedEntity.getStartPos());
    obj.put(""String_Node_Str"",namedEntity.getLength());
    obj.put(""String_Node_Str"",namedEntity.getNamedEntityUri());
    arr.add(obj);
  }
  log.info(""String_Node_Str"" + arr.toString());
  log.info(""String_Node_Str"");
  return arr.toString();
}",0.9717772692601068
161847,"@Post public String postText(Representation entity) throws IOException, Exception {
  NEDAlgo_HITS agdistis=null;
  log.info(""String_Node_Str"");
  String result=""String_Node_Str"";
  InputStream input=entity.getStream();
  byte[] byteArray=IOUtils.toByteArray(input);
  InputStream input1=new ByteArrayInputStream(byteArray);
  InputStream input2=new ByteArrayInputStream(byteArray);
  try {
    agdistis=new NEDAlgo_HITS();
  }
 catch (  IOException e) {
    log.error(""String_Node_Str"",e);
    System.exit(0);
  }
  result=NIFGerbil(input1,agdistis);
  if (!(result.equals(""String_Node_Str""))) {
    return result;
  }
 else {
    String string=IOUtils.toString(input2);
    Form form=new Form(string);
    String text=form.getFirstValue(""String_Node_Str"");
    String type=form.getFirstValue(""String_Node_Str"");
    log.info(""String_Node_Str"" + text);
    log.info(""String_Node_Str"" + type);
    if (type == null) {
      type=""String_Node_Str"";
    }
    if (type.equals(""String_Node_Str"")) {
      return standardAG(text,agdistis);
    }
 else     if (type.equals(""String_Node_Str"")) {
      return NIFType(text,agdistis);
    }
 else     if (type.equals(""String_Node_Str"")) {
      return candidateType(text,agdistis);
    }
 else {
      return ""String_Node_Str"";
    }
  }
}","@Post public String postText(Representation entity) throws IOException, Exception {
  NEDAlgo_HITS agdistis=null;
  log.info(""String_Node_Str"");
  String result=""String_Node_Str"";
  String text=""String_Node_Str"";
  String type=""String_Node_Str"";
  InputStream input=entity.getStream();
  byte[] byteArray=IOUtils.toByteArray(input);
  InputStream input1=new ByteArrayInputStream(byteArray);
  InputStream input2=new ByteArrayInputStream(byteArray);
  try {
    agdistis=new NEDAlgo_HITS();
  }
 catch (  IOException e) {
    log.error(""String_Node_Str"",e);
    System.exit(0);
  }
  String string=IOUtils.toString(input1);
  Form form=new Form(string);
  text=form.getFirstValue(""String_Node_Str"");
  type=form.getFirstValue(""String_Node_Str"");
  log.info(""String_Node_Str"" + text);
  log.info(""String_Node_Str"" + type);
  if (text == null) {
    result=NIFGerbil(input2,agdistis);
    return result;
  }
  if (type == null) {
    type=""String_Node_Str"";
  }
  if (type.equals(""String_Node_Str"")) {
    return standardAG(text,agdistis);
  }
 else   if (type.equals(""String_Node_Str"")) {
    return NIFType(text,agdistis);
  }
 else   if (type.equals(""String_Node_Str"")) {
    return candidateType(text,agdistis);
  }
 else {
    return ""String_Node_Str"";
  }
}",0.6469893742621016
161848,"static String createTextWithMentions(String text,List<Span> mentions){
  Collections.sort(mentions,new StartPosBasedComparator());
  StringBuilder textBuilder=new StringBuilder();
  int lastPos=0;
  for (int i=0; i < mentions.size(); i++) {
    Span span=mentions.get(i);
    int begin=span.getStartPosition();
    int end=begin + span.getLength();
    if (begin < lastPos) {
      Span prev=mentions.get(i - 1);
      LOGGER.warn(""String_Node_Str"",text.substring(span.getStartPosition(),span.getStartPosition() + span.getLength()),span.getStartPosition(),text.substring(prev.getStartPosition(),prev.getStartPosition() + prev.getLength()),prev.getStartPosition());
      if (span.getLength() > prev.getLength()) {
        textBuilder.delete(textBuilder.length() - prev.getLength(),textBuilder.length());
        lastPos-=prev.getLength();
      }
 else {
        continue;
      }
    }
    String before=text.substring(lastPos,begin);
    String label=text.substring(begin,end);
    lastPos=end;
    textBuilder.append(before).append(""String_Node_Str"" + label + ""String_Node_Str"");
  }
  String lastSnippet=text.substring(lastPos,text.length());
  textBuilder.append(lastSnippet);
  return textBuilder.toString();
}","public String createTextWithMentions(String text,List<Span> mentions){
  Collections.sort(mentions,new StartPosBasedComparator());
  StringBuilder textBuilder=new StringBuilder();
  int lastPos=0;
  for (int i=0; i < mentions.size(); i++) {
    Span span=mentions.get(i);
    int begin=span.getStartPosition();
    int end=begin + span.getLength();
    if (begin < lastPos) {
      Span prev=mentions.get(i - 1);
      LOGGER.warn(""String_Node_Str"",text.substring(span.getStartPosition(),span.getStartPosition() + span.getLength()),span.getStartPosition(),text.substring(prev.getStartPosition(),prev.getStartPosition() + prev.getLength()),prev.getStartPosition());
      if (span.getLength() > prev.getLength()) {
        textBuilder.delete(textBuilder.length() - prev.getLength(),textBuilder.length());
        lastPos-=prev.getLength();
      }
 else {
        continue;
      }
    }
    String before=text.substring(lastPos,begin);
    String label=text.substring(begin,end);
    lastPos=end;
    textBuilder.append(before).append(""String_Node_Str"" + label + ""String_Node_Str"");
  }
  String lastSnippet=text.substring(lastPos,text.length());
  textBuilder.append(lastSnippet);
  return textBuilder.toString();
}",0.9967105263157896
161849,"@SuppressWarnings(""String_Node_Str"") @Post public String postText(Representation entity) throws IOException, Exception {
  log.info(""String_Node_Str"");
  Form form=new Form(entity);
  String text=form.getFirstValue(""String_Node_Str"");
  String type=form.getFirstValue(""String_Node_Str"");
  if (text == null && type == null) {
    NIFParser nifParser=new NIFParser();
    org.aksw.gerbil.transfer.nif.Document document;
    try {
      document=parser.getDocumentFromNIFString(form.toString().replace(""String_Node_Str"",""String_Node_Str"").replace(""String_Node_Str"",""String_Node_Str""));
    }
 catch (    Exception e) {
      log.error(""String_Node_Str"",e);
      return ""String_Node_Str"";
    }
    log.debug(""String_Node_Str"" + document.toString());
    document.setMarkings(new ArrayList<Marking>(nifParser.convertNIF(document)));
    log.debug(""String_Node_Str"" + document.toString());
    String nifDocument=creator.getDocumentAsNIFString(document);
    log.debug(nifDocument);
    return nifDocument;
  }
  log.info(""String_Node_Str"" + text);
  log.info(""String_Node_Str"" + type);
  evaluationOptionalParameters(form);
  JSONArray arr=new org.json.simple.JSONArray();
  HashMap<NamedEntityInText,String> results=null;
  HashMap<NamedEntityInText,ArrayList<CandidatesScore>> resultsScore=null;
  if (type.equals(""String_Node_Str"") || type == null) {
    Document d=textToDocument(text);
    results=results(d,agdistis,type);
    for (    NamedEntityInText namedEntity : results.keySet()) {
      String disambiguatedURL=results.get(namedEntity);
      JSONObject obj=new JSONObject();
      obj.put(""String_Node_Str"",namedEntity.getLabel());
      obj.put(""String_Node_Str"",namedEntity.getStartPos());
      obj.put(""String_Node_Str"",namedEntity.getLength());
      obj.put(""String_Node_Str"",disambiguatedURL);
      arr.add(obj);
    }
    log.info(""String_Node_Str"" + arr.toString());
    log.info(""String_Node_Str"");
    return arr.toString();
  }
 else   if (type.equals(""String_Node_Str"")) {
    NIFParser nifParser=new NIFParser();
    org.aksw.gerbil.transfer.nif.Document document;
    try {
      document=parser.getDocumentFromNIFString(text);
    }
 catch (    Exception e) {
      log.error(""String_Node_Str"",e);
      return ""String_Node_Str"";
    }
    log.debug(""String_Node_Str"" + document.toString());
    document.setMarkings(new ArrayList<Marking>(nifParser.convertNIF(document)));
    log.debug(""String_Node_Str"" + document.toString());
    String nifDocument=creator.getDocumentAsNIFString(document);
    return nifDocument;
  }
 else   if (type.equals(""String_Node_Str"")) {
    Document d=textToDocument(text);
    resultsScore=resultsCandidates(d,agdistis,type);
    for (    NamedEntityInText namedEntity : resultsScore.keySet()) {
      ArrayList<CandidatesScore> candidates=resultsScore.get(namedEntity);
      JSONObject obj=new JSONObject();
      obj.put(""String_Node_Str"",namedEntity.getLabel());
      obj.put(""String_Node_Str"",candidates.toString());
      arr.add(obj);
    }
    log.info(""String_Node_Str"" + arr.toString());
    log.info(""String_Node_Str"");
    return arr.toString();
  }
 else {
    return ""String_Node_Str"";
  }
}","@SuppressWarnings(""String_Node_Str"") @Post public String postText(Representation entity) throws IOException, Exception {
  log.info(""String_Node_Str"");
  Form form=new Form(entity);
  String text=form.getFirstValue(""String_Node_Str"");
  String type=form.getFirstValue(""String_Node_Str"");
  if (text == null && type == null) {
    NIFParser nifParser=new NIFParser();
    org.aksw.gerbil.transfer.nif.Document document;
    try {
      document=parser.getDocumentFromNIFString(form.toString().replace(""String_Node_Str"",""String_Node_Str"").replace(""String_Node_Str"",""String_Node_Str""));
    }
 catch (    Exception e) {
      log.error(""String_Node_Str"",e);
      return ""String_Node_Str"";
    }
    log.debug(""String_Node_Str"" + document.toString());
    document.setMarkings(new ArrayList<Marking>(nifParser.convertNIF(document)));
    log.debug(""String_Node_Str"" + document.toString());
    String nifDocument=creator.getDocumentAsNIFString(document);
    log.debug(nifDocument);
    return nifDocument;
  }
  log.info(""String_Node_Str"" + text);
  log.info(""String_Node_Str"" + type);
  if (type == null) {
    type=""String_Node_Str"";
  }
  evaluationOptionalParameters(form);
  JSONArray arr=new org.json.simple.JSONArray();
  HashMap<NamedEntityInText,String> results=null;
  HashMap<NamedEntityInText,ArrayList<CandidatesScore>> resultsScore=null;
  if (type.equals(""String_Node_Str"")) {
    Document d=textToDocument(text);
    results=results(d,agdistis,type);
    for (    NamedEntityInText namedEntity : results.keySet()) {
      String disambiguatedURL=results.get(namedEntity);
      JSONObject obj=new JSONObject();
      obj.put(""String_Node_Str"",namedEntity.getLabel());
      obj.put(""String_Node_Str"",namedEntity.getStartPos());
      obj.put(""String_Node_Str"",namedEntity.getLength());
      obj.put(""String_Node_Str"",disambiguatedURL);
      arr.add(obj);
    }
    log.info(""String_Node_Str"" + arr.toString());
    log.info(""String_Node_Str"");
    return arr.toString();
  }
 else   if (type.equals(""String_Node_Str"")) {
    NIFParser nifParser=new NIFParser();
    org.aksw.gerbil.transfer.nif.Document document;
    try {
      document=parser.getDocumentFromNIFString(text);
    }
 catch (    Exception e) {
      log.error(""String_Node_Str"",e);
      return ""String_Node_Str"";
    }
    log.debug(""String_Node_Str"" + document.toString());
    document.setMarkings(new ArrayList<Marking>(nifParser.convertNIF(document)));
    log.debug(""String_Node_Str"" + document.toString());
    String nifDocument=creator.getDocumentAsNIFString(document);
    return nifDocument;
  }
 else   if (type.equals(""String_Node_Str"")) {
    Document d=textToDocument(text);
    resultsScore=resultsCandidates(d,agdistis,type);
    for (    NamedEntityInText namedEntity : resultsScore.keySet()) {
      ArrayList<CandidatesScore> candidates=resultsScore.get(namedEntity);
      JSONObject obj=new JSONObject();
      obj.put(""String_Node_Str"",namedEntity.getLabel());
      obj.put(""String_Node_Str"",candidates.toString());
      arr.add(obj);
    }
    log.info(""String_Node_Str"" + arr.toString());
    log.info(""String_Node_Str"");
    return arr.toString();
  }
 else {
    return ""String_Node_Str"";
  }
}",0.9890178851584562
161850,"public void run(Document document,String type){
  try {
    NamedEntitiesInText namedEntities=document.getNamedEntitiesInText();
    algorithmicResult=new HashMap<Integer,String>();
    DirectedSparseGraph<Node,String> graph=new DirectedSparseGraph<Node,String>();
    log.debug(""String_Node_Str"");
    cu.insertCandidatesIntoText(graph,document,threshholdTrigram,heuristicExpansionOn);
    log.info(""String_Node_Str"" + graph.getVertexCount());
    BreadthFirstSearch bfs=new BreadthFirstSearch(index);
    bfs.run(maxDepth,graph,edgeType,nodeType);
    log.info(""String_Node_Str"" + graph.getVertexCount());
    log.debug(""String_Node_Str"");
    HITS h=new HITS();
    h.runHits(graph,20);
    log.debug(""String_Node_Str"");
    ArrayList<Node> orderedList=new ArrayList<Node>();
    orderedList.addAll(graph.getVertices());
    Collections.sort(orderedList);
    for (    NamedEntityInText entity : namedEntities) {
      for (int i=0; i < orderedList.size(); i++) {
        Node m=orderedList.get(i);
        if (m.containsId(entity.getStartPos())) {
          if (!algorithmicResult.containsKey(entity.getStartPos())) {
            algorithmicResult.put(entity.getStartPos(),m.getCandidateURI());
            break;
          }
        }
      }
    }
    if (type.equals(""String_Node_Str"")) {
      for (      NamedEntityInText entity : namedEntities) {
        for (int i=0; i < orderedList.size(); i++) {
          Node m=orderedList.get(i);
          if (m.containsId(entity.getStartPos())) {
            CandidatesScore candidates=new CandidatesScore();
            candidates.setStart(entity.getStartPos());
            candidates.setUri(m.getCandidateURI());
            candidates.setScore(m.getAuthorityWeight());
            ListCandidates.add(candidates);
          }
        }
      }
    }
  }
 catch (  Exception e) {
    log.error(""String_Node_Str"",e);
  }
}","public void run(Document document,Map<NamedEntityInText,List<CandidatesScore>> candidatesPerNE){
  try {
    NamedEntitiesInText namedEntities=document.getNamedEntitiesInText();
    DirectedSparseGraph<Node,String> graph=new DirectedSparseGraph<Node,String>();
    log.debug(""String_Node_Str"");
    cu.insertCandidatesIntoText(graph,document,threshholdTrigram,heuristicExpansionOn);
    log.info(""String_Node_Str"" + graph.getVertexCount());
    BreadthFirstSearch bfs=new BreadthFirstSearch(index);
    bfs.run(maxDepth,graph,edgeType,nodeType);
    log.info(""String_Node_Str"" + graph.getVertexCount());
    log.debug(""String_Node_Str"");
    HITS h=new HITS();
    h.runHits(graph,20);
    PageRank pr=new PageRank();
    pr.runPr(graph,100,0.001);
    log.debug(""String_Node_Str"");
    ArrayList<Node> orderedList=new ArrayList<Node>();
    orderedList.addAll(graph.getVertices());
    Collections.sort(orderedList);
    for (    NamedEntityInText entity : namedEntities) {
      for (int i=0; i < orderedList.size(); i++) {
        Node m=orderedList.get(i);
        if (m.containsId(entity.getStartPos())) {
          entity.setNamedEntity(m.getCandidateURI());
          break;
        }
      }
    }
    if (candidatesPerNE != null) {
      List<CandidatesScore> listCandidates=new ArrayList<>();
      for (      NamedEntityInText entity : namedEntities) {
        for (int i=0; i < orderedList.size(); i++) {
          Node m=orderedList.get(i);
          if (m.containsId(entity.getStartPos())) {
            CandidatesScore candidates=new CandidatesScore();
            candidates.setStart(entity.getStartPos());
            candidates.setUri(m.getCandidateURI());
            candidates.setScore(m.getAuthorityWeight());
            listCandidates.add(candidates);
          }
        }
        candidatesPerNE.put(entity,listCandidates);
      }
    }
  }
 catch (  Exception e) {
    log.error(""String_Node_Str"",e);
  }
}",0.8700446311367813
161851,"public void setNamedEntity(String namedEntityUri){
  this.namedEntityUri=namedEntityUri;
  this.label=extractLabel(namedEntityUri);
}","public void setNamedEntity(String namedEntityUri){
  this.namedEntityUri=namedEntityUri;
}",0.8071748878923767
161852,"public String candidateType(String text,NEDAlgo_HITS agdistis,String type){
  JSONArray arr=new org.json.simple.JSONArray();
  HashMap<NamedEntityInText,ArrayList<CandidatesScore>> resultsScore=new HashMap<NamedEntityInText,ArrayList<CandidatesScore>>();
  Document d=textToDocument(text);
  resultsScore=resultsCandidates(d,agdistis,type);
  for (  NamedEntityInText namedEntity : resultsScore.keySet()) {
    ArrayList<CandidatesScore> candidates=resultsScore.get(namedEntity);
    JSONObject obj=new JSONObject();
    obj.put(""String_Node_Str"",namedEntity.getLabel());
    obj.put(""String_Node_Str"",candidates.toString());
    arr.add(obj);
  }
  log.info(""String_Node_Str"" + arr.toString());
  log.info(""String_Node_Str"");
  return arr.toString();
}","public String candidateType(String text,NEDAlgo_HITS agdistis){
  JSONArray arr=new org.json.simple.JSONArray();
  Document d=textToDocument(text);
  Map<NamedEntityInText,List<CandidatesScore>> candidatesPerNE=new HashMap<>();
  agdistis.run(d,candidatesPerNE);
  for (  NamedEntityInText namedEntity : candidatesPerNE.keySet()) {
    List<CandidatesScore> candidates=candidatesPerNE.get(namedEntity);
    JSONObject obj=new JSONObject();
    obj.put(""String_Node_Str"",namedEntity.getLabel());
    obj.put(""String_Node_Str"",candidates.toString());
    arr.add(obj);
  }
  log.info(""String_Node_Str"" + arr.toString());
  log.info(""String_Node_Str"");
  return arr.toString();
}",0.635409377186844
161853,"@SuppressWarnings(""String_Node_Str"") @Post public String postText(Representation entity) throws IOException, Exception {
  NEDAlgo_HITS agdistis=null;
  log.info(""String_Node_Str"");
  String result=""String_Node_Str"";
  InputStream input=entity.getStream();
  byte[] byteArray=IOUtils.toByteArray(input);
  InputStream input1=new ByteArrayInputStream(byteArray);
  InputStream input2=new ByteArrayInputStream(byteArray);
  try {
    agdistis=new NEDAlgo_HITS();
  }
 catch (  IOException e) {
    log.error(""String_Node_Str"",e);
    System.exit(0);
  }
  result=NIFGerbil(input1,agdistis);
  if (!(result.equals(""String_Node_Str""))) {
    return result;
  }
 else {
    String string=IOUtils.toString(input2);
    Form form=new Form(string);
    String text=form.getFirstValue(""String_Node_Str"");
    String type=form.getFirstValue(""String_Node_Str"");
    log.info(""String_Node_Str"" + text);
    log.info(""String_Node_Str"" + type);
    evaluationOptionalParameters(form,agdistis);
    if (type == null) {
      type=""String_Node_Str"";
    }
    if (type.equals(""String_Node_Str"")) {
      return standardAG(text,agdistis,type);
    }
 else     if (type.equals(""String_Node_Str"")) {
      return NIFType(text,agdistis);
    }
 else     if (type.equals(""String_Node_Str"")) {
      return candidateType(text,agdistis,type);
    }
 else {
      return ""String_Node_Str"";
    }
  }
}","@SuppressWarnings(""String_Node_Str"") @Post public String postText(Representation entity) throws IOException, Exception {
  NEDAlgo_HITS agdistis=null;
  log.info(""String_Node_Str"");
  String result=""String_Node_Str"";
  InputStream input=entity.getStream();
  byte[] byteArray=IOUtils.toByteArray(input);
  InputStream input1=new ByteArrayInputStream(byteArray);
  InputStream input2=new ByteArrayInputStream(byteArray);
  try {
    agdistis=new NEDAlgo_HITS();
  }
 catch (  IOException e) {
    log.error(""String_Node_Str"",e);
    System.exit(0);
  }
  result=NIFGerbil(input1,agdistis);
  if (!(result.equals(""String_Node_Str""))) {
    return result;
  }
 else {
    String string=IOUtils.toString(input2);
    Form form=new Form(string);
    String text=form.getFirstValue(""String_Node_Str"");
    String type=form.getFirstValue(""String_Node_Str"");
    log.info(""String_Node_Str"" + text);
    log.info(""String_Node_Str"" + type);
    evaluationOptionalParameters(form,agdistis);
    if (type == null) {
      type=""String_Node_Str"";
    }
    if (type.equals(""String_Node_Str"")) {
      return standardAG(text,agdistis);
    }
 else     if (type.equals(""String_Node_Str"")) {
      return NIFType(text,agdistis);
    }
 else     if (type.equals(""String_Node_Str"")) {
      return candidateType(text,agdistis);
    }
 else {
      return ""String_Node_Str"";
    }
  }
}",0.9963556851311952
161854,"public String standardAG(String text,NEDAlgo_HITS agdistis,String type){
  HashMap<NamedEntityInText,String> results=new HashMap<NamedEntityInText,String>();
  JSONArray arr=new org.json.simple.JSONArray();
  Document d=textToDocument(text);
  results=results(d,agdistis,type);
  for (  NamedEntityInText namedEntity : results.keySet()) {
    String disambiguatedURL=results.get(namedEntity);
    JSONObject obj=new JSONObject();
    obj.put(""String_Node_Str"",namedEntity.getLabel());
    obj.put(""String_Node_Str"",namedEntity.getStartPos());
    obj.put(""String_Node_Str"",namedEntity.getLength());
    obj.put(""String_Node_Str"",disambiguatedURL);
    arr.add(obj);
  }
  log.info(""String_Node_Str"" + arr.toString());
  log.info(""String_Node_Str"");
  return arr.toString();
}","public String standardAG(String text,NEDAlgo_HITS agdistis){
  JSONArray arr=new org.json.simple.JSONArray();
  Document d=textToDocument(text);
  agdistis.run(d,null);
  for (  NamedEntityInText namedEntity : d.getNamedEntitiesInText()) {
    JSONObject obj=new JSONObject();
    obj.put(""String_Node_Str"",namedEntity.getLabel());
    obj.put(""String_Node_Str"",namedEntity.getStartPos());
    obj.put(""String_Node_Str"",namedEntity.getLength());
    obj.put(""String_Node_Str"",namedEntity.getNamedEntityUri());
    arr.add(obj);
  }
  log.info(""String_Node_Str"" + arr.toString());
  log.info(""String_Node_Str"");
  return arr.toString();
}",0.093484419263456
161855,"public String NIFGerbil(InputStream input,NEDAlgo_HITS agdistis) throws IOException {
  org.aksw.gerbil.transfer.nif.Document document;
  String nifDocument=""String_Node_Str"";
  String textWithMentions=""String_Node_Str"";
  List<MeaningSpan> annotations=new ArrayList<>();
  HashMap<NamedEntityInText,String> results=new HashMap<NamedEntityInText,String>();
  try {
    document=parser.getDocumentFromNIFStream(input);
    log.info(""String_Node_Str"");
    textWithMentions=nifParser.createTextWithMentions(document.getText(),document.getMarkings(Span.class));
    Document d=textToDocument(textWithMentions);
    results=results(d,agdistis,""String_Node_Str"");
    for (    NamedEntityInText namedEntity : results.keySet()) {
      String disambiguatedURL=results.get(namedEntity);
      if (disambiguatedURL == null) {
        annotations.add(new NamedEntity((int)namedEntity.getStartPos(),(int)namedEntity.getLength(),new HashSet<String>()));
      }
 else {
        annotations.add(new NamedEntity((int)namedEntity.getStartPos(),(int)namedEntity.getLength(),URLDecoder.decode(disambiguatedURL,""String_Node_Str"")));
      }
    }
    document.setMarkings(new ArrayList<Marking>(annotations));
    log.debug(""String_Node_Str"" + document.toString());
    nifDocument=creator.getDocumentAsNIFString(document);
    log.debug(nifDocument);
  }
 catch (  Exception e) {
    log.error(""String_Node_Str"",e);
    return ""String_Node_Str"";
  }
  return nifDocument;
}","public String NIFGerbil(InputStream input,NEDAlgo_HITS agdistis) throws IOException {
  org.aksw.gerbil.transfer.nif.Document document;
  String nifDocument=""String_Node_Str"";
  String textWithMentions=""String_Node_Str"";
  List<MeaningSpan> annotations=new ArrayList<>();
  try {
    document=parser.getDocumentFromNIFStream(input);
    log.info(""String_Node_Str"");
    textWithMentions=nifParser.createTextWithMentions(document.getText(),document.getMarkings(Span.class));
    Document d=textToDocument(textWithMentions);
    agdistis.run(d,null);
    for (    NamedEntityInText namedEntity : d.getNamedEntitiesInText()) {
      String disambiguatedURL=namedEntity.getNamedEntityUri();
      if (disambiguatedURL == null) {
        annotations.add(new NamedEntity((int)namedEntity.getStartPos(),(int)namedEntity.getLength(),new HashSet<String>()));
      }
 else {
        annotations.add(new NamedEntity((int)namedEntity.getStartPos(),(int)namedEntity.getLength(),URLDecoder.decode(namedEntity.getNamedEntityUri(),""String_Node_Str"")));
      }
    }
    document.setMarkings(new ArrayList<Marking>(annotations));
    log.debug(""String_Node_Str"" + document.toString());
    nifDocument=creator.getDocumentAsNIFString(document);
    log.debug(nifDocument);
  }
 catch (  Exception e) {
    log.error(""String_Node_Str"",e);
    return ""String_Node_Str"";
  }
  return nifDocument;
}",0.7179125528913963
161856,"public String NIFType(String text,NEDAlgo_HITS agdistis) throws IOException {
  org.aksw.gerbil.transfer.nif.Document document=null;
  String nifDocument=""String_Node_Str"";
  NIFParser nifParser=new NIFParser();
  String textWithMentions=""String_Node_Str"";
  List<MeaningSpan> annotations=new ArrayList<>();
  HashMap<NamedEntityInText,String> results=new HashMap<NamedEntityInText,String>();
  try {
    document=parser.getDocumentFromNIFString(text);
    log.debug(""String_Node_Str"" + document.toString());
    textWithMentions=nifParser.createTextWithMentions(document.getText(),document.getMarkings(Span.class));
    Document d=textToDocument(textWithMentions);
    results=results(d,agdistis,""String_Node_Str"");
    for (    NamedEntityInText namedEntity : results.keySet()) {
      String disambiguatedURL=results.get(namedEntity);
      if (disambiguatedURL == null) {
        annotations.add(new NamedEntity((int)namedEntity.getStartPos(),(int)namedEntity.getLength(),new HashSet<String>()));
      }
 else {
        annotations.add(new NamedEntity((int)namedEntity.getStartPos(),(int)namedEntity.getLength(),URLDecoder.decode(disambiguatedURL,""String_Node_Str"")));
      }
    }
    document.setMarkings(new ArrayList<Marking>(annotations));
    log.debug(""String_Node_Str"" + document.toString());
    nifDocument=creator.getDocumentAsNIFString(document);
  }
 catch (  Exception e) {
    log.error(""String_Node_Str"",e);
    return ""String_Node_Str"";
  }
  return nifDocument;
}","public String NIFType(String text,NEDAlgo_HITS agdistis) throws IOException {
  org.aksw.gerbil.transfer.nif.Document document=null;
  String nifDocument=""String_Node_Str"";
  NIFParser nifParser=new NIFParser();
  String textWithMentions=""String_Node_Str"";
  List<MeaningSpan> annotations=new ArrayList<>();
  HashMap<NamedEntityInText,String> results=new HashMap<NamedEntityInText,String>();
  try {
    document=parser.getDocumentFromNIFString(text);
    log.debug(""String_Node_Str"" + document.toString());
    textWithMentions=nifParser.createTextWithMentions(document.getText(),document.getMarkings(Span.class));
    Document d=textToDocument(textWithMentions);
    agdistis.run(d,null);
    for (    NamedEntityInText namedEntity : d.getNamedEntitiesInText()) {
      String disambiguatedURL=namedEntity.getNamedEntityUri();
      if (disambiguatedURL == null) {
        annotations.add(new NamedEntity((int)namedEntity.getStartPos(),(int)namedEntity.getLength(),new HashSet<String>()));
      }
 else {
        annotations.add(new NamedEntity((int)namedEntity.getStartPos(),(int)namedEntity.getLength(),URLDecoder.decode(disambiguatedURL,""String_Node_Str"")));
      }
    }
    document.setMarkings(new ArrayList<Marking>(annotations));
    log.debug(""String_Node_Str"" + document.toString());
    nifDocument=creator.getDocumentAsNIFString(document);
  }
 catch (  Exception e) {
    log.error(""String_Node_Str"",e);
    return ""String_Node_Str"";
  }
  return nifDocument;
}",0.9507754551584626
161857,"/** 
 * Creates a root Restlet that will receive all incoming calls.
 */
@Override public Restlet createInboundRoot(){
  Router router=new Router(getContext());
  router.attachDefault(GetDisambiguation.class);
  System.gc();
  return router;
}","/** 
 * Creates a root Restlet that will receive all incoming calls.
 */
@Override public Restlet createInboundRoot(){
  final Router router=new Router(getContext());
  router.attach(""String_Node_Str"",GetDisambiguation.class);
  return router;
}",0.8483606557377049
161858,"private void checkLabelCandidates(DirectedSparseGraph<Node,String> graph,double threshholdTrigram,HashMap<String,Node> nodes,NamedEntityInText entity,String label,boolean searchInSurfaceForms){
  label=corporationAffixCleaner.cleanLabelsfromCorporationIdentifier(label);
  label=label.trim();
  List<Triple> candidates=new ArrayList<Triple>();
  candidates=searchCandidatesByLabel(label,searchInSurfaceForms);
  log.info(""String_Node_Str"" + candidates.size());
  if (candidates.size() == 0) {
    log.info(""String_Node_Str"" + label);
    if (label.endsWith(""String_Node_Str"")) {
      label=label.substring(0,label.lastIndexOf(""String_Node_Str""));
      candidates=searchCandidatesByLabel(label,searchInSurfaceForms);
      log.info(""String_Node_Str"");
    }
 else     if (label.endsWith(""String_Node_Str"")) {
      label=label.substring(0,label.lastIndexOf(""String_Node_Str""));
      candidates=searchCandidatesByLabel(label,searchInSurfaceForms);
      log.info(""String_Node_Str"");
    }
  }
  boolean added=false;
  for (  Triple c : candidates) {
    log.debug(""String_Node_Str"" + c);
    String candidateURL=c.getSubject();
    String surfaceForm=c.getObject();
    if (candidateURL.startsWith(nodeType) && !candidateURL.matches(""String_Node_Str"")) {
      if (nGramDistance.getDistance(surfaceForm,label) < threshholdTrigram) {
        continue;
      }
      if (isDisambiguationResource(candidateURL)) {
        continue;
      }
      candidateURL=redirect(candidateURL);
      if (domainWhiteLister.fitsIntoDomain(candidateURL)) {
        addNodeToGraph(graph,nodes,entity,c,candidateURL);
        added=true;
      }
    }
  }
  if (!added && !searchInSurfaceForms)   checkLabelCandidates(graph,threshholdTrigram,nodes,entity,label,true);
}","private void checkLabelCandidates(DirectedSparseGraph<Node,String> graph,double threshholdTrigram,HashMap<String,Node> nodes,NamedEntityInText entity,String label,boolean searchInSurfaceForms){
  label=corporationAffixCleaner.cleanLabelsfromCorporationIdentifier(label);
  label=label.trim();
  List<Triple> candidates=new ArrayList<Triple>();
  candidates=searchCandidatesByLabel(label,searchInSurfaceForms);
  log.info(""String_Node_Str"" + candidates.size());
  if (candidates.size() == 0) {
    log.info(""String_Node_Str"" + label);
    if (label.endsWith(""String_Node_Str"")) {
      label=label.substring(0,label.lastIndexOf(""String_Node_Str""));
      candidates=searchCandidatesByLabel(label,searchInSurfaceForms);
      log.info(""String_Node_Str"");
    }
 else     if (label.endsWith(""String_Node_Str"")) {
      label=label.substring(0,label.lastIndexOf(""String_Node_Str""));
      candidates=searchCandidatesByLabel(label,searchInSurfaceForms);
      log.info(""String_Node_Str"");
    }
  }
  boolean added=false;
  for (  Triple c : candidates) {
    log.debug(""String_Node_Str"" + c);
    String candidateURL=c.getSubject();
    String surfaceForm=c.getObject();
    if (candidateURL.startsWith(nodeType) && !candidateURL.matches(""String_Node_Str"")) {
      if (nGramDistance.getDistance(surfaceForm.toLowerCase(),label.toLowerCase()) < threshholdTrigram) {
        continue;
      }
      if (isDisambiguationResource(candidateURL)) {
        continue;
      }
      candidateURL=redirect(candidateURL);
      if (domainWhiteLister.fitsIntoDomain(candidateURL)) {
        addNodeToGraph(graph,nodes,entity,c,candidateURL);
        added=true;
      }
    }
  }
  if (!added && !searchInSurfaceForms)   checkLabelCandidates(graph,threshholdTrigram,nodes,entity,label,true);
}",0.9886685552407932
161859,"public static Document textToDocument(String preAnnotatedText){
  Document document=new Document();
  ArrayList<NamedEntityInText> list=new ArrayList<NamedEntityInText>();
  log.info(""String_Node_Str"" + preAnnotatedText);
  int startpos=0, endpos=0;
  StringBuilder sb=new StringBuilder();
  startpos=preAnnotatedText.indexOf(""String_Node_Str"",startpos);
  while (startpos >= 0) {
    sb.append(preAnnotatedText.substring(endpos,startpos));
    startpos+=8;
    endpos=preAnnotatedText.indexOf(""String_Node_Str"",startpos);
    int newStartPos=sb.length();
    String entityLabel=preAnnotatedText.substring(startpos,endpos);
    list.add(new NamedEntityInText(newStartPos,entityLabel.length(),entityLabel));
    sb.append(entityLabel);
    endpos+=9;
    startpos=preAnnotatedText.indexOf(""String_Node_Str"",startpos);
  }
  NamedEntitiesInText nes=new NamedEntitiesInText(list);
  DocumentText text=new DocumentText(preAnnotatedText.replaceAll(""String_Node_Str"",""String_Node_Str"").replaceAll(""String_Node_Str"",""String_Node_Str""));
  document.addTest(text);
  document.addNamedEntitiesInText(nes);
  return document;
}","public static Document textToDocument(String preAnnotatedText){
  Document document=new Document();
  ArrayList<NamedEntityInText> list=new ArrayList<NamedEntityInText>();
  log.info(""String_Node_Str"" + preAnnotatedText);
  int startpos=0, endpos=0;
  StringBuilder sb=new StringBuilder();
  startpos=preAnnotatedText.indexOf(""String_Node_Str"",startpos);
  while (startpos >= 0) {
    sb.append(preAnnotatedText.substring(endpos,startpos));
    startpos+=8;
    endpos=preAnnotatedText.indexOf(""String_Node_Str"",startpos);
    int newStartPos=sb.length();
    String entityLabel=preAnnotatedText.substring(startpos,endpos);
    list.add(new NamedEntityInText(newStartPos,entityLabel.length(),entityLabel));
    sb.append(entityLabel);
    endpos+=9;
    startpos=preAnnotatedText.indexOf(""String_Node_Str"",startpos);
  }
  NamedEntitiesInText nes=new NamedEntitiesInText(list);
  DocumentText text=new DocumentText(preAnnotatedText.replaceAll(""String_Node_Str"",""String_Node_Str"").replaceAll(""String_Node_Str"",""String_Node_Str""));
  document.addText(text);
  document.addNamedEntitiesInText(nes);
  return document;
}",0.9991039426523296
161860,"private boolean checkRdfsLabelCandidates(DirectedSparseGraph<Node,String> graph,double threshholdTrigram,HashMap<String,Node> nodes,NamedEntityInText entity,String label,String knowledgeBase){
  boolean addedCandidates=false;
  label=cleanLabelsfromCorporationIdentifier(label);
  label=label.trim();
  List<Triple> candidates=rdfsLabelIndex.searchInLabels(label,false);
  log.info(""String_Node_Str"" + candidates.size());
  if (candidates.size() == 0) {
    log.info(""String_Node_Str"" + label);
    if (label.endsWith(""String_Node_Str"")) {
      label=label.substring(0,label.lastIndexOf(""String_Node_Str""));
      candidates=rdfsLabelIndex.searchInLabels(label,false);
      log.info(""String_Node_Str"");
    }
 else     if (label.endsWith(""String_Node_Str"")) {
      label=label.substring(0,label.lastIndexOf(""String_Node_Str""));
      candidates=rdfsLabelIndex.searchInLabels(label,false);
      log.info(""String_Node_Str"");
    }
  }
  for (  Triple c : candidates) {
    String candidateURL=c.getSubject();
    if (candidateURL.startsWith(nodeType) && !candidateURL.matches(""String_Node_Str"")) {
      if (trigramForURLLabel(candidateURL,label,nodeType) < threshholdTrigram) {
        continue;
      }
      if (disambiguates(candidateURL) != candidateURL) {
        continue;
      }
      if (!nodeType.equals(""String_Node_Str"")) {
        candidateURL=redirect(candidateURL);
      }
      if (fitsIntoDomain(candidateURL,knowledgeBase)) {
        addNodeToGraph(graph,nodes,entity,c,candidateURL);
        addedCandidates=true;
      }
    }
  }
  return addedCandidates;
}","private boolean checkRdfsLabelCandidates(DirectedSparseGraph<Node,String> graph,double threshholdTrigram,HashMap<String,Node> nodes,NamedEntityInText entity,String label,String knowledgeBase){
  boolean addedCandidates=false;
  label=cleanLabelsfromCorporationIdentifier(label);
  label=label.trim();
  List<Triple> candidates=rdfsLabelIndex.searchInLabels(label,false);
  log.info(""String_Node_Str"" + candidates.size());
  if (candidates.size() == 0) {
    log.info(""String_Node_Str"" + label);
    if (label.endsWith(""String_Node_Str"")) {
      label=label.substring(0,label.lastIndexOf(""String_Node_Str""));
      candidates=rdfsLabelIndex.searchInLabels(label,false);
      log.info(""String_Node_Str"");
    }
 else     if (label.endsWith(""String_Node_Str"")) {
      label=label.substring(0,label.lastIndexOf(""String_Node_Str""));
      candidates=rdfsLabelIndex.searchInLabels(label,false);
      log.info(""String_Node_Str"");
    }
  }
  for (  Triple c : candidates) {
    String candidateURL=c.getSubject();
    if (candidateURL.startsWith(nodeType) && !candidateURL.matches(""String_Node_Str"")) {
      if (trigramForURLLabel(c,label,nodeType) < threshholdTrigram) {
        continue;
      }
      if (disambiguates(candidateURL) != candidateURL) {
        continue;
      }
      if (!nodeType.equals(""String_Node_Str"")) {
        candidateURL=redirect(candidateURL);
      }
      if (fitsIntoDomain(candidateURL,knowledgeBase)) {
        addNodeToGraph(graph,nodes,entity,c,candidateURL);
        addedCandidates=true;
      }
    }
  }
  return addedCandidates;
}",0.9965112591183
161861,"private double trigramForURLLabel(String candidateURL,String label,String nodeType){
  double sim=0;
  if (!nodeType.equals(""String_Node_Str"")) {
    List<Triple> labelOfCandidate=rdfsLabelIndex.getLabelForURI(candidateURL);
    if (labelOfCandidate.isEmpty()) {
      return 0;
    }
    HashSet<String> union=new HashSet<String>();
    for (    Triple t : labelOfCandidate) {
      HashSet<String> trigramsForLabel=new HashSet<String>();
      for (int i=3; i < label.length(); i++) {
        trigramsForLabel.add(label.substring(i - 3,i).toLowerCase());
      }
      union=new HashSet<String>();
      String replace=t.getObject().replace(nodeType,""String_Node_Str"").toLowerCase();
      replace=replace.replace(""String_Node_Str"",""String_Node_Str"");
      HashSet<String> trigramsForCandidate=new HashSet<String>();
      for (int i=3; i < replace.length(); i++) {
        trigramsForCandidate.add(replace.substring(i - 3,i).toLowerCase());
      }
      union.addAll(trigramsForLabel);
      union.addAll(trigramsForCandidate);
      trigramsForLabel.retainAll(trigramsForCandidate);
      double tmp=(double)trigramsForLabel.size() / ((double)union.size());
      if (sim < tmp)       sim=tmp;
    }
    return sim;
  }
 else {
    HashSet<String> trigramsForLabel=new HashSet<String>();
    for (int i=3; i < label.length(); i++) {
      trigramsForLabel.add(label.substring(i - 3,i).toLowerCase());
    }
    List<Triple> labelOfCandidate=rdfsLabelIndex.getLabelForURI(candidateURL);
    if (labelOfCandidate.isEmpty()) {
      return 0;
    }
    String replace=labelOfCandidate.get(0).getObject().replace(nodeType,""String_Node_Str"").toLowerCase();
    replace=replace.replace(""String_Node_Str"",""String_Node_Str"");
    HashSet<String> trigramsForCandidate=new HashSet<String>();
    for (int i=3; i < replace.length(); i++) {
      trigramsForCandidate.add(replace.substring(i - 3,i).toLowerCase());
    }
    HashSet<String> union=new HashSet<String>();
    union.addAll(trigramsForLabel);
    union.addAll(trigramsForCandidate);
    trigramsForLabel.retainAll(trigramsForCandidate);
    log.debug(""String_Node_Str"" + replace + ""String_Node_Str""+ label+ ""String_Node_Str""+ (double)trigramsForLabel.size() / ((double)union.size()));
    return (double)trigramsForLabel.size() / ((double)union.size());
  }
}","private double trigramForURLLabel(Triple candidateStatement,String label,String nodeType){
  double sim=0;
  if (!nodeType.equals(""String_Node_Str"")) {
    List<Triple> labelOfCandidate=new ArrayList<Triple>();
    labelOfCandidate.add(candidateStatement);
    HashSet<String> union=new HashSet<String>();
    for (    Triple t : labelOfCandidate) {
      HashSet<String> trigramsForLabel=new HashSet<String>();
      for (int i=3; i < label.length(); i++) {
        trigramsForLabel.add(label.substring(i - 3,i).toLowerCase());
      }
      union=new HashSet<String>();
      String replace=t.getObject().replace(nodeType,""String_Node_Str"").toLowerCase();
      replace=replace.replace(""String_Node_Str"",""String_Node_Str"");
      HashSet<String> trigramsForCandidate=new HashSet<String>();
      for (int i=3; i < replace.length(); i++) {
        trigramsForCandidate.add(replace.substring(i - 3,i).toLowerCase());
      }
      union.addAll(trigramsForLabel);
      union.addAll(trigramsForCandidate);
      trigramsForLabel.retainAll(trigramsForCandidate);
      double tmp=(double)trigramsForLabel.size() / ((double)union.size());
      if (sim < tmp)       sim=tmp;
    }
    return sim;
  }
 else {
    return 1;
  }
}",0.6484044055351595
161862,"public List<Triple> getLabelForURI(String subject){
  if (cache.containsKey(subject)) {
    return cache.get(subject);
  }
  parser=new QueryParser(Version.LUCENE_40,FIELD_NAME_URL,analyzer);
  parser.setDefaultOperator(QueryParser.Operator.AND);
  analyzer=new KeywordAnalyzer();
  List<Triple> triples=new ArrayList<Triple>();
  try {
    log.debug(""String_Node_Str"");
    TermQuery tq=new TermQuery(new Term(FIELD_NAME_URL,subject));
    BooleanQuery bq=new BooleanQuery();
    bq.add(tq,BooleanClause.Occur.SHOULD);
    TopScoreDocCollector collector=TopScoreDocCollector.create(numberOfDocsRetrievedFromIndex,true);
    isearcher.search(bq,collector);
    ScoreDoc[] hits=collector.topDocs().scoreDocs;
    for (int i=0; i < hits.length; i++) {
      Document hitDoc=isearcher.doc(hits[i].doc);
      String object=java.net.URLDecoder.decode(hitDoc.get(FIELD_NAME_LABEL),""String_Node_Str"");
      String predicate=""String_Node_Str"";
      triples.add(new Triple(subject,predicate,object));
    }
    log.debug(""String_Node_Str"");
  }
 catch (  Exception e) {
    log.warn(e.getLocalizedMessage() + ""String_Node_Str"" + subject);
  }
  cache.put(subject,triples);
  return triples;
}","public List<Triple> getLabelForURI(String subject){
  if (cache.containsKey(subject)) {
    return cache.get(subject);
  }
  analyzer=new KeywordAnalyzer();
  parser=new QueryParser(Version.LUCENE_40,FIELD_NAME_URL,analyzer);
  parser.setDefaultOperator(QueryParser.Operator.AND);
  List<Triple> triples=new ArrayList<Triple>();
  try {
    log.debug(""String_Node_Str"");
    int lastIndexOf=""String_Node_Str"".length();
    String substring=subject.substring(lastIndexOf);
    subject=""String_Node_Str"" + URLEncoder.encode(substring,""String_Node_Str"");
    System.out.println(subject);
    TermQuery tq=new TermQuery(new Term(FIELD_NAME_URL,subject));
    BooleanQuery bq=new BooleanQuery();
    bq.add(tq,BooleanClause.Occur.SHOULD);
    TopScoreDocCollector collector=TopScoreDocCollector.create(numberOfDocsRetrievedFromIndex,true);
    isearcher.search(bq,collector);
    ScoreDoc[] hits=collector.topDocs().scoreDocs;
    for (int i=0; i < hits.length; i++) {
      Document hitDoc=isearcher.doc(hits[i].doc);
      String object=java.net.URLDecoder.decode(hitDoc.get(FIELD_NAME_LABEL),""String_Node_Str"");
      System.out.println(object);
      String predicate=""String_Node_Str"";
      triples.add(new Triple(subject,predicate,object));
    }
    log.debug(""String_Node_Str"");
  }
 catch (  Exception e) {
    log.warn(e.getLocalizedMessage() + ""String_Node_Str"" + subject);
  }
  cache.put(subject,triples);
  return triples;
}",0.8793893129770992
161863,"public List<Triple> searchInLabels(String object,boolean replaceObject){
  if (cacheSearch.containsKey(object)) {
    return cacheSearch.get(object);
  }
  List<Triple> triples=new ArrayList<Triple>();
  try {
    analyzer=new StandardAnalyzer(Version.LUCENE_40);
    parser=new QueryParser(Version.LUCENE_40,FIELD_NAME_LABEL,analyzer);
    parser.setDefaultOperator(QueryParser.Operator.OR);
    Query query=parser.parse(QueryParser.escape(object));
    ScoreDoc[] hits=isearcher.search(query,numberOfDocsRetrievedFromIndex).scoreDocs;
    for (int i=0; i < hits.length; i++) {
      Document hitDoc=isearcher.doc(hits[i].doc);
      String subject=java.net.URLDecoder.decode(hitDoc.get(FIELD_NAME_URL),""String_Node_Str"");
      String predicate=""String_Node_Str"";
      if (replaceObject)       object=hitDoc.get(FIELD_NAME_LABEL);
      triples.add(new Triple(subject,predicate,object));
    }
  }
 catch (  Exception e) {
    log.error(e.getLocalizedMessage() + ""String_Node_Str"" + object);
  }
  cache.put(object,triples);
  return triples;
}","public List<Triple> searchInLabels(String object,boolean replaceObject){
  if (cacheSearch.containsKey(object)) {
    return cacheSearch.get(object);
  }
  List<Triple> triples=new ArrayList<Triple>();
  try {
    analyzer=new StandardAnalyzer(Version.LUCENE_40);
    parser=new QueryParser(Version.LUCENE_40,FIELD_NAME_LABEL,analyzer);
    parser.setDefaultOperator(QueryParser.Operator.OR);
    Query query=parser.parse(QueryParser.escape(object));
    ScoreDoc[] hits=isearcher.search(query,numberOfDocsRetrievedFromIndex).scoreDocs;
    for (int i=0; i < hits.length; i++) {
      Document hitDoc=isearcher.doc(hits[i].doc);
      String subject=java.net.URLDecoder.decode(hitDoc.get(FIELD_NAME_URL),""String_Node_Str"");
      String predicate=""String_Node_Str"";
      String o=hitDoc.get(FIELD_NAME_LABEL);
      if (replaceObject)       object=hitDoc.get(FIELD_NAME_LABEL);
      triples.add(new Triple(subject,predicate,o));
    }
  }
 catch (  Exception e) {
    log.error(e.getLocalizedMessage() + ""String_Node_Str"" + object);
  }
  cache.put(object,triples);
  return triples;
}",0.9475164011246484
161864,"public HashMap<NamedEntityInText,String> runDisambiguation(String preAnnotatedText) throws IOException {
  double threshholdTrigram=0.825;
  int maxDepth=2;
  Document document=new Document();
  ArrayList<NamedEntityInText> list=new ArrayList<NamedEntityInText>();
  log.info(""String_Node_Str"" + preAnnotatedText);
  for (int c=0; c < preAnnotatedText.length(); c++) {
    if (preAnnotatedText.length() > c + 8) {
      if (preAnnotatedText.substring(c,c + 8).equals(""String_Node_Str"")) {
        c+=8;
        int beginIndex=c;
        int endIndex=preAnnotatedText.indexOf(""String_Node_Str"",c);
        String label=preAnnotatedText.substring(beginIndex,endIndex);
        log.info(""String_Node_Str"" + beginIndex + ""String_Node_Str""+ endIndex+ ""String_Node_Str""+ label);
        list.add(new NamedEntityInText(beginIndex,endIndex - beginIndex,label));
      }
    }
  }
  NamedEntitiesInText nes=new NamedEntitiesInText(list);
  DocumentText text=new DocumentText(preAnnotatedText);
  document.addProperty(text);
  document.addProperty(nes);
  algo.run(document,threshholdTrigram,maxDepth);
  NamedEntitiesInText namedEntities=document.getProperty(NamedEntitiesInText.class);
  HashMap<NamedEntityInText,String> results=new HashMap<NamedEntityInText,String>();
  for (  NamedEntityInText namedEntity : namedEntities) {
    String disambiguatedURL=algo.findResult(namedEntity);
    results.put(namedEntity,disambiguatedURL);
  }
  return results;
}","public HashMap<NamedEntityInText,String> runDisambiguation(String preAnnotatedText) throws IOException {
  double threshholdTrigram=1;
  int maxDepth=2;
  Document document=new Document();
  ArrayList<NamedEntityInText> list=new ArrayList<NamedEntityInText>();
  log.info(""String_Node_Str"" + preAnnotatedText);
  for (int c=0; c < preAnnotatedText.length(); c++) {
    if (preAnnotatedText.length() > c + 8) {
      if (preAnnotatedText.substring(c,c + 8).equals(""String_Node_Str"")) {
        c+=8;
        int beginIndex=c;
        int endIndex=preAnnotatedText.indexOf(""String_Node_Str"",c);
        String label=preAnnotatedText.substring(beginIndex,endIndex);
        log.info(""String_Node_Str"" + beginIndex + ""String_Node_Str""+ endIndex+ ""String_Node_Str""+ label);
        list.add(new NamedEntityInText(beginIndex,endIndex - beginIndex,label));
      }
    }
  }
  NamedEntitiesInText nes=new NamedEntitiesInText(list);
  DocumentText text=new DocumentText(preAnnotatedText);
  document.addProperty(text);
  document.addProperty(nes);
  algo.run(document,threshholdTrigram,maxDepth);
  NamedEntitiesInText namedEntities=document.getProperty(NamedEntitiesInText.class);
  HashMap<NamedEntityInText,String> results=new HashMap<NamedEntityInText,String>();
  for (  NamedEntityInText namedEntity : namedEntities) {
    String disambiguatedURL=algo.findResult(namedEntity);
    results.put(namedEntity,disambiguatedURL);
  }
  return results;
}",0.9979267449896336
161865,"@Test public void testUmlaute() throws InterruptedException, IOException {
  String osumi=""String_Node_Str"";
  String movie=""String_Node_Str"";
  String preAnnotatedText=""String_Node_Str"" + osumi + ""String_Node_Str""+ movie+ ""String_Node_Str"";
  String modelDirectory=""String_Node_Str"";
  AGDISTIS agdistis=new AGDISTIS(modelDirectory);
  HashMap<NamedEntityInText,String> results=agdistis.runDisambiguation(preAnnotatedText);
  for (  NamedEntityInText namedEntity : results.keySet()) {
    String disambiguatedURL=results.get(namedEntity);
    System.out.println(disambiguatedURL);
  }
}","@Test public void testUmlaute() throws InterruptedException, IOException {
  String osumi=""String_Node_Str"";
  String osumiURL=""String_Node_Str"";
  String movie=""String_Node_Str"";
  String movieURL=""String_Node_Str"";
  HashMap<String,String> correct=new HashMap<String,String>();
  correct.put(osumi,osumiURL);
  correct.put(movie,movieURL);
  String preAnnotatedText=""String_Node_Str"" + osumi + ""String_Node_Str""+ movie+ ""String_Node_Str"";
  String modelDirectory=""String_Node_Str"";
  AGDISTIS agdistis=new AGDISTIS(modelDirectory);
  HashMap<NamedEntityInText,String> results=agdistis.runDisambiguation(preAnnotatedText);
  for (  NamedEntityInText namedEntity : results.keySet()) {
    String disambiguatedURL=results.get(namedEntity);
    System.out.println(namedEntity.getLabel() + ""String_Node_Str"" + disambiguatedURL);
    assertTrue(correct.get(namedEntity.getLabel()).equals(disambiguatedURL));
  }
}",0.7847593582887701
161866,"@Override public void handleClosingTag(String tagString){
  if (tagString.equals(CorpusXmlTagHelper.DOCUMENT_TAG_NAME)) {
    finishedDocument(currentDocument);
    currentDocument=null;
  }
 else   if (tagString.equals(CorpusXmlTagHelper.TEXT_WITH_NAMED_ENTITIES_TAG_NAME) && (currentDocument != null)) {
    currentDocument.addProperty(new DocumentText(textBuffer.toString()));
    textBuffer.delete(0,textBuffer.length());
    NamedEntitiesInText nes=new NamedEntitiesInText(namedEntities);
    currentDocument.addProperty(nes);
    namedEntities.clear();
  }
 else   if (tagString.equals(CorpusXmlTagHelper.TEXT_PART_TAG_NAME)) {
    textBuffer.append(data);
  }
 else   if (tagString.equals(CorpusXmlTagHelper.NAMED_ENTITY_IN_TEXT_TAG_NAME) || tagString.equals(CorpusXmlTagHelper.SIGNED_NAMED_ENTITY_IN_TEXT_TAG_NAME)) {
    if (currentNamedEntity != null) {
      currentNamedEntity.setLength(data.length());
      namedEntities.add(currentNamedEntity);
      textBuffer.append(data);
    }
  }
 else   if (tagString.equals(CorpusXmlTagHelper.DOCUMENT_CATEGORIES_TAG_NAME)) {
    currentDocument.addProperty(new DocumentMultipleCategories(categories.toArray(new String[categories.size()])));
    categories.clear();
  }
 else   if (tagString.equals(CorpusXmlTagHelper.DOCUMENT_CATEGORIES_SINGLE_CATEGORY_TAG_NAME)) {
    categories.add(data);
  }
 else {
    if (currentDocument != null) {
      Class<? extends ParseableDocumentProperty> propertyClazz=CorpusXmlTagHelper.getParseableDocumentPropertyClassForTagName(tagString);
      if (propertyClazz != null) {
        try {
          ParseableDocumentProperty property=propertyClazz.newInstance();
          property.parseValue(data);
          currentDocument.addProperty(property);
        }
 catch (        Exception e) {
          LOGGER.error(""String_Node_Str"" + propertyClazz + ""String_Node_Str""+ data+ ""String_Node_Str"",e);
        }
      }
    }
  }
}","@Override public void handleClosingTag(String tagString){
  if (tagString.equals(CorpusXmlTagHelper.DOCUMENT_TAG_NAME)) {
    finishedDocument(currentDocument);
    currentDocument=null;
  }
 else   if (tagString.equals(CorpusXmlTagHelper.TEXT_WITH_NAMED_ENTITIES_TAG_NAME) && (currentDocument != null)) {
    currentDocument.addProperty(new DocumentText(textBuffer.toString()));
    textBuffer.delete(0,textBuffer.length());
    NamedEntitiesInText nes=new NamedEntitiesInText(namedEntities);
    currentDocument.addProperty(nes);
    namedEntities.clear();
  }
 else   if (tagString.equals(CorpusXmlTagHelper.TEXT_PART_TAG_NAME)) {
    textBuffer.append(data);
    data=""String_Node_Str"";
  }
 else   if (tagString.equals(CorpusXmlTagHelper.NAMED_ENTITY_IN_TEXT_TAG_NAME) || tagString.equals(CorpusXmlTagHelper.SIGNED_NAMED_ENTITY_IN_TEXT_TAG_NAME)) {
    if (currentNamedEntity != null) {
      currentNamedEntity.setLength(data.length());
      namedEntities.add(currentNamedEntity);
      textBuffer.append(data);
      currentNamedEntity=null;
      data=""String_Node_Str"";
    }
  }
 else   if (tagString.equals(CorpusXmlTagHelper.DOCUMENT_CATEGORIES_TAG_NAME)) {
    currentDocument.addProperty(new DocumentMultipleCategories(categories.toArray(new String[categories.size()])));
    categories.clear();
  }
 else   if (tagString.equals(CorpusXmlTagHelper.DOCUMENT_CATEGORIES_SINGLE_CATEGORY_TAG_NAME)) {
    categories.add(data);
    data=""String_Node_Str"";
  }
 else {
    if (currentDocument != null) {
      Class<? extends ParseableDocumentProperty> propertyClazz=CorpusXmlTagHelper.getParseableDocumentPropertyClassForTagName(tagString);
      if (propertyClazz != null) {
        try {
          ParseableDocumentProperty property=propertyClazz.newInstance();
          property.parseValue(data);
          data=""String_Node_Str"";
          currentDocument.addProperty(property);
        }
 catch (        Exception e) {
          LOGGER.error(""String_Node_Str"" + propertyClazz + ""String_Node_Str""+ data+ ""String_Node_Str"",e);
        }
      }
    }
  }
}",0.962145901228378
161867,"public String redirect(String candidateURL){
  List<Triple> redirect=index.search(candidateURL,""String_Node_Str"",null);
  if (redirect.size() == 1) {
    return redirect.get(0).getObject();
  }
 else   if (redirect.size() > 1) {
    log.error(""String_Node_Str"" + candidateURL);
    return candidateURL;
  }
 else {
    return candidateURL;
  }
}","public String redirect(String candidateURL){
  List<Triple> redirect=index.search(candidateURL,""String_Node_Str"",null);
  if (redirect.size() == 1) {
    return redirect.get(0).getObject();
  }
 else   if (redirect.size() > 1) {
    log.warn(""String_Node_Str"" + candidateURL);
    return candidateURL;
  }
 else {
    return candidateURL;
  }
}",0.9869375907111756
161868,"private void checkLabelCandidates(DirectedSparseGraph<Node,String> graph,double threshholdTrigram,HashMap<String,Node> nodes,NamedEntityInText entity,String label,String knowledgeBase,boolean searchInSurfaceForms){
  label=cleanLabelsfromCorporationIdentifier(label);
  label=label.trim();
  List<Triple> candidates=new ArrayList<Triple>();
  candidates=searchCandidatesByLabel(label,searchInSurfaceForms);
  log.info(""String_Node_Str"" + candidates.size());
  if (candidates.size() == 0) {
    log.info(""String_Node_Str"" + label);
    if (label.endsWith(""String_Node_Str"")) {
      label=label.substring(0,label.lastIndexOf(""String_Node_Str""));
      candidates=searchCandidatesByLabel(label,searchInSurfaceForms);
      log.info(""String_Node_Str"");
    }
 else     if (label.endsWith(""String_Node_Str"")) {
      label=label.substring(0,label.lastIndexOf(""String_Node_Str""));
      candidates=searchCandidatesByLabel(label,searchInSurfaceForms);
      log.info(""String_Node_Str"");
    }
  }
  boolean added=false;
  for (  Triple c : candidates) {
    String candidateURL=c.getSubject();
    String surfaceForm=c.getObject();
    if (candidateURL.startsWith(nodeType) && !candidateURL.matches(""String_Node_Str"")) {
      if (trigramForURLLabel(surfaceForm,label) < threshholdTrigram) {
        continue;
      }
      if (isDisambiguationResource(candidateURL)) {
        continue;
      }
      if (!nodeType.equals(""String_Node_Str"")) {
        candidateURL=redirect(candidateURL);
      }
      if (fitsIntoDomain(candidateURL,knowledgeBase)) {
        addNodeToGraph(graph,nodes,entity,c,candidateURL);
        added=true;
      }
    }
  }
  if (!added)   checkLabelCandidates(graph,threshholdTrigram,nodes,entity,label,nodeType,true);
}","private void checkLabelCandidates(DirectedSparseGraph<Node,String> graph,double threshholdTrigram,HashMap<String,Node> nodes,NamedEntityInText entity,String label,String knowledgeBase,boolean searchInSurfaceForms){
  label=cleanLabelsfromCorporationIdentifier(label);
  label=label.trim();
  List<Triple> candidates=new ArrayList<Triple>();
  candidates=searchCandidatesByLabel(label,searchInSurfaceForms);
  log.info(""String_Node_Str"" + candidates.size());
  if (candidates.size() == 0) {
    log.info(""String_Node_Str"" + label);
    if (label.endsWith(""String_Node_Str"")) {
      label=label.substring(0,label.lastIndexOf(""String_Node_Str""));
      candidates=searchCandidatesByLabel(label,searchInSurfaceForms);
      log.info(""String_Node_Str"");
    }
 else     if (label.endsWith(""String_Node_Str"")) {
      label=label.substring(0,label.lastIndexOf(""String_Node_Str""));
      candidates=searchCandidatesByLabel(label,searchInSurfaceForms);
      log.info(""String_Node_Str"");
    }
  }
  boolean added=false;
  for (  Triple c : candidates) {
    String candidateURL=c.getSubject();
    String surfaceForm=c.getObject();
    if (candidateURL.startsWith(nodeType) && !candidateURL.matches(""String_Node_Str"")) {
      if (trigramForURLLabel(surfaceForm,label) < threshholdTrigram) {
        continue;
      }
      if (isDisambiguationResource(candidateURL)) {
        continue;
      }
      if (!nodeType.equals(""String_Node_Str"")) {
        candidateURL=redirect(candidateURL);
      }
      if (fitsIntoDomain(candidateURL,knowledgeBase)) {
        addNodeToGraph(graph,nodes,entity,c,candidateURL);
        added=true;
      }
    }
  }
  if (!added && !searchInSurfaceForms)   checkLabelCandidates(graph,threshholdTrigram,nodes,entity,label,nodeType,true);
}",0.9928754630948988
161869,"public void fmeasure(){
  double tp=0, fp=0, fn=0, tn=0;
  int documentId=0;
  for (  Document document : corpus) {
    try {
      System.gc();
      log.info(""String_Node_Str"" + documentId);
      if (0 < document.getProperty(DocumentText.class).getText().length()) {
        algo.run(document);
        NamedEntitiesInText namedEntities=document.getProperty(NamedEntitiesInText.class);
        for (        NamedEntityInText namedEntity : namedEntities) {
          if (namedEntity.getLength() > 2) {
            String correctVotingURL=namedEntity.getNamedEntityUri();
            if (correctVotingURL.startsWith(""String_Node_Str""))             correctVotingURL=correctVotingURL.replace(""String_Node_Str"",""String_Node_Str"");
            if (correctVotingURL.startsWith(""String_Node_Str""))             correctVotingURL=correctVotingURL.replace(""String_Node_Str"",""String_Node_Str"");
            if (correctVotingURL.startsWith(""String_Node_Str"")) {
              correctVotingURL=""String_Node_Str"";
            }
            correctVotingURL=algo.getRedirect(correctVotingURL);
            String disambiguatedURL=algo.getRedirect(algo.findResult(namedEntity));
            log.info(""String_Node_Str"" + correctVotingURL + ""String_Node_Str""+ disambiguatedURL);
            if (correctVotingURL.equals(disambiguatedURL)) {
              tp++;
              log.info(""String_Node_Str"" + correctVotingURL + ""String_Node_Str""+ disambiguatedURL);
            }
 else             if (correctVotingURL.startsWith(""String_Node_Str"") && disambiguatedURL == null) {
              fn++;
              log.info(""String_Node_Str"" + correctVotingURL + ""String_Node_Str""+ disambiguatedURL);
            }
 else             if ((correctVotingURL.startsWith(""String_Node_Str"") || correctVotingURL.startsWith(""String_Node_Str"")) && disambiguatedURL == null) {
              tn++;
              log.info(""String_Node_Str"" + correctVotingURL + ""String_Node_Str""+ disambiguatedURL);
            }
 else             if (correctVotingURL.startsWith(""String_Node_Str"") && disambiguatedURL.startsWith(""String_Node_Str"") && !(correctVotingURL.equals(disambiguatedURL))) {
              fp++;
              log.info(""String_Node_Str"" + correctVotingURL + ""String_Node_Str""+ disambiguatedURL);
            }
 else             if ((correctVotingURL.startsWith(""String_Node_Str"") || correctVotingURL.startsWith(""String_Node_Str"")) && disambiguatedURL.startsWith(""String_Node_Str"")) {
              fp++;
              log.info(""String_Node_Str"" + correctVotingURL + ""String_Node_Str""+ disambiguatedURL);
            }
 else {
              log.error(""String_Node_Str"" + correctVotingURL + ""String_Node_Str""+ disambiguatedURL);
            }
          }
        }
      }
 else {
        log.error(""String_Node_Str"");
      }
      documentId++;
    }
 catch (    Exception e) {
      log.error(""String_Node_Str"" + documentId);
      log.error(e.getLocalizedMessage());
    }
  }
  double precision=tp / (tp + fp);
  double recall=tp / (tp + fn);
  fmeasure=2 * ((precision * recall) / (precision + recall));
  log.error(""String_Node_Str"" + fmeasure + ""String_Node_Str""+ threshholdTrigram);
}","public void fmeasure(){
  double tp=0, fp=0, fn=0, tn=0;
  int documentId=0;
  for (  Document document : corpus) {
    try {
      System.gc();
      log.debug(""String_Node_Str"" + documentId);
      if (0 < document.getProperty(DocumentText.class).getText().length()) {
        algo.run(document);
        NamedEntitiesInText namedEntities=document.getProperty(NamedEntitiesInText.class);
        for (        NamedEntityInText namedEntity : namedEntities) {
          if (namedEntity.getLength() > 2) {
            String correctVotingURL=namedEntity.getNamedEntityUri();
            if (correctVotingURL.startsWith(""String_Node_Str""))             correctVotingURL=correctVotingURL.replace(""String_Node_Str"",""String_Node_Str"");
            if (correctVotingURL.startsWith(""String_Node_Str""))             correctVotingURL=correctVotingURL.replace(""String_Node_Str"",""String_Node_Str"");
            if (correctVotingURL.startsWith(""String_Node_Str"")) {
              correctVotingURL=""String_Node_Str"";
            }
            correctVotingURL=algo.getRedirect(correctVotingURL);
            String disambiguatedURL=algo.getRedirect(algo.findResult(namedEntity));
            if (correctVotingURL.equals(disambiguatedURL)) {
              tp++;
              log.debug(""String_Node_Str"" + correctVotingURL + ""String_Node_Str""+ disambiguatedURL);
            }
 else             if (correctVotingURL.startsWith(""String_Node_Str"") && disambiguatedURL == null) {
              fn++;
              log.debug(""String_Node_Str"" + correctVotingURL + ""String_Node_Str""+ disambiguatedURL);
            }
 else             if ((correctVotingURL.startsWith(""String_Node_Str"") || correctVotingURL.startsWith(""String_Node_Str"")) && disambiguatedURL == null) {
              tn++;
              log.debug(""String_Node_Str"" + correctVotingURL + ""String_Node_Str""+ disambiguatedURL);
            }
 else             if (correctVotingURL.startsWith(""String_Node_Str"") && disambiguatedURL.startsWith(""String_Node_Str"") && !(correctVotingURL.equals(disambiguatedURL))) {
              fp++;
              log.debug(""String_Node_Str"" + correctVotingURL + ""String_Node_Str""+ disambiguatedURL);
            }
 else             if ((correctVotingURL.startsWith(""String_Node_Str"") || correctVotingURL.startsWith(""String_Node_Str"")) && disambiguatedURL.startsWith(""String_Node_Str"")) {
              fp++;
              log.debug(""String_Node_Str"" + correctVotingURL + ""String_Node_Str""+ disambiguatedURL);
            }
 else {
              log.error(""String_Node_Str"" + correctVotingURL + ""String_Node_Str""+ disambiguatedURL);
            }
          }
        }
      }
 else {
        log.error(""String_Node_Str"");
      }
      documentId++;
    }
 catch (    Exception e) {
      log.error(""String_Node_Str"" + documentId);
      log.error(e.getLocalizedMessage());
    }
  }
  double precision=tp / (tp + fp);
  double recall=tp / (tp + fn);
  fmeasure=2 * ((precision * recall) / (precision + recall));
  log.error(""String_Node_Str"" + fmeasure + ""String_Node_Str""+ threshholdTrigram);
}",0.9634146341463414
161870,"public static void main(String[] args) throws IOException {
  String languageTag=""String_Node_Str"";
  File dataDirectory=new File(""String_Node_Str"");
  String nodeType=""String_Node_Str"";
  String edgeType=""String_Node_Str"";
  for (  String TestFile : new String[]{""String_Node_Str""}) {
    CorpusXmlReader reader=new CorpusXmlReader(new File(TestFile));
    Corpus corpus=reader.getCorpus();
    log.info(""String_Node_Str"" + corpus.getNumberOfDocuments());
    DisambiguationAlgorithm algo=new NEDAlgo_HITS(dataDirectory,nodeType,edgeType);
    for (int maxDepth=2; maxDepth <= 2; ++maxDepth) {
      algo.setMaxDepth(maxDepth);
      for (double threshholdTrigram=1; threshholdTrigram > 0.994; threshholdTrigram-=0.01) {
        algo.setThreshholdTrigram(threshholdTrigram);
        Evaluator ev=new Evaluator(languageTag,corpus,algo);
        ev.setThreshholdTrigram(threshholdTrigram);
        ev.fmeasure();
        System.gc();
      }
    }
    algo.close();
  }
}","public static void main(String[] args) throws IOException {
  String languageTag=""String_Node_Str"";
  File dataDirectory=new File(""String_Node_Str"");
  String nodeType=""String_Node_Str"";
  String edgeType=""String_Node_Str"";
  for (  String TestFile : new String[]{""String_Node_Str""}) {
    CorpusXmlReader reader=new CorpusXmlReader(new File(TestFile));
    Corpus corpus=reader.getCorpus();
    log.info(""String_Node_Str"" + corpus.getNumberOfDocuments());
    DisambiguationAlgorithm algo=new NEDAlgo_HITS(dataDirectory,nodeType,edgeType);
    for (int maxDepth=2; maxDepth <= 2; ++maxDepth) {
      algo.setMaxDepth(maxDepth);
      for (double threshholdTrigram=1; threshholdTrigram > 0.7; threshholdTrigram-=0.01) {
        algo.setThreshholdTrigram(threshholdTrigram);
        Evaluator ev=new Evaluator(languageTag,corpus,algo);
        ev.setThreshholdTrigram(threshholdTrigram);
        ev.fmeasure();
        System.gc();
      }
    }
    algo.close();
  }
}",0.997936016511868
161871,"public TripleIndex(File indexDirectory){
  try {
    directory=new MMapDirectory(indexDirectory);
    ireader=DirectoryReader.open(directory);
    isearcher=new IndexSearcher(ireader);
    cache=new HashMap<String,List<Triple>>();
  }
 catch (  IOException e) {
    log.error(e.getLocalizedMessage());
  }
}","public TripleIndex(File indexDirectory){
  try {
    directory=new MMapDirectory(indexDirectory);
    ireader=DirectoryReader.open(directory);
    isearcher=new IndexSearcher(ireader);
  }
 catch (  IOException e) {
    log.error(e.getLocalizedMessage());
  }
}",0.9190140845070424
161872,"public List<Triple> search(String subject,String predicate,String object){
  List<Triple> triples=new ArrayList<Triple>();
  BooleanQuery bq=new BooleanQuery();
  try {
    if (cache.containsKey(subject + predicate + object)) {
      return cache.get(subject + predicate + object);
    }
    log.debug(""String_Node_Str"");
    if (subject != null) {
      TermQuery tq=new TermQuery(new Term(FIELD_NAME_SUBJECT,subject));
      bq.add(tq,BooleanClause.Occur.MUST);
    }
    if (predicate != null) {
      TermQuery tq=new TermQuery(new Term(FIELD_NAME_PREDICATE,predicate));
      bq.add(tq,BooleanClause.Occur.MUST);
    }
    if (object != null) {
      TermQuery tq=new TermQuery(new Term(FIELD_NAME_OBJECT,object));
      bq.add(tq,BooleanClause.Occur.MUST);
    }
    TopScoreDocCollector collector=TopScoreDocCollector.create(numberOfDocsRetrievedFromIndex,true);
    isearcher.search(bq,collector);
    ScoreDoc[] hits=collector.topDocs().scoreDocs;
    for (int i=0; i < hits.length; i++) {
      Document hitDoc=isearcher.doc(hits[i].doc);
      String s=hitDoc.get(FIELD_NAME_SUBJECT);
      String p=hitDoc.get(FIELD_NAME_PREDICATE);
      String o=hitDoc.get(FIELD_NAME_OBJECT);
      triples.add(new Triple(s,p,o));
    }
    log.debug(""String_Node_Str"");
    cache.put(subject + predicate + object,triples);
  }
 catch (  Exception e) {
    log.warn(e.getLocalizedMessage() + ""String_Node_Str"" + subject);
  }
  return triples;
}","public List<Triple> search(String subject,String predicate,String object){
  List<Triple> triples=new ArrayList<Triple>();
  BooleanQuery bq=new BooleanQuery();
  try {
    log.debug(""String_Node_Str"");
    if (subject != null) {
      TermQuery tq=new TermQuery(new Term(FIELD_NAME_SUBJECT,subject));
      bq.add(tq,BooleanClause.Occur.MUST);
    }
    if (predicate != null) {
      TermQuery tq=new TermQuery(new Term(FIELD_NAME_PREDICATE,predicate));
      bq.add(tq,BooleanClause.Occur.MUST);
    }
    if (object != null) {
      TermQuery tq=new TermQuery(new Term(FIELD_NAME_OBJECT,object));
      bq.add(tq,BooleanClause.Occur.MUST);
    }
    TopScoreDocCollector collector=TopScoreDocCollector.create(numberOfDocsRetrievedFromIndex,true);
    isearcher.search(bq,collector);
    ScoreDoc[] hits=collector.topDocs().scoreDocs;
    for (int i=0; i < hits.length; i++) {
      Document hitDoc=isearcher.doc(hits[i].doc);
      String s=hitDoc.get(FIELD_NAME_SUBJECT);
      String p=hitDoc.get(FIELD_NAME_PREDICATE);
      String o=hitDoc.get(FIELD_NAME_OBJECT);
      triples.add(new Triple(s,p,o));
    }
    log.debug(""String_Node_Str"");
  }
 catch (  Exception e) {
    log.warn(e.getLocalizedMessage() + ""String_Node_Str"" + subject);
  }
  return triples;
}",0.8621960206337509
161873,"/** 
 * this methods runs hits on a graph and returns the most authoritative sources, due to HITS is very simple, it will be implemented by iterating two formulas can be written as matrix multiplication but this would be quite ineffective
 * @param k
 * @param Graph
 * @return
 * @throws InterruptedException
 */
@SuppressWarnings({""String_Node_Str"",""String_Node_Str""}) public void runHits(Graph g,int k) throws InterruptedException {
  if (restrictedEdges != null) {
    HashSet<Object> toBeRemoved=new HashSet<Object>();
    for (    Object edge : g.getEdges()) {
      String edgeString=(String)edge;
      for (      String restrict : restrictedEdges) {
        if (edgeString.contains(restrict)) {
          toBeRemoved.add(edge);
        }
      }
    }
    for (    Object edge : toBeRemoved) {
      g.removeEdge(edge);
    }
  }
  for (int iter=0; iter < k; iter++) {
    for (    Object o : g.getVertices()) {
      Node m=(Node)o;
      double x=0;
      for (      Object inc : g.getPredecessors(m)) {
        x+=((Node)inc).getHubWeight();
      }
      double y=0;
      for (      Object inc : g.getSuccessors(m)) {
        y+=((Node)inc).getAuthorityWeight();
      }
      m.setAuthorityWeight(x);
      m.setHubWeight(y);
    }
    double sumX=0;
    double sumY=0;
    for (    Object m : g.getVertices()) {
      Node mm=(Node)m;
      sumX+=mm.getAuthorityWeight();
      sumY+=mm.getHubWeight();
    }
    for (    Object m : g.getVertices()) {
      Node mm=(Node)m;
      mm.setAuthorityWeight(mm.getAuthorityWeight() / sumX);
      mm.setHubWeight(mm.getHubWeight() / sumY);
    }
  }
}","/** 
 * this methods runs hits on a graph and returns the most authoritative sources, due to HITS is very simple, it will be implemented by iterating two formulas can be written as matrix multiplication but this would be quite ineffective
 * @param k
 * @param Graph
 * @return
 * @throws InterruptedException
 */
@SuppressWarnings({""String_Node_Str"",""String_Node_Str""}) public void runHits(Graph g,int k) throws InterruptedException {
  if (restrictedEdges != null) {
    HashSet<Object> toBeRemoved=new HashSet<Object>();
    for (    Object edge : g.getEdges()) {
      String edgeString=(String)edge;
      for (      String restrict : restrictedEdges) {
        if (edgeString.contains(restrict)) {
          toBeRemoved.add(edge);
        }
      }
    }
    for (    Object edge : toBeRemoved) {
      g.removeEdge(edge);
    }
  }
  Node n;
  for (int iter=0; iter < k; iter++) {
    for (    Object o : g.getVertices()) {
      n=(Node)o;
      double x=0;
      for (      Object inc : g.getPredecessors(n)) {
        x+=((Node)inc).getHubWeight();
      }
      double y=0;
      for (      Object inc : g.getSuccessors(n)) {
        y+=((Node)inc).getAuthorityWeight();
      }
      n.setUnnormalizedAuthorityWeight(x * n.getAuthorityWeightForCalculation());
      n.setUnnormalizedHubWeight(y * n.getHubWeightForCalculation());
    }
    double sumX=0;
    double sumY=0;
    for (    Object o : g.getVertices()) {
      n=(Node)o;
      sumX+=n.getUnnormalizedAuthorityWeight();
      sumY+=n.getUnnormalizedHubWeight();
    }
    for (    Object o : g.getVertices()) {
      n=(Node)o;
      n.setAuthorityWeight(n.getUnnormalizedAuthorityWeight() / sumX);
      n.setHubWeight(n.getUnnormalizedHubWeight() / sumY);
    }
  }
}",0.9090909090909092
161874,"public Node(String uri,double activation,int level){
  this.candidateURI=uri;
  this.activation=activation;
  this.level=level;
  this.HubWeight=1;
  this.AuthorityWeight=1;
  ids=new HashSet<Integer>();
  this.successors=new HashSet<Node>();
  this.predecessors=new HashSet<Node>();
}","public Node(String uri,double activation,int level){
  this.candidateURI=uri;
  this.activation=activation;
  this.level=level;
  this.hubWeight=1;
  this.authorityWeight=1;
  ids=new HashSet<Integer>();
  this.successors=new HashSet<Node>();
  this.predecessors=new HashSet<Node>();
}",0.9929824561403509
161875,"public double getAuthorityWeight(){
  return AuthorityWeight;
}","public double getAuthorityWeight(){
  return authorityWeight;
}",0.984126984126984
161876,"public double getHubWeight(){
  return HubWeight;
}","public double getHubWeight(){
  return hubWeight;
}",0.9803921568627452
161877,"@Override public String toString(){
  DecimalFormat df=new DecimalFormat(""String_Node_Str"");
  return candidateURI.replace(""String_Node_Str"",""String_Node_Str"") + ""String_Node_Str"" + String.valueOf(df.format(activation))+ ""String_Node_Str""+ String.valueOf(df.format(HubWeight))+ ""String_Node_Str""+ String.valueOf(df.format(AuthorityWeight));
}","@Override public String toString(){
  DecimalFormat df=new DecimalFormat(""String_Node_Str"");
  return candidateURI.replace(""String_Node_Str"",""String_Node_Str"") + ""String_Node_Str"" + String.valueOf(df.format(activation))+ ""String_Node_Str""+ String.valueOf(df.format(hubWeight))+ ""String_Node_Str""+ String.valueOf(df.format(authorityWeight));
}",0.9941520467836256
161878,"public void setAuthorityWeight(double x){
  this.AuthorityWeight=x;
}","public void setAuthorityWeight(double x){
  this.authorityWeight=x;
}",0.9855072463768116
161879,"public void setHubWeight(double y){
  this.HubWeight=y;
}","public void setHubWeight(double y){
  this.hubWeight=y;
}",0.9824561403508772
161880,"public List<Triple> search(String subject,String predicate,String object){
  List<Triple> triples=new ArrayList<Triple>();
  BooleanQuery bq=new BooleanQuery();
  try {
    log.debug(""String_Node_Str"");
    if (subject != null && subject.equals(""String_Node_Str"")) {
    }
    if (subject != null) {
      TermQuery tq=new TermQuery(new Term(FIELD_NAME_SUBJECT,subject));
      bq.add(tq,BooleanClause.Occur.MUST);
    }
    if (predicate != null) {
      TermQuery tq=new TermQuery(new Term(FIELD_NAME_PREDICATE,predicate));
      bq.add(tq,BooleanClause.Occur.MUST);
    }
    if (object != null) {
      Query q=null;
      if (predicate.equals(""String_Node_Str"") || predicate.equals(""String_Node_Str"")) {
        Analyzer analyzer=new SimpleAnalyzer(Version.LUCENE_44);
        MultiFieldQueryParser parser=new MultiFieldQueryParser(Version.LUCENE_44,new String[]{""String_Node_Str"",""String_Node_Str""},analyzer);
        parser.setDefaultOperator(QueryParser.Operator.OR);
        q=parser.parse(QueryParser.escape(object));
      }
 else {
        q=new TermQuery(new Term(""String_Node_Str"",object));
        bq.add(q,BooleanClause.Occur.MUST);
        q=new TermQuery(new Term(""String_Node_Str"",object));
      }
      bq.add(q,BooleanClause.Occur.MUST);
    }
    TopScoreDocCollector collector=TopScoreDocCollector.create(numberOfDocsRetrievedFromIndex,true);
    isearcher.search(bq,collector);
    ScoreDoc[] hits=collector.topDocs().scoreDocs;
    for (int i=0; i < hits.length; i++) {
      Document hitDoc=isearcher.doc(hits[i].doc);
      String s=hitDoc.get(FIELD_NAME_SUBJECT);
      String p=hitDoc.get(FIELD_NAME_PREDICATE);
      String o=null;
      if (hitDoc.get(""String_Node_Str"") != null) {
        o=hitDoc.get(""String_Node_Str"");
      }
      if (hitDoc.get(""String_Node_Str"") != null) {
        o=hitDoc.get(""String_Node_Str"");
      }
      Triple triple=new Triple(s,p,o);
      triples.add(triple);
    }
    log.debug(""String_Node_Str"");
  }
 catch (  Exception e) {
    log.error(e.getLocalizedMessage() + ""String_Node_Str"" + subject);
  }
  return triples;
}","public List<Triple> search(String subject,String predicate,String object){
  List<Triple> triples=new ArrayList<Triple>();
  BooleanQuery bq=new BooleanQuery();
  try {
    log.debug(""String_Node_Str"");
    if (subject != null && subject.equals(""String_Node_Str"")) {
    }
    if (subject != null) {
      TermQuery tq=new TermQuery(new Term(FIELD_NAME_SUBJECT,subject));
      bq.add(tq,BooleanClause.Occur.MUST);
    }
    if (predicate != null) {
      TermQuery tq=new TermQuery(new Term(FIELD_NAME_PREDICATE,predicate));
      bq.add(tq,BooleanClause.Occur.MUST);
    }
    if (object != null) {
      Query q=null;
      if (""String_Node_Str"".equals(predicate) || ""String_Node_Str"".equals(predicate)) {
        Analyzer analyzer=new SimpleAnalyzer(Version.LUCENE_44);
        MultiFieldQueryParser parser=new MultiFieldQueryParser(Version.LUCENE_44,new String[]{""String_Node_Str"",""String_Node_Str""},analyzer);
        parser.setDefaultOperator(QueryParser.Operator.OR);
        q=parser.parse(QueryParser.escape(object));
      }
 else {
        q=new TermQuery(new Term(""String_Node_Str"",object));
        bq.add(q,BooleanClause.Occur.MUST);
        q=new TermQuery(new Term(""String_Node_Str"",object));
      }
      bq.add(q,BooleanClause.Occur.MUST);
    }
    TopScoreDocCollector collector=TopScoreDocCollector.create(numberOfDocsRetrievedFromIndex,true);
    isearcher.search(bq,collector);
    ScoreDoc[] hits=collector.topDocs().scoreDocs;
    for (int i=0; i < hits.length; i++) {
      Document hitDoc=isearcher.doc(hits[i].doc);
      String s=hitDoc.get(FIELD_NAME_SUBJECT);
      String p=hitDoc.get(FIELD_NAME_PREDICATE);
      String o=null;
      if (hitDoc.get(""String_Node_Str"") != null) {
        o=hitDoc.get(""String_Node_Str"");
      }
      if (hitDoc.get(""String_Node_Str"") != null) {
        o=hitDoc.get(""String_Node_Str"");
      }
      Triple triple=new Triple(s,p,o);
      triples.add(triple);
    }
    log.debug(""String_Node_Str"");
  }
 catch (  Exception e) {
    log.error(e.getLocalizedMessage() + ""String_Node_Str"" + subject);
  }
  return triples;
}",0.9751315160210424
161881,"private boolean checkSurfaceFormsCandidates(DirectedSparseGraph<MyNode,String> graph,HashMap<String,MyNode> nodes,double threshholdTrigram,NamedEntityInText entity,String label,String knowledgeBase){
  boolean addedCandidates=false;
  label=cleanLabelsfromCorporationIdentifier(label);
  label=label.trim();
  List<Triple> candidates=surfaceFormIndex.searchInLabels(label,true);
  if (candidates.size() == 0) {
    log.info(""String_Node_Str"" + label);
    if (label.endsWith(""String_Node_Str"")) {
      label=label.substring(0,label.lastIndexOf(""String_Node_Str""));
      candidates=surfaceFormIndex.searchInLabels(label,true);
      log.info(""String_Node_Str"");
    }
 else     if (label.endsWith(""String_Node_Str"")) {
      label=label.substring(0,label.lastIndexOf(""String_Node_Str""));
      candidates=surfaceFormIndex.searchInLabels(label,true);
      log.info(""String_Node_Str"");
    }
  }
  for (  Triple c : candidates) {
    String candidateURL=c.getSubject();
    log.debug(""String_Node_Str"" + candidateURL);
    if (candidateURL.startsWith(nodeType) && !candidateURL.matches(""String_Node_Str"")) {
      if (disambiguates(candidateURL) != candidateURL) {
        continue;
      }
      if (trigramLabelLabel(c.getObject(),label,nodeType) < threshholdTrigram) {
        continue;
      }
      candidateURL=redirect(candidateURL);
      if (fitsIntoDomain(candidateURL,knowledgeBase)) {
        addNodeToGraph(graph,nodes,entity,c,candidateURL);
        addedCandidates=true;
      }
    }
  }
  return addedCandidates;
}","private boolean checkSurfaceFormsCandidates(DirectedSparseGraph<MyNode,String> graph,HashMap<String,MyNode> nodes,double threshholdTrigram,NamedEntityInText entity,String label,String knowledgeBase){
  boolean addedCandidates=false;
  label=cleanLabelsfromCorporationIdentifier(label);
  label=label.trim();
  List<Triple> candidates=surfaceFormIndex.searchInLabels(label,true);
  if (candidates.size() == 0) {
    log.info(""String_Node_Str"" + label);
    if (label.endsWith(""String_Node_Str"")) {
      label=label.substring(0,label.lastIndexOf(""String_Node_Str""));
      candidates=surfaceFormIndex.searchInLabels(label,true);
      log.info(""String_Node_Str"");
    }
 else     if (label.endsWith(""String_Node_Str"")) {
      label=label.substring(0,label.lastIndexOf(""String_Node_Str""));
      candidates=surfaceFormIndex.searchInLabels(label,true);
      log.info(""String_Node_Str"");
    }
  }
  for (  Triple c : candidates) {
    String candidateURL=c.getSubject();
    log.debug(""String_Node_Str"" + candidateURL);
    if (candidateURL.startsWith(nodeType) && !candidateURL.matches(""String_Node_Str"")) {
      if (disambiguates(candidateURL) != candidateURL) {
        continue;
      }
      if (trigramLabelLabel(c.getObject(),label,nodeType) < threshholdTrigram) {
        continue;
      }
      if (!nodeType.equals(""String_Node_Str"")) {
        candidateURL=redirect(candidateURL);
      }
      if (fitsIntoDomain(candidateURL,knowledgeBase)) {
        addNodeToGraph(graph,nodes,entity,c,candidateURL);
        addedCandidates=true;
      }
    }
  }
  return addedCandidates;
}",0.9810958026273632
161882,"public void insertCandidatesIntoText(DirectedSparseGraph<MyNode,String> graph,Document document,double threshholdTrigram){
  NamedEntitiesInText namedEntities=document.getProperty(NamedEntitiesInText.class);
  String text=document.getProperty(DocumentText.class).getText();
  HashSet<String> heuristicExpansion=new HashSet<String>();
  Collections.sort(namedEntities.getNamedEntities(),new NamedEntityLengthComparator());
  Collections.reverse(namedEntities.getNamedEntities());
  HashMap<String,MyNode> nodes=new HashMap<String,MyNode>();
  for (  NamedEntityInText entity : namedEntities) {
    String label=text.substring(entity.getStartPos(),entity.getEndPos());
    log.info(label);
    String tmp=label;
    boolean expansion=false;
    for (    String key : heuristicExpansion) {
      if (key.contains(label)) {
        if (tmp.length() > key.length() && tmp != label) {
          tmp=key;
          expansion=true;
          log.debug(""String_Node_Str"" + label + ""String_Node_Str""+ key);
        }
        if (tmp.length() < key.length() && tmp == label) {
          tmp=key;
          expansion=true;
          log.debug(""String_Node_Str"" + label + ""String_Node_Str""+ key);
        }
      }
    }
    label=tmp;
    if (!expansion) {
      heuristicExpansion.add(label);
    }
    checkRdfsLabelCandidates(graph,threshholdTrigram,nodes,entity,label,""String_Node_Str"");
  }
}","public void insertCandidatesIntoText(DirectedSparseGraph<MyNode,String> graph,Document document,double threshholdTrigram){
  NamedEntitiesInText namedEntities=document.getProperty(NamedEntitiesInText.class);
  String text=document.getProperty(DocumentText.class).getText();
  HashSet<String> heuristicExpansion=new HashSet<String>();
  Collections.sort(namedEntities.getNamedEntities(),new NamedEntityLengthComparator());
  Collections.reverse(namedEntities.getNamedEntities());
  HashMap<String,MyNode> nodes=new HashMap<String,MyNode>();
  for (  NamedEntityInText entity : namedEntities) {
    String label=text.substring(entity.getStartPos(),entity.getEndPos());
    log.info(label);
    String tmp=label;
    boolean expansion=false;
    for (    String key : heuristicExpansion) {
      if (key.contains(label)) {
        if (tmp.length() > key.length() && tmp != label) {
          tmp=key;
          expansion=true;
          log.debug(""String_Node_Str"" + label + ""String_Node_Str""+ key);
        }
        if (tmp.length() < key.length() && tmp == label) {
          tmp=key;
          expansion=true;
          log.debug(""String_Node_Str"" + label + ""String_Node_Str""+ key);
        }
      }
    }
    label=tmp;
    if (!expansion) {
      heuristicExpansion.add(label);
    }
    if (nodeType.equals(""String_Node_Str"")) {
      checkRdfsLabelCandidates(graph,threshholdTrigram,nodes,entity,label,nodeType);
    }
 else {
      if (!checkRdfsLabelCandidates(graph,threshholdTrigram,nodes,entity,label,""String_Node_Str""))       checkSurfaceFormsCandidates(graph,nodes,threshholdTrigram,entity,label,""String_Node_Str"");
    }
  }
}",0.9143801652892564
161883,"private boolean checkRdfsLabelCandidates(DirectedSparseGraph<MyNode,String> graph,double threshholdTrigram,HashMap<String,MyNode> nodes,NamedEntityInText entity,String label,String knowledgeBase){
  boolean addedCandidates=false;
  label=cleanLabelsfromCorporationIdentifier(label);
  label=label.trim();
  List<Triple> candidates=rdfsLabelIndex.searchInLabels(label,false);
  if (candidates.size() == 0) {
    log.info(""String_Node_Str"" + label);
    if (label.endsWith(""String_Node_Str"")) {
      label=label.substring(0,label.lastIndexOf(""String_Node_Str""));
      candidates=rdfsLabelIndex.searchInLabels(label,false);
      log.info(""String_Node_Str"");
    }
 else     if (label.endsWith(""String_Node_Str"")) {
      label=label.substring(0,label.lastIndexOf(""String_Node_Str""));
      candidates=rdfsLabelIndex.searchInLabels(label,false);
      log.info(""String_Node_Str"");
    }
  }
  for (  Triple c : candidates) {
    String candidateURL=c.getSubject();
    if (candidateURL.startsWith(nodeType) && !candidateURL.matches(""String_Node_Str"")) {
      if (disambiguates(candidateURL) != candidateURL) {
        continue;
      }
      if (trigramForURLLabel(candidateURL,label,nodeType) < threshholdTrigram) {
        continue;
      }
      if (fitsIntoDomain(candidateURL,knowledgeBase)) {
        addNodeToGraph(graph,nodes,entity,c,candidateURL);
        addedCandidates=true;
      }
    }
  }
  return addedCandidates;
}","private boolean checkRdfsLabelCandidates(DirectedSparseGraph<MyNode,String> graph,double threshholdTrigram,HashMap<String,MyNode> nodes,NamedEntityInText entity,String label,String knowledgeBase){
  boolean addedCandidates=false;
  label=cleanLabelsfromCorporationIdentifier(label);
  label=label.trim();
  List<Triple> candidates=rdfsLabelIndex.searchInLabels(label,false);
  if (candidates.size() == 0) {
    log.info(""String_Node_Str"" + label);
    if (label.endsWith(""String_Node_Str"")) {
      label=label.substring(0,label.lastIndexOf(""String_Node_Str""));
      candidates=rdfsLabelIndex.searchInLabels(label,false);
      log.info(""String_Node_Str"");
    }
 else     if (label.endsWith(""String_Node_Str"")) {
      label=label.substring(0,label.lastIndexOf(""String_Node_Str""));
      candidates=rdfsLabelIndex.searchInLabels(label,false);
      log.info(""String_Node_Str"");
    }
  }
  for (  Triple c : candidates) {
    String candidateURL=c.getSubject();
    if (candidateURL.startsWith(nodeType) && !candidateURL.matches(""String_Node_Str"")) {
      if (disambiguates(candidateURL) != candidateURL) {
        continue;
      }
      if (trigramForURLLabel(candidateURL,label,nodeType) < threshholdTrigram) {
        continue;
      }
      if (!nodeType.equals(""String_Node_Str"")) {
        candidateURL=redirect(candidateURL);
      }
      if (fitsIntoDomain(candidateURL,knowledgeBase)) {
        addNodeToGraph(graph,nodes,entity,c,candidateURL);
        addedCandidates=true;
      }
    }
  }
  return addedCandidates;
}",0.9130727762803236
161884,"private double trigramForURLLabel(String candidateURL,String label,String nodeType){
  List<Triple> labelOfCandidate=rdfsLabelIndex.getLabelForURI(candidateURL);
  if (labelOfCandidate.isEmpty()) {
    return 0;
  }
  HashSet<String> union=new HashSet<String>();
  double sim=0;
  for (  Triple t : labelOfCandidate) {
    HashSet<String> trigramsForLabel=new HashSet<String>();
    for (int i=3; i < label.length(); i++) {
      trigramsForLabel.add(label.substring(i - 3,i).toLowerCase());
    }
    union=new HashSet<String>();
    String replace=t.getObject().replace(nodeType,""String_Node_Str"").toLowerCase();
    replace=replace.replace(""String_Node_Str"",""String_Node_Str"");
    HashSet<String> trigramsForCandidate=new HashSet<String>();
    for (int i=3; i < replace.length(); i++) {
      trigramsForCandidate.add(replace.substring(i - 3,i).toLowerCase());
    }
    union.addAll(trigramsForLabel);
    union.addAll(trigramsForCandidate);
    trigramsForLabel.retainAll(trigramsForCandidate);
    double tmp=(double)trigramsForLabel.size() / ((double)union.size());
    if (sim < tmp)     sim=tmp;
  }
  return sim;
}","private double trigramForURLLabel(String candidateURL,String label,String nodeType){
  double sim=0;
  if (!nodeType.equals(""String_Node_Str"")) {
    List<Triple> labelOfCandidate=rdfsLabelIndex.getLabelForURI(candidateURL);
    if (labelOfCandidate.isEmpty()) {
      return 0;
    }
    HashSet<String> union=new HashSet<String>();
    for (    Triple t : labelOfCandidate) {
      HashSet<String> trigramsForLabel=new HashSet<String>();
      for (int i=3; i < label.length(); i++) {
        trigramsForLabel.add(label.substring(i - 3,i).toLowerCase());
      }
      union=new HashSet<String>();
      String replace=t.getObject().replace(nodeType,""String_Node_Str"").toLowerCase();
      replace=replace.replace(""String_Node_Str"",""String_Node_Str"");
      HashSet<String> trigramsForCandidate=new HashSet<String>();
      for (int i=3; i < replace.length(); i++) {
        trigramsForCandidate.add(replace.substring(i - 3,i).toLowerCase());
      }
      union.addAll(trigramsForLabel);
      union.addAll(trigramsForCandidate);
      trigramsForLabel.retainAll(trigramsForCandidate);
      double tmp=(double)trigramsForLabel.size() / ((double)union.size());
      if (sim < tmp)       sim=tmp;
    }
    return sim;
  }
 else {
    HashSet<String> trigramsForLabel=new HashSet<String>();
    for (int i=3; i < label.length(); i++) {
      trigramsForLabel.add(label.substring(i - 3,i).toLowerCase());
    }
    List<Triple> labelOfCandidate=rdfsLabelIndex.getLabelForURI(candidateURL);
    if (labelOfCandidate.isEmpty()) {
      return 0;
    }
    String replace=labelOfCandidate.get(0).getObject().replace(nodeType,""String_Node_Str"").toLowerCase();
    replace=replace.replace(""String_Node_Str"",""String_Node_Str"");
    HashSet<String> trigramsForCandidate=new HashSet<String>();
    for (int i=3; i < replace.length(); i++) {
      trigramsForCandidate.add(replace.substring(i - 3,i).toLowerCase());
    }
    HashSet<String> union=new HashSet<String>();
    union.addAll(trigramsForLabel);
    union.addAll(trigramsForCandidate);
    trigramsForLabel.retainAll(trigramsForCandidate);
    log.debug(""String_Node_Str"" + replace + ""String_Node_Str""+ label+ ""String_Node_Str""+ (double)trigramsForLabel.size() / ((double)union.size()));
    return (double)trigramsForLabel.size() / ((double)union.size());
  }
}",0.6391632771644393
161885,"public static void main(String[] args) throws IOException {
  String TestFile=""String_Node_Str"";
  String languageTag=""String_Node_Str"";
  String dataDirectory=""String_Node_Str"";
  CorpusXmlReader reader=new CorpusXmlReader(new File(TestFile));
  Corpus corpus=reader.getCorpus();
  NEDAlgo_HITS algo=new NEDAlgo_HITS(corpus.getNumberOfDocuments(),languageTag,dataDirectory,""String_Node_Str"");
  for (int maxDepth=1; maxDepth <= 3; ++maxDepth) {
    BufferedWriter bw=new BufferedWriter(new FileWriter(""String_Node_Str"" + TestFile + ""String_Node_Str""+ maxDepth+ ""String_Node_Str"",true));
    bw.write(""String_Node_Str"" + TestFile + ""String_Node_Str"");
    for (double threshholdTrigram=0.9; threshholdTrigram > 0.7; threshholdTrigram-=0.01) {
      double t=0, n=0;
      int documentId=0;
      for (      Document document : corpus) {
        try {
          System.gc();
          log.info(""String_Node_Str"" + documentId);
          if (0 < document.getProperty(DocumentText.class).getText().length()) {
            algo.run(document,threshholdTrigram,maxDepth);
            NamedEntitiesInText namedEntities=document.getProperty(NamedEntitiesInText.class);
            for (            NamedEntityInText namedEntity : namedEntities) {
              if (namedEntity.getLength() > 2) {
                String correctVotingURL=namedEntity.getNamedEntityUri();
                if (correctVotingURL.startsWith(""String_Node_Str""))                 correctVotingURL=correctVotingURL.replace(""String_Node_Str"",""String_Node_Str"");
                if (correctVotingURL.startsWith(""String_Node_Str""))                 correctVotingURL=correctVotingURL.replace(""String_Node_Str"",""String_Node_Str"");
                correctVotingURL=algo.getCu().redirect(correctVotingURL);
                String disambiguatedURL=algo.getCu().redirect(algo.findResult(namedEntity));
                if (correctVotingURL != null) {
                  if (correctVotingURL.equals(disambiguatedURL)) {
                    t++;
                    log.info(""String_Node_Str"" + correctVotingURL + ""String_Node_Str""+ disambiguatedURL);
                  }
 else                   if (languageTag.equals(""String_Node_Str"")) {
                    if (correctVotingURL.equals(""String_Node_Str"") || correctVotingURL.startsWith(""String_Node_Str"") || correctVotingURL.startsWith(""String_Node_Str"")) {
                      log.info(""String_Node_Str"" + correctVotingURL + ""String_Node_Str""+ disambiguatedURL);
                    }
 else {
                      n++;
                      log.info(""String_Node_Str"" + correctVotingURL + ""String_Node_Str""+ disambiguatedURL);
                    }
                  }
 else                   if (languageTag.equals(""String_Node_Str"")) {
                    if (correctVotingURL.equals(""String_Node_Str"") || correctVotingURL.startsWith(""String_Node_Str"")) {
                      log.info(""String_Node_Str"" + correctVotingURL + ""String_Node_Str""+ disambiguatedURL);
                    }
 else {
                      n++;
                      log.info(""String_Node_Str"" + correctVotingURL + ""String_Node_Str""+ disambiguatedURL);
                    }
                  }
                }
 else                 if (disambiguatedURL == null) {
                  int start=namedEntity.getStartPos();
                  int end=namedEntity.getEndPos();
                  String label=document.getProperty(DocumentText.class).getText().substring(start,end);
                  n++;
                  log.info(""String_Node_Str"" + label + ""String_Node_Str""+ correctVotingURL);
                }
 else {
                  log.info(""String_Node_Str"" + correctVotingURL + ""String_Node_Str""+ disambiguatedURL);
                }
              }
            }
          }
 else {
            log.error(""String_Node_Str"");
          }
          documentId++;
        }
 catch (        Exception e) {
          log.error(""String_Node_Str"" + documentId);
          log.error(e.getLocalizedMessage());
        }
      }
      bw.write((t / (t + n)) + ""String_Node_Str"" + threshholdTrigram+ ""String_Node_Str"");
      bw.flush();
      log.error(""String_Node_Str"" + t / (t + n) + ""String_Node_Str"" + threshholdTrigram);
    }
    bw.close();
  }
  algo.close();
}","public static void main(String[] args) throws IOException {
  String TestFile=""String_Node_Str"";
  String languageTag=""String_Node_Str"";
  String dataDirectory=""String_Node_Str"";
  CorpusXmlReader reader=new CorpusXmlReader(new File(TestFile));
  Corpus corpus=reader.getCorpus();
  NEDAlgo_HITS algo=new NEDAlgo_HITS(corpus.getNumberOfDocuments(),languageTag,dataDirectory,""String_Node_Str"");
  for (int maxDepth=1; maxDepth <= 3; ++maxDepth) {
    BufferedWriter bw=new BufferedWriter(new FileWriter(""String_Node_Str"" + TestFile + ""String_Node_Str""+ maxDepth+ ""String_Node_Str"",true));
    bw.write(""String_Node_Str"" + TestFile + ""String_Node_Str"");
    for (double threshholdTrigram=1; threshholdTrigram > 0.7; threshholdTrigram-=0.01) {
      double t=0, n=0;
      int documentId=0;
      for (      Document document : corpus) {
        try {
          System.gc();
          log.info(""String_Node_Str"" + documentId);
          if (0 < document.getProperty(DocumentText.class).getText().length()) {
            algo.run(document,threshholdTrigram,maxDepth);
            NamedEntitiesInText namedEntities=document.getProperty(NamedEntitiesInText.class);
            for (            NamedEntityInText namedEntity : namedEntities) {
              if (namedEntity.getLength() > 2) {
                String correctVotingURL=namedEntity.getNamedEntityUri();
                if (correctVotingURL.startsWith(""String_Node_Str""))                 correctVotingURL=correctVotingURL.replace(""String_Node_Str"",""String_Node_Str"");
                if (correctVotingURL.startsWith(""String_Node_Str""))                 correctVotingURL=correctVotingURL.replace(""String_Node_Str"",""String_Node_Str"");
                correctVotingURL=algo.getCu().redirect(correctVotingURL);
                String disambiguatedURL=algo.getCu().redirect(algo.findResult(namedEntity));
                if (correctVotingURL != null) {
                  if (correctVotingURL.equals(disambiguatedURL)) {
                    t++;
                    log.info(""String_Node_Str"" + correctVotingURL + ""String_Node_Str""+ disambiguatedURL);
                  }
 else                   if (languageTag.equals(""String_Node_Str"")) {
                    if (correctVotingURL.equals(""String_Node_Str"") || correctVotingURL.startsWith(""String_Node_Str"") || correctVotingURL.startsWith(""String_Node_Str"")) {
                      log.info(""String_Node_Str"" + correctVotingURL + ""String_Node_Str""+ disambiguatedURL);
                    }
 else {
                      n++;
                      log.info(""String_Node_Str"" + correctVotingURL + ""String_Node_Str""+ disambiguatedURL);
                    }
                  }
 else                   if (languageTag.equals(""String_Node_Str"")) {
                    if (correctVotingURL.equals(""String_Node_Str"") || correctVotingURL.startsWith(""String_Node_Str"")) {
                      log.info(""String_Node_Str"" + correctVotingURL + ""String_Node_Str""+ disambiguatedURL);
                    }
 else {
                      n++;
                      log.info(""String_Node_Str"" + correctVotingURL + ""String_Node_Str""+ disambiguatedURL);
                    }
                  }
                }
 else                 if (disambiguatedURL == null) {
                  int start=namedEntity.getStartPos();
                  int end=namedEntity.getEndPos();
                  String label=document.getProperty(DocumentText.class).getText().substring(start,end);
                  n++;
                  log.info(""String_Node_Str"" + label + ""String_Node_Str""+ correctVotingURL);
                }
 else {
                  log.info(""String_Node_Str"" + correctVotingURL + ""String_Node_Str""+ disambiguatedURL);
                }
              }
            }
          }
 else {
            log.error(""String_Node_Str"");
          }
          documentId++;
        }
 catch (        Exception e) {
          log.error(""String_Node_Str"" + documentId);
          log.error(e.getLocalizedMessage());
        }
      }
      bw.write((t / (t + n)) + ""String_Node_Str"" + threshholdTrigram+ ""String_Node_Str"");
      bw.flush();
      log.error(""String_Node_Str"" + t / (t + n) + ""String_Node_Str"" + threshholdTrigram);
    }
    bw.close();
  }
  algo.close();
}",0.9995296331138288
161886,"private void indexTTLFile(String file,String baseURI){
  try {
    log.info(""String_Node_Str"" + file);
    RDFParser parser=new TurtleParser();
    OnlineStatementHandler osh=new OnlineStatementHandler();
    parser.setRDFHandler(osh);
    parser.setStopAtFirstError(false);
    log.info(""String_Node_Str"" + file);
    parser.parse(new FileReader(file),baseURI);
  }
 catch (  IOException e) {
    log.error(e.getLocalizedMessage());
  }
catch (  RDFParseException e) {
    log.error(e.getLocalizedMessage());
  }
catch (  RDFHandlerException e) {
    log.error(e.getLocalizedMessage());
  }
}","private void indexTTLFile(String file,String baseURI){
  try {
    log.info(""String_Node_Str"" + file);
    RDFParser parser=new TurtleParser();
    OnlineStatementHandler osh=new OnlineStatementHandler();
    parser.setRDFHandler(osh);
    parser.setStopAtFirstError(false);
    parser.parse(new FileReader(file),baseURI);
    log.info(""String_Node_Str"" + file);
  }
 catch (  IOException e) {
    log.error(e.getLocalizedMessage());
  }
catch (  RDFParseException e) {
    log.error(e.getLocalizedMessage());
  }
catch (  RDFHandlerException e) {
    log.error(e.getLocalizedMessage());
  }
}",0.9190556492411468
161887,"private void addDocumentToIndex(String subject,String object){
  try {
    Document doc=new Document();
    doc.add(new StringField(FIELD_NAME_URL,subject,Store.YES));
    doc.add(new TextField(FIELD_NAME_LABEL,object,Store.YES));
    iwriter.addDocument(doc);
  }
 catch (  IOException e) {
    log.error(e.getLocalizedMessage());
  }
}","private void addDocumentToIndex(String subject,String predicate,String object){
  try {
    if (subject.startsWith(""String_Node_Str"") && predicate.equals(""String_Node_Str"")) {
      Document doc=new Document();
      doc.add(new StringField(FIELD_NAME_URL,subject,Store.YES));
      doc.add(new TextField(FIELD_NAME_LABEL,object,Store.YES));
      iwriter.addDocument(doc);
    }
  }
 catch (  IOException e) {
    log.error(e.getLocalizedMessage());
  }
}",0.849936948297604
161888,"@Override public void handleStatement(Statement st){
  String subject=st.getSubject().stringValue();
  String object=st.getObject().stringValue();
  addDocumentToIndex(subject,object);
}","@Override public void handleStatement(Statement st){
  String subject=st.getSubject().stringValue();
  String predicate=st.getPredicate().stringValue();
  String object=st.getObject().stringValue();
  addDocumentToIndex(subject,predicate,object);
}",0.8294930875576036
161889,"public List<Path> generate() throws IOException {
  List<Path> paths=new ArrayList<>();
  Map<String,List<Tick>> demomap=new LinkedHashMap<>();
  Map<String,String> peeknext=new LinkedHashMap<>();
  String previous=null;
  for (  Tick tick : ticklist) {
    List<Tick> ticks;
    if (!demomap.containsKey(tick.getDemoName())) {
      ticks=new ArrayList<>();
      demomap.put(tick.getDemoName(),ticks);
    }
 else {
      ticks=demomap.get(tick.getDemoName());
    }
    ticks.add(tick);
    if (previous != null) {
      if (!peeknext.containsKey(previous) && !previous.equals(tick.getDemoName())) {
        peeknext.put(previous,tick.getDemoName());
      }
    }
    previous=tick.getDemoName();
  }
  int cfgCount=1;
  int padding=cfg.getInt(Key.VdmTickPadding);
  String skipStart=cfg.getString(Key.VdmSkipStartCommand);
  String skipStop=cfg.getString(Key.VdmSkipStopCommand);
  String rawSkipMode=cfg.getString(Key.VdmSkipMode);
  SkipMode skipMode=SkipMode.SKIP_AHEAD;
  try {
    skipMode=SkipMode.valueOf(rawSkipMode);
  }
 catch (  IllegalArgumentException ex) {
    log.warning(""String_Node_Str"" + rawSkipMode);
  }
  for (  Entry<String,List<Tick>> e : demomap.entrySet()) {
    String demo=e.getKey();
    log.finer(""String_Node_Str"" + demo);
    List<String> lines=new ArrayList<>();
    lines.add(""String_Node_Str"" + n + ""String_Node_Str"");
    int count=1;
    int previousEndTick=0;
    for (    Tick tick : e.getValue()) {
      int safeStart=Math.max(0,tick.getStart() - padding);
      if (skipMode == SkipMode.DEMO_TIMESCALE) {
        lines.add(segment(count++,""String_Node_Str"",""String_Node_Str"",""String_Node_Str"" + (previousEndTick + 1) + ""String_Node_Str"",""String_Node_Str"" + skipStart + ""String_Node_Str""));
        lines.add(segment(count++,""String_Node_Str"",""String_Node_Str"",""String_Node_Str"" + safeStart + ""String_Node_Str"",""String_Node_Str"" + skipStop + ""String_Node_Str""));
      }
 else       if (skipMode == SkipMode.SKIP_AHEAD) {
        lines.add(segment(count++,""String_Node_Str"",""String_Node_Str"",""String_Node_Str"" + (previousEndTick + 1) + ""String_Node_Str"",""String_Node_Str"" + safeStart + ""String_Node_Str""));
      }
      String command=""String_Node_Str"";
      if (tick.getSegment().startsWith(""String_Node_Str"")) {
        String demoCfgName=Util.stripFilenameExtension(tick.getDemoFile().getName());
        if (tick.getTemplate().equals(Record.Template) || tick.getTemplate().isEmpty()) {
          log.warning(""String_Node_Str"" + tick.toString() + ""String_Node_Str"");
        }
 else {
          log.info(""String_Node_Str"" + cfgCount + ""String_Node_Str""+ tick);
          Map<String,Object> scopes=new HashMap<>();
          scopes.put(""String_Node_Str"",cfg.getTfPath().toAbsolutePath());
          scopes.put(""String_Node_Str"",cfg.getMoviePath().toAbsolutePath());
          scopes.put(""String_Node_Str"",demoCfgName);
          scopes.put(""String_Node_Str"",tick.getDemoFile().getAbsoluteFile());
          scopes.put(""String_Node_Str"",cfg.getTfPath().toAbsolutePath().resolve(demoCfgName));
          scopes.put(""String_Node_Str"",cfg.getTfPath().toAbsolutePath().resolve(demoCfgName + ""String_Node_Str""));
          scopes.put(""String_Node_Str"",Paths.get(""String_Node_Str"").toAbsolutePath());
          scopes.put(""String_Node_Str"",n);
          Path outputPath=Paths.get(""String_Node_Str"",demoCfgName + ""String_Node_Str"" + cfgCount+ ""String_Node_Str"");
          Files.deleteIfExists(outputPath);
          try (Writer writer=Files.newBufferedWriter(outputPath,Charset.forName(""String_Node_Str""))){
            MustacheFactory mf=new DefaultMustacheFactory();
            Mustache mustache=mf.compile(new StringReader(tick.getTemplate()),demoCfgName);
            mustache.execute(writer,scopes);
            writer.flush();
            paths.add(outputPath);
          }
 catch (          IOException ex) {
            log.log(Level.WARNING,""String_Node_Str"",ex);
          }
        }
        command=((AbstractExec)tick).getCommand(cfgCount++);
      }
      if (tick.getSegment().equals(Exec.Segment)) {
        lines.add(segment(count++,""String_Node_Str"",tick.getSegment(),""String_Node_Str"" + tick.getStart() + ""String_Node_Str"",""String_Node_Str"" + command + ""String_Node_Str""));
      }
 else {
        lines.add(segment(count++,""String_Node_Str"",""String_Node_Str"",""String_Node_Str"" + tick.getStart() + ""String_Node_Str"",""String_Node_Str"" + command + ""String_Node_Str""));
        lines.add(segment(count++,""String_Node_Str"",""String_Node_Str"",""String_Node_Str"" + tick.getEnd() + ""String_Node_Str"",""String_Node_Str""));
      }
      previousEndTick=tick.getEnd();
    }
    String nextdemo=peeknext.get(demo);
    if (nextdemo != null) {
      lines.add(segment(count++,""String_Node_Str"",""String_Node_Str"",""String_Node_Str"" + (previousEndTick + 1) + ""String_Node_Str"",""String_Node_Str"" + nextdemo + ""String_Node_Str""));
    }
 else {
      lines.add(segment(count++,""String_Node_Str"",""String_Node_Str"",""String_Node_Str"" + (previousEndTick + 1) + ""String_Node_Str"",""String_Node_Str""));
    }
    lines.add(""String_Node_Str"");
    Path added=Files.write(cfg.getTfPath().resolve(Util.stripFilenameExtension(demo) + ""String_Node_Str""),lines,Charset.defaultCharset());
    paths.add(added);
    log.fine(""String_Node_Str"" + added);
  }
  return paths;
}","public List<Path> generate() throws IOException {
  List<Path> paths=new ArrayList<>();
  Map<String,List<Tick>> demomap=new LinkedHashMap<>();
  Map<String,String> peeknext=new LinkedHashMap<>();
  String previous=null;
  for (  Tick tick : ticklist) {
    List<Tick> ticks;
    if (!demomap.containsKey(tick.getDemoName())) {
      ticks=new ArrayList<>();
      demomap.put(tick.getDemoName(),ticks);
    }
 else {
      ticks=demomap.get(tick.getDemoName());
    }
    ticks.add(tick);
    if (previous != null) {
      if (!peeknext.containsKey(previous) && !previous.equals(tick.getDemoName())) {
        peeknext.put(previous,tick.getDemoName());
      }
    }
    previous=tick.getDemoName();
  }
  int cfgCount=1;
  int padding=cfg.getInt(Key.VdmTickPadding);
  String skipStart=cfg.getString(Key.VdmSkipStartCommand);
  String skipStop=cfg.getString(Key.VdmSkipStopCommand);
  String rawSkipMode=cfg.getString(Key.VdmSkipMode);
  SkipMode skipMode=SkipMode.SKIP_AHEAD;
  try {
    skipMode=SkipMode.valueOf(rawSkipMode);
  }
 catch (  IllegalArgumentException ex) {
    log.warning(""String_Node_Str"" + rawSkipMode);
  }
  for (  Entry<String,List<Tick>> e : demomap.entrySet()) {
    String demo=e.getKey();
    log.finer(""String_Node_Str"" + demo);
    List<String> lines=new ArrayList<>();
    lines.add(""String_Node_Str"" + n + ""String_Node_Str"");
    int count=1;
    int previousEndTick=0;
    for (    Tick tick : e.getValue()) {
      int safeStart=Math.max(0,tick.getStart() - padding);
      boolean needsSkip=previousEndTick + 1 < safeStart;
      if (needsSkip) {
        if (skipMode == SkipMode.DEMO_TIMESCALE) {
          lines.add(segment(count++,""String_Node_Str"",""String_Node_Str"",""String_Node_Str"" + (previousEndTick + 1) + ""String_Node_Str"",""String_Node_Str"" + skipStart + ""String_Node_Str""));
          lines.add(segment(count++,""String_Node_Str"",""String_Node_Str"",""String_Node_Str"" + safeStart + ""String_Node_Str"",""String_Node_Str"" + skipStop + ""String_Node_Str""));
        }
 else         if (skipMode == SkipMode.SKIP_AHEAD) {
          lines.add(segment(count++,""String_Node_Str"",""String_Node_Str"",""String_Node_Str"" + (previousEndTick + 1) + ""String_Node_Str"",""String_Node_Str"" + safeStart + ""String_Node_Str""));
        }
      }
      String command=""String_Node_Str"";
      if (tick.getSegment().startsWith(""String_Node_Str"")) {
        command=((AbstractExec)tick).getCommand(cfgCount);
        String demoCfgName=Util.stripFilenameExtension(tick.getDemoFile().getName());
        if (!tick.getTemplate().equals(Record.Template) && !tick.getTemplate().isEmpty() && !tick.getTemplate().toLowerCase().startsWith(""String_Node_Str"")) {
          log.info(""String_Node_Str"" + cfgCount + ""String_Node_Str""+ tick);
          Map<String,Object> scopes=new HashMap<>();
          scopes.put(""String_Node_Str"",cfg.getTfPath().toAbsolutePath());
          scopes.put(""String_Node_Str"",cfg.getMoviePath().toAbsolutePath());
          scopes.put(""String_Node_Str"",demoCfgName);
          scopes.put(""String_Node_Str"",tick.getDemoFile().getAbsoluteFile());
          scopes.put(""String_Node_Str"",cfg.getTfPath().toAbsolutePath().resolve(demoCfgName));
          scopes.put(""String_Node_Str"",cfg.getTfPath().toAbsolutePath().resolve(demoCfgName + ""String_Node_Str""));
          scopes.put(""String_Node_Str"",Paths.get(""String_Node_Str"").toAbsolutePath());
          scopes.put(""String_Node_Str"",n);
          Path outputPath=Paths.get(""String_Node_Str"",demoCfgName + ""String_Node_Str"" + cfgCount+ ""String_Node_Str"");
          Files.deleteIfExists(outputPath);
          try (Writer writer=Files.newBufferedWriter(outputPath,Charset.forName(""String_Node_Str""))){
            MustacheFactory mf=new DefaultMustacheFactory();
            Mustache mustache=mf.compile(new StringReader(tick.getTemplate()),demoCfgName);
            mustache.execute(writer,scopes);
            writer.flush();
            paths.add(outputPath);
            cfgCount++;
          }
 catch (          IOException ex) {
            log.log(Level.WARNING,""String_Node_Str"",ex);
          }
        }
      }
      if (tick.getSegment().equals(Exec.Segment)) {
        lines.add(segment(count++,""String_Node_Str"",tick.getSegment(),""String_Node_Str"" + tick.getStart() + ""String_Node_Str"",""String_Node_Str"" + command + ""String_Node_Str""));
      }
 else {
        lines.add(segment(count++,""String_Node_Str"",""String_Node_Str"",""String_Node_Str"" + tick.getStart() + ""String_Node_Str"",""String_Node_Str"" + command + ""String_Node_Str""));
        lines.add(segment(count++,""String_Node_Str"",""String_Node_Str"",""String_Node_Str"" + tick.getEnd() + ""String_Node_Str"",""String_Node_Str""));
      }
      previousEndTick=tick.getEnd();
    }
    String nextdemo=peeknext.get(demo);
    if (nextdemo != null) {
      lines.add(segment(count,""String_Node_Str"",""String_Node_Str"",""String_Node_Str"" + (previousEndTick + 1) + ""String_Node_Str"",""String_Node_Str"" + nextdemo + ""String_Node_Str""));
    }
 else {
      lines.add(segment(count,""String_Node_Str"",""String_Node_Str"",""String_Node_Str"" + (previousEndTick + 1) + ""String_Node_Str"",""String_Node_Str""));
    }
    lines.add(""String_Node_Str"");
    Path added=Files.write(cfg.getTfPath().resolve(Util.stripFilenameExtension(demo) + ""String_Node_Str""),lines,Charset.defaultCharset());
    paths.add(added);
    log.fine(""String_Node_Str"" + added);
  }
  return paths;
}",0.9535470604729414
161890,"/** 
 * Create the dialog.
 */
public AboutDialog(String version,String build){
  setResizable(false);
  setTitle(""String_Node_Str"");
  getContentPane().setLayout(new BorderLayout());
  contentPanel.setBorder(new EmptyBorder(5,5,5,5));
  getContentPane().add(contentPanel,BorderLayout.CENTER);
  contentPanel.setLayout(new BorderLayout(0,0));
  JLabel lblHeader=new JLabel(""String_Node_Str"");
  URL url=AboutDialog.class.getClassLoader().getResource(""String_Node_Str"");
  if (url != null) {
    lblHeader.setIcon(new ImageIcon(url));
  }
  contentPanel.add(lblHeader,BorderLayout.NORTH);
  JLabel lblContent=new JLabel(""String_Node_Str"" + ""String_Node_Str"" + version + ""String_Node_Str""+ build);
  lblContent.setHorizontalAlignment(SwingConstants.CENTER);
  lblContent.setFont(new Font(""String_Node_Str"",Font.PLAIN,11));
  contentPanel.add(lblContent,BorderLayout.CENTER);
  JTextPane aboutTextPane=new JTextPane();
  aboutTextPane.addHyperlinkListener(new AboutTextPaneHyperlinkListener());
  aboutTextPane.setFocusable(false);
  aboutTextPane.setOpaque(false);
  aboutTextPane.setEditable(false);
  aboutTextPane.setContentType(""String_Node_Str"");
  String style=""String_Node_Str"" + UIManager.getDefaults().getFont(""String_Node_Str"").getFamily() + ""String_Node_Str""+ ""String_Node_Str"";
  ((HTMLDocument)aboutTextPane.getDocument()).getStyleSheet().addRule(style);
  try {
    URL aboutUrl=AboutDialog.class.getClassLoader().getResource(""String_Node_Str"");
    if (aboutUrl != null) {
      aboutTextPane.setText(new String(Files.readAllBytes(Paths.get(aboutUrl.toURI()))));
    }
  }
 catch (  URISyntaxException|IOException e) {
    log.log(Level.FINE,""String_Node_Str"",e);
  }
  contentPanel.add(aboutTextPane,BorderLayout.SOUTH);
  JPanel buttonPane=new JPanel();
  getContentPane().add(buttonPane,BorderLayout.SOUTH);
  GridBagLayout gbl_buttonPane=new GridBagLayout();
  gbl_buttonPane.columnWidths=new int[]{0,0,80,0};
  gbl_buttonPane.rowHeights=new int[]{23,0};
  gbl_buttonPane.columnWeights=new double[]{0.0,1.0,0.0,Double.MIN_VALUE};
  gbl_buttonPane.rowWeights=new double[]{0.0,Double.MIN_VALUE};
  buttonPane.setLayout(gbl_buttonPane);
  JButton btnOk=new JButton(""String_Node_Str"");
  btnOk.setPreferredSize(new Dimension(80,23));
  btnOk.addActionListener(new BtnOkActionListener());
  btnUpdater=new JButton(""String_Node_Str"");
  GridBagConstraints gbc_btnUpdater=new GridBagConstraints();
  gbc_btnUpdater.insets=new Insets(0,0,0,5);
  gbc_btnUpdater.gridx=0;
  gbc_btnUpdater.gridy=0;
  buttonPane.add(btnUpdater,gbc_btnUpdater);
  GridBagConstraints gbc_btnOk=new GridBagConstraints();
  gbc_btnOk.anchor=GridBagConstraints.NORTHWEST;
  gbc_btnOk.gridx=2;
  gbc_btnOk.gridy=0;
  buttonPane.add(btnOk,gbc_btnOk);
  pack();
  setMinimumSize(new Dimension(520,400));
  setMaximumSize(new Dimension(520,400));
  setLocationByPlatform(true);
}","/** 
 * Create the dialog.
 */
public AboutDialog(String version,String build){
  setResizable(false);
  setTitle(""String_Node_Str"");
  getContentPane().setLayout(new BorderLayout());
  contentPanel.setBorder(new EmptyBorder(5,5,5,5));
  getContentPane().add(contentPanel,BorderLayout.CENTER);
  contentPanel.setLayout(new BorderLayout(0,0));
  JLabel lblHeader=new JLabel(""String_Node_Str"");
  URL url=AboutDialog.class.getClassLoader().getResource(""String_Node_Str"");
  if (url != null) {
    lblHeader.setIcon(new ImageIcon(url));
  }
  contentPanel.add(lblHeader,BorderLayout.NORTH);
  JLabel lblContent=new JLabel(""String_Node_Str"" + ""String_Node_Str"" + version + ""String_Node_Str""+ build);
  lblContent.setHorizontalAlignment(SwingConstants.CENTER);
  lblContent.setFont(new Font(""String_Node_Str"",Font.PLAIN,11));
  contentPanel.add(lblContent,BorderLayout.CENTER);
  JTextPane aboutTextPane=new JTextPane();
  aboutTextPane.addHyperlinkListener(new AboutTextPaneHyperlinkListener());
  aboutTextPane.setFocusable(false);
  aboutTextPane.setOpaque(false);
  aboutTextPane.setEditable(false);
  aboutTextPane.setContentType(""String_Node_Str"");
  String style=""String_Node_Str"" + UIManager.getDefaults().getFont(""String_Node_Str"").getFamily() + ""String_Node_Str""+ ""String_Node_Str"";
  ((HTMLDocument)aboutTextPane.getDocument()).getStyleSheet().addRule(style);
  try {
    URL aboutUrl=AboutDialog.class.getClassLoader().getResource(""String_Node_Str"");
    if (aboutUrl != null) {
      try (BufferedReader reader=new BufferedReader(new InputStreamReader(aboutUrl.openStream()))){
        aboutTextPane.setText(reader.lines().collect(Collectors.joining()));
      }
     }
  }
 catch (  IOException e) {
    log.log(Level.FINE,""String_Node_Str"",e);
  }
  contentPanel.add(aboutTextPane,BorderLayout.SOUTH);
  JPanel buttonPane=new JPanel();
  getContentPane().add(buttonPane,BorderLayout.SOUTH);
  GridBagLayout gbl_buttonPane=new GridBagLayout();
  gbl_buttonPane.columnWidths=new int[]{0,0,80,0};
  gbl_buttonPane.rowHeights=new int[]{23,0};
  gbl_buttonPane.columnWeights=new double[]{0.0,1.0,0.0,Double.MIN_VALUE};
  gbl_buttonPane.rowWeights=new double[]{0.0,Double.MIN_VALUE};
  buttonPane.setLayout(gbl_buttonPane);
  JButton btnOk=new JButton(""String_Node_Str"");
  btnOk.setPreferredSize(new Dimension(80,23));
  btnOk.addActionListener(new BtnOkActionListener());
  btnUpdater=new JButton(""String_Node_Str"");
  GridBagConstraints gbc_btnUpdater=new GridBagConstraints();
  gbc_btnUpdater.insets=new Insets(0,0,0,5);
  gbc_btnUpdater.gridx=0;
  gbc_btnUpdater.gridy=0;
  buttonPane.add(btnUpdater,gbc_btnUpdater);
  GridBagConstraints gbc_btnOk=new GridBagConstraints();
  gbc_btnOk.anchor=GridBagConstraints.NORTHWEST;
  gbc_btnOk.gridx=2;
  gbc_btnOk.gridy=0;
  buttonPane.add(btnOk,gbc_btnOk);
  pack();
  setMinimumSize(new Dimension(520,400));
  setMaximumSize(new Dimension(520,400));
  setLocationByPlatform(true);
}",0.952200172562554
161891,"public void replaceAll() throws LawenaException {
  Path tfpath=cfg.getTfPath();
  Path customBackupPath=tfpath.resolve(""String_Node_Str"");
  Path customPath=tfpath.resolve(""String_Node_Str"");
  Path configBackupPath=tfpath.resolve(""String_Node_Str"");
  Path configPath=tfpath.resolve(""String_Node_Str"");
  if (Files.exists(configBackupPath) || Files.exists(customBackupPath)) {
    log.info(""String_Node_Str"");
    log.info(""String_Node_Str"");
    log.info(""String_Node_Str"");
    throw new LawenaException(""String_Node_Str"");
  }
  try {
    log.fine(""String_Node_Str"");
    configPath.toFile().setWritable(true);
    Files.move(configPath,configBackupPath);
    mkdirs(configPath);
    copy(Paths.get(""String_Node_Str""),configPath);
    if (cfg.getBoolean(Key.CopyUserConfig)) {
      Path configCfg=configBackupPath.resolve(""String_Node_Str"");
      if (Files.exists(configCfg)) {
        log.fine(""String_Node_Str"");
        Files.copy(configCfg,configPath.resolve(""String_Node_Str""),StandardCopyOption.COPY_ATTRIBUTES,StandardCopyOption.REPLACE_EXISTING);
      }
    }
  }
 catch (  IOException e) {
    log.log(Level.INFO,""String_Node_Str"",e);
    throw new LawenaException(""String_Node_Str"",e);
  }
  try {
    log.fine(""String_Node_Str"");
    if (!Files.exists(customPath) || !Files.isDirectory(customPath)) {
      mkdir(customPath);
    }
    customPath.toFile().setWritable(true);
    Files.move(customPath,customBackupPath);
  }
 catch (  IOException e) {
    log.log(Level.INFO,""String_Node_Str"",e);
    throw new LawenaException(""String_Node_Str"",e);
  }
  try {
    log.fine(""String_Node_Str"");
    Path resourcePath=tfpath.resolve(""String_Node_Str"");
    Path scriptsPath=tfpath.resolve(""String_Node_Str"");
    mkdirs(resourcePath);
    mkdirs(scriptsPath);
    String hudName=cfg.getHud();
    if (!hudName.equals(""String_Node_Str"")) {
      copyReadOnly(Paths.get(""String_Node_Str"",hudName,""String_Node_Str""),resourcePath);
      copyReadOnly(Paths.get(""String_Node_Str"",hudName,""String_Node_Str""),scriptsPath);
      Files.copy(Paths.get(""String_Node_Str"",hudName,""String_Node_Str""),tfpath.resolve(""String_Node_Str""));
    }
  }
 catch (  IOException e) {
    log.log(Level.INFO,""String_Node_Str"",e);
    throw new LawenaException(""String_Node_Str"",e);
  }
  Path skyboxPath=tfpath.resolve(""String_Node_Str"");
  try {
    String sky=cfg.getSkybox();
    if (sky != null && !sky.isEmpty() && !sky.equals(Key.Skybox.defValue())) {
      log.fine(""String_Node_Str"");
      mkdirs(skyboxPath);
      replaceSkybox();
    }
  }
 catch (  IOException e) {
    log.log(Level.INFO,""String_Node_Str"",e);
    try {
      delete(skyboxPath);
      log.fine(""String_Node_Str"");
    }
 catch (    IOException e1) {
      log.info(""String_Node_Str"" + e1);
    }
    throw new LawenaException(""String_Node_Str"",e);
  }
  if (customPathList != null) {
    copyCustomFiles();
  }
}","public void replaceAll() throws LawenaException {
  Path tfpath=cfg.getTfPath();
  Path customBackupPath=tfpath.resolve(""String_Node_Str"");
  Path customPath=tfpath.resolve(""String_Node_Str"");
  Path configBackupPath=tfpath.resolve(""String_Node_Str"");
  Path configPath=tfpath.resolve(""String_Node_Str"");
  if (Files.exists(configBackupPath) || Files.exists(customBackupPath)) {
    log.info(""String_Node_Str"");
    log.info(""String_Node_Str"");
    log.info(""String_Node_Str"");
    throw new LawenaException(""String_Node_Str"");
  }
  try {
    log.fine(""String_Node_Str"");
    configPath.toFile().setWritable(true);
    Files.move(configPath,configBackupPath);
    mkdirs(configPath);
    copy(Paths.get(""String_Node_Str""),configPath);
    if (cfg.getBoolean(Key.CopyUserConfig)) {
      Path configCfg=configBackupPath.resolve(""String_Node_Str"");
      if (Files.exists(configCfg)) {
        log.fine(""String_Node_Str"");
        Files.copy(configCfg,configPath.resolve(""String_Node_Str""),StandardCopyOption.COPY_ATTRIBUTES,StandardCopyOption.REPLACE_EXISTING);
      }
    }
  }
 catch (  IOException e) {
    log.log(Level.INFO,""String_Node_Str"",e);
    throw new LawenaException(""String_Node_Str"",e);
  }
  try {
    log.fine(""String_Node_Str"");
    if (!Files.exists(customPath) || !Files.isDirectory(customPath)) {
      mkdir(customPath);
    }
    customPath.toFile().setWritable(true);
    Files.move(customPath,customBackupPath);
  }
 catch (  IOException e) {
    log.log(Level.INFO,""String_Node_Str"",e);
    throw new LawenaException(""String_Node_Str"",e);
  }
  try {
    log.fine(""String_Node_Str"");
    Path resourcePath=tfpath.resolve(""String_Node_Str"");
    Path scriptsPath=tfpath.resolve(""String_Node_Str"");
    mkdirs(resourcePath);
    mkdirs(scriptsPath);
    String hudName=cfg.getHud();
    if (!hudName.equals(""String_Node_Str"")) {
      copyReadOnly(Paths.get(""String_Node_Str"",hudName,""String_Node_Str""),resourcePath);
      copyReadOnly(Paths.get(""String_Node_Str"",hudName,""String_Node_Str""),scriptsPath);
      if (!hudName.equals(""String_Node_Str"")) {
        Files.copy(Paths.get(""String_Node_Str"",hudName,""String_Node_Str""),tfpath.resolve(""String_Node_Str""));
      }
    }
  }
 catch (  IOException e) {
    log.log(Level.INFO,""String_Node_Str"",e);
    throw new LawenaException(""String_Node_Str"",e);
  }
  Path skyboxPath=tfpath.resolve(""String_Node_Str"");
  try {
    String sky=cfg.getSkybox();
    if (sky != null && !sky.isEmpty() && !sky.equals(Key.Skybox.defValue())) {
      log.fine(""String_Node_Str"");
      mkdirs(skyboxPath);
      replaceSkybox();
    }
  }
 catch (  IOException e) {
    log.log(Level.INFO,""String_Node_Str"",e);
    try {
      delete(skyboxPath);
      log.fine(""String_Node_Str"");
    }
 catch (    IOException e1) {
      log.info(""String_Node_Str"" + e1);
    }
    throw new LawenaException(""String_Node_Str"",e);
  }
  if (customPathList != null) {
    copyCustomFiles();
  }
}",0.9900480439258752
161892,"public Lawena(SettingsManager cfg){
  String impl=this.getClass().getPackage().getImplementationVersion();
  if (impl != null) {
    version=impl;
  }
  build=getManifestString(""String_Node_Str"",Util.now(""String_Node_Str""));
  String osname=System.getProperty(""String_Node_Str"");
  if (osname.contains(""String_Node_Str"")) {
    cl=new CLWindows();
  }
 else   if (osname.contains(""String_Node_Str"")) {
    cl=new CLLinux();
  }
 else   if (osname.contains(""String_Node_Str"")) {
    cl=new CLOSX();
  }
 else {
    throw new UnsupportedOperationException(""String_Node_Str"");
  }
  cl.setLookAndFeel();
  updater=new UpdateHelper();
  updater.updateLauncher();
  updater.cleanupUnusedFiles();
  updater.loadChannels();
  settings=cfg;
  log.fine(""String_Node_Str"");
  oDxlevel=getOriginalDxlevel();
  Path steampath=cl.getSteamPath();
  if (!cl.isValidSteamPath(steampath)) {
    steampath=Paths.get(settings.getString(Key.AltSteamDir));
  }
  log.fine(""String_Node_Str"" + steampath);
  if (!cl.isValidSteamPath(steampath)) {
    log.warning(""String_Node_Str"");
    log.warning(""String_Node_Str"");
    log.info(""String_Node_Str"");
    steampath=getChosenSteamPath();
    if (steampath == null) {
      log.info(""String_Node_Str"");
      JOptionPane.showMessageDialog(null,""String_Node_Str"",""String_Node_Str"",JOptionPane.WARNING_MESSAGE);
      throw new IllegalArgumentException(""String_Node_Str"");
    }
    settings.setString(Key.AltSteamDir,steampath.toString());
  }
  settings.setString(Key.SteamDir,steampath.toString());
  Path tfpath=settings.getTfPath();
  if (tfpath == null || tfpath.toString().isEmpty()) {
    tfpath=steampath.resolve(""String_Node_Str"");
  }
  log.fine(""String_Node_Str"" + tfpath);
  if (!tfpath.getFileName().toString().equalsIgnoreCase(""String_Node_Str"") || !Files.exists(tfpath)) {
    tfpath=getChosenTfPath();
    if (tfpath == null) {
      log.info(""String_Node_Str"");
      JOptionPane.showMessageDialog(null,""String_Node_Str"",""String_Node_Str"",JOptionPane.WARNING_MESSAGE);
      throw new IllegalArgumentException(""String_Node_Str"");
    }
  }
  settings.setTfPath(tfpath);
  files=new FileManager(settings,cl);
  Path moviepath=settings.getMoviePath();
  log.info(""String_Node_Str"" + moviepath);
  if (moviepath == null || moviepath.toString().isEmpty() || !Files.exists(moviepath)) {
    moviepath=getChosenMoviePath();
    if (moviepath == null) {
      log.info(""String_Node_Str"");
      JOptionPane.showMessageDialog(null,""String_Node_Str"",""String_Node_Str"",JOptionPane.WARNING_MESSAGE);
      throw new IllegalArgumentException(""String_Node_Str"");
    }
  }
  movies=new MovieManager(settings);
  settings.setMoviePath(moviepath);
  log.fine(""String_Node_Str"");
  settings.save();
  log.fine(""String_Node_Str"");
  files.restoreAll();
  customPaths=new CustomPathList(settings,cl);
  files.setCustomPathList(customPaths);
  watcher=new Thread(new Runnable(){
    @Override public void run(){
      try {
        WatchDir w=new WatchDir(Paths.get(""String_Node_Str""),false){
          @Override public void entryCreated(          Path child){
            try {
              customPaths.addPath(child);
            }
 catch (            IOException e) {
              log.log(Level.FINE,""String_Node_Str"",e);
            }
          }
          @Override public void entryModified(          Path child){
            customPaths.updatePath(child);
          }
          @Override public void entryDeleted(          Path child){
            customPaths.removePath(child);
          }
        }
;
        w.processEvents();
      }
 catch (      IOException e) {
        log.log(Level.FINE,""String_Node_Str"",e);
      }
    }
  }
,""String_Node_Str"");
  watcher.setDaemon(true);
  vdm=new DemoEditor(settings,cl);
  log.fine(""String_Node_Str"");
}","public Lawena(SettingsManager cfg){
  String impl=this.getClass().getPackage().getImplementationVersion();
  if (impl != null) {
    version=impl;
  }
  build=getManifestString(""String_Node_Str"",Util.now(""String_Node_Str""));
  String osname=System.getProperty(""String_Node_Str"");
  if (osname.contains(""String_Node_Str"")) {
    cl=new CLWindows();
  }
 else   if (osname.contains(""String_Node_Str"")) {
    cl=new CLLinux();
  }
 else   if (osname.contains(""String_Node_Str"")) {
    cl=new CLOSX();
  }
 else {
    throw new UnsupportedOperationException(""String_Node_Str"");
  }
  cl.setLookAndFeel();
  updater=new UpdateHelper();
  updater.fileCleanup();
  updater.loadChannels();
  settings=cfg;
  log.fine(""String_Node_Str"");
  oDxlevel=getOriginalDxlevel();
  Path steampath=cl.getSteamPath();
  if (!cl.isValidSteamPath(steampath)) {
    steampath=Paths.get(settings.getString(Key.AltSteamDir));
  }
  log.fine(""String_Node_Str"" + steampath);
  if (!cl.isValidSteamPath(steampath)) {
    log.warning(""String_Node_Str"");
    log.warning(""String_Node_Str"");
    log.info(""String_Node_Str"");
    steampath=getChosenSteamPath();
    if (steampath == null) {
      log.info(""String_Node_Str"");
      JOptionPane.showMessageDialog(null,""String_Node_Str"",""String_Node_Str"",JOptionPane.WARNING_MESSAGE);
      throw new IllegalArgumentException(""String_Node_Str"");
    }
    settings.setString(Key.AltSteamDir,steampath.toString());
  }
  settings.setString(Key.SteamDir,steampath.toString());
  Path tfpath=settings.getTfPath();
  if (tfpath == null || tfpath.toString().isEmpty()) {
    tfpath=steampath.resolve(""String_Node_Str"");
  }
  log.fine(""String_Node_Str"" + tfpath);
  if (!tfpath.getFileName().toString().equalsIgnoreCase(""String_Node_Str"") || !Files.exists(tfpath)) {
    tfpath=getChosenTfPath();
    if (tfpath == null) {
      log.info(""String_Node_Str"");
      JOptionPane.showMessageDialog(null,""String_Node_Str"",""String_Node_Str"",JOptionPane.WARNING_MESSAGE);
      throw new IllegalArgumentException(""String_Node_Str"");
    }
  }
  settings.setTfPath(tfpath);
  files=new FileManager(settings,cl);
  Path moviepath=settings.getMoviePath();
  log.info(""String_Node_Str"" + moviepath);
  if (moviepath == null || moviepath.toString().isEmpty() || !Files.exists(moviepath)) {
    moviepath=getChosenMoviePath();
    if (moviepath == null) {
      log.info(""String_Node_Str"");
      JOptionPane.showMessageDialog(null,""String_Node_Str"",""String_Node_Str"",JOptionPane.WARNING_MESSAGE);
      throw new IllegalArgumentException(""String_Node_Str"");
    }
  }
  movies=new MovieManager(settings);
  settings.setMoviePath(moviepath);
  log.fine(""String_Node_Str"");
  settings.save();
  log.fine(""String_Node_Str"");
  files.restoreAll();
  customPaths=new CustomPathList(settings,cl);
  files.setCustomPathList(customPaths);
  watcher=new Thread(new Runnable(){
    @Override public void run(){
      try {
        WatchDir w=new WatchDir(Paths.get(""String_Node_Str""),false){
          @Override public void entryCreated(          Path child){
            try {
              customPaths.addPath(child);
            }
 catch (            IOException e) {
              log.log(Level.FINE,""String_Node_Str"",e);
            }
          }
          @Override public void entryModified(          Path child){
            customPaths.updatePath(child);
          }
          @Override public void entryDeleted(          Path child){
            customPaths.removePath(child);
          }
        }
;
        w.processEvents();
      }
 catch (      IOException e) {
        log.log(Level.FINE,""String_Node_Str"",e);
      }
    }
  }
,""String_Node_Str"");
  watcher.setDaemon(true);
  vdm=new DemoEditor(settings,cl);
  log.fine(""String_Node_Str"");
}",0.9929624219891116
161893,"/** 
 * Workaround to delete resources not used anymore by lawena, since Getdown does not support this out of the box.
 */
public void cleanupUnusedFiles(){
  try {
    Map<String,Object> config=ConfigUtil.parseConfig(new File(""String_Node_Str""),false);
    String[] toDelete=(String[])ConfigUtil.getMultiValue(config,""String_Node_Str"");
    for (    String path : toDelete) {
      try {
        if (Files.deleteIfExists(Paths.get(path))) {
          log.info(""String_Node_Str"" + path);
        }
      }
 catch (      IOException e) {
        log.log(Level.INFO,""String_Node_Str"" + path,e);
      }
    }
  }
 catch (  IllegalArgumentException|IOException e) {
    log.info(""String_Node_Str"" + e);
  }
}","private void cleanupUnusedFiles(){
  try {
    Map<String,Object> config=ConfigUtil.parseConfig(new File(""String_Node_Str""),false);
    String[] toDelete=(String[])ConfigUtil.getMultiValue(config,""String_Node_Str"");
    for (    String path : toDelete) {
      try {
        if (Files.deleteIfExists(Paths.get(path))) {
          log.info(""String_Node_Str"" + path);
        }
      }
 catch (      IOException e) {
        log.log(Level.INFO,""String_Node_Str"" + path,e);
      }
    }
  }
 catch (  IllegalArgumentException|IOException e) {
    log.info(""String_Node_Str"" + e);
  }
}",0.8944099378881988
161894,"@Override public String getSystemDxLevel(){
  try {
    int result=regQueryNumber(""String_Node_Str"",""String_Node_Str"");
    return result + ""String_Node_Str"";
  }
 catch (  NumberFormatException e) {
    log.warning(""String_Node_Str"" + e.toString() + ""String_Node_Str"");
    return ""String_Node_Str"";
  }
}","@Override public String getSystemDxLevel(){
  try {
    String result=regQueryNumber(""String_Node_Str"",""String_Node_Str"");
    return result;
  }
 catch (  IndexOutOfBoundsException e) {
    log.warning(""String_Node_Str"" + e.toString() + ""String_Node_Str"");
    return ""String_Node_Str"";
  }
}",0.9048414023372288
161895,"private int regQueryNumber(String key,String value){
  String result=regQueryLine(key,value);
  int number=Integer.decode(result.substring(result.lastIndexOf(""String_Node_Str""),result.indexOf(""String_Node_Str"",result.lastIndexOf(""String_Node_Str""))));
  log.finer(""String_Node_Str"" + key + ""String_Node_Str""+ value+ ""String_Node_Str""+ number);
  return number;
}","private String regQueryNumber(String key,String value){
  String result=regQueryLine(key,value);
  result=result.substring(result.lastIndexOf(""String_Node_Str"") + 2,result.indexOf(""String_Node_Str"",result.lastIndexOf(""String_Node_Str"")));
  log.finer(""String_Node_Str"" + key + ""String_Node_Str""+ value+ ""String_Node_Str""+ result);
  return result;
}",0.9029535864978904
161896,"public Lawena(SettingsManager cfg){
  String impl=this.getClass().getPackage().getImplementationVersion();
  if (impl != null) {
    version=impl;
  }
  build=getManifestString(""String_Node_Str"",Util.now(""String_Node_Str""));
  String osname=System.getProperty(""String_Node_Str"");
  if (osname.contains(""String_Node_Str"")) {
    cl=new CLWindows();
  }
 else   if (osname.contains(""String_Node_Str"")) {
    cl=new CLLinux();
  }
 else   if (osname.contains(""String_Node_Str"")) {
    cl=new CLOSX();
  }
 else {
    throw new UnsupportedOperationException(""String_Node_Str"");
  }
  cl.setLookAndFeel();
  updater=new UpdateHelper();
  updater.updateLauncher();
  updater.cleanupUnusedFiles();
  updater.loadChannels();
  settings=cfg;
  log.fine(""String_Node_Str"");
  oDxlevel=cl.getSystemDxLevel();
  Path steampath=cl.getSteamPath();
  if (steampath.toString().isEmpty()) {
    steampath=Paths.get(settings.getString(Key.AltSteamDir));
  }
  log.fine(""String_Node_Str"" + steampath);
  if (!steampath.getFileName().toString().equalsIgnoreCase(""String_Node_Str"") || !Files.exists(steampath)) {
    log.warning(""String_Node_Str"");
    log.warning(""String_Node_Str"");
    log.info(""String_Node_Str"");
    steampath=getChosenSteamPath();
    if (steampath == null) {
      log.info(""String_Node_Str"");
      JOptionPane.showMessageDialog(null,""String_Node_Str"",""String_Node_Str"",JOptionPane.WARNING_MESSAGE);
      throw new IllegalArgumentException(""String_Node_Str"");
    }
    settings.setString(Key.AltSteamDir,steampath.toString());
  }
  settings.setString(Key.SteamDir,steampath.toString());
  Path tfpath=settings.getTfPath();
  if (tfpath == null || tfpath.toString().isEmpty()) {
    tfpath=steampath.resolve(""String_Node_Str"");
  }
  log.fine(""String_Node_Str"" + tfpath);
  if (!tfpath.getFileName().toString().equalsIgnoreCase(""String_Node_Str"") || !Files.exists(tfpath)) {
    tfpath=getChosenTfPath();
    if (tfpath == null) {
      log.info(""String_Node_Str"");
      JOptionPane.showMessageDialog(null,""String_Node_Str"",""String_Node_Str"",JOptionPane.WARNING_MESSAGE);
      throw new IllegalArgumentException(""String_Node_Str"");
    }
  }
  settings.setTfPath(tfpath);
  files=new FileManager(settings,cl);
  Path moviepath=settings.getMoviePath();
  log.info(""String_Node_Str"" + moviepath);
  if (moviepath == null || moviepath.toString().isEmpty() || !Files.exists(moviepath)) {
    moviepath=getChosenMoviePath();
    if (moviepath == null) {
      log.info(""String_Node_Str"");
      JOptionPane.showMessageDialog(null,""String_Node_Str"",""String_Node_Str"",JOptionPane.WARNING_MESSAGE);
      throw new IllegalArgumentException(""String_Node_Str"");
    }
  }
  movies=new MovieManager(settings);
  settings.setMoviePath(moviepath);
  log.fine(""String_Node_Str"");
  settings.save();
  log.fine(""String_Node_Str"");
  files.restoreAll();
  customPaths=new CustomPathList(settings,cl);
  files.setCustomPathList(customPaths);
  watcher=new Thread(new Runnable(){
    @Override public void run(){
      try {
        WatchDir w=new WatchDir(Paths.get(""String_Node_Str""),false){
          @Override public void entryCreated(          Path child){
            try {
              customPaths.addPath(child);
            }
 catch (            IOException e) {
              log.log(Level.FINE,""String_Node_Str"",e);
            }
          }
          @Override public void entryModified(          Path child){
            customPaths.updatePath(child);
          }
          @Override public void entryDeleted(          Path child){
            customPaths.removePath(child);
          }
        }
;
        w.processEvents();
      }
 catch (      IOException e) {
        log.log(Level.FINE,""String_Node_Str"",e);
      }
    }
  }
,""String_Node_Str"");
  watcher.setDaemon(true);
  vdm=new DemoEditor(settings,cl);
  log.fine(""String_Node_Str"");
}","public Lawena(SettingsManager cfg){
  String impl=this.getClass().getPackage().getImplementationVersion();
  if (impl != null) {
    version=impl;
  }
  build=getManifestString(""String_Node_Str"",Util.now(""String_Node_Str""));
  String osname=System.getProperty(""String_Node_Str"");
  if (osname.contains(""String_Node_Str"")) {
    cl=new CLWindows();
  }
 else   if (osname.contains(""String_Node_Str"")) {
    cl=new CLLinux();
  }
 else   if (osname.contains(""String_Node_Str"")) {
    cl=new CLOSX();
  }
 else {
    throw new UnsupportedOperationException(""String_Node_Str"");
  }
  cl.setLookAndFeel();
  updater=new UpdateHelper();
  updater.updateLauncher();
  updater.cleanupUnusedFiles();
  updater.loadChannels();
  settings=cfg;
  log.fine(""String_Node_Str"");
  oDxlevel=getOriginalDxlevel();
  Path steampath=cl.getSteamPath();
  if (steampath.toString().isEmpty()) {
    steampath=Paths.get(settings.getString(Key.AltSteamDir));
  }
  log.fine(""String_Node_Str"" + steampath);
  if (!steampath.getFileName().toString().equalsIgnoreCase(""String_Node_Str"") || !Files.exists(steampath)) {
    log.warning(""String_Node_Str"");
    log.warning(""String_Node_Str"");
    log.info(""String_Node_Str"");
    steampath=getChosenSteamPath();
    if (steampath == null) {
      log.info(""String_Node_Str"");
      JOptionPane.showMessageDialog(null,""String_Node_Str"",""String_Node_Str"",JOptionPane.WARNING_MESSAGE);
      throw new IllegalArgumentException(""String_Node_Str"");
    }
    settings.setString(Key.AltSteamDir,steampath.toString());
  }
  settings.setString(Key.SteamDir,steampath.toString());
  Path tfpath=settings.getTfPath();
  if (tfpath == null || tfpath.toString().isEmpty()) {
    tfpath=steampath.resolve(""String_Node_Str"");
  }
  log.fine(""String_Node_Str"" + tfpath);
  if (!tfpath.getFileName().toString().equalsIgnoreCase(""String_Node_Str"") || !Files.exists(tfpath)) {
    tfpath=getChosenTfPath();
    if (tfpath == null) {
      log.info(""String_Node_Str"");
      JOptionPane.showMessageDialog(null,""String_Node_Str"",""String_Node_Str"",JOptionPane.WARNING_MESSAGE);
      throw new IllegalArgumentException(""String_Node_Str"");
    }
  }
  settings.setTfPath(tfpath);
  files=new FileManager(settings,cl);
  Path moviepath=settings.getMoviePath();
  log.info(""String_Node_Str"" + moviepath);
  if (moviepath == null || moviepath.toString().isEmpty() || !Files.exists(moviepath)) {
    moviepath=getChosenMoviePath();
    if (moviepath == null) {
      log.info(""String_Node_Str"");
      JOptionPane.showMessageDialog(null,""String_Node_Str"",""String_Node_Str"",JOptionPane.WARNING_MESSAGE);
      throw new IllegalArgumentException(""String_Node_Str"");
    }
  }
  movies=new MovieManager(settings);
  settings.setMoviePath(moviepath);
  log.fine(""String_Node_Str"");
  settings.save();
  log.fine(""String_Node_Str"");
  files.restoreAll();
  customPaths=new CustomPathList(settings,cl);
  files.setCustomPathList(customPaths);
  watcher=new Thread(new Runnable(){
    @Override public void run(){
      try {
        WatchDir w=new WatchDir(Paths.get(""String_Node_Str""),false){
          @Override public void entryCreated(          Path child){
            try {
              customPaths.addPath(child);
            }
 catch (            IOException e) {
              log.log(Level.FINE,""String_Node_Str"",e);
            }
          }
          @Override public void entryModified(          Path child){
            customPaths.updatePath(child);
          }
          @Override public void entryDeleted(          Path child){
            customPaths.removePath(child);
          }
        }
;
        w.processEvents();
      }
 catch (      IOException e) {
        log.log(Level.FINE,""String_Node_Str"",e);
      }
    }
  }
,""String_Node_Str"");
  watcher.setDaemon(true);
  vdm=new DemoEditor(settings,cl);
  log.fine(""String_Node_Str"");
}",0.9967536683547592
161897,"public void start(){
  view=new LawenaView();
  new StartLogger(""String_Node_Str"").toTextComponent(settings.getLogUiLevel(),view.getTextAreaLog());
  new StartLogger(""String_Node_Str"").toLabel(Level.FINE,view.getLblStatus());
  log.fine(""String_Node_Str"" + version + ""String_Node_Str""+ build);
  log.fine(""String_Node_Str"" + settings.getTfPath());
  log.fine(""String_Node_Str"" + cl.getSteamPath());
  log.fine(""String_Node_Str"" + settings.getMoviePath());
  log.fine(""String_Node_Str"" + Paths.get(""String_Node_Str"").toAbsolutePath());
  view.setTitle(""String_Node_Str"" + shortver());
  try {
    view.setIconImage(new ImageIcon(Lawena.class.getClassLoader().getResource(""String_Node_Str"")).getImage());
  }
 catch (  Exception e) {
  }
  view.addWindowListener(new WindowAdapter(){
    @Override public void windowClosing(    WindowEvent e){
      saveAndExit();
    }
  }
);
  view.getMntmAbout().addActionListener(new ActionListener(){
    @Override public void actionPerformed(    ActionEvent e){
      if (dialog == null) {
        dialog=new AboutDialog(version,build);
        dialog.setDefaultCloseOperation(JDialog.DISPOSE_ON_CLOSE);
        dialog.setModalityType(ModalityType.APPLICATION_MODAL);
        dialog.getBtnUpdater().addActionListener(new ActionListener(){
          @Override public void actionPerformed(          ActionEvent e){
            updater.showSwitchUpdateChannelDialog();
          }
        }
);
      }
      dialog.setVisible(true);
    }
  }
);
  view.getMntmSelectEnhancedParticles().addActionListener(new ActionListener(){
    @Override public void actionPerformed(    ActionEvent e){
      startParticlesDialog();
    }
  }
);
  view.getMntmAddCustomSettings().addActionListener(new ActionListener(){
    @Override public void actionPerformed(    ActionEvent e){
      JTextArea custom=getCustomSettingsTextArea();
      String previous=custom.getText();
      int result=JOptionPane.showConfirmDialog(view,getCustomSettingsScrollPane(),""String_Node_Str"",JOptionPane.OK_CANCEL_OPTION,JOptionPane.PLAIN_MESSAGE);
      if (result == JOptionPane.OK_OPTION) {
        log.info(""String_Node_Str"" + custom.getText());
        saveSettings();
      }
 else {
        custom.setText(previous);
      }
    }
  }
);
  final JTable table=view.getTableCustomContent();
  table.setModel(customPaths);
  table.getColumnModel().getColumn(0).setMaxWidth(20);
  table.getColumnModel().getColumn(2).setMaxWidth(50);
  table.setDefaultRenderer(CustomPath.class,new TooltipRenderer(settings));
  table.getModel().addTableModelListener(new TableModelListener(){
    @Override public void tableChanged(    TableModelEvent e){
      if (e.getColumn() == CustomPathList.Column.SELECTED.ordinal()) {
        int row=e.getFirstRow();
        TableModel model=(TableModel)e.getSource();
        CustomPath cp=(CustomPath)model.getValueAt(row,CustomPathList.Column.PATH.ordinal());
        checkCustomHud(cp);
        if (cp == CustomPathList.particles && cp.isSelected()) {
          startParticlesDialog();
        }
      }
    }
  }
);
  table.setDropTarget(new DropTarget(){
    private static final long serialVersionUID=1L;
    @Override public synchronized void dragOver(    DropTargetDragEvent dtde){
      Point point=dtde.getLocation();
      int row=table.rowAtPoint(point);
      if (row < 0) {
        table.clearSelection();
      }
 else {
        table.setRowSelectionInterval(row,row);
      }
      dtde.acceptDrag(DnDConstants.ACTION_COPY);
    }
    @Override public synchronized void drop(    DropTargetDropEvent dtde){
      if (dtde.isDataFlavorSupported(DataFlavor.javaFileListFlavor)) {
        dtde.acceptDrop(DnDConstants.ACTION_COPY);
        Transferable t=dtde.getTransferable();
        List<?> fileList=null;
        try {
          fileList=(List<?>)t.getTransferData(DataFlavor.javaFileListFlavor);
          if (fileList.size() > 0) {
            table.clearSelection();
            for (            Object value : fileList) {
              if (value instanceof File) {
                File f=(File)value;
                log.info(""String_Node_Str"" + f.toPath());
                new PathCopyTask(f.toPath()).execute();
              }
            }
          }
        }
 catch (        UnsupportedFlavorException e) {
          log.log(Level.FINE,""String_Node_Str"",e);
        }
catch (        IOException e) {
          log.log(Level.FINE,""String_Node_Str"",e);
        }
      }
 else {
        dtde.rejectDrop();
      }
    }
  }
);
  TableRowSorter<CustomPathList> sorter=new TableRowSorter<>(customPaths);
  table.setRowSorter(sorter);
  RowFilter<CustomPathList,Object> filter=new RowFilter<CustomPathList,Object>(){
    public boolean include(    Entry<? extends CustomPathList,? extends Object> entry){
      CustomPath cp=(CustomPath)entry.getValue(CustomPathList.Column.PATH.ordinal());
      return !cp.getContents().contains(PathContents.READONLY);
    }
  }
;
  sorter.setRowFilter(filter);
  new PathScanTask().execute();
  new SwingWorker<Void,Void>(){
    @Override protected Void doInBackground() throws Exception {
      try {
        configureSkyboxes(view.getCmbSkybox());
      }
 catch (      Exception e) {
        log.log(Level.INFO,""String_Node_Str"",e);
      }
      return null;
    }
    @Override protected void done(){
      selectSkyboxFromSettings();
    }
  }
.execute();
  loadSettings();
  view.getMntmChangeTfDirectory().addActionListener(new Tf2FolderChange());
  view.getMntmChangeMovieDirectory().addActionListener(new MovieFolderChange());
  view.getMntmRevertToDefault().addActionListener(new ActionListener(){
    @Override public void actionPerformed(    ActionEvent e){
      Path movies=settings.getMoviePath();
      settings.loadDefaults();
      settings.setMoviePath(movies);
      loadSettings();
      customPaths.loadResourceSettings();
      loadHudComboState();
      saveSettings();
    }
  }
);
  view.getMntmExit().addActionListener(new ActionListener(){
    @Override public void actionPerformed(    ActionEvent e){
      saveAndExit();
    }
  }
);
  view.getMntmSaveSettings().addActionListener(new ActionListener(){
    @Override public void actionPerformed(    ActionEvent e){
      saveSettings();
    }
  }
);
  view.getBtnStartTf().addActionListener(new ActionListener(){
    @Override public void actionPerformed(    ActionEvent e){
      new StartTfTask().execute();
    }
  }
);
  view.getBtnClearMovieFolder().addActionListener(new ActionListener(){
    @Override public void actionPerformed(    ActionEvent e){
      startSegmentsDialog();
    }
  }
);
  view.getMntmOpenMovieFolder().addActionListener(new ActionListener(){
    @Override public void actionPerformed(    ActionEvent e){
      new SwingWorker<Void,Void>(){
        protected Void doInBackground() throws Exception {
          try {
            Desktop.getDesktop().open(settings.getMoviePath().toFile());
          }
 catch (          IOException ex) {
            log.log(Level.FINE,""String_Node_Str"",ex);
          }
          return null;
        }
      }
.execute();
    }
  }
);
  view.getMntmOpenCustomFolder().addActionListener(new ActionListener(){
    @Override public void actionPerformed(    ActionEvent e){
      new SwingWorker<Void,Void>(){
        protected Void doInBackground() throws Exception {
          try {
            Desktop.getDesktop().open(Paths.get(""String_Node_Str"").toFile());
          }
 catch (          IOException ex) {
            log.log(Level.FINE,""String_Node_Str"",ex);
          }
          return null;
        }
      }
.execute();
    }
  }
);
  view.getChckbxmntmInsecure().addActionListener(new ActionListener(){
    @Override public void actionPerformed(    ActionEvent e){
      settings.setInsecure(view.getChckbxmntmInsecure().isSelected());
    }
  }
);
  view.getMntmLaunchTimeout().addActionListener(new ActionListener(){
    @Override public void actionPerformed(    ActionEvent e){
      Object answer=JOptionPane.showInputDialog(view,""String_Node_Str"" + ""String_Node_Str"" + ""String_Node_Str"",""String_Node_Str"",JOptionPane.PLAIN_MESSAGE,null,null,settings.getLaunchTimeout());
      if (answer != null) {
        try {
          int value=Integer.parseInt(answer.toString());
          settings.setLaunchTimeout(value);
        }
 catch (        IllegalArgumentException ex) {
          JOptionPane.showMessageDialog(view,""String_Node_Str"",""String_Node_Str"",JOptionPane.WARNING_MESSAGE);
        }
      }
    }
  }
);
  view.getCustomLaunchOptionsMenuItem().addActionListener(new ActionListener(){
    @Override public void actionPerformed(    ActionEvent e){
      if (launchOptionsDialog == null) {
        launchOptionsDialog=new LaunchOptionsDialog();
      }
      launchOptionsDialog.getOptionsTextField().setText(settings.getString(Key.LaunchOptions));
      int result=launchOptionsDialog.showDialog();
      if (result == JOptionPane.YES_OPTION) {
        String launchOptions=launchOptionsDialog.getOptionsTextField().getText();
        settings.setString(Key.LaunchOptions,launchOptions);
      }
 else       if (result == 1) {
        settings.setString(Key.LaunchOptions,(String)Key.LaunchOptions.defValue());
      }
    }
  }
);
  view.getCmbViewmodel().addItemListener(new ItemListener(){
    @Override public void itemStateChanged(    ItemEvent e){
      if (e.getStateChange() == ItemEvent.SELECTED) {
        checkViewmodelState();
      }
    }
  }
);
  view.getCmbSourceVideoFormat().addItemListener(new ItemListener(){
    @Override public void itemStateChanged(    ItemEvent e){
      if (e.getStateChange() == ItemEvent.SELECTED) {
        checkFrameFormatState();
      }
    }
  }
);
  view.getTabbedPane().addTab(""String_Node_Str"",null,vdm.start());
  view.setVisible(true);
}","public void start(){
  view=new LawenaView();
  new StartLogger(""String_Node_Str"").toTextComponent(settings.getLogUiLevel(),view.getTextAreaLog());
  new StartLogger(""String_Node_Str"").toLabel(Level.FINE,view.getLblStatus());
  log.fine(""String_Node_Str"" + version + ""String_Node_Str""+ build);
  log.fine(""String_Node_Str"" + settings.getTfPath());
  log.fine(""String_Node_Str"" + cl.getSteamPath());
  log.fine(""String_Node_Str"" + settings.getMoviePath());
  log.fine(""String_Node_Str"" + Paths.get(""String_Node_Str"").toAbsolutePath());
  view.setTitle(""String_Node_Str"" + shortver());
  try {
    view.setIconImage(new ImageIcon(Lawena.class.getClassLoader().getResource(""String_Node_Str"")).getImage());
  }
 catch (  Exception e) {
  }
  view.addWindowListener(new WindowAdapter(){
    @Override public void windowClosing(    WindowEvent e){
      saveAndExit();
    }
  }
);
  view.getMntmAbout().addActionListener(new ActionListener(){
    @Override public void actionPerformed(    ActionEvent e){
      if (dialog == null) {
        dialog=new AboutDialog(version,build);
        dialog.setDefaultCloseOperation(JDialog.DISPOSE_ON_CLOSE);
        dialog.setModalityType(ModalityType.APPLICATION_MODAL);
        dialog.getBtnUpdater().addActionListener(new ActionListener(){
          @Override public void actionPerformed(          ActionEvent e){
            updater.showSwitchUpdateChannelDialog();
          }
        }
);
      }
      dialog.setVisible(true);
    }
  }
);
  view.getMntmSelectEnhancedParticles().addActionListener(new ActionListener(){
    @Override public void actionPerformed(    ActionEvent e){
      startParticlesDialog();
    }
  }
);
  view.getMntmAddCustomSettings().addActionListener(new ActionListener(){
    @Override public void actionPerformed(    ActionEvent e){
      JTextArea custom=getCustomSettingsTextArea();
      String previous=custom.getText();
      int result=JOptionPane.showConfirmDialog(view,getCustomSettingsScrollPane(),""String_Node_Str"",JOptionPane.OK_CANCEL_OPTION,JOptionPane.PLAIN_MESSAGE);
      if (result == JOptionPane.OK_OPTION) {
        log.info(""String_Node_Str"" + custom.getText());
        saveSettings();
      }
 else {
        custom.setText(previous);
      }
    }
  }
);
  final JTable table=view.getTableCustomContent();
  table.setModel(customPaths);
  table.getColumnModel().getColumn(0).setMaxWidth(20);
  table.getColumnModel().getColumn(2).setMaxWidth(50);
  table.setDefaultRenderer(CustomPath.class,new TooltipRenderer(settings));
  table.getModel().addTableModelListener(new TableModelListener(){
    @Override public void tableChanged(    TableModelEvent e){
      if (e.getColumn() == CustomPathList.Column.SELECTED.ordinal()) {
        int row=e.getFirstRow();
        TableModel model=(TableModel)e.getSource();
        CustomPath cp=(CustomPath)model.getValueAt(row,CustomPathList.Column.PATH.ordinal());
        checkCustomHud(cp);
        if (cp == CustomPathList.particles && cp.isSelected()) {
          startParticlesDialog();
        }
      }
    }
  }
);
  table.setDropTarget(new DropTarget(){
    private static final long serialVersionUID=1L;
    @Override public synchronized void dragOver(    DropTargetDragEvent dtde){
      Point point=dtde.getLocation();
      int row=table.rowAtPoint(point);
      if (row < 0) {
        table.clearSelection();
      }
 else {
        table.setRowSelectionInterval(row,row);
      }
      dtde.acceptDrag(DnDConstants.ACTION_COPY);
    }
    @Override public synchronized void drop(    DropTargetDropEvent dtde){
      if (dtde.isDataFlavorSupported(DataFlavor.javaFileListFlavor)) {
        dtde.acceptDrop(DnDConstants.ACTION_COPY);
        Transferable t=dtde.getTransferable();
        List<?> fileList=null;
        try {
          fileList=(List<?>)t.getTransferData(DataFlavor.javaFileListFlavor);
          if (fileList.size() > 0) {
            table.clearSelection();
            for (            Object value : fileList) {
              if (value instanceof File) {
                File f=(File)value;
                log.info(""String_Node_Str"" + f.toPath());
                new PathCopyTask(f.toPath()).execute();
              }
            }
          }
        }
 catch (        UnsupportedFlavorException e) {
          log.log(Level.FINE,""String_Node_Str"",e);
        }
catch (        IOException e) {
          log.log(Level.FINE,""String_Node_Str"",e);
        }
      }
 else {
        dtde.rejectDrop();
      }
    }
  }
);
  TableRowSorter<CustomPathList> sorter=new TableRowSorter<>(customPaths);
  table.setRowSorter(sorter);
  RowFilter<CustomPathList,Object> filter=new RowFilter<CustomPathList,Object>(){
    public boolean include(    Entry<? extends CustomPathList,? extends Object> entry){
      CustomPath cp=(CustomPath)entry.getValue(CustomPathList.Column.PATH.ordinal());
      return !cp.getContents().contains(PathContents.READONLY);
    }
  }
;
  sorter.setRowFilter(filter);
  SwingWorker<Void,Void> scannerTask=new PathScanTask();
  SwingWorker<Void,Void> skySetupTask=new SwingWorker<Void,Void>(){
    @Override protected Void doInBackground() throws Exception {
      try {
        configureSkyboxes(view.getCmbSkybox());
      }
 catch (      Exception e) {
        log.log(Level.INFO,""String_Node_Str"",e);
      }
      return null;
    }
    @Override protected void done(){
      selectSkyboxFromSettings();
    }
  }
;
  scannerTask.execute();
  skySetupTask.execute();
  waitForTask(scannerTask);
  waitForTask(skySetupTask);
  loadSettings();
  view.getMntmChangeTfDirectory().addActionListener(new Tf2FolderChange());
  view.getMntmChangeMovieDirectory().addActionListener(new MovieFolderChange());
  view.getMntmRevertToDefault().addActionListener(new ActionListener(){
    @Override public void actionPerformed(    ActionEvent e){
      Path movies=settings.getMoviePath();
      settings.loadDefaults();
      settings.setMoviePath(movies);
      loadSettings();
      customPaths.loadResourceSettings();
      loadHudComboState();
      saveSettings();
    }
  }
);
  view.getMntmExit().addActionListener(new ActionListener(){
    @Override public void actionPerformed(    ActionEvent e){
      saveAndExit();
    }
  }
);
  view.getMntmSaveSettings().addActionListener(new ActionListener(){
    @Override public void actionPerformed(    ActionEvent e){
      saveSettings();
    }
  }
);
  view.getBtnStartTf().addActionListener(new ActionListener(){
    @Override public void actionPerformed(    ActionEvent e){
      new StartTfTask().execute();
    }
  }
);
  view.getBtnClearMovieFolder().addActionListener(new ActionListener(){
    @Override public void actionPerformed(    ActionEvent e){
      startSegmentsDialog();
    }
  }
);
  view.getMntmOpenMovieFolder().addActionListener(new ActionListener(){
    @Override public void actionPerformed(    ActionEvent e){
      new SwingWorker<Void,Void>(){
        protected Void doInBackground() throws Exception {
          try {
            Desktop.getDesktop().open(settings.getMoviePath().toFile());
          }
 catch (          IOException ex) {
            log.log(Level.FINE,""String_Node_Str"",ex);
          }
          return null;
        }
      }
.execute();
    }
  }
);
  view.getMntmOpenCustomFolder().addActionListener(new ActionListener(){
    @Override public void actionPerformed(    ActionEvent e){
      new SwingWorker<Void,Void>(){
        protected Void doInBackground() throws Exception {
          try {
            Desktop.getDesktop().open(Paths.get(""String_Node_Str"").toFile());
          }
 catch (          IOException ex) {
            log.log(Level.FINE,""String_Node_Str"",ex);
          }
          return null;
        }
      }
.execute();
    }
  }
);
  view.getChckbxmntmInsecure().addActionListener(new ActionListener(){
    @Override public void actionPerformed(    ActionEvent e){
      settings.setInsecure(view.getChckbxmntmInsecure().isSelected());
    }
  }
);
  view.getMntmLaunchTimeout().addActionListener(new ActionListener(){
    @Override public void actionPerformed(    ActionEvent e){
      Object answer=JOptionPane.showInputDialog(view,""String_Node_Str"" + ""String_Node_Str"" + ""String_Node_Str"",""String_Node_Str"",JOptionPane.PLAIN_MESSAGE,null,null,settings.getLaunchTimeout());
      if (answer != null) {
        try {
          int value=Integer.parseInt(answer.toString());
          settings.setLaunchTimeout(value);
        }
 catch (        IllegalArgumentException ex) {
          JOptionPane.showMessageDialog(view,""String_Node_Str"",""String_Node_Str"",JOptionPane.WARNING_MESSAGE);
        }
      }
    }
  }
);
  view.getCustomLaunchOptionsMenuItem().addActionListener(new ActionListener(){
    @Override public void actionPerformed(    ActionEvent e){
      if (launchOptionsDialog == null) {
        launchOptionsDialog=new LaunchOptionsDialog();
      }
      launchOptionsDialog.getOptionsTextField().setText(settings.getString(Key.LaunchOptions));
      int result=launchOptionsDialog.showDialog();
      if (result == JOptionPane.YES_OPTION) {
        String launchOptions=launchOptionsDialog.getOptionsTextField().getText();
        settings.setString(Key.LaunchOptions,launchOptions);
      }
 else       if (result == 1) {
        settings.setString(Key.LaunchOptions,(String)Key.LaunchOptions.defValue());
      }
    }
  }
);
  view.getCmbViewmodel().addItemListener(new ItemListener(){
    @Override public void itemStateChanged(    ItemEvent e){
      if (e.getStateChange() == ItemEvent.SELECTED) {
        checkViewmodelState();
      }
    }
  }
);
  view.getCmbSourceVideoFormat().addItemListener(new ItemListener(){
    @Override public void itemStateChanged(    ItemEvent e){
      if (e.getStateChange() == ItemEvent.SELECTED) {
        checkFrameFormatState();
      }
    }
  }
);
  view.getTabbedPane().addTab(""String_Node_Str"",null,vdm.start());
  view.setVisible(true);
}",0.9904849132447971
161898,"private static FileSystem createZipFileSystem(Path path,boolean create) throws IOException {
  final URI uri=URI.create(""String_Node_Str"" + path.toUri().getRawPath());
  final Map<String,String> env=new HashMap<>();
  if (create) {
    env.put(""String_Node_Str"",""String_Node_Str"");
  }
  return FileSystems.newFileSystem(uri,env);
}","private static FileSystem createZipFileSystem(Path path,boolean create) throws IOException {
  final URI uri=URI.create(""String_Node_Str"" + path.toUri());
  final Map<String,String> env=new HashMap<>();
  if (create) {
    env.put(""String_Node_Str"",""String_Node_Str"");
  }
  return FileSystems.newFileSystem(uri,env);
}",0.980030721966206
161899,"@Override public boolean isRunningTF2(){
  boolean found=false;
  try {
    ProcessBuilder pb=new ProcessBuilder(""String_Node_Str"",""String_Node_Str"");
    Process pr=pb.start();
    BufferedReader input=new BufferedReader(new InputStreamReader(pr.getInputStream()));
    String line;
    line=input.readLine();
    if (line != null) {
      found=true;
    }
    input.close();
  }
 catch (  IOException e) {
    log.log(Level.INFO,""String_Node_Str"",e);
  }
  return found;
}","@Override public boolean isRunningTF2(){
  boolean found=false;
  try {
    ProcessBuilder pb=new ProcessBuilder(""String_Node_Str"",""String_Node_Str"");
    Process pr=pb.start();
    try (BufferedReader input=newProcessReader(pr)){
      String line;
      line=input.readLine();
      if (line != null) {
        found=true;
      }
    }
   }
 catch (  IOException e) {
    log.log(Level.INFO,""String_Node_Str"",e);
  }
  return found;
}",0.7960526315789473
161900,"@Override public boolean isRunningTF2(){
  boolean found=false;
  try {
    ProcessBuilder pb=new ProcessBuilder(""String_Node_Str"",""String_Node_Str"");
    Process pr=pb.start();
    BufferedReader input=new BufferedReader(new InputStreamReader(pr.getInputStream()));
    String line;
    line=input.readLine();
    if (line != null) {
      found=true;
    }
    input.close();
  }
 catch (  IOException e) {
    log.log(Level.INFO,""String_Node_Str"",e);
  }
  return found;
}","@Override public boolean isRunningTF2(){
  boolean found=false;
  try {
    ProcessBuilder pb=new ProcessBuilder(""String_Node_Str"",""String_Node_Str"");
    Process pr=pb.start();
    try (BufferedReader input=newProcessReader(pr)){
      String line;
      line=input.readLine();
      if (line != null) {
        found=true;
      }
    }
   }
 catch (  IOException e) {
    log.log(Level.INFO,""String_Node_Str"",e);
  }
  return found;
}",0.7960526315789473
161901,"@Override public void closeHandles(Path path){
  try {
    ProcessBuilder pb=new ProcessBuilder(""String_Node_Str"",path.toString());
    Process pr=pb.start();
    BufferedReader input=new BufferedReader(new InputStreamReader(pr.getInputStream()));
    String line;
    int count=0;
    while ((line=input.readLine()) != null) {
      if (count > 4) {
        String[] columns=line.split(""String_Node_Str"");
        if (columns.length == 4) {
          log.info(""String_Node_Str"" + columns[3] + ""String_Node_Str""+ columns[0]);
          closeHandle(columns[1],columns[2]);
        }
 else {
          log.info(""String_Node_Str"" + line);
        }
      }
      count++;
    }
    pr.waitFor();
  }
 catch (  InterruptedException|IOException e) {
    log.log(Level.INFO,""String_Node_Str"",e);
  }
}","@Override public void closeHandles(Path path){
  try {
    ProcessBuilder pb=new ProcessBuilder(""String_Node_Str"",path.toString());
    Process pr=pb.start();
    try (BufferedReader input=newProcessReader(pr)){
      String line;
      int count=0;
      while ((line=input.readLine()) != null) {
        if (count > 4) {
          String[] columns=line.split(""String_Node_Str"");
          if (columns.length == 4) {
            log.info(""String_Node_Str"" + columns[3] + ""String_Node_Str""+ columns[0]);
            closeHandle(columns[1],columns[2]);
          }
 else {
            log.info(""String_Node_Str"" + line);
          }
        }
        count++;
      }
    }
     pr.waitFor();
  }
 catch (  InterruptedException|IOException e) {
    log.log(Level.INFO,""String_Node_Str"",e);
  }
}",0.9112649465072372
161902,"@Override public void delete(Path path){
  try {
    ProcessBuilder pb=new ProcessBuilder(""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",path.toString());
    Process pr=pb.start();
    BufferedReader input=new BufferedReader(new InputStreamReader(pr.getInputStream()));
    String line;
    while ((line=input.readLine()) != null) {
      log.info(""String_Node_Str"" + line);
    }
    pr.waitFor();
  }
 catch (  InterruptedException|IOException e) {
    log.log(Level.INFO,""String_Node_Str"",e);
  }
}","@Override public void delete(Path path){
  try {
    ProcessBuilder pb=new ProcessBuilder(""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",path.toString());
    Process pr=pb.start();
    try (BufferedReader input=newProcessReader(pr)){
      String line;
      while ((line=input.readLine()) != null) {
        log.info(""String_Node_Str"" + line);
      }
    }
     pr.waitFor();
  }
 catch (  InterruptedException|IOException e) {
    log.log(Level.INFO,""String_Node_Str"",e);
  }
}",0.8942937324602432
161903,"@Override public boolean isRunningTF2(){
  String line;
  ProcessBuilder[] builders={new ProcessBuilder(""String_Node_Str"",""String_Node_Str"",""String_Node_Str"" + hl2 + ""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str""),new ProcessBuilder(""String_Node_Str"",""String_Node_Str"",new File(""String_Node_Str"").getPath(),hl2)};
  for (  ProcessBuilder pb : builders) {
    try {
      Process p=pb.start();
      BufferedReader input=new BufferedReader(new InputStreamReader(p.getInputStream()));
      while ((line=input.readLine()) != null) {
        log.finest(""String_Node_Str"" + pb.command().get(0) + ""String_Node_Str""+ line);
        if (line.contains(hl2)) {
          log.finer(""String_Node_Str"" + pb.command().get(0));
          return true;
        }
      }
      input.close();
    }
 catch (    IOException e) {
      log.log(Level.INFO,""String_Node_Str"",e);
    }
  }
  log.finer(""String_Node_Str"");
  return false;
}","@Override public boolean isRunningTF2(){
  String line;
  ProcessBuilder[] builders={new ProcessBuilder(""String_Node_Str"",""String_Node_Str"",""String_Node_Str"" + hl2 + ""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str""),new ProcessBuilder(""String_Node_Str"",""String_Node_Str"",new File(""String_Node_Str"").getPath(),hl2)};
  for (  ProcessBuilder pb : builders) {
    try {
      Process p=pb.start();
      try (BufferedReader input=newProcessReader(p)){
        while ((line=input.readLine()) != null) {
          log.finest(""String_Node_Str"" + pb.command().get(0) + ""String_Node_Str""+ line);
          if (line.contains(hl2)) {
            log.finer(""String_Node_Str"" + pb.command().get(0));
            return true;
          }
        }
      }
     }
 catch (    IOException e) {
      log.log(Level.INFO,""String_Node_Str"",e);
    }
  }
  log.finer(""String_Node_Str"");
  return false;
}",0.945945945945946
161904,"private void closeHandle(String pid,String handle){
  try {
    ProcessBuilder pb=new ProcessBuilder(""String_Node_Str"",""String_Node_Str"",handle,""String_Node_Str"",pid,""String_Node_Str"");
    Process pr=pb.start();
    BufferedReader input=new BufferedReader(new InputStreamReader(pr.getInputStream()));
    String line;
    int count=0;
    while ((line=input.readLine()) != null) {
      if (count > 7) {
        log.info(""String_Node_Str"" + line);
      }
      count++;
    }
    pr.waitFor();
  }
 catch (  InterruptedException|IOException e) {
    log.log(Level.INFO,""String_Node_Str"",e);
  }
}","private void closeHandle(String pid,String handle){
  try {
    ProcessBuilder pb=new ProcessBuilder(""String_Node_Str"",""String_Node_Str"",handle,""String_Node_Str"",pid,""String_Node_Str"");
    Process pr=pb.start();
    try (BufferedReader input=newProcessReader(pr)){
      String line;
      int count=0;
      while ((line=input.readLine()) != null) {
        if (count > 7) {
          log.info(""String_Node_Str"" + line);
        }
        count++;
      }
    }
     pr.waitFor();
  }
 catch (  InterruptedException|IOException e) {
    log.log(Level.INFO,""String_Node_Str"",e);
  }
}",0.8909551986475064
161905,"private String regQuery(String key,String value,int mode){
  String result=""String_Node_Str"";
  try {
    ProcessBuilder pb=new ProcessBuilder(""String_Node_Str"",""String_Node_Str"",key,""String_Node_Str"",value);
    Process pr=pb.start();
    BufferedReader input=new BufferedReader(new InputStreamReader(pr.getInputStream()));
    String line;
    while ((line=input.readLine()) != null) {
      result=result + line + '\n';
    }
    pr.waitFor();
  }
 catch (  InterruptedException|IOException e) {
    log.log(Level.INFO,""String_Node_Str"",e);
  }
  try {
    if (mode == 0) {
      return result.substring(result.lastIndexOf(""String_Node_Str"") + 2,result.indexOf('\n',result.lastIndexOf(""String_Node_Str"")));
    }
    return result.substring(result.lastIndexOf(""String_Node_Str"") - 1,result.indexOf('\n',result.lastIndexOf(""String_Node_Str"")));
  }
 catch (  IndexOutOfBoundsException e) {
    return ""String_Node_Str"";
  }
}","private String regQuery(String key,String value,int mode){
  StringBuilder result=new StringBuilder();
  try {
    ProcessBuilder pb=new ProcessBuilder(""String_Node_Str"",""String_Node_Str"",key,""String_Node_Str"",value);
    Process pr=pb.start();
    try (BufferedReader input=newProcessReader(pr)){
      String line;
      while ((line=input.readLine()) != null) {
        result.append(line + '\n');
      }
    }
     pr.waitFor();
  }
 catch (  InterruptedException|IOException e) {
    log.log(Level.INFO,""String_Node_Str"",e);
  }
  try {
    if (mode == 0) {
      return result.substring(result.lastIndexOf(""String_Node_Str"") + 2,result.indexOf(""String_Node_Str"",result.lastIndexOf(""String_Node_Str"")));
    }
    return result.substring(result.lastIndexOf(""String_Node_Str"") - 1,result.indexOf(""String_Node_Str"",result.lastIndexOf(""String_Node_Str"")));
  }
 catch (  IndexOutOfBoundsException e) {
    return ""String_Node_Str"";
  }
}",0.8773433315479379
161906,"/** 
 * Generate an preview image representing a specified skybox.
 * @param skyboxFilename The filename of the skybox to generate the preview
 * @see #getBuilderVTFCmd(String)
 */
public void generatePreview(String skyboxFilename){
  try {
    ProcessBuilder pb=getBuilderVTFCmd(skyboxFilename);
    log.finer(""String_Node_Str"" + pb.command());
    Process pr=pb.start();
    BufferedReader input=new BufferedReader(new InputStreamReader(pr.getInputStream()));
    String line;
    while ((line=input.readLine()) != null) {
      log.finer(""String_Node_Str"" + line);
    }
    pr.waitFor();
  }
 catch (  InterruptedException|IOException e) {
    log.log(Level.INFO,""String_Node_Str"",e);
  }
}","/** 
 * Generate an preview image representing a specified skybox.
 * @param skyboxFilename The filename of the skybox to generate the preview
 * @see #getBuilderVTFCmd(String)
 */
public void generatePreview(String skyboxFilename){
  try {
    ProcessBuilder pb=getBuilderVTFCmd(skyboxFilename);
    log.finer(""String_Node_Str"" + pb.command());
    Process pr=pb.start();
    try (BufferedReader input=newProcessReader(pr)){
      String line;
      while ((line=input.readLine()) != null) {
        log.finer(""String_Node_Str"" + line);
      }
    }
     pr.waitFor();
  }
 catch (  InterruptedException|IOException e) {
    log.log(Level.INFO,""String_Node_Str"",e);
  }
}",0.9173372348207754
161907,"/** 
 * List the files of a specified VPK file.
 * @param tfpath The {@link Path} where HL2 main executable for TF2 is located
 * @param vpkpath The <code>Path</code> where the VPK file to search is located
 * @return A {@link List} of <code>String</code>s of all the files inside the specified VPK file.
 */
public List<String> getVpkContents(Path tfpath,Path vpkpath){
  List<String> files=new ArrayList<>();
  try {
    Path vpktool=resolveVpkToolPath(tfpath);
    ProcessBuilder pb=new ProcessBuilder(vpktool.toString(),""String_Node_Str"",vpkpath.toString());
    Process pr=pb.start();
    BufferedReader input=new BufferedReader(new InputStreamReader(pr.getInputStream()));
    String line;
    while ((line=input.readLine()) != null) {
      files.add(line);
    }
    pr.waitFor();
    log.finer(""String_Node_Str"" + vpkpath.getFileName() + ""String_Node_Str""+ files.size()+ ""String_Node_Str"");
  }
 catch (  InterruptedException|IOException e) {
    log.info(""String_Node_Str"" + vpkpath);
  }
  return files;
}","/** 
 * List the files of a specified VPK file.
 * @param tfpath The {@link Path} where HL2 main executable for TF2 is located
 * @param vpkpath The <code>Path</code> where the VPK file to search is located
 * @return A {@link List} of <code>String</code>s of all the files inside the specified VPK file.
 */
public List<String> getVpkContents(Path tfpath,Path vpkpath){
  List<String> files=new ArrayList<>();
  try {
    Path vpktool=resolveVpkToolPath(tfpath);
    ProcessBuilder pb=new ProcessBuilder(vpktool.toString(),""String_Node_Str"",vpkpath.toString());
    Process pr=pb.start();
    try (BufferedReader input=newProcessReader(pr)){
      String line;
      while ((line=input.readLine()) != null) {
        files.add(line);
      }
    }
     pr.waitFor();
    log.finer(""String_Node_Str"" + vpkpath.getFileName() + ""String_Node_Str""+ files.size()+ ""String_Node_Str"");
  }
 catch (  InterruptedException|IOException e) {
    log.info(""String_Node_Str"" + vpkpath);
  }
  return files;
}",0.9438090502237692
161908,"/** 
 * Stop or kill the TF2 process, whether it's being run from the tool or not.
 * @see #getBuilderTF2ProcessKiller()
 */
public void killTf2Process(){
  try {
    ProcessBuilder pb=getBuilderTF2ProcessKiller();
    Process pr=pb.start();
    BufferedReader input=new BufferedReader(new InputStreamReader(pr.getInputStream()));
    String line;
    while ((line=input.readLine()) != null) {
      log.fine(""String_Node_Str"" + line);
    }
    pr.waitFor();
  }
 catch (  InterruptedException|IOException e) {
    log.info(""String_Node_Str"");
  }
}","/** 
 * Stop or kill the TF2 process, whether it's being run from the tool or not.
 * @see #getBuilderTF2ProcessKiller()
 */
public void killTf2Process(){
  try {
    ProcessBuilder pb=getBuilderTF2ProcessKiller();
    Process pr=pb.start();
    try (BufferedReader input=newProcessReader(pr)){
      String line;
      while ((line=input.readLine()) != null) {
        log.fine(""String_Node_Str"" + line);
      }
    }
     pr.waitFor();
  }
 catch (  InterruptedException|IOException e) {
    log.info(""String_Node_Str"");
  }
}",0.9008341056533828
161909,"private void extractVpkFile(Path tfpath,String vpkname,Path dest,List<String> files){
  List<String> cmds=new ArrayList<>();
  try {
    Path vpktool=resolveVpkToolPath(tfpath);
    cmds.add(vpktool.toString());
    cmds.add(""String_Node_Str"");
    cmds.add(Paths.get(vpkname).toAbsolutePath().toString());
    cmds.addAll(files);
    ProcessBuilder pb=new ProcessBuilder(cmds);
    pb.directory(dest.toFile());
    Process pr=pb.start();
    BufferedReader input=new BufferedReader(new InputStreamReader(pr.getInputStream()));
    String line;
    while ((line=input.readLine()) != null) {
      log.fine(""String_Node_Str"" + line);
    }
    pr.waitFor();
  }
 catch (  InterruptedException|IOException e) {
    log.info(""String_Node_Str"" + vpkname);
  }
}","private void extractVpkFile(Path tfpath,String vpkname,Path dest,List<String> files){
  List<String> cmds=new ArrayList<>();
  try {
    Path vpktool=resolveVpkToolPath(tfpath);
    cmds.add(vpktool.toString());
    cmds.add(""String_Node_Str"");
    cmds.add(Paths.get(vpkname).toAbsolutePath().toString());
    cmds.addAll(files);
    ProcessBuilder pb=new ProcessBuilder(cmds);
    pb.directory(dest.toFile());
    Process pr=pb.start();
    try (BufferedReader input=newProcessReader(pr)){
      String line;
      while ((line=input.readLine()) != null) {
        log.fine(""String_Node_Str"" + line);
      }
    }
     pr.waitFor();
  }
 catch (  InterruptedException|IOException e) {
    log.info(""String_Node_Str"" + vpkname);
  }
}",0.9189551239115874
161910,"/** 
 * Launch TF2 with some user-specified parameters.
 * @param cfg the program settings from it will retrieve values like the dxlevel and theresolution
 * @see #getBuilderStartTF2()
 */
public void startTf(SettingsManager cfg){
  try {
    String opts=cfg.getString(Key.LaunchOptions);
    Map<String,String> options=new LinkedHashMap<>();
    options.put(""String_Node_Str"",""String_Node_Str"");
    options.put(""String_Node_Str"",cfg.getDxlevel());
    options.put(""String_Node_Str"",cfg.getWidth() + ""String_Node_Str"");
    options.put(""String_Node_Str"",cfg.getHeight() + ""String_Node_Str"");
    String[] params=opts.trim().replaceAll(""String_Node_Str"",""String_Node_Str"").split(""String_Node_Str"");
    for (int i=0; i < params.length; i++) {
      String key=params[i];
      String value=""String_Node_Str"";
      if (key.startsWith(""String_Node_Str"") || key.startsWith(""String_Node_Str"")) {
        if (i + 1 < params.length) {
          String next=params[i + 1];
          if (next.matches(""String_Node_Str"") || (!next.startsWith(""String_Node_Str"") && !next.startsWith(""String_Node_Str""))) {
            value=next;
            i++;
          }
        }
        options.put(key,value);
      }
 else {
        log.warning(""String_Node_Str"" + key);
      }
    }
    boolean fs=options.containsKey(""String_Node_Str"") || options.containsKey(""String_Node_Str"");
    if (fs) {
      options.remove(""String_Node_Str"");
      options.remove(""String_Node_Str"");
      options.remove(""String_Node_Str"");
      options.remove(""String_Node_Str"");
    }
 else {
      options.put(""String_Node_Str"",""String_Node_Str"");
      options.put(""String_Node_Str"",""String_Node_Str"");
    }
    if (options.containsKey(""String_Node_Str"")) {
      options.remove(""String_Node_Str"");
    }
    if (options.containsKey(""String_Node_Str"")) {
      options.remove(""String_Node_Str"");
    }
    log.info(""String_Node_Str"" + options.get(""String_Node_Str"") + ""String_Node_Str""+ options.get(""String_Node_Str"")+ ""String_Node_Str""+ options.get(""String_Node_Str"")+ ""String_Node_Str""+ (fs ? ""String_Node_Str"" : ""String_Node_Str"")+ ""String_Node_Str""+ options.get(""String_Node_Str""));
    log.finer(""String_Node_Str"" + options);
    ProcessBuilder pb=getBuilderStartTF2();
    pb.command().add(""String_Node_Str"");
    pb.command().add(options.get(""String_Node_Str""));
    options.remove(""String_Node_Str"");
    for (    Entry<String,String> e : options.entrySet()) {
      pb.command().add(e.getKey());
      pb.command().add(e.getValue());
    }
    if (cfg.getInsecure()) {
      log.fine(""String_Node_Str"");
      pb.command().add(""String_Node_Str"");
    }
    Process pr=pb.start();
    BufferedReader input=new BufferedReader(new InputStreamReader(pr.getInputStream()));
    String line;
    while ((line=input.readLine()) != null) {
      log.finer(""String_Node_Str"" + line);
    }
    pr.waitFor();
  }
 catch (  InterruptedException|IOException e) {
    log.warning(""String_Node_Str"" + e);
  }
}","/** 
 * Launch TF2 with some user-specified parameters.
 * @param cfg the program settings from it will retrieve values like the dxlevel and theresolution
 * @see #getBuilderStartTF2()
 */
public void startTf(SettingsManager cfg){
  try {
    String opts=cfg.getString(Key.LaunchOptions);
    Map<String,String> options=new LinkedHashMap<>();
    options.put(""String_Node_Str"",""String_Node_Str"");
    options.put(""String_Node_Str"",cfg.getDxlevel());
    options.put(""String_Node_Str"",cfg.getWidth() + ""String_Node_Str"");
    options.put(""String_Node_Str"",cfg.getHeight() + ""String_Node_Str"");
    String[] params=opts.trim().replaceAll(""String_Node_Str"",""String_Node_Str"").split(""String_Node_Str"");
    for (int i=0; i < params.length; i++) {
      String key=params[i];
      String value=""String_Node_Str"";
      if (key.startsWith(""String_Node_Str"") || key.startsWith(""String_Node_Str"")) {
        if (i + 1 < params.length) {
          String next=params[i + 1];
          if (next.matches(""String_Node_Str"") || (!next.startsWith(""String_Node_Str"") && !next.startsWith(""String_Node_Str""))) {
            value=next;
            i++;
          }
        }
        options.put(key,value);
      }
 else {
        log.warning(""String_Node_Str"" + key);
      }
    }
    boolean fs=options.containsKey(""String_Node_Str"") || options.containsKey(""String_Node_Str"");
    if (fs) {
      options.remove(""String_Node_Str"");
      options.remove(""String_Node_Str"");
      options.remove(""String_Node_Str"");
      options.remove(""String_Node_Str"");
    }
 else {
      options.put(""String_Node_Str"",""String_Node_Str"");
      options.put(""String_Node_Str"",""String_Node_Str"");
    }
    if (options.containsKey(""String_Node_Str"")) {
      options.remove(""String_Node_Str"");
    }
    if (options.containsKey(""String_Node_Str"")) {
      options.remove(""String_Node_Str"");
    }
    log.info(""String_Node_Str"" + options.get(""String_Node_Str"") + ""String_Node_Str""+ options.get(""String_Node_Str"")+ ""String_Node_Str""+ options.get(""String_Node_Str"")+ ""String_Node_Str""+ (fs ? ""String_Node_Str"" : ""String_Node_Str"")+ ""String_Node_Str""+ options.get(""String_Node_Str""));
    log.finer(""String_Node_Str"" + options);
    ProcessBuilder pb=getBuilderStartTF2();
    pb.command().add(""String_Node_Str"");
    pb.command().add(options.get(""String_Node_Str""));
    options.remove(""String_Node_Str"");
    for (    Entry<String,String> e : options.entrySet()) {
      pb.command().add(e.getKey());
      pb.command().add(e.getValue());
    }
    if (cfg.getInsecure()) {
      log.fine(""String_Node_Str"");
      pb.command().add(""String_Node_Str"");
    }
    Process pr=pb.start();
    try (BufferedReader input=newProcessReader(pr)){
      String line;
      while ((line=input.readLine()) != null) {
        log.finer(""String_Node_Str"" + line);
      }
    }
     pr.waitFor();
  }
 catch (  InterruptedException|IOException e) {
    log.warning(""String_Node_Str"" + e);
  }
}",0.9795642627934472
161911,"private void unpackFileFromJar(Path jarpath,String name,Path destpath){
  JarFile jar;
  try {
    jar=new JarFile(jarpath.toFile());
    JarEntry entry=jar.getJarEntry(name);
    if (entry != null) {
      InputStream is=jar.getInputStream(entry);
      FileOutputStream fos=new FileOutputStream(destpath.resolve(name).toFile());
      while (is.available() > 0) {
        fos.write(is.read());
      }
      fos.close();
      is.close();
    }
 else {
      log.warning(""String_Node_Str"" + name + ""String_Node_Str""+ jarpath);
    }
    jar.close();
  }
 catch (  IOException e) {
    log.log(Level.WARNING,""String_Node_Str"" + name + ""String_Node_Str""+ jarpath,e);
  }
}","private void unpackFileFromJar(Path jarpath,String name,Path destpath){
  JarFile jar;
  try {
    jar=new JarFile(jarpath.toFile());
    JarEntry entry=jar.getJarEntry(name);
    if (entry != null) {
      try (InputStream is=jar.getInputStream(entry);FileOutputStream fos=new FileOutputStream(destpath.resolve(name).toFile())){
        while (is.available() > 0) {
          fos.write(is.read());
        }
      }
 catch (      IOException e) {
        log.warning(""String_Node_Str"" + e);
      }
    }
 else {
      log.warning(""String_Node_Str"" + name + ""String_Node_Str""+ jarpath);
    }
    jar.close();
  }
 catch (  IOException e) {
    log.log(Level.WARNING,""String_Node_Str"" + name + ""String_Node_Str""+ jarpath,e);
  }
}",0.9052031361368496
161912,"public boolean restoreAll(){
  Path tfpath=cfg.getTfPath();
  Path customBackupPath=tfpath.resolve(""String_Node_Str"");
  Path customPath=tfpath.resolve(""String_Node_Str"");
  Path configBackupPath=tfpath.resolve(""String_Node_Str"");
  Path configPath=tfpath.resolve(""String_Node_Str"");
  boolean restoreComplete=true;
  if (Files.exists(customBackupPath)) {
    log.fine(""String_Node_Str"");
    try {
      delete(customPath);
    }
 catch (    NoSuchFileException e) {
    }
catch (    IOException e) {
      log.info(""String_Node_Str"" + e);
    }
    try {
      if (isEmpty(customPath)) {
        copy(customBackupPath,customPath);
      }
 else {
        restoreComplete=false;
      }
    }
 catch (    IOException e) {
      log.info(""String_Node_Str"" + e);
      restoreComplete=false;
    }
  }
  if (Files.exists(configBackupPath)) {
    log.fine(""String_Node_Str"");
    try {
      delete(configPath);
    }
 catch (    NoSuchFileException e) {
    }
catch (    IOException e) {
      log.info(""String_Node_Str"" + e);
    }
    try {
      if (isEmpty(configPath)) {
        copy(configBackupPath,configPath);
      }
 else {
        restoreComplete=false;
      }
    }
 catch (    IOException e) {
      log.info(""String_Node_Str"" + e);
      restoreComplete=false;
    }
  }
  Path zip=tfpath.resolve(""String_Node_Str"" + Util.now(""String_Node_Str"") + ""String_Node_Str"");
  if (Files.exists(configBackupPath) || Files.exists(customBackupPath)) {
    log.info(""String_Node_Str"" + zip);
    try {
      Zip.create(zip,Arrays.asList(configBackupPath,customBackupPath));
    }
 catch (    IllegalArgumentException|IOException e) {
      log.info(""String_Node_Str"" + e);
    }
  }
  if (restoreComplete) {
    try {
      if (Files.exists(configBackupPath)) {
        log.info(""String_Node_Str"");
        delete(configBackupPath);
      }
      if (Files.exists(customBackupPath)) {
        log.info(""String_Node_Str"");
        delete(customBackupPath);
      }
    }
 catch (    IOException e) {
      log.info(""String_Node_Str"" + e);
      restoreComplete=false;
    }
  }
  if (!restoreComplete) {
    log.info(""String_Node_Str"");
    log.info(""String_Node_Str"");
    log.info(""String_Node_Str"");
    log.info(""String_Node_Str"");
    log.info(""String_Node_Str"");
  }
 else {
    log.info(""String_Node_Str"");
    if (cfg.getBoolean(Key.DeleteBackupsWhenRestoring)) {
      try {
        if (Files.deleteIfExists(zip)) {
          log.info(""String_Node_Str"" + zip);
        }
      }
 catch (      IOException e) {
        log.info(""String_Node_Str"" + e);
      }
    }
  }
  return restoreComplete;
}","public boolean restoreAll(){
  Path tfpath=cfg.getTfPath();
  Path customBackupPath=tfpath.resolve(""String_Node_Str"");
  Path customPath=tfpath.resolve(""String_Node_Str"");
  Path configBackupPath=tfpath.resolve(""String_Node_Str"");
  Path configPath=tfpath.resolve(""String_Node_Str"");
  boolean restoreComplete=true;
  if (Files.exists(customBackupPath)) {
    log.fine(""String_Node_Str"");
    try {
      delete(customPath);
    }
 catch (    NoSuchFileException e) {
      log.fine(""String_Node_Str"" + e);
    }
catch (    IOException e) {
      log.info(""String_Node_Str"" + e);
    }
    try {
      if (isEmpty(customPath)) {
        copy(customBackupPath,customPath);
      }
 else {
        restoreComplete=false;
      }
    }
 catch (    IOException e) {
      log.info(""String_Node_Str"" + e);
      restoreComplete=false;
    }
  }
  if (Files.exists(configBackupPath)) {
    log.fine(""String_Node_Str"");
    try {
      delete(configPath);
    }
 catch (    NoSuchFileException e) {
      log.fine(""String_Node_Str"" + e);
    }
catch (    IOException e) {
      log.info(""String_Node_Str"" + e);
    }
    try {
      if (isEmpty(configPath)) {
        copy(configBackupPath,configPath);
      }
 else {
        restoreComplete=false;
      }
    }
 catch (    IOException e) {
      log.info(""String_Node_Str"" + e);
      restoreComplete=false;
    }
  }
  Path zip=tfpath.resolve(""String_Node_Str"" + Util.now(""String_Node_Str"") + ""String_Node_Str"");
  if (Files.exists(configBackupPath) || Files.exists(customBackupPath)) {
    log.info(""String_Node_Str"" + zip);
    try {
      Zip.create(zip,Arrays.asList(configBackupPath,customBackupPath));
    }
 catch (    IllegalArgumentException|IOException e) {
      log.info(""String_Node_Str"" + e);
    }
  }
  if (restoreComplete) {
    try {
      if (Files.exists(configBackupPath)) {
        log.info(""String_Node_Str"");
        delete(configBackupPath);
      }
      if (Files.exists(customBackupPath)) {
        log.info(""String_Node_Str"");
        delete(customBackupPath);
      }
    }
 catch (    IOException e) {
      log.info(""String_Node_Str"" + e);
      restoreComplete=false;
    }
  }
  if (!restoreComplete) {
    log.info(""String_Node_Str"");
    log.info(""String_Node_Str"");
    log.info(""String_Node_Str"");
    log.info(""String_Node_Str"");
    log.info(""String_Node_Str"");
  }
 else {
    log.info(""String_Node_Str"");
    if (cfg.getBoolean(Key.DeleteBackupsWhenRestoring)) {
      try {
        if (Files.deleteIfExists(zip)) {
          log.info(""String_Node_Str"" + zip);
        }
      }
 catch (      IOException e) {
        log.info(""String_Node_Str"" + e);
      }
    }
  }
  return restoreComplete;
}",0.9852607709750568
161913,"public Lawena(SettingsManager cfg){
  String impl=this.getClass().getPackage().getImplementationVersion();
  if (impl != null) {
    version=impl;
  }
  build=getManifestString(""String_Node_Str"",Util.now(""String_Node_Str""));
  String osname=System.getProperty(""String_Node_Str"");
  if (osname.contains(""String_Node_Str"")) {
    cl=new CLWindows();
  }
 else   if (osname.contains(""String_Node_Str"")) {
    cl=new CLLinux();
  }
 else   if (osname.contains(""String_Node_Str"")) {
    cl=new CLOSX();
  }
 else {
    throw new UnsupportedOperationException(""String_Node_Str"");
  }
  cl.setLookAndFeel();
  updater=new UpdateHelper();
  updater.updateLauncher();
  updater.cleanupUnusedFiles();
  updater.loadChannels();
  settings=cfg;
  oDxlevel=cl.getSystemDxLevel();
  steampath=cl.getSteamPath();
  Path tfpath=settings.getTfPath();
  if (tfpath == null || tfpath.toString().isEmpty()) {
    tfpath=steampath.resolve(""String_Node_Str"");
  }
  if (!Files.exists(tfpath)) {
    tfpath=getChosenTfPath();
    if (tfpath == null) {
      log.info(""String_Node_Str"");
      System.exit(1);
    }
  }
  settings.setTfPath(tfpath);
  files=new FileManager(settings,cl);
  Path moviepath=settings.getMoviePath();
  if (moviepath == null || moviepath.toString().isEmpty() || !Files.exists(moviepath)) {
    moviepath=getChosenMoviePath();
    if (moviepath == null) {
      log.info(""String_Node_Str"");
      System.exit(1);
    }
  }
  movies=new MovieManager(settings);
  settings.setMoviePath(moviepath);
  settings.save();
  files.restoreAll();
  customPaths=new CustomPathList(settings,cl);
  files.setCustomPathList(customPaths);
  watcher=new Thread(new Runnable(){
    @Override public void run(){
      try {
        WatchDir w=new WatchDir(Paths.get(""String_Node_Str""),false){
          @Override public void entryCreated(          Path child){
            try {
              customPaths.addPath(child);
            }
 catch (            IOException e) {
              log.log(Level.FINE,""String_Node_Str"",e);
            }
          }
          @Override public void entryModified(          Path child){
            customPaths.updatePath(child);
          }
          @Override public void entryDeleted(          Path child){
            customPaths.removePath(child);
          }
        }
;
        w.processEvents();
      }
 catch (      IOException e) {
        log.log(Level.FINE,""String_Node_Str"",e);
      }
    }
  }
,""String_Node_Str"");
  watcher.setDaemon(true);
  vdm=new DemoEditor(settings,cl);
}","public Lawena(SettingsManager cfg){
  String impl=this.getClass().getPackage().getImplementationVersion();
  if (impl != null) {
    version=impl;
  }
  build=getManifestString(""String_Node_Str"",Util.now(""String_Node_Str""));
  String osname=System.getProperty(""String_Node_Str"");
  if (osname.contains(""String_Node_Str"")) {
    cl=new CLWindows();
  }
 else   if (osname.contains(""String_Node_Str"")) {
    cl=new CLLinux();
  }
 else   if (osname.contains(""String_Node_Str"")) {
    cl=new CLOSX();
  }
 else {
    throw new UnsupportedOperationException(""String_Node_Str"");
  }
  cl.setLookAndFeel();
  updater=new UpdateHelper();
  updater.updateLauncher();
  updater.cleanupUnusedFiles();
  updater.loadChannels();
  settings=cfg;
  oDxlevel=cl.getSystemDxLevel();
  steampath=cl.getSteamPath();
  Path tfpath=settings.getTfPath();
  if (tfpath == null || tfpath.toString().isEmpty()) {
    tfpath=steampath.resolve(""String_Node_Str"");
  }
  if (!Files.exists(tfpath)) {
    tfpath=getChosenTfPath();
    if (tfpath == null) {
      log.info(""String_Node_Str"");
      throw new IllegalArgumentException(""String_Node_Str"");
    }
  }
  settings.setTfPath(tfpath);
  files=new FileManager(settings,cl);
  Path moviepath=settings.getMoviePath();
  if (moviepath == null || moviepath.toString().isEmpty() || !Files.exists(moviepath)) {
    moviepath=getChosenMoviePath();
    if (moviepath == null) {
      log.info(""String_Node_Str"");
      throw new IllegalArgumentException(""String_Node_Str"");
    }
  }
  movies=new MovieManager(settings);
  settings.setMoviePath(moviepath);
  settings.save();
  files.restoreAll();
  customPaths=new CustomPathList(settings,cl);
  files.setCustomPathList(customPaths);
  watcher=new Thread(new Runnable(){
    @Override public void run(){
      try {
        WatchDir w=new WatchDir(Paths.get(""String_Node_Str""),false){
          @Override public void entryCreated(          Path child){
            try {
              customPaths.addPath(child);
            }
 catch (            IOException e) {
              log.log(Level.FINE,""String_Node_Str"",e);
            }
          }
          @Override public void entryModified(          Path child){
            customPaths.updatePath(child);
          }
          @Override public void entryDeleted(          Path child){
            customPaths.removePath(child);
          }
        }
;
        w.processEvents();
      }
 catch (      IOException e) {
        log.log(Level.FINE,""String_Node_Str"",e);
      }
    }
  }
,""String_Node_Str"");
  watcher.setDaemon(true);
  vdm=new DemoEditor(settings,cl);
}",0.9753328112764292
161914,"public void movieOffset() throws IOException {
  String lastmovie=""String_Node_Str"";
  String alias=""String_Node_Str"";
  try (DirectoryStream<Path> stream=Files.newDirectoryStream(cfg.getMoviePath(),""String_Node_Str"")){
    for (    Path moviefile : stream) {
      String filename=moviefile.getFileName().toString();
      lastmovie=(lastmovie.compareTo(filename) > 0 ? lastmovie : filename);
    }
  }
   if (!lastmovie.equals(""String_Node_Str"")) {
    int idx=""String_Node_Str"".indexOf(lastmovie.charAt(0));
    if (idx >= 0) {
      alias=""String_Node_Str"" + (idx + 2);
    }
 else     if (lastmovie.charAt(0) == 'p') {
      alias=""String_Node_Str"";
    }
  }
  PrintWriter pw=new PrintWriter(new FileWriter(""String_Node_Str""));
  pw.println(alias);
  pw.close();
}","public void movieOffset() throws IOException {
  String lastmovie=""String_Node_Str"";
  String alias=""String_Node_Str"";
  try (DirectoryStream<Path> stream=Files.newDirectoryStream(cfg.getMoviePath(),""String_Node_Str"")){
    for (    Path moviefile : stream) {
      String filename=moviefile.getFileName().toString();
      lastmovie=(lastmovie.compareTo(filename) > 0 ? lastmovie : filename);
    }
  }
   if (!lastmovie.equals(""String_Node_Str"")) {
    int idx=""String_Node_Str"".indexOf(lastmovie.charAt(0));
    if (idx >= 0) {
      alias=""String_Node_Str"" + (idx + 2);
    }
 else     if (lastmovie.charAt(0) == 'p') {
      alias=""String_Node_Str"";
    }
  }
  Files.write(Paths.get(""String_Node_Str""),Arrays.asList(alias),Charset.forName(""String_Node_Str""));
}",0.8991541964866623
161915,"public void createMovienameCfgs() throws IOException {
  String[] prefixes={""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str""};
  String video=cfg.getString(Key.SourceRecorderVideoFormat);
  String audio=cfg.getString(Key.SourceRecorderAudioFormat);
  int quality=cfg.getInt(Key.SourceRecorderJpegQuality);
  for (  String prefix : prefixes) {
    PrintWriter pw=new PrintWriter(new FileWriter(""String_Node_Str"" + prefix + ""String_Node_Str""));
    pw.println(""String_Node_Str"" + cfg.getMoviePath() + ""String_Node_Str""+ prefix+ ""String_Node_Str""+ video+ ""String_Node_Str""+ audio+ (video.equals(""String_Node_Str"") ? ""String_Node_Str"" + quality : ""String_Node_Str""));
    pw.close();
  }
}","public void createMovienameCfgs() throws IOException {
  String[] prefixes={""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str""};
  String video=cfg.getString(Key.SourceRecorderVideoFormat);
  String audio=cfg.getString(Key.SourceRecorderAudioFormat);
  int quality=cfg.getInt(Key.SourceRecorderJpegQuality);
  for (  String prefix : prefixes) {
    List<String> lines=Arrays.asList(""String_Node_Str"" + cfg.getMoviePath() + ""String_Node_Str""+ prefix+ ""String_Node_Str""+ video+ ""String_Node_Str""+ audio+ (video.equals(""String_Node_Str"") ? ""String_Node_Str"" + quality : ""String_Node_Str""));
    Files.write(Paths.get(""String_Node_Str"" + prefix + ""String_Node_Str""),lines,Charset.forName(""String_Node_Str""));
  }
}",0.6702298236237306
161916,public abstract void closeHandles(Path path);,"/** 
 * Closes all open handles matching this path. This is useful to unlock files that some process can hold preventing the restore/replace file mechanism to work correctly.
 * @param path the directory where handles are being closed
 */
public abstract void closeHandles(Path path);",0.2735562310030395
161917,"private Path delete(Path dir) throws IOException {
  return Files.walkFileTree(dir,new DeleteDirVisitor());
}","private Path delete(Path dir) throws IOException {
  return Files.walkFileTree(dir,new DeleteDirVisitor(cl));
}",0.990909090909091
161918,"@Override public FileVisitResult postVisitDirectory(Path dir,IOException exc) throws IOException {
  if (exc == null) {
    try {
      log.finer(""String_Node_Str"" + dir);
      Files.delete(dir);
    }
 catch (    NoSuchFileException e) {
    }
catch (    IOException e) {
      log.log(Level.INFO,""String_Node_Str"",e);
    }
    return FileVisitResult.CONTINUE;
  }
  throw exc;
}","@Override public FileVisitResult postVisitDirectory(Path dir,IOException exc) throws IOException {
  if (exc == null) {
    try {
      log.finer(""String_Node_Str"" + dir);
      Files.delete(dir);
    }
 catch (    NoSuchFileException e) {
    }
catch (    DirectoryNotEmptyException e) {
      log.info(""String_Node_Str"" + dir);
    }
catch (    IOException e) {
      log.log(Level.INFO,""String_Node_Str"",e);
    }
    return FileVisitResult.CONTINUE;
  }
  throw exc;
}",0.8946135831381733
161919,"@Override public FileVisitResult visitFile(Path path,BasicFileAttributes attrs) throws IOException {
  try {
    path.toFile().setWritable(true);
    log.finer(""String_Node_Str"" + path);
    Files.delete(path);
  }
 catch (  NoSuchFileException e) {
  }
catch (  IOException e) {
    log.log(Level.INFO,""String_Node_Str"",e);
  }
  return FileVisitResult.CONTINUE;
}","@Override public FileVisitResult visitFile(Path path,BasicFileAttributes attrs) throws IOException {
  try {
    path.toFile().setWritable(true);
    log.finer(""String_Node_Str"" + path);
    Files.delete(path);
  }
 catch (  NoSuchFileException e) {
  }
catch (  IOException e) {
    if (path.endsWith(""String_Node_Str"") || path.endsWith(""String_Node_Str"")) {
      log.info(""String_Node_Str"" + path);
      cl.delete(path);
    }
 else {
      log.log(Level.INFO,""String_Node_Str"",e);
    }
  }
  return FileVisitResult.CONTINUE;
}",0.8138238573021181
161920,"private String regQuery(String key,String value,int mode){
  String result=""String_Node_Str"";
  try {
    ProcessBuilder pb=new ProcessBuilder(""String_Node_Str"",""String_Node_Str"",key,""String_Node_Str"",value);
    Process pr=pb.start();
    BufferedReader input=new BufferedReader(new InputStreamReader(pr.getInputStream()));
    String line;
    while ((line=input.readLine()) != null) {
      result=result + line + '\n';
    }
    pr.waitFor();
  }
 catch (  InterruptedException|IOException e) {
    log.log(Level.INFO,""String_Node_Str"",e);
  }
  if (mode == 0)   return result.substring(result.lastIndexOf(""String_Node_Str"") + 2,result.indexOf('\n',result.lastIndexOf(""String_Node_Str"")));
  return result.substring(result.lastIndexOf(""String_Node_Str"") - 1,result.indexOf('\n',result.lastIndexOf(""String_Node_Str"")));
}","private String regQuery(String key,String value,int mode){
  String result=""String_Node_Str"";
  try {
    ProcessBuilder pb=new ProcessBuilder(""String_Node_Str"",""String_Node_Str"",key,""String_Node_Str"",value);
    Process pr=pb.start();
    BufferedReader input=new BufferedReader(new InputStreamReader(pr.getInputStream()));
    String line;
    while ((line=input.readLine()) != null) {
      result=result + line + '\n';
    }
    pr.waitFor();
  }
 catch (  InterruptedException|IOException e) {
    log.log(Level.INFO,""String_Node_Str"",e);
  }
  try {
    if (mode == 0) {
      return result.substring(result.lastIndexOf(""String_Node_Str"") + 2,result.indexOf('\n',result.lastIndexOf(""String_Node_Str"")));
    }
    return result.substring(result.lastIndexOf(""String_Node_Str"") - 1,result.indexOf('\n',result.lastIndexOf(""String_Node_Str"")));
  }
 catch (  IndexOutOfBoundsException e) {
    return ""String_Node_Str"";
  }
}",0.9411764705882352
161921,"/** 
 * Create the panel.
 */
public DemoEditorView(){
  GridBagLayout gbl_panelVdm=new GridBagLayout();
  gbl_panelVdm.columnWidths=new int[]{0,0,0,0,0,0,0,0};
  gbl_panelVdm.rowHeights=new int[]{0,0,0,0,0};
  gbl_panelVdm.columnWeights=new double[]{0.0,1.0,0.0,1.0,0.0,1.0,0.0,Double.MIN_VALUE};
  gbl_panelVdm.rowWeights=new double[]{0.0,0.0,0.0,1.0,Double.MIN_VALUE};
  setLayout(gbl_panelVdm);
  lblSelectDemoFile=new JLabel(""String_Node_Str"");
  GridBagConstraints gbc_lblSelectDemoFile=new GridBagConstraints();
  gbc_lblSelectDemoFile.anchor=GridBagConstraints.EAST;
  gbc_lblSelectDemoFile.insets=new Insets(5,5,5,5);
  gbc_lblSelectDemoFile.gridx=0;
  gbc_lblSelectDemoFile.gridy=0;
  add(lblSelectDemoFile,gbc_lblSelectDemoFile);
  txtDemofile=new JTextField();
  GridBagConstraints gbc_txtDemofile=new GridBagConstraints();
  gbc_txtDemofile.gridwidth=3;
  gbc_txtDemofile.insets=new Insets(5,0,5,5);
  gbc_txtDemofile.fill=GridBagConstraints.HORIZONTAL;
  gbc_txtDemofile.gridx=1;
  gbc_txtDemofile.gridy=0;
  add(txtDemofile,gbc_txtDemofile);
  txtDemofile.setColumns(10);
  btnBrowse=new JButton(""String_Node_Str"");
  GridBagConstraints gbc_btnBrowse=new GridBagConstraints();
  gbc_btnBrowse.anchor=GridBagConstraints.WEST;
  gbc_btnBrowse.insets=new Insets(5,0,5,5);
  gbc_btnBrowse.gridx=4;
  gbc_btnBrowse.gridy=0;
  add(btnBrowse,gbc_btnBrowse);
  lblStartTick=new JLabel(""String_Node_Str"");
  GridBagConstraints gbc_lblStartTick=new GridBagConstraints();
  gbc_lblStartTick.anchor=GridBagConstraints.EAST;
  gbc_lblStartTick.insets=new Insets(0,5,5,5);
  gbc_lblStartTick.gridx=0;
  gbc_lblStartTick.gridy=1;
  add(lblStartTick,gbc_lblStartTick);
  txtStarttick=new JTextField();
  GridBagConstraints gbc_txtStarttick=new GridBagConstraints();
  gbc_txtStarttick.insets=new Insets(0,0,5,5);
  gbc_txtStarttick.fill=GridBagConstraints.HORIZONTAL;
  gbc_txtStarttick.gridx=1;
  gbc_txtStarttick.gridy=1;
  add(txtStarttick,gbc_txtStarttick);
  txtStarttick.setColumns(10);
  lblEndTick=new JLabel(""String_Node_Str"");
  GridBagConstraints gbc_lblEndTick=new GridBagConstraints();
  gbc_lblEndTick.anchor=GridBagConstraints.EAST;
  gbc_lblEndTick.insets=new Insets(0,0,5,5);
  gbc_lblEndTick.gridx=2;
  gbc_lblEndTick.gridy=1;
  add(lblEndTick,gbc_lblEndTick);
  txtEndtick=new JTextField();
  GridBagConstraints gbc_txtEndtick=new GridBagConstraints();
  gbc_txtEndtick.insets=new Insets(0,0,5,5);
  gbc_txtEndtick.fill=GridBagConstraints.HORIZONTAL;
  gbc_txtEndtick.gridx=3;
  gbc_txtEndtick.gridy=1;
  add(txtEndtick,gbc_txtEndtick);
  txtEndtick.setColumns(10);
  btnAdd=new JButton(""String_Node_Str"");
  GridBagConstraints gbc_btnAdd=new GridBagConstraints();
  gbc_btnAdd.anchor=GridBagConstraints.WEST;
  gbc_btnAdd.insets=new Insets(0,0,5,5);
  gbc_btnAdd.gridx=4;
  gbc_btnAdd.gridy=1;
  add(btnAdd,gbc_btnAdd);
  panel_1=new JPanel();
  FlowLayout flowLayout_3=(FlowLayout)panel_1.getLayout();
  flowLayout_3.setVgap(0);
  flowLayout_3.setHgap(0);
  GridBagConstraints gbc_panel_1=new GridBagConstraints();
  gbc_panel_1.gridwidth=7;
  gbc_panel_1.anchor=GridBagConstraints.WEST;
  gbc_panel_1.insets=new Insets(0,5,5,0);
  gbc_panel_1.gridx=0;
  gbc_panel_1.gridy=2;
  add(panel_1,gbc_panel_1);
  btnClearTickList=new JButton(""String_Node_Str"");
  panel_1.add(btnClearTickList);
  btnCreateVdmFiles=new JButton(""String_Node_Str"");
  panel_1.add(btnCreateVdmFiles);
  btnDeleteVdmFiles=new JButton(""String_Node_Str"");
  panel_1.add(btnDeleteVdmFiles);
  scrollPane_1=new JScrollPane();
  GridBagConstraints gbc_scrollPane_1=new GridBagConstraints();
  gbc_scrollPane_1.insets=new Insets(0,5,0,0);
  gbc_scrollPane_1.fill=GridBagConstraints.BOTH;
  gbc_scrollPane_1.gridwidth=7;
  gbc_scrollPane_1.gridx=0;
  gbc_scrollPane_1.gridy=3;
  add(scrollPane_1,gbc_scrollPane_1);
  tableTicks=new JTable();
  scrollPane_1.setViewportView(tableTicks);
}","/** 
 * Create the panel.
 */
public DemoEditorView(){
  GridBagLayout gbl_panelVdm=new GridBagLayout();
  gbl_panelVdm.columnWidths=new int[]{0,0,0,0,0,0,0,0};
  gbl_panelVdm.rowHeights=new int[]{0,0,0,0,0};
  gbl_panelVdm.columnWeights=new double[]{0.0,1.0,0.0,1.0,0.0,1.0,0.0,Double.MIN_VALUE};
  gbl_panelVdm.rowWeights=new double[]{0.0,0.0,0.0,1.0,Double.MIN_VALUE};
  setLayout(gbl_panelVdm);
  lblSelectDemoFile=new JLabel(""String_Node_Str"");
  GridBagConstraints gbc_lblSelectDemoFile=new GridBagConstraints();
  gbc_lblSelectDemoFile.anchor=GridBagConstraints.EAST;
  gbc_lblSelectDemoFile.insets=new Insets(5,5,5,5);
  gbc_lblSelectDemoFile.gridx=0;
  gbc_lblSelectDemoFile.gridy=0;
  add(lblSelectDemoFile,gbc_lblSelectDemoFile);
  txtDemofile=new JTextField();
  GridBagConstraints gbc_txtDemofile=new GridBagConstraints();
  gbc_txtDemofile.gridwidth=3;
  gbc_txtDemofile.insets=new Insets(5,0,5,5);
  gbc_txtDemofile.fill=GridBagConstraints.HORIZONTAL;
  gbc_txtDemofile.gridx=1;
  gbc_txtDemofile.gridy=0;
  add(txtDemofile,gbc_txtDemofile);
  txtDemofile.setColumns(10);
  btnBrowse=new JButton(""String_Node_Str"");
  GridBagConstraints gbc_btnBrowse=new GridBagConstraints();
  gbc_btnBrowse.anchor=GridBagConstraints.WEST;
  gbc_btnBrowse.insets=new Insets(5,0,5,5);
  gbc_btnBrowse.gridx=4;
  gbc_btnBrowse.gridy=0;
  add(btnBrowse,gbc_btnBrowse);
  lblStartTick=new JLabel(""String_Node_Str"");
  GridBagConstraints gbc_lblStartTick=new GridBagConstraints();
  gbc_lblStartTick.anchor=GridBagConstraints.EAST;
  gbc_lblStartTick.insets=new Insets(0,5,5,5);
  gbc_lblStartTick.gridx=0;
  gbc_lblStartTick.gridy=1;
  add(lblStartTick,gbc_lblStartTick);
  txtStarttick=new JTextField();
  GridBagConstraints gbc_txtStarttick=new GridBagConstraints();
  gbc_txtStarttick.insets=new Insets(0,0,5,5);
  gbc_txtStarttick.fill=GridBagConstraints.HORIZONTAL;
  gbc_txtStarttick.gridx=1;
  gbc_txtStarttick.gridy=1;
  add(txtStarttick,gbc_txtStarttick);
  txtStarttick.setColumns(10);
  lblEndTick=new JLabel(""String_Node_Str"");
  GridBagConstraints gbc_lblEndTick=new GridBagConstraints();
  gbc_lblEndTick.anchor=GridBagConstraints.EAST;
  gbc_lblEndTick.insets=new Insets(0,0,5,5);
  gbc_lblEndTick.gridx=2;
  gbc_lblEndTick.gridy=1;
  add(lblEndTick,gbc_lblEndTick);
  txtEndtick=new JTextField();
  GridBagConstraints gbc_txtEndtick=new GridBagConstraints();
  gbc_txtEndtick.insets=new Insets(0,0,5,5);
  gbc_txtEndtick.fill=GridBagConstraints.HORIZONTAL;
  gbc_txtEndtick.gridx=3;
  gbc_txtEndtick.gridy=1;
  add(txtEndtick,gbc_txtEndtick);
  txtEndtick.setColumns(10);
  btnAdd=new JButton(""String_Node_Str"");
  GridBagConstraints gbc_btnAdd=new GridBagConstraints();
  gbc_btnAdd.anchor=GridBagConstraints.WEST;
  gbc_btnAdd.insets=new Insets(0,0,5,5);
  gbc_btnAdd.gridx=4;
  gbc_btnAdd.gridy=1;
  add(btnAdd,gbc_btnAdd);
  panel_1=new JPanel();
  FlowLayout flowLayout_3=(FlowLayout)panel_1.getLayout();
  flowLayout_3.setVgap(0);
  flowLayout_3.setHgap(0);
  GridBagConstraints gbc_panel_1=new GridBagConstraints();
  gbc_panel_1.gridwidth=7;
  gbc_panel_1.anchor=GridBagConstraints.WEST;
  gbc_panel_1.insets=new Insets(0,5,5,0);
  gbc_panel_1.gridx=0;
  gbc_panel_1.gridy=2;
  add(panel_1,gbc_panel_1);
  btnClearTickList=new JButton(""String_Node_Str"");
  panel_1.add(btnClearTickList);
  btnCreateVdmFiles=new JButton(""String_Node_Str"");
  panel_1.add(btnCreateVdmFiles);
  btnDeleteVdmFiles=new JButton(""String_Node_Str"");
  panel_1.add(btnDeleteVdmFiles);
  scrollPane_1=new JScrollPane();
  GridBagConstraints gbc_scrollPane_1=new GridBagConstraints();
  gbc_scrollPane_1.insets=new Insets(0,5,5,5);
  gbc_scrollPane_1.fill=GridBagConstraints.BOTH;
  gbc_scrollPane_1.gridwidth=7;
  gbc_scrollPane_1.gridx=0;
  gbc_scrollPane_1.gridy=3;
  add(scrollPane_1,gbc_scrollPane_1);
  tableTicks=new JTable();
  scrollPane_1.setViewportView(tableTicks);
}",0.9992252066115702
161922,"private TickList generateTickList(int i){
  TickList current;
  current=new TickList((String)model.getValueAt(i,0),Integer.parseInt((String)model.getValueAt(i,1)),Integer.parseInt((String)model.getValueAt(i,2)));
  if (i + 1 == view.getTableTicks().getRowCount())   return current;
  current.setNext(generateTickList(i + 1));
  return current;
}","private TickList generateTickList(int i){
  TickList current;
  current=new TickList((String)model.getValueAt(i,0),(int)model.getValueAt(i,1),(int)model.getValueAt(i,2));
  if (i + 1 == view.getTableTicks().getRowCount())   return current;
  current.setNext(generateTickList(i + 1));
  return current;
}",0.9074074074074074
161923,"public CustomPath(Path path,String name,EnumSet<PathContents> contents){
  this.path=path;
  this.name=name;
  this.contents=contents;
}","public CustomPath(Path path,String name,EnumSet<PathContents> contents){
  this.path=path;
  this.name=name;
  this.contents=contents;
  if (contents.contains(PathContents.READONLY)) {
    selected=true;
  }
}",0.7884057971014493
161924,"public void replaceAll(){
  Path tfpath=cfg.getTfPath();
  Path customBackupPath=tfpath.resolve(""String_Node_Str"");
  Path customPath=tfpath.resolve(""String_Node_Str"");
  Path configBackupPath=tfpath.resolve(""String_Node_Str"");
  Path configPath=tfpath.resolve(""String_Node_Str"");
  Path localCustomPath=Paths.get(""String_Node_Str"");
  if (!Files.exists(configBackupPath)) {
    try {
      log.fine(""String_Node_Str"");
      configPath.toFile().setWritable(true);
      Files.move(configPath,configBackupPath);
      Files.createDirectories(configPath);
      copy(Paths.get(""String_Node_Str""),configPath);
    }
 catch (    IOException e) {
      log.log(Level.INFO,""String_Node_Str"",e);
      return;
    }
  }
  if (!Files.exists(customBackupPath)) {
    try {
      log.fine(""String_Node_Str"");
      customPath.toFile().setWritable(true);
      Files.move(customPath,customBackupPath);
    }
 catch (    IOException e) {
      log.log(Level.INFO,""String_Node_Str"",e);
      return;
    }
    try {
      log.fine(""String_Node_Str"");
      Path resourcePath=tfpath.resolve(""String_Node_Str"");
      Path scriptsPath=tfpath.resolve(""String_Node_Str"");
      Files.createDirectories(resourcePath);
      Files.createDirectories(scriptsPath);
      String hudName=cfg.getHud();
      if (!hudName.equals(""String_Node_Str"")) {
        copy(Paths.get(""String_Node_Str"",hudName,""String_Node_Str""),resourcePath);
        copy(Paths.get(""String_Node_Str"",hudName,""String_Node_Str""),scriptsPath);
      }
    }
 catch (    IOException e) {
      log.log(Level.INFO,""String_Node_Str"",e);
    }
    Path skyboxPath=tfpath.resolve(""String_Node_Str"");
    try {
      String sky=cfg.getSkybox();
      if (sky != null && !sky.isEmpty() && !sky.equals(Key.Skybox.defValue())) {
        log.fine(""String_Node_Str"");
        Files.createDirectories(skyboxPath);
        replaceSkybox();
      }
    }
 catch (    IOException e) {
      log.log(Level.INFO,""String_Node_Str"",e);
      try {
        delete(skyboxPath);
        log.fine(""String_Node_Str"");
      }
 catch (      IOException e1) {
        log.log(Level.INFO,""String_Node_Str"",e);
      }
    }
    if (customPathList != null) {
      log.fine(""String_Node_Str"");
      for (      CustomPath cp : customPathList.getList()) {
        if (cp.isSelected()) {
          Path source;
          if (cp.getPath().startsWith(customPath)) {
            source=customBackupPath.resolve(cp.getPath().getFileName());
          }
 else           if (cp.getPath().startsWith(localCustomPath)) {
            source=localCustomPath.resolve(cp.getPath().getFileName());
          }
 else {
            log.info(""String_Node_Str"" + cp.getPath());
            continue;
          }
          if (Files.exists(source)) {
            if (Files.isDirectory(source)) {
              try {
                Path dest=customPath.resolve(source.getFileName());
                copy(source,dest);
              }
 catch (              IOException e) {
                log.log(Level.INFO,""String_Node_Str"" + source.getFileName(),e);
              }
            }
 else             if (source.getFileName().toString().endsWith(""String_Node_Str"")) {
              try {
                Path dest=customPath.resolve(source.getFileName());
                Files.copy(source,dest);
              }
 catch (              IOException e) {
                log.log(Level.INFO,""String_Node_Str"" + source.getFileName(),e);
              }
            }
 else {
              log.info(""String_Node_Str"" + source.getFileName());
            }
          }
 else {
            log.info(""String_Node_Str"" + source);
          }
        }
      }
    }
  }
}","public void replaceAll() throws LawenaException {
  Path tfpath=cfg.getTfPath();
  Path customBackupPath=tfpath.resolve(""String_Node_Str"");
  Path customPath=tfpath.resolve(""String_Node_Str"");
  Path configBackupPath=tfpath.resolve(""String_Node_Str"");
  Path configPath=tfpath.resolve(""String_Node_Str"");
  Path localCustomPath=Paths.get(""String_Node_Str"");
  if (!Files.exists(configBackupPath)) {
    try {
      log.fine(""String_Node_Str"");
      configPath.toFile().setWritable(true);
      Files.move(configPath,configBackupPath);
      Files.createDirectories(configPath);
      copy(Paths.get(""String_Node_Str""),configPath);
    }
 catch (    IOException e) {
      log.log(Level.WARNING,""String_Node_Str"",e);
      throw new LawenaException(""String_Node_Str"",e);
    }
  }
  if (!Files.exists(customBackupPath)) {
    try {
      log.fine(""String_Node_Str"");
      customPath.toFile().setWritable(true);
      Files.move(customPath,customBackupPath);
    }
 catch (    IOException e) {
      log.log(Level.WARNING,""String_Node_Str"",e);
      throw new LawenaException(""String_Node_Str"",e);
    }
    try {
      log.fine(""String_Node_Str"");
      Path resourcePath=tfpath.resolve(""String_Node_Str"");
      Path scriptsPath=tfpath.resolve(""String_Node_Str"");
      Files.createDirectories(resourcePath);
      Files.createDirectories(scriptsPath);
      String hudName=cfg.getHud();
      if (!hudName.equals(""String_Node_Str"")) {
        copy(Paths.get(""String_Node_Str"",hudName,""String_Node_Str""),resourcePath);
        copy(Paths.get(""String_Node_Str"",hudName,""String_Node_Str""),scriptsPath);
      }
    }
 catch (    IOException e) {
      log.log(Level.INFO,""String_Node_Str"",e);
      throw new LawenaException(""String_Node_Str"",e);
    }
    Path skyboxPath=tfpath.resolve(""String_Node_Str"");
    try {
      String sky=cfg.getSkybox();
      if (sky != null && !sky.isEmpty() && !sky.equals(Key.Skybox.defValue())) {
        log.fine(""String_Node_Str"");
        Files.createDirectories(skyboxPath);
        replaceSkybox();
      }
    }
 catch (    IOException e) {
      log.log(Level.WARNING,""String_Node_Str"",e);
      try {
        delete(skyboxPath);
        log.fine(""String_Node_Str"");
      }
 catch (      IOException e1) {
        log.log(Level.WARNING,""String_Node_Str"",e1);
      }
      throw new LawenaException(""String_Node_Str"",e);
    }
    if (customPathList != null) {
      log.fine(""String_Node_Str"");
      for (      CustomPath cp : customPathList.getList()) {
        if (cp.isSelected()) {
          Path source;
          if (cp.getPath().startsWith(customPath)) {
            source=customBackupPath.resolve(cp.getPath().getFileName());
          }
 else           if (cp.getPath().startsWith(localCustomPath)) {
            source=localCustomPath.resolve(cp.getPath().getFileName());
          }
 else {
            log.info(""String_Node_Str"" + cp.getPath());
            continue;
          }
          if (Files.exists(source)) {
            if (Files.isDirectory(source)) {
              try {
                Path dest=customPath.resolve(source.getFileName());
                copy(source,dest);
              }
 catch (              IOException e) {
                log.log(Level.INFO,""String_Node_Str"" + source.getFileName(),e);
              }
            }
 else             if (source.getFileName().toString().endsWith(""String_Node_Str"")) {
              try {
                Path dest=customPath.resolve(source.getFileName());
                Files.copy(source,dest);
              }
 catch (              IOException e) {
                log.log(Level.INFO,""String_Node_Str"" + source.getFileName(),e);
              }
            }
 else {
              log.info(""String_Node_Str"" + source.getFileName());
            }
          }
 else {
            log.info(""String_Node_Str"" + source);
          }
        }
      }
    }
  }
}",0.9649053105548934
161925,"public void restoreAll(){
  Path tfpath=cfg.getTfPath();
  Path customBackupPath=tfpath.resolve(""String_Node_Str"");
  Path customPath=tfpath.resolve(""String_Node_Str"");
  Path configBackupPath=tfpath.resolve(""String_Node_Str"");
  Path configPath=tfpath.resolve(""String_Node_Str"");
  if (Files.exists(configBackupPath)) {
    log.fine(""String_Node_Str"");
    try {
      delete(configPath);
    }
 catch (    NoSuchFileException e) {
    }
catch (    IOException e) {
      log.log(Level.INFO,""String_Node_Str"",e);
    }
    try {
      if (isEmpty(configPath)) {
        Files.move(configBackupPath,configPath,StandardCopyOption.REPLACE_EXISTING);
      }
 else {
        showRestoreMessage();
      }
    }
 catch (    IOException e) {
      log.log(Level.INFO,""String_Node_Str"",e);
      showRestoreMessage();
    }
  }
  if (Files.exists(customBackupPath)) {
    log.fine(""String_Node_Str"");
    try {
      delete(customPath);
    }
 catch (    NoSuchFileException e) {
    }
catch (    IOException e) {
      log.log(Level.INFO,""String_Node_Str"",e);
    }
    try {
      if (isEmpty(customPath)) {
        Files.move(customBackupPath,customPath,StandardCopyOption.REPLACE_EXISTING);
      }
 else {
        showRestoreMessage();
      }
    }
 catch (    IOException e) {
      log.log(Level.INFO,""String_Node_Str"",e);
      showRestoreMessage();
    }
  }
}","public boolean restoreAll(){
  Path tfpath=cfg.getTfPath();
  Path customBackupPath=tfpath.resolve(""String_Node_Str"");
  Path customPath=tfpath.resolve(""String_Node_Str"");
  Path configBackupPath=tfpath.resolve(""String_Node_Str"");
  Path configPath=tfpath.resolve(""String_Node_Str"");
  boolean restoreComplete=true;
  if (Files.exists(configBackupPath)) {
    log.fine(""String_Node_Str"");
    try {
      delete(configPath);
    }
 catch (    NoSuchFileException e) {
    }
catch (    IOException e) {
      log.log(Level.INFO,""String_Node_Str"",e);
    }
    try {
      if (isEmpty(configPath)) {
        Files.move(configBackupPath,configPath,StandardCopyOption.REPLACE_EXISTING);
      }
 else {
        restoreComplete=false;
      }
    }
 catch (    IOException e) {
      log.log(Level.INFO,""String_Node_Str"",e);
      restoreComplete=false;
    }
  }
  if (Files.exists(customBackupPath)) {
    log.fine(""String_Node_Str"");
    try {
      delete(customPath);
    }
 catch (    NoSuchFileException e) {
    }
catch (    IOException e) {
      log.log(Level.INFO,""String_Node_Str"",e);
    }
    try {
      if (isEmpty(customPath)) {
        Files.move(customBackupPath,customPath,StandardCopyOption.REPLACE_EXISTING);
      }
 else {
        restoreComplete=false;
      }
    }
 catch (    IOException e) {
      log.log(Level.INFO,""String_Node_Str"",e);
      restoreComplete=false;
    }
  }
  if (!restoreComplete) {
    log.info(""String_Node_Str"");
    log.info(""String_Node_Str"");
  }
  return restoreComplete;
}",0.7628937348563517
161926,"@Override public void run(){
  view.getBtnStartTf().setEnabled(true);
  view.getBtnStartTf().setText(""String_Node_Str"");
}","@Override public void run(){
  if (worker != null) {
    view.getProgressBar().setVisible(true);
    view.getProgressBar().setIndeterminate(indeterminate);
    view.getProgressBar().setValue(0);
    worker.addPropertyChangeListener(new PropertyChangeListener(){
      public void propertyChange(      PropertyChangeEvent evt){
        if (""String_Node_Str"".equals(evt.getPropertyName())) {
          view.getProgressBar().setValue((Integer)evt.getNewValue());
        }
      }
    }
);
  }
 else {
    view.getProgressBar().setVisible(false);
    view.getProgressBar().setIndeterminate(indeterminate);
    view.getProgressBar().setValue(0);
  }
}",0.1352405721716515
161927,"@Override protected Map<String,ImageIcon> doInBackground() throws Exception {
  setCurrentWorker(this);
  view.getProgressBar().setIndeterminate(false);
  setProgress(0);
  final Map<String,ImageIcon> map=new HashMap<>();
  try {
    int i=1;
    for (    String skybox : data) {
      setProgress((int)(100 * ((double)i / data.size())));
      status.fine(""String_Node_Str"" + skybox);
      String img=""String_Node_Str"" + skybox + ""String_Node_Str"";
      if (!Files.exists(Paths.get(img))) {
        String filename=skybox + ""String_Node_Str"";
        cl.extractIfNeeded(settings.getTfPath(),""String_Node_Str"",Paths.get(""String_Node_Str""),filename);
        cl.generatePreview(filename);
      }
      ImageIcon icon=createPreviewIcon(img);
      map.put(skybox,icon);
      i++;
    }
  }
 catch (  Exception e) {
    log.log(Level.INFO,""String_Node_Str"",e);
  }
  return map;
}","@Override protected Void doInBackground() throws Exception {
  try {
    configureSkyboxes(view.getCmbSkybox());
  }
 catch (  Exception e) {
    log.log(Level.INFO,""String_Node_Str"",e);
  }
  return null;
}",0.3033088235294117
161928,"private void configureSkyboxes(final JComboBox<String> combo){
  Vector<String> data=new Vector<>();
  Path dir=Paths.get(""String_Node_Str"");
  if (Files.exists(dir)) {
    log.finer(""String_Node_Str"");
    try (DirectoryStream<Path> stream=Files.newDirectoryStream(dir,""String_Node_Str"")){
      for (      Path path : stream) {
        log.finer(""String_Node_Str"" + path);
        String skybox=path.toFile().getName();
        skybox=skybox.substring(0,skybox.indexOf(""String_Node_Str""));
        data.add(skybox);
      }
    }
 catch (    IOException e) {
      log.log(Level.INFO,""String_Node_Str"",e);
    }
  }
  Path vpk=Paths.get(""String_Node_Str"");
  if (Files.exists(vpk)) {
    log.finer(""String_Node_Str"" + vpk);
    for (    String file : cl.getVpkContents(settings.getTfPath(),vpk)) {
      if (file.endsWith(""String_Node_Str"")) {
        log.finer(""String_Node_Str"" + file);
        String skybox=file;
        skybox=skybox.substring(0,skybox.indexOf(""String_Node_Str""));
        if (!data.contains(skybox)) {
          data.add(skybox);
        }
 else {
          log.finer(""String_Node_Str"" + skybox);
        }
      }
    }
  }
  skyboxMap=new HashMap<>(data.size());
  getSkyboxLoader(new ArrayList<>(data)).execute();
  data.add(0,(String)Key.Skybox.defValue());
  combo.setModel(new DefaultComboBoxModel<String>(data));
  combo.addActionListener(new ActionListener(){
    @Override public void actionPerformed(    ActionEvent e){
      ImageIcon preview=skyboxMap.get(combo.getSelectedItem());
      view.getLblPreview().setText(preview == null ? ""String_Node_Str"" : ""String_Node_Str"");
      view.getLblSkyboxPreview().setIcon(preview);
    }
  }
);
}","private void configureSkyboxes(final JComboBox<String> combo){
  final Vector<String> data=new Vector<>();
  Path dir=Paths.get(""String_Node_Str"");
  if (Files.exists(dir)) {
    log.finer(""String_Node_Str"");
    try (DirectoryStream<Path> stream=Files.newDirectoryStream(dir,""String_Node_Str"")){
      for (      Path path : stream) {
        log.finer(""String_Node_Str"" + path);
        String skybox=path.toFile().getName();
        skybox=skybox.substring(0,skybox.indexOf(""String_Node_Str""));
        data.add(skybox);
      }
    }
 catch (    IOException e) {
      log.log(Level.INFO,""String_Node_Str"",e);
    }
  }
  Path vpk=Paths.get(""String_Node_Str"");
  if (Files.exists(vpk)) {
    log.finer(""String_Node_Str"" + vpk);
    for (    String file : cl.getVpkContents(settings.getTfPath(),vpk)) {
      if (file.endsWith(""String_Node_Str"")) {
        log.finer(""String_Node_Str"" + file);
        String skybox=file;
        skybox=skybox.substring(0,skybox.indexOf(""String_Node_Str""));
        if (!data.contains(skybox)) {
          data.add(skybox);
        }
 else {
          log.finer(""String_Node_Str"" + skybox);
        }
      }
    }
  }
  skyboxMap=new HashMap<>(data.size());
  new SkyboxPreviewTask(new ArrayList<>(data)).execute();
  data.add(0,(String)Key.Skybox.defValue());
  combo.setModel(new DefaultComboBoxModel<String>(data));
  combo.addActionListener(new ActionListener(){
    @Override public void actionPerformed(    ActionEvent e){
      ImageIcon preview=skyboxMap.get(combo.getSelectedItem());
      view.getLblPreview().setText(preview == null ? ""String_Node_Str"" : ""String_Node_Str"");
      view.getLblSkyboxPreview().setIcon(preview);
    }
  }
);
}",0.9875222816399288
161929,"private void saveSettings(){
  log.fine(""String_Node_Str"");
  String[] resolution=((String)view.getCmbResolution().getSelectedItem()).split(""String_Node_Str"");
  if (resolution.length == 2) {
    settings.setWidth(Integer.parseInt(resolution[0]));
    settings.setHeight(Integer.parseInt(resolution[1]));
  }
 else {
    log.fine(""String_Node_Str"");
    view.getCmbResolution().setSelectedItem(settings.getWidth() + ""String_Node_Str"" + settings.getHeight());
  }
  String framerate=(String)view.getCmbFramerate().getSelectedItem();
  settings.setFramerate(Integer.parseInt(framerate));
  settings.setHud(Key.Hud.getAllowedValues().get(view.getCmbHud().getSelectedIndex()));
  settings.setViewmodelSwitch(Key.ViewmodelSwitch.getAllowedValues().get(view.getCmbViewmodel().getSelectedIndex()));
  settings.setViewmodelFov((int)view.getSpinnerViewmodelFov().getValue());
  settings.setDxlevel(Key.DxLevel.getAllowedValues().get(view.getCmbQuality().getSelectedIndex()));
  settings.setMotionBlur(view.getEnableMotionBlur().isSelected());
  settings.setCombattext(!view.getDisableCombatText().isSelected());
  settings.setCrosshair(!view.getDisableCrosshair().isSelected());
  settings.setCrosshairSwitch(!view.getDisableCrosshairSwitch().isSelected());
  settings.setHitsounds(!view.getDisableHitSounds().isSelected());
  settings.setVoice(!view.getDisableVoiceChat().isSelected());
  settings.setSkybox((String)view.getCmbSkybox().getSelectedItem());
  settings.setCondebug(view.getChckbxUsecondebug().isSelected());
  Path tfpath=settings.getTfPath();
  List<String> selected=new ArrayList<>();
  for (  CustomPath cp : customPaths.getList()) {
    Path path=cp.getPath();
    if (!cp.getContents().contains(PathContents.READONLY) && cp.isSelected()) {
      String key=(path.startsWith(tfpath) ? ""String_Node_Str"" : ""String_Node_Str"");
      key+=path.getFileName().toString();
      selected.add(key);
    }
  }
  settings.setCustomResources(selected);
  settings.save();
}","private void saveSettings(){
  String[] resolution=((String)view.getCmbResolution().getSelectedItem()).split(""String_Node_Str"");
  if (resolution.length == 2) {
    settings.setWidth(Integer.parseInt(resolution[0]));
    settings.setHeight(Integer.parseInt(resolution[1]));
  }
 else {
    log.fine(""String_Node_Str"");
    view.getCmbResolution().setSelectedItem(settings.getWidth() + ""String_Node_Str"" + settings.getHeight());
  }
  String framerate=(String)view.getCmbFramerate().getSelectedItem();
  settings.setFramerate(Integer.parseInt(framerate));
  settings.setHud(Key.Hud.getAllowedValues().get(view.getCmbHud().getSelectedIndex()));
  settings.setViewmodelSwitch(Key.ViewmodelSwitch.getAllowedValues().get(view.getCmbViewmodel().getSelectedIndex()));
  settings.setViewmodelFov((int)view.getSpinnerViewmodelFov().getValue());
  settings.setDxlevel(Key.DxLevel.getAllowedValues().get(view.getCmbQuality().getSelectedIndex()));
  settings.setMotionBlur(view.getEnableMotionBlur().isSelected());
  settings.setCombattext(!view.getDisableCombatText().isSelected());
  settings.setCrosshair(!view.getDisableCrosshair().isSelected());
  settings.setCrosshairSwitch(!view.getDisableCrosshairSwitch().isSelected());
  settings.setHitsounds(!view.getDisableHitSounds().isSelected());
  settings.setVoice(!view.getDisableVoiceChat().isSelected());
  settings.setSkybox((String)view.getCmbSkybox().getSelectedItem());
  settings.setCondebug(view.getChckbxUsecondebug().isSelected());
  Path tfpath=settings.getTfPath();
  List<String> selected=new ArrayList<>();
  for (  CustomPath cp : customPaths.getList()) {
    Path path=cp.getPath();
    if (!cp.getContents().contains(PathContents.READONLY) && cp.isSelected()) {
      String key=(path.startsWith(tfpath) ? ""String_Node_Str"" : ""String_Node_Str"");
      key+=path.getFileName().toString();
      selected.add(key);
    }
  }
  settings.setCustomResources(selected);
  settings.save();
  log.fine(""String_Node_Str"");
}",0.9842878864673088
161930,"private void setCurrentWorker(SwingWorker<?,?> worker){
  if (worker != null) {
    view.getProgressBar().setVisible(true);
    view.getProgressBar().setIndeterminate(true);
    view.getProgressBar().setValue(0);
    worker.addPropertyChangeListener(new PropertyChangeListener(){
      public void propertyChange(      PropertyChangeEvent evt){
        if (""String_Node_Str"".equals(evt.getPropertyName())) {
          view.getProgressBar().setValue((Integer)evt.getNewValue());
        }
      }
    }
);
  }
 else {
    view.getProgressBar().setVisible(false);
    view.getProgressBar().setIndeterminate(false);
    view.getProgressBar().setValue(0);
  }
}","private void setCurrentWorker(final SwingWorker<?,?> worker,final boolean indeterminate){
  SwingUtilities.invokeLater(new Runnable(){
    @Override public void run(){
      if (worker != null) {
        view.getProgressBar().setVisible(true);
        view.getProgressBar().setIndeterminate(indeterminate);
        view.getProgressBar().setValue(0);
        worker.addPropertyChangeListener(new PropertyChangeListener(){
          public void propertyChange(          PropertyChangeEvent evt){
            if (""String_Node_Str"".equals(evt.getPropertyName())) {
              view.getProgressBar().setValue((Integer)evt.getNewValue());
            }
          }
        }
);
      }
 else {
        view.getProgressBar().setVisible(false);
        view.getProgressBar().setIndeterminate(indeterminate);
        view.getProgressBar().setValue(0);
      }
    }
  }
);
}",0.8530183727034121
161931,"@Override protected void done(){
  try {
    skyboxMap.putAll(get());
    selectSkyboxFromSettings();
    log.fine(""String_Node_Str"");
  }
 catch (  CancellationException|InterruptedException|ExecutionException e) {
    log.info(""String_Node_Str"");
  }
  status.info(""String_Node_Str"");
  if (!isCancelled()) {
    setCurrentWorker(null);
  }
}","@Override protected void done(){
  selectSkyboxFromSettings();
}",0.3137254901960784
161932,"public Lawena(){
  String impl=this.getClass().getPackage().getImplementationVersion();
  if (impl != null) {
    version=impl;
  }
  build=getManifestString(""String_Node_Str"",now(""String_Node_Str""));
  String osname=System.getProperty(""String_Node_Str"");
  if (osname.contains(""String_Node_Str"")) {
    cl=new CLWindows();
  }
 else   if (osname.contains(""String_Node_Str"")) {
    cl=new CLLinux();
  }
 else   if (osname.contains(""String_Node_Str"")) {
    cl=new CLOSX();
  }
 else {
    throw new UnsupportedOperationException(""String_Node_Str"");
  }
  cl.setLookAndFeel();
  settings=new SettingsManager(""String_Node_Str"");
  oDxlevel=cl.getSystemDxLevel();
  steampath=cl.getSteamPath();
  Path tfpath=settings.getTfPath();
  if (tfpath == null || tfpath.toString().isEmpty()) {
    tfpath=steampath.resolve(""String_Node_Str"");
  }
  if (!Files.exists(tfpath)) {
    tfpath=getChosenTfPath();
    if (tfpath == null) {
      log.info(""String_Node_Str"");
      System.exit(1);
    }
  }
  settings.setTfPath(tfpath);
  files=new FileManager(settings,cl);
  Path moviepath=settings.getMoviePath();
  if (moviepath == null || moviepath.toString().isEmpty() || !Files.exists(moviepath)) {
    moviepath=getChosenMoviePath();
    if (moviepath == null) {
      log.info(""String_Node_Str"");
      System.exit(1);
    }
  }
  movies=new MovieManager(moviepath.toString());
  settings.setMoviePath(moviepath);
  settings.save();
  files.restoreAll();
  customPaths=new CustomPathList(settings,cl);
  files.setCustomPathList(customPaths);
  watcher=new Thread(new Runnable(){
    @Override public void run(){
      try {
        WatchDir w=new WatchDir(Paths.get(""String_Node_Str""),false){
          @Override public void entryCreated(          Path child){
            try {
              customPaths.addPath(child);
            }
 catch (            IOException e) {
              log.log(Level.FINE,""String_Node_Str"",e);
            }
          }
          @Override public void entryModified(          Path child){
            customPaths.updatePath(child);
          }
          @Override public void entryDeleted(          Path child){
            customPaths.removePath(child);
          }
        }
;
        w.processEvents();
      }
 catch (      IOException e) {
        log.log(Level.FINE,""String_Node_Str"",e);
      }
    }
  }
,""String_Node_Str"");
  watcher.setDaemon(true);
  vdm=new DemoEditor(settings,cl);
}","public Lawena(){
  String impl=this.getClass().getPackage().getImplementationVersion();
  if (impl != null) {
    version=impl;
  }
  build=getManifestString(""String_Node_Str"",now(""String_Node_Str""));
  String osname=System.getProperty(""String_Node_Str"");
  if (osname.contains(""String_Node_Str"")) {
    cl=new CLWindows();
  }
 else   if (osname.contains(""String_Node_Str"")) {
    cl=new CLLinux();
  }
 else   if (osname.contains(""String_Node_Str"")) {
    cl=new CLOSX();
  }
 else {
    throw new UnsupportedOperationException(""String_Node_Str"");
  }
  cl.setLookAndFeel();
  settings=new SettingsManager(""String_Node_Str"");
  oDxlevel=cl.getSystemDxLevel();
  steampath=cl.getSteamPath();
  Path tfpath=settings.getTfPath();
  if (tfpath == null || tfpath.toString().isEmpty()) {
    tfpath=steampath.resolve(""String_Node_Str"");
  }
  if (!Files.exists(tfpath)) {
    tfpath=getChosenTfPath();
    if (tfpath == null) {
      log.info(""String_Node_Str"");
      System.exit(1);
    }
  }
  settings.setTfPath(tfpath);
  files=new FileManager(settings,cl);
  Path moviepath=settings.getMoviePath();
  if (moviepath == null || moviepath.toString().isEmpty() || !Files.exists(moviepath)) {
    moviepath=getChosenMoviePath();
    if (moviepath == null) {
      log.info(""String_Node_Str"");
      System.exit(1);
    }
  }
  movies=new MovieManager(settings);
  settings.setMoviePath(moviepath);
  settings.save();
  files.restoreAll();
  customPaths=new CustomPathList(settings,cl);
  files.setCustomPathList(customPaths);
  watcher=new Thread(new Runnable(){
    @Override public void run(){
      try {
        WatchDir w=new WatchDir(Paths.get(""String_Node_Str""),false){
          @Override public void entryCreated(          Path child){
            try {
              customPaths.addPath(child);
            }
 catch (            IOException e) {
              log.log(Level.FINE,""String_Node_Str"",e);
            }
          }
          @Override public void entryModified(          Path child){
            customPaths.updatePath(child);
          }
          @Override public void entryDeleted(          Path child){
            customPaths.removePath(child);
          }
        }
;
        w.processEvents();
      }
 catch (      IOException e) {
        log.log(Level.FINE,""String_Node_Str"",e);
      }
    }
  }
,""String_Node_Str"");
  watcher.setDaemon(true);
  vdm=new DemoEditor(settings,cl);
}",0.9942052980132452
161933,"public MovieManager(String dir){
  moviedir=dir;
}","public MovieManager(SettingsManager cfg){
  this.cfg=cfg;
}",0.6605504587155964
161934,"public void movieOffset() throws IOException {
  FilenameFilter filter=new FilenameFilter(){
    @Override public boolean accept(    File dir,    String name){
      return name.endsWith(""String_Node_Str"");
    }
  }
;
  String[] moviefiles=new File(moviedir).list(filter);
  String lastmovie=""String_Node_Str"";
  String alias=""String_Node_Str"";
  for (int i=0; i < moviefiles.length; ++i) {
    lastmovie=lastmovie.compareTo(moviefiles[i]) > 0 ? lastmovie : moviefiles[i];
  }
  if (!lastmovie.equals(""String_Node_Str"")) {
switch (lastmovie.charAt(0)) {
case 'a':
      alias=""String_Node_Str"";
    break;
case 'b':
  alias=""String_Node_Str"";
break;
case 'c':
alias=""String_Node_Str"";
break;
case 'd':
alias=""String_Node_Str"";
break;
case 'e':
alias=""String_Node_Str"";
break;
case 'f':
alias=""String_Node_Str"";
break;
case 'g':
alias=""String_Node_Str"";
break;
case 'h':
alias=""String_Node_Str"";
break;
case 'i':
alias=""String_Node_Str"";
break;
case 'j':
alias=""String_Node_Str"";
break;
case 'k':
alias=""String_Node_Str"";
break;
case 'l':
alias=""String_Node_Str"";
break;
case 'm':
alias=""String_Node_Str"";
break;
case 'n':
alias=""String_Node_Str"";
break;
case 'o':
alias=""String_Node_Str"";
break;
case 'p':
alias=""String_Node_Str"";
break;
}
}
PrintWriter pw=new PrintWriter(new FileWriter(""String_Node_Str""));
pw.println(alias);
pw.close();
}","public void movieOffset() throws IOException {
  String lastmovie=""String_Node_Str"";
  String alias=""String_Node_Str"";
  try (DirectoryStream<Path> stream=Files.newDirectoryStream(cfg.getMoviePath(),""String_Node_Str"")){
    for (    Path moviefile : stream) {
      String filename=moviefile.getFileName().toString();
      lastmovie=(lastmovie.compareTo(filename) > 0 ? lastmovie : filename);
    }
  }
   if (!lastmovie.equals(""String_Node_Str"")) {
    int idx=""String_Node_Str"".indexOf(lastmovie.charAt(0));
    if (idx >= 0) {
      alias=""String_Node_Str"" + (idx + 2);
    }
 else     if (lastmovie.charAt(0) == 'p') {
      alias=""String_Node_Str"";
    }
  }
  PrintWriter pw=new PrintWriter(new FileWriter(""String_Node_Str""));
  pw.println(alias);
  pw.close();
}",0.2329545454545454
161935,"public void createMovienameCfgs() throws IOException {
  String[] letters={""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str""};
  String[] numbers={""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str""};
  for (int i=0; i < 16; ++i) {
    PrintWriter pw=new PrintWriter(new FileWriter(""String_Node_Str"" + letters[i] + numbers[i]+ ""String_Node_Str""));
    pw.println(""String_Node_Str"" + moviedir + ""String_Node_Str""+ letters[i]+ numbers[i]+ ""String_Node_Str"");
    pw.close();
  }
}","public void createMovienameCfgs() throws IOException {
  String[] prefixes={""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str""};
  for (  String prefix : prefixes) {
    PrintWriter pw=new PrintWriter(new FileWriter(""String_Node_Str"" + prefix + ""String_Node_Str""));
    pw.println(""String_Node_Str"" + cfg.getMoviePath() + ""String_Node_Str""+ prefix+ ""String_Node_Str"");
    pw.close();
  }
}",0.7131095630145662
161936,"private void replaceSkybox() throws IOException {
  Path tfpath=cfg.getTfPath();
  Set<Path> vmtPaths=new LinkedHashSet<>();
  Set<Path> vtfPaths=new LinkedHashSet<>();
  Path skyboxPath=tfpath.resolve(""String_Node_Str"");
  String skyboxVpk=""String_Node_Str"";
  String skyboxFilename=cfg.getSkybox();
  try (DirectoryStream<Path> stream=Files.newDirectoryStream(Paths.get(""String_Node_Str""))){
    for (    Path path : stream) {
      String pathStr=path.toFile().getName();
      if (pathStr.endsWith(""String_Node_Str"")) {
        Files.copy(path,skyboxPath.resolve(pathStr));
        vmtPaths.add(path);
      }
      if (pathStr.endsWith(""String_Node_Str"") && pathStr.startsWith(skyboxFilename)) {
        vtfPaths.add(path);
      }
    }
  }
   for (  String pathStr : cl.getVpkContents(tfpath,Paths.get(skyboxVpk))) {
    Path path=Paths.get(""String_Node_Str"",pathStr);
    if (pathStr.endsWith(""String_Node_Str"")) {
      cl.extractIfNeeded(tfpath,skyboxVpk,Paths.get(""String_Node_Str""),pathStr);
      Files.copy(path,skyboxPath.resolve(pathStr));
      vmtPaths.add(path);
    }
    if (pathStr.endsWith(""String_Node_Str"") && pathStr.startsWith(skyboxFilename)) {
      vtfPaths.add(path);
    }
  }
  for (  Path vtfPath : vtfPaths) {
    for (    Path vmtPath : vmtPaths) {
      String vtf=vtfPath.getFileName().toString();
      String vmt=vmtPath.getFileName().toString();
      if ((vtf.endsWith(""String_Node_Str"") && vmt.endsWith(""String_Node_Str"")) || (vtf.endsWith(""String_Node_Str"") && vmt.endsWith(""String_Node_Str"")) || (vtf.endsWith(""String_Node_Str"") && vmt.endsWith(""String_Node_Str""))|| (vtf.endsWith(""String_Node_Str"") && vmt.endsWith(""String_Node_Str""))|| (vtf.endsWith(""String_Node_Str"") && vmt.endsWith(""String_Node_Str""))|| (vtf.endsWith(""String_Node_Str"") && vmt.endsWith(""String_Node_Str""))) {
        cl.extractIfNeeded(tfpath,skyboxVpk,Paths.get(""String_Node_Str""),vtfPath.getFileName().toString());
        Files.copy(vtfPath,skyboxPath.resolve(vmt.substring(0,vmt.indexOf(""String_Node_Str"")) + ""String_Node_Str""));
      }
    }
  }
}","private void replaceSkybox() throws IOException {
  Path tfpath=cfg.getTfPath();
  Set<Path> vmtPaths=new LinkedHashSet<>();
  Set<Path> vtfPaths=new LinkedHashSet<>();
  Path skyboxPath=tfpath.resolve(""String_Node_Str"");
  String skyboxVpk=""String_Node_Str"";
  String skyboxFilename=cfg.getSkybox();
  try (DirectoryStream<Path> stream=Files.newDirectoryStream(Paths.get(""String_Node_Str""))){
    for (    Path path : stream) {
      String pathStr=path.toFile().getName();
      if (pathStr.endsWith(""String_Node_Str"")) {
        Files.copy(path,skyboxPath.resolve(pathStr));
        vmtPaths.add(path);
      }
      if (pathStr.endsWith(""String_Node_Str"") && pathStr.startsWith(skyboxFilename)) {
        vtfPaths.add(path);
      }
    }
  }
   for (  String pathStr : cl.getVpkContents(tfpath,Paths.get(skyboxVpk))) {
    Path path=Paths.get(""String_Node_Str"",pathStr);
    if (pathStr.endsWith(""String_Node_Str"")) {
      cl.extractIfNeeded(tfpath,skyboxVpk,Paths.get(""String_Node_Str""),pathStr);
      Files.copy(path,skyboxPath.resolve(pathStr),StandardCopyOption.REPLACE_EXISTING);
      vmtPaths.add(path);
    }
    if (pathStr.endsWith(""String_Node_Str"") && pathStr.startsWith(skyboxFilename)) {
      vtfPaths.add(path);
    }
  }
  for (  Path vtfPath : vtfPaths) {
    for (    Path vmtPath : vmtPaths) {
      String vtf=vtfPath.getFileName().toString();
      String vmt=vmtPath.getFileName().toString();
      if ((vtf.endsWith(""String_Node_Str"") && vmt.endsWith(""String_Node_Str"")) || (vtf.endsWith(""String_Node_Str"") && vmt.endsWith(""String_Node_Str"")) || (vtf.endsWith(""String_Node_Str"") && vmt.endsWith(""String_Node_Str""))|| (vtf.endsWith(""String_Node_Str"") && vmt.endsWith(""String_Node_Str""))|| (vtf.endsWith(""String_Node_Str"") && vmt.endsWith(""String_Node_Str""))|| (vtf.endsWith(""String_Node_Str"") && vmt.endsWith(""String_Node_Str""))) {
        cl.extractIfNeeded(tfpath,skyboxVpk,Paths.get(""String_Node_Str""),vtfPath.getFileName().toString());
        Files.copy(vtfPath,skyboxPath.resolve(vmt.substring(0,vmt.indexOf(""String_Node_Str"")) + ""String_Node_Str""));
      }
    }
  }
}",0.9913793103448276
161937,"/** 
 * Create the frame.
 */
public LawenaView(){
  setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);
  menuBar=new JMenuBar();
  setJMenuBar(menuBar);
  mnFile=new JMenu(""String_Node_Str"");
  menuBar.add(mnFile);
  mntmChangeTfDirectory=new JMenuItem(""String_Node_Str"");
  mnFile.add(mntmChangeTfDirectory);
  mntmChangeMovieDirectory=new JMenuItem(""String_Node_Str"");
  mnFile.add(mntmChangeMovieDirectory);
  contentPane=new JPanel();
  contentPane.setBorder(new EmptyBorder(5,5,5,5));
  contentPane.setLayout(new BorderLayout(5,5));
  contentPane.setPreferredSize(new Dimension(650,400));
  setContentPane(contentPane);
  tabbedPane=new JTabbedPane(JTabbedPane.TOP);
  contentPane.add(tabbedPane,BorderLayout.CENTER);
  JPanel panelSettings=new JPanel();
  tabbedPane.addTab(""String_Node_Str"",null,panelSettings,null);
  GridBagLayout gbl_panelSettings=new GridBagLayout();
  gbl_panelSettings.columnWidths=new int[]{0,1,0,1,1,0};
  gbl_panelSettings.rowHeights=new int[]{0,0,0,0,0,0,0,0,0,0,0,0};
  gbl_panelSettings.columnWeights=new double[]{0.0,1.0,0.0,1.0,2.0};
  gbl_panelSettings.rowWeights=new double[]{0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,1.0,0.0,Double.MIN_VALUE};
  panelSettings.setLayout(gbl_panelSettings);
  lblResolution=new JLabel(""String_Node_Str"");
  GridBagConstraints gbc_lblResolution=new GridBagConstraints();
  gbc_lblResolution.insets=new Insets(5,5,5,5);
  gbc_lblResolution.anchor=GridBagConstraints.EAST;
  gbc_lblResolution.gridx=0;
  gbc_lblResolution.gridy=0;
  panelSettings.add(lblResolution,gbc_lblResolution);
  cmbResolution=new JComboBox<>();
  cmbResolution.setModel(new DefaultComboBoxModel<String>(new String[]{""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str""}));
  cmbResolution.setEditable(true);
  GridBagConstraints gbc_cmbResolution=new GridBagConstraints();
  gbc_cmbResolution.fill=GridBagConstraints.HORIZONTAL;
  gbc_cmbResolution.insets=new Insets(5,0,5,5);
  gbc_cmbResolution.gridx=1;
  gbc_cmbResolution.gridy=0;
  panelSettings.add(cmbResolution,gbc_cmbResolution);
  lblFrameRate=new JLabel(""String_Node_Str"");
  GridBagConstraints gbc_lblFrameRate=new GridBagConstraints();
  gbc_lblFrameRate.anchor=GridBagConstraints.EAST;
  gbc_lblFrameRate.insets=new Insets(5,0,5,5);
  gbc_lblFrameRate.gridx=2;
  gbc_lblFrameRate.gridy=0;
  panelSettings.add(lblFrameRate,gbc_lblFrameRate);
  cmbFramerate=new JComboBox<>();
  cmbFramerate.setModel(new DefaultComboBoxModel<String>(new String[]{""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str""}));
  cmbFramerate.setEditable(true);
  GridBagConstraints gbc_cmbFramerate=new GridBagConstraints();
  gbc_cmbFramerate.fill=GridBagConstraints.HORIZONTAL;
  gbc_cmbFramerate.insets=new Insets(5,0,5,5);
  gbc_cmbFramerate.gridx=3;
  gbc_cmbFramerate.gridy=0;
  panelSettings.add(cmbFramerate,gbc_cmbFramerate);
  panelCustomContent=new JPanel();
  panelCustomContent.setBorder(new TitledBorder(null,""String_Node_Str"",TitledBorder.LEADING,TitledBorder.TOP,null,null));
  GridBagConstraints gbc_panelCustomContent=new GridBagConstraints();
  gbc_panelCustomContent.insets=new Insets(0,0,5,0);
  gbc_panelCustomContent.gridwidth=2;
  gbc_panelCustomContent.gridheight=10;
  gbc_panelCustomContent.fill=GridBagConstraints.BOTH;
  gbc_panelCustomContent.gridx=4;
  gbc_panelCustomContent.gridy=0;
  panelSettings.add(panelCustomContent,gbc_panelCustomContent);
  GridBagLayout gbl_panelCustomContent=new GridBagLayout();
  gbl_panelCustomContent.columnWidths=new int[]{0,0};
  gbl_panelCustomContent.rowHeights=new int[]{0,0,0};
  gbl_panelCustomContent.columnWeights=new double[]{1.0,Double.MIN_VALUE};
  gbl_panelCustomContent.rowWeights=new double[]{1.0,0.0,Double.MIN_VALUE};
  panelCustomContent.setLayout(gbl_panelCustomContent);
  scrollPane=new JScrollPane();
  GridBagConstraints gbc_scrollPane=new GridBagConstraints();
  gbc_scrollPane.fill=GridBagConstraints.BOTH;
  gbc_scrollPane.gridx=0;
  gbc_scrollPane.gridy=0;
  panelCustomContent.add(scrollPane,gbc_scrollPane);
  tableCustomContent=new JTable();
  tableCustomContent.setTableHeader(null);
  tableCustomContent.setGridColor(new Color(0,0,0,30));
  tableCustomContent.setAutoResizeMode(JTable.AUTO_RESIZE_LAST_COLUMN);
  tableCustomContent.setSelectionMode(ListSelectionModel.SINGLE_SELECTION);
  scrollPane.setViewportView(tableCustomContent);
  JLabel lblHud=new JLabel(""String_Node_Str"");
  GridBagConstraints gbc_lblHud=new GridBagConstraints();
  gbc_lblHud.anchor=GridBagConstraints.EAST;
  gbc_lblHud.insets=new Insets(0,5,5,5);
  gbc_lblHud.gridx=0;
  gbc_lblHud.gridy=1;
  panelSettings.add(lblHud,gbc_lblHud);
  cmbHud=new JComboBox<>();
  cmbHud.setModel(new DefaultComboBoxModel<>(new String[]{""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str""}));
  GridBagConstraints gbc_cmbHud=new GridBagConstraints();
  gbc_cmbHud.fill=GridBagConstraints.HORIZONTAL;
  gbc_cmbHud.insets=new Insets(0,0,5,5);
  gbc_cmbHud.gridx=1;
  gbc_cmbHud.gridy=1;
  panelSettings.add(cmbHud,gbc_cmbHud);
  JLabel lblDxLevel=new JLabel(""String_Node_Str"");
  GridBagConstraints gbc_lblDxLevel=new GridBagConstraints();
  gbc_lblDxLevel.anchor=GridBagConstraints.EAST;
  gbc_lblDxLevel.insets=new Insets(0,5,5,5);
  gbc_lblDxLevel.gridx=2;
  gbc_lblDxLevel.gridy=1;
  panelSettings.add(lblDxLevel,gbc_lblDxLevel);
  cmbQuality=new JComboBox<>();
  cmbQuality.setModel(new DefaultComboBoxModel<String>(new String[]{""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str""}));
  GridBagConstraints gbc_cmbQuality=new GridBagConstraints();
  gbc_cmbQuality.fill=GridBagConstraints.HORIZONTAL;
  gbc_cmbQuality.insets=new Insets(0,0,5,5);
  gbc_cmbQuality.gridx=3;
  gbc_cmbQuality.gridy=1;
  panelSettings.add(cmbQuality,gbc_cmbQuality);
  JLabel lblSkybox=new JLabel(""String_Node_Str"");
  GridBagConstraints gbc_lblSkybox=new GridBagConstraints();
  gbc_lblSkybox.anchor=GridBagConstraints.EAST;
  gbc_lblSkybox.insets=new Insets(0,5,5,5);
  gbc_lblSkybox.gridx=0;
  gbc_lblSkybox.gridy=2;
  panelSettings.add(lblSkybox,gbc_lblSkybox);
  cmbSkybox=new JComboBox<>();
  GridBagConstraints gbc_cmbSkybox=new GridBagConstraints();
  gbc_cmbSkybox.fill=GridBagConstraints.HORIZONTAL;
  gbc_cmbSkybox.insets=new Insets(0,0,5,5);
  gbc_cmbSkybox.gridx=1;
  gbc_cmbSkybox.gridy=2;
  panelSettings.add(cmbSkybox,gbc_cmbSkybox);
  lblPreview=new JLabel(""String_Node_Str"");
  GridBagConstraints gbc_lblPreview=new GridBagConstraints();
  gbc_lblPreview.anchor=GridBagConstraints.EAST;
  gbc_lblPreview.insets=new Insets(0,0,5,5);
  gbc_lblPreview.gridx=2;
  gbc_lblPreview.gridy=2;
  panelSettings.add(lblPreview,gbc_lblPreview);
  lblSkyboxPreview=new JLabel(""String_Node_Str"");
  GridBagConstraints gbc_lblSkyboxPreview=new GridBagConstraints();
  gbc_lblSkyboxPreview.anchor=GridBagConstraints.NORTHWEST;
  gbc_lblSkyboxPreview.gridheight=4;
  gbc_lblSkyboxPreview.insets=new Insets(0,0,5,5);
  gbc_lblSkyboxPreview.gridx=3;
  gbc_lblSkyboxPreview.gridy=2;
  panelSettings.add(lblSkyboxPreview,gbc_lblSkyboxPreview);
  JLabel lblViewmodels=new JLabel(""String_Node_Str"");
  GridBagConstraints gbc_lblViewmodels=new GridBagConstraints();
  gbc_lblViewmodels.anchor=GridBagConstraints.EAST;
  gbc_lblViewmodels.insets=new Insets(0,5,5,5);
  gbc_lblViewmodels.gridx=0;
  gbc_lblViewmodels.gridy=3;
  panelSettings.add(lblViewmodels,gbc_lblViewmodels);
  cmbViewmodel=new JComboBox<>();
  cmbViewmodel.setModel(new DefaultComboBoxModel<String>(new String[]{""String_Node_Str"",""String_Node_Str"",""String_Node_Str""}));
  GridBagConstraints gbc_cmbViewmodel=new GridBagConstraints();
  gbc_cmbViewmodel.insets=new Insets(0,0,5,5);
  gbc_cmbViewmodel.fill=GridBagConstraints.HORIZONTAL;
  gbc_cmbViewmodel.gridx=1;
  gbc_cmbViewmodel.gridy=3;
  panelSettings.add(cmbViewmodel,gbc_cmbViewmodel);
  horizontalStrut=Box.createHorizontalStrut(24);
  GridBagConstraints gbc_horizontalStrut=new GridBagConstraints();
  gbc_horizontalStrut.insets=new Insets(0,0,5,5);
  gbc_horizontalStrut.gridx=2;
  gbc_horizontalStrut.gridy=3;
  panelSettings.add(horizontalStrut,gbc_horizontalStrut);
  JLabel lblViewmodelFov=new JLabel(""String_Node_Str"");
  GridBagConstraints gbc_lblViewmodelFov=new GridBagConstraints();
  gbc_lblViewmodelFov.anchor=GridBagConstraints.EAST;
  gbc_lblViewmodelFov.insets=new Insets(0,5,5,5);
  gbc_lblViewmodelFov.gridx=0;
  gbc_lblViewmodelFov.gridy=4;
  panelSettings.add(lblViewmodelFov,gbc_lblViewmodelFov);
  spinnerViewmodelFov=new JSpinner();
  GridBagConstraints gbc_spinnerViewmodelFov=new GridBagConstraints();
  gbc_spinnerViewmodelFov.anchor=GridBagConstraints.WEST;
  gbc_spinnerViewmodelFov.insets=new Insets(0,0,5,5);
  gbc_spinnerViewmodelFov.gridx=1;
  gbc_spinnerViewmodelFov.gridy=4;
  panelSettings.add(spinnerViewmodelFov,gbc_spinnerViewmodelFov);
  spinnerViewmodelFov.setModel(new SpinnerNumberModel(70,55,90,1));
  verticalStrut=Box.createVerticalStrut(22);
  GridBagConstraints gbc_verticalStrut=new GridBagConstraints();
  gbc_verticalStrut.insets=new Insets(0,0,5,5);
  gbc_verticalStrut.gridx=0;
  gbc_verticalStrut.gridy=5;
  panelSettings.add(verticalStrut,gbc_verticalStrut);
  panelCheckboxes=new JPanel();
  panelCheckboxes.setBorder(new TitledBorder(UIManager.getBorder(""String_Node_Str""),""String_Node_Str"",TitledBorder.LEADING,TitledBorder.TOP,null,null));
  GridBagConstraints gbc_panelCheckboxes=new GridBagConstraints();
  gbc_panelCheckboxes.insets=new Insets(0,0,5,5);
  gbc_panelCheckboxes.gridheight=4;
  gbc_panelCheckboxes.gridwidth=4;
  gbc_panelCheckboxes.fill=GridBagConstraints.BOTH;
  gbc_panelCheckboxes.gridx=0;
  gbc_panelCheckboxes.gridy=6;
  panelSettings.add(panelCheckboxes,gbc_panelCheckboxes);
  GridBagLayout gbl_panelCheckboxes=new GridBagLayout();
  gbl_panelCheckboxes.columnWidths=new int[]{0,0,0};
  gbl_panelCheckboxes.rowHeights=new int[]{0,0,0,0};
  gbl_panelCheckboxes.columnWeights=new double[]{1.0,1.0,Double.MIN_VALUE};
  gbl_panelCheckboxes.rowWeights=new double[]{0.0,0.0,0.0,Double.MIN_VALUE};
  panelCheckboxes.setLayout(gbl_panelCheckboxes);
  enableMotionBlur=new JCheckBox(""String_Node_Str"");
  GridBagConstraints gbc_enableMotionBlur=new GridBagConstraints();
  gbc_enableMotionBlur.insets=new Insets(0,0,0,5);
  gbc_enableMotionBlur.anchor=GridBagConstraints.WEST;
  gbc_enableMotionBlur.gridx=0;
  gbc_enableMotionBlur.gridy=0;
  panelCheckboxes.add(enableMotionBlur,gbc_enableMotionBlur);
  disableCombatText=new JCheckBox(""String_Node_Str"");
  GridBagConstraints gbc_disableCombatText=new GridBagConstraints();
  gbc_disableCombatText.anchor=GridBagConstraints.WEST;
  gbc_disableCombatText.gridx=1;
  gbc_disableCombatText.gridy=0;
  panelCheckboxes.add(disableCombatText,gbc_disableCombatText);
  disableHitSounds=new JCheckBox(""String_Node_Str"");
  GridBagConstraints gbc_disableHitSounds=new GridBagConstraints();
  gbc_disableHitSounds.insets=new Insets(0,0,0,5);
  gbc_disableHitSounds.anchor=GridBagConstraints.WEST;
  gbc_disableHitSounds.gridx=0;
  gbc_disableHitSounds.gridy=1;
  panelCheckboxes.add(disableHitSounds,gbc_disableHitSounds);
  disableCrosshair=new JCheckBox(""String_Node_Str"");
  GridBagConstraints gbc_disableCrosshair=new GridBagConstraints();
  gbc_disableCrosshair.anchor=GridBagConstraints.WEST;
  gbc_disableCrosshair.gridx=1;
  gbc_disableCrosshair.gridy=1;
  panelCheckboxes.add(disableCrosshair,gbc_disableCrosshair);
  disableVoiceChat=new JCheckBox(""String_Node_Str"");
  GridBagConstraints gbc_disableVoiceChat=new GridBagConstraints();
  gbc_disableVoiceChat.insets=new Insets(0,0,0,5);
  gbc_disableVoiceChat.anchor=GridBagConstraints.WEST;
  gbc_disableVoiceChat.gridx=0;
  gbc_disableVoiceChat.gridy=2;
  panelCheckboxes.add(disableVoiceChat,gbc_disableVoiceChat);
  disableCrosshairSwitch=new JCheckBox(""String_Node_Str"");
  GridBagConstraints gbc_disableCrosshairSwitch=new GridBagConstraints();
  gbc_disableCrosshairSwitch.anchor=GridBagConstraints.WEST;
  gbc_disableCrosshairSwitch.gridx=1;
  gbc_disableCrosshairSwitch.gridy=2;
  panelCheckboxes.add(disableCrosshairSwitch,gbc_disableCrosshairSwitch);
  panelBottom=new JPanel();
  FlowLayout flowLayout=(FlowLayout)panelBottom.getLayout();
  flowLayout.setVgap(0);
  flowLayout.setHgap(0);
  GridBagConstraints gbc_panelBottom=new GridBagConstraints();
  gbc_panelBottom.anchor=GridBagConstraints.WEST;
  gbc_panelBottom.gridwidth=5;
  gbc_panelBottom.insets=new Insets(0,5,5,5);
  gbc_panelBottom.fill=GridBagConstraints.VERTICAL;
  gbc_panelBottom.gridx=0;
  gbc_panelBottom.gridy=10;
  panelSettings.add(panelBottom,gbc_panelBottom);
  btnSaveSettings=new JButton(""String_Node_Str"");
  panelBottom.add(btnSaveSettings);
  btnClearMovieFolder=new JButton(""String_Node_Str"");
  panelBottom.add(btnClearMovieFolder);
  btnStartTf=new JButton(""String_Node_Str"");
  GridBagConstraints gbc_btnStartTf=new GridBagConstraints();
  gbc_btnStartTf.insets=new Insets(0,0,5,5);
  gbc_btnStartTf.fill=GridBagConstraints.BOTH;
  gbc_btnStartTf.gridx=4;
  gbc_btnStartTf.gridy=10;
  gbc_btnStartTf.gridwidth=2;
  panelSettings.add(btnStartTf,gbc_btnStartTf);
  JPanel panelLog=new JPanel();
  tabbedPane.addTab(""String_Node_Str"",null,panelLog,null);
  panelLog.setLayout(new BorderLayout(0,0));
  scrollPane_2=new JScrollPane();
  panelLog.add(scrollPane_2,BorderLayout.CENTER);
  textAreaLog=new JTextArea();
  textAreaLog.setFont(new Font(""String_Node_Str"",Font.PLAIN,10));
  textAreaLog.setEditable(false);
  scrollPane_2.setViewportView(textAreaLog);
  panelStatusbar=new JPanel();
  contentPane.add(panelStatusbar,BorderLayout.SOUTH);
  GridBagLayout gbl_panelStatusbar=new GridBagLayout();
  gbl_panelStatusbar.columnWidths=new int[]{31,0,0,0,0};
  gbl_panelStatusbar.rowHeights=new int[]{14,0};
  gbl_panelStatusbar.columnWeights=new double[]{0.0,1.0,0.0,0.0,Double.MIN_VALUE};
  gbl_panelStatusbar.rowWeights=new double[]{0.0,Double.MIN_VALUE};
  panelStatusbar.setLayout(gbl_panelStatusbar);
  lblStatus=new JLabel(""String_Node_Str"");
  GridBagConstraints gbc_lblStatus=new GridBagConstraints();
  gbc_lblStatus.insets=new Insets(0,5,0,5);
  gbc_lblStatus.anchor=GridBagConstraints.NORTHWEST;
  gbc_lblStatus.gridx=0;
  gbc_lblStatus.gridy=0;
  panelStatusbar.add(lblStatus,gbc_lblStatus);
  pack();
  setMinimumSize(new Dimension(650,400));
  setLocationByPlatform(true);
}","/** 
 * Create the frame.
 */
public LawenaView(){
  setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);
  menuBar=new JMenuBar();
  setJMenuBar(menuBar);
  mnFile=new JMenu(""String_Node_Str"");
  menuBar.add(mnFile);
  mntmChangeTfDirectory=new JMenuItem(""String_Node_Str"");
  mnFile.add(mntmChangeTfDirectory);
  mntmChangeMovieDirectory=new JMenuItem(""String_Node_Str"");
  mnFile.add(mntmChangeMovieDirectory);
  contentPane=new JPanel();
  contentPane.setBorder(new EmptyBorder(5,5,5,5));
  contentPane.setLayout(new BorderLayout(5,5));
  contentPane.setPreferredSize(new Dimension(650,400));
  setContentPane(contentPane);
  tabbedPane=new JTabbedPane(JTabbedPane.TOP);
  contentPane.add(tabbedPane,BorderLayout.CENTER);
  JPanel panelSettings=new JPanel();
  tabbedPane.addTab(""String_Node_Str"",null,panelSettings,null);
  GridBagLayout gbl_panelSettings=new GridBagLayout();
  gbl_panelSettings.columnWidths=new int[]{0,1,0,1,1,0};
  gbl_panelSettings.rowHeights=new int[]{0,0,0,0,0,0,0,0,0,0,0,0};
  gbl_panelSettings.columnWeights=new double[]{0.0,1.0,0.0,1.0,10.0};
  gbl_panelSettings.rowWeights=new double[]{0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,1.0,0.0,Double.MIN_VALUE};
  panelSettings.setLayout(gbl_panelSettings);
  lblResolution=new JLabel(""String_Node_Str"");
  GridBagConstraints gbc_lblResolution=new GridBagConstraints();
  gbc_lblResolution.insets=new Insets(5,5,5,5);
  gbc_lblResolution.anchor=GridBagConstraints.EAST;
  gbc_lblResolution.gridx=0;
  gbc_lblResolution.gridy=0;
  panelSettings.add(lblResolution,gbc_lblResolution);
  cmbResolution=new JComboBox<>();
  cmbResolution.setModel(new DefaultComboBoxModel<String>(new String[]{""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str""}));
  cmbResolution.setEditable(true);
  GridBagConstraints gbc_cmbResolution=new GridBagConstraints();
  gbc_cmbResolution.fill=GridBagConstraints.HORIZONTAL;
  gbc_cmbResolution.insets=new Insets(5,0,5,5);
  gbc_cmbResolution.gridx=1;
  gbc_cmbResolution.gridy=0;
  panelSettings.add(cmbResolution,gbc_cmbResolution);
  lblFrameRate=new JLabel(""String_Node_Str"");
  GridBagConstraints gbc_lblFrameRate=new GridBagConstraints();
  gbc_lblFrameRate.anchor=GridBagConstraints.EAST;
  gbc_lblFrameRate.insets=new Insets(5,0,5,5);
  gbc_lblFrameRate.gridx=2;
  gbc_lblFrameRate.gridy=0;
  panelSettings.add(lblFrameRate,gbc_lblFrameRate);
  cmbFramerate=new JComboBox<>();
  cmbFramerate.setModel(new DefaultComboBoxModel<String>(new String[]{""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str""}));
  cmbFramerate.setEditable(true);
  GridBagConstraints gbc_cmbFramerate=new GridBagConstraints();
  gbc_cmbFramerate.fill=GridBagConstraints.HORIZONTAL;
  gbc_cmbFramerate.insets=new Insets(5,0,5,5);
  gbc_cmbFramerate.gridx=3;
  gbc_cmbFramerate.gridy=0;
  panelSettings.add(cmbFramerate,gbc_cmbFramerate);
  panelCustomContent=new JPanel();
  panelCustomContent.setBorder(new TitledBorder(null,""String_Node_Str"",TitledBorder.LEADING,TitledBorder.TOP,null,null));
  GridBagConstraints gbc_panelCustomContent=new GridBagConstraints();
  gbc_panelCustomContent.insets=new Insets(0,0,5,0);
  gbc_panelCustomContent.gridwidth=2;
  gbc_panelCustomContent.gridheight=10;
  gbc_panelCustomContent.fill=GridBagConstraints.BOTH;
  gbc_panelCustomContent.gridx=4;
  gbc_panelCustomContent.gridy=0;
  panelSettings.add(panelCustomContent,gbc_panelCustomContent);
  GridBagLayout gbl_panelCustomContent=new GridBagLayout();
  gbl_panelCustomContent.columnWidths=new int[]{0,0};
  gbl_panelCustomContent.rowHeights=new int[]{0,0,0};
  gbl_panelCustomContent.columnWeights=new double[]{1.0,Double.MIN_VALUE};
  gbl_panelCustomContent.rowWeights=new double[]{1.0,0.0,Double.MIN_VALUE};
  panelCustomContent.setLayout(gbl_panelCustomContent);
  scrollPane=new JScrollPane();
  GridBagConstraints gbc_scrollPane=new GridBagConstraints();
  gbc_scrollPane.fill=GridBagConstraints.BOTH;
  gbc_scrollPane.gridx=0;
  gbc_scrollPane.gridy=0;
  panelCustomContent.add(scrollPane,gbc_scrollPane);
  tableCustomContent=new JTable();
  tableCustomContent.setTableHeader(null);
  tableCustomContent.setGridColor(new Color(0,0,0,30));
  tableCustomContent.setAutoResizeMode(JTable.AUTO_RESIZE_LAST_COLUMN);
  tableCustomContent.setSelectionMode(ListSelectionModel.SINGLE_SELECTION);
  scrollPane.setViewportView(tableCustomContent);
  JLabel lblHud=new JLabel(""String_Node_Str"");
  GridBagConstraints gbc_lblHud=new GridBagConstraints();
  gbc_lblHud.anchor=GridBagConstraints.EAST;
  gbc_lblHud.insets=new Insets(0,5,5,5);
  gbc_lblHud.gridx=0;
  gbc_lblHud.gridy=1;
  panelSettings.add(lblHud,gbc_lblHud);
  cmbHud=new JComboBox<>();
  cmbHud.setModel(new DefaultComboBoxModel<>(new String[]{""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str""}));
  GridBagConstraints gbc_cmbHud=new GridBagConstraints();
  gbc_cmbHud.fill=GridBagConstraints.HORIZONTAL;
  gbc_cmbHud.insets=new Insets(0,0,5,5);
  gbc_cmbHud.gridx=1;
  gbc_cmbHud.gridy=1;
  panelSettings.add(cmbHud,gbc_cmbHud);
  JLabel lblDxLevel=new JLabel(""String_Node_Str"");
  GridBagConstraints gbc_lblDxLevel=new GridBagConstraints();
  gbc_lblDxLevel.anchor=GridBagConstraints.EAST;
  gbc_lblDxLevel.insets=new Insets(0,5,5,5);
  gbc_lblDxLevel.gridx=2;
  gbc_lblDxLevel.gridy=1;
  panelSettings.add(lblDxLevel,gbc_lblDxLevel);
  cmbQuality=new JComboBox<>();
  cmbQuality.setModel(new DefaultComboBoxModel<String>(new String[]{""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str""}));
  GridBagConstraints gbc_cmbQuality=new GridBagConstraints();
  gbc_cmbQuality.fill=GridBagConstraints.HORIZONTAL;
  gbc_cmbQuality.insets=new Insets(0,0,5,5);
  gbc_cmbQuality.gridx=3;
  gbc_cmbQuality.gridy=1;
  panelSettings.add(cmbQuality,gbc_cmbQuality);
  JLabel lblSkybox=new JLabel(""String_Node_Str"");
  GridBagConstraints gbc_lblSkybox=new GridBagConstraints();
  gbc_lblSkybox.anchor=GridBagConstraints.EAST;
  gbc_lblSkybox.insets=new Insets(0,5,5,5);
  gbc_lblSkybox.gridx=0;
  gbc_lblSkybox.gridy=2;
  panelSettings.add(lblSkybox,gbc_lblSkybox);
  cmbSkybox=new JComboBox<>();
  GridBagConstraints gbc_cmbSkybox=new GridBagConstraints();
  gbc_cmbSkybox.fill=GridBagConstraints.HORIZONTAL;
  gbc_cmbSkybox.insets=new Insets(0,0,5,5);
  gbc_cmbSkybox.gridx=1;
  gbc_cmbSkybox.gridy=2;
  panelSettings.add(cmbSkybox,gbc_cmbSkybox);
  lblPreview=new JLabel(""String_Node_Str"");
  GridBagConstraints gbc_lblPreview=new GridBagConstraints();
  gbc_lblPreview.anchor=GridBagConstraints.EAST;
  gbc_lblPreview.insets=new Insets(0,0,5,5);
  gbc_lblPreview.gridx=2;
  gbc_lblPreview.gridy=2;
  panelSettings.add(lblPreview,gbc_lblPreview);
  lblSkyboxPreview=new JLabel(""String_Node_Str"");
  GridBagConstraints gbc_lblSkyboxPreview=new GridBagConstraints();
  gbc_lblSkyboxPreview.anchor=GridBagConstraints.NORTHWEST;
  gbc_lblSkyboxPreview.gridheight=4;
  gbc_lblSkyboxPreview.insets=new Insets(0,0,5,5);
  gbc_lblSkyboxPreview.gridx=3;
  gbc_lblSkyboxPreview.gridy=2;
  panelSettings.add(lblSkyboxPreview,gbc_lblSkyboxPreview);
  JLabel lblViewmodels=new JLabel(""String_Node_Str"");
  GridBagConstraints gbc_lblViewmodels=new GridBagConstraints();
  gbc_lblViewmodels.anchor=GridBagConstraints.EAST;
  gbc_lblViewmodels.insets=new Insets(0,5,5,5);
  gbc_lblViewmodels.gridx=0;
  gbc_lblViewmodels.gridy=3;
  panelSettings.add(lblViewmodels,gbc_lblViewmodels);
  cmbViewmodel=new JComboBox<>();
  cmbViewmodel.setModel(new DefaultComboBoxModel<String>(new String[]{""String_Node_Str"",""String_Node_Str"",""String_Node_Str""}));
  GridBagConstraints gbc_cmbViewmodel=new GridBagConstraints();
  gbc_cmbViewmodel.insets=new Insets(0,0,5,5);
  gbc_cmbViewmodel.fill=GridBagConstraints.HORIZONTAL;
  gbc_cmbViewmodel.gridx=1;
  gbc_cmbViewmodel.gridy=3;
  panelSettings.add(cmbViewmodel,gbc_cmbViewmodel);
  horizontalStrut=Box.createHorizontalStrut(24);
  GridBagConstraints gbc_horizontalStrut=new GridBagConstraints();
  gbc_horizontalStrut.insets=new Insets(0,0,5,5);
  gbc_horizontalStrut.gridx=2;
  gbc_horizontalStrut.gridy=3;
  panelSettings.add(horizontalStrut,gbc_horizontalStrut);
  JLabel lblViewmodelFov=new JLabel(""String_Node_Str"");
  GridBagConstraints gbc_lblViewmodelFov=new GridBagConstraints();
  gbc_lblViewmodelFov.anchor=GridBagConstraints.EAST;
  gbc_lblViewmodelFov.insets=new Insets(0,5,5,5);
  gbc_lblViewmodelFov.gridx=0;
  gbc_lblViewmodelFov.gridy=4;
  panelSettings.add(lblViewmodelFov,gbc_lblViewmodelFov);
  spinnerViewmodelFov=new JSpinner();
  GridBagConstraints gbc_spinnerViewmodelFov=new GridBagConstraints();
  gbc_spinnerViewmodelFov.anchor=GridBagConstraints.WEST;
  gbc_spinnerViewmodelFov.insets=new Insets(0,0,5,5);
  gbc_spinnerViewmodelFov.gridx=1;
  gbc_spinnerViewmodelFov.gridy=4;
  panelSettings.add(spinnerViewmodelFov,gbc_spinnerViewmodelFov);
  spinnerViewmodelFov.setModel(new SpinnerNumberModel(70,55,90,1));
  verticalStrut=Box.createVerticalStrut(22);
  GridBagConstraints gbc_verticalStrut=new GridBagConstraints();
  gbc_verticalStrut.insets=new Insets(0,0,5,5);
  gbc_verticalStrut.gridx=0;
  gbc_verticalStrut.gridy=5;
  panelSettings.add(verticalStrut,gbc_verticalStrut);
  panelCheckboxes=new JPanel();
  panelCheckboxes.setBorder(new TitledBorder(UIManager.getBorder(""String_Node_Str""),""String_Node_Str"",TitledBorder.LEADING,TitledBorder.TOP,null,null));
  GridBagConstraints gbc_panelCheckboxes=new GridBagConstraints();
  gbc_panelCheckboxes.insets=new Insets(0,0,5,5);
  gbc_panelCheckboxes.gridheight=4;
  gbc_panelCheckboxes.gridwidth=4;
  gbc_panelCheckboxes.fill=GridBagConstraints.BOTH;
  gbc_panelCheckboxes.gridx=0;
  gbc_panelCheckboxes.gridy=6;
  panelSettings.add(panelCheckboxes,gbc_panelCheckboxes);
  GridBagLayout gbl_panelCheckboxes=new GridBagLayout();
  gbl_panelCheckboxes.columnWidths=new int[]{0,0,0};
  gbl_panelCheckboxes.rowHeights=new int[]{0,0,0,0};
  gbl_panelCheckboxes.columnWeights=new double[]{1.0,1.0,Double.MIN_VALUE};
  gbl_panelCheckboxes.rowWeights=new double[]{0.0,0.0,0.0,Double.MIN_VALUE};
  panelCheckboxes.setLayout(gbl_panelCheckboxes);
  enableMotionBlur=new JCheckBox(""String_Node_Str"");
  GridBagConstraints gbc_enableMotionBlur=new GridBagConstraints();
  gbc_enableMotionBlur.insets=new Insets(0,0,0,5);
  gbc_enableMotionBlur.anchor=GridBagConstraints.WEST;
  gbc_enableMotionBlur.gridx=0;
  gbc_enableMotionBlur.gridy=0;
  panelCheckboxes.add(enableMotionBlur,gbc_enableMotionBlur);
  disableCombatText=new JCheckBox(""String_Node_Str"");
  GridBagConstraints gbc_disableCombatText=new GridBagConstraints();
  gbc_disableCombatText.anchor=GridBagConstraints.WEST;
  gbc_disableCombatText.gridx=1;
  gbc_disableCombatText.gridy=0;
  panelCheckboxes.add(disableCombatText,gbc_disableCombatText);
  disableHitSounds=new JCheckBox(""String_Node_Str"");
  GridBagConstraints gbc_disableHitSounds=new GridBagConstraints();
  gbc_disableHitSounds.insets=new Insets(0,0,0,5);
  gbc_disableHitSounds.anchor=GridBagConstraints.WEST;
  gbc_disableHitSounds.gridx=0;
  gbc_disableHitSounds.gridy=1;
  panelCheckboxes.add(disableHitSounds,gbc_disableHitSounds);
  disableCrosshair=new JCheckBox(""String_Node_Str"");
  GridBagConstraints gbc_disableCrosshair=new GridBagConstraints();
  gbc_disableCrosshair.anchor=GridBagConstraints.WEST;
  gbc_disableCrosshair.gridx=1;
  gbc_disableCrosshair.gridy=1;
  panelCheckboxes.add(disableCrosshair,gbc_disableCrosshair);
  disableVoiceChat=new JCheckBox(""String_Node_Str"");
  GridBagConstraints gbc_disableVoiceChat=new GridBagConstraints();
  gbc_disableVoiceChat.insets=new Insets(0,0,0,5);
  gbc_disableVoiceChat.anchor=GridBagConstraints.WEST;
  gbc_disableVoiceChat.gridx=0;
  gbc_disableVoiceChat.gridy=2;
  panelCheckboxes.add(disableVoiceChat,gbc_disableVoiceChat);
  disableCrosshairSwitch=new JCheckBox(""String_Node_Str"");
  GridBagConstraints gbc_disableCrosshairSwitch=new GridBagConstraints();
  gbc_disableCrosshairSwitch.anchor=GridBagConstraints.WEST;
  gbc_disableCrosshairSwitch.gridx=1;
  gbc_disableCrosshairSwitch.gridy=2;
  panelCheckboxes.add(disableCrosshairSwitch,gbc_disableCrosshairSwitch);
  panelBottomLeft=new JPanel();
  FlowLayout fl_panelBottomLeft=(FlowLayout)panelBottomLeft.getLayout();
  fl_panelBottomLeft.setVgap(0);
  fl_panelBottomLeft.setHgap(0);
  GridBagConstraints gbc_panelBottomLeft=new GridBagConstraints();
  gbc_panelBottomLeft.anchor=GridBagConstraints.WEST;
  gbc_panelBottomLeft.gridwidth=3;
  gbc_panelBottomLeft.insets=new Insets(0,5,5,5);
  gbc_panelBottomLeft.fill=GridBagConstraints.VERTICAL;
  gbc_panelBottomLeft.gridx=0;
  gbc_panelBottomLeft.gridy=10;
  panelSettings.add(panelBottomLeft,gbc_panelBottomLeft);
  btnSaveSettings=new JButton(""String_Node_Str"");
  panelBottomLeft.add(btnSaveSettings);
  btnClearMovieFolder=new JButton(""String_Node_Str"");
  panelBottomLeft.add(btnClearMovieFolder);
  panelBottomRight=new JPanel();
  FlowLayout fl_panelBottomRight=(FlowLayout)panelBottomRight.getLayout();
  fl_panelBottomRight.setVgap(0);
  fl_panelBottomRight.setHgap(0);
  GridBagConstraints gbc_panelBottomRight=new GridBagConstraints();
  gbc_panelBottomRight.gridwidth=3;
  gbc_panelBottomRight.anchor=GridBagConstraints.EAST;
  gbc_panelBottomRight.insets=new Insets(0,0,5,5);
  gbc_panelBottomRight.fill=GridBagConstraints.VERTICAL;
  gbc_panelBottomRight.gridx=3;
  gbc_panelBottomRight.gridy=10;
  panelSettings.add(panelBottomRight,gbc_panelBottomRight);
  btnStartTf=new JButton(""String_Node_Str"");
  panelBottomRight.add(btnStartTf);
  JPanel panelLog=new JPanel();
  tabbedPane.addTab(""String_Node_Str"",null,panelLog,null);
  panelLog.setLayout(new BorderLayout(0,0));
  scrollPane_2=new JScrollPane();
  panelLog.add(scrollPane_2,BorderLayout.CENTER);
  textAreaLog=new JTextArea();
  textAreaLog.setFont(new Font(""String_Node_Str"",Font.PLAIN,10));
  textAreaLog.setEditable(false);
  scrollPane_2.setViewportView(textAreaLog);
  panelStatusbar=new JPanel();
  contentPane.add(panelStatusbar,BorderLayout.SOUTH);
  GridBagLayout gbl_panelStatusbar=new GridBagLayout();
  gbl_panelStatusbar.columnWidths=new int[]{31,0,0,0,0};
  gbl_panelStatusbar.rowHeights=new int[]{14,0};
  gbl_panelStatusbar.columnWeights=new double[]{0.0,1.0,0.0,0.0,Double.MIN_VALUE};
  gbl_panelStatusbar.rowWeights=new double[]{0.0,Double.MIN_VALUE};
  panelStatusbar.setLayout(gbl_panelStatusbar);
  lblStatus=new JLabel(""String_Node_Str"");
  GridBagConstraints gbc_lblStatus=new GridBagConstraints();
  gbc_lblStatus.insets=new Insets(0,5,0,5);
  gbc_lblStatus.anchor=GridBagConstraints.NORTHWEST;
  gbc_lblStatus.gridx=0;
  gbc_lblStatus.gridy=0;
  panelStatusbar.add(lblStatus,gbc_lblStatus);
  pack();
  setMinimumSize(new Dimension(650,400));
  setLocationByPlatform(true);
}",0.9551643515334892
161938,"@Override public String getSteamPath(){
  return ""String_Node_Str"";
}","@Override public Path getSteamPath(){
  return Paths.get(System.getProperty(""String_Node_Str""),""String_Node_Str"");
}",0.6918918918918919
161939,"@Override public Path resolveVpkToolPath(Path tfpath){
  return tfpath.resolve(""String_Node_Str"");
}","@Override public Path resolveVpkToolPath(Path tfpath) throws IOException {
  Path path=tfpath.resolve(""String_Node_Str"");
  Files.setPosixFilePermissions(path,perms777);
  return path;
}",0.6643356643356644
161940,"@Override public ProcessBuilder getBuilderStartTF2(int width,int height,String dxlevel){
  return new ProcessBuilder(getSteamPath() + ""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",dxlevel + ""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",width + ""String_Node_Str"",""String_Node_Str"",height + ""String_Node_Str"");
}","@Override public ProcessBuilder getBuilderStartTF2(int width,int height,String dxlevel) throws IOException {
  Path steam=getSteamPath().resolve(""String_Node_Str"");
  Files.setPosixFilePermissions(steam,perms777);
  return new ProcessBuilder(steam.toString(),""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",dxlevel + ""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",width + ""String_Node_Str"",""String_Node_Str"",height + ""String_Node_Str"");
}",0.8239499553172476
161941,"@Override public String getSteamPath(){
  return regQuery(""String_Node_Str"",""String_Node_Str"",1);
}","@Override public Path getSteamPath(){
  return Paths.get(regQuery(""String_Node_Str"",""String_Node_Str"",1));
}",0.9082125603864736
161942,public abstract String getSteamPath();,public abstract Path getSteamPath();,0.8918918918918919
161943,"public abstract ProcessBuilder getBuilderStartTF2(int width,int height,String dxlevel);","public abstract ProcessBuilder getBuilderStartTF2(int width,int height,String dxlevel) throws IOException ;",0.8969072164948454
161944,"public List<String> getVpkContents(Path tfpath,Path vpkpath){
  Path vpktool=resolveVpkToolPath(tfpath);
  List<String> files=new ArrayList<>();
  try {
    ProcessBuilder pb=new ProcessBuilder(vpktool.toString(),""String_Node_Str"",vpkpath.toString());
    Process pr=pb.start();
    BufferedReader input=new BufferedReader(new InputStreamReader(pr.getInputStream()));
    String line;
    while ((line=input.readLine()) != null) {
      files.add(line);
    }
    pr.waitFor();
  }
 catch (  InterruptedException|IOException e) {
    log.info(""String_Node_Str"" + vpkpath);
  }
  return files;
}","public List<String> getVpkContents(Path tfpath,Path vpkpath){
  List<String> files=new ArrayList<>();
  try {
    Path vpktool=resolveVpkToolPath(tfpath);
    ProcessBuilder pb=new ProcessBuilder(vpktool.toString(),""String_Node_Str"",vpkpath.toString());
    Process pr=pb.start();
    BufferedReader input=new BufferedReader(new InputStreamReader(pr.getInputStream()));
    String line;
    while ((line=input.readLine()) != null) {
      files.add(line);
    }
    pr.waitFor();
    log.fine(""String_Node_Str"" + vpkpath.getFileName() + ""String_Node_Str""+ files.size()+ ""String_Node_Str"");
  }
 catch (  InterruptedException|IOException e) {
    log.info(""String_Node_Str"" + vpkpath);
  }
  return files;
}",0.84
161945,public abstract Path resolveVpkToolPath(Path tfpath);,public abstract Path resolveVpkToolPath(Path tfpath) throws IOException ;,0.8412698412698413
161946,"private void extractVpkFile(Path tfpath,String vpkname,Path dest,List<String> files){
  Path vpktool=resolveVpkToolPath(tfpath);
  List<String> cmds=new ArrayList<>();
  try {
    cmds.add(vpktool.toString());
    cmds.add(""String_Node_Str"");
    cmds.add(Paths.get(vpkname).toAbsolutePath().toString());
    cmds.addAll(files);
    ProcessBuilder pb=new ProcessBuilder(cmds);
    pb.directory(dest.toFile());
    Process pr=pb.start();
    BufferedReader input=new BufferedReader(new InputStreamReader(pr.getInputStream()));
    String line;
    while ((line=input.readLine()) != null) {
      log.fine(""String_Node_Str"" + line);
    }
    pr.waitFor();
  }
 catch (  InterruptedException|IOException e) {
    log.info(""String_Node_Str"" + vpkname);
  }
}","private void extractVpkFile(Path tfpath,String vpkname,Path dest,List<String> files){
  List<String> cmds=new ArrayList<>();
  try {
    Path vpktool=resolveVpkToolPath(tfpath);
    cmds.add(vpktool.toString());
    cmds.add(""String_Node_Str"");
    cmds.add(Paths.get(vpkname).toAbsolutePath().toString());
    cmds.addAll(files);
    ProcessBuilder pb=new ProcessBuilder(cmds);
    pb.directory(dest.toFile());
    Process pr=pb.start();
    BufferedReader input=new BufferedReader(new InputStreamReader(pr.getInputStream()));
    String line;
    while ((line=input.readLine()) != null) {
      log.fine(""String_Node_Str"" + line);
    }
    pr.waitFor();
  }
 catch (  InterruptedException|IOException e) {
    log.info(""String_Node_Str"" + vpkname);
  }
}",0.9365079365079364
161947,"public Lawena(){
  String impl=this.getClass().getPackage().getImplementationVersion();
  if (impl != null) {
    version=impl;
  }
  build=getManifestString(""String_Node_Str"",""String_Node_Str"" + now(""String_Node_Str""));
  String osname=System.getProperty(""String_Node_Str"");
  if (osname.contains(""String_Node_Str"")) {
    cl=new CLWindows();
  }
 else   if (osname.contains(""String_Node_Str"")) {
    cl=new CLLinux();
  }
 else {
    throw new UnsupportedOperationException(""String_Node_Str"");
  }
  cl.setLookAndFeel();
  settings=new SettingsManager(""String_Node_Str"");
  oDxlevel=cl.getSystemDxLevel();
  steampath=cl.getSteamPath();
  Path tfpath=settings.getTfPath();
  if (tfpath == null || tfpath.toString().isEmpty()) {
    tfpath=Paths.get(steampath,""String_Node_Str"");
  }
  if (!Files.exists(tfpath)) {
    tfpath=getChosenTfPath();
    if (tfpath == null) {
      log.info(""String_Node_Str"");
      System.exit(1);
    }
  }
  settings.setTfPath(tfpath);
  files=new FileManager(settings,cl);
  Path moviepath=settings.getMoviePath();
  if (moviepath == null || moviepath.toString().isEmpty() || !Files.exists(moviepath)) {
    moviepath=getChosenMoviePath();
    if (moviepath == null) {
      log.info(""String_Node_Str"");
      System.exit(1);
    }
  }
  movies=new MovieManager(moviepath.toString());
  settings.setMoviePath(moviepath);
  settings.save();
  files.restoreAll();
  customPaths=new CustomPathList();
  files.setCustomPathList(customPaths);
  vdm=new DemoEditor(settings);
}","public Lawena(){
  String impl=this.getClass().getPackage().getImplementationVersion();
  if (impl != null) {
    version=impl;
  }
  build=getManifestString(""String_Node_Str"",""String_Node_Str"" + now(""String_Node_Str""));
  String osname=System.getProperty(""String_Node_Str"");
  if (osname.contains(""String_Node_Str"")) {
    cl=new CLWindows();
  }
 else   if (osname.contains(""String_Node_Str"")) {
    cl=new CLLinux();
  }
 else {
    throw new UnsupportedOperationException(""String_Node_Str"");
  }
  cl.setLookAndFeel();
  settings=new SettingsManager(""String_Node_Str"");
  oDxlevel=cl.getSystemDxLevel();
  steampath=cl.getSteamPath();
  Path tfpath=settings.getTfPath();
  if (tfpath == null || tfpath.toString().isEmpty()) {
    tfpath=steampath.resolve(""String_Node_Str"");
  }
  if (!Files.exists(tfpath)) {
    tfpath=getChosenTfPath();
    if (tfpath == null) {
      log.info(""String_Node_Str"");
      System.exit(1);
    }
  }
  settings.setTfPath(tfpath);
  files=new FileManager(settings,cl);
  Path moviepath=settings.getMoviePath();
  if (moviepath == null || moviepath.toString().isEmpty() || !Files.exists(moviepath)) {
    moviepath=getChosenMoviePath();
    if (moviepath == null) {
      log.info(""String_Node_Str"");
      System.exit(1);
    }
  }
  movies=new MovieManager(moviepath.toString());
  settings.setMoviePath(moviepath);
  settings.save();
  files.restoreAll();
  customPaths=new CustomPathList();
  files.setCustomPathList(customPaths);
  vdm=new DemoEditor(settings);
}",0.9873670212765956
161948,"private Path getChosenTfPath(){
  Path selected=null;
  int ret=0;
  while ((selected == null && ret == 0) || (selected != null && (!Files.exists(selected) || !selected.getFileName().equals(""String_Node_Str"")))) {
    choosedir=new JFileChooser();
    choosedir.setDialogTitle(""String_Node_Str"");
    choosedir.setFileSelectionMode(JFileChooser.DIRECTORIES_ONLY);
    choosedir.setCurrentDirectory(new File(steampath));
    choosedir.setFileHidingEnabled(false);
    ret=choosedir.showOpenDialog(null);
    if (ret == JFileChooser.APPROVE_OPTION) {
      selected=choosedir.getSelectedFile().toPath();
    }
 else {
      selected=null;
    }
  }
  return selected;
}","private Path getChosenTfPath(){
  Path selected=null;
  int ret=0;
  while ((selected == null && ret == 0) || (selected != null && (!Files.exists(selected)))) {
    choosedir=new JFileChooser();
    choosedir.setDialogTitle(""String_Node_Str"");
    choosedir.setFileSelectionMode(JFileChooser.DIRECTORIES_ONLY);
    choosedir.setCurrentDirectory(steampath.toFile());
    choosedir.setFileHidingEnabled(false);
    ret=choosedir.showOpenDialog(null);
    if (ret == JFileChooser.APPROVE_OPTION) {
      selected=choosedir.getSelectedFile().toPath();
    }
 else {
      selected=null;
    }
    log.finer(""String_Node_Str"" + selected);
  }
  return selected;
}",0.9132075471698112
161949,"/** 
 * Create the frame.
 */
public LawenaView(){
  setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);
  menuBar=new JMenuBar();
  setJMenuBar(menuBar);
  mnFile=new JMenu(""String_Node_Str"");
  menuBar.add(mnFile);
  mntmChangeTfDirectory=new JMenuItem(""String_Node_Str"");
  mnFile.add(mntmChangeTfDirectory);
  mntmChangeMovieDirectory=new JMenuItem(""String_Node_Str"");
  mnFile.add(mntmChangeMovieDirectory);
  contentPane=new JPanel();
  contentPane.setBorder(new EmptyBorder(5,5,5,5));
  contentPane.setLayout(new BorderLayout(5,5));
  contentPane.setPreferredSize(new Dimension(650,400));
  setContentPane(contentPane);
  tabbedPane=new JTabbedPane(JTabbedPane.TOP);
  contentPane.add(tabbedPane,BorderLayout.CENTER);
  JPanel panelSettings=new JPanel();
  tabbedPane.addTab(""String_Node_Str"",null,panelSettings,null);
  GridBagLayout gbl_panelSettings=new GridBagLayout();
  gbl_panelSettings.columnWidths=new int[]{0,1,0,1,1,0};
  gbl_panelSettings.rowHeights=new int[]{0,0,0,0,0,0,0,0,0,0,0,0};
  gbl_panelSettings.columnWeights=new double[]{0.0,1.0,0.0,1.0,10.0};
  gbl_panelSettings.rowWeights=new double[]{0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,1.0,0.0,Double.MIN_VALUE};
  panelSettings.setLayout(gbl_panelSettings);
  lblResolution=new JLabel(""String_Node_Str"");
  GridBagConstraints gbc_lblResolution=new GridBagConstraints();
  gbc_lblResolution.insets=new Insets(5,5,5,5);
  gbc_lblResolution.anchor=GridBagConstraints.EAST;
  gbc_lblResolution.gridx=0;
  gbc_lblResolution.gridy=0;
  panelSettings.add(lblResolution,gbc_lblResolution);
  cmbResolution=new JComboBox<>();
  cmbResolution.setModel(new DefaultComboBoxModel<String>(new String[]{""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str""}));
  cmbResolution.setEditable(true);
  GridBagConstraints gbc_cmbResolution=new GridBagConstraints();
  gbc_cmbResolution.fill=GridBagConstraints.HORIZONTAL;
  gbc_cmbResolution.insets=new Insets(5,0,5,5);
  gbc_cmbResolution.gridx=1;
  gbc_cmbResolution.gridy=0;
  panelSettings.add(cmbResolution,gbc_cmbResolution);
  lblFrameRate=new JLabel(""String_Node_Str"");
  GridBagConstraints gbc_lblFrameRate=new GridBagConstraints();
  gbc_lblFrameRate.anchor=GridBagConstraints.EAST;
  gbc_lblFrameRate.insets=new Insets(5,0,5,5);
  gbc_lblFrameRate.gridx=2;
  gbc_lblFrameRate.gridy=0;
  panelSettings.add(lblFrameRate,gbc_lblFrameRate);
  cmbFramerate=new JComboBox<>();
  cmbFramerate.setModel(new DefaultComboBoxModel<String>(new String[]{""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str""}));
  cmbFramerate.setEditable(true);
  GridBagConstraints gbc_cmbFramerate=new GridBagConstraints();
  gbc_cmbFramerate.fill=GridBagConstraints.HORIZONTAL;
  gbc_cmbFramerate.insets=new Insets(5,0,5,5);
  gbc_cmbFramerate.gridx=3;
  gbc_cmbFramerate.gridy=0;
  panelSettings.add(cmbFramerate,gbc_cmbFramerate);
  panelCustomContent=new JPanel();
  panelCustomContent.setBorder(new TitledBorder(null,""String_Node_Str"",TitledBorder.LEADING,TitledBorder.TOP,null,null));
  GridBagConstraints gbc_panelCustomContent=new GridBagConstraints();
  gbc_panelCustomContent.insets=new Insets(0,0,5,0);
  gbc_panelCustomContent.gridwidth=2;
  gbc_panelCustomContent.gridheight=10;
  gbc_panelCustomContent.fill=GridBagConstraints.BOTH;
  gbc_panelCustomContent.gridx=4;
  gbc_panelCustomContent.gridy=0;
  panelSettings.add(panelCustomContent,gbc_panelCustomContent);
  GridBagLayout gbl_panelCustomContent=new GridBagLayout();
  gbl_panelCustomContent.columnWidths=new int[]{0,0};
  gbl_panelCustomContent.rowHeights=new int[]{0,0,0};
  gbl_panelCustomContent.columnWeights=new double[]{1.0,Double.MIN_VALUE};
  gbl_panelCustomContent.rowWeights=new double[]{1.0,0.0,Double.MIN_VALUE};
  panelCustomContent.setLayout(gbl_panelCustomContent);
  scrollPane=new JScrollPane();
  GridBagConstraints gbc_scrollPane=new GridBagConstraints();
  gbc_scrollPane.fill=GridBagConstraints.BOTH;
  gbc_scrollPane.gridx=0;
  gbc_scrollPane.gridy=0;
  panelCustomContent.add(scrollPane,gbc_scrollPane);
  tableCustomContent=new JTable();
  tableCustomContent.setTableHeader(null);
  tableCustomContent.setGridColor(new Color(0,0,0,30));
  tableCustomContent.setAutoResizeMode(JTable.AUTO_RESIZE_LAST_COLUMN);
  tableCustomContent.setSelectionMode(ListSelectionModel.SINGLE_SELECTION);
  scrollPane.setViewportView(tableCustomContent);
  JLabel lblHud=new JLabel(""String_Node_Str"");
  GridBagConstraints gbc_lblHud=new GridBagConstraints();
  gbc_lblHud.anchor=GridBagConstraints.EAST;
  gbc_lblHud.insets=new Insets(0,5,5,5);
  gbc_lblHud.gridx=0;
  gbc_lblHud.gridy=1;
  panelSettings.add(lblHud,gbc_lblHud);
  cmbHud=new JComboBox<>();
  cmbHud.setModel(new DefaultComboBoxModel<>(new String[]{""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str""}));
  GridBagConstraints gbc_cmbHud=new GridBagConstraints();
  gbc_cmbHud.fill=GridBagConstraints.HORIZONTAL;
  gbc_cmbHud.insets=new Insets(0,0,5,5);
  gbc_cmbHud.gridx=1;
  gbc_cmbHud.gridy=1;
  panelSettings.add(cmbHud,gbc_cmbHud);
  JLabel lblDxLevel=new JLabel(""String_Node_Str"");
  GridBagConstraints gbc_lblDxLevel=new GridBagConstraints();
  gbc_lblDxLevel.anchor=GridBagConstraints.EAST;
  gbc_lblDxLevel.insets=new Insets(0,5,5,5);
  gbc_lblDxLevel.gridx=2;
  gbc_lblDxLevel.gridy=1;
  panelSettings.add(lblDxLevel,gbc_lblDxLevel);
  cmbQuality=new JComboBox<>();
  cmbQuality.setModel(new DefaultComboBoxModel<String>(new String[]{""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str""}));
  GridBagConstraints gbc_cmbQuality=new GridBagConstraints();
  gbc_cmbQuality.fill=GridBagConstraints.HORIZONTAL;
  gbc_cmbQuality.insets=new Insets(0,0,5,5);
  gbc_cmbQuality.gridx=3;
  gbc_cmbQuality.gridy=1;
  panelSettings.add(cmbQuality,gbc_cmbQuality);
  JLabel lblSkybox=new JLabel(""String_Node_Str"");
  GridBagConstraints gbc_lblSkybox=new GridBagConstraints();
  gbc_lblSkybox.anchor=GridBagConstraints.EAST;
  gbc_lblSkybox.insets=new Insets(0,5,5,5);
  gbc_lblSkybox.gridx=0;
  gbc_lblSkybox.gridy=2;
  panelSettings.add(lblSkybox,gbc_lblSkybox);
  cmbSkybox=new JComboBox<>();
  GridBagConstraints gbc_cmbSkybox=new GridBagConstraints();
  gbc_cmbSkybox.fill=GridBagConstraints.HORIZONTAL;
  gbc_cmbSkybox.insets=new Insets(0,0,5,5);
  gbc_cmbSkybox.gridx=1;
  gbc_cmbSkybox.gridy=2;
  panelSettings.add(cmbSkybox,gbc_cmbSkybox);
  lblPreview=new JLabel(""String_Node_Str"");
  GridBagConstraints gbc_lblPreview=new GridBagConstraints();
  gbc_lblPreview.anchor=GridBagConstraints.EAST;
  gbc_lblPreview.insets=new Insets(0,0,5,5);
  gbc_lblPreview.gridx=2;
  gbc_lblPreview.gridy=2;
  panelSettings.add(lblPreview,gbc_lblPreview);
  lblSkyboxPreview=new JLabel(""String_Node_Str"");
  GridBagConstraints gbc_lblSkyboxPreview=new GridBagConstraints();
  gbc_lblSkyboxPreview.anchor=GridBagConstraints.NORTHWEST;
  gbc_lblSkyboxPreview.gridheight=4;
  gbc_lblSkyboxPreview.insets=new Insets(0,0,5,5);
  gbc_lblSkyboxPreview.gridx=3;
  gbc_lblSkyboxPreview.gridy=2;
  panelSettings.add(lblSkyboxPreview,gbc_lblSkyboxPreview);
  JLabel lblViewmodels=new JLabel(""String_Node_Str"");
  GridBagConstraints gbc_lblViewmodels=new GridBagConstraints();
  gbc_lblViewmodels.anchor=GridBagConstraints.EAST;
  gbc_lblViewmodels.insets=new Insets(0,5,5,5);
  gbc_lblViewmodels.gridx=0;
  gbc_lblViewmodels.gridy=3;
  panelSettings.add(lblViewmodels,gbc_lblViewmodels);
  cmbViewmodel=new JComboBox<>();
  cmbViewmodel.setModel(new DefaultComboBoxModel<String>(new String[]{""String_Node_Str"",""String_Node_Str"",""String_Node_Str""}));
  GridBagConstraints gbc_cmbViewmodel=new GridBagConstraints();
  gbc_cmbViewmodel.insets=new Insets(0,0,5,5);
  gbc_cmbViewmodel.fill=GridBagConstraints.HORIZONTAL;
  gbc_cmbViewmodel.gridx=1;
  gbc_cmbViewmodel.gridy=3;
  panelSettings.add(cmbViewmodel,gbc_cmbViewmodel);
  horizontalStrut=Box.createHorizontalStrut(24);
  GridBagConstraints gbc_horizontalStrut=new GridBagConstraints();
  gbc_horizontalStrut.insets=new Insets(0,0,5,5);
  gbc_horizontalStrut.gridx=2;
  gbc_horizontalStrut.gridy=3;
  panelSettings.add(horizontalStrut,gbc_horizontalStrut);
  JLabel lblViewmodelFov=new JLabel(""String_Node_Str"");
  GridBagConstraints gbc_lblViewmodelFov=new GridBagConstraints();
  gbc_lblViewmodelFov.anchor=GridBagConstraints.EAST;
  gbc_lblViewmodelFov.insets=new Insets(0,5,5,5);
  gbc_lblViewmodelFov.gridx=0;
  gbc_lblViewmodelFov.gridy=4;
  panelSettings.add(lblViewmodelFov,gbc_lblViewmodelFov);
  spinnerViewmodelFov=new JSpinner();
  GridBagConstraints gbc_spinnerViewmodelFov=new GridBagConstraints();
  gbc_spinnerViewmodelFov.anchor=GridBagConstraints.WEST;
  gbc_spinnerViewmodelFov.insets=new Insets(0,0,5,5);
  gbc_spinnerViewmodelFov.gridx=1;
  gbc_spinnerViewmodelFov.gridy=4;
  panelSettings.add(spinnerViewmodelFov,gbc_spinnerViewmodelFov);
  spinnerViewmodelFov.setModel(new SpinnerNumberModel(70,55,90,1));
  verticalStrut=Box.createVerticalStrut(22);
  GridBagConstraints gbc_verticalStrut=new GridBagConstraints();
  gbc_verticalStrut.insets=new Insets(0,0,5,5);
  gbc_verticalStrut.gridx=0;
  gbc_verticalStrut.gridy=5;
  panelSettings.add(verticalStrut,gbc_verticalStrut);
  panelCheckboxes=new JPanel();
  panelCheckboxes.setBorder(new TitledBorder(UIManager.getBorder(""String_Node_Str""),""String_Node_Str"",TitledBorder.LEADING,TitledBorder.TOP,null,null));
  GridBagConstraints gbc_panelCheckboxes=new GridBagConstraints();
  gbc_panelCheckboxes.insets=new Insets(0,0,5,5);
  gbc_panelCheckboxes.gridheight=4;
  gbc_panelCheckboxes.gridwidth=4;
  gbc_panelCheckboxes.fill=GridBagConstraints.BOTH;
  gbc_panelCheckboxes.gridx=0;
  gbc_panelCheckboxes.gridy=6;
  panelSettings.add(panelCheckboxes,gbc_panelCheckboxes);
  GridBagLayout gbl_panelCheckboxes=new GridBagLayout();
  gbl_panelCheckboxes.columnWidths=new int[]{0,0,0};
  gbl_panelCheckboxes.rowHeights=new int[]{0,0,0,0};
  gbl_panelCheckboxes.columnWeights=new double[]{1.0,1.0,Double.MIN_VALUE};
  gbl_panelCheckboxes.rowWeights=new double[]{0.0,0.0,0.0,Double.MIN_VALUE};
  panelCheckboxes.setLayout(gbl_panelCheckboxes);
  enableMotionBlur=new JCheckBox(""String_Node_Str"");
  GridBagConstraints gbc_enableMotionBlur=new GridBagConstraints();
  gbc_enableMotionBlur.insets=new Insets(0,0,0,5);
  gbc_enableMotionBlur.anchor=GridBagConstraints.WEST;
  gbc_enableMotionBlur.gridx=0;
  gbc_enableMotionBlur.gridy=0;
  panelCheckboxes.add(enableMotionBlur,gbc_enableMotionBlur);
  disableCombatText=new JCheckBox(""String_Node_Str"");
  GridBagConstraints gbc_disableCombatText=new GridBagConstraints();
  gbc_disableCombatText.anchor=GridBagConstraints.WEST;
  gbc_disableCombatText.gridx=1;
  gbc_disableCombatText.gridy=0;
  panelCheckboxes.add(disableCombatText,gbc_disableCombatText);
  disableHitSounds=new JCheckBox(""String_Node_Str"");
  GridBagConstraints gbc_disableHitSounds=new GridBagConstraints();
  gbc_disableHitSounds.insets=new Insets(0,0,0,5);
  gbc_disableHitSounds.anchor=GridBagConstraints.WEST;
  gbc_disableHitSounds.gridx=0;
  gbc_disableHitSounds.gridy=1;
  panelCheckboxes.add(disableHitSounds,gbc_disableHitSounds);
  disableCrosshair=new JCheckBox(""String_Node_Str"");
  GridBagConstraints gbc_disableCrosshair=new GridBagConstraints();
  gbc_disableCrosshair.anchor=GridBagConstraints.WEST;
  gbc_disableCrosshair.gridx=1;
  gbc_disableCrosshair.gridy=1;
  panelCheckboxes.add(disableCrosshair,gbc_disableCrosshair);
  disableVoiceChat=new JCheckBox(""String_Node_Str"");
  GridBagConstraints gbc_disableVoiceChat=new GridBagConstraints();
  gbc_disableVoiceChat.insets=new Insets(0,0,0,5);
  gbc_disableVoiceChat.anchor=GridBagConstraints.WEST;
  gbc_disableVoiceChat.gridx=0;
  gbc_disableVoiceChat.gridy=2;
  panelCheckboxes.add(disableVoiceChat,gbc_disableVoiceChat);
  disableCrosshairSwitch=new JCheckBox(""String_Node_Str"");
  GridBagConstraints gbc_disableCrosshairSwitch=new GridBagConstraints();
  gbc_disableCrosshairSwitch.anchor=GridBagConstraints.WEST;
  gbc_disableCrosshairSwitch.gridx=1;
  gbc_disableCrosshairSwitch.gridy=2;
  panelCheckboxes.add(disableCrosshairSwitch,gbc_disableCrosshairSwitch);
  panelBottomLeft=new JPanel();
  FlowLayout fl_panelBottomLeft=(FlowLayout)panelBottomLeft.getLayout();
  fl_panelBottomLeft.setVgap(0);
  fl_panelBottomLeft.setHgap(0);
  GridBagConstraints gbc_panelBottomLeft=new GridBagConstraints();
  gbc_panelBottomLeft.anchor=GridBagConstraints.WEST;
  gbc_panelBottomLeft.gridwidth=3;
  gbc_panelBottomLeft.insets=new Insets(0,5,5,5);
  gbc_panelBottomLeft.fill=GridBagConstraints.VERTICAL;
  gbc_panelBottomLeft.gridx=0;
  gbc_panelBottomLeft.gridy=10;
  panelSettings.add(panelBottomLeft,gbc_panelBottomLeft);
  btnSaveSettings=new JButton(""String_Node_Str"");
  panelBottomLeft.add(btnSaveSettings);
  btnClearMovieFolder=new JButton(""String_Node_Str"");
  panelBottomLeft.add(btnClearMovieFolder);
  panelBottomRight=new JPanel();
  FlowLayout fl_panelBottomRight=(FlowLayout)panelBottomRight.getLayout();
  fl_panelBottomRight.setVgap(0);
  fl_panelBottomRight.setHgap(0);
  GridBagConstraints gbc_panelBottomRight=new GridBagConstraints();
  gbc_panelBottomRight.gridwidth=3;
  gbc_panelBottomRight.anchor=GridBagConstraints.EAST;
  gbc_panelBottomRight.insets=new Insets(0,0,5,5);
  gbc_panelBottomRight.fill=GridBagConstraints.VERTICAL;
  gbc_panelBottomRight.gridx=3;
  gbc_panelBottomRight.gridy=10;
  panelSettings.add(panelBottomRight,gbc_panelBottomRight);
  btnStartTf=new JButton(""String_Node_Str"");
  panelBottomRight.add(btnStartTf);
  JPanel panelLog=new JPanel();
  tabbedPane.addTab(""String_Node_Str"",null,panelLog,null);
  panelLog.setLayout(new BorderLayout(0,0));
  scrollPane_2=new JScrollPane();
  panelLog.add(scrollPane_2,BorderLayout.CENTER);
  textAreaLog=new JTextArea();
  textAreaLog.setFont(new Font(""String_Node_Str"",Font.PLAIN,10));
  textAreaLog.setEditable(false);
  scrollPane_2.setViewportView(textAreaLog);
  panelStatusbar=new JPanel();
  contentPane.add(panelStatusbar,BorderLayout.SOUTH);
  GridBagLayout gbl_panelStatusbar=new GridBagLayout();
  gbl_panelStatusbar.columnWidths=new int[]{31,0,0,0};
  gbl_panelStatusbar.rowHeights=new int[]{12,0};
  gbl_panelStatusbar.columnWeights=new double[]{0.0,1.0,0.0,Double.MIN_VALUE};
  gbl_panelStatusbar.rowWeights=new double[]{0.0,Double.MIN_VALUE};
  panelStatusbar.setLayout(gbl_panelStatusbar);
  lblStatus=new JLabel(""String_Node_Str"");
  GridBagConstraints gbc_lblStatus=new GridBagConstraints();
  gbc_lblStatus.insets=new Insets(0,5,0,5);
  gbc_lblStatus.anchor=GridBagConstraints.NORTHWEST;
  gbc_lblStatus.gridx=0;
  gbc_lblStatus.gridy=0;
  panelStatusbar.add(lblStatus,gbc_lblStatus);
  progressBar=new JProgressBar();
  GridBagConstraints gbc_progressBar=new GridBagConstraints();
  gbc_progressBar.anchor=GridBagConstraints.EAST;
  gbc_progressBar.gridx=2;
  gbc_progressBar.gridy=0;
  panelStatusbar.add(progressBar,gbc_progressBar);
  pack();
  setMinimumSize(new Dimension(650,400));
  setLocationByPlatform(true);
}","/** 
 * Create the frame.
 */
public LawenaView(){
  setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);
  menuBar=new JMenuBar();
  setJMenuBar(menuBar);
  mnFile=new JMenu(""String_Node_Str"");
  menuBar.add(mnFile);
  mntmChangeTfDirectory=new JMenuItem(""String_Node_Str"");
  mnFile.add(mntmChangeTfDirectory);
  mntmChangeMovieDirectory=new JMenuItem(""String_Node_Str"");
  mnFile.add(mntmChangeMovieDirectory);
  contentPane=new JPanel();
  contentPane.setBorder(new EmptyBorder(5,5,5,5));
  contentPane.setLayout(new BorderLayout(5,5));
  contentPane.setPreferredSize(new Dimension(650,400));
  setContentPane(contentPane);
  tabbedPane=new JTabbedPane(JTabbedPane.TOP);
  contentPane.add(tabbedPane,BorderLayout.CENTER);
  JPanel panelSettings=new JPanel();
  tabbedPane.addTab(""String_Node_Str"",null,panelSettings,null);
  GridBagLayout gbl_panelSettings=new GridBagLayout();
  gbl_panelSettings.columnWidths=new int[]{0,1,0,1,1,0};
  gbl_panelSettings.rowHeights=new int[]{0,0,0,0,0,0,0,0,0,0,0,0};
  gbl_panelSettings.columnWeights=new double[]{0.0,1.0,0.0,1.0,10.0};
  gbl_panelSettings.rowWeights=new double[]{0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,1.0,0.0,Double.MIN_VALUE};
  panelSettings.setLayout(gbl_panelSettings);
  lblResolution=new JLabel(""String_Node_Str"");
  GridBagConstraints gbc_lblResolution=new GridBagConstraints();
  gbc_lblResolution.insets=new Insets(5,5,5,5);
  gbc_lblResolution.anchor=GridBagConstraints.EAST;
  gbc_lblResolution.gridx=0;
  gbc_lblResolution.gridy=0;
  panelSettings.add(lblResolution,gbc_lblResolution);
  cmbResolution=new JComboBox<>();
  cmbResolution.setModel(new DefaultComboBoxModel<String>(new String[]{""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str""}));
  cmbResolution.setEditable(true);
  GridBagConstraints gbc_cmbResolution=new GridBagConstraints();
  gbc_cmbResolution.fill=GridBagConstraints.HORIZONTAL;
  gbc_cmbResolution.insets=new Insets(5,0,5,5);
  gbc_cmbResolution.gridx=1;
  gbc_cmbResolution.gridy=0;
  panelSettings.add(cmbResolution,gbc_cmbResolution);
  lblFrameRate=new JLabel(""String_Node_Str"");
  GridBagConstraints gbc_lblFrameRate=new GridBagConstraints();
  gbc_lblFrameRate.anchor=GridBagConstraints.EAST;
  gbc_lblFrameRate.insets=new Insets(5,0,5,5);
  gbc_lblFrameRate.gridx=2;
  gbc_lblFrameRate.gridy=0;
  panelSettings.add(lblFrameRate,gbc_lblFrameRate);
  cmbFramerate=new JComboBox<>();
  cmbFramerate.setModel(new DefaultComboBoxModel<String>(new String[]{""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str""}));
  cmbFramerate.setEditable(true);
  GridBagConstraints gbc_cmbFramerate=new GridBagConstraints();
  gbc_cmbFramerate.fill=GridBagConstraints.HORIZONTAL;
  gbc_cmbFramerate.insets=new Insets(5,0,5,5);
  gbc_cmbFramerate.gridx=3;
  gbc_cmbFramerate.gridy=0;
  panelSettings.add(cmbFramerate,gbc_cmbFramerate);
  panelCustomContent=new JPanel();
  panelCustomContent.setBorder(new TitledBorder(null,""String_Node_Str"",TitledBorder.LEADING,TitledBorder.TOP,null,null));
  GridBagConstraints gbc_panelCustomContent=new GridBagConstraints();
  gbc_panelCustomContent.insets=new Insets(0,0,5,0);
  gbc_panelCustomContent.gridwidth=2;
  gbc_panelCustomContent.gridheight=10;
  gbc_panelCustomContent.fill=GridBagConstraints.BOTH;
  gbc_panelCustomContent.gridx=4;
  gbc_panelCustomContent.gridy=0;
  panelSettings.add(panelCustomContent,gbc_panelCustomContent);
  GridBagLayout gbl_panelCustomContent=new GridBagLayout();
  gbl_panelCustomContent.columnWidths=new int[]{0,0};
  gbl_panelCustomContent.rowHeights=new int[]{0,0,0};
  gbl_panelCustomContent.columnWeights=new double[]{1.0,Double.MIN_VALUE};
  gbl_panelCustomContent.rowWeights=new double[]{1.0,0.0,Double.MIN_VALUE};
  panelCustomContent.setLayout(gbl_panelCustomContent);
  scrollPane=new JScrollPane();
  GridBagConstraints gbc_scrollPane=new GridBagConstraints();
  gbc_scrollPane.fill=GridBagConstraints.BOTH;
  gbc_scrollPane.gridx=0;
  gbc_scrollPane.gridy=0;
  panelCustomContent.add(scrollPane,gbc_scrollPane);
  tableCustomContent=new JTable();
  tableCustomContent.setTableHeader(null);
  tableCustomContent.setGridColor(new Color(0,0,0,30));
  tableCustomContent.setAutoResizeMode(JTable.AUTO_RESIZE_LAST_COLUMN);
  tableCustomContent.setSelectionMode(ListSelectionModel.SINGLE_SELECTION);
  scrollPane.setViewportView(tableCustomContent);
  JLabel lblHud=new JLabel(""String_Node_Str"");
  GridBagConstraints gbc_lblHud=new GridBagConstraints();
  gbc_lblHud.anchor=GridBagConstraints.EAST;
  gbc_lblHud.insets=new Insets(0,5,5,5);
  gbc_lblHud.gridx=0;
  gbc_lblHud.gridy=1;
  panelSettings.add(lblHud,gbc_lblHud);
  cmbHud=new JComboBox<>();
  cmbHud.setModel(new DefaultComboBoxModel<>(new String[]{""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str""}));
  GridBagConstraints gbc_cmbHud=new GridBagConstraints();
  gbc_cmbHud.fill=GridBagConstraints.HORIZONTAL;
  gbc_cmbHud.insets=new Insets(0,0,5,5);
  gbc_cmbHud.gridx=1;
  gbc_cmbHud.gridy=1;
  panelSettings.add(cmbHud,gbc_cmbHud);
  JLabel lblDxLevel=new JLabel(""String_Node_Str"");
  GridBagConstraints gbc_lblDxLevel=new GridBagConstraints();
  gbc_lblDxLevel.anchor=GridBagConstraints.EAST;
  gbc_lblDxLevel.insets=new Insets(0,5,5,5);
  gbc_lblDxLevel.gridx=2;
  gbc_lblDxLevel.gridy=1;
  panelSettings.add(lblDxLevel,gbc_lblDxLevel);
  cmbQuality=new JComboBox<>();
  cmbQuality.setModel(new DefaultComboBoxModel<String>(new String[]{""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str""}));
  GridBagConstraints gbc_cmbQuality=new GridBagConstraints();
  gbc_cmbQuality.fill=GridBagConstraints.HORIZONTAL;
  gbc_cmbQuality.insets=new Insets(0,0,5,5);
  gbc_cmbQuality.gridx=3;
  gbc_cmbQuality.gridy=1;
  panelSettings.add(cmbQuality,gbc_cmbQuality);
  JLabel lblSkybox=new JLabel(""String_Node_Str"");
  GridBagConstraints gbc_lblSkybox=new GridBagConstraints();
  gbc_lblSkybox.anchor=GridBagConstraints.EAST;
  gbc_lblSkybox.insets=new Insets(0,5,5,5);
  gbc_lblSkybox.gridx=0;
  gbc_lblSkybox.gridy=2;
  panelSettings.add(lblSkybox,gbc_lblSkybox);
  cmbSkybox=new JComboBox<>();
  GridBagConstraints gbc_cmbSkybox=new GridBagConstraints();
  gbc_cmbSkybox.fill=GridBagConstraints.HORIZONTAL;
  gbc_cmbSkybox.insets=new Insets(0,0,5,5);
  gbc_cmbSkybox.gridx=1;
  gbc_cmbSkybox.gridy=2;
  panelSettings.add(cmbSkybox,gbc_cmbSkybox);
  lblPreview=new JLabel(""String_Node_Str"");
  GridBagConstraints gbc_lblPreview=new GridBagConstraints();
  gbc_lblPreview.anchor=GridBagConstraints.EAST;
  gbc_lblPreview.insets=new Insets(0,0,5,5);
  gbc_lblPreview.gridx=2;
  gbc_lblPreview.gridy=2;
  panelSettings.add(lblPreview,gbc_lblPreview);
  lblSkyboxPreview=new JLabel(""String_Node_Str"");
  GridBagConstraints gbc_lblSkyboxPreview=new GridBagConstraints();
  gbc_lblSkyboxPreview.anchor=GridBagConstraints.NORTHWEST;
  gbc_lblSkyboxPreview.gridheight=4;
  gbc_lblSkyboxPreview.insets=new Insets(0,0,5,5);
  gbc_lblSkyboxPreview.gridx=3;
  gbc_lblSkyboxPreview.gridy=2;
  panelSettings.add(lblSkyboxPreview,gbc_lblSkyboxPreview);
  JLabel lblViewmodels=new JLabel(""String_Node_Str"");
  GridBagConstraints gbc_lblViewmodels=new GridBagConstraints();
  gbc_lblViewmodels.anchor=GridBagConstraints.EAST;
  gbc_lblViewmodels.insets=new Insets(0,5,5,5);
  gbc_lblViewmodels.gridx=0;
  gbc_lblViewmodels.gridy=3;
  panelSettings.add(lblViewmodels,gbc_lblViewmodels);
  cmbViewmodel=new JComboBox<>();
  cmbViewmodel.setModel(new DefaultComboBoxModel<String>(new String[]{""String_Node_Str"",""String_Node_Str"",""String_Node_Str""}));
  GridBagConstraints gbc_cmbViewmodel=new GridBagConstraints();
  gbc_cmbViewmodel.insets=new Insets(0,0,5,5);
  gbc_cmbViewmodel.fill=GridBagConstraints.HORIZONTAL;
  gbc_cmbViewmodel.gridx=1;
  gbc_cmbViewmodel.gridy=3;
  panelSettings.add(cmbViewmodel,gbc_cmbViewmodel);
  horizontalStrut=Box.createHorizontalStrut(24);
  GridBagConstraints gbc_horizontalStrut=new GridBagConstraints();
  gbc_horizontalStrut.insets=new Insets(0,0,5,5);
  gbc_horizontalStrut.gridx=2;
  gbc_horizontalStrut.gridy=3;
  panelSettings.add(horizontalStrut,gbc_horizontalStrut);
  JLabel lblViewmodelFov=new JLabel(""String_Node_Str"");
  GridBagConstraints gbc_lblViewmodelFov=new GridBagConstraints();
  gbc_lblViewmodelFov.anchor=GridBagConstraints.EAST;
  gbc_lblViewmodelFov.insets=new Insets(0,5,5,5);
  gbc_lblViewmodelFov.gridx=0;
  gbc_lblViewmodelFov.gridy=4;
  panelSettings.add(lblViewmodelFov,gbc_lblViewmodelFov);
  spinnerViewmodelFov=new JSpinner();
  GridBagConstraints gbc_spinnerViewmodelFov=new GridBagConstraints();
  gbc_spinnerViewmodelFov.anchor=GridBagConstraints.WEST;
  gbc_spinnerViewmodelFov.insets=new Insets(0,0,5,5);
  gbc_spinnerViewmodelFov.gridx=1;
  gbc_spinnerViewmodelFov.gridy=4;
  panelSettings.add(spinnerViewmodelFov,gbc_spinnerViewmodelFov);
  spinnerViewmodelFov.setModel(new SpinnerNumberModel(70,55,90,1));
  verticalStrut=Box.createVerticalStrut(22);
  GridBagConstraints gbc_verticalStrut=new GridBagConstraints();
  gbc_verticalStrut.insets=new Insets(0,0,5,5);
  gbc_verticalStrut.gridx=0;
  gbc_verticalStrut.gridy=5;
  panelSettings.add(verticalStrut,gbc_verticalStrut);
  panelCheckboxes=new JPanel();
  panelCheckboxes.setBorder(new TitledBorder(UIManager.getBorder(""String_Node_Str""),""String_Node_Str"",TitledBorder.LEADING,TitledBorder.TOP,null,null));
  GridBagConstraints gbc_panelCheckboxes=new GridBagConstraints();
  gbc_panelCheckboxes.insets=new Insets(0,0,5,5);
  gbc_panelCheckboxes.gridheight=4;
  gbc_panelCheckboxes.gridwidth=4;
  gbc_panelCheckboxes.fill=GridBagConstraints.BOTH;
  gbc_panelCheckboxes.gridx=0;
  gbc_panelCheckboxes.gridy=6;
  panelSettings.add(panelCheckboxes,gbc_panelCheckboxes);
  GridBagLayout gbl_panelCheckboxes=new GridBagLayout();
  gbl_panelCheckboxes.columnWidths=new int[]{0,0,0};
  gbl_panelCheckboxes.rowHeights=new int[]{0,0,0,0};
  gbl_panelCheckboxes.columnWeights=new double[]{1.0,1.0,Double.MIN_VALUE};
  gbl_panelCheckboxes.rowWeights=new double[]{0.0,0.0,0.0,Double.MIN_VALUE};
  panelCheckboxes.setLayout(gbl_panelCheckboxes);
  enableMotionBlur=new JCheckBox(""String_Node_Str"");
  GridBagConstraints gbc_enableMotionBlur=new GridBagConstraints();
  gbc_enableMotionBlur.insets=new Insets(0,0,0,5);
  gbc_enableMotionBlur.anchor=GridBagConstraints.WEST;
  gbc_enableMotionBlur.gridx=0;
  gbc_enableMotionBlur.gridy=0;
  panelCheckboxes.add(enableMotionBlur,gbc_enableMotionBlur);
  disableCombatText=new JCheckBox(""String_Node_Str"");
  GridBagConstraints gbc_disableCombatText=new GridBagConstraints();
  gbc_disableCombatText.anchor=GridBagConstraints.WEST;
  gbc_disableCombatText.gridx=1;
  gbc_disableCombatText.gridy=0;
  panelCheckboxes.add(disableCombatText,gbc_disableCombatText);
  disableHitSounds=new JCheckBox(""String_Node_Str"");
  GridBagConstraints gbc_disableHitSounds=new GridBagConstraints();
  gbc_disableHitSounds.insets=new Insets(0,0,0,5);
  gbc_disableHitSounds.anchor=GridBagConstraints.WEST;
  gbc_disableHitSounds.gridx=0;
  gbc_disableHitSounds.gridy=1;
  panelCheckboxes.add(disableHitSounds,gbc_disableHitSounds);
  disableCrosshair=new JCheckBox(""String_Node_Str"");
  GridBagConstraints gbc_disableCrosshair=new GridBagConstraints();
  gbc_disableCrosshair.anchor=GridBagConstraints.WEST;
  gbc_disableCrosshair.gridx=1;
  gbc_disableCrosshair.gridy=1;
  panelCheckboxes.add(disableCrosshair,gbc_disableCrosshair);
  disableVoiceChat=new JCheckBox(""String_Node_Str"");
  GridBagConstraints gbc_disableVoiceChat=new GridBagConstraints();
  gbc_disableVoiceChat.insets=new Insets(0,0,0,5);
  gbc_disableVoiceChat.anchor=GridBagConstraints.WEST;
  gbc_disableVoiceChat.gridx=0;
  gbc_disableVoiceChat.gridy=2;
  panelCheckboxes.add(disableVoiceChat,gbc_disableVoiceChat);
  disableCrosshairSwitch=new JCheckBox(""String_Node_Str"");
  GridBagConstraints gbc_disableCrosshairSwitch=new GridBagConstraints();
  gbc_disableCrosshairSwitch.anchor=GridBagConstraints.WEST;
  gbc_disableCrosshairSwitch.gridx=1;
  gbc_disableCrosshairSwitch.gridy=2;
  panelCheckboxes.add(disableCrosshairSwitch,gbc_disableCrosshairSwitch);
  panelBottomLeft=new JPanel();
  FlowLayout fl_panelBottomLeft=(FlowLayout)panelBottomLeft.getLayout();
  fl_panelBottomLeft.setVgap(0);
  fl_panelBottomLeft.setHgap(0);
  GridBagConstraints gbc_panelBottomLeft=new GridBagConstraints();
  gbc_panelBottomLeft.anchor=GridBagConstraints.WEST;
  gbc_panelBottomLeft.gridwidth=3;
  gbc_panelBottomLeft.insets=new Insets(0,5,5,5);
  gbc_panelBottomLeft.fill=GridBagConstraints.VERTICAL;
  gbc_panelBottomLeft.gridx=0;
  gbc_panelBottomLeft.gridy=10;
  panelSettings.add(panelBottomLeft,gbc_panelBottomLeft);
  btnSaveSettings=new JButton(""String_Node_Str"");
  panelBottomLeft.add(btnSaveSettings);
  btnClearMovieFolder=new JButton(""String_Node_Str"");
  panelBottomLeft.add(btnClearMovieFolder);
  panelBottomRight=new JPanel();
  FlowLayout fl_panelBottomRight=(FlowLayout)panelBottomRight.getLayout();
  fl_panelBottomRight.setVgap(0);
  fl_panelBottomRight.setHgap(0);
  GridBagConstraints gbc_panelBottomRight=new GridBagConstraints();
  gbc_panelBottomRight.gridwidth=3;
  gbc_panelBottomRight.anchor=GridBagConstraints.EAST;
  gbc_panelBottomRight.insets=new Insets(0,0,5,5);
  gbc_panelBottomRight.fill=GridBagConstraints.VERTICAL;
  gbc_panelBottomRight.gridx=3;
  gbc_panelBottomRight.gridy=10;
  panelSettings.add(panelBottomRight,gbc_panelBottomRight);
  btnStartTf=new JButton(""String_Node_Str"");
  panelBottomRight.add(btnStartTf);
  JPanel panelLog=new JPanel();
  tabbedPane.addTab(""String_Node_Str"",null,panelLog,null);
  panelLog.setLayout(new BorderLayout(0,0));
  scrollPane_2=new JScrollPane();
  panelLog.add(scrollPane_2,BorderLayout.CENTER);
  textAreaLog=new JTextArea();
  textAreaLog.setFont(new Font(""String_Node_Str"",Font.PLAIN,10));
  textAreaLog.setEditable(false);
  scrollPane_2.setViewportView(textAreaLog);
  panelStatusbar=new JPanel();
  contentPane.add(panelStatusbar,BorderLayout.SOUTH);
  GridBagLayout gbl_panelStatusbar=new GridBagLayout();
  gbl_panelStatusbar.columnWidths=new int[]{31,0,0,0};
  gbl_panelStatusbar.rowHeights=new int[]{12,0};
  gbl_panelStatusbar.columnWeights=new double[]{0.0,1.0,0.0,Double.MIN_VALUE};
  gbl_panelStatusbar.rowWeights=new double[]{0.0,Double.MIN_VALUE};
  panelStatusbar.setLayout(gbl_panelStatusbar);
  lblStatus=new JLabel(""String_Node_Str"");
  GridBagConstraints gbc_lblStatus=new GridBagConstraints();
  gbc_lblStatus.insets=new Insets(0,5,0,5);
  gbc_lblStatus.anchor=GridBagConstraints.NORTHWEST;
  gbc_lblStatus.gridx=0;
  gbc_lblStatus.gridy=0;
  panelStatusbar.add(lblStatus,gbc_lblStatus);
  progressBar=new JProgressBar();
  GridBagConstraints gbc_progressBar=new GridBagConstraints();
  gbc_progressBar.anchor=GridBagConstraints.EAST;
  gbc_progressBar.gridx=2;
  gbc_progressBar.gridy=0;
  panelStatusbar.add(progressBar,gbc_progressBar);
  pack();
  setMinimumSize(new Dimension(750,400));
  setLocationByPlatform(true);
}",0.9999332710529828
161950,"public void replaceAll(){
  if (!Files.exists(configBackupPath)) {
    try {
      Files.move(configPath,configBackupPath);
      Files.createDirectories(configPath);
      copy(Paths.get(""String_Node_Str""),configPath);
    }
 catch (    IOException e) {
      log.log(Level.INFO,""String_Node_Str"",e);
      return;
    }
  }
  if (!Files.exists(customBackupPath)) {
    try {
      Files.move(customPath,customBackupPath);
    }
 catch (    IOException e) {
      log.log(Level.INFO,""String_Node_Str"",e);
      return;
    }
    try {
      Path resourcePath=Paths.get(tfdir,""String_Node_Str"");
      Path scriptsPath=Paths.get(tfdir,""String_Node_Str"");
      Files.createDirectories(resourcePath);
      Files.createDirectories(scriptsPath);
      copy(Paths.get(""String_Node_Str"",hudName,""String_Node_Str""),resourcePath);
      copy(Paths.get(""String_Node_Str"",hudName,""String_Node_Str""),scriptsPath);
    }
 catch (    IOException e) {
      log.log(Level.INFO,""String_Node_Str"",e);
    }
    Path materialsPath=Paths.get(tfdir,""String_Node_Str"");
    try {
      if (skyboxFilename != null && !skyboxFilename.isEmpty()) {
        Files.createDirectories(materialsPath);
        replaceSkybox();
      }
    }
 catch (    IOException e) {
      log.log(Level.INFO,""String_Node_Str"",e);
      try {
        delete(materialsPath);
      }
 catch (      IOException e1) {
        log.log(Level.INFO,""String_Node_Str"",e);
      }
    }
    try {
      if (replaceVo) {
        Path voPath=Paths.get(tfdir,""String_Node_Str"");
        Files.createDirectories(voPath);
        copy(Paths.get(""String_Node_Str""),voPath);
      }
    }
 catch (    IOException e) {
      log.log(Level.INFO,""String_Node_Str"",e);
    }
    try {
      Path miscPath=Paths.get(tfdir,""String_Node_Str"");
      Files.createDirectories(miscPath);
      copy(Paths.get(""String_Node_Str""),miscPath);
      if (replaceDomination) {
        copy(Paths.get(""String_Node_Str""),miscPath);
      }
      if (replaceAnnouncer) {
        copy(Paths.get(""String_Node_Str""),miscPath);
      }
    }
 catch (    IOException e) {
      log.log(Level.INFO,""String_Node_Str"",e);
    }
  }
}","public void replaceAll(){
  if (!Files.exists(configBackupPath)) {
    try {
      configPath.toFile().setWritable(true);
      Files.move(configPath,configBackupPath);
      Files.createDirectories(configPath);
      copy(Paths.get(""String_Node_Str""),configPath);
    }
 catch (    IOException e) {
      log.log(Level.INFO,""String_Node_Str"",e);
      return;
    }
  }
  if (!Files.exists(customBackupPath)) {
    try {
      customPath.toFile().setWritable(true);
      Files.move(customPath,customBackupPath);
    }
 catch (    IOException e) {
      log.log(Level.INFO,""String_Node_Str"",e);
      return;
    }
    try {
      Path resourcePath=Paths.get(tfdir,""String_Node_Str"");
      Path scriptsPath=Paths.get(tfdir,""String_Node_Str"");
      Files.createDirectories(resourcePath);
      Files.createDirectories(scriptsPath);
      copy(Paths.get(""String_Node_Str"",hudName,""String_Node_Str""),resourcePath);
      copy(Paths.get(""String_Node_Str"",hudName,""String_Node_Str""),scriptsPath);
    }
 catch (    IOException e) {
      log.log(Level.INFO,""String_Node_Str"",e);
    }
    Path materialsPath=Paths.get(tfdir,""String_Node_Str"");
    try {
      if (skyboxFilename != null && !skyboxFilename.isEmpty()) {
        Files.createDirectories(materialsPath);
        replaceSkybox();
      }
    }
 catch (    IOException e) {
      log.log(Level.INFO,""String_Node_Str"",e);
      try {
        delete(materialsPath);
      }
 catch (      IOException e1) {
        log.log(Level.INFO,""String_Node_Str"",e);
      }
    }
    try {
      if (replaceVo) {
        Path voPath=Paths.get(tfdir,""String_Node_Str"");
        Files.createDirectories(voPath);
        copy(Paths.get(""String_Node_Str""),voPath);
      }
    }
 catch (    IOException e) {
      log.log(Level.INFO,""String_Node_Str"",e);
    }
    try {
      Path miscPath=Paths.get(tfdir,""String_Node_Str"");
      Files.createDirectories(miscPath);
      copy(Paths.get(""String_Node_Str""),miscPath);
      if (replaceDomination) {
        copy(Paths.get(""String_Node_Str""),miscPath);
      }
      if (replaceAnnouncer) {
        copy(Paths.get(""String_Node_Str""),miscPath);
      }
    }
 catch (    IOException e) {
      log.log(Level.INFO,""String_Node_Str"",e);
    }
  }
}",0.979470802919708
161951,"@Override public FileVisitResult visitFile(Path file,BasicFileAttributes attrs) throws IOException {
  Files.copy(file,toPath.resolve(fromPath.relativize(file)),copyOption);
  return FileVisitResult.CONTINUE;
}","@Override public FileVisitResult visitFile(Path file,BasicFileAttributes attrs) throws IOException {
  Path target=Files.copy(file,toPath.resolve(fromPath.relativize(file)),copyOption);
  target.toFile().setWritable(false);
  return FileVisitResult.CONTINUE;
}",0.8936170212765957
161952,"@Override public FileVisitResult postVisitDirectory(Path dir,IOException exc) throws IOException {
  if (exc == null) {
    Files.delete(dir);
    return FileVisitResult.CONTINUE;
  }
  throw exc;
}","@Override public FileVisitResult postVisitDirectory(Path dir,IOException exc) throws IOException {
  if (exc == null) {
    try {
      Files.delete(dir);
    }
 catch (    NoSuchFileException e) {
    }
catch (    IOException e) {
      log.info(""String_Node_Str"" + e);
    }
    return FileVisitResult.CONTINUE;
  }
  throw exc;
}",0.7471698113207547
161953,"@Override public FileVisitResult visitFile(Path file,BasicFileAttributes attrs) throws IOException {
  Files.delete(file);
  return FileVisitResult.CONTINUE;
}","@Override public FileVisitResult visitFile(Path path,BasicFileAttributes attrs) throws IOException {
  try {
    path.toFile().setWritable(true);
    Files.delete(path);
  }
 catch (  NoSuchFileException e) {
  }
catch (  IOException e) {
    log.info(""String_Node_Str"" + e);
  }
  return FileVisitResult.CONTINUE;
}",0.6442105263157895
161954,"public void init() throws Exception {
  choosedir=new JFileChooser(""String_Node_Str"");
  choosedemo=new JFileChooser(""String_Node_Str"");
  choosemovie=new JFileChooser(""String_Node_Str"");
  cl=new CLInterface();
  File dirfile=new File(""String_Node_Str"");
  tfdir=""String_Node_Str"";
  moviedir=""String_Node_Str"";
  currentdemo=""String_Node_Str"";
  try {
    version=this.getClass().getPackage().getImplementationVersion().split(""String_Node_Str"")[0];
  }
 catch (  Exception e) {
    version=""String_Node_Str"";
  }
  steampath=cl.regQuery(""String_Node_Str"",""String_Node_Str"",1);
  choosedir.setDialogTitle(""String_Node_Str"");
  choosedir.setFileSelectionMode(JFileChooser.DIRECTORIES_ONLY);
  choosedir.setCurrentDirectory(new File(steampath));
  choosemovie.setDialogTitle(""String_Node_Str"");
  choosemovie.setFileSelectionMode(JFileChooser.DIRECTORIES_ONLY);
  if (dirfile.exists()) {
    BufferedReader br=new BufferedReader(new FileReader(dirfile));
    tfdir=br.readLine();
    moviedir=br.readLine();
    br.close();
  }
  while (!dirfile.exists() || !Files.exists(Paths.get(tfdir)) || !Paths.get(tfdir).toFile().getName().toString().equals(""String_Node_Str"")) {
    int returnVal=choosedir.showOpenDialog(this);
    if (returnVal == JFileChooser.APPROVE_OPTION) {
      tfdir=choosedir.getSelectedFile().getPath();
      PrintWriter pw=new PrintWriter(new FileWriter(""String_Node_Str""));
      pw.println(tfdir);
      pw.close();
    }
 else {
      dispose();
      System.exit(0);
    }
  }
  while (moviedir == null || moviedir.isEmpty() || !Files.exists(Paths.get(moviedir))) {
    int returnVal=choosemovie.showOpenDialog(this);
    if (returnVal == JFileChooser.APPROVE_OPTION) {
      moviedir=choosemovie.getSelectedFile().getPath();
      PrintWriter pw=new PrintWriter(new FileWriter(""String_Node_Str"",true));
      pw.println(moviedir);
      pw.close();
    }
 else {
      dispose();
      System.exit(0);
    }
  }
  choosedemo.setDialogTitle(""String_Node_Str"");
  choosedemo.setFileSelectionMode(JFileChooser.FILES_ONLY);
  choosedemo.setFileFilter(new FileNameExtensionFilter(""String_Node_Str"",new String[]{""String_Node_Str""}));
  choosedemo.setCurrentDirectory(new File(tfdir));
  settings=new SettingsManager(""String_Node_Str"");
  movies=new MovieManager(moviedir);
  files=new FileManager(tfdir);
  files.restoreAll();
  oDxlevel=cl.regQuery(""String_Node_Str"",""String_Node_Str"",0);
  tabbedpane=new JTabbedPane();
  settingspanel=new JPanel();
  vdmpanel=new JPanel();
  settingspanel.setLayout(new GridLayout(10,2));
  vdmpanel.setLayout(new GridLayout(4,1));
  FilenameFilter filter=new FilenameFilter(){
    public boolean accept(    File dir,    String name){
      return name.endsWith(""String_Node_Str"");
    }
  }
;
  String[] skyboxfiles=new File(""String_Node_Str"").list(filter);
  int skyboxlength;
  if (skyboxfiles == null) {
    skyboxlength=0;
  }
 else {
    skyboxlength=skyboxfiles.length;
  }
  String[] skyboxes=new String[skyboxlength + 1];
  for (int i=1; i < skyboxlength + 1; ++i) {
    cl.generatePreview(skyboxfiles[i - 1]);
    skyboxes[i]=skyboxfiles[i - 1].substring(0,skyboxfiles[i - 1].indexOf(""String_Node_Str""));
  }
  skyboxes[0]=""String_Node_Str"";
  String[] resolutions={""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str""};
  String[] framerates={""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str""};
  String[] huds={""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str""};
  String[] viewmodeloptions={""String_Node_Str"",""String_Node_Str"",""String_Node_Str""};
  String[] dxleveloptions={""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str""};
  String[] columnames={""String_Node_Str"",""String_Node_Str"",""String_Node_Str""};
  Object[][] tickdata={};
  model=new DefaultTableModel(tickdata,columnames);
  height=new JTextField(4);
  width=new JTextField(4);
  fps=new JTextField(4);
  selecteddemo=new JTextField(40);
  tick1=new JTextField(6);
  tick2=new JTextField(6);
  ticks=new JTable(model);
  ticks.setAutoResizeMode(JTable.AUTO_RESIZE_OFF);
  int vColIndex=0;
  TableColumn col=ticks.getColumnModel().getColumn(vColIndex);
  int columnwidth=400;
  col.setPreferredWidth(columnwidth);
  ticks.setAutoResizeMode(JTable.AUTO_RESIZE_LAST_COLUMN);
  ticks.setFillsViewportHeight(true);
  resolution=new JComboBox<>(resolutions);
  framerate=new JComboBox<>(framerates);
  viewmodelswitch=new JComboBox<>(viewmodeloptions);
  dxlevel=new JComboBox<>(dxleveloptions);
  skybox=new JComboBox<>(skyboxes);
  hud=new JComboBox<>(huds);
  resolution.setSelectedIndex(resChoice(settings.getWidth(),settings.getHeight()));
  ticksscrollpane=new JScrollPane(ticks);
  if (resChoice(settings.getWidth(),settings.getHeight()) == 4) {
    width.setText(""String_Node_Str"" + settings.getWidth());
    height.setText(""String_Node_Str"" + settings.getHeight());
  }
  framerate.setSelectedIndex(frameChoice(settings.getFramerate()));
  if (frameChoice(settings.getFramerate()) == 7) {
    fps.setText(""String_Node_Str"" + settings.getFramerate());
  }
  hud.setSelectedIndex(hudChoice(settings.getHud()));
  viewmodelswitch.setSelectedIndex(viewmodelChoice(settings.getViewmodelSwitch()));
  dxlevel.setSelectedIndex(dxlevelChoice(settings.getDxlevel()));
  viewmodelfov=new JSlider(JSlider.HORIZONTAL,55,70,settings.getViewmodelFov());
  viewmodelfov.setMajorTickSpacing(5);
  viewmodelfov.setMinorTickSpacing(1);
  viewmodelfov.setPaintTicks(true);
  viewmodelfov.setPaintLabels(true);
  motionblur=new JCheckBox(""String_Node_Str"",settings.getMotionBlur());
  crosshairswitch=new JCheckBox(""String_Node_Str"",!settings.getCrosshairSwitch());
  crosshair=new JCheckBox(""String_Node_Str"",!settings.getCrosshair());
  combattext=new JCheckBox(""String_Node_Str"",!settings.getCombattext());
  announcer=new JCheckBox(""String_Node_Str"",!settings.getAnnouncer());
  domination=new JCheckBox(""String_Node_Str"",!settings.getDomination());
  hitsounds=new JCheckBox(""String_Node_Str"",!settings.getHitsounds());
  voice=new JCheckBox(""String_Node_Str"",!settings.getVoice());
  steamcloud=new JCheckBox(""String_Node_Str"",!settings.getSteamCloud());
  save=new JButton(""String_Node_Str"");
  start=new JButton(""String_Node_Str"");
  browsedemos=new JButton(""String_Node_Str"");
  addticks=new JButton(""String_Node_Str"");
  createvdm=new JButton(""String_Node_Str"");
  deletemovies=new JButton(""String_Node_Str"");
  clearticks=new JButton(""String_Node_Str"");
  clearvdm=new JButton(""String_Node_Str"");
  skyboxpreview=new JButton(""String_Node_Str"");
  height.setEditable(resolution.getSelectedIndex() == 4);
  width.setEditable(resolution.getSelectedIndex() == 4);
  fps.setEditable(framerate.getSelectedIndex() == 7);
  save.addActionListener(this);
  start.addActionListener(this);
  deletemovies.addActionListener(this);
  resolution.addActionListener(this);
  framerate.addActionListener(this);
  browsedemos.addActionListener(this);
  addticks.addActionListener(this);
  clearticks.addActionListener(this);
  createvdm.addActionListener(this);
  clearvdm.addActionListener(this);
  skyboxpreview.addActionListener(this);
  addWindowListener(new LwrtWindowListener());
  respanel=new JPanel();
  respanel2=new JPanel();
  fpspanel=new JPanel();
  fpspanel2=new JPanel();
  hudpanel=new JPanel();
  skyboxpanel=new JPanel();
  viewmodelfovpanel=new JPanel();
  viewmodelswitchpanel=new JPanel();
  dxlevelpanel=new JPanel();
  savedeletepanel=new JPanel();
  tickpanel=new JPanel();
  demopanel=new JPanel();
  createvdmpanel=new JPanel();
  respanel.add(new JLabel(""String_Node_Str""));
  respanel.add(resolution);
  respanel2.add(new JLabel(""String_Node_Str""));
  respanel2.add(width);
  respanel2.add(new JLabel(""String_Node_Str""));
  respanel2.add(height);
  fpspanel.add(new JLabel(""String_Node_Str""));
  fpspanel.add(framerate);
  fpspanel2.add(new JLabel(""String_Node_Str""));
  fpspanel2.add(fps);
  hudpanel.add(new JLabel(""String_Node_Str""));
  hudpanel.add(hud);
  viewmodelfovpanel.add(new JLabel(""String_Node_Str""));
  viewmodelfovpanel.add(viewmodelfov);
  savedeletepanel.add(save);
  savedeletepanel.add(deletemovies);
  tickpanel.add(new JLabel(""String_Node_Str""));
  tickpanel.add(tick1);
  tickpanel.add(new JLabel(""String_Node_Str""));
  tickpanel.add(new JLabel(""String_Node_Str""));
  tickpanel.add(tick2);
  tickpanel.add(new JLabel(""String_Node_Str""));
  tickpanel.add(addticks);
  demopanel.add(new JLabel(""String_Node_Str""));
  demopanel.add(selecteddemo);
  demopanel.add(browsedemos);
  createvdmpanel.add(clearticks);
  createvdmpanel.add(createvdm);
  createvdmpanel.add(clearvdm);
  viewmodelswitchpanel.add(new JLabel(""String_Node_Str""));
  viewmodelswitchpanel.add(viewmodelswitch);
  dxlevelpanel.add(new JLabel(""String_Node_Str""));
  dxlevelpanel.add(dxlevel);
  skyboxpanel.add(new JLabel(""String_Node_Str""));
  skyboxpanel.add(skybox);
  skyboxpanel.add(skyboxpreview);
  settingspanel.add(respanel);
  settingspanel.add(respanel2);
  settingspanel.add(fpspanel);
  settingspanel.add(fpspanel2);
  settingspanel.add(dxlevelpanel);
  settingspanel.add(hudpanel);
  settingspanel.add(viewmodelfovpanel);
  settingspanel.add(skyboxpanel);
  settingspanel.add(motionblur);
  settingspanel.add(viewmodelswitchpanel);
  settingspanel.add(crosshairswitch);
  settingspanel.add(crosshair);
  settingspanel.add(combattext);
  settingspanel.add(announcer);
  settingspanel.add(domination);
  settingspanel.add(hitsounds);
  settingspanel.add(voice);
  settingspanel.add(steamcloud);
  settingspanel.add(savedeletepanel);
  settingspanel.add(start);
  vdmpanel.add(demopanel);
  vdmpanel.add(tickpanel);
  vdmpanel.add(createvdmpanel);
  vdmpanel.add(ticksscrollpane);
  tabbedpane.addTab(""String_Node_Str"",settingspanel);
  tabbedpane.addTab(""String_Node_Str"",vdmpanel);
  add(tabbedpane);
  setTitle(""String_Node_Str"" + version);
  try {
    setIconImage(new ImageIcon(LwrtGUI.class.getClassLoader().getResource(""String_Node_Str"")).getImage());
  }
 catch (  Exception e) {
    log.info(""String_Node_Str"" + e);
  }
  pack();
  Dimension dim=Toolkit.getDefaultToolkit().getScreenSize();
  setSize(dim.width / 2,dim.height / 2);
  int w=getSize().width;
  int h=getSize().height;
  int x=(dim.width - w) / 2;
  int y=(dim.height - h) / 2;
  setLocation(x,y);
  setResizable(false);
}","public void init() throws Exception {
  choosedir=new JFileChooser(""String_Node_Str"");
  choosedemo=new JFileChooser(""String_Node_Str"");
  choosemovie=new JFileChooser(""String_Node_Str"");
  cl=new CLInterface();
  File dirfile=new File(""String_Node_Str"");
  tfdir=""String_Node_Str"";
  moviedir=""String_Node_Str"";
  currentdemo=""String_Node_Str"";
  try {
    version=this.getClass().getPackage().getImplementationVersion().split(""String_Node_Str"")[0];
  }
 catch (  Exception e) {
    version=""String_Node_Str"";
  }
  steampath=cl.regQuery(""String_Node_Str"",""String_Node_Str"",1);
  choosedir.setDialogTitle(""String_Node_Str"");
  choosedir.setFileSelectionMode(JFileChooser.DIRECTORIES_ONLY);
  choosedir.setCurrentDirectory(new File(steampath));
  choosemovie.setDialogTitle(""String_Node_Str"");
  choosemovie.setFileSelectionMode(JFileChooser.DIRECTORIES_ONLY);
  if (dirfile.exists()) {
    BufferedReader br=new BufferedReader(new FileReader(dirfile));
    tfdir=br.readLine();
    moviedir=br.readLine();
    br.close();
  }
  while (!dirfile.exists() || !Files.exists(Paths.get(tfdir)) || !Paths.get(tfdir).toFile().getName().toString().equals(""String_Node_Str"")) {
    int returnVal=choosedir.showOpenDialog(this);
    if (returnVal == JFileChooser.APPROVE_OPTION) {
      tfdir=choosedir.getSelectedFile().getPath();
      PrintWriter pw=new PrintWriter(new FileWriter(""String_Node_Str""));
      pw.println(tfdir);
      pw.close();
    }
 else {
      dispose();
      System.exit(0);
    }
  }
  while (moviedir == null || moviedir.isEmpty() || !Files.exists(Paths.get(moviedir))) {
    int returnVal=choosemovie.showOpenDialog(this);
    if (returnVal == JFileChooser.APPROVE_OPTION) {
      moviedir=choosemovie.getSelectedFile().getPath();
      PrintWriter pw=new PrintWriter(new FileWriter(""String_Node_Str"",true));
      pw.println(moviedir);
      pw.close();
    }
 else {
      dispose();
      System.exit(0);
    }
  }
  choosedemo.setDialogTitle(""String_Node_Str"");
  choosedemo.setFileSelectionMode(JFileChooser.FILES_ONLY);
  choosedemo.setFileFilter(new FileNameExtensionFilter(""String_Node_Str"",new String[]{""String_Node_Str""}));
  choosedemo.setCurrentDirectory(new File(tfdir));
  settings=new SettingsManager(""String_Node_Str"");
  movies=new MovieManager(moviedir);
  files=new FileManager(tfdir);
  files.restoreAll();
  oDxlevel=cl.regQuery(""String_Node_Str"",""String_Node_Str"",0);
  tabbedpane=new JTabbedPane();
  settingspanel=new JPanel();
  vdmpanel=new JPanel();
  settingspanel.setLayout(new GridLayout(10,2));
  vdmpanel.setLayout(new GridLayout(4,1));
  FilenameFilter filter=new FilenameFilter(){
    public boolean accept(    File dir,    String name){
      return name.endsWith(""String_Node_Str"");
    }
  }
;
  String[] skyboxfiles=new File(""String_Node_Str"").list(filter);
  int skyboxlength;
  if (skyboxfiles == null) {
    skyboxlength=0;
  }
 else {
    skyboxlength=skyboxfiles.length;
  }
  String[] skyboxes=new String[skyboxlength + 1];
  for (int i=1; i < skyboxlength + 1; ++i) {
    cl.generatePreview(skyboxfiles[i - 1]);
    skyboxes[i]=skyboxfiles[i - 1].substring(0,skyboxfiles[i - 1].indexOf(""String_Node_Str""));
  }
  skyboxes[0]=""String_Node_Str"";
  String[] resolutions={""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str""};
  String[] framerates={""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str""};
  String[] huds={""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str""};
  String[] viewmodeloptions={""String_Node_Str"",""String_Node_Str"",""String_Node_Str""};
  String[] dxleveloptions={""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str""};
  String[] columnames={""String_Node_Str"",""String_Node_Str"",""String_Node_Str""};
  Object[][] tickdata={};
  model=new DefaultTableModel(tickdata,columnames);
  height=new JTextField(4);
  width=new JTextField(4);
  fps=new JTextField(4);
  selecteddemo=new JTextField(40);
  tick1=new JTextField(6);
  tick2=new JTextField(6);
  ticks=new JTable(model);
  ticks.setAutoResizeMode(JTable.AUTO_RESIZE_OFF);
  int vColIndex=0;
  TableColumn col=ticks.getColumnModel().getColumn(vColIndex);
  int columnwidth=400;
  col.setPreferredWidth(columnwidth);
  ticks.setAutoResizeMode(JTable.AUTO_RESIZE_LAST_COLUMN);
  ticks.setFillsViewportHeight(true);
  resolution=new JComboBox<>(resolutions);
  framerate=new JComboBox<>(framerates);
  viewmodelswitch=new JComboBox<>(viewmodeloptions);
  dxlevel=new JComboBox<>(dxleveloptions);
  skybox=new JComboBox<>(skyboxes);
  hud=new JComboBox<>(huds);
  resolution.setSelectedIndex(resChoice(settings.getWidth(),settings.getHeight()));
  ticksscrollpane=new JScrollPane(ticks);
  if (resChoice(settings.getWidth(),settings.getHeight()) == 4) {
    width.setText(""String_Node_Str"" + settings.getWidth());
    height.setText(""String_Node_Str"" + settings.getHeight());
  }
  framerate.setSelectedIndex(frameChoice(settings.getFramerate()));
  if (frameChoice(settings.getFramerate()) == 7) {
    fps.setText(""String_Node_Str"" + settings.getFramerate());
  }
  hud.setSelectedIndex(hudChoice(settings.getHud()));
  viewmodelswitch.setSelectedIndex(viewmodelChoice(settings.getViewmodelSwitch()));
  dxlevel.setSelectedIndex(dxlevelChoice(settings.getDxlevel()));
  viewmodelfov=new JSlider(JSlider.HORIZONTAL,55,70,settings.getViewmodelFov());
  viewmodelfov.setMajorTickSpacing(5);
  viewmodelfov.setMinorTickSpacing(1);
  viewmodelfov.setPaintTicks(true);
  viewmodelfov.setPaintLabels(true);
  motionblur=new JCheckBox(""String_Node_Str"",settings.getMotionBlur());
  crosshairswitch=new JCheckBox(""String_Node_Str"",!settings.getCrosshairSwitch());
  crosshair=new JCheckBox(""String_Node_Str"",!settings.getCrosshair());
  combattext=new JCheckBox(""String_Node_Str"",!settings.getCombattext());
  announcer=new JCheckBox(""String_Node_Str"",!settings.getAnnouncer());
  domination=new JCheckBox(""String_Node_Str"",!settings.getDomination());
  hitsounds=new JCheckBox(""String_Node_Str"",!settings.getHitsounds());
  voice=new JCheckBox(""String_Node_Str"",!settings.getVoice());
  steamcloud=new JCheckBox(""String_Node_Str"",!settings.getSteamCloud());
  save=new JButton(""String_Node_Str"");
  start=new JButton(""String_Node_Str"");
  browsedemos=new JButton(""String_Node_Str"");
  addticks=new JButton(""String_Node_Str"");
  createvdm=new JButton(""String_Node_Str"");
  deletemovies=new JButton(""String_Node_Str"");
  clearticks=new JButton(""String_Node_Str"");
  clearvdm=new JButton(""String_Node_Str"");
  skyboxpreview=new JButton(""String_Node_Str"");
  height.setEditable(resolution.getSelectedIndex() == 4);
  width.setEditable(resolution.getSelectedIndex() == 4);
  fps.setEditable(framerate.getSelectedIndex() == 7);
  save.addActionListener(this);
  start.addActionListener(this);
  deletemovies.addActionListener(this);
  resolution.addActionListener(this);
  framerate.addActionListener(this);
  browsedemos.addActionListener(this);
  addticks.addActionListener(this);
  clearticks.addActionListener(this);
  createvdm.addActionListener(this);
  clearvdm.addActionListener(this);
  skyboxpreview.addActionListener(this);
  addWindowListener(new WindowAdapter(){
    @Override public void windowClosing(    WindowEvent e){
      files.restoreAll();
      System.exit(0);
    }
  }
);
  respanel=new JPanel();
  respanel2=new JPanel();
  fpspanel=new JPanel();
  fpspanel2=new JPanel();
  hudpanel=new JPanel();
  skyboxpanel=new JPanel();
  viewmodelfovpanel=new JPanel();
  viewmodelswitchpanel=new JPanel();
  dxlevelpanel=new JPanel();
  savedeletepanel=new JPanel();
  tickpanel=new JPanel();
  demopanel=new JPanel();
  createvdmpanel=new JPanel();
  respanel.add(new JLabel(""String_Node_Str""));
  respanel.add(resolution);
  respanel2.add(new JLabel(""String_Node_Str""));
  respanel2.add(width);
  respanel2.add(new JLabel(""String_Node_Str""));
  respanel2.add(height);
  fpspanel.add(new JLabel(""String_Node_Str""));
  fpspanel.add(framerate);
  fpspanel2.add(new JLabel(""String_Node_Str""));
  fpspanel2.add(fps);
  hudpanel.add(new JLabel(""String_Node_Str""));
  hudpanel.add(hud);
  viewmodelfovpanel.add(new JLabel(""String_Node_Str""));
  viewmodelfovpanel.add(viewmodelfov);
  savedeletepanel.add(save);
  savedeletepanel.add(deletemovies);
  tickpanel.add(new JLabel(""String_Node_Str""));
  tickpanel.add(tick1);
  tickpanel.add(new JLabel(""String_Node_Str""));
  tickpanel.add(new JLabel(""String_Node_Str""));
  tickpanel.add(tick2);
  tickpanel.add(new JLabel(""String_Node_Str""));
  tickpanel.add(addticks);
  demopanel.add(new JLabel(""String_Node_Str""));
  demopanel.add(selecteddemo);
  demopanel.add(browsedemos);
  createvdmpanel.add(clearticks);
  createvdmpanel.add(createvdm);
  createvdmpanel.add(clearvdm);
  viewmodelswitchpanel.add(new JLabel(""String_Node_Str""));
  viewmodelswitchpanel.add(viewmodelswitch);
  dxlevelpanel.add(new JLabel(""String_Node_Str""));
  dxlevelpanel.add(dxlevel);
  skyboxpanel.add(new JLabel(""String_Node_Str""));
  skyboxpanel.add(skybox);
  skyboxpanel.add(skyboxpreview);
  settingspanel.add(respanel);
  settingspanel.add(respanel2);
  settingspanel.add(fpspanel);
  settingspanel.add(fpspanel2);
  settingspanel.add(dxlevelpanel);
  settingspanel.add(hudpanel);
  settingspanel.add(viewmodelfovpanel);
  settingspanel.add(skyboxpanel);
  settingspanel.add(motionblur);
  settingspanel.add(viewmodelswitchpanel);
  settingspanel.add(crosshairswitch);
  settingspanel.add(crosshair);
  settingspanel.add(combattext);
  settingspanel.add(announcer);
  settingspanel.add(domination);
  settingspanel.add(hitsounds);
  settingspanel.add(voice);
  settingspanel.add(steamcloud);
  settingspanel.add(savedeletepanel);
  settingspanel.add(start);
  vdmpanel.add(demopanel);
  vdmpanel.add(tickpanel);
  vdmpanel.add(createvdmpanel);
  vdmpanel.add(ticksscrollpane);
  tabbedpane.addTab(""String_Node_Str"",settingspanel);
  tabbedpane.addTab(""String_Node_Str"",vdmpanel);
  add(tabbedpane);
  setTitle(""String_Node_Str"" + version);
  try {
    setIconImage(new ImageIcon(LwrtGUI.class.getClassLoader().getResource(""String_Node_Str"")).getImage());
  }
 catch (  Exception e) {
    log.info(""String_Node_Str"" + e);
  }
  pack();
  Dimension dim=Toolkit.getDefaultToolkit().getScreenSize();
  setSize(dim.width / 2,dim.height / 2);
  int w=getSize().width;
  int h=getSize().height;
  int x=(dim.width - w) / 2;
  int y=(dim.height - h) / 2;
  setLocation(x,y);
  setResizable(false);
}",0.9931752016417696
161955,"public static void main(String[] args) throws Exception {
  SimpleLog sl=new SimpleLog(""String_Node_Str"");
  sl.startLoggingToConsole();
  try {
    UIManager.setLookAndFeel(UIManager.getSystemLookAndFeelClassName());
  }
 catch (  Exception e) {
    log.warning(""String_Node_Str"" + e);
    System.exit(1);
  }
  SwingUtilities.invokeAndWait(new Runnable(){
    public void run(){
      LwrtGUI frame=new LwrtGUI();
      try {
        frame.init();
        Thread.sleep(1000);
      }
 catch (      Exception e) {
        log.warning(""String_Node_Str"" + e);
      }
      frame.setVisible(true);
    }
  }
);
}","public static void main(String[] args) throws Exception {
  SimpleLog sl=new SimpleLog(""String_Node_Str"");
  sl.startLoggingToConsole();
  try {
    UIManager.setLookAndFeel(UIManager.getSystemLookAndFeelClassName());
  }
 catch (  Exception e) {
    log.warning(""String_Node_Str"" + e);
    System.exit(1);
  }
  Thread.setDefaultUncaughtExceptionHandler(new Thread.UncaughtExceptionHandler(){
    public void uncaughtException(    Thread t,    final Throwable e){
      e.printStackTrace();
    }
  }
);
  SwingUtilities.invokeAndWait(new Runnable(){
    public void run(){
      LwrtGUI frame=new LwrtGUI();
      try {
        frame.init();
        Thread.sleep(1000);
      }
 catch (      Exception e) {
        log.warning(""String_Node_Str"" + e);
      }
      frame.setVisible(true);
    }
  }
);
}",0.8629943502824858
161956,"public void actionPerformed(ActionEvent e){
  if (e.getSource() == resolution) {
    height.setEditable(resolution.getSelectedIndex() == 4);
    width.setEditable(resolution.getSelectedIndex() == 4);
    return;
  }
  if (e.getSource() == framerate) {
    fps.setEditable(framerate.getSelectedIndex() == 7);
    return;
  }
  if (e.getSource() == deletemovies) {
    FilenameFilter filter=new FilenameFilter(){
      public boolean accept(      File dir,      String name){
        return name.endsWith(""String_Node_Str"") || name.endsWith(""String_Node_Str"");
      }
    }
;
    String[] moviefiles=new File(moviedir).list(filter);
    for (int i=0; i < moviefiles.length; ++i) {
      File tgafile=new File(moviedir + ""String_Node_Str"" + moviefiles[i]);
      tgafile.setWritable(true);
      if (!tgafile.delete())       throw new IllegalArgumentException(""String_Node_Str"" + moviefiles[i] + ""String_Node_Str"");
    }
  }
  if (e.getSource() == save) {
    setSettings();
    try {
      settings.save();
      settings.saveToCfg();
    }
 catch (    Exception e1) {
      log.warning(""String_Node_Str"" + e1);
    }
  }
  if (e.getSource() == browsedemos) {
    int returnVal=choosedemo.showOpenDialog(this);
    if (returnVal == JFileChooser.APPROVE_OPTION) {
      currentdemo=choosedemo.getSelectedFile().getName();
      selecteddemo.setText(currentdemo);
    }
  }
  if (e.getSource() == addticks) {
    if (!Files.exists(Paths.get(tfdir,selecteddemo.getText()))) {
      JOptionPane.showMessageDialog(this,""String_Node_Str"",""String_Node_Str"",JOptionPane.ERROR_MESSAGE);
      return;
    }
 else     currentdemo=selecteddemo.getText();
    if (!checkIfNumber(tick1.getText()) || !checkIfNumber(tick2.getText()) || Integer.parseInt(tick1.getText()) >= Integer.parseInt(tick2.getText())) {
      JOptionPane.showMessageDialog(this,""String_Node_Str"",""String_Node_Str"",JOptionPane.ERROR_MESSAGE);
      return;
    }
    Object[] row={currentdemo,tick1.getText(),tick2.getText()};
    model.insertRow(ticks.getRowCount(),row);
  }
  if (e.getSource() == createvdm) {
    ticklist=generateTickList(0);
    vdmgenerator=new VDMGenerator(ticklist,tfdir);
    try {
      vdmgenerator.generate();
    }
 catch (    IOException e1) {
      log.warning(""String_Node_Str"" + e1);
    }
  }
  if (e.getSource() == clearticks) {
    while (model.getRowCount() > 0) {
      model.removeRow(0);
    }
  }
  if (e.getSource() == clearvdm) {
    FilenameFilter filter=new FilenameFilter(){
      public boolean accept(      File dir,      String name){
        return name.endsWith(""String_Node_Str"");
      }
    }
;
    String[] vdmfiles=new File(tfdir).list(filter);
    System.gc();
    for (int i=0; i < vdmfiles.length; ++i) {
      File vdmfile=new File(tfdir + ""String_Node_Str"" + vdmfiles[i]);
      if (!vdmfile.delete())       throw new IllegalArgumentException(""String_Node_Str"" + vdmfiles[i] + ""String_Node_Str"");
    }
  }
  if (e.getSource() == skyboxpreview) {
    if (previewwindow != null && previewwindow.isShowing())     previewwindow.destroy();
    if (skybox.getSelectedIndex() == 0)     return;
    previewwindow=new PreviewWindow(""String_Node_Str"" + (String)skybox.getSelectedItem() + ""String_Node_Str"");
    previewwindow.show();
  }
  if (e.getSource() == start) {
    if (!setSettings())     return;
    try {
      settings.saveToCfg();
    }
 catch (    Exception e1) {
      log.warning(""String_Node_Str"" + e1);
    }
    setEnabled(false);
    setTitle(""String_Node_Str"");
    try {
      movies.createMovienameCfgs();
      movies.movieOffset();
    }
 catch (    IOException e1) {
      log.warning(""String_Node_Str"" + e1);
    }
    files.setReplaceVo(!settings.getAnnouncer());
    if (skybox.getSelectedIndex() != 0) {
      files.setSkyboxFilename((String)skybox.getSelectedItem());
    }
    files.setReplaceAnnouncer(!settings.getAnnouncer());
    files.setReplaceDomination(!settings.getDomination());
    files.setHudName(settings.getHud());
    files.replaceAll();
    setTitle(""String_Node_Str"");
    cl.startTf(settings.getWidth(),settings.getHeight(),steampath,settings.getDxlevel());
    int timeout=0;
    while (!cl.isRunning(""String_Node_Str"") && timeout < 40) {
      try {
        Thread.sleep(3000);
        ++timeout;
      }
 catch (      Exception e1) {
        log.warning(""String_Node_Str"" + e1);
      }
    }
    setTitle(""String_Node_Str"");
    while (cl.isRunning(""String_Node_Str"")) {
      try {
        Thread.sleep(3000);
      }
 catch (      Exception e1) {
        log.warning(""String_Node_Str"" + e1);
      }
    }
    setTitle(""String_Node_Str"");
    files.restoreAll();
    cl.regedit(""String_Node_Str"",""String_Node_Str"",oDxlevel);
    setEnabled(true);
    setTitle(""String_Node_Str"" + version);
  }
}","public void actionPerformed(ActionEvent e){
  if (e.getSource() == resolution) {
    height.setEditable(resolution.getSelectedIndex() == 4);
    width.setEditable(resolution.getSelectedIndex() == 4);
    return;
  }
  if (e.getSource() == framerate) {
    fps.setEditable(framerate.getSelectedIndex() == 7);
    return;
  }
  if (e.getSource() == deletemovies) {
    FilenameFilter filter=new FilenameFilter(){
      public boolean accept(      File dir,      String name){
        return name.endsWith(""String_Node_Str"") || name.endsWith(""String_Node_Str"");
      }
    }
;
    String[] moviefiles=new File(moviedir).list(filter);
    for (int i=0; i < moviefiles.length; ++i) {
      File tgafile=new File(moviedir + ""String_Node_Str"" + moviefiles[i]);
      tgafile.setWritable(true);
      if (!tgafile.delete())       throw new IllegalArgumentException(""String_Node_Str"" + moviefiles[i] + ""String_Node_Str"");
    }
  }
  if (e.getSource() == save) {
    setSettings();
    try {
      settings.save();
      settings.saveToCfg();
    }
 catch (    Exception e1) {
      log.warning(""String_Node_Str"" + e1);
    }
  }
  if (e.getSource() == browsedemos) {
    int returnVal=choosedemo.showOpenDialog(this);
    if (returnVal == JFileChooser.APPROVE_OPTION) {
      currentdemo=choosedemo.getSelectedFile().getName();
      selecteddemo.setText(currentdemo);
    }
  }
  if (e.getSource() == addticks) {
    if (!Files.exists(Paths.get(tfdir,selecteddemo.getText()))) {
      JOptionPane.showMessageDialog(this,""String_Node_Str"",""String_Node_Str"",JOptionPane.ERROR_MESSAGE);
      return;
    }
 else     currentdemo=selecteddemo.getText();
    if (!checkIfNumber(tick1.getText()) || !checkIfNumber(tick2.getText()) || Integer.parseInt(tick1.getText()) >= Integer.parseInt(tick2.getText())) {
      JOptionPane.showMessageDialog(this,""String_Node_Str"",""String_Node_Str"",JOptionPane.ERROR_MESSAGE);
      return;
    }
    Object[] row={currentdemo,tick1.getText(),tick2.getText()};
    model.insertRow(ticks.getRowCount(),row);
  }
  if (e.getSource() == createvdm) {
    ticklist=generateTickList(0);
    vdmgenerator=new VDMGenerator(ticklist,tfdir);
    try {
      vdmgenerator.generate();
    }
 catch (    IOException e1) {
      log.warning(""String_Node_Str"" + e1);
    }
  }
  if (e.getSource() == clearticks) {
    while (model.getRowCount() > 0) {
      model.removeRow(0);
    }
  }
  if (e.getSource() == clearvdm) {
    FilenameFilter filter=new FilenameFilter(){
      public boolean accept(      File dir,      String name){
        return name.endsWith(""String_Node_Str"");
      }
    }
;
    String[] vdmfiles=new File(tfdir).list(filter);
    System.gc();
    for (int i=0; i < vdmfiles.length; ++i) {
      File vdmfile=new File(tfdir + ""String_Node_Str"" + vdmfiles[i]);
      if (!vdmfile.delete())       throw new IllegalArgumentException(""String_Node_Str"" + vdmfiles[i] + ""String_Node_Str"");
    }
  }
  if (e.getSource() == skyboxpreview) {
    if (previewwindow != null && previewwindow.isShowing())     previewwindow.destroy();
    if (skybox.getSelectedIndex() == 0)     return;
    previewwindow=new PreviewWindow(""String_Node_Str"" + (String)skybox.getSelectedItem() + ""String_Node_Str"");
    previewwindow.show();
  }
  if (e.getSource() == start) {
    files.restoreAll();
    if (!setSettings())     return;
    try {
      settings.saveToCfg();
    }
 catch (    Exception e1) {
      log.warning(""String_Node_Str"" + e1);
    }
    setEnabled(false);
    setTitle(""String_Node_Str"");
    try {
      movies.createMovienameCfgs();
      movies.movieOffset();
    }
 catch (    IOException e1) {
      log.warning(""String_Node_Str"" + e1);
    }
    files.setReplaceVo(!settings.getAnnouncer());
    if (skybox.getSelectedIndex() != 0) {
      files.setSkyboxFilename((String)skybox.getSelectedItem());
    }
    files.setReplaceAnnouncer(!settings.getAnnouncer());
    files.setReplaceDomination(!settings.getDomination());
    files.setHudName(settings.getHud());
    files.replaceAll();
    setTitle(""String_Node_Str"");
    cl.startTf(settings.getWidth(),settings.getHeight(),steampath,settings.getDxlevel());
    int timeout=0;
    while (!cl.isRunning(""String_Node_Str"") && timeout < 40) {
      try {
        Thread.sleep(3000);
        ++timeout;
      }
 catch (      Exception e1) {
        log.warning(""String_Node_Str"" + e1);
      }
    }
    setTitle(""String_Node_Str"");
    while (cl.isRunning(""String_Node_Str"")) {
      try {
        Thread.sleep(3000);
      }
 catch (      Exception e1) {
        log.warning(""String_Node_Str"" + e1);
      }
    }
    setTitle(""String_Node_Str"");
    files.restoreAll();
    cl.regedit(""String_Node_Str"",""String_Node_Str"",oDxlevel);
    setEnabled(true);
    setTitle(""String_Node_Str"" + version);
  }
}",0.9974869109947644
161957,"public void show(){
  frame=new JFrame(""String_Node_Str"");
  frame.add(this);
  frame.addWindowListener(new PreviewWindowListener());
  frame.setSize(500,500);
  frame.setVisible(true);
  Dimension dim=Toolkit.getDefaultToolkit().getScreenSize();
  int x=(dim.width - 500) / 2;
  int y=(dim.height - 500) / 2;
  frame.setLocation(x - 300,y);
  frame.setResizable(false);
}","public void show(){
  frame=new JFrame(""String_Node_Str"");
  frame.add(this);
  frame.addWindowListener(new WindowAdapter(){
    @Override public void windowClosing(    WindowEvent e){
      JFrame frame=(JFrame)(e.getWindow());
      frame.dispose();
    }
  }
);
  frame.setSize(500,500);
  frame.setVisible(true);
  Dimension dim=Toolkit.getDefaultToolkit().getScreenSize();
  int x=(dim.width - 500) / 2;
  int y=(dim.height - 500) / 2;
  frame.setLocation(x - 300,y);
  frame.setResizable(false);
}",0.8137142857142857
161958,"public String modelToString(){
  Map<String,Object> topDict=new HashMap<String,Object>();
  if (backgroundColor != null)   topDict.put(""String_Node_Str"",DocumentModel.RGBAArrayFromColor(backgroundColor));
  if (pdFile != null)   topDict.put(""String_Node_Str"",pdFile);
  if (canvasType == CanvasType.canvasTypeIPhone3p5Inch)   topDict.put(""String_Node_Str"",""String_Node_Str"");
 else   if (canvasType == CanvasType.canvasTypeIPhone4Inch)   topDict.put(""String_Node_Str"",""String_Node_Str"");
 else   if (canvasType == CanvasType.canvasTypeIPad)   topDict.put(""String_Node_Str"",""String_Node_Str"");
 else   if (canvasType == CanvasType.canvasTypeAndroid7Inch)   topDict.put(""String_Node_Str"",""String_Node_Str"");
  topDict.put(""String_Node_Str"",new Boolean(isOrientationLandscape));
  topDict.put(""String_Node_Str"",new Boolean(isPageScrollShortEnd));
  topDict.put(""String_Node_Str"",new Integer(pageCount));
  topDict.put(""String_Node_Str"",new Integer(startPageIndex));
  topDict.put(""String_Node_Str"",new Integer(port));
  topDict.put(""String_Node_Str"",new Float(VERSION));
  ArrayList<Map<String,Object>> jsonControlDictArray=new ArrayList<Map<String,Object>>();
  for (  MMPControl control : controlArray) {
    Map<String,Object> GUIDict=new HashMap<String,Object>();
    String[] classNameSplit=control.getClass().getName().split(""String_Node_Str"");
    GUIDict.put(""String_Node_Str"",classNameSplit[classNameSplit.length - 1]);
    ArrayList<Float> frameArray=new ArrayList<Float>();
    frameArray.add(new Float(control.getX()));
    frameArray.add(new Float(control.getY()));
    frameArray.add(new Float(control.getWidth()));
    frameArray.add(new Float(control.getHeight()));
    GUIDict.put(""String_Node_Str"",frameArray);
    GUIDict.put(""String_Node_Str"",DocumentModel.RGBAArrayFromColor(control.color));
    GUIDict.put(""String_Node_Str"",DocumentModel.RGBAArrayFromColor(control.highlightColor));
    GUIDict.put(""String_Node_Str"",control.getAddress());
    if (control instanceof MMPSlider) {
      MMPSlider currSlider=(MMPSlider)control;
      GUIDict.put(""String_Node_Str"",new Integer(currSlider.range));
      GUIDict.put(""String_Node_Str"",new Boolean(currSlider.isHorizontal));
    }
 else     if (control instanceof MMPKnob) {
      MMPKnob currKnob=(MMPKnob)control;
      GUIDict.put(""String_Node_Str"",new Integer(currKnob.range));
      GUIDict.put(""String_Node_Str"",DocumentModel.RGBAArrayFromColor(currKnob.indicatorColor));
    }
 else     if (control instanceof MMPLabel) {
      MMPLabel currLabel=(MMPLabel)control;
      GUIDict.put(""String_Node_Str"",new String(currLabel.stringValue));
      GUIDict.put(""String_Node_Str"",new Integer(currLabel.textSize));
      GUIDict.put(""String_Node_Str"",new String(currLabel.fontFamily));
      GUIDict.put(""String_Node_Str"",new String(currLabel.fontName));
      GUIDict.put(""String_Node_Str"",new String(currLabel.androidFontName));
    }
 else     if (control instanceof MMPGrid) {
      MMPGrid currGrid=(MMPGrid)control;
      ArrayList<Integer> dim=new ArrayList<Integer>();
      dim.add(new Integer(currGrid.dimX));
      dim.add(new Integer(currGrid.dimY));
      GUIDict.put(""String_Node_Str"",dim);
      GUIDict.put(""String_Node_Str"",new Integer(currGrid.cellPadding));
      GUIDict.put(""String_Node_Str"",new Integer(currGrid.borderThickness));
      GUIDict.put(""String_Node_Str"",new Integer(currGrid.getMode()));
    }
 else     if (control instanceof MMPPanel) {
      MMPPanel currPanel=(MMPPanel)control;
      if (currPanel.imagePath != null)       GUIDict.put(""String_Node_Str"",new String(currPanel.imagePath));
      GUIDict.put(""String_Node_Str"",new Boolean(currPanel.shouldPassTouches));
    }
 else     if (control instanceof MMPMultiSlider) {
      MMPMultiSlider currMultiSlider=(MMPMultiSlider)control;
      GUIDict.put(""String_Node_Str"",new Integer(currMultiSlider.range));
    }
 else     if (control instanceof MMPToggle) {
      MMPToggle currToggle=(MMPToggle)control;
      GUIDict.put(""String_Node_Str"",new Integer(currToggle.borderThickness));
    }
 else     if (control instanceof MMPMenu) {
      MMPMenu currMenu=(MMPMenu)control;
      GUIDict.put(""String_Node_Str"",new String(currMenu.titleString));
    }
 else     if (control instanceof MMPTable) {
      MMPTable currTable=(MMPTable)control;
      GUIDict.put(""String_Node_Str"",new Integer(currTable.getMode()));
      GUIDict.put(""String_Node_Str"",DocumentModel.RGBAArrayFromColor(currTable.getSelectionColor()));
    }
 else     if (control instanceof MMPUnknown) {
      GUIDict=((MMPUnknown)control).badGUIDict;
      ArrayList<Float> frameArray2=new ArrayList<Float>();
      frameArray2.add(new Float(control.getX()));
      frameArray2.add(new Float(control.getY()));
      frameArray2.add(new Float(control.getWidth()));
      frameArray2.add(new Float(control.getHeight()));
      GUIDict.put(""String_Node_Str"",frameArray2);
    }
    jsonControlDictArray.add(GUIDict);
  }
  topDict.put(""String_Node_Str"",jsonControlDictArray);
  return gson.toJson(topDict,Map.class);
}","public String modelToString(){
  Map<String,Object> topDict=new HashMap<String,Object>();
  if (backgroundColor != null)   topDict.put(""String_Node_Str"",DocumentModel.RGBAArrayFromColor(backgroundColor));
  if (pdFile != null)   topDict.put(""String_Node_Str"",pdFile);
  if (canvasType == CanvasType.canvasTypeIPhone3p5Inch)   topDict.put(""String_Node_Str"",""String_Node_Str"");
 else   if (canvasType == CanvasType.canvasTypeIPhone4Inch)   topDict.put(""String_Node_Str"",""String_Node_Str"");
 else   if (canvasType == CanvasType.canvasTypeIPad)   topDict.put(""String_Node_Str"",""String_Node_Str"");
 else   if (canvasType == CanvasType.canvasTypeAndroid7Inch)   topDict.put(""String_Node_Str"",""String_Node_Str"");
  topDict.put(""String_Node_Str"",new Boolean(isOrientationLandscape));
  topDict.put(""String_Node_Str"",new Boolean(isPageScrollShortEnd));
  topDict.put(""String_Node_Str"",new Integer(pageCount));
  topDict.put(""String_Node_Str"",new Integer(startPageIndex));
  topDict.put(""String_Node_Str"",new Integer(port));
  topDict.put(""String_Node_Str"",new Float(VERSION));
  ArrayList<Map<String,Object>> jsonControlDictArray=new ArrayList<Map<String,Object>>();
  for (  MMPControl control : controlArray) {
    Map<String,Object> GUIDict=new HashMap<String,Object>();
    String[] classNameSplit=control.getClass().getName().split(""String_Node_Str"");
    GUIDict.put(""String_Node_Str"",classNameSplit[classNameSplit.length - 1]);
    ArrayList<Float> frameArray=new ArrayList<Float>();
    frameArray.add(new Float(control.getX()));
    frameArray.add(new Float(control.getY()));
    frameArray.add(new Float(control.getWidth()));
    frameArray.add(new Float(control.getHeight()));
    GUIDict.put(""String_Node_Str"",frameArray);
    GUIDict.put(""String_Node_Str"",DocumentModel.RGBAArrayFromColor(control.color));
    GUIDict.put(""String_Node_Str"",DocumentModel.RGBAArrayFromColor(control.highlightColor));
    GUIDict.put(""String_Node_Str"",control.getAddress());
    if (control instanceof MMPSlider) {
      MMPSlider currSlider=(MMPSlider)control;
      GUIDict.put(""String_Node_Str"",new Integer(currSlider.range));
      GUIDict.put(""String_Node_Str"",new Boolean(currSlider.isHorizontal));
    }
 else     if (control instanceof MMPKnob) {
      MMPKnob currKnob=(MMPKnob)control;
      GUIDict.put(""String_Node_Str"",new Integer(currKnob.range));
      GUIDict.put(""String_Node_Str"",DocumentModel.RGBAArrayFromColor(currKnob.indicatorColor));
    }
 else     if (control instanceof MMPLabel) {
      MMPLabel currLabel=(MMPLabel)control;
      GUIDict.put(""String_Node_Str"",new String(currLabel.stringValue));
      GUIDict.put(""String_Node_Str"",new Integer(currLabel.textSize));
      GUIDict.put(""String_Node_Str"",new String(currLabel.fontFamily));
      GUIDict.put(""String_Node_Str"",new String(currLabel.fontName));
      GUIDict.put(""String_Node_Str"",new String(currLabel.androidFontFileName));
    }
 else     if (control instanceof MMPGrid) {
      MMPGrid currGrid=(MMPGrid)control;
      ArrayList<Integer> dim=new ArrayList<Integer>();
      dim.add(new Integer(currGrid.dimX));
      dim.add(new Integer(currGrid.dimY));
      GUIDict.put(""String_Node_Str"",dim);
      GUIDict.put(""String_Node_Str"",new Integer(currGrid.cellPadding));
      GUIDict.put(""String_Node_Str"",new Integer(currGrid.borderThickness));
      GUIDict.put(""String_Node_Str"",new Integer(currGrid.getMode()));
    }
 else     if (control instanceof MMPPanel) {
      MMPPanel currPanel=(MMPPanel)control;
      if (currPanel.imagePath != null)       GUIDict.put(""String_Node_Str"",new String(currPanel.imagePath));
      GUIDict.put(""String_Node_Str"",new Boolean(currPanel.shouldPassTouches));
    }
 else     if (control instanceof MMPMultiSlider) {
      MMPMultiSlider currMultiSlider=(MMPMultiSlider)control;
      GUIDict.put(""String_Node_Str"",new Integer(currMultiSlider.range));
    }
 else     if (control instanceof MMPToggle) {
      MMPToggle currToggle=(MMPToggle)control;
      GUIDict.put(""String_Node_Str"",new Integer(currToggle.borderThickness));
    }
 else     if (control instanceof MMPMenu) {
      MMPMenu currMenu=(MMPMenu)control;
      GUIDict.put(""String_Node_Str"",new String(currMenu.titleString));
    }
 else     if (control instanceof MMPTable) {
      MMPTable currTable=(MMPTable)control;
      GUIDict.put(""String_Node_Str"",new Integer(currTable.getMode()));
      GUIDict.put(""String_Node_Str"",DocumentModel.RGBAArrayFromColor(currTable.getSelectionColor()));
    }
 else     if (control instanceof MMPUnknown) {
      GUIDict=((MMPUnknown)control).badGUIDict;
      ArrayList<Float> frameArray2=new ArrayList<Float>();
      frameArray2.add(new Float(control.getX()));
      frameArray2.add(new Float(control.getY()));
      frameArray2.add(new Float(control.getWidth()));
      frameArray2.add(new Float(control.getHeight()));
      GUIDict.put(""String_Node_Str"",frameArray2);
    }
    jsonControlDictArray.add(GUIDict);
  }
  topDict.put(""String_Node_Str"",jsonControlDictArray);
  return gson.toJson(topDict,Map.class);
}",0.9996029382568988
161959,"static DocumentModel modelFromString(String inString){
  DocumentModel model=new DocumentModel();
  JsonParser parser=new JsonParser();
  JsonObject topDict=parser.parse(inString).getAsJsonObject();
  if (topDict.getAsJsonArray(""String_Node_Str"") != null) {
    JsonArray colorArray=topDict.getAsJsonArray(""String_Node_Str"");
    if (colorArray.size() == 4)     model.backgroundColor=DocumentModel.colorFromRGBAArray(colorArray);
 else     if (colorArray.size() == 3)     model.backgroundColor=DocumentModel.colorFromRGBArray(colorArray);
  }
  if (topDict.get(""String_Node_Str"") != null)   model.pdFile=topDict.get(""String_Node_Str"").getAsString();
  if (topDict.get(""String_Node_Str"") != null) {
    if ((topDict.get(""String_Node_Str"").getAsString()).equals(""String_Node_Str""))     model.canvasType=CanvasType.canvasTypeIPhone3p5Inch;
    if ((topDict.get(""String_Node_Str"").getAsString()).equals(""String_Node_Str""))     model.canvasType=CanvasType.canvasTypeIPhone4Inch;
    if ((topDict.get(""String_Node_Str"").getAsString()).equals(""String_Node_Str""))     model.canvasType=CanvasType.canvasTypeIPad;
    if ((topDict.get(""String_Node_Str"").getAsString()).equals(""String_Node_Str""))     model.canvasType=CanvasType.canvasTypeAndroid7Inch;
  }
  if (topDict.get(""String_Node_Str"") != null)   model.isOrientationLandscape=topDict.get(""String_Node_Str"").getAsBoolean();
  if (topDict.get(""String_Node_Str"") != null)   model.isPageScrollShortEnd=topDict.get(""String_Node_Str"").getAsBoolean();
  if (topDict.get(""String_Node_Str"") != null)   model.pageCount=topDict.get(""String_Node_Str"").getAsInt();
  if (topDict.get(""String_Node_Str"") != null)   model.startPageIndex=topDict.get(""String_Node_Str"").getAsInt();
  if (topDict.get(""String_Node_Str"") != null)   model.port=topDict.get(""String_Node_Str"").getAsInt();
  if (topDict.get(""String_Node_Str"") != null)   model.version=topDict.get(""String_Node_Str"").getAsFloat();
  JsonArray controlDictArray;
  if (topDict.get(""String_Node_Str"") != null) {
    controlDictArray=topDict.get(""String_Node_Str"").getAsJsonArray();
    for (int i=0; i < controlDictArray.size(); i++) {
      JsonObject guiDict=controlDictArray.get(i).getAsJsonObject();
      MMPControl control;
      if (guiDict.get(""String_Node_Str"") == null)       continue;
      String classString=guiDict.get(""String_Node_Str"").getAsString();
      Rectangle newFrame=new Rectangle(0,0,100,100);
      if (guiDict.get(""String_Node_Str"") != null) {
        JsonArray frameRectArray=guiDict.getAsJsonArray(""String_Node_Str"");
        newFrame=new Rectangle((int)frameRectArray.get(0).getAsFloat(),(int)frameRectArray.get(1).getAsFloat(),(int)frameRectArray.get(2).getAsFloat(),(int)frameRectArray.get(3).getAsFloat());
      }
      Color color=new Color(1f,1f,1f,1f);
      if (guiDict.getAsJsonArray(""String_Node_Str"") != null) {
        JsonArray colorArray=guiDict.getAsJsonArray(""String_Node_Str"");
        if (colorArray.size() == 4)         color=DocumentModel.colorFromRGBAArray(colorArray);
 else         if (colorArray.size() == 3)         color=DocumentModel.colorFromRGBArray(colorArray);
      }
      Color highlightColor=Color.RED;
      if (guiDict.getAsJsonArray(""String_Node_Str"") != null) {
        JsonArray highlightColorArray=guiDict.getAsJsonArray(""String_Node_Str"");
        if (highlightColorArray.size() == 4)         highlightColor=DocumentModel.colorFromRGBAArray(highlightColorArray);
 else         if (highlightColorArray.size() == 3)         highlightColor=DocumentModel.colorFromRGBArray(highlightColorArray);
      }
      if (classString.equals(""String_Node_Str"")) {
        control=new MMPSlider(newFrame);
        if (guiDict.get(""String_Node_Str"") != null)         ((MMPSlider)control).setIsHorizontal(guiDict.get(""String_Node_Str"").getAsBoolean());
        if (guiDict.get(""String_Node_Str"") != null)         ((MMPSlider)control).setRange(guiDict.get(""String_Node_Str"").getAsInt());
      }
 else       if (classString.equals(""String_Node_Str"")) {
        control=new MMPKnob(newFrame);
        Color indicatorColor=Color.WHITE;
        if (guiDict.get(""String_Node_Str"") != null) {
          indicatorColor=DocumentModel.colorFromRGBAArray(guiDict.get(""String_Node_Str"").getAsJsonArray());
          ((MMPKnob)control).setIndicatorColor(indicatorColor);
        }
        if (guiDict.get(""String_Node_Str"") != null)         ((MMPKnob)control).setRange(guiDict.get(""String_Node_Str"").getAsInt());
      }
 else       if (classString.equals(""String_Node_Str"")) {
        control=new MMPButton(newFrame);
      }
 else       if (classString.equals(""String_Node_Str"")) {
        control=new MMPToggle(newFrame);
        if (guiDict.get(""String_Node_Str"") != null)         ((MMPToggle)control).setBorderThickness(guiDict.get(""String_Node_Str"").getAsInt());
      }
 else       if (classString.equals(""String_Node_Str"")) {
        control=new MMPLabel(newFrame);
        if (guiDict.get(""String_Node_Str"") != null)         ((MMPLabel)control).setStringValue(guiDict.get(""String_Node_Str"").getAsString());
        if (guiDict.get(""String_Node_Str"") != null)         ((MMPLabel)control).setTextSize(guiDict.get(""String_Node_Str"").getAsInt());
        if (guiDict.get(""String_Node_Str"") != null && guiDict.get(""String_Node_Str"") != null)         ((MMPLabel)control).setFontFamilyAndName(guiDict.get(""String_Node_Str"").getAsString(),guiDict.get(""String_Node_Str"").getAsString());
        if (guiDict.get(""String_Node_Str"") != null)         ((MMPLabel)control).setAndroidFontName(guiDict.get(""String_Node_Str"").getAsString());
      }
 else       if (classString.equals(""String_Node_Str"")) {
        control=new MMPXYSlider(newFrame);
      }
 else       if (classString.equals(""String_Node_Str"")) {
        control=new MMPGrid(newFrame);
        if (guiDict.get(""String_Node_Str"") != null) {
          JsonArray dim=guiDict.get(""String_Node_Str"").getAsJsonArray();
          ((MMPGrid)control).setDimX(dim.get(0).getAsInt());
          ((MMPGrid)control).setDimY(dim.get(1).getAsInt());
        }
        if (guiDict.get(""String_Node_Str"") != null)         ((MMPGrid)control).setBorderThickness(guiDict.get(""String_Node_Str"").getAsInt());
        if (guiDict.get(""String_Node_Str"") != null)         ((MMPGrid)control).setCellPadding(guiDict.get(""String_Node_Str"").getAsInt());
        if (guiDict.get(""String_Node_Str"") != null) {
          ((MMPGrid)control).setMode(guiDict.get(""String_Node_Str"").getAsInt());
        }
      }
 else       if (classString.equals(""String_Node_Str"")) {
        control=new MMPPanel(newFrame);
        if (guiDict.get(""String_Node_Str"") != null)         ((MMPPanel)control).setImagePath(guiDict.get(""String_Node_Str"").getAsString());
        if (guiDict.get(""String_Node_Str"") != null)         ((MMPPanel)control).shouldPassTouches=(guiDict.get(""String_Node_Str"").getAsBoolean());
      }
 else       if (classString.equals(""String_Node_Str"")) {
        control=new MMPMultiSlider(newFrame);
        if (guiDict.get(""String_Node_Str"") != null)         ((MMPMultiSlider)control).setRange(guiDict.get(""String_Node_Str"").getAsInt());
      }
 else       if (classString.equals(""String_Node_Str"")) {
        control=new MMPLCD(newFrame);
      }
 else       if (classString.equals(""String_Node_Str"")) {
        control=new MMPMultiTouch(newFrame);
      }
 else       if (classString.equals(""String_Node_Str"")) {
        control=new MMPMenu(newFrame);
        if (guiDict.get(""String_Node_Str"") != null)         ((MMPMenu)control).setTitleString(guiDict.get(""String_Node_Str"").getAsString());
      }
 else       if (classString.equals(""String_Node_Str"")) {
        control=new MMPTable(newFrame);
        if (guiDict.get(""String_Node_Str"") != null)         ((MMPTable)control).setMode(guiDict.get(""String_Node_Str"").getAsInt());
        if (guiDict.get(""String_Node_Str"") != null) {
          Color selectionColor=DocumentModel.colorFromRGBAArray(guiDict.get(""String_Node_Str"").getAsJsonArray());
          ((MMPTable)control).setSelectionColor(selectionColor);
        }
      }
 else {
        control=new MMPUnknown(newFrame);
        ((MMPUnknown)control).setBadName(classString);
        Type collectionType=new TypeToken<Map<String,Object>>(){
        }
.getType();
        ((MMPUnknown)control).badGUIDict=gson.fromJson(guiDict,collectionType);
      }
      control.setColor(color);
      control.setHighlightColor(highlightColor);
      if (guiDict.get(""String_Node_Str"") != null) {
        control.setAddress(guiDict.get(""String_Node_Str"").getAsString());
        model.controlArray.add(control);
      }
    }
  }
  return model;
}","static DocumentModel modelFromString(String inString){
  DocumentModel model=new DocumentModel();
  JsonParser parser=new JsonParser();
  JsonObject topDict=parser.parse(inString).getAsJsonObject();
  if (topDict.getAsJsonArray(""String_Node_Str"") != null) {
    JsonArray colorArray=topDict.getAsJsonArray(""String_Node_Str"");
    if (colorArray.size() == 4)     model.backgroundColor=DocumentModel.colorFromRGBAArray(colorArray);
 else     if (colorArray.size() == 3)     model.backgroundColor=DocumentModel.colorFromRGBArray(colorArray);
  }
  if (topDict.get(""String_Node_Str"") != null)   model.pdFile=topDict.get(""String_Node_Str"").getAsString();
  if (topDict.get(""String_Node_Str"") != null) {
    if ((topDict.get(""String_Node_Str"").getAsString()).equals(""String_Node_Str""))     model.canvasType=CanvasType.canvasTypeIPhone3p5Inch;
    if ((topDict.get(""String_Node_Str"").getAsString()).equals(""String_Node_Str""))     model.canvasType=CanvasType.canvasTypeIPhone4Inch;
    if ((topDict.get(""String_Node_Str"").getAsString()).equals(""String_Node_Str""))     model.canvasType=CanvasType.canvasTypeIPad;
    if ((topDict.get(""String_Node_Str"").getAsString()).equals(""String_Node_Str""))     model.canvasType=CanvasType.canvasTypeAndroid7Inch;
  }
  if (topDict.get(""String_Node_Str"") != null)   model.isOrientationLandscape=topDict.get(""String_Node_Str"").getAsBoolean();
  if (topDict.get(""String_Node_Str"") != null)   model.isPageScrollShortEnd=topDict.get(""String_Node_Str"").getAsBoolean();
  if (topDict.get(""String_Node_Str"") != null)   model.pageCount=topDict.get(""String_Node_Str"").getAsInt();
  if (topDict.get(""String_Node_Str"") != null)   model.startPageIndex=topDict.get(""String_Node_Str"").getAsInt();
  if (topDict.get(""String_Node_Str"") != null)   model.port=topDict.get(""String_Node_Str"").getAsInt();
  if (topDict.get(""String_Node_Str"") != null)   model.version=topDict.get(""String_Node_Str"").getAsFloat();
  JsonArray controlDictArray;
  if (topDict.get(""String_Node_Str"") != null) {
    controlDictArray=topDict.get(""String_Node_Str"").getAsJsonArray();
    for (int i=0; i < controlDictArray.size(); i++) {
      JsonObject guiDict=controlDictArray.get(i).getAsJsonObject();
      MMPControl control;
      if (guiDict.get(""String_Node_Str"") == null)       continue;
      String classString=guiDict.get(""String_Node_Str"").getAsString();
      Rectangle newFrame=new Rectangle(0,0,100,100);
      if (guiDict.get(""String_Node_Str"") != null) {
        JsonArray frameRectArray=guiDict.getAsJsonArray(""String_Node_Str"");
        newFrame=new Rectangle((int)frameRectArray.get(0).getAsFloat(),(int)frameRectArray.get(1).getAsFloat(),(int)frameRectArray.get(2).getAsFloat(),(int)frameRectArray.get(3).getAsFloat());
      }
      Color color=new Color(1f,1f,1f,1f);
      if (guiDict.getAsJsonArray(""String_Node_Str"") != null) {
        JsonArray colorArray=guiDict.getAsJsonArray(""String_Node_Str"");
        if (colorArray.size() == 4)         color=DocumentModel.colorFromRGBAArray(colorArray);
 else         if (colorArray.size() == 3)         color=DocumentModel.colorFromRGBArray(colorArray);
      }
      Color highlightColor=Color.RED;
      if (guiDict.getAsJsonArray(""String_Node_Str"") != null) {
        JsonArray highlightColorArray=guiDict.getAsJsonArray(""String_Node_Str"");
        if (highlightColorArray.size() == 4)         highlightColor=DocumentModel.colorFromRGBAArray(highlightColorArray);
 else         if (highlightColorArray.size() == 3)         highlightColor=DocumentModel.colorFromRGBArray(highlightColorArray);
      }
      if (classString.equals(""String_Node_Str"")) {
        control=new MMPSlider(newFrame);
        if (guiDict.get(""String_Node_Str"") != null)         ((MMPSlider)control).setIsHorizontal(guiDict.get(""String_Node_Str"").getAsBoolean());
        if (guiDict.get(""String_Node_Str"") != null)         ((MMPSlider)control).setRange(guiDict.get(""String_Node_Str"").getAsInt());
      }
 else       if (classString.equals(""String_Node_Str"")) {
        control=new MMPKnob(newFrame);
        Color indicatorColor=Color.WHITE;
        if (guiDict.get(""String_Node_Str"") != null) {
          indicatorColor=DocumentModel.colorFromRGBAArray(guiDict.get(""String_Node_Str"").getAsJsonArray());
          ((MMPKnob)control).setIndicatorColor(indicatorColor);
        }
        if (guiDict.get(""String_Node_Str"") != null)         ((MMPKnob)control).setRange(guiDict.get(""String_Node_Str"").getAsInt());
      }
 else       if (classString.equals(""String_Node_Str"")) {
        control=new MMPButton(newFrame);
      }
 else       if (classString.equals(""String_Node_Str"")) {
        control=new MMPToggle(newFrame);
        if (guiDict.get(""String_Node_Str"") != null)         ((MMPToggle)control).setBorderThickness(guiDict.get(""String_Node_Str"").getAsInt());
      }
 else       if (classString.equals(""String_Node_Str"")) {
        control=new MMPLabel(newFrame);
        if (guiDict.get(""String_Node_Str"") != null)         ((MMPLabel)control).setStringValue(guiDict.get(""String_Node_Str"").getAsString());
        if (guiDict.get(""String_Node_Str"") != null)         ((MMPLabel)control).setTextSize(guiDict.get(""String_Node_Str"").getAsInt());
        if (guiDict.get(""String_Node_Str"") != null && guiDict.get(""String_Node_Str"") != null)         ((MMPLabel)control).setFontFamilyAndName(guiDict.get(""String_Node_Str"").getAsString(),guiDict.get(""String_Node_Str"").getAsString());
        if (guiDict.get(""String_Node_Str"") != null)         ((MMPLabel)control).setAndroidFontFileName(guiDict.get(""String_Node_Str"").getAsString());
      }
 else       if (classString.equals(""String_Node_Str"")) {
        control=new MMPXYSlider(newFrame);
      }
 else       if (classString.equals(""String_Node_Str"")) {
        control=new MMPGrid(newFrame);
        if (guiDict.get(""String_Node_Str"") != null) {
          JsonArray dim=guiDict.get(""String_Node_Str"").getAsJsonArray();
          ((MMPGrid)control).setDimX(dim.get(0).getAsInt());
          ((MMPGrid)control).setDimY(dim.get(1).getAsInt());
        }
        if (guiDict.get(""String_Node_Str"") != null)         ((MMPGrid)control).setBorderThickness(guiDict.get(""String_Node_Str"").getAsInt());
        if (guiDict.get(""String_Node_Str"") != null)         ((MMPGrid)control).setCellPadding(guiDict.get(""String_Node_Str"").getAsInt());
        if (guiDict.get(""String_Node_Str"") != null) {
          ((MMPGrid)control).setMode(guiDict.get(""String_Node_Str"").getAsInt());
        }
      }
 else       if (classString.equals(""String_Node_Str"")) {
        control=new MMPPanel(newFrame);
        if (guiDict.get(""String_Node_Str"") != null)         ((MMPPanel)control).setImagePath(guiDict.get(""String_Node_Str"").getAsString());
        if (guiDict.get(""String_Node_Str"") != null)         ((MMPPanel)control).shouldPassTouches=(guiDict.get(""String_Node_Str"").getAsBoolean());
      }
 else       if (classString.equals(""String_Node_Str"")) {
        control=new MMPMultiSlider(newFrame);
        if (guiDict.get(""String_Node_Str"") != null)         ((MMPMultiSlider)control).setRange(guiDict.get(""String_Node_Str"").getAsInt());
      }
 else       if (classString.equals(""String_Node_Str"")) {
        control=new MMPLCD(newFrame);
      }
 else       if (classString.equals(""String_Node_Str"")) {
        control=new MMPMultiTouch(newFrame);
      }
 else       if (classString.equals(""String_Node_Str"")) {
        control=new MMPMenu(newFrame);
        if (guiDict.get(""String_Node_Str"") != null)         ((MMPMenu)control).setTitleString(guiDict.get(""String_Node_Str"").getAsString());
      }
 else       if (classString.equals(""String_Node_Str"")) {
        control=new MMPTable(newFrame);
        if (guiDict.get(""String_Node_Str"") != null)         ((MMPTable)control).setMode(guiDict.get(""String_Node_Str"").getAsInt());
        if (guiDict.get(""String_Node_Str"") != null) {
          Color selectionColor=DocumentModel.colorFromRGBAArray(guiDict.get(""String_Node_Str"").getAsJsonArray());
          ((MMPTable)control).setSelectionColor(selectionColor);
        }
      }
 else {
        control=new MMPUnknown(newFrame);
        ((MMPUnknown)control).setBadName(classString);
        Type collectionType=new TypeToken<Map<String,Object>>(){
        }
.getType();
        ((MMPUnknown)control).badGUIDict=gson.fromJson(guiDict,collectionType);
      }
      control.setColor(color);
      control.setHighlightColor(highlightColor);
      if (guiDict.get(""String_Node_Str"") != null) {
        control.setAddress(guiDict.get(""String_Node_Str"").getAsString());
        model.controlArray.add(control);
      }
    }
  }
  return model;
}",0.999767738938567
161960,"public void controlEditClickedHelper(MMPControl control,boolean withShift,boolean wasAlreadySelected){
  if (!withShift && !wasAlreadySelected) {
    for (    MMPControl currControl : documentModel.controlArray) {
      if (!currControl.equals(control))       currControl.setIsSelected(false);
    }
  }
  windowDelegate.propColorWell.setColor(control.color);
  windowDelegate.propHighlightColorWell.setColor(control.highlightColor);
  if (withShift == true)   clearSelection();
 else {
    for (    Component varPanel : windowDelegate.propVarPanel.getComponents())     varPanel.setVisible(false);
    windowDelegate.propAddressTextField.setEnabled(true);
    windowDelegate.propAddressTextField.setText(control.getAddress());
    if (control instanceof MMPKnob) {
      windowDelegate.propVarKnobPanel.setVisible(true);
      MMPKnob currKnob=(MMPKnob)control;
      windowDelegate.propVarKnobRangeTextField.setText(""String_Node_Str"" + currKnob.range);
      windowDelegate.propVarKnobIndicatorColorWell.setColor(currKnob.indicatorColor);
    }
 else     if (control instanceof MMPSlider) {
      windowDelegate.propVarSliderPanel.setVisible(true);
      MMPSlider currSlider=(MMPSlider)control;
      windowDelegate.propVarSliderRangeTextField.setText(""String_Node_Str"" + currSlider.range);
      windowDelegate.propVarSliderOrientationBox.removeActionListener(windowDelegate);
      if (currSlider.isHorizontal == true)       windowDelegate.propVarSliderOrientationBox.setSelectedIndex(1);
 else       windowDelegate.propVarSliderOrientationBox.setSelectedIndex(0);
      windowDelegate.propVarSliderOrientationBox.addActionListener(windowDelegate);
    }
 else     if (control instanceof MMPLabel) {
      windowDelegate.propVarLabelPanel.setVisible(true);
      MMPLabel currLabel=(MMPLabel)control;
      windowDelegate.propLabelTextField.getDocument().removeDocumentListener(windowDelegate);
      windowDelegate.propLabelTextField.setText(currLabel.stringValue);
      windowDelegate.propLabelTextField.getDocument().addDocumentListener(windowDelegate);
      windowDelegate.propLabelSizeTextField.removeActionListener(windowDelegate);
      windowDelegate.propLabelSizeTextField.setText(""String_Node_Str"" + currLabel.textSize);
      windowDelegate.propLabelSizeTextField.addActionListener(windowDelegate);
      windowDelegate.propLabelFontBox.removeActionListener(windowDelegate);
      windowDelegate.propLabelFontBox.setSelectedItem(currLabel.fontFamily);
      windowDelegate.propLabelFontBox.addActionListener(windowDelegate);
      windowDelegate.propLabelFontTypeBox.removeActionListener(windowDelegate);
      windowDelegate.populateFont();
      windowDelegate.propLabelFontTypeBox.setSelectedItem(currLabel.fontName);
      windowDelegate.propLabelFontTypeBox.addActionListener(windowDelegate);
      windowDelegate.propLabelAndroidFontTypeBox.removeActionListener(windowDelegate);
      windowDelegate.propLabelAndroidFontTypeBox.setSelectedItem(currLabel.androidFontName);
      windowDelegate.propLabelAndroidFontTypeBox.addActionListener(windowDelegate);
    }
 else     if (control instanceof MMPGrid) {
      windowDelegate.propVarGridPanel.setVisible(true);
      MMPGrid currGrid=(MMPGrid)control;
      windowDelegate.propGridDimXTextField.removeActionListener(windowDelegate);
      windowDelegate.propGridDimXTextField.setText(""String_Node_Str"" + currGrid.dimX);
      windowDelegate.propGridDimXTextField.addActionListener(windowDelegate);
      windowDelegate.propGridDimYTextField.removeActionListener(windowDelegate);
      windowDelegate.propGridDimYTextField.setText(""String_Node_Str"" + currGrid.dimY);
      windowDelegate.propGridDimYTextField.addActionListener(windowDelegate);
      windowDelegate.propGridBorderThicknessTextField.removeActionListener(windowDelegate);
      windowDelegate.propGridBorderThicknessTextField.setText(""String_Node_Str"" + currGrid.borderThickness);
      windowDelegate.propGridBorderThicknessTextField.addActionListener(windowDelegate);
      windowDelegate.propGridCellPaddingTextField.removeActionListener(windowDelegate);
      windowDelegate.propGridCellPaddingTextField.setText(""String_Node_Str"" + currGrid.cellPadding);
      windowDelegate.propGridCellPaddingTextField.addActionListener(windowDelegate);
      windowDelegate.propGridModeBox.removeActionListener(windowDelegate.propGridModeBox.getActionListeners()[0]);
      windowDelegate.propGridModeBox.setSelectedIndex(currGrid.getMode());
      windowDelegate.propGridModeBox.addActionListener(windowDelegate);
    }
 else     if (control instanceof MMPPanel) {
      windowDelegate.propVarPanelPanel.setVisible(true);
      MMPPanel currPanel=(MMPPanel)control;
      if (currPanel.imagePath != null) {
        windowDelegate.propPanelFileTextField.removeActionListener(windowDelegate);
        windowDelegate.propPanelFileTextField.setText(currPanel.imagePath);
        windowDelegate.propPanelFileTextField.addActionListener(windowDelegate);
      }
      windowDelegate.propPanelShouldPassTouchesCheckBox.removeActionListener(windowDelegate);
      windowDelegate.propPanelShouldPassTouchesCheckBox.setSelected(currPanel.shouldPassTouches);
      windowDelegate.propPanelShouldPassTouchesCheckBox.addActionListener(windowDelegate);
    }
 else     if (control instanceof MMPMultiSlider) {
      windowDelegate.propVarMultiSliderPanel.setVisible(true);
      MMPMultiSlider currMS=(MMPMultiSlider)control;
      windowDelegate.propMultiCountTextField.removeActionListener(windowDelegate);
      windowDelegate.propMultiCountTextField.setText(""String_Node_Str"" + currMS.range);
      windowDelegate.propMultiCountTextField.addActionListener(windowDelegate);
    }
 else     if (control instanceof MMPToggle) {
      windowDelegate.propVarTogglePanel.setVisible(true);
      MMPToggle currToggle=(MMPToggle)control;
      windowDelegate.propToggleThicknessTextField.removeActionListener(windowDelegate);
      windowDelegate.propToggleThicknessTextField.setText(""String_Node_Str"" + currToggle.borderThickness);
      windowDelegate.propToggleThicknessTextField.addActionListener(windowDelegate);
    }
 else     if (control instanceof MMPMenu) {
      windowDelegate.propVarMenuPanel.setVisible(true);
      MMPMenu currMenu=(MMPMenu)control;
      windowDelegate.propMenuTitleTextField.getDocument().removeDocumentListener(windowDelegate);
      windowDelegate.propMenuTitleTextField.setText(currMenu.titleString);
      windowDelegate.propMenuTitleTextField.getDocument().addDocumentListener(windowDelegate);
    }
 else     if (control instanceof MMPTable) {
      windowDelegate.propVarTablePanel.setVisible(true);
      MMPTable currTable=(MMPTable)control;
      windowDelegate.propTableModeBox.removeActionListener(windowDelegate);
      windowDelegate.propTableModeBox.setSelectedIndex(currTable.getMode());
      windowDelegate.propTableModeBox.addActionListener(windowDelegate);
      windowDelegate.propTableSelectionColorWell.setColor(currTable.getSelectionColor());
    }
    currentSingleSelection=control;
  }
}","public void controlEditClickedHelper(MMPControl control,boolean withShift,boolean wasAlreadySelected){
  if (!withShift && !wasAlreadySelected) {
    for (    MMPControl currControl : documentModel.controlArray) {
      if (!currControl.equals(control))       currControl.setIsSelected(false);
    }
  }
  windowDelegate.propColorWell.setColor(control.color);
  windowDelegate.propHighlightColorWell.setColor(control.highlightColor);
  if (withShift == true)   clearSelection();
 else {
    for (    Component varPanel : windowDelegate.propVarPanel.getComponents())     varPanel.setVisible(false);
    windowDelegate.propAddressTextField.setEnabled(true);
    windowDelegate.propAddressTextField.setText(control.getAddress());
    if (control instanceof MMPKnob) {
      windowDelegate.propVarKnobPanel.setVisible(true);
      MMPKnob currKnob=(MMPKnob)control;
      windowDelegate.propVarKnobRangeTextField.setText(""String_Node_Str"" + currKnob.range);
      windowDelegate.propVarKnobIndicatorColorWell.setColor(currKnob.indicatorColor);
    }
 else     if (control instanceof MMPSlider) {
      windowDelegate.propVarSliderPanel.setVisible(true);
      MMPSlider currSlider=(MMPSlider)control;
      windowDelegate.propVarSliderRangeTextField.setText(""String_Node_Str"" + currSlider.range);
      windowDelegate.propVarSliderOrientationBox.removeActionListener(windowDelegate);
      if (currSlider.isHorizontal == true)       windowDelegate.propVarSliderOrientationBox.setSelectedIndex(1);
 else       windowDelegate.propVarSliderOrientationBox.setSelectedIndex(0);
      windowDelegate.propVarSliderOrientationBox.addActionListener(windowDelegate);
    }
 else     if (control instanceof MMPLabel) {
      windowDelegate.propVarLabelPanel.setVisible(true);
      MMPLabel currLabel=(MMPLabel)control;
      windowDelegate.propLabelTextField.getDocument().removeDocumentListener(windowDelegate);
      windowDelegate.propLabelTextField.setText(currLabel.stringValue);
      windowDelegate.propLabelTextField.getDocument().addDocumentListener(windowDelegate);
      windowDelegate.propLabelSizeTextField.removeActionListener(windowDelegate);
      windowDelegate.propLabelSizeTextField.setText(""String_Node_Str"" + currLabel.textSize);
      windowDelegate.propLabelSizeTextField.addActionListener(windowDelegate);
      windowDelegate.propLabelFontBox.removeActionListener(windowDelegate);
      windowDelegate.propLabelFontBox.setSelectedItem(currLabel.fontFamily);
      windowDelegate.propLabelFontBox.addActionListener(windowDelegate);
      windowDelegate.propLabelFontTypeBox.removeActionListener(windowDelegate);
      windowDelegate.populateFont();
      windowDelegate.propLabelFontTypeBox.setSelectedItem(currLabel.fontName);
      windowDelegate.propLabelFontTypeBox.addActionListener(windowDelegate);
      windowDelegate.propLabelAndroidFontTypeBox.removeActionListener(windowDelegate);
      windowDelegate.propLabelAndroidFontTypeBox.setSelectedItem(currLabel.androidFontFileName);
      windowDelegate.propLabelAndroidFontTypeBox.addActionListener(windowDelegate);
    }
 else     if (control instanceof MMPGrid) {
      windowDelegate.propVarGridPanel.setVisible(true);
      MMPGrid currGrid=(MMPGrid)control;
      windowDelegate.propGridDimXTextField.removeActionListener(windowDelegate);
      windowDelegate.propGridDimXTextField.setText(""String_Node_Str"" + currGrid.dimX);
      windowDelegate.propGridDimXTextField.addActionListener(windowDelegate);
      windowDelegate.propGridDimYTextField.removeActionListener(windowDelegate);
      windowDelegate.propGridDimYTextField.setText(""String_Node_Str"" + currGrid.dimY);
      windowDelegate.propGridDimYTextField.addActionListener(windowDelegate);
      windowDelegate.propGridBorderThicknessTextField.removeActionListener(windowDelegate);
      windowDelegate.propGridBorderThicknessTextField.setText(""String_Node_Str"" + currGrid.borderThickness);
      windowDelegate.propGridBorderThicknessTextField.addActionListener(windowDelegate);
      windowDelegate.propGridCellPaddingTextField.removeActionListener(windowDelegate);
      windowDelegate.propGridCellPaddingTextField.setText(""String_Node_Str"" + currGrid.cellPadding);
      windowDelegate.propGridCellPaddingTextField.addActionListener(windowDelegate);
      windowDelegate.propGridModeBox.removeActionListener(windowDelegate.propGridModeBox.getActionListeners()[0]);
      windowDelegate.propGridModeBox.setSelectedIndex(currGrid.getMode());
      windowDelegate.propGridModeBox.addActionListener(windowDelegate);
    }
 else     if (control instanceof MMPPanel) {
      windowDelegate.propVarPanelPanel.setVisible(true);
      MMPPanel currPanel=(MMPPanel)control;
      if (currPanel.imagePath != null) {
        windowDelegate.propPanelFileTextField.removeActionListener(windowDelegate);
        windowDelegate.propPanelFileTextField.setText(currPanel.imagePath);
        windowDelegate.propPanelFileTextField.addActionListener(windowDelegate);
      }
      windowDelegate.propPanelShouldPassTouchesCheckBox.removeActionListener(windowDelegate);
      windowDelegate.propPanelShouldPassTouchesCheckBox.setSelected(currPanel.shouldPassTouches);
      windowDelegate.propPanelShouldPassTouchesCheckBox.addActionListener(windowDelegate);
    }
 else     if (control instanceof MMPMultiSlider) {
      windowDelegate.propVarMultiSliderPanel.setVisible(true);
      MMPMultiSlider currMS=(MMPMultiSlider)control;
      windowDelegate.propMultiCountTextField.removeActionListener(windowDelegate);
      windowDelegate.propMultiCountTextField.setText(""String_Node_Str"" + currMS.range);
      windowDelegate.propMultiCountTextField.addActionListener(windowDelegate);
    }
 else     if (control instanceof MMPToggle) {
      windowDelegate.propVarTogglePanel.setVisible(true);
      MMPToggle currToggle=(MMPToggle)control;
      windowDelegate.propToggleThicknessTextField.removeActionListener(windowDelegate);
      windowDelegate.propToggleThicknessTextField.setText(""String_Node_Str"" + currToggle.borderThickness);
      windowDelegate.propToggleThicknessTextField.addActionListener(windowDelegate);
    }
 else     if (control instanceof MMPMenu) {
      windowDelegate.propVarMenuPanel.setVisible(true);
      MMPMenu currMenu=(MMPMenu)control;
      windowDelegate.propMenuTitleTextField.getDocument().removeDocumentListener(windowDelegate);
      windowDelegate.propMenuTitleTextField.setText(currMenu.titleString);
      windowDelegate.propMenuTitleTextField.getDocument().addDocumentListener(windowDelegate);
    }
 else     if (control instanceof MMPTable) {
      windowDelegate.propVarTablePanel.setVisible(true);
      MMPTable currTable=(MMPTable)control;
      windowDelegate.propTableModeBox.removeActionListener(windowDelegate);
      windowDelegate.propTableModeBox.setSelectedIndex(currTable.getMode());
      windowDelegate.propTableModeBox.addActionListener(windowDelegate);
      windowDelegate.propTableSelectionColorWell.setColor(currTable.getSelectionColor());
    }
    currentSingleSelection=control;
  }
}",0.9997167941093176
161961,"public MMPController(){
  super();
  documentModel=new DocumentModel();
  Preferences prefs=Preferences.userNodeForPackage(MMPWindow.class);
  snapToGridXVal=prefs.getInt(""String_Node_Str"",20);
  snapToGridYVal=prefs.getInt(""String_Node_Str"",20);
  snapToGridEnabled=prefs.getBoolean(""String_Node_Str"",false);
  if (MMPController.sender == null) {
    try {
      MMPController.sender=new OSCPortOut(InetAddress.getLocalHost(),54300);
    }
 catch (    UnknownHostException e) {
      System.out.print(""String_Node_Str"");
    }
catch (    SocketException e) {
      System.out.print(""String_Node_Str"");
      JOptionPane.showMessageDialog(null,""String_Node_Str"");
    }
  }
  if (MMPController.receiver == null) {
    try {
      MMPController.receiver=new OSCPortIn(54310);
      MMPController.receiver.addListener(""String_Node_Str"",oscListener);
      MMPController.receiver.startListening();
    }
 catch (    SocketException e) {
      System.out.print(""String_Node_Str"");
      JOptionPane.showMessageDialog(null,""String_Node_Str"");
    }
    MMPController.controllerArrayList=new ArrayList<MMPController>();
  }
  if (MMPController.fontArray == null) {
    System.out.print(""String_Node_Str"" + new File(""String_Node_Str"").getAbsolutePath());
    try {
      URL url=this.getClass().getResource(""String_Node_Str"");
      System.out.print(""String_Node_Str"" + url.getPath());
      BufferedReader reader=new BufferedReader(new InputStreamReader(url.openStream()));
      String line=null;
      StringBuilder stringBuilder=new StringBuilder();
      while ((line=reader.readLine()) != null) {
        stringBuilder.append(line);
      }
      JsonParser parser=new JsonParser();
      JsonArray fontJsonArray=parser.parse(stringBuilder.toString()).getAsJsonArray();
      fontArray=new ArrayList<Map>();
      for (      JsonElement jsonMap : fontJsonArray) {
        Map<String,Object> newMap=new HashMap<String,Object>();
        newMap.put(""String_Node_Str"",((JsonObject)jsonMap).get(""String_Node_Str"").getAsString());
        JsonArray typesJsonArray=((JsonObject)jsonMap).get(""String_Node_Str"").getAsJsonArray();
        List<String> typeList=new ArrayList<String>();
        for (        JsonElement jsonTypeName : typesJsonArray) {
          typeList.add(jsonTypeName.getAsString());
        }
        newMap.put(""String_Node_Str"",typeList);
        fontArray.add(newMap);
      }
      Collections.sort(fontArray,new FontArrayComparator());
      Map defMap=new HashMap<String,Object>();
      defMap.put(""String_Node_Str"",""String_Node_Str"");
      defMap.put(""String_Node_Str"",new ArrayList<String>());
      fontArray.add(defMap);
    }
 catch (    FileNotFoundException e) {
    }
catch (    IOException e) {
    }
  }
  if (androidFontNameArray == null) {
    androidFontNameArray=Arrays.asList(""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"");
    for (    String fontName : androidFontNameArray) {
      try {
        InputStream is=this.getClass().getResourceAsStream(""String_Node_Str"" + fontName + ""String_Node_Str"");
        GraphicsEnvironment ge=GraphicsEnvironment.getLocalGraphicsEnvironment();
        ge.registerFont(Font.createFont(Font.TRUETYPE_FONT,is));
      }
 catch (      IOException e) {
        System.out.print(""String_Node_Str"");
      }
catch (      FontFormatException e) {
        System.out.print(""String_Node_Str"");
      }
    }
  }
  System.out.print(""String_Node_Str"" + this);
  MMPController.controllerArrayList.add(this);
  textLineArray=new ArrayList<String>();
}","public MMPController(){
  super();
  documentModel=new DocumentModel();
  Preferences prefs=Preferences.userNodeForPackage(MMPWindow.class);
  snapToGridXVal=prefs.getInt(""String_Node_Str"",20);
  snapToGridYVal=prefs.getInt(""String_Node_Str"",20);
  snapToGridEnabled=prefs.getBoolean(""String_Node_Str"",false);
  if (MMPController.sender == null) {
    try {
      MMPController.sender=new OSCPortOut(InetAddress.getLocalHost(),54300);
    }
 catch (    UnknownHostException e) {
      System.out.print(""String_Node_Str"");
    }
catch (    SocketException e) {
      System.out.print(""String_Node_Str"");
      JOptionPane.showMessageDialog(null,""String_Node_Str"");
    }
  }
  if (MMPController.receiver == null) {
    try {
      MMPController.receiver=new OSCPortIn(54310);
      MMPController.receiver.addListener(""String_Node_Str"",oscListener);
      MMPController.receiver.startListening();
    }
 catch (    SocketException e) {
      System.out.print(""String_Node_Str"");
      JOptionPane.showMessageDialog(null,""String_Node_Str"");
    }
    MMPController.controllerArrayList=new ArrayList<MMPController>();
  }
  if (MMPController.fontArray == null) {
    System.out.print(""String_Node_Str"" + new File(""String_Node_Str"").getAbsolutePath());
    try {
      URL url=this.getClass().getResource(""String_Node_Str"");
      System.out.print(""String_Node_Str"" + url.getPath());
      BufferedReader reader=new BufferedReader(new InputStreamReader(url.openStream()));
      String line=null;
      StringBuilder stringBuilder=new StringBuilder();
      while ((line=reader.readLine()) != null) {
        stringBuilder.append(line);
      }
      JsonParser parser=new JsonParser();
      JsonArray fontJsonArray=parser.parse(stringBuilder.toString()).getAsJsonArray();
      fontArray=new ArrayList<Map>();
      for (      JsonElement jsonMap : fontJsonArray) {
        Map<String,Object> newMap=new HashMap<String,Object>();
        newMap.put(""String_Node_Str"",((JsonObject)jsonMap).get(""String_Node_Str"").getAsString());
        JsonArray typesJsonArray=((JsonObject)jsonMap).get(""String_Node_Str"").getAsJsonArray();
        List<String> typeList=new ArrayList<String>();
        for (        JsonElement jsonTypeName : typesJsonArray) {
          typeList.add(jsonTypeName.getAsString());
        }
        newMap.put(""String_Node_Str"",typeList);
        fontArray.add(newMap);
      }
      Collections.sort(fontArray,new FontArrayComparator());
      Map defMap=new HashMap<String,Object>();
      defMap.put(""String_Node_Str"",""String_Node_Str"");
      defMap.put(""String_Node_Str"",new ArrayList<String>());
      fontArray.add(defMap);
    }
 catch (    FileNotFoundException e) {
    }
catch (    IOException e) {
    }
  }
  if (androidFontFileArray == null) {
    androidFontFileArray=Arrays.asList(""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"");
    androidFontFileToNameMap=new HashMap<String,String>();
    for (    String fontFilename : androidFontFileArray) {
      try {
        InputStream is=this.getClass().getResourceAsStream(""String_Node_Str"" + fontFilename + ""String_Node_Str"");
        GraphicsEnvironment ge=GraphicsEnvironment.getLocalGraphicsEnvironment();
        Font f=Font.createFont(Font.TRUETYPE_FONT,is);
        ge.registerFont(f);
        String fontName=f.getName();
        androidFontFileToNameMap.put(fontFilename,fontName);
      }
 catch (      IOException e) {
        System.out.print(""String_Node_Str"");
      }
catch (      FontFormatException e) {
        System.out.print(""String_Node_Str"");
      }
    }
  }
  System.out.print(""String_Node_Str"" + this);
  MMPController.controllerArrayList.add(this);
  textLineArray=new ArrayList<String>();
}",0.9510804719607584
161962,"void fillFontPop(){
  List<Map> fontArray=MMPController.fontArray;
  for (  Map currMap : fontArray) {
    if (currMap.get(""String_Node_Str"") != null) {
      String fontName=(String)currMap.get(""String_Node_Str"");
      propLabelFontBox.addItem(fontName);
    }
  }
  List<String> androidFontNameArray=MMPController.androidFontNameArray;
  for (  String currFontName : androidFontNameArray) {
    propLabelAndroidFontTypeBox.addItem(currFontName);
  }
}","void fillFontPop(){
  List<Map> fontArray=MMPController.fontArray;
  for (  Map currMap : fontArray) {
    if (currMap.get(""String_Node_Str"") != null) {
      String fontName=(String)currMap.get(""String_Node_Str"");
      propLabelFontBox.addItem(fontName);
    }
  }
  List<String> androidFontFileNameArray=MMPController.androidFontFileArray;
  for (  String currFontFileName : androidFontFileNameArray) {
    propLabelAndroidFontTypeBox.addItem(currFontFileName);
  }
}",0.9761904761904762
161963,"public MMPLabel(Rectangle frame){
  super();
  address=""String_Node_Str"";
  fontFamily=""String_Node_Str"";
  fontName=""String_Node_Str"";
  androidFontName=""String_Node_Str"";
  textSize=16;
  stringValue=""String_Node_Str"";
  setLayout(null);
  overPanel=new JPanel();
  overPanel.setOpaque(false);
  add(overPanel);
  textView=new JTextArea(stringValue);
  textView.setForeground(color);
  textView.setFont(new Font(DEFAULT_FONT,Font.PLAIN,textSize));
  textView.setOpaque(false);
  textView.setBackground(new Color(0,0,0,0));
  textView.setBorder(BorderFactory.createEmptyBorder());
  textView.setWrapStyleWord(true);
  textView.setLineWrap(true);
  textView.setEditable(false);
  for (  MouseListener ml : textView.getMouseListeners())   textView.removeMouseListener(ml);
  for (  MouseMotionListener ml : textView.getMouseMotionListeners())   textView.removeMouseMotionListener(ml);
  add(textView);
  this.setColor(this.color);
  this.setBounds(frame);
  overPanel.addMouseListener(this);
  overPanel.addMouseMotionListener(this);
}","public MMPLabel(Rectangle frame){
  super();
  address=""String_Node_Str"";
  fontFamily=""String_Node_Str"";
  fontName=""String_Node_Str"";
  androidFontFileName=""String_Node_Str"";
  androidFontName=MMPController.androidFontFileToNameMap.get(androidFontFileName);
  textSize=16;
  stringValue=""String_Node_Str"";
  setLayout(null);
  overPanel=new JPanel();
  overPanel.setOpaque(false);
  add(overPanel);
  textView=new JTextArea(stringValue);
  textView.setForeground(color);
  textView.setFont(new Font(DEFAULT_FONT,Font.PLAIN,textSize));
  textView.setOpaque(false);
  textView.setBackground(new Color(0,0,0,0));
  textView.setBorder(BorderFactory.createEmptyBorder());
  textView.setWrapStyleWord(true);
  textView.setLineWrap(true);
  textView.setEditable(false);
  for (  MouseListener ml : textView.getMouseListeners())   textView.removeMouseListener(ml);
  for (  MouseMotionListener ml : textView.getMouseMotionListeners())   textView.removeMouseMotionListener(ml);
  add(textView);
  this.setColor(this.color);
  this.setBounds(frame);
  overPanel.addMouseListener(this);
  overPanel.addMouseMotionListener(this);
}",0.959628770301624
161964,"public void mousePressed(MouseEvent e){
  super.mousePressed(e);
  if (!editingDelegate.isEditing()) {
    knobPanel.setBackground(this.getHighlightColor());
    mouseDragged(e);
  }
}","public void mousePressed(MouseEvent e){
  super.mousePressed(e);
  if (!editingDelegate.isEditing()) {
    knobPanel.setBackground(this.getHighlightColor());
    for (    JPanel tick : tickViewArray)     tick.setBackground(this.getHighlightColor());
    mouseDragged(e);
  }
}",0.8
161965,"@Override public void mouseReleased(MouseEvent e){
  super.mouseReleased(e);
  if (!editingDelegate.isEditing()) {
    knobPanel.setBackground(getColor());
  }
}","@Override public void mouseReleased(MouseEvent e){
  super.mouseReleased(e);
  if (!editingDelegate.isEditing()) {
    knobPanel.setBackground(getColor());
    for (    JPanel tick : tickViewArray)     tick.setBackground(getColor());
  }
}",0.805
161966,"private void loadCommands(){
  commands.put(""String_Node_Str"",new CreateArena());
  commands.put(""String_Node_Str"",new Join());
  commands.put(""String_Node_Str"",new AddWall());
  commands.put(""String_Node_Str"",new SetSpawn());
  commands.put(""String_Node_Str"",new ListArenas());
  commands.put(""String_Node_Str"",new Disable());
  commands.put(""String_Node_Str"",new ForceStart());
  commands.put(""String_Node_Str"",new Enable());
  commands.put(""String_Node_Str"",new Vote());
  commands.put(""String_Node_Str"",new Leave());
  commands.put(""String_Node_Str"",new SetLobbySpawn());
  commands.put(""String_Node_Str"",new SetLobbyWall());
  commands.put(""String_Node_Str"",new ResetSpawns());
  commands.put(""String_Node_Str"",new DelArena());
  commands.put(""String_Node_Str"",new Flag());
  commands.put(""String_Node_Str"",new Spectate());
  commands.put(""String_Node_Str"",new LeaveQueue());
  commands.put(""String_Node_Str"",new LeaveQueue());
  commands.put(""String_Node_Str"",new ListPlayers());
  commands.put(""String_Node_Str"",new Teleport());
  commands.put(""String_Node_Str"",new Reload());
  commands.put(""String_Node_Str"",new Test());
}","private void loadCommands(){
  commands.put(""String_Node_Str"",new CreateArena());
  commands.put(""String_Node_Str"",new Join());
  commands.put(""String_Node_Str"",new AddWall());
  commands.put(""String_Node_Str"",new SetSpawn());
  commands.put(""String_Node_Str"",new ListArenas());
  commands.put(""String_Node_Str"",new Disable());
  commands.put(""String_Node_Str"",new ForceStart());
  commands.put(""String_Node_Str"",new Enable());
  commands.put(""String_Node_Str"",new Vote());
  commands.put(""String_Node_Str"",new Leave());
  commands.put(""String_Node_Str"",new SetLobbySpawn());
  commands.put(""String_Node_Str"",new SetLobbyWall());
  commands.put(""String_Node_Str"",new ResetSpawns());
  commands.put(""String_Node_Str"",new DelArena());
  commands.put(""String_Node_Str"",new Flag());
  commands.put(""String_Node_Str"",new Spectate());
  commands.put(""String_Node_Str"",new LeaveQueue());
  commands.put(""String_Node_Str"",new LeaveQueue());
  commands.put(""String_Node_Str"",new ListPlayers());
  commands.put(""String_Node_Str"",new Teleport());
  commands.put(""String_Node_Str"",new Reload());
}",0.9792418772563176
161967,"public Location getMax(){
  return max;
}","public Location getMax(){
  Runtime.getRuntime().freeMemory();
  return max;
}",0.6890756302521008
161968,"public boolean addPlayer(Player p){
  if (SettingsManager.getInstance().getLobbySpawn() == null) {
    msgmgr.sendFMessage(PrefixType.WARNING,""String_Node_Str"",p);
    return false;
  }
  if (!p.hasPermission(""String_Node_Str"" + gameID)) {
    debug(""String_Node_Str"" + ""String_Node_Str"" + gameID);
    msgmgr.sendFMessage(PrefixType.WARNING,""String_Node_Str"",p);
    return false;
  }
  HookManager.getInstance().runHook(""String_Node_Str"",""String_Node_Str"" + gameID,""String_Node_Str"" + p.getName(),""String_Node_Str"" + spawns.size(),""String_Node_Str"" + activePlayers.size());
  GameManager.getInstance().removeFromOtherQueues(p,gameID);
  if (GameManager.getInstance().getPlayerGameId(p) != -1) {
    if (GameManager.getInstance().isPlayerActive(p)) {
      msgmgr.sendMessage(PrefixType.ERROR,""String_Node_Str"",p);
      return false;
    }
  }
  if (p.isInsideVehicle()) {
    p.leaveVehicle();
  }
  if (spectators.contains(p))   removeSpectator(p);
  if (mode == GameMode.WAITING || mode == GameMode.STARTING) {
    if (activePlayers.size() < SettingsManager.getInstance().getSpawnCount(gameID)) {
      msgmgr.sendMessage(PrefixType.INFO,""String_Node_Str"" + gameID,p);
      PlayerJoinArenaEvent joinarena=new PlayerJoinArenaEvent(p,GameManager.getInstance().getGame(gameID));
      Bukkit.getServer().getPluginManager().callEvent(joinarena);
      boolean placed=false;
      for (int a=1; a <= SettingsManager.getInstance().getSpawnCount(gameID); a++) {
        if (spawns.get(a) == null) {
          placed=true;
          spawns.put(a,p);
          p.teleport(SettingsManager.getInstance().getLobbySpawn());
          p.setGameMode(org.bukkit.GameMode.SURVIVAL);
          saveInv(p);
          clearInv(p);
          p.teleport(SettingsManager.getInstance().getSpawnPoint(gameID,a));
          p.setHealth(p.getMaxHealth());
          p.setFoodLevel(20);
          clearInv(p);
          activePlayers.add(p);
          sm.addPlayer(p,gameID);
          hookvars.put(""String_Node_Str"",activePlayers.size() + ""String_Node_Str"");
          LobbyManager.getInstance().updateWall(gameID);
          showMenu(p);
          HookManager.getInstance().runHook(""String_Node_Str"",""String_Node_Str"" + activePlayers.size());
          if (spawns.size() == activePlayers.size()) {
            countdown(5);
          }
          break;
        }
      }
      if (!placed) {
        msgmgr.sendFMessage(PrefixType.ERROR,""String_Node_Str"",p,""String_Node_Str"" + gameID);
        return false;
      }
    }
 else     if (SettingsManager.getInstance().getSpawnCount(gameID) == 0) {
      msgmgr.sendMessage(PrefixType.WARNING,""String_Node_Str"" + gameID + ""String_Node_Str"",p);
      return false;
    }
 else {
      msgmgr.sendFMessage(PrefixType.WARNING,""String_Node_Str"",p,""String_Node_Str"" + gameID);
      return false;
    }
    msgFall(PrefixType.INFO,""String_Node_Str"",""String_Node_Str"" + p.getName(),""String_Node_Str"" + getActivePlayers(),""String_Node_Str"" + SettingsManager.getInstance().getSpawnCount(gameID));
    if (activePlayers.size() >= config.getInt(""String_Node_Str"") && !countdownRunning)     countdown(config.getInt(""String_Node_Str""));
    return true;
  }
 else {
    if (config.getBoolean(""String_Node_Str"")) {
      if (!queue.contains(p)) {
        queue.add(p);
        msgmgr.sendFMessage(PrefixType.INFO,""String_Node_Str"",p,""String_Node_Str"" + queue.size());
      }
      int a=1;
      for (      Player qp : queue) {
        if (qp == p) {
          msgmgr.sendFMessage(PrefixType.INFO,""String_Node_Str"",p,""String_Node_Str"" + a);
          break;
        }
        a++;
      }
    }
  }
  if (mode == GameMode.INGAME)   msgmgr.sendFMessage(PrefixType.WARNING,""String_Node_Str"",p);
 else   if (mode == GameMode.DISABLED)   msgmgr.sendFMessage(PrefixType.WARNING,""String_Node_Str"",p,""String_Node_Str"" + gameID);
 else   if (mode == GameMode.RESETING)   msgmgr.sendFMessage(PrefixType.WARNING,""String_Node_Str"",p);
 else   msgmgr.sendMessage(PrefixType.INFO,""String_Node_Str"",p);
  LobbyManager.getInstance().updateWall(gameID);
  return false;
}","public boolean addPlayer(Player p){
  if (SettingsManager.getInstance().getLobbySpawn() == null) {
    msgmgr.sendFMessage(PrefixType.WARNING,""String_Node_Str"",p);
    return false;
  }
  if (!p.hasPermission(""String_Node_Str"" + gameID)) {
    debug(""String_Node_Str"" + ""String_Node_Str"" + gameID);
    msgmgr.sendFMessage(PrefixType.WARNING,""String_Node_Str"",p);
    return false;
  }
  HookManager.getInstance().runHook(""String_Node_Str"",""String_Node_Str"" + gameID,""String_Node_Str"" + p.getName(),""String_Node_Str"" + spawns.size(),""String_Node_Str"" + activePlayers.size());
  GameManager.getInstance().removeFromOtherQueues(p,gameID);
  if (GameManager.getInstance().getPlayerGameId(p) != -1) {
    if (GameManager.getInstance().isPlayerActive(p)) {
      msgmgr.sendMessage(PrefixType.ERROR,""String_Node_Str"",p);
      return false;
    }
  }
  if (p.isInsideVehicle()) {
    p.leaveVehicle();
  }
  if (spectators.contains(p))   removeSpectator(p);
  if (mode == GameMode.WAITING || mode == GameMode.STARTING) {
    if (activePlayers.size() < SettingsManager.getInstance().getSpawnCount(gameID)) {
      msgmgr.sendMessage(PrefixType.INFO,""String_Node_Str"" + gameID,p);
      PlayerJoinArenaEvent joinarena=new PlayerJoinArenaEvent(p,GameManager.getInstance().getGame(gameID));
      Bukkit.getServer().getPluginManager().callEvent(joinarena);
      boolean placed=false;
      for (int a=1; a <= SettingsManager.getInstance().getSpawnCount(gameID); a++) {
        if (spawns.get(a) == null) {
          placed=true;
          spawns.put(a,p);
          p.setGameMode(org.bukkit.GameMode.SURVIVAL);
          p.teleport(SettingsManager.getInstance().getLobbySpawn());
          saveInv(p);
          clearInv(p);
          p.teleport(SettingsManager.getInstance().getSpawnPoint(gameID,a));
          p.setHealth(p.getMaxHealth());
          p.setFoodLevel(20);
          clearInv(p);
          activePlayers.add(p);
          sm.addPlayer(p,gameID);
          hookvars.put(""String_Node_Str"",activePlayers.size() + ""String_Node_Str"");
          LobbyManager.getInstance().updateWall(gameID);
          showMenu(p);
          HookManager.getInstance().runHook(""String_Node_Str"",""String_Node_Str"" + activePlayers.size());
          if (spawns.size() == activePlayers.size()) {
            countdown(5);
          }
          break;
        }
      }
      if (!placed) {
        msgmgr.sendFMessage(PrefixType.ERROR,""String_Node_Str"",p,""String_Node_Str"" + gameID);
        return false;
      }
    }
 else     if (SettingsManager.getInstance().getSpawnCount(gameID) == 0) {
      msgmgr.sendMessage(PrefixType.WARNING,""String_Node_Str"" + gameID + ""String_Node_Str"",p);
      return false;
    }
 else {
      msgmgr.sendFMessage(PrefixType.WARNING,""String_Node_Str"",p,""String_Node_Str"" + gameID);
      return false;
    }
    msgFall(PrefixType.INFO,""String_Node_Str"",""String_Node_Str"" + p.getName(),""String_Node_Str"" + getActivePlayers(),""String_Node_Str"" + SettingsManager.getInstance().getSpawnCount(gameID));
    if (activePlayers.size() >= config.getInt(""String_Node_Str"") && !countdownRunning)     countdown(config.getInt(""String_Node_Str""));
    return true;
  }
 else {
    if (config.getBoolean(""String_Node_Str"")) {
      if (!queue.contains(p)) {
        queue.add(p);
        msgmgr.sendFMessage(PrefixType.INFO,""String_Node_Str"",p,""String_Node_Str"" + queue.size());
      }
      int a=1;
      for (      Player qp : queue) {
        if (qp == p) {
          msgmgr.sendFMessage(PrefixType.INFO,""String_Node_Str"",p,""String_Node_Str"" + a);
          break;
        }
        a++;
      }
    }
  }
  if (mode == GameMode.INGAME)   msgmgr.sendFMessage(PrefixType.WARNING,""String_Node_Str"",p);
 else   if (mode == GameMode.DISABLED)   msgmgr.sendFMessage(PrefixType.WARNING,""String_Node_Str"",p,""String_Node_Str"" + gameID);
 else   if (mode == GameMode.RESETING)   msgmgr.sendFMessage(PrefixType.WARNING,""String_Node_Str"",p);
 else   msgmgr.sendMessage(PrefixType.INFO,""String_Node_Str"",p);
  LobbyManager.getInstance().updateWall(gameID);
  return false;
}",0.9864864864864864
161969,"public boolean onCommand(Player player,String[] args){
  if (!player.hasPermission(permission()) && !player.isOp()) {
    MessageManager.getInstance().sendFMessage(PrefixType.ERROR,""String_Node_Str"",player);
    return true;
  }
  int game=-1;
  int seconds=10;
  if (args.length == 2) {
    seconds=Integer.parseInt(args[1]);
  }
  if (args.length >= 1) {
    game=Integer.parseInt(args[0]);
  }
 else   game=GameManager.getInstance().getPlayerGameId(player);
  if (game == -1) {
    MessageManager.getInstance().sendFMessage(PrefixType.ERROR,""String_Node_Str"",player);
    return true;
  }
  if (GameManager.getInstance().getGame(game).getActivePlayers() < 2) {
    MessageManager.getInstance().sendFMessage(PrefixType.ERROR,""String_Node_Str"",player);
    return true;
  }
  Game g=GameManager.getInstance().getGame(game);
  if (g.getMode() != Game.GameMode.WAITING && !player.hasPermission(""String_Node_Str"")) {
    MessageManager.getInstance().sendFMessage(PrefixType.ERROR,""String_Node_Str"",player);
    return true;
  }
  g.countdown(seconds);
  for (  Player pl : g.getAllPlayers()) {
    msgmgr.sendFMessage(PrefixType.INFO,""String_Node_Str"",player,""String_Node_Str"" + seconds);
  }
  msgmgr.sendFMessage(PrefixType.INFO,""String_Node_Str"",player,""String_Node_Str"" + game);
  return true;
}","public boolean onCommand(Player player,String[] args){
  if (!player.hasPermission(permission()) && !player.isOp()) {
    MessageManager.getInstance().sendFMessage(PrefixType.ERROR,""String_Node_Str"",player);
    return true;
  }
  int game=-1;
  int seconds=10;
  if (args.length == 2) {
    seconds=Integer.parseInt(args[1]);
  }
  if (args.length >= 1) {
    game=Integer.parseInt(args[0]);
  }
 else   game=GameManager.getInstance().getPlayerGameId(player);
  if (game == -1) {
    MessageManager.getInstance().sendFMessage(PrefixType.ERROR,""String_Node_Str"",player);
    return true;
  }
  if (GameManager.getInstance().getGame(game).getActivePlayers() < 2) {
    MessageManager.getInstance().sendFMessage(PrefixType.ERROR,""String_Node_Str"",player);
    return true;
  }
  Game g=GameManager.getInstance().getGame(game);
  if (g.getMode() != Game.GameMode.WAITING && !player.hasPermission(""String_Node_Str"")) {
    MessageManager.getInstance().sendFMessage(PrefixType.ERROR,""String_Node_Str"",player);
    return true;
  }
  g.countdown(seconds);
  msgmgr.sendFMessage(PrefixType.INFO,""String_Node_Str"",player,""String_Node_Str"" + game);
  return true;
}",0.924582144313086
161970,"public void help(Player p,int page){
  if (page == 1) {
    p.sendMessage(ChatColor.BLUE + ""String_Node_Str"" + msgmgr.pre+ ChatColor.DARK_AQUA+ ""String_Node_Str""+ ChatColor.BLUE+ ""String_Node_Str"");
  }
  if (page == 2) {
    p.sendMessage(ChatColor.BLUE + ""String_Node_Str"" + msgmgr.pre+ ChatColor.DARK_AQUA+ ""String_Node_Str""+ ChatColor.BLUE+ ""String_Node_Str"");
  }
  if (page == 3) {
    p.sendMessage(ChatColor.BLUE + ""String_Node_Str"" + msgmgr.pre+ ChatColor.DARK_AQUA+ ""String_Node_Str""+ ChatColor.BLUE+ ""String_Node_Str"");
  }
  for (  String command : commands.keySet()) {
    if (helpinfo.get(command) == page) {
      msgmgr.sendMessage(PrefixType.INFO,commands.get(command).help(p),p);
    }
  }
}","public void help(Player p,int page){
  if (page == 1) {
    p.sendMessage(ChatColor.BLUE + ""String_Node_Str"" + msgmgr.pre+ ChatColor.DARK_AQUA+ ""String_Node_Str""+ ChatColor.BLUE+ ""String_Node_Str"");
  }
  if (page == 2) {
    p.sendMessage(ChatColor.BLUE + ""String_Node_Str"" + msgmgr.pre+ ChatColor.DARK_AQUA+ ""String_Node_Str""+ ChatColor.BLUE+ ""String_Node_Str"");
  }
  if (page == 3) {
    p.sendMessage(ChatColor.BLUE + ""String_Node_Str"" + msgmgr.pre+ ChatColor.DARK_AQUA+ ""String_Node_Str""+ ChatColor.BLUE+ ""String_Node_Str"");
  }
  for (  String command : commands.keySet()) {
    try {
      if (helpinfo.get(command) == page) {
        msgmgr.sendMessage(PrefixType.INFO,commands.get(command).help(p),p);
      }
    }
 catch (    Exception e) {
    }
  }
}",0.9626612355736592
161971,"public boolean addPlayer(Player p){
  if (!p.hasPermission(""String_Node_Str"" + gameID)) {
    System.out.println(""String_Node_Str"" + ""String_Node_Str"" + gameID);
    msgmgr.sendFMessage(PrefixType.WARNING,""String_Node_Str"",p);
    return false;
  }
  HookManager.getInstance().runHook(""String_Node_Str"",""String_Node_Str"" + gameID,""String_Node_Str"" + p.getName(),""String_Node_Str"" + spawns.size(),""String_Node_Str"" + activePlayers.size());
  GameManager.getInstance().removeFromOtherQueues(p,gameID);
  if (GameManager.getInstance().getPlayerGameId(p) != -1) {
    if (GameManager.getInstance().isPlayerActive(p)) {
      msgmgr.sendMessage(PrefixType.ERROR,""String_Node_Str"",p);
      return false;
    }
  }
  if (p.isInsideVehicle()) {
    p.leaveVehicle();
  }
  if (spectators.contains(p))   removeSpectator(p);
  if (mode == GameMode.WAITING || mode == GameMode.STARTING) {
    if (activePlayers.size() < SettingsManager.getInstance().getSpawnCount(gameID)) {
      msgmgr.sendMessage(PrefixType.INFO,""String_Node_Str"" + gameID,p);
      PlayerJoinArenaEvent joinarena=new PlayerJoinArenaEvent(p,GameManager.getInstance().getGame(gameID));
      Bukkit.getServer().getPluginManager().callEvent(joinarena);
      boolean placed=false;
      for (int a=1; a <= SettingsManager.getInstance().getSpawnCount(gameID); a++) {
        if (spawns.get(a) == null) {
          placed=true;
          spawns.put(a,p);
          p.teleport(SettingsManager.getInstance().getLobbySpawn());
          p.setGameMode(org.bukkit.GameMode.SURVIVAL);
          saveInv(p);
          clearInv(p);
          p.teleport(SettingsManager.getInstance().getSpawnPoint(gameID,a));
          p.setHealth(p.getMaxHealth());
          p.setFoodLevel(20);
          clearInv(p);
          activePlayers.add(p);
          sm.addPlayer(p,gameID);
          hookvars.put(""String_Node_Str"",activePlayers.size() + ""String_Node_Str"");
          LobbyManager.getInstance().updateWall(gameID);
          showMenu(p);
          HookManager.getInstance().runHook(""String_Node_Str"",""String_Node_Str"" + activePlayers.size());
          break;
        }
      }
      if (!placed) {
        msgmgr.sendFMessage(PrefixType.ERROR,""String_Node_Str"",p,""String_Node_Str"" + gameID);
        return false;
      }
    }
 else     if (SettingsManager.getInstance().getSpawnCount(gameID) == 0) {
      msgmgr.sendMessage(PrefixType.WARNING,""String_Node_Str"" + gameID + ""String_Node_Str"",p);
      return false;
    }
 else {
      msgmgr.sendFMessage(PrefixType.WARNING,""String_Node_Str"",p,""String_Node_Str"" + gameID);
      return false;
    }
    msgFall(PrefixType.INFO,""String_Node_Str"",""String_Node_Str"" + p.getName(),""String_Node_Str"" + getActivePlayers(),""String_Node_Str"" + SettingsManager.getInstance().getSpawnCount(gameID));
    if (activePlayers.size() >= config.getInt(""String_Node_Str"") && !countdownRunning)     countdown(config.getInt(""String_Node_Str""));
    return true;
  }
 else {
    if (config.getBoolean(""String_Node_Str"")) {
      if (!queue.contains(p)) {
        queue.add(p);
        msgmgr.sendFMessage(PrefixType.INFO,""String_Node_Str"",p,""String_Node_Str"" + queue.size());
      }
      int a=1;
      for (      Player qp : queue) {
        if (qp == p) {
          msgmgr.sendFMessage(PrefixType.INFO,""String_Node_Str"",p,""String_Node_Str"" + a);
          break;
        }
        a++;
      }
    }
  }
  if (mode == GameMode.INGAME)   msgmgr.sendFMessage(PrefixType.WARNING,""String_Node_Str"",p);
 else   if (mode == GameMode.DISABLED)   msgmgr.sendFMessage(PrefixType.WARNING,""String_Node_Str"",p,""String_Node_Str"" + gameID);
 else   if (mode == GameMode.RESETING)   msgmgr.sendFMessage(PrefixType.WARNING,""String_Node_Str"",p);
 else   msgmgr.sendMessage(PrefixType.INFO,""String_Node_Str"",p);
  LobbyManager.getInstance().updateWall(gameID);
  return false;
}","public boolean addPlayer(Player p){
  if (!p.hasPermission(""String_Node_Str"" + gameID)) {
    debug(""String_Node_Str"" + ""String_Node_Str"" + gameID);
    msgmgr.sendFMessage(PrefixType.WARNING,""String_Node_Str"",p);
    return false;
  }
  HookManager.getInstance().runHook(""String_Node_Str"",""String_Node_Str"" + gameID,""String_Node_Str"" + p.getName(),""String_Node_Str"" + spawns.size(),""String_Node_Str"" + activePlayers.size());
  GameManager.getInstance().removeFromOtherQueues(p,gameID);
  if (GameManager.getInstance().getPlayerGameId(p) != -1) {
    if (GameManager.getInstance().isPlayerActive(p)) {
      msgmgr.sendMessage(PrefixType.ERROR,""String_Node_Str"",p);
      return false;
    }
  }
  if (p.isInsideVehicle()) {
    p.leaveVehicle();
  }
  if (spectators.contains(p))   removeSpectator(p);
  if (mode == GameMode.WAITING || mode == GameMode.STARTING) {
    if (activePlayers.size() < SettingsManager.getInstance().getSpawnCount(gameID)) {
      msgmgr.sendMessage(PrefixType.INFO,""String_Node_Str"" + gameID,p);
      PlayerJoinArenaEvent joinarena=new PlayerJoinArenaEvent(p,GameManager.getInstance().getGame(gameID));
      Bukkit.getServer().getPluginManager().callEvent(joinarena);
      boolean placed=false;
      for (int a=1; a <= SettingsManager.getInstance().getSpawnCount(gameID); a++) {
        if (spawns.get(a) == null) {
          placed=true;
          spawns.put(a,p);
          p.teleport(SettingsManager.getInstance().getLobbySpawn());
          p.setGameMode(org.bukkit.GameMode.SURVIVAL);
          saveInv(p);
          clearInv(p);
          p.teleport(SettingsManager.getInstance().getSpawnPoint(gameID,a));
          p.setHealth(p.getMaxHealth());
          p.setFoodLevel(20);
          clearInv(p);
          activePlayers.add(p);
          sm.addPlayer(p,gameID);
          hookvars.put(""String_Node_Str"",activePlayers.size() + ""String_Node_Str"");
          LobbyManager.getInstance().updateWall(gameID);
          showMenu(p);
          HookManager.getInstance().runHook(""String_Node_Str"",""String_Node_Str"" + activePlayers.size());
          break;
        }
      }
      if (!placed) {
        msgmgr.sendFMessage(PrefixType.ERROR,""String_Node_Str"",p,""String_Node_Str"" + gameID);
        return false;
      }
    }
 else     if (SettingsManager.getInstance().getSpawnCount(gameID) == 0) {
      msgmgr.sendMessage(PrefixType.WARNING,""String_Node_Str"" + gameID + ""String_Node_Str"",p);
      return false;
    }
 else {
      msgmgr.sendFMessage(PrefixType.WARNING,""String_Node_Str"",p,""String_Node_Str"" + gameID);
      return false;
    }
    msgFall(PrefixType.INFO,""String_Node_Str"",""String_Node_Str"" + p.getName(),""String_Node_Str"" + getActivePlayers(),""String_Node_Str"" + SettingsManager.getInstance().getSpawnCount(gameID));
    if (activePlayers.size() >= config.getInt(""String_Node_Str"") && !countdownRunning)     countdown(config.getInt(""String_Node_Str""));
    return true;
  }
 else {
    if (config.getBoolean(""String_Node_Str"")) {
      if (!queue.contains(p)) {
        queue.add(p);
        msgmgr.sendFMessage(PrefixType.INFO,""String_Node_Str"",p,""String_Node_Str"" + queue.size());
      }
      int a=1;
      for (      Player qp : queue) {
        if (qp == p) {
          msgmgr.sendFMessage(PrefixType.INFO,""String_Node_Str"",p,""String_Node_Str"" + a);
          break;
        }
        a++;
      }
    }
  }
  if (mode == GameMode.INGAME)   msgmgr.sendFMessage(PrefixType.WARNING,""String_Node_Str"",p);
 else   if (mode == GameMode.DISABLED)   msgmgr.sendFMessage(PrefixType.WARNING,""String_Node_Str"",p,""String_Node_Str"" + gameID);
 else   if (mode == GameMode.RESETING)   msgmgr.sendFMessage(PrefixType.WARNING,""String_Node_Str"",p);
 else   msgmgr.sendMessage(PrefixType.INFO,""String_Node_Str"",p);
  LobbyManager.getInstance().updateWall(gameID);
  return false;
}",0.9972609886526672
161972,"public void showMenu(Player p){
  GameManager.getInstance().openKitMenu(p);
  Inventory i=Bukkit.getServer().createInventory(p,90,ChatColor.RED + ""String_Node_Str"" + ChatColor.BOLD+ ""String_Node_Str"");
  int a=0;
  int b=0;
  ArrayList<Kit> kits=GameManager.getInstance().getKits(p);
  if (kits == null || kits.size() == 0) {
    GameManager.getInstance().leaveKitMenu(p);
    return;
  }
  for (  Kit k : kits) {
    ItemStack i1=k.getIcon();
    ItemMeta im=i1.getItemMeta();
    System.out.println(k.getName() + ""String_Node_Str"" + i1+ ""String_Node_Str""+ im);
    im.setDisplayName(ChatColor.GOLD + ""String_Node_Str"" + ChatColor.BOLD+ k.getName());
    i1.setItemMeta(im);
    i.setItem((9 * a) + b,i1);
    a=2;
    for (    ItemStack s2 : k.getContents()) {
      if (s2 != null) {
        i.setItem((9 * a) + b,s2);
        a++;
      }
    }
    a=0;
    b++;
  }
  p.openInventory(i);
  System.out.println(""String_Node_Str"");
}","public void showMenu(Player p){
  GameManager.getInstance().openKitMenu(p);
  Inventory i=Bukkit.getServer().createInventory(p,90,ChatColor.RED + ""String_Node_Str"" + ChatColor.BOLD+ ""String_Node_Str"");
  int a=0;
  int b=0;
  ArrayList<Kit> kits=GameManager.getInstance().getKits(p);
  if (kits == null || kits.size() == 0) {
    GameManager.getInstance().leaveKitMenu(p);
    return;
  }
  for (  Kit k : kits) {
    ItemStack i1=k.getIcon();
    ItemMeta im=i1.getItemMeta();
    debug(k.getName() + ""String_Node_Str"" + i1+ ""String_Node_Str""+ im);
    im.setDisplayName(ChatColor.GOLD + ""String_Node_Str"" + ChatColor.BOLD+ k.getName());
    i1.setItemMeta(im);
    i.setItem((9 * a) + b,i1);
    a=2;
    for (    ItemStack s2 : k.getContents()) {
      if (s2 != null) {
        i.setItem((9 * a) + b,s2);
        a++;
      }
    }
    a=0;
    b++;
  }
  p.openInventory(i);
  debug(""String_Node_Str"");
}",0.9772234273318872
161973,"public void setup(){
  mode=GameMode.LOADING;
  int x=s.getInt(""String_Node_Str"" + gameID + ""String_Node_Str"");
  int y=s.getInt(""String_Node_Str"" + gameID + ""String_Node_Str"");
  int z=s.getInt(""String_Node_Str"" + gameID + ""String_Node_Str"");
  System.out.println(x + ""String_Node_Str"" + y+ ""String_Node_Str""+ z);
  int x1=s.getInt(""String_Node_Str"" + gameID + ""String_Node_Str"");
  int y1=s.getInt(""String_Node_Str"" + gameID + ""String_Node_Str"");
  int z1=s.getInt(""String_Node_Str"" + gameID + ""String_Node_Str"");
  System.out.println(x1 + ""String_Node_Str"" + y1+ ""String_Node_Str""+ z1);
  Location max=new Location(SettingsManager.getGameWorld(gameID),Math.max(x,x1),Math.max(y,y1),Math.max(z,z1));
  System.out.println(max.toString());
  Location min=new Location(SettingsManager.getGameWorld(gameID),Math.min(x,x1),Math.min(y,y1),Math.min(z,z1));
  System.out.println(min.toString());
  arena=new Arena(min,max);
  loadspawns();
  hookvars.put(""String_Node_Str"",gameID + ""String_Node_Str"");
  hookvars.put(""String_Node_Str"",spawnCount + ""String_Node_Str"");
  hookvars.put(""String_Node_Str"",""String_Node_Str"");
  mode=GameMode.WAITING;
}","public void setup(){
  mode=GameMode.LOADING;
  int x=s.getInt(""String_Node_Str"" + gameID + ""String_Node_Str"");
  int y=s.getInt(""String_Node_Str"" + gameID + ""String_Node_Str"");
  int z=s.getInt(""String_Node_Str"" + gameID + ""String_Node_Str"");
  $(x + ""String_Node_Str"" + y+ ""String_Node_Str""+ z);
  int x1=s.getInt(""String_Node_Str"" + gameID + ""String_Node_Str"");
  int y1=s.getInt(""String_Node_Str"" + gameID + ""String_Node_Str"");
  int z1=s.getInt(""String_Node_Str"" + gameID + ""String_Node_Str"");
  $(x1 + ""String_Node_Str"" + y1+ ""String_Node_Str""+ z1);
  Location max=new Location(SettingsManager.getGameWorld(gameID),Math.max(x,x1),Math.max(y,y1),Math.max(z,z1));
  $(max.toString());
  Location min=new Location(SettingsManager.getGameWorld(gameID),Math.min(x,x1),Math.min(y,y1),Math.min(z,z1));
  $(min.toString());
  arena=new Arena(min,max);
  loadspawns();
  hookvars.put(""String_Node_Str"",gameID + ""String_Node_Str"");
  hookvars.put(""String_Node_Str"",spawnCount + ""String_Node_Str"");
  hookvars.put(""String_Node_Str"",""String_Node_Str"");
  mode=GameMode.WAITING;
}",0.4796747967479675
161974,"public void LoadKits(){
  Set<String> kits1=SettingsManager.getInstance().getKits().getConfigurationSection(""String_Node_Str"").getKeys(false);
  System.out.println(kits1);
  for (  String s : kits1) {
    kits.add(new Kit(s));
  }
}","public void LoadKits(){
  Set<String> kits1=SettingsManager.getInstance().getKits().getConfigurationSection(""String_Node_Str"").getKeys(false);
  for (  String s : kits1) {
    kits.add(new Kit(s));
  }
}",0.7264367816091954
161975,"public void LoadGames(){
  FileConfiguration c=SettingsManager.getInstance().getSystemConfig();
  games.clear();
  int no=c.getInt(""String_Node_Str"",0);
  int loaded=0;
  int a=1;
  while (loaded < no) {
    if (c.isSet(""String_Node_Str"" + a + ""String_Node_Str"")) {
      if (c.getBoolean(""String_Node_Str"" + a + ""String_Node_Str"")) {
        System.out.println(""String_Node_Str"" + a);
        loaded++;
        games.add(new Game(a));
        StatsManager.getInstance().addArena(a);
      }
    }
    a++;
  }
  LobbyManager.getInstance().clearAllSigns();
}","public void LoadGames(){
  FileConfiguration c=SettingsManager.getInstance().getSystemConfig();
  games.clear();
  int no=c.getInt(""String_Node_Str"",0);
  int loaded=0;
  int a=1;
  while (loaded < no) {
    if (c.isSet(""String_Node_Str"" + a + ""String_Node_Str"")) {
      if (c.getBoolean(""String_Node_Str"" + a + ""String_Node_Str"")) {
        SurvivalGames.$(""String_Node_Str"" + a);
        loaded++;
        games.add(new Game(a));
        StatsManager.getInstance().addArena(a);
      }
    }
    a++;
  }
  LobbyManager.getInstance().clearAllSigns();
}",0.9739442946990116
161976,"public void loadSign(int a){
  try {
    System.out.println(""String_Node_Str"" + a + ""String_Node_Str"");
    World w=Bukkit.getWorld(s.getString(""String_Node_Str"" + a + ""String_Node_Str""));
    int x1=s.getInt(""String_Node_Str"" + a + ""String_Node_Str"");
    int y1=s.getInt(""String_Node_Str"" + a + ""String_Node_Str"");
    int z1=s.getInt(""String_Node_Str"" + a + ""String_Node_Str"");
    int x2=s.getInt(""String_Node_Str"" + a + ""String_Node_Str"");
    int y2=s.getInt(""String_Node_Str"" + a + ""String_Node_Str"");
    int z2=s.getInt(""String_Node_Str"" + a + ""String_Node_Str"");
    int gameid=s.getInt(""String_Node_Str"" + a + ""String_Node_Str"");
    LobbyWall ls=new LobbyWall(gameid);
    if (ls.loadSign(w,x1,x2,z1,z2,y1)) {
      ArrayList<LobbyWall> t=signs.get(gameid);
      if (t == null) {
        t=new ArrayList<LobbyWall>();
        signs.put(gameid,t);
      }
      t.add(ls);
      ls.update();
    }
 else {
    }
  }
 catch (  Exception e) {
    s.set(""String_Node_Str"" + a,null);
    s.set(""String_Node_Str"",s.getInt(""String_Node_Str"") - 1);
  }
}","public void loadSign(int a){
  try {
    SurvivalGames.debug(""String_Node_Str"" + a + ""String_Node_Str"");
    World w=Bukkit.getWorld(s.getString(""String_Node_Str"" + a + ""String_Node_Str""));
    int x1=s.getInt(""String_Node_Str"" + a + ""String_Node_Str"");
    int y1=s.getInt(""String_Node_Str"" + a + ""String_Node_Str"");
    int z1=s.getInt(""String_Node_Str"" + a + ""String_Node_Str"");
    int x2=s.getInt(""String_Node_Str"" + a + ""String_Node_Str"");
    int y2=s.getInt(""String_Node_Str"" + a + ""String_Node_Str"");
    int z2=s.getInt(""String_Node_Str"" + a + ""String_Node_Str"");
    int gameid=s.getInt(""String_Node_Str"" + a + ""String_Node_Str"");
    LobbyWall ls=new LobbyWall(gameid);
    if (ls.loadSign(w,x1,x2,z1,z2,y1)) {
      ArrayList<LobbyWall> t=signs.get(gameid);
      if (t == null) {
        t=new ArrayList<LobbyWall>();
        signs.put(gameid,t);
      }
      t.add(ls);
      ls.update();
    }
 else {
    }
  }
 catch (  Exception e) {
    s.set(""String_Node_Str"" + a,null);
    s.set(""String_Node_Str"",s.getInt(""String_Node_Str"") - 1);
  }
}",0.9853704577630958
161977,"public boolean loadSign(World w,int x1,int x2,int z1,int z2,int y1){
  boolean usingx=(x1 == x2) ? false : true;
  System.out.println(w + ""String_Node_Str"" + x1+ ""String_Node_Str""+ x2+ ""String_Node_Str""+ z1+ ""String_Node_Str""+ z2+ ""String_Node_Str""+ y1+ ""String_Node_Str""+ usingx);
  int dir=new Location(w,x1,y1,z1).getBlock().getData();
  if (usingx) {
    for (int a=Math.max(x1,x2); a >= Math.min(x1,x2); a--) {
      Location l=new Location(w,a,y1,z1);
      BlockState b=l.getBlock().getState();
      if (b instanceof Sign) {
        signs.add((Sign)b);
        LobbyManager.lobbychunks.add(b.getChunk());
        System.out.println(""String_Node_Str"" + b.getLocation().toString());
      }
 else {
        System.out.println(""String_Node_Str"" + b.getType().toString());
        return false;
      }
    }
  }
 else {
    for (int a=Math.min(z1,z2); a <= Math.max(z1,z2); a++) {
      System.out.println(a);
      Location l=new Location(w,x1,y1,a);
      BlockState b=l.getBlock().getState();
      if (b instanceof Sign) {
        signs.add((Sign)b);
        LobbyManager.lobbychunks.add(b.getChunk());
        System.out.println(""String_Node_Str"" + b.getLocation().toString());
      }
 else {
        System.out.println(""String_Node_Str"" + b.getType().toString());
        return false;
      }
    }
  }
  System.out.println(""String_Node_Str"" + dir);
  if (dir == 3 || dir == 5) {
    Collections.reverse(signs);
  }
  addMsg(""String_Node_Str"");
  addMsg(""String_Node_Str"");
  addMsg(""String_Node_Str"");
  addMsg(""String_Node_Str"" + gameid);
  update();
  return true;
}","public boolean loadSign(World w,int x1,int x2,int z1,int z2,int y1){
  boolean usingx=(x1 == x2) ? false : true;
  SurvivalGames.debug(w + ""String_Node_Str"" + x1+ ""String_Node_Str""+ x2+ ""String_Node_Str""+ z1+ ""String_Node_Str""+ z2+ ""String_Node_Str""+ y1+ ""String_Node_Str""+ usingx);
  int dir=new Location(w,x1,y1,z1).getBlock().getData();
  if (usingx) {
    for (int a=Math.max(x1,x2); a >= Math.min(x1,x2); a--) {
      Location l=new Location(w,a,y1,z1);
      BlockState b=l.getBlock().getState();
      if (b instanceof Sign) {
        signs.add((Sign)b);
        LobbyManager.lobbychunks.add(b.getChunk());
        SurvivalGames.debug(""String_Node_Str"" + b.getLocation().toString());
      }
 else {
        SurvivalGames.debug(""String_Node_Str"" + b.getType().toString());
        return false;
      }
    }
  }
 else {
    for (int a=Math.min(z1,z2); a <= Math.max(z1,z2); a++) {
      SurvivalGames.debug(a);
      Location l=new Location(w,x1,y1,a);
      BlockState b=l.getBlock().getState();
      if (b instanceof Sign) {
        signs.add((Sign)b);
        LobbyManager.lobbychunks.add(b.getChunk());
        SurvivalGames.debug(""String_Node_Str"" + b.getLocation().toString());
      }
 else {
        SurvivalGames.debug(""String_Node_Str"" + b.getType().toString());
        return false;
      }
    }
  }
  SurvivalGames.debug(""String_Node_Str"" + dir);
  if (dir == 3 || dir == 5) {
    Collections.reverse(signs);
  }
  addMsg(""String_Node_Str"");
  addMsg(""String_Node_Str"");
  addMsg(""String_Node_Str"");
  addMsg(""String_Node_Str"" + gameid);
  update();
  return true;
}",0.9271523178807948
161978,"public void run(){
  ArrayList<BlockData> data=queue.get(id);
  if (data != null) {
    int a=data.size() - 1;
    int rb=0;
    while (a >= 0 && (rb < 100 || shutdown)) {
      System.out.println(""String_Node_Str"" + a);
      BlockData result=data.get(a);
      if (result.getGameId() == game.getID()) {
        data.remove(a);
        Location l=new Location(Bukkit.getWorld(result.getWorld()),result.getX(),result.getY(),result.getZ());
        Block b=l.getBlock();
        b.setTypeIdAndData(result.getPrevid(),result.getPrevdata(),false);
        b.getState().update();
        rb++;
      }
      a--;
    }
    if (a != -1) {
      Bukkit.getScheduler().scheduleSyncDelayedTask(GameManager.getInstance().getPlugin(),new Rollback(id,shutdown),1);
    }
 else {
      System.out.println(""String_Node_Str"" + id + ""String_Node_Str"");
      game.resetCallback();
    }
  }
 else {
    System.out.println(""String_Node_Str"" + id + ""String_Node_Str"");
    game.resetCallback();
  }
}","public void run(){
  ArrayList<BlockData> data=queue.get(id);
  if (data != null) {
    int a=data.size() - 1;
    int rb=0;
    while (a >= 0 && (rb < 100 || shutdown)) {
      SurvivalGames.debug(""String_Node_Str"" + a);
      BlockData result=data.get(a);
      if (result.getGameId() == game.getID()) {
        data.remove(a);
        Location l=new Location(Bukkit.getWorld(result.getWorld()),result.getX(),result.getY(),result.getZ());
        Block b=l.getBlock();
        b.setTypeIdAndData(result.getPrevid(),result.getPrevdata(),false);
        b.getState().update();
        rb++;
      }
      a--;
    }
    if (a != -1) {
      Bukkit.getScheduler().scheduleSyncDelayedTask(GameManager.getInstance().getPlugin(),new Rollback(id,shutdown),1);
    }
 else {
      SurvivalGames.$(""String_Node_Str"" + id + ""String_Node_Str"");
      game.resetCallback();
    }
  }
 else {
    SurvivalGames.$(""String_Node_Str"" + id + ""String_Node_Str"");
    game.resetCallback();
  }
}",0.9535951045385008
161979,"public void load(){
  FileConfiguration c=SettingsManager.getInstance().getKits();
  cost=c.getDouble(""String_Node_Str"" + name + ""String_Node_Str"",0);
  icon=ItemReader.read(c.getString(""String_Node_Str"" + name + ""String_Node_Str""));
  System.out.println(icon);
  List<String> cont=c.getStringList(""String_Node_Str"" + name + ""String_Node_Str"");
  for (  String s : cont) {
    System.out.println(s);
    items.add(ItemReader.read(s));
  }
}","public void load(){
  FileConfiguration c=SettingsManager.getInstance().getKits();
  cost=c.getDouble(""String_Node_Str"" + name + ""String_Node_Str"",0);
  icon=ItemReader.read(c.getString(""String_Node_Str"" + name + ""String_Node_Str""));
  System.out.println(icon);
  List<String> cont=c.getStringList(""String_Node_Str"" + name + ""String_Node_Str"");
  for (  String s : cont) {
    items.add(ItemReader.read(s));
  }
}",0.9683470105509964
161980,"public static String replaceVars(String msg,String[] vars){
  for (  String str : vars) {
    String[] s=str.split(""String_Node_Str"");
    varcache.put(s[0],s[1]);
  }
  for (  String str : varcache.keySet()) {
    try {
      msg=msg.replace(""String_Node_Str"" + str + ""String_Node_Str"",varcache.get(str));
    }
 catch (    Exception e) {
      System.out.println(""String_Node_Str"" + str);
    }
  }
  return msg;
}","public static String replaceVars(String msg,String[] vars){
  for (  String str : vars) {
    String[] s=str.split(""String_Node_Str"");
    varcache.put(s[0],s[1]);
  }
  for (  String str : varcache.keySet()) {
    try {
      msg=msg.replace(""String_Node_Str"" + str + ""String_Node_Str"",varcache.get(str));
    }
 catch (    Exception e) {
      SurvivalGames.$(Level.WARNING,""String_Node_Str"" + str);
    }
  }
  return msg;
}",0.8351126927639383
161981,"public void check(Player player,Plugin p){
  String response=""String_Node_Str"";
  String data=""String_Node_Str"";
  String v=p.getDescription().getVersion();
  String ip=Bukkit.getIp();
  int port=Bukkit.getPort();
  try {
    data=URLEncoder.encode(""String_Node_Str"",""String_Node_Str"") + ""String_Node_Str"" + URLEncoder.encode(v,""String_Node_Str"");
    data+=""String_Node_Str"" + URLEncoder.encode(""String_Node_Str"",""String_Node_Str"") + ""String_Node_Str""+ URLEncoder.encode(ip,""String_Node_Str"");
    data+=""String_Node_Str"" + URLEncoder.encode(""String_Node_Str"",""String_Node_Str"") + ""String_Node_Str""+ URLEncoder.encode(""String_Node_Str"" + port,""String_Node_Str"");
    URL url=new URL(""String_Node_Str"");
    URLConnection conn=url.openConnection();
    conn.setDoOutput(true);
    OutputStreamWriter wr=new OutputStreamWriter(conn.getOutputStream());
    wr.write(data);
    wr.flush();
    BufferedReader rd=new BufferedReader(new InputStreamReader(conn.getInputStream()));
    String line;
    while ((line=rd.readLine()) != null) {
      response=line;
    }
    String[] in=response.split(""String_Node_Str"");
    Boolean b=Boolean.parseBoolean(in[0]);
    if (b) {
      player.sendMessage(ChatColor.DARK_BLUE + ""String_Node_Str"");
      player.sendMessage(ChatColor.DARK_RED + ""String_Node_Str"");
      player.sendMessage(ChatColor.DARK_AQUA + ""String_Node_Str"" + ChatColor.GOLD+ v+ ChatColor.DARK_AQUA+ ""String_Node_Str""+ ChatColor.GOLD+ in[1]);
      player.sendMessage(ChatColor.DARK_AQUA + in[2]);
      player.sendMessage(ChatColor.AQUA + ""String_Node_Str"" + ChatColor.UNDERLINE+ in[3]);
      player.sendMessage(ChatColor.DARK_BLUE + ""String_Node_Str"");
      System.out.println(""String_Node_Str"");
    }
 else {
      System.out.println(""String_Node_Str"");
    }
  }
 catch (  Exception e) {
    e.printStackTrace();
    System.out.println(""String_Node_Str"");
  }
}","public void check(Player player,Plugin p){
  String response=""String_Node_Str"";
  String data=""String_Node_Str"";
  String v=p.getDescription().getVersion();
  String ip=Bukkit.getIp();
  int port=Bukkit.getPort();
  try {
    data=URLEncoder.encode(""String_Node_Str"",""String_Node_Str"") + ""String_Node_Str"" + URLEncoder.encode(v,""String_Node_Str"");
    data+=""String_Node_Str"" + URLEncoder.encode(""String_Node_Str"",""String_Node_Str"") + ""String_Node_Str""+ URLEncoder.encode(ip,""String_Node_Str"");
    data+=""String_Node_Str"" + URLEncoder.encode(""String_Node_Str"",""String_Node_Str"") + ""String_Node_Str""+ URLEncoder.encode(""String_Node_Str"" + port,""String_Node_Str"");
    URL url=new URL(""String_Node_Str"");
    URLConnection conn=url.openConnection();
    conn.setDoOutput(true);
    OutputStreamWriter wr=new OutputStreamWriter(conn.getOutputStream());
    wr.write(data);
    wr.flush();
    BufferedReader rd=new BufferedReader(new InputStreamReader(conn.getInputStream()));
    String line;
    while ((line=rd.readLine()) != null) {
      response=line;
    }
    String[] in=response.split(""String_Node_Str"");
    Boolean b=Boolean.parseBoolean(in[0]);
    if (b) {
      player.sendMessage(ChatColor.DARK_BLUE + ""String_Node_Str"");
      player.sendMessage(ChatColor.DARK_RED + ""String_Node_Str"");
      player.sendMessage(ChatColor.DARK_AQUA + ""String_Node_Str"" + ChatColor.GOLD+ v+ ChatColor.DARK_AQUA+ ""String_Node_Str""+ ChatColor.GOLD+ in[1]);
      player.sendMessage(ChatColor.DARK_AQUA + in[2]);
      player.sendMessage(ChatColor.AQUA + ""String_Node_Str"" + ChatColor.UNDERLINE+ in[3]);
      player.sendMessage(ChatColor.DARK_BLUE + ""String_Node_Str"");
      SurvivalGames.$(""String_Node_Str"");
    }
 else {
      SurvivalGames.$(""String_Node_Str"");
    }
  }
 catch (  Exception e) {
    SurvivalGames.$(Level.WARNING,""String_Node_Str"");
  }
}",0.9651847884306374
161982,"/** 
 * Sets custom provide key/value as custom property.
 * @param key String with key for the property
 * @param value String with value for the property
 */
public void setProperty(String key,String value){
  UserData.setCustomProperty(key,value);
}","/** 
 * Sets custom provide key/value as custom property.
 * @param key String with key for the property
 * @param value String with value for the property
 */
public void setProperty(String key,String value){
  UserData.modifyCustomData(key,value,""String_Node_Str"");
}",0.9251439539347408
161983,"public boolean execute(String action,JSONArray args,CallbackContext callbackContext) throws JSONException {
  Context context=this.cordova.getActivity().getApplicationContext();
  if (""String_Node_Str"".equals(action)) {
    String serverUrl=args.getString(0);
    String appKey=args.getString(1);
    if (args.length() == 2) {
      Countly.sharedInstance().init(context,serverUrl,appKey,null,DeviceId.Type.OPEN_UDID);
    }
 else     if (args.length() == 3) {
      String yourDeviceID=args.getString(2);
      Countly.sharedInstance().init(context,serverUrl,appKey,yourDeviceID,null);
    }
 else {
      Countly.sharedInstance().init(context,serverUrl,appKey,null,DeviceId.Type.ADVERTISING_ID);
    }
    Countly.sharedInstance().onStart(this.cordova.getActivity());
    callbackContext.success(""String_Node_Str"");
    return true;
  }
 else   if (""String_Node_Str"".equals(action)) {
    String newDeviceID=args.getString(0);
    Countly.sharedInstance().changeDeviceId(newDeviceID);
    callbackContext.success(""String_Node_Str"");
    return true;
  }
 else   if (""String_Node_Str"".equals(action)) {
    int isEnabled=Integer.parseInt(args.getString(0));
    if (isEnabled == 1) {
      Countly.sharedInstance().setHttpPostForced(true);
    }
 else {
      Countly.sharedInstance().setHttpPostForced(false);
    }
    callbackContext.success(""String_Node_Str"");
    return true;
  }
 else   if (""String_Node_Str"".equals(action)) {
    String salt=args.getString(0);
    Countly.sharedInstance().enableParameterTamperingProtection(salt);
    callbackContext.success(""String_Node_Str"");
    return true;
  }
 else   if (""String_Node_Str"".equals(action)) {
    double latitude=Double.parseDouble(args.getString(0));
    double longitude=Double.parseDouble(args.getString(1));
    Countly.sharedInstance().setLocation(latitude,longitude);
    callbackContext.success(""String_Node_Str"");
    return true;
  }
 else   if (""String_Node_Str"".equals(action)) {
    Countly.sharedInstance().enableCrashReporting();
    callbackContext.success(""String_Node_Str"");
    return true;
  }
 else   if (""String_Node_Str"".equals(action)) {
    String record=args.getString(0);
    Countly.sharedInstance().addCrashLog(record);
    callbackContext.success(""String_Node_Str"");
    return true;
  }
 else   if (""String_Node_Str"".equals(action)) {
    Countly.sharedInstance().onStart(this.cordova.getActivity());
    callbackContext.success(""String_Node_Str"");
    return true;
  }
 else   if (""String_Node_Str"".equals(action)) {
    Countly.sharedInstance().onStop();
    callbackContext.success(""String_Node_Str"");
    return true;
  }
 else   if (""String_Node_Str"".equals(action)) {
    String startEvent=args.getString(0);
    Countly.sharedInstance().startEvent(startEvent);
    return true;
  }
 else   if (""String_Node_Str"".equals(action)) {
    String eventType=args.getString(0);
    if (""String_Node_Str"".equals(eventType)) {
      String eventName=args.getString(1);
      Countly.sharedInstance().endEvent(eventName);
      callbackContext.success(""String_Node_Str"");
    }
 else     if (""String_Node_Str"".equals(eventType)) {
      String eventName=args.getString(1);
      int eventCount=Integer.parseInt(args.getString(2));
      float eventSum=new Float(args.getString(3)).floatValue();
      HashMap<String,String> segmentation=new HashMap<String,String>();
      for (int i=4, il=args.length(); i < il; i+=2) {
        segmentation.put(args.getString(i),args.getString(i + 1));
      }
      Countly.sharedInstance().endEvent(eventName,segmentation,eventCount,eventSum);
      callbackContext.success(""String_Node_Str"");
    }
 else {
      callbackContext.success(""String_Node_Str"");
    }
    return true;
  }
 else   if (""String_Node_Str"".equals(action)) {
    String eventType=args.getString(0);
    if (""String_Node_Str"".equals(eventType)) {
      String eventName=args.getString(1);
      int eventCount=Integer.parseInt(args.getString(2));
      Countly.sharedInstance().recordEvent(eventName,eventCount);
      callbackContext.success(""String_Node_Str"");
    }
 else     if (""String_Node_Str"".equals(eventType)) {
      String eventName=args.getString(1);
      int eventCount=Integer.parseInt(args.getString(2));
      float eventSum=new Float(args.getString(3)).floatValue();
      Countly.sharedInstance().recordEvent(eventName,eventCount,eventSum);
      callbackContext.success(""String_Node_Str"");
    }
 else     if (""String_Node_Str"".equals(eventType)) {
      String eventName=args.getString(1);
      int eventCount=Integer.parseInt(args.getString(2));
      HashMap<String,String> segmentation=new HashMap<String,String>();
      for (int i=3, il=args.length(); i < il; i+=2) {
        segmentation.put(args.getString(i),args.getString(i + 1));
      }
      Countly.sharedInstance().recordEvent(eventName,segmentation,eventCount);
      callbackContext.success(""String_Node_Str"");
    }
 else     if (""String_Node_Str"".equals(eventType)) {
      String eventName=args.getString(1);
      int eventCount=Integer.parseInt(args.getString(2));
      float eventSum=new Float(args.getString(3)).floatValue();
      HashMap<String,String> segmentation=new HashMap<String,String>();
      for (int i=4, il=args.length(); i < il; i+=2) {
        segmentation.put(args.getString(i),args.getString(i + 1));
      }
      Countly.sharedInstance().recordEvent(eventName,segmentation,eventCount,eventSum);
      callbackContext.success(""String_Node_Str"");
    }
 else {
      callbackContext.success(""String_Node_Str"");
    }
    return true;
  }
 else   if (""String_Node_Str"".equals(action)) {
    Countly.sharedInstance().setLoggingEnabled(true);
    callbackContext.success(""String_Node_Str"");
    return true;
  }
 else   if (""String_Node_Str"".equals(action)) {
    Map<String,String> bundle=new HashMap<String,String>();
    bundle.put(""String_Node_Str"",args.getString(0));
    bundle.put(""String_Node_Str"",args.getString(1));
    bundle.put(""String_Node_Str"",args.getString(2));
    bundle.put(""String_Node_Str"",args.getString(3));
    bundle.put(""String_Node_Str"",args.getString(4));
    bundle.put(""String_Node_Str"",args.getString(5));
    bundle.put(""String_Node_Str"",args.getString(6));
    bundle.put(""String_Node_Str"",args.getString(7));
    bundle.put(""String_Node_Str"",String.valueOf(args.getInt(8)));
    Countly.userData.setUserData(bundle);
    Countly.userData.save();
    callbackContext.success(""String_Node_Str"");
    return true;
  }
 else   if (""String_Node_Str"".equals(action)) {
    String keyName=args.getString(0);
    String keyValue=args.getString(1);
    Countly.userData.setProperty(keyName,keyValue);
    Countly.userData.save();
    callbackContext.success(""String_Node_Str"");
    return true;
  }
 else   if (""String_Node_Str"".equals(action)) {
    String keyName=args.getString(0);
    Countly.userData.increment(keyName);
    Countly.userData.save();
    callbackContext.success(""String_Node_Str"");
    return true;
  }
 else   if (""String_Node_Str"".equals(action)) {
    String keyName=args.getString(0);
    int keyIncrement=Integer.parseInt(args.getString(1));
    Countly.userData.incrementBy(keyName,keyIncrement);
    Countly.userData.save();
    callbackContext.success(""String_Node_Str"");
    return true;
  }
 else   if (""String_Node_Str"".equals(action)) {
    String keyName=args.getString(0);
    int multiplyValue=Integer.parseInt(args.getString(1));
    Countly.userData.multiply(keyName,multiplyValue);
    Countly.userData.save();
    callbackContext.success(""String_Node_Str"");
    return true;
  }
 else   if (""String_Node_Str"".equals(action)) {
    String keyName=args.getString(0);
    int maxScore=Integer.parseInt(args.getString(1));
    Countly.userData.saveMax(keyName,maxScore);
    Countly.userData.save();
    callbackContext.success(""String_Node_Str"");
    return true;
  }
 else   if (""String_Node_Str"".equals(action)) {
    String keyName=args.getString(0);
    int minScore=Integer.parseInt(args.getString(1));
    Countly.userData.saveMin(keyName,minScore);
    Countly.userData.save();
    callbackContext.success(""String_Node_Str"");
    return true;
  }
 else   if (""String_Node_Str"".equals(action)) {
    String keyName=args.getString(0);
    String minScore=args.getString(1);
    Countly.userData.setOnce(keyName,minScore);
    Countly.userData.save();
    callbackContext.success(""String_Node_Str"");
    return true;
  }
 else   if (""String_Node_Str"".equals(action)) {
    String registrationId=args.getString(0);
    int messagingMode=Integer.parseInt(args.getString(1));
    String projectId=args.getString(2);
    Countly.CountlyMessagingMode mode=null;
    if (messagingMode == 0) {
      mode=Countly.CountlyMessagingMode.TEST;
    }
 else {
      mode=Countly.CountlyMessagingMode.PRODUCTION;
    }
    Countly.sharedInstance().onRegistrationId(registrationId,mode);
    callbackContext.success(""String_Node_Str"");
    Log.e(""String_Node_Str"",registrationId);
    return true;
  }
 else   if (""String_Node_Str"".equals(action)) {
    String viewName=args.getString(0);
    Countly.sharedInstance().recordView(viewName);
    callbackContext.success(""String_Node_Str"" + viewName);
    return true;
  }
 else   if (""String_Node_Str"".equals(action)) {
    String city=args.getString(0);
    String country=args.getString(1);
    double latitude=Double.parseDouble(args.getString(2));
    double longitude=Double.parseDouble(args.getString(3));
    Countly.sharedInstance().setOptionalParametersForInitialization(country,city,latitude + ""String_Node_Str"" + longitude);
    callbackContext.success(""String_Node_Str"");
    return true;
  }
 else {
    return false;
  }
}","public boolean execute(String action,JSONArray args,CallbackContext callbackContext) throws JSONException {
  Context context=this.cordova.getActivity().getApplicationContext();
  if (""String_Node_Str"".equals(action)) {
    String serverUrl=args.getString(0);
    String appKey=args.getString(1);
    if (args.length() == 2) {
      Countly.sharedInstance().init(context,serverUrl,appKey,null,DeviceId.Type.OPEN_UDID);
    }
 else     if (args.length() == 3) {
      String yourDeviceID=args.getString(2);
      Countly.sharedInstance().init(context,serverUrl,appKey,yourDeviceID,null);
    }
 else {
      Countly.sharedInstance().init(context,serverUrl,appKey,null,DeviceId.Type.ADVERTISING_ID);
    }
    Countly.sharedInstance().onStart(this.cordova.getActivity());
    callbackContext.success(""String_Node_Str"");
    return true;
  }
 else   if (""String_Node_Str"".equals(action)) {
    String newDeviceID=args.getString(0);
    Countly.sharedInstance().changeDeviceId(newDeviceID);
    callbackContext.success(""String_Node_Str"");
    return true;
  }
 else   if (""String_Node_Str"".equals(action)) {
    int isEnabled=Integer.parseInt(args.getString(0));
    if (isEnabled == 1) {
      Countly.sharedInstance().setHttpPostForced(true);
    }
 else {
      Countly.sharedInstance().setHttpPostForced(false);
    }
    callbackContext.success(""String_Node_Str"");
    return true;
  }
 else   if (""String_Node_Str"".equals(action)) {
    String salt=args.getString(0);
    Countly.sharedInstance().enableParameterTamperingProtection(salt);
    callbackContext.success(""String_Node_Str"");
    return true;
  }
 else   if (""String_Node_Str"".equals(action)) {
    double latitude=Double.parseDouble(args.getString(0));
    double longitude=Double.parseDouble(args.getString(1));
    Countly.sharedInstance().setLocation(latitude,longitude);
    callbackContext.success(""String_Node_Str"");
    return true;
  }
 else   if (""String_Node_Str"".equals(action)) {
    Countly.sharedInstance().enableCrashReporting();
    callbackContext.success(""String_Node_Str"");
    return true;
  }
 else   if (""String_Node_Str"".equals(action)) {
    String record=args.getString(0);
    Countly.sharedInstance().addCrashLog(record);
    callbackContext.success(""String_Node_Str"");
    return true;
  }
 else   if (""String_Node_Str"".equals(action)) {
    Countly.sharedInstance().onStart(this.cordova.getActivity());
    callbackContext.success(""String_Node_Str"");
    return true;
  }
 else   if (""String_Node_Str"".equals(action)) {
    Countly.sharedInstance().onStop();
    callbackContext.success(""String_Node_Str"");
    return true;
  }
 else   if (""String_Node_Str"".equals(action)) {
    String startEvent=args.getString(0);
    Countly.sharedInstance().startEvent(startEvent);
    return true;
  }
 else   if (""String_Node_Str"".equals(action)) {
    String eventType=args.getString(0);
    if (""String_Node_Str"".equals(eventType)) {
      String eventName=args.getString(1);
      Countly.sharedInstance().endEvent(eventName);
      callbackContext.success(""String_Node_Str"");
    }
 else     if (""String_Node_Str"".equals(eventType)) {
      String eventName=args.getString(1);
      int eventCount=Integer.parseInt(args.getString(2));
      float eventSum=new Float(args.getString(3)).floatValue();
      HashMap<String,String> segmentation=new HashMap<String,String>();
      for (int i=4, il=args.length(); i < il; i+=2) {
        segmentation.put(args.getString(i),args.getString(i + 1));
      }
      Countly.sharedInstance().endEvent(eventName,segmentation,eventCount,eventSum);
      callbackContext.success(""String_Node_Str"");
    }
 else {
      callbackContext.success(""String_Node_Str"");
    }
    return true;
  }
 else   if (""String_Node_Str"".equals(action)) {
    String eventType=args.getString(0);
    if (""String_Node_Str"".equals(eventType)) {
      String eventName=args.getString(1);
      int eventCount=Integer.parseInt(args.getString(2));
      Countly.sharedInstance().recordEvent(eventName,eventCount);
      callbackContext.success(""String_Node_Str"");
    }
 else     if (""String_Node_Str"".equals(eventType)) {
      String eventName=args.getString(1);
      int eventCount=Integer.parseInt(args.getString(2));
      float eventSum=new Float(args.getString(3)).floatValue();
      Countly.sharedInstance().recordEvent(eventName,eventCount,eventSum);
      callbackContext.success(""String_Node_Str"");
    }
 else     if (""String_Node_Str"".equals(eventType)) {
      String eventName=args.getString(1);
      int eventCount=Integer.parseInt(args.getString(2));
      HashMap<String,String> segmentation=new HashMap<String,String>();
      for (int i=3, il=args.length(); i < il; i+=2) {
        segmentation.put(args.getString(i),args.getString(i + 1));
      }
      Countly.sharedInstance().recordEvent(eventName,segmentation,eventCount);
      callbackContext.success(""String_Node_Str"");
    }
 else     if (""String_Node_Str"".equals(eventType)) {
      String eventName=args.getString(1);
      int eventCount=Integer.parseInt(args.getString(2));
      float eventSum=new Float(args.getString(3)).floatValue();
      HashMap<String,String> segmentation=new HashMap<String,String>();
      for (int i=4, il=args.length(); i < il; i+=2) {
        segmentation.put(args.getString(i),args.getString(i + 1));
      }
      Countly.sharedInstance().recordEvent(eventName,segmentation,eventCount,eventSum);
      callbackContext.success(""String_Node_Str"");
    }
 else {
      callbackContext.success(""String_Node_Str"");
    }
    return true;
  }
 else   if (""String_Node_Str"".equals(action)) {
    Countly.sharedInstance().setLoggingEnabled(true);
    callbackContext.success(""String_Node_Str"");
    return true;
  }
 else   if (""String_Node_Str"".equals(action)) {
    Map<String,String> bundle=new HashMap<String,String>();
    bundle.put(""String_Node_Str"",args.getString(0));
    bundle.put(""String_Node_Str"",args.getString(1));
    bundle.put(""String_Node_Str"",args.getString(2));
    bundle.put(""String_Node_Str"",args.getString(3));
    bundle.put(""String_Node_Str"",args.getString(4));
    bundle.put(""String_Node_Str"",args.getString(5));
    bundle.put(""String_Node_Str"",args.getString(6));
    bundle.put(""String_Node_Str"",args.getString(7));
    bundle.put(""String_Node_Str"",String.valueOf(args.getInt(8)));
    Countly.userData.setUserData(bundle);
    Countly.userData.save();
    callbackContext.success(""String_Node_Str"");
    return true;
  }
 else   if (""String_Node_Str"".equals(action)) {
    String keyName=args.getString(0);
    String keyValue=args.getString(1);
    Countly.userData.setProperty(keyName,keyValue);
    Countly.userData.save();
    callbackContext.success(""String_Node_Str"");
    return true;
  }
 else   if (""String_Node_Str"".equals(action)) {
    String keyName=args.getString(0);
    Countly.userData.increment(keyName);
    Countly.userData.save();
    callbackContext.success(""String_Node_Str"");
    return true;
  }
 else   if (""String_Node_Str"".equals(action)) {
    String keyName=args.getString(0);
    int keyIncrement=Integer.parseInt(args.getString(1));
    Countly.userData.incrementBy(keyName,keyIncrement);
    Countly.userData.save();
    callbackContext.success(""String_Node_Str"");
    return true;
  }
 else   if (""String_Node_Str"".equals(action)) {
    String keyName=args.getString(0);
    int multiplyValue=Integer.parseInt(args.getString(1));
    Countly.userData.multiply(keyName,multiplyValue);
    Countly.userData.save();
    callbackContext.success(""String_Node_Str"");
    return true;
  }
 else   if (""String_Node_Str"".equals(action)) {
    String keyName=args.getString(0);
    int maxScore=Integer.parseInt(args.getString(1));
    Countly.userData.saveMax(keyName,maxScore);
    Countly.userData.save();
    callbackContext.success(""String_Node_Str"");
    return true;
  }
 else   if (""String_Node_Str"".equals(action)) {
    String keyName=args.getString(0);
    int minScore=Integer.parseInt(args.getString(1));
    Countly.userData.saveMin(keyName,minScore);
    Countly.userData.save();
    callbackContext.success(""String_Node_Str"");
    return true;
  }
 else   if (""String_Node_Str"".equals(action)) {
    String keyName=args.getString(0);
    String minScore=args.getString(1);
    Countly.userData.setOnce(keyName,minScore);
    Countly.userData.save();
    callbackContext.success(""String_Node_Str"");
    return true;
  }
 else   if (""String_Node_Str"".equals(action)) {
    String registrationId=args.getString(0);
    int messagingMode=Integer.parseInt(args.getString(1));
    String projectId=args.getString(2);
    Countly.CountlyMessagingMode mode=null;
    if (messagingMode == 1) {
      mode=Countly.CountlyMessagingMode.TEST;
    }
 else {
      mode=Countly.CountlyMessagingMode.PRODUCTION;
    }
    Countly.sharedInstance().onRegistrationId(registrationId,mode);
    callbackContext.success(""String_Node_Str"");
    Log.e(""String_Node_Str"",registrationId);
    return true;
  }
 else   if (""String_Node_Str"".equals(action)) {
    String viewName=args.getString(0);
    Countly.sharedInstance().recordView(viewName);
    callbackContext.success(""String_Node_Str"" + viewName);
    return true;
  }
 else   if (""String_Node_Str"".equals(action)) {
    String city=args.getString(0);
    String country=args.getString(1);
    double latitude=Double.parseDouble(args.getString(2));
    double longitude=Double.parseDouble(args.getString(3));
    Countly.sharedInstance().setOptionalParametersForInitialization(country,city,latitude + ""String_Node_Str"" + longitude);
    callbackContext.success(""String_Node_Str"");
    return true;
  }
 else {
    return false;
  }
}",0.9998963623173386
161984,"private <T>T postForObject(String url,T object,Class<T> objectClass,String... params){
  return restTemplate.postForObject(url,object,objectClass,enrichParams(params));
}","private <T>T postForObject(String url,T object,Class<T> objectClass,String... params){
  logger.debug(""String_Node_Str"",url,objectClass.getCanonicalName(),params);
  return restTemplate.postForObject(url,object,objectClass,enrichParams(params));
}",0.815347721822542
161985,"private void postForLocation(String url,Object object,String... params){
  restTemplate.postForLocation(url,object,enrichParams(params));
}","private void postForLocation(String url,Object object,String... params){
  logger.debug(""String_Node_Str"",url,object.getClass().getCanonicalName(),params);
  restTemplate.postForLocation(url,object,enrichParams(params));
}",0.7700831024930748
161986,"private <T>T get(String url,Class<T> objectClass,String... params){
  return restTemplate.getForObject(url,objectClass,enrichParams(params));
}","private <T>T get(String url,Class<T> objectClass,String... params){
  logger.debug(""String_Node_Str"",url,objectClass.getCanonicalName(),params);
  return restTemplate.getForObject(url,objectClass,enrichParams(params));
}",0.7878787878787878
161987,"public TrelloUrl params(Argument... args){
  TrelloUrl.args=args;
  return this;
}","public TrelloUrl params(Argument... args){
  this.args=args;
  return this;
}",0.9182389937106918
161988,"static void configureDefaultProperties(SessionFactory sessionFactory,Properties properties){
  if (properties == null) {
    DEFAULT_PROPERTIES.remove(sessionFactory);
  }
 else {
    DEFAULT_PROPERTIES.put(sessionFactory,properties);
  }
}","static void configureDefaultProperties(SessionFactory sessionFactory,Properties properties){
  if (properties == null) {
    DEFAULT_PROPERTIES.remove(sessionFactory);
    DEFAULT_USEJDBC42.remove(sessionFactory);
  }
 else {
    DEFAULT_PROPERTIES.put(sessionFactory,properties);
  }
}",0.9125475285171104
161989,"@Override public <T>T clone(T obj,CloneDriver context,IdentityHashMap<Object,Object> referencesToReuse){
  if (obj == null) {
    return null;
  }
  if (context.isImmutableInstance(obj)) {
    return obj;
  }
  @SuppressWarnings(""String_Node_Str"") final Class<T> clazz=(Class<T>)obj.getClass();
  if (clazz.isPrimitive() || clazz.isEnum()) {
    return obj;
  }
  if (ClassUtils.isJdkImmutable(clazz) || ClassUtils.isWrapper(clazz) || context.getImmutableClasses().contains(clazz)|| context.getNonCloneableClasses().contains(clazz)) {
    return obj;
  }
  @SuppressWarnings(""String_Node_Str"") final T result=(T)referencesToReuse.get(obj);
  if (result != null) {
    return result;
  }
  final CloneImplementor cloneImplementor;
  if (context.isUseCloneImplementors()) {
    cloneImplementor=context.getImplementor(clazz);
  }
 else {
    cloneImplementor=context.getBuiltInImplementor(clazz);
  }
  if (cloneImplementor != null) {
    T copy=cloneImplementor.clone(obj,context,referencesToReuse);
    referencesToReuse.put(obj,copy);
    return copy;
  }
  P model=getClassModel(obj.getClass());
  if (model.isDetectedAsImmutable() || model.isNonCloneable()) {
    return obj;
  }
  final org.jadira.cloning.annotation.Cloneable cloneableAnnotation=clazz.getAnnotation(org.jadira.cloning.annotation.Cloneable.class);
  if (cloneableAnnotation != null && !void.class.equals(cloneableAnnotation.implementor())) {
    final T copy=handleCloneImplementor(obj,context,referencesToReuse,clazz,cloneableAnnotation);
    referencesToReuse.put(obj,copy);
    return result;
  }
  if (model.getCloneImplementor() != null) {
    final T copy=model.getCloneImplementor().clone(obj,context,referencesToReuse);
    referencesToReuse.put(obj,copy);
    return result;
  }
  if (context.isUseCloneable() && Cloneable.class.isAssignableFrom(clazz)) {
    final T copy=handleCloneableCloneMethod(obj,context,referencesToReuse,clazz,cloneableAnnotation);
    referencesToReuse.put(obj,copy);
    return result;
  }
  if (clazz.isArray()) {
    final T copy=handleArray(obj,context,referencesToReuse);
    referencesToReuse.put(obj,copy);
    return copy;
  }
  final T copy=newInstance(clazz);
  referencesToReuse.put(obj,copy);
  for (  F f : model.getModelFields()) {
    if (!context.isCloneTransientFields() && f.isTransientField()) {
      handleTransientField(copy,f);
    }
 else     if (!context.isCloneTransientAnnotatedFields() && f.isTransientAnnotatedField()) {
      handleTransientField(copy,f);
    }
 else {
      handleCloneField(obj,copy,context,f,referencesToReuse);
    }
  }
  return copy;
}","@Override public <T>T clone(T obj,CloneDriver context,IdentityHashMap<Object,Object> referencesToReuse){
  if (obj == null) {
    return null;
  }
  if (context.isImmutableInstance(obj)) {
    return obj;
  }
  @SuppressWarnings(""String_Node_Str"") final Class<T> clazz=(Class<T>)obj.getClass();
  if (clazz.isPrimitive() || clazz.isEnum()) {
    return obj;
  }
  if (ClassUtils.isJdkImmutable(clazz) || ClassUtils.isWrapper(clazz) || context.getImmutableClasses().contains(clazz)|| context.getNonCloneableClasses().contains(clazz)) {
    return obj;
  }
  @SuppressWarnings(""String_Node_Str"") final T result=(T)referencesToReuse.get(obj);
  if (result != null) {
    return result;
  }
  final CloneImplementor cloneImplementor;
  if (context.isUseCloneImplementors()) {
    cloneImplementor=context.getImplementor(clazz);
  }
 else {
    cloneImplementor=context.getBuiltInImplementor(clazz);
  }
  if (cloneImplementor != null) {
    T copy=cloneImplementor.clone(obj,context,referencesToReuse);
    referencesToReuse.put(obj,copy);
    return copy;
  }
  P model=getClassModel(obj.getClass());
  if (model.isDetectedAsImmutable() || model.isNonCloneable()) {
    return obj;
  }
  final org.jadira.cloning.annotation.Cloneable cloneableAnnotation=clazz.getAnnotation(org.jadira.cloning.annotation.Cloneable.class);
  if (cloneableAnnotation != null && !void.class.equals(cloneableAnnotation.implementor())) {
    final T copy=handleCloneImplementor(obj,context,referencesToReuse,clazz,cloneableAnnotation);
    referencesToReuse.put(obj,copy);
    return copy;
  }
  if (model.getCloneImplementor() != null) {
    final T copy=model.getCloneImplementor().clone(obj,context,referencesToReuse);
    referencesToReuse.put(obj,copy);
    return copy;
  }
  if (context.isUseCloneable() && Cloneable.class.isAssignableFrom(clazz)) {
    final T copy=handleCloneableCloneMethod(obj,context,referencesToReuse,clazz,cloneableAnnotation);
    referencesToReuse.put(obj,copy);
    return copy;
  }
  if (clazz.isArray()) {
    final T copy=handleArray(obj,context,referencesToReuse);
    referencesToReuse.put(obj,copy);
    return copy;
  }
  final T copy=newInstance(clazz);
  referencesToReuse.put(obj,copy);
  for (  F f : model.getModelFields()) {
    if (!context.isCloneTransientFields() && f.isTransientField()) {
      handleTransientField(copy,f);
    }
 else     if (!context.isCloneTransientAnnotatedFields() && f.isTransientAnnotatedField()) {
      handleTransientField(copy,f);
    }
 else {
      handleCloneField(obj,copy,context,f,referencesToReuse);
    }
  }
  return copy;
}",0.9942129629629628
161990,"/** 
 * {@inheritDoc}
 */
@Override public <T>T clone(T obj){
  return UNSAFE_OPERATIONS.deepCopy(obj);
}","/** 
 * {@inheritDoc}
 */
@Override public <T>T clone(T obj){
  return clone(obj,this,new IdentityHashMap<>());
}",0.7339449541284404
161991,"public final Object deepCopyArray(Object origFieldValue,IdentityHashMap<Object,Object> visited){
  if (visited.containsKey(origFieldValue)) {
    return visited.get(origFieldValue);
  }
  final Class<?> componentType=origFieldValue.getClass().getComponentType();
  Object result=null;
  if (componentType.getName().length() <= 7) {
    if (java.lang.Boolean.TYPE.isAssignableFrom(componentType)) {
      result=Arrays.copyOf((boolean[])origFieldValue,((boolean[])origFieldValue).length);
    }
 else     if (java.lang.Byte.TYPE.isAssignableFrom(componentType)) {
      result=Arrays.copyOf((byte[])origFieldValue,((byte[])origFieldValue).length);
    }
 else     if (java.lang.Character.TYPE.isAssignableFrom(componentType)) {
      result=Arrays.copyOf((char[])origFieldValue,((char[])origFieldValue).length);
    }
 else     if (java.lang.Short.TYPE.isAssignableFrom(componentType)) {
      result=Arrays.copyOf((short[])origFieldValue,((short[])origFieldValue).length);
    }
 else     if (java.lang.Integer.TYPE.isAssignableFrom(componentType)) {
      result=Arrays.copyOf((int[])origFieldValue,((int[])origFieldValue).length);
    }
 else     if (java.lang.Long.TYPE.isAssignableFrom(componentType)) {
      result=Arrays.copyOf((long[])origFieldValue,((long[])origFieldValue).length);
    }
 else     if (java.lang.Float.TYPE.isAssignableFrom(componentType)) {
      result=Arrays.copyOf((float[])origFieldValue,((float[])origFieldValue).length);
    }
 else     if (java.lang.Double.TYPE.isAssignableFrom(componentType)) {
      result=Arrays.copyOf((double[])origFieldValue,((double[])origFieldValue).length);
    }
  }
  if (result == null) {
    Object[] array=Arrays.copyOf((Object[])origFieldValue,((Object[])origFieldValue).length);
    if (array.length > 0) {
      if (componentType.isArray()) {
        for (int i=0; i < array.length; i++) {
          array[i]=deepCopyArray(array[i],visited);
        }
      }
 else {
        for (int i=0; i < array.length; i++) {
          Object component=deepCopy(origFieldValue,visited);
          array[i]=component;
        }
      }
    }
    result=array;
  }
  visited.put(origFieldValue,result);
  return result;
}","public final Object deepCopyArray(Object origFieldValue,IdentityHashMap<Object,Object> visited){
  if (visited.containsKey(origFieldValue)) {
    return visited.get(origFieldValue);
  }
  final Class<?> componentType=origFieldValue.getClass().getComponentType();
  Object result=null;
  if (componentType.getName().length() <= 7) {
    if (java.lang.Boolean.TYPE == componentType) {
      result=Arrays.copyOf((boolean[])origFieldValue,((boolean[])origFieldValue).length);
    }
 else     if (java.lang.Byte.TYPE == componentType) {
      result=Arrays.copyOf((byte[])origFieldValue,((byte[])origFieldValue).length);
    }
 else     if (java.lang.Character.TYPE == componentType) {
      result=Arrays.copyOf((char[])origFieldValue,((char[])origFieldValue).length);
    }
 else     if (java.lang.Short.TYPE == componentType) {
      result=Arrays.copyOf((short[])origFieldValue,((short[])origFieldValue).length);
    }
 else     if (java.lang.Integer.TYPE == componentType) {
      result=Arrays.copyOf((int[])origFieldValue,((int[])origFieldValue).length);
    }
 else     if (java.lang.Long.TYPE == componentType) {
      result=Arrays.copyOf((long[])origFieldValue,((long[])origFieldValue).length);
    }
 else     if (java.lang.Float.TYPE == componentType) {
      result=Arrays.copyOf((float[])origFieldValue,((float[])origFieldValue).length);
    }
 else     if (java.lang.Double.TYPE == componentType) {
      result=Arrays.copyOf((double[])origFieldValue,((double[])origFieldValue).length);
    }
  }
  if (result == null) {
    Object[] array=Arrays.copyOf((Object[])origFieldValue,((Object[])origFieldValue).length);
    if (array.length > 0) {
      if (componentType.isArray()) {
        for (int i=0; i < array.length; i++) {
          array[i]=deepCopyArray(array[i],visited);
        }
      }
 else {
        for (int i=0; i < array.length; i++) {
          Object component=deepCopy(array[i],visited);
          array[i]=component;
        }
      }
    }
    result=array;
  }
  visited.put(origFieldValue,result);
  return result;
}",0.9474929044465468
161992,"/** 
 * {@inheritDoc}
 */
@Override public <T>T clone(T obj){
  return clone(obj,this,new IdentityHashMap<>());
}","/** 
 * {@inheritDoc}
 */
@Override public <T>T clone(T obj){
  return clone(obj,this,new IdentityHashMap<Object,Object>());
}",0.9456066945606696
161993,"/** 
 * Determines the ID for the entity
 * @param entity The entity to retrieve the ID for
 * @return The ID
 */
protected ID extractId(T entity){
  Class<?> entityClass=TypeHelper.getTypeArguments(JpaBaseRepository.class,this.getClass()).get(0);
  SessionFactory sf=((HibernateEntityManagerFactory)getEntityManager().getEntityManagerFactory()).getSessionFactory();
  ClassMetadata cmd=sf.getClassMetadata(entityClass);
  @SuppressWarnings(""String_Node_Str"") ID result=(ID)cmd.getIdentifier(entity,(SessionImplementor)((HibernateEntityManagerFactory)getEntityManager().getDelegate()));
  return result;
}","/** 
 * Determines the ID for the entity
 * @param entity The entity to retrieve the ID for
 * @return The ID
 */
protected ID extractId(T entity){
  final Class<?> entityClass=TypeHelper.getTypeArguments(JpaBaseRepository.class,this.getClass()).get(0);
  final SessionFactory sf=((HibernateEntityManagerFactory)getEntityManager().getEntityManagerFactory()).getSessionFactory();
  final ClassMetadata cmd=sf.getClassMetadata(entityClass);
  final SessionImplementor si=(SessionImplementor)(getEntityManager().getDelegate());
  @SuppressWarnings(""String_Node_Str"") final ID result=(ID)cmd.getIdentifier(entity,si);
  return result;
}",0.8407437348423605
161994,"private static Method obtainDeclaredMethod(Class<?> clazz,String methodName,Class<?>... params){
  try {
    final Method method=clazz.getMethod(methodName,params);
    method.setAccessible(true);
    return method;
  }
 catch (  SecurityException ex1) {
    throw new ReflectionException(""String_Node_Str"" + methodName + ""String_Node_Str""+ ex1.getMessage(),ex1);
  }
catch (  NoSuchMethodException ex2) {
    throw new ReflectionException(""String_Node_Str"" + methodName + ""String_Node_Str""+ ex2.getMessage(),ex2);
  }
}","private static Method obtainDeclaredMethod(Class<?> clazz,String methodName,Class<?>... params){
  try {
    final Method method=clazz.getDeclaredMethod(methodName,params);
    method.setAccessible(true);
    return method;
  }
 catch (  SecurityException ex1) {
    throw new ReflectionException(""String_Node_Str"" + methodName + ""String_Node_Str""+ ex1.getMessage(),ex1);
  }
catch (  NoSuchMethodException ex2) {
    throw new ReflectionException(""String_Node_Str"" + methodName + ""String_Node_Str""+ ex2.getMessage(),ex2);
  }
}",0.9923664122137404
161995,"@Override public String toNonNullValue(LocalDateTime value){
  String formatted=LOCAL_DATETIME_FORMATTER.print(value);
  return formatted;
}","@Override public String toNonNullValue(LocalDateTime value){
  String formatted=LOCAL_DATETIME_PRINTER.print(value);
  return formatted;
}",0.9712230215827338
161996,"@Override public LocalDateTime fromNonNullValue(String s){
  return LOCAL_DATETIME_FORMATTER.parseDateTime(s).toLocalDateTime();
}","@Override public LocalDateTime fromNonNullValue(String s){
  return LOCAL_DATETIME_PARSER.parseDateTime(s).toLocalDateTime();
}",0.9649805447470816
161997,"@SuppressWarnings({""String_Node_Str"",""String_Node_Str""}) public void nullSafeSet(PreparedStatement preparedStatement,Object value,int index) throws HibernateException, SQLException {
  if (value == null) {
    for (int i=0; i < getColumnMappers().length; i++) {
      ColumnMapper<?,?> nextMapper=getColumnMappers()[i];
      if (Hibernate36Helper.isHibernate36ApiAvailable()) {
        Hibernate36Helper.nullSafeSet(nextMapper,preparedStatement,null,index);
      }
 else {
        ((org.hibernate.type.NullableType)nextMapper.getHibernateType()).nullSafeSet(preparedStatement,null,index);
      }
    }
  }
 else {
    final T myValue=(T)value;
    Object[] convertedColumns=toConvertedColumns(myValue);
    for (int i=0; i < getColumnMappers().length; i++) {
      ColumnMapper nextMapper=getColumnMappers()[i];
      if (Hibernate36Helper.isHibernate36ApiAvailable()) {
        Hibernate36Helper.nullSafeSet(nextMapper,preparedStatement,nextMapper.toNonNullValue(convertedColumns[i]),index + i);
      }
 else {
        ((org.hibernate.type.NullableType)nextMapper.getHibernateType()).nullSafeSet(preparedStatement,nextMapper.toNonNullValue(convertedColumns[i]),index + i);
      }
    }
  }
}","@SuppressWarnings({""String_Node_Str"",""String_Node_Str""}) public void nullSafeSet(PreparedStatement preparedStatement,Object value,int index) throws HibernateException, SQLException {
  if (value == null) {
    for (int i=0; i < getColumnMappers().length; i++) {
      ColumnMapper<?,?> nextMapper=getColumnMappers()[i];
      if (Hibernate36Helper.isHibernate36ApiAvailable()) {
        Hibernate36Helper.nullSafeSet(nextMapper,preparedStatement,null,index + i);
      }
 else {
        ((org.hibernate.type.NullableType)nextMapper.getHibernateType()).nullSafeSet(preparedStatement,null,index + i);
      }
    }
  }
 else {
    final T myValue=(T)value;
    Object[] convertedColumns=toConvertedColumns(myValue);
    for (int i=0; i < getColumnMappers().length; i++) {
      ColumnMapper nextMapper=getColumnMappers()[i];
      if (Hibernate36Helper.isHibernate36ApiAvailable()) {
        Hibernate36Helper.nullSafeSet(nextMapper,preparedStatement,nextMapper.toNonNullValue(convertedColumns[i]),index + i);
      }
 else {
        ((org.hibernate.type.NullableType)nextMapper.getHibernateType()).nullSafeSet(preparedStatement,nextMapper.toNonNullValue(convertedColumns[i]),index + i);
      }
    }
  }
}",0.9966694421315572
161998,"@Override public ColumnMapper<?,?>[] getColumnMappers(){
  return columnMappers;
}","@Override protected ColumnMapper<?,?>[] getColumnMappers(){
  return columnMappers;
}",0.934131736526946
161999,"@Override public ColumnMapper<?,?>[] getColumnMappers(){
  return columnMappers;
}","@Override protected ColumnMapper<?,?>[] getColumnMappers(){
  return columnMappers;
}",0.934131736526946
162000,"@Override public ColumnMapper<?,?>[] getColumnMappers(){
  return columnMappers;
}","@Override protected ColumnMapper<?,?>[] getColumnMappers(){
  return columnMappers;
}",0.934131736526946
