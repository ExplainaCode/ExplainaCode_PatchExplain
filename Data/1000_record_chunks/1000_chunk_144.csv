record_number,buggy_code,fixed_code,code_similarity
143001,"private RankingTopComponent(){
  setName(NbBundle.getMessage(RankingTopComponent.class,""String_Node_Str""));
  setToolTipText(NbBundle.getMessage(RankingTopComponent.class,""String_Node_Str""));
  setIcon(ImageUtilities.loadImage(ICON_PATH));
  RankingController rankingController=Lookup.getDefault().lookup(RankingController.class);
  rankingModel=rankingController.getRankingModel();
  initEvents();
  initComponents();
  initSouth();
  if (UIUtils.isAquaLookAndFeel()) {
    mainPanel.setBackground(UIManager.getColor(""String_Node_Str""));
  }
  refreshModel();
}","private RankingTopComponent(){
  setName(NbBundle.getMessage(RankingTopComponent.class,""String_Node_Str""));
  setToolTipText(NbBundle.getMessage(RankingTopComponent.class,""String_Node_Str""));
  setIcon(ImageUtilities.loadImage(ICON_PATH));
  RankingController rankingController=Lookup.getDefault().lookup(RankingController.class);
  rankingModel=rankingController.getRankingModel();
  initEvents();
  initComponents();
  initSouth();
  if (UIUtils.isAquaLookAndFeel()) {
    mainPanel.setBackground(UIManager.getColor(""String_Node_Str""));
  }
  refreshModel();
  final ProjectController pc=Lookup.getDefault().lookup(ProjectController.class);
  if (pc.getCurrentWorkspace() != null) {
    ((RankingChooser)rankingChooser).refreshModel();
  }
}",0.8613026819923372
143002,"public RankingModelImpl(){
  final ProjectController pc=Lookup.getDefault().lookup(ProjectController.class);
  final AttributeController ac=Lookup.getDefault().lookup(AttributeController.class);
  pc.addWorkspaceListener(new WorkspaceListener(){
    public void initialize(    Workspace workspace){
    }
    public void select(    Workspace workspace){
      nodeColumnsResult=ac.getModel().getNodeTable().getLookup().lookupResult(AttributeColumn.class);
      edgeColumnsResult=ac.getModel().getEdgeTable().getLookup().lookupResult(AttributeColumn.class);
      nodeColumnsResult.addLookupListener(RankingModelImpl.this);
      edgeColumnsResult.addLookupListener(RankingModelImpl.this);
    }
    public void unselect(    Workspace workspace){
      nodeColumnsResult.removeLookupListener(RankingModelImpl.this);
      edgeColumnsResult.removeLookupListener(RankingModelImpl.this);
      nodeColumnsResult=null;
      edgeColumnsResult=null;
    }
    public void close(    Workspace workspace){
    }
    public void disable(){
    }
  }
);
}","public RankingModelImpl(){
  final ProjectController pc=Lookup.getDefault().lookup(ProjectController.class);
  final AttributeController ac=Lookup.getDefault().lookup(AttributeController.class);
  pc.addWorkspaceListener(new WorkspaceListener(){
    public void initialize(    Workspace workspace){
    }
    public void select(    Workspace workspace){
      nodeColumnsResult=ac.getModel().getNodeTable().getLookup().lookupResult(AttributeColumn.class);
      edgeColumnsResult=ac.getModel().getEdgeTable().getLookup().lookupResult(AttributeColumn.class);
      nodeColumnsResult.addLookupListener(RankingModelImpl.this);
      edgeColumnsResult.addLookupListener(RankingModelImpl.this);
    }
    public void unselect(    Workspace workspace){
      nodeColumnsResult.removeLookupListener(RankingModelImpl.this);
      edgeColumnsResult.removeLookupListener(RankingModelImpl.this);
      nodeColumnsResult=null;
      edgeColumnsResult=null;
    }
    public void close(    Workspace workspace){
    }
    public void disable(){
    }
  }
);
  if (pc.getCurrentWorkspace() != null) {
    nodeColumnsResult=ac.getModel().getNodeTable().getLookup().lookupResult(AttributeColumn.class);
    edgeColumnsResult=ac.getModel().getEdgeTable().getLookup().lookupResult(AttributeColumn.class);
    nodeColumnsResult.addLookupListener(RankingModelImpl.this);
    edgeColumnsResult.addLookupListener(RankingModelImpl.this);
  }
}",0.8483373884833739
143003,"public ProjectControllerImpl(){
  longTaskExecutor=new LongTaskExecutor(true,""String_Node_Str"");
  longTaskExecutor.setDefaultErrorHandler(new LongTaskErrorHandler(){
    public void fatalError(    Throwable t){
      unlockProjectActions();
      Logger.getLogger(""String_Node_Str"").log(Level.WARNING,""String_Node_Str"",t.getCause());
    }
  }
);
  longTaskExecutor.setLongTaskListener(new LongTaskListener(){
    public void taskFinished(    LongTask task){
      unlockProjectActions();
    }
  }
);
  listeners=new ArrayList<WorkspaceListener>();
  listeners.addAll(Lookup.getDefault().lookupAll(WorkspaceListener.class));
  saveProject=false;
  saveAsProject=false;
  projectProperties=false;
  closeProject=false;
  newWorkspace=false;
  deleteWorkspace=false;
  cleanWorkspace=false;
  duplicateWorkspace=false;
}","public ProjectControllerImpl(){
  longTaskExecutor=new LongTaskExecutor(true,""String_Node_Str"");
  longTaskExecutor.setDefaultErrorHandler(new LongTaskErrorHandler(){
    public void fatalError(    Throwable t){
      unlockProjectActions();
      if (t instanceof GephiFormatException && t.getCause() == null) {
        NotifyDescriptor.Message msg=new NotifyDescriptor.Message(t.getMessage(),NotifyDescriptor.WARNING_MESSAGE);
        DialogDisplayer.getDefault().notify(msg);
      }
      Logger.getLogger(""String_Node_Str"").log(Level.WARNING,""String_Node_Str"",t.getCause());
    }
  }
);
  longTaskExecutor.setLongTaskListener(new LongTaskListener(){
    public void taskFinished(    LongTask task){
      unlockProjectActions();
    }
  }
);
  listeners=new ArrayList<WorkspaceListener>();
  listeners.addAll(Lookup.getDefault().lookupAll(WorkspaceListener.class));
  saveProject=false;
  saveAsProject=false;
  projectProperties=false;
  closeProject=false;
  newWorkspace=false;
  deleteWorkspace=false;
  cleanWorkspace=false;
  duplicateWorkspace=false;
}",0.870026525198939
143004,"public void fatalError(Throwable t){
  unlockProjectActions();
  Logger.getLogger(""String_Node_Str"").log(Level.WARNING,""String_Node_Str"",t.getCause());
}","public void fatalError(Throwable t){
  unlockProjectActions();
  if (t instanceof GephiFormatException && t.getCause() == null) {
    NotifyDescriptor.Message msg=new NotifyDescriptor.Message(t.getMessage(),NotifyDescriptor.WARNING_MESSAGE);
    DialogDisplayer.getDefault().notify(msg);
  }
  Logger.getLogger(""String_Node_Str"").log(Level.WARNING,""String_Node_Str"",t.getCause());
}",0.4037383177570093
143005,"public void action(){
  final String LAST_PATH=""String_Node_Str"";
  final String LAST_PATH_DEFAULT=""String_Node_Str"";
  final ExportController exportController=Lookup.getDefault().lookup(ExportController.class);
  if (exportController == null) {
    return;
  }
  String lastPathDefault=NbPreferences.forModule(GraphFileExporterUI.class).get(LAST_PATH_DEFAULT,null);
  String lastPath=NbPreferences.forModule(GraphFileExporterUI.class).get(LAST_PATH,lastPathDefault);
  FlowLayout layout=new FlowLayout(FlowLayout.RIGHT);
  JPanel optionsPanel=new JPanel(layout);
  final JButton optionsButton=new JButton(NbBundle.getMessage(GraphFileExporterUI.class,""String_Node_Str""));
  optionsPanel.add(optionsButton);
  optionsButton.addActionListener(new ActionListener(){
    public void actionPerformed(    ActionEvent e){
      ExporterUI exporterUI=exportController.getUI(selectedExporter);
      if (exporterUI != null) {
        JPanel panel=exporterUI.getPanel();
        exporterUI.setup(selectedExporter);
        DialogDescriptor dd=new DialogDescriptor(panel,NbBundle.getMessage(GraphFileExporterUI.class,""String_Node_Str"",selectedExporter.getName()));
        Object result=DialogDisplayer.getDefault().notify(dd);
        exporterUI.unsetup(result == NotifyDescriptor.OK_OPTION);
      }
    }
  }
);
  final JPanel southPanel=new JPanel(new BorderLayout());
  southPanel.add(optionsPanel,BorderLayout.NORTH);
  GraphFileExporterUIPanel graphSettings=new GraphFileExporterUIPanel();
  graphSettings.setVisibleOnlyGraph(visibleOnlyGraph);
  southPanel.add(graphSettings,BorderLayout.CENTER);
  final JFileChooser chooser=new JFileChooser(lastPath){
    @Override protected JDialog createDialog(    Component parent) throws HeadlessException {
      JDialog dialog=super.createDialog(parent);
      Component c=dialog.getContentPane().getComponent(0);
      if (c != null && c instanceof JComponent) {
        Insets insets=((JComponent)c).getInsets();
        southPanel.setBorder(BorderFactory.createEmptyBorder(insets.top,insets.left,insets.bottom,insets.right));
      }
      dialog.getContentPane().add(southPanel,BorderLayout.SOUTH);
      return dialog;
    }
    @Override public void approveSelection(){
      if (canExport(this)) {
        super.approveSelection();
      }
    }
  }
;
  chooser.setDialogTitle(NbBundle.getMessage(GraphFileExporterUI.class,""String_Node_Str""));
  chooser.addPropertyChangeListener(JFileChooser.FILE_FILTER_CHANGED_PROPERTY,new PropertyChangeListener(){
    public void propertyChange(    PropertyChangeEvent evt){
      DialogFileFilter fileFilter=(DialogFileFilter)evt.getNewValue();
      selectedExporter=getExporter(fileFilter);
      if (selectedExporter != null && exportController.hasUI(selectedExporter)) {
        optionsButton.setEnabled(true);
      }
 else {
        optionsButton.setEnabled(false);
      }
      if (selectedFile != null) {
        String filePath=selectedFile.getAbsolutePath();
        filePath=filePath.substring(0,filePath.lastIndexOf(""String_Node_Str""));
        filePath=filePath.concat(fileFilter.getExtensions().get(0));
        selectedFile=new File(filePath);
        chooser.setSelectedFile(selectedFile);
      }
    }
  }
);
  chooser.addPropertyChangeListener(JFileChooser.SELECTED_FILE_CHANGED_PROPERTY,new PropertyChangeListener(){
    public void propertyChange(    PropertyChangeEvent evt){
      if (evt.getNewValue() != null) {
        selectedFile=(File)evt.getNewValue();
      }
    }
  }
);
  DialogFileFilter defaultFilter=null;
  for (  FileExporter graphFileExporter : exportController.getGraphFileExporters()) {
    for (    FileType fileType : graphFileExporter.getFileTypes()) {
      DialogFileFilter dialogFileFilter=new DialogFileFilter(fileType.getName());
      dialogFileFilter.addExtensions(fileType.getExtensions());
      if (defaultFilter == null) {
        defaultFilter=dialogFileFilter;
      }
      chooser.addChoosableFileFilter(dialogFileFilter);
    }
  }
  chooser.setAcceptAllFileFilterUsed(false);
  chooser.setFileFilter(defaultFilter);
  selectedFile=new File(chooser.getCurrentDirectory(),""String_Node_Str"" + defaultFilter.getExtensions().get(0));
  chooser.setSelectedFile(selectedFile);
  int returnFile=chooser.showSaveDialog(null);
  if (returnFile == JFileChooser.APPROVE_OPTION) {
    File file=chooser.getSelectedFile();
    file=FileUtil.normalizeFile(file);
    FileObject fileObject=FileUtil.toFileObject(file);
    NbPreferences.forModule(GraphFileExporterUI.class).put(LAST_PATH,file.getAbsolutePath());
    visibleOnlyGraph=graphSettings.isVisibleOnlyGraph();
    exportController.doExport(selectedExporter,fileObject,visibleOnlyGraph);
  }
}","public void action(){
  final String LAST_PATH=""String_Node_Str"";
  final String LAST_PATH_DEFAULT=""String_Node_Str"";
  final ExportController exportController=Lookup.getDefault().lookup(ExportController.class);
  if (exportController == null) {
    return;
  }
  String lastPathDefault=NbPreferences.forModule(GraphFileExporterUI.class).get(LAST_PATH_DEFAULT,null);
  String lastPath=NbPreferences.forModule(GraphFileExporterUI.class).get(LAST_PATH,lastPathDefault);
  FlowLayout layout=new FlowLayout(FlowLayout.RIGHT);
  JPanel optionsPanel=new JPanel(layout);
  final JButton optionsButton=new JButton(NbBundle.getMessage(GraphFileExporterUI.class,""String_Node_Str""));
  optionsPanel.add(optionsButton);
  optionsButton.addActionListener(new ActionListener(){
    public void actionPerformed(    ActionEvent e){
      ExporterUI exporterUI=exportController.getUI(selectedExporter);
      if (exporterUI != null) {
        JPanel panel=exporterUI.getPanel();
        exporterUI.setup(selectedExporter);
        DialogDescriptor dd=new DialogDescriptor(panel,NbBundle.getMessage(GraphFileExporterUI.class,""String_Node_Str"",selectedExporter.getName()));
        Object result=DialogDisplayer.getDefault().notify(dd);
        exporterUI.unsetup(result == NotifyDescriptor.OK_OPTION);
      }
    }
  }
);
  final JPanel southPanel=new JPanel(new BorderLayout());
  southPanel.add(optionsPanel,BorderLayout.NORTH);
  GraphFileExporterUIPanel graphSettings=new GraphFileExporterUIPanel();
  graphSettings.setVisibleOnlyGraph(visibleOnlyGraph);
  southPanel.add(graphSettings,BorderLayout.CENTER);
  final JFileChooser chooser=new JFileChooser(lastPath){
    @Override protected JDialog createDialog(    Component parent) throws HeadlessException {
      JDialog dialog=super.createDialog(parent);
      Component c=dialog.getContentPane().getComponent(0);
      if (c != null && c instanceof JComponent) {
        Insets insets=((JComponent)c).getInsets();
        southPanel.setBorder(BorderFactory.createEmptyBorder(insets.top,insets.left,insets.bottom,insets.right));
      }
      dialog.getContentPane().add(southPanel,BorderLayout.SOUTH);
      return dialog;
    }
    @Override public void approveSelection(){
      if (canExport(this)) {
        super.approveSelection();
      }
    }
  }
;
  chooser.setDialogTitle(NbBundle.getMessage(GraphFileExporterUI.class,""String_Node_Str""));
  chooser.addPropertyChangeListener(JFileChooser.FILE_FILTER_CHANGED_PROPERTY,new PropertyChangeListener(){
    public void propertyChange(    PropertyChangeEvent evt){
      DialogFileFilter fileFilter=(DialogFileFilter)evt.getNewValue();
      selectedExporter=getExporter(fileFilter);
      if (selectedExporter != null && exportController.hasUI(selectedExporter)) {
        optionsButton.setEnabled(true);
      }
 else {
        optionsButton.setEnabled(false);
      }
      if (selectedFile != null && fileFilter != null) {
        String filePath=selectedFile.getAbsolutePath();
        filePath=filePath.substring(0,filePath.lastIndexOf(""String_Node_Str""));
        filePath=filePath.concat(fileFilter.getExtensions().get(0));
        selectedFile=new File(filePath);
        chooser.setSelectedFile(selectedFile);
      }
    }
  }
);
  chooser.addPropertyChangeListener(JFileChooser.SELECTED_FILE_CHANGED_PROPERTY,new PropertyChangeListener(){
    public void propertyChange(    PropertyChangeEvent evt){
      if (evt.getNewValue() != null) {
        selectedFile=(File)evt.getNewValue();
      }
    }
  }
);
  DialogFileFilter defaultFilter=null;
  for (  FileExporter graphFileExporter : exportController.getGraphFileExporters()) {
    for (    FileType fileType : graphFileExporter.getFileTypes()) {
      DialogFileFilter dialogFileFilter=new DialogFileFilter(fileType.getName());
      dialogFileFilter.addExtensions(fileType.getExtensions());
      if (defaultFilter == null) {
        defaultFilter=dialogFileFilter;
      }
      chooser.addChoosableFileFilter(dialogFileFilter);
    }
  }
  chooser.setAcceptAllFileFilterUsed(false);
  chooser.setFileFilter(defaultFilter);
  selectedFile=new File(chooser.getCurrentDirectory(),""String_Node_Str"" + defaultFilter.getExtensions().get(0));
  chooser.setSelectedFile(selectedFile);
  int returnFile=chooser.showSaveDialog(null);
  if (returnFile == JFileChooser.APPROVE_OPTION) {
    File file=chooser.getSelectedFile();
    file=FileUtil.normalizeFile(file);
    FileObject fileObject=FileUtil.toFileObject(file);
    NbPreferences.forModule(GraphFileExporterUI.class).put(LAST_PATH,file.getAbsolutePath());
    visibleOnlyGraph=graphSettings.isVisibleOnlyGraph();
    exportController.doExport(selectedExporter,fileObject,visibleOnlyGraph);
  }
}",0.9976575809199318
143006,"public void action(){
  final String LAST_PATH=""String_Node_Str"";
  final String LAST_PATH_DEFAULT=""String_Node_Str"";
  final ExportController exportController=Lookup.getDefault().lookup(ExportController.class);
  if (exportController == null) {
    return;
  }
  String lastPathDefault=NbPreferences.forModule(VectorialFileExporterUI.class).get(LAST_PATH_DEFAULT,null);
  String lastPath=NbPreferences.forModule(VectorialFileExporterUI.class).get(LAST_PATH,lastPathDefault);
  FlowLayout layout=new FlowLayout(FlowLayout.RIGHT);
  JPanel optionsPanel=new JPanel(layout);
  final JButton optionsButton=new JButton(NbBundle.getMessage(VectorialFileExporterUI.class,""String_Node_Str""));
  optionsPanel.add(optionsButton);
  optionsButton.addActionListener(new ActionListener(){
    public void actionPerformed(    ActionEvent e){
      ExporterUI exporterUI=exportController.getUI(selectedExporter);
      if (exporterUI != null) {
        JPanel panel=exporterUI.getPanel();
        exporterUI.setup(selectedExporter);
        DialogDescriptor dd=new DialogDescriptor(panel,NbBundle.getMessage(VectorialFileExporterUI.class,""String_Node_Str"",selectedExporter.getName()));
        Object result=DialogDisplayer.getDefault().notify(dd);
        exporterUI.unsetup(result == NotifyDescriptor.OK_OPTION);
      }
    }
  }
);
  final JPanel southPanel=new JPanel(new BorderLayout());
  southPanel.add(optionsPanel,BorderLayout.NORTH);
  final JFileChooser chooser=new JFileChooser(lastPath){
    @Override protected JDialog createDialog(    Component parent) throws HeadlessException {
      JDialog dialog=super.createDialog(parent);
      Component c=dialog.getContentPane().getComponent(0);
      if (c != null && c instanceof JComponent) {
        Insets insets=((JComponent)c).getInsets();
        southPanel.setBorder(BorderFactory.createEmptyBorder(insets.top,insets.left,insets.bottom,insets.right));
      }
      dialog.getContentPane().add(southPanel,BorderLayout.SOUTH);
      return dialog;
    }
    @Override public void approveSelection(){
      if (canExport(this)) {
        super.approveSelection();
      }
    }
  }
;
  chooser.setDialogTitle(NbBundle.getMessage(VectorialFileExporterUI.class,""String_Node_Str""));
  chooser.addPropertyChangeListener(JFileChooser.FILE_FILTER_CHANGED_PROPERTY,new PropertyChangeListener(){
    public void propertyChange(    PropertyChangeEvent evt){
      DialogFileFilter fileFilter=(DialogFileFilter)evt.getNewValue();
      selectedExporter=getExporter(fileFilter);
      if (selectedExporter != null && exportController.hasUI(selectedExporter)) {
        optionsButton.setEnabled(true);
      }
 else {
        optionsButton.setEnabled(false);
      }
      if (selectedFile != null) {
        String filePath=selectedFile.getAbsolutePath();
        filePath=filePath.substring(0,filePath.lastIndexOf(""String_Node_Str""));
        filePath=filePath.concat(fileFilter.getExtensions().get(0));
        selectedFile=new File(filePath);
        chooser.setSelectedFile(selectedFile);
      }
    }
  }
);
  chooser.addPropertyChangeListener(JFileChooser.SELECTED_FILE_CHANGED_PROPERTY,new PropertyChangeListener(){
    public void propertyChange(    PropertyChangeEvent evt){
      if (evt.getNewValue() != null) {
        selectedFile=(File)evt.getNewValue();
      }
    }
  }
);
  DialogFileFilter defaultFilter=null;
  for (  FileExporter vectorialFileExporter : exportController.getVectorialFileExporters()) {
    for (    FileType fileType : vectorialFileExporter.getFileTypes()) {
      DialogFileFilter dialogFileFilter=new DialogFileFilter(fileType.getName());
      dialogFileFilter.addExtensions(fileType.getExtensions());
      if (defaultFilter == null) {
        defaultFilter=dialogFileFilter;
      }
      chooser.addChoosableFileFilter(dialogFileFilter);
    }
  }
  chooser.setAcceptAllFileFilterUsed(false);
  chooser.setFileFilter(defaultFilter);
  selectedFile=new File(chooser.getCurrentDirectory(),""String_Node_Str"" + defaultFilter.getExtensions().get(0));
  chooser.setSelectedFile(selectedFile);
  int returnFile=chooser.showSaveDialog(null);
  if (returnFile == JFileChooser.APPROVE_OPTION) {
    File file=chooser.getSelectedFile();
    file=FileUtil.normalizeFile(file);
    FileObject fileObject=FileUtil.toFileObject(file);
    NbPreferences.forModule(VectorialFileExporterUI.class).put(LAST_PATH,file.getAbsolutePath());
    exportController.doExport(selectedExporter,fileObject);
  }
}","public void action(){
  final String LAST_PATH=""String_Node_Str"";
  final String LAST_PATH_DEFAULT=""String_Node_Str"";
  final ExportController exportController=Lookup.getDefault().lookup(ExportController.class);
  if (exportController == null) {
    return;
  }
  String lastPathDefault=NbPreferences.forModule(VectorialFileExporterUI.class).get(LAST_PATH_DEFAULT,null);
  String lastPath=NbPreferences.forModule(VectorialFileExporterUI.class).get(LAST_PATH,lastPathDefault);
  FlowLayout layout=new FlowLayout(FlowLayout.RIGHT);
  JPanel optionsPanel=new JPanel(layout);
  final JButton optionsButton=new JButton(NbBundle.getMessage(VectorialFileExporterUI.class,""String_Node_Str""));
  optionsPanel.add(optionsButton);
  optionsButton.addActionListener(new ActionListener(){
    public void actionPerformed(    ActionEvent e){
      ExporterUI exporterUI=exportController.getUI(selectedExporter);
      if (exporterUI != null) {
        JPanel panel=exporterUI.getPanel();
        exporterUI.setup(selectedExporter);
        DialogDescriptor dd=new DialogDescriptor(panel,NbBundle.getMessage(VectorialFileExporterUI.class,""String_Node_Str"",selectedExporter.getName()));
        Object result=DialogDisplayer.getDefault().notify(dd);
        exporterUI.unsetup(result == NotifyDescriptor.OK_OPTION);
      }
    }
  }
);
  final JPanel southPanel=new JPanel(new BorderLayout());
  southPanel.add(optionsPanel,BorderLayout.NORTH);
  final JFileChooser chooser=new JFileChooser(lastPath){
    @Override protected JDialog createDialog(    Component parent) throws HeadlessException {
      JDialog dialog=super.createDialog(parent);
      Component c=dialog.getContentPane().getComponent(0);
      if (c != null && c instanceof JComponent) {
        Insets insets=((JComponent)c).getInsets();
        southPanel.setBorder(BorderFactory.createEmptyBorder(insets.top,insets.left,insets.bottom,insets.right));
      }
      dialog.getContentPane().add(southPanel,BorderLayout.SOUTH);
      return dialog;
    }
    @Override public void approveSelection(){
      if (canExport(this)) {
        super.approveSelection();
      }
    }
  }
;
  chooser.setDialogTitle(NbBundle.getMessage(VectorialFileExporterUI.class,""String_Node_Str""));
  chooser.addPropertyChangeListener(JFileChooser.FILE_FILTER_CHANGED_PROPERTY,new PropertyChangeListener(){
    public void propertyChange(    PropertyChangeEvent evt){
      DialogFileFilter fileFilter=(DialogFileFilter)evt.getNewValue();
      selectedExporter=getExporter(fileFilter);
      if (selectedExporter != null && exportController.hasUI(selectedExporter)) {
        optionsButton.setEnabled(true);
      }
 else {
        optionsButton.setEnabled(false);
      }
      if (selectedFile != null && fileFilter != null) {
        String filePath=selectedFile.getAbsolutePath();
        filePath=filePath.substring(0,filePath.lastIndexOf(""String_Node_Str""));
        filePath=filePath.concat(fileFilter.getExtensions().get(0));
        selectedFile=new File(filePath);
        chooser.setSelectedFile(selectedFile);
      }
    }
  }
);
  chooser.addPropertyChangeListener(JFileChooser.SELECTED_FILE_CHANGED_PROPERTY,new PropertyChangeListener(){
    public void propertyChange(    PropertyChangeEvent evt){
      if (evt.getNewValue() != null) {
        selectedFile=(File)evt.getNewValue();
      }
    }
  }
);
  DialogFileFilter defaultFilter=null;
  for (  FileExporter vectorialFileExporter : exportController.getVectorialFileExporters()) {
    for (    FileType fileType : vectorialFileExporter.getFileTypes()) {
      DialogFileFilter dialogFileFilter=new DialogFileFilter(fileType.getName());
      dialogFileFilter.addExtensions(fileType.getExtensions());
      if (defaultFilter == null) {
        defaultFilter=dialogFileFilter;
      }
      chooser.addChoosableFileFilter(dialogFileFilter);
    }
  }
  chooser.setAcceptAllFileFilterUsed(false);
  chooser.setFileFilter(defaultFilter);
  selectedFile=new File(chooser.getCurrentDirectory(),""String_Node_Str"" + defaultFilter.getExtensions().get(0));
  chooser.setSelectedFile(selectedFile);
  int returnFile=chooser.showSaveDialog(null);
  if (returnFile == JFileChooser.APPROVE_OPTION) {
    File file=chooser.getSelectedFile();
    file=FileUtil.normalizeFile(file);
    FileObject fileObject=FileUtil.toFileObject(file);
    NbPreferences.forModule(VectorialFileExporterUI.class).put(LAST_PATH,file.getAbsolutePath());
    exportController.doExport(selectedExporter,fileObject);
  }
}",0.9975429975429976
143007,"/** 
 * Set the default error handler. Use error handlers to get errors and exceptions thrown during tasks execution.
 * @param errorHandler the default error handler
 */
public void setDefaultErrorHandler(LongTaskErrorHandler errorHandler){
  if (errorHandler != null) {
    this.errorHandler=errorHandler;
  }
}","/** 
 * Set the default error handler. Use error handlers to get errors and exceptions thrown during tasks execution.
 * @param errorHandler the default error handler
 */
public void setDefaultErrorHandler(LongTaskErrorHandler errorHandler){
  if (errorHandler != null) {
    this.defaultErrorHandler=errorHandler;
  }
}",0.985781990521327
143008,"public boolean canFree(){
  this.graph=graphController.getModel().getHierarchicalGraphVisible();
  ModelImpl[] selectedNodeModels=engine.getSelectedObjects(AbstractEngine.CLASS_NODE);
  for (  ModelImpl metaModelImpl : selectedNodeModels) {
    NodeData nodeData=(NodeData)metaModelImpl.getObj();
    if (nodeData.isFixed()) {
      return true;
    }
  }
  return false;
}","public boolean canFree(){
  GraphModel graphModel=graphController.getModel();
  if (graphModel == null) {
    return false;
  }
  this.graph=graphController.getModel().getHierarchicalGraphVisible();
  ModelImpl[] selectedNodeModels=engine.getSelectedObjects(AbstractEngine.CLASS_NODE);
  for (  ModelImpl metaModelImpl : selectedNodeModels) {
    NodeData nodeData=(NodeData)metaModelImpl.getObj();
    if (nodeData.isFixed()) {
      return true;
    }
  }
  return false;
}",0.8797169811320755
143009,"public boolean canSettle(){
  this.graph=graphController.getModel().getHierarchicalGraphVisible();
  ModelImpl[] selectedNodeModels=engine.getSelectedObjects(AbstractEngine.CLASS_NODE);
  for (  ModelImpl metaModelImpl : selectedNodeModels) {
    NodeData nodeData=(NodeData)metaModelImpl.getObj();
    if (!nodeData.isFixed()) {
      return true;
    }
  }
  return false;
}","public boolean canSettle(){
  GraphModel graphModel=graphController.getModel();
  if (graphModel == null) {
    return false;
  }
  this.graph=graphController.getModel().getHierarchicalGraphVisible();
  ModelImpl[] selectedNodeModels=engine.getSelectedObjects(AbstractEngine.CLASS_NODE);
  for (  ModelImpl metaModelImpl : selectedNodeModels) {
    NodeData nodeData=(NodeData)metaModelImpl.getObj();
    if (!nodeData.isFixed()) {
      return true;
    }
  }
  return false;
}",0.8805620608899297
143010,"public boolean canUngroup(){
  ModelImpl[] selectedNodeModels=engine.getSelectedObjects(AbstractEngine.CLASS_NODE);
  return selectedNodeModels.length >= 1;
}","public boolean canUngroup(){
  GraphModel graphModel=graphController.getModel();
  if (graphModel == null) {
    return false;
  }
  ModelImpl[] selectedNodeModels=engine.getSelectedObjects(AbstractEngine.CLASS_NODE);
  return selectedNodeModels.length >= 1;
}",0.7559808612440191
143011,"public boolean canGroup(){
  ModelImpl[] selectedNodeModels=engine.getSelectedObjects(AbstractEngine.CLASS_NODE);
  return selectedNodeModels.length >= 1;
}","public boolean canGroup(){
  GraphModel graphModel=graphController.getModel();
  if (graphModel == null) {
    return false;
  }
  ModelImpl[] selectedNodeModels=engine.getSelectedObjects(AbstractEngine.CLASS_NODE);
  return selectedNodeModels.length >= 1;
}",0.7536231884057971
143012,"public boolean canExpand(){
  this.graph=graphController.getModel().getHierarchicalGraphVisible();
  ModelImpl[] selectedNodeModels=engine.getSelectedObjects(AbstractEngine.CLASS_NODE);
  for (  ModelImpl metaModelImpl : selectedNodeModels) {
    NodeData nodeData=(NodeData)metaModelImpl.getObj();
    Node node=nodeData.getNode(graph.getView().getViewId());
    if (graph.getDescendantCount(node) > 0) {
      return true;
    }
  }
  return false;
}","public boolean canExpand(){
  GraphModel graphModel=graphController.getModel();
  if (graphModel == null) {
    return false;
  }
  this.graph=graphController.getModel().getHierarchicalGraphVisible();
  ModelImpl[] selectedNodeModels=engine.getSelectedObjects(AbstractEngine.CLASS_NODE);
  for (  ModelImpl metaModelImpl : selectedNodeModels) {
    NodeData nodeData=(NodeData)metaModelImpl.getObj();
    Node node=nodeData.getNode(graph.getView().getViewId());
    if (graph.getDescendantCount(node) > 0) {
      return true;
    }
  }
  return false;
}",0.8986083499005965
143013,"public boolean canDelete(){
  ModelImpl[] selectedNodeModels=engine.getSelectedObjects(AbstractEngine.CLASS_NODE);
  return selectedNodeModels.length >= 1;
}","public boolean canDelete(){
  GraphModel graphModel=graphController.getModel();
  if (graphModel == null) {
    return false;
  }
  ModelImpl[] selectedNodeModels=engine.getSelectedObjects(AbstractEngine.CLASS_NODE);
  return selectedNodeModels.length >= 1;
}",0.7548076923076923
143014,"public boolean canContract(){
  this.graph=graphController.getModel().getHierarchicalGraphVisible();
  ModelImpl[] selectedNodeModels=engine.getSelectedObjects(AbstractEngine.CLASS_NODE);
  for (  ModelImpl metaModelImpl : selectedNodeModels) {
    NodeData nodeData=(NodeData)metaModelImpl.getObj();
    Node node=nodeData.getNode(graph.getView().getViewId());
    if (graph.getParent(node) != null) {
      return true;
    }
  }
  return false;
}","public boolean canContract(){
  GraphModel graphModel=graphController.getModel();
  if (graphModel == null) {
    return false;
  }
  this.graph=graphController.getModel().getHierarchicalGraphVisible();
  ModelImpl[] selectedNodeModels=engine.getSelectedObjects(AbstractEngine.CLASS_NODE);
  for (  ModelImpl metaModelImpl : selectedNodeModels) {
    NodeData nodeData=(NodeData)metaModelImpl.getObj();
    Node node=nodeData.getNode(graph.getView().getViewId());
    if (graph.getParent(node) != null) {
      return true;
    }
  }
  return false;
}",0.898
143015,"public void actionPerformed(ActionEvent e){
  ProjectController pc=Lookup.getDefault().lookup(ProjectController.class);
  pc.closeCurrentProject();
  DialogFileFilter filter=new DialogFileFilter(NbBundle.getMessage(OpenProject.class,""String_Node_Str""));
  filter.addExtension(""String_Node_Str"");
  String lastPathDefault=NbPreferences.forModule(OpenProject.class).get(LAST_PATH_DEFAULT,null);
  String lastPath=NbPreferences.forModule(OpenProject.class).get(LAST_PATH,lastPathDefault);
  final JFileChooser chooser=new JFileChooser(lastPath);
  chooser.addChoosableFileFilter(filter);
  int returnFile=chooser.showOpenDialog(null);
  if (returnFile == JFileChooser.APPROVE_OPTION) {
    File file=chooser.getSelectedFile();
    file=FileUtil.normalizeFile(file);
    FileObject fileObject=FileUtil.toFileObject(file);
    NbPreferences.forModule(OpenProject.class).put(LAST_PATH,file.getAbsolutePath());
    try {
      DataObject doe=DataObject.find(fileObject);
      pc.loadProject(doe);
    }
 catch (    Exception ew) {
      Exceptions.printStackTrace(ew);
    }
  }
}","public void actionPerformed(ActionEvent e){
  ProjectController pc=Lookup.getDefault().lookup(ProjectController.class);
  if (!pc.closeCurrentProject()) {
    return;
  }
  DialogFileFilter filter=new DialogFileFilter(NbBundle.getMessage(OpenProject.class,""String_Node_Str""));
  filter.addExtension(""String_Node_Str"");
  String lastPathDefault=NbPreferences.forModule(OpenProject.class).get(LAST_PATH_DEFAULT,null);
  String lastPath=NbPreferences.forModule(OpenProject.class).get(LAST_PATH,lastPathDefault);
  final JFileChooser chooser=new JFileChooser(lastPath);
  chooser.addChoosableFileFilter(filter);
  int returnFile=chooser.showOpenDialog(null);
  if (returnFile == JFileChooser.APPROVE_OPTION) {
    File file=chooser.getSelectedFile();
    file=FileUtil.normalizeFile(file);
    FileObject fileObject=FileUtil.toFileObject(file);
    NbPreferences.forModule(OpenProject.class).put(LAST_PATH,file.getAbsolutePath());
    try {
      DataObject doe=DataObject.find(fileObject);
      pc.loadProject(doe);
    }
 catch (    Exception ew) {
      Exceptions.printStackTrace(ew);
    }
  }
}",0.9884845693228926
143016,public void closeCurrentProject();,public boolean closeCurrentProject();,0.8732394366197183
143017,"public void newProject(){
  closeCurrentProject();
  ProjectImpl project=new ProjectImpl();
  projects.addProject(project);
  openProject(project);
}","public void newProject(){
  if (closeCurrentProject()) {
    ProjectImpl project=new ProjectImpl();
    projects.addProject(project);
    openProject(project);
  }
}",0.9426751592356688
143018,"public void removeProject(Project project){
  if (projects.getCurrentProject() == project) {
    closeCurrentProject();
  }
  projects.removeProject(project);
}","public void removeProject(Project project){
  if (projects.getCurrentProject() == project) {
    if (!closeCurrentProject()) {
      return;
    }
  }
  projects.removeProject(project);
}",0.9221902017291066
143019,"public void closeCurrentProject(){
  if (projects.hasCurrentProject()) {
    ProjectImpl currentProject=projects.getCurrentProject();
    String messageBundle=NbBundle.getMessage(ProjectControllerImpl.class,""String_Node_Str"");
    String titleBundle=NbBundle.getMessage(ProjectControllerImpl.class,""String_Node_Str"");
    String saveBundle=NbBundle.getMessage(ProjectControllerImpl.class,""String_Node_Str"");
    String doNotSaveBundle=NbBundle.getMessage(ProjectControllerImpl.class,""String_Node_Str"");
    String cancelBundle=NbBundle.getMessage(ProjectControllerImpl.class,""String_Node_Str"");
    NotifyDescriptor msg=new NotifyDescriptor(messageBundle,titleBundle,NotifyDescriptor.YES_NO_CANCEL_OPTION,NotifyDescriptor.INFORMATION_MESSAGE,new Object[]{saveBundle,doNotSaveBundle,cancelBundle},saveBundle);
    Object result=DialogDisplayer.getDefault().notify(msg);
    if (result == saveBundle) {
      saveProject(currentProject);
    }
 else     if (result == cancelBundle) {
      return;
    }
    currentProject.getLookup().lookup(ProjectInformationImpl.class).close();
    projects.closeCurrentProject();
    saveProject=false;
    saveAsProject=false;
    projectProperties=false;
    closeProject=false;
    newWorkspace=false;
    deleteWorkspace=false;
    cleanWorkspace=false;
    duplicateWorkspace=false;
    SwingUtilities.invokeLater(new Runnable(){
      public void run(){
        JFrame frame=(JFrame)WindowManager.getDefault().getMainWindow();
        String title=frame.getTitle();
        title=title.substring(0,title.indexOf('-') - 1);
        frame.setTitle(title);
      }
    }
);
    if (currentProject.getLookup().lookup(WorkspaceProvider.class).hasCurrentWorkspace()) {
      fireWorkspaceEvent(EventType.UNSELECT,currentProject.getLookup().lookup(WorkspaceProvider.class).getCurrentWorkspace());
    }
    for (    Workspace ws : currentProject.getLookup().lookup(WorkspaceProviderImpl.class).getWorkspaces()) {
      fireWorkspaceEvent(EventType.CLOSE,ws);
    }
    fireWorkspaceEvent(EventType.DISABLE,null);
  }
}","public boolean closeCurrentProject(){
  if (projects.hasCurrentProject()) {
    ProjectImpl currentProject=projects.getCurrentProject();
    String messageBundle=NbBundle.getMessage(ProjectControllerImpl.class,""String_Node_Str"");
    String titleBundle=NbBundle.getMessage(ProjectControllerImpl.class,""String_Node_Str"");
    String saveBundle=NbBundle.getMessage(ProjectControllerImpl.class,""String_Node_Str"");
    String doNotSaveBundle=NbBundle.getMessage(ProjectControllerImpl.class,""String_Node_Str"");
    String cancelBundle=NbBundle.getMessage(ProjectControllerImpl.class,""String_Node_Str"");
    NotifyDescriptor msg=new NotifyDescriptor(messageBundle,titleBundle,NotifyDescriptor.YES_NO_CANCEL_OPTION,NotifyDescriptor.INFORMATION_MESSAGE,new Object[]{saveBundle,doNotSaveBundle,cancelBundle},saveBundle);
    Object result=DialogDisplayer.getDefault().notify(msg);
    if (result == saveBundle) {
      saveProject(currentProject);
    }
 else     if (result == cancelBundle) {
      return false;
    }
    currentProject.getLookup().lookup(ProjectInformationImpl.class).close();
    projects.closeCurrentProject();
    saveProject=false;
    saveAsProject=false;
    projectProperties=false;
    closeProject=false;
    newWorkspace=false;
    deleteWorkspace=false;
    cleanWorkspace=false;
    duplicateWorkspace=false;
    SwingUtilities.invokeLater(new Runnable(){
      public void run(){
        JFrame frame=(JFrame)WindowManager.getDefault().getMainWindow();
        String title=frame.getTitle();
        title=title.substring(0,title.indexOf('-') - 1);
        frame.setTitle(title);
      }
    }
);
    if (currentProject.getLookup().lookup(WorkspaceProvider.class).hasCurrentWorkspace()) {
      fireWorkspaceEvent(EventType.UNSELECT,currentProject.getLookup().lookup(WorkspaceProvider.class).getCurrentWorkspace());
    }
    for (    Workspace ws : currentProject.getLookup().lookup(WorkspaceProviderImpl.class).getWorkspaces()) {
      fireWorkspaceEvent(EventType.CLOSE,ws);
    }
    fireWorkspaceEvent(EventType.DISABLE,null);
  }
  return true;
}",0.992248062015504
143020,"public void openProject(Project project){
  final ProjectImpl projectImpl=(ProjectImpl)project;
  final ProjectInformationImpl projectInformationImpl=projectImpl.getLookup().lookup(ProjectInformationImpl.class);
  final WorkspaceProviderImpl workspaceProviderImpl=project.getLookup().lookup(WorkspaceProviderImpl.class);
  if (projects.hasCurrentProject()) {
    closeCurrentProject();
  }
  projects.addProject(projectImpl);
  projects.setCurrentProject(projectImpl);
  projectInformationImpl.open();
  if (!workspaceProviderImpl.hasCurrentWorkspace()) {
    if (workspaceProviderImpl.getWorkspaces().length == 0) {
      Workspace workspace=newWorkspace(project);
      openWorkspace(workspace);
    }
 else {
      Workspace workspace=workspaceProviderImpl.getWorkspaces()[0];
      openWorkspace(workspace);
    }
  }
 else {
    fireWorkspaceEvent(EventType.SELECT,workspaceProviderImpl.getCurrentWorkspace());
  }
  saveProject=true;
  saveAsProject=true;
  projectProperties=true;
  closeProject=true;
  newWorkspace=true;
  if (workspaceProviderImpl.hasCurrentWorkspace()) {
    deleteWorkspace=true;
    cleanWorkspace=true;
    duplicateWorkspace=true;
  }
  SwingUtilities.invokeLater(new Runnable(){
    public void run(){
      JFrame frame=(JFrame)WindowManager.getDefault().getMainWindow();
      String title=frame.getTitle() + ""String_Node_Str"" + projectInformationImpl.getName();
      frame.setTitle(title);
    }
  }
);
  StatusDisplayer.getDefault().setStatusText(NbBundle.getMessage(ProjectControllerImpl.class,""String_Node_Str"",projectInformationImpl.getName()));
}","public void openProject(Project project){
  final ProjectImpl projectImpl=(ProjectImpl)project;
  final ProjectInformationImpl projectInformationImpl=projectImpl.getLookup().lookup(ProjectInformationImpl.class);
  final WorkspaceProviderImpl workspaceProviderImpl=project.getLookup().lookup(WorkspaceProviderImpl.class);
  if (projects.hasCurrentProject()) {
    if (!closeCurrentProject()) {
      return;
    }
  }
  projects.addProject(projectImpl);
  projects.setCurrentProject(projectImpl);
  projectInformationImpl.open();
  if (!workspaceProviderImpl.hasCurrentWorkspace()) {
    if (workspaceProviderImpl.getWorkspaces().length == 0) {
      Workspace workspace=newWorkspace(project);
      openWorkspace(workspace);
    }
 else {
      Workspace workspace=workspaceProviderImpl.getWorkspaces()[0];
      openWorkspace(workspace);
    }
  }
 else {
    fireWorkspaceEvent(EventType.SELECT,workspaceProviderImpl.getCurrentWorkspace());
  }
  saveProject=true;
  saveAsProject=true;
  projectProperties=true;
  closeProject=true;
  newWorkspace=true;
  if (workspaceProviderImpl.hasCurrentWorkspace()) {
    deleteWorkspace=true;
    cleanWorkspace=true;
    duplicateWorkspace=true;
  }
  SwingUtilities.invokeLater(new Runnable(){
    public void run(){
      JFrame frame=(JFrame)WindowManager.getDefault().getMainWindow();
      String title=frame.getTitle() + ""String_Node_Str"" + projectInformationImpl.getName();
      frame.setTitle(title);
    }
  }
);
  StatusDisplayer.getDefault().setStatusText(NbBundle.getMessage(ProjectControllerImpl.class,""String_Node_Str"",projectInformationImpl.getName()));
}",0.9909459881361224
143021,"public void actionPerformed(ActionEvent e){
  if (!topComponent.isOpened()) {
    topComponent.open();
    topComponent.requestActive();
    button.setText(""String_Node_Str"");
  }
 else {
    topComponent.close();
    button.setText(""String_Node_Str"");
  }
  dynamicRangeFilter.refreshRange();
  TimelineController timelineController=Lookup.getDefault().lookup(TimelineController.class);
  timelineController.getModel().setFilterProperty(dynamicRangeFilter.getRangeProperty());
  timelineController.setMin(dynamicRangeFilter.getMinimum());
  timelineController.setMax(dynamicRangeFilter.getMaximum());
}","public void actionPerformed(ActionEvent e){
  if (!topComponent.isOpened()) {
    topComponent.open();
    topComponent.requestActive();
    button.setText(""String_Node_Str"");
    dynamicRangeFilter.refreshRange();
    TimelineController timelineController=Lookup.getDefault().lookup(TimelineController.class);
    timelineController.getModel().setFilterProperty(dynamicRangeFilter.getRangeProperty());
    timelineController.setMin(dynamicRangeFilter.getMinimum());
    timelineController.setMax(dynamicRangeFilter.getMaximum());
  }
 else {
    topComponent.close();
    button.setText(""String_Node_Str"");
  }
}",0.4243421052631579
143022,"public JPanel getPanel(Filter filter){
  final DynamicRangeFilter dynamicRangeFilter=(DynamicRangeFilter)filter;
  JPanel panel=new JPanel();
  final TopComponent topComponent=WindowManager.getDefault().findTopComponent(""String_Node_Str"");
  final JButton button=new JButton(topComponent.isOpened() ? ""String_Node_Str"" : ""String_Node_Str"");
  button.addActionListener(new ActionListener(){
    public void actionPerformed(    ActionEvent e){
      if (!topComponent.isOpened()) {
        topComponent.open();
        topComponent.requestActive();
        button.setText(""String_Node_Str"");
      }
 else {
        topComponent.close();
        button.setText(""String_Node_Str"");
      }
      dynamicRangeFilter.refreshRange();
      TimelineController timelineController=Lookup.getDefault().lookup(TimelineController.class);
      timelineController.getModel().setFilterProperty(dynamicRangeFilter.getRangeProperty());
      timelineController.setMin(dynamicRangeFilter.getMinimum());
      timelineController.setMax(dynamicRangeFilter.getMaximum());
    }
  }
);
  panel.add(button);
  return panel;
}","public JPanel getPanel(Filter filter){
  final DynamicRangeFilter dynamicRangeFilter=(DynamicRangeFilter)filter;
  JPanel panel=new JPanel();
  final TopComponent topComponent=WindowManager.getDefault().findTopComponent(""String_Node_Str"");
  final JButton button=new JButton(topComponent.isOpened() ? ""String_Node_Str"" : ""String_Node_Str"");
  if (topComponent.isOpened()) {
    dynamicRangeFilter.refreshRange();
    TimelineController timelineController=Lookup.getDefault().lookup(TimelineController.class);
    timelineController.getModel().setFilterProperty(dynamicRangeFilter.getRangeProperty());
    timelineController.setMin(dynamicRangeFilter.getMinimum());
    timelineController.setMax(dynamicRangeFilter.getMaximum());
  }
  button.addActionListener(new ActionListener(){
    public void actionPerformed(    ActionEvent e){
      if (!topComponent.isOpened()) {
        topComponent.open();
        topComponent.requestActive();
        button.setText(""String_Node_Str"");
        dynamicRangeFilter.refreshRange();
        TimelineController timelineController=Lookup.getDefault().lookup(TimelineController.class);
        timelineController.getModel().setFilterProperty(dynamicRangeFilter.getRangeProperty());
        timelineController.setMin(dynamicRangeFilter.getMinimum());
        timelineController.setMax(dynamicRangeFilter.getMaximum());
      }
 else {
        topComponent.close();
        button.setText(""String_Node_Str"");
      }
    }
  }
);
  panel.add(button);
  return panel;
}",0.5659509202453987
143023,"public void process(Workspace workspace,ContainerUnloader container){
  GraphModel graphModel=Lookup.getDefault().lookup(GraphController.class).getModel();
  this.timelineController=Lookup.getDefault().lookup(TimelineController.class);
  this.workspace=workspace;
  HierarchicalGraph graph=null;
switch (container.getEdgeDefault()) {
case DIRECTED:
    graph=graphModel.getHierarchicalDirectedGraph();
  break;
case UNDIRECTED:
graph=graphModel.getHierarchicalUndirectedGraph();
break;
case MIXED:
graph=graphModel.getHierarchicalMixedGraph();
break;
default :
graph=graphModel.getHierarchicalMixedGraph();
break;
}
GraphFactory factory=graphModel.factory();
AttributeModel attributeModel=Lookup.getDefault().lookup(AttributeController.class).getModel();
attributeModel.mergeModel(container.getAttributeModel());
Map<String,Node> map=new HashMap<String,Node>();
for (Node n : graph.getNodes()) {
Object id=n.getNodeData().getAttributes().getValue(PropertiesColumn.NODE_ID.getIndex());
if (id != null) {
map.put((String)id,n);
}
if (n.getNodeData().getLabel() != null && !n.getNodeData().getLabel().isEmpty()) {
map.put(n.getNodeData().getLabel(),n);
}
}
int nodeCount=0;
for (NodeDraftGetter draftNode : container.getNodes()) {
Node n;
String id=draftNode.getId();
if (id != null && map.get(id) != null) {
n=map.get(id);
}
 else {
n=factory.newNode();
}
flushToNode(draftNode,n);
draftNode.setNode(n);
nodeCount++;
}
for (NodeDraftGetter draftNode : container.getNodes()) {
Node n=draftNode.getNode();
NodeDraftGetter[] parents=draftNode.getParents();
if (parents != null) {
for (int i=0; i < parents.length; i++) {
Node parent=parents[i].getNode();
graph.addNode(n,parent);
}
}
 else {
graph.addNode(n);
}
}
int edgeCount=0;
for (EdgeDraftGetter edge : container.getEdges()) {
Node source=edge.getSource().getNode();
Node target=edge.getTarget().getNode();
Edge e=null;
switch (container.getEdgeDefault()) {
case DIRECTED:
e=factory.newEdge(source,target,edge.getWeight(),true);
break;
case UNDIRECTED:
e=factory.newEdge(source,target,edge.getWeight(),false);
break;
case MIXED:
e=factory.newEdge(source,target,edge.getWeight(),edge.getType().equals(EdgeType.UNDIRECTED) ? false : true);
break;
}
flushToEdge(edge,e);
edgeCount++;
graph.addEdge(e);
}
System.out.println(""String_Node_Str"" + nodeCount + ""String_Node_Str""+ edgeCount);
timelineController=null;
workspace=null;
}","public void process(Workspace workspace,ContainerUnloader container){
  GraphModel graphModel=Lookup.getDefault().lookup(GraphController.class).getModel();
  this.timelineController=Lookup.getDefault().lookup(TimelineController.class);
  this.workspace=workspace;
  HierarchicalGraph graph=null;
switch (container.getEdgeDefault()) {
case DIRECTED:
    graph=graphModel.getHierarchicalDirectedGraph();
  break;
case UNDIRECTED:
graph=graphModel.getHierarchicalUndirectedGraph();
break;
case MIXED:
graph=graphModel.getHierarchicalMixedGraph();
break;
default :
graph=graphModel.getHierarchicalMixedGraph();
break;
}
GraphFactory factory=graphModel.factory();
if (timelineController != null) {
timelineController.setMin(workspace,container.getTimeIntervalMin());
timelineController.setMax(workspace,container.getTimeIntervalMax());
}
AttributeModel attributeModel=Lookup.getDefault().lookup(AttributeController.class).getModel();
attributeModel.mergeModel(container.getAttributeModel());
Map<String,Node> map=new HashMap<String,Node>();
for (Node n : graph.getNodes()) {
Object id=n.getNodeData().getAttributes().getValue(PropertiesColumn.NODE_ID.getIndex());
if (id != null) {
map.put((String)id,n);
}
if (n.getNodeData().getLabel() != null && !n.getNodeData().getLabel().isEmpty()) {
map.put(n.getNodeData().getLabel(),n);
}
}
int nodeCount=0;
for (NodeDraftGetter draftNode : container.getNodes()) {
Node n;
String id=draftNode.getId();
if (id != null && map.get(id) != null) {
n=map.get(id);
}
 else {
n=factory.newNode();
}
flushToNode(draftNode,n);
draftNode.setNode(n);
nodeCount++;
}
for (NodeDraftGetter draftNode : container.getNodes()) {
Node n=draftNode.getNode();
NodeDraftGetter[] parents=draftNode.getParents();
if (parents != null) {
for (int i=0; i < parents.length; i++) {
Node parent=parents[i].getNode();
graph.addNode(n,parent);
}
}
 else {
graph.addNode(n);
}
}
int edgeCount=0;
for (EdgeDraftGetter edge : container.getEdges()) {
Node source=edge.getSource().getNode();
Node target=edge.getTarget().getNode();
Edge e=null;
switch (container.getEdgeDefault()) {
case DIRECTED:
e=factory.newEdge(source,target,edge.getWeight(),true);
break;
case UNDIRECTED:
e=factory.newEdge(source,target,edge.getWeight(),false);
break;
case MIXED:
e=factory.newEdge(source,target,edge.getWeight(),edge.getType().equals(EdgeType.UNDIRECTED) ? false : true);
break;
}
flushToEdge(edge,e);
edgeCount++;
graph.addEdge(e);
}
System.out.println(""String_Node_Str"" + nodeCount + ""String_Node_Str""+ edgeCount);
timelineController=null;
workspace=null;
}",0.9646772228989038
143024,"public void refreshModel(FilterModel filterModel,FilterUIModel uiModel){
  this.filterModel=filterModel;
  this.uiModel=uiModel;
  unsetup();
  filterPanelPanel.unsetup();
  queriesExplorer.unsetup();
  setup();
  ((FiltersExplorer)libraryTree).setup(manager,filterModel,uiModel);
  queriesExplorer.setup(queriesPanel.manager,filterModel,uiModel);
  filterPanelPanel.setup(uiModel);
  updateEnabled(filterModel != null);
}","public void refreshModel(FilterModel filterModel,FilterUIModel uiModel){
  this.filterModel=filterModel;
  this.uiModel=uiModel;
  unsetup();
  filterPanelPanel.unsetup();
  queriesExplorer.unsetup();
  setup();
  ((FiltersExplorer)libraryTree).setup(manager,filterModel,uiModel);
  queriesExplorer.setup(queriesPanel.manager,filterModel,uiModel);
  filterPanelPanel.setup(uiModel);
  updateEnabled(filterModel != null);
  updateControls();
}",0.976851851851852
143025,"public void run(){
  filterButton.setSelected(filterModel.isFiltering());
  selectButton.setSelected(filterModel.isSelecting());
  updateEnabled(true);
}","public void run(){
  if (filterModel != null) {
    filterButton.setSelected(filterModel.isFiltering());
    selectButton.setSelected(filterModel.isSelecting());
  }
 else {
    filterButton.setSelected(false);
    selectButton.setSelected(false);
  }
}",0.541871921182266
143026,"public void stateChanged(ChangeEvent e){
  if (e.getSource() instanceof FilterUIModel) {
    if (uiModel.getSelectedQuery() != null && filterButton.isSelected()) {
      FilterController controller=Lookup.getDefault().lookup(FilterController.class);
      controller.filter(uiModel.getSelectedRoot());
    }
 else     if (uiModel.getSelectedQuery() != null && selectButton.isSelected()) {
      FilterController controller=Lookup.getDefault().lookup(FilterController.class);
      controller.select(uiModel.getSelectedRoot());
    }
  }
  SwingUtilities.invokeLater(new Runnable(){
    public void run(){
      filterButton.setSelected(filterModel.isFiltering());
      selectButton.setSelected(filterModel.isSelecting());
      updateEnabled(true);
    }
  }
);
}","public void stateChanged(ChangeEvent e){
  if (e.getSource() instanceof FilterUIModel) {
    if (uiModel.getSelectedQuery() != null && filterButton.isSelected()) {
      FilterController controller=Lookup.getDefault().lookup(FilterController.class);
      controller.filter(uiModel.getSelectedRoot());
    }
 else     if (uiModel.getSelectedQuery() != null && selectButton.isSelected()) {
      FilterController controller=Lookup.getDefault().lookup(FilterController.class);
      controller.select(uiModel.getSelectedRoot());
    }
  }
  updateControls();
  updateEnabled(true);
}",0.8148698884758364
143027,"public EqualBooleanFilter getFilter(){
  EqualBooleanFilter f=new EqualBooleanFilter();
  f.setColumn(column);
  return f;
}","public EqualBooleanFilter getFilter(){
  if (AttributeUtils.getDefault().isNodeColumn(column)) {
    NodeEqualBooleanFilter f=new NodeEqualBooleanFilter();
    f.setColumn(column);
    return f;
  }
 else {
    EdgeEqualBooleanFilter f=new EdgeEqualBooleanFilter();
    f.setColumn(column);
    return f;
  }
}",0.423963133640553
143028,"public FilterBuilder[] getBuilders(){
  List<FilterBuilder> builders=new ArrayList<FilterBuilder>();
  AttributeModel am=Lookup.getDefault().lookup(AttributeController.class).getModel();
  AttributeColumn[] columns=am.getNodeTable().getColumns();
  for (  AttributeColumn c : columns) {
    if (AttributeUtils.getDefault().isStringColumn(c)) {
      EqualStringFilterBuilder b=new EqualStringFilterBuilder(c);
      builders.add(b);
    }
 else     if (AttributeUtils.getDefault().isNumberColumn(c)) {
      EqualNumberFilterBuilder b=new EqualNumberFilterBuilder(c);
      builders.add(b);
    }
 else     if (c.getType().equals(AttributeType.BOOLEAN)) {
      EqualBooleanFilterBuilder b=new EqualBooleanFilterBuilder(c);
      builders.add(b);
    }
  }
  return builders.toArray(new FilterBuilder[0]);
}","public FilterBuilder[] getBuilders(){
  List<FilterBuilder> builders=new ArrayList<FilterBuilder>();
  AttributeModel am=Lookup.getDefault().lookup(AttributeController.class).getModel();
  for (  AttributeColumn c : am.getNodeTable().getColumns()) {
    if (AttributeUtils.getDefault().isStringColumn(c)) {
      EqualStringFilterBuilder b=new EqualStringFilterBuilder(c);
      builders.add(b);
    }
 else     if (AttributeUtils.getDefault().isNumberColumn(c)) {
      EqualNumberFilterBuilder b=new EqualNumberFilterBuilder(c);
      builders.add(b);
    }
 else     if (c.getType().equals(AttributeType.BOOLEAN)) {
      EqualBooleanFilterBuilder b=new EqualBooleanFilterBuilder(c);
      builders.add(b);
    }
  }
  for (  AttributeColumn c : am.getEdgeTable().getColumns()) {
    if (AttributeUtils.getDefault().isStringColumn(c)) {
      EqualStringFilterBuilder b=new EqualStringFilterBuilder(c);
      builders.add(b);
    }
 else     if (AttributeUtils.getDefault().isNumberColumn(c)) {
      EqualNumberFilterBuilder b=new EqualNumberFilterBuilder(c);
      builders.add(b);
    }
 else     if (c.getType().equals(AttributeType.BOOLEAN)) {
      EqualBooleanFilterBuilder b=new EqualBooleanFilterBuilder(c);
      builders.add(b);
    }
  }
  return builders.toArray(new FilterBuilder[0]);
}",0.7184834123222749
143029,"public AttributeNonNullFilter getFilter(){
  AttributeNonNullFilter f=new AttributeNonNullFilter();
  f.setColumn(column);
  return f;
}","public AttributeNonNullFilter getFilter(){
  if (AttributeUtils.getDefault().isNodeColumn(column)) {
    NodeAttributeNonNullFilter f=new NodeAttributeNonNullFilter();
    f.setColumn(column);
    return f;
  }
 else {
    EdgeAttributeNonNullFilter f=new EdgeAttributeNonNullFilter();
    f.setColumn(column);
    return f;
  }
}",0.4291845493562232
143030,"public FilterBuilder[] getBuilders(){
  List<FilterBuilder> builders=new ArrayList<FilterBuilder>();
  AttributeModel am=Lookup.getDefault().lookup(AttributeController.class).getModel();
  AttributeColumn[] columns=am.getNodeTable().getColumns();
  for (  AttributeColumn c : columns) {
    AttributeNonNullFilterBuilder b=new AttributeNonNullFilterBuilder(c);
    builders.add(b);
  }
  return builders.toArray(new FilterBuilder[0]);
}","public FilterBuilder[] getBuilders(){
  List<FilterBuilder> builders=new ArrayList<FilterBuilder>();
  AttributeModel am=Lookup.getDefault().lookup(AttributeController.class).getModel();
  for (  AttributeColumn c : am.getNodeTable().getColumns()) {
    AttributeNonNullFilterBuilder b=new AttributeNonNullFilterBuilder(c);
    builders.add(b);
  }
  for (  AttributeColumn c : am.getEdgeTable().getColumns()) {
    AttributeNonNullFilterBuilder b=new AttributeNonNullFilterBuilder(c);
    builders.add(b);
  }
  return builders.toArray(new FilterBuilder[0]);
}",0.7642928786359077
143031,"public AttributeRangelFilter getFilter(){
  AttributeRangelFilter f=new AttributeRangelFilter(column);
  return f;
}","public AttributeRangeFilter getFilter(){
  if (AttributeUtils.getDefault().isNodeColumn(column)) {
    return new NodeAttributeRangeFilter(column);
  }
 else {
    return new EdgeAttributeRangeFilter(column);
  }
}",0.5696969696969697
143032,"public FilterBuilder[] getBuilders(){
  List<FilterBuilder> builders=new ArrayList<FilterBuilder>();
  AttributeModel am=Lookup.getDefault().lookup(AttributeController.class).getModel();
  AttributeColumn[] columns=am.getNodeTable().getColumns();
  for (  AttributeColumn c : columns) {
    if (AttributeUtils.getDefault().isNumberColumn(c)) {
      AttributeRangeFilterBuilder b=new AttributeRangeFilterBuilder(c);
      builders.add(b);
    }
  }
  return builders.toArray(new FilterBuilder[0]);
}","public FilterBuilder[] getBuilders(){
  List<FilterBuilder> builders=new ArrayList<FilterBuilder>();
  AttributeModel am=Lookup.getDefault().lookup(AttributeController.class).getModel();
  for (  AttributeColumn c : am.getNodeTable().getColumns()) {
    if (AttributeUtils.getDefault().isNumberColumn(c)) {
      AttributeRangeFilterBuilder b=new AttributeRangeFilterBuilder(c);
      builders.add(b);
    }
  }
  for (  AttributeColumn c : am.getEdgeTable().getColumns()) {
    if (AttributeUtils.getDefault().isNumberColumn(c)) {
      AttributeRangeFilterBuilder b=new AttributeRangeFilterBuilder(c);
      builders.add(b);
    }
  }
  return builders.toArray(new FilterBuilder[0]);
}",0.7453625632377741
143033,"public JPanel getPanel(Filter filter){
  RangeUI ui=Lookup.getDefault().lookup(RangeUI.class);
  if (ui != null) {
    return ui.getPanel((AttributeRangelFilter)filter);
  }
  return null;
}","public JPanel getPanel(Filter filter){
  RangeUI ui=Lookup.getDefault().lookup(RangeUI.class);
  if (ui != null) {
    return ui.getPanel((AttributeRangeFilter)filter);
  }
  return null;
}",0.9973614775725592
143034,"public PartitionFilter getFilter(){
  return new PartitionFilter(partition);
}","public PartitionFilter getFilter(){
  if (AttributeUtils.getDefault().isNodeColumn(column)) {
    return new NodePartitionFilter(partition);
  }
 else {
    return new EdgePartitionFilter(partition);
  }
}",0.5512367491166078
143035,"public PartitionCountFilter getFilter(){
  return new PartitionCountFilter(partition);
}","public PartitionCountFilter getFilter(){
  if (AttributeUtils.getDefault().isNodeColumn(column)) {
    return new NodePartitionCountFilter(partition);
  }
 else {
    return new EdgePartitionCountFilter(partition);
  }
}",0.5714285714285714
143036,"public FilterControllerImpl(){
  PropertyEditorManager.registerEditor(Range.class,RangePropertyEditor.class);
  PropertyEditorManager.registerEditor(AttributeColumn.class,AttributeColumnPropertyEditor.class);
  ProjectController pc=Lookup.getDefault().lookup(ProjectController.class);
  pc.addWorkspaceListener(new WorkspaceListener(){
    public void initialize(    Workspace workspace){
      workspace.add(new FilterModelImpl());
    }
    public void select(    Workspace workspace){
      model=(FilterModelImpl)workspace.getLookup().lookup(FilterModel.class);
      if (model == null) {
        model=new FilterModelImpl();
        workspace.add(model);
      }
    }
    public void unselect(    Workspace workspace){
    }
    public void close(    Workspace workspace){
    }
    public void disable(){
      GraphModel graphModel=Lookup.getDefault().lookup(GraphController.class).getModel();
      if (model.getCurrentResult() != null) {
        graphModel.destroyView(model.getCurrentResult());
        model.setCurrentResult(null);
      }
      model=null;
    }
  }
);
  if (pc.getCurrentWorkspace() != null) {
    Workspace workspace=pc.getCurrentWorkspace();
    model=(FilterModelImpl)workspace.getLookup().lookup(FilterModel.class);
    if (model == null) {
      model=new FilterModelImpl();
      workspace.add(model);
    }
  }
}","public FilterControllerImpl(){
  PropertyEditorManager.registerEditor(Range.class,RangePropertyEditor.class);
  PropertyEditorManager.registerEditor(AttributeColumn.class,AttributeColumnPropertyEditor.class);
  ProjectController pc=Lookup.getDefault().lookup(ProjectController.class);
  pc.addWorkspaceListener(new WorkspaceListener(){
    public void initialize(    Workspace workspace){
      workspace.add(new FilterModelImpl());
    }
    public void select(    Workspace workspace){
      model=(FilterModelImpl)workspace.getLookup().lookup(FilterModel.class);
      if (model == null) {
        model=new FilterModelImpl();
        workspace.add(model);
      }
    }
    public void unselect(    Workspace workspace){
    }
    public void close(    Workspace workspace){
    }
    public void disable(){
      GraphModel graphModel=Lookup.getDefault().lookup(GraphController.class).getModel();
      if (model.getCurrentResult() != null && graphModel != null) {
        graphModel.destroyView(model.getCurrentResult());
        model.setCurrentResult(null);
      }
      model=null;
    }
  }
);
  if (pc.getCurrentWorkspace() != null) {
    Workspace workspace=pc.getCurrentWorkspace();
    model=(FilterModelImpl)workspace.getLookup().lookup(FilterModel.class);
    if (model == null) {
      model=new FilterModelImpl();
      workspace.add(model);
    }
  }
}",0.9838354151359294
143037,"public void disable(){
  GraphModel graphModel=Lookup.getDefault().lookup(GraphController.class).getModel();
  if (model.getCurrentResult() != null) {
    graphModel.destroyView(model.getCurrentResult());
    model.setCurrentResult(null);
  }
  model=null;
}","public void disable(){
  GraphModel graphModel=Lookup.getDefault().lookup(GraphController.class).getModel();
  if (model.getCurrentResult() != null && graphModel != null) {
    graphModel.destroyView(model.getCurrentResult());
    model.setCurrentResult(null);
  }
  model=null;
}",0.9591078066914498
143038,"public void computeMetaEdges(AbstractNode node,AbstractNode enabledAncestor){
  if (!dhns.getSettingsManager().isAutoMetaEdgeCreation()) {
    return;
  }
  if (enabledAncestor == null) {
    enabledAncestor=node;
  }
  int clusterEnd=node.getPre() + node.size;
  for (int i=node.pre; i <= clusterEnd; i++) {
    AbstractNode desc=treeStructure.getNodeAt(i);
    if (desc.getEdgesOutTree().getCount() > 0) {
      edgeIterator.setNode(desc.getEdgesOutTree());
      while (edgeIterator.hasNext()) {
        AbstractEdge edge=edgeIterator.next();
        AbstractNode[] enabledAncestors=treeStructure.getEnabledAncestorsOrSelf(edge.getTarget(viewId));
        if (enabledAncestors != null) {
          for (int j=0; j < enabledAncestors.length; j++) {
            AbstractNode targetNode=enabledAncestors[j];
            if (!(targetNode == edge.getTarget(viewId) && enabledAncestor == edge.getSource(viewId))) {
              createMetaEdge(enabledAncestor,targetNode,edge);
            }
          }
        }
      }
    }
    if (desc.getEdgesInTree().getCount() > 0) {
      edgeIterator.setNode(desc.getEdgesInTree());
      while (edgeIterator.hasNext()) {
        AbstractEdge edge=edgeIterator.next();
        AbstractNode[] enabledAncestors=treeStructure.getEnabledAncestorsOrSelf(edge.getSource(viewId));
        if (enabledAncestors != null) {
          for (int j=0; j < enabledAncestors.length; j++) {
            AbstractNode sourceNode=enabledAncestors[j];
            if (!(sourceNode == edge.getSource(viewId) && enabledAncestor == edge.getTarget(viewId))) {
              createMetaEdge(sourceNode,enabledAncestor,edge);
            }
          }
        }
      }
    }
  }
}","public void computeMetaEdges(){
  for (TreeIterator itr=new TreeIterator(treeStructure,true,Tautology.instance); itr.hasNext(); ) {
    AbstractNode node=itr.next();
    computeMetaEdges(node,node);
  }
}",0.0569020021074815
143039,"public void readEdges(Element edgesE,GraphStructure graphStructure,GraphFactoryImpl factory){
  NodeList edgesListE=edgesE.getChildNodes();
  TreeStructure treeStructure=graphStructure.getMainView().getStructure();
  for (int i=0; i < edgesListE.getLength(); i++) {
    if (edgesListE.item(i).getNodeType() == Node.ELEMENT_NODE) {
      Element edgeE=(Element)edgesListE.item(i);
      Integer id=Integer.parseInt(edgeE.getAttribute(""String_Node_Str""));
      AbstractNode source=treeStructure.getNodeAt(Integer.parseInt(edgeE.getAttribute(""String_Node_Str"")));
      AbstractNode target=treeStructure.getNodeAt(Integer.parseInt(edgeE.getAttribute(""String_Node_Str"")));
      AbstractEdge edge;
      if (edgeE.getTagName().equals(ELEMENT_EDGES_PROPER)) {
        edge=new ProperEdgeImpl(id,source,target);
      }
 else       if (edgeE.getTagName().equals(ELEMENT_EDGES_MIXED)) {
        edge=new MixedEdgeImpl(id,source,target,Boolean.parseBoolean(edgeE.getAttribute(""String_Node_Str"")));
      }
 else {
        edge=new SelfLoopImpl(id,source);
      }
      edge.setWeight(Float.parseFloat(edgeE.getAttribute(""String_Node_Str"")));
      edge.getEdgeData().setAttributes(factory.newEdgeAttributes());
      edge.getEdgeData().setTextData(factory.newTextData());
      source.getEdgesOutTree().add(edge);
      target.getEdgesInTree().add(edge);
      graphStructure.getEdgeDictionnary().add(edge);
    }
  }
}","public void readEdges(Element edgesE,GraphStructure graphStructure,GraphFactoryImpl factory){
  NodeList edgesListE=edgesE.getChildNodes();
  TreeStructure treeStructure=graphStructure.getMainView().getStructure();
  for (int i=0; i < edgesListE.getLength(); i++) {
    if (edgesListE.item(i).getNodeType() == Node.ELEMENT_NODE) {
      Element edgeE=(Element)edgesListE.item(i);
      Integer id=Integer.parseInt(edgeE.getAttribute(""String_Node_Str""));
      AbstractNode source=treeStructure.getNodeAt(Integer.parseInt(edgeE.getAttribute(""String_Node_Str"")));
      AbstractNode target=treeStructure.getNodeAt(Integer.parseInt(edgeE.getAttribute(""String_Node_Str"")));
      AbstractEdge edge;
      if (edgeE.getTagName().equals(ELEMENT_EDGES_PROPER)) {
        edge=new ProperEdgeImpl(id,source,target);
      }
 else       if (edgeE.getTagName().equals(ELEMENT_EDGES_MIXED)) {
        edge=new MixedEdgeImpl(id,source,target,Boolean.parseBoolean(edgeE.getAttribute(""String_Node_Str"")));
      }
 else {
        edge=new SelfLoopImpl(id,source);
      }
      edge.setWeight(Float.parseFloat(edgeE.getAttribute(""String_Node_Str"")));
      edge.getEdgeData().setAttributes(factory.newEdgeAttributes());
      edge.getEdgeData().setTextData(factory.newTextData());
      source.getEdgesOutTree().add(edge);
      target.getEdgesInTree().add(edge);
      graphStructure.getEdgeDictionnary().add(edge);
    }
  }
  graphStructure.getMainView().getStructureModifier().getEdgeProcessor().computeMetaEdges();
}",0.9681397738951696
143040,"public Element writeGraphView(Document document,GraphViewImpl graphView){
  Element viewE=document.createElement(ELEMENT_VIEW);
  viewE.setAttribute(""String_Node_Str"",String.valueOf(graphView.getViewId()));
  viewE.setAttribute(""String_Node_Str"",String.valueOf(graphView.getEdgesCountEnabled()));
  viewE.setAttribute(""String_Node_Str"",String.valueOf(graphView.getEdgesCountTotal()));
  viewE.setAttribute(""String_Node_Str"",String.valueOf(graphView.getMutualEdgesEnabled()));
  viewE.setAttribute(""String_Node_Str"",String.valueOf(graphView.getMutualEdgesTotal()));
  viewE.setAttribute(""String_Node_Str"",String.valueOf(graphView.getNodesEnabled()));
  for (TreeListIterator itr=new TreeListIterator(graphView.getStructure().getTree(),1); itr.hasNext(); ) {
    AbstractNode node=itr.next();
    Element nodeE=document.createElement(ELEMENT_TREESTRUCTURE_NODE);
    nodeE.setAttribute(""String_Node_Str"",String.valueOf(node.getInView(0).pre));
    nodeE.setAttribute(""String_Node_Str"",String.valueOf(node.isEnabled()));
    nodeE.setAttribute(""String_Node_Str"",String.valueOf(node.pre));
    nodeE.setAttribute(""String_Node_Str"",String.valueOf(node.parent.pre));
    nodeE.setAttribute(""String_Node_Str"",String.valueOf(node.getEnabledInDegree()));
    nodeE.setAttribute(""String_Node_Str"",String.valueOf(node.getEnabledOutDegree()));
    nodeE.setAttribute(""String_Node_Str"",String.valueOf(node.getEnabledMutualDegree()));
  }
  ParamAVLIterator<AbstractEdge> edgeIterator=new ParamAVLIterator<AbstractEdge>();
  for (TreeListIterator itr=new TreeListIterator(graphView.getStructure().getTree(),1); itr.hasNext(); ) {
    AbstractNode node=itr.next();
    for (edgeIterator.setNode(node.getEdgesOutTree()); edgeIterator.hasNext(); ) {
      AbstractEdge edge=edgeIterator.next();
      Element edgeE=document.createElement(ELEMENT_VIEW_EDGE);
      edgeE.setAttribute(""String_Node_Str"",String.valueOf(node.pre));
      edgeE.setAttribute(""String_Node_Str"",String.valueOf(edge.getTarget(graphView.getViewId()).pre));
      edgeE.setAttribute(""String_Node_Str"",String.valueOf(edge.getId()));
    }
  }
  return viewE;
}","public Element writeGraphView(Document document,GraphViewImpl graphView){
  Element viewE=document.createElement(ELEMENT_VIEW);
  viewE.setAttribute(""String_Node_Str"",String.valueOf(graphView.getViewId()));
  viewE.setAttribute(""String_Node_Str"",String.valueOf(graphView.getEdgesCountEnabled()));
  viewE.setAttribute(""String_Node_Str"",String.valueOf(graphView.getEdgesCountTotal()));
  viewE.setAttribute(""String_Node_Str"",String.valueOf(graphView.getMutualEdgesEnabled()));
  viewE.setAttribute(""String_Node_Str"",String.valueOf(graphView.getMutualEdgesTotal()));
  viewE.setAttribute(""String_Node_Str"",String.valueOf(graphView.getNodesEnabled()));
  for (TreeListIterator itr=new TreeListIterator(graphView.getStructure().getTree(),1); itr.hasNext(); ) {
    AbstractNode node=itr.next();
    Element nodeE=document.createElement(ELEMENT_TREESTRUCTURE_NODE);
    nodeE.setAttribute(""String_Node_Str"",String.valueOf(node.getInView(0).pre));
    nodeE.setAttribute(""String_Node_Str"",String.valueOf(node.isEnabled()));
    nodeE.setAttribute(""String_Node_Str"",String.valueOf(node.pre));
    nodeE.setAttribute(""String_Node_Str"",String.valueOf(node.parent.pre));
    nodeE.setAttribute(""String_Node_Str"",String.valueOf(node.getEnabledInDegree()));
    nodeE.setAttribute(""String_Node_Str"",String.valueOf(node.getEnabledOutDegree()));
    nodeE.setAttribute(""String_Node_Str"",String.valueOf(node.getEnabledMutualDegree()));
  }
  ParamAVLIterator<AbstractEdge> edgeIterator=new ParamAVLIterator<AbstractEdge>();
  for (TreeListIterator itr=new TreeListIterator(graphView.getStructure().getTree(),1); itr.hasNext(); ) {
    AbstractNode node=itr.next();
    for (edgeIterator.setNode(node.getEdgesOutTree()); edgeIterator.hasNext(); ) {
      AbstractEdge edge=edgeIterator.next();
      Element edgeE=document.createElement(ELEMENT_VIEW_EDGE);
      edgeE.setAttribute(""String_Node_Str"",String.valueOf(node.pre));
      edgeE.setAttribute(""String_Node_Str"",String.valueOf(edge.getTarget(graphView.getViewId()).pre));
      edgeE.setAttribute(""String_Node_Str"",String.valueOf(edge.getId()));
    }
  }
  graphView.getStructureModifier().getEdgeProcessor().computeMetaEdges();
  return viewE;
}",0.982806691449814
143041,"/** 
 * Refresh the preview applet.
 */
public void refreshPreview(){
  System.out.println(""String_Node_Str"" + sketch);
  sketch.refresh();
}","/** 
 * Refresh the preview applet.
 */
public void refreshPreview(){
  sketch.refresh();
}",0.7844827586206896
143042,"/** 
 * Retreives the workspace graph and builds a preview graph from it. For each build, the supervisors' lists of supervised elements are cleared because the previous preview graph is forgotten.
 * @see PreviewController#buildGraph()
 */
public void buildGraph(){
  GraphModel graphModel=Lookup.getDefault().lookup(GraphController.class).getModel();
  model.clearSupervisors();
  if (graphModel.isUndirected()) {
    previewGraph=factory.createPreviewGraph(model,graphModel.getUndirectedGraph());
  }
 else   if (graphModel.isDirected()) {
    previewGraph=factory.createPreviewGraph(model,graphModel.getDirectedGraph());
  }
 else   if (graphModel.isMixed()) {
    previewGraph=factory.createPreviewGraph(model,graphModel.getMixedGraph());
  }
  model.setUpdateFlag(true);
}","/** 
 * Retreives the workspace graph and builds a preview graph from it. For each build, the supervisors' lists of supervised elements are cleared because the previous preview graph is forgotten.
 * @see PreviewController#buildGraph()
 */
public void buildGraph(){
  GraphModel graphModel=Lookup.getDefault().lookup(GraphController.class).getModel();
  model.clearSupervisors();
  if (graphModel.isUndirected()) {
    previewGraph=factory.createPreviewGraph(model,graphModel.getUndirectedGraphVisible());
  }
 else   if (graphModel.isDirected()) {
    previewGraph=factory.createPreviewGraph(model,graphModel.getDirectedGraphVisible());
  }
 else   if (graphModel.isMixed()) {
    previewGraph=factory.createPreviewGraph(model,graphModel.getMixedGraphVisible());
  }
  model.setUpdateFlag(true);
}",0.9866666666666668
143043,"private void parseNodes(NodeList nodeListE,String parent) throws Exception {
  for (int i=0; i < nodeListE.getLength(); i++) {
    Element nodeE=(Element)nodeListE.item(i);
    if (!nodeE.getNodeName().equals(""String_Node_Str"")) {
      report.logIssue(new Issue(NbBundle.getMessage(ImporterGEXF.class,""String_Node_Str"",nodeE.getNodeName()),Issue.Level.WARNING));
      return;
    }
    if (parent == null) {
      Progress.progress(progressTicket);
    }
    if (cancel) {
      return;
    }
    String nodeId=nodeE.getAttribute(""String_Node_Str"");
    if (nodeId.isEmpty()) {
      report.logIssue(new Issue(NbBundle.getMessage(ImporterGEXF.class,""String_Node_Str""),Issue.Level.SEVERE));
      continue;
    }
    NodeDraft node=container.factory().newNodeDraft();
    node.setId(nodeId);
    if (!nodeE.getAttribute(""String_Node_Str"").isEmpty() && !nodeE.getAttribute(""String_Node_Str"").equals(""String_Node_Str"")) {
      String pid=nodeE.getAttribute(""String_Node_Str"");
      if (!container.nodeExists(pid)) {
        if (unknownParents.containsKey(pid)) {
          unknownParents.get(pid).add(nodeId);
        }
 else {
          List<String> childList=new ArrayList<String>();
          childList.add(nodeId);
          unknownParents.put(pid,childList);
        }
      }
 else {
        node.setParent(container.getNode(pid));
      }
    }
 else     if (parent != null) {
      node.setParent(container.getNode(parent));
    }
    String nodeLabel=nodeE.getAttribute(""String_Node_Str"");
    node.setLabel(nodeLabel);
    Node child=nodeE.getFirstChild();
    if (child != null) {
      do {
        if (child.getNodeName().equals(""String_Node_Str"")) {
          Node childE=child.getFirstChild();
          if (childE != null) {
            do {
              if (childE.getNodeName().equals(""String_Node_Str"")) {
                Element dataE=(Element)childE;
                setNodeData(dataE,node,nodeId);
              }
            }
 while ((childE=childE.getNextSibling()) != null);
          }
        }
      }
 while ((child=child.getNextSibling()) != null);
    }
    Element nodeColor=(Element)nodeE.getElementsByTagName(""String_Node_Str"").item(0);
    if (nodeColor != null) {
      String rStr=nodeColor.getAttribute(""String_Node_Str"");
      String gStr=nodeColor.getAttribute(""String_Node_Str"");
      String bStr=nodeColor.getAttribute(""String_Node_Str"");
      int r=(rStr.isEmpty()) ? 0 : Integer.parseInt(rStr);
      int g=(gStr.isEmpty()) ? 0 : Integer.parseInt(gStr);
      int b=(bStr.isEmpty()) ? 0 : Integer.parseInt(bStr);
      node.setColor(new Color(r,g,b));
    }
    Element nodePosition=(Element)nodeE.getElementsByTagName(""String_Node_Str"").item(0);
    if (nodePosition != null) {
      try {
        String xStr=nodePosition.getAttribute(""String_Node_Str"");
        if (!xStr.isEmpty()) {
          float x=Float.parseFloat(xStr);
          node.setX(x);
        }
      }
 catch (      NumberFormatException e) {
        report.logIssue(new Issue(NbBundle.getMessage(ImporterGEXF.class,""String_Node_Str"",nodeId,""String_Node_Str""),Issue.Level.WARNING));
      }
      try {
        String yStr=nodePosition.getAttribute(""String_Node_Str"");
        if (!yStr.isEmpty()) {
          float y=Float.parseFloat(yStr);
          node.setY(y);
        }
      }
 catch (      NumberFormatException e) {
        report.logIssue(new Issue(NbBundle.getMessage(ImporterGEXF.class,""String_Node_Str"",nodeId,""String_Node_Str""),Issue.Level.WARNING));
      }
      try {
        String zStr=nodePosition.getAttribute(""String_Node_Str"");
        if (!zStr.isEmpty()) {
          float z=Float.parseFloat(zStr);
          node.setZ(z);
        }
      }
 catch (      NumberFormatException e) {
        report.logIssue(new Issue(NbBundle.getMessage(ImporterGEXF.class,""String_Node_Str"",nodeId,""String_Node_Str""),Issue.Level.WARNING));
      }
    }
    Element nodeSize=(Element)nodeE.getElementsByTagName(""String_Node_Str"").item(0);
    if (nodeSize != null) {
      try {
        float size=Float.parseFloat(nodeSize.getAttribute(""String_Node_Str""));
        node.setSize(size);
      }
 catch (      NumberFormatException e) {
        report.logIssue(new Issue(NbBundle.getMessage(ImporterGEXF.class,""String_Node_Str"",nodeId),Issue.Level.WARNING));
      }
    }
    if (isDynamicMode) {
      String nodeStart=null;
      String nodeEnd=null;
      if (!nodeE.getAttribute(""String_Node_Str"").isEmpty()) {
        nodeStart=nodeE.getAttribute(""String_Node_Str"");
      }
      if (!nodeE.getAttribute(""String_Node_Str"").isEmpty()) {
        nodeEnd=nodeE.getAttribute(""String_Node_Str"");
      }
      if (nodeStart != null || nodeEnd != null) {
        node.addTimeSlice(nodeStart,nodeEnd);
      }
    }
    container.addNode(node);
    Node childNode=nodeE.getFirstChild();
    if (childNode != null) {
      do {
        if (childNode.getNodeName().equals(""String_Node_Str"")) {
          Node childE=childNode.getFirstChild();
          NodeList childrenListE=childE.getChildNodes();
          if (childrenListE != null && childrenListE.getLength() > 0) {
            parseNodes(childrenListE,nodeId);
          }
        }
      }
 while ((childNode=childNode.getNextSibling()) != null);
    }
    Node childEdge=nodeE.getFirstChild();
    if (childEdge != null) {
      do {
        if (childEdge.getNodeName().equals(""String_Node_Str"")) {
          Node childE=childEdge.getFirstChild();
          NodeList childrenListE=childE.getChildNodes();
          if (childrenListE != null && childrenListE.getLength() > 0) {
            parseEdges(childrenListE,nodeId);
          }
        }
      }
 while ((childEdge=childEdge.getNextSibling()) != null);
    }
  }
}","private void parseNodes(NodeList nodeListE,String parent) throws Exception {
  for (int i=0; i < nodeListE.getLength(); i++) {
    if (nodeListE.item(i).getNodeType() != ELEMENT_NODE) {
      continue;
    }
    Element nodeE=(Element)nodeListE.item(i);
    if (!nodeE.getNodeName().equals(""String_Node_Str"")) {
      report.logIssue(new Issue(NbBundle.getMessage(ImporterGEXF.class,""String_Node_Str"",nodeE.getNodeName()),Issue.Level.WARNING));
      return;
    }
    if (parent == null) {
      Progress.progress(progressTicket);
    }
    if (cancel) {
      return;
    }
    String nodeId=nodeE.getAttribute(""String_Node_Str"");
    if (nodeId.isEmpty()) {
      report.logIssue(new Issue(NbBundle.getMessage(ImporterGEXF.class,""String_Node_Str""),Issue.Level.SEVERE));
      continue;
    }
    NodeDraft node=container.factory().newNodeDraft();
    node.setId(nodeId);
    if (!nodeE.getAttribute(""String_Node_Str"").isEmpty() && !nodeE.getAttribute(""String_Node_Str"").equals(""String_Node_Str"")) {
      String pid=nodeE.getAttribute(""String_Node_Str"");
      if (!container.nodeExists(pid)) {
        if (unknownParents.containsKey(pid)) {
          unknownParents.get(pid).add(nodeId);
        }
 else {
          List<String> childList=new ArrayList<String>();
          childList.add(nodeId);
          unknownParents.put(pid,childList);
        }
      }
 else {
        node.setParent(container.getNode(pid));
      }
    }
 else     if (parent != null) {
      node.setParent(container.getNode(parent));
    }
    String nodeLabel=nodeE.getAttribute(""String_Node_Str"");
    node.setLabel(nodeLabel);
    Node child=nodeE.getFirstChild();
    if (child != null) {
      do {
        if (child.getNodeName().equals(""String_Node_Str"")) {
          Node childE=child.getFirstChild();
          if (childE != null) {
            do {
              if (childE.getNodeName().equals(""String_Node_Str"")) {
                Element dataE=(Element)childE;
                setNodeData(dataE,node,nodeId);
              }
            }
 while ((childE=childE.getNextSibling()) != null);
          }
        }
      }
 while ((child=child.getNextSibling()) != null);
    }
    Element nodeColor=(Element)nodeE.getElementsByTagName(""String_Node_Str"").item(0);
    if (nodeColor != null) {
      String rStr=nodeColor.getAttribute(""String_Node_Str"");
      String gStr=nodeColor.getAttribute(""String_Node_Str"");
      String bStr=nodeColor.getAttribute(""String_Node_Str"");
      int r=(rStr.isEmpty()) ? 0 : Integer.parseInt(rStr);
      int g=(gStr.isEmpty()) ? 0 : Integer.parseInt(gStr);
      int b=(bStr.isEmpty()) ? 0 : Integer.parseInt(bStr);
      node.setColor(new Color(r,g,b));
    }
    Element nodePosition=(Element)nodeE.getElementsByTagName(""String_Node_Str"").item(0);
    if (nodePosition != null) {
      try {
        String xStr=nodePosition.getAttribute(""String_Node_Str"");
        if (!xStr.isEmpty()) {
          float x=Float.parseFloat(xStr);
          node.setX(x);
        }
      }
 catch (      NumberFormatException e) {
        report.logIssue(new Issue(NbBundle.getMessage(ImporterGEXF.class,""String_Node_Str"",nodeId,""String_Node_Str""),Issue.Level.WARNING));
      }
      try {
        String yStr=nodePosition.getAttribute(""String_Node_Str"");
        if (!yStr.isEmpty()) {
          float y=Float.parseFloat(yStr);
          node.setY(y);
        }
      }
 catch (      NumberFormatException e) {
        report.logIssue(new Issue(NbBundle.getMessage(ImporterGEXF.class,""String_Node_Str"",nodeId,""String_Node_Str""),Issue.Level.WARNING));
      }
      try {
        String zStr=nodePosition.getAttribute(""String_Node_Str"");
        if (!zStr.isEmpty()) {
          float z=Float.parseFloat(zStr);
          node.setZ(z);
        }
      }
 catch (      NumberFormatException e) {
        report.logIssue(new Issue(NbBundle.getMessage(ImporterGEXF.class,""String_Node_Str"",nodeId,""String_Node_Str""),Issue.Level.WARNING));
      }
    }
    Element nodeSize=(Element)nodeE.getElementsByTagName(""String_Node_Str"").item(0);
    if (nodeSize != null) {
      try {
        float size=Float.parseFloat(nodeSize.getAttribute(""String_Node_Str""));
        node.setSize(size);
      }
 catch (      NumberFormatException e) {
        report.logIssue(new Issue(NbBundle.getMessage(ImporterGEXF.class,""String_Node_Str"",nodeId),Issue.Level.WARNING));
      }
    }
    if (isDynamicMode) {
      String nodeStart=null;
      String nodeEnd=null;
      if (!nodeE.getAttribute(""String_Node_Str"").isEmpty()) {
        nodeStart=nodeE.getAttribute(""String_Node_Str"");
      }
      if (!nodeE.getAttribute(""String_Node_Str"").isEmpty()) {
        nodeEnd=nodeE.getAttribute(""String_Node_Str"");
      }
      if (nodeStart != null || nodeEnd != null) {
        node.addTimeSlice(nodeStart,nodeEnd);
      }
    }
    container.addNode(node);
    Node childNodes=nodeE.getFirstChild();
    if (childNodes != null) {
      do {
        if (childNodes.getNodeName().equals(""String_Node_Str"")) {
          NodeList childrenListE=childNodes.getChildNodes();
          if (childrenListE != null && childrenListE.getLength() > 0) {
            parseNodes(childrenListE,nodeId);
          }
        }
      }
 while ((childNodes=childNodes.getNextSibling()) != null);
    }
    Node childEdges=nodeE.getFirstChild();
    if (childEdges != null) {
      do {
        if (childEdges.getNodeName().equals(""String_Node_Str"")) {
          NodeList childrenListE=childEdges.getChildNodes();
          if (childrenListE != null && childrenListE.getLength() > 0) {
            parseEdges(childrenListE,nodeId);
          }
        }
      }
 while ((childEdges=childEdges.getNextSibling()) != null);
    }
  }
}",0.9073375997194704
143044,"private void parseEdges(NodeList edgeListE,String parent){
  for (int i=0; i < edgeListE.getLength(); i++) {
    Element edgeE=(Element)edgeListE.item(i);
    EdgeDraft edge=container.factory().newEdgeDraft();
    if (parent == null) {
      Progress.progress(progressTicket);
    }
    if (cancel) {
      return;
    }
    String edgeId=edgeE.getAttribute(""String_Node_Str"");
    if (edgeId.isEmpty()) {
      report.logIssue(new Issue(NbBundle.getMessage(ImporterGEXF.class,""String_Node_Str""),Issue.Level.WARNING));
    }
    String edgeSource=edgeE.getAttribute(""String_Node_Str"");
    String edgeTarget=edgeE.getAttribute(""String_Node_Str"");
    NodeDraft nodeSource=container.getNode(edgeSource);
    NodeDraft nodeTarget=container.getNode(edgeTarget);
    if (nodeSource == null || nodeTarget == null) {
      throw new NullPointerException(edgeSource + ""String_Node_Str"" + edgeTarget);
    }
    edge.setSource(nodeSource);
    edge.setTarget(nodeTarget);
    String edgeType=edgeE.getAttribute(""String_Node_Str"");
    if (!edgeType.isEmpty()) {
      if (edgeType.equals(""String_Node_Str"")) {
        edge.setType(EdgeDraft.EdgeType.UNDIRECTED);
      }
 else       if (edgeType.equals(""String_Node_Str"")) {
        edge.setType(EdgeDraft.EdgeType.DIRECTED);
      }
 else       if (edgeType.equals(""String_Node_Str"")) {
        edge.setType(EdgeDraft.EdgeType.MUTUAL);
      }
 else {
        report.logIssue(new Issue(NbBundle.getMessage(ImporterGEXF.class,""String_Node_Str"",edgeType,edgeId),Issue.Level.SEVERE));
      }
    }
    String weightStr=edgeE.getAttribute(""String_Node_Str"");
    if (!weightStr.isEmpty()) {
      try {
        float weight=Float.parseFloat(weightStr);
        edge.setWeight(weight);
      }
 catch (      NumberFormatException e) {
        report.logIssue(new Issue(NbBundle.getMessage(ImporterGEXF.class,""String_Node_Str"",edgeId),Issue.Level.WARNING));
      }
    }
    String edgeLabel=edgeE.getAttribute(""String_Node_Str"");
    if (!edgeLabel.isEmpty()) {
      edge.setLabel(edgeLabel);
    }
    Node child=edgeE.getFirstChild();
    if (child != null) {
      do {
        if (child.getNodeName().equals(""String_Node_Str"")) {
          Node childE=child.getFirstChild();
          if (childE != null) {
            do {
              if (childE.getNodeName().equals(""String_Node_Str"")) {
                Element dataE=(Element)childE;
                setEdgeData(dataE,edge,edgeId);
              }
            }
 while ((childE=childE.getNextSibling()) != null);
          }
        }
      }
 while ((child=child.getNextSibling()) != null);
    }
    if (isDynamicMode) {
      String edgeStart=null;
      String edgeEnd=null;
      if (!edgeE.getAttribute(""String_Node_Str"").isEmpty()) {
        edgeStart=edgeE.getAttribute(""String_Node_Str"");
      }
      if (!edgeE.getAttribute(""String_Node_Str"").isEmpty()) {
        edgeEnd=edgeE.getAttribute(""String_Node_Str"");
      }
      if (edgeStart != null || edgeEnd != null) {
        edge.addTimeSlice(edgeStart,edgeEnd);
      }
    }
    container.addEdge(edge);
  }
}","private void parseEdges(NodeList edgeListE,String parent){
  for (int i=0; i < edgeListE.getLength(); i++) {
    if (edgeListE.item(i).getNodeType() != ELEMENT_NODE) {
      continue;
    }
    Element edgeE=(Element)edgeListE.item(i);
    EdgeDraft edge=container.factory().newEdgeDraft();
    if (parent == null) {
      Progress.progress(progressTicket);
    }
    if (cancel) {
      return;
    }
    String edgeId=edgeE.getAttribute(""String_Node_Str"");
    if (edgeId.isEmpty()) {
      report.logIssue(new Issue(NbBundle.getMessage(ImporterGEXF.class,""String_Node_Str""),Issue.Level.WARNING));
    }
    String edgeSource=edgeE.getAttribute(""String_Node_Str"");
    String edgeTarget=edgeE.getAttribute(""String_Node_Str"");
    NodeDraft nodeSource=container.getNode(edgeSource);
    NodeDraft nodeTarget=container.getNode(edgeTarget);
    if (nodeSource == null || nodeTarget == null) {
      throw new NullPointerException(edgeSource + ""String_Node_Str"" + edgeTarget);
    }
    edge.setSource(nodeSource);
    edge.setTarget(nodeTarget);
    String edgeType=edgeE.getAttribute(""String_Node_Str"");
    if (!edgeType.isEmpty()) {
      if (edgeType.equals(""String_Node_Str"")) {
        edge.setType(EdgeDraft.EdgeType.UNDIRECTED);
      }
 else       if (edgeType.equals(""String_Node_Str"")) {
        edge.setType(EdgeDraft.EdgeType.DIRECTED);
      }
 else       if (edgeType.equals(""String_Node_Str"")) {
        edge.setType(EdgeDraft.EdgeType.MUTUAL);
      }
 else {
        report.logIssue(new Issue(NbBundle.getMessage(ImporterGEXF.class,""String_Node_Str"",edgeType,edgeId),Issue.Level.SEVERE));
      }
    }
    String weightStr=edgeE.getAttribute(""String_Node_Str"");
    if (!weightStr.isEmpty()) {
      try {
        float weight=Float.parseFloat(weightStr);
        edge.setWeight(weight);
      }
 catch (      NumberFormatException e) {
        report.logIssue(new Issue(NbBundle.getMessage(ImporterGEXF.class,""String_Node_Str"",edgeId),Issue.Level.WARNING));
      }
    }
    String edgeLabel=edgeE.getAttribute(""String_Node_Str"");
    if (!edgeLabel.isEmpty()) {
      edge.setLabel(edgeLabel);
    }
    Node child=edgeE.getFirstChild();
    if (child != null) {
      do {
        if (child.getNodeName().equals(""String_Node_Str"")) {
          Node childE=child.getFirstChild();
          if (childE != null) {
            do {
              if (childE.getNodeName().equals(""String_Node_Str"")) {
                Element dataE=(Element)childE;
                setEdgeData(dataE,edge,edgeId);
              }
            }
 while ((childE=childE.getNextSibling()) != null);
          }
        }
      }
 while ((child=child.getNextSibling()) != null);
    }
    if (isDynamicMode) {
      String edgeStart=null;
      String edgeEnd=null;
      if (!edgeE.getAttribute(""String_Node_Str"").isEmpty()) {
        edgeStart=edgeE.getAttribute(""String_Node_Str"");
      }
      if (!edgeE.getAttribute(""String_Node_Str"").isEmpty()) {
        edgeEnd=edgeE.getAttribute(""String_Node_Str"");
      }
      if (edgeStart != null || edgeEnd != null) {
        edge.addTimeSlice(edgeStart,edgeEnd);
      }
    }
    container.addEdge(edge);
  }
}",0.9870004814636496
143045,"public void setMax(double max){
  if (model != null) {
    model.setMaxValue(max);
  }
}","public void setMax(double max){
  if (model != null && max > model.getMaxValue()) {
    model.setMaxValue(max);
  }
}",0.8585365853658536
143046,"public void setMin(double min){
  if (model != null) {
    model.setMinValue(min);
  }
}","public void setMin(double min){
  if (model != null && min < model.getMinValue()) {
    model.setMinValue(min);
  }
}",0.8585365853658536
143047,"public void pushSlice(Workspace workspace,String from,String to,Edge edge){
  AttributeModel am=workspace.getLookup().lookup(AttributeModel.class);
  AttributeColumn col=null;
  if (am.getEdgeTable().hasColumn(COLUMN_KEY)) {
    col=am.getEdgeTable().getColumn(COLUMN_KEY);
  }
 else {
    col=am.getEdgeTable().addColumn(COLUMN_KEY,COLUMN_TYPE);
  }
  DateFormat formatter=new SimpleDateFormat(DATE_FORMAT);
  double f=Double.NEGATIVE_INFINITY, t=Double.POSITIVE_INFINITY;
  try {
    if (from != null && !from.isEmpty())     f=((Date)formatter.parse(from)).getTime();
    if (to != null && !to.isEmpty())     t=((Date)formatter.parse(to)).getTime();
    if (model.getUnit() == null) {
      model.setUnit(DateTime.class);
    }
  }
 catch (  ParseException ex) {
    try {
      if (from != null)       f=Double.parseDouble(from);
      if (to != null)       t=Double.parseDouble(to);
      if (model.getUnit() == null) {
        model.setUnit(Double.class);
      }
    }
 catch (    NumberFormatException ex2) {
      Exceptions.printStackTrace(ex);
    }
  }
  edge.getEdgeData().getAttributes().setValue(col.getIndex(),new TimeInterval(f,t));
}","public void pushSlice(Workspace workspace,String from,String to,Edge edge){
  pushSlice(workspace,from,to,(Object)edge);
}",0.1666666666666666
143048,"public void mouseDragged(MouseEvent evt){
  if (model == null) {
    return;
  }
  currentMousePositionX=evt.getX();
  int x=currentMousePositionX;
  double w=getWidth();
  if (x > (int)w)   x=(int)w;
  if (x < 0)   x=0;
  int r=settings.selection.visibleHookWidth;
  if (currentState == TimelineState.IDLE) {
    if (inRange(x,(int)sf - 1,(int)sf + r + 1)) {
      highlightedComponent=HighlightedComponent.LEFT_HOOK;
      currentState=TimelineState.RESIZE_FROM;
    }
 else     if (inRange(x,(int)sf + r,(int)st - r)) {
      highlightedComponent=HighlightedComponent.CENTER_HOOK;
      currentState=TimelineState.MOVING;
    }
 else     if (inRange(x,(int)st - r - 1,(int)st + 1)) {
      highlightedComponent=HighlightedComponent.RIGHT_HOOK;
      currentState=TimelineState.RESIZE_TO;
    }
  }
  double delta=0;
  if (latestMousePositionX != null) {
    delta=x - latestMousePositionX;
  }
  latestMousePositionX=x;
switch (currentState) {
case RESIZE_FROM:
    if ((sf + delta <= 0)) {
      sf=0;
    }
 else     if (Math.abs(st - sf + delta) > settings.selection.minimalWidth) {
      sf+=delta;
    }
 else {
    }
  break;
case RESIZE_TO:
if ((st + delta >= w)) {
  st=w;
}
 else if (Math.abs((st + delta) - sf) > settings.selection.minimalWidth) {
  st+=delta;
}
break;
case MOVING:
if ((sf + delta <= 0)) {
sf=0;
}
 else if (st + delta >= w) {
st=w;
}
 else {
sf+=delta;
st+=delta;
}
break;
}
if (w != 0) {
newfrom=sf * (1.0 / w);
newto=st * (1.0 / w);
}
this.repaint();
}","public void mouseDragged(MouseEvent evt){
  if (model == null) {
    return;
  }
  double w=getWidth();
  currentMousePositionX=evt.getX();
  if (currentMousePositionX > (int)w) {
    currentMousePositionX=(int)w;
  }
  if (currentMousePositionX < 0) {
    currentMousePositionX=0;
  }
  int x=currentMousePositionX;
  int r=settings.selection.visibleHookWidth;
  if (currentState == TimelineState.IDLE) {
    if (inRange(x,(int)sf - 1,(int)sf + r + 1)) {
      highlightedComponent=HighlightedComponent.LEFT_HOOK;
      currentState=TimelineState.RESIZE_FROM;
    }
 else     if (inRange(x,(int)sf + r,(int)st - r)) {
      highlightedComponent=HighlightedComponent.CENTER_HOOK;
      currentState=TimelineState.MOVING;
    }
 else     if (inRange(x,(int)st - r - 1,(int)st + 1)) {
      highlightedComponent=HighlightedComponent.RIGHT_HOOK;
      currentState=TimelineState.RESIZE_TO;
    }
  }
  double delta=0;
  if (latestMousePositionX != null) {
    delta=x - latestMousePositionX;
  }
  latestMousePositionX=x;
switch (currentState) {
case RESIZE_FROM:
    if ((sf + delta <= 0)) {
      sf=0;
    }
 else     if (Math.abs(st - sf + delta) > settings.selection.minimalWidth) {
      sf+=delta;
    }
 else {
    }
  break;
case RESIZE_TO:
if ((st + delta >= w)) {
  st=w;
}
 else if (Math.abs((st + delta) - sf) > settings.selection.minimalWidth) {
  st+=delta;
}
break;
case MOVING:
if ((sf + delta <= 0)) {
sf=0;
}
 else if (st + delta >= w) {
st=w;
}
 else {
sf+=delta;
st+=delta;
}
break;
}
if (w != 0) {
newfrom=sf * (1.0 / w);
newto=st * (1.0 / w);
}
this.repaint();
}",0.9211212516297262
143049,"@Override public void paintComponent(Graphics g){
  super.paintComponent(g);
  if (st == 0) {
    if (model != null) {
      sf=model.getFromFloat() * (double)getWidth();
      st=model.getToFloat() * (double)getWidth();
    }
 else {
      sf=0.0;
      st=(double)getWidth();
    }
  }
  int tmMarginTop=2;
  int tmMarginBottom=4;
  int width=getWidth();
  int height=getHeight();
  settings.update(width,height);
  Graphics2D g2d=(Graphics2D)g;
  g2d.setBackground(settings.background.top);
  g2d.setPaint(settings.background.paint);
  g2d.fillRect(0,tmMarginTop + 1,width,height - tmMarginBottom - 2);
  if (!this.isEnabled()) {
    return;
  }
  if (model == null) {
    return;
  }
  long min=(long)model.getMinValue();
  long max=(long)model.getMaxValue();
  if (max <= min || min == Double.NEGATIVE_INFINITY || max == Double.POSITIVE_INFINITY) {
    return;
  }
  g2d.setRenderingHints(settings.renderingHints);
  int vhw=settings.selection.visibleHookWidth;
  int sw=(int)st - (int)sf;
  if (highlightedComponent != HighlightedComponent.NONE) {
    g2d.setPaint(settings.selection.mouseOverPaint);
switch (highlightedComponent) {
case LEFT_HOOK:
      g2d.fillRect((int)sf,tmMarginTop,vhw,height - tmMarginBottom - 1);
    g2d.setPaint(settings.selection.paint);
  g2d.fillRect((int)sf + vhw,tmMarginTop,sw - vhw,height - tmMarginBottom - 1);
break;
case CENTER_HOOK:
g2d.setPaint(settings.selection.paint);
g2d.fillRect((int)sf,tmMarginTop,vhw,height - tmMarginBottom - 1);
g2d.setPaint(settings.selection.mouseOverPaint);
g2d.fillRect((int)sf + vhw,tmMarginTop,sw - vhw * 2,height - tmMarginBottom - 1);
g2d.setPaint(settings.selection.paint);
g2d.fillRect((int)st - vhw,tmMarginTop,vhw,height - tmMarginBottom - 1);
break;
case RIGHT_HOOK:
g2d.setPaint(settings.selection.paint);
g2d.fillRect((int)sf,tmMarginTop,sw - vhw,height - tmMarginBottom - 1);
g2d.setPaint(settings.selection.mouseOverPaint);
g2d.fillRect((int)st - vhw,tmMarginTop,vhw,height - tmMarginBottom - 1);
break;
}
}
 else {
g2d.setPaint(settings.selection.paint);
g2d.fillRect((int)sf,tmMarginTop,sw,height - tmMarginBottom - 1);
}
if (model.getUnit() == DateTime.class) {
paintUpperRulerForInterval(g2d,new DateTime(new Date(min)),new DateTime(new Date(max)));
}
g2d.setColor(settings.defaultStrokeColor);
g2d.drawRect((int)sf,tmMarginTop,sw,height - tmMarginBottom - 1);
double v=model.getValueFromFloat(currentMousePositionX * (1.0 / width));
v+=model.getMinValue();
if (v != Double.NEGATIVE_INFINITY && v != Double.POSITIVE_INFINITY) {
String str=""String_Node_Str"";
if (model.getUnit() == DateTime.class) {
DateTime d=new DateTime(new Date((long)v));
if (d != null) {
DateTimeFormatter fmt=DateTimeFormat.forPattern(""String_Node_Str"");
str=fmt.withLocale(LOCALE).print(d);
}
}
 else {
str=new Double(v).toString();
}
int strw=(int)(settings.tip.fontMetrics.getStringBounds(str,null)).getWidth() + 4;
int px=currentMousePositionX;
if (px + strw >= width) {
px=width - strw;
}
g2d.setPaint(settings.tip.backgroundColor);
g2d.fillRect(px,1,strw,18);
g2d.setPaint(settings.tip.fontColor);
g2d.drawRect(px,1,strw,18);
g2d.setColor(settings.tip.fontColor);
g2d.drawString(str,px + 2,16);
}
}","@Override public void paintComponent(Graphics g){
  super.paintComponent(g);
  int width=getWidth();
  int height=getHeight();
  if (st == 0) {
    if (model != null) {
      sf=0.0 * (double)width;
      st=1.0 * (double)width;
      newfrom=sf * (1.0 / width);
      newto=st * (1.0 / width);
    }
  }
  int tmMarginTop=2;
  int tmMarginBottom=4;
  settings.update(width,height);
  Graphics2D g2d=(Graphics2D)g;
  g2d.setBackground(settings.background.top);
  g2d.setPaint(settings.background.paint);
  g2d.fillRect(0,tmMarginTop + 1,width,height - tmMarginBottom - 2);
  if (!this.isEnabled()) {
    return;
  }
  if (model == null) {
    return;
  }
  long min=(long)model.getMinValue();
  long max=(long)model.getMaxValue();
  if (max <= min || min == Double.NEGATIVE_INFINITY || max == Double.POSITIVE_INFINITY) {
    return;
  }
  g2d.setRenderingHints(settings.renderingHints);
  int vhw=settings.selection.visibleHookWidth;
  int sw=(int)st - (int)sf;
  if (highlightedComponent != HighlightedComponent.NONE) {
    g2d.setPaint(settings.selection.mouseOverPaint);
switch (highlightedComponent) {
case LEFT_HOOK:
      g2d.fillRect((int)sf,tmMarginTop,vhw,height - tmMarginBottom - 1);
    g2d.setPaint(settings.selection.paint);
  g2d.fillRect((int)sf + vhw,tmMarginTop,sw - vhw,height - tmMarginBottom - 1);
break;
case CENTER_HOOK:
g2d.setPaint(settings.selection.paint);
g2d.fillRect((int)sf,tmMarginTop,vhw,height - tmMarginBottom - 1);
g2d.setPaint(settings.selection.mouseOverPaint);
g2d.fillRect((int)sf + vhw,tmMarginTop,sw - vhw * 2,height - tmMarginBottom - 1);
g2d.setPaint(settings.selection.paint);
g2d.fillRect((int)st - vhw,tmMarginTop,vhw,height - tmMarginBottom - 1);
break;
case RIGHT_HOOK:
g2d.setPaint(settings.selection.paint);
g2d.fillRect((int)sf,tmMarginTop,sw - vhw,height - tmMarginBottom - 1);
g2d.setPaint(settings.selection.mouseOverPaint);
g2d.fillRect((int)st - vhw,tmMarginTop,vhw,height - tmMarginBottom - 1);
break;
}
}
 else {
g2d.setPaint(settings.selection.paint);
g2d.fillRect((int)sf,tmMarginTop,sw,height - tmMarginBottom - 1);
}
if (model.getUnit() == DateTime.class) {
paintUpperRulerForInterval(g2d,new DateTime(new Date(min)),new DateTime(new Date(max)));
}
g2d.setColor(settings.defaultStrokeColor);
g2d.drawRect((int)sf,tmMarginTop,sw,height - tmMarginBottom - 1);
double v=model.getValueFromFloat(currentMousePositionX * (1.0 / width));
v+=model.getMinValue();
if (v != Double.NEGATIVE_INFINITY && v != Double.POSITIVE_INFINITY) {
String str=""String_Node_Str"";
int strw=0;
if (model.getUnit() == DateTime.class) {
DateTime d=new DateTime(new Date((long)v));
if (d != null) {
DateTimeFormatter fmt=DateTimeFormat.forPattern(""String_Node_Str"");
str=fmt.withLocale(LOCALE).print(d);
strw=(int)(settings.tip.fontMetrics.getStringBounds(str,null)).getWidth() + 4;
}
}
 else {
str=new Double(v).toString();
strw=(int)(settings.tip.fontMetrics.getStringBounds(str,null)).getWidth() + 14;
}
int px=currentMousePositionX;
if (px + strw >= width) {
px=width - strw;
}
g2d.setPaint(settings.tip.backgroundColor);
g2d.fillRect(px,1,strw,18);
g2d.setPaint(settings.tip.fontColor);
g2d.drawRect(px,1,strw,18);
g2d.setColor(settings.tip.fontColor);
g2d.drawString(str,px + 2,16);
}
}",0.8975762314308053
143050,"public void setModel(TimelineModel model){
  if (model == null) {
    return;
  }
  if (model != this.model) {
    if (this.model != null) {
    }
    this.model=model;
    sf=model.getFromFloat() * (double)getWidth();
    st=model.getToFloat() * (double)getWidth();
  }
}","public void setModel(TimelineModel model){
  if (model == null) {
    return;
  }
  if (model != this.model) {
    if (this.model != null) {
    }
    this.model=model;
    sf=model.getFromFloat() * (double)getWidth();
    st=model.getToFloat() * (double)getWidth();
    repaint();
  }
}",0.962432915921288
143051,"private void parseNodes(NodeList nodeListE,String parent) throws Exception {
  for (int i=0; i < nodeListE.getLength(); i++) {
    Element nodeE=(Element)nodeListE.item(i);
    if (!nodeE.getNodeName().equals(""String_Node_Str"")) {
      report.logIssue(new Issue(NbBundle.getMessage(ImporterGEXF.class,""String_Node_Str"",nodeE.getNodeName()),Issue.Level.WARNING));
      return;
    }
    if (parent == null) {
      Progress.progress(progressTicket);
    }
    if (cancel) {
      return;
    }
    String nodeId=nodeE.getAttribute(""String_Node_Str"");
    if (nodeId.isEmpty()) {
      report.logIssue(new Issue(NbBundle.getMessage(ImporterGEXF.class,""String_Node_Str""),Issue.Level.SEVERE));
      continue;
    }
    NodeDraft node=container.factory().newNodeDraft();
    node.setId(nodeId);
    if (!nodeE.getAttribute(""String_Node_Str"").isEmpty() && !nodeE.getAttribute(""String_Node_Str"").equals(""String_Node_Str"")) {
      String pid=nodeE.getAttribute(""String_Node_Str"");
      if (!container.nodeExists(pid)) {
        if (unknownParents.containsKey(pid)) {
          unknownParents.get(pid).add(nodeId);
        }
 else {
          List<String> childList=new ArrayList<String>();
          childList.add(nodeId);
          unknownParents.put(pid,childList);
        }
      }
 else {
        node.setParent(container.getNode(pid));
      }
    }
 else     if (parent != null) {
      node.setParent(container.getNode(parent));
    }
    String nodeLabel=nodeE.getAttribute(""String_Node_Str"");
    if (nodeLabel.isEmpty()) {
      report.logIssue(new Issue(NbBundle.getMessage(ImporterGEXF.class,""String_Node_Str"",nodeId),Issue.Level.SEVERE));
      continue;
    }
    node.setLabel(nodeLabel);
    Node child=nodeE.getFirstChild();
    if (child != null) {
      do {
        if (child.getNodeName().equals(""String_Node_Str"")) {
          Node childE=child.getFirstChild();
          if (childE != null) {
            do {
              if (childE.getNodeName().equals(""String_Node_Str"")) {
                Element dataE=(Element)childE;
                setNodeData(dataE,node,nodeId);
              }
            }
 while ((childE=childE.getNextSibling()) != null);
          }
        }
      }
 while ((child=child.getNextSibling()) != null);
    }
    Element nodeColor=(Element)nodeE.getElementsByTagName(""String_Node_Str"").item(0);
    if (nodeColor != null) {
      String rStr=nodeColor.getAttribute(""String_Node_Str"");
      String gStr=nodeColor.getAttribute(""String_Node_Str"");
      String bStr=nodeColor.getAttribute(""String_Node_Str"");
      int r=(rStr.isEmpty()) ? 0 : Integer.parseInt(rStr);
      int g=(gStr.isEmpty()) ? 0 : Integer.parseInt(gStr);
      int b=(bStr.isEmpty()) ? 0 : Integer.parseInt(bStr);
      node.setColor(new Color(r,g,b));
    }
    Element nodePosition=(Element)nodeE.getElementsByTagName(""String_Node_Str"").item(0);
    if (nodePosition != null) {
      try {
        String xStr=nodePosition.getAttribute(""String_Node_Str"");
        if (!xStr.isEmpty()) {
          float x=Float.parseFloat(xStr);
          node.setX(x);
        }
      }
 catch (      NumberFormatException e) {
        report.logIssue(new Issue(NbBundle.getMessage(ImporterGEXF.class,""String_Node_Str"",nodeId,""String_Node_Str""),Issue.Level.WARNING));
      }
      try {
        String yStr=nodePosition.getAttribute(""String_Node_Str"");
        if (!yStr.isEmpty()) {
          float y=Float.parseFloat(yStr);
          node.setY(y);
        }
      }
 catch (      NumberFormatException e) {
        report.logIssue(new Issue(NbBundle.getMessage(ImporterGEXF.class,""String_Node_Str"",nodeId,""String_Node_Str""),Issue.Level.WARNING));
      }
      try {
        String zStr=nodePosition.getAttribute(""String_Node_Str"");
        if (!zStr.isEmpty()) {
          float z=Float.parseFloat(zStr);
          node.setZ(z);
        }
      }
 catch (      NumberFormatException e) {
        report.logIssue(new Issue(NbBundle.getMessage(ImporterGEXF.class,""String_Node_Str"",nodeId,""String_Node_Str""),Issue.Level.WARNING));
      }
    }
    Element nodeSize=(Element)nodeE.getElementsByTagName(""String_Node_Str"").item(0);
    if (nodeSize != null) {
      try {
        float size=Float.parseFloat(nodeSize.getAttribute(""String_Node_Str""));
        node.setSize(size);
      }
 catch (      NumberFormatException e) {
        report.logIssue(new Issue(NbBundle.getMessage(ImporterGEXF.class,""String_Node_Str"",nodeId),Issue.Level.WARNING));
      }
    }
    if (isDynamicMode) {
      String dateFrom=null;
      String dateTo=null;
      if (!nodeE.getAttribute(""String_Node_Str"").isEmpty()) {
        dateFrom=nodeE.getAttribute(""String_Node_Str"");
      }
      if (!nodeE.getAttribute(""String_Node_Str"").isEmpty()) {
        dateTo=nodeE.getAttribute(""String_Node_Str"");
      }
      if (dateFrom != null || dateTo != null) {
        node.addTimeSlice(dateFrom,dateTo);
      }
    }
    container.addNode(node);
    Node childNode=nodeE.getFirstChild();
    if (childNode != null) {
      do {
        if (childNode.getNodeName().equals(""String_Node_Str"")) {
          Node childE=childNode.getFirstChild();
          NodeList childrenListE=childE.getChildNodes();
          if (childrenListE != null && childrenListE.getLength() > 0) {
            parseNodes(childrenListE,nodeId);
          }
        }
      }
 while ((childNode=childNode.getNextSibling()) != null);
    }
    Node childEdge=nodeE.getFirstChild();
    if (childEdge != null) {
      do {
        if (childEdge.getNodeName().equals(""String_Node_Str"")) {
          Node childE=childEdge.getFirstChild();
          NodeList childrenListE=childE.getChildNodes();
          if (childrenListE != null && childrenListE.getLength() > 0) {
            parseEdges(childrenListE,nodeId);
          }
        }
      }
 while ((childEdge=childEdge.getNextSibling()) != null);
    }
  }
}","private void parseNodes(NodeList nodeListE,String parent) throws Exception {
  for (int i=0; i < nodeListE.getLength(); i++) {
    Element nodeE=(Element)nodeListE.item(i);
    if (!nodeE.getNodeName().equals(""String_Node_Str"")) {
      report.logIssue(new Issue(NbBundle.getMessage(ImporterGEXF.class,""String_Node_Str"",nodeE.getNodeName()),Issue.Level.WARNING));
      return;
    }
    if (parent == null) {
      Progress.progress(progressTicket);
    }
    if (cancel) {
      return;
    }
    String nodeId=nodeE.getAttribute(""String_Node_Str"");
    if (nodeId.isEmpty()) {
      report.logIssue(new Issue(NbBundle.getMessage(ImporterGEXF.class,""String_Node_Str""),Issue.Level.SEVERE));
      continue;
    }
    NodeDraft node=container.factory().newNodeDraft();
    node.setId(nodeId);
    if (!nodeE.getAttribute(""String_Node_Str"").isEmpty() && !nodeE.getAttribute(""String_Node_Str"").equals(""String_Node_Str"")) {
      String pid=nodeE.getAttribute(""String_Node_Str"");
      if (!container.nodeExists(pid)) {
        if (unknownParents.containsKey(pid)) {
          unknownParents.get(pid).add(nodeId);
        }
 else {
          List<String> childList=new ArrayList<String>();
          childList.add(nodeId);
          unknownParents.put(pid,childList);
        }
      }
 else {
        node.setParent(container.getNode(pid));
      }
    }
 else     if (parent != null) {
      node.setParent(container.getNode(parent));
    }
    String nodeLabel=nodeE.getAttribute(""String_Node_Str"");
    node.setLabel(nodeLabel);
    Node child=nodeE.getFirstChild();
    if (child != null) {
      do {
        if (child.getNodeName().equals(""String_Node_Str"")) {
          Node childE=child.getFirstChild();
          if (childE != null) {
            do {
              if (childE.getNodeName().equals(""String_Node_Str"")) {
                Element dataE=(Element)childE;
                setNodeData(dataE,node,nodeId);
              }
            }
 while ((childE=childE.getNextSibling()) != null);
          }
        }
      }
 while ((child=child.getNextSibling()) != null);
    }
    Element nodeColor=(Element)nodeE.getElementsByTagName(""String_Node_Str"").item(0);
    if (nodeColor != null) {
      String rStr=nodeColor.getAttribute(""String_Node_Str"");
      String gStr=nodeColor.getAttribute(""String_Node_Str"");
      String bStr=nodeColor.getAttribute(""String_Node_Str"");
      int r=(rStr.isEmpty()) ? 0 : Integer.parseInt(rStr);
      int g=(gStr.isEmpty()) ? 0 : Integer.parseInt(gStr);
      int b=(bStr.isEmpty()) ? 0 : Integer.parseInt(bStr);
      node.setColor(new Color(r,g,b));
    }
    Element nodePosition=(Element)nodeE.getElementsByTagName(""String_Node_Str"").item(0);
    if (nodePosition != null) {
      try {
        String xStr=nodePosition.getAttribute(""String_Node_Str"");
        if (!xStr.isEmpty()) {
          float x=Float.parseFloat(xStr);
          node.setX(x);
        }
      }
 catch (      NumberFormatException e) {
        report.logIssue(new Issue(NbBundle.getMessage(ImporterGEXF.class,""String_Node_Str"",nodeId,""String_Node_Str""),Issue.Level.WARNING));
      }
      try {
        String yStr=nodePosition.getAttribute(""String_Node_Str"");
        if (!yStr.isEmpty()) {
          float y=Float.parseFloat(yStr);
          node.setY(y);
        }
      }
 catch (      NumberFormatException e) {
        report.logIssue(new Issue(NbBundle.getMessage(ImporterGEXF.class,""String_Node_Str"",nodeId,""String_Node_Str""),Issue.Level.WARNING));
      }
      try {
        String zStr=nodePosition.getAttribute(""String_Node_Str"");
        if (!zStr.isEmpty()) {
          float z=Float.parseFloat(zStr);
          node.setZ(z);
        }
      }
 catch (      NumberFormatException e) {
        report.logIssue(new Issue(NbBundle.getMessage(ImporterGEXF.class,""String_Node_Str"",nodeId,""String_Node_Str""),Issue.Level.WARNING));
      }
    }
    Element nodeSize=(Element)nodeE.getElementsByTagName(""String_Node_Str"").item(0);
    if (nodeSize != null) {
      try {
        float size=Float.parseFloat(nodeSize.getAttribute(""String_Node_Str""));
        node.setSize(size);
      }
 catch (      NumberFormatException e) {
        report.logIssue(new Issue(NbBundle.getMessage(ImporterGEXF.class,""String_Node_Str"",nodeId),Issue.Level.WARNING));
      }
    }
    if (isDynamicMode) {
      String dateFrom=null;
      String dateTo=null;
      if (!nodeE.getAttribute(""String_Node_Str"").isEmpty()) {
        dateFrom=nodeE.getAttribute(""String_Node_Str"");
      }
      if (!nodeE.getAttribute(""String_Node_Str"").isEmpty()) {
        dateTo=nodeE.getAttribute(""String_Node_Str"");
      }
      if (dateFrom != null || dateTo != null) {
        node.addTimeSlice(dateFrom,dateTo);
      }
    }
    container.addNode(node);
    Node childNode=nodeE.getFirstChild();
    if (childNode != null) {
      do {
        if (childNode.getNodeName().equals(""String_Node_Str"")) {
          Node childE=childNode.getFirstChild();
          NodeList childrenListE=childE.getChildNodes();
          if (childrenListE != null && childrenListE.getLength() > 0) {
            parseNodes(childrenListE,nodeId);
          }
        }
      }
 while ((childNode=childNode.getNextSibling()) != null);
    }
    Node childEdge=nodeE.getFirstChild();
    if (childEdge != null) {
      do {
        if (childEdge.getNodeName().equals(""String_Node_Str"")) {
          Node childE=childEdge.getFirstChild();
          NodeList childrenListE=childE.getChildNodes();
          if (childrenListE != null && childrenListE.getLength() > 0) {
            parseEdges(childrenListE,nodeId);
          }
        }
      }
 while ((childEdge=childEdge.getNextSibling()) != null);
    }
  }
}",0.5474831344058121
143052,"private void clean(){
  this.container=null;
  this.progressTicket=null;
  this.report=null;
  this.nodePropertiesAttributes=null;
  this.edgePropertiesAttributes=null;
  this.optionsAttributes=null;
  this.cancel=false;
  this.isDynamicMode=false;
  this.isDateTypeInteger=false;
  this.unknownParents=null;
}","private void clean(){
  this.container=null;
  this.progressTicket=null;
  this.report=null;
  this.nodePropertiesAttributes=null;
  this.edgePropertiesAttributes=null;
  this.optionsAttributes=null;
  this.cancel=false;
  this.isDynamicMode=false;
  this.isDateTypeFloat=false;
  this.unknownParents=null;
}",0.9805825242718448
143053,"private void setAttributesColumns(NodeList columnListE){
  for (int i=0; i < columnListE.getLength() && !cancel; i++) {
    Element columnE=(Element)columnListE.item(i);
    Progress.progress(progressTicket);
    String colId=columnE.getAttribute(""String_Node_Str"");
    String colTitle=columnE.getAttribute(""String_Node_Str"");
    if (colTitle.isEmpty()) {
      colTitle=colId;
    }
    String colClass=((Element)columnE.getParentNode()).getAttribute(""String_Node_Str"");
    if (colClass.isEmpty() || !(colClass.equals(""String_Node_Str"") || colClass.equals(""String_Node_Str""))) {
      report.logIssue(new Issue(NbBundle.getMessage(ImporterGEXF.class,""String_Node_Str"",colTitle),Issue.Level.SEVERE));
      continue;
    }
    if (colClass.equals(""String_Node_Str"")) {
      NodeProperties prop=properties.getNodeProperty(colTitle);
      if (prop != null) {
        nodePropertiesAttributes.put(colId,prop);
        report.log(NbBundle.getMessage(ImporterGEXF.class,""String_Node_Str"",colTitle));
        continue;
      }
    }
 else     if (colClass.equals(""String_Node_Str"")) {
      EdgeProperties prop=properties.getEdgeProperty(colTitle);
      if (prop != null) {
        edgePropertiesAttributes.put(colId,prop);
        report.log(NbBundle.getMessage(ImporterGEXF.class,""String_Node_Str"",colTitle));
        continue;
      }
    }
    String keyType=columnE.getAttribute(""String_Node_Str"");
    AttributeType attributeType=AttributeType.STRING;
    if (keyType.equals(""String_Node_Str"")) {
      attributeType=AttributeType.BOOLEAN;
    }
 else     if (keyType.equals(""String_Node_Str"")) {
      attributeType=AttributeType.INT;
    }
 else     if (keyType.equals(""String_Node_Str"")) {
      attributeType=AttributeType.LONG;
    }
 else     if (keyType.equals(""String_Node_Str"")) {
      attributeType=AttributeType.FLOAT;
    }
 else     if (keyType.equals(""String_Node_Str"")) {
      attributeType=AttributeType.DOUBLE;
    }
 else     if (keyType.equals(""String_Node_Str"")) {
      attributeType=AttributeType.STRING;
    }
 else     if (keyType.equals(""String_Node_Str"")) {
      attributeType=AttributeType.LIST_STRING;
    }
 else     if (keyType.equals(""String_Node_Str"")) {
      attributeType=AttributeType.STRING;
    }
 else {
      if (keepComplexAndEmptyAttributeTypes) {
        report.logIssue(new Issue(NbBundle.getMessage(ImporterGEXF.class,""String_Node_Str"",colTitle),Issue.Level.WARNING));
      }
 else {
        report.logIssue(new Issue(NbBundle.getMessage(ImporterGEXF.class,""String_Node_Str"",colTitle),Issue.Level.SEVERE));
        continue;
      }
    }
    NodeList defaultList=columnE.getElementsByTagName(""String_Node_Str"");
    Object defaultValue=null;
    if (defaultList.getLength() > 0) {
      Element defaultE=(Element)defaultList.item(0);
      String defaultValueStr=defaultE.getTextContent();
      try {
        defaultValue=attributeType.parse(defaultValueStr);
        report.log(NbBundle.getMessage(ImporterGEXF.class,""String_Node_Str"",defaultValueStr,colTitle));
      }
 catch (      Exception e) {
        report.logIssue(new Issue(NbBundle.getMessage(ImporterGEXF.class,""String_Node_Str"",colTitle,attributeType.getTypeString()),Issue.Level.SEVERE));
      }
    }
    NodeList optionsList=columnE.getElementsByTagName(""String_Node_Str"");
    if (optionsList.getLength() > 0) {
      Element optionE=(Element)optionsList.item(0);
      String optionsValueStr=optionE.getTextContent();
      try {
        StringList optionValues=new StringList(optionsValueStr,""String_Node_Str"");
        optionsAttributes.put(colId,optionValues);
        report.log(NbBundle.getMessage(ImporterGEXF.class,""String_Node_Str"",optionsValueStr,colTitle));
      }
 catch (      Exception e) {
        report.logIssue(new Issue(NbBundle.getMessage(ImporterGEXF.class,""String_Node_Str"",colTitle,attributeType.getTypeString()),Issue.Level.SEVERE));
      }
    }
    if (colClass.equals(""String_Node_Str"")) {
      AttributeTable nodeClass=container.getAttributeModel().getNodeTable();
      nodeClass.addColumn(colId,colTitle,attributeType,AttributeOrigin.DATA,defaultValue);
      report.log(NbBundle.getMessage(ImporterGEXF.class,""String_Node_Str"",colTitle,attributeType.getTypeString()));
    }
 else     if (colClass.equals(""String_Node_Str"")) {
      AttributeTable edgeClass=container.getAttributeModel().getEdgeTable();
      edgeClass.addColumn(colId,colTitle,attributeType,AttributeOrigin.DATA,defaultValue);
      report.log(NbBundle.getMessage(ImporterGEXF.class,""String_Node_Str"",colTitle,attributeType.getTypeString()));
    }
  }
}","private void setAttributesColumns(NodeList columnListE){
  for (int i=0; i < columnListE.getLength() && !cancel; i++) {
    Element columnE=(Element)columnListE.item(i);
    Progress.progress(progressTicket);
    String colId=columnE.getAttribute(""String_Node_Str"");
    String colTitle=columnE.getAttribute(""String_Node_Str"");
    if (colTitle.isEmpty()) {
      colTitle=colId;
    }
    String colClass=((Element)columnE.getParentNode()).getAttribute(""String_Node_Str"");
    if (colClass.isEmpty() || !(colClass.equals(""String_Node_Str"") || colClass.equals(""String_Node_Str""))) {
      report.logIssue(new Issue(NbBundle.getMessage(ImporterGEXF.class,""String_Node_Str"",colTitle),Issue.Level.SEVERE));
      continue;
    }
    if (colClass.equals(""String_Node_Str"")) {
      NodeProperties prop=properties.getNodeProperty(colTitle);
      if (prop != null) {
        nodePropertiesAttributes.put(colId,prop);
        report.log(NbBundle.getMessage(ImporterGEXF.class,""String_Node_Str"",colTitle));
        continue;
      }
    }
 else     if (colClass.equals(""String_Node_Str"")) {
      EdgeProperties prop=properties.getEdgeProperty(colTitle);
      if (prop != null) {
        edgePropertiesAttributes.put(colId,prop);
        report.log(NbBundle.getMessage(ImporterGEXF.class,""String_Node_Str"",colTitle));
        continue;
      }
    }
    String keyType=columnE.getAttribute(""String_Node_Str"");
    AttributeType attributeType=AttributeType.STRING;
    if (keyType.equals(""String_Node_Str"")) {
      attributeType=AttributeType.BOOLEAN;
    }
 else     if (keyType.equals(""String_Node_Str"")) {
      attributeType=AttributeType.INT;
    }
 else     if (keyType.equals(""String_Node_Str"")) {
      attributeType=AttributeType.LONG;
    }
 else     if (keyType.equals(""String_Node_Str"")) {
      attributeType=AttributeType.FLOAT;
    }
 else     if (keyType.equals(""String_Node_Str"")) {
      attributeType=AttributeType.DOUBLE;
    }
 else     if (keyType.equals(""String_Node_Str"")) {
      attributeType=AttributeType.STRING;
    }
 else     if (keyType.equals(""String_Node_Str"")) {
      attributeType=AttributeType.LIST_STRING;
    }
 else     if (keyType.equals(""String_Node_Str"")) {
      attributeType=AttributeType.STRING;
    }
 else {
      if (keepComplexAndEmptyAttributeTypes) {
        report.logIssue(new Issue(NbBundle.getMessage(ImporterGEXF.class,""String_Node_Str"",colTitle),Issue.Level.WARNING));
      }
 else {
        report.logIssue(new Issue(NbBundle.getMessage(ImporterGEXF.class,""String_Node_Str"",colTitle),Issue.Level.SEVERE));
        continue;
      }
    }
    NodeList defaultList=columnE.getElementsByTagName(""String_Node_Str"");
    Object defaultValue=null;
    if (defaultList.getLength() > 0) {
      Element defaultE=(Element)defaultList.item(0);
      String defaultValueStr=defaultE.getTextContent();
      try {
        defaultValue=attributeType.parse(defaultValueStr);
        report.log(NbBundle.getMessage(ImporterGEXF.class,""String_Node_Str"",defaultValueStr,colTitle));
      }
 catch (      Exception e) {
        report.logIssue(new Issue(NbBundle.getMessage(ImporterGEXF.class,""String_Node_Str"",colTitle,attributeType.getTypeString()),Issue.Level.SEVERE));
      }
    }
    NodeList optionsList=columnE.getElementsByTagName(""String_Node_Str"");
    if (optionsList.getLength() > 0) {
      Element optionE=(Element)optionsList.item(0);
      String optionsValuesStr=optionE.getTextContent();
      try {
        StringList optionValuesList=new StringList(optionsValuesStr,""String_Node_Str"");
        optionsAttributes.put(colId,optionValuesList);
        report.log(NbBundle.getMessage(ImporterGEXF.class,""String_Node_Str"",optionsValuesStr,colTitle));
      }
 catch (      Exception e) {
        report.logIssue(new Issue(NbBundle.getMessage(ImporterGEXF.class,""String_Node_Str"",colTitle,attributeType.getTypeString()),Issue.Level.SEVERE));
      }
    }
    if (colClass.equals(""String_Node_Str"")) {
      AttributeTable nodeClass=container.getAttributeModel().getNodeTable();
      nodeClass.addColumn(colId,colTitle,attributeType,AttributeOrigin.DATA,defaultValue);
      report.log(NbBundle.getMessage(ImporterGEXF.class,""String_Node_Str"",colTitle,attributeType.getTypeString()));
    }
 else     if (colClass.equals(""String_Node_Str"")) {
      AttributeTable edgeClass=container.getAttributeModel().getEdgeTable();
      edgeClass.addColumn(colId,colTitle,attributeType,AttributeOrigin.DATA,defaultValue);
      report.log(NbBundle.getMessage(ImporterGEXF.class,""String_Node_Str"",colTitle,attributeType.getTypeString()));
    }
  }
}",0.998801089918256
143054,"private void refreshModelData(){
  if (consumerThread.getQueue().remainingCapacity() > 0) {
    consumerThread.execute(new Runnable(){
      public void run(){
        Graph visibleGraph=model.getGraphVisible();
        Graph fullGraph=model.getGraph();
        visibleGraph.readLock();
        fullGraph.readLock();
        final int nodesFull=fullGraph.getNodeCount();
        final int nodesVisible=visibleGraph.getNodeCount();
        final int edgesFull=fullGraph.getEdgeCount();
        final int edgesVisible=visibleGraph.getEdgeCount();
        final GraphType graphType=visibleGraph instanceof DirectedGraph ? GraphType.DIRECTED : visibleGraph instanceof UndirectedGraph ? GraphType.UNDIRECTED : GraphType.MIXED;
        fullGraph.readUnlock();
        visibleGraph.readUnlock();
        SwingUtilities.invokeLater(new Runnable(){
          public void run(){
            String nodePerc=nodesFull > 0 ? ""String_Node_Str"" + formatter.format(nodesVisible / (double)nodesFull) + ""String_Node_Str"" : ""String_Node_Str"";
            String edgePerc=edgesFull > 0 ? ""String_Node_Str"" + formatter.format(edgesVisible / (double)edgesFull) + ""String_Node_Str"" : ""String_Node_Str"";
            nodeLabel.setText(String.valueOf(nodesVisible) + nodePerc);
            edgeLabel.setText(String.valueOf(edgesVisible) + edgePerc);
            graphTypeLabel.setText(graphType.type);
            double percentage=0.5 * nodesVisible / (double)nodesFull + 0.5 * edgesVisible / (double)edgesFull;
            pieChart.refreshChart(percentage);
          }
        }
);
      }
    }
);
  }
}","private void refreshModelData(){
  if (consumerThread.getQueue().remainingCapacity() > 0) {
    consumerThread.execute(new Runnable(){
      public void run(){
        Graph visibleGraph=model.getGraphVisible();
        Graph fullGraph=model.getGraph();
        final int nodesFull=fullGraph.getNodeCount();
        final int nodesVisible=visibleGraph.getNodeCount();
        final int edgesFull=fullGraph.getEdgeCount();
        final int edgesVisible=visibleGraph.getEdgeCount();
        final GraphType graphType=visibleGraph instanceof DirectedGraph ? GraphType.DIRECTED : visibleGraph instanceof UndirectedGraph ? GraphType.UNDIRECTED : GraphType.MIXED;
        SwingUtilities.invokeLater(new Runnable(){
          public void run(){
            String nodePerc=nodesFull > 0 ? ""String_Node_Str"" + formatter.format(nodesVisible / (double)nodesFull) + ""String_Node_Str"" : ""String_Node_Str"";
            String edgePerc=edgesFull > 0 ? ""String_Node_Str"" + formatter.format(edgesVisible / (double)edgesFull) + ""String_Node_Str"" : ""String_Node_Str"";
            nodeLabel.setText(String.valueOf(nodesVisible) + nodePerc);
            edgeLabel.setText(String.valueOf(edgesVisible) + edgePerc);
            graphTypeLabel.setText(graphType.type);
            double percentage=0.5 * nodesVisible / (double)nodesFull + 0.5 * edgesVisible / (double)edgesFull;
            pieChart.refreshChart(percentage);
          }
        }
);
      }
    }
);
  }
}",0.9571522742254448
143055,"@Override public void paintComponent(Graphics g){
  super.paintComponent(g);
  int tmMarginTop=2;
  int tmMarginBottom=4;
  int width=getWidth();
  int height=getHeight();
  settings.update(width,height);
  Graphics2D g2d=(Graphics2D)g;
  g2d.setBackground(settings.background.top);
  g2d.setPaint(settings.background.paint);
  g2d.fillRect(0,tmMarginTop + 1,width,height - tmMarginBottom - 2);
  if (!this.isEnabled()) {
    return;
  }
  if (model == null) {
    return;
  }
  long min=(long)model.getMinValue();
  long max=(long)model.getMaxValue();
  if (max <= min && min < 0 && max <= 0) {
    return;
  }
  g2d.setRenderingHints(settings.renderingHints);
  int sf=(int)(model.getFromFloat() * (double)width);
  int st=(int)(model.getToFloat() * (double)width);
  int vhw=settings.selection.visibleHookWidth;
  int sw=st - sf;
  if (highlightedComponent != HighlightedComponent.NONE) {
    g2d.setPaint(settings.selection.mouseOverPaint);
switch (highlightedComponent) {
case LEFT_HOOK:
      g2d.fillRect(sf,tmMarginTop,vhw,height - tmMarginBottom - 1);
    g2d.setPaint(settings.selection.paint);
  g2d.fillRect(sf + vhw,tmMarginTop,sw - vhw,height - tmMarginBottom - 1);
break;
case CENTER_HOOK:
g2d.setPaint(settings.selection.paint);
g2d.fillRect(sf,tmMarginTop,vhw,height - tmMarginBottom - 1);
g2d.setPaint(settings.selection.mouseOverPaint);
g2d.fillRect(sf + vhw,tmMarginTop,sw - vhw * 2,height - tmMarginBottom - 1);
g2d.setPaint(settings.selection.paint);
g2d.fillRect(st - vhw,tmMarginTop,vhw,height - tmMarginBottom - 1);
break;
case RIGHT_HOOK:
g2d.setPaint(settings.selection.paint);
g2d.fillRect(sf,tmMarginTop,sw - vhw,height - tmMarginBottom - 1);
g2d.setPaint(settings.selection.mouseOverPaint);
g2d.fillRect(st - vhw,tmMarginTop,vhw,height - tmMarginBottom - 1);
break;
}
}
 else {
g2d.setPaint(settings.selection.paint);
g2d.fillRect(sf,tmMarginTop,sw,height - tmMarginBottom - 1);
}
paintUpperRulerForInterval(g2d,new DateTime(new Date(min)),new DateTime(new Date(max)));
g2d.setColor(settings.defaultStrokeColor);
g2d.drawRect(sf,tmMarginTop,sw,height - tmMarginBottom - 1);
double v=model.getValueFromFloat(currentMousePositionX * (1.0 / width));
if (v != Double.NEGATIVE_INFINITY && v != Double.POSITIVE_INFINITY) {
DateTime d=new DateTime(new Date((long)v));
if (d != null) {
DateTimeFormatter fmt=DateTimeFormat.forPattern(""String_Node_Str"");
String str=fmt.withLocale(LOCALE).print(d);
int strw=(int)(settings.tip.fontMetrics.getStringBounds(str,null)).getWidth() + 4;
int px=currentMousePositionX;
if (px + strw >= width) {
px=width - strw;
}
g2d.setPaint(settings.tip.backgroundColor);
g2d.fillRect(px,1,strw,18);
g2d.setPaint(settings.tip.fontColor);
g2d.drawRect(px,1,strw,18);
g2d.setColor(settings.tip.fontColor);
g2d.drawString(str,px + 2,16);
}
}
}","@Override public void paintComponent(Graphics g){
  super.paintComponent(g);
  int tmMarginTop=2;
  int tmMarginBottom=4;
  int width=getWidth();
  int height=getHeight();
  settings.update(width,height);
  Graphics2D g2d=(Graphics2D)g;
  g2d.setBackground(settings.background.top);
  g2d.setPaint(settings.background.paint);
  g2d.fillRect(0,tmMarginTop + 1,width,height - tmMarginBottom - 2);
  if (!this.isEnabled()) {
    return;
  }
  if (model == null) {
    return;
  }
  long min=(long)model.getMinValue();
  long max=(long)model.getMaxValue();
  if (max <= min && min < 0 && max <= 0) {
    return;
  }
  g2d.setRenderingHints(settings.renderingHints);
  int sf=(int)(model.getFromFloat() * (double)width);
  int st=(int)(model.getToFloat() * (double)width);
  int vhw=settings.selection.visibleHookWidth;
  int sw=st - sf;
  if (highlightedComponent != HighlightedComponent.NONE) {
    g2d.setPaint(settings.selection.mouseOverPaint);
switch (highlightedComponent) {
case LEFT_HOOK:
      g2d.fillRect(sf,tmMarginTop,vhw,height - tmMarginBottom - 1);
    g2d.setPaint(settings.selection.paint);
  g2d.fillRect(sf + vhw,tmMarginTop,sw - vhw,height - tmMarginBottom - 1);
break;
case CENTER_HOOK:
g2d.setPaint(settings.selection.paint);
g2d.fillRect(sf,tmMarginTop,vhw,height - tmMarginBottom - 1);
g2d.setPaint(settings.selection.mouseOverPaint);
g2d.fillRect(sf + vhw,tmMarginTop,sw - vhw * 2,height - tmMarginBottom - 1);
g2d.setPaint(settings.selection.paint);
g2d.fillRect(st - vhw,tmMarginTop,vhw,height - tmMarginBottom - 1);
break;
case RIGHT_HOOK:
g2d.setPaint(settings.selection.paint);
g2d.fillRect(sf,tmMarginTop,sw - vhw,height - tmMarginBottom - 1);
g2d.setPaint(settings.selection.mouseOverPaint);
g2d.fillRect(st - vhw,tmMarginTop,vhw,height - tmMarginBottom - 1);
break;
}
}
 else {
g2d.setPaint(settings.selection.paint);
g2d.fillRect(sf,tmMarginTop,sw,height - tmMarginBottom - 1);
}
paintUpperRulerForInterval(g2d,new DateTime(new Date(min)),new DateTime(new Date(max)));
g2d.setColor(settings.defaultStrokeColor);
g2d.drawRect(sf,tmMarginTop,sw,height - tmMarginBottom - 1);
double v=model.getValueFromFloat(currentMousePositionX * (1.0 / width));
v+=model.getMinValue();
if (v != Double.NEGATIVE_INFINITY && v != Double.POSITIVE_INFINITY) {
DateTime d=new DateTime(new Date((long)v));
if (d != null) {
DateTimeFormatter fmt=DateTimeFormat.forPattern(""String_Node_Str"");
String str=fmt.withLocale(LOCALE).print(d);
int strw=(int)(settings.tip.fontMetrics.getStringBounds(str,null)).getWidth() + 4;
int px=currentMousePositionX;
if (px + strw >= width) {
px=width - strw;
}
g2d.setPaint(settings.tip.backgroundColor);
g2d.fillRect(px,1,strw,18);
g2d.setPaint(settings.tip.fontColor);
g2d.drawRect(px,1,strw,18);
g2d.setColor(settings.tip.fontColor);
g2d.drawString(str,px + 2,16);
}
}
}",0.9957173447537472
143056,"public void pushSlice(Workspace workspace,String from,String to,Edge edge){
  AttributeModel am=workspace.getLookup().lookup(AttributeModel.class);
  AttributeColumn col=null;
  if (am.getEdgeTable().hasColumn(COLUMN_KEY)) {
    col=am.getEdgeTable().getColumn(COLUMN_KEY);
  }
 else {
    col=am.getEdgeTable().addColumn(COLUMN_KEY,COLUMN_TYPE);
  }
  DateFormat formatter=new SimpleDateFormat(DATE_FORMAT);
  double f=Double.NEGATIVE_INFINITY, t=Double.POSITIVE_INFINITY;
  try {
    if (from != null && !from.isEmpty()) {
      f=((Date)formatter.parse(from)).getTime();
    }
    if (to != null && !to.isEmpty()) {
      t=((Date)formatter.parse(to)).getTime();
    }
  }
 catch (  ParseException ex) {
    Exceptions.printStackTrace(ex);
  }
  edge.getEdgeData().getAttributes().setValue(col.getIndex(),new TimeInterval(f,t));
}","public void pushSlice(Workspace workspace,String from,String to,Edge edge){
  AttributeModel am=workspace.getLookup().lookup(AttributeModel.class);
  AttributeColumn col=null;
  if (am.getEdgeTable().hasColumn(COLUMN_KEY)) {
    col=am.getEdgeTable().getColumn(COLUMN_KEY);
  }
 else {
    col=am.getEdgeTable().addColumn(COLUMN_KEY,COLUMN_TYPE);
  }
  DateFormat formatter=new SimpleDateFormat(DATE_FORMAT);
  double f=Double.NEGATIVE_INFINITY, t=Double.POSITIVE_INFINITY;
  try {
    if (from != null && !from.isEmpty())     f=((Date)formatter.parse(from)).getTime();
    if (to != null && !to.isEmpty())     t=((Date)formatter.parse(to)).getTime();
    if (model.getUnit() == null) {
      model.setUnit(DateTime.class);
    }
  }
 catch (  ParseException ex) {
    try {
      if (from != null)       f=Double.parseDouble(from);
      if (to != null)       t=Double.parseDouble(to);
      if (model.getUnit() == null) {
        model.setUnit(Double.class);
      }
    }
 catch (    NumberFormatException ex2) {
      Exceptions.printStackTrace(ex);
    }
  }
  edge.getEdgeData().getAttributes().setValue(col.getIndex(),new TimeInterval(f,t));
}",0.7453353504790721
143057,"public void init(){
  PropertyChangeEvent evt=new PropertyChangeEvent(this,""String_Node_Str"",null,null);
  for (  PropertyChangeListener l : listeners) {
    l.propertyChange(evt);
  }
}","public void init(){
  final PropertyChangeEvent evt=new PropertyChangeEvent(this,""String_Node_Str"",null,null);
  SwingUtilities.invokeLater(new Runnable(){
    public void run(){
      for (      PropertyChangeListener l : listeners) {
        l.propertyChange(evt);
      }
    }
  }
);
}",0.7705263157894737
143058,"private void exportData(Graph graph,AttributeModel attributeModel) throws Exception {
  Progress.start(progressTicket);
  defaultNodeColumns(graph);
  defaultEdgeColumns(graph);
  attributesNodeColumns(attributeModel);
  attributesEdgeColumns(attributeModel);
  StringBuilder stringBuilder=new StringBuilder();
  stringBuilder.append(""String_Node_Str"");
  for (  NodeColumnsGDF c : defaultNodeColumnsGDFs) {
    if (c.isEnable()) {
      stringBuilder.append(c.getTitle());
      stringBuilder.append(""String_Node_Str"");
      stringBuilder.append(c.getType().toString().toUpperCase());
      if (c.getDefaultValue() != null) {
        stringBuilder.append(""String_Node_Str"");
        stringBuilder.append(c.getDefaultValue().toString());
      }
      stringBuilder.append(""String_Node_Str"");
    }
  }
  for (  AttributeColumn c : nodeColumns) {
    if (c.getOrigin().equals(AttributeOrigin.PROPERTY)) {
      stringBuilder.append(c.getTitle());
      stringBuilder.append(""String_Node_Str"");
      DataTypeGDF dataTypeGDF=getDataTypeGDF(c.getType());
      stringBuilder.append(dataTypeGDF.toString().toUpperCase());
      if (c.getDefaultValue() != null) {
        stringBuilder.append(""String_Node_Str"");
        stringBuilder.append(c.getDefaultValue().toString());
      }
      stringBuilder.append(""String_Node_Str"");
    }
  }
  stringBuilder.setLength(stringBuilder.length() - 1);
  stringBuilder.append(""String_Node_Str"");
  graph.readLock();
  if (normalize) {
    calculateMinMax(graph);
  }
  int max=graph.getNodeCount() + graph.getEdgeCount();
  Progress.switchToDeterminate(progressTicket,max);
  for (  Node node : graph.getNodes()) {
    NodeData nodeData=node.getNodeData();
    stringBuilder.append(nodeData.getId());
    stringBuilder.append(""String_Node_Str"");
    for (    NodeColumnsGDF c : defaultNodeColumnsGDFs) {
      if (c.isEnable()) {
        c.writeData(stringBuilder,node);
      }
      stringBuilder.append(""String_Node_Str"");
    }
    for (    AttributeColumn c : nodeColumns) {
      Object val=node.getNodeData().getAttributes().getValue(c.getIndex());
      if (val != null) {
        if (c.getType().equals(AttributeType.STRING) || c.getType().equals(AttributeType.LIST_STRING)) {
          String quote=(simpleQuotes) ? ""String_Node_Str"" : ""String_Node_Str"";
          stringBuilder.append(quote);
          stringBuilder.append(val.toString());
          stringBuilder.append(quote);
        }
 else {
          stringBuilder.append(val.toString());
        }
      }
    }
    stringBuilder.setLength(stringBuilder.length() - 1);
    stringBuilder.append(""String_Node_Str"");
    Progress.progress(progressTicket);
  }
  stringBuilder.append(""String_Node_Str"");
  for (  EdgeColumnsGDF c : defaultEdgeColumnsGDFs) {
    if (c.isEnable()) {
      stringBuilder.append(c.getTitle());
      stringBuilder.append(""String_Node_Str"");
      stringBuilder.append(c.getType().toString().toUpperCase());
      if (c.getDefaultValue() != null) {
        stringBuilder.append(""String_Node_Str"");
        stringBuilder.append(c.getDefaultValue().toString());
      }
      stringBuilder.append(""String_Node_Str"");
    }
  }
  for (  AttributeColumn c : edgeColumns) {
    if (c.getOrigin().equals(AttributeOrigin.PROPERTY)) {
      stringBuilder.append(c.getTitle());
      stringBuilder.append(""String_Node_Str"");
      DataTypeGDF dataTypeGDF=getDataTypeGDF(c.getType());
      stringBuilder.append(dataTypeGDF.toString().toUpperCase());
      if (c.getDefaultValue() != null) {
        stringBuilder.append(""String_Node_Str"");
        stringBuilder.append(c.getDefaultValue().toString());
      }
      stringBuilder.append(""String_Node_Str"");
    }
  }
  stringBuilder.setLength(stringBuilder.length() - 1);
  stringBuilder.append(""String_Node_Str"");
  EdgeIterable edgeIterable;
  if (graph.getGraphModel().isHierarchical()) {
    HierarchicalGraph hierarchicalGraph=(HierarchicalGraph)graph;
    edgeIterable=hierarchicalGraph.getEdgesAndMetaEdges();
  }
 else {
    edgeIterable=graph.getEdges();
  }
  for (  Edge edge : edgeIterable) {
    stringBuilder.append(edge.getSource().getNodeData().getId());
    stringBuilder.append(""String_Node_Str"");
    stringBuilder.append(edge.getTarget().getNodeData().getId());
    stringBuilder.append(""String_Node_Str"");
    for (    EdgeColumnsGDF c : defaultEdgeColumnsGDFs) {
      if (c.isEnable()) {
        c.writeData(stringBuilder,edge);
      }
      stringBuilder.append(""String_Node_Str"");
    }
    for (    AttributeColumn c : nodeColumns) {
      Object val=edge.getEdgeData().getAttributes().getValue(c.getIndex());
      if (val != null) {
        if (c.getType().equals(AttributeType.STRING) || c.getType().equals(AttributeType.LIST_STRING)) {
          String quote=(simpleQuotes) ? ""String_Node_Str"" : ""String_Node_Str"";
          stringBuilder.append(quote);
          stringBuilder.append(val.toString());
          stringBuilder.append(quote);
        }
 else {
          stringBuilder.append(val.toString());
        }
      }
      stringBuilder.append(""String_Node_Str"");
    }
    stringBuilder.setLength(stringBuilder.length() - 1);
    stringBuilder.append(""String_Node_Str"");
    Progress.progress(progressTicket);
  }
  graph.readUnlock();
  writer.append(stringBuilder);
  Progress.finish(progressTicket);
}","private void exportData(Graph graph,AttributeModel attributeModel) throws Exception {
  Progress.start(progressTicket);
  defaultNodeColumns(graph);
  defaultEdgeColumns(graph);
  attributesNodeColumns(attributeModel);
  attributesEdgeColumns(attributeModel);
  StringBuilder stringBuilder=new StringBuilder();
  stringBuilder.append(""String_Node_Str"");
  for (  NodeColumnsGDF c : defaultNodeColumnsGDFs) {
    if (c.isEnable()) {
      stringBuilder.append(c.getTitle());
      stringBuilder.append(""String_Node_Str"");
      stringBuilder.append(c.getType().toString().toUpperCase());
      if (c.getDefaultValue() != null) {
        stringBuilder.append(""String_Node_Str"");
        stringBuilder.append(c.getDefaultValue().toString());
      }
      stringBuilder.append(""String_Node_Str"");
    }
  }
  for (  AttributeColumn c : nodeColumns) {
    if (!c.getOrigin().equals(AttributeOrigin.PROPERTY)) {
      stringBuilder.append(c.getTitle());
      stringBuilder.append(""String_Node_Str"");
      DataTypeGDF dataTypeGDF=getDataTypeGDF(c.getType());
      stringBuilder.append(dataTypeGDF.toString().toUpperCase());
      if (c.getDefaultValue() != null) {
        stringBuilder.append(""String_Node_Str"");
        stringBuilder.append(c.getDefaultValue().toString());
      }
      stringBuilder.append(""String_Node_Str"");
    }
  }
  stringBuilder.setLength(stringBuilder.length() - 1);
  stringBuilder.append(""String_Node_Str"");
  graph.readLock();
  if (normalize) {
    calculateMinMax(graph);
  }
  int max=graph.getNodeCount() + graph.getEdgeCount();
  Progress.switchToDeterminate(progressTicket,max);
  for (  Node node : graph.getNodes()) {
    NodeData nodeData=node.getNodeData();
    stringBuilder.append(nodeData.getId());
    stringBuilder.append(""String_Node_Str"");
    for (    NodeColumnsGDF c : defaultNodeColumnsGDFs) {
      if (c.isEnable()) {
        c.writeData(stringBuilder,node);
        stringBuilder.append(""String_Node_Str"");
      }
    }
    for (    AttributeColumn c : nodeColumns) {
      if (!c.getOrigin().equals(AttributeOrigin.PROPERTY)) {
        Object val=node.getNodeData().getAttributes().getValue(c.getIndex());
        if (val != null) {
          if (c.getType().equals(AttributeType.STRING) || c.getType().equals(AttributeType.LIST_STRING)) {
            String quote=!useQuotes ? ""String_Node_Str"" : simpleQuotes ? ""String_Node_Str"" : ""String_Node_Str"";
            stringBuilder.append(quote);
            stringBuilder.append(val.toString());
            stringBuilder.append(quote);
          }
 else {
            stringBuilder.append(val.toString());
          }
        }
        stringBuilder.append(""String_Node_Str"");
      }
    }
    stringBuilder.setLength(stringBuilder.length() - 1);
    stringBuilder.append(""String_Node_Str"");
    Progress.progress(progressTicket);
  }
  stringBuilder.append(""String_Node_Str"");
  for (  EdgeColumnsGDF c : defaultEdgeColumnsGDFs) {
    if (c.isEnable()) {
      stringBuilder.append(c.getTitle());
      stringBuilder.append(""String_Node_Str"");
      stringBuilder.append(c.getType().toString().toUpperCase());
      if (c.getDefaultValue() != null) {
        stringBuilder.append(""String_Node_Str"");
        stringBuilder.append(c.getDefaultValue().toString());
      }
      stringBuilder.append(""String_Node_Str"");
    }
  }
  for (  AttributeColumn c : edgeColumns) {
    if (c.getOrigin().equals(AttributeOrigin.PROPERTY)) {
      stringBuilder.append(c.getTitle());
      stringBuilder.append(""String_Node_Str"");
      DataTypeGDF dataTypeGDF=getDataTypeGDF(c.getType());
      stringBuilder.append(dataTypeGDF.toString().toUpperCase());
      if (c.getDefaultValue() != null) {
        stringBuilder.append(""String_Node_Str"");
        stringBuilder.append(c.getDefaultValue().toString());
      }
      stringBuilder.append(""String_Node_Str"");
    }
  }
  stringBuilder.setLength(stringBuilder.length() - 1);
  stringBuilder.append(""String_Node_Str"");
  EdgeIterable edgeIterable;
  if (graph.getGraphModel().isHierarchical()) {
    HierarchicalGraph hierarchicalGraph=(HierarchicalGraph)graph;
    edgeIterable=hierarchicalGraph.getEdgesAndMetaEdges();
  }
 else {
    edgeIterable=graph.getEdges();
  }
  for (  Edge edge : edgeIterable) {
    stringBuilder.append(edge.getSource().getNodeData().getId());
    stringBuilder.append(""String_Node_Str"");
    stringBuilder.append(edge.getTarget().getNodeData().getId());
    stringBuilder.append(""String_Node_Str"");
    for (    EdgeColumnsGDF c : defaultEdgeColumnsGDFs) {
      if (c.isEnable()) {
        c.writeData(stringBuilder,edge);
        stringBuilder.append(""String_Node_Str"");
      }
    }
    for (    AttributeColumn c : nodeColumns) {
      Object val=edge.getEdgeData().getAttributes().getValue(c.getIndex());
      if (val != null) {
        if (c.getType().equals(AttributeType.STRING) || c.getType().equals(AttributeType.LIST_STRING)) {
          String quote=!useQuotes ? ""String_Node_Str"" : simpleQuotes ? ""String_Node_Str"" : ""String_Node_Str"";
          stringBuilder.append(quote);
          stringBuilder.append(val.toString());
          stringBuilder.append(quote);
        }
 else {
          stringBuilder.append(val.toString());
        }
      }
      stringBuilder.append(""String_Node_Str"");
    }
    stringBuilder.setLength(stringBuilder.length() - 1);
    stringBuilder.append(""String_Node_Str"");
    Progress.progress(progressTicket);
  }
  graph.readUnlock();
  writer.append(stringBuilder);
  Progress.finish(progressTicket);
}",0.5166466844969104
143059,"private void defaultNodeColumns(Graph graph){
  NodeColumnsGDF labelColumn=new NodeColumnsGDF(""String_Node_Str""){
    @Override public boolean isEnable(){
      return true;
    }
    @Override public void writeData(    StringBuilder builder,    Node node){
      String label=node.getNodeData().getLabel();
      if (label != null) {
        String quote=(simpleQuotes) ? ""String_Node_Str"" : ""String_Node_Str"";
        builder.append(quote);
        builder.append(label);
        builder.append(quote);
      }
    }
  }
;
  NodeColumnsGDF visibleColumn=new NodeColumnsGDF(""String_Node_Str"",DataTypeGDF.BOOLEAN){
    @Override public boolean isEnable(){
      return true;
    }
    @Override public void writeData(    StringBuilder builder,    Node node){
      builder.append(true);
    }
  }
;
  NodeColumnsGDF labelVisibleColumn=new NodeColumnsGDF(""String_Node_Str"",DataTypeGDF.BOOLEAN){
    @Override public boolean isEnable(){
      return true;
    }
    @Override public void writeData(    StringBuilder builder,    Node node){
      builder.append(node.getNodeData().getTextData().isVisible());
    }
  }
;
  NodeColumnsGDF widthColumn=new NodeColumnsGDF(""String_Node_Str"",DataTypeGDF.DOUBLE){
    @Override public boolean isEnable(){
      return true;
    }
    @Override public void writeData(    StringBuilder builder,    Node node){
      float size=node.getNodeData().getSize();
      if (normalize) {
        size=(size - minSize) / (maxSize - minSize);
      }
      builder.append(size);
    }
  }
;
  NodeColumnsGDF heightColumn=new NodeColumnsGDF(""String_Node_Str"",DataTypeGDF.DOUBLE){
    @Override public boolean isEnable(){
      return true;
    }
    @Override public void writeData(    StringBuilder builder,    Node node){
      float size=node.getNodeData().getSize();
      if (normalize) {
        size=(size - minSize) / (maxSize - minSize);
      }
      builder.append(size);
    }
  }
;
  NodeColumnsGDF xColumn=new NodeColumnsGDF(""String_Node_Str"",DataTypeGDF.DOUBLE){
    @Override public boolean isEnable(){
      return exportPosition;
    }
    @Override public void writeData(    StringBuilder builder,    Node node){
      float x=node.getNodeData().x();
      if (normalize && x != 0.0) {
        x=(x - minX) / (maxX - minX);
      }
      builder.append(x);
    }
  }
;
  NodeColumnsGDF yColumn=new NodeColumnsGDF(""String_Node_Str"",DataTypeGDF.DOUBLE){
    @Override public boolean isEnable(){
      return exportPosition;
    }
    @Override public void writeData(    StringBuilder builder,    Node node){
      float y=node.getNodeData().y();
      if (normalize && y != 0.0) {
        y=(y - minY) / (maxY - minY);
      }
      builder.append(y);
    }
  }
;
  NodeColumnsGDF colorColumn=new NodeColumnsGDF(""String_Node_Str""){
    @Override public boolean isEnable(){
      return exportColors;
    }
    @Override public void writeData(    StringBuilder builder,    Node node){
      String quote=(simpleQuotes) ? ""String_Node_Str"" : ""String_Node_Str"";
      builder.append(quote);
      builder.append((int)(node.getNodeData().r() * 255f));
      builder.append(""String_Node_Str"");
      builder.append((int)(node.getNodeData().g() * 255f));
      builder.append(""String_Node_Str"");
      builder.append((int)(node.getNodeData().b() * 255f));
      builder.append(quote);
    }
  }
;
  NodeColumnsGDF fixedColumn=new NodeColumnsGDF(""String_Node_Str"",DataTypeGDF.BOOLEAN){
    @Override public boolean isEnable(){
      return true;
    }
    @Override public void writeData(    StringBuilder builder,    Node node){
      builder.append(node.getNodeData().isFixed());
    }
  }
;
  NodeColumnsGDF styleColumn=new NodeColumnsGDF(""String_Node_Str"",DataTypeGDF.INT){
    @Override public boolean isEnable(){
      return true;
    }
    @Override public void writeData(    StringBuilder builder,    Node node){
    }
  }
;
  defaultNodeColumnsGDFs=new NodeColumnsGDF[10];
  defaultNodeColumnsGDFs[0]=labelColumn;
  defaultNodeColumnsGDFs[1]=visibleColumn;
  defaultNodeColumnsGDFs[2]=labelVisibleColumn;
  defaultNodeColumnsGDFs[3]=widthColumn;
  defaultNodeColumnsGDFs[4]=heightColumn;
  defaultNodeColumnsGDFs[5]=xColumn;
  defaultNodeColumnsGDFs[6]=yColumn;
  defaultNodeColumnsGDFs[7]=colorColumn;
  defaultNodeColumnsGDFs[8]=fixedColumn;
  defaultNodeColumnsGDFs[9]=styleColumn;
}","private void defaultNodeColumns(Graph graph){
  NodeColumnsGDF labelColumn=new NodeColumnsGDF(""String_Node_Str""){
    @Override public boolean isEnable(){
      return true;
    }
    @Override public void writeData(    StringBuilder builder,    Node node){
      String label=node.getNodeData().getLabel();
      if (label != null) {
        String quote=!useQuotes ? ""String_Node_Str"" : simpleQuotes ? ""String_Node_Str"" : ""String_Node_Str"";
        builder.append(quote);
        builder.append(label);
        builder.append(quote);
      }
    }
  }
;
  NodeColumnsGDF visibleColumn=new NodeColumnsGDF(""String_Node_Str"",DataTypeGDF.BOOLEAN){
    @Override public boolean isEnable(){
      return exportVisibility;
    }
    @Override public void writeData(    StringBuilder builder,    Node node){
      builder.append(true);
    }
  }
;
  NodeColumnsGDF labelVisibleColumn=new NodeColumnsGDF(""String_Node_Str"",DataTypeGDF.BOOLEAN){
    @Override public boolean isEnable(){
      return exportVisibility;
    }
    @Override public void writeData(    StringBuilder builder,    Node node){
      builder.append(node.getNodeData().getTextData().isVisible());
    }
  }
;
  NodeColumnsGDF widthColumn=new NodeColumnsGDF(""String_Node_Str"",DataTypeGDF.DOUBLE){
    @Override public boolean isEnable(){
      return exportPosition;
    }
    @Override public void writeData(    StringBuilder builder,    Node node){
      float size=node.getNodeData().getSize();
      if (normalize) {
        size=(size - minSize) / (maxSize - minSize);
      }
      builder.append(size);
    }
  }
;
  NodeColumnsGDF heightColumn=new NodeColumnsGDF(""String_Node_Str"",DataTypeGDF.DOUBLE){
    @Override public boolean isEnable(){
      return exportPosition;
    }
    @Override public void writeData(    StringBuilder builder,    Node node){
      float size=node.getNodeData().getSize();
      if (normalize) {
        size=(size - minSize) / (maxSize - minSize);
      }
      builder.append(size);
    }
  }
;
  NodeColumnsGDF xColumn=new NodeColumnsGDF(""String_Node_Str"",DataTypeGDF.DOUBLE){
    @Override public boolean isEnable(){
      return exportPosition;
    }
    @Override public void writeData(    StringBuilder builder,    Node node){
      float x=node.getNodeData().x();
      if (normalize && x != 0.0) {
        x=(x - minX) / (maxX - minX);
      }
      builder.append(x);
    }
  }
;
  NodeColumnsGDF yColumn=new NodeColumnsGDF(""String_Node_Str"",DataTypeGDF.DOUBLE){
    @Override public boolean isEnable(){
      return exportPosition;
    }
    @Override public void writeData(    StringBuilder builder,    Node node){
      float y=node.getNodeData().y();
      if (normalize && y != 0.0) {
        y=(y - minY) / (maxY - minY);
      }
      builder.append(y);
    }
  }
;
  NodeColumnsGDF colorColumn=new NodeColumnsGDF(""String_Node_Str""){
    @Override public boolean isEnable(){
      return exportColors;
    }
    @Override public void writeData(    StringBuilder builder,    Node node){
      String quote=""String_Node_Str"";
      builder.append(quote);
      builder.append((int)(node.getNodeData().r() * 255f));
      builder.append(""String_Node_Str"");
      builder.append((int)(node.getNodeData().g() * 255f));
      builder.append(""String_Node_Str"");
      builder.append((int)(node.getNodeData().b() * 255f));
      builder.append(quote);
    }
  }
;
  NodeColumnsGDF fixedColumn=new NodeColumnsGDF(""String_Node_Str"",DataTypeGDF.BOOLEAN){
    @Override public boolean isEnable(){
      return exportVisibility;
    }
    @Override public void writeData(    StringBuilder builder,    Node node){
      builder.append(node.getNodeData().isFixed());
    }
  }
;
  NodeColumnsGDF styleColumn=new NodeColumnsGDF(""String_Node_Str"",DataTypeGDF.INT){
    @Override public boolean isEnable(){
      return false;
    }
    @Override public void writeData(    StringBuilder builder,    Node node){
    }
  }
;
  defaultNodeColumnsGDFs=new NodeColumnsGDF[10];
  defaultNodeColumnsGDFs[0]=labelColumn;
  defaultNodeColumnsGDFs[1]=visibleColumn;
  defaultNodeColumnsGDFs[2]=labelVisibleColumn;
  defaultNodeColumnsGDFs[3]=widthColumn;
  defaultNodeColumnsGDFs[4]=heightColumn;
  defaultNodeColumnsGDFs[5]=xColumn;
  defaultNodeColumnsGDFs[6]=yColumn;
  defaultNodeColumnsGDFs[7]=colorColumn;
  defaultNodeColumnsGDFs[8]=fixedColumn;
  defaultNodeColumnsGDFs[9]=styleColumn;
}",0.9787819704094506
143060,"private void defaultEdgeColumns(final Graph graph){
  EdgeColumnsGDF labelColumn=new EdgeColumnsGDF(""String_Node_Str""){
    @Override public boolean isEnable(){
      return true;
    }
    @Override public void writeData(    StringBuilder builder,    Edge edge){
      String label=edge.getEdgeData().getLabel();
      if (label != null) {
        String quote=(simpleQuotes) ? ""String_Node_Str"" : ""String_Node_Str"";
        builder.append(quote);
        builder.append(label);
        builder.append(quote);
      }
    }
  }
;
  EdgeColumnsGDF weightColumn=new EdgeColumnsGDF(""String_Node_Str"",DataTypeGDF.DOUBLE){
    @Override public boolean isEnable(){
      return true;
    }
    @Override public void writeData(    StringBuilder builder,    Edge edge){
      builder.append(edge.getWeight());
    }
  }
;
  EdgeColumnsGDF directedColumn=new EdgeColumnsGDF(""String_Node_Str"",DataTypeGDF.BOOLEAN){
    @Override public boolean isEnable(){
      return true;
    }
    @Override public void writeData(    StringBuilder builder,    Edge edge){
      builder.append(graph.isDirected(edge));
    }
  }
;
  EdgeColumnsGDF colorColumn=new EdgeColumnsGDF(""String_Node_Str""){
    @Override public boolean isEnable(){
      return true;
    }
    @Override public void writeData(    StringBuilder builder,    Edge edge){
      String quote=(simpleQuotes) ? ""String_Node_Str"" : ""String_Node_Str"";
      builder.append(quote);
      builder.append((int)(edge.getEdgeData().r() * 255f));
      builder.append(""String_Node_Str"");
      builder.append((int)(edge.getEdgeData().g() * 255f));
      builder.append(""String_Node_Str"");
      builder.append((int)(edge.getEdgeData().b() * 255f));
      builder.append(quote);
    }
  }
;
  EdgeColumnsGDF visibleColumn=new EdgeColumnsGDF(""String_Node_Str"",DataTypeGDF.BOOLEAN){
    @Override public boolean isEnable(){
      return true;
    }
    @Override public void writeData(    StringBuilder builder,    Edge edge){
      builder.append(true);
    }
  }
;
  EdgeColumnsGDF labelVisibleColumn=new EdgeColumnsGDF(""String_Node_Str"",DataTypeGDF.BOOLEAN){
    @Override public boolean isEnable(){
      return true;
    }
    @Override public void writeData(    StringBuilder builder,    Edge edge){
      builder.append(edge.getEdgeData().getTextData().isVisible());
    }
  }
;
  defaultEdgeColumnsGDFs=new EdgeColumnsGDF[6];
  defaultEdgeColumnsGDFs[0]=labelColumn;
  defaultEdgeColumnsGDFs[1]=weightColumn;
  defaultEdgeColumnsGDFs[2]=directedColumn;
  defaultEdgeColumnsGDFs[3]=colorColumn;
  defaultEdgeColumnsGDFs[4]=visibleColumn;
  defaultEdgeColumnsGDFs[5]=labelVisibleColumn;
}","private void defaultEdgeColumns(final Graph graph){
  EdgeColumnsGDF labelColumn=new EdgeColumnsGDF(""String_Node_Str""){
    @Override public boolean isEnable(){
      return true;
    }
    @Override public void writeData(    StringBuilder builder,    Edge edge){
      String label=edge.getEdgeData().getLabel();
      if (label != null) {
        String quote=!useQuotes ? ""String_Node_Str"" : simpleQuotes ? ""String_Node_Str"" : ""String_Node_Str"";
        builder.append(quote);
        builder.append(label);
        builder.append(quote);
      }
    }
  }
;
  EdgeColumnsGDF weightColumn=new EdgeColumnsGDF(""String_Node_Str"",DataTypeGDF.DOUBLE){
    @Override public boolean isEnable(){
      return true;
    }
    @Override public void writeData(    StringBuilder builder,    Edge edge){
      builder.append(edge.getWeight());
    }
  }
;
  EdgeColumnsGDF directedColumn=new EdgeColumnsGDF(""String_Node_Str"",DataTypeGDF.BOOLEAN){
    @Override public boolean isEnable(){
      return true;
    }
    @Override public void writeData(    StringBuilder builder,    Edge edge){
      builder.append(graph.isDirected(edge));
    }
  }
;
  EdgeColumnsGDF colorColumn=new EdgeColumnsGDF(""String_Node_Str""){
    @Override public boolean isEnable(){
      return exportColors;
    }
    @Override public void writeData(    StringBuilder builder,    Edge edge){
      String quote=""String_Node_Str"";
      builder.append(quote);
      builder.append((int)(edge.getEdgeData().r() * 255f));
      builder.append(""String_Node_Str"");
      builder.append((int)(edge.getEdgeData().g() * 255f));
      builder.append(""String_Node_Str"");
      builder.append((int)(edge.getEdgeData().b() * 255f));
      builder.append(quote);
    }
  }
;
  EdgeColumnsGDF visibleColumn=new EdgeColumnsGDF(""String_Node_Str"",DataTypeGDF.BOOLEAN){
    @Override public boolean isEnable(){
      return true;
    }
    @Override public void writeData(    StringBuilder builder,    Edge edge){
      builder.append(true);
    }
  }
;
  EdgeColumnsGDF labelVisibleColumn=new EdgeColumnsGDF(""String_Node_Str"",DataTypeGDF.BOOLEAN){
    @Override public boolean isEnable(){
      return true;
    }
    @Override public void writeData(    StringBuilder builder,    Edge edge){
      builder.append(edge.getEdgeData().getTextData().isVisible());
    }
  }
;
  defaultEdgeColumnsGDFs=new EdgeColumnsGDF[6];
  defaultEdgeColumnsGDFs[0]=labelColumn;
  defaultEdgeColumnsGDFs[1]=weightColumn;
  defaultEdgeColumnsGDFs[2]=directedColumn;
  defaultEdgeColumnsGDFs[3]=colorColumn;
  defaultEdgeColumnsGDFs[4]=visibleColumn;
  defaultEdgeColumnsGDFs[5]=labelVisibleColumn;
}",0.9813617344998098
143061,"public void execute(GraphModel graphModel){
  cancelled=false;
  Progress.start(progressTicket);
  Progress.setDisplayName(progressTicket,""String_Node_Str"");
  HashMap<Integer,Node> nodeMap=new HashMap<Integer,Node>();
  HashMap<Node,Integer> intMap=new HashMap<Node,Integer>();
  Graph graph=graphModel.getGraph();
  graph.readLock();
  SparseMatrix matrix=new SparseMatrix();
  int nodeId=0;
  for (  Edge e : graph.getEdges()) {
    Node source=e.getSource();
    Node target=e.getTarget();
    Integer sourceId;
    Integer targetId;
    if ((sourceId=intMap.get(source)) == null) {
      sourceId=nodeId++;
      intMap.put(source,sourceId);
      nodeMap.put(sourceId,source);
    }
    if ((targetId=intMap.get(target)) == null) {
      targetId=nodeId++;
      intMap.put(target,targetId);
      nodeMap.put(targetId,target);
    }
    double weight=e.getWeight();
    matrix.add(sourceId,targetId,weight);
    if (cancelled) {
      graph.readUnlockAll();
      return;
    }
  }
  graph.readUnlock();
  matrix=matrix.transpose();
  matrix=run(matrix,maxResidual,gammaExp,loopGain,zeroMax);
  if (cancelled) {
    return;
  }
  Map<Integer,ArrayList<Integer>> map=getClusters(matrix);
  if (cancelled) {
    return;
  }
  int clusterNumber=1;
  List<Cluster> clustersList=new ArrayList<Cluster>();
  Set<ArrayList<Integer>> sortedClusters=new HashSet<ArrayList<Integer>>();
  for (  ArrayList<Integer> c : map.values()) {
    if (!sortedClusters.contains(c)) {
      sortedClusters.add(c);
      Node[] nodes=new Node[c.size()];
      int i=0;
      for (      Integer in : c) {
        Node node=nodeMap.get(in);
        nodes[i]=node;
        i++;
      }
      clustersList.add(new MCLCluster(nodes,clusterNumber));
      clusterNumber++;
    }
    if (cancelled) {
      return;
    }
  }
  clusters=clustersList.toArray(new Cluster[0]);
  Progress.finish(progressTicket);
}","public void execute(GraphModel graphModel){
  cancelled=false;
  Progress.start(progressTicket);
  Progress.setDisplayName(progressTicket,""String_Node_Str"");
  HashMap<Integer,Node> nodeMap=new HashMap<Integer,Node>();
  HashMap<Node,Integer> intMap=new HashMap<Node,Integer>();
  Graph graph=graphModel.getGraphVisible();
  graph.readLock();
  SparseMatrix matrix=new SparseMatrix();
  int nodeId=0;
  for (  Edge e : graph.getEdges()) {
    Node source=e.getSource();
    Node target=e.getTarget();
    Integer sourceId;
    Integer targetId;
    if ((sourceId=intMap.get(source)) == null) {
      sourceId=nodeId++;
      intMap.put(source,sourceId);
      nodeMap.put(sourceId,source);
    }
    if ((targetId=intMap.get(target)) == null) {
      targetId=nodeId++;
      intMap.put(target,targetId);
      nodeMap.put(targetId,target);
    }
    double weight=e.getWeight();
    matrix.add(sourceId,targetId,weight);
    if (cancelled) {
      graph.readUnlockAll();
      return;
    }
  }
  graph.readUnlock();
  matrix=matrix.transpose();
  matrix=run(matrix,maxResidual,gammaExp,loopGain,zeroMax);
  if (cancelled) {
    return;
  }
  Map<Integer,ArrayList<Integer>> map=getClusters(matrix);
  if (cancelled) {
    return;
  }
  int clusterNumber=1;
  List<Cluster> clustersList=new ArrayList<Cluster>();
  Set<ArrayList<Integer>> sortedClusters=new HashSet<ArrayList<Integer>>();
  for (  ArrayList<Integer> c : map.values()) {
    if (!sortedClusters.contains(c)) {
      sortedClusters.add(c);
      Node[] nodes=new Node[c.size()];
      int i=0;
      for (      Integer in : c) {
        Node node=nodeMap.get(in);
        nodes[i]=node;
        i++;
      }
      clustersList.add(new MCLCluster(nodes,clusterNumber));
      clusterNumber++;
    }
    if (cancelled) {
      return;
    }
  }
  clusters=clustersList.toArray(new Cluster[0]);
  Progress.finish(progressTicket);
}",0.9981486379264743
143062,"public void writeLock(){
  if (SwingUtilities.isEventDispatchThread()) {
    Throwable r=new RuntimeException();
    int i=0;
    for (i=0; i < r.getStackTrace().length; i++) {
      if (!r.getStackTrace()[i].toString().startsWith(""String_Node_Str"")) {
        break;
      }
    }
    System.err.println(""String_Node_Str"" + r.getStackTrace()[i].toString());
  }
  dhns.getWriteLock().lock();
}","public void writeLock(){
  if (SwingUtilities.isEventDispatchThread()) {
    Throwable r=new RuntimeException();
    int i=0;
    for (i=0; i < r.getStackTrace().length; i++) {
      if (!r.getStackTrace()[i].toString().startsWith(""String_Node_Str"")) {
        break;
      }
    }
  }
  dhns.getWriteLock().lock();
}",0.8045007032348804
143063,"public void readLock(){
  if (SwingUtilities.isEventDispatchThread()) {
    Throwable r=new RuntimeException();
    int i=0;
    for (i=0; i < r.getStackTrace().length; i++) {
      if (!r.getStackTrace()[i].toString().startsWith(""String_Node_Str"")) {
        break;
      }
    }
    System.err.println(""String_Node_Str"" + r.getStackTrace()[i].toString());
  }
  dhns.getReadLock().lock();
}","public void readLock(){
  if (SwingUtilities.isEventDispatchThread()) {
    Throwable r=new RuntimeException();
    int i=0;
    for (i=0; i < r.getStackTrace().length; i++) {
      if (!r.getStackTrace()[i].toString().startsWith(""String_Node_Str"")) {
        break;
      }
    }
  }
  dhns.getReadLock().lock();
}",0.8910891089108911
143064,"public boolean isAdjacent(Edge edge1,Edge edge2){
  if (edge1 == edge2) {
    throw new IllegalArgumentException(""String_Node_Str"");
  }
  checkEdge(edge1);
  checkEdge(edge2);
  return edge1.getSource() == edge2.getSource() || edge1.getSource() == edge2.getTarget() || edge1.getTarget() == edge2.getSource() || edge1.getTarget() == edge2.getTarget();
}","public boolean isAdjacent(Edge edge1,Edge edge2){
  if (edge1 == edge2) {
    throw new IllegalArgumentException(""String_Node_Str"");
  }
  AbstractEdge absEdge1=checkEdge(edge1);
  AbstractEdge absEdge2=checkEdge(edge2);
  return absEdge1.getSource(view.getViewId()) == absEdge2.getSource(view.getViewId()) || absEdge1.getSource(view.getViewId()) == absEdge2.getTarget(view.getViewId()) || absEdge1.getTarget(view.getViewId()) == absEdge2.getSource(view.getViewId()) || absEdge1.getTarget(view.getViewId()) == absEdge2.getTarget(view.getViewId());
}",0.720620842572062
143065,"public boolean isSelfLoop(Edge edge){
  checkEdge(edge);
  return edge.getSource() == edge.getTarget();
}","public boolean isSelfLoop(Edge edge){
  AbstractEdge absEdge=checkEdge(edge);
  return absEdge.getSource(view.getViewId()) == absEdge.getTarget(view.getViewId());
}",0.7657992565055762
143066,"public Node getOpposite(Node node,Edge edge){
  checkNode(node);
  checkEdge(edge);
  if (edge.getSource() == node) {
    return edge.getTarget();
  }
 else   if (edge.getTarget() == node) {
    return edge.getSource();
  }
  throw new IllegalArgumentException(""String_Node_Str"");
}","public Node getOpposite(Node node,Edge edge){
  checkNode(node);
  AbstractEdge absEdge=checkEdge(edge);
  if (absEdge.getSource(view.getViewId()) == node) {
    return absEdge.getTarget();
  }
 else   if (absEdge.getTarget(view.getViewId()) == node) {
    return absEdge.getSource(view.getViewId());
  }
  throw new IllegalArgumentException(""String_Node_Str"");
}",0.862015503875969
143067,"public void transform(Transformer transformer){
  AbstractTransformer abstractTransformer=(AbstractTransformer)transformer;
  Ranking ranking=abstractTransformer.getRanking();
  RankingResultImpl rankingResult=new RankingResultImpl();
  rankingResult.transformer=transformer;
  rankingResult.ranking=ranking;
  Graph graph=Lookup.getDefault().lookup(GraphController.class).getModel().getGraph();
  if (ranking instanceof NodeRanking) {
    for (    Node node : graph.getNodes().toArray()) {
      Object rank=ranking.getValue(node);
      Object result=null;
      if (rank != null) {
        float normalizedValue=ranking.normalize(rank);
        if (transformer.isInBounds(normalizedValue)) {
          result=transformer.transform(node,normalizedValue);
        }
      }
      rankingResult.addResult(node,rank,result);
    }
  }
 else {
    for (    Edge edge : graph.getEdges().toArray()) {
      Object rank=ranking.getValue(edge);
      Object result=null;
      if (rank != null) {
        float normalizedValue=ranking.normalize(rank);
        if (transformer.isInBounds(normalizedValue)) {
          result=transformer.transform(edge,normalizedValue);
        }
      }
      rankingResult.addResult(edge,rank,result);
    }
  }
  rankingEventBus.publishResults(rankingResult);
}","public void transform(Transformer transformer){
  AbstractTransformer abstractTransformer=(AbstractTransformer)transformer;
  Ranking ranking=abstractTransformer.getRanking();
  RankingResultImpl rankingResult=new RankingResultImpl();
  rankingResult.transformer=transformer;
  rankingResult.ranking=ranking;
  Graph graph=Lookup.getDefault().lookup(GraphController.class).getModel().getGraphVisible();
  if (ranking instanceof NodeRanking) {
    ((AbstractRanking)ranking).setGraph(graph);
    for (    Node node : graph.getNodes().toArray()) {
      Object rank=ranking.getValue(node);
      Object result=null;
      if (rank != null) {
        float normalizedValue=ranking.normalize(rank);
        if (transformer.isInBounds(normalizedValue)) {
          result=transformer.transform(node,normalizedValue);
        }
      }
      rankingResult.addResult(node,rank,result);
    }
  }
 else {
    ((AbstractRanking)ranking).setGraph(graph);
    for (    Edge edge : graph.getEdges().toArray()) {
      Object rank=ranking.getValue(edge);
      Object result=null;
      if (rank != null) {
        float normalizedValue=ranking.normalize(rank);
        if (transformer.isInBounds(normalizedValue)) {
          result=transformer.transform(edge,normalizedValue);
        }
      }
      rankingResult.addResult(edge,rank,result);
    }
  }
  rankingEventBus.publishResults(rankingResult);
}",0.96161013790533
143068,"public EdgeRanking[] getEdgeRanking(){
  AttributeController attributeController=Lookup.getDefault().lookup(AttributeController.class);
  Graph graph=Lookup.getDefault().lookup(GraphController.class).getModel().getGraph();
  List<Ranking> rankingList=new ArrayList<Ranking>();
  for (  AttributeColumn column : attributeController.getModel().getEdgeTable().getColumns()) {
    if (RankingFactory.isNumberColumn(column)) {
      EdgeRanking r=RankingFactory.getEdgeAttributeRanking(column,graph);
      if (r.getMinimumValue() != null && r.getMaximumValue() != null && !r.getMinimumValue().equals(r.getMaximumValue())) {
        rankingList.add(r);
      }
    }
  }
  return rankingList.toArray(new EdgeRanking[0]);
}","public EdgeRanking[] getEdgeRanking(){
  AttributeController attributeController=Lookup.getDefault().lookup(AttributeController.class);
  Graph graph=Lookup.getDefault().lookup(GraphController.class).getModel().getGraphVisible();
  List<Ranking> rankingList=new ArrayList<Ranking>();
  for (  AttributeColumn column : attributeController.getModel().getEdgeTable().getColumns()) {
    if (RankingFactory.isNumberColumn(column)) {
      EdgeRanking r=RankingFactory.getEdgeAttributeRanking(column,graph);
      if (r.getMinimumValue() != null && r.getMaximumValue() != null && !r.getMinimumValue().equals(r.getMaximumValue())) {
        rankingList.add(r);
      }
    }
  }
  return rankingList.toArray(new EdgeRanking[0]);
}",0.9951422623178348
143069,"public ToolEventListener[] getListeners(){
  listeners=new ToolEventListener[1];
  listeners[0]=new NodeClickEventListener(){
    public void clickNodes(    Node[] nodes){
      try {
        Node n=nodes[0];
        Color[] colors;
        float[] positions;
        if (heatMapPanel.isUsePalette()) {
          colors=heatMapPanel.getSelectedPalette().getColors();
          positions=heatMapPanel.getSelectedPalette().getPositions();
          dontPaintUnreachable=true;
        }
 else {
          gradientColors=colors=heatMapPanel.getGradientColors();
          gradientPositions=positions=heatMapPanel.getGradientPositions();
          dontPaintUnreachable=heatMapPanel.isDontPaintUnreachable();
        }
        GraphController gc=Lookup.getDefault().lookup(GraphController.class);
        DirectedGraph graph=null;
        if (gc.getModel().getGraph() instanceof DirectedGraph) {
          graph=(DirectedGraph)gc.getModel().getGraph();
        }
 else {
          return;
        }
        LinearGradient linearGradient=new LinearGradient(colors,positions);
        BellmanFordShortestPathAlgorithm algorithm=new BellmanFordShortestPathAlgorithm(graph,n);
        algorithm.compute();
        double maxDistance=algorithm.getMaxDistance();
        if (!dontPaintUnreachable) {
          maxDistance++;
        }
        if (maxDistance > 0) {
          for (          Entry<Node,Double> entry : algorithm.getDistances().entrySet()) {
            NodeData node=entry.getKey().getNodeData();
            if (!Double.isInfinite(entry.getValue())) {
              float ratio=(float)(entry.getValue() / maxDistance);
              Color c=linearGradient.getValue(ratio);
              node.setColor(c.getRed() / 255f,c.getGreen() / 255f,c.getBlue() / 255f);
            }
 else             if (!dontPaintUnreachable) {
              Color c=colors[colors.length - 1];
              node.setColor(c.getRed() / 255f,c.getGreen() / 255f,c.getBlue() / 255f);
            }
          }
        }
        Color c=colors[0];
        n.getNodeData().setColor(c.getRed() / 255f,c.getGreen() / 255f,c.getBlue() / 255f);
        heatMapPanel.setStatus(NbBundle.getMessage(HeatMap.class,""String_Node_Str"") + new DecimalFormat(""String_Node_Str"").format(algorithm.getMaxDistance()));
      }
 catch (      Exception e) {
        e.printStackTrace();
      }
    }
  }
;
  return listeners;
}","public ToolEventListener[] getListeners(){
  listeners=new ToolEventListener[1];
  listeners[0]=new NodeClickEventListener(){
    public void clickNodes(    Node[] nodes){
      try {
        Node n=nodes[0];
        Color[] colors;
        float[] positions;
        if (heatMapPanel.isUsePalette()) {
          colors=heatMapPanel.getSelectedPalette().getColors();
          positions=heatMapPanel.getSelectedPalette().getPositions();
          dontPaintUnreachable=true;
        }
 else {
          gradientColors=colors=heatMapPanel.getGradientColors();
          gradientPositions=positions=heatMapPanel.getGradientPositions();
          dontPaintUnreachable=heatMapPanel.isDontPaintUnreachable();
        }
        GraphController gc=Lookup.getDefault().lookup(GraphController.class);
        DirectedGraph graph=null;
        if (gc.getModel().getGraphVisible() instanceof DirectedGraph) {
          graph=(DirectedGraph)gc.getModel().getGraphVisible();
        }
 else {
          return;
        }
        LinearGradient linearGradient=new LinearGradient(colors,positions);
        BellmanFordShortestPathAlgorithm algorithm=new BellmanFordShortestPathAlgorithm(graph,n);
        algorithm.compute();
        double maxDistance=algorithm.getMaxDistance();
        if (!dontPaintUnreachable) {
          maxDistance++;
        }
        if (maxDistance > 0) {
          for (          Entry<Node,Double> entry : algorithm.getDistances().entrySet()) {
            NodeData node=entry.getKey().getNodeData();
            if (!Double.isInfinite(entry.getValue())) {
              float ratio=(float)(entry.getValue() / maxDistance);
              Color c=linearGradient.getValue(ratio);
              node.setColor(c.getRed() / 255f,c.getGreen() / 255f,c.getBlue() / 255f);
            }
 else             if (!dontPaintUnreachable) {
              Color c=colors[colors.length - 1];
              node.setColor(c.getRed() / 255f,c.getGreen() / 255f,c.getBlue() / 255f);
            }
          }
        }
        Color c=colors[0];
        n.getNodeData().setColor(c.getRed() / 255f,c.getGreen() / 255f,c.getBlue() / 255f);
        heatMapPanel.setStatus(NbBundle.getMessage(HeatMap.class,""String_Node_Str"") + new DecimalFormat(""String_Node_Str"").format(algorithm.getMaxDistance()));
      }
 catch (      Exception e) {
        e.printStackTrace();
      }
    }
  }
;
  return listeners;
}",0.9970723546633208
143070,"public void clickNodes(Node[] nodes){
  try {
    Node n=nodes[0];
    Color[] colors;
    float[] positions;
    if (heatMapPanel.isUsePalette()) {
      colors=heatMapPanel.getSelectedPalette().getColors();
      positions=heatMapPanel.getSelectedPalette().getPositions();
      dontPaintUnreachable=true;
    }
 else {
      gradientColors=colors=heatMapPanel.getGradientColors();
      gradientPositions=positions=heatMapPanel.getGradientPositions();
      dontPaintUnreachable=heatMapPanel.isDontPaintUnreachable();
    }
    GraphController gc=Lookup.getDefault().lookup(GraphController.class);
    DirectedGraph graph=null;
    if (gc.getModel().getGraph() instanceof DirectedGraph) {
      graph=(DirectedGraph)gc.getModel().getGraph();
    }
 else {
      return;
    }
    LinearGradient linearGradient=new LinearGradient(colors,positions);
    BellmanFordShortestPathAlgorithm algorithm=new BellmanFordShortestPathAlgorithm(graph,n);
    algorithm.compute();
    double maxDistance=algorithm.getMaxDistance();
    if (!dontPaintUnreachable) {
      maxDistance++;
    }
    if (maxDistance > 0) {
      for (      Entry<Node,Double> entry : algorithm.getDistances().entrySet()) {
        NodeData node=entry.getKey().getNodeData();
        if (!Double.isInfinite(entry.getValue())) {
          float ratio=(float)(entry.getValue() / maxDistance);
          Color c=linearGradient.getValue(ratio);
          node.setColor(c.getRed() / 255f,c.getGreen() / 255f,c.getBlue() / 255f);
        }
 else         if (!dontPaintUnreachable) {
          Color c=colors[colors.length - 1];
          node.setColor(c.getRed() / 255f,c.getGreen() / 255f,c.getBlue() / 255f);
        }
      }
    }
    Color c=colors[0];
    n.getNodeData().setColor(c.getRed() / 255f,c.getGreen() / 255f,c.getBlue() / 255f);
    heatMapPanel.setStatus(NbBundle.getMessage(HeatMap.class,""String_Node_Str"") + new DecimalFormat(""String_Node_Str"").format(algorithm.getMaxDistance()));
  }
 catch (  Exception e) {
    e.printStackTrace();
  }
}","public void clickNodes(Node[] nodes){
  try {
    Node n=nodes[0];
    Color[] colors;
    float[] positions;
    if (heatMapPanel.isUsePalette()) {
      colors=heatMapPanel.getSelectedPalette().getColors();
      positions=heatMapPanel.getSelectedPalette().getPositions();
      dontPaintUnreachable=true;
    }
 else {
      gradientColors=colors=heatMapPanel.getGradientColors();
      gradientPositions=positions=heatMapPanel.getGradientPositions();
      dontPaintUnreachable=heatMapPanel.isDontPaintUnreachable();
    }
    GraphController gc=Lookup.getDefault().lookup(GraphController.class);
    DirectedGraph graph=null;
    if (gc.getModel().getGraphVisible() instanceof DirectedGraph) {
      graph=(DirectedGraph)gc.getModel().getGraphVisible();
    }
 else {
      return;
    }
    LinearGradient linearGradient=new LinearGradient(colors,positions);
    BellmanFordShortestPathAlgorithm algorithm=new BellmanFordShortestPathAlgorithm(graph,n);
    algorithm.compute();
    double maxDistance=algorithm.getMaxDistance();
    if (!dontPaintUnreachable) {
      maxDistance++;
    }
    if (maxDistance > 0) {
      for (      Entry<Node,Double> entry : algorithm.getDistances().entrySet()) {
        NodeData node=entry.getKey().getNodeData();
        if (!Double.isInfinite(entry.getValue())) {
          float ratio=(float)(entry.getValue() / maxDistance);
          Color c=linearGradient.getValue(ratio);
          node.setColor(c.getRed() / 255f,c.getGreen() / 255f,c.getBlue() / 255f);
        }
 else         if (!dontPaintUnreachable) {
          Color c=colors[colors.length - 1];
          node.setColor(c.getRed() / 255f,c.getGreen() / 255f,c.getBlue() / 255f);
        }
      }
    }
    Color c=colors[0];
    n.getNodeData().setColor(c.getRed() / 255f,c.getGreen() / 255f,c.getBlue() / 255f);
    heatMapPanel.setStatus(NbBundle.getMessage(HeatMap.class,""String_Node_Str"") + new DecimalFormat(""String_Node_Str"").format(algorithm.getMaxDistance()));
  }
 catch (  Exception e) {
    e.printStackTrace();
  }
}",0.9965500246426812
143071,"public ToolEventListener[] getListeners(){
  listeners=new ToolEventListener[2];
  listeners[0]=new NodeClickEventListener(){
    public void clickNodes(    Node[] nodes){
      Node n=nodes[0];
      if (sourceNode == null) {
        sourceNode=n;
        shortestPathPanel.setResult(""String_Node_Str"");
        shortestPathPanel.setStatus(NbBundle.getMessage(ShortestPath.class,""String_Node_Str""));
      }
 else       if (n != sourceNode) {
        color=shortestPathPanel.getColor();
        float[] colorArray=new float[]{color.getRed() / 255f,color.getGreen() / 255f,color.getBlue() / 255f};
        Node targetNode=n;
        GraphController gc=Lookup.getDefault().lookup(GraphController.class);
        DirectedGraph graph=null;
        if (gc.getModel().getGraph() instanceof DirectedGraph) {
          graph=(DirectedGraph)gc.getModel().getGraph();
        }
 else {
          return;
        }
        BellmanFordShortestPathAlgorithm algorithm=new BellmanFordShortestPathAlgorithm(graph,sourceNode);
        algorithm.compute();
        double distance;
        if ((distance=algorithm.getDistances().get(targetNode)) != Double.POSITIVE_INFINITY) {
          targetNode.getNodeData().setColor(colorArray[0],colorArray[1],colorArray[2]);
          VizController.getInstance().selectNode(targetNode);
          Edge predecessorEdge=algorithm.getPredecessorIncoming(targetNode);
          while (predecessorEdge != null && predecessorEdge.getSource() != sourceNode) {
            predecessorEdge.getEdgeData().setColor(colorArray[0],colorArray[1],colorArray[2]);
            VizController.getInstance().selectEdge(predecessorEdge);
            predecessorEdge.getSource().getNodeData().setColor(colorArray[0],colorArray[1],colorArray[2]);
            VizController.getInstance().selectNode(predecessorEdge.getSource());
            predecessorEdge=algorithm.getPredecessorIncoming(predecessorEdge.getSource());
          }
          predecessorEdge.getEdgeData().setColor(colorArray[0],colorArray[1],colorArray[2]);
          VizController.getInstance().selectEdge(predecessorEdge);
          sourceNode.getNodeData().setColor(colorArray[0],colorArray[1],colorArray[2]);
          VizController.getInstance().selectNode(sourceNode);
          shortestPathPanel.setResult(NbBundle.getMessage(ShortestPath.class,""String_Node_Str"",distance));
        }
 else {
          shortestPathPanel.setResult(NbBundle.getMessage(ShortestPath.class,""String_Node_Str""));
        }
        sourceNode=null;
        shortestPathPanel.setStatus(NbBundle.getMessage(ShortestPath.class,""String_Node_Str""));
      }
    }
  }
;
  listeners[1]=new MouseClickEventListener(){
    public void mouseClick(    int[] positionViewport,    float[] position3d){
      if (sourceNode != null) {
        shortestPathPanel.setStatus(NbBundle.getMessage(ShortestPath.class,""String_Node_Str""));
        sourceNode=null;
      }
 else {
        VizController.getInstance().resetSelection();
      }
    }
  }
;
  return listeners;
}","public ToolEventListener[] getListeners(){
  listeners=new ToolEventListener[2];
  listeners[0]=new NodeClickEventListener(){
    public void clickNodes(    Node[] nodes){
      Node n=nodes[0];
      if (sourceNode == null) {
        sourceNode=n;
        shortestPathPanel.setResult(""String_Node_Str"");
        shortestPathPanel.setStatus(NbBundle.getMessage(ShortestPath.class,""String_Node_Str""));
      }
 else       if (n != sourceNode) {
        color=shortestPathPanel.getColor();
        float[] colorArray=new float[]{color.getRed() / 255f,color.getGreen() / 255f,color.getBlue() / 255f};
        Node targetNode=n;
        GraphController gc=Lookup.getDefault().lookup(GraphController.class);
        DirectedGraph graph=null;
        if (gc.getModel().getGraphVisible() instanceof DirectedGraph) {
          graph=(DirectedGraph)gc.getModel().getGraphVisible();
        }
 else {
          return;
        }
        BellmanFordShortestPathAlgorithm algorithm=new BellmanFordShortestPathAlgorithm(graph,sourceNode);
        algorithm.compute();
        double distance;
        if ((distance=algorithm.getDistances().get(targetNode)) != Double.POSITIVE_INFINITY) {
          targetNode.getNodeData().setColor(colorArray[0],colorArray[1],colorArray[2]);
          VizController.getInstance().selectNode(targetNode);
          Edge predecessorEdge=algorithm.getPredecessorIncoming(targetNode);
          while (predecessorEdge != null && predecessorEdge.getSource() != sourceNode) {
            predecessorEdge.getEdgeData().setColor(colorArray[0],colorArray[1],colorArray[2]);
            VizController.getInstance().selectEdge(predecessorEdge);
            predecessorEdge.getSource().getNodeData().setColor(colorArray[0],colorArray[1],colorArray[2]);
            VizController.getInstance().selectNode(predecessorEdge.getSource());
            predecessorEdge=algorithm.getPredecessorIncoming(predecessorEdge.getSource());
          }
          predecessorEdge.getEdgeData().setColor(colorArray[0],colorArray[1],colorArray[2]);
          VizController.getInstance().selectEdge(predecessorEdge);
          sourceNode.getNodeData().setColor(colorArray[0],colorArray[1],colorArray[2]);
          VizController.getInstance().selectNode(sourceNode);
          shortestPathPanel.setResult(NbBundle.getMessage(ShortestPath.class,""String_Node_Str"",distance));
        }
 else {
          shortestPathPanel.setResult(NbBundle.getMessage(ShortestPath.class,""String_Node_Str""));
        }
        sourceNode=null;
        shortestPathPanel.setStatus(NbBundle.getMessage(ShortestPath.class,""String_Node_Str""));
      }
    }
  }
;
  listeners[1]=new MouseClickEventListener(){
    public void mouseClick(    int[] positionViewport,    float[] position3d){
      if (sourceNode != null) {
        shortestPathPanel.setStatus(NbBundle.getMessage(ShortestPath.class,""String_Node_Str""));
        sourceNode=null;
      }
 else {
        VizController.getInstance().resetSelection();
      }
    }
  }
;
  return listeners;
}",0.997675962815405
143072,"public void clickNodes(Node[] nodes){
  Node n=nodes[0];
  if (sourceNode == null) {
    sourceNode=n;
    shortestPathPanel.setResult(""String_Node_Str"");
    shortestPathPanel.setStatus(NbBundle.getMessage(ShortestPath.class,""String_Node_Str""));
  }
 else   if (n != sourceNode) {
    color=shortestPathPanel.getColor();
    float[] colorArray=new float[]{color.getRed() / 255f,color.getGreen() / 255f,color.getBlue() / 255f};
    Node targetNode=n;
    GraphController gc=Lookup.getDefault().lookup(GraphController.class);
    DirectedGraph graph=null;
    if (gc.getModel().getGraph() instanceof DirectedGraph) {
      graph=(DirectedGraph)gc.getModel().getGraph();
    }
 else {
      return;
    }
    BellmanFordShortestPathAlgorithm algorithm=new BellmanFordShortestPathAlgorithm(graph,sourceNode);
    algorithm.compute();
    double distance;
    if ((distance=algorithm.getDistances().get(targetNode)) != Double.POSITIVE_INFINITY) {
      targetNode.getNodeData().setColor(colorArray[0],colorArray[1],colorArray[2]);
      VizController.getInstance().selectNode(targetNode);
      Edge predecessorEdge=algorithm.getPredecessorIncoming(targetNode);
      while (predecessorEdge != null && predecessorEdge.getSource() != sourceNode) {
        predecessorEdge.getEdgeData().setColor(colorArray[0],colorArray[1],colorArray[2]);
        VizController.getInstance().selectEdge(predecessorEdge);
        predecessorEdge.getSource().getNodeData().setColor(colorArray[0],colorArray[1],colorArray[2]);
        VizController.getInstance().selectNode(predecessorEdge.getSource());
        predecessorEdge=algorithm.getPredecessorIncoming(predecessorEdge.getSource());
      }
      predecessorEdge.getEdgeData().setColor(colorArray[0],colorArray[1],colorArray[2]);
      VizController.getInstance().selectEdge(predecessorEdge);
      sourceNode.getNodeData().setColor(colorArray[0],colorArray[1],colorArray[2]);
      VizController.getInstance().selectNode(sourceNode);
      shortestPathPanel.setResult(NbBundle.getMessage(ShortestPath.class,""String_Node_Str"",distance));
    }
 else {
      shortestPathPanel.setResult(NbBundle.getMessage(ShortestPath.class,""String_Node_Str""));
    }
    sourceNode=null;
    shortestPathPanel.setStatus(NbBundle.getMessage(ShortestPath.class,""String_Node_Str""));
  }
}","public void clickNodes(Node[] nodes){
  Node n=nodes[0];
  if (sourceNode == null) {
    sourceNode=n;
    shortestPathPanel.setResult(""String_Node_Str"");
    shortestPathPanel.setStatus(NbBundle.getMessage(ShortestPath.class,""String_Node_Str""));
  }
 else   if (n != sourceNode) {
    color=shortestPathPanel.getColor();
    float[] colorArray=new float[]{color.getRed() / 255f,color.getGreen() / 255f,color.getBlue() / 255f};
    Node targetNode=n;
    GraphController gc=Lookup.getDefault().lookup(GraphController.class);
    DirectedGraph graph=null;
    if (gc.getModel().getGraphVisible() instanceof DirectedGraph) {
      graph=(DirectedGraph)gc.getModel().getGraphVisible();
    }
 else {
      return;
    }
    BellmanFordShortestPathAlgorithm algorithm=new BellmanFordShortestPathAlgorithm(graph,sourceNode);
    algorithm.compute();
    double distance;
    if ((distance=algorithm.getDistances().get(targetNode)) != Double.POSITIVE_INFINITY) {
      targetNode.getNodeData().setColor(colorArray[0],colorArray[1],colorArray[2]);
      VizController.getInstance().selectNode(targetNode);
      Edge predecessorEdge=algorithm.getPredecessorIncoming(targetNode);
      while (predecessorEdge != null && predecessorEdge.getSource() != sourceNode) {
        predecessorEdge.getEdgeData().setColor(colorArray[0],colorArray[1],colorArray[2]);
        VizController.getInstance().selectEdge(predecessorEdge);
        predecessorEdge.getSource().getNodeData().setColor(colorArray[0],colorArray[1],colorArray[2]);
        VizController.getInstance().selectNode(predecessorEdge.getSource());
        predecessorEdge=algorithm.getPredecessorIncoming(predecessorEdge.getSource());
      }
      predecessorEdge.getEdgeData().setColor(colorArray[0],colorArray[1],colorArray[2]);
      VizController.getInstance().selectEdge(predecessorEdge);
      sourceNode.getNodeData().setColor(colorArray[0],colorArray[1],colorArray[2]);
      VizController.getInstance().selectNode(sourceNode);
      shortestPathPanel.setResult(NbBundle.getMessage(ShortestPath.class,""String_Node_Str"",distance));
    }
 else {
      shortestPathPanel.setResult(NbBundle.getMessage(ShortestPath.class,""String_Node_Str""));
    }
    sourceNode=null;
    shortestPathPanel.setStatus(NbBundle.getMessage(ShortestPath.class,""String_Node_Str""));
  }
}",0.996969696969697
143073,"@Override public void setEnabled(boolean enabled){
  for (  Component c : getComponents()) {
    c.setEnabled(enabled);
  }
  setOpaque(enabled);
}","@Override public void setEnabled(final boolean enabled){
  SwingUtilities.invokeLater(new Runnable(){
    public void run(){
      for (      Component c : getComponents()) {
        c.setEnabled(enabled);
      }
    }
  }
);
  setOpaque(enabled);
}",0.6146095717884131
143074,"public JComponent getComponent(){
  JPanel panel=new JPanel(new FlowLayout(FlowLayout.RIGHT,0,0)){
    @Override public void setEnabled(    boolean enabled){
      for (      Component c : getComponents()) {
        c.setEnabled(enabled);
      }
      setOpaque(enabled);
    }
  }
;
  panel.add(new HierarchyAddonButton());
  panel.setBackground(Color.WHITE);
  return panel;
}","public JComponent getComponent(){
  JPanel panel=new JPanel(new FlowLayout(FlowLayout.RIGHT,0,0)){
    @Override public void setEnabled(    final boolean enabled){
      SwingUtilities.invokeLater(new Runnable(){
        public void run(){
          for (          Component c : getComponents()) {
            c.setEnabled(enabled);
          }
        }
      }
);
      setOpaque(enabled);
    }
  }
;
  panel.add(new HierarchyAddonButton());
  panel.setBackground(Color.WHITE);
  return panel;
}",0.798175598631699
143075,"@Override public void setEnabled(boolean enabled){
  for (  Component c : getComponents()) {
    c.setEnabled(enabled);
  }
}","@Override public void setEnabled(final boolean enabled){
  SwingUtilities.invokeLater(new Runnable(){
    public void run(){
      for (      Component c : getComponents()) {
        c.setEnabled(enabled);
      }
    }
  }
);
}",0.5552407932011332
143076,"@Override public void setEnabled(boolean enabled){
  for (  Component c : getComponents()) {
    c.setEnabled(enabled);
  }
}","@Override public void setEnabled(final boolean enabled){
  SwingUtilities.invokeLater(new Runnable(){
    public void run(){
      for (      Component c : getComponents()) {
        c.setEnabled(enabled);
      }
    }
  }
);
}",0.5552407932011332
143077,"@Override public void setEnabled(boolean enabled){
  for (  Component c : getComponents()) {
    c.setEnabled(enabled);
  }
  selectionBar.setEnabled(enabled);
}","@Override public void setEnabled(final boolean enabled){
  SwingUtilities.invokeLater(new Runnable(){
    public void run(){
      for (      Component c : getComponents()) {
        c.setEnabled(enabled);
      }
      selectionBar.setEnabled(enabled);
    }
  }
);
}",0.6247086247086248
143078,"@Override public void setEnabled(boolean enabled){
  for (  Component c : getComponents()) {
    c.setEnabled(enabled);
  }
}","@Override public void setEnabled(final boolean enabled){
  SwingUtilities.invokeLater(new Runnable(){
    public void run(){
      for (      Component c : getComponents()) {
        c.setEnabled(enabled);
      }
    }
  }
);
}",0.5552407932011332
143079,"@Override public void setEnabled(boolean enabled){
  for (  Component c : getComponents()) {
    c.setEnabled(enabled);
  }
}","@Override public void setEnabled(final boolean enabled){
  SwingUtilities.invokeLater(new Runnable(){
    public void run(){
      for (      Component c : getComponents()) {
        c.setEnabled(enabled);
      }
    }
  }
);
}",0.5552407932011332
143080,"@Override public void setEnabled(boolean enabled){
  for (  Component c : getComponents()) {
    c.setEnabled(enabled);
  }
}","@Override public void setEnabled(final boolean enabled){
  SwingUtilities.invokeLater(new Runnable(){
    public void run(){
      for (      Component c : getComponents()) {
        c.setEnabled(enabled);
      }
    }
  }
);
}",0.5552407932011332
143081,"private Element createAttribute(Document document,AttributeColumn column) throws Exception {
  Element attributeE=document.createElement(""String_Node_Str"");
  attributeE.setAttribute(""String_Node_Str"",column.getId());
  attributeE.setAttribute(""String_Node_Str"",column.getTitle());
  attributeE.setAttribute(""String_Node_Str"",column.getType().getTypeString().toLowerCase());
  if (column.getDefaultValue() != null) {
    Element defaultE=document.createElement(""String_Node_Str"");
    Text defaultTextE=document.createTextNode(column.getDefaultValue().toString());
    defaultE.appendChild(defaultTextE);
  }
  return attributeE;
}","private Element createAttribute(Document document,AttributeColumn column) throws Exception {
  Element attributeE=document.createElement(""String_Node_Str"");
  attributeE.setAttribute(""String_Node_Str"",column.getId());
  attributeE.setAttribute(""String_Node_Str"",column.getTitle());
switch (column.getType()) {
case INT:
    attributeE.setAttribute(""String_Node_Str"",""String_Node_Str"");
  break;
case LIST_STRING:
attributeE.setAttribute(""String_Node_Str"",""String_Node_Str"");
break;
case TIME_INTERVAL:
break;
default :
attributeE.setAttribute(""String_Node_Str"",column.getType().getTypeString().toLowerCase());
break;
}
if (column.getDefaultValue() != null) {
Element defaultE=document.createElement(""String_Node_Str"");
Text defaultTextE=document.createTextNode(column.getDefaultValue().toString());
defaultE.appendChild(defaultTextE);
}
return attributeE;
}",0.7647849462365591
143082,"public boolean sendDocument(Document document){
  try {
    TransformerFactory factory=TransformerFactory.newInstance();
    Transformer transformer=factory.newTransformer();
    transformer.setOutputProperty(OutputKeys.INDENT,""String_Node_Str"");
    transformer.setOutputProperty(OutputKeys.ENCODING,""String_Node_Str"");
    StringWriter sw=new StringWriter();
    StreamResult result=new StreamResult(sw);
    DOMSource source=new DOMSource(document);
    transformer.transform(source,result);
    String xmlString=""String_Node_Str"" + sw.toString();
    URL url=new URL(POST_URL);
    URLConnection con=url.openConnection();
    con.setDoInput(true);
    con.setDoOutput(true);
    con.setUseCaches(false);
    con.setDefaultUseCaches(false);
    OutputStreamWriter writer=new OutputStreamWriter(con.getOutputStream());
    writer.write(xmlString);
    writer.flush();
    writer.close();
    InputStreamReader reader=new InputStreamReader(con.getInputStream());
    StringBuilder buf=new StringBuilder();
    char[] cbuf=new char[2048];
    int num;
    while (-1 != (num=reader.read(cbuf))) {
      buf.append(cbuf,0,num);
    }
    String serverResult=buf.toString();
    System.err.println(""String_Node_Str"" + serverResult);
    return true;
  }
 catch (  Exception e) {
    e.printStackTrace();
  }
  return false;
}","public boolean sendDocument(Document document){
  try {
    TransformerFactory factory=TransformerFactory.newInstance();
    Transformer transformer=factory.newTransformer();
    transformer.setOutputProperty(OutputKeys.INDENT,""String_Node_Str"");
    transformer.setOutputProperty(OutputKeys.ENCODING,""String_Node_Str"");
    StringWriter sw=new StringWriter();
    StreamResult result=new StreamResult(sw);
    DOMSource source=new DOMSource(document);
    transformer.transform(source,result);
    String xmlString=""String_Node_Str"" + URLEncoder.encode(sw.toString(),""String_Node_Str"");
    URL url=new URL(POST_URL);
    URLConnection con=url.openConnection();
    con.setDoInput(true);
    con.setDoOutput(true);
    con.setUseCaches(false);
    con.setDefaultUseCaches(false);
    OutputStreamWriter writer=new OutputStreamWriter(con.getOutputStream());
    writer.write(xmlString);
    writer.flush();
    writer.close();
    InputStreamReader reader=new InputStreamReader(con.getInputStream());
    StringBuilder buf=new StringBuilder();
    char[] cbuf=new char[2048];
    int num;
    while (-1 != (num=reader.read(cbuf))) {
      buf.append(cbuf,0,num);
    }
    String serverResult=buf.toString();
    System.err.println(""String_Node_Str"" + serverResult);
    return true;
  }
 catch (  Exception e) {
    e.printStackTrace();
  }
  return false;
}",0.9772472957851548
143083,"private void logMessageLog(Report report){
  System.err.flush();
  System.out.flush();
  String ud=System.getProperty(""String_Node_Str"");
  if (ud == null || ""String_Node_Str"".equals(ud)) {
    return;
  }
  File userDir=new File(ud);
  File directory=new File(new File(userDir,""String_Node_Str""),""String_Node_Str"");
  File messagesLog=new File(directory,""String_Node_Str"");
  String log=""String_Node_Str"";
  try {
    byte[] buffer=new byte[(int)messagesLog.length()];
    BufferedInputStream f=new BufferedInputStream(new FileInputStream(messagesLog));
    f.read(buffer);
    log=new String(buffer);
  }
 catch (  Exception e) {
  }
  report.setLog(log);
}","private void logMessageLog(Report report){
  System.err.flush();
  System.out.flush();
  String ud=System.getProperty(""String_Node_Str"");
  if (ud == null || ""String_Node_Str"".equals(ud)) {
    return;
  }
  Handler[] handlers=Logger.getLogger(""String_Node_Str"").getHandlers();
  handlers[0].flush();
  File userDir=new File(ud);
  File directory=new File(new File(userDir,""String_Node_Str""),""String_Node_Str"");
  File messagesLog=new File(directory,""String_Node_Str"");
  String log=""String_Node_Str"";
  try {
    byte[] buffer=new byte[(int)messagesLog.length()];
    BufferedInputStream f=new BufferedInputStream(new FileInputStream(messagesLog));
    f.read(buffer);
    log=new String(buffer);
  }
 catch (  Exception e) {
  }
  report.setLog(log);
}",0.9327671620665252
143084,"public double getAttributeValue(int from,int to);","/** 
 * @param from
 * @param to
 * @return
 */
public double getAttributeValue(int from,int to);",0.6712328767123288
143085,"public void setRangeFromRealValues(double from,double to);","/** 
 * Set the range using real values
 * @param from
 * @param to
 */
public void setRangeFromRealValues(double from,double to);",0.6170212765957447
143086,public double getFromFloat();,"/** 
 * @return
 */
public double getFromFloat();",0.7435897435897436
143087,public double getFromValue();,"/** 
 * @return
 */
public double getFromValue();",0.7435897435897436
143088,public double getMaxValue();,"/** 
 * @return
 */
public double getMaxValue();",0.7368421052631579
143089,public void setToValue(double to);,"/** 
 * @param to
 */
public void setToValue(double to);",0.7555555555555555
143090,public void setToFloat(double to);,"/** 
 * @param to
 */
public void setToFloat(double to);",0.7555555555555555
143091,public void addListener(TimelineModelListener listener);,"/** 
 * @param listener
 */
public void addListener(TimelineModelListener listener);",0.8
143092,public String getLastAttributeLabel();,"/** 
 * @return
 */
public String getLastAttributeLabel();",0.7916666666666666
143093,public double getRangeSizeFloat();,"/** 
 * @return
 */
public double getRangeSizeFloat();",0.7727272727272727
143094,public void removeListener(TimelineModelListener listener);,"/** 
 * @param listener
 */
public void removeListener(TimelineModelListener listener);",0.8082191780821918
143095,public double getTotalSize();,"/** 
 * @return
 */
public double getTotalSize();",0.7435897435897436
143096,public void setFromValue(double from);,"/** 
 * @param from
 */
public void setFromValue(double from);",0.76
143097,"public void setRangeFromFloat(double from,double to);","/** 
 * @param from
 * @param to
 */
public void setRangeFromFloat(double from,double to);",0.7412587412587412
143098,public void setMaxValue(double max);,"/** 
 * @param max
 */
public void setMaxValue(double max);",0.7578947368421053
143099,public double getMinValue();,"/** 
 * @return
 */
public double getMinValue();",0.7368421052631579
143100,public double getRangeSizeValue();,"/** 
 * @return
 */
public double getRangeSizeValue();",0.7727272727272727
143101,"public void setMinMax(double min,double max);","/** 
 * @param min
 * @param max
 */
public void setMinMax(double min,double max);",0.7086614173228346
143102,public double getToValue();,"/** 
 * @return
 */
public double getToValue();",0.7297297297297297
143103,"public String getAttributeLabel(int from,int to);","/** 
 * @param from
 * @param to
 * @return
 */
public String getAttributeLabel(int from,int to);",0.6712328767123288
143104,public TimeInterval getTimeInterval();,"/** 
 * @return
 */
public TimeInterval getTimeInterval();",0.7916666666666666
143105,public void setFromFloat(double from);,"/** 
 * @param from
 */
public void setFromFloat(double from);",0.76
143106,public double getToFloat();,"/** 
 * @return
 */
public double getToFloat();",0.7297297297297297
143107,public void setMinValue(double min);,"/** 
 * @param min
 */
public void setMinValue(double min);",0.7578947368421053
143108,"public void mouseDragged(MouseEvent evt){
  int x=evt.getX();
  double w=getWidth();
  int r=settings.selection.visibleHookWidth;
  double sf=(model.getFromFloat() * w);
  double st=(model.getToFloat() * w);
  if (currentState == TimelineState.IDLE) {
    if (inRange(x,(int)sf - 1,(int)sf + r + 1)) {
      highlightedComponent=HighlightedComponent.LEFT_HOOK;
      currentState=TimelineState.RESIZE_FROM;
    }
 else     if (inRange(x,(int)sf + r,(int)st - r)) {
      highlightedComponent=HighlightedComponent.CENTER_HOOK;
      currentState=TimelineState.MOVING;
    }
 else     if (inRange(x,(int)st - r - 1,(int)st + 1)) {
      highlightedComponent=HighlightedComponent.RIGHT_HOOK;
      currentState=TimelineState.RESIZE_TO;
    }
  }
  double delta=0;
  if (mousex != null) {
    delta=x - mousex;
  }
  mousex=x;
switch (currentState) {
case RESIZE_FROM:
    if ((sf + delta <= 0)) {
      sf=0;
    }
 else     if (Math.abs(st - sf + delta) > settings.selection.minimalWidth) {
      sf+=delta;
    }
 else {
    }
  break;
case RESIZE_TO:
if ((st + delta >= w)) {
  st=w;
}
 else if (Math.abs((st + delta) - sf) > settings.selection.minimalWidth) {
  st+=delta;
}
break;
case MOVING:
if ((sf + delta <= 0)) {
sf=0;
}
 else if (st + delta >= w) {
st=w;
}
 else {
sf+=delta;
st+=delta;
}
break;
}
if (model != null && w != 0) {
model.setRangeFromFloat(sf * (1.0 / w),st * (1.0 / w));
}
this.repaint();
}","public void mouseDragged(MouseEvent evt){
  if (model == null)   return;
  int x=evt.getX();
  double w=getWidth();
  int r=settings.selection.visibleHookWidth;
  double sf=(model.getFromFloat() * w);
  double st=(model.getToFloat() * w);
  if (currentState == TimelineState.IDLE) {
    if (inRange(x,(int)sf - 1,(int)sf + r + 1)) {
      highlightedComponent=HighlightedComponent.LEFT_HOOK;
      currentState=TimelineState.RESIZE_FROM;
    }
 else     if (inRange(x,(int)sf + r,(int)st - r)) {
      highlightedComponent=HighlightedComponent.CENTER_HOOK;
      currentState=TimelineState.MOVING;
    }
 else     if (inRange(x,(int)st - r - 1,(int)st + 1)) {
      highlightedComponent=HighlightedComponent.RIGHT_HOOK;
      currentState=TimelineState.RESIZE_TO;
    }
  }
  double delta=0;
  if (mousex != null) {
    delta=x - mousex;
  }
  mousex=x;
switch (currentState) {
case RESIZE_FROM:
    if ((sf + delta <= 0)) {
      sf=0;
    }
 else     if (Math.abs(st - sf + delta) > settings.selection.minimalWidth) {
      sf+=delta;
    }
 else {
    }
  break;
case RESIZE_TO:
if ((st + delta >= w)) {
  st=w;
}
 else if (Math.abs((st + delta) - sf) > settings.selection.minimalWidth) {
  st+=delta;
}
break;
case MOVING:
if ((sf + delta <= 0)) {
sf=0;
}
 else if (st + delta >= w) {
st=w;
}
 else {
sf+=delta;
st+=delta;
}
break;
}
if (model != null && w != 0) {
model.setRangeFromFloat(sf * (1.0 / w),st * (1.0 / w));
}
this.repaint();
}",0.9891494574728736
143109,"private void paintSmallGraduations(Graphics2D g2d,int x,int y,int numOfGrads){
  int width=y - x;
  int height=getHeight();
  int leftMargin=x;
  int topMargin=height - settings.informations.fontSize - 2;
  for (int i=1; i < numOfGrads; i++) {
    int xi=leftMargin + i * (width / numOfGrads);
    g2d.drawLine(xi,topMargin,xi,height - settings.informations.textBottomMargin);
  }
}","private void paintSmallGraduations(Graphics2D g2d,int x,int y,int numOfGrads){
  int width=y - x;
  int height=getHeight();
  int leftMargin=x;
  int topMargin=height - settings.informations.fontSize - 2;
  int unitSize=3;
  if (numOfGrads > (width / unitSize)) {
    return;
  }
  for (int i=1; i < numOfGrads; i++) {
    int xi=leftMargin + i * (width / numOfGrads);
    g2d.drawLine(xi,topMargin,xi,height - settings.informations.textBottomMargin);
  }
}",0.9106078665077472
143110,"private void paintUpperRulerForInterval(Graphics2D g2d,DateTime dtFrom,DateTime dtTo){
  g2d.setFont(settings.informations.font);
  g2d.setColor(settings.informations.fontColor);
  int leftMargin=settings.informations.leftMargin;
  int textTopPosition=settings.informations.textTopPosition;
  int width=getWidth();
  int height=getHeight();
  Interval interval=new Interval(dtFrom,dtTo);
  Period p=interval.toPeriod(PeriodType.days());
  int n=p.getDays();
  int unitSize=(int)(settings.informations.fontMetrics.getStringBounds(""String_Node_Str"",null)).getWidth();
  if (n < (width / unitSize)) {
    for (int i=0; i < n; i++) {
      g2d.drawString(dtFrom.plusDays(i).dayOfMonth().getAsText(),leftMargin + 2 + i * (width / n),textTopPosition);
      g2d.drawLine(leftMargin + i * (width / n),2,leftMargin + i * (width / n),height - settings.informations.textBottomMargin);
      paintSmallGraduations(g2d,leftMargin + i * (width / n),leftMargin + (i + 1) * (width / n),Hours.hoursBetween(dtFrom.plusDays(i),dtFrom.plusDays(i + 1)).getHours());
    }
    return;
  }
  unitSize=(int)(settings.informations.fontMetrics.getStringBounds(""String_Node_Str"",null)).getWidth();
  if (n < (width / unitSize)) {
    for (int i=0; i < n; i++) {
      g2d.drawString(dtFrom.plusDays(i).dayOfMonth().getAsShortText(),leftMargin + 2 + i * (width / n),textTopPosition);
      g2d.drawLine(leftMargin + i * (width / n),2,leftMargin + i * (width / n),height - settings.informations.textBottomMargin);
      paintSmallGraduations(g2d,leftMargin + i * (width / n),leftMargin + (i + 1) * (width / n),Hours.hoursBetween(dtFrom.plusDays(i),dtFrom.plusDays(i + 1)).getHours());
    }
    return;
  }
  p=interval.toPeriod(PeriodType.days());
  n=p.getDays();
  unitSize=(int)(settings.informations.fontMetrics.getStringBounds(""String_Node_Str"",null)).getWidth();
  if (n < (width / unitSize)) {
    for (int i=0; i < n; i++) {
      g2d.drawString(""String_Node_Str"" + (dtFrom.getDayOfMonth() + i),leftMargin + 2 + i * (width / n),textTopPosition);
      g2d.drawLine(leftMargin + i * (width / n),2,leftMargin + i * (width / n),height - settings.informations.textBottomMargin);
      paintSmallGraduations(g2d,leftMargin + i * (width / n),leftMargin + (i + 1) * (width / n),Hours.hoursBetween(dtFrom.plusDays(i),dtFrom.plusDays(i + 1)).getHours());
    }
    return;
  }
  p=interval.toPeriod(PeriodType.months());
  n=p.getMonths();
  unitSize=(int)(settings.informations.fontMetrics.getStringBounds(""String_Node_Str"",null)).getWidth();
  if (n < (width / unitSize)) {
    for (int i=0; i < n; i++) {
      g2d.drawString(dtFrom.plusMonths(i).monthOfYear().getAsText(),leftMargin + 2 + i * (width / n),textTopPosition);
      g2d.drawLine(leftMargin + i * (width / n),2,leftMargin + i * (width / n),height - settings.informations.textBottomMargin);
      paintSmallGraduations(g2d,leftMargin + i * (width / n),leftMargin + (i + 1) * (width / n),Days.daysBetween(dtFrom.plusMonths(i),dtFrom.plusMonths(i + 1)).getDays());
    }
    return;
  }
  unitSize=(int)(settings.informations.fontMetrics.getStringBounds(""String_Node_Str"",null)).getWidth();
  if (n < (width / unitSize)) {
    for (int i=0; i < n; i++) {
      g2d.drawString(dtFrom.plusMonths(i).monthOfYear().getAsShortText(),leftMargin + 2 + i * (width / n),textTopPosition);
      g2d.drawLine(leftMargin + i * (width / n),2,leftMargin + i * (width / n),height - settings.informations.textBottomMargin);
      paintSmallGraduations(g2d,leftMargin + i * (width / n),leftMargin + (i + 1) * (width / n),Days.daysBetween(dtFrom.plusMonths(i),dtFrom.plusMonths(i + 1)).getDays());
    }
    return;
  }
  unitSize=(int)(settings.informations.fontMetrics.getStringBounds(""String_Node_Str"",null)).getWidth();
  if (n < (width / unitSize)) {
    for (int i=0; i < n; i++) {
      g2d.drawString(""String_Node_Str"" + (dtFrom.getMonthOfYear() + i),leftMargin + 2 + i * (width / n),textTopPosition);
      g2d.drawLine(leftMargin + i * (width / n),2,leftMargin + i * (width / n),height - settings.informations.textBottomMargin);
      paintSmallGraduations(g2d,leftMargin + i * (width / n),leftMargin + (i + 1) * (width / n),Days.daysBetween(dtFrom.plusMonths(i),dtFrom.plusMonths(i + 1)).getDays());
    }
    return;
  }
  p=interval.toPeriod(PeriodType.years());
  n=p.getYears();
  unitSize=(int)(settings.informations.fontMetrics.getStringBounds(""String_Node_Str"",null)).getWidth();
  if (n < (width / unitSize)) {
    for (int i=0; i < n; i++) {
      g2d.drawString(""String_Node_Str"" + (dtFrom.getYear() + i),leftMargin + 2 + i * (width / n),textTopPosition);
      g2d.drawLine(leftMargin + i * (width / n),2,leftMargin + i * (width / n),height - settings.informations.textBottomMargin);
      paintSmallGraduations(g2d,leftMargin + i * (width / n),leftMargin + (i + 1) * (width / n),Months.monthsBetween(dtFrom.plusYears(i),dtFrom.plusYears(i + 1)).getMonths());
    }
    return;
  }
  int group=10;
  n=p.getYears() / group;
  if (n < (width / unitSize)) {
    for (int i=0; i < n; i++) {
      g2d.drawString(""String_Node_Str"" + (dtFrom.getYear() + i * group),leftMargin + 2 + i * (width / n),textTopPosition);
      g2d.drawLine(leftMargin + i * (width / n),2,leftMargin + i * (width / n),height - settings.informations.textBottomMargin);
      paintSmallGraduations(g2d,leftMargin + i * (width / n),leftMargin + (i + 1) * (width / n),Months.monthsBetween(dtFrom.plusYears(i * group),dtFrom.plusYears((i + 1) * group)).getMonths());
    }
    return;
  }
  group=20;
  n=p.getYears() / group;
  if (n < (width / unitSize)) {
    for (int i=0; i < n; i++) {
      g2d.drawString(""String_Node_Str"" + (dtFrom.getYear() + i * group),leftMargin + 2 + i * (width / n),textTopPosition);
      g2d.drawLine(leftMargin + i * (width / n),2,leftMargin + i * (width / n),height - settings.informations.textBottomMargin);
      paintSmallGraduations(g2d,leftMargin + i * (width / n),leftMargin + (i + 1) * (width / n),Months.monthsBetween(dtFrom.plusYears(i * group),dtFrom.plusYears((i + 1) * group)).getMonths());
    }
    return;
  }
  group=50;
  n=p.getYears() / group;
  if (n < (width / unitSize)) {
    for (int i=0; i < n; i++) {
      g2d.drawString(""String_Node_Str"" + (dtFrom.getYear() + i * group),leftMargin + 2 + i * (width / n),textTopPosition);
      g2d.drawLine(leftMargin + i * (width / n),2,leftMargin + i * (width / n),height - settings.informations.textBottomMargin);
      paintSmallGraduations(g2d,leftMargin + i * (width / n),leftMargin + (i + 1) * (width / n),Months.monthsBetween(dtFrom.plusYears(i * group),dtFrom.plusYears((i + 1) * group)).getMonths());
    }
    return;
  }
  group=100;
  n=p.getYears() / group;
  if (n / 100 < (width / unitSize)) {
    for (int i=0; i < n; i++) {
      g2d.drawString(""String_Node_Str"" + (dtFrom.getYear() + i * group),leftMargin + 2 + i * (width / n),textTopPosition);
      g2d.drawLine(leftMargin + i * (width / n),2,leftMargin + i * (width / n),height - settings.informations.textBottomMargin);
      paintSmallGraduations(g2d,leftMargin + i * (width / n),leftMargin + (i + 1) * (width / n),Months.monthsBetween(dtFrom.plusYears(i * group),dtFrom.plusYears((i + 1) * group)).getMonths());
    }
  }
  return;
}","private void paintUpperRulerForInterval(Graphics2D g2d,DateTime dtFrom,DateTime dtTo){
  g2d.setFont(settings.informations.font);
  g2d.setColor(settings.informations.fontColor);
  int leftMargin=settings.informations.leftMargin;
  int textTopPosition=settings.informations.textTopPosition;
  int width=getWidth();
  int height=getHeight();
  Interval interval=new Interval(dtFrom,dtTo);
  Period p=interval.toPeriod(PeriodType.days());
  int n=p.getDays();
  int unitSize=(int)(settings.informations.fontMetrics.getStringBounds(""String_Node_Str"",null)).getWidth();
  if (n < (width / unitSize)) {
    for (int i=0; i < n; i++) {
      g2d.drawString(dtFrom.plusDays(i).dayOfMonth().getAsText(LOCALE),leftMargin + 2 + i * (width / n),textTopPosition);
      g2d.drawLine(leftMargin + i * (width / n),2,leftMargin + i * (width / n),height - settings.informations.textBottomMargin);
      paintSmallGraduations(g2d,leftMargin + i * (width / n),leftMargin + (i + 1) * (width / n),Hours.hoursBetween(dtFrom.plusDays(i),dtFrom.plusDays(i + 1)).getHours());
    }
    return;
  }
  unitSize=(int)(settings.informations.fontMetrics.getStringBounds(""String_Node_Str"",null)).getWidth();
  if (n < (width / unitSize)) {
    for (int i=0; i < n; i++) {
      g2d.drawString(dtFrom.plusDays(i).dayOfMonth().getAsShortText(LOCALE),leftMargin + 2 + i * (width / n),textTopPosition);
      g2d.drawLine(leftMargin + i * (width / n),2,leftMargin + i * (width / n),height - settings.informations.textBottomMargin);
      paintSmallGraduations(g2d,leftMargin + i * (width / n),leftMargin + (i + 1) * (width / n),Hours.hoursBetween(dtFrom.plusDays(i),dtFrom.plusDays(i + 1)).getHours());
    }
    return;
  }
  p=interval.toPeriod(PeriodType.days());
  n=p.getDays();
  unitSize=(int)(settings.informations.fontMetrics.getStringBounds(""String_Node_Str"",null)).getWidth();
  if (n < (width / unitSize)) {
    for (int i=0; i < n; i++) {
      g2d.drawString(""String_Node_Str"" + (dtFrom.getDayOfMonth() + i),leftMargin + 2 + i * (width / n),textTopPosition);
      g2d.drawLine(leftMargin + i * (width / n),2,leftMargin + i * (width / n),height - settings.informations.textBottomMargin);
      paintSmallGraduations(g2d,leftMargin + i * (width / n),leftMargin + (i + 1) * (width / n),Hours.hoursBetween(dtFrom.plusDays(i),dtFrom.plusDays(i + 1)).getHours());
    }
    return;
  }
  p=interval.toPeriod(PeriodType.months());
  n=p.getMonths();
  unitSize=(int)(settings.informations.fontMetrics.getStringBounds(""String_Node_Str"",null)).getWidth();
  if (n < (width / unitSize)) {
    for (int i=0; i < n; i++) {
      g2d.drawString(dtFrom.plusMonths(i).monthOfYear().getAsText(LOCALE),leftMargin + 2 + i * (width / n),textTopPosition);
      g2d.drawLine(leftMargin + i * (width / n),2,leftMargin + i * (width / n),height - settings.informations.textBottomMargin);
      paintSmallGraduations(g2d,leftMargin + i * (width / n),leftMargin + (i + 1) * (width / n),Days.daysBetween(dtFrom.plusMonths(i),dtFrom.plusMonths(i + 1)).getDays());
    }
    return;
  }
  unitSize=(int)(settings.informations.fontMetrics.getStringBounds(""String_Node_Str"",null)).getWidth();
  if (n < (width / unitSize)) {
    for (int i=0; i < n; i++) {
      g2d.drawString(dtFrom.plusMonths(i).monthOfYear().getAsShortText(LOCALE),leftMargin + 2 + i * (width / n),textTopPosition);
      g2d.drawLine(leftMargin + i * (width / n),2,leftMargin + i * (width / n),height - settings.informations.textBottomMargin);
      paintSmallGraduations(g2d,leftMargin + i * (width / n),leftMargin + (i + 1) * (width / n),Days.daysBetween(dtFrom.plusMonths(i),dtFrom.plusMonths(i + 1)).getDays());
    }
    return;
  }
  unitSize=(int)(settings.informations.fontMetrics.getStringBounds(""String_Node_Str"",null)).getWidth();
  if (n < (width / unitSize)) {
    for (int i=0; i < n; i++) {
      g2d.drawString(""String_Node_Str"" + (dtFrom.getMonthOfYear() + i),leftMargin + 2 + i * (width / n),textTopPosition);
      g2d.drawLine(leftMargin + i * (width / n),2,leftMargin + i * (width / n),height - settings.informations.textBottomMargin);
      paintSmallGraduations(g2d,leftMargin + i * (width / n),leftMargin + (i + 1) * (width / n),Days.daysBetween(dtFrom.plusMonths(i),dtFrom.plusMonths(i + 1)).getDays());
    }
    return;
  }
  p=interval.toPeriod(PeriodType.years());
  n=p.getYears();
  unitSize=(int)(settings.informations.fontMetrics.getStringBounds(""String_Node_Str"",null)).getWidth();
  if (n < (width / unitSize)) {
    for (int i=0; i < n; i++) {
      g2d.drawString(""String_Node_Str"" + (dtFrom.getYear() + i),leftMargin + 2 + i * (width / n),textTopPosition);
      g2d.drawLine(leftMargin + i * (width / n),2,leftMargin + i * (width / n),height - settings.informations.textBottomMargin);
      paintSmallGraduations(g2d,leftMargin + i * (width / n),leftMargin + (i + 1) * (width / n),Months.monthsBetween(dtFrom.plusYears(i),dtFrom.plusYears(i + 1)).getMonths());
    }
    return;
  }
  int group=10;
  n=p.getYears() / group;
  if (n < (width / unitSize)) {
    for (int i=0; i < n; i++) {
      g2d.drawString(""String_Node_Str"" + (dtFrom.getYear() + i * group),leftMargin + 2 + i * (width / n),textTopPosition);
      g2d.drawLine(leftMargin + i * (width / n),2,leftMargin + i * (width / n),height - settings.informations.textBottomMargin);
      paintSmallGraduations(g2d,leftMargin + i * (width / n),leftMargin + (i + 1) * (width / n),Months.monthsBetween(dtFrom.plusYears(i * group),dtFrom.plusYears((i + 1) * group)).getMonths());
    }
    return;
  }
  group=20;
  n=p.getYears() / group;
  if (n < (width / unitSize)) {
    for (int i=0; i < n; i++) {
      g2d.drawString(""String_Node_Str"" + (dtFrom.getYear() + i * group),leftMargin + 2 + i * (width / n),textTopPosition);
      g2d.drawLine(leftMargin + i * (width / n),2,leftMargin + i * (width / n),height - settings.informations.textBottomMargin);
      paintSmallGraduations(g2d,leftMargin + i * (width / n),leftMargin + (i + 1) * (width / n),Months.monthsBetween(dtFrom.plusYears(i * group),dtFrom.plusYears((i + 1) * group)).getMonths());
    }
    return;
  }
  group=50;
  n=p.getYears() / group;
  if (n < (width / unitSize)) {
    for (int i=0; i < n; i++) {
      g2d.drawString(""String_Node_Str"" + (dtFrom.getYear() + i * group),leftMargin + 2 + i * (width / n),textTopPosition);
      g2d.drawLine(leftMargin + i * (width / n),2,leftMargin + i * (width / n),height - settings.informations.textBottomMargin);
      paintSmallGraduations(g2d,leftMargin + i * (width / n),leftMargin + (i + 1) * (width / n),Months.monthsBetween(dtFrom.plusYears(i * group),dtFrom.plusYears((i + 1) * group)).getMonths());
    }
    return;
  }
  group=100;
  n=p.getYears() / group;
  if (n / 100 < (width / unitSize)) {
    for (int i=0; i < n; i++) {
      g2d.drawString(""String_Node_Str"" + (dtFrom.getYear() + i * group),leftMargin + 2 + i * (width / n),textTopPosition);
      g2d.drawLine(leftMargin + i * (width / n),2,leftMargin + i * (width / n),height - settings.informations.textBottomMargin);
      paintSmallGraduations(g2d,leftMargin + i * (width / n),leftMargin + (i + 1) * (width / n),Months.monthsBetween(dtFrom.plusYears(i * group),dtFrom.plusYears((i + 1) * group)).getMonths());
    }
  }
  return;
}",0.9983386404541048
143111,"public synchronized void setRangeFromRealValues(double from,double to){
  if (from >= to)   return;
  fromValue=from;
  toValue=to;
  filter.setValue(new Range(from,to));
}","public synchronized void setRangeFromRealValues(double from,double to){
  if (from >= to)   return;
  fromValue=from;
  toValue=to;
  if (filter != null)   filter.setValue(new Range(from,to));
}",0.9398907103825136
143112,"public synchronized void setToValue(double to){
  if (to <= fromValue)   return;
  toValue=to;
}","public synchronized void setToValue(double to){
  toValue=to;
}",0.7924528301886793
143113,"public synchronized void setToFloat(double to){
  if (to <= toFloat)   return;
  toFloat=to;
  setToValue(getMinValue() + getFromFloat() * getTotalSize());
}","public synchronized void setToFloat(double to){
  toFloat=to;
  setToValue(getMinValue() + getFromFloat() * getTotalSize());
  if (filter != null)   filter.setValue(new Range(getFromValue(),getToValue()));
}",0.3241758241758242
143114,"public synchronized void setFromValue(double from){
  if (from >= toValue)   return;
  fromValue=from;
}","public synchronized void setFromValue(double from){
  fromValue=from;
}",0.8114285714285714
143115,"public synchronized void setMaxValue(double max){
  if (max <= minValue)   return;
  this.maxValue=max;
  setFromValue(getMaxValue() + getToFloat() * getTotalSize());
}","public synchronized void setMaxValue(double max){
  this.maxValue=max;
  setFromValue(getMaxValue() + getToFloat() * getTotalSize());
}",0.8910891089108911
143116,"public synchronized void setFromFloat(double from){
  if (from >= toFloat)   return;
  fromFloat=from;
  setFromValue(getMinValue() + getFromFloat() * getTotalSize());
}","public synchronized void setFromFloat(double from){
  fromFloat=from;
  setFromValue(getMinValue() + getFromFloat() * getTotalSize());
  if (filter != null)   filter.setValue(new Range(getFromValue(),getToValue()));
}",0.3264248704663212
143117,"public synchronized void setMinValue(double min){
  if (min >= maxValue)   return;
  this.minValue=min;
  setFromValue(getMinValue() + getFromFloat() * getTotalSize());
}","public synchronized void setMinValue(double min){
  this.minValue=min;
  setFromValue(getMinValue() + getFromFloat() * getTotalSize());
}",0.8925081433224755
143118,"public void fatalError(Throwable t){
  Logger.getLogger(""String_Node_Str"").log(Level.SEVERE,""String_Node_Str"",t.getCause());
}","public void fatalError(Throwable t){
  Logger.getLogger(""String_Node_Str"").log(Level.SEVERE,""String_Node_Str"",t.getCause() != null ? t.getCause() : t);
}",0.9032258064516128
143119,"public LayoutModelImpl(){
  listeners=new ArrayList<PropertyChangeListener>();
  savedProperties=new HashMap<LayoutPropertyKey,Object>();
  executor=new LongTaskExecutor(true,""String_Node_Str"",5);
  executor.setLongTaskListener(new LongTaskListener(){
    public void taskFinished(    LongTask task){
      setRunning(false);
    }
  }
);
  executor.setDefaultErrorHandler(new LongTaskErrorHandler(){
    public void fatalError(    Throwable t){
      Logger.getLogger(""String_Node_Str"").log(Level.SEVERE,""String_Node_Str"",t.getCause());
    }
  }
);
}","public LayoutModelImpl(){
  listeners=new ArrayList<PropertyChangeListener>();
  savedProperties=new HashMap<LayoutPropertyKey,Object>();
  executor=new LongTaskExecutor(true,""String_Node_Str"",5);
  executor.setLongTaskListener(new LongTaskListener(){
    public void taskFinished(    LongTask task){
      setRunning(false);
    }
  }
);
  executor.setDefaultErrorHandler(new LongTaskErrorHandler(){
    public void fatalError(    Throwable t){
      Logger.getLogger(""String_Node_Str"").log(Level.SEVERE,""String_Node_Str"",t.getCause() != null ? t.getCause() : t);
    }
  }
);
}",0.9761273209549072
143120,"private void afterTaking(){
  WindowManager.getDefault().getMainWindow().setCursor(Cursor.getDefaultCursor());
  if (finishedMessage && file != null) {
    String msg=NbBundle.getMessage(ScreenshotMaker.class,""String_Node_Str"",file.getName());
    JOptionPane.showMessageDialog(WindowManager.getDefault().getMainWindow(),msg,NbBundle.getMessage(ScreenshotMaker.class,""String_Node_Str""),JOptionPane.INFORMATION_MESSAGE);
  }
}","private void afterTaking(){
  WindowManager.getDefault().getMainWindow().setCursor(Cursor.getDefaultCursor());
  if (finishedMessage && file != null) {
    final String msg=NbBundle.getMessage(ScreenshotMaker.class,""String_Node_Str"",file.getName());
    SwingUtilities.invokeLater(new Runnable(){
      public void run(){
        JOptionPane.showMessageDialog(WindowManager.getDefault().getMainWindow(),msg,NbBundle.getMessage(ScreenshotMaker.class,""String_Node_Str""),JOptionPane.INFORMATION_MESSAGE);
      }
    }
);
  }
}",0.8956796628029505
143121,"private void setSelectedLayout(LayoutBuilder builder){
  controller.setLayout(model.getLayout(builder));
}","private void setSelectedLayout(LayoutBuilder builder){
  controller.setLayout(builder != null ? model.getLayout(builder) : null);
}",0.8945147679324894
143122,"public void writeLock(){
  dhns.getWriteLock().lock();
}","public void writeLock(){
  if (SwingUtilities.isEventDispatchThread()) {
    System.err.println(""String_Node_Str"");
  }
  dhns.getWriteLock().lock();
}",0.5410628019323671
143123,"public void readLock(){
  dhns.getReadLock().lock();
}","public void readLock(){
  if (SwingUtilities.isEventDispatchThread()) {
    System.err.println(""String_Node_Str"");
  }
  dhns.getReadLock().lock();
}",0.5320197044334976
143124,"public NodeDataTable(){
  outlineTable=new Outline();
  quickFilter=new QuickFilter(){
    public boolean accept(    Object value){
      if (value == null) {
        return false;
      }
      if (value instanceof ImmutableTreeNode) {
        return pattern.matcher(((ImmutableTreeNode)value).getNode().getNodeData().getLabel()).find();
      }
      return pattern.matcher(value.toString()).find();
    }
  }
;
  outlineTable.addMouseListener(new PopupAdapter());
}","public NodeDataTable(){
  outlineTable=new Outline();
  quickFilter=new QuickFilter(){
    public boolean accept(    Object value){
      if (value == null) {
        return false;
      }
      if (value instanceof ImmutableTreeNode) {
        String label=((ImmutableTreeNode)value).getNode().getNodeData().getLabel();
        if (label != null) {
          return pattern.matcher(label).find();
        }
        return false;
      }
      return pattern.matcher(value.toString()).find();
    }
  }
;
  outlineTable.addMouseListener(new PopupAdapter());
}",0.8471275559883155
143125,"public boolean accept(Object value){
  if (value == null) {
    return false;
  }
  if (value instanceof ImmutableTreeNode) {
    return pattern.matcher(((ImmutableTreeNode)value).getNode().getNodeData().getLabel()).find();
  }
  return pattern.matcher(value.toString()).find();
}","public boolean accept(Object value){
  if (value == null) {
    return false;
  }
  if (value instanceof ImmutableTreeNode) {
    String label=((ImmutableTreeNode)value).getNode().getNodeData().getLabel();
    if (label != null) {
      return pattern.matcher(label).find();
    }
    return false;
  }
  return pattern.matcher(value.toString()).find();
}",0.658267716535433
143126,"private void refreshPie(){
  if (model.getSelectedPartition() != null) {
    pieLink.setEnabled(true);
    if (model.isPie()) {
      pieLink.setText(HIDE_PIE);
      partitionPie=new PartitionPie();
      partitionPie.setup(model.getSelectedPartition());
      remove(centerScrollPane);
      add(partitionPie,BorderLayout.CENTER);
      revalidate();
      repaint();
      return;
    }
 else {
      pieLink.setText(SHOW_PIE);
    }
  }
 else {
    pieLink.setText(SHOW_PIE);
    pieLink.setEnabled(false);
  }
  if (!isAncestorOf(centerScrollPane)) {
    remove(partitionPie);
    add(centerScrollPane,BorderLayout.CENTER);
    revalidate();
    repaint();
  }
}","private void refreshPie(){
  if (model.getSelectedPartition() != null) {
    pieLink.setEnabled(true);
    if (model.isPie()) {
      pieLink.setText(HIDE_PIE);
      partitionPie=new PartitionPie();
      SwingUtilities.invokeLater(new Runnable(){
        public void run(){
          partitionPie.setup(model.getSelectedPartition());
          remove(centerScrollPane);
          add(partitionPie,BorderLayout.CENTER);
          revalidate();
          repaint();
        }
      }
);
      return;
    }
 else {
      pieLink.setText(SHOW_PIE);
    }
  }
 else {
    pieLink.setText(SHOW_PIE);
    pieLink.setEnabled(false);
  }
  if (!isAncestorOf(centerScrollPane)) {
    remove(partitionPie);
    add(centerScrollPane,BorderLayout.CENTER);
    revalidate();
    repaint();
  }
}",0.9083390764989664
143127,"/** 
 * Constructor.
 * @param parent     the parent graph of the edge
 * @param thickness  the edge's thickness
 * @param node1      the edge's node 1
 * @param node2      the edge's node 2
 * @param label      the edge's label
 * @param labelSize  the edge's label size
 */
protected DirectedEdgeImpl(GraphImpl parent,float thickness,NodeImpl node1,NodeImpl node2,String label,float labelSize){
  super(parent,thickness,node1,node2,label,labelSize);
  arrows.add(new EdgeArrowB1Out(this));
  arrows.add(new EdgeArrowB2In(this));
  miniLabels.add(new EdgeMiniLabelB1(this));
  miniLabels.add(new EdgeMiniLabelB2(this));
}","/** 
 * Constructor.
 * @param parent     the parent graph of the edge
 * @param thickness  the edge's thickness
 * @param node1      the edge's node 1
 * @param node2      the edge's node 2
 * @param label      the edge's label
 * @param labelSize  the edge's label size
 */
protected DirectedEdgeImpl(GraphImpl parent,float thickness,NodeImpl node1,NodeImpl node2,String label,float labelSize){
  super(parent,thickness,node1,node2,label,labelSize);
  arrows.add(new EdgeArrowB1Out(this));
  arrows.add(new EdgeArrowB2In(this));
  if (node1.hasLabel()) {
    miniLabels.add(new EdgeMiniLabelB1(this));
  }
  if (node2.hasLabel()) {
    miniLabels.add(new EdgeMiniLabelB2(this));
  }
}",0.9510703363914372
143128,"/** 
 * Constructor.
 * @param parent     the parent graph of the edge
 * @param thickness  the edge's thickness
 * @param node1      the edge's node 1
 * @param node2      the edge's node 2
 * @param label      the edge's label
 * @param labelSize  the edge's label size
 */
protected EdgeImpl(GraphImpl parent,float thickness,NodeImpl node1,NodeImpl node2,String label,float labelSize){
  super(parent,thickness);
  this.node1=node1;
  this.node2=node2;
  direction=new Vector(this.node2.getPosition());
  direction.sub(new Vector(this.node1.getPosition()));
  length=direction.mag();
  direction.normalize();
  genCurves();
  if (null != label) {
    this.label=new EdgeLabelImpl(this,label,labelSize);
  }
}","/** 
 * Constructor.
 * @param parent     the parent graph of the edge
 * @param thickness  the edge's thickness
 * @param node1      the edge's node 1
 * @param node2      the edge's node 2
 * @param label      the edge's label
 * @param labelSize  the edge's label size
 */
protected EdgeImpl(GraphImpl parent,float thickness,NodeImpl node1,NodeImpl node2,String label,float labelSize){
  super(parent,thickness);
  this.node1=node1;
  this.node2=node2;
  direction=new Vector(this.node2.getPosition());
  direction.sub(new Vector(this.node1.getPosition()));
  length=direction.mag();
  direction.normalize();
  genCurves();
  if (null != label) {
    this.label=new EdgeLabelImpl(this,label,labelSize);
  }
 else {
    this.label=null;
  }
}",0.977319587628866
143129,"/** 
 * Constructor.
 * @param parent  the parent graph
 * @param label   the node label
 * @param x       the 'x' position component
 * @param y       the 'y' position component
 * @param radius  the node radius
 * @param r       the red color component
 * @param g       the green color component
 * @param b       the blue color component
 */
public NodeImpl(GraphImpl parent,float x,float y,float radius,String label,float labelSize,float r,float g,float b){
  this.parent=parent;
  this.position=new PointImpl(x,y);
  this.radius=radius;
  this.originalColor=new SimpleColor(r,g,b,0);
  this.label=new NodeLabelImpl(this,label,labelSize);
  this.labelBorder=new NodeLabelBorderImpl(this);
  Vector topLeftVector=new Vector(position);
  topLeftVector.sub(radius,radius,0);
  topLeftPosition=new PointImpl(topLeftVector);
  Vector bottomRightVector=new Vector(position);
  bottomRightVector.add(radius,radius,0);
  bottomRightPosition=new PointImpl(bottomRightVector);
  getNodeSupervisor().addNode(this);
}","/** 
 * Constructor.
 * @param parent  the parent graph
 * @param label   the node label
 * @param x       the 'x' position component
 * @param y       the 'y' position component
 * @param radius  the node radius
 * @param r       the red color component
 * @param g       the green color component
 * @param b       the blue color component
 */
public NodeImpl(GraphImpl parent,float x,float y,float radius,String label,float labelSize,float r,float g,float b){
  this.parent=parent;
  this.position=new PointImpl(x,y);
  this.radius=radius;
  this.originalColor=new SimpleColor(r,g,b,0);
  if (label != null) {
    this.label=new NodeLabelImpl(this,label,labelSize);
    this.labelBorder=new NodeLabelBorderImpl(this);
  }
 else {
    this.label=null;
    this.labelBorder=null;
  }
  Vector topLeftVector=new Vector(position);
  topLeftVector.sub(radius,radius,0);
  topLeftPosition=new PointImpl(topLeftVector);
  Vector bottomRightVector=new Vector(position);
  bottomRightVector.add(radius,radius,0);
  bottomRightPosition=new PointImpl(bottomRightVector);
  getNodeSupervisor().addNode(this);
}",0.9568924680246328
143130,"/** 
 * Colors the given node label border with the node label border colorizer.
 * @param node  the node label border to color
 */
private void colorNodeLabelBorder(NodeLabelBorderImpl nodeLabelBorder){
  nodeLabelBorderColorizer.color(nodeLabelBorder);
}","/** 
 * Colors the given node label border with the node label border colorizer.
 * @param node  the node label border to color
 */
private void colorNodeLabelBorder(NodeLabelBorderImpl nodeLabelBorder){
  if (nodeLabelBorder != null) {
    nodeLabelBorderColorizer.color(nodeLabelBorder);
  }
}",0.9292196007259528
143131,"/** 
 * Updates the node label by shortening its value or by reverting its original one.
 */
private void updateLabelValue(NodeLabelImpl nodeLabel){
  if (shortenLabelsFlag) {
    shortenNodeLabel(nodeLabel);
  }
 else {
    revertLabel(nodeLabel);
  }
}","/** 
 * Updates the node label by shortening its value or by reverting its original one.
 */
private void updateLabelValue(NodeLabelImpl nodeLabel){
  if (nodeLabel != null) {
    if (shortenLabelsFlag) {
      shortenNodeLabel(nodeLabel);
    }
 else {
      revertLabel(nodeLabel);
    }
  }
}",0.8779599271402551
143132,"/** 
 * Colors the given node label with the node label colorizer.
 * @param node  the node label to color
 */
private void colorNodeLabel(NodeLabelImpl nodeLabel){
  nodeLabelColorizer.color(nodeLabel);
}","/** 
 * Colors the given node label with the node label colorizer.
 * @param node  the node label to color
 */
private void colorNodeLabel(NodeLabelImpl nodeLabel){
  if (nodeLabel != null) {
    nodeLabelColorizer.color(nodeLabel);
  }
}",0.9255079006772008
143133,"private void walkFile(BufferedReader reader) throws Exception {
  int cptLine=0;
  while (reader.ready() && !cancel) {
    String line=reader.readLine();
    if (!isComment(line)) {
      String[] tokens=line.split(""String_Node_Str"");
      if (tokens.length > 0) {
        if (tokens[0].equals(""String_Node_Str"")) {
          parseNodes(tokens);
        }
 else         if (tokens[0].equals(""String_Node_Str"")) {
          parseEdge(tokens,cptLine);
        }
      }
    }
    cptLine++;
  }
}","private void walkFile(BufferedReader reader) throws Exception {
  int cptLine=0;
  int state=0;
  while (reader.ready() && !cancel) {
    String line=reader.readLine();
    if (!isComment(line)) {
      String[] tokens=line.split(""String_Node_Str"");
      if (tokens.length > 0) {
        if (state == 0) {
          if (tokens[0].equals(""String_Node_Str"")) {
            parseNodes(tokens);
          }
 else           if (tokens[0].equals(""String_Node_Str"")) {
            parseEdge(tokens,cptLine);
          }
 else           if (tokens[0].equals(""String_Node_Str"")) {
            state=1;
          }
        }
        if (state == 1) {
          return;
        }
      }
    }
    cptLine++;
  }
}",0.8140116763969975
143134,"/** 
 * Colors the label of the supervised nodes with the node label colorizer.
 */
private void colorNodeLabels(){
  for (  NodeImpl n : supervisedNodes) {
    colorNodeLabel(n.getLabel());
  }
}","/** 
 * Colors the label of the supervised nodes with the node label colorizer.
 */
private void colorNodeLabels(){
  for (  NodeImpl n : supervisedNodes) {
    if (n.hasLabel()) {
      colorNodeLabel(n.getLabel());
    }
  }
}",0.9245283018867924
143135,"/** 
 * Shortens the labels of the supervised nodes.
 */
private void shortenNodeLabels(){
  for (  NodeImpl n : supervisedNodes) {
    shortenNodeLabel(n.getLabel());
  }
}","/** 
 * Shortens the labels of the supervised nodes.
 */
private void shortenNodeLabels(){
  for (  NodeImpl n : supervisedNodes) {
    if (n.hasLabel()) {
      shortenNodeLabel(n.getLabel());
    }
  }
}",0.9153439153439152
143136,"/** 
 * Constructor.
 */
public PreviewControllerImpl(){
  ProjectController pc=Lookup.getDefault().lookup(ProjectController.class);
  pc.addWorkspaceListener(new WorkspaceListener(){
    public void initialize(    Workspace workspace){
    }
    public void select(    Workspace workspace){
      updateFlag=true;
    }
    public void unselect(    Workspace workspace){
    }
    public void close(    Workspace workspace){
    }
    public void disable(){
      graphSheet=null;
    }
  }
);
}","/** 
 * Constructor.
 */
public PreviewControllerImpl(){
  ProjectController pc=Lookup.getDefault().lookup(ProjectController.class);
  if (pc.getCurrentWorkspace() != null) {
    updateFlag=true;
  }
  pc.addWorkspaceListener(new WorkspaceListener(){
    public void initialize(    Workspace workspace){
    }
    public void select(    Workspace workspace){
      updateFlag=true;
    }
    public void unselect(    Workspace workspace){
    }
    public void close(    Workspace workspace){
    }
    public void disable(){
      graphSheet=null;
    }
  }
);
}",0.9367327667610954
143137,"private PreviewSettingsTopComponent(){
  initComponents();
  setName(NbBundle.getMessage(PreviewSettingsTopComponent.class,""String_Node_Str""));
  setToolTipText(NbBundle.getMessage(PreviewSettingsTopComponent.class,""String_Node_Str""));
  PropertySheet ps=new PropertySheet();
  ps.setNodes(new Node[]{new PreviewNode()});
  propertiesPanel.add(ps,BorderLayout.CENTER);
  PreviewUIController.findInstance();
}","private PreviewSettingsTopComponent(){
  initComponents();
  setName(NbBundle.getMessage(PreviewSettingsTopComponent.class,""String_Node_Str""));
  setToolTipText(NbBundle.getMessage(PreviewSettingsTopComponent.class,""String_Node_Str""));
  PropertySheet ps=new PropertySheet();
  ps.setNodes(new Node[]{new PreviewNode()});
  propertiesPanel.add(ps,BorderLayout.CENTER);
  ProjectController pc=Lookup.getDefault().lookup(ProjectController.class);
  if (pc.getCurrentWorkspace() != null) {
    refreshButton.setEnabled(true);
  }
  PreviewUIController.findInstance();
}",0.837782340862423
143138,"@Override public void afterDisplay(GL gl,GLU glu){
  if (vizConfig.isSelectionEnable()) {
    gl.glMatrixMode(GL.GL_PROJECTION);
    gl.glPushMatrix();
    gl.glLoadIdentity();
    gl.glOrtho(0,graphDrawable.getViewportWidth(),0,graphDrawable.getViewportHeight(),-1,1);
    gl.glMatrixMode(GL.GL_MODELVIEW);
    gl.glPushMatrix();
    gl.glLoadIdentity();
    currentSelectionArea.drawArea(gl,glu);
    gl.glMatrixMode(GL.GL_PROJECTION);
    gl.glPopMatrix();
    gl.glMatrixMode(GL.GL_MODELVIEW);
    gl.glPopMatrix();
  }
  graphIO.trigger();
}","@Override public void afterDisplay(GL gl,GLU glu){
  if (vizConfig.isSelectionEnable() && currentSelectionArea != null) {
    gl.glMatrixMode(GL.GL_PROJECTION);
    gl.glPushMatrix();
    gl.glLoadIdentity();
    gl.glOrtho(0,graphDrawable.getViewportWidth(),0,graphDrawable.getViewportHeight(),-1,1);
    gl.glMatrixMode(GL.GL_MODELVIEW);
    gl.glPushMatrix();
    gl.glLoadIdentity();
    currentSelectionArea.drawArea(gl,glu);
    gl.glMatrixMode(GL.GL_PROJECTION);
    gl.glPopMatrix();
    gl.glMatrixMode(GL.GL_MODELVIEW);
    gl.glPopMatrix();
  }
  graphIO.trigger();
}",0.9715302491103204
143139,"@Override public boolean isInOctreeLeaf(Octant leaf){
  NodeData nodeFrom=obj.getSource();
  NodeData nodeTo=obj.getTarget();
  if (octants[0] == leaf) {
    if (octants[0] != ((ModelImpl)nodeFrom.getModel()).getOctants()[0]) {
      return false;
    }
  }
 else {
    if (octants[1] != ((ModelImpl)nodeTo.getModel()).getOctants()[0]) {
      return false;
    }
  }
  return true;
}","@Override public boolean isInOctreeLeaf(Octant leaf){
  NodeData nodeFrom=obj.getSource();
  NodeData nodeTo=obj.getTarget();
  boolean res=true;
  if (octants[0] == leaf) {
    if (octants[0] != ((ModelImpl)nodeFrom.getModel()).getOctants()[0]) {
      res=false;
    }
  }
  if (octants[1] == leaf) {
    if (octants[1] != ((ModelImpl)nodeTo.getModel()).getOctants()[0]) {
      res=false;
    }
  }
  if (octants[0] != leaf && octants[1] != leaf) {
    res=false;
  }
  return res;
}",0.7448275862068966
143140,"@Override public void setOctant(Octant octant){
  if (((ModelImpl)obj.getSource().getModel()).getOctants()[0] == octant) {
    octants[0]=octant;
  }
 else {
    octants[1]=octant;
  }
}","@Override public void setOctant(Octant octant){
  if (((ModelImpl)obj.getSource().getModel()).getOctants()[0] == octant) {
    octants[0]=octant;
  }
  if (((ModelImpl)obj.getTarget().getModel()).getOctants()[0] == octant) {
    octants[1]=octant;
  }
}",0.8291571753986332
143141,"public void displayOctantInfo(GL gl,GLU glu){
  GLUT glut=new GLUT();
  float quantum=size / 2;
  float height=15;
  gl.glPushMatrix();
  gl.glTranslatef(posX - quantum,posY + quantum - height,posZ + quantum);
  gl.glScalef(0.1f,0.1f,0.1f);
  gl.glColor4f(0.0f,0.0f,1.0f,1.0f);
  glut.glutStrokeString(GLUT.STROKE_MONO_ROMAN,""String_Node_Str"" + objectsCount);
  gl.glPopMatrix();
  int i=0;
  for (  ParamAVLTree<ModelImpl> p : modelClasses) {
    height+=15;
    gl.glPushMatrix();
    gl.glTranslatef(posX - quantum,posY + quantum - height,posZ + quantum);
    gl.glScalef(0.1f,0.1f,0.1f);
    gl.glColor4f(0.0f,0.0f,1.0f,1.0f);
    glut.glutStrokeString(GLUT.STROKE_MONO_ROMAN,""String_Node_Str"" + (i++) + ""String_Node_Str""+ p.getCount());
    gl.glPopMatrix();
  }
}","public void displayOctantInfo(GL gl,GLU glu){
  GLUT glut=new GLUT();
  float quantum=size / 2;
  float height=15;
  gl.glPushMatrix();
  gl.glTranslatef(posX - quantum,posY + quantum - height,posZ + quantum);
  gl.glScalef(0.1f,0.1f,0.1f);
  gl.glColor4f(0.0f,0.0f,1.0f,1.0f);
  glut.glutStrokeString(GLUT.STROKE_MONO_ROMAN,""String_Node_Str"" + octantID);
  gl.glPopMatrix();
  height+=15;
  gl.glPushMatrix();
  gl.glTranslatef(posX - quantum,posY + quantum - height,posZ + quantum);
  gl.glScalef(0.1f,0.1f,0.1f);
  gl.glColor4f(0.0f,0.0f,1.0f,1.0f);
  glut.glutStrokeString(GLUT.STROKE_MONO_ROMAN,""String_Node_Str"" + objectsCount);
  gl.glPopMatrix();
  int i=0;
  for (  ParamAVLTree<ModelImpl> p : modelClasses) {
    height+=15;
    gl.glPushMatrix();
    gl.glTranslatef(posX - quantum,posY + quantum - height,posZ + quantum);
    gl.glScalef(0.1f,0.1f,0.1f);
    gl.glColor4f(0.0f,0.0f,1.0f,1.0f);
    glut.glutStrokeString(GLUT.STROKE_MONO_ROMAN,""String_Node_Str"" + (i++) + ""String_Node_Str""+ p.getCount());
    gl.glPopMatrix();
  }
}",0.8483177054605626
143142,"public void addObject(int classID,ModelImpl obj){
  Octant[] octants=obj.getOctants();
  boolean manualAdd=true;
  for (int i=0; i < octants.length; i++) {
    Octant o=obj.getOctants()[i];
    if (o != null) {
      o.addObject(classID,obj);
      manualAdd=false;
    }
  }
  if (manualAdd) {
    root.addObject(classID,obj);
  }
}","public void addObject(int classID,ModelImpl obj){
  Octant[] octants=obj.getOctants();
  boolean manualAdd=true;
  for (int i=0; i < octants.length; i++) {
    Octant o=octants[i];
    if (o != null) {
      o.addObject(classID,obj);
      manualAdd=false;
    }
  }
  if (manualAdd) {
    root.addObject(classID,obj);
  }
}",0.9680365296803652
143143,"public HierarchicalDirectedGraphImplFiltered(Dhns dhns,GraphStructure graphStructure,View view){
  super(dhns,graphStructure);
  this.view=(ViewImpl)view;
}","public HierarchicalDirectedGraphImplFiltered(Dhns dhns,GraphStructure graphStructure,View view){
  super(dhns,graphStructure,view);
  this.delegate=new HierarchicalDirectedGraphImpl(dhns,structure);
}",0.8033707865168539
143144,"@Override public Edge getEdge(Node source,Node target){
  readLock();
  view.checkUpdate();
  AbstractNode sourceNode=checkNode(source);
  AbstractNode targetNode=checkNode(target);
  Predicate<AbstractEdge> edgePredicate=view.getClusteredLayerEdgePredicate();
  AbstractEdge res=sourceNode.getEdgesOutTree().getItem(targetNode.getNumber());
  if (!edgePredicate.evaluate(res)) {
    res=null;
  }
  readUnlock();
  return res;
}","@Override public Edge getEdge(Node source,Node target){
  view.checkUpdate();
  AbstractNode sourceNode=checkNode(source);
  AbstractNode targetNode=checkNode(target);
  Predicate<AbstractEdge> edgePredicate=view.getClusteredLayerEdgePredicate();
  AbstractEdge res=sourceNode.getEdgesOutTree().getItem(targetNode.getNumber());
  if (!edgePredicate.evaluate(res)) {
    res=null;
  }
  return res;
}",0.9565217391304348
143145,"@Override public HierarchicalDirectedGraphImpl copy(Dhns dhns,GraphStructure structure,View view){
  return new HierarchicalDirectedGraphImpl(dhns,structure);
}","@Override public HierarchicalDirectedGraphImplFiltered copy(Dhns dhns,GraphStructure structure,View view){
  return new HierarchicalDirectedGraphImplFiltered(dhns,structure,view);
}",0.93841642228739
143146,"public ImmutableTreeNode wrap(AbstractNodeIterator iterator){
  nodeTree=new SimpleAVLTree();
  TreeNodeImpl root=new TreeNodeImpl(treeStructure.getRoot());
  nodeTree.add(root);
  for (; iterator.hasNext(); ) {
    AbstractNode node=iterator.next();
    TreeNodeImpl n=new TreeNodeImpl(node);
    if (node.parent != null) {
      TreeNodeImpl parent=(TreeNodeImpl)nodeTree.get(node.parent.getNumber());
      n.parent=parent;
      parent.children.add(n);
    }
    nodeTree.add(n);
  }
  for (  AVLItem item : nodeTree) {
    TreeNodeImpl node=(TreeNodeImpl)item;
    node.toArray();
  }
  return root;
}","public ImmutableTreeNode wrap(AbstractNodeIterator iterator){
  nodeTree=new SimpleAVLTree();
  TreeNodeImpl root=new TreeNodeImpl(treeStructure.getRoot());
  nodeTree.add(root);
  for (; iterator.hasNext(); ) {
    AbstractNode node=iterator.next();
    TreeNodeImpl n=new TreeNodeImpl(node);
    if (node.parent != null) {
      TreeNodeImpl parent=(TreeNodeImpl)nodeTree.get(node.parent.getNumber());
      if (parent != null) {
        n.parent=parent;
        parent.children.add(n);
      }
 else {
        n.parent=root;
        root.children.add(n);
      }
    }
    nodeTree.add(n);
  }
  for (  AVLItem item : nodeTree) {
    TreeNodeImpl node=(TreeNodeImpl)item;
    node.toArray();
  }
  return root;
}",0.8917486752460257
143147,"private ViewNodeTree createViewNodeTree(NodePredicate predicate){
  ViewNodeTree viewNodeTree=new ViewNodeTree();
  TreeIterator treeIterator=new TreeIterator(graphStructure.getStructure(),false,(Predicate)predicate);
  for (; treeIterator.hasNext(); ) {
    AbstractNode node=treeIterator.next();
    viewNodeTree.add(node);
  }
  return viewNodeTree;
}","private ViewNodeTree createViewNodeTree(Predicate<AbstractNode> predicate){
  ViewNodeTree viewNodeTree=new ViewNodeTree();
  TreeIterator treeIterator=new TreeIterator(graphStructure.getStructure(),false,predicate);
  for (; treeIterator.hasNext(); ) {
    AbstractNode node=treeIterator.next();
    viewNodeTree.add(node);
  }
  return viewNodeTree;
}",0.958981612446959
143148,"public void filter(Predicate predicate){
  if (hierarchyLayerNodeTree == null) {
    NodePredicate nodePredicate=(NodePredicate)Tautology.instance;
    if (predicate instanceof NodePredicate) {
      nodePredicate=(NodePredicate)predicate;
    }
    hierarchyLayerNodeTree=createViewNodeTree(nodePredicate);
    Predicate<AbstractEdge> edgePredicate=Tautology.instance;
    if (predicate instanceof EdgePredicate) {
      edgePredicate=predicate;
    }
    hierarchyLayerEdgeTree=createViewEdgeTree(edgePredicate,hierarchyLayerNodeTree);
    hierarchyLayerNodeTreePredicate=new HierarchyLayerNodePredicate();
    hierarchyLayerEdgeTreePredicate=new HierarchyLayerEdgePredicate();
  }
 else {
    if (predicate instanceof NodePredicate) {
      filterViewNodeTree(hierarchyLayerNodeTree,(NodePredicate)predicate);
    }
 else {
      filterViewEdgeTree(hierarchyLayerEdgeTree,(EdgePredicate)predicate);
    }
  }
}","public void filter(Predicate predicate){
  if (hierarchyLayerNodeTree == null) {
    Predicate<AbstractNode> nodePredicate=Tautology.instance;
    if (predicate instanceof NodePredicate) {
      nodePredicate=predicate;
    }
    hierarchyLayerNodeTree=createViewNodeTree(nodePredicate);
    Predicate<AbstractEdge> edgePredicate=Tautology.instance;
    if (predicate instanceof EdgePredicate) {
      edgePredicate=predicate;
    }
    hierarchyLayerEdgeTree=createViewEdgeTree(edgePredicate,hierarchyLayerNodeTree);
    hierarchyLayerNodeTreePredicate=new HierarchyLayerNodePredicate();
    hierarchyLayerEdgeTreePredicate=new HierarchyLayerEdgePredicate();
  }
 else {
    if (predicate instanceof NodePredicate) {
      filterViewNodeTree(hierarchyLayerNodeTree,(NodePredicate)predicate);
    }
 else {
      filterViewEdgeTree(hierarchyLayerEdgeTree,(EdgePredicate)predicate);
    }
  }
}",0.7596899224806202
143149,"@Test public void testMetaEdges(){
  Dhns dhns=new Dhns(new DhnsGraphController(),null);
  GraphStructure graphStructure=dhns.getGraphStructure();
  HierarchicalGraph graph=dhns.getHierarchicalDirectedGraph();
  TreeStructure treeStructure=graphStructure.getStructure();
  GraphFactoryImpl factoryImpl=dhns.factory();
  AbstractNode na=factoryImpl.newNode();
  na.getNodeData().setLabel(""String_Node_Str"");
  AbstractNode nb=factoryImpl.newNode();
  nb.getNodeData().setLabel(""String_Node_Str"");
  AbstractNode nc=factoryImpl.newNode();
  nc.getNodeData().setLabel(""String_Node_Str"");
  AbstractNode nd=factoryImpl.newNode();
  nd.getNodeData().setLabel(""String_Node_Str"");
  AbstractNode ne=factoryImpl.newNode();
  ne.getNodeData().setLabel(""String_Node_Str"");
  AbstractNode nf=factoryImpl.newNode();
  nf.getNodeData().setLabel(""String_Node_Str"");
  AbstractNode ng=factoryImpl.newNode();
  ng.getNodeData().setLabel(""String_Node_Str"");
  treeStructure.insertAsChild(na,treeStructure.getRoot());
  treeStructure.insertAsChild(nb,na);
  treeStructure.insertAsChild(ne,na);
  treeStructure.insertAsChild(nc,nb);
  treeStructure.insertAsChild(nd,nb);
  treeStructure.insertAsChild(nf,ne);
  treeStructure.insertAsChild(ng,ne);
  nb.setEnabled(true);
  ne.setEnabled(true);
  AbstractEdge ebe=factoryImpl.newEdge(nb,ne);
  AbstractEdge ecd=factoryImpl.newEdge(nc,nd);
  AbstractEdge egb=factoryImpl.newEdge(ng,nb);
  AbstractEdge efa=factoryImpl.newEdge(nf,na);
  graph.addEdge(ebe);
  graph.addEdge(ecd);
  graph.addEdge(egb);
  graph.addEdge(efa);
  treeStructure.showTreeAsTable();
  Edge[] actual=graph.getMetaEdges().toArray();
  for (int i=0; i < actual.length; i++) {
    System.out.println(actual[i].getSource().getNodeData().getLabel() + ""String_Node_Str"" + actual[i].getTarget().getNodeData().getLabel());
  }
  graph=dhns.getHierarchicalDirectedGraphVisible();
  ((ViewImpl)graph.getView()).checkUpdate();
  actual=graph.getMetaEdges().toArray();
  for (int i=0; i < actual.length; i++) {
    System.out.println(actual[i].getSource().getNodeData().getLabel() + ""String_Node_Str"" + actual[i].getTarget().getNodeData().getLabel());
  }
}","@Test public void testMetaEdges(){
  Dhns dhns=new Dhns(new DhnsGraphController(),null);
  GraphStructure graphStructure=dhns.getGraphStructure();
  HierarchicalGraph graph=dhns.getHierarchicalDirectedGraph();
  TreeStructure treeStructure=graphStructure.getStructure();
  GraphFactoryImpl factoryImpl=dhns.factory();
  AbstractNode na=factoryImpl.newNode();
  na.getNodeData().setLabel(""String_Node_Str"");
  AbstractNode nb=factoryImpl.newNode();
  nb.getNodeData().setLabel(""String_Node_Str"");
  AbstractNode nc=factoryImpl.newNode();
  nc.getNodeData().setLabel(""String_Node_Str"");
  AbstractNode nd=factoryImpl.newNode();
  nd.getNodeData().setLabel(""String_Node_Str"");
  AbstractNode ne=factoryImpl.newNode();
  ne.getNodeData().setLabel(""String_Node_Str"");
  AbstractNode nf=factoryImpl.newNode();
  nf.getNodeData().setLabel(""String_Node_Str"");
  AbstractNode ng=factoryImpl.newNode();
  ng.getNodeData().setLabel(""String_Node_Str"");
  treeStructure.insertAsChild(na,treeStructure.getRoot());
  treeStructure.insertAsChild(nb,na);
  treeStructure.insertAsChild(ne,na);
  treeStructure.insertAsChild(nc,nb);
  treeStructure.insertAsChild(nd,nb);
  treeStructure.insertAsChild(nf,ne);
  treeStructure.insertAsChild(ng,ne);
  nb.setEnabled(true);
  ne.setEnabled(true);
  AbstractEdge ebe=factoryImpl.newEdge(nb,ne);
  AbstractEdge ecd=factoryImpl.newEdge(nc,nd);
  AbstractEdge egb=factoryImpl.newEdge(ng,nb);
  AbstractEdge efa=factoryImpl.newEdge(nf,na);
  graph.addEdge(ebe);
  graph.addEdge(ecd);
  graph.addEdge(egb);
  graph.addEdge(efa);
  Edge[] actual=graph.getMetaEdges().toArray();
  for (int i=0; i < actual.length; i++) {
    System.out.println(actual[i].getSource().getNodeData().getLabel() + ""String_Node_Str"" + actual[i].getTarget().getNodeData().getLabel());
  }
  graph=dhns.getHierarchicalDirectedGraphVisible();
  ((ViewImpl)graph.getView()).checkUpdate();
  actual=graph.getMetaEdges().toArray();
  for (int i=0; i < actual.length; i++) {
    System.out.println(actual[i].getSource().getNodeData().getLabel() + ""String_Node_Str"" + actual[i].getTarget().getNodeData().getLabel());
  }
}",0.9917782475922012
143150,"@Before public void setUp(){
  DhnsGraphController controller=new DhnsGraphController();
  dhnsGlobal=new Dhns(controller,null);
  graphGlobal=new HierarchicalDirectedGraphImpl(dhnsGlobal,dhnsGlobal.getGraphStructure());
  nodeMap=new HashMap<String,Node>();
  edgeMap=new HashMap<String,Edge>();
  TreeStructure treeStructure=dhnsGlobal.getGraphStructure().getStructure();
  GraphFactoryImpl factory=dhnsGlobal.factory();
  for (int i=0; i < 10; i++) {
    Node node=factory.newNode();
    node.getNodeData().setLabel(""String_Node_Str"" + i);
    graphGlobal.addNode(node);
    nodeMap.put(node.getNodeData().getLabel(),node);
  }
  Node node0=nodeMap.get(""String_Node_Str"");
  Node node1=nodeMap.get(""String_Node_Str"");
  Node node2=nodeMap.get(""String_Node_Str"");
  Node node3=nodeMap.get(""String_Node_Str"");
  Node node4=nodeMap.get(""String_Node_Str"");
  Node node5=nodeMap.get(""String_Node_Str"");
  Node node6=nodeMap.get(""String_Node_Str"");
  Node node7=nodeMap.get(""String_Node_Str"");
  Node node8=nodeMap.get(""String_Node_Str"");
  AbstractEdge edge1=factory.newEdge(node4,node5,1f,true);
  AbstractEdge edge2=factory.newEdge(node5,node6,4f,true);
  AbstractEdge edge3=factory.newEdge(node6,node5,3f,true);
  AbstractEdge edge4=factory.newEdge(node7,node7,5f,true);
  AbstractEdge edge5=factory.newEdge(node4,node4,2f,true);
  AbstractEdge edge6=factory.newEdge(node2,node1,1f,true);
  AbstractEdge edge7=factory.newEdge(node2,node3,10f,true);
  AbstractEdge edge8=factory.newEdge(node2,node5,12f,true);
  graphGlobal.addEdge(edge1);
  graphGlobal.addEdge(edge2);
  graphGlobal.addEdge(edge3);
  graphGlobal.addEdge(edge4);
  graphGlobal.addEdge(edge5);
  graphGlobal.addEdge(edge6);
  graphGlobal.addEdge(edge7);
  graphGlobal.addEdge(edge8);
  edgeMap.put(""String_Node_Str"",edge1);
  edgeMap.put(""String_Node_Str"",edge2);
  edgeMap.put(""String_Node_Str"",edge3);
  edgeMap.put(""String_Node_Str"",edge4);
  edgeMap.put(""String_Node_Str"",edge5);
  edgeMap.put(""String_Node_Str"",edge6);
  edgeMap.put(""String_Node_Str"",edge7);
  edgeMap.put(""String_Node_Str"",edge8);
}","@Before public void setUp(){
  DhnsGraphController controller=new DhnsGraphController();
  dhnsGlobal=new Dhns(controller,null);
  graphGlobal=new HierarchicalDirectedGraphImplFiltered(dhnsGlobal,dhnsGlobal.getGraphStructure(),dhnsGlobal.getViewManager().getVisibleView());
  nodeMap=new HashMap<String,Node>();
  edgeMap=new HashMap<String,Edge>();
  TreeStructure treeStructure=dhnsGlobal.getGraphStructure().getStructure();
  GraphFactoryImpl factory=dhnsGlobal.factory();
  for (int i=0; i < 10; i++) {
    Node node=factory.newNode();
    node.getNodeData().setLabel(""String_Node_Str"" + i);
    graphGlobal.addNode(node);
    nodeMap.put(node.getNodeData().getLabel(),node);
  }
  Node node0=nodeMap.get(""String_Node_Str"");
  Node node1=nodeMap.get(""String_Node_Str"");
  Node node2=nodeMap.get(""String_Node_Str"");
  Node node3=nodeMap.get(""String_Node_Str"");
  Node node4=nodeMap.get(""String_Node_Str"");
  Node node5=nodeMap.get(""String_Node_Str"");
  Node node6=nodeMap.get(""String_Node_Str"");
  Node node7=nodeMap.get(""String_Node_Str"");
  Node node8=nodeMap.get(""String_Node_Str"");
  AbstractEdge edge1=factory.newEdge(node4,node5,1f,true);
  AbstractEdge edge2=factory.newEdge(node5,node6,4f,true);
  AbstractEdge edge3=factory.newEdge(node6,node5,3f,true);
  AbstractEdge edge4=factory.newEdge(node7,node7,5f,true);
  AbstractEdge edge5=factory.newEdge(node4,node4,2f,true);
  AbstractEdge edge6=factory.newEdge(node2,node1,1f,true);
  AbstractEdge edge7=factory.newEdge(node2,node3,10f,true);
  AbstractEdge edge8=factory.newEdge(node2,node5,12f,true);
  graphGlobal.addEdge(edge1);
  graphGlobal.addEdge(edge2);
  graphGlobal.addEdge(edge3);
  graphGlobal.addEdge(edge4);
  graphGlobal.addEdge(edge5);
  graphGlobal.addEdge(edge6);
  graphGlobal.addEdge(edge7);
  graphGlobal.addEdge(edge8);
  edgeMap.put(""String_Node_Str"",edge1);
  edgeMap.put(""String_Node_Str"",edge2);
  edgeMap.put(""String_Node_Str"",edge3);
  edgeMap.put(""String_Node_Str"",edge4);
  edgeMap.put(""String_Node_Str"",edge5);
  edgeMap.put(""String_Node_Str"",edge6);
  edgeMap.put(""String_Node_Str"",edge7);
  edgeMap.put(""String_Node_Str"",edge8);
}",0.9873659117997616
143151,"@Test public void testFiltering(){
  graphGlobal.getView().addPredicate(new DegreePredicate(3,5));
  Node[] actual=graphGlobal.getNodes().toArray();
  for (int i=0; i < actual.length; i++) {
    System.out.println(actual[i].getId());
  }
}","@Test public void testFiltering(){
}",0.2618181818181818
143152,"private void updateEdges(){
  Modeler edgeInit=engine.getModelClasses()[AbstractEngine.CLASS_EDGE].getCurrentModeler();
  Modeler arrowInit=engine.getModelClasses()[AbstractEngine.CLASS_ARROW].getCurrentModeler();
  EdgeIterable edgeIterable;
  edgeIterable=graph.getEdges();
  for (  Edge edge : edgeIterable) {
    Model obj=edge.getEdgeData().getModel();
    if (obj == null) {
      obj=edgeInit.initModel(edge.getEdgeData());
      engine.addObject(AbstractEngine.CLASS_EDGE,(ModelImpl)obj);
      if (vizConfig.isShowArrows() && !edge.isSelfLoop()) {
        ModelImpl arrowObj=arrowInit.initModel(edge.getEdgeData());
        engine.addObject(AbstractEngine.CLASS_ARROW,arrowObj);
        arrowObj.setCacheMarker(cacheMarker);
        ((Edge2dModel)obj).setArrow(arrowObj);
      }
    }
 else     if (!obj.isValid()) {
      engine.addObject(AbstractEngine.CLASS_EDGE,(ModelImpl)obj);
      if (vizConfig.isShowArrows() && !edge.isSelfLoop()) {
        ModelImpl arrowObj=((Edge2dModel)obj).getArrow();
        engine.addObject(AbstractEngine.CLASS_ARROW,arrowObj);
        arrowObj.setCacheMarker(cacheMarker);
      }
    }
    obj.setCacheMarker(cacheMarker);
  }
}","private void updateEdges(){
}",0.0481327800829875
143153,"public void setInited(){
  if (!inited) {
    inited=true;
    if (requestAnimation) {
      graphDrawable.display();
      startAnimating();
      requestAnimation=false;
    }
  }
 else {
    dataBridge.reset();
    textManager.initArchitecture();
  }
}","public void setInited(){
  if (!inited) {
    inited=true;
    if (requestAnimation) {
      startAnimating();
      requestAnimation=false;
    }
  }
 else {
    dataBridge.reset();
    textManager.initArchitecture();
  }
}",0.9352818371607516
143154,"@Override public void updateObjectsPosition(){
  int[] classIds=new int[modelClasses.length];
  int i=0;
  for (  ModelClass objClass : modelClasses) {
    if (objClass.isEnabled()) {
      classIds[i]=objClass.getClassId();
    }
 else {
      classIds[i]=-1;
    }
    i++;
  }
  octree.updateObjectsPosition(classIds);
}","@Override public void updateObjectsPosition(){
  for (  ModelClass objClass : modelClasses) {
    if (objClass.isEnabled()) {
      octree.updateObjectsPosition(objClass.getClassId());
    }
  }
}",0.6589595375722543
143155,"@Override public void display(GL gl,GLU glu){
  this.gl=gl;
  this.glu=glu;
  boolean execMouseClick=mouseClick.getAndSet(false);
  boolean execMouseMove=mouseMoved.getAndSet(false);
  boolean execDrag=drag.get() || startDrag.get() || stopDrag.get();
  int pool1Permit=0;
  int pool2Permit=0;
  if (execMouseMove) {
    pool2Permit++;
  }
 else   if (execDrag) {
    pool2Permit++;
  }
  if (execMouseClick) {
    pool2Permit++;
  }
  if (cameraMoved.getAndSet(false)) {
    graphDrawable.setCameraPosition(gl,glu);
    pool1Permit=modelSegments.size();
    engine.getOctree().updateVisibleOctant(gl);
    for (int i=0; i < modelSegments.size(); i++) {
      Runnable r=modelSegments.get(i);
      pool1.execute(r);
    }
  }
  if (execMouseMove) {
    engine.updateSelection(gl,glu);
    pool2.execute(selectionSegment);
  }
 else   if (execDrag) {
    pool2.execute(dragSegment);
  }
  if (execMouseClick) {
    pool2.execute(mouseClickSegment);
  }
  try {
    if (pool1Permit > 0) {
      pool1Semaphore.acquire(pool1Permit);
    }
  }
 catch (  Exception e) {
    e.printStackTrace();
  }
  engine.beforeDisplay(gl,glu);
  engine.display(gl,glu);
  engine.afterDisplay(gl,glu);
  try {
    if (pool2Permit > 0) {
      pool2Semaphore.acquire(pool2Permit);
    }
  }
 catch (  Exception e) {
    e.printStackTrace();
  }
}","@Override public void display(GL gl,GLU glu){
  if (simpleFPSAnimator.isDisplayCall()) {
    this.gl=gl;
    this.glu=glu;
    boolean execMouseClick=mouseClick.getAndSet(false);
    boolean execMouseMove=mouseMoved.getAndSet(false);
    boolean execDrag=drag.get() || startDrag.get() || stopDrag.get();
    int pool1Permit=0;
    int pool2Permit=0;
    if (execMouseMove) {
      pool2Permit++;
    }
 else     if (execDrag) {
      pool2Permit++;
    }
    if (execMouseClick) {
      pool2Permit++;
    }
    if (cameraMoved.getAndSet(false)) {
      graphDrawable.setCameraPosition(gl,glu);
      pool1Permit=modelSegments.size();
      engine.getOctree().updateVisibleOctant(gl);
      for (int i=0; i < modelSegments.size(); i++) {
        Runnable r=modelSegments.get(i);
        pool1.execute(r);
      }
    }
    if (execMouseMove) {
      engine.updateSelection(gl,glu);
      pool2.execute(selectionSegment);
    }
 else     if (execDrag) {
      pool2.execute(dragSegment);
    }
    if (execMouseClick) {
      pool2.execute(mouseClickSegment);
    }
    try {
      if (pool1Permit > 0) {
        pool1Semaphore.acquire(pool1Permit);
      }
    }
 catch (    Exception e) {
      e.printStackTrace();
    }
    engine.beforeDisplay(gl,glu);
    engine.display(gl,glu);
    engine.afterDisplay(gl,glu);
    try {
      if (pool2Permit > 0) {
        pool2Semaphore.acquire(pool2Permit);
      }
    }
 catch (    Exception e) {
      e.printStackTrace();
    }
  }
}",0.9184182401140008
143156,"@Override public void display(GL gl,GLU glu,VizModel vizModel){
  if (!selected && vizModel.isHideNonSelectedEdges()) {
    return;
  }
  NodeData nodeFrom=edge.getSource();
  NodeData nodeTo=edge.getTarget();
  float weight=edge.getEdge().getWeight();
  float arrowWidth=ARROW_WIDTH * weight * 2f;
  float arrowHeight=ARROW_HEIGHT * weight * 2f;
  float x2=nodeTo.x();
  float y2=nodeTo.y();
  float x1=nodeFrom.x();
  float y1=nodeFrom.y();
  Vec2f edgeVector=new Vec2f(x2 - x1,y2 - y1);
  edgeVector.normalize();
  double angle=Math.atan2(y2 - y1,x2 - x1);
  float collisionDistance=((ModelImpl)nodeTo.getModel()).getCollisionDistance(angle);
  float targetX=x2 - edgeVector.x() * collisionDistance;
  float targetY=y2 - edgeVector.y() * collisionDistance;
  float baseX=targetX - edgeVector.x() * arrowHeight * 2f;
  float baseY=targetY - edgeVector.y() * arrowHeight * 2f;
  float sideVectorX=y1 - y2;
  float sideVectorY=x2 - x1;
  float norm=(float)Math.sqrt(sideVectorX * sideVectorX + sideVectorY * sideVectorY);
  sideVectorX/=norm;
  sideVectorY/=norm;
  if (!selected) {
    float r;
    float g;
    float b;
    float a;
    if (vizModel.isEdgeHasUniColor()) {
      float[] uni=vizModel.getEdgeUniColor();
      r=uni[0];
      g=uni[1];
      b=uni[2];
      a=uni[3];
    }
 else {
      r=edge.r();
      if (r == -1f) {
        NodeData source=edge.getSource();
        r=source.r();
        g=source.g();
        b=source.b();
        a=edge.alpha();
      }
 else {
        g=edge.g();
        b=edge.b();
        a=edge.alpha();
      }
    }
    if (vizModel.getConfig().isLightenNonSelected()) {
      float lightColorFactor=vizModel.getConfig().getLightenNonSelectedFactor();
      a=a - (a - 0.1f) * lightColorFactor;
      gl.glColor4f(r,g,b,a);
    }
 else {
      gl.glColor4f(r,g,b,a);
    }
  }
 else {
    float r=0f;
    float g=0f;
    float b=0f;
    if (vizModel.isEdgeSelectionColor()) {
      ModelImpl m1=(ModelImpl)nodeFrom.getModel();
      ModelImpl m2=(ModelImpl)nodeTo.getModel();
      if (m1.isSelected() && m2.isSelected()) {
        float[] both=vizModel.getEdgeBothSelectionColor();
        r=both[0];
        g=both[1];
        b=both[2];
      }
 else       if (m1.isSelected()) {
        float[] out=vizModel.getEdgeOutSelectionColor();
        r=out[0];
        g=out[1];
        b=out[2];
      }
 else       if (m2.isSelected()) {
        float[] in=vizModel.getEdgeInSelectionColor();
        r=in[0];
        g=in[1];
        b=in[2];
      }
    }
 else {
      r=edge.r();
      if (r == -1f) {
        NodeData source=edge.getSource();
        r=0.498f * source.r();
        g=0.498f * source.g();
        b=0.498f * source.b();
      }
 else {
        g=0.498f * edge.g();
        b=0.498f * edge.b();
        r*=0.498f;
      }
    }
    gl.glColor4f(r,g,b,1f);
  }
  gl.glVertex2d(baseX + sideVectorX * arrowWidth,baseY + sideVectorY * arrowWidth);
  gl.glVertex2d(baseX - sideVectorX * arrowWidth,baseY - sideVectorY * arrowWidth);
  gl.glVertex2d(targetX,targetY);
}","@Override public void display(GL gl,GLU glu,VizModel vizModel){
  if (!selected && vizModel.isHideNonSelectedEdges()) {
    return;
  }
  NodeData nodeFrom=edge.getSource();
  NodeData nodeTo=edge.getTarget();
  float weight=edge.getEdge().getWeight();
  float arrowWidth=ARROW_WIDTH * weight * 2f;
  float arrowHeight=ARROW_HEIGHT * weight * 2f;
  float x2=nodeTo.x();
  float y2=nodeTo.y();
  float x1=nodeFrom.x();
  float y1=nodeFrom.y();
  Vec2f edgeVector=new Vec2f(x2 - x1,y2 - y1);
  edgeVector.normalize();
  double angle=Math.atan2(y2 - y1,x2 - x1);
  if (nodeTo.getModel() == null) {
    Logger.getLogger(Arrow2dModel.class.getName()).log(Level.INFO,""String_Node_Str"" + this + ""String_Node_Str""+ edge.getModel());
  }
  float collisionDistance=((ModelImpl)nodeTo.getModel()).getCollisionDistance(angle);
  float targetX=x2 - edgeVector.x() * collisionDistance;
  float targetY=y2 - edgeVector.y() * collisionDistance;
  float baseX=targetX - edgeVector.x() * arrowHeight * 2f;
  float baseY=targetY - edgeVector.y() * arrowHeight * 2f;
  float sideVectorX=y1 - y2;
  float sideVectorY=x2 - x1;
  float norm=(float)Math.sqrt(sideVectorX * sideVectorX + sideVectorY * sideVectorY);
  sideVectorX/=norm;
  sideVectorY/=norm;
  if (!selected) {
    float r;
    float g;
    float b;
    float a;
    if (vizModel.isEdgeHasUniColor()) {
      float[] uni=vizModel.getEdgeUniColor();
      r=uni[0];
      g=uni[1];
      b=uni[2];
      a=uni[3];
    }
 else {
      r=edge.r();
      if (r == -1f) {
        NodeData source=edge.getSource();
        r=source.r();
        g=source.g();
        b=source.b();
        a=edge.alpha();
      }
 else {
        g=edge.g();
        b=edge.b();
        a=edge.alpha();
      }
    }
    if (vizModel.getConfig().isLightenNonSelected()) {
      float lightColorFactor=vizModel.getConfig().getLightenNonSelectedFactor();
      a=a - (a - 0.1f) * lightColorFactor;
      gl.glColor4f(r,g,b,a);
    }
 else {
      gl.glColor4f(r,g,b,a);
    }
  }
 else {
    float r=0f;
    float g=0f;
    float b=0f;
    if (vizModel.isEdgeSelectionColor()) {
      ModelImpl m1=(ModelImpl)nodeFrom.getModel();
      ModelImpl m2=(ModelImpl)nodeTo.getModel();
      if (m1.isSelected() && m2.isSelected()) {
        float[] both=vizModel.getEdgeBothSelectionColor();
        r=both[0];
        g=both[1];
        b=both[2];
      }
 else       if (m1.isSelected()) {
        float[] out=vizModel.getEdgeOutSelectionColor();
        r=out[0];
        g=out[1];
        b=out[2];
      }
 else       if (m2.isSelected()) {
        float[] in=vizModel.getEdgeInSelectionColor();
        r=in[0];
        g=in[1];
        b=in[2];
      }
    }
 else {
      r=edge.r();
      if (r == -1f) {
        NodeData source=edge.getSource();
        r=0.498f * source.r();
        g=0.498f * source.g();
        b=0.498f * source.b();
      }
 else {
        g=0.498f * edge.g();
        b=0.498f * edge.b();
        r*=0.498f;
      }
    }
    gl.glColor4f(r,g,b,1f);
  }
  gl.glVertex2d(baseX + sideVectorX * arrowWidth,baseY + sideVectorY * arrowWidth);
  gl.glVertex2d(baseX - sideVectorX * arrowWidth,baseY - sideVectorY * arrowWidth);
  gl.glVertex2d(targetX,targetY);
}",0.9728775477451452
143157,"@Override public Octant[] getOctants(){
  Octant[] oc=((ModelImpl)obj.getModel()).getOctants();
  if (oc[0] == null) {
    oc=this.octants;
  }
  return oc;
}","@Override public Octant[] getOctants(){
  if (obj.getModel() == null) {
    return this.octants;
  }
  Octant[] oc=((ModelImpl)obj.getModel()).getOctants();
  if (oc[0] == null) {
    oc=this.octants;
  }
  return oc;
}",0.8381962864721485
143158,"public void updateObjectsPosition(int[] classIDs){
  Octant[] leavesCopy=leaves.toArray(new Octant[0]);
  for (int i=0; i < classIDs.length; i++) {
    int classID=classIDs[i];
    if (classID == -1) {
      continue;
    }
    for (    Octant o : leavesCopy) {
      if (o.isRequiringUpdatePosition()) {
        for (updatePositionIterator.setNode(o.getTree(classID)); updatePositionIterator.hasNext(); ) {
          ModelImpl obj=updatePositionIterator.next();
          if (!obj.isInOctreeLeaf(o)) {
            o.removeObject(classID,obj);
            obj.resetOctant();
            addObject(classID,obj);
          }
        }
      }
    }
  }
}","public void updateObjectsPosition(int classID){
  for (  Octant o : leaves) {
    if (o.isRequiringUpdatePosition()) {
      for (updatePositionIterator.setNode(o.getTree(classID)); updatePositionIterator.hasNext(); ) {
        ModelImpl obj=updatePositionIterator.next();
        if (!obj.isInOctreeLeaf(o)) {
          o.removeObject(classID,obj);
          obj.resetOctant();
          addObject(classID,obj);
        }
      }
    }
  }
}",0.7422303473491774
143159,"public void cleanDeletedObjects(int classID){
  for (  Octant o : leaves) {
    for (cleanObjectsIterator.setNode(o.getTree(classID)); cleanObjectsIterator.hasNext(); ) {
      ModelImpl obj=cleanObjectsIterator.next();
      if (!obj.isCacheMatching(cacheMarker)) {
        removeObject(classID,obj);
        obj.resetOctant();
        if (vizController.getVizConfig().isCleanDeletedModels()) {
          obj.getObj().setModel(null);
        }
      }
    }
  }
}","public void cleanDeletedObjects(int classID){
  for (  Octant o : leaves) {
    for (cleanObjectsIterator.setNode(o.getTree(classID)); cleanObjectsIterator.hasNext(); ) {
      ModelImpl obj=cleanObjectsIterator.next();
      if (!obj.isCacheMatching(cacheMarker)) {
        removeObject(classID,obj);
        obj.resetOctant();
        if (vizController.getVizConfig().isCleanDeletedModels()) {
          obj.cleanModel();
        }
      }
    }
  }
}",0.9770992366412212
143160,"public void resetObjectClass(int classID){
  for (  Octant o : leaves) {
    ParamAVLTree<ModelImpl> tree=o.getTree(classID);
    for (cleanObjectsIterator.setNode(tree); cleanObjectsIterator.hasNext(); ) {
      ModelImpl obj=cleanObjectsIterator.next();
      obj.resetOctant();
      obj.getObj().setModel(null);
      obj.destroy();
    }
    o.clear(classID);
  }
}","public void resetObjectClass(int classID){
  for (  Octant o : leaves) {
    ParamAVLTree<ModelImpl> tree=o.getTree(classID);
    for (cleanObjectsIterator.setNode(tree); cleanObjectsIterator.hasNext(); ) {
      ModelImpl obj=cleanObjectsIterator.next();
      obj.resetOctant();
      obj.cleanModel();
      obj.destroy();
    }
    o.clear(classID);
  }
}",0.97119341563786
143161,"private void defaultNodeColumns(Graph graph){
  NodeColumnsGDF labelColumn=new NodeColumnsGDF(""String_Node_Str""){
    @Override public boolean isEnable(){
      return true;
    }
    @Override public void writeData(    StringBuilder builder,    Node node){
      String label=node.getNodeData().getLabel();
      if (label != null) {
        builder.append(label);
      }
    }
  }
;
  NodeColumnsGDF visibleColumn=new NodeColumnsGDF(""String_Node_Str"",DataTypeGDF.BOOLEAN){
    @Override public boolean isEnable(){
      return true;
    }
    @Override public void writeData(    StringBuilder builder,    Node node){
      builder.append(true);
    }
  }
;
  NodeColumnsGDF labelVisibleColumn=new NodeColumnsGDF(""String_Node_Str"",DataTypeGDF.BOOLEAN){
    @Override public boolean isEnable(){
      return true;
    }
    @Override public void writeData(    StringBuilder builder,    Node node){
      builder.append(node.getNodeData().isLabelVisible());
    }
  }
;
  NodeColumnsGDF widthColumn=new NodeColumnsGDF(""String_Node_Str"",DataTypeGDF.DOUBLE){
    @Override public boolean isEnable(){
      return true;
    }
    @Override public void writeData(    StringBuilder builder,    Node node){
      float size=node.getNodeData().getSize();
      if (normalize) {
        size=(size - minSize) / (maxSize - minSize);
      }
      builder.append(size);
    }
  }
;
  NodeColumnsGDF heightColumn=new NodeColumnsGDF(""String_Node_Str"",DataTypeGDF.DOUBLE){
    @Override public boolean isEnable(){
      return true;
    }
    @Override public void writeData(    StringBuilder builder,    Node node){
      float size=node.getNodeData().getSize();
      if (normalize) {
        size=(size - minSize) / (maxSize - minSize);
      }
      builder.append(size);
    }
  }
;
  NodeColumnsGDF xColumn=new NodeColumnsGDF(""String_Node_Str"",DataTypeGDF.DOUBLE){
    @Override public boolean isEnable(){
      return exportPosition;
    }
    @Override public void writeData(    StringBuilder builder,    Node node){
      float x=node.getNodeData().x();
      if (normalize) {
        x=(x - minX) / (maxX - minX);
      }
      builder.append(x);
    }
  }
;
  NodeColumnsGDF yColumn=new NodeColumnsGDF(""String_Node_Str"",DataTypeGDF.DOUBLE){
    @Override public boolean isEnable(){
      return exportPosition;
    }
    @Override public void writeData(    StringBuilder builder,    Node node){
      float y=node.getNodeData().y();
      if (normalize) {
        y=(y - minY) / (maxY - minY);
      }
      builder.append(y);
    }
  }
;
  NodeColumnsGDF colorColumn=new NodeColumnsGDF(""String_Node_Str""){
    @Override public boolean isEnable(){
      return exportColors;
    }
    @Override public void writeData(    StringBuilder builder,    Node node){
      builder.append(""String_Node_Str"");
      builder.append((int)(node.getNodeData().r() * 255f));
      builder.append(""String_Node_Str"");
      builder.append((int)(node.getNodeData().g() * 255f));
      builder.append(""String_Node_Str"");
      builder.append((int)(node.getNodeData().b() * 255f));
      builder.append(""String_Node_Str"");
    }
  }
;
  NodeColumnsGDF fixedColumn=new NodeColumnsGDF(""String_Node_Str"",DataTypeGDF.BOOLEAN){
    @Override public boolean isEnable(){
      return true;
    }
    @Override public void writeData(    StringBuilder builder,    Node node){
      builder.append(node.getNodeData().isFixed());
    }
  }
;
  NodeColumnsGDF styleColumn=new NodeColumnsGDF(""String_Node_Str"",DataTypeGDF.INT){
    @Override public boolean isEnable(){
      return true;
    }
    @Override public void writeData(    StringBuilder builder,    Node node){
    }
  }
;
  defaultNodeColumnsGDFs=new NodeColumnsGDF[10];
  defaultNodeColumnsGDFs[0]=labelColumn;
  defaultNodeColumnsGDFs[1]=visibleColumn;
  defaultNodeColumnsGDFs[2]=labelVisibleColumn;
  defaultNodeColumnsGDFs[3]=widthColumn;
  defaultNodeColumnsGDFs[4]=heightColumn;
  defaultNodeColumnsGDFs[5]=xColumn;
  defaultNodeColumnsGDFs[6]=yColumn;
  defaultNodeColumnsGDFs[7]=colorColumn;
  defaultNodeColumnsGDFs[8]=fixedColumn;
  defaultNodeColumnsGDFs[9]=styleColumn;
}","private void defaultNodeColumns(Graph graph){
  NodeColumnsGDF labelColumn=new NodeColumnsGDF(""String_Node_Str""){
    @Override public boolean isEnable(){
      return true;
    }
    @Override public void writeData(    StringBuilder builder,    Node node){
      String label=node.getNodeData().getLabel();
      if (label != null) {
        builder.append(label);
      }
    }
  }
;
  NodeColumnsGDF visibleColumn=new NodeColumnsGDF(""String_Node_Str"",DataTypeGDF.BOOLEAN){
    @Override public boolean isEnable(){
      return true;
    }
    @Override public void writeData(    StringBuilder builder,    Node node){
      builder.append(true);
    }
  }
;
  NodeColumnsGDF labelVisibleColumn=new NodeColumnsGDF(""String_Node_Str"",DataTypeGDF.BOOLEAN){
    @Override public boolean isEnable(){
      return true;
    }
    @Override public void writeData(    StringBuilder builder,    Node node){
      builder.append(node.getNodeData().isLabelVisible());
    }
  }
;
  NodeColumnsGDF widthColumn=new NodeColumnsGDF(""String_Node_Str"",DataTypeGDF.DOUBLE){
    @Override public boolean isEnable(){
      return true;
    }
    @Override public void writeData(    StringBuilder builder,    Node node){
      float size=node.getNodeData().getSize();
      if (normalize) {
        size=(size - minSize) / (maxSize - minSize);
      }
      builder.append(size);
    }
  }
;
  NodeColumnsGDF heightColumn=new NodeColumnsGDF(""String_Node_Str"",DataTypeGDF.DOUBLE){
    @Override public boolean isEnable(){
      return true;
    }
    @Override public void writeData(    StringBuilder builder,    Node node){
      float size=node.getNodeData().getSize();
      if (normalize) {
        size=(size - minSize) / (maxSize - minSize);
      }
      builder.append(size);
    }
  }
;
  NodeColumnsGDF xColumn=new NodeColumnsGDF(""String_Node_Str"",DataTypeGDF.DOUBLE){
    @Override public boolean isEnable(){
      return exportPosition;
    }
    @Override public void writeData(    StringBuilder builder,    Node node){
      float x=node.getNodeData().x();
      if (normalize && x != 0.0) {
        x=(x - minX) / (maxX - minX);
      }
      builder.append(x);
    }
  }
;
  NodeColumnsGDF yColumn=new NodeColumnsGDF(""String_Node_Str"",DataTypeGDF.DOUBLE){
    @Override public boolean isEnable(){
      return exportPosition;
    }
    @Override public void writeData(    StringBuilder builder,    Node node){
      float y=node.getNodeData().y();
      if (normalize && y != 0.0) {
        y=(y - minY) / (maxY - minY);
      }
      builder.append(y);
    }
  }
;
  NodeColumnsGDF colorColumn=new NodeColumnsGDF(""String_Node_Str""){
    @Override public boolean isEnable(){
      return exportColors;
    }
    @Override public void writeData(    StringBuilder builder,    Node node){
      builder.append(""String_Node_Str"");
      builder.append((int)(node.getNodeData().r() * 255f));
      builder.append(""String_Node_Str"");
      builder.append((int)(node.getNodeData().g() * 255f));
      builder.append(""String_Node_Str"");
      builder.append((int)(node.getNodeData().b() * 255f));
      builder.append(""String_Node_Str"");
    }
  }
;
  NodeColumnsGDF fixedColumn=new NodeColumnsGDF(""String_Node_Str"",DataTypeGDF.BOOLEAN){
    @Override public boolean isEnable(){
      return true;
    }
    @Override public void writeData(    StringBuilder builder,    Node node){
      builder.append(node.getNodeData().isFixed());
    }
  }
;
  NodeColumnsGDF styleColumn=new NodeColumnsGDF(""String_Node_Str"",DataTypeGDF.INT){
    @Override public boolean isEnable(){
      return true;
    }
    @Override public void writeData(    StringBuilder builder,    Node node){
    }
  }
;
  defaultNodeColumnsGDFs=new NodeColumnsGDF[10];
  defaultNodeColumnsGDFs[0]=labelColumn;
  defaultNodeColumnsGDFs[1]=visibleColumn;
  defaultNodeColumnsGDFs[2]=labelVisibleColumn;
  defaultNodeColumnsGDFs[3]=widthColumn;
  defaultNodeColumnsGDFs[4]=heightColumn;
  defaultNodeColumnsGDFs[5]=xColumn;
  defaultNodeColumnsGDFs[6]=yColumn;
  defaultNodeColumnsGDFs[7]=colorColumn;
  defaultNodeColumnsGDFs[8]=fixedColumn;
  defaultNodeColumnsGDFs[9]=styleColumn;
}",0.9970894979383944
143162,"public synchronized void mergeTable(AttributeTable table){
  for (  AttributeColumn column : table.getColumns()) {
    AttributeColumn existingCol=getColumn(column.getId(),column.getType());
    if (existingCol == null) {
      addColumn(column.getId(),column.getTitle(),column.getType(),column.getOrigin(),column.getDefaultValue());
    }
  }
}","public synchronized void mergeTable(AttributeTable table){
  for (  AttributeColumn column : table.getColumns()) {
    AttributeColumn existingCol=getColumn(column);
    if (existingCol == null) {
      addColumn(column.getId(),column.getTitle(),column.getType(),column.getOrigin(),column.getDefaultValue());
    }
  }
}",0.6075187969924812
143163,"public GraphCanvas(){
  super();
  glCanvas=new GLCanvas(getCaps());
  super.initDrawable(glCanvas);
  graphComponent=(Component)glCanvas;
  graphComponent.setCursor(Cursor.getPredefinedCursor(Cursor.WAIT_CURSOR));
  JPopupMenu.setDefaultLightWeightPopupEnabled(false);
  ToolTipManager.sharedInstance().setLightWeightPopupEnabled(false);
}","public GraphCanvas(){
  super();
  glCanvas=new GLCanvas(getCaps());
  super.initDrawable(glCanvas);
  glCanvas.setMinimumSize(new Dimension(0,0));
  graphComponent=(Component)glCanvas;
  graphComponent.setCursor(Cursor.getPredefinedCursor(Cursor.WAIT_CURSOR));
  JPopupMenu.setDefaultLightWeightPopupEnabled(false);
  ToolTipManager.sharedInstance().setLightWeightPopupEnabled(false);
}",0.9353507565337
143164,"@Override protected void reshape3DScene(GL gl){
  setCameraPosition(gl,glu);
}","@Override protected void reshape3DScene(GL gl){
  setCameraPosition(gl,glu);
  graphComponent.invalidate();
}",0.8342245989304813
143165,"private Element createNodeColors(Document document,Node n) throws Exception {
  Element colorE=document.createElement(""String_Node_Str"");
  colorE.setAttribute(""String_Node_Str"",""String_Node_Str"" + (n.getNodeData().r() * 255f));
  colorE.setAttribute(""String_Node_Str"",""String_Node_Str"" + (n.getNodeData().g() * 255f));
  colorE.setAttribute(""String_Node_Str"",""String_Node_Str"" + (n.getNodeData().b() * 255f));
  return colorE;
}","private Element createNodeColors(Document document,Node n) throws Exception {
  Element colorE=document.createElement(""String_Node_Str"");
  colorE.setAttribute(""String_Node_Str"",""String_Node_Str"" + (Math.round(n.getNodeData().r() * 255f)));
  colorE.setAttribute(""String_Node_Str"",""String_Node_Str"" + (Math.round(n.getNodeData().g() * 255f)));
  colorE.setAttribute(""String_Node_Str"",""String_Node_Str"" + (Math.round(n.getNodeData().b() * 255f)));
  return colorE;
}",0.959731543624161
143166,"private void setEdgeData(Element dataE,EdgeDraft edgeDraft,String edgeId){
  String dataKey=dataE.getAttribute(""String_Node_Str"");
  if (dataKey.isEmpty()) {
    report.logIssue(new Issue(NbBundle.getMessage(ImporterGEXF.class,""String_Node_Str"",edgeDraft),Issue.Level.SEVERE));
    return;
  }
  String dataValue=dataE.getAttribute(""String_Node_Str"");
  if (!dataValue.isEmpty()) {
    AttributeColumn column=container.getAttributeManager().getNodeClass().getAttributeColumn(dataKey);
    if (column != null) {
      try {
        Object value=column.getAttributeType().parse(dataValue);
        edgeDraft.addAttributeValue(column,value);
      }
 catch (      Exception e) {
        report.logIssue(new Issue(NbBundle.getMessage(ImporterGEXF.class,""String_Node_Str"",dataKey,edgeId,column.getTitle()),Issue.Level.SEVERE));
      }
    }
  }
}","private void setEdgeData(Element dataE,EdgeDraft edgeDraft,String edgeId){
  String dataKey=dataE.getAttribute(""String_Node_Str"");
  if (dataKey.isEmpty()) {
    report.logIssue(new Issue(NbBundle.getMessage(ImporterGEXF.class,""String_Node_Str"",edgeDraft),Issue.Level.SEVERE));
    return;
  }
  String dataValue=dataE.getAttribute(""String_Node_Str"");
  if (!dataValue.isEmpty()) {
    AttributeColumn column=container.getAttributeManager().getEdgeClass().getAttributeColumn(dataKey);
    if (column != null) {
      try {
        Object value=column.getAttributeType().parse(dataValue);
        edgeDraft.addAttributeValue(column,value);
      }
 catch (      Exception e) {
        report.logIssue(new Issue(NbBundle.getMessage(ImporterGEXF.class,""String_Node_Str"",dataKey,edgeId,column.getTitle()),Issue.Level.SEVERE));
      }
    }
  }
}",0.996437054631829
143167,"public void addEdge(EdgeDraft edgeDraft){
  if (edgeDraft == null) {
    throw new NullPointerException();
  }
  EdgeDraftImpl edgeDraftImpl=(EdgeDraftImpl)edgeDraft;
  if (edgeDraftImpl.getSource() == null) {
    String message=NbBundle.getMessage(ImportContainerImpl.class,""String_Node_Str"");
    report.logIssue(new Issue(message,Level.SEVERE));
    return;
  }
  if (edgeDraftImpl.getTarget() == null) {
    String message=NbBundle.getMessage(ImportContainerImpl.class,""String_Node_Str"");
    report.logIssue(new Issue(message,Level.SEVERE));
    return;
  }
  if (edgeDraftImpl.getSource() == edgeDraftImpl.getTarget() && !parameters.isSelfLoops()) {
    String message=NbBundle.getMessage(ImportContainerImpl.class,""String_Node_Str"");
    report.logIssue(new Issue(message,Level.SEVERE));
    return;
  }
switch (parameters.getEdgeDefault()) {
case DIRECTED:
    EdgeDraft.EdgeType type1=edgeDraftImpl.getType();
  if (type1.equals(EdgeDraft.EdgeType.UNDIRECTED)) {
    report.logIssue(new Issue(NbBundle.getMessage(ImportContainerImpl.class,""String_Node_Str""),Level.WARNING));
  }
break;
case UNDIRECTED:
EdgeDraft.EdgeType type2=edgeDraftImpl.getType();
if (type2.equals(EdgeDraft.EdgeType.DIRECTED)) {
report.logIssue(new Issue(NbBundle.getMessage(ImportContainerImpl.class,""String_Node_Str""),Level.WARNING));
}
break;
case MIXED:
break;
}
String id=edgeDraftImpl.getId();
String sourceTargetId=edgeDraftImpl.getSource().getId() + ""String_Node_Str"" + edgeDraftImpl.getTarget().getId();
if (edgeMap.containsKey(id) || edgeSourceTargetMap.containsKey(sourceTargetId)) {
if (!parameters.isParallelEdges()) {
report.logIssue(new Issue(NbBundle.getMessage(ImportContainerImpl.class,""String_Node_Str""),Level.WARNING));
return;
}
 else {
report.logIssue(new Issue(""String_Node_Str"" + id + ""String_Node_Str"",Level.INFO));
return;
}
}
edgeSourceTargetMap.put(edgeDraftImpl.getSource().getId() + ""String_Node_Str"" + edgeDraftImpl.getTarget().getId(),edgeDraftImpl);
edgeMap.put(id,edgeDraftImpl);
}","public void addEdge(EdgeDraft edgeDraft){
  if (edgeDraft == null) {
    throw new NullPointerException();
  }
  EdgeDraftImpl edgeDraftImpl=(EdgeDraftImpl)edgeDraft;
  if (edgeDraftImpl.getSource() == null) {
    String message=NbBundle.getMessage(ImportContainerImpl.class,""String_Node_Str"");
    report.logIssue(new Issue(message,Level.SEVERE));
    return;
  }
  if (edgeDraftImpl.getTarget() == null) {
    String message=NbBundle.getMessage(ImportContainerImpl.class,""String_Node_Str"");
    report.logIssue(new Issue(message,Level.SEVERE));
    return;
  }
  if (edgeDraftImpl.getSource() == edgeDraftImpl.getTarget() && !parameters.isSelfLoops()) {
    String message=NbBundle.getMessage(ImportContainerImpl.class,""String_Node_Str"");
    report.logIssue(new Issue(message,Level.SEVERE));
    return;
  }
  if (edgeDraftImpl.getType() != null) {
switch (parameters.getEdgeDefault()) {
case DIRECTED:
      EdgeDraft.EdgeType type1=edgeDraftImpl.getType();
    if (type1.equals(EdgeDraft.EdgeType.UNDIRECTED)) {
      report.logIssue(new Issue(NbBundle.getMessage(ImportContainerImpl.class,""String_Node_Str""),Level.WARNING));
    }
  break;
case UNDIRECTED:
EdgeDraft.EdgeType type2=edgeDraftImpl.getType();
if (type2.equals(EdgeDraft.EdgeType.DIRECTED)) {
report.logIssue(new Issue(NbBundle.getMessage(ImportContainerImpl.class,""String_Node_Str""),Level.WARNING));
}
break;
case MIXED:
break;
}
}
String id=edgeDraftImpl.getId();
String sourceTargetId=edgeDraftImpl.getSource().getId() + ""String_Node_Str"" + edgeDraftImpl.getTarget().getId();
if (edgeMap.containsKey(id) || edgeSourceTargetMap.containsKey(sourceTargetId)) {
if (!parameters.isParallelEdges()) {
report.logIssue(new Issue(NbBundle.getMessage(ImportContainerImpl.class,""String_Node_Str""),Level.WARNING));
return;
}
 else {
report.logIssue(new Issue(""String_Node_Str"" + id + ""String_Node_Str"",Level.INFO));
return;
}
}
edgeSourceTargetMap.put(edgeDraftImpl.getSource().getId() + ""String_Node_Str"" + edgeDraftImpl.getTarget().getId(),edgeDraftImpl);
edgeMap.put(id,edgeDraftImpl);
}",0.986903879416852
143168,"private void updateNodes(){
  Modeler nodeInit=engine.getModelClasses()[AbstractEngine.CLASS_NODE].getCurrentModeler();
  NodeIterable nodeIterable;
  if (vizConfig.isVisualizeTree()) {
    nodeIterable=graph.getHierarchyTree().getNodes();
  }
 else {
    nodeIterable=graph.getClusteredGraph().getNodes();
  }
  for (  Node node : nodeIterable) {
    if (vizConfig.isVisualizeTree()) {
      node.getNodeData().setX(node.getPre() * 5);
      node.getNodeData().setY(node.getPost() * 5);
      if (graph.getClusteredGraph().isInView(node)) {
        node.getNodeData().setR(1f);
        node.getNodeData().setG(0f);
        node.getNodeData().setB(0f);
      }
 else {
        node.getNodeData().setR(0.2f);
        node.getNodeData().setG(0.2f);
        node.getNodeData().setB(0.2f);
      }
    }
    Model obj=node.getNodeData().getModel();
    if (obj == null) {
      obj=nodeInit.initModel(node.getNodeData());
      engine.addObject(AbstractEngine.CLASS_NODE,(ModelImpl)obj);
      System.out.println(""String_Node_Str"" + obj);
    }
 else     if (!obj.isValid()) {
      engine.addObject(AbstractEngine.CLASS_NODE,(ModelImpl)obj);
    }
    obj.setCacheMarker(cacheMarker);
    if (modeManager.getMode().equals(ModeManager.AVAILABLE_MODES.HIGHLIGHT)) {
      ModelImpl impl=(ModelImpl)obj;
      if (!node.isVisible()) {
        ColorLayer.layerColor(impl,0.8f,0.8f,0.8f);
      }
    }
  }
}","private void updateNodes(){
  Modeler nodeInit=engine.getModelClasses()[AbstractEngine.CLASS_NODE].getCurrentModeler();
  NodeIterable nodeIterable;
  if (vizConfig.isVisualizeTree()) {
    nodeIterable=graph.getHierarchyTree().getNodes();
  }
 else {
    nodeIterable=graph.getClusteredGraph().getNodes();
  }
  for (  Node node : nodeIterable) {
    if (vizConfig.isVisualizeTree()) {
      node.getNodeData().setX(node.getPre() * 5);
      node.getNodeData().setY(node.getPost() * 5);
      if (graph.getClusteredGraph().isInView(node)) {
        node.getNodeData().setR(1f);
        node.getNodeData().setG(0f);
        node.getNodeData().setB(0f);
      }
 else {
        node.getNodeData().setR(0.2f);
        node.getNodeData().setG(0.2f);
        node.getNodeData().setB(0.2f);
      }
    }
    Model obj=node.getNodeData().getModel();
    if (obj == null) {
      obj=nodeInit.initModel(node.getNodeData());
      engine.addObject(AbstractEngine.CLASS_NODE,(ModelImpl)obj);
    }
 else     if (!obj.isValid()) {
      engine.addObject(AbstractEngine.CLASS_NODE,(ModelImpl)obj);
    }
    obj.setCacheMarker(cacheMarker);
    if (modeManager.getMode().equals(ModeManager.AVAILABLE_MODES.HIGHLIGHT)) {
      ModelImpl impl=(ModelImpl)obj;
      if (!node.isVisible()) {
        ColorLayer.layerColor(impl,0.8f,0.8f,0.8f);
      }
    }
  }
}",0.981447799199709
143169,"public void setup(){
  final VizConfig vizConfig=VizController.getInstance().getVizConfig();
  adjustTextCheckbox.setSelected(vizConfig.isAdjustByText());
  final DefaultComboBoxModel comboModel=new DefaultComboBoxModel();
  final ModelClass nodeClass=VizController.getInstance().getModelClassLibrary().getNodeClass();
  for (  Modeler modeler : nodeClass.getModelers()) {
    comboModel.addElement(modeler);
  }
  comboModel.setSelectedItem(nodeClass.getCurrentModeler());
  shapeCombo.setModel(comboModel);
  shapeCombo.addActionListener(new ActionListener(){
    public void actionPerformed(    ActionEvent e){
      nodeClass.setCurrentModeler((Modeler)comboModel.getSelectedItem());
    }
  }
);
}","public void setup(){
  final VizConfig vizConfig=VizController.getInstance().getVizConfig();
  adjustTextCheckbox.setSelected(vizConfig.isAdjustByText());
  adjustTextCheckbox.addChangeListener(new ChangeListener(){
    public void stateChanged(    ChangeEvent e){
      vizConfig.setAdjustByText(adjustTextCheckbox.isSelected());
    }
  }
);
  final DefaultComboBoxModel comboModel=new DefaultComboBoxModel();
  final ModelClass nodeClass=VizController.getInstance().getModelClassLibrary().getNodeClass();
  for (  Modeler modeler : nodeClass.getModelers()) {
    comboModel.addElement(modeler);
  }
  comboModel.setSelectedItem(nodeClass.getCurrentModeler());
  shapeCombo.setModel(comboModel);
  shapeCombo.addActionListener(new ActionListener(){
    public void actionPerformed(    ActionEvent e){
      nodeClass.setCurrentModeler((Modeler)comboModel.getSelectedItem());
    }
  }
);
}",0.8813559322033898
143170,"public void setSizeFactor(TextDataImpl text,ModelImpl model){
  float factor=textModel.sizeFactor / FACTOR * model.getCameraDistance();
  text.setSizeFactor(factor);
}","public void setSizeFactor(TextDataImpl text,ModelImpl model){
  float factor=FACTOR * textModel.sizeFactor / model.getCameraDistance();
  text.setSizeFactor(factor);
}",0.9461077844311376
143171,"public float getHeight(){
  return (float)line.bounds.getHeight();
}","public float getHeight(){
  return (float)line.bounds.getHeight() * sizeFactor;
}",0.912751677852349
143172,"public float getWidth(){
  return (float)line.bounds.getWidth();
}","public float getWidth(){
  return (float)line.bounds.getWidth() * sizeFactor;
}",0.9103448275862068
143173,"public void beginRendering(){
  renderer.begin3DRendering();
}","public void beginRendering(){
  renderer.beginRendering(drawable.getViewportWidth(),drawable.getViewportHeight());
}",0.6741573033707865
143174,"public void drawText(ModelImpl objectModel){
  Renderable renderable=objectModel.getObj();
  TextDataImpl textData=(TextDataImpl)renderable.getTextData();
  if (textData != null) {
    model.colorMode.textColor(this,textData,objectModel);
    model.sizeMode.setSizeFactor(textData,objectModel);
    String txt=textData.line.text;
    Rectangle2D r=renderer.getBounds(txt);
    textData.line.setBounds(r);
    float posX=renderable.x() + (float)r.getWidth() / -2 * textData.sizeFactor;
    float posY=renderable.y() + (float)r.getHeight() / -2 * textData.sizeFactor;
    float posZ=renderable.getRadius();
    renderer.draw3D(txt,posX,posY,posZ,textData.sizeFactor);
  }
}","public void drawText(ModelImpl objectModel){
  Renderable renderable=objectModel.getObj();
  TextDataImpl textData=(TextDataImpl)renderable.getTextData();
  if (textData != null) {
    model.colorMode.textColor(this,textData,objectModel);
    model.sizeMode.setSizeFactor(textData,objectModel);
    if (textData.sizeFactor * renderer.getCharWidth('a') < PIXEL_LIMIT) {
      return;
    }
    String txt=textData.line.text;
    Rectangle2D r=renderer.getBounds(txt);
    textData.line.setBounds(r);
    float posX=renderable.getModel().getViewportX() + (float)r.getWidth() / -2 * textData.sizeFactor;
    float posY=renderable.getModel().getViewportY() + (float)r.getHeight() / -2 * textData.sizeFactor;
    renderer.draw3D(txt,posX,posY,0,textData.sizeFactor);
  }
}",0.8706536856745479
143175,"public void initArchitecture(){
  vizConfig=VizController.getInstance().getVizConfig();
  drawable=VizController.getInstance().getDrawable();
  model.colorMode=new UniqueColorMode(model);
  model.sizeMode=sizeModes[1];
  model.font=vizConfig.getLabelFont();
  model.nodeColor=vizConfig.getDefaultNodeLabelColor();
  model.edgeColor=vizConfig.getDefaultEdgeLabelColor();
  model.setSelectedOnly(vizConfig.isShowLabelOnSelectedOnly());
  renderer=new Renderer3D();
  renderer.initRenderer();
  model.addChangeListener(new ChangeListener(){
    public void stateChanged(    ChangeEvent e){
      if (!renderer.getFont().equals(model.getFont())) {
        renderer.setFont(model.getFont());
      }
    }
  }
);
}","public void initArchitecture(){
  vizConfig=VizController.getInstance().getVizConfig();
  drawable=VizController.getInstance().getDrawable();
  model.colorMode=new UniqueColorMode(model);
  model.sizeMode=sizeModes[1];
  model.font=vizConfig.getLabelFont();
  model.nodeColor=vizConfig.getDefaultNodeLabelColor();
  model.edgeColor=vizConfig.getDefaultEdgeLabelColor();
  model.setSelectedOnly(vizConfig.isShowLabelOnSelectedOnly());
  renderer=new Renderer2D();
  renderer.initRenderer();
  model.addChangeListener(new ChangeListener(){
    public void stateChanged(    ChangeEvent e){
      if (!renderer.getFont().equals(model.getFont())) {
        renderer.setFont(model.getFont());
      }
    }
  }
);
}",0.998589562764457
143176,"public void endRendering(){
  renderer.end3DRendering();
}","public void endRendering(){
  renderer.endRendering();
}",0.9824561403508772
143177,"public Dhns newDhns(Workspace workspace){
  Dhns dhns=new Dhns(this);
  workspace.getWorkspaceData().setData(workspaceDataProvider.getWorkspaceDataKey(),dhns);
  dhns.setCentralDynamicGraph(new DynamicGraphImpl(dhns,getClusteredDirectedGraph()));
  return dhns;
}","public Dhns newDhns(Workspace workspace){
  Dhns dhns=new Dhns(this);
  workspace.getWorkspaceData().setData(workspaceDataProvider.getWorkspaceDataKey(),dhns);
  dhns.setCentralDynamicGraph(new DynamicGraphImpl(dhns,getHierarchicalDirectedGraph()));
  return dhns;
}",0.8695652173913043
143178,"public DynamicGraphImpl(Dhns dhns,T graph){
  this.graph=graph;
  this.dhns=dhns;
  FilteredGraph filteredGraph=(FilteredGraph)graph;
  filteredGraph.addNodePredicate(new DynamicNodePredicate());
  filteredGraph.addEdgePredicate(new DynamicEdgePredicate());
}","public DynamicGraphImpl(Dhns dhns,T graph){
  this.graph=graph;
  this.dhns=dhns;
  FilteredGraph filteredGraph=(FilteredGraph)graph;
  filteredGraph.addNodePredicate(new DynamicNodePredicate());
  filteredGraph.addEdgePredicate(new DynamicEdgePredicate());
  filteredGraph=(FilteredGraph)((ClusteredGraphImpl)graph).getClusteredGraph();
  filteredGraph.addNodePredicate(new DynamicNodePredicate());
  filteredGraph.addEdgePredicate(new DynamicEdgePredicate());
}",0.7174515235457064
143179,"public void executeLayout(){
  layoutRun=new LayoutRun(layout);
}","public void executeLayout(){
  layoutRun=new LayoutRun(layout);
  executor.execute(layoutRun);
}",0.8074534161490683
143180,"@Override public void setGraphController(GraphController graphController){
  super.setGraphController(graphController);
  this.graph=graphController.getUndirectedGraph();
}","@Override public void setGraphController(GraphController graphController){
  super.setGraphController(graphController);
  graph=graphController.getUndirectedGraph();
}",0.9852507374631267
143181,"public RotateLayout(LayoutBuilder layoutBuilder,double angle){
  super(layoutBuilder);
  this.angle=angle;
}","public RotateLayout(LayoutBuilder layoutBuilder,double angle){
  super(layoutBuilder);
  this.angle=angle;
  initialized=false;
}",0.9113924050632912
143182,"public void stopEvent(){
  throw new UnsupportedOperationException(""String_Node_Str"");
}","public void stopEvent(){
  stopButton.setEnabled(false);
  playButton.setEnabled(true);
}",0.5536723163841808
143183,"private void initLayoutController(){
  layoutController=Lookup.getDefault().lookup(LayoutController.class);
}","private void initLayoutController(){
  layoutController=Lookup.getDefault().lookup(LayoutController.class);
  layoutController.addObserver(this);
}",0.8515625
143184,"public void executeEvent(){
  throw new UnsupportedOperationException(""String_Node_Str"");
}","public void executeEvent(){
  stopButton.setEnabled(true);
  playButton.setEnabled(false);
}",0.546448087431694
143185,"public void generate(final Generator generator){
  String title=generator.getName();
  GeneratorUI ui=generator.getUI();
  if (ui != null) {
    ui.setup(generator);
    DialogDescriptor dd=new DialogDescriptor(ui.getPanel(),title);
    Object result=DialogDisplayer.getDefault().notify(dd);
    if (result != NotifyDescriptor.OK_OPTION) {
      return;
    }
    ui.unsetup();
  }
  final Container container=Lookup.getDefault().lookup(Container.class);
  container.setSource(""String_Node_Str"" + generator.getName());
  container.setReport(new Report());
  String taskname=""String_Node_Str"" + generator.getName();
  LongTaskErrorHandler errorHandler=new LongTaskErrorHandler(){
    public void fatalError(    Throwable t){
      NotifyDescriptor.Exception ex=new NotifyDescriptor.Exception(t);
      DialogDisplayer.getDefault().notify(ex);
      t.printStackTrace();
    }
  }
;
  executor.execute(generator,new Runnable(){
    public void run(){
      generator.generate(container.getLoader());
      finishGenerate(container);
    }
  }
,taskname,errorHandler);
}","public void generate(final Generator generator){
  String title=generator.getName();
  GeneratorUI ui=generator.getUI();
  if (ui != null) {
    ui.setup(generator);
    DialogDescriptor dd=new DialogDescriptor(ui.getPanel(),title);
    Object result=DialogDisplayer.getDefault().notify(dd);
    if (result != NotifyDescriptor.OK_OPTION) {
      return;
    }
    ui.unsetup();
  }
  final Container container=Lookup.getDefault().lookup(ContainerFactory.class).newContainer();
  container.setSource(""String_Node_Str"" + generator.getName());
  container.setReport(new Report());
  String taskname=""String_Node_Str"" + generator.getName();
  LongTaskErrorHandler errorHandler=new LongTaskErrorHandler(){
    public void fatalError(    Throwable t){
      NotifyDescriptor.Exception ex=new NotifyDescriptor.Exception(t);
      DialogDisplayer.getDefault().notify(ex);
      t.printStackTrace();
    }
  }
;
  executor.execute(generator,new Runnable(){
    public void run(){
      generator.generate(container.getLoader());
      finishGenerate(container);
    }
  }
,taskname,errorHandler);
}",0.9842300556586272
143186,"public void doImport(Database database){
  try {
    DatabaseType type=getDatabaseType(database);
    if (type == null) {
      throw new ImportException(NbBundle.getMessage(getClass(),""String_Node_Str""));
    }
    final DatabaseImporter importer=getMatchingImporter(type);
    if (importer == null) {
      throw new ImportException(NbBundle.getMessage(getClass(),""String_Node_Str""));
    }
    DatabaseTypeUI ui=type.getUI();
    if (ui != null) {
      ui.setup(type);
      String title=""String_Node_Str"";
      JPanel panel=ui.getPanel();
      if (panel instanceof ValidationPanel) {
        ValidationPanel validationPanel=(ValidationPanel)panel;
        if (!validationPanel.showOkCancelDialog(title)) {
          return;
        }
      }
 else {
        DialogDescriptor dd=new DialogDescriptor(panel,title);
        if (DialogDisplayer.getDefault().notify(dd).equals(NotifyDescriptor.CANCEL_OPTION)) {
          return;
        }
      }
      ui.unsetup();
      database=ui.getDatabase();
    }
    final Container container=Lookup.getDefault().lookup(Container.class);
    container.setSource(""String_Node_Str"" + importer.getClass());
    final Report report=new Report();
    container.setReport(report);
    LongTask task=null;
    if (importer instanceof LongTask) {
      task=(LongTask)importer;
    }
    final LongTaskErrorHandler errorHandler=new LongTaskErrorHandler(){
      public void fatalError(      Throwable t){
        NotifyDescriptor.Exception ex=new NotifyDescriptor.Exception(t);
        DialogDisplayer.getDefault().notify(ex);
      }
    }
;
    final Database db=database;
    executor.execute(task,new Runnable(){
      public void run(){
        try {
          importer.importData(db,container.getLoader(),report);
          finishImport(container);
        }
 catch (        Exception ex) {
          ex.printStackTrace();
          throw new RuntimeException(ex);
        }
      }
    }
,""String_Node_Str"",errorHandler);
  }
 catch (  Exception ex) {
    NotifyDescriptor.Message e=new NotifyDescriptor.Message(ex.getMessage(),NotifyDescriptor.WARNING_MESSAGE);
    DialogDisplayer.getDefault().notifyLater(e);
    ex.printStackTrace();
  }
}","public void doImport(Database database){
  try {
    DatabaseType type=getDatabaseType(database);
    if (type == null) {
      throw new ImportException(NbBundle.getMessage(getClass(),""String_Node_Str""));
    }
    final DatabaseImporter importer=getMatchingImporter(type);
    if (importer == null) {
      throw new ImportException(NbBundle.getMessage(getClass(),""String_Node_Str""));
    }
    DatabaseTypeUI ui=type.getUI();
    if (ui != null) {
      ui.setup(type);
      String title=""String_Node_Str"";
      JPanel panel=ui.getPanel();
      if (panel instanceof ValidationPanel) {
        ValidationPanel validationPanel=(ValidationPanel)panel;
        if (!validationPanel.showOkCancelDialog(title)) {
          return;
        }
      }
 else {
        DialogDescriptor dd=new DialogDescriptor(panel,title);
        if (DialogDisplayer.getDefault().notify(dd).equals(NotifyDescriptor.CANCEL_OPTION)) {
          return;
        }
      }
      ui.unsetup();
      database=ui.getDatabase();
    }
    final Container container=Lookup.getDefault().lookup(ContainerFactory.class).newContainer();
    container.setSource(""String_Node_Str"" + importer.getClass());
    final Report report=new Report();
    container.setReport(report);
    LongTask task=null;
    if (importer instanceof LongTask) {
      task=(LongTask)importer;
    }
    final LongTaskErrorHandler errorHandler=new LongTaskErrorHandler(){
      public void fatalError(      Throwable t){
        NotifyDescriptor.Exception ex=new NotifyDescriptor.Exception(t);
        DialogDisplayer.getDefault().notify(ex);
      }
    }
;
    final Database db=database;
    executor.execute(task,new Runnable(){
      public void run(){
        try {
          importer.importData(db,container.getLoader(),report);
          finishImport(container);
        }
 catch (        Exception ex) {
          ex.printStackTrace();
          throw new RuntimeException(ex);
        }
      }
    }
,""String_Node_Str"",errorHandler);
  }
 catch (  Exception ex) {
    NotifyDescriptor.Message e=new NotifyDescriptor.Message(ex.getMessage(),NotifyDescriptor.WARNING_MESSAGE);
    DialogDisplayer.getDefault().notifyLater(e);
    ex.printStackTrace();
  }
}",0.992269213278763
143187,"public void generate(ContainerLoader container){
  ContainerLoader.ContainerFactory factory=container.factory();
  for (int i=0; i < numberOfNodes; i++) {
    NodeDraft nodeDraft=factory.newNodeDraft();
    nodeDraft.setLabel(""String_Node_Str"" + i);
    nodeDraft.setId(""String_Node_Str"" + i);
    float from=(float)Math.random();
    float to=(float)(from + (1.0 - from) * Math.random());
    nodeDraft.setDynamicFrom(from);
    nodeDraft.setDynamicTo(to);
    container.addNode(nodeDraft);
  }
  for (int i=0; i < numberOfEdges; i++) {
    EdgeDraft edgeDraft=factory.newEdgeDraft();
    int source=(int)(Math.random() * (numberOfNodes));
    int target=(int)(Math.random() * (numberOfNodes));
    edgeDraft.setSource(container.getNode(""String_Node_Str"" + source));
    edgeDraft.setTarget(container.getNode(""String_Node_Str"" + target));
    container.addEdge(edgeDraft);
  }
}","public void generate(ContainerLoader container){
  ContainerLoader.DraftFactory factory=container.factory();
  for (int i=0; i < numberOfNodes; i++) {
    NodeDraft nodeDraft=factory.newNodeDraft();
    nodeDraft.setLabel(""String_Node_Str"" + i);
    nodeDraft.setId(""String_Node_Str"" + i);
    float from=(float)Math.random();
    float to=(float)(from + (1.0 - from) * Math.random());
    nodeDraft.setDynamicFrom(from);
    nodeDraft.setDynamicTo(to);
    container.addNode(nodeDraft);
  }
  for (int i=0; i < numberOfEdges; i++) {
    EdgeDraft edgeDraft=factory.newEdgeDraft();
    int source=(int)(Math.random() * (numberOfNodes));
    int target=(int)(Math.random() * (numberOfNodes));
    edgeDraft.setSource(container.getNode(""String_Node_Str"" + source));
    edgeDraft.setTarget(container.getNode(""String_Node_Str"" + target));
    container.addEdge(edgeDraft);
  }
}",0.992018244013683
143188,"public void generate(ContainerLoader container){
  ContainerLoader.ContainerFactory factory=container.factory();
  NodeDraft nodeA=factory.newNodeDraft();
  nodeA.setLabel(""String_Node_Str"");
  NodeDraft nodeB=factory.newNodeDraft();
  nodeB.setLabel(""String_Node_Str"");
  NodeDraft nodeC=factory.newNodeDraft();
  nodeC.setLabel(""String_Node_Str"");
  NodeDraft nodeD=factory.newNodeDraft();
  nodeD.setLabel(""String_Node_Str"");
  NodeDraft nodeE=factory.newNodeDraft();
  nodeE.setLabel(""String_Node_Str"");
  NodeDraft nodeF=factory.newNodeDraft();
  nodeF.setLabel(""String_Node_Str"");
  NodeDraft nodeG=factory.newNodeDraft();
  nodeG.setLabel(""String_Node_Str"");
  NodeDraft nodeH=factory.newNodeDraft();
  nodeH.setLabel(""String_Node_Str"");
  nodeA.addChild(nodeC);
  nodeA.addChild(nodeD);
  nodeA.addChild(nodeH);
  nodeB.addChild(nodeD);
  nodeB.addChild(nodeE);
  nodeB.addChild(nodeF);
  nodeB.addChild(nodeG);
  container.addNode(nodeA);
  container.addNode(nodeB);
  container.addNode(nodeC);
  container.addNode(nodeD);
  container.addNode(nodeE);
  container.addNode(nodeF);
  container.addNode(nodeG);
  container.addNode(nodeH);
}","public void generate(ContainerLoader container){
  ContainerLoader.DraftFactory factory=container.factory();
  NodeDraft nodeA=factory.newNodeDraft();
  nodeA.setLabel(""String_Node_Str"");
  NodeDraft nodeB=factory.newNodeDraft();
  nodeB.setLabel(""String_Node_Str"");
  NodeDraft nodeC=factory.newNodeDraft();
  nodeC.setLabel(""String_Node_Str"");
  NodeDraft nodeD=factory.newNodeDraft();
  nodeD.setLabel(""String_Node_Str"");
  NodeDraft nodeE=factory.newNodeDraft();
  nodeE.setLabel(""String_Node_Str"");
  NodeDraft nodeF=factory.newNodeDraft();
  nodeF.setLabel(""String_Node_Str"");
  NodeDraft nodeG=factory.newNodeDraft();
  nodeG.setLabel(""String_Node_Str"");
  NodeDraft nodeH=factory.newNodeDraft();
  nodeH.setLabel(""String_Node_Str"");
  nodeA.addChild(nodeC);
  nodeA.addChild(nodeD);
  nodeA.addChild(nodeH);
  nodeB.addChild(nodeD);
  nodeB.addChild(nodeE);
  nodeB.addChild(nodeF);
  nodeB.addChild(nodeG);
  container.addNode(nodeA);
  container.addNode(nodeB);
  container.addNode(nodeC);
  container.addNode(nodeD);
  container.addNode(nodeE);
  container.addNode(nodeF);
  container.addNode(nodeG);
  container.addNode(nodeH);
}",0.9938757655293088
143189,public ContainerFactory factory();,public DraftFactory factory();,0.8125
143190,"public void setInited(){
  if (!inited) {
    inited=true;
    if (requestAnimation) {
      graphDrawable.display();
      startAnimating();
      requestAnimation=false;
    }
  }
}","public void setInited(){
  if (!inited) {
    inited=true;
    if (requestAnimation) {
      graphDrawable.display();
      startAnimating();
      requestAnimation=false;
    }
  }
 else {
    dataBridge.reset();
    textManager.initArchitecture();
  }
}",0.8310502283105022
143191,"@Override public void init(GLAutoDrawable drawable){
  GL gl=drawable.getGL();
  GraphicalConfiguration graphicalConfiguration=new GraphicalConfiguration();
  graphicalConfiguration.checkGeneralCompatibility(gl);
  resizing=false;
  initConfig(gl);
  init(gl);
}","@Override public void init(GLAutoDrawable drawable){
  GL gl=drawable.getGL();
  GraphicalConfiguration graphicalConfiguration=new GraphicalConfiguration();
  graphicalConfiguration.checkGeneralCompatibility(gl);
  viewport=BufferUtil.newIntBuffer(4);
  resizing=false;
  initConfig(gl);
  init(gl);
}",0.9307282415630552
143192,"public void reshape(GLAutoDrawable drawable,int x,int y,int width,int height){
  if (!resizing) {
    resizing=true;
    if (viewport.get(2) == width && viewport.get(3) == height) {
      return;
    }
    if (height == 0) {
      height=1;
    }
    if (width == 0) {
      width=1;
    }
    int viewportW=0, viewportH=0, viewportX=width, viewportY=height;
    aspectRatio=(double)width / (double)height;
    viewportH=height;
    viewportW=(int)(height * aspectRatio);
    if (viewportW > width) {
      viewportW=width;
      viewportH=(int)(width * (1 / aspectRatio));
    }
    viewportX=((width - viewportW) / 2);
    viewportY=((height - viewportH) / 2);
    GL gl=drawable.getGL();
    gl.glViewport(viewportX,viewportY,viewportW,viewportH);
    gl.glGetIntegerv(GL.GL_VIEWPORT,viewport);
    gl.glMatrixMode(GL.GL_PROJECTION);
    gl.glLoadIdentity();
    glu.gluPerspective(viewField,aspectRatio,nearDistance,farDistance);
    gl.glGetDoublev(GL.GL_PROJECTION_MATRIX,projMatrix);
    gl.glMatrixMode(GL.GL_MODELVIEW);
    gl.glLoadIdentity();
    reshape3DScene(drawable.getGL());
    if (DEBUG) {
      System.err.println(""String_Node_Str"" + gl.glGetString(GL.GL_VENDOR));
      System.err.println(""String_Node_Str"" + gl.glGetString(GL.GL_RENDERER));
      System.err.println(""String_Node_Str"" + gl.glGetString(GL.GL_VERSION));
    }
    resizing=false;
  }
}","public void reshape(GLAutoDrawable drawable,int x,int y,int width,int height){
  if (!resizing) {
    if (viewport.get(2) == width && viewport.get(3) == height) {
      return;
    }
    resizing=true;
    if (height == 0) {
      height=1;
    }
    if (width == 0) {
      width=1;
    }
    int viewportW=0, viewportH=0, viewportX=width, viewportY=height;
    aspectRatio=(double)width / (double)height;
    viewportH=height;
    viewportW=(int)(height * aspectRatio);
    if (viewportW > width) {
      viewportW=width;
      viewportH=(int)(width * (1 / aspectRatio));
    }
    viewportX=((width - viewportW) / 2);
    viewportY=((height - viewportH) / 2);
    GL gl=drawable.getGL();
    gl.glViewport(viewportX,viewportY,viewportW,viewportH);
    gl.glGetIntegerv(GL.GL_VIEWPORT,viewport);
    gl.glMatrixMode(GL.GL_PROJECTION);
    gl.glLoadIdentity();
    glu.gluPerspective(viewField,aspectRatio,nearDistance,farDistance);
    gl.glGetDoublev(GL.GL_PROJECTION_MATRIX,projMatrix);
    gl.glMatrixMode(GL.GL_MODELVIEW);
    gl.glLoadIdentity();
    reshape3DScene(drawable.getGL());
    if (DEBUG) {
      System.err.println(""String_Node_Str"" + gl.glGetString(GL.GL_VENDOR));
      System.err.println(""String_Node_Str"" + gl.glGetString(GL.GL_RENDERER));
      System.err.println(""String_Node_Str"" + gl.glGetString(GL.GL_VERSION));
    }
    resizing=false;
  }
}",0.9861415025528812
143193,"private void deleteNode(PreNode node){
  for (DescendantAndSelfIterator itr=new DescendantAndSelfIterator(treeStructure,node,null); itr.hasNext(); ) {
    AbstractNode descendant=itr.next();
    if (descendant.isEnabled()) {
      edgeProcessor.clearMetaEdges(descendant);
    }
    edgeProcessor.clearEdges(descendant);
    if (descendant == descendant.getOriginalNode()) {
      CloneNode cn=descendant.getOriginalNode().getClones();
      while (cn != null) {
        treeStructure.deleteDescendantAndSelf(cn);
        cn=cn.getNext();
      }
    }
 else {
      treeStructure.deleteDescendantAndSelf(descendant.getOriginalNode());
      CloneNode cn=descendant.getOriginalNode().getClones();
      while (cn != null) {
        if (cn != descendant) {
          treeStructure.deleteDescendantAndSelf(cn);
        }
        cn=cn.getNext();
      }
    }
  }
  treeStructure.deleteDescendantAndSelf(node);
}","private void deleteNode(PreNode node){
  for (DescendantAndSelfIterator itr=new DescendantAndSelfIterator(treeStructure,node,null); itr.hasNext(); ) {
    AbstractNode descendant=itr.next();
    if (descendant.isEnabled()) {
      edgeProcessor.clearMetaEdges(descendant);
    }
    edgeProcessor.clearEdges(descendant);
    if (descendant == descendant.getOriginalNode()) {
      CloneNode cn=descendant.getOriginalNode().getClones();
      while (cn != null) {
        unAttachClones(cn);
        treeStructure.deleteDescendantAndSelf(cn);
        cn=cn.getNext();
      }
    }
 else {
      treeStructure.deleteDescendantAndSelf(descendant.getOriginalNode());
      CloneNode cn=descendant.getOriginalNode().getClones();
      while (cn != null) {
        if (cn != descendant) {
          treeStructure.deleteDescendantAndSelf(cn);
        }
        cn=cn.getNext();
      }
    }
  }
  treeStructure.deleteDescendantAndSelf(node);
}",0.9848484848484848
143194,"public boolean contains(Node node){
  if (node == null) {
    throw new NullPointerException();
  }
  AbstractNode absNode=(AbstractNode)node;
  readLock();
  if (!absNode.isValid()) {
    return false;
  }
  boolean res=false;
  if (nodeProposition.evaluate(absNode) && dhns.getTreeStructure().getTree().contains(absNode)) {
    res=true;
  }
  readUnlock();
  return res;
}","public boolean contains(Node node){
  if (node == null) {
    throw new NullPointerException();
  }
  AbstractNode absNode=(AbstractNode)node;
  readLock();
  boolean res=false;
  if (absNode.isValid()) {
    if (nodeProposition.evaluate(absNode) && dhns.getTreeStructure().getTree().contains(absNode)) {
      res=true;
    }
  }
  readUnlock();
  return res;
}",0.8683853459972863
143195,"@Test public void testCloneRemove(){
  graph1.removeNode(nodeMap.get(""String_Node_Str""));
  assertFalse(graph1.contains(nodeMap.get(""String_Node_Str"")));
  assertEquals(1,((PreNode)nodeMap.get(""String_Node_Str"")).size);
  assertEquals(2,((PreNode)dhns1.getTreeStructure().root).size);
  assertEquals(2,graph1.getNodeCount());
  setUp();
  graph1.removeNode(nodeMap.get(""String_Node_Str""));
  assertFalse(graph1.contains(nodeMap.get(""String_Node_Str"")));
  assertEquals(1,((PreNode)nodeMap.get(""String_Node_Str"")).size);
  assertEquals(2,((PreNode)dhns1.getTreeStructure().root).size);
  assertEquals(2,graph1.getNodeCount());
  DhnsGraphController controller=new DhnsGraphController();
  Dhns dhns=controller.getMainDhns();
  ClusteredDirectedGraphImpl graph=new ClusteredDirectedGraphImpl(dhns,false);
  GraphFactoryImpl factory=controller.factory();
  AbstractNode nodeA=factory.newNode();
  AbstractNode nodeB=factory.newNode();
  AbstractNode nodeC=factory.newNode();
  AbstractNode nodeD=factory.newNode();
  graph.addNode(nodeA);
  graph.addNode(nodeB,nodeA);
  graph.addNode(nodeC,nodeA);
  graph.addNode(nodeD,nodeB);
  graph.addNode(nodeD,nodeC);
  graph.addNode(nodeD,nodeA);
  graph.removeNode(nodeD);
  assertFalse(graph1.contains(nodeD));
  assertEquals(2,((PreNode)nodeA).size);
}","@Test public void testCloneRemove(){
  graph1.removeNode(nodeMap.get(""String_Node_Str""));
  assertFalse(graph1.contains(nodeMap.get(""String_Node_Str"")));
  assertEquals(1,((PreNode)nodeMap.get(""String_Node_Str"")).size);
  assertEquals(2,((PreNode)dhns1.getTreeStructure().root).size);
  assertEquals(2,graph1.getNodeCount());
  setUp();
  graph1.removeNode(nodeMap.get(""String_Node_Str""));
  assertFalse(graph1.contains(nodeMap.get(""String_Node_Str"")));
  assertEquals(1,((PreNode)nodeMap.get(""String_Node_Str"")).size);
  assertEquals(2,((PreNode)dhns1.getTreeStructure().root).size);
  assertEquals(2,graph1.getNodeCount());
  DhnsGraphController controller=new DhnsGraphController();
  Dhns dhns=controller.getMainDhns();
  ClusteredDirectedGraphImpl graph=new ClusteredDirectedGraphImpl(dhns,false);
  GraphFactoryImpl factory=controller.factory();
  AbstractNode nodeA=factory.newNode();
  AbstractNode nodeB=factory.newNode();
  AbstractNode nodeC=factory.newNode();
  AbstractNode nodeD=factory.newNode();
  graph.addNode(nodeA);
  graph.addNode(nodeB,nodeA);
  graph.addNode(nodeC,nodeA);
  graph.addNode(nodeD,nodeB);
  graph.addNode(nodeD,nodeC);
  graph.addNode(nodeD,nodeA);
  graph.removeNode(nodeD);
  assertFalse(graph.contains(nodeD));
  assertEquals(2,((PreNode)nodeA).size);
  setUp();
  graph1.addNode(nodeMap.get(""String_Node_Str""),nodeMap.get(""String_Node_Str""));
  AbstractNode cloneAafterE=nodeMap.get(""String_Node_Str"").getOriginalNode().getClones();
  graph1.addNode(cloneAafterE,nodeMap.get(""String_Node_Str""));
  graph1.removeNode(nodeMap.get(""String_Node_Str""));
  assertEquals(2,graph1.getNodeCount());
  assertTrue(graph1.contains(nodeMap.get(""String_Node_Str"")));
  assertTrue(graph1.contains(nodeMap.get(""String_Node_Str"")));
}",0.8473132372214941
143196,"private void updateEdges(){
  Modeler edgeInit=engine.getModelClasses()[AbstractEngine.CLASS_EDGE].getCurrentModeler();
  Modeler arrowInit=engine.getModelClasses()[AbstractEngine.CLASS_ARROW].getCurrentModeler();
  EdgeIterable edgeIterable;
  if (vizConfig.isVisualizeTree()) {
    edgeIterable=graph.getHierarchyTree().getEdges();
  }
 else {
    edgeIterable=graph.getEdges();
  }
  for (  Edge edge : edgeIterable) {
    Model obj=edge.getEdgeData().getModel();
    if (obj == null) {
      obj=edgeInit.initModel(edge.getEdgeData());
      engine.addObject(AbstractEngine.CLASS_EDGE,(ModelImpl)obj);
      if (vizConfig.isShowArrows() && !edge.isSelfLoop()) {
        ModelImpl arrowObj=arrowInit.initModel(edge.getEdgeData());
        engine.addObject(AbstractEngine.CLASS_ARROW,arrowObj);
        arrowObj.setCacheMarker(cacheMarker);
        ((Edge2dModel)obj).setArrow(arrowObj);
      }
    }
 else     if (!obj.isValid()) {
      engine.addObject(AbstractEngine.CLASS_EDGE,(ModelImpl)obj);
      if (vizConfig.isShowArrows()) {
        ModelImpl arrowObj=((Edge2dModel)obj).getArrow();
        engine.addObject(AbstractEngine.CLASS_ARROW,arrowObj);
        arrowObj.setCacheMarker(cacheMarker);
      }
    }
    obj.setCacheMarker(cacheMarker);
  }
}","private void updateEdges(){
  Modeler edgeInit=engine.getModelClasses()[AbstractEngine.CLASS_EDGE].getCurrentModeler();
  Modeler arrowInit=engine.getModelClasses()[AbstractEngine.CLASS_ARROW].getCurrentModeler();
  EdgeIterable edgeIterable;
  if (vizConfig.isVisualizeTree()) {
    edgeIterable=graph.getHierarchyTree().getEdges();
  }
 else {
    edgeIterable=graph.getEdges();
  }
  for (  Edge edge : edgeIterable) {
    Model obj=edge.getEdgeData().getModel();
    if (obj == null) {
      obj=edgeInit.initModel(edge.getEdgeData());
      engine.addObject(AbstractEngine.CLASS_EDGE,(ModelImpl)obj);
      if (vizConfig.isShowArrows() && !edge.isSelfLoop()) {
        ModelImpl arrowObj=arrowInit.initModel(edge.getEdgeData());
        engine.addObject(AbstractEngine.CLASS_ARROW,arrowObj);
        arrowObj.setCacheMarker(cacheMarker);
        ((Edge2dModel)obj).setArrow(arrowObj);
      }
    }
 else     if (!obj.isValid()) {
      engine.addObject(AbstractEngine.CLASS_EDGE,(ModelImpl)obj);
      if (vizConfig.isShowArrows() && !edge.isSelfLoop()) {
        ModelImpl arrowObj=((Edge2dModel)obj).getArrow();
        engine.addObject(AbstractEngine.CLASS_ARROW,arrowObj);
        arrowObj.setCacheMarker(cacheMarker);
      }
    }
    obj.setCacheMarker(cacheMarker);
  }
}",0.9913657770800628
143197,"public GraphFactoryImpl(IDGen idGen,AttributeRowFactory attributesFactory){
  this.idGen=idGen;
}","public GraphFactoryImpl(IDGen idGen,AttributeRowFactory attributesFactory){
  this.idGen=idGen;
  this.attributesFactory=attributesFactory;
}",0.8151260504201681
143198,"private void importText(FileObject fileObject,Importer importer,final Container container){
  final BufferedReader reader=getTextReader(fileObject);
  final TextImporter textImporter=(TextImporter)importer;
  final Report report=container.getReport();
  LongTask task=null;
  if (importer instanceof LongTask) {
    task=(LongTask)importer;
  }
  final LongTaskErrorHandler errorHandler=new LongTaskErrorHandler(){
    public void fatalError(    Throwable t){
      NotifyDescriptor.Exception ex=new NotifyDescriptor.Exception(t);
      DialogDisplayer.getDefault().notify(ex);
    }
  }
;
  executor.execute(task,new Runnable(){
    public void run(){
      try {
        textImporter.importData(reader,container.getLoader(),report);
        finishImport(container);
      }
 catch (      Exception ex) {
        throw new RuntimeException(ex);
      }
    }
  }
,""String_Node_Str"" + fileObject.getNameExt(),errorHandler);
}","private void importText(FileObject fileObject,Importer importer,final Container container){
  final BufferedReader reader=getTextReader(fileObject);
  final TextImporter textImporter=(TextImporter)importer;
  final Report report=container.getReport();
  LongTask task=null;
  if (importer instanceof LongTask) {
    task=(LongTask)importer;
  }
  final LongTaskErrorHandler errorHandler=new LongTaskErrorHandler(){
    public void fatalError(    Throwable t){
      NotifyDescriptor.Exception ex=new NotifyDescriptor.Exception(t);
      DialogDisplayer.getDefault().notify(ex);
      t.printStackTrace();
    }
  }
;
  executor.execute(task,new Runnable(){
    public void run(){
      try {
        textImporter.importData(reader,container.getLoader(),report);
        finishImport(container);
      }
 catch (      Exception ex) {
        throw new RuntimeException(ex);
      }
    }
  }
,""String_Node_Str"" + fileObject.getNameExt(),errorHandler);
}",0.9856153436334576
143199,"public void logIssue(Issue issue){
  entries.add(new ReportEntry(issue));
  if (criticalException && issue.getLevel().equals(Issue.Level.CRITICAL)) {
    if (issue.getThrowable() != null) {
      throw new RuntimeException(issue.getMessage(),issue.getThrowable());
    }
 else {
      throw new RuntimeException(issue.getMessage());
    }
  }
}","public void logIssue(Issue issue){
  entries.add(new ReportEntry(issue));
  if (issue.getLevel().toInteger() >= exceptionLevel.toInteger()) {
    if (issue.getThrowable() != null) {
      throw new RuntimeException(issue.getMessage(),issue.getThrowable());
    }
 else {
      throw new RuntimeException(issue.getMessage());
    }
  }
}",0.5235294117647059
143200,"private void flushToNode(NodeDraftGetter nodeDraft,Node node){
  if (nodeDraft.getColor() != null) {
    node.getNodeData().setR(nodeDraft.getColor().getRed() / 255f);
    node.getNodeData().setG(nodeDraft.getColor().getGreen() / 255f);
    node.getNodeData().setB(nodeDraft.getColor().getBlue() / 255f);
  }
  if (nodeDraft.getLabel() != null) {
    node.getNodeData().setLabel(nodeDraft.getLabel());
  }
  if (nodeDraft.getX() != 0) {
    node.getNodeData().setX(nodeDraft.getX());
  }
 else {
    node.getNodeData().setX((float)((0.01 + Math.random()) * 1000) - 500);
  }
  if (nodeDraft.getY() != 0) {
    node.getNodeData().setY(nodeDraft.getY());
  }
 else {
    node.getNodeData().setY((float)((0.01 + Math.random()) * 1000) - 500);
  }
  if (nodeDraft.getZ() != 0) {
    node.getNodeData().setZ(nodeDraft.getZ());
  }
  if (nodeDraft.getSize() != 0) {
    node.getNodeData().setSize(nodeDraft.getSize());
  }
  if (node.getNodeData().getAttributes() != null) {
    AttributeRow row=(AttributeRow)node.getNodeData().getAttributes();
    for (    AttributeValue val : nodeDraft.getAttributeValues()) {
      row.setValue(val.getColumn(),val.getValue());
    }
  }
}","private void flushToNode(NodeDraftGetter nodeDraft,Node node){
  if (nodeDraft.getColor() != null) {
    node.getNodeData().setR(nodeDraft.getColor().getRed() / 255f);
    node.getNodeData().setG(nodeDraft.getColor().getGreen() / 255f);
    node.getNodeData().setB(nodeDraft.getColor().getBlue() / 255f);
  }
  if (nodeDraft.getLabel() != null) {
    node.getNodeData().setLabel(nodeDraft.getLabel());
  }
  if (nodeDraft.getX() != 0) {
    node.getNodeData().setX(nodeDraft.getX());
  }
 else {
    node.getNodeData().setX((float)((0.01 + Math.random()) * 1000) - 500);
  }
  if (nodeDraft.getY() != 0) {
    node.getNodeData().setY(nodeDraft.getY());
  }
 else {
    node.getNodeData().setY((float)((0.01 + Math.random()) * 1000) - 500);
  }
  if (nodeDraft.getZ() != 0) {
    node.getNodeData().setZ(nodeDraft.getZ());
  }
  if (nodeDraft.getSize() != 0) {
    node.getNodeData().setSize(nodeDraft.getSize());
  }
  if (nodeDraft.getId() != null) {
    node.getNodeData().setId(nodeDraft.getId());
  }
  if (node.getNodeData().getAttributes() != null) {
    AttributeRow row=(AttributeRow)node.getNodeData().getAttributes();
    for (    AttributeValue val : nodeDraft.getAttributeValues()) {
      row.setValue(val.getColumn(),val.getValue());
    }
  }
}",0.9407407407407408
143201,"public void executeLayout(final Layout layout){
  executor.execute(new Runnable(){
    public void run(){
      GraphController graphController=Lookup.getDefault().lookup(GraphController.class);
      layout.initAlgo(graphController);
      layout.resetPropertiesValues();
      while (layout.canAlgo()) {
        layout.goAlgo();
      }
      layout.endAlgo();
    }
  }
);
}","public void executeLayout(final Layout layout){
  System.out.println(""String_Node_Str"");
  executor.execute(new Runnable(){
    public void run(){
      GraphController graphController=Lookup.getDefault().lookup(GraphController.class);
      System.out.println(""String_Node_Str"");
      layout.initAlgo(graphController);
      layout.resetPropertiesValues();
      while (layout.canAlgo()) {
        layout.goAlgo();
      }
      System.out.println(""String_Node_Str"");
      layout.endAlgo();
    }
  }
);
}",0.8519774011299435
143202,"public LayoutControllerImpl(){
  layouts=new ArrayList<Layout>(Lookup.getDefault().lookupAll(Layout.class));
  executor=Executors.newSingleThreadExecutor();
}","public LayoutControllerImpl(){
  layouts=new ArrayList<LayoutBuilder>(Lookup.getDefault().lookupAll(LayoutBuilder.class));
  executor=Executors.newSingleThreadExecutor();
}",0.9575757575757576
143203,"public void run(){
  GraphController graphController=Lookup.getDefault().lookup(GraphController.class);
  layout.initAlgo(graphController);
  layout.resetPropertiesValues();
  while (layout.canAlgo()) {
    layout.goAlgo();
  }
  layout.endAlgo();
}","public void run(){
  GraphController graphController=Lookup.getDefault().lookup(GraphController.class);
  System.out.println(""String_Node_Str"");
  layout.initAlgo(graphController);
  layout.resetPropertiesValues();
  while (layout.canAlgo()) {
    layout.goAlgo();
  }
  System.out.println(""String_Node_Str"");
  layout.endAlgo();
}",0.8586206896551725
143204,"public void goAlgo(){
  BarnesHut barnes=new BarnesHut(getNodeForce());
  barnes.theta=getBarnesHutTheta();
  QuadTree tree=QuadTree.buildTree(graph,getBarnesHutMaxLevel());
  for (  Node node : graph.getTopNodes()) {
    NodeData data=node.getNodeData();
    ForceVector layoutData=data.getLayoutData();
    if (layoutData == null) {
      System.out.println(""String_Node_Str"" + graph.getLevel(node));
    }
 else {
      ForceVector f=barnes.calculateForce(data,tree);
      layoutData.add(f);
    }
  }
  AbstractForce edgeForce=getEdgeForce();
  for (  Edge e : graph.getEdges()) {
    if (graph.getLevel(e.getSource()) == 0 && graph.getLevel(e.getTarget()) == 0) {
      NodeData n1=e.getSource().getNodeData();
      NodeData n2=e.getTarget().getNodeData();
      ForceVector f1=n1.getLayoutData();
      ForceVector f2=n2.getLayoutData();
      ForceVector f=edgeForce.calculateForce(n1,n2);
      f1.add(f);
      f2.subtract(f);
    }
  }
  energy0=energy;
  energy=0;
  Displacement displacement=getDisplacement();
  for (  Node n : graph.getTopNodes()) {
    NodeData data=n.getNodeData();
    ForceVector force=data.getLayoutData();
    energy+=force.getEnergy();
    displacement.moveNode(data,force);
  }
  postAlgo();
}","public void goAlgo(){
  BarnesHut barnes=new BarnesHut(getNodeForce());
  barnes.theta=getBarnesHutTheta();
  QuadTree tree=QuadTree.buildTree(graph,getBarnesHutMaxLevel());
  for (  Node node : graph.getTopNodes()) {
    NodeData data=node.getNodeData();
    ForceVector layoutData=data.getLayoutData();
    if (layoutData == null) {
      System.out.println(""String_Node_Str"" + graph.getLevel(node));
    }
 else {
      ForceVector f=barnes.calculateForce(data,tree);
      layoutData.add(f);
    }
  }
  AbstractForce edgeForce=getEdgeForce();
  int count=0;
  for (  Edge e : getTopEdges(graph)) {
    count++;
    if (graph.getLevel(e.getSource()) == 0 && graph.getLevel(e.getTarget()) == 0) {
      NodeData n1=e.getSource().getNodeData();
      NodeData n2=e.getTarget().getNodeData();
      ForceVector f1=n1.getLayoutData();
      ForceVector f2=n2.getLayoutData();
      ForceVector f=edgeForce.calculateForce(n1,n2);
      f1.add(f);
      f2.subtract(f);
    }
  }
  System.out.println(""String_Node_Str"" + count);
  energy0=energy;
  energy=0;
  Displacement displacement=getDisplacement();
  for (  Node n : graph.getTopNodes()) {
    NodeData data=n.getNodeData();
    ForceVector force=data.getLayoutData();
    energy+=force.getEnergy();
    displacement.moveNode(data,force);
  }
  postAlgo();
}",0.96113074204947
143205,"public void moveNode(NodeData node,ForceVector forceData){
  if (forceData.getNorm() > 1e-3) {
    ForceVector displacement=forceData.normalize();
    displacement.multiply(step);
    float x=node.x();
    float y=node.y();
    node.setX(node.x() + displacement.x());
    node.setY(node.y() + displacement.y());
  }
}","public void moveNode(NodeData node,ForceVector forceData){
  ForceVector displacement=forceData;
  displacement.multiply(step);
  float x=node.x();
  float y=node.y();
  node.setX(node.x() + displacement.x());
  node.setY(node.y() + displacement.y());
}",0.5684210526315789
143206,"public static QuadTree buildTree(ClusteredGraph graph,int maxLevel){
  float minX=Float.NEGATIVE_INFINITY;
  float maxX=Float.POSITIVE_INFINITY;
  float minY=Float.NEGATIVE_INFINITY;
  float maxY=Float.POSITIVE_INFINITY;
  for (  Node node : graph.getNodes(0)) {
    minX=Math.min(minX,node.getNodeData().x());
    maxX=Math.max(maxX,node.getNodeData().x());
    minY=Math.min(minY,node.getNodeData().y());
    maxY=Math.max(maxY,node.getNodeData().y());
  }
  float size=Math.max(maxY - minY,maxX - minX);
  QuadTree tree=new QuadTree(minX,minY,size,maxLevel);
  for (  Node node : graph.getNodes(0)) {
    tree.addNode(node.getNodeData());
  }
  return tree;
}","public static QuadTree buildTree(ClusteredGraph graph,int maxLevel){
  float minX=Float.POSITIVE_INFINITY;
  float maxX=Float.NEGATIVE_INFINITY;
  float minY=Float.POSITIVE_INFINITY;
  float maxY=Float.NEGATIVE_INFINITY;
  for (  Node node : graph.getTopNodes()) {
    minX=Math.min(minX,node.getNodeData().x());
    maxX=Math.max(maxX,node.getNodeData().x());
    minY=Math.min(minY,node.getNodeData().y());
    maxY=Math.max(maxY,node.getNodeData().y());
  }
  float size=Math.max(maxY - minY,maxX - minX);
  QuadTree tree=new QuadTree(minX,minY,size,maxLevel);
  for (  Node node : graph.getTopNodes()) {
    tree.addNode(node.getNodeData());
  }
  return tree;
}",0.9292168674698796
143207,"public void resetPropertiesValues(){
  stepRatio=(float)0.9;
  progress=0;
  converged=false;
  optimalDistance=10;
  step=optimalDistance / 10;
  relativeStrength=(float)0.1;
}","public void resetPropertiesValues(){
  stepRatio=(float)0.9;
  progress=0;
  converged=false;
  optimalDistance=getAverageEdge(graph);
  System.out.println(""String_Node_Str"" + optimalDistance);
  step=(float)optimalDistance / 10000;
  relativeStrength=(float)0.2;
}",0.669683257918552
143208,"private void updateStep(){
  if (energy < energy0) {
    progress++;
    if (progress >= 5) {
      progress=0;
      step/=stepRatio;
    }
  }
 else {
    progress=0;
    step*=stepRatio;
  }
  if (Math.abs(energy - energy0) < optimalDistance * 1e-6) {
    converged=true;
  }
}","private void updateStep(){
  if (energy < energy0) {
    progress++;
    if (progress >= 5) {
      progress=0;
      step/=stepRatio;
    }
  }
 else {
    progress=0;
    step*=stepRatio;
  }
  if (Math.abs((energy - energy0) / energy) < 1e-3) {
    converged=true;
  }
}",0.9041591320072332
143209,"@Override public ForceVector calculateForce(Spatial node1,Spatial node2,float distance){
  ForceVector f=new ForceVector(node2.x() - node1.x(),node2.y() - node1.y());
  f.multiply(forceConstant / distance);
  return f;
}","@Override public ForceVector calculateForce(Spatial node1,Spatial node2,float distance){
  ForceVector f=new ForceVector(node2.x() - node1.x(),node2.y() - node1.y());
  f.multiply(-relativeStrength * optimalDistance * optimalDistance / (distance * distance));
  if (Float.isNaN(f.x()) || Float.isNaN(f.y())) {
    f=new ForceVector(100,100);
  }
  return f;
}",0.687392055267703
143210,"public void initAlgo(GraphController graphController){
  graph=graphController.getClusteredDirectedGraph();
}","public void initAlgo(GraphController graphController){
  graph=graphController.getClusteredDirectedGraph();
  level=1;
  CoarseningStrategy coarsening=getCoarseningStrategy();
  coarsening.coarsen(getGraph());
  layout=getForceLayout();
}",0.6282420749279539
143211,"private void recursiveLayout(int level){
  System.out.println(graph.getLevelSize(0) + ""String_Node_Str"" + graph.getEdgeCount());
  if (graph.getLevelSize(0) > 100) {
    CoarseningStrategy coarsening=getCoarseningStrategy();
    coarsening.coarsen(graph);
    recursiveLayout(level + 1);
    layoutLevel(level);
    coarsening.refine(graph);
  }
  System.out.println(""String_Node_Str"" + level);
}","private void recursiveLayout(int level){
  System.out.println(getGraph().getLevelSize(0) + ""String_Node_Str"" + getGraph().getEdgeCount());
  if (level < 2) {
    CoarseningStrategy coarsening=getCoarseningStrategy();
    coarsening.coarsen(getGraph());
    recursiveLayout(level + 1);
    layoutLevel(level);
    coarsening.refine(getGraph());
  }
  System.out.println(""String_Node_Str"" + level);
}",0.5113350125944585
143212,"public void goAlgo(){
  recursiveLayout(0);
  acabou=true;
}","public void goAlgo(){
  if (layout.canAlgo()) {
    layout.goAlgo();
  }
 else {
    layout.endAlgo();
    if (level > 0) {
      CoarseningStrategy coarsening=getCoarseningStrategy();
      coarsening.refine(getGraph());
      level--;
    }
 else {
      acabou=true;
    }
  }
}",0.252199413489736
143213,"private void layoutLevel(int level){
  YifanHu layout=getForceLayout();
  layout.initAlgo(graph);
  layout.resetPropertiesValues();
  layout.optimalDistance=10000000;
  layout.optimalDistance*=Math.pow(4.0 / 7,level / 2.0);
  System.out.println(""String_Node_Str"" + layout.optimalDistance);
  while (layout.canAlgo()) {
    layout.goAlgo();
  }
  layout.endAlgo();
}","private void layoutLevel(int level){
  YifanHu layout=getForceLayout();
  System.out.println(""String_Node_Str"" + layout.optimalDistance);
  while (layout.canAlgo()) {
    layout.goAlgo();
  }
  layout.endAlgo();
}",0.7370242214532872
143214,"public boolean cancel(){
  if (inBackground) {
    if (future.cancel(false)) {
      return true;
    }
  }
  return task.cancel();
}","public boolean cancel(){
  if (inBackground) {
    if (future.cancel(false)) {
      return true;
    }
  }
  if (task != null) {
    return task.cancel();
  }
  return false;
}",0.8580645161290322
143215,"public RunningLongTask(LongTask task,Runnable runnable,String taskName){
  this.task=task;
  this.runnable=runnable;
  this.progress=new ProgressTicket(taskName,new Cancellable(){
    public boolean cancel(){
      LongTaskExecutor.this.cancel();
      return true;
    }
  }
);
  task.setProgressTicket(progress);
}","public RunningLongTask(LongTask task,Runnable runnable,String taskName){
  this.task=task;
  this.runnable=runnable;
  this.progress=new ProgressTicket(taskName,new Cancellable(){
    public boolean cancel(){
      LongTaskExecutor.this.cancel();
      return true;
    }
  }
);
  if (task != null) {
    task.setProgressTicket(progress);
  }
}",0.9575757575757576
143216,"public void execute(LongTask task,Runnable runnable){
  execute(task,runnable,""String_Node_Str"");
}","/** 
 * Execute a long task with cancel and progress support. Task can be <code>null</code>. In this case <code>runnable</code> will be executed normally, but without cancel and progress support.
 * @param task the task to be executed, can be <code>null</code>.
 * @param runnable the runnable to be executed
 * @throws NullPointerException if <code>runnable</code> is null
 * @throws IllegalStateException if a task is still executing at this time
 */
public void execute(LongTask task,Runnable runnable){
  execute(task,runnable,""String_Node_Str"");
}",0.304147465437788
143217,"public void generate(final Generator generator){
  String title=generator.getName();
  GeneratorUI ui=generator.getUI();
  if (ui != null) {
    ui.setup(generator);
    DialogDescriptor dd=new DialogDescriptor(ui.getPanel(),title);
    Object result=DialogDisplayer.getDefault().notify(dd);
    if (result != NotifyDescriptor.OK_OPTION) {
      return;
    }
    ui.unsetup();
  }
  final Container container=Lookup.getDefault().lookup(Container.class);
  container.setSource(""String_Node_Str"" + generator.getName());
  String taskname=""String_Node_Str"" + generator.getName();
  executor.execute(generator,new Runnable(){
    public void run(){
      generator.generate(container.getLoader());
      Lookup.getDefault().lookup(Processor.class).process(container.getUnloader());
    }
  }
,taskname);
}","public void generate(final Generator generator){
  String title=generator.getName();
  GeneratorUI ui=generator.getUI();
  if (ui != null) {
    ui.setup(generator);
    DialogDescriptor dd=new DialogDescriptor(ui.getPanel(),title);
    Object result=DialogDisplayer.getDefault().notify(dd);
    if (result != NotifyDescriptor.OK_OPTION) {
      return;
    }
    ui.unsetup();
  }
  final Container container=Lookup.getDefault().lookup(Container.class);
  container.setSource(""String_Node_Str"" + generator.getName());
  String taskname=""String_Node_Str"" + generator.getName();
  LongTaskErrorHandler errorHandler=new LongTaskErrorHandler(){
    public void fatalError(    Throwable t){
      NotifyDescriptor.Exception ex=new NotifyDescriptor.Exception(t);
      DialogDisplayer.getDefault().notify(ex);
    }
  }
;
  executor.execute(generator,new Runnable(){
    public void run(){
      generator.generate(container.getLoader());
      Lookup.getDefault().lookup(Processor.class).process(container.getUnloader());
    }
  }
,taskname,errorHandler);
}",0.8556034482758621
143218,"private void importXML(FileObject fileObject,Importer importer,final Container container){
  final Document document=getDocument(fileObject);
  final XMLImporter xmlImporter=(XMLImporter)importer;
  final Report report=container.getReport();
  LongTask task=null;
  if (importer instanceof LongTask) {
    task=(LongTask)importer;
  }
  executor.execute(task,new Runnable(){
    public void run(){
      try {
        xmlImporter.importData(document,container.getLoader(),report);
        finishImport(container);
      }
 catch (      Exception ex) {
        Exceptions.printStackTrace(ex);
      }
    }
  }
,""String_Node_Str"" + fileObject.getNameExt());
}","private void importXML(FileObject fileObject,Importer importer,final Container container){
  final Document document=getDocument(fileObject);
  final XMLImporter xmlImporter=(XMLImporter)importer;
  final Report report=container.getReport();
  LongTask task=null;
  if (importer instanceof LongTask) {
    task=(LongTask)importer;
  }
  executor.execute(task,new Runnable(){
    public void run(){
      try {
        xmlImporter.importData(document,container.getLoader(),report);
        finishImport(container);
      }
 catch (      Exception ex) {
        Exceptions.printStackTrace(ex);
      }
    }
  }
,""String_Node_Str"" + fileObject.getNameExt(),new LongTaskErrorHandler(){
    public void fatalError(    Throwable t){
      NotifyDescriptor.Exception ex=new NotifyDescriptor.Exception(t);
      DialogDisplayer.getDefault().notify(ex);
    }
  }
);
}",0.8629776021080369
143219,"public void run(){
  try {
    textImporter.importData(reader,container.getLoader(),report);
    finishImport(container);
  }
 catch (  Exception ex) {
    Exceptions.printStackTrace(ex);
  }
}","public void run(){
  try {
    textImporter.importData(reader,container.getLoader(),report);
    finishImport(container);
  }
 catch (  Exception ex) {
    throw new RuntimeException(ex);
  }
}",0.911917098445596
143220,"private void importText(FileObject fileObject,Importer importer,final Container container){
  final BufferedReader reader=getTextReader(fileObject);
  final TextImporter textImporter=(TextImporter)importer;
  final Report report=container.getReport();
  LongTask task=null;
  if (importer instanceof LongTask) {
    task=(LongTask)importer;
  }
  executor.execute(task,new Runnable(){
    public void run(){
      try {
        textImporter.importData(reader,container.getLoader(),report);
        finishImport(container);
      }
 catch (      Exception ex) {
        Exceptions.printStackTrace(ex);
      }
    }
  }
,""String_Node_Str"" + fileObject.getNameExt());
}","private void importText(FileObject fileObject,Importer importer,final Container container){
  final BufferedReader reader=getTextReader(fileObject);
  final TextImporter textImporter=(TextImporter)importer;
  final Report report=container.getReport();
  LongTask task=null;
  if (importer instanceof LongTask) {
    task=(LongTask)importer;
  }
  final LongTaskErrorHandler errorHandler=new LongTaskErrorHandler(){
    public void fatalError(    Throwable t){
      NotifyDescriptor.Exception ex=new NotifyDescriptor.Exception(t);
      DialogDisplayer.getDefault().notify(ex);
    }
  }
;
  executor.execute(task,new Runnable(){
    public void run(){
      try {
        textImporter.importData(reader,container.getLoader(),report);
        finishImport(container);
      }
 catch (      Exception ex) {
        throw new RuntimeException(ex);
      }
    }
  }
,""String_Node_Str"" + fileObject.getNameExt(),errorHandler);
}",0.8165829145728644
143221,"public void generate(ContainerLoader container){
  int max=numberOfNodes;
  if (wiringProbability > 0) {
    max+=numberOfNodes - 1;
  }
  progress.start(max);
  int progressUnit=0;
  Random random=new Random();
  NodeDraft[] nodeArray=new NodeDraft[numberOfNodes];
  for (int i=0; i < numberOfNodes && !cancel; i++) {
    NodeDraft nodeDraft=container.factory().newNodeDraft();
    nodeDraft.setId(""String_Node_Str"" + i);
    container.addNode(nodeDraft);
    nodeArray[i]=nodeDraft;
    progress.progress(++progressUnit);
  }
  if (wiringProbability > 0) {
    for (int i=0; i < numberOfNodes - 1 && !cancel; i++) {
      NodeDraft node1=nodeArray[i];
      for (int j=i + 1; j < numberOfNodes && !cancel; j++) {
        NodeDraft node2=nodeArray[j];
        if (random.nextDouble() < wiringProbability) {
          EdgeDraft edgeDraft=container.factory().newEdgeDraft();
          edgeDraft.setSource(node1);
          edgeDraft.setTarget(node2);
          container.addEdge(edgeDraft);
        }
      }
      progress.progress(++progressUnit);
    }
  }
}","public void generate(ContainerLoader container){
  int max=numberOfNodes;
  if (wiringProbability > 0) {
    max+=numberOfNodes - 1;
  }
  Progress.start(progress,max);
  int progressUnit=0;
  Random random=new Random();
  NodeDraft[] nodeArray=new NodeDraft[numberOfNodes];
  for (int i=0; i < numberOfNodes && !cancel; i++) {
    NodeDraft nodeDraft=container.factory().newNodeDraft();
    nodeDraft.setId(""String_Node_Str"" + i);
    container.addNode(nodeDraft);
    nodeArray[i]=nodeDraft;
    Progress.progress(progress,++progressUnit);
  }
  if (wiringProbability > 0) {
    for (int i=0; i < numberOfNodes - 1 && !cancel; i++) {
      NodeDraft node1=nodeArray[i];
      for (int j=i + 1; j < numberOfNodes && !cancel; j++) {
        NodeDraft node2=nodeArray[j];
        if (random.nextDouble() < wiringProbability) {
          EdgeDraft edgeDraft=container.factory().newEdgeDraft();
          edgeDraft.setSource(node1);
          edgeDraft.setTarget(node2);
          container.addEdge(edgeDraft);
        }
      }
      Progress.progress(progress,++progressUnit);
    }
  }
}",0.9771774569166278
143222,"/** 
 * Notify the user about completed workunits and show additional detailed message.
 * @param message details about the status of the task
 * @param workunit a cumulative number of workunits completed so far
 */
public void progress(String message,int workunit){
  if (handle != null) {
    int ratioProgress=(int)(100.0 * workunit / progressTotal);
    if (ratioProgress != progress100) {
      progress100=ratioProgress;
      handle.progress(message,ratioProgress);
    }
  }
}","/** 
 * Notify the user about completed workunits and show additional detailed message.
 * @param message details about the status of the task
 * @param workunit a cumulative number of workunits completed so far
 */
public void progress(String message,int workunit){
  currentUnit=workunit;
  if (handle != null) {
    int ratioProgress=(int)(100.0 * workunit / progressTotal);
    if (ratioProgress != progress100) {
      progress100=ratioProgress;
      handle.progress(message,ratioProgress);
    }
  }
}",0.9758064516129032
143223,"/** 
 * Currently indeterminate task can be switched to show percentage completed.
 * @param workunits workunits total number of workunits that will be processed
 */
public void switchToDeterminate(int workunits){
  if (handle != null) {
    this.progressTotal=workunits;
    handle.switchToDeterminate(workunits);
  }
}","/** 
 * Currently indeterminate task can be switched to show percentage completed.
 * @param workunits workunits total number of workunits that will be processed
 */
public void switchToDeterminate(int workunits){
  if (handle != null) {
    this.progressTotal=workunits;
    handle.switchToDeterminate(100);
  }
}",0.9810725552050472
143224,"public void executeLayout(final Layout layout){
  executor.execute(new Runnable(){
    public void run(){
      GraphController graphController=Lookup.getDefault().lookup(GraphController.class);
      layout.initAlgo(graphController);
      layout.resetPropertiesValues();
      while (layout.canAlgo()) {
        layout.goAlgo();
      }
      layout.endAlgo();
    }
  }
);
}","public void executeLayout(final Layout layout){
  System.out.println(""String_Node_Str"");
  executor.execute(new Runnable(){
    public void run(){
      GraphController graphController=Lookup.getDefault().lookup(GraphController.class);
      System.out.println(""String_Node_Str"");
      layout.initAlgo(graphController);
      layout.resetPropertiesValues();
      while (layout.canAlgo()) {
        layout.goAlgo();
      }
      System.out.println(""String_Node_Str"");
      layout.endAlgo();
    }
  }
);
}",0.8519774011299435
143225,"public LayoutControllerImpl(){
  layouts=new ArrayList<Layout>(Lookup.getDefault().lookupAll(Layout.class));
  executor=Executors.newSingleThreadExecutor();
}","public LayoutControllerImpl(){
  layouts=new ArrayList<LayoutBuilder>(Lookup.getDefault().lookupAll(LayoutBuilder.class));
  executor=Executors.newSingleThreadExecutor();
}",0.9575757575757576
143226,"public void run(){
  GraphController graphController=Lookup.getDefault().lookup(GraphController.class);
  layout.initAlgo(graphController);
  layout.resetPropertiesValues();
  while (layout.canAlgo()) {
    layout.goAlgo();
  }
  layout.endAlgo();
}","public void run(){
  GraphController graphController=Lookup.getDefault().lookup(GraphController.class);
  System.out.println(""String_Node_Str"");
  layout.initAlgo(graphController);
  layout.resetPropertiesValues();
  while (layout.canAlgo()) {
    layout.goAlgo();
  }
  System.out.println(""String_Node_Str"");
  layout.endAlgo();
}",0.8586206896551725
143227,"public void setInited(){
  if (!inited) {
    inited=true;
    if (requestAnimation) {
      startAnimating();
      requestAnimation=false;
    }
  }
}","public void setInited(){
  if (!inited) {
    inited=true;
    if (requestAnimation) {
      graphDrawable.display();
      startAnimating();
      requestAnimation=false;
    }
  }
}",0.9074626865671642
143228,"@Override public void startAnimating(){
  if (!scheduler.isAnimating()) {
    System.out.println(""String_Node_Str"");
    scheduler.start();
  }
}","@Override public void startAnimating(){
  if (!scheduler.isAnimating()) {
    System.out.println(""String_Node_Str"");
    scheduler.start();
    graphIO.startMouseListening();
  }
}",0.8923076923076924
143229,"@Override public void stopAnimating(){
  if (scheduler.isAnimating()) {
    System.out.println(""String_Node_Str"");
    scheduler.stop();
  }
}","@Override public void stopAnimating(){
  if (scheduler.isAnimating()) {
    System.out.println(""String_Node_Str"");
    scheduler.stop();
    graphIO.stopMouseListening();
  }
}",0.8930817610062893
143230,"@Override protected void init(GL gl){
  System.out.println(""String_Node_Str"");
  graphComponent.setCursor(Cursor.getDefaultCursor());
  engine.initEngine(gl,glu);
  VizController.getInstance().getGraphIO().startMouseListening();
}","@Override protected void init(GL gl){
  System.out.println(""String_Node_Str"");
  graphComponent.setCursor(Cursor.getDefaultCursor());
  engine.initEngine(gl,glu);
}",0.8324873096446701
143231,"private void importFakeGraph(){
  CompleteTreeImporter importer=new CompleteTreeImporter(treeStructure,sightManager.getMainSight());
  importer.importGraph(3,false);
  System.out.println(""String_Node_Str"" + treeStructure.getTreeSize());
  RandomEdgesGenerator reg=new RandomEdgesGenerator(treeStructure);
  reg.generatPhysicalEdges(10);
  freeMode.init();
}","private void importFakeGraph(){
  CompleteTreeImporter importer=new CompleteTreeImporter(treeStructure,sightManager.getMainSight());
  importer.importGraph(5,true);
  System.out.println(""String_Node_Str"" + treeStructure.getTreeSize());
  RandomEdgesGenerator reg=new RandomEdgesGenerator(treeStructure);
  reg.generatPhysicalEdges(300);
  freeMode.init();
}",0.9831932773109244
143232,"public void init(){
  SightImpl sight=sightManager.getMainSight();
  SightTreeIterator enabledNodes=new SightTreeIterator(treeStructure,sight);
  for (; enabledNodes.hasNext(); ) {
    PreNode n=enabledNodes.next();
    NodeImpl ni=n.getNode();
    ni.setX(n.getPre() * 50);
    ni.setY(n.getPost() * 50);
  }
  edgeProcessing.init(sightManager.getMainSight());
  sightManager.getMainSight().getSightCache().reset();
}","public void init(){
  SightImpl sight=sightManager.getMainSight();
  edgeProcessing.init(sightManager.getMainSight());
  sightManager.getMainSight().getSightCache().reset();
}",0.5902192242833052
143233,"public NodeImpl(){
  x=((float)Math.random()) * 2000 - 1000.0f;
  y=((float)Math.random()) * 2000 - 1000.0f;
  r=(float)Math.random();
  g=(float)Math.random();
  b=(float)Math.random();
}","public NodeImpl(){
  x=((float)Math.random()) * 2000 - 1000.0f;
  y=((float)Math.random()) * 2000 - 1000.0f;
  r=(float)Math.random();
  g=(float)Math.random();
  b=(float)Math.random();
  size=((float)Math.random()) * 20 + 10;
}",0.9016786570743404
143234,"private void loadConfig(){
  NB_SUBDIVISIONS=4;
switch (potato.getLevel()) {
case 0:
    RAYON=21f;
  INFLUENCE=0.71f;
RAYON_INFLUENCE_MAX=97f;
break;
case 1:
RAYON=26.5f;
INFLUENCE=0.41f;
RAYON_INFLUENCE_MAX=127.5f;
break;
default :
RAYON=39f;
INFLUENCE=0.2f;
RAYON_INFLUENCE_MAX=179f;
break;
}
INTER=RAYON * Math.sqrt(2.0) / NB_SUBDIVISIONS;
}","private void loadConfig(Node node){
  NB_SUBDIVISIONS=4;
switch (potato.getLevel()) {
case 0:
    RAYON=21f;
  INFLUENCE=0.71f;
RAYON_INFLUENCE_MAX=97f;
break;
case 1:
RAYON=26.5f;
INFLUENCE=0.41f;
RAYON_INFLUENCE_MAX=127.5f;
break;
default :
RAYON=39f;
INFLUENCE=0.2f;
RAYON_INFLUENCE_MAX=179f;
break;
}
INTER=RAYON * Math.sqrt(2.0) / NB_SUBDIVISIONS;
}",0.9871244635193132
143235,"public void renderPotato(PotatoImpl potato){
  this.potato=potato;
  loadConfig();
  triangleBuffer=new ArrayList<float[]>();
  disksBuffer=new ArrayList<float[]>();
  for (  Node node : potato.getContent()) {
    createCircle(node.x(),node.y(),RAYON);
    for (int cote=0; cote < 4; cote++) {
      double origine_i, origine_j, step_i, step_j, sens_i, sens_j;
      int g_tailleGrille=NB_SUBDIVISIONS;
      if (cote == 0) {
        origine_i=node.x() - RAYON * Math.sqrt(2.0) / 2.0;
        origine_j=node.y();
        step_i=-INTER;
        step_j=INTER;
        sens_i=1;
        sens_j=1;
      }
 else       if (cote == 1) {
        origine_i=node.x() - RAYON * Math.sqrt(2.0) / 2.0;
        origine_j=node.y() - RAYON * Math.sqrt(2.0) / 2.0;
        step_i=-INTER;
        step_j=-INTER;
        sens_i=1;
        sens_j=1;
      }
 else       if (cote == 2) {
        origine_i=node.x() - RAYON * Math.sqrt(2.0) / 2.0;
        origine_j=node.y() - RAYON * Math.sqrt(2.0) / 2.0;
        step_i=-INTER;
        step_j=-INTER;
        sens_i=1;
        sens_j=1;
      }
 else {
        origine_i=node.x() + RAYON * Math.sqrt(2.0) / 2.0;
        origine_j=node.y() - RAYON * Math.sqrt(2.0) / 2.0;
        step_i=INTER;
        step_j=-INTER;
        sens_i=1;
        sens_j=1;
      }
      boolean finCote=false;
      while (!finCote) {
        finCote=true;
        boolean bl=false, br=false, tr=false, tl=false;
        double fbl, fbr, ftr, ftl;
        float p1x, p1y, p2x, p2y, p3x, p3y, p4x, p4y;
        int actifs;
        for (int k=0; k < g_tailleGrille; k++) {
          int i=0, j=0;
          if (cote == 0 || cote == 1) {
            i=k;
          }
 else {
            j=k;
          }
          double LEFT=left(i,origine_i);
          double BOTTOM=bottom(j,origine_j);
          double RIGHT=right(i + sens_i,origine_i);
          double TOP=top(j + sens_j,origine_j);
          fbl=calculBlob(LEFT,BOTTOM,node);
          if (fbl >= INFLUENCE) {
            bl=true;
          }
 else {
            bl=false;
          }
          fbr=calculBlob(RIGHT,BOTTOM,node);
          if (fbr >= INFLUENCE) {
            br=true;
          }
 else {
            br=false;
          }
          ftr=calculBlob(RIGHT,TOP,node);
          if (ftr >= INFLUENCE) {
            tr=true;
          }
 else {
            tr=false;
          }
          ftl=calculBlob(LEFT,TOP,node);
          if (ftl >= INFLUENCE) {
            tl=true;
          }
 else {
            tl=false;
          }
          if (!bl && !br && !tr&& !tl) {
            continue;
          }
 else           if ((!bl || (bl && fbl == -1)) && (!br || (br && fbr == -1)) && (!tr || (tr && ftr == -1))&& (!tl || (tl && ftl == -1))) {
            continue;
          }
          finCote=false;
          actifs=(bl ? 1 : 0) + (br ? 1 : 0) + (tr ? 1 : 0)+ (tl ? 1 : 0);
          if (actifs == 0) {
            continue;
          }
          float LEFTf=(float)LEFT;
          float TOPf=(float)TOP;
          float RIGHTf=(float)RIGHT;
          float BOTTOMf=(float)BOTTOM;
          p1x=LEFTf;
          p1y=(float)(j * INTER + INTER * inter_lin(fbl,ftl) + origine_j);
          p2x=(float)(i * INTER + INTER * inter_lin(fbl,fbr) + origine_i);
          p2y=BOTTOMf;
          p3x=RIGHTf;
          p3y=(float)(j * INTER + INTER * inter_lin(fbr,ftr) + origine_j);
          p4x=(float)(i * INTER + INTER * inter_lin(ftl,ftr) + origine_i);
          p4y=TOPf;
          if (actifs == 4) {
            createSquare(LEFTf,BOTTOMf,RIGHTf,BOTTOMf,RIGHTf,TOPf,LEFTf,TOPf);
          }
 else           if (actifs == 3) {
            if (!bl) {
              createTriangle(p1x,p1y,p2x,p2y,RIGHTf,BOTTOMf);
              createTriangle(p1x,p1y,RIGHTf,BOTTOMf,RIGHTf,TOPf);
              createTriangle(p1x,p1y,RIGHTf,TOPf,LEFTf,TOPf);
            }
 else             if (!br) {
              createTriangle(LEFTf,BOTTOMf,p2x,p2y,p3x,p3y);
              createTriangle(LEFTf,BOTTOMf,p3x,p3y,RIGHTf,TOPf);
              createTriangle(LEFTf,BOTTOMf,RIGHTf,TOPf,LEFTf,TOPf);
            }
 else             if (!tr) {
              createTriangle(p3x,p3y,p4x,p4y,LEFTf,TOPf);
              createTriangle(p3x,p3y,LEFTf,TOPf,LEFTf,BOTTOMf);
              createTriangle(p3x,p3y,LEFTf,BOTTOMf,RIGHTf,BOTTOMf);
            }
 else             if (!tl) {
              createTriangle(p4x,p4y,p1x,p1y,LEFTf,BOTTOMf);
              createTriangle(p4x,p4y,LEFTf,BOTTOMf,RIGHTf,BOTTOMf);
              createTriangle(p4x,p4y,RIGHTf,BOTTOMf,RIGHTf,TOPf);
            }
          }
 else           if (actifs == 2) {
            if (bl == tl) {
              if (bl) {
                createSquare(p2x,p2y,p4x,p4y,LEFTf,TOPf,LEFTf,BOTTOMf);
              }
 else {
                createSquare(p2x,p2y,RIGHTf,BOTTOMf,RIGHTf,TOPf,p4x,p4y);
              }
            }
 else             if (bl == br) {
              if (bl) {
                createSquare(LEFTf,BOTTOMf,RIGHTf,BOTTOMf,p3x,p3y,p1x,p1y);
              }
 else {
                createSquare(p3x,p3y,RIGHTf,TOPf,LEFTf,TOPf,p1x,p1y);
              }
            }
 else {
              if (bl == tr && !bl) {
                createTriangle(p1x,p1y,p2x,p2y,RIGHTf,BOTTOMf);
                createTriangle(p1x,p1y,RIGHTf,BOTTOMf,p3x,p3y);
                createTriangle(p1x,p1y,p3x,p3y,p4x,p4y);
                createTriangle(p1x,p1y,p4x,p4y,LEFTf,TOPf);
              }
 else {
                createTriangle(LEFTf,BOTTOMf,p2x,p2y,p3x,p3y);
                createTriangle(LEFTf,BOTTOMf,p3x,p3y,RIGHTf,TOPf);
                createTriangle(LEFTf,BOTTOMf,RIGHTf,TOPf,p4x,p4y);
                createTriangle(LEFTf,BOTTOMf,p4x,p4y,p1x,p1y);
              }
            }
          }
 else           if (actifs == 1) {
            if (bl) {
              createTriangle(p1x,p1y,LEFTf,BOTTOMf,p2x,p2y);
            }
 else             if (br) {
              createTriangle(p2x,p2y,RIGHTf,BOTTOMf,p3x,p3y);
            }
 else             if (tr) {
              createTriangle(p3x,p3y,RIGHTf,TOPf,p4x,p4y);
            }
 else             if (tl) {
              createTriangle(p4x,p4y,LEFTf,TOPf,p1x,p1y);
            }
          }
        }
        origine_i+=step_i;
        origine_j+=step_j;
        g_tailleGrille+=2;
      }
    }
  }
  PotatoDisplay display=new PotatoDisplay(triangleBuffer,disksBuffer);
  potato.setDisplay(display);
}","public void renderPotato(PotatoImpl potato){
  this.potato=potato;
  triangleBuffer=new ArrayList<float[]>();
  disksBuffer=new ArrayList<float[]>();
  for (  Node node : potato.getContent()) {
    loadConfig(node);
    createCircle(node.x(),node.y(),RAYON);
    for (int cote=0; cote < 4; cote++) {
      double origine_i, origine_j, step_i, step_j, sens_i, sens_j;
      int g_tailleGrille=NB_SUBDIVISIONS;
      if (cote == 0) {
        origine_i=node.x() - RAYON * Math.sqrt(2.0) / 2.0;
        origine_j=node.y();
        step_i=-INTER;
        step_j=INTER;
        sens_i=1;
        sens_j=1;
      }
 else       if (cote == 1) {
        origine_i=node.x() - RAYON * Math.sqrt(2.0) / 2.0;
        origine_j=node.y() - RAYON * Math.sqrt(2.0) / 2.0;
        step_i=-INTER;
        step_j=-INTER;
        sens_i=1;
        sens_j=1;
      }
 else       if (cote == 2) {
        origine_i=node.x() - RAYON * Math.sqrt(2.0) / 2.0;
        origine_j=node.y() - RAYON * Math.sqrt(2.0) / 2.0;
        step_i=-INTER;
        step_j=-INTER;
        sens_i=1;
        sens_j=1;
      }
 else {
        origine_i=node.x() + RAYON * Math.sqrt(2.0) / 2.0;
        origine_j=node.y() - RAYON * Math.sqrt(2.0) / 2.0;
        step_i=INTER;
        step_j=-INTER;
        sens_i=1;
        sens_j=1;
      }
      boolean finCote=false;
      while (!finCote) {
        finCote=true;
        boolean bl=false, br=false, tr=false, tl=false;
        double fbl, fbr, ftr, ftl;
        float p1x, p1y, p2x, p2y, p3x, p3y, p4x, p4y;
        int actifs;
        for (int k=0; k < g_tailleGrille; k++) {
          int i=0, j=0;
          if (cote == 0 || cote == 1) {
            i=k;
          }
 else {
            j=k;
          }
          double LEFT=left(i,origine_i);
          double BOTTOM=bottom(j,origine_j);
          double RIGHT=right(i + sens_i,origine_i);
          double TOP=top(j + sens_j,origine_j);
          fbl=calculBlob(LEFT,BOTTOM,node);
          if (fbl >= INFLUENCE) {
            bl=true;
          }
 else {
            bl=false;
          }
          fbr=calculBlob(RIGHT,BOTTOM,node);
          if (fbr >= INFLUENCE) {
            br=true;
          }
 else {
            br=false;
          }
          ftr=calculBlob(RIGHT,TOP,node);
          if (ftr >= INFLUENCE) {
            tr=true;
          }
 else {
            tr=false;
          }
          ftl=calculBlob(LEFT,TOP,node);
          if (ftl >= INFLUENCE) {
            tl=true;
          }
 else {
            tl=false;
          }
          if (!bl && !br && !tr&& !tl) {
            continue;
          }
 else           if ((!bl || (bl && fbl == -1)) && (!br || (br && fbr == -1)) && (!tr || (tr && ftr == -1))&& (!tl || (tl && ftl == -1))) {
            continue;
          }
          finCote=false;
          actifs=(bl ? 1 : 0) + (br ? 1 : 0) + (tr ? 1 : 0)+ (tl ? 1 : 0);
          if (actifs == 0) {
            continue;
          }
          float LEFTf=(float)LEFT;
          float TOPf=(float)TOP;
          float RIGHTf=(float)RIGHT;
          float BOTTOMf=(float)BOTTOM;
          p1x=LEFTf;
          p1y=(float)(j * INTER + INTER * inter_lin(fbl,ftl) + origine_j);
          p2x=(float)(i * INTER + INTER * inter_lin(fbl,fbr) + origine_i);
          p2y=BOTTOMf;
          p3x=RIGHTf;
          p3y=(float)(j * INTER + INTER * inter_lin(fbr,ftr) + origine_j);
          p4x=(float)(i * INTER + INTER * inter_lin(ftl,ftr) + origine_i);
          p4y=TOPf;
          if (actifs == 4) {
            createSquare(LEFTf,BOTTOMf,RIGHTf,BOTTOMf,RIGHTf,TOPf,LEFTf,TOPf);
          }
 else           if (actifs == 3) {
            if (!bl) {
              createTriangle(p1x,p1y,p2x,p2y,RIGHTf,BOTTOMf);
              createTriangle(p1x,p1y,RIGHTf,BOTTOMf,RIGHTf,TOPf);
              createTriangle(p1x,p1y,RIGHTf,TOPf,LEFTf,TOPf);
            }
 else             if (!br) {
              createTriangle(LEFTf,BOTTOMf,p2x,p2y,p3x,p3y);
              createTriangle(LEFTf,BOTTOMf,p3x,p3y,RIGHTf,TOPf);
              createTriangle(LEFTf,BOTTOMf,RIGHTf,TOPf,LEFTf,TOPf);
            }
 else             if (!tr) {
              createTriangle(p3x,p3y,p4x,p4y,LEFTf,TOPf);
              createTriangle(p3x,p3y,LEFTf,TOPf,LEFTf,BOTTOMf);
              createTriangle(p3x,p3y,LEFTf,BOTTOMf,RIGHTf,BOTTOMf);
            }
 else             if (!tl) {
              createTriangle(p4x,p4y,p1x,p1y,LEFTf,BOTTOMf);
              createTriangle(p4x,p4y,LEFTf,BOTTOMf,RIGHTf,BOTTOMf);
              createTriangle(p4x,p4y,RIGHTf,BOTTOMf,RIGHTf,TOPf);
            }
          }
 else           if (actifs == 2) {
            if (bl == tl) {
              if (bl) {
                createSquare(p2x,p2y,p4x,p4y,LEFTf,TOPf,LEFTf,BOTTOMf);
              }
 else {
                createSquare(p2x,p2y,RIGHTf,BOTTOMf,RIGHTf,TOPf,p4x,p4y);
              }
            }
 else             if (bl == br) {
              if (bl) {
                createSquare(LEFTf,BOTTOMf,RIGHTf,BOTTOMf,p3x,p3y,p1x,p1y);
              }
 else {
                createSquare(p3x,p3y,RIGHTf,TOPf,LEFTf,TOPf,p1x,p1y);
              }
            }
 else {
              if (bl == tr && !bl) {
                createTriangle(p1x,p1y,p2x,p2y,RIGHTf,BOTTOMf);
                createTriangle(p1x,p1y,RIGHTf,BOTTOMf,p3x,p3y);
                createTriangle(p1x,p1y,p3x,p3y,p4x,p4y);
                createTriangle(p1x,p1y,p4x,p4y,LEFTf,TOPf);
              }
 else {
                createTriangle(LEFTf,BOTTOMf,p2x,p2y,p3x,p3y);
                createTriangle(LEFTf,BOTTOMf,p3x,p3y,RIGHTf,TOPf);
                createTriangle(LEFTf,BOTTOMf,RIGHTf,TOPf,p4x,p4y);
                createTriangle(LEFTf,BOTTOMf,p4x,p4y,p1x,p1y);
              }
            }
          }
 else           if (actifs == 1) {
            if (bl) {
              createTriangle(p1x,p1y,LEFTf,BOTTOMf,p2x,p2y);
            }
 else             if (br) {
              createTriangle(p2x,p2y,RIGHTf,BOTTOMf,p3x,p3y);
            }
 else             if (tr) {
              createTriangle(p3x,p3y,RIGHTf,TOPf,p4x,p4y);
            }
 else             if (tl) {
              createTriangle(p4x,p4y,LEFTf,TOPf,p1x,p1y);
            }
          }
        }
        origine_i+=step_i;
        origine_j+=step_j;
        g_tailleGrille+=2;
      }
    }
  }
  PotatoDisplay display=new PotatoDisplay(triangleBuffer,disksBuffer);
  potato.setDisplay(display);
  System.out.println(""String_Node_Str"" + potato.getNode().getIndex());
}",0.991494342567304
143236,"public void showTreeAsTable(){
  System.out.println(""String_Node_Str"");
  System.out.println(""String_Node_Str"");
  int pre=0;
  for (  PreNode p : tree) {
    System.out.println(p.pre + ""String_Node_Str"" + p.size+ ""String_Node_Str""+ p.level+ ""String_Node_Str""+ p.parent+ ""String_Node_Str""+ p.post+ ""String_Node_Str""+ p.preTrace);
    pre++;
  }
}","public void showTreeAsTable(SightImpl sight){
  System.out.println(""String_Node_Str"");
  System.out.println(""String_Node_Str"");
  int pre=0;
  for (  PreNode p : tree) {
    boolean enabled=p.isEnabled(sight);
    System.out.println(p.pre + ""String_Node_Str"" + p.size+ ""String_Node_Str""+ p.level+ ""String_Node_Str""+ p.parent+ ""String_Node_Str""+ p.post+ ""String_Node_Str""+ p.preTrace+ ""String_Node_Str""+ enabled);
    pre++;
  }
}",0.8929032258064517
143237,"public EntityType(final String type){
  this.type=type;
}","@JsonCreator public EntityType(@JsonProperty(""String_Node_Str"") final String type){
  this.type=type;
}",0.7125
143238,"@JsonCreator public Phrase(@JsonProperty(""String_Node_Str"") final List<Token> tokens,@JsonProperty(""String_Node_Str"") final int _phrasePos,@JsonProperty(""String_Node_Str"") final int _phraseLen,@JsonProperty(""String_Node_Str"") final int _stubPos){
  phrasePosition=_phrasePos;
  phraseLength=_phraseLen;
  phrase=ImmutableList.copyOf(tokens);
  phraseType=UNKNOWN;
  attachedWordMap=new HashMap<>();
  phraseStubPosition=_stubPos;
  phraseStubLength=phrase.size();
}","@JsonCreator public Phrase(@JsonProperty(""String_Node_Str"") final List<Token> tokens,@JsonProperty(""String_Node_Str"") final int _phrasePos,@JsonProperty(""String_Node_Str"") final int _phraseLen,@JsonProperty(""String_Node_Str"") final int _stubPos,@JsonProperty(""String_Node_Str"") final EntityType type){
  phrasePosition=_phrasePos;
  phraseLength=_phraseLen;
  phrase=ImmutableList.copyOf(tokens);
  phraseType=type;
  attachedWordMap=new HashMap<>();
  phraseStubPosition=_stubPos;
  phraseStubLength=phrase.size();
}",0.9327902240325866
143239,"public Date(final List<Token> tokens,final int pos,final int len,final int stubPos){
  super(tokens,pos,len,stubPos);
  this.phraseType=EntityType.DATE;
  this.isDate=true;
}","public Date(final List<Token> tokens,final int pos,final int len,final int stubPos){
  super(tokens,pos,len,stubPos,EntityType.DATE);
  this.isDate=true;
}",0.9300911854103344
143240,"public Name(final List<Token> tokens,final int pos,final int len,final int stubPos){
  super(tokens,pos,len,stubPos);
}","public Name(final List<Token> tokens,final int pos,final int len,final int stubPos){
  super(tokens,pos,len,stubPos,EntityType.UNKNOWN);
}",0.926070038910506
143241,"/** 
 * This method will do the classification of a Phrase with a EntityType. 
 */
public void classify(){
  EntityType type=null;
  double s=0;
  boolean ambiguous=false;
  for (  final Map.Entry<EntityType,Double> e : score.entrySet()) {
    if (type == null) {
      type=e.getKey();
      s=e.getValue();
    }
 else {
      if (Double.compare(s,e.getValue()) < 0) {
        type=e.getKey();
        s=e.getValue();
      }
 else       if (Double.compare(s,e.getValue()) == 0) {
        ambiguous=true;
      }
    }
  }
  this.phraseType=ambiguous ? UNKNOWN : type;
}","/** 
 * This method will do the classification of a Phrase with a EntityType. 
 */
public void classify(){
  EntityType type=null;
  double s=0;
  boolean ambiguous=false;
  for (  final Map.Entry<EntityType,Double> e : score.entrySet()) {
    if (type == null) {
      type=e.getKey();
      s=e.getValue();
    }
 else {
      if (Double.compare(e.getValue(),s) > 0) {
        type=e.getKey();
        s=e.getValue();
        ambiguous=false;
      }
 else       if (Double.compare(s,e.getValue()) == 0) {
        ambiguous=true;
      }
    }
  }
  this.phraseType=ambiguous ? UNKNOWN : type;
}",0.8810949529512404
143242,"@SuppressWarnings(""String_Node_Str"") @Override public double score(final Phrase p,final int weightIndex){
  final int w=getWeight(weightIndex);
  if (w == 0)   return 0;
  double score=0.0;
  for (  final Token t : p.phrase) {
    final String word=Strings.simplify(toEngLowerCase(t.text));
    final double x=(WORDS.contains(word)) ? 1.0 : 0.0;
    score+=x;
  }
  return score * w;
}","@SuppressWarnings(""String_Node_Str"") @Override public double score(final Phrase p,final int weightIndex){
  final int w=getWeight(weightIndex);
  if (w == 0)   return 0;
  double score=0.0;
  for (  final Token t : p.phrase) {
    final String word=Strings.simplify(t.text);
    final double x=(WORDS.contains(word)) ? 1.0 : 0.0;
    score+=x;
  }
  return score * w;
}",0.9655172413793104
143243,"@DataProvider(name=""String_Node_Str"") public Object[][] configTestProvider() throws IOException {
  return new Object[][]{{""String_Node_Str"" + ""String_Node_Str"",new Result(new FeatureMap(new ArrayList<Feature>(){
{
      add(generateFeatureByName(""String_Node_Str"",""String_Node_Str"",new int[]{0,20,0}));
      add(generateFeatureByName(""String_Node_Str"",""String_Node_Str"",new int[]{0,30,0}));
      add(generateFeatureByName(""String_Node_Str"",""String_Node_Str"",new int[]{15,0,0}));
      add(generateFeatureByName(""String_Node_Str"",""String_Node_Str"",new int[]{15,0,0}));
      add(generateFeatureByName(""String_Node_Str"",""String_Node_Str"",new int[]{0,0,25}));
      add(generateFeatureByName(""String_Node_Str"",""String_Node_Str"",new int[]{0,-10,25}));
      add(generateFeatureByName(""String_Node_Str"",""String_Node_Str"",new int[]{0,25,-10}));
      add(generateFeatureByName(""String_Node_Str"",""String_Node_Str"",new int[]{25,-10,-10}));
      add(generateFeatureByName(""String_Node_Str"",""String_Node_Str"",new int[]{20,0,0}));
      add(generateFeatureByName(""String_Node_Str"",""String_Node_Str"",new int[]{10,0,0}));
      add(generateFeatureByName(""String_Node_Str"",""String_Node_Str"",new int[]{10,0,0}));
      add(generateFeatureByName(""String_Node_Str"",""String_Node_Str"",new int[]{0,0,5}));
      add(generateFeatureByName(""String_Node_Str"",""String_Node_Str"",new int[]{0,5,0}));
      add(generateFeatureByName(""String_Node_Str"",""String_Node_Str"",new int[]{5,0,0}));
    }
  }
,null,false),new ArrayList<NameType>(){
{
      add(NameType.LOCATION);
      add(NameType.PERSON);
      add(NameType.ORGANIZATION);
    }
  }
)}};
}","@DataProvider(name=""String_Node_Str"") public Object[][] configTestProvider() throws IOException {
  return new Object[][]{{""String_Node_Str"" + ""String_Node_Str"",new Result(new FeatureMap(new ArrayList<Feature>(){
{
      add(generateFeatureByName(""String_Node_Str"",""String_Node_Str"",new int[]{0,20,0}));
      add(generateFeatureByName(""String_Node_Str"",""String_Node_Str"",new int[]{0,30,0}));
      add(generateFeatureByName(""String_Node_Str"",""String_Node_Str"",new int[]{15,0,0}));
      add(generateFeatureByName(""String_Node_Str"",""String_Node_Str"",new int[]{0,0,25}));
      add(generateFeatureByName(""String_Node_Str"",""String_Node_Str"",new int[]{0,-10,25}));
      add(generateFeatureByName(""String_Node_Str"",""String_Node_Str"",new int[]{0,25,-10}));
      add(generateFeatureByName(""String_Node_Str"",""String_Node_Str"",new int[]{25,-10,-10}));
      add(generateFeatureByName(""String_Node_Str"",""String_Node_Str"",new int[]{20,0,0}));
      add(generateFeatureByName(""String_Node_Str"",""String_Node_Str"",new int[]{10,0,0}));
      add(generateFeatureByName(""String_Node_Str"",""String_Node_Str"",new int[]{10,0,0}));
      add(generateFeatureByName(""String_Node_Str"",""String_Node_Str"",new int[]{0,0,5}));
      add(generateFeatureByName(""String_Node_Str"",""String_Node_Str"",new int[]{0,5,0}));
      add(generateFeatureByName(""String_Node_Str"",""String_Node_Str"",new int[]{5,0,0}));
    }
  }
,null,false),new ArrayList<NameType>(){
{
      add(NameType.LOCATION);
      add(NameType.PERSON);
      add(NameType.ORGANIZATION);
    }
  }
)}};
}",0.9718621561808408
143244,"@Test(dataProvider=""String_Node_Str"") public void testProcess(final String phrase,final List<Result> resultList){
  final NerResultSet result=namedEntityAnalyser.process(phrase);
  final Map<NameType,Set<String>> mappedResult=result.getMappedResult();
  for (  final Result r : resultList) {
    assertTrue(mappedResult.containsKey(r.type),""String_Node_Str"" + r.phrase + ""String_Node_Str""+ r.type+ ""String_Node_Str""+ mappedResult+ ""String_Node_Str"");
    final Set<String> phrases=mappedResult.get(r.type);
    assertNotNull(phrases.remove(r.phrase),""String_Node_Str"" + r.phrase + ""String_Node_Str""+ phrases+ ""String_Node_Str"");
    if (phrases.isEmpty())     mappedResult.remove(r.type);
  }
  assertTrue(mappedResult.isEmpty(),""String_Node_Str"" + mappedResult);
  for (int i=0; i < result.phrases.get(0).size(); i++) {
    final Phrase p=result.phrases.get(0).get(i);
    final Result r=resultList.get(i);
    assertEquals(p.score,r.scores,""String_Node_Str"" + p.phraseString() + ""String_Node_Str""+ Arrays.toString(r.scores)+ ""String_Node_Str""+ Arrays.toString(p.score)+ ""String_Node_Str"");
    assertEquals(p.attachedWordMap,r.attachedWordMap);
  }
}","@Test(dataProvider=""String_Node_Str"") public void testProcess(final String phrase,final List<Result> resultList){
  final NerResultSet result=namedEntityAnalyser.process(phrase);
  final Map<NameType,Set<String>> mappedResult=result.getMappedResult();
  for (  final Result r : resultList) {
    assertTrue(mappedResult.containsKey(r.type),""String_Node_Str"" + r.phrase + ""String_Node_Str""+ r.type+ ""String_Node_Str""+ mappedResult+ ""String_Node_Str"");
    final Set<String> phrases=mappedResult.get(r.type);
    assertNotNull(phrases.remove(r.phrase),""String_Node_Str"" + r.phrase + ""String_Node_Str""+ phrases+ ""String_Node_Str"");
    if (phrases.isEmpty())     mappedResult.remove(r.type);
  }
  assertTrue(mappedResult.isEmpty(),""String_Node_Str"" + mappedResult);
  final List<Phrase> flat=new ArrayList<>();
  for (  final List<Phrase> l : result.phrases) {
    for (    final Phrase p : l) {
      flat.add(p);
    }
  }
  for (int i=0; i < flat.size(); i++) {
    final Phrase p=flat.get(i);
    final Result r=resultList.get(i);
    assertEquals(p.score,r.scores,""String_Node_Str"" + p.phraseString() + ""String_Node_Str""+ Arrays.toString(r.scores)+ ""String_Node_Str""+ Arrays.toString(p.score)+ ""String_Node_Str"");
    assertEquals(p.attachedWordMap,r.attachedWordMap);
  }
}",0.9139563606422396
143245,"@SuppressWarnings(""String_Node_Str"") @DataProvider(name=""String_Node_Str"") public static Object[][] primeNumbers() throws IOException {
  return new Object[][]{{""String_Node_Str"",new ArrayList<Result>(){
{
      add(new Result(""String_Node_Str"",PERSON,of(11.25,43.75,-6.25),none()));
    }
  }
},{""String_Node_Str"",new ArrayList<Result>(){
{
      add(new Result(""String_Node_Str"",PERSON,of(11.25,43.75,-6.25),none()));
      add(new Result(""String_Node_Str"",PERSON,of(0.,60.,0.),none()));
      add(new Result(""String_Node_Str"",LOCATION,of(87.5,5.0,-10.0),ImmutableMap.of(""String_Node_Str"",""String_Node_Str"")));
      add(new Result(""String_Node_Str"",DATE,of(0.,0.,0.),ImmutableMap.of(""String_Node_Str"",""String_Node_Str"")));
    }
  }
},{""String_Node_Str"",new ArrayList<Result>(){
{
      add(new Result(""String_Node_Str"",PERSON,of(0.0,30.0,18.75),none()));
      add(new Result(""String_Node_Str"",PERSON,of(0.0,20.0,8.75),ImmutableMap.of(""String_Node_Str"",""String_Node_Str"")));
      add(new Result(""String_Node_Str"",DATE,of(0.,0.,0.),ImmutableMap.of(""String_Node_Str"",""String_Node_Str"")));
    }
  }
},{""String_Node_Str"",new ArrayList<Result>(){
{
      add(new Result(""String_Node_Str"",ORGANIZATION,of(0.0,0.0,3.75),none()));
      add(new Result(""String_Node_Str"",LOCATION,of(46.25,-5.0,15.0),ImmutableMap.of(""String_Node_Str"",""String_Node_Str"")));
      add(new Result(""String_Node_Str"",LOCATION,of(5.0,0.0,0.0),none()));
      add(new Result(""String_Node_Str"",UNKNOWN,of(0.,0.,0.),ImmutableMap.of(""String_Node_Str"",""String_Node_Str"")));
    }
  }
},{new String(Files.readAllBytes(Paths.get(""String_Node_Str""))),new ArrayList<Result>(){
{
      add(new Result(""String_Node_Str"",LOCATION,of(10.0,0.0,0.0),ImmutableMap.of(""String_Node_Str"",""String_Node_Str"")));
      add(new Result(""String_Node_Str"",DATE,of(0.,0.,0.),none()));
      add(new Result(""String_Node_Str"",PERSON,of(0.,7.5,-7.5),none()));
      add(new Result(""String_Node_Str"",LOCATION,of(11.25,15.,0.),none()));
      add(new Result(""String_Node_Str"",PERSON,of(0.,35.,-20.),none()));
      add(new Result(""String_Node_Str"",UNKNOWN,of(0.,0.,0.),ImmutableMap.of(""String_Node_Str"",""String_Node_Str"")));
      add(new Result(""String_Node_Str"",UNKNOWN,of(0.,0.,0.),ImmutableMap.of(""String_Node_Str"",""String_Node_Str"")));
      add(new Result(""String_Node_Str"",UNKNOWN,of(0.,0.,0.),none()));
      add(new Result(""String_Node_Str"",ORGANIZATION,of(0.,0.,18.75),ImmutableMap.of(""String_Node_Str"",""String_Node_Str"")));
      add(new Result(""String_Node_Str"",UNKNOWN,of(0.,0.,0.),ImmutableMap.of(""String_Node_Str"",""String_Node_Str"")));
      add(new Result(""String_Node_Str"",LOCATION,of(0.,0.,0.),ImmutableMap.of(""String_Node_Str"",""String_Node_Str"")));
      add(new Result(""String_Node_Str"",LOCATION,of(36.25,30.0,-20.0),ImmutableMap.of(""String_Node_Str"",""String_Node_Str"")));
      add(new Result(""String_Node_Str"",LOCATION,of(36.25,30.0,-20.0),ImmutableMap.of(""String_Node_Str"",""String_Node_Str"")));
      add(new Result(""String_Node_Str"",LOCATION,of(43.75,-20.0,15.0),ImmutableMap.of(""String_Node_Str"",""String_Node_Str"")));
    }
  }
},{""String_Node_Str"",new ArrayList<Result>(){
{
      add(new Result(""String_Node_Str"",PERSON,of(0.,15.,0.0),none()));
      add(new Result(""String_Node_Str"",PERSON,of(0.,15.,0.),none()));
      add(new Result(""String_Node_Str"",UNKNOWN,of(0.,0.,0.),none()));
    }
  }
},{new String(Files.readAllBytes(Paths.get(""String_Node_Str""))),new ArrayList<Result>(){
{
      add(new Result(""String_Node_Str"",DATE,of(0.0,0.0,0.0),none()));
      add(new Result(""String_Node_Str"",DATE,of(0.0,0.0,0.0),none()));
      add(new Result(""String_Node_Str"",DATE,of(0.0,0.0,0.0),ImmutableMap.of(""String_Node_Str"",""String_Node_Str"")));
      add(new Result(""String_Node_Str"",DATE,of(0.0,0.0,0.0),none()));
      add(new Result(""String_Node_Str"",DATE,of(0.0,0.0,0.0),none()));
      add(new Result(""String_Node_Str"",UNKNOWN,of(0.0,0.0,0.0),none()));
      add(new Result(""String_Node_Str"",DATE,of(0.0,0.0,0.0),none()));
    }
  }
},{""String_Node_Str"",new ArrayList<Result>(){
{
      add(new Result(""String_Node_Str"",PERSON,of(26.25,63.75,-6.25),none()));
      add(new Result(""String_Node_Str"",PERSON,of(11.25,43.75,-6.25),none()));
    }
  }
}};
}","@SuppressWarnings(""String_Node_Str"") @DataProvider(name=""String_Node_Str"") public static Object[][] primeNumbers() throws IOException {
  return new Object[][]{{""String_Node_Str"",new ArrayList<Result>(){
{
      add(new Result(""String_Node_Str"",PERSON,of(11.25,43.75,-6.25),none()));
    }
  }
},{""String_Node_Str"",new ArrayList<Result>(){
{
      add(new Result(""String_Node_Str"",PERSON,of(11.25,43.75,-6.25),none()));
      add(new Result(""String_Node_Str"",PERSON,of(0.,60.,0.),none()));
      add(new Result(""String_Node_Str"",LOCATION,of(76.25,5.0,-10.0),ImmutableMap.of(""String_Node_Str"",""String_Node_Str"")));
      add(new Result(""String_Node_Str"",DATE,of(0.,0.,0.),ImmutableMap.of(""String_Node_Str"",""String_Node_Str"")));
    }
  }
},{""String_Node_Str"",new ArrayList<Result>(){
{
      add(new Result(""String_Node_Str"",PERSON,of(0.0,30.0,18.75),none()));
      add(new Result(""String_Node_Str"",PERSON,of(0.0,20.0,8.75),ImmutableMap.of(""String_Node_Str"",""String_Node_Str"")));
      add(new Result(""String_Node_Str"",DATE,of(0.0,0.0,0.0),ImmutableMap.of(""String_Node_Str"",""String_Node_Str"")));
    }
  }
},{""String_Node_Str"",new ArrayList<Result>(){
{
      add(new Result(""String_Node_Str"",ORGANIZATION,of(0.0,0.0,3.75),none()));
      add(new Result(""String_Node_Str"",LOCATION,of(50.0,-5.0,15.0),ImmutableMap.of(""String_Node_Str"",""String_Node_Str"")));
      add(new Result(""String_Node_Str"",LOCATION,of(5.0,0.0,0.0),none()));
      add(new Result(""String_Node_Str"",UNKNOWN,of(0.,0.,0.),ImmutableMap.of(""String_Node_Str"",""String_Node_Str"")));
    }
  }
},{new String(Files.readAllBytes(Paths.get(""String_Node_Str""))),new ArrayList<Result>(){
{
      add(new Result(""String_Node_Str"",LOCATION,of(10.0,0.0,0.0),ImmutableMap.of(""String_Node_Str"",""String_Node_Str"")));
      add(new Result(""String_Node_Str"",DATE,of(0.,0.,0.),none()));
      add(new Result(""String_Node_Str"",PERSON,of(0.0,3.75,0.0),none()));
      add(new Result(""String_Node_Str"",LOCATION,of(16.25,15.0,0.0),none()));
      add(new Result(""String_Node_Str"",PERSON,of(0.0,30.0,-10.0),none()));
      add(new Result(""String_Node_Str"",UNKNOWN,of(0.0,0.0,0.0),ImmutableMap.of(""String_Node_Str"",""String_Node_Str"")));
      add(new Result(""String_Node_Str"",UNKNOWN,of(0.0,0.0,0.0),ImmutableMap.of(""String_Node_Str"",""String_Node_Str"")));
      add(new Result(""String_Node_Str"",UNKNOWN,of(0.0,0.0,0.0),none()));
      add(new Result(""String_Node_Str"",ORGANIZATION,of(0.0,0.0,18.75),ImmutableMap.of(""String_Node_Str"",""String_Node_Str"")));
      add(new Result(""String_Node_Str"",UNKNOWN,of(0.,0.,0.),ImmutableMap.of(""String_Node_Str"",""String_Node_Str"")));
      add(new Result(""String_Node_Str"",LOCATION,of(5.0,0.0,0.0),ImmutableMap.of(""String_Node_Str"",""String_Node_Str"")));
      add(new Result(""String_Node_Str"",LOCATION,of(40.0,30.0,-20.0),ImmutableMap.of(""String_Node_Str"",""String_Node_Str"")));
      add(new Result(""String_Node_Str"",PERSON,of(25.0,30.0,-20.0),ImmutableMap.of(""String_Node_Str"",""String_Node_Str"")));
      add(new Result(""String_Node_Str"",LOCATION,of(40.0,-20.0,15.0),ImmutableMap.of(""String_Node_Str"",""String_Node_Str"")));
    }
  }
},{""String_Node_Str"",new ArrayList<Result>(){
{
      add(new Result(""String_Node_Str"",PERSON,of(0.,15.,0.0),none()));
      add(new Result(""String_Node_Str"",PERSON,of(0.,15.,0.),none()));
      add(new Result(""String_Node_Str"",UNKNOWN,of(0.,0.,0.),none()));
    }
  }
},{new String(Files.readAllBytes(Paths.get(""String_Node_Str""))),new ArrayList<Result>(){
{
      add(new Result(""String_Node_Str"",DATE,of(0.0,0.0,0.0),none()));
      add(new Result(""String_Node_Str"",DATE,of(0.0,0.0,0.0),none()));
      add(new Result(""String_Node_Str"",DATE,of(0.0,0.0,0.0),ImmutableMap.of(""String_Node_Str"",""String_Node_Str"")));
      add(new Result(""String_Node_Str"",DATE,of(0.0,0.0,0.0),none()));
      add(new Result(""String_Node_Str"",DATE,of(0.0,0.0,0.0),none()));
      add(new Result(""String_Node_Str"",UNKNOWN,of(0.0,0.0,0.0),none()));
      add(new Result(""String_Node_Str"",DATE,of(0.0,0.0,0.0),none()));
    }
  }
},{""String_Node_Str"",new ArrayList<Result>(){
{
      add(new Result(""String_Node_Str"",PERSON,of(26.25,63.75,-6.25),none()));
      add(new Result(""String_Node_Str"",PERSON,of(11.25,43.75,-6.25),none()));
    }
  }
}};
}",0.9536862003780718
143246,"@Override protected String doInBackground(Void... v){
  try {
    Command cmd=Command.commandFactory(Command.commandType.LISTSERVERS,U);
    if (cmd != null)     cmd.execute();
 else {
      Utils.alert(""String_Node_Str"",FloatingIPActivity.this);
      return null;
    }
    jsonBuf=cmd.getRESTResponse();
  }
 catch (  Exception e) {
    errorMessage=e.getMessage();
    hasError=true;
    return ""String_Node_Str"";
  }
  return jsonBuf;
}","@Override protected String doInBackground(Void... v){
  try {
    Command cmd=Command.commandFactory(Command.commandType.LISTSERVERS,U);
    if (cmd != null)     cmd.execute();
 else {
      hasError=true;
      errorMessage=""String_Node_Str"";
      return null;
    }
    jsonBuf=cmd.getRESTResponse();
  }
 catch (  Exception e) {
    errorMessage=e.getMessage();
    hasError=true;
    return ""String_Node_Str"";
  }
  return jsonBuf;
}",0.919226393629124
143247,"@Override protected Void doInBackground(String... args){
  try {
    Command cmd=Command.commandFactory(Command.commandType.CREATESERVER,U);
    if (cmd != null) {
      cmd.setup(args[0],args[1],args[2],args[3],Integer.parseInt(args[4]),args[5],ImageLaunchActivity.this.selectedNetworks);
      cmd.execute();
    }
 else {
      Utils.alert(""String_Node_Str"",ImageLaunchActivity.this);
      return null;
    }
  }
 catch (  Exception e) {
    e.printStackTrace();
    errorMessage=e.getMessage();
    hasError=true;
    return null;
  }
  return null;
}","@Override protected Void doInBackground(String... args){
  try {
    Command cmd=Command.commandFactory(Command.commandType.CREATESERVER,U);
    if (cmd != null) {
      cmd.setup(args[0],args[1],args[2],args[3],Integer.parseInt(args[4]),args[5],ImageLaunchActivity.this.selectedNetworks);
      cmd.execute();
    }
 else {
      hasError=true;
      errorMessage=""String_Node_Str"";
      return null;
    }
  }
 catch (  Exception e) {
    e.printStackTrace();
    errorMessage=e.getMessage();
    hasError=true;
    return null;
  }
  return null;
}",0.9350180505415162
143248,"@Override protected Void doInBackground(Void... args){
  OSClient osc=OSClient.getInstance(U);
  try {
    Command cmd=Command.commandFactory(Command.commandType.CREATESERVER,U);
    if (cmd != null) {
      cmd.setup(name_InstanceToLaunch,imageID_InstanceToLaunch,keyname_InstanceToLaunch,flavorID_InstanceToLaunch,Integer.parseInt(count_InstanceToLaunch),secgrpID_InstanceToLaunch,OSImagesActivity.this.selectedNetworks);
      cmd.execute();
    }
 else {
      Utils.alert(""String_Node_Str"",OSImagesActivity.this);
      return null;
    }
  }
 catch (  Exception e) {
    e.printStackTrace();
    errorMessage=e.getMessage();
    hasError=true;
    return null;
  }
  return null;
}","@Override protected Void doInBackground(Void... args){
  OSClient osc=OSClient.getInstance(U);
  try {
    Command cmd=Command.commandFactory(Command.commandType.CREATESERVER,U);
    if (cmd != null) {
      cmd.setup(name_InstanceToLaunch,imageID_InstanceToLaunch,keyname_InstanceToLaunch,flavorID_InstanceToLaunch,Integer.parseInt(count_InstanceToLaunch),secgrpID_InstanceToLaunch,OSImagesActivity.this.selectedNetworks);
      cmd.execute();
    }
 else {
      hasError=true;
      errorMessage=""String_Node_Str"";
      return null;
    }
  }
 catch (  Exception e) {
    e.printStackTrace();
    errorMessage=e.getMessage();
    hasError=true;
    return null;
  }
  return null;
}",0.9497450837581938
143249,"@Override protected String doInBackground(Void... u){
  OSClient osc=OSClient.getInstance(U);
  try {
    jsonBufQuota=osc.listQuotas();
    Command cmd=Command.commandFactory(Command.commandType.LISTSERVERS,U);
    if (cmd != null)     cmd.execute();
 else {
      Utils.alert(""String_Node_Str"",OverViewActivity.this);
      return null;
    }
    jsonBuf=cmd.getRESTResponse();
    jsonBufFIPs=osc.listFloatingIPs();
    jsonBufSecgs=osc.listSecGroups();
    jsonBufferFlavor=osc.listFlavors();
    jsonBufferVolumes=osc.listVolumes();
    jsonBufferQuotaVols=osc.listVolQuotas();
  }
 catch (  Exception e) {
    errorMessage=e.getMessage();
    hasError=true;
    return ""String_Node_Str"";
  }
  return jsonBuf;
}","@Override protected String doInBackground(Void... u){
  OSClient osc=OSClient.getInstance(U);
  try {
    jsonBufQuota=osc.listQuotas();
    Command cmd=Command.commandFactory(Command.commandType.LISTSERVERS,U);
    if (cmd != null)     cmd.execute();
 else {
      hasError=true;
      errorMessage=""String_Node_Str"";
      return null;
    }
    jsonBuf=cmd.getRESTResponse();
    jsonBufFIPs=osc.listFloatingIPs();
    jsonBufSecgs=osc.listSecGroups();
    jsonBufferFlavor=osc.listFlavors();
    jsonBufferVolumes=osc.listVolumes();
    jsonBufferQuotaVols=osc.listVolQuotas();
  }
 catch (  Exception e) {
    errorMessage=e.getMessage();
    hasError=true;
    return ""String_Node_Str"";
  }
  return jsonBuf;
}",0.9518492672714584
143250,"@Override protected Void doInBackground(Void... args){
  try {
    Command cmd=Command.commandFactory(Command.commandType.CREATESERVER,U);
    if (cmd != null) {
      cmd.setup(name_InstanceToLaunch,imageID_InstanceToLaunch,keyname_InstanceToLaunch,flavorID_InstanceToLaunch,Integer.parseInt(count_InstanceToLaunch),secgrpID_InstanceToLaunch,ServersActivity.this.selectedNetworks);
      cmd.execute();
    }
 else {
      Utils.alert(""String_Node_Str"",ServersActivity.this);
      return null;
    }
  }
 catch (  Exception e) {
    e.printStackTrace();
    errorMessage=e.getMessage();
    hasError=true;
    return null;
  }
  return null;
}","@Override protected Void doInBackground(Void... args){
  try {
    Command cmd=Command.commandFactory(Command.commandType.CREATESERVER,U);
    if (cmd != null) {
      cmd.setup(name_InstanceToLaunch,imageID_InstanceToLaunch,keyname_InstanceToLaunch,flavorID_InstanceToLaunch,Integer.parseInt(count_InstanceToLaunch),secgrpID_InstanceToLaunch,ServersActivity.this.selectedNetworks);
      cmd.execute();
    }
 else {
      hasError=true;
      errorMessage=""String_Node_Str"";
      return null;
    }
  }
 catch (  Exception e) {
    e.printStackTrace();
    errorMessage=e.getMessage();
    hasError=true;
    return null;
  }
  return null;
}",0.9472868217054264
143251,"/** 
 */
public static Command commandFactory(commandType type,User U){
switch (type) {
case LISTIMAGES:
    return new ListImagesCommand(U);
case DELETEIMAGE:
  return new DeleteImageCommand(U);
case LISTSERVERS:
return new ListServersCommand(U);
default :
return null;
}
}","/** 
 */
public static Command commandFactory(commandType type,User U){
switch (type) {
case LISTIMAGES:
    return new ListImagesCommand(U);
case DELETEIMAGE:
  return new DeleteImageCommand(U);
case LISTSERVERS:
return new ListServersCommand(U);
case CREATESERVER:
return new CreateServerCommand(U);
default :
return null;
}
}",0.9102990033222592
143252,"public void setup(String serverName,String imageID,String key_name,String flavorID,int count,String securityGroupID,Hashtable<Pair<String,String>,String> netID_to_netIP){
  this.serverName=serverName;
  this.imageID=imageID;
  this.keyName=keyName;
  this.flavorID=flavorID;
  this.count=count;
  this.securityGroupID=securityGroupID;
  this.netID_to_netIP=netID_to_netIP;
}","public void setup(String serverName,String imageID,String keyName,String flavorID,int count,String securityGroupID,Hashtable<Pair<String,String>,String> netID_to_netIP){
  this.serverName=serverName;
  this.imageID=imageID;
  this.keyName=keyName;
  this.flavorID=flavorID;
  this.count=count;
  this.securityGroupID=securityGroupID;
  this.netID_to_netIP=netID_to_netIP;
}",0.9959839357429718
143253,"public void execute() throws Exception {
  checkToken();
  Pair<String,String> p=new Pair<String,String>(""String_Node_Str"",U.getTenantName());
  Vector<Pair<String,String>> v=new Vector<Pair<String,String>>();
  v.add(p);
  String data=""String_Node_Str"" + serverName + ""String_Node_Str""+ imageID+ ""String_Node_Str""+ (keyName != null ? ""String_Node_Str"" + keyName : ""String_Node_Str"")+ ""String_Node_Str""+ flavorID+ ""String_Node_Str""+ count+ ""String_Node_Str""+ count+ ""String_Node_Str"";
  JSONObject obj=null;
  String[] secgrpIDs=securityGroupID.split(""String_Node_Str"");
  try {
    obj=new JSONObject(data);
    JSONArray secgs=new JSONArray();
    JSONArray nets=new JSONArray();
    if (securityGroupID.length() != 0)     for (int i=0; i < secgrpIDs.length; ++i)     secgs.put(new JSONObject(""String_Node_Str"" + secgrpIDs[i] + ""String_Node_Str""));
    Iterator<Pair<String,String>> it=netID_to_netIP.keySet().iterator();
    while (it.hasNext()) {
      Pair<String,String> thisNet=it.next();
      String netID=thisNet.first;
      String netIP=netID_to_netIP.get(thisNet);
      if (netIP != null && netIP.length() != 0)       nets.put(new JSONObject(""String_Node_Str"" + netID + ""String_Node_Str""+ netIP+ ""String_Node_Str""));
 else {
        nets.put(new JSONObject(""String_Node_Str"" + netID + ""String_Node_Str""));
      }
    }
    obj.getJSONObject(""String_Node_Str"").put(""String_Node_Str"",secgs);
    obj.getJSONObject(""String_Node_Str"").put(""String_Node_Str"",nets);
  }
 catch (  JSONException je) {
    throw new RuntimeException(""String_Node_Str"" + je.getMessage());
  }
  data=obj.toString();
  RESTClient.sendPOSTRequest(U.useSSL(),U.getNovaEndpoint() + ""String_Node_Str"",U.getToken(),data,v);
}","public void execute() throws Exception {
  checkToken();
  Pair<String,String> p=new Pair<String,String>(""String_Node_Str"",U.getTenantName());
  Vector<Pair<String,String>> v=new Vector<Pair<String,String>>();
  v.add(p);
  JSONObject data=new JSONObject();
  JSONObject serverDesc=new JSONObject();
  serverDesc.put(""String_Node_Str"",serverName).put(""String_Node_Str"",imageID);
  if (keyName != null)   serverDesc.put(""String_Node_Str"",keyName);
  serverDesc.put(""String_Node_Str"",flavorID).put(""String_Node_Str"",count).put(""String_Node_Str"",count);
  String[] secgrpIDs=securityGroupID.split(""String_Node_Str"");
  Log.d(""String_Node_Str"",""String_Node_Str"" + data);
  try {
    JSONArray secgs=new JSONArray();
    JSONArray nets=new JSONArray();
    if (securityGroupID.length() != 0)     for (int i=0; i < secgrpIDs.length; ++i)     secgs.put(new JSONObject(""String_Node_Str"" + secgrpIDs[i] + ""String_Node_Str""));
    Iterator<Pair<String,String>> it=netID_to_netIP.keySet().iterator();
    while (it.hasNext()) {
      Pair<String,String> thisNet=it.next();
      String netID=thisNet.first;
      String netIP=netID_to_netIP.get(thisNet);
      if (netIP != null && netIP.length() != 0)       nets.put(new JSONObject(""String_Node_Str"" + netID + ""String_Node_Str""+ netIP+ ""String_Node_Str""));
 else {
        nets.put(new JSONObject(""String_Node_Str"" + netID + ""String_Node_Str""));
      }
    }
    serverDesc.put(""String_Node_Str"",secgs).put(""String_Node_Str"",nets);
  }
 catch (  JSONException je) {
    throw new RuntimeException(""String_Node_Str"" + je.getMessage());
  }
  data.put(""String_Node_Str"",serverDesc);
  Log.d(""String_Node_Str"",""String_Node_Str"" + data.toString());
  RESTClient.sendPOSTRequest(U.useSSL(),U.getNovaEndpoint() + ""String_Node_Str"",U.getToken(),data.toString(),v);
}",0.7594070695553021
143254,"/** 
 */
public static Vector<OSImage> parse(String jsonString) throws ParseException {
  try {
    Vector<OSImage> result=new Vector<OSImage>();
    JSONObject jsonObject=new JSONObject(jsonString);
    Log.d(""String_Node_Str"",""String_Node_Str"" + jsonString);
    JSONArray images=(JSONArray)jsonObject.getJSONArray(""String_Node_Str"");
    for (int i=0; i < images.length(); ++i) {
      String name=images.getJSONObject(i).has(""String_Node_Str"") ? images.getJSONObject(i).getString(""String_Node_Str"") : ""String_Node_Str"";
      long size=0L;
      if (images.getJSONObject(i).has(""String_Node_Str""))       size=(long)images.getJSONObject(i).getLong(""String_Node_Str"");
      if (images.getJSONObject(i).has(""String_Node_Str""))       size=(long)images.getJSONObject(i).getLong(""String_Node_Str"");
      String format=images.getJSONObject(i).has(""String_Node_Str"") ? images.getJSONObject(i).getString(""String_Node_Str"") : ""String_Node_Str"";
      String creationDate=images.getJSONObject(i).has(""String_Node_Str"") ? images.getJSONObject(i).getString(""String_Node_Str"") : ""String_Node_Str"";
      String visibility=images.getJSONObject(i).has(""String_Node_Str"") ? images.getJSONObject(i).getString(""String_Node_Str"") : ""String_Node_Str"";
      String status=images.getJSONObject(i).has(""String_Node_Str"") ? images.getJSONObject(i).getString(""String_Node_Str"") : ""String_Node_Str"";
      String ID=images.getJSONObject(i).has(""String_Node_Str"") ? images.getJSONObject(i).getString(""String_Node_Str"") : ""String_Node_Str"";
      int mindisk=0;
      if (images.getJSONObject(i).has(""String_Node_Str""))       mindisk=images.getJSONObject(i).getInt(""String_Node_Str"");
      if (images.getJSONObject(i).has(""String_Node_Str""))       mindisk=images.getJSONObject(i).getInt(""String_Node_Str"");
      int minram=0;
      if (images.getJSONObject(i).has(""String_Node_Str""))       minram=images.getJSONObject(i).getInt(""String_Node_Str"");
      if (images.getJSONObject(i).has(""String_Node_Str""))       minram=images.getJSONObject(i).getInt(""String_Node_Str"");
      SimpleDateFormat timeFormatter=new SimpleDateFormat(""String_Node_Str"");
      timeFormatter.setTimeZone(TimeZone.getDefault());
      Calendar calendar=Calendar.getInstance();
      long cdate=0;
      try {
        calendar.setTime(timeFormatter.parse(creationDate));
        cdate=calendar.getTimeInMillis() / 1000;
      }
 catch (      java.text.ParseException pe) {
      }
      boolean pub=(visibility.compareTo(""String_Node_Str"") == 0 ? true : false);
      OSImage osimg=new OSImage(name,ID,size,format,status,pub,cdate,mindisk,minram);
      if (format.compareToIgnoreCase(""String_Node_Str"") != 0 && format.compareToIgnoreCase(""String_Node_Str"") != 0)       result.add(osimg);
    }
    return result;
  }
 catch (  org.json.JSONException je) {
    throw new ParseException(je.getMessage());
  }
}","/** 
 */
public static Vector<OSImage> parse(String jsonString) throws ParseException {
  try {
    Vector<OSImage> result=new Vector<OSImage>();
    JSONObject jsonObject=new JSONObject(jsonString);
    JSONArray images=(JSONArray)jsonObject.getJSONArray(""String_Node_Str"");
    for (int i=0; i < images.length(); ++i) {
      String name=images.getJSONObject(i).has(""String_Node_Str"") ? images.getJSONObject(i).getString(""String_Node_Str"") : ""String_Node_Str"";
      long size=0L;
      if (images.getJSONObject(i).has(""String_Node_Str""))       size=(long)images.getJSONObject(i).getLong(""String_Node_Str"");
      if (images.getJSONObject(i).has(""String_Node_Str""))       size=(long)images.getJSONObject(i).getLong(""String_Node_Str"");
      String format=images.getJSONObject(i).has(""String_Node_Str"") ? images.getJSONObject(i).getString(""String_Node_Str"") : ""String_Node_Str"";
      String creationDate=images.getJSONObject(i).has(""String_Node_Str"") ? images.getJSONObject(i).getString(""String_Node_Str"") : ""String_Node_Str"";
      String visibility=images.getJSONObject(i).has(""String_Node_Str"") ? images.getJSONObject(i).getString(""String_Node_Str"") : ""String_Node_Str"";
      String status=images.getJSONObject(i).has(""String_Node_Str"") ? images.getJSONObject(i).getString(""String_Node_Str"") : ""String_Node_Str"";
      String ID=images.getJSONObject(i).has(""String_Node_Str"") ? images.getJSONObject(i).getString(""String_Node_Str"") : ""String_Node_Str"";
      int mindisk=0;
      if (images.getJSONObject(i).has(""String_Node_Str""))       mindisk=images.getJSONObject(i).getInt(""String_Node_Str"");
      if (images.getJSONObject(i).has(""String_Node_Str""))       mindisk=images.getJSONObject(i).getInt(""String_Node_Str"");
      int minram=0;
      if (images.getJSONObject(i).has(""String_Node_Str""))       minram=images.getJSONObject(i).getInt(""String_Node_Str"");
      if (images.getJSONObject(i).has(""String_Node_Str""))       minram=images.getJSONObject(i).getInt(""String_Node_Str"");
      SimpleDateFormat timeFormatter=new SimpleDateFormat(""String_Node_Str"");
      timeFormatter.setTimeZone(TimeZone.getDefault());
      Calendar calendar=Calendar.getInstance();
      long cdate=0;
      try {
        calendar.setTime(timeFormatter.parse(creationDate));
        cdate=calendar.getTimeInMillis() / 1000;
      }
 catch (      java.text.ParseException pe) {
      }
      boolean pub=(visibility.compareTo(""String_Node_Str"") == 0 ? true : false);
      OSImage osimg=new OSImage(name,ID,size,format,status,pub,cdate,mindisk,minram);
      if (format.compareToIgnoreCase(""String_Node_Str"") != 0 && format.compareToIgnoreCase(""String_Node_Str"") != 0)       result.add(osimg);
    }
    return result;
  }
 catch (  org.json.JSONException je) {
    throw new ParseException(je.getMessage());
  }
}",0.9892321270962048
143255,"public ServerView(Server s,OnClickListener infoListener,OnClickListener consoleLogListener,OnClickListener deleteServerListener,OnClickListener addIP,OnClickListener manageServerListener,Context ctx){
  super(ctx);
  S=s;
  setOrientation(LinearLayout.HORIZONTAL);
  LinearLayout.LayoutParams params1=new LinearLayout.LayoutParams(LayoutParams.MATCH_PARENT,LayoutParams.MATCH_PARENT);
  setLayoutParams(params1);
  int padding=Utils.getDisplayPixel(ctx,2);
  setPadding(padding,padding,padding,padding);
  row=new LinearLayoutWithView(ctx,this);
  row.setOrientation(LinearLayout.HORIZONTAL);
  LinearLayout.LayoutParams _params1=new LinearLayout.LayoutParams(LayoutParams.MATCH_PARENT,LayoutParams.MATCH_PARENT);
  row.setLayoutParams(_params1);
  row.setBackgroundResource(R.drawable.rounded_corner_thin);
  text=new LinearLayoutWithView(ctx,(ServerView)this);
  text.setOrientation(LinearLayout.VERTICAL);
  LinearLayout.LayoutParams params2=new LinearLayout.LayoutParams(LayoutParams.MATCH_PARENT,LayoutParams.MATCH_PARENT,1f);
  text.setLayoutParams(params2);
  Name=new TextViewWithView(ctx,(ServerView)this);
  String servName=S.getName();
  Name.setText(servName);
  Name.setTextColor(Color.parseColor(""String_Node_Str""));
  Name.setOnClickListener(infoListener);
  Name.setTypeface(null,Typeface.BOLD);
  Name.setEllipsize(TextUtils.TruncateAt.END);
  Name.setSingleLine();
  Flavor=new TextViewWithView(ctx,(ServerView)this);
  String flavName=S.getFlavor() != null ? S.getFlavor().getName() : ""String_Node_Str"";
  Flavor.setText(""String_Node_Str"" + flavName);
  Flavor.setOnClickListener(infoListener);
  Flavor.setTextColor(Color.parseColor(""String_Node_Str""));
  Flavor.setEllipsize(TextUtils.TruncateAt.END);
  Flavor.setSingleLine();
  Status=new TextViewWithView(ctx,(ServerView)this);
  Status.setText(""String_Node_Str"" + S.getStatus());
  Status.setOnClickListener(infoListener);
  Task=new TextViewWithView(ctx,(ServerView)this);
  Task.setText(""String_Node_Str"" + (S.getTask() != null || S.getTask().compareTo(""String_Node_Str"") == 0 ? S.getTask() : getContext().getString(R.string.NONE)));
  Task.setOnClickListener(infoListener);
  if (S.getStatus().compareToIgnoreCase(""String_Node_Str"") == 0)   Status.setTextColor(Color.parseColor(""String_Node_Str""));
  if (S.getStatus().compareToIgnoreCase(""String_Node_Str"") == 0)   Status.setTextColor(Color.parseColor(""String_Node_Str""));
  if (S.getStatus().compareToIgnoreCase(""String_Node_Str"") == 0) {
    Status.setText(""String_Node_Str"" + S.getStatus() + ""String_Node_Str""+ (S.getTask() != null || S.getTask().compareTo(""String_Node_Str"") == 0 ? S.getTask() : getContext().getString(R.string.NONE))+ ""String_Node_Str"");
    if (S.getTask().compareToIgnoreCase(""String_Node_Str"") == 0)     Status.setTextColor(Color.parseColor(""String_Node_Str""));
  }
  if (S.getTask().compareToIgnoreCase(""String_Node_Str"") == 0)   Status.setText(ctx.getString(R.string.NONE));
  LinearLayout.LayoutParams params5=new LinearLayout.LayoutParams(LayoutParams.WRAP_CONTENT,LayoutParams.WRAP_CONTENT);
  consoleLog=new ButtonWithView(ctx,this);
  consoleLog.setText(""String_Node_Str"");
  consoleLog.setTextSize(10.0f);
  int density=200;
  String dispDensity=Configuration.getInstance().getValue(""String_Node_Str"",""String_Node_Str"");
  if (dispDensity != null)   density=Integer.parseInt(dispDensity);
  consoleLog.setPadding(10 * density,2 * density,10 * density,2 * density);
  consoleLog.setOnClickListener(consoleLogListener);
  consoleLog.setLayoutParams(params5);
  serverUpdateProgress=new ProgressBar(ctx,null,android.R.attr.progressBarStyleSmall);
  serverUpdateProgress.setIndeterminate(true);
  LayoutParams params7=new LayoutParams(LayoutParams.WRAP_CONTENT,LayoutParams.WRAP_CONTENT);
  serverUpdateProgress.setLayoutParams(params7);
  serverUpdateProgress.setVisibility(View.INVISIBLE);
  btns2=new LinearLayoutWithView(ctx,(ServerView)this);
  btns2.setOrientation(LinearLayout.HORIZONTAL);
  LinearLayout.LayoutParams params6=new LinearLayout.LayoutParams(LayoutParams.WRAP_CONTENT,LayoutParams.WRAP_CONTENT);
  btns2.addView(consoleLog);
  btns2.addView(serverUpdateProgress);
  text.addView(Name);
  text.addView(Flavor);
  text.addView(Status);
  text.addView(Task);
  text.addView(btns2);
  text.setOnClickListener(infoListener);
  row.addView(text);
  setOnClickListener(infoListener);
  deleteServer=new ImageButtonWithView(ctx,this);
  deleteServer.setImageResource(android.R.drawable.ic_menu_close_clear_cancel);
  deleteServer.setOnClickListener(deleteServerListener);
  manageServer=new ImageButtonWithView(ctx,this);
  manageServer.setImageResource(android.R.drawable.ic_menu_edit);
  manageServer.setOnClickListener(manageServerListener);
  addIPToServer=new ButtonWithView(ctx,this);
  addIPToServer.setText(""String_Node_Str"");
  addIPToServer.setOnClickListener(addIP);
  btns=new LinearLayoutWithView(ctx,(ServerView)this);
  btns.setOrientation(LinearLayout.HORIZONTAL);
  LinearLayout.LayoutParams params3=new LinearLayout.LayoutParams(LayoutParams.MATCH_PARENT,LayoutParams.MATCH_PARENT,1f);
  btns.setLayoutParams(params3);
  btns.setGravity(Gravity.RIGHT | Gravity.CENTER_VERTICAL);
  btns.addView(addIPToServer);
  btns.addView(manageServer);
  btns.addView(deleteServer);
  row.addView(btns);
  addView(row);
}","public ServerView(Server s,OnClickListener infoListener,OnClickListener consoleLogListener,OnClickListener deleteServerListener,OnClickListener addIP,OnClickListener manageServerListener,Context ctx){
  super(ctx);
  S=s;
  setOrientation(LinearLayout.HORIZONTAL);
  LinearLayout.LayoutParams params1=new LinearLayout.LayoutParams(LayoutParams.MATCH_PARENT,LayoutParams.MATCH_PARENT);
  setLayoutParams(params1);
  int padding=Utils.getDisplayPixel(ctx,2);
  setPadding(padding,padding,padding,padding);
  row=new LinearLayoutWithView(ctx,this);
  row.setOrientation(LinearLayout.HORIZONTAL);
  LinearLayout.LayoutParams _params1=new LinearLayout.LayoutParams(LayoutParams.MATCH_PARENT,LayoutParams.MATCH_PARENT);
  row.setLayoutParams(_params1);
  row.setBackgroundResource(R.drawable.rounded_corner_thin);
  text=new LinearLayoutWithView(ctx,(ServerView)this);
  text.setOrientation(LinearLayout.VERTICAL);
  LinearLayout.LayoutParams params2=new LinearLayout.LayoutParams(LayoutParams.MATCH_PARENT,LayoutParams.MATCH_PARENT,1f);
  text.setLayoutParams(params2);
  Name=new TextViewWithView(ctx,(ServerView)this);
  String servName=S.getName();
  Name.setText(servName);
  Name.setTextColor(Color.parseColor(""String_Node_Str""));
  Name.setOnClickListener(infoListener);
  Name.setTypeface(null,Typeface.BOLD);
  Name.setEllipsize(TextUtils.TruncateAt.END);
  Name.setSingleLine();
  Flavor=new TextViewWithView(ctx,(ServerView)this);
  String flavName=S.getFlavor() != null ? S.getFlavor().getName() : ""String_Node_Str"";
  Flavor.setText(""String_Node_Str"" + flavName);
  Flavor.setOnClickListener(infoListener);
  Flavor.setTextColor(Color.parseColor(""String_Node_Str""));
  Flavor.setEllipsize(TextUtils.TruncateAt.END);
  Flavor.setSingleLine();
  Status=new TextViewWithView(ctx,(ServerView)this);
  Status.setText(""String_Node_Str"" + S.getStatus());
  Status.setOnClickListener(infoListener);
  Task=new TextViewWithView(ctx,(ServerView)this);
  Task.setText(""String_Node_Str"" + (S.getTask() != null || S.getTask().compareTo(""String_Node_Str"") == 0 ? S.getTask() : getContext().getString(R.string.NONE)));
  Task.setOnClickListener(infoListener);
  if (S.getStatus().compareToIgnoreCase(""String_Node_Str"") == 0)   Status.setTextColor(Color.parseColor(""String_Node_Str""));
  if (S.getStatus().compareToIgnoreCase(""String_Node_Str"") == 0)   Status.setTextColor(Color.parseColor(""String_Node_Str""));
  if (S.getStatus().compareToIgnoreCase(""String_Node_Str"") == 0) {
    Status.setText(""String_Node_Str"" + S.getStatus());
  }
  if (S.getTask().compareToIgnoreCase(""String_Node_Str"") == 0)   Task.setText(""String_Node_Str"" + ctx.getString(R.string.NONE));
  LinearLayout.LayoutParams params5=new LinearLayout.LayoutParams(LayoutParams.WRAP_CONTENT,LayoutParams.WRAP_CONTENT);
  consoleLog=new ButtonWithView(ctx,this);
  consoleLog.setText(""String_Node_Str"");
  consoleLog.setTextSize(10.0f);
  int density=200;
  String dispDensity=Configuration.getInstance().getValue(""String_Node_Str"",""String_Node_Str"");
  if (dispDensity != null)   density=Integer.parseInt(dispDensity);
  consoleLog.setPadding(10 * density,2 * density,10 * density,2 * density);
  consoleLog.setOnClickListener(consoleLogListener);
  consoleLog.setLayoutParams(params5);
  serverUpdateProgress=new ProgressBar(ctx,null,android.R.attr.progressBarStyleSmall);
  serverUpdateProgress.setIndeterminate(true);
  LayoutParams params7=new LayoutParams(LayoutParams.WRAP_CONTENT,LayoutParams.WRAP_CONTENT);
  serverUpdateProgress.setLayoutParams(params7);
  serverUpdateProgress.setVisibility(View.INVISIBLE);
  btns2=new LinearLayoutWithView(ctx,(ServerView)this);
  btns2.setOrientation(LinearLayout.HORIZONTAL);
  LinearLayout.LayoutParams params6=new LinearLayout.LayoutParams(LayoutParams.WRAP_CONTENT,LayoutParams.WRAP_CONTENT);
  btns2.addView(consoleLog);
  btns2.addView(serverUpdateProgress);
  text.addView(Name);
  text.addView(Flavor);
  text.addView(Status);
  text.addView(Task);
  text.addView(btns2);
  text.setOnClickListener(infoListener);
  row.addView(text);
  setOnClickListener(infoListener);
  deleteServer=new ImageButtonWithView(ctx,this);
  deleteServer.setImageResource(android.R.drawable.ic_menu_close_clear_cancel);
  deleteServer.setOnClickListener(deleteServerListener);
  manageServer=new ImageButtonWithView(ctx,this);
  manageServer.setImageResource(android.R.drawable.ic_menu_edit);
  manageServer.setOnClickListener(manageServerListener);
  addIPToServer=new ButtonWithView(ctx,this);
  addIPToServer.setText(""String_Node_Str"");
  addIPToServer.setOnClickListener(addIP);
  btns=new LinearLayoutWithView(ctx,(ServerView)this);
  btns.setOrientation(LinearLayout.HORIZONTAL);
  LinearLayout.LayoutParams params3=new LinearLayout.LayoutParams(LayoutParams.MATCH_PARENT,LayoutParams.MATCH_PARENT,1f);
  btns.setLayoutParams(params3);
  btns.setGravity(Gravity.RIGHT | Gravity.CENTER_VERTICAL);
  btns.addView(addIPToServer);
  btns.addView(manageServer);
  btns.addView(deleteServer);
  row.addView(btns);
  addView(row);
}",0.9641472868217056
143256,"@Override protected String doInBackground(Void... v){
  OSClient osc=OSClient.getInstance(U);
  try {
    jsonBuf=osc.requestServers();
    jsonBufferFlavor=osc.requestFlavors();
  }
 catch (  Exception e) {
    errorMessage=e.getMessage();
    hasError=true;
    return ""String_Node_Str"";
  }
  return jsonBuf;
}","@Override protected String doInBackground(Void... v){
  OSClient osc=OSClient.getInstance(U);
  try {
    jsonBuf=osc.requestServers();
  }
 catch (  Exception e) {
    errorMessage=e.getMessage();
    hasError=true;
    return ""String_Node_Str"";
  }
  return jsonBuf;
}",0.9262435677530018
143257,"protected void pickAServerToAssociateFIP(){
  if (servers.size() == 0) {
    Utils.alert(getString(R.string.NOSERVERTOASSOCIATEFIP),this);
    return;
  }
  spinnerServersArrayAdapter=new ArrayAdapter<Server>(FloatingIPActivity.this,android.R.layout.simple_spinner_item,servers.subList(0,servers.size()));
  spinnerServersArrayAdapter.setDropDownViewResource(android.R.layout.simple_spinner_dropdown_item);
  LayoutInflater li=LayoutInflater.from(this);
  View promptsView=li.inflate(R.layout.my_dialog_layout_fipassociate,null);
  AlertDialog.Builder alertDialogBuilder=new AlertDialog.Builder(this);
  alertDialogBuilder.setView(promptsView);
  alertDialogBuilder.setTitle(getString(R.string.PICKASERVERTOASSOCIATEFIP) + ""String_Node_Str"" + this.fipToAssociate);
  alertDialogSelectServer=alertDialogBuilder.create();
  serverSpinner=(Spinner)promptsView.findViewById(R.id.mySpinner);
  serverSpinner.setAdapter(spinnerServersArrayAdapter);
  final Button mButton=(Button)promptsView.findViewById(R.id.myButton);
  final Button mButtonCancel=(Button)promptsView.findViewById(R.id.myButtonCancel);
  mButton.setOnClickListener(new FloatingIPActivity.ConfirmButtonHandler());
  mButtonCancel.setOnClickListener(new FloatingIPActivity.CancelButtonHandler());
  alertDialogSelectServer.setCanceledOnTouchOutside(false);
  alertDialogSelectServer.setCancelable(false);
  alertDialogSelectServer.show();
}","protected void pickAServerToAssociateFIP(){
  if (servers.size() == 0) {
    Utils.alert(getString(R.string.NOSERVERTOASSOCIATEFIP),this);
    return;
  }
  spinnerServersArrayAdapter=new ArrayAdapter<Server>(FloatingIPActivity.this,android.R.layout.simple_spinner_item,servers.subList(0,servers.size()));
  spinnerServersArrayAdapter.setDropDownViewResource(android.R.layout.simple_spinner_dropdown_item);
  LayoutInflater li=LayoutInflater.from(this);
  View promptsView=li.inflate(R.layout.my_dialog_layout_fipassociate,null);
  AlertDialog.Builder alertDialogBuilder=new AlertDialog.Builder(this);
  alertDialogBuilder.setView(promptsView);
  alertDialogBuilder.setTitle(getString(R.string.PICKASERVERTOASSOCIATEFIP) + ""String_Node_Str"" + this.selectedFIPObj.getIP());
  alertDialogSelectServer=alertDialogBuilder.create();
  serverSpinner=(Spinner)promptsView.findViewById(R.id.mySpinner);
  serverSpinner.setAdapter(spinnerServersArrayAdapter);
  final Button mButton=(Button)promptsView.findViewById(R.id.myButton);
  final Button mButtonCancel=(Button)promptsView.findViewById(R.id.myButtonCancel);
  mButton.setOnClickListener(new FloatingIPActivity.ConfirmButtonHandler());
  mButtonCancel.setOnClickListener(new FloatingIPActivity.CancelButtonHandler());
  alertDialogSelectServer.setCanceledOnTouchOutside(false);
  alertDialogSelectServer.setCancelable(false);
  alertDialogSelectServer.show();
}",0.987188612099644
143258,"/** 
 */
private void associateFIP(String fip){
  fipToAssociate=fip;
  this.progressDialogWaitStop.show();
  (new AsyncTaskOSListServers()).execute();
}","/** 
 */
private void associateFIP(){
  this.progressDialogWaitStop.show();
  (new AsyncTaskOSListServers()).execute();
}",0.8832116788321168
143259,"@Override protected Void doInBackground(String... ip_serverid){
  floatingip=ip_serverid[0];
  serverid=ip_serverid[1];
  OSClient osc=OSClient.getInstance(U);
  try {
    osc.requestFloatingIPAssociate(floatingip,serverid);
  }
 catch (  Exception e) {
    errorMessage=e.getMessage();
    hasError=true;
  }
  return null;
}","@Override protected Void doInBackground(String... ip_serverid){
  floatingip=ip_serverid[0];
  serverid=ip_serverid[1];
  OSClient osc=OSClient.getInstance(U);
  try {
    osc.associateFloatingIP(floatingip,serverid);
  }
 catch (  Exception e) {
    errorMessage=e.getMessage();
    hasError=true;
  }
  return null;
}",0.9612403100775194
143260,"private void refreshView(Vector<SecGroup> secgrps){
  ((LinearLayout)findViewById(R.id.secgrpLayout)).removeAllViews();
  if (secgrps.size() == 0) {
    Utils.alert(getString(R.string.NOSECGRPSAVAIL),this);
    return;
  }
  Iterator<SecGroup> it=secgrps.iterator();
  while (it.hasNext()) {
    SecGroup s=it.next();
    ListSecGroupView sgv=new ListSecGroupView(s,this);
    ((LinearLayout)findViewById(R.id.secgrpLayout)).addView(sgv);
    ((LinearLayout)findViewById(R.id.secgrpLayout)).setGravity(Gravity.CENTER_HORIZONTAL);
    View space=new View(this);
    space.setMinimumHeight(10);
    ((LinearLayout)findViewById(R.id.secgrpLayout)).addView(space);
  }
}","/** 
 */
private void refreshView(Vector<SecGroup> secgrps){
  ((LinearLayout)findViewById(R.id.secgrpLayout)).removeAllViews();
  if (secgrps.size() == 0) {
    Utils.alert(getString(R.string.NOSECGRPSAVAIL),this);
    return;
  }
  Iterator<SecGroup> it=secgrps.iterator();
  while (it.hasNext()) {
    SecGroup s=it.next();
    ListSecGroupView sgv=new ListSecGroupView(s,this);
    ((LinearLayout)findViewById(R.id.secgrpLayout)).addView(sgv);
    ((LinearLayout)findViewById(R.id.secgrpLayout)).setGravity(Gravity.CENTER_HORIZONTAL);
    View space=new View(this);
    space.setMinimumHeight(10);
    ((LinearLayout)findViewById(R.id.secgrpLayout)).addView(space);
  }
}",0.9932885906040269
143261,"@Override public void onCreate(Bundle savedInstanceState){
  super.onCreate(savedInstanceState);
  setContentView(R.layout.secgrplist);
  progressDialogWaitStop=new CustomProgressDialog(this,ProgressDialog.STYLE_SPINNER);
  progressDialogWaitStop.setMessage(getString(R.string.PLEASEWAITCONNECTING));
  String selectedUser=Utils.getStringPreference(""String_Node_Str"",""String_Node_Str"",this);
  try {
    U=User.fromFileID(selectedUser,Configuration.getInstance().getValue(""String_Node_Str"",Defaults.DEFAULTFILESDIR));
  }
 catch (  RuntimeException re) {
    Utils.alert(""String_Node_Str"" + re.getMessage(),this);
    return;
  }
  if (selectedUser.length() != 0)   ((TextView)findViewById(R.id.selected_user)).setText(getString(R.string.SELECTEDUSER) + ""String_Node_Str"" + U.getUserName()+ ""String_Node_Str""+ U.getTenantName()+ ""String_Node_Str"");
 else   ((TextView)findViewById(R.id.selected_user)).setText(getString(R.string.SELECTEDUSER) + ""String_Node_Str"" + getString(R.string.NONE));
  this.update();
}","/** 
 */
@Override public void onCreate(Bundle savedInstanceState){
  super.onCreate(savedInstanceState);
  setContentView(R.layout.secgrplist);
  progressDialogWaitStop=new CustomProgressDialog(this,ProgressDialog.STYLE_SPINNER);
  progressDialogWaitStop.setMessage(getString(R.string.PLEASEWAITCONNECTING));
  String selectedUser=Utils.getStringPreference(""String_Node_Str"",""String_Node_Str"",this);
  try {
    U=User.fromFileID(selectedUser,Configuration.getInstance().getValue(""String_Node_Str"",Defaults.DEFAULTFILESDIR));
  }
 catch (  RuntimeException re) {
    Utils.alert(""String_Node_Str"" + re.getMessage(),this);
    return;
  }
  if (selectedUser.length() != 0)   ((TextView)findViewById(R.id.selected_user)).setText(getString(R.string.SELECTEDUSER) + ""String_Node_Str"" + U.getUserName()+ ""String_Node_Str""+ U.getTenantName()+ ""String_Node_Str"");
 else   ((TextView)findViewById(R.id.selected_user)).setText(getString(R.string.SELECTEDUSER) + ""String_Node_Str"" + getString(R.string.NONE));
  this.update();
}",0.9955643173977328
143262,"public void createSecGroup(View v){
  final AlertDialog.Builder alert=new AlertDialog.Builder(this);
  alert.setMessage(getString(R.string.INPUTSSECNAME));
  final EditText input=new EditText(this);
  alert.setView(input);
  alert.setPositiveButton(""String_Node_Str"",new DialogInterface.OnClickListener(){
    public void onClick(    DialogInterface dialog,    int whichButton){
      String secgrpName=input.getText().toString();
      SecGrpActivity.this.progressDialogWaitStop.show();
      (new AsyncTaskCreateSecGroup()).execute(secgrpName,""String_Node_Str"");
    }
  }
);
  AlertDialog build=alert.create();
  build.show();
}","/** 
 */
public void createSecGroup(View v){
  final AlertDialog.Builder alert=new AlertDialog.Builder(this);
  alert.setMessage(getString(R.string.INPUTSSECNAME));
  final EditText input=new EditText(this);
  alert.setView(input);
  alert.setPositiveButton(""String_Node_Str"",new DialogInterface.OnClickListener(){
    public void onClick(    DialogInterface dialog,    int whichButton){
      String secgrpName=input.getText().toString();
      secgrpName=secgrpName.trim();
      if (secgrpName.length() == 0) {
        Utils.alert(getString(R.string.NOEMPTYNAME),SecGrpActivity.this);
        return;
      }
      SecGrpActivity.this.progressDialogWaitStop.show();
      (new AsyncTaskCreateSecGroup()).execute(secgrpName,""String_Node_Str"");
    }
  }
);
  alert.create().show();
}",0.8333333333333334
143263,"public boolean onCreateOptionsMenu(Menu menu){
  super.onCreateOptionsMenu(menu);
  int order=Menu.FIRST;
  int GROUP=0;
  menu.add(GROUP,0,order++,getString(R.string.MENUHELP)).setIcon(android.R.drawable.ic_menu_help);
  menu.add(GROUP,1,order++,getString(R.string.MENUUPDATE)).setIcon(R.drawable.ic_menu_refresh);
  return true;
}","/** 
 */
public boolean onCreateOptionsMenu(Menu menu){
  super.onCreateOptionsMenu(menu);
  int order=Menu.FIRST;
  int GROUP=0;
  menu.add(GROUP,0,order++,getString(R.string.MENUHELP)).setIcon(android.R.drawable.ic_menu_help);
  menu.add(GROUP,1,order++,getString(R.string.MENUUPDATE)).setIcon(R.drawable.ic_menu_refresh);
  return true;
}",0.986627043090639
143264,"public boolean onOptionsItemSelected(MenuItem item){
  int id=item.getItemId();
  if (id == Menu.FIRST - 1) {
    Utils.alert(getString(R.string.NOTIMPLEMENTED),this);
    return true;
  }
  if (id == Menu.FIRST) {
    if (U == null) {
      Utils.alert(""String_Node_Str"",this);
    }
 else {
      this.update();
      return true;
    }
  }
  return super.onOptionsItemSelected(item);
}","/** 
 */
public boolean onOptionsItemSelected(MenuItem item){
  int id=item.getItemId();
  if (id == Menu.FIRST - 1) {
    Utils.alert(getString(R.string.NOTIMPLEMENTED),this);
    return true;
  }
  if (id == Menu.FIRST) {
    if (U == null) {
      Utils.alert(""String_Node_Str"",this);
    }
 else {
      this.update();
      return true;
    }
  }
  return super.onOptionsItemSelected(item);
}",0.9885350318471338
143265,"public ListSecGroupView getSecGroupView(){
  return relatedListSecGroupView;
}","public SecGroupView getSecGroupView(){
  return relatedSecGroupView;
}",0.945945945945946
143266,"public SimpleSecGroupRule getServer(){
  return R;
}","public SimpleSecGroupRule getServer(){
  return Rl;
}",0.9904761904761904
143267,"public RuleView(SimpleSecGroupRule r,Context ctx){
  super(ctx);
  R=r;
  setOrientation(LinearLayout.HORIZONTAL);
  LinearLayout.LayoutParams params1=new LinearLayout.LayoutParams(LayoutParams.MATCH_PARENT,LayoutParams.MATCH_PARENT);
  setLayoutParams(params1);
  int padding=Utils.getDisplayPixel(ctx,2);
  setPadding(padding,padding,padding,padding);
  row=new LinearLayoutNamed(ctx,this);
  row.setOrientation(LinearLayout.HORIZONTAL);
  LinearLayout.LayoutParams _params1=new LinearLayout.LayoutParams(LayoutParams.MATCH_PARENT,LayoutParams.MATCH_PARENT);
  row.setLayoutParams(_params1);
  row.setBackgroundResource(R.drawable.rounded_corner_thin);
  text=new LinearLayoutNamed(ctx,this);
  text.setOrientation(LinearLayout.VERTICAL);
  LinearLayout.LayoutParams params2=new LinearLayout.LayoutParams(LayoutParams.MATCH_PARENT,LayoutParams.MATCH_PARENT,1f);
  text.setLayoutParams(params2);
  ruleInfo=new TextViewNamed(ctx,this);
  ruleInfo.setTextColor(Color.parseColor(""String_Node_Str""));
  ruleInfo.setOnClickListener((OnClickListener)ctx);
  ruleInfo.setTypeface(null,Typeface.BOLD);
  text.addView(ruleInfo);
  text.setOnClickListener((OnClickListener)ctx);
  row.addView(text);
  setOnClickListener((OnClickListener)ctx);
  deleteRule=new ImageButtonNamed(ctx,this,ImageButtonNamed.BUTTON_DELETE_RULE);
  deleteRule.setImageResource(android.R.drawable.ic_menu_close_clear_cancel);
  deleteRule.setOnClickListener((OnClickListener)ctx);
  info=new LinearLayoutNamed(ctx,this);
  info.setOrientation(LinearLayout.HORIZONTAL);
  LinearLayout.LayoutParams params3=new LinearLayout.LayoutParams(LayoutParams.MATCH_PARENT,LayoutParams.MATCH_PARENT,2f);
  info.setLayoutParams(params3);
  info.setGravity(Gravity.RIGHT | Gravity.CENTER_VERTICAL);
  info.addView(deleteRule);
  row.addView(info);
  addView(row);
}","public RuleView(SimpleSecGroupRule r,Context ctx){
  super(ctx);
  Rl=r;
  setOrientation(LinearLayout.HORIZONTAL);
  LinearLayout.LayoutParams params1=new LinearLayout.LayoutParams(LayoutParams.MATCH_PARENT,LayoutParams.MATCH_PARENT);
  setLayoutParams(params1);
  int padding=Utils.getDisplayPixel(ctx,2);
  setPadding(padding,padding,padding,padding);
  row=new LinearLayoutNamed(ctx,this);
  row.setOrientation(LinearLayout.HORIZONTAL);
  LinearLayout.LayoutParams _params1=new LinearLayout.LayoutParams(LayoutParams.MATCH_PARENT,LayoutParams.MATCH_PARENT);
  row.setLayoutParams(_params1);
  row.setBackgroundResource(R.drawable.rounded_corner_thin);
  text=new LinearLayoutNamed(ctx,this);
  text.setOrientation(LinearLayout.VERTICAL);
  LinearLayout.LayoutParams params2=new LinearLayout.LayoutParams(LayoutParams.MATCH_PARENT,LayoutParams.MATCH_PARENT,1f);
  text.setLayoutParams(params2);
  ruleInfo=new TextViewNamed(ctx,this);
  ruleInfo.setTextColor(Color.parseColor(""String_Node_Str""));
  ruleInfo.setOnClickListener((OnClickListener)ctx);
  ruleInfo.setTypeface(null,Typeface.BOLD);
  text.addView(ruleInfo);
  text.setOnClickListener((OnClickListener)ctx);
  row.addView(text);
  setOnClickListener((OnClickListener)ctx);
  deleteRule=new ImageButtonNamed(ctx,this,ImageButtonNamed.BUTTON_DELETE_RULE);
  deleteRule.setImageResource(android.R.drawable.ic_menu_close_clear_cancel);
  deleteRule.setOnClickListener((OnClickListener)ctx);
  info=new LinearLayoutNamed(ctx,this);
  info.setOrientation(LinearLayout.HORIZONTAL);
  LinearLayout.LayoutParams params3=new LinearLayout.LayoutParams(LayoutParams.MATCH_PARENT,LayoutParams.MATCH_PARENT,2f);
  info.setLayoutParams(params3);
  info.setGravity(Gravity.RIGHT | Gravity.CENTER_VERTICAL);
  info.addView(deleteRule);
  row.addView(info);
  addView(row);
}",0.9997253501785224
143268,"/** 
 * Called when the user has indicated they she would like to dismiss one or more list item positions.
 * @param listView               The originating {@link ListView}.
 * @param reverseSortedPositions An array of positions to dismiss, sorted in descendingorder for convenience.
 */
void onDismiss(ListView listView,int[] reverseSortedPositions);","/** 
 * Called when the user has indicated they she would like to dismiss one or more list item positions.
 * @param listView The originating {@link ListView}.
 * @param position The position being dismissed.
 */
void onDismiss(ListView listView,int position);",0.7103109656301145
143269,"private void performDismiss(final View dismissView,final int dismissPosition){
  final ViewGroup.LayoutParams lp=dismissView.getLayoutParams();
  final int originalHeight=dismissView.getHeight();
  ValueAnimator animator=ValueAnimator.ofInt(originalHeight,1).setDuration(mAnimationTime);
  animator.addListener(new AnimatorListenerAdapter(){
    @Override public void onAnimationEnd(    Animator animation){
      --mDismissAnimationRefCount;
      if (mDismissAnimationRefCount == 0) {
        Collections.sort(mPendingDismisses);
        int[] dismissPositions=new int[mPendingDismisses.size()];
        for (int i=mPendingDismisses.size() - 1; i >= 0; i--) {
          dismissPositions[i]=mPendingDismisses.get(i).position;
        }
        mCallback.onDismiss(mListView,dismissPositions);
        ViewGroup.LayoutParams lp;
        for (        PendingDismissData pendingDismiss : mPendingDismisses) {
          setAlpha(pendingDismiss.view,1f);
          setTranslationX(pendingDismiss.view,0);
          lp=pendingDismiss.view.getLayoutParams();
          lp.height=originalHeight;
          pendingDismiss.view.setLayoutParams(lp);
        }
        mPendingDismisses.clear();
      }
    }
  }
);
  animator.addUpdateListener(new ValueAnimator.AnimatorUpdateListener(){
    @Override public void onAnimationUpdate(    ValueAnimator valueAnimator){
      lp.height=(Integer)valueAnimator.getAnimatedValue();
      dismissView.setLayoutParams(lp);
    }
  }
);
  mPendingDismisses.add(new PendingDismissData(dismissPosition,dismissView));
  animator.start();
}","/** 
 * Animate the dismissed list item to zero-height and fire the dismiss callback when it finishes.
 * @param dismissView     ListView item to dismiss
 * @param dismissPosition Position of dismissed item
 */
private void performDismiss(final View dismissView,final int dismissPosition){
  final ViewGroup.LayoutParams lp=dismissView.getLayoutParams();
  final int originalHeight=dismissView.getHeight();
  ValueAnimator animator=ValueAnimator.ofInt(originalHeight,1).setDuration(mAnimationTime);
  animator.addListener(new AnimatorListenerAdapter(){
    @Override public void onAnimationEnd(    Animator animation){
      dismissView.setTag(R.id.original_height,originalHeight);
      mCallback.onDismiss(mListView,dismissPosition);
      mDismissing=false;
    }
  }
);
  animator.addUpdateListener(new ValueAnimator.AnimatorUpdateListener(){
    @Override public void onAnimationUpdate(    ValueAnimator valueAnimator){
      lp.height=(Integer)valueAnimator.getAnimatedValue();
      dismissView.setLayoutParams(lp);
    }
  }
);
  animator.start();
}",0.5792682926829268
143270,"@Override public boolean onTouch(View view,MotionEvent motionEvent){
  if (mViewWidth < 2) {
    mViewWidth=mListView.getWidth();
  }
switch (motionEvent.getActionMasked()) {
case MotionEvent.ACTION_DOWN:
{
      if (mPaused) {
        return false;
      }
      Rect rect=new Rect();
      int childCount=mListView.getChildCount();
      int[] listViewCoords=new int[2];
      mListView.getLocationOnScreen(listViewCoords);
      int x=(int)motionEvent.getRawX() - listViewCoords[0];
      int y=(int)motionEvent.getRawY() - listViewCoords[1];
      View child;
      for (int i=0; i < childCount; i++) {
        child=mListView.getChildAt(i);
        child.getHitRect(rect);
        if (rect.contains(x,y)) {
          mDownView=child;
          break;
        }
      }
      if (mDownView != null) {
        mDownX=motionEvent.getRawX();
        mDownPosition=mListView.getPositionForView(mDownView);
        mVelocityTracker=VelocityTracker.obtain();
        mVelocityTracker.addMovement(motionEvent);
      }
      view.onTouchEvent(motionEvent);
      return true;
    }
case MotionEvent.ACTION_UP:
{
    if (mVelocityTracker == null) {
      break;
    }
    float deltaX=motionEvent.getRawX() - mDownX;
    mVelocityTracker.addMovement(motionEvent);
    mVelocityTracker.computeCurrentVelocity(1000);
    float velocityX=Math.abs(mVelocityTracker.getXVelocity());
    float velocityY=Math.abs(mVelocityTracker.getYVelocity());
    boolean dismiss=false;
    boolean dismissRight=false;
    if (Math.abs(deltaX) > mViewWidth / 2) {
      dismiss=true;
      dismissRight=deltaX > 0;
    }
 else     if (mMinFlingVelocity <= velocityX && velocityX <= mMaxFlingVelocity && velocityY < velocityX) {
      dismiss=true;
      dismissRight=mVelocityTracker.getXVelocity() > 0;
    }
    if (dismiss) {
      final View downView=mDownView;
      final int downPosition=mDownPosition;
      ++mDismissAnimationRefCount;
      animate(mDownView).translationX(dismissRight ? mViewWidth : -mViewWidth).alpha(0).setDuration(mAnimationTime).setListener(new AnimatorListenerAdapter(){
        @Override public void onAnimationEnd(        Animator animation){
          performDismiss(downView,downPosition);
        }
      }
);
    }
 else {
      animate(mDownView).translationX(0).alpha(1).setDuration(mAnimationTime).setListener(null);
    }
    mVelocityTracker=null;
    mDownX=0;
    mDownView=null;
    mDownPosition=ListView.INVALID_POSITION;
    mSwiping=false;
    break;
  }
case MotionEvent.ACTION_MOVE:
{
  if (mVelocityTracker == null || mPaused) {
    break;
  }
  mVelocityTracker.addMovement(motionEvent);
  float deltaX=motionEvent.getRawX() - mDownX;
  if (Math.abs(deltaX) > mSlop) {
    mSwiping=true;
    mListView.requestDisallowInterceptTouchEvent(true);
    MotionEvent cancelEvent=MotionEvent.obtain(motionEvent);
    cancelEvent.setAction(MotionEvent.ACTION_CANCEL | (motionEvent.getActionIndex() << MotionEvent.ACTION_POINTER_INDEX_SHIFT));
    mListView.onTouchEvent(cancelEvent);
  }
  if (mSwiping) {
    setTranslationX(mDownView,deltaX);
    setAlpha(mDownView,Math.max(0f,Math.min(1f,1f - 2f * Math.abs(deltaX) / mViewWidth)));
    return true;
  }
  break;
}
}
return false;
}","@Override public boolean onTouch(View view,MotionEvent motionEvent){
  if (mViewWidth < 2) {
    mViewWidth=mListView.getWidth();
  }
switch (motionEvent.getActionMasked()) {
case MotionEvent.ACTION_DOWN:
{
      if (mPaused) {
        return false;
      }
      if (mDismissing) {
        return true;
      }
      Rect rect=new Rect();
      int childCount=mListView.getChildCount();
      int[] listViewCoords=new int[2];
      mListView.getLocationOnScreen(listViewCoords);
      int x=(int)motionEvent.getRawX() - listViewCoords[0];
      int y=(int)motionEvent.getRawY() - listViewCoords[1];
      View child;
      for (int i=0; i < childCount; i++) {
        child=mListView.getChildAt(i);
        child.getHitRect(rect);
        if (rect.contains(x,y)) {
          mDownView=child;
          break;
        }
      }
      if (mDownView != null) {
        mDownX=motionEvent.getRawX();
        mDownPosition=mListView.getPositionForView(mDownView);
        mVelocityTracker=VelocityTracker.obtain();
        mVelocityTracker.addMovement(motionEvent);
      }
      view.onTouchEvent(motionEvent);
      return true;
    }
case MotionEvent.ACTION_UP:
{
    if (mVelocityTracker == null) {
      break;
    }
    float deltaX=motionEvent.getRawX() - mDownX;
    mVelocityTracker.addMovement(motionEvent);
    mVelocityTracker.computeCurrentVelocity(1000);
    float velocityX=Math.abs(mVelocityTracker.getXVelocity());
    float velocityY=Math.abs(mVelocityTracker.getYVelocity());
    boolean dismiss=false;
    boolean dismissRight=false;
    if (Math.abs(deltaX) > mViewWidth / 2) {
      dismiss=true;
      dismissRight=deltaX > 0;
    }
 else     if (mMinFlingVelocity <= velocityX && velocityX <= mMaxFlingVelocity && velocityY < velocityX) {
      dismiss=true;
      dismissRight=mVelocityTracker.getXVelocity() > 0;
    }
    if (dismiss) {
      mDismissing=true;
      final View downView=mDownView;
      final int downPosition=mDownPosition;
      ViewPropertyAnimator.animate(mDownView).translationX(dismissRight ? mViewWidth : -mViewWidth).alpha(0).setDuration(mAnimationTime).setListener(new AnimatorListenerAdapter(){
        @Override public void onAnimationEnd(        Animator animation){
          performDismiss(downView,downPosition);
        }
      }
);
    }
 else {
      ViewPropertyAnimator.animate(mDownView).translationX(0).alpha(1).setDuration(mAnimationTime).setListener(null);
    }
    if (mVelocityTracker != null) {
      mVelocityTracker.recycle();
      mVelocityTracker=null;
    }
    mDownX=0;
    mDownView=null;
    mDownPosition=ListView.INVALID_POSITION;
    mSwiping=false;
    break;
  }
case MotionEvent.ACTION_MOVE:
{
  if (mVelocityTracker == null || mPaused) {
    break;
  }
  mVelocityTracker.addMovement(motionEvent);
  float deltaX=motionEvent.getRawX() - mDownX;
  if (Math.abs(deltaX) > mSlop) {
    mSwiping=true;
    mListView.requestDisallowInterceptTouchEvent(true);
    MotionEvent cancelEvent=MotionEvent.obtain(motionEvent);
    cancelEvent.setAction(MotionEvent.ACTION_CANCEL | (motionEvent.getActionIndex() << MotionEvent.ACTION_POINTER_INDEX_SHIFT));
    mListView.onTouchEvent(cancelEvent);
    cancelEvent.recycle();
  }
  if (mSwiping) {
    ViewHelper.setTranslationX(mDownView,deltaX);
    ViewHelper.setAlpha(mDownView,Math.max(0f,Math.min(1f,1f - 2f * Math.abs(deltaX) / mViewWidth)));
    return true;
  }
  break;
}
}
return false;
}",0.9574532287266144
143271,"@Override public void onAnimationEnd(Animator animation){
  --mDismissAnimationRefCount;
  if (mDismissAnimationRefCount == 0) {
    Collections.sort(mPendingDismisses);
    int[] dismissPositions=new int[mPendingDismisses.size()];
    for (int i=mPendingDismisses.size() - 1; i >= 0; i--) {
      dismissPositions[i]=mPendingDismisses.get(i).position;
    }
    mCallback.onDismiss(mListView,dismissPositions);
    ViewGroup.LayoutParams lp;
    for (    PendingDismissData pendingDismiss : mPendingDismisses) {
      setAlpha(pendingDismiss.view,1f);
      setTranslationX(pendingDismiss.view,0);
      lp=pendingDismiss.view.getLayoutParams();
      lp.height=originalHeight;
      pendingDismiss.view.setLayoutParams(lp);
    }
    mPendingDismisses.clear();
  }
}","@Override public void onAnimationEnd(Animator animation){
  dismissView.setTag(R.id.original_height,originalHeight);
  mCallback.onDismiss(mListView,dismissPosition);
  mDismissing=false;
}",0.3072100313479624
143272,"@PostConstruct void init(){
  presentations.setContainerDataSource(datasource);
  presentations.setVisibleColumns(""String_Node_Str"",""String_Node_Str"");
  if (user.isAdmin())   addComponent(addButton);
}","@PostConstruct void init(){
  setSizeFull();
  addComponent(presentations);
  setExpandRatio(presentations,1f);
  presentations.setSizeFull();
  presentations.setSelectable(true);
  presentations.addValueChangeListener(this::presentationSelectedFromList);
  presentations.setContainerDataSource(datasource);
  presentations.setVisibleColumns(""String_Node_Str"",""String_Node_Str"");
  if (user.isAdmin())   addComponent(addButton);
  addButton.setWidth(""String_Node_Str"");
}",0.600297176820208
143273,"public boolean doesItemMatch(boolean previous,ItemStack keyStack,ItemStack checkedStack){
  return previous || (keyStack != null ? checkedStack != null && keyStack.getItem() == checkedStack.getItem() && (keyStack.getItem().getHasSubtypes() ? keyStack.getItemDamage() == checkedStack.getItemDamage() : true) : false);
}","public boolean doesItemMatch(boolean previous,ItemStack keyStack,ItemStack checkedStack){
  return previous || this.getDefaultMatch(keyStack,checkedStack);
}",0.5726315789473684
143274,"public boolean doesItemMatch(ItemStack keyStack,ItemStack checkedStack){
  boolean isGood=false;
  for (  RoutingFocusLogic logic : logicList) {
    isGood=logic.doesItemMatch(isGood,keyStack,checkedStack);
    if (isGood) {
      return true;
    }
  }
  return isGood;
}","public boolean doesItemMatch(ItemStack keyStack,ItemStack checkedStack){
  boolean isGood=false;
  boolean isFirst=true;
  for (  RoutingFocusLogic logic : logicList) {
    if (isFirst) {
      isGood=logic.getDefaultMatch(keyStack,checkedStack);
      isFirst=false;
      continue;
    }
    isGood=logic.doesItemMatch(isGood,keyStack,checkedStack);
  }
  return isGood;
}",0.6625386996904025
143275,"public void addLogic(RoutingFocusLogic logic){
  logicList.add(logic);
}","public void addLogic(RoutingFocusLogic logic){
  if (logic instanceof ILimitingLogic) {
    maximumAmount+=((ILimitingLogic)logic).getRoutingLimit();
  }
  logicList.add(logic);
}",0.5737051792828686
143276,"public void clear(){
  logicList.clear();
  locationList.clear();
}","public void clear(){
  logicList.clear();
  locationList.clear();
  maximumAmount=0;
}",0.8758169934640523
143277,"public boolean doesRecipeMatch(ItemStack[] items,int slottedBloodOrbLevel){
  if (slottedBloodOrbLevel < bloodOrbLevel) {
    return false;
  }
  ItemStack[] recipe=new ItemStack[5];
  if (items.length < 5) {
    return false;
  }
  if (this.recipe.length != 5) {
    ItemStack[] newRecipe=new ItemStack[5];
    for (int i=0; i < 5; i++) {
      if (i + 1 > this.recipe.length) {
        newRecipe[i]=null;
      }
 else {
        newRecipe[i]=this.recipe[i];
      }
    }
    recipe=newRecipe;
  }
 else {
    recipe=this.recipe;
  }
  boolean[] checkList=new boolean[5];
  for (int i=0; i < 5; i++) {
    checkList[i]=false;
  }
  for (int i=0; i < 5; i++) {
    ItemStack recipeItemStack=recipe[i];
    if (recipeItemStack == null) {
      continue;
    }
    boolean test=false;
    for (int j=0; j < 5; j++) {
      if (checkList[j]) {
        continue;
      }
      ItemStack checkedItemStack=items[j];
      if (checkedItemStack == null) {
        continue;
      }
      boolean quickTest=false;
      if (recipeItemStack.getItem() instanceof ItemBlock) {
        if (checkedItemStack.getItem() instanceof ItemBlock) {
          quickTest=true;
        }
      }
 else       if (!(checkedItemStack.getItem() instanceof ItemBlock)) {
        quickTest=true;
      }
      if (!quickTest) {
        continue;
      }
      if ((checkedItemStack.getItemDamage() == recipeItemStack.getItemDamage() || OreDictionary.WILDCARD_VALUE == recipeItemStack.getItemDamage()) && checkedItemStack.getItem() == recipeItemStack.getItem()) {
        test=true;
        checkList[j]=true;
        break;
      }
    }
    if (!test) {
      return false;
    }
  }
  return true;
}","public boolean doesRecipeMatch(ItemStack[] items,int slottedBloodOrbLevel){
  if (slottedBloodOrbLevel < bloodOrbLevel) {
    return false;
  }
  ItemStack[] recipe;
  if (items.length < 5) {
    return false;
  }
  if (this.recipe.length != 5) {
    ItemStack[] newRecipe=new ItemStack[5];
    for (int i=0; i < 5; i++) {
      if (i + 1 > this.recipe.length) {
        newRecipe[i]=null;
      }
 else {
        newRecipe[i]=this.recipe[i];
      }
    }
    recipe=newRecipe;
  }
 else {
    recipe=this.recipe;
  }
  boolean[] checkList=new boolean[5];
  for (int i=0; i < 5; i++) {
    checkList[i]=false;
  }
  for (int i=0; i < 5; i++) {
    ItemStack recipeItemStack=recipe[i];
    if (recipeItemStack == null) {
      continue;
    }
    boolean test=false;
    for (int j=0; j < 5; j++) {
      if (checkList[j]) {
        continue;
      }
      ItemStack checkedItemStack=items[j];
      if (checkedItemStack == null) {
        continue;
      }
      boolean quickTest=false;
      if (recipeItemStack.getItem() instanceof ItemBlock) {
        if (checkedItemStack.getItem() instanceof ItemBlock) {
          quickTest=true;
        }
      }
 else       if (!(checkedItemStack.getItem() instanceof ItemBlock)) {
        quickTest=true;
      }
      if (!quickTest) {
        continue;
      }
      if ((checkedItemStack.getItemDamage() == recipeItemStack.getItemDamage() || OreDictionary.WILDCARD_VALUE == recipeItemStack.getItemDamage()) && checkedItemStack.getItem() == recipeItemStack.getItem()) {
        test=true;
        checkList[j]=true;
        break;
      }
    }
    if (!test) {
      return false;
    }
  }
  return true;
}",0.9948902915539524
143278,"public boolean showIngameHUD(World world,ItemStack stack,EntityPlayer player);","boolean showIngameHUD(World world,ItemStack stack,EntityPlayer player);",0.953020134228188
143279,public ReagentContainerInfo getInfo();,ReagentContainerInfo getInfo();,0.8985507246376812
143280,public ReagentStack getReagent();,ReagentStack getReagent();,0.8813559322033898
143281,"public int fill(ReagentStack resource,boolean doFill);","int fill(ReagentStack resource,boolean doFill);",0.9306930693069309
143282,public int getReagentStackAmount();,int getReagentStackAmount();,0.8888888888888888
143283,"public ReagentStack drain(int maxDrain,boolean doDrain);","ReagentStack drain(int maxDrain,boolean doDrain);",0.9333333333333332
143284,public int getCapacity();,int getCapacity();,0.8372093023255814
143285,public int getTanksTunedToReagent(Reagent reagent);,int getTanksTunedToReagent(Reagent reagent);,0.9263157894736842
143286,"public void setTanksTunedToReagent(Reagent reagent,int total);","void setTanksTunedToReagent(Reagent reagent,int total);",0.9401709401709402
143287,"public Map<Reagent,Integer> getAttunedTankMap();","Map<Reagent,Integer> getAttunedTankMap();",0.9213483146067416
143288,public int getNumberOfTanks();,int getNumberOfTanks();,0.8679245283018868
143289,"@Override public boolean equals(Object o){
  return o instanceof Reagent ? this == o && name.equals(((Reagent)o).name) : false;
}","@Override public boolean equals(Object o){
  return o instanceof Reagent && this == o && name.equals(((Reagent)o).name);
}",0.9561752988047808
143290,"@Override public void setTanksTunedToReagent(Reagent reagent,int total){
  if (total == 0 && this.attunedTankMap.containsKey(reagent)) {
    this.attunedTankMap.remove(reagent);
    return;
  }
  this.attunedTankMap.put(reagent,new Integer(total));
}","@Override public void setTanksTunedToReagent(Reagent reagent,int total){
  if (total == 0 && this.attunedTankMap.containsKey(reagent)) {
    this.attunedTankMap.remove(reagent);
    return;
  }
  this.attunedTankMap.put(reagent,total);
}",0.9527720739219712
143291,"protected boolean areTagsEqual(NBTTagCompound tag,NBTTagCompound comparedTag){
  Set set=tag.func_150296_c();
  for (  Object obj : set) {
    if (obj instanceof String) {
      String str=(String)obj;
      NBTBase baseTag=comparedTag.getTag(str);
      if (baseTag instanceof NBTTagCompound) {
        NBTBase comparedBaseTag=comparedTag.getTag(str);
        if (comparedBaseTag instanceof NBTTagCompound) {
          if (!this.areTagsEqual((NBTTagCompound)tag,comparedTag)) {
            return false;
          }
        }
      }
 else {
        if (baseTag != null && !baseTag.equals(comparedTag.getTag(str))) {
          return false;
        }
      }
    }
  }
  return true;
}","protected boolean areTagsEqual(NBTTagCompound tag,NBTTagCompound comparedTag){
  Set set=tag.func_150296_c();
  for (  Object obj : set) {
    if (obj instanceof String) {
      String str=(String)obj;
      NBTBase baseTag=comparedTag.getTag(str);
      if (baseTag instanceof NBTTagCompound) {
        NBTBase comparedBaseTag=comparedTag.getTag(str);
        if (comparedBaseTag instanceof NBTTagCompound) {
          if (!this.areTagsEqual(tag,comparedTag)) {
            return false;
          }
        }
      }
 else {
        if (baseTag != null && !baseTag.equals(comparedTag.getTag(str))) {
          return false;
        }
      }
    }
  }
  return true;
}",0.9882005899705014
143292,"public static boolean isRequiredItemValid(ItemStack testItem,int currentTierAltar){
  for (  AltarRecipe recipe : altarRecipes) {
    if (recipe.doesRequiredItemMatch(testItem,currentTierAltar)) {
      return true;
    }
  }
  return false;
}","public static boolean isRequiredItemValid(ItemStack testItem,int currentTierAltar){
  if (testItem == null) {
    return false;
  }
  for (  AltarRecipe recipe : altarRecipes) {
    if (recipe.doesRequiredItemMatch(testItem,currentTierAltar)) {
      return true;
    }
  }
  return false;
}",0.9101123595505618
143293,"public static void registerAltarOrbRecipe(ItemStack orbStack,int minTier,int consumptionRate){
  registerAltarRecipe(null,orbStack,minTier,0,consumptionRate,0,true);
}","public static void registerAltarOrbRecipe(ItemStack orbStack,int minTier,int consumptionRate){
  if (!orbMap.containsKey(minTier)) {
    orbMap.put(minTier,orbStack);
  }
  registerAltarRecipe(null,orbStack,minTier,0,consumptionRate,0,true);
}",0.8146341463414634
143294,"public boolean doesRequiredItemMatch(ItemStack testStack){
  if (testStack == null || this.requiredItem == null) {
    return false;
  }
  return this.requiredItem.isItemEqual(testStack);
}","public boolean doesRequiredItemMatch(ItemStack testStack){
  return !(testStack == null || this.requiredItem == null) && this.requiredItem.isItemEqual(testStack);
}",0.8781869688385269
143295,"@Override public void drawBackground(int mouseX,int mouseY,float gameTicks){
  if (isDragging) {
    this.shiftedX-=prevMouseX - mouseX;
    this.shiftedY-=prevMouseY - mouseY;
    prevMouseX=mouseX;
    prevMouseY=mouseY;
  }
}","@Override public void drawBackground(int mouseX,int mouseY,float gameTicks){
  if (isDragging) {
    this.shiftedX-=prevMouseX - mouseX;
    this.shiftedY-=prevMouseY - mouseY;
    onDrag(shiftedX,shiftedY);
    prevMouseX=mouseX;
    prevMouseY=mouseY;
  }
}",0.9363449691991786
143296,"public void renderBackground(){
  RenderHelper.bindTexture(TEXTURE);
  int startX=shiftedX % 256;
  int startY=shiftedY % 256;
  this.gui.drawSizedTexturedModalRect(this.gui.guiLeft,this.gui.guiTop,128 - startX,0 - startY,128,198,128 / zoom,198 / zoom);
}","public void renderBackground(){
  RenderHelper.bindTexture(texture);
  int startX=shiftedX % 256;
  int startY=shiftedY % 256;
  this.gui.drawSizedTexturedModalRect(this.gui.guiLeft,this.gui.guiTop,128 - startX,0 - startY,128,198,128,198);
}",0.9435483870967742
143297,"public ElementBackground(GuiBase containerScreen,int x,int y,int width,int height){
  super(containerScreen,x,y,width,height);
}","public ElementBackground(GuiBase containerScreen,int x,int y,int width,int height,ResourceLocation texture){
  super(containerScreen,x,y,width,height);
  this.texture=texture;
}",0.839344262295082
143298,"@Override public void initGui(){
  super.initGui();
  this.addElement(background);
  pages.add(new TabletPage(this,50,50,10,10,""String_Node_Str"",""String_Node_Str""));
  for (int i=0; i < container.inventorySlots.size(); i++) {
    ((Slot)this.container.inventorySlots.get(i)).xDisplayPosition=-this.getGuiLeft() - 16;
    ((Slot)this.container.inventorySlots.get(i)).yDisplayPosition=-this.getGuiTop() - 16;
  }
}","@Override public void initGui(){
  super.initGui();
  this.addElement(background);
  pages.add(new TabletPage(this,50,50,10,10,""String_Node_Str"",""String_Node_Str""));
  for (  TabletPage page : this.pages) {
    page.gui=this;
  }
  for (int i=0; i < container.inventorySlots.size(); i++) {
    ((Slot)this.container.inventorySlots.get(i)).xDisplayPosition=-this.getGuiLeft() - 16;
    ((Slot)this.container.inventorySlots.get(i)).yDisplayPosition=-this.getGuiTop() - 16;
  }
}",0.927927927927928
143299,"public TabletGui(Container container){
  super(container,TEXTURE);
  this.container=container;
  this.xSize=128;
  this.ySize=200;
  this.drawInventory=false;
  background=new ElementBackground(this,6,6,128,200);
}","public TabletGui(Container container){
  super(container,TEXTURE);
  this.container=container;
  this.xSize=128;
  this.ySize=200;
  this.drawInventory=false;
  background=new ElementBackground(this,6,6,128,200,new ResourceLocation(Reference.TEXTURE_LOCATION + ""String_Node_Str"")){
    @Override public void onDrag(    int shiftedX,    int shiftedY){
      shiftX=shiftedX;
      shiftY=shiftedY;
    }
  }
;
}",0.6794871794871795
143300,"public int getShiftY(){
  return background.shiftedY;
}","public int getShiftY(){
  return shiftY;
}",0.865979381443299
143301,"public int getShiftX(){
  return background.shiftedX;
}","public int getShiftX(){
  return shiftX;
}",0.865979381443299
143302,"@Override public Object getServerGuiElement(int ID,EntityPlayer player,World world,int x,int y,int z){
switch (ID) {
case ARMOUR_ID:
    if (ItemHelper.isPlayerHoldingItem(IModularItem.class,player)) {
      return new ArmourContainer(player.getHeldItem(),player.inventory,world);
    }
case RECIPE_ID:
  return new ArmourContainerRecipe(player.getHeldItem(),player.inventory,world);
default :
return null;
}
}","@Override public Object getServerGuiElement(int ID,EntityPlayer player,World world,int x,int y,int z){
switch (ID) {
case ARMOUR_ID:
    if (ItemHelper.isPlayerHoldingItem(IModularItem.class,player)) {
      return new ArmourContainer(player.getHeldItem(),player.inventory);
    }
case RECIPE_ID:
  return new ArmourContainerRecipe(player.getHeldItem(),player.inventory,world);
default :
return null;
}
}",0.9926289926289926
143303,"@Override public Object getClientGuiElement(int ID,EntityPlayer player,World world,int x,int y,int z){
switch (ID) {
case ARMOUR_ID:
    if (ItemHelper.isPlayerHoldingItem(IModularItem.class,player)) {
      return new ArmourGui(new ArmourContainer(player.getHeldItem(),player.inventory,world),player.inventory);
    }
case RECIPE_ID:
  return new ArmourGuiRecipe(new ArmourContainerRecipe(player.getHeldItem(),player.inventory,world),player.inventory);
default :
return null;
}
}","@Override public Object getClientGuiElement(int ID,EntityPlayer player,World world,int x,int y,int z){
switch (ID) {
case ARMOUR_ID:
    if (ItemHelper.isPlayerHoldingItem(IModularItem.class,player)) {
      return new ArmourGui(new ArmourContainer(player.getHeldItem(),player.inventory),player.inventory);
    }
case RECIPE_ID:
  return new ArmourGuiRecipe(new ArmourContainerRecipe(player.getHeldItem(),player.inventory,world),player.inventory);
default :
return null;
}
}",0.9937106918238994
143304,"/** 
 * Called every tick.
 * @param world
 * @param player
 * @param stack
 */
@Override public void onArmourTick(World world,EntityPlayer player,ItemStack stack){
  int energy=0;
  Iterator<IUpgrade> iterator=NBTHelper.getNBTUpgradeList(stack).iterator();
  while (iterator.hasNext()) {
    IUpgrade upgrade=iterator.next();
    if (upgrade == null) {
      iterator.remove();
      continue;
    }
    energy+=upgrade.onTick(world,player,stack,ArmourSlot.getArmourSlot(this.item.getSlot()));
  }
  if (energy < 0) {
    this.damageArmour(stack,energy * -1);
  }
 else {
    this.healArmour(stack,energy);
  }
}","/** 
 * Called every tick.
 * @param world
 * @param player
 * @param stack
 */
@Override public void onArmourTick(World world,EntityPlayer player,ItemStack stack){
  int energy=0;
  Iterator<IUpgrade> iterator=NBTHelper.getNBTUpgradeList(stack).iterator();
  while (iterator.hasNext()) {
    IUpgrade upgrade=iterator.next();
    if (upgrade == null) {
      iterator.remove();
      continue;
    }
    energy+=upgrade.onTick(world,player,stack,ArmourSlot.getArmourSlot(this.item.getSlot()));
  }
  if (energy > 0) {
    this.damageArmour(stack,energy);
  }
 else {
    this.healArmour(stack,energy * -1);
  }
}",0.9216965742251224
143305,"@Override public void onButtonClick(ArmourPacket packet,String name){
  boolean shouldSync=false;
  try {
    if (name.equals(""String_Node_Str"")) {
      if (UpgradeHandler.addUpgrade(this.getContainerStack(),this.upgrade)) {
        this.upgrade=UpgradeHandler.getResult(this.containerWrapper);
        for (int i=0; i < this.containerWrapper.getSizeInventory(); ++i) {
          ItemStack itemstack1=this.containerWrapper.getStackInSlot(i);
          if (itemstack1 != null) {
            this.containerWrapper.decrStackSize(i,1);
            if (itemstack1.getItem().hasContainerItem(itemstack1)) {
              ItemStack itemstack2=itemstack1.getItem().getContainerItem(itemstack1);
              if (itemstack2 != null && itemstack2.isItemStackDamageable() && itemstack2.getItemDamage() > itemstack2.getMaxDamage()) {
                MinecraftForge.EVENT_BUS.post(new PlayerDestroyItemEvent(this.player,itemstack2));
                continue;
              }
              if (!itemstack1.getItem().doesContainerItemLeaveCraftingGrid(itemstack1) || !this.player.inventory.addItemStackToInventory(itemstack2)) {
                if (this.containerWrapper.getStackInSlot(i) == null) {
                  this.containerWrapper.setInventorySlotContents(i,itemstack2);
                }
 else {
                  this.player.dropPlayerItemWithRandomChoice(itemstack2,false);
                }
              }
            }
          }
        }
        shouldSync=true;
      }
    }
 else     if (name.equals(""String_Node_Str"")) {
      shouldSync=true;
      for (int i=0; i < 9; i++) {
        this.transferStackInSlot(this.player,i);
      }
    }
 else     if (name.equals(""String_Node_Str"")) {
      UpgradeUtil.removeUpgrade(this.getContainerStack(),UpgradeRegistry.getUpgrade(packet.getString()));
      shouldSync=true;
    }
 else     if (name.equals(""String_Node_Str"")) {
      if (MiscUtil.isServer(this.player.worldObj)) {
        this.player.openGui(ModularArmour.instance,GuiHandler.RECIPE_ID,this.player.worldObj,0,0,0);
      }
    }
 else     if (name.equals(""String_Node_Str"")) {
      NBTHelper.createDefaultStackTag(getContainerStack());
      getContainerStack().stackTagCompound.setInteger(packet.getString(),packet.getInt());
    }
  }
 catch (  UpgradeException e) {
  }
 finally {
    this.player.inventory.mainInventory[this.containerIndex]=this.getContainerStack();
  }
  if (shouldSync) {
    this.detectAndSendChanges();
    PacketHandler.sendTo(ArmourPacket.getPacket(PacketTypes.CONTAINERSYNC).addItemStack(this.getContainerStack()),player);
  }
}","@Override public void onButtonClick(ArmourPacket packet,String name){
  boolean shouldSync=false;
  try {
    if (name.equals(""String_Node_Str"")) {
      if (UpgradeHandler.addUpgrade(this.getContainerStack(),this.upgrade)) {
        this.upgrade=UpgradeHandler.getResult(this.containerWrapper);
        for (int i=0; i < this.containerWrapper.getSizeInventory(); ++i) {
          ItemStack itemstack1=this.containerWrapper.getStackInSlot(i);
          if (itemstack1 != null) {
            this.containerWrapper.decrStackSize(i,1);
            if (itemstack1.getItem().hasContainerItem(itemstack1)) {
              ItemStack itemstack2=itemstack1.getItem().getContainerItem(itemstack1);
              if (itemstack2 != null && itemstack2.isItemStackDamageable() && itemstack2.getItemDamage() > itemstack2.getMaxDamage()) {
                MinecraftForge.EVENT_BUS.post(new PlayerDestroyItemEvent(this.player,itemstack2));
                continue;
              }
              if (!itemstack1.getItem().doesContainerItemLeaveCraftingGrid(itemstack1) || !this.player.inventory.addItemStackToInventory(itemstack2)) {
                if (this.containerWrapper.getStackInSlot(i) == null) {
                  this.containerWrapper.setInventorySlotContents(i,itemstack2);
                }
 else {
                  this.player.dropPlayerItemWithRandomChoice(itemstack2,false);
                }
              }
            }
          }
        }
        shouldSync=true;
      }
    }
 else     if (name.equals(""String_Node_Str"")) {
      shouldSync=true;
      for (int i=0; i < 9; i++) {
        this.transferStackInSlot(this.player,i);
      }
    }
 else     if (name.equals(""String_Node_Str"")) {
      UpgradeUtil.removeUpgrade(this.getContainerStack(),UpgradeRegistry.getUpgrade(packet.getString()));
      shouldSync=true;
    }
 else     if (name.equals(""String_Node_Str"")) {
      if (MiscUtil.isServer(this.player.worldObj)) {
        this.player.openGui(ModularArmour.instance,GuiHandler.RECIPE_ID,this.player.worldObj,0,0,0);
      }
    }
 else     if (name.equals(""String_Node_Str"")) {
      NBTHelper.createDefaultStackTag(getContainerStack());
      storage.setKey(packet.getString());
      storage.set(getContainerStack(),new Percentage(packet.getInt()));
    }
  }
 catch (  UpgradeException e) {
  }
 finally {
    this.player.inventory.mainInventory[this.containerIndex]=this.getContainerStack();
  }
  if (shouldSync) {
    this.detectAndSendChanges();
    PacketHandler.sendTo(ArmourPacket.getPacket(PacketTypes.CONTAINERSYNC).addItemStack(this.getContainerStack()),player);
  }
}",0.9735470167986098
143306,"@Override public final void preInit(){
  material=(ItemBase)new ItemBase(""String_Node_Str"").setUnlocalizedName(""String_Node_Str"").setCreativeTab(ModularArmour.creativeTab);
  materialModular=EnumHelper.addArmorMaterial(""String_Node_Str"",25,new int[]{3,7,5,3},10);
  helmetModular=new RFModularArmour(materialModular,0).setUnlocalizedName(""String_Node_Str"").setTextureName(Reference.ITEM_LOCATION + ""String_Node_Str"");
  chestplateModular=new RFModularArmour(materialModular,1).setUnlocalizedName(""String_Node_Str"").setTextureName(Reference.ITEM_LOCATION + ""String_Node_Str"");
  leggingsModular=new RFModularArmour(materialModular,2).setUnlocalizedName(""String_Node_Str"").setTextureName(Reference.ITEM_LOCATION + ""String_Node_Str"");
  bootsModular=new RFModularArmour(materialModular,3).setUnlocalizedName(""String_Node_Str"").setTextureName(Reference.ITEM_LOCATION + ""String_Node_Str"");
  GameRegistry.registerItem(helmetModular,""String_Node_Str"");
  GameRegistry.registerItem(chestplateModular,""String_Node_Str"");
  GameRegistry.registerItem(leggingsModular,""String_Node_Str"");
  GameRegistry.registerItem(bootsModular,""String_Node_Str"");
  UpgradeRegistry.registerListener(new FieldList());
}","@Override public final void preInit(){
  material=(ItemBase)new ItemBase(""String_Node_Str"").setUnlocalizedName(""String_Node_Str"").setCreativeTab(ModularArmour.creativeTab);
  materialModular=EnumHelper.addArmorMaterial(""String_Node_Str"",25,new int[]{3,7,5,3},0);
  helmetModular=new RFModularArmour(materialModular,0).setUnlocalizedName(""String_Node_Str"").setTextureName(Reference.ITEM_LOCATION + ""String_Node_Str"");
  chestplateModular=new RFModularArmour(materialModular,1).setUnlocalizedName(""String_Node_Str"").setTextureName(Reference.ITEM_LOCATION + ""String_Node_Str"");
  leggingsModular=new RFModularArmour(materialModular,2).setUnlocalizedName(""String_Node_Str"").setTextureName(Reference.ITEM_LOCATION + ""String_Node_Str"");
  bootsModular=new RFModularArmour(materialModular,3).setUnlocalizedName(""String_Node_Str"").setTextureName(Reference.ITEM_LOCATION + ""String_Node_Str"");
  GameRegistry.registerItem(helmetModular,""String_Node_Str"");
  GameRegistry.registerItem(chestplateModular,""String_Node_Str"");
  GameRegistry.registerItem(leggingsModular,""String_Node_Str"");
  GameRegistry.registerItem(bootsModular,""String_Node_Str"");
  UpgradeRegistry.registerListener(new FieldList());
}",0.9995803608896348
143307,"@Override public final void registerUpgrades(){
  calfShields=new UpgradeBasic(""String_Node_Str"").setArmourSlot(ArmourSlot.LEGS);
  hoverJetpack=new UpgradeHoverJetpack();
  basePotion=new UpgradeBasic(""String_Node_Str"");
  fallDamage=new UpgradeFallDamage();
  speed=new UpgradeSpeed();
  stepAssist=new UpgradeStepAssist();
  autoFeeder=new UpgradeAutoFeeder();
  jumpBoost=new UpgradeJumpBoost();
  electrolyzer=new UpgradeElectrolyzer();
  nightVision=new UpgradePotion(""String_Node_Str"",Potion.nightVision,10,250);
  invisibility=new UpgradePotion(""String_Node_Str"",Potion.invisibility,10,500);
  magnet=new UpgradeMagnet();
  leadstoneEnergy=new UpgradeEnergy(""String_Node_Str"",800,400000);
  hardenedEnergy=new UpgradeEnergy(""String_Node_Str"",4000,2000000).setDependencies(leadstoneEnergy);
  reinforcedEnergy=new UpgradeEnergy(""String_Node_Str"",20000,10000000).setDependencies(hardenedEnergy);
  resonantEnergy=new UpgradeEnergy(""String_Node_Str"",100000,50000000).setDependencies(reinforcedEnergy);
  decorative=new UpgradeDecorative(""String_Node_Str"").setTextureName(""String_Node_Str"");
  invisible=new UpgradeDecorative(""String_Node_Str"").setTextureName(""String_Node_Str"");
  undeadProtection=new UpgradeUndead();
  arthropodProtection=new UpgradeArthropod();
  fireProtection=new UpgradeFire();
  explosionProtection=new UpgradeExplosion();
  unblockableProtection=new UpgradeUnblockable();
  magicalProtection=new UpgradeMagic();
  witherProtection=new UpgradeWither();
  lavaProtection=new UpgradeLava();
  playerProtection=new UpgradePlayerProtection();
  solar=new UpgradeSolar(""String_Node_Str"",1);
}","@Override public final void registerUpgrades(){
  calfShields=new UpgradeBasic(""String_Node_Str"").setArmourSlot(ArmourSlot.LEGS);
  hoverJetpack=new UpgradeHoverJetpack();
  basePotion=new UpgradeBasic(""String_Node_Str"");
  fallDamage=new UpgradeFallDamage();
  speed=new UpgradeSpeed();
  stepAssist=new UpgradeStepAssist();
  autoFeeder=new UpgradeAutoFeeder();
  jumpBoost=new UpgradeJumpBoost();
  electrolyzer=new UpgradeElectrolyzer();
  nightVision=new UpgradePotion(""String_Node_Str"",Potion.nightVision,1,10,250);
  invisibility=new UpgradePotion(""String_Node_Str"",Potion.invisibility,10,500);
  magnet=new UpgradeMagnet();
  leadstoneEnergy=new UpgradeEnergy(""String_Node_Str"",800,400000);
  hardenedEnergy=new UpgradeEnergy(""String_Node_Str"",4000,2000000).setDependencies(leadstoneEnergy);
  reinforcedEnergy=new UpgradeEnergy(""String_Node_Str"",20000,10000000).setDependencies(hardenedEnergy);
  resonantEnergy=new UpgradeEnergy(""String_Node_Str"",100000,50000000).setDependencies(reinforcedEnergy);
  decorative=new UpgradeDecorative(""String_Node_Str"").setTextureName(""String_Node_Str"");
  invisible=new UpgradeDecorative(""String_Node_Str"").setTextureName(""String_Node_Str"");
  undeadProtection=new UpgradeUndead();
  arthropodProtection=new UpgradeArthropod();
  fireProtection=new UpgradeFire();
  explosionProtection=new UpgradeExplosion();
  unblockableProtection=new UpgradeUnblockable();
  magicalProtection=new UpgradeMagic();
  witherProtection=new UpgradeWither();
  lavaProtection=new UpgradeLava();
  playerProtection=new UpgradePlayerProtection();
  solar=new UpgradeSolar(""String_Node_Str"",1);
}",0.9993815708101422
143308,"public ArmourGuiRecipe(ArmourContainerRecipe container,InventoryPlayer inventory){
  super(container,TEXTURE);
  this.container=container;
  this.texture=TEXTURE;
  this.drawTitle=false;
  this.drawInventory=false;
  this.xSize=176;
  this.ySize=152;
  this.leftArrow=new ElementButton(this,5,5,""String_Node_Str"",227,12,227,12,227,12,7,7,TEXTURE.toString());
  this.rightArrow=new ElementButton(this,164,5,""String_Node_Str"",235,12,235,12,235,12,7,7,TEXTURE.toString());
  this.upgrade=new ElementButton(this,71,18,""String_Node_Str"",227,23,227,23,16,16,TEXTURE.toString());
  this.compatible=new TabCompatible(this);
  this.rightArrow.setToolTip(""String_Node_Str"");
  this.leftArrow.setToolTip(""String_Node_Str"");
}","public ArmourGuiRecipe(ArmourContainerRecipe container,InventoryPlayer inventory){
  super(container,TEXTURE);
  this.container=container;
  this.texture=TEXTURE;
  this.drawTitle=false;
  this.drawInventory=false;
  this.xSize=176;
  this.ySize=152;
  this.leftArrow=new ElementButton(this,5,5,""String_Node_Str"",227,12,227,12,227,12,7,7,TEXTURE.toString());
  this.rightArrow=new ElementButton(this,164,5,""String_Node_Str"",235,12,235,12,235,12,7,7,TEXTURE.toString());
  this.upgrade=new ElementButton(this,71,18,""String_Node_Str"",227,23,227,23,16,16,TEXTURE.toString());
  this.upgrade.setToolTip(""String_Node_Str"");
  this.compatible=new TabCompatible(this);
  this.rightArrow.setToolTip(""String_Node_Str"");
  this.leftArrow.setToolTip(""String_Node_Str"");
}",0.9687924016282226
143309,"@Override public boolean onMouseWheel(int mouseX,int mouseY,int movement){
  if (!super.onMouseWheel(mouseX,mouseY,movement)) {
    return false;
  }
  this.startIndex+=movement / 12;
  if (startIndex > this.modularItems.length - this.maxItems) {
    this.startIndex=this.modularItems.length - this.maxItems;
  }
  if (this.startIndex < 0) {
    this.startIndex=0;
  }
  displaySlots(this.open);
  return true;
}","@Override public boolean onMouseWheel(int mouseX,int mouseY,int movement){
  if (!super.onMouseWheel(mouseX,mouseY,movement)) {
    return false;
  }
  this.startIndex+=movement / 96;
  if (startIndex > this.modularItems.length - this.maxItems) {
    this.startIndex=this.modularItems.length - this.maxItems;
  }
  if (this.startIndex < 0) {
    this.startIndex=0;
  }
  displaySlots(this.open);
  return true;
}",0.9951456310679612
143310,"@SubscribeEvent public void onPlayerTick(PlayerTickEvent e){
  EntityPlayer player=e.player;
  PlayerArmour storage=PlayerArmour.getFor(player);
  ItemStack[] armourList=player.inventory.armorInventory;
  for (int i=0; i < armourList.length; i++) {
    ItemStack playerStack=armourList[i];
    ItemStack storedStack=storage.stacks[i];
    if (!ItemStack.areItemStacksEqual(playerStack,storedStack)) {
      if (playerStack != null && playerStack.getItem() instanceof IModularItem) {
        ((IModularItem)playerStack.getItem()).onArmourEquip(player.worldObj,player,playerStack);
      }
      if (storedStack != null && storedStack.getItem() instanceof IModularItem) {
        ((IModularItem)storedStack.getItem()).onArmourDequip(player.worldObj,player,storedStack);
      }
    }
  }
  storage.update(armourList);
}","@SubscribeEvent public void onPlayerTick(PlayerTickEvent e){
  EntityPlayer player=e.player;
  PlayerArmour storage=PlayerArmour.getFor(player);
  ItemStack[] armourList=player.inventory.armorInventory;
  for (int i=0; i < armourList.length; i++) {
    ItemStack playerStack=armourList[i];
    ItemStack storedStack=storage.stacks[i];
    if (!InventoryUtil.areItemStacksEqual(playerStack,storedStack)) {
      if (playerStack != null && playerStack.getItem() instanceof IModularItem) {
        ((IModularItem)playerStack.getItem()).onArmourEquip(player.worldObj,player,playerStack);
      }
      if (storedStack != null && storedStack.getItem() instanceof IModularItem) {
        ((IModularItem)storedStack.getItem()).onArmourDequip(player.worldObj,player,storedStack);
      }
    }
  }
  storage.update(armourList);
}",0.9877899877899878
143311,"private void setFlying(EntityPlayer player,boolean bool,World world){
  if (bool) {
    player.capabilities.allowFlying=true;
    player.sendPlayerAbilities();
  }
 else {
    player.capabilities.allowFlying=false;
    player.capabilities.isFlying=false;
    player.sendPlayerAbilities();
  }
}","private void setFlying(EntityPlayer player,boolean bool,World world){
  if (bool) {
    if (player.capabilities.allowFlying == true) {
      return;
    }
    player.capabilities.allowFlying=true;
    player.sendPlayerAbilities();
  }
 else {
    if (player.capabilities.allowFlying == false) {
      return;
    }
    player.capabilities.allowFlying=false;
    player.capabilities.isFlying=false;
    player.sendPlayerAbilities();
  }
}",0.8043775649794802
143312,"@EventHandler public void init(FMLInitializationEvent event){
  MinecraftForge.EVENT_BUS.register(new GenericEventHandler());
  MinecraftForge.EVENT_BUS.register(proxy);
  FMLCommonHandler.instance().bus().register(new GenericEventHandler());
  ItemRegister.INSTANCE.init();
  for (  IUpgrade upgrade : UpgradeList.INSTANCE) {
    upgrade.registerConfigOptions();
  }
  NetworkRegistry.INSTANCE.registerGuiHandler(instance,guiHandler);
  proxy.registerKeyBinds();
}","@EventHandler public void init(FMLInitializationEvent event){
  if (developmentEnvironment) {
    MinecraftForge.EVENT_BUS.register(new DamageEventHandler());
  }
  MinecraftForge.EVENT_BUS.register(new GenericEventHandler());
  MinecraftForge.EVENT_BUS.register(proxy);
  FMLCommonHandler.instance().bus().register(new GenericEventHandler());
  ItemRegister.INSTANCE.init();
  for (  IUpgrade upgrade : UpgradeList.INSTANCE) {
    upgrade.registerConfigOptions();
  }
  NetworkRegistry.INSTANCE.registerGuiHandler(instance,guiHandler);
  proxy.registerKeyBinds();
}",0.8574199806013579
143313,"@Override protected void drawGuiContainerBackgroundLayer(float f,int x,int y){
  super.drawGuiContainerBackgroundLayer(f,x,y);
  if (this.container.recipe != null) {
    IUpgrade upgrade=this.container.recipe.getRecipeOutput();
    this.drawStringBounded(upgrade.getName(),70,this.guiLeft + 100,this.guiTop + 18,0xFFFFFF);
    this.drawStringBounded(upgrade.getInformation(),159,this.guiLeft + 11,this.guiTop + 80,0xFFFFFF);
    this.drawStringBounded(String.valueOf(upgrade.isCompatible(this.container.item,this.container.stack,this.container.item.getSlot())),70,this.guiLeft + 100,this.guiTop + 30,0xFFFFFF);
  }
}","@Override protected void drawGuiContainerBackgroundLayer(float f,int x,int y){
  super.drawGuiContainerBackgroundLayer(f,x,y);
  if (this.container.recipe != null) {
    IUpgrade upgrade=this.container.recipe.getRecipeOutput();
    this.drawStringBounded(upgrade.getName(),70,this.guiLeft + 100,this.guiTop + 18,0xFFFFFF);
    this.drawStringBounded(upgrade.getInformation(),159,this.guiLeft + 11,this.guiTop + 80,0xFFFFFF);
    if (upgrade.isCompatible(this.container.item,this.container.stack,this.container.item.getSlot())) {
      this.drawStringBounded(StringHelper.localize(""String_Node_Str""),70,this.guiLeft + 100,this.guiTop + 50,0xFFFFFF);
    }
 else {
      this.drawStringBounded(StringHelper.localize(""String_Node_Str""),70,this.guiLeft + 100,this.guiTop + 50,0xFFFFFF);
    }
  }
}",0.7290780141843972
143314,"@Override public int getSlot(){
  return 0;
}","@Override public int getSlot(){
  return this.armorType;
}",0.8543689320388349
143315,"public IUpgrade next(){
  this.index++;
  return list.get(index);
}","public IUpgrade next(){
  return list.get(index++);
}",0.85
143316,"public IUpgrade get(int index){
  NBTTagCompound nbt=list.getCompoundTagAt(index);
  if (nbt == null) {
    return null;
  }
  try {
    IUpgrade upgrade=UpgradeList.list.get(nbt.getInteger(""String_Node_Str""));
    return upgrade;
  }
 catch (  IndexOutOfBoundsException e) {
    return null;
  }
}","public IUpgrade get(int index){
  NBTTagCompound nbt=list.getCompoundTagAt(index);
  if (nbt == null) {
    return null;
  }
  try {
    if (nbt.hasKey(""String_Node_Str"")) {
      IUpgrade upgrade=UpgradeList.list.get(nbt.getInteger(""String_Node_Str""));
      return upgrade;
    }
 else {
      return null;
    }
  }
 catch (  IndexOutOfBoundsException e) {
    return null;
  }
}",0.8323529411764706
143317,"public static boolean doesNBTListContainUpgrade(NBTUpgradeList list,IUpgrade upgrade){
  for (  IUpgrade up : list) {
    if (up != null && upgrade != null && up.getId() == upgrade.getId()) {
      return true;
    }
  }
  return false;
}","public static boolean doesNBTListContainUpgrade(NBTUpgradeList list,IUpgrade upgrade){
  for (  IUpgrade up : list) {
    if (up.getId() == upgrade.getId()) {
      return true;
    }
  }
  return false;
}",0.9255079006772008
143318,"private void pickupSeasonalHolidays(final LocalDate month,final Map<LocalDate,Holiday> holidays){
  final List<SeasonalHoliday> seasonalHolidays=seasonalHolidaysMapping.get(month);
  if (seasonalHolidays == null) {
    return;
  }
  for (  final SeasonalHoliday seasonalHoliday : seasonalHolidays) {
    holidays.put(seasonalHoliday.getTargetDate(),seasonalHoliday);
  }
}","private void pickupSeasonalHolidays(final LocalDate month,final Map<LocalDate,Holiday> holidays){
  final List<SeasonalHoliday> seasonalHolidays=seasonalHolidaysMapping.get(month);
  if (seasonalHolidays == null) {
    return;
  }
  for (  final SeasonalHoliday seasonalHoliday : seasonalHolidays) {
    LocalDate targetDate=seasonalHoliday.getTargetDate();
    if (targetDate.getDayOfWeek() == DateTimeConstants.SUNDAY) {
      targetDate=targetDate.plusDays(1);
    }
    holidays.put(targetDate,seasonalHoliday);
  }
}",0.7637178051511758
143319,"public void calculate(final WorkPlace defaultWorkPlace,final WorkPlace mainOffice){
  clearCalculate();
  if (paidLeave) {
    setBeginTime(mainOffice.getBaseBeginTime());
    setFinishTime(mainOffice.getBaseFinishTime());
    this.actualWorkingMinute=mainOffice.getBaseWorkTimeMinute();
    return;
  }
  WorkPlace actualWorkPlace=workPlace;
  if (actualWorkPlace == null) {
    actualWorkPlace=defaultWorkPlace;
  }
  DateTime beginDateTime=null;
  if (beginTime != null) {
    beginDateTime=BASE_DATE.toDateTime(beginTime);
  }
  DateTime finishDateTime=null;
  if (finishTime != null) {
    finishDateTime=BASE_DATE.toDateTime(finishTime);
  }
  if (beginDateTime != null && finishDateTime != null) {
    if (!beginDateTime.isBefore(finishDateTime)) {
      finishDateTime=finishDateTime.plusDays(1);
    }
    final Interval workTimeInterval=new Interval(beginDateTime,finishDateTime);
    this.actualWorkingMinute=actualWorkPlace.calculateWorkingMinute(workTimeInterval);
    if (actualWorkingMinute < mainOffice.getBaseWorkTimeMinute() && isWorkDay()) {
      this.compensationMinute=mainOffice.getBaseWorkTimeMinute() - actualWorkingMinute;
    }
    this.midnightWorkingMinute=MidnightTime.INSTANCE.calculateContainsMinute(workTimeInterval,actualWorkPlace);
  }
 else {
    if (finishDateTime != null) {
      finishDateTime=null;
      setFinishTime(null);
    }
  }
  if (isWorkDay()) {
    this.tardyOrEarlyLeaving=actualWorkPlace.isTardyOrEarlyLeaving(beginDateTime,finishDateTime);
    if (tardyOrEarlyLeaving) {
      this.compensationMinute=0;
    }
 else     if (beginDateTime == null && !StringUtils.hasLength(specialWorkCode)) {
      this.absence=true;
    }
  }
}","public void calculate(final WorkPlace defaultWorkPlace,final WorkPlace mainOffice){
  clearCalculate();
  if (paidLeave) {
    setBeginTime(mainOffice.getBaseBeginTime());
    setFinishTime(mainOffice.getBaseFinishTime());
    this.actualWorkingMinute=mainOffice.getBaseWorkTimeMinute();
    return;
  }
  WorkPlace actualWorkPlace=workPlace;
  if (actualWorkPlace == null) {
    actualWorkPlace=defaultWorkPlace;
  }
  DateTime beginDateTime=null;
  if (beginTime != null) {
    beginDateTime=BASE_DATE.toDateTime(beginTime);
  }
  DateTime finishDateTime=null;
  if (finishTime != null) {
    finishDateTime=BASE_DATE.toDateTime(finishTime);
  }
  if (beginDateTime != null && finishDateTime != null) {
    if (!beginDateTime.isBefore(finishDateTime)) {
      finishDateTime=finishDateTime.plusDays(1);
    }
    final Interval workTimeInterval=new Interval(beginDateTime,finishDateTime);
    this.actualWorkingMinute=actualWorkPlace.calculateWorkingMinute(workTimeInterval,mainOffice);
    if (actualWorkingMinute < mainOffice.getBaseWorkTimeMinute() && isWorkDay()) {
      this.compensationMinute=mainOffice.getBaseWorkTimeMinute() - actualWorkingMinute;
    }
    this.midnightWorkingMinute=MidnightTime.INSTANCE.calculateContainsMinute(workTimeInterval,actualWorkPlace);
  }
 else {
    if (finishDateTime != null) {
      finishDateTime=null;
      setFinishTime(null);
    }
  }
  if (isWorkDay()) {
    this.tardyOrEarlyLeaving=actualWorkPlace.isTardyOrEarlyLeaving(beginDateTime,finishDateTime);
    if (tardyOrEarlyLeaving) {
      this.compensationMinute=0;
    }
 else     if (beginDateTime == null && !StringUtils.hasLength(specialWorkCode)) {
      this.absence=true;
    }
  }
}",0.9967445989937852
143320,"int calculateWorkingMinute(final Interval workTimeInterval){
  int workingMinute=(int)toMinute(workTimeInterval) - calculateContainsBreakTimeMinute(workTimeInterval);
  return truncateWithTimeUnit(workingMinute);
}","int calculateWorkingMinute(final Interval workTimeInterval,final WorkPlace mainOffice){
  int workingMinute=(int)toMinute(workTimeInterval) - calculateContainsBreakTimeMinute(workTimeInterval);
  return truncateWithTimeUnit(workingMinute,mainOffice);
}",0.9184549356223176
143321,"int truncateWithTimeUnit(final int minute){
  int determinedMinute=0;
  int undeterminedMinute=minute;
  if (baseWorkTimeMinute <= minute) {
    determinedMinute=baseWorkTimeMinute;
    undeterminedMinute=minute - baseWorkTimeMinute;
  }
  final int unitTimeMinute=(getUnitTime().getHourOfDay() * 60) + getUnitTime().getMinuteOfHour();
  return determinedMinute + undeterminedMinute - (undeterminedMinute % unitTimeMinute);
}","int truncateWithTimeUnit(final int minute,final WorkPlace mainOffice){
  int determinedMinute=0;
  int undeterminedMinute=minute;
  int baseWorkTimeMinute=this.baseWorkTimeMinute;
  if (baseWorkTimeMinute < mainOffice.getBaseWorkTimeMinute() && mainOffice.getBaseWorkTimeMinute() <= minute) {
    baseWorkTimeMinute=mainOffice.getBaseWorkTimeMinute();
  }
  if (baseWorkTimeMinute <= minute) {
    determinedMinute=baseWorkTimeMinute;
    undeterminedMinute=minute - baseWorkTimeMinute;
  }
  final int unitTimeMinute=(getUnitTime().getHourOfDay() * 60) + getUnitTime().getMinuteOfHour();
  return determinedMinute + undeterminedMinute - (undeterminedMinute % unitTimeMinute);
}",0.4932003626473255
143322,"@RequestMapping(method=RequestMethod.GET,params=""String_Node_Str"") @ResponseBody @ResponseStatus(HttpStatus.OK) public DailyAttendanceResource getDefaultAttendanceResource(@RequestParam(value=""String_Node_Str"",required=false) String workPlaceUuid){
  WorkPlace defaultWorkPlace=workPlaceService.getWorkPlace(workPlaceUuid);
  DailyAttendance attendance=new DailyAttendance();
  attendance.setDefault(defaultWorkPlace);
  attendance.calculate(defaultWorkPlace);
  return beanMapper.map(attendance,DailyAttendanceResource.class);
}","@RequestMapping(method=RequestMethod.GET,params=""String_Node_Str"") @ResponseBody @ResponseStatus(HttpStatus.OK) public DailyAttendanceResource getDefaultAttendanceResource(@RequestParam(value=""String_Node_Str"",required=false) String workPlaceUuid){
  WorkPlace defaultWorkPlace=workPlaceService.getWorkPlace(workPlaceUuid);
  DailyAttendance attendance=new DailyAttendance();
  attendance.setDefault(defaultWorkPlace);
  attendance.calculate(defaultWorkPlace,workPlaceService.getMainOffice());
  return beanMapper.map(attendance,DailyAttendanceResource.class);
}",0.9697525206232814
143323,"@RequestMapping(method=RequestMethod.POST) @ResponseBody @ResponseStatus(HttpStatus.OK) public DailyAttendanceResource calculate(@RequestBody @Validated DailyAttendanceResource resource){
  DailyAttendance attendance=beanMapper.map(resource,DailyAttendance.class);
  attendance.setWorkPlace(workPlaceService.getWorkPlace(attendance.getWorkPlace().getWorkPlaceUuid()));
  attendance.calculate();
  return beanMapper.map(attendance,DailyAttendanceResource.class);
}","@RequestMapping(method=RequestMethod.POST) @ResponseBody @ResponseStatus(HttpStatus.OK) public DailyAttendanceResource calculate(@RequestBody @Validated DailyAttendanceResource resource){
  DailyAttendance attendance=beanMapper.map(resource,DailyAttendance.class);
  attendance.setWorkPlace(workPlaceService.getWorkPlace(attendance.getWorkPlace().getWorkPlaceUuid()));
  attendance.calculate(null,workPlaceService.getMainOffice());
  return beanMapper.map(attendance,DailyAttendanceResource.class);
}",0.9615784008307372
143324,"private long toMinute(Interval interval){
  return TimeUnit.MILLISECONDS.toMinutes(interval.toDuration().getMillis());
}","private long toMinute(final Interval interval){
  return TimeUnit.MILLISECONDS.toMinutes(interval.toDuration().getMillis());
}",0.975609756097561
143325,"public int calculateContainsMinute(Interval workTimeInterval){
  long minute=0;
  for (  Interval midnightInterval : breakTimeIntervals) {
    if (workTimeInterval.overlaps(midnightInterval)) {
      minute+=toMinute(workTimeInterval.overlap(midnightInterval));
    }
  }
  return (int)minute;
}","int calculateContainsMinute(final Interval workTimeInterval){
  long minute=0;
  for (  final Interval breakTimeInterval : breakTimeIntervals) {
    if (workTimeInterval.overlaps(breakTimeInterval)) {
      minute+=toMinute(workTimeInterval.overlap(breakTimeInterval));
    }
  }
  return (int)minute;
}",0.8528428093645485
143326,"public BreakTime(String workPlaceUuid,LocalTime beginTime,LocalTime finishTime){
  this.workPlaceUuid=workPlaceUuid;
  this.beginTime=beginTime;
  this.finishTime=finishTime;
  breakTimeIntervals.add(new Interval(BASE_DATE.toDateTime(beginTime),BASE_DATE.toDateTime(finishTime)));
  breakTimeIntervals.add(new Interval(BASE_DATE.toDateTime(beginTime).plusDays(1),BASE_DATE.toDateTime(finishTime).plusDays(1)));
}","public BreakTime(final String workPlaceUuid,final LocalTime beginTime,final LocalTime finishTime){
  this.workPlaceUuid=workPlaceUuid;
  this.beginTime=beginTime;
  this.finishTime=finishTime;
  this.breakTimeBaseInterval=new Interval(BASE_DATE.toDateTime(beginTime),BASE_DATE.toDateTime(finishTime));
  breakTimeIntervals.add(breakTimeBaseInterval);
  breakTimeIntervals.add(new Interval(BASE_DATE.toDateTime(beginTime).plusDays(1),BASE_DATE.toDateTime(finishTime).plusDays(1)));
}",0.8702460850111857
143327,"public boolean isWorkDay(){
  if (targetDate == null) {
    return true;
  }
  return !((targetDate.getDayOfWeek() == DateTimeConstants.SATURDAY) || (targetDate.getDayOfWeek() == DateTimeConstants.SUNDAY));
}","private boolean isWorkDay(){
  if (targetDate == null) {
    return true;
  }
  return !((targetDate.getDayOfWeek() == DateTimeConstants.SATURDAY) || (targetDate.getDayOfWeek() == DateTimeConstants.SUNDAY));
}",0.973621103117506
143328,"public void calculate(WorkPlace defaultWorkPlace){
  clearCalculate();
  WorkPlace actualWorkPlace=workPlace;
  if (actualWorkPlace == null) {
    actualWorkPlace=defaultWorkPlace;
  }
  if (beginTime != null && finishTime != null) {
    DateTime beginDateTime=BASE_DATE.toDateTime(beginTime);
    DateTime finishDateTime=BASE_DATE.toDateTime(finishTime);
    if (!beginTime.isBefore(finishTime)) {
      finishDateTime=finishDateTime.plusDays(1);
    }
    Interval workTimeInterval=new Interval(beginDateTime,finishDateTime);
    this.actualWorkingMinute=actualWorkPlace.calculateWorkingMinute(workTimeInterval);
    if (actualWorkingMinute < DEFAULT_ACTUAL_WORKING_MINUTE && isWorkDay()) {
      this.compensationMinute=DEFAULT_ACTUAL_WORKING_MINUTE - actualWorkingMinute;
    }
    this.midnightWorkingMinute=actualWorkPlace.truncateWithTimeUnit(MidnightTime.INSTANCE.calculateContainsMinute(workTimeInterval));
  }
 else {
    if (finishTime != null) {
      setFinishTime(null);
    }
  }
  if (isWorkDay()) {
    this.tardyOrEarlyLeaving=actualWorkPlace.isTardyOrEarlyLeaving(beginTime,finishTime);
    if (tardyOrEarlyLeaving) {
      this.compensationMinute=0;
    }
 else     if (beginTime == null && !StringUtils.hasLength(specialWorkCode)) {
      this.absence=true;
    }
  }
}","public void calculate(final WorkPlace defaultWorkPlace,final WorkPlace mainOffice){
  clearCalculate();
  if (paidLeave) {
    setBeginTime(mainOffice.getBaseBeginTime());
    setFinishTime(mainOffice.getBaseFinishTime());
    this.actualWorkingMinute=mainOffice.getBaseWorkTimeMinute();
    return;
  }
  WorkPlace actualWorkPlace=workPlace;
  if (actualWorkPlace == null) {
    actualWorkPlace=defaultWorkPlace;
  }
  DateTime beginDateTime=null;
  if (beginTime != null) {
    beginDateTime=BASE_DATE.toDateTime(beginTime);
  }
  DateTime finishDateTime=null;
  if (finishTime != null) {
    finishDateTime=BASE_DATE.toDateTime(finishTime);
  }
  if (beginDateTime != null && finishDateTime != null) {
    if (!beginDateTime.isBefore(finishDateTime)) {
      finishDateTime=finishDateTime.plusDays(1);
    }
    final Interval workTimeInterval=new Interval(beginDateTime,finishDateTime);
    this.actualWorkingMinute=actualWorkPlace.calculateWorkingMinute(workTimeInterval);
    if (actualWorkingMinute < mainOffice.getBaseWorkTimeMinute() && isWorkDay()) {
      this.compensationMinute=mainOffice.getBaseWorkTimeMinute() - actualWorkingMinute;
    }
    this.midnightWorkingMinute=MidnightTime.INSTANCE.calculateContainsMinute(workTimeInterval,actualWorkPlace);
  }
 else {
    if (finishDateTime != null) {
      finishDateTime=null;
      setFinishTime(null);
    }
  }
  if (isWorkDay()) {
    this.tardyOrEarlyLeaving=actualWorkPlace.isTardyOrEarlyLeaving(beginDateTime,finishDateTime);
    if (tardyOrEarlyLeaving) {
      this.compensationMinute=0;
    }
 else     if (beginDateTime == null && !StringUtils.hasLength(specialWorkCode)) {
      this.absence=true;
    }
  }
}",0.7753866845998655
143329,"public void setDefault(WorkPlace defaultWorkPlace){
  setBeginTime(defaultWorkPlace.getBaseBeginTime());
  setFinishTime(defaultWorkPlace.getBaseFinishTime());
}","public void setDefault(final WorkPlace defaultWorkPlace){
  setBeginTime(defaultWorkPlace.getBaseBeginTime());
  setFinishTime(defaultWorkPlace.getBaseFinishTime());
}",0.9817073170731708
143330,"private long toMinute(Interval interval){
  return TimeUnit.MILLISECONDS.toMinutes(interval.toDuration().getMillis());
}","private long toMinute(final Interval interval){
  return TimeUnit.MILLISECONDS.toMinutes(interval.toDuration().getMillis());
}",0.975609756097561
143331,"int calculateContainsMinute(Interval workTimeInterval){
  long minute=0;
  for (  Interval midnightInterval : midnightIntervals) {
    if (workTimeInterval.overlaps(midnightInterval)) {
      minute+=toMinute(workTimeInterval.overlap(midnightInterval));
    }
  }
  return (int)minute;
}","int calculateContainsMinute(final Interval workTimeInterval,final WorkPlace workPlace){
  long minute=0;
  for (  final Interval midnightInterval : midnightIntervals) {
    if (workTimeInterval.overlaps(midnightInterval)) {
      final Interval overlappedInterval=workTimeInterval.overlap(midnightInterval);
      minute+=(toMinute(overlappedInterval) - workPlace.calculateContainsBreakTimeMinute(overlappedInterval));
    }
 else {
      if (midnightInterval.isAfter(workTimeInterval)) {
        break;
      }
    }
  }
  if (minute == 0) {
    return 0;
  }
 else {
    return workPlace.truncateWithTimeUnit((int)minute);
  }
}",0.5474372955288986
143332,"public TimeCard addAttendance(DailyAttendance attendance){
  if (attendances == null) {
    attendances=new ArrayList<>();
  }
  attendances.add(attendance);
  return this;
}","public TimeCard addAttendance(final DailyAttendance attendance){
  if (attendances == null) {
    attendances=new ArrayList<>();
  }
  attendances.add(attendance);
  return this;
}",0.9830508474576272
143333,"private int calculateContainsBreakTimeMinute(Interval workTimeInterval){
  int minute=0;
  for (  BreakTime breakTime : getBreakTimes()) {
    minute+=breakTime.calculateContainsMinute(workTimeInterval);
  }
  return minute;
}","int calculateContainsBreakTimeMinute(final Interval workTimeInterval){
  if (getBreakTimes() == null) {
    return 0;
  }
  int minute=0;
  for (  final BreakTime breakTime : getBreakTimes()) {
    final int containsMinute=breakTime.calculateContainsMinute(workTimeInterval);
    if (containsMinute == 0 && breakTime.isFuture(workTimeInterval)) {
      break;
    }
    minute+=containsMinute;
  }
  return minute;
}",0.3457943925233644
143334,"private long toMinute(Interval interval){
  return TimeUnit.MILLISECONDS.toMinutes(interval.toDuration().getMillis());
}","private long toMinute(final Interval interval){
  return TimeUnit.MILLISECONDS.toMinutes(interval.toDuration().getMillis());
}",0.975609756097561
143335,"public int calculateWorkingMinute(Interval workTimeInterval){
  int workingMinute=(int)toMinute(workTimeInterval) - calculateContainsBreakTimeMinute(workTimeInterval);
  return truncateWithTimeUnit(workingMinute);
}","int calculateWorkingMinute(final Interval workTimeInterval){
  int workingMinute=(int)toMinute(workTimeInterval) - calculateContainsBreakTimeMinute(workTimeInterval);
  return truncateWithTimeUnit(workingMinute);
}",0.9696969696969696
143336,"public int truncateWithTimeUnit(int minute){
  int determinedMinute=0;
  int undeterminedMinute=minute;
  if (baseWorkTimeMinute <= minute) {
    determinedMinute=baseWorkTimeMinute;
    undeterminedMinute=minute - baseWorkTimeMinute;
  }
  return determinedMinute + undeterminedMinute - (undeterminedMinute % getUnitTime().getMinuteOfHour());
}","int truncateWithTimeUnit(final int minute){
  int determinedMinute=0;
  int undeterminedMinute=minute;
  if (baseWorkTimeMinute <= minute) {
    determinedMinute=baseWorkTimeMinute;
    undeterminedMinute=minute - baseWorkTimeMinute;
  }
  final int unitTimeMinute=(getUnitTime().getHourOfDay() * 60) + getUnitTime().getMinuteOfHour();
  return determinedMinute + undeterminedMinute - (undeterminedMinute % unitTimeMinute);
}",0.6441558441558441
143337,"public void initialize(){
  Interval baseWorkTimeInterval=new Interval(BASE_DATE.toDateTime(baseBeginTime),BASE_DATE.toDateTime(baseFinishTime));
  this.baseWorkTimeMinute=(int)toMinute(baseWorkTimeInterval) - calculateContainsBreakTimeMinute(baseWorkTimeInterval);
}","public void initialize(){
  this.baseWorkTimeInterval=new Interval(BASE_DATE.toDateTime(baseBeginTime),BASE_DATE.toDateTime(baseFinishTime));
  this.baseWorkTimeMinute=(int)toMinute(baseWorkTimeInterval) - calculateContainsBreakTimeMinute(baseWorkTimeInterval);
}",0.9735849056603774
143338,"public boolean isTardyOrEarlyLeaving(LocalTime beginTime,LocalTime finishTime){
  if (beginTime != null && beginTime.isAfter(baseBeginTime)) {
    return true;
  }
  if (finishTime != null && finishTime.isBefore(baseFinishTime)) {
    return true;
  }
  return false;
}","boolean isTardyOrEarlyLeaving(final DateTime beginTime,final DateTime finishTime){
  if (beginTime != null && beginTime.isAfter(baseWorkTimeInterval.getStart())) {
    return true;
  }
  if (finishTime != null && finishTime.isBefore(baseWorkTimeInterval.getEnd())) {
    return true;
  }
  return false;
}",0.8118466898954704
143339,"public void stop(BundleContext context) throws Exception {
  Set<BundleActivator> bundleActivators=loadActivators();
  for (  BundleActivator bundleActivator : bundleActivators) {
    bundleActivator.stop(context);
  }
  MBeanServer mbeanServer=findOrCreateMBeanServer();
  testRunner.unregisterMBean(mbeanServer);
}","public void stop(BundleContext context) throws Exception {
  for (  BundleActivator bundleActivator : bundleActivators) {
    bundleActivator.stop(context);
  }
  MBeanServer mbeanServer=findOrCreateMBeanServer();
  testRunner.unregisterMBean(mbeanServer);
}",0.8989547038327527
143340,"public void start(final BundleContext context) throws Exception {
  final TestClassLoader testClassLoader=new TestClassLoader(){
    @Override public Class<?> loadTestClass(    String className) throws ClassNotFoundException {
      return context.getBundle().loadClass(className);
    }
  }
;
  Set<BundleActivator> bundleActivators=loadActivators();
  for (  BundleActivator bundleActivator : bundleActivators) {
    bundleActivator.start(context);
  }
  MBeanServer mbeanServer=findOrCreateMBeanServer();
  testRunner=new JMXTestRunner(testClassLoader){
    @Override public byte[] runTestMethod(    String className,    String methodName){
      BundleAssociation.setBundle(context.getBundle());
      BundleContextAssociation.setBundleContext(context);
      return super.runTestMethod(className,methodName);
    }
  }
;
  testRunner.registerMBean(mbeanServer);
}","public void start(final BundleContext context) throws Exception {
  final TestClassLoader testClassLoader=new TestClassLoader(){
    @Override public Class<?> loadTestClass(    String className) throws ClassNotFoundException {
      return context.getBundle().loadClass(className);
    }
  }
;
  bundleActivators=loadActivators();
  for (  BundleActivator bundleActivator : bundleActivators) {
    bundleActivator.start(context);
  }
  MBeanServer mbeanServer=findOrCreateMBeanServer();
  testRunner=new JMXTestRunner(testClassLoader){
    @Override public byte[] runTestMethod(    String className,    String methodName){
      BundleAssociation.setBundle(context.getBundle());
      BundleContextAssociation.setBundleContext(context);
      return super.runTestMethod(className,methodName);
    }
  }
;
  testRunner.registerMBean(mbeanServer);
}",0.9877551020408164
143341,"@Override public List<DeploymentDescription> generate(TestClass testClass){
  ArrayList<DeploymentDescription> deployments=new ArrayList<>();
  DeploymentScenarioGenerator defaultDeploymentScenarioGenerator=getDefaultDeploymentScenarioGenerator();
  if (defaultDeploymentScenarioGenerator != null) {
    List<DeploymentDescription> annotationDeployments=defaultDeploymentScenarioGenerator.generate(testClass);
    if (annotationDeployments != null && !annotationDeployments.isEmpty()) {
      return annotationDeployments;
    }
  }
  try {
    bndFile=getBndFile(testClass);
    BndProjectBuilder bndProjectBuilder=ShrinkWrap.create(BndProjectBuilder.class);
    bndProjectBuilder.setBndFile(bndFile);
    bndProjectBuilder.generateManifest(true);
    File commonBndFile=getCommonBndFile();
    if (commonBndFile != null) {
      bndProjectBuilder.addProjectPropertiesFile(commonBndFile);
    }
    JavaArchive javaArchive=bndProjectBuilder.as(JavaArchive.class);
    javaArchive.addClass(BndFile.class);
    Analyzer analyzer=new Analyzer();
    Properties analyzerProperties=new Properties();
    if (commonBndFile != null) {
      analyzerProperties.putAll(analyzer.loadProperties(commonBndFile));
    }
    analyzerProperties.putAll(analyzer.loadProperties(bndFile));
    analyzer.setProperties(analyzerProperties);
    boolean testable=isTestable(testClass);
    if (testable) {
      addTestClass(testClass,javaArchive);
      fixExportPackage(testClass,analyzer);
    }
    ZipExporter zipExporter=javaArchive.as(ZipExporter.class);
    Jar jar=new Jar(javaArchive.getName(),zipExporter.exportAsInputStream());
    analyzer.setJar(jar);
    DeploymentDescription deploymentDescription=new DeploymentDescription(javaArchive.getName(),javaArchive);
    deploymentDescription.shouldBeTestable(testable).shouldBeManaged(true);
    deployments.add(deploymentDescription);
    Manifest firstPassManifest=new Manifest(javaArchive.get(MANIFEST_PATH).getAsset().openStream());
    firstPassManifest.getMainAttributes().remove(""String_Node_Str"");
    analyzer.mergeManifest(firstPassManifest);
    Manifest manifest=analyzer.calcManifest();
    ByteArrayOutputStream baos=new ByteArrayOutputStream();
    manifest.write(baos);
    ByteArrayAsset byteArrayAsset=new ByteArrayAsset(baos.toByteArray());
    replaceManifest(javaArchive,byteArrayAsset);
    return deployments;
  }
 catch (  Exception e) {
    throw new RuntimeException(e);
  }
}","@Override public List<DeploymentDescription> generate(TestClass testClass){
  ArrayList<DeploymentDescription> deployments=new ArrayList<>();
  DeploymentScenarioGenerator defaultDeploymentScenarioGenerator=getDefaultDeploymentScenarioGenerator();
  if (defaultDeploymentScenarioGenerator != null) {
    List<DeploymentDescription> annotationDeployments=defaultDeploymentScenarioGenerator.generate(testClass);
    if (annotationDeployments != null && !annotationDeployments.isEmpty()) {
      return annotationDeployments;
    }
  }
  try {
    bndFile=getBndFile(testClass);
    BndProjectBuilder bndProjectBuilder=ShrinkWrap.create(BndProjectBuilder.class);
    bndProjectBuilder.setBndFile(bndFile);
    bndProjectBuilder.generateManifest(true);
    File commonBndFile=getCommonBndFile();
    if (commonBndFile != null) {
      bndProjectBuilder.addProjectPropertiesFile(commonBndFile);
    }
    JavaArchive javaArchive=bndProjectBuilder.as(JavaArchive.class);
    javaArchive.addClass(BndFile.class);
    Analyzer analyzer=new Analyzer();
    Properties analyzerProperties=new Properties();
    if (commonBndFile != null) {
      analyzerProperties.putAll(analyzer.loadProperties(commonBndFile));
    }
    analyzerProperties.putAll(analyzer.loadProperties(bndFile));
    analyzer.setProperties(analyzerProperties);
    boolean testable=isTestable(testClass);
    if (testable) {
      addTestClass(testClass,javaArchive);
      fixExportPackage(testClass,analyzer);
    }
    ZipExporter zipExporter=javaArchive.as(ZipExporter.class);
    Jar jar=new Jar(javaArchive.getName(),zipExporter.exportAsInputStream());
    analyzer.setJar(jar);
    DeploymentDescription deploymentDescription=new DeploymentDescription(javaArchive.getName(),javaArchive);
    deploymentDescription.shouldBeTestable(testable).shouldBeManaged(true);
    deployments.add(deploymentDescription);
    Manifest firstPassManifest=new Manifest(javaArchive.get(MANIFEST_PATH).getAsset().openStream());
    firstPassManifest.getMainAttributes().remove(new Attributes.Name(""String_Node_Str""));
    analyzer.mergeManifest(firstPassManifest);
    Manifest manifest=analyzer.calcManifest();
    ByteArrayOutputStream baos=new ByteArrayOutputStream();
    manifest.write(baos);
    ByteArrayAsset byteArrayAsset=new ByteArrayAsset(baos.toByteArray());
    replaceManifest(javaArchive,byteArrayAsset);
    return deployments;
  }
 catch (  Exception e) {
    throw new RuntimeException(e);
  }
}",0.9957169080155008
143342,"@Override public View onCreateView(LayoutInflater inflater,ViewGroup container,Bundle savedInstanceState){
  View v=inflater.inflate(R.layout.pid,container,false);
  if (v == null)   throw new RuntimeException();
  mKpView=(TextView)v.findViewById(R.id.textView1);
  mKiView=(TextView)v.findViewById(R.id.textView2);
  mKdView=(TextView)v.findViewById(R.id.textView3);
  mTargetAngleView=(TextView)v.findViewById(R.id.textView4);
  mTurningView=(TextView)v.findViewById(R.id.textView5);
  mKpSeekBar=(SeekBar)v.findViewById(R.id.KpSeekBar);
  mKpSeekBar.setMax(1000);
  final TextView mKpSeekBarValue=(TextView)v.findViewById(R.id.KpValue);
  mKpSeekBar.setOnSeekBarChangeListener(new SeekBar.OnSeekBarChangeListener(){
    public void onProgressChanged(    SeekBar seekBar,    int progress,    boolean fromTouch){
      mKpSeekBarValue.setText(String.format(""String_Node_Str"",(float)progress / 100.0f));
    }
    public void onStartTrackingTouch(    SeekBar seekBar){
    }
    public void onStopTrackingTouch(    SeekBar seekBar){
    }
  }
);
  mKpSeekBar.setProgress(mKpSeekBar.getMax() / 2);
  mKiSeekBar=(SeekBar)v.findViewById(R.id.KiSeekBar);
  mKiSeekBar.setMax(1000);
  final TextView mKiSeekBarValue=(TextView)v.findViewById(R.id.KiValue);
  mKiSeekBar.setOnSeekBarChangeListener(new SeekBar.OnSeekBarChangeListener(){
    public void onProgressChanged(    SeekBar seekBar,    int progress,    boolean fromTouch){
      mKiSeekBarValue.setText(String.format(""String_Node_Str"",(float)progress / 100.0f));
    }
    public void onStartTrackingTouch(    SeekBar seekBar){
    }
    public void onStopTrackingTouch(    SeekBar seekBar){
    }
  }
);
  mKiSeekBar.setProgress(mKiSeekBar.getMax() / 2);
  mKdSeekBar=(SeekBar)v.findViewById(R.id.KdSeekBar);
  mKdSeekBar.setMax(1000);
  final TextView mKdSeekBarValue=(TextView)v.findViewById(R.id.KdValue);
  mKdSeekBar.setOnSeekBarChangeListener(new SeekBar.OnSeekBarChangeListener(){
    public void onProgressChanged(    SeekBar seekBar,    int progress,    boolean fromTouch){
      mKdSeekBarValue.setText(String.format(""String_Node_Str"",(float)progress / 100.0f));
    }
    public void onStartTrackingTouch(    SeekBar seekBar){
    }
    public void onStopTrackingTouch(    SeekBar seekBar){
    }
  }
);
  mKdSeekBar.setProgress(mKdSeekBar.getMax() / 2);
  mTargetAngleSeekBar=(SeekBar)v.findViewById(R.id.TargetAngleSeekBar);
  mTargetAngleSeekBar.setMax(6000);
  final TextView mTargetAngleSeekBarValue=(TextView)v.findViewById(R.id.TargetAngleValue);
  mTargetAngleSeekBar.setOnSeekBarChangeListener(new SeekBar.OnSeekBarChangeListener(){
    public void onProgressChanged(    SeekBar seekBar,    int progress,    boolean fromTouch){
      mTargetAngleSeekBarValue.setText(String.format(""String_Node_Str"",(float)progress / 100.0f - 30.0f));
    }
    public void onStartTrackingTouch(    SeekBar seekBar){
    }
    public void onStopTrackingTouch(    SeekBar seekBar){
    }
  }
);
  mTargetAngleSeekBar.setProgress(mTargetAngleSeekBar.getMax() / 2);
  mTurningSeekBar=(SeekBar)v.findViewById(R.id.TurningSeekBar);
  mTurningSeekBar.setMax(100);
  final TextView mTurningSeekBarValue=(TextView)v.findViewById(R.id.TurningValue);
  mTurningSeekBar.setOnSeekBarChangeListener(new SeekBar.OnSeekBarChangeListener(){
    public void onProgressChanged(    SeekBar seekBar,    int progress,    boolean fromTouch){
      mTurningSeekBarValue.setText(Integer.toString(progress));
    }
    public void onStartTrackingTouch(    SeekBar seekBar){
    }
    public void onStopTrackingTouch(    SeekBar seekBar){
    }
  }
);
  mTurningSeekBar.setProgress(mTurningSeekBar.getMax() / 2);
  mButton=(Button)v.findViewById(R.id.button);
  mButton.setOnClickListener(new OnClickListener(){
    @Override public void onClick(    View v){
      BalancingRobotFullSizeActivity activity=(BalancingRobotFullSizeActivity)getActivity();
      if (activity == null || activity.mChatService == null) {
        if (D)         Log.e(TAG,""String_Node_Str"");
        return;
      }
      if (activity.mChatService.getState() == BluetoothChatService.STATE_CONNECTED) {
        if (mKpSeekBarValue.getText() != null && mKiSeekBarValue.getText() != null && mKdSeekBarValue.getText() != null && (!mKpSeekBarValue.getText().equals(oldKpValue) || !mKiSeekBarValue.getText().equals(oldKiValue) || !mKdSeekBarValue.getText().equals(oldKdValue))) {
          oldKpValue=mKpSeekBarValue.getText();
          oldKiValue=mKiSeekBarValue.getText();
          oldKdValue=mKdSeekBarValue.getText();
          mHandler.post(new Runnable(){
            public void run(){
              BalancingRobotFullSizeActivity activity=(BalancingRobotFullSizeActivity)getActivity();
              if (activity != null)               activity.mChatService.mBluetoothProtocol.setPID((int)(Float.parseFloat(mKpSeekBarValue.getText().toString()) * 100.0f),(int)(Float.parseFloat(mKiSeekBarValue.getText().toString()) * 100.0f),(int)(Float.parseFloat(mKdSeekBarValue.getText().toString()) * 100.0f));
            }
          }
);
          counter+=25;
          mHandler.post(new Runnable(){
            public void run(){
              BalancingRobotFullSizeActivity activity=(BalancingRobotFullSizeActivity)getActivity();
              if (activity != null)               activity.mChatService.mBluetoothProtocol.getPID();
            }
          }
);
          counter+=25;
        }
        if (mTargetAngleSeekBarValue.getText() != null && !mTargetAngleSeekBarValue.getText().equals(oldTargetAngleValue)) {
          oldTargetAngleValue=mTargetAngleSeekBarValue.getText();
          mHandler.postDelayed(new Runnable(){
            public void run(){
              BalancingRobotFullSizeActivity activity=(BalancingRobotFullSizeActivity)getActivity();
              if (activity != null)               activity.mChatService.mBluetoothProtocol.setTarget((int)(Float.parseFloat(mTargetAngleSeekBarValue.getText().toString()) * 100.0f));
            }
          }
,counter);
          counter+=25;
          mHandler.postDelayed(new Runnable(){
            public void run(){
              BalancingRobotFullSizeActivity activity=(BalancingRobotFullSizeActivity)getActivity();
              if (activity != null)               activity.mChatService.mBluetoothProtocol.getTarget();
            }
          }
,counter);
          counter+=25;
        }
        if (mTurningSeekBarValue.getText() != null && !mTurningSeekBarValue.getText().equals(oldTurningValue)) {
          oldTurningValue=mTurningSeekBarValue.getText();
          mHandler.postDelayed(new Runnable(){
            public void run(){
              BalancingRobotFullSizeActivity activity=(BalancingRobotFullSizeActivity)getActivity();
              if (activity != null)               activity.mChatService.mBluetoothProtocol.setTurning(Byte.parseByte(mTurningSeekBarValue.getText().toString()));
            }
          }
,counter);
          counter+=25;
          mHandler.postDelayed(new Runnable(){
            public void run(){
              BalancingRobotFullSizeActivity activity=(BalancingRobotFullSizeActivity)getActivity();
              if (activity != null)               activity.mChatService.mBluetoothProtocol.getTurning();
            }
          }
,counter);
          counter+=25;
        }
        counter=0;
      }
    }
  }
);
  Button mKpUpArrow=(Button)v.findViewById(R.id.KpUpArrow);
  Button mKpDownArrow=(Button)v.findViewById(R.id.KpDownArrow);
  Button mKiUpArrow=(Button)v.findViewById(R.id.KiUpArrow);
  Button mKiDownArrow=(Button)v.findViewById(R.id.KiDownArrow);
  Button mKdUpArrow=(Button)v.findViewById(R.id.KdUpArrow);
  Button mKdDownArrow=(Button)v.findViewById(R.id.KdDownArrow);
  Button mTargetAngleUpArrow=(Button)v.findViewById(R.id.TargetAngleUpArrow);
  Button mTargetAngleDownArrow=(Button)v.findViewById(R.id.TargetAngleDownArrow);
  Button mTurningUpArrow=(Button)v.findViewById(R.id.TurningUpArrow);
  Button mTurningDownArrow=(Button)v.findViewById(R.id.TurningDownArrow);
  mKpUpArrow.setOnClickListener(new OnClickListener(){
    @Override public void onClick(    View v){
      mKpSeekBar.setProgress(round10(mKpSeekBar.getProgress() + 10));
    }
  }
);
  mKpDownArrow.setOnClickListener(new OnClickListener(){
    @Override public void onClick(    View v){
      mKpSeekBar.setProgress(round10(mKpSeekBar.getProgress() - 10));
    }
  }
);
  mKiUpArrow.setOnClickListener(new OnClickListener(){
    @Override public void onClick(    View v){
      mKiSeekBar.setProgress(round10(mKiSeekBar.getProgress() + 10));
    }
  }
);
  mKiDownArrow.setOnClickListener(new OnClickListener(){
    @Override public void onClick(    View v){
      mKiSeekBar.setProgress(round10(mKiSeekBar.getProgress() - 10));
    }
  }
);
  mKdUpArrow.setOnClickListener(new OnClickListener(){
    @Override public void onClick(    View v){
      mKdSeekBar.setProgress(round10(mKdSeekBar.getProgress() + 10));
    }
  }
);
  mKdDownArrow.setOnClickListener(new OnClickListener(){
    @Override public void onClick(    View v){
      mKdSeekBar.setProgress(round10(mKdSeekBar.getProgress() - 10));
    }
  }
);
  mTargetAngleUpArrow.setOnClickListener(new OnClickListener(){
    @Override public void onClick(    View v){
      mTargetAngleSeekBar.setProgress(round10(mTargetAngleSeekBar.getProgress() + 10));
    }
  }
);
  mTargetAngleDownArrow.setOnClickListener(new OnClickListener(){
    @Override public void onClick(    View v){
      mTargetAngleSeekBar.setProgress(round10(mTargetAngleSeekBar.getProgress() - 10));
    }
  }
);
  mTurningUpArrow.setOnClickListener(new OnClickListener(){
    @Override public void onClick(    View v){
      mTurningSeekBar.setProgress(mTurningSeekBar.getProgress() + 1);
    }
  }
);
  mTurningDownArrow.setOnClickListener(new OnClickListener(){
    @Override public void onClick(    View v){
      mTurningSeekBar.setProgress(mTurningSeekBar.getProgress() - 1);
    }
  }
);
  updateButton();
  return v;
}","@Override public View onCreateView(LayoutInflater inflater,ViewGroup container,Bundle savedInstanceState){
  View v=inflater.inflate(R.layout.pid,container,false);
  if (v == null)   throw new RuntimeException();
  mKpView=(TextView)v.findViewById(R.id.textView1);
  mKiView=(TextView)v.findViewById(R.id.textView2);
  mKdView=(TextView)v.findViewById(R.id.textView3);
  mTargetAngleView=(TextView)v.findViewById(R.id.textView4);
  mTurningView=(TextView)v.findViewById(R.id.textView5);
  mKpSeekBar=(SeekBar)v.findViewById(R.id.KpSeekBar);
  mKpSeekBar.setMax(1000);
  final TextView mKpSeekBarValue=(TextView)v.findViewById(R.id.KpValue);
  mKpSeekBar.setOnSeekBarChangeListener(new SeekBar.OnSeekBarChangeListener(){
    public void onProgressChanged(    SeekBar seekBar,    int progress,    boolean fromTouch){
      mKpSeekBarValue.setText(String.format(""String_Node_Str"",(float)progress / 100.0f));
    }
    public void onStartTrackingTouch(    SeekBar seekBar){
    }
    public void onStopTrackingTouch(    SeekBar seekBar){
    }
  }
);
  mKpSeekBar.setProgress(mKpSeekBar.getMax() / 2);
  mKiSeekBar=(SeekBar)v.findViewById(R.id.KiSeekBar);
  mKiSeekBar.setMax(1000);
  final TextView mKiSeekBarValue=(TextView)v.findViewById(R.id.KiValue);
  mKiSeekBar.setOnSeekBarChangeListener(new SeekBar.OnSeekBarChangeListener(){
    public void onProgressChanged(    SeekBar seekBar,    int progress,    boolean fromTouch){
      mKiSeekBarValue.setText(String.format(""String_Node_Str"",(float)progress / 100.0f));
    }
    public void onStartTrackingTouch(    SeekBar seekBar){
    }
    public void onStopTrackingTouch(    SeekBar seekBar){
    }
  }
);
  mKiSeekBar.setProgress(mKiSeekBar.getMax() / 2);
  mKdSeekBar=(SeekBar)v.findViewById(R.id.KdSeekBar);
  mKdSeekBar.setMax(1000);
  final TextView mKdSeekBarValue=(TextView)v.findViewById(R.id.KdValue);
  mKdSeekBar.setOnSeekBarChangeListener(new SeekBar.OnSeekBarChangeListener(){
    public void onProgressChanged(    SeekBar seekBar,    int progress,    boolean fromTouch){
      mKdSeekBarValue.setText(String.format(""String_Node_Str"",(float)progress / 100.0f));
    }
    public void onStartTrackingTouch(    SeekBar seekBar){
    }
    public void onStopTrackingTouch(    SeekBar seekBar){
    }
  }
);
  mKdSeekBar.setProgress(mKdSeekBar.getMax() / 2);
  mTargetAngleSeekBar=(SeekBar)v.findViewById(R.id.TargetAngleSeekBar);
  mTargetAngleSeekBar.setMax(6000);
  final TextView mTargetAngleSeekBarValue=(TextView)v.findViewById(R.id.TargetAngleValue);
  mTargetAngleSeekBar.setOnSeekBarChangeListener(new SeekBar.OnSeekBarChangeListener(){
    public void onProgressChanged(    SeekBar seekBar,    int progress,    boolean fromTouch){
      mTargetAngleSeekBarValue.setText(String.format(""String_Node_Str"",(float)progress / 100.0f - 30.0f));
    }
    public void onStartTrackingTouch(    SeekBar seekBar){
    }
    public void onStopTrackingTouch(    SeekBar seekBar){
    }
  }
);
  mTargetAngleSeekBar.setProgress(mTargetAngleSeekBar.getMax() / 2);
  mTurningSeekBar=(SeekBar)v.findViewById(R.id.TurningSeekBar);
  mTurningSeekBar.setMax(100);
  final TextView mTurningSeekBarValue=(TextView)v.findViewById(R.id.TurningValue);
  mTurningSeekBar.setOnSeekBarChangeListener(new SeekBar.OnSeekBarChangeListener(){
    public void onProgressChanged(    SeekBar seekBar,    int progress,    boolean fromTouch){
      mTurningSeekBarValue.setText(Integer.toString(progress));
    }
    public void onStartTrackingTouch(    SeekBar seekBar){
    }
    public void onStopTrackingTouch(    SeekBar seekBar){
    }
  }
);
  mTurningSeekBar.setProgress(mTurningSeekBar.getMax() / 2);
  mButton=(Button)v.findViewById(R.id.button);
  mButton.setOnClickListener(new OnClickListener(){
    @Override public void onClick(    View v){
      BalancingRobotFullSizeActivity activity=(BalancingRobotFullSizeActivity)getActivity();
      if (activity == null || activity.mChatService == null) {
        if (D)         Log.e(TAG,""String_Node_Str"");
        return;
      }
      if (activity.mChatService.getState() == BluetoothChatService.STATE_CONNECTED) {
        if (mKpSeekBarValue.getText() != null && mKiSeekBarValue.getText() != null && mKdSeekBarValue.getText() != null && (!mKpSeekBarValue.getText().equals(oldKpValue) || !mKiSeekBarValue.getText().equals(oldKiValue) || !mKdSeekBarValue.getText().equals(oldKdValue))) {
          oldKpValue=mKpSeekBarValue.getText();
          oldKiValue=mKiSeekBarValue.getText();
          oldKdValue=mKdSeekBarValue.getText();
          mHandler.post(new Runnable(){
            public void run(){
              BalancingRobotFullSizeActivity activity=(BalancingRobotFullSizeActivity)getActivity();
              if (activity != null)               activity.mChatService.mBluetoothProtocol.setPID((int)(Float.parseFloat(mKpSeekBarValue.getText().toString()) * 100.0f),(int)(Float.parseFloat(mKiSeekBarValue.getText().toString()) * 100.0f),(int)(Float.parseFloat(mKdSeekBarValue.getText().toString()) * 100.0f));
            }
          }
);
          counter+=25;
          mHandler.postDelayed(new Runnable(){
            public void run(){
              BalancingRobotFullSizeActivity activity=(BalancingRobotFullSizeActivity)getActivity();
              if (activity != null)               activity.mChatService.mBluetoothProtocol.getPID();
            }
          }
,counter);
          counter+=25;
        }
        if (mTargetAngleSeekBarValue.getText() != null && !mTargetAngleSeekBarValue.getText().equals(oldTargetAngleValue)) {
          oldTargetAngleValue=mTargetAngleSeekBarValue.getText();
          mHandler.postDelayed(new Runnable(){
            public void run(){
              BalancingRobotFullSizeActivity activity=(BalancingRobotFullSizeActivity)getActivity();
              if (activity != null)               activity.mChatService.mBluetoothProtocol.setTarget((int)(Float.parseFloat(mTargetAngleSeekBarValue.getText().toString()) * 100.0f));
            }
          }
,counter);
          counter+=25;
          mHandler.postDelayed(new Runnable(){
            public void run(){
              BalancingRobotFullSizeActivity activity=(BalancingRobotFullSizeActivity)getActivity();
              if (activity != null)               activity.mChatService.mBluetoothProtocol.getTarget();
            }
          }
,counter);
          counter+=25;
        }
        if (mTurningSeekBarValue.getText() != null && !mTurningSeekBarValue.getText().equals(oldTurningValue)) {
          oldTurningValue=mTurningSeekBarValue.getText();
          mHandler.postDelayed(new Runnable(){
            public void run(){
              BalancingRobotFullSizeActivity activity=(BalancingRobotFullSizeActivity)getActivity();
              if (activity != null)               activity.mChatService.mBluetoothProtocol.setTurning(Byte.parseByte(mTurningSeekBarValue.getText().toString()));
            }
          }
,counter);
          counter+=25;
          mHandler.postDelayed(new Runnable(){
            public void run(){
              BalancingRobotFullSizeActivity activity=(BalancingRobotFullSizeActivity)getActivity();
              if (activity != null)               activity.mChatService.mBluetoothProtocol.getTurning();
            }
          }
,counter);
          counter+=25;
        }
        counter=0;
      }
    }
  }
);
  Button mKpUpArrow=(Button)v.findViewById(R.id.KpUpArrow);
  Button mKpDownArrow=(Button)v.findViewById(R.id.KpDownArrow);
  Button mKiUpArrow=(Button)v.findViewById(R.id.KiUpArrow);
  Button mKiDownArrow=(Button)v.findViewById(R.id.KiDownArrow);
  Button mKdUpArrow=(Button)v.findViewById(R.id.KdUpArrow);
  Button mKdDownArrow=(Button)v.findViewById(R.id.KdDownArrow);
  Button mTargetAngleUpArrow=(Button)v.findViewById(R.id.TargetAngleUpArrow);
  Button mTargetAngleDownArrow=(Button)v.findViewById(R.id.TargetAngleDownArrow);
  Button mTurningUpArrow=(Button)v.findViewById(R.id.TurningUpArrow);
  Button mTurningDownArrow=(Button)v.findViewById(R.id.TurningDownArrow);
  mKpUpArrow.setOnClickListener(new OnClickListener(){
    @Override public void onClick(    View v){
      mKpSeekBar.setProgress(round10(mKpSeekBar.getProgress() + 10));
    }
  }
);
  mKpDownArrow.setOnClickListener(new OnClickListener(){
    @Override public void onClick(    View v){
      mKpSeekBar.setProgress(round10(mKpSeekBar.getProgress() - 10));
    }
  }
);
  mKiUpArrow.setOnClickListener(new OnClickListener(){
    @Override public void onClick(    View v){
      mKiSeekBar.setProgress(round10(mKiSeekBar.getProgress() + 10));
    }
  }
);
  mKiDownArrow.setOnClickListener(new OnClickListener(){
    @Override public void onClick(    View v){
      mKiSeekBar.setProgress(round10(mKiSeekBar.getProgress() - 10));
    }
  }
);
  mKdUpArrow.setOnClickListener(new OnClickListener(){
    @Override public void onClick(    View v){
      mKdSeekBar.setProgress(round10(mKdSeekBar.getProgress() + 10));
    }
  }
);
  mKdDownArrow.setOnClickListener(new OnClickListener(){
    @Override public void onClick(    View v){
      mKdSeekBar.setProgress(round10(mKdSeekBar.getProgress() - 10));
    }
  }
);
  mTargetAngleUpArrow.setOnClickListener(new OnClickListener(){
    @Override public void onClick(    View v){
      mTargetAngleSeekBar.setProgress(round10(mTargetAngleSeekBar.getProgress() + 10));
    }
  }
);
  mTargetAngleDownArrow.setOnClickListener(new OnClickListener(){
    @Override public void onClick(    View v){
      mTargetAngleSeekBar.setProgress(round10(mTargetAngleSeekBar.getProgress() - 10));
    }
  }
);
  mTurningUpArrow.setOnClickListener(new OnClickListener(){
    @Override public void onClick(    View v){
      mTurningSeekBar.setProgress(mTurningSeekBar.getProgress() + 1);
    }
  }
);
  mTurningDownArrow.setOnClickListener(new OnClickListener(){
    @Override public void onClick(    View v){
      mTurningSeekBar.setProgress(mTurningSeekBar.getProgress() - 1);
    }
  }
);
  updateButton();
  return v;
}",0.999247554552295
143343,"public void updateFoundset(IFoundSetInternal newFoundset){
  if (newFoundset != foundset) {
    int oldServerSize=(foundset != null ? foundset.getSize() : 0);
    int newServerSize=(newFoundset != null ? newFoundset.getSize() : 0);
    if (foundset instanceof ISwingFoundSet) {
      ((ISwingFoundSet)foundset).getSelectionModel().removeListSelectionListener(getListSelectionListener());
      ((ISwingFoundSet)foundset).removeTableModelListener(this);
    }
    foundset=newFoundset;
    viewPort.setFoundset(foundset);
    if (oldServerSize != newServerSize)     changeMonitor.newFoundsetSize();
    changeMonitor.selectionChanged();
    changeMonitor.checkHadMoreRows();
    if (foundset != null && foundset.isMultiSelect())     changeMonitor.multiSelectChanged();
    if (updateColumnFormatsIfNeeded())     changeMonitor.columnFormatsUpdated();
    if (foundset instanceof ISwingFoundSet) {
      ((ISwingFoundSet)foundset).getSelectionModel().addListSelectionListener(getListSelectionListener());
      ((ISwingFoundSet)foundset).addTableModelListener(this);
    }
    if (foundset != null && getDataAdapterList() != null)     getDataAdapterList().setFindMode(foundset.isInFindMode());
    fireUnderlyingStateChangedListeners();
  }
}","public void updateFoundset(IFoundSetInternal newFoundset){
  if (newFoundset != foundset) {
    int oldServerSize=(foundset != null ? foundset.getSize() : 0);
    int newServerSize=(newFoundset != null ? newFoundset.getSize() : 0);
    if (foundset instanceof ISwingFoundSet) {
      ((ISwingFoundSet)foundset).getSelectionModel().removeListSelectionListener(getListSelectionListener());
      ((ISwingFoundSet)foundset).removeTableModelListener(this);
    }
    foundset=newFoundset;
    viewPort.setFoundset(foundset);
    if (oldServerSize != newServerSize)     changeMonitor.newFoundsetSize();
    changeMonitor.selectionChanged();
    changeMonitor.checkHadMoreRows();
    if (foundset != null && foundset.isMultiSelect())     changeMonitor.multiSelectChanged();
    if (updateColumnFormatsIfNeeded())     changeMonitor.columnFormatsUpdated();
    if (foundset instanceof ISwingFoundSet) {
      ((ISwingFoundSet)foundset).getSelectionModel().addListSelectionListener(getListSelectionListener());
      ((ISwingFoundSet)foundset).addTableModelListener(this);
    }
    if (chainedRelatedFoundsetSelectionMonitor != null && chainedRelatedFoundsetSelectionMonitor.getRelatedFoundset() != foundset) {
      chainedRelatedFoundsetSelectionMonitor.unregisterListeners();
      chainedRelatedFoundsetSelectionMonitor=null;
    }
    if (foundset != null && getDataAdapterList() != null)     getDataAdapterList().setFindMode(foundset.isInFindMode());
    fireUnderlyingStateChangedListeners();
  }
}",0.8874269005847953
143344,"@Override public void detach(){
  viewPort.dispose();
  if (foundset instanceof ISwingFoundSet) {
    ((ISwingFoundSet)foundset).getSelectionModel().removeListSelectionListener(getListSelectionListener());
    ((ISwingFoundSet)foundset).removeTableModelListener(this);
  }
}","@Override public void detach(){
  viewPort.dispose();
  if (foundset instanceof ISwingFoundSet) {
    ((ISwingFoundSet)foundset).getSelectionModel().removeListSelectionListener(getListSelectionListener());
    ((ISwingFoundSet)foundset).removeTableModelListener(this);
  }
  if (chainedRelatedFoundsetSelectionMonitor != null) {
    chainedRelatedFoundsetSelectionMonitor.unregisterListeners();
    chainedRelatedFoundsetSelectionMonitor=null;
  }
}",0.7579529737206085
143345,"@Override public void setParentScope(Scriptable parent){
  parentScope=parent;
}","@Override public void setParentScope(Scriptable parent){
  parentScope=parent;
  objectPrototype=ScriptableObject.getObjectPrototype(this);
}",0.7239819004524887
143346,"@Override public Scriptable getPrototype(){
  return null;
}","@Override public Scriptable getPrototype(){
  if (objectPrototype == null) {
    objectPrototype=ScriptableObject.getObjectPrototype(this);
  }
  return objectPrototype;
}",0.4848484848484848
143347,"@Override public boolean isInstance(String name){
  return name.equals(getRuntimeName());
}","@Override public boolean isInstance(String name){
  if (name.equals(getRuntimeName()))   return true;
  if (getPrototype() instanceof IInstanceOf) {
    return ((IInstanceOf)getPrototype()).isInstance(name);
  }
  return false;
}",0.525
143348,"/** 
 * @return
 */
private boolean inServerSideScript(){
  return Context.getCurrentContext() != null && Context.getCurrentContext().getThreadLocal(RuntimeWebComponent.SERVER_SIDE_SCRIPT_EXECUTE) != null;
}","private boolean inServerSideScript(){
  return Context.getCurrentContext() != null && Context.getCurrentContext().getThreadLocal(RuntimeWebComponent.SERVER_SIDE_SCRIPT_EXECUTE) != null;
}",0.949238578680203
143349,"public RuntimeLegacyComponent(WebFormComponent component){
  this.component=component;
  setParentScope(component.getDataConverterContext().getApplication().getScriptEngine().getSolutionScope());
  putCallable=new PutPropertyCallable(this);
  getCallable=new GetPropertyCallable(this);
  this.webComponentSpec=component.getFormElement().getWebComponentSpec();
}","public RuntimeLegacyComponent(WebFormComponent component){
  this.component=component;
  setParentScope(component.getDataConverterContext().getApplication().getScriptEngine().getSolutionScope());
  putCallable=new PutPropertyCallable(this);
  getCallable=new GetPropertyCallable(this);
  this.webComponentSpec=component.getSpecification();
}",0.9344729344729344
143350,"@Override public void setParentScope(Scriptable parent){
  parentScope=parent;
}","@Override public void setParentScope(Scriptable parent){
  parentScope=parent;
  objectPrototype=ScriptableObject.getObjectPrototype(this);
}",0.7239819004524887
143351,"@Override public Scriptable getPrototype(){
  return null;
}","@Override public Scriptable getPrototype(){
  if (objectPrototype == null) {
    objectPrototype=ScriptableObject.getObjectPrototype(this);
  }
  return objectPrototype;
}",0.4848484848484848
143352,"@Override public boolean isInstance(String name){
  return name.equals(getRuntimeName());
}","@Override public boolean isInstance(String name){
  if (name.equals(getRuntimeName()))   return true;
  if (getPrototype() instanceof IInstanceOf) {
    return ((IInstanceOf)getPrototype()).isInstance(name);
  }
  return false;
}",0.525
143353,"/** 
 * @return
 */
private boolean inServerSideScript(){
  return Context.getCurrentContext() != null && Context.getCurrentContext().getThreadLocal(RuntimeWebComponent.SERVER_SIDE_SCRIPT_EXECUTE) != null;
}","private boolean inServerSideScript(){
  return Context.getCurrentContext() != null && Context.getCurrentContext().getThreadLocal(RuntimeWebComponent.SERVER_SIDE_SCRIPT_EXECUTE) != null;
}",0.949238578680203
143354,"public RuntimeLegacyComponent(WebFormComponent component){
  this.component=component;
  setParentScope(component.getDataConverterContext().getApplication().getScriptEngine().getSolutionScope());
  putCallable=new PutPropertyCallable(this);
  getCallable=new GetPropertyCallable(this);
  this.webComponentSpec=component.getFormElement().getWebComponentSpec();
}","public RuntimeLegacyComponent(WebFormComponent component){
  this.component=component;
  setParentScope(component.getDataConverterContext().getApplication().getScriptEngine().getSolutionScope());
  putCallable=new PutPropertyCallable(this);
  getCallable=new GetPropertyCallable(this);
  this.webComponentSpec=component.getSpecification();
}",0.9344729344729344
143355,"private String[] getAllDependantDataProviders(String[] dataproviders){
  ArrayList<String> returnDP=new ArrayList<>();
  for (  String dp : dataproviders) {
    if (dp != null && !ScopesUtils.isVariableScope(dp)) {
      int idx=dp.lastIndexOf('.');
      if (idx != -1) {
        Relation[] relations=getApplication().getFlattenedSolution().getRelationSequence(dp.substring(0,idx));
        if (relations != null) {
          for (int i=0; i < relations.length; i++) {
            Relation relation=relations[i];
            if (Relation.isValid(relation,getApplication().getFlattenedSolution()) && (relation.isGlobal() || i == 0)) {
              try {
                IDataProvider[] dps=relation.getPrimaryDataProviders(getApplication().getFlattenedSolution());
                for (                IDataProvider idp : dps) {
                  returnDP.add(idp.getDataProviderID());
                }
              }
 catch (              RepositoryException ex) {
                Debug.error(ex);
              }
            }
          }
          continue;
        }
      }
    }
    returnDP.add(dp);
  }
  return returnDP.toArray(new String[returnDP.size()]);
}","private String[] getAllDependantDataProviders(String[] dataproviders){
  ArrayList<String> returnDP=new ArrayList<>();
  for (  String dp : dataproviders) {
    if (dp != null && !ScopesUtils.isVariableScope(dp)) {
      int idx=dp.lastIndexOf('.');
      if (idx != -1) {
        Relation[] relations=getApplication().getFlattenedSolution().getRelationSequence(dp.substring(0,idx));
        if (relations != null) {
          for (int i=0; i < relations.length; i++) {
            Relation relation=relations[i];
            if (Relation.isValid(relation,getApplication().getFlattenedSolution()) && (relation.isGlobal() || i == 0)) {
              try {
                IDataProvider[] dps=relation.getPrimaryDataProviders(getApplication().getFlattenedSolution());
                for (                IDataProvider idp : dps) {
                  if (!returnDP.contains(idp.getDataProviderID()))                   returnDP.add(idp.getDataProviderID());
                }
              }
 catch (              RepositoryException ex) {
                Debug.error(ex);
              }
            }
          }
          continue;
        }
      }
    }
    returnDP.add(dp);
  }
  return returnDP.toArray(new String[returnDP.size()]);
}",0.9721876297218764
143356,"@SuppressWarnings(""String_Node_Str"") public Object getInitValue(){
  String defaultValue=getDefaultValue();
switch (Column.mapToDefaultType(getVariableType())) {
case IColumnTypes.DATETIME:
    if (""String_Node_Str"".equalsIgnoreCase(defaultValue)) {
      return new java.util.Date();
    }
  if (defaultValue != null) {
    return parseDate(defaultValue);
  }
return null;
case IColumnTypes.TEXT:
{
if (""String_Node_Str"".equalsIgnoreCase(defaultValue)) {
  return null;
}
return (defaultValue == null ? ""String_Node_Str"" : defaultValue);
}
case IColumnTypes.NUMBER:
try {
double number=Utils.getAsDouble(defaultValue,true);
return (""String_Node_Str"".equalsIgnoreCase(defaultValue) ? null : new Double(number));
}
 catch (RuntimeException e) {
return defaultValue;
}
case IColumnTypes.INTEGER:
try {
int number=Utils.getAsInteger(defaultValue,true);
return (""String_Node_Str"".equalsIgnoreCase(defaultValue) ? null : new Integer(number));
}
 catch (RuntimeException e) {
return defaultValue;
}
case IColumnTypes.MEDIA:
if (""String_Node_Str"".equalsIgnoreCase(defaultValue)) {
return null;
}
return defaultValue;
default :
return null;
}
}","@SuppressWarnings(""String_Node_Str"") public Object getInitValue(){
  String defaultValue=getDefaultValue();
switch (Column.mapToDefaultType(getVariableType())) {
case IColumnTypes.DATETIME:
    if (""String_Node_Str"".equalsIgnoreCase(defaultValue)) {
      return new java.util.Date();
    }
  if (defaultValue != null) {
    Date pd=parseDate(defaultValue);
    if (pd != null)     return pd;
  }
return defaultValue;
case IColumnTypes.TEXT:
{
if (""String_Node_Str"".equalsIgnoreCase(defaultValue)) {
  return null;
}
return (defaultValue == null ? ""String_Node_Str"" : defaultValue);
}
case IColumnTypes.NUMBER:
try {
double number=Utils.getAsDouble(defaultValue,true);
return (""String_Node_Str"".equalsIgnoreCase(defaultValue) ? null : new Double(number));
}
 catch (RuntimeException e) {
return defaultValue;
}
case IColumnTypes.INTEGER:
try {
int number=Utils.getAsInteger(defaultValue,true);
return (""String_Node_Str"".equalsIgnoreCase(defaultValue) ? null : new Integer(number));
}
 catch (RuntimeException e) {
return defaultValue;
}
case IColumnTypes.MEDIA:
if (""String_Node_Str"".equalsIgnoreCase(defaultValue)) {
return null;
}
return defaultValue;
default :
return null;
}
}",0.9550949913644214
143357,"public int getFlags(){
  return Column.NORMAL_COLUMN;
}","public int getFlags(){
  return IBaseColumn.NORMAL_COLUMN;
}",0.9565217391304348
143358,"protected IFoundSetEventListener getFoundsetEventListener(){
  if (foundsetEventListener == null) {
    foundsetEventListener=new IFoundSetEventListener(){
      @Override public void foundSetChanged(      FoundSetEvent event){
        if (event.getType() == FoundSetEvent.FIND_MODE_CHANGE)         changeMonitor.findModeChanged(foundset.isInFindMode());
 else         if (event.getType() == FoundSetEvent.FOUNDSET_INVALIDATED)         changeMonitor.foundsetInvalidated();
 else         if (event.getType() == FoundSetEvent.CONTENTS_CHANGED) {
          if (event.getChangeType() == FoundSetEvent.CHANGE_DELETE) {
            changeMonitor.recordsDeleted(event.getFirstRow(),event.getLastRow(),FoundsetTypeViewport.this);
          }
 else           if (event.getChangeType() == FoundSetEvent.CHANGE_INSERT) {
            if (size == 0) {
              setPreferredViewportBounds();
              changeMonitor.viewPortCompletelyChanged();
              changeMonitor.foundSetSizeChanged();
            }
 else {
              if (size < preferredViewPortSize && (foundset.getSize() - startIndex) > size) {
                setBounds(startIndex,Math.min(preferredViewPortSize,(foundset.getSize() - startIndex)));
              }
              changeMonitor.recordsInserted(event.getFirstRow(),event.getLastRow(),FoundsetTypeViewport.this);
            }
          }
 else           if (event.getChangeType() == FoundSetEvent.CHANGE_UPDATE) {
            changeMonitor.recordsUpdated(event.getFirstRow(),event.getLastRow(),foundset.getSize(),FoundsetTypeViewport.this,event.getDataProviders());
          }
          changeMonitor.checkHadMoreRows();
        }
 else         if (event.getType() == FoundSetEvent.SELECTION_MODE_CHANGE)         changeMonitor.multiSelectChanged();
      }
    }
;
  }
  return foundsetEventListener;
}","protected IFoundSetEventListener getFoundsetEventListener(){
  if (foundsetEventListener == null) {
    foundsetEventListener=new IFoundSetEventListener(){
      @Override public void foundSetChanged(      FoundSetEvent event){
        if (event.getType() == FoundSetEvent.FIND_MODE_CHANGE)         changeMonitor.findModeChanged(foundset.isInFindMode());
 else         if (event.getType() == FoundSetEvent.CONTENTS_CHANGED) {
          if (event.getChangeType() == FoundSetEvent.CHANGE_DELETE) {
            changeMonitor.recordsDeleted(event.getFirstRow(),event.getLastRow(),FoundsetTypeViewport.this);
          }
 else           if (event.getChangeType() == FoundSetEvent.CHANGE_INSERT) {
            if (size == 0) {
              setPreferredViewportBounds();
              changeMonitor.viewPortCompletelyChanged();
              changeMonitor.foundSetSizeChanged();
            }
 else {
              if (size < preferredViewPortSize && (foundset.getSize() - startIndex) > size) {
                setBounds(startIndex,Math.min(preferredViewPortSize,(foundset.getSize() - startIndex)));
              }
              changeMonitor.recordsInserted(event.getFirstRow(),event.getLastRow(),FoundsetTypeViewport.this);
            }
          }
 else           if (event.getChangeType() == FoundSetEvent.CHANGE_UPDATE) {
            changeMonitor.recordsUpdated(event.getFirstRow(),event.getLastRow(),foundset.getSize(),FoundsetTypeViewport.this,event.getDataProviders());
          }
 else           if (event.getChangeType() == FoundSetEvent.FOUNDSET_INVALIDATED)           foundset.getSize();
          changeMonitor.checkHadMoreRows();
        }
 else         if (event.getType() == FoundSetEvent.SELECTION_MODE_CHANGE)         changeMonitor.multiSelectChanged();
      }
    }
;
  }
  return foundsetEventListener;
}",0.3640843142622502
143359,"@Override public void foundSetChanged(FoundSetEvent event){
  if (event.getType() == FoundSetEvent.FIND_MODE_CHANGE)   changeMonitor.findModeChanged(foundset.isInFindMode());
 else   if (event.getType() == FoundSetEvent.FOUNDSET_INVALIDATED)   changeMonitor.foundsetInvalidated();
 else   if (event.getType() == FoundSetEvent.CONTENTS_CHANGED) {
    if (event.getChangeType() == FoundSetEvent.CHANGE_DELETE) {
      changeMonitor.recordsDeleted(event.getFirstRow(),event.getLastRow(),FoundsetTypeViewport.this);
    }
 else     if (event.getChangeType() == FoundSetEvent.CHANGE_INSERT) {
      if (size == 0) {
        setPreferredViewportBounds();
        changeMonitor.viewPortCompletelyChanged();
        changeMonitor.foundSetSizeChanged();
      }
 else {
        if (size < preferredViewPortSize && (foundset.getSize() - startIndex) > size) {
          setBounds(startIndex,Math.min(preferredViewPortSize,(foundset.getSize() - startIndex)));
        }
        changeMonitor.recordsInserted(event.getFirstRow(),event.getLastRow(),FoundsetTypeViewport.this);
      }
    }
 else     if (event.getChangeType() == FoundSetEvent.CHANGE_UPDATE) {
      changeMonitor.recordsUpdated(event.getFirstRow(),event.getLastRow(),foundset.getSize(),FoundsetTypeViewport.this,event.getDataProviders());
    }
    changeMonitor.checkHadMoreRows();
  }
 else   if (event.getType() == FoundSetEvent.SELECTION_MODE_CHANGE)   changeMonitor.multiSelectChanged();
}","@Override public void foundSetChanged(FoundSetEvent event){
  if (event.getType() == FoundSetEvent.FIND_MODE_CHANGE)   changeMonitor.findModeChanged(foundset.isInFindMode());
 else   if (event.getType() == FoundSetEvent.CONTENTS_CHANGED) {
    if (event.getChangeType() == FoundSetEvent.CHANGE_DELETE) {
      changeMonitor.recordsDeleted(event.getFirstRow(),event.getLastRow(),FoundsetTypeViewport.this);
    }
 else     if (event.getChangeType() == FoundSetEvent.CHANGE_INSERT) {
      if (size == 0) {
        setPreferredViewportBounds();
        changeMonitor.viewPortCompletelyChanged();
        changeMonitor.foundSetSizeChanged();
      }
 else {
        if (size < preferredViewPortSize && (foundset.getSize() - startIndex) > size) {
          setBounds(startIndex,Math.min(preferredViewPortSize,(foundset.getSize() - startIndex)));
        }
        changeMonitor.recordsInserted(event.getFirstRow(),event.getLastRow(),FoundsetTypeViewport.this);
      }
    }
 else     if (event.getChangeType() == FoundSetEvent.CHANGE_UPDATE) {
      changeMonitor.recordsUpdated(event.getFirstRow(),event.getLastRow(),foundset.getSize(),FoundsetTypeViewport.this,event.getDataProviders());
    }
 else     if (event.getChangeType() == FoundSetEvent.FOUNDSET_INVALIDATED)     foundset.getSize();
    changeMonitor.checkHadMoreRows();
  }
 else   if (event.getType() == FoundSetEvent.SELECTION_MODE_CHANGE)   changeMonitor.multiSelectChanged();
}",0.2748355832467982
143360,"/** 
 * Removes the relation specified by name. You cannot remove the the relation if it is touched within the application. So even if you remove all the ui elements using it, like tabs, it still can't be removed, because of underlying created and cached data.
 * @sample var success = solutionModel.removeRelation('myRelation'); if (success) { application.output(""Relation has been removed"");} else {application.output(""Relation could not be removed"");}
 * @param name the name of the relation to be removed
 * @return true if the removal was successful, false otherwise
 */
@JSFunction public boolean removeRelation(String name){
  FlattenedSolution fs=application.getFlattenedSolution();
  Relation rel=fs.getRelation(name);
  if (rel != null) {
    try {
      if (((FoundSetManager)application.getFoundSetManager()).getSQLGenerator().getCachedTableSQLSheet(rel.getForeignDataSource()).getRelatedSQLDescription(name) != null) {
        return false;
      }
      fs.deletePersistCopy(rel,false);
    }
 catch (    ServoyException e) {
      Debug.error(e);
      return false;
    }
    return true;
  }
  return false;
}","/** 
 * Removes the relation specified by name. You cannot remove the relation if it is touched within the application. So even if you remove all the ui elements using it, like tabs, it still can't be removed, because of underlying created and cached data.
 * @sample var success = solutionModel.removeRelation('myRelation'); if (success) { application.output(""Relation has been removed"");} else {application.output(""Relation could not be removed"");}
 * @param name the name of the relation to be removed
 * @return true if the removal was successful, false otherwise
 */
@JSFunction public boolean removeRelation(String name){
  FlattenedSolution fs=application.getFlattenedSolution();
  Relation rel=fs.getRelation(name);
  if (rel != null) {
    try {
      if (((FoundSetManager)application.getFoundSetManager()).getSQLGenerator().getCachedTableSQLSheet(rel.getForeignDataSource()).getRelatedSQLDescription(name) != null) {
        return false;
      }
      fs.deletePersistCopy(rel,false);
    }
 catch (    ServoyException e) {
      Debug.error(e);
      return false;
    }
    return true;
  }
  return false;
}",0.998220640569395
143361,"/** 
 * @see com.servoy.j2db.smart.J2DBClient#closeSolution(boolean,java.lang.Object[])
 */
@Override public boolean closeSolution(boolean force,Object[] args){
  boolean b=super.closeSolution(force,args);
  if (b) {
    if (actions != null) {
      createMenuBar(actions);
      fillToolbar(actions);
      String showMenuBar=settings.getProperty(""String_Node_Str"");
      if (showMenuBar != null && showMenuBar.equals(""String_Node_Str""))       frame.getJMenuBar().setVisible(false);
 else       frame.getJMenuBar().setVisible(true);
      String showToolBar=settings.getProperty(""String_Node_Str"");
      if (showToolBar != null && showToolBar.equals(""String_Node_Str""))       toolbarsPanel.setVisible(false);
 else       toolbarsPanel.setVisible(true);
    }
    if (getPreferedSolutionNameToLoadOnInit() == null && getMainApplicationFrame().isVisible()) {
      invokeLater(new Runnable(){
        public void run(){
          invokeLater(new Runnable(){
            public void run(){
              if (solutionRoot.getMainSolutionMetaData() == null) {
                selectAndOpenSolution();
              }
            }
          }
);
        }
      }
);
    }
  }
  return b;
}","/** 
 * @see com.servoy.j2db.smart.J2DBClient#closeSolution(boolean,java.lang.Object[])
 */
@Override public boolean closeSolution(boolean force,Object[] args){
  boolean b=super.closeSolution(force,args);
  if (b) {
    if (actions != null) {
      createMenuBar(actions);
      fillToolbar(actions);
      String showMenuBar=settings.getProperty(""String_Node_Str"");
      if (showMenuBar != null && showMenuBar.equals(""String_Node_Str""))       frame.getJMenuBar().setVisible(false);
 else       frame.getJMenuBar().setVisible(true);
      String showToolBar=settings.getProperty(""String_Node_Str"");
      if (showToolBar != null && showToolBar.equals(""String_Node_Str""))       toolbarsPanel.setVisible(false);
 else       toolbarsPanel.setVisible(true);
    }
    if (getPreferedSolutionNameToLoadOnInit() == null && getMainApplicationFrame().isVisible()) {
      isSelectAndOpenSolutionStarted=false;
      invokeLater(new Runnable(){
        public void run(){
          invokeLater(new Runnable(){
            public void run(){
              if (!isSelectAndOpenSolutionStarted && solutionRoot.getMainSolutionMetaData() == null) {
                selectAndOpenSolution();
              }
            }
          }
);
        }
      }
);
    }
  }
  return b;
}",0.9678207739307536
143362,"private void refreshForms(Collection<IFormController> forms){
  if (forms != null && forms.size() > 0) {
    FormElementHelper.INSTANCE.reload();
    List<IFormController> cachedFormControllers=getFormManager().getCachedFormControllers();
    for (    IFormController formController : cachedFormControllers) {
      if (formController.getFormUI() instanceof WebFormUI) {
        ((WebFormUI)formController.getFormUI()).clearCachedFormElements();
      }
    }
    List<Runnable> invokeLaterRunnables=new ArrayList<Runnable>();
    for (    IFormController controller : forms) {
      boolean isVisible=controller.isFormVisible();
      if (isVisible)       controller.notifyVisible(false,invokeLaterRunnables);
      ((WebFormController)controller).initFormUI();
      if (isVisible)       controller.notifyVisible(true,invokeLaterRunnables);
    }
    WebsocketSessionWindows allendpoints=new NGClientWebsocketSessionWindows(getWebsocketSession());
    allendpoints.executeAsyncServiceCall(NGRuntimeWindowManager.WINDOW_SERVICE,""String_Node_Str"",null,null);
    try {
      allendpoints.flush();
    }
 catch (    IOException e) {
      reportError(""String_Node_Str"",e);
    }
  }
}","private void refreshForms(Collection<IFormController> forms){
  if (forms != null && forms.size() > 0) {
    FormElementHelper.INSTANCE.reload();
    List<IFormController> cachedFormControllers=getFormManager().getCachedFormControllers();
    for (    IFormController formController : cachedFormControllers) {
      if (formController.getFormUI() instanceof WebFormUI) {
        ((WebFormUI)formController.getFormUI()).clearCachedFormElements();
      }
    }
    List<Runnable> invokeLaterRunnables=new ArrayList<Runnable>();
    for (    IFormController controller : forms) {
      boolean isVisible=controller.isFormVisible();
      if (isVisible)       controller.notifyVisible(false,invokeLaterRunnables);
      if (!Utils.stringSafeEquals(controller.getDataSource(),controller.getFormModel().getDataSource())) {
        String name=controller.getName();
        controller.destroy();
        controller=getFormManager().leaseFormPanel(name);
        FoundSet foundset;
        try {
          foundset=(FoundSet)getFoundSetManager().getSharedFoundSet(controller.getDataSource());
          foundset.loadAllRecords();
          controller.loadRecords(foundset);
        }
 catch (        ServoyException e) {
          Debug.error(e);
        }
      }
 else {
        ((WebFormController)controller).initFormUI();
      }
      if (isVisible)       controller.notifyVisible(true,invokeLaterRunnables);
    }
    WebsocketSessionWindows allendpoints=new NGClientWebsocketSessionWindows(getWebsocketSession());
    allendpoints.executeAsyncServiceCall(NGRuntimeWindowManager.WINDOW_SERVICE,""String_Node_Str"",null,null);
    try {
      allendpoints.flush();
    }
 catch (    IOException e) {
      reportError(""String_Node_Str"",e);
    }
  }
}",0.8072330262708973
143363,"private void refreshForms(Collection<IFormController> forms){
  if (forms != null && forms.size() > 0) {
    FormElementHelper.INSTANCE.reload();
    List<IFormController> cachedFormControllers=getFormManager().getCachedFormControllers();
    for (    IFormController formController : cachedFormControllers) {
      if (formController.getFormUI() instanceof WebFormUI) {
        ((WebFormUI)formController.getFormUI()).clearCachedFormElements();
      }
    }
    List<Runnable> invokeLaterRunnables=new ArrayList<Runnable>();
    for (    IFormController controller : forms) {
      boolean isVisible=controller.isFormVisible();
      if (isVisible)       controller.notifyVisible(false,invokeLaterRunnables);
      ((WebFormController)controller).initFormUI();
      if (isVisible)       controller.notifyVisible(true,invokeLaterRunnables);
    }
    WebsocketSessionWindows allendpoints=new NGClientWebsocketSessionWindows(getWebsocketSession());
    allendpoints.executeAsyncServiceCall(NGRuntimeWindowManager.WINDOW_SERVICE,""String_Node_Str"",null,null);
    try {
      allendpoints.flush();
    }
 catch (    IOException e) {
      reportError(""String_Node_Str"",e);
    }
  }
}","private void refreshForms(Collection<IFormController> forms){
  if (forms != null && forms.size() > 0) {
    FormElementHelper.INSTANCE.reload();
    List<IFormController> cachedFormControllers=getFormManager().getCachedFormControllers();
    for (    IFormController formController : cachedFormControllers) {
      if (formController.getFormUI() instanceof WebFormUI) {
        ((WebFormUI)formController.getFormUI()).clearCachedFormElements();
      }
    }
    List<Runnable> invokeLaterRunnables=new ArrayList<Runnable>();
    for (    IFormController controller : forms) {
      boolean isVisible=controller.isFormVisible();
      if (isVisible)       controller.notifyVisible(false,invokeLaterRunnables);
      if (!Utils.stringSafeEquals(controller.getDataSource(),controller.getFormModel().getDataSource())) {
        String name=controller.getName();
        controller.destroy();
        controller=getFormManager().leaseFormPanel(name);
        FoundSet foundset;
        try {
          foundset=(FoundSet)getFoundSetManager().getSharedFoundSet(controller.getDataSource());
          foundset.loadAllRecords();
          controller.loadRecords(foundset);
        }
 catch (        ServoyException e) {
          Debug.error(e);
        }
      }
 else {
        ((WebFormController)controller).initFormUI();
      }
      if (isVisible)       controller.notifyVisible(true,invokeLaterRunnables);
    }
    WebsocketSessionWindows allendpoints=new NGClientWebsocketSessionWindows(getWebsocketSession());
    allendpoints.executeAsyncServiceCall(NGRuntimeWindowManager.WINDOW_SERVICE,""String_Node_Str"",null,null);
    try {
      allendpoints.flush();
    }
 catch (    IOException e) {
      reportError(""String_Node_Str"",e);
    }
  }
}",0.8072330262708973
143364,"private void reregister(){
  if (record == null) {
    return;
  }
  IRecordInternal currRecord=record;
  String[] parts=dataProviderID.split(""String_Node_Str"");
  List<IRecordInternal> newRelated=new ArrayList<IRecordInternal>(parts.length - 1);
  for (int i=0; currRecord != null && i < parts.length - 1; i++) {
    Object value=currRecord.getValue(parts[i]);
    if (value instanceof ISwingFoundSet) {
      currRecord=((ISwingFoundSet)value).getRecord(((ISwingFoundSet)value).getSelectedIndex());
      if (currRecord == null)       currRecord=((ISwingFoundSet)value).getPrototypeState();
      newRelated.add(currRecord);
    }
  }
  if (!newRelated.equals(relatedData)) {
    deregister();
    relatedData=newRelated;
    for (    IRecordInternal rec : relatedData) {
      rec.addModificationListener(this);
      ((ISwingFoundSet)rec.getParentFoundSet()).addTableModelListener(this);
      ((ISwingFoundSet)rec.getParentFoundSet()).getSelectionModel().addListSelectionListener(this);
    }
  }
}","private void reregister(){
  if (record == null) {
    return;
  }
  IRecordInternal currRecord=record;
  String[] parts=dataProviderID.split(""String_Node_Str"");
  List<IRecordInternal> newRelated=new ArrayList<IRecordInternal>(parts.length - 1);
  for (int i=0; currRecord != null && i < parts.length - 1; i++) {
    Object value=currRecord.getValue(parts[i]);
    if (value instanceof ISwingFoundSet) {
      currRecord=((ISwingFoundSet)value).getRecord(((ISwingFoundSet)value).getSelectedIndex());
      if (currRecord == null)       currRecord=((ISwingFoundSet)value).getPrototypeState();
      newRelated.add(currRecord);
    }
 else {
      currRecord=null;
    }
  }
  if (!newRelated.equals(relatedData)) {
    deregister();
    relatedData=newRelated;
    for (    IRecordInternal rec : relatedData) {
      rec.addModificationListener(this);
      ((ISwingFoundSet)rec.getParentFoundSet()).addTableModelListener(this);
      ((ISwingFoundSet)rec.getParentFoundSet()).getSelectionModel().addListSelectionListener(this);
    }
  }
}",0.9818893783651492
143365,"@Test public void testCustomComponentWithFormProperty() throws RepositoryException, JSONException {
  Form form=solution.getForm(""String_Node_Str"");
  Assert.assertNotNull(form);
  DataAdapterList dataAdapterList=new DataAdapterList(new TestFormController(form,client));
  Form tabForm=solution.createNewForm(validator,null,""String_Node_Str"",null,false,new Dimension(600,400));
  Bean bean=form.createNewBean(""String_Node_Str"",""String_Node_Str"");
  bean.setInnerHTML(""String_Node_Str"");
  List<FormElement> formElements=FormElementHelper.INSTANCE.getFormElements(form.getAllObjects(),new ServoyDataConverterContext(client));
  Assert.assertEquals(1,formElements.size());
  WebFormComponent wc=ComponentFactory.createComponent(client,dataAdapterList,formElements.get(0),null);
  Map<String,Object> type=(Map<String,Object>)wc.getProperty(""String_Node_Str"");
  Assert.assertNull(type);
  form.removeChild(bean);
  WebComponent webComponent=form.createNewWebComponent(""String_Node_Str"",""String_Node_Str"");
  webComponent.setProperty(""String_Node_Str"",new ServoyJSONObject(""String_Node_Str"",false));
  formElements=FormElementHelper.INSTANCE.getFormElements(form.getAllObjects(),new ServoyDataConverterContext(client));
  Assert.assertEquals(1,formElements.size());
  wc=ComponentFactory.createComponent(client,dataAdapterList,formElements.get(0),null);
  type=(Map<String,Object>)wc.getProperty(""String_Node_Str"");
  Assert.assertEquals(""String_Node_Str"",type.get(""String_Node_Str""));
  Assert.assertEquals(""String_Node_Str"",type.get(""String_Node_Str""));
  Assert.assertEquals(0,wc.getAndClearChanges().content.size());
  TypedData<Map<String,Object>> props=wc.getProperties();
  String json=JSONUtils.writeDataWithConversions(props.content,props.contentType,null);
  Assert.assertEquals(""String_Node_Str"",json);
}","@Test public void testCustomComponentWithFormProperty() throws RepositoryException, JSONException {
  Form form=solution.getForm(""String_Node_Str"");
  Assert.assertNotNull(form);
  DataAdapterList dataAdapterList=new DataAdapterList(new TestFormController(form,client));
  Form tabForm=solution.createNewForm(validator,null,""String_Node_Str"",null,false,new Dimension(600,400));
  List<FormElement> formElements=FormElementHelper.INSTANCE.getFormElements(form.getAllObjects(),new ServoyDataConverterContext(client));
  @SuppressWarnings(""String_Node_Str"") WebComponent webComponent=form.createNewWebComponent(""String_Node_Str"",""String_Node_Str"");
  webComponent.setProperty(""String_Node_Str"",new ServoyJSONObject(""String_Node_Str"",false));
  formElements=FormElementHelper.INSTANCE.getFormElements(form.getAllObjects(),new ServoyDataConverterContext(client));
  Assert.assertEquals(1,formElements.size());
  WebFormComponent wc=ComponentFactory.createComponent(client,dataAdapterList,formElements.get(0),null);
  Map<String,Object> type=(Map<String,Object>)wc.getProperty(""String_Node_Str"");
  Assert.assertEquals(""String_Node_Str"",type.get(""String_Node_Str""));
  Assert.assertEquals(""String_Node_Str"",type.get(""String_Node_Str""));
  Assert.assertEquals(0,wc.getAndClearChanges().content.size());
  TypedData<Map<String,Object>> props=wc.getProperties();
  String json=JSONUtils.writeDataWithConversions(props.content,props.contentType,null);
  Assert.assertEquals(""String_Node_Str"",json);
}",0.4241139048773099
143366,"public boolean isValidRelation(String name){
  Relation[] relationSequence=fsm.getApplication().getFlattenedSolution().getRelationSequence(name);
  if (relationSequence != null && relationSequence.length > 0 && (relationSequence[0].isGlobal() || !relationSequence[0].getPrimaryDataSource().equals(getDataSource()))) {
    fsm.getApplication().reportJSError(""String_Node_Str"" + relationSequence[0].getName() + ""String_Node_Str""+ getDataSource()+ ""String_Node_Str""+ (relationSequence[0].isGlobal() ? ""String_Node_Str"" : ""String_Node_Str"" + relationSequence[0].getPrimaryDataSource() + ""String_Node_Str""),new ServoyException());
  }
  return relationSequence != null;
}","public boolean isValidRelation(String name){
  Relation[] relationSequence=fsm.getApplication().getFlattenedSolution().getRelationSequence(name);
  if (relationSequence != null && relationSequence.length > 0 && !relationSequence[0].isGlobal() && !relationSequence[0].getPrimaryDataSource().equals(getDataSource())) {
    fsm.getApplication().reportJSError(""String_Node_Str"" + relationSequence[0].getName() + ""String_Node_Str""+ getDataSource()+ ""String_Node_Str""+ relationSequence[0].getPrimaryDataSource()+ ""String_Node_Str"",new ServoyException());
  }
  return relationSequence != null;
}",0.9338645418326692
143367,"@Override public Object executeInlineScript(String script,JSONObject args,JSONArray appendingArgs){
  String decryptedScript=HTMLTagsConverter.decryptInlineScript(script,args);
  if (appendingArgs != null && decryptedScript.endsWith(""String_Node_Str"")) {
    ArrayList<Object> javaArguments=new ArrayList<Object>();
    Object argObj=null;
    BrowserConverterContext dataConverterContext=new BrowserConverterContext((WebFormUI)formController.getFormUI(),PushToServerEnum.allow);
    for (int i=0; i < appendingArgs.length(); i++) {
      try {
        argObj=appendingArgs.get(i);
        if (argObj instanceof JSONObject) {
          String typeHint=((JSONObject)argObj).optString(""String_Node_Str"",null);
          if (typeHint != null) {
            IPropertyType<?> propertyType=TypesRegistry.getType(typeHint);
            if (propertyType instanceof IPropertyConverterForBrowser<?>) {
              javaArguments.add(((IPropertyConverterForBrowser<?>)propertyType).fromJSON(argObj,null,null,dataConverterContext));
              continue;
            }
          }
        }
      }
 catch (      JSONException e) {
        Debug.error(e);
      }
      javaArguments.add(argObj);
    }
    String functionName=decryptedScript.substring(0,decryptedScript.length() - 2);
    int startIdx=functionName.lastIndexOf('.');
    String noPrefixFunctionName=functionName.substring(startIdx > -1 ? startIdx + 1 : 0,functionName.length());
    Scriptable scope=null;
    Function f=null;
    if (functionName.startsWith(""String_Node_Str"")) {
      FormScope formScope=formController.getFormScope();
      f=formScope.getFunctionByName(noPrefixFunctionName);
      if (f != null && f != Scriptable.NOT_FOUND) {
        scope=formScope;
      }
    }
 else     if (functionName.startsWith(""String_Node_Str"")) {
      scope=(Scriptable)formController.getFoundSet();
      f=(Function)scope.getPrototype().get(noPrefixFunctionName,scope);
    }
 else {
      ScriptMethod scriptMethod=formController.getApplication().getFlattenedSolution().getScriptMethod(functionName);
      if (scriptMethod != null) {
        scope=formController.getApplication().getScriptEngine().getScopesScope().getGlobalScope(scriptMethod.getScopeName());
      }
      if (scope != null) {
        f=((GlobalScope)scope).getFunctionByName(noPrefixFunctionName);
      }
    }
    try {
      return formController.getApplication().getScriptEngine().executeFunction(f,scope,scope,javaArguments.toArray(),false,false);
    }
 catch (    Exception ex) {
      Debug.error(ex);
      return null;
    }
  }
  return decryptedScript != null ? formController.eval(decryptedScript) : null;
}","@Override public Object executeInlineScript(String script,JSONObject args,JSONArray appendingArgs){
  String decryptedScript=HTMLTagsConverter.decryptInlineScript(script,args);
  if (appendingArgs != null && decryptedScript.endsWith(""String_Node_Str"")) {
    ArrayList<Object> javaArguments=new ArrayList<Object>();
    Object argObj=null;
    BrowserConverterContext dataConverterContext=new BrowserConverterContext((WebFormUI)formController.getFormUI(),PushToServerEnum.allow);
    for (int i=0; i < appendingArgs.length(); i++) {
      try {
        argObj=appendingArgs.get(i);
        if (argObj instanceof JSONObject) {
          String typeHint=((JSONObject)argObj).optString(""String_Node_Str"",null);
          if (typeHint != null) {
            IPropertyType<?> propertyType=TypesRegistry.getType(typeHint);
            if (propertyType instanceof IPropertyConverterForBrowser<?>) {
              javaArguments.add(((IPropertyConverterForBrowser<?>)propertyType).fromJSON(argObj,null,null,dataConverterContext,null));
              continue;
            }
          }
        }
      }
 catch (      JSONException e) {
        Debug.error(e);
      }
      javaArguments.add(argObj);
    }
    String functionName=decryptedScript.substring(0,decryptedScript.length() - 2);
    int startIdx=functionName.lastIndexOf('.');
    String noPrefixFunctionName=functionName.substring(startIdx > -1 ? startIdx + 1 : 0,functionName.length());
    Scriptable scope=null;
    Function f=null;
    if (functionName.startsWith(""String_Node_Str"")) {
      FormScope formScope=formController.getFormScope();
      f=formScope.getFunctionByName(noPrefixFunctionName);
      if (f != null && f != Scriptable.NOT_FOUND) {
        scope=formScope;
      }
    }
 else     if (functionName.startsWith(""String_Node_Str"")) {
      scope=(Scriptable)formController.getFoundSet();
      f=(Function)scope.getPrototype().get(noPrefixFunctionName,scope);
    }
 else {
      ScriptMethod scriptMethod=formController.getApplication().getFlattenedSolution().getScriptMethod(functionName);
      if (scriptMethod != null) {
        scope=formController.getApplication().getScriptEngine().getScopesScope().getGlobalScope(scriptMethod.getScopeName());
      }
      if (scope != null) {
        f=((GlobalScope)scope).getFunctionByName(noPrefixFunctionName);
      }
    }
    try {
      return formController.getApplication().getScriptEngine().executeFunction(f,scope,scope,javaArguments.toArray(),false,false);
    }
 catch (    Exception ex) {
      Debug.error(ex);
      return null;
    }
  }
  return decryptedScript != null ? formController.eval(decryptedScript) : null;
}",0.9990585577104124
143368,"@SuppressWarnings(""String_Node_Str"") @Override public Object executeMethod(String methodName,JSONObject args) throws Exception {
  if (""String_Node_Str"".equals(methodName)) {
    IFoundSetInternal foundset=FoundsetReferencePropertyType.INSTANCE.fromJSON(args,null,null,null);
    String sort=args.optString(""String_Node_Str"");
    if (!""String_Node_Str"".equals(sort)) {
      foundset.setSort(sort);
    }
    FoundsetTypeSabloValue value=getFoundsetTypeSabloValue(foundset,args.optJSONObject(""String_Node_Str""));
    PropertyDescription foundsetProperty=new PropertyDescription(""String_Node_Str"",FoundsetPropertyType.INSTANCE);
    return new TypedData<FoundsetTypeSabloValue>(value,foundsetProperty);
  }
 else   if (""String_Node_Str"".equals(methodName)) {
    IFoundSetInternal foundset=FoundsetReferencePropertyType.INSTANCE.fromJSON(args,null,null,null);
    String rowid=args.optString(""String_Node_Str"");
    String relation=args.optString(""String_Node_Str"");
    Pair<String,Integer> splitHashAndIndex=FoundsetTypeSabloValue.splitPKHashAndIndex(rowid);
    int recordIndex=foundset.getRecordIndex(splitHashAndIndex.getLeft(),splitHashAndIndex.getRight().intValue());
    if (recordIndex != -1) {
      IRecordInternal record=foundset.getRecord(recordIndex);
      Object o=record.getValue(relation);
      if (o instanceof IFoundSetInternal) {
        IFoundSetInternal relatedFoundset=(IFoundSetInternal)o;
        PropertyDescription foundsetRefProperty=new PropertyDescription(""String_Node_Str"",FoundsetReferencePropertyType.INSTANCE);
        return new TypedData<IFoundSetInternal>(relatedFoundset,foundsetRefProperty);
      }
    }
  }
 else   if (""String_Node_Str"".equals(methodName)) {
    IFoundSetInternal foundset=FoundsetReferencePropertyType.INSTANCE.fromJSON(args,null,null,null);
    String rowid=args.optString(""String_Node_Str"");
    String dataproviderid=args.optString(""String_Node_Str"");
    Object value=args.get(""String_Node_Str"");
    Pair<String,Integer> splitHashAndIndex=FoundsetTypeSabloValue.splitPKHashAndIndex(rowid);
    int recordIndex=foundset.getRecordIndex(splitHashAndIndex.getLeft(),splitHashAndIndex.getRight().intValue());
    if (recordIndex != -1) {
      IRecordInternal record=foundset.getRecord(recordIndex);
      if (record.startEditing()) {
        record.setValue(dataproviderid,value);
        return Boolean.TRUE;
      }
    }
  }
  return null;
}","@SuppressWarnings(""String_Node_Str"") @Override public Object executeMethod(String methodName,JSONObject args) throws Exception {
  if (""String_Node_Str"".equals(methodName)) {
    IFoundSetInternal foundset=FoundsetReferencePropertyType.INSTANCE.fromJSON(args,null,null,null,null);
    String sort=args.optString(""String_Node_Str"");
    if (!""String_Node_Str"".equals(sort)) {
      foundset.setSort(sort);
    }
    FoundsetTypeSabloValue value=getFoundsetTypeSabloValue(foundset,args.optJSONObject(""String_Node_Str""));
    PropertyDescription foundsetProperty=new PropertyDescription(""String_Node_Str"",FoundsetPropertyType.INSTANCE);
    return new TypedData<FoundsetTypeSabloValue>(value,foundsetProperty);
  }
 else   if (""String_Node_Str"".equals(methodName)) {
    IFoundSetInternal foundset=FoundsetReferencePropertyType.INSTANCE.fromJSON(args,null,null,null,null);
    String rowid=args.optString(""String_Node_Str"");
    String relation=args.optString(""String_Node_Str"");
    Pair<String,Integer> splitHashAndIndex=FoundsetTypeSabloValue.splitPKHashAndIndex(rowid);
    int recordIndex=foundset.getRecordIndex(splitHashAndIndex.getLeft(),splitHashAndIndex.getRight().intValue());
    if (recordIndex != -1) {
      IRecordInternal record=foundset.getRecord(recordIndex);
      Object o=record.getValue(relation);
      if (o instanceof IFoundSetInternal) {
        IFoundSetInternal relatedFoundset=(IFoundSetInternal)o;
        PropertyDescription foundsetRefProperty=new PropertyDescription(""String_Node_Str"",FoundsetReferencePropertyType.INSTANCE);
        return new TypedData<IFoundSetInternal>(relatedFoundset,foundsetRefProperty);
      }
    }
  }
 else   if (""String_Node_Str"".equals(methodName)) {
    IFoundSetInternal foundset=FoundsetReferencePropertyType.INSTANCE.fromJSON(args,null,null,null,null);
    String rowid=args.optString(""String_Node_Str"");
    String dataproviderid=args.optString(""String_Node_Str"");
    Object value=args.get(""String_Node_Str"");
    Pair<String,Integer> splitHashAndIndex=FoundsetTypeSabloValue.splitPKHashAndIndex(rowid);
    int recordIndex=foundset.getRecordIndex(splitHashAndIndex.getLeft(),splitHashAndIndex.getRight().intValue());
    if (recordIndex != -1) {
      IRecordInternal record=foundset.getRecord(recordIndex);
      if (record.startEditing()) {
        record.setValue(dataproviderid,value);
        return Boolean.TRUE;
      }
    }
  }
  return null;
}",0.9968937668254296
143369,"@Override public ComponentTypeSabloValue fromJSON(Object newJSONValue,ComponentTypeSabloValue previousSabloValue,PropertyDescription pd,IBrowserConverterContext dataConverterContext){
  if (previousSabloValue != null) {
    previousSabloValue.browserUpdatesReceived(newJSONValue);
  }
  return previousSabloValue;
}","@Override public ComponentTypeSabloValue fromJSON(Object newJSONValue,ComponentTypeSabloValue previousSabloValue,PropertyDescription pd,IBrowserConverterContext dataConverterContext,ValueReference<Boolean> returnValueAdjustedIncommingValue){
  if (previousSabloValue != null) {
    previousSabloValue.browserUpdatesReceived(newJSONValue);
  }
  return previousSabloValue;
}",0.9156976744186046
143370,"@Override public FoundsetLinkedTypeSabloValue<YF,YT> fromJSON(Object newJSONValue,FoundsetLinkedTypeSabloValue<YF,YT> previousSabloValue,PropertyDescription pd,IBrowserConverterContext dataConverterContext){
  if (previousSabloValue != null) {
    previousSabloValue.browserUpdatesReceived(newJSONValue,getConfig(pd).wrappedPropertyDescription,pd,dataConverterContext);
  }
  return previousSabloValue;
}","@Override public FoundsetLinkedTypeSabloValue<YF,YT> fromJSON(Object newJSONValue,FoundsetLinkedTypeSabloValue<YF,YT> previousSabloValue,PropertyDescription pd,IBrowserConverterContext dataConverterContext,ValueReference<Boolean> returnValueAdjustedIncommingValue){
  if (previousSabloValue != null) {
    previousSabloValue.browserUpdatesReceived(newJSONValue,getConfig(pd).wrappedPropertyDescription,pd,dataConverterContext,returnValueAdjustedIncommingValue);
  }
  return previousSabloValue;
}",0.8977777777777778
143371,"public void browserUpdatesReceived(Object newJSONValue,PropertyDescription wrappedPropertyDescription,PropertyDescription pd,IBrowserConverterContext dataConverterContext){
  PushToServerEnum pushToServer=BrowserConverterContext.getPushToServerValue(dataConverterContext);
  if (initializingState != null) {
    Debug.error(""String_Node_Str"" + wrappedPropertyDescription + ""String_Node_Str""+ component);
    return;
  }
  if ((wrappedPropertyDescription instanceof IPushToServerSpecialType && ((IPushToServerSpecialType)wrappedPropertyDescription).shouldAlwaysAllowIncommingJSON()) || PushToServerEnum.allow.compareTo(pushToServer) <= 0) {
    try {
      JSONArray updates=(JSONArray)newJSONValue;
      for (int i=0; i < updates.length(); i++) {
        JSONObject update=(JSONObject)updates.get(i);
        if (update.has(PROPERTY_CHANGE)) {
          if (viewPortChangeMonitor != null) {
            Debug.error(""String_Node_Str"" + wrappedPropertyDescription + ""String_Node_Str""+ component);
            return;
          }
          Object object=update.get(PROPERTY_CHANGE);
          YT newWrappedValue=(YT)JSONUtils.fromJSONUnwrapped(wrappedSabloValue,object,wrappedPropertyDescription,dataConverterContext);
          if (newWrappedValue != wrappedSabloValue) {
            if (wrappedSabloValue instanceof IDataLinkedPropertyValue)             ((IDataLinkedPropertyValue)wrappedSabloValue).detach();
            wrappedSabloValue=newWrappedValue;
            if (wrappedSabloValue instanceof IDataLinkedPropertyValue)             ((IDataLinkedPropertyValue)wrappedSabloValue).attachToBaseObject(changeMonitor,component);
          }
        }
 else         if (update.has(ViewportDataChangeMonitor.VIEWPORT_CHANGED)) {
          if (viewPortChangeMonitor == null) {
            Debug.error(""String_Node_Str"" + wrappedPropertyDescription + ""String_Node_Str""+ component);
            return;
          }
          FoundsetTypeSabloValue foundsetPropertyValue=getFoundsetValue();
          if (foundsetPropertyValue != null && foundsetPropertyValue.getFoundset() != null) {
            JSONObject change=update.getJSONObject(ViewportDataChangeMonitor.VIEWPORT_CHANGED);
            String rowIDValue=change.getString(FoundsetTypeSabloValue.ROW_ID_COL_KEY);
            Object value=change.get(FoundsetTypeSabloValue.VALUE_KEY);
            updatePropertyValueForRecord(foundsetPropertyValue,rowIDValue,value,wrappedPropertyDescription,dataConverterContext);
          }
 else {
            Debug.error(""String_Node_Str"" + update.get(ViewportDataChangeMonitor.VIEWPORT_CHANGED));
          }
        }
      }
    }
 catch (    Exception ex) {
      Debug.error(ex);
    }
  }
 else {
    Debug.error(""String_Node_Str"" + pd + ""String_Node_Str"");
    if (viewPortChangeMonitor != null)     viewPortChangeMonitor.shouldSendWholeViewport();
 else     changeMonitor.valueChanged();
  }
}","public void browserUpdatesReceived(Object newJSONValue,PropertyDescription wrappedPropertyDescription,PropertyDescription pd,IBrowserConverterContext dataConverterContext,ValueReference<Boolean> returnValueAdjustedIncommingValue){
  PushToServerEnum pushToServer=BrowserConverterContext.getPushToServerValue(dataConverterContext);
  if (initializingState != null) {
    Debug.error(""String_Node_Str"" + wrappedPropertyDescription + ""String_Node_Str""+ component);
    return;
  }
  if ((wrappedPropertyDescription instanceof IPushToServerSpecialType && ((IPushToServerSpecialType)wrappedPropertyDescription).shouldAlwaysAllowIncommingJSON()) || PushToServerEnum.allow.compareTo(pushToServer) <= 0) {
    try {
      JSONArray updates=(JSONArray)newJSONValue;
      for (int i=0; i < updates.length(); i++) {
        JSONObject update=(JSONObject)updates.get(i);
        if (update.has(PROPERTY_CHANGE)) {
          if (viewPortChangeMonitor != null) {
            Debug.error(""String_Node_Str"" + wrappedPropertyDescription + ""String_Node_Str""+ component);
            return;
          }
          Object object=update.get(PROPERTY_CHANGE);
          YT newWrappedValue=(YT)JSONUtils.fromJSONUnwrapped(wrappedSabloValue,object,wrappedPropertyDescription,dataConverterContext,returnValueAdjustedIncommingValue);
          if (newWrappedValue != wrappedSabloValue) {
            if (wrappedSabloValue instanceof IDataLinkedPropertyValue)             ((IDataLinkedPropertyValue)wrappedSabloValue).detach();
            wrappedSabloValue=newWrappedValue;
            if (wrappedSabloValue instanceof IDataLinkedPropertyValue)             ((IDataLinkedPropertyValue)wrappedSabloValue).attachToBaseObject(changeMonitor,component);
          }
        }
 else         if (update.has(ViewportDataChangeMonitor.VIEWPORT_CHANGED)) {
          if (viewPortChangeMonitor == null) {
            Debug.error(""String_Node_Str"" + wrappedPropertyDescription + ""String_Node_Str""+ component);
            return;
          }
          FoundsetTypeSabloValue foundsetPropertyValue=getFoundsetValue();
          if (foundsetPropertyValue != null && foundsetPropertyValue.getFoundset() != null) {
            JSONObject change=update.getJSONObject(ViewportDataChangeMonitor.VIEWPORT_CHANGED);
            String rowIDValue=change.getString(FoundsetTypeSabloValue.ROW_ID_COL_KEY);
            Object value=change.get(FoundsetTypeSabloValue.VALUE_KEY);
            updatePropertyValueForRecord(foundsetPropertyValue,rowIDValue,value,wrappedPropertyDescription,dataConverterContext);
          }
 else {
            Debug.error(""String_Node_Str"" + update.get(ViewportDataChangeMonitor.VIEWPORT_CHANGED));
          }
        }
      }
    }
 catch (    Exception ex) {
      Debug.error(ex);
    }
  }
 else {
    Debug.error(""String_Node_Str"" + pd + ""String_Node_Str"");
    if (viewPortChangeMonitor != null)     viewPortChangeMonitor.shouldSendWholeViewport();
 else     changeMonitor.valueChanged();
  }
}",0.9843270868824532
143372,"protected void updatePropertyValueForRecord(FoundsetTypeSabloValue foundsetPropertyValue,String rowIDValue,Object value,PropertyDescription wrappedPropertyDescription,IBrowserConverterContext dataConverterContext){
  IFoundSetInternal foundset=foundsetPropertyValue.getFoundset();
  Pair<String,Integer> splitHashAndIndex=FoundsetTypeSabloValue.splitPKHashAndIndex(rowIDValue);
  if (foundset != null) {
    int recordIndex=foundset.getRecordIndex(splitHashAndIndex.getLeft(),splitHashAndIndex.getRight().intValue());
    if (recordIndex != -1) {
      foundsetPropertyValue.getDataAdapterList().setRecordQuietly(foundset.getRecord(recordIndex));
      viewPortChangeMonitor.pauseRowUpdateListener(splitHashAndIndex.getLeft());
      try {
        YT newWrappedValue=(YT)JSONUtils.fromJSONUnwrapped(wrappedSabloValue,value,wrappedPropertyDescription,dataConverterContext);
        if (newWrappedValue != wrappedSabloValue) {
          if (wrappedSabloValue instanceof IDataLinkedPropertyValue)           ((IDataLinkedPropertyValue)wrappedSabloValue).detach();
          wrappedSabloValue=newWrappedValue;
          if (wrappedSabloValue instanceof IDataLinkedPropertyValue)           ((IDataLinkedPropertyValue)wrappedSabloValue).attachToBaseObject(changeMonitor,component);
          viewPortChangeMonitor.viewPortCompletelyChanged();
        }
      }
 catch (      JSONException e) {
        Debug.error(""String_Node_Str"" + wrappedPropertyDescription + ""String_Node_Str""+ value+ ""String_Node_Str"",e);
      }
 finally {
        viewPortChangeMonitor.resumeRowUpdateListener();
      }
    }
 else {
      Debug.error(""String_Node_Str"" + rowIDValue + ""String_Node_Str""+ wrappedPropertyDescription+ ""String_Node_Str""+ value+ ""String_Node_Str""+ component+ ""String_Node_Str"",new RuntimeException());
    }
  }
 else {
    Debug.error(""String_Node_Str"" + rowIDValue + ""String_Node_Str""+ wrappedPropertyDescription+ ""String_Node_Str""+ value+ ""String_Node_Str""+ component+ ""String_Node_Str"",new RuntimeException());
  }
}","protected void updatePropertyValueForRecord(FoundsetTypeSabloValue foundsetPropertyValue,String rowIDValue,Object value,PropertyDescription wrappedPropertyDescription,IBrowserConverterContext dataConverterContext){
  IFoundSetInternal foundset=foundsetPropertyValue.getFoundset();
  Pair<String,Integer> splitHashAndIndex=FoundsetTypeSabloValue.splitPKHashAndIndex(rowIDValue);
  if (foundset != null) {
    int recordIndex=foundset.getRecordIndex(splitHashAndIndex.getLeft(),splitHashAndIndex.getRight().intValue());
    if (recordIndex != -1) {
      foundsetPropertyValue.getDataAdapterList().setRecordQuietly(foundset.getRecord(recordIndex));
      viewPortChangeMonitor.pauseRowUpdateListener(splitHashAndIndex.getLeft());
      try {
        ValueReference<Boolean> returnValueAdjustedIncommingValueForRow=new ValueReference<Boolean>(Boolean.FALSE);
        YT newWrappedValue=(YT)JSONUtils.fromJSONUnwrapped(wrappedSabloValue,value,wrappedPropertyDescription,dataConverterContext,returnValueAdjustedIncommingValueForRow);
        if (newWrappedValue != wrappedSabloValue) {
          if (wrappedSabloValue instanceof IDataLinkedPropertyValue)           ((IDataLinkedPropertyValue)wrappedSabloValue).detach();
          wrappedSabloValue=newWrappedValue;
          if (wrappedSabloValue instanceof IDataLinkedPropertyValue)           ((IDataLinkedPropertyValue)wrappedSabloValue).attachToBaseObject(changeMonitor,component);
          viewPortChangeMonitor.viewPortCompletelyChanged();
        }
 else         if (returnValueAdjustedIncommingValueForRow.value.booleanValue()) {
          FoundsetTypeViewport viewPort=foundsetPropertyValue.getViewPort();
          int firstViewPortIndex=Math.max(viewPort.getStartIndex(),recordIndex);
          int lastViewPortIndex=Math.min(viewPort.getStartIndex() + viewPort.getSize() - 1,recordIndex);
          if (firstViewPortIndex <= lastViewPortIndex) {
            viewPortChangeMonitor.queueOperation(firstViewPortIndex - viewPort.getStartIndex(),lastViewPortIndex - viewPort.getStartIndex(),firstViewPortIndex,lastViewPortIndex,foundsetPropertyValue.getFoundset(),RowData.CHANGE);
          }
        }
      }
 catch (      JSONException e) {
        Debug.error(""String_Node_Str"" + wrappedPropertyDescription + ""String_Node_Str""+ value+ ""String_Node_Str"",e);
      }
 finally {
        viewPortChangeMonitor.resumeRowUpdateListener();
      }
    }
 else {
      Debug.error(""String_Node_Str"" + rowIDValue + ""String_Node_Str""+ wrappedPropertyDescription+ ""String_Node_Str""+ value+ ""String_Node_Str""+ component+ ""String_Node_Str"",new RuntimeException());
    }
  }
 else {
    Debug.error(""String_Node_Str"" + rowIDValue + ""String_Node_Str""+ wrappedPropertyDescription+ ""String_Node_Str""+ value+ ""String_Node_Str""+ component+ ""String_Node_Str"",new RuntimeException());
  }
}",0.8327828241123039
143373,"@Override public FoundsetTypeSabloValue fromJSON(Object newJSONValue,FoundsetTypeSabloValue previousSabloValue,PropertyDescription pd,IBrowserConverterContext dataConverterContext){
  if (previousSabloValue != null) {
    previousSabloValue.browserUpdatesReceived(newJSONValue,pd,dataConverterContext);
  }
  return previousSabloValue;
}","@Override public FoundsetTypeSabloValue fromJSON(Object newJSONValue,FoundsetTypeSabloValue previousSabloValue,PropertyDescription pd,IBrowserConverterContext dataConverterContext,ValueReference<Boolean> returnValueAdjustedIncommingValue){
  if (previousSabloValue != null) {
    previousSabloValue.browserUpdatesReceived(newJSONValue,pd,dataConverterContext);
  }
  return previousSabloValue;
}",0.9207650273224044
143374,"public void browserUpdatesReceived(Object jsonValue,PropertyDescription pd,IBrowserConverterContext dataConverterContext){
  PushToServerEnum pushToServer=BrowserConverterContext.getPushToServerValue(dataConverterContext);
  if (getFoundset() == null)   return;
  try {
    if (jsonValue instanceof JSONArray) {
      JSONArray arr=(JSONArray)jsonValue;
      for (int i=0; i < arr.length(); i++) {
        JSONObject update=(JSONObject)arr.get(i);
        if (update.has(""String_Node_Str"")) {
          JSONObject newViewport=update.getJSONObject(""String_Node_Str"");
          viewPort.setBounds(newViewport.getInt(START_INDEX),newViewport.getInt(SIZE));
        }
        if (update.has(PREFERRED_VIEWPORT_SIZE)) {
          viewPort.setPreferredViewportSize(update.getInt(PREFERRED_VIEWPORT_SIZE));
        }
 else         if (update.has(""String_Node_Str"")) {
          viewPort.loadExtraRecords(update.getInt(""String_Node_Str""));
        }
 else         if (update.has(""String_Node_Str"")) {
          JSONArray columns=update.getJSONArray(""String_Node_Str"");
          StringBuilder sort=new StringBuilder();
          Map<String,String> dp=dataproviders.size() > 0 ? dataproviders : linkedChildComponentToColumn;
          String dataProviderID=null;
          boolean sortAscending=true;
          for (int j=0; j < columns.length(); j++) {
            JSONObject sortColumn=columns.getJSONObject(j);
            String name=sortColumn.getString(""String_Node_Str"");
            if (dp.containsKey(name)) {
              sort.append(dp.get(name));
              sort.append(""String_Node_Str"" + sortColumn.getString(""String_Node_Str""));
              if (dataProviderID == null) {
                dataProviderID=dp.get(name);
                sortAscending=""String_Node_Str"".equalsIgnoreCase(sortColumn.getString(""String_Node_Str""));
              }
              if (j < columns.length() - 1)               sort.append(""String_Node_Str"");
            }
          }
          IWebFormController fc=getFormUI().getController();
          if (fc != null && fc.getForm().getOnSortCmdMethodID() > 0 && dataProviderID != null) {
            JSEvent event=new JSEvent();
            event.setFormName(fc.getName());
            fc.executeFunction(String.valueOf(fc.getForm().getOnSortCmdMethodID()),Utils.arrayMerge((new Object[]{dataProviderID,Boolean.valueOf(sortAscending),event}),Utils.parseJSExpressions(fc.getForm().getInstanceMethodArguments(""String_Node_Str""))),true,null,false,""String_Node_Str"");
          }
 else {
            try {
              foundset.setSort(sort.toString());
            }
 catch (            ServoyException e) {
              Debug.error(""String_Node_Str"" + sort.toString(),e);
            }
          }
        }
 else         if (update.has(""String_Node_Str"")) {
          JSONArray jsonSelectedIndexes=update.getJSONArray(""String_Node_Str"");
          int[] newSelectedIndexes=new int[jsonSelectedIndexes.length()];
          for (int j=newSelectedIndexes.length - 1; j >= 0; j--) {
            newSelectedIndexes[j]=jsonSelectedIndexes.getInt(j);
          }
          getListSelectionListener().pause();
          try {
            if (newSelectedIndexes.length == 1) {
              foundset.setSelectedIndex(newSelectedIndexes[0]);
            }
 else {
              foundset.setSelectedIndexes(newSelectedIndexes);
            }
          }
  finally {
            getListSelectionListener().resume();
            if (!Arrays.equals(foundset.getSelectedIndexes(),newSelectedIndexes)) {
              changeMonitor.selectionChanged();
            }
          }
        }
 else         if (update.has(""String_Node_Str"")) {
          this.selectionRequestMsgid=update.getInt(""String_Node_Str"");
          JSONArray jsonSelectedIndexes=update.getJSONArray(""String_Node_Str"");
          int[] newSelectedIndexes=new int[jsonSelectedIndexes.length()];
          for (int j=newSelectedIndexes.length - 1; j >= 0; j--) {
            newSelectedIndexes[j]=jsonSelectedIndexes.getInt(j);
          }
          int[] oldSelection=foundset.getSelectedIndexes();
          getListSelectionListener().pause();
          try {
            if (newSelectedIndexes.length == 1) {
              foundset.setSelectedIndex(newSelectedIndexes[0]);
            }
 else {
              foundset.setSelectedIndexes(newSelectedIndexes);
            }
          }
  finally {
            getListSelectionListener().resume();
            if (!Arrays.equals(oldSelection,foundset.getSelectedIndexes())) {
              changeMonitor.selectionChanged();
              changeMonitor.selectionAccepted();
            }
 else {
              if (!Arrays.equals(oldSelection,newSelectedIndexes)) {
                changeMonitor.selectionDenied();
              }
 else               changeMonitor.selectionAccepted();
            }
          }
        }
 else         if (update.has(ViewportDataChangeMonitor.VIEWPORT_CHANGED)) {
          if (PushToServerEnum.allow.compareTo(pushToServer) <= 0) {
            JSONObject dataChangeJSON=(JSONObject)update.get(ViewportDataChangeMonitor.VIEWPORT_CHANGED);
            String rowIDValue=dataChangeJSON.getString(ROW_ID_COL_KEY);
            String dataProviderName=dataproviders.get(dataChangeJSON.getString(DATAPROVIDER_KEY));
            Object value=dataChangeJSON.get(VALUE_KEY);
            if (foundset != null) {
              Pair<String,Integer> splitHashAndIndex=splitPKHashAndIndex(rowIDValue);
              int recordIndex=foundset.getRecordIndex(splitHashAndIndex.getLeft(),splitHashAndIndex.getRight().intValue());
              if (recordIndex != -1) {
                IWebFormUI formUI=getFormUI();
                IRecordInternal record=foundset.getRecord(recordIndex);
                PropertyDescription dataProviderPropDesc=NGUtils.getDataProviderPropertyDescription(dataProviderName,foundset.getTable(),false);
                value=JSONUtils.fromJSONUnwrapped(null,value,dataProviderPropDesc,dataConverterContext);
                changeMonitor.pauseRowUpdateListener(splitHashAndIndex.getLeft());
                try {
                  if (record.startEditing()) {
                    try {
                      record.setValue(dataProviderName,value);
                    }
 catch (                    IllegalArgumentException e) {
                      formUI.getController().getApplication().reportError(""String_Node_Str"" + dataProviderName + ""String_Node_Str""+ value+ ""String_Node_Str"",e);
                    }
                  }
                }
  finally {
                  changeMonitor.resumeRowUpdateListener();
                  if (!Utils.equalObjects(record.getValue(dataProviderName),value)) {
                    changeMonitor.recordsUpdated(recordIndex,recordIndex,foundset.getSize(),viewPort);
                  }
                }
              }
 else {
                Debug.error(""String_Node_Str"" + rowIDValue + ""String_Node_Str""+ dataProviderName+ ""String_Node_Str""+ value+ ""String_Node_Str"");
              }
            }
          }
 else {
            log.error(""String_Node_Str"" + pd + ""String_Node_Str"");
            changeMonitor.viewPortCompletelyChanged();
          }
        }
      }
    }
  }
 catch (  JSONException e) {
    Debug.error(""String_Node_Str"" + this.toString() + ""String_Node_Str""+ jsonValue,e);
  }
}","public void browserUpdatesReceived(Object jsonValue,PropertyDescription pd,IBrowserConverterContext dataConverterContext){
  PushToServerEnum pushToServer=BrowserConverterContext.getPushToServerValue(dataConverterContext);
  if (getFoundset() == null)   return;
  try {
    if (jsonValue instanceof JSONArray) {
      JSONArray arr=(JSONArray)jsonValue;
      for (int i=0; i < arr.length(); i++) {
        JSONObject update=(JSONObject)arr.get(i);
        if (update.has(""String_Node_Str"")) {
          JSONObject newViewport=update.getJSONObject(""String_Node_Str"");
          viewPort.setBounds(newViewport.getInt(START_INDEX),newViewport.getInt(SIZE));
        }
        if (update.has(PREFERRED_VIEWPORT_SIZE)) {
          viewPort.setPreferredViewportSize(update.getInt(PREFERRED_VIEWPORT_SIZE));
        }
 else         if (update.has(""String_Node_Str"")) {
          viewPort.loadExtraRecords(update.getInt(""String_Node_Str""));
        }
 else         if (update.has(""String_Node_Str"")) {
          JSONArray columns=update.getJSONArray(""String_Node_Str"");
          StringBuilder sort=new StringBuilder();
          Map<String,String> dp=dataproviders.size() > 0 ? dataproviders : linkedChildComponentToColumn;
          String dataProviderID=null;
          boolean sortAscending=true;
          for (int j=0; j < columns.length(); j++) {
            JSONObject sortColumn=columns.getJSONObject(j);
            String name=sortColumn.getString(""String_Node_Str"");
            if (dp.containsKey(name)) {
              sort.append(dp.get(name));
              sort.append(""String_Node_Str"" + sortColumn.getString(""String_Node_Str""));
              if (dataProviderID == null) {
                dataProviderID=dp.get(name);
                sortAscending=""String_Node_Str"".equalsIgnoreCase(sortColumn.getString(""String_Node_Str""));
              }
              if (j < columns.length() - 1)               sort.append(""String_Node_Str"");
            }
          }
          IWebFormController fc=getFormUI().getController();
          if (fc != null && fc.getForm().getOnSortCmdMethodID() > 0 && dataProviderID != null) {
            JSEvent event=new JSEvent();
            event.setFormName(fc.getName());
            fc.executeFunction(String.valueOf(fc.getForm().getOnSortCmdMethodID()),Utils.arrayMerge((new Object[]{dataProviderID,Boolean.valueOf(sortAscending),event}),Utils.parseJSExpressions(fc.getForm().getInstanceMethodArguments(""String_Node_Str""))),true,null,false,""String_Node_Str"");
          }
 else {
            try {
              foundset.setSort(sort.toString());
            }
 catch (            ServoyException e) {
              Debug.error(""String_Node_Str"" + sort.toString(),e);
            }
          }
        }
 else         if (update.has(""String_Node_Str"")) {
          JSONArray jsonSelectedIndexes=update.getJSONArray(""String_Node_Str"");
          int[] newSelectedIndexes=new int[jsonSelectedIndexes.length()];
          for (int j=newSelectedIndexes.length - 1; j >= 0; j--) {
            newSelectedIndexes[j]=jsonSelectedIndexes.getInt(j);
          }
          getListSelectionListener().pause();
          try {
            if (newSelectedIndexes.length == 1) {
              foundset.setSelectedIndex(newSelectedIndexes[0]);
            }
 else {
              foundset.setSelectedIndexes(newSelectedIndexes);
            }
          }
  finally {
            getListSelectionListener().resume();
            if (!Arrays.equals(foundset.getSelectedIndexes(),newSelectedIndexes)) {
              changeMonitor.selectionChanged();
            }
          }
        }
 else         if (update.has(""String_Node_Str"")) {
          this.selectionRequestMsgid=update.getInt(""String_Node_Str"");
          JSONArray jsonSelectedIndexes=update.getJSONArray(""String_Node_Str"");
          int[] newSelectedIndexes=new int[jsonSelectedIndexes.length()];
          for (int j=newSelectedIndexes.length - 1; j >= 0; j--) {
            newSelectedIndexes[j]=jsonSelectedIndexes.getInt(j);
          }
          int[] oldSelection=foundset.getSelectedIndexes();
          getListSelectionListener().pause();
          try {
            if (newSelectedIndexes.length == 1) {
              foundset.setSelectedIndex(newSelectedIndexes[0]);
            }
 else {
              foundset.setSelectedIndexes(newSelectedIndexes);
            }
          }
  finally {
            getListSelectionListener().resume();
            if (!Arrays.equals(oldSelection,foundset.getSelectedIndexes())) {
              changeMonitor.selectionChanged();
              changeMonitor.selectionAccepted();
            }
 else {
              if (!Arrays.equals(oldSelection,newSelectedIndexes)) {
                changeMonitor.selectionDenied();
              }
 else               changeMonitor.selectionAccepted();
            }
          }
        }
 else         if (update.has(ViewportDataChangeMonitor.VIEWPORT_CHANGED)) {
          if (PushToServerEnum.allow.compareTo(pushToServer) <= 0) {
            JSONObject dataChangeJSON=(JSONObject)update.get(ViewportDataChangeMonitor.VIEWPORT_CHANGED);
            String rowIDValue=dataChangeJSON.getString(ROW_ID_COL_KEY);
            String dataProviderName=dataproviders.get(dataChangeJSON.getString(DATAPROVIDER_KEY));
            Object value=dataChangeJSON.get(VALUE_KEY);
            if (foundset != null) {
              Pair<String,Integer> splitHashAndIndex=splitPKHashAndIndex(rowIDValue);
              int recordIndex=foundset.getRecordIndex(splitHashAndIndex.getLeft(),splitHashAndIndex.getRight().intValue());
              if (recordIndex != -1) {
                IWebFormUI formUI=getFormUI();
                IRecordInternal record=foundset.getRecord(recordIndex);
                PropertyDescription dataProviderPropDesc=NGUtils.getDataProviderPropertyDescription(dataProviderName,foundset.getTable(),false);
                ValueReference<Boolean> returnValueAdjustedIncommingValueForRow=new ValueReference<Boolean>(Boolean.FALSE);
                value=JSONUtils.fromJSONUnwrapped(null,value,dataProviderPropDesc,dataConverterContext,returnValueAdjustedIncommingValueForRow);
                changeMonitor.pauseRowUpdateListener(splitHashAndIndex.getLeft());
                try {
                  if (record.startEditing()) {
                    try {
                      record.setValue(dataProviderName,value);
                    }
 catch (                    IllegalArgumentException e) {
                      formUI.getController().getApplication().reportError(""String_Node_Str"" + dataProviderName + ""String_Node_Str""+ value+ ""String_Node_Str"",e);
                    }
                  }
                }
  finally {
                  changeMonitor.resumeRowUpdateListener();
                  if (!Utils.equalObjects(record.getValue(dataProviderName),value) || returnValueAdjustedIncommingValueForRow.value.booleanValue()) {
                    changeMonitor.recordsUpdated(recordIndex,recordIndex,foundset.getSize(),viewPort);
                  }
                }
              }
 else {
                Debug.error(""String_Node_Str"" + rowIDValue + ""String_Node_Str""+ dataProviderName+ ""String_Node_Str""+ value+ ""String_Node_Str"");
              }
            }
          }
 else {
            log.error(""String_Node_Str"" + pd + ""String_Node_Str"");
            changeMonitor.viewPortCompletelyChanged();
          }
        }
      }
    }
  }
 catch (  JSONException e) {
    Debug.error(""String_Node_Str"" + this.toString() + ""String_Node_Str""+ jsonValue,e);
  }
}",0.9846959323399114
143375,"@Override public Object toRhinoValue(Object value,PropertyDescription pd){
  Border border=fromJSON(value,null,pd,null);
  return ComponentFactoryHelper.createBorderString(border);
}","@Override public Object toRhinoValue(Object value,PropertyDescription pd){
  Border border=fromJSON(value,null,pd,null,null);
  return ComponentFactoryHelper.createBorderString(border);
}",0.986449864498645
143376,"@Override public Border fromJSON(Object newValue,Border previousValue,PropertyDescription pd,IBrowserConverterContext dataConverterContext){
  if (newValue == null)   return null;
  JSONObject object=(JSONObject)newValue;
  String type=object.optString(TYPE);
  if (type == null)   return null;
  JSONObject borderStyle=object.optJSONObject(BORDER_STYLE);
switch (type) {
case ComponentFactoryHelper.BEVEL_BORDER:
{
      int borderType=""String_Node_Str"".equals(borderStyle.optString(BORDER_STYLE)) ? BevelBorder.RAISED : BevelBorder.LOWERED;
      String borderColor=borderStyle.optString(BORDER_COLOR);
      StringTokenizer st=new StringTokenizer(borderColor,""String_Node_Str"");
      Color hiOut=null;
      Color hiin=null;
      Color shOut=null;
      Color shIn=null;
      if (st.hasMoreTokens())       hiOut=PersistHelper.createColor(st.nextToken());
      if (st.hasMoreTokens())       shOut=PersistHelper.createColor(st.nextToken());
      if (st.hasMoreTokens())       shIn=PersistHelper.createColor(st.nextToken());
      if (st.hasMoreTokens())       hiin=PersistHelper.createColor(st.nextToken());
      return BorderFactory.createBevelBorder(borderType,hiOut,hiin,shOut,shIn);
    }
case ComponentFactoryHelper.EMPTY_BORDER:
{
    Insets insets=PersistHelper.createInsets(borderStyle.optString(BORDER_WIDTH).replaceAll(""String_Node_Str"",""String_Node_Str""));
    return BorderFactory.createEmptyBorder(insets.top,insets.right,insets.bottom,insets.left);
  }
case ComponentFactoryHelper.ETCHED_BORDER:
{
  StringTokenizer st=new StringTokenizer(borderStyle.optString(BORDER_COLOR),""String_Node_Str"");
  Color hi=null;
  Color sh=null;
  if (st.hasMoreTokens())   hi=PersistHelper.createColor(st.nextToken());
  if (st.hasMoreTokens())   sh=PersistHelper.createColor(st.nextToken());
  int t=borderStyle.optString(BORDER_STYLE).equals(""String_Node_Str"") ? EtchedBorder.RAISED : EtchedBorder.LOWERED;
  return BorderFactory.createEtchedBorder(t,hi,sh);
}
case ComponentFactoryHelper.LINE_BORDER:
{
Color borderColor=PersistHelper.createColor(borderStyle.optString(BORDER_COLOR));
String width=borderStyle.optString(BORDER_WIDTH);
if (width != null) width=width.substring(0,width.length() - 2);
return BorderFactory.createLineBorder(borderColor,Utils.getAsInteger(width));
}
case ComponentFactoryHelper.MATTE_BORDER:
{
Insets insets=PersistHelper.createInsets(borderStyle.optString(BORDER_WIDTH).replaceAll(""String_Node_Str"",""String_Node_Str""));
Color borderColor=PersistHelper.createColor(borderStyle.optString(BORDER_COLOR));
return BorderFactory.createMatteBorder(insets.top,insets.right,insets.bottom,insets.left,borderColor);
}
case ComponentFactoryHelper.ROUNDED_BORDER:
{
float top=Utils.getAsFloat(borderStyle.optString(BORDER_TOP_WIDTH).replace(""String_Node_Str"",""String_Node_Str""));
float left=Utils.getAsFloat(borderStyle.optString(BORDER_LEFT_WIDTH).replace(""String_Node_Str"",""String_Node_Str""));
float bottom=Utils.getAsFloat(borderStyle.optString(BORDER_BOTTOM_WIDTH).replace(""String_Node_Str"",""String_Node_Str""));
float right=Utils.getAsFloat(borderStyle.optString(BORDER_RIGHT_WIDTH).replace(""String_Node_Str"",""String_Node_Str""));
Color topColor=PersistHelper.createColor(borderStyle.optString(BORDER_TOP_COLOR));
Color bottomColor=PersistHelper.createColor(borderStyle.optString(BORDER_BOTTOM_COLOR));
Color leftColor=PersistHelper.createColor(borderStyle.optString(BORDER_LEFT_COLOR));
Color rightColor=PersistHelper.createColor(borderStyle.optString(BORDER_RIGHT_COLOR));
RoundedBorder border=new RoundedBorder(top,left,bottom,right,topColor,leftColor,bottomColor,rightColor);
border.setBorderStyles(borderStyle.optString(BORDER_STYLE).replaceAll(""String_Node_Str"",""String_Node_Str""));
border.setRoundingRadius(borderStyle.optString(BORDER_RADIUS).replaceAll(""String_Node_Str"",""String_Node_Str"").replaceAll(""String_Node_Str"",""String_Node_Str"").replaceAll(""String_Node_Str"",""String_Node_Str""));
return border;
}
case ComponentFactoryHelper.SPECIAL_MATTE_BORDER:
{
float top=Utils.getAsFloat(borderStyle.optString(BORDER_TOP_WIDTH).replace(""String_Node_Str"",""String_Node_Str""));
float left=Utils.getAsFloat(borderStyle.optString(BORDER_LEFT_WIDTH).replace(""String_Node_Str"",""String_Node_Str""));
float bottom=Utils.getAsFloat(borderStyle.optString(BORDER_BOTTOM_WIDTH).replace(""String_Node_Str"",""String_Node_Str""));
float right=Utils.getAsFloat(borderStyle.optString(BORDER_RIGHT_WIDTH).replace(""String_Node_Str"",""String_Node_Str""));
Color topColor=PersistHelper.createColor(borderStyle.optString(BORDER_TOP_COLOR));
Color bottomColor=PersistHelper.createColor(borderStyle.optString(BORDER_BOTTOM_COLOR));
Color leftColor=PersistHelper.createColor(borderStyle.optString(BORDER_LEFT_COLOR));
Color rightColor=PersistHelper.createColor(borderStyle.optString(BORDER_RIGHT_COLOR));
return new SpecialMatteBorder(top,left,bottom,right,topColor,leftColor,bottomColor,rightColor);
}
case ComponentFactoryHelper.TITLED_BORDER:
{
String borderTitle=object.optString(TITLE);
int titleJustification=TitledBorder.DEFAULT_JUSTIFICATION;
switch (object.optString(TITLE_JUSTIFICATION)) {
case ""String_Node_Str"":
titleJustification=TitledBorder.LEFT;
break;
case ""String_Node_Str"":
titleJustification=TitledBorder.RIGHT;
break;
case ""String_Node_Str"":
titleJustification=TitledBorder.CENTER;
break;
case ""String_Node_Str"":
titleJustification=TitledBorder.LEADING;
break;
case ""String_Node_Str"":
titleJustification=TitledBorder.TRAILING;
}
int titlePosition=TitledBorder.DEFAULT_POSITION;
switch (object.optString(TITLE_POSITION)) {
case ""String_Node_Str"":
titlePosition=TitledBorder.ABOVE_TOP;
break;
case ""String_Node_Str"":
titlePosition=TitledBorder.TOP;
break;
case ""String_Node_Str"":
titlePosition=TitledBorder.BELOW_TOP;
break;
case ""String_Node_Str"":
titlePosition=TitledBorder.ABOVE_BOTTOM;
break;
case ""String_Node_Str"":
titlePosition=TitledBorder.BELOW_BOTTOM;
break;
case ""String_Node_Str"":
titlePosition=TitledBorder.BOTTOM;
break;
}
Font titleFont=FontPropertyType.INSTANCE.fromJSON(object.optJSONObject(""String_Node_Str""),null,null,dataConverterContext);
Color titleColor=PersistHelper.createColor(object.optString(""String_Node_Str""));
return BorderFactory.createTitledBorder(null,borderTitle,titleJustification,titlePosition,titleFont,titleColor);
}
}
return null;
}","@Override public Border fromJSON(Object newValue,Border previousValue,PropertyDescription pd,IBrowserConverterContext dataConverterContext,ValueReference<Boolean> returnValueAdjustedIncommingValue){
  if (newValue == null)   return null;
  JSONObject object=(JSONObject)newValue;
  String type=object.optString(TYPE);
  if (type == null)   return null;
  JSONObject borderStyle=object.optJSONObject(BORDER_STYLE);
switch (type) {
case ComponentFactoryHelper.BEVEL_BORDER:
{
      int borderType=""String_Node_Str"".equals(borderStyle.optString(BORDER_STYLE)) ? BevelBorder.RAISED : BevelBorder.LOWERED;
      String borderColor=borderStyle.optString(BORDER_COLOR);
      StringTokenizer st=new StringTokenizer(borderColor,""String_Node_Str"");
      Color hiOut=null;
      Color hiin=null;
      Color shOut=null;
      Color shIn=null;
      if (st.hasMoreTokens())       hiOut=PersistHelper.createColor(st.nextToken());
      if (st.hasMoreTokens())       shOut=PersistHelper.createColor(st.nextToken());
      if (st.hasMoreTokens())       shIn=PersistHelper.createColor(st.nextToken());
      if (st.hasMoreTokens())       hiin=PersistHelper.createColor(st.nextToken());
      return BorderFactory.createBevelBorder(borderType,hiOut,hiin,shOut,shIn);
    }
case ComponentFactoryHelper.EMPTY_BORDER:
{
    Insets insets=PersistHelper.createInsets(borderStyle.optString(BORDER_WIDTH).replaceAll(""String_Node_Str"",""String_Node_Str""));
    return BorderFactory.createEmptyBorder(insets.top,insets.right,insets.bottom,insets.left);
  }
case ComponentFactoryHelper.ETCHED_BORDER:
{
  StringTokenizer st=new StringTokenizer(borderStyle.optString(BORDER_COLOR),""String_Node_Str"");
  Color hi=null;
  Color sh=null;
  if (st.hasMoreTokens())   hi=PersistHelper.createColor(st.nextToken());
  if (st.hasMoreTokens())   sh=PersistHelper.createColor(st.nextToken());
  int t=borderStyle.optString(BORDER_STYLE).equals(""String_Node_Str"") ? EtchedBorder.RAISED : EtchedBorder.LOWERED;
  return BorderFactory.createEtchedBorder(t,hi,sh);
}
case ComponentFactoryHelper.LINE_BORDER:
{
Color borderColor=PersistHelper.createColor(borderStyle.optString(BORDER_COLOR));
String width=borderStyle.optString(BORDER_WIDTH);
if (width != null) width=width.substring(0,width.length() - 2);
return BorderFactory.createLineBorder(borderColor,Utils.getAsInteger(width));
}
case ComponentFactoryHelper.MATTE_BORDER:
{
Insets insets=PersistHelper.createInsets(borderStyle.optString(BORDER_WIDTH).replaceAll(""String_Node_Str"",""String_Node_Str""));
Color borderColor=PersistHelper.createColor(borderStyle.optString(BORDER_COLOR));
return BorderFactory.createMatteBorder(insets.top,insets.right,insets.bottom,insets.left,borderColor);
}
case ComponentFactoryHelper.ROUNDED_BORDER:
{
float top=Utils.getAsFloat(borderStyle.optString(BORDER_TOP_WIDTH).replace(""String_Node_Str"",""String_Node_Str""));
float left=Utils.getAsFloat(borderStyle.optString(BORDER_LEFT_WIDTH).replace(""String_Node_Str"",""String_Node_Str""));
float bottom=Utils.getAsFloat(borderStyle.optString(BORDER_BOTTOM_WIDTH).replace(""String_Node_Str"",""String_Node_Str""));
float right=Utils.getAsFloat(borderStyle.optString(BORDER_RIGHT_WIDTH).replace(""String_Node_Str"",""String_Node_Str""));
Color topColor=PersistHelper.createColor(borderStyle.optString(BORDER_TOP_COLOR));
Color bottomColor=PersistHelper.createColor(borderStyle.optString(BORDER_BOTTOM_COLOR));
Color leftColor=PersistHelper.createColor(borderStyle.optString(BORDER_LEFT_COLOR));
Color rightColor=PersistHelper.createColor(borderStyle.optString(BORDER_RIGHT_COLOR));
RoundedBorder border=new RoundedBorder(top,left,bottom,right,topColor,leftColor,bottomColor,rightColor);
border.setBorderStyles(borderStyle.optString(BORDER_STYLE).replaceAll(""String_Node_Str"",""String_Node_Str""));
border.setRoundingRadius(borderStyle.optString(BORDER_RADIUS).replaceAll(""String_Node_Str"",""String_Node_Str"").replaceAll(""String_Node_Str"",""String_Node_Str"").replaceAll(""String_Node_Str"",""String_Node_Str""));
return border;
}
case ComponentFactoryHelper.SPECIAL_MATTE_BORDER:
{
float top=Utils.getAsFloat(borderStyle.optString(BORDER_TOP_WIDTH).replace(""String_Node_Str"",""String_Node_Str""));
float left=Utils.getAsFloat(borderStyle.optString(BORDER_LEFT_WIDTH).replace(""String_Node_Str"",""String_Node_Str""));
float bottom=Utils.getAsFloat(borderStyle.optString(BORDER_BOTTOM_WIDTH).replace(""String_Node_Str"",""String_Node_Str""));
float right=Utils.getAsFloat(borderStyle.optString(BORDER_RIGHT_WIDTH).replace(""String_Node_Str"",""String_Node_Str""));
Color topColor=PersistHelper.createColor(borderStyle.optString(BORDER_TOP_COLOR));
Color bottomColor=PersistHelper.createColor(borderStyle.optString(BORDER_BOTTOM_COLOR));
Color leftColor=PersistHelper.createColor(borderStyle.optString(BORDER_LEFT_COLOR));
Color rightColor=PersistHelper.createColor(borderStyle.optString(BORDER_RIGHT_COLOR));
return new SpecialMatteBorder(top,left,bottom,right,topColor,leftColor,bottomColor,rightColor);
}
case ComponentFactoryHelper.TITLED_BORDER:
{
String borderTitle=object.optString(TITLE);
int titleJustification=TitledBorder.DEFAULT_JUSTIFICATION;
switch (object.optString(TITLE_JUSTIFICATION)) {
case ""String_Node_Str"":
titleJustification=TitledBorder.LEFT;
break;
case ""String_Node_Str"":
titleJustification=TitledBorder.RIGHT;
break;
case ""String_Node_Str"":
titleJustification=TitledBorder.CENTER;
break;
case ""String_Node_Str"":
titleJustification=TitledBorder.LEADING;
break;
case ""String_Node_Str"":
titleJustification=TitledBorder.TRAILING;
}
int titlePosition=TitledBorder.DEFAULT_POSITION;
switch (object.optString(TITLE_POSITION)) {
case ""String_Node_Str"":
titlePosition=TitledBorder.ABOVE_TOP;
break;
case ""String_Node_Str"":
titlePosition=TitledBorder.TOP;
break;
case ""String_Node_Str"":
titlePosition=TitledBorder.BELOW_TOP;
break;
case ""String_Node_Str"":
titlePosition=TitledBorder.ABOVE_BOTTOM;
break;
case ""String_Node_Str"":
titlePosition=TitledBorder.BELOW_BOTTOM;
break;
case ""String_Node_Str"":
titlePosition=TitledBorder.BOTTOM;
break;
}
Font titleFont=FontPropertyType.INSTANCE.fromJSON(object.optJSONObject(""String_Node_Str""),null,null,dataConverterContext,null);
Color titleColor=PersistHelper.createColor(object.optString(""String_Node_Str""));
return BorderFactory.createTitledBorder(null,borderTitle,titleJustification,titlePosition,titleFont,titleColor);
}
}
return null;
}",0.9950185814817744
143377,"@Override public Border toFormElementValue(JSONObject designValue,PropertyDescription pd,FlattenedSolution flattenedSolution,INGFormElement formElement,PropertyPath propertyPath){
  return fromJSON(designValue,null,pd,null);
}","@Override public Border toFormElementValue(JSONObject designValue,PropertyDescription pd,FlattenedSolution flattenedSolution,INGFormElement formElement,PropertyPath propertyPath){
  return fromJSON(designValue,null,pd,null,null);
}",0.9890590809628008
143378,"@Override public byte[] fromJSON(Object newJSONValue,byte[] previousSabloValue,PropertyDescription pd,IBrowserConverterContext dataConverterContext){
  return previousSabloValue;
}","@Override public byte[] fromJSON(Object newJSONValue,byte[] previousSabloValue,PropertyDescription pd,IBrowserConverterContext dataConverterContext,ValueReference<Boolean> returnValueAdjustedIncommingValue){
  return previousSabloValue;
}",0.861244019138756
143379,"@Override public DataproviderTypeSabloValue fromJSON(Object newJSONValue,DataproviderTypeSabloValue previousSabloValue,PropertyDescription pd,IBrowserConverterContext dataConverterContext){
  if (previousSabloValue != null) {
    previousSabloValue.browserUpdateReceived(newJSONValue,dataConverterContext);
  }
  return previousSabloValue;
}","@Override public DataproviderTypeSabloValue fromJSON(Object newJSONValue,DataproviderTypeSabloValue previousSabloValue,PropertyDescription pd,IBrowserConverterContext dataConverterContext,ValueReference<Boolean> returnValueAdjustedIncommingValue){
  if (previousSabloValue != null) {
    previousSabloValue.browserUpdateReceived(newJSONValue,dataConverterContext);
  }
  return previousSabloValue;
}",0.9216216216216216
143380,"public void browserUpdateReceived(Object newJSONValue,IBrowserConverterContext dataConverterContext){
  Object oldValue=value;
  if (!findMode && typeOfDP != null) {
    if (typeOfDP.getType() instanceof IPropertyConverterForBrowser<?>) {
      value=((IPropertyConverterForBrowser)typeOfDP.getType()).fromJSON(newJSONValue,value,typeOfDP,dataConverterContext);
    }
 else     value=newJSONValue;
  }
 else   value=newJSONValue;
  if (oldValue != value && (oldValue == null || !oldValue.equals(value))) {
    jsonValue=null;
  }
}","public void browserUpdateReceived(Object newJSONValue,IBrowserConverterContext dataConverterContext){
  Object oldValue=value;
  ValueReference<Boolean> serverSideValueIsNotTheSameAsClient=new ValueReference<>(Boolean.FALSE);
  if (!findMode && typeOfDP != null) {
    if (typeOfDP.getType() instanceof IPropertyConverterForBrowser<?>) {
      value=((IPropertyConverterForBrowser)typeOfDP.getType()).fromJSON(newJSONValue,value,typeOfDP,dataConverterContext,serverSideValueIsNotTheSameAsClient);
    }
 else     value=newJSONValue;
  }
 else   value=newJSONValue;
  if (oldValue != value && (oldValue == null || !oldValue.equals(value))) {
    jsonValue=null;
  }
  if (serverSideValueIsNotTheSameAsClient.value.booleanValue()) {
    jsonValue=null;
    changeMonitor.valueChanged();
  }
}",0.8039364118092355
143381,"@Override public Object executeMethod(String methodName,JSONObject args) throws Exception {
  if (""String_Node_Str"".equals(methodName)) {
    JSONObject values=new JSONObject();
    for (int i=0; i < args.length(); i++) {
      String key=args.getString(Integer.toString(i));
      values.put(key,application.getI18NMessage(key));
    }
    return values;
  }
  return null;
}","@Override public Object executeMethod(String methodName,JSONObject args) throws Exception {
  if (""String_Node_Str"".equals(methodName)) {
    JSONObject values=new JSONObject();
    for (int i=0; i < args.length(); i++) {
      String key=args.getString(Integer.toString(i));
      values.put(key,application.getI18NMessage(key));
    }
    return values;
  }
 else   if (""String_Node_Str"".equals(methodName)) {
    String language=args.getString(""String_Node_Str"");
    String country=args.optString(""String_Node_Str"");
    Locale locale;
    if (country == null) {
      locale=new Locale(language);
    }
 else {
      locale=new Locale(language,country);
    }
    DecimalFormatSymbols dfs=RoundHalfUpDecimalFormat.getDecimalFormatSymbols(locale);
    JSONObject languageInfo=new JSONObject();
    JSONObject delimiters=new JSONObject();
    delimiters.put(""String_Node_Str"",String.valueOf(dfs.getGroupingSeparator()));
    delimiters.put(""String_Node_Str"",String.valueOf(dfs.getDecimalSeparator()));
    JSONObject abbreviations=new JSONObject();
    abbreviations.put(""String_Node_Str"",""String_Node_Str"");
    abbreviations.put(""String_Node_Str"",""String_Node_Str"");
    abbreviations.put(""String_Node_Str"",""String_Node_Str"");
    abbreviations.put(""String_Node_Str"",""String_Node_Str"");
    JSONObject currency=new JSONObject();
    currency.put(""String_Node_Str"",String.valueOf(dfs.getCurrencySymbol()));
    languageInfo.put(""String_Node_Str"",delimiters);
    languageInfo.put(""String_Node_Str"",abbreviations);
    languageInfo.put(""String_Node_Str"",currency);
    return languageInfo;
  }
  return null;
}",0.3640020110608346
143382,"public void browserUpdateReceived(Object newJSONValue,IBrowserConverterContext dataConverterContext){
  Object oldValue=value;
  if (!findMode && typeOfDP != null) {
    if (typeOfDP.getType() instanceof IPropertyConverterForBrowser<?>) {
      value=((IPropertyConverterForBrowser)typeOfDP.getType()).fromJSON(newJSONValue,value,typeOfDP,dataConverterContext);
    }
 else     value=newJSONValue;
  }
 else   value=newJSONValue;
  if (oldValue != value && (oldValue == null || !oldValue.equals(value))) {
    jsonValue=null;
  }
}","public void browserUpdateReceived(Object newJSONValue,IBrowserConverterContext dataConverterContext){
  Object oldValue=value;
  if (!findMode && typeOfDP != null) {
    if (typeOfDP.getType() instanceof IPropertyConverterForBrowser<?>) {
      value=((IPropertyConverterForBrowser)typeOfDP.getType()).fromJSON(newJSONValue,value,typeOfDP,dataConverterContext);
    }
 else     value=newJSONValue;
  }
 else   value=newJSONValue;
  try {
    Object newValueForJSON=getValueForToJSON(value,dataConverterContext);
    if (newValueForJSON != jsonValue || (newValueForJSON != null && !newValueForJSON.equals(jsonValue))) {
      jsonValue=newValueForJSON;
      changeMonitor.valueChanged();
    }
  }
 catch (  JSONException e) {
    Debug.error(""String_Node_Str"" + newJSONValue + ""String_Node_Str""+ value+ ""String_Node_Str""+ typeOfDP+ ""String_Node_Str"",e);
  }
}",0.6570812365204889
143383,"public void toJSON(JSONWriter writer,String key,DataConversion clientConversion,IBrowserConverterContext dataConverterContext) throws JSONException {
  if (value instanceof UUID) {
    value=value.toString();
  }
  JSONUtils.addKeyIfPresent(writer,key);
  if (jsonValue == null) {
    if (findMode) {
      jsonValue=value instanceof String ? value : (value != null ? String.valueOf(value) : ""String_Node_Str"");
    }
 else     if (typeOfDP != null) {
      EmbeddableJSONWriter ejw=new EmbeddableJSONWriter(true);
      DataConversion jsonDataConversion=new DataConversion();
      FullValueToJSONConverter.INSTANCE.toJSONValue(ejw,null,value,typeOfDP,jsonDataConversion,dataConverterContext);
      if (jsonDataConversion.getConversions().size() == 0)       jsonDataConversion=null;
      String str=ejw.toJSONString();
      if (str == null || str.trim().length() == 0) {
        Debug.error(""String_Node_Str"" + typeOfDP + ""String_Node_Str""+ value+ ""String_Node_Str"");
        str=""String_Node_Str"";
      }
      jsonValue=new JSONStringWithConversions(str,jsonDataConversion);
    }
 else {
      jsonValue=value;
    }
  }
  writer.value(jsonValue);
  if (jsonValue instanceof IJSONStringWithConversions)   clientConversion.convert(((IJSONStringWithConversions)jsonValue).getDataConversions());
}","public void toJSON(JSONWriter writer,String key,DataConversion clientConversion,IBrowserConverterContext dataConverterContext) throws JSONException {
  if (value instanceof UUID) {
    value=value.toString();
  }
  JSONUtils.addKeyIfPresent(writer,key);
  if (jsonValue == null) {
    jsonValue=getValueForToJSON(value,dataConverterContext);
  }
  writer.value(jsonValue);
  if (jsonValue instanceof IJSONStringWithConversions)   clientConversion.convert(((IJSONStringWithConversions)jsonValue).getDataConversions());
}",0.3953871499176277
143384,"@Override public JSONWriter toJSON(JSONWriter writer,String key,Object formatValue,PropertyDescription pdd,DataConversion cc,IBrowserConverterContext dataConverterContext) throws JSONException {
  ComponentFormat format;
  if (formatValue == null || formatValue instanceof String) {
    JSONUtils.addKeyIfPresent(writer,key);
    return writer.value(null);
  }
  format=(ComponentFormat)formatValue;
  Map<String,Object> map=new HashMap<>();
  String type=Column.getDisplayTypeString(format.uiType);
  map.put(""String_Node_Str"",type);
  boolean isMask=format.parsedFormat.isMask();
  boolean isAllUppercase=format.parsedFormat.isAllUpperCase();
  boolean isAllLowercase=format.parsedFormat.isAllLowerCase();
  String mask=format.parsedFormat.getEditFormat();
  if (isMask && type.equals(""String_Node_Str"")) {
    mask=format.parsedFormat.getDateMask();
  }
 else   if (format.parsedFormat.getDisplayFormat() != null && type.equals(""String_Node_Str"")) {
    isMask=true;
    mask=format.parsedFormat.getDisplayFormat();
  }
  String placeHolder=null;
  if (format.parsedFormat.getPlaceHolderString() != null)   placeHolder=format.parsedFormat.getPlaceHolderString();
 else   if (format.parsedFormat.getPlaceHolderCharacter() != 0)   placeHolder=Character.toString(format.parsedFormat.getPlaceHolderCharacter());
  map.put(""String_Node_Str"",Boolean.valueOf(isMask));
  map.put(""String_Node_Str"",mask);
  map.put(""String_Node_Str"",placeHolder);
  map.put(""String_Node_Str"",format.parsedFormat.getAllowedCharacters());
  map.put(""String_Node_Str"",format.parsedFormat.getDisplayFormat());
  map.put(""String_Node_Str"",Boolean.valueOf(format.parsedFormat.isNumberValidator()));
  if (type.equals(""String_Node_Str"") || type.equals(""String_Node_Str"") || format.parsedFormat.isNumberValidator()) {
    BaseWebObject webObject=dataConverterContext.getWebObject();
    Locale clientLocale;
    if (webObject instanceof IContextProvider) {
      clientLocale=((IContextProvider)webObject).getDataConverterContext().getApplication().getLocale();
    }
 else {
      Debug.warn(""String_Node_Str"" + webObject.toString() + ""String_Node_Str"");
      clientLocale=Locale.getDefault();
    }
    DecimalFormatSymbols dfs=RoundHalfUpDecimalFormat.getDecimalFormatSymbols(clientLocale);
    map.put(""String_Node_Str"",String.valueOf(dfs.getDecimalSeparator()));
    map.put(""String_Node_Str"",String.valueOf(dfs.getGroupingSeparator()));
    map.put(""String_Node_Str"",dfs.getCurrencySymbol());
    map.put(""String_Node_Str"",String.valueOf(dfs.getPercent()));
  }
  if (format.parsedFormat.getMaxLength() != null) {
    map.put(""String_Node_Str"",format.parsedFormat.getMaxLength());
  }
  if (isAllUppercase)   map.put(""String_Node_Str"",Boolean.valueOf(isAllUppercase));
 else   if (isAllLowercase)   map.put(""String_Node_Str"",Boolean.valueOf(isAllLowercase));
  return JSONUtils.toBrowserJSONFullValue(writer,key,map,null,cc,null);
}","@Override public JSONWriter toJSON(JSONWriter writer,String key,Object formatValue,PropertyDescription pdd,DataConversion cc,IBrowserConverterContext dataConverterContext) throws JSONException {
  ComponentFormat format;
  if (formatValue == null || formatValue instanceof String) {
    JSONUtils.addKeyIfPresent(writer,key);
    return writer.value(null);
  }
  format=(ComponentFormat)formatValue;
  Map<String,Object> map=new HashMap<>();
  String type=Column.getDisplayTypeString(format.uiType);
  map.put(""String_Node_Str"",type);
  boolean isMask=format.parsedFormat.isMask();
  boolean isAllUppercase=format.parsedFormat.isAllUpperCase();
  boolean isAllLowercase=format.parsedFormat.isAllLowerCase();
  String mask=format.parsedFormat.getEditFormat();
  if (isMask && type.equals(""String_Node_Str"")) {
    mask=format.parsedFormat.getDateMask();
  }
 else   if (format.parsedFormat.getDisplayFormat() != null && type.equals(""String_Node_Str"")) {
    isMask=true;
    mask=format.parsedFormat.getDisplayFormat();
  }
  String placeHolder=null;
  if (format.parsedFormat.getPlaceHolderString() != null)   placeHolder=format.parsedFormat.getPlaceHolderString();
 else   if (format.parsedFormat.getPlaceHolderCharacter() != 0)   placeHolder=Character.toString(format.parsedFormat.getPlaceHolderCharacter());
  map.put(""String_Node_Str"",Boolean.valueOf(isMask));
  map.put(""String_Node_Str"",mask);
  map.put(""String_Node_Str"",placeHolder);
  map.put(""String_Node_Str"",format.parsedFormat.getAllowedCharacters());
  map.put(""String_Node_Str"",format.parsedFormat.getDisplayFormat());
  map.put(""String_Node_Str"",Boolean.valueOf(format.parsedFormat.isNumberValidator()));
  if (type.equals(""String_Node_Str"") || type.equals(""String_Node_Str"") || format.parsedFormat.isNumberValidator()) {
    BaseWebObject webObject=dataConverterContext.getWebObject();
    Locale clientLocale;
    if (webObject instanceof IContextProvider) {
      clientLocale=((IContextProvider)webObject).getDataConverterContext().getApplication().getLocale();
    }
 else {
      Debug.warn(""String_Node_Str"" + webObject.toString() + ""String_Node_Str"");
      clientLocale=Locale.getDefault();
    }
    DecimalFormatSymbols dfs=RoundHalfUpDecimalFormat.getDecimalFormatSymbols(clientLocale);
    map.put(""String_Node_Str"",String.valueOf(dfs.getPercent()));
  }
  if (format.parsedFormat.getMaxLength() != null) {
    map.put(""String_Node_Str"",format.parsedFormat.getMaxLength());
  }
  if (isAllUppercase)   map.put(""String_Node_Str"",Boolean.valueOf(isAllUppercase));
 else   if (isAllLowercase)   map.put(""String_Node_Str"",Boolean.valueOf(isAllLowercase));
  return JSONUtils.toBrowserJSONFullValue(writer,key,map,null,cc,null);
}",0.9634776411900944
143385,"/** 
 * @param visible
 * @param invokeLaterRunnables
 */
boolean notifyVisible(boolean visible,List<Runnable> invokeLaterRunnables);","boolean notifyVisible(boolean visible,List<Runnable> invokeLaterRunnables);",0.7211538461538461
143386,"@Override public boolean recreateUI(){
  tabSequence=null;
  Form f=application.getFlattenedSolution().getForm(form.getName());
  form=application.getFlattenedSolution().getFlattenedForm(f);
  getFormUI().init();
  NGClientWindow.getCurrentWindow().updateForm(form,getName());
  return true;
}","@Override public boolean recreateUI(){
  List<Runnable> invokeLaterRunnables=new ArrayList<Runnable>();
  notifyVisibleOnChildren(false,invokeLaterRunnables);
  Utils.invokeLater(application,invokeLaterRunnables);
  tabSequence=null;
  Form f=application.getFlattenedSolution().getForm(form.getName());
  form=application.getFlattenedSolution().getFlattenedForm(f);
  getFormUI().init();
  NGClientWindow.getCurrentWindow().updateForm(form,getName());
  return true;
}",0.7700394218134035
143387,"@Override public boolean notifyVisible(boolean visible,List<Runnable> invokeLaterRunnables){
  boolean notifyVisibleSuccess=super.notifyVisible(visible,invokeLaterRunnables);
  if (notifyVisibleSuccess && getFormUI() != null) {
    getFormUI().notifyVisible(visible,invokeLaterRunnables);
  }
  return notifyVisibleSuccess;
}","@Override public boolean notifyVisible(boolean visible,List<Runnable> invokeLaterRunnables){
  boolean notifyVisibleSuccess=super.notifyVisible(visible,invokeLaterRunnables);
  if (notifyVisibleSuccess)   notifyVisibleOnChildren(visible,invokeLaterRunnables);
  return notifyVisibleSuccess;
}",0.7649918962722853
143388,"@Override public boolean notifyVisible(boolean visible,List<Runnable> invokeLaterRunnables){
  if (isFormVisible == visible || executingOnLoad)   return true;
  if (formModel == null) {
    isFormVisible=visible;
    return true;
  }
  boolean notifyVisible=super.notifyVisible(visible,invokeLaterRunnables);
  if (notifyVisible) {
    IDataRenderer[] array=getDataRenderers();
    for (    IDataRenderer dataRenderer : array) {
      if (dataRenderer != null) {
        dataRenderer.notifyVisible(visible,invokeLaterRunnables);
      }
    }
  }
  return notifyVisible;
}","@Override public boolean notifyVisible(boolean visible,List<Runnable> invokeLaterRunnables){
  if (isFormVisible == visible || executingOnLoad)   return true;
  if (formModel == null) {
    isFormVisible=visible;
    return true;
  }
  boolean notifyVisible=super.notifyVisible(visible,invokeLaterRunnables);
  if (notifyVisible) {
    notifyVisibleOnChildren(visible,invokeLaterRunnables);
  }
  return notifyVisible;
}",0.6935483870967742
143389,"@Override public boolean recreateUI(){
  getFormUI().touch();
  Rectangle scrollPosition=null;
  if (view != null)   scrollPosition=view.getVisibleRect();
  getFormUI().setDesignMode(null);
  Form f=application.getFlattenedSolution().getForm(form.getName());
  form=application.getFlattenedSolution().getFlattenedForm(f);
  initStylesAndBorder();
  int v=currentViewType;
  currentViewType=-1;
  setView(v);
  if (isFormVisible) {
    valueChanged(null);
    List<Runnable> invokeLaterRunnables=new ArrayList<Runnable>();
    IDataRenderer[] array=getDataRenderers();
    for (    IDataRenderer dataRenderer : array) {
      if (dataRenderer != null) {
        dataRenderer.notifyVisible(true,invokeLaterRunnables);
      }
    }
    Utils.invokeLater(application,invokeLaterRunnables);
  }
  if (designMode != null) {
    application.invokeLater(new Runnable(){
      public void run(){
        getFormUI().setDesignMode(designMode);
      }
    }
);
  }
  getFormUI().uiRecreated();
  application.getFlattenedSolution().deregisterLiveForm(form,namedInstance);
  application.getFlattenedSolution().registerLiveForm(form,namedInstance);
  if (view != null && scrollPosition != null)   view.setVisibleRect(scrollPosition);
  return true;
}","@Override public boolean recreateUI(){
  List<Runnable> ilr=new ArrayList<Runnable>();
  notifyVisibleOnChildren(false,ilr);
  Utils.invokeLater(application,ilr);
  getFormUI().touch();
  Rectangle scrollPosition=null;
  if (view != null)   scrollPosition=view.getVisibleRect();
  getFormUI().setDesignMode(null);
  Form f=application.getFlattenedSolution().getForm(form.getName());
  form=application.getFlattenedSolution().getFlattenedForm(f);
  initStylesAndBorder();
  int v=currentViewType;
  currentViewType=-1;
  setView(v);
  if (isFormVisible) {
    valueChanged(null);
    List<Runnable> invokeLaterRunnables=new ArrayList<Runnable>();
    IDataRenderer[] array=getDataRenderers();
    for (    IDataRenderer dataRenderer : array) {
      if (dataRenderer != null) {
        dataRenderer.notifyVisible(true,invokeLaterRunnables);
      }
    }
    Utils.invokeLater(application,invokeLaterRunnables);
  }
  if (designMode != null) {
    application.invokeLater(new Runnable(){
      public void run(){
        getFormUI().setDesignMode(designMode);
      }
    }
);
  }
  getFormUI().uiRecreated();
  application.getFlattenedSolution().deregisterLiveForm(form,namedInstance);
  application.getFlattenedSolution().registerLiveForm(form,namedInstance);
  if (view != null && scrollPosition != null)   view.setVisibleRect(scrollPosition);
  return true;
}",0.9523076923076924
143390,"public void addUninitializedRelatedForm(String formName,String relationName){
  uninitializedRelatedForms.put(formName,relationName);
}","public void addUninitializedRelatedForm(String formName,String relationName){
  uninitializedVisibleChildForms.put(formName,relationName);
}",0.9527272727272728
143391,"public void setRecord(IRecord record,boolean fireChangeEvent){
  if (settingRecord) {
    if (record != this.record) {
      throw new IllegalStateException(""String_Node_Str"" + record + ""String_Node_Str""+ this.record+ ""String_Node_Str"");
    }
    return;
  }
  try {
    settingRecord=true;
    if (this.record != null) {
      this.record.removeModificationListener(this);
    }
    this.record=(IRecordInternal)record;
    if (this.record != null) {
      pushChangedValues(null,fireChangeEvent);
      this.record.addModificationListener(this);
    }
  }
  finally {
    settingRecord=false;
  }
  if (uninitializedRelatedForms.size() > 0) {
    for (    String formName : uninitializedRelatedForms.keySet()) {
      addRelatedForm(getApplication().getFormManager().getForm(formName),uninitializedRelatedForms.get(formName),true);
    }
    uninitializedRelatedForms.clear();
  }
  for (  IWebFormController form : relatedForms.keySet()) {
    if (relatedForms.get(form) != null) {
      form.loadRecords(record != null ? record.getRelatedFoundSet(relatedForms.get(form),((BasicFormController)form).getDefaultSortColumns()) : null);
    }
  }
}","public void setRecord(IRecord record,boolean fireChangeEvent){
  if (settingRecord) {
    if (record != this.record) {
      throw new IllegalStateException(""String_Node_Str"" + record + ""String_Node_Str""+ this.record+ ""String_Node_Str"");
    }
    return;
  }
  try {
    settingRecord=true;
    if (this.record != null) {
      this.record.removeModificationListener(this);
    }
    this.record=(IRecordInternal)record;
    if (this.record != null) {
      pushChangedValues(null,fireChangeEvent);
      this.record.addModificationListener(this);
    }
  }
  finally {
    settingRecord=false;
  }
  if (uninitializedVisibleChildForms.size() > 0) {
    for (    String formName : uninitializedVisibleChildForms.keySet()) {
      addVisibleChildForm(getApplication().getFormManager().getForm(formName),uninitializedVisibleChildForms.get(formName),true);
    }
    uninitializedVisibleChildForms.clear();
  }
  for (  IWebFormController form : visibleChildForms.keySet()) {
    if (visibleChildForms.get(form) != null) {
      form.loadRecords(record != null ? record.getRelatedFoundSet(visibleChildForms.get(form),((BasicFormController)form).getDefaultSortColumns()) : null);
    }
  }
}",0.9417808219178082
143392,"@Override public void valueChanged(ModificationEvent e){
  if (record != null && e != null && e.getName() != null) {
    for (    Entry<IWebFormController,String> relatedFormEntry : relatedForms.entrySet()) {
      IWebFormController relatedForm=relatedFormEntry.getKey();
      String relatedFormRelation=relatedFormEntry.getValue();
      boolean depends=false;
      Relation[] relations=getApplication().getFlattenedSolution().getRelationSequence(relatedFormRelation);
      for (int r=0; !depends && relations != null && r < relations.length; r++) {
        try {
          IDataProvider[] primaryDataProviders=relations[r].getPrimaryDataProviders(getApplication().getFlattenedSolution());
          for (int p=0; !depends && primaryDataProviders != null && p < primaryDataProviders.length; p++) {
            depends=e.getName().equals(primaryDataProviders[p].getDataProviderID());
          }
        }
 catch (        RepositoryException ex) {
          Debug.log(ex);
        }
      }
      if (depends) {
        relatedForm.loadRecords(record.getRelatedFoundSet(relatedFormRelation,((BasicFormController)relatedForm).getDefaultSortColumns()));
      }
    }
  }
  if (getForm().isFormVisible()) {
    pushChangedValues(e.getName(),true);
  }
}","@Override public void valueChanged(ModificationEvent e){
  if (record != null && e != null && e.getName() != null) {
    for (    Entry<IWebFormController,String> relatedFormEntry : visibleChildForms.entrySet()) {
      IWebFormController relatedForm=relatedFormEntry.getKey();
      String relatedFormRelation=relatedFormEntry.getValue();
      boolean depends=false;
      Relation[] relations=getApplication().getFlattenedSolution().getRelationSequence(relatedFormRelation);
      for (int r=0; !depends && relations != null && r < relations.length; r++) {
        try {
          IDataProvider[] primaryDataProviders=relations[r].getPrimaryDataProviders(getApplication().getFlattenedSolution());
          for (int p=0; !depends && primaryDataProviders != null && p < primaryDataProviders.length; p++) {
            depends=e.getName().equals(primaryDataProviders[p].getDataProviderID());
          }
        }
 catch (        RepositoryException ex) {
          Debug.log(ex);
        }
      }
      if (depends) {
        relatedForm.loadRecords(record.getRelatedFoundSet(relatedFormRelation,((BasicFormController)relatedForm).getDefaultSortColumns()));
      }
    }
  }
  if (getForm().isFormVisible()) {
    pushChangedValues(e.getName(),true);
  }
}",0.9932405566600396
143393,"public boolean stopUIEditing(boolean looseFocus){
  for (  IWebFormController relatedController : relatedForms.keySet()) {
    if (!relatedController.stopUIEditing(looseFocus))     return false;
  }
  return true;
}","public boolean stopUIEditing(boolean looseFocus){
  for (  IWebFormController relatedController : visibleChildForms.keySet()) {
    if (!relatedController.stopUIEditing(looseFocus))     return false;
  }
  return true;
}",0.960919540229885
143394,"public void destroy(){
  if (record != null) {
    setRecord(null,false);
  }
  if (formController != null && formController.getFormScope() != null) {
    formController.getFormScope().getModificationSubject().removeModificationListener(this);
  }
  if (formController != null && formController.getApplication() != null && formController.getApplication().getScriptEngine() != null) {
    IExecutingEnviroment er=formController.getApplication().getScriptEngine();
    if (er.getScopesScope() != null) {
      er.getScopesScope().getModificationSubject().removeModificationListener(this);
    }
  }
  dataProviderToLinkedComponentProperty.clear();
  allComponentPropertiesLinkedToData.clear();
  findModeAwareProperties.clear();
  parentRelatedForms.clear();
  relatedForms.clear();
  uninitializedRelatedForms.clear();
}","public void destroy(){
  if (record != null) {
    setRecord(null,false);
  }
  if (formController != null && formController.getFormScope() != null) {
    formController.getFormScope().getModificationSubject().removeModificationListener(this);
  }
  if (formController != null && formController.getApplication() != null && formController.getApplication().getScriptEngine() != null) {
    IExecutingEnviroment er=formController.getApplication().getScriptEngine();
    if (er.getScopesScope() != null) {
      er.getScopesScope().getModificationSubject().removeModificationListener(this);
    }
  }
  dataProviderToLinkedComponentProperty.clear();
  allComponentPropertiesLinkedToData.clear();
  findModeAwareProperties.clear();
  parentRelatedForms.clear();
  visibleChildForms.clear();
  uninitializedVisibleChildForms.clear();
}",0.9793689320388348
143395,"public void updateRelatedVisibleForms(List<Pair<String,String>> oldForms,List<Pair<String,String>> newForms){
  if (oldForms != null) {
    for (    Pair<String,String> oldForm : oldForms) {
      if (!newForms.contains(oldForm)) {
        IWebFormController formController=getApplication().getFormManager().getForm(oldForm.getLeft());
        List<Runnable> invokeLaterRunnables=new ArrayList<Runnable>();
        formController.notifyVisible(false,invokeLaterRunnables);
        Utils.invokeLater(getApplication(),invokeLaterRunnables);
      }
    }
  }
  if (newForms != null) {
    for (    Pair<String,String> newVisibleForm : newForms) {
      if (!oldForms.contains(newVisibleForm)) {
        IWebFormController newFormController=getApplication().getFormManager().getForm(newVisibleForm.getLeft());
        addRelatedForm(newFormController,newVisibleForm.getRight(),true);
        if (newVisibleForm.getRight() != null) {
          newFormController.loadRecords(record != null ? record.getRelatedFoundSet(newVisibleForm.getRight(),((BasicFormController)newFormController).getDefaultSortColumns()) : null);
        }
        updateParentContainer(newFormController,newVisibleForm.getRight(),formController.isFormVisible());
        List<Runnable> invokeLaterRunnables=new ArrayList<Runnable>();
        newFormController.notifyVisible(formController.isFormVisible(),invokeLaterRunnables);
        Utils.invokeLater(getApplication(),invokeLaterRunnables);
      }
 else {
        oldForms.remove(newVisibleForm);
      }
    }
  }
  if (oldForms != null) {
    for (    Pair<String,String> oldForm : oldForms) {
      if (Utils.equalObjects(uninitializedRelatedForms.get(oldForm.getLeft()),oldForm.getRight())) {
        uninitializedRelatedForms.remove(oldForm.getLeft());
      }
      for (      IWebFormController relatedController : relatedForms.keySet()) {
        if (Utils.equalObjects(relatedController.getName(),oldForm.getLeft()) && Utils.equalObjects(oldForm.getRight(),relatedForms.get(relatedController))) {
          relatedForms.remove(relatedController);
          break;
        }
      }
    }
  }
}","public void updateRelatedVisibleForms(List<Pair<String,String>> oldForms,List<Pair<String,String>> newForms){
  if (oldForms != null) {
    for (    Pair<String,String> oldForm : oldForms) {
      if (!newForms.contains(oldForm)) {
        IWebFormController fc=getApplication().getFormManager().getForm(oldForm.getLeft());
        List<Runnable> invokeLaterRunnables=new ArrayList<Runnable>();
        fc.notifyVisible(false,invokeLaterRunnables);
        Utils.invokeLater(getApplication(),invokeLaterRunnables);
        removeVisibleChildForm(fc,true);
      }
    }
  }
  if (newForms != null) {
    for (    Pair<String,String> newVisibleForm : newForms) {
      if (!oldForms.contains(newVisibleForm)) {
        IWebFormController newFormController=getApplication().getFormManager().getForm(newVisibleForm.getLeft());
        addVisibleChildForm(newFormController,newVisibleForm.getRight(),true);
        if (newVisibleForm.getRight() != null) {
          newFormController.loadRecords(record != null ? record.getRelatedFoundSet(newVisibleForm.getRight(),((BasicFormController)newFormController).getDefaultSortColumns()) : null);
        }
        updateParentContainer(newFormController,newVisibleForm.getRight(),formController.isFormVisible());
        List<Runnable> invokeLaterRunnables=new ArrayList<Runnable>();
        newFormController.notifyVisible(formController.isFormVisible(),invokeLaterRunnables);
        Utils.invokeLater(getApplication(),invokeLaterRunnables);
      }
 else {
        oldForms.remove(newVisibleForm);
      }
    }
  }
}",0.8175895765472313
143396,"public Map<IWebFormController,String> getRelatedForms(){
  return relatedForms;
}","public Map<IWebFormController,String> getRelatedForms(){
  return visibleChildForms;
}",0.9221556886227544
143397,"@Override public void notifyVisible(boolean b,List<Runnable> invokeLaterRunnables){
  for (  IWebFormController relatedController : relatedForms.keySet()) {
    updateParentContainer(relatedController,relatedForms.get(relatedController),b);
    relatedController.notifyVisible(b,invokeLaterRunnables);
  }
}","public void notifyVisible(boolean b,List<Runnable> invokeLaterRunnables,Set<IWebFormController> childFormsThatWereAlreadyNotified){
  for (  IWebFormController relatedController : visibleChildForms.keySet()) {
    updateParentContainer(relatedController,visibleChildForms.get(relatedController),b);
    if (!childFormsThatWereAlreadyNotified.contains(relatedController))     relatedController.notifyVisible(b,invokeLaterRunnables);
  }
}",0.7661290322580645
143398,"void notifyVisible(boolean b,List<Runnable> invokeLaterRunnables);","void notifyVisible(boolean b,List<Runnable> invokeLaterRunnables,Set<IWebFormController> childFormsThatWereNotified);",0.7213114754098361
143399,"@Override public Object executeMethod(String methodName,JSONObject args) throws Exception {
switch (methodName) {
case ""String_Node_Str"":
{
      String formName=args.getString(""String_Node_Str"");
      IWebFormUI form=(IWebFormUI)NGClientWindow.getCurrentWindow().getForm(formName);
      if (form == null) {
        log.warn(""String_Node_Str"" + formName + ""String_Node_Str"");
      }
 else {
        dataPush(args);
        WebFormComponent webComponent=form.getWebComponent(args.getString(""String_Node_Str""));
        form.getDataAdapterList().pushChanges(webComponent,args.getString(""String_Node_Str""));
      }
      break;
    }
case ""String_Node_Str"":
{
    IWebFormUI form=getApplication().getFormManager().getFormAndSetCurrentWindow(args.optString(""String_Node_Str"")).getFormUI();
    form.getDataAdapterList().startEdit(form.getWebComponent(args.optString(""String_Node_Str"")),args.optString(""String_Node_Str""));
    break;
  }
case ""String_Node_Str"":
{
  try {
    String formName=args.optString(""String_Node_Str"",null);
    if (formName == null) {
      formName=getApplication().getFormManager().getCurrentForm().getName();
    }
 else {
      formName=SecuritySupport.decrypt(Settings.getInstance(),formName);
    }
    IWebFormUI form=getApplication().getFormManager().getFormAndSetCurrentWindow(formName).getFormUI();
    form.getDataAdapterList().executeInlineScript(args.optString(""String_Node_Str""),args.optJSONObject(""String_Node_Str""),args.optJSONArray(""String_Node_Str""));
  }
 catch (  Exception ex) {
    Debug.error(""String_Node_Str"",ex);
  }
  break;
}
case ""String_Node_Str"":
{
IWebFormController parentForm=null;
IWebFormController controller=null;
String formName=args.optString(""String_Node_Str"");
if (args.has(""String_Node_Str"") && !args.isNull(""String_Node_Str"")) {
  parentForm=getApplication().getFormManager().getFormAndSetCurrentWindow(args.optString(""String_Node_Str""));
  controller=getApplication().getFormManager().getForm(formName);
}
 else {
  controller=getApplication().getFormManager().getFormAndSetCurrentWindow(formName);
}
if (controller == null) return Boolean.valueOf(true);
List<Runnable> invokeLaterRunnables=new ArrayList<Runnable>();
boolean isVisible=args.getBoolean(""String_Node_Str"");
WebFormComponent containerComponent=null;
if (parentForm != null) {
  containerComponent=parentForm.getFormUI().getWebComponent(args.getString(""String_Node_Str""));
  if (isVisible && containerComponent != null) {
    containerComponent.updateVisibleForm(controller.getFormUI(),isVisible,args.optInt(""String_Node_Str""));
  }
}
boolean ok=controller.notifyVisible(isVisible,invokeLaterRunnables);
if (ok && parentForm != null) {
  if (!isVisible && containerComponent != null) {
    containerComponent.updateVisibleForm(controller.getFormUI(),isVisible,args.optInt(""String_Node_Str""));
  }
  if (isVisible && args.has(""String_Node_Str"") && !args.isNull(""String_Node_Str"")) {
    String relation=args.getString(""String_Node_Str"");
    FoundSet parentFs=parentForm.getFormModel();
    IRecordInternal selectedRecord=(IRecordInternal)parentFs.getSelectedRecord();
    if (selectedRecord != null) {
      controller.loadRecords(selectedRecord.getRelatedFoundSet(relation));
    }
 else {
      controller.loadRecords(parentFs.getPrototypeState().getRelatedFoundSet(relation));
    }
    parentForm.getFormUI().getDataAdapterList().addRelatedForm(controller,relation,true);
  }
}
Utils.invokeLater(getApplication(),invokeLaterRunnables);
Form form=getApplication().getFormManager().getPossibleForm(formName);
if (form != null) NGClientWindow.getCurrentWindow().touchForm(getApplication().getFlattenedSolution().getFlattenedForm(form),formName,true);
return Boolean.valueOf(ok);
}
case ""String_Node_Str"":
{
NGClientWindow.getCurrentWindow().formCreated(args.optString(""String_Node_Str""));
break;
}
case ""String_Node_Str"":
{
String formName=args.optString(""String_Node_Str"");
IWebFormController form=getApplication().getFormManager().getForm(formName);
if (form != null) {
String windowName=form.getFormUI().getParentWindowName();
NGRuntimeWindow window=null;
if (windowName != null && (window=getApplication().getRuntimeWindowManager().getWindow(windowName)) != null) {
History history=window.getHistory();
if (history.getFormIndex(formName) != -1) {
  history.go(history.getFormIndex(formName) - history.getIndex());
}
 else {
  Debug.log(""String_Node_Str"" + formName + ""String_Node_Str""+ windowName);
}
}
 else {
Debug.error(""String_Node_Str"" + formName);
}
}
 else {
Debug.error(""String_Node_Str"" + formName + ""String_Node_Str"");
}
break;
}
default :
{
return super.executeMethod(methodName,args);
}
}
return null;
}","@Override public Object executeMethod(String methodName,JSONObject args) throws Exception {
switch (methodName) {
case ""String_Node_Str"":
{
      String formName=args.getString(""String_Node_Str"");
      IWebFormUI form=(IWebFormUI)NGClientWindow.getCurrentWindow().getForm(formName);
      if (form == null) {
        log.warn(""String_Node_Str"" + formName + ""String_Node_Str"");
      }
 else {
        dataPush(args);
        WebFormComponent webComponent=form.getWebComponent(args.getString(""String_Node_Str""));
        form.getDataAdapterList().pushChanges(webComponent,args.getString(""String_Node_Str""));
      }
      break;
    }
case ""String_Node_Str"":
{
    IWebFormUI form=getApplication().getFormManager().getFormAndSetCurrentWindow(args.optString(""String_Node_Str"")).getFormUI();
    form.getDataAdapterList().startEdit(form.getWebComponent(args.optString(""String_Node_Str"")),args.optString(""String_Node_Str""));
    break;
  }
case ""String_Node_Str"":
{
  try {
    String formName=args.optString(""String_Node_Str"",null);
    if (formName == null) {
      formName=getApplication().getFormManager().getCurrentForm().getName();
    }
 else {
      formName=SecuritySupport.decrypt(Settings.getInstance(),formName);
    }
    IWebFormUI form=getApplication().getFormManager().getFormAndSetCurrentWindow(formName).getFormUI();
    form.getDataAdapterList().executeInlineScript(args.optString(""String_Node_Str""),args.optJSONObject(""String_Node_Str""),args.optJSONArray(""String_Node_Str""));
  }
 catch (  Exception ex) {
    Debug.error(""String_Node_Str"",ex);
  }
  break;
}
case ""String_Node_Str"":
{
IWebFormController parentForm=null;
IWebFormController controller=null;
String formName=args.optString(""String_Node_Str"");
if (args.has(""String_Node_Str"") && !args.isNull(""String_Node_Str"")) {
  parentForm=getApplication().getFormManager().getFormAndSetCurrentWindow(args.optString(""String_Node_Str""));
  controller=getApplication().getFormManager().getForm(formName);
}
 else {
  controller=getApplication().getFormManager().getFormAndSetCurrentWindow(formName);
}
if (controller == null) return Boolean.valueOf(true);
List<Runnable> invokeLaterRunnables=new ArrayList<Runnable>();
boolean isVisible=args.getBoolean(""String_Node_Str"");
WebFormComponent containerComponent=null;
if (parentForm != null) {
  containerComponent=parentForm.getFormUI().getWebComponent(args.getString(""String_Node_Str""));
  if (isVisible && containerComponent != null) {
    containerComponent.updateVisibleForm(controller.getFormUI(),isVisible,args.optInt(""String_Node_Str""));
  }
}
boolean ok=controller.notifyVisible(isVisible,invokeLaterRunnables);
if (ok && parentForm != null) {
  if (!isVisible && containerComponent != null) {
    containerComponent.updateVisibleForm(controller.getFormUI(),isVisible,args.optInt(""String_Node_Str""));
  }
  String relation=null;
  if (isVisible && args.has(""String_Node_Str"") && !args.isNull(""String_Node_Str"")) {
    relation=args.getString(""String_Node_Str"");
    FoundSet parentFs=parentForm.getFormModel();
    IRecordInternal selectedRecord=(IRecordInternal)parentFs.getSelectedRecord();
    if (selectedRecord != null) {
      controller.loadRecords(selectedRecord.getRelatedFoundSet(relation));
    }
 else {
      controller.loadRecords(parentFs.getPrototypeState().getRelatedFoundSet(relation));
    }
  }
  if (isVisible) {
    parentForm.getFormUI().getDataAdapterList().addVisibleChildForm(controller,relation,true);
  }
 else {
    parentForm.getFormUI().getDataAdapterList().removeVisibleChildForm(controller,true);
  }
}
Utils.invokeLater(getApplication(),invokeLaterRunnables);
Form form=getApplication().getFormManager().getPossibleForm(formName);
if (form != null) NGClientWindow.getCurrentWindow().touchForm(getApplication().getFlattenedSolution().getFlattenedForm(form),formName,true);
return Boolean.valueOf(ok);
}
case ""String_Node_Str"":
{
NGClientWindow.getCurrentWindow().formCreated(args.optString(""String_Node_Str""));
break;
}
case ""String_Node_Str"":
{
String formName=args.optString(""String_Node_Str"");
IWebFormController form=getApplication().getFormManager().getForm(formName);
if (form != null) {
String windowName=form.getFormUI().getParentWindowName();
NGRuntimeWindow window=null;
if (windowName != null && (window=getApplication().getRuntimeWindowManager().getWindow(windowName)) != null) {
History history=window.getHistory();
if (history.getFormIndex(formName) != -1) {
  history.go(history.getFormIndex(formName) - history.getIndex());
}
 else {
  Debug.log(""String_Node_Str"" + formName + ""String_Node_Str""+ windowName);
}
}
 else {
Debug.error(""String_Node_Str"" + formName);
}
}
 else {
Debug.error(""String_Node_Str"" + formName + ""String_Node_Str"");
}
break;
}
default :
{
return super.executeMethod(methodName,args);
}
}
return null;
}",0.9817989417989418
143400,"/** 
 * @param b
 */
public boolean notifyVisible(boolean visible,List<Runnable> invokeLaterRunnables){
  boolean retValue=true;
  for (  IWebFormUI webUI : visibleForms.keySet()) {
    retValue=retValue && webUI.getController().notifyVisible(visible,invokeLaterRunnables);
  }
  if (!visible && retValue) {
    visibleForms.clear();
  }
  return retValue;
}","public boolean notifyVisible(boolean visible,List<Runnable> invokeLaterRunnables,Set<IWebFormController> childFormsThatWereNotified){
  boolean retValue=true;
  for (  IWebFormUI webUI : visibleForms.keySet()) {
    IWebFormController fc=webUI.getController();
    childFormsThatWereNotified.add(fc);
    retValue=retValue && fc.notifyVisible(visible,invokeLaterRunnables);
  }
  if (!visible && retValue) {
    visibleForms.clear();
  }
  return retValue;
}",0.7745098039215687
143401,"@Override public boolean notifyVisible(boolean visible,List<Runnable> invokeLaterRunnables){
  boolean retValue=true;
  for (  WebComponent component : components.values()) {
    retValue=retValue && ((WebFormComponent)component).notifyVisible(visible,invokeLaterRunnables);
  }
  if (retValue)   setVisible(visible);
  dataAdapterList.notifyVisible(visible,invokeLaterRunnables);
  return retValue;
}","@Override public boolean notifyVisible(boolean visible,List<Runnable> invokeLaterRunnables){
  boolean retValue=true;
  Set<IWebFormController> childFormsThatWereNotified=new HashSet<>();
  for (  WebComponent component : components.values()) {
    retValue=retValue && ((WebFormComponent)component).notifyVisible(visible,invokeLaterRunnables,childFormsThatWereNotified);
  }
  if (retValue)   setVisible(visible);
  dataAdapterList.notifyVisible(visible,invokeLaterRunnables,childFormsThatWereNotified);
  return retValue;
}",0.8660907127429806
143402,"@Override public void touchForm(Form form,String realInstanceName,boolean async){
  if (form == null)   return;
  String formName=realInstanceName == null ? form.getName() : realInstanceName;
  String formUrl=getRealFormURLAndSeeIfItIsACopy(form,formName,false).getLeft();
  boolean nowSentToClient=getEndpoint().addFormIfAbsent(formName,formUrl);
  if (nowSentToClient) {
    updateController(form,formName,!async,new FormHTMLAndJSGenerator(getSession().getClient(),form,formName));
    Debug.debug(""String_Node_Str"" + async + ""String_Node_Str""+ form.getName());
  }
 else {
    formUrl=getEndpoint().getFormUrl(formName);
    Debug.debug(""String_Node_Str"" + async + ""String_Node_Str""+ form.getName());
  }
  if (!async) {
    if (!getEndpoint().isFormCreated(formName)) {
      if (!nowSentToClient) {
        websocketSession.getClientService(NGRuntimeWindowManager.WINDOW_SERVICE).executeAsyncServiceCall(""String_Node_Str"",new Object[]{formName});
      }
      Debug.debug(""String_Node_Str"" + async + ""String_Node_Str""+ form.getName());
      try {
        sendChanges();
      }
 catch (      IOException e) {
        Debug.error(e);
      }
      try {
        websocketSession.getEventDispatcher().suspend(formUrl,IWebsocketEndpoint.EVENT_LEVEL_SYNC_API_CALL,EventDispatcher.CONFIGURED_TIMEOUT);
      }
 catch (      CancellationException e) {
        throw e;
      }
catch (      TimeoutException e) {
        throw new RuntimeException(""String_Node_Str"" + form.getName() + ""String_Node_Str"",e);
      }
    }
  }
}","@Override public void touchForm(Form form,String realInstanceName,boolean async){
  if (form == null)   return;
  String formName=realInstanceName == null ? form.getName() : realInstanceName;
  String formUrl=getRealFormURLAndSeeIfItIsACopy(form,formName,false).getLeft();
  boolean nowSentToClient=getEndpoint().addFormIfAbsent(formName,formUrl);
  if (nowSentToClient) {
    IWebFormUI formUI=(IWebFormUI)getForm(form.getName());
    if (formUI.getParentContainer() == null) {
      String currentWindowName=getCurrentWindow().getName();
      if (currentWindowName == null) {
        currentWindowName=websocketSession.getClient().getRuntimeWindowManager().getMainApplicationWindow().getName();
      }
      formUI.setParentWindowName(currentWindowName);
    }
    updateController(form,formName,!async,new FormHTMLAndJSGenerator(getSession().getClient(),form,formName));
    Debug.debug(""String_Node_Str"" + async + ""String_Node_Str""+ form.getName());
  }
 else {
    formUrl=getEndpoint().getFormUrl(formName);
    Debug.debug(""String_Node_Str"" + async + ""String_Node_Str""+ form.getName());
  }
  if (!async) {
    if (!getEndpoint().isFormCreated(formName)) {
      if (!nowSentToClient) {
        websocketSession.getClientService(NGRuntimeWindowManager.WINDOW_SERVICE).executeAsyncServiceCall(""String_Node_Str"",new Object[]{formName});
      }
      Debug.debug(""String_Node_Str"" + async + ""String_Node_Str""+ form.getName());
      try {
        sendChanges();
      }
 catch (      IOException e) {
        Debug.error(e);
      }
      try {
        websocketSession.getEventDispatcher().suspend(formUrl,IWebsocketEndpoint.EVENT_LEVEL_SYNC_API_CALL,EventDispatcher.CONFIGURED_TIMEOUT);
      }
 catch (      CancellationException e) {
        throw e;
      }
catch (      TimeoutException e) {
        throw new RuntimeException(""String_Node_Str"" + form.getName() + ""String_Node_Str"",e);
      }
    }
  }
}",0.8861788617886179
143403,"public void acceptVisitor(IVisitor visitor){
  keys=AbstractBaseQuery.acceptVisitor(keys,visitor);
  values=AbstractBaseQuery.acceptVisitor(values,visitor);
  if (visitor instanceof PlaceHolderSetter) {
    PlaceHolderSetter phs=(PlaceHolderSetter)visitor;
    Placeholder ph=null;
    Object phValue=null;
    if (values instanceof Placeholder) {
      ph=(Placeholder)values;
      phValue=phs.getValue();
    }
 else     if (values instanceof Object[] && ((Object[])values).length == 1) {
      Object values0=((Object[])values)[0];
      if (values0 instanceof Object[] && ((Object[])values0).length == 1 && ((Object[])values0)[0] instanceof QueryColumnValue) {
        QueryColumnValue colValue=(QueryColumnValue)((Object[])values0)[0];
        if (colValue.getValue() instanceof Placeholder && phs.getValue() instanceof Object[]) {
          ph=(Placeholder)colValue.getValue();
          phValue=new Object[][]{(Object[])phs.getValue()};
        }
      }
    }
    if (ph != null && ph.getKey().equals(phs.getKey())) {
      ph.setValue(validateValues(keys,phValue));
    }
  }
}","public void acceptVisitor(IVisitor visitor){
  keys=AbstractBaseQuery.acceptVisitor(keys,visitor);
  values=AbstractBaseQuery.acceptVisitor(values,visitor);
  if (values instanceof Placeholder && visitor instanceof PlaceHolderSetter) {
    PlaceHolderSetter phs=(PlaceHolderSetter)visitor;
    Placeholder ph=(Placeholder)values;
    if (ph.getKey().equals(phs.getKey())) {
      ph.setValue(validateValues(keys,phs.getValue()));
    }
  }
}",0.2735602094240837
143404,"@Override public void dataProviderOrRecordChanged(final IRecordInternal record,final String dataProvider,final boolean isFormDP,final boolean isGlobalDP,boolean fireChangeEvent){
  IDataProviderLookup dpLookup=new FormAndTableDataProviderLookup(servoyDataConverterContext.getApplication().getFlattenedSolution(),servoyDataConverterContext.getForm().getForm(),record != null ? record.getParentFoundSet().getTable() : null);
  Collection<PropertyDescription> properties=formElement.getWebComponentSpec().getProperties(TypesRegistry.getType(""String_Node_Str""));
  for (  PropertyDescription formatPd : properties) {
    Object formatConfig=formatPd.getConfig();
    if (formatConfig instanceof String[] && Arrays.asList((String[])formatConfig).indexOf(dpPD.getName()) != -1) {
      INGApplication application=servoyDataConverterContext.getApplication();
      String format=(String)formElement.getPropertyValue(formatPd.getName());
      if (format != null) {
        fieldFormat=ComponentFormat.getComponentFormat(format,dataProviderID,dpLookup,application);
        break;
      }
    }
  }
  if (fieldFormat != null) {
    typeOfDP=NGUtils.getDataProviderPropertyDescription(fieldFormat.uiType,getDataProviderConfig().hasParseHtml());
  }
 else {
    typeOfDP=NGUtils.getDataProviderPropertyDescription(dataProviderID,servoyDataConverterContext.getApplication().getFlattenedSolution(),servoyDataConverterContext.getForm().getForm(),record != null ? record.getParentFoundSet().getTable() : null,getDataProviderConfig().hasParseHtml());
  }
  if (globalRelationName != null) {
    try {
      IFoundSetInternal newRelatedFoundset=servoyDataConverterContext.getApplication().getFoundSetManager().getGlobalRelatedFoundSet(globalRelationName);
      if (newRelatedFoundset != globalRelatedFoundset) {
        if (globalRelatedFoundset != null) {
          globalRelatedFoundset.removeFoundSetEventListener(globalRelatedFoundsetListener);
        }
        globalRelatedFoundset=newRelatedFoundset;
        globalRelatedFoundset.addFoundSetEventListener(globalRelatedFoundsetListener);
      }
    }
 catch (    Exception ex) {
      Debug.error(ex);
    }
  }
  if (relatedFoundsetSelectionListener != null) {
    try {
      IFoundSetInternal newRelatedFoundset=record.getRelatedFoundSet(relationName);
      if (newRelatedFoundset != relatedFoundset) {
        if (relatedFoundset != null) {
          ((ISwingFoundSet)relatedFoundset).getSelectionModel().removeListSelectionListener(relatedFoundsetSelectionListener);
        }
        relatedFoundset=newRelatedFoundset;
        ((ISwingFoundSet)relatedFoundset).getSelectionModel().addListSelectionListener(relatedFoundsetSelectionListener);
      }
    }
 catch (    Exception ex) {
      Debug.error(ex);
    }
  }
  String dpID=dataProviderID;
  if (dpLookup != null) {
    IDataProvider dp;
    try {
      dp=dpLookup.getDataProvider(dataProviderID);
      if (dp != null) {
        dpID=dp.getDataProviderID();
      }
    }
 catch (    RepositoryException e) {
      Debug.error(e);
    }
  }
  Object v=com.servoy.j2db.dataprocessing.DataAdapterList.getValueObject(record,servoyDataConverterContext.getForm().getFormScope(),dpID);
  if (v == Scriptable.NOT_FOUND)   v=null;
  if (fieldFormat != null && !findMode) {
    v=ComponentFormat.applyUIConverterToObject(v,dataProviderID,servoyDataConverterContext.getApplication().getFoundSetManager(),fieldFormat);
  }
  v=replaceTagsIfNeeded(v);
  if (v instanceof UUID)   v=v.toString();
  boolean changed=((v != value) && (v == null || !v.equals(value)));
  value=v;
  if (changed) {
    jsonValue=null;
  }
  if (fireChangeEvent && changed) {
    changeMonitor.valueChanged();
  }
}","@Override public void dataProviderOrRecordChanged(final IRecordInternal record,final String dataProvider,final boolean isFormDP,final boolean isGlobalDP,boolean fireChangeEvent){
  IDataProviderLookup dpLookup=new FormAndTableDataProviderLookup(servoyDataConverterContext.getApplication().getFlattenedSolution(),servoyDataConverterContext.getForm().getForm(),record != null ? record.getParentFoundSet().getTable() : null);
  Collection<PropertyDescription> properties=formElement.getWebComponentSpec().getProperties(TypesRegistry.getType(""String_Node_Str""));
  for (  PropertyDescription formatPd : properties) {
    Object formatConfig=formatPd.getConfig();
    if (formatConfig instanceof String[] && Arrays.asList((String[])formatConfig).indexOf(dpPD.getName()) != -1) {
      INGApplication application=servoyDataConverterContext.getApplication();
      String format=(String)formElement.getPropertyValue(formatPd.getName());
      if (format != null) {
        fieldFormat=ComponentFormat.getComponentFormat(format,dataProviderID,dpLookup,application);
        break;
      }
    }
  }
  if (fieldFormat != null) {
    typeOfDP=NGUtils.getDataProviderPropertyDescription(fieldFormat.uiType,getDataProviderConfig().hasParseHtml());
  }
 else {
    typeOfDP=NGUtils.getDataProviderPropertyDescription(dataProviderID,servoyDataConverterContext.getApplication().getFlattenedSolution(),servoyDataConverterContext.getForm().getForm(),record != null ? record.getParentFoundSet().getTable() : null,getDataProviderConfig().hasParseHtml());
  }
  if (globalRelationName != null) {
    try {
      IFoundSetInternal newRelatedFoundset=servoyDataConverterContext.getApplication().getFoundSetManager().getGlobalRelatedFoundSet(globalRelationName);
      if (newRelatedFoundset != globalRelatedFoundset) {
        if (globalRelatedFoundset != null) {
          globalRelatedFoundset.removeFoundSetEventListener(globalRelatedFoundsetListener);
        }
        globalRelatedFoundset=newRelatedFoundset;
        globalRelatedFoundset.addFoundSetEventListener(globalRelatedFoundsetListener);
      }
    }
 catch (    Exception ex) {
      Debug.error(ex);
    }
  }
  if (relatedFoundsetSelectionListener != null) {
    try {
      IFoundSetInternal newRelatedFoundset=record != null ? record.getRelatedFoundSet(relationName) : null;
      if (newRelatedFoundset != relatedFoundset) {
        if (relatedFoundset != null) {
          ((ISwingFoundSet)relatedFoundset).getSelectionModel().removeListSelectionListener(relatedFoundsetSelectionListener);
        }
        relatedFoundset=newRelatedFoundset;
        ((ISwingFoundSet)relatedFoundset).getSelectionModel().addListSelectionListener(relatedFoundsetSelectionListener);
      }
    }
 catch (    Exception ex) {
      Debug.error(ex);
    }
  }
  String dpID=dataProviderID;
  if (dpLookup != null) {
    IDataProvider dp;
    try {
      dp=dpLookup.getDataProvider(dataProviderID);
      if (dp != null) {
        dpID=dp.getDataProviderID();
      }
    }
 catch (    RepositoryException e) {
      Debug.error(e);
    }
  }
  Object v=com.servoy.j2db.dataprocessing.DataAdapterList.getValueObject(record,servoyDataConverterContext.getForm().getFormScope(),dpID);
  if (v == Scriptable.NOT_FOUND)   v=null;
  if (fieldFormat != null && !findMode) {
    v=ComponentFormat.applyUIConverterToObject(v,dataProviderID,servoyDataConverterContext.getApplication().getFoundSetManager(),fieldFormat);
  }
  v=replaceTagsIfNeeded(v);
  if (v instanceof UUID)   v=v.toString();
  boolean changed=((v != value) && (v == null || !v.equals(value)));
  value=v;
  if (changed) {
    jsonValue=null;
  }
  if (fireChangeEvent && changed) {
    changeMonitor.valueChanged();
  }
}",0.9967576330721428
143405,"public RhinoNativeArrayWrapperList(List<Object> rhinoBasedList,PropertyDescription elementTypeDefinition,List<SabloT> previousComponentValue,BaseWebObject componentOrService,Scriptable rhinoScriptable){
  super(rhinoBasedList);
  this.previousValues=new HashMap<Integer,SabloT>();
  if (previousComponentValue != null) {
    for (int i=previousComponentValue.size(); i >= 0; i++)     this.previousValues.put(Integer.valueOf(i),previousComponentValue.get(i));
  }
  this.componentOrService=componentOrService;
  this.elementTypeDefinition=elementTypeDefinition;
  this.rhinoScriptable=rhinoScriptable;
}","public RhinoNativeArrayWrapperList(List<Object> rhinoBasedList,PropertyDescription elementTypeDefinition,List<SabloT> previousComponentValue,BaseWebObject componentOrService,Scriptable rhinoScriptable){
  super(rhinoBasedList);
  this.previousValues=new HashMap<Integer,SabloT>();
  if (previousComponentValue != null) {
    for (int i=previousComponentValue.size() - 1; i >= 0; i--)     this.previousValues.put(Integer.valueOf(i),previousComponentValue.get(i));
  }
  this.componentOrService=componentOrService;
  this.elementTypeDefinition=elementTypeDefinition;
  this.rhinoScriptable=rhinoScriptable;
}",0.9933774834437086
143406,"@Override public Object toSabloComponentValue(Object rhinoValue,Object previousComponentValue,PropertyDescription pd,BaseWebObject componentOrService){
  WebFormComponent wfc=(WebFormComponent)componentOrService;
  return getSabloValue(rhinoValue,pd,wfc.getFormElement(),wfc.getDataConverterContext().getApplication());
}","@Override public Object toSabloComponentValue(Object rhinoValue,Object previousComponentValue,PropertyDescription pd,BaseWebObject componentOrService){
  return getSabloValue(rhinoValue,pd,(WebFormComponent)componentOrService);
}",0.7054545454545454
143407,"private Object getSabloValue(Object formElementValue,PropertyDescription pd,FormElement formElement,INGApplication application){
  if (formElementValue == NGConversions.IDesignToFormElement.TYPE_DEFAULT_VALUE_MARKER || formElementValue == DESIGN_DEFAULT) {
    formElementValue=null;
  }
  if (formElementValue instanceof String || formElementValue == null) {
    String dataproviderId=null;
    if (pd.getConfig() instanceof String[]) {
      for (      String element : (String[])pd.getConfig()) {
        PropertyDescription forProperty=formElement.getWebComponentSpec().getProperty(element);
        if (forProperty != null) {
          if (forProperty.getType() instanceof DataproviderPropertyType) {
            dataproviderId=(String)formElement.getPropertyValue(element);
            break;
          }
 else           if (forProperty.getType() instanceof ValueListPropertyType) {
            Object id=formElement.getPropertyValue(element);
            int valuelistID=Utils.getAsInteger(id);
            ValueList val=null;
            if (valuelistID > 0) {
              val=application.getFlattenedSolution().getValueList(valuelistID);
            }
 else {
              UUID uuid=Utils.getAsUUID(id,false);
              if (uuid != null)               val=(ValueList)application.getFlattenedSolution().searchPersist(uuid);
            }
            if (val != null) {
              int dpType=IColumnTypes.TEXT;
              IDataProvider dataProvider=null;
              ITable table;
              try {
                if (val.getRelationName() != null) {
                  Relation[] relations=application.getFlattenedSolution().getRelationSequence(val.getRelationName());
                  table=relations[relations.length - 1].getForeignTable();
                }
 else {
                  table=val.getTable();
                }
                if (table != null) {
                  String dp=null;
                  int showDataProviders=val.getShowDataProviders();
                  if (showDataProviders == 1) {
                    dp=val.getDataProviderID1();
                  }
 else                   if (showDataProviders == 2) {
                    dp=val.getDataProviderID2();
                  }
 else                   if (showDataProviders == 4) {
                    dp=val.getDataProviderID3();
                  }
                  if (dp != null) {
                    dataProvider=application.getFlattenedSolution().getDataProviderForTable((Table)table,dp);
                  }
                  if (dataProvider != null) {
                    dpType=dataProvider.getDataProviderType();
                  }
                  return ComponentFormat.getComponentFormat((String)formElementValue,dpType,application);
                }
              }
 catch (              Exception ex) {
                Debug.error(ex);
              }
            }
          }
        }
      }
    }
    ComponentFormat format=ComponentFormat.getComponentFormat((String)formElementValue,dataproviderId,application.getFlattenedSolution().getDataproviderLookup(application.getFoundSetManager(),formElement.getForm()),application);
    return format;
  }
  return formElementValue;
}","private Object getSabloValue(Object formElementValue,PropertyDescription pd,WebFormComponent component){
  FormElement formElement=component.getFormElement();
  IApplication application=component.getDataConverterContext().getApplication();
  if (formElementValue == NGConversions.IDesignToFormElement.TYPE_DEFAULT_VALUE_MARKER || formElementValue == DESIGN_DEFAULT) {
    formElementValue=null;
  }
  if (formElementValue instanceof String || formElementValue == null) {
    String dataproviderId=null;
    if (pd.getConfig() instanceof String[]) {
      for (      String element : (String[])pd.getConfig()) {
        PropertyDescription forProperty=formElement.getWebComponentSpec().getProperty(element);
        if (forProperty != null) {
          if (forProperty.getType() instanceof DataproviderPropertyType) {
            dataproviderId=(String)formElement.getPropertyValue(element);
            break;
          }
 else           if (forProperty.getType() instanceof ValueListPropertyType) {
            Object id=formElement.getPropertyValue(element);
            int valuelistID=Utils.getAsInteger(id);
            ValueList val=null;
            if (valuelistID > 0) {
              val=application.getFlattenedSolution().getValueList(valuelistID);
            }
 else {
              UUID uuid=Utils.getAsUUID(id,false);
              if (uuid != null)               val=(ValueList)application.getFlattenedSolution().searchPersist(uuid);
            }
            if (val != null) {
              int dpType=IColumnTypes.TEXT;
              IDataProvider dataProvider=null;
              ITable table;
              try {
                if (val.getRelationName() != null) {
                  Relation[] relations=application.getFlattenedSolution().getRelationSequence(val.getRelationName());
                  table=relations[relations.length - 1].getForeignTable();
                }
 else {
                  table=val.getTable();
                }
                if (table != null) {
                  String dp=null;
                  int showDataProviders=val.getShowDataProviders();
                  if (showDataProviders == 1) {
                    dp=val.getDataProviderID1();
                  }
 else                   if (showDataProviders == 2) {
                    dp=val.getDataProviderID2();
                  }
 else                   if (showDataProviders == 4) {
                    dp=val.getDataProviderID3();
                  }
                  if (dp != null) {
                    dataProvider=application.getFlattenedSolution().getDataProviderForTable((Table)table,dp);
                  }
                  if (dataProvider != null) {
                    dpType=dataProvider.getDataProviderType();
                  }
                  return ComponentFormat.getComponentFormat((String)formElementValue,dpType,application);
                }
              }
 catch (              Exception ex) {
                Debug.error(ex);
              }
            }
          }
        }
      }
    }
    ComponentFormat format=ComponentFormat.getComponentFormat((String)formElementValue,dataproviderId,application.getFlattenedSolution().getDataproviderLookup(application.getFoundSetManager(),component.getDataConverterContext().getForm().getForm()),application);
    return format;
  }
  return formElementValue;
}",0.9538039335264522
143408,"@Override public Object toSabloComponentDefaultValue(PropertyDescription pd,FormElement formElement,WebFormComponent component,DataAdapterList dataAdapterList){
  return getSabloValue(null,pd,formElement,dataAdapterList.getApplication());
}","@Override public Object toSabloComponentDefaultValue(PropertyDescription pd,FormElement formElement,WebFormComponent component,DataAdapterList dataAdapterList){
  return getSabloValue(null,pd,component);
}",0.8808988764044944
143409,"@Override public JSONWriter toTemplateJSONValue(JSONWriter writer,String key,Object formElementValue,PropertyDescription pd,DataConversion browserConversionMarkers,FlattenedSolution fs,FormElementContext formElementContext) throws JSONException {
  if (fs != null) {
    String url=getMediaUrl(formElementValue,fs,null);
    if (""String_Node_Str"".equals(url)) {
      int a=1 / 2;
    }
    if (url != null) {
      return toJSON(writer,key,new MediaWrapper(formElementValue,url),browserConversionMarkers,null);
    }
  }
  return writer;
}","@Override public JSONWriter toTemplateJSONValue(JSONWriter writer,String key,Object formElementValue,PropertyDescription pd,DataConversion browserConversionMarkers,FlattenedSolution fs,FormElementContext formElementContext) throws JSONException {
  if (fs != null) {
    String url=getMediaUrl(formElementValue,fs,null);
    if (url != null) {
      return toJSON(writer,key,new MediaWrapper(formElementValue,url),browserConversionMarkers,null);
    }
  }
  return writer;
}",0.9349112426035504
143410,"@Override public Object toSabloComponentValue(Object rhinoValue,Object previousComponentValue,PropertyDescription pd,BaseWebObject componentOrService){
  if (rhinoValue != null) {
    WebFormComponent wfc=(WebFormComponent)componentOrService;
    INGApplication application=wfc.getDataConverterContext().getApplication();
    IDataProviderLookup dataproviderLookup=wfc.getDataConverterContext().getSolution().getDataproviderLookup(application.getFoundSetManager(),wfc.getFormElement().getForm());
    String dataproviderId=(String)wfc.getFormElement().getPropertyValue((String)pd.getConfig());
    return ComponentFormat.getComponentFormat(rhinoValue.toString(),dataproviderId,dataproviderLookup,application);
  }
  return null;
}","@Override public Object toSabloComponentValue(Object rhinoValue,Object previousComponentValue,PropertyDescription pd,BaseWebObject componentOrService){
  WebFormComponent wfc=(WebFormComponent)componentOrService;
  return getSabloValue(rhinoValue,pd,wfc.getFormElement(),wfc.getDataConverterContext().getApplication());
}",0.4509990485252141
143411,"private Object getSabloValue(Object formElementValue,PropertyDescription pd,FormElement formElement,DataAdapterList dataAdapterList){
  if (formElementValue == NGConversions.IDesignToFormElement.TYPE_DEFAULT_VALUE_MARKER || formElementValue == DESIGN_DEFAULT) {
    formElementValue=null;
  }
  if (formElementValue instanceof String || formElementValue == null) {
    String dataproviderId=null;
    if (pd.getConfig() instanceof String[]) {
      for (      String element : (String[])pd.getConfig()) {
        PropertyDescription forProperty=formElement.getWebComponentSpec().getProperty(element);
        if (forProperty != null) {
          if (forProperty.getType() instanceof DataproviderPropertyType) {
            dataproviderId=(String)formElement.getPropertyValue(element);
            break;
          }
 else           if (forProperty.getType() instanceof ValueListPropertyType) {
            Object id=formElement.getPropertyValue(element);
            int valuelistID=Utils.getAsInteger(id);
            INGApplication application=dataAdapterList.getApplication();
            ValueList val=null;
            if (valuelistID > 0) {
              val=application.getFlattenedSolution().getValueList(valuelistID);
            }
 else {
              UUID uuid=Utils.getAsUUID(id,false);
              if (uuid != null)               val=(ValueList)application.getFlattenedSolution().searchPersist(uuid);
            }
            if (val != null) {
              int dpType=IColumnTypes.TEXT;
              IDataProvider dataProvider=null;
              ITable table;
              try {
                if (val.getRelationName() != null) {
                  Relation[] relations=application.getFlattenedSolution().getRelationSequence(val.getRelationName());
                  table=relations[relations.length - 1].getForeignTable();
                }
 else {
                  table=val.getTable();
                }
                if (table != null) {
                  String dp=null;
                  int showDataProviders=val.getShowDataProviders();
                  if (showDataProviders == 1) {
                    dp=val.getDataProviderID1();
                  }
 else                   if (showDataProviders == 2) {
                    dp=val.getDataProviderID2();
                  }
 else                   if (showDataProviders == 4) {
                    dp=val.getDataProviderID3();
                  }
                  if (dp != null) {
                    dataProvider=application.getFlattenedSolution().getDataProviderForTable((Table)table,dp);
                  }
                  if (dataProvider != null) {
                    dpType=dataProvider.getDataProviderType();
                  }
                  return ComponentFormat.getComponentFormat((String)formElementValue,dpType,application);
                }
              }
 catch (              Exception ex) {
                Debug.error(ex);
              }
            }
          }
        }
      }
    }
    ComponentFormat format=ComponentFormat.getComponentFormat((String)formElementValue,dataproviderId,dataAdapterList.getApplication().getFlattenedSolution().getDataproviderLookup(dataAdapterList.getApplication().getFoundSetManager(),dataAdapterList.getForm().getForm()),dataAdapterList.getApplication());
    return format;
  }
  return formElementValue;
}","private Object getSabloValue(Object formElementValue,PropertyDescription pd,FormElement formElement,INGApplication application){
  if (formElementValue == NGConversions.IDesignToFormElement.TYPE_DEFAULT_VALUE_MARKER || formElementValue == DESIGN_DEFAULT) {
    formElementValue=null;
  }
  if (formElementValue instanceof String || formElementValue == null) {
    String dataproviderId=null;
    if (pd.getConfig() instanceof String[]) {
      for (      String element : (String[])pd.getConfig()) {
        PropertyDescription forProperty=formElement.getWebComponentSpec().getProperty(element);
        if (forProperty != null) {
          if (forProperty.getType() instanceof DataproviderPropertyType) {
            dataproviderId=(String)formElement.getPropertyValue(element);
            break;
          }
 else           if (forProperty.getType() instanceof ValueListPropertyType) {
            Object id=formElement.getPropertyValue(element);
            int valuelistID=Utils.getAsInteger(id);
            ValueList val=null;
            if (valuelistID > 0) {
              val=application.getFlattenedSolution().getValueList(valuelistID);
            }
 else {
              UUID uuid=Utils.getAsUUID(id,false);
              if (uuid != null)               val=(ValueList)application.getFlattenedSolution().searchPersist(uuid);
            }
            if (val != null) {
              int dpType=IColumnTypes.TEXT;
              IDataProvider dataProvider=null;
              ITable table;
              try {
                if (val.getRelationName() != null) {
                  Relation[] relations=application.getFlattenedSolution().getRelationSequence(val.getRelationName());
                  table=relations[relations.length - 1].getForeignTable();
                }
 else {
                  table=val.getTable();
                }
                if (table != null) {
                  String dp=null;
                  int showDataProviders=val.getShowDataProviders();
                  if (showDataProviders == 1) {
                    dp=val.getDataProviderID1();
                  }
 else                   if (showDataProviders == 2) {
                    dp=val.getDataProviderID2();
                  }
 else                   if (showDataProviders == 4) {
                    dp=val.getDataProviderID3();
                  }
                  if (dp != null) {
                    dataProvider=application.getFlattenedSolution().getDataProviderForTable((Table)table,dp);
                  }
                  if (dataProvider != null) {
                    dpType=dataProvider.getDataProviderType();
                  }
                  return ComponentFormat.getComponentFormat((String)formElementValue,dpType,application);
                }
              }
 catch (              Exception ex) {
                Debug.error(ex);
              }
            }
          }
        }
      }
    }
    ComponentFormat format=ComponentFormat.getComponentFormat((String)formElementValue,dataproviderId,application.getFlattenedSolution().getDataproviderLookup(application.getFoundSetManager(),formElement.getForm()),application);
    return format;
  }
  return formElementValue;
}",0.940173542396103
143412,"@Override public Object toSabloComponentDefaultValue(PropertyDescription pd,FormElement formElement,WebFormComponent component,DataAdapterList dataAdapterList){
  return getSabloValue(null,pd,formElement,dataAdapterList);
}","@Override public Object toSabloComponentDefaultValue(PropertyDescription pd,FormElement formElement,WebFormComponent component,DataAdapterList dataAdapterList){
  return getSabloValue(null,pd,formElement,dataAdapterList.getApplication());
}",0.9632829373650108
143413,"public TypedData<Map<String,Object>> propertiesForTemplateJSON(){
  Map<String,Object> properties=new HashMap<>();
  WebComponentSpecification componentSpec=getWebComponentSpec();
  Map<String,PropertyDescription> propDescription=componentSpec.getProperties();
  for (  PropertyDescription pd : propDescription.values()) {
    Object val=getRawPropertyValue(pd.getName());
    if (val != null) {
      properties.put(pd.getName(),val);
    }
  }
  if (persistImpl == null || !persistImpl.isForm()) {
    Dimension dim=getDesignSize();
    if (dim != null)     properties.put(StaticContentSpecLoader.PROPERTY_SIZE.getPropertyName(),dim);
    Integer anchor=(Integer)getPropertyValue(StaticContentSpecLoader.PROPERTY_ANCHORS.getPropertyName());
    if (anchor != null) {
      properties.put(StaticContentSpecLoader.PROPERTY_ANCHORS.getPropertyName(),anchor);
    }
  }
  Object offsetY=getPropertyValue(""String_Node_Str"");
  if (offsetY != null)   properties.put(""String_Node_Str"",offsetY);
  Object partHeight=getPropertyValue(""String_Node_Str"");
  if (partHeight != null)   properties.put(""String_Node_Str"",partHeight);
  PropertyDescription propertyTypes=AggregatedPropertyType.newAggregatedProperty();
  for (  Entry<String,Object> p : properties.entrySet()) {
    PropertyDescription t=getWebComponentSpec().getProperty(p.getKey());
    if (t != null)     propertyTypes.putProperty(p.getKey(),t);
  }
  return new TypedData<>(properties,propertyTypes.hasChildProperties() ? propertyTypes : null);
}","public TypedData<Map<String,Object>> propertiesForTemplateJSON(){
  Map<String,Object> properties=new HashMap<>();
  WebComponentSpecification componentSpec=getWebComponentSpec();
  Map<String,PropertyDescription> propDescription=componentSpec.getProperties();
  for (  PropertyDescription pd : propDescription.values()) {
    Object val=getRawPropertyValue(pd.getName());
    if (val != null) {
      properties.put(pd.getName(),val);
    }
  }
  if (persistImpl == null || !persistImpl.isForm()) {
    Dimension dim=getDesignSize();
    if (dim != null)     properties.put(StaticContentSpecLoader.PROPERTY_SIZE.getPropertyName(),dim);
    Integer anchor=(Integer)getPropertyValue(StaticContentSpecLoader.PROPERTY_ANCHORS.getPropertyName());
    if (anchor != null) {
      properties.put(StaticContentSpecLoader.PROPERTY_ANCHORS.getPropertyName(),anchor);
    }
  }
  Object offsetY=getPropertyValue(""String_Node_Str"");
  if (offsetY != null)   properties.put(""String_Node_Str"",offsetY);
  Object partHeight=getPropertyValue(""String_Node_Str"");
  if (partHeight != null)   properties.put(""String_Node_Str"",partHeight);
  Object formview=getPropertyValue(""String_Node_Str"");
  if (formview != null)   properties.put(""String_Node_Str"",formview);
  PropertyDescription propertyTypes=AggregatedPropertyType.newAggregatedProperty();
  for (  Entry<String,Object> p : properties.entrySet()) {
    PropertyDescription t=getWebComponentSpec().getProperty(p.getKey());
    if (t != null)     propertyTypes.putProperty(p.getKey(),t);
  }
  return new TypedData<>(properties,propertyTypes.hasChildProperties() ? propertyTypes : null);
}",0.9600511345477788
143414,"private FormElement createBodyPortalFormElement(BodyPortal listViewPortal,FlattenedSolution fs,final boolean isInDesigner){
  Form form=listViewPortal.getForm();
  Part bodyPart=null;
  for (  Part prt : Utils.iterate(form.getParts())) {
    if (prt.getPartType() == Part.BODY) {
      bodyPart=prt;
      break;
    }
  }
  if (bodyPart != null) {
    try {
      String name=""String_Node_Str"" + form.getName();
      int startPos=form.getPartStartYPos(bodyPart.getID());
      int endPos=bodyPart.getHeight();
      int bodyheight=endPos - startPos;
      JSONObject portal=new JSONObject();
      portal.put(""String_Node_Str"",name);
      portal.put(""String_Node_Str"",!listViewPortal.isTableview());
      portal.put(""String_Node_Str"",!listViewPortal.isTableview() ? bodyheight : getRowHeight(form));
      portal.put(""String_Node_Str"",form.getScrollbars());
      if (listViewPortal.isTableview()) {
        int headerHeight=30;
        if (form.hasPart(Part.HEADER)) {
          headerHeight=0;
        }
        portal.put(""String_Node_Str"",headerHeight);
        portal.put(""String_Node_Str"",form.getOnSortCmdMethodID() != -1);
      }
      JSONObject location=new JSONObject();
      location.put(""String_Node_Str"",0);
      location.put(""String_Node_Str"",isInDesigner ? startPos : 0);
      portal.put(""String_Node_Str"",location);
      JSONObject size=new JSONObject();
      size.put(""String_Node_Str"",form.getWidth());
      size.put(""String_Node_Str"",bodyheight);
      portal.put(""String_Node_Str"",size);
      portal.put(""String_Node_Str"",listViewPortal.getVisible());
      portal.put(""String_Node_Str"",listViewPortal.getEnabled());
      portal.put(""String_Node_Str"",new JSONArray());
      JSONObject relatedFoundset=new JSONObject();
      relatedFoundset.put(""String_Node_Str"",""String_Node_Str"");
      portal.put(""String_Node_Str"",relatedFoundset);
      PropertyPath propertyPath=new PropertyPath();
      propertyPath.setShouldAddElementName();
      FormElement portalFormElement=new FormElement(""String_Node_Str"",portal,form,name,fs,propertyPath,isInDesigner);
      PropertyDescription pd=portalFormElement.getWebComponentSpec().getProperties().get(""String_Node_Str"");
      if (pd != null)       pd=((CustomJSONArrayType<?,?>)pd.getType()).getCustomJSONTypeDefinition();
      if (pd == null) {
        Debug.error(new RuntimeException(""String_Node_Str""));
        return null;
      }
      ComponentPropertyType type=((ComponentPropertyType)pd.getType());
      Map<String,Object> portalFormElementProperties=new HashMap<>(portalFormElement.getRawPropertyValues());
      portalFormElementProperties.put(""String_Node_Str"",IAnchorConstants.ALL);
      portalFormElementProperties.put(""String_Node_Str"",startPos);
      portalFormElementProperties.put(""String_Node_Str"",bodyPart.getHeight());
      Iterator<IPersist> it=form.getAllObjects(PositionComparator.XY_PERSIST_COMPARATOR);
      List<Object> children=new ArrayList<>();
      List<String> headersText=new ArrayList<>();
      propertyPath.add(portalFormElement.getName());
      propertyPath.add(""String_Node_Str"");
      int minBodyPortalTabSeq=-2;
      while (it.hasNext()) {
        IPersist persist=it.next();
        if (persist instanceof IFormElement) {
          Point loc=((IFormElement)persist).getLocation();
          if (startPos <= loc.y && endPos > loc.y) {
            if (listViewPortal.isTableview() && persist instanceof GraphicalComponent && ((GraphicalComponent)persist).getLabelFor() != null)             continue;
            propertyPath.add(children.size());
            FormElement fe=getFormElement((IFormElement)persist,fs,propertyPath,isInDesigner);
            if (listViewPortal.isTableview()) {
              String elementName=fe.getName();
              boolean hasLabelFor=false;
              Iterator<GraphicalComponent> graphicalComponents=form.getGraphicalComponents();
              while (graphicalComponents.hasNext()) {
                GraphicalComponent gc=graphicalComponents.next();
                if (gc.getLabelFor() != null && Utils.equalObjects(elementName,gc.getLabelFor()) && startPos <= gc.getLocation().y && endPos > gc.getLocation().y) {
                  headersText.add(gc.getText());
                  hasLabelFor=true;
                  break;
                }
              }
              if (!hasLabelFor) {
                if (fe.getPropertyValue(""String_Node_Str"") != null) {
                  headersText.add(fe.getPropertyValue(""String_Node_Str"").toString());
                }
 else {
                  headersText.add(null);
                }
              }
              Map<String,Object> feRawProperties=new HashMap<>(fe.getRawPropertyValues());
              feRawProperties.put(""String_Node_Str"",Integer.valueOf(children.size()));
              fe.updatePropertyValuesDontUse(feRawProperties);
            }
            children.add(type.getFormElementValue(null,pd,propertyPath,fe,fs));
            propertyPath.backOneLevel();
            Collection<PropertyDescription> tabSequenceProperties=fe.getWebComponentSpec().getProperties(NGTabSeqPropertyType.NG_INSTANCE);
            for (            PropertyDescription tabSeqProperty : tabSequenceProperties) {
              String tabSeqPropertyName=tabSeqProperty.getName();
              Integer tabSeqVal=(Integer)fe.getPropertyValue(tabSeqPropertyName);
              if (tabSeqVal == null)               tabSeqVal=Integer.valueOf(0);
              if (minBodyPortalTabSeq < 0 || minBodyPortalTabSeq > tabSeqVal.intValue())               minBodyPortalTabSeq=tabSeqVal.intValue();
            }
          }
        }
      }
      propertyPath.backOneLevel();
      propertyPath.backOneLevel();
      portalFormElementProperties.put(""String_Node_Str"",children.toArray());
      if (listViewPortal.isTableview()) {
        portalFormElementProperties.put(""String_Node_Str"",headersText.toArray());
      }
      portalFormElementProperties.put(""String_Node_Str"",Integer.valueOf(minBodyPortalTabSeq));
      portalFormElement.updatePropertyValuesDontUse(portalFormElementProperties);
      return portalFormElement;
    }
 catch (    JSONException ex) {
      Debug.error(""String_Node_Str"",ex);
    }
  }
  return null;
}","private FormElement createBodyPortalFormElement(BodyPortal listViewPortal,FlattenedSolution fs,final boolean isInDesigner){
  Form form=listViewPortal.getForm();
  Part bodyPart=null;
  for (  Part prt : Utils.iterate(form.getParts())) {
    if (prt.getPartType() == Part.BODY) {
      bodyPart=prt;
      break;
    }
  }
  if (bodyPart != null) {
    try {
      String name=""String_Node_Str"" + form.getName();
      int startPos=form.getPartStartYPos(bodyPart.getID());
      int endPos=bodyPart.getHeight();
      int bodyheight=endPos - startPos;
      JSONObject portal=new JSONObject();
      portal.put(""String_Node_Str"",name);
      portal.put(""String_Node_Str"",!listViewPortal.isTableview());
      portal.put(""String_Node_Str"",!listViewPortal.isTableview() ? bodyheight : getRowHeight(form));
      portal.put(""String_Node_Str"",form.getScrollbars());
      if (listViewPortal.isTableview()) {
        int headerHeight=30;
        if (form.hasPart(Part.HEADER)) {
          headerHeight=0;
        }
        portal.put(""String_Node_Str"",headerHeight);
        portal.put(""String_Node_Str"",form.getOnSortCmdMethodID() != -1);
      }
      JSONObject location=new JSONObject();
      location.put(""String_Node_Str"",0);
      location.put(""String_Node_Str"",isInDesigner ? startPos : 0);
      portal.put(""String_Node_Str"",location);
      JSONObject size=new JSONObject();
      size.put(""String_Node_Str"",form.getWidth());
      size.put(""String_Node_Str"",bodyheight);
      portal.put(""String_Node_Str"",size);
      portal.put(""String_Node_Str"",listViewPortal.getVisible());
      portal.put(""String_Node_Str"",listViewPortal.getEnabled());
      portal.put(""String_Node_Str"",new JSONArray());
      JSONObject relatedFoundset=new JSONObject();
      relatedFoundset.put(""String_Node_Str"",""String_Node_Str"");
      portal.put(""String_Node_Str"",relatedFoundset);
      PropertyPath propertyPath=new PropertyPath();
      propertyPath.setShouldAddElementName();
      FormElement portalFormElement=new FormElement(""String_Node_Str"",portal,form,name,fs,propertyPath,isInDesigner);
      PropertyDescription pd=portalFormElement.getWebComponentSpec().getProperties().get(""String_Node_Str"");
      if (pd != null)       pd=((CustomJSONArrayType<?,?>)pd.getType()).getCustomJSONTypeDefinition();
      if (pd == null) {
        Debug.error(new RuntimeException(""String_Node_Str""));
        return null;
      }
      ComponentPropertyType type=((ComponentPropertyType)pd.getType());
      Map<String,Object> portalFormElementProperties=new HashMap<>(portalFormElement.getRawPropertyValues());
      portalFormElementProperties.put(""String_Node_Str"",IAnchorConstants.ALL);
      portalFormElementProperties.put(""String_Node_Str"",startPos);
      portalFormElementProperties.put(""String_Node_Str"",bodyPart.getHeight());
      portalFormElementProperties.put(""String_Node_Str"",true);
      Iterator<IPersist> it=form.getAllObjects(PositionComparator.XY_PERSIST_COMPARATOR);
      List<Object> children=new ArrayList<>();
      List<String> headersText=new ArrayList<>();
      propertyPath.add(portalFormElement.getName());
      propertyPath.add(""String_Node_Str"");
      int minBodyPortalTabSeq=-2;
      while (it.hasNext()) {
        IPersist persist=it.next();
        if (persist instanceof IFormElement) {
          Point loc=((IFormElement)persist).getLocation();
          if (startPos <= loc.y && endPos > loc.y) {
            if (listViewPortal.isTableview() && persist instanceof GraphicalComponent && ((GraphicalComponent)persist).getLabelFor() != null)             continue;
            propertyPath.add(children.size());
            FormElement fe=getFormElement((IFormElement)persist,fs,propertyPath,isInDesigner);
            if (listViewPortal.isTableview()) {
              String elementName=fe.getName();
              boolean hasLabelFor=false;
              Iterator<GraphicalComponent> graphicalComponents=form.getGraphicalComponents();
              while (graphicalComponents.hasNext()) {
                GraphicalComponent gc=graphicalComponents.next();
                if (gc.getLabelFor() != null && Utils.equalObjects(elementName,gc.getLabelFor()) && startPos <= gc.getLocation().y && endPos > gc.getLocation().y) {
                  headersText.add(gc.getText());
                  hasLabelFor=true;
                  break;
                }
              }
              if (!hasLabelFor) {
                if (fe.getPropertyValue(""String_Node_Str"") != null) {
                  headersText.add(fe.getPropertyValue(""String_Node_Str"").toString());
                }
 else {
                  headersText.add(null);
                }
              }
              Map<String,Object> feRawProperties=new HashMap<>(fe.getRawPropertyValues());
              feRawProperties.put(""String_Node_Str"",Integer.valueOf(children.size()));
              fe.updatePropertyValuesDontUse(feRawProperties);
            }
            children.add(type.getFormElementValue(null,pd,propertyPath,fe,fs));
            propertyPath.backOneLevel();
            Collection<PropertyDescription> tabSequenceProperties=fe.getWebComponentSpec().getProperties(NGTabSeqPropertyType.NG_INSTANCE);
            for (            PropertyDescription tabSeqProperty : tabSequenceProperties) {
              String tabSeqPropertyName=tabSeqProperty.getName();
              Integer tabSeqVal=(Integer)fe.getPropertyValue(tabSeqPropertyName);
              if (tabSeqVal == null)               tabSeqVal=Integer.valueOf(0);
              if (minBodyPortalTabSeq < 0 || minBodyPortalTabSeq > tabSeqVal.intValue())               minBodyPortalTabSeq=tabSeqVal.intValue();
            }
          }
        }
      }
      propertyPath.backOneLevel();
      propertyPath.backOneLevel();
      portalFormElementProperties.put(""String_Node_Str"",children.toArray());
      if (listViewPortal.isTableview()) {
        portalFormElementProperties.put(""String_Node_Str"",headersText.toArray());
      }
      portalFormElementProperties.put(""String_Node_Str"",Integer.valueOf(minBodyPortalTabSeq));
      portalFormElement.updatePropertyValuesDontUse(portalFormElementProperties);
      return portalFormElement;
    }
 catch (    JSONException ex) {
      Debug.error(""String_Node_Str"",ex);
    }
  }
  return null;
}",0.9949740725967292
143415,"@Override public NGRuntimeWindow getCurrentWindow(){
  return (NGRuntimeWindow)super.getCurrentWindow();
}","@Override public NGRuntimeWindow getCurrentWindow(){
  NGRuntimeWindow currentWindow=(NGRuntimeWindow)super.getCurrentWindow();
  return currentWindow != null ? currentWindow : getWindow(lastCurrentWindow);
}",0.6242038216560509
143416,"@Override public void dataProviderOrRecordChanged(IRecordInternal record,String dataProvider,boolean isFormDP,boolean isGlobalDP,boolean fireChangeEvent){
  if (typeOfDP == null) {
    Collection<PropertyDescription> properties=formElement.getWebComponentSpec().getProperties(TypesRegistry.getType(""String_Node_Str""));
    for (    PropertyDescription formatPd : properties) {
      Object formatConfig=formatPd.getConfig();
      if (formatConfig instanceof String[] && Arrays.asList((String[])formatConfig).indexOf(dpPD.getName()) != -1) {
        INGApplication application=servoyDataConverterContext.getApplication();
        String format=(String)formElement.getPropertyValue(formatPd.getName());
        fieldFormat=ComponentFormat.getComponentFormat(format,dataProviderID,application.getFlattenedSolution().getDataproviderLookup(application.getFoundSetManager(),formElement.getForm()),application);
        break;
      }
    }
    if (fieldFormat != null) {
      typeOfDP=NGUtils.getDataProviderPropertyDescription(fieldFormat.uiType,getDataProviderConfig().hasParseHtml());
    }
 else {
      typeOfDP=NGUtils.getDataProviderPropertyDescription(dataProviderID,servoyDataConverterContext.getApplication().getFlattenedSolution(),servoyDataConverterContext.getForm().getForm(),record != null ? record.getParentFoundSet().getTable() : null,getDataProviderConfig().hasParseHtml());
    }
  }
  String dpID=dataProviderID;
  IDataProviderLookup dpLookup=servoyDataConverterContext.getApplication().getFlattenedSolution().getDataproviderLookup(servoyDataConverterContext.getApplication().getFoundSetManager(),servoyDataConverterContext.getForm().getForm());
  if (dpLookup != null) {
    IDataProvider dp;
    try {
      dp=dpLookup.getDataProvider(dataProviderID);
      if (dp != null) {
        dpID=dp.getDataProviderID();
      }
    }
 catch (    RepositoryException e) {
      Debug.error(e);
    }
  }
  Object v=com.servoy.j2db.dataprocessing.DataAdapterList.getValueObject(record,servoyDataConverterContext.getForm().getFormScope(),dpID);
  if (v == Scriptable.NOT_FOUND)   v=null;
  if (fieldFormat != null && !findMode) {
    v=ComponentFormat.applyUIConverterToObject(v,dataProviderID,servoyDataConverterContext.getApplication().getFoundSetManager(),fieldFormat);
  }
  v=replaceTagsIfNeeded(v);
  if (v instanceof UUID)   v=v.toString();
  boolean changed=((v != value) && (v == null || !v.equals(value)));
  value=v;
  if (changed) {
    jsonValue=null;
  }
  if (fireChangeEvent && changed) {
    changeMonitor.valueChanged();
  }
}","@Override public void dataProviderOrRecordChanged(IRecordInternal record,String dataProvider,boolean isFormDP,boolean isGlobalDP,boolean fireChangeEvent){
  if (typeOfDP == null) {
    Collection<PropertyDescription> properties=formElement.getWebComponentSpec().getProperties(TypesRegistry.getType(""String_Node_Str""));
    for (    PropertyDescription formatPd : properties) {
      Object formatConfig=formatPd.getConfig();
      if (formatConfig instanceof String[] && Arrays.asList((String[])formatConfig).indexOf(dpPD.getName()) != -1) {
        INGApplication application=servoyDataConverterContext.getApplication();
        String format=(String)formElement.getPropertyValue(formatPd.getName());
        if (format != null) {
          fieldFormat=ComponentFormat.getComponentFormat(format,dataProviderID,application.getFlattenedSolution().getDataproviderLookup(application.getFoundSetManager(),servoyDataConverterContext.getForm().getForm()),application);
          break;
        }
      }
    }
    if (fieldFormat != null) {
      typeOfDP=NGUtils.getDataProviderPropertyDescription(fieldFormat.uiType,getDataProviderConfig().hasParseHtml());
    }
 else {
      typeOfDP=NGUtils.getDataProviderPropertyDescription(dataProviderID,servoyDataConverterContext.getApplication().getFlattenedSolution(),servoyDataConverterContext.getForm().getForm(),record != null ? record.getParentFoundSet().getTable() : null,getDataProviderConfig().hasParseHtml());
    }
  }
  String dpID=dataProviderID;
  IDataProviderLookup dpLookup=servoyDataConverterContext.getApplication().getFlattenedSolution().getDataproviderLookup(servoyDataConverterContext.getApplication().getFoundSetManager(),servoyDataConverterContext.getForm().getForm());
  if (dpLookup != null) {
    IDataProvider dp;
    try {
      dp=dpLookup.getDataProvider(dataProviderID);
      if (dp != null) {
        dpID=dp.getDataProviderID();
      }
    }
 catch (    RepositoryException e) {
      Debug.error(e);
    }
  }
  Object v=com.servoy.j2db.dataprocessing.DataAdapterList.getValueObject(record,servoyDataConverterContext.getForm().getFormScope(),dpID);
  if (v == Scriptable.NOT_FOUND)   v=null;
  if (fieldFormat != null && !findMode) {
    v=ComponentFormat.applyUIConverterToObject(v,dataProviderID,servoyDataConverterContext.getApplication().getFoundSetManager(),fieldFormat);
  }
  v=replaceTagsIfNeeded(v);
  if (v instanceof UUID)   v=v.toString();
  boolean changed=((v != value) && (v == null || !v.equals(value)));
  value=v;
  if (changed) {
    jsonValue=null;
  }
  if (fireChangeEvent && changed) {
    changeMonitor.valueChanged();
  }
}",0.9828019323671496
143417,"private Object getSabloValue(Object formElementValue,PropertyDescription pd,FormElement formElement,DataAdapterList dataAdapterList){
  if (formElementValue == NGConversions.IDesignToFormElement.TYPE_DEFAULT_VALUE_MARKER || formElementValue == DESIGN_DEFAULT) {
    formElementValue=null;
  }
  if (formElementValue instanceof String || formElementValue == null) {
    String dataproviderId=null;
    if (pd.getConfig() instanceof String[]) {
      for (      String element : (String[])pd.getConfig()) {
        PropertyDescription forProperty=formElement.getWebComponentSpec().getProperty(element);
        if (forProperty != null) {
          if (forProperty.getType() instanceof DataproviderPropertyType) {
            dataproviderId=(String)formElement.getPropertyValue(element);
            break;
          }
 else           if (forProperty.getType() instanceof ValueListPropertyType) {
            Object id=formElement.getPropertyValue(element);
            int valuelistID=Utils.getAsInteger(id);
            INGApplication application=dataAdapterList.getApplication();
            ValueList val=null;
            if (valuelistID > 0) {
              val=application.getFlattenedSolution().getValueList(valuelistID);
            }
 else {
              UUID uuid=Utils.getAsUUID(id,false);
              if (uuid != null)               val=(ValueList)application.getFlattenedSolution().searchPersist(uuid);
            }
            if (val != null) {
              int dpType=IColumnTypes.TEXT;
              IDataProvider dataProvider=null;
              ITable table;
              try {
                if (val.getRelationName() != null) {
                  Relation[] relations=application.getFlattenedSolution().getRelationSequence(val.getRelationName());
                  table=relations[relations.length - 1].getForeignTable();
                }
 else {
                  table=val.getTable();
                }
                if (table != null) {
                  String dp=null;
                  int showDataProviders=val.getShowDataProviders();
                  if (showDataProviders == 1) {
                    dp=val.getDataProviderID1();
                  }
 else                   if (showDataProviders == 2) {
                    dp=val.getDataProviderID2();
                  }
 else                   if (showDataProviders == 4) {
                    dp=val.getDataProviderID3();
                  }
                  if (dp != null) {
                    dataProvider=application.getFlattenedSolution().getDataProviderForTable((Table)table,dp);
                  }
                  if (dataProvider != null) {
                    dpType=dataProvider.getDataProviderType();
                  }
                }
              }
 catch (              Exception ex) {
                Debug.error(ex);
              }
              return ComponentFormat.getComponentFormat((String)formElementValue,dpType,application);
            }
          }
        }
      }
    }
    ComponentFormat format=ComponentFormat.getComponentFormat((String)formElementValue,dataproviderId,dataAdapterList.getApplication().getFlattenedSolution().getDataproviderLookup(dataAdapterList.getApplication().getFoundSetManager(),dataAdapterList.getForm().getForm()),dataAdapterList.getApplication());
    return format;
  }
  return formElementValue;
}","private Object getSabloValue(Object formElementValue,PropertyDescription pd,FormElement formElement,DataAdapterList dataAdapterList){
  if (formElementValue == NGConversions.IDesignToFormElement.TYPE_DEFAULT_VALUE_MARKER || formElementValue == DESIGN_DEFAULT) {
    formElementValue=null;
  }
  if (formElementValue instanceof String || formElementValue == null) {
    String dataproviderId=null;
    if (pd.getConfig() instanceof String[]) {
      for (      String element : (String[])pd.getConfig()) {
        PropertyDescription forProperty=formElement.getWebComponentSpec().getProperty(element);
        if (forProperty != null) {
          if (forProperty.getType() instanceof DataproviderPropertyType) {
            dataproviderId=(String)formElement.getPropertyValue(element);
            break;
          }
 else           if (forProperty.getType() instanceof ValueListPropertyType) {
            Object id=formElement.getPropertyValue(element);
            int valuelistID=Utils.getAsInteger(id);
            INGApplication application=dataAdapterList.getApplication();
            ValueList val=null;
            if (valuelistID > 0) {
              val=application.getFlattenedSolution().getValueList(valuelistID);
            }
 else {
              UUID uuid=Utils.getAsUUID(id,false);
              if (uuid != null)               val=(ValueList)application.getFlattenedSolution().searchPersist(uuid);
            }
            if (val != null) {
              int dpType=IColumnTypes.TEXT;
              IDataProvider dataProvider=null;
              ITable table;
              try {
                if (val.getRelationName() != null) {
                  Relation[] relations=application.getFlattenedSolution().getRelationSequence(val.getRelationName());
                  table=relations[relations.length - 1].getForeignTable();
                }
 else {
                  table=val.getTable();
                }
                if (table != null) {
                  String dp=null;
                  int showDataProviders=val.getShowDataProviders();
                  if (showDataProviders == 1) {
                    dp=val.getDataProviderID1();
                  }
 else                   if (showDataProviders == 2) {
                    dp=val.getDataProviderID2();
                  }
 else                   if (showDataProviders == 4) {
                    dp=val.getDataProviderID3();
                  }
                  if (dp != null) {
                    dataProvider=application.getFlattenedSolution().getDataProviderForTable((Table)table,dp);
                  }
                  if (dataProvider != null) {
                    dpType=dataProvider.getDataProviderType();
                  }
                  return ComponentFormat.getComponentFormat((String)formElementValue,dpType,application);
                }
              }
 catch (              Exception ex) {
                Debug.error(ex);
              }
            }
          }
        }
      }
    }
    ComponentFormat format=ComponentFormat.getComponentFormat((String)formElementValue,dataproviderId,dataAdapterList.getApplication().getFlattenedSolution().getDataproviderLookup(dataAdapterList.getApplication().getFoundSetManager(),dataAdapterList.getForm().getForm()),dataAdapterList.getApplication());
    return format;
  }
  return formElementValue;
}",0.8761904761904762
143418,"@Override protected void doInvokeLater(Runnable r){
  wsSession.getEventDispatcher().addEvent(r);
}","@Override protected void doInvokeLater(Runnable r){
  wsSession.getEventDispatcher().postEvent(r);
}",0.964824120603015
143419,"@Override protected IEventDispatcher createEventDispatcher(){
  return new IEventDispatcher(){
    @Override public void run(){
    }
    @Override public void suspend(    Object object){
    }
    @Override public void resume(    Object object){
    }
    @Override public boolean isEventDispatchThread(){
      return true;
    }
    @Override public void destroy(){
    }
    @Override public void addEvent(    Runnable event){
      event.run();
    }
    @Override public void addEvent(    Runnable event,    int eventLevel){
      event.run();
    }
    @Override public void suspend(    Object suspendID,    int minEventLevelToDispatch,    long timeout){
    }
    @Override public void cancelSuspend(    Integer suspendID,    String reason){
    }
  }
;
}","@Override protected IEventDispatcher createEventDispatcher(){
  return new IEventDispatcher(){
    @Override public void run(){
    }
    @Override public void suspend(    Object object){
    }
    @Override public void resume(    Object object){
    }
    @Override public boolean isEventDispatchThread(){
      return true;
    }
    @Override public void destroy(){
    }
    @Override public void addEvent(    Runnable event){
      event.run();
    }
    @Override public void addEvent(    Runnable event,    int eventLevel){
      event.run();
    }
    @Override public void suspend(    Object suspendID,    int minEventLevelToDispatch,    long timeout){
    }
    @Override public void cancelSuspend(    Integer suspendID,    String reason){
    }
    @Override public void postEvent(    Runnable event){
      event.run();
    }
  }
;
}",0.945273631840796
143420,"/** 
 * @param wsSession
 * @param tr
 */
TestNGClient(TestRepository tr) throws Exception {
  super(new NGClientWebsocketSession(""String_Node_Str""){
    @Override protected IEventDispatcher createEventDispatcher(){
      return new IEventDispatcher(){
        @Override public void run(){
        }
        @Override public void suspend(        Object object){
        }
        @Override public void resume(        Object object){
        }
        @Override public boolean isEventDispatchThread(){
          return true;
        }
        @Override public void destroy(){
        }
        @Override public void addEvent(        Runnable event){
          event.run();
        }
        @Override public void addEvent(        Runnable event,        int eventLevel){
          event.run();
        }
        @Override public void suspend(        Object suspendID,        int minEventLevelToDispatch,        long timeout){
        }
        @Override public void cancelSuspend(        Integer suspendID,        String reason){
        }
      }
;
    }
  }
);
  this.tr=tr;
  ((NGClientWebsocketSession)getWebsocketSession()).setClient(this);
  WebsocketSessionManager.addSession(getWebsocketSession());
}","/** 
 * @param wsSession
 * @param tr
 */
TestNGClient(TestRepository tr) throws Exception {
  super(new NGClientWebsocketSession(""String_Node_Str""){
    @Override protected IEventDispatcher createEventDispatcher(){
      return new IEventDispatcher(){
        @Override public void run(){
        }
        @Override public void suspend(        Object object){
        }
        @Override public void resume(        Object object){
        }
        @Override public boolean isEventDispatchThread(){
          return true;
        }
        @Override public void destroy(){
        }
        @Override public void addEvent(        Runnable event){
          event.run();
        }
        @Override public void addEvent(        Runnable event,        int eventLevel){
          event.run();
        }
        @Override public void suspend(        Object suspendID,        int minEventLevelToDispatch,        long timeout){
        }
        @Override public void cancelSuspend(        Integer suspendID,        String reason){
        }
        @Override public void postEvent(        Runnable event){
          event.run();
        }
      }
;
    }
  }
);
  this.tr=tr;
  ((NGClientWebsocketSession)getWebsocketSession()).setClient(this);
  WebsocketSessionManager.addSession(getWebsocketSession());
}",0.9609561752988048
143421,"/** 
 * Returns the actual value that this dataProvider has.
 */
public Object getValue(){
  return value;
}","/** 
 * Returns the actual value (that is already full converted by an ui converter) that this dataProvider has.
 */
public Object getValue(){
  if (!findMode && fieldFormat != null) {
    return ComponentFormat.applyUIConverterFromObject(value,dataProviderID,servoyDataConverterContext.getApplication().getFoundSetManager(),fieldFormat);
  }
  return value;
}",0.4102564102564102
143422,"@Override public void dataProviderOrRecordChanged(IRecordInternal record,String dataProvider,boolean isFormDP,boolean isGlobalDP,boolean fireChangeEvent){
  if (typeOfDP == null) {
    typeOfDP=NGUtils.getDataProviderPropertyDescription(dataProviderID,servoyDataConverterContext.getApplication().getFlattenedSolution(),servoyDataConverterContext.getForm().getForm(),record != null ? record.getParentFoundSet().getTable() : null,getDataProviderConfig().hasParseHtml());
  }
  String dpID=dataProviderID;
  IDataProviderLookup dpLookup=servoyDataConverterContext.getApplication().getFlattenedSolution().getDataproviderLookup(servoyDataConverterContext.getApplication().getFoundSetManager(),servoyDataConverterContext.getForm().getForm());
  if (dpLookup != null) {
    IDataProvider dp;
    try {
      dp=dpLookup.getDataProvider(dataProviderID);
      if (dp != null) {
        dpID=dp.getDataProviderID();
      }
    }
 catch (    RepositoryException e) {
      Debug.error(e);
    }
  }
  Object v=com.servoy.j2db.dataprocessing.DataAdapterList.getValueObject(record,servoyDataConverterContext.getForm().getFormScope(),dpID);
  if (v == Scriptable.NOT_FOUND)   v=null;
  v=replaceTagsIfNeeded(v);
  if (v instanceof UUID)   v=v.toString();
  boolean changed=((v != value) && (v == null || !v.equals(value)));
  value=v;
  if (changed) {
    jsonValue=null;
  }
  if (fireChangeEvent && changed) {
    changeMonitor.valueChanged();
  }
}","@Override public void dataProviderOrRecordChanged(IRecordInternal record,String dataProvider,boolean isFormDP,boolean isGlobalDP,boolean fireChangeEvent){
  if (typeOfDP == null) {
    Collection<PropertyDescription> properties=formElement.getWebComponentSpec().getProperties(TypesRegistry.getType(""String_Node_Str""));
    for (    PropertyDescription formatPd : properties) {
      Object formatConfig=formatPd.getConfig();
      if (formatConfig instanceof String[] && Arrays.asList((String[])formatConfig).indexOf(dpPD.getName()) != -1) {
        INGApplication application=servoyDataConverterContext.getApplication();
        String format=(String)formElement.getPropertyValue(formatPd.getName());
        fieldFormat=ComponentFormat.getComponentFormat(format,dataProviderID,application.getFlattenedSolution().getDataproviderLookup(application.getFoundSetManager(),formElement.getForm()),application);
        break;
      }
    }
    if (fieldFormat != null) {
      typeOfDP=NGUtils.getDataProviderPropertyDescription(fieldFormat.uiType,getDataProviderConfig().hasParseHtml());
    }
 else {
      typeOfDP=NGUtils.getDataProviderPropertyDescription(dataProviderID,servoyDataConverterContext.getApplication().getFlattenedSolution(),servoyDataConverterContext.getForm().getForm(),record != null ? record.getParentFoundSet().getTable() : null,getDataProviderConfig().hasParseHtml());
    }
  }
  String dpID=dataProviderID;
  IDataProviderLookup dpLookup=servoyDataConverterContext.getApplication().getFlattenedSolution().getDataproviderLookup(servoyDataConverterContext.getApplication().getFoundSetManager(),servoyDataConverterContext.getForm().getForm());
  if (dpLookup != null) {
    IDataProvider dp;
    try {
      dp=dpLookup.getDataProvider(dataProviderID);
      if (dp != null) {
        dpID=dp.getDataProviderID();
      }
    }
 catch (    RepositoryException e) {
      Debug.error(e);
    }
  }
  Object v=com.servoy.j2db.dataprocessing.DataAdapterList.getValueObject(record,servoyDataConverterContext.getForm().getFormScope(),dpID);
  if (v == Scriptable.NOT_FOUND)   v=null;
  if (fieldFormat != null && !findMode) {
    v=ComponentFormat.applyUIConverterToObject(v,dataProviderID,servoyDataConverterContext.getApplication().getFoundSetManager(),fieldFormat);
  }
  v=replaceTagsIfNeeded(v);
  if (v instanceof UUID)   v=v.toString();
  boolean changed=((v != value) && (v == null || !v.equals(value)));
  value=v;
  if (changed) {
    jsonValue=null;
  }
  if (fireChangeEvent && changed) {
    changeMonitor.valueChanged();
  }
}",0.7209418837675351
143423,"public DataproviderTypeSabloValue(String dataProviderID,DataAdapterList dataAdapterList,WebFormComponent component,PropertyDescription dpPD){
  if (dataProviderID.startsWith(ScriptVariable.GLOBALS_DOT_PREFIX)) {
    this.dataProviderID=ScriptVariable.SCOPES_DOT_PREFIX + dataProviderID;
  }
 else {
    this.dataProviderID=dataProviderID;
  }
  this.dataAdapterList=dataAdapterList;
  this.servoyDataConverterContext=component.getDataConverterContext();
  this.dpPD=dpPD;
}","public DataproviderTypeSabloValue(String dataProviderID,DataAdapterList dataAdapterList,WebFormComponent component,PropertyDescription dpPD){
  if (dataProviderID.startsWith(ScriptVariable.GLOBALS_DOT_PREFIX)) {
    this.dataProviderID=ScriptVariable.SCOPES_DOT_PREFIX + dataProviderID;
  }
 else {
    this.dataProviderID=dataProviderID;
  }
  this.dataAdapterList=dataAdapterList;
  this.servoyDataConverterContext=component.getDataConverterContext();
  this.dpPD=dpPD;
  this.formElement=component.getFormElement();
}",0.9526686807653576
143424,"public static Object applyUIConverterToObject(Object component,Object value,String dataProviderID,IFoundSetManagerInternal foundsetManager){
  if (component instanceof IScriptableProvider && ((IScriptableProvider)component).getScriptObject() instanceof IFormatScriptComponent) {
    ComponentFormat cf=((IFormatScriptComponent)((IScriptableProvider)component).getScriptObject()).getComponentFormat();
    if (cf != null && cf.parsedFormat.getUIConverterName() != null) {
      IUIConverter conv=foundsetManager.getUIConverterManager().getConverter(cf.parsedFormat.getUIConverterName());
      if (conv == null) {
        throw new IllegalStateException(Messages.getString(""String_Node_Str"",new Object[]{cf.parsedFormat.getUIConverterName()}));
      }
      try {
        return conv.convertToObject(cf.parsedFormat.getUIConverterProperties(),cf.dpType,value);
      }
 catch (      Exception e) {
        throw new IllegalArgumentException(Messages.getString(""String_Node_Str"",new Object[]{dataProviderID,Column.getDisplayTypeString(cf.dpType),value}),e);
      }
    }
  }
  return value;
}","/** 
 * @param value
 * @param dataProviderID
 * @param foundsetManager
 * @param cf
 */
public static Object applyUIConverterToObject(Object value,String dataProviderID,IFoundSetManagerInternal foundsetManager,ComponentFormat cf){
  if (cf != null && cf.parsedFormat.getUIConverterName() != null) {
    IUIConverter conv=foundsetManager.getUIConverterManager().getConverter(cf.parsedFormat.getUIConverterName());
    if (conv == null) {
      throw new IllegalStateException(Messages.getString(""String_Node_Str"",new Object[]{cf.parsedFormat.getUIConverterName()}));
    }
    try {
      return conv.convertToObject(cf.parsedFormat.getUIConverterProperties(),cf.dpType,value);
    }
 catch (    Exception e) {
      throw new IllegalArgumentException(Messages.getString(""String_Node_Str"",new Object[]{dataProviderID,Column.getDisplayTypeString(cf.dpType),value}),e);
    }
  }
  return value;
}",0.1751383995973829
143425,"public static Object applyUIConverterFromObject(Object component,Object obj,String dataProviderID,IFoundSetManagerInternal foundsetManager){
  if (component instanceof IScriptableProvider && ((IScriptableProvider)component).getScriptObject() instanceof IFormatScriptComponent) {
    ComponentFormat cf=((IFormatScriptComponent)((IScriptableProvider)component).getScriptObject()).getComponentFormat();
    if (cf != null && cf.parsedFormat.getUIConverterName() != null) {
      IUIConverter conv=foundsetManager.getUIConverterManager().getConverter(cf.parsedFormat.getUIConverterName());
      if (conv == null) {
        throw new IllegalStateException(Messages.getString(""String_Node_Str"",new Object[]{cf.parsedFormat.getUIConverterName()}));
      }
      try {
        return conv.convertFromObject(cf.parsedFormat.getUIConverterProperties(),cf.dpType,obj);
      }
 catch (      Exception e) {
        throw new IllegalArgumentException(Messages.getString(""String_Node_Str"",new Object[]{dataProviderID,Column.getDisplayTypeString(cf.dpType),obj}),e);
      }
    }
  }
  return obj;
}","/** 
 * @param obj
 * @param dataProviderID
 * @param foundsetManager
 * @param cf
 */
public static Object applyUIConverterFromObject(Object obj,String dataProviderID,IFoundSetManagerInternal foundsetManager,ComponentFormat cf){
  if (cf != null && cf.parsedFormat.getUIConverterName() != null) {
    IUIConverter conv=foundsetManager.getUIConverterManager().getConverter(cf.parsedFormat.getUIConverterName());
    if (conv == null) {
      throw new IllegalStateException(Messages.getString(""String_Node_Str"",new Object[]{cf.parsedFormat.getUIConverterName()}));
    }
    try {
      return conv.convertFromObject(cf.parsedFormat.getUIConverterProperties(),cf.dpType,obj);
    }
 catch (    Exception e) {
      throw new IllegalArgumentException(Messages.getString(""String_Node_Str"",new Object[]{dataProviderID,Column.getDisplayTypeString(cf.dpType),obj}),e);
    }
  }
  return obj;
}",0.6605968639352554
143426,"protected String getMediaUrl(Object value,FlattenedSolution flattenedSolution,INGApplication application){
  String url=null;
  Media media=null;
  if (value instanceof Integer) {
    media=flattenedSolution.getMedia(((Integer)value).intValue());
  }
 else   if (value instanceof String && ((String)value).toLowerCase().startsWith(MediaURLStreamHandler.MEDIA_URL_DEF)) {
    media=flattenedSolution.getMedia(((String)value).substring(MediaURLStreamHandler.MEDIA_URL_DEF.length()));
  }
 else {
    UUID uuid=Utils.getAsUUID(value,false);
    if (uuid != null)     media=(Media)flattenedSolution.searchPersist(uuid);
  }
  if (media != null) {
    url=""String_Node_Str"" + MediaResourcesServlet.FLATTENED_SOLUTION_ACCESS + ""String_Node_Str""+ media.getRootObject().getName()+ ""String_Node_Str""+ media.getName();
    Dimension imageSize=ImageLoader.getSize(media.getMediaData());
    boolean paramsAdded=false;
    if (imageSize != null) {
      paramsAdded=true;
      url+=""String_Node_Str"" + imageSize.width + ""String_Node_Str""+ imageSize.height;
    }
    if (application != null) {
      Solution sc=flattenedSolution.getSolutionCopy(false);
      if (sc != null && sc.getMedia(media.getName()) != null) {
        if (paramsAdded)         url+=""String_Node_Str"";
 else         url+=""String_Node_Str"";
        url+=""String_Node_Str"" + application.getWebsocketSession().getUuid() + ""String_Node_Str""+ sc.getLastModifiedTime();
      }
    }
  }
  return url;
}","protected String getMediaUrl(Object value,FlattenedSolution flattenedSolution,INGApplication application){
  String url=null;
  Media media=null;
  if (value instanceof CharSequence) {
    value=((CharSequence)value).toString();
  }
  if (value instanceof Integer) {
    media=flattenedSolution.getMedia(((Integer)value).intValue());
  }
 else   if (value instanceof String && ((String)value).toLowerCase().startsWith(MediaURLStreamHandler.MEDIA_URL_DEF)) {
    media=flattenedSolution.getMedia(((String)value).substring(MediaURLStreamHandler.MEDIA_URL_DEF.length()));
  }
 else {
    UUID uuid=Utils.getAsUUID(value,false);
    if (uuid != null)     media=(Media)flattenedSolution.searchPersist(uuid);
  }
  if (media != null) {
    url=""String_Node_Str"" + MediaResourcesServlet.FLATTENED_SOLUTION_ACCESS + ""String_Node_Str""+ media.getRootObject().getName()+ ""String_Node_Str""+ media.getName();
    Dimension imageSize=ImageLoader.getSize(media.getMediaData());
    boolean paramsAdded=false;
    if (imageSize != null) {
      paramsAdded=true;
      url+=""String_Node_Str"" + imageSize.width + ""String_Node_Str""+ imageSize.height;
    }
    if (application != null) {
      Solution sc=flattenedSolution.getSolutionCopy(false);
      if (sc != null && sc.getMedia(media.getName()) != null) {
        if (paramsAdded)         url+=""String_Node_Str"";
 else         url+=""String_Node_Str"";
        url+=""String_Node_Str"" + application.getWebsocketSession().getUuid() + ""String_Node_Str""+ sc.getLastModifiedTime();
      }
    }
  }
  return url;
}",0.9710482529118136
143427,"@Override public JSONWriter toTemplateJSONValue(JSONWriter writer,String key,Object formElementValue,PropertyDescription pd,DataConversion browserConversionMarkers,FlattenedSolution fs,FormElementContext formElementContext) throws JSONException {
  if (fs != null) {
    String url=getMediaUrl(formElementValue,fs,null);
    if (url != null) {
      return toJSON(writer,key,new MediaWrapper(formElementValue,url),browserConversionMarkers,null);
    }
  }
  return writer;
}","@Override public JSONWriter toTemplateJSONValue(JSONWriter writer,String key,Object formElementValue,PropertyDescription pd,DataConversion browserConversionMarkers,FlattenedSolution fs,FormElementContext formElementContext) throws JSONException {
  if (fs != null) {
    String url=getMediaUrl(formElementValue,fs,null);
    if (""String_Node_Str"".equals(url)) {
      int a=1 / 2;
    }
    if (url != null) {
      return toJSON(writer,key,new MediaWrapper(formElementValue,url),browserConversionMarkers,null);
    }
  }
  return writer;
}",0.9349112426035504
143428,"@Override public JSONWriter toJSON(JSONWriter writer,String key,Object sabloValue,DataConversion clientConversion,IDataConverterContext dataConverterContext) throws JSONException {
  JSONUtils.addKeyIfPresent(writer,key);
  if (sabloValue != null) {
    if (sabloValue.getClass().isArray() && sabloValue.getClass().getComponentType() == byte.class) {
      ByteArrayResourcePropertyType.INSTANCE.toJSON(writer,null,(byte[])sabloValue,clientConversion,new DataConverterContext(NGUtils.MEDIA_DATAPROVIDER_BYTE_ARRAY_CACHED_PD,dataConverterContext.getWebObject()));
    }
 else     if (sabloValue instanceof Date) {
      DatePropertyType.INSTANCE.toJSON(writer,null,(Date)sabloValue,clientConversion,new DataConverterContext(NGUtils.DATE_DATAPROVIDER_CACHED_PD,dataConverterContext.getWebObject()));
    }
 else     if (sabloValue instanceof String) {
      if (Boolean.TRUE.equals(dataConverterContext.getPropertyDescription().getConfig())) {
        HTMLStringPropertyType.INSTANCE.toJSON(writer,null,(String)sabloValue,clientConversion,new DataConverterContext(NGUtils.TEXT_PARSEHTML_DATAPROVIDER_CACHED_PD,dataConverterContext.getWebObject()));
      }
 else {
        HTMLStringPropertyType.INSTANCE.toJSON(writer,null,(String)sabloValue,clientConversion,new DataConverterContext(NGUtils.TEXT_NO_PARSEHTML_DATAPROVIDER_CACHED_PD,dataConverterContext.getWebObject()));
      }
    }
 else {
      writer.value(sabloValue);
    }
  }
 else {
    writer.value(null);
  }
  return writer;
}","@Override public JSONWriter toJSON(JSONWriter writer,String key,Object sabloValue,DataConversion clientConversion,IDataConverterContext dataConverterContext) throws JSONException {
  JSONUtils.addKeyIfPresent(writer,key);
  if (sabloValue != null) {
    if (sabloValue.getClass().isArray() && sabloValue.getClass().getComponentType() == byte.class) {
      ByteArrayResourcePropertyType.INSTANCE.toJSON(writer,null,(byte[])sabloValue,clientConversion,new DataConverterContext(NGUtils.MEDIA_DATAPROVIDER_BYTE_ARRAY_CACHED_PD,dataConverterContext.getWebObject()));
    }
 else     if (sabloValue instanceof Date) {
      DatePropertyType.INSTANCE.toJSON(writer,null,(Date)sabloValue,clientConversion,new DataConverterContext(NGUtils.DATE_DATAPROVIDER_CACHED_PD,dataConverterContext.getWebObject()));
    }
 else     if (sabloValue instanceof String) {
      if (((String)sabloValue).toLowerCase().startsWith(MediaURLStreamHandler.MEDIA_URL_DEF)) {
        String url=MediaPropertyType.INSTANCE.getMediaUrl(sabloValue,((WebFormComponent)dataConverterContext.getWebObject()).getDataConverterContext().getApplication().getFlattenedSolution(),null);
        MediaPropertyType.INSTANCE.toJSON(writer,key,new MediaWrapper(sabloValue,url),clientConversion,dataConverterContext);
      }
 else       if (Boolean.TRUE.equals(dataConverterContext.getPropertyDescription().getConfig())) {
        HTMLStringPropertyType.INSTANCE.toJSON(writer,null,(String)sabloValue,clientConversion,new DataConverterContext(NGUtils.TEXT_PARSEHTML_DATAPROVIDER_CACHED_PD,dataConverterContext.getWebObject()));
      }
 else {
        HTMLStringPropertyType.INSTANCE.toJSON(writer,null,(String)sabloValue,clientConversion,new DataConverterContext(NGUtils.TEXT_NO_PARSEHTML_DATAPROVIDER_CACHED_PD,dataConverterContext.getWebObject()));
      }
    }
 else {
      writer.value(sabloValue);
    }
  }
 else {
    writer.value(null);
  }
  return writer;
}",0.8728018757327081
143429,"protected String getMediaUrl(Object value,FlattenedSolution flattenedSolution,INGApplication application){
  String url=null;
  Media media=null;
  if (value instanceof CharSequence) {
    value=((CharSequence)value).toString();
  }
  if (value instanceof Integer) {
    media=flattenedSolution.getMedia(((Integer)value).intValue());
  }
 else   if (value instanceof String && ((String)value).toLowerCase().startsWith(MediaURLStreamHandler.MEDIA_URL_DEF)) {
    media=flattenedSolution.getMedia(((String)value).substring(MediaURLStreamHandler.MEDIA_URL_DEF.length()));
  }
 else {
    UUID uuid=Utils.getAsUUID(value,false);
    if (uuid != null)     media=(Media)flattenedSolution.searchPersist(uuid);
  }
  if (media != null) {
    url=""String_Node_Str"" + MediaResourcesServlet.FLATTENED_SOLUTION_ACCESS + ""String_Node_Str""+ media.getRootObject().getName()+ ""String_Node_Str""+ media.getName();
    Dimension imageSize=ImageLoader.getSize(media.getMediaData());
    boolean paramsAdded=false;
    if (imageSize != null) {
      paramsAdded=true;
      url+=""String_Node_Str"" + imageSize.width + ""String_Node_Str""+ imageSize.height;
    }
    if (application != null) {
      Solution sc=flattenedSolution.getSolutionCopy(false);
      if (sc != null && sc.getMedia(media.getName()) != null) {
        if (paramsAdded)         url+=""String_Node_Str"";
 else         url+=""String_Node_Str"";
        url+=""String_Node_Str"" + application.getWebsocketSession().getUuid() + ""String_Node_Str""+ sc.getLastModifiedTime();
      }
    }
  }
  return url;
}","public String getMediaUrl(Object value,FlattenedSolution flattenedSolution,INGApplication application){
  String url=null;
  Media media=null;
  if (value instanceof CharSequence) {
    value=((CharSequence)value).toString();
  }
  if (value instanceof Integer) {
    media=flattenedSolution.getMedia(((Integer)value).intValue());
  }
 else   if (value instanceof String && ((String)value).toLowerCase().startsWith(MediaURLStreamHandler.MEDIA_URL_DEF)) {
    media=flattenedSolution.getMedia(((String)value).substring(MediaURLStreamHandler.MEDIA_URL_DEF.length()));
  }
 else {
    UUID uuid=Utils.getAsUUID(value,false);
    if (uuid != null)     media=(Media)flattenedSolution.searchPersist(uuid);
  }
  if (media != null) {
    url=""String_Node_Str"" + MediaResourcesServlet.FLATTENED_SOLUTION_ACCESS + ""String_Node_Str""+ media.getRootObject().getName()+ ""String_Node_Str""+ media.getName();
    Dimension imageSize=ImageLoader.getSize(media.getMediaData());
    boolean paramsAdded=false;
    if (imageSize != null) {
      paramsAdded=true;
      url+=""String_Node_Str"" + imageSize.width + ""String_Node_Str""+ imageSize.height;
    }
    if (application != null) {
      Solution sc=flattenedSolution.getSolutionCopy(false);
      if (sc != null && sc.getMedia(media.getName()) != null) {
        if (paramsAdded)         url+=""String_Node_Str"";
 else         url+=""String_Node_Str"";
        url+=""String_Node_Str"" + application.getWebsocketSession().getUuid() + ""String_Node_Str""+ sc.getLastModifiedTime();
      }
    }
  }
  return url;
}",0.995791518290709
143430,"@Override public void dataProviderOrRecordChanged(IRecordInternal record,String dataProvider,boolean isFormDP,boolean isGlobalDP,boolean fireChangeEvent){
  if (typeOfDP == null) {
    typeOfDP=NGUtils.getDataProviderPropertyDescription(dataProviderID,servoyDataConverterContext.getApplication().getFlattenedSolution(),servoyDataConverterContext.getForm().getForm(),record.getParentFoundSet().getTable(),getDataProviderConfig().hasParseHtml());
  }
  String dpID=dataProviderID;
  IDataProviderLookup dpLookup=servoyDataConverterContext.getApplication().getFlattenedSolution().getDataproviderLookup(servoyDataConverterContext.getApplication().getFoundSetManager(),servoyDataConverterContext.getForm().getForm());
  if (dpLookup != null) {
    IDataProvider dp;
    try {
      dp=dpLookup.getDataProvider(dataProviderID);
      if (dp != null) {
        dpID=dp.getDataProviderID();
      }
    }
 catch (    RepositoryException e) {
      Debug.error(e);
    }
  }
  Object v=com.servoy.j2db.dataprocessing.DataAdapterList.getValueObject(record,servoyDataConverterContext.getForm().getFormScope(),dpID);
  if (v == Scriptable.NOT_FOUND)   v=null;
  v=replaceTagsIfNeeded(v);
  if (v instanceof UUID)   v=v.toString();
  boolean changed=((v != value) && (v == null || !v.equals(value)));
  value=v;
  if (changed) {
    jsonValue=null;
  }
  if (fireChangeEvent && changed) {
    changeMonitor.valueChanged();
  }
}","@Override public void dataProviderOrRecordChanged(IRecordInternal record,String dataProvider,boolean isFormDP,boolean isGlobalDP,boolean fireChangeEvent){
  if (typeOfDP == null) {
    typeOfDP=NGUtils.getDataProviderPropertyDescription(dataProviderID,servoyDataConverterContext.getApplication().getFlattenedSolution(),servoyDataConverterContext.getForm().getForm(),record != null ? record.getParentFoundSet().getTable() : null,getDataProviderConfig().hasParseHtml());
  }
  String dpID=dataProviderID;
  IDataProviderLookup dpLookup=servoyDataConverterContext.getApplication().getFlattenedSolution().getDataproviderLookup(servoyDataConverterContext.getApplication().getFoundSetManager(),servoyDataConverterContext.getForm().getForm());
  if (dpLookup != null) {
    IDataProvider dp;
    try {
      dp=dpLookup.getDataProvider(dataProviderID);
      if (dp != null) {
        dpID=dp.getDataProviderID();
      }
    }
 catch (    RepositoryException e) {
      Debug.error(e);
    }
  }
  Object v=com.servoy.j2db.dataprocessing.DataAdapterList.getValueObject(record,servoyDataConverterContext.getForm().getFormScope(),dpID);
  if (v == Scriptable.NOT_FOUND)   v=null;
  v=replaceTagsIfNeeded(v);
  if (v instanceof UUID)   v=v.toString();
  boolean changed=((v != value) && (v == null || !v.equals(value)));
  value=v;
  if (changed) {
    jsonValue=null;
  }
  if (fireChangeEvent && changed) {
    changeMonitor.valueChanged();
  }
}",0.9915907498248072
143431,"@Override public void doFilter(ServletRequest servletRequest,ServletResponse servletResponse,FilterChain filterChain) throws IOException, ServletException {
  try {
    if (Utils.getAsBoolean(System.getProperty(""String_Node_Str"",""String_Node_Str""))) {
      FormElementHelper.INSTANCE.reload();
    }
    HttpServletRequest request=(HttpServletRequest)servletRequest;
    String uri=request.getRequestURI();
    if (uri != null && (uri.endsWith(""String_Node_Str"") || uri.endsWith(""String_Node_Str""))) {
      String solutionName=getSolutionNameFromURI(uri);
      if (solutionName != null) {
        String clientUUID=request.getParameter(""String_Node_Str"");
        INGClientWebsocketSession wsSession=null;
        if (clientUUID != null) {
          wsSession=(INGClientWebsocketSession)WebsocketSessionManager.getSession(WebsocketSessionFactory.CLIENT_ENDPOINT,clientUUID);
        }
        FlattenedSolution fs=null;
        boolean closeFS=false;
        if (wsSession != null) {
          fs=wsSession.getClient().getFlattenedSolution();
        }
        if (fs == null) {
          try {
            closeFS=true;
            IApplicationServer as=ApplicationServerRegistry.getService(IApplicationServer.class);
            fs=new FlattenedSolution((SolutionMetaData)ApplicationServerRegistry.get().getLocalRepository().getRootObjectMetaData(solutionName,IRepository.SOLUTIONS),new AbstractActiveSolutionHandler(as){
              @Override public IRepository getRepository(){
                return ApplicationServerRegistry.get().getLocalRepository();
              }
            }
);
          }
 catch (          Exception e) {
            Debug.error(""String_Node_Str"" + solutionName + ""String_Node_Str""+ clientUUID,e);
          }
        }
        if (fs != null) {
          try {
            String formName=getFormNameFromURI(uri);
            if (formName != null) {
              Form f=fs.getForm(formName);
              if (f == null && wsSession != null)               f=wsSession.getClient().getFormManager().getPossibleForm(formName);
              Form form=(f != null ? fs.getFlattenedForm(f) : null);
              if (form != null) {
                if (HTTPUtils.checkAndSetUnmodified(((HttpServletRequest)servletRequest),((HttpServletResponse)servletResponse),fs.getLastModifiedTime()))                 return;
                HTTPUtils.setNoCacheHeaders((HttpServletResponse)servletResponse);
                boolean html=uri.endsWith(""String_Node_Str"");
                PrintWriter w=servletResponse.getWriter();
                if (html && form.isResponsiveLayout()) {
                  ((HttpServletResponse)servletResponse).setContentType(""String_Node_Str"");
                  FormLayoutStructureGenerator.generateLayout(form,wsSession != null ? new ServoyDataConverterContext(wsSession.getClient()) : new ServoyDataConverterContext(fs),w,Utils.getAsBoolean(request.getParameter(""String_Node_Str"")),Utils.getAsBoolean(request.getParameter(""String_Node_Str"")));
                }
 else                 if (uri.endsWith(""String_Node_Str"")) {
                  ((HttpServletResponse)servletResponse).setContentType(""String_Node_Str"");
                  boolean insideResponsiveLayout=false;
                  if (wsSession != null) {
                    IWebFormController parentForm=null;
                    String parent=request.getParameter(""String_Node_Str"");
                    if (parent != null) {
                      parentForm=(IWebFormController)((BasicFormManager)wsSession.getClient().getFormManager()).getCachedFormController(parent);
                    }
 else {
                      IFormController fc=((BasicFormManager)wsSession.getClient().getFormManager()).getCachedFormController(formName);
                      if (fc instanceof WebFormController) {
                        parentForm=((WebFormController)fc).getParentFormController();
                      }
                    }
                    while (parentForm != null) {
                      if (parentForm.getForm().isResponsiveLayout()) {
                        insideResponsiveLayout=true;
                        break;
                      }
                      parentForm=((WebFormController)parentForm).getParentFormController();
                    }
                  }
                  FormLayoutGenerator.generateRecordViewForm(w,form,wsSession != null ? new ServoyDataConverterContext(wsSession.getClient()) : new ServoyDataConverterContext(fs),insideResponsiveLayout,Utils.getAsBoolean(request.getParameter(""String_Node_Str"")),Utils.getAsBoolean(request.getParameter(""String_Node_Str"")));
                }
 else                 if (uri.endsWith(""String_Node_Str"")) {
                  ((HttpServletResponse)servletResponse).setContentType(""String_Node_Str"" + (html ? ""String_Node_Str"" : ""String_Node_Str""));
                  new FormTemplateGenerator(wsSession != null ? new ServoyDataConverterContext(wsSession.getClient()) : new ServoyDataConverterContext(fs),false,Utils.getAsBoolean(request.getParameter(""String_Node_Str""))).generate(form,formName,""String_Node_Str"",w);
                }
                w.flush();
                return;
              }
            }
 else {
              Map<String,String> variableSubstitution=new HashMap<String,String>();
              variableSubstitution.put(""String_Node_Str"",String.valueOf(fs.getSolution().getTextOrientation()));
              super.doFilter(servletRequest,servletResponse,filterChain,Arrays.asList(""String_Node_Str""),getFormScriptReferences(fs),variableSubstitution);
              return;
            }
          }
  finally {
            if (closeFS)             fs.close(null);
          }
        }
      }
    }
    Debug.log(""String_Node_Str"" + uri);
    super.doFilter(servletRequest,servletResponse,filterChain,null,null,null);
  }
 catch (  RuntimeException|Error e) {
    Debug.error(e);
    throw e;
  }
}","@Override public void doFilter(ServletRequest servletRequest,ServletResponse servletResponse,FilterChain filterChain) throws IOException, ServletException {
  try {
    if (Utils.getAsBoolean(System.getProperty(""String_Node_Str"",""String_Node_Str""))) {
      FormElementHelper.INSTANCE.reload();
    }
    HttpServletRequest request=(HttpServletRequest)servletRequest;
    String uri=request.getRequestURI();
    if (uri != null && (uri.endsWith(""String_Node_Str"") || uri.endsWith(""String_Node_Str""))) {
      String solutionName=getSolutionNameFromURI(uri);
      if (solutionName != null) {
        String clientUUID=request.getParameter(""String_Node_Str"");
        INGClientWebsocketSession wsSession=null;
        if (clientUUID != null) {
          wsSession=(INGClientWebsocketSession)WebsocketSessionManager.getSession(WebsocketSessionFactory.CLIENT_ENDPOINT,clientUUID);
        }
        FlattenedSolution fs=null;
        boolean closeFS=false;
        if (wsSession != null) {
          fs=wsSession.getClient().getFlattenedSolution();
        }
        if (fs == null) {
          try {
            closeFS=true;
            IApplicationServer as=ApplicationServerRegistry.getService(IApplicationServer.class);
            fs=new FlattenedSolution((SolutionMetaData)ApplicationServerRegistry.get().getLocalRepository().getRootObjectMetaData(solutionName,IRepository.SOLUTIONS),new AbstractActiveSolutionHandler(as){
              @Override public IRepository getRepository(){
                return ApplicationServerRegistry.get().getLocalRepository();
              }
            }
);
          }
 catch (          Exception e) {
            Debug.error(""String_Node_Str"" + solutionName + ""String_Node_Str""+ clientUUID,e);
          }
        }
        if (fs != null) {
          try {
            String formName=getFormNameFromURI(uri);
            if (formName != null) {
              Form f=fs.getForm(formName);
              if (f == null && wsSession != null)               f=wsSession.getClient().getFormManager().getPossibleForm(formName);
              Form form=(f != null ? fs.getFlattenedForm(f) : null);
              if (form != null) {
                if (HTTPUtils.checkAndSetUnmodified(((HttpServletRequest)servletRequest),((HttpServletResponse)servletResponse),fs.getLastModifiedTime()))                 return;
                HTTPUtils.setNoCacheHeaders((HttpServletResponse)servletResponse);
                boolean html=uri.endsWith(""String_Node_Str"");
                PrintWriter w=servletResponse.getWriter();
                if (html && form.isResponsiveLayout()) {
                  ((HttpServletResponse)servletResponse).setContentType(""String_Node_Str"");
                  FormLayoutStructureGenerator.generateLayout(form,formName,wsSession != null ? new ServoyDataConverterContext(wsSession.getClient()) : new ServoyDataConverterContext(fs),w,Utils.getAsBoolean(request.getParameter(""String_Node_Str"")),Utils.getAsBoolean(request.getParameter(""String_Node_Str"")));
                }
 else                 if (uri.endsWith(""String_Node_Str"")) {
                  ((HttpServletResponse)servletResponse).setContentType(""String_Node_Str"");
                  boolean insideResponsiveLayout=false;
                  if (wsSession != null) {
                    IWebFormController parentForm=null;
                    String parent=request.getParameter(""String_Node_Str"");
                    if (parent != null) {
                      parentForm=(IWebFormController)((BasicFormManager)wsSession.getClient().getFormManager()).getCachedFormController(parent);
                    }
 else {
                      IFormController fc=((BasicFormManager)wsSession.getClient().getFormManager()).getCachedFormController(formName);
                      if (fc instanceof WebFormController) {
                        parentForm=((WebFormController)fc).getParentFormController();
                      }
                    }
                    while (parentForm != null) {
                      if (parentForm.getForm().isResponsiveLayout()) {
                        insideResponsiveLayout=true;
                        break;
                      }
                      parentForm=((WebFormController)parentForm).getParentFormController();
                    }
                  }
                  FormLayoutGenerator.generateRecordViewForm(w,form,formName,wsSession != null ? new ServoyDataConverterContext(wsSession.getClient()) : new ServoyDataConverterContext(fs),insideResponsiveLayout,Utils.getAsBoolean(request.getParameter(""String_Node_Str"")),Utils.getAsBoolean(request.getParameter(""String_Node_Str"")));
                }
 else                 if (uri.endsWith(""String_Node_Str"")) {
                  ((HttpServletResponse)servletResponse).setContentType(""String_Node_Str"" + (html ? ""String_Node_Str"" : ""String_Node_Str""));
                  new FormTemplateGenerator(wsSession != null ? new ServoyDataConverterContext(wsSession.getClient()) : new ServoyDataConverterContext(fs),false,Utils.getAsBoolean(request.getParameter(""String_Node_Str""))).generate(form,formName,""String_Node_Str"",w);
                }
                w.flush();
                return;
              }
            }
 else {
              Map<String,String> variableSubstitution=new HashMap<String,String>();
              variableSubstitution.put(""String_Node_Str"",String.valueOf(fs.getSolution().getTextOrientation()));
              super.doFilter(servletRequest,servletResponse,filterChain,Arrays.asList(""String_Node_Str""),getFormScriptReferences(fs),variableSubstitution);
              return;
            }
          }
  finally {
            if (closeFS)             fs.close(null);
          }
        }
      }
    }
    Debug.log(""String_Node_Str"" + uri);
    super.doFilter(servletRequest,servletResponse,filterChain,null,null,null);
  }
 catch (  RuntimeException|Error e) {
    Debug.error(e);
    throw e;
  }
}",0.9984838274932616
143432,"@Override protected void doOldShow(String formName,boolean closeAll,boolean legacyV3Behavior){
  IWebFormController controller=getApplication().getFormManager().getForm(formName);
  if (controller != null) {
    getApplication().getFormManager().showFormInContainer(formName,this,getTitle(),true,windowName);
    this.formName=formName;
    controller.getFormUI().setParentWindowName(getName());
    switchForm(controller);
  }
  Form form=getApplication().getFlattenedSolution().getForm(formName);
  String titleArg=getTitle();
  titleArg=titleArg == null ? form.getName() : titleArg;
  getApplication().getWebsocketSession().getClientService(NGRuntimeWindowManager.WINDOW_SERVICE).executeAsyncServiceCall(""String_Node_Str"",new Object[]{getName(),form.getName(),titleArg});
  if (windowType == JSWindow.MODAL_DIALOG && getApplication().getWebsocketSession().getEventDispatcher() != null) {
    try {
      getApplication().getWebsocketSession().getEventDispatcher().suspend(this,IEventDispatcher.EVENT_LEVEL_DEFAULT,IEventDispatcher.NO_TIMEOUT);
    }
 catch (    CancellationException e) {
      throw e;
    }
catch (    TimeoutException e) {
      Debug.error(""String_Node_Str"");
    }
  }
}","@Override protected void doOldShow(String formName,boolean closeAll,boolean legacyV3Behavior){
  IWebFormController controller=getApplication().getFormManager().getForm(formName);
  if (controller != null) {
    getApplication().getFormManager().showFormInContainer(formName,this,getTitle(),true,windowName);
    this.formName=formName;
    controller.getFormUI().setParentWindowName(getName());
    switchForm(controller);
  }
  String titleArg=getTitle();
  titleArg=titleArg == null ? formName : titleArg;
  getApplication().getWebsocketSession().getClientService(NGRuntimeWindowManager.WINDOW_SERVICE).executeAsyncServiceCall(""String_Node_Str"",new Object[]{getName(),formName,titleArg});
  if (windowType == JSWindow.MODAL_DIALOG && getApplication().getWebsocketSession().getEventDispatcher() != null) {
    try {
      getApplication().getWebsocketSession().getEventDispatcher().suspend(this,IEventDispatcher.EVENT_LEVEL_DEFAULT,IEventDispatcher.NO_TIMEOUT);
    }
 catch (    CancellationException e) {
      throw e;
    }
catch (    TimeoutException e) {
      Debug.error(""String_Node_Str"");
    }
  }
}",0.9570871261378412
143433,"public static void generateRecordViewForm(PrintWriter writer,Form form,IServoyDataConverterContext context,boolean responsiveMode,boolean design,boolean highlight){
  generateFormStartTag(writer,form,responsiveMode,design);
  Iterator<Part> it=form.getParts();
  if (design) {
    while (it.hasNext()) {
      Part part=it.next();
      if (!Part.rendersOnlyInPrint(part.getPartType())) {
        writer.print(""String_Node_Str"");
        writer.print(PartWrapper.getName(part));
        writer.println(""String_Node_Str"");
        generateEndDiv(writer);
      }
    }
  }
  it=form.getParts();
  while (it.hasNext()) {
    Part part=it.next();
    if (!Part.rendersOnlyInPrint(part.getPartType())) {
      if (!design && !responsiveMode) {
        writer.print(""String_Node_Str"");
        writer.print(PartWrapper.getName(part));
        writer.println(""String_Node_Str"");
      }
      for (      BaseComponent bc : PartWrapper.getBaseComponents(part,form,context,design)) {
        FormElement fe=FormElementHelper.INSTANCE.getFormElement(bc,context,null);
        if (!responsiveMode)         generateFormElementWrapper(writer,fe,design,form);
        generateFormElement(writer,fe,false,highlight);
        if (!responsiveMode)         generateEndDiv(writer);
      }
      if (!design && !responsiveMode)       generateEndDiv(writer);
    }
  }
  generateEndDiv(writer);
}","public static void generateRecordViewForm(PrintWriter writer,Form form,String realFormName,IServoyDataConverterContext context,boolean responsiveMode,boolean design,boolean highlight){
  generateFormStartTag(writer,form,realFormName,responsiveMode,design);
  Iterator<Part> it=form.getParts();
  if (design) {
    while (it.hasNext()) {
      Part part=it.next();
      if (!Part.rendersOnlyInPrint(part.getPartType())) {
        writer.print(""String_Node_Str"");
        writer.print(PartWrapper.getName(part));
        writer.println(""String_Node_Str"");
        generateEndDiv(writer);
      }
    }
  }
  it=form.getParts();
  while (it.hasNext()) {
    Part part=it.next();
    if (!Part.rendersOnlyInPrint(part.getPartType())) {
      if (!design && !responsiveMode) {
        writer.print(""String_Node_Str"");
        writer.print(PartWrapper.getName(part));
        writer.println(""String_Node_Str"");
      }
      for (      BaseComponent bc : PartWrapper.getBaseComponents(part,form,context,design)) {
        FormElement fe=FormElementHelper.INSTANCE.getFormElement(bc,context,null);
        if (!responsiveMode)         generateFormElementWrapper(writer,fe,design,form);
        generateFormElement(writer,fe,false,highlight);
        if (!responsiveMode)         generateEndDiv(writer);
      }
      if (!design && !responsiveMode)       generateEndDiv(writer);
    }
  }
  generateEndDiv(writer);
}",0.9881593110871906
143434,"public static void generateFormStartTag(PrintWriter writer,Form form,boolean responsiveMode,boolean design){
  writer.print(String.format(""String_Node_Str"",form.getName()));
  if (Utils.getAsBoolean(Settings.getInstance().getProperty(""String_Node_Str"",""String_Node_Str""))) {
    writer.print(String.format(""String_Node_Str"",form.getName()));
  }
  if (!form.isResponsiveLayout() && !responsiveMode) {
    writer.print(""String_Node_Str"");
  }
 else   if (design) {
    writer.print(""String_Node_Str"");
  }
  writer.print(""String_Node_Str"");
  if (!isTableOrListView(form)) {
    writer.print(""String_Node_Str"");
  }
  if (form.getStyleClass() != null) {
    writer.print(""String_Node_Str"");
    writer.print(form.getStyleClass());
    writer.print(""String_Node_Str"");
  }
  writer.println(""String_Node_Str"");
}","public static void generateFormStartTag(PrintWriter writer,Form form,String realFormName,boolean responsiveMode,boolean design){
  writer.print(String.format(""String_Node_Str"",realFormName));
  if (Utils.getAsBoolean(Settings.getInstance().getProperty(""String_Node_Str"",""String_Node_Str""))) {
    writer.print(String.format(""String_Node_Str"",realFormName));
  }
  if (!form.isResponsiveLayout() && !responsiveMode) {
    writer.print(""String_Node_Str"");
  }
 else   if (design) {
    writer.print(""String_Node_Str"");
  }
  writer.print(""String_Node_Str"");
  if (!isTableOrListView(form)) {
    writer.print(""String_Node_Str"");
  }
  if (form.getStyleClass() != null) {
    writer.print(""String_Node_Str"");
    writer.print(form.getStyleClass());
    writer.print(""String_Node_Str"");
  }
  writer.println(""String_Node_Str"");
}",0.9302325581395348
143435,"public static void generateLayout(Form form,ServoyDataConverterContext context,PrintWriter writer,boolean design,boolean highlight){
  try {
    FormLayoutGenerator.generateFormStartTag(writer,form,false,design);
    Iterator<IPersist> components=form.getAllObjects(PositionComparator.XY_PERSIST_COMPARATOR);
    while (components.hasNext()) {
      IPersist component=components.next();
      if (component instanceof LayoutContainer) {
        generateLayoutContainer((LayoutContainer)component,context,writer,design,highlight);
      }
 else       if (component instanceof IFormElement) {
        FormLayoutGenerator.generateFormElement(writer,FormElementHelper.INSTANCE.getFormElement((IFormElement)component,context,null),design,highlight);
      }
    }
    FormLayoutGenerator.generateFormEndTag(writer);
  }
 catch (  Exception e) {
    Debug.error(e);
  }
}","public static void generateLayout(Form form,String realFormName,ServoyDataConverterContext context,PrintWriter writer,boolean design,boolean highlight){
  try {
    FormLayoutGenerator.generateFormStartTag(writer,form,realFormName,false,design);
    Iterator<IPersist> components=form.getAllObjects(PositionComparator.XY_PERSIST_COMPARATOR);
    while (components.hasNext()) {
      IPersist component=components.next();
      if (component instanceof LayoutContainer) {
        generateLayoutContainer((LayoutContainer)component,context,writer,design,highlight);
      }
 else       if (component instanceof IFormElement) {
        FormLayoutGenerator.generateFormElement(writer,FormElementHelper.INSTANCE.getFormElement((IFormElement)component,context,null),design,highlight);
      }
    }
    FormLayoutGenerator.generateFormEndTag(writer);
  }
 catch (  Exception e) {
    Debug.error(e);
  }
}",0.9813031161473088
143436,"/** 
 * this is a full recreate ui.
 * @param formController
 * @param dal
 * @return
 * @throws RepositoryException
 */
public final void init(){
  components.clear();
  IDataAdapterList previousDataAdapterList=dataAdapterList;
  dataAdapterList=new DataAdapterList(formController);
  ElementScope elementsScope=initElementScope(formController);
  List<FormElement> formElements=getFormElements();
  int counter=0;
  for (  FormElement fe : formElements) {
    WebComponentSpecification componentSpec=fe.getWebComponentSpec(false);
    if (componentSpec == null) {
      getApplication().reportError(""String_Node_Str"" + fe + ""String_Node_Str""+ formController.getName(),null);
      continue;
    }
    WebFormComponent component=ComponentFactory.createComponent(getApplication(),dataAdapterList,fe,this);
    if (component != null) {
      counter=contributeComponentToElementsScope(elementsScope,counter,fe,componentSpec,component);
    }
  }
  DefaultNavigatorWebComponent nav=(DefaultNavigatorWebComponent)components.get(DefaultNavigator.NAME_PROP_VALUE);
  if (nav != null) {
    nav.newFoundset(null);
  }
  if (formController.getForm().getNavigatorID() == Form.NAVIGATOR_DEFAULT) {
    add(new DefaultNavigatorWebComponent(dataAdapterList));
  }
  if (previousDataAdapterList != null) {
    IRecordInternal record=((DataAdapterList)previousDataAdapterList).getRecord();
    if (record != null) {
      dataAdapterList.setRecord(record,false);
      previousDataAdapterList.setRecord(null,false);
      nav=(DefaultNavigatorWebComponent)components.get(DefaultNavigator.NAME_PROP_VALUE);
      if (nav != null)       nav.newFoundset(record.getParentFoundSet());
    }
  }
}","/** 
 * this is a full recreate ui.
 * @param formController
 * @param dal
 * @return
 * @throws RepositoryException
 */
public void init(){
  components.clear();
  IDataAdapterList previousDataAdapterList=dataAdapterList;
  dataAdapterList=new DataAdapterList(formController);
  ElementScope elementsScope=initElementScope(formController);
  List<FormElement> formElements=getFormElements();
  int counter=0;
  for (  FormElement fe : formElements) {
    WebComponentSpecification componentSpec=fe.getWebComponentSpec(false);
    if (componentSpec == null) {
      getApplication().reportError(""String_Node_Str"" + fe + ""String_Node_Str""+ formController.getName(),null);
      continue;
    }
    WebFormComponent component=ComponentFactory.createComponent(getApplication(),dataAdapterList,fe,this);
    if (component != null) {
      counter=contributeComponentToElementsScope(elementsScope,counter,fe,componentSpec,component);
    }
  }
  DefaultNavigatorWebComponent nav=(DefaultNavigatorWebComponent)components.get(DefaultNavigator.NAME_PROP_VALUE);
  if (nav != null) {
    nav.newFoundset(null);
  }
  if (formController.getForm().getNavigatorID() == Form.NAVIGATOR_DEFAULT) {
    add(new DefaultNavigatorWebComponent(dataAdapterList));
  }
  if (previousDataAdapterList != null) {
    IRecordInternal record=((DataAdapterList)previousDataAdapterList).getRecord();
    if (record != null) {
      dataAdapterList.setRecord(record,false);
      previousDataAdapterList.setRecord(null,false);
      nav=(DefaultNavigatorWebComponent)components.get(DefaultNavigator.NAME_PROP_VALUE);
      if (nav != null)       nav.newFoundset(record.getParentFoundSet());
    }
  }
}",0.9982089552238806
143437,"@Override public void dataProviderOrRecordChanged(IRecordInternal record,String dataProvider,boolean isFormDP,boolean isGlobalDP,boolean fireChangeEvent){
  if (typeOfDP == null) {
    typeOfDP=NGUtils.getDataProviderPropertyDescription(dataProviderID,servoyDataConverterContext.getApplication().getFlattenedSolution(),servoyDataConverterContext.getForm().getForm(),record.getParentFoundSet().getTable(),getDataProviderConfig().hasParseHtml());
  }
  Object v=com.servoy.j2db.dataprocessing.DataAdapterList.getValueObject(record,servoyDataConverterContext.getForm().getFormScope(),dataProviderID);
  if (v == Scriptable.NOT_FOUND)   v=null;
  boolean changed=((v != value) && (v == null || !v.equals(value)));
  value=v;
  if (changed) {
    jsonValue=null;
  }
  if (fireChangeEvent && changed) {
    changeMonitor.valueChanged();
  }
}","@Override public void dataProviderOrRecordChanged(IRecordInternal record,String dataProvider,boolean isFormDP,boolean isGlobalDP,boolean fireChangeEvent){
  if (typeOfDP == null) {
    typeOfDP=NGUtils.getDataProviderPropertyDescription(dataProviderID,servoyDataConverterContext.getApplication().getFlattenedSolution(),servoyDataConverterContext.getForm().getForm(),record.getParentFoundSet().getTable(),getDataProviderConfig().hasParseHtml());
  }
  Object v=com.servoy.j2db.dataprocessing.DataAdapterList.getValueObject(record,servoyDataConverterContext.getForm().getFormScope(),dataProviderID != null ? dataProviderID.toLowerCase() : null);
  if (v == Scriptable.NOT_FOUND)   v=null;
  boolean changed=((v != value) && (v == null || !v.equals(value)));
  value=v;
  if (changed) {
    jsonValue=null;
  }
  if (fireChangeEvent && changed) {
    changeMonitor.valueChanged();
  }
}",0.9732558139534884
143438,"@Override public JSONWriter toTemplateJSONValue(JSONWriter writer,String key,String formElementValue,PropertyDescription pd,DataConversion browserConversionMarkers,FlattenedSolution fs,FormElementContext formElementContext) throws JSONException {
  if (formElementValue != null && valueInTemplate(formElementValue,pd,formElementContext)) {
    JSONUtils.addKeyIfPresent(writer,key);
    writer.value(formElementValue);
  }
  return writer;
}","@Override public JSONWriter toTemplateJSONValue(JSONWriter writer,String key,String formElementValue,PropertyDescription pd,DataConversion browserConversionMarkers,FlattenedSolution fs,FormElementContext formElementContext) throws JSONException {
  JSONUtils.addKeyIfPresent(writer,key);
  if (formElementValue != null && valueInTemplate(formElementValue,pd,formElementContext)) {
    writer.value(formElementValue);
  }
 else {
    writer.value(""String_Node_Str"");
  }
  return writer;
}",0.8396124865446717
143439,"@Override public JSONWriter toTemplateJSONValue(JSONWriter writer,String key,String formElementValue,PropertyDescription pd,DataConversion browserConversionMarkers,FlattenedSolution fs,FormElementContext formElementContext) throws JSONException {
  TagStringConfig config=getConfig(pd);
  if (formElementValue != null && valueInTemplate(formElementValue,pd,formElementContext)) {
    JSONUtils.addKeyIfPresent(writer,key);
    if (HtmlUtils.startsWithHtml(formElementValue)) {
      writer.value(""String_Node_Str"");
    }
 else     writer.value(formElementValue);
  }
  return writer;
}","@Override public JSONWriter toTemplateJSONValue(JSONWriter writer,String key,String formElementValue,PropertyDescription pd,DataConversion browserConversionMarkers,FlattenedSolution fs,FormElementContext formElementContext) throws JSONException {
  if (formElementValue != null && valueInTemplate(formElementValue,pd,formElementContext)) {
    JSONUtils.addKeyIfPresent(writer,key);
    writer.value(formElementValue);
  }
  return writer;
}",0.8003894839337877
143440,"@Override public boolean valueInTemplate(String formElementVal,PropertyDescription pd,FormElementContext formElementContext){
  if (formElementVal == null)   return true;
  TagStringConfig config=((TagStringConfig)pd.getConfig());
  return !((wouldLikeToParseTags(config,formElementContext.getFormElement()) && formElementVal.contains(""String_Node_Str"")) || formElementVal.startsWith(""String_Node_Str""));
}","@Override public boolean valueInTemplate(String formElementVal,PropertyDescription pd,FormElementContext formElementContext){
  if (formElementVal == null)   return true;
  TagStringConfig config=((TagStringConfig)pd.getConfig());
  return !((wouldLikeToParseTags(config,formElementContext.getFormElement()) && formElementVal.contains(""String_Node_Str"")) || formElementVal.startsWith(""String_Node_Str"") || HtmlUtils.startsWithHtml(formElementVal));
}",0.9485981308411215
143441,"protected static void fillProperty(Object propertyValue,Object formElementValue,PropertyDescription propertySpec,WebFormComponent component){
  String propName=propertySpec.getName();
  if (propertyValue != null) {
    boolean templatevalue=true;
    if (propertySpec.getType() instanceof ISupportTemplateValue) {
      templatevalue=((ISupportTemplateValue)propertySpec.getType()).valueInTemplate(formElementValue,propertySpec,component.getFormElement());
    }
    if (templatevalue) {
      component.setDefaultProperty(propName,propertyValue);
    }
 else {
      component.setProperty(propName,propertyValue);
    }
  }
}","protected static void fillProperty(Object propertyValue,Object formElementValue,PropertyDescription propertySpec,WebFormComponent component){
  String propName=propertySpec.getName();
  if (propertyValue != null) {
    boolean templatevalue=true;
    if (propertySpec.getType() instanceof ISupportTemplateValue) {
      templatevalue=((ISupportTemplateValue)propertySpec.getType()).valueInTemplate(formElementValue,propertySpec,new FormElementContext(component.getFormElement(),null));
    }
    if (templatevalue) {
      component.setDefaultProperty(propName,propertyValue);
    }
 else {
      component.setProperty(propName,propertyValue);
    }
  }
}",0.9773614363778298
143442,"public static WebFormComponent createComponent(IApplication application,IDataAdapterList dataAdapterList,FormElement fe,Container parentToAddTo){
  String name=fe.getName();
  if (name != null) {
    IPersist persist=fe.getPersistIfAvailable();
    int access=0;
    if (persist != null) {
      access=application.getFlattenedSolution().getSecurityAccess(persist.getUUID());
      if (!((access & IRepository.VIEWABLE) != 0))       return null;
    }
    WebFormComponent webComponent=new WebFormComponent(name,fe,dataAdapterList);
    if (parentToAddTo != null)     parentToAddTo.add(webComponent);
    WebComponentSpecification componentSpec=fe.getWebComponentSpec(false);
    for (    String propName : fe.getRawPropertyValues().keySet()) {
      if (componentSpec.getProperty(propName) == null)       continue;
      Object value=fe.getPropertyValueConvertedForWebComponent(propName,webComponent,(DataAdapterList)dataAdapterList);
      if (value == null)       continue;
      fillProperty(value,fe.getPropertyValue(propName),componentSpec.getProperty(propName),webComponent);
    }
    if (persist != null && !((access & IRepository.ACCESSIBLE) != 0))     webComponent.setProperty(""String_Node_Str"",false);
    for (    String eventName : componentSpec.getHandlers().keySet()) {
      Object eventValue=fe.getPropertyValue(eventName);
      if (eventValue instanceof String) {
        UUID uuid=UUID.fromString((String)eventValue);
        IPersist function=application.getFlattenedSolution().searchPersist(uuid);
        if (function != null) {
          webComponent.add(eventName,function.getID());
        }
 else {
          Debug.warn(""String_Node_Str"" + eventName + ""String_Node_Str""+ fe.getForm().getName()+ ""String_Node_Str""+ fe.getName()+ ""String_Node_Str"");
        }
      }
 else       if (eventValue instanceof Number && ((Number)eventValue).intValue() > 0) {
        webComponent.add(eventName,((Number)eventValue).intValue());
      }
    }
    webComponent.clearChanges();
    return webComponent;
  }
  return null;
}","public static WebFormComponent createComponent(IApplication application,IDataAdapterList dataAdapterList,FormElement fe,Container parentToAddTo){
  String name=fe.getName();
  if (name != null) {
    IPersist persist=fe.getPersistIfAvailable();
    int access=0;
    if (persist != null) {
      access=application.getFlattenedSolution().getSecurityAccess(persist.getUUID());
      if (!((access & IRepository.VIEWABLE) != 0))       return null;
    }
    WebFormComponent webComponent=new WebFormComponent(name,fe,dataAdapterList);
    if (parentToAddTo != null)     parentToAddTo.add(webComponent);
    WebComponentSpecification componentSpec=fe.getWebComponentSpec(false);
    for (    String propName : fe.getRawPropertyValues().keySet()) {
      if (componentSpec.getProperty(propName) == null)       continue;
      Object value=fe.getPropertyValueConvertedForWebComponent(propName,webComponent,(DataAdapterList)dataAdapterList);
      if (value == null)       continue;
      fillProperty(value,fe.getPropertyValue(propName),componentSpec.getProperty(propName),webComponent);
    }
    if (persist != null) {
      int elementSecurity;
      if (persist.getParent() instanceof Portal) {
        elementSecurity=application.getFlattenedSolution().getSecurityAccess(((Portal)persist.getParent()).getUUID());
      }
 else {
        elementSecurity=access;
      }
      if (!((elementSecurity & IRepository.ACCESSIBLE) != 0)) {
        webComponent.setProperty(""String_Node_Str"",false);
      }
 else {
        int formSecurity=application.getFlattenedSolution().getSecurityAccess(fe.getForm().getUUID());
        if (!((formSecurity & IRepository.ACCESSIBLE) != 0)) {
          webComponent.setProperty(""String_Node_Str"",false);
        }
      }
    }
    for (    String eventName : componentSpec.getHandlers().keySet()) {
      Object eventValue=fe.getPropertyValue(eventName);
      if (eventValue instanceof String) {
        UUID uuid=UUID.fromString((String)eventValue);
        IPersist function=application.getFlattenedSolution().searchPersist(uuid);
        if (function != null) {
          webComponent.add(eventName,function.getID());
        }
 else {
          Debug.warn(""String_Node_Str"" + eventName + ""String_Node_Str""+ fe.getForm().getName()+ ""String_Node_Str""+ fe.getName()+ ""String_Node_Str"");
        }
      }
 else       if (eventValue instanceof Number && ((Number)eventValue).intValue() > 0) {
        webComponent.add(eventName,((Number)eventValue).intValue());
      }
    }
    webComponent.clearChanges();
    return webComponent;
  }
  return null;
}",0.8779434003024411
143443,"public JSONWriter propertiesAsTemplateJSON(JSONWriter writer) throws JSONException {
  TypedData<Map<String,Object>> propertiesTypedData=propertiesForTemplateJSON();
  JSONWriter propertyWriter=(writer != null ? writer : new JSONStringer());
  try {
    propertyWriter.object();
    JSONUtils.writeDataWithConversions(new FormElementToJSON(fs),propertyWriter,propertiesTypedData.content,propertiesTypedData.contentType,this);
    return propertyWriter.endObject();
  }
 catch (  JSONException|IllegalArgumentException e) {
    Debug.error(""String_Node_Str"" + getTagname() + ""String_Node_Str"",e);
    throw e;
  }
}","public JSONWriter propertiesAsTemplateJSON(JSONWriter writer,FormElementContext context) throws JSONException {
  TypedData<Map<String,Object>> propertiesTypedData=propertiesForTemplateJSON();
  JSONWriter propertyWriter=(writer != null ? writer : new JSONStringer());
  try {
    propertyWriter.object();
    JSONUtils.writeDataWithConversions(new FormElementToJSON(fs),propertyWriter,propertiesTypedData.content,propertiesTypedData.contentType,context);
    return propertyWriter.endObject();
  }
 catch (  JSONException|IllegalArgumentException e) {
    Debug.error(""String_Node_Str"" + getTagname() + ""String_Node_Str"",e);
    throw e;
  }
}",0.9697933227344993
143444,"public String getPropertiesString() throws JSONException {
  return propertiesAsTemplateJSON(null).toString();
}","public String getPropertiesString() throws JSONException {
  return propertiesAsTemplateJSON(null,new FormElementContext(this,null)).toString();
}",0.8682170542635659
143445,"public FormElement getFormElement(IFormElement formElement,FlattenedSolution fs,PropertyPath propertyPath,final boolean designer){
  if (designer || (fs.getSolutionCopy(false) != null)) {
    if (propertyPath == null) {
      propertyPath=new PropertyPath();
      propertyPath.setShouldAddElementName();
    }
    if (formElement instanceof BodyPortal)     return createBodyPortalFormElement((BodyPortal)formElement,fs,designer);
 else     return new FormElement(formElement,fs,propertyPath,designer);
  }
  FormElement persistWrapper=persistWrappers.get(formElement);
  if (persistWrapper == null) {
    if (propertyPath == null) {
      propertyPath=new PropertyPath();
      propertyPath.setShouldAddElementName();
    }
    if (formElement instanceof BodyPortal)     persistWrapper=createBodyPortalFormElement((BodyPortal)formElement,getSharedFlattenedSolution(fs),designer);
 else     persistWrapper=new FormElement(formElement,getSharedFlattenedSolution(fs),propertyPath,false);
    FormElement existing=persistWrappers.putIfAbsent(formElement,persistWrapper);
    if (existing != null) {
      persistWrapper=existing;
    }
  }
  return persistWrapper;
}","public FormElement getFormElement(IFormElement formElement,FlattenedSolution fs,PropertyPath propertyPath,final boolean designer){
  if (designer || (fs.getSolutionCopy(false) != null)) {
    if (propertyPath == null) {
      propertyPath=new PropertyPath();
      propertyPath.setShouldAddElementName();
    }
    if (formElement instanceof BodyPortal)     return createBodyPortalFormElement((BodyPortal)formElement,fs,designer,fs);
 else     return new FormElement(formElement,fs,propertyPath,designer);
  }
  FormElement persistWrapper=persistWrappers.get(formElement);
  if (persistWrapper == null) {
    if (propertyPath == null) {
      propertyPath=new PropertyPath();
      propertyPath.setShouldAddElementName();
    }
    if (formElement instanceof BodyPortal)     persistWrapper=createBodyPortalFormElement((BodyPortal)formElement,getSharedFlattenedSolution(fs),designer,fs);
 else     persistWrapper=new FormElement(formElement,getSharedFlattenedSolution(fs),propertyPath,false);
    FormElement existing=persistWrappers.putIfAbsent(formElement,persistWrapper);
    if (existing != null) {
      persistWrapper=existing;
    }
  }
  return persistWrapper;
}",0.997427101200686
143446,"private FormElement createBodyPortalFormElement(BodyPortal listViewPortal,FlattenedSolution fs,final boolean isInDesigner){
  Form form=listViewPortal.getForm();
  Part bodyPart=null;
  for (  Part prt : Utils.iterate(form.getParts())) {
    if (prt.getPartType() == Part.BODY) {
      bodyPart=prt;
      break;
    }
  }
  if (bodyPart != null) {
    try {
      String name=""String_Node_Str"" + form.getName();
      int startPos=form.getPartStartYPos(bodyPart.getID());
      int endPos=bodyPart.getHeight();
      int bodyheight=endPos - startPos;
      JSONObject portal=new JSONObject();
      portal.put(""String_Node_Str"",name);
      portal.put(""String_Node_Str"",!listViewPortal.isTableview());
      portal.put(""String_Node_Str"",!listViewPortal.isTableview() ? bodyheight : getRowHeight(form));
      portal.put(""String_Node_Str"",form.getScrollbars());
      if (listViewPortal.isTableview()) {
        int headerHeight=30;
        if (form.hasPart(Part.HEADER)) {
          headerHeight=0;
        }
        portal.put(""String_Node_Str"",headerHeight);
        portal.put(""String_Node_Str"",form.getOnSortCmdMethodID() != -1);
      }
      portal.put(""String_Node_Str"",IAnchorConstants.ALL);
      JSONObject location=new JSONObject();
      location.put(""String_Node_Str"",0);
      location.put(""String_Node_Str"",isInDesigner ? startPos : 0);
      portal.put(""String_Node_Str"",location);
      JSONObject size=new JSONObject();
      size.put(""String_Node_Str"",form.getWidth());
      size.put(""String_Node_Str"",bodyheight);
      portal.put(""String_Node_Str"",size);
      portal.put(""String_Node_Str"",listViewPortal.getVisible());
      portal.put(""String_Node_Str"",listViewPortal.getEnabled());
      portal.put(""String_Node_Str"",new JSONArray());
      JSONObject relatedFoundset=new JSONObject();
      relatedFoundset.put(""String_Node_Str"",""String_Node_Str"");
      portal.put(""String_Node_Str"",relatedFoundset);
      PropertyPath propertyPath=new PropertyPath();
      propertyPath.setShouldAddElementName();
      FormElement portalFormElement=new FormElement(""String_Node_Str"",portal,form,name,fs,propertyPath,isInDesigner);
      PropertyDescription pd=portalFormElement.getWebComponentSpec().getProperties().get(""String_Node_Str"");
      if (pd != null)       pd=((CustomJSONArrayType<?,?>)pd.getType()).getCustomJSONTypeDefinition();
      if (pd == null) {
        Debug.error(new RuntimeException(""String_Node_Str""));
        return null;
      }
      ComponentPropertyType type=((ComponentPropertyType)pd.getType());
      Map<String,Object> portalFormElementProperties=new HashMap<>(portalFormElement.getRawPropertyValues());
      portalFormElementProperties.put(""String_Node_Str"",startPos);
      portalFormElementProperties.put(""String_Node_Str"",bodyPart.getHeight());
      Iterator<IPersist> it=form.getAllObjects(PositionComparator.XY_PERSIST_COMPARATOR);
      List<Object> children=new ArrayList<>();
      List<String> headersText=new ArrayList<>();
      propertyPath.add(portalFormElement.getName());
      propertyPath.add(""String_Node_Str"");
      int minBodyPortalTabSeq=-2;
      while (it.hasNext()) {
        IPersist persist=it.next();
        if (persist instanceof IFormElement) {
          Point loc=((IFormElement)persist).getLocation();
          if (startPos <= loc.y && endPos > loc.y) {
            if (listViewPortal.isTableview() && persist instanceof GraphicalComponent && ((GraphicalComponent)persist).getLabelFor() != null)             continue;
            propertyPath.add(children.size());
            FormElement fe=getFormElement((IFormElement)persist,fs,propertyPath,isInDesigner);
            if (listViewPortal.isTableview()) {
              String elementName=fe.getName();
              boolean hasLabelFor=false;
              Iterator<GraphicalComponent> graphicalComponents=form.getGraphicalComponents();
              while (graphicalComponents.hasNext()) {
                GraphicalComponent gc=graphicalComponents.next();
                if (gc.getLabelFor() != null && Utils.equalObjects(elementName,gc.getLabelFor()) && startPos <= gc.getLocation().y && endPos > gc.getLocation().y) {
                  headersText.add(gc.getText());
                  hasLabelFor=true;
                  break;
                }
              }
              if (!hasLabelFor) {
                if (fe.getPropertyValue(""String_Node_Str"") != null) {
                  headersText.add(fe.getPropertyValue(""String_Node_Str"").toString());
                }
 else {
                  headersText.add(null);
                }
              }
            }
            children.add(type.getFormElementValue(null,pd,propertyPath,fe,fs));
            propertyPath.backOneLevel();
            Collection<PropertyDescription> tabSequenceProperties=fe.getWebComponentSpec().getProperties(NGTabSeqPropertyType.NG_INSTANCE);
            for (            PropertyDescription tabSeqProperty : tabSequenceProperties) {
              String tabSeqPropertyName=tabSeqProperty.getName();
              Integer tabSeqVal=(Integer)fe.getPropertyValue(tabSeqPropertyName);
              if (tabSeqVal == null)               tabSeqVal=Integer.valueOf(0);
              if (minBodyPortalTabSeq < 0 || minBodyPortalTabSeq > tabSeqVal.intValue())               minBodyPortalTabSeq=tabSeqVal.intValue();
            }
          }
        }
      }
      propertyPath.backOneLevel();
      propertyPath.backOneLevel();
      portalFormElementProperties.put(""String_Node_Str"",children.toArray());
      if (listViewPortal.isTableview()) {
        portalFormElementProperties.put(""String_Node_Str"",headersText.toArray());
      }
      portalFormElementProperties.put(""String_Node_Str"",Integer.valueOf(minBodyPortalTabSeq));
      portalFormElement.updatePropertyValuesDontUse(portalFormElementProperties);
      return portalFormElement;
    }
 catch (    JSONException ex) {
      Debug.error(""String_Node_Str"",ex);
    }
  }
  return null;
}","private FormElement createBodyPortalFormElement(BodyPortal listViewPortal,FlattenedSolution fs,final boolean isInDesigner,FlattenedSolution clientFlattenedSolution){
  Form form=listViewPortal.getForm();
  Part bodyPart=null;
  for (  Part prt : Utils.iterate(form.getParts())) {
    if (prt.getPartType() == Part.BODY) {
      bodyPart=prt;
      break;
    }
  }
  if (bodyPart != null) {
    try {
      String name=""String_Node_Str"" + form.getName();
      int startPos=form.getPartStartYPos(bodyPart.getID());
      int endPos=bodyPart.getHeight();
      int bodyheight=endPos - startPos;
      JSONObject portal=new JSONObject();
      portal.put(""String_Node_Str"",name);
      portal.put(""String_Node_Str"",!listViewPortal.isTableview());
      portal.put(""String_Node_Str"",!listViewPortal.isTableview() ? bodyheight : getRowHeight(form));
      portal.put(""String_Node_Str"",form.getScrollbars());
      if (listViewPortal.isTableview()) {
        int headerHeight=30;
        if (form.hasPart(Part.HEADER)) {
          headerHeight=0;
        }
        portal.put(""String_Node_Str"",headerHeight);
        portal.put(""String_Node_Str"",form.getOnSortCmdMethodID() != -1);
      }
      portal.put(""String_Node_Str"",IAnchorConstants.ALL);
      JSONObject location=new JSONObject();
      location.put(""String_Node_Str"",0);
      location.put(""String_Node_Str"",isInDesigner ? startPos : 0);
      portal.put(""String_Node_Str"",location);
      JSONObject size=new JSONObject();
      size.put(""String_Node_Str"",form.getWidth());
      size.put(""String_Node_Str"",bodyheight);
      portal.put(""String_Node_Str"",size);
      portal.put(""String_Node_Str"",listViewPortal.getVisible());
      portal.put(""String_Node_Str"",listViewPortal.getEnabled());
      portal.put(""String_Node_Str"",new JSONArray());
      JSONObject relatedFoundset=new JSONObject();
      relatedFoundset.put(""String_Node_Str"",""String_Node_Str"");
      portal.put(""String_Node_Str"",relatedFoundset);
      PropertyPath propertyPath=new PropertyPath();
      propertyPath.setShouldAddElementName();
      FormElement portalFormElement=new FormElement(""String_Node_Str"",portal,form,name,fs,propertyPath,isInDesigner);
      PropertyDescription pd=portalFormElement.getWebComponentSpec().getProperties().get(""String_Node_Str"");
      if (pd != null)       pd=((CustomJSONArrayType<?,?>)pd.getType()).getCustomJSONTypeDefinition();
      if (pd == null) {
        Debug.error(new RuntimeException(""String_Node_Str""));
        return null;
      }
      ComponentPropertyType type=((ComponentPropertyType)pd.getType());
      Map<String,Object> portalFormElementProperties=new HashMap<>(portalFormElement.getRawPropertyValues());
      portalFormElementProperties.put(""String_Node_Str"",startPos);
      portalFormElementProperties.put(""String_Node_Str"",bodyPart.getHeight());
      Iterator<IPersist> it=form.getAllObjects(PositionComparator.XY_PERSIST_COMPARATOR);
      List<Object> children=new ArrayList<>();
      List<String> headersText=new ArrayList<>();
      propertyPath.add(portalFormElement.getName());
      propertyPath.add(""String_Node_Str"");
      int minBodyPortalTabSeq=-2;
      while (it.hasNext()) {
        IPersist persist=it.next();
        if (persist instanceof IFormElement) {
          Point loc=((IFormElement)persist).getLocation();
          if (startPos <= loc.y && endPos > loc.y) {
            if (listViewPortal.isTableview() && persist instanceof GraphicalComponent && ((GraphicalComponent)persist).getLabelFor() != null)             continue;
            propertyPath.add(children.size());
            FormElement fe=getFormElement((IFormElement)persist,fs,propertyPath,isInDesigner);
            if (listViewPortal.isTableview()) {
              int access=clientFlattenedSolution.getSecurityAccess(persist.getUUID());
              if ((access & IRepository.VIEWABLE) != 0) {
                String elementName=fe.getName();
                boolean hasLabelFor=false;
                Iterator<GraphicalComponent> graphicalComponents=form.getGraphicalComponents();
                while (graphicalComponents.hasNext()) {
                  GraphicalComponent gc=graphicalComponents.next();
                  if (gc.getLabelFor() != null && Utils.equalObjects(elementName,gc.getLabelFor()) && startPos <= gc.getLocation().y && endPos > gc.getLocation().y) {
                    headersText.add(gc.getText());
                    hasLabelFor=true;
                    break;
                  }
                }
                if (!hasLabelFor) {
                  if (fe.getPropertyValue(""String_Node_Str"") != null) {
                    headersText.add(fe.getPropertyValue(""String_Node_Str"").toString());
                  }
 else {
                    headersText.add(null);
                  }
                }
              }
            }
            children.add(type.getFormElementValue(null,pd,propertyPath,fe,fs));
            propertyPath.backOneLevel();
            Collection<PropertyDescription> tabSequenceProperties=fe.getWebComponentSpec().getProperties(NGTabSeqPropertyType.NG_INSTANCE);
            for (            PropertyDescription tabSeqProperty : tabSequenceProperties) {
              String tabSeqPropertyName=tabSeqProperty.getName();
              Integer tabSeqVal=(Integer)fe.getPropertyValue(tabSeqPropertyName);
              if (tabSeqVal == null)               tabSeqVal=Integer.valueOf(0);
              if (minBodyPortalTabSeq < 0 || minBodyPortalTabSeq > tabSeqVal.intValue())               minBodyPortalTabSeq=tabSeqVal.intValue();
            }
          }
        }
      }
      propertyPath.backOneLevel();
      propertyPath.backOneLevel();
      portalFormElementProperties.put(""String_Node_Str"",children.toArray());
      if (listViewPortal.isTableview()) {
        portalFormElementProperties.put(""String_Node_Str"",headersText.toArray());
      }
      portalFormElementProperties.put(""String_Node_Str"",Integer.valueOf(minBodyPortalTabSeq));
      portalFormElement.updatePropertyValuesDontUse(portalFormElementProperties);
      return portalFormElement;
    }
 catch (    JSONException ex) {
      Debug.error(""String_Node_Str"",ex);
    }
  }
  return null;
}",0.9803889390333962
143447,"@Override public JSONWriter toTemplateJSONValue(final JSONWriter writer,String key,ComponentTypeFormElementValue formElementValue,PropertyDescription pd,DataConversion conversionMarkers,FlattenedSolution fs,FormElement formElement) throws JSONException {
  if (conversionMarkers != null)   conversionMarkers.convert(ComponentPropertyType.TYPE_NAME);
  final FormElement fe=formElementValue.element;
  JSONUtils.addKeyIfPresent(writer,key);
  writer.object();
  writeTemplateJSONContent(writer,formElementValue,forFoundsetTypedPropertyName(pd),fe,new IModelWriter(){
    @Override public void writeComponentModel() throws JSONException {
      TypedData<Map<String,Object>> modelProperties=fe.propertiesForTemplateJSON();
      writer.object();
      JSONUtils.writeDataWithConversions(new FormElementToJSON(fe.getFlattendSolution()),writer,modelProperties.content,modelProperties.contentType,fe);
      writer.endObject();
    }
  }
,formElementValue.recordBasedProperties);
  writer.endObject();
  return writer;
}","@Override public JSONWriter toTemplateJSONValue(final JSONWriter writer,String key,ComponentTypeFormElementValue formElementValue,PropertyDescription pd,DataConversion conversionMarkers,FlattenedSolution fs,final FormElementContext formElementContext) throws JSONException {
  FlattenedSolution clientFlattenedSolution=(formElementContext != null && formElementContext.getContext() != null) ? formElementContext.getContext().getSolution() : null;
  if (!formElementValue.isSecurityViewable(clientFlattenedSolution)) {
    return writer;
  }
  if (conversionMarkers != null)   conversionMarkers.convert(ComponentPropertyType.TYPE_NAME);
  final FormElementContext feContext=new FormElementContext(formElementValue.element,formElementContext.getContext());
  JSONUtils.addKeyIfPresent(writer,key);
  writer.object();
  writeTemplateJSONContent(writer,formElementValue,forFoundsetTypedPropertyName(pd),feContext,new IModelWriter(){
    @Override public void writeComponentModel() throws JSONException {
      TypedData<Map<String,Object>> modelProperties=feContext.getFormElement().propertiesForTemplateJSON();
      writer.object();
      JSONUtils.writeDataWithConversions(new FormElementToJSON(feContext.getFormElement().getFlattendSolution()),writer,modelProperties.content,modelProperties.contentType,feContext);
      writer.endObject();
    }
  }
,formElementValue.recordBasedProperties);
  writer.endObject();
  return writer;
}",0.8178104575163399
143448,"protected <ContextT>void writeTemplateJSONContent(JSONWriter writer,ComponentTypeFormElementValue formElementValue,String forFoundsetPropertyType,FormElement componentFormElement,IModelWriter modelWriter,List<String> recordBasedProperties) throws JSONException {
  if (forFoundsetPropertyType != null)   writer.key(FoundsetLinkedPropertyType.FOR_FOUNDSET_PROPERTY_NAME).value(forFoundsetPropertyType);
  writer.key(""String_Node_Str"").value(componentFormElement.getTypeName());
  writer.key(""String_Node_Str"").value(componentFormElement.getName());
  writer.key(""String_Node_Str"");
  try {
    modelWriter.writeComponentModel();
  }
 catch (  JSONException|IllegalArgumentException e) {
    Debug.error(""String_Node_Str"" + componentFormElement.getTagname() + ""String_Node_Str"",e);
    throw e;
  }
  writer.key(""String_Node_Str"").object();
  for (  String handleMethodName : componentFormElement.getHandlers()) {
    writer.key(handleMethodName);
    JSONObject handlerInfo=new JSONObject();
    handlerInfo.put(""String_Node_Str"",componentFormElement.getForm().getName());
    handlerInfo.put(""String_Node_Str"",componentFormElement.getName());
    writer.value(handlerInfo);
  }
  writer.endObject();
  if (forFoundsetPropertyType != null) {
    writer.key(MODEL_VIEWPORT_KEY).array().endArray();
    writer.key(FOUNDSET_CONFIG_PROPERTY_NAME).object();
    if (recordBasedProperties != null) {
      writer.key(RECORD_BASED_PROPERTIES).array();
      for (      String propertyName : recordBasedProperties) {
        writer.value(propertyName);
      }
      writer.endArray();
    }
    if (formElementValue.apisOnAll != null) {
      writer.key(API_CALL_TYPES_KEY).array();
      for (      String methodName : formElementValue.apisOnAll) {
        writer.object().key(methodName).value(CALL_ON_ALL_RECORDS).endObject();
      }
      writer.endArray();
    }
    writer.endObject();
  }
}","protected <ContextT>void writeTemplateJSONContent(JSONWriter writer,ComponentTypeFormElementValue formElementValue,String forFoundsetPropertyType,FormElementContext componentFormElementContext,IModelWriter modelWriter,List<String> recordBasedProperties) throws JSONException {
  if (forFoundsetPropertyType != null)   writer.key(FoundsetLinkedPropertyType.FOR_FOUNDSET_PROPERTY_NAME).value(forFoundsetPropertyType);
  writer.key(""String_Node_Str"").value(componentFormElementContext.getFormElement().getTypeName());
  writer.key(""String_Node_Str"").value(componentFormElementContext.getName());
  writer.key(""String_Node_Str"");
  try {
    modelWriter.writeComponentModel();
  }
 catch (  JSONException|IllegalArgumentException e) {
    Debug.error(""String_Node_Str"" + componentFormElementContext.getFormElement().getTagname() + ""String_Node_Str"",e);
    throw e;
  }
  writer.key(""String_Node_Str"").object();
  for (  String handleMethodName : componentFormElementContext.getFormElement().getHandlers()) {
    writer.key(handleMethodName);
    JSONObject handlerInfo=new JSONObject();
    handlerInfo.put(""String_Node_Str"",componentFormElementContext.getFormElement().getForm().getName());
    handlerInfo.put(""String_Node_Str"",componentFormElementContext.getName());
    writer.value(handlerInfo);
  }
  writer.endObject();
  if (forFoundsetPropertyType != null) {
    writer.key(MODEL_VIEWPORT_KEY).array().endArray();
    writer.key(FOUNDSET_CONFIG_PROPERTY_NAME).object();
    if (recordBasedProperties != null) {
      writer.key(RECORD_BASED_PROPERTIES).array();
      for (      String propertyName : recordBasedProperties) {
        writer.value(propertyName);
      }
      writer.endArray();
    }
    if (formElementValue.apisOnAll != null) {
      writer.key(API_CALL_TYPES_KEY).array();
      for (      String methodName : formElementValue.apisOnAll) {
        writer.object().key(methodName).value(CALL_ON_ALL_RECORDS).endObject();
      }
      writer.endArray();
    }
    writer.endObject();
  }
}",0.9579918032786884
143449,"@Override public ComponentTypeSabloValue toSabloComponentValue(ComponentTypeFormElementValue formElementValue,PropertyDescription pd,FormElement formElement,WebFormComponent component,DataAdapterList dal){
  return new ComponentTypeSabloValue(formElementValue,pd,forFoundsetTypedPropertyName(pd));
}","@Override public ComponentTypeSabloValue toSabloComponentValue(ComponentTypeFormElementValue formElementValue,PropertyDescription pd,FormElement formElement,WebFormComponent component,DataAdapterList dal){
  if (!formElementValue.isSecurityViewable(dal.getApplication().getFlattenedSolution())) {
    return null;
  }
  return new ComponentTypeSabloValue(formElementValue,pd,forFoundsetTypedPropertyName(pd));
}",0.8422535211267606
143450,"/** 
 * Writes the entire value of this property as JSON. This includes the template values, not just the runtime component properties. This is currently needed and can get called if the property is nested inside other complex properties (json object/array) that sometimes might want/need to send again the entire content.
 */
public JSONWriter fullToJSON(final JSONWriter writer,DataConversion conversionMarkers,ComponentPropertyType componentPropertyType) throws JSONException {
  if (conversionMarkers != null)   conversionMarkers.convert(ComponentPropertyType.TYPE_NAME);
  final FormElement fe=formElementValue.element;
  writer.object();
  final TypedData<Map<String,Object>> formElementProperties=fe.propertiesForTemplateJSON();
  final TypedData<Map<String,Object>> runtimeProperties=childComponent.getProperties();
  childComponent.getAndClearChanges();
  boolean templateValuesRemoved=false;
  Iterator<Entry<String,Object>> formElementPropertyIterator=formElementProperties.content.entrySet().iterator();
  while (formElementPropertyIterator.hasNext()) {
    Entry<String,Object> fePropEntry=formElementPropertyIterator.next();
    if (runtimeProperties.content.containsKey(fePropEntry.getKey())) {
      if (!templateValuesRemoved) {
        formElementProperties.content=new HashMap<String,Object>(formElementProperties.content);
        templateValuesRemoved=true;
      }
      formElementProperties.content.remove(fePropEntry.getKey());
    }
  }
  removeRecordDependentProperties(runtimeProperties);
  removeRecordDependentProperties(formElementProperties);
  componentPropertyType.writeTemplateJSONContent(writer,formElementValue,forFoundsetTypedPropertyName,fe,new IModelWriter(){
    @Override public void writeComponentModel() throws JSONException {
      writer.object();
      DataConversion dataConversion=new DataConversion();
      JSONUtils.writeData(new FormElementToJSON(fe.getFlattendSolution()),writer,formElementProperties.content,formElementProperties.contentType,dataConversion,fe);
      JSONUtils.writeData(JSONUtils.FullValueToJSONConverter.INSTANCE,writer,runtimeProperties.content,runtimeProperties.contentType,dataConversion,childComponent);
      JSONUtils.writeClientConversions(writer,dataConversion);
      writer.endObject();
    }
  }
,recordBasedProperties);
  recordBasedPropertiesChanged=false;
  writeWholeViewportToJSON(writer);
  viewPortChangeMonitor.clearChanges();
  writer.endObject();
  return writer;
}","/** 
 * Writes the entire value of this property as JSON. This includes the template values, not just the runtime component properties. This is currently needed and can get called if the property is nested inside other complex properties (json object/array) that sometimes might want/need to send again the entire content.
 */
public JSONWriter fullToJSON(final JSONWriter writer,DataConversion conversionMarkers,ComponentPropertyType componentPropertyType) throws JSONException {
  if (conversionMarkers != null)   conversionMarkers.convert(ComponentPropertyType.TYPE_NAME);
  final FormElement fe=formElementValue.element;
  writer.object();
  final TypedData<Map<String,Object>> formElementProperties=fe.propertiesForTemplateJSON();
  final TypedData<Map<String,Object>> runtimeProperties=childComponent.getProperties();
  childComponent.getAndClearChanges();
  boolean templateValuesRemoved=false;
  Iterator<Entry<String,Object>> formElementPropertyIterator=formElementProperties.content.entrySet().iterator();
  while (formElementPropertyIterator.hasNext()) {
    Entry<String,Object> fePropEntry=formElementPropertyIterator.next();
    if (runtimeProperties.content.containsKey(fePropEntry.getKey())) {
      if (!templateValuesRemoved) {
        formElementProperties.content=new HashMap<String,Object>(formElementProperties.content);
        templateValuesRemoved=true;
      }
      formElementProperties.content.remove(fePropEntry.getKey());
    }
  }
  removeRecordDependentProperties(runtimeProperties);
  removeRecordDependentProperties(formElementProperties);
  final FormElementContext formElementContext=new FormElementContext(fe,null);
  componentPropertyType.writeTemplateJSONContent(writer,formElementValue,forFoundsetTypedPropertyName,formElementContext,new IModelWriter(){
    @Override public void writeComponentModel() throws JSONException {
      writer.object();
      DataConversion dataConversion=new DataConversion();
      JSONUtils.writeData(new FormElementToJSON(fe.getFlattendSolution()),writer,formElementProperties.content,formElementProperties.contentType,dataConversion,formElementContext);
      JSONUtils.writeData(JSONUtils.FullValueToJSONConverter.INSTANCE,writer,runtimeProperties.content,runtimeProperties.contentType,dataConversion,childComponent);
      JSONUtils.writeClientConversions(writer,dataConversion);
      writer.endObject();
    }
  }
,recordBasedProperties);
  recordBasedPropertiesChanged=false;
  writeWholeViewportToJSON(writer);
  viewPortChangeMonitor.clearChanges();
  writer.endObject();
  return writer;
}",0.977141721327768
143451,"@Override public void writeComponentModel() throws JSONException {
  writer.object();
  DataConversion dataConversion=new DataConversion();
  JSONUtils.writeData(new FormElementToJSON(fe.getFlattendSolution()),writer,formElementProperties.content,formElementProperties.contentType,dataConversion,fe);
  JSONUtils.writeData(JSONUtils.FullValueToJSONConverter.INSTANCE,writer,runtimeProperties.content,runtimeProperties.contentType,dataConversion,childComponent);
  JSONUtils.writeClientConversions(writer,dataConversion);
  writer.endObject();
}","@Override public void writeComponentModel() throws JSONException {
  writer.object();
  DataConversion dataConversion=new DataConversion();
  JSONUtils.writeData(new FormElementToJSON(fe.getFlattendSolution()),writer,formElementProperties.content,formElementProperties.contentType,dataConversion,formElementContext);
  JSONUtils.writeData(JSONUtils.FullValueToJSONConverter.INSTANCE,writer,runtimeProperties.content,runtimeProperties.contentType,dataConversion,childComponent);
  JSONUtils.writeClientConversions(writer,dataConversion);
  writer.endObject();
}",0.9836956521739132
143452,"public boolean isReadOnly(){
  return !isEnabled();
}","public boolean isReadOnly(){
  return !isEditable();
}",0.9532710280373832
143453,"protected IDataLinkedPropertyRegistrationListener getDataLinkedPropertyRegistrationListener(){
  return dataLinkedPropertyRegistrationListener=new IDataLinkedPropertyRegistrationListener(){
    @Override public void dataLinkedPropertyRegistered(    WebFormComponent component,    String propertyName,    TargetDataLinks targetDataLinks){
      if (component == childComponent) {
        if (targetDataLinks.recordLinked && !recordBasedProperties.contains(propertyName)) {
          recordBasedProperties.add(propertyName);
          recordBasedPropertiesChanged=true;
          recordBasedPropertiesChangedFromTemplate=true;
          monitor.valueChanged();
        }
      }
    }
    @Override public void dataLinkedPropertyUnregistered(    WebFormComponent component,    String propertyName){
      if (component == childComponent) {
        if (recordBasedProperties.remove(propertyName)) {
          recordBasedPropertiesChanged=true;
          recordBasedPropertiesChangedFromTemplate=true;
          monitor.valueChanged();
        }
      }
    }
  }
;
}","protected IDataLinkedPropertyRegistrationListener getDataLinkedPropertyRegistrationListener(){
  return dataLinkedPropertyRegistrationListener=new IDataLinkedPropertyRegistrationListener(){
    @Override public void dataLinkedPropertyRegistered(    WebFormComponent component,    String propertyName,    TargetDataLinks targetDataLinks){
      if (component == childComponent && targetDataLinks != TargetDataLinks.NOT_LINKED_TO_DATA) {
        if (targetDataLinks.recordLinked && !recordBasedProperties.contains(propertyName)) {
          recordBasedProperties.add(propertyName);
          recordBasedPropertiesChanged=true;
          recordBasedPropertiesChangedFromTemplate=true;
          monitor.valueChanged();
        }
      }
    }
    @Override public void dataLinkedPropertyUnregistered(    WebFormComponent component,    String propertyName){
      if (component == childComponent) {
        if (recordBasedProperties.remove(propertyName)) {
          recordBasedPropertiesChanged=true;
          recordBasedPropertiesChangedFromTemplate=true;
          monitor.valueChanged();
        }
      }
    }
  }
;
}",0.9738891433806688
143454,"@Override public void dataLinkedPropertyRegistered(WebFormComponent component,String propertyName,TargetDataLinks targetDataLinks){
  if (component == childComponent) {
    if (targetDataLinks.recordLinked && !recordBasedProperties.contains(propertyName)) {
      recordBasedProperties.add(propertyName);
      recordBasedPropertiesChanged=true;
      recordBasedPropertiesChangedFromTemplate=true;
      monitor.valueChanged();
    }
  }
}","@Override public void dataLinkedPropertyRegistered(WebFormComponent component,String propertyName,TargetDataLinks targetDataLinks){
  if (component == childComponent && targetDataLinks != TargetDataLinks.NOT_LINKED_TO_DATA) {
    if (targetDataLinks.recordLinked && !recordBasedProperties.contains(propertyName)) {
      recordBasedProperties.add(propertyName);
      recordBasedPropertiesChanged=true;
      recordBasedPropertiesChangedFromTemplate=true;
      monitor.valueChanged();
    }
  }
}",0.8537886872998933
143455,"/** 
 * Resumes listening normally to row updates.
 */
protected void resumeRowUpdateListener(){
  this.ignoreUpdateOnPkHash=null;
}","/** 
 * Resumes listening normally to row updates.
 * @deprecated disabled for now. Should we really do this? when an update comes from client who's to say a data change handler or something won't\change other properties of the componen/values of the record that should get sent to client?
 */
@Deprecated protected void resumeRowUpdateListener(){
}",0.4033264033264033
143456,"/** 
 * This gets called when rows in the viewport were deleted/inserted/changed.
 * @param relativeFirstRow viewPort relative start index for given operation.
 * @param relativeLastRow viewPort relative end index for given operation (inclusive).
 * @param newDataStartIndex foundset relative first row of new data (that is automatically added to the end of viewPort in case of delete, or just added in case of insert, or just changed for change) index.
 * @param newDataEndIndex foundset relative end row of new data (that is automatically added to the end of viewPort in case of delete, or just added in case of insert, or just changed for change) index.
 * @param operationType can be one of {@link RowData#DELETE},   {@link RowData#INSERT} or {@link RowData#CHANGE}.
 */
public void queueOperation(int relativeFirstRow,int relativeLastRow,final int newDataStartIndex,final int newDataEndIndex,final IFoundSetInternal foundset,int operationType){
  if (!shouldSendWholeViewport()) {
    if (operationType != RowData.CHANGE || ignoreUpdateOnPkHash == null || newDataStartIndex != newDataEndIndex || !foundset.getRecord(newDataStartIndex).getPKHashKey().equals(ignoreUpdateOnPkHash)) {
      boolean changed=(viewPortChanges.size() == 0);
      try {
        IJSONStringWithConversions writtenAsJSON;
        writtenAsJSON=JSONUtils.writeToJSONString(new IToJSONWriter<BaseWebObject>(){
          @Override public boolean writeJSONContent(          JSONWriter w,          String keyInParent,          IToJSONConverter<BaseWebObject> converter,          DataConversion clientDataConversions) throws JSONException {
            rowDataProvider.writeRowData(newDataStartIndex,newDataEndIndex,foundset,w,clientDataConversions);
            return true;
          }
        }
,FullValueToJSONConverter.INSTANCE);
        RowData newOperation=new RowData(writtenAsJSON,relativeFirstRow,relativeLastRow,operationType);
        if (operationType == RowData.CHANGE) {
          while (viewPortChanges.size() > 0 && viewPortChanges.get(viewPortChanges.size() - 1).isMadeIrrelevantBySubsequentRowData(newOperation)) {
            viewPortChanges.remove(viewPortChanges.size() - 1);
          }
        }
        viewPortChanges.add(newOperation);
        if (changed && monitor != null)         monitor.valueChanged();
      }
 catch (      JSONException e) {
        Debug.error(e);
      }
    }
  }
}","/** 
 * This gets called when rows in the viewport were deleted/inserted/changed.
 * @param relativeFirstRow viewPort relative start index for given operation.
 * @param relativeLastRow viewPort relative end index for given operation (inclusive).
 * @param newDataStartIndex foundset relative first row of new data (that is automatically added to the end of viewPort in case of delete, or just added in case of insert, or just changed for change) index.
 * @param newDataEndIndex foundset relative end row of new data (that is automatically added to the end of viewPort in case of delete, or just added in case of insert, or just changed for change) index.
 * @param operationType can be one of {@link RowData#DELETE},   {@link RowData#INSERT} or {@link RowData#CHANGE}.
 */
public void queueOperation(int relativeFirstRow,int relativeLastRow,final int newDataStartIndex,final int newDataEndIndex,final IFoundSetInternal foundset,int operationType){
  if (!shouldSendWholeViewport()) {
    boolean changed=(viewPortChanges.size() == 0);
    try {
      IJSONStringWithConversions writtenAsJSON;
      writtenAsJSON=JSONUtils.writeToJSONString(new IToJSONWriter<BaseWebObject>(){
        @Override public boolean writeJSONContent(        JSONWriter w,        String keyInParent,        IToJSONConverter<BaseWebObject> converter,        DataConversion clientDataConversions) throws JSONException {
          rowDataProvider.writeRowData(newDataStartIndex,newDataEndIndex,foundset,w,clientDataConversions);
          return true;
        }
      }
,FullValueToJSONConverter.INSTANCE);
      RowData newOperation=new RowData(writtenAsJSON,relativeFirstRow,relativeLastRow,operationType);
      if (operationType == RowData.CHANGE) {
        while (viewPortChanges.size() > 0 && viewPortChanges.get(viewPortChanges.size() - 1).isMadeIrrelevantBySubsequentRowData(newOperation)) {
          viewPortChanges.remove(viewPortChanges.size() - 1);
        }
      }
      viewPortChanges.add(newOperation);
      if (changed && monitor != null)       monitor.valueChanged();
    }
 catch (    JSONException e) {
      Debug.error(e);
    }
  }
}",0.4766953832560194
143457,"/** 
 * Ignores update record events for the record with given pkHash.
 */
protected void pauseRowUpdateListener(String pkHash){
  this.ignoreUpdateOnPkHash=pkHash;
}","/** 
 * Ignores update record events for the record with given pkHash.
 * @deprecated disabled for now. Should we really do this? when an update comes from client who's to say a data change handler or something won't\change other properties of the componen/values of the record that should get sent to client?
 */
@Deprecated protected void pauseRowUpdateListener(String pkHash){
}",0.4716636197440585
143458,"public void toJSON(JSONWriter writer,String key,DataConversion clientConversion,IDataConverterContext dataConverterContext) throws JSONException {
  if (value instanceof UUID || value instanceof UUID) {
    value=value.toString();
  }
  JSONUtils.addKeyIfPresent(writer,key);
  if (jsonValue == null) {
    if (findMode) {
      jsonValue=value instanceof String ? value : (value != null ? String.valueOf(value) : ""String_Node_Str"");
    }
 else     if (typeOfDP != null) {
      EmbeddableJSONWriter ejw=new EmbeddableJSONWriter(true);
      DataConversion jsonDataConversion=new DataConversion();
      FullValueToJSONConverter.INSTANCE.toJSONValue(ejw,null,value,typeOfDP,jsonDataConversion,dataConverterContext.getWebObject());
      if (jsonDataConversion.getConversions().size() == 0)       jsonDataConversion=null;
      String str=ejw.toJSONString();
      if (str == null || ""String_Node_Str"".equals(str)) {
        System.err.println(str);
      }
      jsonValue=new JSONStringWithConversions(ejw.toJSONString(),jsonDataConversion);
    }
 else {
      jsonValue=value;
    }
  }
  writer.value(jsonValue);
  if (jsonValue instanceof IJSONStringWithConversions)   clientConversion.convert(((IJSONStringWithConversions)jsonValue).getDataConversions());
}","public void toJSON(JSONWriter writer,String key,DataConversion clientConversion,IDataConverterContext dataConverterContext) throws JSONException {
  if (value instanceof UUID || value instanceof UUID) {
    value=value.toString();
  }
  JSONUtils.addKeyIfPresent(writer,key);
  if (jsonValue == null) {
    if (findMode) {
      jsonValue=value instanceof String ? value : (value != null ? String.valueOf(value) : ""String_Node_Str"");
    }
 else     if (typeOfDP != null) {
      EmbeddableJSONWriter ejw=new EmbeddableJSONWriter(true);
      DataConversion jsonDataConversion=new DataConversion();
      FullValueToJSONConverter.INSTANCE.toJSONValue(ejw,null,value,typeOfDP,jsonDataConversion,dataConverterContext.getWebObject());
      if (jsonDataConversion.getConversions().size() == 0)       jsonDataConversion=null;
      String str=ejw.toJSONString();
      if (str == null || str.trim().length() == 0) {
        Debug.error(""String_Node_Str"" + typeOfDP + ""String_Node_Str""+ value+ ""String_Node_Str"");
        str=""String_Node_Str"";
      }
      jsonValue=new JSONStringWithConversions(str,jsonDataConversion);
    }
 else {
      jsonValue=value;
    }
  }
  writer.value(jsonValue);
  if (jsonValue instanceof IJSONStringWithConversions)   clientConversion.convert(((IJSONStringWithConversions)jsonValue).getDataConversions());
}",0.9235497502881292
143459,"public static void registerTypes(){
  TypesRegistry.addType(BorderPropertyType.INSTANCE);
  TypesRegistry.addType(DatasetPropertyType.INSTANCE);
  TypesRegistry.addType(RelationPropertyType.INSTANCE);
  TypesRegistry.addType(MediaPropertyType.INSTANCE);
  TypesRegistry.addType(BeanPropertyType.INSTANCE);
  TypesRegistry.addType(FormPropertyType.INSTANCE);
  TypesRegistry.addType(RuntimeComponentPropertyType.INSTANCE);
  TypesRegistry.addType(FormatPropertyType.INSTANCE);
  TypesRegistry.addType(ValueListPropertyType.INSTANCE);
  TypesRegistry.addType(FormScopePropertyType.INSTANCE);
  TypesRegistry.addType(MediaOptionsPropertyType.INSTANCE);
  TypesRegistry.addType(DataproviderPropertyType.INSTANCE);
  TypesRegistry.addType(TagStringPropertyType.INSTANCE);
  TypesRegistry.addType(ServoyFunctionPropertyType.INSTANCE);
  TypesRegistry.addType(ByteArrayResourcePropertyType.INSTANCE);
  TypesRegistry.addType(MediaDataproviderPropertyType.INSTANCE);
  TypesRegistry.addType(HTMLStringPropertyType.INSTANCE);
  TypesRegistry.addType(NGColorPropertyType.NG_INSTANCE);
  TypesRegistry.addType(NGDatePropertyType.NG_INSTANCE);
  TypesRegistry.addType(NGDimensionPropertyType.NG_INSTANCE);
  TypesRegistry.addType(NGFontPropertyType.NG_INSTANCE);
  TypesRegistry.addType(NGInsetsPropertyType.NG_INSTANCE);
  TypesRegistry.addType(NGPointPropertyType.NG_INSTANCE);
  TypesRegistry.addType(NGTabSeqPropertyType.NG_INSTANCE);
  TypesRegistry.addType(FoundsetPropertyType.INSTANCE);
  TypesRegistry.addType(ComponentPropertyType.INSTANCE);
  TypesRegistry.addTypeFactory(CustomJSONArrayType.TYPE_NAME,new IPropertyTypeFactory<PropertyDescription,Object>(){
    @Override public IPropertyType<Object> createType(    PropertyDescription params){
      return new NGCustomJSONArrayType(params);
    }
  }
);
  TypesRegistry.addTypeFactory(CustomJSONObjectType.TYPE_NAME,new IPropertyTypeFactory<String,Object>(){
    @Override public IPropertyType<Object> createType(    String typeName){
      return new NGCustomJSONObjectType(typeName,null);
    }
  }
);
}","public static void registerTypes(){
  TypesRegistry.addType(BorderPropertyType.INSTANCE);
  TypesRegistry.addType(DatasetPropertyType.INSTANCE);
  TypesRegistry.addType(RelationPropertyType.INSTANCE);
  TypesRegistry.addType(MediaPropertyType.INSTANCE);
  TypesRegistry.addType(BeanPropertyType.INSTANCE);
  TypesRegistry.addType(FormPropertyType.INSTANCE);
  TypesRegistry.addType(RuntimeComponentPropertyType.INSTANCE);
  TypesRegistry.addType(FormatPropertyType.INSTANCE);
  TypesRegistry.addType(ValueListPropertyType.INSTANCE);
  TypesRegistry.addType(FormScopePropertyType.INSTANCE);
  TypesRegistry.addType(MediaOptionsPropertyType.INSTANCE);
  TypesRegistry.addType(DataproviderPropertyType.INSTANCE);
  TypesRegistry.addType(TagStringPropertyType.INSTANCE);
  TypesRegistry.addType(ServoyFunctionPropertyType.INSTANCE);
  TypesRegistry.addType(ByteArrayResourcePropertyType.INSTANCE);
  TypesRegistry.addType(MediaDataproviderPropertyType.INSTANCE);
  TypesRegistry.addType(HTMLStringPropertyType.INSTANCE);
  TypesRegistry.addType(NGColorPropertyType.NG_INSTANCE);
  TypesRegistry.addType(NGDatePropertyType.NG_INSTANCE);
  TypesRegistry.addType(NGUUIDPropertyType.NG_INSTANCE);
  TypesRegistry.addType(NGDimensionPropertyType.NG_INSTANCE);
  TypesRegistry.addType(NGFontPropertyType.NG_INSTANCE);
  TypesRegistry.addType(NGInsetsPropertyType.NG_INSTANCE);
  TypesRegistry.addType(NGPointPropertyType.NG_INSTANCE);
  TypesRegistry.addType(NGTabSeqPropertyType.NG_INSTANCE);
  TypesRegistry.addType(FoundsetPropertyType.INSTANCE);
  TypesRegistry.addType(ComponentPropertyType.INSTANCE);
  TypesRegistry.addTypeFactory(CustomJSONArrayType.TYPE_NAME,new IPropertyTypeFactory<PropertyDescription,Object>(){
    @Override public IPropertyType<Object> createType(    PropertyDescription params){
      return new NGCustomJSONArrayType(params);
    }
  }
);
  TypesRegistry.addTypeFactory(CustomJSONObjectType.TYPE_NAME,new IPropertyTypeFactory<String,Object>(){
    @Override public IPropertyType<Object> createType(    String typeName){
      return new NGCustomJSONObjectType(typeName,null);
    }
  }
);
}",0.9863276565123532
143460,"protected IDataLinkedPropertyRegistrationListener getDataLinkedPropertyRegistrationListener(){
  return dataLinkedPropertyRegistrationListener=new IDataLinkedPropertyRegistrationListener(){
    @Override public void dataLinkedPropertyRegistered(    WebFormComponent component,    String propertyName,    TargetDataLinks targetDataLinks){
      if (component == childComponent) {
        if (targetDataLinks.recordLinked && !recordBasedProperties.contains(propertyName)) {
          recordBasedProperties.add(propertyName);
          recordBasedPropertiesChanged=true;
          recordBasedPropertiesChangedFromTemplate=true;
          monitor.valueChanged();
        }
      }
    }
    @Override public void dataLinkedPropertyUnregistered(    WebFormComponent component,    String propertyName){
      if (component == childComponent) {
        if (recordBasedProperties.remove(propertyName)) {
          recordBasedPropertiesChanged=true;
          recordBasedPropertiesChangedFromTemplate=true;
          monitor.valueChanged();
        }
      }
    }
  }
;
}","protected IDataLinkedPropertyRegistrationListener getDataLinkedPropertyRegistrationListener(){
  return dataLinkedPropertyRegistrationListener=new IDataLinkedPropertyRegistrationListener(){
    @Override public void dataLinkedPropertyRegistered(    WebFormComponent component,    String propertyName,    TargetDataLinks targetDataLinks){
      if (component == childComponent && targetDataLinks != TargetDataLinks.NOT_LINKED_TO_DATA) {
        if (targetDataLinks.recordLinked && !recordBasedProperties.contains(propertyName)) {
          recordBasedProperties.add(propertyName);
          recordBasedPropertiesChanged=true;
          recordBasedPropertiesChangedFromTemplate=true;
          monitor.valueChanged();
        }
      }
    }
    @Override public void dataLinkedPropertyUnregistered(    WebFormComponent component,    String propertyName){
      if (component == childComponent) {
        if (recordBasedProperties.remove(propertyName)) {
          recordBasedPropertiesChanged=true;
          recordBasedPropertiesChangedFromTemplate=true;
          monitor.valueChanged();
        }
      }
    }
  }
;
}",0.9738891433806688
143461,"@Override public void dataLinkedPropertyRegistered(WebFormComponent component,String propertyName,TargetDataLinks targetDataLinks){
  if (component == childComponent) {
    if (targetDataLinks.recordLinked && !recordBasedProperties.contains(propertyName)) {
      recordBasedProperties.add(propertyName);
      recordBasedPropertiesChanged=true;
      recordBasedPropertiesChangedFromTemplate=true;
      monitor.valueChanged();
    }
  }
}","@Override public void dataLinkedPropertyRegistered(WebFormComponent component,String propertyName,TargetDataLinks targetDataLinks){
  if (component == childComponent && targetDataLinks != TargetDataLinks.NOT_LINKED_TO_DATA) {
    if (targetDataLinks.recordLinked && !recordBasedProperties.contains(propertyName)) {
      recordBasedProperties.add(propertyName);
      recordBasedPropertiesChanged=true;
      recordBasedPropertiesChangedFromTemplate=true;
      monitor.valueChanged();
    }
  }
}",0.8537886872998933
143462,"/** 
 * Resumes listening normally to row updates.
 */
protected void resumeRowUpdateListener(){
  this.ignoreUpdateOnPkHash=null;
}","/** 
 * Resumes listening normally to row updates.
 * @deprecated disabled for now. Should we really do this? when an update comes from client who's to say a data change handler or something won't\change other properties of the componen/values of the record that should get sent to client?
 */
@Deprecated protected void resumeRowUpdateListener(){
}",0.4033264033264033
143463,"/** 
 * This gets called when rows in the viewport were deleted/inserted/changed.
 * @param relativeFirstRow viewPort relative start index for given operation.
 * @param relativeLastRow viewPort relative end index for given operation (inclusive).
 * @param newDataStartIndex foundset relative first row of new data (that is automatically added to the end of viewPort in case of delete, or just added in case of insert, or just changed for change) index.
 * @param newDataEndIndex foundset relative end row of new data (that is automatically added to the end of viewPort in case of delete, or just added in case of insert, or just changed for change) index.
 * @param operationType can be one of {@link RowData#DELETE},   {@link RowData#INSERT} or {@link RowData#CHANGE}.
 */
public void queueOperation(int relativeFirstRow,int relativeLastRow,final int newDataStartIndex,final int newDataEndIndex,final IFoundSetInternal foundset,int operationType){
  if (!shouldSendWholeViewport()) {
    if (operationType != RowData.CHANGE || ignoreUpdateOnPkHash == null || newDataStartIndex != newDataEndIndex || !foundset.getRecord(newDataStartIndex).getPKHashKey().equals(ignoreUpdateOnPkHash)) {
      boolean changed=(viewPortChanges.size() == 0);
      try {
        IJSONStringWithConversions writtenAsJSON;
        writtenAsJSON=JSONUtils.writeToJSONString(new IToJSONWriter<BaseWebObject>(){
          @Override public boolean writeJSONContent(          JSONWriter w,          String keyInParent,          IToJSONConverter<BaseWebObject> converter,          DataConversion clientDataConversions) throws JSONException {
            rowDataProvider.writeRowData(newDataStartIndex,newDataEndIndex,foundset,w,clientDataConversions);
            return true;
          }
        }
,FullValueToJSONConverter.INSTANCE);
        RowData newOperation=new RowData(writtenAsJSON,relativeFirstRow,relativeLastRow,operationType);
        if (operationType == RowData.CHANGE) {
          while (viewPortChanges.size() > 0 && viewPortChanges.get(viewPortChanges.size() - 1).isMadeIrrelevantBySubsequentRowData(newOperation)) {
            viewPortChanges.remove(viewPortChanges.size() - 1);
          }
        }
        viewPortChanges.add(newOperation);
        if (changed && monitor != null)         monitor.valueChanged();
      }
 catch (      JSONException e) {
        Debug.error(e);
      }
    }
  }
}","/** 
 * This gets called when rows in the viewport were deleted/inserted/changed.
 * @param relativeFirstRow viewPort relative start index for given operation.
 * @param relativeLastRow viewPort relative end index for given operation (inclusive).
 * @param newDataStartIndex foundset relative first row of new data (that is automatically added to the end of viewPort in case of delete, or just added in case of insert, or just changed for change) index.
 * @param newDataEndIndex foundset relative end row of new data (that is automatically added to the end of viewPort in case of delete, or just added in case of insert, or just changed for change) index.
 * @param operationType can be one of {@link RowData#DELETE},   {@link RowData#INSERT} or {@link RowData#CHANGE}.
 */
public void queueOperation(int relativeFirstRow,int relativeLastRow,final int newDataStartIndex,final int newDataEndIndex,final IFoundSetInternal foundset,int operationType){
  if (!shouldSendWholeViewport()) {
    boolean changed=(viewPortChanges.size() == 0);
    try {
      IJSONStringWithConversions writtenAsJSON;
      writtenAsJSON=JSONUtils.writeToJSONString(new IToJSONWriter<BaseWebObject>(){
        @Override public boolean writeJSONContent(        JSONWriter w,        String keyInParent,        IToJSONConverter<BaseWebObject> converter,        DataConversion clientDataConversions) throws JSONException {
          rowDataProvider.writeRowData(newDataStartIndex,newDataEndIndex,foundset,w,clientDataConversions);
          return true;
        }
      }
,FullValueToJSONConverter.INSTANCE);
      RowData newOperation=new RowData(writtenAsJSON,relativeFirstRow,relativeLastRow,operationType);
      if (operationType == RowData.CHANGE) {
        while (viewPortChanges.size() > 0 && viewPortChanges.get(viewPortChanges.size() - 1).isMadeIrrelevantBySubsequentRowData(newOperation)) {
          viewPortChanges.remove(viewPortChanges.size() - 1);
        }
      }
      viewPortChanges.add(newOperation);
      if (changed && monitor != null)       monitor.valueChanged();
    }
 catch (    JSONException e) {
      Debug.error(e);
    }
  }
}",0.4766953832560194
143464,"/** 
 * Ignores update record events for the record with given pkHash.
 */
protected void pauseRowUpdateListener(String pkHash){
  this.ignoreUpdateOnPkHash=pkHash;
}","/** 
 * Ignores update record events for the record with given pkHash.
 * @deprecated disabled for now. Should we really do this? when an update comes from client who's to say a data change handler or something won't\change other properties of the componen/values of the record that should get sent to client?
 */
@Deprecated protected void pauseRowUpdateListener(String pkHash){
}",0.4716636197440585
143465,"public void toJSON(JSONWriter writer,String key,DataConversion clientConversion,IDataConverterContext dataConverterContext) throws JSONException {
  if (value instanceof UUID || value instanceof UUID) {
    value=value.toString();
  }
  JSONUtils.addKeyIfPresent(writer,key);
  if (jsonValue == null) {
    if (findMode) {
      jsonValue=value instanceof String ? value : (value != null ? String.valueOf(value) : ""String_Node_Str"");
    }
 else     if (typeOfDP != null) {
      EmbeddableJSONWriter ejw=new EmbeddableJSONWriter(true);
      DataConversion jsonDataConversion=new DataConversion();
      FullValueToJSONConverter.INSTANCE.toJSONValue(ejw,null,value,typeOfDP,jsonDataConversion,dataConverterContext.getWebObject());
      if (jsonDataConversion.getConversions().size() == 0)       jsonDataConversion=null;
      String str=ejw.toJSONString();
      if (str == null || ""String_Node_Str"".equals(str)) {
        System.err.println(str);
      }
      jsonValue=new JSONStringWithConversions(ejw.toJSONString(),jsonDataConversion);
    }
 else {
      jsonValue=value;
    }
  }
  writer.value(jsonValue);
  if (jsonValue instanceof IJSONStringWithConversions)   clientConversion.convert(((IJSONStringWithConversions)jsonValue).getDataConversions());
}","public void toJSON(JSONWriter writer,String key,DataConversion clientConversion,IDataConverterContext dataConverterContext) throws JSONException {
  if (value instanceof UUID || value instanceof UUID) {
    value=value.toString();
  }
  JSONUtils.addKeyIfPresent(writer,key);
  if (jsonValue == null) {
    if (findMode) {
      jsonValue=value instanceof String ? value : (value != null ? String.valueOf(value) : ""String_Node_Str"");
    }
 else     if (typeOfDP != null) {
      EmbeddableJSONWriter ejw=new EmbeddableJSONWriter(true);
      DataConversion jsonDataConversion=new DataConversion();
      FullValueToJSONConverter.INSTANCE.toJSONValue(ejw,null,value,typeOfDP,jsonDataConversion,dataConverterContext.getWebObject());
      if (jsonDataConversion.getConversions().size() == 0)       jsonDataConversion=null;
      String str=ejw.toJSONString();
      if (str == null || str.trim().length() == 0) {
        Debug.error(""String_Node_Str"" + typeOfDP + ""String_Node_Str""+ value+ ""String_Node_Str"");
        str=""String_Node_Str"";
      }
      jsonValue=new JSONStringWithConversions(str,jsonDataConversion);
    }
 else {
      jsonValue=value;
    }
  }
  writer.value(jsonValue);
  if (jsonValue instanceof IJSONStringWithConversions)   clientConversion.convert(((IJSONStringWithConversions)jsonValue).getDataConversions());
}",0.9235497502881292
143466,"public static void registerTypes(){
  TypesRegistry.addType(BorderPropertyType.INSTANCE);
  TypesRegistry.addType(DatasetPropertyType.INSTANCE);
  TypesRegistry.addType(RelationPropertyType.INSTANCE);
  TypesRegistry.addType(MediaPropertyType.INSTANCE);
  TypesRegistry.addType(BeanPropertyType.INSTANCE);
  TypesRegistry.addType(FormPropertyType.INSTANCE);
  TypesRegistry.addType(RuntimeComponentPropertyType.INSTANCE);
  TypesRegistry.addType(FormatPropertyType.INSTANCE);
  TypesRegistry.addType(ValueListPropertyType.INSTANCE);
  TypesRegistry.addType(FormScopePropertyType.INSTANCE);
  TypesRegistry.addType(MediaOptionsPropertyType.INSTANCE);
  TypesRegistry.addType(DataproviderPropertyType.INSTANCE);
  TypesRegistry.addType(TagStringPropertyType.INSTANCE);
  TypesRegistry.addType(ServoyFunctionPropertyType.INSTANCE);
  TypesRegistry.addType(ByteArrayResourcePropertyType.INSTANCE);
  TypesRegistry.addType(MediaDataproviderPropertyType.INSTANCE);
  TypesRegistry.addType(HTMLStringPropertyType.INSTANCE);
  TypesRegistry.addType(NGColorPropertyType.NG_INSTANCE);
  TypesRegistry.addType(NGDatePropertyType.NG_INSTANCE);
  TypesRegistry.addType(NGDimensionPropertyType.NG_INSTANCE);
  TypesRegistry.addType(NGFontPropertyType.NG_INSTANCE);
  TypesRegistry.addType(NGInsetsPropertyType.NG_INSTANCE);
  TypesRegistry.addType(NGPointPropertyType.NG_INSTANCE);
  TypesRegistry.addType(NGTabSeqPropertyType.NG_INSTANCE);
  TypesRegistry.addType(FoundsetPropertyType.INSTANCE);
  TypesRegistry.addType(ComponentPropertyType.INSTANCE);
  TypesRegistry.addTypeFactory(CustomJSONArrayType.TYPE_NAME,new IPropertyTypeFactory<PropertyDescription,Object>(){
    @Override public IPropertyType<Object> createType(    PropertyDescription params){
      return new NGCustomJSONArrayType(params);
    }
  }
);
  TypesRegistry.addTypeFactory(CustomJSONObjectType.TYPE_NAME,new IPropertyTypeFactory<String,Object>(){
    @Override public IPropertyType<Object> createType(    String typeName){
      return new NGCustomJSONObjectType(typeName,null);
    }
  }
);
}","public static void registerTypes(){
  TypesRegistry.addType(BorderPropertyType.INSTANCE);
  TypesRegistry.addType(DatasetPropertyType.INSTANCE);
  TypesRegistry.addType(RelationPropertyType.INSTANCE);
  TypesRegistry.addType(MediaPropertyType.INSTANCE);
  TypesRegistry.addType(BeanPropertyType.INSTANCE);
  TypesRegistry.addType(FormPropertyType.INSTANCE);
  TypesRegistry.addType(RuntimeComponentPropertyType.INSTANCE);
  TypesRegistry.addType(FormatPropertyType.INSTANCE);
  TypesRegistry.addType(ValueListPropertyType.INSTANCE);
  TypesRegistry.addType(FormScopePropertyType.INSTANCE);
  TypesRegistry.addType(MediaOptionsPropertyType.INSTANCE);
  TypesRegistry.addType(DataproviderPropertyType.INSTANCE);
  TypesRegistry.addType(TagStringPropertyType.INSTANCE);
  TypesRegistry.addType(ServoyFunctionPropertyType.INSTANCE);
  TypesRegistry.addType(ByteArrayResourcePropertyType.INSTANCE);
  TypesRegistry.addType(MediaDataproviderPropertyType.INSTANCE);
  TypesRegistry.addType(HTMLStringPropertyType.INSTANCE);
  TypesRegistry.addType(NGColorPropertyType.NG_INSTANCE);
  TypesRegistry.addType(NGDatePropertyType.NG_INSTANCE);
  TypesRegistry.addType(NGUUIDPropertyType.NG_INSTANCE);
  TypesRegistry.addType(NGDimensionPropertyType.NG_INSTANCE);
  TypesRegistry.addType(NGFontPropertyType.NG_INSTANCE);
  TypesRegistry.addType(NGInsetsPropertyType.NG_INSTANCE);
  TypesRegistry.addType(NGPointPropertyType.NG_INSTANCE);
  TypesRegistry.addType(NGTabSeqPropertyType.NG_INSTANCE);
  TypesRegistry.addType(FoundsetPropertyType.INSTANCE);
  TypesRegistry.addType(ComponentPropertyType.INSTANCE);
  TypesRegistry.addTypeFactory(CustomJSONArrayType.TYPE_NAME,new IPropertyTypeFactory<PropertyDescription,Object>(){
    @Override public IPropertyType<Object> createType(    PropertyDescription params){
      return new NGCustomJSONArrayType(params);
    }
  }
);
  TypesRegistry.addTypeFactory(CustomJSONObjectType.TYPE_NAME,new IPropertyTypeFactory<String,Object>(){
    @Override public IPropertyType<Object> createType(    String typeName){
      return new NGCustomJSONObjectType(typeName,null);
    }
  }
);
}",0.9863276565123532
143467,"@Override public void setEditable(boolean editable){
  super.setEditable(editable);
  this.editable=editable;
  Iterator<HasRuntimeReadOnly> readOnlyAwareComponentsIte=getReadOnlyAwareComponents().iterator();
  while (readOnlyAwareComponentsIte.hasNext()) {
    readOnlyAwareComponentsIte.next().setReadOnly(!editable);
  }
  invalidate();
  repaint();
}","@Override public void setEditable(boolean editable){
  super.setEditable(editable);
  this.editable=editable;
}",0.4774193548387097
143468,"@Override public void setEditable(boolean editable){
  super.setEditable(editable);
  this.editable=editable;
  Iterator<HasRuntimeReadOnly> readOnlyAwareComponentsIte=getReadOnlyAwareComponents().iterator();
  while (readOnlyAwareComponentsIte.hasNext()) {
    readOnlyAwareComponentsIte.next().setReadOnly(!editable);
  }
  repaint();
}","@Override public void setEditable(boolean editable){
  super.setEditable(editable);
  this.editable=editable;
}",0.4944320712694877
143469,"public void setReadOnly(boolean readOnly){
  this.readOnly=readOnly;
  applyState();
}","public void setReadOnly(boolean readOnly){
  this.readOnly=readOnly;
  if (readOnly && !isEditable()) {
    applyState();
    return;
  }
  if (readOnly) {
    setEditable(false);
    if (!blockEditStateChange)     editState=true;
  }
 else {
    setEditable(editState);
  }
}",0.4696132596685083
143470,"public void applyState(){
  boolean jComboEnabled=accessible && enabled && !readOnly;
  applier.setEnabled(jComboEnabled);
  applier.setEditable(jComboEnabled && editable);
  applier.setLabelsEnabled(accessible && enabled);
}","public void applyState(){
  boolean jComboEnabled=accessible && enabled && !readOnly;
  applier.setEnabled(editable ? true : jComboEnabled);
  applier.setEditable(editable);
  applier.setLabelsEnabled(accessible && enabled);
}",0.9223946784922394
143471,"@Override public Object call(Context cx,Scriptable scope,Scriptable thisObj,Object[] args){
  try {
    return session.getService(serviceName).executeServiceCall(definition.getName(),args);
  }
 catch (  IOException e) {
    throw new RuntimeException(e);
  }
}","@Override public Object call(Context cx,Scriptable scope,Scriptable thisObj,Object[] args){
  try {
    PropertyDescription retPD=definition != null ? definition.getReturnType() : null;
    return NGConversions.INSTANCE.convertSabloComponentToRhinoValue(session.getService(serviceName).executeServiceCall(definition.getName(),args),retPD,(BaseWebObject)session.getService(serviceName),thisObj);
  }
 catch (  IOException e) {
    throw new RuntimeException(e);
  }
}",0.6217331499312242
143472,"protected Object getJavaValue(Object value,PropertyDescription propertyDescription){
  if (propertyDescription != null && !propertyDescription.isArray() && propertyDescription.getType() instanceof IWrapperType) {
    return ((IWrapperType)propertyDescription.getType()).unwrap(value);
  }
  return value;
}","protected Object getJavaValue(Object value,PropertyDescription propertyDescription){
  if (propertyDescription != null) {
    if (!propertyDescription.isArray() && propertyDescription.getType() instanceof IWrapperType) {
      return ((IWrapperType)propertyDescription.getType()).unwrap(value);
    }
 else     if (propertyDescription.isArray() && value instanceof List) {
      List arr=((List)value);
      List<Object> list=new ArrayList<>();
      for (int i=0; i < arr.size(); i++) {
        list.add(getJavaValue(arr.get(i),propertyDescription.asArrayElement()));
      }
      return list;
    }
 else     if ((propertyDescription.getType() instanceof ICustomType) && ((ICustomType)propertyDescription.getType()).getCustomJSONTypeDefinition() != null && value instanceof Map && !(propertyDescription.getType() instanceof IComplexTypeImpl)) {
      Map<String,Object> props=((Map)value);
      Map<String,Object> newProps=new HashMap<>();
      PropertyDescription localPropertyType=((ICustomType)propertyDescription.getType()).getCustomJSONTypeDefinition();
      for (      String prop : props.keySet()) {
        PropertyDescription localPropertyDescription=localPropertyType.getProperty(prop);
        newProps.put(prop,getJavaValue(props.get(prop),localPropertyDescription));
      }
      return newProps;
    }
  }
  return value;
}",0.2495457298606904
143473,"/** 
 * -fe is only needed because of format . It accesses another property value based on the 'for' property (). TODO this FormElement parameter should be analyzed because format accepts a flat property value. -level is only needed because the current implementation 'flattens' the dataproviderid's and tagstrings for DAL  .(level should be removed after next changes) -component is the whole component for now ,but it should be the current component node in the runtime component tree (instead of flat properties map) -component and componentNode should have been just componentNode (but currently WebCoponent is not nested)
 */
public void fillProperties(Form formElNodeForm,FormElement fe,Object formElementProperty,PropertyDescription propertySpec,DataAdapterList dal,WebFormComponent component,Object componentNode,String level){
  IPropertyType<?> type=propertySpec.getType();
  if (propertySpec.isArray() && formElementProperty instanceof List && !(formElementProperty instanceof IComplexPropertyValue)) {
    List<Object> processedArray=new ArrayList<>();
    List<Object> fePropertyArray=(List<Object>)formElementProperty;
    for (    Object arrayValue : fePropertyArray) {
      Object propValue=initFormElementProperty(formElNodeForm,fe,arrayValue,propertySpec,dal,component,componentNode,level,true);
switch (type.getName()) {
case ""String_Node_Str"":
{
          Debug.error(""String_Node_Str"");
          Object dataproviderID=propValue;
          if (dataproviderID instanceof String) {
            dal.add(component,level + (String)dataproviderID,propertySpec.getName());
          }
          break;
        }
case ""String_Node_Str"":
{
        Debug.error(""String_Node_Str"");
        if (propValue != null && propValue instanceof String && (((String)propValue).contains(""String_Node_Str"")) || ((String)propValue).startsWith(""String_Node_Str"")) {
          dal.addTaggedProperty(component,level + propertySpec.getName(),(String)propValue);
        }
        break;
      }
default :
{
      processedArray.add(propValue);
    }
}
}
if (processedArray.size() > 0) {
putInComponentNode(componentNode,propertySpec.getName(),processedArray,propertySpec,component);
}
}
 else {
Object propValue=initFormElementProperty(formElNodeForm,fe,formElementProperty,propertySpec,dal,component,componentNode,level,false);
String propName=propertySpec.getName();
switch (type.getName()) {
case ""String_Node_Str"":
{
  Object dataproviderID=formElementProperty;
  if (dataproviderID instanceof String) {
    dal.add(component,(String)dataproviderID,level + propName);
    return;
  }
  break;
}
case ""String_Node_Str"":
{
if (propValue != null && propValue instanceof String && (((String)propValue).contains(""String_Node_Str"") || ((String)propValue).startsWith(""String_Node_Str""))) {
  dal.addTaggedProperty(component,level + propName,(String)propValue);
  return;
}
break;
}
case ""String_Node_Str"":
return;
default :
break;
}
if (propValue != null) putInComponentNode(componentNode,propName,propValue,propertySpec,component);
}
}","/** 
 * -fe is only needed because of format . It accesses another property value based on the 'for' property (). TODO this FormElement parameter should be analyzed because format accepts a flat property value. -level is only needed because the current implementation 'flattens' the dataproviderid's and tagstrings for DAL  .(level should be removed after next changes) -component is the whole component for now ,but it should be the current component node in the runtime component tree (instead of flat properties map) -component and componentNode should have been just componentNode (but currently WebCoponent is not nested)
 */
public void fillProperties(Form formElNodeForm,FormElement fe,Object formElementProperty,PropertyDescription propertySpec,DataAdapterList dal,WebFormComponent component,Object componentNode,String level){
  IPropertyType<?> type=propertySpec.getType();
  if (propertySpec.isArray() && formElementProperty instanceof List && !(formElementProperty instanceof IComplexPropertyValue)) {
    List<Object> processedArray=new ArrayList<>();
    List<Object> fePropertyArray=(List<Object>)formElementProperty;
    for (    Object arrayValue : fePropertyArray) {
      Object propValue=initFormElementProperty(formElNodeForm,fe,arrayValue,propertySpec.asArrayElement(),dal,component,componentNode,level,true);
switch (type.getName()) {
case ""String_Node_Str"":
{
          Debug.error(""String_Node_Str"");
          Object dataproviderID=propValue;
          if (dataproviderID instanceof String) {
            dal.add(component,level + (String)dataproviderID,propertySpec.getName());
          }
          break;
        }
case ""String_Node_Str"":
{
        Debug.error(""String_Node_Str"");
        if (propValue != null && propValue instanceof String && (((String)propValue).contains(""String_Node_Str"")) || ((String)propValue).startsWith(""String_Node_Str"")) {
          dal.addTaggedProperty(component,level + propertySpec.getName(),(String)propValue);
        }
        break;
      }
default :
{
      processedArray.add(propValue);
    }
}
}
if (processedArray.size() > 0) {
putInComponentNode(componentNode,propertySpec.getName(),processedArray,propertySpec,component);
}
}
 else {
Object propValue=initFormElementProperty(formElNodeForm,fe,formElementProperty,propertySpec,dal,component,componentNode,level,false);
String propName=propertySpec.getName();
switch (type.getName()) {
case ""String_Node_Str"":
{
  Object dataproviderID=formElementProperty;
  if (dataproviderID instanceof String) {
    dal.add(component,(String)dataproviderID,level + propName);
    return;
  }
  break;
}
case ""String_Node_Str"":
{
if (propValue != null && propValue instanceof String && (((String)propValue).contains(""String_Node_Str"") || ((String)propValue).startsWith(""String_Node_Str""))) {
  dal.addTaggedProperty(component,level + propName,(String)propValue);
  return;
}
break;
}
case ""String_Node_Str"":
return;
default :
break;
}
if (propValue != null) putInComponentNode(componentNode,propName,propValue,propertySpec,component);
}
}",0.9971998023389886
143474,"public WebCellBasedView(final String id,final IApplication application,RuntimePortal scriptable,final Form form,final AbstractBase cellview,final IDataProviderLookup dataProviderLookup,final IScriptExecuter el,boolean addHeaders,final int startY,final int endY,final int sizeHint,int viewType){
  super(id);
  this.application=application;
  this.cellview=cellview;
  this.fc=el.getFormController();
  this.addHeaders=addHeaders;
  this.startY=startY;
  this.endY=endY;
  this.formDesignHeight=form.getSize().height;
  this.sizeHint=sizeHint;
  this.isListViewMode=viewType == IForm.LIST_VIEW || viewType == FormController.LOCKED_LIST_VIEW;
  this.bodyWidthHint=form.getWidth();
  double multiplier=Utils.getAsDouble(Settings.getInstance().getProperty(""String_Node_Str"",""String_Node_Str""));
  if (multiplier > 1.1) {
    NEW_PAGE_MULITPLIER=multiplier;
  }
 else {
    NEW_PAGE_MULITPLIER=1.1;
  }
  useAJAX=Utils.getAsBoolean(application.getRuntimeProperties().get(""String_Node_Str""));
  useAnchors=Utils.getAsBoolean(application.getRuntimeProperties().get(""String_Node_Str""));
  if (useAJAX)   setVersioned(false);
  setScrollMode(Boolean.TRUE.equals(application.getClientProperty(IApplication.TABLEVIEW_WC_DEFAULT_SCROLLABLE)));
  isKeepLoadedRowsInScrollMode=Boolean.TRUE.equals(application.getClientProperty(IApplication.TABLEVIEW_WC_SCROLLABLE_KEEP_LOADED_ROWS));
  setOutputMarkupPlaceholderTag(true);
  dataRendererOnRenderWrapper=new DataRendererOnRenderWrapper(this);
  loadingInfo=new Label(""String_Node_Str"",""String_Node_Str"");
  loadingInfo.setVisible(false);
  add(loadingInfo);
  if (!useAJAX)   bodyHeightHint=sizeHint;
  String orientation=OrientationApplier.getHTMLContainerOrientation(application.getLocale(),application.getSolution().getTextOrientation());
  isLeftToRightOrientation=!OrientationApplier.RTL.equalsIgnoreCase(orientation);
  int tFormHeight=0;
  Iterator<Part> partIte=form.getParts();
  while (partIte.hasNext()) {
    Part p=partIte.next();
    if (p.getPartType() == Part.BODY) {
      tFormHeight=p.getHeight() - startY;
      break;
    }
  }
  formBodySize=new Dimension(form.getWidth(),tFormHeight);
  ChangesRecorder jsChangeRecorder=new ChangesRecorder(null,null){
    @Override public boolean isChanged(){
      boolean retval=false;
      if (super.isChanged()) {
        retval=true;
        return retval;
      }
      if (!retval) {
        Iterator<Component> iterator=elementToColumnIdentifierComponent.values().iterator();
        while (iterator.hasNext()) {
          Component object=iterator.next();
          if (object instanceof IProviderStylePropertyChanges) {
            if (((IProviderStylePropertyChanges)object).getStylePropertyChanges().isChanged()) {
              retval=true;
              break;
            }
          }
        }
      }
      if (retval) {
        MainPage page=(MainPage)getPage();
        page.getPageContributor().addTableToRender(WebCellBasedView.this);
        setRendered();
      }
      return false;
    }
    @Override public void setRendered(){
      super.setRendered();
      Iterator<Component> iterator=elementToColumnIdentifierComponent.values().iterator();
      while (iterator.hasNext()) {
        Component comp=iterator.next();
        if (comp instanceof IProviderStylePropertyChanges) {
          ((IProviderStylePropertyChanges)comp).getStylePropertyChanges().setRendered();
        }
      }
    }
  }
;
  this.scriptable=scriptable;
  ((ChangesRecorder)scriptable.getChangesRecorder()).setAdditionalChangesRecorder(jsChangeRecorder);
  add(TooltipAttributeModifier.INSTANCE);
  final int scrollbars=(cellview instanceof ISupportScrollbars) ? ((ISupportScrollbars)cellview).getScrollbars() : 0;
  add(new StyleAppendingModifier(new Model<String>(){
    private static final long serialVersionUID=1L;
    @Override public String getObject(){
      if (!isScrollMode() && findParent(IWebFormContainer.class) != null) {
        return ""String_Node_Str"";
      }
      return scrollBarDefinitionToOverflowAttribute(scrollbars,isScrollMode(),false,currentData == null || currentData.getSize() == 0);
    }
  }
));
  if (cellview instanceof BaseComponent) {
    ComponentFactory.applyBasicComponentProperties(application,this,(BaseComponent)cellview,ComponentFactory.getStyleForBasicComponent(application,cellview,form));
  }
  boolean sortable=true;
  String initialSortString=null;
  int onRenderMethodID=0;
  AbstractBase onRenderPersist=null;
  if (cellview instanceof Portal) {
    Portal p=(Portal)cellview;
    isListViewMode=p.getMultiLine();
    setRowBGColorScript(p.getRowBGColorCalculation(),p.getInstanceMethodArguments(""String_Node_Str""));
    sortable=p.getSortable();
    initialSortString=p.getInitialSort();
    onRenderMethodID=p.getOnRenderMethodID();
    onRenderPersist=p;
    int portalAnchors=p.getAnchors();
    isAnchored=(((portalAnchors & IAnchorConstants.NORTH) > 0) && ((portalAnchors & IAnchorConstants.SOUTH) > 0)) || (((portalAnchors & IAnchorConstants.EAST) > 0) && ((portalAnchors & IAnchorConstants.WEST) > 0));
  }
 else   if (cellview instanceof Form) {
    initialSortString=form.getInitialSort();
    onRenderMethodID=form.getOnRenderMethodID();
    onRenderPersist=form;
    isAnchored=true;
  }
  if (onRenderMethodID > 0) {
    dataRendererOnRenderWrapper.getRenderEventExecutor().setRenderCallback(Integer.toString(onRenderMethodID),Utils.parseJSExpressions(onRenderPersist.getInstanceMethodArguments(""String_Node_Str"")));
    dataRendererOnRenderWrapper.getRenderEventExecutor().setRenderScriptExecuter(fc != null ? fc.getScriptExecuter() : null);
  }
  initDragNDrop(fc,startY);
  if (sortable) {
    if (initialSortString != null) {
      StringTokenizer tokByComma=new StringTokenizer(initialSortString,""String_Node_Str"");
      while (tokByComma.hasMoreTokens()) {
        String initialSortFirstToken=tokByComma.nextToken();
        StringTokenizer tokBySpace=new StringTokenizer(initialSortFirstToken);
        if (tokBySpace.hasMoreTokens()) {
          String initialSortColumnName=tokBySpace.nextToken();
          if (tokBySpace.hasMoreTokens()) {
            String sortDir=tokBySpace.nextToken();
            boolean initialSortAsc=true;
            if (sortDir.equalsIgnoreCase(""String_Node_Str""))             initialSortAsc=false;
            initialSortColumnNames.put(initialSortColumnName,new Boolean(initialSortAsc));
          }
        }
      }
    }
    if (initialSortColumnNames.size() == 0) {
      try {
        String dataSource=null;
        if (cellview instanceof Portal) {
          Portal p=(Portal)cellview;
          String relation=p.getRelationName();
          int lastDot=relation.lastIndexOf(""String_Node_Str"");
          if (lastDot >= 0) {
            relation=relation.substring(lastDot + 1);
          }
          Relation rel=application.getFlattenedSolution().getRelation(relation);
          if (rel != null) {
            dataSource=rel.getForeignDataSource();
          }
        }
 else {
          dataSource=form.getDataSource();
        }
        if (dataSource != null) {
          Iterator<String> pkColumnNames=application.getFoundSetManager().getTable(dataSource).getRowIdentColumnNames();
          while (pkColumnNames.hasNext()) {
            initialSortColumnNames.put(pkColumnNames.next(),Boolean.TRUE);
          }
        }
      }
 catch (      RepositoryException e) {
        Debug.log(""String_Node_Str"",e);
      }
    }
  }
  maxHeight=0;
  try {
    if (isListViewMode() && !(cellview instanceof Portal)) {
      int headerHeight=0;
      int titleHeaderHeight=0;
      Iterator<Part> pIte=form.getParts();
      while (pIte.hasNext()) {
        Part p=pIte.next();
        if (p.getPartType() == Part.BODY) {
          maxHeight=p.getHeight();
        }
 else         if (p.getPartType() == Part.HEADER) {
          headerHeight=p.getHeight();
        }
 else         if (p.getPartType() == Part.TITLE_HEADER) {
          titleHeaderHeight=p.getHeight();
        }
      }
      if (headerHeight != 0) {
        maxHeight=maxHeight - headerHeight;
      }
 else {
        maxHeight=maxHeight - titleHeaderHeight;
      }
    }
 else {
      int minElY=0;
      boolean isMinElYSet=false;
      int height;
      Iterator<IPersist> components=cellview.getAllObjects(PositionComparator.XY_PERSIST_COMPARATOR);
      while (components.hasNext()) {
        IPersist element=components.next();
        if (element instanceof Field || element instanceof GraphicalComponent) {
          if (element instanceof GraphicalComponent && ((GraphicalComponent)element).getLabelFor() != null) {
            labelsFor.put(((GraphicalComponent)element).getLabelFor(),element);
            continue;
          }
          Point l=((IFormElement)element).getLocation();
          if (l == null) {
            continue;
          }
          if (l.y >= startY && l.y < endY) {
            if (isListViewMode()) {
              height=l.y + ((IFormElement)element).getSize().height;
              if (!isMinElYSet || minElY > l.y) {
                minElY=l.y;
                isMinElYSet=true;
              }
            }
 else {
              height=((IFormElement)element).getSize().height;
            }
            if (height > maxHeight)             maxHeight=height;
          }
        }
      }
      maxHeight=maxHeight - minElY;
    }
    if (maxHeight == 0)     maxHeight=20;
  }
 catch (  Exception ex1) {
    Debug.error(""String_Node_Str"",ex1);
  }
  tableContainerBody=new WebMarkupContainer(""String_Node_Str"");
  tableContainerBody.setOutputMarkupId(true);
  table=new WebCellBasedViewListView(""String_Node_Str"",data,1,cellview,dataProviderLookup,el,startY,endY,form);
  table.setReuseItems(true);
  tableContainerBody.add(table);
  add(tableContainerBody);
  final LinkedHashMap<String,IDataAdapter> dataadapters=new LinkedHashMap<String,IDataAdapter>();
  final SortedList<IPersist> columnTabSequence=new SortedList<IPersist>(TabSeqComparator.INSTANCE);
  createComponents(application,form,cellview,dataProviderLookup,el,startY,endY,new ItemAdd(){
    public void add(    IPersist element,    Component comp){
      if (element instanceof IFormElement && comp instanceof IComponent) {
        ((IComponent)comp).setLocation(((IFormElement)element).getLocation());
        ((IComponent)comp).setSize(((IFormElement)element).getSize());
      }
      elementToColumnIdentifierComponent.put(element,comp);
      if (cellview instanceof Form && element instanceof ISupportTabSeq && ((ISupportTabSeq)element).getTabSeq() >= 0) {
        columnTabSequence.add(element);
      }
      if (comp instanceof IDisplayData) {
        String dataprovider=((IDisplayData)comp).getDataProviderID();
        WebCellAdapter previous=(WebCellAdapter)dataadapters.get(dataprovider);
        if (previous == null) {
          WebCellAdapter wca=new WebCellAdapter(dataprovider,WebCellBasedView.this);
          dataadapters.put(dataprovider,wca);
        }
        if (dataprovider != null) {
          if (initialSortColumnNames.containsKey(dataprovider))           initialSortedColumns.put(comp.getId(),initialSortColumnNames.get(dataprovider));
        }
      }
    }
  }
);
  for (int i=columnTabSequence.size() - 1; i >= 0; i--) {
    elementTabIndexes.put(columnTabSequence.get(i),Integer.valueOf(i));
  }
  if (addHeaders) {
    headers=new SortableCellViewHeaders(form,this,""String_Node_Str"",table,cellview,application,initialSortedColumns,new IHeaders(){
      public void registerHeader(      IPersist matchingElement,      Component headerComponent){
        SortableCellViewHeader sortableHeader=(SortableCellViewHeader)headerComponent;
        Component columnIdentifier=WebCellBasedView.this.elementToColumnIdentifierComponent.get(matchingElement);
        if (columnIdentifier instanceof IProviderStylePropertyChanges) {
          String width=((IProviderStylePropertyChanges)columnIdentifier).getStylePropertyChanges().getJSProperty(""String_Node_Str"");
          if (width != null) {
            sortableHeader.setWidth(Integer.parseInt(width.substring(0,width.length() - 2)));
          }
 else           if (matchingElement instanceof BaseComponent)           sortableHeader.setWidth(((BaseComponent)matchingElement).getSize().width);
        }
        sortableHeader.setTabSequenceIndex(ISupportWebTabSeq.SKIP);
        sortableHeader.setScriptExecuter(el);
        sortableHeader.setResizeClass(columnIdentifier.getId());
        WebCellBasedView.this.registerHeader(matchingElement,headerComponent);
      }
    }
);
    add(headers);
  }
  if (useAJAX) {
    add(pagingNavigator=new ServoyAjaxPagingNavigator(""String_Node_Str"",table));
    add(tableResizeBehavior=new ServoyTableResizeBehavior(startY,endY,cellview));
    if (isScrollMode())     add(new HeaderHeightCalculationBehavior());
  }
 else {
    add(pagingNavigator=new ServoySubmitPagingNavigator(""String_Node_Str"",table));
  }
  showPageNavigator=!((scrollbars & ISupportScrollbars.VERTICAL_SCROLLBAR_NEVER) == ISupportScrollbars.VERTICAL_SCROLLBAR_NEVER);
  try {
    if (cellview instanceof Portal) {
      relationName=((Portal)cellview).getRelationName();
      Relation[] rels=application.getFlattenedSolution().getRelationSequence(((Portal)cellview).getRelationName());
      if (rels != null) {
        Relation r=rels[rels.length - 1];
        if (r != null) {
          defaultSort=((FoundSetManager)application.getFoundSetManager()).getSortColumns(application.getFoundSetManager().getTable(r.getForeignDataSource()),((Portal)cellview).getInitialSort());
        }
      }
    }
 else {
      defaultSort=((FoundSetManager)application.getFoundSetManager()).getSortColumns(((Form)cellview).getDataSource(),((Form)cellview).getInitialSort());
    }
  }
 catch (  RepositoryException e) {
    Debug.error(e);
    defaultSort=new ArrayList<SortColumn>(1);
  }
  try {
    dal=new DataAdapterList(application,dataProviderLookup,elementToColumnIdentifierComponent,el.getFormController(),dataadapters,null);
  }
 catch (  RepositoryException ex) {
    Debug.error(ex);
  }
  table.setPageabeMode(!isScrollMode());
  if (isScrollMode()) {
    tableContainerBody.add(new StyleAppendingModifier(new Model<String>(){
      private static final long serialVersionUID=1L;
      @Override public String getObject(){
        int scrollPadding=0;
        return scrollBarDefinitionToOverflowAttribute(scrollbars,isScrollMode(),true,currentData == null || currentData.getSize() == 0) + ""String_Node_Str"" + (scrollableHeaderHeight == -1 ? ""String_Node_Str"" : ""String_Node_Str"" + scrollableHeaderHeight + ""String_Node_Str"")+ ""String_Node_Str""+ scrollPadding+ ""String_Node_Str"";
      }
    }
));
    tableContainerBody.add(new SimpleAttributeModifier(""String_Node_Str"",""String_Node_Str""));
    tableContainerBody.add(scrollBehavior=new ScrollBehavior(""String_Node_Str""));
    tableContainerBody.add(topPlaceholderUpdater=new TopPlaceholderUpdater());
  }
  add(new StyleAppendingModifier(new Model<String>(){
    private static final long serialVersionUID=1L;
    @Override public String getObject(){
      WebForm container=findParent(WebForm.class);
      if (container != null && container.getBorder() instanceof TitledBorder) {
        int offset=ComponentFactoryHelper.getTitledBorderHeight(container.getBorder());
        return ""String_Node_Str"" + offset + ""String_Node_Str"";
      }
      return ""String_Node_Str"";
    }
  }
){
    @Override public boolean isEnabled(    Component component){
      WebForm container=component.findParent(WebForm.class);
      if (container != null && container.getBorder() instanceof TitledBorder) {
        return super.isEnabled(component);
      }
      return false;
    }
  }
);
  add(new ServoyAjaxEventBehavior(""String_Node_Str"",null,true){
    @Override protected void onEvent(    AjaxRequestTarget target){
      int i=fc.getFormModel().getSelectedIndex();
      boolean downArrow=Utils.getAsBoolean(RequestCycle.get().getRequest().getParameter(""String_Node_Str""));
      if (downArrow) {
        i++;
      }
 else {
        i--;
      }
      if (i >= 0) {
        fc.getFormModel().setSelectedIndex(i);
        WebEventExecutor.generateResponse(target,getPage());
      }
    }
    @Override protected CharSequence generateCallbackScript(    final CharSequence partialCall){
      return super.generateCallbackScript(partialCall + ""String_Node_Str"");
    }
    @Override protected IAjaxCallDecorator getAjaxCallDecorator(){
      return new AjaxCallDecorator(){
        private static final long serialVersionUID=1L;
        @Override public CharSequence decorateScript(        CharSequence script){
          return ""String_Node_Str"" + script + ""String_Node_Str""+ getMarkupId()+ ""String_Node_Str"";
        }
      }
;
    }
  }
);
  if (!isListViewMode()) {
    add(new ServoyAjaxEventBehavior(""String_Node_Str"",null,true){
      @Override protected void onEvent(      AjaxRequestTarget target){
        if (application.getFoundSetManager().getEditRecordList().isEditing()) {
          application.getFoundSetManager().getEditRecordList().stopEditing(false);
          WebEventExecutor.generateResponse(target,getPage());
        }
      }
      @Override protected IAjaxCallDecorator getAjaxCallDecorator(){
        return new AjaxCallDecorator(){
          private static final long serialVersionUID=1L;
          @Override public CharSequence decorateScript(          CharSequence script){
            return ""String_Node_Str"" + script + ""String_Node_Str"";
          }
        }
;
      }
    }
);
  }
}","public WebCellBasedView(final String id,final IApplication application,RuntimePortal scriptable,final Form form,final AbstractBase cellview,final IDataProviderLookup dataProviderLookup,final IScriptExecuter el,boolean addHeaders,final int startY,final int endY,final int sizeHint,int viewType){
  super(id);
  this.application=application;
  this.cellview=cellview;
  this.fc=el.getFormController();
  this.addHeaders=addHeaders;
  this.startY=startY;
  this.endY=endY;
  this.formDesignHeight=form.getSize().height;
  this.sizeHint=sizeHint;
  this.isListViewMode=viewType == IForm.LIST_VIEW || viewType == FormController.LOCKED_LIST_VIEW;
  this.bodyWidthHint=form.getWidth();
  double multiplier=Utils.getAsDouble(Settings.getInstance().getProperty(""String_Node_Str"",""String_Node_Str""));
  if (multiplier > 1.1) {
    NEW_PAGE_MULITPLIER=multiplier;
  }
 else {
    NEW_PAGE_MULITPLIER=1.1;
  }
  useAJAX=Utils.getAsBoolean(application.getRuntimeProperties().get(""String_Node_Str""));
  useAnchors=Utils.getAsBoolean(application.getRuntimeProperties().get(""String_Node_Str""));
  if (useAJAX)   setVersioned(false);
  setScrollMode(Boolean.TRUE.equals(application.getClientProperty(IApplication.TABLEVIEW_WC_DEFAULT_SCROLLABLE)));
  isKeepLoadedRowsInScrollMode=Boolean.TRUE.equals(application.getClientProperty(IApplication.TABLEVIEW_WC_SCROLLABLE_KEEP_LOADED_ROWS));
  setOutputMarkupPlaceholderTag(true);
  dataRendererOnRenderWrapper=new DataRendererOnRenderWrapper(this);
  loadingInfo=new Label(""String_Node_Str"",""String_Node_Str"");
  loadingInfo.setVisible(false);
  add(loadingInfo);
  if (!useAJAX)   bodyHeightHint=sizeHint;
  String orientation=OrientationApplier.getHTMLContainerOrientation(application.getLocale(),application.getSolution().getTextOrientation());
  isLeftToRightOrientation=!OrientationApplier.RTL.equalsIgnoreCase(orientation);
  int tFormHeight=0;
  Iterator<Part> partIte=form.getParts();
  while (partIte.hasNext()) {
    Part p=partIte.next();
    if (p.getPartType() == Part.BODY) {
      tFormHeight=p.getHeight() - startY;
      break;
    }
  }
  formBodySize=new Dimension(form.getWidth(),tFormHeight);
  ChangesRecorder jsChangeRecorder=new ChangesRecorder(null,null){
    @Override public boolean isChanged(){
      boolean retval=false;
      if (super.isChanged()) {
        retval=true;
        return retval;
      }
      if (!retval) {
        Iterator<Component> iterator=elementToColumnIdentifierComponent.values().iterator();
        while (iterator.hasNext()) {
          Component object=iterator.next();
          if (object instanceof IProviderStylePropertyChanges) {
            if (((IProviderStylePropertyChanges)object).getStylePropertyChanges().isChanged()) {
              retval=true;
              break;
            }
          }
        }
      }
      if (retval) {
        MainPage page=(MainPage)getPage();
        page.getPageContributor().addTableToRender(WebCellBasedView.this);
        setRendered();
      }
      return false;
    }
    @Override public void setRendered(){
      super.setRendered();
      Iterator<Component> iterator=elementToColumnIdentifierComponent.values().iterator();
      while (iterator.hasNext()) {
        Component comp=iterator.next();
        if (comp instanceof IProviderStylePropertyChanges) {
          ((IProviderStylePropertyChanges)comp).getStylePropertyChanges().setRendered();
        }
      }
    }
  }
;
  this.scriptable=scriptable;
  ((ChangesRecorder)scriptable.getChangesRecorder()).setAdditionalChangesRecorder(jsChangeRecorder);
  add(TooltipAttributeModifier.INSTANCE);
  final int scrollbars=(cellview instanceof ISupportScrollbars) ? ((ISupportScrollbars)cellview).getScrollbars() : 0;
  add(new StyleAppendingModifier(new Model<String>(){
    private static final long serialVersionUID=1L;
    @Override public String getObject(){
      if (!isScrollMode() && findParent(IWebFormContainer.class) != null) {
        return ""String_Node_Str"";
      }
      return scrollBarDefinitionToOverflowAttribute(scrollbars,isScrollMode(),false,currentData == null || currentData.getSize() == 0);
    }
  }
));
  if (cellview instanceof BaseComponent) {
    ComponentFactory.applyBasicComponentProperties(application,this,(BaseComponent)cellview,ComponentFactory.getStyleForBasicComponent(application,cellview,form));
  }
  boolean sortable=true;
  String initialSortString=null;
  int onRenderMethodID=0;
  AbstractBase onRenderPersist=null;
  if (cellview instanceof Portal) {
    Portal p=(Portal)cellview;
    isListViewMode=p.getMultiLine();
    setRowBGColorScript(p.getRowBGColorCalculation(),p.getInstanceMethodArguments(""String_Node_Str""));
    sortable=p.getSortable();
    initialSortString=p.getInitialSort();
    onRenderMethodID=p.getOnRenderMethodID();
    onRenderPersist=p;
    int portalAnchors=p.getAnchors();
    isAnchored=(((portalAnchors & IAnchorConstants.NORTH) > 0) && ((portalAnchors & IAnchorConstants.SOUTH) > 0)) || (((portalAnchors & IAnchorConstants.EAST) > 0) && ((portalAnchors & IAnchorConstants.WEST) > 0));
  }
 else   if (cellview instanceof Form) {
    initialSortString=form.getInitialSort();
    onRenderMethodID=form.getOnRenderMethodID();
    onRenderPersist=form;
    isAnchored=true;
  }
  if (onRenderMethodID > 0) {
    dataRendererOnRenderWrapper.getRenderEventExecutor().setRenderCallback(Integer.toString(onRenderMethodID),Utils.parseJSExpressions(onRenderPersist.getInstanceMethodArguments(""String_Node_Str"")));
    dataRendererOnRenderWrapper.getRenderEventExecutor().setRenderScriptExecuter(fc != null ? fc.getScriptExecuter() : null);
  }
  initDragNDrop(fc,startY);
  if (sortable) {
    if (initialSortString != null) {
      StringTokenizer tokByComma=new StringTokenizer(initialSortString,""String_Node_Str"");
      while (tokByComma.hasMoreTokens()) {
        String initialSortFirstToken=tokByComma.nextToken();
        StringTokenizer tokBySpace=new StringTokenizer(initialSortFirstToken);
        if (tokBySpace.hasMoreTokens()) {
          String initialSortColumnName=tokBySpace.nextToken();
          if (tokBySpace.hasMoreTokens()) {
            String sortDir=tokBySpace.nextToken();
            boolean initialSortAsc=true;
            if (sortDir.equalsIgnoreCase(""String_Node_Str""))             initialSortAsc=false;
            initialSortColumnNames.put(initialSortColumnName,new Boolean(initialSortAsc));
          }
        }
      }
    }
    if (initialSortColumnNames.size() == 0) {
      try {
        String dataSource=null;
        if (cellview instanceof Portal) {
          Portal p=(Portal)cellview;
          String relation=p.getRelationName();
          int lastDot=relation.lastIndexOf(""String_Node_Str"");
          if (lastDot >= 0) {
            relation=relation.substring(lastDot + 1);
          }
          Relation rel=application.getFlattenedSolution().getRelation(relation);
          if (rel != null) {
            dataSource=rel.getForeignDataSource();
          }
        }
 else {
          dataSource=form.getDataSource();
        }
        if (dataSource != null) {
          Iterator<String> pkColumnNames=application.getFoundSetManager().getTable(dataSource).getRowIdentColumnNames();
          while (pkColumnNames.hasNext()) {
            initialSortColumnNames.put(pkColumnNames.next(),Boolean.TRUE);
          }
        }
      }
 catch (      RepositoryException e) {
        Debug.log(""String_Node_Str"",e);
      }
    }
  }
  maxHeight=0;
  try {
    if (isListViewMode() && !(cellview instanceof Portal)) {
      int headerHeight=0;
      int titleHeaderHeight=0;
      Iterator<Part> pIte=form.getParts();
      while (pIte.hasNext()) {
        Part p=pIte.next();
        if (p.getPartType() == Part.BODY) {
          maxHeight=p.getHeight();
        }
 else         if (p.getPartType() == Part.HEADER) {
          headerHeight=p.getHeight();
        }
 else         if (p.getPartType() == Part.TITLE_HEADER) {
          titleHeaderHeight=p.getHeight();
        }
      }
      if (headerHeight != 0) {
        maxHeight=maxHeight - headerHeight;
      }
 else {
        maxHeight=maxHeight - titleHeaderHeight;
      }
    }
 else {
      int minElY=0;
      boolean isMinElYSet=false;
      int height;
      Iterator<IPersist> components=cellview.getAllObjects(PositionComparator.XY_PERSIST_COMPARATOR);
      while (components.hasNext()) {
        IPersist element=components.next();
        if (element instanceof Field || element instanceof GraphicalComponent) {
          if (element instanceof GraphicalComponent && ((GraphicalComponent)element).getLabelFor() != null) {
            labelsFor.put(((GraphicalComponent)element).getLabelFor(),element);
            continue;
          }
          Point l=((IFormElement)element).getLocation();
          if (l == null) {
            continue;
          }
          if (l.y >= startY && l.y < endY) {
            if (isListViewMode()) {
              height=l.y + ((IFormElement)element).getSize().height;
              if (!isMinElYSet || minElY > l.y) {
                minElY=l.y;
                isMinElYSet=true;
              }
            }
 else {
              height=((IFormElement)element).getSize().height;
            }
            if (height > maxHeight)             maxHeight=height;
          }
        }
      }
      maxHeight=maxHeight - minElY;
    }
    if (maxHeight == 0)     maxHeight=20;
  }
 catch (  Exception ex1) {
    Debug.error(""String_Node_Str"",ex1);
  }
  tableContainerBody=new WebMarkupContainer(""String_Node_Str"");
  tableContainerBody.setOutputMarkupId(true);
  table=new WebCellBasedViewListView(""String_Node_Str"",data,1,cellview,dataProviderLookup,el,startY,endY,form);
  table.setReuseItems(true);
  tableContainerBody.add(table);
  add(tableContainerBody);
  final LinkedHashMap<String,IDataAdapter> dataadapters=new LinkedHashMap<String,IDataAdapter>();
  final SortedList<IPersist> columnTabSequence=new SortedList<IPersist>(TabSeqComparator.INSTANCE);
  createComponents(application,form,cellview,dataProviderLookup,el,startY,endY,new ItemAdd(){
    public void add(    IPersist element,    Component comp){
      if (element instanceof IFormElement && comp instanceof IComponent) {
        ((IComponent)comp).setLocation(((IFormElement)element).getLocation());
        ((IComponent)comp).setSize(((IFormElement)element).getSize());
      }
      elementToColumnIdentifierComponent.put(element,comp);
      if (cellview instanceof Form && element instanceof ISupportTabSeq && ((ISupportTabSeq)element).getTabSeq() >= 0) {
        columnTabSequence.add(element);
      }
      if (comp instanceof IDisplayData) {
        String dataprovider=((IDisplayData)comp).getDataProviderID();
        WebCellAdapter previous=(WebCellAdapter)dataadapters.get(dataprovider);
        if (previous == null) {
          WebCellAdapter wca=new WebCellAdapter(dataprovider,WebCellBasedView.this);
          dataadapters.put(dataprovider,wca);
        }
        if (dataprovider != null) {
          if (initialSortColumnNames.containsKey(dataprovider))           initialSortedColumns.put(comp.getId(),initialSortColumnNames.get(dataprovider));
        }
      }
    }
  }
);
  for (int i=columnTabSequence.size() - 1; i >= 0; i--) {
    elementTabIndexes.put(columnTabSequence.get(i),Integer.valueOf(i));
  }
  if (addHeaders) {
    headers=new SortableCellViewHeaders(form,this,""String_Node_Str"",table,cellview,application,initialSortedColumns,new IHeaders(){
      public void registerHeader(      IPersist matchingElement,      Component headerComponent){
        SortableCellViewHeader sortableHeader=(SortableCellViewHeader)headerComponent;
        Component columnIdentifier=WebCellBasedView.this.elementToColumnIdentifierComponent.get(matchingElement);
        if (columnIdentifier instanceof IProviderStylePropertyChanges) {
          String width=((IProviderStylePropertyChanges)columnIdentifier).getStylePropertyChanges().getJSProperty(""String_Node_Str"");
          if (width != null) {
            sortableHeader.setWidth(Integer.parseInt(width.substring(0,width.length() - 2)));
          }
 else           if (matchingElement instanceof BaseComponent)           sortableHeader.setWidth(((BaseComponent)matchingElement).getSize().width);
        }
        sortableHeader.setTabSequenceIndex(ISupportWebTabSeq.SKIP);
        sortableHeader.setScriptExecuter(el);
        sortableHeader.setResizeClass(columnIdentifier.getId());
        WebCellBasedView.this.registerHeader(matchingElement,headerComponent);
      }
    }
);
    add(headers);
  }
  if (useAJAX) {
    add(pagingNavigator=new ServoyAjaxPagingNavigator(""String_Node_Str"",table));
    add(tableResizeBehavior=new ServoyTableResizeBehavior(startY,endY,cellview));
    if (isScrollMode())     add(new HeaderHeightCalculationBehavior());
  }
 else {
    add(pagingNavigator=new ServoySubmitPagingNavigator(""String_Node_Str"",table));
  }
  showPageNavigator=!((scrollbars & ISupportScrollbars.VERTICAL_SCROLLBAR_NEVER) == ISupportScrollbars.VERTICAL_SCROLLBAR_NEVER);
  try {
    if (cellview instanceof Portal) {
      relationName=((Portal)cellview).getRelationName();
      Relation[] rels=application.getFlattenedSolution().getRelationSequence(((Portal)cellview).getRelationName());
      if (rels != null) {
        Relation r=rels[rels.length - 1];
        if (r != null) {
          defaultSort=((FoundSetManager)application.getFoundSetManager()).getSortColumns(application.getFoundSetManager().getTable(r.getForeignDataSource()),((Portal)cellview).getInitialSort());
        }
      }
    }
 else {
      defaultSort=((FoundSetManager)application.getFoundSetManager()).getSortColumns(((Form)cellview).getDataSource(),((Form)cellview).getInitialSort());
    }
  }
 catch (  RepositoryException e) {
    Debug.error(e);
    defaultSort=new ArrayList<SortColumn>(1);
  }
  try {
    dal=new DataAdapterList(application,dataProviderLookup,elementToColumnIdentifierComponent,el.getFormController(),dataadapters,null);
  }
 catch (  RepositoryException ex) {
    Debug.error(ex);
  }
  table.setPageabeMode(!isScrollMode());
  if (isScrollMode()) {
    tableContainerBody.add(new StyleAppendingModifier(new Model<String>(){
      private static final long serialVersionUID=1L;
      @Override public String getObject(){
        int scrollPadding=0;
        return scrollBarDefinitionToOverflowAttribute(scrollbars,isScrollMode(),true,currentData == null || currentData.getSize() == 0) + ""String_Node_Str"" + scrollableHeaderHeight+ ""String_Node_Str""+ scrollPadding+ ""String_Node_Str"";
      }
    }
));
    tableContainerBody.add(new SimpleAttributeModifier(""String_Node_Str"",""String_Node_Str""));
    tableContainerBody.add(scrollBehavior=new ScrollBehavior(""String_Node_Str""));
    tableContainerBody.add(topPlaceholderUpdater=new TopPlaceholderUpdater());
  }
  add(new StyleAppendingModifier(new Model<String>(){
    private static final long serialVersionUID=1L;
    @Override public String getObject(){
      WebForm container=findParent(WebForm.class);
      if (container != null && container.getBorder() instanceof TitledBorder) {
        int offset=ComponentFactoryHelper.getTitledBorderHeight(container.getBorder());
        return ""String_Node_Str"" + offset + ""String_Node_Str"";
      }
      return ""String_Node_Str"";
    }
  }
){
    @Override public boolean isEnabled(    Component component){
      WebForm container=component.findParent(WebForm.class);
      if (container != null && container.getBorder() instanceof TitledBorder) {
        return super.isEnabled(component);
      }
      return false;
    }
  }
);
  add(new ServoyAjaxEventBehavior(""String_Node_Str"",null,true){
    @Override protected void onEvent(    AjaxRequestTarget target){
      int i=fc.getFormModel().getSelectedIndex();
      boolean downArrow=Utils.getAsBoolean(RequestCycle.get().getRequest().getParameter(""String_Node_Str""));
      if (downArrow) {
        i++;
      }
 else {
        i--;
      }
      if (i >= 0) {
        fc.getFormModel().setSelectedIndex(i);
        WebEventExecutor.generateResponse(target,getPage());
      }
    }
    @Override protected CharSequence generateCallbackScript(    final CharSequence partialCall){
      return super.generateCallbackScript(partialCall + ""String_Node_Str"");
    }
    @Override protected IAjaxCallDecorator getAjaxCallDecorator(){
      return new AjaxCallDecorator(){
        private static final long serialVersionUID=1L;
        @Override public CharSequence decorateScript(        CharSequence script){
          return ""String_Node_Str"" + script + ""String_Node_Str""+ getMarkupId()+ ""String_Node_Str"";
        }
      }
;
    }
  }
);
  if (!isListViewMode()) {
    add(new ServoyAjaxEventBehavior(""String_Node_Str"",null,true){
      @Override protected void onEvent(      AjaxRequestTarget target){
        if (application.getFoundSetManager().getEditRecordList().isEditing()) {
          application.getFoundSetManager().getEditRecordList().stopEditing(false);
          WebEventExecutor.generateResponse(target,getPage());
        }
      }
      @Override protected IAjaxCallDecorator getAjaxCallDecorator(){
        return new AjaxCallDecorator(){
          private static final long serialVersionUID=1L;
          @Override public CharSequence decorateScript(          CharSequence script){
            return ""String_Node_Str"" + script + ""String_Node_Str"";
          }
        }
;
      }
    }
);
  }
}",0.9973420217782732
143475,"@Override public void touchForm(Form form,String realInstanceName,boolean async){
  if (form == null)   return;
  ConcurrentMap<String,String> formsOnClient=endpointForms.get(WebsocketEndpoint.get());
  String formName=realInstanceName == null ? form.getName() : realInstanceName;
  String formUrl=""String_Node_Str"" + form.getSolution().getName() + ""String_Node_Str""+ formName+ ""String_Node_Str"";
  if (formsOnClient.putIfAbsent(formName,formUrl) == null) {
    updateController(form,formName,formUrl,!async);
    if (!async) {
synchronized (formUrl) {
        try {
          formUrl.wait();
        }
 catch (        InterruptedException ex) {
          Debug.error(ex);
        }
      }
    }
  }
}","@Override public void touchForm(Form form,String realInstanceName,boolean async){
  if (form == null)   return;
  ConcurrentMap<String,Pair<String,Boolean>> formsOnClient=endpointForms.get(WebsocketEndpoint.get());
  String formName=realInstanceName == null ? form.getName() : realInstanceName;
  String formUrl=""String_Node_Str"" + form.getSolution().getName() + ""String_Node_Str""+ formName+ ""String_Node_Str"";
  if (formsOnClient.putIfAbsent(formName,new Pair<String,Boolean>(formUrl,Boolean.FALSE)) == null) {
    updateController(form,formName,formUrl,!async);
  }
 else {
    formUrl=formsOnClient.get(formName).getLeft();
  }
  if (!async) {
synchronized (formUrl) {
      if (!formsOnClient.get(formName).getRight().booleanValue()) {
        try {
          formUrl.wait();
        }
 catch (        InterruptedException ex) {
          Debug.error(ex);
        }
      }
    }
  }
}",0.8749214330609679
143476,"@Override public void formCreated(String formName){
  ConcurrentMap<String,String> formsOnClient=endpointForms.get(WebsocketEndpoint.get());
  String formUrl=formsOnClient.get(formName);
synchronized (formUrl) {
    formUrl.notifyAll();
  }
}","@Override public void formCreated(String formName){
  ConcurrentMap<String,Pair<String,Boolean>> formsOnClient=endpointForms.get(WebsocketEndpoint.get());
  String formUrl=formsOnClient.get(formName).getLeft();
synchronized (formUrl) {
    formsOnClient.get(formName).setRight(Boolean.TRUE);
    formUrl.notifyAll();
  }
}",0.8581560283687943
143477,"@Override public void registerEndpoint(IWebsocketEndpoint endpoint){
  super.registerEndpoint(endpoint);
  endpointForms.put(endpoint,new ConcurrentHashMap<String,String>());
}","@Override public void registerEndpoint(IWebsocketEndpoint endpoint){
  super.registerEndpoint(endpoint);
  endpointForms.put(endpoint,new ConcurrentHashMap<String,Pair<String,Boolean>>());
}",0.9617486338797814
143478,"/** 
 * @param message
 */
public void handleMessage(final JSONObject obj){
  startHandlingEvent();
  if (client != null)   J2DBGlobals.setServiceProvider(client);
  try {
    String event=obj.getString(""String_Node_Str"");
switch (event) {
case ""String_Node_Str"":
{
        pushChanges(obj,false);
        break;
      }
case ""String_Node_Str"":
{
      pushChanges(obj,true);
      break;
    }
case ""String_Node_Str"":
{
    getEventDispatcher().addEvent(new Runnable(){
      @Override public void run(){
        try {
          JSONArray jsargs=obj.getJSONArray(""String_Node_Str"");
          IWebFormUI form=client.getFormManager().getFormAndSetCurrentWindow(obj.getString(""String_Node_Str"")).getFormUI();
          WebFormComponent webComponent=form.getWebComponent(obj.getString(""String_Node_Str""));
          String eventType=obj.getString(""String_Node_Str"");
          Object[] args=new Object[jsargs == null ? 0 : jsargs.length()];
          for (int i=0; jsargs != null && i < jsargs.length(); i++) {
            args[i]=jsargs.get(i);
          }
          String error=null;
          Object result=null;
          if (form instanceof WebGridFormUI && obj.has(""String_Node_Str"") && !((WebGridFormUI)form).setEditingRowByPkHash(obj.getString(""String_Node_Str""))) {
            error=""String_Node_Str"" + obj.getString(""String_Node_Str"");
          }
 else {
            pushChanges(obj);
            try {
              result=webComponent.executeEvent(eventType,args);
            }
 catch (            Exception e) {
              Debug.error(e);
              error=e.getMessage();
            }
          }
          if (obj.has(""String_Node_Str"")) {
            WebsocketEndpoint.get().sendResponse(obj.get(""String_Node_Str""),error == null ? result : error,error == null,getForJsonConverter());
          }
        }
 catch (        JSONException|IOException e) {
          Debug.error(e);
          sendInternalError(e);
        }
      }
    }
);
    break;
  }
case ""String_Node_Str"":
{
  String formName=obj.getString(""String_Node_Str"");
  IWebFormUI form=client.getFormManager().getForm(formName).getFormUI();
  WebFormComponent webComponent=form.getWebComponent(obj.getString(""String_Node_Str""));
  Object property=webComponent.getProperty(obj.getString(""String_Node_Str""));
  LookupListModel lstModel=null;
  if (property instanceof CustomValueList) {
    lstModel=new LookupListModel(client,(CustomValueList)property);
    webComponent.setProperty(obj.getString(""String_Node_Str""),lstModel,ConversionLocation.BROWSER_UPDATE);
  }
 else   if (property instanceof LookupValueList) {
    lstModel=new LookupListModel(client,(LookupValueList)property);
    webComponent.setProperty(obj.getString(""String_Node_Str""),lstModel,ConversionLocation.BROWSER_UPDATE);
  }
 else   if (property instanceof LookupListModel) {
    lstModel=(LookupListModel)property;
  }
  if (lstModel != null) {
    lstModel.fill(null,null,obj.getString(""String_Node_Str""),false);
  }
  break;
}
}
}
 catch (Exception e) {
Debug.error(e);
sendInternalError(e);
}
 finally {
stopHandlingEvent();
J2DBGlobals.setServiceProvider(null);
}
}","/** 
 * @param message
 */
public void handleMessage(final JSONObject obj){
  startHandlingEvent();
  if (client != null)   J2DBGlobals.setServiceProvider(client);
  try {
    String event=obj.getString(""String_Node_Str"");
switch (event) {
case ""String_Node_Str"":
{
        pushChanges(obj,false);
        break;
      }
case ""String_Node_Str"":
{
      pushChanges(obj,true);
      break;
    }
case ""String_Node_Str"":
{
    getEventDispatcher().addEvent(new Runnable(){
      @Override public void run(){
        try {
          JSONArray jsargs=obj.getJSONArray(""String_Node_Str"");
          IWebFormUI form=client.getFormManager().getFormAndSetCurrentWindow(obj.getString(""String_Node_Str"")).getFormUI();
          WebFormComponent webComponent=form.getWebComponent(obj.getString(""String_Node_Str""));
          String eventType=obj.getString(""String_Node_Str"");
          Object[] args=new Object[jsargs == null ? 0 : jsargs.length()];
          for (int i=0; jsargs != null && i < jsargs.length(); i++) {
            args[i]=jsargs.get(i);
          }
          String error=null;
          Object result=null;
          if (form instanceof WebGridFormUI && obj.has(""String_Node_Str"") && !((WebGridFormUI)form).setEditingRowByPkHash(obj.getString(""String_Node_Str""))) {
            error=""String_Node_Str"" + obj.getString(""String_Node_Str"");
          }
 else {
            pushChanges(obj);
            try {
              result=webComponent.executeEvent(eventType,args);
            }
 catch (            Exception e) {
              Debug.error(e);
              error=e.getMessage();
            }
          }
          if (obj.has(""String_Node_Str"")) {
            WebsocketEndpoint.get().sendResponse(obj.get(""String_Node_Str""),error == null ? result : error,error == null,getForJsonConverter());
          }
        }
 catch (        JSONException|IOException e) {
          Debug.error(e);
          sendInternalError(e);
        }
      }
    }
);
    break;
  }
case ""String_Node_Str"":
{
  String formName=obj.getString(""String_Node_Str"");
  IWebFormUI form=client.getFormManager().getForm(formName).getFormUI();
  WebFormComponent webComponent=form.getWebComponent(obj.getString(""String_Node_Str""));
  Object property=webComponent.getProperty(obj.getString(""String_Node_Str""));
  LookupListModel lstModel=null;
  if (property instanceof CustomValueList) {
    lstModel=new LookupListModel(client,(CustomValueList)property);
    webComponent.setProperty(obj.getString(""String_Node_Str""),lstModel,ConversionLocation.BROWSER_UPDATE);
  }
 else   if (property instanceof LookupValueList) {
    lstModel=new LookupListModel(client,(LookupValueList)property);
    webComponent.setProperty(obj.getString(""String_Node_Str""),lstModel,ConversionLocation.BROWSER_UPDATE);
  }
 else   if (property instanceof LookupListModel) {
    lstModel=(LookupListModel)property;
  }
  if (lstModel != null) {
    lstModel.fill(null,null,obj.getString(""String_Node_Str""),false);
  }
  break;
}
case ""String_Node_Str"":
formCreated(obj.getString(""String_Node_Str""));
break;
}
}
 catch (Exception e) {
Debug.error(e);
sendInternalError(e);
}
 finally {
stopHandlingEvent();
J2DBGlobals.setServiceProvider(null);
}
}",0.9876777251184834
143479,"@Override public Object executeMethod(String methodName,final JSONObject args) throws Exception {
  INGClientWebsocketSession websocketSession=getApplication().getWebsocketSession();
switch (methodName) {
case ""String_Node_Str"":
{
      IWebFormUI form=getFormAndSetCurrentWindow(args.optString(""String_Node_Str"")).getFormUI();
      form.getDataAdapterList().startEdit(form.getWebComponent(args.optString(""String_Node_Str"")),args.optString(""String_Node_Str""));
      break;
    }
case ""String_Node_Str"":
{
    try {
      String formName=SecuritySupport.decrypt(Settings.getInstance(),args.optString(""String_Node_Str""));
      IWebFormUI form=getFormAndSetCurrentWindow(formName).getFormUI();
      form.getDataAdapterList().executeInlineScript(args.optString(""String_Node_Str""),args.optJSONObject(""String_Node_Str""));
    }
 catch (    Exception ex) {
      Debug.error(""String_Node_Str"",ex);
    }
    break;
  }
case ""String_Node_Str"":
{
  final String formName=args.optString(""String_Node_Str"");
  websocketSession.formCreated(formName);
  IWebFormUI form=getFormAndSetCurrentWindow(formName).getFormUI();
  if (form instanceof WebGridFormUI) {
    WebGridFormUI grid=(WebGridFormUI)form;
    if (args.has(""String_Node_Str""))     grid.setCurrentPage(args.optInt(""String_Node_Str""));
    if (args.has(""String_Node_Str""))     grid.setPageSize(args.optInt(""String_Node_Str""));
  }
  Map<String,Map<String,Object>> properties=form.getAllComponentsProperties();
  Map<String,Map<String,Map<String,Object>>> formData=new HashMap<String,Map<String,Map<String,Object>>>();
  formData.put(formName,properties);
  try {
    WebsocketEndpoint.get().sendMessage(formData.size() == 0 ? null : Collections.singletonMap(""String_Node_Str"",formData),true,websocketSession.getForJsonConverter(),ConversionLocation.BROWSER);
  }
 catch (  IOException e) {
    Debug.error(e);
  }
  break;
}
case ""String_Node_Str"":
{
IWebFormController form=getForm(args.optString(""String_Node_Str""));
if (form != null) {
  ((WebFormController)form).setReadOnly(args.optBoolean(""String_Node_Str"",false));
}
break;
}
case ""String_Node_Str"":
{
IWebFormController form=getForm(args.optString(""String_Node_Str""));
if (form != null) {
((WebFormController)form).setComponentEnabled(args.optBoolean(""String_Node_Str"",true));
}
break;
}
case ""String_Node_Str"":
{
IWebFormController parentForm=null;
IWebFormController controller=null;
String formName=args.optString(""String_Node_Str"");
if (args.has(""String_Node_Str"") && !args.isNull(""String_Node_Str"")) {
parentForm=getFormAndSetCurrentWindow(args.optString(""String_Node_Str""));
controller=getForm(formName);
}
 else {
controller=getFormAndSetCurrentWindow(formName);
}
List<Runnable> invokeLaterRunnables=new ArrayList<Runnable>();
boolean isVisible=args.getBoolean(""String_Node_Str"");
boolean ok=controller.notifyVisible(isVisible,invokeLaterRunnables);
if (ok && parentForm != null) {
WebFormComponent containerComponent=parentForm.getFormUI().getWebComponent(args.getString(""String_Node_Str""));
if (containerComponent != null) {
containerComponent.updateVisibleForm(controller.getFormUI(),isVisible,args.optInt(""String_Node_Str""));
}
if (args.has(""String_Node_Str"") && !args.isNull(""String_Node_Str"")) {
String relation=args.getString(""String_Node_Str"");
FoundSet parentFs=parentForm.getFormModel();
IRecordInternal selectedRecord=(IRecordInternal)parentFs.getSelectedRecord();
controller.loadRecords(selectedRecord.getRelatedFoundSet(relation));
parentForm.getFormUI().getDataAdapterList().addRelatedForm(controller,relation);
}
}
Utils.invokeLater(getApplication(),invokeLaterRunnables);
Form form=application.getFormManager().getPossibleForm(formName);
if (form != null) ((INGApplication)application).getWebsocketSession().touchForm(application.getFlattenedSolution().getFlattenedForm(form),formName,true);
return Boolean.valueOf(ok);
}
}
return null;
}","@Override public Object executeMethod(String methodName,final JSONObject args) throws Exception {
  INGClientWebsocketSession websocketSession=getApplication().getWebsocketSession();
switch (methodName) {
case ""String_Node_Str"":
{
      IWebFormUI form=getFormAndSetCurrentWindow(args.optString(""String_Node_Str"")).getFormUI();
      form.getDataAdapterList().startEdit(form.getWebComponent(args.optString(""String_Node_Str"")),args.optString(""String_Node_Str""));
      break;
    }
case ""String_Node_Str"":
{
    try {
      String formName=SecuritySupport.decrypt(Settings.getInstance(),args.optString(""String_Node_Str""));
      IWebFormUI form=getFormAndSetCurrentWindow(formName).getFormUI();
      form.getDataAdapterList().executeInlineScript(args.optString(""String_Node_Str""),args.optJSONObject(""String_Node_Str""));
    }
 catch (    Exception ex) {
      Debug.error(""String_Node_Str"",ex);
    }
    break;
  }
case ""String_Node_Str"":
{
  final String formName=args.optString(""String_Node_Str"");
  IWebFormUI form=getFormAndSetCurrentWindow(formName).getFormUI();
  if (form instanceof WebGridFormUI) {
    WebGridFormUI grid=(WebGridFormUI)form;
    if (args.has(""String_Node_Str""))     grid.setCurrentPage(args.optInt(""String_Node_Str""));
    if (args.has(""String_Node_Str""))     grid.setPageSize(args.optInt(""String_Node_Str""));
  }
  Map<String,Map<String,Object>> properties=form.getAllComponentsProperties();
  Map<String,Map<String,Map<String,Object>>> formData=new HashMap<String,Map<String,Map<String,Object>>>();
  formData.put(formName,properties);
  try {
    WebsocketEndpoint.get().sendMessage(formData.size() == 0 ? null : Collections.singletonMap(""String_Node_Str"",formData),true,websocketSession.getForJsonConverter(),ConversionLocation.BROWSER);
  }
 catch (  IOException e) {
    Debug.error(e);
  }
  break;
}
case ""String_Node_Str"":
{
IWebFormController form=getForm(args.optString(""String_Node_Str""));
if (form != null) {
  ((WebFormController)form).setReadOnly(args.optBoolean(""String_Node_Str"",false));
}
break;
}
case ""String_Node_Str"":
{
IWebFormController form=getForm(args.optString(""String_Node_Str""));
if (form != null) {
((WebFormController)form).setComponentEnabled(args.optBoolean(""String_Node_Str"",true));
}
break;
}
case ""String_Node_Str"":
{
IWebFormController parentForm=null;
IWebFormController controller=null;
String formName=args.optString(""String_Node_Str"");
if (args.has(""String_Node_Str"") && !args.isNull(""String_Node_Str"")) {
parentForm=getFormAndSetCurrentWindow(args.optString(""String_Node_Str""));
controller=getForm(formName);
}
 else {
controller=getFormAndSetCurrentWindow(formName);
}
List<Runnable> invokeLaterRunnables=new ArrayList<Runnable>();
boolean isVisible=args.getBoolean(""String_Node_Str"");
boolean ok=controller.notifyVisible(isVisible,invokeLaterRunnables);
if (ok && parentForm != null) {
WebFormComponent containerComponent=parentForm.getFormUI().getWebComponent(args.getString(""String_Node_Str""));
if (containerComponent != null) {
containerComponent.updateVisibleForm(controller.getFormUI(),isVisible,args.optInt(""String_Node_Str""));
}
if (args.has(""String_Node_Str"") && !args.isNull(""String_Node_Str"")) {
String relation=args.getString(""String_Node_Str"");
FoundSet parentFs=parentForm.getFormModel();
IRecordInternal selectedRecord=(IRecordInternal)parentFs.getSelectedRecord();
controller.loadRecords(selectedRecord.getRelatedFoundSet(relation));
parentForm.getFormUI().getDataAdapterList().addRelatedForm(controller,relation);
}
}
Utils.invokeLater(getApplication(),invokeLaterRunnables);
Form form=application.getFormManager().getPossibleForm(formName);
if (form != null) ((INGApplication)application).getWebsocketSession().touchForm(application.getFlattenedSolution().getFlattenedForm(form),formName,true);
return Boolean.valueOf(ok);
}
}
return null;
}",0.9945468709426124
143480,"/** 
 * Try to parse the given object as a UUID
 * @param o the object to try
 * @param throwOnException whether or not to throw a RuntimeException on failure
 * @return UUID or null if o is not recognized
 * @return the UUID - or null if the parse doesn't succeed if throwOnException is false
 */
public static UUID getAsUUID(Object o,boolean throwOnException){
  if (o == null) {
    return null;
  }
  try {
    if (o instanceof byte[] && ((byte[])o).length == 16) {
      return new UUID((byte[])o);
    }
    if (o instanceof String) {
      return UUID.fromString((String)o);
    }
    if (o instanceof UUID) {
      return (UUID)o;
    }
  }
 catch (  RuntimeException e) {
    if (throwOnException) {
      throw e;
    }
  }
  String msg=""String_Node_Str"" + o + ""String_Node_Str""+ o.getClass().getName();
  if (throwOnException) {
    throw new RuntimeException(msg);
  }
  Debug.trace(msg);
  return null;
}","/** 
 * Try to parse the given object as a UUID
 * @param o the object to try
 * @param throwOnException whether or not to throw a RuntimeException on failure
 * @return UUID or null if o is not recognized
 * @return the UUID - or null if the parse doesn't succeed if throwOnException is false
 */
public static UUID getAsUUID(Object o,boolean throwOnException){
  if (o == null) {
    return null;
  }
  try {
    if (o instanceof byte[] && ((byte[])o).length == 16) {
      return new UUID((byte[])o);
    }
    if (o instanceof String) {
      return UUID.fromString((String)o);
    }
    if (o instanceof UUID) {
      return (UUID)o;
    }
    if (o instanceof NativeJavaObject) {
      return getAsUUID(((NativeJavaObject)o).unwrap(),throwOnException);
    }
  }
 catch (  RuntimeException e) {
    if (throwOnException) {
      throw e;
    }
  }
  String msg=""String_Node_Str"" + o + ""String_Node_Str""+ o.getClass().getName();
  if (throwOnException) {
    throw new RuntimeException(msg);
  }
  Debug.trace(msg);
  return null;
}",0.9385875127942682
143481,"@SuppressWarnings(""String_Node_Str"") public JSONWriter propertiesAsJSON(JSONWriter writer) throws JSONException {
  Map<String,Object> properties=new HashMap<>();
  WebComponentSpecification componentSpec=getWebComponentSpec();
  Map<String,PropertyDescription> propDescription=componentSpec.getProperties();
  for (  PropertyDescription pd : propDescription.values()) {
    Object val=getProperty(pd.getName());
    if (val == null)     continue;
    IPropertyType type=pd.getType();
    if (type instanceof DataproviderPropertyType || type instanceof FormatPropertyType || type instanceof ValueListPropertyType) {
      continue;
    }
    if (type instanceof TagStringPropertyType) {
      if (((String)val).contains(""String_Node_Str""))       continue;
    }
    properties.put(pd.getName(),val);
  }
  if (persistImpl == null || !persistImpl.isForm()) {
    Map<String,Object> propertiesMap=new HashMap<>(propertyValues);
    Dimension dim=getDesignSize();
    properties.put(StaticContentSpecLoader.PROPERTY_SIZE.getPropertyName(),dim);
    Integer anchor=(Integer)propertiesMap.get(StaticContentSpecLoader.PROPERTY_ANCHORS.getPropertyName());
    if (anchor != null) {
      properties.put(StaticContentSpecLoader.PROPERTY_ANCHORS.getPropertyName(),anchor);
    }
  }
  if (propertyValues.containsKey(""String_Node_Str""))   properties.put(""String_Node_Str"",propertyValues.get(""String_Node_Str""));
  JSONWriter propertyWriter=(writer != null ? writer : new JSONStringer());
  try {
    propertyWriter.object();
    JSONUtils.writeDataWithConversions(propertyWriter,properties,NGClientForJsonConverter.INSTANCE,ConversionLocation.BROWSER);
    return propertyWriter.endObject();
  }
 catch (  JSONException|IllegalArgumentException e) {
    Debug.error(""String_Node_Str"" + getTagname() + ""String_Node_Str"",e);
    throw e;
  }
}","@SuppressWarnings(""String_Node_Str"") public JSONWriter propertiesAsJSON(JSONWriter writer) throws JSONException {
  Map<String,Object> properties=new HashMap<>();
  WebComponentSpecification componentSpec=getWebComponentSpec();
  Map<String,PropertyDescription> propDescription=componentSpec.getProperties();
  for (  PropertyDescription pd : propDescription.values()) {
    Object val=getProperty(pd.getName());
    if (val == null)     continue;
    IPropertyType type=pd.getType();
    if (type instanceof DataproviderPropertyType || type instanceof FormatPropertyType || type instanceof ValueListPropertyType|| type instanceof MediaPropertyType) {
      continue;
    }
    if (type instanceof TagStringPropertyType) {
      if (((String)val).contains(""String_Node_Str""))       continue;
    }
    properties.put(pd.getName(),val);
  }
  if (persistImpl == null || !persistImpl.isForm()) {
    Map<String,Object> propertiesMap=new HashMap<>(propertyValues);
    Dimension dim=getDesignSize();
    properties.put(StaticContentSpecLoader.PROPERTY_SIZE.getPropertyName(),dim);
    Integer anchor=(Integer)propertiesMap.get(StaticContentSpecLoader.PROPERTY_ANCHORS.getPropertyName());
    if (anchor != null) {
      properties.put(StaticContentSpecLoader.PROPERTY_ANCHORS.getPropertyName(),anchor);
    }
  }
  if (propertyValues.containsKey(""String_Node_Str""))   properties.put(""String_Node_Str"",propertyValues.get(""String_Node_Str""));
  JSONWriter propertyWriter=(writer != null ? writer : new JSONStringer());
  try {
    propertyWriter.object();
    JSONUtils.writeDataWithConversions(propertyWriter,properties,NGClientForJsonConverter.INSTANCE,ConversionLocation.BROWSER);
    return propertyWriter.endObject();
  }
 catch (  JSONException|IllegalArgumentException e) {
    Debug.error(""String_Node_Str"" + getTagname() + ""String_Node_Str"",e);
    throw e;
  }
}",0.9902650081124932
143482,"public void giveMeFoundSet(IFoundSetListener l) throws ServoyException {
  IFoundSetInternal set=null;
  if (l.getDataSource() == null || inMemDataSources.get(l.getDataSource()) != null || l.wantSharedFoundSet()) {
    String wantedGlobalRelationName=l.getGlobalRelationNamedFoundset();
    if (wantedGlobalRelationName != null) {
      set=getGlobalRelatedFoundSet(wantedGlobalRelationName);
      if (set == null || !Solution.areDataSourcesCompatible(application.getRepository(),set.getDataSource(),l.getDataSource())) {
        throw new RepositoryException(""String_Node_Str"" + wantedGlobalRelationName + ""String_Node_Str"");
      }
    }
 else {
      set=getSharedFoundSet(l.getDataSource(),l.getDefaultSortColumns());
    }
  }
 else {
    set=getSeparateFoundSet(l,l.getDefaultSortColumns());
  }
  l.newValue(new FoundSetEvent(set,FoundSetEvent.NEW_FOUNDSET,FoundSetEvent.CHANGE_UPDATE));
}","public void giveMeFoundSet(IFoundSetListener l) throws ServoyException {
  IFoundSetInternal set=null;
  if (l.getDataSource() == null || l.wantSharedFoundSet()) {
    String wantedGlobalRelationName=l.getGlobalRelationNamedFoundset();
    if (wantedGlobalRelationName != null) {
      set=getGlobalRelatedFoundSet(wantedGlobalRelationName);
      if (set == null || !Solution.areDataSourcesCompatible(application.getRepository(),set.getDataSource(),l.getDataSource())) {
        throw new RepositoryException(""String_Node_Str"" + wantedGlobalRelationName + ""String_Node_Str"");
      }
    }
 else {
      set=getSharedFoundSet(l.getDataSource(),l.getDefaultSortColumns());
    }
  }
 else {
    set=getSeparateFoundSet(l,l.getDefaultSortColumns());
  }
  l.newValue(new FoundSetEvent(set,FoundSetEvent.NEW_FOUNDSET,FoundSetEvent.CHANGE_UPDATE));
}",0.9707736389684812
143483,"/** 
 * @param message
 */
public void handleMessage(final JSONObject obj){
  startHandlingEvent();
  if (client != null)   J2DBGlobals.setServiceProvider(client);
  try {
    currentWindowName=obj.optString(""String_Node_Str"");
    String event=obj.getString(""String_Node_Str"");
switch (event) {
case ""String_Node_Str"":
{
        String formName=obj.getString(""String_Node_Str"");
        IWebFormUI form=client.getFormManager().getForm(formName).getFormUI();
        if (form instanceof WebGridFormUI && obj.has(""String_Node_Str""))         ((WebGridFormUI)form).setCurrentPage(obj.getInt(""String_Node_Str""));
        Map<String,Map<String,Object>> properties=form.getAllProperties();
        Map<String,Map<String,Map<String,Object>>> formData=new HashMap<String,Map<String,Map<String,Object>>>();
        formData.put(formName,properties);
        sendChanges(formData);
        break;
      }
case ""String_Node_Str"":
{
      pushChanges(obj,false);
      break;
    }
case ""String_Node_Str"":
{
    pushChanges(obj,true);
    break;
  }
case ""String_Node_Str"":
{
  client.invokeLater(new Runnable(){
    @Override public void run(){
      try {
        String formName=obj.getString(""String_Node_Str"");
        JSONArray jsargs=obj.getJSONArray(""String_Node_Str"");
        IWebFormUI form=client.getFormManager().getForm(formName).getFormUI();
        WebComponent webComponent=form.getWebComponent(obj.getString(""String_Node_Str""));
        String eventType=obj.getString(""String_Node_Str"");
        Object[] args=new Object[jsargs == null ? 0 : jsargs.length()];
        for (int i=0; jsargs != null && i < jsargs.length(); i++) {
          args[i]=jsargs.get(i);
        }
        String error=null;
        Object result=null;
        if (form instanceof WebGridFormUI && obj.has(""String_Node_Str"") && !((WebGridFormUI)form).setEditingRowByPkHash(obj.getString(""String_Node_Str""))) {
          error=""String_Node_Str"" + obj.getString(""String_Node_Str"");
        }
 else {
          pushChanges(obj);
          try {
            result=webComponent.execute(eventType,args);
          }
 catch (          Exception e) {
            Debug.error(e);
            error=e.getMessage();
          }
        }
        if (obj.has(""String_Node_Str"")) {
          getActiveWebsocketEndpoint().sendResponse(obj.get(""String_Node_Str""),error == null ? result : error,error == null);
        }
      }
 catch (      JSONException|IOException e) {
        Debug.error(e);
      }
    }
  }
);
  break;
}
case ""String_Node_Str"":
{
IWebFormController form=parseForm(obj);
if (form != null) {
  ((WebFormController)form).setReadOnly(obj.getBoolean(""String_Node_Str""));
}
break;
}
case ""String_Node_Str"":
{
IWebFormController form=parseForm(obj);
if (form != null) {
((WebFormController)form).setComponentEnabled(obj.getBoolean(""String_Node_Str""));
}
break;
}
case ""String_Node_Str"":
{
client.invokeLater(new Runnable(){
@Override public void run(){
try {
  IWebFormController form=parseForm(obj);
  List<Runnable> invokeLaterRunnables=new ArrayList<Runnable>();
  boolean isVisible=obj.getBoolean(""String_Node_Str"");
  boolean ok=form.notifyVisible(isVisible,invokeLaterRunnables);
  if (ok && obj.has(""String_Node_Str"") && !obj.isNull(""String_Node_Str"")) {
    IWebFormController parentForm=client.getFormManager().getForm(obj.getString(""String_Node_Str""));
    WebComponent containerComponent=parentForm.getFormUI().getWebComponent(obj.getString(""String_Node_Str""));
    if (containerComponent != null) {
      containerComponent.updateVisibleForm(form.getFormUI(),isVisible,obj.optInt(""String_Node_Str""));
    }
    if (obj.has(""String_Node_Str"") && !obj.isNull(""String_Node_Str"")) {
      FoundSet parentFs=parentForm.getFormModel();
      IRecordInternal selectedRecord=(IRecordInternal)parentFs.getSelectedRecord();
      form.loadRecords(selectedRecord.getRelatedFoundSet(obj.getString(""String_Node_Str"")));
    }
  }
  Utils.invokeLater(client,invokeLaterRunnables);
  getActiveWebsocketEndpoint().sendResponse(obj.get(""String_Node_Str""),Boolean.valueOf(ok),true);
}
 catch (Exception e) {
  Debug.error(e);
  try {
    getActiveWebsocketEndpoint().sendResponse(obj.get(""String_Node_Str""),e.getMessage(),false);
  }
 catch (  IOException|JSONException e1) {
    Debug.error(e1);
  }
}
}
}
);
break;
}
case ""String_Node_Str"":
{
String formName=obj.getString(""String_Node_Str"");
IWebFormUI form=client.getFormManager().getForm(formName).getFormUI();
WebComponent webComponent=form.getWebComponent(obj.getString(""String_Node_Str""));
Object property=webComponent.getProperty(obj.getString(""String_Node_Str""));
LookupListModel lstModel=null;
if (property instanceof CustomValueList) {
lstModel=new LookupListModel(client,(CustomValueList)property);
webComponent.putProperty(obj.getString(""String_Node_Str""),lstModel);
}
 else if (property instanceof LookupValueList) {
lstModel=new LookupListModel(client,(LookupValueList)property);
webComponent.putProperty(obj.getString(""String_Node_Str""),lstModel);
}
 else if (property instanceof LookupListModel) {
lstModel=(LookupListModel)property;
}
if (lstModel != null) {
lstModel.fill(null,null,obj.getString(""String_Node_Str""),false);
}
break;
}
}
}
 catch (Exception e) {
Debug.error(e);
}
 finally {
stopHandlingEvent();
J2DBGlobals.setServiceProvider(null);
}
}","/** 
 * @param message
 */
public void handleMessage(final JSONObject obj){
  startHandlingEvent();
  if (client != null)   J2DBGlobals.setServiceProvider(client);
  try {
    currentWindowName=obj.optString(""String_Node_Str"");
    String event=obj.getString(""String_Node_Str"");
switch (event) {
case ""String_Node_Str"":
{
        String formName=obj.getString(""String_Node_Str"");
        IWebFormUI form=client.getFormManager().getForm(formName).getFormUI();
        if (form instanceof WebGridFormUI) {
          WebGridFormUI grid=(WebGridFormUI)form;
          if (obj.has(""String_Node_Str""))           grid.setCurrentPage(obj.getInt(""String_Node_Str""));
          if (obj.has(""String_Node_Str""))           grid.setPageSize(obj.getInt(""String_Node_Str""));
        }
        Map<String,Map<String,Object>> properties=form.getAllProperties();
        Map<String,Map<String,Map<String,Object>>> formData=new HashMap<String,Map<String,Map<String,Object>>>();
        formData.put(formName,properties);
        sendChanges(formData);
        break;
      }
case ""String_Node_Str"":
{
      pushChanges(obj,false);
      break;
    }
case ""String_Node_Str"":
{
    pushChanges(obj,true);
    break;
  }
case ""String_Node_Str"":
{
  client.invokeLater(new Runnable(){
    @Override public void run(){
      try {
        String formName=obj.getString(""String_Node_Str"");
        JSONArray jsargs=obj.getJSONArray(""String_Node_Str"");
        IWebFormUI form=client.getFormManager().getForm(formName).getFormUI();
        WebComponent webComponent=form.getWebComponent(obj.getString(""String_Node_Str""));
        String eventType=obj.getString(""String_Node_Str"");
        Object[] args=new Object[jsargs == null ? 0 : jsargs.length()];
        for (int i=0; jsargs != null && i < jsargs.length(); i++) {
          args[i]=jsargs.get(i);
        }
        String error=null;
        Object result=null;
        if (form instanceof WebGridFormUI && obj.has(""String_Node_Str"") && !((WebGridFormUI)form).setEditingRowByPkHash(obj.getString(""String_Node_Str""))) {
          error=""String_Node_Str"" + obj.getString(""String_Node_Str"");
        }
 else {
          pushChanges(obj);
          try {
            result=webComponent.execute(eventType,args);
          }
 catch (          Exception e) {
            Debug.error(e);
            error=e.getMessage();
          }
        }
        if (obj.has(""String_Node_Str"")) {
          getActiveWebsocketEndpoint().sendResponse(obj.get(""String_Node_Str""),error == null ? result : error,error == null);
        }
      }
 catch (      JSONException|IOException e) {
        Debug.error(e);
      }
    }
  }
);
  break;
}
case ""String_Node_Str"":
{
IWebFormController form=parseForm(obj);
if (form != null) {
  ((WebFormController)form).setReadOnly(obj.getBoolean(""String_Node_Str""));
}
break;
}
case ""String_Node_Str"":
{
IWebFormController form=parseForm(obj);
if (form != null) {
((WebFormController)form).setComponentEnabled(obj.getBoolean(""String_Node_Str""));
}
break;
}
case ""String_Node_Str"":
{
client.invokeLater(new Runnable(){
@Override public void run(){
try {
  IWebFormController form=parseForm(obj);
  List<Runnable> invokeLaterRunnables=new ArrayList<Runnable>();
  boolean isVisible=obj.getBoolean(""String_Node_Str"");
  boolean ok=form.notifyVisible(isVisible,invokeLaterRunnables);
  if (ok && obj.has(""String_Node_Str"") && !obj.isNull(""String_Node_Str"")) {
    IWebFormController parentForm=client.getFormManager().getForm(obj.getString(""String_Node_Str""));
    WebComponent containerComponent=parentForm.getFormUI().getWebComponent(obj.getString(""String_Node_Str""));
    if (containerComponent != null) {
      containerComponent.updateVisibleForm(form.getFormUI(),isVisible,obj.optInt(""String_Node_Str""));
    }
    if (obj.has(""String_Node_Str"") && !obj.isNull(""String_Node_Str"")) {
      FoundSet parentFs=parentForm.getFormModel();
      IRecordInternal selectedRecord=(IRecordInternal)parentFs.getSelectedRecord();
      form.loadRecords(selectedRecord.getRelatedFoundSet(obj.getString(""String_Node_Str"")));
    }
  }
  Utils.invokeLater(client,invokeLaterRunnables);
  getActiveWebsocketEndpoint().sendResponse(obj.get(""String_Node_Str""),Boolean.valueOf(ok),true);
}
 catch (Exception e) {
  Debug.error(e);
  try {
    getActiveWebsocketEndpoint().sendResponse(obj.get(""String_Node_Str""),e.getMessage(),false);
  }
 catch (  IOException|JSONException e1) {
    Debug.error(e1);
  }
}
}
}
);
break;
}
case ""String_Node_Str"":
{
String formName=obj.getString(""String_Node_Str"");
IWebFormUI form=client.getFormManager().getForm(formName).getFormUI();
WebComponent webComponent=form.getWebComponent(obj.getString(""String_Node_Str""));
Object property=webComponent.getProperty(obj.getString(""String_Node_Str""));
LookupListModel lstModel=null;
if (property instanceof CustomValueList) {
lstModel=new LookupListModel(client,(CustomValueList)property);
webComponent.putProperty(obj.getString(""String_Node_Str""),lstModel);
}
 else if (property instanceof LookupValueList) {
lstModel=new LookupListModel(client,(LookupValueList)property);
webComponent.putProperty(obj.getString(""String_Node_Str""),lstModel);
}
 else if (property instanceof LookupListModel) {
lstModel=(LookupListModel)property;
}
if (lstModel != null) {
lstModel.fill(null,null,obj.getString(""String_Node_Str""),false);
}
break;
}
}
}
 catch (Exception e) {
Debug.error(e);
}
 finally {
stopHandlingEvent();
J2DBGlobals.setServiceProvider(null);
}
}",0.9762037553448596
143484,"@SuppressWarnings(""String_Node_Str"") private RowData getRows(int startRow,int lastRow){
  if (currentFoundset == null)   return RowData.EMPTY;
  List<Map<String,Object>> rows=new ArrayList<>();
  int startIdx=(currentPage - 1) * PAGE_SIZE;
  int endIdx=currentPage * PAGE_SIZE;
  if (endIdx > currentFoundset.getSize())   endIdx=currentFoundset.getSize();
  int foundsetStartRow=startIdx;
  int startOffset=0;
  if (startRow != -1) {
    if (startRow < endIdx && lastRow > startIdx) {
      startIdx=Math.max(startIdx,startRow);
      endIdx=Math.min(endIdx,lastRow);
      startOffset=Math.max(startIdx - startRow,0);
    }
 else     return RowData.EMPTY;
  }
  int currentIndex=startTabSeqIndex + startOffset * components.values().size();
  for (int i=startIdx; i < endIdx; i++) {
    IRecordInternal record=currentFoundset.getRecord(i);
    dataAdapterList.setRecord(record,false);
    Map<String,Object> rowProperties=new HashMap<String,Object>();
    rowProperties.put(""String_Node_Str"",record.getPKHashKey() + ""String_Node_Str"" + i);
    for (    WebComponent wc : components.values()) {
      List<String> dataproviders=getWebComponentPropertyType(wc,PropertyType.dataprovider);
      Map<String,Object> cellProperties=new HashMap<>();
      for (      String dataproviderID : dataproviders) {
        cellProperties.put(dataproviderID,wc.getProperty(dataproviderID));
      }
      Object valuelistObj;
      for (      String valuelistProperty : wc.getFormElement().getValuelistProperties()) {
        if ((valuelistObj=wc.getProperty(valuelistProperty)) instanceof IValueList) {
          IValueList valuelist=(IValueList)valuelistObj;
          if (valuelist.getValueList().getValueListType() == IValueListConstants.GLOBAL_METHOD_VALUES || valuelist.getValueList().getDatabaseValuesType() == IValueListConstants.RELATED_VALUES || valuelist.getFallbackValueList() != null)           cellProperties.put(valuelistProperty,new ValuelistWrapper(valuelist,record));
        }
      }
      cellProperties.put(""String_Node_Str"",wc.getName());
      rowProperties.put(wc.getName(),cellProperties);
    }
    List<TabSequencePropertyWithComponent> tabSeqComponents=getTabSeqComponents();
    for (    TabSequencePropertyWithComponent propertyWithComponent : tabSeqComponents) {
      Map<String,Object> cellProperties=(Map<String,Object>)rowProperties.get(propertyWithComponent.getComponent().getName());
      cellProperties.put(propertyWithComponent.getProperty(),currentIndex++);
    }
    rows.add(rowProperties);
  }
  dataAdapterList.setRecord(currentFoundset.getRecord(currentFoundset.getSelectedIndex()),false);
  return new RowData(rows,startIdx - foundsetStartRow,endIdx - foundsetStartRow);
}","@SuppressWarnings(""String_Node_Str"") private RowData getRows(int startRow,int lastRow){
  if (currentFoundset == null)   return RowData.EMPTY;
  List<Map<String,Object>> rows=new ArrayList<>();
  int startIdx=(currentPage - 1) * getPageSize();
  int endIdx=currentPage * getPageSize();
  if (endIdx > currentFoundset.getSize())   endIdx=currentFoundset.getSize();
  int foundsetStartRow=startIdx;
  int startOffset=0;
  if (startRow != -1) {
    if (startRow < endIdx && lastRow > startIdx) {
      startIdx=Math.max(startIdx,startRow);
      endIdx=Math.min(endIdx,lastRow);
      startOffset=Math.max(startIdx - startRow,0);
    }
 else     return RowData.EMPTY;
  }
  int currentIndex=startTabSeqIndex + startOffset * components.values().size();
  for (int i=startIdx; i < endIdx; i++) {
    IRecordInternal record=currentFoundset.getRecord(i);
    dataAdapterList.setRecord(record,false);
    Map<String,Object> rowProperties=new HashMap<String,Object>();
    rowProperties.put(""String_Node_Str"",record.getPKHashKey() + ""String_Node_Str"" + i);
    for (    WebComponent wc : components.values()) {
      List<String> dataproviders=getWebComponentPropertyType(wc,PropertyType.dataprovider);
      Map<String,Object> cellProperties=new HashMap<>();
      for (      String dataproviderID : dataproviders) {
        cellProperties.put(dataproviderID,wc.getProperty(dataproviderID));
      }
      Object valuelistObj;
      for (      String valuelistProperty : wc.getFormElement().getValuelistProperties()) {
        if ((valuelistObj=wc.getProperty(valuelistProperty)) instanceof IValueList) {
          IValueList valuelist=(IValueList)valuelistObj;
          if (valuelist.getValueList().getValueListType() == IValueListConstants.GLOBAL_METHOD_VALUES || valuelist.getValueList().getDatabaseValuesType() == IValueListConstants.RELATED_VALUES || valuelist.getFallbackValueList() != null)           cellProperties.put(valuelistProperty,new ValuelistWrapper(valuelist,record));
        }
      }
      cellProperties.put(""String_Node_Str"",wc.getName());
      rowProperties.put(wc.getName(),cellProperties);
    }
    List<TabSequencePropertyWithComponent> tabSeqComponents=getTabSeqComponents();
    for (    TabSequencePropertyWithComponent propertyWithComponent : tabSeqComponents) {
      Map<String,Object> cellProperties=(Map<String,Object>)rowProperties.get(propertyWithComponent.getComponent().getName());
      cellProperties.put(propertyWithComponent.getProperty(),currentIndex++);
    }
    rows.add(rowProperties);
  }
  dataAdapterList.setRecord(currentFoundset.getRecord(currentFoundset.getSelectedIndex()),false);
  return new RowData(rows,startIdx - foundsetStartRow,endIdx - foundsetStartRow);
}",0.9918789221114802
143485,"@Override public void foundSetChanged(FoundSetEvent event){
  if (allChanged)   return;
  if (event.getType() == FoundSetEvent.FIND_MODE_CHANGE || event.getType() == FoundSetEvent.FOUNDSET_INVALIDATED) {
    setAllChanged();
  }
 else   if (event.getType() == FoundSetEvent.CONTENTS_CHANGED) {
    if (event.getChangeType() == FoundSetEvent.CHANGE_DELETE) {
      int startIdx=(currentPage - 1) * PAGE_SIZE;
      int endIdx=currentPage * PAGE_SIZE;
      if (endIdx > currentFoundset.getSize())       endIdx=currentFoundset.getSize();
      if (event.getFirstRow() < endIdx) {
        int startRow=Math.max(startIdx,event.getFirstRow());
        int numberOfDeletes=Math.min(event.getLastRow(),endIdx) - event.getFirstRow() + 1;
        RowData data=getRows(endIdx - Math.min(PAGE_SIZE,numberOfDeletes),endIdx);
        rowChanges.add(new RowData(data.rows,startRow - startIdx,startRow + numberOfDeletes - startIdx,RowData.DELETE));
      }
 else       if (endIdx == 0) {
        setAllChanged();
      }
    }
 else     if (event.getChangeType() == FoundSetEvent.CHANGE_INSERT) {
      int startIdx=(currentPage - 1) * PAGE_SIZE;
      int endIdx=currentPage * PAGE_SIZE;
      if (endIdx > currentFoundset.getSize())       endIdx=currentFoundset.getSize();
      if (event.getFirstRow() < endIdx) {
        int startRow=Math.max(startIdx,event.getFirstRow());
        int numberOfInserts=Math.min(event.getLastRow(),endIdx) - event.getFirstRow() + 1;
        RowData rows=getRows(startRow,Math.min(startRow + numberOfInserts,endIdx));
        rows.setType(RowData.INSERT);
        rowChanges.add(rows);
      }
    }
 else     if (event.getChangeType() == FoundSetEvent.CHANGE_UPDATE) {
      RowData rows=getRows(event.getFirstRow(),event.getLastRow() + 1);
      if (rows != RowData.EMPTY) {
        rowChanges.add(rows);
      }
    }
  }
  application.getChangeListener().valueChanged();
}","@Override public void foundSetChanged(FoundSetEvent event){
  if (allChanged)   return;
  if (event.getType() == FoundSetEvent.FIND_MODE_CHANGE || event.getType() == FoundSetEvent.FOUNDSET_INVALIDATED) {
    setAllChanged();
  }
 else   if (event.getType() == FoundSetEvent.CONTENTS_CHANGED) {
    if (event.getChangeType() == FoundSetEvent.CHANGE_DELETE) {
      int startIdx=(currentPage - 1) * getPageSize();
      int endIdx=currentPage * getPageSize();
      if (endIdx > currentFoundset.getSize())       endIdx=currentFoundset.getSize();
      if (event.getFirstRow() < endIdx) {
        int startRow=Math.max(startIdx,event.getFirstRow());
        int numberOfDeletes=Math.min(event.getLastRow(),endIdx) - event.getFirstRow() + 1;
        RowData data=getRows(endIdx - Math.min(DEFAULT_PAGE_SIZE,numberOfDeletes),endIdx);
        rowChanges.add(new RowData(data.rows,startRow - startIdx,startRow + numberOfDeletes - startIdx,RowData.DELETE));
      }
 else       if (endIdx == 0) {
        setAllChanged();
      }
    }
 else     if (event.getChangeType() == FoundSetEvent.CHANGE_INSERT) {
      int startIdx=(currentPage - 1) * DEFAULT_PAGE_SIZE;
      int endIdx=currentPage * DEFAULT_PAGE_SIZE;
      if (endIdx > currentFoundset.getSize())       endIdx=currentFoundset.getSize();
      if (event.getFirstRow() < endIdx) {
        int startRow=Math.max(startIdx,event.getFirstRow());
        int numberOfInserts=Math.min(event.getLastRow(),endIdx) - event.getFirstRow() + 1;
        RowData rows=getRows(startRow,Math.min(startRow + numberOfInserts,endIdx));
        rows.setType(RowData.INSERT);
        rowChanges.add(rows);
      }
    }
 else     if (event.getChangeType() == FoundSetEvent.CHANGE_UPDATE) {
      RowData rows=getRows(event.getFirstRow(),event.getLastRow() + 1);
      if (rows != RowData.EMPTY) {
        rowChanges.add(rows);
      }
    }
  }
  application.getChangeListener().valueChanged();
}",0.9832635983263598
143486,"public int getSelectedViewIndex(){
  int selectedIndex=formController.getFoundSet().getSelectedIndex();
  return selectedIndex - ((currentPage - 1) * PAGE_SIZE);
}","public int getSelectedViewIndex(){
  int selectedIndex=formController.getFoundSet().getSelectedIndex();
  return selectedIndex - ((currentPage - 1) * getPageSize());
}",0.9454545454545454
143487,"public int getPageSize(){
  return WebGridFormUI.PAGE_SIZE;
}","public int getPageSize(){
  return WebGridFormUI.DEFAULT_PAGE_SIZE;
}",0.9384615384615383
143488,"public Collection<BaseComponent> getBodyComponents(){
  Part part=null;
  for (  Part prt : Utils.iterate(form.getParts())) {
    if (prt.getPartType() == Part.BODY) {
      part=prt;
      break;
    }
  }
  List<BaseComponent> baseComponents=new ArrayList<>();
  if (part == null)   return baseComponents;
  int startPos=form.getPartStartYPos(part.getID());
  int endPos=part.getHeight();
  Iterator<IPersist> it=form.getAllObjects(PositionComparator.XY_PERSIST_COMPARATOR);
  while (it.hasNext()) {
    IPersist persist=it.next();
    if (persist instanceof GraphicalComponent && isTableView && ((GraphicalComponent)persist).getLabelFor() != null)     continue;
    if (persist instanceof BaseComponent && formElementValidator.isComponentSpecValid((BaseComponent)persist)) {
      Point location=((BaseComponent)persist).getLocation();
      if (startPos <= location.y && endPos >= location.y) {
        baseComponents.add((BaseComponent)persist);
      }
    }
  }
  return baseComponents;
}","public Collection<BaseComponent> getBodyComponents(){
  Part part=getBodyPart();
  List<BaseComponent> baseComponents=new ArrayList<>();
  if (part == null)   return baseComponents;
  int startPos=form.getPartStartYPos(part.getID());
  int endPos=part.getHeight();
  Iterator<IPersist> it=form.getAllObjects(PositionComparator.XY_PERSIST_COMPARATOR);
  while (it.hasNext()) {
    IPersist persist=it.next();
    if (persist instanceof GraphicalComponent && isTableView && ((GraphicalComponent)persist).getLabelFor() != null)     continue;
    if (persist instanceof BaseComponent && formElementValidator.isComponentSpecValid((BaseComponent)persist)) {
      Point location=((BaseComponent)persist).getLocation();
      if (startPos <= location.y && endPos >= location.y) {
        baseComponents.add((BaseComponent)persist);
      }
    }
  }
  return baseComponents;
}",0.9216738197424892
143489,"public int getGridHeight(){
  for (  Part prt : Utils.iterate(form.getParts())) {
    if (prt.getPartType() == Part.BODY) {
      return prt.getHeight();
    }
  }
  return 0;
}","public int getGridHeight(){
  Part part=getBodyPart();
  return part != null ? part.getHeight() : 0;
}",0.5591397849462365
143490,"/** 
 * In cases where the user selected the same column in 2 or 3 'Return in dataprovider' or 'Show in field' for a valuelist the query  only does a select with one column name .After the data is received  it reconstructs the rows with the missing duplicate columns
 */
public Object[] processRow(Object[] row){
  Object[] ret=row;
  if (secondColRedirectIndex >= 0 || thirdColRedirectIndex >= 0) {
    boolean hasFirstDp=(showValues & 1) != 0 || (returnValues & 1) != 0;
    boolean hasSecondDp=(showValues & 2) != 0 || (returnValues & 2) != 0;
    ArrayList<Object> arr=new ArrayList<Object>();
    arr.add(row[0]);
    if (secondColRedirectIndex >= 0) {
      arr.add(row[secondColRedirectIndex]);
    }
 else     if (hasFirstDp && hasSecondDp) {
      arr.add(row[1]);
    }
    if (thirdColRedirectIndex >= 0) {
      arr.add(row[thirdColRedirectIndex]);
    }
 else {
      arr.add(row[row.length - 1]);
    }
    ret=arr.toArray();
  }
  return CustomValueList.processRow(ret,showValues,returnValues);
}","/** 
 * In cases where the user selected the same column in 2 or 3 'Return in dataprovider' or 'Show in field' for a valuelist the query  only does a select with one column name .After the data is received  it reconstructs the rows with the missing duplicate columns
 */
public Object[] processRow(Object[] row){
  Object[] ret=row;
  if (secondColRedirectIndex >= 0 || thirdColRedirectIndex >= 0) {
    boolean hasFirstDp=(showValues & 1) != 0 || (returnValues & 1) != 0;
    boolean hasSecondDp=(showValues & 2) != 0 || (returnValues & 2) != 0;
    boolean hasThirdDp=(showValues & 4) != 0 || (returnValues & 4) != 0;
    ArrayList<Object> arr=new ArrayList<Object>();
    int srcIdx=0;
    if (hasFirstDp)     arr.add(row[srcIdx++]);
    if (secondColRedirectIndex >= 0) {
      arr.add(row[secondColRedirectIndex]);
    }
 else     if (hasSecondDp) {
      arr.add(row[srcIdx++]);
    }
    if (thirdColRedirectIndex >= 0) {
      arr.add(row[thirdColRedirectIndex]);
    }
 else     if (hasThirdDp) {
      arr.add(row[srcIdx++]);
    }
    ret=arr.toArray();
  }
  return CustomValueList.processRow(ret,showValues,returnValues);
}",0.7983232417326502
143491,"@SuppressWarnings(""String_Node_Str"") @Override public String readTextFile(String path,Charset charset) throws IOException {
  URL url=Activator.getContext().getBundle().getEntry(""String_Node_Str"" + componentName + '/'+ path);
  InputStream is=null;
  try {
    is=url.openStream();
    return Utils.getTXTFileContent(is,charset);
  }
  finally {
    if (is != null)     is.close();
  }
}","@SuppressWarnings(""String_Node_Str"") @Override public String readTextFile(String path,Charset charset) throws IOException {
  URL url=Activator.getContext().getBundle().getEntry(""String_Node_Str"" + componentName + '/'+ path);
  if (url == null)   return null;
  InputStream is=null;
  try {
    is=url.openStream();
    return Utils.getTXTFileContent(is,charset);
  }
  finally {
    if (is != null)     is.close();
  }
}",0.957920792079208
143492,"@Override public Object[] getIds(){
  return null;
}","@Override public Object[] getIds(){
  return new Object[0];
}",0.8672566371681416
143493,"@Override public Object[] getIds(){
  return null;
}","@Override public Object[] getIds(){
  ArrayList<String> al=new ArrayList<>();
  al.addAll(specProperties);
  al.addAll(apiFunctions.keySet());
  return al.toArray();
}",0.4474885844748858
143494,"@Override public Object[] getIds(){
  return null;
}","@Override public Object[] getIds(){
  return new Object[0];
}",0.8672566371681416
143495,"/** 
 * @return the clientCreator
 */
public static IClientCreator getClientCreator(){
  if (clientCreator == null) {
    clientCreator=new IClientCreator(){
      @Override public NGClient createClient(      INGClientEndpoint endpoint){
        return new NGClient(endpoint);
      }
    }
;
  }
  return clientCreator;
}","/** 
 * @return the clientCreator
 */
public static IClientCreator getClientCreator(){
  if ((clientCreator == null)) {
    clientCreator=new IClientCreator(){
      @Override public NGClient createClient(      INGClientEndpoint endpoint){
        return new NGClient(endpoint);
      }
    }
;
  }
  return clientCreator;
}",0.9969040247678018
143496,"public static void startEdit(DataAdapterList dal,IDisplay display,IRecordInternal state){
  final IApplication application=dal.getApplication();
  dal.setCurrentDisplay(display);
  boolean isGlobal=false;
  boolean isColumn=true;
  if (display instanceof IDisplayData) {
    String dataProviderID=((IDisplayData)display).getDataProviderID();
    isGlobal=dataProviderID != null && ScopesUtils.isVariableScope(dataProviderID);
    if (!isGlobal && dataProviderID != null) {
      String[] parts=dataProviderID.split(""String_Node_Str"");
      IRecordInternal currState=state;
      for (int i=0; i < parts.length - 1; i++) {
        IFoundSetInternal foundset=currState.getRelatedFoundSet(parts[i]);
        if (foundset == null) {
          break;
        }
        Relation r=application.getFoundSetManager().getApplication().getFlattenedSolution().getRelation(parts[i]);
        currState=foundset.getRecord(foundset.getSelectedIndex());
        if (currState == null) {
          if (r != null && r.getAllowCreationRelatedRecords()) {
            try {
              currState=foundset.getRecord(foundset.newRecord(0,true));
            }
 catch (            ServoyException se) {
              application.reportError(se.getLocalizedMessage(),se);
            }
          }
 else {
            final ApplicationException ae=new ApplicationException(ServoyException.NO_RELATED_CREATE_ACCESS,new Object[]{parts[i]});
            application.looseFocus();
            application.invokeLater(new Runnable(){
              public void run(){
                application.reportError(ae.getLocalizedMessage(),ae);
              }
            }
);
          }
        }
        if (currState == null)         return;
      }
      isColumn=currState.getParentFoundSet().getSQLSheet().getColumnIndex(parts[parts.length - 1]) != -1;
    }
  }
  if (isGlobal || !isColumn || state.startEditing()) {
    if (application instanceof ISmartClientApplication)     ((ISmartClientApplication)application).updateInsertModeIcon(display);
  }
 else {
    application.looseFocus();
    application.reportWarningInStatus(application.getI18NMessage(""String_Node_Str""));
  }
}","public static void startEdit(DataAdapterList dal,IDisplay display,IRecordInternal state){
  final IApplication application=dal.getApplication();
  dal.setCurrentDisplay(display);
  boolean isGlobal=false;
  boolean isColumn=true;
  if (display instanceof IDisplayData) {
    String dataProviderID=((IDisplayData)display).getDataProviderID();
    isGlobal=dataProviderID != null && ScopesUtils.isVariableScope(dataProviderID);
    if (!isGlobal && dataProviderID != null) {
      String[] parts=dataProviderID.split(""String_Node_Str"");
      IRecordInternal currState=state;
      for (int i=0; i < parts.length - 1; i++) {
        IFoundSetInternal foundset=currState.getRelatedFoundSet(parts[i]);
        if (foundset == null) {
          break;
        }
        Relation r=application.getFoundSetManager().getApplication().getFlattenedSolution().getRelation(parts[i]);
        currState=foundset.getRecord(foundset.getSelectedIndex());
        if (currState == null) {
          if (r != null && r.getAllowCreationRelatedRecords()) {
            try {
              currState=foundset.getRecord(foundset.newRecord(0,true));
            }
 catch (            ServoyException se) {
              application.reportError(se.getLocalizedMessage(),se);
            }
          }
 else {
            final ApplicationException ae=new ApplicationException(ServoyException.NO_RELATED_CREATE_ACCESS,new Object[]{parts[i]});
            application.looseFocus();
            application.invokeLater(new Runnable(){
              public void run(){
                application.handleException(null,ae);
              }
            }
);
          }
        }
        if (currState == null)         return;
      }
      isColumn=currState.getParentFoundSet().getSQLSheet().getColumnIndex(parts[parts.length - 1]) != -1;
    }
  }
  if (isGlobal || !isColumn || state.startEditing()) {
    if (application instanceof ISmartClientApplication)     ((ISmartClientApplication)application).updateInsertModeIcon(display);
  }
 else {
    application.looseFocus();
    application.reportWarningInStatus(application.getI18NMessage(""String_Node_Str""));
  }
}",0.9874243129948764
143497,"public void run(){
  application.reportError(ae.getLocalizedMessage(),ae);
}","public void run(){
  application.handleException(null,ae);
}",0.6617647058823529
143498,"/** 
 * @see com.servoy.j2db.smart.J2DBClient#shutDown(boolean)
 */
@Override public void shutDown(boolean force){
  shutDown=true;
  try {
    Solution solution=getSolution();
    if (solution != null) {
      if (!closeSolution(force,null) && !force) {
        shutDown=false;
        return;
      }
    }
    logout(null);
    if (unitTestsRunning) {
      repository=null;
      applicationServerAccess=null;
    }
  }
 catch (  Exception ex) {
    Debug.error(ex);
  }
  Window[] ownedWindows=getMainApplicationFrame().getOwnedWindows();
  if (ownedWindows != null) {
    for (    Window w : ownedWindows)     w.dispose();
  }
  getMainApplicationFrame().setVisible(false);
  saveSettings();
}","/** 
 * @see com.servoy.j2db.smart.J2DBClient#shutDown(boolean)
 */
@Override public void shutDown(boolean force){
  shutDown=true;
  try {
    Solution solution=getSolution();
    if (solution != null) {
      if (!closeSolution(force,null) && !force) {
        shutDown=false;
        return;
      }
    }
    logout(null);
    if (unitTestsRunning) {
      repository=null;
      applicationServerAccess=null;
    }
  }
 catch (  Exception ex) {
    Debug.error(ex);
  }
  getLoadingUIEffects().setClientShouldBeShowing(!shutDown);
  Window[] ownedWindows=getMainApplicationFrame().getOwnedWindows();
  if (ownedWindows != null) {
    for (    Window w : ownedWindows)     w.dispose();
  }
  getMainApplicationFrame().setVisible(false);
  saveSettings();
}",0.958190541466758
143499,"/** 
 */
public void show(final Form form){
  shutDown=false;
  Runnable run=new Runnable(){
    public void run(){
      if (!getMainApplicationFrame().isVisible()) {
        ComponentFactory.flushCachedItems(DebugJ2DBClient.this);
        getMainApplicationFrame().setVisible(true);
      }
 else {
        getMainApplicationFrame().setState(Frame.NORMAL);
      }
      if (unitTestsRunning) {
        getMainApplicationFrame().setState(Frame.ICONIFIED);
      }
 else {
        getMainApplicationFrame().toFront();
      }
      if (form == null) {
        if (isSolutionLoaded()) {
          closeSolution(true,null);
        }
 else {
          selectAndOpenSolution();
        }
      }
 else {
        ((FormManager)getFormManager()).showFormInMainPanel(form.getName());
      }
    }
  }
;
  if (SwingUtilities.isEventDispatchThread()) {
    run.run();
  }
 else {
    SwingUtilities.invokeLater(run);
  }
}","/** 
 */
public void show(final Form form){
  shutDown=false;
  Runnable run=new Runnable(){
    public void run(){
      if (!getMainApplicationFrame().isVisible()) {
        ComponentFactory.flushCachedItems(DebugJ2DBClient.this);
        getMainApplicationFrame().setVisible(true);
      }
 else {
        getMainApplicationFrame().setState(Frame.NORMAL);
      }
      getLoadingUIEffects().setClientShouldBeShowing(!shutDown);
      if (unitTestsRunning) {
        getMainApplicationFrame().setState(Frame.ICONIFIED);
      }
 else {
        getMainApplicationFrame().toFront();
      }
      if (form == null) {
        if (isSolutionLoaded()) {
          closeSolution(true,null);
        }
 else {
          selectAndOpenSolution();
        }
      }
 else {
        ((FormManager)getFormManager()).showFormInMainPanel(form.getName());
      }
    }
  }
;
  if (SwingUtilities.isEventDispatchThread()) {
    run.run();
  }
 else {
    SwingUtilities.invokeLater(run);
  }
}",0.9657353716394308
143500,"public void showSolutionLoading(boolean b){
  getCurrentContainer().showSolutionLoading(b);
}","public void showSolutionLoading(boolean b){
  application.showSolutionLoading(b);
}",0.8522727272727273
143501,"@Override protected void loadSolution(final SolutionMetaData solutionMeta) throws RepositoryException {
  getFormManager().showSolutionLoading(true);
  invokeLater(new Runnable(){
    public void run(){
      try {
        blockGUI(Messages.getString(""String_Node_Str"",new Object[]{solutionMeta.getName()}));
        loadSolutionsAndModules(solutionMeta);
      }
 catch (      final Exception ex) {
        invokeLater(new Runnable(){
          public void run(){
            reportError(Messages.getString(""String_Node_Str""),ex);
          }
        }
);
      }
 finally {
        getScriptEngine();
        releaseGUI();
      }
    }
  }
);
}","@Override protected void loadSolution(final SolutionMetaData solutionMeta) throws RepositoryException {
  showSolutionLoading(true);
  invokeLater(new Runnable(){
    public void run(){
      try {
        blockGUI(Messages.getString(""String_Node_Str"",new Object[]{solutionMeta.getName()}));
        loadSolutionsAndModules(solutionMeta);
      }
 catch (      final Exception ex) {
        invokeLater(new Runnable(){
          public void run(){
            reportError(Messages.getString(""String_Node_Str""),ex);
          }
        }
);
      }
 finally {
        getScriptEngine();
        releaseGUI();
      }
    }
  }
);
}",0.9866875489428348
143502,"@Override protected SolutionMetaData showSolutionSelection(SolutionMetaData[] solutions){
  if (selectSolutionDialog == null) {
    selectSolutionDialog=new SelectSolutionDialog(this);
  }
  mainPanel.showSolutionLoading(true);
  SolutionMetaData tmp=null;
  try {
    tmp=selectSolutionDialog.showDialog(solutions);
  }
  finally {
    if (tmp == null)     mainPanel.showSolutionLoading(false);
  }
  return tmp;
}","@Override protected SolutionMetaData showSolutionSelection(SolutionMetaData[] solutions){
  if (selectSolutionDialog == null) {
    selectSolutionDialog=new SelectSolutionDialog(this);
  }
  showSolutionLoading(true);
  SolutionMetaData tmp=null;
  try {
    tmp=selectSolutionDialog.showDialog(solutions);
  }
  finally {
    if (tmp == null)     showSolutionLoading(false);
  }
  return tmp;
}",0.5382716049382716
143503,"@Override protected void applicationSetup(){
  installShutdownHook();
  KeyboardFocusManager.getCurrentKeyboardFocusManager().addPropertyChangeListener(new GlobalAutoScrollerFocusListener());
  JPanel statusPanel=createStatusPanel();
  String showStatusBar=settings.getProperty(""String_Node_Str"");
  if (showStatusBar != null && showStatusBar.equals(""String_Node_Str""))   statusPanel.setVisible(false);
  mainPanel.add(statusPanel,BorderLayout.SOUTH);
  String str=getSettings().getProperty(""String_Node_Str"");
  Locale loc=PersistHelper.createLocale(str);
  if (loc != null) {
    Locale.setDefault(loc);
  }
  TimeZone defaultTimeZone=TimeZone.getDefault();
  if (defaultTimeZone != null) {
    str=getSettings().getProperty(""String_Node_Str"",defaultTimeZone.getID());
    TimeZone tz=TimeZone.getTimeZone(str);
    if (tz != null) {
      getClientInfo().setTimeZone(tz);
      TimeZone.setDefault(tz);
    }
  }
  super.applicationSetup();
  jsWindowManager=createJSWindowManager();
  cmdManager=createCmdManager();
  Map<String,Action> actions=getActions();
  toolbarsPanel=new ToolbarPanel(Settings.INITIAL_CLIENT_WIDTH - 200);
  mainPanel.add(toolbarsPanel,BorderLayout.NORTH);
  fillToolbar(actions);
  String showToolBar=settings.getProperty(""String_Node_Str"");
  if (showToolBar != null && showToolBar.equals(""String_Node_Str""))   toolbarsPanel.setVisible(false);
  JMenuBar menu=createMenuBar(actions);
  String showMenuBar=settings.getProperty(""String_Node_Str"");
  if (showMenuBar != null && showMenuBar.equals(""String_Node_Str""))   menu.setVisible(false);
  frame.setJMenuBar(menu);
  ((SwingRuntimeWindow)jsWindowManager.getWindow(null)).setJMenuBar(menu);
  if (Utils.isAppleMacOS()) {
    attachAppleMenu(actions);
  }
  setMainFrameInitialBounds();
  mainPanel.showSolutionLoading(true);
}","@Override protected void applicationSetup(){
  installShutdownHook();
  KeyboardFocusManager.getCurrentKeyboardFocusManager().addPropertyChangeListener(new GlobalAutoScrollerFocusListener());
  JPanel statusPanel=createStatusPanel();
  String showStatusBar=settings.getProperty(""String_Node_Str"");
  if (showStatusBar != null && showStatusBar.equals(""String_Node_Str""))   statusPanel.setVisible(false);
  mainPanel.add(statusPanel,BorderLayout.SOUTH);
  String str=getSettings().getProperty(""String_Node_Str"");
  Locale loc=PersistHelper.createLocale(str);
  if (loc != null) {
    Locale.setDefault(loc);
  }
  TimeZone defaultTimeZone=TimeZone.getDefault();
  if (defaultTimeZone != null) {
    str=getSettings().getProperty(""String_Node_Str"",defaultTimeZone.getID());
    TimeZone tz=TimeZone.getTimeZone(str);
    if (tz != null) {
      getClientInfo().setTimeZone(tz);
      TimeZone.setDefault(tz);
    }
  }
  super.applicationSetup();
  jsWindowManager=createJSWindowManager();
  cmdManager=createCmdManager();
  Map<String,Action> actions=getActions();
  toolbarsPanel=new ToolbarPanel(Settings.INITIAL_CLIENT_WIDTH - 200);
  mainPanel.add(toolbarsPanel,BorderLayout.NORTH);
  fillToolbar(actions);
  String showToolBar=settings.getProperty(""String_Node_Str"");
  if (showToolBar != null && showToolBar.equals(""String_Node_Str""))   toolbarsPanel.setVisible(false);
  JMenuBar menu=createMenuBar(actions);
  String showMenuBar=settings.getProperty(""String_Node_Str"");
  if (showMenuBar != null && showMenuBar.equals(""String_Node_Str""))   menu.setVisible(false);
  frame.setJMenuBar(menu);
  ((SwingRuntimeWindow)jsWindowManager.getWindow(null)).setJMenuBar(menu);
  if (Utils.isAppleMacOS()) {
    attachAppleMenu(actions);
  }
  setMainFrameInitialBounds();
  showSolutionLoading(true);
}",0.9972253052164262
143504,"private void setValueThreadSafe(final Object value){
  try {
    application.invokeAndWait(new Runnable(){
      public void run(){
        try {
          setValueEx(value);
        }
 catch (        Exception e) {
          Debug.error(""String_Node_Str"" + value,e);
          if (editorKit instanceof FixedHTMLEditorKit) {
            Debug.error(""String_Node_Str"");
            enclosedComponent.setDocument(editorKit.createDefaultDocument());
            setValueEx(value);
          }
        }
      }
    }
);
  }
 catch (  Exception e) {
    Debug.error(e);
  }
}","private void setValueThreadSafe(final Object value){
  try {
    Runnable runnable=new Runnable(){
      public void run(){
        try {
          setValueEx(value);
        }
 catch (        Exception e) {
          Debug.error(""String_Node_Str"" + value,e);
          if (editorKit instanceof FixedHTMLEditorKit) {
            Debug.error(""String_Node_Str"");
            enclosedComponent.setDocument(editorKit.createDefaultDocument());
            setValueEx(value);
          }
        }
      }
    }
;
    if (application.isEventDispatchThread()) {
      runnable.run();
    }
 else {
      application.invokeLater(runnable);
    }
  }
 catch (  Exception e) {
    Debug.error(e);
  }
}",0.8598574821852731
143505,"/** 
 * @param component
 */
@SuppressWarnings(""String_Node_Str"") public static boolean setSelectedIndex(Component component,AjaxRequestTarget target,int modifiers,boolean bHandleMultiselect){
  WebForm parentForm=component.findParent(WebForm.class);
  if (parentForm != null) {
    int parentFormViewType=parentForm.getController().getForm().getView();
    if (parentFormViewType == FormController.TABLE_VIEW || parentFormViewType == FormController.LOCKED_TABLE_VIEW || parentFormViewType == IForm.LIST_VIEW || parentFormViewType == FormController.LOCKED_LIST_VIEW) {
      WebCellBasedView tableView=component.findParent(WebCellBasedView.class);
      if (tableView == null) {
        return true;
      }
 else       tableView.setSelectionMadeByCellAction();
      if (parentFormViewType == IForm.LIST_VIEW || parentFormViewType == FormController.LOCKED_LIST_VIEW) {
        WebCellBasedViewListViewItem listViewItem=component.findParent(WebCellBasedView.WebCellBasedViewListViewItem.class);
        if (listViewItem != null)         listViewItem.markSelected(target);
      }
    }
  }
  Component recordItemModelComponent=component;
  IModel<?> someModel=recordItemModelComponent.getDefaultModel();
  while (!(someModel instanceof RecordItemModel)) {
    recordItemModelComponent=recordItemModelComponent.getParent();
    if (recordItemModelComponent == null)     break;
    someModel=recordItemModelComponent.getDefaultModel();
  }
  if (someModel instanceof RecordItemModel) {
    ((RecordItemModel)someModel).updateRenderedValue(component);
    IRecordInternal rec=(IRecordInternal)someModel.getObject();
    if (rec != null) {
      int index;
      IFoundSetInternal fs=rec.getParentFoundSet();
      if (someModel instanceof FoundsetRecordItemModel) {
        index=((FoundsetRecordItemModel)someModel).getRowIndex();
      }
 else {
        index=fs.getRecordIndex(rec);
      }
      if (fs instanceof FoundSet && ((FoundSet)fs).isMultiSelect()) {
        ClientProperties clp=((WebClientInfo)Session.get().getClientInfo()).getProperties();
        String navPlatform=clp.getNavigatorPlatform();
        int controlMask=(navPlatform != null && navPlatform.toLowerCase().indexOf(""String_Node_Str"") != -1) ? Event.META_MASK : Event.CTRL_MASK;
        boolean toggle=(modifiers != MODIFIERS_UNSPECIFIED) && ((modifiers & controlMask) != 0);
        boolean extend=(modifiers != MODIFIERS_UNSPECIFIED) && ((modifiers & Event.SHIFT_MASK) != 0);
        boolean isRightClick=(modifiers != MODIFIERS_UNSPECIFIED) && ((modifiers & Event.ALT_MASK) != 0);
        if (!isRightClick) {
          if (toggle || extend) {
            if (bHandleMultiselect) {
              if (toggle) {
                int[] selectedIndexes=((FoundSet)fs).getSelectedIndexes();
                ArrayList<Integer> selectedIndexesA=new ArrayList<Integer>();
                Integer selectedIndex=new Integer(index);
                for (                int selected : selectedIndexes)                 selectedIndexesA.add(new Integer(selected));
                if (selectedIndexesA.indexOf(selectedIndex) != -1) {
                  if (selectedIndexesA.size() > 1)                   selectedIndexesA.remove(selectedIndex);
                }
 else                 selectedIndexesA.add(selectedIndex);
                selectedIndexes=new int[selectedIndexesA.size()];
                for (int i=0; i < selectedIndexesA.size(); i++)                 selectedIndexes[i]=selectedIndexesA.get(i).intValue();
                ((FoundSet)fs).setSelectedIndexes(selectedIndexes);
              }
 else               if (extend) {
                int anchor=((FoundSet)fs).getSelectedIndex();
                int min=Math.min(anchor,index);
                int max=Math.max(anchor,index);
                int[] newSelectedIndexes=new int[max - min + 1];
                for (int i=min; i <= max; i++)                 newSelectedIndexes[i - min]=i;
                ((FoundSet)fs).setSelectedIndexes(newSelectedIndexes);
              }
            }
          }
 else           if (index != -1 || fs.getSize() == 0) {
            fs.setSelectedIndex(index);
          }
        }
      }
 else       if (!isIndexSelected(fs,index))       fs.setSelectedIndex(index);
      if (!isIndexSelected(fs,index) && !(fs instanceof FoundSet && ((FoundSet)fs).isMultiSelect())) {
        if (target != null)         target.appendJavascript(""String_Node_Str"" + component.getMarkupId() + ""String_Node_Str"");
        return false;
      }
    }
  }
  return true;
}","/** 
 * @param component
 */
@SuppressWarnings(""String_Node_Str"") public static boolean setSelectedIndex(Component component,AjaxRequestTarget target,int modifiers,boolean bHandleMultiselect){
  WebForm parentForm=component.findParent(WebForm.class);
  WebCellBasedView tableView=null;
  if (parentForm != null) {
    int parentFormViewType=parentForm.getController().getForm().getView();
    if (parentFormViewType == FormController.TABLE_VIEW || parentFormViewType == FormController.LOCKED_TABLE_VIEW || parentFormViewType == IForm.LIST_VIEW || parentFormViewType == FormController.LOCKED_LIST_VIEW) {
      tableView=component.findParent(WebCellBasedView.class);
      if (tableView == null) {
        return true;
      }
 else       tableView.setSelectionMadeByCellAction();
      if (parentFormViewType == IForm.LIST_VIEW || parentFormViewType == FormController.LOCKED_LIST_VIEW) {
        WebCellBasedViewListViewItem listViewItem=component.findParent(WebCellBasedView.WebCellBasedViewListViewItem.class);
        if (listViewItem != null)         listViewItem.markSelected(target);
      }
    }
  }
  Component recordItemModelComponent=component;
  IModel<?> someModel=recordItemModelComponent.getDefaultModel();
  while (!(someModel instanceof RecordItemModel)) {
    recordItemModelComponent=recordItemModelComponent.getParent();
    if (recordItemModelComponent == null)     break;
    someModel=recordItemModelComponent.getDefaultModel();
  }
  if (someModel instanceof RecordItemModel) {
    ((RecordItemModel)someModel).updateRenderedValue(component);
    IRecordInternal rec=(IRecordInternal)someModel.getObject();
    if (rec != null) {
      int index;
      IFoundSetInternal fs=rec.getParentFoundSet();
      if (someModel instanceof FoundsetRecordItemModel) {
        index=((FoundsetRecordItemModel)someModel).getRowIndex();
      }
 else {
        index=fs.getRecordIndex(rec);
      }
      if (fs instanceof FoundSet && ((FoundSet)fs).isMultiSelect()) {
        ClientProperties clp=((WebClientInfo)Session.get().getClientInfo()).getProperties();
        String navPlatform=clp.getNavigatorPlatform();
        int controlMask=(navPlatform != null && navPlatform.toLowerCase().indexOf(""String_Node_Str"") != -1) ? Event.META_MASK : Event.CTRL_MASK;
        boolean toggle=(modifiers != MODIFIERS_UNSPECIFIED) && ((modifiers & controlMask) != 0);
        boolean extend=(modifiers != MODIFIERS_UNSPECIFIED) && ((modifiers & Event.SHIFT_MASK) != 0);
        boolean isRightClick=(modifiers != MODIFIERS_UNSPECIFIED) && ((modifiers & Event.ALT_MASK) != 0);
        if (!isRightClick) {
          if (!toggle && !extend && tableView != null && tableView.getDragNDropController() != null && Arrays.binarySearch(((FoundSet)fs).getSelectedIndexes(),index) > -1) {
            return true;
          }
          if (toggle || extend) {
            if (bHandleMultiselect) {
              if (toggle) {
                int[] selectedIndexes=((FoundSet)fs).getSelectedIndexes();
                ArrayList<Integer> selectedIndexesA=new ArrayList<Integer>();
                Integer selectedIndex=new Integer(index);
                for (                int selected : selectedIndexes)                 selectedIndexesA.add(new Integer(selected));
                if (selectedIndexesA.indexOf(selectedIndex) != -1) {
                  if (selectedIndexesA.size() > 1)                   selectedIndexesA.remove(selectedIndex);
                }
 else                 selectedIndexesA.add(selectedIndex);
                selectedIndexes=new int[selectedIndexesA.size()];
                for (int i=0; i < selectedIndexesA.size(); i++)                 selectedIndexes[i]=selectedIndexesA.get(i).intValue();
                ((FoundSet)fs).setSelectedIndexes(selectedIndexes);
              }
 else               if (extend) {
                int anchor=((FoundSet)fs).getSelectedIndex();
                int min=Math.min(anchor,index);
                int max=Math.max(anchor,index);
                int[] newSelectedIndexes=new int[max - min + 1];
                for (int i=min; i <= max; i++)                 newSelectedIndexes[i - min]=i;
                ((FoundSet)fs).setSelectedIndexes(newSelectedIndexes);
              }
            }
          }
 else           if (index != -1 || fs.getSize() == 0) {
            fs.setSelectedIndex(index);
          }
        }
      }
 else       if (!isIndexSelected(fs,index))       fs.setSelectedIndex(index);
      if (!isIndexSelected(fs,index) && !(fs instanceof FoundSet && ((FoundSet)fs).isMultiSelect())) {
        if (target != null)         target.appendJavascript(""String_Node_Str"" + component.getMarkupId() + ""String_Node_Str"");
        return false;
      }
    }
  }
  return true;
}",0.9716380890758116
143506,"Object authenticate(String authenticator_solution,String method,Object[] credentials);","@ServoyClientSupport(mc=false,wc=true,sc=true) Object authenticate(String authenticator_solution,String method,Object[] credentials);",0.7853881278538812
143507,"/** 
 * @sameas com.servoy.base.persistence.IBaseGraphicalComponent#getOnActionMethodID()
 */
int getOnActionMethodID();",int getOnActionMethodID();,0.3561643835616438
143508,"/** 
 * @templatedescription Perform the element default action
 * @templatename onAction
 * @templateparam JSEvent event the event that triggered the action
 * @templateaddtodo
 */
public int getOnActionMethodID(){
  return getTypedProperty(StaticContentSpecLoader.PROPERTY_ONACTIONMETHODID).intValue();
}","/** 
 * @sameas com.servoy.base.persistence.IBaseGraphicalComponent#getOnActionMethodID()
 * @templatedescription Perform the element default action
 * @templatename onAction
 * @templateparam JSEvent event the event that triggered the action
 * @templateaddtodo
 */
public int getOnActionMethodID(){
  return getTypedProperty(StaticContentSpecLoader.PROPERTY_ONACTIONMETHODID).intValue();
}",0.8780487804878049
143509,"/** 
 * @templatedescription Handle changed data
 * @templatename onDataChange
 * @templatetype Boolean
 * @templateparam ${dataproviderType} oldValue old value
 * @templateparam ${dataproviderType} newValue new value
 * @templateparam JSEvent event the event that triggered the action
 * @templateaddtodo
 * @templatecode return true
 */
public int getOnDataChangeMethodID(){
  return getTypedProperty(StaticContentSpecLoader.PROPERTY_ONDATACHANGEMETHODID).intValue();
}","/** 
 * @clonedesc com.servoy.base.solutionmodel.IBaseSMField#getOnDataChange()
 * @templatedescription Handle changed data
 * @templatename onDataChange
 * @templatetype Boolean
 * @templateparam ${dataproviderType} oldValue old value
 * @templateparam ${dataproviderType} newValue new value
 * @templateparam JSEvent event the event that triggered the action
 * @templateaddtodo
 * @templatecode return true
 */
public int getOnDataChangeMethodID(){
  return getTypedProperty(StaticContentSpecLoader.PROPERTY_ONDATACHANGEMETHODID).intValue();
}",0.9262536873156342
143510,"public void onBeforeRender(Component component){
  if (component instanceof IServoyAwareBean) {
    IModel model=component.getInnermostModel();
    WebForm webForm=component.findParent(WebForm.class);
    if (model instanceof RecordItemModel && webForm != null) {
      IRecord record=(IRecord)((RecordItemModel)model).getObject();
      FormScope fs=webForm.getController().getFormScope();
      if (record != null && fs != null) {
        ((IServoyAwareBean)component).setSelectedRecord(new ServoyBeanState(record,fs));
      }
    }
  }
 else {
    if (!component.isEnabled())     return;
    Component targetComponent=null;
    boolean hasFocus=false, hasBlur=false;
    if (component instanceof IFieldComponent && ((IFieldComponent)component).getEventExecutor() != null) {
      targetComponent=component;
      if (component instanceof WebBaseSelectBox) {
        Component[] cs=((WebBaseSelectBox)component).getFocusChildren();
        if (cs != null && cs.length == 1)         targetComponent=cs[0];
      }
      if (((IFieldComponent)component).getEventExecutor().hasEnterCmds() || component.findParent(WebCellBasedView.class) != null || (((IFieldComponent)component).getScriptObject() instanceof ISupportOnRenderCallback && ((ISupportOnRenderCallback)((IFieldComponent)component).getScriptObject()).getRenderEventExecutor().hasRenderCallback())) {
        hasFocus=true;
      }
      hasBlur=true;
    }
 else     if (component instanceof WebBaseLabel) {
      targetComponent=component;
      hasFocus=true;
    }
    if (targetComponent != null) {
      MainPage mainPage=targetComponent.findParent(MainPage.class);
      if (mainPage.isUsingAjax()) {
        AbstractAjaxBehavior eventCallback=mainPage.getPageContributor().getEventCallback();
        if (eventCallback != null) {
          String callback=eventCallback.getCallbackUrl().toString();
          if (component instanceof WebDataRadioChoice || component instanceof WebDataCheckBoxChoice || component instanceof WebDataLookupField|| component instanceof WebDataComboBox|| component instanceof WebDataListBox) {
            callback+=""String_Node_Str"";
          }
          for (          IBehavior behavior : targetComponent.getBehaviors()) {
            if (behavior instanceof EventCallbackModifier) {
              targetComponent.remove(behavior);
            }
          }
          if (hasFocus) {
            StringBuilder js=new StringBuilder();
            js.append(""String_Node_Str"").append(callback).append(""String_Node_Str"");
            targetComponent.add(new EventCallbackModifier(""String_Node_Str"",true,new Model<String>(js.toString())));
            targetComponent.add(new EventCallbackModifier(""String_Node_Str"",true,new Model<String>(""String_Node_Str"")));
          }
          if (hasBlur) {
            StringBuilder js=new StringBuilder();
            js.append(""String_Node_Str"").append(callback).append(""String_Node_Str"");
            targetComponent.add(new EventCallbackModifier(""String_Node_Str"",true,new Model<String>(js.toString())));
          }
        }
      }
    }
  }
}","public void onBeforeRender(Component component){
  if (component instanceof IServoyAwareBean) {
    IModel model=component.getInnermostModel();
    WebForm webForm=component.findParent(WebForm.class);
    if (model instanceof RecordItemModel && webForm != null) {
      IRecord record=(IRecord)((RecordItemModel)model).getObject();
      FormScope fs=webForm.getController().getFormScope();
      if (record != null && fs != null) {
        ((IServoyAwareBean)component).setSelectedRecord(new ServoyBeanState(record,fs));
      }
    }
  }
 else {
    if (!component.isEnabled())     return;
    Component targetComponent=null;
    boolean hasFocus=false, hasBlur=false;
    if (component instanceof IFieldComponent && ((IFieldComponent)component).getEventExecutor() != null) {
      targetComponent=component;
      if (component instanceof WebBaseSelectBox) {
        Component[] cs=((WebBaseSelectBox)component).getFocusChildren();
        if (cs != null && cs.length == 1)         targetComponent=cs[0];
      }
      if (component instanceof WebDataHtmlArea)       hasFocus=true;
      if (((IFieldComponent)component).getEventExecutor().hasEnterCmds() || component.findParent(WebCellBasedView.class) != null || (((IFieldComponent)component).getScriptObject() instanceof ISupportOnRenderCallback && ((ISupportOnRenderCallback)((IFieldComponent)component).getScriptObject()).getRenderEventExecutor().hasRenderCallback())) {
        hasFocus=true;
      }
      hasBlur=true;
    }
 else     if (component instanceof WebBaseLabel) {
      targetComponent=component;
      hasFocus=true;
    }
    if (targetComponent != null) {
      MainPage mainPage=targetComponent.findParent(MainPage.class);
      if (mainPage.isUsingAjax()) {
        AbstractAjaxBehavior eventCallback=mainPage.getPageContributor().getEventCallback();
        if (eventCallback != null) {
          String callback=eventCallback.getCallbackUrl().toString();
          if (component instanceof WebDataRadioChoice || component instanceof WebDataCheckBoxChoice || component instanceof WebDataLookupField|| component instanceof WebDataComboBox|| component instanceof WebDataListBox|| component instanceof WebDataHtmlArea) {
            callback+=""String_Node_Str"";
          }
          for (          IBehavior behavior : targetComponent.getBehaviors()) {
            if (behavior instanceof EventCallbackModifier) {
              targetComponent.remove(behavior);
            }
          }
          if (hasFocus) {
            StringBuilder js=new StringBuilder();
            js.append(""String_Node_Str"").append(callback).append(""String_Node_Str"");
            if (targetComponent instanceof WebDataHtmlArea) {
              js.insert(0,""String_Node_Str"");
            }
            targetComponent.add(new EventCallbackModifier(""String_Node_Str"",true,new Model<String>(js.toString())));
            targetComponent.add(new EventCallbackModifier(""String_Node_Str"",true,new Model<String>(""String_Node_Str"")));
          }
          if (hasBlur) {
            StringBuilder js=new StringBuilder();
            js.append(""String_Node_Str"").append(callback).append(""String_Node_Str"");
            targetComponent.add(new EventCallbackModifier(""String_Node_Str"",true,new Model<String>(js.toString())));
          }
        }
      }
    }
  }
}",0.9640625
143511,"/** 
 * @see wicket.protocol.http.WebApplication#init()
 */
@Override protected void init(){
  if (ApplicationServerSingleton.get() == null)   return;
  getResourceSettings().setResourceWatcher(new ServoyModificationWatcher(Duration.seconds(5)));
  getResourceSettings().setAddLastModifiedTimeToResourceReferenceUrl(true);
  getResourceSettings().setDefaultCacheDuration((int)Duration.days(365).seconds());
  getMarkupSettings().setCompressWhitespace(true);
  getMarkupSettings().setMarkupCache(new ServoyMarkupCache(this));
  getResourceSettings().setResourceStreamLocator(new ServoyResourceStreamLocator(this));
  getResourceSettings().setThrowExceptionOnMissingResource(false);
  getApplicationSettings().setPageExpiredErrorPage(ServoyExpiredPage.class);
  getApplicationSettings().setClassResolver(new ServoyClassResolver());
  getSessionSettings().setMaxPageMaps(15);
  getSecuritySettings().setCryptFactory(new CachingKeyInSessionSunJceCryptFactory());
  Settings settings=Settings.getInstance();
  getDebugSettings().setOutputComponentPath(Utils.getAsBoolean(settings.getProperty(""String_Node_Str"",""String_Node_Str"")));
  if (Utils.getAsBoolean(settings.getProperty(""String_Node_Str"",""String_Node_Str""))) {
    mount(new HybridUrlCodingStrategy(""String_Node_Str"",SolutionLoader.class));
    mount(new HybridUrlCodingStrategy(""String_Node_Str"",MainPage.class));
    mount(new HybridUrlCodingStrategy(""String_Node_Str"",SolutionLoader.class){
      /** 
 * @see wicket.request.target.coding.BookmarkablePageRequestTargetUrlCodingStrategy#matches(wicket.IRequestTarget)
 */
      @Override public boolean matches(      IRequestTarget requestTarget){
        return false;
      }
    }
);
  }
 else {
    mountBookmarkablePage(""String_Node_Str"",SolutionLoader.class);
    mount(new BookmarkablePageRequestTargetUrlCodingStrategy(""String_Node_Str"",SolutionLoader.class,null){
      /** 
 * @see wicket.request.target.coding.BookmarkablePageRequestTargetUrlCodingStrategy#matches(wicket.IRequestTarget)
 */
      @Override public boolean matches(      IRequestTarget requestTarget){
        return false;
      }
    }
);
  }
  long maxSize=Utils.getAsLong(settings.getProperty(""String_Node_Str"",""String_Node_Str""),false);
  if (maxSize > 0) {
    getApplicationSettings().setDefaultMaximumUploadSize(Bytes.kilobytes(maxSize));
  }
  getSharedResources().putClassAlias(IApplication.class,""String_Node_Str"");
  getSharedResources().putClassAlias(PageContributor.class,""String_Node_Str"");
  getSharedResources().putClassAlias(MaskBehavior.class,""String_Node_Str"");
  getSharedResources().putClassAlias(Application.class,""String_Node_Str"");
  getSharedResources().putClassAlias(org.wicketstuff.calendar.markup.html.form.DatePicker.class,""String_Node_Str"");
  getSharedResources().putClassAlias(YUILoader.class,""String_Node_Str"");
  getSharedResources().putClassAlias(JQueryLoader.class,""String_Node_Str"");
  getSharedResources().putClassAlias(org.apache.wicket.markup.html.WicketEventReference.class,""String_Node_Str"");
  getSharedResources().putClassAlias(org.apache.wicket.ajax.WicketAjaxReference.class,""String_Node_Str"");
  getSharedResources().putClassAlias(MainPage.class,""String_Node_Str"");
  getSharedResources().putClassAlias(org.apache.wicket.extensions.ajax.markup.html.modal.ModalWindow.class,""String_Node_Str"");
  PackageResource.bind(this,IApplication.class,""String_Node_Str"");
  PackageResource.bind(this,IApplication.class,""String_Node_Str"");
  mountSharedResource(""String_Node_Str"",""String_Node_Str"");
  sharedMediaResource=new SharedMediaResource();
  getSharedResources().add(""String_Node_Str"",sharedMediaResource);
  getSharedResources().add(""String_Node_Str"",new ServeResources());
  getSharedResources().add(""String_Node_Str"",new FormCssResource(this));
  if (settings.getProperty(""String_Node_Str"",null) != null) {
    getApplicationSettings().setInternalErrorPage(ServoyErrorPage.class);
  }
  if (settings.getProperty(""String_Node_Str"",null) != null) {
    getApplicationSettings().setPageExpiredErrorPage(ServoyPageExpiredPage.class);
  }
  addPreComponentOnBeforeRenderListener(new IComponentOnBeforeRenderListener(){
    public void onBeforeRender(    Component component){
      if (component instanceof IServoyAwareBean) {
        IModel model=component.getInnermostModel();
        WebForm webForm=component.findParent(WebForm.class);
        if (model instanceof RecordItemModel && webForm != null) {
          IRecord record=(IRecord)((RecordItemModel)model).getObject();
          FormScope fs=webForm.getController().getFormScope();
          if (record != null && fs != null) {
            ((IServoyAwareBean)component).setSelectedRecord(new ServoyBeanState(record,fs));
          }
        }
      }
 else {
        if (!component.isEnabled())         return;
        Component targetComponent=null;
        boolean hasFocus=false, hasBlur=false;
        if (component instanceof IFieldComponent && ((IFieldComponent)component).getEventExecutor() != null) {
          targetComponent=component;
          if (component instanceof WebBaseSelectBox) {
            Component[] cs=((WebBaseSelectBox)component).getFocusChildren();
            if (cs != null && cs.length == 1)             targetComponent=cs[0];
          }
          if (((IFieldComponent)component).getEventExecutor().hasEnterCmds() || component.findParent(WebCellBasedView.class) != null || (((IFieldComponent)component).getScriptObject() instanceof ISupportOnRenderCallback && ((ISupportOnRenderCallback)((IFieldComponent)component).getScriptObject()).getRenderEventExecutor().hasRenderCallback())) {
            hasFocus=true;
          }
          hasBlur=true;
        }
 else         if (component instanceof WebBaseLabel) {
          targetComponent=component;
          hasFocus=true;
        }
        if (targetComponent != null) {
          MainPage mainPage=targetComponent.findParent(MainPage.class);
          if (mainPage.isUsingAjax()) {
            AbstractAjaxBehavior eventCallback=mainPage.getPageContributor().getEventCallback();
            if (eventCallback != null) {
              String callback=eventCallback.getCallbackUrl().toString();
              if (component instanceof WebDataRadioChoice || component instanceof WebDataCheckBoxChoice || component instanceof WebDataLookupField|| component instanceof WebDataComboBox|| component instanceof WebDataListBox) {
                callback+=""String_Node_Str"";
              }
              for (              IBehavior behavior : targetComponent.getBehaviors()) {
                if (behavior instanceof EventCallbackModifier) {
                  targetComponent.remove(behavior);
                }
              }
              if (hasFocus) {
                StringBuilder js=new StringBuilder();
                js.append(""String_Node_Str"").append(callback).append(""String_Node_Str"");
                targetComponent.add(new EventCallbackModifier(""String_Node_Str"",true,new Model<String>(js.toString())));
                targetComponent.add(new EventCallbackModifier(""String_Node_Str"",true,new Model<String>(""String_Node_Str"")));
              }
              if (hasBlur) {
                StringBuilder js=new StringBuilder();
                js.append(""String_Node_Str"").append(callback).append(""String_Node_Str"");
                targetComponent.add(new EventCallbackModifier(""String_Node_Str"",true,new Model<String>(js.toString())));
              }
            }
          }
        }
      }
    }
  }
);
}","/** 
 * @see wicket.protocol.http.WebApplication#init()
 */
@Override protected void init(){
  if (ApplicationServerSingleton.get() == null)   return;
  getResourceSettings().setResourceWatcher(new ServoyModificationWatcher(Duration.seconds(5)));
  getResourceSettings().setAddLastModifiedTimeToResourceReferenceUrl(true);
  getResourceSettings().setDefaultCacheDuration((int)Duration.days(365).seconds());
  getMarkupSettings().setCompressWhitespace(true);
  getMarkupSettings().setMarkupCache(new ServoyMarkupCache(this));
  getResourceSettings().setResourceStreamLocator(new ServoyResourceStreamLocator(this));
  getResourceSettings().setThrowExceptionOnMissingResource(false);
  getApplicationSettings().setPageExpiredErrorPage(ServoyExpiredPage.class);
  getApplicationSettings().setClassResolver(new ServoyClassResolver());
  getSessionSettings().setMaxPageMaps(15);
  getSecuritySettings().setCryptFactory(new CachingKeyInSessionSunJceCryptFactory());
  Settings settings=Settings.getInstance();
  getDebugSettings().setOutputComponentPath(Utils.getAsBoolean(settings.getProperty(""String_Node_Str"",""String_Node_Str"")));
  if (Utils.getAsBoolean(settings.getProperty(""String_Node_Str"",""String_Node_Str""))) {
    mount(new HybridUrlCodingStrategy(""String_Node_Str"",SolutionLoader.class));
    mount(new HybridUrlCodingStrategy(""String_Node_Str"",MainPage.class));
    mount(new HybridUrlCodingStrategy(""String_Node_Str"",SolutionLoader.class){
      /** 
 * @see wicket.request.target.coding.BookmarkablePageRequestTargetUrlCodingStrategy#matches(wicket.IRequestTarget)
 */
      @Override public boolean matches(      IRequestTarget requestTarget){
        return false;
      }
    }
);
  }
 else {
    mountBookmarkablePage(""String_Node_Str"",SolutionLoader.class);
    mount(new BookmarkablePageRequestTargetUrlCodingStrategy(""String_Node_Str"",SolutionLoader.class,null){
      /** 
 * @see wicket.request.target.coding.BookmarkablePageRequestTargetUrlCodingStrategy#matches(wicket.IRequestTarget)
 */
      @Override public boolean matches(      IRequestTarget requestTarget){
        return false;
      }
    }
);
  }
  long maxSize=Utils.getAsLong(settings.getProperty(""String_Node_Str"",""String_Node_Str""),false);
  if (maxSize > 0) {
    getApplicationSettings().setDefaultMaximumUploadSize(Bytes.kilobytes(maxSize));
  }
  getSharedResources().putClassAlias(IApplication.class,""String_Node_Str"");
  getSharedResources().putClassAlias(PageContributor.class,""String_Node_Str"");
  getSharedResources().putClassAlias(MaskBehavior.class,""String_Node_Str"");
  getSharedResources().putClassAlias(Application.class,""String_Node_Str"");
  getSharedResources().putClassAlias(org.wicketstuff.calendar.markup.html.form.DatePicker.class,""String_Node_Str"");
  getSharedResources().putClassAlias(YUILoader.class,""String_Node_Str"");
  getSharedResources().putClassAlias(JQueryLoader.class,""String_Node_Str"");
  getSharedResources().putClassAlias(org.apache.wicket.markup.html.WicketEventReference.class,""String_Node_Str"");
  getSharedResources().putClassAlias(org.apache.wicket.ajax.WicketAjaxReference.class,""String_Node_Str"");
  getSharedResources().putClassAlias(MainPage.class,""String_Node_Str"");
  getSharedResources().putClassAlias(org.apache.wicket.extensions.ajax.markup.html.modal.ModalWindow.class,""String_Node_Str"");
  PackageResource.bind(this,IApplication.class,""String_Node_Str"");
  PackageResource.bind(this,IApplication.class,""String_Node_Str"");
  mountSharedResource(""String_Node_Str"",""String_Node_Str"");
  sharedMediaResource=new SharedMediaResource();
  getSharedResources().add(""String_Node_Str"",sharedMediaResource);
  getSharedResources().add(""String_Node_Str"",new ServeResources());
  getSharedResources().add(""String_Node_Str"",new FormCssResource(this));
  if (settings.getProperty(""String_Node_Str"",null) != null) {
    getApplicationSettings().setInternalErrorPage(ServoyErrorPage.class);
  }
  if (settings.getProperty(""String_Node_Str"",null) != null) {
    getApplicationSettings().setPageExpiredErrorPage(ServoyPageExpiredPage.class);
  }
  addPreComponentOnBeforeRenderListener(new IComponentOnBeforeRenderListener(){
    public void onBeforeRender(    Component component){
      if (component instanceof IServoyAwareBean) {
        IModel model=component.getInnermostModel();
        WebForm webForm=component.findParent(WebForm.class);
        if (model instanceof RecordItemModel && webForm != null) {
          IRecord record=(IRecord)((RecordItemModel)model).getObject();
          FormScope fs=webForm.getController().getFormScope();
          if (record != null && fs != null) {
            ((IServoyAwareBean)component).setSelectedRecord(new ServoyBeanState(record,fs));
          }
        }
      }
 else {
        if (!component.isEnabled())         return;
        Component targetComponent=null;
        boolean hasFocus=false, hasBlur=false;
        if (component instanceof IFieldComponent && ((IFieldComponent)component).getEventExecutor() != null) {
          targetComponent=component;
          if (component instanceof WebBaseSelectBox) {
            Component[] cs=((WebBaseSelectBox)component).getFocusChildren();
            if (cs != null && cs.length == 1)             targetComponent=cs[0];
          }
          if (component instanceof WebDataHtmlArea)           hasFocus=true;
          if (((IFieldComponent)component).getEventExecutor().hasEnterCmds() || component.findParent(WebCellBasedView.class) != null || (((IFieldComponent)component).getScriptObject() instanceof ISupportOnRenderCallback && ((ISupportOnRenderCallback)((IFieldComponent)component).getScriptObject()).getRenderEventExecutor().hasRenderCallback())) {
            hasFocus=true;
          }
          hasBlur=true;
        }
 else         if (component instanceof WebBaseLabel) {
          targetComponent=component;
          hasFocus=true;
        }
        if (targetComponent != null) {
          MainPage mainPage=targetComponent.findParent(MainPage.class);
          if (mainPage.isUsingAjax()) {
            AbstractAjaxBehavior eventCallback=mainPage.getPageContributor().getEventCallback();
            if (eventCallback != null) {
              String callback=eventCallback.getCallbackUrl().toString();
              if (component instanceof WebDataRadioChoice || component instanceof WebDataCheckBoxChoice || component instanceof WebDataLookupField|| component instanceof WebDataComboBox|| component instanceof WebDataListBox|| component instanceof WebDataHtmlArea) {
                callback+=""String_Node_Str"";
              }
              for (              IBehavior behavior : targetComponent.getBehaviors()) {
                if (behavior instanceof EventCallbackModifier) {
                  targetComponent.remove(behavior);
                }
              }
              if (hasFocus) {
                StringBuilder js=new StringBuilder();
                js.append(""String_Node_Str"").append(callback).append(""String_Node_Str"");
                if (targetComponent instanceof WebDataHtmlArea) {
                  js.insert(0,""String_Node_Str"");
                }
                targetComponent.add(new EventCallbackModifier(""String_Node_Str"",true,new Model<String>(js.toString())));
                targetComponent.add(new EventCallbackModifier(""String_Node_Str"",true,new Model<String>(""String_Node_Str"")));
              }
              if (hasBlur) {
                StringBuilder js=new StringBuilder();
                js.append(""String_Node_Str"").append(callback).append(""String_Node_Str"");
                targetComponent.add(new EventCallbackModifier(""String_Node_Str"",true,new Model<String>(js.toString())));
              }
            }
          }
        }
      }
    }
  }
);
}",0.9835914938304016
143512,"private static void createFieldHTML(Field field,Form form,StringBuffer html,TextualCSS css,int startY,int endY,boolean enableAnchoring,IServiceProvider sp){
  boolean addWrapperDiv=enableAnchoring && WebAnchoringHelper.needsWrapperDivForAnchoring(field);
  TextualStyle styleObj=css.addStyle('#' + ComponentFactory.getWebID(form,field));
  Properties minSizeStyle=styleObj;
  if (addWrapperDiv) {
    String wrapperId=ComponentFactory.getWebID(form,field) + WRAPPER_SUFFIX;
    TextualStyle wrapperStyle=css.addStyle('#' + wrapperId);
    wrapperStyle.setProperty(""String_Node_Str"",""String_Node_Str"");
    minSizeStyle=wrapperStyle;
    html.append(""String_Node_Str"");
    html.append(getWicketIDParameter(form,field,""String_Node_Str"",WRAPPER_SUFFIX));
    html.append(getJavaScriptIDParameter(form,field,""String_Node_Str"",WRAPPER_SUFFIX));
    if (field.getDisplayType() == Field.COMBOBOX) {
      html.append(getCSSClassParameter(COMBOBOX_CLASS));
    }
    html.append(""String_Node_Str"");
  }
  Insets padding=(Insets)DEFAULT_FIELD_PADDING.clone();
  Insets border=(Insets)DEFAULT_FIELD_BORDER_SIZE.clone();
  if (field.getDisplayType() == Field.COMBOBOX || field.getDisplayType() == Field.LIST_BOX || field.getDisplayType() == Field.MULTISELECT_LISTBOX) {
    padding=DEFAULT_LABEL_PADDING;
  }
  BorderAndPadding ins=applyBaseComponentProperties(field,form,styleObj,padding,border,sp);
  Pair<IStyleSheet,IStyleRule> pairStyle=ComponentFactory.getCSSPairStyleForForm(sp,form);
  IStyleSheet ss=pairStyle != null ? pairStyle.getLeft() : null;
  String cssClass=""String_Node_Str"";
switch (field.getDisplayType()) {
case Field.PASSWORD:
{
      if (ins == null) {
        ins=new BorderAndPadding(DEFAULT_FIELD_BORDER_SIZE,DEFAULT_FIELD_PADDING);
      }
      html.append(""String_Node_Str"");
      html.append(getWicketIDParameter(form,field));
      html.append(getDataProviderIDParameter(field));
      html.append(getCSSClassParameter(""String_Node_Str""));
      html.append(""String_Node_Str"");
      if (field.getSelectOnEnter()) {
        html.append(""String_Node_Str"");
      }
      html.append(""String_Node_Str"");
    }
  break;
case Field.RTF_AREA:
{
  applyScrolling(styleObj,field);
  html.append(""String_Node_Str"");
  html.append(getWicketIDParameter(form,field));
  html.append(getCSSClassParameter(""String_Node_Str""));
  html.append(""String_Node_Str"");
}
break;
case Field.HTML_AREA:
if (!field.getEditable()) {
applyScrolling(styleObj,field);
html.append(""String_Node_Str"");
html.append(getWicketIDParameter(form,field));
html.append(getCSSClassParameter(""String_Node_Str""));
html.append(""String_Node_Str"");
boolean hasFontFamily=styleObj.containsKey(""String_Node_Str"");
boolean hasFontSize=styleObj.containsKey(""String_Node_Str"");
if (hasFontFamily || hasFontSize) {
for (String dfe : DEFAULT_FONT_ELEMENTS) {
  TextualStyle htmlAreaFont=css.addStyle('#' + ComponentFactory.getWebID(form,field) + ""String_Node_Str""+ dfe);
  if (hasFontFamily)   htmlAreaFont.setProperty(""String_Node_Str"",styleObj.getProperty(""String_Node_Str""));
  if (hasFontSize)   htmlAreaFont.setProperty(""String_Node_Str"",styleObj.getProperty(""String_Node_Str""));
}
}
break;
}
 else {
String editorId=""String_Node_Str"" + ComponentFactory.getWebID(form,field);
html.append(""String_Node_Str"");
html.append(getWicketIDParameter(form,field));
html.append(getCSSClassParameter(""String_Node_Str""));
html.append(""String_Node_Str"");
html.append(editorId);
html.append(""String_Node_Str"");
html.append(editorId);
html.append(""String_Node_Str"");
html.append(getWicketIDParameter(form,field,""String_Node_Str"",""String_Node_Str""));
html.append(""String_Node_Str"");
styleObj.setProperty(""String_Node_Str"",""String_Node_Str"");
if (styleObj.getProperty(""String_Node_Str"") == null && styleObj.getProperty(""String_Node_Str"") == null) {
styleObj.setProperty(""String_Node_Str"",""String_Node_Str"");
}
}
break;
case Field.TEXT_AREA:
{
if (ins == null) {
ins=new BorderAndPadding(DEFAULT_FIELD_BORDER_SIZE,DEFAULT_FIELD_PADDING);
}
applyScrolling(styleObj,field);
html.append(""String_Node_Str"");
html.append(getWicketIDParameter(form,field));
html.append(getDataProviderIDParameter(field));
html.append(getCSSClassParameter(""String_Node_Str""));
html.append(""String_Node_Str"");
}
break;
case Field.CHECKS:
case Field.RADIOS:
boolean isRadio=(field.getDisplayType() == Field.RADIOS);
String selector=(isRadio ? ""String_Node_Str"" : ""String_Node_Str"");
cssClass=(isRadio ? ""String_Node_Str"" : ""String_Node_Str"");
IValueList val=null;
ValueList valuelist=null;
if (field.getValuelistID() > 0 && sp != null) {
valuelist=sp.getFlattenedSolution().getValueList(field.getValuelistID());
}
boolean addSingle=ComponentFactory.isSingleValue(valuelist);
if (field.getValuelistID() > 0 && !addSingle && !isRadio) cssClass=""String_Node_Str"";
if (ss != null) {
cssClass=""String_Node_Str"";
String lookUpValue=selector;
IStyleRule s=ss.getCSSRule(lookUpValue);
if (s.getAttributeCount() == 0) {
if ((field.getStyleClass() != null) && (field.getStyleClass().trim().length() > 0)) {
lookUpValue+='.' + field.getStyleClass().trim();
s=ss.getCSSRule(lookUpValue);
if (s.getAttributeCount() > 0) cssClass=selector;
}
}
 else {
cssClass=selector;
}
}
if ((field.getValuelistID() > 0 || isRadio) && !addSingle) {
applyScrolling(styleObj,field);
html.append(""String_Node_Str"");
html.append(getWicketIDParameter(form,field));
html.append(getDataProviderIDParameter(field));
html.append(getCSSClassParameter(cssClass));
html.append(""String_Node_Str"");
}
 else {
html.append(""String_Node_Str"");
html.append(getCSSClassParameter(cssClass));
html.append(getWicketIDParameter(form,field));
html.append(""String_Node_Str"");
html.append(""String_Node_Str"");
html.append(""String_Node_Str"" + (isRadio ? ""String_Node_Str"" : ""String_Node_Str"") + ""String_Node_Str"");
html.append(getWicketIDParameter(form,field,""String_Node_Str"",""String_Node_Str""));
html.append(getDataProviderIDParameter(field));
if (isRadio) {
html.append(""String_Node_Str"");
}
 else {
html.append(""String_Node_Str"");
}
html.append(""String_Node_Str"");
html.append(""String_Node_Str"" + (isRadio ? ""String_Node_Str"" : ""String_Node_Str"") + ""String_Node_Str"");
html.append(""String_Node_Str"");
html.append(getWicketIDParameter(form,field,""String_Node_Str"",""String_Node_Str""));
html.append(""String_Node_Str"");
html.append(""String_Node_Str"");
html.append(""String_Node_Str"");
}
break;
case Field.COMBOBOX:
{
ins=null;
html.append(""String_Node_Str"");
html.append(getWicketIDParameter(form,field));
html.append(getDataProviderIDParameter(field));
html.append(getCSSClassParameter(""String_Node_Str""));
html.append(""String_Node_Str"");
}
break;
case Field.MULTISELECT_LISTBOX:
case Field.LIST_BOX:
{
ins=null;
html.append(""String_Node_Str"");
if (field.getDisplayType() == Field.MULTISELECT_LISTBOX) {
html.append(""String_Node_Str"");
}
html.append(getWicketIDParameter(form,field));
html.append(getDataProviderIDParameter(field));
html.append(getCSSClassParameter(""String_Node_Str""));
html.append(""String_Node_Str"");
}
break;
case Field.CALENDAR:
case Field.SPINNER:
createCompositeFieldHTML(html,form,field,styleObj);
break;
case Field.IMAGE_MEDIA:
{
applyScrolling(styleObj,field);
html.append(""String_Node_Str"");
html.append(getWicketIDParameter(form,field));
html.append(getCSSClassParameter(""String_Node_Str""));
html.append('>');
TextualStyle inline2=new TextualStyle();
inline2.setProperty(""String_Node_Str"",""String_Node_Str"");
inline2.setProperty(""String_Node_Str"",""String_Node_Str"");
inline2.setProperty(""String_Node_Str"",""String_Node_Str"");
inline2.setProperty(""String_Node_Str"",""String_Node_Str"");
inline2.setProperty(""String_Node_Str"",""String_Node_Str"");
inline2.setProperty(""String_Node_Str"",""String_Node_Str"");
html.append(""String_Node_Str"");
html.append(inline2.toString());
html.append(""String_Node_Str"");
html.append(""String_Node_Str"");
inline2.setProperty(""String_Node_Str"",""String_Node_Str"");
html.append(inline2.toString());
html.append(""String_Node_Str"");
html.append(""String_Node_Str"");
inline2.setProperty(""String_Node_Str"",""String_Node_Str"");
html.append(inline2.toString());
html.append(""String_Node_Str"");
TextualStyle inline=new TextualStyle();
inline.setProperty(""String_Node_Str"",""String_Node_Str"");
inline.setProperty(""String_Node_Str"",""String_Node_Str"");
inline.setProperty(""String_Node_Str"",""String_Node_Str"");
if (field.getOnActionMethodID() < 1) {
inline.setProperty(""String_Node_Str"",""String_Node_Str"");
}
html.append(""String_Node_Str"");
html.append(inline.toString());
html.append(getWicketIDParameter(form,field));
html.append(getJavaScriptIDParameter(form,field));
html.append(""String_Node_Str"");
if (field.getName() != null) html.append(field.getName());
html.append(""String_Node_Str"");
html.append(""String_Node_Str"");
html.append(""String_Node_Str"");
html.append(""String_Node_Str"");
html.append(""String_Node_Str"");
html.append(""String_Node_Str"");
}
break;
default :
case Field.TYPE_AHEAD:
case Field.TEXT_FIELD:
{
if (ins == null) {
ins=new BorderAndPadding(DEFAULT_FIELD_BORDER_SIZE,DEFAULT_FIELD_PADDING);
}
html.append(""String_Node_Str"");
html.append(getWicketIDParameter(form,field));
html.append(getDataProviderIDParameter(field));
html.append(getCSSClassParameter(field.getValuelistID() > 0 ? ""String_Node_Str"" : ""String_Node_Str""));
html.append(""String_Node_Str"");
if (field.getSelectOnEnter()) {
html.append(""String_Node_Str"");
}
html.append(""String_Node_Str"");
}
break;
}
if (field.getHorizontalAlignment() != -1) {
if (isCompositeTextField(field.getDisplayType())) {
TextualStyle childTextCSS=css.addStyle('#' + ComponentFactory.getWebID(form,field) + WebDataCompositeTextField.AUGMENTED_FIELD_ID);
applyTextProperties(field,childTextCSS);
}
 else {
applyTextProperties(field,styleObj);
}
}
Insets borderAndPadding=ins == null ? new Insets(0,0,0,0) : ins.getSum();
WebAnchoringHelper.addMinSize(field.getAnchors(),sp,minSizeStyle,new Dimension(field.getSize().width - borderAndPadding.left - borderAndPadding.right,field.getSize().height - borderAndPadding.top - borderAndPadding.bottom),field);
if (addWrapperDiv) {
html.append(""String_Node_Str"");
styleObj.setProperty(""String_Node_Str"",""String_Node_Str"");
styleObj.setProperty(""String_Node_Str"",""String_Node_Str"");
styleObj.setProperty(""String_Node_Str"",""String_Node_Str"");
}
 else {
applyLocationAndSize(field,styleObj,ins,startY,endY,form.getSize().width,enableAnchoring,isListViewBodyElement(form,field.getLocation()) ? new Point(-3,0) : null);
}
}","private static void createFieldHTML(Field field,Form form,StringBuffer html,TextualCSS css,int startY,int endY,boolean enableAnchoring,IServiceProvider sp){
  boolean addWrapperDiv=enableAnchoring && WebAnchoringHelper.needsWrapperDivForAnchoring(field);
  TextualStyle styleObj=css.addStyle('#' + ComponentFactory.getWebID(form,field));
  Properties minSizeStyle=styleObj;
  if (addWrapperDiv) {
    String wrapperId=ComponentFactory.getWebID(form,field) + WRAPPER_SUFFIX;
    TextualStyle wrapperStyle=css.addStyle('#' + wrapperId);
    wrapperStyle.setProperty(""String_Node_Str"",""String_Node_Str"");
    minSizeStyle=wrapperStyle;
    html.append(""String_Node_Str"");
    html.append(getWicketIDParameter(form,field,""String_Node_Str"",WRAPPER_SUFFIX));
    html.append(getJavaScriptIDParameter(form,field,""String_Node_Str"",WRAPPER_SUFFIX));
    if (field.getDisplayType() == Field.COMBOBOX) {
      html.append(getCSSClassParameter(COMBOBOX_CLASS));
    }
    html.append(""String_Node_Str"");
  }
  Insets padding=(Insets)DEFAULT_FIELD_PADDING.clone();
  Insets border=(Insets)DEFAULT_FIELD_BORDER_SIZE.clone();
  if (field.getDisplayType() == Field.COMBOBOX || field.getDisplayType() == Field.LIST_BOX || field.getDisplayType() == Field.MULTISELECT_LISTBOX) {
    padding=DEFAULT_LABEL_PADDING;
  }
  BorderAndPadding ins=applyBaseComponentProperties(field,form,styleObj,padding,border,sp);
  Pair<IStyleSheet,IStyleRule> pairStyle=ComponentFactory.getCSSPairStyleForForm(sp,form);
  IStyleSheet ss=pairStyle != null ? pairStyle.getLeft() : null;
  String cssClass=""String_Node_Str"";
switch (field.getDisplayType()) {
case Field.PASSWORD:
{
      if (ins == null) {
        ins=new BorderAndPadding(DEFAULT_FIELD_BORDER_SIZE,DEFAULT_FIELD_PADDING);
      }
      html.append(""String_Node_Str"");
      html.append(getWicketIDParameter(form,field));
      html.append(getDataProviderIDParameter(field));
      html.append(getCSSClassParameter(""String_Node_Str""));
      html.append(""String_Node_Str"");
      if (field.getSelectOnEnter()) {
        html.append(""String_Node_Str"");
      }
      html.append(""String_Node_Str"");
    }
  break;
case Field.RTF_AREA:
{
  applyScrolling(styleObj,field);
  html.append(""String_Node_Str"");
  html.append(getWicketIDParameter(form,field));
  html.append(getCSSClassParameter(""String_Node_Str""));
  html.append(""String_Node_Str"");
}
break;
case Field.HTML_AREA:
if (!field.getEditable()) {
applyScrolling(styleObj,field);
html.append(""String_Node_Str"");
html.append(getWicketIDParameter(form,field));
html.append(getCSSClassParameter(""String_Node_Str""));
html.append(""String_Node_Str"");
boolean hasFontFamily=styleObj.containsKey(""String_Node_Str"");
boolean hasFontSize=styleObj.containsKey(""String_Node_Str"");
if (hasFontFamily || hasFontSize) {
for (String dfe : DEFAULT_FONT_ELEMENTS) {
  TextualStyle htmlAreaFont=css.addStyle('#' + ComponentFactory.getWebID(form,field) + ""String_Node_Str""+ dfe);
  if (hasFontFamily)   htmlAreaFont.setProperty(""String_Node_Str"",styleObj.getProperty(""String_Node_Str""));
  if (hasFontSize)   htmlAreaFont.setProperty(""String_Node_Str"",styleObj.getProperty(""String_Node_Str""));
}
}
break;
}
 else {
String editorId=""String_Node_Str"" + ComponentFactory.getWebID(form,field);
html.append(""String_Node_Str"");
html.append(getWicketIDParameter(form,field));
html.append(getCSSClassParameter(""String_Node_Str""));
html.append(""String_Node_Str"");
html.append(editorId);
html.append(""String_Node_Str"");
html.append(editorId);
html.append(""String_Node_Str"");
html.append(getWicketIDParameter(form,field,""String_Node_Str"",""String_Node_Str""));
html.append(""String_Node_Str"");
styleObj.setProperty(""String_Node_Str"",""String_Node_Str"");
styleObj.setProperty(""String_Node_Str"",""String_Node_Str"");
if (styleObj.getProperty(""String_Node_Str"") == null && styleObj.getProperty(""String_Node_Str"") == null) {
styleObj.setProperty(""String_Node_Str"",""String_Node_Str"");
}
}
break;
case Field.TEXT_AREA:
{
if (ins == null) {
ins=new BorderAndPadding(DEFAULT_FIELD_BORDER_SIZE,DEFAULT_FIELD_PADDING);
}
applyScrolling(styleObj,field);
html.append(""String_Node_Str"");
html.append(getWicketIDParameter(form,field));
html.append(getDataProviderIDParameter(field));
html.append(getCSSClassParameter(""String_Node_Str""));
html.append(""String_Node_Str"");
}
break;
case Field.CHECKS:
case Field.RADIOS:
boolean isRadio=(field.getDisplayType() == Field.RADIOS);
String selector=(isRadio ? ""String_Node_Str"" : ""String_Node_Str"");
cssClass=(isRadio ? ""String_Node_Str"" : ""String_Node_Str"");
IValueList val=null;
ValueList valuelist=null;
if (field.getValuelistID() > 0 && sp != null) {
valuelist=sp.getFlattenedSolution().getValueList(field.getValuelistID());
}
boolean addSingle=ComponentFactory.isSingleValue(valuelist);
if (field.getValuelistID() > 0 && !addSingle && !isRadio) cssClass=""String_Node_Str"";
if (ss != null) {
cssClass=""String_Node_Str"";
String lookUpValue=selector;
IStyleRule s=ss.getCSSRule(lookUpValue);
if (s.getAttributeCount() == 0) {
if ((field.getStyleClass() != null) && (field.getStyleClass().trim().length() > 0)) {
lookUpValue+='.' + field.getStyleClass().trim();
s=ss.getCSSRule(lookUpValue);
if (s.getAttributeCount() > 0) cssClass=selector;
}
}
 else {
cssClass=selector;
}
}
if ((field.getValuelistID() > 0 || isRadio) && !addSingle) {
applyScrolling(styleObj,field);
html.append(""String_Node_Str"");
html.append(getWicketIDParameter(form,field));
html.append(getDataProviderIDParameter(field));
html.append(getCSSClassParameter(cssClass));
html.append(""String_Node_Str"");
}
 else {
html.append(""String_Node_Str"");
html.append(getCSSClassParameter(cssClass));
html.append(getWicketIDParameter(form,field));
html.append(""String_Node_Str"");
html.append(""String_Node_Str"");
html.append(""String_Node_Str"" + (isRadio ? ""String_Node_Str"" : ""String_Node_Str"") + ""String_Node_Str"");
html.append(getWicketIDParameter(form,field,""String_Node_Str"",""String_Node_Str""));
html.append(getDataProviderIDParameter(field));
if (isRadio) {
html.append(""String_Node_Str"");
}
 else {
html.append(""String_Node_Str"");
}
html.append(""String_Node_Str"");
html.append(""String_Node_Str"" + (isRadio ? ""String_Node_Str"" : ""String_Node_Str"") + ""String_Node_Str"");
html.append(""String_Node_Str"");
html.append(getWicketIDParameter(form,field,""String_Node_Str"",""String_Node_Str""));
html.append(""String_Node_Str"");
html.append(""String_Node_Str"");
html.append(""String_Node_Str"");
}
break;
case Field.COMBOBOX:
{
ins=null;
html.append(""String_Node_Str"");
html.append(getWicketIDParameter(form,field));
html.append(getDataProviderIDParameter(field));
html.append(getCSSClassParameter(""String_Node_Str""));
html.append(""String_Node_Str"");
}
break;
case Field.MULTISELECT_LISTBOX:
case Field.LIST_BOX:
{
ins=null;
html.append(""String_Node_Str"");
if (field.getDisplayType() == Field.MULTISELECT_LISTBOX) {
html.append(""String_Node_Str"");
}
html.append(getWicketIDParameter(form,field));
html.append(getDataProviderIDParameter(field));
html.append(getCSSClassParameter(""String_Node_Str""));
html.append(""String_Node_Str"");
}
break;
case Field.CALENDAR:
case Field.SPINNER:
createCompositeFieldHTML(html,form,field,styleObj);
break;
case Field.IMAGE_MEDIA:
{
applyScrolling(styleObj,field);
html.append(""String_Node_Str"");
html.append(getWicketIDParameter(form,field));
html.append(getCSSClassParameter(""String_Node_Str""));
html.append('>');
TextualStyle inline2=new TextualStyle();
inline2.setProperty(""String_Node_Str"",""String_Node_Str"");
inline2.setProperty(""String_Node_Str"",""String_Node_Str"");
inline2.setProperty(""String_Node_Str"",""String_Node_Str"");
inline2.setProperty(""String_Node_Str"",""String_Node_Str"");
inline2.setProperty(""String_Node_Str"",""String_Node_Str"");
inline2.setProperty(""String_Node_Str"",""String_Node_Str"");
html.append(""String_Node_Str"");
html.append(inline2.toString());
html.append(""String_Node_Str"");
html.append(""String_Node_Str"");
inline2.setProperty(""String_Node_Str"",""String_Node_Str"");
html.append(inline2.toString());
html.append(""String_Node_Str"");
html.append(""String_Node_Str"");
inline2.setProperty(""String_Node_Str"",""String_Node_Str"");
html.append(inline2.toString());
html.append(""String_Node_Str"");
TextualStyle inline=new TextualStyle();
inline.setProperty(""String_Node_Str"",""String_Node_Str"");
inline.setProperty(""String_Node_Str"",""String_Node_Str"");
inline.setProperty(""String_Node_Str"",""String_Node_Str"");
if (field.getOnActionMethodID() < 1) {
inline.setProperty(""String_Node_Str"",""String_Node_Str"");
}
html.append(""String_Node_Str"");
html.append(inline.toString());
html.append(getWicketIDParameter(form,field));
html.append(getJavaScriptIDParameter(form,field));
html.append(""String_Node_Str"");
if (field.getName() != null) html.append(field.getName());
html.append(""String_Node_Str"");
html.append(""String_Node_Str"");
html.append(""String_Node_Str"");
html.append(""String_Node_Str"");
html.append(""String_Node_Str"");
html.append(""String_Node_Str"");
}
break;
default :
case Field.TYPE_AHEAD:
case Field.TEXT_FIELD:
{
if (ins == null) {
ins=new BorderAndPadding(DEFAULT_FIELD_BORDER_SIZE,DEFAULT_FIELD_PADDING);
}
html.append(""String_Node_Str"");
html.append(getWicketIDParameter(form,field));
html.append(getDataProviderIDParameter(field));
html.append(getCSSClassParameter(field.getValuelistID() > 0 ? ""String_Node_Str"" : ""String_Node_Str""));
html.append(""String_Node_Str"");
if (field.getSelectOnEnter()) {
html.append(""String_Node_Str"");
}
html.append(""String_Node_Str"");
}
break;
}
if (field.getHorizontalAlignment() != -1) {
if (isCompositeTextField(field.getDisplayType())) {
TextualStyle childTextCSS=css.addStyle('#' + ComponentFactory.getWebID(form,field) + WebDataCompositeTextField.AUGMENTED_FIELD_ID);
applyTextProperties(field,childTextCSS);
}
 else {
applyTextProperties(field,styleObj);
}
}
Insets borderAndPadding=ins == null ? new Insets(0,0,0,0) : ins.getSum();
WebAnchoringHelper.addMinSize(field.getAnchors(),sp,minSizeStyle,new Dimension(field.getSize().width - borderAndPadding.left - borderAndPadding.right,field.getSize().height - borderAndPadding.top - borderAndPadding.bottom),field);
if (addWrapperDiv) {
html.append(""String_Node_Str"");
styleObj.setProperty(""String_Node_Str"",""String_Node_Str"");
styleObj.setProperty(""String_Node_Str"",""String_Node_Str"");
styleObj.setProperty(""String_Node_Str"",""String_Node_Str"");
}
 else {
applyLocationAndSize(field,styleObj,ins,startY,endY,form.getSize().width,enableAnchoring,isListViewBodyElement(form,field.getLocation()) ? new Point(-3,0) : null);
}
}",0.9971787883134892
143513,"/** 
 * @see org.apache.wicket.Component#renderHead(org.apache.wicket.markup.html.internal.HtmlHeaderContainer)
 */
@Override public void renderHead(final HtmlHeaderContainer container){
  super.renderHead(container);
  IHeaderResponse response=container.getHeaderResponse();
  YUILoader.renderHTMLEdit(response);
  String script=""String_Node_Str"" + getMarkupId() + ""String_Node_Str""+ textArea.getMarkupId()+ ""String_Node_Str"";
  response.renderOnDomReadyJavascript(script);
}","/** 
 * @see org.apache.wicket.Component#renderHead(org.apache.wicket.markup.html.internal.HtmlHeaderContainer)
 */
@Override public void renderHead(final HtmlHeaderContainer container){
  super.renderHead(container);
  IHeaderResponse response=container.getHeaderResponse();
  YUILoader.renderHTMLEdit(response);
  String script=""String_Node_Str"" + getMarkupId() + ""String_Node_Str""+ textArea.getMarkupId()+ ""String_Node_Str""+ isEditable()+ ""String_Node_Str"";
  response.renderOnDomReadyJavascript(script);
}",0.966497461928934
143514,"/** 
 * @return true if it was not triggered by initial show or other operations for which the callback shouldn't be called.
 */
protected boolean move(AjaxRequestTarget target){
  Request request=RequestCycle.get().getRequest();
  bounds.x=Integer.parseInt(request.getParameter(""String_Node_Str""));
  bounds.y=Integer.parseInt(request.getParameter(""String_Node_Str""));
  return !(""String_Node_Str"".equals(request.getParameter(""String_Node_Str"")));
}","/** 
 * @return true if it was not triggered by initial show or other operations for which the callback shouldn't be called.
 */
protected boolean move(AjaxRequestTarget target){
  Request request=RequestCycle.get().getRequest();
  bounds.x=Utils.getAsInteger(request.getParameter(""String_Node_Str""));
  bounds.y=Utils.getAsInteger(request.getParameter(""String_Node_Str""));
  return !(""String_Node_Str"".equals(request.getParameter(""String_Node_Str"")));
}",0.9557522123893806
143515,"/** 
 * @return true if it was not triggered by initial show or other operations for which the callback shouldn't be called.
 */
protected boolean resize(AjaxRequestTarget target){
  Request request=RequestCycle.get().getRequest();
  bounds.width=Integer.parseInt(request.getParameter(""String_Node_Str""));
  bounds.height=Integer.parseInt(request.getParameter(""String_Node_Str""));
  return !(""String_Node_Str"".equals(request.getParameter(""String_Node_Str"")));
}","/** 
 * @return true if it was not triggered by initial show or other operations for which the callback shouldn't be called.
 */
protected boolean resize(AjaxRequestTarget target){
  Request request=RequestCycle.get().getRequest();
  bounds.width=Utils.getAsInteger(request.getParameter(""String_Node_Str""));
  bounds.height=Utils.getAsInteger(request.getParameter(""String_Node_Str""));
  return !(""String_Node_Str"".equals(request.getParameter(""String_Node_Str"")));
}",0.7473002159827213
143516,"public void onBeforeRender(Component component){
  if (component instanceof IServoyAwareBean) {
    IModel model=component.getInnermostModel();
    WebForm webForm=component.findParent(WebForm.class);
    if (model instanceof RecordItemModel && webForm != null) {
      IRecord record=(IRecord)((RecordItemModel)model).getObject();
      FormScope fs=webForm.getController().getFormScope();
      if (record != null && fs != null) {
        ((IServoyAwareBean)component).setSelectedRecord(new ServoyBeanState(record,fs));
      }
    }
  }
 else {
    if (!component.isEnabled())     return;
    Component targetComponent=null;
    boolean hasFocus=false, hasBlur=false;
    if (component instanceof IFieldComponent && ((IFieldComponent)component).getEventExecutor() != null) {
      targetComponent=component;
      if (component instanceof WebBaseSelectBox) {
        Component[] cs=((WebBaseSelectBox)component).getFocusChildren();
        if (cs != null && cs.length == 1)         targetComponent=cs[0];
      }
      if (((IFieldComponent)component).getEventExecutor().hasEnterCmds() || component.findParent(WebCellBasedView.class) != null || (((IFieldComponent)component).getScriptObject() instanceof ISupportOnRenderCallback && ((ISupportOnRenderCallback)((IFieldComponent)component).getScriptObject()).getRenderEventExecutor().hasRenderCallback())) {
        hasFocus=true;
      }
      hasBlur=true;
    }
 else     if (component instanceof WebBaseLabel) {
      targetComponent=component;
      hasFocus=true;
    }
    if (targetComponent != null) {
      MainPage mainPage=targetComponent.findParent(MainPage.class);
      if (mainPage.isUsingAjax()) {
        AbstractAjaxBehavior eventCallback=mainPage.getPageContributor().getEventCallback();
        if (eventCallback != null) {
          String callback=eventCallback.getCallbackUrl().toString();
          if (component instanceof WebDataRadioChoice || component instanceof WebDataCheckBoxChoice) {
            callback+=""String_Node_Str"";
          }
          for (          IBehavior behavior : targetComponent.getBehaviors()) {
            if (behavior instanceof EventCallbackModifier) {
              targetComponent.remove(behavior);
            }
          }
          if (hasFocus) {
            StringBuilder js=new StringBuilder();
            js.append(""String_Node_Str"").append(callback).append(""String_Node_Str"");
            targetComponent.add(new EventCallbackModifier(""String_Node_Str"",true,new Model<String>(js.toString())));
            targetComponent.add(new EventCallbackModifier(""String_Node_Str"",true,new Model<String>(""String_Node_Str"")));
          }
          if (hasBlur) {
            StringBuilder js=new StringBuilder();
            js.append(""String_Node_Str"").append(callback).append(""String_Node_Str"");
            targetComponent.add(new EventCallbackModifier(""String_Node_Str"",true,new Model<String>(js.toString())));
          }
        }
      }
    }
  }
}","public void onBeforeRender(Component component){
  if (component instanceof IServoyAwareBean) {
    IModel model=component.getInnermostModel();
    WebForm webForm=component.findParent(WebForm.class);
    if (model instanceof RecordItemModel && webForm != null) {
      IRecord record=(IRecord)((RecordItemModel)model).getObject();
      FormScope fs=webForm.getController().getFormScope();
      if (record != null && fs != null) {
        ((IServoyAwareBean)component).setSelectedRecord(new ServoyBeanState(record,fs));
      }
    }
  }
 else {
    if (!component.isEnabled())     return;
    Component targetComponent=null;
    boolean hasFocus=false, hasBlur=false;
    if (component instanceof IFieldComponent && ((IFieldComponent)component).getEventExecutor() != null) {
      targetComponent=component;
      if (component instanceof WebBaseSelectBox) {
        Component[] cs=((WebBaseSelectBox)component).getFocusChildren();
        if (cs != null && cs.length == 1)         targetComponent=cs[0];
      }
      if (((IFieldComponent)component).getEventExecutor().hasEnterCmds() || component.findParent(WebCellBasedView.class) != null || (((IFieldComponent)component).getScriptObject() instanceof ISupportOnRenderCallback && ((ISupportOnRenderCallback)((IFieldComponent)component).getScriptObject()).getRenderEventExecutor().hasRenderCallback())) {
        hasFocus=true;
      }
      hasBlur=true;
    }
 else     if (component instanceof WebBaseLabel) {
      targetComponent=component;
      hasFocus=true;
    }
    if (targetComponent != null) {
      MainPage mainPage=targetComponent.findParent(MainPage.class);
      if (mainPage.isUsingAjax()) {
        AbstractAjaxBehavior eventCallback=mainPage.getPageContributor().getEventCallback();
        if (eventCallback != null) {
          String callback=eventCallback.getCallbackUrl().toString();
          if (component instanceof WebDataRadioChoice || component instanceof WebDataCheckBoxChoice || component instanceof WebDataLookupField|| component instanceof WebDataComboBox|| component instanceof WebDataListBox) {
            callback+=""String_Node_Str"";
          }
          for (          IBehavior behavior : targetComponent.getBehaviors()) {
            if (behavior instanceof EventCallbackModifier) {
              targetComponent.remove(behavior);
            }
          }
          if (hasFocus) {
            StringBuilder js=new StringBuilder();
            js.append(""String_Node_Str"").append(callback).append(""String_Node_Str"");
            targetComponent.add(new EventCallbackModifier(""String_Node_Str"",true,new Model<String>(js.toString())));
            targetComponent.add(new EventCallbackModifier(""String_Node_Str"",true,new Model<String>(""String_Node_Str"")));
          }
          if (hasBlur) {
            StringBuilder js=new StringBuilder();
            js.append(""String_Node_Str"").append(callback).append(""String_Node_Str"");
            targetComponent.add(new EventCallbackModifier(""String_Node_Str"",true,new Model<String>(js.toString())));
          }
        }
      }
    }
  }
}",0.9801652892561984
143517,"/** 
 * @see wicket.protocol.http.WebApplication#init()
 */
@Override protected void init(){
  if (ApplicationServerSingleton.get() == null)   return;
  getResourceSettings().setResourceWatcher(new ServoyModificationWatcher(Duration.seconds(5)));
  getResourceSettings().setAddLastModifiedTimeToResourceReferenceUrl(true);
  getResourceSettings().setDefaultCacheDuration((int)Duration.days(365).seconds());
  getMarkupSettings().setCompressWhitespace(true);
  getMarkupSettings().setMarkupCache(new ServoyMarkupCache(this));
  getResourceSettings().setResourceStreamLocator(new ServoyResourceStreamLocator(this));
  getResourceSettings().setThrowExceptionOnMissingResource(false);
  getApplicationSettings().setPageExpiredErrorPage(ServoyExpiredPage.class);
  getApplicationSettings().setClassResolver(new ServoyClassResolver());
  getSessionSettings().setMaxPageMaps(15);
  getSecuritySettings().setCryptFactory(new CachingKeyInSessionSunJceCryptFactory());
  Settings settings=Settings.getInstance();
  getDebugSettings().setOutputComponentPath(Utils.getAsBoolean(settings.getProperty(""String_Node_Str"",""String_Node_Str"")));
  if (Utils.getAsBoolean(settings.getProperty(""String_Node_Str"",""String_Node_Str""))) {
    mount(new HybridUrlCodingStrategy(""String_Node_Str"",SolutionLoader.class));
    mount(new HybridUrlCodingStrategy(""String_Node_Str"",MainPage.class));
    mount(new HybridUrlCodingStrategy(""String_Node_Str"",SolutionLoader.class){
      /** 
 * @see wicket.request.target.coding.BookmarkablePageRequestTargetUrlCodingStrategy#matches(wicket.IRequestTarget)
 */
      @Override public boolean matches(      IRequestTarget requestTarget){
        return false;
      }
    }
);
  }
 else {
    mountBookmarkablePage(""String_Node_Str"",SolutionLoader.class);
    mount(new BookmarkablePageRequestTargetUrlCodingStrategy(""String_Node_Str"",SolutionLoader.class,null){
      /** 
 * @see wicket.request.target.coding.BookmarkablePageRequestTargetUrlCodingStrategy#matches(wicket.IRequestTarget)
 */
      @Override public boolean matches(      IRequestTarget requestTarget){
        return false;
      }
    }
);
  }
  long maxSize=Utils.getAsLong(settings.getProperty(""String_Node_Str"",""String_Node_Str""),false);
  if (maxSize > 0) {
    getApplicationSettings().setDefaultMaximumUploadSize(Bytes.kilobytes(maxSize));
  }
  getSharedResources().putClassAlias(IApplication.class,""String_Node_Str"");
  getSharedResources().putClassAlias(PageContributor.class,""String_Node_Str"");
  getSharedResources().putClassAlias(MaskBehavior.class,""String_Node_Str"");
  getSharedResources().putClassAlias(Application.class,""String_Node_Str"");
  getSharedResources().putClassAlias(org.wicketstuff.calendar.markup.html.form.DatePicker.class,""String_Node_Str"");
  getSharedResources().putClassAlias(YUILoader.class,""String_Node_Str"");
  getSharedResources().putClassAlias(JQueryLoader.class,""String_Node_Str"");
  getSharedResources().putClassAlias(org.apache.wicket.markup.html.WicketEventReference.class,""String_Node_Str"");
  getSharedResources().putClassAlias(org.apache.wicket.ajax.WicketAjaxReference.class,""String_Node_Str"");
  getSharedResources().putClassAlias(MainPage.class,""String_Node_Str"");
  getSharedResources().putClassAlias(org.apache.wicket.extensions.ajax.markup.html.modal.ModalWindow.class,""String_Node_Str"");
  PackageResource.bind(this,IApplication.class,""String_Node_Str"");
  PackageResource.bind(this,IApplication.class,""String_Node_Str"");
  mountSharedResource(""String_Node_Str"",""String_Node_Str"");
  sharedMediaResource=new SharedMediaResource();
  getSharedResources().add(""String_Node_Str"",sharedMediaResource);
  getSharedResources().add(""String_Node_Str"",new ServeResources());
  getSharedResources().add(""String_Node_Str"",new FormCssResource(this));
  if (settings.getProperty(""String_Node_Str"",null) != null) {
    getApplicationSettings().setInternalErrorPage(ServoyErrorPage.class);
  }
  if (settings.getProperty(""String_Node_Str"",null) != null) {
    getApplicationSettings().setPageExpiredErrorPage(ServoyPageExpiredPage.class);
  }
  addPreComponentOnBeforeRenderListener(new IComponentOnBeforeRenderListener(){
    public void onBeforeRender(    Component component){
      if (component instanceof IServoyAwareBean) {
        IModel model=component.getInnermostModel();
        WebForm webForm=component.findParent(WebForm.class);
        if (model instanceof RecordItemModel && webForm != null) {
          IRecord record=(IRecord)((RecordItemModel)model).getObject();
          FormScope fs=webForm.getController().getFormScope();
          if (record != null && fs != null) {
            ((IServoyAwareBean)component).setSelectedRecord(new ServoyBeanState(record,fs));
          }
        }
      }
 else {
        if (!component.isEnabled())         return;
        Component targetComponent=null;
        boolean hasFocus=false, hasBlur=false;
        if (component instanceof IFieldComponent && ((IFieldComponent)component).getEventExecutor() != null) {
          targetComponent=component;
          if (component instanceof WebBaseSelectBox) {
            Component[] cs=((WebBaseSelectBox)component).getFocusChildren();
            if (cs != null && cs.length == 1)             targetComponent=cs[0];
          }
          if (((IFieldComponent)component).getEventExecutor().hasEnterCmds() || component.findParent(WebCellBasedView.class) != null || (((IFieldComponent)component).getScriptObject() instanceof ISupportOnRenderCallback && ((ISupportOnRenderCallback)((IFieldComponent)component).getScriptObject()).getRenderEventExecutor().hasRenderCallback())) {
            hasFocus=true;
          }
          hasBlur=true;
        }
 else         if (component instanceof WebBaseLabel) {
          targetComponent=component;
          hasFocus=true;
        }
        if (targetComponent != null) {
          MainPage mainPage=targetComponent.findParent(MainPage.class);
          if (mainPage.isUsingAjax()) {
            AbstractAjaxBehavior eventCallback=mainPage.getPageContributor().getEventCallback();
            if (eventCallback != null) {
              String callback=eventCallback.getCallbackUrl().toString();
              if (component instanceof WebDataRadioChoice || component instanceof WebDataCheckBoxChoice) {
                callback+=""String_Node_Str"";
              }
              for (              IBehavior behavior : targetComponent.getBehaviors()) {
                if (behavior instanceof EventCallbackModifier) {
                  targetComponent.remove(behavior);
                }
              }
              if (hasFocus) {
                StringBuilder js=new StringBuilder();
                js.append(""String_Node_Str"").append(callback).append(""String_Node_Str"");
                targetComponent.add(new EventCallbackModifier(""String_Node_Str"",true,new Model<String>(js.toString())));
                targetComponent.add(new EventCallbackModifier(""String_Node_Str"",true,new Model<String>(""String_Node_Str"")));
              }
              if (hasBlur) {
                StringBuilder js=new StringBuilder();
                js.append(""String_Node_Str"").append(callback).append(""String_Node_Str"");
                targetComponent.add(new EventCallbackModifier(""String_Node_Str"",true,new Model<String>(js.toString())));
              }
            }
          }
        }
      }
    }
  }
);
}","/** 
 * @see wicket.protocol.http.WebApplication#init()
 */
@Override protected void init(){
  if (ApplicationServerSingleton.get() == null)   return;
  getResourceSettings().setResourceWatcher(new ServoyModificationWatcher(Duration.seconds(5)));
  getResourceSettings().setAddLastModifiedTimeToResourceReferenceUrl(true);
  getResourceSettings().setDefaultCacheDuration((int)Duration.days(365).seconds());
  getMarkupSettings().setCompressWhitespace(true);
  getMarkupSettings().setMarkupCache(new ServoyMarkupCache(this));
  getResourceSettings().setResourceStreamLocator(new ServoyResourceStreamLocator(this));
  getResourceSettings().setThrowExceptionOnMissingResource(false);
  getApplicationSettings().setPageExpiredErrorPage(ServoyExpiredPage.class);
  getApplicationSettings().setClassResolver(new ServoyClassResolver());
  getSessionSettings().setMaxPageMaps(15);
  getSecuritySettings().setCryptFactory(new CachingKeyInSessionSunJceCryptFactory());
  Settings settings=Settings.getInstance();
  getDebugSettings().setOutputComponentPath(Utils.getAsBoolean(settings.getProperty(""String_Node_Str"",""String_Node_Str"")));
  if (Utils.getAsBoolean(settings.getProperty(""String_Node_Str"",""String_Node_Str""))) {
    mount(new HybridUrlCodingStrategy(""String_Node_Str"",SolutionLoader.class));
    mount(new HybridUrlCodingStrategy(""String_Node_Str"",MainPage.class));
    mount(new HybridUrlCodingStrategy(""String_Node_Str"",SolutionLoader.class){
      /** 
 * @see wicket.request.target.coding.BookmarkablePageRequestTargetUrlCodingStrategy#matches(wicket.IRequestTarget)
 */
      @Override public boolean matches(      IRequestTarget requestTarget){
        return false;
      }
    }
);
  }
 else {
    mountBookmarkablePage(""String_Node_Str"",SolutionLoader.class);
    mount(new BookmarkablePageRequestTargetUrlCodingStrategy(""String_Node_Str"",SolutionLoader.class,null){
      /** 
 * @see wicket.request.target.coding.BookmarkablePageRequestTargetUrlCodingStrategy#matches(wicket.IRequestTarget)
 */
      @Override public boolean matches(      IRequestTarget requestTarget){
        return false;
      }
    }
);
  }
  long maxSize=Utils.getAsLong(settings.getProperty(""String_Node_Str"",""String_Node_Str""),false);
  if (maxSize > 0) {
    getApplicationSettings().setDefaultMaximumUploadSize(Bytes.kilobytes(maxSize));
  }
  getSharedResources().putClassAlias(IApplication.class,""String_Node_Str"");
  getSharedResources().putClassAlias(PageContributor.class,""String_Node_Str"");
  getSharedResources().putClassAlias(MaskBehavior.class,""String_Node_Str"");
  getSharedResources().putClassAlias(Application.class,""String_Node_Str"");
  getSharedResources().putClassAlias(org.wicketstuff.calendar.markup.html.form.DatePicker.class,""String_Node_Str"");
  getSharedResources().putClassAlias(YUILoader.class,""String_Node_Str"");
  getSharedResources().putClassAlias(JQueryLoader.class,""String_Node_Str"");
  getSharedResources().putClassAlias(org.apache.wicket.markup.html.WicketEventReference.class,""String_Node_Str"");
  getSharedResources().putClassAlias(org.apache.wicket.ajax.WicketAjaxReference.class,""String_Node_Str"");
  getSharedResources().putClassAlias(MainPage.class,""String_Node_Str"");
  getSharedResources().putClassAlias(org.apache.wicket.extensions.ajax.markup.html.modal.ModalWindow.class,""String_Node_Str"");
  PackageResource.bind(this,IApplication.class,""String_Node_Str"");
  PackageResource.bind(this,IApplication.class,""String_Node_Str"");
  mountSharedResource(""String_Node_Str"",""String_Node_Str"");
  sharedMediaResource=new SharedMediaResource();
  getSharedResources().add(""String_Node_Str"",sharedMediaResource);
  getSharedResources().add(""String_Node_Str"",new ServeResources());
  getSharedResources().add(""String_Node_Str"",new FormCssResource(this));
  if (settings.getProperty(""String_Node_Str"",null) != null) {
    getApplicationSettings().setInternalErrorPage(ServoyErrorPage.class);
  }
  if (settings.getProperty(""String_Node_Str"",null) != null) {
    getApplicationSettings().setPageExpiredErrorPage(ServoyPageExpiredPage.class);
  }
  addPreComponentOnBeforeRenderListener(new IComponentOnBeforeRenderListener(){
    public void onBeforeRender(    Component component){
      if (component instanceof IServoyAwareBean) {
        IModel model=component.getInnermostModel();
        WebForm webForm=component.findParent(WebForm.class);
        if (model instanceof RecordItemModel && webForm != null) {
          IRecord record=(IRecord)((RecordItemModel)model).getObject();
          FormScope fs=webForm.getController().getFormScope();
          if (record != null && fs != null) {
            ((IServoyAwareBean)component).setSelectedRecord(new ServoyBeanState(record,fs));
          }
        }
      }
 else {
        if (!component.isEnabled())         return;
        Component targetComponent=null;
        boolean hasFocus=false, hasBlur=false;
        if (component instanceof IFieldComponent && ((IFieldComponent)component).getEventExecutor() != null) {
          targetComponent=component;
          if (component instanceof WebBaseSelectBox) {
            Component[] cs=((WebBaseSelectBox)component).getFocusChildren();
            if (cs != null && cs.length == 1)             targetComponent=cs[0];
          }
          if (((IFieldComponent)component).getEventExecutor().hasEnterCmds() || component.findParent(WebCellBasedView.class) != null || (((IFieldComponent)component).getScriptObject() instanceof ISupportOnRenderCallback && ((ISupportOnRenderCallback)((IFieldComponent)component).getScriptObject()).getRenderEventExecutor().hasRenderCallback())) {
            hasFocus=true;
          }
          hasBlur=true;
        }
 else         if (component instanceof WebBaseLabel) {
          targetComponent=component;
          hasFocus=true;
        }
        if (targetComponent != null) {
          MainPage mainPage=targetComponent.findParent(MainPage.class);
          if (mainPage.isUsingAjax()) {
            AbstractAjaxBehavior eventCallback=mainPage.getPageContributor().getEventCallback();
            if (eventCallback != null) {
              String callback=eventCallback.getCallbackUrl().toString();
              if (component instanceof WebDataRadioChoice || component instanceof WebDataCheckBoxChoice || component instanceof WebDataLookupField|| component instanceof WebDataComboBox|| component instanceof WebDataListBox) {
                callback+=""String_Node_Str"";
              }
              for (              IBehavior behavior : targetComponent.getBehaviors()) {
                if (behavior instanceof EventCallbackModifier) {
                  targetComponent.remove(behavior);
                }
              }
              if (hasFocus) {
                StringBuilder js=new StringBuilder();
                js.append(""String_Node_Str"").append(callback).append(""String_Node_Str"");
                targetComponent.add(new EventCallbackModifier(""String_Node_Str"",true,new Model<String>(js.toString())));
                targetComponent.add(new EventCallbackModifier(""String_Node_Str"",true,new Model<String>(""String_Node_Str"")));
              }
              if (hasBlur) {
                StringBuilder js=new StringBuilder();
                js.append(""String_Node_Str"").append(callback).append(""String_Node_Str"");
                targetComponent.add(new EventCallbackModifier(""String_Node_Str"",true,new Model<String>(js.toString())));
              }
            }
          }
        }
      }
    }
  }
);
}",0.9919278891430108
143518,"@Override protected void respond(AjaxRequestTarget ajaxRequestTarget){
  Page componentPage=getComponent().getPage();
  Request componentRequest=getComponent().getRequest();
  String action=componentRequest.getParameter(PARAM_ACTION);
  String id=componentRequest.getParameter(PARAM_DRAGGABLE_ID);
  int modifiers=WebEventExecutor.convertModifiers(Integer.parseInt(componentRequest.getParameter(PARAM_MODIFIERS)));
  if (ACTION_DRAG_START.equals(action)) {
    boolean dragStartReturn=onDragStart(id,Integer.parseInt(componentRequest.getParameter(PARAM_X)),Integer.parseInt(componentRequest.getParameter(PARAM_Y)),modifiers,ajaxRequestTarget);
    if (!dragStartReturn)     ajaxRequestTarget.appendJavascript(""String_Node_Str"");
  }
 else   if (ACTION_DRAG_END.equals(action)) {
    onDragEnd(id,Integer.parseInt(componentRequest.getParameter(PARAM_X)),Integer.parseInt(componentRequest.getParameter(PARAM_Y)),modifiers,ajaxRequestTarget);
  }
 else   if (ACTION_DROP_HOVER.equals(action)) {
    onDropHover(id,componentRequest.getParameter(PARAM_TARGET_ID),modifiers,ajaxRequestTarget);
  }
 else   if (ACTION_DROP.equals(action)) {
    onDrop(id,componentRequest.getParameter(PARAM_TARGET_ID),Integer.parseInt(componentRequest.getParameter(PARAM_X)),Integer.parseInt(componentRequest.getParameter(PARAM_Y)),modifiers,ajaxRequestTarget);
  }
  WebEventExecutor.generateResponse(ajaxRequestTarget,componentPage);
}","@Override protected void respond(AjaxRequestTarget ajaxRequestTarget){
  Page componentPage=getComponent().getPage();
  Request componentRequest=getComponent().getRequest();
  String action=componentRequest.getParameter(PARAM_ACTION);
  String id=componentRequest.getParameter(PARAM_DRAGGABLE_ID);
  int modifiers=WebEventExecutor.convertModifiers(Integer.parseInt(componentRequest.getParameter(PARAM_MODIFIERS)));
  if (ACTION_DRAG_START.equals(action)) {
    boolean dragStartReturn=onDragStart(id,Utils.getAsInteger(componentRequest.getParameter(PARAM_X)),Utils.getAsInteger(componentRequest.getParameter(PARAM_Y)),modifiers,ajaxRequestTarget);
    if (!dragStartReturn)     ajaxRequestTarget.appendJavascript(""String_Node_Str"");
  }
 else   if (ACTION_DRAG_END.equals(action)) {
    onDragEnd(id,Utils.getAsInteger(componentRequest.getParameter(PARAM_X)),Utils.getAsInteger(componentRequest.getParameter(PARAM_Y)),modifiers,ajaxRequestTarget);
  }
 else   if (ACTION_DROP_HOVER.equals(action)) {
    onDropHover(id,componentRequest.getParameter(PARAM_TARGET_ID),modifiers,ajaxRequestTarget);
  }
 else   if (ACTION_DROP.equals(action)) {
    onDrop(id,componentRequest.getParameter(PARAM_TARGET_ID),Utils.getAsInteger(componentRequest.getParameter(PARAM_X)),Utils.getAsInteger(componentRequest.getParameter(PARAM_Y)),modifiers,ajaxRequestTarget);
  }
  WebEventExecutor.generateResponse(ajaxRequestTarget,componentPage);
}",0.928169014084507
143519,"public RootObjectMetaData createNewRootObjectMetaData(int rootObjectId,UUID rootObjectUuid,String name,int objectTypeId,int activeRelease,int latestRelease) throws RepositoryException {
  RootObjectMetaData romd=createRootObjectMetaData(rootObjectId,rootObjectUuid,name,objectTypeId,activeRelease,latestRelease);
  getRootObjectCache().add(romd);
  return romd;
}","public RootObjectMetaData createNewRootObjectMetaData(int rootObjectId,UUID rootObjectUuid,String name,int objectTypeId,int activeRelease,int latestRelease) throws RepositoryException {
  RootObjectMetaData romd=createRootObjectMetaData(rootObjectId,rootObjectUuid,name,objectTypeId,activeRelease,latestRelease);
  getRootObjectCache().add(romd,false);
  return romd;
}",0.9918032786885246
143520,"public IRootObject getLatestRootObject(int rootObjectId) throws RepositoryException {
  RootObjectMetaData metadata=getRootObjectCache().getRootObjectMetaData(rootObjectId);
  if (metadata == null) {
    try {
      Iterator<RootObjectMetaData> iterator=loadRootObjectMetaDatas().iterator();
      while (iterator.hasNext()) {
        metadata=iterator.next();
        if (metadata.getRootObjectId() == rootObjectId) {
          getRootObjectCache().add(metadata);
          return getRootObject(rootObjectId,metadata.getLatestRelease());
        }
      }
    }
 catch (    Exception e) {
      Debug.error(""String_Node_Str"" + rootObjectId,e);
    }
    return null;
  }
  return getRootObject(rootObjectId,metadata.getLatestRelease());
}","public IRootObject getLatestRootObject(int rootObjectId) throws RepositoryException {
  RootObjectMetaData metadata=getRootObjectCache().getRootObjectMetaData(rootObjectId);
  if (metadata == null) {
    try {
      Iterator<RootObjectMetaData> iterator=loadRootObjectMetaDatas().iterator();
      while (iterator.hasNext()) {
        metadata=iterator.next();
        if (metadata.getRootObjectId() == rootObjectId) {
          getRootObjectCache().add(metadata,false);
          return getRootObject(rootObjectId,metadata.getLatestRelease());
        }
      }
    }
 catch (    Exception e) {
      Debug.error(""String_Node_Str"" + rootObjectId,e);
    }
    return null;
  }
  return getRootObject(rootObjectId,metadata.getLatestRelease());
}",0.995956873315364
143521,"protected AbstractRepository(IServerManager serverManager,boolean loadImportHooks){
  this.serverManager=serverManager;
  mimeTypeMap=new HashMap<String,String>();
  mimeTypeMap.put(""String_Node_Str"",""String_Node_Str"");
  mimeTypeMap.put(""String_Node_Str"",""String_Node_Str"");
  mimeTypeMap.put(""String_Node_Str"",""String_Node_Str"");
  repositoryHelper=new RepositoryHelper(this,loadImportHooks);
}","protected AbstractRepository(IServerManager serverManager){
  this.serverManager=serverManager;
  mimeTypeMap=new HashMap<String,String>();
  mimeTypeMap.put(""String_Node_Str"",""String_Node_Str"");
  mimeTypeMap.put(""String_Node_Str"",""String_Node_Str"");
  mimeTypeMap.put(""String_Node_Str"",""String_Node_Str"");
  repositoryHelper=new RepositoryHelper(this);
}",0.1808510638297872
143522,"/** 
 * Adds the given meta data object to the root object meta data cache.
 * @param rootObjectMetaData the meta data to be added.
 */
public void addRootObjectMetaData(RootObjectMetaData rootObjectMetaData) throws RepositoryException {
  getRootObjectCache().add(rootObjectMetaData);
}","/** 
 * Adds the given meta data object to the root object meta data cache.
 * @param rootObjectMetaData the meta data to be added.
 */
public void addRootObjectMetaData(RootObjectMetaData rootObjectMetaData) throws RepositoryException {
  getRootObjectCache().add(rootObjectMetaData,true);
}",0.9913644214162348
143523,"private void loadObjectMetaDatas(String moduleNames,Map<UUID,RootObjectReference> referencedModules) throws RepositoryException {
  if (moduleNames == null)   return;
  StringTokenizer tk=new StringTokenizer(moduleNames,""String_Node_Str"");
  int count=tk.countTokens();
  if (count > 0) {
    while (tk.hasMoreTokens()) {
      try {
        String moduleDescriptor=tk.nextToken();
        SolutionMetaData metaData;
        int releaseNumber=0;
        int i=moduleDescriptor.indexOf(':');
        String name;
        UUID uuid;
        if (i != -1) {
          releaseNumber=Integer.parseInt(moduleDescriptor.substring(i + 1));
          moduleDescriptor=moduleDescriptor.substring(0,i);
        }
        if (moduleDescriptor.indexOf('-') != -1) {
          uuid=UUID.fromString(moduleDescriptor);
          metaData=(SolutionMetaData)developerRepository.getRootObjectMetaData(uuid);
          if (metaData == null) {
            continue;
          }
          name=metaData.getName();
        }
 else {
          name=moduleDescriptor;
          metaData=(SolutionMetaData)developerRepository.getRootObjectMetaData(name,IRepository.SOLUTIONS);
          if (metaData == null) {
            continue;
          }
          uuid=metaData.getRootObjectUuid();
        }
        if (referencedModules.get(uuid) == null && (loadImportHooks || !SolutionMetaData.isImportHook(metaData))) {
          referencedModules.put(uuid,new RootObjectReference(name,uuid,metaData,releaseNumber));
          Solution sol=(Solution)developerRepository.getRootObject(metaData.getRootObjectId(),releaseNumber);
          loadObjectMetaDatas(sol.getModulesNames(),referencedModules);
        }
      }
 catch (      RemoteException e) {
        throw new RepositoryException(e);
      }
    }
  }
}","private void loadObjectMetaDatas(String moduleNames,Map<UUID,RootObjectReference> referencedModules,boolean loadImportHooks) throws RepositoryException {
  if (moduleNames == null)   return;
  StringTokenizer tk=new StringTokenizer(moduleNames,""String_Node_Str"");
  int count=tk.countTokens();
  if (count > 0) {
    while (tk.hasMoreTokens()) {
      try {
        String moduleDescriptor=tk.nextToken();
        SolutionMetaData metaData;
        int releaseNumber=0;
        int i=moduleDescriptor.indexOf(':');
        String name;
        UUID uuid;
        if (i != -1) {
          releaseNumber=Integer.parseInt(moduleDescriptor.substring(i + 1));
          moduleDescriptor=moduleDescriptor.substring(0,i);
        }
        if (moduleDescriptor.indexOf('-') != -1) {
          uuid=UUID.fromString(moduleDescriptor);
          metaData=(SolutionMetaData)developerRepository.getRootObjectMetaData(uuid);
          if (metaData == null) {
            continue;
          }
          name=metaData.getName();
        }
 else {
          name=moduleDescriptor;
          metaData=(SolutionMetaData)developerRepository.getRootObjectMetaData(name,IRepository.SOLUTIONS);
          if (metaData == null) {
            continue;
          }
          uuid=metaData.getRootObjectUuid();
        }
        if (referencedModules.get(uuid) == null && (loadImportHooks || !SolutionMetaData.isImportHook(metaData))) {
          referencedModules.put(uuid,new RootObjectReference(name,uuid,metaData,releaseNumber));
          Solution sol=(Solution)developerRepository.getRootObject(metaData.getRootObjectId(),releaseNumber);
          loadObjectMetaDatas(sol.getModulesNames(),referencedModules,loadImportHooks);
        }
      }
 catch (      RemoteException e) {
        throw new RepositoryException(e);
      }
    }
  }
}",0.9889012208657048
143524,"public List<RootObjectReference> getActiveSolutionModuleMetaDatas(int solutionId) throws RepositoryException {
  Map<UUID,RootObjectReference> referencedModules=new HashMap<UUID,RootObjectReference>();
  try {
    Solution sol=(Solution)developerRepository.getActiveRootObject(solutionId);
    if (sol != null) {
      referencedModules.put(sol.getUUID(),new RootObjectReference(sol.getName(),sol.getUUID(),sol.getRootObjectMetaData(),sol.getReleaseNumber()));
      loadObjectMetaDatas(sol.getModulesNames(),referencedModules);
    }
  }
 catch (  Exception e) {
    throw new RepositoryException(e);
  }
  return new ArrayList<RootObjectReference>(referencedModules.values());
}","public List<RootObjectReference> getActiveSolutionModuleMetaDatas(int solutionId) throws RepositoryException {
  Map<UUID,RootObjectReference> referencedModules=new HashMap<UUID,RootObjectReference>();
  try {
    Solution sol=(Solution)developerRepository.getActiveRootObject(solutionId);
    if (sol != null) {
      referencedModules.put(sol.getUUID(),new RootObjectReference(sol.getName(),sol.getUUID(),sol.getRootObjectMetaData(),sol.getReleaseNumber()));
      loadObjectMetaDatas(sol.getModulesNames(),referencedModules,SolutionMetaData.isImportHook(sol.getSolutionMetaData()));
    }
  }
 catch (  Exception e) {
    throw new RepositoryException(e);
  }
  return new ArrayList<RootObjectReference>(referencedModules.values());
}",0.9597741707833451
143525,"public RepositoryHelper(IDeveloperRepository dr,boolean loadImportHooks){
  developerRepository=dr;
  this.loadImportHooks=loadImportHooks;
}","public RepositoryHelper(IDeveloperRepository dr){
  developerRepository=dr;
}",0.7064220183486238
143526,"/** 
 * @param metadata
 */
synchronized void add(RootObjectMetaData metaData){
  CacheRecord cacheRecord=new CacheRecord();
  cacheRecord.rootObjectMetaData=metaData;
  cacheRecord.rootObjects=new HashMap();
  rootObjectsById.put(new Integer(metaData.getRootObjectId()),cacheRecord);
  rootObjectsByName.put(new RootObjectKey(metaData.getName(),metaData.getObjectTypeId()),cacheRecord);
}","synchronized void add(RootObjectMetaData metaData,boolean allowUpdate){
  Integer intId=new Integer(metaData.getRootObjectId());
  CacheRecord cacheRecord=allowUpdate ? rootObjectsById.get(intId) : null;
  if (cacheRecord == null) {
    cacheRecord=new CacheRecord();
    cacheRecord.rootObjects=new HashMap<Integer,IRootObject>();
    rootObjectsById.put(intId,cacheRecord);
    rootObjectsByName.put(new RootObjectKey(metaData.getName(),metaData.getObjectTypeId()),cacheRecord);
  }
 else {
    for (    IRootObject ro : cacheRecord.rootObjects.values()) {
      ((AbstractRootObject)ro).setMetaData(metaData);
    }
  }
  cacheRecord.rootObjectMetaData=metaData;
}",0.4166666666666667
143527,"synchronized RootObjectMetaData[] getRootObjectMetaDatas() throws RepositoryException {
  RootObjectMetaData[] metaDatas=new RootObjectMetaData[rootObjectsById.size()];
  Iterator iterator=rootObjectsById.values().iterator();
  int i=0;
  while (iterator.hasNext()) {
    metaDatas[i++]=((CacheRecord)iterator.next()).rootObjectMetaData;
  }
  return metaDatas;
}","synchronized RootObjectMetaData[] getRootObjectMetaDatas() throws RepositoryException {
  RootObjectMetaData[] metaDatas=new RootObjectMetaData[rootObjectsById.size()];
  Iterator<CacheRecord> iterator=rootObjectsById.values().iterator();
  int i=0;
  while (iterator.hasNext()) {
    metaDatas[i++]=iterator.next().rootObjectMetaData;
  }
  return metaDatas;
}",0.9613259668508288
143528,"private void flushRootObjectMap(HashMap rootObjectMap) throws RepositoryException {
  Iterator iterator=rootObjectMap.values().iterator();
  while (iterator.hasNext()) {
    IRootObject rootObject=(IRootObject)iterator.next();
    ChangeHandler ch=rootObject.getChangeHandler();
    if (ch != null) {
      ch.rootObjectIsFlushed();
    }
    iterator.remove();
  }
}","private void flushRootObjectMap(HashMap<Integer,IRootObject> rootObjectMap) throws RepositoryException {
  Iterator<IRootObject> iterator=rootObjectMap.values().iterator();
  while (iterator.hasNext()) {
    IRootObject rootObject=iterator.next();
    ChangeHandler ch=rootObject.getChangeHandler();
    if (ch != null) {
      ch.rootObjectIsFlushed();
    }
    iterator.remove();
  }
}",0.937748344370861
143529,"synchronized RootObjectMetaData[] getRootObjectMetaDatasForType(int objectTypeId) throws RepositoryException {
  List list=new SortedList(NameComparator.INSTANCE);
  Iterator iterator=rootObjectsById.values().iterator();
  while (iterator.hasNext()) {
    RootObjectMetaData metaData=((CacheRecord)iterator.next()).rootObjectMetaData;
    if (metaData.getObjectTypeId() == objectTypeId) {
      list.add(metaData);
    }
  }
  RootObjectMetaData[] filtered=new RootObjectMetaData[list.size()];
  return (RootObjectMetaData[])list.toArray(filtered);
}","synchronized RootObjectMetaData[] getRootObjectMetaDatasForType(int objectTypeId) throws RepositoryException {
  List list=new SortedList(NameComparator.INSTANCE);
  Iterator<CacheRecord> iterator=rootObjectsById.values().iterator();
  while (iterator.hasNext()) {
    RootObjectMetaData metaData=iterator.next().rootObjectMetaData;
    if (metaData.getObjectTypeId() == objectTypeId) {
      list.add(metaData);
    }
  }
  RootObjectMetaData[] filtered=new RootObjectMetaData[list.size()];
  return (RootObjectMetaData[])list.toArray(filtered);
}",0.9744990892531876
143530,"synchronized void flushRootObject(int rootObjectId) throws RepositoryException {
  Integer key=new Integer(rootObjectId);
  CacheRecord cacheRecord=(CacheRecord)rootObjectsById.get(key);
  if (cacheRecord != null) {
    flushRootObjectMap(cacheRecord.rootObjects);
  }
}","synchronized void flushRootObject(int rootObjectId) throws RepositoryException {
  Integer key=new Integer(rootObjectId);
  CacheRecord cacheRecord=rootObjectsById.get(key);
  if (cacheRecord != null) {
    flushRootObjectMap(cacheRecord.rootObjects);
  }
}",0.9753320683111956
143531,"synchronized IRootObject getRootObject(int rootObjectId,int release) throws RepositoryException {
  CacheRecord cacheRecord=getCacheRecord(rootObjectId);
  if (cacheRecord == null) {
    return null;
  }
  if (release == 0) {
    release=cacheRecord.rootObjectMetaData.getActiveRelease();
  }
 else   if (release == -1) {
    release=cacheRecord.rootObjectMetaData.getLatestRelease();
  }
  Integer key=new Integer(release);
  IRootObject rootObject=(IRootObject)cacheRecord.rootObjects.get(key);
  if (rootObject == null) {
    rootObject=repository.loadRootObject(cacheRecord.rootObjectMetaData,release);
    cacheRecord.rootObjects.put(key,rootObject);
  }
  return rootObject;
}","synchronized IRootObject getRootObject(int rootObjectId,int release) throws RepositoryException {
  CacheRecord cacheRecord=getCacheRecord(rootObjectId);
  if (cacheRecord == null) {
    return null;
  }
  if (release == 0) {
    release=cacheRecord.rootObjectMetaData.getActiveRelease();
  }
 else   if (release == -1) {
    release=cacheRecord.rootObjectMetaData.getLatestRelease();
  }
  Integer key=new Integer(release);
  IRootObject rootObject=cacheRecord.rootObjects.get(key);
  if (rootObject == null) {
    rootObject=repository.loadRootObject(cacheRecord.rootObjectMetaData,release);
    cacheRecord.rootObjects.put(key,rootObject);
  }
  return rootObject;
}",0.9903774981495188
143532,"synchronized void removeRootObject(int rootObjectId) throws RepositoryException {
  Integer key=new Integer(rootObjectId);
  flushRootObject(rootObjectId);
  CacheRecord cacheRecord=(CacheRecord)rootObjectsById.get(key);
  if (cacheRecord != null) {
    rootObjectsById.remove(key);
    rootObjectsByName.remove(new RootObjectKey(cacheRecord.rootObjectMetaData.getName(),cacheRecord.rootObjectMetaData.getObjectTypeId()));
  }
}","synchronized void removeRootObject(int rootObjectId) throws RepositoryException {
  Integer key=new Integer(rootObjectId);
  flushRootObject(rootObjectId);
  CacheRecord cacheRecord=rootObjectsById.get(key);
  if (cacheRecord != null) {
    rootObjectsById.remove(key);
    rootObjectsByName.remove(new RootObjectKey(cacheRecord.rootObjectMetaData.getName(),cacheRecord.rootObjectMetaData.getObjectTypeId()));
  }
}",0.9845788849347568
143533,"/** 
 * Cache a new root object. THE ROOT OBJECT MUST CONTAIN VALID META DATA AND THE META DATA SHOULD HAVE ALREADY BEEN SAVED!
 * @param rootObject the new root object to add to the cache
 * @throws RepositoryException if the root object is already cached or does not have release 1
 */
private synchronized void cacheNewRootObject(IRootObject rootObject) throws RepositoryException {
  Integer key=new Integer(rootObject.getID());
  if (rootObjectsById.containsKey(key)) {
    throw new RepositoryException(""String_Node_Str"" + rootObjectsById + ""String_Node_Str"");
  }
  CacheRecord cacheRecord=new CacheRecord();
  cacheRecord.rootObjectMetaData=rootObject.getRootObjectMetaData();
  if (rootObject.getReleaseNumber() != 1) {
    throw new RepositoryException(""String_Node_Str"" + rootObject.getReleaseNumber());
  }
  cacheRecord.rootObjects=new HashMap();
  cacheRecord.rootObjects.put(new Integer(1),rootObject);
  rootObjectsById.put(key,cacheRecord);
  rootObjectsByName.put(new RootObjectKey(rootObject.getName(),rootObject.getTypeID()),cacheRecord);
}","/** 
 * Cache a new root object. THE ROOT OBJECT MUST CONTAIN VALID META DATA AND THE META DATA SHOULD HAVE ALREADY BEEN SAVED!
 * @param rootObject the new root object to add to the cache
 * @throws RepositoryException if the root object is already cached or does not have release 1
 */
private synchronized void cacheNewRootObject(IRootObject rootObject) throws RepositoryException {
  Integer key=new Integer(rootObject.getID());
  if (rootObjectsById.containsKey(key)) {
    throw new RepositoryException(""String_Node_Str"" + rootObjectsById + ""String_Node_Str"");
  }
  CacheRecord cacheRecord=new CacheRecord();
  cacheRecord.rootObjectMetaData=rootObject.getRootObjectMetaData();
  if (rootObject.getReleaseNumber() != 1) {
    throw new RepositoryException(""String_Node_Str"" + rootObject.getReleaseNumber());
  }
  cacheRecord.rootObjects=new HashMap<Integer,IRootObject>();
  cacheRecord.rootObjects.put(new Integer(1),rootObject);
  rootObjectsById.put(key,cacheRecord);
  rootObjectsByName.put(new RootObjectKey(rootObject.getName(),rootObject.getTypeID()),cacheRecord);
}",0.9901914992993928
143534,"synchronized void flush() throws RepositoryException {
  Iterator iterator=rootObjectsById.values().iterator();
  while (iterator.hasNext()) {
    CacheRecord cacheRecord=(CacheRecord)iterator.next();
    flushRootObjectMap(cacheRecord.rootObjects);
  }
}","synchronized void flush() throws RepositoryException {
  Iterator<CacheRecord> iterator=rootObjectsById.values().iterator();
  while (iterator.hasNext()) {
    CacheRecord cacheRecord=iterator.next();
    flushRootObjectMap(cacheRecord.rootObjects);
  }
}",0.9490196078431372
143535,"RootObjectCache(AbstractRepository repository,Collection metaDatas){
  this.repository=repository;
  rootObjectsById=new HashMap();
  rootObjectsByName=new HashMap();
  Iterator iterator=metaDatas.iterator();
  while (iterator.hasNext()) {
    add((RootObjectMetaData)iterator.next());
  }
}","RootObjectCache(AbstractRepository repository,Collection metaDatas){
  this.repository=repository;
  rootObjectsById=new HashMap<Integer,CacheRecord>();
  rootObjectsByName=new HashMap();
  Iterator iterator=metaDatas.iterator();
  while (iterator.hasNext()) {
    add((RootObjectMetaData)iterator.next(),false);
  }
}",0.955665024630542
143536,"synchronized void flushRootObjectRelease(int rootObjectId,int release) throws RepositoryException {
  CacheRecord cacheRecord=(CacheRecord)rootObjectsById.get(new Integer(rootObjectId));
  if (cacheRecord != null) {
    if (release == 0) {
      release=cacheRecord.rootObjectMetaData.getActiveRelease();
    }
 else     if (release == -1) {
      release=cacheRecord.rootObjectMetaData.getLatestRelease();
    }
    Integer key=new Integer(release);
    IRootObject rootObject=(IRootObject)cacheRecord.rootObjects.get(key);
    if (rootObject != null) {
      rootObject.getChangeHandler().rootObjectIsFlushed();
      cacheRecord.rootObjects.remove(key);
    }
  }
}","synchronized void flushRootObjectRelease(int rootObjectId,int release) throws RepositoryException {
  CacheRecord cacheRecord=rootObjectsById.get(new Integer(rootObjectId));
  if (cacheRecord != null) {
    if (release == 0) {
      release=cacheRecord.rootObjectMetaData.getActiveRelease();
    }
 else     if (release == -1) {
      release=cacheRecord.rootObjectMetaData.getLatestRelease();
    }
    Integer key=new Integer(release);
    IRootObject rootObject=cacheRecord.rootObjects.get(key);
    if (rootObject != null) {
      rootObject.getChangeHandler().rootObjectIsFlushed();
      cacheRecord.rootObjects.remove(key);
    }
  }
}",0.9801526717557252
143537,"public synchronized boolean isRootObjectCached(String name,int objectTypeId,int release) throws RepositoryException {
  RootObjectMetaData rod=getRootObjectMetaData(name,objectTypeId);
  if (rod != null) {
    CacheRecord cacheRecord=getCacheRecord(rod.getRootObjectId());
    if (cacheRecord != null) {
      if (release == 0) {
        release=cacheRecord.rootObjectMetaData.getActiveRelease();
      }
 else       if (release == -1) {
        release=cacheRecord.rootObjectMetaData.getLatestRelease();
      }
      Integer key=new Integer(release);
      IRootObject rootObject=(IRootObject)cacheRecord.rootObjects.get(key);
      return rootObject != null;
    }
  }
  return false;
}","public synchronized boolean isRootObjectCached(String name,int objectTypeId,int release) throws RepositoryException {
  RootObjectMetaData rod=getRootObjectMetaData(name,objectTypeId);
  if (rod != null) {
    CacheRecord cacheRecord=getCacheRecord(rod.getRootObjectId());
    if (cacheRecord != null) {
      if (release == 0) {
        release=cacheRecord.rootObjectMetaData.getActiveRelease();
      }
 else       if (release == -1) {
        release=cacheRecord.rootObjectMetaData.getLatestRelease();
      }
      Integer key=new Integer(release);
      IRootObject rootObject=cacheRecord.rootObjects.get(key);
      return rootObject != null;
    }
  }
  return false;
}",0.9904761904761904
143538,"@Override public boolean isCellEditable(int row,int column){
  boolean isCellEditable=super.isCellEditable(row,column);
  if (isCellEditable) {
    Object o=getCellEditor(row,column);
    if (o instanceof CellAdapter && ((CellAdapter)o).getEditor() instanceof ISupportOnRenderCallback) {
      Object value=getValueAt(row,column);
      boolean isSelected=isCellSelected(row,column);
      Component c=((CellAdapter)o).getTableCellEditorComponent(this,value,isSelected,row,column);
      if (c instanceof IScriptableProvider) {
        IScriptable scriptable=((IScriptableProvider)c).getScriptObject();
        if (scriptable instanceof ISupportOnRenderCallback) {
          RenderEventExecutor renderEventExecutor=((ISupportOnRenderCallback)scriptable).getRenderEventExecutor();
          if (renderEventExecutor != null) {
            renderEventExecutor.fireOnRender(false);
            isCellEditable=c.isEnabled();
          }
        }
      }
    }
  }
  return isCellEditable;
}","@Override public boolean isCellEditable(int row,int column){
  boolean isCellEditable=super.isCellEditable(row,column);
  if (isCellEditable) {
    Object o=getCellEditor(row,column);
    if (o instanceof CellAdapter && ((CellAdapter)o).getEditor() instanceof IScriptableProvider && ((IScriptableProvider)((CellAdapter)o).getEditor()).getScriptObject() instanceof ISupportOnRenderCallback) {
      Object value=getValueAt(row,column);
      boolean isSelected=isCellSelected(row,column);
      Component c=((CellAdapter)o).getTableCellEditorComponent(this,value,isSelected,row,column);
      if (c instanceof IScriptableProvider) {
        IScriptable scriptable=((IScriptableProvider)c).getScriptObject();
        if (scriptable instanceof ISupportOnRenderCallback) {
          RenderEventExecutor renderEventExecutor=((ISupportOnRenderCallback)scriptable).getRenderEventExecutor();
          if (renderEventExecutor != null) {
            renderEventExecutor.fireOnRender(false);
            isCellEditable=c.isEnabled();
          }
        }
      }
    }
  }
  return isCellEditable;
}",0.9499036608863198
143539,"/** 
 * @param form
 */
public void deletePersistCopy(AbstractBase persist,boolean revertToOriginal){
  if (mainSolution == null && loginFlattenedSolution != null) {
    loginFlattenedSolution.deletePersistCopy(persist,revertToOriginal);
    return;
  }
  if (copySolution != null) {
    copySolution.removeChild(persist);
  }
  flush(persist);
  if (persist instanceof Form) {
    refreshSuperForms(persist);
  }
  AbstractBase realPersist=persist.getRuntimeProperty(CLONE_PROPERTY);
  boolean exists=realPersist != null || getAllObjectsAsList().indexOf(persist) != -1;
  if (!exists && revertToOriginal) {
    throw new RuntimeException(""String_Node_Str"" + persist + ""String_Node_Str"");
  }
 else   if (exists && !revertToOriginal) {
    allObjectscache=null;
    if (realPersist != null) {
      removedPersist.add(realPersist);
    }
 else {
      removedPersist.add(persist);
    }
  }
}","/** 
 * @param form
 */
public void deletePersistCopy(AbstractBase persist,boolean revertToOriginal){
  if (mainSolution == null && loginFlattenedSolution != null) {
    loginFlattenedSolution.deletePersistCopy(persist,revertToOriginal);
    return;
  }
  if (copySolution != null) {
    copySolution.removeChild(persist);
  }
  flush(persist);
  if (persist instanceof Form) {
    refreshSuperForms(persist);
  }
  AbstractBase realPersist=persist.getRuntimeProperty(CLONE_PROPERTY);
  boolean exists=realPersist != null || getAllObjectsAsList().indexOf(persist) != -1;
  if (!exists && revertToOriginal) {
    throw new RuntimeException(""String_Node_Str"" + persist + ""String_Node_Str"");
  }
 else   if (exists && !revertToOriginal) {
    if (realPersist != null) {
      removedPersist.add(realPersist);
      flush(realPersist);
    }
 else {
      removedPersist.add(persist);
    }
    flush(persist);
  }
}",0.9600886917960088
143540,"/** 
 * @param name
 * @return
 */
public Form revertForm(String name){
  Form form=getForm(name);
  if (form == null) {
    for (    IPersist persist : removedPersist) {
      if (persist instanceof Form && name.equals(((Form)persist).getName())) {
        removedPersist.remove(persist);
        flush(persist);
        form=getForm(name);
        break;
      }
    }
  }
  if (form != null) {
    deletePersistCopy(form,true);
    form=getForm(name);
    registerChangedForm(form);
  }
  return form;
}","public Form revertForm(String name){
  Form form=getForm(name);
  if (form == null) {
    for (    IPersist persist : removedPersist) {
      if (persist instanceof Form && name.equals(((Form)persist).getName())) {
        removedPersist.remove(persist);
        flush(persist);
        form=getForm(name);
        break;
      }
    }
  }
  if (form != null) {
    deletePersistCopy(form,true);
    form=getForm(name);
    registerChangedForm(form);
  }
  return form;
}",0.9641760491299898
143541,"private void setUpComponent(Component comp,IRecordInternal record,Object compColor,Object fgColor,Object compFont,Object compBorder,int visibleRowIndex){
  if (tabIndex < 0) {
    TabIndexHelper.setUpTabIndexAttributeModifier(comp,tabIndex);
  }
 else {
    if (elementTabIndexes.size() > 0) {
      Integer idx=elementTabIndexes.get(cellToElement.get(comp));
      if (idx == null) {
        TabIndexHelper.setUpTabIndexAttributeModifier(comp,ISupportWebTabSeq.SKIP);
      }
 else {
        TabIndexHelper.setUpTabIndexAttributeModifier(comp,tabIndex + 1 + visibleRowIndex * elementTabIndexes.size() + idx.intValue());
      }
    }
 else {
      TabIndexHelper.setUpTabIndexAttributeModifier(comp,tabIndex + 1);
    }
  }
  if (compColor != null) {
    setParentBGcolor(comp,compColor);
  }
  WebCellBasedView.this.applyStyleOnComponent(comp,compColor,fgColor,compFont,compBorder);
  if (scriptable.isReadOnly() && validationEnabled && comp instanceof IScriptableProvider&& ((IScriptableProvider)comp).getScriptObject() instanceof HasRuntimeReadOnly) {
    ((HasRuntimeReadOnly)((IScriptableProvider)comp).getScriptObject()).setReadOnly(true);
  }
  if (!isEnabled() && comp instanceof IComponent) {
    ((IComponent)comp).setComponentEnabled(false);
  }
  if (comp instanceof IDisplayRelatedData && record != null) {
    ((IDisplayRelatedData)comp).setRecord(record,true);
  }
  MarkupContainer parent=comp.getParent();
  if (parent instanceof CellContainer) {
    parent.setVisible(comp.isVisible());
  }
  if (compBorder != null) {
    IPersist elem=WebCellBasedView.this.cellToElement.get(comp);
    Object colId=WebCellBasedView.this.elementToColumnIdentifierComponent.get(elem);
    final int idx=WebCellBasedView.this.visibleColummIdentifierComponents.indexOf(colId);
    final int[] borderWidth=new int[]{0,0};
    Border cb=ComponentFactoryHelper.createBorder((String)compBorder);
    if (cb != null) {
      int defaultLeftPadding;
      int defaultRightPadding;
switch (elem.getTypeID()) {
case IRepository.FIELDS:
        Insets fieldMargin=null;
      if (comp instanceof IFieldComponent) {
        fieldMargin=((IFieldComponent)comp).getMargin();
      }
    defaultLeftPadding=fieldMargin != null ? fieldMargin.left : TemplateGenerator.DEFAULT_FIELD_PADDING.left;
  defaultRightPadding=fieldMargin != null ? fieldMargin.right : TemplateGenerator.DEFAULT_FIELD_PADDING.right;
break;
case IRepository.GRAPHICALCOMPONENTS:
Insets gcMargin=null;
if (elem instanceof GraphicalComponent) {
gcMargin=((GraphicalComponent)elem).getMargin();
}
defaultLeftPadding=gcMargin != null ? gcMargin.left : TemplateGenerator.DEFAULT_LABEL_PADDING.left;
defaultRightPadding=gcMargin != null ? gcMargin.right : TemplateGenerator.DEFAULT_LABEL_PADDING.right;
break;
default :
defaultLeftPadding=0;
defaultRightPadding=0;
}
Insets borderInsets=ComponentFactoryHelper.getBorderInsetsForNoComponent(cb);
borderWidth[0]=borderInsets.left + defaultLeftPadding;
borderWidth[1]=borderInsets.right + defaultRightPadding;
}
}
}","private void setUpComponent(Component comp,IRecordInternal record,Object compColor,Object fgColor,Object compFont,Object listItemBorder,int visibleRowIndex){
  if (tabIndex < 0) {
    TabIndexHelper.setUpTabIndexAttributeModifier(comp,tabIndex);
  }
 else {
    if (elementTabIndexes.size() > 0) {
      Integer idx=elementTabIndexes.get(cellToElement.get(comp));
      if (idx == null) {
        TabIndexHelper.setUpTabIndexAttributeModifier(comp,ISupportWebTabSeq.SKIP);
      }
 else {
        TabIndexHelper.setUpTabIndexAttributeModifier(comp,tabIndex + 1 + visibleRowIndex * elementTabIndexes.size() + idx.intValue());
      }
    }
 else {
      TabIndexHelper.setUpTabIndexAttributeModifier(comp,tabIndex + 1);
    }
  }
  if (compColor != null) {
    setParentBGcolor(comp,compColor);
  }
  WebCellBasedView.this.applyStyleOnComponent(comp,compColor,fgColor,compFont,listItemBorder);
  if (scriptable.isReadOnly() && validationEnabled && comp instanceof IScriptableProvider&& ((IScriptableProvider)comp).getScriptObject() instanceof HasRuntimeReadOnly) {
    ((HasRuntimeReadOnly)((IScriptableProvider)comp).getScriptObject()).setReadOnly(true);
  }
  if (!isEnabled() && comp instanceof IComponent) {
    ((IComponent)comp).setComponentEnabled(false);
  }
  if (comp instanceof IDisplayRelatedData && record != null) {
    ((IDisplayRelatedData)comp).setRecord(record,true);
  }
  MarkupContainer parent=comp.getParent();
  if (parent instanceof CellContainer) {
    parent.setVisible(comp.isVisible());
  }
}",0.6629907366563741
143542,"private Object getListItemBorder(ListItem<IRecordInternal> listItem,boolean isSelected){
  return getStyleAttributeForListItem(listItem,isSelected,ISupportRowStyling.ATTRIBUTE.BORDER,false);
}","private String getListItemBorder(ListItem<IRecordInternal> listItem,boolean isSelected){
  return getStyleAttributeForListItem(listItem,isSelected,ISupportRowStyling.ATTRIBUTE.BORDER,false);
}",0.9739583333333334
143543,"public String getRowSelectionScript(boolean allCurrentPageRows){
  if (currentData == null)   return null;
  List<Integer> indexToUpdate;
  if (!hasOnRender() && (bgColorScript != null || (getRowSelectedStyle() != null && getRowSelectedStyle().getAttributeCount() > 0)) && (indexToUpdate=getIndexToUpdate(allCurrentPageRows)) != null) {
    int firstRow=table.isPageableMode() ? table.getCurrentPage() * table.getRowsPerPage() : table.getStartIndex();
    int lastRow=firstRow + table.getViewSize() - 1;
    int[] newSelectedIndexes=getSelectedIndexes();
    AppendingStringBuffer sab=new AppendingStringBuffer();
    for (    int rowIdx : indexToUpdate) {
      ArrayList<String> bgRuntimeColorjsArray=new ArrayList<String>();
      ArrayList<String> fgRuntimeColorjsArray=new ArrayList<String>();
      ArrayList<String> fstyleJsAray=new ArrayList<String>();
      ArrayList<String> fweightJsAray=new ArrayList<String>();
      ArrayList<String> fsizeJsAray=new ArrayList<String>();
      ArrayList<String> ffamilyJsAray=new ArrayList<String>();
      ArrayList<String> bstyleJsAray=new ArrayList<String>();
      ArrayList<String> bwidthJsAray=new ArrayList<String>();
      ArrayList<String> bcolorJsAray=new ArrayList<String>();
      if (rowIdx >= firstRow && rowIdx <= lastRow) {
        ListItem<IRecordInternal> selectedListItem=(ListItem<IRecordInternal>)table.get(Integer.toString(rowIdx));
        if (selectedListItem != null) {
          String selectedId=selectedListItem.getMarkupId();
          boolean isSelected=Arrays.binarySearch(newSelectedIndexes,rowIdx) >= 0;
          if (bgColorScript == null && !isSelected && (getRowOddStyle().getAttributeCount() == 0) && (getRowEvenStyle().getAttributeCount() == 0)) {
            Iterable<? extends Component> it=Utils.iterate(selectedListItem.iterator());
            for (            Component c : it) {
              if (c instanceof CellContainer) {
                CellContainer cell=(CellContainer)c;
                Component cellContents=cell.iterator().next();
                if (cellContents instanceof IScriptableProvider) {
                  IScriptable scriptableComponent=((IScriptableProvider)cellContents).getScriptObject();
                  if (scriptableComponent instanceof IRuntimeComponent) {
                    IRuntimeComponent runtimeComponent=(IRuntimeComponent)scriptableComponent;
                    bgRuntimeColorjsArray.add(runtimeComponentStyleAttributes.get(runtimeComponent).get(RenderableWrapper.PROPERTY_BGCOLOR));
                    fgRuntimeColorjsArray.add(runtimeComponentStyleAttributes.get(runtimeComponent).get(RenderableWrapper.PROPERTY_FGCOLOR));
                    String fontStyle=runtimeComponentStyleAttributes.get(runtimeComponent).get(RenderableWrapper.PROPERTY_FONT);
                    StringBuilder fstyle=new StringBuilder(""String_Node_Str""), fweight=new StringBuilder(""String_Node_Str""), fsize=new StringBuilder(""String_Node_Str""), ffamily=new StringBuilder(""String_Node_Str"");
                    splitFontStyle(fontStyle,fstyle,fweight,fsize,ffamily);
                    fstyleJsAray.add(fstyle.toString());
                    fweightJsAray.add(fweight.toString());
                    fsizeJsAray.add(fsize.toString());
                    ffamilyJsAray.add(ffamily.toString());
                    String borderStyle=runtimeComponentStyleAttributes.get(runtimeComponent).get(RenderableWrapper.PROPERTY_BORDER);
                    StringBuilder bstyle=new StringBuilder(""String_Node_Str""), bwidth=new StringBuilder(""String_Node_Str""), bcolor=new StringBuilder(""String_Node_Str"");
                    splitBorderStyle(borderStyle,bstyle,bwidth,bcolor);
                    bstyleJsAray.add(bstyle.toString());
                    bwidthJsAray.add(bwidth.toString());
                    bcolorJsAray.add(bcolor.toString());
                  }
                }
              }
            }
          }
          Object selectedColor=null, selectedFgColor=null, selectedFont=null, selectedBorder=null;
          selectedColor=getListItemBgColor(selectedListItem,isSelected,true);
          if (!isListViewMode()) {
            selectedFgColor=getListItemFgColor(selectedListItem,isSelected,true);
            selectedFont=getListItemFont(selectedListItem,isSelected);
            selectedBorder=getListItemBorder(selectedListItem,isSelected);
          }
          selectedColor=(selectedColor == null ? ""String_Node_Str"" : selectedColor.toString());
          selectedFgColor=(selectedFgColor == null) ? ""String_Node_Str"" : selectedFgColor.toString();
          StringBuilder fstyle=new StringBuilder(""String_Node_Str""), fweight=new StringBuilder(""String_Node_Str""), fsize=new StringBuilder(""String_Node_Str""), ffamily=new StringBuilder(""String_Node_Str"");
          splitFontStyle(selectedFont,fstyle,fweight,fsize,ffamily);
          StringBuilder bstyle=new StringBuilder(""String_Node_Str""), bwidth=new StringBuilder(""String_Node_Str""), bcolor=new StringBuilder(""String_Node_Str"");
          splitBorderStyle(selectedBorder,bstyle,bwidth,bcolor);
          if (bgColorScript == null && !isSelected && (getRowOddStyle().getAttributeCount() == 0) && (getRowEvenStyle().getAttributeCount() == 0) && !isListViewMode()) {
            sab.append(""String_Node_Str"").append(selectedId).append(""String_Node_Str"").append(toJsArrayString(bgRuntimeColorjsArray,""String_Node_Str"")).append(""String_Node_Str"").append(toJsArrayString(fgRuntimeColorjsArray,""String_Node_Str"")).append(""String_Node_Str"").append(toJsArrayString(fstyleJsAray,""String_Node_Str"")).append(""String_Node_Str"").append(toJsArrayString(fweightJsAray,""String_Node_Str"")).append(""String_Node_Str"").append(toJsArrayString(fsizeJsAray,""String_Node_Str"")).append(""String_Node_Str"").append(toJsArrayString(ffamilyJsAray,""String_Node_Str"")).append(""String_Node_Str"").append(toJsArrayString(bstyleJsAray,""String_Node_Str"")).append(""String_Node_Str"").append(toJsArrayString(bwidthJsAray,""String_Node_Str"")).append(""String_Node_Str"").append(toJsArrayString(bcolorJsAray,""String_Node_Str"")).append(""String_Node_Str"").append(isListViewMode()).append(""String_Node_Str"");
          }
 else {
            sab.append(""String_Node_Str"").append(selectedId).append(""String_Node_Str"").append(selectedColor).append(""String_Node_Str"").append(selectedFgColor).append(""String_Node_Str"").append(fstyle).append(""String_Node_Str"").append(fweight).append(""String_Node_Str"").append(fsize).append(""String_Node_Str"").append(ffamily).append(""String_Node_Str"").append(bstyle).append(""String_Node_Str"").append(bwidth).append(""String_Node_Str"").append(bcolor).append(""String_Node_Str"").append(isListViewMode()).append(""String_Node_Str"");
          }
        }
      }
    }
    String rowSelectionScript=sab.toString();
    if (rowSelectionScript.length() > 0)     return rowSelectionScript;
  }
  return null;
}","public String getRowSelectionScript(boolean allCurrentPageRows){
  if (currentData == null)   return null;
  List<Integer> indexToUpdate;
  if (!hasOnRender() && (bgColorScript != null || (getRowSelectedStyle() != null && getRowSelectedStyle().getAttributeCount() > 0)) && (indexToUpdate=getIndexToUpdate(allCurrentPageRows)) != null) {
    int firstRow=table.isPageableMode() ? table.getCurrentPage() * table.getRowsPerPage() : table.getStartIndex();
    int lastRow=firstRow + table.getViewSize() - 1;
    int[] newSelectedIndexes=getSelectedIndexes();
    AppendingStringBuffer sab=new AppendingStringBuffer();
    for (    int rowIdx : indexToUpdate) {
      ArrayList<String> bgRuntimeColorjsArray=new ArrayList<String>();
      ArrayList<String> fgRuntimeColorjsArray=new ArrayList<String>();
      ArrayList<String> fstyleJsAray=new ArrayList<String>();
      ArrayList<String> fweightJsAray=new ArrayList<String>();
      ArrayList<String> fsizeJsAray=new ArrayList<String>();
      ArrayList<String> ffamilyJsAray=new ArrayList<String>();
      ArrayList<String> bstyleJsAray=new ArrayList<String>();
      ArrayList<String> bwidthJsAray=new ArrayList<String>();
      ArrayList<String> bcolorJsAray=new ArrayList<String>();
      if (rowIdx >= firstRow && rowIdx <= lastRow) {
        ListItem<IRecordInternal> selectedListItem=(ListItem<IRecordInternal>)table.get(Integer.toString(rowIdx));
        if (selectedListItem != null) {
          String selectedId=selectedListItem.getMarkupId();
          boolean isSelected=Arrays.binarySearch(newSelectedIndexes,rowIdx) >= 0;
          if (bgColorScript == null && !isSelected && (getRowOddStyle().getAttributeCount() == 0) && (getRowEvenStyle().getAttributeCount() == 0)) {
            Iterable<? extends Component> it=Utils.iterate(selectedListItem.iterator());
            for (            Component c : it) {
              if (c instanceof CellContainer) {
                CellContainer cell=(CellContainer)c;
                Component cellContents=cell.iterator().next();
                if (cellContents instanceof IScriptableProvider) {
                  IScriptable scriptableComponent=((IScriptableProvider)cellContents).getScriptObject();
                  if (scriptableComponent instanceof IRuntimeComponent) {
                    IRuntimeComponent runtimeComponent=(IRuntimeComponent)scriptableComponent;
                    bgRuntimeColorjsArray.add(runtimeComponentStyleAttributes.get(runtimeComponent).get(RenderableWrapper.PROPERTY_BGCOLOR));
                    fgRuntimeColorjsArray.add(runtimeComponentStyleAttributes.get(runtimeComponent).get(RenderableWrapper.PROPERTY_FGCOLOR));
                    String fontStyle=runtimeComponentStyleAttributes.get(runtimeComponent).get(RenderableWrapper.PROPERTY_FONT);
                    StringBuilder fstyle=new StringBuilder(""String_Node_Str""), fweight=new StringBuilder(""String_Node_Str""), fsize=new StringBuilder(""String_Node_Str""), ffamily=new StringBuilder(""String_Node_Str"");
                    splitFontStyle(fontStyle,fstyle,fweight,fsize,ffamily);
                    fstyleJsAray.add(fstyle.toString());
                    fweightJsAray.add(fweight.toString());
                    fsizeJsAray.add(fsize.toString());
                    ffamilyJsAray.add(ffamily.toString());
                    String borderStyle=runtimeComponentStyleAttributes.get(runtimeComponent).get(RenderableWrapper.PROPERTY_BORDER);
                    StringBuilder bstyle=new StringBuilder(""String_Node_Str""), bwidth=new StringBuilder(""String_Node_Str""), bcolor=new StringBuilder(""String_Node_Str"");
                    splitBorderStyle(borderStyle,bstyle,bwidth,bcolor);
                    bstyleJsAray.add(bstyle.toString());
                    bwidthJsAray.add(bwidth.toString());
                    bcolorJsAray.add(bcolor.toString());
                  }
                }
              }
            }
          }
          String selectedColor=null, selectedFgColor=null, selectedFont=null, selectedBorder=null;
          selectedColor=getListItemBgColor(selectedListItem,isSelected,true);
          if (!isListViewMode()) {
            selectedFgColor=getListItemFgColor(selectedListItem,isSelected,true);
            selectedFont=getListItemFont(selectedListItem,isSelected);
            selectedBorder=getListItemBorder(selectedListItem,isSelected);
          }
          selectedColor=(selectedColor == null ? ""String_Node_Str"" : selectedColor.toString());
          selectedFgColor=(selectedFgColor == null) ? ""String_Node_Str"" : selectedFgColor.toString();
          StringBuilder fstyle=new StringBuilder(""String_Node_Str""), fweight=new StringBuilder(""String_Node_Str""), fsize=new StringBuilder(""String_Node_Str""), ffamily=new StringBuilder(""String_Node_Str"");
          splitFontStyle(selectedFont,fstyle,fweight,fsize,ffamily);
          StringBuilder bstyle=new StringBuilder(""String_Node_Str""), bwidth=new StringBuilder(""String_Node_Str""), bcolor=new StringBuilder(""String_Node_Str"");
          splitBorderStyle(selectedBorder,bstyle,bwidth,bcolor);
          if (bgColorScript == null && !isSelected && (getRowOddStyle().getAttributeCount() == 0) && (getRowEvenStyle().getAttributeCount() == 0) && !isListViewMode()) {
            sab.append(""String_Node_Str"").append(selectedId).append(""String_Node_Str"").append(toJsArrayString(bgRuntimeColorjsArray,""String_Node_Str"")).append(""String_Node_Str"").append(toJsArrayString(fgRuntimeColorjsArray,""String_Node_Str"")).append(""String_Node_Str"").append(toJsArrayString(fstyleJsAray,""String_Node_Str"")).append(""String_Node_Str"").append(toJsArrayString(fweightJsAray,""String_Node_Str"")).append(""String_Node_Str"").append(toJsArrayString(fsizeJsAray,""String_Node_Str"")).append(""String_Node_Str"").append(toJsArrayString(ffamilyJsAray,""String_Node_Str"")).append(""String_Node_Str"").append(toJsArrayString(bstyleJsAray,""String_Node_Str"")).append(""String_Node_Str"").append(toJsArrayString(bwidthJsAray,""String_Node_Str"")).append(""String_Node_Str"").append(toJsArrayString(bcolorJsAray,""String_Node_Str"")).append(""String_Node_Str"").append(isListViewMode()).append(""String_Node_Str"");
          }
 else {
            sab.append(""String_Node_Str"").append(selectedId).append(""String_Node_Str"").append(selectedColor).append(""String_Node_Str"").append(selectedFgColor).append(""String_Node_Str"").append(fstyle).append(""String_Node_Str"").append(fweight).append(""String_Node_Str"").append(fsize).append(""String_Node_Str"").append(ffamily).append(""String_Node_Str"").append(bstyle).append(""String_Node_Str"").append(bwidth).append(""String_Node_Str"").append(bcolor).append(""String_Node_Str"").append(isListViewMode()).append(""String_Node_Str"");
          }
        }
      }
    }
    String rowSelectionScript=sab.toString();
    if (rowSelectionScript.length() > 0)     return rowSelectionScript;
  }
  return null;
}",0.999126383226558
143544,"private Object getListItemBgColor(ListItem<IRecordInternal> listItem,boolean isSelected,boolean asInlineCssString){
  Object color=null;
  final IRecordInternal rec=listItem.getModelObject();
  String rowBGColorProvider=getRowBGColorScript();
  Row rawData=null;
  if (rec != null && (rawData=rec.getRawData()) != null) {
    color=getStyleAttributeForListItem(listItem,isSelected,ISupportRowStyling.ATTRIBUTE.BGCOLOR,asInlineCssString);
    if (rowBGColorProvider != null) {
      String type=null;
      String cellName=null;
      if (rawData.containsCalculation(rowBGColorProvider)) {
        Record.VALIDATE_CALCS.set(Boolean.FALSE);
        try {
          color=rec.getParentFoundSet().getCalculationValue(rec,rowBGColorProvider,Utils.arrayMerge(new Object[]{new Integer(listItem.getIndex()),new Boolean(isSelected),type,cellName,Boolean.FALSE},Utils.parseJSExpressions(getRowBGColorArgs())),null);
        }
  finally {
          Record.VALIDATE_CALCS.set(null);
        }
      }
 else {
        try {
          FormController currentForm=dal.getFormController();
          color=currentForm.executeFunction(rowBGColorProvider,Utils.arrayMerge(new Object[]{new Integer(listItem.getIndex()),new Boolean(isSelected),type,cellName,currentForm.getName(),rec,Boolean.FALSE},Utils.parseJSExpressions(getRowBGColorArgs())),false,null,true,null);
        }
 catch (        Exception ex) {
          Debug.error(ex);
        }
      }
      if (asInlineCssString) {
        String bgColor=null;
        if (color instanceof String)         bgColor=(String)color;
 else         if (color instanceof Color)         bgColor=PersistHelper.createColorString((Color)color);
        if (bgColor != null)         color=new StringBuilder(CSS.Attribute.BACKGROUND_COLOR.toString()).append(':').append(color).append(';').toString();
      }
    }
  }
  return color;
}","private String getListItemBgColor(ListItem<IRecordInternal> listItem,boolean isSelected,boolean asInlineCssString){
  String color=null;
  final IRecordInternal rec=listItem.getModelObject();
  String rowBGColorProvider=getRowBGColorScript();
  Row rawData=null;
  if (rec != null && (rawData=rec.getRawData()) != null) {
    color=getStyleAttributeForListItem(listItem,isSelected,ISupportRowStyling.ATTRIBUTE.BGCOLOR,asInlineCssString);
    if (rowBGColorProvider != null) {
      Object c=color;
      String type=null;
      String cellName=null;
      if (rawData.containsCalculation(rowBGColorProvider)) {
        Record.VALIDATE_CALCS.set(Boolean.FALSE);
        try {
          c=rec.getParentFoundSet().getCalculationValue(rec,rowBGColorProvider,Utils.arrayMerge(new Object[]{new Integer(listItem.getIndex()),new Boolean(isSelected),type,cellName,Boolean.FALSE},Utils.parseJSExpressions(getRowBGColorArgs())),null);
        }
  finally {
          Record.VALIDATE_CALCS.set(null);
        }
      }
 else {
        try {
          FormController currentForm=dal.getFormController();
          c=currentForm.executeFunction(rowBGColorProvider,Utils.arrayMerge(new Object[]{new Integer(listItem.getIndex()),new Boolean(isSelected),type,cellName,currentForm.getName(),rec,Boolean.FALSE},Utils.parseJSExpressions(getRowBGColorArgs())),false,null,true,null);
        }
 catch (        Exception ex) {
          Debug.error(ex);
        }
      }
      if (asInlineCssString) {
        String bgColor=null;
        if (c instanceof String)         bgColor=(String)c;
 else         if (c instanceof Color)         bgColor=PersistHelper.createColorString((Color)c);
        if (bgColor != null)         color=new StringBuilder(CSS.Attribute.BACKGROUND_COLOR.toString()).append(':').append(color).append(';').toString();
      }
    }
  }
  return color;
}",0.9811422413793104
143545,"private Object getListItemFont(ListItem<IRecordInternal> listItem,boolean isSelected){
  return getStyleAttributeForListItem(listItem,isSelected,ISupportRowStyling.ATTRIBUTE.FONT,false);
}","private String getListItemFont(ListItem<IRecordInternal> listItem,boolean isSelected){
  return getStyleAttributeForListItem(listItem,isSelected,ISupportRowStyling.ATTRIBUTE.FONT,false);
}",0.973404255319149
143546,"private Object getStyleAttributeForListItem(ListItem<IRecordInternal> listItem,boolean isSelected,ISupportRowStyling.ATTRIBUTE rowStyleAttribute,boolean asInlineCSSString){
  Object listItemAttrValue=null;
  final IRecordInternal rec=listItem.getModelObject();
  if (rec != null && rec.getRawData() != null) {
    IStyleRule style=isSelected ? getRowSelectedStyle() : null;
    if (style != null && style.getAttributeCount() == 0)     style=null;
    if (style == null) {
      style=(listItem.getIndex() % 2 == 0) ? getRowOddStyle() : getRowEvenStyle();
    }
    if (asInlineCSSString) {
      listItemAttrValue=getStyleAttributeString(style,rowStyleAttribute);
    }
 else {
      listItemAttrValue=getStyleAttributeValue(style,rowStyleAttribute);
    }
  }
  return listItemAttrValue;
}","private String getStyleAttributeForListItem(ListItem<IRecordInternal> listItem,boolean isSelected,ISupportRowStyling.ATTRIBUTE rowStyleAttribute,boolean asInlineCSSString){
  String listItemAttrValue=null;
  final IRecordInternal rec=listItem.getModelObject();
  if (rec != null && rec.getRawData() != null) {
    IStyleRule style=isSelected ? getRowSelectedStyle() : null;
    if (style != null && style.getAttributeCount() == 0)     style=null;
    if (style == null) {
      style=(listItem.getIndex() % 2 == 0) ? getRowOddStyle() : getRowEvenStyle();
    }
    if (asInlineCSSString) {
      listItemAttrValue=getStyleAttributeString(style,rowStyleAttribute);
    }
 else {
      listItemAttrValue=getStyleAttributeValue(style,rowStyleAttribute);
    }
  }
  return listItemAttrValue;
}",0.9848101265822784
143547,"/** 
 * @param borderStyle
 * @param bstyle
 * @param bwidth
 * @param bcolor
 */
private void splitBorderStyle(Object borderStyle,StringBuilder bstyle,StringBuilder bwidth,StringBuilder bcolor){
  if (borderStyle != null) {
    Properties borderProperties=new Properties();
    ComponentFactoryHelper.createBorderCSSProperties(borderStyle.toString(),borderProperties);
    bstyle.append(borderProperties.getProperty(""String_Node_Str""));
    if (bstyle.length() < 1)     bstyle.append(""String_Node_Str"");
    bwidth.append(borderProperties.getProperty(""String_Node_Str""));
    bcolor.append(borderProperties.getProperty(""String_Node_Str""));
    if (bcolor.length() < 1) {
      bcolor.append(borderProperties.getProperty(""String_Node_Str"",""String_Node_Str""));
    }
 else {
      bcolor.append(getFirstToken(bcolor.toString()));
    }
  }
}","private void splitBorderStyle(Object borderStyle,StringBuilder bstyle,StringBuilder bwidth,StringBuilder bcolor){
  if (borderStyle != null) {
    Properties borderProperties=new Properties();
    ComponentFactoryHelper.createBorderCSSProperties(borderStyle.toString(),borderProperties);
    bstyle.append(borderProperties.getProperty(""String_Node_Str"",""String_Node_Str""));
    bwidth.append(borderProperties.getProperty(""String_Node_Str"",""String_Node_Str""));
    bcolor.append(borderProperties.getProperty(""String_Node_Str"",""String_Node_Str""));
    if (bcolor.length() == 0) {
      bcolor.append(borderProperties.getProperty(""String_Node_Str"",""String_Node_Str""));
    }
  }
}",0.5234014502307185
143548,"private void setUpItem(final ListItem<IRecordInternal> listItem,boolean createComponents){
  if (!createComponents) {
    List<IBehavior> allBehaviors=listItem.getBehaviors();
    for (int i=0; i < allBehaviors.size(); i++) {
      listItem.remove(allBehaviors.get(i));
    }
  }
  final IRecordInternal rec=listItem.getModelObject();
  boolean selected=isRecordSelected(rec);
  Object color=null, fgColor=null, styleFont=null, styleBorder=null;
  if (!isListViewMode()) {
    color=WebCellBasedView.this.getListItemBgColor(listItem,selected,false);
    if (color instanceof Undefined)     color=null;
    fgColor=WebCellBasedView.this.getListItemFgColor(listItem,selected,false);
    if (fgColor instanceof Undefined)     fgColor=null;
    styleFont=WebCellBasedView.this.getListItemFont(listItem,selected);
    if (styleFont instanceof Undefined)     styleFont=null;
    styleBorder=WebCellBasedView.this.getListItemBorder(listItem,selected);
  }
  if (color == null && fgColor == null && styleFont == null && styleBorder == null) {
    listItem.add(new AttributeModifier(""String_Node_Str"",new Model<String>((listItem.getIndex() % 2) == 0 ? ""String_Node_Str"" : ""String_Node_Str"")));
  }
  final int visibleRowIndex=listItem.getIndex() % getRowsPerPage();
  final WebMarkupContainer listItemContainer=listItem instanceof WebCellBasedViewListItem ? ((WebCellBasedViewListItem)listItem).getListContainer() : listItem;
  if (createComponents) {
    final Object compColor=color;
    final Object compFgColor=fgColor;
    final Object compFont=styleFont;
    final Object compBorder=styleBorder;
    createComponents(application,form,listCellview,dataProviderLookup,el,listStartY,listEndY,new ItemAdd(){
      public void add(      IPersist element,      final Component comp){
        Component listItemChild=comp;
        if (!isListViewMode()) {
          Component component=elementToColumnIdentifierComponent.values().iterator().next();
          if (component instanceof IComponent && comp instanceof IScriptableProvider) {
            IScriptable so=((IScriptableProvider)comp).getScriptObject();
            if (so instanceof IRuntimeComponent) {
              IRuntimeComponent ic=(IRuntimeComponent)so;
              ic.setSize(ic.getWidth(),((IComponent)component).getSize().height);
              ic.setLocation(ic.getLocationX(),visibleRowIndex * ic.getHeight());
            }
          }
          if (element instanceof ISupportName) {
            String elementName=((ISupportName)element).getName();
            if ((elementName != null) && (elementName.trim().length() > 0) || WebCellBasedView.this.addHeaders) {
              listItemChild=new CellContainer(comp);
              listItemChild.setOutputMarkupPlaceholderTag(true);
              ((MarkupContainer)listItemChild).add(comp);
            }
          }
        }
 else {
          if (!(cellview instanceof Portal) && useAnchors && (((element instanceof Field) && WebAnchoringHelper.needsWrapperDivForAnchoring((Field)element)) || (element instanceof Bean) || ((element instanceof GraphicalComponent) && ComponentFactory.isButton((GraphicalComponent)element)))) {
            listItemChild=WebAnchoringHelper.getWrapperComponent(comp,(IFormElement)element,listStartY,formBodySize,isLeftToRightOrientation,isListViewMode());
          }
        }
        updateRuntimeComponentStyleAttributes(comp);
        cellToElement.put(comp,element);
        listItemContainer.add(listItemChild);
        setUpComponent(comp,rec,compColor,compFgColor,compFont,compBorder,visibleRowIndex);
      }
    }
);
  }
 else {
    Iterator<? extends Component> children=listItemContainer.iterator();
    while (children.hasNext()) {
      Component child=CellContainer.getContentsForCell(children.next());
      initializeComponent(child,listCellview,cellToElement.get(child));
      updateRuntimeComponentStyleAttributes(child);
      setUpComponent(child,rec,color,fgColor,styleFont,styleBorder,visibleRowIndex);
    }
  }
  enableChildrenInContainer(this,isEnabled());
}","private void setUpItem(final ListItem<IRecordInternal> listItem,boolean createComponents){
  if (!createComponents) {
    List<IBehavior> allBehaviors=listItem.getBehaviors();
    for (int i=0; i < allBehaviors.size(); i++) {
      listItem.remove(allBehaviors.get(i));
    }
  }
  final IRecordInternal rec=listItem.getModelObject();
  boolean selected=isRecordSelected(rec);
  Object color=null, fgColor=null, styleFont=null, styleBorder=null;
  if (!isListViewMode()) {
    color=WebCellBasedView.this.getListItemBgColor(listItem,selected,false);
    if (color instanceof Undefined)     color=null;
    fgColor=WebCellBasedView.this.getListItemFgColor(listItem,selected,false);
    if (fgColor instanceof Undefined)     fgColor=null;
    styleFont=WebCellBasedView.this.getListItemFont(listItem,selected);
    if (styleFont instanceof Undefined)     styleFont=null;
    styleBorder=WebCellBasedView.this.getListItemBorder(listItem,selected);
  }
  if (color == null && fgColor == null && styleFont == null && styleBorder == null) {
    listItem.add(new AttributeModifier(""String_Node_Str"",new Model<String>((listItem.getIndex() % 2) == 0 ? ""String_Node_Str"" : ""String_Node_Str"")));
  }
  final int visibleRowIndex=listItem.getIndex() % getRowsPerPage();
  final WebMarkupContainer listItemContainer=listItem instanceof WebCellBasedViewListItem ? ((WebCellBasedViewListItem)listItem).getListContainer() : listItem;
  if (createComponents) {
    final Object compColor=color;
    final Object compFgColor=fgColor;
    final Object compFont=styleFont;
    final Object listItemBorder=styleBorder;
    createComponents(application,form,listCellview,dataProviderLookup,el,listStartY,listEndY,new ItemAdd(){
      public void add(      IPersist element,      final Component comp){
        Component listItemChild=comp;
        if (!isListViewMode()) {
          Component component=elementToColumnIdentifierComponent.values().iterator().next();
          if (component instanceof IComponent && comp instanceof IScriptableProvider) {
            IScriptable so=((IScriptableProvider)comp).getScriptObject();
            if (so instanceof IRuntimeComponent) {
              IRuntimeComponent ic=(IRuntimeComponent)so;
              ic.setSize(ic.getWidth(),((IComponent)component).getSize().height);
              ic.setLocation(ic.getLocationX(),visibleRowIndex * ic.getHeight());
            }
          }
          if (element instanceof ISupportName) {
            String elementName=((ISupportName)element).getName();
            if ((elementName != null) && (elementName.trim().length() > 0) || WebCellBasedView.this.addHeaders) {
              listItemChild=new CellContainer(comp);
              listItemChild.setOutputMarkupPlaceholderTag(true);
              ((MarkupContainer)listItemChild).add(comp);
            }
          }
        }
 else {
          if (!(cellview instanceof Portal) && useAnchors && (((element instanceof Field) && WebAnchoringHelper.needsWrapperDivForAnchoring((Field)element)) || (element instanceof Bean) || ((element instanceof GraphicalComponent) && ComponentFactory.isButton((GraphicalComponent)element)))) {
            listItemChild=WebAnchoringHelper.getWrapperComponent(comp,(IFormElement)element,listStartY,formBodySize,isLeftToRightOrientation,isListViewMode());
          }
        }
        updateRuntimeComponentStyleAttributes(comp);
        cellToElement.put(comp,element);
        listItemContainer.add(listItemChild);
        setUpComponent(comp,rec,compColor,compFgColor,compFont,listItemBorder,visibleRowIndex);
      }
    }
);
  }
 else {
    Iterator<? extends Component> children=listItemContainer.iterator();
    while (children.hasNext()) {
      Component child=CellContainer.getContentsForCell(children.next());
      initializeComponent(child,listCellview,cellToElement.get(child));
      updateRuntimeComponentStyleAttributes(child);
      setUpComponent(child,rec,color,fgColor,styleFont,styleBorder,visibleRowIndex);
    }
  }
  enableChildrenInContainer(this,isEnabled());
}",0.9970260223048328
143549,"private void applyStyleOnComponent(Component comp,Object bgColor,Object fgColor,Object compFont,Object compBorder){
  if (comp instanceof IScriptableProvider) {
    IScriptable s=((IScriptableProvider)comp).getScriptObject();
    if (s instanceof IRuntimeComponent) {
      IRuntimeComponent sbm=(IRuntimeComponent)s;
      RenderableWrapper sbmRW=null;
      if (s instanceof ISupportOnRenderCallback) {
        IScriptRenderMethods sr=((ISupportOnRenderCallback)s).getRenderable();
        if (sr instanceof RenderableWrapper)         sbmRW=(RenderableWrapper)sr;
      }
      if (bgColor != null) {
        if (sbmRW != null)         sbmRW.clearProperty(RenderableWrapper.PROPERTY_BGCOLOR);
        sbm.setBgcolor(bgColor.toString());
        if (sbm.isTransparent()) {
          if (comp instanceof IProviderStylePropertyChanges && ((IProviderStylePropertyChanges)comp).getStylePropertyChanges() instanceof IStylePropertyChangesRecorder) {
            ((IStylePropertyChangesRecorder)(((IProviderStylePropertyChanges)comp).getStylePropertyChanges())).setBgcolor(bgColor.toString());
          }
        }
      }
 else {
        sbm.setBgcolor(runtimeComponentStyleAttributes.get(sbm).get(RenderableWrapper.PROPERTY_BGCOLOR));
        setParentBGcolor(comp,""String_Node_Str"");
      }
      if (fgColor != null) {
        if (sbmRW != null)         sbmRW.clearProperty(RenderableWrapper.PROPERTY_FGCOLOR);
        sbm.setFgcolor(fgColor.toString());
      }
 else {
        sbm.setFgcolor(runtimeComponentStyleAttributes.get(sbm).get(RenderableWrapper.PROPERTY_FGCOLOR));
      }
      if (compFont != null) {
        if (sbmRW != null)         sbmRW.clearProperty(RenderableWrapper.PROPERTY_FONT);
        sbm.setFont(compFont.toString());
      }
 else {
        sbm.setFont(runtimeComponentStyleAttributes.get(sbm).get(RenderableWrapper.PROPERTY_FONT));
      }
      if (compBorder != null) {
        String newBorder=compBorder.toString();
        Border currentBorder=ComponentFactoryHelper.createBorder(sbm.getBorder());
        Border marginBorder=null;
        if (currentBorder instanceof EmptyBorder) {
          marginBorder=currentBorder;
        }
 else         if (currentBorder instanceof CompoundBorder && ((CompoundBorder)currentBorder).getInsideBorder() instanceof EmptyBorder) {
          marginBorder=((CompoundBorder)currentBorder).getInsideBorder();
        }
        if (marginBorder != null) {
          newBorder=ComponentFactoryHelper.createBorderString(BorderFactory.createCompoundBorder(ComponentFactoryHelper.createBorder(newBorder),marginBorder));
        }
        if (sbmRW != null)         sbmRW.clearProperty(RenderableWrapper.PROPERTY_BORDER);
        sbm.setBorder(newBorder);
        sbm.setSize(sbm.getWidth(),sbm.getHeight());
      }
 else {
        sbm.setBorder(runtimeComponentStyleAttributes.get(sbm).get(RenderableWrapper.PROPERTY_BORDER));
      }
    }
  }
}","private void applyStyleOnComponent(Component comp,Object bgColor,Object fgColor,Object compFont,Object listItemBorder){
  if (comp instanceof IScriptableProvider) {
    IScriptable s=((IScriptableProvider)comp).getScriptObject();
    if (s instanceof IRuntimeComponent) {
      IRuntimeComponent sbm=(IRuntimeComponent)s;
      RenderableWrapper sbmRW=null;
      if (s instanceof ISupportOnRenderCallback) {
        IScriptRenderMethods sr=((ISupportOnRenderCallback)s).getRenderable();
        if (sr instanceof RenderableWrapper)         sbmRW=(RenderableWrapper)sr;
      }
      if (bgColor != null) {
        if (sbmRW != null)         sbmRW.clearProperty(RenderableWrapper.PROPERTY_BGCOLOR);
        sbm.setBgcolor(bgColor.toString());
        if (sbm.isTransparent()) {
          if (comp instanceof IProviderStylePropertyChanges && ((IProviderStylePropertyChanges)comp).getStylePropertyChanges() instanceof IStylePropertyChangesRecorder) {
            ((IStylePropertyChangesRecorder)(((IProviderStylePropertyChanges)comp).getStylePropertyChanges())).setBgcolor(bgColor.toString());
          }
        }
      }
 else {
        sbm.setBgcolor(runtimeComponentStyleAttributes.get(sbm).get(RenderableWrapper.PROPERTY_BGCOLOR));
        setParentBGcolor(comp,""String_Node_Str"");
      }
      if (fgColor != null) {
        if (sbmRW != null)         sbmRW.clearProperty(RenderableWrapper.PROPERTY_FGCOLOR);
        sbm.setFgcolor(fgColor.toString());
      }
 else {
        sbm.setFgcolor(runtimeComponentStyleAttributes.get(sbm).get(RenderableWrapper.PROPERTY_FGCOLOR));
      }
      if (compFont != null) {
        if (sbmRW != null)         sbmRW.clearProperty(RenderableWrapper.PROPERTY_FONT);
        sbm.setFont(compFont.toString());
      }
 else {
        sbm.setFont(runtimeComponentStyleAttributes.get(sbm).get(RenderableWrapper.PROPERTY_FONT));
      }
      if (listItemBorder != null) {
        String newBorder=listItemBorder.toString();
        Border currentBorder=ComponentFactoryHelper.createBorder(sbm.getBorder());
        Border marginBorder=null;
        if (currentBorder instanceof EmptyBorder) {
          marginBorder=currentBorder;
        }
 else         if (currentBorder instanceof CompoundBorder && ((CompoundBorder)currentBorder).getInsideBorder() instanceof EmptyBorder) {
          marginBorder=((CompoundBorder)currentBorder).getInsideBorder();
        }
        if (marginBorder != null) {
          newBorder=ComponentFactoryHelper.createBorderString(BorderFactory.createCompoundBorder(ComponentFactoryHelper.createBorder(newBorder),marginBorder));
        }
        if (sbmRW != null)         sbmRW.clearProperty(RenderableWrapper.PROPERTY_BORDER);
        sbm.setBorder(newBorder);
        sbm.setSize(sbm.getWidth(),sbm.getHeight());
      }
 else {
        sbm.setBorder(runtimeComponentStyleAttributes.get(sbm).get(RenderableWrapper.PROPERTY_BORDER));
      }
    }
  }
}",0.9938292766540968
143550,"private void updateComponentsRenderState(AjaxRequestTarget target,String bgColor,String fgColor,String compFont,String compBorder,boolean isSelected,boolean ignoreStyles){
  Iterator<? extends Component> it=getListContainer().iterator();
  while (it.hasNext()) {
    Component component=it.next();
    if (component.isVisibleInHierarchy()) {
      Component innerComponent=CellContainer.getContentsForCell(component);
      if (!ignoreStyles) {
        WebCellBasedView.this.applyStyleOnComponent(innerComponent,bgColor,fgColor,compFont,compBorder);
      }
      boolean innerComponentChanged=innerComponent instanceof IProviderStylePropertyChanges && ((IProviderStylePropertyChanges)innerComponent).getStylePropertyChanges().isChanged();
      if (((updateComponentRenderState(innerComponent,isSelected)) || (!ignoreStyles)) && target != null) {
        target.addComponent(innerComponent.getParent() instanceof CellContainer ? innerComponent.getParent() : innerComponent);
        WebEventExecutor.generateDragAttach(innerComponent,target.getHeaderResponse());
        if (!innerComponent.isVisible()) {
          ((IProviderStylePropertyChanges)innerComponent).getStylePropertyChanges().setRendered();
        }
      }
 else       if (innerComponentChanged) {
        ((IProviderStylePropertyChanges)innerComponent).getStylePropertyChanges().setRendered();
      }
    }
  }
}","private void updateComponentsRenderState(AjaxRequestTarget target,String bgColor,String fgColor,String compFont,String listItemBorder,boolean isSelected,boolean ignoreStyles){
  Iterator<? extends Component> it=getListContainer().iterator();
  while (it.hasNext()) {
    Component component=it.next();
    if (component.isVisibleInHierarchy()) {
      Component innerComponent=CellContainer.getContentsForCell(component);
      if (!ignoreStyles) {
        WebCellBasedView.this.applyStyleOnComponent(innerComponent,bgColor,fgColor,compFont,listItemBorder);
      }
      boolean innerComponentChanged=innerComponent instanceof IProviderStylePropertyChanges && ((IProviderStylePropertyChanges)innerComponent).getStylePropertyChanges().isChanged();
      if (((updateComponentRenderState(innerComponent,isSelected)) || (!ignoreStyles)) && target != null) {
        target.addComponent(innerComponent.getParent() instanceof CellContainer ? innerComponent.getParent() : innerComponent);
        WebEventExecutor.generateDragAttach(innerComponent,target.getHeaderResponse());
        if (!innerComponent.isVisible()) {
          ((IProviderStylePropertyChanges)innerComponent).getStylePropertyChanges().setRendered();
        }
      }
 else       if (innerComponentChanged) {
        ((IProviderStylePropertyChanges)innerComponent).getStylePropertyChanges().setRendered();
      }
    }
  }
}",0.9913357400722022
143551,"private Object getListItemFgColor(ListItem<IRecordInternal> listItem,boolean isSelected,boolean asInlineCSSString){
  if (asInlineCSSString) {
    return getStyleAttributeForListItem(listItem,isSelected,ISupportRowStyling.ATTRIBUTE.FGCOLOR,true);
  }
 else {
    return getStyleAttributeForListItem(listItem,isSelected,ISupportRowStyling.ATTRIBUTE.FGCOLOR,false);
  }
}","private String getListItemFgColor(ListItem<IRecordInternal> listItem,boolean isSelected,boolean asInlineCSSString){
  if (asInlineCSSString) {
    return getStyleAttributeForListItem(listItem,isSelected,ISupportRowStyling.ATTRIBUTE.FGCOLOR,true);
  }
 else {
    return getStyleAttributeForListItem(listItem,isSelected,ISupportRowStyling.ATTRIBUTE.FGCOLOR,false);
  }
}",0.983739837398374
143552,"public void run(){
  boolean doLogOut=getClientInfo().getUserUid() != null;
  if (getSolution() != null) {
    doLogOut=closeSolution(false,solution_to_open_args);
  }
  if (doLogOut && getSolution() == null) {
    credentials.clear();
    getClientInfo().clearUserInfo();
  }
  if (RequestCycle.get() != null) {
    WebRequest webRequest=((WebRequestCycle)RequestCycle.get()).getWebRequest();
    WebResponse webResponse=((WebRequestCycle)RequestCycle.get()).getWebResponse();
    Cookie password=webRequest.getCookie(""String_Node_Str"");
    if (password != null) {
      password.setMaxAge(0);
      password.setPath(""String_Node_Str"");
      webResponse.addCookie(password);
    }
  }
}","@Override public void run(){
  putClientProperty(WEBCONSTANTS.WEBCLIENT_TEMPLATES_DIR,null);
}",0.10727969348659
143553,"@SuppressWarnings(""String_Node_Str"") @Override public boolean closeSolution(boolean force,Object[] args){
  if (getSolution() == null || closing)   return true;
  try {
    RequestCycle rc=RequestCycle.get();
    closing=true;
    MainPage mp=MainPage.getRequestMainPage();
    if (mp == null) {
      mp=getMainPage();
    }
    List<String> triggerReqScripts=getTriggerReqOnOtherPagesJS(rc,mp);
    MainPage.ShowUrlInfo showUrlInfo=mp.getShowUrlInfo();
    boolean shownInDialog=mp.isShowingInDialog() || mp.isClosingAsDivPopup();
    boolean retval=super.closeSolution(force,args);
    if (retval) {
      if (rc != null && rc.getRequestTarget() instanceof AjaxRequestTarget) {
        ((AjaxRequestTarget)rc.getRequestTarget()).appendJavascript(""String_Node_Str"");
        if (triggerReqScripts != null) {
          for (          String js : triggerReqScripts) {
            ((AjaxRequestTarget)rc.getRequestTarget()).appendJavascript(js);
          }
        }
      }
      getRuntimeWindowManager().closeFormInWindow(null,true);
      Collection<Style> userStyles=getFlattenedSolution().flushUserStyles();
      if (userStyles != null) {
        for (        Style style : userStyles) {
          ComponentFactory.flushStyle(this,style);
        }
      }
      getRuntimeProperties().put(IServiceProvider.RT_VALUELIST_CACHE,null);
      getRuntimeProperties().put(IServiceProvider.RT_OVERRIDESTYLE_CACHE,null);
      if (rc != null) {
        boolean showDefault=true;
        boolean urlShown=false;
        if (showUrlInfo != null) {
          showDefault=!""String_Node_Str"".equals(showUrlInfo.getTarget()) && !""String_Node_Str"".equals(showUrlInfo.getTarget());
          String url=""String_Node_Str"";
          if (showUrlInfo.getUrl() != null) {
            url=showUrlInfo.getUrl();
          }
          if (rc.getRequestTarget() instanceof AjaxRequestTarget) {
            showUrlInfo.setOnRootFrame(true);
            showUrlInfo.setUseIFrame(false);
            String show=MainPage.getShowUrlScript(showUrlInfo);
            if (show != null) {
              urlShown=true;
              ((AjaxRequestTarget)rc.getRequestTarget()).appendJavascript(show);
              mp.getShowUrlScript();
            }
          }
 else {
            rc.setRequestTarget(new RedirectRequestTarget(url));
          }
        }
        if (showDefault) {
          if (Session.exists() && RequestCycle.get() != null) {
            if (getPreferedSolutionNameToLoadOnInit() == null) {
              if ((urlShown || shownInDialog) && rc.getRequestTarget() instanceof AjaxRequestTarget) {
                MainPage page=mp;
                while ((page.isShowingInDialog() || page.isClosingAsDivPopup()) && page.getCallingContainer() != null) {
                  page=page.getCallingContainer();
                }
                CharSequence urlFor=page.urlFor(SelectSolution.class,null);
                ((AjaxRequestTarget)rc.getRequestTarget()).appendJavascript(MainPage.getShowUrlScript(new ShowUrlInfo(urlFor.toString(),""String_Node_Str"",null,0,true,false)));
              }
 else {
                mp.setResponsePage(SelectSolution.class);
              }
            }
 else {
              if (!Utils.getAsBoolean(Settings.getInstance().getProperty(""String_Node_Str"",""String_Node_Str""))) {
                WebClientSession.get().keepCredentials(getPreferedSolutionNameToLoadOnInit());
              }
              Map<String,Object> map=new HashMap<String,Object>();
              map.put(""String_Node_Str"",getPreferedSolutionNameToLoadOnInit());
              map.put(""String_Node_Str"",getPreferedSolutionMethodNameToCall());
              if (getPreferedSolutionMethodArguments() != null && getPreferedSolutionMethodArguments().length > 0) {
                map.put(""String_Node_Str"",getPreferedSolutionMethodArguments()[0]);
              }
              if ((urlShown || shownInDialog) && rc.getRequestTarget() instanceof AjaxRequestTarget) {
                CharSequence urlFor=mp.urlFor(SolutionLoader.class,new PageParameters(map));
                ((AjaxRequestTarget)rc.getRequestTarget()).appendJavascript(MainPage.getShowUrlScript(new ShowUrlInfo(urlFor.toString(),""String_Node_Str"",null,0,true,false)));
              }
 else {
                rc.setResponsePage(SolutionLoader.class,new PageParameters(map),null);
              }
            }
          }
        }
      }
    }
    return retval;
  }
  finally {
    closing=false;
  }
}","@SuppressWarnings(""String_Node_Str"") @Override public boolean closeSolution(boolean force,Object[] args){
  if (getSolution() == null || closing)   return true;
  try {
    RequestCycle rc=RequestCycle.get();
    closing=true;
    MainPage mp=MainPage.getRequestMainPage();
    if (mp == null) {
      mp=getMainPage();
    }
    List<String> triggerReqScripts=getTriggerReqOnOtherPagesJS(rc,mp);
    MainPage.ShowUrlInfo showUrlInfo=mp.getShowUrlInfo();
    boolean shownInDialog=mp.isShowingInDialog() || mp.isClosingAsDivPopup();
    boolean retval=super.closeSolution(force,args);
    if (retval) {
      if (rc != null)       putClientProperty(WEBCONSTANTS.WEBCLIENT_TEMPLATES_DIR,null);
 else {
        invokeLater(new Runnable(){
          @Override public void run(){
            putClientProperty(WEBCONSTANTS.WEBCLIENT_TEMPLATES_DIR,null);
          }
        }
);
      }
      if (rc != null && rc.getRequestTarget() instanceof AjaxRequestTarget) {
        ((AjaxRequestTarget)rc.getRequestTarget()).appendJavascript(""String_Node_Str"");
        if (triggerReqScripts != null) {
          for (          String js : triggerReqScripts) {
            ((AjaxRequestTarget)rc.getRequestTarget()).appendJavascript(js);
          }
        }
      }
      getRuntimeWindowManager().closeFormInWindow(null,true);
      Collection<Style> userStyles=getFlattenedSolution().flushUserStyles();
      if (userStyles != null) {
        for (        Style style : userStyles) {
          ComponentFactory.flushStyle(this,style);
        }
      }
      getRuntimeProperties().put(IServiceProvider.RT_VALUELIST_CACHE,null);
      getRuntimeProperties().put(IServiceProvider.RT_OVERRIDESTYLE_CACHE,null);
      if (rc != null) {
        boolean showDefault=true;
        boolean urlShown=false;
        if (showUrlInfo != null) {
          showDefault=!""String_Node_Str"".equals(showUrlInfo.getTarget()) && !""String_Node_Str"".equals(showUrlInfo.getTarget());
          String url=""String_Node_Str"";
          if (showUrlInfo.getUrl() != null) {
            url=showUrlInfo.getUrl();
          }
          if (rc.getRequestTarget() instanceof AjaxRequestTarget) {
            showUrlInfo.setOnRootFrame(true);
            showUrlInfo.setUseIFrame(false);
            String show=MainPage.getShowUrlScript(showUrlInfo);
            if (show != null) {
              urlShown=true;
              ((AjaxRequestTarget)rc.getRequestTarget()).appendJavascript(show);
              mp.getShowUrlScript();
            }
          }
 else {
            rc.setRequestTarget(new RedirectRequestTarget(url));
          }
        }
        if (showDefault) {
          if (Session.exists() && RequestCycle.get() != null) {
            if (getPreferedSolutionNameToLoadOnInit() == null) {
              if ((urlShown || shownInDialog) && rc.getRequestTarget() instanceof AjaxRequestTarget) {
                MainPage page=mp;
                while ((page.isShowingInDialog() || page.isClosingAsDivPopup()) && page.getCallingContainer() != null) {
                  page=page.getCallingContainer();
                }
                CharSequence urlFor=page.urlFor(SelectSolution.class,null);
                ((AjaxRequestTarget)rc.getRequestTarget()).appendJavascript(MainPage.getShowUrlScript(new ShowUrlInfo(urlFor.toString(),""String_Node_Str"",null,0,true,false)));
              }
 else {
                mp.setResponsePage(SelectSolution.class);
              }
            }
 else {
              if (!Utils.getAsBoolean(Settings.getInstance().getProperty(""String_Node_Str"",""String_Node_Str""))) {
                WebClientSession.get().keepCredentials(getPreferedSolutionNameToLoadOnInit());
              }
              Map<String,Object> map=new HashMap<String,Object>();
              map.put(""String_Node_Str"",getPreferedSolutionNameToLoadOnInit());
              map.put(""String_Node_Str"",getPreferedSolutionMethodNameToCall());
              if (getPreferedSolutionMethodArguments() != null && getPreferedSolutionMethodArguments().length > 0) {
                map.put(""String_Node_Str"",getPreferedSolutionMethodArguments()[0]);
              }
              if ((urlShown || shownInDialog) && rc.getRequestTarget() instanceof AjaxRequestTarget) {
                CharSequence urlFor=mp.urlFor(SolutionLoader.class,new PageParameters(map));
                ((AjaxRequestTarget)rc.getRequestTarget()).appendJavascript(MainPage.getShowUrlScript(new ShowUrlInfo(urlFor.toString(),""String_Node_Str"",null,0,true,false)));
              }
 else {
                rc.setResponsePage(SolutionLoader.class,new PageParameters(map),null);
              }
            }
          }
        }
      }
    }
    return retval;
  }
  finally {
    closing=false;
  }
}",0.9695916594265857
143554,"public synchronized void flushDataProvidersForTable(Table table){
  if (table != null && allProvidersForTable != null) {
    allProvidersForTable.remove(table);
  }
}","public synchronized void flushDataProvidersForTable(Table table){
  if (table != null && allProvidersForTable != null) {
    allProvidersForTable.remove(table);
    flushGlobalProviders();
  }
}",0.9222222222222224
143555,"/** 
 * @param persist
 */
private void flush(IPersist persist){
  if (persist instanceof Relation)   flushRelations();
  if (persist instanceof ValueList)   flushValuelists();
  if (persist instanceof Form)   flushForms();
  if (persist instanceof ScriptMethod)   flushScopes();
  if (persist instanceof ScriptVariable)   flushScriptVariables();
  flushDataProvidersForPersist(persist);
  flushDataProviderLookups(persist);
  allObjectscache=null;
  if (loginFlattenedSolution != null) {
    loginFlattenedSolution.flush(persist);
  }
}","/** 
 * @param persist
 */
private void flush(IPersist persist){
  if (persist instanceof Relation)   flushRelations();
  if (persist instanceof ValueList)   flushValuelists();
  if (persist instanceof Form)   flushForms();
  if (persist instanceof ScriptMethod)   flushScopes();
  if (persist instanceof ScriptVariable)   flushScriptVariables();
  if (persist instanceof ScriptCalculation || persist instanceof AggregateVariable)   flushGlobalProviders();
  flushDataProvidersForPersist(persist);
  flushDataProviderLookups(persist);
  allObjectscache=null;
  if (loginFlattenedSolution != null) {
    loginFlattenedSolution.flush(persist);
  }
}",0.9070945945945946
143556,"private synchronized void flushScriptVariables(){
  scopeCacheByName=null;
  globalProviders.clear();
}","private synchronized void flushScriptVariables(){
  scopeCacheByName=null;
  flushGlobalProviders();
}",0.9365853658536586
143557,"public void mouseDragged(MouseEvent e){
  if (startDrag)   exportDrag(SwingUtilities.convertMouseEvent((Component)e.getSource(),e,TableView.this));
  startDrag=false;
}","@Override public void mouseDragged(MouseEvent e){
  if (startDrag)   exportDrag(SwingUtilities.convertMouseEvent((Component)e.getSource(),e,TableView.this));
  startDrag=false;
}",0.9710982658959536
143558,"public void mouseMoved(MouseEvent e){
}","@Override public void mouseMoved(MouseEvent e){
}",0.8863636363636364
143559,"public void initDragNDrop(FormController formController,int clientDesignYOffset){
  this.yOffset=clientDesignYOffset;
  boolean enableDragDrop=false;
  if (cellview instanceof Portal) {
    Portal cellviewPortal=(Portal)cellview;
    enableDragDrop=(cellviewPortal.getOnDragMethodID() > 0 || cellviewPortal.getOnDragEndMethodID() > 0 || cellviewPortal.getOnDragOverMethodID() > 0 || cellviewPortal.getOnDropMethodID() > 0);
  }
 else {
    Form form=fc.getForm();
    enableDragDrop=(form.getOnDragMethodID() > 0 || form.getOnDragEndMethodID() > 0 || form.getOnDragOverMethodID() > 0 || form.getOnDropMethodID() > 0);
  }
  if (enableDragDrop) {
    setDragEnabled(true);
    setTransferHandler(FormDataTransferHandler.getInstance());
    new DropTarget(this,(DropTargetListener)FormDataTransferHandler.getInstance());
    addHierarchyListener(new HierarchyListener(){
      public void hierarchyChanged(      HierarchyEvent e){
        JComponent changedParent=(JComponent)e.getChangedParent();
        if (changedParent != null && e.getChanged() == TableView.this && (e.getChangeFlags() & HierarchyEvent.PARENT_CHANGED) == HierarchyEvent.PARENT_CHANGED) {
          changedParent.setTransferHandler(FormDataTransferHandler.getInstance());
          new DropTarget(changedParent,(DropTargetListener)FormDataTransferHandler.getInstance());
          DragStartTester dragTester=new DragStartTester();
          changedParent.addMouseListener(dragTester);
          changedParent.addMouseMotionListener(dragTester);
          TableView.this.removeHierarchyListener(this);
        }
      }
    }
);
  }
}","public void initDragNDrop(FormController formController,int clientDesignYOffset){
  this.yOffset=clientDesignYOffset;
  boolean enableDragDrop=false;
  if (cellview instanceof Portal) {
    Portal cellviewPortal=(Portal)cellview;
    enableDragDrop=(cellviewPortal.getOnDragMethodID() > 0 || cellviewPortal.getOnDragEndMethodID() > 0 || cellviewPortal.getOnDragOverMethodID() > 0 || cellviewPortal.getOnDropMethodID() > 0);
  }
 else {
    Form form=fc.getForm();
    enableDragDrop=(form.getOnDragMethodID() > 0 || form.getOnDragEndMethodID() > 0 || form.getOnDragOverMethodID() > 0 || form.getOnDropMethodID() > 0);
  }
  if (enableDragDrop && !GraphicsEnvironment.isHeadless()) {
    setDragEnabled(true);
    setTransferHandler(FormDataTransferHandler.getInstance());
    new DropTarget(this,(DropTargetListener)FormDataTransferHandler.getInstance());
    addHierarchyListener(new HierarchyListener(){
      public void hierarchyChanged(      HierarchyEvent e){
        JComponent changedParent=(JComponent)e.getChangedParent();
        if (changedParent != null && e.getChanged() == TableView.this && (e.getChangeFlags() & HierarchyEvent.PARENT_CHANGED) == HierarchyEvent.PARENT_CHANGED) {
          changedParent.setTransferHandler(FormDataTransferHandler.getInstance());
          new DropTarget(changedParent,(DropTargetListener)FormDataTransferHandler.getInstance());
          DragStartTester dragTester=new DragStartTester();
          changedParent.addMouseListener(dragTester);
          changedParent.addMouseMotionListener(dragTester);
          TableView.this.removeHierarchyListener(this);
        }
      }
    }
);
  }
}",0.9885837704412218
143560,"public void mouseDragged(MouseEvent e){
  if (startDrag)   exportDrag(SwingUtilities.convertMouseEvent((Component)e.getSource(),e,DataRenderer.this));
  startDrag=false;
}","@Override public void mouseDragged(MouseEvent e){
  if (startDrag)   exportDrag(SwingUtilities.convertMouseEvent((Component)e.getSource(),e,DataRenderer.this));
  startDrag=false;
}",0.9715909090909092
143561,"public void mouseMoved(MouseEvent e){
}","@Override public void mouseMoved(MouseEvent e){
}",0.8863636363636364
143562,"public void initDragNDrop(FormController formController,int clientDesignYOffset){
  this.yOffset=clientDesignYOffset;
  Form form=formController.getForm();
  if (form.getOnDragMethodID() > 0 || form.getOnDragEndMethodID() > 0 || form.getOnDragOverMethodID() > 0 || form.getOnDropMethodID() > 0) {
    this.dragNdropController=formController;
    final DragStartTester dragTester=new DragStartTester();
    addMouseMotionListener(dragTester);
    addMouseListener(dragTester);
    addContainerListener(new ContainerListener(){
      public void componentAdded(      ContainerEvent e){
        Component child=e.getChild();
        if (child instanceof JComponent) {
          child.addMouseMotionListener(dragTester);
          child.addMouseListener(dragTester);
          if (child instanceof ISupportDragNDropTextTransfer)           ((ISupportDragNDropTextTransfer)child).clearTransferHandler();
 else           if (child instanceof DataComboBox)           ((DataComboBox)child).disableEditorTransferHandler();
 else           ((JComponent)child).setTransferHandler(null);
        }
      }
      public void componentRemoved(      ContainerEvent e){
      }
    }
);
    setTransferHandler(FormDataTransferHandler.getInstance());
    new DropTarget(this,(DropTargetListener)FormDataTransferHandler.getInstance());
  }
}","public void initDragNDrop(FormController formController,int clientDesignYOffset){
  if (!GraphicsEnvironment.isHeadless()) {
    this.yOffset=clientDesignYOffset;
    Form form=formController.getForm();
    if (form.getOnDragMethodID() > 0 || form.getOnDragEndMethodID() > 0 || form.getOnDragOverMethodID() > 0 || form.getOnDropMethodID() > 0) {
      this.dragNdropController=formController;
      final DragStartTester dragTester=new DragStartTester();
      addMouseMotionListener(dragTester);
      addMouseListener(dragTester);
      addContainerListener(new ContainerListener(){
        public void componentAdded(        ContainerEvent e){
          Component child=e.getChild();
          if (child instanceof JComponent) {
            child.addMouseMotionListener(dragTester);
            child.addMouseListener(dragTester);
            if (child instanceof ISupportDragNDropTextTransfer)             ((ISupportDragNDropTextTransfer)child).clearTransferHandler();
 else             if (child instanceof DataComboBox)             ((DataComboBox)child).disableEditorTransferHandler();
 else             ((JComponent)child).setTransferHandler(null);
          }
        }
        public void componentRemoved(        ContainerEvent e){
        }
      }
);
      setTransferHandler(FormDataTransferHandler.getInstance());
      new DropTarget(this,(DropTargetListener)FormDataTransferHandler.getInstance());
    }
  }
}",0.9625045504186384
143563,"public synchronized SessionClient createDebugHeadlessClient(ServletRequest req,String userName,String password,String method,Object[] objects,String preferedSolution) throws Exception {
  if (debugHeadlessClient != null && debugHeadlessClient.getSolution() != null) {
    debugHeadlessClient.shutDown(true);
  }
  SolutionMetaData solutionMetaData=(currentSolution == null) ? null : currentSolution.getSolutionMetaData();
  if (preferedSolution != null && solutionMetaData != null && !preferedSolution.equals(solutionMetaData.getName())) {
    Map<String,Solution> modules=new HashMap<String,Solution>();
    currentSolution.getReferencedModulesRecursive(modules);
    if (modules.containsKey(preferedSolution)) {
      solutionMetaData=(SolutionMetaData)ApplicationServerSingleton.get().getLocalRepository().getRootObjectMetaData(preferedSolution,IRepository.SOLUTIONS);
    }
  }
  debugHeadlessClient=new DebugHeadlessClient(req,userName,password,method,objects,solutionMetaData,designerCallback){
    @Override public void shutDown(    boolean force){
      super.shutDown(force);
      debugHeadlessClient=null;
    }
  }
;
  return debugHeadlessClient;
}","public synchronized SessionClient createDebugHeadlessClient(ServletRequest req,String userName,String password,String method,Object[] objects,String preferedSolution) throws Exception {
  if (debugHeadlessClient != null && debugHeadlessClient.getSolution() != null) {
    debugHeadlessClient.shutDown(true);
  }
  SolutionMetaData solutionMetaData=(currentSolution == null) ? null : currentSolution.getSolutionMetaData();
  if (preferedSolution != null && solutionMetaData != null && !preferedSolution.equals(solutionMetaData.getName())) {
    Map<String,Solution> modules=new HashMap<String,Solution>();
    currentSolution.getReferencedModulesRecursive(modules);
    if (modules.containsKey(preferedSolution)) {
      solutionMetaData=(SolutionMetaData)ApplicationServerSingleton.get().getLocalRepository().getRootObjectMetaData(preferedSolution,IRepository.SOLUTIONS);
    }
  }
  debugHeadlessClient=new DebugHeadlessClient(req,userName,password,method,objects,solutionMetaData,designerCallback){
    @Override public void shutDown(    boolean force){
      super.shutDown(force);
      debugHeadlessClient=null;
    }
  }
;
  testAndStartDebugger();
  return debugHeadlessClient;
}",0.988917306052856
143564,"public DebugHeadlessClient(ServletRequest req,String name,String pass,String method,Object[] methodArgs,SolutionMetaData solution,IDesignerCallback designerCallBack) throws Exception {
  super(req,name,pass,method,methodArgs,solution == null ? null : solution.getName());
  this.solution=solution;
  this.designerCallBack=designerCallBack;
  this.designerCallBack.testAndStartDebugger();
}","public DebugHeadlessClient(ServletRequest req,String name,String pass,String method,Object[] methodArgs,SolutionMetaData solution,IDesignerCallback designerCallBack) throws Exception {
  super(req,name,pass,method,methodArgs,solution == null ? null : solution.getName());
  this.solution=solution;
  this.designerCallBack=designerCallBack;
}",0.9342465753424658
143565,"public void addTab(String name,String text,Icon c,Component flp,String tooltip){
  int count=getTabCount();
  setTitleAt(count,text);
  add(flp,((IFormLookupPanel)flp).getFormName() + ""String_Node_Str"" + System.currentTimeMillis());
  if (flp instanceof JComponent) {
    JComponent jFLP=(JComponent)flp;
    jFLP.setOpaque(isOpaque());
  }
  if (count == 0) {
    setSelectedIndex(0);
  }
  if (tooltip != null) {
    ((JComponent)flp).setToolTipText(tooltip);
  }
  SwingUtilities.invokeLater(new Runnable(){
    public void run(){
      getParent().validate();
    }
  }
);
}","public void addTab(String name,String text,Icon c,Component flp,String tooltip){
  int count=getTabCount();
  setTitleAt(count,text);
  add(flp,((IFormLookupPanel)flp).getFormName() + ""String_Node_Str"" + System.nanoTime());
  if (flp instanceof JComponent) {
    JComponent jFLP=(JComponent)flp;
    jFLP.setOpaque(isOpaque());
  }
  if (count == 0) {
    setSelectedIndex(0);
  }
  if (tooltip != null) {
    ((JComponent)flp).setToolTipText(tooltip);
  }
  SwingUtilities.invokeLater(new Runnable(){
    public void run(){
      getParent().validate();
    }
  }
);
}",0.978204010462075
143566,"/** 
 * Determines the preferred size of the container argument using this card layout.
 * @param parent the name of the parent container.
 * @return the preferred dimensions to lay out the subcomponents of the specified container.
 * @see java.awt.Container#getPreferredSize
 * @see java.awt.CardLayout#minimumLayoutSize
 */
public Dimension preferredLayoutSize(Container parent){
synchronized (parent.getTreeLock()) {
    Insets insets=parent.getInsets();
    int ncomponents=vector.size();
    int w=0;
    int h=0;
    for (int i=0; i < ncomponents; i++) {
      Component comp=((Card)vector.get(i)).comp;
      if (comp.isVisible()) {
        Dimension d=comp.getPreferredSize();
        if (d.width > w) {
          w=d.width;
        }
        if (d.height > h) {
          h=d.height;
        }
      }
    }
    return new Dimension(insets.left + insets.right + w+ hgap * 2,insets.top + insets.bottom + h+ vgap * 2);
  }
}","/** 
 * Determines the preferred size of the container argument using this card layout.
 * @param parent the name of the parent container.
 * @return the preferred dimensions to lay out the subcomponents of the specified container.
 * @see java.awt.Container#getPreferredSize
 * @see java.awt.CardLayout#minimumLayoutSize
 */
public Dimension preferredLayoutSize(Container parent){
synchronized (parent.getTreeLock()) {
    Insets insets=parent.getInsets();
    int ncomponents=componentList.size();
    int w=0;
    int h=0;
    for (int i=0; i < ncomponents; i++) {
      Component comp=((Card)componentList.get(i)).comp;
      if (comp.isVisible()) {
        Dimension d=comp.getPreferredSize();
        if (d.width > w) {
          w=d.width;
        }
        if (d.height > h) {
          h=d.height;
        }
      }
    }
    return new Dimension(insets.left + insets.right + w+ hgap * 2,insets.top + insets.bottom + h+ vgap * 2);
  }
}",0.9797441364605544
143567,"/** 
 * Flips to the next card of the specified container. If the currently visible card is the last one, this method flips to the first card in the layout.
 * @param parent the name of the parent container in which to do the layout.
 * @see java.awt.CardLayout#previous
 */
public void next(Container parent){
synchronized (parent.getTreeLock()) {
    checkLayout(parent);
    show(parent,(currentCard + 1) % vector.size(),true);
  }
}","/** 
 * Flips to the next card of the specified container. If the currently visible card is the last one, this method flips to the first card in the layout.
 * @param parent the name of the parent container in which to do the layout.
 * @see java.awt.CardLayout#previous
 */
public void next(Container parent){
synchronized (parent.getTreeLock()) {
    checkLayout(parent);
    show(parent,(currentCard + 1) % componentList.size(),true);
  }
}",0.9783845278725825
143568,"/** 
 * Removes the specified component from the layout.
 * @param comp the component to be removed.
 * @see java.awt.Container#remove(java.awt.Component)
 * @see java.awt.Container#removeAll()
 */
public void removeLayoutComponent(Component comp){
synchronized (comp.getTreeLock()) {
    int i=0;
    for (; i < vector.size(); i++) {
      if (((Card)vector.get(i)).comp == comp) {
        vector.remove(i);
        comp.setVisible(false);
        break;
      }
    }
    if (vector.isEmpty()) {
      currentCard=0;
    }
 else {
      if (currentCard > 0 && currentCard >= i) {
        currentCard--;
        layoutContainer(((Card)vector.get(currentCard)).comp.getParent());
      }
    }
  }
}","/** 
 * Removes the specified component from the layout.
 * @param comp the component to be removed.
 * @see java.awt.Container#remove(java.awt.Component)
 * @see java.awt.Container#removeAll()
 */
public void removeLayoutComponent(Component comp){
synchronized (comp.getTreeLock()) {
    int i=0;
    for (; i < componentList.size(); i++) {
      if (((Card)componentList.get(i)).comp == comp) {
        componentList.remove(i);
        comp.setVisible(false);
        break;
      }
    }
    if (componentList.isEmpty()) {
      currentCard=0;
    }
 else {
      if (currentCard > 0 && currentCard >= i) {
        currentCard--;
        layoutContainer(((Card)componentList.get(currentCard)).comp.getParent());
      }
    }
  }
}",0.933705512909979
143569,"/** 
 * Flips to the previous card of the specified container. If the currently visible card is the first one, this method flips to the last card in the layout.
 * @param parent the name of the parent container in which to do the layout.
 * @see java.awt.CardLayout#next
 */
public void previous(Container parent){
synchronized (parent.getTreeLock()) {
    checkLayout(parent);
    int newIndex=(currentCard + vector.size() - 1) % vector.size();
    show(parent,newIndex,true);
  }
}","/** 
 * Flips to the previous card of the specified container. If the currently visible card is the first one, this method flips to the last card in the layout.
 * @param parent the name of the parent container in which to do the layout.
 * @see java.awt.CardLayout#next
 */
public void previous(Container parent){
synchronized (parent.getTreeLock()) {
    checkLayout(parent);
    int newIndex=(currentCard + componentList.size() - 1) % componentList.size();
    show(parent,newIndex,true);
  }
}",0.9612244897959183
143570,"/** 
 * Flips to the last card of the container.
 * @param parent the name of the parent container in which to do the layout.
 * @see java.awt.CardLayout#first
 */
public void last(Container parent){
synchronized (parent.getTreeLock()) {
    checkLayout(parent);
    show(parent,vector.size() - 1,true);
  }
}","/** 
 * Flips to the last card of the container.
 * @param parent the name of the parent container in which to do the layout.
 * @see java.awt.CardLayout#first
 */
public void last(Container parent){
synchronized (parent.getTreeLock()) {
    checkLayout(parent);
    show(parent,componentList.size() - 1,true);
  }
}",0.9696
143571,"public void show(Container parent,int newIndex,boolean checkIndex){
  if (!vector.isEmpty() && (currentCard < vector.size()) && (!checkIndex || (currentCard != newIndex))) {
    ((Card)vector.get(currentCard)).comp.setVisible(false);
    currentCard=newIndex;
    parent.validate();
  }
}","public void show(Container parent,int newIndex,boolean checkIndex){
  if (!componentList.isEmpty() && (!checkIndex || (currentCard != newIndex))) {
    ((Card)componentList.get(currentCard)).comp.setVisible(false);
    currentCard=newIndex;
    parent.validate();
  }
}",0.5565529622980251
143572,"/** 
 * Calculates the minimum size for the specified panel.
 * @param parent the name of the parent container in which to do the layout.
 * @return the minimum dimensions required to lay out the subcomponents of the specified container.
 * @see java.awt.Container#doLayout
 * @see java.awt.CardLayout#preferredLayoutSize
 */
public Dimension minimumLayoutSize(Container parent){
synchronized (parent.getTreeLock()) {
    Insets insets=parent.getInsets();
    int ncomponents=vector.size();
    int w=0;
    int h=0;
    for (int i=0; i < ncomponents; i++) {
      Component comp=((Card)vector.get(i)).comp;
      Dimension d=comp.getMinimumSize();
      if (d.width > w) {
        w=d.width;
      }
      if (d.height > h) {
        h=d.height;
      }
    }
    return new Dimension(insets.left + insets.right + w+ hgap * 2,insets.top + insets.bottom + h+ vgap * 2);
  }
}","/** 
 * Calculates the minimum size for the specified panel.
 * @param parent the name of the parent container in which to do the layout.
 * @return the minimum dimensions required to lay out the subcomponents of the specified container.
 * @see java.awt.Container#doLayout
 * @see java.awt.CardLayout#preferredLayoutSize
 */
public Dimension minimumLayoutSize(Container parent){
synchronized (parent.getTreeLock()) {
    Insets insets=parent.getInsets();
    int ncomponents=componentList.size();
    int w=0;
    int h=0;
    for (int i=0; i < ncomponents; i++) {
      Component comp=((Card)componentList.get(i)).comp;
      Dimension d=comp.getMinimumSize();
      if (d.width > w) {
        w=d.width;
      }
      if (d.height > h) {
        h=d.height;
      }
    }
    return new Dimension(insets.left + insets.right + w+ hgap * 2,insets.top + insets.bottom + h+ vgap * 2);
  }
}",0.9784580498866212
143573,"/** 
 * Lays out the specified container using this card layout. <p> Each component in the <code>parent</code> container is reshaped to be the size of the container, minus space for surrounding insets, horizontal gaps, and vertical gaps.
 * @param parent the name of the parent container in which to do the layout.
 * @see java.awt.Container#doLayout
 */
public void layoutContainer(Container parent){
synchronized (parent.getTreeLock()) {
    Insets insets=parent.getInsets();
    if (!vector.isEmpty() && currentCard < vector.size()) {
      final Component comp=((Card)vector.get(currentCard)).comp;
      comp.setBounds(hgap + insets.left,vgap + insets.top,parent.getWidth() - (hgap * 2 + insets.left + insets.right),parent.getHeight() - (vgap * 2 + insets.top + insets.bottom));
      if (!comp.isVisible()) {
        comp.setVisible(true);
      }
    }
  }
}","/** 
 * Lays out the specified container using this card layout. <p> Each component in the <code>parent</code> container is reshaped to be the size of the container, minus space for surrounding insets, horizontal gaps, and vertical gaps.
 * @param parent the name of the parent container in which to do the layout.
 * @see java.awt.Container#doLayout
 */
public void layoutContainer(Container parent){
synchronized (parent.getTreeLock()) {
    Insets insets=parent.getInsets();
    if (!componentList.isEmpty()) {
      final Component comp=((Card)componentList.get(currentCard)).comp;
      comp.setBounds(hgap + insets.left,vgap + insets.top,parent.getWidth() - (hgap * 2 + insets.left + insets.right),parent.getHeight() - (vgap * 2 + insets.top + insets.bottom));
      if (!comp.isVisible()) {
        comp.setVisible(true);
      }
    }
  }
}",0.9176882661996496
143574,"/** 
 * @deprecated replaced by <code>addLayoutComponent(Component, Object)</code>.
 */
@Deprecated public void addLayoutComponent(String name,Component comp){
synchronized (comp.getTreeLock()) {
    if (!vector.isEmpty()) {
      comp.setVisible(false);
    }
    for (int i=0; i < vector.size(); i++) {
      if (((Card)vector.get(i)).name.equals(name)) {
        vector.remove(i);
        break;
      }
    }
    vector.add(new Card(name,comp));
  }
}","/** 
 * @deprecated replaced by <code>addLayoutComponent(Component, Object)</code>.
 */
@Deprecated public void addLayoutComponent(String name,Component comp){
synchronized (comp.getTreeLock()) {
    if (!componentList.isEmpty()) {
      comp.setVisible(false);
    }
    for (int i=0; i < componentList.size(); i++) {
      if (((Card)componentList.get(i)).name.equals(name)) {
        componentList.remove(i);
        break;
      }
    }
    componentList.add(new Card(name,comp));
  }
}",0.8888888888888888
143575,"public void put(String name,ServoyDivDialog divDialog){
  divDialogsMap.put(name,divDialog);
  dialogsOrderedByOpenSequence.add(divDialog);
}","public void put(String name,ServoyDivDialog divDialog){
  ServoyDivDialog oldDivDialog=divDialogsMap.put(name,divDialog);
  if (oldDivDialog != null)   dialogsOrderedByOpenSequence.remove(oldDivDialog);
  dialogsOrderedByOpenSequence.add(divDialog);
}",0.6938775510204082
143576,"public void onClose(AjaxRequestTarget target){
  divDialogRepeater.remove(divDialog);
  divDialogs.remove(divDialog.getPageMapName());
  if (divDialogs.size() == 0) {
    divDialogsParent.setVisible(false);
  }
 else {
    jsActionBuffer.addAction(new DivDialogAction(divDialog,DivDialogAction.OP_DIALOG_ADDED_OR_REMOVED,new Object[]{divDialogsParent}));
  }
  divDialog.setPageMapName(null);
  restoreFocusedComponentInParentIfNeeded();
  WebEventExecutor.generateResponse(target,findPage());
}","public void onClose(AjaxRequestTarget target){
  divDialogRepeater.remove(divDialog);
  String divDialogPageMapName=divDialog.getPageMapName();
  if (divDialogs.get(divDialogPageMapName) == divDialog) {
    divDialogs.remove(divDialogPageMapName);
  }
  if (divDialogs.size() == 0) {
    divDialogsParent.setVisible(false);
  }
 else {
    jsActionBuffer.addAction(new DivDialogAction(divDialog,DivDialogAction.OP_DIALOG_ADDED_OR_REMOVED,new Object[]{divDialogsParent}));
  }
  divDialog.setPageMapName(null);
  restoreFocusedComponentInParentIfNeeded();
  WebEventExecutor.generateResponse(target,findPage());
}",0.8310749774164409
143577,"private ServoyDivDialog createDivDialog(MainPage dialogContainer,String name){
  final ServoyDivDialog divDialog=new ServoyDivDialog(divDialogRepeater.newChildId(),true);
  divDialog.setPageMapName(null);
  divDialog.setCookieName(COOKIE_PREFIX + name);
  divDialog.setModal(true);
  dialogContainer.showingInDialog=true;
  dialogContainer.showingInWindow=false;
  divDialog.setPageCreator(new ModalWindow.PageCreator(){
    private static final long serialVersionUID=1L;
    public Page createPage(){
      return (MainPage)((FormManager)client.getFormManager()).getOrCreateMainContainer(divDialog.getPageMapName());
    }
  }
);
  divDialog.setWindowClosedCallback(new ModalWindow.WindowClosedCallback(){
    private static final long serialVersionUID=1L;
    public void onClose(    AjaxRequestTarget target){
      divDialogRepeater.remove(divDialog);
      divDialogs.remove(divDialog.getPageMapName());
      if (divDialogs.size() == 0) {
        divDialogsParent.setVisible(false);
      }
 else {
        jsActionBuffer.addAction(new DivDialogAction(divDialog,DivDialogAction.OP_DIALOG_ADDED_OR_REMOVED,new Object[]{divDialogsParent}));
      }
      divDialog.setPageMapName(null);
      restoreFocusedComponentInParentIfNeeded();
      WebEventExecutor.generateResponse(target,findPage());
    }
  }
);
  divDialog.setCloseButtonCallback(new ModalWindow.CloseButtonCallback(){
    private static final long serialVersionUID=1L;
    public boolean onCloseButtonClicked(    AjaxRequestTarget target){
      if (!divDialog.isShown()) {
        return false;
      }
      FormManager fm=((FormManager)client.getFormManager());
      IMainContainer divDialogContainer=fm.getMainContainer(divDialog.getPageMapName());
      IMainContainer currentContainer=fm.getCurrentContainer();
      if (divDialogContainer instanceof MainPage) {
        ((MainPage)divDialogContainer).touch();
      }
      fm.setCurrentContainer(divDialogContainer,divDialogContainer.getContainerName());
      if (client.getEventDispatcher() != null) {
        client.getEventDispatcher().addEvent(new Runnable(){
          public void run(){
            client.getRuntimeWindowManager().closeFormInWindow(divDialog.getPageMapName(),divDialog.getCloseAll());
          }
        }
);
      }
 else {
        client.getRuntimeWindowManager().closeFormInWindow(divDialog.getPageMapName(),divDialog.getCloseAll());
      }
      fm.setCurrentContainer(currentContainer,currentContainer.getContainerName());
      if (divDialogContainer instanceof MainPage) {
        target.addComponent(divDialog);
      }
      WebEventExecutor.generateResponse(target,divDialog.getPage());
      return false;
    }
  }
);
  divDialogRepeater.add(divDialog);
  divDialogsParent.setVisible(true);
  jsActionBuffer.addAction(new DivDialogAction(divDialog,DivDialogAction.OP_DIALOG_ADDED_OR_REMOVED,new Object[]{divDialogsParent}));
  divDialogs.put(name,divDialog);
  return divDialog;
}","private ServoyDivDialog createDivDialog(MainPage dialogContainer,String name){
  final ServoyDivDialog divDialog=new ServoyDivDialog(divDialogRepeater.newChildId(),true);
  divDialog.setPageMapName(null);
  divDialog.setCookieName(COOKIE_PREFIX + name);
  divDialog.setModal(true);
  dialogContainer.showingInDialog=true;
  dialogContainer.showingInWindow=false;
  divDialog.setPageCreator(new ModalWindow.PageCreator(){
    private static final long serialVersionUID=1L;
    public Page createPage(){
      return (MainPage)((FormManager)client.getFormManager()).getOrCreateMainContainer(divDialog.getPageMapName());
    }
  }
);
  divDialog.setWindowClosedCallback(new ModalWindow.WindowClosedCallback(){
    private static final long serialVersionUID=1L;
    public void onClose(    AjaxRequestTarget target){
      divDialogRepeater.remove(divDialog);
      String divDialogPageMapName=divDialog.getPageMapName();
      if (divDialogs.get(divDialogPageMapName) == divDialog) {
        divDialogs.remove(divDialogPageMapName);
      }
      if (divDialogs.size() == 0) {
        divDialogsParent.setVisible(false);
      }
 else {
        jsActionBuffer.addAction(new DivDialogAction(divDialog,DivDialogAction.OP_DIALOG_ADDED_OR_REMOVED,new Object[]{divDialogsParent}));
      }
      divDialog.setPageMapName(null);
      restoreFocusedComponentInParentIfNeeded();
      WebEventExecutor.generateResponse(target,findPage());
    }
  }
);
  divDialog.setCloseButtonCallback(new ModalWindow.CloseButtonCallback(){
    private static final long serialVersionUID=1L;
    public boolean onCloseButtonClicked(    AjaxRequestTarget target){
      if (!divDialog.isShown()) {
        return false;
      }
      FormManager fm=((FormManager)client.getFormManager());
      IMainContainer divDialogContainer=fm.getMainContainer(divDialog.getPageMapName());
      IMainContainer currentContainer=fm.getCurrentContainer();
      if (divDialogContainer instanceof MainPage) {
        ((MainPage)divDialogContainer).touch();
      }
      fm.setCurrentContainer(divDialogContainer,divDialogContainer.getContainerName());
      if (client.getEventDispatcher() != null) {
        client.getEventDispatcher().addEvent(new Runnable(){
          public void run(){
            client.getRuntimeWindowManager().closeFormInWindow(divDialog.getPageMapName(),divDialog.getCloseAll());
          }
        }
);
      }
 else {
        client.getRuntimeWindowManager().closeFormInWindow(divDialog.getPageMapName(),divDialog.getCloseAll());
      }
      fm.setCurrentContainer(currentContainer,currentContainer.getContainerName());
      if (divDialogContainer instanceof MainPage) {
        target.addComponent(divDialog);
      }
      WebEventExecutor.generateResponse(target,divDialog.getPage());
      return false;
    }
  }
);
  divDialogRepeater.add(divDialog);
  divDialogsParent.setVisible(true);
  jsActionBuffer.addAction(new DivDialogAction(divDialog,DivDialogAction.OP_DIALOG_ADDED_OR_REMOVED,new Object[]{divDialogsParent}));
  divDialogs.put(name,divDialog);
  return divDialog;
}",0.9669599867175828
143578,"public void setTitle(String name){
  Solution solution=this.client.getSolution();
  String titleString=""String_Node_Str"";
  String solutionTitle=solution.getTitleText();
  if (solutionTitle == null) {
    titleString=solution.getName();
  }
 else   if (!solutionTitle.equals(""String_Node_Str"")) {
    titleString=solutionTitle;
  }
  titleString=client.getI18NMessageIfPrefixed(titleString);
  if (name != null && !name.trim().equals(""String_Node_Str"") && !""String_Node_Str"".equals(name) && main != null) {
    String nameString=client.getI18NMessageIfPrefixed(name);
    FormController formController=main.getController();
    if (formController != null) {
      String name2=Text.processTags(nameString,formController.getTagResolver());
      if (name2 != null)       nameString=name2;
    }
 else {
      String name2=Text.processTags(nameString,TagResolver.createResolver((IRecordInternal)new PrototypeState(null)));
      if (name2 != null)       nameString=name2;
    }
    if (!nameString.trim().equals(""String_Node_Str"")) {
      if (""String_Node_Str"".equals(titleString)) {
        titleString+=nameString;
      }
 else {
        titleString+=""String_Node_Str"" + nameString;
      }
    }
  }
  String appName=""String_Node_Str"";
  boolean branding=Utils.getAsBoolean(client.getSettings().getProperty(""String_Node_Str"",""String_Node_Str""));
  String appTitle=client.getSettings().getProperty(""String_Node_Str"");
  if (branding && appTitle != null) {
    appName=appTitle;
  }
  if (titleString.equals(""String_Node_Str"")) {
    titleString=appName;
  }
 else {
    titleString+=""String_Node_Str"" + appName;
  }
  this.title.setDefaultModelObject(titleString);
  if (getRequestCycle().getRequestTarget() instanceof AjaxRequestTarget)   ((AjaxRequestTarget)getRequestCycle().getRequestTarget()).addComponent(title);
}","public void setTitle(String name){
  touch();
  Solution solution=this.client.getSolution();
  String titleString=""String_Node_Str"";
  String solutionTitle=solution.getTitleText();
  if (solutionTitle == null) {
    titleString=solution.getName();
  }
 else   if (!solutionTitle.equals(""String_Node_Str"")) {
    titleString=solutionTitle;
  }
  titleString=client.getI18NMessageIfPrefixed(titleString);
  if (name != null && !name.trim().equals(""String_Node_Str"") && !""String_Node_Str"".equals(name) && main != null) {
    String nameString=client.getI18NMessageIfPrefixed(name);
    FormController formController=main.getController();
    if (formController != null) {
      String name2=Text.processTags(nameString,formController.getTagResolver());
      if (name2 != null)       nameString=name2;
    }
 else {
      String name2=Text.processTags(nameString,TagResolver.createResolver((IRecordInternal)new PrototypeState(null)));
      if (name2 != null)       nameString=name2;
    }
    if (!nameString.trim().equals(""String_Node_Str"")) {
      if (""String_Node_Str"".equals(titleString)) {
        titleString+=nameString;
      }
 else {
        titleString+=""String_Node_Str"" + nameString;
      }
    }
  }
  String appName=""String_Node_Str"";
  boolean branding=Utils.getAsBoolean(client.getSettings().getProperty(""String_Node_Str"",""String_Node_Str""));
  String appTitle=client.getSettings().getProperty(""String_Node_Str"");
  if (branding && appTitle != null) {
    appName=appTitle;
  }
  if (titleString.equals(""String_Node_Str"")) {
    titleString=appName;
  }
 else {
    titleString+=""String_Node_Str"" + appName;
  }
  this.title.setDefaultModelObject(titleString);
  if (getRequestCycle().getRequestTarget() instanceof AjaxRequestTarget)   ((AjaxRequestTarget)getRequestCycle().getRequestTarget()).addComponent(title);
}",0.9969904240766074
143579,"protected void instrumentAndReplaceBody(MarkupStream markupStream,ComponentTag openTag,CharSequence bodyText){
  boolean designMode=false;
  IFormUIInternal<?> formui=findParent(IFormUIInternal.class);
  if (formui != null && formui.isDesignMode()) {
    designMode=true;
  }
  String cssId=null;
  if (WebBaseButton.getImageDisplayURL(this) != null) {
    cssId=getMarkupId() + ""String_Node_Str"";
  }
  int anchor=Utils.getAsBoolean(application.getRuntimeProperties().get(""String_Node_Str"")) ? anchors : 0;
  replaceComponentTagBody(markupStream,openTag,instrumentBodyText(this,bodyText,halign,valign,false,border,margin,cssId,(char)getDisplayedMnemonic(),getMarkupId(),getImageDisplayURL(this),size == null ? 0 : size.height,true,designMode ? null : cursor,false,anchor));
}","protected void instrumentAndReplaceBody(MarkupStream markupStream,ComponentTag openTag,CharSequence bodyText){
  boolean designMode=false;
  IFormUIInternal<?> formui=findParent(IFormUIInternal.class);
  if (formui != null && formui.isDesignMode()) {
    designMode=true;
  }
  String cssId=null;
  if (WebBaseButton.getImageDisplayURL(this) != null) {
    cssId=getMarkupId() + ""String_Node_Str"";
  }
  int anchor=Utils.getAsBoolean(application.getRuntimeProperties().get(""String_Node_Str"")) ? anchors : 0;
  replaceComponentTagBody(markupStream,openTag,instrumentBodyText(bodyText,halign,valign,false,border,margin,cssId,(char)getDisplayedMnemonic(),getMarkupId(),getImageDisplayURL(this),size == null ? 0 : size.height,true,designMode ? null : cursor,false,anchor));
}",0.9967679379444084
143580,"@SuppressWarnings(""String_Node_Str"") protected static String instrumentBodyText(Component component,CharSequence bodyText,int halign,int valign,boolean hasHtmlOrImage,Border border,Insets margin,String cssid,char mnemonic,String elementID,String imgURL,int height,boolean isButton,Cursor bodyCursor,boolean isAnchored,int anchors){
  boolean isElementAnchored=anchors != IAnchorConstants.DEFAULT;
  Insets padding=null;
  Insets borderMargin=null;
  boolean usePadding=false;
  if (border == null) {
    padding=margin;
  }
 else   if (border instanceof EmptyBorder) {
    usePadding=true;
    padding=ComponentFactoryHelper.getBorderInsetsForNoComponent(border);
  }
 else   if (border instanceof CompoundBorder) {
    Border inside=((CompoundBorder)border).getInsideBorder();
    if (inside instanceof EmptyBorder) {
      usePadding=true;
      padding=ComponentFactoryHelper.getBorderInsetsForNoComponent(inside);
    }
    Border outside=((CompoundBorder)border).getOutsideBorder();
    if (outside != null) {
      borderMargin=ComponentFactoryHelper.getBorderInsetsForNoComponent(outside);
    }
  }
 else   if (!(border instanceof BevelBorder) && !(border instanceof EtchedBorder)) {
    if (border instanceof TitledBorder) {
      usePadding=true;
      padding=new Insets(5,7,5,7);
      padding.top+=ComponentFactoryHelper.getTitledBorderHeight(border);
    }
 else {
      padding=ComponentFactoryHelper.getBorderInsetsForNoComponent(border);
    }
  }
  StringBuffer instrumentedBodyText=new StringBuffer();
  String displayMode=component instanceof WebDataHtmlView ? ""String_Node_Str"" : ""String_Node_Str"";
  instrumentedBodyText.append(""String_Node_Str"" + (bodyCursor == null ? ""String_Node_Str"" : ""String_Node_Str"" + (bodyCursor.getType() == Cursor.HAND_CURSOR ? ""String_Node_Str"" : ""String_Node_Str"") + ""String_Node_Str"") + ""String_Node_Str""+ displayMode+ ""String_Node_Str"");
  int top=0;
  int bottom=0;
  int left=0;
  int right=0;
  if (padding != null && usePadding) {
    top=padding.top;
    bottom=padding.bottom;
    left=padding.left;
    right=padding.right;
  }
  instrumentedBodyText.append(""String_Node_Str"" + left + ""String_Node_Str"");
  instrumentedBodyText.append(""String_Node_Str"" + right + ""String_Node_Str"");
  if (halign == ISupportTextSetup.LEFT)   instrumentedBodyText.append(""String_Node_Str"");
 else   if (halign == ISupportTextSetup.RIGHT)   instrumentedBodyText.append(""String_Node_Str"");
 else   instrumentedBodyText.append(""String_Node_Str"");
  if (cssid == null) {
    if (valign == ISupportTextSetup.TOP)     instrumentedBodyText.append(""String_Node_Str"" + top + ""String_Node_Str"");
 else     if (valign == ISupportTextSetup.BOTTOM)     instrumentedBodyText.append(""String_Node_Str"" + bottom + ""String_Node_Str"");
  }
  if (!hasHtmlOrImage)   instrumentedBodyText.append(""String_Node_Str"");
  if (hasHtmlOrImage && valign != ISupportTextSetup.CENTER && cssid == null)   instrumentedBodyText.append(""String_Node_Str"");
 else   if ((cssid != null) || (valign != ISupportTextSetup.CENTER))   instrumentedBodyText.append(""String_Node_Str"");
 else   if (!isButton && !hasHtmlOrImage && imgURL == null) {
    int innerHeight=height;
    if (padding != null)     innerHeight-=padding.top + padding.bottom;
    if (borderMargin != null)     innerHeight-=borderMargin.top + borderMargin.bottom;
    instrumentedBodyText.append(""String_Node_Str"" + innerHeight + ""String_Node_Str"");
  }
  if (isAnchored) {
    instrumentedBodyText.append(""String_Node_Str"");
  }
  if (cssid != null) {
    instrumentedBodyText.append(""String_Node_Str"");
  }
  instrumentedBodyText.append(""String_Node_Str"");
  if (cssid != null) {
    instrumentedBodyText.append(""String_Node_Str"");
    instrumentedBodyText.append(cssid);
    instrumentedBodyText.append(""String_Node_Str"");
  }
  instrumentedBodyText.append(""String_Node_Str"");
  if (!Strings.isEmpty(bodyText)) {
    CharSequence bodyTextValue=bodyText;
    if (mnemonic > 0 && !hasHtmlOrImage) {
      StringBuffer sbBodyText=new StringBuffer(bodyTextValue);
      int mnemonicIdx=sbBodyText.indexOf(Character.toString(mnemonic));
      if (mnemonicIdx != -1) {
        sbBodyText.insert(mnemonicIdx + 1,""String_Node_Str"");
        sbBodyText.insert(mnemonicIdx,""String_Node_Str"");
        bodyTextValue=sbBodyText.toString();
      }
    }
    if (imgURL != null) {
      String onLoadCall=isElementAnchored ? ""String_Node_Str"" + elementID + ""String_Node_Str""+ valign+ ""String_Node_Str"" : ""String_Node_Str"";
      StringBuffer sb=new StringBuffer(""String_Node_Str"").append(elementID).append(""String_Node_Str"").append(""String_Node_Str"").append(imgURL).append(""String_Node_Str"" + (isElementAnchored ? ""String_Node_Str"" : ""String_Node_Str"") + ""String_Node_Str"").append(onLoadCall).append(""String_Node_Str"").append(bodyTextValue);
      bodyTextValue=sb.toString();
    }
    instrumentedBodyText.append(bodyTextValue);
  }
 else   if (imgURL != null) {
    instrumentedBodyText.append(""String_Node_Str"");
    instrumentedBodyText.append(elementID).append(""String_Node_Str"");
    instrumentedBodyText.append(isElementAnchored ? ""String_Node_Str"" : ""String_Node_Str"");
    instrumentedBodyText.append(""String_Node_Str"");
    instrumentedBodyText.append(imgURL);
    String onLoadCall=isElementAnchored ? ""String_Node_Str"" + elementID + ""String_Node_Str""+ valign+ ""String_Node_Str"" : ""String_Node_Str"";
    instrumentedBodyText.append(""String_Node_Str"").append(onLoadCall).append(""String_Node_Str"");
  }
  instrumentedBodyText.append(""String_Node_Str"");
  if (border instanceof TitledBorder) {
    instrumentedBodyText=new StringBuffer(getTitledBorderOpenMarkup((TitledBorder)border) + instrumentedBodyText.toString() + getTitledBorderCloseMarkup());
  }
  if (border instanceof CompoundBorder) {
    Border outside=((CompoundBorder)border).getOutsideBorder();
    if (outside != null && outside instanceof TitledBorder) {
      instrumentedBodyText=new StringBuffer(getTitledBorderOpenMarkup((TitledBorder)outside) + instrumentedBodyText.toString() + getTitledBorderCloseMarkup());
    }
  }
  return instrumentedBodyText.toString();
}","@SuppressWarnings(""String_Node_Str"") protected static String instrumentBodyText(CharSequence bodyText,int halign,int valign,boolean hasHtmlOrImage,Border border,Insets margin,String cssid,char mnemonic,String elementID,String imgURL,int height,boolean isButton,Cursor bodyCursor,boolean isAnchored,int anchors){
  boolean isElementAnchored=anchors != IAnchorConstants.DEFAULT;
  Insets padding=null;
  Insets borderMargin=null;
  boolean usePadding=false;
  if (border == null) {
    padding=margin;
  }
 else   if (border instanceof EmptyBorder && !(border instanceof MatteBorder)) {
    usePadding=true;
    padding=ComponentFactoryHelper.getBorderInsetsForNoComponent(border);
  }
 else   if (border instanceof CompoundBorder) {
    Border inside=((CompoundBorder)border).getInsideBorder();
    if (inside instanceof EmptyBorder && !(border instanceof MatteBorder)) {
      usePadding=true;
      padding=ComponentFactoryHelper.getBorderInsetsForNoComponent(inside);
    }
    Border outside=((CompoundBorder)border).getOutsideBorder();
    if (outside != null) {
      borderMargin=ComponentFactoryHelper.getBorderInsetsForNoComponent(outside);
    }
  }
 else   if (!(border instanceof BevelBorder) && !(border instanceof EtchedBorder)) {
    if (border instanceof TitledBorder) {
      usePadding=true;
      padding=new Insets(5,7,5,7);
      padding.top+=ComponentFactoryHelper.getTitledBorderHeight(border);
    }
 else {
      padding=ComponentFactoryHelper.getBorderInsetsForNoComponent(border);
    }
  }
  StringBuffer instrumentedBodyText=new StringBuffer();
  instrumentedBodyText.append(""String_Node_Str"" + (bodyCursor == null ? ""String_Node_Str"" : ""String_Node_Str"" + (bodyCursor.getType() == Cursor.HAND_CURSOR ? ""String_Node_Str"" : ""String_Node_Str"") + ""String_Node_Str"") + ""String_Node_Str"");
  int top=0;
  int bottom=0;
  int left=0;
  int right=0;
  if (padding != null && usePadding) {
    top=padding.top;
    bottom=padding.bottom;
    left=padding.left;
    right=padding.right;
  }
  instrumentedBodyText.append(""String_Node_Str"" + left + ""String_Node_Str"");
  instrumentedBodyText.append(""String_Node_Str"" + right + ""String_Node_Str"");
  if (halign == ISupportTextSetup.LEFT)   instrumentedBodyText.append(""String_Node_Str"");
 else   if (halign == ISupportTextSetup.RIGHT)   instrumentedBodyText.append(""String_Node_Str"");
 else   instrumentedBodyText.append(""String_Node_Str"");
  if (cssid == null) {
    if (valign == ISupportTextSetup.TOP)     instrumentedBodyText.append(""String_Node_Str"" + top + ""String_Node_Str"");
 else     if (valign == ISupportTextSetup.BOTTOM)     instrumentedBodyText.append(""String_Node_Str"" + bottom + ""String_Node_Str"");
  }
  if (!hasHtmlOrImage)   instrumentedBodyText.append(""String_Node_Str"");
  if (hasHtmlOrImage && valign != ISupportTextSetup.CENTER && cssid == null)   instrumentedBodyText.append(""String_Node_Str"");
 else   if ((cssid != null) || (valign != ISupportTextSetup.CENTER))   instrumentedBodyText.append(""String_Node_Str"");
 else   if (!isButton && !hasHtmlOrImage && imgURL == null) {
    int innerHeight=height;
    if (padding != null)     innerHeight-=padding.top + padding.bottom;
    if (borderMargin != null)     innerHeight-=borderMargin.top + borderMargin.bottom;
    instrumentedBodyText.append(""String_Node_Str"" + innerHeight + ""String_Node_Str"");
  }
  if (isAnchored) {
    instrumentedBodyText.append(""String_Node_Str"");
  }
  if (cssid != null) {
    instrumentedBodyText.append(""String_Node_Str"");
  }
  instrumentedBodyText.append(""String_Node_Str"");
  if (cssid != null) {
    instrumentedBodyText.append(""String_Node_Str"");
    instrumentedBodyText.append(cssid);
    instrumentedBodyText.append(""String_Node_Str"");
  }
  instrumentedBodyText.append(""String_Node_Str"");
  if (!Strings.isEmpty(bodyText)) {
    CharSequence bodyTextValue=bodyText;
    if (mnemonic > 0 && !hasHtmlOrImage) {
      StringBuffer sbBodyText=new StringBuffer(bodyTextValue);
      int mnemonicIdx=sbBodyText.indexOf(Character.toString(mnemonic));
      if (mnemonicIdx != -1) {
        sbBodyText.insert(mnemonicIdx + 1,""String_Node_Str"");
        sbBodyText.insert(mnemonicIdx,""String_Node_Str"");
        bodyTextValue=sbBodyText.toString();
      }
    }
    if (imgURL != null) {
      String onLoadCall=isElementAnchored ? ""String_Node_Str"" + elementID + ""String_Node_Str""+ valign+ ""String_Node_Str"" : ""String_Node_Str"";
      StringBuffer sb=new StringBuffer(""String_Node_Str"").append(elementID).append(""String_Node_Str"").append(""String_Node_Str"").append(imgURL).append(""String_Node_Str"" + (isElementAnchored ? ""String_Node_Str"" : ""String_Node_Str"") + ""String_Node_Str"").append(onLoadCall).append(""String_Node_Str"").append(bodyTextValue);
      bodyTextValue=sb.toString();
    }
    instrumentedBodyText.append(bodyTextValue);
  }
 else   if (imgURL != null) {
    instrumentedBodyText.append(""String_Node_Str"");
    instrumentedBodyText.append(elementID).append(""String_Node_Str"");
    instrumentedBodyText.append(isElementAnchored ? ""String_Node_Str"" : ""String_Node_Str"");
    instrumentedBodyText.append(""String_Node_Str"");
    instrumentedBodyText.append(imgURL);
    String onLoadCall=isElementAnchored ? ""String_Node_Str"" + elementID + ""String_Node_Str""+ valign+ ""String_Node_Str"" : ""String_Node_Str"";
    instrumentedBodyText.append(""String_Node_Str"").append(onLoadCall).append(""String_Node_Str"");
  }
  instrumentedBodyText.append(""String_Node_Str"");
  if (border instanceof TitledBorder) {
    instrumentedBodyText=new StringBuffer(getTitledBorderOpenMarkup((TitledBorder)border) + instrumentedBodyText.toString() + getTitledBorderCloseMarkup());
  }
  if (border instanceof CompoundBorder) {
    Border outside=((CompoundBorder)border).getOutsideBorder();
    if (outside != null && outside instanceof TitledBorder) {
      instrumentedBodyText=new StringBuffer(getTitledBorderOpenMarkup((TitledBorder)outside) + instrumentedBodyText.toString() + getTitledBorderCloseMarkup());
    }
  }
  return instrumentedBodyText.toString();
}",0.981611280613507
143581,"@SuppressWarnings(""String_Node_Str"") protected void instrumentAndReplaceBody(MarkupStream markupStream,ComponentTag openTag,CharSequence bodyText){
  boolean hasHtmlOrImage=hasHtmlOrImage();
  String cssid=hasHtmlOrImage ? getMarkupId() + ""String_Node_Str"" : null;
  boolean designMode=false;
  IFormUIInternal<?> formui=findParent(IFormUIInternal.class);
  if (formui != null && formui.isDesignMode()) {
    designMode=true;
  }
  int anchor=Utils.getAsBoolean(application.getRuntimeProperties().get(""String_Node_Str"")) ? anchors : 0;
  replaceComponentTagBody(markupStream,openTag,WebBaseButton.instrumentBodyText(this,bodyText,halign,valign,hasHtmlOrImage,border,null,cssid,(char)getDisplayedMnemonic(),getMarkupId(),WebBaseButton.getImageDisplayURL(this),size.height,false,designMode ? null : cursor,false,anchor));
}","@SuppressWarnings(""String_Node_Str"") protected void instrumentAndReplaceBody(MarkupStream markupStream,ComponentTag openTag,CharSequence bodyText){
  boolean hasHtmlOrImage=hasHtmlOrImage();
  String cssid=hasHtmlOrImage ? getMarkupId() + ""String_Node_Str"" : null;
  boolean designMode=false;
  IFormUIInternal<?> formui=findParent(IFormUIInternal.class);
  if (formui != null && formui.isDesignMode()) {
    designMode=true;
  }
  int anchor=Utils.getAsBoolean(application.getRuntimeProperties().get(""String_Node_Str"")) ? anchors : 0;
  replaceComponentTagBody(markupStream,openTag,WebBaseButton.instrumentBodyText(bodyText,halign,valign,hasHtmlOrImage,border,null,cssid,(char)getDisplayedMnemonic(),getMarkupId(),WebBaseButton.getImageDisplayURL(this),size.height,false,designMode ? null : cursor,false,anchor));
}",0.9969456322541234
143582,"protected void instrumentAndReplaceBody(MarkupStream markupStream,ComponentTag openTag,CharSequence bodyText){
  boolean hasHtmlOrImage=hasHtmlOrImage();
  String cssid=getCSSId();
  boolean designMode=false;
  IFormUIInternal<?> formui=findParent(IFormUIInternal.class);
  if (formui != null && formui.isDesignMode()) {
    designMode=true;
  }
  int anchor=Utils.getAsBoolean(application.getRuntimeProperties().get(""String_Node_Str"")) ? anchors : 0;
  replaceComponentTagBody(markupStream,openTag,WebBaseButton.instrumentBodyText(this,bodyText,halign,valign,hasHtmlOrImage,border,margin,cssid,(char)getDisplayedMnemonic(),getMarkupId(),WebBaseButton.getImageDisplayURL(this),size.height,false,designMode ? null : cursor,isAnchored(),anchor));
}","protected void instrumentAndReplaceBody(MarkupStream markupStream,ComponentTag openTag,CharSequence bodyText){
  boolean hasHtmlOrImage=hasHtmlOrImage();
  String cssid=getCSSId();
  boolean designMode=false;
  IFormUIInternal<?> formui=findParent(IFormUIInternal.class);
  if (formui != null && formui.isDesignMode()) {
    designMode=true;
  }
  int anchor=Utils.getAsBoolean(application.getRuntimeProperties().get(""String_Node_Str"")) ? anchors : 0;
  replaceComponentTagBody(markupStream,openTag,WebBaseButton.instrumentBodyText(bodyText,halign,valign,hasHtmlOrImage,border,margin,cssid,(char)getDisplayedMnemonic(),getMarkupId(),WebBaseButton.getImageDisplayURL(this),size.height,false,designMode ? null : cursor,isAnchored(),anchor));
}",0.9966375252185607
143583,"@Override protected void destroySolutionSettings(){
  super.destroySolutionSettings();
  Session.get().setMetaData(Session.PAGEMAP_ACCESS_MDK,null);
}","@Override protected void destroySolutionSettings(){
  super.destroySolutionSettings();
  if (RequestCycle.get() != null)   Session.get().setMetaData(Session.PAGEMAP_ACCESS_MDK,null);
}",0.8982035928143712
143584,"public void destroy(){
  getListModelWrapper().deregister();
  removeKeyListener(navigationKeyListener);
}","public void destroy(){
  getListModelWrapper().deregister();
}",0.7380952380952381
143585,"public DataComboBox(IApplication application,RuntimeDataCombobox scriptable,IValueList vl){
  super();
  setHorizontalAlignment(SwingConstants.LEFT);
  hackDefaultPopupWidthBehavior();
  this.application=application;
  this.vl=vl;
  eventExecutor=new EventExecutor(this);
  list=new ComboModelListModelWrapper(vl,false,true);
  setModel(list);
  accesibleStateHolder=new AccessibleStateHolder(new AccessibleStateApplier(){
    public void setEditable(    boolean editable){
      DataComboBox.this.setComboEditable(editable);
    }
    public void setEnabled(    boolean enabled){
      if (isEnabled() != enabled) {
        DataComboBox.this.setEnabled(enabled);
      }
    }
    public void setLabelsEnabled(    boolean labelsEnabled){
      if (labels != null) {
        for (int i=0; i < labels.size(); i++) {
          ILabel label=labels.get(i);
          label.setComponentEnabled(labelsEnabled);
        }
      }
    }
  }
);
  setMaximumRowCount(MAXIMUM_ROWS);
  closePopupDocumentListener=new DocumentListener(){
    public void changedUpdate(    DocumentEvent e){
      if (isPopupVisible()) {
        hidePopup();
      }
    }
    public void insertUpdate(    DocumentEvent e){
      if (isPopupVisible()) {
        hidePopup();
      }
    }
    public void removeUpdate(    DocumentEvent e){
      if (isPopupVisible()) {
        hidePopup();
      }
    }
  }
;
  putClientProperty(""String_Node_Str"",""String_Node_Str"");
  if (UIManager.getLookAndFeel().getClass().getName().toUpperCase().indexOf(""String_Node_Str"") < 0) {
    putClientProperty(""String_Node_Str"",Boolean.TRUE);
  }
  UIManager.put(""String_Node_Str"",Boolean.TRUE);
  setRenderer(new DividerListCellRenderer(getRenderer()));
  this.scriptable=scriptable;
  Object o=getUI().getAccessibleChild(this,0);
  if (o instanceof ComboPopup) {
    ((ComboPopup)o).getList().setSelectionModel(new DefaultListSelectionModel(){
      @Override public void setSelectionInterval(      int index0,      int index1){
        int leftInd=index0;
        int rightInd=index1;
        if (isNavigationKeyOn) {
          Object x=getListModelWrapper().get(index0);
          if (x == IValueList.SEPARATOR) {
            int index=getMinSelectionIndex();
            if (index < index0) {
              leftInd++;
              rightInd++;
            }
 else {
              leftInd--;
              rightInd--;
            }
          }
        }
        super.setSelectionInterval(leftInd,rightInd);
      }
    }
);
  }
  navigationKeyListener=new KeyAdapter(){
    @Override public void keyPressed(    KeyEvent e){
      isNavigationKeyOn=e.getKeyCode() == KeyEvent.VK_UP || e.getKeyCode() == KeyEvent.VK_DOWN;
    }
    @Override public void keyReleased(    KeyEvent e){
      isNavigationKeyOn=false;
    }
  }
;
  addKeyListener(navigationKeyListener);
}","public DataComboBox(IApplication application,RuntimeDataCombobox scriptable,IValueList vl){
  super();
  setHorizontalAlignment(SwingConstants.LEFT);
  hackDefaultPopupWidthBehavior();
  this.application=application;
  this.vl=vl;
  eventExecutor=new EventExecutor(this);
  list=new ComboModelListModelWrapper(vl,false,true);
  setModel(list);
  accesibleStateHolder=new AccessibleStateHolder(new AccessibleStateApplier(){
    public void setEditable(    boolean editable){
      DataComboBox.this.setComboEditable(editable);
    }
    public void setEnabled(    boolean enabled){
      if (isEnabled() != enabled) {
        DataComboBox.this.setEnabled(enabled);
      }
    }
    public void setLabelsEnabled(    boolean labelsEnabled){
      if (labels != null) {
        for (int i=0; i < labels.size(); i++) {
          ILabel label=labels.get(i);
          label.setComponentEnabled(labelsEnabled);
        }
      }
    }
  }
);
  setMaximumRowCount(MAXIMUM_ROWS);
  closePopupDocumentListener=new DocumentListener(){
    public void changedUpdate(    DocumentEvent e){
      if (isPopupVisible()) {
        hidePopup();
      }
    }
    public void insertUpdate(    DocumentEvent e){
      if (isPopupVisible()) {
        hidePopup();
      }
    }
    public void removeUpdate(    DocumentEvent e){
      if (isPopupVisible()) {
        hidePopup();
      }
    }
  }
;
  putClientProperty(""String_Node_Str"",""String_Node_Str"");
  if (UIManager.getLookAndFeel().getClass().getName().toUpperCase().indexOf(""String_Node_Str"") < 0) {
    putClientProperty(""String_Node_Str"",Boolean.TRUE);
  }
  UIManager.put(""String_Node_Str"",Boolean.TRUE);
  setRenderer(new DividerListCellRenderer(getRenderer()));
  this.scriptable=scriptable;
  Object o=getUI().getAccessibleChild(this,0);
  if (o instanceof ComboPopup) {
    ((ComboPopup)o).getList().setSelectionModel(new DefaultListSelectionModel(){
      @Override public void setSelectionInterval(      int index0,      int index1){
        int leftInd=index0;
        int rightInd=index1;
        Object x=getListModelWrapper().get(index0);
        if (x == IValueList.SEPARATOR) {
          if (lastPopupHighlightRequested != index0) {
            int index=getMinSelectionIndex();
            if (index < index0) {
              leftInd++;
              rightInd++;
            }
 else {
              leftInd--;
              rightInd--;
            }
            super.setSelectionInterval(leftInd,rightInd);
          }
        }
 else         super.setSelectionInterval(leftInd,rightInd);
        lastPopupHighlightRequested=index0;
      }
    }
);
  }
  AbstractAction navigatingViaKeyboardAction=new AbstractAction(){
    public void actionPerformed(    ActionEvent e){
      lastPopupHighlightRequested=-1;
    }
  }
;
  prependKeyPressAction(WHEN_ANCESTOR_OF_FOCUSED_COMPONENT,KeyStroke.getKeyStroke(KeyEvent.VK_UP,0),""String_Node_Str"",navigatingViaKeyboardAction);
  prependKeyPressAction(WHEN_ANCESTOR_OF_FOCUSED_COMPONENT,KeyStroke.getKeyStroke(KeyEvent.VK_DOWN,0),""String_Node_Str"",navigatingViaKeyboardAction);
}",0.8536089461199593
143586,"@Override public void setSelectedItem(Object anObject){
  Object oldSelection=selectedItemReminder;
  if (oldSelection == null || !oldSelection.equals(anObject)) {
    if (anObject != null && !isEditable()) {
      boolean found=false;
      if (anObject instanceof Date && format instanceof StateFullSimpleDateFormat) {
        StateFullSimpleDateFormat sfsd=(StateFullSimpleDateFormat)format;
        String selectedFormat=sfsd.format(anObject);
        for (int i=0; i < dataModel.getSize(); i++) {
          try {
            Object element=dataModel.getElementAt(i);
            if (!(element instanceof Date))             continue;
            String elementFormat=sfsd.format(element);
            if (selectedFormat.equals(elementFormat)) {
              found=true;
              break;
            }
          }
 catch (          RuntimeException e) {
            Debug.error(e);
          }
        }
      }
 else {
        if (dataModel instanceof ComboModelListModelWrapper) {
          found=((ComboModelListModelWrapper)dataModel).indexOf(anObject) != -1;
        }
 else         for (int i=0; i < dataModel.getSize(); i++) {
          if (anObject.equals(dataModel.getElementAt(i))) {
            found=true;
            break;
          }
        }
      }
      if (!found) {
        return;
      }
    }
    selectingItem=true;
    dataModel.setSelectedItem(anObject);
    selectingItem=false;
    if (selectedItemReminder != dataModel.getSelectedItem()) {
      selectedItemChanged();
    }
  }
  fireActionEvent();
}","@Override public void setSelectedItem(Object anObject){
  Object oldSelection=selectedItemReminder;
  if (oldSelection == null || !oldSelection.equals(anObject)) {
    if (IValueList.SEPARATOR.equals(anObject)) {
      getEditor().setItem(oldSelection);
      return;
    }
    if (anObject != null && !isEditable()) {
      boolean found=false;
      if (anObject instanceof Date && format instanceof StateFullSimpleDateFormat) {
        StateFullSimpleDateFormat sfsd=(StateFullSimpleDateFormat)format;
        String selectedFormat=sfsd.format(anObject);
        for (int i=0; i < dataModel.getSize(); i++) {
          try {
            Object element=dataModel.getElementAt(i);
            if (!(element instanceof Date))             continue;
            String elementFormat=sfsd.format(element);
            if (selectedFormat.equals(elementFormat)) {
              found=true;
              break;
            }
          }
 catch (          RuntimeException e) {
            Debug.error(e);
          }
        }
      }
 else {
        if (dataModel instanceof ComboModelListModelWrapper) {
          found=((ComboModelListModelWrapper)dataModel).indexOf(anObject) != -1;
        }
 else         for (int i=0; i < dataModel.getSize(); i++) {
          if (anObject.equals(dataModel.getElementAt(i))) {
            found=true;
            break;
          }
        }
      }
      if (!found) {
        return;
      }
    }
    selectingItem=true;
    dataModel.setSelectedItem(anObject);
    selectingItem=false;
    if (selectedItemReminder != dataModel.getSelectedItem()) {
      selectedItemChanged();
    }
  }
  fireActionEvent();
}",0.965495608531995
143587,"/** 
 * Overwritten for handling statefull dates. So we can merge dates from the selected element in the list with the orignal date
 */
@Override public void setSelectedIndex(int anIndex){
  int size=dataModel.getSize();
  if (anIndex == -1) {
    setSelectedItem(null);
  }
 else   if (anIndex >= size) {
    throw new IllegalArgumentException(""String_Node_Str"" + anIndex + ""String_Node_Str"");
  }
 else {
    Object value=dataModel.getElementAt(anIndex);
    if (IValueList.SEPARATOR.equals(value)) {
      boolean found=false;
      int i=1;
      while (!found && (anIndex + i < size || anIndex - i >= 0)) {
        if (anIndex + i < size && !IValueList.SEPARATOR.equals(dataModel.getElementAt(anIndex + i))) {
          found=true;
          setSelectedIndex(anIndex + i);
        }
 else         if (anIndex - i >= 0 && !IValueList.SEPARATOR.equals(dataModel.getElementAt(anIndex - i))) {
          found=true;
          setSelectedIndex(anIndex - i);
        }
        i++;
      }
      if (!found) {
        setSelectedItem(-1);
      }
    }
 else {
      if (value instanceof Date && format instanceof StateFullSimpleDateFormat) {
        StateFullSimpleDateFormat sfsd=(StateFullSimpleDateFormat)format;
        String stringRep=sfsd.format(value);
        try {
          sfsd.parse(stringRep);
          value=sfsd.getMergedDate();
        }
 catch (        ParseException e) {
          Debug.error(e);
        }
      }
      setSelectedItem(value);
    }
  }
}","/** 
 * Overwritten for handling statefull dates. So we can merge dates from the selected element in the list with the orignal date
 */
@Override public void setSelectedIndex(int anIndex){
  int size=dataModel.getSize();
  if (anIndex == -1) {
    setSelectedItem(null);
  }
 else   if (anIndex >= size) {
    throw new IllegalArgumentException(""String_Node_Str"" + anIndex + ""String_Node_Str"");
  }
 else {
    Object value=dataModel.getElementAt(anIndex);
    if (value instanceof Date && format instanceof StateFullSimpleDateFormat) {
      StateFullSimpleDateFormat sfsd=(StateFullSimpleDateFormat)format;
      String stringRep=sfsd.format(value);
      try {
        sfsd.parse(stringRep);
        value=sfsd.getMergedDate();
      }
 catch (      ParseException e) {
        Debug.error(e);
      }
    }
    setSelectedItem(value);
  }
}",0.6161137440758294
143588,"@Override public void setSelectionInterval(int index0,int index1){
  int leftInd=index0;
  int rightInd=index1;
  if (isNavigationKeyOn) {
    Object x=getListModelWrapper().get(index0);
    if (x == IValueList.SEPARATOR) {
      int index=getMinSelectionIndex();
      if (index < index0) {
        leftInd++;
        rightInd++;
      }
 else {
        leftInd--;
        rightInd--;
      }
    }
  }
  super.setSelectionInterval(leftInd,rightInd);
}","@Override public void setSelectionInterval(int index0,int index1){
  int leftInd=index0;
  int rightInd=index1;
  Object x=getListModelWrapper().get(index0);
  if (x == IValueList.SEPARATOR) {
    if (lastPopupHighlightRequested != index0) {
      int index=getMinSelectionIndex();
      if (index < index0) {
        leftInd++;
        rightInd++;
      }
 else {
        leftInd--;
        rightInd--;
      }
      super.setSelectionInterval(leftInd,rightInd);
    }
  }
 else   super.setSelectionInterval(leftInd,rightInd);
  lastPopupHighlightRequested=index0;
}",0.8274509803921568
143589,"/** 
 * @see com.servoy.j2db.util.ITabPaneAlike#insertTab(java.lang.String,java.lang.String,javax.swing.Icon,java.awt.Component,java.lang.String,int)
 */
public void insertTab(String name,String text,Icon icon,Component flp,String tooltip,int index){
  setTitleAt(index,text);
  add(flp,Integer.toString(index),index);
  if (flp instanceof JComponent) {
    JComponent jFLP=(JComponent)flp;
    jFLP.setOpaque(isOpaque());
  }
  if (selectedTab == -1) {
    setSelectedIndex(0);
  }
  if (tooltip != null) {
    ((JComponent)flp).setToolTipText(tooltip);
  }
  SwingUtilities.invokeLater(new Runnable(){
    public void run(){
      getParent().validate();
    }
  }
);
}","/** 
 * @see com.servoy.j2db.util.ITabPaneAlike#insertTab(java.lang.String,java.lang.String,javax.swing.Icon,java.awt.Component,java.lang.String,int)
 */
public void insertTab(String name,String text,Icon icon,Component flp,String tooltip,int index){
  setTitleAt(index,text);
  ArrayList<Component> nextComponents=new ArrayList<Component>();
  nextComponents.add(flp);
  int componentCount=getComponentCount();
  for (int i=index; i < componentCount; i++) {
    nextComponents.add(getComponent(index));
    remove(index);
  }
  for (  Component c : nextComponents)   add(c,((IFormLookupPanel)c).getFormName() + ""String_Node_Str"" + System.currentTimeMillis());
  if (flp instanceof JComponent) {
    JComponent jFLP=(JComponent)flp;
    jFLP.setOpaque(isOpaque());
  }
  if (selectedTab == -1) {
    setSelectedIndex(0);
  }
  if (tooltip != null) {
    ((JComponent)flp).setToolTipText(tooltip);
  }
  SwingUtilities.invokeLater(new Runnable(){
    public void run(){
      getParent().validate();
    }
  }
);
}",0.7695961995249406
143590,"/** 
 * @return true if it was triggered by initial show, in which case the callbacks shouldn't be called.
 */
protected boolean move(AjaxRequestTarget target){
  Request request=RequestCycle.get().getRequest();
  bounds.x=Integer.parseInt(request.getParameter(""String_Node_Str""));
  bounds.y=Integer.parseInt(request.getParameter(""String_Node_Str""));
  return ""String_Node_Str"".equals(request.getParameter(""String_Node_Str""));
}","/** 
 * @return true if it was not triggered by initial show or other operations for which the callback shouldn't be called.
 */
protected boolean move(AjaxRequestTarget target){
  Request request=RequestCycle.get().getRequest();
  bounds.x=Integer.parseInt(request.getParameter(""String_Node_Str""));
  bounds.y=Integer.parseInt(request.getParameter(""String_Node_Str""));
  return !(""String_Node_Str"".equals(request.getParameter(""String_Node_Str"")));
}",0.9533560864618884
143591,"public void setBounds(AjaxRequestTarget target,int x,int y,int width,int height){
  target.appendJavascript(getActionJavascript(""String_Node_Str"",((x >= 0) ? (""String_Node_Str"" + x + ""String_Node_Str"") : ""String_Node_Str"") + ""String_Node_Str"" + ((y >= 0) ? (""String_Node_Str"" + y + ""String_Node_Str"") : ""String_Node_Str"")+ ""String_Node_Str""+ ((width >= 0) ? (""String_Node_Str"" + width + ""String_Node_Str"") : ""String_Node_Str"")+ ""String_Node_Str""+ ((height >= 0) ? (""String_Node_Str"" + height + ""String_Node_Str"") : ""String_Node_Str"")));
}","public void setBounds(AjaxRequestTarget target,int x,int y,int width,int height){
  target.appendJavascript(getActionJavascript(""String_Node_Str"",((x >= 0) ? (""String_Node_Str"" + x + ""String_Node_Str"") : ""String_Node_Str"") + ""String_Node_Str"" + ((y >= 0) ? (""String_Node_Str"" + y + ""String_Node_Str"") : ""String_Node_Str"")+ ""String_Node_Str""+ ((width >= 0) ? (""String_Node_Str"" + width + ""String_Node_Str"") : ""String_Node_Str"")+ ""String_Node_Str""+ ((height >= 0) ? (""String_Node_Str"" + height + ""String_Node_Str"") : ""String_Node_Str"")));
  bounds.x=x;
  bounds.y=y;
  bounds.width=width;
  bounds.height=height;
}",0.9356521739130436
143592,"/** 
 * @return true if it was triggered by initial show, in which case the callbacks shouldn't be called.
 */
protected boolean resize(AjaxRequestTarget target){
  Request request=RequestCycle.get().getRequest();
  bounds.width=Integer.parseInt(request.getParameter(""String_Node_Str""));
  bounds.height=Integer.parseInt(request.getParameter(""String_Node_Str""));
  return ""String_Node_Str"".equals(request.getParameter(""String_Node_Str""));
}","/** 
 * @return true if it was not triggered by initial show or other operations for which the callback shouldn't be called.
 */
protected boolean resize(AjaxRequestTarget target){
  Request request=RequestCycle.get().getRequest();
  bounds.width=Integer.parseInt(request.getParameter(""String_Node_Str""));
  bounds.height=Integer.parseInt(request.getParameter(""String_Node_Str""));
  return !(""String_Node_Str"".equals(request.getParameter(""String_Node_Str"")));
}",0.9544950055493896
143593,"/** 
 * @param id
 */
public WebForm(final FormController controller){
  super(""String_Node_Str"");
  TabIndexHelper.setUpTabIndexAttributeModifier(this,ISupportWebTabSeq.SKIP);
  this.variation=""String_Node_Str"" + controller.getForm().getSolution().getName() + ""String_Node_Str""+ controller.getName()+ ""String_Node_Str"";
  this.formController=controller;
  final IFormLayoutProvider layoutProvider=FormLayoutProviderFactory.getFormLayoutProvider(formController.getApplication(),formController.getApplication().getSolution(),formController.getForm(),formController.getName());
  TextualStyle panelStyle=layoutProvider.getLayoutForForm(0,false,true);
  add(new StyleAppendingModifier(panelStyle){
    @Override public boolean isEnabled(    Component component){
      return ((component.findParent(IWebFormContainer.class) != null) && !(component.findParent(IWebFormContainer.class) instanceof WebAccordionPanel));
    }
  }
);
  add(new StyleAppendingModifier(new Model<String>(){
    private static final long serialVersionUID=1L;
    @Override public String getObject(){
      IWebFormContainer container=findParent(IWebFormContainer.class);
      if (container != null && !(container instanceof WebAccordionPanel) && container.getBorder() instanceof TitledBorder) {
        int offset=ComponentFactoryHelper.getTitledBorderHeight(container.getBorder());
        return ""String_Node_Str"" + offset + ""String_Node_Str"";
      }
      return ""String_Node_Str"";
    }
  }
){
    @Override public boolean isEnabled(    Component component){
      IWebFormContainer container=component.findParent(IWebFormContainer.class);
      if (container != null && container.getBorder() instanceof TitledBorder) {
        return super.isEnabled(component);
      }
      return false;
    }
  }
);
  container=new WebMarkupContainer(""String_Node_Str""){
    @Override protected void onComponentTagBody(    MarkupStream markupStream,    ComponentTag openTag){
      if (getBorder() instanceof TitledBorder) {
        getResponse().write(WebBaseButton.getTitledBorderOpenMarkup((TitledBorder)getBorder()));
      }
      super.onComponentTagBody(markupStream,openTag);
      if (getBorder() instanceof TitledBorder) {
        getResponse().write(WebBaseButton.getTitledBorderCloseMarkup());
      }
    }
  }
;
  container.add(new StyleAppendingModifier(new Model<String>(){
    private static final long serialVersionUID=1L;
    @Override public String getObject(){
      IWebFormContainer tabpanel=findParent(IWebFormContainer.class);
      if (tabpanel != null) {
        return ""String_Node_Str"";
      }
      return null;
    }
  }
));
  add(new StyleAppendingModifier(new Model<String>(){
    private static final long serialVersionUID=1L;
    @Override public String getObject(){
      IWebFormContainer formContainer=findParent(IWebFormContainer.class);
      if (formContainer != null) {
        String styleAddition=""String_Node_Str"";
        if (getBorder() instanceof RoundedBorder) {
          float[] radius=((RoundedBorder)getBorder()).getRadius();
          StringBuilder builder=new StringBuilder();
          builder.append(""String_Node_Str"");
          for (int i=0; i < 8; i++) {
            builder.append(radius[i]);
            builder.append(""String_Node_Str"");
            if (i == 3)             builder.append(""String_Node_Str"");
          }
          builder.append(""String_Node_Str"");
          styleAddition=builder.toString();
        }
        IStyleRule formStyle=controller.getFormStyle();
        boolean hasSemiTransparentBackground=false;
        if (formStyle != null && formStyle.hasAttribute(CSSName.BACKGROUND_COLOR.toString()) && formStyle.getValue(CSSName.BACKGROUND_COLOR.toString()).contains(PersistHelper.COLOR_RGBA_DEF))         hasSemiTransparentBackground=true;
        if (controller.getForm().getTransparent() || hasSemiTransparentBackground) {
          styleAddition+=""String_Node_Str"";
        }
        return styleAddition;
      }
      return null;
    }
  }
));
  add(new AttributeAppender(""String_Node_Str"",new Model<String>(){
    private static final long serialVersionUID=1332637522687352873L;
    @Override public String getObject(){
      return ""String_Node_Str"";
    }
  }
,""String_Node_Str""){
    @Override public boolean isEnabled(    Component component){
      return (component instanceof WebForm && ((WebForm)component).isDesignMode());
    }
  }
);
  container.setOutputMarkupId(true);
  container.setMarkupId(""String_Node_Str"" + ComponentFactory.stripIllegalCSSChars(formController.getName()));
  TabIndexHelper.setUpTabIndexAttributeModifier(container,ISupportWebTabSeq.SKIP);
  add(container);
  setOutputMarkupId(true);
}","/** 
 * @param id
 */
public WebForm(final FormController controller){
  super(""String_Node_Str"");
  TabIndexHelper.setUpTabIndexAttributeModifier(this,ISupportWebTabSeq.SKIP);
  this.variation=""String_Node_Str"" + controller.getForm().getSolution().getName() + ""String_Node_Str""+ controller.getName()+ ""String_Node_Str"";
  this.formController=controller;
  final IFormLayoutProvider layoutProvider=FormLayoutProviderFactory.getFormLayoutProvider(formController.getApplication(),formController.getApplication().getSolution(),formController.getForm(),formController.getName());
  TextualStyle panelStyle=layoutProvider.getLayoutForForm(0,false,true);
  add(new StyleAppendingModifier(panelStyle){
    @Override public boolean isEnabled(    Component component){
      return ((component.findParent(IWebFormContainer.class) != null) && !(component.findParent(IWebFormContainer.class) instanceof WebAccordionPanel));
    }
  }
);
  add(new StyleAppendingModifier(new Model<String>(){
    private static final long serialVersionUID=1L;
    @Override public String getObject(){
      IWebFormContainer container=findParent(IWebFormContainer.class);
      if (container != null && !(container instanceof WebAccordionPanel) && container.getBorder() instanceof TitledBorder) {
        int offset=ComponentFactoryHelper.getTitledBorderHeight(container.getBorder());
        return ""String_Node_Str"" + offset + ""String_Node_Str"";
      }
      return ""String_Node_Str"";
    }
  }
){
    @Override public boolean isEnabled(    Component component){
      IWebFormContainer container=component.findParent(IWebFormContainer.class);
      if (container != null && container.getBorder() instanceof TitledBorder) {
        return super.isEnabled(component);
      }
      return false;
    }
  }
);
  add(new StyleAppendingModifier(new Model<String>(){
    private static final long serialVersionUID=1L;
    @Override public String getObject(){
      StringBuilder scrollingOverflow=new StringBuilder();
      final int scrollBars=formController.getForm().getScrollbars();
      String overflowX=""String_Node_Str"";
      if ((scrollBars & ISupportScrollbars.HORIZONTAL_SCROLLBAR_NEVER) == ISupportScrollbars.HORIZONTAL_SCROLLBAR_NEVER)       overflowX=""String_Node_Str"";
 else       if ((scrollBars & ISupportScrollbars.HORIZONTAL_SCROLLBAR_ALWAYS) == ISupportScrollbars.HORIZONTAL_SCROLLBAR_ALWAYS)       overflowX=""String_Node_Str"";
      scrollingOverflow.append(""String_Node_Str"").append(overflowX).append(""String_Node_Str"");
      String overflowY=""String_Node_Str"";
      if ((scrollBars & ISupportScrollbars.VERTICAL_SCROLLBAR_NEVER) == ISupportScrollbars.VERTICAL_SCROLLBAR_NEVER)       overflowY=""String_Node_Str"";
 else       if ((scrollBars & ISupportScrollbars.VERTICAL_SCROLLBAR_ALWAYS) == ISupportScrollbars.VERTICAL_SCROLLBAR_ALWAYS)       overflowY=""String_Node_Str"";
      scrollingOverflow.append(""String_Node_Str"").append(overflowY).append(""String_Node_Str"");
      return scrollingOverflow.toString();
    }
  }
));
  container=new WebMarkupContainer(""String_Node_Str""){
    @Override protected void onComponentTagBody(    MarkupStream markupStream,    ComponentTag openTag){
      if (getBorder() instanceof TitledBorder) {
        getResponse().write(WebBaseButton.getTitledBorderOpenMarkup((TitledBorder)getBorder()));
      }
      super.onComponentTagBody(markupStream,openTag);
      if (getBorder() instanceof TitledBorder) {
        getResponse().write(WebBaseButton.getTitledBorderCloseMarkup());
      }
    }
  }
;
  add(new StyleAppendingModifier(new Model<String>(){
    private static final long serialVersionUID=1L;
    @Override public String getObject(){
      IWebFormContainer formContainer=findParent(IWebFormContainer.class);
      if (formContainer != null) {
        String styleAddition=""String_Node_Str"";
        if (getBorder() instanceof RoundedBorder) {
          float[] radius=((RoundedBorder)getBorder()).getRadius();
          StringBuilder builder=new StringBuilder();
          builder.append(""String_Node_Str"");
          for (int i=0; i < 8; i++) {
            builder.append(radius[i]);
            builder.append(""String_Node_Str"");
            if (i == 3)             builder.append(""String_Node_Str"");
          }
          builder.append(""String_Node_Str"");
          styleAddition=builder.toString();
        }
        IStyleRule formStyle=controller.getFormStyle();
        boolean hasSemiTransparentBackground=false;
        if (formStyle != null && formStyle.hasAttribute(CSSName.BACKGROUND_COLOR.toString()) && formStyle.getValue(CSSName.BACKGROUND_COLOR.toString()).contains(PersistHelper.COLOR_RGBA_DEF))         hasSemiTransparentBackground=true;
        if (controller.getForm().getTransparent() || hasSemiTransparentBackground) {
          styleAddition+=""String_Node_Str"";
        }
        return styleAddition;
      }
      return null;
    }
  }
));
  add(new AttributeAppender(""String_Node_Str"",new Model<String>(){
    private static final long serialVersionUID=1332637522687352873L;
    @Override public String getObject(){
      return ""String_Node_Str"";
    }
  }
,""String_Node_Str""){
    @Override public boolean isEnabled(    Component component){
      return (component instanceof WebForm && ((WebForm)component).isDesignMode());
    }
  }
);
  container.setOutputMarkupId(true);
  container.setMarkupId(""String_Node_Str"" + ComponentFactory.stripIllegalCSSChars(formController.getName()));
  TabIndexHelper.setUpTabIndexAttributeModifier(container,ISupportWebTabSeq.SKIP);
  add(container);
  setOutputMarkupId(true);
}",0.7857421114141021
143594,"private void fillPartStyle(TextualStyle partStyle,Part part){
  Pair<IStyleSheet,IStyleRule> pairStyle=ComponentFactory.getStyleForBasicComponent(sp,part,f);
  if (pairStyle != null) {
    addBackgroundImageAttributeIfExists(pairStyle.getRight(),partStyle);
  }
  fillPartBackground(partStyle,part);
  if (part.getPartType() == Part.BODY) {
    final int scrollBars=f.getScrollbars();
    String overflowX=""String_Node_Str"";
    if ((scrollBars & ISupportScrollbars.HORIZONTAL_SCROLLBAR_NEVER) == ISupportScrollbars.HORIZONTAL_SCROLLBAR_NEVER)     overflowX=""String_Node_Str"";
 else     if ((scrollBars & ISupportScrollbars.HORIZONTAL_SCROLLBAR_ALWAYS) == ISupportScrollbars.HORIZONTAL_SCROLLBAR_ALWAYS)     overflowX=""String_Node_Str"";
    partStyle.setProperty(""String_Node_Str"",overflowX);
    String overflowY=""String_Node_Str"";
    if ((scrollBars & ISupportScrollbars.VERTICAL_SCROLLBAR_NEVER) == ISupportScrollbars.VERTICAL_SCROLLBAR_NEVER)     overflowY=""String_Node_Str"";
 else     if ((scrollBars & ISupportScrollbars.VERTICAL_SCROLLBAR_ALWAYS) == ISupportScrollbars.VERTICAL_SCROLLBAR_ALWAYS)     overflowY=""String_Node_Str"";
    partStyle.setProperty(""String_Node_Str"",overflowY);
  }
 else {
    partStyle.setProperty(""String_Node_Str"",""String_Node_Str"");
  }
  int spaceUsedOnlyInPrintAbove=0;
  int spaceUsedOnlyInPrintBelow=0;
  Iterator<Part> allParts=f.getParts();
  while (allParts.hasNext()) {
    Part otherPart=allParts.next();
    if (Part.rendersOnlyInPrint(otherPart.getPartType())) {
      int otherPartHeight=otherPart.getHeight() - f.getPartStartYPos(otherPart.getID());
      if (part.getPartType() > otherPart.getPartType())       spaceUsedOnlyInPrintAbove+=otherPartHeight;
      if (part.getPartType() < otherPart.getPartType())       spaceUsedOnlyInPrintBelow+=otherPartHeight;
    }
  }
  partStyle.setProperty(""String_Node_Str"",""String_Node_Str"");
  fillPartLayoutCSS(partStyle,part,spaceUsedOnlyInPrintAbove,spaceUsedOnlyInPrintBelow);
  if (pairStyle != null && pairStyle.getLeft() != null && pairStyle.getRight() != null) {
    copyBorderAttributes(pairStyle.getRight(),partStyle);
  }
}","private void fillPartStyle(TextualStyle partStyle,Part part){
  Pair<IStyleSheet,IStyleRule> pairStyle=ComponentFactory.getStyleForBasicComponent(sp,part,f);
  if (pairStyle != null) {
    addBackgroundImageAttributeIfExists(pairStyle.getRight(),partStyle);
  }
  fillPartBackground(partStyle,part);
  int spaceUsedOnlyInPrintAbove=0;
  int spaceUsedOnlyInPrintBelow=0;
  Iterator<Part> allParts=f.getParts();
  while (allParts.hasNext()) {
    Part otherPart=allParts.next();
    if (Part.rendersOnlyInPrint(otherPart.getPartType())) {
      int otherPartHeight=otherPart.getHeight() - f.getPartStartYPos(otherPart.getID());
      if (part.getPartType() > otherPart.getPartType())       spaceUsedOnlyInPrintAbove+=otherPartHeight;
      if (part.getPartType() < otherPart.getPartType())       spaceUsedOnlyInPrintBelow+=otherPartHeight;
    }
  }
  partStyle.setProperty(""String_Node_Str"",""String_Node_Str"");
  fillPartLayoutCSS(partStyle,part,spaceUsedOnlyInPrintAbove,spaceUsedOnlyInPrintBelow);
  if (pairStyle != null && pairStyle.getLeft() != null && pairStyle.getRight() != null) {
    copyBorderAttributes(pairStyle.getRight(),partStyle);
  }
}",0.3667989014342386
143595,"/** 
 * @see com.servoy.j2db.smart.J2DBClient#shutDown(boolean)
 */
@Override public void shutDown(boolean force){
  shutDown=true;
  try {
    Solution solution=getSolution();
    if (solution != null) {
      if (!closeSolution(force,null) && !force) {
        shutDown=false;
        return;
      }
    }
    logout(null);
    if (unitTestsRunning) {
      repository=null;
      applicationServerAccess=null;
    }
  }
 catch (  Exception ex) {
    Debug.error(ex);
  }
  getMainApplicationFrame().setVisible(false);
  saveSettings();
}","/** 
 * @see com.servoy.j2db.smart.J2DBClient#shutDown(boolean)
 */
@Override public void shutDown(boolean force){
  shutDown=true;
  try {
    Solution solution=getSolution();
    if (solution != null) {
      if (!closeSolution(force,null) && !force) {
        shutDown=false;
        return;
      }
    }
    logout(null);
    if (unitTestsRunning) {
      repository=null;
      applicationServerAccess=null;
    }
  }
 catch (  Exception ex) {
    Debug.error(ex);
  }
  Window[] ownedWindows=getMainApplicationFrame().getOwnedWindows();
  if (ownedWindows != null) {
    for (    Window w : ownedWindows)     w.dispose();
  }
  getMainApplicationFrame().setVisible(false);
  saveSettings();
}",0.8725806451612903
143596,"private DebugJ2DBClient createJSUnitClient(final IUserManager userManager){
  if (!ApplicationServerSingleton.waitForInstanceStarted()) {
    return null;
  }
  final DebugJ2DBClient[] client=new DebugJ2DBClient[1];
  try {
    Runnable run=new Runnable(){
      public void run(){
        try {
synchronized (ApplicationServerSingleton.get()) {
            if (client[0] == null) {
              try {
                if (Utils.isAppleMacOS()) {
                  Thread.sleep(3000);
                }
                modelInitialised.await(30,TimeUnit.SECONDS);
              }
 catch (              InterruptedException e) {
                Debug.log(e);
              }
              client[0]=new DebugJ2DBClient(false,DebugClientHandler.this){
                private final List<Runnable> events=new ArrayList<Runnable>();
                @Override public void updateUI(                int time){
                  runEvents();
                  super.updateUI(time);
                }
                @Override protected boolean registerClient(                IUserClient uc) throws Exception {
                  boolean register=super.registerClient(uc);
                  ApplicationServerSingleton.get().setServerProcess(getClientID());
                  return register;
                }
                @Override protected IUserManager createUserManager(){
                  try {
                    userManager.createGroup(ApplicationServerSingleton.get().getClientId(),IRepository.ADMIN_GROUP);
                  }
 catch (                  Exception e) {
                    Debug.error(e);
                  }
                  return userManager;
                }
                /** 
 */
                private void runEvents(){
                  if (events.size() == 0)                   return;
                  Runnable[] runnables=events.toArray(new Runnable[events.size()]);
                  events.clear();
                  for (                  Runnable runnable : runnables) {
                    runnable.run();
                  }
                  runEvents();
                }
                @Override public void invokeAndWait(                Runnable r){
                  super.invokeAndWait(r);
                }
                @Override public void invokeLater(                Runnable r,                boolean immediate){
                  invokeLater(r);
                }
                @Override public void invokeLater(                Runnable r){
                  events.add(r);
                  final IServiceProvider client=this;
                  super.invokeLater(new Runnable(){
                    public void run(){
                      IServiceProvider prevServiceProvider=J2DBGlobals.setSingletonServiceProvider(client);
                      try {
                        runEvents();
                      }
  finally {
                        J2DBGlobals.setSingletonServiceProvider(prevServiceProvider);
                      }
                    }
                  }
);
                }
              }
;
              client[0].setCurrent(currentSolution);
            }
          }
        }
 catch (        Exception e) {
          Debug.error(""String_Node_Str"",e);
        }
      }
    }
;
    if (SwingUtilities.isEventDispatchThread()) {
      run.run();
    }
 else {
      SwingUtilities.invokeAndWait(run);
    }
  }
 catch (  Exception ex) {
    Debug.error(ex);
  }
  return client[0];
}","private DebugJ2DBClient createJSUnitClient(final IUserManager userManager){
  if (!ApplicationServerSingleton.waitForInstanceStarted()) {
    return null;
  }
  final DebugJ2DBClient[] client=new DebugJ2DBClient[1];
  try {
    Runnable run=new Runnable(){
      public void run(){
        try {
synchronized (ApplicationServerSingleton.get()) {
            if (client[0] == null) {
              try {
                if (Utils.isAppleMacOS()) {
                  Thread.sleep(3000);
                }
                modelInitialised.await(30,TimeUnit.SECONDS);
              }
 catch (              InterruptedException e) {
                Debug.log(e);
              }
              client[0]=new DebugJ2DBClient(false,DebugClientHandler.this){
                private final List<Runnable> events=new ArrayList<Runnable>();
                @Override public void updateUI(                int time){
                  runEvents();
                  super.updateUI(time);
                }
                @Override protected boolean registerClient(                IUserClient uc) throws Exception {
                  boolean register=super.registerClient(uc);
                  ApplicationServerSingleton.get().setServerProcess(getClientID());
                  return register;
                }
                @Override protected IUserManager createUserManager(){
                  try {
                    userManager.createGroup(ApplicationServerSingleton.get().getClientId(),IRepository.ADMIN_GROUP);
                  }
 catch (                  Exception e) {
                    Debug.error(e);
                  }
                  return userManager;
                }
                /** 
 */
                private void runEvents(){
                  if (events.size() == 0)                   return;
                  Runnable[] runnables=events.toArray(new Runnable[events.size()]);
                  events.clear();
                  for (                  Runnable runnable : runnables) {
                    runnable.run();
                  }
                  runEvents();
                }
                @Override public void invokeAndWait(                Runnable r){
                  super.invokeAndWait(r);
                }
                @Override public void invokeLater(                Runnable r,                boolean immediate){
                  invokeLater(r);
                }
                @Override public void invokeLater(                Runnable r){
                  events.add(r);
                  final IServiceProvider client=this;
                  super.invokeLater(new Runnable(){
                    public void run(){
                      IServiceProvider prevServiceProvider=J2DBGlobals.setSingletonServiceProvider(client);
                      try {
                        runEvents();
                      }
  finally {
                        J2DBGlobals.setSingletonServiceProvider(prevServiceProvider);
                      }
                    }
                  }
);
                }
                @Override public void reportError(                Component parentComponent,                String message,                Object detail){
                  errorToDebugger(message,detail);
                  logError(message,detail);
                }
                @Override public void reportInfo(                Component parentComponent,                String message,                String title){
                  infoToDebugger(message);
                  Debug.trace(message);
                }
              }
;
              client[0].setCurrent(currentSolution);
            }
          }
        }
 catch (        Exception e) {
          Debug.error(""String_Node_Str"",e);
        }
      }
    }
;
    if (SwingUtilities.isEventDispatchThread()) {
      run.run();
    }
 else {
      SwingUtilities.invokeAndWait(run);
    }
  }
 catch (  Exception ex) {
    Debug.error(ex);
  }
  return client[0];
}",0.9301017675415104
143597,"/** 
 * @param message
 * @param errorDetail
 */
@SuppressWarnings(""String_Node_Str"") private void errorToDebugger(String message,Object errorDetail){
  Object detail=errorDetail;
  RemoteDebugScriptEngine engine=(RemoteDebugScriptEngine)getScriptEngine();
  if (engine != null) {
    DBGPDebugger debugger=engine.getDebugger();
    if (debugger != null) {
      RhinoException rhinoException=null;
      if (detail instanceof Exception) {
        Throwable exception=(Exception)detail;
        while (exception != null) {
          if (exception instanceof RhinoException) {
            rhinoException=(RhinoException)exception;
            break;
          }
          exception=exception.getCause();
        }
      }
      String msg=message;
      if (rhinoException != null) {
        if (msg == null) {
          msg=rhinoException.getLocalizedMessage();
        }
 else         msg+='\n' + rhinoException.getLocalizedMessage();
        msg+='\n' + rhinoException.getScriptStackTrace();
      }
 else       if (detail instanceof Exception) {
        Object e=((Exception)detail).getCause();
        if (e != null) {
          detail=e;
        }
        msg+=""String_Node_Str"" + detail.toString();
      }
 else       if (detail != null) {
        msg+=""String_Node_Str"" + detail;
      }
      debugger.outputStdErr(msg.toString() + '\n');
    }
  }
}","/** 
 * @param message
 * @param errorDetail
 */
@SuppressWarnings(""String_Node_Str"") protected void errorToDebugger(String message,Object errorDetail){
  Object detail=errorDetail;
  RemoteDebugScriptEngine engine=(RemoteDebugScriptEngine)getScriptEngine();
  if (engine != null) {
    DBGPDebugger debugger=engine.getDebugger();
    if (debugger != null) {
      RhinoException rhinoException=null;
      if (detail instanceof Exception) {
        Throwable exception=(Exception)detail;
        while (exception != null) {
          if (exception instanceof RhinoException) {
            rhinoException=(RhinoException)exception;
            break;
          }
          exception=exception.getCause();
        }
      }
      String msg=message;
      if (rhinoException != null) {
        if (msg == null) {
          msg=rhinoException.getLocalizedMessage();
        }
 else         msg+='\n' + rhinoException.getLocalizedMessage();
        msg+='\n' + rhinoException.getScriptStackTrace();
      }
 else       if (detail instanceof Exception) {
        Object e=((Exception)detail).getCause();
        if (e != null) {
          detail=e;
        }
        msg+=""String_Node_Str"" + detail.toString();
      }
 else       if (detail != null) {
        msg+=""String_Node_Str"" + detail;
      }
      debugger.outputStdErr(msg.toString() + '\n');
    }
  }
}",0.9955882352941176
143598,"public String getFullSignature(boolean withNames,boolean withTypes,Map<String,String> typeTranslationMap);","public String getFullSignature(boolean withNames,boolean withTypes);",0.7816091954022989
143599,String getType();,"/** 
 * Get the java-script type name. It is constructed based on a tranlation to documented java class combined with on ServoyDocumented annotation public name or simple class name.<br> For example int => type = Number, IRuntimeComponent.class realType => RuntimeComponent, Foundset.class => JSFoundset, JSDataSet.class => JSDataSet, boolean[] => Boolean[] and so on.
 */
String getType();",0.0835380835380835
143600,"@SuppressWarnings(""String_Node_Str"") protected static String instrumentBodyText(CharSequence bodyText,int halign,int valign,boolean isHtml,Border border,Insets margin,String cssid,char mnemonic,String imgID,String imgURL,int height,boolean isButton,Cursor bodyCursor,boolean isAnchored,boolean isElementAnchored){
  Insets padding=null;
  Insets borderMargin=null;
  boolean usePadding=false;
  if (border == null) {
    padding=margin;
  }
 else   if (border instanceof EmptyBorder) {
    usePadding=true;
    padding=ComponentFactoryHelper.getBorderInsetsForNoComponent(border);
  }
 else   if (border instanceof CompoundBorder) {
    Border inside=((CompoundBorder)border).getInsideBorder();
    if (inside instanceof EmptyBorder) {
      usePadding=true;
      padding=ComponentFactoryHelper.getBorderInsetsForNoComponent(inside);
    }
    Border outside=((CompoundBorder)border).getOutsideBorder();
    if (outside != null) {
      borderMargin=ComponentFactoryHelper.getBorderInsetsForNoComponent(outside);
    }
  }
 else   if (!(border instanceof BevelBorder) && !(border instanceof EtchedBorder)) {
    if (border instanceof TitledBorder) {
      usePadding=true;
      padding=new Insets(5,7,5,7);
      padding.top+=ComponentFactoryHelper.getTitledBorderHeight(border);
    }
 else {
      padding=ComponentFactoryHelper.getBorderInsetsForNoComponent(border);
    }
  }
  StringBuffer instrumentedBodyText=new StringBuffer();
  instrumentedBodyText.append(""String_Node_Str"" + (bodyCursor == null ? ""String_Node_Str"" : ""String_Node_Str"" + (bodyCursor.getType() == Cursor.HAND_CURSOR ? ""String_Node_Str"" : ""String_Node_Str"") + ""String_Node_Str"") + ""String_Node_Str"");
  int top=0;
  int bottom=0;
  int left=0;
  int right=0;
  if (padding != null && usePadding) {
    top=padding.top;
    bottom=padding.bottom;
    left=padding.left;
    right=padding.right;
  }
  instrumentedBodyText.append(""String_Node_Str"" + left + ""String_Node_Str"");
  instrumentedBodyText.append(""String_Node_Str"" + right + ""String_Node_Str"");
  if (halign == ISupportTextSetup.LEFT)   instrumentedBodyText.append(""String_Node_Str"");
 else   if (halign == ISupportTextSetup.RIGHT)   instrumentedBodyText.append(""String_Node_Str"");
 else   instrumentedBodyText.append(""String_Node_Str"");
  if (cssid == null) {
    if (valign == ISupportTextSetup.TOP)     instrumentedBodyText.append(""String_Node_Str"" + top + ""String_Node_Str"");
 else     if (valign == ISupportTextSetup.BOTTOM)     instrumentedBodyText.append(""String_Node_Str"" + bottom + ""String_Node_Str"");
  }
  boolean isOnlyImgDisplay=(Strings.isEmpty(bodyText) && imgURL != null) || isHTMLWithOnlyImg(bodyText);
  if (!isHtml)   instrumentedBodyText.append(""String_Node_Str"");
  if (isHtml && valign != ISupportTextSetup.CENTER && cssid == null)   instrumentedBodyText.append(""String_Node_Str"");
 else   if ((cssid != null && !isHTMLWithOnlyImg(bodyText)) || (!isOnlyImgDisplay && valign != ISupportTextSetup.CENTER))   instrumentedBodyText.append(""String_Node_Str"");
 else   if (!isButton && !isHtml && imgURL == null) {
    int innerHeight=height;
    if (padding != null)     innerHeight-=padding.top + padding.bottom;
    if (borderMargin != null)     innerHeight-=borderMargin.top + borderMargin.bottom;
    instrumentedBodyText.append(""String_Node_Str"" + innerHeight + ""String_Node_Str"");
  }
  if (isAnchored) {
    instrumentedBodyText.append(""String_Node_Str"");
  }
  instrumentedBodyText.append(""String_Node_Str"");
  if (cssid != null) {
    instrumentedBodyText.append(""String_Node_Str"");
    instrumentedBodyText.append(cssid);
    instrumentedBodyText.append(""String_Node_Str"");
  }
  instrumentedBodyText.append(""String_Node_Str"");
  if (!Strings.isEmpty(bodyText)) {
    CharSequence bodyTextValue=bodyText;
    if (mnemonic > 0 && !isHtml) {
      StringBuffer sbBodyText=new StringBuffer(bodyTextValue);
      int mnemonicIdx=sbBodyText.indexOf(Character.toString(mnemonic));
      if (mnemonicIdx != -1) {
        sbBodyText.insert(mnemonicIdx + 1,""String_Node_Str"");
        sbBodyText.insert(mnemonicIdx,""String_Node_Str"");
        bodyTextValue=sbBodyText.toString();
      }
    }
    if (imgURL != null) {
      String src=""String_Node_Str"";
      if (!isElementAnchored) {
        src=imgURL;
      }
      StringBuffer sb=new StringBuffer(""String_Node_Str"").append(imgID).append(""String_Node_Str"").append(src).append(""String_Node_Str"").append(bodyTextValue);
      bodyTextValue=sb.toString();
    }
    instrumentedBodyText.append(bodyTextValue);
  }
 else   if (imgURL != null) {
    instrumentedBodyText.append(""String_Node_Str"");
    instrumentedBodyText.append(imgID);
    instrumentedBodyText.append(""String_Node_Str"");
    instrumentedBodyText.append(!isElementAnchored ? imgURL : ""String_Node_Str"");
    instrumentedBodyText.append(""String_Node_Str"");
  }
  instrumentedBodyText.append(""String_Node_Str"");
  if (isOnlyImgDisplay) {
    if (cssid == null && imgURL != null) {
      String sValign=(valign == ISupportTextSetup.TOP) ? ""String_Node_Str"" : (valign == ISupportTextSetup.BOTTOM) ? ""String_Node_Str"" : ""String_Node_Str"";
      String hAlign=(halign == ISupportTextSetup.LEFT) ? ""String_Node_Str"" : (halign == ISupportTextSetup.RIGHT) ? ""String_Node_Str"" : ""String_Node_Str"";
      String align=hAlign + ""String_Node_Str"" + sValign;
      instrumentedBodyText=new StringBuffer(""String_Node_Str"").append(imgID).append(""String_Node_Str"").append(align).append(""String_Node_Str"");
      if (!isElementAnchored) {
        instrumentedBodyText.append(""String_Node_Str"").append(imgURL).append(""String_Node_Str"");
      }
      instrumentedBodyText.append(""String_Node_Str"");
    }
 else {
      String sValign=(valign == ISupportTextSetup.TOP) ? ""String_Node_Str"" : (valign == ISupportTextSetup.BOTTOM) ? ""String_Node_Str"" : ""String_Node_Str"";
      instrumentedBodyText=(new StringBuffer(""String_Node_Str"").append(sValign).append(""String_Node_Str"").append(instrumentedBodyText).append(""String_Node_Str""));
    }
  }
  if (border instanceof TitledBorder) {
    instrumentedBodyText=new StringBuffer(getTitledBorderOpenMarkup((TitledBorder)border) + instrumentedBodyText.toString() + getTitledBorderCloseMarkup());
  }
  return instrumentedBodyText.toString();
}","@SuppressWarnings(""String_Node_Str"") protected static String instrumentBodyText(CharSequence bodyText,int halign,int valign,boolean isHtml,Border border,Insets margin,String cssid,char mnemonic,String imgID,String imgURL,int height,boolean isButton,Cursor bodyCursor,boolean isAnchored,boolean isElementAnchored){
  Insets padding=null;
  Insets borderMargin=null;
  boolean usePadding=false;
  if (border == null) {
    padding=margin;
  }
 else   if (border instanceof EmptyBorder) {
    usePadding=true;
    padding=ComponentFactoryHelper.getBorderInsetsForNoComponent(border);
  }
 else   if (border instanceof CompoundBorder) {
    Border inside=((CompoundBorder)border).getInsideBorder();
    if (inside instanceof EmptyBorder) {
      usePadding=true;
      padding=ComponentFactoryHelper.getBorderInsetsForNoComponent(inside);
    }
    Border outside=((CompoundBorder)border).getOutsideBorder();
    if (outside != null) {
      borderMargin=ComponentFactoryHelper.getBorderInsetsForNoComponent(outside);
    }
  }
 else   if (!(border instanceof BevelBorder) && !(border instanceof EtchedBorder)) {
    if (border instanceof TitledBorder) {
      usePadding=true;
      padding=new Insets(5,7,5,7);
      padding.top+=ComponentFactoryHelper.getTitledBorderHeight(border);
    }
 else {
      padding=ComponentFactoryHelper.getBorderInsetsForNoComponent(border);
    }
  }
  StringBuffer instrumentedBodyText=new StringBuffer();
  instrumentedBodyText.append(""String_Node_Str"" + (bodyCursor == null ? ""String_Node_Str"" : ""String_Node_Str"" + (bodyCursor.getType() == Cursor.HAND_CURSOR ? ""String_Node_Str"" : ""String_Node_Str"") + ""String_Node_Str"") + ""String_Node_Str"");
  int top=0;
  int bottom=0;
  int left=0;
  int right=0;
  if (padding != null && usePadding) {
    top=padding.top;
    bottom=padding.bottom;
    left=padding.left;
    right=padding.right;
  }
  instrumentedBodyText.append(""String_Node_Str"" + left + ""String_Node_Str"");
  instrumentedBodyText.append(""String_Node_Str"" + right + ""String_Node_Str"");
  if (halign == ISupportTextSetup.LEFT)   instrumentedBodyText.append(""String_Node_Str"");
 else   if (halign == ISupportTextSetup.RIGHT)   instrumentedBodyText.append(""String_Node_Str"");
 else   instrumentedBodyText.append(""String_Node_Str"");
  if (cssid == null) {
    if (valign == ISupportTextSetup.TOP)     instrumentedBodyText.append(""String_Node_Str"" + top + ""String_Node_Str"");
 else     if (valign == ISupportTextSetup.BOTTOM)     instrumentedBodyText.append(""String_Node_Str"" + bottom + ""String_Node_Str"");
  }
  boolean isOnlyImgDisplay=(Strings.isEmpty(bodyText) && imgURL != null) || isHTMLWithOnlyImg(bodyText);
  if (!isHtml)   instrumentedBodyText.append(""String_Node_Str"");
  if (isHtml && valign != ISupportTextSetup.CENTER && cssid == null)   instrumentedBodyText.append(""String_Node_Str"");
 else   if ((cssid != null && !isHTMLWithOnlyImg(bodyText)) || (!isOnlyImgDisplay && valign != ISupportTextSetup.CENTER))   instrumentedBodyText.append(""String_Node_Str"");
 else   if (!isButton && !isHtml && imgURL == null) {
    int innerHeight=height;
    if (padding != null)     innerHeight-=padding.top + padding.bottom;
    if (borderMargin != null)     innerHeight-=borderMargin.top + borderMargin.bottom;
    instrumentedBodyText.append(""String_Node_Str"" + innerHeight + ""String_Node_Str"");
  }
  if (isAnchored) {
    instrumentedBodyText.append(""String_Node_Str"");
  }
  instrumentedBodyText.append(""String_Node_Str"");
  if (cssid != null) {
    instrumentedBodyText.append(""String_Node_Str"");
    instrumentedBodyText.append(cssid);
    instrumentedBodyText.append(""String_Node_Str"");
  }
  instrumentedBodyText.append(""String_Node_Str"");
  if (!Strings.isEmpty(bodyText)) {
    CharSequence bodyTextValue=bodyText;
    if (mnemonic > 0 && !isHtml) {
      StringBuffer sbBodyText=new StringBuffer(bodyTextValue);
      int mnemonicIdx=sbBodyText.indexOf(Character.toString(mnemonic));
      if (mnemonicIdx != -1) {
        sbBodyText.insert(mnemonicIdx + 1,""String_Node_Str"");
        sbBodyText.insert(mnemonicIdx,""String_Node_Str"");
        bodyTextValue=sbBodyText.toString();
      }
    }
    if (imgURL != null) {
      String src=""String_Node_Str"";
      if (!isElementAnchored) {
        src=imgURL;
      }
      StringBuffer sb=new StringBuffer(""String_Node_Str"").append(imgID).append(""String_Node_Str"").append(src).append(""String_Node_Str"").append(bodyTextValue);
      bodyTextValue=sb.toString();
    }
    instrumentedBodyText.append(bodyTextValue);
  }
 else   if (imgURL != null) {
    instrumentedBodyText.append(""String_Node_Str"");
    instrumentedBodyText.append(imgID);
    instrumentedBodyText.append(""String_Node_Str"");
    instrumentedBodyText.append(!isElementAnchored ? imgURL : ""String_Node_Str"");
    instrumentedBodyText.append(""String_Node_Str"");
  }
  instrumentedBodyText.append(""String_Node_Str"");
  if (isOnlyImgDisplay) {
    if (cssid == null && imgURL != null) {
      String sValign=(valign == ISupportTextSetup.TOP) ? ""String_Node_Str"" : (valign == ISupportTextSetup.BOTTOM) ? ""String_Node_Str"" : ""String_Node_Str"";
      String hAlign=(halign == ISupportTextSetup.LEFT) ? ""String_Node_Str"" : (halign == ISupportTextSetup.RIGHT) ? ""String_Node_Str"" : ""String_Node_Str"";
      String align=hAlign + ""String_Node_Str"" + sValign;
      String position=isButton ? ""String_Node_Str"" : ""String_Node_Str"";
      instrumentedBodyText=new StringBuffer(""String_Node_Str"").append(imgID).append(""String_Node_Str"").append(position).append(""String_Node_Str"").append(align).append(""String_Node_Str"");
      if (!isElementAnchored) {
        instrumentedBodyText.append(""String_Node_Str"").append(imgURL).append(""String_Node_Str"");
      }
      instrumentedBodyText.append(""String_Node_Str"");
    }
 else {
      String sValign=(valign == ISupportTextSetup.TOP) ? ""String_Node_Str"" : (valign == ISupportTextSetup.BOTTOM) ? ""String_Node_Str"" : ""String_Node_Str"";
      instrumentedBodyText=(new StringBuffer(""String_Node_Str"").append(sValign).append(""String_Node_Str"").append(instrumentedBodyText).append(""String_Node_Str""));
    }
  }
  if (border instanceof TitledBorder) {
    instrumentedBodyText=new StringBuffer(getTitledBorderOpenMarkup((TitledBorder)border) + instrumentedBodyText.toString() + getTitledBorderCloseMarkup());
  }
  return instrumentedBodyText.toString();
}",0.9908664919386864
143601,"private void applyStyleOnComponent(Component comp,Object bgColor,Object fgColor,Object compFont,Object compBorder){
  if (comp instanceof IScriptableProvider) {
    IScriptable s=((IScriptableProvider)comp).getScriptObject();
    if (s instanceof IRuntimeComponent) {
      IRuntimeComponent sbm=(IRuntimeComponent)s;
      RenderableWrapper sbmRW=null;
      if (s instanceof ISupportOnRenderCallback) {
        IScriptRenderMethods sr=((ISupportOnRenderCallback)s).getRenderable();
        if (sr instanceof RenderableWrapper)         sbmRW=(RenderableWrapper)sr;
      }
      if (bgColor != null) {
        if (sbmRW != null)         sbmRW.clearProperty(RenderableWrapper.PROPERTY.BGCOLOR);
        sbm.setBgcolor(bgColor.toString());
      }
      if (fgColor != null) {
        if (sbmRW != null)         sbmRW.clearProperty(RenderableWrapper.PROPERTY.FGCOLOR);
        sbm.setFgcolor(fgColor.toString());
      }
      if (compFont != null) {
        if (sbmRW != null)         sbmRW.clearProperty(RenderableWrapper.PROPERTY.FONT);
        sbm.setFont(compFont.toString());
      }
      if (compBorder != null) {
        String newBorder=compBorder.toString();
        Border currentBorder=ComponentFactoryHelper.createBorder(sbm.getBorder());
        Border marginBorder=null;
        if (currentBorder instanceof EmptyBorder) {
          marginBorder=currentBorder;
        }
 else         if (currentBorder instanceof CompoundBorder && ((CompoundBorder)currentBorder).getInsideBorder() instanceof EmptyBorder) {
          marginBorder=((CompoundBorder)currentBorder).getInsideBorder();
        }
        if (marginBorder != null) {
          newBorder=ComponentFactoryHelper.createBorderString(BorderFactory.createCompoundBorder(ComponentFactoryHelper.createBorder(newBorder),marginBorder));
        }
        if (sbmRW != null)         sbmRW.clearProperty(RenderableWrapper.PROPERTY.BORDER);
        sbm.setBorder(newBorder);
        sbm.setSize(sbm.getWidth(),sbm.getHeight());
      }
    }
  }
}","private void applyStyleOnComponent(Component comp,Object bgColor,Object fgColor,Object compFont,Object compBorder){
  if (comp instanceof IScriptableProvider) {
    IScriptable s=((IScriptableProvider)comp).getScriptObject();
    if (s instanceof IRuntimeComponent) {
      IRuntimeComponent sbm=(IRuntimeComponent)s;
      RenderableWrapper sbmRW=null;
      if (s instanceof ISupportOnRenderCallback) {
        IScriptRenderMethods sr=((ISupportOnRenderCallback)s).getRenderable();
        if (sr instanceof RenderableWrapper)         sbmRW=(RenderableWrapper)sr;
      }
      if (bgColor != null) {
        if (sbmRW != null)         sbmRW.clearProperty(RenderableWrapper.PROPERTY_BGCOLOR);
        sbm.setBgcolor(bgColor.toString());
      }
      if (fgColor != null) {
        if (sbmRW != null)         sbmRW.clearProperty(RenderableWrapper.PROPERTY_FGCOLOR);
        sbm.setFgcolor(fgColor.toString());
      }
      if (compFont != null) {
        if (sbmRW != null)         sbmRW.clearProperty(RenderableWrapper.PROPERTY_FONT);
        sbm.setFont(compFont.toString());
      }
      if (compBorder != null) {
        String newBorder=compBorder.toString();
        Border currentBorder=ComponentFactoryHelper.createBorder(sbm.getBorder());
        Border marginBorder=null;
        if (currentBorder instanceof EmptyBorder) {
          marginBorder=currentBorder;
        }
 else         if (currentBorder instanceof CompoundBorder && ((CompoundBorder)currentBorder).getInsideBorder() instanceof EmptyBorder) {
          marginBorder=((CompoundBorder)currentBorder).getInsideBorder();
        }
        if (marginBorder != null) {
          newBorder=ComponentFactoryHelper.createBorderString(BorderFactory.createCompoundBorder(ComponentFactoryHelper.createBorder(newBorder),marginBorder));
        }
        if (sbmRW != null)         sbmRW.clearProperty(RenderableWrapper.PROPERTY_BORDER);
        sbm.setBorder(newBorder);
        sbm.setSize(sbm.getWidth(),sbm.getHeight());
      }
    }
  }
}",0.9980099502487564
143602,"public void setToolTipText(String tooltip){
  if (!properties.containsKey(PROPERTY.TOOLTIP)) {
    properties.put(PROPERTY.TOOLTIP,renderable.getToolTipText());
  }
  renderable.setToolTipText(tooltip);
}","public void setToolTipText(String tooltip){
  if (!properties.containsKey(PROPERTY_TOOLTIP)) {
    properties.put(PROPERTY_TOOLTIP,renderable.getToolTipText());
  }
  renderable.setToolTipText(tooltip);
}",0.9901960784313726
143603,"public void setTransparent(boolean b){
  if (!properties.containsKey(PROPERTY.TRANSPARENT)) {
    properties.put(PROPERTY.TRANSPARENT,Boolean.valueOf(renderable.isTransparent()));
  }
  renderable.setTransparent(b);
}","public void setTransparent(boolean b){
  if (!properties.containsKey(PROPERTY_TRANSPARENT)) {
    properties.put(PROPERTY_TRANSPARENT,Boolean.valueOf(renderable.isTransparent()));
  }
  renderable.setTransparent(b);
}",0.9907834101382488
143604,"/** 
 * IMPORTANT: This method should only be called while onRender is being fired. See SVY-2571.
 */
void resetProperties(){
  Iterator<PROPERTY> propertiesIte=properties.keySet().iterator();
  while (propertiesIte.hasNext()) {
switch (propertiesIte.next()) {
case BGCOLOR:
      renderable.setBgcolor((String)properties.get(PROPERTY.BGCOLOR));
    break;
case BORDER:
  renderable.setBorder((String)properties.get(PROPERTY.BORDER));
break;
case ENABLED:
renderable.setEnabled(((Boolean)properties.get(PROPERTY.ENABLED)).booleanValue());
break;
case FGCOLOR:
renderable.setFgcolor((String)properties.get(PROPERTY.FGCOLOR));
break;
case FONT:
renderable.setFont((String)properties.get(PROPERTY.FONT));
break;
case TOOLTIP:
renderable.setToolTipText((String)properties.get(PROPERTY.TOOLTIP));
break;
case TRANSPARENT:
renderable.setTransparent(((Boolean)properties.get(PROPERTY.TRANSPARENT)).booleanValue());
break;
case VISIBLE:
renderable.setVisible(((Boolean)properties.get(PROPERTY.VISIBLE)).booleanValue());
break;
case FORMAT:
if (renderable instanceof HasRuntimeFormat) {
((HasRuntimeFormat)renderable).setFormat((String)properties.get(PROPERTY.FORMAT));
}
break;
}
}
properties.clear();
}","/** 
 * IMPORTANT: This method should only be called while onRender is being fired. See SVY-2571.
 */
void resetProperties(){
  Iterator<String> propertiesIte=properties.keySet().iterator();
  String property;
  while (propertiesIte.hasNext()) {
    property=propertiesIte.next();
    if (PROPERTY_BGCOLOR.equals(property)) {
      renderable.setBgcolor((String)properties.get(PROPERTY_BGCOLOR));
    }
 else     if (PROPERTY_BORDER.equals(property)) {
      renderable.setBorder((String)properties.get(PROPERTY_BORDER));
    }
 else     if (PROPERTY_ENABLED.equals(property)) {
      renderable.setEnabled(((Boolean)properties.get(PROPERTY_ENABLED)).booleanValue());
    }
 else     if (PROPERTY_FGCOLOR.equals(property)) {
      renderable.setFgcolor((String)properties.get(PROPERTY_FGCOLOR));
    }
 else     if (PROPERTY_FONT.equals(property)) {
      renderable.setFont((String)properties.get(PROPERTY_FONT));
    }
 else     if (PROPERTY_TOOLTIP.equals(property)) {
      renderable.setToolTipText((String)properties.get(PROPERTY_TOOLTIP));
    }
 else     if (PROPERTY_TRANSPARENT.equals(property)) {
      renderable.setTransparent(((Boolean)properties.get(PROPERTY_TRANSPARENT)).booleanValue());
    }
 else     if (PROPERTY_VISIBLE.equals(property)) {
      renderable.setVisible(((Boolean)properties.get(PROPERTY_VISIBLE)).booleanValue());
    }
 else     if (PROPERTY_FORMAT.equals(property)) {
      if (renderable instanceof HasRuntimeFormat) {
        ((HasRuntimeFormat)renderable).setFormat((String)properties.get(PROPERTY_FORMAT));
      }
    }
  }
  properties.clear();
}",0.6123474515434314
143605,"public void clearProperty(RenderableWrapper.PROPERTY property){
  properties.remove(property);
}","public void clearProperty(String property){
  properties.remove(property);
}",0.8255813953488372
143606,"public void setFormat(String format){
  if (renderable instanceof HasRuntimeFormat) {
    if (!properties.containsKey(PROPERTY.FORMAT)) {
      properties.put(PROPERTY.FORMAT,((HasRuntimeFormat)renderable).getFormat());
    }
    ((HasRuntimeFormat)renderable).setFormat(format);
  }
}","public void setFormat(String format){
  if (renderable instanceof HasRuntimeFormat) {
    if (!properties.containsKey(PROPERTY_FORMAT)) {
      properties.put(PROPERTY_FORMAT,((HasRuntimeFormat)renderable).getFormat());
    }
    ((HasRuntimeFormat)renderable).setFormat(format);
  }
}",0.9929824561403509
143607,"public void setFont(String spec){
  if (!properties.containsKey(PROPERTY.FONT)) {
    properties.put(PROPERTY.FONT,renderable.getFont());
  }
  renderable.setFont(spec);
}","public void setFont(String spec){
  if (!properties.containsKey(PROPERTY_FONT)) {
    properties.put(PROPERTY_FONT,renderable.getFont());
  }
  renderable.setFont(spec);
}",0.9883040935672516
143608,"public void setVisible(boolean b){
  if (!properties.containsKey(PROPERTY.VISIBLE)) {
    properties.put(PROPERTY.VISIBLE,Boolean.valueOf(renderable.isVisible()));
  }
  renderable.setVisible(b);
}","public void setVisible(boolean b){
  if (!properties.containsKey(PROPERTY_VISIBLE)) {
    properties.put(PROPERTY_VISIBLE,Boolean.valueOf(renderable.isVisible()));
  }
  renderable.setVisible(b);
}",0.9898477157360406
143609,"public void setFgcolor(String clr){
  if (!properties.containsKey(PROPERTY.FGCOLOR)) {
    properties.put(PROPERTY.FGCOLOR,renderable.getFgcolor());
  }
  renderable.setFgcolor(clr);
}","public void setFgcolor(String clr){
  if (!properties.containsKey(PROPERTY_FGCOLOR)) {
    properties.put(PROPERTY_FGCOLOR,renderable.getFgcolor());
  }
  renderable.setFgcolor(clr);
}",0.9891304347826086
143610,"public void setEnabled(boolean b){
  if (!properties.containsKey(PROPERTY.ENABLED)) {
    properties.put(PROPERTY.ENABLED,Boolean.valueOf(renderable.isEnabled()));
  }
  renderable.setEnabled(b);
}","public void setEnabled(boolean b){
  if (!properties.containsKey(PROPERTY_ENABLED)) {
    properties.put(PROPERTY_ENABLED,Boolean.valueOf(renderable.isEnabled()));
  }
  renderable.setEnabled(b);
}",0.9898477157360406
143611,"public void setBorder(String spec){
  if (!properties.containsKey(PROPERTY.BORDER)) {
    properties.put(PROPERTY.BORDER,renderable.getBorder());
  }
  renderable.setBorder(spec);
}","public void setBorder(String spec){
  if (!properties.containsKey(PROPERTY_BORDER)) {
    properties.put(PROPERTY_BORDER,renderable.getBorder());
  }
  renderable.setBorder(spec);
}",0.988950276243094
143612,"public void setBgcolor(String clr){
  if (!properties.containsKey(PROPERTY.BGCOLOR)) {
    properties.put(PROPERTY.BGCOLOR,renderable.getBgcolor());
  }
  renderable.setBgcolor(clr);
}","public void setBgcolor(String clr){
  if (!properties.containsKey(PROPERTY_BGCOLOR)) {
    properties.put(PROPERTY_BGCOLOR,renderable.getBgcolor());
  }
  renderable.setBgcolor(clr);
}",0.9891304347826086
143613,"public void setFormat(String formatString){
  if (!Utils.safeEquals(formatString,getFormat())) {
    setComponentFormat(new ComponentFormat(FormatParser.parseFormatString(application.getI18NMessageIfPrefixed(formatString),componentFormat == null ? null : componentFormat.parsedFormat.getUIConverterName(),componentFormat == null ? null : componentFormat.parsedFormat.getUIConverterProperties()),componentFormat == null ? IColumnTypes.TEXT : componentFormat.dpType,componentFormat == null ? IColumnTypes.TEXT : componentFormat.uiType));
    getChangesRecorder().setChanged();
    fireOnRender();
  }
}","public void setFormat(String formatString){
  if (!Utils.safeEquals(formatString,getFormat())) {
    setComponentFormat(new ComponentFormat(FormatParser.parseFormatString(application.getI18NMessageIfPrefixed(formatString),componentFormat == null ? null : componentFormat.parsedFormat.getUIConverterName(),componentFormat == null ? null : componentFormat.parsedFormat.getUIConverterProperties()),componentFormat == null ? IColumnTypes.TEXT : componentFormat.dpType,componentFormat == null ? IColumnTypes.TEXT : componentFormat.uiType));
    getChangesRecorder().setChanged();
    RenderEventExecutor renderEventExecutor=getRenderEventExecutor();
    IScriptRenderMethods renderable=getRenderable();
    if (renderEventExecutor != null && !renderEventExecutor.isOnRenderExecuting() && renderable instanceof RenderableWrapper) {
      ((RenderableWrapper)renderable).clearProperty(RenderableWrapper.PROPERTY_FORMAT);
    }
    fireOnRender();
  }
}",0.7715210355987056
143614,"public void setFormat(String formatString){
  if (!Utils.safeEquals(formatString,getFormat())) {
    setComponentFormat(new ComponentFormat(FormatParser.parseFormatString(application.getI18NMessageIfPrefixed(formatString),componentFormat == null ? null : componentFormat.parsedFormat.getUIConverterName(),componentFormat == null ? null : componentFormat.parsedFormat.getUIConverterProperties()),componentFormat == null ? IColumnTypes.TEXT : componentFormat.dpType,componentFormat == null ? IColumnTypes.TEXT : componentFormat.uiType));
    getChangesRecorder().setChanged();
    fireOnRender();
  }
}","public void setFormat(String formatString){
  if (!Utils.safeEquals(formatString,getFormat())) {
    setComponentFormat(new ComponentFormat(FormatParser.parseFormatString(application.getI18NMessageIfPrefixed(formatString),componentFormat == null ? null : componentFormat.parsedFormat.getUIConverterName(),componentFormat == null ? null : componentFormat.parsedFormat.getUIConverterProperties()),componentFormat == null ? IColumnTypes.TEXT : componentFormat.dpType,componentFormat == null ? IColumnTypes.TEXT : componentFormat.uiType));
    getChangesRecorder().setChanged();
    RenderEventExecutor renderEventExecutor=getRenderEventExecutor();
    IScriptRenderMethods renderable=getRenderable();
    if (renderEventExecutor != null && !renderEventExecutor.isOnRenderExecuting() && renderable instanceof RenderableWrapper) {
      ((RenderableWrapper)renderable).clearProperty(RenderableWrapper.PROPERTY_FORMAT);
    }
    fireOnRender();
  }
}",0.7715210355987056
143615,"@Override protected void propertyChanged(String propertyName,Object newValue,Object oldValue){
  if (propertiesToListenTo.contains(propertyName)) {
    fireOnRender();
  }
}","@Override protected void propertyChanged(String propertyName,Object newValue,Object oldValue){
  if (propertiesToListenTo.contains(propertyName)) {
    if (!renderEventExecutor.isOnRenderExecuting())     renderable.clearProperty(propertyName);
    fireOnRender();
  }
}",0.7647058823529411
143616,"public void setFormat(String formatString){
  if (!Utils.safeEquals(formatString,getFormat())) {
    setComponentFormat(new ComponentFormat(FormatParser.parseFormatString(application.getI18NMessageIfPrefixed(formatString),componentFormat == null ? null : componentFormat.parsedFormat.getUIConverterName(),componentFormat == null ? null : componentFormat.parsedFormat.getUIConverterProperties()),componentFormat == null ? IColumnTypes.TEXT : componentFormat.dpType,componentFormat == null ? IColumnTypes.TEXT : componentFormat.uiType));
    getChangesRecorder().setChanged();
    fireOnRender();
  }
}","public void setFormat(String formatString){
  if (!Utils.safeEquals(formatString,getFormat())) {
    setComponentFormat(new ComponentFormat(FormatParser.parseFormatString(application.getI18NMessageIfPrefixed(formatString),componentFormat == null ? null : componentFormat.parsedFormat.getUIConverterName(),componentFormat == null ? null : componentFormat.parsedFormat.getUIConverterProperties()),componentFormat == null ? IColumnTypes.TEXT : componentFormat.dpType,componentFormat == null ? IColumnTypes.TEXT : componentFormat.uiType));
    getChangesRecorder().setChanged();
    RenderEventExecutor renderEventExecutor=getRenderEventExecutor();
    IScriptRenderMethods renderable=getRenderable();
    if (renderEventExecutor != null && !renderEventExecutor.isOnRenderExecuting() && renderable instanceof RenderableWrapper) {
      ((RenderableWrapper)renderable).clearProperty(RenderableWrapper.PROPERTY_FORMAT);
    }
    fireOnRender();
  }
}",0.7715210355987056
143617,"public Component getTableCellRendererComponent(JTable jtable,Object value,boolean isSelected,boolean hasFocus,final int row,final int column){
  if (renderer == null || !isVisible(renderer) || !(jtable.getModel() instanceof IFoundSetInternal)) {
    return empty;
  }
  final ISwingFoundSet foundset=(ISwingFoundSet)jtable.getModel();
  final IRecordInternal state;
  try {
    state=foundset.getRecord(row);
  }
 catch (  RuntimeException re) {
    Debug.error(""String_Node_Str"",re);
    return empty;
  }
  RenderEventExecutor renderEventExecutor=null;
  IScriptRenderMethods renderable=null;
  if (renderer instanceof IScriptableProvider) {
    IScriptable scriptable=((IScriptableProvider)renderer).getScriptObject();
    if (scriptable instanceof ISupportOnRenderCallback) {
      renderEventExecutor=((ISupportOnRenderCallback)scriptable).getRenderEventExecutor();
      renderable=((ISupportOnRenderCallback)scriptable).getRenderable();
    }
  }
  Color bgColor=getBgColor(jtable,isSelected,row,false);
  if (bgColor != null && renderer instanceof JComponent)   ((JComponent)renderer).setOpaque(true);
  Color fgColor=getFgColor(jtable,isSelected,row);
  Font font=getFont(jtable,isSelected,row);
  if (editor != null && editor.getParent() == null) {
    Rectangle cellRect=jtable.getCellRect(row,column,false);
    editor.setLocation(cellRect.x,cellRect.y);
    editor.setSize(cellRect.width,cellRect.height);
  }
  if (isSelected) {
    Color tableSelectionColor=jtable.getSelectionForeground();
    if (bgColor != null) {
      int red=Math.abs(tableSelectionColor.getRed() - bgColor.getRed());
      int blue=Math.abs(tableSelectionColor.getBlue() - bgColor.getBlue());
      int green=Math.abs(tableSelectionColor.getGreen() - bgColor.getBlue());
      if (red < 128 && blue < 128 && green < 128) {
        red=Math.abs(tableSelectionColor.getRed() - 255);
        blue=Math.abs(tableSelectionColor.getBlue() - 255);
        green=Math.abs(tableSelectionColor.getGreen() - 255);
        tableSelectionColor=new Color(red,blue,green);
      }
    }
    renderer.setForeground(fgColor != null ? fgColor : tableSelectionColor);
    renderer.setBackground((bgColor != null ? bgColor : jtable.getSelectionBackground()));
    if (font != null)     renderer.setFont(font);
  }
 else {
    boolean isRenderWithOnRender=renderEventExecutor != null && renderEventExecutor.hasRenderCallback() && renderable instanceof RenderableWrapper;
    if (isRenderWithOnRender) {
      Color newBGColor=bgColor != null ? bgColor : componentBgColor;
      if (newBGColor != null) {
        ((RenderableWrapper)renderable).clearProperty(RenderableWrapper.PROPERTY.BGCOLOR);
        renderer.setBackground(newBGColor);
      }
      Color newFGColor=fgColor != null ? fgColor : componentFgColor;
      if (newFGColor != null) {
        ((RenderableWrapper)renderable).clearProperty(RenderableWrapper.PROPERTY.FGCOLOR);
        renderer.setForeground(newFGColor);
      }
      Font newFont=font != null ? font : componentFont;
      if (newFont != null) {
        ((RenderableWrapper)renderable).clearProperty(RenderableWrapper.PROPERTY.FONT);
        renderer.setFont(newFont);
      }
    }
 else {
      Color background=editor.getBackground();
      if (background != null && !background.equals(lastEditorBgColor)) {
        unselectedBackground=background;
      }
      Color foreground=editor.getForeground();
      if (foreground != null && !foreground.equals(lastEditorFgColor)) {
        unselectedForeground=foreground;
      }
      Font editorFont=editor.getFont();
      if (editorFont != null && !editorFont.equals(lastEditorFont)) {
        unselectedFont=editorFont;
      }
      if (editor instanceof IDisplayData && ((IDisplayData)editor).isValueValid() || !(editor instanceof IDisplayData)) {
        Color currentForeground=(fgColor != null ? fgColor : (unselectedForeground != null) ? unselectedForeground : jtable.getForeground());
        renderer.setForeground(currentForeground);
      }
      Color currentColor=(bgColor != null ? bgColor : (unselectedBackground != null) ? unselectedBackground : jtable.getBackground());
      renderer.setBackground(currentColor);
      Font currentFont=(font != null ? font : (unselectedFont != null) ? unselectedFont : jtable.getFont());
      renderer.setFont(currentFont);
    }
  }
  if (renderer instanceof JComponent) {
    applyRowBorder((JComponent)renderer,jtable,isSelected,row,column,hasFocus);
  }
  boolean printing=Utils.getAsBoolean(application.getRuntimeProperties().get(""String_Node_Str""));
  if (renderEventExecutor != null && renderEventExecutor.hasRenderCallback()) {
    renderEventExecutor.setRenderState(state,row,isSelected);
  }
  if (renderer instanceof IDisplayRelatedData) {
    IDisplayRelatedData drd=(IDisplayRelatedData)renderer;
    String relationName=drd.getSelectedRelationName();
    if (state != null) {
      if (relationName != null) {
        if (!printing && !state.isRelatedFoundSetLoaded(relationName,null)) {
          IApplication app=dal.getApplication();
          ((IDisplayData)renderer).setValueObject(null);
          String key=row + ""String_Node_Str"" + relationName+ ""String_Node_Str""+ null;
          if (!rowAndDataprovider.containsKey(key)) {
            rowAndDataprovider.put(key,key);
            Runnable r=new ASynchonizedCellLoad(app,jtable,foundset,row,jtable.convertColumnIndexToModel(column),relationName,drd.getDefaultSort(),null);
            app.getScheduledExecutor().execute(r);
          }
          return renderer.isVisible() ? renderer : empty;
        }
      }
      drd.setRecord(state,true);
    }
  }
  if (renderer instanceof IDisplayData) {
    if (state != null) {
      Object data=null;
      if (dataProviderID != null) {
        int index=-1;
        if (!printing && (index=dataProviderID.indexOf('.')) > 0) {
          if (!ScopesUtils.isVariableScope(dataProviderID)) {
            String partName=dataProviderID.substring(0,index);
            final String restName=dataProviderID.substring(index + 1);
            String relationName=partName;
            if (relationName != null && !state.isRelatedFoundSetLoaded(relationName,restName)) {
              IApplication app=dal.getApplication();
              ((IDisplayData)renderer).setValueObject(null);
              String key=row + ""String_Node_Str"" + relationName+ ""String_Node_Str""+ restName;
              if (!rowAndDataprovider.containsKey(key)) {
                rowAndDataprovider.put(key,key);
                List<SortColumn> defaultPKSortColumns=null;
                try {
                  defaultPKSortColumns=app.getFoundSetManager().getDefaultPKSortColumns(app.getFlattenedSolution().getRelation(relationName).getForeignDataSource());
                }
 catch (                ServoyException e) {
                  Debug.error(e);
                }
                Runnable r=new ASynchonizedCellLoad(app,jtable,foundset,row,jtable.convertColumnIndexToModel(column),relationName,defaultPKSortColumns,restName);
                app.getScheduledExecutor().execute(r);
              }
              return renderer.isVisible() ? renderer : empty;
            }
            IFoundSetInternal rfs=state.getRelatedFoundSet(relationName);
            if (rfs != null) {
              int selected=rfs.getSelectedIndex();
              if (selected == -1 && rfs.getSize() > 0) {
                selected=0;
              }
              final IRecordInternal relState=rfs.getRecord(selected);
              if (testCalc(restName,relState,row,jtable.convertColumnIndexToModel(column),foundset))               return renderer;
            }
          }
        }
        if (!((IDisplayData)renderer).needEntireState() && !printing && testCalc(dataProviderID,state,row,jtable.convertColumnIndexToModel(column),foundset)) {
          return renderer;
        }
        try {
          data=dal.getValueObject(state,dataProviderID);
        }
 catch (        IllegalArgumentException iae) {
          Debug.error(iae);
          data=""String_Node_Str"";
        }
      }
      ((IDisplayData)renderer).setTagResolver(new ITagResolver(){
        public String getStringValue(        String name){
          return TagResolver.formatObject(dal.getValueObject(state,name),dal.getApplication().getSettings());
        }
      }
);
      if (data instanceof DbIdentValue) {
        data=((DbIdentValue)data).getPkValue();
      }
      ((IDisplayData)renderer).setValueObject(data);
    }
  }
  if (renderer instanceof IServoyAwareBean && state != null) {
    ((IServoyAwareBean)renderer).setSelectedRecord(new ServoyBeanState(state,dal.getFormScope()));
  }
  if (!(renderer instanceof IDisplayData) && !(renderer instanceof IDisplayRelatedData) && renderEventExecutor != null && renderEventExecutor.hasRenderCallback()) {
    renderEventExecutor.fireOnRender(false);
  }
  return renderer.isVisible() ? renderer : empty;
}","public Component getTableCellRendererComponent(JTable jtable,Object value,boolean isSelected,boolean hasFocus,final int row,final int column){
  if (renderer == null || !isVisible(renderer) || !(jtable.getModel() instanceof IFoundSetInternal)) {
    return empty;
  }
  final ISwingFoundSet foundset=(ISwingFoundSet)jtable.getModel();
  final IRecordInternal state;
  try {
    state=foundset.getRecord(row);
  }
 catch (  RuntimeException re) {
    Debug.error(""String_Node_Str"",re);
    return empty;
  }
  RenderEventExecutor renderEventExecutor=null;
  IScriptRenderMethods renderable=null;
  if (renderer instanceof IScriptableProvider) {
    IScriptable scriptable=((IScriptableProvider)renderer).getScriptObject();
    if (scriptable instanceof ISupportOnRenderCallback) {
      renderEventExecutor=((ISupportOnRenderCallback)scriptable).getRenderEventExecutor();
      renderable=((ISupportOnRenderCallback)scriptable).getRenderable();
    }
  }
  Color bgColor=getBgColor(jtable,isSelected,row,false);
  if (bgColor != null && renderer instanceof JComponent)   ((JComponent)renderer).setOpaque(true);
  Color fgColor=getFgColor(jtable,isSelected,row);
  Font font=getFont(jtable,isSelected,row);
  if (editor != null && editor.getParent() == null) {
    Rectangle cellRect=jtable.getCellRect(row,column,false);
    editor.setLocation(cellRect.x,cellRect.y);
    editor.setSize(cellRect.width,cellRect.height);
  }
  if (isSelected) {
    Color tableSelectionColor=jtable.getSelectionForeground();
    if (bgColor != null) {
      int red=Math.abs(tableSelectionColor.getRed() - bgColor.getRed());
      int blue=Math.abs(tableSelectionColor.getBlue() - bgColor.getBlue());
      int green=Math.abs(tableSelectionColor.getGreen() - bgColor.getBlue());
      if (red < 128 && blue < 128 && green < 128) {
        red=Math.abs(tableSelectionColor.getRed() - 255);
        blue=Math.abs(tableSelectionColor.getBlue() - 255);
        green=Math.abs(tableSelectionColor.getGreen() - 255);
        tableSelectionColor=new Color(red,blue,green);
      }
    }
    renderer.setForeground(fgColor != null ? fgColor : tableSelectionColor);
    renderer.setBackground((bgColor != null ? bgColor : jtable.getSelectionBackground()));
    if (font != null)     renderer.setFont(font);
  }
 else {
    boolean isRenderWithOnRender=renderEventExecutor != null && renderEventExecutor.hasRenderCallback() && renderable instanceof RenderableWrapper;
    if (isRenderWithOnRender) {
      Color newBGColor=bgColor != null ? bgColor : componentBgColor;
      if (newBGColor != null) {
        ((RenderableWrapper)renderable).clearProperty(RenderableWrapper.PROPERTY_BGCOLOR);
        renderer.setBackground(newBGColor);
      }
      Color newFGColor=fgColor != null ? fgColor : componentFgColor;
      if (newFGColor != null) {
        ((RenderableWrapper)renderable).clearProperty(RenderableWrapper.PROPERTY_FGCOLOR);
        renderer.setForeground(newFGColor);
      }
      Font newFont=font != null ? font : componentFont;
      if (newFont != null) {
        ((RenderableWrapper)renderable).clearProperty(RenderableWrapper.PROPERTY_FONT);
        renderer.setFont(newFont);
      }
    }
 else {
      Color background=editor.getBackground();
      if (background != null && !background.equals(lastEditorBgColor)) {
        unselectedBackground=background;
      }
      Color foreground=editor.getForeground();
      if (foreground != null && !foreground.equals(lastEditorFgColor)) {
        unselectedForeground=foreground;
      }
      Font editorFont=editor.getFont();
      if (editorFont != null && !editorFont.equals(lastEditorFont)) {
        unselectedFont=editorFont;
      }
      if (editor instanceof IDisplayData && ((IDisplayData)editor).isValueValid() || !(editor instanceof IDisplayData)) {
        Color currentForeground=(fgColor != null ? fgColor : (unselectedForeground != null) ? unselectedForeground : jtable.getForeground());
        renderer.setForeground(currentForeground);
      }
      Color currentColor=(bgColor != null ? bgColor : (unselectedBackground != null) ? unselectedBackground : jtable.getBackground());
      renderer.setBackground(currentColor);
      Font currentFont=(font != null ? font : (unselectedFont != null) ? unselectedFont : jtable.getFont());
      renderer.setFont(currentFont);
    }
  }
  if (renderer instanceof JComponent) {
    applyRowBorder((JComponent)renderer,jtable,isSelected,row,column,hasFocus);
  }
  boolean printing=Utils.getAsBoolean(application.getRuntimeProperties().get(""String_Node_Str""));
  if (renderEventExecutor != null && renderEventExecutor.hasRenderCallback()) {
    renderEventExecutor.setRenderState(state,row,isSelected);
  }
  if (renderer instanceof IDisplayRelatedData) {
    IDisplayRelatedData drd=(IDisplayRelatedData)renderer;
    String relationName=drd.getSelectedRelationName();
    if (state != null) {
      if (relationName != null) {
        if (!printing && !state.isRelatedFoundSetLoaded(relationName,null)) {
          IApplication app=dal.getApplication();
          ((IDisplayData)renderer).setValueObject(null);
          String key=row + ""String_Node_Str"" + relationName+ ""String_Node_Str""+ null;
          if (!rowAndDataprovider.containsKey(key)) {
            rowAndDataprovider.put(key,key);
            Runnable r=new ASynchonizedCellLoad(app,jtable,foundset,row,jtable.convertColumnIndexToModel(column),relationName,drd.getDefaultSort(),null);
            app.getScheduledExecutor().execute(r);
          }
          return renderer.isVisible() ? renderer : empty;
        }
      }
      drd.setRecord(state,true);
    }
  }
  if (renderer instanceof IDisplayData) {
    if (state != null) {
      Object data=null;
      if (dataProviderID != null) {
        int index=-1;
        if (!printing && (index=dataProviderID.indexOf('.')) > 0) {
          if (!ScopesUtils.isVariableScope(dataProviderID)) {
            String partName=dataProviderID.substring(0,index);
            final String restName=dataProviderID.substring(index + 1);
            String relationName=partName;
            if (relationName != null && !state.isRelatedFoundSetLoaded(relationName,restName)) {
              IApplication app=dal.getApplication();
              ((IDisplayData)renderer).setValueObject(null);
              String key=row + ""String_Node_Str"" + relationName+ ""String_Node_Str""+ restName;
              if (!rowAndDataprovider.containsKey(key)) {
                rowAndDataprovider.put(key,key);
                List<SortColumn> defaultPKSortColumns=null;
                try {
                  defaultPKSortColumns=app.getFoundSetManager().getDefaultPKSortColumns(app.getFlattenedSolution().getRelation(relationName).getForeignDataSource());
                }
 catch (                ServoyException e) {
                  Debug.error(e);
                }
                Runnable r=new ASynchonizedCellLoad(app,jtable,foundset,row,jtable.convertColumnIndexToModel(column),relationName,defaultPKSortColumns,restName);
                app.getScheduledExecutor().execute(r);
              }
              return renderer.isVisible() ? renderer : empty;
            }
            IFoundSetInternal rfs=state.getRelatedFoundSet(relationName);
            if (rfs != null) {
              int selected=rfs.getSelectedIndex();
              if (selected == -1 && rfs.getSize() > 0) {
                selected=0;
              }
              final IRecordInternal relState=rfs.getRecord(selected);
              if (testCalc(restName,relState,row,jtable.convertColumnIndexToModel(column),foundset))               return renderer;
            }
          }
        }
        if (!((IDisplayData)renderer).needEntireState() && !printing && testCalc(dataProviderID,state,row,jtable.convertColumnIndexToModel(column),foundset)) {
          return renderer;
        }
        try {
          data=dal.getValueObject(state,dataProviderID);
        }
 catch (        IllegalArgumentException iae) {
          Debug.error(iae);
          data=""String_Node_Str"";
        }
      }
      ((IDisplayData)renderer).setTagResolver(new ITagResolver(){
        public String getStringValue(        String name){
          return TagResolver.formatObject(dal.getValueObject(state,name),dal.getApplication().getSettings());
        }
      }
);
      if (data instanceof DbIdentValue) {
        data=((DbIdentValue)data).getPkValue();
      }
      ((IDisplayData)renderer).setValueObject(data);
    }
  }
  if (renderer instanceof IServoyAwareBean && state != null) {
    ((IServoyAwareBean)renderer).setSelectedRecord(new ServoyBeanState(state,dal.getFormScope()));
  }
  if (!(renderer instanceof IDisplayData) && !(renderer instanceof IDisplayRelatedData) && renderEventExecutor != null && renderEventExecutor.hasRenderCallback()) {
    renderEventExecutor.fireOnRender(false);
  }
  return renderer.isVisible() ? renderer : empty;
}",0.999663714830176
143618,"/** 
 * The name of the scope.
 */
public String getScopeName(){
  return getTypedProperty(StaticContentSpecLoader.PROPERTY_SCOPENAME);
}","/** 
 * The name of the scope.
 */
public String getScopeName(){
  String value=getTypedProperty(StaticContentSpecLoader.PROPERTY_SCOPENAME);
  if (value == null && getParent() instanceof Solution) {
    value=ScriptVariable.GLOBAL_SCOPE;
    setScopeName(value);
  }
  return value;
}",0.6161137440758294
143619,"/** 
 * The name of the scope.
 */
public String getScopeName(){
  return getTypedProperty(StaticContentSpecLoader.PROPERTY_SCOPENAME);
}","/** 
 * The name of the scope.
 */
public String getScopeName(){
  String value=getTypedProperty(StaticContentSpecLoader.PROPERTY_SCOPENAME);
  if (value == null && getParent() instanceof Solution) {
    value=ScriptVariable.GLOBAL_SCOPE;
    setScopeName(value);
  }
  return value;
}",0.6161137440758294
143620,"public void clearProperty(String propertyName){
  if (!propertiesMap.containsKey(propertyName)) {
    return;
  }
  isChanged=true;
  Element element=StaticContentSpecLoader.getContentSpec().getPropertyForObjectTypeByName(getTypeID(),propertyName);
  setProperty(propertyName,element == null ? null : element.getDefaultClassValue());
  propertiesMap.remove(propertyName);
}","public void clearProperty(String propertyName){
  if (!propertiesMap.containsKey(propertyName)) {
    return;
  }
  isChanged=true;
  Element element=StaticContentSpecLoader.getContentSpec().getPropertyForObjectTypeByName(getTypeID(),propertyName);
  setProperty(propertyName,element == null ? null : element.getDefaultClassValue());
  propertiesMap.remove(propertyName);
  if (bufferPropertiesMap != null) {
    bufferPropertiesMap.remove(propertyName);
  }
}",0.8955582232893158
143621,"/** 
 * @see com.servoy.j2db.scripting.ScriptEngine#destroy()
 */
@Override public void destroy(){
  if (debugger != null) {
    List<Context> list=contexts.remove(application);
    if (list.size() > 0) {
      Context[] array;
synchronized (list) {
        array=list.toArray(new Context[list.size()]);
        list.clear();
      }
      for (      Context cx : array) {
        DBGPStackManager manager=DBGPStackManager.removeManager(cx);
        if (manager != null) {
          manager.stop();
        }
      }
    }
    debugger.removeTerminationListener(this);
  }
  super.destroy();
}","/** 
 * @see com.servoy.j2db.scripting.ScriptEngine#destroy()
 */
@Override public void destroy(){
  if (debugger != null) {
    List<Context> list=contexts.remove(application);
    if (list != null && list.size() > 0) {
      Context[] array;
synchronized (list) {
        array=list.toArray(new Context[list.size()]);
        list.clear();
      }
      for (      Context cx : array) {
        DBGPStackManager manager=DBGPStackManager.removeManager(cx);
        if (manager != null) {
          manager.stop();
        }
      }
    }
    debugger.removeTerminationListener(this);
  }
  super.destroy();
}",0.9866888519134775
143622,"QuerySelect getPKSelectSqlSelect(IGlobalValueEntry provider,Table table,QuerySelect oldSQLQuery,List<IRecordInternal> findStates,boolean reduce,IDataSet omitPKs,List<SortColumn> orderByFields,boolean removeUnusedJoins) throws ServoyException {
  if (table == null) {
    throw new RepositoryException(ServoyException.InternalCodes.TABLE_NOT_FOUND);
  }
  QuerySelect retval;
  if (oldSQLQuery != null) {
    retval=AbstractBaseQuery.deepClone(oldSQLQuery);
    retval.setGroupBy(null);
    if (orderByFields != null)     retval.clearSorts();
    for (    String conditionName : retval.getConditionNames()) {
      if (conditionName.startsWith(SERVOY_CONDITION_PREFIX) && !(CONDITION_FILTER.equals(conditionName) || CONDITION_SEARCH.equals(conditionName) || CONDITION_RELATION.equals(conditionName))) {
        retval.setCondition(conditionName,null);
      }
    }
  }
 else {
    retval=new QuerySelect(new QueryTable(table.getSQLName(),table.getCatalog(),table.getSchema()));
  }
  ArrayList<IQuerySelectValue> pkQueryColumns=new ArrayList<IQuerySelectValue>(3);
  ArrayList<Column> pkColumns=new ArrayList<Column>(3);
  Iterator<Column> pks=table.getRowIdentColumns().iterator();
  if (!pks.hasNext()) {
    throw new RepositoryException(ServoyException.InternalCodes.PRIMARY_KEY_NOT_FOUND,new Object[]{table.getName()});
  }
  while (pks.hasNext()) {
    Column column=pks.next();
    pkColumns.add(column);
    pkQueryColumns.add(new QueryColumn(retval.getTable(),column.getID(),column.getSQLName(),column.getType(),column.getLength()));
  }
  retval.setColumns(pkQueryColumns);
  if (omitPKs != null && omitPKs.getRowCount() != 0) {
    retval.setCondition(CONDITION_OMIT,createSetConditionFromPKs(ISQLCondition.NOT_OPERATOR,pkQueryColumns.toArray(new QueryColumn[pkQueryColumns.size()]),pkColumns,omitPKs));
  }
 else   if (oldSQLQuery != null) {
    retval.setCondition(CONDITION_OMIT,oldSQLQuery.getConditionClone(CONDITION_OMIT));
  }
  if (findStates != null && findStates.size() != 0) {
    ISQLCondition moreWhere=null;
    for (    IRecordInternal obj : findStates) {
      if (obj instanceof FindState) {
        moreWhere=OrCondition.or(moreWhere,createConditionFromFindState((FindState)obj,retval,provider,pkQueryColumns));
      }
    }
    if (moreWhere != null) {
      if (reduce) {
        retval.addCondition(CONDITION_SEARCH,moreWhere);
      }
 else {
        retval.addConditionOr(CONDITION_SEARCH,moreWhere);
      }
      if (retval.getJoins() != null) {
        final boolean[] hasOr={false};
        retval.getCondition(CONDITION_SEARCH).acceptVisitor(new IVisitor(){
          public Object visit(          Object o){
            if (o instanceof OrCondition && ((OrCondition)o).getConditions().size() > 1) {
              hasOr[0]=true;
              return new VistorResult(o,false);
            }
            return o;
          }
        }
);
        if (hasOr[0]) {
          for (          ISQLJoin join : retval.getJoins()) {
            if (join instanceof QueryJoin && ((QueryJoin)join).getJoinType() == ISQLJoin.INNER_JOIN) {
              ((QueryJoin)join).setJoinType(ISQLJoin.LEFT_OUTER_JOIN);
            }
          }
        }
      }
    }
  }
  if (orderByFields != null || retval.getSorts() == null) {
    List<SortColumn> orderBy=orderByFields == null ? new ArrayList<SortColumn>(3) : orderByFields;
    if (orderBy.size() == 0) {
      for (int i=0; i < pkColumns.size(); i++) {
        orderBy.add(new SortColumn(pkColumns.get(i)));
      }
    }
    addSorts(retval,retval.getTable(),provider,table,orderBy,true);
  }
  if (removeUnusedJoins) {
    retval.removeUnusedJoins(false);
  }
  if (retval.getJoins() != null && retval.getColumns().size() == 1 && isDistinctAllowed(retval.getColumns(),retval.getSorts())) {
    retval.setDistinct(true);
  }
 else   if (retval.getJoins() == null && retval.getColumns().size() == pkColumns.size()) {
    retval.setPlainPKSelect(true);
  }
  return retval;
}","QuerySelect getPKSelectSqlSelect(IGlobalValueEntry provider,Table table,QuerySelect oldSQLQuery,List<IRecordInternal> findStates,boolean reduce,IDataSet omitPKs,List<SortColumn> orderByFields,boolean removeUnusedJoins) throws ServoyException {
  if (table == null) {
    throw new RepositoryException(ServoyException.InternalCodes.TABLE_NOT_FOUND);
  }
  QuerySelect retval;
  if (oldSQLQuery != null) {
    retval=AbstractBaseQuery.deepClone(oldSQLQuery);
    retval.setGroupBy(null);
    if (orderByFields != null)     retval.clearSorts();
    for (    String conditionName : retval.getConditionNames()) {
      if (conditionName.startsWith(SERVOY_CONDITION_PREFIX) && !(CONDITION_FILTER.equals(conditionName) || CONDITION_SEARCH.equals(conditionName) || CONDITION_RELATION.equals(conditionName))) {
        retval.setCondition(conditionName,null);
      }
    }
  }
 else {
    retval=new QuerySelect(new QueryTable(table.getSQLName(),table.getCatalog(),table.getSchema()));
  }
  ArrayList<IQuerySelectValue> pkQueryColumns=new ArrayList<IQuerySelectValue>(3);
  ArrayList<Column> pkColumns=new ArrayList<Column>(3);
  Iterator<Column> pks=table.getRowIdentColumns().iterator();
  if (!pks.hasNext()) {
    throw new RepositoryException(ServoyException.InternalCodes.PRIMARY_KEY_NOT_FOUND,new Object[]{table.getName()});
  }
  while (pks.hasNext()) {
    Column column=pks.next();
    pkColumns.add(column);
    pkQueryColumns.add(new QueryColumn(retval.getTable(),column.getID(),column.getSQLName(),column.getType(),column.getLength()));
  }
  retval.setColumns(pkQueryColumns);
  if (omitPKs != null && omitPKs.getRowCount() != 0) {
    retval.setCondition(CONDITION_OMIT,createSetConditionFromPKs(ISQLCondition.NOT_OPERATOR,pkQueryColumns.toArray(new QueryColumn[pkQueryColumns.size()]),pkColumns,omitPKs));
  }
 else   if (oldSQLQuery != null) {
    retval.setCondition(CONDITION_OMIT,oldSQLQuery.getConditionClone(CONDITION_OMIT));
  }
  if (findStates != null && findStates.size() != 0) {
    ISQLCondition moreWhere=null;
    for (    IRecordInternal obj : findStates) {
      if (obj instanceof FindState) {
        moreWhere=OrCondition.or(moreWhere,createConditionFromFindState((FindState)obj,retval,provider,pkQueryColumns));
      }
    }
    if (moreWhere != null) {
      if (reduce) {
        retval.addCondition(CONDITION_SEARCH,moreWhere);
      }
 else {
        retval.addConditionOr(CONDITION_SEARCH,moreWhere);
      }
      if (retval.getJoins() != null) {
        final boolean[] hasOr={false};
        retval.getCondition(CONDITION_SEARCH).acceptVisitor(new IVisitor(){
          public Object visit(          Object o){
            if (o instanceof OrCondition && ((OrCondition)o).getConditions().size() > 1) {
              hasOr[0]=true;
              return new VistorResult(o,false);
            }
            return o;
          }
        }
);
        if (hasOr[0]) {
          for (          ISQLJoin join : retval.getJoins()) {
            if (join instanceof QueryJoin && ((QueryJoin)join).getJoinType() == ISQLJoin.INNER_JOIN) {
              ((QueryJoin)join).setJoinType(ISQLJoin.LEFT_OUTER_JOIN);
            }
          }
        }
      }
    }
  }
  if (orderByFields != null || retval.getSorts() == null) {
    List<SortColumn> orderBy=orderByFields == null ? new ArrayList<SortColumn>(3) : orderByFields;
    if (orderBy.size() == 0) {
      for (int i=0; i < pkColumns.size(); i++) {
        orderBy.add(new SortColumn(pkColumns.get(i)));
      }
    }
    addSorts(retval,retval.getTable(),provider,table,orderBy,true);
  }
  if (removeUnusedJoins) {
    retval.removeUnusedJoins(false);
  }
  retval.setDistinct(false);
  retval.setPlainPKSelect(false);
  if (retval.getJoins() != null && retval.getColumns().size() == 1 && isDistinctAllowed(retval.getColumns(),retval.getSorts())) {
    retval.setDistinct(true);
  }
 else   if (retval.getJoins() == null && retval.getColumns().size() == pkColumns.size()) {
    retval.setPlainPKSelect(true);
  }
  return retval;
}",0.9920923810719215
143623,"/** 
 * @param flattenedSolution
 * @param form
 * @throws RepositoryException
 */
private void fill(){
  List<Form> allForms=flattenedSolution.getFormHierarchy(form);
  copyPropertiesMap(form.getPropertiesMap(),false);
  Set<String> methods=new HashSet<String>(64);
  Set<String> variables=new HashSet<String>(64);
  List<Integer> existingIDs=new ArrayList<Integer>();
  for (  Form f : allForms) {
    for (    IPersist ip : f.getAllObjectsAsList()) {
      Integer extendsID=(ip instanceof ISupportExtendsID) ? new Integer(((ISupportExtendsID)ip).getExtendsID()) : Integer.valueOf(-1);
      if (!existingIDs.contains(new Integer(ip.getID())) && !existingIDs.contains(extendsID)) {
        if (ip instanceof ISupportExtendsID && PersistHelper.isOverrideOrphanElement((ISupportExtendsID)ip)) {
          continue;
        }
        boolean addScriptMethod=(ip instanceof ScriptMethod && methods.add(((ScriptMethod)ip).getName()));
        boolean addScriptVariable=(ip instanceof ScriptVariable && variables.add(((ScriptVariable)ip).getName()));
        boolean addOtherElement=(!(ip instanceof Part) && !(ip instanceof ScriptMethod) && !(ip instanceof ScriptVariable));
        if (addScriptVariable || addScriptMethod || addOtherElement) {
          if (ip instanceof TabPanel) {
            internalAddChild(new FlattenedTabPanel((TabPanel)ip));
          }
 else           if (ip instanceof Portal) {
            internalAddChild(new FlattenedPortal((Portal)ip));
          }
 else {
            internalAddChild(ip);
          }
        }
      }
      if (ip instanceof ISupportExtendsID && PersistHelper.isOverrideElement((ISupportExtendsID)ip) && !existingIDs.contains(extendsID)) {
        existingIDs.add(extendsID);
      }
    }
  }
  Part prevPart=null;
  Collections.reverse(allForms);
  for (  Form f : allForms) {
    Iterator<Part> parts=f.getParts();
    while (parts.hasNext()) {
      Part part=parts.next();
      if (PersistHelper.isOverrideElement(part)) {
        Part parentPart=null;
        Iterator<Part> it=getParts();
        while (it.hasNext()) {
          Part temp=it.next();
          if (temp.getID() == part.getExtendsID() || temp.getExtendsID() == part.getExtendsID()) {
            parentPart=temp;
            break;
          }
        }
        if (parentPart != null) {
          internalAddChild(part);
          internalRemoveChild(parentPart);
        }
      }
 else {
        internalAddChild(part);
        prevPart=part;
      }
    }
  }
  setSize(checkParts(getParts(),getSize()));
}","/** 
 * @param flattenedSolution
 * @param form
 * @throws RepositoryException
 */
private void fill(){
  List<Form> allForms=flattenedSolution.getFormHierarchy(form);
  copyPropertiesMap(form.getPropertiesMap(),false);
  Set<String> methods=new HashSet<String>(64);
  Set<String> variables=new HashSet<String>(64);
  List<Integer> existingIDs=new ArrayList<Integer>();
  for (  Form f : allForms) {
    for (    IPersist ip : f.getAllObjectsAsList()) {
      Integer extendsID=(ip instanceof ISupportExtendsID) ? new Integer(((ISupportExtendsID)ip).getExtendsID()) : Integer.valueOf(-1);
      if (!existingIDs.contains(new Integer(ip.getID())) && !existingIDs.contains(extendsID)) {
        if (ip instanceof ISupportExtendsID && PersistHelper.isOverrideOrphanElement((ISupportExtendsID)ip)) {
          continue;
        }
        boolean addScriptMethod=(ip instanceof ScriptMethod && methods.add(((ScriptMethod)ip).getName()));
        boolean addScriptVariable=(ip instanceof ScriptVariable && variables.add(((ScriptVariable)ip).getName()));
        boolean addOtherElement=(!(ip instanceof Part) && !(ip instanceof ScriptMethod) && !(ip instanceof ScriptVariable));
        if (addScriptVariable || addScriptMethod || addOtherElement) {
          if (ip instanceof TabPanel) {
            internalAddChild(new FlattenedTabPanel((TabPanel)ip));
          }
 else           if (ip instanceof Portal) {
            internalAddChild(new FlattenedPortal((Portal)ip));
          }
 else {
            internalAddChild(ip);
          }
        }
      }
      if (ip instanceof ISupportExtendsID && PersistHelper.isOverrideElement((ISupportExtendsID)ip) && !existingIDs.contains(extendsID)) {
        existingIDs.add(extendsID);
      }
    }
  }
  Part prevPart=null;
  Collections.reverse(allForms);
  for (  Form f : allForms) {
    Iterator<Part> parts=f.getParts();
    while (parts.hasNext()) {
      Part part=parts.next();
      if (PersistHelper.isOverrideElement(part)) {
        Part parentPart=null;
        Iterator<Part> it=getParts();
        while (it.hasNext()) {
          Part temp=it.next();
          if (temp.getID() == part.getExtendsID() || temp.getExtendsID() == part.getExtendsID()) {
            parentPart=temp;
            break;
          }
        }
        if (parentPart != null) {
          internalAddChild(part);
          internalRemoveChild(parentPart);
        }
      }
 else {
        if (prevPart == null || prevPart.getPartType() < part.getPartType() || (prevPart.getPartType() == part.getPartType() && part.canBeMoved())) {
          internalAddChild(part);
          prevPart=part;
        }
      }
    }
  }
  setSize(checkParts(getParts(),getSize()));
}",0.9686903398243604
143624,"@SuppressWarnings(""String_Node_Str"") public void renderHeader(Response response){
  StringBuffer listStyle=new StringBuffer();
  listStyle.append(""String_Node_Str"");
  String fFamily=""String_Node_Str"";
  String bgColor=""String_Node_Str"";
  String fgColor=""String_Node_Str"";
  String fSize=""String_Node_Str"";
  String padding=""String_Node_Str"";
  String margin=""String_Node_Str"";
  if (getFont() != null) {
    Font f=getFont();
    if (f != null) {
      if (f.getFamily() != null) {
        fFamily=f.getFamily();
        if (fFamily.contains(""String_Node_Str""))         fFamily=""String_Node_Str"" + fFamily + ""String_Node_Str"";
      }
      if (f.getName() != null) {
        String fName=f.getName();
        if (fName.contains(""String_Node_Str""))         fName=""String_Node_Str"" + fName + ""String_Node_Str"";
        fFamily=fName + ""String_Node_Str"" + fFamily;
      }
      if (f.isBold())       listStyle.append(""String_Node_Str"");
      if (f.isItalic())       listStyle.append(""String_Node_Str"");
      fSize=Integer.toString(f.getSize()) + ""String_Node_Str"";
    }
  }
  if (getBackground() != null) {
    bgColor=Integer.toHexString(getBackground().getRGB());
    bgColor=""String_Node_Str"" + bgColor.substring(2,bgColor.length());
  }
  if (getForeground() != null) {
    fgColor=Integer.toHexString(getForeground().getRGB());
    fgColor=""String_Node_Str"" + fgColor.substring(2,fgColor.length());
  }
  Insets _padding=getPadding();
  if (getPadding() != null)   padding=""String_Node_Str"" + _padding.top + ""String_Node_Str""+ _padding.right+ ""String_Node_Str""+ _padding.bottom+ ""String_Node_Str""+ _padding.left+ ""String_Node_Str"";
  Insets _margin=getMargin();
  if (_margin != null)   margin=""String_Node_Str"" + _margin.top + ""String_Node_Str""+ _margin.right+ ""String_Node_Str""+ _margin.bottom+ ""String_Node_Str""+ _margin.left+ ""String_Node_Str"";
  listStyle.append(""String_Node_Str"" + fFamily + ""String_Node_Str"");
  listStyle.append(""String_Node_Str"" + bgColor + ""String_Node_Str"");
  listStyle.append(""String_Node_Str"" + fgColor + ""String_Node_Str"");
  listStyle.append(""String_Node_Str"" + fSize + ""String_Node_Str"");
  listStyle.append(""String_Node_Str"" + (getSize().width - 6) + ""String_Node_Str"");
  listStyle.append(""String_Node_Str"" + margin + ""String_Node_Str"");
  listStyle.append(""String_Node_Str"" + padding + ""String_Node_Str"");
  listStyle.append(""String_Node_Str"" + TemplateGenerator.getHorizontalAlignValue(getHorizontalAlignment()));
  listStyle.append(""String_Node_Str"");
  response.write(""String_Node_Str"" + listStyle + ""String_Node_Str"");
}","@SuppressWarnings(""String_Node_Str"") public void renderHeader(Response response){
  StringBuffer listStyle=new StringBuffer();
  listStyle.append(""String_Node_Str"");
  String fFamily=""String_Node_Str"";
  String bgColor=""String_Node_Str"";
  String fgColor=""String_Node_Str"";
  String fSize=""String_Node_Str"";
  String padding=""String_Node_Str"";
  String margin=""String_Node_Str"";
  if (getFont() != null) {
    Font f=getFont();
    if (f != null) {
      if (f.getFamily() != null) {
        fFamily=f.getFamily();
        if (fFamily.contains(""String_Node_Str""))         fFamily=""String_Node_Str"" + fFamily + ""String_Node_Str"";
      }
      if (f.getName() != null) {
        String fName=f.getName();
        if (fName.contains(""String_Node_Str""))         fName=""String_Node_Str"" + fName + ""String_Node_Str"";
        fFamily=fName + ""String_Node_Str"" + fFamily;
      }
      if (f.isBold())       listStyle.append(""String_Node_Str"");
      if (f.isItalic())       listStyle.append(""String_Node_Str"");
      fSize=Integer.toString(f.getSize()) + ""String_Node_Str"";
    }
  }
  if (getBackground() != null) {
    bgColor=getWebColor(getBackground().getRGB());
  }
  if (getForeground() != null) {
    fgColor=getWebColor(getForeground().getRGB());
  }
  Insets _padding=getPadding();
  if (getPadding() != null)   padding=""String_Node_Str"" + _padding.top + ""String_Node_Str""+ _padding.right+ ""String_Node_Str""+ _padding.bottom+ ""String_Node_Str""+ _padding.left+ ""String_Node_Str"";
  Insets _margin=getMargin();
  if (_margin != null)   margin=""String_Node_Str"" + _margin.top + ""String_Node_Str""+ _margin.right+ ""String_Node_Str""+ _margin.bottom+ ""String_Node_Str""+ _margin.left+ ""String_Node_Str"";
  listStyle.append(""String_Node_Str"" + fFamily + ""String_Node_Str"");
  listStyle.append(""String_Node_Str"" + bgColor + ""String_Node_Str"");
  listStyle.append(""String_Node_Str"" + fgColor + ""String_Node_Str"");
  listStyle.append(""String_Node_Str"" + fSize + ""String_Node_Str"");
  listStyle.append(""String_Node_Str"" + (getSize().width - 6) + ""String_Node_Str"");
  listStyle.append(""String_Node_Str"" + margin + ""String_Node_Str"");
  listStyle.append(""String_Node_Str"" + padding + ""String_Node_Str"");
  listStyle.append(""String_Node_Str"" + TemplateGenerator.getHorizontalAlignValue(getHorizontalAlignment()));
  listStyle.append(""String_Node_Str"");
  response.write(""String_Node_Str"" + listStyle + ""String_Node_Str"");
}",0.4913689281413087
143625,"private void init(){
  add(new HeaderContributor(new IHeaderContributor(){
    private static final long serialVersionUID=1L;
    public void renderHead(    IHeaderResponse response){
      response.renderCSSReference(new CompressedResourceReference(WebDataLookupField.class,""String_Node_Str""));
    }
  }
){
    @Override public boolean isEnabled(    Component component){
      return !getScriptObject().isReadOnly() && getScriptObject().isEnabled();
    }
  }
);
  setOutputMarkupPlaceholderTag(true);
  AutoCompleteSettings behSettings=new AutoCompleteSettings();
  behSettings.setMaxHeightInPx(200);
  behSettings.setPreselect(true);
  behSettings.setShowCompleteListOnFocusGain(true);
  behSettings.setAdjustInputWidth(false);
  ClientProperties clp=(application.getApplicationType() != IApplication.HEADLESS_CLIENT ? ((WebClientInfo)Session.get().getClientInfo()).getProperties() : null);
  if (clp != null && (!clp.isBrowserInternetExplorer() || clp.getBrowserVersionMajor() >= 8)) {
    behSettings.setUseSmartPositioning(true);
    behSettings.setUseHideShowCoveredIEFix(false);
  }
 else {
    behSettings.setUseSmartPositioning(false);
    behSettings.setUseHideShowCoveredIEFix(true);
  }
  behSettings.setThrottleDelay(500);
  IAutoCompleteRenderer<Object> renderer=new IAutoCompleteRenderer<Object>(){
    protected String getTextValue(    Object object){
      String str=(object == null ? ""String_Node_Str"" : object.toString());
      if (str.trim().equals(""String_Node_Str""))       str=""String_Node_Str"";
      return str;
    }
    protected void renderChoice(    Object object,    Response response,    String criteria){
      if (IValueList.SEPARATOR_DESIGN_VALUE.equals(object))       return;
      String renderedObject=(object == null) ? ""String_Node_Str"" : object.toString();
      if (!HtmlUtils.hasHtmlTag(renderedObject))       renderedObject=HtmlUtils.escapeMarkup(renderedObject,true,false).toString();
      response.write(getTextValue(object));
    }
    public void render(    Object object,    Response response,    String criteria){
      String textValue=getTextValue(object);
      if (textValue == null) {
        throw new IllegalStateException(""String_Node_Str"" + object.toString());
      }
      textValue=textValue.replaceAll(""String_Node_Str"",""String_Node_Str"");
      response.write(""String_Node_Str"" + textValue + ""String_Node_Str"");
      response.write(""String_Node_Str"");
      renderChoice(object,response,criteria);
      response.write(""String_Node_Str"");
    }
    @SuppressWarnings(""String_Node_Str"") public void renderHeader(    Response response){
      StringBuffer listStyle=new StringBuffer();
      listStyle.append(""String_Node_Str"");
      String fFamily=""String_Node_Str"";
      String bgColor=""String_Node_Str"";
      String fgColor=""String_Node_Str"";
      String fSize=""String_Node_Str"";
      String padding=""String_Node_Str"";
      String margin=""String_Node_Str"";
      if (getFont() != null) {
        Font f=getFont();
        if (f != null) {
          if (f.getFamily() != null) {
            fFamily=f.getFamily();
            if (fFamily.contains(""String_Node_Str""))             fFamily=""String_Node_Str"" + fFamily + ""String_Node_Str"";
          }
          if (f.getName() != null) {
            String fName=f.getName();
            if (fName.contains(""String_Node_Str""))             fName=""String_Node_Str"" + fName + ""String_Node_Str"";
            fFamily=fName + ""String_Node_Str"" + fFamily;
          }
          if (f.isBold())           listStyle.append(""String_Node_Str"");
          if (f.isItalic())           listStyle.append(""String_Node_Str"");
          fSize=Integer.toString(f.getSize()) + ""String_Node_Str"";
        }
      }
      if (getBackground() != null) {
        bgColor=Integer.toHexString(getBackground().getRGB());
        bgColor=""String_Node_Str"" + bgColor.substring(2,bgColor.length());
      }
      if (getForeground() != null) {
        fgColor=Integer.toHexString(getForeground().getRGB());
        fgColor=""String_Node_Str"" + fgColor.substring(2,fgColor.length());
      }
      Insets _padding=getPadding();
      if (getPadding() != null)       padding=""String_Node_Str"" + _padding.top + ""String_Node_Str""+ _padding.right+ ""String_Node_Str""+ _padding.bottom+ ""String_Node_Str""+ _padding.left+ ""String_Node_Str"";
      Insets _margin=getMargin();
      if (_margin != null)       margin=""String_Node_Str"" + _margin.top + ""String_Node_Str""+ _margin.right+ ""String_Node_Str""+ _margin.bottom+ ""String_Node_Str""+ _margin.left+ ""String_Node_Str"";
      listStyle.append(""String_Node_Str"" + fFamily + ""String_Node_Str"");
      listStyle.append(""String_Node_Str"" + bgColor + ""String_Node_Str"");
      listStyle.append(""String_Node_Str"" + fgColor + ""String_Node_Str"");
      listStyle.append(""String_Node_Str"" + fSize + ""String_Node_Str"");
      listStyle.append(""String_Node_Str"" + (getSize().width - 6) + ""String_Node_Str"");
      listStyle.append(""String_Node_Str"" + margin + ""String_Node_Str"");
      listStyle.append(""String_Node_Str"" + padding + ""String_Node_Str"");
      listStyle.append(""String_Node_Str"" + TemplateGenerator.getHorizontalAlignValue(getHorizontalAlignment()));
      listStyle.append(""String_Node_Str"");
      response.write(""String_Node_Str"" + listStyle + ""String_Node_Str"");
    }
    public void renderFooter(    Response response){
      response.write(""String_Node_Str"");
    }
  }
;
  AutoCompleteBehavior<Object> beh=new AutoCompleteBehavior<Object>(renderer,behSettings){
    private static final long serialVersionUID=1L;
    /** 
 * @see org.apache.wicket.extensions.ajax.markup.html.autocomplete.AutoCompleteBehavior#getChoices(java.lang.String)
 */
    @Override protected Iterator<Object> getChoices(    String input){
      try {
        dlm.fill(parentState,getDataProviderID(),input,false);
        return dlm.iterator();
      }
 catch (      Exception ex) {
        Debug.error(ex);
      }
      return Collections.emptyList().iterator();
    }
    /** 
 * @see org.apache.wicket.ajax.AbstractDefaultAjaxBehavior#getFailureScript()
 */
    @Override protected CharSequence getFailureScript(){
      return ""String_Node_Str"";
    }
    /** 
 * @see org.apache.wicket.ajax.AbstractDefaultAjaxBehavior#getPreconditionScript()
 */
    @Override protected CharSequence getPreconditionScript(){
      return ""String_Node_Str"" + super.getPreconditionScript();
    }
    @Override public void renderHead(    IHeaderResponse response){
      settings.setShowListOnEmptyInput(Boolean.TRUE.equals(UIUtils.getUIProperty(getScriptObject(),application,IApplication.TYPE_AHEAD_SHOW_POPUP_WHEN_EMPTY,Boolean.TRUE)));
      settings.setShowListOnFocusGain(Boolean.TRUE.equals(UIUtils.getUIProperty(getScriptObject(),application,IApplication.TYPE_AHEAD_SHOW_POPUP_ON_FOCUS_GAIN,Boolean.TRUE)));
      if (!getScriptObject().isReadOnly() && getScriptObject().isEnabled()) {
        super.renderHead(response);
        response.renderJavascript(""String_Node_Str"",""String_Node_Str"");
      }
    }
    /** 
 * @see org.apache.wicket.behavior.AbstractBehavior#isEnabled(org.apache.wicket.Component)
 */
    @Override public boolean isEnabled(    Component component){
      IFormUIInternal<?> formui=findParent(IFormUIInternal.class);
      if (formui != null && formui.isDesignMode()) {
        return false;
      }
      return super.isEnabled(component) && WebClientSession.get().useAjax();
    }
  }
;
  add(beh);
}","private void init(){
  add(new HeaderContributor(new IHeaderContributor(){
    private static final long serialVersionUID=1L;
    public void renderHead(    IHeaderResponse response){
      response.renderCSSReference(new CompressedResourceReference(WebDataLookupField.class,""String_Node_Str""));
    }
  }
){
    @Override public boolean isEnabled(    Component component){
      return !getScriptObject().isReadOnly() && getScriptObject().isEnabled();
    }
  }
);
  setOutputMarkupPlaceholderTag(true);
  AutoCompleteSettings behSettings=new AutoCompleteSettings();
  behSettings.setMaxHeightInPx(200);
  behSettings.setPreselect(true);
  behSettings.setShowCompleteListOnFocusGain(true);
  behSettings.setAdjustInputWidth(false);
  ClientProperties clp=(application.getApplicationType() != IApplication.HEADLESS_CLIENT ? ((WebClientInfo)Session.get().getClientInfo()).getProperties() : null);
  if (clp != null && (!clp.isBrowserInternetExplorer() || clp.getBrowserVersionMajor() >= 8)) {
    behSettings.setUseSmartPositioning(true);
    behSettings.setUseHideShowCoveredIEFix(false);
  }
 else {
    behSettings.setUseSmartPositioning(false);
    behSettings.setUseHideShowCoveredIEFix(true);
  }
  behSettings.setThrottleDelay(500);
  IAutoCompleteRenderer<Object> renderer=new IAutoCompleteRenderer<Object>(){
    protected String getTextValue(    Object object){
      String str=(object == null ? ""String_Node_Str"" : object.toString());
      if (str.trim().equals(""String_Node_Str""))       str=""String_Node_Str"";
      return str;
    }
    protected void renderChoice(    Object object,    Response response,    String criteria){
      if (IValueList.SEPARATOR_DESIGN_VALUE.equals(object))       return;
      String renderedObject=(object == null) ? ""String_Node_Str"" : object.toString();
      if (!HtmlUtils.hasHtmlTag(renderedObject))       renderedObject=HtmlUtils.escapeMarkup(renderedObject,true,false).toString();
      response.write(getTextValue(object));
    }
    public void render(    Object object,    Response response,    String criteria){
      String textValue=getTextValue(object);
      if (textValue == null) {
        throw new IllegalStateException(""String_Node_Str"" + object.toString());
      }
      textValue=textValue.replaceAll(""String_Node_Str"",""String_Node_Str"");
      response.write(""String_Node_Str"" + textValue + ""String_Node_Str"");
      response.write(""String_Node_Str"");
      renderChoice(object,response,criteria);
      response.write(""String_Node_Str"");
    }
    @SuppressWarnings(""String_Node_Str"") public void renderHeader(    Response response){
      StringBuffer listStyle=new StringBuffer();
      listStyle.append(""String_Node_Str"");
      String fFamily=""String_Node_Str"";
      String bgColor=""String_Node_Str"";
      String fgColor=""String_Node_Str"";
      String fSize=""String_Node_Str"";
      String padding=""String_Node_Str"";
      String margin=""String_Node_Str"";
      if (getFont() != null) {
        Font f=getFont();
        if (f != null) {
          if (f.getFamily() != null) {
            fFamily=f.getFamily();
            if (fFamily.contains(""String_Node_Str""))             fFamily=""String_Node_Str"" + fFamily + ""String_Node_Str"";
          }
          if (f.getName() != null) {
            String fName=f.getName();
            if (fName.contains(""String_Node_Str""))             fName=""String_Node_Str"" + fName + ""String_Node_Str"";
            fFamily=fName + ""String_Node_Str"" + fFamily;
          }
          if (f.isBold())           listStyle.append(""String_Node_Str"");
          if (f.isItalic())           listStyle.append(""String_Node_Str"");
          fSize=Integer.toString(f.getSize()) + ""String_Node_Str"";
        }
      }
      if (getBackground() != null) {
        bgColor=getWebColor(getBackground().getRGB());
      }
      if (getForeground() != null) {
        fgColor=getWebColor(getForeground().getRGB());
      }
      Insets _padding=getPadding();
      if (getPadding() != null)       padding=""String_Node_Str"" + _padding.top + ""String_Node_Str""+ _padding.right+ ""String_Node_Str""+ _padding.bottom+ ""String_Node_Str""+ _padding.left+ ""String_Node_Str"";
      Insets _margin=getMargin();
      if (_margin != null)       margin=""String_Node_Str"" + _margin.top + ""String_Node_Str""+ _margin.right+ ""String_Node_Str""+ _margin.bottom+ ""String_Node_Str""+ _margin.left+ ""String_Node_Str"";
      listStyle.append(""String_Node_Str"" + fFamily + ""String_Node_Str"");
      listStyle.append(""String_Node_Str"" + bgColor + ""String_Node_Str"");
      listStyle.append(""String_Node_Str"" + fgColor + ""String_Node_Str"");
      listStyle.append(""String_Node_Str"" + fSize + ""String_Node_Str"");
      listStyle.append(""String_Node_Str"" + (getSize().width - 6) + ""String_Node_Str"");
      listStyle.append(""String_Node_Str"" + margin + ""String_Node_Str"");
      listStyle.append(""String_Node_Str"" + padding + ""String_Node_Str"");
      listStyle.append(""String_Node_Str"" + TemplateGenerator.getHorizontalAlignValue(getHorizontalAlignment()));
      listStyle.append(""String_Node_Str"");
      response.write(""String_Node_Str"" + listStyle + ""String_Node_Str"");
    }
    public void renderFooter(    Response response){
      response.write(""String_Node_Str"");
    }
    private String getWebColor(    int color){
      String webColor=Integer.toHexString(color);
      int startIdx=webColor.length() - 6;
      if (startIdx < 0)       startIdx=0;
      webColor=webColor.substring(startIdx);
      StringBuilder sb=new StringBuilder();
      sb.append('#');
      int nrMissing0=6 - webColor.length();
      for (int i=0; i < nrMissing0; i++) {
        sb.append('0');
      }
      sb.append(webColor);
      return sb.toString();
    }
  }
;
  AutoCompleteBehavior<Object> beh=new AutoCompleteBehavior<Object>(renderer,behSettings){
    private static final long serialVersionUID=1L;
    /** 
 * @see org.apache.wicket.extensions.ajax.markup.html.autocomplete.AutoCompleteBehavior#getChoices(java.lang.String)
 */
    @Override protected Iterator<Object> getChoices(    String input){
      try {
        dlm.fill(parentState,getDataProviderID(),input,false);
        return dlm.iterator();
      }
 catch (      Exception ex) {
        Debug.error(ex);
      }
      return Collections.emptyList().iterator();
    }
    /** 
 * @see org.apache.wicket.ajax.AbstractDefaultAjaxBehavior#getFailureScript()
 */
    @Override protected CharSequence getFailureScript(){
      return ""String_Node_Str"";
    }
    /** 
 * @see org.apache.wicket.ajax.AbstractDefaultAjaxBehavior#getPreconditionScript()
 */
    @Override protected CharSequence getPreconditionScript(){
      return ""String_Node_Str"" + super.getPreconditionScript();
    }
    @Override public void renderHead(    IHeaderResponse response){
      settings.setShowListOnEmptyInput(Boolean.TRUE.equals(UIUtils.getUIProperty(getScriptObject(),application,IApplication.TYPE_AHEAD_SHOW_POPUP_WHEN_EMPTY,Boolean.TRUE)));
      settings.setShowListOnFocusGain(Boolean.TRUE.equals(UIUtils.getUIProperty(getScriptObject(),application,IApplication.TYPE_AHEAD_SHOW_POPUP_ON_FOCUS_GAIN,Boolean.TRUE)));
      if (!getScriptObject().isReadOnly() && getScriptObject().isEnabled()) {
        super.renderHead(response);
        response.renderJavascript(""String_Node_Str"",""String_Node_Str"");
      }
    }
    /** 
 * @see org.apache.wicket.behavior.AbstractBehavior#isEnabled(org.apache.wicket.Component)
 */
    @Override public boolean isEnabled(    Component component){
      IFormUIInternal<?> formui=findParent(IFormUIInternal.class);
      if (formui != null && formui.isDesignMode()) {
        return false;
      }
      return super.isEnabled(component) && WebClientSession.get().useAjax();
    }
  }
;
  add(beh);
}",0.9551079515534492
143626,"/** 
 * @param height
 * @param border
 * @param margin
 * @param fontSize
 * @param properties
 * @return
 */
@SuppressWarnings(""String_Node_Str"") public Insets getPaddingAndBorder(int height,Border border,Insets margin,int fontSize,Properties properties,boolean isButton,int valign){
  Insets insets=null;
  Insets borderMargin=margin;
  if (border != null) {
    if (border instanceof CompoundBorder) {
      Insets marginInside=((CompoundBorder)border).getInsideBorder().getBorderInsets(null);
      borderMargin=TemplateGenerator.sumInsets(borderMargin,marginInside);
      Border ob=((CompoundBorder)border).getOutsideBorder();
      if (ob instanceof ISupportCustomBorderInsets) {
        insets=((ISupportCustomBorderInsets)ob).getCustomBorderInsets();
      }
 else {
        insets=ob.getBorderInsets(null);
      }
    }
 else     if (border instanceof ISupportCustomBorderInsets) {
      insets=((ISupportCustomBorderInsets)border).getCustomBorderInsets();
    }
 else {
      try {
        insets=border.getBorderInsets(null);
      }
 catch (      Exception ex) {
        insets=defaultBorder;
        Debug.error(ex);
      }
    }
  }
 else {
    insets=defaultBorder;
  }
  Insets padding=borderMargin;
  if (padding == null)   padding=defaultPadding;
  if (properties != null) {
    Insets borderAndPadding=TemplateGenerator.sumInsets(insets,padding);
    int innerHeight=height;
    if (borderAndPadding != null)     innerHeight-=borderAndPadding.top + borderAndPadding.bottom;
    int bottomPaddingExtra=0;
    if (isButton && valign != ISupportTextSetup.CENTER) {
      bottomPaddingExtra=innerHeight;
    }
    if (padding == null) {
      properties.put(""String_Node_Str"",""String_Node_Str"");
      properties.put(""String_Node_Str"",""String_Node_Str"");
      properties.put(""String_Node_Str"",""String_Node_Str"");
      properties.put(""String_Node_Str"",getSizeString(bottomPaddingExtra));
    }
 else {
      properties.put(""String_Node_Str"",getSizeString(padding.top));
      properties.put(""String_Node_Str"",getSizeString(padding.right));
      properties.put(""String_Node_Str"",getSizeString(padding.left));
      properties.put(""String_Node_Str"",getSizeString((bottomPaddingExtra + padding.bottom)));
    }
  }
  if (insets == null)   insets=padding;
 else {
    insets=TemplateGenerator.sumInsets(insets,padding);
  }
  return insets;
}","/** 
 * @param height
 * @param border
 * @param margin
 * @param fontSize
 * @param properties
 * @return
 */
@SuppressWarnings(""String_Node_Str"") public Insets getPaddingAndBorder(int height,Border border,Insets margin,int fontSize,Properties properties,boolean isButton,int valign){
  Insets insets=null;
  Insets borderMargin=margin;
  if (border != null) {
    if (border instanceof CompoundBorder) {
      Insets marginInside=ComponentFactoryHelper.getBorderInsetsForNoComponent(((CompoundBorder)border).getInsideBorder());
      borderMargin=TemplateGenerator.sumInsets(borderMargin,marginInside);
      Border ob=((CompoundBorder)border).getOutsideBorder();
      if (ob instanceof ISupportCustomBorderInsets) {
        insets=((ISupportCustomBorderInsets)ob).getCustomBorderInsets();
      }
 else {
        insets=ComponentFactoryHelper.getBorderInsetsForNoComponent(ob);
      }
    }
 else     if (border instanceof ISupportCustomBorderInsets) {
      insets=((ISupportCustomBorderInsets)border).getCustomBorderInsets();
    }
 else {
      try {
        insets=ComponentFactoryHelper.getBorderInsetsForNoComponent(border);
      }
 catch (      Exception ex) {
        insets=defaultBorder;
        Debug.error(ex);
      }
    }
  }
 else {
    insets=defaultBorder;
  }
  Insets padding=borderMargin;
  if (padding == null)   padding=defaultPadding;
  if (properties != null) {
    Insets borderAndPadding=TemplateGenerator.sumInsets(insets,padding);
    int innerHeight=height;
    if (borderAndPadding != null)     innerHeight-=borderAndPadding.top + borderAndPadding.bottom;
    int bottomPaddingExtra=0;
    if (isButton && valign != ISupportTextSetup.CENTER) {
      bottomPaddingExtra=innerHeight;
    }
    if (padding == null) {
      properties.put(""String_Node_Str"",""String_Node_Str"");
      properties.put(""String_Node_Str"",""String_Node_Str"");
      properties.put(""String_Node_Str"",""String_Node_Str"");
      properties.put(""String_Node_Str"",getSizeString(bottomPaddingExtra));
    }
 else {
      properties.put(""String_Node_Str"",getSizeString(padding.top));
      properties.put(""String_Node_Str"",getSizeString(padding.right));
      properties.put(""String_Node_Str"",getSizeString(padding.left));
      properties.put(""String_Node_Str"",getSizeString((bottomPaddingExtra + padding.bottom)));
    }
  }
  if (insets == null)   insets=padding;
 else {
    insets=TemplateGenerator.sumInsets(insets,padding);
  }
  return insets;
}",0.9567926879933528
143627,"public Insets getPadding(Border border,Insets margin){
  Insets borderMargin=margin;
  if (border != null) {
    if (border instanceof CompoundBorder) {
      Insets marginInside=((CompoundBorder)border).getInsideBorder().getBorderInsets(null);
      borderMargin=TemplateGenerator.sumInsets(borderMargin,marginInside);
    }
  }
  return (borderMargin == null ? defaultPadding : borderMargin);
}","public Insets getPadding(Border border,Insets margin){
  Insets borderMargin=margin;
  if (border != null) {
    if (border instanceof CompoundBorder) {
      Insets marginInside=ComponentFactoryHelper.getBorderInsetsForNoComponent(((CompoundBorder)border).getInsideBorder());
      borderMargin=TemplateGenerator.sumInsets(borderMargin,marginInside);
    }
  }
  return (borderMargin == null ? defaultPadding : borderMargin);
}",0.6116504854368932
143628,"protected static BorderAndPadding applyBaseComponentProperties(BaseComponent component,Form form,TextualStyle styleObj,Insets defaultPadding,Insets defaultBorder,IServiceProvider sp){
  Pair<IStyleSheet,IStyleRule> styleInfo=ComponentFactory.getStyleForBasicComponent(sp,component,form);
  Insets insetsBorder=null;
  Border designBorder=null;
  if (component.getBorderType() != null) {
    insetsBorder=ComponentFactoryHelper.createBorderCSSProperties(component.getBorderType(),styleObj);
    designBorder=ComponentFactoryHelper.createBorder(component.getBorderType());
  }
  Insets insetsMargin=null;
  if (component instanceof ISupportTextSetup) {
    insetsMargin=((ISupportTextSetup)component).getMargin();
  }
  if (styleInfo != null) {
    IStyleSheet ss=styleInfo.getLeft();
    IStyleRule s=styleInfo.getRight();
    if (ss != null && s != null) {
      List<String> attributeNames=s.getAttributeNames();
      for (      String s_attr : attributeNames) {
        if (s_attr.toLowerCase().contains(""String_Node_Str""))         continue;
        if (s_attr.toLowerCase().contains(""String_Node_Str"") && component.getBorderType() != null)         continue;
        String val=s.getValue(s_attr);
        if (s_attr.equals(""String_Node_Str"")) {
          String tmp=val;
          if (tmp.endsWith(""String_Node_Str"")) {
            int size=Utils.getAsInteger(tmp.substring(0,tmp.length() - 2));
            if (size == 9) {
              size=11;
            }
 else {
              size=(int)(size * (4 / (double)3));
            }
            styleObj.setProperty(s_attr,size + ""String_Node_Str"");
          }
 else {
            int size=0;
            if (tmp.endsWith(""String_Node_Str"")) {
              size=Utils.getAsInteger(tmp.substring(0,tmp.length() - 2));
            }
 else {
              size=Utils.getAsInteger(tmp);
            }
            if (size == 9) {
              size=7;
            }
 else {
              size=(int)(size * (3 / (double)4));
            }
            styleObj.setProperty(s_attr,size + ""String_Node_Str"");
          }
        }
 else {
          if (val.toString() != null)           styleObj.setProperty(s_attr,s.getValues(s_attr),false);
        }
      }
      if (component.getBorderType() == null) {
        if (ss.hasBorder(s)) {
          Border b=ss.getBorder(s);
          if (b != null) {
            try {
              insetsBorder=b.getBorderInsets(null);
            }
 catch (            Exception e) {
              Debug.error(""String_Node_Str"" + b + ""String_Node_Str"",e);
            }
            TextualStyle borderStyle=new TextualStyle();
            ComponentFactoryHelper.createBorderCSSProperties(ComponentFactoryHelper.createBorderString(b),borderStyle);
            Enumeration<Object> cssAttributes=borderStyle.keys();
            while (cssAttributes.hasMoreElements()) {
              String att=(String)cssAttributes.nextElement();
              styleObj.setProperty(att,borderStyle.getProperty(att),false);
            }
          }
        }
      }
      if (insetsMargin == null) {
        if (ss.hasMargin(s)) {
          insetsMargin=ss.getMargin(s);
        }
      }
    }
  }
  if (component.getFontType() != null) {
    Pair<String,String>[] props=PersistHelper.createFontCSSProperties(component.getFontType());
    if (props != null) {
      for (      Pair<String,String> element : props) {
        if (element == null)         continue;
        styleObj.setProperty(element.getLeft(),element.getRight());
      }
    }
  }
  if (component.getForeground() != null) {
    styleObj.setProperty(""String_Node_Str"",PersistHelper.createColorString(component.getForeground()));
  }
  if (component.getTransparent()) {
    styleObj.setProperty(""String_Node_Str"",IStyleSheet.COLOR_TRANSPARENT);
  }
 else   if (component.getBackground() != null) {
    styleObj.setProperty(""String_Node_Str"",PersistHelper.createColorString(component.getBackground()));
  }
  if (insetsBorder == null)   insetsBorder=defaultBorder;
  if (insetsMargin == null && defaultPadding != null)   insetsMargin=defaultPadding;
  BorderAndPadding bp=new BorderAndPadding(insetsBorder,insetsMargin);
  styleObj.setProperty(""String_Node_Str"",(designBorder instanceof EmptyBorder) ? createInsetsText(bp.getSum()) : createInsetsText(bp.getPadding()));
  return bp;
}","protected static BorderAndPadding applyBaseComponentProperties(BaseComponent component,Form form,TextualStyle styleObj,Insets defaultPadding,Insets defaultBorder,IServiceProvider sp){
  Pair<IStyleSheet,IStyleRule> styleInfo=ComponentFactory.getStyleForBasicComponent(sp,component,form);
  Insets insetsBorder=null;
  Border designBorder=null;
  if (component.getBorderType() != null) {
    insetsBorder=ComponentFactoryHelper.createBorderCSSProperties(component.getBorderType(),styleObj);
    designBorder=ComponentFactoryHelper.createBorder(component.getBorderType());
  }
  Insets insetsMargin=null;
  if (component instanceof ISupportTextSetup) {
    insetsMargin=((ISupportTextSetup)component).getMargin();
  }
  if (styleInfo != null) {
    IStyleSheet ss=styleInfo.getLeft();
    IStyleRule s=styleInfo.getRight();
    if (ss != null && s != null) {
      List<String> attributeNames=s.getAttributeNames();
      for (      String s_attr : attributeNames) {
        if (s_attr.toLowerCase().contains(""String_Node_Str""))         continue;
        if (s_attr.toLowerCase().contains(""String_Node_Str"") && component.getBorderType() != null)         continue;
        String val=s.getValue(s_attr);
        if (s_attr.equals(""String_Node_Str"")) {
          String tmp=val;
          if (tmp.endsWith(""String_Node_Str"")) {
            int size=Utils.getAsInteger(tmp.substring(0,tmp.length() - 2));
            if (size == 9) {
              size=11;
            }
 else {
              size=(int)(size * (4 / (double)3));
            }
            styleObj.setProperty(s_attr,size + ""String_Node_Str"");
          }
 else {
            int size=0;
            if (tmp.endsWith(""String_Node_Str"")) {
              size=Utils.getAsInteger(tmp.substring(0,tmp.length() - 2));
            }
 else {
              size=Utils.getAsInteger(tmp);
            }
            if (size == 9) {
              size=7;
            }
 else {
              size=(int)(size * (3 / (double)4));
            }
            styleObj.setProperty(s_attr,size + ""String_Node_Str"");
          }
        }
 else {
          if (val.toString() != null)           styleObj.setProperty(s_attr,s.getValues(s_attr),false);
        }
      }
      if (component.getBorderType() == null) {
        if (ss.hasBorder(s)) {
          Border b=ss.getBorder(s);
          if (b != null) {
            try {
              insetsBorder=ComponentFactoryHelper.getBorderInsetsForNoComponent(b);
            }
 catch (            Exception e) {
              Debug.error(""String_Node_Str"" + b + ""String_Node_Str"",e);
            }
            TextualStyle borderStyle=new TextualStyle();
            ComponentFactoryHelper.createBorderCSSProperties(ComponentFactoryHelper.createBorderString(b),borderStyle);
            Enumeration<Object> cssAttributes=borderStyle.keys();
            while (cssAttributes.hasMoreElements()) {
              String att=(String)cssAttributes.nextElement();
              styleObj.setProperty(att,borderStyle.getProperty(att),false);
            }
          }
        }
      }
      if (insetsMargin == null) {
        if (ss.hasMargin(s)) {
          insetsMargin=ss.getMargin(s);
        }
      }
    }
  }
  if (component.getFontType() != null) {
    Pair<String,String>[] props=PersistHelper.createFontCSSProperties(component.getFontType());
    if (props != null) {
      for (      Pair<String,String> element : props) {
        if (element == null)         continue;
        styleObj.setProperty(element.getLeft(),element.getRight());
      }
    }
  }
  if (component.getForeground() != null) {
    styleObj.setProperty(""String_Node_Str"",PersistHelper.createColorString(component.getForeground()));
  }
  if (component.getTransparent()) {
    styleObj.setProperty(""String_Node_Str"",IStyleSheet.COLOR_TRANSPARENT);
  }
 else   if (component.getBackground() != null) {
    styleObj.setProperty(""String_Node_Str"",PersistHelper.createColorString(component.getBackground()));
  }
  if (insetsBorder == null)   insetsBorder=defaultBorder;
  if (insetsMargin == null && defaultPadding != null)   insetsMargin=defaultPadding;
  BorderAndPadding bp=new BorderAndPadding(insetsBorder,insetsMargin);
  styleObj.setProperty(""String_Node_Str"",(designBorder instanceof EmptyBorder) ? createInsetsText(bp.getSum()) : createInsetsText(bp.getPadding()));
  return bp;
}",0.9914648212226068
143629,"@SuppressWarnings(""String_Node_Str"") protected static String instrumentBodyText(CharSequence bodyText,int halign,int valign,boolean isHtml,Border border,Insets margin,String cssid,char mnemonic,String imgID,String imgURL,int height,boolean isButton,Cursor bodyCursor,boolean isAnchored,boolean isElementAnchored){
  Insets padding=null;
  boolean usePadding=false;
  if (border == null) {
    padding=margin;
  }
 else   if (border instanceof EmptyBorder) {
    usePadding=true;
    padding=border.getBorderInsets(null);
  }
 else   if (border instanceof CompoundBorder) {
    Border inside=((CompoundBorder)border).getInsideBorder();
    if (inside instanceof EmptyBorder) {
      usePadding=true;
      padding=inside.getBorderInsets(null);
    }
  }
 else   if (!(border instanceof BevelBorder) && !(border instanceof EtchedBorder)) {
    if (border instanceof TitledBorder) {
      usePadding=true;
      padding=new Insets(5,7,5,7);
      int fontSize=((TitledBorder)border).getTitleFont() != null ? ((TitledBorder)border).getTitleFont().getSize() : 11;
      padding.top+=fontSize + 4;
    }
 else {
      padding=border.getBorderInsets(null);
    }
  }
  StringBuffer instrumentedBodyText=new StringBuffer();
  instrumentedBodyText.append(""String_Node_Str"" + (bodyCursor == null ? ""String_Node_Str"" : ""String_Node_Str"" + (bodyCursor.getType() == Cursor.HAND_CURSOR ? ""String_Node_Str"" : ""String_Node_Str"") + ""String_Node_Str"") + ""String_Node_Str"");
  int top=0;
  int bottom=0;
  int left=0;
  int right=0;
  if (padding != null && usePadding) {
    top=padding.top;
    bottom=padding.bottom;
    left=padding.left;
    right=padding.right;
  }
  instrumentedBodyText.append(""String_Node_Str"" + left + ""String_Node_Str"");
  instrumentedBodyText.append(""String_Node_Str"" + right + ""String_Node_Str"");
  if (halign == ISupportTextSetup.LEFT)   instrumentedBodyText.append(""String_Node_Str"");
 else   if (halign == ISupportTextSetup.RIGHT)   instrumentedBodyText.append(""String_Node_Str"");
 else   instrumentedBodyText.append(""String_Node_Str"");
  if (cssid == null) {
    if (valign == ISupportTextSetup.TOP)     instrumentedBodyText.append(""String_Node_Str"" + top + ""String_Node_Str"");
 else     if (valign == ISupportTextSetup.BOTTOM)     instrumentedBodyText.append(""String_Node_Str"" + bottom + ""String_Node_Str"");
  }
  boolean isOnlyImgDisplay=(Strings.isEmpty(bodyText) && imgURL != null) || isHTMLWithOnlyImg(bodyText);
  if (!isHtml)   instrumentedBodyText.append(""String_Node_Str"");
  if (isHtml && valign != ISupportTextSetup.CENTER && cssid == null)   instrumentedBodyText.append(""String_Node_Str"");
 else   if ((cssid != null && !isHTMLWithOnlyImg(bodyText)) || (!isOnlyImgDisplay && valign != ISupportTextSetup.CENTER))   instrumentedBodyText.append(""String_Node_Str"");
 else   if (!isButton && !isHtml && imgURL == null) {
    int innerHeight=height;
    if (padding != null)     innerHeight-=padding.top + padding.bottom;
    instrumentedBodyText.append(""String_Node_Str"" + innerHeight + ""String_Node_Str"");
  }
  if (isAnchored) {
    instrumentedBodyText.append(""String_Node_Str"");
  }
  instrumentedBodyText.append(""String_Node_Str"");
  if (cssid != null) {
    instrumentedBodyText.append(""String_Node_Str"");
    instrumentedBodyText.append(cssid);
    instrumentedBodyText.append(""String_Node_Str"");
  }
  instrumentedBodyText.append(""String_Node_Str"");
  if (!Strings.isEmpty(bodyText)) {
    CharSequence bodyTextValue=bodyText;
    if (mnemonic > 0 && !isHtml) {
      StringBuffer sbBodyText=new StringBuffer(bodyTextValue);
      int mnemonicIdx=sbBodyText.indexOf(Character.toString(mnemonic));
      if (mnemonicIdx != -1) {
        sbBodyText.insert(mnemonicIdx + 1,""String_Node_Str"");
        sbBodyText.insert(mnemonicIdx,""String_Node_Str"");
        bodyTextValue=sbBodyText.toString();
      }
    }
    if (imgURL != null) {
      String src=""String_Node_Str"";
      if (!isElementAnchored) {
        src=imgURL;
      }
      StringBuffer sb=new StringBuffer(""String_Node_Str"").append(imgID).append(""String_Node_Str"").append(src).append(""String_Node_Str"").append(bodyTextValue);
      bodyTextValue=sb.toString();
    }
    instrumentedBodyText.append(bodyTextValue);
  }
 else   if (imgURL != null) {
    instrumentedBodyText.append(""String_Node_Str"");
    instrumentedBodyText.append(imgID);
    instrumentedBodyText.append(""String_Node_Str"");
    instrumentedBodyText.append(!isElementAnchored ? imgURL : ""String_Node_Str"");
    instrumentedBodyText.append(""String_Node_Str"");
  }
  instrumentedBodyText.append(""String_Node_Str"");
  if (isOnlyImgDisplay) {
    String sValign=(valign == ISupportTextSetup.TOP) ? ""String_Node_Str"" : (valign == ISupportTextSetup.BOTTOM) ? ""String_Node_Str"" : ""String_Node_Str"";
    instrumentedBodyText=(new StringBuffer(""String_Node_Str"").append(sValign).append(""String_Node_Str"").append(instrumentedBodyText).append(""String_Node_Str""));
  }
  if (border instanceof TitledBorder) {
    instrumentedBodyText=new StringBuffer(getTitledBorderOpenMarkup((TitledBorder)border) + instrumentedBodyText.toString() + getTitledBorderCloseMarkup());
  }
  return instrumentedBodyText.toString();
}","@SuppressWarnings(""String_Node_Str"") protected static String instrumentBodyText(CharSequence bodyText,int halign,int valign,boolean isHtml,Border border,Insets margin,String cssid,char mnemonic,String imgID,String imgURL,int height,boolean isButton,Cursor bodyCursor,boolean isAnchored,boolean isElementAnchored){
  Insets padding=null;
  boolean usePadding=false;
  if (border == null) {
    padding=margin;
  }
 else   if (border instanceof EmptyBorder) {
    usePadding=true;
    padding=ComponentFactoryHelper.getBorderInsetsForNoComponent(border);
  }
 else   if (border instanceof CompoundBorder) {
    Border inside=((CompoundBorder)border).getInsideBorder();
    if (inside instanceof EmptyBorder) {
      usePadding=true;
      padding=ComponentFactoryHelper.getBorderInsetsForNoComponent(inside);
    }
  }
 else   if (!(border instanceof BevelBorder) && !(border instanceof EtchedBorder)) {
    if (border instanceof TitledBorder) {
      usePadding=true;
      padding=new Insets(5,7,5,7);
      int fontSize=((TitledBorder)border).getTitleFont() != null ? ((TitledBorder)border).getTitleFont().getSize() : 11;
      padding.top+=fontSize + 4;
    }
 else {
      padding=ComponentFactoryHelper.getBorderInsetsForNoComponent(border);
    }
  }
  StringBuffer instrumentedBodyText=new StringBuffer();
  instrumentedBodyText.append(""String_Node_Str"" + (bodyCursor == null ? ""String_Node_Str"" : ""String_Node_Str"" + (bodyCursor.getType() == Cursor.HAND_CURSOR ? ""String_Node_Str"" : ""String_Node_Str"") + ""String_Node_Str"") + ""String_Node_Str"");
  int top=0;
  int bottom=0;
  int left=0;
  int right=0;
  if (padding != null && usePadding) {
    top=padding.top;
    bottom=padding.bottom;
    left=padding.left;
    right=padding.right;
  }
  instrumentedBodyText.append(""String_Node_Str"" + left + ""String_Node_Str"");
  instrumentedBodyText.append(""String_Node_Str"" + right + ""String_Node_Str"");
  if (halign == ISupportTextSetup.LEFT)   instrumentedBodyText.append(""String_Node_Str"");
 else   if (halign == ISupportTextSetup.RIGHT)   instrumentedBodyText.append(""String_Node_Str"");
 else   instrumentedBodyText.append(""String_Node_Str"");
  if (cssid == null) {
    if (valign == ISupportTextSetup.TOP)     instrumentedBodyText.append(""String_Node_Str"" + top + ""String_Node_Str"");
 else     if (valign == ISupportTextSetup.BOTTOM)     instrumentedBodyText.append(""String_Node_Str"" + bottom + ""String_Node_Str"");
  }
  boolean isOnlyImgDisplay=(Strings.isEmpty(bodyText) && imgURL != null) || isHTMLWithOnlyImg(bodyText);
  if (!isHtml)   instrumentedBodyText.append(""String_Node_Str"");
  if (isHtml && valign != ISupportTextSetup.CENTER && cssid == null)   instrumentedBodyText.append(""String_Node_Str"");
 else   if ((cssid != null && !isHTMLWithOnlyImg(bodyText)) || (!isOnlyImgDisplay && valign != ISupportTextSetup.CENTER))   instrumentedBodyText.append(""String_Node_Str"");
 else   if (!isButton && !isHtml && imgURL == null) {
    int innerHeight=height;
    if (padding != null)     innerHeight-=padding.top + padding.bottom;
    instrumentedBodyText.append(""String_Node_Str"" + innerHeight + ""String_Node_Str"");
  }
  if (isAnchored) {
    instrumentedBodyText.append(""String_Node_Str"");
  }
  instrumentedBodyText.append(""String_Node_Str"");
  if (cssid != null) {
    instrumentedBodyText.append(""String_Node_Str"");
    instrumentedBodyText.append(cssid);
    instrumentedBodyText.append(""String_Node_Str"");
  }
  instrumentedBodyText.append(""String_Node_Str"");
  if (!Strings.isEmpty(bodyText)) {
    CharSequence bodyTextValue=bodyText;
    if (mnemonic > 0 && !isHtml) {
      StringBuffer sbBodyText=new StringBuffer(bodyTextValue);
      int mnemonicIdx=sbBodyText.indexOf(Character.toString(mnemonic));
      if (mnemonicIdx != -1) {
        sbBodyText.insert(mnemonicIdx + 1,""String_Node_Str"");
        sbBodyText.insert(mnemonicIdx,""String_Node_Str"");
        bodyTextValue=sbBodyText.toString();
      }
    }
    if (imgURL != null) {
      String src=""String_Node_Str"";
      if (!isElementAnchored) {
        src=imgURL;
      }
      StringBuffer sb=new StringBuffer(""String_Node_Str"").append(imgID).append(""String_Node_Str"").append(src).append(""String_Node_Str"").append(bodyTextValue);
      bodyTextValue=sb.toString();
    }
    instrumentedBodyText.append(bodyTextValue);
  }
 else   if (imgURL != null) {
    instrumentedBodyText.append(""String_Node_Str"");
    instrumentedBodyText.append(imgID);
    instrumentedBodyText.append(""String_Node_Str"");
    instrumentedBodyText.append(!isElementAnchored ? imgURL : ""String_Node_Str"");
    instrumentedBodyText.append(""String_Node_Str"");
  }
  instrumentedBodyText.append(""String_Node_Str"");
  if (isOnlyImgDisplay) {
    String sValign=(valign == ISupportTextSetup.TOP) ? ""String_Node_Str"" : (valign == ISupportTextSetup.BOTTOM) ? ""String_Node_Str"" : ""String_Node_Str"";
    instrumentedBodyText=(new StringBuffer(""String_Node_Str"").append(sValign).append(""String_Node_Str"").append(instrumentedBodyText).append(""String_Node_Str""));
  }
  if (border instanceof TitledBorder) {
    instrumentedBodyText=new StringBuffer(getTitledBorderOpenMarkup((TitledBorder)border) + instrumentedBodyText.toString() + getTitledBorderCloseMarkup());
  }
  return instrumentedBodyText.toString();
}",0.9449030524092916
143630,"/** 
 * @see com.servoy.j2db.ui.ISupportWebBounds#getPaddingAndBorder()
 */
public Insets getPaddingAndBorder(){
  Border b=border;
  Insets m=null;
  if (b instanceof EmptyBorder) {
    m=b.getBorderInsets(null);
    b=null;
  }
  return ((ChangesRecorder)scriptable.getChangesRecorder()).getPaddingAndBorder(size.height,b,m,getFontSize(),null,false,valign);
}","/** 
 * @see com.servoy.j2db.ui.ISupportWebBounds#getPaddingAndBorder()
 */
public Insets getPaddingAndBorder(){
  Border b=border;
  Insets m=null;
  if (b instanceof EmptyBorder) {
    m=ComponentFactoryHelper.getBorderInsetsForNoComponent(b);
    b=null;
  }
  return ((ChangesRecorder)scriptable.getChangesRecorder()).getPaddingAndBorder(size.height,b,m,getFontSize(),null,false,valign);
}",0.9416445623342176
143631,"public Rectangle getWebBounds(){
  Border b=border;
  Insets m=null;
  if (b instanceof EmptyBorder) {
    m=b.getBorderInsets(null);
    b=null;
  }
  Dimension d=((ChangesRecorder)scriptable.getChangesRecorder()).calculateWebSize(size.width,size.height,b,m,getFontSize(),null,false,valign);
  return new Rectangle(location,d);
}","public Rectangle getWebBounds(){
  Border b=border;
  Insets m=null;
  if (b instanceof EmptyBorder) {
    m=ComponentFactoryHelper.getBorderInsetsForNoComponent(b);
    b=null;
  }
  Dimension d=((ChangesRecorder)scriptable.getChangesRecorder()).calculateWebSize(size.width,size.height,b,m,getFontSize(),null,false,valign);
  return new Rectangle(location,d);
}",0.9364161849710982
143632,"private void setUpComponent(Component comp,IRecordInternal record,Object compColor,Object fgColor,Object compFont,Object compBorder,int visibleRowIndex){
  if (tabIndex < 0) {
    TabIndexHelper.setUpTabIndexAttributeModifier(comp,tabIndex);
  }
 else {
    if (elementTabIndexes.size() > 0) {
      Integer idx=elementTabIndexes.get(cellToElement.get(comp));
      if (idx == null) {
        TabIndexHelper.setUpTabIndexAttributeModifier(comp,ISupportWebTabSeq.SKIP);
      }
 else {
        TabIndexHelper.setUpTabIndexAttributeModifier(comp,tabIndex + 1 + visibleRowIndex * elementTabIndexes.size() + idx.intValue());
      }
    }
 else {
      TabIndexHelper.setUpTabIndexAttributeModifier(comp,tabIndex + 1);
    }
  }
  if (compColor != null) {
    MarkupContainer cellContainer=comp.getParent();
    String compColorStr=compColor.toString();
    if (cellContainer instanceof CellContainer) {
      cellContainer.add(new StyleAppendingModifier(new Model<String>(""String_Node_Str"" + compColorStr)));
    }
  }
  WebCellBasedView.this.applyStyleOnComponent(comp,compColor,fgColor,compFont,compBorder);
  if (scriptable.isReadOnly() && validationEnabled && comp instanceof IScriptableProvider&& ((IScriptableProvider)comp).getScriptObject() instanceof HasRuntimeReadOnly) {
    ((HasRuntimeReadOnly)((IScriptableProvider)comp).getScriptObject()).setReadOnly(true);
  }
  List<Component> readOnlyComponents=((WebForm)fc.getFormUI()).getReadOnlyComponents();
  if (readOnlyComponents.indexOf(WebCellBasedView.this) != -1 && readOnlyComponents.indexOf(comp) == -1)   readOnlyComponents.add(comp);
  if (!isEnabled() && comp instanceof IComponent) {
    ((IComponent)comp).setComponentEnabled(false);
  }
  if (comp instanceof IDisplayRelatedData && record != null) {
    ((IDisplayRelatedData)comp).setRecord(record,true);
  }
  MarkupContainer parent=comp.getParent();
  if (parent instanceof CellContainer) {
    parent.setVisible(comp.isVisible());
  }
  if (compBorder != null) {
    IPersist elem=WebCellBasedView.this.cellToElement.get(comp);
    Object colId=WebCellBasedView.this.elementToColumnIdentifierComponent.get(elem);
    final int idx=WebCellBasedView.this.visibleColummIdentifierComponents.indexOf(colId);
    final int[] borderWidth=new int[]{0,0};
    Border cb=ComponentFactoryHelper.createBorder((String)compBorder);
    if (cb != null) {
      int defaultLeftPadding;
      int defaultRightPadding;
switch (elem.getTypeID()) {
case IRepository.FIELDS:
        Insets fieldMargin=null;
      if (comp instanceof IFieldComponent) {
        fieldMargin=((IFieldComponent)comp).getMargin();
      }
    defaultLeftPadding=fieldMargin != null ? fieldMargin.left : TemplateGenerator.DEFAULT_FIELD_PADDING.left;
  defaultRightPadding=fieldMargin != null ? fieldMargin.right : TemplateGenerator.DEFAULT_FIELD_PADDING.right;
break;
case IRepository.GRAPHICALCOMPONENTS:
Insets gcMargin=null;
if (elem instanceof GraphicalComponent) {
gcMargin=((GraphicalComponent)elem).getMargin();
}
defaultLeftPadding=gcMargin != null ? gcMargin.left : TemplateGenerator.DEFAULT_LABEL_PADDING.left;
defaultRightPadding=gcMargin != null ? gcMargin.right : TemplateGenerator.DEFAULT_LABEL_PADDING.right;
break;
default :
defaultLeftPadding=0;
defaultRightPadding=0;
}
Insets borderInsets=cb.getBorderInsets(null);
borderWidth[0]=borderInsets.left + defaultLeftPadding;
borderWidth[1]=borderInsets.right + defaultRightPadding;
}
comp.add(new StyleAppendingModifier(new Model<String>(){
@Override public String getObject(){
StringBuilder style=new StringBuilder();
if (idx > 0) {
style.append(""String_Node_Str"").append(borderWidth[0]).append(""String_Node_Str"");
}
if (idx < WebCellBasedView.this.visibleColummIdentifierComponents.size() - 1) {
style.append(""String_Node_Str"").append(borderWidth[1]).append(""String_Node_Str"");
}
return style.toString();
}
}
));
}
}","private void setUpComponent(Component comp,IRecordInternal record,Object compColor,Object fgColor,Object compFont,Object compBorder,int visibleRowIndex){
  if (tabIndex < 0) {
    TabIndexHelper.setUpTabIndexAttributeModifier(comp,tabIndex);
  }
 else {
    if (elementTabIndexes.size() > 0) {
      Integer idx=elementTabIndexes.get(cellToElement.get(comp));
      if (idx == null) {
        TabIndexHelper.setUpTabIndexAttributeModifier(comp,ISupportWebTabSeq.SKIP);
      }
 else {
        TabIndexHelper.setUpTabIndexAttributeModifier(comp,tabIndex + 1 + visibleRowIndex * elementTabIndexes.size() + idx.intValue());
      }
    }
 else {
      TabIndexHelper.setUpTabIndexAttributeModifier(comp,tabIndex + 1);
    }
  }
  if (compColor != null) {
    MarkupContainer cellContainer=comp.getParent();
    String compColorStr=compColor.toString();
    if (cellContainer instanceof CellContainer) {
      cellContainer.add(new StyleAppendingModifier(new Model<String>(""String_Node_Str"" + compColorStr)));
    }
  }
  WebCellBasedView.this.applyStyleOnComponent(comp,compColor,fgColor,compFont,compBorder);
  if (scriptable.isReadOnly() && validationEnabled && comp instanceof IScriptableProvider&& ((IScriptableProvider)comp).getScriptObject() instanceof HasRuntimeReadOnly) {
    ((HasRuntimeReadOnly)((IScriptableProvider)comp).getScriptObject()).setReadOnly(true);
  }
  List<Component> readOnlyComponents=((WebForm)fc.getFormUI()).getReadOnlyComponents();
  if (readOnlyComponents.indexOf(WebCellBasedView.this) != -1 && readOnlyComponents.indexOf(comp) == -1)   readOnlyComponents.add(comp);
  if (!isEnabled() && comp instanceof IComponent) {
    ((IComponent)comp).setComponentEnabled(false);
  }
  if (comp instanceof IDisplayRelatedData && record != null) {
    ((IDisplayRelatedData)comp).setRecord(record,true);
  }
  MarkupContainer parent=comp.getParent();
  if (parent instanceof CellContainer) {
    parent.setVisible(comp.isVisible());
  }
  if (compBorder != null) {
    IPersist elem=WebCellBasedView.this.cellToElement.get(comp);
    Object colId=WebCellBasedView.this.elementToColumnIdentifierComponent.get(elem);
    final int idx=WebCellBasedView.this.visibleColummIdentifierComponents.indexOf(colId);
    final int[] borderWidth=new int[]{0,0};
    Border cb=ComponentFactoryHelper.createBorder((String)compBorder);
    if (cb != null) {
      int defaultLeftPadding;
      int defaultRightPadding;
switch (elem.getTypeID()) {
case IRepository.FIELDS:
        Insets fieldMargin=null;
      if (comp instanceof IFieldComponent) {
        fieldMargin=((IFieldComponent)comp).getMargin();
      }
    defaultLeftPadding=fieldMargin != null ? fieldMargin.left : TemplateGenerator.DEFAULT_FIELD_PADDING.left;
  defaultRightPadding=fieldMargin != null ? fieldMargin.right : TemplateGenerator.DEFAULT_FIELD_PADDING.right;
break;
case IRepository.GRAPHICALCOMPONENTS:
Insets gcMargin=null;
if (elem instanceof GraphicalComponent) {
gcMargin=((GraphicalComponent)elem).getMargin();
}
defaultLeftPadding=gcMargin != null ? gcMargin.left : TemplateGenerator.DEFAULT_LABEL_PADDING.left;
defaultRightPadding=gcMargin != null ? gcMargin.right : TemplateGenerator.DEFAULT_LABEL_PADDING.right;
break;
default :
defaultLeftPadding=0;
defaultRightPadding=0;
}
Insets borderInsets=ComponentFactoryHelper.getBorderInsetsForNoComponent(cb);
borderWidth[0]=borderInsets.left + defaultLeftPadding;
borderWidth[1]=borderInsets.right + defaultRightPadding;
}
comp.add(new StyleAppendingModifier(new Model<String>(){
@Override public String getObject(){
StringBuilder style=new StringBuilder();
if (idx > 0) {
style.append(""String_Node_Str"").append(borderWidth[0]).append(""String_Node_Str"");
}
if (idx < WebCellBasedView.this.visibleColummIdentifierComponents.size() - 1) {
style.append(""String_Node_Str"").append(borderWidth[1]).append(""String_Node_Str"");
}
return style.toString();
}
}
));
}
}",0.9940675780242456
143633,"public void setSize(int x,int y){
  setComponentSize(x,y);
  Border b=getComponent().getBorder();
  Insets m=null;
  if (b instanceof EmptyBorder) {
    m=b.getBorderInsets(null);
    b=null;
  }
  getChangesRecorder().setSize(x,y,b,m,getComponent().getFontSize(),false,getComponent().getVerticalAlignment());
}","public void setSize(int x,int y){
  setComponentSize(x,y);
  Border b=getComponent().getBorder();
  Insets m=null;
  if (b instanceof EmptyBorder) {
    m=ComponentFactoryHelper.getBorderInsetsForNoComponent(b);
    b=null;
  }
  getChangesRecorder().setSize(x,y,b,m,getComponent().getFontSize(),false,getComponent().getVerticalAlignment());
}",0.9051987767584098
143634,"@Override public void setBorder(String spec){
  Border border=ComponentFactoryHelper.createBorder(spec);
  Border oldBorder=getComponent().getBorder();
  if (getComponent() instanceof Component && oldBorder instanceof CompoundBorder && ((CompoundBorder)oldBorder).getInsideBorder() != null) {
    Insets insets=((CompoundBorder)oldBorder).getInsideBorder().getBorderInsets((Component)getComponent());
    getComponent().setBorder(BorderFactory.createCompoundBorder(border,BorderFactory.createEmptyBorder(insets.top,insets.left,insets.bottom,insets.right)));
  }
 else {
    getComponent().setBorder(border);
  }
  getChangesRecorder().setBorder(spec);
  Border b=border;
  Insets m=null;
  if (b instanceof EmptyBorder) {
    m=b.getBorderInsets(null);
    b=null;
  }
  getChangesRecorder().setSize(getComponent().getSize().width,getComponent().getSize().height,b,m,getComponent().getFontSize(),false,getComponent().getVerticalAlignment());
}","@Override public void setBorder(String spec){
  Border border=ComponentFactoryHelper.createBorder(spec);
  Border oldBorder=getComponent().getBorder();
  if (getComponent() instanceof Component && oldBorder instanceof CompoundBorder && ((CompoundBorder)oldBorder).getInsideBorder() != null) {
    Insets insets=((CompoundBorder)oldBorder).getInsideBorder().getBorderInsets((Component)getComponent());
    getComponent().setBorder(BorderFactory.createCompoundBorder(border,BorderFactory.createEmptyBorder(insets.top,insets.left,insets.bottom,insets.right)));
  }
 else {
    getComponent().setBorder(border);
  }
  getChangesRecorder().setBorder(spec);
  Border b=border;
  Insets m=null;
  if (b instanceof EmptyBorder) {
    m=ComponentFactoryHelper.getBorderInsetsForNoComponent(b);
    b=null;
  }
  getChangesRecorder().setSize(getComponent().getSize().width,getComponent().getSize().height,b,m,getComponent().getFontSize(),false,getComponent().getVerticalAlignment());
}",0.9770594369134517
143635,"public static String createBorderString(Object currentBorder){
  String retval=null;
  if (currentBorder != null) {
    if (currentBorder instanceof CompoundBorder) {
      Border oborder=((CompoundBorder)currentBorder).getOutsideBorder();
      Border iborder=((CompoundBorder)currentBorder).getInsideBorder();
      retval=COMPOUND_BORDER + ""String_Node_Str"";
      retval+=""String_Node_Str"" + createBorderString(oborder);
      retval+=""String_Node_Str"" + createBorderString(iborder) + ""String_Node_Str"";
    }
 else     if (currentBorder instanceof BevelBorder) {
      BevelBorder border=(BevelBorder)currentBorder;
      int type=border.getBevelType();
      retval=BEVEL_BORDER + ""String_Node_Str"" + type;
      if (border.getHighlightInnerColor() != null || border.getHighlightOuterColor() != null || border.getShadowInnerColor() != null || border.getShadowOuterColor() != null) {
        retval+=""String_Node_Str"" + PersistHelper.createColorString(border.getHighlightOuterColor());
        retval+=""String_Node_Str"" + PersistHelper.createColorString(border.getHighlightInnerColor());
        retval+=""String_Node_Str"" + PersistHelper.createColorString(border.getShadowOuterColor());
        retval+=""String_Node_Str"" + PersistHelper.createColorString(border.getShadowInnerColor());
      }
    }
 else     if (currentBorder instanceof EtchedBorder) {
      EtchedBorder border=(EtchedBorder)currentBorder;
      int type=border.getEtchType();
      Color hi=border.getHighlightColor();
      Color sh=border.getShadowColor();
      retval=ETCHED_BORDER + ""String_Node_Str"" + type+ ""String_Node_Str""+ PersistHelper.createColorString(hi)+ ""String_Node_Str""+ PersistHelper.createColorString(sh);
    }
 else     if (currentBorder instanceof LineBorder) {
      LineBorder border=(LineBorder)currentBorder;
      int thick=border.getThickness();
      Color lineColor=border.getLineColor();
      retval=LINE_BORDER + ""String_Node_Str"" + thick+ ""String_Node_Str""+ PersistHelper.createColorString(lineColor);
    }
 else     if (currentBorder instanceof TitledBorder) {
      TitledBorder border=(TitledBorder)currentBorder;
      String s=border.getTitle();
      s=Utils.stringReplace(s,""String_Node_Str"",""String_Node_Str"");
      Font f=border.getTitleFont();
      Color c=border.getTitleColor();
      retval=TITLED_BORDER + ""String_Node_Str"" + s;
      int justification=border.getTitleJustification();
      int position=border.getTitlePosition();
      if (justification != 0 || position != 0 || f != null || c != null) {
        retval+=""String_Node_Str"" + justification + ""String_Node_Str""+ position;
        if (f != null) {
          retval+=""String_Node_Str"" + PersistHelper.createFontString(f);
          if (c != null) {
            retval+=""String_Node_Str"" + PersistHelper.createColorString(c);
          }
        }
      }
    }
 else     if (currentBorder instanceof SpecialMatteBorder) {
      SpecialMatteBorder border=(SpecialMatteBorder)currentBorder;
      retval=((border instanceof RoundedBorder) ? ROUNDED_BORDER : SPECIAL_MATTE_BORDER) + ""String_Node_Str"" + border.getTop()+ ""String_Node_Str""+ border.getRight()+ ""String_Node_Str""+ border.getBottom()+ ""String_Node_Str""+ border.getLeft();
      retval+=""String_Node_Str"" + PersistHelper.createColorString(border.getTopColor());
      retval+=""String_Node_Str"" + PersistHelper.createColorString(border.getRightColor());
      retval+=""String_Node_Str"" + PersistHelper.createColorString(border.getBottomColor());
      retval+=""String_Node_Str"" + PersistHelper.createColorString(border.getLeftColor());
      if (border instanceof RoundedBorder) {
        retval+=""String_Node_Str"" + ((RoundedBorder)border).getRoundingRadiusString();
        retval+=""String_Node_Str"" + ((RoundedBorder)border).getBorderStylesString();
      }
 else {
        retval+=""String_Node_Str"" + border.getRoundingRadius();
        retval+=""String_Node_Str"" + SpecialMatteBorder.createDashString(border.getDashPattern());
      }
    }
 else     if (currentBorder instanceof MatteBorder) {
      MatteBorder border=(MatteBorder)currentBorder;
      Insets i=border.getBorderInsets(null);
      Color lineColor=border.getMatteColor();
      retval=MATTE_BORDER + ""String_Node_Str"" + i.top+ ""String_Node_Str""+ i.right+ ""String_Node_Str""+ i.bottom+ ""String_Node_Str""+ i.left+ ""String_Node_Str""+ PersistHelper.createColorString(lineColor);
    }
 else     if (currentBorder instanceof EmptyBorder) {
      EmptyBorder border=(EmptyBorder)currentBorder;
      Insets i=border.getBorderInsets(null);
      retval=EMPTY_BORDER + ""String_Node_Str"" + i.top+ ""String_Node_Str""+ i.right+ ""String_Node_Str""+ i.bottom+ ""String_Node_Str""+ i.left;
    }
 else {
      retval=""String_Node_Str"";
    }
  }
  return retval;
}","public static String createBorderString(Object currentBorder){
  String retval=null;
  if (currentBorder != null) {
    if (currentBorder instanceof CompoundBorder) {
      Border oborder=((CompoundBorder)currentBorder).getOutsideBorder();
      Border iborder=((CompoundBorder)currentBorder).getInsideBorder();
      retval=COMPOUND_BORDER + ""String_Node_Str"";
      retval+=""String_Node_Str"" + createBorderString(oborder);
      retval+=""String_Node_Str"" + createBorderString(iborder) + ""String_Node_Str"";
    }
 else     if (currentBorder instanceof BevelBorder) {
      BevelBorder border=(BevelBorder)currentBorder;
      int type=border.getBevelType();
      retval=BEVEL_BORDER + ""String_Node_Str"" + type;
      if (border.getHighlightInnerColor() != null || border.getHighlightOuterColor() != null || border.getShadowInnerColor() != null || border.getShadowOuterColor() != null) {
        retval+=""String_Node_Str"" + PersistHelper.createColorString(border.getHighlightOuterColor());
        retval+=""String_Node_Str"" + PersistHelper.createColorString(border.getHighlightInnerColor());
        retval+=""String_Node_Str"" + PersistHelper.createColorString(border.getShadowOuterColor());
        retval+=""String_Node_Str"" + PersistHelper.createColorString(border.getShadowInnerColor());
      }
    }
 else     if (currentBorder instanceof EtchedBorder) {
      EtchedBorder border=(EtchedBorder)currentBorder;
      int type=border.getEtchType();
      Color hi=border.getHighlightColor();
      Color sh=border.getShadowColor();
      retval=ETCHED_BORDER + ""String_Node_Str"" + type+ ""String_Node_Str""+ PersistHelper.createColorString(hi)+ ""String_Node_Str""+ PersistHelper.createColorString(sh);
    }
 else     if (currentBorder instanceof LineBorder) {
      LineBorder border=(LineBorder)currentBorder;
      int thick=border.getThickness();
      Color lineColor=border.getLineColor();
      retval=LINE_BORDER + ""String_Node_Str"" + thick+ ""String_Node_Str""+ PersistHelper.createColorString(lineColor);
    }
 else     if (currentBorder instanceof TitledBorder) {
      TitledBorder border=(TitledBorder)currentBorder;
      String s=border.getTitle();
      s=Utils.stringReplace(s,""String_Node_Str"",""String_Node_Str"");
      Font f=border.getTitleFont();
      Color c=border.getTitleColor();
      retval=TITLED_BORDER + ""String_Node_Str"" + s;
      int justification=border.getTitleJustification();
      int position=border.getTitlePosition();
      if (justification != 0 || position != 0 || f != null || c != null) {
        retval+=""String_Node_Str"" + justification + ""String_Node_Str""+ position;
        if (f != null) {
          retval+=""String_Node_Str"" + PersistHelper.createFontString(f);
          if (c != null) {
            retval+=""String_Node_Str"" + PersistHelper.createColorString(c);
          }
        }
      }
    }
 else     if (currentBorder instanceof SpecialMatteBorder) {
      SpecialMatteBorder border=(SpecialMatteBorder)currentBorder;
      retval=((border instanceof RoundedBorder) ? ROUNDED_BORDER : SPECIAL_MATTE_BORDER) + ""String_Node_Str"" + border.getTop()+ ""String_Node_Str""+ border.getRight()+ ""String_Node_Str""+ border.getBottom()+ ""String_Node_Str""+ border.getLeft();
      retval+=""String_Node_Str"" + PersistHelper.createColorString(border.getTopColor());
      retval+=""String_Node_Str"" + PersistHelper.createColorString(border.getRightColor());
      retval+=""String_Node_Str"" + PersistHelper.createColorString(border.getBottomColor());
      retval+=""String_Node_Str"" + PersistHelper.createColorString(border.getLeftColor());
      if (border instanceof RoundedBorder) {
        retval+=""String_Node_Str"" + ((RoundedBorder)border).getRoundingRadiusString();
        retval+=""String_Node_Str"" + ((RoundedBorder)border).getBorderStylesString();
      }
 else {
        retval+=""String_Node_Str"" + border.getRoundingRadius();
        retval+=""String_Node_Str"" + SpecialMatteBorder.createDashString(border.getDashPattern());
      }
    }
 else     if (currentBorder instanceof MatteBorder) {
      MatteBorder border=(MatteBorder)currentBorder;
      Insets i=ComponentFactoryHelper.getBorderInsetsForNoComponent(border);
      Color lineColor=border.getMatteColor();
      retval=MATTE_BORDER + ""String_Node_Str"" + i.top+ ""String_Node_Str""+ i.right+ ""String_Node_Str""+ i.bottom+ ""String_Node_Str""+ i.left+ ""String_Node_Str""+ PersistHelper.createColorString(lineColor);
    }
 else     if (currentBorder instanceof EmptyBorder) {
      EmptyBorder border=(EmptyBorder)currentBorder;
      Insets i=ComponentFactoryHelper.getBorderInsetsForNoComponent(border);
      retval=EMPTY_BORDER + ""String_Node_Str"" + i.top+ ""String_Node_Str""+ i.right+ ""String_Node_Str""+ i.bottom+ ""String_Node_Str""+ i.left;
    }
 else {
      retval=""String_Node_Str"";
    }
  }
  return retval;
}",0.9895746455379484
143636,"public Insets getCustomBorderInsets(){
  if (customBorderInsets != null) {
    return customBorderInsets;
  }
  return getBorderInsets(null);
}","public Insets getCustomBorderInsets(){
  if (customBorderInsets != null) {
    return customBorderInsets;
  }
  return ComponentFactoryHelper.getBorderInsetsForNoComponent(this);
}",0.8606811145510835
143637,"public Insets getCustomBorderInsets(){
  if (customBorderInsets != null) {
    return customBorderInsets;
  }
  return getBorderInsets(null);
}","public Insets getCustomBorderInsets(){
  if (customBorderInsets != null) {
    return customBorderInsets;
  }
  return ComponentFactoryHelper.getBorderInsetsForNoComponent(this);
}",0.8606811145510835
143638,"public IDataRenderer createPortalRenderer(IApplication app,Portal objToRender,Form dataProviderLookup,IScriptExecuter listner,boolean printing,ControllerUndoManager undoManager) throws Exception {
  List<IPersist> allObjectsAsList=objToRender.getAllObjectsAsList();
  List<IFormElement> formElements=new ArrayList<IFormElement>(allObjectsAsList.size());
  for (  IPersist persist : allObjectsAsList) {
    if (persist instanceof IFormElement) {
      formElements.add((IFormElement)persist);
    }
  }
  List<IFormElement> children=new SortedList<IFormElement>(new Comparator<IFormElement>(){
    public int compare(    IFormElement o1,    IFormElement o2){
      int result=-PositionComparator.XY_PERSIST_COMPARATOR.compare(o1,o2);
      if (result == 0) {
        return (o1.getFormIndex() - o2.getFormIndex());
      }
      return result;
    }
  }
,formElements);
  Iterator<IFormElement> e1=children.iterator();
  Map emptyDataRenderers=new LinkedHashMap();
  DataRenderer dr=null;
  int height=objToRender.getRowHeight();
  boolean calculateHeight=(height == 0);
  if (height == 0)   height=100;
  boolean showSelection=objToRender.getShowVerticalLines();
  dr=(DataRenderer)getEmptyDataRenderer(ComponentFactory.getWebID(dataProviderLookup,objToRender),""String_Node_Str"" + objToRender.getName(),app,showSelection);
  setBasicSettings(dr,objToRender.getBackground(),new Dimension(objToRender.getSize().width,height),new Point(0,0),printing);
  emptyDataRenderers.put(new Boolean(true),dr);
  dr.setLocation(objToRender.getLocation());
  Border b=ComponentFactoryHelper.createBorder(objToRender.getBorderType());
  Insets ins=new Insets(0,0,0,0);
  if (b != null) {
    ins=b.getBorderInsets(null);
  }
  placeElements(e1,app,dataProviderLookup,listner,emptyDataRenderers,objToRender.getSize().width,-(objToRender.getLocation().x + ins.right),-ins.top,printing,true,undoManager,true,null);
  int biggest_width=10;
  int biggest_height=calculateHeight ? 0 : height;
  Component[] comps=dr.getComponents();
  boolean hasRowBGColorCalc=objToRender.getRowBGColorCalculation() != null;
  for (  Component element : comps) {
    int w=element.getLocation().x + element.getSize().width;
    if (w > biggest_width)     biggest_width=w;
    if (hasRowBGColorCalc && element instanceof JComponent)     ((JComponent)element).setOpaque(false);
    if (calculateHeight) {
      int h=element.getLocation().y + element.getSize().height;
      if (h > biggest_height)       biggest_height=h;
    }
  }
  dr.setSize(new Dimension(biggest_width,biggest_height));
  dr.setPreferredSize(new Dimension(biggest_width,biggest_height));
  if (printing) {
    addSpringsBetweenComponents(app,dr);
  }
  return dr;
}","public IDataRenderer createPortalRenderer(IApplication app,Portal objToRender,Form dataProviderLookup,IScriptExecuter listner,boolean printing,ControllerUndoManager undoManager) throws Exception {
  List<IPersist> allObjectsAsList=objToRender.getAllObjectsAsList();
  List<IFormElement> formElements=new ArrayList<IFormElement>(allObjectsAsList.size());
  for (  IPersist persist : allObjectsAsList) {
    if (persist instanceof IFormElement) {
      formElements.add((IFormElement)persist);
    }
  }
  List<IFormElement> children=new SortedList<IFormElement>(new Comparator<IFormElement>(){
    public int compare(    IFormElement o1,    IFormElement o2){
      int result=-PositionComparator.XY_PERSIST_COMPARATOR.compare(o1,o2);
      if (result == 0) {
        return (o1.getFormIndex() - o2.getFormIndex());
      }
      return result;
    }
  }
,formElements);
  Iterator<IFormElement> e1=children.iterator();
  Map emptyDataRenderers=new LinkedHashMap();
  DataRenderer dr=null;
  int height=objToRender.getRowHeight();
  boolean calculateHeight=(height == 0);
  if (height == 0)   height=100;
  boolean showSelection=objToRender.getShowVerticalLines();
  dr=(DataRenderer)getEmptyDataRenderer(ComponentFactory.getWebID(dataProviderLookup,objToRender),""String_Node_Str"" + objToRender.getName(),app,showSelection);
  setBasicSettings(dr,objToRender.getBackground(),new Dimension(objToRender.getSize().width,height),new Point(0,0),printing);
  emptyDataRenderers.put(new Boolean(true),dr);
  dr.setLocation(objToRender.getLocation());
  Border b=ComponentFactoryHelper.createBorder(objToRender.getBorderType());
  Insets ins=new Insets(0,0,0,0);
  if (b != null) {
    ins=ComponentFactoryHelper.getBorderInsetsForNoComponent(b);
  }
  placeElements(e1,app,dataProviderLookup,listner,emptyDataRenderers,objToRender.getSize().width,-(objToRender.getLocation().x + ins.right),-ins.top,printing,true,undoManager,true,null);
  int biggest_width=10;
  int biggest_height=calculateHeight ? 0 : height;
  Component[] comps=dr.getComponents();
  boolean hasRowBGColorCalc=objToRender.getRowBGColorCalculation() != null;
  for (  Component element : comps) {
    int w=element.getLocation().x + element.getSize().width;
    if (w > biggest_width)     biggest_width=w;
    if (hasRowBGColorCalc && element instanceof JComponent)     ((JComponent)element).setOpaque(false);
    if (calculateHeight) {
      int h=element.getLocation().y + element.getSize().height;
      if (h > biggest_height)       biggest_height=h;
    }
  }
  dr.setSize(new Dimension(biggest_width,biggest_height));
  dr.setPreferredSize(new Dimension(biggest_width,biggest_height));
  if (printing) {
    addSpringsBetweenComponents(app,dr);
  }
  return dr;
}",0.9918908956874308
143639,"public CopyZipEntryImporter(File expFile,File installDir,String extensionID){
  this.expFile=expFile;
  this.installDir=installDir;
  screenshotsFolder=new File(installDir,""String_Node_Str"");
  developerFolder=new File(installDir,""String_Node_Str"");
  docsFolder=new File(installDir,""String_Node_Str"" + extensionID);
}","public CopyZipEntryImporter(File expFile,File installDir,String extensionID,String version){
  this.expFile=expFile;
  this.installDir=installDir;
  this.version=version;
  this.extensionID=extensionID;
  screenshotsFolder=new File(installDir,""String_Node_Str"");
  developerFolder=new File(installDir,""String_Node_Str"");
  docsFolder=new File(installDir,""String_Node_Str"" + extensionID);
}",0.8995756718528995
143640,"protected void handleExpFile(){
  File expCopy=new File(installDir + File.separator + EXPFILES_FOLDER,expFile.getName());
  InputStream stream=null;
  try {
    stream=new BufferedInputStream(new FileInputStream(expFile));
    copyFile(expCopy,stream,true);
  }
 catch (  IOException ex) {
    String tmp=""String_Node_Str"" + expFile;
    messages.addError(tmp);
    Debug.error(tmp,ex);
  }
 finally {
    Utils.closeInputStream(stream);
  }
}","protected void handleExpFile(){
  String generatedName=extensionID + ""String_Node_Str"" + version+ ""String_Node_Str"";
  File expCopy=new File(installDir + File.separator + EXPFILES_FOLDER,generatedName);
  InputStream stream=null;
  try {
    stream=new BufferedInputStream(new FileInputStream(expFile));
    copyFile(expCopy,stream,false);
  }
 catch (  IOException ex) {
    String tmp=""String_Node_Str"" + expFile;
    messages.addError(tmp);
    Debug.error(tmp,ex);
  }
 finally {
    Utils.closeInputStream(stream);
  }
}",0.8822314049586777
143641,"public UninstallZipEntries(File expFile,File installDir,String extensionID){
  super(expFile,installDir,extensionID);
}","public UninstallZipEntries(File expFile,File installDir,String extensionID,String version){
  super(expFile,installDir,extensionID,version);
}",0.9118773946360154
143642,"private static int compareBlocks(String compareBlock1,String compareBlock2){
  Integer i1=null, i2=null;
  try {
    i1=Integer.valueOf(Integer.parseInt(compareBlock1));
  }
 catch (  NumberFormatException e) {
  }
  try {
    i2=Integer.valueOf(Integer.parseInt(compareBlock2));
  }
 catch (  NumberFormatException e) {
  }
  if (i1 == null && i2 != null) {
    return INTERMEDIATE.equalsIgnoreCase(compareBlock1) ? 1 : -1;
  }
 else   if (i1 != null && i2 == null) {
    return INTERMEDIATE.equals(compareBlock2) ? -1 : 1;
  }
 else   if (i1 == null) {
    if (INTERMEDIATE.equalsIgnoreCase(compareBlock1) && !INTERMEDIATE.equalsIgnoreCase(compareBlock2))     return 1;
    if (!INTERMEDIATE.equalsIgnoreCase(compareBlock1) && INTERMEDIATE.equalsIgnoreCase(compareBlock2))     return -1;
    return compareBlock1.compareToIgnoreCase(compareBlock2);
  }
 else {
    return i1.intValue() - i2.intValue();
  }
}","private static int compareBlocks(String compareBlock1,String compareBlock2){
  Integer i1=getInteger(compareBlock1);
  Integer i2=getInteger(compareBlock2);
  if (i1 == null && i2 != null) {
    return INTERMEDIATE.equalsIgnoreCase(compareBlock1) ? 1 : -1;
  }
 else   if (i1 != null && i2 == null) {
    return INTERMEDIATE.equals(compareBlock2) ? -1 : 1;
  }
 else   if (i1 == null) {
    if (INTERMEDIATE.equalsIgnoreCase(compareBlock1) && !INTERMEDIATE.equalsIgnoreCase(compareBlock2))     return 1;
    if (!INTERMEDIATE.equalsIgnoreCase(compareBlock1) && INTERMEDIATE.equalsIgnoreCase(compareBlock2))     return -1;
    return compareBlock1.compareToIgnoreCase(compareBlock2);
  }
 else {
    return i1.intValue() - i2.intValue();
  }
}",0.8256658595641646
143643,"/** 
 * Compares two version strings.<br><br> NOTE: Version strings MUST already be valid as checked by   {@link #checkVersionPattern(String)}. If an exclusive version is given it is treated as an non-exclusive one when comparing.
 * @return < 0 if ver1 < ver2, == 0 if the two versions are the same, > 0 if ver1 > ver2.
 */
public static int compareVersions(String ver1,String ver2){
  Matcher ver1Matcher=NUMBER_PATTERN.matcher(ver1);
  Matcher ver2Matcher=NUMBER_PATTERN.matcher(ver2);
  String compareBlock1;
  String compareBlock2;
  int result=0;
  do {
    compareBlock1=getNextBlock(ver1Matcher);
    compareBlock2=getNextBlock(ver2Matcher);
    result=compareBlocks(compareBlock1 == null ? ""String_Node_Str"" : compareBlock1,compareBlock2 == null ? ""String_Node_Str"" : compareBlock2);
  }
 while (result == 0 && (compareBlock1 != null || compareBlock2 != null));
  return result;
}","/** 
 * Compares two version strings.<br><br> NOTE: Version strings MUST already be valid as checked by   {@link #checkVersionPattern(String)}. If an exclusive version is given it is treated as an non-exclusive one when comparing.
 * @return < 0 if ver1 < ver2, == 0 if the two versions are the same, > 0 if ver1 > ver2.
 */
public static int compareVersions(String ver1,String ver2){
  Matcher ver1Matcher=NUMBER_PATTERN.matcher(ver1);
  Matcher ver2Matcher=NUMBER_PATTERN.matcher(ver2);
  String compareBlock1;
  String compareBlock2;
  int result=0;
  do {
    compareBlock1=getNextBlock(ver1Matcher);
    compareBlock2=getNextBlock(ver2Matcher);
    if (getInteger(compareBlock1) == null) {
      Integer i=getInteger(compareBlock2);
      while (i != null && i.intValue() == 0) {
        compareBlock2=getNextBlock(ver2Matcher);
        i=getInteger(compareBlock2);
      }
    }
 else     if (getInteger(compareBlock2) == null) {
      Integer i=getInteger(compareBlock1);
      while (i != null && i.intValue() == 0) {
        compareBlock1=getNextBlock(ver1Matcher);
        i=getInteger(compareBlock1);
      }
    }
    result=compareBlocks(compareBlock1 == null ? ""String_Node_Str"" : compareBlock1,compareBlock2 == null ? ""String_Node_Str"" : compareBlock2);
  }
 while (result == 0 && (compareBlock1 != null || compareBlock2 != null));
  return result;
}",0.7888198757763976
143644,"public WebCellBasedView(final String id,final IApplication application,RuntimePortal scriptable,final Form form,final AbstractBase cellview,final IDataProviderLookup dataProviderLookup,final IScriptExecuter el,boolean addHeaders,final int startY,final int endY,final int sizeHint,int viewType){
  super(id);
  this.application=application;
  this.cellview=cellview;
  this.fc=el.getFormController();
  this.addHeaders=addHeaders;
  this.startY=startY;
  this.endY=endY;
  this.formDesignHeight=form.getSize().height;
  this.sizeHint=sizeHint;
  this.viewType=viewType;
  this.bodyWidthHint=form.getWidth();
  useAJAX=Utils.getAsBoolean(application.getRuntimeProperties().get(""String_Node_Str""));
  useAnchors=Utils.getAsBoolean(application.getRuntimeProperties().get(""String_Node_Str""));
  setOutputMarkupPlaceholderTag(true);
  dataRendererOnRenderWrapper=new DataRendererOnRenderWrapper(this);
  loadingInfo=new Label(""String_Node_Str"",""String_Node_Str"");
  loadingInfo.setVisible(false);
  add(loadingInfo);
  if (!useAJAX)   bodyHeightHint=sizeHint;
  String orientation=OrientationApplier.getHTMLContainerOrientation(application.getLocale(),application.getSolution().getTextOrientation());
  isLeftToRightOrientation=!OrientationApplier.RTL.equalsIgnoreCase(orientation);
  int tFormHeight=0;
  Iterator<Part> partIte=form.getParts();
  while (partIte.hasNext()) {
    Part p=partIte.next();
    if (p.getPartType() == Part.BODY) {
      tFormHeight=p.getHeight() - startY;
      break;
    }
  }
  formBodySize=new Dimension(form.getWidth(),tFormHeight);
  ChangesRecorder jsChangeRecorder=new ChangesRecorder(null,null){
    @Override public boolean isChanged(){
      boolean retval=false;
      if (super.isChanged()) {
        retval=true;
        return retval;
      }
      if (!retval) {
        Iterator<Component> iterator=elementToColumnIdentifierComponent.values().iterator();
        while (iterator.hasNext()) {
          Component object=iterator.next();
          if (object instanceof IProviderStylePropertyChanges) {
            if (((IProviderStylePropertyChanges)object).getStylePropertyChanges().isChanged()) {
              retval=true;
              break;
            }
          }
        }
      }
      if (retval) {
        MainPage page=(MainPage)getPage();
        page.getPageContributor().addTableToRender(WebCellBasedView.this);
        setRendered();
      }
      return false;
    }
    @Override public void setRendered(){
      super.setRendered();
      Iterator<Component> iterator=elementToColumnIdentifierComponent.values().iterator();
      while (iterator.hasNext()) {
        Component comp=iterator.next();
        if (comp instanceof IProviderStylePropertyChanges) {
          ((IProviderStylePropertyChanges)comp).getStylePropertyChanges().setRendered();
        }
      }
    }
  }
;
  this.scriptable=scriptable;
  ((ChangesRecorder)scriptable.getChangesRecorder()).setAdditionalChangesRecorder(jsChangeRecorder);
  add(TooltipAttributeModifier.INSTANCE);
  add(new StyleAppendingModifier(new Model<String>(){
    private static final long serialVersionUID=1L;
    @Override public String getObject(){
      if (isScrollMode())       return ""String_Node_Str"";
      if (findParent(IWebFormContainer.class) != null) {
        return ""String_Node_Str"";
      }
      return ""String_Node_Str"";
    }
  }
));
  if (cellview instanceof BaseComponent) {
    ComponentFactory.applyBasicComponentProperties(application,this,(BaseComponent)cellview,ComponentFactory.getStyleForBasicComponent(application,cellview,form));
  }
  boolean sortable=true;
  String initialSortString=null;
  int onRenderMethodID=0;
  AbstractBase onRenderPersist=null;
  if (cellview instanceof Portal) {
    Portal p=(Portal)cellview;
    setRowBGColorScript(p.getRowBGColorCalculation(),p.getInstanceMethodArguments(""String_Node_Str""));
    sortable=p.getSortable();
    initialSortString=p.getInitialSort();
    onRenderMethodID=p.getOnRenderMethodID();
    onRenderPersist=p;
    int portalAnchors=p.getAnchors();
    isAnchored=(((portalAnchors & IAnchorConstants.NORTH) > 0) && ((portalAnchors & IAnchorConstants.SOUTH) > 0)) || (((portalAnchors & IAnchorConstants.EAST) > 0) && ((portalAnchors & IAnchorConstants.WEST) > 0));
  }
 else   if (cellview instanceof Form) {
    initialSortString=form.getInitialSort();
    onRenderMethodID=form.getOnRenderMethodID();
    onRenderPersist=form;
    isAnchored=true;
  }
  if (onRenderMethodID > 0) {
    dataRendererOnRenderWrapper.getRenderEventExecutor().setRenderCallback(Integer.toString(onRenderMethodID),Utils.parseJSExpressions(onRenderPersist.getInstanceMethodArguments(""String_Node_Str"")));
    dataRendererOnRenderWrapper.getRenderEventExecutor().setRenderScriptExecuter(fc != null ? fc.getScriptExecuter() : null);
  }
  initDragNDrop(fc,startY);
  if (sortable) {
    if (initialSortString != null) {
      StringTokenizer tokByComma=new StringTokenizer(initialSortString,""String_Node_Str"");
      while (tokByComma.hasMoreTokens()) {
        String initialSortFirstToken=tokByComma.nextToken();
        StringTokenizer tokBySpace=new StringTokenizer(initialSortFirstToken);
        if (tokBySpace.hasMoreTokens()) {
          String initialSortColumnName=tokBySpace.nextToken();
          if (tokBySpace.hasMoreTokens()) {
            String sortDir=tokBySpace.nextToken();
            boolean initialSortAsc=true;
            if (sortDir.equalsIgnoreCase(""String_Node_Str""))             initialSortAsc=false;
            initialSortColumnNames.put(initialSortColumnName,new Boolean(initialSortAsc));
          }
        }
      }
    }
    if (initialSortColumnNames.size() == 0) {
      try {
        String dataSource=null;
        if (cellview instanceof Portal) {
          Portal p=(Portal)cellview;
          String relation=p.getRelationName();
          int lastDot=relation.lastIndexOf(""String_Node_Str"");
          if (lastDot >= 0) {
            relation=relation.substring(lastDot + 1);
          }
          Relation rel=application.getFlattenedSolution().getRelation(relation);
          if (rel != null) {
            dataSource=rel.getForeignDataSource();
          }
        }
 else {
          dataSource=form.getDataSource();
        }
        if (dataSource != null) {
          Iterator<String> pkColumnNames=application.getFoundSetManager().getTable(dataSource).getRowIdentColumnNames();
          while (pkColumnNames.hasNext()) {
            initialSortColumnNames.put(pkColumnNames.next(),Boolean.TRUE);
          }
        }
      }
 catch (      RepositoryException e) {
        Debug.log(""String_Node_Str"",e);
      }
    }
  }
  maxHeight=0;
  try {
    Iterator<IPersist> components=cellview.getAllObjects(PositionComparator.XY_PERSIST_COMPARATOR);
    while (components.hasNext()) {
      IPersist element=components.next();
      if (element instanceof Field || element instanceof GraphicalComponent) {
        if (element instanceof GraphicalComponent && ((GraphicalComponent)element).getLabelFor() != null) {
          labelsFor.put(((GraphicalComponent)element).getLabelFor(),element);
          continue;
        }
        Point l=((IFormElement)element).getLocation();
        if (l == null) {
          continue;
        }
        if (l.y >= startY && l.y < endY) {
          int height=((IFormElement)element).getSize().height;
          if (height > maxHeight)           maxHeight=height;
        }
      }
    }
    if (maxHeight == 0)     maxHeight=20;
  }
 catch (  Exception ex1) {
    Debug.error(""String_Node_Str"",ex1);
  }
  tableContainerBody=new WebMarkupContainer(""String_Node_Str"");
  tableContainerBody.setOutputMarkupId(true);
  table=new WebCellBasedViewListView(""String_Node_Str"",data,1,cellview,dataProviderLookup,el,startY,endY,form);
  table.setReuseItems(true);
  tableContainerBody.add(table);
  add(tableContainerBody);
  final LinkedHashMap<String,IDataAdapter> dataadapters=new LinkedHashMap<String,IDataAdapter>();
  final SortedList<IPersist> columnTabSequence=new SortedList<IPersist>(TabSeqComparator.INSTANCE);
  createComponents(application,form,cellview,dataProviderLookup,el,startY,endY,new ItemAdd(){
    public void add(    IPersist element,    Component comp){
      if (element instanceof IFormElement && comp instanceof IComponent) {
        ((IComponent)comp).setLocation(((IFormElement)element).getLocation());
        ((IComponent)comp).setSize(((IFormElement)element).getSize());
      }
      elementToColumnIdentifierComponent.put(element,comp);
      if (cellview instanceof Form && element instanceof ISupportTabSeq && ((ISupportTabSeq)element).getTabSeq() >= 0) {
        columnTabSequence.add(element);
      }
      if (comp instanceof IDisplayData) {
        String dataprovider=((IDisplayData)comp).getDataProviderID();
        WebCellAdapter previous=(WebCellAdapter)dataadapters.get(dataprovider);
        if (previous == null) {
          WebCellAdapter wca=new WebCellAdapter(dataprovider,WebCellBasedView.this);
          dataadapters.put(dataprovider,wca);
        }
        if (dataprovider != null) {
          if (initialSortColumnNames.containsKey(dataprovider))           initialSortedColumns.put(comp.getId(),initialSortColumnNames.get(dataprovider));
        }
      }
    }
  }
);
  for (int i=columnTabSequence.size() - 1; i >= 0; i--) {
    elementTabIndexes.put(columnTabSequence.get(i),Integer.valueOf(i));
  }
  if (addHeaders) {
    headers=new SortableCellViewHeaders(form,this,""String_Node_Str"",table,cellview,application,initialSortedColumns,new IHeaders(){
      public void registerHeader(      IPersist matchingElement,      Component headerComponent){
        SortableCellViewHeader sortableHeader=(SortableCellViewHeader)headerComponent;
        Component columnIdentifier=WebCellBasedView.this.elementToColumnIdentifierComponent.get(matchingElement);
        if (columnIdentifier instanceof IProviderStylePropertyChanges) {
          String width=(String)((IProviderStylePropertyChanges)columnIdentifier).getStylePropertyChanges().getChanges().get(""String_Node_Str"");
          if (width != null) {
            sortableHeader.setWidth(Integer.parseInt(width.substring(0,width.length() - 2)));
          }
 else           if (matchingElement instanceof BaseComponent)           sortableHeader.setWidth(((BaseComponent)matchingElement).getSize().width);
        }
        sortableHeader.setTabSequenceIndex(tabIndex);
        sortableHeader.setScriptExecuter(el);
        sortableHeader.setResizeClass(columnIdentifier.getId());
        WebCellBasedView.this.registerHeader(matchingElement,headerComponent);
      }
    }
);
    add(headers);
  }
  if (useAJAX) {
    add(pagingNavigator=new ServoyAjaxPagingNavigator(""String_Node_Str"",table));
    add(tableResizeBehavior=new ServoyTableResizeBehavior(startY,endY,cellview));
  }
 else {
    add(pagingNavigator=new ServoySubmitPagingNavigator(""String_Node_Str"",table));
  }
  final int scrollbars=(cellview instanceof ISupportScrollbars) ? ((ISupportScrollbars)cellview).getScrollbars() : 0;
  showPageNavigator=!((scrollbars & ISupportScrollbars.VERTICAL_SCROLLBAR_NEVER) == ISupportScrollbars.VERTICAL_SCROLLBAR_NEVER);
  try {
    if (cellview instanceof Portal) {
      relationName=((Portal)cellview).getRelationName();
      Relation[] rels=application.getFlattenedSolution().getRelationSequence(((Portal)cellview).getRelationName());
      if (rels != null) {
        Relation r=rels[rels.length - 1];
        if (r != null) {
          defaultSort=((FoundSetManager)application.getFoundSetManager()).getSortColumns(application.getFoundSetManager().getTable(r.getForeignDataSource()),((Portal)cellview).getInitialSort());
        }
      }
    }
 else {
      defaultSort=((FoundSetManager)application.getFoundSetManager()).getSortColumns(((Form)cellview).getDataSource(),((Form)cellview).getInitialSort());
    }
  }
 catch (  RepositoryException e) {
    Debug.error(e);
    defaultSort=new ArrayList<SortColumn>(1);
  }
  try {
    dal=new DataAdapterList(application,dataProviderLookup,elementToColumnIdentifierComponent,el.getFormController(),dataadapters,null);
  }
 catch (  RepositoryException ex) {
    Debug.error(ex);
  }
  Object defaultScrollable=application.getClientProperty(IApplication.TABLEVIEW_WC_DEFAULT_SCROLLABLE);
  setScrollMode(Boolean.TRUE.equals(defaultScrollable));
  table.setPageabeMode(!isScrollMode());
  if (isScrollMode()) {
    tableContainerBody.add(new StyleAppendingModifier(new Model<String>(){
      private static final long serialVersionUID=1L;
      @Override public String getObject(){
        String overflow=""String_Node_Str"";
        if ((scrollbars & ISupportScrollbars.HORIZONTAL_SCROLLBAR_NEVER) == ISupportScrollbars.HORIZONTAL_SCROLLBAR_NEVER) {
          overflow+=""String_Node_Str"";
        }
 else         if ((scrollbars & ISupportScrollbars.HORIZONTAL_SCROLLBAR_ALWAYS) == ISupportScrollbars.HORIZONTAL_SCROLLBAR_ALWAYS) {
          overflow+=""String_Node_Str"";
        }
 else {
          overflow+=""String_Node_Str"";
        }
        if ((scrollbars & ISupportScrollbars.VERTICAL_SCROLLBAR_NEVER) == ISupportScrollbars.VERTICAL_SCROLLBAR_NEVER) {
          overflow+=""String_Node_Str"";
        }
 else         if ((scrollbars & ISupportScrollbars.VERTICAL_SCROLLBAR_ALWAYS) == ISupportScrollbars.VERTICAL_SCROLLBAR_ALWAYS) {
          overflow+=""String_Node_Str"";
        }
 else {
          overflow+=""String_Node_Str"";
        }
        return overflow + ""String_Node_Str"";
      }
    }
));
    tableContainerBody.add(scrollBehavior=new ScrollBehavior(""String_Node_Str""));
  }
  add(new StyleAppendingModifier(new Model<String>(){
    private static final long serialVersionUID=1L;
    @Override public String getObject(){
      WebForm container=findParent(WebForm.class);
      if (container != null && container.getBorder() instanceof TitledBorder) {
        int offset=((TitledBorder)container.getBorder()).getTitleFont().getSize() + 4;
        return ""String_Node_Str"" + offset + ""String_Node_Str"";
      }
      return ""String_Node_Str"";
    }
  }
){
    @Override public boolean isEnabled(    Component component){
      WebForm container=component.findParent(WebForm.class);
      if (container != null && container.getBorder() instanceof TitledBorder) {
        return super.isEnabled(component);
      }
      return false;
    }
  }
);
}","public WebCellBasedView(final String id,final IApplication application,RuntimePortal scriptable,final Form form,final AbstractBase cellview,final IDataProviderLookup dataProviderLookup,final IScriptExecuter el,boolean addHeaders,final int startY,final int endY,final int sizeHint,int viewType){
  super(id);
  this.application=application;
  this.cellview=cellview;
  this.fc=el.getFormController();
  this.addHeaders=addHeaders;
  this.startY=startY;
  this.endY=endY;
  this.formDesignHeight=form.getSize().height;
  this.sizeHint=sizeHint;
  this.viewType=viewType;
  this.bodyWidthHint=form.getWidth();
  useAJAX=Utils.getAsBoolean(application.getRuntimeProperties().get(""String_Node_Str""));
  useAnchors=Utils.getAsBoolean(application.getRuntimeProperties().get(""String_Node_Str""));
  setOutputMarkupPlaceholderTag(true);
  dataRendererOnRenderWrapper=new DataRendererOnRenderWrapper(this);
  loadingInfo=new Label(""String_Node_Str"",""String_Node_Str"");
  loadingInfo.setVisible(false);
  add(loadingInfo);
  if (!useAJAX)   bodyHeightHint=sizeHint;
  String orientation=OrientationApplier.getHTMLContainerOrientation(application.getLocale(),application.getSolution().getTextOrientation());
  isLeftToRightOrientation=!OrientationApplier.RTL.equalsIgnoreCase(orientation);
  int tFormHeight=0;
  Iterator<Part> partIte=form.getParts();
  while (partIte.hasNext()) {
    Part p=partIte.next();
    if (p.getPartType() == Part.BODY) {
      tFormHeight=p.getHeight() - startY;
      break;
    }
  }
  formBodySize=new Dimension(form.getWidth(),tFormHeight);
  ChangesRecorder jsChangeRecorder=new ChangesRecorder(null,null){
    @Override public boolean isChanged(){
      boolean retval=false;
      if (super.isChanged()) {
        retval=true;
        return retval;
      }
      if (!retval) {
        Iterator<Component> iterator=elementToColumnIdentifierComponent.values().iterator();
        while (iterator.hasNext()) {
          Component object=iterator.next();
          if (object instanceof IProviderStylePropertyChanges) {
            if (((IProviderStylePropertyChanges)object).getStylePropertyChanges().isChanged()) {
              retval=true;
              break;
            }
          }
        }
      }
      if (retval) {
        MainPage page=(MainPage)getPage();
        page.getPageContributor().addTableToRender(WebCellBasedView.this);
        setRendered();
      }
      return false;
    }
    @Override public void setRendered(){
      super.setRendered();
      Iterator<Component> iterator=elementToColumnIdentifierComponent.values().iterator();
      while (iterator.hasNext()) {
        Component comp=iterator.next();
        if (comp instanceof IProviderStylePropertyChanges) {
          ((IProviderStylePropertyChanges)comp).getStylePropertyChanges().setRendered();
        }
      }
    }
  }
;
  this.scriptable=scriptable;
  ((ChangesRecorder)scriptable.getChangesRecorder()).setAdditionalChangesRecorder(jsChangeRecorder);
  add(TooltipAttributeModifier.INSTANCE);
  final int scrollbars=(cellview instanceof ISupportScrollbars) ? ((ISupportScrollbars)cellview).getScrollbars() : 0;
  add(new StyleAppendingModifier(new Model<String>(){
    private static final long serialVersionUID=1L;
    @Override public String getObject(){
      if (isScrollMode())       return ""String_Node_Str"";
      if (cellview instanceof Portal) {
        return scrollBarDefinitioToOverflowAttribute(scrollbars);
      }
      if (findParent(IWebFormContainer.class) != null) {
        return ""String_Node_Str"";
      }
      return ""String_Node_Str"";
    }
  }
));
  if (cellview instanceof BaseComponent) {
    ComponentFactory.applyBasicComponentProperties(application,this,(BaseComponent)cellview,ComponentFactory.getStyleForBasicComponent(application,cellview,form));
  }
  boolean sortable=true;
  String initialSortString=null;
  int onRenderMethodID=0;
  AbstractBase onRenderPersist=null;
  if (cellview instanceof Portal) {
    Portal p=(Portal)cellview;
    setRowBGColorScript(p.getRowBGColorCalculation(),p.getInstanceMethodArguments(""String_Node_Str""));
    sortable=p.getSortable();
    initialSortString=p.getInitialSort();
    onRenderMethodID=p.getOnRenderMethodID();
    onRenderPersist=p;
    int portalAnchors=p.getAnchors();
    isAnchored=(((portalAnchors & IAnchorConstants.NORTH) > 0) && ((portalAnchors & IAnchorConstants.SOUTH) > 0)) || (((portalAnchors & IAnchorConstants.EAST) > 0) && ((portalAnchors & IAnchorConstants.WEST) > 0));
  }
 else   if (cellview instanceof Form) {
    initialSortString=form.getInitialSort();
    onRenderMethodID=form.getOnRenderMethodID();
    onRenderPersist=form;
    isAnchored=true;
  }
  if (onRenderMethodID > 0) {
    dataRendererOnRenderWrapper.getRenderEventExecutor().setRenderCallback(Integer.toString(onRenderMethodID),Utils.parseJSExpressions(onRenderPersist.getInstanceMethodArguments(""String_Node_Str"")));
    dataRendererOnRenderWrapper.getRenderEventExecutor().setRenderScriptExecuter(fc != null ? fc.getScriptExecuter() : null);
  }
  initDragNDrop(fc,startY);
  if (sortable) {
    if (initialSortString != null) {
      StringTokenizer tokByComma=new StringTokenizer(initialSortString,""String_Node_Str"");
      while (tokByComma.hasMoreTokens()) {
        String initialSortFirstToken=tokByComma.nextToken();
        StringTokenizer tokBySpace=new StringTokenizer(initialSortFirstToken);
        if (tokBySpace.hasMoreTokens()) {
          String initialSortColumnName=tokBySpace.nextToken();
          if (tokBySpace.hasMoreTokens()) {
            String sortDir=tokBySpace.nextToken();
            boolean initialSortAsc=true;
            if (sortDir.equalsIgnoreCase(""String_Node_Str""))             initialSortAsc=false;
            initialSortColumnNames.put(initialSortColumnName,new Boolean(initialSortAsc));
          }
        }
      }
    }
    if (initialSortColumnNames.size() == 0) {
      try {
        String dataSource=null;
        if (cellview instanceof Portal) {
          Portal p=(Portal)cellview;
          String relation=p.getRelationName();
          int lastDot=relation.lastIndexOf(""String_Node_Str"");
          if (lastDot >= 0) {
            relation=relation.substring(lastDot + 1);
          }
          Relation rel=application.getFlattenedSolution().getRelation(relation);
          if (rel != null) {
            dataSource=rel.getForeignDataSource();
          }
        }
 else {
          dataSource=form.getDataSource();
        }
        if (dataSource != null) {
          Iterator<String> pkColumnNames=application.getFoundSetManager().getTable(dataSource).getRowIdentColumnNames();
          while (pkColumnNames.hasNext()) {
            initialSortColumnNames.put(pkColumnNames.next(),Boolean.TRUE);
          }
        }
      }
 catch (      RepositoryException e) {
        Debug.log(""String_Node_Str"",e);
      }
    }
  }
  maxHeight=0;
  try {
    Iterator<IPersist> components=cellview.getAllObjects(PositionComparator.XY_PERSIST_COMPARATOR);
    while (components.hasNext()) {
      IPersist element=components.next();
      if (element instanceof Field || element instanceof GraphicalComponent) {
        if (element instanceof GraphicalComponent && ((GraphicalComponent)element).getLabelFor() != null) {
          labelsFor.put(((GraphicalComponent)element).getLabelFor(),element);
          continue;
        }
        Point l=((IFormElement)element).getLocation();
        if (l == null) {
          continue;
        }
        if (l.y >= startY && l.y < endY) {
          int height=((IFormElement)element).getSize().height;
          if (height > maxHeight)           maxHeight=height;
        }
      }
    }
    if (maxHeight == 0)     maxHeight=20;
  }
 catch (  Exception ex1) {
    Debug.error(""String_Node_Str"",ex1);
  }
  tableContainerBody=new WebMarkupContainer(""String_Node_Str"");
  tableContainerBody.setOutputMarkupId(true);
  table=new WebCellBasedViewListView(""String_Node_Str"",data,1,cellview,dataProviderLookup,el,startY,endY,form);
  table.setReuseItems(true);
  tableContainerBody.add(table);
  add(tableContainerBody);
  final LinkedHashMap<String,IDataAdapter> dataadapters=new LinkedHashMap<String,IDataAdapter>();
  final SortedList<IPersist> columnTabSequence=new SortedList<IPersist>(TabSeqComparator.INSTANCE);
  createComponents(application,form,cellview,dataProviderLookup,el,startY,endY,new ItemAdd(){
    public void add(    IPersist element,    Component comp){
      if (element instanceof IFormElement && comp instanceof IComponent) {
        ((IComponent)comp).setLocation(((IFormElement)element).getLocation());
        ((IComponent)comp).setSize(((IFormElement)element).getSize());
      }
      elementToColumnIdentifierComponent.put(element,comp);
      if (cellview instanceof Form && element instanceof ISupportTabSeq && ((ISupportTabSeq)element).getTabSeq() >= 0) {
        columnTabSequence.add(element);
      }
      if (comp instanceof IDisplayData) {
        String dataprovider=((IDisplayData)comp).getDataProviderID();
        WebCellAdapter previous=(WebCellAdapter)dataadapters.get(dataprovider);
        if (previous == null) {
          WebCellAdapter wca=new WebCellAdapter(dataprovider,WebCellBasedView.this);
          dataadapters.put(dataprovider,wca);
        }
        if (dataprovider != null) {
          if (initialSortColumnNames.containsKey(dataprovider))           initialSortedColumns.put(comp.getId(),initialSortColumnNames.get(dataprovider));
        }
      }
    }
  }
);
  for (int i=columnTabSequence.size() - 1; i >= 0; i--) {
    elementTabIndexes.put(columnTabSequence.get(i),Integer.valueOf(i));
  }
  if (addHeaders) {
    headers=new SortableCellViewHeaders(form,this,""String_Node_Str"",table,cellview,application,initialSortedColumns,new IHeaders(){
      public void registerHeader(      IPersist matchingElement,      Component headerComponent){
        SortableCellViewHeader sortableHeader=(SortableCellViewHeader)headerComponent;
        Component columnIdentifier=WebCellBasedView.this.elementToColumnIdentifierComponent.get(matchingElement);
        if (columnIdentifier instanceof IProviderStylePropertyChanges) {
          String width=(String)((IProviderStylePropertyChanges)columnIdentifier).getStylePropertyChanges().getChanges().get(""String_Node_Str"");
          if (width != null) {
            sortableHeader.setWidth(Integer.parseInt(width.substring(0,width.length() - 2)));
          }
 else           if (matchingElement instanceof BaseComponent)           sortableHeader.setWidth(((BaseComponent)matchingElement).getSize().width);
        }
        sortableHeader.setTabSequenceIndex(tabIndex);
        sortableHeader.setScriptExecuter(el);
        sortableHeader.setResizeClass(columnIdentifier.getId());
        WebCellBasedView.this.registerHeader(matchingElement,headerComponent);
      }
    }
);
    add(headers);
  }
  if (useAJAX) {
    add(pagingNavigator=new ServoyAjaxPagingNavigator(""String_Node_Str"",table));
    add(tableResizeBehavior=new ServoyTableResizeBehavior(startY,endY,cellview));
  }
 else {
    add(pagingNavigator=new ServoySubmitPagingNavigator(""String_Node_Str"",table));
  }
  showPageNavigator=!((scrollbars & ISupportScrollbars.VERTICAL_SCROLLBAR_NEVER) == ISupportScrollbars.VERTICAL_SCROLLBAR_NEVER);
  try {
    if (cellview instanceof Portal) {
      relationName=((Portal)cellview).getRelationName();
      Relation[] rels=application.getFlattenedSolution().getRelationSequence(((Portal)cellview).getRelationName());
      if (rels != null) {
        Relation r=rels[rels.length - 1];
        if (r != null) {
          defaultSort=((FoundSetManager)application.getFoundSetManager()).getSortColumns(application.getFoundSetManager().getTable(r.getForeignDataSource()),((Portal)cellview).getInitialSort());
        }
      }
    }
 else {
      defaultSort=((FoundSetManager)application.getFoundSetManager()).getSortColumns(((Form)cellview).getDataSource(),((Form)cellview).getInitialSort());
    }
  }
 catch (  RepositoryException e) {
    Debug.error(e);
    defaultSort=new ArrayList<SortColumn>(1);
  }
  try {
    dal=new DataAdapterList(application,dataProviderLookup,elementToColumnIdentifierComponent,el.getFormController(),dataadapters,null);
  }
 catch (  RepositoryException ex) {
    Debug.error(ex);
  }
  Object defaultScrollable=application.getClientProperty(IApplication.TABLEVIEW_WC_DEFAULT_SCROLLABLE);
  setScrollMode(Boolean.TRUE.equals(defaultScrollable));
  table.setPageabeMode(!isScrollMode());
  if (isScrollMode()) {
    tableContainerBody.add(new StyleAppendingModifier(new Model<String>(){
      private static final long serialVersionUID=1L;
      @Override public String getObject(){
        return scrollBarDefinitioToOverflowAttribute(scrollbars) + ""String_Node_Str"";
      }
    }
));
    tableContainerBody.add(scrollBehavior=new ScrollBehavior(""String_Node_Str""));
  }
  add(new StyleAppendingModifier(new Model<String>(){
    private static final long serialVersionUID=1L;
    @Override public String getObject(){
      WebForm container=findParent(WebForm.class);
      if (container != null && container.getBorder() instanceof TitledBorder) {
        int offset=((TitledBorder)container.getBorder()).getTitleFont().getSize() + 4;
        return ""String_Node_Str"" + offset + ""String_Node_Str"";
      }
      return ""String_Node_Str"";
    }
  }
){
    @Override public boolean isEnabled(    Component component){
      WebForm container=component.findParent(WebForm.class);
      if (container != null && container.getBorder() instanceof TitledBorder) {
        return super.isEnabled(component);
      }
      return false;
    }
  }
);
}",0.9555016758182984
143645,"@Override public void renderHead(HtmlHeaderContainer container){
  super.renderHead(container);
  IHeaderResponse headerResponse=container.getHeaderResponse();
  YUILoader.renderResize(headerResponse);
  String dim, dim_o, pos;
  if (orient == TabPanel.SPLIT_HORIZONTAL) {
    dim=""String_Node_Str"";
    dim_o=""String_Node_Str"";
    pos=""String_Node_Str"";
  }
 else {
    dim=""String_Node_Str"";
    dim_o=""String_Node_Str"";
    pos=""String_Node_Str"";
  }
  Map<String,String> leftPanelOverflow=getFormOverflowStyle(getLeftForm());
  Map<String,String> rightPanelOverflow=getFormOverflowStyle(getRightForm());
  StringBuffer resizeScript=new StringBuffer(""String_Node_Str"").append(dividerSize).append(""String_Node_Str"");
  resizeScript.append(""String_Node_Str"").append(dividerLocation).append(""String_Node_Str"");
  resizeScript.append(""String_Node_Str"");
  resizeScript.append(""String_Node_Str"").append(getMarkupId()).append(""String_Node_Str"").append(dim).append(""String_Node_Str"");
  resizeScript.append(""String_Node_Str"").append(leftFormMinSize).append(""String_Node_Str"").append(leftFormMinSize).append(""String_Node_Str"");
  resizeScript.append(""String_Node_Str"").append(dividerUpdater.getCallbackUrl()).append(""String_Node_Str"");
  resizeScript.append(""String_Node_Str"").append(splitter.getMarkupId()).append(""String_Node_Str"");
  resizeScript.append(""String_Node_Str"").append(dim.toLowerCase()).append(""String_Node_Str"");
  resizeScript.append(""String_Node_Str"").append(splitComponents[0].getMarkupId()).append(""String_Node_Str"");
  resizeScript.append(""String_Node_Str"").append(dim.toLowerCase()).append(""String_Node_Str"");
  resizeScript.append(""String_Node_Str"").append(leftPanelOverflow.get(""String_Node_Str"")).append(""String_Node_Str"");
  resizeScript.append(""String_Node_Str"").append(leftPanelOverflow.get(""String_Node_Str"")).append(""String_Node_Str"");
  resizeScript.append(""String_Node_Str"").append(splitComponents[1].getMarkupId()).append(""String_Node_Str"");
  resizeScript.append(""String_Node_Str"").append(pos).append(""String_Node_Str"");
  resizeScript.append(""String_Node_Str"").append(rightPanelOverflow.get(""String_Node_Str"")).append(""String_Node_Str"");
  resizeScript.append(""String_Node_Str"").append(rightPanelOverflow.get(""String_Node_Str"")).append(""String_Node_Str"");
  resizeScript.append(""String_Node_Str"").append(dim).append(""String_Node_Str"").append(dividerSize + leftFormMinSize).append(""String_Node_Str"").append(dim).append(""String_Node_Str"").append(dim).append(""String_Node_Str"").append(rightFormMinSize).append(""String_Node_Str"").append(continuousLayout ? ""String_Node_Str"" : ""String_Node_Str"");
  resizeScript.append(""String_Node_Str"").append(orient == TabPanel.SPLIT_HORIZONTAL ? ""String_Node_Str"" : ""String_Node_Str"").append(""String_Node_Str"");
  resizeScript.append(""String_Node_Str"").append(dim_o).append(""String_Node_Str"");
  String dividerBg=null;
  if (!isOpaque()) {
    dividerBg=IStyleSheet.COLOR_TRANSPARENT;
  }
 else   if (background != null) {
    dividerBg=Integer.toHexString(background.getRGB());
    dividerBg=""String_Node_Str"" + dividerBg.substring(2,dividerBg.length());
  }
  dim=dim.toLowerCase();
  resizeScript.append(""String_Node_Str"");
  resizeScript.append(""String_Node_Str"").append(""String_Node_Str"").append(dim).append(""String_Node_Str"").append(dividerSize).append(""String_Node_Str"").append(dividerBg != null ? ""String_Node_Str"" + dividerBg + ""String_Node_Str"" : ""String_Node_Str"").append(""String_Node_Str"");
  ArrayList<String> tableViewTabIds=new ArrayList<String>();
  for (int i=0; i < 2; i++) {
    if (webTabs[i] != null) {
      int webTabFormViewType=webTabs[i].getPanel().getWebForm().getController().getView();
      if (webTabFormViewType == FormController.TABLE_VIEW || webTabFormViewType == FormController.LOCKED_TABLE_VIEW) {
        tableViewTabIds.add(webTabs[i].getPanel().getFormName());
      }
    }
  }
  for (  String tableViewTabId : tableViewTabIds) {
    resizeScript.append(""String_Node_Str"").append(tableViewTabId).append(""String_Node_Str"").append(tableViewTabId).append(""String_Node_Str"");
    resizeScript.append(""String_Node_Str"").append(tableViewTabId).append(""String_Node_Str"").append(tableViewTabId).append(""String_Node_Str"");
  }
  if (!continuousLayout) {
    resizeScript.append(""String_Node_Str"");
    resizeScript.append(""String_Node_Str"").append(dim_o).append(""String_Node_Str"");
    resizeScript.append(""String_Node_Str"").append(dim_o).append(""String_Node_Str"");
    resizeScript.append(""String_Node_Str"");
    resizeScript.append(""String_Node_Str"");
    resizeScript.append(""String_Node_Str"").append(orient == TabPanel.SPLIT_HORIZONTAL ? ""String_Node_Str"" : ""String_Node_Str"").append(""String_Node_Str"").append(dividerSize).append(""String_Node_Str"").append(dividerBg != null ? dividerBg : ""String_Node_Str"").append(""String_Node_Str"");
    resizeScript.append(""String_Node_Str"");
  }
  resizeScript.append(""String_Node_Str"");
  resizeScript.append(""String_Node_Str"").append(dim).append(""String_Node_Str"");
  resizeScript.append(""String_Node_Str"").append(dim_o).append(""String_Node_Str"");
  resizeScript.append(""String_Node_Str"").append(dim).append(""String_Node_Str"");
  resizeScript.append(""String_Node_Str"").append(dim).append(""String_Node_Str"").append(dividerSize).append(""String_Node_Str"");
  resizeScript.append(""String_Node_Str"").append(pos).append(""String_Node_Str"");
  resizeScript.append(""String_Node_Str"");
  resizeScript.append(""String_Node_Str"");
  resizeScript.append(""String_Node_Str"").append(dim).append(""String_Node_Str"");
  resizeScript.append(""String_Node_Str"").append(dim_o).append(""String_Node_Str"");
  resizeScript.append(""String_Node_Str"").append(dividerUpdater.getCallbackUrl()).append(""String_Node_Str"").append(""String_Node_Str"").append(""String_Node_Str"").append(dividerSize).append(""String_Node_Str"");
  resizeScript.append(""String_Node_Str"");
  boolean useAnchors=Utils.getAsBoolean(application.getRuntimeProperties().get(""String_Node_Str""));
  if (useAnchors) {
    String splitId=getMarkupId();
    resizeScript.append(""String_Node_Str"");
    resizeScript.append(""String_Node_Str"").append(""String_Node_Str"");
    resizeScript.append(""String_Node_Str"").append(splitId).append(""String_Node_Str"");
    resizeScript.append(""String_Node_Str"").append(splitId).append(""String_Node_Str"").append(orient == TabPanel.SPLIT_HORIZONTAL ? ""String_Node_Str"" : ""String_Node_Str"").append(""String_Node_Str"");
    resizeScript.append(""String_Node_Str"").append(splitId).append(""String_Node_Str"");
    resizeScript.append(""String_Node_Str"").append(splitId).append(""String_Node_Str"");
    resizeScript.append(""String_Node_Str"").append(splitId).append(""String_Node_Str"");
    resizeScript.append(""String_Node_Str"").append(splitId).append(""String_Node_Str"");
    resizeScript.append(""String_Node_Str"").append(splitId).append(""String_Node_Str"").append(orient == TabPanel.SPLIT_HORIZONTAL ? ""String_Node_Str"" : ""String_Node_Str"").append(""String_Node_Str"");
    resizeScript.append(""String_Node_Str"").append(splitId).append(""String_Node_Str"").append(resizeWeight).append(""String_Node_Str"");
    resizeScript.append(""String_Node_Str"").append(splitId).append(""String_Node_Str"").append(dividerSize).append(""String_Node_Str"");
    resizeScript.append(""String_Node_Str"").append(splitId).append(""String_Node_Str"").append(leftFormMinSize).append(""String_Node_Str"");
    resizeScript.append(""String_Node_Str"").append(splitId).append(""String_Node_Str"").append(rightFormMinSize).append(""String_Node_Str"");
    resizeScript.append(""String_Node_Str"").append(splitId).append(""String_Node_Str"").append(dividerUpdater.getCallbackUrl()).append(""String_Node_Str"");
    resizeScript.append(""String_Node_Str"");
  }
  headerResponse.renderOnLoadJavascript(resizeScript.toString());
}","@Override public void renderHead(HtmlHeaderContainer container){
  super.renderHead(container);
  IHeaderResponse headerResponse=container.getHeaderResponse();
  YUILoader.renderResize(headerResponse);
  String dim, dim_o, pos;
  if (orient == TabPanel.SPLIT_HORIZONTAL) {
    dim=""String_Node_Str"";
    dim_o=""String_Node_Str"";
    pos=""String_Node_Str"";
  }
 else {
    dim=""String_Node_Str"";
    dim_o=""String_Node_Str"";
    pos=""String_Node_Str"";
  }
  StringBuffer resizeScript=new StringBuffer(""String_Node_Str"").append(dividerSize).append(""String_Node_Str"");
  resizeScript.append(""String_Node_Str"").append(dividerLocation).append(""String_Node_Str"");
  resizeScript.append(""String_Node_Str"");
  resizeScript.append(""String_Node_Str"").append(getMarkupId()).append(""String_Node_Str"").append(dim).append(""String_Node_Str"");
  resizeScript.append(""String_Node_Str"").append(leftFormMinSize).append(""String_Node_Str"").append(leftFormMinSize).append(""String_Node_Str"");
  resizeScript.append(""String_Node_Str"").append(dividerUpdater.getCallbackUrl()).append(""String_Node_Str"");
  resizeScript.append(""String_Node_Str"").append(splitter.getMarkupId()).append(""String_Node_Str"");
  resizeScript.append(""String_Node_Str"").append(dim.toLowerCase()).append(""String_Node_Str"");
  resizeScript.append(""String_Node_Str"").append(splitComponents[0].getMarkupId()).append(""String_Node_Str"");
  resizeScript.append(""String_Node_Str"").append(dim.toLowerCase()).append(""String_Node_Str"");
  resizeScript.append(""String_Node_Str"").append(splitComponents[1].getMarkupId()).append(""String_Node_Str"");
  resizeScript.append(""String_Node_Str"").append(pos).append(""String_Node_Str"");
  resizeScript.append(""String_Node_Str"").append(dim).append(""String_Node_Str"").append(dividerSize + leftFormMinSize).append(""String_Node_Str"").append(dim).append(""String_Node_Str"").append(dim).append(""String_Node_Str"").append(rightFormMinSize).append(""String_Node_Str"").append(continuousLayout ? ""String_Node_Str"" : ""String_Node_Str"");
  resizeScript.append(""String_Node_Str"").append(orient == TabPanel.SPLIT_HORIZONTAL ? ""String_Node_Str"" : ""String_Node_Str"").append(""String_Node_Str"");
  resizeScript.append(""String_Node_Str"").append(dim_o).append(""String_Node_Str"");
  String dividerBg=null;
  if (!isOpaque()) {
    dividerBg=IStyleSheet.COLOR_TRANSPARENT;
  }
 else   if (background != null) {
    dividerBg=Integer.toHexString(background.getRGB());
    dividerBg=""String_Node_Str"" + dividerBg.substring(2,dividerBg.length());
  }
  dim=dim.toLowerCase();
  resizeScript.append(""String_Node_Str"");
  resizeScript.append(""String_Node_Str"").append(""String_Node_Str"").append(dim).append(""String_Node_Str"").append(dividerSize).append(""String_Node_Str"").append(dividerBg != null ? ""String_Node_Str"" + dividerBg + ""String_Node_Str"" : ""String_Node_Str"").append(""String_Node_Str"");
  for (int i=0; i < 2; i++) {
    if (webTabs[i] != null) {
      String formId=webTabs[i].getPanel().getFormName();
      resizeScript.append(""String_Node_Str"").append(formId).append(""String_Node_Str"").append(formId).append(""String_Node_Str"");
      resizeScript.append(""String_Node_Str"").append(formId).append(""String_Node_Str"").append(formId).append(""String_Node_Str"");
    }
  }
  if (!continuousLayout) {
    resizeScript.append(""String_Node_Str"");
    resizeScript.append(""String_Node_Str"").append(dim_o).append(""String_Node_Str"");
    resizeScript.append(""String_Node_Str"").append(dim_o).append(""String_Node_Str"");
    resizeScript.append(""String_Node_Str"");
    resizeScript.append(""String_Node_Str"");
    resizeScript.append(""String_Node_Str"").append(orient == TabPanel.SPLIT_HORIZONTAL ? ""String_Node_Str"" : ""String_Node_Str"").append(""String_Node_Str"").append(dividerSize).append(""String_Node_Str"").append(dividerBg != null ? dividerBg : ""String_Node_Str"").append(""String_Node_Str"");
    resizeScript.append(""String_Node_Str"");
  }
  resizeScript.append(""String_Node_Str"");
  resizeScript.append(""String_Node_Str"").append(dim).append(""String_Node_Str"");
  resizeScript.append(""String_Node_Str"").append(dim_o).append(""String_Node_Str"");
  resizeScript.append(""String_Node_Str"").append(dim).append(""String_Node_Str"");
  resizeScript.append(""String_Node_Str"").append(dim).append(""String_Node_Str"").append(dividerSize).append(""String_Node_Str"");
  resizeScript.append(""String_Node_Str"").append(pos).append(""String_Node_Str"");
  resizeScript.append(""String_Node_Str"");
  resizeScript.append(""String_Node_Str"");
  resizeScript.append(""String_Node_Str"").append(dim).append(""String_Node_Str"");
  resizeScript.append(""String_Node_Str"").append(dim_o).append(""String_Node_Str"");
  resizeScript.append(""String_Node_Str"").append(dividerUpdater.getCallbackUrl()).append(""String_Node_Str"").append(""String_Node_Str"").append(""String_Node_Str"").append(dividerSize).append(""String_Node_Str"");
  resizeScript.append(""String_Node_Str"");
  boolean useAnchors=Utils.getAsBoolean(application.getRuntimeProperties().get(""String_Node_Str""));
  if (useAnchors) {
    String splitId=getMarkupId();
    resizeScript.append(""String_Node_Str"");
    resizeScript.append(""String_Node_Str"").append(""String_Node_Str"");
    resizeScript.append(""String_Node_Str"").append(splitId).append(""String_Node_Str"");
    resizeScript.append(""String_Node_Str"").append(splitId).append(""String_Node_Str"").append(orient == TabPanel.SPLIT_HORIZONTAL ? ""String_Node_Str"" : ""String_Node_Str"").append(""String_Node_Str"");
    resizeScript.append(""String_Node_Str"").append(splitId).append(""String_Node_Str"");
    resizeScript.append(""String_Node_Str"").append(splitId).append(""String_Node_Str"");
    resizeScript.append(""String_Node_Str"").append(splitId).append(""String_Node_Str"");
    resizeScript.append(""String_Node_Str"").append(splitId).append(""String_Node_Str"");
    resizeScript.append(""String_Node_Str"").append(splitId).append(""String_Node_Str"").append(orient == TabPanel.SPLIT_HORIZONTAL ? ""String_Node_Str"" : ""String_Node_Str"").append(""String_Node_Str"");
    resizeScript.append(""String_Node_Str"").append(splitId).append(""String_Node_Str"").append(resizeWeight).append(""String_Node_Str"");
    resizeScript.append(""String_Node_Str"").append(splitId).append(""String_Node_Str"").append(dividerSize).append(""String_Node_Str"");
    resizeScript.append(""String_Node_Str"").append(splitId).append(""String_Node_Str"").append(leftFormMinSize).append(""String_Node_Str"");
    resizeScript.append(""String_Node_Str"").append(splitId).append(""String_Node_Str"").append(rightFormMinSize).append(""String_Node_Str"");
    resizeScript.append(""String_Node_Str"").append(splitId).append(""String_Node_Str"").append(dividerUpdater.getCallbackUrl()).append(""String_Node_Str"");
    resizeScript.append(""String_Node_Str"");
  }
  headerResponse.renderOnLoadJavascript(resizeScript.toString());
}",0.8927145021346922
143646,"protected boolean handleDependencies(DependencyMetadata extension,int[] pops){
  boolean ok=false;
  boolean dependenciesOKForNow;
  dependenciesOKForNow=checkNoLibConflicts(extension.libDependencies,visitedLibs);
  if (dependenciesOKForNow) {
    if (extension.extensionDependencies != null && extension.extensionDependencies.length > 0) {
      for (int i=extension.extensionDependencies.length - 1; dependenciesOKForNow && (i >= 0); i--) {
        DependencyMetadata[] availableDependencyVersions=extensionProvider.getDependencyMetadata(extension.extensionDependencies[i]);
        if (availableDependencyVersions != null && availableDependencyVersions.length > 0) {
          stillToResolve.push(availableDependencyVersions);
          pops[0]++;
        }
 else {
          reasons.add(""String_Node_Str"" + extension.extensionDependencies[i] + ""String_Node_Str"");
          dependenciesOKForNow=false;
        }
      }
      ok=dependenciesOKForNow;
    }
 else {
      ok=true;
    }
  }
  return ok;
}","protected boolean handleDependencies(DependencyMetadata extension,int[] pops){
  boolean ok=false;
  boolean dependenciesOKForNow;
  dependenciesOKForNow=checkNoLibConflicts(extension.libDependencies,visitedLibs);
  if (dependenciesOKForNow) {
    if (extension.extensionDependencies != null && extension.extensionDependencies.length > 0) {
      for (int i=extension.extensionDependencies.length - 1; dependenciesOKForNow && (i >= 0); i--) {
        DependencyMetadata[] availableDependencyVersions=extensionProvider.getDependencyMetadata(extension.extensionDependencies[i]);
        DependencyMetadata installedExtDep=allInstalledExtensions.get(extension.extensionDependencies[i].id);
        if (installedExtDep != null) {
          boolean foundInProvider=false;
          if (availableDependencyVersions != null && availableDependencyVersions.length > 0) {
            for (            DependencyMetadata dmd : availableDependencyVersions) {
              if (dmd.id.equals(installedExtDep.id) && dmd.version.equals(installedExtDep.version)) {
                foundInProvider=true;
                break;
              }
            }
          }
          if (!foundInProvider)           availableDependencyVersions=Utils.arrayAdd(availableDependencyVersions,installedExtDep,false);
        }
        if (availableDependencyVersions != null && availableDependencyVersions.length > 0) {
          stillToResolve.push(availableDependencyVersions);
          pops[0]++;
        }
 else {
          reasons.add(""String_Node_Str"" + extension.extensionDependencies[i] + ""String_Node_Str"");
          dependenciesOKForNow=false;
        }
      }
      ok=dependenciesOKForNow;
    }
 else {
      ok=true;
    }
  }
  return ok;
}",0.7363038714390066
143647,"protected void processInstalledExtensions(){
  allInstalledLibs=new HashMap<String,List<LibDependencyDeclaration>>();
  allInstalledExtensions=new HashMap<String,String>();
  if (installedExtensions == null)   installedExtensions=new DependencyMetadata[0];
  for (  DependencyMetadata extension : installedExtensions) {
    allInstalledExtensions.put(extension.id,extension.version);
    if (extension.libDependencies != null) {
      addToLibsMap(extension.libDependencies,allInstalledLibs);
    }
  }
}","protected void processInstalledExtensions(){
  allInstalledLibs=new HashMap<String,List<LibDependencyDeclaration>>();
  allInstalledExtensions=new HashMap<String,DependencyMetadata>();
  if (installedExtensions == null)   installedExtensions=new DependencyMetadata[0];
  for (  DependencyMetadata extension : installedExtensions) {
    allInstalledExtensions.put(extension.id,extension);
    if (extension.libDependencies != null) {
      addToLibsMap(extension.libDependencies,allInstalledLibs);
    }
  }
}",0.9683794466403162
143648,"/** 
 * Recursively resolves an extension dependency.<br> It enforces no extension dependency cycles and also checks for lib conflicts that might occur.<br><br> It also looks for possibilities to update installed extensions so that the given dependency can be installed.
 * @param extension description of the given extension dependency.
 * @param visitedExtensions keeps track of recursively visited extension ids, to avoid cycles. The map's key is the extension id, the map's value is the version.
 * @param visitedLibs keeps track of lib dependencies encountered in current tree path.
 * @return the root node of the resolved dependency tree. Null if the dependency could not be resolved due to missing extension(s)/version(s) or conflict(s).
 */
protected void resolveDependenciesRecursive(DependencyMetadata extension){
  int[] pops=new int[]{0};
  ExtensionNode node=null;
  boolean ok=false;
  LibDependencyDeclaration[][] libsToBeRemovedBecauseOfUpdate=new LibDependencyDeclaration[][]{null};
  if (extension.servoyDependency == null || VersionStringUtils.belongsToInterval(VersionStringUtils.getCurrentServoyVersion(),extension.servoyDependency.minVersion,extension.servoyDependency.maxVersion)) {
    if (visitedExtensions.containsKey(extension.id)) {
      if (VersionStringUtils.sameVersion(visitedExtensions.get(extension.id),extension.version)) {
        ok=true;
      }
 else {
        reasons.add(""String_Node_Str"" + visitedExtensions.get(extension.id) + ""String_Node_Str""+ extension.version+ ""String_Node_Str""+ extension.id+ ""String_Node_Str"");
      }
    }
 else     if (allInstalledExtensions.containsKey(extension.id)) {
      if (VersionStringUtils.sameVersion(allInstalledExtensions.get(extension.id),extension.version)) {
        ok=true;
      }
 else {
        node=new ExtensionNode(extension.id,extension.version,ExtensionNode.REPLACE_RESOLVE);
        ok=handleReplace(extension,libsToBeRemovedBecauseOfUpdate,pops);
      }
    }
 else {
      node=new ExtensionNode(extension.id,extension.version,ExtensionNode.SIMPLE_DEPENDENCY_RESOLVE);
      ok=handleDependencies(extension,pops);
    }
  }
 else {
    reasons.add(""String_Node_Str"" + extension + ""String_Node_Str""+ VersionStringUtils.getCurrentServoyVersion()+ ""String_Node_Str""+ extension.servoyDependency.minVersion+ ""String_Node_Str""+ extension.servoyDependency.maxVersion+ ""String_Node_Str"");
  }
  if (ok) {
    if (stillToResolve.size() == 0) {
      if (checkNoLibConflicts(allInstalledLibs,visitedLibs)) {
        if (results == null)         results=new ArrayList<ExtensionNode[]>();
        if (node != null)         treePath.push(node);
        results.add(treePath.toArray(new ExtensionNode[treePath.size()]));
        if (node != null)         treePath.pop();
      }
    }
 else {
      DependencyMetadata[] dependencyVersions=stillToResolve.pop();
      if (node != null) {
        visitedExtensions.put(extension.id,extension.version);
        if (extension.libDependencies != null)         addToLibsMap(extension.libDependencies,visitedLibs);
        treePath.push(node);
        if (libsToBeRemovedBecauseOfUpdate[0] != null)         removeFromLibsMap(libsToBeRemovedBecauseOfUpdate[0],allInstalledLibs);
      }
      for (      DependencyMetadata dependencyVersion : dependencyVersions) {
        resolveDependenciesRecursive(dependencyVersion);
      }
      if (node != null) {
        visitedExtensions.remove(extension.id);
        if (extension.libDependencies != null)         removeFromLibsMap(extension.libDependencies,visitedLibs);
        treePath.pop();
        if (libsToBeRemovedBecauseOfUpdate[0] != null)         addToLibsMap(libsToBeRemovedBecauseOfUpdate[0],allInstalledLibs);
      }
      stillToResolve.push(dependencyVersions);
    }
  }
  while (pops[0]-- > 0)   stillToResolve.pop();
}","/** 
 * Recursively resolves an extension dependency.<br> It enforces no extension dependency cycles and also checks for lib conflicts that might occur.<br><br> It also looks for possibilities to update installed extensions so that the given dependency can be installed.
 * @param extension description of the given extension dependency.
 * @param visitedExtensions keeps track of recursively visited extension ids, to avoid cycles. The map's key is the extension id, the map's value is the version.
 * @param visitedLibs keeps track of lib dependencies encountered in current tree path.
 * @return the root node of the resolved dependency tree. Null if the dependency could not be resolved due to missing extension(s)/version(s) or conflict(s).
 */
protected void resolveDependenciesRecursive(DependencyMetadata extension){
  int[] pops=new int[]{0};
  ExtensionNode node=null;
  boolean ok=false;
  LibDependencyDeclaration[][] libsToBeRemovedBecauseOfUpdate=new LibDependencyDeclaration[][]{null};
  if (extension.servoyDependency == null || VersionStringUtils.belongsToInterval(VersionStringUtils.getCurrentServoyVersion(),extension.servoyDependency.minVersion,extension.servoyDependency.maxVersion)) {
    if (visitedExtensions.containsKey(extension.id)) {
      if (VersionStringUtils.sameVersion(visitedExtensions.get(extension.id),extension.version)) {
        ok=true;
      }
 else {
        reasons.add(""String_Node_Str"" + visitedExtensions.get(extension.id) + ""String_Node_Str""+ extension.version+ ""String_Node_Str""+ extension.id+ ""String_Node_Str"");
      }
    }
 else     if (allInstalledExtensions.containsKey(extension.id)) {
      if (VersionStringUtils.sameVersion(allInstalledExtensions.get(extension.id).version,extension.version)) {
        ok=true;
      }
 else {
        node=new ExtensionNode(extension.id,extension.version,ExtensionNode.REPLACE_RESOLVE);
        ok=handleReplace(extension,libsToBeRemovedBecauseOfUpdate,pops);
      }
    }
 else {
      node=new ExtensionNode(extension.id,extension.version,ExtensionNode.SIMPLE_DEPENDENCY_RESOLVE);
      ok=handleDependencies(extension,pops);
    }
  }
 else {
    reasons.add(""String_Node_Str"" + extension + ""String_Node_Str""+ VersionStringUtils.getCurrentServoyVersion()+ ""String_Node_Str""+ extension.servoyDependency.minVersion+ ""String_Node_Str""+ extension.servoyDependency.maxVersion+ ""String_Node_Str"");
  }
  if (ok) {
    if (stillToResolve.size() == 0) {
      if (checkNoLibConflicts(allInstalledLibs,visitedLibs)) {
        if (results == null)         results=new ArrayList<ExtensionNode[]>();
        if (node != null)         treePath.push(node);
        results.add(treePath.toArray(new ExtensionNode[treePath.size()]));
        if (node != null)         treePath.pop();
      }
    }
 else {
      DependencyMetadata[] dependencyVersions=stillToResolve.pop();
      if (node != null) {
        visitedExtensions.put(extension.id,extension.version);
        if (extension.libDependencies != null)         addToLibsMap(extension.libDependencies,visitedLibs);
        treePath.push(node);
        if (libsToBeRemovedBecauseOfUpdate[0] != null)         removeFromLibsMap(libsToBeRemovedBecauseOfUpdate[0],allInstalledLibs);
      }
      for (      DependencyMetadata dependencyVersion : dependencyVersions) {
        resolveDependenciesRecursive(dependencyVersion);
      }
      if (node != null) {
        visitedExtensions.remove(extension.id);
        if (extension.libDependencies != null)         removeFromLibsMap(extension.libDependencies,visitedLibs);
        treePath.pop();
        if (libsToBeRemovedBecauseOfUpdate[0] != null)         addToLibsMap(libsToBeRemovedBecauseOfUpdate[0],allInstalledLibs);
      }
      stillToResolve.push(dependencyVersions);
    }
  }
  while (pops[0]-- > 0)   stillToResolve.pop();
}",0.998952331063384
143649,"/** 
 * @clonedesc com.servoy.j2db.querybuilder.IQueryBuilderColumn#max()
 * @sample var query = databaseManager.createSelect('db:/example_data/orders') query.groupBy.addPk() // have to group by on pk when using having-conditions in (foundset) pk queries .root.having.add(query.joins.orders_to_order_details.columns.quantity.count.max(10)) foundset.loadRecords(query)
 */
@JSReadonlyProperty public QBAggregate max(){
  return new QBAggregate(getRoot(),getParent(),queryColumn,QueryAggregate.MAX);
}","/** 
 * @clonedesc com.servoy.j2db.querybuilder.IQueryBuilderColumn#max()
 * @sample /** @type {QBSelect<db:/example_data/orders>} *&#47; var query = databaseManager.createSelect('db:/example_data/orders') query.groupBy.addPk() // have to group by on pk when using having-conditions in (foundset) pk queries .root.having.add(query.joins.orders_to_order_details.columns.quantity.count.max(10)) foundset.loadRecords(query)
 */
@JSReadonlyProperty public QBAggregate max(){
  return new QBAggregate(getRoot(),getParent(),queryColumn,QueryAggregate.MAX);
}",0.9495718363463368
143650,"/** 
 * @clonedesc com.servoy.j2db.querybuilder.IQueryBuilderColumn#count()
 * @sample var query = databaseManager.createSelect('db:/example_data/orders') query.groupBy.addPk() // have to group by on pk when using having-conditions in (foundset) pk queries .root.having.add(query.joins.orders_to_order_details.columns.quantity.count.eq(0)) foundset.loadRecords(query)
 */
@JSReadonlyProperty public QBAggregate count(){
  return new QBAggregate(getRoot(),getParent(),queryColumn,QueryAggregate.COUNT);
}","/** 
 * @clonedesc com.servoy.j2db.querybuilder.IQueryBuilderColumn#count()
 * @sample /** @type {QBSelect<db:/example_data/orders>} *&#47; var query = databaseManager.createSelect('db:/example_data/orders') query.groupBy.addPk() // have to group by on pk when using having-conditions in (foundset) pk queries .root.having.add(query.joins.orders_to_order_details.columns.quantity.count.eq(0)) foundset.loadRecords(query)
 */
@JSReadonlyProperty public QBAggregate count(){
  return new QBAggregate(getRoot(),getParent(),queryColumn,QueryAggregate.COUNT);
}",0.9499527856468366
143651,"/** 
 * @clonedesc com.servoy.j2db.querybuilder.IQueryBuilderColumn#sum()
 * @sample var query = databaseManager.createSelect('db:/example_data/orders') query.groupBy.addPk() // have to group by on pk when using having-conditions in (foundset) pk queries .root.having.add(query.joins.orders_to_order_details.columns.quantity.count.sum(10)) foundset.loadRecords(query)
 */
@JSReadonlyProperty public QBAggregate sum(){
  return new QBAggregate(getRoot(),getParent(),queryColumn,QueryAggregate.SUM);
}","/** 
 * @clonedesc com.servoy.j2db.querybuilder.IQueryBuilderColumn#sum()
 * @sample /** @type {QBSelect<db:/example_data/orders>} *&#47; var query = databaseManager.createSelect('db:/example_data/orders') query.groupBy.addPk() // have to group by on pk when using having-conditions in (foundset) pk queries .root.having.add(query.joins.orders_to_order_details.columns.quantity.count.sum(10)) foundset.loadRecords(query)
 */
@JSReadonlyProperty public QBAggregate sum(){
  return new QBAggregate(getRoot(),getParent(),queryColumn,QueryAggregate.SUM);
}",0.9495718363463368
143652,"/** 
 * @clonedesc com.servoy.j2db.querybuilder.IQueryBuilderColumn#asc()
 * @sample var query = databaseManager.createSelect('db:/example_data/orders') query.sort .add(query.joins.orders_to_order_details.columns.quantity.asc) .add(query.columns.companyid) foundset.loadRecords(query)
 */
@JSReadonlyProperty public QBSort asc(){
  return new QBSort(getRoot(),this,true);
}","/** 
 * @clonedesc com.servoy.j2db.querybuilder.IQueryBuilderColumn#asc()
 * @sample /** @type {QBSelect<db:/example_data/orders>} *&#47; var query = databaseManager.createSelect('db:/example_data/orders') query.sort .add(query.joins.orders_to_order_details.columns.quantity.asc) .add(query.columns.companyid) foundset.loadRecords(query)
 */
@JSReadonlyProperty public QBSort asc(){
  return new QBSort(getRoot(),this,true);
}",0.9336670838548186
143653,"/** 
 * @clonedesc com.servoy.j2db.querybuilder.IQueryBuilderColumn#avg()
 * @sample var query = databaseManager.createSelect('db:/example_data/orders') query.groupBy.addPk() // have to group by on pk when using having-conditions in (foundset) pk queries .root.having.add(query.joins.orders_to_order_details.columns.quantity.avg.eq(1)) foundset.loadRecords(query)
 */
@JSReadonlyProperty public QBAggregate avg(){
  return new QBAggregate(getRoot(),getParent(),queryColumn,QueryAggregate.AVG);
}","/** 
 * @clonedesc com.servoy.j2db.querybuilder.IQueryBuilderColumn#avg()
 * @sample /** @type {QBSelect<db:/example_data/orders>} *&#47; var query = databaseManager.createSelect('db:/example_data/orders') query.groupBy.addPk() // have to group by on pk when using having-conditions in (foundset) pk queries .root.having.add(query.joins.orders_to_order_details.columns.quantity.avg.eq(1)) foundset.loadRecords(query)
 */
@JSReadonlyProperty public QBAggregate avg(){
  return new QBAggregate(getRoot(),getParent(),queryColumn,QueryAggregate.AVG);
}",0.9491850431447748
143654,"/** 
 * @clonedesc com.servoy.j2db.querybuilder.IQueryBuilderColumn#min()
 * @sample var query = databaseManager.createSelect('db:/example_data/orders') query.groupBy.addPk() // have to group by on pk when using having-conditions in (foundset) pk queries .root.having.add(query.joins.orders_to_order_details.columns.quantity.count.min(10)) foundset.loadRecords(query)
 */
@JSReadonlyProperty public QBAggregate min(){
  return new QBAggregate(getRoot(),getParent(),queryColumn,QueryAggregate.MIN);
}","/** 
 * @clonedesc com.servoy.j2db.querybuilder.IQueryBuilderColumn#min()
 * @sample /** @type {QBSelect<db:/example_data/orders>} *&#47; var query = databaseManager.createSelect('db:/example_data/orders') query.groupBy.addPk() // have to group by on pk when using having-conditions in (foundset) pk queries .root.having.add(query.joins.orders_to_order_details.columns.quantity.count.min(10)) foundset.loadRecords(query)
 */
@JSReadonlyProperty public QBAggregate min(){
  return new QBAggregate(getRoot(),getParent(),queryColumn,QueryAggregate.MIN);
}",0.9495718363463368
143655,"/** 
 * @clonedesc com.servoy.j2db.querybuilder.IQueryBuilderColumn#desc()
 * @sample var query = databaseManager.createSelect('db:/example_data/orders') query.sort .add(query.joins.orders_to_order_details.columns.quantity.desc) .add(query.columns.companyid) foundset.loadRecords(query)
 */
@JSReadonlyProperty public QBSort desc(){
  return new QBSort(getRoot(),this,false);
}","/** 
 * @clonedesc com.servoy.j2db.querybuilder.IQueryBuilderColumn#desc()
 * @sample /** @type {QBSelect<db:/example_data/orders>} *&#47; var query = databaseManager.createSelect('db:/example_data/orders') query.sort .add(query.joins.orders_to_order_details.columns.quantity.desc) .add(query.columns.companyid) foundset.loadRecords(query)
 */
@JSReadonlyProperty public QBSort desc(){
  return new QBSort(getRoot(),this,false);
}",0.9343246592317224
143656,"/** 
 * @clonedesc com.servoy.j2db.querybuilder.IQueryBuilderGroupby#add(IQueryBuilderColumn)
 * @sample var query = databaseManager.createSelect('db:/example_data/orders') query.groupBy.add(query.columns.orderid) // have to group by on pk when using having-conditions in (foundset) pk queries .root.having.add(query.joins.orders_to_order_details.columns.quantity.count.eq(0)) foundset.loadRecords(query)
 */
public QBGroupBy js_add(QBColumn column) throws RepositoryException {
  return add(column);
}","/** 
 * @clonedesc com.servoy.j2db.querybuilder.IQueryBuilderGroupby#add(IQueryBuilderColumn)
 * @sample /** @type {QBSelect<db:/example_data/orders>} *&#47; var query = databaseManager.createSelect('db:/example_data/orders') query.groupBy.add(query.columns.orderid) // have to group by on pk when using having-conditions in (foundset) pk queries .root.having.add(query.joins.orders_to_order_details.columns.quantity.count.eq(0)) foundset.loadRecords(query)
 */
public QBGroupBy js_add(QBColumn column) throws RepositoryException {
  return add(column);
}",0.9498580889309366
143657,"/** 
 * @clonedesc com.servoy.j2db.querybuilder.IQueryBuilderGroupby#addPk()
 * @sample var query = databaseManager.createSelect('db:/example_data/orders') query.groupBy.addPk() // have to group by on pk when using having-conditions in (foundset) pk queries .root.having.add(query.joins.orders_to_order_details.columns.quantity.count.eq(0)) foundset.loadRecords(query)
 */
@JSFunction public QBGroupBy addPk() throws RepositoryException {
  Iterator<String> rowIdentColumnNames=getParent().getTable().getRowIdentColumnNames();
  while (rowIdentColumnNames.hasNext()) {
    add(rowIdentColumnNames.next());
  }
  return this;
}","/** 
 * @clonedesc com.servoy.j2db.querybuilder.IQueryBuilderGroupby#addPk()
 * @sample /** @type {QBSelect<db:/example_data/orders>} *&#47; var query = databaseManager.createSelect('db:/example_data/orders') query.groupBy.addPk() // have to group by on pk when using having-conditions in (foundset) pk queries .root.having.add(query.joins.orders_to_order_details.columns.quantity.count.eq(0)) foundset.loadRecords(query)
 */
@JSFunction public QBGroupBy addPk() throws RepositoryException {
  Iterator<String> rowIdentColumnNames=getParent().getTable().getRowIdentColumnNames();
  while (rowIdentColumnNames.hasNext()) {
    add(rowIdentColumnNames.next());
  }
  return this;
}",0.9593869731800766
143658,"/** 
 * @clonedesc com.servoy.j2db.querybuilder.IQueryBuilderJoin#on()
 * @sample var query = databaseManager.createSelect('db:/example_data/person') var join1 = query.joins.add('db:/example_data/person') join1.on.add(query.columns.parent_person_id.eq(join1.columns.person_id)) var join2 = query.joins.add('db:/example_data/person') join2.on.add(join1.columns.parent_person_id.eq(join2.columns.person_id)) query.where.add(join2.columns.name.eq('john')) foundset.loadRecords(query)
 */
@JSReadonlyProperty public QBLogicalCondition on(){
  if (on == null) {
    on=new QBLogicalCondition(getRoot(),this,join.getCondition());
  }
  return on;
}","/** 
 * @clonedesc com.servoy.j2db.querybuilder.IQueryBuilderJoin#on()
 * @sample /** @type {QBSelect<db:/example_data/person>} *&#47; var query = databaseManager.createSelect('db:/example_data/person') /** @type {QBJoin<db:/example_data/person>} *&#47; var join1 = query.joins.add('db:/example_data/person') join1.on.add(query.columns.parent_person_id.eq(join1.columns.person_id)) /** @type {QBJoin<db:/example_data/person>} *&#47; var join2 = query.joins.add('db:/example_data/person') join2.on.add(join1.columns.parent_person_id.eq(join2.columns.person_id)) query.where.add(join2.columns.name.eq('john')) foundset.loadRecords(query)
 */
@JSReadonlyProperty public QBLogicalCondition on(){
  if (on == null) {
    on=new QBLogicalCondition(getRoot(),this,join.getCondition());
  }
  return on;
}",0.8922863099374566
143659,"/** 
 * @clonedesc com.servoy.j2db.querybuilder.IQueryBuilderPart#getParent()
 * @sample var query = databaseManager.createSelect('db:/example_data/person') query.where.add(query.joins.person_to_parent.joins.person_to_parent.columns.name.eq('john')) foundset.loadRecords(query)
 */
@JSReadonlyProperty public QBTableClause getParent(){
  return parent;
}","/** 
 * @clonedesc com.servoy.j2db.querybuilder.IQueryBuilderPart#getParent()
 * @sample /** @type {QBSelect<db:/example_data/person>} *&#47; var query = databaseManager.createSelect('db:/example_data/person') query.where.add(query.joins.person_to_parent.joins.person_to_parent.columns.name.eq('john')) foundset.loadRecords(query)
 */
@JSReadonlyProperty public QBTableClause getParent(){
  return parent;
}",0.9303547963206308
143660,"/** 
 * @clonedesc com.servoy.j2db.querybuilder.IQueryBuilderPart#getRoot()
 * @sample var subquery = databaseManager.createSelect('db:/example_data/order_details') var query = databaseManager.createSelect('db:/example_data/orders') query.where.add(query .or  .add(query.columns.order_id.not.isin([1, 2, 3])) .add(query.exists( subquery.where.add(subquery.columns.orderid.eq(query.columns.order_id)).root )) ) foundset.loadRecords(query)
 */
@JSReadonlyProperty public QBSelect getRoot(){
  return root;
}","/** 
 * @clonedesc com.servoy.j2db.querybuilder.IQueryBuilderPart#getRoot()
 * @sample /** @type {QBSelect<db:/example_data/order_details>} *&#47; var subquery = databaseManager.createSelect('db:/example_data/order_details') /** @type {QBSelect<db:/example_data/orders>} *&#47; var query = databaseManager.createSelect('db:/example_data/orders') query.where.add(query .or  .add(query.columns.order_id.not.isin([1, 2, 3])) .add(query.exists( subquery.where.add(subquery.columns.orderid.eq(query.columns.order_id)).root )) ) foundset.loadRecords(query)
 */
@JSReadonlyProperty public QBSelect getRoot(){
  return root;
}",0.8993766696349065
143661,"/** 
 * @clonedesc com.servoy.j2db.querybuilder.IQueryBuilderLogicalCondition#add(IQueryBuilderCondition)
 * @sample var query = databaseManager.createSelect('db:/example_data/orders') query.where.add(query.columns.orderdate.isNull)
 */
public QBLogicalCondition js_add(QBCondition condition){
  return add(condition);
}","/** 
 * @clonedesc com.servoy.j2db.querybuilder.IQueryBuilderLogicalCondition#add(IQueryBuilderCondition)
 * @sample /** @type {QBSelect<db:/example_data/orders>} *&#47; var query = databaseManager.createSelect('db:/example_data/orders') query.where.add(query.columns.orderdate.isNull)
 */
public QBLogicalCondition js_add(QBCondition condition){
  return add(condition);
}",0.9235209235209236
143662,"/** 
 * @clonedesc com.servoy.j2db.querybuilder.IQueryBuilderPart#getParent()
 * @sample var query = databaseManager.createSelect('db:/example_data/person') query.where.add(query.joins.person_to_parent.joins.person_to_parent.columns.name.eq('john')) foundset.loadRecords(query)
 */
@JSReadonlyProperty public QBTableClause getParent(){
  return parent;
}","/** 
 * @clonedesc com.servoy.j2db.querybuilder.IQueryBuilderPart#getParent()
 * @sample /** @type {QBSelect<db:/example_data/person>} *&#47; var query = databaseManager.createSelect('db:/example_data/person') query.where.add(query.joins.person_to_parent.joins.person_to_parent.columns.name.eq('john')) foundset.loadRecords(query)
 */
@JSReadonlyProperty public QBTableClause getParent(){
  return parent;
}",0.9303547963206308
143663,"/** 
 * @clonedesc com.servoy.j2db.querybuilder.IQueryBuilderPart#getRoot()
 * @sample var subquery = databaseManager.createSelect('db:/example_data/order_details') var query = databaseManager.createSelect('db:/example_data/orders') query.where.add(query .or  .add(query.columns.order_id.not.isin([1, 2, 3])) .add(query.exists( subquery.where.add(subquery.columns.orderid.eq(query.columns.order_id)).root )) ) foundset.loadRecords(query)
 */
@JSReadonlyProperty public QBSelect getRoot(){
  return root;
}","/** 
 * @clonedesc com.servoy.j2db.querybuilder.IQueryBuilderPart#getRoot()
 * @sample /** @type {QBSelect<db:/example_data/order_details>} *&#47; var subquery = databaseManager.createSelect('db:/example_data/order_details') /** @type {QBSelect<db:/example_data/orders>} *&#47; var query = databaseManager.createSelect('db:/example_data/orders') query.where.add(query .or  .add(query.columns.order_id.not.isin([1, 2, 3])) .add(query.exists( subquery.where.add(subquery.columns.orderid.eq(query.columns.order_id)).root )) ) foundset.loadRecords(query)
 */
@JSReadonlyProperty public QBSelect getRoot(){
  return root;
}",0.8993766696349065
143664,"/** 
 * @clonedesc com.servoy.j2db.querybuilder.IQueryBuilder#having()
 * @sample var query = databaseManager.createSelect('db:/example_data/orders') query.groupBy.addPk() // have to group by on pk when using having-conditions in (foundset) pk queries .root.having.add(query.joins.orders_to_order_details.columns.quantity.count.eq(0)) foundset.loadRecords(query)	 
 */
@JSReadonlyProperty public QBLogicalCondition having() throws RepositoryException {
  if (having == null) {
    ISQLCondition c=getQuery().getHaving();
    if (!(c instanceof AndOrCondition)) {
      getQuery().setHaving(null,c=AndCondition.and(c,new AndCondition()));
    }
    where=new QBLogicalCondition(this,this,(AndOrCondition)c);
  }
  return where;
}","/** 
 * @clonedesc com.servoy.j2db.querybuilder.IQueryBuilder#having()
 * @sample /** @type {QBSelect<db:/example_data/orders>} *&#47; var query = databaseManager.createSelect('db:/example_data/orders') query.groupBy.addPk() // have to group by on pk when using having-conditions in (foundset) pk queries .root.having.add(query.joins.orders_to_order_details.columns.quantity.count.eq(0)) foundset.loadRecords(query)	 
 */
@JSReadonlyProperty public QBLogicalCondition having() throws RepositoryException {
  if (having == null) {
    ISQLCondition c=getQuery().getHaving();
    if (!(c instanceof AndOrCondition)) {
      getQuery().setHaving(null,c=AndCondition.and(c,new AndCondition()));
    }
    where=new QBLogicalCondition(this,this,(AndOrCondition)c);
  }
  return where;
}",0.9648774022531478
143665,"/** 
 * @clonedesc com.servoy.j2db.querybuilder.IQueryBuilder#sort()
 * @sample var query = databaseManager.createSelect('db:/example_data/orders') query.sort .add(query.joins.orders_to_order_details.columns.quantity.desc) .add(query.columns.companyid) foundset.loadRecords(query)
 */
@JSReadonlyProperty public QBSorts sort(){
  if (sort == null) {
    sort=new QBSorts(this);
  }
  return sort;
}","/** 
 * @clonedesc com.servoy.j2db.querybuilder.IQueryBuilder#sort()
 * @sample /** @type {QBSelect<db:/example_data/orders>} *&#47; var query = databaseManager.createSelect('db:/example_data/orders') query.sort .add(query.joins.orders_to_order_details.columns.quantity.desc) .add(query.columns.companyid) foundset.loadRecords(query)
 */
@JSReadonlyProperty public QBSorts sort(){
  if (sort == null) {
    sort=new QBSorts(this);
  }
  return sort;
}",0.9375736160188456
143666,"/** 
 * @clonedesc com.servoy.j2db.querybuilder.IQueryBuilder#groupBy()
 * @sample var query = databaseManager.createSelect('db:/example_data/orders') query.groupBy.addPk() // have to group by on pk when using having-conditions in (foundset) pk queries .root.having.add(query.joins.orders_to_order_details.columns.quantity.count.eq(0)) foundset.loadRecords(query)
 */
@JSReadonlyProperty public QBGroupBy groupBy(){
  if (groupBy == null) {
    groupBy=new QBGroupBy(this);
  }
  return groupBy;
}","/** 
 * @clonedesc com.servoy.j2db.querybuilder.IQueryBuilder#groupBy()
 * @sample /** @type {QBSelect<db:/example_data/orders>} *&#47; var query = databaseManager.createSelect('db:/example_data/orders') query.groupBy.addPk() // have to group by on pk when using having-conditions in (foundset) pk queries .root.having.add(query.joins.orders_to_order_details.columns.quantity.count.eq(0)) foundset.loadRecords(query)
 */
@JSReadonlyProperty public QBGroupBy groupBy(){
  if (groupBy == null) {
    groupBy=new QBGroupBy(this);
  }
  return groupBy;
}",0.9493791786055396
143667,"/** 
 * @clonedesc com.servoy.j2db.querybuilder.IQueryBuilder#params()
 * @sample var query = databaseManager.createSelect('db:/example_data/orders') query.where.add(query.columns.contact_id.eq(query.getParameter('mycontactid'))) // load orders where contact_id = 100 query.params['mycontactid'] = 100 foundset.loadRecords(query) // load orders where contact_id = 200 query.params['mycontactid'] = 200 foundset.loadRecords(query)
 */
@JSReadonlyProperty public QBParameters params(){
  if (params == null) {
    params=new QBParameters(getScriptableParent(),this);
  }
  return params;
}","/** 
 * Get the named parameters from a query.
 * @sample /** @type {QBSelect<db:/example_data/orders>} *&#47; var query = databaseManager.createSelect('db:/example_data/orders') query.where.add(query.columns.contact_id.eq(query.getParameter('mycontactid'))) // load orders where contact_id = 100 query.params['mycontactid'] = 100 foundset.loadRecords(query) // load orders where contact_id = 200 query.params['mycontactid'] = 200 foundset.loadRecords(query)
 */
@JSReadonlyProperty public QBParameters params(){
  if (params == null) {
    params=new QBParameters(getScriptableParent(),this);
  }
  return params;
}",0.8611803823773898
143668,"/** 
 * @see org.apache.wicket.ajax.AbstractDefaultAjaxBehavior#respond(org.apache.wicket.ajax.AjaxRequestTarget)
 */
@Override protected void respond(AjaxRequestTarget target){
  Request request=RequestCycle.get().getRequest();
  String action=request.getParameter(DraggableBehavior.PARAM_ACTION);
  String id=extractId(request.getParameter(DraggableBehavior.PARAM_DRAGGABLE_ID));
  if (id != null) {
    final String finalId=id.endsWith(TemplateGenerator.WRAPPER_SUFFIX) ? id.substring(0,id.length() - 8) : id;
    MarkupContainer comp=(MarkupContainer)getComponent();
    Component child=(Component)comp.visitChildren(Component.class,new IVisitor<Component>(){
      public Object component(      Component component){
        String markupId=component.getMarkupId();
        if (finalId.equals(markupId))         return component;
        return IVisitor.CONTINUE_TRAVERSAL;
      }
    }
);
    if (child instanceof IComponent && action != null) {
      int height=stripUnitPart(request.getParameter(PARAM_RESIZE_HEIGHT));
      int width=stripUnitPart(request.getParameter(PARAM_RESIZE_WIDTH));
      int x=stripUnitPart(request.getParameter(DraggableBehavior.PARAM_X));
      int y=stripUnitPart(request.getParameter(DraggableBehavior.PARAM_Y));
      if (action.equals(ACTION_SELECT)) {
        Object ret=callback.executeOnSelect(getJSEvent(EventType.action,0,new Point(x,y),new IComponent[]{(IComponent)child}));
        if (ret instanceof Boolean && !((Boolean)ret).booleanValue()) {
          onSelectComponent=null;
        }
 else {
          target.appendJavascript(""String_Node_Str"" + id + ""String_Node_Str"");
        }
        return;
      }
      if (child != onSelectComponent) {
        onSelectComponent=(IComponent)child;
      }
      if (action.equals(ACTION_RESIZE)) {
        if (width != -1 && height != -1) {
          if (child instanceof ISupportWebBounds) {
            Insets paddingAndBorder=((ISupportWebBounds)child).getPaddingAndBorder();
            if (paddingAndBorder != null) {
              height+=paddingAndBorder.bottom + paddingAndBorder.top;
              width+=paddingAndBorder.left + paddingAndBorder.right;
            }
          }
          if (child instanceof IScriptableProvider)           ((IRuntimeComponent)((IScriptableProvider)child).getScriptObject()).setSize(width,height);
          if (child instanceof IProviderStylePropertyChanges)           ((IProviderStylePropertyChanges)child).getStylePropertyChanges().setRendered();
        }
        callback.executeOnResize(getJSEvent(EventType.onDrop,0,new Point(x,y),new IComponent[]{(IComponent)child}));
      }
 else       if (action.equals(DraggableBehavior.ACTION_DRAG_START)) {
        Object onDragAllowed=callback.executeOnDrag(getJSEvent(EventType.onDrag,0,new Point(x,y),new IComponent[]{(IComponent)child}));
        if ((onDragAllowed instanceof Boolean && !((Boolean)onDragAllowed).booleanValue()) || (onDragAllowed instanceof Number && ((Number)onDragAllowed).intValue() == DRAGNDROP.NONE)) {
          onDragComponent=null;
        }
 else {
          onDragComponent=(IComponent)child;
        }
      }
 else {
        if (child == onDragComponent) {
          if (x != -1 && y != -1) {
            ((IRuntimeComponent)((IScriptableProvider)child).getScriptObject()).setLocation(x,y);
            if (child instanceof IProviderStylePropertyChanges) {
              if ((child).getParent() instanceof WrapperContainer) {
                WrapperContainer wrapper=(WrapperContainer)(child).getParent();
                wrapper.getStylePropertyChanges().getChanges();
                wrapper.getStylePropertyChanges().setRendered();
              }
              ((IProviderStylePropertyChanges)child).getStylePropertyChanges().setRendered();
            }
          }
          callback.executeOnDrop(getJSEvent(EventType.onDrop,0,new Point(x,y),new IComponent[]{(IComponent)child}));
        }
      }
    }
  }
  WebEventExecutor.generateResponse(target,getComponent().getPage());
  target.prependJavascript(""String_Node_Str"");
}","/** 
 * @see org.apache.wicket.ajax.AbstractDefaultAjaxBehavior#respond(org.apache.wicket.ajax.AjaxRequestTarget)
 */
@Override protected void respond(AjaxRequestTarget target){
  Request request=RequestCycle.get().getRequest();
  String action=request.getParameter(DraggableBehavior.PARAM_ACTION);
  String id=extractId(request.getParameter(DraggableBehavior.PARAM_DRAGGABLE_ID));
  if (id != null) {
    final String finalId=id.endsWith(TemplateGenerator.WRAPPER_SUFFIX) ? id.substring(0,id.length() - 8) : id;
    MarkupContainer comp=(MarkupContainer)getComponent();
    Component child=(Component)comp.visitChildren(Component.class,new IVisitor<Component>(){
      public Object component(      Component component){
        String markupId=component.getMarkupId();
        if (finalId.equals(markupId))         return component;
        return IVisitor.CONTINUE_TRAVERSAL;
      }
    }
);
    if (child instanceof IComponent && action != null) {
      int height=stripUnitPart(request.getParameter(PARAM_RESIZE_HEIGHT));
      int width=stripUnitPart(request.getParameter(PARAM_RESIZE_WIDTH));
      int x=stripUnitPart(request.getParameter(DraggableBehavior.PARAM_X));
      int y=stripUnitPart(request.getParameter(DraggableBehavior.PARAM_Y));
      if (action.equals(ACTION_SELECT)) {
        Object ret=callback.executeOnSelect(getJSEvent(EventType.action,0,new Point(x,y),new IComponent[]{(IComponent)child}));
        if (ret instanceof Boolean && !((Boolean)ret).booleanValue()) {
          onSelectComponent=null;
        }
 else {
          target.appendJavascript(""String_Node_Str"" + id + ""String_Node_Str"");
        }
        return;
      }
      if (child != onSelectComponent) {
        onSelectComponent=(IComponent)child;
      }
      if (action.equals(ACTION_RESIZE)) {
        if (width != -1 && height != -1) {
          if (child instanceof ISupportWebBounds) {
            Insets paddingAndBorder=((ISupportWebBounds)child).getPaddingAndBorder();
            if (paddingAndBorder != null) {
              height+=paddingAndBorder.bottom + paddingAndBorder.top;
              width+=paddingAndBorder.left + paddingAndBorder.right;
            }
          }
          if (child instanceof IScriptableProvider)           ((IRuntimeComponent)((IScriptableProvider)child).getScriptObject()).setSize(width,height);
          if (child instanceof IProviderStylePropertyChanges)           ((IProviderStylePropertyChanges)child).getStylePropertyChanges().setRendered();
        }
        callback.executeOnResize(getJSEvent(EventType.onDrop,0,new Point(x,y),new IComponent[]{(IComponent)child}));
      }
 else       if (action.equals(DraggableBehavior.ACTION_DRAG_START)) {
        Object onDragAllowed=callback.executeOnDrag(getJSEvent(EventType.onDrag,0,new Point(x,y),new IComponent[]{(IComponent)child}));
        if ((onDragAllowed instanceof Boolean && !((Boolean)onDragAllowed).booleanValue()) || (onDragAllowed instanceof Number && ((Number)onDragAllowed).intValue() == DRAGNDROP.NONE)) {
          onDragComponent=null;
        }
 else {
          onDragComponent=(IComponent)child;
        }
      }
 else {
        if (child == onDragComponent) {
          if (x != -1 && y != -1) {
            ((IRuntimeComponent)((IScriptableProvider)child).getScriptObject()).setLocation(x,y);
            if (child instanceof IProviderStylePropertyChanges) {
              if ((child).getParent() instanceof WrapperContainer) {
                WrapperContainer wrapper=(WrapperContainer)(child).getParent();
                wrapper.getStylePropertyChanges().getChanges();
                wrapper.getStylePropertyChanges().setRendered();
              }
              ((IProviderStylePropertyChanges)child).getStylePropertyChanges().setRendered();
            }
          }
          callback.executeOnDrop(getJSEvent(EventType.onDrop,0,new Point(x,y),new IComponent[]{(IComponent)child}));
        }
      }
    }
  }
  WebEventExecutor.generateResponse(target,getComponent().getPage());
  if (onSelectComponent != null && onSelectComponent.isVisible()) {
    target.prependJavascript(""String_Node_Str"");
  }
}",0.9909601759100904
143669,"public void componentHidden(ComponentEvent e){
}","public void componentHidden(ComponentEvent e){
  Map<JComponent,int[][]> selection=selectionHandler.getSelection(DesignPanel.this);
  if (selection.containsKey(e.getComponent())) {
    selection.remove(e.getComponent());
    DesignPanel.this.repaint();
  }
}",0.3137254901960784
143670,"private boolean addSelectedComponent(Component component,Rectangle bounds){
  Object clientdesign_handles=null;
  if (component instanceof IScriptableProvider && ((IScriptableProvider)component).getScriptObject() instanceof IRuntimeComponent) {
    IRuntimeComponent sbmc=(IRuntimeComponent)((IScriptableProvider)component).getScriptObject();
    if (sbmc.getName() == null)     return false;
    clientdesign_handles=sbmc.getClientProperty(CLIENTDESIGN.HANDLES);
    Object clientdesign_selectable=sbmc.getClientProperty(CLIENTDESIGN.SELECTABLE);
    if (clientdesign_selectable != null && !Utils.getAsBoolean(clientdesign_selectable))     return false;
  }
  Set<String> handles=null;
  if (clientdesign_handles instanceof Object[]) {
    handles=new HashSet<String>();
    for (int i=0; i < ((Object[])clientdesign_handles).length; i++) {
      String val=((Object[])clientdesign_handles)[i].toString();
      handles.add(Utils.stringReplace(val,""String_Node_Str"",""String_Node_Str""));
    }
  }
  component.setBounds(bounds);
  int[][] positions=new int[8][2];
  if (handles == null || handles.contains(""String_Node_Str"")) {
    positions[0][0]=bounds.x - 2;
    positions[0][1]=bounds.y - 2;
  }
 else {
    positions[0][0]=-1;
    positions[0][1]=-1;
  }
  if (handles == null || handles.contains(""String_Node_Str"")) {
    positions[1][0]=bounds.x - 2;
    positions[1][1]=bounds.y + bounds.height / 2 - 3;
  }
 else {
    positions[1][0]=-1;
    positions[1][1]=-1;
  }
  if (handles == null || handles.contains(""String_Node_Str"")) {
    positions[2][0]=bounds.x - 2;
    positions[2][1]=bounds.y + bounds.height - 3;
  }
 else {
    positions[2][0]=-1;
    positions[2][1]=-1;
  }
  if (handles == null || handles.contains(""String_Node_Str"")) {
    positions[3][0]=bounds.x + bounds.width / 2 - 3;
    positions[3][1]=bounds.y - 3;
  }
 else {
    positions[3][0]=-1;
    positions[3][1]=-1;
  }
  if (handles == null || handles.contains(""String_Node_Str"")) {
    positions[4][0]=bounds.x + bounds.width / 2 - 3;
    positions[4][1]=bounds.y + bounds.height - 3;
  }
 else {
    positions[4][0]=-1;
    positions[4][1]=-1;
  }
  if (handles == null || handles.contains(""String_Node_Str"")) {
    positions[5][0]=bounds.x + bounds.width - 3;
    positions[5][1]=bounds.y - 2;
  }
 else {
    positions[5][0]=-1;
    positions[5][1]=-1;
  }
  if (handles == null || handles.contains(""String_Node_Str"")) {
    positions[6][0]=bounds.x + bounds.width - 3;
    positions[6][1]=bounds.y + bounds.height / 2 - 3;
  }
 else {
    positions[6][0]=-1;
    positions[6][1]=-1;
  }
  if (handles == null || handles.contains(""String_Node_Str"")) {
    positions[7][0]=bounds.x + bounds.width - 3;
    positions[7][1]=bounds.y + bounds.height - 3;
  }
 else {
    positions[7][0]=-1;
    positions[7][1]=-1;
  }
  Map<JComponent,int[][]> selectedComponents=selectionHandler.getSelectionForChange(this);
  return selectedComponents.put((JComponent)component,positions) == null;
}","private boolean addSelectedComponent(Component component,Rectangle bounds){
  if (component != null && !component.isVisible())   return false;
  Object clientdesign_handles=null;
  if (component instanceof IScriptableProvider && ((IScriptableProvider)component).getScriptObject() instanceof IRuntimeComponent) {
    IRuntimeComponent sbmc=(IRuntimeComponent)((IScriptableProvider)component).getScriptObject();
    if (sbmc.getName() == null)     return false;
    clientdesign_handles=sbmc.getClientProperty(CLIENTDESIGN.HANDLES);
    Object clientdesign_selectable=sbmc.getClientProperty(CLIENTDESIGN.SELECTABLE);
    if (clientdesign_selectable != null && !Utils.getAsBoolean(clientdesign_selectable))     return false;
  }
  Set<String> handles=null;
  if (clientdesign_handles instanceof Object[]) {
    handles=new HashSet<String>();
    for (int i=0; i < ((Object[])clientdesign_handles).length; i++) {
      String val=((Object[])clientdesign_handles)[i].toString();
      handles.add(Utils.stringReplace(val,""String_Node_Str"",""String_Node_Str""));
    }
  }
  component.setBounds(bounds);
  int[][] positions=new int[8][2];
  if (handles == null || handles.contains(""String_Node_Str"")) {
    positions[0][0]=bounds.x - 2;
    positions[0][1]=bounds.y - 2;
  }
 else {
    positions[0][0]=-1;
    positions[0][1]=-1;
  }
  if (handles == null || handles.contains(""String_Node_Str"")) {
    positions[1][0]=bounds.x - 2;
    positions[1][1]=bounds.y + bounds.height / 2 - 3;
  }
 else {
    positions[1][0]=-1;
    positions[1][1]=-1;
  }
  if (handles == null || handles.contains(""String_Node_Str"")) {
    positions[2][0]=bounds.x - 2;
    positions[2][1]=bounds.y + bounds.height - 3;
  }
 else {
    positions[2][0]=-1;
    positions[2][1]=-1;
  }
  if (handles == null || handles.contains(""String_Node_Str"")) {
    positions[3][0]=bounds.x + bounds.width / 2 - 3;
    positions[3][1]=bounds.y - 3;
  }
 else {
    positions[3][0]=-1;
    positions[3][1]=-1;
  }
  if (handles == null || handles.contains(""String_Node_Str"")) {
    positions[4][0]=bounds.x + bounds.width / 2 - 3;
    positions[4][1]=bounds.y + bounds.height - 3;
  }
 else {
    positions[4][0]=-1;
    positions[4][1]=-1;
  }
  if (handles == null || handles.contains(""String_Node_Str"")) {
    positions[5][0]=bounds.x + bounds.width - 3;
    positions[5][1]=bounds.y - 2;
  }
 else {
    positions[5][0]=-1;
    positions[5][1]=-1;
  }
  if (handles == null || handles.contains(""String_Node_Str"")) {
    positions[6][0]=bounds.x + bounds.width - 3;
    positions[6][1]=bounds.y + bounds.height / 2 - 3;
  }
 else {
    positions[6][0]=-1;
    positions[6][1]=-1;
  }
  if (handles == null || handles.contains(""String_Node_Str"")) {
    positions[7][0]=bounds.x + bounds.width - 3;
    positions[7][1]=bounds.y + bounds.height - 3;
  }
 else {
    positions[7][0]=-1;
    positions[7][1]=-1;
  }
  Map<JComponent,int[][]> selectedComponents=selectionHandler.getSelectionForChange(this);
  return selectedComponents.put((JComponent)component,positions) == null;
}",0.988842631140716
143671,"private static void createFieldHTML(Field field,Form form,StringBuffer html,TextualCSS css,int startY,int endY,boolean enableAnchoring,IServiceProvider sp){
  boolean addWrapperDiv=enableAnchoring && WebAnchoringHelper.needsWrapperDivForAnchoring(field);
  if (addWrapperDiv) {
    String wrapperId=ComponentFactory.getWebID(form,field) + WRAPPER_SUFFIX;
    TextualStyle wrapperStyle=css.addStyle('#' + wrapperId);
    wrapperStyle.setProperty(""String_Node_Str"",""String_Node_Str"");
    html.append(""String_Node_Str"");
    html.append(getWicketIDParameter(form,field,""String_Node_Str"",WRAPPER_SUFFIX));
    html.append(getJavaScriptIDParameter(form,field,""String_Node_Str"",WRAPPER_SUFFIX));
    html.append(""String_Node_Str"");
  }
  TextualStyle styleObj=css.addStyle('#' + ComponentFactory.getWebID(form,field));
  Insets padding=(Insets)DEFAULT_FIELD_PADDING.clone();
  Insets border=(Insets)DEFAULT_FIELD_BORDER_SIZE.clone();
  if (field.getDisplayType() == Field.COMBOBOX || field.getDisplayType() == Field.LIST_BOX || field.getDisplayType() == Field.MULTI_SELECTION_LIST_BOX) {
    padding=DEFAULT_LABEL_PADDING;
  }
  BorderAndPadding ins=applyBaseComponentProperties(field,form,styleObj,padding,border,sp);
  Pair<IStyleSheet,IStyleRule> pairStyle=ComponentFactory.getCSSPairStyleForForm(sp,form);
  IStyleSheet ss=pairStyle != null ? pairStyle.getLeft() : null;
  String cssClass=""String_Node_Str"";
switch (field.getDisplayType()) {
case Field.PASSWORD:
{
      if (ins == null) {
        ins=new BorderAndPadding(DEFAULT_FIELD_BORDER_SIZE,DEFAULT_FIELD_PADDING);
      }
      html.append(""String_Node_Str"");
      html.append(getWicketIDParameter(form,field));
      html.append(getDataProviderIDParameter(field));
      html.append(getCSSClassParameter(""String_Node_Str""));
      html.append(""String_Node_Str"");
      if (field.getSelectOnEnter()) {
        html.append(""String_Node_Str"");
      }
      html.append(""String_Node_Str"");
    }
  break;
case Field.RTF_AREA:
{
  applyScrolling(styleObj,field);
  html.append(""String_Node_Str"");
  html.append(getWicketIDParameter(form,field));
  html.append(getCSSClassParameter(""String_Node_Str""));
  html.append(""String_Node_Str"");
}
break;
case Field.HTML_AREA:
if (!field.getEditable()) {
applyScrolling(styleObj,field);
html.append(""String_Node_Str"");
html.append(getWicketIDParameter(form,field));
html.append(getCSSClassParameter(""String_Node_Str""));
html.append(""String_Node_Str"");
boolean hasFontFamily=styleObj.containsKey(""String_Node_Str"");
boolean hasFontSize=styleObj.containsKey(""String_Node_Str"");
if (hasFontFamily || hasFontSize) {
for (String dfe : DEFAULT_FONT_ELEMENTS) {
  TextualStyle htmlAreaFont=css.addStyle('#' + ComponentFactory.getWebID(form,field) + ""String_Node_Str""+ dfe);
  if (hasFontFamily)   htmlAreaFont.setProperty(""String_Node_Str"",styleObj.getProperty(""String_Node_Str""));
  if (hasFontSize)   htmlAreaFont.setProperty(""String_Node_Str"",styleObj.getProperty(""String_Node_Str""));
}
}
break;
}
 else {
String editorId=""String_Node_Str"" + ComponentFactory.getWebID(form,field);
html.append(""String_Node_Str"");
html.append(getWicketIDParameter(form,field));
html.append(getCSSClassParameter(""String_Node_Str""));
html.append(""String_Node_Str"");
html.append(editorId);
html.append(""String_Node_Str"");
html.append(editorId);
html.append(""String_Node_Str"");
html.append(getWicketIDParameter(form,field,""String_Node_Str"",""String_Node_Str""));
html.append(""String_Node_Str"");
styleObj.setProperty(""String_Node_Str"",""String_Node_Str"");
if (styleObj.getProperty(""String_Node_Str"") == null && styleObj.getProperty(""String_Node_Str"") == null) {
styleObj.setProperty(""String_Node_Str"",""String_Node_Str"");
}
}
break;
case Field.TEXT_AREA:
{
if (ins == null) {
ins=new BorderAndPadding(DEFAULT_FIELD_BORDER_SIZE,DEFAULT_FIELD_PADDING);
}
applyScrolling(styleObj,field);
html.append(""String_Node_Str"");
html.append(getWicketIDParameter(form,field));
html.append(getDataProviderIDParameter(field));
html.append(getCSSClassParameter(""String_Node_Str""));
html.append(""String_Node_Str"");
}
break;
case Field.CHECKS:
case Field.RADIOS:
boolean isRadio=(field.getDisplayType() == Field.RADIOS);
String selector=(isRadio ? ""String_Node_Str"" : ""String_Node_Str"");
cssClass=(isRadio ? ""String_Node_Str"" : ""String_Node_Str"");
IValueList val=null;
ValueList valuelist=null;
if (field.getValuelistID() > 0 && sp != null) {
ComponentFormat fieldFormat=ComponentFormat.getComponentFormat(field.getFormat(),field.getDataProviderID(),sp.getFlattenedSolution().getDataproviderLookup(sp.getFoundSetManager(),form),sp);
valuelist=sp.getFlattenedSolution().getValueList(field.getValuelistID());
if (valuelist != null) val=ComponentFactory.getRealValueList(sp,valuelist,true,fieldFormat.dpType,fieldFormat.parsedFormat,field.getDataProviderID());
}
boolean addSingle=ComponentFactory.isSingleValue(valuelist,val);
if (field.getValuelistID() > 0 && !addSingle && !isRadio) cssClass=""String_Node_Str"";
if (ss != null) {
cssClass=""String_Node_Str"";
String lookUpValue=selector;
IStyleRule s=ss.getCSSRule(lookUpValue);
if (s.getAttributeCount() == 0) {
if ((field.getStyleClass() != null) && (field.getStyleClass().trim().length() > 0)) {
lookUpValue+='.' + field.getStyleClass().trim();
s=ss.getCSSRule(lookUpValue);
if (s.getAttributeCount() > 0) cssClass=selector;
}
}
 else {
cssClass=selector;
}
}
if ((field.getValuelistID() > 0 || isRadio) && !addSingle) {
applyScrolling(styleObj,field);
html.append(""String_Node_Str"");
html.append(getWicketIDParameter(form,field));
html.append(getDataProviderIDParameter(field));
html.append(getCSSClassParameter(cssClass));
html.append(""String_Node_Str"");
}
 else {
html.append(""String_Node_Str"");
html.append(getCSSClassParameter(cssClass));
html.append(getWicketIDParameter(form,field));
html.append(""String_Node_Str"");
html.append(""String_Node_Str"");
html.append(""String_Node_Str"" + (isRadio ? ""String_Node_Str"" : ""String_Node_Str"") + ""String_Node_Str"");
html.append(getWicketIDParameter(form,field,""String_Node_Str"",""String_Node_Str""));
html.append(getDataProviderIDParameter(field));
if (isRadio) {
html.append(""String_Node_Str"");
}
 else {
html.append(""String_Node_Str"");
}
html.append(""String_Node_Str"");
html.append(""String_Node_Str"" + (isRadio ? ""String_Node_Str"" : ""String_Node_Str"") + ""String_Node_Str"");
html.append(""String_Node_Str"");
html.append(getWicketIDParameter(form,field,""String_Node_Str"",""String_Node_Str""));
html.append(""String_Node_Str"");
html.append(""String_Node_Str"");
html.append(""String_Node_Str"");
}
break;
case Field.COMBOBOX:
{
ins=null;
html.append(""String_Node_Str"");
html.append(getWicketIDParameter(form,field));
html.append(getDataProviderIDParameter(field));
html.append(getCSSClassParameter(""String_Node_Str""));
html.append(""String_Node_Str"");
}
break;
case Field.MULTI_SELECTION_LIST_BOX:
case Field.LIST_BOX:
{
ins=null;
html.append(""String_Node_Str"");
if (field.getDisplayType() == Field.MULTI_SELECTION_LIST_BOX) {
html.append(""String_Node_Str"");
}
html.append(getWicketIDParameter(form,field));
html.append(getDataProviderIDParameter(field));
html.append(getCSSClassParameter(""String_Node_Str""));
html.append(""String_Node_Str"");
}
break;
case Field.CALENDAR:
case Field.SPINNER:
createCompositeFieldHTML(html,form,field,styleObj);
break;
case Field.IMAGE_MEDIA:
{
applyScrolling(styleObj,field);
html.append(""String_Node_Str"");
html.append(getWicketIDParameter(form,field));
html.append(getCSSClassParameter(""String_Node_Str""));
html.append('>');
TextualStyle inline2=new TextualStyle();
inline2.setProperty(""String_Node_Str"",""String_Node_Str"");
inline2.setProperty(""String_Node_Str"",""String_Node_Str"");
inline2.setProperty(""String_Node_Str"",""String_Node_Str"");
inline2.setProperty(""String_Node_Str"",""String_Node_Str"");
inline2.setProperty(""String_Node_Str"",""String_Node_Str"");
inline2.setProperty(""String_Node_Str"",""String_Node_Str"");
html.append(""String_Node_Str"");
html.append(inline2.toString());
html.append(""String_Node_Str"");
html.append(""String_Node_Str"");
inline2.setProperty(""String_Node_Str"",""String_Node_Str"");
html.append(inline2.toString());
html.append(""String_Node_Str"");
html.append(""String_Node_Str"");
inline2.setProperty(""String_Node_Str"",""String_Node_Str"");
html.append(inline2.toString());
html.append(""String_Node_Str"");
TextualStyle inline=new TextualStyle();
inline.setProperty(""String_Node_Str"",""String_Node_Str"");
inline.setProperty(""String_Node_Str"",""String_Node_Str"");
inline.setProperty(""String_Node_Str"",""String_Node_Str"");
if (field.getOnActionMethodID() < 1) {
inline.setProperty(""String_Node_Str"",""String_Node_Str"");
}
html.append(""String_Node_Str"");
html.append(inline.toString());
html.append(getWicketIDParameter(form,field));
html.append(getJavaScriptIDParameter(form,field));
html.append(""String_Node_Str"");
if (field.getName() != null) html.append(field.getName());
html.append(""String_Node_Str"");
html.append(""String_Node_Str"");
html.append(""String_Node_Str"");
html.append(""String_Node_Str"");
html.append(""String_Node_Str"");
html.append(""String_Node_Str"");
}
break;
case Field.TYPE_AHEAD:
{
String fieldPadding=""String_Node_Str"";
if (ins != null && ins.getPadding() != null) fieldPadding=ins.getPadding().top + ""String_Node_Str"" + ins.getPadding().right+ ""String_Node_Str""+ ins.getPadding().bottom+ ""String_Node_Str""+ ins.getPadding().left+ ""String_Node_Str"";
String fieldMargins=""String_Node_Str"";
if (field.getMargin() != null) fieldMargins=field.getMargin().top + ""String_Node_Str"" + field.getMargin().right+ ""String_Node_Str""+ field.getMargin().bottom+ ""String_Node_Str""+ field.getMargin().left+ ""String_Node_Str"";
TextualStyle styleAutcomplete=css.addStyle(""String_Node_Str"" + ComponentFactory.getWebID(form,field) + ""String_Node_Str"");
styleAutcomplete.setProperty(""String_Node_Str"",fieldPadding);
TextualStyle styleUl=css.addStyle(""String_Node_Str"" + ComponentFactory.getWebID(form,field) + ""String_Node_Str"");
styleUl.setProperty(""String_Node_Str"",fieldPadding);
styleUl.setProperty(""String_Node_Str"",fieldMargins);
TextualStyle styleUlLiSelected=css.addStyle(""String_Node_Str"" + ComponentFactory.getWebID(form,field) + ""String_Node_Str"");
styleUlLiSelected.setProperty(""String_Node_Str"",fieldPadding);
styleUlLiSelected.setProperty(""String_Node_Str"",fieldMargins);
}
default :
case Field.TEXT_FIELD:
{
if (ins == null) {
ins=new BorderAndPadding(DEFAULT_FIELD_BORDER_SIZE,DEFAULT_FIELD_PADDING);
}
html.append(""String_Node_Str"");
html.append(getWicketIDParameter(form,field));
html.append(getDataProviderIDParameter(field));
html.append(getCSSClassParameter(""String_Node_Str""));
html.append(""String_Node_Str"");
if (field.getSelectOnEnter()) {
html.append(""String_Node_Str"");
}
html.append(""String_Node_Str"");
}
break;
}
applyTextProperties(field,styleObj);
if (addWrapperDiv) {
html.append(""String_Node_Str"");
styleObj.setProperty(""String_Node_Str"",""String_Node_Str"");
styleObj.setProperty(""String_Node_Str"",""String_Node_Str"");
styleObj.setProperty(""String_Node_Str"",""String_Node_Str"");
}
 else {
applyLocationAndSize(field,styleObj,ins,startY,endY,form.getSize().width,enableAnchoring);
}
}","private static void createFieldHTML(Field field,Form form,StringBuffer html,TextualCSS css,int startY,int endY,boolean enableAnchoring,IServiceProvider sp){
  boolean addWrapperDiv=enableAnchoring && WebAnchoringHelper.needsWrapperDivForAnchoring(field);
  if (addWrapperDiv) {
    String wrapperId=ComponentFactory.getWebID(form,field) + WRAPPER_SUFFIX;
    TextualStyle wrapperStyle=css.addStyle('#' + wrapperId);
    wrapperStyle.setProperty(""String_Node_Str"",""String_Node_Str"");
    html.append(""String_Node_Str"");
    html.append(getWicketIDParameter(form,field,""String_Node_Str"",WRAPPER_SUFFIX));
    html.append(getJavaScriptIDParameter(form,field,""String_Node_Str"",WRAPPER_SUFFIX));
    html.append(""String_Node_Str"");
  }
  TextualStyle styleObj=css.addStyle('#' + ComponentFactory.getWebID(form,field));
  Insets padding=(Insets)DEFAULT_FIELD_PADDING.clone();
  Insets border=(Insets)DEFAULT_FIELD_BORDER_SIZE.clone();
  if (field.getDisplayType() == Field.COMBOBOX || field.getDisplayType() == Field.LIST_BOX || field.getDisplayType() == Field.MULTI_SELECTION_LIST_BOX) {
    padding=DEFAULT_LABEL_PADDING;
  }
  BorderAndPadding ins=applyBaseComponentProperties(field,form,styleObj,padding,border,sp);
  Pair<IStyleSheet,IStyleRule> pairStyle=ComponentFactory.getCSSPairStyleForForm(sp,form);
  IStyleSheet ss=pairStyle != null ? pairStyle.getLeft() : null;
  String cssClass=""String_Node_Str"";
switch (field.getDisplayType()) {
case Field.PASSWORD:
{
      if (ins == null) {
        ins=new BorderAndPadding(DEFAULT_FIELD_BORDER_SIZE,DEFAULT_FIELD_PADDING);
      }
      html.append(""String_Node_Str"");
      html.append(getWicketIDParameter(form,field));
      html.append(getDataProviderIDParameter(field));
      html.append(getCSSClassParameter(""String_Node_Str""));
      html.append(""String_Node_Str"");
      if (field.getSelectOnEnter()) {
        html.append(""String_Node_Str"");
      }
      html.append(""String_Node_Str"");
    }
  break;
case Field.RTF_AREA:
{
  applyScrolling(styleObj,field);
  html.append(""String_Node_Str"");
  html.append(getWicketIDParameter(form,field));
  html.append(getCSSClassParameter(""String_Node_Str""));
  html.append(""String_Node_Str"");
}
break;
case Field.HTML_AREA:
if (!field.getEditable()) {
applyScrolling(styleObj,field);
html.append(""String_Node_Str"");
html.append(getWicketIDParameter(form,field));
html.append(getCSSClassParameter(""String_Node_Str""));
html.append(""String_Node_Str"");
boolean hasFontFamily=styleObj.containsKey(""String_Node_Str"");
boolean hasFontSize=styleObj.containsKey(""String_Node_Str"");
if (hasFontFamily || hasFontSize) {
for (String dfe : DEFAULT_FONT_ELEMENTS) {
  TextualStyle htmlAreaFont=css.addStyle('#' + ComponentFactory.getWebID(form,field) + ""String_Node_Str""+ dfe);
  if (hasFontFamily)   htmlAreaFont.setProperty(""String_Node_Str"",styleObj.getProperty(""String_Node_Str""));
  if (hasFontSize)   htmlAreaFont.setProperty(""String_Node_Str"",styleObj.getProperty(""String_Node_Str""));
}
}
break;
}
 else {
String editorId=""String_Node_Str"" + ComponentFactory.getWebID(form,field);
html.append(""String_Node_Str"");
html.append(getWicketIDParameter(form,field));
html.append(getCSSClassParameter(""String_Node_Str""));
html.append(""String_Node_Str"");
html.append(editorId);
html.append(""String_Node_Str"");
html.append(editorId);
html.append(""String_Node_Str"");
html.append(getWicketIDParameter(form,field,""String_Node_Str"",""String_Node_Str""));
html.append(""String_Node_Str"");
styleObj.setProperty(""String_Node_Str"",""String_Node_Str"");
if (styleObj.getProperty(""String_Node_Str"") == null && styleObj.getProperty(""String_Node_Str"") == null) {
styleObj.setProperty(""String_Node_Str"",""String_Node_Str"");
}
}
break;
case Field.TEXT_AREA:
{
if (ins == null) {
ins=new BorderAndPadding(DEFAULT_FIELD_BORDER_SIZE,DEFAULT_FIELD_PADDING);
}
applyScrolling(styleObj,field);
html.append(""String_Node_Str"");
html.append(getWicketIDParameter(form,field));
html.append(getDataProviderIDParameter(field));
html.append(getCSSClassParameter(""String_Node_Str""));
html.append(""String_Node_Str"");
}
break;
case Field.CHECKS:
case Field.RADIOS:
boolean isRadio=(field.getDisplayType() == Field.RADIOS);
String selector=(isRadio ? ""String_Node_Str"" : ""String_Node_Str"");
cssClass=(isRadio ? ""String_Node_Str"" : ""String_Node_Str"");
IValueList val=null;
ValueList valuelist=null;
if (field.getValuelistID() > 0 && sp != null) {
ComponentFormat fieldFormat=ComponentFormat.getComponentFormat(field.getFormat(),field.getDataProviderID(),sp.getFlattenedSolution().getDataproviderLookup(sp.getFoundSetManager(),form),sp);
valuelist=sp.getFlattenedSolution().getValueList(field.getValuelistID());
if (valuelist != null) val=ComponentFactory.getRealValueList(sp,valuelist,true,fieldFormat.dpType,fieldFormat.parsedFormat,field.getDataProviderID());
}
boolean addSingle=ComponentFactory.isSingleValue(valuelist,val);
if (field.getValuelistID() > 0 && !addSingle && !isRadio) cssClass=""String_Node_Str"";
if (ss != null) {
cssClass=""String_Node_Str"";
String lookUpValue=selector;
IStyleRule s=ss.getCSSRule(lookUpValue);
if (s.getAttributeCount() == 0) {
if ((field.getStyleClass() != null) && (field.getStyleClass().trim().length() > 0)) {
lookUpValue+='.' + field.getStyleClass().trim();
s=ss.getCSSRule(lookUpValue);
if (s.getAttributeCount() > 0) cssClass=selector;
}
}
 else {
cssClass=selector;
}
}
if ((field.getValuelistID() > 0 || isRadio) && !addSingle) {
applyScrolling(styleObj,field);
html.append(""String_Node_Str"");
html.append(getWicketIDParameter(form,field));
html.append(getDataProviderIDParameter(field));
html.append(getCSSClassParameter(cssClass));
html.append(""String_Node_Str"");
}
 else {
html.append(""String_Node_Str"");
html.append(getCSSClassParameter(cssClass));
html.append(getWicketIDParameter(form,field));
html.append(""String_Node_Str"");
html.append(""String_Node_Str"");
html.append(""String_Node_Str"" + (isRadio ? ""String_Node_Str"" : ""String_Node_Str"") + ""String_Node_Str"");
html.append(getWicketIDParameter(form,field,""String_Node_Str"",""String_Node_Str""));
html.append(getDataProviderIDParameter(field));
if (isRadio) {
html.append(""String_Node_Str"");
}
 else {
html.append(""String_Node_Str"");
}
html.append(""String_Node_Str"");
html.append(""String_Node_Str"" + (isRadio ? ""String_Node_Str"" : ""String_Node_Str"") + ""String_Node_Str"");
html.append(""String_Node_Str"");
html.append(getWicketIDParameter(form,field,""String_Node_Str"",""String_Node_Str""));
html.append(""String_Node_Str"");
html.append(""String_Node_Str"");
html.append(""String_Node_Str"");
}
break;
case Field.COMBOBOX:
{
ins=null;
html.append(""String_Node_Str"");
html.append(getWicketIDParameter(form,field));
html.append(getDataProviderIDParameter(field));
html.append(getCSSClassParameter(""String_Node_Str""));
html.append(""String_Node_Str"");
}
break;
case Field.MULTI_SELECTION_LIST_BOX:
case Field.LIST_BOX:
{
ins=null;
html.append(""String_Node_Str"");
if (field.getDisplayType() == Field.MULTI_SELECTION_LIST_BOX) {
html.append(""String_Node_Str"");
}
html.append(getWicketIDParameter(form,field));
html.append(getDataProviderIDParameter(field));
html.append(getCSSClassParameter(""String_Node_Str""));
html.append(""String_Node_Str"");
}
break;
case Field.CALENDAR:
case Field.SPINNER:
createCompositeFieldHTML(html,form,field,styleObj);
break;
case Field.IMAGE_MEDIA:
{
applyScrolling(styleObj,field);
html.append(""String_Node_Str"");
html.append(getWicketIDParameter(form,field));
html.append(getCSSClassParameter(""String_Node_Str""));
html.append('>');
TextualStyle inline2=new TextualStyle();
inline2.setProperty(""String_Node_Str"",""String_Node_Str"");
inline2.setProperty(""String_Node_Str"",""String_Node_Str"");
inline2.setProperty(""String_Node_Str"",""String_Node_Str"");
inline2.setProperty(""String_Node_Str"",""String_Node_Str"");
inline2.setProperty(""String_Node_Str"",""String_Node_Str"");
inline2.setProperty(""String_Node_Str"",""String_Node_Str"");
html.append(""String_Node_Str"");
html.append(inline2.toString());
html.append(""String_Node_Str"");
html.append(""String_Node_Str"");
inline2.setProperty(""String_Node_Str"",""String_Node_Str"");
html.append(inline2.toString());
html.append(""String_Node_Str"");
html.append(""String_Node_Str"");
inline2.setProperty(""String_Node_Str"",""String_Node_Str"");
html.append(inline2.toString());
html.append(""String_Node_Str"");
TextualStyle inline=new TextualStyle();
inline.setProperty(""String_Node_Str"",""String_Node_Str"");
inline.setProperty(""String_Node_Str"",""String_Node_Str"");
inline.setProperty(""String_Node_Str"",""String_Node_Str"");
if (field.getOnActionMethodID() < 1) {
inline.setProperty(""String_Node_Str"",""String_Node_Str"");
}
html.append(""String_Node_Str"");
html.append(inline.toString());
html.append(getWicketIDParameter(form,field));
html.append(getJavaScriptIDParameter(form,field));
html.append(""String_Node_Str"");
if (field.getName() != null) html.append(field.getName());
html.append(""String_Node_Str"");
html.append(""String_Node_Str"");
html.append(""String_Node_Str"");
html.append(""String_Node_Str"");
html.append(""String_Node_Str"");
html.append(""String_Node_Str"");
}
break;
case Field.TYPE_AHEAD:
{
String fieldPadding=""String_Node_Str"";
if (ins != null && ins.getPadding() != null) fieldPadding=ins.getPadding().top + ""String_Node_Str"" + ins.getPadding().right+ ""String_Node_Str""+ ins.getPadding().bottom+ ""String_Node_Str""+ ins.getPadding().left+ ""String_Node_Str"";
String fieldMargins=""String_Node_Str"";
if (field.getMargin() != null) fieldMargins=field.getMargin().top + ""String_Node_Str"" + field.getMargin().right+ ""String_Node_Str""+ field.getMargin().bottom+ ""String_Node_Str""+ field.getMargin().left+ ""String_Node_Str"";
TextualStyle styleAutcomplete=css.addStyle(""String_Node_Str"" + ComponentFactory.getWebID(form,field) + ""String_Node_Str"");
styleAutcomplete.setProperty(""String_Node_Str"",fieldPadding);
TextualStyle styleUl=css.addStyle(""String_Node_Str"" + ComponentFactory.getWebID(form,field) + ""String_Node_Str"");
styleUl.setProperty(""String_Node_Str"",fieldPadding);
styleUl.setProperty(""String_Node_Str"",fieldMargins);
TextualStyle styleUlLiSelected=css.addStyle(""String_Node_Str"" + ComponentFactory.getWebID(form,field) + ""String_Node_Str"");
styleUlLiSelected.setProperty(""String_Node_Str"",fieldPadding);
styleUlLiSelected.setProperty(""String_Node_Str"",fieldMargins);
}
default :
case Field.TEXT_FIELD:
{
if (ins == null) {
ins=new BorderAndPadding(DEFAULT_FIELD_BORDER_SIZE,DEFAULT_FIELD_PADDING);
}
html.append(""String_Node_Str"");
html.append(getWicketIDParameter(form,field));
html.append(getDataProviderIDParameter(field));
html.append(getCSSClassParameter(""String_Node_Str""));
html.append(""String_Node_Str"");
if (field.getSelectOnEnter()) {
html.append(""String_Node_Str"");
}
html.append(""String_Node_Str"");
}
break;
}
if (field.getHorizontalAlignment() != -1) {
if (field.getDisplayType() == Field.SPINNER || field.getDisplayType() == Field.CALENDAR) {
TextualStyle childTextCSS=css.addStyle('#' + ComponentFactory.getWebID(form,field) + WebDataCompositeTextField.AUGMENTED_FIELD_ID);
applyTextProperties(field,childTextCSS);
}
 else {
applyTextProperties(field,styleObj);
}
}
if (addWrapperDiv) {
html.append(""String_Node_Str"");
styleObj.setProperty(""String_Node_Str"",""String_Node_Str"");
styleObj.setProperty(""String_Node_Str"",""String_Node_Str"");
styleObj.setProperty(""String_Node_Str"",""String_Node_Str"");
}
 else {
applyLocationAndSize(field,styleObj,ins,startY,endY,form.getSize().width,enableAnchoring);
}
}",0.9856799786533844
143672,"/** 
 * The type of display used by the field. Can be one of CALENDAR, CHECKS, COMBOBOX, HTML_AREA, IMAGE_MEDIA, PASSWORD, RADIOS, RTF_AREA, TEXT_AREA, TEXT_FIELD or TYPE_AHEAD.
 */
public int getDisplayType(){
  return getTypedProperty(StaticContentSpecLoader.PROPERTY_DISPLAYTYPE).intValue();
}","/** 
 * The type of display used by the field. Can be one of CALENDAR, CHECKS, COMBOBOX, HTML_AREA, IMAGE_MEDIA, PASSWORD, RADIOS, RTF_AREA, TEXT_AREA, TEXT_FIELD, TYPE_AHEAD, LIST_BOX, MULTI_SELECTION_LIST_BOX or SPINNER.
 */
public int getDisplayType(){
  return getTypedProperty(StaticContentSpecLoader.PROPERTY_DISPLAYTYPE).intValue();
}",0.9199372056514914
143673,"private void setUpComponent(Component comp,IRecordInternal record,Object compColor,Object fgColor,Object compFont,Object compBorder,int visibleRowIndex){
  if (tabIndex < 0) {
    TabIndexHelper.setUpTabIndexAttributeModifier(comp,tabIndex);
  }
 else {
    if (elementTabIndexes.size() > 0) {
      Integer idx=elementTabIndexes.get(cellToElement.get(comp));
      if (idx == null) {
        TabIndexHelper.setUpTabIndexAttributeModifier(comp,ISupportWebTabSeq.SKIP);
      }
 else {
        TabIndexHelper.setUpTabIndexAttributeModifier(comp,tabIndex + 1 + visibleRowIndex * elementTabIndexes.size() + idx.intValue());
      }
    }
 else {
      TabIndexHelper.setUpTabIndexAttributeModifier(comp,tabIndex + 1);
    }
  }
  if (compColor != null) {
    MarkupContainer cellContainer=comp.getParent();
    String compColorStr=compColor.toString();
    if (cellContainer instanceof CellContainer) {
      cellContainer.add(new StyleAppendingModifier(new Model<String>(""String_Node_Str"" + compColorStr)));
    }
  }
  WebCellBasedView.this.applyStyleOnComponent(comp,compColor,fgColor,compFont,compBorder);
  if (scriptable.isReadOnly() && validationEnabled && comp instanceof IScriptableProvider&& ((IScriptableProvider)comp).getScriptObject() instanceof HasRuntimeReadOnly) {
    ((HasRuntimeReadOnly)((IScriptableProvider)comp).getScriptObject()).setReadOnly(true);
  }
  List<Component> readOnlyComponents=((WebForm)fc.getFormUI()).getReadOnlyComponents();
  if (readOnlyComponents.indexOf(WebCellBasedView.this) != -1 && readOnlyComponents.indexOf(comp) == -1)   readOnlyComponents.add(comp);
  if (!isEnabled() && comp instanceof IComponent) {
    ((IComponent)comp).setComponentEnabled(false);
  }
  if (comp instanceof IDisplayRelatedData && record != null) {
    ((IDisplayRelatedData)comp).setRecord(record,true);
  }
  MarkupContainer parent=comp.getParent();
  if (parent instanceof CellContainer) {
    parent.setVisible(comp.isVisible());
  }
  if (compBorder != null) {
    IPersist elem=WebCellBasedView.this.cellToElement.get(comp);
    Object colId=WebCellBasedView.this.elementToColumnIdentifierComponent.get(elem);
    final int idx=WebCellBasedView.this.visibleColummIdentifierComponents.indexOf(colId);
    final int[] borderWidth=new int[]{0,0};
    Border cb=ComponentFactoryHelper.createBorder((String)compBorder);
    if (cb != null) {
      int defaultLeftPadding;
      int defaultRightPadding;
switch (elem.getTypeID()) {
case IRepository.FIELDS:
        defaultLeftPadding=TemplateGenerator.DEFAULT_FIELD_PADDING.left;
      defaultRightPadding=TemplateGenerator.DEFAULT_FIELD_PADDING.right;
    break;
case IRepository.GRAPHICALCOMPONENTS:
  defaultLeftPadding=TemplateGenerator.DEFAULT_LABEL_PADDING.left;
defaultRightPadding=TemplateGenerator.DEFAULT_LABEL_PADDING.right;
break;
default :
defaultLeftPadding=0;
defaultRightPadding=0;
}
Insets borderInsets=cb.getBorderInsets(null);
borderWidth[0]=borderInsets.left + defaultLeftPadding;
borderWidth[1]=borderInsets.right + defaultRightPadding;
}
comp.add(new StyleAppendingModifier(new Model<String>(){
@Override public String getObject(){
StringBuilder style=new StringBuilder();
if (idx > 0) {
style.append(""String_Node_Str"").append(borderWidth[0]).append(""String_Node_Str"");
}
if (idx < WebCellBasedView.this.visibleColummIdentifierComponents.size() - 1) {
style.append(""String_Node_Str"").append(borderWidth[1]).append(""String_Node_Str"");
}
return style.toString();
}
}
));
}
}","private void setUpComponent(Component comp,IRecordInternal record,Object compColor,Object fgColor,Object compFont,Object compBorder,int visibleRowIndex){
  if (tabIndex < 0) {
    TabIndexHelper.setUpTabIndexAttributeModifier(comp,tabIndex);
  }
 else {
    if (elementTabIndexes.size() > 0) {
      Integer idx=elementTabIndexes.get(cellToElement.get(comp));
      if (idx == null) {
        TabIndexHelper.setUpTabIndexAttributeModifier(comp,ISupportWebTabSeq.SKIP);
      }
 else {
        TabIndexHelper.setUpTabIndexAttributeModifier(comp,tabIndex + 1 + visibleRowIndex * elementTabIndexes.size() + idx.intValue());
      }
    }
 else {
      TabIndexHelper.setUpTabIndexAttributeModifier(comp,tabIndex + 1);
    }
  }
  if (compColor != null) {
    MarkupContainer cellContainer=comp.getParent();
    String compColorStr=compColor.toString();
    if (cellContainer instanceof CellContainer) {
      cellContainer.add(new StyleAppendingModifier(new Model<String>(""String_Node_Str"" + compColorStr)));
    }
  }
  WebCellBasedView.this.applyStyleOnComponent(comp,compColor,fgColor,compFont,compBorder);
  if (scriptable.isReadOnly() && validationEnabled && comp instanceof IScriptableProvider&& ((IScriptableProvider)comp).getScriptObject() instanceof HasRuntimeReadOnly) {
    ((HasRuntimeReadOnly)((IScriptableProvider)comp).getScriptObject()).setReadOnly(true);
  }
  List<Component> readOnlyComponents=((WebForm)fc.getFormUI()).getReadOnlyComponents();
  if (readOnlyComponents.indexOf(WebCellBasedView.this) != -1 && readOnlyComponents.indexOf(comp) == -1)   readOnlyComponents.add(comp);
  if (!isEnabled() && comp instanceof IComponent) {
    ((IComponent)comp).setComponentEnabled(false);
  }
  if (comp instanceof IDisplayRelatedData && record != null) {
    ((IDisplayRelatedData)comp).setRecord(record,true);
  }
  MarkupContainer parent=comp.getParent();
  if (parent instanceof CellContainer) {
    parent.setVisible(comp.isVisible());
  }
  if (compBorder != null) {
    IPersist elem=WebCellBasedView.this.cellToElement.get(comp);
    Object colId=WebCellBasedView.this.elementToColumnIdentifierComponent.get(elem);
    final int idx=WebCellBasedView.this.visibleColummIdentifierComponents.indexOf(colId);
    final int[] borderWidth=new int[]{0,0};
    Border cb=ComponentFactoryHelper.createBorder((String)compBorder);
    if (cb != null) {
      int defaultLeftPadding;
      int defaultRightPadding;
switch (elem.getTypeID()) {
case IRepository.FIELDS:
        Insets fieldMargin=null;
      if (comp instanceof IFieldComponent) {
        fieldMargin=((IFieldComponent)comp).getMargin();
      }
    defaultLeftPadding=fieldMargin != null ? fieldMargin.left : TemplateGenerator.DEFAULT_FIELD_PADDING.left;
  defaultRightPadding=fieldMargin != null ? fieldMargin.right : TemplateGenerator.DEFAULT_FIELD_PADDING.right;
break;
case IRepository.GRAPHICALCOMPONENTS:
defaultLeftPadding=TemplateGenerator.DEFAULT_LABEL_PADDING.left;
defaultRightPadding=TemplateGenerator.DEFAULT_LABEL_PADDING.right;
break;
default :
defaultLeftPadding=0;
defaultRightPadding=0;
}
Insets borderInsets=cb.getBorderInsets(null);
borderWidth[0]=borderInsets.left + defaultLeftPadding;
borderWidth[1]=borderInsets.right + defaultRightPadding;
}
comp.add(new StyleAppendingModifier(new Model<String>(){
@Override public String getObject(){
StringBuilder style=new StringBuilder();
if (idx > 0) {
style.append(""String_Node_Str"").append(borderWidth[0]).append(""String_Node_Str"");
}
if (idx < WebCellBasedView.this.visibleColummIdentifierComponents.size() - 1) {
style.append(""String_Node_Str"").append(borderWidth[1]).append(""String_Node_Str"");
}
return style.toString();
}
}
));
}
}",0.9674978985710284
143674,"public void giveMeFoundSet(IFoundSetListener l) throws ServoyException {
  IFoundSetInternal set=null;
  if (l.getDataSource() == null || inMemDataSources.get(l.getDataSource()) != null || l.wantSharedFoundSet()) {
    String wantedGlobalRelationName=l.getGlobalRelationNamedFoundset();
    if (wantedGlobalRelationName != null) {
      set=getGlobalRelatedFoundSet(wantedGlobalRelationName);
      if (set == null) {
        throw new RepositoryException(""String_Node_Str"" + wantedGlobalRelationName + ""String_Node_Str"");
      }
    }
 else {
      set=getSharedFoundSet(l.getDataSource(),l.getDefaultSortColumns());
    }
  }
 else {
    set=getSeparateFoundSet(l,l.getDefaultSortColumns());
  }
  l.newValue(new FoundSetEvent(set,FoundSetEvent.NEW_FOUNDSET,FoundSetEvent.CHANGE_UPDATE));
}","public void giveMeFoundSet(IFoundSetListener l) throws ServoyException {
  IFoundSetInternal set=null;
  if (l.getDataSource() == null || inMemDataSources.get(l.getDataSource()) != null || l.wantSharedFoundSet()) {
    String wantedGlobalRelationName=l.getGlobalRelationNamedFoundset();
    if (wantedGlobalRelationName != null) {
      set=getGlobalRelatedFoundSet(wantedGlobalRelationName);
      if (set == null || !Utils.stringSafeEquals(set.getDataSource(),l.getDataSource())) {
        throw new RepositoryException(""String_Node_Str"" + wantedGlobalRelationName + ""String_Node_Str"");
      }
    }
 else {
      set=getSharedFoundSet(l.getDataSource(),l.getDefaultSortColumns());
    }
  }
 else {
    set=getSeparateFoundSet(l,l.getDefaultSortColumns());
  }
  l.newValue(new FoundSetEvent(set,FoundSetEvent.NEW_FOUNDSET,FoundSetEvent.CHANGE_UPDATE));
}",0.9600484261501212
143675,"/** 
 * Get relations based on the table. When basedOnTable is null and isPrimaryTable is true only global relations are returned.
 * @param childs
 * @param basedOnTable
 * @param isPrimaryTable
 * @param sort
 * @param globals
 * @throws RepositoryException
 */
public static Iterator<Relation> getRelations(IRepository repository,List<IPersist> childs,ITable basedOnTable,boolean isPrimaryTable,boolean sort,boolean globals) throws RepositoryException {
  Iterator<Relation> retval=getRelations(childs,false);
  List<Relation> filtered=new ArrayList<Relation>();
  List<String> dataSources=getTableDataSources(repository,basedOnTable);
  if (dataSources == null)   dataSources=Collections.emptyList();
  while (retval.hasNext()) {
    Relation r=retval.next();
    if (isPrimaryTable) {
      if (r.isGlobal()) {
        if (globals)         filtered.add(r);
      }
 else       if (dataSources.contains(r.getPrimaryDataSource())) {
        filtered.add(r);
      }
    }
 else {
      if (dataSources.contains(r.getForeignDataSource())) {
        filtered.add(r);
      }
    }
  }
  if (sort) {
    Collections.sort(filtered,NameComparator.INSTANCE);
  }
  return filtered.iterator();
}","/** 
 * Get relations based on the table. When basedOnTable is null and isPrimaryTable is true only global relations are returned.
 * @param childs
 * @param basedOnTable
 * @param isPrimaryTable
 * @param sort
 * @param addGlobalsWhenPrimary
 * @throws RepositoryException
 */
public static Iterator<Relation> getRelations(IRepository repository,List<IPersist> childs,ITable basedOnTable,boolean isPrimaryTable,boolean sort,boolean addGlobalsWhenPrimary,boolean onlyGlobalsWhenForeign) throws RepositoryException {
  Iterator<Relation> retval=getRelations(childs,false);
  List<Relation> filtered=new ArrayList<Relation>();
  List<String> dataSources=getTableDataSources(repository,basedOnTable);
  if (dataSources == null)   dataSources=Collections.emptyList();
  while (retval.hasNext()) {
    Relation r=retval.next();
    if (isPrimaryTable) {
      if (r.isGlobal()) {
        if (addGlobalsWhenPrimary)         filtered.add(r);
      }
 else       if (dataSources.contains(r.getPrimaryDataSource())) {
        filtered.add(r);
      }
    }
 else {
      if (dataSources.contains(r.getForeignDataSource())) {
        if (!onlyGlobalsWhenForeign || r.isGlobal())         filtered.add(r);
      }
    }
  }
  if (sort) {
    Collections.sort(filtered,NameComparator.INSTANCE);
  }
  return filtered.iterator();
}",0.8452950558213717
143676,"/** 
 * @param propertyName
 * @param val
 */
private void setPropertyInternal(String propertyName,Object val){
  if (propertiesMap.containsKey(propertyName)) {
    if (!StaticContentSpecLoader.PROPERTY_NAME.getPropertyName().equals(propertyName)) {
      checkForChange(propertiesMap.get(propertyName),val);
    }
 else {
      checkForNameChange((String)propertiesMap.get(propertyName),(String)val);
    }
  }
 else {
    isChanged=true;
  }
  if (bufferPropertiesMap != null) {
    bufferPropertiesMap.put(propertyName,val);
  }
 else {
    if (!isOverrideElement()) {
      Element element=StaticContentSpecLoader.getContentSpec().getPropertyForObjectTypeByName(getTypeID(),propertyName);
      if (element != null && Utils.equalObjects(val,element.getDefaultClassValue())) {
        propertiesMap.remove(propertyName);
        return;
      }
    }
    propertiesMap.put(propertyName,val);
  }
}","/** 
 * @param propertyName
 * @param val
 */
private void setPropertyInternal(String propertyName,Object val){
  if (propertiesMap.containsKey(propertyName)) {
    if (!StaticContentSpecLoader.PROPERTY_NAME.getPropertyName().equals(propertyName)) {
      checkForChange(propertiesMap.get(propertyName),val);
    }
 else {
      checkForNameChange((String)propertiesMap.get(propertyName),(String)val);
    }
  }
 else {
    isChanged=true;
  }
  if (bufferPropertiesMap != null) {
    bufferPropertiesMap.put(propertyName,val);
  }
 else {
    if (!hasProperty(StaticContentSpecLoader.PROPERTY_EXTENDSID.getPropertyName()) || Utils.equalObjects(getExtendsID(),StaticContentSpecLoader.getContentSpec().getPropertyForObjectTypeByName(getTypeID(),StaticContentSpecLoader.PROPERTY_EXTENDSID.getPropertyName()).getDefaultClassValue())) {
      Element element=StaticContentSpecLoader.getContentSpec().getPropertyForObjectTypeByName(getTypeID(),propertyName);
      if (element != null && Utils.equalObjects(val,element.getDefaultClassValue())) {
        propertiesMap.remove(propertyName);
        return;
      }
    }
    propertiesMap.put(propertyName,val);
  }
}",0.7083939835031539
143677,"protected void instrumentAndReplaceBody(MarkupStream markupStream,ComponentTag openTag,CharSequence bodyText){
  boolean designMode=false;
  IFormUIInternal<?> formui=findParent(IFormUIInternal.class);
  if (formui != null && formui.isDesignMode()) {
    designMode=true;
  }
  replaceComponentTagBody(markupStream,openTag,instrumentBodyText(bodyText,halign,valign,false,margin,null,(char)getDisplayedMnemonic(),getMarkupId() + ""String_Node_Str"",getImageDisplayURL(this),size == null ? 0 : size.height,true,designMode ? null : cursor,false));
}","protected void instrumentAndReplaceBody(MarkupStream markupStream,ComponentTag openTag,CharSequence bodyText){
  boolean designMode=false;
  IFormUIInternal<?> formui=findParent(IFormUIInternal.class);
  if (formui != null && formui.isDesignMode()) {
    designMode=true;
  }
  Insets padding=null;
  boolean isEmptyBorder=false;
  if (border == null) {
    padding=margin;
  }
 else   if (border instanceof EmptyBorder) {
    isEmptyBorder=true;
    padding=border.getBorderInsets(null);
  }
 else   if (border instanceof CompoundBorder) {
    Border inside=((CompoundBorder)border).getInsideBorder();
    if (inside instanceof EmptyBorder) {
      isEmptyBorder=true;
      padding=inside.getBorderInsets(null);
    }
  }
 else   if (!(border instanceof TitledBorder) && !(border instanceof BevelBorder) && !(border instanceof EtchedBorder)) {
    padding=border.getBorderInsets(null);
  }
  replaceComponentTagBody(markupStream,openTag,instrumentBodyText(bodyText,halign,valign,false,padding,isEmptyBorder,null,(char)getDisplayedMnemonic(),getMarkupId() + ""String_Node_Str"",getImageDisplayURL(this),size == null ? 0 : size.height,true,designMode ? null : cursor,false));
}",0.6131471785922048
143678,"@SuppressWarnings(""String_Node_Str"") protected static String instrumentBodyText(CharSequence bodyText,int halign,int valign,boolean isHtml,Insets padding,String cssid,char mnemonic,String imgID,String imgURL,int height,boolean isButton,Cursor bodyCursor,boolean isAnchored){
  StringBuffer instrumentedBodyText=new StringBuffer();
  instrumentedBodyText.append(""String_Node_Str"" + (bodyCursor == null ? ""String_Node_Str"" : ""String_Node_Str"" + (bodyCursor.getType() == Cursor.HAND_CURSOR ? ""String_Node_Str"" : ""String_Node_Str"") + ""String_Node_Str"") + ""String_Node_Str"");
  int top=0;
  int bottom=0;
  int left=0;
  int right=0;
  if (padding != null) {
    top=padding.top;
    bottom=padding.bottom;
    left=padding.left;
    right=padding.right;
  }
  if (halign != ISupportTextSetup.RIGHT && valign != ISupportTextSetup.CENTER)   instrumentedBodyText.append(""String_Node_Str"" + left + ""String_Node_Str"");
  if (halign != ISupportTextSetup.LEFT && valign != ISupportTextSetup.CENTER)   instrumentedBodyText.append(""String_Node_Str"" + right + ""String_Node_Str"");
  if (halign == ISupportTextSetup.LEFT)   instrumentedBodyText.append(""String_Node_Str"");
 else   if (halign == ISupportTextSetup.RIGHT)   instrumentedBodyText.append(""String_Node_Str"");
 else   instrumentedBodyText.append(""String_Node_Str"");
  if (cssid == null) {
    if (valign == ISupportTextSetup.TOP)     instrumentedBodyText.append(""String_Node_Str"" + top + ""String_Node_Str"");
 else     if (valign == ISupportTextSetup.BOTTOM)     instrumentedBodyText.append(""String_Node_Str"" + bottom + ""String_Node_Str"");
  }
  boolean isOnlyImgDisplay=(Strings.isEmpty(bodyText) && imgURL != null) || isHTMLWithOnlyImg(bodyText);
  if (isHtml || (valign == ISupportTextSetup.CENTER && cssid != null))   instrumentedBodyText.append(""String_Node_Str"");
  if (isHtml && valign != ISupportTextSetup.CENTER && cssid == null)   instrumentedBodyText.append(""String_Node_Str"");
 else   if ((cssid != null && !isHTMLWithOnlyImg(bodyText)) || (!isOnlyImgDisplay && valign != ISupportTextSetup.CENTER))   instrumentedBodyText.append(""String_Node_Str"");
 else   if (!isButton && !isHtml && imgURL == null) {
    int innerHeight=height;
    if (padding != null)     innerHeight-=padding.top + padding.bottom;
    instrumentedBodyText.append(""String_Node_Str"" + innerHeight + ""String_Node_Str"");
  }
  if (isAnchored) {
    instrumentedBodyText.append(""String_Node_Str"");
  }
  instrumentedBodyText.append(""String_Node_Str"");
  if (cssid != null) {
    instrumentedBodyText.append(""String_Node_Str"");
    instrumentedBodyText.append(cssid);
    instrumentedBodyText.append(""String_Node_Str"");
  }
  instrumentedBodyText.append(""String_Node_Str"");
  if (!Strings.isEmpty(bodyText)) {
    CharSequence bodyTextValue=bodyText;
    if (mnemonic > 0 && !isHtml) {
      StringBuffer sbBodyText=new StringBuffer(bodyTextValue);
      int mnemonicIdx=sbBodyText.indexOf(Character.toString(mnemonic));
      if (mnemonicIdx != -1) {
        sbBodyText.insert(mnemonicIdx + 1,""String_Node_Str"");
        sbBodyText.insert(mnemonicIdx,""String_Node_Str"");
        bodyTextValue=sbBodyText.toString();
      }
    }
    if (imgURL != null) {
      StringBuffer sb=new StringBuffer(""String_Node_Str"").append(imgID).append(""String_Node_Str"").append(imgURL).append(""String_Node_Str"").append(bodyTextValue);
      bodyTextValue=sb.toString();
    }
    instrumentedBodyText.append(bodyTextValue);
  }
 else   if (imgURL != null) {
    instrumentedBodyText.append(""String_Node_Str"");
    instrumentedBodyText.append(imgID);
    instrumentedBodyText.append(""String_Node_Str"");
    instrumentedBodyText.append(imgURL);
    instrumentedBodyText.append(""String_Node_Str"");
  }
  instrumentedBodyText.append(""String_Node_Str"");
  if (isOnlyImgDisplay) {
    String sValign=(valign == ISupportTextSetup.TOP) ? ""String_Node_Str"" : (valign == ISupportTextSetup.BOTTOM) ? ""String_Node_Str"" : ""String_Node_Str"";
    instrumentedBodyText=(new StringBuffer(""String_Node_Str"").append(sValign).append(""String_Node_Str"").append(instrumentedBodyText).append(""String_Node_Str""));
  }
  return instrumentedBodyText.toString();
}","@SuppressWarnings(""String_Node_Str"") protected static String instrumentBodyText(CharSequence bodyText,int halign,int valign,boolean isHtml,Insets padding,boolean isEmptyBorder,String cssid,char mnemonic,String imgID,String imgURL,int height,boolean isButton,Cursor bodyCursor,boolean isAnchored){
  StringBuffer instrumentedBodyText=new StringBuffer();
  instrumentedBodyText.append(""String_Node_Str"" + (bodyCursor == null ? ""String_Node_Str"" : ""String_Node_Str"" + (bodyCursor.getType() == Cursor.HAND_CURSOR ? ""String_Node_Str"" : ""String_Node_Str"") + ""String_Node_Str"") + ""String_Node_Str"");
  int top=0;
  int bottom=0;
  int left=0;
  int right=0;
  if (padding != null && isEmptyBorder) {
    top=padding.top;
    bottom=padding.bottom;
    left=padding.left;
    right=padding.right;
  }
  if (halign != ISupportTextSetup.RIGHT && valign != ISupportTextSetup.CENTER)   instrumentedBodyText.append(""String_Node_Str"" + left + ""String_Node_Str"");
  if (halign != ISupportTextSetup.LEFT && valign != ISupportTextSetup.CENTER)   instrumentedBodyText.append(""String_Node_Str"" + right + ""String_Node_Str"");
  if (halign == ISupportTextSetup.LEFT)   instrumentedBodyText.append(""String_Node_Str"");
 else   if (halign == ISupportTextSetup.RIGHT)   instrumentedBodyText.append(""String_Node_Str"");
 else   instrumentedBodyText.append(""String_Node_Str"");
  if (cssid == null) {
    if (valign == ISupportTextSetup.TOP)     instrumentedBodyText.append(""String_Node_Str"" + top + ""String_Node_Str"");
 else     if (valign == ISupportTextSetup.BOTTOM)     instrumentedBodyText.append(""String_Node_Str"" + bottom + ""String_Node_Str"");
  }
  boolean isOnlyImgDisplay=(Strings.isEmpty(bodyText) && imgURL != null) || isHTMLWithOnlyImg(bodyText);
  if (isHtml || (valign == ISupportTextSetup.CENTER && cssid != null))   instrumentedBodyText.append(""String_Node_Str"");
  if (isHtml && valign != ISupportTextSetup.CENTER && cssid == null)   instrumentedBodyText.append(""String_Node_Str"");
 else   if ((cssid != null && !isHTMLWithOnlyImg(bodyText)) || (!isOnlyImgDisplay && valign != ISupportTextSetup.CENTER))   instrumentedBodyText.append(""String_Node_Str"");
 else   if (!isButton && !isHtml && imgURL == null) {
    int innerHeight=height;
    if (padding != null)     innerHeight-=padding.top + padding.bottom;
    instrumentedBodyText.append(""String_Node_Str"" + innerHeight + ""String_Node_Str"");
  }
  if (isAnchored) {
    instrumentedBodyText.append(""String_Node_Str"");
  }
  instrumentedBodyText.append(""String_Node_Str"");
  if (cssid != null) {
    instrumentedBodyText.append(""String_Node_Str"");
    instrumentedBodyText.append(cssid);
    instrumentedBodyText.append(""String_Node_Str"");
  }
  instrumentedBodyText.append(""String_Node_Str"");
  if (!Strings.isEmpty(bodyText)) {
    CharSequence bodyTextValue=bodyText;
    if (mnemonic > 0 && !isHtml) {
      StringBuffer sbBodyText=new StringBuffer(bodyTextValue);
      int mnemonicIdx=sbBodyText.indexOf(Character.toString(mnemonic));
      if (mnemonicIdx != -1) {
        sbBodyText.insert(mnemonicIdx + 1,""String_Node_Str"");
        sbBodyText.insert(mnemonicIdx,""String_Node_Str"");
        bodyTextValue=sbBodyText.toString();
      }
    }
    if (imgURL != null) {
      StringBuffer sb=new StringBuffer(""String_Node_Str"").append(imgID).append(""String_Node_Str"").append(imgURL).append(""String_Node_Str"").append(bodyTextValue);
      bodyTextValue=sb.toString();
    }
    instrumentedBodyText.append(bodyTextValue);
  }
 else   if (imgURL != null) {
    instrumentedBodyText.append(""String_Node_Str"");
    instrumentedBodyText.append(imgID);
    instrumentedBodyText.append(""String_Node_Str"");
    instrumentedBodyText.append(imgURL);
    instrumentedBodyText.append(""String_Node_Str"");
  }
  instrumentedBodyText.append(""String_Node_Str"");
  if (isOnlyImgDisplay) {
    String sValign=(valign == ISupportTextSetup.TOP) ? ""String_Node_Str"" : (valign == ISupportTextSetup.BOTTOM) ? ""String_Node_Str"" : ""String_Node_Str"";
    instrumentedBodyText=(new StringBuffer(""String_Node_Str"").append(sValign).append(""String_Node_Str"").append(instrumentedBodyText).append(""String_Node_Str""));
  }
  return instrumentedBodyText.toString();
}",0.995311936530833
143679,"@SuppressWarnings(""String_Node_Str"") protected void instrumentAndReplaceBody(MarkupStream markupStream,ComponentTag openTag,CharSequence bodyText){
  Insets m=null;
  if (border instanceof CompoundBorder) {
    Border inside=((CompoundBorder)border).getInsideBorder();
    if (inside instanceof EmptyBorder) {
      m=inside.getBorderInsets(null);
    }
  }
 else   if (!(border instanceof TitledBorder) && !(border instanceof BevelBorder) && !(border instanceof EtchedBorder)&& border != null) {
    m=border.getBorderInsets(null);
  }
  boolean hasHtml=hasHtml();
  String cssid=hasHtml ? getMarkupId() + ""String_Node_Str"" : null;
  boolean designMode=false;
  IFormUIInternal<?> formui=findParent(IFormUIInternal.class);
  if (formui != null && formui.isDesignMode()) {
    designMode=true;
  }
  replaceComponentTagBody(markupStream,openTag,WebBaseButton.instrumentBodyText(bodyText,halign,valign,hasHtml,m,cssid,(char)getDisplayedMnemonic(),getMarkupId() + ""String_Node_Str"",WebBaseButton.getImageDisplayURL(this),size.height,false,designMode ? null : cursor,false));
}","@SuppressWarnings(""String_Node_Str"") protected void instrumentAndReplaceBody(MarkupStream markupStream,ComponentTag openTag,CharSequence bodyText){
  Insets m=null;
  boolean isEmptyBorder=false;
  if (border instanceof EmptyBorder) {
    isEmptyBorder=true;
    m=border.getBorderInsets(null);
  }
 else   if (border instanceof CompoundBorder) {
    Border inside=((CompoundBorder)border).getInsideBorder();
    if (inside instanceof EmptyBorder) {
      isEmptyBorder=true;
      m=inside.getBorderInsets(null);
    }
  }
 else   if (!(border instanceof TitledBorder) && !(border instanceof BevelBorder) && !(border instanceof EtchedBorder)&& border != null) {
    m=border.getBorderInsets(null);
  }
  boolean hasHtml=hasHtml();
  String cssid=hasHtml ? getMarkupId() + ""String_Node_Str"" : null;
  boolean designMode=false;
  IFormUIInternal<?> formui=findParent(IFormUIInternal.class);
  if (formui != null && formui.isDesignMode()) {
    designMode=true;
  }
  replaceComponentTagBody(markupStream,openTag,WebBaseButton.instrumentBodyText(bodyText,halign,valign,hasHtml,m,isEmptyBorder,cssid,(char)getDisplayedMnemonic(),getMarkupId() + ""String_Node_Str"",WebBaseButton.getImageDisplayURL(this),size.height,false,designMode ? null : cursor,false));
}",0.922680412371134
143680,"protected void instrumentAndReplaceBody(MarkupStream markupStream,ComponentTag openTag,CharSequence bodyText){
  Insets padding=null;
  if (border == null) {
    padding=margin;
  }
 else   if (border instanceof CompoundBorder) {
    padding=((CompoundBorder)border).getInsideBorder().getBorderInsets(null);
  }
  boolean hasHtml=hasHtml();
  String cssid=getCSSId();
  boolean designMode=false;
  IFormUIInternal<?> formui=findParent(IFormUIInternal.class);
  if (formui != null && formui.isDesignMode()) {
    designMode=true;
  }
  replaceComponentTagBody(markupStream,openTag,WebBaseButton.instrumentBodyText(bodyText,halign,valign,hasHtml,padding,cssid,(char)getDisplayedMnemonic(),getMarkupId() + ""String_Node_Str"",WebBaseButton.getImageDisplayURL(this),size.height,false,designMode ? null : cursor,isAnchored()));
}","protected void instrumentAndReplaceBody(MarkupStream markupStream,ComponentTag openTag,CharSequence bodyText){
  Insets padding=null;
  boolean isEmptyBorder=false;
  if (border == null) {
    padding=margin;
  }
 else   if (border instanceof EmptyBorder) {
    isEmptyBorder=true;
    padding=border.getBorderInsets(null);
  }
 else   if (border instanceof CompoundBorder) {
    Border inside=((CompoundBorder)border).getInsideBorder();
    if (inside instanceof EmptyBorder) {
      isEmptyBorder=true;
      padding=inside.getBorderInsets(null);
    }
  }
 else   if (!(border instanceof TitledBorder) && !(border instanceof BevelBorder) && !(border instanceof EtchedBorder)) {
    padding=border.getBorderInsets(null);
  }
  boolean hasHtml=hasHtml();
  String cssid=getCSSId();
  boolean designMode=false;
  IFormUIInternal<?> formui=findParent(IFormUIInternal.class);
  if (formui != null && formui.isDesignMode()) {
    designMode=true;
  }
  replaceComponentTagBody(markupStream,openTag,WebBaseButton.instrumentBodyText(bodyText,halign,valign,hasHtml,padding,isEmptyBorder,cssid,(char)getDisplayedMnemonic(),getMarkupId() + ""String_Node_Str"",WebBaseButton.getImageDisplayURL(this),size.height,false,designMode ? null : cursor,isAnchored()));
}",0.7863000482392668
143681,"public void setWidth(int width){
  int borderWidth=0;
  Iterator<IPersist> it2=cellview.getAllObjects();
  while (it2.hasNext()) {
    IPersist element=it2.next();
    if (id.equals(ComponentFactory.getWebID(form,element))) {
      GraphicalComponent gc=(GraphicalComponent)view.labelsFor.get(((ISupportName)element).getName());
      if (gc != null) {
        TextualStyle styleObj=new TextualStyle();
        BorderAndPadding ins=TemplateGenerator.applyBaseComponentProperties(gc,view.fc.getForm(),styleObj,(Insets)TemplateGenerator.DEFAULT_LABEL_PADDING.clone(),null,application);
        if (ins.border != null)         borderWidth=ins.border.left + ins.border.right;
      }
    }
  }
  int headerPadding=TemplateGenerator.SORTABLE_HEADER_PADDING;
  if (view.labelsFor.size() == 0) {
    int extraWidth=TemplateGenerator.NO_LABELFOR_DEFAULT_BORDER_WIDTH;
    String headerBorder=view.getHeaderBorder();
    if (headerBorder != null) {
      Properties properties=new Properties();
      Insets borderIns=ComponentFactoryHelper.createBorderCSSProperties(headerBorder,properties);
      extraWidth=borderIns.left + borderIns.right;
      headerPadding=0;
    }
    borderWidth+=extraWidth;
  }
  final int clientWidth=width - headerPadding - borderWidth;
  this.width=clientWidth;
  StyleAppendingModifier styleModifier=new StyleAppendingModifier(new Model<String>(){
    @Override public String getObject(){
      return ""String_Node_Str"" + clientWidth + ""String_Node_Str"";
    }
  }
);
  add(styleModifier);
  headerColumnTable.add(styleModifier);
  labelResolver.setWidth(clientWidth - SortableCellViewHeader.ARROW_WIDTH);
  getStylePropertyChanges().setChanged();
}","public void setWidth(int width){
  int borderWidth=0;
  Iterator<IPersist> it2=cellview.getAllObjects();
  while (it2.hasNext()) {
    IPersist element=it2.next();
    if (id.equals(ComponentFactory.getWebID(form,element))) {
      GraphicalComponent gc=(GraphicalComponent)view.labelsFor.get(((ISupportName)element).getName());
      if (gc != null) {
        TextualStyle styleObj=new TextualStyle();
        BorderAndPadding ins=TemplateGenerator.applyBaseComponentProperties(gc,view.fc.getForm(),styleObj,(Insets)TemplateGenerator.DEFAULT_LABEL_PADDING.clone(),null,application);
        if (ins.border != null)         borderWidth=ins.border.left + ins.border.right;
      }
    }
  }
  int headerPadding=TemplateGenerator.SORTABLE_HEADER_PADDING;
  if (view.labelsFor.size() == 0) {
    int extraWidth=TemplateGenerator.NO_LABELFOR_DEFAULT_BORDER_WIDTH;
    String headerBorder=view.getHeaderBorder();
    if (headerBorder != null) {
      Properties properties=new Properties();
      Insets borderIns=ComponentFactoryHelper.createBorderCSSProperties(headerBorder,properties);
      extraWidth=borderIns.left + borderIns.right - TemplateGenerator.SORTABLE_HEADER_PADDING;
      headerPadding=0;
    }
    borderWidth+=extraWidth;
  }
  final int clientWidth=width - headerPadding - borderWidth;
  this.width=clientWidth;
  StyleAppendingModifier styleModifier=new StyleAppendingModifier(new Model<String>(){
    @Override public String getObject(){
      return ""String_Node_Str"" + clientWidth + ""String_Node_Str"";
    }
  }
);
  add(styleModifier);
  headerColumnTable.add(styleModifier);
  labelResolver.setWidth(clientWidth - SortableCellViewHeader.ARROW_WIDTH);
  getStylePropertyChanges().setChanged();
}",0.987012987012987
143682,"private void setUpComponent(Component comp,IRecordInternal record,Object compColor,Object fgColor,Object compFont,Object compBorder,int visibleRowIndex){
  if (tabIndex < 0) {
    TabIndexHelper.setUpTabIndexAttributeModifier(comp,tabIndex);
  }
 else {
    if (elementTabIndexes.size() > 0) {
      Integer idx=elementTabIndexes.get(cellToElement.get(comp));
      if (idx == null) {
        TabIndexHelper.setUpTabIndexAttributeModifier(comp,ISupportWebTabSeq.SKIP);
      }
 else {
        TabIndexHelper.setUpTabIndexAttributeModifier(comp,tabIndex + 1 + visibleRowIndex * elementTabIndexes.size() + idx.intValue());
      }
    }
 else {
      TabIndexHelper.setUpTabIndexAttributeModifier(comp,tabIndex + 1);
    }
  }
  if (compColor != null) {
    MarkupContainer cellContainer=comp.getParent();
    String compColorStr=compColor.toString();
    if (cellContainer instanceof CellContainer) {
      cellContainer.add(new StyleAppendingModifier(new Model<String>(""String_Node_Str"" + compColorStr)));
    }
  }
  WebCellBasedView.this.applyStyleOnComponent(comp,compColor,fgColor,compFont,compBorder);
  if (scriptable.isReadOnly() && validationEnabled && comp instanceof IScriptableProvider&& ((IScriptableProvider)comp).getScriptObject() instanceof IRuntimeComponentWithReadonlySupport) {
    ((IRuntimeComponentWithReadonlySupport)((IScriptableProvider)comp).getScriptObject()).setReadOnly(true);
  }
  List<Component> readOnlyComponents=((WebForm)fc.getFormUI()).getReadOnlyComponents();
  if (readOnlyComponents.indexOf(WebCellBasedView.this) != -1 && readOnlyComponents.indexOf(comp) == -1)   readOnlyComponents.add(comp);
  if (!isEnabled() && comp instanceof IComponent) {
    ((IComponent)comp).setComponentEnabled(false);
  }
  if (comp instanceof IDisplayRelatedData && record != null) {
    ((IDisplayRelatedData)comp).setRecord(record,true);
  }
  MarkupContainer parent=comp.getParent();
  if (parent instanceof CellContainer) {
    parent.setVisible(comp.isVisible());
  }
  if (compBorder != null) {
    Object elem=WebCellBasedView.this.cellToElement.get(comp);
    Object colId=WebCellBasedView.this.elementToColumnIdentifierComponent.get(elem);
    final int idx=WebCellBasedView.this.visibleColummIdentifierComponents.indexOf(colId);
    final int[] borderWidth=new int[]{0,0};
    Border cb=ComponentFactoryHelper.createBorder((String)compBorder);
    if (cb != null) {
      Insets borderInsets=cb.getBorderInsets(null);
      borderWidth[0]=borderInsets.left;
      borderWidth[1]=borderInsets.right;
    }
    comp.add(new StyleAppendingModifier(new Model<String>(){
      @Override public String getObject(){
        StringBuilder style=new StringBuilder();
        if (idx > 0) {
          style.append(""String_Node_Str"").append(borderWidth[0]).append(""String_Node_Str"");
        }
        if (idx < WebCellBasedView.this.visibleColummIdentifierComponents.size() - 1) {
          style.append(""String_Node_Str"").append(borderWidth[1]).append(""String_Node_Str"");
        }
        return style.toString();
      }
    }
));
  }
}","private void setUpComponent(Component comp,IRecordInternal record,Object compColor,Object fgColor,Object compFont,Object compBorder,int visibleRowIndex){
  if (tabIndex < 0) {
    TabIndexHelper.setUpTabIndexAttributeModifier(comp,tabIndex);
  }
 else {
    if (elementTabIndexes.size() > 0) {
      Integer idx=elementTabIndexes.get(cellToElement.get(comp));
      if (idx == null) {
        TabIndexHelper.setUpTabIndexAttributeModifier(comp,ISupportWebTabSeq.SKIP);
      }
 else {
        TabIndexHelper.setUpTabIndexAttributeModifier(comp,tabIndex + 1 + visibleRowIndex * elementTabIndexes.size() + idx.intValue());
      }
    }
 else {
      TabIndexHelper.setUpTabIndexAttributeModifier(comp,tabIndex + 1);
    }
  }
  if (compColor != null) {
    MarkupContainer cellContainer=comp.getParent();
    String compColorStr=compColor.toString();
    if (cellContainer instanceof CellContainer) {
      cellContainer.add(new StyleAppendingModifier(new Model<String>(""String_Node_Str"" + compColorStr)));
    }
  }
  WebCellBasedView.this.applyStyleOnComponent(comp,compColor,fgColor,compFont,compBorder);
  if (scriptable.isReadOnly() && validationEnabled && comp instanceof IScriptableProvider&& ((IScriptableProvider)comp).getScriptObject() instanceof IRuntimeComponentWithReadonlySupport) {
    ((IRuntimeComponentWithReadonlySupport)((IScriptableProvider)comp).getScriptObject()).setReadOnly(true);
  }
  List<Component> readOnlyComponents=((WebForm)fc.getFormUI()).getReadOnlyComponents();
  if (readOnlyComponents.indexOf(WebCellBasedView.this) != -1 && readOnlyComponents.indexOf(comp) == -1)   readOnlyComponents.add(comp);
  if (!isEnabled() && comp instanceof IComponent) {
    ((IComponent)comp).setComponentEnabled(false);
  }
  if (comp instanceof IDisplayRelatedData && record != null) {
    ((IDisplayRelatedData)comp).setRecord(record,true);
  }
  MarkupContainer parent=comp.getParent();
  if (parent instanceof CellContainer) {
    parent.setVisible(comp.isVisible());
  }
  if (compBorder != null) {
    IPersist elem=WebCellBasedView.this.cellToElement.get(comp);
    Object colId=WebCellBasedView.this.elementToColumnIdentifierComponent.get(elem);
    final int idx=WebCellBasedView.this.visibleColummIdentifierComponents.indexOf(colId);
    final int[] borderWidth=new int[]{0,0};
    Border cb=ComponentFactoryHelper.createBorder((String)compBorder);
    if (cb != null) {
      int defaultLeftPadding;
      int defaultRightPadding;
switch (elem.getTypeID()) {
case IRepository.FIELDS:
        defaultLeftPadding=TemplateGenerator.DEFAULT_FIELD_PADDING.left;
      defaultRightPadding=TemplateGenerator.DEFAULT_FIELD_PADDING.right;
    break;
case IRepository.GRAPHICALCOMPONENTS:
  defaultLeftPadding=TemplateGenerator.DEFAULT_LABEL_PADDING.left;
defaultRightPadding=TemplateGenerator.DEFAULT_LABEL_PADDING.right;
break;
default :
defaultLeftPadding=0;
defaultRightPadding=0;
}
Insets borderInsets=cb.getBorderInsets(null);
borderWidth[0]=borderInsets.left + defaultLeftPadding;
borderWidth[1]=borderInsets.right + defaultRightPadding;
}
comp.add(new StyleAppendingModifier(new Model<String>(){
@Override public String getObject(){
StringBuilder style=new StringBuilder();
if (idx > 0) {
style.append(""String_Node_Str"").append(borderWidth[0]).append(""String_Node_Str"");
}
if (idx < WebCellBasedView.this.visibleColummIdentifierComponents.size() - 1) {
style.append(""String_Node_Str"").append(borderWidth[1]).append(""String_Node_Str"");
}
return style.toString();
}
}
));
}
}",0.8844159804818542
143683,"/** 
 * @param newKey
 * @param string
 * @param string2
 */
private boolean createOrUpdateKey(String newKey,String referenceValue,String localeValue){
  boolean operationPerformed=false;
  if (Messages.invalidConnection || Messages.noConnection || referenceValue == null || ""String_Node_Str"".equals(referenceValue))   return operationPerformed;
  String serverName=application.getSolution().getI18nServerName();
  String tableName=application.getSolution().getI18nTableName();
  if (""String_Node_Str"".equals(serverName))   serverName=null;
  if (""String_Node_Str"".equals(tableName))   tableName=null;
  if (serverName == null || tableName == null) {
    Properties settings=application.getSettings();
    serverName=settings.getProperty(""String_Node_Str"");
    tableName=settings.getProperty(""String_Node_Str"");
    if (""String_Node_Str"".equals(serverName))     serverName=null;
    if (""String_Node_Str"".equals(tableName))     tableName=null;
    if (serverName == null || tableName == null) {
      throw new IllegalStateException(""String_Node_Str"");
    }
  }
  IDataServer dataServer=application.getDataServer();
  try {
    IServer i18nServer=(application.getRepository()).getServer(serverName);
    if (i18nServer == null)     throw new IllegalArgumentException(""String_Node_Str"" + serverName + ""String_Node_Str"");
    Table i18nTable=(Table)i18nServer.getTable(tableName);
    if (i18nTable == null)     throw new IllegalArgumentException(""String_Node_Str"" + tableName + ""String_Node_Str"");
    List<Column> list=i18nTable.getRowIdentColumns();
    if (list.size() > 1)     throw new IllegalArgumentException(""String_Node_Str"");
    if (list.size() == 0)     throw new IllegalArgumentException(""String_Node_Str"");
    String language=getSelectedLanguage();
    String filterColumn=null;
    String filterValue=null;
    if (application instanceof IMessagesCallback) {
      filterColumn=((IMessagesCallback)application).getI18NColumnNameFilter();
      Object v=((IMessagesCallback)application).getI18NColumnValueFilter();
      if (v instanceof String)       filterValue=(String)v;
    }
    Column pkColumn=list.get(0);
    QueryTable messagesTable=new QueryTable(i18nTable.getSQLName(),i18nTable.getCatalog(),i18nTable.getSchema());
    QueryColumn pkCol=new QueryColumn(messagesTable,pkColumn.getID(),pkColumn.getSQLName(),pkColumn.getType(),pkColumn.getLength());
    QueryColumn msgKey=new QueryColumn(messagesTable,-1,""String_Node_Str"",Types.VARCHAR,150);
    QueryColumn msgLang=new QueryColumn(messagesTable,-1,""String_Node_Str"",Types.VARCHAR,5);
    QueryColumn msgVal=new QueryColumn(messagesTable,-1,""String_Node_Str"",Types.VARCHAR,2000);
    QueryColumn filterCol=null;
    if (filterColumn != null && filterValue != null && filterColumn.length() > 0 && filterValue.length() > 0) {
      filterCol=new QueryColumn(messagesTable,-1,filterColumn,Types.VARCHAR,2000);
    }
    TablePlaceholderKey langPlaceholderKey=new TablePlaceholderKey(messagesTable,""String_Node_Str"");
    TablePlaceholderKey valuePlaceholderKey=new TablePlaceholderKey(messagesTable,""String_Node_Str"");
    QuerySelect selectSQL=new QuerySelect(messagesTable);
    selectSQL.addColumn(pkCol);
    selectSQL.addCondition(""String_Node_Str"",new CompareCondition(ISQLCondition.EQUALS_OPERATOR,msgKey,newKey));
    selectSQL.addCondition(""String_Node_Str"",new CompareCondition(ISQLCondition.EQUALS_OPERATOR,msgLang,new Placeholder(langPlaceholderKey)));
    if (filterCol != null) {
      selectSQL.addCondition(""String_Node_Str"",new CompareCondition(ISQLCondition.EQUALS_OPERATOR,filterCol,filterValue));
    }
    boolean logIdIsServoyManaged=false;
    ColumnInfo ci=pkColumn.getColumnInfo();
    if (ci != null) {
      int autoEnterType=ci.getAutoEnterType();
      int autoEnterSubType=ci.getAutoEnterSubType();
      logIdIsServoyManaged=(autoEnterType == ColumnInfo.SEQUENCE_AUTO_ENTER) && (autoEnterSubType != ColumnInfo.NO_SEQUENCE_SELECTED) && (autoEnterSubType != ColumnInfo.DATABASE_IDENTITY);
    }
    SQLStatement statement1=null;
    SQLStatement statement2=null;
    selectSQL.setPlaceholderValue(langPlaceholderKey,ValueFactory.createNullValue(Types.VARCHAR));
    IDataSet set=dataServer.performQuery(application.getClientID(),serverName,null,selectSQL,null,false,0,25,IDataServer.MESSAGES_QUERY);
    if (set.getRowCount() == 0) {
      QueryInsert insert=new QueryInsert(messagesTable);
      Object messageId=null;
      if (logIdIsServoyManaged)       messageId=dataServer.getNextSequence(serverName,i18nTable.getName(),pkColumn.getName(),-1);
      if (filterCol == null) {
        if (logIdIsServoyManaged) {
          insert.setColumnValues(new QueryColumn[]{pkCol,msgKey,msgLang,msgVal},new Object[]{messageId,newKey,ValueFactory.createNullValue(Types.VARCHAR),referenceValue});
        }
 else {
          insert.setColumnValues(new QueryColumn[]{msgKey,msgLang,msgVal},new Object[]{newKey,ValueFactory.createNullValue(Types.VARCHAR),referenceValue});
        }
      }
 else {
        if (logIdIsServoyManaged) {
          insert.setColumnValues(new QueryColumn[]{pkCol,msgKey,msgLang,msgVal,filterCol},new Object[]{messageId,newKey,ValueFactory.createNullValue(Types.VARCHAR),referenceValue,filterValue});
        }
 else {
          insert.setColumnValues(new QueryColumn[]{msgKey,msgLang,msgVal,filterCol},new Object[]{newKey,ValueFactory.createNullValue(Types.VARCHAR),referenceValue,filterValue});
        }
      }
      statement1=new SQLStatement(ISQLActionTypes.INSERT_ACTION,serverName,tableName,null,insert);
      if (localeValue != null && !""String_Node_Str"".equals(localeValue)) {
        insert=AbstractBaseQuery.deepClone(insert);
        if (logIdIsServoyManaged)         messageId=dataServer.getNextSequence(serverName,i18nTable.getName(),pkColumn.getName(),-1);
        if (filterCol == null) {
          if (logIdIsServoyManaged) {
            insert.setColumnValues(new QueryColumn[]{pkCol,msgKey,msgLang,msgVal},new Object[]{messageId,newKey,language,localeValue});
          }
 else {
            insert.setColumnValues(new QueryColumn[]{msgKey,msgLang,msgVal},new Object[]{newKey,language,localeValue});
          }
        }
 else {
          if (logIdIsServoyManaged) {
            insert.setColumnValues(new QueryColumn[]{pkCol,msgKey,msgLang,msgVal,filterCol},new Object[]{messageId,newKey,language,localeValue,filterValue});
          }
 else {
            insert.setColumnValues(new QueryColumn[]{msgKey,msgLang,msgVal,filterCol},new Object[]{newKey,language,localeValue,filterValue});
          }
        }
        statement2=new SQLStatement(ISQLActionTypes.INSERT_ACTION,serverName,tableName,null,insert);
      }
    }
 else {
      QueryUpdate update=new QueryUpdate(messagesTable);
      update.addValue(msgVal,new Placeholder(valuePlaceholderKey));
      update.addCondition(new CompareCondition(ISQLCondition.EQUALS_OPERATOR,msgKey,newKey));
      update.addCondition(new CompareCondition(ISQLCondition.EQUALS_OPERATOR,msgLang,new Placeholder(langPlaceholderKey)));
      if (filterCol != null) {
        update.addCondition(new CompareCondition(ISQLCondition.EQUALS_OPERATOR,filterCol,filterValue));
      }
      update.setPlaceholderValue(langPlaceholderKey,ValueFactory.createNullValue(Types.VARCHAR));
      update.setPlaceholderValue(valuePlaceholderKey,referenceValue);
      statement1=new SQLStatement(ISQLActionTypes.UPDATE_ACTION,serverName,tableName,null,update);
      if (localeValue != null && !""String_Node_Str"".equals(localeValue)) {
        selectSQL.setPlaceholderValue(langPlaceholderKey,language);
        set=dataServer.performQuery(application.getClientID(),serverName,null,selectSQL,null,false,0,25,IDataServer.MESSAGES_QUERY);
        if (set.getRowCount() == 0) {
          QueryInsert insert=new QueryInsert(messagesTable);
          Object messageId=null;
          if (logIdIsServoyManaged)           dataServer.getNextSequence(serverName,i18nTable.getName(),pkColumn.getName(),-1);
          if (filterCol == null) {
            if (logIdIsServoyManaged) {
              insert.setColumnValues(new QueryColumn[]{pkCol,msgKey,msgLang,msgVal},new Object[]{messageId,newKey,language,localeValue});
            }
 else {
              insert.setColumnValues(new QueryColumn[]{msgKey,msgLang,msgVal},new Object[]{newKey,language,localeValue});
            }
          }
 else {
            if (logIdIsServoyManaged) {
              insert.setColumnValues(new QueryColumn[]{pkCol,msgKey,msgLang,msgVal,filterCol},new Object[]{messageId,newKey,language,localeValue,filterValue});
            }
 else {
              insert.setColumnValues(new QueryColumn[]{msgKey,msgLang,msgVal,filterCol},new Object[]{newKey,language,localeValue,filterValue});
            }
          }
          statement2=new SQLStatement(ISQLActionTypes.INSERT_ACTION,serverName,tableName,null,insert);
        }
 else {
          update=AbstractBaseQuery.deepClone(update);
          update.setPlaceholderValue(langPlaceholderKey,language);
          update.setPlaceholderValue(valuePlaceholderKey,localeValue);
          statement2=new SQLStatement(ISQLActionTypes.UPDATE_ACTION,serverName,tableName,null,update);
        }
      }
 else {
        QueryDelete delete=new QueryDelete(messagesTable);
        delete.addCondition(new CompareCondition(ISQLCondition.EQUALS_OPERATOR,msgKey,newKey));
        delete.addCondition(new CompareCondition(ISQLCondition.EQUALS_OPERATOR,msgLang,language));
        if (filterCol != null) {
          delete.addCondition(new CompareCondition(ISQLCondition.EQUALS_OPERATOR,filterCol,filterValue));
        }
        statement2=new SQLStatement(ISQLActionTypes.DELETE_ACTION,serverName,tableName,null,delete);
      }
    }
    dataServer.performUpdates(application.getClientID(),statement2 == null ? new ISQLStatement[]{statement1} : new ISQLStatement[]{statement1,statement2});
    operationPerformed=true;
  }
 catch (  Exception e) {
    Debug.error(""String_Node_Str"");
    Debug.error(e);
  }
  return operationPerformed;
}","/** 
 * @param newKey
 * @param string
 * @param string2
 */
private boolean createOrUpdateKey(String newKey,String referenceValue,String localeValue){
  boolean operationPerformed=false;
  if (Messages.invalidConnection || Messages.noConnection || referenceValue == null || ""String_Node_Str"".equals(referenceValue))   return operationPerformed;
  String serverName=application.getSolution().getI18nServerName();
  String tableName=application.getSolution().getI18nTableName();
  if (""String_Node_Str"".equals(serverName))   serverName=null;
  if (""String_Node_Str"".equals(tableName))   tableName=null;
  if (serverName == null || tableName == null) {
    Properties settings=application.getSettings();
    serverName=settings.getProperty(""String_Node_Str"");
    tableName=settings.getProperty(""String_Node_Str"");
    if (""String_Node_Str"".equals(serverName))     serverName=null;
    if (""String_Node_Str"".equals(tableName))     tableName=null;
    if (serverName == null || tableName == null) {
      throw new IllegalStateException(""String_Node_Str"");
    }
  }
  IDataServer dataServer=application.getDataServer();
  try {
    IServer i18nServer=(application.getRepository()).getServer(serverName);
    if (i18nServer == null)     throw new IllegalArgumentException(""String_Node_Str"" + serverName + ""String_Node_Str"");
    Table i18nTable=(Table)i18nServer.getTable(tableName);
    if (i18nTable == null)     throw new IllegalArgumentException(""String_Node_Str"" + tableName + ""String_Node_Str"");
    List<Column> list=i18nTable.getRowIdentColumns();
    if (list.size() > 1)     throw new IllegalArgumentException(""String_Node_Str"");
    if (list.size() == 0)     throw new IllegalArgumentException(""String_Node_Str"");
    String language=getSelectedLanguage();
    String filterColumn=null;
    String filterValue=null;
    if (application instanceof IMessagesCallback) {
      filterColumn=((IMessagesCallback)application).getI18NColumnNameFilter();
      Object v=((IMessagesCallback)application).getI18NColumnValueFilter();
      if (v instanceof String)       filterValue=(String)v;
    }
    Column pkColumn=list.get(0);
    QueryTable messagesTable=new QueryTable(i18nTable.getSQLName(),i18nTable.getCatalog(),i18nTable.getSchema());
    QueryColumn pkCol=new QueryColumn(messagesTable,pkColumn.getID(),pkColumn.getSQLName(),pkColumn.getType(),pkColumn.getLength());
    QueryColumn msgKey=new QueryColumn(messagesTable,-1,""String_Node_Str"",Types.VARCHAR,150);
    QueryColumn msgLang=new QueryColumn(messagesTable,-1,""String_Node_Str"",Types.VARCHAR,5);
    QueryColumn msgVal=new QueryColumn(messagesTable,-1,""String_Node_Str"",Types.VARCHAR,2000);
    QueryColumn filterCol=null;
    if (filterColumn != null && filterValue != null && filterColumn.length() > 0 && filterValue.length() > 0) {
      filterCol=new QueryColumn(messagesTable,-1,filterColumn,Types.VARCHAR,2000);
    }
    TablePlaceholderKey langPlaceholderKey=new TablePlaceholderKey(messagesTable,""String_Node_Str"");
    TablePlaceholderKey valuePlaceholderKey=new TablePlaceholderKey(messagesTable,""String_Node_Str"");
    QuerySelect selectSQL=new QuerySelect(messagesTable);
    selectSQL.addColumn(pkCol);
    selectSQL.addCondition(""String_Node_Str"",new CompareCondition(ISQLCondition.EQUALS_OPERATOR,msgKey,newKey));
    selectSQL.addCondition(""String_Node_Str"",new CompareCondition(ISQLCondition.EQUALS_OPERATOR,msgLang,new Placeholder(langPlaceholderKey)));
    if (filterCol != null) {
      selectSQL.addCondition(""String_Node_Str"",new CompareCondition(ISQLCondition.EQUALS_OPERATOR,filterCol,filterValue));
    }
    boolean logIdIsServoyManaged=false;
    ColumnInfo ci=pkColumn.getColumnInfo();
    if (ci != null) {
      int autoEnterType=ci.getAutoEnterType();
      int autoEnterSubType=ci.getAutoEnterSubType();
      logIdIsServoyManaged=(autoEnterType == ColumnInfo.SEQUENCE_AUTO_ENTER) && (autoEnterSubType != ColumnInfo.NO_SEQUENCE_SELECTED) && (autoEnterSubType != ColumnInfo.DATABASE_IDENTITY);
    }
    SQLStatement statement1=null;
    SQLStatement statement2=null;
    selectSQL.setPlaceholderValue(langPlaceholderKey,ValueFactory.createNullValue(Types.VARCHAR));
    IDataSet set=dataServer.performQuery(application.getClientID(),serverName,null,selectSQL,null,false,0,25,IDataServer.MESSAGES_QUERY);
    if (set.getRowCount() == 0) {
      QueryInsert insert=new QueryInsert(messagesTable);
      Object messageId=null;
      if (logIdIsServoyManaged)       messageId=dataServer.getNextSequence(serverName,i18nTable.getName(),pkColumn.getName(),-1);
      if (filterCol == null) {
        if (logIdIsServoyManaged) {
          insert.setColumnValues(new QueryColumn[]{pkCol,msgKey,msgLang,msgVal},new Object[]{messageId,newKey,ValueFactory.createNullValue(Types.VARCHAR),referenceValue});
        }
 else {
          insert.setColumnValues(new QueryColumn[]{msgKey,msgLang,msgVal},new Object[]{newKey,ValueFactory.createNullValue(Types.VARCHAR),referenceValue});
        }
      }
 else {
        if (logIdIsServoyManaged) {
          insert.setColumnValues(new QueryColumn[]{pkCol,msgKey,msgLang,msgVal,filterCol},new Object[]{messageId,newKey,ValueFactory.createNullValue(Types.VARCHAR),referenceValue,filterValue});
        }
 else {
          insert.setColumnValues(new QueryColumn[]{msgKey,msgLang,msgVal,filterCol},new Object[]{newKey,ValueFactory.createNullValue(Types.VARCHAR),referenceValue,filterValue});
        }
      }
      statement1=new SQLStatement(ISQLActionTypes.INSERT_ACTION,serverName,tableName,null,insert);
      if (localeValue != null && !""String_Node_Str"".equals(localeValue)) {
        insert=AbstractBaseQuery.deepClone(insert);
        if (logIdIsServoyManaged)         messageId=dataServer.getNextSequence(serverName,i18nTable.getName(),pkColumn.getName(),-1);
        if (filterCol == null) {
          if (logIdIsServoyManaged) {
            insert.setColumnValues(new QueryColumn[]{pkCol,msgKey,msgLang,msgVal},new Object[]{messageId,newKey,language,localeValue});
          }
 else {
            insert.setColumnValues(new QueryColumn[]{msgKey,msgLang,msgVal},new Object[]{newKey,language,localeValue});
          }
        }
 else {
          if (logIdIsServoyManaged) {
            insert.setColumnValues(new QueryColumn[]{pkCol,msgKey,msgLang,msgVal,filterCol},new Object[]{messageId,newKey,language,localeValue,filterValue});
          }
 else {
            insert.setColumnValues(new QueryColumn[]{msgKey,msgLang,msgVal,filterCol},new Object[]{newKey,language,localeValue,filterValue});
          }
        }
        statement2=new SQLStatement(ISQLActionTypes.INSERT_ACTION,serverName,tableName,null,insert);
      }
    }
 else {
      QueryUpdate update=new QueryUpdate(messagesTable);
      update.addValue(msgVal,new Placeholder(valuePlaceholderKey));
      update.addCondition(new CompareCondition(ISQLCondition.EQUALS_OPERATOR,msgKey,newKey));
      update.addCondition(new CompareCondition(ISQLCondition.EQUALS_OPERATOR,msgLang,new Placeholder(langPlaceholderKey)));
      if (filterCol != null) {
        update.addCondition(new CompareCondition(ISQLCondition.EQUALS_OPERATOR,filterCol,filterValue));
      }
      update.setPlaceholderValue(langPlaceholderKey,ValueFactory.createNullValue(Types.VARCHAR));
      update.setPlaceholderValue(valuePlaceholderKey,referenceValue);
      statement1=new SQLStatement(ISQLActionTypes.UPDATE_ACTION,serverName,tableName,null,update);
      if (localeValue != null && !""String_Node_Str"".equals(localeValue)) {
        selectSQL.setPlaceholderValue(langPlaceholderKey,language);
        set=dataServer.performQuery(application.getClientID(),serverName,null,selectSQL,null,false,0,25,IDataServer.MESSAGES_QUERY);
        if (set.getRowCount() == 0) {
          QueryInsert insert=new QueryInsert(messagesTable);
          Object messageId=null;
          if (logIdIsServoyManaged)           messageId=dataServer.getNextSequence(serverName,i18nTable.getName(),pkColumn.getName(),-1);
          if (filterCol == null) {
            if (logIdIsServoyManaged) {
              insert.setColumnValues(new QueryColumn[]{pkCol,msgKey,msgLang,msgVal},new Object[]{messageId,newKey,language,localeValue});
            }
 else {
              insert.setColumnValues(new QueryColumn[]{msgKey,msgLang,msgVal},new Object[]{newKey,language,localeValue});
            }
          }
 else {
            if (logIdIsServoyManaged) {
              insert.setColumnValues(new QueryColumn[]{pkCol,msgKey,msgLang,msgVal,filterCol},new Object[]{messageId,newKey,language,localeValue,filterValue});
            }
 else {
              insert.setColumnValues(new QueryColumn[]{msgKey,msgLang,msgVal,filterCol},new Object[]{newKey,language,localeValue,filterValue});
            }
          }
          statement2=new SQLStatement(ISQLActionTypes.INSERT_ACTION,serverName,tableName,null,insert);
        }
 else {
          update=AbstractBaseQuery.deepClone(update);
          update.setPlaceholderValue(langPlaceholderKey,language);
          update.setPlaceholderValue(valuePlaceholderKey,localeValue);
          statement2=new SQLStatement(ISQLActionTypes.UPDATE_ACTION,serverName,tableName,null,update);
        }
      }
 else {
        QueryDelete delete=new QueryDelete(messagesTable);
        delete.addCondition(new CompareCondition(ISQLCondition.EQUALS_OPERATOR,msgKey,newKey));
        delete.addCondition(new CompareCondition(ISQLCondition.EQUALS_OPERATOR,msgLang,language));
        if (filterCol != null) {
          delete.addCondition(new CompareCondition(ISQLCondition.EQUALS_OPERATOR,filterCol,filterValue));
        }
        statement2=new SQLStatement(ISQLActionTypes.DELETE_ACTION,serverName,tableName,null,delete);
      }
    }
    dataServer.performUpdates(application.getClientID(),statement2 == null ? new ISQLStatement[]{statement1} : new ISQLStatement[]{statement1,statement2});
    operationPerformed=true;
  }
 catch (  Exception e) {
    Debug.error(""String_Node_Str"");
    Debug.error(e);
  }
  return operationPerformed;
}",0.999500948198423
143684,"public void setWidth(int width){
  int borderWidth=0;
  Iterator<IPersist> it2=cellview.getAllObjects();
  while (it2.hasNext()) {
    IPersist element=it2.next();
    if (id.equals(ComponentFactory.getWebID(form,element))) {
      GraphicalComponent gc=(GraphicalComponent)view.labelsFor.get(((ISupportName)element).getName());
      if (gc != null) {
        TextualStyle styleObj=new TextualStyle();
        BorderAndPadding ins=TemplateGenerator.applyBaseComponentProperties(gc,view.fc.getForm(),styleObj,(Insets)TemplateGenerator.DEFAULT_LABEL_PADDING.clone(),null,application);
        if (ins.border != null)         borderWidth=ins.border.left + ins.border.right;
      }
    }
  }
  if (view.labelsFor.size() == 0)   borderWidth+=TemplateGenerator.NO_LABELFOR_DEFAULT_BORDER_WIDTH;
  final int clientWidth=width - TemplateGenerator.SORTABLE_HEADER_PADDING - borderWidth;
  this.width=clientWidth;
  StyleAppendingModifier styleModifier=new StyleAppendingModifier(new Model<String>(){
    @Override public String getObject(){
      return ""String_Node_Str"" + clientWidth + ""String_Node_Str"";
    }
  }
);
  add(styleModifier);
  headerColumnTable.add(styleModifier);
  labelResolver.setWidth(clientWidth - SortableCellViewHeader.ARROW_WIDTH);
  getStylePropertyChanges().setChanged();
}","public void setWidth(int width){
  int borderWidth=0;
  Iterator<IPersist> it2=cellview.getAllObjects();
  while (it2.hasNext()) {
    IPersist element=it2.next();
    if (id.equals(ComponentFactory.getWebID(form,element))) {
      GraphicalComponent gc=(GraphicalComponent)view.labelsFor.get(((ISupportName)element).getName());
      if (gc != null) {
        TextualStyle styleObj=new TextualStyle();
        BorderAndPadding ins=TemplateGenerator.applyBaseComponentProperties(gc,view.fc.getForm(),styleObj,(Insets)TemplateGenerator.DEFAULT_LABEL_PADDING.clone(),null,application);
        if (ins.border != null)         borderWidth=ins.border.left + ins.border.right;
      }
    }
  }
  int headerPadding=TemplateGenerator.SORTABLE_HEADER_PADDING;
  if (view.labelsFor.size() == 0) {
    int extraWidth=TemplateGenerator.NO_LABELFOR_DEFAULT_BORDER_WIDTH;
    String headerBorder=view.getHeaderBorder();
    if (headerBorder != null) {
      Properties properties=new Properties();
      Insets borderIns=ComponentFactoryHelper.createBorderCSSProperties(headerBorder,properties);
      extraWidth=borderIns.left + borderIns.right;
      headerPadding=0;
    }
    borderWidth+=extraWidth;
  }
  final int clientWidth=width - headerPadding - borderWidth;
  this.width=clientWidth;
  StyleAppendingModifier styleModifier=new StyleAppendingModifier(new Model<String>(){
    @Override public String getObject(){
      return ""String_Node_Str"" + clientWidth + ""String_Node_Str"";
    }
  }
);
  add(styleModifier);
  headerColumnTable.add(styleModifier);
  labelResolver.setWidth(clientWidth - SortableCellViewHeader.ARROW_WIDTH);
  getStylePropertyChanges().setChanged();
}",0.8293998651382333
143685,"/** 
 * Construct.
 * @param id The component's id
 * @param group The group of headers the new one will be added to
 * @param cellview
 */
public SortableCellViewHeader(Form form,final WebCellBasedView view,final String id,final SortableCellViewHeaderGroup group,AbstractBase cellview,boolean useAJAX,IApplication application){
  super(id);
  this.id=id;
  this.cellview=cellview;
  this.view=view;
  this.application=application;
  this.form=form;
  headerColumnTable=new WebMarkupContainer(""String_Node_Str"");
  headerColumnTable.add(labelResolver=new LabelResolverLink(""String_Node_Str"",useAJAX,group,id));
  labelResolver.add(new AttributeModifier(""String_Node_Str"",true,group));
  ChangesRecorder changesRecorder=new ChangesRecorder();
  changesRecorder.setBgcolor(view.getHeaderBgColor());
  changesRecorder.setBorder(view.getHeaderBorder());
  final Properties changes=changesRecorder.getChanges();
  if (changes.size() > 0)   applyStyleChanges(headerColumnTable,changes);
  ChangesRecorder textChangesRecorder=new ChangesRecorder();
  textChangesRecorder.setFgcolor(view.getHeaderFgColor());
  textChangesRecorder.setFont(view.getHeaderFont());
  final Properties textChanges=textChangesRecorder.getChanges();
  if (textChanges.size() > 0)   applyStyleChanges(labelResolver,textChanges);
  boolean blockResize=false;
  Iterator<IPersist> iter=cellview.getAllObjects();
  while (iter.hasNext()) {
    IPersist element=iter.next();
    if (element instanceof ISupportAnchors) {
      if (id.equals(ComponentFactory.getWebID(form,element))) {
        int anchors=((ISupportAnchors)element).getAnchors();
        if (((anchors & IAnchorConstants.EAST) == 0) || ((anchors & IAnchorConstants.WEST) == 0)) {
          blockResize=true;
        }
        isUnmovable=((anchors & IAnchorConstants.NORTH) == IAnchorConstants.NORTH) && ((anchors & IAnchorConstants.SOUTH) == IAnchorConstants.SOUTH);
        break;
      }
    }
  }
  if (((!(cellview instanceof Portal) || ((Portal)cellview).getReorderable()) && useAJAX) && !isUnmovable()) {
    DraggableBehavior dragMoveBehavior=new DraggableBehavior(){
      private int startX;
      @Override protected void onDragEnd(      String componentId,      int x,      int y,      int m,      AjaxRequestTarget ajaxRequestTarget){
        view.moveColumn(SortableCellViewHeader.this,x - startX,ajaxRequestTarget);
        labelResolver.setDropped(true);
      }
      @Override protected boolean onDragStart(      String componentId,      int x,      int y,      int m,      AjaxRequestTarget ajaxRequestTarget){
        startX=x;
        return true;
      }
      @Override protected void onDrop(      String componentId,      String targetid,      int x,      int y,      int m,      AjaxRequestTarget ajaxRequestTarget){
      }
      @Override protected void onDropHover(      String componentId,      String targeid,      int m,      AjaxRequestTarget ajaxRequestTarget){
      }
    }
;
    dragMoveBehavior.setRenderOnHead(false);
    dragMoveBehavior.setYConstraint(true);
    dragMoveBehavior.setUseProxy(true);
    dragMoveBehavior.setResizeProxyFrame(true);
    headerColumnTable.add(dragMoveBehavior);
  }
  if (cellview instanceof Portal && !((Portal)cellview).getSortable()) {
    labelResolver.setSortable(false);
    resizeBar=new WebMarkupContainer(""String_Node_Str"");
  }
 else {
    resizeBar=new Image(""String_Node_Str"",view.R_ARROW_OFF);
  }
  if (!blockResize && (!(cellview instanceof Portal) || ((Portal)cellview).getResizeble()) && useAJAX) {
    DraggableBehavior dragResizeBehavior=new DraggableBehavior(){
      private int startX;
      @Override protected void onDragEnd(      String componentId,      int x,      int y,      int m,      AjaxRequestTarget ajaxRequestTarget){
        view.resizeColumn(SortableCellViewHeader.this,x - startX);
      }
      @Override protected boolean onDragStart(      String componentId,      int x,      int y,      int m,      AjaxRequestTarget ajaxRequestTarget){
        startX=x;
        return true;
      }
      @Override protected void onDrop(      String componentId,      String targetid,      int x,      int y,      int m,      AjaxRequestTarget ajaxRequestTarget){
      }
      @Override protected void onDropHover(      String componentId,      String targeid,      int m,      AjaxRequestTarget ajaxRequestTarget){
      }
    }
;
    dragResizeBehavior.setRenderOnHead(false);
    dragResizeBehavior.setYConstraint(true);
    resizeBar.add(dragResizeBehavior);
    resizeBar.add(new AttributeModifier(""String_Node_Str"",true,new Model<String>(""String_Node_Str"")));
  }
 else {
    resizeBar.add(new AttributeModifier(""String_Node_Str"",true,new Model<String>(""String_Node_Str"")));
  }
  headerColumnTable.add(resizeBar);
  add(headerColumnTable);
  try {
    Iterator<IPersist> it2=cellview.getAllObjects(PositionComparator.XY_PERSIST_COMPARATOR);
    int height=-1;
    while (it2.hasNext()) {
      IPersist element=it2.next();
      if (id.equals(ComponentFactory.getWebID(form,element))) {
        final GraphicalComponent gc=(GraphicalComponent)view.labelsFor.get(((ISupportName)element).getName());
        if (gc != null && height < 0) {
          height=gc.getSize().height;
        }
        if (gc != null && gc.getImageMediaID() > 0) {
          final int media_id=gc.getImageMediaID();
          final Media media=application.getFlattenedSolution().getMedia(media_id);
          if (media != null) {
            final int headerHeight=height;
            add(new StyleAppendingModifier(new Model<String>(){
              @Override public String getObject(){
                ResourceReference iconReference=new ResourceReference(media.getName()){
                  private static final long serialVersionUID=1L;
                  @Override protected Resource newResource(){
                    BufferedDynamicImageResource imgRes=new BufferedDynamicImageResource();
                    MediaResource tempIcon=new MediaResource(media.getMediaData(),gc.getMediaOptions());
                    (tempIcon).checkResize(new Dimension(width,headerHeight));
                    ImageIcon icon=new ImageIcon(tempIcon.resized);
                    imgRes.setImage(ImageLoader.imageToBufferedImage((icon).getImage()));
                    return imgRes;
                  }
                }
;
                return ""String_Node_Str"" + urlFor(iconReference) + ""String_Node_Str""+ media_id+ ""String_Node_Str"";
              }
            }
));
          }
        }
 else         if (gc != null && gc.getToolTipText() != null) {
          tooltip=application.getI18NMessageIfPrefixed(gc.getToolTipText());
          add(TooltipAttributeModifier.INSTANCE);
        }
        if (gc != null) {
          int style_valign=-1;
          Pair<IStyleSheet,IStyleRule> styleInfo=ComponentFactory.getStyleForBasicComponent(application,gc,form);
          if (styleInfo != null) {
            IStyleSheet ss=styleInfo.getLeft();
            IStyleRule s=styleInfo.getRight();
            if (ss != null && s != null) {
              style_valign=ss.getVAlign(s);
            }
          }
          final int styleValign=style_valign;
          add(new StyleAppendingModifier(new Model<String>(){
            private static final long serialVersionUID=1L;
            @Override public String getObject(){
              int valign=ISupportTextSetup.CENTER;
              if (gc.getVerticalAlignment() >= 0) {
                valign=gc.getVerticalAlignment();
              }
 else               if (styleValign >= 0) {
                valign=styleValign;
              }
              return ""String_Node_Str"" + TemplateGenerator.getVerticalAlignValue(valign) + ""String_Node_Str"";
            }
          }
));
        }
        if (gc != null && gc.getOnRightClickMethodID() > 0) {
          executor=new WebEventExecutor(this,useAJAX);
          executor.setRightClickCmd(String.valueOf(gc.getOnRightClickMethodID()),null);
          labelName=gc.getName();
        }
      }
    }
  }
 catch (  Exception ex) {
    Debug.error(ex);
  }
  Boolean dir=group.get(id);
  if (dir != null && form.getOnSortCmdMethodID() >= 0) {
    setResizeImage(dir ? view.R_ARROW_DOWN : view.R_ARROW_UP);
  }
}","/** 
 * Construct.
 * @param id The component's id
 * @param group The group of headers the new one will be added to
 * @param cellview
 */
public SortableCellViewHeader(Form form,final WebCellBasedView view,final String id,final SortableCellViewHeaderGroup group,AbstractBase cellview,boolean useAJAX,IApplication application){
  super(id);
  this.id=id;
  this.cellview=cellview;
  this.view=view;
  this.application=application;
  this.form=form;
  headerColumnTable=new WebMarkupContainer(""String_Node_Str"");
  headerColumnTable.add(labelResolver=new LabelResolverLink(""String_Node_Str"",useAJAX,group,id));
  labelResolver.add(new AttributeModifier(""String_Node_Str"",true,group));
  ChangesRecorder changesRecorder=new ChangesRecorder();
  changesRecorder.setBgcolor(view.getHeaderBgColor());
  changesRecorder.setBorder(view.getHeaderBorder());
  if (view.getHeaderBorder() != null) {
    add(new StyleAppendingModifier(new Model<String>(""String_Node_Str"")));
  }
  final Properties changes=changesRecorder.getChanges();
  if (changes.size() > 0)   applyStyleChanges(headerColumnTable,changes);
  ChangesRecorder textChangesRecorder=new ChangesRecorder();
  textChangesRecorder.setFgcolor(view.getHeaderFgColor());
  textChangesRecorder.setFont(view.getHeaderFont());
  final Properties textChanges=textChangesRecorder.getChanges();
  if (textChanges.size() > 0)   applyStyleChanges(labelResolver,textChanges);
  boolean blockResize=false;
  Iterator<IPersist> iter=cellview.getAllObjects();
  while (iter.hasNext()) {
    IPersist element=iter.next();
    if (element instanceof ISupportAnchors) {
      if (id.equals(ComponentFactory.getWebID(form,element))) {
        int anchors=((ISupportAnchors)element).getAnchors();
        if (((anchors & IAnchorConstants.EAST) == 0) || ((anchors & IAnchorConstants.WEST) == 0)) {
          blockResize=true;
        }
        isUnmovable=((anchors & IAnchorConstants.NORTH) == IAnchorConstants.NORTH) && ((anchors & IAnchorConstants.SOUTH) == IAnchorConstants.SOUTH);
        break;
      }
    }
  }
  if (((!(cellview instanceof Portal) || ((Portal)cellview).getReorderable()) && useAJAX) && !isUnmovable()) {
    DraggableBehavior dragMoveBehavior=new DraggableBehavior(){
      private int startX;
      @Override protected void onDragEnd(      String componentId,      int x,      int y,      int m,      AjaxRequestTarget ajaxRequestTarget){
        view.moveColumn(SortableCellViewHeader.this,x - startX,ajaxRequestTarget);
        labelResolver.setDropped(true);
      }
      @Override protected boolean onDragStart(      String componentId,      int x,      int y,      int m,      AjaxRequestTarget ajaxRequestTarget){
        startX=x;
        return true;
      }
      @Override protected void onDrop(      String componentId,      String targetid,      int x,      int y,      int m,      AjaxRequestTarget ajaxRequestTarget){
      }
      @Override protected void onDropHover(      String componentId,      String targeid,      int m,      AjaxRequestTarget ajaxRequestTarget){
      }
    }
;
    dragMoveBehavior.setRenderOnHead(false);
    dragMoveBehavior.setYConstraint(true);
    dragMoveBehavior.setUseProxy(true);
    dragMoveBehavior.setResizeProxyFrame(true);
    headerColumnTable.add(dragMoveBehavior);
  }
  if (cellview instanceof Portal && !((Portal)cellview).getSortable()) {
    labelResolver.setSortable(false);
    resizeBar=new WebMarkupContainer(""String_Node_Str"");
  }
 else {
    resizeBar=new Image(""String_Node_Str"",view.R_ARROW_OFF);
  }
  if (!blockResize && (!(cellview instanceof Portal) || ((Portal)cellview).getResizeble()) && useAJAX) {
    DraggableBehavior dragResizeBehavior=new DraggableBehavior(){
      private int startX;
      @Override protected void onDragEnd(      String componentId,      int x,      int y,      int m,      AjaxRequestTarget ajaxRequestTarget){
        view.resizeColumn(SortableCellViewHeader.this,x - startX);
      }
      @Override protected boolean onDragStart(      String componentId,      int x,      int y,      int m,      AjaxRequestTarget ajaxRequestTarget){
        startX=x;
        return true;
      }
      @Override protected void onDrop(      String componentId,      String targetid,      int x,      int y,      int m,      AjaxRequestTarget ajaxRequestTarget){
      }
      @Override protected void onDropHover(      String componentId,      String targeid,      int m,      AjaxRequestTarget ajaxRequestTarget){
      }
    }
;
    dragResizeBehavior.setRenderOnHead(false);
    dragResizeBehavior.setYConstraint(true);
    resizeBar.add(dragResizeBehavior);
    resizeBar.add(new AttributeModifier(""String_Node_Str"",true,new Model<String>(""String_Node_Str"")));
  }
 else {
    resizeBar.add(new AttributeModifier(""String_Node_Str"",true,new Model<String>(""String_Node_Str"")));
  }
  headerColumnTable.add(resizeBar);
  add(headerColumnTable);
  try {
    Iterator<IPersist> it2=cellview.getAllObjects(PositionComparator.XY_PERSIST_COMPARATOR);
    int height=-1;
    while (it2.hasNext()) {
      IPersist element=it2.next();
      if (id.equals(ComponentFactory.getWebID(form,element))) {
        final GraphicalComponent gc=(GraphicalComponent)view.labelsFor.get(((ISupportName)element).getName());
        if (gc != null && height < 0) {
          height=gc.getSize().height;
        }
        if (gc != null && gc.getImageMediaID() > 0) {
          final int media_id=gc.getImageMediaID();
          final Media media=application.getFlattenedSolution().getMedia(media_id);
          if (media != null) {
            final int headerHeight=height;
            add(new StyleAppendingModifier(new Model<String>(){
              @Override public String getObject(){
                ResourceReference iconReference=new ResourceReference(media.getName()){
                  private static final long serialVersionUID=1L;
                  @Override protected Resource newResource(){
                    BufferedDynamicImageResource imgRes=new BufferedDynamicImageResource();
                    MediaResource tempIcon=new MediaResource(media.getMediaData(),gc.getMediaOptions());
                    (tempIcon).checkResize(new Dimension(width,headerHeight));
                    ImageIcon icon=new ImageIcon(tempIcon.resized);
                    imgRes.setImage(ImageLoader.imageToBufferedImage((icon).getImage()));
                    return imgRes;
                  }
                }
;
                return ""String_Node_Str"" + urlFor(iconReference) + ""String_Node_Str""+ media_id+ ""String_Node_Str"";
              }
            }
));
          }
        }
 else         if (gc != null && gc.getToolTipText() != null) {
          tooltip=application.getI18NMessageIfPrefixed(gc.getToolTipText());
          add(TooltipAttributeModifier.INSTANCE);
        }
        if (gc != null) {
          int style_valign=-1;
          Pair<IStyleSheet,IStyleRule> styleInfo=ComponentFactory.getStyleForBasicComponent(application,gc,form);
          if (styleInfo != null) {
            IStyleSheet ss=styleInfo.getLeft();
            IStyleRule s=styleInfo.getRight();
            if (ss != null && s != null) {
              style_valign=ss.getVAlign(s);
            }
          }
          final int styleValign=style_valign;
          add(new StyleAppendingModifier(new Model<String>(){
            private static final long serialVersionUID=1L;
            @Override public String getObject(){
              int valign=ISupportTextSetup.CENTER;
              if (gc.getVerticalAlignment() >= 0) {
                valign=gc.getVerticalAlignment();
              }
 else               if (styleValign >= 0) {
                valign=styleValign;
              }
              return ""String_Node_Str"" + TemplateGenerator.getVerticalAlignValue(valign) + ""String_Node_Str"";
            }
          }
));
        }
        if (gc != null && gc.getOnRightClickMethodID() > 0) {
          executor=new WebEventExecutor(this,useAJAX);
          executor.setRightClickCmd(String.valueOf(gc.getOnRightClickMethodID()),null);
          labelName=gc.getName();
        }
      }
    }
  }
 catch (  Exception ex) {
    Debug.error(ex);
  }
  Boolean dir=group.get(id);
  if (dir != null && form.getOnSortCmdMethodID() >= 0) {
    setResizeImage(dir ? view.R_ARROW_DOWN : view.R_ARROW_UP);
  }
}",0.9928057553956836
143686,"private void setUpComponent(Component comp,IRecordInternal record,Object compColor,Object fgColor,Object compFont,Object compBorder,int visibleRowIndex){
  if (tabIndex < 0) {
    TabIndexHelper.setUpTabIndexAttributeModifier(comp,tabIndex);
  }
 else {
    if (elementTabIndexes.size() > 0) {
      Integer idx=elementTabIndexes.get(cellToElement.get(comp));
      if (idx == null) {
        TabIndexHelper.setUpTabIndexAttributeModifier(comp,ISupportWebTabSeq.SKIP);
      }
 else {
        TabIndexHelper.setUpTabIndexAttributeModifier(comp,tabIndex + 1 + visibleRowIndex * elementTabIndexes.size() + idx.intValue());
      }
    }
 else {
      TabIndexHelper.setUpTabIndexAttributeModifier(comp,tabIndex + 1);
    }
  }
  if (compColor != null) {
    MarkupContainer cellContainer=comp.getParent();
    String compColorStr=compColor.toString();
    if (cellContainer instanceof CellContainer) {
      cellContainer.add(new StyleAppendingModifier(new Model<String>(""String_Node_Str"" + compColorStr)));
    }
  }
  WebCellBasedView.this.applyStyleOnComponent(comp,compColor,fgColor,compFont,compBorder);
  if (scriptable.isReadOnly() && validationEnabled && comp instanceof IScriptableProvider&& ((IScriptableProvider)comp).getScriptObject() instanceof IRuntimeComponentWithReadonlySupport) {
    ((IRuntimeComponentWithReadonlySupport)((IScriptableProvider)comp).getScriptObject()).setReadOnly(true);
  }
  List<Component> readOnlyComponents=((WebForm)fc.getFormUI()).getReadOnlyComponents();
  if (readOnlyComponents.indexOf(WebCellBasedView.this) != -1 && readOnlyComponents.indexOf(comp) == -1)   readOnlyComponents.add(comp);
  if (!isEnabled() && comp instanceof IComponent) {
    ((IComponent)comp).setComponentEnabled(false);
  }
  if (comp instanceof IDisplayRelatedData && record != null) {
    ((IDisplayRelatedData)comp).setRecord(record,true);
  }
  MarkupContainer parent=comp.getParent();
  if (parent instanceof CellContainer) {
    parent.setVisible(comp.isVisible());
  }
  Properties borderProperties=new Properties();
  if (compBorder != null) {
    ComponentFactoryHelper.createBorderCSSProperties((String)compBorder,borderProperties);
  }
 else {
    if (comp instanceof IComponent) {
      Border cBorder=((IComponent)comp).getBorder();
      if (cBorder != null) {
        ComponentFactoryHelper.createBorderCSSProperties(ComponentFactoryHelper.createBorderString(cBorder),borderProperties);
      }
 else {
        borderProperties.put(""String_Node_Str"",""String_Node_Str"");
        borderProperties.put(""String_Node_Str"",""String_Node_Str"");
        borderProperties.put(""String_Node_Str"",""String_Node_Str"");
      }
    }
  }
  if (borderProperties.size() > 0) {
    String borderWidth=getFirstToken(borderProperties.getProperty(""String_Node_Str""));
    String borderStyle=borderProperties.getProperty(""String_Node_Str"");
    if (borderStyle == null)     borderStyle=""String_Node_Str"";
    String borderColor=getFirstToken(borderProperties.getProperty(""String_Node_Str""));
    final String borderDef=new StringBuilder(borderWidth).append(""String_Node_Str"").append(borderStyle).append(""String_Node_Str"").append(borderColor).toString();
    Object elem=WebCellBasedView.this.cellToElement.get(comp);
    Object colId=WebCellBasedView.this.elementToColumnIdentifierComponent.get(elem);
    final int idx=WebCellBasedView.this.visibleColummIdentifierComponents.indexOf(colId);
    comp.add(new StyleAppendingModifier(new Model<String>(){
      @Override public String getObject(){
        StringBuilder style=new StringBuilder(""String_Node_Str"").append(borderDef).append(""String_Node_Str"").append(borderDef);
        if (idx == 0) {
          style.append(""String_Node_Str"").append(borderDef);
        }
 else         if (idx == WebCellBasedView.this.visibleColummIdentifierComponents.size() - 1) {
          style.append(""String_Node_Str"").append(borderDef);
        }
        return style.toString();
      }
    }
));
  }
}","private void setUpComponent(Component comp,IRecordInternal record,Object compColor,Object fgColor,Object compFont,Object compBorder,int visibleRowIndex){
  if (tabIndex < 0) {
    TabIndexHelper.setUpTabIndexAttributeModifier(comp,tabIndex);
  }
 else {
    if (elementTabIndexes.size() > 0) {
      Integer idx=elementTabIndexes.get(cellToElement.get(comp));
      if (idx == null) {
        TabIndexHelper.setUpTabIndexAttributeModifier(comp,ISupportWebTabSeq.SKIP);
      }
 else {
        TabIndexHelper.setUpTabIndexAttributeModifier(comp,tabIndex + 1 + visibleRowIndex * elementTabIndexes.size() + idx.intValue());
      }
    }
 else {
      TabIndexHelper.setUpTabIndexAttributeModifier(comp,tabIndex + 1);
    }
  }
  if (compColor != null) {
    MarkupContainer cellContainer=comp.getParent();
    String compColorStr=compColor.toString();
    if (cellContainer instanceof CellContainer) {
      cellContainer.add(new StyleAppendingModifier(new Model<String>(""String_Node_Str"" + compColorStr)));
    }
  }
  WebCellBasedView.this.applyStyleOnComponent(comp,compColor,fgColor,compFont,compBorder);
  if (scriptable.isReadOnly() && validationEnabled && comp instanceof IScriptableProvider&& ((IScriptableProvider)comp).getScriptObject() instanceof IRuntimeComponentWithReadonlySupport) {
    ((IRuntimeComponentWithReadonlySupport)((IScriptableProvider)comp).getScriptObject()).setReadOnly(true);
  }
  List<Component> readOnlyComponents=((WebForm)fc.getFormUI()).getReadOnlyComponents();
  if (readOnlyComponents.indexOf(WebCellBasedView.this) != -1 && readOnlyComponents.indexOf(comp) == -1)   readOnlyComponents.add(comp);
  if (!isEnabled() && comp instanceof IComponent) {
    ((IComponent)comp).setComponentEnabled(false);
  }
  if (comp instanceof IDisplayRelatedData && record != null) {
    ((IDisplayRelatedData)comp).setRecord(record,true);
  }
  MarkupContainer parent=comp.getParent();
  if (parent instanceof CellContainer) {
    parent.setVisible(comp.isVisible());
  }
  if (compBorder != null) {
    Object elem=WebCellBasedView.this.cellToElement.get(comp);
    Object colId=WebCellBasedView.this.elementToColumnIdentifierComponent.get(elem);
    final int idx=WebCellBasedView.this.visibleColummIdentifierComponents.indexOf(colId);
    final int[] borderWidth=new int[]{0,0};
    Border cb=ComponentFactoryHelper.createBorder((String)compBorder);
    if (cb != null) {
      Insets borderInsets=cb.getBorderInsets(null);
      borderWidth[0]=borderInsets.left;
      borderWidth[1]=borderInsets.right;
    }
    comp.add(new StyleAppendingModifier(new Model<String>(){
      @Override public String getObject(){
        StringBuilder style=new StringBuilder();
        if (idx > 0) {
          style.append(""String_Node_Str"").append(borderWidth[0]).append(""String_Node_Str"");
        }
        if (idx < WebCellBasedView.this.visibleColummIdentifierComponents.size() - 1) {
          style.append(""String_Node_Str"").append(borderWidth[1]).append(""String_Node_Str"");
        }
        return style.toString();
      }
    }
));
  }
}",0.7541732058781566
143687,"public String getRowSelectionScript(){
  if (currentData == null)   return null;
  List<Integer> indexToUpdate;
  if (!hasOnRender && (bgColorScript != null || (getRowSelectedStyle() != null && getRowSelectedStyle().getAttributeCount() > 0)) && (indexToUpdate=getIndexToUpdate()) != null) {
    int firstRow=table.getCurrentPage() * table.getRowsPerPage();
    int lastRow=firstRow + table.getViewSize() - 1;
    int[] newSelectedIndexes=getSelectedIndexes();
    AppendingStringBuffer sab=new AppendingStringBuffer();
    for (    int rowIdx : indexToUpdate) {
      if (rowIdx >= firstRow && rowIdx <= lastRow) {
        ListItem<IRecordInternal> selectedListItem=(ListItem<IRecordInternal>)table.get(Integer.toString(rowIdx));
        if (selectedListItem != null) {
          String selectedId=selectedListItem.getMarkupId();
          boolean isSelected=Arrays.binarySearch(newSelectedIndexes,rowIdx) >= 0;
          Object selectedColor=getListItemBgColor(selectedListItem,isSelected);
          Object selectedFgColor=getListItemFgColor(selectedListItem,isSelected);
          Object selectedFont=getListItemFont(selectedListItem,isSelected);
          Object selectedBorder=getListItemBorder(selectedListItem,isSelected);
          selectedColor=(selectedColor == null ? ""String_Node_Str"" : selectedColor.toString());
          selectedFgColor=(selectedFgColor == null) ? ""String_Node_Str"" : selectedFgColor.toString();
          String fstyle=""String_Node_Str"", fweight=""String_Node_Str"", fsize=""String_Node_Str"", ffamily=""String_Node_Str"";
          if (selectedFont != null) {
            Pair<String,String> fontCSSProps[]=PersistHelper.createFontCSSProperties(selectedFont.toString());
            for (            Pair<String,String> fontCSSProp : fontCSSProps) {
              if (fontCSSProp != null) {
                String key=fontCSSProp.getLeft();
                String value=fontCSSProp.getRight();
                if (value == null)                 value=""String_Node_Str"";
                if (""String_Node_Str"".equals(key))                 fstyle=value;
 else                 if (""String_Node_Str"".equals(key))                 fweight=value;
 else                 if (""String_Node_Str"".equals(key))                 fsize=value;
 else                 if (""String_Node_Str"".equals(key))                 ffamily=value;
              }
            }
          }
          String bstyle=""String_Node_Str"", bwidth=""String_Node_Str"", bcolor=""String_Node_Str"";
          if (selectedBorder != null) {
            Properties borderProperties=new Properties();
            ComponentFactoryHelper.createBorderCSSProperties(selectedBorder.toString(),borderProperties);
            bstyle=borderProperties.getProperty(""String_Node_Str"");
            if (bstyle == null)             bstyle=""String_Node_Str"";
            bwidth=borderProperties.getProperty(""String_Node_Str"");
            bwidth=getFirstToken(bwidth);
            bcolor=borderProperties.getProperty(""String_Node_Str"");
            bcolor=getFirstToken(bcolor);
          }
 else {
          }
          sab.append(""String_Node_Str"").append(selectedId).append(""String_Node_Str"").append(selectedColor).append(""String_Node_Str"").append(selectedFgColor).append(""String_Node_Str"").append(fstyle).append(""String_Node_Str"").append(fweight).append(""String_Node_Str"").append(fsize).append(""String_Node_Str"").append(ffamily).append(""String_Node_Str"").append(bstyle).append(""String_Node_Str"").append(bwidth).append(""String_Node_Str"").append(bcolor).append(""String_Node_Str"");
        }
      }
    }
    String rowSelectionScript=sab.toString();
    if (rowSelectionScript.length() > 0)     return rowSelectionScript;
  }
  return null;
}","public String getRowSelectionScript(){
  if (currentData == null)   return null;
  List<Integer> indexToUpdate;
  if (!hasOnRender && (bgColorScript != null || (getRowSelectedStyle() != null && getRowSelectedStyle().getAttributeCount() > 0)) && (indexToUpdate=getIndexToUpdate()) != null) {
    int firstRow=table.getCurrentPage() * table.getRowsPerPage();
    int lastRow=firstRow + table.getViewSize() - 1;
    int[] newSelectedIndexes=getSelectedIndexes();
    AppendingStringBuffer sab=new AppendingStringBuffer();
    for (    int rowIdx : indexToUpdate) {
      if (rowIdx >= firstRow && rowIdx <= lastRow) {
        ListItem<IRecordInternal> selectedListItem=(ListItem<IRecordInternal>)table.get(Integer.toString(rowIdx));
        if (selectedListItem != null) {
          String selectedId=selectedListItem.getMarkupId();
          boolean isSelected=Arrays.binarySearch(newSelectedIndexes,rowIdx) >= 0;
          Object selectedColor=getListItemBgColor(selectedListItem,isSelected);
          Object selectedFgColor=getListItemFgColor(selectedListItem,isSelected);
          Object selectedFont=getListItemFont(selectedListItem,isSelected);
          Object selectedBorder=getListItemBorder(selectedListItem,isSelected);
          selectedColor=(selectedColor == null ? ""String_Node_Str"" : selectedColor.toString());
          selectedFgColor=(selectedFgColor == null) ? ""String_Node_Str"" : selectedFgColor.toString();
          String fstyle=""String_Node_Str"", fweight=""String_Node_Str"", fsize=""String_Node_Str"", ffamily=""String_Node_Str"";
          if (selectedFont != null) {
            Pair<String,String> fontCSSProps[]=PersistHelper.createFontCSSProperties(selectedFont.toString());
            for (            Pair<String,String> fontCSSProp : fontCSSProps) {
              if (fontCSSProp != null) {
                String key=fontCSSProp.getLeft();
                String value=fontCSSProp.getRight();
                if (value == null)                 value=""String_Node_Str"";
                if (""String_Node_Str"".equals(key))                 fstyle=value;
 else                 if (""String_Node_Str"".equals(key))                 fweight=value;
 else                 if (""String_Node_Str"".equals(key))                 fsize=value;
 else                 if (""String_Node_Str"".equals(key))                 ffamily=value;
              }
            }
          }
          String bstyle=""String_Node_Str"", bwidth=""String_Node_Str"", bcolor=""String_Node_Str"";
          if (selectedBorder != null) {
            Properties borderProperties=new Properties();
            ComponentFactoryHelper.createBorderCSSProperties(selectedBorder.toString(),borderProperties);
            bstyle=borderProperties.getProperty(""String_Node_Str"");
            if (bstyle == null)             bstyle=""String_Node_Str"";
            bwidth=borderProperties.getProperty(""String_Node_Str"");
            bcolor=borderProperties.getProperty(""String_Node_Str"");
            bcolor=getFirstToken(bcolor);
          }
 else {
          }
          sab.append(""String_Node_Str"").append(selectedId).append(""String_Node_Str"").append(selectedColor).append(""String_Node_Str"").append(selectedFgColor).append(""String_Node_Str"").append(fstyle).append(""String_Node_Str"").append(fweight).append(""String_Node_Str"").append(fsize).append(""String_Node_Str"").append(ffamily).append(""String_Node_Str"").append(bstyle).append(""String_Node_Str"").append(bwidth).append(""String_Node_Str"").append(bcolor).append(""String_Node_Str"");
        }
      }
    }
    String rowSelectionScript=sab.toString();
    if (rowSelectionScript.length() > 0)     return rowSelectionScript;
  }
  return null;
}",0.7970149253731343
143688,"private void applyStyleOnComponent(Component comp,Object bgColor,Object fgColor,Object compFont,Object compBorder){
  if (comp instanceof IScriptableProvider) {
    IScriptable s=((IScriptableProvider)comp).getScriptObject();
    if (s instanceof IRuntimeComponent) {
      IRuntimeComponent sbm=(IRuntimeComponent)s;
      String newBgColor=bgColor != null ? bgColor.toString() : null;
      sbm.setBgcolor(newBgColor);
      String newFgColor=fgColor != null ? fgColor.toString() : null;
      sbm.setFgcolor(newFgColor);
      String newCompFont=compFont != null ? compFont.toString() : null;
      sbm.setFont(newCompFont);
    }
  }
}","private void applyStyleOnComponent(Component comp,Object bgColor,Object fgColor,Object compFont,Object compBorder){
  if (comp instanceof IScriptableProvider) {
    IScriptable s=((IScriptableProvider)comp).getScriptObject();
    if (s instanceof IRuntimeComponent) {
      IRuntimeComponent sbm=(IRuntimeComponent)s;
      String newBgColor=bgColor != null ? bgColor.toString() : null;
      sbm.setBgcolor(newBgColor);
      String newFgColor=fgColor != null ? fgColor.toString() : null;
      sbm.setFgcolor(newFgColor);
      String newCompFont=compFont != null ? compFont.toString() : null;
      sbm.setFont(newCompFont);
      String newBorder=compBorder != null ? compBorder.toString() : null;
      if (newBorder != null) {
        sbm.setBorder(newBorder);
        sbm.setSize(sbm.getWidth(),sbm.getHeight());
      }
    }
  }
}",0.86468200270636
143689,"/** 
 * @see org.apache.wicket.ajax.AbstractDefaultAjaxBehavior#respond(org.apache.wicket.ajax.AjaxRequestTarget)
 */
@Override protected void respond(AjaxRequestTarget target){
  Request request=RequestCycle.get().getRequest();
  String action=request.getParameter(DraggableBehavior.PARAM_ACTION);
  String id=extractId(request.getParameter(DraggableBehavior.PARAM_DRAGGABLE_ID));
  if (id != null) {
    final String finalId=id.endsWith(TemplateGenerator.WRAPPER_SUFFIX) ? id.substring(0,id.length() - 8) : id;
    MarkupContainer comp=(MarkupContainer)getComponent();
    Component child=(Component)comp.visitChildren(Component.class,new IVisitor<Component>(){
      public Object component(      Component component){
        String markupId=component.getMarkupId();
        if (finalId.equals(markupId))         return component;
        return IVisitor.CONTINUE_TRAVERSAL;
      }
    }
);
    if (child != null && action != null) {
      int height=stripUnitPart(request.getParameter(PARAM_RESIZE_HEIGHT));
      int width=stripUnitPart(request.getParameter(PARAM_RESIZE_WIDTH));
      int x=stripUnitPart(request.getParameter(DraggableBehavior.PARAM_X));
      int y=stripUnitPart(request.getParameter(DraggableBehavior.PARAM_Y));
      if (action.equals(ACTION_SELECT)) {
        Object ret=callback.executeOnSelect(getJSEvent(EventType.rightClick,0,new Point(x,y),new IComponent[]{(IComponent)child}));
        if (ret instanceof Boolean && !((Boolean)ret).booleanValue()) {
          onSelectComponent=null;
        }
 else {
          target.appendJavascript(""String_Node_Str"" + id + ""String_Node_Str"");
        }
        return;
      }
      if (child != onSelectComponent) {
        onSelectComponent=(IComponent)child;
      }
      if (action.equals(ACTION_RESIZE)) {
        if (width != -1 && height != -1) {
          if (child instanceof ISupportWebBounds) {
            Insets paddingAndBorder=((ISupportWebBounds)child).getPaddingAndBorder();
            if (paddingAndBorder != null) {
              height+=paddingAndBorder.bottom + paddingAndBorder.top;
              width+=paddingAndBorder.left + paddingAndBorder.right;
            }
          }
          if (child instanceof IScriptableProvider)           ((IRuntimeComponent)((IScriptableProvider)child).getScriptObject()).setSize(width,height);
          if (child instanceof IProviderStylePropertyChanges)           ((IProviderStylePropertyChanges)child).getStylePropertyChanges().setRendered();
        }
        callback.executeOnResize(getJSEvent(EventType.onDrop,0,new Point(x,y),new IComponent[]{(IComponent)child}));
      }
 else       if (action.equals(DraggableBehavior.ACTION_DRAG_START)) {
        Object onDragAllowed=callback.executeOnDrag(getJSEvent(EventType.onDrag,0,new Point(x,y),new IComponent[]{(IComponent)child}));
        if ((onDragAllowed instanceof Boolean && !((Boolean)onDragAllowed).booleanValue()) || (onDragAllowed instanceof Number && ((Number)onDragAllowed).intValue() == DRAGNDROP.NONE)) {
          onDragComponent=null;
        }
 else {
          onDragComponent=(IComponent)child;
        }
      }
 else {
        if (child == onDragComponent) {
          if (x != -1 && y != -1) {
            ((IRuntimeComponent)((IScriptableProvider)child).getScriptObject()).setLocation(x,y);
            if (child instanceof IProviderStylePropertyChanges) {
              if ((child).getParent() instanceof WrapperContainer) {
                WrapperContainer wrapper=(WrapperContainer)(child).getParent();
                wrapper.getStylePropertyChanges().getChanges();
                wrapper.getStylePropertyChanges().setRendered();
              }
              ((IProviderStylePropertyChanges)child).getStylePropertyChanges().setRendered();
            }
          }
          callback.executeOnDrop(getJSEvent(EventType.onDrop,0,new Point(x,y),new IComponent[]{(IComponent)child}));
        }
      }
    }
  }
  WebEventExecutor.generateResponse(target,getComponent().getPage());
  target.prependJavascript(""String_Node_Str"");
}","/** 
 * @see org.apache.wicket.ajax.AbstractDefaultAjaxBehavior#respond(org.apache.wicket.ajax.AjaxRequestTarget)
 */
@Override protected void respond(AjaxRequestTarget target){
  Request request=RequestCycle.get().getRequest();
  String action=request.getParameter(DraggableBehavior.PARAM_ACTION);
  String id=extractId(request.getParameter(DraggableBehavior.PARAM_DRAGGABLE_ID));
  if (id != null) {
    final String finalId=id.endsWith(TemplateGenerator.WRAPPER_SUFFIX) ? id.substring(0,id.length() - 8) : id;
    MarkupContainer comp=(MarkupContainer)getComponent();
    Component child=(Component)comp.visitChildren(Component.class,new IVisitor<Component>(){
      public Object component(      Component component){
        String markupId=component.getMarkupId();
        if (finalId.equals(markupId))         return component;
        return IVisitor.CONTINUE_TRAVERSAL;
      }
    }
);
    if (child instanceof IComponent && action != null) {
      int height=stripUnitPart(request.getParameter(PARAM_RESIZE_HEIGHT));
      int width=stripUnitPart(request.getParameter(PARAM_RESIZE_WIDTH));
      int x=stripUnitPart(request.getParameter(DraggableBehavior.PARAM_X));
      int y=stripUnitPart(request.getParameter(DraggableBehavior.PARAM_Y));
      if (action.equals(ACTION_SELECT)) {
        Object ret=callback.executeOnSelect(getJSEvent(EventType.action,0,new Point(x,y),new IComponent[]{(IComponent)child}));
        if (ret instanceof Boolean && !((Boolean)ret).booleanValue()) {
          onSelectComponent=null;
        }
 else {
          target.appendJavascript(""String_Node_Str"" + id + ""String_Node_Str"");
        }
        return;
      }
      if (child != onSelectComponent) {
        onSelectComponent=(IComponent)child;
      }
      if (action.equals(ACTION_RESIZE)) {
        if (width != -1 && height != -1) {
          if (child instanceof ISupportWebBounds) {
            Insets paddingAndBorder=((ISupportWebBounds)child).getPaddingAndBorder();
            if (paddingAndBorder != null) {
              height+=paddingAndBorder.bottom + paddingAndBorder.top;
              width+=paddingAndBorder.left + paddingAndBorder.right;
            }
          }
          if (child instanceof IScriptableProvider)           ((IRuntimeComponent)((IScriptableProvider)child).getScriptObject()).setSize(width,height);
          if (child instanceof IProviderStylePropertyChanges)           ((IProviderStylePropertyChanges)child).getStylePropertyChanges().setRendered();
        }
        callback.executeOnResize(getJSEvent(EventType.onDrop,0,new Point(x,y),new IComponent[]{(IComponent)child}));
      }
 else       if (action.equals(DraggableBehavior.ACTION_DRAG_START)) {
        Object onDragAllowed=callback.executeOnDrag(getJSEvent(EventType.onDrag,0,new Point(x,y),new IComponent[]{(IComponent)child}));
        if ((onDragAllowed instanceof Boolean && !((Boolean)onDragAllowed).booleanValue()) || (onDragAllowed instanceof Number && ((Number)onDragAllowed).intValue() == DRAGNDROP.NONE)) {
          onDragComponent=null;
        }
 else {
          onDragComponent=(IComponent)child;
        }
      }
 else {
        if (child == onDragComponent) {
          if (x != -1 && y != -1) {
            ((IRuntimeComponent)((IScriptableProvider)child).getScriptObject()).setLocation(x,y);
            if (child instanceof IProviderStylePropertyChanges) {
              if ((child).getParent() instanceof WrapperContainer) {
                WrapperContainer wrapper=(WrapperContainer)(child).getParent();
                wrapper.getStylePropertyChanges().getChanges();
                wrapper.getStylePropertyChanges().setRendered();
              }
              ((IProviderStylePropertyChanges)child).getStylePropertyChanges().setRendered();
            }
          }
          callback.executeOnDrop(getJSEvent(EventType.onDrop,0,new Point(x,y),new IComponent[]{(IComponent)child}));
        }
      }
    }
  }
  WebEventExecutor.generateResponse(target,getComponent().getPage());
  target.prependJavascript(""String_Node_Str"");
}",0.994569242162429
143690,"public WebBaseSelectBox(final IApplication application,AbstractRuntimeField<IFieldComponent> scriptable,String id,String text){
  super(id);
  this.scriptable=scriptable;
  this.application=application;
  selector=getSelector(""String_Node_Str"" + id);
  boolean useAJAX=Utils.getAsBoolean(application.getRuntimeProperties().get(""String_Node_Str""));
  eventExecutor=new WebEventExecutor(selector,useAJAX);
  setOutputMarkupPlaceholderTag(true);
  add(selector);
  add(new Label(""String_Node_Str"" + id,""String_Node_Str""){
    @Override protected void onComponentTag(    ComponentTag tag){
      super.onComponentTag(tag);
      if (tag.getName().compareToIgnoreCase(""String_Node_Str"") == 0) {
        tag.put(""String_Node_Str"",selector.getMarkupId());
      }
    }
    @Override protected void onBeforeRender(){
      super.onBeforeRender();
      String txt=getDefaultModelObjectAsString();
      if (HtmlUtils.startsWithHtml(txt)) {
        txt=StripHTMLTagsConverter.convertBodyText(this,txt,application.getFlattenedSolution()).getBodyTxt().toString();
        setDefaultModelObject(txt);
      }
    }
  }
);
  setText(Text.processTags(text,null));
  selector.add(new FocusIfInvalidAttributeModifier(selector));
  add(StyleAttributeModifierModel.INSTANCE);
  add(TooltipAttributeModifier.INSTANCE);
}","public WebBaseSelectBox(final IApplication application,AbstractRuntimeField<IFieldComponent> scriptable,String id,String text){
  super(id);
  this.scriptable=scriptable;
  this.application=application;
  selector=getSelector(""String_Node_Str"" + id);
  boolean useAJAX=Utils.getAsBoolean(application.getRuntimeProperties().get(""String_Node_Str""));
  eventExecutor=new WebEventExecutor(selector,useAJAX);
  setOutputMarkupPlaceholderTag(true);
  add(selector);
  Label selectLabel=new Label(""String_Node_Str"" + id,""String_Node_Str""){
    @Override protected void onComponentTag(    ComponentTag tag){
      super.onComponentTag(tag);
      if (tag.getName().compareToIgnoreCase(""String_Node_Str"") == 0) {
        tag.put(""String_Node_Str"",selector.getMarkupId());
      }
    }
    @Override protected void onBeforeRender(){
      super.onBeforeRender();
      String txt=getDefaultModelObjectAsString();
      if (HtmlUtils.startsWithHtml(txt)) {
        txt=StripHTMLTagsConverter.convertBodyText(this,txt,application.getFlattenedSolution()).getBodyTxt().toString();
        setDefaultModelObject(txt);
      }
    }
  }
;
  selectLabel.setOutputMarkupId(true);
  add(selectLabel);
  setText(Text.processTags(text,null));
  selector.add(new FocusIfInvalidAttributeModifier(selector));
  add(StyleAttributeModifierModel.INSTANCE);
  add(TooltipAttributeModifier.INSTANCE);
}",0.9701046337817638
143691,"/** 
 * @see wicket.Component#isEnabled()
 */
@Override public boolean isEnabled(){
  return WebDataCheckBox.this.isEnabled();
}","/** 
 * @see wicket.Component#isEnabled()
 */
@Override public boolean isEnabled(){
  IFormUIInternal<?> formui=findParent(IFormUIInternal.class);
  if (formui != null && formui.isDesignMode()) {
    return false;
  }
  return WebDataCheckBox.this.isEnabled();
}",0.6564102564102564
143692,"private void init(){
  add(new HeaderContributor(new IHeaderContributor(){
    private static final long serialVersionUID=1L;
    public void renderHead(    IHeaderResponse response){
      response.renderCSSReference(new CompressedResourceReference(WebDataLookupField.class,""String_Node_Str""));
    }
  }
){
    @Override public boolean isEnabled(    Component component){
      return !getScriptObject().isReadOnly() && getScriptObject().isEnabled();
    }
  }
);
  setOutputMarkupPlaceholderTag(true);
  AutoCompleteSettings behSettings=new AutoCompleteSettings();
  behSettings.setMaxHeightInPx(200);
  behSettings.setPreselect(true);
  behSettings.setShowCompleteListOnFocusGain(true);
  behSettings.setAdjustInputWidth(false);
  ClientProperties clp=(application.getApplicationType() != IApplication.HEADLESS_CLIENT ? ((WebClientInfo)Session.get().getClientInfo()).getProperties() : null);
  if (clp != null && (!clp.isBrowserInternetExplorer() || clp.getBrowserVersionMajor() >= 8)) {
    behSettings.setUseSmartPositioning(true);
    behSettings.setUseHideShowCoveredIEFix(false);
  }
 else {
    behSettings.setUseSmartPositioning(false);
    behSettings.setUseHideShowCoveredIEFix(true);
  }
  behSettings.setThrottleDelay(500);
  IAutoCompleteRenderer<Object> renderer=new IAutoCompleteRenderer<Object>(){
    protected String getTextValue(    Object object){
      String str=(object == null ? ""String_Node_Str"" : object.toString());
      if (str.trim().equals(""String_Node_Str""))       str=""String_Node_Str"";
      return str;
    }
    protected void renderChoice(    Object object,    Response response,    String criteria){
      if (IValueList.SEPARATOR_DESIGN_VALUE.equals(object))       return;
      String renderedObject=(object == null) ? ""String_Node_Str"" : object.toString();
      if (!HtmlUtils.hasHtmlTag(renderedObject))       renderedObject=HtmlUtils.escapeMarkup(renderedObject,true,false).toString();
      response.write(getTextValue(object));
    }
    public void render(    Object object,    Response response,    String criteria){
      String textValue=getTextValue(object);
      if (textValue == null) {
        throw new IllegalStateException(""String_Node_Str"" + object.toString());
      }
      textValue=textValue.replaceAll(""String_Node_Str"",""String_Node_Str"");
      response.write(""String_Node_Str"" + textValue + ""String_Node_Str"");
      response.write(""String_Node_Str"");
      renderChoice(object,response,criteria);
      response.write(""String_Node_Str"");
    }
    @SuppressWarnings(""String_Node_Str"") public void renderHeader(    Response response){
      StringBuffer listStyle=new StringBuffer();
      listStyle.append(""String_Node_Str"");
      String fFamily=""String_Node_Str"";
      String bgColor=""String_Node_Str"";
      String fgColor=""String_Node_Str"";
      String fSize=""String_Node_Str"";
      String padding=""String_Node_Str"";
      String margin=""String_Node_Str"";
      if (getFont() != null) {
        Font f=getFont();
        if (f != null) {
          if (f.getFamily() != null) {
            fFamily=f.getFamily();
            if (fFamily.contains(""String_Node_Str""))             fFamily=""String_Node_Str"" + fFamily + ""String_Node_Str"";
          }
          if (f.getName() != null) {
            String fName=f.getName();
            if (fName.contains(""String_Node_Str""))             fName=""String_Node_Str"" + fName + ""String_Node_Str"";
            fFamily=fName + ""String_Node_Str"" + fFamily;
          }
          if (f.isBold())           listStyle.append(""String_Node_Str"");
          if (f.isItalic())           listStyle.append(""String_Node_Str"");
          if (getBackground() != null) {
            bgColor=Integer.toHexString(getBackground().getRGB());
            bgColor=""String_Node_Str"" + bgColor.substring(2,bgColor.length());
          }
          if (getForeground() != null) {
            fgColor=Integer.toHexString(getForeground().getRGB());
            fgColor=""String_Node_Str"" + fgColor.substring(2,fgColor.length());
          }
          fSize=Integer.toString(f.getSize()) + ""String_Node_Str"";
          Insets _padding=getPadding();
          if (getPadding() != null)           padding=""String_Node_Str"" + _padding.top + ""String_Node_Str""+ _padding.right+ ""String_Node_Str""+ _padding.bottom+ ""String_Node_Str""+ _padding.left+ ""String_Node_Str"";
          Insets _margin=getMargin();
          if (_margin != null)           margin=""String_Node_Str"" + _margin.top + ""String_Node_Str""+ _margin.right+ ""String_Node_Str""+ _margin.bottom+ ""String_Node_Str""+ _margin.left+ ""String_Node_Str"";
        }
      }
      listStyle.append(""String_Node_Str"" + fFamily + ""String_Node_Str"");
      listStyle.append(""String_Node_Str"" + bgColor + ""String_Node_Str"");
      listStyle.append(""String_Node_Str"" + fgColor + ""String_Node_Str"");
      listStyle.append(""String_Node_Str"" + fSize + ""String_Node_Str"");
      listStyle.append(""String_Node_Str"" + (getSize().width - 6) + ""String_Node_Str"");
      listStyle.append(""String_Node_Str"" + margin + ""String_Node_Str"");
      listStyle.append(""String_Node_Str"" + padding + ""String_Node_Str"");
      listStyle.append(""String_Node_Str"" + TemplateGenerator.getHorizontalAlignValue(getHorizontalAlignment()));
      listStyle.append(""String_Node_Str"");
      response.write(""String_Node_Str"" + listStyle + ""String_Node_Str"");
    }
    public void renderFooter(    Response response){
      response.write(""String_Node_Str"");
    }
  }
;
  AutoCompleteBehavior<Object> beh=new AutoCompleteBehavior<Object>(renderer,behSettings){
    private static final long serialVersionUID=1L;
    /** 
 * @see org.apache.wicket.extensions.ajax.markup.html.autocomplete.AutoCompleteBehavior#getChoices(java.lang.String)
 */
    @Override protected Iterator<Object> getChoices(    String input){
      try {
        dlm.fill(parentState,getDataProviderID(),input,false);
        return dlm.iterator();
      }
 catch (      Exception ex) {
        Debug.error(ex);
      }
      return Collections.emptyList().iterator();
    }
    /** 
 * @see org.apache.wicket.ajax.AbstractDefaultAjaxBehavior#getFailureScript()
 */
    @Override protected CharSequence getFailureScript(){
      return ""String_Node_Str"";
    }
    /** 
 * @see org.apache.wicket.ajax.AbstractDefaultAjaxBehavior#getPreconditionScript()
 */
    @Override protected CharSequence getPreconditionScript(){
      return ""String_Node_Str"" + super.getPreconditionScript();
    }
    @Override public void renderHead(    IHeaderResponse response){
      settings.setShowListOnEmptyInput(Boolean.TRUE.equals(UIUtils.getUIProperty(getScriptObject(),application,IApplication.TYPE_AHEAD_SHOW_POPUP_WHEN_EMPTY,Boolean.TRUE)));
      settings.setShowListOnFocusGain(Boolean.TRUE.equals(UIUtils.getUIProperty(getScriptObject(),application,IApplication.TYPE_AHEAD_SHOW_POPUP_ON_FOCUS_GAIN,Boolean.TRUE)));
      if (!getScriptObject().isReadOnly() && getScriptObject().isEnabled()) {
        super.renderHead(response);
        response.renderJavascript(""String_Node_Str"",""String_Node_Str"");
      }
    }
    /** 
 * @see org.apache.wicket.behavior.AbstractBehavior#isEnabled(org.apache.wicket.Component)
 */
    @Override public boolean isEnabled(    Component component){
      return super.isEnabled(component) && WebClientSession.get().useAjax();
    }
  }
;
  add(beh);
}","private void init(){
  add(new HeaderContributor(new IHeaderContributor(){
    private static final long serialVersionUID=1L;
    public void renderHead(    IHeaderResponse response){
      response.renderCSSReference(new CompressedResourceReference(WebDataLookupField.class,""String_Node_Str""));
    }
  }
){
    @Override public boolean isEnabled(    Component component){
      return !getScriptObject().isReadOnly() && getScriptObject().isEnabled();
    }
  }
);
  setOutputMarkupPlaceholderTag(true);
  AutoCompleteSettings behSettings=new AutoCompleteSettings();
  behSettings.setMaxHeightInPx(200);
  behSettings.setPreselect(true);
  behSettings.setShowCompleteListOnFocusGain(true);
  behSettings.setAdjustInputWidth(false);
  ClientProperties clp=(application.getApplicationType() != IApplication.HEADLESS_CLIENT ? ((WebClientInfo)Session.get().getClientInfo()).getProperties() : null);
  if (clp != null && (!clp.isBrowserInternetExplorer() || clp.getBrowserVersionMajor() >= 8)) {
    behSettings.setUseSmartPositioning(true);
    behSettings.setUseHideShowCoveredIEFix(false);
  }
 else {
    behSettings.setUseSmartPositioning(false);
    behSettings.setUseHideShowCoveredIEFix(true);
  }
  behSettings.setThrottleDelay(500);
  IAutoCompleteRenderer<Object> renderer=new IAutoCompleteRenderer<Object>(){
    protected String getTextValue(    Object object){
      String str=(object == null ? ""String_Node_Str"" : object.toString());
      if (str.trim().equals(""String_Node_Str""))       str=""String_Node_Str"";
      return str;
    }
    protected void renderChoice(    Object object,    Response response,    String criteria){
      if (IValueList.SEPARATOR_DESIGN_VALUE.equals(object))       return;
      String renderedObject=(object == null) ? ""String_Node_Str"" : object.toString();
      if (!HtmlUtils.hasHtmlTag(renderedObject))       renderedObject=HtmlUtils.escapeMarkup(renderedObject,true,false).toString();
      response.write(getTextValue(object));
    }
    public void render(    Object object,    Response response,    String criteria){
      String textValue=getTextValue(object);
      if (textValue == null) {
        throw new IllegalStateException(""String_Node_Str"" + object.toString());
      }
      textValue=textValue.replaceAll(""String_Node_Str"",""String_Node_Str"");
      response.write(""String_Node_Str"" + textValue + ""String_Node_Str"");
      response.write(""String_Node_Str"");
      renderChoice(object,response,criteria);
      response.write(""String_Node_Str"");
    }
    @SuppressWarnings(""String_Node_Str"") public void renderHeader(    Response response){
      StringBuffer listStyle=new StringBuffer();
      listStyle.append(""String_Node_Str"");
      String fFamily=""String_Node_Str"";
      String bgColor=""String_Node_Str"";
      String fgColor=""String_Node_Str"";
      String fSize=""String_Node_Str"";
      String padding=""String_Node_Str"";
      String margin=""String_Node_Str"";
      if (getFont() != null) {
        Font f=getFont();
        if (f != null) {
          if (f.getFamily() != null) {
            fFamily=f.getFamily();
            if (fFamily.contains(""String_Node_Str""))             fFamily=""String_Node_Str"" + fFamily + ""String_Node_Str"";
          }
          if (f.getName() != null) {
            String fName=f.getName();
            if (fName.contains(""String_Node_Str""))             fName=""String_Node_Str"" + fName + ""String_Node_Str"";
            fFamily=fName + ""String_Node_Str"" + fFamily;
          }
          if (f.isBold())           listStyle.append(""String_Node_Str"");
          if (f.isItalic())           listStyle.append(""String_Node_Str"");
          if (getBackground() != null) {
            bgColor=Integer.toHexString(getBackground().getRGB());
            bgColor=""String_Node_Str"" + bgColor.substring(2,bgColor.length());
          }
          if (getForeground() != null) {
            fgColor=Integer.toHexString(getForeground().getRGB());
            fgColor=""String_Node_Str"" + fgColor.substring(2,fgColor.length());
          }
          fSize=Integer.toString(f.getSize()) + ""String_Node_Str"";
          Insets _padding=getPadding();
          if (getPadding() != null)           padding=""String_Node_Str"" + _padding.top + ""String_Node_Str""+ _padding.right+ ""String_Node_Str""+ _padding.bottom+ ""String_Node_Str""+ _padding.left+ ""String_Node_Str"";
          Insets _margin=getMargin();
          if (_margin != null)           margin=""String_Node_Str"" + _margin.top + ""String_Node_Str""+ _margin.right+ ""String_Node_Str""+ _margin.bottom+ ""String_Node_Str""+ _margin.left+ ""String_Node_Str"";
        }
      }
      listStyle.append(""String_Node_Str"" + fFamily + ""String_Node_Str"");
      listStyle.append(""String_Node_Str"" + bgColor + ""String_Node_Str"");
      listStyle.append(""String_Node_Str"" + fgColor + ""String_Node_Str"");
      listStyle.append(""String_Node_Str"" + fSize + ""String_Node_Str"");
      listStyle.append(""String_Node_Str"" + (getSize().width - 6) + ""String_Node_Str"");
      listStyle.append(""String_Node_Str"" + margin + ""String_Node_Str"");
      listStyle.append(""String_Node_Str"" + padding + ""String_Node_Str"");
      listStyle.append(""String_Node_Str"" + TemplateGenerator.getHorizontalAlignValue(getHorizontalAlignment()));
      listStyle.append(""String_Node_Str"");
      response.write(""String_Node_Str"" + listStyle + ""String_Node_Str"");
    }
    public void renderFooter(    Response response){
      response.write(""String_Node_Str"");
    }
  }
;
  AutoCompleteBehavior<Object> beh=new AutoCompleteBehavior<Object>(renderer,behSettings){
    private static final long serialVersionUID=1L;
    /** 
 * @see org.apache.wicket.extensions.ajax.markup.html.autocomplete.AutoCompleteBehavior#getChoices(java.lang.String)
 */
    @Override protected Iterator<Object> getChoices(    String input){
      try {
        dlm.fill(parentState,getDataProviderID(),input,false);
        return dlm.iterator();
      }
 catch (      Exception ex) {
        Debug.error(ex);
      }
      return Collections.emptyList().iterator();
    }
    /** 
 * @see org.apache.wicket.ajax.AbstractDefaultAjaxBehavior#getFailureScript()
 */
    @Override protected CharSequence getFailureScript(){
      return ""String_Node_Str"";
    }
    /** 
 * @see org.apache.wicket.ajax.AbstractDefaultAjaxBehavior#getPreconditionScript()
 */
    @Override protected CharSequence getPreconditionScript(){
      return ""String_Node_Str"" + super.getPreconditionScript();
    }
    @Override public void renderHead(    IHeaderResponse response){
      settings.setShowListOnEmptyInput(Boolean.TRUE.equals(UIUtils.getUIProperty(getScriptObject(),application,IApplication.TYPE_AHEAD_SHOW_POPUP_WHEN_EMPTY,Boolean.TRUE)));
      settings.setShowListOnFocusGain(Boolean.TRUE.equals(UIUtils.getUIProperty(getScriptObject(),application,IApplication.TYPE_AHEAD_SHOW_POPUP_ON_FOCUS_GAIN,Boolean.TRUE)));
      if (!getScriptObject().isReadOnly() && getScriptObject().isEnabled()) {
        super.renderHead(response);
        response.renderJavascript(""String_Node_Str"",""String_Node_Str"");
      }
    }
    /** 
 * @see org.apache.wicket.behavior.AbstractBehavior#isEnabled(org.apache.wicket.Component)
 */
    @Override public boolean isEnabled(    Component component){
      IFormUIInternal<?> formui=findParent(IFormUIInternal.class);
      if (formui != null && formui.isDesignMode()) {
        return false;
      }
      return super.isEnabled(component) && WebClientSession.get().useAjax();
    }
  }
;
  add(beh);
}",0.9855872844827588
143693,"/** 
 * @see org.apache.wicket.behavior.AbstractBehavior#isEnabled(org.apache.wicket.Component)
 */
@Override public boolean isEnabled(Component component){
  return super.isEnabled(component) && WebClientSession.get().useAjax();
}","/** 
 * @see org.apache.wicket.behavior.AbstractBehavior#isEnabled(org.apache.wicket.Component)
 */
@Override public boolean isEnabled(Component component){
  IFormUIInternal<?> formui=findParent(IFormUIInternal.class);
  if (formui != null && formui.isDesignMode()) {
    return false;
  }
  return super.isEnabled(component) && WebClientSession.get().useAjax();
}",0.6644295302013423
143694,"public WebTabPanel(IApplication application,final RuntimeTabPanel scriptable,String name,int orient,boolean oneTab){
  super(name);
  this.application=application;
  this.orient=orient;
  final boolean useAJAX=Utils.getAsBoolean(application.getRuntimeProperties().get(""String_Node_Str""));
  setOutputMarkupPlaceholderTag(true);
  if (orient != TabPanel.SPLIT_HORIZONTAL && orient != TabPanel.SPLIT_VERTICAL)   add(new Label(""String_Node_Str"",new Model<String>(""String_Node_Str"")));
  IModel<Integer> tabsModel=new AbstractReadOnlyModel<Integer>(){
    private static final long serialVersionUID=1L;
    @Override public Integer getObject(){
      return Integer.valueOf(allTabs.size());
    }
  }
;
  if (orient != TabPanel.HIDE && orient != TabPanel.SPLIT_HORIZONTAL && orient != TabPanel.SPLIT_VERTICAL && !(orient == TabPanel.DEFAULT && oneTab)) {
    add(new Loop(""String_Node_Str"",tabsModel){
      private static final long serialVersionUID=1L;
      @Override protected void populateItem(      LoopItem item){
        final WebTabHolder holder=allTabs.get(item.getIteration());
        MarkupContainer link=null;
        link=new ServoySubmitLink(""String_Node_Str"",useAJAX){
          private static final long serialVersionUID=1L;
          /** 
 * @see wicket.ajax.markup.html.AjaxFallbackLink#onClick(wicket.ajax.AjaxRequestTarget)
 */
          @Override public void onClick(          AjaxRequestTarget target){
            Page page=findPage();
            if (page != null) {
              setActiveTabPanel(holder.getPanel());
              if (target != null) {
                if (currentForm != null)                 addFormForFullAnchorRendering(currentForm.getWebForm(),(MainPage)page);
                relinkAtTabPanel(WebTabPanel.this);
                WebEventExecutor.generateResponse(target,page);
              }
            }
          }
          private void addFormForFullAnchorRendering(          WebForm form,          final MainPage mainPage){
            mainPage.addFormForFullAnchorRendering(form);
            form.visitChildren(WebTabPanel.class,new IVisitor<WebTabPanel>(){
              public Object component(              WebTabPanel tabPanel){
                if (tabPanel.currentForm != null)                 addFormForFullAnchorRendering(tabPanel.currentForm.getWebForm(),mainPage);
                return IVisitor.CONTINUE_TRAVERSAL_BUT_DONT_GO_DEEPER;
              }
            }
);
          }
          private void relinkAtForm(          WebForm form){
            form.visitChildren(WebTabPanel.class,new IVisitor<WebTabPanel>(){
              public Object component(              WebTabPanel wtp){
                relinkAtTabPanel(wtp);
                return IVisitor.CONTINUE_TRAVERSAL;
              }
            }
);
          }
          private void relinkAtTabPanel(          WebTabPanel wtp){
            wtp.relinkFormIfNeeded();
            wtp.visitChildren(WebForm.class,new IVisitor<WebForm>(){
              public Object component(              WebForm form){
                relinkAtForm(form);
                return IVisitor.CONTINUE_TRAVERSAL;
              }
            }
);
          }
          @Override protected void disableLink(          final ComponentTag tag){
            if (tag.getName().equalsIgnoreCase(""String_Node_Str"") || tag.getName().equalsIgnoreCase(""String_Node_Str"") || tag.getName().equalsIgnoreCase(""String_Node_Str"")) {
              tag.remove(""String_Node_Str"");
              tag.remove(""String_Node_Str"");
            }
          }
        }
;
        TabIndexHelper.setUpTabIndexAttributeModifier(link,tabSequenceIndex);
        if (item.getIteration() == 0)         link.add(new AttributeModifier(""String_Node_Str"",true,new Model<Boolean>(Boolean.TRUE)));
        link.setEnabled(holder.isEnabled() && WebTabPanel.this.isEnabled());
        ServoyTabIcon tabIcon=new ServoyTabIcon(""String_Node_Str"",holder,scriptable);
        link.add(tabIcon);
        Label label=new Label(""String_Node_Str"",new Model<String>(holder.getText()));
        label.setEscapeModelStrings(false);
        link.add(label);
        item.add(link);
        IModel<String> selectedOrDisabledClass=new AbstractReadOnlyModel<String>(){
          private static final long serialVersionUID=1L;
          @Override public String getObject(){
            if (!holder.isEnabled() || !WebTabPanel.this.isEnabled()) {
              if (currentForm == holder.getPanel()) {
                return ""String_Node_Str"";
              }
              return ""String_Node_Str"";
            }
 else {
              if (currentForm == holder.getPanel()) {
                return ""String_Node_Str"";
              }
              return ""String_Node_Str"";
            }
          }
        }
;
        item.add(new AttributeModifier(""String_Node_Str"",true,selectedOrDisabledClass));
        label.add(new StyleAppendingModifier(new Model<String>(){
          private static final long serialVersionUID=1L;
          @Override public String getObject(){
            String style=""String_Node_Str"";
            if (foreground != null) {
              style+=""String_Node_Str"" + PersistHelper.createColorString(foreground);
            }
            if (holder.getIcon() != null) {
              style+=""String_Node_Str"";
            }
            return style;
          }
        }
));
      }
    }
);
    add(new StyleAppendingModifier(new Model<String>(){
      private static final long serialVersionUID=1L;
      @Override public String getObject(){
        return ""String_Node_Str"";
      }
    }
));
    add(new AbstractServoyDefaultAjaxBehavior(){
      @Override protected void respond(      AjaxRequestTarget target){
      }
      @Override public void renderHead(      IHeaderResponse response){
        super.renderHead(response);
        boolean dontRearrangeHere=false;
        if (!(getRequestCycle().getRequestTarget() instanceof AjaxRequestTarget) && Utils.getAsBoolean(((MainPage)getPage()).getController().getApplication().getRuntimeProperties().get(""String_Node_Str""))) {
          Component parentForm=getParent();
          while ((parentForm != null) && !(parentForm instanceof WebForm))           parentForm=parentForm.getParent();
          if (parentForm != null) {
            int anch=((WebForm)parentForm).getAnchors(WebTabPanel.this.getMarkupId());
            if (anch != 0 && anch != IAnchorConstants.DEFAULT)             dontRearrangeHere=true;
          }
        }
        if (!dontRearrangeHere) {
          String jsCall=""String_Node_Str"" + WebTabPanel.this.getMarkupId() + ""String_Node_Str"";
          ClientProperties clp=((WebClientInfo)Session.get().getClientInfo()).getProperties();
          if (clp.isBrowserKonqueror() || clp.isBrowserSafari())           response.renderOnLoadJavascript(jsCall);
 else           response.renderOnDomReadyJavascript(jsCall);
        }
      }
    }
);
  }
  add(StyleAttributeModifierModel.INSTANCE);
  add(TooltipAttributeModifier.INSTANCE);
  this.scriptable=scriptable;
  ((ChangesRecorder)scriptable.getChangesRecorder()).setDefaultBorderAndPadding(null,TemplateGenerator.DEFAULT_LABEL_PADDING);
}","public WebTabPanel(IApplication application,final RuntimeTabPanel scriptable,String name,int orient,boolean oneTab){
  super(name);
  this.application=application;
  this.orient=orient;
  final boolean useAJAX=Utils.getAsBoolean(application.getRuntimeProperties().get(""String_Node_Str""));
  setOutputMarkupPlaceholderTag(true);
  if (orient != TabPanel.SPLIT_HORIZONTAL && orient != TabPanel.SPLIT_VERTICAL)   add(new Label(""String_Node_Str"",new Model<String>(""String_Node_Str"")));
  IModel<Integer> tabsModel=new AbstractReadOnlyModel<Integer>(){
    private static final long serialVersionUID=1L;
    @Override public Integer getObject(){
      return Integer.valueOf(allTabs.size());
    }
  }
;
  if (orient != TabPanel.HIDE && orient != TabPanel.SPLIT_HORIZONTAL && orient != TabPanel.SPLIT_VERTICAL && !(orient == TabPanel.DEFAULT && oneTab)) {
    add(new Loop(""String_Node_Str"",tabsModel){
      private static final long serialVersionUID=1L;
      @Override protected void populateItem(      LoopItem item){
        final WebTabHolder holder=allTabs.get(item.getIteration());
        MarkupContainer link=null;
        link=new ServoySubmitLink(""String_Node_Str"",useAJAX){
          private static final long serialVersionUID=1L;
          /** 
 * @see wicket.ajax.markup.html.AjaxFallbackLink#onClick(wicket.ajax.AjaxRequestTarget)
 */
          @Override public void onClick(          AjaxRequestTarget target){
            Page page=findPage();
            if (page != null) {
              setActiveTabPanel(holder.getPanel());
              if (target != null) {
                if (currentForm != null)                 addFormForFullAnchorRendering(currentForm.getWebForm(),(MainPage)page);
                relinkAtTabPanel(WebTabPanel.this);
                WebEventExecutor.generateResponse(target,page);
              }
            }
          }
          private void addFormForFullAnchorRendering(          WebForm form,          final MainPage mainPage){
            mainPage.addFormForFullAnchorRendering(form);
            form.visitChildren(WebTabPanel.class,new IVisitor<WebTabPanel>(){
              public Object component(              WebTabPanel tabPanel){
                if (tabPanel.currentForm != null)                 addFormForFullAnchorRendering(tabPanel.currentForm.getWebForm(),mainPage);
                return IVisitor.CONTINUE_TRAVERSAL_BUT_DONT_GO_DEEPER;
              }
            }
);
          }
          private void relinkAtForm(          WebForm form){
            form.visitChildren(WebTabPanel.class,new IVisitor<WebTabPanel>(){
              public Object component(              WebTabPanel wtp){
                relinkAtTabPanel(wtp);
                return IVisitor.CONTINUE_TRAVERSAL;
              }
            }
);
          }
          private void relinkAtTabPanel(          WebTabPanel wtp){
            wtp.relinkFormIfNeeded();
            wtp.visitChildren(WebForm.class,new IVisitor<WebForm>(){
              public Object component(              WebForm form){
                relinkAtForm(form);
                return IVisitor.CONTINUE_TRAVERSAL;
              }
            }
);
          }
          @Override protected void disableLink(          final ComponentTag tag){
            if (tag.getName().equalsIgnoreCase(""String_Node_Str"") || tag.getName().equalsIgnoreCase(""String_Node_Str"") || tag.getName().equalsIgnoreCase(""String_Node_Str"")) {
              tag.remove(""String_Node_Str"");
              tag.remove(""String_Node_Str"");
            }
          }
        }
;
        TabIndexHelper.setUpTabIndexAttributeModifier(link,tabSequenceIndex);
        if (item.getIteration() == 0)         link.add(new AttributeModifier(""String_Node_Str"",true,new Model<Boolean>(Boolean.TRUE)));
        link.setEnabled(holder.isEnabled() && WebTabPanel.this.isEnabled());
        ServoyTabIcon tabIcon=new ServoyTabIcon(""String_Node_Str"",holder,scriptable);
        link.add(tabIcon);
        Label label=new Label(""String_Node_Str"",new Model<String>(holder.getText()));
        label.setEscapeModelStrings(false);
        link.add(label);
        item.add(link);
        IModel<String> selectedOrDisabledClass=new AbstractReadOnlyModel<String>(){
          private static final long serialVersionUID=1L;
          @Override public String getObject(){
            if (!holder.isEnabled() || !WebTabPanel.this.isEnabled()) {
              if (currentForm == holder.getPanel()) {
                return ""String_Node_Str"";
              }
              return ""String_Node_Str"";
            }
 else {
              if (currentForm == holder.getPanel()) {
                return ""String_Node_Str"";
              }
              return ""String_Node_Str"";
            }
          }
        }
;
        item.add(new AttributeModifier(""String_Node_Str"",true,selectedOrDisabledClass));
        label.add(new StyleAppendingModifier(new Model<String>(){
          private static final long serialVersionUID=1L;
          @Override public String getObject(){
            String style=""String_Node_Str"";
            if (foreground != null) {
              style+=""String_Node_Str"" + PersistHelper.createColorString(foreground);
            }
            if (holder.getIcon() != null) {
              style+=""String_Node_Str"";
            }
            return style;
          }
        }
));
      }
    }
);
    add(new StyleAppendingModifier(new Model<String>(){
      private static final long serialVersionUID=1L;
      @Override public String getObject(){
        return ""String_Node_Str"";
      }
    }
));
    add(new AbstractServoyDefaultAjaxBehavior(){
      @Override protected void respond(      AjaxRequestTarget target){
      }
      @Override public void renderHead(      IHeaderResponse response){
        super.renderHead(response);
        boolean dontRearrangeHere=false;
        if (!(getRequestCycle().getRequestTarget() instanceof AjaxRequestTarget) && Utils.getAsBoolean(((MainPage)getPage()).getController().getApplication().getRuntimeProperties().get(""String_Node_Str""))) {
          Component parentForm=getParent();
          while ((parentForm != null) && !(parentForm instanceof WebForm))           parentForm=parentForm.getParent();
          if (parentForm != null) {
            int anch=((WebForm)parentForm).getAnchors(WebTabPanel.this.getMarkupId());
            if (anch != 0 && anch != IAnchorConstants.DEFAULT)             dontRearrangeHere=true;
          }
        }
        if (!dontRearrangeHere) {
          String jsCall=""String_Node_Str"" + WebTabPanel.this.getMarkupId() + ""String_Node_Str"";
          ClientProperties clp=((WebClientInfo)Session.get().getClientInfo()).getProperties();
          if (clp.isBrowserKonqueror() || clp.isBrowserSafari())           response.renderOnLoadJavascript(jsCall);
 else           response.renderOnDomReadyJavascript(jsCall);
        }
      }
      @Override public boolean isEnabled(      Component component){
        return WebClientSession.get().useAjax();
      }
    }
);
  }
  add(StyleAttributeModifierModel.INSTANCE);
  add(TooltipAttributeModifier.INSTANCE);
  this.scriptable=scriptable;
  ((ChangesRecorder)scriptable.getChangesRecorder()).setDefaultBorderAndPadding(null,TemplateGenerator.DEFAULT_LABEL_PADDING);
}",0.9912536443148688
143695,"/** 
 * Construct.
 * @param id The component's id
 * @param group The group of headers the new one will be added to
 * @param cellview
 */
public SortableCellViewHeader(Form form,final WebCellBasedView view,final String id,final SortableCellViewHeaderGroup group,AbstractBase cellview,boolean useAJAX,IApplication application){
  super(id);
  this.id=id;
  this.cellview=cellview;
  this.view=view;
  this.application=application;
  this.form=form;
  headerColumnTable=new WebMarkupContainer(""String_Node_Str"");
  headerColumnTable.add(labelResolver=new LabelResolverLink(""String_Node_Str"",useAJAX,group,id));
  labelResolver.add(new AttributeModifier(""String_Node_Str"",true,group));
  ChangesRecorder changesRecorder=new ChangesRecorder();
  changesRecorder.setBgcolor(view.getHeaderBgColor());
  changesRecorder.setFgcolor(view.getHeaderFgColor());
  changesRecorder.setFont(view.getHeaderFont());
  changesRecorder.setBorder(view.getHeaderBorder());
  final Properties changes=changesRecorder.getChanges();
  if (changes.size() > 0) {
    labelResolver.add(new StyleAppendingModifier(new Model<String>(){
      @Override public String getObject(){
        StringBuilder headerStyle=new StringBuilder();
        Iterator<Entry<Object,Object>> headerStyleIte=changes.entrySet().iterator();
        Entry<Object,Object> headerStyleEntry;
        while (headerStyleIte.hasNext()) {
          headerStyleEntry=headerStyleIte.next();
          headerStyle.append(headerStyleEntry.getKey()).append(""String_Node_Str"").append(headerStyleEntry.getValue()).append(""String_Node_Str"");
        }
        return headerStyle.toString();
      }
    }
));
  }
  boolean blockResize=false;
  Iterator<IPersist> iter=cellview.getAllObjects();
  while (iter.hasNext()) {
    IPersist element=iter.next();
    if (element instanceof ISupportAnchors) {
      if (id.equals(ComponentFactory.getWebID(form,element))) {
        int anchors=((ISupportAnchors)element).getAnchors();
        if (((anchors & IAnchorConstants.EAST) == 0) || ((anchors & IAnchorConstants.WEST) == 0)) {
          blockResize=true;
        }
        isUnmovable=((anchors & IAnchorConstants.NORTH) == IAnchorConstants.NORTH) && ((anchors & IAnchorConstants.SOUTH) == IAnchorConstants.SOUTH);
        break;
      }
    }
  }
  if (((!(cellview instanceof Portal) || ((Portal)cellview).getReorderable()) && useAJAX) && !isUnmovable()) {
    DraggableBehavior dragMoveBehavior=new DraggableBehavior(){
      private int startX;
      @Override protected void onDragEnd(      String componentId,      int x,      int y,      AjaxRequestTarget ajaxRequestTarget){
        view.moveColumn(SortableCellViewHeader.this,x - startX,ajaxRequestTarget);
        labelResolver.setDropped(true);
      }
      @Override protected boolean onDragStart(      String componentId,      int x,      int y,      AjaxRequestTarget ajaxRequestTarget){
        startX=x;
        return true;
      }
      @Override protected void onDrop(      String componentId,      String targetid,      int x,      int y,      AjaxRequestTarget ajaxRequestTarget){
      }
      @Override protected void onDropHover(      String componentId,      String targeid,      AjaxRequestTarget ajaxRequestTarget){
      }
    }
;
    dragMoveBehavior.setRenderOnHead(false);
    dragMoveBehavior.setYConstraint(true);
    dragMoveBehavior.setUseProxy(true);
    dragMoveBehavior.setResizeProxyFrame(true);
    headerColumnTable.add(dragMoveBehavior);
  }
  if (cellview instanceof Portal && !((Portal)cellview).getSortable()) {
    labelResolver.setSortable(false);
    resizeBar=new WebMarkupContainer(""String_Node_Str"");
  }
 else {
    resizeBar=new Image(""String_Node_Str"",view.R_ARROW_OFF);
  }
  if (!blockResize && (!(cellview instanceof Portal) || ((Portal)cellview).getResizeble()) && useAJAX) {
    DraggableBehavior dragResizeBehavior=new DraggableBehavior(){
      private int startX;
      @Override protected void onDragEnd(      String componentId,      int x,      int y,      AjaxRequestTarget ajaxRequestTarget){
        view.resizeColumn(SortableCellViewHeader.this,x - startX);
      }
      @Override protected boolean onDragStart(      String componentId,      int x,      int y,      AjaxRequestTarget ajaxRequestTarget){
        startX=x;
        return true;
      }
      @Override protected void onDrop(      String componentId,      String targetid,      int x,      int y,      AjaxRequestTarget ajaxRequestTarget){
      }
      @Override protected void onDropHover(      String componentId,      String targeid,      AjaxRequestTarget ajaxRequestTarget){
      }
    }
;
    dragResizeBehavior.setRenderOnHead(false);
    dragResizeBehavior.setYConstraint(true);
    resizeBar.add(dragResizeBehavior);
    resizeBar.add(new AttributeModifier(""String_Node_Str"",true,new Model<String>(""String_Node_Str"")));
  }
 else {
    resizeBar.add(new AttributeModifier(""String_Node_Str"",true,new Model<String>(""String_Node_Str"")));
  }
  headerColumnTable.add(resizeBar);
  add(headerColumnTable);
  try {
    Iterator<IPersist> it2=cellview.getAllObjects(PositionComparator.XY_PERSIST_COMPARATOR);
    int height=-1;
    while (it2.hasNext()) {
      IPersist element=it2.next();
      if (id.equals(ComponentFactory.getWebID(form,element))) {
        final GraphicalComponent gc=(GraphicalComponent)view.labelsFor.get(((ISupportName)element).getName());
        if (gc != null && height < 0) {
          height=gc.getSize().height;
        }
        if (gc != null && gc.getImageMediaID() > 0) {
          final int media_id=gc.getImageMediaID();
          final Media media=application.getFlattenedSolution().getMedia(media_id);
          if (media != null) {
            final int headerHeight=height;
            add(new StyleAppendingModifier(new Model<String>(){
              @Override public String getObject(){
                ResourceReference iconReference=new ResourceReference(media.getName()){
                  private static final long serialVersionUID=1L;
                  @Override protected Resource newResource(){
                    BufferedDynamicImageResource imgRes=new BufferedDynamicImageResource();
                    MediaResource tempIcon=new MediaResource(media.getMediaData(),gc.getMediaOptions());
                    (tempIcon).checkResize(new Dimension(width,headerHeight));
                    ImageIcon icon=new ImageIcon(tempIcon.resized);
                    imgRes.setImage(ImageLoader.imageToBufferedImage((icon).getImage()));
                    return imgRes;
                  }
                }
;
                return ""String_Node_Str"" + urlFor(iconReference) + ""String_Node_Str""+ media_id+ ""String_Node_Str"";
              }
            }
));
          }
        }
 else         if (gc != null && gc.getToolTipText() != null) {
          tooltip=application.getI18NMessageIfPrefixed(gc.getToolTipText());
          add(TooltipAttributeModifier.INSTANCE);
        }
        if (gc != null) {
          int style_valign=-1;
          Pair<FixedStyleSheet,javax.swing.text.Style> styleInfo=ComponentFactory.getStyleForBasicComponent(application,gc,form);
          if (styleInfo != null) {
            FixedStyleSheet ss=styleInfo.getLeft();
            javax.swing.text.Style s=styleInfo.getRight();
            if (ss != null && s != null) {
              style_valign=ss.getVAlign(s);
            }
          }
          final int styleValign=style_valign;
          add(new StyleAppendingModifier(new Model<String>(){
            private static final long serialVersionUID=1L;
            @Override public String getObject(){
              int valign=ISupportTextSetup.CENTER;
              if (gc.getVerticalAlignment() >= 0) {
                valign=gc.getVerticalAlignment();
              }
 else               if (styleValign >= 0) {
                valign=styleValign;
              }
              return ""String_Node_Str"" + TemplateGenerator.getVerticalAlignValue(valign) + ""String_Node_Str"";
            }
          }
));
        }
        if (gc != null && gc.getOnRightClickMethodID() > 0) {
          executor=new WebEventExecutor(this,useAJAX);
          executor.setRightClickCmd(String.valueOf(gc.getOnRightClickMethodID()),null);
          labelName=gc.getName();
        }
      }
    }
  }
 catch (  Exception ex) {
    Debug.error(ex);
  }
  Boolean dir=group.get(id);
  if (dir != null && form.getOnSortCmdMethodID() >= 0) {
    setResizeImage(dir ? view.R_ARROW_DOWN : view.R_ARROW_UP);
  }
}","/** 
 * Construct.
 * @param id The component's id
 * @param group The group of headers the new one will be added to
 * @param cellview
 */
public SortableCellViewHeader(Form form,final WebCellBasedView view,final String id,final SortableCellViewHeaderGroup group,AbstractBase cellview,boolean useAJAX,IApplication application){
  super(id);
  this.id=id;
  this.cellview=cellview;
  this.view=view;
  this.application=application;
  this.form=form;
  headerColumnTable=new WebMarkupContainer(""String_Node_Str"");
  headerColumnTable.add(labelResolver=new LabelResolverLink(""String_Node_Str"",useAJAX,group,id));
  labelResolver.add(new AttributeModifier(""String_Node_Str"",true,group));
  ChangesRecorder changesRecorder=new ChangesRecorder();
  changesRecorder.setBgcolor(view.getHeaderBgColor());
  changesRecorder.setBorder(view.getHeaderBorder());
  final Properties changes=changesRecorder.getChanges();
  if (changes.size() > 0)   applyStyleChanges(headerColumnTable,changes);
  ChangesRecorder textChangesRecorder=new ChangesRecorder();
  textChangesRecorder.setFgcolor(view.getHeaderFgColor());
  textChangesRecorder.setFont(view.getHeaderFont());
  final Properties textChanges=textChangesRecorder.getChanges();
  if (textChanges.size() > 0)   applyStyleChanges(labelResolver,textChanges);
  boolean blockResize=false;
  Iterator<IPersist> iter=cellview.getAllObjects();
  while (iter.hasNext()) {
    IPersist element=iter.next();
    if (element instanceof ISupportAnchors) {
      if (id.equals(ComponentFactory.getWebID(form,element))) {
        int anchors=((ISupportAnchors)element).getAnchors();
        if (((anchors & IAnchorConstants.EAST) == 0) || ((anchors & IAnchorConstants.WEST) == 0)) {
          blockResize=true;
        }
        isUnmovable=((anchors & IAnchorConstants.NORTH) == IAnchorConstants.NORTH) && ((anchors & IAnchorConstants.SOUTH) == IAnchorConstants.SOUTH);
        break;
      }
    }
  }
  if (((!(cellview instanceof Portal) || ((Portal)cellview).getReorderable()) && useAJAX) && !isUnmovable()) {
    DraggableBehavior dragMoveBehavior=new DraggableBehavior(){
      private int startX;
      @Override protected void onDragEnd(      String componentId,      int x,      int y,      AjaxRequestTarget ajaxRequestTarget){
        view.moveColumn(SortableCellViewHeader.this,x - startX,ajaxRequestTarget);
        labelResolver.setDropped(true);
      }
      @Override protected boolean onDragStart(      String componentId,      int x,      int y,      AjaxRequestTarget ajaxRequestTarget){
        startX=x;
        return true;
      }
      @Override protected void onDrop(      String componentId,      String targetid,      int x,      int y,      AjaxRequestTarget ajaxRequestTarget){
      }
      @Override protected void onDropHover(      String componentId,      String targeid,      AjaxRequestTarget ajaxRequestTarget){
      }
    }
;
    dragMoveBehavior.setRenderOnHead(false);
    dragMoveBehavior.setYConstraint(true);
    dragMoveBehavior.setUseProxy(true);
    dragMoveBehavior.setResizeProxyFrame(true);
    headerColumnTable.add(dragMoveBehavior);
  }
  if (cellview instanceof Portal && !((Portal)cellview).getSortable()) {
    labelResolver.setSortable(false);
    resizeBar=new WebMarkupContainer(""String_Node_Str"");
  }
 else {
    resizeBar=new Image(""String_Node_Str"",view.R_ARROW_OFF);
  }
  if (!blockResize && (!(cellview instanceof Portal) || ((Portal)cellview).getResizeble()) && useAJAX) {
    DraggableBehavior dragResizeBehavior=new DraggableBehavior(){
      private int startX;
      @Override protected void onDragEnd(      String componentId,      int x,      int y,      AjaxRequestTarget ajaxRequestTarget){
        view.resizeColumn(SortableCellViewHeader.this,x - startX);
      }
      @Override protected boolean onDragStart(      String componentId,      int x,      int y,      AjaxRequestTarget ajaxRequestTarget){
        startX=x;
        return true;
      }
      @Override protected void onDrop(      String componentId,      String targetid,      int x,      int y,      AjaxRequestTarget ajaxRequestTarget){
      }
      @Override protected void onDropHover(      String componentId,      String targeid,      AjaxRequestTarget ajaxRequestTarget){
      }
    }
;
    dragResizeBehavior.setRenderOnHead(false);
    dragResizeBehavior.setYConstraint(true);
    resizeBar.add(dragResizeBehavior);
    resizeBar.add(new AttributeModifier(""String_Node_Str"",true,new Model<String>(""String_Node_Str"")));
  }
 else {
    resizeBar.add(new AttributeModifier(""String_Node_Str"",true,new Model<String>(""String_Node_Str"")));
  }
  headerColumnTable.add(resizeBar);
  add(headerColumnTable);
  try {
    Iterator<IPersist> it2=cellview.getAllObjects(PositionComparator.XY_PERSIST_COMPARATOR);
    int height=-1;
    while (it2.hasNext()) {
      IPersist element=it2.next();
      if (id.equals(ComponentFactory.getWebID(form,element))) {
        final GraphicalComponent gc=(GraphicalComponent)view.labelsFor.get(((ISupportName)element).getName());
        if (gc != null && height < 0) {
          height=gc.getSize().height;
        }
        if (gc != null && gc.getImageMediaID() > 0) {
          final int media_id=gc.getImageMediaID();
          final Media media=application.getFlattenedSolution().getMedia(media_id);
          if (media != null) {
            final int headerHeight=height;
            add(new StyleAppendingModifier(new Model<String>(){
              @Override public String getObject(){
                ResourceReference iconReference=new ResourceReference(media.getName()){
                  private static final long serialVersionUID=1L;
                  @Override protected Resource newResource(){
                    BufferedDynamicImageResource imgRes=new BufferedDynamicImageResource();
                    MediaResource tempIcon=new MediaResource(media.getMediaData(),gc.getMediaOptions());
                    (tempIcon).checkResize(new Dimension(width,headerHeight));
                    ImageIcon icon=new ImageIcon(tempIcon.resized);
                    imgRes.setImage(ImageLoader.imageToBufferedImage((icon).getImage()));
                    return imgRes;
                  }
                }
;
                return ""String_Node_Str"" + urlFor(iconReference) + ""String_Node_Str""+ media_id+ ""String_Node_Str"";
              }
            }
));
          }
        }
 else         if (gc != null && gc.getToolTipText() != null) {
          tooltip=application.getI18NMessageIfPrefixed(gc.getToolTipText());
          add(TooltipAttributeModifier.INSTANCE);
        }
        if (gc != null) {
          int style_valign=-1;
          Pair<FixedStyleSheet,javax.swing.text.Style> styleInfo=ComponentFactory.getStyleForBasicComponent(application,gc,form);
          if (styleInfo != null) {
            FixedStyleSheet ss=styleInfo.getLeft();
            javax.swing.text.Style s=styleInfo.getRight();
            if (ss != null && s != null) {
              style_valign=ss.getVAlign(s);
            }
          }
          final int styleValign=style_valign;
          add(new StyleAppendingModifier(new Model<String>(){
            private static final long serialVersionUID=1L;
            @Override public String getObject(){
              int valign=ISupportTextSetup.CENTER;
              if (gc.getVerticalAlignment() >= 0) {
                valign=gc.getVerticalAlignment();
              }
 else               if (styleValign >= 0) {
                valign=styleValign;
              }
              return ""String_Node_Str"" + TemplateGenerator.getVerticalAlignValue(valign) + ""String_Node_Str"";
            }
          }
));
        }
        if (gc != null && gc.getOnRightClickMethodID() > 0) {
          executor=new WebEventExecutor(this,useAJAX);
          executor.setRightClickCmd(String.valueOf(gc.getOnRightClickMethodID()),null);
          labelName=gc.getName();
        }
      }
    }
  }
 catch (  Exception ex) {
    Debug.error(ex);
  }
  Boolean dir=group.get(id);
  if (dir != null && form.getOnSortCmdMethodID() >= 0) {
    setResizeImage(dir ? view.R_ARROW_DOWN : view.R_ARROW_UP);
  }
}",0.927365575247822
143696,"private void setUpComponent(Component comp,IRecordInternal record,Object compColor,Object fgColor,Object compFont,Object compBorder,int visibleRowIndex){
  if (tabIndex < 0) {
    TabIndexHelper.setUpTabIndexAttributeModifier(comp,tabIndex);
  }
 else {
    if (elementTabIndexes.size() > 0) {
      Integer idx=elementTabIndexes.get(cellToElement.get(comp));
      if (idx == null) {
        TabIndexHelper.setUpTabIndexAttributeModifier(comp,ISupportWebTabSeq.SKIP);
      }
 else {
        TabIndexHelper.setUpTabIndexAttributeModifier(comp,tabIndex + 1 + visibleRowIndex * elementTabIndexes.size() + idx.intValue());
      }
    }
 else {
      TabIndexHelper.setUpTabIndexAttributeModifier(comp,tabIndex + 1);
    }
  }
  if (compColor != null) {
    MarkupContainer cellContainer=comp.getParent();
    String compColorStr=compColor.toString();
    if (cellContainer instanceof CellContainer) {
      cellContainer.add(new StyleAppendingModifier(new Model<String>(""String_Node_Str"" + compColorStr)));
    }
  }
  WebCellBasedView.this.applyStyleOnComponent(comp,compColor,fgColor,compFont,compBorder);
  if (scriptable.js_isReadOnly() && validationEnabled && comp instanceof IScriptableProvider&& ((IScriptableProvider)comp).getScriptObject() instanceof IScriptReadOnlyMethods) {
    ((IScriptReadOnlyMethods)((IScriptableProvider)comp).getScriptObject()).js_setReadOnly(true);
  }
  List<Component> readOnlyComponents=((WebForm)fc.getFormUI()).getReadOnlyComponents();
  if (readOnlyComponents.indexOf(WebCellBasedView.this) != -1 && readOnlyComponents.indexOf(comp) == -1)   readOnlyComponents.add(comp);
  if (!isEnabled() && comp instanceof IComponent) {
    ((IComponent)comp).setComponentEnabled(false);
  }
  if (comp instanceof IDisplayRelatedData && record != null) {
    ((IDisplayRelatedData)comp).setRecord(record,true);
  }
  MarkupContainer parent=comp.getParent();
  if (parent instanceof CellContainer) {
    parent.setVisible(comp.isVisible());
  }
  if (compBorder != null) {
    Object elem=WebCellBasedView.this.cellToElement.get(comp);
    Object colId=WebCellBasedView.this.elementToColumnIdentifierComponent.get(elem);
    final int idx=WebCellBasedView.this.visibleColummIdentifierComponents.indexOf(colId);
    comp.add(new StyleAppendingModifier(new Model<String>(){
      @Override public String getObject(){
        if (idx == 0) {
          return ""String_Node_Str"";
        }
 else         if (idx == WebCellBasedView.this.visibleColummIdentifierComponents.size() - 1) {
          return ""String_Node_Str"";
        }
        return ""String_Node_Str"";
      }
    }
));
  }
}","private void setUpComponent(Component comp,IRecordInternal record,Object compColor,Object fgColor,Object compFont,Object compBorder,int visibleRowIndex){
  if (tabIndex < 0) {
    TabIndexHelper.setUpTabIndexAttributeModifier(comp,tabIndex);
  }
 else {
    if (elementTabIndexes.size() > 0) {
      Integer idx=elementTabIndexes.get(cellToElement.get(comp));
      if (idx == null) {
        TabIndexHelper.setUpTabIndexAttributeModifier(comp,ISupportWebTabSeq.SKIP);
      }
 else {
        TabIndexHelper.setUpTabIndexAttributeModifier(comp,tabIndex + 1 + visibleRowIndex * elementTabIndexes.size() + idx.intValue());
      }
    }
 else {
      TabIndexHelper.setUpTabIndexAttributeModifier(comp,tabIndex + 1);
    }
  }
  if (compColor != null) {
    MarkupContainer cellContainer=comp.getParent();
    String compColorStr=compColor.toString();
    if (cellContainer instanceof CellContainer) {
      cellContainer.add(new StyleAppendingModifier(new Model<String>(""String_Node_Str"" + compColorStr)));
    }
  }
  WebCellBasedView.this.applyStyleOnComponent(comp,compColor,fgColor,compFont,compBorder);
  if (scriptable.js_isReadOnly() && validationEnabled && comp instanceof IScriptableProvider&& ((IScriptableProvider)comp).getScriptObject() instanceof IScriptReadOnlyMethods) {
    ((IScriptReadOnlyMethods)((IScriptableProvider)comp).getScriptObject()).js_setReadOnly(true);
  }
  List<Component> readOnlyComponents=((WebForm)fc.getFormUI()).getReadOnlyComponents();
  if (readOnlyComponents.indexOf(WebCellBasedView.this) != -1 && readOnlyComponents.indexOf(comp) == -1)   readOnlyComponents.add(comp);
  if (!isEnabled() && comp instanceof IComponent) {
    ((IComponent)comp).setComponentEnabled(false);
  }
  if (comp instanceof IDisplayRelatedData && record != null) {
    ((IDisplayRelatedData)comp).setRecord(record,true);
  }
  MarkupContainer parent=comp.getParent();
  if (parent instanceof CellContainer) {
    parent.setVisible(comp.isVisible());
  }
  Properties borderProperties=new Properties();
  if (compBorder != null) {
    ComponentFactoryHelper.createBorderCSSProperties((String)compBorder,borderProperties);
  }
 else {
    if (comp instanceof IComponent) {
      Border cBorder=((IComponent)comp).getBorder();
      if (cBorder != null) {
        ComponentFactoryHelper.createBorderCSSProperties(ComponentFactoryHelper.createBorderString(cBorder),borderProperties);
      }
 else {
        borderProperties.put(""String_Node_Str"",""String_Node_Str"");
        borderProperties.put(""String_Node_Str"",""String_Node_Str"");
        borderProperties.put(""String_Node_Str"",""String_Node_Str"");
      }
    }
  }
  if (borderProperties.size() > 0) {
    String borderWidth=getFirstToken(borderProperties.getProperty(""String_Node_Str""));
    String borderStyle=borderProperties.getProperty(""String_Node_Str"");
    if (borderStyle == null)     borderStyle=""String_Node_Str"";
    String borderColor=getFirstToken(borderProperties.getProperty(""String_Node_Str""));
    final String borderDef=new StringBuilder(borderWidth).append(""String_Node_Str"").append(borderStyle).append(""String_Node_Str"").append(borderColor).toString();
    Object elem=WebCellBasedView.this.cellToElement.get(comp);
    Object colId=WebCellBasedView.this.elementToColumnIdentifierComponent.get(elem);
    final int idx=WebCellBasedView.this.visibleColummIdentifierComponents.indexOf(colId);
    comp.add(new StyleAppendingModifier(new Model<String>(){
      @Override public String getObject(){
        StringBuilder style=new StringBuilder(""String_Node_Str"").append(borderDef).append(""String_Node_Str"").append(borderDef);
        if (idx == 0) {
          style.append(""String_Node_Str"").append(borderDef);
        }
 else         if (idx == WebCellBasedView.this.visibleColummIdentifierComponents.size() - 1) {
          style.append(""String_Node_Str"").append(borderDef);
        }
        return style.toString();
      }
    }
));
  }
}",0.7887410126969558
143697,"public String getRowSelectionScript(){
  if (currentData == null)   return null;
  List<Integer> indexToUpdate;
  if (!hasOnRender && (bgColorScript != null || (getRowSelectedStyle() != null && getRowSelectedStyle().getAttributeCount() > 0)) && (indexToUpdate=getIndexToUpdate()) != null) {
    int firstRow=table.getCurrentPage() * table.getRowsPerPage();
    int lastRow=firstRow + table.getViewSize() - 1;
    int[] newSelectedIndexes=getSelectedIndexes();
    AppendingStringBuffer sab=new AppendingStringBuffer();
    for (    int rowIdx : indexToUpdate) {
      if (rowIdx >= firstRow && rowIdx <= lastRow) {
        ListItem<IRecordInternal> selectedListItem=(ListItem<IRecordInternal>)table.get(Integer.toString(rowIdx));
        if (selectedListItem != null) {
          String selectedId=selectedListItem.getMarkupId();
          boolean isSelected=Arrays.binarySearch(newSelectedIndexes,rowIdx) >= 0;
          Object selectedColor=getListItemBgColor(selectedListItem,isSelected);
          Object selectedFgColor=getListItemFgColor(selectedListItem,isSelected);
          Object selectedFont=getListItemFont(selectedListItem,isSelected);
          Object selectedBorder=getListItemBorder(selectedListItem,isSelected);
          selectedColor=(selectedColor == null ? ""String_Node_Str"" : selectedColor.toString());
          selectedFgColor=(selectedFgColor == null) ? ""String_Node_Str"" : selectedFgColor.toString();
          String fstyle=""String_Node_Str"", fweight=""String_Node_Str"", fsize=""String_Node_Str"", ffamily=""String_Node_Str"";
          if (selectedFont != null) {
            Pair<String,String> fontCSSProps[]=PersistHelper.createFontCSSProperties(selectedFont.toString());
            for (            Pair<String,String> fontCSSProp : fontCSSProps) {
              if (fontCSSProp != null) {
                String key=fontCSSProp.getLeft();
                String value=fontCSSProp.getRight();
                if (value == null)                 value=""String_Node_Str"";
                if (""String_Node_Str"".equals(key))                 fstyle=value;
 else                 if (""String_Node_Str"".equals(key))                 fweight=value;
 else                 if (""String_Node_Str"".equals(key))                 fsize=value;
 else                 if (""String_Node_Str"".equals(key))                 ffamily=value;
              }
            }
          }
          String bstyle=""String_Node_Str"", bwidth=""String_Node_Str"", bcolor=""String_Node_Str"";
          if (selectedBorder != null) {
            Properties borderProperties=new Properties();
            ComponentFactoryHelper.createBorderCSSProperties(selectedBorder.toString(),borderProperties);
            bstyle=borderProperties.getProperty(""String_Node_Str"");
            if (bstyle == null)             bstyle=""String_Node_Str"";
            bwidth=borderProperties.getProperty(""String_Node_Str"");
            if (bwidth == null)             bwidth=""String_Node_Str"";
            bcolor=borderProperties.getProperty(""String_Node_Str"");
            if (bcolor == null)             bcolor=""String_Node_Str"";
          }
          sab.append(""String_Node_Str"").append(selectedId).append(""String_Node_Str"").append(selectedColor).append(""String_Node_Str"").append(selectedFgColor).append(""String_Node_Str"").append(fstyle).append(""String_Node_Str"").append(fweight).append(""String_Node_Str"").append(fsize).append(""String_Node_Str"").append(ffamily).append(""String_Node_Str"").append(bstyle).append(""String_Node_Str"").append(bwidth).append(""String_Node_Str"").append(bcolor).append(""String_Node_Str"");
        }
      }
    }
    String rowSelectionScript=sab.toString();
    if (rowSelectionScript.length() > 0)     return rowSelectionScript;
  }
  return null;
}","public String getRowSelectionScript(){
  if (currentData == null)   return null;
  List<Integer> indexToUpdate;
  if (!hasOnRender && (bgColorScript != null || (getRowSelectedStyle() != null && getRowSelectedStyle().getAttributeCount() > 0)) && (indexToUpdate=getIndexToUpdate()) != null) {
    int firstRow=table.getCurrentPage() * table.getRowsPerPage();
    int lastRow=firstRow + table.getViewSize() - 1;
    int[] newSelectedIndexes=getSelectedIndexes();
    AppendingStringBuffer sab=new AppendingStringBuffer();
    for (    int rowIdx : indexToUpdate) {
      if (rowIdx >= firstRow && rowIdx <= lastRow) {
        ListItem<IRecordInternal> selectedListItem=(ListItem<IRecordInternal>)table.get(Integer.toString(rowIdx));
        if (selectedListItem != null) {
          String selectedId=selectedListItem.getMarkupId();
          boolean isSelected=Arrays.binarySearch(newSelectedIndexes,rowIdx) >= 0;
          Object selectedColor=getListItemBgColor(selectedListItem,isSelected);
          Object selectedFgColor=getListItemFgColor(selectedListItem,isSelected);
          Object selectedFont=getListItemFont(selectedListItem,isSelected);
          Object selectedBorder=getListItemBorder(selectedListItem,isSelected);
          selectedColor=(selectedColor == null ? ""String_Node_Str"" : selectedColor.toString());
          selectedFgColor=(selectedFgColor == null) ? ""String_Node_Str"" : selectedFgColor.toString();
          String fstyle=""String_Node_Str"", fweight=""String_Node_Str"", fsize=""String_Node_Str"", ffamily=""String_Node_Str"";
          if (selectedFont != null) {
            Pair<String,String> fontCSSProps[]=PersistHelper.createFontCSSProperties(selectedFont.toString());
            for (            Pair<String,String> fontCSSProp : fontCSSProps) {
              if (fontCSSProp != null) {
                String key=fontCSSProp.getLeft();
                String value=fontCSSProp.getRight();
                if (value == null)                 value=""String_Node_Str"";
                if (""String_Node_Str"".equals(key))                 fstyle=value;
 else                 if (""String_Node_Str"".equals(key))                 fweight=value;
 else                 if (""String_Node_Str"".equals(key))                 fsize=value;
 else                 if (""String_Node_Str"".equals(key))                 ffamily=value;
              }
            }
          }
          String bstyle=""String_Node_Str"", bwidth=""String_Node_Str"", bcolor=""String_Node_Str"";
          if (selectedBorder != null) {
            Properties borderProperties=new Properties();
            ComponentFactoryHelper.createBorderCSSProperties(selectedBorder.toString(),borderProperties);
            bstyle=borderProperties.getProperty(""String_Node_Str"");
            if (bstyle == null)             bstyle=""String_Node_Str"";
            bwidth=borderProperties.getProperty(""String_Node_Str"");
            bwidth=getFirstToken(bwidth);
            bcolor=borderProperties.getProperty(""String_Node_Str"");
            bcolor=getFirstToken(bcolor);
          }
 else {
          }
          sab.append(""String_Node_Str"").append(selectedId).append(""String_Node_Str"").append(selectedColor).append(""String_Node_Str"").append(selectedFgColor).append(""String_Node_Str"").append(fstyle).append(""String_Node_Str"").append(fweight).append(""String_Node_Str"").append(fsize).append(""String_Node_Str"").append(ffamily).append(""String_Node_Str"").append(bstyle).append(""String_Node_Str"").append(bwidth).append(""String_Node_Str"").append(bcolor).append(""String_Node_Str"");
        }
      }
    }
    String rowSelectionScript=sab.toString();
    if (rowSelectionScript.length() > 0)     return rowSelectionScript;
  }
  return null;
}",0.969656283566058
143698,"private void applyStyleOnComponent(Component comp,Object bgColor,Object fgColor,Object compFont,Object compBorder){
  if (comp instanceof IScriptableProvider) {
    IScriptable s=((IScriptableProvider)comp).getScriptObject();
    if (s instanceof IScriptBaseMethods) {
      IScriptBaseMethods sbm=(IScriptBaseMethods)s;
      String newBgColor=bgColor != null ? bgColor.toString() : null;
      sbm.js_setBgcolor(newBgColor);
      String newFgColor=fgColor != null ? fgColor.toString() : null;
      sbm.js_setFgcolor(newFgColor);
      String newCompFont=compFont != null ? compFont.toString() : null;
      sbm.js_setFont(newCompFont);
      String newBorder=compBorder != null ? compBorder.toString() : null;
      if (newBorder != null)       sbm.js_setBorder(newBorder);
    }
  }
}","private void applyStyleOnComponent(Component comp,Object bgColor,Object fgColor,Object compFont,Object compBorder){
  if (comp instanceof IScriptableProvider) {
    IScriptable s=((IScriptableProvider)comp).getScriptObject();
    if (s instanceof IScriptBaseMethods) {
      IScriptBaseMethods sbm=(IScriptBaseMethods)s;
      String newBgColor=bgColor != null ? bgColor.toString() : null;
      sbm.js_setBgcolor(newBgColor);
      String newFgColor=fgColor != null ? fgColor.toString() : null;
      sbm.js_setFgcolor(newFgColor);
      String newCompFont=compFont != null ? compFont.toString() : null;
      sbm.js_setFont(newCompFont);
    }
  }
}",0.9041666666666668
143699,"/** 
 * returns the contents of the database error message if an error occurred
 * @deprecated As of release 5.0, replaced by {@link #getException()}
 * @sample 
 */
@Deprecated public String js_getExceptionMsg(){
  return (exception == null ? null : exception.getMessage());
}","/** 
 * returns the contents of the database error message if an error occurred
 * @deprecated As of release 5.0, replaced by {@link #getException()}
 */
@Deprecated public String js_getExceptionMsg(){
  return (exception == null ? null : exception.getMessage());
}",0.977859778597786
143700,"/** 
 * Returns the result of the drag action. 
 * @sample function onDragEnd(event) { var dragResult = event.getDragResult(); if(dragResult == DRAGNDROP.NONE) { // the drag was canceled } else if(dragResult == DRAGNDROP.COPY) { // the drag ended with a copy action } else if(dragResult == DRAGNDROP.MOVE) { // the drag ended with a move action }
 * @return a DRAGNDROP constant, representing the result of the drag action
 */
public int js_getDragResult(){
  return this.dragResult;
}","/** 
 * Returns the result of the drag action. 
 * @sample function onDragEnd(event) { var dragResult = event.getDragResult(); if(dragResult == DRAGNDROP.NONE) { // the drag was canceled } else if(dragResult == DRAGNDROP.COPY) { // the drag ended with a copy action } else if(dragResult == DRAGNDROP.MOVE) { // the drag ended with a move action } }
 * @return a DRAGNDROP constant, representing the result of the drag action
 */
public int js_getDragResult(){
  return this.dragResult;
}",0.9979423868312756
143701,"/** 
 * Returns whether this calculation is a stored one or not.
 * @sample var calc = solutionModel.newCalculation(""function myCalculation() { return 123; }"", JSVariable.INTEGER, ""db:/example_data/customers""); if (calc.isStored()) application.output(""The calculation is stored""). else application.output(""The calculation is not stored"").
 * @return true if the calculation is stored, false otherwise
 */
public boolean js_isStored(){
  try {
    return scriptCalculation.getTable().getColumn(scriptCalculation.getName()) != null;
  }
 catch (  RepositoryException e) {
    Debug.error(e);
  }
  return false;
}","/** 
 * Returns whether this calculation is a stored one or not.
 * @sample var calc = solutionModel.newCalculation(""function myCalculation() { return 123; }"", JSVariable.INTEGER, ""db:/example_data/customers""); if (calc.isStored()) application.output(""The calculation is stored""); else application.output(""The calculation is not stored"");
 * @return true if the calculation is stored, false otherwise
 */
public boolean js_isStored(){
  try {
    return scriptCalculation.getTable().getColumn(scriptCalculation.getName()) != null;
  }
 catch (  RepositoryException e) {
    Debug.error(e);
  }
  return false;
}",0.9967266775777414
143702,"/** 
 * Creates a new foundset method with the specified code.
 * @sample var method = solutionModel.getDataSourceNode(""db:/example_data/orders"").newMethod(""function doubleSize() { return 2*getSize(); }"", application.output('Doubled orders for this customer: '+customers_to_orders.doubleSize())
 * @param code the specified code for the foundset method
 * @return a JSMethod object
 */
public JSMethod js_newMethod(String code){
  try {
    FlattenedSolution fs=application.getFlattenedSolution();
    TableNode tablenode=fs.getSolutionCopyTableNode(dataSource);
    if (tablenode == null)     throw new RuntimeException(""String_Node_Str"" + dataSource);
    String name=JSMethod.parseName(code);
    ScriptMethod method=tablenode.createNewFoundsetMethod(new ScriptNameValidator(fs),name);
    method.setDeclaration(code);
    ((FoundSetManager)application.getFoundSetManager()).reloadFoundsetMethod(dataSource,method);
    return new JSMethod(this,method,application,true);
  }
 catch (  RepositoryException e) {
    throw new RuntimeException(e);
  }
}","/** 
 * Creates a new foundset method with the specified code.
 * @sample var method = solutionModel.getDataSourceNode(""db:/example_data/orders"").newMethod(""function doubleSize() { return 2*getSize(); }""), application.output('Doubled orders for this customer: '+customers_to_orders.doubleSize())
 * @param code the specified code for the foundset method
 * @return a JSMethod object
 */
public JSMethod js_newMethod(String code){
  try {
    FlattenedSolution fs=application.getFlattenedSolution();
    TableNode tablenode=fs.getSolutionCopyTableNode(dataSource);
    if (tablenode == null)     throw new RuntimeException(""String_Node_Str"" + dataSource);
    String name=JSMethod.parseName(code);
    ScriptMethod method=tablenode.createNewFoundsetMethod(new ScriptNameValidator(fs),name);
    method.setDeclaration(code);
    ((FoundSetManager)application.getFoundSetManager()).reloadFoundsetMethod(dataSource,method);
    return new JSMethod(this,method,application,true);
  }
 catch (  RepositoryException e) {
    throw new RuntimeException(e);
  }
}",0.9995253915519696
143703,"public static void writeMessagesToRepository(String i18NServerName,String i18NTableName,IRepository repository,IDataServer dataServer,String clientID,TreeMap<String,MessageEntry> messages,boolean noUpdates,boolean noRemoves) throws Exception {
  TreeMap<String,MessageEntry> remoteMessages=loadSortedMessagesFromRepository(repository,dataServer,clientID,i18NServerName,i18NTableName);
  if (remoteMessages != null) {
    IServer i18NServer=repository.getServer(i18NServerName);
    Table i18NTable=null;
    if (i18NServer != null) {
      i18NTable=(Table)i18NServer.getTable(i18NTableName);
    }
    if (i18NTable != null) {
      Column pkColumn=null;
      List<Column> list=i18NTable.getRowIdentColumns();
      if (list.size() > 0) {
        pkColumn=list.get(0);
      }
      QueryTable messagesTable=new QueryTable(i18NTable.getSQLName(),i18NTable.getCatalog(),i18NTable.getSchema());
      QueryColumn pkCol=new QueryColumn(messagesTable,pkColumn.getID(),pkColumn.getSQLName(),pkColumn.getType(),pkColumn.getLength());
      QueryColumn msgLang=new QueryColumn(messagesTable,-1,""String_Node_Str"",Types.VARCHAR,5);
      QueryColumn msgKey=new QueryColumn(messagesTable,-1,""String_Node_Str"",Types.VARCHAR,150);
      QueryColumn msgVal=new QueryColumn(messagesTable,-1,""String_Node_Str"",Types.VARCHAR,2000);
      ArrayList<SQLStatement> updateStatements=new ArrayList<SQLStatement>();
      boolean logIdIsServoyManaged=false;
      ColumnInfo ci=pkColumn.getColumnInfo();
      if (ci != null) {
        int autoEnterType=ci.getAutoEnterType();
        int autoEnterSubType=ci.getAutoEnterSubType();
        logIdIsServoyManaged=(autoEnterType == ColumnInfo.SEQUENCE_AUTO_ENTER) && (autoEnterSubType != ColumnInfo.NO_SEQUENCE_SELECTED) && (autoEnterSubType != ColumnInfo.DATABASE_IDENTITY);
      }
      Iterator<Map.Entry<String,MessageEntry>> messagesIte=messages.entrySet().iterator();
      Map.Entry<String,MessageEntry> messageEntry;
      while (messagesIte.hasNext()) {
        messageEntry=messagesIte.next();
        String key=messageEntry.getKey();
        String value=messageEntry.getValue().getValue();
        String lang=messageEntry.getValue().getLanguage();
        if (lang.equals(""String_Node_Str""))         lang=null;
        String messageKey=messageEntry.getValue().getKey();
        if (!remoteMessages.containsKey(key)) {
          QueryInsert insert=new QueryInsert(messagesTable);
          if (logIdIsServoyManaged) {
            Object messageId=dataServer.getNextSequence(i18NServerName,i18NTableName,pkColumn.getName(),-1);
            if (lang == null)             insert.setColumnValues(new QueryColumn[]{pkCol,msgKey,msgVal},new Object[]{messageId,messageKey,value});
 else             insert.setColumnValues(new QueryColumn[]{pkCol,msgKey,msgLang,msgVal},new Object[]{messageId,messageKey,lang,value});
          }
 else {
            if (lang == null)             insert.setColumnValues(new QueryColumn[]{msgKey,msgVal},new Object[]{messageKey,value});
 else             insert.setColumnValues(new QueryColumn[]{msgKey,msgLang,msgVal},new Object[]{messageKey,lang,value});
          }
          updateStatements.add(new SQLStatement(ISQLStatement.INSERT_ACTION,i18NServerName,i18NTableName,null,insert));
        }
 else         if (!remoteMessages.get(key).equals(value) && !noUpdates) {
          QueryUpdate update=new QueryUpdate(messagesTable);
          update.addValue(msgVal,value);
          update.addCondition(new CompareCondition(ISQLCondition.EQUALS_OPERATOR,msgKey,messageKey));
          update.addCondition(new CompareCondition(ISQLCondition.EQUALS_OPERATOR,msgLang,lang));
          updateStatements.add(new SQLStatement(ISQLStatement.UPDATE_ACTION,i18NServerName,i18NTableName,null,update));
        }
      }
      if (!noRemoves) {
        Iterator<Map.Entry<String,MessageEntry>> remoteMessagesIte=remoteMessages.entrySet().iterator();
        Map.Entry<String,MessageEntry> remoteMessageEntry;
        while (remoteMessagesIte.hasNext()) {
          remoteMessageEntry=remoteMessagesIte.next();
          String key=remoteMessageEntry.getKey();
          if (!messages.containsKey(key)) {
            String lang=remoteMessageEntry.getValue().getLanguage();
            if (lang.equals(""String_Node_Str""))             lang=null;
            String messageKey=remoteMessageEntry.getValue().getKey();
            QueryDelete delete=new QueryDelete(messagesTable);
            delete.addCondition(new CompareCondition(ISQLCondition.EQUALS_OPERATOR,msgKey,messageKey));
            delete.addCondition(new CompareCondition(ISQLCondition.EQUALS_OPERATOR,msgLang,lang));
            updateStatements.add(new SQLStatement(ISQLStatement.DELETE_ACTION,i18NServerName,i18NTableName,null,delete));
          }
        }
      }
      dataServer.performUpdates(clientID,updateStatements.toArray(new ISQLStatement[updateStatements.size()]));
      Messages.changedTime=System.currentTimeMillis();
    }
  }
}","public static void writeMessagesToRepository(String i18NServerName,String i18NTableName,IRepository repository,IDataServer dataServer,String clientID,TreeMap<String,MessageEntry> messages,boolean noUpdates,boolean noRemoves) throws Exception {
  TreeMap<String,MessageEntry> remoteMessages=loadSortedMessagesFromRepository(repository,dataServer,clientID,i18NServerName,i18NTableName);
  if (remoteMessages != null) {
    IServer i18NServer=repository.getServer(i18NServerName);
    Table i18NTable=null;
    if (i18NServer != null) {
      i18NTable=(Table)i18NServer.getTable(i18NTableName);
    }
    if (i18NTable != null) {
      Column pkColumn=i18NTable.getRowIdentColumns().get(0);
      QueryTable messagesTable=new QueryTable(i18NTable.getSQLName(),i18NTable.getCatalog(),i18NTable.getSchema());
      QueryColumn pkCol=new QueryColumn(messagesTable,pkColumn.getID(),pkColumn.getSQLName(),pkColumn.getType(),pkColumn.getLength());
      QueryColumn msgLang=new QueryColumn(messagesTable,-1,""String_Node_Str"",Types.VARCHAR,5);
      QueryColumn msgKey=new QueryColumn(messagesTable,-1,""String_Node_Str"",Types.VARCHAR,150);
      QueryColumn msgVal=new QueryColumn(messagesTable,-1,""String_Node_Str"",Types.VARCHAR,2000);
      ArrayList<SQLStatement> updateStatements=new ArrayList<SQLStatement>();
      boolean logIdIsServoyManaged=false;
      ColumnInfo ci=pkColumn.getColumnInfo();
      if (ci != null) {
        int autoEnterType=ci.getAutoEnterType();
        int autoEnterSubType=ci.getAutoEnterSubType();
        logIdIsServoyManaged=(autoEnterType == ColumnInfo.SEQUENCE_AUTO_ENTER) && (autoEnterSubType != ColumnInfo.NO_SEQUENCE_SELECTED) && (autoEnterSubType != ColumnInfo.DATABASE_IDENTITY);
      }
      Iterator<Map.Entry<String,MessageEntry>> messagesIte=messages.entrySet().iterator();
      Map.Entry<String,MessageEntry> messageEntry;
      while (messagesIte.hasNext()) {
        messageEntry=messagesIte.next();
        String key=messageEntry.getKey();
        String value=messageEntry.getValue().getValue();
        String lang=messageEntry.getValue().getLanguage();
        if (lang.equals(""String_Node_Str""))         lang=null;
        String messageKey=messageEntry.getValue().getKey();
        if (!remoteMessages.containsKey(key)) {
          QueryInsert insert=new QueryInsert(messagesTable);
          if (logIdIsServoyManaged) {
            Object messageId=dataServer.getNextSequence(i18NServerName,i18NTableName,pkColumn.getName(),-1);
            if (lang == null)             insert.setColumnValues(new QueryColumn[]{pkCol,msgKey,msgVal},new Object[]{messageId,messageKey,value});
 else             insert.setColumnValues(new QueryColumn[]{pkCol,msgKey,msgLang,msgVal},new Object[]{messageId,messageKey,lang,value});
          }
 else {
            if (lang == null)             insert.setColumnValues(new QueryColumn[]{msgKey,msgVal},new Object[]{messageKey,value});
 else             insert.setColumnValues(new QueryColumn[]{msgKey,msgLang,msgVal},new Object[]{messageKey,lang,value});
          }
          updateStatements.add(new SQLStatement(ISQLActionTypes.INSERT_ACTION,i18NServerName,i18NTableName,null,insert));
        }
 else         if (!remoteMessages.get(key).getValue().equals(value) && !noUpdates) {
          QueryUpdate update=new QueryUpdate(messagesTable);
          update.addValue(msgVal,value);
          update.addCondition(new CompareCondition(ISQLCondition.EQUALS_OPERATOR,msgKey,messageKey));
          update.addCondition(new CompareCondition(ISQLCondition.EQUALS_OPERATOR,msgLang,lang));
          updateStatements.add(new SQLStatement(ISQLActionTypes.UPDATE_ACTION,i18NServerName,i18NTableName,null,update));
        }
      }
      if (!noRemoves) {
        Iterator<Map.Entry<String,MessageEntry>> remoteMessagesIte=remoteMessages.entrySet().iterator();
        Map.Entry<String,MessageEntry> remoteMessageEntry;
        while (remoteMessagesIte.hasNext()) {
          remoteMessageEntry=remoteMessagesIte.next();
          String key=remoteMessageEntry.getKey();
          if (!messages.containsKey(key)) {
            String lang=remoteMessageEntry.getValue().getLanguage();
            if (lang.equals(""String_Node_Str""))             lang=null;
            String messageKey=remoteMessageEntry.getValue().getKey();
            QueryDelete delete=new QueryDelete(messagesTable);
            delete.addCondition(new CompareCondition(ISQLCondition.EQUALS_OPERATOR,msgKey,messageKey));
            delete.addCondition(new CompareCondition(ISQLCondition.EQUALS_OPERATOR,msgLang,lang));
            updateStatements.add(new SQLStatement(ISQLActionTypes.DELETE_ACTION,i18NServerName,i18NTableName,null,delete));
          }
        }
      }
      dataServer.performUpdates(clientID,updateStatements.toArray(new ISQLStatement[updateStatements.size()]));
      Messages.changedTime=System.currentTimeMillis();
    }
  }
}",0.9822533211641822
143704,"public String getLanguageKey(){
  return language + ""String_Node_Str"" + key;
}","public String getLanguageKey(){
  return language + '.' + key;
}",0.8591549295774648
143705,"/** 
 * @see wicket.Page#configureResponse()
 */
@SuppressWarnings(""String_Node_Str"") @Override protected void configureResponse(){
  super.configureResponse();
  if (getWebRequestCycle().getResponse() instanceof WebResponse) {
    final WebResponse response=getWebRequestCycle().getWebResponse();
    HTTPUtils.setNoCacheHeaders(response.getHttpServletResponse(),""String_Node_Str"");
  }
  final RequestCycle cycle=getRequestCycle();
  final Response response=cycle.getResponse();
  if (main != null) {
    final MarkupStream markupStream=main.getAssociatedMarkupStream(false);
    if (markupStream != null) {
      markupStream.setCurrentIndex(0);
      MarkupElement m=markupStream.get();
      String docType=m.toString().trim();
      if (m != null && docType.toUpperCase().startsWith(""String_Node_Str"")) {
        int index=docType.indexOf('>');
        if (index != -1) {
          response.write(docType.substring(0,index + 1));
        }
 else {
          response.write(docType);
        }
      }
    }
  }
}","/** 
 * @see wicket.Page#configureResponse()
 */
@SuppressWarnings(""String_Node_Str"") @Override protected void configureResponse(){
  super.configureResponse();
  if (getWebRequestCycle().getResponse() instanceof WebResponse) {
    final WebResponse response=getWebRequestCycle().getWebResponse();
    HTTPUtils.setNoCacheHeaders(response.getHttpServletResponse(),""String_Node_Str"");
  }
  final RequestCycle cycle=getRequestCycle();
  final Response response=cycle.getResponse();
  if (main != null) {
    final MarkupStream markupStream=main.getAssociatedMarkupStream(false);
    if (markupStream != null) {
      MarkupElement m=markupStream.get();
      if (m != null) {
        String docType=m.toString().trim();
        if (docType.toUpperCase().startsWith(""String_Node_Str"")) {
          int index=docType.indexOf('>');
          if (index != -1) {
            response.write(docType.substring(0,index + 1));
          }
 else {
            response.write(docType);
          }
        }
      }
    }
  }
}",0.9257255287752092
143706,"/** 
 * @see javax.swing.event.TableModelListener#tableChanged(javax.swing.event.TableModelEvent)
 */
public void tableChanged(TableModelEvent e){
  if (e.getType() == TableModelEvent.UPDATE && e.getFirstRow() == e.getLastRow()) {
    Component component=table.get(Integer.toString(e.getFirstRow()));
    if (component instanceof ListItem) {
      ((ListItem)component).visitChildren(IProviderStylePropertyChanges.class,new IVisitor<Component>(){
        public Object component(        Component comp){
          ((IProviderStylePropertyChanges)comp).getStylePropertyChanges().setChanged();
          return CONTINUE_TRAVERSAL_BUT_DONT_GO_DEEPER;
        }
      }
);
      IModel<IRecordInternal> newModel=table.getListItemModel(table.getModel(),e.getFirstRow());
      IModel oldModel=((ListItem)component).getModel();
      if (newModel != null && oldModel != null && newModel.getObject() != null && !newModel.getObject().equals(oldModel.getObject())) {
        ((ListItem)component).setModel(newModel);
      }
    }
  }
 else {
    if (!isScrollMode())     getStylePropertyChanges().setChanged();
  }
  if (currentData != null && e.getColumn() == TableModelEvent.ALL_COLUMNS && e.getFirstRow() == 0 && elementToColumnHeader.size() > 0) {
    List<SortColumn> sortCols=currentData.getSortColumns();
    if (sortCols != null && sortCols.size() > 0) {
      Map<String,Boolean> sortMap=new HashMap<String,Boolean>();
      for (      IPersist persist : elementToColumnHeader.keySet()) {
        SortableCellViewHeader sortableCellViewHeader=(SortableCellViewHeader)elementToColumnHeader.get(persist);
        sortableCellViewHeader.setResizeImage(R_ARROW_OFF);
      }
      for (      SortColumn sc : sortCols) {
        for (        IPersist persist : elementToColumnHeader.keySet()) {
          Component comp=elementToColumnIdentifierComponent.get(persist);
          SortableCellViewHeader sortableCellViewHeader=(SortableCellViewHeader)elementToColumnHeader.get(persist);
          if (comp instanceof IDisplayData) {
            IDisplayData dispComp=(IDisplayData)comp;
            if (sc.getDataProviderID().equals(dispComp.getDataProviderID())) {
              boolean descending=sc.getSortOrder() == SortColumn.DESCENDING;
              sortableCellViewHeader.setResizeImage(descending ? R_ARROW_UP : R_ARROW_DOWN);
              sortMap.put(comp.getMarkupId(),Boolean.valueOf(!descending));
            }
          }
        }
      }
      headers.recordSort(sortMap);
    }
  }
}","/** 
 * @see javax.swing.event.TableModelListener#tableChanged(javax.swing.event.TableModelEvent)
 */
public void tableChanged(TableModelEvent e){
  if (e.getType() == TableModelEvent.UPDATE && e.getFirstRow() == e.getLastRow()) {
    Component component=table.get(Integer.toString(e.getFirstRow()));
    if (component instanceof ListItem) {
      ((ListItem)component).visitChildren(IProviderStylePropertyChanges.class,new IVisitor<Component>(){
        public Object component(        Component comp){
          ((IProviderStylePropertyChanges)comp).getStylePropertyChanges().setChanged();
          return CONTINUE_TRAVERSAL_BUT_DONT_GO_DEEPER;
        }
      }
);
      IModel<IRecordInternal> newModel=table.getListItemModel(table.getModel(),e.getFirstRow());
      IModel oldModel=((ListItem)component).getModel();
      if (newModel != null && oldModel != null && newModel.getObject() != null && !newModel.getObject().equals(oldModel.getObject())) {
        ((ListItem)component).setModel(newModel);
      }
    }
  }
 else {
    if (!isScrollMode() || !(scrollBehavior != null && scrollBehavior.isGettingRows()))     getStylePropertyChanges().setChanged();
  }
  if (currentData != null && e.getColumn() == TableModelEvent.ALL_COLUMNS && e.getFirstRow() == 0 && elementToColumnHeader.size() > 0) {
    List<SortColumn> sortCols=currentData.getSortColumns();
    if (sortCols != null && sortCols.size() > 0) {
      Map<String,Boolean> sortMap=new HashMap<String,Boolean>();
      for (      IPersist persist : elementToColumnHeader.keySet()) {
        SortableCellViewHeader sortableCellViewHeader=(SortableCellViewHeader)elementToColumnHeader.get(persist);
        sortableCellViewHeader.setResizeImage(R_ARROW_OFF);
      }
      for (      SortColumn sc : sortCols) {
        for (        IPersist persist : elementToColumnHeader.keySet()) {
          Component comp=elementToColumnIdentifierComponent.get(persist);
          SortableCellViewHeader sortableCellViewHeader=(SortableCellViewHeader)elementToColumnHeader.get(persist);
          if (comp instanceof IDisplayData) {
            IDisplayData dispComp=(IDisplayData)comp;
            if (sc.getDataProviderID().equals(dispComp.getDataProviderID())) {
              boolean descending=sc.getSortOrder() == SortColumn.DESCENDING;
              sortableCellViewHeader.setResizeImage(descending ? R_ARROW_UP : R_ARROW_DOWN);
              sortMap.put(comp.getMarkupId(),Boolean.valueOf(!descending));
            }
          }
        }
      }
      headers.recordSort(sortMap);
    }
  }
}",0.9875370919881306
143707,"public WebCellBasedView(final String id,final IApplication application,RuntimePortal scriptable,final Form form,final AbstractBase cellview,final IDataProviderLookup dataProviderLookup,final IScriptExecuter el,boolean addHeaders,final int startY,final int endY,final int sizeHint){
  super(id);
  this.application=application;
  this.cellview=cellview;
  this.fc=el.getFormController();
  this.addHeaders=addHeaders;
  this.startY=startY;
  this.endY=endY;
  this.formDesignHeight=form.getSize().height;
  this.sizeHint=sizeHint;
  this.bodyWidthHint=form.getWidth();
  useAJAX=Utils.getAsBoolean(application.getRuntimeProperties().get(""String_Node_Str""));
  useAnchors=Utils.getAsBoolean(application.getRuntimeProperties().get(""String_Node_Str""));
  setOutputMarkupPlaceholderTag(true);
  dataRendererOnRenderWrapper=new DataRendererOnRenderWrapper(this);
  loadingInfo=new Label(""String_Node_Str"",""String_Node_Str"");
  loadingInfo.setVisible(false);
  add(loadingInfo);
  if (!useAJAX)   bodyHeightHint=sizeHint;
  ChangesRecorder jsChangeRecorder=new ChangesRecorder(null,null){
    @Override public boolean isChanged(){
      boolean retval=false;
      if (super.isChanged()) {
        retval=true;
        return retval;
      }
      if (!retval) {
        Iterator<Component> iterator=elementToColumnIdentifierComponent.values().iterator();
        while (iterator.hasNext()) {
          Component object=iterator.next();
          if (object instanceof IProviderStylePropertyChanges) {
            if (((IProviderStylePropertyChanges)object).getStylePropertyChanges().isChanged()) {
              retval=true;
              break;
            }
          }
        }
      }
      if (retval) {
        MainPage page=(MainPage)getPage();
        page.getPageContributor().addTableToRender(WebCellBasedView.this);
        setRendered();
      }
      return false;
    }
    @Override public void setRendered(){
      super.setRendered();
      Iterator<Component> iterator=elementToColumnIdentifierComponent.values().iterator();
      while (iterator.hasNext()) {
        Component comp=iterator.next();
        if (comp instanceof IProviderStylePropertyChanges) {
          ((IProviderStylePropertyChanges)comp).getStylePropertyChanges().setRendered();
        }
      }
    }
  }
;
  this.scriptable=scriptable;
  ((ChangesRecorder)scriptable.getChangesRecorder()).setAdditionalChangesRecorder(jsChangeRecorder);
  add(TooltipAttributeModifier.INSTANCE);
  add(new StyleAppendingModifier(new Model<String>(){
    private static final long serialVersionUID=1L;
    @Override public String getObject(){
      if (findParent(IWebFormContainer.class) != null) {
        return ""String_Node_Str"";
      }
      return ""String_Node_Str"";
    }
  }
));
  if (cellview instanceof BaseComponent) {
    ComponentFactory.applyBasicComponentProperties(application,this,(BaseComponent)cellview,ComponentFactory.getStyleForBasicComponent(application,(BaseComponent)cellview,form));
  }
  boolean sortable=true;
  String initialSortString=null;
  int onRenderMethodID=0;
  if (cellview instanceof Portal) {
    Portal p=(Portal)cellview;
    setRowBGColorScript(p.getRowBGColorCalculation(),p.getInstanceMethodArguments(""String_Node_Str""));
    sortable=p.getSortable();
    initialSortString=p.getInitialSort();
    onRenderMethodID=p.getOnRenderMethodID();
    int portalAnchors=p.getAnchors();
    isAnchored=(((portalAnchors & IAnchorConstants.NORTH) > 0) && ((portalAnchors & IAnchorConstants.SOUTH) > 0)) || (((portalAnchors & IAnchorConstants.EAST) > 0) && ((portalAnchors & IAnchorConstants.WEST) > 0));
  }
 else   if (cellview instanceof Form) {
    initialSortString=form.getInitialSort();
    onRenderMethodID=form.getOnRenderMethodID();
    isAnchored=true;
  }
  if (onRenderMethodID > 0) {
    dataRendererOnRenderWrapper.getRenderEventExecutor().setRenderCallback(Integer.toString(onRenderMethodID));
    dataRendererOnRenderWrapper.getRenderEventExecutor().setRenderScriptExecuter(fc != null ? fc.getScriptExecuter() : null);
  }
  initDragNDrop(fc,startY);
  if (sortable) {
    if (initialSortString != null) {
      StringTokenizer tokByComma=new StringTokenizer(initialSortString,""String_Node_Str"");
      while (tokByComma.hasMoreTokens()) {
        String initialSortFirstToken=tokByComma.nextToken();
        StringTokenizer tokBySpace=new StringTokenizer(initialSortFirstToken);
        if (tokBySpace.hasMoreTokens()) {
          String initialSortColumnName=tokBySpace.nextToken();
          if (tokBySpace.hasMoreTokens()) {
            String sortDir=tokBySpace.nextToken();
            boolean initialSortAsc=true;
            if (sortDir.equalsIgnoreCase(""String_Node_Str""))             initialSortAsc=false;
            initialSortColumnNames.put(initialSortColumnName,new Boolean(initialSortAsc));
          }
        }
      }
    }
    if (initialSortColumnNames.size() == 0) {
      try {
        String dataSource=null;
        if (cellview instanceof Portal) {
          Portal p=(Portal)cellview;
          String relation=p.getRelationName();
          int lastDot=relation.lastIndexOf(""String_Node_Str"");
          if (lastDot >= 0) {
            relation=relation.substring(lastDot + 1);
          }
          Relation rel=application.getFlattenedSolution().getRelation(relation);
          if (rel != null) {
            dataSource=rel.getForeignDataSource();
          }
        }
 else {
          dataSource=form.getDataSource();
        }
        if (dataSource != null) {
          Iterator<String> pkColumnNames=application.getFoundSetManager().getTable(dataSource).getRowIdentColumnNames();
          while (pkColumnNames.hasNext()) {
            initialSortColumnNames.put(pkColumnNames.next(),Boolean.TRUE);
          }
        }
      }
 catch (      RepositoryException e) {
        Debug.log(""String_Node_Str"",e);
      }
    }
  }
  maxHeight=0;
  try {
    Iterator<IPersist> components=cellview.getAllObjects(PositionComparator.XY_PERSIST_COMPARATOR);
    while (components.hasNext()) {
      IPersist element=components.next();
      if (element instanceof Field || element instanceof GraphicalComponent) {
        if (element instanceof GraphicalComponent && ((GraphicalComponent)element).getLabelFor() != null) {
          labelsFor.put(((GraphicalComponent)element).getLabelFor(),element);
          continue;
        }
        Point l=((IFormElement)element).getLocation();
        if (l == null) {
          continue;
        }
        if (l.y >= startY && l.y < endY) {
          int height=((IFormElement)element).getSize().height;
          if (height > maxHeight)           maxHeight=height;
        }
      }
    }
    if (maxHeight == 0)     maxHeight=20;
  }
 catch (  Exception ex1) {
    Debug.error(""String_Node_Str"",ex1);
  }
  tableContainerBody=new WebMarkupContainer(""String_Node_Str"");
  tableContainerBody.setOutputMarkupId(true);
  table=new WebCellBasedViewListView(""String_Node_Str"",data,1,cellview,dataProviderLookup,el,startY,endY,form);
  table.setReuseItems(true);
  tableContainerBody.add(table);
  add(tableContainerBody);
  final LinkedHashMap<String,IDataAdapter> dataadapters=new LinkedHashMap<String,IDataAdapter>();
  final SortedList<IPersist> columnTabSequence=new SortedList<IPersist>(TabSeqComparator.INSTANCE);
  createComponents(application,form,cellview,dataProviderLookup,el,startY,endY,new ItemAdd(){
    public void add(    IPersist element,    Component comp){
      if (element instanceof IFormElement && comp instanceof IComponent) {
        ((IComponent)comp).setLocation(((IFormElement)element).getLocation());
        ((IComponent)comp).setSize(((IFormElement)element).getSize());
      }
      elementToColumnIdentifierComponent.put(element,comp);
      if (cellview instanceof Form && element instanceof ISupportTabSeq && ((ISupportTabSeq)element).getTabSeq() >= 0) {
        columnTabSequence.add(element);
      }
      if (comp instanceof IDisplayData) {
        String dataprovider=((IDisplayData)comp).getDataProviderID();
        WebCellAdapter previous=(WebCellAdapter)dataadapters.get(dataprovider);
        if (previous == null) {
          WebCellAdapter wca=new WebCellAdapter(dataprovider,WebCellBasedView.this);
          dataadapters.put(dataprovider,wca);
        }
        if (dataprovider != null) {
          if (initialSortColumnNames.containsKey(dataprovider))           initialSortedColumns.put(comp.getId(),initialSortColumnNames.get(dataprovider));
        }
      }
    }
  }
);
  for (int i=columnTabSequence.size() - 1; i >= 0; i--) {
    elementTabIndexes.put(columnTabSequence.get(i),Integer.valueOf(i));
  }
  if (addHeaders) {
    headers=new SortableCellViewHeaders(form,this,""String_Node_Str"",table,cellview,application,initialSortedColumns,new IHeaders(){
      public void registerHeader(      IPersist matchingElement,      Component headerComponent){
        SortableCellViewHeader sortableHeader=(SortableCellViewHeader)headerComponent;
        Component columnIdentifier=WebCellBasedView.this.elementToColumnIdentifierComponent.get(matchingElement);
        if (columnIdentifier instanceof IProviderStylePropertyChanges) {
          String width=(String)((IProviderStylePropertyChanges)columnIdentifier).getStylePropertyChanges().getChanges().get(""String_Node_Str"");
          if (width != null) {
            sortableHeader.setWidth(Integer.parseInt(width.substring(0,width.length() - 2)));
          }
 else           if (matchingElement instanceof BaseComponent)           sortableHeader.setWidth(((BaseComponent)matchingElement).getSize().width);
        }
        sortableHeader.setTabIndex(tabIndex);
        sortableHeader.setScriptExecuter(el);
        sortableHeader.setResizeClass(columnIdentifier.getId());
        WebCellBasedView.this.registerHeader(matchingElement,headerComponent);
      }
    }
);
    add(headers);
  }
  if (useAJAX) {
    add(pagingNavigator=new ServoyAjaxPagingNavigator(""String_Node_Str"",table));
    add(tableResizeBehavior=new ServoyTableResizeBehavior(startY,endY,cellview));
  }
 else {
    add(pagingNavigator=new ServoySubmitPagingNavigator(""String_Node_Str"",table));
  }
  int scrollbars=0;
  if (cellview instanceof Portal) {
    scrollbars=((Portal)cellview).getScrollbars();
  }
  if (cellview instanceof Form) {
    scrollbars=((Form)cellview).getScrollbars();
  }
  showPageNavigator=!((scrollbars & ISupportScrollbars.VERTICAL_SCROLLBAR_NEVER) == ISupportScrollbars.VERTICAL_SCROLLBAR_NEVER);
  try {
    if (cellview instanceof Portal) {
      relationName=((Portal)cellview).getRelationName();
      Relation[] rels=application.getFlattenedSolution().getRelationSequence(((Portal)cellview).getRelationName());
      if (rels != null) {
        Relation r=rels[rels.length - 1];
        if (r != null) {
          defaultSort=((FoundSetManager)application.getFoundSetManager()).getSortColumns(application.getFoundSetManager().getTable(r.getForeignDataSource()),((Portal)cellview).getInitialSort());
        }
      }
    }
 else {
      defaultSort=((FoundSetManager)application.getFoundSetManager()).getSortColumns(((Form)cellview).getDataSource(),((Form)cellview).getInitialSort());
    }
  }
 catch (  RepositoryException e) {
    Debug.error(e);
    defaultSort=new ArrayList<SortColumn>(1);
  }
  try {
    dal=new DataAdapterList(application,dataProviderLookup,elementToColumnIdentifierComponent,el.getFormController(),dataadapters,null);
  }
 catch (  RepositoryException ex) {
    Debug.error(ex);
  }
  Object defaultScrollable=application.getUIProperty(IApplication.TABLEVIEW_WC_DEFAULT_SCROLLABLE);
  setScrollMode(defaultScrollable == null || Boolean.TRUE.equals(defaultScrollable));
  table.setPageabeMode(!isScrollMode());
  if (isScrollMode()) {
    tableContainerBody.add(new StyleAppendingModifier(new Model<String>(){
      private static final long serialVersionUID=1L;
      @Override public String getObject(){
        return ""String_Node_Str"";
      }
    }
));
    tableContainerBody.add(new ScrollBehavior(""String_Node_Str""));
  }
}","public WebCellBasedView(final String id,final IApplication application,RuntimePortal scriptable,final Form form,final AbstractBase cellview,final IDataProviderLookup dataProviderLookup,final IScriptExecuter el,boolean addHeaders,final int startY,final int endY,final int sizeHint){
  super(id);
  this.application=application;
  this.cellview=cellview;
  this.fc=el.getFormController();
  this.addHeaders=addHeaders;
  this.startY=startY;
  this.endY=endY;
  this.formDesignHeight=form.getSize().height;
  this.sizeHint=sizeHint;
  this.bodyWidthHint=form.getWidth();
  useAJAX=Utils.getAsBoolean(application.getRuntimeProperties().get(""String_Node_Str""));
  useAnchors=Utils.getAsBoolean(application.getRuntimeProperties().get(""String_Node_Str""));
  setOutputMarkupPlaceholderTag(true);
  dataRendererOnRenderWrapper=new DataRendererOnRenderWrapper(this);
  loadingInfo=new Label(""String_Node_Str"",""String_Node_Str"");
  loadingInfo.setVisible(false);
  add(loadingInfo);
  if (!useAJAX)   bodyHeightHint=sizeHint;
  ChangesRecorder jsChangeRecorder=new ChangesRecorder(null,null){
    @Override public boolean isChanged(){
      boolean retval=false;
      if (super.isChanged()) {
        retval=true;
        return retval;
      }
      if (!retval) {
        Iterator<Component> iterator=elementToColumnIdentifierComponent.values().iterator();
        while (iterator.hasNext()) {
          Component object=iterator.next();
          if (object instanceof IProviderStylePropertyChanges) {
            if (((IProviderStylePropertyChanges)object).getStylePropertyChanges().isChanged()) {
              retval=true;
              break;
            }
          }
        }
      }
      if (retval) {
        MainPage page=(MainPage)getPage();
        page.getPageContributor().addTableToRender(WebCellBasedView.this);
        setRendered();
      }
      return false;
    }
    @Override public void setRendered(){
      super.setRendered();
      Iterator<Component> iterator=elementToColumnIdentifierComponent.values().iterator();
      while (iterator.hasNext()) {
        Component comp=iterator.next();
        if (comp instanceof IProviderStylePropertyChanges) {
          ((IProviderStylePropertyChanges)comp).getStylePropertyChanges().setRendered();
        }
      }
    }
  }
;
  this.scriptable=scriptable;
  ((ChangesRecorder)scriptable.getChangesRecorder()).setAdditionalChangesRecorder(jsChangeRecorder);
  add(TooltipAttributeModifier.INSTANCE);
  add(new StyleAppendingModifier(new Model<String>(){
    private static final long serialVersionUID=1L;
    @Override public String getObject(){
      if (findParent(IWebFormContainer.class) != null) {
        return ""String_Node_Str"";
      }
      return ""String_Node_Str"";
    }
  }
));
  if (cellview instanceof BaseComponent) {
    ComponentFactory.applyBasicComponentProperties(application,this,(BaseComponent)cellview,ComponentFactory.getStyleForBasicComponent(application,(BaseComponent)cellview,form));
  }
  boolean sortable=true;
  String initialSortString=null;
  int onRenderMethodID=0;
  if (cellview instanceof Portal) {
    Portal p=(Portal)cellview;
    setRowBGColorScript(p.getRowBGColorCalculation(),p.getInstanceMethodArguments(""String_Node_Str""));
    sortable=p.getSortable();
    initialSortString=p.getInitialSort();
    onRenderMethodID=p.getOnRenderMethodID();
    int portalAnchors=p.getAnchors();
    isAnchored=(((portalAnchors & IAnchorConstants.NORTH) > 0) && ((portalAnchors & IAnchorConstants.SOUTH) > 0)) || (((portalAnchors & IAnchorConstants.EAST) > 0) && ((portalAnchors & IAnchorConstants.WEST) > 0));
  }
 else   if (cellview instanceof Form) {
    initialSortString=form.getInitialSort();
    onRenderMethodID=form.getOnRenderMethodID();
    isAnchored=true;
  }
  if (onRenderMethodID > 0) {
    dataRendererOnRenderWrapper.getRenderEventExecutor().setRenderCallback(Integer.toString(onRenderMethodID));
    dataRendererOnRenderWrapper.getRenderEventExecutor().setRenderScriptExecuter(fc != null ? fc.getScriptExecuter() : null);
  }
  initDragNDrop(fc,startY);
  if (sortable) {
    if (initialSortString != null) {
      StringTokenizer tokByComma=new StringTokenizer(initialSortString,""String_Node_Str"");
      while (tokByComma.hasMoreTokens()) {
        String initialSortFirstToken=tokByComma.nextToken();
        StringTokenizer tokBySpace=new StringTokenizer(initialSortFirstToken);
        if (tokBySpace.hasMoreTokens()) {
          String initialSortColumnName=tokBySpace.nextToken();
          if (tokBySpace.hasMoreTokens()) {
            String sortDir=tokBySpace.nextToken();
            boolean initialSortAsc=true;
            if (sortDir.equalsIgnoreCase(""String_Node_Str""))             initialSortAsc=false;
            initialSortColumnNames.put(initialSortColumnName,new Boolean(initialSortAsc));
          }
        }
      }
    }
    if (initialSortColumnNames.size() == 0) {
      try {
        String dataSource=null;
        if (cellview instanceof Portal) {
          Portal p=(Portal)cellview;
          String relation=p.getRelationName();
          int lastDot=relation.lastIndexOf(""String_Node_Str"");
          if (lastDot >= 0) {
            relation=relation.substring(lastDot + 1);
          }
          Relation rel=application.getFlattenedSolution().getRelation(relation);
          if (rel != null) {
            dataSource=rel.getForeignDataSource();
          }
        }
 else {
          dataSource=form.getDataSource();
        }
        if (dataSource != null) {
          Iterator<String> pkColumnNames=application.getFoundSetManager().getTable(dataSource).getRowIdentColumnNames();
          while (pkColumnNames.hasNext()) {
            initialSortColumnNames.put(pkColumnNames.next(),Boolean.TRUE);
          }
        }
      }
 catch (      RepositoryException e) {
        Debug.log(""String_Node_Str"",e);
      }
    }
  }
  maxHeight=0;
  try {
    Iterator<IPersist> components=cellview.getAllObjects(PositionComparator.XY_PERSIST_COMPARATOR);
    while (components.hasNext()) {
      IPersist element=components.next();
      if (element instanceof Field || element instanceof GraphicalComponent) {
        if (element instanceof GraphicalComponent && ((GraphicalComponent)element).getLabelFor() != null) {
          labelsFor.put(((GraphicalComponent)element).getLabelFor(),element);
          continue;
        }
        Point l=((IFormElement)element).getLocation();
        if (l == null) {
          continue;
        }
        if (l.y >= startY && l.y < endY) {
          int height=((IFormElement)element).getSize().height;
          if (height > maxHeight)           maxHeight=height;
        }
      }
    }
    if (maxHeight == 0)     maxHeight=20;
  }
 catch (  Exception ex1) {
    Debug.error(""String_Node_Str"",ex1);
  }
  tableContainerBody=new WebMarkupContainer(""String_Node_Str"");
  tableContainerBody.setOutputMarkupId(true);
  table=new WebCellBasedViewListView(""String_Node_Str"",data,1,cellview,dataProviderLookup,el,startY,endY,form);
  table.setReuseItems(true);
  tableContainerBody.add(table);
  add(tableContainerBody);
  final LinkedHashMap<String,IDataAdapter> dataadapters=new LinkedHashMap<String,IDataAdapter>();
  final SortedList<IPersist> columnTabSequence=new SortedList<IPersist>(TabSeqComparator.INSTANCE);
  createComponents(application,form,cellview,dataProviderLookup,el,startY,endY,new ItemAdd(){
    public void add(    IPersist element,    Component comp){
      if (element instanceof IFormElement && comp instanceof IComponent) {
        ((IComponent)comp).setLocation(((IFormElement)element).getLocation());
        ((IComponent)comp).setSize(((IFormElement)element).getSize());
      }
      elementToColumnIdentifierComponent.put(element,comp);
      if (cellview instanceof Form && element instanceof ISupportTabSeq && ((ISupportTabSeq)element).getTabSeq() >= 0) {
        columnTabSequence.add(element);
      }
      if (comp instanceof IDisplayData) {
        String dataprovider=((IDisplayData)comp).getDataProviderID();
        WebCellAdapter previous=(WebCellAdapter)dataadapters.get(dataprovider);
        if (previous == null) {
          WebCellAdapter wca=new WebCellAdapter(dataprovider,WebCellBasedView.this);
          dataadapters.put(dataprovider,wca);
        }
        if (dataprovider != null) {
          if (initialSortColumnNames.containsKey(dataprovider))           initialSortedColumns.put(comp.getId(),initialSortColumnNames.get(dataprovider));
        }
      }
    }
  }
);
  for (int i=columnTabSequence.size() - 1; i >= 0; i--) {
    elementTabIndexes.put(columnTabSequence.get(i),Integer.valueOf(i));
  }
  if (addHeaders) {
    headers=new SortableCellViewHeaders(form,this,""String_Node_Str"",table,cellview,application,initialSortedColumns,new IHeaders(){
      public void registerHeader(      IPersist matchingElement,      Component headerComponent){
        SortableCellViewHeader sortableHeader=(SortableCellViewHeader)headerComponent;
        Component columnIdentifier=WebCellBasedView.this.elementToColumnIdentifierComponent.get(matchingElement);
        if (columnIdentifier instanceof IProviderStylePropertyChanges) {
          String width=(String)((IProviderStylePropertyChanges)columnIdentifier).getStylePropertyChanges().getChanges().get(""String_Node_Str"");
          if (width != null) {
            sortableHeader.setWidth(Integer.parseInt(width.substring(0,width.length() - 2)));
          }
 else           if (matchingElement instanceof BaseComponent)           sortableHeader.setWidth(((BaseComponent)matchingElement).getSize().width);
        }
        sortableHeader.setTabIndex(tabIndex);
        sortableHeader.setScriptExecuter(el);
        sortableHeader.setResizeClass(columnIdentifier.getId());
        WebCellBasedView.this.registerHeader(matchingElement,headerComponent);
      }
    }
);
    add(headers);
  }
  if (useAJAX) {
    add(pagingNavigator=new ServoyAjaxPagingNavigator(""String_Node_Str"",table));
    add(tableResizeBehavior=new ServoyTableResizeBehavior(startY,endY,cellview));
  }
 else {
    add(pagingNavigator=new ServoySubmitPagingNavigator(""String_Node_Str"",table));
  }
  int scrollbars=0;
  if (cellview instanceof Portal) {
    scrollbars=((Portal)cellview).getScrollbars();
  }
  if (cellview instanceof Form) {
    scrollbars=((Form)cellview).getScrollbars();
  }
  showPageNavigator=!((scrollbars & ISupportScrollbars.VERTICAL_SCROLLBAR_NEVER) == ISupportScrollbars.VERTICAL_SCROLLBAR_NEVER);
  try {
    if (cellview instanceof Portal) {
      relationName=((Portal)cellview).getRelationName();
      Relation[] rels=application.getFlattenedSolution().getRelationSequence(((Portal)cellview).getRelationName());
      if (rels != null) {
        Relation r=rels[rels.length - 1];
        if (r != null) {
          defaultSort=((FoundSetManager)application.getFoundSetManager()).getSortColumns(application.getFoundSetManager().getTable(r.getForeignDataSource()),((Portal)cellview).getInitialSort());
        }
      }
    }
 else {
      defaultSort=((FoundSetManager)application.getFoundSetManager()).getSortColumns(((Form)cellview).getDataSource(),((Form)cellview).getInitialSort());
    }
  }
 catch (  RepositoryException e) {
    Debug.error(e);
    defaultSort=new ArrayList<SortColumn>(1);
  }
  try {
    dal=new DataAdapterList(application,dataProviderLookup,elementToColumnIdentifierComponent,el.getFormController(),dataadapters,null);
  }
 catch (  RepositoryException ex) {
    Debug.error(ex);
  }
  Object defaultScrollable=application.getUIProperty(IApplication.TABLEVIEW_WC_DEFAULT_SCROLLABLE);
  setScrollMode(defaultScrollable == null || Boolean.TRUE.equals(defaultScrollable));
  table.setPageabeMode(!isScrollMode());
  if (isScrollMode()) {
    tableContainerBody.add(new StyleAppendingModifier(new Model<String>(){
      private static final long serialVersionUID=1L;
      @Override public String getObject(){
        return ""String_Node_Str"";
      }
    }
));
    tableContainerBody.add(scrollBehavior=new ScrollBehavior(""String_Node_Str""));
  }
}",0.9993781352348576
143708,"private Collection<ListItem<?>> getRows(ServoyListView<IRecordInternal> listView,int startIdx,int rowsCount){
  ArrayList<ListItem<?>> rows=new ArrayList<ListItem<?>>();
  int endIdx=startIdx + rowsCount;
  ListItem<?> listItem;
  for (int i=startIdx; i < endIdx; i++) {
    listItem=listView.getOrCreateListItem(i);
    rows.add(listItem);
  }
  return rows;
}","private Collection<ListItem<?>> getRows(ServoyListView<IRecordInternal> listView,int startIdx,int rowsCount){
  ArrayList<ListItem<?>> rows=new ArrayList<ListItem<?>>();
  int endIdx=startIdx + rowsCount;
  ListItem<?> listItem;
  isGettingRows=true;
  for (int i=startIdx; i < endIdx; i++) {
    listItem=listView.getOrCreateListItem(i);
    rows.add(listItem);
  }
  isGettingRows=false;
  return rows;
}",0.9413298565840938
143709,"public Solution createDummyCopy(Solution sol){
  Solution copy=new Solution(sol.getRepository(),sol.getSolutionMetaData());
  copy.setReleaseNumber(sol.getReleaseNumber());
  copy.setRevisionNumber(sol.getRevisionNumber());
  return copy;
}","public static Solution createDummyCopy(Solution sol){
  Solution copy=new Solution(sol.getRepository(),sol.getSolutionMetaData());
  copy.setReleaseNumber(sol.getReleaseNumber());
  copy.setRevisionNumber(sol.getRevisionNumber());
  return copy;
}",0.9856262833675564
143710,"public void fireOnRender(boolean hasFocus){
  if (isRenderStateChanged && renderScriptExecuter != null && renderCallback != null) {
    IScriptRenderMethods renderable=onRenderComponent.getRenderable();
    if (renderable instanceof RenderableWrapper)     ((RenderableWrapper)renderable).resetProperties();
    JSRenderEvent event=new JSRenderEvent();
    event.setElement(onRenderComponent);
    event.setHasFocus(hasFocus);
    event.setRecord(renderRecord);
    event.setIndex(renderIndex);
    event.setSelected(renderIsSelected);
    renderScriptExecuter.executeFunction(renderCallback,new Object[]{event},false,onRenderComponent.getComponent(),false,StaticContentSpecLoader.PROPERTY_ONRENDERMETHODID.getPropertyName(),true);
    isRenderStateChanged=false;
  }
}","public void fireOnRender(boolean hasFocus){
  if (isRenderStateChanged && renderScriptExecuter != null && renderCallback != null && (renderIndex != -1 || renderRecord == null)) {
    IScriptRenderMethods renderable=onRenderComponent.getRenderable();
    if (renderable instanceof RenderableWrapper)     ((RenderableWrapper)renderable).resetProperties();
    JSRenderEvent event=new JSRenderEvent();
    event.setElement(onRenderComponent);
    event.setHasFocus(hasFocus);
    event.setRecord(renderRecord);
    event.setIndex(renderIndex);
    event.setSelected(renderIsSelected);
    renderScriptExecuter.executeFunction(renderCallback,new Object[]{event},false,onRenderComponent.getComponent(),false,StaticContentSpecLoader.PROPERTY_ONRENDERMETHODID.getPropertyName(),true);
    isRenderStateChanged=false;
  }
}",0.9703095388502844
143711,"public Component getListCellRendererComponent(JComponent rendererParentCanBeNull,Object value,int index,boolean isSelected,boolean cellHasFocus){
  this.selected=isSelected;
  boolean bgRowColorSet=false;
  if (value instanceof IRecordInternal) {
    IRecordInternal val=(IRecordInternal)value;
    dataAdapterList.setRecord(val,!isRenderer);
    if (index != -1) {
      boolean specialStateCase=(val instanceof PrototypeState || val instanceof FindState);
      if (strRowBGColorProvider == null && !specialStateCase) {
        if (rendererParentCanBeNull instanceof ISupportRowBGColorScript) {
          strRowBGColorProvider=((ISupportRowBGColorScript)rendererParentCanBeNull).getRowBGColorScript();
          rowBGColorArgs=((ISupportRowBGColorScript)rendererParentCanBeNull).getRowBGColorArgs();
        }
        if (strRowBGColorProvider == null)         strRowBGColorProvider=""String_Node_Str"";
        isRowBGColorCalculation=val.getRawData().containsCalculation(strRowBGColorProvider);
        if (!isRowBGColorCalculation && strRowBGColorProvider.equals(""String_Node_Str"")) {
          strRowBGColorProvider=""String_Node_Str"";
        }
        defaultColor=getBackground();
      }
      if (strRowBGColorProvider != null && !""String_Node_Str"".equals(strRowBGColorProvider)) {
        IFoundSetInternal parent=val.getParentFoundSet();
        if (parent != null && !specialStateCase) {
          Object bg_color=null;
          if (isRowBGColorCalculation) {
            bg_color=parent.getCalculationValue(val,strRowBGColorProvider,Utils.arrayMerge((new Object[]{new Integer(index),new Boolean(isSelected),null,null,Boolean.FALSE}),Utils.parseJSExpressions(rowBGColorArgs)),null);
          }
 else {
            try {
              FormController currentForm=dataAdapterList.getFormController();
              bg_color=currentForm.executeFunction(strRowBGColorProvider,Utils.arrayMerge((new Object[]{new Integer(index),new Boolean(isSelected),null,null,currentForm.getName(),val,Boolean.FALSE}),Utils.parseJSExpressions(rowBGColorArgs)),false,null,true,null);
            }
 catch (            Exception ex) {
              Debug.error(ex);
            }
          }
          if (bg_color != null && !(bg_color.toString().trim().length() == 0) && !(bg_color instanceof Undefined)) {
            bgRowColorSet=true;
            setBackground(PersistHelper.createColor(bg_color.toString()));
          }
 else {
            setBackground(defaultColor);
          }
        }
 else {
          setBackground(defaultColor);
        }
      }
      if (rendererParentCanBeNull instanceof ISupportRowStyling && !specialStateCase && !bgRowColorSet) {
        ISupportRowStyling oddEvenStyling=(ISupportRowStyling)rendererParentCanBeNull;
        StyleSheet ss=oddEvenStyling.getRowStyleSheet();
        Style style=isSelected ? oddEvenStyling.getRowSelectedStyle() : null;
        if (style != null && style.getAttributeCount() == 0)         style=null;
        if (style == null) {
          style=(index % 2 == 0) ? oddEvenStyling.getRowOddStyle() : oddEvenStyling.getRowEvenStyle();
        }
        if (ss != null && style != null) {
          Color bgColor=ss.getBackground(style);
          if (bgColor != null) {
            showSelection=false;
            bgRowColorSet=true;
            setBackground(bgColor);
          }
        }
      }
    }
  }
  if (rendererParentCanBeNull != null) {
    if (rendererParentCanBeNull.isEnabled() != isEnabled()) {
      setEnabled(rendererParentCanBeNull.isEnabled());
    }
    if (rendererParentCanBeNull.isOpaque() != isOpaque() && !bgRowColorSet) {
      setOpaque(rendererParentCanBeNull.isOpaque());
    }
 else     if (bgRowColorSet && !isOpaque()) {
      setOpaque(true);
    }
  }
  return this;
}","public Component getListCellRendererComponent(JComponent rendererParentCanBeNull,Object value,int index,boolean isSelected,boolean cellHasFocus){
  this.selected=isSelected;
  boolean bgRowColorSet=false;
  if (value instanceof IRecordInternal) {
    IRecordInternal val=(IRecordInternal)value;
    if (rendererParentCanBeNull != null) {
      DataAdapterList.setDataRendererComponentsRenderState(this,val);
    }
    dataAdapterList.setRecord(val,!isRenderer);
    if (index != -1) {
      boolean specialStateCase=(val instanceof PrototypeState || val instanceof FindState);
      if (strRowBGColorProvider == null && !specialStateCase) {
        if (rendererParentCanBeNull instanceof ISupportRowBGColorScript) {
          strRowBGColorProvider=((ISupportRowBGColorScript)rendererParentCanBeNull).getRowBGColorScript();
          rowBGColorArgs=((ISupportRowBGColorScript)rendererParentCanBeNull).getRowBGColorArgs();
        }
        if (strRowBGColorProvider == null)         strRowBGColorProvider=""String_Node_Str"";
        isRowBGColorCalculation=val.getRawData().containsCalculation(strRowBGColorProvider);
        if (!isRowBGColorCalculation && strRowBGColorProvider.equals(""String_Node_Str"")) {
          strRowBGColorProvider=""String_Node_Str"";
        }
        defaultColor=getBackground();
      }
      if (strRowBGColorProvider != null && !""String_Node_Str"".equals(strRowBGColorProvider)) {
        IFoundSetInternal parent=val.getParentFoundSet();
        if (parent != null && !specialStateCase) {
          Object bg_color=null;
          if (isRowBGColorCalculation) {
            bg_color=parent.getCalculationValue(val,strRowBGColorProvider,Utils.arrayMerge((new Object[]{new Integer(index),new Boolean(isSelected),null,null,Boolean.FALSE}),Utils.parseJSExpressions(rowBGColorArgs)),null);
          }
 else {
            try {
              FormController currentForm=dataAdapterList.getFormController();
              bg_color=currentForm.executeFunction(strRowBGColorProvider,Utils.arrayMerge((new Object[]{new Integer(index),new Boolean(isSelected),null,null,currentForm.getName(),val,Boolean.FALSE}),Utils.parseJSExpressions(rowBGColorArgs)),false,null,true,null);
            }
 catch (            Exception ex) {
              Debug.error(ex);
            }
          }
          if (bg_color != null && !(bg_color.toString().trim().length() == 0) && !(bg_color instanceof Undefined)) {
            bgRowColorSet=true;
            setBackground(PersistHelper.createColor(bg_color.toString()));
          }
 else {
            setBackground(defaultColor);
          }
        }
 else {
          setBackground(defaultColor);
        }
      }
      if (rendererParentCanBeNull instanceof ISupportRowStyling && !specialStateCase && !bgRowColorSet) {
        ISupportRowStyling oddEvenStyling=(ISupportRowStyling)rendererParentCanBeNull;
        StyleSheet ss=oddEvenStyling.getRowStyleSheet();
        Style style=isSelected ? oddEvenStyling.getRowSelectedStyle() : null;
        if (style != null && style.getAttributeCount() == 0)         style=null;
        if (style == null) {
          style=(index % 2 == 0) ? oddEvenStyling.getRowOddStyle() : oddEvenStyling.getRowEvenStyle();
        }
        if (ss != null && style != null) {
          Color bgColor=ss.getBackground(style);
          if (bgColor != null) {
            showSelection=false;
            bgRowColorSet=true;
            setBackground(bgColor);
          }
        }
      }
    }
  }
  if (rendererParentCanBeNull != null) {
    if (rendererParentCanBeNull.isEnabled() != isEnabled()) {
      setEnabled(rendererParentCanBeNull.isEnabled());
    }
    if (rendererParentCanBeNull.isOpaque() != isOpaque() && !bgRowColorSet) {
      setOpaque(rendererParentCanBeNull.isOpaque());
    }
 else     if (bgRowColorSet && !isOpaque()) {
      setOpaque(true);
    }
  }
  return this;
}",0.9844505422710048
143712,"private void init(){
  add(new HeaderContributor(new IHeaderContributor(){
    private static final long serialVersionUID=1L;
    public void renderHead(    IHeaderResponse response){
      response.renderCSSReference(new CompressedResourceReference(WebDataLookupField.class,""String_Node_Str""));
    }
  }
){
    @Override public boolean isEnabled(    Component component){
      return !getScriptObject().js_isReadOnly() && getScriptObject().js_isEnabled();
    }
  }
);
  setOutputMarkupPlaceholderTag(true);
  AutoCompleteSettings behSettings=new AutoCompleteSettings();
  behSettings.setMaxHeightInPx(200);
  behSettings.setPreselect(true);
  behSettings.setShowCompleteListOnFocusGain(true);
  behSettings.setAdjustInputWidth(false);
  ClientProperties clp=(application.getApplicationType() != IApplication.HEADLESS_CLIENT ? ((WebClientInfo)Session.get().getClientInfo()).getProperties() : null);
  if (clp != null && (!clp.isBrowserInternetExplorer() || clp.getBrowserVersionMajor() >= 8)) {
    behSettings.setUseSmartPositioning(true);
    behSettings.setUseHideShowCoveredIEFix(false);
  }
 else {
    behSettings.setUseSmartPositioning(false);
    behSettings.setUseHideShowCoveredIEFix(true);
  }
  behSettings.setThrottleDelay(500);
  AbstractAutoCompleteTextRenderer<Object> renderer=new AbstractAutoCompleteTextRenderer<Object>(){
    @Override protected String getTextValue(    Object object){
      String str=(object == null ? ""String_Node_Str"" : object.toString());
      if (str.trim().equals(""String_Node_Str""))       str=""String_Node_Str"";
      return str;
    }
  }
;
  AutoCompleteBehavior<Object> beh=new AutoCompleteBehavior<Object>(renderer,behSettings){
    private static final long serialVersionUID=1L;
    /** 
 * @see org.apache.wicket.extensions.ajax.markup.html.autocomplete.AutoCompleteBehavior#getChoices(java.lang.String)
 */
    @Override protected Iterator<Object> getChoices(    String input){
      try {
        dlm.fill(parentState,getDataProviderID(),input,false);
        return dlm.iterator();
      }
 catch (      Exception ex) {
        Debug.error(ex);
      }
      return Collections.emptyList().iterator();
    }
    /** 
 * @see org.apache.wicket.ajax.AbstractDefaultAjaxBehavior#getFailureScript()
 */
    @Override protected CharSequence getFailureScript(){
      return ""String_Node_Str"";
    }
    /** 
 * @see org.apache.wicket.ajax.AbstractDefaultAjaxBehavior#getPreconditionScript()
 */
    @Override protected CharSequence getPreconditionScript(){
      return ""String_Node_Str"" + super.getPreconditionScript();
    }
    @Override public void renderHead(    IHeaderResponse response){
      settings.setShowListOnEmptyInput(Boolean.TRUE.equals(UIUtils.getUIProperty(getScriptObject(),application,IApplication.TYPE_AHEAD_SHOW_POPUP_WHEN_EMPTY,Boolean.TRUE)));
      settings.setShowListOnFocusGain(Boolean.TRUE.equals(UIUtils.getUIProperty(getScriptObject(),application,IApplication.TYPE_AHEAD_SHOW_POPUP_ON_FOCUS_GAIN,Boolean.TRUE)));
      if (!getScriptObject().js_isReadOnly() && getScriptObject().js_isEnabled()) {
        super.renderHead(response);
        response.renderJavascript(""String_Node_Str"",""String_Node_Str"");
      }
    }
    /** 
 * @see org.apache.wicket.behavior.AbstractBehavior#isEnabled(org.apache.wicket.Component)
 */
    @Override public boolean isEnabled(    Component component){
      return super.isEnabled(component) && WebClientSession.get().useAjax();
    }
  }
;
  add(beh);
}","private void init(){
  add(new HeaderContributor(new IHeaderContributor(){
    private static final long serialVersionUID=1L;
    @SuppressWarnings(""String_Node_Str"") public void renderHead(    IHeaderResponse response){
      response.renderCSSReference(new CompressedResourceReference(WebDataLookupField.class,""String_Node_Str""));
      StringBuffer headerStyle=new StringBuffer();
      headerStyle.append(""String_Node_Str"");
      headerStyle.append(""String_Node_Str"" + getMarkupId() + ""String_Node_Str""+ ""String_Node_Str"");
      headerStyle.append(""String_Node_Str"");
      headerStyle.append(""String_Node_Str"" + getFont().getSize() + ""String_Node_Str"");
      headerStyle.append(""String_Node_Str"");
      headerStyle.append(""String_Node_Str"");
      headerStyle.append(""String_Node_Str"");
      headerStyle.append(""String_Node_Str"");
      response.renderString(headerStyle.toString());
    }
  }
){
    @Override public boolean isEnabled(    Component component){
      return !getScriptObject().js_isReadOnly() && getScriptObject().js_isEnabled();
    }
  }
);
  setOutputMarkupPlaceholderTag(true);
  AutoCompleteSettings behSettings=new AutoCompleteSettings();
  behSettings.setMaxHeightInPx(200);
  behSettings.setPreselect(true);
  behSettings.setShowCompleteListOnFocusGain(true);
  behSettings.setAdjustInputWidth(false);
  ClientProperties clp=(application.getApplicationType() != IApplication.HEADLESS_CLIENT ? ((WebClientInfo)Session.get().getClientInfo()).getProperties() : null);
  if (clp != null && (!clp.isBrowserInternetExplorer() || clp.getBrowserVersionMajor() >= 8)) {
    behSettings.setUseSmartPositioning(true);
    behSettings.setUseHideShowCoveredIEFix(false);
  }
 else {
    behSettings.setUseSmartPositioning(false);
    behSettings.setUseHideShowCoveredIEFix(true);
  }
  behSettings.setThrottleDelay(500);
  AbstractAutoCompleteTextRenderer<Object> renderer=new AbstractAutoCompleteTextRenderer<Object>(){
    @Override protected String getTextValue(    Object object){
      String str=(object == null ? ""String_Node_Str"" : object.toString());
      if (str.trim().equals(""String_Node_Str""))       str=""String_Node_Str"";
      return str;
    }
  }
;
  AutoCompleteBehavior<Object> beh=new AutoCompleteBehavior<Object>(renderer,behSettings){
    private static final long serialVersionUID=1L;
    /** 
 * @see org.apache.wicket.extensions.ajax.markup.html.autocomplete.AutoCompleteBehavior#getChoices(java.lang.String)
 */
    @Override protected Iterator<Object> getChoices(    String input){
      try {
        dlm.fill(parentState,getDataProviderID(),input,false);
        return dlm.iterator();
      }
 catch (      Exception ex) {
        Debug.error(ex);
      }
      return Collections.emptyList().iterator();
    }
    /** 
 * @see org.apache.wicket.ajax.AbstractDefaultAjaxBehavior#getFailureScript()
 */
    @Override protected CharSequence getFailureScript(){
      return ""String_Node_Str"";
    }
    /** 
 * @see org.apache.wicket.ajax.AbstractDefaultAjaxBehavior#getPreconditionScript()
 */
    @Override protected CharSequence getPreconditionScript(){
      return ""String_Node_Str"" + super.getPreconditionScript();
    }
    @Override public void renderHead(    IHeaderResponse response){
      settings.setShowListOnEmptyInput(Boolean.TRUE.equals(UIUtils.getUIProperty(getScriptObject(),application,IApplication.TYPE_AHEAD_SHOW_POPUP_WHEN_EMPTY,Boolean.TRUE)));
      settings.setShowListOnFocusGain(Boolean.TRUE.equals(UIUtils.getUIProperty(getScriptObject(),application,IApplication.TYPE_AHEAD_SHOW_POPUP_ON_FOCUS_GAIN,Boolean.TRUE)));
      if (!getScriptObject().js_isReadOnly() && getScriptObject().js_isEnabled()) {
        super.renderHead(response);
        response.renderJavascript(""String_Node_Str"",""String_Node_Str"");
      }
    }
    /** 
 * @see org.apache.wicket.behavior.AbstractBehavior#isEnabled(org.apache.wicket.Component)
 */
    @Override public boolean isEnabled(    Component component){
      return super.isEnabled(component) && WebClientSession.get().useAjax();
    }
  }
;
  add(beh);
}",0.920773714891362
143713,"private void setUpComponent(Component comp,IRecordInternal record,Object compColor,Object fgColor,Object compFont,int visibleRowIndex){
  if (tabIndex < 0) {
    TabIndexHelper.setUpTabIndexAttributeModifier(comp,tabIndex);
  }
 else {
    if (elementTabIndexes.size() > 0) {
      Integer idx=elementTabIndexes.get(cellToElement.get(comp));
      if (idx == null) {
        TabIndexHelper.setUpTabIndexAttributeModifier(comp,ISupportWebTabSeq.SKIP);
      }
 else {
        TabIndexHelper.setUpTabIndexAttributeModifier(comp,tabIndex + 1 + visibleRowIndex * elementTabIndexes.size() + idx.intValue());
      }
    }
 else {
      TabIndexHelper.setUpTabIndexAttributeModifier(comp,tabIndex + 1);
    }
  }
  if (compColor != null) {
    MarkupContainer cellContainer=comp.getParent();
    if (cellContainer instanceof CellContainer) {
      cellContainer.add(new StyleAppendingModifier(new Model<String>(""String_Node_Str"" + compColor.toString())));
    }
    comp.add(new StyleAppendingModifier(new Model<String>(""String_Node_Str"" + compColor.toString())));
  }
  if (fgColor != null) {
    comp.add(new StyleAppendingModifier(new Model<String>(""String_Node_Str"" + fgColor.toString())));
  }
  if (compFont != null) {
    Pair<String,String> fontProps[]=PersistHelper.createFontCSSProperties(compFont.toString());
    for (    Pair<String,String> fontProp : fontProps) {
      if (fontProp != null) {
        comp.add(new StyleAppendingModifier(new Model<String>(new StringBuilder(fontProp.getLeft()).append(""String_Node_Str"").append(fontProp.getRight()).toString())));
      }
    }
  }
  if (scriptable.js_isReadOnly() && validationEnabled && comp instanceof IScriptableProvider&& ((IScriptableProvider)comp).getScriptObject() instanceof IScriptReadOnlyMethods) {
    ((IScriptReadOnlyMethods)((IScriptableProvider)comp).getScriptObject()).js_setReadOnly(true);
  }
  if (!isEnabled() && comp instanceof IComponent) {
    ((IComponent)comp).setComponentEnabled(false);
  }
  if (comp instanceof IDisplayRelatedData && record != null) {
    ((IDisplayRelatedData)comp).setRecord(record,true);
  }
  MarkupContainer parent=comp.getParent();
  if (parent instanceof CellContainer) {
    parent.setVisible(comp.isVisible());
  }
}","private void setUpComponent(Component comp,IRecordInternal record,Object compColor,Object fgColor,Object compFont,int visibleRowIndex){
  if (tabIndex < 0) {
    TabIndexHelper.setUpTabIndexAttributeModifier(comp,tabIndex);
  }
 else {
    if (elementTabIndexes.size() > 0) {
      Integer idx=elementTabIndexes.get(cellToElement.get(comp));
      if (idx == null) {
        TabIndexHelper.setUpTabIndexAttributeModifier(comp,ISupportWebTabSeq.SKIP);
      }
 else {
        TabIndexHelper.setUpTabIndexAttributeModifier(comp,tabIndex + 1 + visibleRowIndex * elementTabIndexes.size() + idx.intValue());
      }
    }
 else {
      TabIndexHelper.setUpTabIndexAttributeModifier(comp,tabIndex + 1);
    }
  }
  if (compColor != null) {
    MarkupContainer cellContainer=comp.getParent();
    String compColorStr=compColor.toString();
    if (cellContainer instanceof CellContainer) {
      cellContainer.add(new StyleAppendingModifier(new Model<String>(""String_Node_Str"" + compColorStr)));
    }
  }
  WebCellBasedView.this.applyStyleOnComponent(comp,compColor,fgColor,compFont);
  if (scriptable.js_isReadOnly() && validationEnabled && comp instanceof IScriptableProvider&& ((IScriptableProvider)comp).getScriptObject() instanceof IScriptReadOnlyMethods) {
    ((IScriptReadOnlyMethods)((IScriptableProvider)comp).getScriptObject()).js_setReadOnly(true);
  }
  if (!isEnabled() && comp instanceof IComponent) {
    ((IComponent)comp).setComponentEnabled(false);
  }
  if (comp instanceof IDisplayRelatedData && record != null) {
    ((IDisplayRelatedData)comp).setRecord(record,true);
  }
  MarkupContainer parent=comp.getParent();
  if (parent instanceof CellContainer) {
    parent.setVisible(comp.isVisible());
  }
}",0.5812009120851279
143714,"private void setUpItem(final ListItem<IRecordInternal> listItem,boolean createComponents){
  if (!createComponents) {
    List<IBehavior> allBehaviors=listItem.getBehaviors();
    for (int i=0; i < allBehaviors.size(); i++) {
      listItem.remove(allBehaviors.get(i));
    }
  }
  final IRecordInternal rec=listItem.getModelObject();
  Object color=WebCellBasedView.this.getListItemBgColor(listItem,false);
  if (color instanceof Undefined)   color=null;
  Object fgColor=WebCellBasedView.this.getListItemFgColor(listItem,false);
  if (fgColor instanceof Undefined)   fgColor=null;
  Object styleFont=WebCellBasedView.this.getListItemFont(listItem,false);
  if (styleFont instanceof Undefined)   styleFont=null;
  if (color == null && fgColor == null && styleFont == null) {
    listItem.add(new AttributeModifier(""String_Node_Str"",new Model<String>((listItem.getIndex() % 2) == 0 ? ""String_Node_Str"" : ""String_Node_Str"")));
  }
  final int visibleRowIndex=listItem.getIndex() % getRowsPerPage();
  if (createComponents) {
    final Object compColor=color;
    final Object compFgColor=fgColor;
    final Object compFont=styleFont;
    createComponents(application,form,cellview,dataProviderLookup,el,startY,endY,new ItemAdd(){
      public void add(      IPersist element,      final Component comp){
        Component component=elementToColumnIdentifierComponent.values().iterator().next();
        if ((component instanceof IComponent) && (comp instanceof IScriptableProvider)) {
          IScriptable scriptable=((IScriptableProvider)comp).getScriptObject();
          if (scriptable instanceof IScriptBaseMethods) {
            IScriptBaseMethods ic=(IScriptBaseMethods)scriptable;
            ic.js_setSize(ic.js_getWidth(),((IComponent)component).getSize().height);
          }
        }
        cellToElement.put(comp,element);
        Component listItemChild=comp;
        if (element instanceof ISupportName) {
          String elementName=((ISupportName)element).getName();
          if ((elementName != null) && (elementName.trim().length() > 0) || WebCellBasedView.this.addHeaders) {
            listItemChild=new CellContainer(comp.getId() + '_');
            listItemChild.setOutputMarkupPlaceholderTag(true);
            ((MarkupContainer)listItemChild).add(comp);
          }
        }
        listItem.add(listItemChild);
        setUpComponent(comp,rec,compColor,compFgColor,compFont,visibleRowIndex);
      }
    }
);
  }
 else {
    Iterator<? extends Component> children=listItem.iterator();
    while (children.hasNext()) {
      Component child=CellContainer.getContentsForCell(children.next());
      initializeComponent(child,cellview,cellToElement.get(child));
      setUpComponent(child,rec,color,fgColor,styleFont,visibleRowIndex);
    }
  }
  enableChildrenInContainer(this,isEnabled());
}","private void setUpItem(final ListItem<IRecordInternal> listItem,boolean createComponents){
  if (!createComponents) {
    List<IBehavior> allBehaviors=listItem.getBehaviors();
    for (int i=0; i < allBehaviors.size(); i++) {
      listItem.remove(allBehaviors.get(i));
    }
  }
  final IRecordInternal rec=listItem.getModelObject();
  boolean selected=isRecordSelected(rec);
  Object color=WebCellBasedView.this.getListItemBgColor(listItem,selected);
  if (color instanceof Undefined)   color=null;
  Object fgColor=WebCellBasedView.this.getListItemFgColor(listItem,selected);
  if (fgColor instanceof Undefined)   fgColor=null;
  Object styleFont=WebCellBasedView.this.getListItemFont(listItem,selected);
  if (styleFont instanceof Undefined)   styleFont=null;
  if (color == null && fgColor == null && styleFont == null) {
    listItem.add(new AttributeModifier(""String_Node_Str"",new Model<String>((listItem.getIndex() % 2) == 0 ? ""String_Node_Str"" : ""String_Node_Str"")));
  }
  final int visibleRowIndex=listItem.getIndex() % getRowsPerPage();
  if (createComponents) {
    final Object compColor=color;
    final Object compFgColor=fgColor;
    final Object compFont=styleFont;
    createComponents(application,form,cellview,dataProviderLookup,el,startY,endY,new ItemAdd(){
      public void add(      IPersist element,      final Component comp){
        Component component=elementToColumnIdentifierComponent.values().iterator().next();
        if ((component instanceof IComponent) && (comp instanceof IScriptableProvider)) {
          IScriptable scriptable=((IScriptableProvider)comp).getScriptObject();
          if (scriptable instanceof IScriptBaseMethods) {
            IScriptBaseMethods ic=(IScriptBaseMethods)scriptable;
            ic.js_setSize(ic.js_getWidth(),((IComponent)component).getSize().height);
          }
        }
        cellToElement.put(comp,element);
        Component listItemChild=comp;
        if (element instanceof ISupportName) {
          String elementName=((ISupportName)element).getName();
          if ((elementName != null) && (elementName.trim().length() > 0) || WebCellBasedView.this.addHeaders) {
            listItemChild=new CellContainer(comp.getId() + '_');
            listItemChild.setOutputMarkupPlaceholderTag(true);
            ((MarkupContainer)listItemChild).add(comp);
          }
        }
        listItem.add(listItemChild);
        setUpComponent(comp,rec,compColor,compFgColor,compFont,visibleRowIndex);
      }
    }
);
  }
 else {
    Iterator<? extends Component> children=listItem.iterator();
    while (children.hasNext()) {
      Component child=CellContainer.getContentsForCell(children.next());
      initializeComponent(child,cellview,cellToElement.get(child));
      setUpComponent(child,rec,color,fgColor,styleFont,visibleRowIndex);
    }
  }
  enableChildrenInContainer(this,isEnabled());
}",0.9857670005271482
143715,"/** 
 * @see wicket.MarkupContainer#onRender(wicket.markup.MarkupStream)
 */
@Override protected void onRender(MarkupStream markupStream){
  super.onRender(markupStream);
  getStylePropertyChanges().setRendered();
}","/** 
 * @see wicket.MarkupContainer#onRender(wicket.markup.MarkupStream)
 */
@Override protected void onRender(MarkupStream markupStream){
  super.onRender(markupStream);
  getStylePropertyChanges().setRendered();
  hasOnRender=hasOnRender();
}",0.9368191721132898
143716,"public void updateRowComponentsRenderState(AjaxRequestTarget target){
  if (currentData == null)   return;
  List<Integer> indexToUpdate;
  if ((indexToUpdate=getIndexToUpdate()) != null) {
    int firstRow=table.getCurrentPage() * table.getRowsPerPage();
    int lastRow=firstRow + table.getViewSize() - 1;
    int[] newSelectedIndexes=getSelectedIndexes();
    for (    int rowIdx : indexToUpdate) {
      if (rowIdx >= firstRow && rowIdx <= lastRow) {
        ListItem<IRecordInternal> selectedListItem=(ListItem<IRecordInternal>)table.get(Integer.toString(rowIdx));
        if (selectedListItem instanceof WebCellBasedViewListItem) {
          ((WebCellBasedViewListItem)selectedListItem).updateComponentsRenderState(target,Arrays.binarySearch(newSelectedIndexes,rowIdx) >= 0);
        }
      }
    }
    selectedIndexes=newSelectedIndexes;
  }
}","public void updateRowComponentsRenderState(AjaxRequestTarget target){
  if (currentData == null)   return;
  List<Integer> indexToUpdate;
  if ((indexToUpdate=getIndexToUpdate()) != null) {
    int firstRow=table.getCurrentPage() * table.getRowsPerPage();
    int lastRow=firstRow + table.getViewSize() - 1;
    int[] newSelectedIndexes=getSelectedIndexes();
    for (    int rowIdx : indexToUpdate) {
      if (rowIdx >= firstRow && rowIdx <= lastRow) {
        ListItem<IRecordInternal> selectedListItem=(ListItem<IRecordInternal>)table.get(Integer.toString(rowIdx));
        if (selectedListItem instanceof WebCellBasedViewListItem) {
          boolean isSelected=Arrays.binarySearch(newSelectedIndexes,rowIdx) >= 0;
          Object color=WebCellBasedView.this.getListItemBgColor(selectedListItem,isSelected);
          String sColor=(color == null || color instanceof Undefined) ? null : color.toString();
          Object fgColor=WebCellBasedView.this.getListItemFgColor(selectedListItem,isSelected);
          String sFgColor=(fgColor == null || fgColor instanceof Undefined) ? null : fgColor.toString();
          Object styleFont=WebCellBasedView.this.getListItemFont(selectedListItem,isSelected);
          String sStyleFont=(styleFont == null || styleFont instanceof Undefined) ? null : styleFont.toString();
          ((WebCellBasedViewListItem)selectedListItem).updateComponentsRenderState(target,sColor,sFgColor,sStyleFont,isSelected);
        }
      }
    }
    selectedIndexes=newSelectedIndexes;
  }
}",0.6337552742616034
143717,"public String getRowSelectionScript(){
  if (currentData == null)   return null;
  List<Integer> indexToUpdate;
  if (!dataRendererOnRenderWrapper.getRenderEventExecutor().hasRenderCallback() && (bgColorScript != null || getRowSelectedStyle() != null) && (indexToUpdate=getIndexToUpdate()) != null) {
    int firstRow=table.getCurrentPage() * table.getRowsPerPage();
    int lastRow=firstRow + table.getViewSize() - 1;
    int[] newSelectedIndexes=getSelectedIndexes();
    AppendingStringBuffer sab=new AppendingStringBuffer();
    for (    int rowIdx : indexToUpdate) {
      if (rowIdx >= firstRow && rowIdx <= lastRow) {
        ListItem<IRecordInternal> selectedListItem=(ListItem<IRecordInternal>)table.get(Integer.toString(rowIdx));
        if (selectedListItem != null) {
          String selectedId=selectedListItem.getMarkupId();
          boolean isSelected=Arrays.binarySearch(newSelectedIndexes,rowIdx) >= 0;
          Object selectedColor=getListItemBgColor(selectedListItem,isSelected);
          Object selectedFgColor=getListItemFgColor(selectedListItem,isSelected);
          Object selectedFont=getListItemFont(selectedListItem,isSelected);
          selectedColor=(selectedColor == null ? ""String_Node_Str"" : selectedColor.toString());
          selectedFgColor=(selectedFgColor == null) ? ""String_Node_Str"" : selectedFgColor.toString();
          String fstyle=""String_Node_Str"", fweight=""String_Node_Str"", fsize=""String_Node_Str"", ffamily=""String_Node_Str"";
          if (selectedFont != null) {
            Pair<String,String> fontCSSProps[]=PersistHelper.createFontCSSProperties(selectedFont.toString());
            for (            Pair<String,String> fontCSSProp : fontCSSProps) {
              if (fontCSSProp != null) {
                String key=fontCSSProp.getLeft();
                String value=fontCSSProp.getRight();
                if (value == null)                 value=""String_Node_Str"";
                if (""String_Node_Str"".equals(key))                 fstyle=value;
 else                 if (""String_Node_Str"".equals(key))                 fweight=value;
 else                 if (""String_Node_Str"".equals(key))                 fsize=value;
 else                 if (""String_Node_Str"".equals(key))                 ffamily=value;
              }
            }
          }
          sab.append(""String_Node_Str"").append(selectedId).append(""String_Node_Str"").append(selectedColor).append(""String_Node_Str"").append(selectedFgColor).append(""String_Node_Str"").append(fstyle).append(""String_Node_Str"").append(fweight).append(""String_Node_Str"").append(fsize).append(""String_Node_Str"").append(ffamily).append(""String_Node_Str"");
        }
      }
    }
    String rowSelectionScript=sab.toString();
    if (rowSelectionScript.length() > 0)     return rowSelectionScript;
  }
  return null;
}","public String getRowSelectionScript(){
  if (currentData == null)   return null;
  List<Integer> indexToUpdate;
  if (!hasOnRender && (bgColorScript != null || getRowSelectedStyle() != null) && (indexToUpdate=getIndexToUpdate()) != null) {
    int firstRow=table.getCurrentPage() * table.getRowsPerPage();
    int lastRow=firstRow + table.getViewSize() - 1;
    int[] newSelectedIndexes=getSelectedIndexes();
    AppendingStringBuffer sab=new AppendingStringBuffer();
    for (    int rowIdx : indexToUpdate) {
      if (rowIdx >= firstRow && rowIdx <= lastRow) {
        ListItem<IRecordInternal> selectedListItem=(ListItem<IRecordInternal>)table.get(Integer.toString(rowIdx));
        if (selectedListItem != null) {
          String selectedId=selectedListItem.getMarkupId();
          boolean isSelected=Arrays.binarySearch(newSelectedIndexes,rowIdx) >= 0;
          Object selectedColor=getListItemBgColor(selectedListItem,isSelected);
          Object selectedFgColor=getListItemFgColor(selectedListItem,isSelected);
          Object selectedFont=getListItemFont(selectedListItem,isSelected);
          selectedColor=(selectedColor == null ? ""String_Node_Str"" : selectedColor.toString());
          selectedFgColor=(selectedFgColor == null) ? ""String_Node_Str"" : selectedFgColor.toString();
          String fstyle=""String_Node_Str"", fweight=""String_Node_Str"", fsize=""String_Node_Str"", ffamily=""String_Node_Str"";
          if (selectedFont != null) {
            Pair<String,String> fontCSSProps[]=PersistHelper.createFontCSSProperties(selectedFont.toString());
            for (            Pair<String,String> fontCSSProp : fontCSSProps) {
              if (fontCSSProp != null) {
                String key=fontCSSProp.getLeft();
                String value=fontCSSProp.getRight();
                if (value == null)                 value=""String_Node_Str"";
                if (""String_Node_Str"".equals(key))                 fstyle=value;
 else                 if (""String_Node_Str"".equals(key))                 fweight=value;
 else                 if (""String_Node_Str"".equals(key))                 fsize=value;
 else                 if (""String_Node_Str"".equals(key))                 ffamily=value;
              }
            }
          }
          sab.append(""String_Node_Str"").append(selectedId).append(""String_Node_Str"").append(selectedColor).append(""String_Node_Str"").append(selectedFgColor).append(""String_Node_Str"").append(fstyle).append(""String_Node_Str"").append(fweight).append(""String_Node_Str"").append(fsize).append(""String_Node_Str"").append(ffamily).append(""String_Node_Str"");
        }
      }
    }
    String rowSelectionScript=sab.toString();
    if (rowSelectionScript.length() > 0)     return rowSelectionScript;
  }
  return null;
}",0.9872919276892786
143718,"@Override public void renderHead(HtmlHeaderContainer container){
  super.renderHead(container);
  selectedIndexes=null;
  String rowSelectionScript=getRowSelectionScript();
  updateRowComponentsRenderState(null);
  if (rowSelectionScript != null)   container.getHeaderResponse().renderOnDomReadyJavascript(rowSelectionScript);
  String columnResizeScript=getColumnResizeScript();
  if (columnResizeScript != null)   container.getHeaderResponse().renderOnDomReadyJavascript(columnResizeScript);
}","@Override public void renderHead(HtmlHeaderContainer container){
  super.renderHead(container);
  selectedIndexes=null;
  updateRowComponentsRenderState(null);
  String columnResizeScript=getColumnResizeScript();
  if (columnResizeScript != null)   container.getHeaderResponse().renderOnDomReadyJavascript(columnResizeScript);
}",0.6002430133657352
143719,"public void updateComponentsRenderState(AjaxRequestTarget target,boolean isSelected){
  Iterator<? extends Component> it=iterator();
  while (it.hasNext()) {
    Component component=it.next();
    if (component.isVisibleInHierarchy()) {
      Object c=component instanceof CellContainer ? ((CellContainer)component).iterator().next() : component;
      if (updateComponentRenderState(c,isSelected) && target != null && c instanceof Component) {
        Component innerComponent=(Component)c;
        target.addComponent(innerComponent);
        WebEventExecutor.generateDragAttach(innerComponent,target.getHeaderResponse());
        if (!innerComponent.isVisible()) {
          ((IProviderStylePropertyChanges)innerComponent).getStylePropertyChanges().setRendered();
        }
      }
    }
  }
}","public void updateComponentsRenderState(AjaxRequestTarget target,String bgColor,String fgColor,String compFont,boolean isSelected){
  Iterator<? extends Component> it=iterator();
  while (it.hasNext()) {
    Component component=it.next();
    if (component.isVisibleInHierarchy()) {
      Object c=component instanceof CellContainer ? ((CellContainer)component).iterator().next() : component;
      if (c instanceof Component) {
        Component innerComponent=(Component)c;
        WebCellBasedView.this.applyStyleOnComponent(innerComponent,bgColor,fgColor,compFont);
        boolean innerComponentChanged=innerComponent instanceof IProviderStylePropertyChanges && ((IProviderStylePropertyChanges)innerComponent).getStylePropertyChanges().isChanged();
        if ((updateComponentRenderState(c,isSelected) || innerComponentChanged) && target != null) {
          target.addComponent(innerComponent);
          WebEventExecutor.generateDragAttach(innerComponent,target.getHeaderResponse());
          if (!innerComponent.isVisible()) {
            ((IProviderStylePropertyChanges)innerComponent).getStylePropertyChanges().setRendered();
          }
        }
      }
    }
  }
}",0.6592405063291139
143720,"@Override protected void setDefaultRenderProperties(ISupportOnRenderCallback display){
  IScriptRenderMethods scriptable=null;
  if (display instanceof IScriptableProvider) {
    scriptable=(IScriptRenderMethods)((IScriptableProvider)display).getScriptObject();
  }
 else {
    scriptable=(IScriptRenderMethods)display;
  }
  scriptable.js_setBgcolor(PersistHelper.createColorString(renderDefaultBgColor));
  if (renderDefaultBorder != null)   scriptable.js_setBorder(ComponentFactoryHelper.createBorderString(renderDefaultBorder));
  scriptable.js_setEnabled(renderDefaultEnabled);
  scriptable.js_setFgcolor(PersistHelper.createColorString(renderDefaultFgColor));
  scriptable.js_setFont(PersistHelper.createFontString(renderDefaultFont));
  scriptable.js_setToolTipText(renderDefaultTooltipText);
  if (isUseDefaultTransparent())   scriptable.js_setTransparent(!renderDefaultOpaque);
  scriptable.js_setVisible(renderDefaultVisible);
}","@Override protected void setDefaultRenderProperties(ISupportOnRenderCallback display){
  IScriptRenderMethods scriptable=null;
  if (display instanceof IScriptableProvider) {
    scriptable=(IScriptRenderMethods)((IScriptableProvider)display).getScriptObject();
  }
 else {
    scriptable=(IScriptRenderMethods)display;
  }
  if (isUseDefaultBackground())   scriptable.js_setBgcolor(PersistHelper.createColorString(renderDefaultBgColor));
  if (renderDefaultBorder != null)   scriptable.js_setBorder(ComponentFactoryHelper.createBorderString(renderDefaultBorder));
  scriptable.js_setEnabled(renderDefaultEnabled);
  if (isUseDefaultForeground())   scriptable.js_setFgcolor(PersistHelper.createColorString(renderDefaultFgColor));
  if (isUseDefaultFont())   scriptable.js_setFont(PersistHelper.createFontString(renderDefaultFont));
  scriptable.js_setToolTipText(renderDefaultTooltipText);
  if (isUseDefaultTransparent())   scriptable.js_setTransparent(!renderDefaultOpaque);
  scriptable.js_setVisible(renderDefaultVisible);
}",0.9542217700915564
143721,"/** 
 * @deprecated Use ""typeof"" operator instead.
 */
@Deprecated @Override public boolean js_isServoyException(){
  return false;
}","/** 
 * @sameas com.servoy.j2db.util.ServoyException#js_isServoyException()
 * @deprecated Use ""typeof"" operator instead.
 */
@Deprecated @Override public boolean js_isServoyException(){
  return false;
}",0.7893175074183977
143722,"/** 
 * Get an element of the form by its name.
 * @sampleas allnames
 */
public String js_getIndex_name(){
  return null;
}","/** 
 * Get an element of the form by its name.
 * @sampleas js_getAllnames()
 */
public String js_getIndex_name(){
  return null;
}",0.9609375
143723,"/** 
 * Get an element of the form by its index.
 * @sampleas length
 */
public Number js_getIndex_index(){
  return null;
}","/** 
 * Get an element of the form by its index.
 * @sampleas js_getLength()
 */
public Number js_getIndex_index(){
  return null;
}",0.9609375
143724,"/** 
 * @sameas com.servoy.j2db.scripting.solutionmodel.JSGraphicalComponent#js_setOnActionMethod()
 */
@Deprecated public void js_setOnActionMethod(Function function){
  ScriptMethod scriptMethod=JSForm.getScriptMethod(function,application.getFlattenedSolution());
  if (scriptMethod != null) {
    getBaseComponent(true).setOnActionMethodID(scriptMethod.getID());
  }
 else {
    getBaseComponent(true).setOnActionMethodID(0);
  }
}","/** 
 * @sameas com.servoy.j2db.scripting.solutionmodel.JSGraphicalComponent#js_setOnActionMethod(Function)
 */
@Deprecated public void js_setOnActionMethod(Function function){
  ScriptMethod scriptMethod=JSForm.getScriptMethod(function,application.getFlattenedSolution());
  if (scriptMethod != null) {
    getBaseComponent(true).setOnActionMethodID(scriptMethod.getID());
  }
 else {
    getBaseComponent(true).setOnActionMethodID(0);
  }
}",0.9908675799086758
143725,"/** 
 * @param height
 * @param border
 * @param margin
 * @param fontSize
 * @param properties
 * @return
 */
public Insets getPaddingAndBorder(int height,Border border,Insets margin,int fontSize,Properties properties,boolean isButton,int valign){
  Insets insets=null;
  Insets borderMargin=margin;
  if (border != null) {
    if (border instanceof CompoundBorder) {
      Insets marginInside=((CompoundBorder)border).getInsideBorder().getBorderInsets(null);
      borderMargin=TemplateGenerator.sumInsets(borderMargin,marginInside);
      insets=((CompoundBorder)border).getOutsideBorder().getBorderInsets(null);
    }
 else {
      try {
        insets=border.getBorderInsets(null);
      }
 catch (      Exception ex) {
        insets=defaultBorder;
        Debug.error(ex);
      }
    }
  }
 else {
    insets=defaultBorder;
  }
  Insets padding=borderMargin;
  if (padding == null)   padding=defaultPadding;
  if (properties != null) {
    Insets borderAndPadding=TemplateGenerator.sumInsets(insets,padding);
    int innerHeight=height;
    if (borderAndPadding != null)     innerHeight-=borderAndPadding.top + borderAndPadding.bottom;
    int bottomPaddingExtra=0;
    if (isButton && valign != ISupportTextSetup.CENTER) {
      bottomPaddingExtra=innerHeight;
    }
    if (padding == null) {
      properties.put(""String_Node_Str"",""String_Node_Str"");
      properties.put(""String_Node_Str"",""String_Node_Str"");
      properties.put(""String_Node_Str"",""String_Node_Str"");
      properties.put(""String_Node_Str"",bottomPaddingExtra + ""String_Node_Str"");
    }
 else {
      properties.put(""String_Node_Str"",padding.top + ""String_Node_Str"");
      properties.put(""String_Node_Str"",padding.right + ""String_Node_Str"");
      properties.put(""String_Node_Str"",padding.left + ""String_Node_Str"");
      properties.put(""String_Node_Str"",(bottomPaddingExtra + padding.bottom) + ""String_Node_Str"");
    }
  }
  if (insets == null)   insets=padding;
 else {
    insets=TemplateGenerator.sumInsets(insets,padding);
  }
  return insets;
}","/** 
 * @param height
 * @param border
 * @param margin
 * @param fontSize
 * @param properties
 * @return
 */
public Insets getPaddingAndBorder(int height,Border border,Insets margin,int fontSize,Properties properties,boolean isButton,int valign){
  Insets insets=null;
  Insets borderMargin=margin;
  if (border != null) {
    if (border instanceof CompoundBorder) {
      Insets marginInside=((CompoundBorder)border).getInsideBorder().getBorderInsets(null);
      borderMargin=TemplateGenerator.sumInsets(borderMargin,marginInside);
      Border ob=((CompoundBorder)border).getOutsideBorder();
      if (ob instanceof ISupportCustomBorderInsets) {
        insets=((ISupportCustomBorderInsets)ob).getCustomBorderInsets();
      }
 else {
        insets=ob.getBorderInsets(null);
      }
    }
 else     if (border instanceof ISupportCustomBorderInsets) {
      insets=((ISupportCustomBorderInsets)border).getCustomBorderInsets();
    }
 else {
      try {
        insets=border.getBorderInsets(null);
      }
 catch (      Exception ex) {
        insets=defaultBorder;
        Debug.error(ex);
      }
    }
  }
 else {
    insets=defaultBorder;
  }
  Insets padding=borderMargin;
  if (padding == null)   padding=defaultPadding;
  if (properties != null) {
    Insets borderAndPadding=TemplateGenerator.sumInsets(insets,padding);
    int innerHeight=height;
    if (borderAndPadding != null)     innerHeight-=borderAndPadding.top + borderAndPadding.bottom;
    int bottomPaddingExtra=0;
    if (isButton && valign != ISupportTextSetup.CENTER) {
      bottomPaddingExtra=innerHeight;
    }
    if (padding == null) {
      properties.put(""String_Node_Str"",""String_Node_Str"");
      properties.put(""String_Node_Str"",""String_Node_Str"");
      properties.put(""String_Node_Str"",""String_Node_Str"");
      properties.put(""String_Node_Str"",bottomPaddingExtra + ""String_Node_Str"");
    }
 else {
      properties.put(""String_Node_Str"",padding.top + ""String_Node_Str"");
      properties.put(""String_Node_Str"",padding.right + ""String_Node_Str"");
      properties.put(""String_Node_Str"",padding.left + ""String_Node_Str"");
      properties.put(""String_Node_Str"",(bottomPaddingExtra + padding.bottom) + ""String_Node_Str"");
    }
  }
  if (insets == null)   insets=padding;
 else {
    insets=TemplateGenerator.sumInsets(insets,padding);
  }
  return insets;
}",0.9209684787574236
143726,"public static Insets createBorderCSSProperties(String s,Properties style){
  if (s == null) {
    return null;
  }
 else {
    StringTokenizer tk=new StringTokenizer(s,""String_Node_Str"");
    if (tk.hasMoreTokens()) {
      try {
        String type=tk.nextToken();
        if (type.equals(COMPOUND_BORDER)) {
          StringTokenizer tk2=new StringTokenizer(s,""String_Node_Str"");
          tk2.nextToken();
          String s_oborder=tk2.nextToken();
          return createBorderCSSProperties(s_oborder,style);
        }
 else         if (type.equals(EMPTY_BORDER)) {
          int top=Utils.getAsInteger(tk.nextToken());
          int right=Utils.getAsInteger(tk.nextToken());
          int bottom=Utils.getAsInteger(tk.nextToken());
          int left=Utils.getAsInteger(tk.nextToken());
          if (top != 0 && right != 0 && bottom != 0 && left != 0) {
            StringBuffer pad=new StringBuffer();
            pad.append(top);
            pad.append(""String_Node_Str"");
            pad.append(right);
            pad.append(""String_Node_Str"");
            pad.append(bottom);
            pad.append(""String_Node_Str"");
            pad.append(left);
            pad.append(""String_Node_Str"");
            style.setProperty(""String_Node_Str"",pad.toString());
          }
          style.setProperty(""String_Node_Str"",""String_Node_Str"");
          return new Insets(top,left,bottom,right);
        }
 else         if (type.equals(BEVEL_BORDER) || type.equals(ETCHED_BORDER)) {
          int beveltype=Utils.getAsInteger(tk.nextToken());
          if (tk.hasMoreTokens()) {
            Color highlightO=null;
            Color highlightI=null;
            Color shadowO=null;
            Color shadowI=null;
            if (type.equals(BEVEL_BORDER)) {
              highlightO=PersistHelper.createColor(tk.nextToken());
              highlightI=PersistHelper.createColor(tk.nextToken());
              shadowO=PersistHelper.createColor(tk.nextToken());
              shadowI=PersistHelper.createColor(tk.nextToken());
            }
 else {
              highlightO=PersistHelper.createColor(tk.nextToken());
              highlightI=highlightO;
              shadowO=PersistHelper.createColor(tk.nextToken());
              shadowI=shadowO;
            }
            if (beveltype == BevelBorder.LOWERED) {
              if (PersistHelper.createColorString(shadowO) != null) {
                StringBuffer pad=new StringBuffer();
                pad.append(PersistHelper.createColorString(shadowO));
                pad.append(' ');
                pad.append(PersistHelper.createColorString(highlightI));
                pad.append(' ');
                pad.append(PersistHelper.createColorString(highlightO));
                pad.append(' ');
                pad.append(PersistHelper.createColorString(shadowI));
                style.setProperty(""String_Node_Str"",pad.toString());
              }
              if (type.equals(BEVEL_BORDER)) {
                style.setProperty(""String_Node_Str"",""String_Node_Str"");
              }
 else {
                style.setProperty(""String_Node_Str"",""String_Node_Str"");
              }
            }
 else {
              if (PersistHelper.createColorString(shadowO) != null) {
                StringBuffer pad=new StringBuffer();
                pad.append(PersistHelper.createColorString(highlightO));
                pad.append(' ');
                pad.append(PersistHelper.createColorString(shadowI));
                pad.append(' ');
                pad.append(PersistHelper.createColorString(shadowO));
                pad.append(' ');
                pad.append(PersistHelper.createColorString(highlightI));
                style.setProperty(""String_Node_Str"",pad.toString());
              }
              if (type.equals(BEVEL_BORDER)) {
                style.setProperty(""String_Node_Str"",""String_Node_Str"");
              }
 else {
                style.setProperty(""String_Node_Str"",""String_Node_Str"");
              }
            }
            return null;
          }
 else {
            style.setProperty(""String_Node_Str"",(beveltype == BevelBorder.LOWERED ? ""String_Node_Str"" : ""String_Node_Str""));
            return null;
          }
        }
 else         if (type.equals(LINE_BORDER)) {
          int thick=Utils.getAsInteger(tk.nextToken());
          style.setProperty(""String_Node_Str"",""String_Node_Str"");
          style.setProperty(""String_Node_Str"",thick + ""String_Node_Str"");
          style.setProperty(""String_Node_Str"",tk.nextToken());
          return new Insets(thick,thick,thick,thick);
        }
 else         if (type.equals(TITLED_BORDER)) {
          style.setProperty(""String_Node_Str"",""String_Node_Str"");
          return null;
        }
 else         if (type.equals(MATTE_BORDER)) {
          int top=Utils.getAsInteger(tk.nextToken());
          int right=Utils.getAsInteger(tk.nextToken());
          int bottom=Utils.getAsInteger(tk.nextToken());
          int left=Utils.getAsInteger(tk.nextToken());
          Color c=Color.black;
          if (tk.hasMoreElements())           c=PersistHelper.createColor(tk.nextToken());
          style.setProperty(""String_Node_Str"",""String_Node_Str"");
          StringBuffer pad=new StringBuffer();
          pad.append(top);
          pad.append(""String_Node_Str"");
          pad.append(right);
          pad.append(""String_Node_Str"");
          pad.append(bottom);
          pad.append(""String_Node_Str"");
          pad.append(left);
          pad.append(""String_Node_Str"");
          style.setProperty(""String_Node_Str"",pad.toString());
          style.setProperty(""String_Node_Str"",PersistHelper.createColorString(c));
          return new Insets(top,left,bottom,right);
        }
 else         if (type.equals(SPECIAL_MATTE_BORDER)) {
          float top=Utils.getAsFloat(tk.nextToken());
          float right=Utils.getAsFloat(tk.nextToken());
          float bottom=Utils.getAsFloat(tk.nextToken());
          float left=Utils.getAsFloat(tk.nextToken());
          StringBuffer pad=new StringBuffer();
          pad.append(Math.round(top));
          pad.append(""String_Node_Str"");
          pad.append(Math.round(right));
          pad.append(""String_Node_Str"");
          pad.append(Math.round(bottom));
          pad.append(""String_Node_Str"");
          pad.append(Math.round(left));
          pad.append(""String_Node_Str"");
          style.setProperty(""String_Node_Str"",pad.toString());
          Color topColor=PersistHelper.createColor(tk.nextToken());
          Color rightColor=PersistHelper.createColor(tk.nextToken());
          Color bottomColor=PersistHelper.createColor(tk.nextToken());
          Color leftColor=PersistHelper.createColor(tk.nextToken());
          StringBuffer c=new StringBuffer();
          c.append(PersistHelper.createColorString(topColor));
          c.append(' ');
          c.append(PersistHelper.createColorString(rightColor));
          c.append(' ');
          c.append(PersistHelper.createColorString(bottomColor));
          c.append(' ');
          c.append(PersistHelper.createColorString(leftColor));
          style.setProperty(""String_Node_Str"",c.toString());
          style.setProperty(""String_Node_Str"",""String_Node_Str"");
          if (tk.hasMoreTokens()) {
            tk.nextToken();
          }
          if (tk.hasMoreTokens() && tk.nextToken().trim().length() != 0) {
            style.setProperty(""String_Node_Str"",""String_Node_Str"");
          }
          return new Insets(Math.round(top),Math.round(left),Math.round(bottom),Math.round(right));
        }
 else {
          return null;
        }
      }
 catch (      Exception ex) {
        Debug.error(ex);
        return null;
      }
    }
 else {
      return null;
    }
  }
}","public static Insets createBorderCSSProperties(String s,Properties style){
  if (s == null) {
    return null;
  }
 else {
    StringTokenizer tk=new StringTokenizer(s,""String_Node_Str"");
    if (tk.hasMoreTokens()) {
      try {
        String type=tk.nextToken();
        if (type.equals(COMPOUND_BORDER)) {
          StringTokenizer tk2=new StringTokenizer(s,""String_Node_Str"");
          tk2.nextToken();
          String s_oborder=tk2.nextToken();
          return createBorderCSSProperties(s_oborder,style);
        }
 else         if (type.equals(EMPTY_BORDER)) {
          int top=Utils.getAsInteger(tk.nextToken());
          int right=Utils.getAsInteger(tk.nextToken());
          int bottom=Utils.getAsInteger(tk.nextToken());
          int left=Utils.getAsInteger(tk.nextToken());
          if (top != 0 && right != 0 && bottom != 0 && left != 0) {
            StringBuffer pad=new StringBuffer();
            pad.append(top);
            pad.append(""String_Node_Str"");
            pad.append(right);
            pad.append(""String_Node_Str"");
            pad.append(bottom);
            pad.append(""String_Node_Str"");
            pad.append(left);
            pad.append(""String_Node_Str"");
            style.setProperty(""String_Node_Str"",pad.toString());
          }
          style.setProperty(""String_Node_Str"",""String_Node_Str"");
          return new Insets(top,left,bottom,right);
        }
 else         if (type.equals(BEVEL_BORDER) || type.equals(ETCHED_BORDER)) {
          int beveltype=Utils.getAsInteger(tk.nextToken());
          if (tk.hasMoreTokens()) {
            Color highlightO=null;
            Color highlightI=null;
            Color shadowO=null;
            Color shadowI=null;
            if (type.equals(BEVEL_BORDER)) {
              highlightO=PersistHelper.createColor(tk.nextToken());
              highlightI=PersistHelper.createColor(tk.nextToken());
              shadowO=PersistHelper.createColor(tk.nextToken());
              shadowI=PersistHelper.createColor(tk.nextToken());
            }
 else {
              highlightO=PersistHelper.createColor(tk.nextToken());
              highlightI=highlightO;
              shadowO=PersistHelper.createColor(tk.nextToken());
              shadowI=shadowO;
            }
            if (beveltype == BevelBorder.LOWERED) {
              if (PersistHelper.createColorString(shadowO) != null) {
                StringBuffer pad=new StringBuffer();
                pad.append(PersistHelper.createColorString(shadowO));
                pad.append(' ');
                pad.append(PersistHelper.createColorString(highlightI));
                pad.append(' ');
                pad.append(PersistHelper.createColorString(highlightO));
                pad.append(' ');
                pad.append(PersistHelper.createColorString(shadowI));
                style.setProperty(""String_Node_Str"",pad.toString());
              }
              if (type.equals(BEVEL_BORDER)) {
                style.setProperty(""String_Node_Str"",""String_Node_Str"");
              }
 else {
                style.setProperty(""String_Node_Str"",""String_Node_Str"");
              }
            }
 else {
              if (PersistHelper.createColorString(shadowO) != null) {
                StringBuffer pad=new StringBuffer();
                pad.append(PersistHelper.createColorString(highlightO));
                pad.append(' ');
                pad.append(PersistHelper.createColorString(shadowI));
                pad.append(' ');
                pad.append(PersistHelper.createColorString(shadowO));
                pad.append(' ');
                pad.append(PersistHelper.createColorString(highlightI));
                style.setProperty(""String_Node_Str"",pad.toString());
              }
              if (type.equals(BEVEL_BORDER)) {
                style.setProperty(""String_Node_Str"",""String_Node_Str"");
              }
 else {
                style.setProperty(""String_Node_Str"",""String_Node_Str"");
              }
            }
            return null;
          }
 else {
            style.setProperty(""String_Node_Str"",(beveltype == BevelBorder.LOWERED ? ""String_Node_Str"" : ""String_Node_Str""));
            return null;
          }
        }
 else         if (type.equals(LINE_BORDER)) {
          int thick=Utils.getAsInteger(tk.nextToken());
          style.setProperty(""String_Node_Str"",""String_Node_Str"");
          style.setProperty(""String_Node_Str"",thick + ""String_Node_Str"");
          style.setProperty(""String_Node_Str"",tk.nextToken());
          return new Insets(thick,thick,thick,thick);
        }
 else         if (type.equals(TITLED_BORDER)) {
          style.setProperty(""String_Node_Str"",""String_Node_Str"");
          return null;
        }
 else         if (type.equals(MATTE_BORDER)) {
          int top=Utils.getAsInteger(tk.nextToken());
          int right=Utils.getAsInteger(tk.nextToken());
          int bottom=Utils.getAsInteger(tk.nextToken());
          int left=Utils.getAsInteger(tk.nextToken());
          Color c=Color.black;
          if (tk.hasMoreElements())           c=PersistHelper.createColor(tk.nextToken());
          style.setProperty(""String_Node_Str"",""String_Node_Str"");
          StringBuffer pad=new StringBuffer();
          pad.append(top);
          pad.append(""String_Node_Str"");
          pad.append(right);
          pad.append(""String_Node_Str"");
          pad.append(bottom);
          pad.append(""String_Node_Str"");
          pad.append(left);
          pad.append(""String_Node_Str"");
          style.setProperty(""String_Node_Str"",pad.toString());
          style.setProperty(""String_Node_Str"",PersistHelper.createColorString(c));
          return new Insets(top,left,bottom,right);
        }
 else         if (type.equals(SPECIAL_MATTE_BORDER)) {
          float top=Utils.getAsFloat(tk.nextToken());
          float right=Utils.getAsFloat(tk.nextToken());
          float bottom=Utils.getAsFloat(tk.nextToken());
          float left=Utils.getAsFloat(tk.nextToken());
          StringBuffer pad=new StringBuffer();
          pad.append(Math.round(top));
          pad.append(""String_Node_Str"");
          pad.append(Math.round(right));
          pad.append(""String_Node_Str"");
          pad.append(Math.round(bottom));
          pad.append(""String_Node_Str"");
          pad.append(Math.round(left));
          pad.append(""String_Node_Str"");
          style.setProperty(""String_Node_Str"",pad.toString());
          Color topColor=PersistHelper.createColor(tk.nextToken());
          Color rightColor=PersistHelper.createColor(tk.nextToken());
          Color bottomColor=PersistHelper.createColor(tk.nextToken());
          Color leftColor=PersistHelper.createColor(tk.nextToken());
          StringBuffer c=new StringBuffer();
          c.append(PersistHelper.createColorString(topColor));
          c.append(' ');
          c.append(PersistHelper.createColorString(rightColor));
          c.append(' ');
          c.append(PersistHelper.createColorString(bottomColor));
          c.append(' ');
          c.append(PersistHelper.createColorString(leftColor));
          style.setProperty(""String_Node_Str"",c.toString());
          style.setProperty(""String_Node_Str"",""String_Node_Str"");
          if (tk.hasMoreTokens()) {
            tk.nextToken();
          }
          if (tk.hasMoreTokens()) {
            String dashPattern=tk.nextToken().trim();
            if (dashPattern.length() > 0) {
              style.setProperty(""String_Node_Str"",dashPattern.equals(""String_Node_Str"") ? ""String_Node_Str"" : ""String_Node_Str"");
            }
          }
          return new Insets(Math.round(top),Math.round(left),Math.round(bottom),Math.round(right));
        }
 else {
          return null;
        }
      }
 catch (      Exception ex) {
        Debug.error(ex);
        return null;
      }
    }
 else {
      return null;
    }
  }
}",0.9891729130629764
143727,"public Border getBorder(AttributeSet a){
  Border b=null;
  Object borderStyle=null;
  Object borderColor=null;
  float top=getLength(null);
  float right=getLength(null);
  float bottom=getLength(null);
  float left=getLength(null);
  Object unexpandedBorder=a.getAttribute(CSS.Attribute.BORDER);
  if (unexpandedBorder != null) {
    StringTokenizer st=new StringTokenizer(unexpandedBorder.toString());
    while (st.hasMoreTokens()) {
      String tok=st.nextToken();
      if (tok.matches(""String_Node_Str"")) {
        top=right=bottom=left=getLength(tok);
      }
 else       if (Arrays.asList(BORDER_STYLES).contains(tok)) {
        borderStyle=tok;
      }
 else       if (tok.equals(BORDER_COLOR_TRANSPARENT)) {
        borderColor=BORDER_COLOR_TRANSPARENT;
      }
 else {
        Color c=PersistHelper.createColor(tok);
        if (c != null)         borderColor=tok;
      }
    }
  }
  if (a.isDefined(CSS.Attribute.BORDER_STYLE))   borderStyle=a.getAttribute(CSS.Attribute.BORDER_STYLE);
  if (a.isDefined(CSS.Attribute.BORDER_COLOR))   borderColor=a.getAttribute(CSS.Attribute.BORDER_COLOR);
  if (a.isDefined(CSS.Attribute.BORDER_TOP_WIDTH))   top=getLength(a.getAttribute(CSS.Attribute.BORDER_TOP_WIDTH));
  if (a.isDefined(CSS.Attribute.BORDER_RIGHT_WIDTH))   right=getLength(a.getAttribute(CSS.Attribute.BORDER_RIGHT_WIDTH));
  if (a.isDefined(CSS.Attribute.BORDER_BOTTOM_WIDTH))   bottom=getLength(a.getAttribute(CSS.Attribute.BORDER_BOTTOM_WIDTH));
  if (a.isDefined(CSS.Attribute.BORDER_LEFT_WIDTH))   left=getLength(a.getAttribute(CSS.Attribute.BORDER_LEFT_WIDTH));
  if (borderStyle != null) {
    Color[] colors=getBorderColor(borderColor);
    String bstyle=borderStyle.toString();
    if (bstyle.equals(BORDER_STYLE_INSET) || bstyle.equals(BORDER_STYLE_OUTSET)) {
      int style=BevelBorder.LOWERED;
      if (bstyle.equals(BORDER_STYLE_OUTSET))       style=BevelBorder.RAISED;
      if (colors != null && colors.length > 0) {
        if (colors.length == 1) {
          b=BorderFactory.createBevelBorder(style,colors[0].brighter().brighter(),colors[0].darker().darker());
        }
        if (colors.length == 2) {
          b=BorderFactory.createBevelBorder(style,colors[0],colors[1]);
        }
 else         if (colors.length > 3) {
          b=BorderFactory.createBevelBorder(style,colors[0],colors[1],colors[2],colors[3]);
        }
      }
 else {
        b=BorderFactory.createBevelBorder(style);
      }
    }
 else     if (bstyle.equals(BORDER_STYLE_NONE)) {
      b=BorderFactory.createEmptyBorder();
    }
 else     if (bstyle.equals(BORDER_STYLE_GROOVE)) {
      b=BorderFactory.createEtchedBorder();
    }
 else     if (bstyle.equals(BORDER_STYLE_SOLID) || bstyle.equals(BORDER_STYLE_DOTTED) || bstyle.equals(BORDER_STYLE_DASHED)) {
      colors=expandColors(colors);
      if (bstyle.equals(BORDER_STYLE_SOLID)) {
        if (borderColor != null && BORDER_COLOR_TRANSPARENT.equals(borderColor.toString())) {
          top=makeSizeSave(top);
          right=makeSizeSave(right);
          bottom=makeSizeSave(bottom);
          left=makeSizeSave(left);
          b=BorderFactory.createEmptyBorder((int)top,(int)left,(int)bottom,(int)right);
        }
 else         if (colors != null) {
          if (top == -1f && right == -1f && bottom == -1f && left == -1f) {
            b=BorderFactory.createLineBorder(colors[0]);
          }
 else           if (top == 0f && right == 0f && bottom == 0f && left == 0f) {
            b=BorderFactory.createEmptyBorder();
          }
 else {
            top=makeSizeSave(top);
            right=makeSizeSave(right);
            bottom=makeSizeSave(bottom);
            left=makeSizeSave(left);
            b=new SpecialMatteBorder(top,left,bottom,right,colors[0],colors[3],colors[2],colors[1]);
          }
        }
      }
 else       if (bstyle.equals(BORDER_STYLE_DASHED)) {
        if (top <= 0 && left <= 0 && bottom <= 0 && right <= 0) {
          top=left=bottom=right=1;
        }
        b=new SpecialMatteBorder(top,left,bottom,right,colors[0],colors[3],colors[2],colors[1]);
        ((SpecialMatteBorder)b).setDashPattern(new float[]{3,3});
      }
 else       if (bstyle.equals(BORDER_STYLE_DOTTED)) {
        if (top <= 0 && left <= 0 && bottom <= 0 && right <= 0) {
          top=left=bottom=right=1;
        }
        b=new SpecialMatteBorder(top,left,bottom,right,colors[0],colors[3],colors[2],colors[1]);
        ((SpecialMatteBorder)b).setDashPattern(new float[]{1,1});
      }
    }
  }
  return b;
}","public Border getBorder(AttributeSet a){
  Border b=null;
  Object borderStyle=null;
  Object borderColor=null;
  float top=getLength(null);
  float right=getLength(null);
  float bottom=getLength(null);
  float left=getLength(null);
  Object unexpandedBorder=a.getAttribute(CSS.Attribute.BORDER);
  if (unexpandedBorder != null) {
    StringTokenizer st=new StringTokenizer(unexpandedBorder.toString());
    while (st.hasMoreTokens()) {
      String tok=st.nextToken();
      if (tok.matches(""String_Node_Str"")) {
        top=right=bottom=left=getLength(tok);
      }
 else       if (Arrays.asList(BORDER_STYLES).contains(tok)) {
        borderStyle=tok;
      }
 else       if (tok.equals(BORDER_COLOR_TRANSPARENT)) {
        borderColor=BORDER_COLOR_TRANSPARENT;
      }
 else {
        Color c=PersistHelper.createColor(tok);
        if (c != null)         borderColor=tok;
      }
    }
  }
  if (a.isDefined(CSS.Attribute.BORDER_STYLE))   borderStyle=a.getAttribute(CSS.Attribute.BORDER_STYLE);
  if (a.isDefined(CSS.Attribute.BORDER_COLOR))   borderColor=a.getAttribute(CSS.Attribute.BORDER_COLOR);
  if (a.isDefined(CSS.Attribute.BORDER_TOP_WIDTH))   top=getLength(a.getAttribute(CSS.Attribute.BORDER_TOP_WIDTH));
  if (a.isDefined(CSS.Attribute.BORDER_RIGHT_WIDTH))   right=getLength(a.getAttribute(CSS.Attribute.BORDER_RIGHT_WIDTH));
  if (a.isDefined(CSS.Attribute.BORDER_BOTTOM_WIDTH))   bottom=getLength(a.getAttribute(CSS.Attribute.BORDER_BOTTOM_WIDTH));
  if (a.isDefined(CSS.Attribute.BORDER_LEFT_WIDTH))   left=getLength(a.getAttribute(CSS.Attribute.BORDER_LEFT_WIDTH));
  if (borderStyle != null) {
    Color[] colors=getBorderColor(borderColor);
    String bstyle=borderStyle.toString();
    if (bstyle.equals(BORDER_STYLE_INSET) || bstyle.equals(BORDER_STYLE_OUTSET)) {
      int style=BevelBorder.LOWERED;
      if (bstyle.equals(BORDER_STYLE_OUTSET))       style=BevelBorder.RAISED;
      top=makeSizeSave(top);
      right=makeSizeSave(right);
      bottom=makeSizeSave(bottom);
      left=makeSizeSave(left);
      Insets customBorderInsets=new Insets((int)top,(int)left,(int)bottom,(int)right);
      if (colors != null && colors.length > 0) {
        if (colors.length == 1) {
          b=new CustomBevelBorder(style,colors[0].brighter().brighter(),colors[0].darker().darker(),customBorderInsets);
        }
        if (colors.length == 2) {
          b=new CustomBevelBorder(style,colors[0],colors[1],customBorderInsets);
        }
 else         if (colors.length > 3) {
          b=new CustomBevelBorder(style,colors[0],colors[1],colors[2],colors[3],customBorderInsets);
        }
      }
 else {
        b=new CustomBevelBorder(style,customBorderInsets);
      }
    }
 else     if (bstyle.equals(BORDER_STYLE_NONE)) {
      b=BorderFactory.createEmptyBorder();
    }
 else     if (bstyle.equals(BORDER_STYLE_DOUBLE)) {
      top=makeSizeSave(top);
      right=makeSizeSave(right);
      bottom=makeSizeSave(bottom);
      left=makeSizeSave(left);
      b=BorderFactory.createEmptyBorder((int)top,(int)left,(int)bottom,(int)right);
    }
 else     if (bstyle.equals(BORDER_STYLE_GROOVE) || bstyle.equals(BORDER_STYLE_RIDGE)) {
      int style=EtchedBorder.LOWERED;
      if (bstyle.equals(BORDER_STYLE_RIDGE))       style=EtchedBorder.RAISED;
      top=makeSizeSave(top);
      right=makeSizeSave(right);
      bottom=makeSizeSave(bottom);
      left=makeSizeSave(left);
      Insets customBorderInsets=new Insets((int)top,(int)left,(int)bottom,(int)right);
      if (colors != null && colors.length > 0) {
        if (colors.length == 1) {
          b=new CustomEtchedBorder(style,colors[0].brighter().brighter(),colors[0].darker().darker(),customBorderInsets);
        }
        if (colors.length == 2) {
          b=new CustomEtchedBorder(style,colors[0],colors[1],customBorderInsets);
        }
      }
 else {
        b=new CustomEtchedBorder(style,customBorderInsets);
      }
    }
 else     if (bstyle.equals(BORDER_STYLE_SOLID) || bstyle.equals(BORDER_STYLE_DOTTED) || bstyle.equals(BORDER_STYLE_DASHED)) {
      colors=expandColors(colors);
      if (bstyle.equals(BORDER_STYLE_SOLID)) {
        if (borderColor != null && BORDER_COLOR_TRANSPARENT.equals(borderColor.toString())) {
          top=makeSizeSave(top);
          right=makeSizeSave(right);
          bottom=makeSizeSave(bottom);
          left=makeSizeSave(left);
          b=BorderFactory.createEmptyBorder((int)top,(int)left,(int)bottom,(int)right);
        }
 else         if (colors != null) {
          if (top == -1f && right == -1f && bottom == -1f && left == -1f) {
            b=BorderFactory.createLineBorder(colors[0]);
          }
 else           if (top == 0f && right == 0f && bottom == 0f && left == 0f) {
            b=BorderFactory.createEmptyBorder();
          }
 else {
            top=makeSizeSave(top);
            right=makeSizeSave(right);
            bottom=makeSizeSave(bottom);
            left=makeSizeSave(left);
            b=new SpecialMatteBorder(top,left,bottom,right,colors[0],colors[3],colors[2],colors[1]);
          }
        }
      }
 else       if (bstyle.equals(BORDER_STYLE_DASHED)) {
        if (top <= 0 && left <= 0 && bottom <= 0 && right <= 0) {
          top=left=bottom=right=1;
        }
        b=new SpecialMatteBorder(top,left,bottom,right,colors[0],colors[3],colors[2],colors[1]);
        ((SpecialMatteBorder)b).setDashPattern(new float[]{3,3});
      }
 else       if (bstyle.equals(BORDER_STYLE_DOTTED)) {
        if (top <= 0 && left <= 0 && bottom <= 0 && right <= 0) {
          top=left=bottom=right=1;
        }
        b=new SpecialMatteBorder(top,left,bottom,right,colors[0],colors[3],colors[2],colors[1]);
        ((SpecialMatteBorder)b).setDashPattern(new float[]{1,1});
      }
    }
  }
  return b;
}",0.8529411764705882
143728,"public String getDataProviderID(){
  if (dataprovider_id == null) {
    dataprovider_id=Utils.generateNormalizedName(plainSQLName);
    if (Ident.checkIfKeyword(dataprovider_id)) {
      dataprovider_id=RESERVED_NAME_PREFIX + dataprovider_id;
    }
  }
  return dataprovider_id;
}","public String getDataProviderID(){
  if (dataprovider_id == null) {
    dataprovider_id=Utils.generateNormalizedNonReservedName(plainSQLName);
  }
  return dataprovider_id;
}",0.7180616740088106
143729,"private static void createFieldHTML(Field field,Form form,StringBuffer html,TextualCSS css,int startY,int endY,boolean enableAnchoring,IServiceProvider sp){
  boolean addWrapperDiv=enableAnchoring && needsWrapperDivForAnchoring(field);
  if (addWrapperDiv) {
    String wrapperId=ComponentFactory.getWebID(form,field) + WRAPPER_SUFFIX;
    TextualStyle wrapperStyle=css.addStyle('#' + wrapperId);
    wrapperStyle.setProperty(""String_Node_Str"",""String_Node_Str"");
    html.append(""String_Node_Str"");
    html.append(getWicketIDParameter(form,field,""String_Node_Str"",WRAPPER_SUFFIX));
    html.append(getJavaScriptIDParameter(form,field,""String_Node_Str"",WRAPPER_SUFFIX));
    html.append(""String_Node_Str"");
  }
  TextualStyle styleObj=css.addStyle('#' + ComponentFactory.getWebID(form,field));
  Insets padding=(Insets)DEFAULT_FIELD_PADDING.clone();
  Insets border=(Insets)DEFAULT_FIELD_BORDER_SIZE.clone();
  if (field.getDisplayType() == Field.COMBOBOX) {
    padding=DEFAULT_LABEL_PADDING;
  }
  BorderAndPadding ins=applyBaseComponentProperties(field,form,styleObj,padding,border,sp);
  FixedStyleSheet ss=ComponentFactory.getCSSStyleForForm(sp,form);
  String cssClass=""String_Node_Str"";
switch (field.getDisplayType()) {
case Field.PASSWORD:
{
      if (ins == null) {
        ins=new BorderAndPadding(DEFAULT_FIELD_BORDER_SIZE,DEFAULT_FIELD_PADDING);
      }
      html.append(""String_Node_Str"");
      html.append(getWicketIDParameter(form,field));
      html.append(getDataProviderIDParameter(field));
      html.append(getCSSClassParameter(""String_Node_Str""));
      html.append(""String_Node_Str"");
      if (field.getSelectOnEnter()) {
        html.append(""String_Node_Str"");
      }
      html.append(""String_Node_Str"");
    }
  break;
case Field.RTF_AREA:
{
  applyScrolling(styleObj,field);
  html.append(""String_Node_Str"");
  html.append(getWicketIDParameter(form,field));
  html.append(getCSSClassParameter(""String_Node_Str""));
  html.append(""String_Node_Str"");
}
break;
case Field.HTML_AREA:
if (!field.getEditable()) {
applyScrolling(styleObj,field);
html.append(""String_Node_Str"");
html.append(getWicketIDParameter(form,field));
html.append(getCSSClassParameter(""String_Node_Str""));
html.append(""String_Node_Str"");
break;
}
case Field.TEXT_AREA:
{
if (ins == null) {
ins=new BorderAndPadding(DEFAULT_FIELD_BORDER_SIZE,DEFAULT_FIELD_PADDING);
}
applyScrolling(styleObj,field);
html.append(""String_Node_Str"");
html.append(getWicketIDParameter(form,field));
html.append(getDataProviderIDParameter(field));
html.append(getCSSClassParameter(""String_Node_Str""));
html.append(""String_Node_Str"");
}
break;
case Field.CHECKS:
case Field.RADIOS:
boolean isRadio=(field.getDisplayType() == Field.RADIOS);
String selector=(isRadio ? ""String_Node_Str"" : ""String_Node_Str"");
IValueList val=null;
ValueList valuelist=null;
if (field.getValuelistID() > 0 && sp != null) {
Pair<String,Integer> fieldFormat=ComponentFactory.getFieldFormat(field,sp.getFlattenedSolution().getDataproviderLookup(sp.getFoundSetManager(),form),sp);
valuelist=sp.getFlattenedSolution().getValueList(field.getValuelistID());
if (valuelist != null) val=ComponentFactory.getRealValueList(sp,valuelist,true,fieldFormat.getRight(),fieldFormat.getLeft(),field.getDataProviderID());
}
boolean addSingle=ComponentFactory.isSingleValue(valuelist,val);
if (field.getValuelistID() > 0 && !addSingle && !isRadio) cssClass=""String_Node_Str"";
if (ss != null) {
cssClass=""String_Node_Str"";
String lookUpValue=selector;
javax.swing.text.Style s=ss.getRule(lookUpValue);
if (s.getAttributeCount() == 0) {
if ((field.getStyleClass() != null) && (field.getStyleClass().trim().length() > 0)) {
lookUpValue+='.' + field.getStyleClass().trim();
s=ss.getRule(lookUpValue);
if (s.getAttributeCount() > 0) cssClass=selector;
}
}
 else {
cssClass=selector;
}
}
if ((field.getValuelistID() > 0 || isRadio) && !addSingle) {
applyScrolling(styleObj,field);
html.append(""String_Node_Str"");
html.append(getWicketIDParameter(form,field));
html.append(getDataProviderIDParameter(field));
html.append(getCSSClassParameter(cssClass));
html.append(""String_Node_Str"");
}
 else {
html.append(""String_Node_Str"");
html.append(getCSSClassParameter(cssClass));
html.append(getWicketIDParameter(form,field));
html.append(""String_Node_Str"");
html.append(""String_Node_Str"");
html.append(""String_Node_Str"" + (isRadio ? ""String_Node_Str"" : ""String_Node_Str"") + ""String_Node_Str"");
html.append(getWicketIDParameter(form,field,""String_Node_Str"",""String_Node_Str""));
html.append(getDataProviderIDParameter(field));
if (isRadio) {
html.append(""String_Node_Str"");
}
 else {
html.append(""String_Node_Str"");
}
html.append(""String_Node_Str"");
html.append(""String_Node_Str"");
html.append(ComponentFactory.getWebID(form,field));
html.append(""String_Node_Str"" + (isRadio ? ""String_Node_Str"" : ""String_Node_Str"") + ""String_Node_Str"");
html.append(""String_Node_Str"");
html.append(getWicketIDParameter(form,field,""String_Node_Str"",""String_Node_Str""));
html.append(""String_Node_Str"");
html.append(""String_Node_Str"");
html.append(""String_Node_Str"");
}
break;
case Field.COMBOBOX:
{
ins=null;
html.append(""String_Node_Str"");
html.append(getWicketIDParameter(form,field));
html.append(getDataProviderIDParameter(field));
html.append(getCSSClassParameter(""String_Node_Str""));
html.append(""String_Node_Str"");
}
break;
case Field.CALENDAR:
{
html.append(""String_Node_Str"");
html.append(getWicketIDParameter(form,field));
html.append(getDataProviderIDParameter(field));
html.append(getCSSClassParameter(""String_Node_Str""));
html.append(""String_Node_Str"");
html.append(""String_Node_Str"");
TextualStyle inline=new TextualStyle();
inline.setProperty(""String_Node_Str"",""String_Node_Str"");
inline.setProperty(""String_Node_Str"",""String_Node_Str"");
inline.setProperty(""String_Node_Str"",""String_Node_Str"");
inline.setProperty(""String_Node_Str"",""String_Node_Str"");
inline.setProperty(""String_Node_Str"",""String_Node_Str"");
inline.setProperty(""String_Node_Str"",""String_Node_Str"");
html.append(inline.toString());
html.append(""String_Node_Str"");
inline.remove(""String_Node_Str"");
inline.remove(""String_Node_Str"");
html.append(inline.toString());
html.append(""String_Node_Str"");
html.append(inline.toString());
html.append(""String_Node_Str"");
inline=new TextualStyle();
inline.setProperty(""String_Node_Str"",""String_Node_Str"");
inline.setProperty(""String_Node_Str"",""String_Node_Str"");
inline.setProperty(""String_Node_Str"",""String_Node_Str"");
inline.setProperty(""String_Node_Str"",""String_Node_Str"");
inline.setProperty(""String_Node_Str"",""String_Node_Str"");
inline.setProperty(""String_Node_Str"",""String_Node_Str"");
inline.copy(""String_Node_Str"",styleObj);
inline.copy(""String_Node_Str"",styleObj);
inline.copy(""String_Node_Str"",styleObj);
html.append(inline.toString());
html.append(""String_Node_Str"");
}
break;
case Field.IMAGE_MEDIA:
{
applyScrolling(styleObj,field);
html.append(""String_Node_Str"");
html.append(getWicketIDParameter(form,field));
html.append(getCSSClassParameter(""String_Node_Str""));
html.append('>');
TextualStyle inline2=new TextualStyle();
inline2.setProperty(""String_Node_Str"",""String_Node_Str"");
inline2.setProperty(""String_Node_Str"",""String_Node_Str"");
inline2.setProperty(""String_Node_Str"",""String_Node_Str"");
inline2.setProperty(""String_Node_Str"",""String_Node_Str"");
inline2.setProperty(""String_Node_Str"",""String_Node_Str"");
inline2.setProperty(""String_Node_Str"",""String_Node_Str"");
html.append(""String_Node_Str"");
html.append(inline2.toString());
html.append(""String_Node_Str"");
html.append(""String_Node_Str"");
inline2.setProperty(""String_Node_Str"",""String_Node_Str"");
html.append(inline2.toString());
html.append(""String_Node_Str"");
html.append(""String_Node_Str"");
inline2.setProperty(""String_Node_Str"",""String_Node_Str"");
html.append(inline2.toString());
html.append(""String_Node_Str"");
TextualStyle inline=new TextualStyle();
inline.setProperty(""String_Node_Str"",""String_Node_Str"");
inline.setProperty(""String_Node_Str"",""String_Node_Str"");
inline.setProperty(""String_Node_Str"",""String_Node_Str"");
if (field.getOnActionMethodID() < 1) {
inline.setProperty(""String_Node_Str"",""String_Node_Str"");
}
html.append(""String_Node_Str"");
html.append(inline.toString());
html.append(getWicketIDParameter(form,field));
html.append(getJavaScriptIDParameter(form,field));
html.append(""String_Node_Str"");
if (field.getName() != null) html.append(field.getName());
html.append(""String_Node_Str"");
html.append(""String_Node_Str"");
html.append(""String_Node_Str"");
html.append(""String_Node_Str"");
html.append(""String_Node_Str"");
html.append(""String_Node_Str"");
}
break;
case Field.TYPE_AHEAD:
default :
case Field.TEXT_FIELD:
{
if (ins == null) {
ins=new BorderAndPadding(DEFAULT_FIELD_BORDER_SIZE,DEFAULT_FIELD_PADDING);
}
html.append(""String_Node_Str"");
html.append(getWicketIDParameter(form,field));
html.append(getDataProviderIDParameter(field));
html.append(getCSSClassParameter(""String_Node_Str""));
html.append(""String_Node_Str"");
if (field.getSelectOnEnter()) {
html.append(""String_Node_Str"");
}
html.append(""String_Node_Str"");
}
break;
}
applyTextProperties(field,styleObj);
if (addWrapperDiv) {
html.append(""String_Node_Str"");
styleObj.setProperty(""String_Node_Str"",""String_Node_Str"");
styleObj.setProperty(""String_Node_Str"",""String_Node_Str"");
styleObj.setProperty(""String_Node_Str"",""String_Node_Str"");
}
 else {
applyLocationAndSize(field,styleObj,ins,startY,endY,form.getSize().width,enableAnchoring);
}
}","private static void createFieldHTML(Field field,Form form,StringBuffer html,TextualCSS css,int startY,int endY,boolean enableAnchoring,IServiceProvider sp){
  boolean addWrapperDiv=enableAnchoring && needsWrapperDivForAnchoring(field);
  if (addWrapperDiv) {
    String wrapperId=ComponentFactory.getWebID(form,field) + WRAPPER_SUFFIX;
    TextualStyle wrapperStyle=css.addStyle('#' + wrapperId);
    wrapperStyle.setProperty(""String_Node_Str"",""String_Node_Str"");
    html.append(""String_Node_Str"");
    html.append(getWicketIDParameter(form,field,""String_Node_Str"",WRAPPER_SUFFIX));
    html.append(getJavaScriptIDParameter(form,field,""String_Node_Str"",WRAPPER_SUFFIX));
    html.append(""String_Node_Str"");
  }
  TextualStyle styleObj=css.addStyle('#' + ComponentFactory.getWebID(form,field));
  Insets padding=(Insets)DEFAULT_FIELD_PADDING.clone();
  Insets border=(Insets)DEFAULT_FIELD_BORDER_SIZE.clone();
  if (field.getDisplayType() == Field.COMBOBOX) {
    padding=DEFAULT_LABEL_PADDING;
  }
  BorderAndPadding ins=applyBaseComponentProperties(field,form,styleObj,padding,border,sp);
  FixedStyleSheet ss=ComponentFactory.getCSSStyleForForm(sp,form);
  String cssClass=""String_Node_Str"";
switch (field.getDisplayType()) {
case Field.PASSWORD:
{
      if (ins == null) {
        ins=new BorderAndPadding(DEFAULT_FIELD_BORDER_SIZE,DEFAULT_FIELD_PADDING);
      }
      html.append(""String_Node_Str"");
      html.append(getWicketIDParameter(form,field));
      html.append(getDataProviderIDParameter(field));
      html.append(getCSSClassParameter(""String_Node_Str""));
      html.append(""String_Node_Str"");
      if (field.getSelectOnEnter()) {
        html.append(""String_Node_Str"");
      }
      html.append(""String_Node_Str"");
    }
  break;
case Field.RTF_AREA:
{
  applyScrolling(styleObj,field);
  html.append(""String_Node_Str"");
  html.append(getWicketIDParameter(form,field));
  html.append(getCSSClassParameter(""String_Node_Str""));
  html.append(""String_Node_Str"");
}
break;
case Field.HTML_AREA:
if (!field.getEditable()) {
applyScrolling(styleObj,field);
html.append(""String_Node_Str"");
html.append(getWicketIDParameter(form,field));
html.append(getCSSClassParameter(""String_Node_Str""));
html.append(""String_Node_Str"");
break;
}
case Field.TEXT_AREA:
{
if (ins == null) {
ins=new BorderAndPadding(DEFAULT_FIELD_BORDER_SIZE,DEFAULT_FIELD_PADDING);
}
applyScrolling(styleObj,field);
html.append(""String_Node_Str"");
html.append(getWicketIDParameter(form,field));
html.append(getDataProviderIDParameter(field));
html.append(getCSSClassParameter(""String_Node_Str""));
html.append(""String_Node_Str"");
}
break;
case Field.CHECKS:
case Field.RADIOS:
boolean isRadio=(field.getDisplayType() == Field.RADIOS);
String selector=(isRadio ? ""String_Node_Str"" : ""String_Node_Str"");
IValueList val=null;
ValueList valuelist=null;
if (field.getValuelistID() > 0 && sp != null) {
Pair<String,Integer> fieldFormat=ComponentFactory.getFieldFormat(field,sp.getFlattenedSolution().getDataproviderLookup(sp.getFoundSetManager(),form),sp);
valuelist=sp.getFlattenedSolution().getValueList(field.getValuelistID());
if (valuelist != null) val=ComponentFactory.getRealValueList(sp,valuelist,true,fieldFormat.getRight(),fieldFormat.getLeft(),field.getDataProviderID());
}
boolean addSingle=ComponentFactory.isSingleValue(valuelist,val);
if (ss != null) {
cssClass=""String_Node_Str"";
String lookUpValue=selector;
javax.swing.text.Style s=ss.getRule(lookUpValue);
if (s.getAttributeCount() == 0) {
if ((field.getStyleClass() != null) && (field.getStyleClass().trim().length() > 0)) {
lookUpValue+='.' + field.getStyleClass().trim();
s=ss.getRule(lookUpValue);
if (s.getAttributeCount() > 0) cssClass=selector;
}
}
 else {
cssClass=selector;
}
}
if ((field.getValuelistID() > 0 || isRadio) && !addSingle) {
applyScrolling(styleObj,field);
html.append(""String_Node_Str"");
html.append(getWicketIDParameter(form,field));
html.append(getDataProviderIDParameter(field));
html.append(getCSSClassParameter(cssClass));
html.append(""String_Node_Str"");
}
 else {
html.append(""String_Node_Str"");
html.append(getCSSClassParameter(cssClass));
html.append(getWicketIDParameter(form,field));
html.append(""String_Node_Str"");
html.append(""String_Node_Str"");
html.append(""String_Node_Str"" + (isRadio ? ""String_Node_Str"" : ""String_Node_Str"") + ""String_Node_Str"");
html.append(getWicketIDParameter(form,field,""String_Node_Str"",""String_Node_Str""));
html.append(getDataProviderIDParameter(field));
if (isRadio) {
html.append(""String_Node_Str"");
}
 else {
html.append(""String_Node_Str"");
}
html.append(""String_Node_Str"");
html.append(""String_Node_Str"");
html.append(ComponentFactory.getWebID(form,field));
html.append(""String_Node_Str"" + (isRadio ? ""String_Node_Str"" : ""String_Node_Str"") + ""String_Node_Str"");
html.append(""String_Node_Str"");
html.append(getWicketIDParameter(form,field,""String_Node_Str"",""String_Node_Str""));
html.append(""String_Node_Str"");
html.append(""String_Node_Str"");
html.append(""String_Node_Str"");
}
break;
case Field.COMBOBOX:
{
ins=null;
html.append(""String_Node_Str"");
html.append(getWicketIDParameter(form,field));
html.append(getDataProviderIDParameter(field));
html.append(getCSSClassParameter(""String_Node_Str""));
html.append(""String_Node_Str"");
}
break;
case Field.CALENDAR:
{
html.append(""String_Node_Str"");
html.append(getWicketIDParameter(form,field));
html.append(getDataProviderIDParameter(field));
html.append(getCSSClassParameter(""String_Node_Str""));
html.append(""String_Node_Str"");
html.append(""String_Node_Str"");
TextualStyle inline=new TextualStyle();
inline.setProperty(""String_Node_Str"",""String_Node_Str"");
inline.setProperty(""String_Node_Str"",""String_Node_Str"");
inline.setProperty(""String_Node_Str"",""String_Node_Str"");
inline.setProperty(""String_Node_Str"",""String_Node_Str"");
inline.setProperty(""String_Node_Str"",""String_Node_Str"");
inline.setProperty(""String_Node_Str"",""String_Node_Str"");
html.append(inline.toString());
html.append(""String_Node_Str"");
inline.remove(""String_Node_Str"");
inline.remove(""String_Node_Str"");
html.append(inline.toString());
html.append(""String_Node_Str"");
html.append(inline.toString());
html.append(""String_Node_Str"");
inline=new TextualStyle();
inline.setProperty(""String_Node_Str"",""String_Node_Str"");
inline.setProperty(""String_Node_Str"",""String_Node_Str"");
inline.setProperty(""String_Node_Str"",""String_Node_Str"");
inline.setProperty(""String_Node_Str"",""String_Node_Str"");
inline.setProperty(""String_Node_Str"",""String_Node_Str"");
inline.setProperty(""String_Node_Str"",""String_Node_Str"");
inline.copy(""String_Node_Str"",styleObj);
inline.copy(""String_Node_Str"",styleObj);
inline.copy(""String_Node_Str"",styleObj);
html.append(inline.toString());
html.append(""String_Node_Str"");
}
break;
case Field.IMAGE_MEDIA:
{
applyScrolling(styleObj,field);
html.append(""String_Node_Str"");
html.append(getWicketIDParameter(form,field));
html.append(getCSSClassParameter(""String_Node_Str""));
html.append('>');
TextualStyle inline2=new TextualStyle();
inline2.setProperty(""String_Node_Str"",""String_Node_Str"");
inline2.setProperty(""String_Node_Str"",""String_Node_Str"");
inline2.setProperty(""String_Node_Str"",""String_Node_Str"");
inline2.setProperty(""String_Node_Str"",""String_Node_Str"");
inline2.setProperty(""String_Node_Str"",""String_Node_Str"");
inline2.setProperty(""String_Node_Str"",""String_Node_Str"");
html.append(""String_Node_Str"");
html.append(inline2.toString());
html.append(""String_Node_Str"");
html.append(""String_Node_Str"");
inline2.setProperty(""String_Node_Str"",""String_Node_Str"");
html.append(inline2.toString());
html.append(""String_Node_Str"");
html.append(""String_Node_Str"");
inline2.setProperty(""String_Node_Str"",""String_Node_Str"");
html.append(inline2.toString());
html.append(""String_Node_Str"");
TextualStyle inline=new TextualStyle();
inline.setProperty(""String_Node_Str"",""String_Node_Str"");
inline.setProperty(""String_Node_Str"",""String_Node_Str"");
inline.setProperty(""String_Node_Str"",""String_Node_Str"");
if (field.getOnActionMethodID() < 1) {
inline.setProperty(""String_Node_Str"",""String_Node_Str"");
}
html.append(""String_Node_Str"");
html.append(inline.toString());
html.append(getWicketIDParameter(form,field));
html.append(getJavaScriptIDParameter(form,field));
html.append(""String_Node_Str"");
if (field.getName() != null) html.append(field.getName());
html.append(""String_Node_Str"");
html.append(""String_Node_Str"");
html.append(""String_Node_Str"");
html.append(""String_Node_Str"");
html.append(""String_Node_Str"");
html.append(""String_Node_Str"");
}
break;
case Field.TYPE_AHEAD:
default :
case Field.TEXT_FIELD:
{
if (ins == null) {
ins=new BorderAndPadding(DEFAULT_FIELD_BORDER_SIZE,DEFAULT_FIELD_PADDING);
}
html.append(""String_Node_Str"");
html.append(getWicketIDParameter(form,field));
html.append(getDataProviderIDParameter(field));
html.append(getCSSClassParameter(""String_Node_Str""));
html.append(""String_Node_Str"");
if (field.getSelectOnEnter()) {
html.append(""String_Node_Str"");
}
html.append(""String_Node_Str"");
}
break;
}
applyTextProperties(field,styleObj);
if (addWrapperDiv) {
html.append(""String_Node_Str"");
styleObj.setProperty(""String_Node_Str"",""String_Node_Str"");
styleObj.setProperty(""String_Node_Str"",""String_Node_Str"");
styleObj.setProperty(""String_Node_Str"",""String_Node_Str"");
}
 else {
applyLocationAndSize(field,styleObj,ins,startY,endY,form.getSize().width,enableAnchoring);
}
}",0.99541528947649
143730,"public WebDataHtmlView(IApplication application,AbstractRuntimeTextEditor<IFieldComponent,JEditorPane> scriptable,String id){
  super(application,scriptable,id);
  setEscapeModelStrings(false);
}","public WebDataHtmlView(IApplication application,AbstractRuntimeTextEditor<IFieldComponent,JEditorPane> scriptable,String id){
  super(application,scriptable,id);
  setHorizontalAlignment(SwingConstants.LEFT);
  setEscapeModelStrings(false);
}",0.8924485125858124
143731,"public Insets getMargin(AttributeSet a){
  if (hasMargin(a)) {
    float top=getLength(a.getAttribute(CSS.Attribute.MARGIN_TOP));
    float bottom=getLength(a.getAttribute(CSS.Attribute.MARGIN_BOTTOM));
    float left=getLength(a.getAttribute(CSS.Attribute.MARGIN_LEFT));
    float right=getLength(a.getAttribute(CSS.Attribute.MARGIN_RIGHT));
    return new Insets((int)top,(int)left,(int)bottom,(int)right);
  }
  return null;
}","public Insets getMargin(AttributeSet a){
  if (hasMargin(a)) {
    float top=getLength(a.getAttribute(CSS.Attribute.MARGIN_TOP));
    float bottom=getLength(a.getAttribute(CSS.Attribute.MARGIN_BOTTOM));
    float left=getLength(a.getAttribute(CSS.Attribute.MARGIN_LEFT));
    float right=getLength(a.getAttribute(CSS.Attribute.MARGIN_RIGHT));
    return new Insets(top < 0 ? 0 : (int)top,left < 0 ? 0 : (int)left,bottom < 0 ? 0 : (int)bottom,right < 0 ? 0 : (int)right);
  }
  return null;
}",0.932608695652174
143732,"public DataChoice(IApplication app,AbstractRuntimeScrollableValuelistComponent<IFieldComponent,JComponent> scriptable,IValueList vl,boolean isRadioList){
  super();
  application=app;
  this.vl=vl;
  this.isRadioList=isRadioList;
  list=new ComboModelListModelWrapper(vl,true);
  enclosedComponent=new JNavigableEditList();
  eventExecutor=new EventExecutor(this,enclosedComponent);
  enclosedComponent.addKeyListener(eventExecutor);
  enclosedComponent.setModel(list);
  if (isRadioList) {
    enclosedComponent.setCellRenderer(new NavigableCellRenderer(new RadioCell()));
    enclosedComponent.setCellEditor(new NavigableCellEditor(new RadioCell()));
    list.setMultiValueSelect(false);
  }
 else {
    enclosedComponent.setCellRenderer(new NavigableCellRenderer(new CheckBoxCell()));
    enclosedComponent.setCellEditor(new NavigableCellEditor(new CheckBoxCell()));
    list.setMultiValueSelect(true);
  }
  this.scriptable=scriptable;
  scriptable.setField(enclosedComponent);
  scriptable.setList(list);
  getViewport().setView(enclosedComponent);
}","public DataChoice(IApplication app,AbstractRuntimeScrollableValuelistComponent<IFieldComponent,JComponent> scriptable,IValueList vl,boolean isRadioList){
  super();
  setHorizontalAlignment(SwingConstants.LEFT);
  setBorder(null);
  application=app;
  this.vl=vl;
  this.isRadioList=isRadioList;
  list=new ComboModelListModelWrapper(vl,true);
  enclosedComponent=new JNavigableEditList();
  eventExecutor=new EventExecutor(this,enclosedComponent);
  enclosedComponent.addKeyListener(eventExecutor);
  enclosedComponent.setModel(list);
  if (isRadioList) {
    enclosedComponent.setCellRenderer(new NavigableCellRenderer(new RadioCell()));
    enclosedComponent.setCellEditor(new NavigableCellEditor(new RadioCell()));
    list.setMultiValueSelect(false);
  }
 else {
    enclosedComponent.setCellRenderer(new NavigableCellRenderer(new CheckBoxCell()));
    enclosedComponent.setCellEditor(new NavigableCellEditor(new CheckBoxCell()));
    list.setMultiValueSelect(true);
  }
  this.scriptable=scriptable;
  scriptable.setField(enclosedComponent);
  scriptable.setList(list);
  getViewport().setView(enclosedComponent);
}",0.9696691176470588
143733,"public DataComboBox(IApplication application,RuntimeDataCombobox scriptable,IValueList vl){
  super();
  hackDefaultPopupWidthBehavior();
  this.application=application;
  this.vl=vl;
  eventExecutor=new EventExecutor(this);
  list=new ComboModelListModelWrapper(vl,false);
  setModel(list);
  accesibleStateHolder=new ComboBoxAccesibleStateHolder(new ComboBoxStateApplier(){
    public void setEditable(    boolean editable){
      DataComboBox.this.setComboEditable(editable);
    }
    public void setEnabled(    boolean enabled){
      if (isEnabled() != enabled) {
        DataComboBox.this.setEnabled(enabled);
      }
    }
    public void setLabelsEnabled(    boolean labelsEnabled){
      if (labels != null) {
        for (int i=0; i < labels.size(); i++) {
          ILabel label=labels.get(i);
          label.setComponentEnabled(labelsEnabled);
        }
      }
    }
  }
);
  setMaximumRowCount(20);
  closePopupDocumentListener=new DocumentListener(){
    public void changedUpdate(    DocumentEvent e){
      if (isPopupVisible()) {
        hidePopup();
      }
    }
    public void insertUpdate(    DocumentEvent e){
      if (isPopupVisible()) {
        hidePopup();
      }
    }
    public void removeUpdate(    DocumentEvent e){
      if (isPopupVisible()) {
        hidePopup();
      }
    }
  }
;
  putClientProperty(""String_Node_Str"",""String_Node_Str"");
  if (UIManager.getLookAndFeel().getClass().getName().toUpperCase().indexOf(""String_Node_Str"") < 0) {
    putClientProperty(""String_Node_Str"",Boolean.TRUE);
    if (Utils.isAppleMacOS()) {
      setLightWeightPopupEnabled(true);
    }
  }
  UIManager.put(""String_Node_Str"",Boolean.TRUE);
  setRenderer(new DividerListCellRenderer(getRenderer()));
  this.scriptable=scriptable;
}","public DataComboBox(IApplication application,RuntimeDataCombobox scriptable,IValueList vl){
  super();
  setHorizontalAlignment(SwingConstants.LEFT);
  hackDefaultPopupWidthBehavior();
  this.application=application;
  this.vl=vl;
  eventExecutor=new EventExecutor(this);
  list=new ComboModelListModelWrapper(vl,false);
  setModel(list);
  accesibleStateHolder=new ComboBoxAccesibleStateHolder(new ComboBoxStateApplier(){
    public void setEditable(    boolean editable){
      DataComboBox.this.setComboEditable(editable);
    }
    public void setEnabled(    boolean enabled){
      if (isEnabled() != enabled) {
        DataComboBox.this.setEnabled(enabled);
      }
    }
    public void setLabelsEnabled(    boolean labelsEnabled){
      if (labels != null) {
        for (int i=0; i < labels.size(); i++) {
          ILabel label=labels.get(i);
          label.setComponentEnabled(labelsEnabled);
        }
      }
    }
  }
);
  setMaximumRowCount(20);
  closePopupDocumentListener=new DocumentListener(){
    public void changedUpdate(    DocumentEvent e){
      if (isPopupVisible()) {
        hidePopup();
      }
    }
    public void insertUpdate(    DocumentEvent e){
      if (isPopupVisible()) {
        hidePopup();
      }
    }
    public void removeUpdate(    DocumentEvent e){
      if (isPopupVisible()) {
        hidePopup();
      }
    }
  }
;
  putClientProperty(""String_Node_Str"",""String_Node_Str"");
  if (UIManager.getLookAndFeel().getClass().getName().toUpperCase().indexOf(""String_Node_Str"") < 0) {
    putClientProperty(""String_Node_Str"",Boolean.TRUE);
    if (Utils.isAppleMacOS()) {
      setLightWeightPopupEnabled(true);
    }
  }
  UIManager.put(""String_Node_Str"",Boolean.TRUE);
  setRenderer(new DividerListCellRenderer(getRenderer()));
  this.scriptable=scriptable;
}",0.9868162692847124
143734,"public boolean isDeprecated(){
  return isDeprecated;
}","public boolean isDeprecated(){
  return deprecatedMoveContentID != 0;
}",0.8253968253968254
143735,"public void flagAsDeprecated(){
  isDeprecated=true;
}","public void flagAsDeprecated(int moveContentID){
  this.deprecatedMoveContentID=moveContentID;
}",0.68
143736,"@SuppressWarnings(""String_Node_Str"") public static ContentSpec getContentSpecChanges(int old_repository_version){
  ContentSpec cs=csMap.get(old_repository_version);
  if (cs != null)   return cs;
  cs=new ContentSpec();
  csMap.put(old_repository_version,cs);
  if (old_repository_version == 0) {
    cs.new Element(1,IRepository.BEANS,PROPERTY_NAME.getPropertyName(),IRepository.STRING);
    cs.new Element(2,IRepository.BEANS,PROPERTY_BEANXML.getPropertyName(),IRepository.STRING);
    cs.new Element(3,IRepository.BEANS,PROPERTY_BEANCLASSNAME.getPropertyName(),IRepository.STRING);
    cs.new Element(4,IRepository.BEANS,PROPERTY_USESUI.getPropertyName(),IRepository.BOOLEAN);
    cs.new Element(5,IRepository.BEANS,PROPERTY_LOCATION.getPropertyName(),IRepository.POINT);
    cs.new Element(6,IRepository.BEANS,PROPERTY_SIZE.getPropertyName(),IRepository.DIMENSION);
    cs.new Element(7,IRepository.BEANS,PROPERTY_PRINTABLE.getPropertyName(),IRepository.BOOLEAN,Boolean.TRUE);
    cs.new Element(8,IRepository.BEANS,PROPERTY_FORMINDEX.getPropertyName(),IRepository.INTEGER);
    cs.new Element(9,IRepository.FIELDS,PROPERTY_ONACTIONMETHODID.getPropertyName(),IRepository.ELEMENTS);
    cs.new Element(10,IRepository.FIELDS,PROPERTY_ANCHORS.getPropertyName(),IRepository.INTEGER);
    cs.new Element(11,IRepository.FIELDS,PROPERTY_BACKGROUND.getPropertyName(),IRepository.COLOR);
    cs.new Element(12,IRepository.FIELDS,PROPERTY_FOREGROUND.getPropertyName(),IRepository.COLOR);
    cs.new Element(13,IRepository.FIELDS,PROPERTY_NAME.getPropertyName(),IRepository.STRING);
    cs.new Element(14,IRepository.FIELDS,PROPERTY_TOOLTIPTEXT.getPropertyName(),IRepository.STRING);
    cs.new Element(15,IRepository.FIELDS,PROPERTY_DATAPROVIDERID.getPropertyName(),IRepository.STRING);
    cs.new Element(16,IRepository.FIELDS,PROPERTY_BORDERTYPE.getPropertyName(),IRepository.BORDER);
    cs.new Element(17,IRepository.FIELDS,PROPERTY_EDITABLE.getPropertyName(),IRepository.BOOLEAN,Boolean.TRUE);
    cs.new Element(18,IRepository.FIELDS,PROPERTY_FONTTYPE.getPropertyName(),IRepository.FONT);
    cs.new Element(19,IRepository.FIELDS,PROPERTY_FORMAT.getPropertyName(),IRepository.STRING);
    cs.new Element(20,IRepository.FIELDS,PROPERTY_USERTF.getPropertyName(),IRepository.BOOLEAN);
    cs.new Element(21,IRepository.FIELDS,PROPERTY_SIZE.getPropertyName(),IRepository.DIMENSION);
    cs.new Element(22,IRepository.FIELDS,PROPERTY_ONFOCUSGAINEDMETHODID.getPropertyName(),IRepository.ELEMENTS);
    cs.new Element(23,IRepository.FIELDS,PROPERTY_ONFOCUSLOSTMETHODID.getPropertyName(),IRepository.ELEMENTS);
    cs.new Element(24,IRepository.FIELDS,PROPERTY_LOCATION.getPropertyName(),IRepository.POINT);
    cs.new Element(25,IRepository.FIELDS,PROPERTY_DISPLAYTYPE.getPropertyName(),IRepository.INTEGER);
    cs.new Element(26,IRepository.FIELDS,PROPERTY_SCROLLBARS.getPropertyName(),IRepository.INTEGER);
    cs.new Element(27,IRepository.FIELDS,PROPERTY_SELECTONENTER.getPropertyName(),IRepository.BOOLEAN);
    cs.new Element(28,IRepository.FIELDS,PROPERTY_TABSEQ.getPropertyName(),IRepository.INTEGER);
    cs.new Element(29,IRepository.FIELDS,PROPERTY_TRANSPARENT.getPropertyName(),IRepository.BOOLEAN);
    cs.new Element(30,IRepository.FIELDS,PROPERTY_HORIZONTALALIGNMENT.getPropertyName(),IRepository.INTEGER,ContentSpec.MINUS_ONE);
    cs.new Element(31,IRepository.FIELDS,PROPERTY_VERTICALALIGNMENT.getPropertyName(),IRepository.INTEGER,ContentSpec.MINUS_ONE);
    cs.new Element(32,IRepository.FIELDS,PROPERTY_VALUELISTID.getPropertyName(),IRepository.ELEMENTS);
    cs.new Element(33,IRepository.FIELDS,PROPERTY_PRINTABLE.getPropertyName(),IRepository.BOOLEAN,Boolean.TRUE);
    cs.new Element(34,IRepository.FIELDS,PROPERTY_FORMINDEX.getPropertyName(),IRepository.INTEGER);
    cs.new Element(35,IRepository.FIELDS,PROPERTY_MARGIN.getPropertyName(),IRepository.INSETS);
    cs.new Element(36,IRepository.FORMS,PROPERTY_SERVERNAME.getPropertyName(),IRepository.SERVERS).flagAsDeprecated();
    cs.new Element(37,IRepository.FORMS,PROPERTY_NAME.getPropertyName(),IRepository.STRING);
    cs.new Element(38,IRepository.FORMS,PROPERTY_SIZE.getPropertyName(),IRepository.DIMENSION);
    cs.new Element(39,IRepository.FORMS,PROPERTY_SHOWINMENU.getPropertyName(),IRepository.BOOLEAN);
    cs.new Element(40,IRepository.FORMS,PROPERTY_STYLENAME.getPropertyName(),IRepository.STYLES);
    cs.new Element(41,IRepository.FORMS,PROPERTY_TABLENAME.getPropertyName(),IRepository.TABLES).flagAsDeprecated();
    cs.new Element(42,IRepository.FORMS,PROPERTY_BACKGROUND.getPropertyName(),IRepository.COLOR);
    cs.new Element(43,IRepository.FORMS,PROPERTY_VIEW.getPropertyName(),IRepository.INTEGER);
    cs.new Element(44,IRepository.FORMS,PROPERTY_PAPERPRINTSCALE.getPropertyName(),IRepository.INTEGER);
    cs.new Element(45,IRepository.FORMS,PROPERTY_NAVIGATORID.getPropertyName(),IRepository.ELEMENTS);
    cs.new Element(46,IRepository.TABLENODES,PROPERTY_TABLENAME.getPropertyName(),IRepository.TABLES).flagAsDeprecated();
    cs.new Element(47,IRepository.TABLENODES,PROPERTY_SERVERNAME.getPropertyName(),IRepository.SERVERS).flagAsDeprecated();
    cs.new Element(48,IRepository.GRAPHICALCOMPONENTS,PROPERTY_NAME.getPropertyName(),IRepository.STRING);
    cs.new Element(49,IRepository.GRAPHICALCOMPONENTS,PROPERTY_TOOLTIPTEXT.getPropertyName(),IRepository.STRING);
    cs.new Element(50,IRepository.GRAPHICALCOMPONENTS,PROPERTY_DATAPROVIDERID.getPropertyName(),IRepository.STRING);
    cs.new Element(51,IRepository.GRAPHICALCOMPONENTS,PROPERTY_ONACTIONMETHODID.getPropertyName(),IRepository.ELEMENTS);
    cs.new Element(52,IRepository.GRAPHICALCOMPONENTS,PROPERTY_ANCHORS.getPropertyName(),IRepository.INTEGER);
    cs.new Element(53,IRepository.GRAPHICALCOMPONENTS,PROPERTY_BACKGROUND.getPropertyName(),IRepository.COLOR);
    cs.new Element(54,IRepository.GRAPHICALCOMPONENTS,PROPERTY_FOREGROUND.getPropertyName(),IRepository.COLOR);
    cs.new Element(55,IRepository.GRAPHICALCOMPONENTS,PROPERTY_FONTTYPE.getPropertyName(),IRepository.FONT);
    cs.new Element(56,IRepository.GRAPHICALCOMPONENTS,PROPERTY_SIZE.getPropertyName(),IRepository.DIMENSION);
    cs.new Element(57,IRepository.GRAPHICALCOMPONENTS,PROPERTY_LOCATION.getPropertyName(),IRepository.POINT);
    cs.new Element(58,IRepository.GRAPHICALCOMPONENTS,PROPERTY_TEXT.getPropertyName(),IRepository.STRING);
    cs.new Element(59,IRepository.GRAPHICALCOMPONENTS,PROPERTY_VERTICALALIGNMENT.getPropertyName(),IRepository.INTEGER,ContentSpec.MINUS_ONE);
    cs.new Element(60,IRepository.GRAPHICALCOMPONENTS,PROPERTY_HORIZONTALALIGNMENT.getPropertyName(),IRepository.INTEGER,ContentSpec.MINUS_ONE);
    cs.new Element(61,IRepository.GRAPHICALCOMPONENTS,PROPERTY_BORDERTYPE.getPropertyName(),IRepository.BORDER);
    cs.new Element(62,IRepository.GRAPHICALCOMPONENTS,PROPERTY_TRANSPARENT.getPropertyName(),IRepository.BOOLEAN);
    cs.new Element(63,IRepository.GRAPHICALCOMPONENTS,PROPERTY_IMAGEMEDIAID.getPropertyName(),IRepository.ELEMENTS);
    cs.new Element(64,IRepository.GRAPHICALCOMPONENTS,PROPERTY_ROLLOVERIMAGEMEDIAID.getPropertyName(),IRepository.ELEMENTS);
    cs.new Element(65,IRepository.GRAPHICALCOMPONENTS,PROPERTY_PRINTABLE.getPropertyName(),IRepository.BOOLEAN,Boolean.TRUE);
    cs.new Element(66,IRepository.GRAPHICALCOMPONENTS,PROPERTY_FORMINDEX.getPropertyName(),IRepository.INTEGER);
    cs.new Element(67,IRepository.GRAPHICALCOMPONENTS,PROPERTY_MARGIN.getPropertyName(),IRepository.INSETS);
    cs.new Element(68,IRepository.LINES,PROPERTY_FOREGROUND.getPropertyName(),IRepository.COLOR);
    cs.new Element(69,IRepository.LINES,PROPERTY_LINESIZE.getPropertyName(),IRepository.INTEGER);
    cs.new Element(70,IRepository.LINES,PROPERTY_POINT1.getPropertyName(),IRepository.POINT);
    cs.new Element(71,IRepository.LINES,PROPERTY_POINT2.getPropertyName(),IRepository.POINT);
    cs.new Element(72,IRepository.LINES,PROPERTY_FORMINDEX.getPropertyName(),IRepository.INTEGER);
    cs.new Element(73,IRepository.SHAPES,PROPERTY_FOREGROUND.getPropertyName(),IRepository.COLOR);
    cs.new Element(74,IRepository.SHAPES,PROPERTY_LINESIZE.getPropertyName(),IRepository.INTEGER);
    cs.new Element(75,IRepository.SHAPES,PROPERTY_LOCATION.getPropertyName(),IRepository.POINT);
    cs.new Element(76,IRepository.SHAPES,PROPERTY_TRANSPARENT.getPropertyName(),IRepository.BOOLEAN);
    cs.new Element(77,IRepository.SHAPES,PROPERTY_SIZE.getPropertyName(),IRepository.DIMENSION);
    cs.new Element(78,IRepository.SHAPES,PROPERTY_FORMINDEX.getPropertyName(),IRepository.INTEGER);
    cs.new Element(79,IRepository.PARTS,PROPERTY_ALLOWBREAKACROSSPAGEBOUNDS.getPropertyName(),IRepository.BOOLEAN);
    cs.new Element(80,IRepository.PARTS,PROPERTY_DISCARDREMAINDERAFTERBREAK.getPropertyName(),IRepository.BOOLEAN);
    cs.new Element(81,IRepository.PARTS,PROPERTY_GROUPBYDATAPROVIDERIDS.getPropertyName(),IRepository.STRING);
    cs.new Element(82,IRepository.PARTS,PROPERTY_HEIGHT.getPropertyName(),IRepository.INTEGER);
    cs.new Element(83,IRepository.PARTS,PROPERTY_PAGEBREAKBEFORE.getPropertyName(),IRepository.BOOLEAN);
    cs.new Element(84,IRepository.PARTS,PROPERTY_PAGEBREAKAFTEROCCURRENCE.getPropertyName(),IRepository.INTEGER);
    cs.new Element(85,IRepository.PARTS,PROPERTY_PARTTYPE.getPropertyName(),IRepository.INTEGER);
    cs.new Element(86,IRepository.PARTS,PROPERTY_RESTARTPAGENUMBER.getPropertyName(),IRepository.BOOLEAN);
    cs.new Element(87,IRepository.PARTS,PROPERTY_SEQUENCE.getPropertyName(),IRepository.INTEGER);
    cs.new Element(88,IRepository.PARTS,PROPERTY_BACKGROUND.getPropertyName(),IRepository.COLOR);
    cs.new Element(89,IRepository.PORTALS,PROPERTY_SORTABLE.getPropertyName(),IRepository.BOOLEAN);
    cs.new Element(90,IRepository.PORTALS,PROPERTY_FORMINDEX.getPropertyName(),IRepository.INTEGER);
    cs.new Element(91,IRepository.PORTALS,PROPERTY_ANCHORS.getPropertyName(),IRepository.INTEGER);
    cs.new Element(92,IRepository.PORTALS,PROPERTY_FOREGROUND.getPropertyName(),IRepository.COLOR);
    cs.new Element(93,IRepository.PORTALS,PROPERTY_BACKGROUND.getPropertyName(),IRepository.COLOR);
    cs.new Element(94,IRepository.PORTALS,PROPERTY_BORDERTYPE.getPropertyName(),IRepository.BORDER);
    cs.new Element(95,IRepository.PORTALS,PROPERTY_LOCATION.getPropertyName(),IRepository.POINT);
    cs.new Element(96,IRepository.PORTALS,PROPERTY_SIZE.getPropertyName(),IRepository.DIMENSION);
    cs.new Element(97,IRepository.PORTALS,PROPERTY_NAME.getPropertyName(),IRepository.STRING);
    cs.new Element(98,IRepository.PORTALS,PROPERTY_RELATIONNAME.getPropertyName(),IRepository.STRING);
    cs.new Element(99,IRepository.PORTALS,PROPERTY_REORDERABLE.getPropertyName(),IRepository.BOOLEAN);
    cs.new Element(100,IRepository.PORTALS,PROPERTY_RESIZEBLE.getPropertyName(),IRepository.BOOLEAN).flagAsDeprecated();
    cs.new Element(101,IRepository.PORTALS,PROPERTY_MULTILINE.getPropertyName(),IRepository.BOOLEAN);
    cs.new Element(102,IRepository.PORTALS,PROPERTY_ROWHEIGHT.getPropertyName(),IRepository.INTEGER);
    cs.new Element(103,IRepository.PORTALS,PROPERTY_SHOWVERTICALLINES.getPropertyName(),IRepository.BOOLEAN);
    cs.new Element(104,IRepository.PORTALS,PROPERTY_SHOWHORIZONTALLINES.getPropertyName(),IRepository.BOOLEAN);
    cs.new Element(105,IRepository.PORTALS,PROPERTY_INTERCELLSPACING.getPropertyName(),IRepository.DIMENSION);
    cs.new Element(106,IRepository.PORTALS,PROPERTY_PRINTABLE.getPropertyName(),IRepository.BOOLEAN,Boolean.TRUE);
    cs.new Element(107,IRepository.RECTSHAPES,PROPERTY_FOREGROUND.getPropertyName(),IRepository.COLOR);
    cs.new Element(108,IRepository.RECTSHAPES,PROPERTY_BACKGROUND.getPropertyName(),IRepository.COLOR);
    cs.new Element(109,IRepository.RECTSHAPES,PROPERTY_LINESIZE.getPropertyName(),IRepository.INTEGER);
    cs.new Element(110,IRepository.RECTSHAPES,PROPERTY_ROUNDEDRADIUS.getPropertyName(),IRepository.INTEGER);
    cs.new Element(111,IRepository.RECTSHAPES,PROPERTY_TRANSPARENT.getPropertyName(),IRepository.BOOLEAN);
    cs.new Element(112,IRepository.RECTSHAPES,PROPERTY_LOCATION.getPropertyName(),IRepository.POINT);
    cs.new Element(113,IRepository.RECTSHAPES,PROPERTY_SIZE.getPropertyName(),IRepository.DIMENSION);
    cs.new Element(114,IRepository.RECTSHAPES,PROPERTY_BORDERTYPE.getPropertyName(),IRepository.BORDER);
    cs.new Element(115,IRepository.RECTSHAPES,PROPERTY_PRINTABLE.getPropertyName(),IRepository.BOOLEAN,Boolean.TRUE);
    cs.new Element(116,IRepository.RECTSHAPES,PROPERTY_NAME.getPropertyName(),IRepository.STRING);
    cs.new Element(117,IRepository.RECTSHAPES,PROPERTY_FORMINDEX.getPropertyName(),IRepository.INTEGER);
    cs.new Element(118,IRepository.RECTSHAPES,PROPERTY_CONTAINSFORMID.getPropertyName(),IRepository.ELEMENTS);
    cs.new Element(119,IRepository.TABPANELS,PROPERTY_ANCHORS.getPropertyName(),IRepository.INTEGER);
    cs.new Element(120,IRepository.TABPANELS,PROPERTY_BACKGROUND.getPropertyName(),IRepository.COLOR);
    cs.new Element(121,IRepository.TABPANELS,PROPERTY_FOREGROUND.getPropertyName(),IRepository.COLOR);
    cs.new Element(122,IRepository.TABPANELS,PROPERTY_LOCATION.getPropertyName(),IRepository.POINT);
    cs.new Element(123,IRepository.TABPANELS,PROPERTY_TABORIENTATION.getPropertyName(),IRepository.INTEGER);
    cs.new Element(124,IRepository.TABPANELS,PROPERTY_NAME.getPropertyName(),IRepository.STRING);
    cs.new Element(125,IRepository.TABPANELS,PROPERTY_SIZE.getPropertyName(),IRepository.DIMENSION);
    cs.new Element(126,IRepository.TABPANELS,PROPERTY_BORDERTYPE.getPropertyName(),IRepository.BORDER);
    cs.new Element(127,IRepository.TABPANELS,PROPERTY_PRINTABLE.getPropertyName(),IRepository.BOOLEAN,Boolean.TRUE);
    cs.new Element(128,IRepository.TABPANELS,PROPERTY_FORMINDEX.getPropertyName(),IRepository.INTEGER);
    cs.new Element(129,IRepository.TABPANELS,PROPERTY_FONTTYPE.getPropertyName(),IRepository.FONT);
    cs.new Element(130,IRepository.TABS,PROPERTY_CONTAINSFORMID.getPropertyName(),IRepository.ELEMENTS);
    cs.new Element(131,IRepository.TABS,PROPERTY_LOCATION.getPropertyName(),IRepository.POINT);
    cs.new Element(132,IRepository.TABS,PROPERTY_RELATIONNAME.getPropertyName(),IRepository.STRING);
    cs.new Element(133,IRepository.TABS,PROPERTY_TEXT.getPropertyName(),IRepository.STRING);
    cs.new Element(134,IRepository.TABS,PROPERTY_NAME.getPropertyName(),IRepository.STRING);
    cs.new Element(135,IRepository.TABS,PROPERTY_IMAGEMEDIAID.getPropertyName(),IRepository.ELEMENTS);
    cs.new Element(136,IRepository.TABS,PROPERTY_TOOLTIPTEXT.getPropertyName(),IRepository.STRING);
    cs.new Element(137,IRepository.METHODS,PROPERTY_NAME.getPropertyName(),IRepository.STRING);
    cs.new Element(138,IRepository.METHODS,PROPERTY_METHODCODE.getPropertyName(),IRepository.STRING).flagAsDeprecated();
    cs.new Element(139,IRepository.METHODS,PROPERTY_SHOWINMENU.getPropertyName(),IRepository.BOOLEAN);
    cs.new Element(140,IRepository.SCRIPTCALCULATIONS,PROPERTY_NAME.getPropertyName(),IRepository.STRING);
    cs.new Element(141,IRepository.SCRIPTCALCULATIONS,PROPERTY_METHODCODE.getPropertyName(),IRepository.STRING).flagAsDeprecated();
    cs.new Element(142,IRepository.RELATIONS,PROPERTY_NAME.getPropertyName(),IRepository.STRING);
    cs.new Element(143,IRepository.RELATIONS,PROPERTY_PRIMARYSERVERNAME.getPropertyName(),IRepository.SERVERS).flagAsDeprecated();
    cs.new Element(144,IRepository.RELATIONS,PROPERTY_FOREIGNSERVERNAME.getPropertyName(),IRepository.SERVERS).flagAsDeprecated();
    cs.new Element(145,IRepository.RELATIONS,PROPERTY_PRIMARYTABLENAME.getPropertyName(),IRepository.TABLES).flagAsDeprecated();
    cs.new Element(146,IRepository.RELATIONS,PROPERTY_FOREIGNTABLENAME.getPropertyName(),IRepository.TABLES).flagAsDeprecated();
    cs.new Element(147,IRepository.RELATIONS,PROPERTY_DELETERELATEDRECORDS.getPropertyName(),IRepository.BOOLEAN);
    cs.new Element(148,IRepository.RELATIONS,PROPERTY_ALLOWCREATIONRELATEDRECORDS.getPropertyName(),IRepository.BOOLEAN);
    cs.new Element(149,IRepository.RELATIONS,PROPERTY_EXISTSINDB.getPropertyName(),IRepository.BOOLEAN);
    cs.new Element(150,IRepository.RELATION_ITEMS,PROPERTY_PRIMARYDATAPROVIDERID.getPropertyName(),IRepository.STRING);
    cs.new Element(151,IRepository.RELATION_ITEMS,PROPERTY_FOREIGNCOLUMNNAME.getPropertyName(),IRepository.STRING);
    cs.new Element(152,IRepository.STATEMENTS,PROPERTY_STATEMENTTYPEID.getPropertyName(),IRepository.INTEGER);
    cs.new Element(153,IRepository.STATEMENTS,PROPERTY_SQLTYPE.getPropertyName(),IRepository.INTEGER);
    cs.new Element(154,IRepository.STATEMENTS,PROPERTY_SQLTEXT.getPropertyName(),IRepository.STRING);
    cs.new Element(155,IRepository.VALUELISTS,PROPERTY_NAME.getPropertyName(),IRepository.STRING);
    cs.new Element(156,IRepository.VALUELISTS,PROPERTY_VALUELISTTYPE.getPropertyName(),IRepository.INTEGER);
    cs.new Element(157,IRepository.VALUELISTS,PROPERTY_RELATIONNAME.getPropertyName(),IRepository.STRING);
    cs.new Element(158,IRepository.VALUELISTS,PROPERTY_CUSTOMVALUES.getPropertyName(),IRepository.STRING);
    cs.new Element(159,IRepository.VALUELISTS,PROPERTY_SERVERNAME.getPropertyName(),IRepository.SERVERS).flagAsDeprecated();
    cs.new Element(160,IRepository.VALUELISTS,PROPERTY_TABLENAME.getPropertyName(),IRepository.TABLES).flagAsDeprecated();
    cs.new Element(161,IRepository.VALUELISTS,PROPERTY_DATAPROVIDERID1.getPropertyName(),IRepository.STRING);
    cs.new Element(162,IRepository.VALUELISTS,PROPERTY_DATAPROVIDERID2.getPropertyName(),IRepository.STRING);
    cs.new Element(163,IRepository.VALUELISTS,PROPERTY_DATAPROVIDERID3.getPropertyName(),IRepository.STRING);
    cs.new Element(164,IRepository.VALUELISTS,PROPERTY_SHOWDATAPROVIDERS.getPropertyName(),IRepository.INTEGER);
    cs.new Element(165,IRepository.VALUELISTS,PROPERTY_RETURNDATAPROVIDERS.getPropertyName(),IRepository.INTEGER);
    cs.new Element(166,IRepository.VALUELISTS,PROPERTY_SEPARATOR.getPropertyName(),IRepository.STRING);
    cs.new Element(167,IRepository.VALUELISTS,PROPERTY_SORTOPTIONS.getPropertyName(),IRepository.STRING);
    cs.new Element(168,IRepository.SCRIPTVARIABLES,PROPERTY_NAME.getPropertyName(),IRepository.STRING);
    cs.new Element(169,IRepository.SCRIPTVARIABLES,PROPERTY_VARIABLETYPE.getPropertyName(),IRepository.INTEGER,IColumnTypes.TEXT);
    cs.new Element(170,IRepository.AGGREGATEVARIABLES,PROPERTY_NAME.getPropertyName(),IRepository.STRING);
    cs.new Element(171,IRepository.AGGREGATEVARIABLES,PROPERTY_TYPE.getPropertyName(),IRepository.INTEGER);
    cs.new Element(172,IRepository.AGGREGATEVARIABLES,PROPERTY_DATAPROVIDERIDTOAGGREGATE.getPropertyName(),IRepository.STRING);
    cs.new Element(173,IRepository.FIELDS,PROPERTY_DISPLAYSTAGS.getPropertyName(),IRepository.BOOLEAN);
    cs.new Element(174,IRepository.GRAPHICALCOMPONENTS,PROPERTY_DISPLAYSTAGS.getPropertyName(),IRepository.BOOLEAN);
    cs.new Element(175,IRepository.RECTSHAPES,PROPERTY_SHAPETYPE.getPropertyName(),IRepository.INTEGER);
    cs.new Element(176,IRepository.RECTSHAPES,PROPERTY_ANCHORS.getPropertyName(),IRepository.INTEGER);
    cs.new Element(177,IRepository.SHAPES,PROPERTY_BACKGROUND.getPropertyName(),IRepository.COLOR);
    cs.new Element(178,IRepository.SHAPES,PROPERTY_POINTS.getPropertyName(),IRepository.STRING);
    cs.new Element(179,IRepository.SHAPES,PROPERTY_PRINTABLE.getPropertyName(),IRepository.BOOLEAN,Boolean.TRUE);
    cs.new Element(180,IRepository.SHAPES,PROPERTY_SHAPETYPE.getPropertyName(),IRepository.INTEGER);
    cs.new Element(181,IRepository.SHAPES,PROPERTY_GROUPID.getPropertyName(),IRepository.STRING);
    cs.new Element(182,IRepository.SHAPES,PROPERTY_LOCKED.getPropertyName(),IRepository.BOOLEAN);
    cs.new Element(183,IRepository.RECTSHAPES,PROPERTY_GROUPID.getPropertyName(),IRepository.STRING);
    cs.new Element(184,IRepository.RECTSHAPES,PROPERTY_LOCKED.getPropertyName(),IRepository.BOOLEAN);
    cs.new Element(185,IRepository.GRAPHICALCOMPONENTS,PROPERTY_GROUPID.getPropertyName(),IRepository.STRING);
    cs.new Element(186,IRepository.GRAPHICALCOMPONENTS,PROPERTY_LOCKED.getPropertyName(),IRepository.BOOLEAN);
    cs.new Element(187,IRepository.PORTALS,PROPERTY_GROUPID.getPropertyName(),IRepository.STRING);
    cs.new Element(188,IRepository.PORTALS,PROPERTY_LOCKED.getPropertyName(),IRepository.BOOLEAN);
    cs.new Element(189,IRepository.FIELDS,PROPERTY_GROUPID.getPropertyName(),IRepository.STRING);
    cs.new Element(190,IRepository.FIELDS,PROPERTY_LOCKED.getPropertyName(),IRepository.BOOLEAN);
    cs.new Element(191,IRepository.BEANS,PROPERTY_GROUPID.getPropertyName(),IRepository.STRING);
    cs.new Element(192,IRepository.BEANS,PROPERTY_LOCKED.getPropertyName(),IRepository.BOOLEAN);
    cs.new Element(193,IRepository.TABPANELS,PROPERTY_GROUPID.getPropertyName(),IRepository.STRING);
    cs.new Element(194,IRepository.TABPANELS,PROPERTY_LOCKED.getPropertyName(),IRepository.BOOLEAN);
    cs.new Element(195,IRepository.TABS,PROPERTY_GROUPID.getPropertyName(),IRepository.STRING);
    cs.new Element(196,IRepository.TABS,PROPERTY_LOCKED.getPropertyName(),IRepository.BOOLEAN);
    cs.new Element(197,IRepository.TABS,PROPERTY_FOREGROUND.getPropertyName(),IRepository.COLOR);
    cs.new Element(198,IRepository.TABS,PROPERTY_BACKGROUND.getPropertyName(),IRepository.COLOR);
    cs.new Element(199,IRepository.TABPANELS,PROPERTY_SELECTEDTABCOLOR.getPropertyName(),IRepository.COLOR);
    cs.new Element(200,IRepository.VALUELISTS,PROPERTY_RELATIONNMNAME.getPropertyName(),IRepository.STRING).flagAsDeprecated();
    cs.new Element(201,IRepository.FORMS,PROPERTY_ONLOADMETHODID.getPropertyName(),IRepository.ELEMENTS);
    cs.new Element(202,IRepository.FORMS,PROPERTY_ONSHOWMETHODID.getPropertyName(),IRepository.ELEMENTS);
    cs.new Element(203,IRepository.FORMS,PROPERTY_ONHIDEMETHODID.getPropertyName(),IRepository.ELEMENTS);
    cs.new Element(204,IRepository.FORMS,PROPERTY_INITIALSORT.getPropertyName(),IRepository.STRING);
    cs.new Element(205,IRepository.FORMS,PROPERTY_ONRECORDSELECTIONMETHODID.getPropertyName(),IRepository.ELEMENTS);
    cs.new Element(206,IRepository.FORMS,PROPERTY_ONRECORDEDITSTOPMETHODID.getPropertyName(),IRepository.ELEMENTS);
    cs.new Element(207,IRepository.SCRIPTCALCULATIONS,PROPERTY_TYPE.getPropertyName(),IRepository.INTEGER);
    cs.new Element(208,IRepository.FIELDS,PROPERTY_ONDATACHANGEMETHODID.getPropertyName(),IRepository.ELEMENTS);
    cs.new Element(209,IRepository.PORTALS,PROPERTY_INITIALSORT.getPropertyName(),IRepository.STRING);
    cs.new Element(210,IRepository.FORMS,PROPERTY_ONRECORDEDITSTARTMETHODID.getPropertyName(),IRepository.ELEMENTS);
    cs.new Element(211,IRepository.FIELDS,PROPERTY_TEXT.getPropertyName(),IRepository.STRING);
    cs.new Element(212,IRepository.VALUELISTS,PROPERTY_ADDEMPTYVALUE.getPropertyName(),IRepository.INTEGER);
  }
  if (old_repository_version < 14) {
    cs.new Element(213,IRepository.GRAPHICALCOMPONENTS,PROPERTY_ROTATION.getPropertyName(),IRepository.INTEGER);
    cs.new Element(214,IRepository.PORTALS,PROPERTY_SCROLLBARS.getPropertyName(),IRepository.INTEGER);
    cs.new Element(215,IRepository.FORMS,PROPERTY_SCROLLBARS.getPropertyName(),IRepository.INTEGER);
    cs.new Element(216,IRepository.FORMS,PROPERTY_DEFAULTPAGEFORMAT.getPropertyName(),IRepository.STRING);
    cs.new Element(217,IRepository.FORMS,PROPERTY_ONNEWRECORDCMDMETHODID.getPropertyName(),IRepository.ELEMENTS);
    cs.new Element(218,IRepository.FORMS,PROPERTY_ONDUPLICATERECORDCMDMETHODID.getPropertyName(),IRepository.ELEMENTS);
    cs.new Element(219,IRepository.FORMS,PROPERTY_ONDELETERECORDCMDMETHODID.getPropertyName(),IRepository.ELEMENTS);
    cs.new Element(220,IRepository.FORMS,PROPERTY_ONFINDCMDMETHODID.getPropertyName(),IRepository.ELEMENTS);
    cs.new Element(221,IRepository.FORMS,PROPERTY_ONSHOWALLRECORDSCMDMETHODID.getPropertyName(),IRepository.ELEMENTS);
    cs.new Element(222,IRepository.FORMS,PROPERTY_ONOMITRECORDCMDMETHODID.getPropertyName(),IRepository.ELEMENTS);
    cs.new Element(223,IRepository.FORMS,PROPERTY_ONSHOWOMITTEDRECORDSCMDMETHODID.getPropertyName(),IRepository.ELEMENTS);
    cs.new Element(224,IRepository.FORMS,PROPERTY_ONINVERTRECORDSCMDMETHODID.getPropertyName(),IRepository.ELEMENTS);
  }
  if (old_repository_version < 15) {
    cs.new Element(225,IRepository.GRAPHICALCOMPONENTS,PROPERTY_PRINTSLIDING.getPropertyName(),IRepository.INTEGER);
    cs.new Element(226,IRepository.PORTALS,PROPERTY_PRINTSLIDING.getPropertyName(),IRepository.INTEGER);
    cs.new Element(227,IRepository.TABPANELS,PROPERTY_PRINTSLIDING.getPropertyName(),IRepository.INTEGER);
    cs.new Element(228,IRepository.FIELDS,PROPERTY_PRINTSLIDING.getPropertyName(),IRepository.INTEGER);
    cs.new Element(229,IRepository.SHAPES,PROPERTY_PRINTSLIDING.getPropertyName(),IRepository.INTEGER);
    cs.new Element(230,IRepository.RECTSHAPES,PROPERTY_PRINTSLIDING.getPropertyName(),IRepository.INTEGER);
    cs.new Element(231,IRepository.FORMS,PROPERTY_BORDERTYPE.getPropertyName(),IRepository.BORDER);
    cs.new Element(232,IRepository.FORMS,PROPERTY_USESEPARATEFOUNDSET.getPropertyName(),IRepository.BOOLEAN).flagAsDeprecated();
    cs.new Element(233,IRepository.FORMS,PROPERTY_ONSORTCMDMETHODID.getPropertyName(),IRepository.ELEMENTS);
    cs.new Element(234,IRepository.FORMS,PROPERTY_ONDELETEALLRECORDSCMDMETHODID.getPropertyName(),IRepository.ELEMENTS);
    cs.new Element(235,IRepository.FORMS,PROPERTY_ONPRINTPREVIEWCMDMETHODID.getPropertyName(),IRepository.ELEMENTS);
  }
  if (old_repository_version < 16) {
    cs.new Element(236,IRepository.TABPANELS,PROPERTY_TRANSPARENT.getPropertyName(),IRepository.BOOLEAN);
    cs.new Element(237,IRepository.RELATION_ITEMS,PROPERTY_OPERATOR.getPropertyName(),IRepository.INTEGER);
  }
  if (old_repository_version < 17) {
    cs.new Element(238,IRepository.PORTALS,PROPERTY_TRANSPARENT.getPropertyName(),IRepository.BOOLEAN);
    cs.new Element(239,IRepository.GRAPHICALCOMPONENTS,PROPERTY_MEDIAOPTIONS.getPropertyName(),IRepository.INTEGER);
    cs.new Element(240,IRepository.GRAPHICALCOMPONENTS,PROPERTY_TABSEQ.getPropertyName(),IRepository.INTEGER);
    cs.new Element(241,IRepository.GRAPHICALCOMPONENTS,PROPERTY_ROLLOVERCURSOR.getPropertyName(),IRepository.INTEGER);
    cs.new Element(242,IRepository.FORMS,PROPERTY_TITLETEXT.getPropertyName(),IRepository.STRING);
    cs.new Element(243,IRepository.SCRIPTVARIABLES,PROPERTY_DEFAULTVALUE.getPropertyName(),IRepository.STRING);
    cs.new Element(244,IRepository.SOLUTIONS,PROPERTY_TITLETEXT.getPropertyName(),IRepository.STRING);
    cs.new Element(245,IRepository.SOLUTIONS,PROPERTY_FIRSTFORMID.getPropertyName(),IRepository.ELEMENTS);
    cs.new Element(246,IRepository.SOLUTIONS,PROPERTY_ONOPENMETHODID.getPropertyName(),IRepository.ELEMENTS);
    cs.new Element(247,IRepository.SOLUTIONS,PROPERTY_ONCLOSEMETHODID.getPropertyName(),IRepository.ELEMENTS);
  }
  if (old_repository_version < 20) {
    cs.new Element(249,IRepository.PORTALS,PROPERTY_ROWBGCOLORCALCULATION.getPropertyName(),IRepository.STRING);
    cs.new Element(250,IRepository.FORMS,PROPERTY_ROWBGCOLORCALCULATION.getPropertyName(),IRepository.STRING);
    cs.new Element(251,IRepository.GRAPHICALCOMPONENTS,PROPERTY_STYLECLASS.getPropertyName(),IRepository.STRING);
    cs.new Element(252,IRepository.TABPANELS,PROPERTY_STYLECLASS.getPropertyName(),IRepository.STRING);
    cs.new Element(253,IRepository.PORTALS,PROPERTY_STYLECLASS.getPropertyName(),IRepository.STRING);
    cs.new Element(254,IRepository.FIELDS,PROPERTY_STYLECLASS.getPropertyName(),IRepository.STRING);
    cs.new Element(255,IRepository.SOLUTIONS,PROPERTY_I18NTABLENAME.getPropertyName(),IRepository.TABLES).flagAsDeprecated();
    cs.new Element(256,IRepository.SOLUTIONS,PROPERTY_I18NSERVERNAME.getPropertyName(),IRepository.SERVERS).flagAsDeprecated();
    cs.new Element(257,IRepository.BEANS,PROPERTY_ANCHORS.getPropertyName(),IRepository.INTEGER);
    cs.new Element(258,IRepository.TABPANELS,PROPERTY_SCROLLTABS.getPropertyName(),IRepository.BOOLEAN);
    cs.new Element(259,IRepository.GRAPHICALCOMPONENTS,PROPERTY_SHOWCLICK.getPropertyName(),IRepository.BOOLEAN,Boolean.TRUE);
    cs.new Element(260,IRepository.GRAPHICALCOMPONENTS,PROPERTY_SHOWFOCUS.getPropertyName(),IRepository.BOOLEAN,Boolean.TRUE);
  }
  if (old_repository_version < 22) {
    cs.new Element(261,IRepository.FORMS,PROPERTY_STYLECLASS.getPropertyName(),IRepository.STRING);
  }
  if (old_repository_version < 24) {
    cs.new Element(262,IRepository.FORMS,PROPERTY_ONPREVIOUSRECORDCMDMETHODID.getPropertyName(),IRepository.ELEMENTS);
    cs.new Element(263,IRepository.FORMS,PROPERTY_ONNEXTRECORDCMDMETHODID.getPropertyName(),IRepository.ELEMENTS);
    cs.new Element(264,IRepository.SOLUTIONS,PROPERTY_MODULESNAMES.getPropertyName(),IRepository.STRING);
  }
  if (old_repository_version < 25) {
    cs.new Element(265,IRepository.FORMS,PROPERTY_ONSEARCHCMDMETHODID.getPropertyName(),IRepository.ELEMENTS);
    cs.new Element(266,IRepository.RELATIONS,PROPERTY_DUPLICATERELATEDRECORDS.getPropertyName(),IRepository.BOOLEAN);
    cs.new Element(267,IRepository.RELATIONS,PROPERTY_INITIALSORT.getPropertyName(),IRepository.STRING);
    cs.new Element(268,IRepository.VALUELISTS,PROPERTY_USETABLEFILTER.getPropertyName(),IRepository.BOOLEAN);
  }
  if (old_repository_version < 27) {
    cs.new Element(269,IRepository.SOLUTIONS,PROPERTY_ONERRORMETHODID.getPropertyName(),IRepository.ELEMENTS);
    cs.new Element(270,IRepository.SOLUTIONS,PROPERTY_LOGINFORMID.getPropertyName(),IRepository.ELEMENTS);
    cs.new Element(271,IRepository.PARTS,PROPERTY_SINKWHENLAST.getPropertyName(),IRepository.BOOLEAN);
    cs.new Element(272,IRepository.BEANS,PROPERTY_ONACTIONMETHODID.getPropertyName(),IRepository.ELEMENTS);
    cs.new Element(273,IRepository.BEANS,PROPERTY_PARAMETERS.getPropertyName(),IRepository.STRING);
  }
  if (old_repository_version < 28) {
    cs.new Element(275,IRepository.SOLUTIONS,PROPERTY_MUSTAUTHENTICATE.getPropertyName(),IRepository.BOOLEAN).flagAsMetaData();
    cs.new Element(276,IRepository.MEDIA,PROPERTY_NAME.getPropertyName(),IRepository.STRING);
    cs.new Element(277,IRepository.MEDIA,PROPERTY_BLOBID.getPropertyName(),IRepository.BLOBS);
    cs.new Element(278,IRepository.MEDIA,PROPERTY_MIMETYPE.getPropertyName(),IRepository.STRING);
    cs.new Element(279,IRepository.SOLUTIONS,PROPERTY_SOLUTIONTYPE.getPropertyName(),IRepository.INTEGER).flagAsMetaData();
    cs.new Element(280,IRepository.STYLES,PROPERTY_CSSTEXT.getPropertyName(),IRepository.STRING);
    cs.new Element(PROTECTION_PASSWORD,IRepository.SOLUTIONS,PROPERTY_PROTECTIONPASSWORD.getPropertyName(),IRepository.STRING).flagAsMetaData();
  }
  if (old_repository_version < 29) {
    cs.new Element(282,IRepository.FORMS,PROPERTY_ALIASES.getPropertyName(),IRepository.STRING);
    cs.new Element(283,IRepository.TABPANELS,PROPERTY_CLOSEONTABS.getPropertyName(),IRepository.BOOLEAN);
    cs.new Element(284,IRepository.RELATIONS,PROPERTY_ALLOWPARENTDELETEWHENHAVINGRELATEDRECORDS.getPropertyName(),IRepository.BOOLEAN,Boolean.TRUE);
    cs.new Element(285,IRepository.TABLENODES,PROPERTY_ONINSERTMETHODID.getPropertyName(),IRepository.ELEMENTS);
    cs.new Element(286,IRepository.TABLENODES,PROPERTY_ONUPDATEMETHODID.getPropertyName(),IRepository.ELEMENTS);
    cs.new Element(287,IRepository.TABLENODES,PROPERTY_ONDELETEMETHODID.getPropertyName(),IRepository.ELEMENTS);
    cs.new Element(288,IRepository.GRAPHICALCOMPONENTS,PROPERTY_LABELFOR.getPropertyName(),IRepository.STRING);
    cs.new Element(289,IRepository.GRAPHICALCOMPONENTS,PROPERTY_MNEMONIC.getPropertyName(),IRepository.STRING);
    cs.new Element(290,IRepository.TABPANELS,PROPERTY_ONTABCHANGEMETHODID.getPropertyName(),IRepository.ELEMENTS).flagAsDeprecated();
    cs.new Element(291,IRepository.TABS,PROPERTY_USENEWFORMINSTANCE.getPropertyName(),IRepository.BOOLEAN);
    cs.new Element(292,IRepository.RELATIONS,PROPERTY_JOINTYPE.getPropertyName(),IRepository.INTEGER);
  }
  if (old_repository_version < 30) {
    cs.new Element(293,IRepository.SOLUTIONS,PROPERTY_TEXTORIENTATION.getPropertyName(),IRepository.INTEGER);
  }
  if (old_repository_version < 31) {
    cs.new Element(294,IRepository.FORMS,PROPERTY_TRANSPARENT.getPropertyName(),IRepository.BOOLEAN);
    cs.new Element(295,IRepository.FORMS,PROPERTY_EXTENDSFORMID.getPropertyName(),IRepository.ELEMENTS).flagAsDeprecated();
    cs.new Element(296,IRepository.GRAPHICALCOMPONENTS,PROPERTY_ONDOUBLECLICKMETHODID.getPropertyName(),IRepository.ELEMENTS);
    cs.new Element(297,IRepository.GRAPHICALCOMPONENTS,PROPERTY_ONRIGHTCLICKMETHODID.getPropertyName(),IRepository.ELEMENTS);
  }
  if (old_repository_version < 32) {
    cs.new Element(298,IRepository.FORMS,PROPERTY_ONUNLOADMETHODID.getPropertyName(),IRepository.ELEMENTS);
  }
  if (old_repository_version < 35) {
    cs.new Element(299,IRepository.BEANS,PROPERTY_TABSEQ.getPropertyName(),IRepository.INTEGER);
    cs.new Element(300,IRepository.PORTALS,PROPERTY_TABSEQ.getPropertyName(),IRepository.INTEGER);
    cs.new Element(301,IRepository.TABPANELS,PROPERTY_TABSEQ.getPropertyName(),IRepository.INTEGER);
  }
  if (old_repository_version < 36) {
    cs.new Element(302,IRepository.FORMS,PROPERTY_ONDRAGMETHODID.getPropertyName(),IRepository.ELEMENTS);
    cs.new Element(303,IRepository.FORMS,PROPERTY_ONDRAGOVERMETHODID.getPropertyName(),IRepository.ELEMENTS);
    cs.new Element(304,IRepository.FORMS,PROPERTY_ONDROPMETHODID.getPropertyName(),IRepository.ELEMENTS);
    cs.new Element(305,IRepository.FORMS,PROPERTY_ONELEMENTFOCUSGAINEDMETHODID.getPropertyName(),IRepository.ELEMENTS);
    cs.new Element(306,IRepository.SOLUTIONS,PROPERTY_ONDATABROADCASTMETHODID.getPropertyName(),IRepository.ELEMENTS);
    cs.new Element(307,IRepository.TABLENODES,PROPERTY_ONAFTERINSERTMETHODID.getPropertyName(),IRepository.ELEMENTS);
    cs.new Element(308,IRepository.TABLENODES,PROPERTY_ONAFTERUPDATEMETHODID.getPropertyName(),IRepository.ELEMENTS);
    cs.new Element(309,IRepository.TABLENODES,PROPERTY_ONAFTERDELETEMETHODID.getPropertyName(),IRepository.ELEMENTS);
    cs.new Element(310,IRepository.FIELDS,PROPERTY_ONRIGHTCLICKMETHODID.getPropertyName(),IRepository.ELEMENTS);
    cs.new Element(311,IRepository.METHODS,PROPERTY_LINENUMBEROFFSET.getPropertyName(),IRepository.INTEGER);
    cs.new Element(312,IRepository.METHODS,PROPERTY_DECLARATION.getPropertyName(),IRepository.STRING);
    cs.new Element(313,IRepository.FORMS,PROPERTY_NAMEDFOUNDSET.getPropertyName(),IRepository.STRING);
    cs.new Element(314,IRepository.FORMS,PROPERTY_DATASOURCE.getPropertyName(),IRepository.DATASOURCES);
    cs.new Element(315,IRepository.RELATIONS,PROPERTY_PRIMARYDATASOURCE.getPropertyName(),IRepository.DATASOURCES);
    cs.new Element(316,IRepository.RELATIONS,PROPERTY_FOREIGNDATASOURCE.getPropertyName(),IRepository.DATASOURCES);
    cs.new Element(317,IRepository.VALUELISTS,PROPERTY_DATASOURCE.getPropertyName(),IRepository.DATASOURCES);
    cs.new Element(318,IRepository.SOLUTIONS,PROPERTY_I18NDATASOURCE.getPropertyName(),IRepository.DATASOURCES);
    cs.new Element(319,IRepository.TABLENODES,PROPERTY_DATASOURCE.getPropertyName(),IRepository.DATASOURCES);
    cs.new Element(320,IRepository.FORMS,PROPERTY_CUSTOMPROPERTIES.getPropertyName(),IRepository.STRING);
    cs.new Element(321,IRepository.BEANS,PROPERTY_CUSTOMPROPERTIES.getPropertyName(),IRepository.STRING);
    cs.new Element(322,IRepository.PORTALS,PROPERTY_CUSTOMPROPERTIES.getPropertyName(),IRepository.STRING);
    cs.new Element(323,IRepository.TABPANELS,PROPERTY_CUSTOMPROPERTIES.getPropertyName(),IRepository.STRING);
    cs.new Element(324,IRepository.TABS,PROPERTY_CUSTOMPROPERTIES.getPropertyName(),IRepository.STRING);
    cs.new Element(325,IRepository.GRAPHICALCOMPONENTS,PROPERTY_CUSTOMPROPERTIES.getPropertyName(),IRepository.STRING);
    cs.new Element(326,IRepository.RELATIONS,PROPERTY_CUSTOMPROPERTIES.getPropertyName(),IRepository.STRING);
    cs.new Element(327,IRepository.SHAPES,PROPERTY_CUSTOMPROPERTIES.getPropertyName(),IRepository.STRING);
    cs.new Element(328,IRepository.RECTSHAPES,PROPERTY_CUSTOMPROPERTIES.getPropertyName(),IRepository.STRING);
    cs.new Element(329,IRepository.VALUELISTS,PROPERTY_CUSTOMPROPERTIES.getPropertyName(),IRepository.STRING);
    cs.new Element(330,IRepository.LINES,PROPERTY_CUSTOMPROPERTIES.getPropertyName(),IRepository.STRING);
    cs.new Element(331,IRepository.PARTS,PROPERTY_CUSTOMPROPERTIES.getPropertyName(),IRepository.STRING);
    cs.new Element(332,IRepository.METHODS,PROPERTY_CUSTOMPROPERTIES.getPropertyName(),IRepository.STRING);
    cs.new Element(333,IRepository.SCRIPTVARIABLES,PROPERTY_CUSTOMPROPERTIES.getPropertyName(),IRepository.STRING);
    cs.new Element(334,IRepository.SCRIPTCALCULATIONS,PROPERTY_CUSTOMPROPERTIES.getPropertyName(),IRepository.STRING);
    cs.new Element(335,IRepository.TABLENODES,PROPERTY_CUSTOMPROPERTIES.getPropertyName(),IRepository.STRING);
    cs.new Element(336,IRepository.AGGREGATEVARIABLES,PROPERTY_CUSTOMPROPERTIES.getPropertyName(),IRepository.STRING);
    cs.new Element(337,IRepository.SOLUTIONS,PROPERTY_CUSTOMPROPERTIES.getPropertyName(),IRepository.STRING);
    cs.new Element(338,IRepository.STYLES,PROPERTY_CUSTOMPROPERTIES.getPropertyName(),IRepository.STRING);
    cs.new Element(339,IRepository.MEDIA,PROPERTY_CUSTOMPROPERTIES.getPropertyName(),IRepository.STRING);
    cs.new Element(340,IRepository.FIELDS,PROPERTY_CUSTOMPROPERTIES.getPropertyName(),IRepository.STRING);
    cs.new Element(341,IRepository.RELATION_ITEMS,PROPERTY_CUSTOMPROPERTIES.getPropertyName(),IRepository.STRING);
    cs.new Element(342,IRepository.PORTALS,PROPERTY_ONDRAGMETHODID.getPropertyName(),IRepository.ELEMENTS);
    cs.new Element(343,IRepository.PORTALS,PROPERTY_ONDRAGOVERMETHODID.getPropertyName(),IRepository.ELEMENTS);
    cs.new Element(344,IRepository.PORTALS,PROPERTY_ONDROPMETHODID.getPropertyName(),IRepository.ELEMENTS);
    cs.new Element(345,IRepository.FORMS,PROPERTY_ONELEMENTFOCUSLOSTMETHODID.getPropertyName(),IRepository.ELEMENTS);
    cs.new Element(346,IRepository.SCRIPTCALCULATIONS,PROPERTY_DECLARATION.getPropertyName(),IRepository.STRING);
    cs.new Element(347,IRepository.SCRIPTCALCULATIONS,PROPERTY_LINENUMBEROFFSET.getPropertyName(),IRepository.INTEGER);
  }
  if (old_repository_version < 37) {
    cs.new Element(348,IRepository.VALUELISTS,PROPERTY_FALLBACKVALUELISTID.getPropertyName(),IRepository.ELEMENTS);
    cs.new Element(349,IRepository.SOLUTIONS,PROPERTY_ONINITMETHODID.getPropertyName(),IRepository.ELEMENTS);
    cs.new Element(350,IRepository.FORMS,PROPERTY_ONRESIZEMETHODID.getPropertyName(),IRepository.ELEMENTS);
    cs.new Element(351,IRepository.TEMPLATES,PROPERTY_RESOURCETYPE.getPropertyName(),IRepository.INTEGER);
    cs.new Element(352,IRepository.TEMPLATES,PROPERTY_CONTENT.getPropertyName(),IRepository.STRING);
    cs.new Element(353,IRepository.TEMPLATES,PROPERTY_CUSTOMPROPERTIES.getPropertyName(),IRepository.STRING);
  }
  if (old_repository_version < 39) {
    cs.new Element(354,IRepository.FORMS,PROPERTY_ONDRAGENDMETHODID.getPropertyName(),IRepository.ELEMENTS);
    cs.new Element(355,IRepository.PORTALS,PROPERTY_ONDRAGENDMETHODID.getPropertyName(),IRepository.ELEMENTS);
    cs.new Element(356,IRepository.FORMS,PROPERTY_ENCAPSULATION.getPropertyName(),IRepository.INTEGER);
    cs.new Element(357,IRepository.SCRIPTVARIABLES,PROPERTY_COMMENT.getPropertyName(),IRepository.STRING);
    cs.new Element(358,IRepository.FORMS,PROPERTY_ONRENDERMETHODID.getPropertyName(),IRepository.ELEMENTS);
    cs.new Element(359,IRepository.PORTALS,PROPERTY_ONRENDERMETHODID.getPropertyName(),IRepository.ELEMENTS);
    cs.new Element(360,IRepository.FIELDS,PROPERTY_ONRENDERMETHODID.getPropertyName(),IRepository.ELEMENTS);
    cs.new Element(361,IRepository.GRAPHICALCOMPONENTS,PROPERTY_ONRENDERMETHODID.getPropertyName(),IRepository.ELEMENTS);
    cs.new Element(362,IRepository.BEANS,PROPERTY_VISIBLE.getPropertyName(),IRepository.BOOLEAN,Boolean.TRUE);
    cs.new Element(363,IRepository.PORTALS,PROPERTY_VISIBLE.getPropertyName(),IRepository.BOOLEAN,Boolean.TRUE);
    cs.new Element(364,IRepository.TABPANELS,PROPERTY_VISIBLE.getPropertyName(),IRepository.BOOLEAN,Boolean.TRUE);
    cs.new Element(365,IRepository.GRAPHICALCOMPONENTS,PROPERTY_VISIBLE.getPropertyName(),IRepository.BOOLEAN,Boolean.TRUE);
    cs.new Element(366,IRepository.SHAPES,PROPERTY_VISIBLE.getPropertyName(),IRepository.BOOLEAN,Boolean.TRUE);
    cs.new Element(367,IRepository.RECTSHAPES,PROPERTY_VISIBLE.getPropertyName(),IRepository.BOOLEAN,Boolean.TRUE);
    cs.new Element(368,IRepository.FIELDS,PROPERTY_VISIBLE.getPropertyName(),IRepository.BOOLEAN,Boolean.TRUE);
    cs.new Element(369,IRepository.BEANS,PROPERTY_ENABLED.getPropertyName(),IRepository.BOOLEAN,Boolean.TRUE);
    cs.new Element(370,IRepository.PORTALS,PROPERTY_ENABLED.getPropertyName(),IRepository.BOOLEAN,Boolean.TRUE);
    cs.new Element(371,IRepository.TABPANELS,PROPERTY_ENABLED.getPropertyName(),IRepository.BOOLEAN,Boolean.TRUE);
    cs.new Element(372,IRepository.GRAPHICALCOMPONENTS,PROPERTY_ENABLED.getPropertyName(),IRepository.BOOLEAN,Boolean.TRUE);
    cs.new Element(373,IRepository.SHAPES,PROPERTY_ENABLED.getPropertyName(),IRepository.BOOLEAN,Boolean.TRUE);
    cs.new Element(374,IRepository.RECTSHAPES,PROPERTY_ENABLED.getPropertyName(),IRepository.BOOLEAN,Boolean.TRUE);
    cs.new Element(375,IRepository.FIELDS,PROPERTY_ENABLED.getPropertyName(),IRepository.BOOLEAN,Boolean.TRUE);
    cs.new Element(376,IRepository.PORTALS,PROPERTY_RESIZABLE.getPropertyName(),IRepository.BOOLEAN);
    cs.new Element(377,IRepository.TABPANELS,PROPERTY_ONCHANGEMETHODID.getPropertyName(),IRepository.ELEMENTS);
  }
  if (old_repository_version < 40) {
    cs.new Element(378,IRepository.SHAPES,PROPERTY_ANCHORS.getPropertyName(),IRepository.INTEGER);
    cs.new Element(379,IRepository.FORMS,PROPERTY_EXTENDSID.getPropertyName(),IRepository.ELEMENTS);
    cs.new Element(380,IRepository.BEANS,PROPERTY_EXTENDSID.getPropertyName(),IRepository.ELEMENTS);
    cs.new Element(381,IRepository.FIELDS,PROPERTY_EXTENDSID.getPropertyName(),IRepository.ELEMENTS);
    cs.new Element(382,IRepository.GRAPHICALCOMPONENTS,PROPERTY_EXTENDSID.getPropertyName(),IRepository.ELEMENTS);
    cs.new Element(383,IRepository.PARTS,PROPERTY_EXTENDSID.getPropertyName(),IRepository.ELEMENTS);
    cs.new Element(384,IRepository.PORTALS,PROPERTY_EXTENDSID.getPropertyName(),IRepository.ELEMENTS);
    cs.new Element(385,IRepository.TABS,PROPERTY_EXTENDSID.getPropertyName(),IRepository.ELEMENTS);
    cs.new Element(386,IRepository.TABPANELS,PROPERTY_EXTENDSID.getPropertyName(),IRepository.ELEMENTS);
    cs.new Element(387,IRepository.RECTSHAPES,PROPERTY_EXTENDSID.getPropertyName(),IRepository.ELEMENTS);
    cs.new Element(388,IRepository.SHAPES,PROPERTY_EXTENDSID.getPropertyName(),IRepository.ELEMENTS);
  }
  return cs;
}","@SuppressWarnings(""String_Node_Str"") public static ContentSpec getContentSpecChanges(int old_repository_version){
  ContentSpec cs=csMap.get(old_repository_version);
  if (cs != null)   return cs;
  cs=new ContentSpec();
  csMap.put(old_repository_version,cs);
  if (old_repository_version == 0) {
    cs.new Element(1,IRepository.BEANS,PROPERTY_NAME.getPropertyName(),IRepository.STRING);
    cs.new Element(2,IRepository.BEANS,PROPERTY_BEANXML.getPropertyName(),IRepository.STRING);
    cs.new Element(3,IRepository.BEANS,PROPERTY_BEANCLASSNAME.getPropertyName(),IRepository.STRING);
    cs.new Element(4,IRepository.BEANS,PROPERTY_USESUI.getPropertyName(),IRepository.BOOLEAN);
    cs.new Element(5,IRepository.BEANS,PROPERTY_LOCATION.getPropertyName(),IRepository.POINT);
    cs.new Element(6,IRepository.BEANS,PROPERTY_SIZE.getPropertyName(),IRepository.DIMENSION);
    cs.new Element(7,IRepository.BEANS,PROPERTY_PRINTABLE.getPropertyName(),IRepository.BOOLEAN,Boolean.TRUE);
    cs.new Element(8,IRepository.BEANS,PROPERTY_FORMINDEX.getPropertyName(),IRepository.INTEGER);
    cs.new Element(9,IRepository.FIELDS,PROPERTY_ONACTIONMETHODID.getPropertyName(),IRepository.ELEMENTS);
    cs.new Element(10,IRepository.FIELDS,PROPERTY_ANCHORS.getPropertyName(),IRepository.INTEGER);
    cs.new Element(11,IRepository.FIELDS,PROPERTY_BACKGROUND.getPropertyName(),IRepository.COLOR);
    cs.new Element(12,IRepository.FIELDS,PROPERTY_FOREGROUND.getPropertyName(),IRepository.COLOR);
    cs.new Element(13,IRepository.FIELDS,PROPERTY_NAME.getPropertyName(),IRepository.STRING);
    cs.new Element(14,IRepository.FIELDS,PROPERTY_TOOLTIPTEXT.getPropertyName(),IRepository.STRING);
    cs.new Element(15,IRepository.FIELDS,PROPERTY_DATAPROVIDERID.getPropertyName(),IRepository.STRING);
    cs.new Element(16,IRepository.FIELDS,PROPERTY_BORDERTYPE.getPropertyName(),IRepository.BORDER);
    cs.new Element(17,IRepository.FIELDS,PROPERTY_EDITABLE.getPropertyName(),IRepository.BOOLEAN,Boolean.TRUE);
    cs.new Element(18,IRepository.FIELDS,PROPERTY_FONTTYPE.getPropertyName(),IRepository.FONT);
    cs.new Element(19,IRepository.FIELDS,PROPERTY_FORMAT.getPropertyName(),IRepository.STRING);
    cs.new Element(20,IRepository.FIELDS,PROPERTY_USERTF.getPropertyName(),IRepository.BOOLEAN);
    cs.new Element(21,IRepository.FIELDS,PROPERTY_SIZE.getPropertyName(),IRepository.DIMENSION);
    cs.new Element(22,IRepository.FIELDS,PROPERTY_ONFOCUSGAINEDMETHODID.getPropertyName(),IRepository.ELEMENTS);
    cs.new Element(23,IRepository.FIELDS,PROPERTY_ONFOCUSLOSTMETHODID.getPropertyName(),IRepository.ELEMENTS);
    cs.new Element(24,IRepository.FIELDS,PROPERTY_LOCATION.getPropertyName(),IRepository.POINT);
    cs.new Element(25,IRepository.FIELDS,PROPERTY_DISPLAYTYPE.getPropertyName(),IRepository.INTEGER);
    cs.new Element(26,IRepository.FIELDS,PROPERTY_SCROLLBARS.getPropertyName(),IRepository.INTEGER);
    cs.new Element(27,IRepository.FIELDS,PROPERTY_SELECTONENTER.getPropertyName(),IRepository.BOOLEAN);
    cs.new Element(28,IRepository.FIELDS,PROPERTY_TABSEQ.getPropertyName(),IRepository.INTEGER);
    cs.new Element(29,IRepository.FIELDS,PROPERTY_TRANSPARENT.getPropertyName(),IRepository.BOOLEAN);
    cs.new Element(30,IRepository.FIELDS,PROPERTY_HORIZONTALALIGNMENT.getPropertyName(),IRepository.INTEGER,ContentSpec.MINUS_ONE);
    cs.new Element(31,IRepository.FIELDS,PROPERTY_VERTICALALIGNMENT.getPropertyName(),IRepository.INTEGER,ContentSpec.MINUS_ONE);
    cs.new Element(32,IRepository.FIELDS,PROPERTY_VALUELISTID.getPropertyName(),IRepository.ELEMENTS);
    cs.new Element(33,IRepository.FIELDS,PROPERTY_PRINTABLE.getPropertyName(),IRepository.BOOLEAN,Boolean.TRUE);
    cs.new Element(34,IRepository.FIELDS,PROPERTY_FORMINDEX.getPropertyName(),IRepository.INTEGER);
    cs.new Element(35,IRepository.FIELDS,PROPERTY_MARGIN.getPropertyName(),IRepository.INSETS);
    cs.new Element(36,IRepository.FORMS,PROPERTY_SERVERNAME.getPropertyName(),IRepository.SERVERS).flagAsDeprecated();
    cs.new Element(37,IRepository.FORMS,PROPERTY_NAME.getPropertyName(),IRepository.STRING);
    cs.new Element(38,IRepository.FORMS,PROPERTY_SIZE.getPropertyName(),IRepository.DIMENSION);
    cs.new Element(39,IRepository.FORMS,PROPERTY_SHOWINMENU.getPropertyName(),IRepository.BOOLEAN);
    cs.new Element(40,IRepository.FORMS,PROPERTY_STYLENAME.getPropertyName(),IRepository.STYLES);
    cs.new Element(41,IRepository.FORMS,PROPERTY_TABLENAME.getPropertyName(),IRepository.TABLES).flagAsDeprecated();
    cs.new Element(42,IRepository.FORMS,PROPERTY_BACKGROUND.getPropertyName(),IRepository.COLOR);
    cs.new Element(43,IRepository.FORMS,PROPERTY_VIEW.getPropertyName(),IRepository.INTEGER);
    cs.new Element(44,IRepository.FORMS,PROPERTY_PAPERPRINTSCALE.getPropertyName(),IRepository.INTEGER);
    cs.new Element(45,IRepository.FORMS,PROPERTY_NAVIGATORID.getPropertyName(),IRepository.ELEMENTS);
    cs.new Element(46,IRepository.TABLENODES,PROPERTY_TABLENAME.getPropertyName(),IRepository.TABLES).flagAsDeprecated();
    cs.new Element(47,IRepository.TABLENODES,PROPERTY_SERVERNAME.getPropertyName(),IRepository.SERVERS).flagAsDeprecated();
    cs.new Element(48,IRepository.GRAPHICALCOMPONENTS,PROPERTY_NAME.getPropertyName(),IRepository.STRING);
    cs.new Element(49,IRepository.GRAPHICALCOMPONENTS,PROPERTY_TOOLTIPTEXT.getPropertyName(),IRepository.STRING);
    cs.new Element(50,IRepository.GRAPHICALCOMPONENTS,PROPERTY_DATAPROVIDERID.getPropertyName(),IRepository.STRING);
    cs.new Element(51,IRepository.GRAPHICALCOMPONENTS,PROPERTY_ONACTIONMETHODID.getPropertyName(),IRepository.ELEMENTS);
    cs.new Element(52,IRepository.GRAPHICALCOMPONENTS,PROPERTY_ANCHORS.getPropertyName(),IRepository.INTEGER);
    cs.new Element(53,IRepository.GRAPHICALCOMPONENTS,PROPERTY_BACKGROUND.getPropertyName(),IRepository.COLOR);
    cs.new Element(54,IRepository.GRAPHICALCOMPONENTS,PROPERTY_FOREGROUND.getPropertyName(),IRepository.COLOR);
    cs.new Element(55,IRepository.GRAPHICALCOMPONENTS,PROPERTY_FONTTYPE.getPropertyName(),IRepository.FONT);
    cs.new Element(56,IRepository.GRAPHICALCOMPONENTS,PROPERTY_SIZE.getPropertyName(),IRepository.DIMENSION);
    cs.new Element(57,IRepository.GRAPHICALCOMPONENTS,PROPERTY_LOCATION.getPropertyName(),IRepository.POINT);
    cs.new Element(58,IRepository.GRAPHICALCOMPONENTS,PROPERTY_TEXT.getPropertyName(),IRepository.STRING);
    cs.new Element(59,IRepository.GRAPHICALCOMPONENTS,PROPERTY_VERTICALALIGNMENT.getPropertyName(),IRepository.INTEGER,ContentSpec.MINUS_ONE);
    cs.new Element(60,IRepository.GRAPHICALCOMPONENTS,PROPERTY_HORIZONTALALIGNMENT.getPropertyName(),IRepository.INTEGER,ContentSpec.MINUS_ONE);
    cs.new Element(61,IRepository.GRAPHICALCOMPONENTS,PROPERTY_BORDERTYPE.getPropertyName(),IRepository.BORDER);
    cs.new Element(62,IRepository.GRAPHICALCOMPONENTS,PROPERTY_TRANSPARENT.getPropertyName(),IRepository.BOOLEAN);
    cs.new Element(63,IRepository.GRAPHICALCOMPONENTS,PROPERTY_IMAGEMEDIAID.getPropertyName(),IRepository.ELEMENTS);
    cs.new Element(64,IRepository.GRAPHICALCOMPONENTS,PROPERTY_ROLLOVERIMAGEMEDIAID.getPropertyName(),IRepository.ELEMENTS);
    cs.new Element(65,IRepository.GRAPHICALCOMPONENTS,PROPERTY_PRINTABLE.getPropertyName(),IRepository.BOOLEAN,Boolean.TRUE);
    cs.new Element(66,IRepository.GRAPHICALCOMPONENTS,PROPERTY_FORMINDEX.getPropertyName(),IRepository.INTEGER);
    cs.new Element(67,IRepository.GRAPHICALCOMPONENTS,PROPERTY_MARGIN.getPropertyName(),IRepository.INSETS);
    cs.new Element(68,IRepository.LINES,PROPERTY_FOREGROUND.getPropertyName(),IRepository.COLOR);
    cs.new Element(69,IRepository.LINES,PROPERTY_LINESIZE.getPropertyName(),IRepository.INTEGER);
    cs.new Element(70,IRepository.LINES,PROPERTY_POINT1.getPropertyName(),IRepository.POINT);
    cs.new Element(71,IRepository.LINES,PROPERTY_POINT2.getPropertyName(),IRepository.POINT);
    cs.new Element(72,IRepository.LINES,PROPERTY_FORMINDEX.getPropertyName(),IRepository.INTEGER);
    cs.new Element(73,IRepository.SHAPES,PROPERTY_FOREGROUND.getPropertyName(),IRepository.COLOR);
    cs.new Element(74,IRepository.SHAPES,PROPERTY_LINESIZE.getPropertyName(),IRepository.INTEGER);
    cs.new Element(75,IRepository.SHAPES,PROPERTY_LOCATION.getPropertyName(),IRepository.POINT);
    cs.new Element(76,IRepository.SHAPES,PROPERTY_TRANSPARENT.getPropertyName(),IRepository.BOOLEAN);
    cs.new Element(77,IRepository.SHAPES,PROPERTY_SIZE.getPropertyName(),IRepository.DIMENSION);
    cs.new Element(78,IRepository.SHAPES,PROPERTY_FORMINDEX.getPropertyName(),IRepository.INTEGER);
    cs.new Element(79,IRepository.PARTS,PROPERTY_ALLOWBREAKACROSSPAGEBOUNDS.getPropertyName(),IRepository.BOOLEAN);
    cs.new Element(80,IRepository.PARTS,PROPERTY_DISCARDREMAINDERAFTERBREAK.getPropertyName(),IRepository.BOOLEAN);
    cs.new Element(81,IRepository.PARTS,PROPERTY_GROUPBYDATAPROVIDERIDS.getPropertyName(),IRepository.STRING);
    cs.new Element(82,IRepository.PARTS,PROPERTY_HEIGHT.getPropertyName(),IRepository.INTEGER);
    cs.new Element(83,IRepository.PARTS,PROPERTY_PAGEBREAKBEFORE.getPropertyName(),IRepository.BOOLEAN);
    cs.new Element(84,IRepository.PARTS,PROPERTY_PAGEBREAKAFTEROCCURRENCE.getPropertyName(),IRepository.INTEGER);
    cs.new Element(85,IRepository.PARTS,PROPERTY_PARTTYPE.getPropertyName(),IRepository.INTEGER);
    cs.new Element(86,IRepository.PARTS,PROPERTY_RESTARTPAGENUMBER.getPropertyName(),IRepository.BOOLEAN);
    cs.new Element(87,IRepository.PARTS,PROPERTY_SEQUENCE.getPropertyName(),IRepository.INTEGER);
    cs.new Element(88,IRepository.PARTS,PROPERTY_BACKGROUND.getPropertyName(),IRepository.COLOR);
    cs.new Element(89,IRepository.PORTALS,PROPERTY_SORTABLE.getPropertyName(),IRepository.BOOLEAN);
    cs.new Element(90,IRepository.PORTALS,PROPERTY_FORMINDEX.getPropertyName(),IRepository.INTEGER);
    cs.new Element(91,IRepository.PORTALS,PROPERTY_ANCHORS.getPropertyName(),IRepository.INTEGER);
    cs.new Element(92,IRepository.PORTALS,PROPERTY_FOREGROUND.getPropertyName(),IRepository.COLOR);
    cs.new Element(93,IRepository.PORTALS,PROPERTY_BACKGROUND.getPropertyName(),IRepository.COLOR);
    cs.new Element(94,IRepository.PORTALS,PROPERTY_BORDERTYPE.getPropertyName(),IRepository.BORDER);
    cs.new Element(95,IRepository.PORTALS,PROPERTY_LOCATION.getPropertyName(),IRepository.POINT);
    cs.new Element(96,IRepository.PORTALS,PROPERTY_SIZE.getPropertyName(),IRepository.DIMENSION);
    cs.new Element(97,IRepository.PORTALS,PROPERTY_NAME.getPropertyName(),IRepository.STRING);
    cs.new Element(98,IRepository.PORTALS,PROPERTY_RELATIONNAME.getPropertyName(),IRepository.STRING);
    cs.new Element(99,IRepository.PORTALS,PROPERTY_REORDERABLE.getPropertyName(),IRepository.BOOLEAN);
    cs.new Element(100,IRepository.PORTALS,PROPERTY_RESIZEBLE.getPropertyName(),IRepository.BOOLEAN).flagAsDeprecated();
    cs.new Element(101,IRepository.PORTALS,PROPERTY_MULTILINE.getPropertyName(),IRepository.BOOLEAN);
    cs.new Element(102,IRepository.PORTALS,PROPERTY_ROWHEIGHT.getPropertyName(),IRepository.INTEGER);
    cs.new Element(103,IRepository.PORTALS,PROPERTY_SHOWVERTICALLINES.getPropertyName(),IRepository.BOOLEAN);
    cs.new Element(104,IRepository.PORTALS,PROPERTY_SHOWHORIZONTALLINES.getPropertyName(),IRepository.BOOLEAN);
    cs.new Element(105,IRepository.PORTALS,PROPERTY_INTERCELLSPACING.getPropertyName(),IRepository.DIMENSION);
    cs.new Element(106,IRepository.PORTALS,PROPERTY_PRINTABLE.getPropertyName(),IRepository.BOOLEAN,Boolean.TRUE);
    cs.new Element(107,IRepository.RECTSHAPES,PROPERTY_FOREGROUND.getPropertyName(),IRepository.COLOR);
    cs.new Element(108,IRepository.RECTSHAPES,PROPERTY_BACKGROUND.getPropertyName(),IRepository.COLOR);
    cs.new Element(109,IRepository.RECTSHAPES,PROPERTY_LINESIZE.getPropertyName(),IRepository.INTEGER);
    cs.new Element(110,IRepository.RECTSHAPES,PROPERTY_ROUNDEDRADIUS.getPropertyName(),IRepository.INTEGER);
    cs.new Element(111,IRepository.RECTSHAPES,PROPERTY_TRANSPARENT.getPropertyName(),IRepository.BOOLEAN);
    cs.new Element(112,IRepository.RECTSHAPES,PROPERTY_LOCATION.getPropertyName(),IRepository.POINT);
    cs.new Element(113,IRepository.RECTSHAPES,PROPERTY_SIZE.getPropertyName(),IRepository.DIMENSION);
    cs.new Element(114,IRepository.RECTSHAPES,PROPERTY_BORDERTYPE.getPropertyName(),IRepository.BORDER);
    cs.new Element(115,IRepository.RECTSHAPES,PROPERTY_PRINTABLE.getPropertyName(),IRepository.BOOLEAN,Boolean.TRUE);
    cs.new Element(116,IRepository.RECTSHAPES,PROPERTY_NAME.getPropertyName(),IRepository.STRING);
    cs.new Element(117,IRepository.RECTSHAPES,PROPERTY_FORMINDEX.getPropertyName(),IRepository.INTEGER);
    cs.new Element(118,IRepository.RECTSHAPES,PROPERTY_CONTAINSFORMID.getPropertyName(),IRepository.ELEMENTS);
    cs.new Element(119,IRepository.TABPANELS,PROPERTY_ANCHORS.getPropertyName(),IRepository.INTEGER);
    cs.new Element(120,IRepository.TABPANELS,PROPERTY_BACKGROUND.getPropertyName(),IRepository.COLOR);
    cs.new Element(121,IRepository.TABPANELS,PROPERTY_FOREGROUND.getPropertyName(),IRepository.COLOR);
    cs.new Element(122,IRepository.TABPANELS,PROPERTY_LOCATION.getPropertyName(),IRepository.POINT);
    cs.new Element(123,IRepository.TABPANELS,PROPERTY_TABORIENTATION.getPropertyName(),IRepository.INTEGER);
    cs.new Element(124,IRepository.TABPANELS,PROPERTY_NAME.getPropertyName(),IRepository.STRING);
    cs.new Element(125,IRepository.TABPANELS,PROPERTY_SIZE.getPropertyName(),IRepository.DIMENSION);
    cs.new Element(126,IRepository.TABPANELS,PROPERTY_BORDERTYPE.getPropertyName(),IRepository.BORDER);
    cs.new Element(127,IRepository.TABPANELS,PROPERTY_PRINTABLE.getPropertyName(),IRepository.BOOLEAN,Boolean.TRUE);
    cs.new Element(128,IRepository.TABPANELS,PROPERTY_FORMINDEX.getPropertyName(),IRepository.INTEGER);
    cs.new Element(129,IRepository.TABPANELS,PROPERTY_FONTTYPE.getPropertyName(),IRepository.FONT);
    cs.new Element(130,IRepository.TABS,PROPERTY_CONTAINSFORMID.getPropertyName(),IRepository.ELEMENTS);
    cs.new Element(131,IRepository.TABS,PROPERTY_LOCATION.getPropertyName(),IRepository.POINT);
    cs.new Element(132,IRepository.TABS,PROPERTY_RELATIONNAME.getPropertyName(),IRepository.STRING);
    cs.new Element(133,IRepository.TABS,PROPERTY_TEXT.getPropertyName(),IRepository.STRING);
    cs.new Element(134,IRepository.TABS,PROPERTY_NAME.getPropertyName(),IRepository.STRING);
    cs.new Element(135,IRepository.TABS,PROPERTY_IMAGEMEDIAID.getPropertyName(),IRepository.ELEMENTS);
    cs.new Element(136,IRepository.TABS,PROPERTY_TOOLTIPTEXT.getPropertyName(),IRepository.STRING);
    cs.new Element(137,IRepository.METHODS,PROPERTY_NAME.getPropertyName(),IRepository.STRING);
    cs.new Element(138,IRepository.METHODS,PROPERTY_METHODCODE.getPropertyName(),IRepository.STRING).flagAsDeprecated();
    cs.new Element(139,IRepository.METHODS,PROPERTY_SHOWINMENU.getPropertyName(),IRepository.BOOLEAN);
    cs.new Element(140,IRepository.SCRIPTCALCULATIONS,PROPERTY_NAME.getPropertyName(),IRepository.STRING);
    cs.new Element(141,IRepository.SCRIPTCALCULATIONS,PROPERTY_METHODCODE.getPropertyName(),IRepository.STRING).flagAsDeprecated();
    cs.new Element(142,IRepository.RELATIONS,PROPERTY_NAME.getPropertyName(),IRepository.STRING);
    cs.new Element(143,IRepository.RELATIONS,PROPERTY_PRIMARYSERVERNAME.getPropertyName(),IRepository.SERVERS).flagAsDeprecated();
    cs.new Element(144,IRepository.RELATIONS,PROPERTY_FOREIGNSERVERNAME.getPropertyName(),IRepository.SERVERS).flagAsDeprecated();
    cs.new Element(145,IRepository.RELATIONS,PROPERTY_PRIMARYTABLENAME.getPropertyName(),IRepository.TABLES).flagAsDeprecated();
    cs.new Element(146,IRepository.RELATIONS,PROPERTY_FOREIGNTABLENAME.getPropertyName(),IRepository.TABLES).flagAsDeprecated();
    cs.new Element(147,IRepository.RELATIONS,PROPERTY_DELETERELATEDRECORDS.getPropertyName(),IRepository.BOOLEAN);
    cs.new Element(148,IRepository.RELATIONS,PROPERTY_ALLOWCREATIONRELATEDRECORDS.getPropertyName(),IRepository.BOOLEAN);
    cs.new Element(149,IRepository.RELATIONS,PROPERTY_EXISTSINDB.getPropertyName(),IRepository.BOOLEAN);
    cs.new Element(150,IRepository.RELATION_ITEMS,PROPERTY_PRIMARYDATAPROVIDERID.getPropertyName(),IRepository.STRING);
    cs.new Element(151,IRepository.RELATION_ITEMS,PROPERTY_FOREIGNCOLUMNNAME.getPropertyName(),IRepository.STRING);
    cs.new Element(152,IRepository.STATEMENTS,PROPERTY_STATEMENTTYPEID.getPropertyName(),IRepository.INTEGER);
    cs.new Element(153,IRepository.STATEMENTS,PROPERTY_SQLTYPE.getPropertyName(),IRepository.INTEGER);
    cs.new Element(154,IRepository.STATEMENTS,PROPERTY_SQLTEXT.getPropertyName(),IRepository.STRING);
    cs.new Element(155,IRepository.VALUELISTS,PROPERTY_NAME.getPropertyName(),IRepository.STRING);
    cs.new Element(156,IRepository.VALUELISTS,PROPERTY_VALUELISTTYPE.getPropertyName(),IRepository.INTEGER);
    cs.new Element(157,IRepository.VALUELISTS,PROPERTY_RELATIONNAME.getPropertyName(),IRepository.STRING);
    cs.new Element(158,IRepository.VALUELISTS,PROPERTY_CUSTOMVALUES.getPropertyName(),IRepository.STRING);
    cs.new Element(159,IRepository.VALUELISTS,PROPERTY_SERVERNAME.getPropertyName(),IRepository.SERVERS).flagAsDeprecated();
    cs.new Element(160,IRepository.VALUELISTS,PROPERTY_TABLENAME.getPropertyName(),IRepository.TABLES).flagAsDeprecated();
    cs.new Element(161,IRepository.VALUELISTS,PROPERTY_DATAPROVIDERID1.getPropertyName(),IRepository.STRING);
    cs.new Element(162,IRepository.VALUELISTS,PROPERTY_DATAPROVIDERID2.getPropertyName(),IRepository.STRING);
    cs.new Element(163,IRepository.VALUELISTS,PROPERTY_DATAPROVIDERID3.getPropertyName(),IRepository.STRING);
    cs.new Element(164,IRepository.VALUELISTS,PROPERTY_SHOWDATAPROVIDERS.getPropertyName(),IRepository.INTEGER);
    cs.new Element(165,IRepository.VALUELISTS,PROPERTY_RETURNDATAPROVIDERS.getPropertyName(),IRepository.INTEGER);
    cs.new Element(166,IRepository.VALUELISTS,PROPERTY_SEPARATOR.getPropertyName(),IRepository.STRING);
    cs.new Element(167,IRepository.VALUELISTS,PROPERTY_SORTOPTIONS.getPropertyName(),IRepository.STRING);
    cs.new Element(168,IRepository.SCRIPTVARIABLES,PROPERTY_NAME.getPropertyName(),IRepository.STRING);
    cs.new Element(169,IRepository.SCRIPTVARIABLES,PROPERTY_VARIABLETYPE.getPropertyName(),IRepository.INTEGER,IColumnTypes.TEXT);
    cs.new Element(170,IRepository.AGGREGATEVARIABLES,PROPERTY_NAME.getPropertyName(),IRepository.STRING);
    cs.new Element(171,IRepository.AGGREGATEVARIABLES,PROPERTY_TYPE.getPropertyName(),IRepository.INTEGER);
    cs.new Element(172,IRepository.AGGREGATEVARIABLES,PROPERTY_DATAPROVIDERIDTOAGGREGATE.getPropertyName(),IRepository.STRING);
    cs.new Element(173,IRepository.FIELDS,PROPERTY_DISPLAYSTAGS.getPropertyName(),IRepository.BOOLEAN);
    cs.new Element(174,IRepository.GRAPHICALCOMPONENTS,PROPERTY_DISPLAYSTAGS.getPropertyName(),IRepository.BOOLEAN);
    cs.new Element(175,IRepository.RECTSHAPES,PROPERTY_SHAPETYPE.getPropertyName(),IRepository.INTEGER);
    cs.new Element(176,IRepository.RECTSHAPES,PROPERTY_ANCHORS.getPropertyName(),IRepository.INTEGER);
    cs.new Element(177,IRepository.SHAPES,PROPERTY_BACKGROUND.getPropertyName(),IRepository.COLOR);
    cs.new Element(178,IRepository.SHAPES,PROPERTY_POINTS.getPropertyName(),IRepository.STRING);
    cs.new Element(179,IRepository.SHAPES,PROPERTY_PRINTABLE.getPropertyName(),IRepository.BOOLEAN,Boolean.TRUE);
    cs.new Element(180,IRepository.SHAPES,PROPERTY_SHAPETYPE.getPropertyName(),IRepository.INTEGER);
    cs.new Element(181,IRepository.SHAPES,PROPERTY_GROUPID.getPropertyName(),IRepository.STRING);
    cs.new Element(182,IRepository.SHAPES,PROPERTY_LOCKED.getPropertyName(),IRepository.BOOLEAN);
    cs.new Element(183,IRepository.RECTSHAPES,PROPERTY_GROUPID.getPropertyName(),IRepository.STRING);
    cs.new Element(184,IRepository.RECTSHAPES,PROPERTY_LOCKED.getPropertyName(),IRepository.BOOLEAN);
    cs.new Element(185,IRepository.GRAPHICALCOMPONENTS,PROPERTY_GROUPID.getPropertyName(),IRepository.STRING);
    cs.new Element(186,IRepository.GRAPHICALCOMPONENTS,PROPERTY_LOCKED.getPropertyName(),IRepository.BOOLEAN);
    cs.new Element(187,IRepository.PORTALS,PROPERTY_GROUPID.getPropertyName(),IRepository.STRING);
    cs.new Element(188,IRepository.PORTALS,PROPERTY_LOCKED.getPropertyName(),IRepository.BOOLEAN);
    cs.new Element(189,IRepository.FIELDS,PROPERTY_GROUPID.getPropertyName(),IRepository.STRING);
    cs.new Element(190,IRepository.FIELDS,PROPERTY_LOCKED.getPropertyName(),IRepository.BOOLEAN);
    cs.new Element(191,IRepository.BEANS,PROPERTY_GROUPID.getPropertyName(),IRepository.STRING);
    cs.new Element(192,IRepository.BEANS,PROPERTY_LOCKED.getPropertyName(),IRepository.BOOLEAN);
    cs.new Element(193,IRepository.TABPANELS,PROPERTY_GROUPID.getPropertyName(),IRepository.STRING);
    cs.new Element(194,IRepository.TABPANELS,PROPERTY_LOCKED.getPropertyName(),IRepository.BOOLEAN);
    cs.new Element(195,IRepository.TABS,PROPERTY_GROUPID.getPropertyName(),IRepository.STRING);
    cs.new Element(196,IRepository.TABS,PROPERTY_LOCKED.getPropertyName(),IRepository.BOOLEAN);
    cs.new Element(197,IRepository.TABS,PROPERTY_FOREGROUND.getPropertyName(),IRepository.COLOR);
    cs.new Element(198,IRepository.TABS,PROPERTY_BACKGROUND.getPropertyName(),IRepository.COLOR);
    cs.new Element(199,IRepository.TABPANELS,PROPERTY_SELECTEDTABCOLOR.getPropertyName(),IRepository.COLOR);
    cs.new Element(200,IRepository.VALUELISTS,PROPERTY_RELATIONNMNAME.getPropertyName(),IRepository.STRING).flagAsDeprecated();
    cs.new Element(201,IRepository.FORMS,PROPERTY_ONLOADMETHODID.getPropertyName(),IRepository.ELEMENTS);
    cs.new Element(202,IRepository.FORMS,PROPERTY_ONSHOWMETHODID.getPropertyName(),IRepository.ELEMENTS);
    cs.new Element(203,IRepository.FORMS,PROPERTY_ONHIDEMETHODID.getPropertyName(),IRepository.ELEMENTS);
    cs.new Element(204,IRepository.FORMS,PROPERTY_INITIALSORT.getPropertyName(),IRepository.STRING);
    cs.new Element(205,IRepository.FORMS,PROPERTY_ONRECORDSELECTIONMETHODID.getPropertyName(),IRepository.ELEMENTS);
    cs.new Element(206,IRepository.FORMS,PROPERTY_ONRECORDEDITSTOPMETHODID.getPropertyName(),IRepository.ELEMENTS);
    cs.new Element(207,IRepository.SCRIPTCALCULATIONS,PROPERTY_TYPE.getPropertyName(),IRepository.INTEGER);
    cs.new Element(208,IRepository.FIELDS,PROPERTY_ONDATACHANGEMETHODID.getPropertyName(),IRepository.ELEMENTS);
    cs.new Element(209,IRepository.PORTALS,PROPERTY_INITIALSORT.getPropertyName(),IRepository.STRING);
    cs.new Element(210,IRepository.FORMS,PROPERTY_ONRECORDEDITSTARTMETHODID.getPropertyName(),IRepository.ELEMENTS);
    cs.new Element(211,IRepository.FIELDS,PROPERTY_TEXT.getPropertyName(),IRepository.STRING);
    cs.new Element(212,IRepository.VALUELISTS,PROPERTY_ADDEMPTYVALUE.getPropertyName(),IRepository.INTEGER);
  }
  if (old_repository_version < 14) {
    cs.new Element(213,IRepository.GRAPHICALCOMPONENTS,PROPERTY_ROTATION.getPropertyName(),IRepository.INTEGER);
    cs.new Element(214,IRepository.PORTALS,PROPERTY_SCROLLBARS.getPropertyName(),IRepository.INTEGER);
    cs.new Element(215,IRepository.FORMS,PROPERTY_SCROLLBARS.getPropertyName(),IRepository.INTEGER);
    cs.new Element(216,IRepository.FORMS,PROPERTY_DEFAULTPAGEFORMAT.getPropertyName(),IRepository.STRING);
    cs.new Element(217,IRepository.FORMS,PROPERTY_ONNEWRECORDCMDMETHODID.getPropertyName(),IRepository.ELEMENTS);
    cs.new Element(218,IRepository.FORMS,PROPERTY_ONDUPLICATERECORDCMDMETHODID.getPropertyName(),IRepository.ELEMENTS);
    cs.new Element(219,IRepository.FORMS,PROPERTY_ONDELETERECORDCMDMETHODID.getPropertyName(),IRepository.ELEMENTS);
    cs.new Element(220,IRepository.FORMS,PROPERTY_ONFINDCMDMETHODID.getPropertyName(),IRepository.ELEMENTS);
    cs.new Element(221,IRepository.FORMS,PROPERTY_ONSHOWALLRECORDSCMDMETHODID.getPropertyName(),IRepository.ELEMENTS);
    cs.new Element(222,IRepository.FORMS,PROPERTY_ONOMITRECORDCMDMETHODID.getPropertyName(),IRepository.ELEMENTS);
    cs.new Element(223,IRepository.FORMS,PROPERTY_ONSHOWOMITTEDRECORDSCMDMETHODID.getPropertyName(),IRepository.ELEMENTS);
    cs.new Element(224,IRepository.FORMS,PROPERTY_ONINVERTRECORDSCMDMETHODID.getPropertyName(),IRepository.ELEMENTS);
  }
  if (old_repository_version < 15) {
    cs.new Element(225,IRepository.GRAPHICALCOMPONENTS,PROPERTY_PRINTSLIDING.getPropertyName(),IRepository.INTEGER);
    cs.new Element(226,IRepository.PORTALS,PROPERTY_PRINTSLIDING.getPropertyName(),IRepository.INTEGER);
    cs.new Element(227,IRepository.TABPANELS,PROPERTY_PRINTSLIDING.getPropertyName(),IRepository.INTEGER);
    cs.new Element(228,IRepository.FIELDS,PROPERTY_PRINTSLIDING.getPropertyName(),IRepository.INTEGER);
    cs.new Element(229,IRepository.SHAPES,PROPERTY_PRINTSLIDING.getPropertyName(),IRepository.INTEGER);
    cs.new Element(230,IRepository.RECTSHAPES,PROPERTY_PRINTSLIDING.getPropertyName(),IRepository.INTEGER);
    cs.new Element(231,IRepository.FORMS,PROPERTY_BORDERTYPE.getPropertyName(),IRepository.BORDER);
    cs.new Element(232,IRepository.FORMS,PROPERTY_USESEPARATEFOUNDSET.getPropertyName(),IRepository.BOOLEAN).flagAsDeprecated();
    cs.new Element(233,IRepository.FORMS,PROPERTY_ONSORTCMDMETHODID.getPropertyName(),IRepository.ELEMENTS);
    cs.new Element(234,IRepository.FORMS,PROPERTY_ONDELETEALLRECORDSCMDMETHODID.getPropertyName(),IRepository.ELEMENTS);
    cs.new Element(235,IRepository.FORMS,PROPERTY_ONPRINTPREVIEWCMDMETHODID.getPropertyName(),IRepository.ELEMENTS);
  }
  if (old_repository_version < 16) {
    cs.new Element(236,IRepository.TABPANELS,PROPERTY_TRANSPARENT.getPropertyName(),IRepository.BOOLEAN);
    cs.new Element(237,IRepository.RELATION_ITEMS,PROPERTY_OPERATOR.getPropertyName(),IRepository.INTEGER);
  }
  if (old_repository_version < 17) {
    cs.new Element(238,IRepository.PORTALS,PROPERTY_TRANSPARENT.getPropertyName(),IRepository.BOOLEAN);
    cs.new Element(239,IRepository.GRAPHICALCOMPONENTS,PROPERTY_MEDIAOPTIONS.getPropertyName(),IRepository.INTEGER);
    cs.new Element(240,IRepository.GRAPHICALCOMPONENTS,PROPERTY_TABSEQ.getPropertyName(),IRepository.INTEGER);
    cs.new Element(241,IRepository.GRAPHICALCOMPONENTS,PROPERTY_ROLLOVERCURSOR.getPropertyName(),IRepository.INTEGER);
    cs.new Element(242,IRepository.FORMS,PROPERTY_TITLETEXT.getPropertyName(),IRepository.STRING);
    cs.new Element(243,IRepository.SCRIPTVARIABLES,PROPERTY_DEFAULTVALUE.getPropertyName(),IRepository.STRING);
    cs.new Element(244,IRepository.SOLUTIONS,PROPERTY_TITLETEXT.getPropertyName(),IRepository.STRING);
    cs.new Element(245,IRepository.SOLUTIONS,PROPERTY_FIRSTFORMID.getPropertyName(),IRepository.ELEMENTS);
    cs.new Element(246,IRepository.SOLUTIONS,PROPERTY_ONOPENMETHODID.getPropertyName(),IRepository.ELEMENTS);
    cs.new Element(247,IRepository.SOLUTIONS,PROPERTY_ONCLOSEMETHODID.getPropertyName(),IRepository.ELEMENTS);
  }
  if (old_repository_version < 20) {
    cs.new Element(249,IRepository.PORTALS,PROPERTY_ROWBGCOLORCALCULATION.getPropertyName(),IRepository.STRING);
    cs.new Element(250,IRepository.FORMS,PROPERTY_ROWBGCOLORCALCULATION.getPropertyName(),IRepository.STRING);
    cs.new Element(251,IRepository.GRAPHICALCOMPONENTS,PROPERTY_STYLECLASS.getPropertyName(),IRepository.STRING);
    cs.new Element(252,IRepository.TABPANELS,PROPERTY_STYLECLASS.getPropertyName(),IRepository.STRING);
    cs.new Element(253,IRepository.PORTALS,PROPERTY_STYLECLASS.getPropertyName(),IRepository.STRING);
    cs.new Element(254,IRepository.FIELDS,PROPERTY_STYLECLASS.getPropertyName(),IRepository.STRING);
    cs.new Element(255,IRepository.SOLUTIONS,PROPERTY_I18NTABLENAME.getPropertyName(),IRepository.TABLES).flagAsDeprecated();
    cs.new Element(256,IRepository.SOLUTIONS,PROPERTY_I18NSERVERNAME.getPropertyName(),IRepository.SERVERS).flagAsDeprecated();
    cs.new Element(257,IRepository.BEANS,PROPERTY_ANCHORS.getPropertyName(),IRepository.INTEGER);
    cs.new Element(258,IRepository.TABPANELS,PROPERTY_SCROLLTABS.getPropertyName(),IRepository.BOOLEAN);
    cs.new Element(259,IRepository.GRAPHICALCOMPONENTS,PROPERTY_SHOWCLICK.getPropertyName(),IRepository.BOOLEAN,Boolean.TRUE);
    cs.new Element(260,IRepository.GRAPHICALCOMPONENTS,PROPERTY_SHOWFOCUS.getPropertyName(),IRepository.BOOLEAN,Boolean.TRUE);
  }
  if (old_repository_version < 22) {
    cs.new Element(261,IRepository.FORMS,PROPERTY_STYLECLASS.getPropertyName(),IRepository.STRING);
  }
  if (old_repository_version < 24) {
    cs.new Element(262,IRepository.FORMS,PROPERTY_ONPREVIOUSRECORDCMDMETHODID.getPropertyName(),IRepository.ELEMENTS);
    cs.new Element(263,IRepository.FORMS,PROPERTY_ONNEXTRECORDCMDMETHODID.getPropertyName(),IRepository.ELEMENTS);
    cs.new Element(264,IRepository.SOLUTIONS,PROPERTY_MODULESNAMES.getPropertyName(),IRepository.STRING);
  }
  if (old_repository_version < 25) {
    cs.new Element(265,IRepository.FORMS,PROPERTY_ONSEARCHCMDMETHODID.getPropertyName(),IRepository.ELEMENTS);
    cs.new Element(266,IRepository.RELATIONS,PROPERTY_DUPLICATERELATEDRECORDS.getPropertyName(),IRepository.BOOLEAN);
    cs.new Element(267,IRepository.RELATIONS,PROPERTY_INITIALSORT.getPropertyName(),IRepository.STRING);
    cs.new Element(268,IRepository.VALUELISTS,PROPERTY_USETABLEFILTER.getPropertyName(),IRepository.BOOLEAN);
  }
  if (old_repository_version < 27) {
    cs.new Element(269,IRepository.SOLUTIONS,PROPERTY_ONERRORMETHODID.getPropertyName(),IRepository.ELEMENTS);
    cs.new Element(270,IRepository.SOLUTIONS,PROPERTY_LOGINFORMID.getPropertyName(),IRepository.ELEMENTS);
    cs.new Element(271,IRepository.PARTS,PROPERTY_SINKWHENLAST.getPropertyName(),IRepository.BOOLEAN);
    cs.new Element(272,IRepository.BEANS,PROPERTY_ONACTIONMETHODID.getPropertyName(),IRepository.ELEMENTS);
    cs.new Element(273,IRepository.BEANS,PROPERTY_PARAMETERS.getPropertyName(),IRepository.STRING);
  }
  if (old_repository_version < 28) {
    cs.new Element(275,IRepository.SOLUTIONS,PROPERTY_MUSTAUTHENTICATE.getPropertyName(),IRepository.BOOLEAN).flagAsMetaData();
    cs.new Element(276,IRepository.MEDIA,PROPERTY_NAME.getPropertyName(),IRepository.STRING);
    cs.new Element(277,IRepository.MEDIA,PROPERTY_BLOBID.getPropertyName(),IRepository.BLOBS);
    cs.new Element(278,IRepository.MEDIA,PROPERTY_MIMETYPE.getPropertyName(),IRepository.STRING);
    cs.new Element(279,IRepository.SOLUTIONS,PROPERTY_SOLUTIONTYPE.getPropertyName(),IRepository.INTEGER).flagAsMetaData();
    cs.new Element(280,IRepository.STYLES,PROPERTY_CSSTEXT.getPropertyName(),IRepository.STRING);
    cs.new Element(PROTECTION_PASSWORD,IRepository.SOLUTIONS,PROPERTY_PROTECTIONPASSWORD.getPropertyName(),IRepository.STRING).flagAsMetaData();
  }
  if (old_repository_version < 29) {
    cs.new Element(282,IRepository.FORMS,PROPERTY_ALIASES.getPropertyName(),IRepository.STRING);
    cs.new Element(283,IRepository.TABPANELS,PROPERTY_CLOSEONTABS.getPropertyName(),IRepository.BOOLEAN);
    cs.new Element(284,IRepository.RELATIONS,PROPERTY_ALLOWPARENTDELETEWHENHAVINGRELATEDRECORDS.getPropertyName(),IRepository.BOOLEAN,Boolean.TRUE);
    cs.new Element(285,IRepository.TABLENODES,PROPERTY_ONINSERTMETHODID.getPropertyName(),IRepository.ELEMENTS);
    cs.new Element(286,IRepository.TABLENODES,PROPERTY_ONUPDATEMETHODID.getPropertyName(),IRepository.ELEMENTS);
    cs.new Element(287,IRepository.TABLENODES,PROPERTY_ONDELETEMETHODID.getPropertyName(),IRepository.ELEMENTS);
    cs.new Element(288,IRepository.GRAPHICALCOMPONENTS,PROPERTY_LABELFOR.getPropertyName(),IRepository.STRING);
    cs.new Element(289,IRepository.GRAPHICALCOMPONENTS,PROPERTY_MNEMONIC.getPropertyName(),IRepository.STRING);
    cs.new Element(290,IRepository.TABPANELS,PROPERTY_ONTABCHANGEMETHODID.getPropertyName(),IRepository.ELEMENTS).flagAsDeprecated(377);
    cs.new Element(291,IRepository.TABS,PROPERTY_USENEWFORMINSTANCE.getPropertyName(),IRepository.BOOLEAN);
    cs.new Element(292,IRepository.RELATIONS,PROPERTY_JOINTYPE.getPropertyName(),IRepository.INTEGER);
  }
  if (old_repository_version < 30) {
    cs.new Element(293,IRepository.SOLUTIONS,PROPERTY_TEXTORIENTATION.getPropertyName(),IRepository.INTEGER);
  }
  if (old_repository_version < 31) {
    cs.new Element(294,IRepository.FORMS,PROPERTY_TRANSPARENT.getPropertyName(),IRepository.BOOLEAN);
    cs.new Element(295,IRepository.FORMS,PROPERTY_EXTENDSFORMID.getPropertyName(),IRepository.ELEMENTS).flagAsDeprecated(379);
    cs.new Element(296,IRepository.GRAPHICALCOMPONENTS,PROPERTY_ONDOUBLECLICKMETHODID.getPropertyName(),IRepository.ELEMENTS);
    cs.new Element(297,IRepository.GRAPHICALCOMPONENTS,PROPERTY_ONRIGHTCLICKMETHODID.getPropertyName(),IRepository.ELEMENTS);
  }
  if (old_repository_version < 32) {
    cs.new Element(298,IRepository.FORMS,PROPERTY_ONUNLOADMETHODID.getPropertyName(),IRepository.ELEMENTS);
  }
  if (old_repository_version < 35) {
    cs.new Element(299,IRepository.BEANS,PROPERTY_TABSEQ.getPropertyName(),IRepository.INTEGER);
    cs.new Element(300,IRepository.PORTALS,PROPERTY_TABSEQ.getPropertyName(),IRepository.INTEGER);
    cs.new Element(301,IRepository.TABPANELS,PROPERTY_TABSEQ.getPropertyName(),IRepository.INTEGER);
  }
  if (old_repository_version < 36) {
    cs.new Element(302,IRepository.FORMS,PROPERTY_ONDRAGMETHODID.getPropertyName(),IRepository.ELEMENTS);
    cs.new Element(303,IRepository.FORMS,PROPERTY_ONDRAGOVERMETHODID.getPropertyName(),IRepository.ELEMENTS);
    cs.new Element(304,IRepository.FORMS,PROPERTY_ONDROPMETHODID.getPropertyName(),IRepository.ELEMENTS);
    cs.new Element(305,IRepository.FORMS,PROPERTY_ONELEMENTFOCUSGAINEDMETHODID.getPropertyName(),IRepository.ELEMENTS);
    cs.new Element(306,IRepository.SOLUTIONS,PROPERTY_ONDATABROADCASTMETHODID.getPropertyName(),IRepository.ELEMENTS);
    cs.new Element(307,IRepository.TABLENODES,PROPERTY_ONAFTERINSERTMETHODID.getPropertyName(),IRepository.ELEMENTS);
    cs.new Element(308,IRepository.TABLENODES,PROPERTY_ONAFTERUPDATEMETHODID.getPropertyName(),IRepository.ELEMENTS);
    cs.new Element(309,IRepository.TABLENODES,PROPERTY_ONAFTERDELETEMETHODID.getPropertyName(),IRepository.ELEMENTS);
    cs.new Element(310,IRepository.FIELDS,PROPERTY_ONRIGHTCLICKMETHODID.getPropertyName(),IRepository.ELEMENTS);
    cs.new Element(311,IRepository.METHODS,PROPERTY_LINENUMBEROFFSET.getPropertyName(),IRepository.INTEGER);
    cs.new Element(312,IRepository.METHODS,PROPERTY_DECLARATION.getPropertyName(),IRepository.STRING);
    cs.new Element(313,IRepository.FORMS,PROPERTY_NAMEDFOUNDSET.getPropertyName(),IRepository.STRING);
    cs.new Element(314,IRepository.FORMS,PROPERTY_DATASOURCE.getPropertyName(),IRepository.DATASOURCES);
    cs.new Element(315,IRepository.RELATIONS,PROPERTY_PRIMARYDATASOURCE.getPropertyName(),IRepository.DATASOURCES);
    cs.new Element(316,IRepository.RELATIONS,PROPERTY_FOREIGNDATASOURCE.getPropertyName(),IRepository.DATASOURCES);
    cs.new Element(317,IRepository.VALUELISTS,PROPERTY_DATASOURCE.getPropertyName(),IRepository.DATASOURCES);
    cs.new Element(318,IRepository.SOLUTIONS,PROPERTY_I18NDATASOURCE.getPropertyName(),IRepository.DATASOURCES);
    cs.new Element(319,IRepository.TABLENODES,PROPERTY_DATASOURCE.getPropertyName(),IRepository.DATASOURCES);
    cs.new Element(320,IRepository.FORMS,PROPERTY_CUSTOMPROPERTIES.getPropertyName(),IRepository.STRING);
    cs.new Element(321,IRepository.BEANS,PROPERTY_CUSTOMPROPERTIES.getPropertyName(),IRepository.STRING);
    cs.new Element(322,IRepository.PORTALS,PROPERTY_CUSTOMPROPERTIES.getPropertyName(),IRepository.STRING);
    cs.new Element(323,IRepository.TABPANELS,PROPERTY_CUSTOMPROPERTIES.getPropertyName(),IRepository.STRING);
    cs.new Element(324,IRepository.TABS,PROPERTY_CUSTOMPROPERTIES.getPropertyName(),IRepository.STRING);
    cs.new Element(325,IRepository.GRAPHICALCOMPONENTS,PROPERTY_CUSTOMPROPERTIES.getPropertyName(),IRepository.STRING);
    cs.new Element(326,IRepository.RELATIONS,PROPERTY_CUSTOMPROPERTIES.getPropertyName(),IRepository.STRING);
    cs.new Element(327,IRepository.SHAPES,PROPERTY_CUSTOMPROPERTIES.getPropertyName(),IRepository.STRING);
    cs.new Element(328,IRepository.RECTSHAPES,PROPERTY_CUSTOMPROPERTIES.getPropertyName(),IRepository.STRING);
    cs.new Element(329,IRepository.VALUELISTS,PROPERTY_CUSTOMPROPERTIES.getPropertyName(),IRepository.STRING);
    cs.new Element(330,IRepository.LINES,PROPERTY_CUSTOMPROPERTIES.getPropertyName(),IRepository.STRING);
    cs.new Element(331,IRepository.PARTS,PROPERTY_CUSTOMPROPERTIES.getPropertyName(),IRepository.STRING);
    cs.new Element(332,IRepository.METHODS,PROPERTY_CUSTOMPROPERTIES.getPropertyName(),IRepository.STRING);
    cs.new Element(333,IRepository.SCRIPTVARIABLES,PROPERTY_CUSTOMPROPERTIES.getPropertyName(),IRepository.STRING);
    cs.new Element(334,IRepository.SCRIPTCALCULATIONS,PROPERTY_CUSTOMPROPERTIES.getPropertyName(),IRepository.STRING);
    cs.new Element(335,IRepository.TABLENODES,PROPERTY_CUSTOMPROPERTIES.getPropertyName(),IRepository.STRING);
    cs.new Element(336,IRepository.AGGREGATEVARIABLES,PROPERTY_CUSTOMPROPERTIES.getPropertyName(),IRepository.STRING);
    cs.new Element(337,IRepository.SOLUTIONS,PROPERTY_CUSTOMPROPERTIES.getPropertyName(),IRepository.STRING);
    cs.new Element(338,IRepository.STYLES,PROPERTY_CUSTOMPROPERTIES.getPropertyName(),IRepository.STRING);
    cs.new Element(339,IRepository.MEDIA,PROPERTY_CUSTOMPROPERTIES.getPropertyName(),IRepository.STRING);
    cs.new Element(340,IRepository.FIELDS,PROPERTY_CUSTOMPROPERTIES.getPropertyName(),IRepository.STRING);
    cs.new Element(341,IRepository.RELATION_ITEMS,PROPERTY_CUSTOMPROPERTIES.getPropertyName(),IRepository.STRING);
    cs.new Element(342,IRepository.PORTALS,PROPERTY_ONDRAGMETHODID.getPropertyName(),IRepository.ELEMENTS);
    cs.new Element(343,IRepository.PORTALS,PROPERTY_ONDRAGOVERMETHODID.getPropertyName(),IRepository.ELEMENTS);
    cs.new Element(344,IRepository.PORTALS,PROPERTY_ONDROPMETHODID.getPropertyName(),IRepository.ELEMENTS);
    cs.new Element(345,IRepository.FORMS,PROPERTY_ONELEMENTFOCUSLOSTMETHODID.getPropertyName(),IRepository.ELEMENTS);
    cs.new Element(346,IRepository.SCRIPTCALCULATIONS,PROPERTY_DECLARATION.getPropertyName(),IRepository.STRING);
    cs.new Element(347,IRepository.SCRIPTCALCULATIONS,PROPERTY_LINENUMBEROFFSET.getPropertyName(),IRepository.INTEGER);
  }
  if (old_repository_version < 37) {
    cs.new Element(348,IRepository.VALUELISTS,PROPERTY_FALLBACKVALUELISTID.getPropertyName(),IRepository.ELEMENTS);
    cs.new Element(349,IRepository.SOLUTIONS,PROPERTY_ONINITMETHODID.getPropertyName(),IRepository.ELEMENTS);
    cs.new Element(350,IRepository.FORMS,PROPERTY_ONRESIZEMETHODID.getPropertyName(),IRepository.ELEMENTS);
    cs.new Element(351,IRepository.TEMPLATES,PROPERTY_RESOURCETYPE.getPropertyName(),IRepository.INTEGER);
    cs.new Element(352,IRepository.TEMPLATES,PROPERTY_CONTENT.getPropertyName(),IRepository.STRING);
    cs.new Element(353,IRepository.TEMPLATES,PROPERTY_CUSTOMPROPERTIES.getPropertyName(),IRepository.STRING);
  }
  if (old_repository_version < 39) {
    cs.new Element(354,IRepository.FORMS,PROPERTY_ONDRAGENDMETHODID.getPropertyName(),IRepository.ELEMENTS);
    cs.new Element(355,IRepository.PORTALS,PROPERTY_ONDRAGENDMETHODID.getPropertyName(),IRepository.ELEMENTS);
    cs.new Element(356,IRepository.FORMS,PROPERTY_ENCAPSULATION.getPropertyName(),IRepository.INTEGER);
    cs.new Element(357,IRepository.SCRIPTVARIABLES,PROPERTY_COMMENT.getPropertyName(),IRepository.STRING);
    cs.new Element(358,IRepository.FORMS,PROPERTY_ONRENDERMETHODID.getPropertyName(),IRepository.ELEMENTS);
    cs.new Element(359,IRepository.PORTALS,PROPERTY_ONRENDERMETHODID.getPropertyName(),IRepository.ELEMENTS);
    cs.new Element(360,IRepository.FIELDS,PROPERTY_ONRENDERMETHODID.getPropertyName(),IRepository.ELEMENTS);
    cs.new Element(361,IRepository.GRAPHICALCOMPONENTS,PROPERTY_ONRENDERMETHODID.getPropertyName(),IRepository.ELEMENTS);
    cs.new Element(362,IRepository.BEANS,PROPERTY_VISIBLE.getPropertyName(),IRepository.BOOLEAN,Boolean.TRUE);
    cs.new Element(363,IRepository.PORTALS,PROPERTY_VISIBLE.getPropertyName(),IRepository.BOOLEAN,Boolean.TRUE);
    cs.new Element(364,IRepository.TABPANELS,PROPERTY_VISIBLE.getPropertyName(),IRepository.BOOLEAN,Boolean.TRUE);
    cs.new Element(365,IRepository.GRAPHICALCOMPONENTS,PROPERTY_VISIBLE.getPropertyName(),IRepository.BOOLEAN,Boolean.TRUE);
    cs.new Element(366,IRepository.SHAPES,PROPERTY_VISIBLE.getPropertyName(),IRepository.BOOLEAN,Boolean.TRUE);
    cs.new Element(367,IRepository.RECTSHAPES,PROPERTY_VISIBLE.getPropertyName(),IRepository.BOOLEAN,Boolean.TRUE);
    cs.new Element(368,IRepository.FIELDS,PROPERTY_VISIBLE.getPropertyName(),IRepository.BOOLEAN,Boolean.TRUE);
    cs.new Element(369,IRepository.BEANS,PROPERTY_ENABLED.getPropertyName(),IRepository.BOOLEAN,Boolean.TRUE);
    cs.new Element(370,IRepository.PORTALS,PROPERTY_ENABLED.getPropertyName(),IRepository.BOOLEAN,Boolean.TRUE);
    cs.new Element(371,IRepository.TABPANELS,PROPERTY_ENABLED.getPropertyName(),IRepository.BOOLEAN,Boolean.TRUE);
    cs.new Element(372,IRepository.GRAPHICALCOMPONENTS,PROPERTY_ENABLED.getPropertyName(),IRepository.BOOLEAN,Boolean.TRUE);
    cs.new Element(373,IRepository.SHAPES,PROPERTY_ENABLED.getPropertyName(),IRepository.BOOLEAN,Boolean.TRUE);
    cs.new Element(374,IRepository.RECTSHAPES,PROPERTY_ENABLED.getPropertyName(),IRepository.BOOLEAN,Boolean.TRUE);
    cs.new Element(375,IRepository.FIELDS,PROPERTY_ENABLED.getPropertyName(),IRepository.BOOLEAN,Boolean.TRUE);
    cs.new Element(376,IRepository.PORTALS,PROPERTY_RESIZABLE.getPropertyName(),IRepository.BOOLEAN);
    cs.new Element(377,IRepository.TABPANELS,PROPERTY_ONCHANGEMETHODID.getPropertyName(),IRepository.ELEMENTS);
  }
  if (old_repository_version < 40) {
    cs.new Element(378,IRepository.SHAPES,PROPERTY_ANCHORS.getPropertyName(),IRepository.INTEGER);
    cs.new Element(379,IRepository.FORMS,PROPERTY_EXTENDSID.getPropertyName(),IRepository.ELEMENTS);
    cs.new Element(380,IRepository.BEANS,PROPERTY_EXTENDSID.getPropertyName(),IRepository.ELEMENTS);
    cs.new Element(381,IRepository.FIELDS,PROPERTY_EXTENDSID.getPropertyName(),IRepository.ELEMENTS);
    cs.new Element(382,IRepository.GRAPHICALCOMPONENTS,PROPERTY_EXTENDSID.getPropertyName(),IRepository.ELEMENTS);
    cs.new Element(383,IRepository.PARTS,PROPERTY_EXTENDSID.getPropertyName(),IRepository.ELEMENTS);
    cs.new Element(384,IRepository.PORTALS,PROPERTY_EXTENDSID.getPropertyName(),IRepository.ELEMENTS);
    cs.new Element(385,IRepository.TABS,PROPERTY_EXTENDSID.getPropertyName(),IRepository.ELEMENTS);
    cs.new Element(386,IRepository.TABPANELS,PROPERTY_EXTENDSID.getPropertyName(),IRepository.ELEMENTS);
    cs.new Element(387,IRepository.RECTSHAPES,PROPERTY_EXTENDSID.getPropertyName(),IRepository.ELEMENTS);
    cs.new Element(388,IRepository.SHAPES,PROPERTY_EXTENDSID.getPropertyName(),IRepository.ELEMENTS);
  }
  return cs;
}",0.999930159469212
143737,"public Enumeration<Applet> getApplets(){
  return ((Hashtable<String,Applet>)applets).elements();
}","public Enumeration<Applet> getApplets(){
  return Collections.enumeration(applets.values());
}",0.7357512953367875
143738,"/** 
 * @param functionName
 * @param l
 * @param args
 * @param sourceName
 * @param parentSourceCall 
 * @param innerFunction 
 * @param lineNumbers 
 * @param dataCallProfileDatas 
 */
public ProfileData(String functionName,long time,Object[] args,String sourceName,String parentSourceCall,boolean innerFunction,int[] lineNumbers,List<DataCallProfileData> dataCallProfileDatas){
  this.parentSourceCall=parentSourceCall;
  this.innerFunction=innerFunction;
  this.lineNumbers=lineNumbers;
  this.dataCallProfileDatas=dataCallProfileDatas;
  if (this.lineNumbers != null) {
    Arrays.sort(this.lineNumbers);
  }
  if (functionName.endsWith(""String_Node_Str"") && sourceName.endsWith(""String_Node_Str"")) {
    this.functionName=functionName.substring(0,functionName.length() - 1);
    this.isCalculation=true;
  }
 else {
    this.functionName=functionName;
    this.isCalculation=false;
  }
  this.time=time;
  this.args=args;
  this.sourceName=sourceName;
  for (int i=0; i < args.length; i++) {
    if (args[i] instanceof Wrapper) {
      args[i]=((Wrapper)args[i]).unwrap();
    }
    if (args[i] instanceof JSEvent) {
      JSEvent event=(JSEvent)args[i];
      StringBuilder sb=new StringBuilder();
      sb.append(""String_Node_Str"");
      boolean added=false;
      if (event.js_getType() != null) {
        sb.append(""String_Node_Str"");
        sb.append(event.js_getType());
        added=true;
      }
      if (event.js_getFormName() != null) {
        if (added)         sb.append(""String_Node_Str"");
        sb.append(""String_Node_Str"");
        sb.append(event.js_getFormName());
        added=true;
      }
      if (event.js_getElementName() != null) {
        if (added)         sb.append(""String_Node_Str"");
        sb.append(""String_Node_Str"");
        sb.append(event.js_getElementName());
        added=true;
      }
      if (event.js_getModifiers() != 0) {
        if (added)         sb.append(""String_Node_Str"");
        sb.append(""String_Node_Str"");
        sb.append(event.js_getModifiers());
        added=true;
      }
      if (event.js_getX() != 0) {
        if (added)         sb.append(""String_Node_Str"");
        sb.append(""String_Node_Str"");
        sb.append(event.js_getX());
        added=true;
      }
      if (event.js_getY() != 0) {
        if (added)         sb.append(""String_Node_Str"");
        sb.append(""String_Node_Str"");
        sb.append(event.js_getY());
        added=true;
      }
      sb.append(""String_Node_Str"");
      args[i]=sb.toString();
    }
  }
}","/** 
 * @param functionName
 * @param l
 * @param args
 * @param sourceName
 * @param parentSourceCall 
 * @param innerFunction 
 * @param lineNumbers 
 * @param dataCallProfileDatas 
 */
public ProfileData(String functionName,long time,Object[] args,String sourceName,String parentSourceCall,boolean innerFunction,int[] lineNumbers,List<DataCallProfileData> dataCallProfileDatas){
  this.parentSourceCall=parentSourceCall;
  this.innerFunction=innerFunction;
  this.lineNumbers=lineNumbers;
  this.dataCallProfileDatas=dataCallProfileDatas;
  if (this.lineNumbers != null) {
    Arrays.sort(this.lineNumbers);
  }
  if (functionName != null && functionName.endsWith(""String_Node_Str"") && sourceName.endsWith(""String_Node_Str"")) {
    this.functionName=functionName.substring(0,functionName.length() - 1);
    this.isCalculation=true;
  }
 else {
    this.functionName=functionName == null ? ""String_Node_Str"" : functionName;
    this.isCalculation=false;
  }
  this.time=time;
  this.args=args;
  this.sourceName=sourceName;
  for (int i=0; i < args.length; i++) {
    if (args[i] instanceof Wrapper) {
      args[i]=((Wrapper)args[i]).unwrap();
    }
    if (args[i] instanceof JSEvent) {
      JSEvent event=(JSEvent)args[i];
      StringBuilder sb=new StringBuilder();
      sb.append(""String_Node_Str"");
      boolean added=false;
      if (event.js_getType() != null) {
        sb.append(""String_Node_Str"");
        sb.append(event.js_getType());
        added=true;
      }
      if (event.js_getFormName() != null) {
        if (added)         sb.append(""String_Node_Str"");
        sb.append(""String_Node_Str"");
        sb.append(event.js_getFormName());
        added=true;
      }
      if (event.js_getElementName() != null) {
        if (added)         sb.append(""String_Node_Str"");
        sb.append(""String_Node_Str"");
        sb.append(event.js_getElementName());
        added=true;
      }
      if (event.js_getModifiers() != 0) {
        if (added)         sb.append(""String_Node_Str"");
        sb.append(""String_Node_Str"");
        sb.append(event.js_getModifiers());
        added=true;
      }
      if (event.js_getX() != 0) {
        if (added)         sb.append(""String_Node_Str"");
        sb.append(""String_Node_Str"");
        sb.append(event.js_getX());
        added=true;
      }
      if (event.js_getY() != 0) {
        if (added)         sb.append(""String_Node_Str"");
        sb.append(""String_Node_Str"");
        sb.append(event.js_getY());
        added=true;
      }
      sb.append(""String_Node_Str"");
      args[i]=sb.toString();
    }
  }
}",0.9758302220475537
143739,"public FormController showFormInMainPanel(final String formName,final IMainContainer container,final String title,final boolean closeAll,final String dialogName){
  if (loginForm != null && loginForm.getName() != formName) {
    return null;
  }
  if (formName == null)   throw new IllegalArgumentException(application.getI18NMessage(""String_Node_Str""));
  FormController currentMainShowingForm=null;
  if (currentContainer != null) {
    currentMainShowingForm=container.getController();
  }
  boolean containerSwitch=container != currentContainer;
  if (currentMainShowingForm != null && formName.equals(currentMainShowingForm.getName()) && !containerSwitch && !design)   return leaseFormPanel(currentMainShowingForm.getName());
  final Form f=possibleForms.get(formName);
  if (f == null) {
    return null;
  }
  try {
    int access=application.getFlattenedSolution().getSecurityAccess(f.getUUID());
    if (access != -1) {
      boolean b_visible=((access & IRepository.VIEWABLE) != 0);
      if (!b_visible) {
        application.invokeLater(new Runnable(){
          public void run(){
            application.reportWarningInStatus(application.getI18NMessage(""String_Node_Str""));
          }
        }
);
        return null;
      }
    }
    if (currentMainShowingForm != null) {
      if (!containerSwitch && application.getModeManager().getMode() != IModeManager.EDIT_MODE) {
        application.getModeManager().setMode(IModeManager.EDIT_MODE);
      }
      FormController fp=leaseFormPanel(currentMainShowingForm.getName());
      if (fp != null && !containerSwitch) {
        List<Runnable> invokeLaterRunnables=new ArrayList<Runnable>();
        boolean ok=fp.notifyVisible(false,invokeLaterRunnables);
        Utils.invokeLater(application,invokeLaterRunnables);
        if (application.getSolution() == null)         return null;
        if (!ok) {
          selectFormMenuItem(currentMainShowingForm.getForm());
          return fp;
        }
      }
    }
    FormController tmpForm=currentMainShowingForm;
    final FormController fp=leaseFormPanel(formName);
    currentMainShowingForm=fp;
    currentContainer=container;
    if (fp != null) {
      if (application.getCmdManager() instanceof ICmdManagerInternal) {
        ((ICmdManagerInternal)application.getCmdManager()).setCurrentUndoManager(fp.getUndoManager());
      }
      boolean isNewUser=checkAndUpdateFormUser(fp,container);
      if (isNewUser) {
        container.add(fp.getFormUI(),formName);
      }
      currentContainer.setFormController(fp);
      SolutionScope ss=application.getScriptEngine().getSolutionScope();
      ss.put(""String_Node_Str"",ss,fp.initForJSUsage());
      fp.setView(fp.getView());
      fp.executeOnLoadMethod();
      if (application.getSolution() == null)       return null;
      fillScriptMenu();
      if (!container.isVisible() && !closeAll) {
        ((FormManager)application.getFormManager()).getHistory(currentContainer).clear(100);
      }
      getHistory(currentContainer).add(fp.getName());
      selectFormMenuItem(f);
      List<Runnable> invokeLaterRunnables=new ArrayList<Runnable>();
      fp.notifyVisible(true,invokeLaterRunnables);
      enableCmds(true);
      final IMainContainer cachedContainer=currentContainer;
      Runnable title_focus=new Runnable(){
        public void run(){
          FormController fc=cachedContainer.getController();
          if (fc != null && fc == fp) {
            String titleText=title;
            if (titleText == null)             titleText=f.getTitleText();
            if (titleText == null || titleText.equals(""String_Node_Str""))             titleText=fc.getName();
            if (NO_TITLE_TEXT.equals(titleText))             titleText=""String_Node_Str"";
            cachedContainer.setTitle(titleText);
            cachedContainer.requestFocus();
          }
        }
      }
;
      if (isNewUser) {
        final IMainContainer showContainer=currentContainer;
        currentContainer.showBlankPanel();
        invokeLaterRunnables.add(new Runnable(){
          public void run(){
            FormController currentController=showContainer.getController();
            if (currentController != null && fp.getName().equals(currentController.getName())) {
              showContainer.show(fp.getName());
              application.getJSWindowManager().setCurrentWindowName(dialogName);
            }
          }
        }
);
      }
 else {
        currentContainer.show(fp.getName());
        application.getJSWindowManager().setCurrentWindowName(dialogName);
      }
      invokeLaterRunnables.add(title_focus);
      Utils.invokeLater(application,invokeLaterRunnables);
    }
 else {
      currentContainer.setFormController(null);
    }
    J2DBGlobals.firePropertyChange(this,""String_Node_Str"",tmpForm,currentMainShowingForm);
    return fp;
  }
 catch (  Exception e) {
    Debug.error(e);
  }
  return null;
}","public FormController showFormInMainPanel(final String formName,final IMainContainer container,final String title,final boolean closeAll,final String dialogName){
  if (loginForm != null && loginForm.getName() != formName) {
    return null;
  }
  if (formName == null)   throw new IllegalArgumentException(application.getI18NMessage(""String_Node_Str""));
  FormController currentMainShowingForm=null;
  if (currentContainer != null) {
    currentMainShowingForm=container.getController();
  }
  boolean containerSwitch=container != currentContainer;
  if (currentMainShowingForm != null && formName.equals(currentMainShowingForm.getName()) && !containerSwitch && !design)   return leaseFormPanel(currentMainShowingForm.getName());
  final Form f=possibleForms.get(formName);
  if (f == null) {
    return null;
  }
  try {
    int access=application.getFlattenedSolution().getSecurityAccess(f.getUUID());
    if (access != -1) {
      boolean b_visible=((access & IRepository.VIEWABLE) != 0);
      if (!b_visible) {
        application.invokeLater(new Runnable(){
          public void run(){
            application.reportWarningInStatus(application.getI18NMessage(""String_Node_Str""));
          }
        }
);
        return null;
      }
    }
    if (currentMainShowingForm != null) {
      if (!containerSwitch && application.getModeManager().getMode() != IModeManager.EDIT_MODE) {
        application.getModeManager().setMode(IModeManager.EDIT_MODE);
      }
      FormController fp=leaseFormPanel(currentMainShowingForm.getName());
      if (fp != null && !containerSwitch) {
        List<Runnable> invokeLaterRunnables=new ArrayList<Runnable>();
        boolean ok=fp.notifyVisible(false,invokeLaterRunnables);
        Utils.invokeLater(application,invokeLaterRunnables);
        if (application.getSolution() == null)         return null;
        if (!ok) {
          selectFormMenuItem(currentMainShowingForm.getForm());
          return fp;
        }
      }
    }
    FormController tmpForm=currentMainShowingForm;
    final FormController fp=leaseFormPanel(formName);
    currentMainShowingForm=fp;
    currentContainer=container;
    if (fp != null) {
      if (application.getCmdManager() instanceof ICmdManagerInternal) {
        ((ICmdManagerInternal)application.getCmdManager()).setCurrentUndoManager(fp.getUndoManager());
      }
      boolean isNewUser=checkAndUpdateFormUser(fp,container);
      if (isNewUser) {
        container.add(fp.getFormUI(),formName);
      }
      currentContainer.setFormController(fp);
      SolutionScope ss=application.getScriptEngine().getSolutionScope();
      Context.enter();
      try {
        ss.put(""String_Node_Str"",ss,new NativeJavaObject(ss,fp.initForJSUsage(),new InstanceJavaMembers(ss,JSForm.class)));
      }
  finally {
        Context.exit();
      }
      fp.setView(fp.getView());
      fp.executeOnLoadMethod();
      if (application.getSolution() == null)       return null;
      fillScriptMenu();
      if (!container.isVisible() && !closeAll) {
        ((FormManager)application.getFormManager()).getHistory(currentContainer).clear(100);
      }
      getHistory(currentContainer).add(fp.getName());
      selectFormMenuItem(f);
      List<Runnable> invokeLaterRunnables=new ArrayList<Runnable>();
      fp.notifyVisible(true,invokeLaterRunnables);
      enableCmds(true);
      final IMainContainer cachedContainer=currentContainer;
      Runnable title_focus=new Runnable(){
        public void run(){
          FormController fc=cachedContainer.getController();
          if (fc != null && fc == fp) {
            String titleText=title;
            if (titleText == null)             titleText=f.getTitleText();
            if (titleText == null || titleText.equals(""String_Node_Str""))             titleText=fc.getName();
            if (NO_TITLE_TEXT.equals(titleText))             titleText=""String_Node_Str"";
            cachedContainer.setTitle(titleText);
            cachedContainer.requestFocus();
          }
        }
      }
;
      if (isNewUser) {
        final IMainContainer showContainer=currentContainer;
        currentContainer.showBlankPanel();
        invokeLaterRunnables.add(new Runnable(){
          public void run(){
            FormController currentController=showContainer.getController();
            if (currentController != null && fp.getName().equals(currentController.getName())) {
              showContainer.show(fp.getName());
              application.getJSWindowManager().setCurrentWindowName(dialogName);
            }
          }
        }
);
      }
 else {
        currentContainer.show(fp.getName());
        application.getJSWindowManager().setCurrentWindowName(dialogName);
      }
      invokeLaterRunnables.add(title_focus);
      Utils.invokeLater(application,invokeLaterRunnables);
    }
 else {
      currentContainer.setFormController(null);
    }
    J2DBGlobals.firePropertyChange(this,""String_Node_Str"",tmpForm,currentMainShowingForm);
    return fp;
  }
 catch (  Exception e) {
    Debug.error(e);
  }
  return null;
}",0.9840281265695632
143740,"protected static IComponent createBean(IApplication application,Form form,Bean bean,FlattenedSolution flattenedSolution){
  IComponent c=null;
  try {
    Object obj=getBeanInstanceFromXML(application,bean.getBeanClassName(),bean.getBeanXML());
    if (flattenedSolution != null && obj != null) {
      obj=flattenedSolution.setBeanDesignInstance(bean,obj);
    }
    if (obj instanceof Component) {
      ((Component)obj).setName(bean.getName());
    }
 else     if (obj instanceof IComponent) {
      ((IComponent)obj).setName(bean.getName());
    }
    if (obj instanceof IServoyAwareBean) {
      ((IServoyAwareBean)obj).initialize((IClientPluginAccess)application.getPluginAccess());
    }
    if (obj instanceof IServoyBeanFactory) {
      testReturnTypesForBean(application,obj);
      obj=((IServoyBeanFactory)obj).getBeanInstance(application.getApplicationType(),(IClientPluginAccess)application.getPluginAccess(),new Object[]{ComponentFactory.getWebID(form,bean),form.getName(),form.getStyleName()});
    }
    testReturnTypesForBean(application,obj);
    if (obj instanceof Applet) {
      ((FormManager)application.getFormManager()).initializeApplet((Applet)obj,bean.getSize());
    }
    if (obj == null) {
      c=application.getItemFactory().createLabel(ComponentFactory.getWebID(form,bean),""String_Node_Str"" + bean.getBeanClassName());
    }
 else     if (!(obj instanceof java.awt.Component) && !(obj instanceof IComponent)) {
      c=application.getItemFactory().createInvisibleBean(ComponentFactory.getWebID(form,bean),obj);
    }
 else     if (!(obj instanceof IComponent)) {
      c=application.getItemFactory().createBeanHolder(ComponentFactory.getWebID(form,bean),(Component)obj,bean.getAnchors());
    }
 else {
      c=(IComponent)obj;
    }
    applyBasicComponentProperties(application,c,bean,null);
  }
 catch (  Throwable e) {
    Debug.error(e);
    c=application.getItemFactory().createLabel(bean.getName(),""String_Node_Str"" + bean.getBeanClassName());
    java.awt.Dimension dim=bean.getSize();
    if (dim != null)     c.setSize(bean.getSize());
  }
  return c;
}","protected static IComponent createBean(IApplication application,Form form,Bean bean,FlattenedSolution flattenedSolution){
  IComponent c=null;
  try {
    Object obj=getBeanInstanceFromXML(application,bean.getBeanClassName(),bean.getBeanXML());
    if (flattenedSolution != null && obj != null) {
      obj=flattenedSolution.setBeanDesignInstance(bean,obj);
    }
    if (obj instanceof Component) {
      ((Component)obj).setName(bean.getName());
    }
 else     if (obj instanceof IComponent) {
      ((IComponent)obj).setName(bean.getName());
    }
    if (obj instanceof IServoyAwareBean) {
      ((IServoyAwareBean)obj).initialize((IClientPluginAccess)application.getPluginAccess());
    }
    if (obj instanceof IServoyBeanFactory) {
      testReturnTypesForBean(application,obj);
      obj=((IServoyBeanFactory)obj).getBeanInstance(application.getApplicationType(),(IClientPluginAccess)application.getPluginAccess(),new Object[]{ComponentFactory.getWebID(form,bean),form.getName(),form.getStyleName()});
    }
    testReturnTypesForBean(application,obj);
    if (obj instanceof Applet) {
      ((FormManager)application.getFormManager()).initializeApplet((Applet)obj,bean.getSize());
    }
    if (obj == null) {
      c=application.getItemFactory().createLabel(ComponentFactory.getWebID(form,bean),""String_Node_Str"" + bean.getBeanClassName());
    }
 else     if (!(obj instanceof java.awt.Component) && !(obj instanceof IComponent)) {
      c=application.getItemFactory().createInvisibleBean(ComponentFactory.getWebID(form,bean),obj);
    }
 else     if (!(obj instanceof IComponent)) {
      c=application.getItemFactory().createBeanHolder(ComponentFactory.getWebID(form,bean),(Component)obj,bean.getAnchors());
    }
 else {
      c=(IComponent)obj;
    }
    boolean isOpaque=c.isOpaque();
    applyBasicComponentProperties(application,c,bean,null);
    c.setOpaque(isOpaque);
  }
 catch (  Throwable e) {
    Debug.error(e);
    c=application.getItemFactory().createLabel(bean.getName(),""String_Node_Str"" + bean.getBeanClassName());
    java.awt.Dimension dim=bean.getSize();
    if (dim != null)     c.setSize(bean.getSize());
  }
  return c;
}",0.9854254818993888
143741,"/** 
 * @see com.servoy.j2db.dataprocessing.IDisplayRelatedData#setFoundSet(com.servoy.j2db.dataprocessing.IRecordInternal,com.servoy.j2db.dataprocessing.IFoundSetInternal,boolean)
 */
public void setRecord(IRecordInternal parentState,boolean stopEditing){
  if (this.parentState == parentState)   return;
  this.parentState=parentState;
  if (list instanceof LookupValueList || list instanceof GlobalMethodValueList) {
    int index=getDataProviderID().lastIndexOf('.');
    if (index == -1 || parentState == null) {
      list.fill(parentState);
    }
 else {
      IFoundSetInternal relatedFoundSet=parentState.getRelatedFoundSet(getDataProviderID().substring(0,index));
      if (relatedFoundSet == null || relatedFoundSet.getSize() == 0) {
        list.fill(null);
      }
 else {
        IRecordInternal relatedRecord=relatedFoundSet.getRecord(relatedFoundSet.getSelectedIndex());
        list.fill(relatedRecord);
      }
    }
  }
}","/** 
 * @see com.servoy.j2db.dataprocessing.IDisplayRelatedData#setFoundSet(com.servoy.j2db.dataprocessing.IRecordInternal,com.servoy.j2db.dataprocessing.IFoundSetInternal,boolean)
 */
public void setRecord(IRecordInternal parentState,boolean stopEditing){
  if (this.parentState == parentState)   return;
  this.parentState=parentState;
  if (list instanceof LookupValueList || list instanceof GlobalMethodValueList) {
    int index=-1;
    if (!getDataProviderID().startsWith(ScriptVariable.GLOBAL_DOT_PREFIX)) {
      index=getDataProviderID().lastIndexOf('.');
    }
    if (index == -1 || parentState == null) {
      list.fill(parentState);
    }
 else {
      IFoundSetInternal relatedFoundSet=parentState.getRelatedFoundSet(getDataProviderID().substring(0,index));
      if (relatedFoundSet == null || relatedFoundSet.getSize() == 0) {
        list.fill(null);
      }
 else {
        IRecordInternal relatedRecord=relatedFoundSet.getRecord(relatedFoundSet.getSelectedIndex());
        list.fill(relatedRecord);
      }
    }
  }
}",0.9499747347145022
143742,"/** 
 * @param firstTime
 * @param lookup
 * @throws RepositoryException
 * @throws RemoteException
 */
public void fill(IRecordInternal parentState,String dataProviderID,String filter,boolean firstTime) throws ServoyException {
  int prevSize=alReal.size();
  IRecordInternal realState=parentState;
  alReal.clear();
  alDisplay.clear();
  String txt=(filter == null || firstTime) ? ""String_Node_Str"" : filter.toLowerCase();
  int index=dataProviderID.lastIndexOf('.');
  if (index != -1 && realState != null) {
    IFoundSetInternal relatedFoundSet=realState.getRelatedFoundSet(dataProviderID.substring(0,index));
    if (relatedFoundSet != null && relatedFoundSet.getSize() != 0) {
      realState=relatedFoundSet.getRecord(relatedFoundSet.getSelectedIndex());
    }
  }
  if (lookup instanceof GlobalMethodValueList) {
    GlobalMethodValueList clist=(GlobalMethodValueList)lookup;
    clist.fill(realState,txt,null);
    for (int i=0; i < clist.getSize(); i++) {
      Object display=clist.getElementAt(i);
      if (display == null)       continue;
      alDisplay.add(display);
      alReal.add(clist.getRealElementAt(i));
    }
    hadMoreRows=true;
  }
 else   if (lookup instanceof CustomValueList) {
    CustomValueList clist=(CustomValueList)lookup;
    for (int i=0; i < clist.getSize(); i++) {
      Object display=clist.getElementAt(i);
      if (display == null)       continue;
      if (txt == ""String_Node_Str"" || display.toString().toLowerCase().startsWith(txt)) {
        alDisplay.add(display);
        alReal.add(clist.getRealElementAt(i));
      }
    }
  }
 else   if (lookup instanceof LookupValueList) {
    if (""String_Node_Str"".equals(txt) && lookup.getAllowEmptySelection()) {
      alReal.add(null);
      alDisplay.add(""String_Node_Str"");
    }
    if (((LookupValueList)lookup).getValueList().getDatabaseValuesType() == ValueList.TABLE_VALUES) {
      fillDBValueListValues(txt);
    }
 else {
      fillRelatedValueListValues(realState,txt);
    }
  }
 else {
    fillDBColumnValues(dataProviderID,txt);
  }
  fireChanges(prevSize);
}","/** 
 * @param firstTime
 * @param lookup
 * @throws RepositoryException
 * @throws RemoteException
 */
public void fill(IRecordInternal parentState,String dataProviderID,String filter,boolean firstTime) throws ServoyException {
  int prevSize=alReal.size();
  IRecordInternal realState=parentState;
  alReal.clear();
  alDisplay.clear();
  String txt=(filter == null || firstTime) ? ""String_Node_Str"" : filter.toLowerCase();
  if (dataProviderID != null && !dataProviderID.startsWith(ScriptVariable.GLOBAL_DOT_PREFIX)) {
    int index=dataProviderID.lastIndexOf('.');
    if (index != -1 && realState != null) {
      IFoundSetInternal relatedFoundSet=realState.getRelatedFoundSet(dataProviderID.substring(0,index));
      if (relatedFoundSet != null && relatedFoundSet.getSize() != 0) {
        realState=relatedFoundSet.getRecord(relatedFoundSet.getSelectedIndex());
      }
    }
  }
  if (lookup instanceof GlobalMethodValueList) {
    GlobalMethodValueList clist=(GlobalMethodValueList)lookup;
    clist.fill(realState,txt,null);
    for (int i=0; i < clist.getSize(); i++) {
      Object display=clist.getElementAt(i);
      if (display == null)       continue;
      alDisplay.add(display);
      alReal.add(clist.getRealElementAt(i));
    }
    hadMoreRows=true;
  }
 else   if (lookup instanceof CustomValueList) {
    CustomValueList clist=(CustomValueList)lookup;
    for (int i=0; i < clist.getSize(); i++) {
      Object display=clist.getElementAt(i);
      if (display == null)       continue;
      if (txt == ""String_Node_Str"" || display.toString().toLowerCase().startsWith(txt)) {
        alDisplay.add(display);
        alReal.add(clist.getRealElementAt(i));
      }
    }
  }
 else   if (lookup instanceof LookupValueList) {
    if (""String_Node_Str"".equals(txt) && lookup.getAllowEmptySelection()) {
      alReal.add(null);
      alDisplay.add(""String_Node_Str"");
    }
    if (((LookupValueList)lookup).getValueList().getDatabaseValuesType() == ValueList.TABLE_VALUES) {
      fillDBValueListValues(txt);
    }
 else {
      fillRelatedValueListValues(realState,txt);
    }
  }
 else {
    fillDBColumnValues(dataProviderID,txt);
  }
  fireChanges(prevSize);
}",0.9689411764705882
143743,"/** 
 * @param dataProviderID the dataProviderID to set
 */
public void setDataProviderID(String dataProviderID){
  int index=dataProviderID == null ? -1 : dataProviderID.lastIndexOf('.');
  if (index != -1) {
    this.relatedFoundsetLookup=dataProviderID.substring(0,index);
  }
 else {
    this.relatedFoundsetLookup=null;
  }
}","/** 
 * @param dataProviderID the dataProviderID to set
 */
public void setDataProviderID(String dataProviderID){
  int index=(dataProviderID == null || dataProviderID.startsWith(ScriptVariable.GLOBAL_DOT_PREFIX)) ? -1 : dataProviderID.lastIndexOf('.');
  if (index != -1) {
    this.relatedFoundsetLookup=dataProviderID.substring(0,index);
  }
 else {
    this.relatedFoundsetLookup=null;
  }
}",0.8496551724137931
143744,"public void dependencyChanged(IRecordInternal record){
  this.parentState=record;
  if (list instanceof LookupValueList || list instanceof GlobalMethodValueList) {
    Object o=getValue();
    int index=dataProviderID.lastIndexOf('.');
    if (index == -1 || parentState == null) {
      list.fill(parentState);
    }
 else {
      IFoundSetInternal relatedFoundSet=parentState.getRelatedFoundSet(dataProviderID.substring(0,index));
      if (relatedFoundSet == null || relatedFoundSet.getSize() == 0) {
        list.fill(null);
      }
 else {
        IRecordInternal relatedRecord=relatedFoundSet.getRecord(relatedFoundSet.getSelectedIndex());
        list.fill(relatedRecord);
      }
    }
    if (editProvider != null) {
      editProvider.setAdjusting(true);
    }
    try {
      setValue(null);
      setValue(o);
    }
  finally {
      if (editProvider != null) {
        editProvider.setAdjusting(false);
      }
    }
  }
}","public void dependencyChanged(IRecordInternal record){
  this.parentState=record;
  if (list instanceof LookupValueList || list instanceof GlobalMethodValueList) {
    Object o=getValue();
    int index=-1;
    if (!dataProviderID.startsWith(ScriptVariable.GLOBAL_DOT_PREFIX)) {
      index=dataProviderID.lastIndexOf('.');
    }
    if (index == -1 || parentState == null) {
      list.fill(parentState);
    }
 else {
      IFoundSetInternal relatedFoundSet=parentState.getRelatedFoundSet(dataProviderID.substring(0,index));
      if (relatedFoundSet == null || relatedFoundSet.getSize() == 0) {
        list.fill(null);
      }
 else {
        IRecordInternal relatedRecord=relatedFoundSet.getRecord(relatedFoundSet.getSelectedIndex());
        list.fill(relatedRecord);
      }
    }
    if (editProvider != null) {
      editProvider.setAdjusting(true);
    }
    try {
      setValue(null);
      setValue(o);
    }
  finally {
      if (editProvider != null) {
        editProvider.setAdjusting(false);
      }
    }
  }
}",0.9521384928716904
143745,"/** 
 * @param id
 */
public WebDataCalendar(IApplication application,String id){
  super(id);
  this.application=application;
  DatePicker settings=new DatePicker();
  field=new DateField(application,""String_Node_Str"",settings);
  boolean useAJAX=Utils.getAsBoolean(application.getRuntimeProperties().get(""String_Node_Str""));
  if (useAJAX) {
    final FeedSimpleDateFormatToChooserBehavior feedSimpleDateToJS;
    field.add(feedSimpleDateToJS=new FeedSimpleDateFormatToChooserBehavior());
    field.add(new DatePicker(){
      private static final long serialVersionUID=1L;
      @Override public void onRendered(      Component component){
        Response response=component.getResponse();
        response.write(""String_Node_Str"");
        response.write(""String_Node_Str"");
        response.write(getIconStyle());
        response.write(""String_Node_Str"");
        response.write(getIconId());
        response.write(""String_Node_Str"");
        CharSequence iconUrl=getIconUrl();
        response.write(Strings.escapeMarkup(iconUrl == null ? ""String_Node_Str"" : iconUrl.toString()));
        response.write(""String_Node_Str"" + WebDataCalendar.this.getMarkupId() + ""String_Node_Str""+ feedSimpleDateToJS.getCallbackUrl()+ ""String_Node_Str"");
        response.write(component.getMarkupId());
        response.write(""String_Node_Str"");
      }
      @Override public boolean isEnabled(      Component component){
        return isChooserEnabled();
      }
    }
);
  }
 else {
    field.add(new DatePicker(){
      private static final long serialVersionUID=1L;
      @Override public void onRendered(      Component component){
        Response response=component.getResponse();
        response.write(""String_Node_Str"");
        response.write(""String_Node_Str"");
        response.write(getIconStyle());
        response.write(""String_Node_Str"");
        response.write(getIconId());
        response.write(""String_Node_Str"");
        CharSequence iconUrl=getIconUrl();
        response.write(Strings.escapeMarkup(iconUrl == null ? ""String_Node_Str"" : iconUrl.toString()));
        response.write(""String_Node_Str"" + WebDataCalendar.this.getMarkupId() + ""String_Node_Str"");
        response.write(component.getMarkupId());
        response.write(""String_Node_Str"");
        String datePattern=getDatePattern().replaceAll(""String_Node_Str"",""String_Node_Str"").toLowerCase();
        datePattern=datePattern.replace('s','0');
        response.write(datePattern);
        if (datePattern.indexOf(""String_Node_Str"") == -1)         response.write(""String_Node_Str"" + component.getMarkupId() + ""String_Node_Str"");
 else         response.write(""String_Node_Str"");
        response.write(""String_Node_Str"");
      }
      @Override public boolean isEnabled(      Component component){
        return WebDataCalendar.this.isEnabled() && showPicker;
      }
    }
);
  }
  add(field);
  jsChangeRecorder=new ChangesRecorder(TemplateGenerator.DEFAULT_FIELD_BORDER_SIZE,TemplateGenerator.DEFAULT_FIELD_PADDING){
    @Override public boolean isChanged(){
      return super.isChanged() || field.getStylePropertyChanges().isChanged();
    }
    @Override public void setRendered(){
      super.setRendered();
      field.getStylePropertyChanges().setRendered();
    }
  }
;
  setOutputMarkupPlaceholderTag(true);
  add(StyleAttributeModifierModel.INSTANCE);
  add(TooltipAttributeModifier.INSTANCE);
}","/** 
 * @param id
 */
public WebDataCalendar(IApplication application,String id){
  super(id);
  this.application=application;
  DatePicker settings=new DatePicker();
  field=new DateField(application,""String_Node_Str"",settings);
  field.setIgnoreOnRender(true);
  boolean useAJAX=Utils.getAsBoolean(application.getRuntimeProperties().get(""String_Node_Str""));
  if (useAJAX) {
    final FeedSimpleDateFormatToChooserBehavior feedSimpleDateToJS;
    field.add(feedSimpleDateToJS=new FeedSimpleDateFormatToChooserBehavior());
    field.add(new DatePicker(){
      private static final long serialVersionUID=1L;
      @Override public void onRendered(      Component component){
        Response response=component.getResponse();
        response.write(""String_Node_Str"");
        response.write(""String_Node_Str"");
        response.write(getIconStyle());
        response.write(""String_Node_Str"");
        response.write(getIconId());
        response.write(""String_Node_Str"");
        CharSequence iconUrl=getIconUrl();
        response.write(Strings.escapeMarkup(iconUrl == null ? ""String_Node_Str"" : iconUrl.toString()));
        response.write(""String_Node_Str"" + WebDataCalendar.this.getMarkupId() + ""String_Node_Str""+ feedSimpleDateToJS.getCallbackUrl()+ ""String_Node_Str"");
        response.write(component.getMarkupId());
        response.write(""String_Node_Str"");
      }
      @Override public boolean isEnabled(      Component component){
        return isChooserEnabled();
      }
    }
);
  }
 else {
    field.add(new DatePicker(){
      private static final long serialVersionUID=1L;
      @Override public void onRendered(      Component component){
        Response response=component.getResponse();
        response.write(""String_Node_Str"");
        response.write(""String_Node_Str"");
        response.write(getIconStyle());
        response.write(""String_Node_Str"");
        response.write(getIconId());
        response.write(""String_Node_Str"");
        CharSequence iconUrl=getIconUrl();
        response.write(Strings.escapeMarkup(iconUrl == null ? ""String_Node_Str"" : iconUrl.toString()));
        response.write(""String_Node_Str"" + WebDataCalendar.this.getMarkupId() + ""String_Node_Str"");
        response.write(component.getMarkupId());
        response.write(""String_Node_Str"");
        String datePattern=getDatePattern().replaceAll(""String_Node_Str"",""String_Node_Str"").toLowerCase();
        datePattern=datePattern.replace('s','0');
        response.write(datePattern);
        if (datePattern.indexOf(""String_Node_Str"") == -1)         response.write(""String_Node_Str"" + component.getMarkupId() + ""String_Node_Str"");
 else         response.write(""String_Node_Str"");
        response.write(""String_Node_Str"");
      }
      @Override public boolean isEnabled(      Component component){
        return WebDataCalendar.this.isEnabled() && showPicker;
      }
    }
);
  }
  add(field);
  jsChangeRecorder=new ChangesRecorder(TemplateGenerator.DEFAULT_FIELD_BORDER_SIZE,TemplateGenerator.DEFAULT_FIELD_PADDING){
    @Override public boolean isChanged(){
      return super.isChanged() || field.getStylePropertyChanges().isChanged();
    }
    @Override public void setRendered(){
      super.setRendered();
      field.getStylePropertyChanges().setRendered();
    }
  }
;
  setOutputMarkupPlaceholderTag(true);
  add(StyleAttributeModifierModel.INSTANCE);
  add(TooltipAttributeModifier.INSTANCE);
}",0.9951563188022896
143746,"@Override protected void onBeforeRender(){
  super.onBeforeRender();
  if (eventExecutor != null) {
    boolean isFocused=false;
    IMainContainer currentContainer=((FormManager)application.getFormManager()).getCurrentContainer();
    if (currentContainer instanceof MainPage) {
      isFocused=this.equals(((MainPage)currentContainer).getFocusedComponent());
    }
    eventExecutor.fireOnRender(this,isFocused);
  }
}","@Override protected void onBeforeRender(){
  super.onBeforeRender();
  if (!isIgnoreOnRender && eventExecutor != null) {
    boolean isFocused=false;
    IMainContainer currentContainer=((FormManager)application.getFormManager()).getCurrentContainer();
    if (currentContainer instanceof MainPage) {
      isFocused=this.equals(((MainPage)currentContainer).getFocusedComponent());
    }
    eventExecutor.fireOnRender(this,isFocused);
  }
}",0.975609756097561
143747,"public DataCalendar(IApplication app){
  application=app;
  setLayout(new BorderLayout());
  enclosedComponent=new DataField(app){
    @Override public void setFormat(    int dataType,    String format){
      if (format == null || format.length() == 0) {
        format=new SimpleDateFormat().toPattern();
      }
      super.setFormat(Types.DATE,format);
    }
  }
;
  enclosedComponent.setBorder(BorderFactory.createEmptyBorder());
  enclosedComponent.setOpaque(false);
  add(enclosedComponent,BorderLayout.CENTER);
  showCal=new AbstractScriptButton(app);
  showCal.setText(""String_Node_Str"");
  showCal.addActionListener(this);
  showCal.setPreferredSize(new Dimension(20,15));
  showCal.setRequestFocusEnabled(false);
  add(showCal,BorderLayout.EAST);
  setOpaque(true);
  setBackground(Color.white);
  setBorder(BorderFactory.createEtchedBorder());
}","public DataCalendar(IApplication app){
  application=app;
  setLayout(new BorderLayout());
  enclosedComponent=new DataField(app){
    @Override public void setFormat(    int dataType,    String format){
      if (format == null || format.length() == 0) {
        format=new SimpleDateFormat().toPattern();
      }
      super.setFormat(Types.DATE,format);
    }
  }
;
  enclosedComponent.setIgnoreOnRender(true);
  enclosedComponent.setBorder(BorderFactory.createEmptyBorder());
  enclosedComponent.setOpaque(false);
  add(enclosedComponent,BorderLayout.CENTER);
  showCal=new AbstractScriptButton(app);
  showCal.setText(""String_Node_Str"");
  showCal.addActionListener(this);
  showCal.setPreferredSize(new Dimension(20,15));
  showCal.setRequestFocusEnabled(false);
  add(showCal,BorderLayout.EAST);
  setOpaque(true);
  setBackground(Color.white);
  setBorder(BorderFactory.createEtchedBorder());
}",0.9744172825469016
143748,"@Override protected void paintComponent(Graphics g){
  if (eventExecutor != null)   eventExecutor.fireOnRender(this,hasFocus());
  super.paintComponent(g);
}","@Override protected void paintComponent(Graphics g){
  if (!isIgnoreOnRender && eventExecutor != null)   eventExecutor.fireOnRender(this,hasFocus());
  super.paintComponent(g);
}",0.9373134328358208
143749,"@Override public void repaint(){
  if (eventExecutor != null && eventExecutor.isOnRenderRunningOnComponentPaint())   return;
  super.repaint();
}","@Override public void repaint(){
  if (!isIgnoreOnRender && eventExecutor != null && eventExecutor.isOnRenderRunningOnComponentPaint())   return;
  super.repaint();
}",0.932475884244373
143750,"public JSDNDEvent createScriptEvent(EventType type,IComponent dragSource,Point xy){
  JSDNDEvent jsEvent=new JSDNDEvent();
  jsEvent.setType(type);
  jsEvent.setFormName(getDragFormName());
  if (dragSource instanceof IDataRenderer) {
    IDataRenderer dr=(IDataRenderer)dragSource;
    FormController fct=dr.getDataAdapterList().getFormController();
    jsEvent.setSource(fct.getFormScope());
    jsEvent.setElementName(fct.getName());
  }
 else {
    jsEvent.setSource(dragSource);
    if (dragSource != null) {
      if (dragSource instanceof Component) {
        WebCellBasedViewListItem listItem=((Component)dragSource).findParent(WebCellBasedViewListItem.class);
        if (listItem != null) {
          IRecordInternal dragRecord=listItem.getModelObject();
          if (dragRecord instanceof Record)           jsEvent.setRecord((Record)dragRecord);
        }
      }
      String dragSourceName=dragSource.getName();
      if (dragSourceName == null)       dragSourceName=dragSource.getId();
      jsEvent.setElementName(dragSourceName);
    }
  }
  if (xy != null)   jsEvent.setLocation(xy);
  return jsEvent;
}","public JSDNDEvent createScriptEvent(EventType type,IComponent dragSource,Point xy){
  JSDNDEvent jsEvent=new JSDNDEvent();
  jsEvent.setType(type);
  jsEvent.setFormName(getDragFormName());
  if (dragSource instanceof IDataRenderer) {
    IDataRenderer dr=(IDataRenderer)dragSource;
    FormController fct=dr.getDataAdapterList().getFormController();
    jsEvent.setSource(fct.getFormScope());
  }
 else {
    jsEvent.setSource(dragSource);
    if (dragSource != null) {
      if (dragSource instanceof Component) {
        WebCellBasedViewListItem listItem=((Component)dragSource).findParent(WebCellBasedViewListItem.class);
        if (listItem != null) {
          IRecordInternal dragRecord=listItem.getModelObject();
          if (dragRecord instanceof Record)           jsEvent.setRecord((Record)dragRecord);
        }
      }
      String dragSourceName=dragSource.getName();
      if (dragSourceName == null)       dragSourceName=dragSource.getId();
      jsEvent.setElementName(dragSourceName);
    }
  }
  if (xy != null)   jsEvent.setLocation(xy);
  return jsEvent;
}",0.9804456571168711
143751,"@Override protected void onDragEnd(String id,int x,int y,AjaxRequestTarget ajaxRequestTarget){
  JSDNDEvent event=WebCellBasedView.this.createScriptEvent(EventType.onDragEnd,getDragComponent(),null);
  event.setData(getDragData());
  event.setDataMimeType(getDragDataMimeType());
  event.setDragResult(getDropResult() ? getCurrentDragOperation() : DRAGNDROP.NONE);
  WebCellBasedView.this.onDragEnd(event);
  super.onDragEnd(id,x,y,ajaxRequestTarget);
}","@Override protected void onDragEnd(String id,int x,int y,AjaxRequestTarget ajaxRequestTarget){
  if (getCurrentDragOperation() != DRAGNDROP.NONE) {
    JSDNDEvent event=WebCellBasedView.this.createScriptEvent(EventType.onDragEnd,getDragComponent(),null);
    event.setData(getDragData());
    event.setDataMimeType(getDragDataMimeType());
    event.setDragResult(getDropResult() ? getCurrentDragOperation() : DRAGNDROP.NONE);
    WebCellBasedView.this.onDragEnd(event);
  }
  super.onDragEnd(id,x,y,ajaxRequestTarget);
}",0.9311408016443988
143752,"private void addDragNDropBehavior(){
  DraggableBehavior compDragBehavior=new DraggableBehavior(){
    @Override protected void onDragEnd(    String id,    int x,    int y,    AjaxRequestTarget ajaxRequestTarget){
      JSDNDEvent event=WebCellBasedView.this.createScriptEvent(EventType.onDragEnd,getDragComponent(),null);
      event.setData(getDragData());
      event.setDataMimeType(getDragDataMimeType());
      event.setDragResult(getDropResult() ? getCurrentDragOperation() : DRAGNDROP.NONE);
      WebCellBasedView.this.onDragEnd(event);
      super.onDragEnd(id,x,y,ajaxRequestTarget);
    }
    @Override protected void onDragStart(    final String id,    int x,    int y,    AjaxRequestTarget ajaxRequestTarget){
      IComponent comp=getBindedComponentChild(id);
      JSDNDEvent event=WebCellBasedView.this.createScriptEvent(EventType.onDrag,comp,new Point(x,y));
      setCurrentDragOperation(WebCellBasedView.this.onDrag(event));
      setDragData(event.getData(),event.getDataMimeType());
      setDragComponent(comp);
      setDropResult(false);
    }
    @Override protected void onDrop(    String id,    final String targetid,    int x,    int y,    AjaxRequestTarget ajaxRequestTarget){
      if (getCurrentDragOperation() != DRAGNDROP.NONE) {
        IComponent comp=getBindedComponentChild(targetid);
        JSDNDEvent event=WebCellBasedView.this.createScriptEvent(EventType.onDrop,comp,new Point(x,y));
        event.setData(getDragData());
        event.setDataMimeType(getDragDataMimeType());
        setDropResult(WebCellBasedView.this.onDrop(event));
      }
    }
    @Override protected void onDropHover(    String id,    final String targetid,    AjaxRequestTarget ajaxRequestTarget){
      if (getCurrentDragOperation() != DRAGNDROP.NONE) {
        IComponent comp=getBindedComponentChild(targetid);
        JSDNDEvent event=WebCellBasedView.this.createScriptEvent(EventType.onDragOver,comp,null);
        event.setData(getDragData());
        event.setDataMimeType(getDragDataMimeType());
        WebCellBasedView.this.onDragOver(event);
      }
    }
    @Override public IComponent getBindedComponentChild(    final String childId){
      IComponent comp=super.getBindedComponentChild(childId);
      if (comp == null)       comp=WebCellBasedView.this;
      return comp;
    }
  }
;
  compDragBehavior.setUseProxy(true);
  add(compDragBehavior);
}","private void addDragNDropBehavior(){
  DraggableBehavior compDragBehavior=new DraggableBehavior(){
    @Override protected void onDragEnd(    String id,    int x,    int y,    AjaxRequestTarget ajaxRequestTarget){
      if (getCurrentDragOperation() != DRAGNDROP.NONE) {
        JSDNDEvent event=WebCellBasedView.this.createScriptEvent(EventType.onDragEnd,getDragComponent(),null);
        event.setData(getDragData());
        event.setDataMimeType(getDragDataMimeType());
        event.setDragResult(getDropResult() ? getCurrentDragOperation() : DRAGNDROP.NONE);
        WebCellBasedView.this.onDragEnd(event);
      }
      super.onDragEnd(id,x,y,ajaxRequestTarget);
    }
    @Override protected void onDragStart(    final String id,    int x,    int y,    AjaxRequestTarget ajaxRequestTarget){
      IComponent comp=getBindedComponentChild(id);
      JSDNDEvent event=WebCellBasedView.this.createScriptEvent(EventType.onDrag,comp,new Point(x,y));
      setCurrentDragOperation(WebCellBasedView.this.onDrag(event));
      setDragData(event.getData(),event.getDataMimeType());
      setDragComponent(comp);
      setDropResult(false);
    }
    @Override protected void onDrop(    String id,    final String targetid,    int x,    int y,    AjaxRequestTarget ajaxRequestTarget){
      if (getCurrentDragOperation() != DRAGNDROP.NONE) {
        IComponent comp=getBindedComponentChild(targetid);
        JSDNDEvent event=WebCellBasedView.this.createScriptEvent(EventType.onDrop,comp,new Point(x,y));
        event.setData(getDragData());
        event.setDataMimeType(getDragDataMimeType());
        setDropResult(WebCellBasedView.this.onDrop(event));
      }
    }
    @Override protected void onDropHover(    String id,    final String targetid,    AjaxRequestTarget ajaxRequestTarget){
      if (getCurrentDragOperation() != DRAGNDROP.NONE) {
        IComponent comp=getBindedComponentChild(targetid);
        JSDNDEvent event=WebCellBasedView.this.createScriptEvent(EventType.onDragOver,comp,null);
        event.setData(getDragData());
        event.setDataMimeType(getDragDataMimeType());
        WebCellBasedView.this.onDragOver(event);
      }
    }
    @Override public IComponent getBindedComponentChild(    final String childId){
      IComponent comp=super.getBindedComponentChild(childId);
      if (comp == null)       comp=WebCellBasedView.this;
      return comp;
    }
  }
;
  compDragBehavior.setUseProxy(true);
  add(compDragBehavior);
}",0.5420367692625491
143753,"@Override protected void onDragEnd(String id,int x,int y,AjaxRequestTarget ajaxRequestTarget){
  JSDNDEvent event=WebDataRenderer.this.createScriptEvent(EventType.onDragEnd,getDragComponent(),null);
  event.setData(getDragData());
  event.setDataMimeType(getDragDataMimeType());
  event.setDragResult(getDropResult() ? getCurrentDragOperation() : DRAGNDROP.NONE);
  WebDataRenderer.this.onDragEnd(event);
  super.onDragEnd(id,x,y,ajaxRequestTarget);
}","@Override protected void onDragEnd(String id,int x,int y,AjaxRequestTarget ajaxRequestTarget){
  if (getCurrentDragOperation() != DRAGNDROP.NONE) {
    JSDNDEvent event=WebDataRenderer.this.createScriptEvent(EventType.onDragEnd,getDragComponent(),null);
    event.setData(getDragData());
    event.setDataMimeType(getDragDataMimeType());
    event.setDragResult(getDropResult() ? getCurrentDragOperation() : DRAGNDROP.NONE);
    WebDataRenderer.this.onDragEnd(event);
  }
  super.onDragEnd(id,x,y,ajaxRequestTarget);
}",0.9308565531475748
143754,"private void addDragNDropBehavior(){
  DraggableBehavior dragBehavior=new DraggableBehavior(){
    @Override protected void onDragEnd(    String id,    int x,    int y,    AjaxRequestTarget ajaxRequestTarget){
      JSDNDEvent event=WebDataRenderer.this.createScriptEvent(EventType.onDragEnd,getDragComponent(),null);
      event.setData(getDragData());
      event.setDataMimeType(getDragDataMimeType());
      event.setDragResult(getDropResult() ? getCurrentDragOperation() : DRAGNDROP.NONE);
      WebDataRenderer.this.onDragEnd(event);
      super.onDragEnd(id,x,y,ajaxRequestTarget);
    }
    @Override protected void onDragStart(    final String id,    int x,    int y,    AjaxRequestTarget ajaxRequestTarget){
      IComponent comp=getBindedComponentChild(id);
      JSDNDEvent event=WebDataRenderer.this.createScriptEvent(EventType.onDrag,comp,new Point(x,y));
      setDropResult(false);
      setCurrentDragOperation(WebDataRenderer.this.onDrag(event));
      setDragComponent(comp);
      setDragData(event.getData(),event.getDataMimeType());
    }
    @Override protected void onDrop(    String id,    final String targetid,    int x,    int y,    AjaxRequestTarget ajaxRequestTarget){
      if (getCurrentDragOperation() != DRAGNDROP.NONE) {
        IComponent comp=getBindedComponentChild(targetid);
        WebDataRenderer renderer=WebDataRenderer.this;
        JSDNDEvent event=renderer.createScriptEvent(EventType.onDrop,comp,new Point(x,y));
        event.setData(getDragData());
        event.setDataMimeType(getDragDataMimeType());
        setDropResult(renderer.onDrop(event));
      }
    }
    @Override protected void onDropHover(    String id,    final String targetid,    AjaxRequestTarget ajaxRequestTarget){
      if (getCurrentDragOperation() != DRAGNDROP.NONE) {
        IComponent comp=getBindedComponentChild(targetid);
        JSDNDEvent event=WebDataRenderer.this.createScriptEvent(EventType.onDragOver,comp,null);
        event.setData(getDragData());
        event.setDataMimeType(getDragDataMimeType());
        WebDataRenderer.this.onDragOver(event);
      }
    }
    @Override public IComponent getBindedComponentChild(    final String childId){
      IComponent comp=super.getBindedComponentChild(childId);
      if (comp == null)       comp=WebDataRenderer.this;
      return comp;
    }
  }
;
  dragBehavior.setUseProxy(true);
  add(dragBehavior);
}","private void addDragNDropBehavior(){
  DraggableBehavior dragBehavior=new DraggableBehavior(){
    @Override protected void onDragEnd(    String id,    int x,    int y,    AjaxRequestTarget ajaxRequestTarget){
      if (getCurrentDragOperation() != DRAGNDROP.NONE) {
        JSDNDEvent event=WebDataRenderer.this.createScriptEvent(EventType.onDragEnd,getDragComponent(),null);
        event.setData(getDragData());
        event.setDataMimeType(getDragDataMimeType());
        event.setDragResult(getDropResult() ? getCurrentDragOperation() : DRAGNDROP.NONE);
        WebDataRenderer.this.onDragEnd(event);
      }
      super.onDragEnd(id,x,y,ajaxRequestTarget);
    }
    @Override protected void onDragStart(    final String id,    int x,    int y,    AjaxRequestTarget ajaxRequestTarget){
      IComponent comp=getBindedComponentChild(id);
      JSDNDEvent event=WebDataRenderer.this.createScriptEvent(EventType.onDrag,comp,new Point(x,y));
      setDropResult(false);
      setCurrentDragOperation(WebDataRenderer.this.onDrag(event));
      setDragComponent(comp);
      setDragData(event.getData(),event.getDataMimeType());
    }
    @Override protected void onDrop(    String id,    final String targetid,    int x,    int y,    AjaxRequestTarget ajaxRequestTarget){
      if (getCurrentDragOperation() != DRAGNDROP.NONE) {
        IComponent comp=getBindedComponentChild(targetid);
        WebDataRenderer renderer=WebDataRenderer.this;
        JSDNDEvent event=renderer.createScriptEvent(EventType.onDrop,comp,new Point(x,y));
        event.setData(getDragData());
        event.setDataMimeType(getDragDataMimeType());
        setDropResult(renderer.onDrop(event));
      }
    }
    @Override protected void onDropHover(    String id,    final String targetid,    AjaxRequestTarget ajaxRequestTarget){
      if (getCurrentDragOperation() != DRAGNDROP.NONE) {
        IComponent comp=getBindedComponentChild(targetid);
        JSDNDEvent event=WebDataRenderer.this.createScriptEvent(EventType.onDragOver,comp,null);
        event.setData(getDragData());
        event.setDataMimeType(getDragDataMimeType());
        WebDataRenderer.this.onDragOver(event);
      }
    }
    @Override public IComponent getBindedComponentChild(    final String childId){
      IComponent comp=super.getBindedComponentChild(childId);
      if (comp == null)       comp=WebDataRenderer.this;
      return comp;
    }
  }
;
  dragBehavior.setUseProxy(true);
  add(dragBehavior);
}",0.5171775354865255
143755,"private JSDNDEvent createScriptEvent(EventType type,IComponent dragSource,Point xy){
  JSDNDEvent jsEvent=new JSDNDEvent();
  jsEvent.setType(type);
  jsEvent.setFormName(getDragFormName());
  IRecordInternal dragRecord=getDragRecord(xy);
  if (dragRecord instanceof Record)   jsEvent.setRecord((Record)dragRecord);
  if (dragSource instanceof IDataRenderer) {
    IDataRenderer dr=(IDataRenderer)dragSource;
    FormController fct=dr.getDataAdapterList().getFormController();
    jsEvent.setSource(fct.getFormScope());
    jsEvent.setElementName(fct.getName());
  }
 else {
    jsEvent.setSource(dragSource);
    if (dragSource != null) {
      String dragSourceName=dragSource.getName();
      if (dragSourceName == null)       dragSourceName=dragSource.getId();
      jsEvent.setElementName(dragSourceName);
    }
  }
  if (xy != null)   jsEvent.setLocation(xy);
  return jsEvent;
}","private JSDNDEvent createScriptEvent(EventType type,IComponent dragSource,Point xy){
  JSDNDEvent jsEvent=new JSDNDEvent();
  jsEvent.setType(type);
  jsEvent.setFormName(getDragFormName());
  IRecordInternal dragRecord=getDragRecord(xy);
  if (dragRecord instanceof Record)   jsEvent.setRecord((Record)dragRecord);
  if (dragSource instanceof IDataRenderer) {
    IDataRenderer dr=(IDataRenderer)dragSource;
    FormController fct=dr.getDataAdapterList().getFormController();
    jsEvent.setSource(fct.getFormScope());
  }
 else {
    jsEvent.setSource(dragSource);
    if (dragSource != null) {
      String dragSourceName=dragSource.getName();
      if (dragSourceName == null)       dragSourceName=dragSource.getId();
      jsEvent.setElementName(dragSourceName);
    }
  }
  if (xy != null)   jsEvent.setLocation(xy);
  return jsEvent;
}",0.97510133178923
143756,"private Map placeElements(Iterator e1,IApplication app,Form form,IScriptExecuter listner,Map emptyDataRenderers,int XCorrection,int YCorrection,boolean printing,ControllerUndoManager undoManager,TabSequence<Component> tabSequence) throws Exception {
  final boolean useAJAX=Utils.getAsBoolean(app.getRuntimeProperties().get(""String_Node_Str""));
  IDataProviderLookup dataProviderLookup=app.getFlattenedSolution().getDataproviderLookup(app.getFoundSetManager(),form);
  Map listTocomplete=new HashMap();
  Map labelForComponents=new HashMap();
  String orientation=OrientationApplier.getHTMLContainerOrientation(app.getLocale(),app.getSolution().getTextOrientation());
  boolean leftToRight=!""String_Node_Str"".equalsIgnoreCase(orientation);
  boolean isAnchoringEnabled=Utils.getAsBoolean(app.getRuntimeProperties().get(""String_Node_Str""));
  while (e1.hasNext()) {
    Point l=null;
    IPersist obj=(IPersist)e1.next();
    if (obj instanceof IFormElement) {
      l=((IFormElement)obj).getLocation();
      if (l == null)       continue;
      if (printing && obj instanceof ISupportPrinting) {
        if (!((ISupportPrinting)obj).getPrintable())         continue;
      }
      Iterator it=emptyDataRenderers.values().iterator();
      while (it.hasNext()) {
        WebDataRenderer panel=(WebDataRenderer)it.next();
        int start=panel.getLocation().y;
        if (l.y >= start && l.y < start + panel.getSize().height) {
          org.apache.wicket.Component comp=(org.apache.wicket.Component)ComponentFactory.createComponent(app,form,obj,dataProviderLookup,listner,printing);
          if (comp != null) {
            if (obj instanceof Field) {
              String name=((Field)obj).getName();
              if (name != null && !""String_Node_Str"".equals(name)) {
                labelForComponents.put(name,comp);
              }
            }
 else             if (obj instanceof GraphicalComponent && (comp instanceof WebBaseLabel || comp instanceof WebBaseSubmitLink)) {
              String labelFor=((GraphicalComponent)obj).getLabelFor();
              if (labelFor != null && !""String_Node_Str"".equals(labelFor)) {
                labelForComponents.put(comp,labelFor);
              }
            }
            if ((obj instanceof ISupportTabSeq) && (tabSequence != null)) {
              tabSequence.add(panel,(ISupportTabSeq)obj,comp);
            }
            org.apache.wicket.Component newComp=comp;
            if (newComp instanceof IDisplay) {
              panel.addDisplayComponent(obj,(IDisplay)newComp);
            }
 else             if (newComp instanceof WebImageBeanHolder) {
              WebImageBeanHolder wiBeanHolder=(WebImageBeanHolder)newComp;
              Object bean=wiBeanHolder.getDelegate();
              if (bean instanceof IServoyAwareBean) {
                IServoyAwareBean ourBean=(IServoyAwareBean)bean;
                panel.addDisplayComponent(obj,ourBean);
              }
            }
            ((IComponent)comp).setLocation(new Point((l.x) + XCorrection,(l.y - start) + YCorrection));
            if (form.getOnRecordEditStartMethodID() > 0 && comp instanceof IFieldComponent) {
              if (useAJAX && comp instanceof IDisplayData && ((IDisplayData)comp).getDataProviderID() != null && !((IDisplayData)comp).getDataProviderID().startsWith(ScriptVariable.GLOBAL_DOT_PREFIX)) {
                StartEditOnFocusGainedEventBehavior.addNewBehaviour(comp);
              }
            }
            if (isAnchoringEnabled && (((obj instanceof Field) && TemplateGenerator.needsWrapperDivForAnchoring((Field)obj)) || (obj instanceof Bean))) {
              MarkupContainer compWrapper=new WrapperContainer(ComponentFactory.getWebID(null,obj) + ""String_Node_Str"",comp);
              Dimension s=((IFormElement)obj).getSize();
              int anchors=0;
              if (obj instanceof ISupportAnchors)               anchors=((ISupportAnchors)obj).getAnchors();
              int offsetWidth=s.width;
              int offsetHeight=s.height;
              if (comp instanceof ISupportWebBounds) {
                Rectangle b=((ISupportWebBounds)comp).getWebBounds();
                offsetWidth=b.width;
                offsetHeight=b.height;
              }
              final String styleToReturn=computeWrapperDivStyle(l.y,l.x,offsetWidth,offsetHeight,s.width,s.height,anchors,start,start + panel.getSize().height,panel.getSize().width,leftToRight);
              compWrapper.add(new StyleAppendingModifier(new AbstractReadOnlyModel<String>(){
                @Override public String getObject(){
                  return styleToReturn;
                }
              }
));
              compWrapper.add(StyleAttributeModifierModel.INSTANCE);
              comp.add(new StyleAppendingModifier(new AbstractReadOnlyModel<String>(){
                @Override public String getObject(){
                  return ""String_Node_Str"";
                }
              }
));
              compWrapper.add(comp);
              panel.add(compWrapper);
            }
 else {
              panel.add(comp);
            }
          }
        }
      }
    }
  }
  Iterator it=labelForComponents.entrySet().iterator();
  while (it.hasNext()) {
    Map.Entry entry=(Entry)it.next();
    Object key=entry.getKey();
    if (key instanceof WebBaseLabel || key instanceof WebBaseSubmitLink) {
      IFieldComponent component=(IFieldComponent)labelForComponents.get(entry.getValue());
      if (component != null) {
        if (key instanceof WebBaseLabel) {
          ((WebBaseLabel)entry.getKey()).setLabelFor(component);
        }
 else {
          ((WebBaseSubmitLink)entry.getKey()).setLabelFor(component);
        }
        (component).addLabelFor((ILabel)entry.getKey());
        component.setComponentVisible(component.isVisible());
        component.setComponentEnabled(component.isEnabled());
      }
    }
  }
  it=emptyDataRenderers.values().iterator();
  while (it.hasNext()) {
    WebDataRenderer panel=(WebDataRenderer)it.next();
    panel.createDataAdapter(app,dataProviderLookup,listner,undoManager);
  }
  return listTocomplete;
}","private Map placeElements(Iterator e1,IApplication app,Form form,IScriptExecuter listner,Map emptyDataRenderers,int XCorrection,int YCorrection,boolean printing,ControllerUndoManager undoManager,TabSequence<Component> tabSequence) throws Exception {
  final boolean useAJAX=Utils.getAsBoolean(app.getRuntimeProperties().get(""String_Node_Str""));
  IDataProviderLookup dataProviderLookup=app.getFlattenedSolution().getDataproviderLookup(app.getFoundSetManager(),form);
  Map listTocomplete=new HashMap();
  Map labelForComponents=new HashMap();
  String orientation=OrientationApplier.getHTMLContainerOrientation(app.getLocale(),app.getSolution().getTextOrientation());
  boolean leftToRight=!""String_Node_Str"".equalsIgnoreCase(orientation);
  boolean isAnchoringEnabled=Utils.getAsBoolean(app.getRuntimeProperties().get(""String_Node_Str""));
  while (e1.hasNext()) {
    Point l=null;
    IPersist obj=(IPersist)e1.next();
    if (obj instanceof IFormElement) {
      l=((IFormElement)obj).getLocation();
      if (l == null)       continue;
      if (printing && obj instanceof ISupportPrinting) {
        if (!((ISupportPrinting)obj).getPrintable())         continue;
      }
      Iterator it=emptyDataRenderers.values().iterator();
      while (it.hasNext()) {
        WebDataRenderer panel=(WebDataRenderer)it.next();
        int start=panel.getLocation().y;
        if (l.y >= start && l.y < start + panel.getSize().height) {
          org.apache.wicket.Component comp=(org.apache.wicket.Component)ComponentFactory.createComponent(app,form,obj,dataProviderLookup,listner,printing);
          if (comp != null) {
            if (comp.getId().equals(""String_Node_Str"")) {
              System.out.println();
            }
            if (obj instanceof Field) {
              String name=((Field)obj).getName();
              if (name != null && !""String_Node_Str"".equals(name)) {
                labelForComponents.put(name,comp);
              }
            }
 else             if (obj instanceof GraphicalComponent && (comp instanceof WebBaseLabel || comp instanceof WebBaseSubmitLink)) {
              String labelFor=((GraphicalComponent)obj).getLabelFor();
              if (labelFor != null && !""String_Node_Str"".equals(labelFor)) {
                labelForComponents.put(comp,labelFor);
              }
            }
            if ((obj instanceof ISupportTabSeq) && (tabSequence != null)) {
              tabSequence.add(panel,(ISupportTabSeq)obj,comp);
            }
            org.apache.wicket.Component newComp=comp;
            if (newComp instanceof IDisplay) {
              panel.addDisplayComponent(obj,(IDisplay)newComp);
            }
 else             if (newComp instanceof WebImageBeanHolder) {
              WebImageBeanHolder wiBeanHolder=(WebImageBeanHolder)newComp;
              Object bean=wiBeanHolder.getDelegate();
              if (bean instanceof IServoyAwareBean) {
                IServoyAwareBean ourBean=(IServoyAwareBean)bean;
                panel.addDisplayComponent(obj,ourBean);
              }
            }
            ((IComponent)comp).setLocation(new Point((l.x) + XCorrection,(l.y - start) + YCorrection));
            if (form.getOnRecordEditStartMethodID() > 0 && comp instanceof IFieldComponent) {
              if (useAJAX && comp instanceof IDisplayData && ((IDisplayData)comp).getDataProviderID() != null && !((IDisplayData)comp).getDataProviderID().startsWith(ScriptVariable.GLOBAL_DOT_PREFIX)) {
                StartEditOnFocusGainedEventBehavior.addNewBehaviour(comp);
              }
            }
            if (isAnchoringEnabled && (((obj instanceof Field) && TemplateGenerator.needsWrapperDivForAnchoring((Field)obj)) || (obj instanceof Bean))) {
              MarkupContainer compWrapper=new WrapperContainer(ComponentFactory.getWebID(null,obj) + ""String_Node_Str"",comp);
              Dimension s=((IFormElement)obj).getSize();
              int anchors=0;
              if (obj instanceof ISupportAnchors)               anchors=((ISupportAnchors)obj).getAnchors();
              int offsetWidth=s.width;
              int offsetHeight=s.height;
              if (comp instanceof ISupportWebBounds) {
                Rectangle b=((ISupportWebBounds)comp).getWebBounds();
                offsetWidth=b.width;
                offsetHeight=b.height;
              }
              final String styleToReturn=computeWrapperDivStyle(l.y,l.x,offsetWidth,offsetHeight,s.width,s.height,anchors,start,start + panel.getSize().height,panel.getSize().width,leftToRight);
              compWrapper.add(new StyleAppendingModifier(new AbstractReadOnlyModel<String>(){
                @Override public String getObject(){
                  return styleToReturn;
                }
              }
));
              compWrapper.add(StyleAttributeModifierModel.INSTANCE);
              comp.add(new StyleAppendingModifier(new AbstractReadOnlyModel<String>(){
                @Override public String getObject(){
                  return ""String_Node_Str"";
                }
              }
));
              compWrapper.add(comp);
              panel.add(compWrapper);
            }
 else {
              panel.add(comp);
            }
          }
        }
      }
    }
  }
  Iterator it=labelForComponents.entrySet().iterator();
  while (it.hasNext()) {
    Map.Entry entry=(Entry)it.next();
    Object key=entry.getKey();
    if (key instanceof WebBaseLabel || key instanceof WebBaseSubmitLink) {
      IFieldComponent component=(IFieldComponent)labelForComponents.get(entry.getValue());
      if (component != null) {
        if (key instanceof WebBaseLabel) {
          ((WebBaseLabel)entry.getKey()).setLabelFor(component);
        }
 else {
          ((WebBaseSubmitLink)entry.getKey()).setLabelFor(component);
        }
        (component).addLabelFor((ILabel)entry.getKey());
        component.setComponentVisible(component.isVisible());
        component.setComponentEnabled(component.isEnabled());
      }
    }
  }
  it=emptyDataRenderers.values().iterator();
  while (it.hasNext()) {
    WebDataRenderer panel=(WebDataRenderer)it.next();
    panel.createDataAdapter(app,dataProviderLookup,listner,undoManager);
  }
  return listTocomplete;
}",0.991222366710013
143757,"/** 
 * @param component2
 * @param response
 */
@SuppressWarnings(""String_Node_Str"") public static void generateDragAttach(Component component,IHeaderResponse response){
  DraggableBehavior draggableBehavior=null;
  Component behaviorComponent=component;
  if ((behaviorComponent instanceof IComponent) && !(behaviorComponent instanceof IDataRenderer)) {
    behaviorComponent=(Component)component.findParent(IDataRenderer.class);
  }
  if (behaviorComponent != null) {
    Iterator<IBehavior> behaviors=behaviorComponent.getBehaviors().iterator();
    Object behavior;
    while (behaviors.hasNext()) {
      behavior=behaviors.next();
      if (behavior instanceof DraggableBehavior) {
        draggableBehavior=(DraggableBehavior)behavior;
        break;
      }
    }
  }
  if (draggableBehavior == null)   return;
  boolean bUseProxy=draggableBehavior.isUseProxy();
  boolean bXConstraint=draggableBehavior.isXConstraint();
  boolean bYConstraint=draggableBehavior.isYConstraint();
  CharSequence dragUrl=draggableBehavior.getCallbackUrl();
  String jsCode=null;
  if (behaviorComponent instanceof IDataRenderer) {
    final StringBuilder sbAttachDrag=new StringBuilder(100);
    sbAttachDrag.append(""String_Node_Str"");
    final StringBuilder sbAttachDrop=new StringBuilder(100);
    sbAttachDrop.append(""String_Node_Str"");
    if (behaviorComponent instanceof WebDataRenderer) {
      boolean hasDragEvent=((WebDataRenderer)behaviorComponent).getDragNDropController().getForm().getOnDragMethodID() > 0;
      boolean hasDropEvent=((WebDataRenderer)behaviorComponent).getDragNDropController().getForm().getOnDropMethodID() > 0;
      if (component instanceof WebDataRenderer) {
        if (hasDragEvent)         sbAttachDrag.append('\'').append(component.getMarkupId()).append(""String_Node_Str"");
        if (hasDropEvent)         sbAttachDrop.append('\'').append(component.getMarkupId()).append(""String_Node_Str"");
        Iterator<? extends Component> dataRendererIte=((WebDataRenderer)component).iterator();
        Object dataRendererChild;
        while (dataRendererIte.hasNext()) {
          dataRendererChild=dataRendererIte.next();
          if (dataRendererChild instanceof WrapperContainer)           dataRendererChild=((WrapperContainer)dataRendererChild).getDelegate();
          if (dataRendererChild instanceof IComponent) {
            StringBuilder sb=null;
            if (hasDragEvent && (dataRendererChild instanceof WebBaseLabel || ((dataRendererChild instanceof IDisplay) && ((IDisplay)dataRendererChild).isReadOnly())))             sb=sbAttachDrag;
 else             if (hasDropEvent)             sb=sbAttachDrop;
            if (sb != null) {
              sb.append('\'');
              sb.append(((Component)dataRendererChild).getMarkupId());
              sb.append(""String_Node_Str"");
            }
          }
        }
      }
 else {
        StringBuilder sb=null;
        if (hasDragEvent && (component instanceof WebBaseLabel || ((component instanceof IDisplay) && ((IDisplay)component).isReadOnly())))         sb=sbAttachDrag;
 else         if (hasDropEvent)         sb=sbAttachDrop;
        if (sb != null) {
          sb.append('\'');
          sb.append(component.getMarkupId());
          sb.append(""String_Node_Str"");
        }
      }
    }
 else {
      final boolean hasDragEvent=((WebCellBasedView)behaviorComponent).getDragNDropController().getForm().getOnDragMethodID() > 0;
      final boolean hasDropEvent=((WebCellBasedView)behaviorComponent).getDragNDropController().getForm().getOnDropMethodID() > 0;
      if (component instanceof WebCellBasedView) {
        if (hasDragEvent)         sbAttachDrag.append('\'').append(component.getMarkupId()).append(""String_Node_Str"");
        if (hasDropEvent)         sbAttachDrop.append('\'').append(component.getMarkupId()).append(""String_Node_Str"");
        PageableListView<IRecordInternal> table=((WebCellBasedView)component).getTable();
        table.visitChildren(new IVisitor<Component>(){
          public Object component(          Component comp){
            if (comp instanceof IComponent) {
              StringBuilder sb=null;
              if (hasDragEvent && (comp instanceof WebBaseLabel || ((comp instanceof IDisplay) && ((IDisplay)comp).isReadOnly())))               sb=sbAttachDrag;
 else               if (hasDropEvent)               sb=sbAttachDrop;
              if (sb != null) {
                sb.append('\'');
                sb.append(comp.getMarkupId());
                sb.append(""String_Node_Str"");
              }
            }
            return null;
          }
        }
);
      }
 else {
        StringBuilder sb=null;
        if (hasDragEvent && (component instanceof WebBaseLabel || ((component instanceof IDisplay) && ((IDisplay)component).isReadOnly())))         sb=sbAttachDrag;
 else         if (hasDropEvent)         sb=sbAttachDrop;
        if (sb != null) {
          sb.append('\'');
          sb.append(component.getMarkupId());
          sb.append(""String_Node_Str"");
        }
      }
    }
    if (sbAttachDrag.length() > 25) {
      sbAttachDrag.setLength(sbAttachDrag.length() - 1);
      sbAttachDrag.append(""String_Node_Str"");
      sbAttachDrag.append(dragUrl);
      sbAttachDrag.append(""String_Node_Str"");
      sbAttachDrag.append(bUseProxy);
      sbAttachDrag.append(""String_Node_Str"");
      sbAttachDrag.append(bXConstraint);
      sbAttachDrag.append(""String_Node_Str"");
      sbAttachDrag.append(bYConstraint);
      sbAttachDrag.append(""String_Node_Str"");
      jsCode=sbAttachDrag.toString();
    }
    if (sbAttachDrop.length() > 25) {
      sbAttachDrop.setLength(sbAttachDrop.length() - 1);
      sbAttachDrop.append(""String_Node_Str"");
      sbAttachDrop.append(dragUrl);
      sbAttachDrop.append(""String_Node_Str"");
      if (jsCode != null)       jsCode+='\n' + sbAttachDrop.toString();
 else       jsCode=sbAttachDrop.toString();
    }
    if (jsCode != null) {
      if (response == null) {
        jsCode=(new StringBuilder().append(""String_Node_Str"").append(jsCode).append(""String_Node_Str"")).toString();
        Response cyleResponse=RequestCycle.get().getResponse();
        cyleResponse.write(jsCode);
      }
 else       response.renderOnDomReadyJavascript(jsCode);
    }
  }
 else {
    jsCode=""String_Node_Str"" + component.getMarkupId() + ""String_Node_Str""+ dragUrl+ ""String_Node_Str""+ bUseProxy+ ""String_Node_Str""+ bXConstraint+ ""String_Node_Str""+ bYConstraint+ ""String_Node_Str"";
    if (response == null) {
      jsCode=(new StringBuilder().append(""String_Node_Str"").append(jsCode).append(""String_Node_Str"")).toString();
      Response cyleResponse=RequestCycle.get().getResponse();
      cyleResponse.write(jsCode);
    }
 else     response.renderOnDomReadyJavascript(jsCode);
  }
}","/** 
 * @param component2
 * @param response
 */
@SuppressWarnings(""String_Node_Str"") public static void generateDragAttach(Component component,IHeaderResponse response){
  DraggableBehavior draggableBehavior=null;
  Component behaviorComponent=component;
  if ((behaviorComponent instanceof IComponent) && !(behaviorComponent instanceof IDataRenderer)) {
    behaviorComponent=(Component)component.findParent(IDataRenderer.class);
  }
  if (behaviorComponent != null) {
    Iterator<IBehavior> behaviors=behaviorComponent.getBehaviors().iterator();
    Object behavior;
    while (behaviors.hasNext()) {
      behavior=behaviors.next();
      if (behavior instanceof DraggableBehavior) {
        draggableBehavior=(DraggableBehavior)behavior;
        break;
      }
    }
  }
  if (draggableBehavior == null)   return;
  boolean bUseProxy=draggableBehavior.isUseProxy();
  boolean bXConstraint=draggableBehavior.isXConstraint();
  boolean bYConstraint=draggableBehavior.isYConstraint();
  CharSequence dragUrl=draggableBehavior.getCallbackUrl();
  String jsCode=null;
  if (behaviorComponent instanceof IDataRenderer) {
    final StringBuilder sbAttachDrag=new StringBuilder(100);
    sbAttachDrag.append(""String_Node_Str"");
    final StringBuilder sbAttachDrop=new StringBuilder(100);
    sbAttachDrop.append(""String_Node_Str"");
    if (behaviorComponent instanceof WebDataRenderer) {
      boolean hasDragEvent=((WebDataRenderer)behaviorComponent).getDragNDropController().getForm().getOnDragMethodID() > 0;
      boolean hasDropEvent=((WebDataRenderer)behaviorComponent).getDragNDropController().getForm().getOnDropMethodID() > 0;
      if (component instanceof WebDataRenderer) {
        if (hasDragEvent)         sbAttachDrag.append('\'').append(component.getMarkupId()).append(""String_Node_Str"");
        if (hasDropEvent)         sbAttachDrop.append('\'').append(component.getMarkupId()).append(""String_Node_Str"");
        Iterator<? extends Component> dataRendererIte=((WebDataRenderer)component).iterator();
        Object dataRendererChild;
        while (dataRendererIte.hasNext()) {
          dataRendererChild=dataRendererIte.next();
          if (dataRendererChild instanceof WrapperContainer)           dataRendererChild=((WrapperContainer)dataRendererChild).getDelegate();
          if (dataRendererChild instanceof IComponent) {
            StringBuilder sb=null;
            if (hasDragEvent && (dataRendererChild instanceof WebBaseLabel || dataRendererChild instanceof WebSplitPane || ((dataRendererChild instanceof IDisplay) && ((IDisplay)dataRendererChild).isReadOnly())))             sb=sbAttachDrag;
 else             if (hasDropEvent)             sb=sbAttachDrop;
            if (sb != null) {
              sb.append('\'');
              sb.append(((Component)dataRendererChild).getMarkupId());
              sb.append(""String_Node_Str"");
            }
          }
        }
      }
 else {
        StringBuilder sb=null;
        if (hasDragEvent && (component instanceof WebBaseLabel || ((component instanceof IDisplay) && ((IDisplay)component).isReadOnly())))         sb=sbAttachDrag;
 else         if (hasDropEvent)         sb=sbAttachDrop;
        if (sb != null) {
          sb.append('\'');
          sb.append(component.getMarkupId());
          sb.append(""String_Node_Str"");
        }
      }
    }
 else {
      final boolean hasDragEvent=((WebCellBasedView)behaviorComponent).getDragNDropController().getForm().getOnDragMethodID() > 0;
      final boolean hasDropEvent=((WebCellBasedView)behaviorComponent).getDragNDropController().getForm().getOnDropMethodID() > 0;
      if (component instanceof WebCellBasedView) {
        if (hasDragEvent)         sbAttachDrag.append('\'').append(component.getMarkupId()).append(""String_Node_Str"");
        if (hasDropEvent)         sbAttachDrop.append('\'').append(component.getMarkupId()).append(""String_Node_Str"");
        PageableListView<IRecordInternal> table=((WebCellBasedView)component).getTable();
        table.visitChildren(new IVisitor<Component>(){
          public Object component(          Component comp){
            if (comp instanceof IComponent) {
              StringBuilder sb=null;
              if (hasDragEvent && (comp instanceof WebBaseLabel || ((comp instanceof IDisplay) && ((IDisplay)comp).isReadOnly())))               sb=sbAttachDrag;
 else               if (hasDropEvent)               sb=sbAttachDrop;
              if (sb != null) {
                sb.append('\'');
                sb.append(comp.getMarkupId());
                sb.append(""String_Node_Str"");
              }
            }
            return null;
          }
        }
);
      }
 else {
        StringBuilder sb=null;
        if (hasDragEvent && (component instanceof WebBaseLabel || ((component instanceof IDisplay) && ((IDisplay)component).isReadOnly())))         sb=sbAttachDrag;
 else         if (hasDropEvent)         sb=sbAttachDrop;
        if (sb != null) {
          sb.append('\'');
          sb.append(component.getMarkupId());
          sb.append(""String_Node_Str"");
        }
      }
    }
    if (sbAttachDrag.length() > 25) {
      sbAttachDrag.setLength(sbAttachDrag.length() - 1);
      sbAttachDrag.append(""String_Node_Str"");
      sbAttachDrag.append(dragUrl);
      sbAttachDrag.append(""String_Node_Str"");
      sbAttachDrag.append(bUseProxy);
      sbAttachDrag.append(""String_Node_Str"");
      sbAttachDrag.append(bXConstraint);
      sbAttachDrag.append(""String_Node_Str"");
      sbAttachDrag.append(bYConstraint);
      sbAttachDrag.append(""String_Node_Str"");
      jsCode=sbAttachDrag.toString();
    }
    if (sbAttachDrop.length() > 25) {
      sbAttachDrop.setLength(sbAttachDrop.length() - 1);
      sbAttachDrop.append(""String_Node_Str"");
      sbAttachDrop.append(dragUrl);
      sbAttachDrop.append(""String_Node_Str"");
      if (jsCode != null)       jsCode+='\n' + sbAttachDrop.toString();
 else       jsCode=sbAttachDrop.toString();
    }
    if (jsCode != null) {
      if (response == null) {
        jsCode=(new StringBuilder().append(""String_Node_Str"").append(jsCode).append(""String_Node_Str"")).toString();
        Response cyleResponse=RequestCycle.get().getResponse();
        cyleResponse.write(jsCode);
      }
 else       response.renderOnDomReadyJavascript(jsCode);
    }
  }
 else {
    jsCode=""String_Node_Str"" + component.getMarkupId() + ""String_Node_Str""+ dragUrl+ ""String_Node_Str""+ bUseProxy+ ""String_Node_Str""+ bXConstraint+ ""String_Node_Str""+ bYConstraint+ ""String_Node_Str"";
    if (response == null) {
      jsCode=(new StringBuilder().append(""String_Node_Str"").append(jsCode).append(""String_Node_Str"")).toString();
      Response cyleResponse=RequestCycle.get().getResponse();
      cyleResponse.write(jsCode);
    }
 else     response.renderOnDomReadyJavascript(jsCode);
  }
}",0.9966855711865656
143758,"/** 
 * @see javax.swing.TransferHandler#exportDone(javax.swing.JComponent,java.awt.datatransfer.Transferable,int)
 */
@Override protected void exportDone(JComponent source,Transferable data,int action){
  super.exportDone(source,data,action);
  JComponent cmp=getDragComponent(source);
  if (cmp instanceof ICompositeDragNDrop) {
    ICompositeDragNDrop ddComp=(ICompositeDragNDrop)cmp;
    JSDNDEvent onDragEndEvent=createScriptEvent(EventType.onDragEnd,ddComp,inputEvent);
    int dragResult=action == COPY ? DRAGNDROP.COPY : action == MOVE ? DRAGNDROP.MOVE : DRAGNDROP.NONE;
    onDragEndEvent.setDragResult(dragResult);
    try {
      DataFlavor[] transferableFlavors=data.getTransferDataFlavors();
      if (transferableFlavors.length > 0) {
        onDragEndEvent.setDataMimeType(transferableFlavors[0].getMimeType());
        if (transferableFlavors[0].isRepresentationClassInputStream() || transferableFlavors[0].isRepresentationClassReader())         onDragEndEvent.setData(null);
 else         onDragEndEvent.setData(data.getTransferData(transferableFlavors[0]));
      }
    }
 catch (    Exception ex) {
      Debug.error(ex);
    }
    ((ICompositeDragNDrop)source).onDragEnd(onDragEndEvent);
  }
  customTransferable=null;
  inputEvent=null;
}","/** 
 * @see javax.swing.TransferHandler#exportDone(javax.swing.JComponent,java.awt.datatransfer.Transferable,int)
 */
@Override protected void exportDone(JComponent source,Transferable data,int action){
  super.exportDone(source,data,action);
  JComponent cmp=getDragComponent(source);
  if (cmp instanceof ICompositeDragNDrop && data != null) {
    ICompositeDragNDrop ddComp=(ICompositeDragNDrop)cmp;
    JSDNDEvent onDragEndEvent=createScriptEvent(EventType.onDragEnd,ddComp,inputEvent);
    int dragResult=action == COPY ? DRAGNDROP.COPY : action == MOVE ? DRAGNDROP.MOVE : DRAGNDROP.NONE;
    onDragEndEvent.setDragResult(dragResult);
    try {
      DataFlavor[] transferableFlavors=data.getTransferDataFlavors();
      if (transferableFlavors.length > 0) {
        onDragEndEvent.setDataMimeType(transferableFlavors[0].getMimeType());
        if (transferableFlavors[0].isRepresentationClassInputStream() || transferableFlavors[0].isRepresentationClassReader())         onDragEndEvent.setData(null);
 else         onDragEndEvent.setData(data.getTransferData(transferableFlavors[0]));
      }
    }
 catch (    Exception ex) {
      Debug.error(ex);
    }
    ((ICompositeDragNDrop)source).onDragEnd(onDragEndEvent);
  }
  customTransferable=null;
  inputEvent=null;
}",0.9936858721389108
143759,"@Override protected JSDNDEvent createScriptEvent(EventType type,ICompositeDragNDrop ddComponent,Object event){
  JSDNDEvent jsEvent=super.createScriptEvent(type,ddComponent,event);
  if (ddComponent instanceof IFormDataDragNDrop) {
    IFormDataDragNDrop formDataDDComponent=(IFormDataDragNDrop)ddComponent;
    jsEvent.setFormName(formDataDDComponent.getDragFormName());
    Point location=getEventXY(event);
    if (location != null) {
      Object dragSource=ddComponent.getDragSource(location);
      if (dragSource instanceof IDataRenderer) {
        IDataRenderer dr=(IDataRenderer)dragSource;
        FormController fc=dr.getDataAdapterList().getFormController();
        jsEvent.setSource(fc.getFormScope());
        jsEvent.setElementName(fc.getName());
      }
 else       if (dragSource instanceof IComponent) {
        jsEvent.setSource(dragSource);
        if (dragSource != null) {
          String name=((IComponent)dragSource).getName();
          if (name != null && name.startsWith(ComponentFactory.WEB_ID_PREFIX)) {
            name=null;
          }
          jsEvent.setElementName(name);
        }
      }
      IRecordInternal dragRecord=formDataDDComponent.getDragRecord(location);
      if (dragRecord instanceof Record)       jsEvent.setRecord((Record)dragRecord);
    }
  }
  return jsEvent;
}","@Override protected JSDNDEvent createScriptEvent(EventType type,ICompositeDragNDrop ddComponent,Object event){
  JSDNDEvent jsEvent=super.createScriptEvent(type,ddComponent,event);
  if (ddComponent instanceof IFormDataDragNDrop) {
    IFormDataDragNDrop formDataDDComponent=(IFormDataDragNDrop)ddComponent;
    jsEvent.setFormName(formDataDDComponent.getDragFormName());
    Point location=getEventXY(event);
    if (location != null) {
      Object dragSource=ddComponent.getDragSource(location);
      if (dragSource instanceof IDataRenderer) {
        IDataRenderer dr=(IDataRenderer)dragSource;
        FormController fc=dr.getDataAdapterList().getFormController();
        jsEvent.setSource(fc.getFormScope());
      }
 else       if (dragSource instanceof IComponent) {
        jsEvent.setSource(dragSource);
        if (dragSource != null) {
          String name=((IComponent)dragSource).getName();
          if (name != null && name.startsWith(ComponentFactory.WEB_ID_PREFIX)) {
            name=null;
          }
          jsEvent.setElementName(name);
        }
      }
      IRecordInternal dragRecord=formDataDDComponent.getDragRecord(location);
      if (dragRecord instanceof Record)       jsEvent.setRecord((Record)dragRecord);
    }
  }
  return jsEvent;
}",0.9822667694680032
143760,"/** 
 * The method that is triggered when (non Design Mode) dragging occurs.
 * @templatedescription Handle start of a drag, it can set the data that should be transfered and should return a constant which dragndrop mode/modes is/are supported Should return a DRAGNDROP constant or a combination of 2 constants: DRAGNDROP.MOVE if only a move can happen, DRAGNDROP.COPY if only a copy can happen, DRAGNDROP.MOVE|DRAGNDROP.COPY if a move or copy can happen, DRAGNDROP.NONE if nothing is supported (drag should start).
 * @templatename onDrag
 * @templatetype Number
 * @templateparam JSDNDEvent event the event that triggered the action
 * @templateaddtodo
 * @templatecode return DRAGNDROP.NONE
 */
public int getOnDragMethodID(){
  return getTypedProperty(StaticContentSpecLoader.PROPERTY_ONDRAGMETHODID).intValue();
}","/** 
 * The method that is triggered when (non Design Mode) dragging occurs.
 * @templatedescription Handle start of a drag, it can set the data that should be transfered and should return a constant which dragndrop mode/modes is/are supported Should return a DRAGNDROP constant or a combination of 2 constants: DRAGNDROP.MOVE if only a move can happen, DRAGNDROP.COPY if only a copy can happen, DRAGNDROP.MOVE|DRAGNDROP.COPY if a move or copy can happen, DRAGNDROP.NONE if nothing is supported (drag should not start).
 * @templatename onDrag
 * @templatetype Number
 * @templateparam JSDNDEvent event the event that triggered the action
 * @templateaddtodo
 * @templatecode return DRAGNDROP.NONE
 */
public int getOnDragMethodID(){
  return getTypedProperty(StaticContentSpecLoader.PROPERTY_ONDRAGMETHODID).intValue();
}",0.997560975609756
143761,"private static void createTabPanelHTML(TabPanel tabPanel,Form form,StringBuffer html,TextualCSS css,int startY,int endY,boolean enableAnchoring,IServiceProvider sp){
  TextualStyle styleObj=css.addStyle('#' + ComponentFactory.getWebID(form,tabPanel));
  BorderAndPadding borderAndPadding=applyBaseComponentProperties(tabPanel,form,styleObj,null,null,sp);
  applyLocationAndSize(tabPanel,styleObj,borderAndPadding,startY,endY,form.getSize().width,enableAnchoring);
  styleObj.remove(""String_Node_Str"");
  html.append(""String_Node_Str"");
  html.append(getWicketIDParameter(form,tabPanel));
  html.append(getCSSClassParameter(""String_Node_Str""));
  html.append(""String_Node_Str"");
  if (tabPanel.getTabOrientation() != TabPanel.HIDE && tabPanel.getTabOrientation() != TabPanel.SPLIT_HORIZONTAL && tabPanel.getTabOrientation() != TabPanel.SPLIT_VERTICAL && !(tabPanel.getTabOrientation() == TabPanel.DEFAULT && tabPanel.hasOneTab())) {
    html.append(""String_Node_Str"");
    html.append(""String_Node_Str"");
    html.append(""String_Node_Str"");
    html.append(""String_Node_Str"");
    html.append(""String_Node_Str"");
    Iterator<IPersist> it=tabPanel.getAllObjects();
    if (it.hasNext()) {
      Tab tab=(Tab)it.next();
      html.append(""String_Node_Str"");
      html.append(""String_Node_Str"");
      html.append(getSafeText(tab.getText()));
      html.append(""String_Node_Str"");
    }
 else {
      html.append(""String_Node_Str"");
      html.append(""String_Node_Str"");
      html.append(""String_Node_Str"");
      html.append(""String_Node_Str"");
    }
    html.append(""String_Node_Str"");
  }
  TextualStyle style=new TextualStyle();
  style.setProperty(""String_Node_Str"",""String_Node_Str"");
  style.setProperty(""String_Node_Str"",""String_Node_Str"");
  boolean bAddTabContainerClass=false;
  if (tabPanel.getBorderType() == null) {
    if (!tabPanel.hasOneTab() && tabPanel.getTabOrientation() != TabPanel.HIDE) {
      bAddTabContainerClass=true;
    }
  }
 else {
    ComponentFactoryHelper.createBorderCSSProperties(tabPanel.getBorderType(),styleObj);
  }
  if (tabPanel.getTabOrientation() == TabPanel.SPLIT_HORIZONTAL || tabPanel.getTabOrientation() == TabPanel.SPLIT_VERTICAL) {
    String tabPanelMarkupId=ComponentFactory.getWebID(form,tabPanel);
    StringBuffer leftPanelStyle=new StringBuffer(""String_Node_Str"");
    StringBuffer rightPanelStyle=new StringBuffer(""String_Node_Str"");
    if (tabPanel.getTabOrientation() == TabPanel.SPLIT_HORIZONTAL) {
      leftPanelStyle.append(""String_Node_Str"");
      rightPanelStyle.append(""String_Node_Str"");
    }
 else {
      leftPanelStyle.append(""String_Node_Str"");
      rightPanelStyle.append(""String_Node_Str"");
    }
    html.append(""String_Node_Str"").append(tabPanelMarkupId).append(""String_Node_Str"").append(leftPanelStyle).append(""String_Node_Str"").append(tabPanelMarkupId).append(""String_Node_Str"").append(leftPanelStyle).append(""String_Node_Str"" + getCSSClassParameter(""String_Node_Str"") + ""String_Node_Str"");
    html.append(""String_Node_Str"").append(tabPanelMarkupId).append(""String_Node_Str"").append(rightPanelStyle).append(""String_Node_Str"" + getCSSClassParameter(""String_Node_Str"") + ""String_Node_Str"");
  }
 else {
    html.append(""String_Node_Str"").append(style.toString());
    if (bAddTabContainerClass)     html.append(getCSSClassParameter(""String_Node_Str""));
 else     html.append(getCSSClassParameter(""String_Node_Str""));
    html.append(""String_Node_Str"");
  }
  html.append(""String_Node_Str"");
}","private static void createTabPanelHTML(TabPanel tabPanel,Form form,StringBuffer html,TextualCSS css,int startY,int endY,boolean enableAnchoring,IServiceProvider sp){
  TextualStyle styleObj=css.addStyle('#' + ComponentFactory.getWebID(form,tabPanel));
  BorderAndPadding borderAndPadding=applyBaseComponentProperties(tabPanel,form,styleObj,null,null,sp);
  applyLocationAndSize(tabPanel,styleObj,borderAndPadding,startY,endY,form.getSize().width,enableAnchoring);
  styleObj.remove(""String_Node_Str"");
  html.append(""String_Node_Str"");
  html.append(getWicketIDParameter(form,tabPanel));
  html.append(getCSSClassParameter(""String_Node_Str""));
  html.append(""String_Node_Str"");
  if (tabPanel.getTabOrientation() != TabPanel.HIDE && tabPanel.getTabOrientation() != TabPanel.SPLIT_HORIZONTAL && tabPanel.getTabOrientation() != TabPanel.SPLIT_VERTICAL && !(tabPanel.getTabOrientation() == TabPanel.DEFAULT && tabPanel.hasOneTab())) {
    html.append(""String_Node_Str"");
    html.append(""String_Node_Str"");
    html.append(""String_Node_Str"");
    html.append(""String_Node_Str"");
    html.append(""String_Node_Str"");
    Iterator<IPersist> it=tabPanel.getAllObjects();
    if (it.hasNext()) {
      Tab tab=(Tab)it.next();
      html.append(""String_Node_Str"");
      html.append(""String_Node_Str"");
      html.append(getSafeText(tab.getText()));
      html.append(""String_Node_Str"");
    }
 else {
      html.append(""String_Node_Str"");
      html.append(""String_Node_Str"");
      html.append(""String_Node_Str"");
      html.append(""String_Node_Str"");
    }
    html.append(""String_Node_Str"");
  }
  TextualStyle style=new TextualStyle();
  style.setProperty(""String_Node_Str"",""String_Node_Str"");
  style.setProperty(""String_Node_Str"",""String_Node_Str"");
  boolean bAddTabContainerClass=false;
  if (tabPanel.getBorderType() == null) {
    if (!tabPanel.hasOneTab() && tabPanel.getTabOrientation() != TabPanel.HIDE) {
      bAddTabContainerClass=true;
    }
  }
 else {
    ComponentFactoryHelper.createBorderCSSProperties(tabPanel.getBorderType(),styleObj);
  }
  if (tabPanel.getTabOrientation() == TabPanel.SPLIT_HORIZONTAL || tabPanel.getTabOrientation() == TabPanel.SPLIT_VERTICAL) {
    String tabPanelMarkupId=ComponentFactory.getWebID(form,tabPanel);
    StringBuffer leftPanelStyle=new StringBuffer(""String_Node_Str"");
    StringBuffer rightPanelStyle=new StringBuffer(""String_Node_Str"");
    if (tabPanel.getTabOrientation() == TabPanel.SPLIT_HORIZONTAL) {
      leftPanelStyle.append(""String_Node_Str"");
      rightPanelStyle.append(""String_Node_Str"");
    }
 else {
      leftPanelStyle.append(""String_Node_Str"");
      rightPanelStyle.append(""String_Node_Str"");
    }
    html.append(""String_Node_Str"").append(tabPanelMarkupId).append(""String_Node_Str"").append(leftPanelStyle).append(""String_Node_Str"").append(tabPanelMarkupId).append(""String_Node_Str"").append(leftPanelStyle).append(""String_Node_Str"").append(getCSSClassParameter(""String_Node_Str"")).append(""String_Node_Str"");
    html.append(""String_Node_Str"").append(tabPanelMarkupId).append(""String_Node_Str"").append(rightPanelStyle).append(""String_Node_Str"").append(getCSSClassParameter(""String_Node_Str"")).append(""String_Node_Str"");
  }
 else {
    html.append(""String_Node_Str"").append(style.toString());
    if (bAddTabContainerClass)     html.append(getCSSClassParameter(""String_Node_Str""));
 else     html.append(getCSSClassParameter(""String_Node_Str""));
    html.append(""String_Node_Str"");
  }
  html.append(""String_Node_Str"");
}",0.9931113662456946
143762,"public WebCellBasedView(final String id,final IApplication application,final Form form,final AbstractBase cellview,final IDataProviderLookup dataProviderLookup,final IScriptExecuter el,boolean addHeaders,final int startY,final int endY,final int sizeHint){
  super(id);
  this.application=application;
  this.cellview=cellview;
  this.fc=el.getFormController();
  this.addHeaders=addHeaders;
  this.startY=startY;
  this.endY=endY;
  this.formDesignHeight=form.getSize().height;
  this.sizeHint=sizeHint;
  this.bodyWidthHint=form.getWidth();
  useAJAX=Utils.getAsBoolean(application.getRuntimeProperties().get(""String_Node_Str""));
  useAnchors=Utils.getAsBoolean(application.getRuntimeProperties().get(""String_Node_Str""));
  setOutputMarkupPlaceholderTag(true);
  dataRendererOnRenderWrapper=new DataRendererOnRenderWrapper(this);
  if (!useAJAX)   bodyHeightHint=sizeHint;
  jsChangeRecorder=new ChangesRecorder(null,null){
    @Override public boolean isChanged(){
      boolean retval=false;
      if (super.isChanged()) {
        retval=true;
        return retval;
      }
      if (!retval) {
        Iterator<Component> iterator=elementToColumnIdentifierComponent.values().iterator();
        while (iterator.hasNext()) {
          Component object=iterator.next();
          if (object instanceof IProviderStylePropertyChanges) {
            if (((IProviderStylePropertyChanges)object).getStylePropertyChanges().isChanged()) {
              retval=true;
              break;
            }
          }
        }
      }
      if (retval) {
        MainPage page=(MainPage)getPage();
        page.getPageContributor().addTableToRender(WebCellBasedView.this);
        setRendered();
      }
      return false;
    }
    @Override public void setRendered(){
      super.setRendered();
      Iterator<Component> iterator=elementToColumnIdentifierComponent.values().iterator();
      while (iterator.hasNext()) {
        Component comp=iterator.next();
        if (comp instanceof IProviderStylePropertyChanges) {
          ((IProviderStylePropertyChanges)comp).getStylePropertyChanges().setRendered();
        }
      }
    }
  }
;
  add(new StyleAppendingModifier(new Model<String>(){
    private static final long serialVersionUID=1L;
    @Override public String getObject(){
      WebTabPanel tabpanel=findParent(WebTabPanel.class);
      if (tabpanel != null) {
        return ""String_Node_Str"";
      }
      return ""String_Node_Str"";
    }
  }
));
  if (cellview instanceof BaseComponent) {
    ComponentFactory.applyBasicComponentProperties(application,this,(BaseComponent)cellview,ComponentFactory.getStyleForBasicComponent(application,(BaseComponent)cellview,form));
  }
  boolean sortable=true;
  String initialSortString=null;
  int onRenderMethodID=0;
  if (cellview instanceof Portal) {
    Portal p=(Portal)cellview;
    setRowBGColorScript(p.getRowBGColorCalculation(),p.getInstanceMethodArguments(""String_Node_Str""));
    sortable=p.getSortable();
    initialSortString=p.getInitialSort();
    onRenderMethodID=p.getOnRenderMethodID();
  }
 else   if (cellview instanceof Form) {
    initialSortString=form.getInitialSort();
    onRenderMethodID=form.getOnRenderMethodID();
  }
  if (onRenderMethodID > 0) {
    dataRendererOnRenderWrapper.getRenderEventExecutor().setRenderCallback(Integer.toString(onRenderMethodID));
    dataRendererOnRenderWrapper.getRenderEventExecutor().setRenderScriptExecuter(fc != null ? fc.getScriptExecuter() : null);
  }
  initDragNDrop(fc,startY);
  if (sortable) {
    if (initialSortString != null) {
      StringTokenizer tokByComma=new StringTokenizer(initialSortString,""String_Node_Str"");
      if (tokByComma.hasMoreTokens()) {
        String initialSortFirstToken=tokByComma.nextToken();
        StringTokenizer tokBySpace=new StringTokenizer(initialSortFirstToken);
        if (tokBySpace.hasMoreTokens()) {
          initialSortColumnName=tokBySpace.nextToken();
          if (tokBySpace.hasMoreTokens()) {
            String sortDir=tokBySpace.nextToken();
            if (sortDir.equalsIgnoreCase(""String_Node_Str""))             initialSortAsc=false;
          }
        }
      }
    }
    if (initialSortColumnName == null) {
      try {
        String dataSource=null;
        if (cellview instanceof Portal) {
          Portal p=(Portal)cellview;
          String relation=p.getRelationName();
          int lastDot=relation.lastIndexOf(""String_Node_Str"");
          if (lastDot >= 0) {
            relation=relation.substring(lastDot + 1);
          }
          Relation rel=application.getFlattenedSolution().getRelation(relation);
          if (rel != null) {
            dataSource=rel.getForeignDataSource();
          }
        }
 else {
          dataSource=form.getDataSource();
        }
        if (dataSource != null) {
          Iterator<String> pkColumnNames=application.getFoundSetManager().getTable(dataSource).getRowIdentColumnNames();
          if (pkColumnNames.hasNext()) {
            initialSortColumnName=pkColumnNames.next();
            initialSortAsc=true;
          }
        }
      }
 catch (      RepositoryException e) {
        Debug.log(""String_Node_Str"",e);
      }
    }
  }
  maxHeight=0;
  try {
    Iterator<IPersist> components=cellview.getAllObjects(PositionComparator.XY_PERSIST_COMPARATOR);
    while (components.hasNext()) {
      IPersist element=components.next();
      if (element instanceof Field || element instanceof GraphicalComponent) {
        if (element instanceof GraphicalComponent && ((GraphicalComponent)element).getLabelFor() != null) {
          labelsFor.put(((GraphicalComponent)element).getLabelFor(),element);
          continue;
        }
        Point l=((IFormElement)element).getLocation();
        if (l == null) {
          continue;
        }
        if (l.y >= startY && l.y < endY) {
          int height=((IFormElement)element).getSize().height;
          if (height > maxHeight)           maxHeight=height;
        }
      }
    }
    if (maxHeight == 0)     maxHeight=20;
  }
 catch (  Exception ex1) {
    Debug.error(""String_Node_Str"",ex1);
  }
  table=new WebCellBasedViewListView(""String_Node_Str"",data,1,cellview,dataProviderLookup,el,startY,endY,form);
  table.setReuseItems(true);
  add(table);
  final LinkedHashMap<String,IDataAdapter> dataadapters=new LinkedHashMap<String,IDataAdapter>();
  final SortedList<IPersist> columnTabSequence=new SortedList<IPersist>(TabSeqComparator.INSTANCE);
  createComponents(application,form,cellview,dataProviderLookup,el,startY,endY,new ItemAdd(){
    public void add(    IPersist element,    Component comp){
      if (element instanceof IFormElement && comp instanceof IComponent) {
        ((IComponent)comp).setLocation(((IFormElement)element).getLocation());
        ((IComponent)comp).setSize(((IFormElement)element).getSize());
      }
      elementToColumnIdentifierComponent.put(element,comp);
      if (cellview instanceof Form && element instanceof ISupportTabSeq && ((ISupportTabSeq)element).getTabSeq() >= 0) {
        columnTabSequence.add(element);
      }
      if (comp instanceof IDisplayData) {
        String dataprovider=((IDisplayData)comp).getDataProviderID();
        WebCellAdapter previous=(WebCellAdapter)dataadapters.get(dataprovider);
        if (previous == null) {
          WebCellAdapter wca=new WebCellAdapter(dataprovider,WebCellBasedView.this);
          dataadapters.put(dataprovider,wca);
        }
        if (dataprovider != null) {
          if (dataprovider.equals(initialSortColumnName))           initialSortedColumnId=comp.getId();
        }
      }
    }
  }
);
  for (int i=columnTabSequence.size() - 1; i >= 0; i--) {
    elementTabIndexes.put(columnTabSequence.get(i),Integer.valueOf(i));
  }
  if (addHeaders) {
    headers=new SortableCellViewHeaders(form,this,""String_Node_Str"",table,cellview,application,initialSortedColumnId,initialSortAsc,new IHeaders(){
      public void registerHeader(      IPersist matchingElement,      Component headerComponent){
        SortableCellViewHeader sortableHeader=(SortableCellViewHeader)headerComponent;
        Component columnIdentifier=WebCellBasedView.this.elementToColumnIdentifierComponent.get(matchingElement);
        if (columnIdentifier instanceof IProviderStylePropertyChanges) {
          String width=(String)((IProviderStylePropertyChanges)columnIdentifier).getStylePropertyChanges().getChanges().get(""String_Node_Str"");
          if (width != null) {
            sortableHeader.setWidth(Integer.parseInt(width.substring(0,width.length() - 2)));
          }
 else           if (matchingElement instanceof BaseComponent)           sortableHeader.setWidth(((BaseComponent)matchingElement).getSize().width);
        }
        sortableHeader.setTabIndex(tabIndex);
        sortableHeader.setScriptExecuter(el);
        WebCellBasedView.this.registerHeader(matchingElement,headerComponent);
      }
    }
);
    add(headers);
  }
  if (useAJAX) {
    add(pagingNavigator=new ServoyAjaxPagingNavigator(""String_Node_Str"",table));
    add(new ServoyTableResizeBehavior(startY,endY,cellview));
  }
 else {
    add(pagingNavigator=new ServoySubmitPagingNavigator(""String_Node_Str"",table));
  }
  int scrollbars=0;
  if (cellview instanceof Portal) {
    scrollbars=((Portal)cellview).getScrollbars();
  }
  if (cellview instanceof Form) {
    scrollbars=((Form)cellview).getScrollbars();
  }
  showPageNavigator=!((scrollbars & ISupportScrollbars.VERTICAL_SCROLLBAR_NEVER) == ISupportScrollbars.VERTICAL_SCROLLBAR_NEVER);
  try {
    if (cellview instanceof Portal) {
      relationName=((Portal)cellview).getRelationName();
      Relation[] rels=application.getFlattenedSolution().getRelationSequence(((Portal)cellview).getRelationName());
      if (rels != null) {
        Relation r=rels[rels.length - 1];
        if (r != null) {
          defaultSort=((FoundSetManager)application.getFoundSetManager()).getSortColumns(application.getFoundSetManager().getTable(r.getForeignDataSource()),((Portal)cellview).getInitialSort());
        }
      }
    }
 else {
      defaultSort=((FoundSetManager)application.getFoundSetManager()).getSortColumns(((Form)cellview).getDataSource(),((Form)cellview).getInitialSort());
    }
  }
 catch (  RepositoryException e) {
    Debug.error(e);
    defaultSort=new ArrayList<SortColumn>(1);
  }
  try {
    dal=new DataAdapterList(application,dataProviderLookup,elementToColumnIdentifierComponent,el.getFormController(),dataadapters,null);
  }
 catch (  RepositoryException ex) {
    Debug.error(ex);
  }
}","public WebCellBasedView(final String id,final IApplication application,final Form form,final AbstractBase cellview,final IDataProviderLookup dataProviderLookup,final IScriptExecuter el,boolean addHeaders,final int startY,final int endY,final int sizeHint){
  super(id);
  this.application=application;
  this.cellview=cellview;
  this.fc=el.getFormController();
  this.addHeaders=addHeaders;
  this.startY=startY;
  this.endY=endY;
  this.formDesignHeight=form.getSize().height;
  this.sizeHint=sizeHint;
  this.bodyWidthHint=form.getWidth();
  useAJAX=Utils.getAsBoolean(application.getRuntimeProperties().get(""String_Node_Str""));
  useAnchors=Utils.getAsBoolean(application.getRuntimeProperties().get(""String_Node_Str""));
  setOutputMarkupPlaceholderTag(true);
  dataRendererOnRenderWrapper=new DataRendererOnRenderWrapper(this);
  if (!useAJAX)   bodyHeightHint=sizeHint;
  jsChangeRecorder=new ChangesRecorder(null,null){
    @Override public boolean isChanged(){
      boolean retval=false;
      if (super.isChanged()) {
        retval=true;
        return retval;
      }
      if (!retval) {
        Iterator<Component> iterator=elementToColumnIdentifierComponent.values().iterator();
        while (iterator.hasNext()) {
          Component object=iterator.next();
          if (object instanceof IProviderStylePropertyChanges) {
            if (((IProviderStylePropertyChanges)object).getStylePropertyChanges().isChanged()) {
              retval=true;
              break;
            }
          }
        }
      }
      if (retval) {
        MainPage page=(MainPage)getPage();
        page.getPageContributor().addTableToRender(WebCellBasedView.this);
        setRendered();
      }
      return false;
    }
    @Override public void setRendered(){
      super.setRendered();
      Iterator<Component> iterator=elementToColumnIdentifierComponent.values().iterator();
      while (iterator.hasNext()) {
        Component comp=iterator.next();
        if (comp instanceof IProviderStylePropertyChanges) {
          ((IProviderStylePropertyChanges)comp).getStylePropertyChanges().setRendered();
        }
      }
    }
  }
;
  add(new StyleAppendingModifier(new Model<String>(){
    private static final long serialVersionUID=1L;
    @Override public String getObject(){
      WebTabPanel tabpanel=findParent(WebTabPanel.class);
      if (tabpanel != null) {
        return ""String_Node_Str"";
      }
 else {
        WebSplitPane splitPane=findParent(WebSplitPane.class);
        if (splitPane != null) {
          return ""String_Node_Str"";
        }
      }
      return ""String_Node_Str"";
    }
  }
));
  if (cellview instanceof BaseComponent) {
    ComponentFactory.applyBasicComponentProperties(application,this,(BaseComponent)cellview,ComponentFactory.getStyleForBasicComponent(application,(BaseComponent)cellview,form));
  }
  boolean sortable=true;
  String initialSortString=null;
  int onRenderMethodID=0;
  if (cellview instanceof Portal) {
    Portal p=(Portal)cellview;
    setRowBGColorScript(p.getRowBGColorCalculation(),p.getInstanceMethodArguments(""String_Node_Str""));
    sortable=p.getSortable();
    initialSortString=p.getInitialSort();
    onRenderMethodID=p.getOnRenderMethodID();
  }
 else   if (cellview instanceof Form) {
    initialSortString=form.getInitialSort();
    onRenderMethodID=form.getOnRenderMethodID();
  }
  if (onRenderMethodID > 0) {
    dataRendererOnRenderWrapper.getRenderEventExecutor().setRenderCallback(Integer.toString(onRenderMethodID));
    dataRendererOnRenderWrapper.getRenderEventExecutor().setRenderScriptExecuter(fc != null ? fc.getScriptExecuter() : null);
  }
  initDragNDrop(fc,startY);
  if (sortable) {
    if (initialSortString != null) {
      StringTokenizer tokByComma=new StringTokenizer(initialSortString,""String_Node_Str"");
      if (tokByComma.hasMoreTokens()) {
        String initialSortFirstToken=tokByComma.nextToken();
        StringTokenizer tokBySpace=new StringTokenizer(initialSortFirstToken);
        if (tokBySpace.hasMoreTokens()) {
          initialSortColumnName=tokBySpace.nextToken();
          if (tokBySpace.hasMoreTokens()) {
            String sortDir=tokBySpace.nextToken();
            if (sortDir.equalsIgnoreCase(""String_Node_Str""))             initialSortAsc=false;
          }
        }
      }
    }
    if (initialSortColumnName == null) {
      try {
        String dataSource=null;
        if (cellview instanceof Portal) {
          Portal p=(Portal)cellview;
          String relation=p.getRelationName();
          int lastDot=relation.lastIndexOf(""String_Node_Str"");
          if (lastDot >= 0) {
            relation=relation.substring(lastDot + 1);
          }
          Relation rel=application.getFlattenedSolution().getRelation(relation);
          if (rel != null) {
            dataSource=rel.getForeignDataSource();
          }
        }
 else {
          dataSource=form.getDataSource();
        }
        if (dataSource != null) {
          Iterator<String> pkColumnNames=application.getFoundSetManager().getTable(dataSource).getRowIdentColumnNames();
          if (pkColumnNames.hasNext()) {
            initialSortColumnName=pkColumnNames.next();
            initialSortAsc=true;
          }
        }
      }
 catch (      RepositoryException e) {
        Debug.log(""String_Node_Str"",e);
      }
    }
  }
  maxHeight=0;
  try {
    Iterator<IPersist> components=cellview.getAllObjects(PositionComparator.XY_PERSIST_COMPARATOR);
    while (components.hasNext()) {
      IPersist element=components.next();
      if (element instanceof Field || element instanceof GraphicalComponent) {
        if (element instanceof GraphicalComponent && ((GraphicalComponent)element).getLabelFor() != null) {
          labelsFor.put(((GraphicalComponent)element).getLabelFor(),element);
          continue;
        }
        Point l=((IFormElement)element).getLocation();
        if (l == null) {
          continue;
        }
        if (l.y >= startY && l.y < endY) {
          int height=((IFormElement)element).getSize().height;
          if (height > maxHeight)           maxHeight=height;
        }
      }
    }
    if (maxHeight == 0)     maxHeight=20;
  }
 catch (  Exception ex1) {
    Debug.error(""String_Node_Str"",ex1);
  }
  table=new WebCellBasedViewListView(""String_Node_Str"",data,1,cellview,dataProviderLookup,el,startY,endY,form);
  table.setReuseItems(true);
  add(table);
  final LinkedHashMap<String,IDataAdapter> dataadapters=new LinkedHashMap<String,IDataAdapter>();
  final SortedList<IPersist> columnTabSequence=new SortedList<IPersist>(TabSeqComparator.INSTANCE);
  createComponents(application,form,cellview,dataProviderLookup,el,startY,endY,new ItemAdd(){
    public void add(    IPersist element,    Component comp){
      if (element instanceof IFormElement && comp instanceof IComponent) {
        ((IComponent)comp).setLocation(((IFormElement)element).getLocation());
        ((IComponent)comp).setSize(((IFormElement)element).getSize());
      }
      elementToColumnIdentifierComponent.put(element,comp);
      if (cellview instanceof Form && element instanceof ISupportTabSeq && ((ISupportTabSeq)element).getTabSeq() >= 0) {
        columnTabSequence.add(element);
      }
      if (comp instanceof IDisplayData) {
        String dataprovider=((IDisplayData)comp).getDataProviderID();
        WebCellAdapter previous=(WebCellAdapter)dataadapters.get(dataprovider);
        if (previous == null) {
          WebCellAdapter wca=new WebCellAdapter(dataprovider,WebCellBasedView.this);
          dataadapters.put(dataprovider,wca);
        }
        if (dataprovider != null) {
          if (dataprovider.equals(initialSortColumnName))           initialSortedColumnId=comp.getId();
        }
      }
    }
  }
);
  for (int i=columnTabSequence.size() - 1; i >= 0; i--) {
    elementTabIndexes.put(columnTabSequence.get(i),Integer.valueOf(i));
  }
  if (addHeaders) {
    headers=new SortableCellViewHeaders(form,this,""String_Node_Str"",table,cellview,application,initialSortedColumnId,initialSortAsc,new IHeaders(){
      public void registerHeader(      IPersist matchingElement,      Component headerComponent){
        SortableCellViewHeader sortableHeader=(SortableCellViewHeader)headerComponent;
        Component columnIdentifier=WebCellBasedView.this.elementToColumnIdentifierComponent.get(matchingElement);
        if (columnIdentifier instanceof IProviderStylePropertyChanges) {
          String width=(String)((IProviderStylePropertyChanges)columnIdentifier).getStylePropertyChanges().getChanges().get(""String_Node_Str"");
          if (width != null) {
            sortableHeader.setWidth(Integer.parseInt(width.substring(0,width.length() - 2)));
          }
 else           if (matchingElement instanceof BaseComponent)           sortableHeader.setWidth(((BaseComponent)matchingElement).getSize().width);
        }
        sortableHeader.setTabIndex(tabIndex);
        sortableHeader.setScriptExecuter(el);
        WebCellBasedView.this.registerHeader(matchingElement,headerComponent);
      }
    }
);
    add(headers);
  }
  if (useAJAX) {
    add(pagingNavigator=new ServoyAjaxPagingNavigator(""String_Node_Str"",table));
    add(new ServoyTableResizeBehavior(startY,endY,cellview));
  }
 else {
    add(pagingNavigator=new ServoySubmitPagingNavigator(""String_Node_Str"",table));
  }
  int scrollbars=0;
  if (cellview instanceof Portal) {
    scrollbars=((Portal)cellview).getScrollbars();
  }
  if (cellview instanceof Form) {
    scrollbars=((Form)cellview).getScrollbars();
  }
  showPageNavigator=!((scrollbars & ISupportScrollbars.VERTICAL_SCROLLBAR_NEVER) == ISupportScrollbars.VERTICAL_SCROLLBAR_NEVER);
  try {
    if (cellview instanceof Portal) {
      relationName=((Portal)cellview).getRelationName();
      Relation[] rels=application.getFlattenedSolution().getRelationSequence(((Portal)cellview).getRelationName());
      if (rels != null) {
        Relation r=rels[rels.length - 1];
        if (r != null) {
          defaultSort=((FoundSetManager)application.getFoundSetManager()).getSortColumns(application.getFoundSetManager().getTable(r.getForeignDataSource()),((Portal)cellview).getInitialSort());
        }
      }
    }
 else {
      defaultSort=((FoundSetManager)application.getFoundSetManager()).getSortColumns(((Form)cellview).getDataSource(),((Form)cellview).getInitialSort());
    }
  }
 catch (  RepositoryException e) {
    Debug.error(e);
    defaultSort=new ArrayList<SortColumn>(1);
  }
  try {
    dal=new DataAdapterList(application,dataProviderLookup,elementToColumnIdentifierComponent,el.getFormController(),dataadapters,null);
  }
 catch (  RepositoryException ex) {
    Debug.error(ex);
  }
}",0.9925492785060832
143763,"@Override public void renderHead(HtmlHeaderContainer container){
  super.renderHead(container);
  IHeaderResponse headerResponse=container.getHeaderResponse();
  YUILoader.renderResize(headerResponse);
  String dim, dim_o, pos;
  if (orient == TabPanel.SPLIT_HORIZONTAL) {
    dim=""String_Node_Str"";
    dim_o=""String_Node_Str"";
    pos=""String_Node_Str"";
  }
 else {
    dim=""String_Node_Str"";
    dim_o=""String_Node_Str"";
    pos=""String_Node_Str"";
  }
  Map<String,String> leftPanelOverflow=getFormOverflowStyle(getLeftForm());
  Map<String,String> rightPanelOverflow=getFormOverflowStyle(getRightForm());
  StringBuffer resizeScript=new StringBuffer(""String_Node_Str"").append(splitter.getMarkupId()).append(""String_Node_Str"");
  resizeScript.append(""String_Node_Str"").append(splitComponents[0].getMarkupId()).append(""String_Node_Str"");
  resizeScript.append(""String_Node_Str"").append(isOpaque() ? ""String_Node_Str"" : ""String_Node_Str"").append(""String_Node_Str"");
  resizeScript.append(""String_Node_Str"").append(leftPanelOverflow.get(""String_Node_Str"")).append(""String_Node_Str"");
  resizeScript.append(""String_Node_Str"").append(leftPanelOverflow.get(""String_Node_Str"")).append(""String_Node_Str"");
  resizeScript.append(""String_Node_Str"").append(splitComponents[1].getMarkupId()).append(""String_Node_Str"");
  resizeScript.append(""String_Node_Str"").append(rightPanelOverflow.get(""String_Node_Str"")).append(""String_Node_Str"");
  resizeScript.append(""String_Node_Str"").append(rightPanelOverflow.get(""String_Node_Str"")).append(""String_Node_Str"");
  resizeScript.append(""String_Node_Str"").append(dim).append(""String_Node_Str"").append(dividerSize + leftFormMinSize).append(""String_Node_Str"").append(dim).append(""String_Node_Str"").append(dim).append(""String_Node_Str"").append(rightFormMinSize).append(""String_Node_Str"").append(continuousLayout ? ""String_Node_Str"" : ""String_Node_Str"");
  resizeScript.append(""String_Node_Str"").append(orient == TabPanel.SPLIT_HORIZONTAL ? ""String_Node_Str"" : ""String_Node_Str"").append(""String_Node_Str"");
  resizeScript.append(""String_Node_Str"").append(dim_o).append(""String_Node_Str"");
  String dividerBg=null;
  if (!isOpaque()) {
    dividerBg=""String_Node_Str"";
  }
 else   if (background != null) {
    dividerBg=Integer.toHexString(background.getRGB());
    dividerBg=""String_Node_Str"" + dividerBg.substring(2,dividerBg.length());
  }
  dim=dim.toLowerCase();
  resizeScript.append(""String_Node_Str"");
  resizeScript.append(""String_Node_Str"").append(""String_Node_Str"").append(dim).append(""String_Node_Str"").append(dividerSize).append(""String_Node_Str"").append(dividerBg != null ? ""String_Node_Str"" + dividerBg + ""String_Node_Str"" : ""String_Node_Str"").append(""String_Node_Str"");
  if (!continuousLayout) {
    resizeScript.append(""String_Node_Str"");
    resizeScript.append(""String_Node_Str"").append(dim_o).append(""String_Node_Str"");
    resizeScript.append(""String_Node_Str"").append(dim_o).append(""String_Node_Str"");
    resizeScript.append(""String_Node_Str"");
    resizeScript.append(""String_Node_Str"");
    resizeScript.append(""String_Node_Str"").append(orient == TabPanel.SPLIT_HORIZONTAL ? ""String_Node_Str"" : ""String_Node_Str"").append(""String_Node_Str"").append(dividerSize).append(""String_Node_Str"").append(dividerBg != null ? dividerBg : ""String_Node_Str"").append(""String_Node_Str"");
    resizeScript.append(""String_Node_Str"");
  }
  resizeScript.append(""String_Node_Str"");
  resizeScript.append(""String_Node_Str"").append(dim).append(""String_Node_Str"");
  resizeScript.append(""String_Node_Str"").append(dim_o).append(""String_Node_Str"");
  resizeScript.append(""String_Node_Str"").append(dim).append(""String_Node_Str"");
  resizeScript.append(""String_Node_Str"").append(dim).append(""String_Node_Str"").append(dividerSize).append(""String_Node_Str"");
  resizeScript.append(""String_Node_Str"").append(pos).append(""String_Node_Str"");
  resizeScript.append(""String_Node_Str"");
  resizeScript.append(""String_Node_Str"");
  resizeScript.append(""String_Node_Str"").append(dim).append(""String_Node_Str"");
  resizeScript.append(""String_Node_Str"").append(dim_o).append(""String_Node_Str"");
  resizeScript.append(""String_Node_Str"").append(dividerUpdater.getCallbackUrl()).append(""String_Node_Str"").append(""String_Node_Str"").append(""String_Node_Str"").append(dividerSize).append(""String_Node_Str"");
  resizeScript.append(""String_Node_Str"");
  boolean useAnchors=Utils.getAsBoolean(application.getRuntimeProperties().get(""String_Node_Str""));
  if (useAnchors) {
    String splitId=getMarkupId();
    resizeScript.append(""String_Node_Str"").append(""String_Node_Str"");
    resizeScript.append(""String_Node_Str"").append(splitId).append(""String_Node_Str"");
    resizeScript.append(""String_Node_Str"").append(splitId).append(""String_Node_Str"").append(orient == TabPanel.SPLIT_HORIZONTAL ? ""String_Node_Str"" : ""String_Node_Str"").append(""String_Node_Str"");
    resizeScript.append(""String_Node_Str"").append(splitId).append(""String_Node_Str"");
    resizeScript.append(""String_Node_Str"").append(splitId).append(""String_Node_Str"");
    resizeScript.append(""String_Node_Str"").append(splitId).append(""String_Node_Str"");
    resizeScript.append(""String_Node_Str"").append(splitId).append(""String_Node_Str"");
    resizeScript.append(""String_Node_Str"").append(splitId).append(""String_Node_Str"").append(orient == TabPanel.SPLIT_HORIZONTAL ? ""String_Node_Str"" : ""String_Node_Str"").append(""String_Node_Str"");
    resizeScript.append(""String_Node_Str"").append(splitId).append(""String_Node_Str"").append(resizeWeight).append(""String_Node_Str"");
    resizeScript.append(""String_Node_Str"").append(splitId).append(""String_Node_Str"").append(dividerSize).append(""String_Node_Str"");
    resizeScript.append(""String_Node_Str"").append(splitId).append(""String_Node_Str"").append(leftFormMinSize).append(""String_Node_Str"");
    resizeScript.append(""String_Node_Str"").append(splitId).append(""String_Node_Str"").append(rightFormMinSize).append(""String_Node_Str"");
    resizeScript.append(""String_Node_Str"").append(splitId).append(""String_Node_Str"").append(dividerUpdater.getCallbackUrl()).append(""String_Node_Str"");
    resizeScript.append(""String_Node_Str"");
  }
  ClientProperties clp=((WebClientInfo)Session.get().getClientInfo()).getProperties();
  if (clp.isBrowserKonqueror() || clp.isBrowserSafari())   headerResponse.renderOnLoadJavascript(resizeScript.toString());
 else   headerResponse.renderOnDomReadyJavascript(resizeScript.toString());
}","@Override public void renderHead(HtmlHeaderContainer container){
  super.renderHead(container);
  IHeaderResponse headerResponse=container.getHeaderResponse();
  YUILoader.renderResize(headerResponse);
  String dim, dim_o, pos;
  if (orient == TabPanel.SPLIT_HORIZONTAL) {
    dim=""String_Node_Str"";
    dim_o=""String_Node_Str"";
    pos=""String_Node_Str"";
  }
 else {
    dim=""String_Node_Str"";
    dim_o=""String_Node_Str"";
    pos=""String_Node_Str"";
  }
  Map<String,String> leftPanelOverflow=getFormOverflowStyle(getLeftForm());
  Map<String,String> rightPanelOverflow=getFormOverflowStyle(getRightForm());
  StringBuffer resizeScript=new StringBuffer(""String_Node_Str"").append(splitter.getMarkupId()).append(""String_Node_Str"");
  resizeScript.append(""String_Node_Str"").append(splitComponents[0].getMarkupId()).append(""String_Node_Str"");
  resizeScript.append(""String_Node_Str"").append(isOpaque() ? ""String_Node_Str"" : ""String_Node_Str"").append(""String_Node_Str"");
  resizeScript.append(""String_Node_Str"").append(leftPanelOverflow.get(""String_Node_Str"")).append(""String_Node_Str"");
  resizeScript.append(""String_Node_Str"").append(leftPanelOverflow.get(""String_Node_Str"")).append(""String_Node_Str"");
  resizeScript.append(""String_Node_Str"").append(splitComponents[1].getMarkupId()).append(""String_Node_Str"");
  resizeScript.append(""String_Node_Str"").append(rightPanelOverflow.get(""String_Node_Str"")).append(""String_Node_Str"");
  resizeScript.append(""String_Node_Str"").append(rightPanelOverflow.get(""String_Node_Str"")).append(""String_Node_Str"");
  resizeScript.append(""String_Node_Str"").append(dim).append(""String_Node_Str"").append(dividerSize + leftFormMinSize).append(""String_Node_Str"").append(dim).append(""String_Node_Str"").append(dim).append(""String_Node_Str"").append(rightFormMinSize).append(""String_Node_Str"").append(continuousLayout ? ""String_Node_Str"" : ""String_Node_Str"");
  resizeScript.append(""String_Node_Str"").append(orient == TabPanel.SPLIT_HORIZONTAL ? ""String_Node_Str"" : ""String_Node_Str"").append(""String_Node_Str"");
  resizeScript.append(""String_Node_Str"").append(dim_o).append(""String_Node_Str"");
  String dividerBg=null;
  if (!isOpaque()) {
    dividerBg=""String_Node_Str"";
  }
 else   if (background != null) {
    dividerBg=Integer.toHexString(background.getRGB());
    dividerBg=""String_Node_Str"" + dividerBg.substring(2,dividerBg.length());
  }
  dim=dim.toLowerCase();
  resizeScript.append(""String_Node_Str"");
  resizeScript.append(""String_Node_Str"").append(""String_Node_Str"").append(dim).append(""String_Node_Str"").append(dividerSize).append(""String_Node_Str"").append(dividerBg != null ? ""String_Node_Str"" + dividerBg + ""String_Node_Str"" : ""String_Node_Str"").append(""String_Node_Str"");
  ArrayList<String> tableViewTabIds=new ArrayList<String>();
  for (int i=0; i < 2; i++) {
    if (webTabs[i] != null) {
      int webTabFormViewType=webTabs[i].getPanel().getWebForm().getController().getView();
      if (webTabFormViewType == FormController.TABLE_VIEW || webTabFormViewType == FormController.LOCKED_TABLE_VIEW) {
        tableViewTabIds.add(webTabs[i].getPanel().getFormName());
      }
    }
  }
  for (  String tableViewTabId : tableViewTabIds) {
    resizeScript.append(""String_Node_Str"").append(tableViewTabId).append(""String_Node_Str"").append(tableViewTabId).append(""String_Node_Str"");
    resizeScript.append(""String_Node_Str"").append(tableViewTabId).append(""String_Node_Str"").append(tableViewTabId).append(""String_Node_Str"");
  }
  if (!continuousLayout) {
    resizeScript.append(""String_Node_Str"");
    resizeScript.append(""String_Node_Str"").append(dim_o).append(""String_Node_Str"");
    resizeScript.append(""String_Node_Str"").append(dim_o).append(""String_Node_Str"");
    resizeScript.append(""String_Node_Str"");
    resizeScript.append(""String_Node_Str"");
    resizeScript.append(""String_Node_Str"").append(orient == TabPanel.SPLIT_HORIZONTAL ? ""String_Node_Str"" : ""String_Node_Str"").append(""String_Node_Str"").append(dividerSize).append(""String_Node_Str"").append(dividerBg != null ? dividerBg : ""String_Node_Str"").append(""String_Node_Str"");
    resizeScript.append(""String_Node_Str"");
  }
  resizeScript.append(""String_Node_Str"");
  resizeScript.append(""String_Node_Str"").append(dim).append(""String_Node_Str"");
  resizeScript.append(""String_Node_Str"").append(dim_o).append(""String_Node_Str"");
  resizeScript.append(""String_Node_Str"").append(dim).append(""String_Node_Str"");
  resizeScript.append(""String_Node_Str"").append(dim).append(""String_Node_Str"").append(dividerSize).append(""String_Node_Str"");
  resizeScript.append(""String_Node_Str"").append(pos).append(""String_Node_Str"");
  resizeScript.append(""String_Node_Str"");
  resizeScript.append(""String_Node_Str"");
  resizeScript.append(""String_Node_Str"").append(dim).append(""String_Node_Str"");
  resizeScript.append(""String_Node_Str"").append(dim_o).append(""String_Node_Str"");
  resizeScript.append(""String_Node_Str"").append(dividerUpdater.getCallbackUrl()).append(""String_Node_Str"").append(""String_Node_Str"").append(""String_Node_Str"").append(dividerSize).append(""String_Node_Str"");
  resizeScript.append(""String_Node_Str"");
  boolean useAnchors=Utils.getAsBoolean(application.getRuntimeProperties().get(""String_Node_Str""));
  if (useAnchors) {
    String splitId=getMarkupId();
    resizeScript.append(""String_Node_Str"").append(""String_Node_Str"");
    resizeScript.append(""String_Node_Str"").append(splitId).append(""String_Node_Str"");
    resizeScript.append(""String_Node_Str"").append(splitId).append(""String_Node_Str"").append(orient == TabPanel.SPLIT_HORIZONTAL ? ""String_Node_Str"" : ""String_Node_Str"").append(""String_Node_Str"");
    resizeScript.append(""String_Node_Str"").append(splitId).append(""String_Node_Str"");
    resizeScript.append(""String_Node_Str"").append(splitId).append(""String_Node_Str"");
    resizeScript.append(""String_Node_Str"").append(splitId).append(""String_Node_Str"");
    resizeScript.append(""String_Node_Str"").append(splitId).append(""String_Node_Str"");
    resizeScript.append(""String_Node_Str"").append(splitId).append(""String_Node_Str"").append(orient == TabPanel.SPLIT_HORIZONTAL ? ""String_Node_Str"" : ""String_Node_Str"").append(""String_Node_Str"");
    resizeScript.append(""String_Node_Str"").append(splitId).append(""String_Node_Str"").append(resizeWeight).append(""String_Node_Str"");
    resizeScript.append(""String_Node_Str"").append(splitId).append(""String_Node_Str"").append(dividerSize).append(""String_Node_Str"");
    resizeScript.append(""String_Node_Str"").append(splitId).append(""String_Node_Str"").append(leftFormMinSize).append(""String_Node_Str"");
    resizeScript.append(""String_Node_Str"").append(splitId).append(""String_Node_Str"").append(rightFormMinSize).append(""String_Node_Str"");
    resizeScript.append(""String_Node_Str"").append(splitId).append(""String_Node_Str"").append(dividerUpdater.getCallbackUrl()).append(""String_Node_Str"");
    resizeScript.append(""String_Node_Str"");
  }
  ClientProperties clp=((WebClientInfo)Session.get().getClientInfo()).getProperties();
  if (clp.isBrowserKonqueror() || clp.isBrowserSafari())   headerResponse.renderOnLoadJavascript(resizeScript.toString());
 else   headerResponse.renderOnDomReadyJavascript(resizeScript.toString());
}",0.94452200749504
143764,"public static boolean needsWrapperDivForAnchoring(Field field){
  return (field.getDisplayType() == Field.PASSWORD) || (field.getDisplayType() == Field.TEXT_AREA) || (field.getDisplayType() == Field.COMBOBOX)|| (field.getDisplayType() == Field.TYPE_AHEAD)|| (field.getDisplayType() == Field.TEXT_FIELD);
}","public static boolean needsWrapperDivForAnchoring(Field field){
  return (field.getDisplayType() == Field.PASSWORD) || (field.getDisplayType() == Field.TEXT_AREA) || (field.getDisplayType() == Field.COMBOBOX)|| (field.getDisplayType() == Field.TYPE_AHEAD)|| (field.getDisplayType() == Field.TEXT_FIELD)|| (field.getDisplayType() == Field.HTML_AREA && field.getEditable());
}",0.898379970544919
143765,"protected void instrumentAndReplaceBody(MarkupStream markupStream,ComponentTag openTag,CharSequence bodyText){
  replaceComponentTagBody(markupStream,openTag,instrumentBodyText(bodyText,halign,valign));
}","protected void instrumentAndReplaceBody(MarkupStream markupStream,ComponentTag openTag,CharSequence bodyText){
  replaceComponentTagBody(markupStream,openTag,instrumentBodyText(bodyText,halign,valign,false,false));
}",0.9714285714285714
143766,"protected static String instrumentBodyText(CharSequence bodyText,int halign,int valign){
  StringBuffer instrumentedBodyText=new StringBuffer();
  instrumentedBodyText.append(""String_Node_Str"");
  if (halign != ISupportTextSetup.RIGHT && valign != ISupportTextSetup.CENTER)   instrumentedBodyText.append(""String_Node_Str"");
  if (halign != ISupportTextSetup.LEFT && valign != ISupportTextSetup.CENTER)   instrumentedBodyText.append(""String_Node_Str"");
  if (halign == ISupportTextSetup.LEFT)   instrumentedBodyText.append(""String_Node_Str"");
 else   if (halign == ISupportTextSetup.RIGHT)   instrumentedBodyText.append(""String_Node_Str"");
 else   instrumentedBodyText.append(""String_Node_Str"");
  if (valign != ISupportTextSetup.CENTER)   instrumentedBodyText.append(""String_Node_Str"");
  if (valign == ISupportTextSetup.TOP)   instrumentedBodyText.append(""String_Node_Str"");
 else   if (valign == ISupportTextSetup.BOTTOM)   instrumentedBodyText.append(""String_Node_Str"");
  instrumentedBodyText.append(""String_Node_Str"");
  if (bodyText != null)   instrumentedBodyText.append(bodyText);
  instrumentedBodyText.append(""String_Node_Str"");
  return instrumentedBodyText.toString();
}","protected static String instrumentBodyText(CharSequence bodyText,int halign,int valign,boolean fullWidth,boolean fullHeight){
  StringBuffer instrumentedBodyText=new StringBuffer();
  instrumentedBodyText.append(""String_Node_Str"");
  if (halign != ISupportTextSetup.RIGHT && valign != ISupportTextSetup.CENTER)   instrumentedBodyText.append(""String_Node_Str"");
  if (halign != ISupportTextSetup.LEFT && valign != ISupportTextSetup.CENTER)   instrumentedBodyText.append(""String_Node_Str"");
  if (halign == ISupportTextSetup.LEFT)   instrumentedBodyText.append(""String_Node_Str"");
 else   if (halign == ISupportTextSetup.RIGHT)   instrumentedBodyText.append(""String_Node_Str"");
 else   instrumentedBodyText.append(""String_Node_Str"");
  if (valign != ISupportTextSetup.CENTER)   instrumentedBodyText.append(""String_Node_Str"");
  if (valign == ISupportTextSetup.TOP)   instrumentedBodyText.append(""String_Node_Str"");
 else   if (valign == ISupportTextSetup.BOTTOM)   instrumentedBodyText.append(""String_Node_Str"");
  if (fullWidth)   instrumentedBodyText.append(""String_Node_Str"");
  if (fullHeight)   instrumentedBodyText.append(""String_Node_Str"");
  instrumentedBodyText.append(""String_Node_Str"");
  if (bodyText != null)   instrumentedBodyText.append(bodyText);
  instrumentedBodyText.append(""String_Node_Str"");
  return instrumentedBodyText.toString();
}",0.9321766561514196
143767,"protected void instrumentAndReplaceBody(MarkupStream markupStream,ComponentTag openTag,CharSequence bodyText){
  replaceComponentTagBody(markupStream,openTag,WebBaseButton.instrumentBodyText(bodyText,halign,valign));
}","protected void instrumentAndReplaceBody(MarkupStream markupStream,ComponentTag openTag,CharSequence bodyText){
  replaceComponentTagBody(markupStream,openTag,WebBaseButton.instrumentBodyText(bodyText,halign,valign,false,false));
}",0.9732142857142856
143768,"protected void instrumentAndReplaceBody(MarkupStream markupStream,ComponentTag openTag,CharSequence bodyText){
  replaceComponentTagBody(markupStream,openTag,WebBaseButton.instrumentBodyText(bodyText,halign,valign));
}","protected void instrumentAndReplaceBody(MarkupStream markupStream,ComponentTag openTag,CharSequence bodyText){
  replaceComponentTagBody(markupStream,openTag,WebBaseButton.instrumentBodyText(bodyText,halign,valign,fillAllSpace(),fillAllSpace()));
}",0.9356223175965666
143769,"protected void addOrCondition(String dataProviderId,QueryTable qTable,String likeValue,String[] displayValues,OrCondition overallOr){
  IQuerySelectValue querySelect=DBValueList.getQuerySelectValue(table,qTable,dataProviderId);
  if (table.getColumnType(dataProviderId) != IColumnTypes.TEXT) {
    querySelect=new QueryFunction(QueryFunction.CAST,new IQuerySelectValue[]{querySelect,new QueryColumnValue(""String_Node_Str"",null,true)},null);
  }
 else {
    querySelect=new QueryFunction(QueryFunction.UPPER,querySelect,dataProviderId);
  }
  if (displayValues != null) {
    for (    String displayValue : displayValues) {
      overallOr.addCondition(new CompareCondition(ISQLCondition.LIKE_OPERATOR,querySelect,displayValue));
    }
  }
  overallOr.addCondition(new CompareCondition(ISQLCondition.LIKE_OPERATOR,querySelect,likeValue));
}","protected void addOrCondition(String dataProviderId,QueryTable qTable,String likeValue,String[] displayValues,OrCondition overallOr){
  IQuerySelectValue querySelect=DBValueList.getQuerySelectValue(table,qTable,dataProviderId);
  if (displayValues != null) {
    for (    String displayValue : displayValues) {
      overallOr.addCondition(SQLGenerator.createLikeCompareCondition(querySelect,table.getColumnType(dataProviderId),displayValue));
    }
  }
  overallOr.addCondition(SQLGenerator.createLikeCompareCondition(querySelect,table.getColumnType(dataProviderId),likeValue));
}",0.4267605633802817
143770,"public Object findDuplicate(String nameToCheck,int skip_element_id,ValidatorSearchContext searchContext) throws RepositoryException {
  if (solutionRoot == null) {
    return null;
  }
  if (nameToCheck == null) {
    Debug.error(""String_Node_Str"" + skip_element_id);
    return null;
  }
  if (searchContext == null) {
    return null;
  }
  if ((searchContext.getType() == IRepository.SCRIPTVARIABLES || searchContext.getType() == IRepository.METHODS) && !(searchContext.getObject() instanceof Form)) {
    Iterator<ScriptVariable> vars=solutionRoot.getScriptVariables(false);
    while (vars.hasNext()) {
      ScriptVariable sgv=vars.next();
      if (nameToCheck.equals(sgv.getName()) && sgv.getID() != skip_element_id) {
        return sgv;
      }
    }
    Iterator<ScriptMethod> scripts=solutionRoot.getScriptMethods(false);
    while (scripts.hasNext()) {
      ScriptMethod sm=scripts.next();
      if (nameToCheck.equals(sm.getName()) && sm.getID() != skip_element_id) {
        return sm;
      }
    }
  }
  if (searchContext.getType() == IRepository.FORMS) {
    Iterator<Form> it=solutionRoot.getForms(false);
    while (it.hasNext()) {
      Form form=it.next();
      if (nameToCheck.equalsIgnoreCase(form.getName()) && form.getID() != skip_element_id) {
        return form;
      }
    }
  }
  if (searchContext.getObject() instanceof Form && searchContext.getType() != IRepository.ELEMENTS && searchContext.getType() != IRepository.FORMS) {
    Object obj=testRelations(nameToCheck,skip_element_id);
    if (obj != null)     return obj;
    obj=testFormScripts((Form)searchContext.getObject(),nameToCheck,skip_element_id);
    if (obj != null)     return obj;
    obj=testFormVars((Form)searchContext.getObject(),nameToCheck,skip_element_id);
    if (obj != null)     return obj;
    obj=testTableProviders(((Form)searchContext.getObject()).getTable(),nameToCheck,skip_element_id,false,false);
    if (obj != null)     return obj;
  }
  if (searchContext.getObject() instanceof Table) {
    Object obj=testRelations(nameToCheck,skip_element_id);
    if (obj != null)     return obj;
    Iterator<Form> it=solutionRoot.getForms((Table)searchContext.getObject(),false);
    while (it.hasNext()) {
      Form f=it.next();
      obj=testFormScripts(f,nameToCheck,skip_element_id);
      if (obj != null)       return obj;
    }
    obj=testTableProviders((Table)searchContext.getObject(),nameToCheck,skip_element_id,searchContext.getType() == IRepository.COLUMNS,searchContext.getType() == IRepository.SCRIPTCALCULATIONS);
    if (obj != null)     return obj;
  }
  if (searchContext.getType() == IRepository.RELATIONS) {
    Object obj=testRelations(nameToCheck,skip_element_id);
    if (obj != null)     return obj;
    Iterator<Form> it=solutionRoot.getForms(false);
    while (it.hasNext()) {
      obj=testFormScripts(it.next(),nameToCheck,skip_element_id);
      if (obj != null)       return obj;
    }
  }
  if (searchContext.getType() == IRepository.VALUELISTS) {
    Iterator<ValueList> it=solutionRoot.getValueLists(false);
    while (it.hasNext()) {
      ValueList vl=it.next();
      if (nameToCheck.equalsIgnoreCase(vl.getName()) && vl.getID() != skip_element_id) {
        return vl;
      }
    }
  }
  if (searchContext.getType() == IRepository.MEDIA) {
    Iterator<Media> it=solutionRoot.getMedias(false);
    while (it.hasNext()) {
      Media media=it.next();
      if (nameToCheck.equalsIgnoreCase(media.getName()) && media.getID() != skip_element_id) {
        return media;
      }
    }
  }
  if (searchContext.getType() == IRepository.ELEMENTS) {
    Iterator<IPersist> iterator=((ISupportChilds)searchContext.getObject()).getAllObjects();
    while (iterator.hasNext()) {
      IPersist persist=iterator.next();
      if (persist instanceof IFormElement && persist.getID() != skip_element_id) {
        if (persist instanceof ISupportName && nameToCheck.equalsIgnoreCase(((ISupportName)persist).getName())) {
          return persist;
        }
        if (nameToCheck.equalsIgnoreCase(((IFormElement)persist).getGroupID())) {
          return new FormElementGroup(((IFormElement)persist).getGroupID(),solutionRoot,(Form)persist.getParent());
        }
      }
    }
  }
  if (searchContext.getType() == IRepository.TABS) {
    Iterator<IPersist> iterator=((ISupportChilds)searchContext.getObject()).getAllObjects();
    while (iterator.hasNext()) {
      IPersist persist=iterator.next();
      if (persist instanceof Tab && nameToCheck.equalsIgnoreCase(((Tab)persist).getName()) && persist.getID() != skip_element_id) {
        return persist;
      }
    }
  }
  return null;
}","public Object findDuplicate(String nameToCheck,int skip_element_id,ValidatorSearchContext searchContext) throws RepositoryException {
  if (solutionRoot == null) {
    return null;
  }
  if (nameToCheck == null) {
    Debug.error(""String_Node_Str"" + skip_element_id);
    return null;
  }
  if (searchContext == null) {
    return null;
  }
  if (searchContext.getType() == IRepository.METHODS && searchContext.getObject() instanceof TableNode) {
    TableNode tn=(TableNode)searchContext.getObject();
    Table table=tn.getTable();
    Iterator<ScriptCalculation> calculations=solutionRoot.getScriptCalculations(table,false);
    while (calculations.hasNext()) {
      ScriptCalculation sc=calculations.next();
      if (nameToCheck.equals(sc.getName()) && sc.getID() != skip_element_id) {
        return sc;
      }
    }
  }
  if ((searchContext.getType() == IRepository.SCRIPTVARIABLES || searchContext.getType() == IRepository.METHODS) && !(searchContext.getObject() instanceof Form)) {
    Iterator<ScriptVariable> vars=solutionRoot.getScriptVariables(false);
    while (vars.hasNext()) {
      ScriptVariable sgv=vars.next();
      if (nameToCheck.equals(sgv.getName()) && sgv.getID() != skip_element_id) {
        return sgv;
      }
    }
    Iterator<ScriptMethod> scripts=solutionRoot.getScriptMethods(false);
    while (scripts.hasNext()) {
      ScriptMethod sm=scripts.next();
      if (nameToCheck.equals(sm.getName()) && sm.getID() != skip_element_id) {
        return sm;
      }
    }
  }
  if (searchContext.getType() == IRepository.FORMS) {
    Iterator<Form> it=solutionRoot.getForms(false);
    while (it.hasNext()) {
      Form form=it.next();
      if (nameToCheck.equalsIgnoreCase(form.getName()) && form.getID() != skip_element_id) {
        return form;
      }
    }
  }
  if (searchContext.getObject() instanceof Form && searchContext.getType() != IRepository.ELEMENTS && searchContext.getType() != IRepository.FORMS) {
    Object obj=testRelations(nameToCheck,skip_element_id);
    if (obj != null)     return obj;
    obj=testFormScripts((Form)searchContext.getObject(),nameToCheck,skip_element_id);
    if (obj != null)     return obj;
    obj=testFormVars((Form)searchContext.getObject(),nameToCheck,skip_element_id);
    if (obj != null)     return obj;
    obj=testTableProviders(((Form)searchContext.getObject()).getTable(),nameToCheck,skip_element_id,false,false);
    if (obj != null)     return obj;
  }
  if (searchContext.getObject() instanceof Table) {
    Object obj=testRelations(nameToCheck,skip_element_id);
    if (obj != null)     return obj;
    Iterator<Form> it=solutionRoot.getForms((Table)searchContext.getObject(),false);
    while (it.hasNext()) {
      Form f=it.next();
      obj=testFormScripts(f,nameToCheck,skip_element_id);
      if (obj != null)       return obj;
    }
    obj=testTableProviders((Table)searchContext.getObject(),nameToCheck,skip_element_id,searchContext.getType() == IRepository.COLUMNS,searchContext.getType() == IRepository.SCRIPTCALCULATIONS);
    if (obj != null)     return obj;
  }
  if (searchContext.getType() == IRepository.RELATIONS) {
    Object obj=testRelations(nameToCheck,skip_element_id);
    if (obj != null)     return obj;
    Iterator<Form> it=solutionRoot.getForms(false);
    while (it.hasNext()) {
      obj=testFormScripts(it.next(),nameToCheck,skip_element_id);
      if (obj != null)       return obj;
    }
  }
  if (searchContext.getType() == IRepository.VALUELISTS) {
    Iterator<ValueList> it=solutionRoot.getValueLists(false);
    while (it.hasNext()) {
      ValueList vl=it.next();
      if (nameToCheck.equalsIgnoreCase(vl.getName()) && vl.getID() != skip_element_id) {
        return vl;
      }
    }
  }
  if (searchContext.getType() == IRepository.MEDIA) {
    Iterator<Media> it=solutionRoot.getMedias(false);
    while (it.hasNext()) {
      Media media=it.next();
      if (nameToCheck.equalsIgnoreCase(media.getName()) && media.getID() != skip_element_id) {
        return media;
      }
    }
  }
  if (searchContext.getType() == IRepository.ELEMENTS) {
    Iterator<IPersist> iterator=((ISupportChilds)searchContext.getObject()).getAllObjects();
    while (iterator.hasNext()) {
      IPersist persist=iterator.next();
      if (persist instanceof IFormElement && persist.getID() != skip_element_id) {
        if (persist instanceof ISupportName && nameToCheck.equalsIgnoreCase(((ISupportName)persist).getName())) {
          return persist;
        }
        if (nameToCheck.equalsIgnoreCase(((IFormElement)persist).getGroupID())) {
          return new FormElementGroup(((IFormElement)persist).getGroupID(),solutionRoot,(Form)persist.getParent());
        }
      }
    }
  }
  if (searchContext.getType() == IRepository.TABS) {
    Iterator<IPersist> iterator=((ISupportChilds)searchContext.getObject()).getAllObjects();
    while (iterator.hasNext()) {
      IPersist persist=iterator.next();
      if (persist instanceof Tab && nameToCheck.equalsIgnoreCase(((Tab)persist).getName()) && persist.getID() != skip_element_id) {
        return persist;
      }
    }
  }
  return null;
}",0.949984594844408
143771,"@SuppressWarnings(""String_Node_Str"") private void init(WebClient sc){
  setStatelessHint(false);
  client=sc;
  webForms=new ArrayList<IFormUIInternal<?>>();
  title=new Label(""String_Node_Str"",new Model<String>(""String_Node_Str""));
  add(title);
  useAJAX=Utils.getAsBoolean(client.getRuntimeProperties().get(""String_Node_Str""));
  int dataNotifyFrequency=Utils.getAsInteger(sc.getSettings().getProperty(""String_Node_Str"",""String_Node_Str""));
  if (dataNotifyFrequency > 0 && useAJAX) {
    add(new AbstractAjaxTimerBehavior(Duration.seconds(dataNotifyFrequency)){
      private static final long serialVersionUID=1L;
      /** 
 * @see wicket.ajax.AbstractAjaxTimerBehavior#onTimer(wicket.ajax.AjaxRequestTarget)
 */
      @Override protected void onTimer(      AjaxRequestTarget target){
        WebEventExecutor.generateResponse(target,MainPage.this);
      }
      @Override public void renderHead(      IHeaderResponse response){
        super.renderHead(response);
        String jsTimerScript=getJsTimeoutCall(getUpdateInterval());
        response.renderJavascript(""String_Node_Str"" + jsTimerScript + ""String_Node_Str"",""String_Node_Str"");
      }
      @Override protected CharSequence getPreconditionScript(){
        return ""String_Node_Str"";
      }
      /** 
 * @see org.apache.wicket.ajax.AbstractDefaultAjaxBehavior#getFailureScript()
 */
      @Override protected CharSequence getFailureScript(){
        return ""String_Node_Str"";
      }
      @Override protected CharSequence getCallbackScript(){
        return generateCallbackScript(""String_Node_Str"" + getCallbackUrl(onlyTargetActivePage()) + ""String_Node_Str"");
      }
      /** 
 * @see org.apache.wicket.ajax.AbstractDefaultAjaxBehavior#findIndicatorId()
 */
      @Override protected String findIndicatorId(){
        return null;
      }
      /** 
 * @see org.apache.wicket.behavior.AbstractBehavior#isEnabled(org.apache.wicket.Component)
 */
      @Override public boolean isEnabled(      Component component){
        return !client.getFlattenedSolution().isInDesign(null) && getController() != null && getController().isFormVisible();
      }
    }
);
    add(new TriggerResizeAjaxBehavior(){
      @Override public void renderHead(      IHeaderResponse response){
        super.renderHead(response);
        String jsCall=""String_Node_Str"" + getCallbackUrl() + ""String_Node_Str"";
        response.renderOnLoadJavascript(jsCall);
      }
      @Override public boolean isEnabled(      Component component){
        if (super.isEnabled(component)) {
          final boolean[] returnValue={false};
          MainPage page=(MainPage)findPage();
          if (page != null) {
            page.visitChildren(WebForm.class,new Component.IVisitor<WebForm>(){
              public Object component(              WebForm form){
                if (form.getFormWidth() == 0) {
                  returnValue[0]=true;
                  return IVisitor.STOP_TRAVERSAL;
                }
                return IVisitor.CONTINUE_TRAVERSAL;
              }
            }
);
          }
          return returnValue[0];
        }
        return false;
      }
    }
);
  }
  add(new AbstractServoyDefaultAjaxBehavior(){
    @Override protected void respond(    AjaxRequestTarget target){
      for (      ServoyDivDialog divDialog : divDialogs.values()) {
        if (!divDialog.isShown()) {
          divDialog.show(target);
        }
      }
      WebEventExecutor.generateResponse(target,MainPage.this);
    }
    @Override public void renderHead(    IHeaderResponse response){
      super.renderHead(response);
      response.renderOnDomReadyJavascript(getCallbackScript(true).toString());
    }
    @Override public boolean isEnabled(    Component component){
      return divDialogs.size() > 0 && super.isEnabled(component);
    }
  }
);
  body=new WebMarkupContainer(""String_Node_Str""){
    private static final long serialVersionUID=1L;
    /** 
 * @see org.apache.wicket.Component#onComponentTag(org.apache.wicket.markup.ComponentTag)
 */
    @Override protected void onComponentTag(    ComponentTag tag){
      super.onComponentTag(tag);
      tag.putAll(bodyAttributes);
    }
  }
;
  body.add(new AttributeModifier(""String_Node_Str"",true,new AbstractReadOnlyModel<String>(){
    @Override public String getObject(){
      String value=AttributeModifier.VALUELESS_ATTRIBUTE_REMOVE;
      Locale l=client.getLocale();
      Solution solution=client.getSolution();
      if (solution != null && l != null) {
        value=OrientationApplier.getHTMLContainerOrientation(l,solution.getTextOrientation());
      }
      return value;
    }
  }
));
  add(body);
  pageContributor=new PageContributor(client,""String_Node_Str"");
  body.add(pageContributor);
  Label loadingIndicator=new Label(""String_Node_Str"",sc.getI18NMessage(""String_Node_Str""));
  loadingIndicator.add(new SimpleAttributeModifier(""String_Node_Str"",""String_Node_Str""));
  body.add(loadingIndicator);
  divDialogsParent=new WebMarkupContainer(DIV_DIALOGS_REPEATER_PARENT_ID);
  divDialogsParent.setOutputMarkupPlaceholderTag(true);
  divDialogsParent.setVisible(false);
  body.add(divDialogsParent);
  if (useAJAX) {
    add(new TriggerUpdateAjaxBehavior());
    divDialogRepeater=new RepeatingView(DIV_DIALOG_REPEATER_ID);
    divDialogsParent.add(divDialogRepeater);
    fileUploadWindow=new ServoyDivDialog(FILE_UPLOAD_DIALOG_ID,isShowingInDialog());
    body.add(fileUploadWindow);
    fileUploadWindow.setModal(true);
    fileUploadWindow.setPageMapName(null);
    fileUploadWindow.setCookieName(""String_Node_Str"");
    fileUploadWindow.setResizable(true);
    fileUploadWindow.setInitialHeight(150);
    fileUploadWindow.setInitialWidth(400);
    fileUploadWindow.setMinimalHeight(130);
    fileUploadWindow.setMinimalWidth(400);
    fileUploadWindow.setUseInitialHeight(true);
    fileUploadWindow.setPageCreator(new ModalWindow.PageCreator(){
      private static final long serialVersionUID=1L;
      public Page createPage(){
        return new MediaUploadPage(PageMap.forName(FILE_UPLOAD_PAGEMAP),mediaUploadCallback,mediaUploadMultiSelect);
      }
    }
);
    fileUploadWindow.setWindowClosedCallback(new ModalWindow.WindowClosedCallback(){
      private static final long serialVersionUID=1L;
      public void onClose(      AjaxRequestTarget target){
        fileUploadWindow.setPageMapName(null);
        fileUploadWindow.remove(fileUploadWindow.getContentId());
        WebEventExecutor.generateResponse(target,findPage());
      }
    }
);
  }
 else {
    divDialogsParent.add(new Label(""String_Node_Str""));
    body.add(new Label(""String_Node_Str""));
  }
  IModel<String> styleHrefModel=new AbstractReadOnlyModel<String>(){
    private static final long serialVersionUID=1L;
    @Override public String getObject(){
      if (main != null) {
        return ""String_Node_Str"" + client.getUIProperty(WEBCONSTANTS.WEBCLIENT_TEMPLATES_DIR) + ""String_Node_Str"";
      }
      return null;
    }
  }
;
  Label main_form_style=new Label(""String_Node_Str"");
  main_form_style.add(new AttributeModifier(""String_Node_Str"",true,styleHrefModel));
  add(main_form_style);
  IModel<List<IFormUIInternal<?>>> loopModel=new AbstractReadOnlyModel<List<IFormUIInternal<?>>>(){
    private static final long serialVersionUID=1L;
    @Override public List<IFormUIInternal<?>> getObject(){
      return webForms;
    }
  }
;
  listview=new ListView<IFormUIInternal<?>>(""String_Node_Str"",loopModel){
    private static final long serialVersionUID=1L;
    @Override protected void populateItem(    ListItem<IFormUIInternal<?>> item){
      final WebForm form=(WebForm)item.getModelObject();
      if (form.getParent() != null) {
        form.remove();
      }
      item.add(form);
      IFormLayoutProvider layoutProvider=FormLayoutProviderFactory.getFormLayoutProvider(client,client.getSolution(),form.getController().getForm(),form.getController().getName());
      TextualStyle styleToReturn=null;
      if ((navigator != null) && (form == navigator.getFormUI())) {
        styleToReturn=layoutProvider.getLayoutForForm(navigator.getForm().getSize().width,true,false);
      }
 else       if (form == main) {
        int customNavWidth=0;
        if (navigator != null)         customNavWidth=navigator.getForm().getSize().width;
        styleToReturn=layoutProvider.getLayoutForForm(customNavWidth,false,false);
      }
      if (styleToReturn != null) {
        form.add(new StyleAppendingModifier(styleToReturn){
          @Override public boolean isEnabled(          Component component){
            return (component.findParent(WebTabPanel.class) == null) && (component.findParent(WebSplitPane.class) == null);
          }
        }
);
      }
      TabIndexHelper.setUpTabIndexAttributeModifier(item,ISupportWebTabSeq.SKIP);
    }
    /** 
 * @see org.apache.wicket.markup.html.list.ListView#onBeforeRender()
 */
    @Override protected void onBeforeRender(){
      super.onBeforeRender();
      visitChildren(WebTabPanel.class,new IVisitor<WebTabPanel>(){
        public Object component(        WebTabPanel wtp){
          wtp.initalizeFirstTab();
          return IVisitor.CONTINUE_TRAVERSAL;
        }
      }
);
      addWebAnchoringInfoIfNeeded(false);
      if (useAJAX)       pageContributor.addFocusEventListeners(MainPage.this);
    }
  }
;
  listview.setReuseItems(true);
  Form form=new ServoyForm(""String_Node_Str"");
  form.add(new SimpleAttributeModifier(""String_Node_Str"",""String_Node_Str""));
  form.add(listview);
  WebMarkupContainer defaultButton=new WebMarkupContainer(""String_Node_Str"",new Model());
  defaultButton.setVisible(!useAJAX);
  form.add(defaultButton);
  body.add(form);
}","@SuppressWarnings(""String_Node_Str"") private void init(WebClient sc){
  setStatelessHint(false);
  client=sc;
  webForms=new ArrayList<IFormUIInternal<?>>();
  title=new Label(""String_Node_Str"",new Model<String>(""String_Node_Str""));
  add(title);
  useAJAX=Utils.getAsBoolean(client.getRuntimeProperties().get(""String_Node_Str""));
  int dataNotifyFrequency=Utils.getAsInteger(sc.getSettings().getProperty(""String_Node_Str"",""String_Node_Str""));
  if (dataNotifyFrequency > 0 && useAJAX) {
    add(new AbstractAjaxTimerBehavior(Duration.seconds(dataNotifyFrequency)){
      private static final long serialVersionUID=1L;
      /** 
 * @see wicket.ajax.AbstractAjaxTimerBehavior#onTimer(wicket.ajax.AjaxRequestTarget)
 */
      @Override protected void onTimer(      AjaxRequestTarget target){
        WebEventExecutor.generateResponse(target,MainPage.this);
      }
      @Override public void renderHead(      IHeaderResponse response){
        super.renderHead(response);
        String jsTimerScript=getJsTimeoutCall(getUpdateInterval());
        response.renderJavascript(""String_Node_Str"" + jsTimerScript + ""String_Node_Str"",""String_Node_Str"");
      }
      @Override protected CharSequence getPreconditionScript(){
        return ""String_Node_Str"";
      }
      /** 
 * @see org.apache.wicket.ajax.AbstractDefaultAjaxBehavior#getFailureScript()
 */
      @Override protected CharSequence getFailureScript(){
        return ""String_Node_Str"";
      }
      @Override protected CharSequence getCallbackScript(){
        return generateCallbackScript(""String_Node_Str"" + getCallbackUrl(onlyTargetActivePage()) + ""String_Node_Str"");
      }
      /** 
 * @see org.apache.wicket.ajax.AbstractDefaultAjaxBehavior#findIndicatorId()
 */
      @Override protected String findIndicatorId(){
        return null;
      }
      /** 
 * @see org.apache.wicket.behavior.AbstractBehavior#isEnabled(org.apache.wicket.Component)
 */
      @Override public boolean isEnabled(      Component component){
        return !client.getFlattenedSolution().isInDesign(null) && getController() != null && getController().isFormVisible();
      }
    }
);
    add(new TriggerResizeAjaxBehavior(){
      @Override public void renderHead(      IHeaderResponse response){
        super.renderHead(response);
        if (isFormWidthZero()) {
          String jsCall=""String_Node_Str"" + getCallbackUrl() + ""String_Node_Str"";
          response.renderOnLoadJavascript(jsCall);
        }
      }
      private boolean isFormWidthZero(){
        final boolean[] returnValue={false};
        MainPage page=(MainPage)findPage();
        if (page != null) {
          page.visitChildren(WebForm.class,new Component.IVisitor<WebForm>(){
            public Object component(            WebForm form){
              if (form.getFormWidth() == 0) {
                returnValue[0]=true;
                return IVisitor.STOP_TRAVERSAL;
              }
              return IVisitor.CONTINUE_TRAVERSAL;
            }
          }
);
        }
        return returnValue[0];
      }
    }
);
  }
  add(new AbstractServoyDefaultAjaxBehavior(){
    @Override protected void respond(    AjaxRequestTarget target){
      for (      ServoyDivDialog divDialog : divDialogs.values()) {
        if (!divDialog.isShown()) {
          divDialog.show(target);
        }
      }
      WebEventExecutor.generateResponse(target,MainPage.this);
    }
    @Override public void renderHead(    IHeaderResponse response){
      super.renderHead(response);
      response.renderOnDomReadyJavascript(getCallbackScript(true).toString());
    }
    @Override public boolean isEnabled(    Component component){
      return divDialogs.size() > 0 && super.isEnabled(component);
    }
  }
);
  body=new WebMarkupContainer(""String_Node_Str""){
    private static final long serialVersionUID=1L;
    /** 
 * @see org.apache.wicket.Component#onComponentTag(org.apache.wicket.markup.ComponentTag)
 */
    @Override protected void onComponentTag(    ComponentTag tag){
      super.onComponentTag(tag);
      tag.putAll(bodyAttributes);
    }
  }
;
  body.add(new AttributeModifier(""String_Node_Str"",true,new AbstractReadOnlyModel<String>(){
    @Override public String getObject(){
      String value=AttributeModifier.VALUELESS_ATTRIBUTE_REMOVE;
      Locale l=client.getLocale();
      Solution solution=client.getSolution();
      if (solution != null && l != null) {
        value=OrientationApplier.getHTMLContainerOrientation(l,solution.getTextOrientation());
      }
      return value;
    }
  }
));
  add(body);
  pageContributor=new PageContributor(client,""String_Node_Str"");
  body.add(pageContributor);
  Label loadingIndicator=new Label(""String_Node_Str"",sc.getI18NMessage(""String_Node_Str""));
  loadingIndicator.add(new SimpleAttributeModifier(""String_Node_Str"",""String_Node_Str""));
  body.add(loadingIndicator);
  divDialogsParent=new WebMarkupContainer(DIV_DIALOGS_REPEATER_PARENT_ID);
  divDialogsParent.setOutputMarkupPlaceholderTag(true);
  divDialogsParent.setVisible(false);
  body.add(divDialogsParent);
  if (useAJAX) {
    add(new TriggerUpdateAjaxBehavior());
    divDialogRepeater=new RepeatingView(DIV_DIALOG_REPEATER_ID);
    divDialogsParent.add(divDialogRepeater);
    fileUploadWindow=new ServoyDivDialog(FILE_UPLOAD_DIALOG_ID,isShowingInDialog());
    body.add(fileUploadWindow);
    fileUploadWindow.setModal(true);
    fileUploadWindow.setPageMapName(null);
    fileUploadWindow.setCookieName(""String_Node_Str"");
    fileUploadWindow.setResizable(true);
    fileUploadWindow.setInitialHeight(150);
    fileUploadWindow.setInitialWidth(400);
    fileUploadWindow.setMinimalHeight(130);
    fileUploadWindow.setMinimalWidth(400);
    fileUploadWindow.setUseInitialHeight(true);
    fileUploadWindow.setPageCreator(new ModalWindow.PageCreator(){
      private static final long serialVersionUID=1L;
      public Page createPage(){
        return new MediaUploadPage(PageMap.forName(FILE_UPLOAD_PAGEMAP),mediaUploadCallback,mediaUploadMultiSelect);
      }
    }
);
    fileUploadWindow.setWindowClosedCallback(new ModalWindow.WindowClosedCallback(){
      private static final long serialVersionUID=1L;
      public void onClose(      AjaxRequestTarget target){
        fileUploadWindow.setPageMapName(null);
        fileUploadWindow.remove(fileUploadWindow.getContentId());
        WebEventExecutor.generateResponse(target,findPage());
      }
    }
);
  }
 else {
    divDialogsParent.add(new Label(""String_Node_Str""));
    body.add(new Label(""String_Node_Str""));
  }
  IModel<String> styleHrefModel=new AbstractReadOnlyModel<String>(){
    private static final long serialVersionUID=1L;
    @Override public String getObject(){
      if (main != null) {
        return ""String_Node_Str"" + client.getUIProperty(WEBCONSTANTS.WEBCLIENT_TEMPLATES_DIR) + ""String_Node_Str"";
      }
      return null;
    }
  }
;
  Label main_form_style=new Label(""String_Node_Str"");
  main_form_style.add(new AttributeModifier(""String_Node_Str"",true,styleHrefModel));
  add(main_form_style);
  IModel<List<IFormUIInternal<?>>> loopModel=new AbstractReadOnlyModel<List<IFormUIInternal<?>>>(){
    private static final long serialVersionUID=1L;
    @Override public List<IFormUIInternal<?>> getObject(){
      return webForms;
    }
  }
;
  listview=new ListView<IFormUIInternal<?>>(""String_Node_Str"",loopModel){
    private static final long serialVersionUID=1L;
    @Override protected void populateItem(    ListItem<IFormUIInternal<?>> item){
      final WebForm form=(WebForm)item.getModelObject();
      if (form.getParent() != null) {
        form.remove();
      }
      item.add(form);
      IFormLayoutProvider layoutProvider=FormLayoutProviderFactory.getFormLayoutProvider(client,client.getSolution(),form.getController().getForm(),form.getController().getName());
      TextualStyle styleToReturn=null;
      if ((navigator != null) && (form == navigator.getFormUI())) {
        styleToReturn=layoutProvider.getLayoutForForm(navigator.getForm().getSize().width,true,false);
      }
 else       if (form == main) {
        int customNavWidth=0;
        if (navigator != null)         customNavWidth=navigator.getForm().getSize().width;
        styleToReturn=layoutProvider.getLayoutForForm(customNavWidth,false,false);
      }
      if (styleToReturn != null) {
        form.add(new StyleAppendingModifier(styleToReturn){
          @Override public boolean isEnabled(          Component component){
            return (component.findParent(WebTabPanel.class) == null) && (component.findParent(WebSplitPane.class) == null);
          }
        }
);
      }
      TabIndexHelper.setUpTabIndexAttributeModifier(item,ISupportWebTabSeq.SKIP);
    }
    /** 
 * @see org.apache.wicket.markup.html.list.ListView#onBeforeRender()
 */
    @Override protected void onBeforeRender(){
      super.onBeforeRender();
      visitChildren(WebTabPanel.class,new IVisitor<WebTabPanel>(){
        public Object component(        WebTabPanel wtp){
          wtp.initalizeFirstTab();
          return IVisitor.CONTINUE_TRAVERSAL;
        }
      }
);
      addWebAnchoringInfoIfNeeded(false);
      if (useAJAX)       pageContributor.addFocusEventListeners(MainPage.this);
    }
  }
;
  listview.setReuseItems(true);
  Form form=new ServoyForm(""String_Node_Str"");
  form.add(new SimpleAttributeModifier(""String_Node_Str"",""String_Node_Str""));
  form.add(listview);
  WebMarkupContainer defaultButton=new WebMarkupContainer(""String_Node_Str"",new Model());
  defaultButton.setVisible(!useAJAX);
  form.add(defaultButton);
  body.add(form);
}",0.9873536299765808
143772,"@Override protected AppendingStringBuffer postProcessSettings(AppendingStringBuffer settings){
  settings=super.postProcessSettings(settings);
  settings.append(""String_Node_Str"").append(""String_Node_Str"");
  settings.append(isModal());
  settings.append(""String_Node_Str"");
  settings.append(""String_Node_Str"").append(""String_Node_Str"");
  settings.append(getJSId());
  settings.append(""String_Node_Str"");
  return settings;
}","@Override protected AppendingStringBuffer postProcessSettings(AppendingStringBuffer settings){
  settings=super.postProcessSettings(settings);
  settings.append(""String_Node_Str"").append(""String_Node_Str"");
  settings.append(getBoundEventsDelay());
  settings.append(""String_Node_Str"");
  settings.append(""String_Node_Str"").append(""String_Node_Str"");
  settings.append(isModal());
  settings.append(""String_Node_Str"");
  settings.append(""String_Node_Str"").append(""String_Node_Str"");
  settings.append(getJSId());
  settings.append(""String_Node_Str"");
  MoveBehavior mb=getBehaviors(MoveBehavior.class).get(0);
  settings.append(""String_Node_Str"");
  settings.append(mb.getCallbackScript());
  settings.append(""String_Node_Str"");
  ResizeBehavior rb=getBehaviors(ResizeBehavior.class).get(0);
  settings.append(""String_Node_Str"");
  settings.append(rb.getCallbackScript());
  settings.append(""String_Node_Str"");
  return settings;
}",0.6288659793814433
143773,"protected void initialize(){
  jsId=getNextJSId();
  add(JavascriptPackageResource.getHeaderContribution(JAVA_SCRIPT));
}","protected void initialize(){
  add(new MoveBehavior());
  add(new ResizeBehavior());
  jsId=getNextJSId();
  add(JavascriptPackageResource.getHeaderContribution(JAVA_SCRIPT));
}",0.8120805369127517
143774,"public void showPopupDiv(MainPage dialogContainer,String titleString,Rectangle r2,boolean resizeable,boolean closeAll,boolean modal,boolean firstShow){
  if (isShowingInDialog() && callingContainer != null)   callingContainer.showPopupDiv(dialogContainer,titleString,r2,resizeable,closeAll,modal,firstShow);
 else {
    if (useAJAX) {
      String windowName=dialogContainer.getPageMap().getName();
      ServoyDivDialog divDialog=divDialogs.get(windowName);
      if (divDialog == null) {
        divDialog=createDivDialog(windowName);
      }
      divDialog.setPageMapName(windowName);
      divDialog.setResizable(resizeable);
      divDialog.setUseInitialHeight(true);
      divDialog.setModal(modal);
      Rectangle bounds;
      if (FormManager.FULL_SCREEN.equals(r2)) {
        firstShow=true;
        Rectangle windowBounds=((WebClient)getController().getApplication()).getWindowBounds(this.getContainerName());
        bounds=new Rectangle(windowBounds.x,windowBounds.y,windowBounds.width,windowBounds.height - 45);
      }
 else {
        bounds=r2;
      }
      if (firstShow) {
        divDialog.setCookieBoundsOnShow(bounds);
        divDialog.setInitialHeight(bounds.height);
        divDialog.setInitialWidth(bounds.width);
      }
      divDialog.setCloseAll(closeAll);
      FormController fp=dialogContainer.getController();
      String titleStr=titleString;
      if (titleStr == null)       titleStr=fp.getForm().getTitleText();
      if (titleStr == null)       titleStr=fp.getName();
      titleStr=client.getI18NMessageIfPrefixed(titleStr);
      if (titleStr != null) {
        String name2=Text.processTags(titleStr,fp.getTagResolver());
        if (name2 != null)         titleStr=name2;
      }
      divDialog.setTitle(titleStr);
      divDialogActionBuffer.show(divDialog,windowName);
      triggerBrowserRequestIfNeeded();
    }
    dialogContainer.callingContainer=this;
  }
}","public void showPopupDiv(MainPage dialogContainer,String titleString,Rectangle r2,boolean resizeable,boolean closeAll,boolean modal,boolean firstShow){
  if (isShowingInDialog() && callingContainer != null)   callingContainer.showPopupDiv(dialogContainer,titleString,r2,resizeable,closeAll,modal,firstShow);
 else {
    if (useAJAX) {
      String windowName=dialogContainer.getPageMap().getName();
      ServoyDivDialog divDialog=divDialogs.get(windowName);
      if (divDialog == null) {
        divDialog=createDivDialog(windowName);
      }
      divDialog.setPageMapName(windowName);
      divDialog.setResizable(resizeable);
      divDialog.setUseInitialHeight(true);
      divDialog.setModal(modal);
      Rectangle bounds;
      if (FormManager.FULL_SCREEN.equals(r2)) {
        firstShow=true;
        bounds=new Rectangle(0,0,getWidth(),getHeight() - 45);
      }
 else {
        bounds=r2;
      }
      if (firstShow) {
        divDialog.setCookieBoundsOnShow(bounds);
        divDialog.setInitialHeight(bounds.height);
        divDialog.setInitialWidth(bounds.width);
      }
      divDialog.setCloseAll(closeAll);
      FormController fp=dialogContainer.getController();
      String titleStr=titleString;
      if (titleStr == null)       titleStr=fp.getForm().getTitleText();
      if (titleStr == null)       titleStr=fp.getName();
      titleStr=client.getI18NMessageIfPrefixed(titleStr);
      if (titleStr != null) {
        String name2=Text.processTags(titleStr,fp.getTagResolver());
        if (name2 != null)         titleStr=name2;
      }
      divDialog.setTitle(titleStr);
      divDialogActionBuffer.show(divDialog,windowName);
      triggerBrowserRequestIfNeeded();
    }
    dialogContainer.setWindowSize(null);
    dialogContainer.callingContainer=this;
  }
}",0.9276066990815776
143775,"public void close(){
  if (RequestCycle.get() != null) {
    Session.get().getPage(getPageMapName(),getPath(),LATEST_VERSION);
  }
  client.setWindowBounds(getPageMapName(),null);
  setShowPageInDialogDelayed(false);
  pageContributor.showNoDialog();
  if (callingContainer != null) {
    if (isShowingInWindow()) {
      appendJavaScriptChanges(""String_Node_Str"");
    }
    callingContainer.closeChildWindow(getPageMapName());
  }
  showingInWindow=false;
  showingInDialog=false;
}","public void close(){
  if (RequestCycle.get() != null) {
    Session.get().getPage(getPageMapName(),getPath(),LATEST_VERSION);
  }
  setWindowSize(null);
  setShowPageInDialogDelayed(false);
  pageContributor.showNoDialog();
  if (callingContainer != null) {
    if (isShowingInWindow()) {
      appendJavaScriptChanges(""String_Node_Str"");
    }
    callingContainer.closeChildWindow(getPageMapName());
  }
  showingInWindow=false;
  showingInDialog=false;
}",0.961783439490446
143776,"public static ISessionBean createSessionBean(ServletRequest req,String solutionname,String username,String password,Object[] solutionOpenMethodArgs) throws Exception {
  return HeadlessClientFactoryInternal.createSessionBean(req,solutionname,username,password,solutionOpenMethodArgs,null);
}","public static ISessionBean createSessionBean(ServletRequest req,String solutionname,String username,String password,Object[] solutionOpenMethodArgs) throws Exception {
  return HeadlessClientFactoryInternal.createSessionBean(req,solutionname,username,password,solutionOpenMethodArgs);
}",0.9913344887348352
143777,"public static IHeadlessClient createHeadlessClient(String solutionname,String username,String password,Object[] solutionOpenMethodArgs) throws Exception {
  return HeadlessClientFactoryInternal.createHeadlessClient(solutionname,username,password,solutionOpenMethodArgs,null);
}","public static IHeadlessClient createHeadlessClient(String solutionname,String username,String password,Object[] solutionOpenMethodArgs) throws Exception {
  return HeadlessClientFactoryInternal.createHeadlessClient(solutionname,username,password,solutionOpenMethodArgs);
}",0.9908925318761383
143778,"public static ISessionClient createSessionBean(final ServletRequest req,final String solutionname,final String username,final String password,final Object[] solutionOpenMethodArgs,final InfoChannel channel) throws Exception {
  final ISessionClient[] sc={null};
  final Exception[] exception={null};
  Runnable createSessionBeanRunner=new Runnable(){
    public void run(){
      try {
        IApplicationServerSingleton as=ApplicationServerSingleton.get();
        if (as.isDeveloperStartup()) {
          sc[0]=as.getDebugClientHandler().createDebugHeadlessClient(req,username,password,null,solutionOpenMethodArgs);
        }
 else {
          sc[0]=new SessionClient(req,username,password,null,solutionOpenMethodArgs,solutionname);
        }
        sc[0].setOutputChannel(channel);
        sc[0].loadSolution(solutionname);
      }
 catch (      Exception e) {
        exception[0]=e;
      }
    }
  }
;
  if (Context.getCurrentContext() == null) {
    createSessionBeanRunner.run();
  }
 else {
    Thread createSessionBeanThread=new Thread(createSessionBeanRunner,""String_Node_Str"");
    createSessionBeanThread.start();
    createSessionBeanThread.join();
  }
  if (exception[0] != null) {
    throw exception[0];
  }
  return sc[0];
}","public static ISessionClient createSessionBean(final ServletRequest req,final String solutionname,final String username,final String password,final Object[] solutionOpenMethodArgs) throws Exception {
  final ISessionClient[] sc={null};
  final Exception[] exception={null};
  Runnable createSessionBeanRunner=new Runnable(){
    public void run(){
      try {
        IApplicationServerSingleton as=ApplicationServerSingleton.get();
        if (as.isDeveloperStartup()) {
          sc[0]=as.getDebugClientHandler().createDebugHeadlessClient(req,username,password,null,solutionOpenMethodArgs);
        }
 else {
          sc[0]=new SessionClient(req,username,password,null,solutionOpenMethodArgs,solutionname);
        }
        sc[0].loadSolution(solutionname);
      }
 catch (      Exception e) {
        exception[0]=e;
      }
    }
  }
;
  if (Context.getCurrentContext() == null) {
    createSessionBeanRunner.run();
  }
 else {
    Thread createSessionBeanThread=new Thread(createSessionBeanRunner,""String_Node_Str"");
    createSessionBeanThread.start();
    createSessionBeanThread.join();
  }
  if (exception[0] != null) {
    throw exception[0];
  }
  return sc[0];
}",0.9723254853366378
143779,"public static IHeadlessClient createHeadlessClient(String solutionname,String username,String password,Object[] solutionOpenMethodArgs,InfoChannel channel) throws Exception {
  return createSessionBean(null,solutionname,username,password,solutionOpenMethodArgs,channel);
}","public static IHeadlessClient createHeadlessClient(String solutionname,String username,String password,Object[] solutionOpenMethodArgs) throws Exception {
  return createSessionBean(null,solutionname,username,password,solutionOpenMethodArgs);
}",0.9457364341085271
143780,"public void run(){
  try {
    IApplicationServerSingleton as=ApplicationServerSingleton.get();
    if (as.isDeveloperStartup()) {
      sc[0]=as.getDebugClientHandler().createDebugHeadlessClient(req,username,password,null,solutionOpenMethodArgs);
    }
 else {
      sc[0]=new SessionClient(req,username,password,null,solutionOpenMethodArgs,solutionname);
    }
    sc[0].setOutputChannel(channel);
    sc[0].loadSolution(solutionname);
  }
 catch (  Exception e) {
    exception[0]=e;
  }
}","public void run(){
  try {
    IApplicationServerSingleton as=ApplicationServerSingleton.get();
    if (as.isDeveloperStartup()) {
      sc[0]=as.getDebugClientHandler().createDebugHeadlessClient(req,username,password,null,solutionOpenMethodArgs);
    }
 else {
      sc[0]=new SessionClient(req,username,password,null,solutionOpenMethodArgs,solutionname);
    }
    sc[0].loadSolution(solutionname);
  }
 catch (  Exception e) {
    exception[0]=e;
  }
}",0.9609292502639916
143781,"Thread startBatchClientProcess(final IBatchClient bc,InfoChannel channel);",Thread startBatchClientProcess(final IBatchClient bc);,0.84375
143782,"public Object executeMethod(String context,String methodname,Object[] arguments,final boolean async) throws Exception {
  if (application.getSolution() != null) {
    final MethodExecutor method=new MethodExecutor(context,methodname,arguments,async);
synchronized (method) {
      if (application.isEventDispatchThread() && !async) {
        application.invokeAndWait(method);
        Object retval=method.getRetval();
        if (retval instanceof Exception) {
          throw (Exception)retval;
        }
        return retval;
      }
 else {
        application.getScheduledExecutor().execute(new Runnable(){
          public void run(){
            if (!async && !application.isEventDispatchThread()) {
              if (application.getScriptEngine() instanceof IScriptSupport && ((IScriptSupport)application.getScriptEngine()).isAlreadyExecutingFunctionInDebug()) {
                method.run();
                return;
              }
            }
            if (async) {
              application.invokeLater(method);
            }
 else {
              application.invokeAndWait(method);
            }
          }
        }
);
        if (!async) {
          Object retval;
          try {
            method.wait();
            retval=method.getRetval();
          }
 catch (          InterruptedException e) {
            retval=e;
            Debug.error(e);
          }
          if (retval instanceof Exception) {
            throw (Exception)retval;
          }
          return retval;
        }
      }
    }
  }
  return null;
}","public Object executeMethod(String context,String methodname,Object[] arguments,final boolean async) throws Exception {
  if (application.getSolution() != null) {
    final MethodExecutor method=new MethodExecutor(context,methodname,arguments,async);
synchronized (method) {
      if (application.isEventDispatchThread() && !async && application == J2DBGlobals.getServiceProvider()) {
        application.invokeAndWait(method);
        Object retval=method.getRetval();
        if (retval instanceof Exception) {
          throw (Exception)retval;
        }
        return retval;
      }
 else {
        application.getScheduledExecutor().execute(new Runnable(){
          public void run(){
            if (!async && !application.isEventDispatchThread()) {
              if (application.getScriptEngine() instanceof IScriptSupport && ((IScriptSupport)application.getScriptEngine()).isAlreadyExecutingFunctionInDebug()) {
                method.run();
                return;
              }
            }
            if (async) {
              application.invokeLater(method);
            }
 else {
              application.invokeAndWait(method);
            }
          }
        }
);
        if (!async) {
          Object retval;
          try {
            method.wait();
            retval=method.getRetval();
          }
 catch (          InterruptedException e) {
            retval=e;
            Debug.error(e);
          }
          if (retval instanceof Exception) {
            throw (Exception)retval;
          }
          return retval;
        }
      }
    }
  }
  return null;
}",0.9837940896091516
143783,"public void actionPerformed(ActionEvent event){
  if (!isAdjusting) {
    if (setupable != null) {
      actionDesignPerformed(event);
    }
 else {
      actionRuntimePerformed(event);
    }
  }
}","/** 
 * Sets the foreground color.  The main difference from StyledEditorKit.ForegroundAction is the filtering of attributes  before the setCharacterAttributes.
 * @param e the action event
 */
public void actionPerformed(ActionEvent e){
  JEditorPane editor=getEditor(e);
  if (editor != null) {
    Color fg=this.fg;
    if ((e != null) && (e.getSource() == editor)) {
      String s=e.getActionCommand();
      try {
        fg=Color.decode(s);
      }
 catch (      NumberFormatException nfe) {
      }
    }
    if (fg != null) {
      MutableAttributeSet oldInputAttributes=getStyledEditorKit(editor).getInputAttributes();
      for (Enumeration eold=oldInputAttributes.getAttributeNames(); eold.hasMoreElements(); ) {
        Object key=eold.nextElement();
        if (key instanceof HTML.Tag && key.toString().equalsIgnoreCase(""String_Node_Str"")) {
          oldInputAttributes.removeAttribute(key);
        }
        if (key instanceof CSS.Attribute && key.toString().equalsIgnoreCase(""String_Node_Str"")) {
          oldInputAttributes.removeAttribute(key);
        }
      }
      MutableAttributeSet attr=new SimpleAttributeSet();
      StyleConstants.setForeground(attr,fg);
      attr.addAttributes(oldInputAttributes);
      setCharacterAttributes(editor,attr,true);
    }
 else {
      UIManager.getLookAndFeel().provideErrorFeedback(editor);
    }
  }
}",0.1187739463601532
143784,"public void actionRuntimePerformed(ActionEvent event){
  Action a=null;
  Object source=event.getSource();
  if (source == heightCombo) {
    Object val=heightCombo.getSelectedItem();
    int size=Utils.getAsInteger(val);
    if (size <= 0)     size=10;
    a=(Action)actions.get(""String_Node_Str"" + size);
    if (a == null) {
      a=new StyledEditorKit.FontSizeAction(""String_Node_Str"",size);
    }
  }
 else   if (source == styleCombo) {
    a=new StyledEditorKit.FontFamilyAction(""String_Node_Str"",allFonts[styleCombo.getSelectedIndex()].getFamily());
  }
 else   if (source == fcolor) {
    Window parent=SwingUtilities.getWindowAncestor(this);
    if (parent == null)     parent=application.getMainApplicationFrame();
    CustomColorChooserDialog ccd=(CustomColorChooserDialog)application.getWindow(""String_Node_Str"");
    if (ccd == null || ccd.getOwner() != parent) {
      if (parent instanceof Frame) {
        ccd=new CustomColorChooserDialog((Frame)parent,application);
      }
 else       if (parent instanceof Dialog) {
        ccd=new CustomColorChooserDialog((Dialog)parent,application);
      }
      application.registerWindow(""String_Node_Str"",ccd);
    }
    Color c=ccd.showDialog(Color.black);
    if (c != null) {
      a=new StyledEditorKit.ForegroundAction(""String_Node_Str"",c);
    }
  }
 else   if (source == moreCmds) {
    moreCmdsMenu.show(moreCmds,0,moreCmds.getHeight());
  }
 else {
    String cmd=event.getActionCommand();
    if (cmd != null) {
      a=(Action)actions.get(cmd);
    }
  }
  if (a != null) {
    a.actionPerformed(event);
  }
}","public void actionRuntimePerformed(ActionEvent event){
  Action a=null;
  Object source=event.getSource();
  if (source == heightCombo) {
    Object val=heightCombo.getSelectedItem();
    int size=Utils.getAsInteger(val);
    if (size <= 0)     size=10;
    a=(Action)actions.get(""String_Node_Str"" + size);
    if (a == null) {
      a=new StyledEditorKit.FontSizeAction(""String_Node_Str"",size);
    }
  }
 else   if (source == styleCombo) {
    a=new StyledEditorKit.FontFamilyAction(""String_Node_Str"",allFonts[styleCombo.getSelectedIndex()].getFamily());
  }
 else   if (source == fcolor) {
    Window parent=SwingUtilities.getWindowAncestor(this);
    if (parent == null)     parent=application.getMainApplicationFrame();
    CustomColorChooserDialog ccd=(CustomColorChooserDialog)application.getWindow(""String_Node_Str"");
    if (ccd == null || ccd.getOwner() != parent) {
      if (parent instanceof Frame) {
        ccd=new CustomColorChooserDialog((Frame)parent,application);
      }
 else       if (parent instanceof Dialog) {
        ccd=new CustomColorChooserDialog((Dialog)parent,application);
      }
      application.registerWindow(""String_Node_Str"",ccd);
    }
    Color c=ccd.showDialog(Color.black);
    if (c != null) {
      a=new ForegroundSetWithAttributeFilteringAction(""String_Node_Str"",c);
    }
  }
 else   if (source == moreCmds) {
    moreCmdsMenu.show(moreCmds,0,moreCmds.getHeight());
  }
 else {
    String cmd=event.getActionCommand();
    if (cmd != null) {
      a=(Action)actions.get(cmd);
    }
  }
  if (a != null) {
    a.actionPerformed(event);
  }
}",0.9870539943163876
143785,"public void setValueObject(Object obj){
  if (""String_Node_Str"".equals(obj))   obj=null;
  try {
    if (editProvider != null)     editProvider.setAdjusting(true);
    if (needsToProcessTags) {
      if (resolver != null) {
        if (tooltip != null) {
          String txt=Text.processTags(tooltip,resolver);
          setToolTipTextImpl(txt);
        }
      }
 else {
        if (tooltip != null) {
          setToolTipTextImpl(null);
        }
      }
    }
    if (previousValue != null && previousValue.equals(obj))     return;
    previousValue=obj;
    if (obj instanceof byte[] || (obj instanceof String && !editState)) {
      if (useAsync && application.getModeManager().getMode() == IModeManager.EDIT_MODE) {
        enclosedComponent.setIconDirect((Icon)null,enclosedComponent.getNextSeq());
        enclosedComponent.setText(application.getI18NMessage(""String_Node_Str""));
      }
      final Object tmp=obj;
      final int seq=enclosedComponent.getNextSeq();
      Runnable action=new Runnable(){
        public void run(){
          byte[] array=getByteArrayContents(tmp);
          Icon icon=ImageLoader.getIcon(array,-1,-1,true);
          if (icon == null) {
            if (array != null && array.length > 0) {
              icon=NOT_EMPTY_IMAGE;
            }
 else             if (application.getI18NMessage(""String_Node_Str"").equals(enclosedComponent.getText())) {
              enclosedComponent.setText(null);
            }
          }
          if (!useAsync || (application.getModeManager().getMode() != IModeManager.EDIT_MODE) || Utils.equalObjects(tmp,getValueObject())) {
            enclosedComponent.setIconDirect(icon,seq);
          }
 else           if (application.getI18NMessage(""String_Node_Str"").equals(enclosedComponent.getText())) {
            enclosedComponent.setText(null);
          }
        }
      }
;
      if (useAsync && application.getModeManager().getMode() == IModeManager.EDIT_MODE) {
        application.getScheduledExecutor().execute(action);
      }
 else {
        action.run();
      }
    }
 else {
      setIcon(null);
    }
    value=obj;
  }
  finally {
    if (editProvider != null)     editProvider.setAdjusting(false);
  }
}","public void setValueObject(Object obj){
  if (""String_Node_Str"".equals(obj))   obj=null;
  try {
    if (editProvider != null)     editProvider.setAdjusting(true);
    if (needsToProcessTags) {
      if (resolver != null) {
        if (tooltip != null) {
          String txt=Text.processTags(tooltip,resolver);
          setToolTipTextImpl(txt);
        }
      }
 else {
        if (tooltip != null) {
          setToolTipTextImpl(null);
        }
      }
    }
    if (previousValue != null && previousValue.equals(obj))     return;
    previousValue=obj;
    value=obj;
    if (obj instanceof byte[] || (obj instanceof String && !editState)) {
      if (useAsync && application.getModeManager().getMode() == IModeManager.EDIT_MODE) {
        enclosedComponent.setIconDirect((Icon)null,enclosedComponent.getNextSeq());
        enclosedComponent.setText(application.getI18NMessage(""String_Node_Str""));
      }
      final Object tmp=obj;
      final int seq=enclosedComponent.getNextSeq();
      Runnable action=new Runnable(){
        public void run(){
          byte[] array=getByteArrayContents(tmp);
          Icon icon=ImageLoader.getIcon(array,-1,-1,true);
          if (icon == null) {
            if (array != null && array.length > 0) {
              icon=NOT_EMPTY_IMAGE;
            }
 else             if (application.getI18NMessage(""String_Node_Str"").equals(enclosedComponent.getText())) {
              enclosedComponent.setText(null);
            }
          }
          if (!useAsync || (application.getModeManager().getMode() != IModeManager.EDIT_MODE) || Utils.equalObjects(tmp,getValueObject())) {
            enclosedComponent.setIconDirect(icon,seq);
          }
 else           if (application.getI18NMessage(""String_Node_Str"").equals(enclosedComponent.getText())) {
            enclosedComponent.setText(null);
          }
        }
      }
;
      if (useAsync && application.getModeManager().getMode() == IModeManager.EDIT_MODE) {
        application.getScheduledExecutor().execute(action);
      }
 else {
        action.run();
      }
    }
 else {
      setIcon(null);
      if (application.getI18NMessage(""String_Node_Str"").equals(enclosedComponent.getText())) {
        enclosedComponent.setText(null);
      }
    }
  }
  finally {
    if (editProvider != null)     editProvider.setAdjusting(false);
  }
}",0.9638288486987208
143786,"public Object setValue(IRowChangeListener src,String dataProviderID,Object value){
  Object o=getRawValue(dataProviderID);
  if (o instanceof DbIdentValue)   return o;
  Object convertedValue=value;
  int columnIndex=parent.getSQLSheet().getColumnIndex(dataProviderID);
  SQLSheet sheet=getRowManager().getSQLSheet();
  VariableInfo variableInfo=sheet.getCalculationOrColumnVariableInfo(dataProviderID,columnIndex);
  if (convertedValue != null && !(""String_Node_Str"".equals(convertedValue) && Column.mapToDefaultType(variableInfo.type) == IColumnTypes.TEXT)) {
    if (columnIndex >= 0) {
      Pair<String,String> converterInfo=sheet.getColumnConverterInfo(columnIndex);
      if (converterInfo != null) {
        IColumnConverter conv=parent.getFoundsetManager().getColumnConverterManager().getConverter(converterInfo.getLeft());
        if (conv != null) {
          try {
            OpenProperties props=new OpenProperties();
            if (converterInfo.getRight() != null)             props.load(new StringReader(converterInfo.getRight()));
            convertedValue=conv.convertFromObject(props,variableInfo.type,convertedValue);
          }
 catch (          Exception e) {
            throw new IllegalArgumentException(Messages.getString(""String_Node_Str"",new Object[]{dataProviderID,Column.getDisplayTypeString(variableInfo.type),convertedValue}),e);
          }
        }
 else {
          throw new IllegalStateException(Messages.getString(""String_Node_Str"",new Object[]{converterInfo.getLeft()}));
        }
        int valueLen=Column.getObjectSize(convertedValue,variableInfo.type);
        if (valueLen > 0 && variableInfo.length > 0 && valueLen > variableInfo.length) {
          throw new IllegalArgumentException(Messages.getString(""String_Node_Str"",new Object[]{dataProviderID,Column.getDisplayTypeString(variableInfo.type),convertedValue}));
        }
      }
      Pair<String,String> validatorInfo=sheet.getColumnValidatorInfo(columnIndex);
      if (validatorInfo != null) {
        IColumnValidator validator=parent.getFoundsetManager().getColumnValidatorManager().getValidator(validatorInfo.getLeft());
        if (validator != null) {
          OpenProperties props=new OpenProperties();
          try {
            if (validatorInfo.getRight() != null)             props.load(new StringReader(validatorInfo.getRight()));
          }
 catch (          IOException e) {
            Debug.error(e);
          }
          try {
            validator.validate(props,convertedValue);
          }
 catch (          IllegalArgumentException e) {
            String msg=Messages.getString(""String_Node_Str"",new Object[]{dataProviderID,convertedValue});
            if (e.getMessage() != null && e.getMessage().length() != 0)             msg+=' ' + e.getMessage();
            throw new IllegalArgumentException(msg);
          }
        }
 else {
          throw new IllegalStateException(Messages.getString(""String_Node_Str"",new Object[]{validatorInfo.getLeft()}));
        }
      }
      if ((variableInfo.flags & Column.UUID_COLUMN) != 0) {
        UUID uuid=Utils.getAsUUID(convertedValue,false);
        if (uuid != null) {
switch (Column.mapToDefaultType(variableInfo.type)) {
case IColumnTypes.TEXT:
            convertedValue=uuid.toString();
          break;
case IColumnTypes.MEDIA:
        convertedValue=uuid.toBytes();
      break;
  }
}
}
}
if (variableInfo.type != IColumnTypes.MEDIA || (variableInfo.flags & Column.UUID_COLUMN) != 0) {
try {
convertedValue=Column.getAsRightType(variableInfo.type,variableInfo.flags,convertedValue,null,variableInfo.length,null,true);
}
 catch (Exception e) {
Debug.error(e);
throw new IllegalArgumentException(Messages.getString(""String_Node_Str"",new Object[]{dataProviderID,Column.getDisplayTypeString(variableInfo.type),convertedValue}));
}
}
}
 else if (parent.getFoundsetManager().getNullColumnValidatorEnabled()) {
Column c=null;
try {
c=sheet.getTable().getColumn(dataProviderID);
}
 catch (Exception e) {
Debug.error(e);
}
if (c != null && !c.getAllowNull()) {
throw new IllegalArgumentException(Messages.getString(""String_Node_Str"",new Object[]{dataProviderID,convertedValue}));
}
}
boolean wasUNINITIALIZED=false;
if (o == UNINITIALIZED) {
o=null;
wasUNINITIALIZED=true;
}
if (o == null && ""String_Node_Str"".equals(convertedValue) && containsCalculation(dataProviderID)) return convertedValue;
if (!Utils.equalObjects(o,convertedValue)) {
boolean mustStop=!parent.getFoundsetManager().getEditRecordList().isEditing();
if (src != null && existInDB && !wasUNINITIALIZED) {
src.startEditing(false);
}
if (columnIndex != -1 && columnIndex < columndata.length) {
createOldValuesIfNeeded();
columndata[columnIndex]=convertedValue;
}
 else if (containsCalculation(dataProviderID)) {
unstoredCalcCache.put(dataProviderID,convertedValue);
}
lastException=null;
Column column=sheet.getTable().getColumn(dataProviderID);
if (column != null && (column.getFlags() & Column.IDENT_COLUMNS) != 0) {
List<Runnable> runnables=new ArrayList<Runnable>(1);
getRowManager().pkUpdated(this,getPKHashKey(),runnables);
for (Runnable runnable : runnables) {
runnable.run();
}
}
 else {
getRowManager().fireDependingCalcs(getPKHashKey(),dataProviderID,null);
}
FireCollector collector=new FireCollector();
fireNotifyChange(dataProviderID,convertedValue,collector);
collector.done();
if (src != null && mustStop && existInDB && !wasUNINITIALIZED) {
try {
src.stopEditing();
}
 catch (Exception e) {
Debug.error(e);
}
}
return o;
}
return convertedValue;
}","public Object setValue(IRowChangeListener src,String dataProviderID,Object value){
  Object o=getRawValue(dataProviderID);
  if (o instanceof DbIdentValue)   return o;
  Object convertedValue=value;
  SQLSheet sheet=parent.getSQLSheet();
  int columnIndex=sheet.getColumnIndex(dataProviderID);
  VariableInfo variableInfo=sheet.getCalculationOrColumnVariableInfo(dataProviderID,columnIndex);
  if (convertedValue != null && !(""String_Node_Str"".equals(convertedValue) && Column.mapToDefaultType(variableInfo.type) == IColumnTypes.TEXT)) {
    if (columnIndex >= 0) {
      Pair<String,String> converterInfo=sheet.getColumnConverterInfo(columnIndex);
      if (converterInfo != null) {
        IColumnConverter conv=parent.getFoundsetManager().getColumnConverterManager().getConverter(converterInfo.getLeft());
        if (conv != null) {
          try {
            OpenProperties props=new OpenProperties();
            if (converterInfo.getRight() != null)             props.load(new StringReader(converterInfo.getRight()));
            convertedValue=conv.convertFromObject(props,variableInfo.type,convertedValue);
          }
 catch (          Exception e) {
            throw new IllegalArgumentException(Messages.getString(""String_Node_Str"",new Object[]{dataProviderID,Column.getDisplayTypeString(variableInfo.type),convertedValue}),e);
          }
        }
 else {
          throw new IllegalStateException(Messages.getString(""String_Node_Str"",new Object[]{converterInfo.getLeft()}));
        }
        int valueLen=Column.getObjectSize(convertedValue,variableInfo.type);
        if (valueLen > 0 && variableInfo.length > 0 && valueLen > variableInfo.length) {
          throw new IllegalArgumentException(Messages.getString(""String_Node_Str"",new Object[]{dataProviderID,Column.getDisplayTypeString(variableInfo.type),convertedValue}));
        }
      }
      Pair<String,String> validatorInfo=sheet.getColumnValidatorInfo(columnIndex);
      if (validatorInfo != null) {
        IColumnValidator validator=parent.getFoundsetManager().getColumnValidatorManager().getValidator(validatorInfo.getLeft());
        if (validator != null) {
          OpenProperties props=new OpenProperties();
          try {
            if (validatorInfo.getRight() != null)             props.load(new StringReader(validatorInfo.getRight()));
          }
 catch (          IOException e) {
            Debug.error(e);
          }
          try {
            validator.validate(props,convertedValue);
          }
 catch (          IllegalArgumentException e) {
            String msg=Messages.getString(""String_Node_Str"",new Object[]{dataProviderID,convertedValue});
            if (e.getMessage() != null && e.getMessage().length() != 0)             msg+=' ' + e.getMessage();
            throw new IllegalArgumentException(msg);
          }
        }
 else {
          throw new IllegalStateException(Messages.getString(""String_Node_Str"",new Object[]{validatorInfo.getLeft()}));
        }
      }
      if ((variableInfo.flags & Column.UUID_COLUMN) != 0) {
        UUID uuid=Utils.getAsUUID(convertedValue,false);
        if (uuid != null) {
switch (Column.mapToDefaultType(variableInfo.type)) {
case IColumnTypes.TEXT:
            convertedValue=uuid.toString();
          break;
case IColumnTypes.MEDIA:
        convertedValue=uuid.toBytes();
      break;
  }
}
}
}
if (variableInfo.type != IColumnTypes.MEDIA || (variableInfo.flags & Column.UUID_COLUMN) != 0) {
try {
convertedValue=Column.getAsRightType(variableInfo.type,variableInfo.flags,convertedValue,null,variableInfo.length,null,true);
}
 catch (Exception e) {
Debug.error(e);
throw new IllegalArgumentException(Messages.getString(""String_Node_Str"",new Object[]{dataProviderID,Column.getDisplayTypeString(variableInfo.type),convertedValue}));
}
}
}
 else if (parent.getFoundsetManager().getNullColumnValidatorEnabled()) {
Column c=null;
try {
c=sheet.getTable().getColumn(dataProviderID);
}
 catch (Exception e) {
Debug.error(e);
}
if (c != null && !c.getAllowNull()) {
throw new IllegalArgumentException(Messages.getString(""String_Node_Str"",new Object[]{dataProviderID,convertedValue}));
}
}
boolean wasUNINITIALIZED=false;
if (o == UNINITIALIZED) {
o=null;
wasUNINITIALIZED=true;
}
if (o == null && ""String_Node_Str"".equals(convertedValue) && containsCalculation(dataProviderID)) return convertedValue;
if (!Utils.equalObjects(o,convertedValue)) {
boolean mustStop=!parent.getFoundsetManager().getEditRecordList().isEditing();
if (src != null && existInDB && !wasUNINITIALIZED) {
src.startEditing(false);
}
if (columnIndex != -1 && columnIndex < columndata.length) {
createOldValuesIfNeeded();
columndata[columnIndex]=convertedValue;
}
 else if (containsCalculation(dataProviderID)) {
unstoredCalcCache.put(dataProviderID,convertedValue);
}
lastException=null;
handleCalculationDependencies(sheet.getTable().getColumn(dataProviderID),dataProviderID);
FireCollector collector=new FireCollector();
fireNotifyChange(dataProviderID,convertedValue,collector);
collector.done();
if (src != null && mustStop && existInDB && !wasUNINITIALIZED) {
try {
src.stopEditing();
}
 catch (Exception e) {
Debug.error(e);
}
}
return o;
}
return convertedValue;
}",0.9454511488884736
143787,"/** 
 * @see com.servoy.j2db.dataprocessing.IFoundSetInternal#getState(int)
 */
public IRecordInternal getRecord(int row){
  return new PrintState(this,rowManager.createNotYetExistInDBRowObject(data.getRow(row),false));
}","/** 
 * @see com.servoy.j2db.dataprocessing.IFoundSetInternal#getState(int)
 */
public IRecordInternal getRecord(int row){
  return new PrintState(this,new Row(rowManager,data.getRow(row),sheet.getAllUnstoredCalculationNamesWithNoValue(),false){
    @Override protected void handleCalculationDependencies(    Column column,    String dataProviderID){
    }
  }
);
}",0.5767918088737202
143788,"public SubSummaryFoundSet(IFoundSetManagerInternal fsm,IFoundSetInternal set,SortColumn[] summaryFields,List<AggregateVariable> aggregates,IDataSet data,Table table) throws ServoyException {
  this.fsm=fsm;
  relatedInfoLookup=set;
  this.data=data;
  rowManager=((FoundSetManager)fsm).getRowManager(fsm.getDataSource(table));
  sheet=((FoundSetManager)fsm).getSQLGenerator().getNewTableSQLSheet(fsm.getDataSource(table));
  HashMap<String,Integer> columnIndexes=new HashMap<String,Integer>();
  for (int i=0; i < summaryFields.length; i++) {
    SortColumn s=summaryFields[i];
    columnIndexes.put(s.getName(),new Integer(i));
  }
  for (int i=0; i < aggregates.size(); i++) {
    AggregateVariable ag=aggregates.get(i);
    columnIndexes.put(ag.getName(),new Integer(i + summaryFields.length));
  }
  sheet.setDataProviderIDsColumnMap(columnIndexes);
}","public SubSummaryFoundSet(IFoundSetManagerInternal fsm,IFoundSetInternal set,SortColumn[] groupByFields,List<AggregateVariable> aggregates,IDataSet data,Table table) throws ServoyException {
  this.fsm=fsm;
  relatedInfoLookup=set;
  this.data=data;
  rowManager=((FoundSetManager)fsm).getRowManager(fsm.getDataSource(table));
  sheet=((FoundSetManager)fsm).getSQLGenerator().getNewTableSQLSheet(fsm.getDataSource(table));
  HashMap<String,Integer> columnIndexes=new HashMap<String,Integer>();
  for (int i=0; i < groupByFields.length; i++) {
    SortColumn s=groupByFields[i];
    columnIndexes.put(s.getName(),new Integer(i));
  }
  for (int i=0; i < aggregates.size(); i++) {
    AggregateVariable ag=aggregates.get(i);
    columnIndexes.put(ag.getName(),new Integer(i + groupByFields.length));
  }
  sheet.setDataProviderIDsColumnMap(columnIndexes);
}",0.9719298245614036
143789,"@Override public Object getValue(String dataProviderID){
  ((SubSummaryFoundSet)parent).setDelegate(delegate);
  Object retval=dataproviderValueCache.get(dataProviderID);
  if (retval == null && !dataproviderValueCache.containsKey(dataProviderID)) {
    int columnIndex=parent.getSQLSheet().getColumnIndex(dataProviderID);
    if (columnIndex != -1) {
      retval=getRawData().getValue(columnIndex,true);
    }
 else {
      retval=super.getValue(dataProviderID);
    }
    if (retval == null)     retval=parent.getDataProviderValue(dataProviderID);
    dataproviderValueCache.put(dataProviderID,retval);
  }
  return retval;
}","@Override public Object getValue(String dataProviderID){
  ((SubSummaryFoundSet)parent).setDelegate(delegate);
  Object retval=dataproviderValueCache.get(dataProviderID);
  if (retval == null && !dataproviderValueCache.containsKey(dataProviderID)) {
    int columnIndex=parent.getSQLSheet().getColumnIndex(dataProviderID);
    if (columnIndex != -1) {
      retval=getRawData().getValue(columnIndex,true);
    }
 else {
      retval=super.getValue(dataProviderID);
    }
    if (retval == null)     retval=delegate.getRecord(0).getValue(dataProviderID);
    dataproviderValueCache.put(dataProviderID,retval);
  }
  return retval;
}",0.9038919777601272
143790,"@Override public Object setValue(String dataProviderID,Object value){
  return null;
}","@Override public Object setValue(String dataProviderID,Object value,boolean checkIsEditing){
  return null;
}",0.882051282051282
143791,"public void propertyChange(PropertyChangeEvent evt){
  String name=evt.getPropertyName();
  if (""String_Node_Str"".equals(name)) {
    final IRepository repository=(IRepository)evt.getNewValue();
    Action cmdnewsolution=actions.get(""String_Node_Str"");
    if (cmdnewsolution != null)     cmdnewsolution.setEnabled(repository != null);
    if (autoOpenSolutionSelectDialog) {
      final Action cmdopensolution=actions.get(""String_Node_Str"");
      if (cmdopensolution != null) {
        application.invokeLater(new Runnable(){
          public void run(){
            cmdopensolution.setEnabled(repository != null);
            if (repository != null) {
              try {
                if (repository.getRootObjectMetaDatasForType(IRepository.SOLUTIONS).length != 0) {
                  executeCmd((ICmd)cmdopensolution,null);
                }
              }
 catch (              Exception ex) {
                Debug.error(ex);
              }
            }
          }
        }
);
      }
    }
  }
 else   if (""String_Node_Str"".equals(name)) {
    Solution solution=(Solution)evt.getNewValue();
    ableFormRelatedBrowseActions(solution != null);
    ableFormRelatedDataEditActions(solution != null);
    undoAction.setEnabled(solution != null);
    redoAction.setEnabled(solution != null);
    Action cmdclose=actions.get(""String_Node_Str"");
    if (cmdclose != null)     cmdclose.setEnabled(solution != null);
    Action cmdsolutionsettings=actions.get(""String_Node_Str"");
    if (cmdsolutionsettings != null)     cmdsolutionsettings.setEnabled(solution != null);
    if (solution != null && application.getFlattenedSolution().getForms(false).hasNext()) {
      ableFormRelatedActions(true);
    }
 else {
      ableDesignRelatedActions(application.getModeManager().getMode() == ModeManager.DESIGN_MODE && solution != null);
      ableFormRelatedActions(false);
    }
  }
 else   if (""String_Node_Str"".equals(name)) {
    int oldmode=((Integer)evt.getOldValue()).intValue();
    if (oldmode == ModeManager.DESIGN_MODE) {
      ableDesignRelatedActions(false);
      if (undoManager != null)       undoManager.discardAllEdits();
    }
    Action menuselectaction=actions.get(""String_Node_Str"");
    int mode=((Integer)evt.getNewValue()).intValue();
switch (mode) {
case IModeManager.FIND_MODE:
      break;
case IModeManager.PREVIEW_MODE:
    break;
case ModeManager.DESIGN_MODE:
  ableDesignRelatedActions(true);
if (menuselectaction != null) menuselectaction.setEnabled(false);
break;
case IModeManager.EDIT_MODE:
default :
if (menuselectaction != null) menuselectaction.setEnabled(true);
}
ableFormRelatedFindActions(mode == IModeManager.FIND_MODE);
Action cmdfindmode=actions.get(""String_Node_Str"");
if (cmdfindmode != null) cmdfindmode.setEnabled(mode == IModeManager.EDIT_MODE);
if (mode == IModeManager.FIND_MODE) {
ableFormRelatedBrowseActions(false);
ableFormRelatedDataEditActions(true);
}
 else {
ableFormRelatedBrowseActions(mode == IModeManager.EDIT_MODE);
}
}
 else if (""String_Node_Str"".equals(name)) {
ableFormRelatedActions(evt.getNewValue() != null);
ableDesignRelatedActions(evt.getNewValue() != null);
}
 else if (""String_Node_Str"".equals(name)) {
String sUndoRedo=(String)evt.getOldValue();
Boolean bValue=(Boolean)evt.getNewValue();
Action menuUndoRedo=actions.get(sUndoRedo);
if (menuUndoRedo != null) menuUndoRedo.setEnabled(bValue.booleanValue());
}
}","public void propertyChange(PropertyChangeEvent evt){
  String name=evt.getPropertyName();
  if (""String_Node_Str"".equals(name)) {
    final IRepository repository=(IRepository)evt.getNewValue();
    Action cmdnewsolution=actions.get(""String_Node_Str"");
    if (cmdnewsolution != null)     cmdnewsolution.setEnabled(repository != null);
    if (autoOpenSolutionSelectDialog) {
      final Action cmdopensolution=actions.get(""String_Node_Str"");
      if (cmdopensolution != null) {
        application.invokeLater(new Runnable(){
          public void run(){
            cmdopensolution.setEnabled(repository != null);
            if (repository != null) {
              try {
                if (repository.getRootObjectMetaDatasForType(IRepository.SOLUTIONS).length != 0 && application.getSolution() == null) {
                  executeCmd((ICmd)cmdopensolution,null);
                }
              }
 catch (              Exception ex) {
                Debug.error(ex);
              }
            }
          }
        }
);
      }
    }
  }
 else   if (""String_Node_Str"".equals(name)) {
    Solution solution=(Solution)evt.getNewValue();
    ableFormRelatedBrowseActions(solution != null);
    ableFormRelatedDataEditActions(solution != null);
    undoAction.setEnabled(solution != null);
    redoAction.setEnabled(solution != null);
    Action cmdclose=actions.get(""String_Node_Str"");
    if (cmdclose != null)     cmdclose.setEnabled(solution != null);
    Action cmdsolutionsettings=actions.get(""String_Node_Str"");
    if (cmdsolutionsettings != null)     cmdsolutionsettings.setEnabled(solution != null);
    if (solution != null && application.getFlattenedSolution().getForms(false).hasNext()) {
      ableFormRelatedActions(true);
    }
 else {
      ableDesignRelatedActions(application.getModeManager().getMode() == ModeManager.DESIGN_MODE && solution != null);
      ableFormRelatedActions(false);
    }
  }
 else   if (""String_Node_Str"".equals(name)) {
    int oldmode=((Integer)evt.getOldValue()).intValue();
    if (oldmode == ModeManager.DESIGN_MODE) {
      ableDesignRelatedActions(false);
      if (undoManager != null)       undoManager.discardAllEdits();
    }
    Action menuselectaction=actions.get(""String_Node_Str"");
    int mode=((Integer)evt.getNewValue()).intValue();
switch (mode) {
case IModeManager.FIND_MODE:
      break;
case IModeManager.PREVIEW_MODE:
    break;
case ModeManager.DESIGN_MODE:
  ableDesignRelatedActions(true);
if (menuselectaction != null) menuselectaction.setEnabled(false);
break;
case IModeManager.EDIT_MODE:
default :
if (menuselectaction != null) menuselectaction.setEnabled(true);
}
ableFormRelatedFindActions(mode == IModeManager.FIND_MODE);
Action cmdfindmode=actions.get(""String_Node_Str"");
if (cmdfindmode != null) cmdfindmode.setEnabled(mode == IModeManager.EDIT_MODE);
if (mode == IModeManager.FIND_MODE) {
ableFormRelatedBrowseActions(false);
ableFormRelatedDataEditActions(true);
}
 else {
ableFormRelatedBrowseActions(mode == IModeManager.EDIT_MODE);
}
}
 else if (""String_Node_Str"".equals(name)) {
ableFormRelatedActions(evt.getNewValue() != null);
ableDesignRelatedActions(evt.getNewValue() != null);
}
 else if (""String_Node_Str"".equals(name)) {
String sUndoRedo=(String)evt.getOldValue();
Boolean bValue=(Boolean)evt.getNewValue();
Action menuUndoRedo=actions.get(sUndoRedo);
if (menuUndoRedo != null) menuUndoRedo.setEnabled(bValue.booleanValue());
}
}",0.9945707997065296
143792,"private static void createCellBasedView(AbstractBase obj,Form form,StringBuffer html,TextualCSS css,boolean addHeaders,int startY,int endY,Color bgColor,IServiceProvider sp) throws RepositoryException {
  try {
    html.append('\n');
    boolean sortable=true;
    boolean shouldFillAllHorizSpace=false;
    if (obj instanceof ISupportScrollbars) {
      int scrollbars=((ISupportScrollbars)obj).getScrollbars();
      if ((scrollbars & ISupportScrollbars.HORIZONTAL_SCROLLBAR_NEVER) == ISupportScrollbars.HORIZONTAL_SCROLLBAR_NEVER) {
        boolean hasAtLeastOneAnchored=false;
        Iterator<IPersist> it2=obj.getAllObjects(PositionComparator.XY_PERSIST_COMPARATOR);
        while (it2.hasNext()) {
          IPersist element=it2.next();
          if (element instanceof Field || element instanceof GraphicalComponent || element instanceof Bean) {
            if (element instanceof GraphicalComponent && ((GraphicalComponent)element).getLabelFor() != null) {
              continue;
            }
            Point l=((IFormElement)element).getLocation();
            if (l == null) {
              continue;
            }
            if (l.y >= startY && l.y < endY) {
              if (element instanceof ISupportAnchors) {
                int anchors=((ISupportAnchors)element).getAnchors();
                if (((anchors & IAnchorConstants.EAST) != 0) && ((anchors & IAnchorConstants.WEST) != 0)) {
                  hasAtLeastOneAnchored=true;
                  break;
                }
              }
            }
          }
        }
        if (hasAtLeastOneAnchored)         shouldFillAllHorizSpace=true;
      }
    }
    if (obj instanceof Form) {
      html.append(""String_Node_Str"");
    }
 else {
      Portal p=(Portal)obj;
      sortable=p.getSortable();
      TextualStyle styleObj=css.addStyle('#' + ComponentFactory.getWebID(form,p));
      BorderAndPadding ins=applyBaseComponentProperties(p,form,styleObj,null,null,sp);
      applyLocationAndSize(p,styleObj,ins,startY,endY,form.getSize().width,true);
      html.append(""String_Node_Str"");
      html.append(getWicketIDParameter(form,p));
      html.append(getCSSClassParameter(""String_Node_Str""));
      html.append(""String_Node_Str"");
    }
    css.addCSSBoundsHandler(NoLocationCSSBoundsHandler.INSTANCE);
    html.append(""String_Node_Str"");
    int totalWidth=0;
    if (addHeaders) {
      Map<String,GraphicalComponent> labelsFor=new HashMap<String,GraphicalComponent>();
      html.append(""String_Node_Str"");
      html.append(""String_Node_Str"");
      html.append(""String_Node_Str"");
      Iterator<IPersist> it1=obj.getAllObjects(PositionComparator.XY_PERSIST_COMPARATOR);
      while (it1.hasNext()) {
        IPersist element=it1.next();
        if (element instanceof GraphicalComponent && ((GraphicalComponent)element).getLabelFor() != null) {
          labelsFor.put(((GraphicalComponent)element).getLabelFor(),(GraphicalComponent)element);
        }
      }
      boolean usesImageMedia=false;
      boolean hasAtLeastOneLabelFor=false;
      int totalColumnsCount=0;
      Iterator<IPersist> it2=obj.getAllObjects(PositionComparator.XY_PERSIST_COMPARATOR);
      while (it2.hasNext()) {
        IPersist element=it2.next();
        if (element instanceof Field || element instanceof GraphicalComponent || element instanceof Bean) {
          if (element instanceof GraphicalComponent && ((GraphicalComponent)element).getLabelFor() != null) {
            continue;
          }
          Point l=((IFormElement)element).getLocation();
          if (l == null) {
            continue;
          }
          if (l.y >= startY && l.y < endY) {
            totalColumnsCount++;
            GraphicalComponent label=labelsFor.get(((IFormElement)element).getName());
            if (label != null)             hasAtLeastOneLabelFor=true;
          }
        }
      }
      int currentColumnCount=0;
      it2=obj.getAllObjects(PositionComparator.XY_PERSIST_COMPARATOR);
      while (it2.hasNext()) {
        IPersist element=it2.next();
        if (element instanceof Field || element instanceof GraphicalComponent || element instanceof Bean) {
          if (element instanceof GraphicalComponent && ((GraphicalComponent)element).getLabelFor() != null) {
            continue;
          }
          Point l=((IFormElement)element).getLocation();
          if (l == null) {
            continue;
          }
          if (l.y >= startY && l.y < endY) {
            currentColumnCount++;
            html.append(""String_Node_Str"");
            html.append(getWicketIDParameter(form,element));
            int w=((IFormElement)element).getSize().width;
            totalWidth+=w;
            w=w - 2;
            TextualStyle styleObj=new TextualStyle();
            GraphicalComponent label=labelsFor.get(((IFormElement)element).getName());
            if (label != null) {
              html.append(' ');
              BorderAndPadding ins=applyBaseComponentProperties(label,form,styleObj,(Insets)DEFAULT_LABEL_PADDING.clone(),null,sp);
              Pair<FixedStyleSheet,javax.swing.text.Style> styleInfo=ComponentFactory.getStyleForBasicComponent(sp,label,form);
              Border cssBorder=null;
              if (styleInfo != null) {
                javax.swing.text.Style s=styleInfo.getRight();
                FixedStyleSheet ss=styleInfo.getLeft();
                if (ss != null && s != null) {
                  addAttributeToStyle(styleObj,CSS.Attribute.COLOR.toString(),s.getAttribute(CSS.Attribute.COLOR));
                  addAttributeToStyle(styleObj,CSS.Attribute.BACKGROUND_COLOR.toString(),s.getAttribute(CSS.Attribute.BACKGROUND_COLOR));
                  addAttributeToStyle(styleObj,CSS.Attribute.FONT.toString(),s.getAttribute(CSS.Attribute.FONT));
                  addAttributeToStyle(styleObj,CSS.Attribute.FONT_FAMILY.toString(),s.getAttribute(CSS.Attribute.FONT_FAMILY));
                  addAttributeToStyle(styleObj,CSS.Attribute.FONT_SIZE.toString(),s.getAttribute(CSS.Attribute.FONT_SIZE));
                  addAttributeToStyle(styleObj,CSS.Attribute.FONT_STYLE.toString(),s.getAttribute(CSS.Attribute.FONT_STYLE));
                  addAttributeToStyle(styleObj,CSS.Attribute.FONT_VARIANT.toString(),s.getAttribute(CSS.Attribute.FONT_VARIANT));
                  addAttributeToStyle(styleObj,CSS.Attribute.FONT_WEIGHT.toString(),s.getAttribute(CSS.Attribute.FONT_WEIGHT));
                  cssBorder=ss.getBorder(s);
                }
              }
              if (ins.border != null)               w=w - ins.border.left - ins.border.right;
              applyTextProperties(label,styleObj);
              TextualStyle bgborderstyleObj=new TextualStyle();
              if (!sortable) {
                bgborderstyleObj.setProperty(""String_Node_Str"",styleObj.getProperty(""String_Node_Str""));
                bgborderstyleObj.setProperty(""String_Node_Str"",styleObj.getProperty(""String_Node_Str""));
              }
              if (label.getImageMediaID() <= 0) {
                bgborderstyleObj.setProperty(""String_Node_Str"",""String_Node_Str"");
                usesImageMedia=false;
              }
 else {
                usesImageMedia=true;
              }
              bgborderstyleObj.setProperty(""String_Node_Str"",styleObj.getProperty(""String_Node_Str""));
              if (styleObj.getProperty(CSS.Attribute.FONT_WEIGHT.toString()) == null) {
                bgborderstyleObj.setProperty(CSS.Attribute.FONT_WEIGHT.toString(),""String_Node_Str"",false);
              }
              if (cssBorder != null && label.getBorderType() == null)               ComponentFactoryHelper.createBorderCSSProperties(ComponentFactoryHelper.createBorderString(cssBorder),bgborderstyleObj);
 else               ComponentFactoryHelper.createBorderCSSProperties(label.getBorderType(),bgborderstyleObj);
              bgborderstyleObj.setProperty(CSS.Attribute.HEIGHT.toString(),label.getSize().height + ""String_Node_Str"");
              html.append(bgborderstyleObj.toString());
              Enumeration<Object> e=bgborderstyleObj.keys();
              while (e.hasMoreElements()) {
                String key=(String)e.nextElement();
                styleObj.remove(key);
              }
            }
 else {
              if (!hasAtLeastOneLabelFor) {
                TextualStyle defaultBorder=new TextualStyle();
                defaultBorder.setProperty(""String_Node_Str"",NO_LABELFOR_DEFAULT_BORDER_WIDTH + ""String_Node_Str"");
                html.append(defaultBorder.toString());
              }
            }
            if (sortable && !usesImageMedia) {
              html.append(""String_Node_Str"");
            }
 else {
              html.append(""String_Node_Str"");
            }
            html.append(""String_Node_Str"");
            html.append(w);
            html.append(""String_Node_Str"");
            html.append('>');
            int headerW=w;
            if (!hasAtLeastOneLabelFor)             headerW-=1;
            html.append(""String_Node_Str"");
            html.append(headerW).append(""String_Node_Str"");
            Object fontHeight=styleObj.get(CSS.Attribute.FONT_SIZE.toString());
            int cellHeight=13;
            if (fontHeight != null) {
              String sFontHeight=fontHeight.toString().toLowerCase();
              if (sFontHeight.endsWith(""String_Node_Str"") || sFontHeight.endsWith(""String_Node_Str""))               sFontHeight=sFontHeight.substring(0,sFontHeight.length() - 2);
              try {
                cellHeight=Integer.parseInt(sFontHeight);
                cellHeight+=2;
              }
 catch (              NumberFormatException ex) {
                Debug.error(ex);
              }
            }
            html.append(""String_Node_Str"").append(cellHeight).append(""String_Node_Str"");
            styleObj.setProperty(""String_Node_Str"",""String_Node_Str"");
            styleObj.setProperty(""String_Node_Str"",""String_Node_Str"");
            styleObj.setProperty(""String_Node_Str"",""String_Node_Str"");
            styleObj.setProperty(""String_Node_Str"",""String_Node_Str"");
            TextualStyle sortLinkStyle=new TextualStyle();
            sortLinkStyle.setProperty(""String_Node_Str"",""String_Node_Str"");
            sortLinkStyle.setProperty(""String_Node_Str"",(headerW - SortableCellViewHeader.ARROW_WIDTH) + ""String_Node_Str"");
            if (sortable) {
              sortLinkStyle.setProperty(""String_Node_Str"",styleObj.getProperty(""String_Node_Str""));
              html.append(""String_Node_Str"");
              html.append(sortLinkStyle.toString());
              html.append('>');
              html.append(""String_Node_Str"");
              styleObj.setProperty(""String_Node_Str"",""String_Node_Str"");
              html.append(styleObj.toString());
              html.append(""String_Node_Str"");
              html.append(""String_Node_Str"");
            }
 else {
              html.append(""String_Node_Str"");
              html.append(sortLinkStyle.toString());
              html.append('>');
              html.append(""String_Node_Str"");
              html.append(styleObj.toString());
              html.append(""String_Node_Str"");
              html.append(""String_Node_Str"");
            }
            html.append(""String_Node_Str"");
            if (sortable) {
              html.append(""String_Node_Str"");
            }
 else {
              html.append(""String_Node_Str"");
            }
            html.append(""String_Node_Str"");
            html.append(""String_Node_Str"");
          }
        }
      }
      if (!shouldFillAllHorizSpace) {
        html.append(""String_Node_Str"");
        if (bgColor != null) {
          html.append(""String_Node_Str"");
          html.append(PersistHelper.createColorString(bgColor));
          html.append(""String_Node_Str"");
        }
        html.append(""String_Node_Str"");
      }
      html.append(""String_Node_Str"");
    }
    html.append(""String_Node_Str"");
    StringBuffer columns=new StringBuffer();
    int colCount=0;
    Iterator<IPersist> it=obj.getAllObjects(PositionComparator.XY_PERSIST_COMPARATOR);
    int firstComponentHeight=-1;
    while (it.hasNext()) {
      IPersist element=it.next();
      if (element instanceof Field || element instanceof GraphicalComponent || element instanceof Bean) {
        if (element instanceof GraphicalComponent && ((GraphicalComponent)element).getLabelFor() != null) {
          continue;
        }
        Point l=((IFormElement)element).getLocation();
        if (l == null) {
          continue;
        }
        if (l.y >= startY && l.y < endY) {
          columns.append(""String_Node_Str"");
          if (element instanceof ISupportName) {
            String name=((ISupportName)element).getName();
            if (((name != null) && (name.trim().length() > 0)) || addHeaders) {
              columns.append(""String_Node_Str"");
              columns.append(ComponentFactory.getWebID(form,element));
              columns.append(""String_Node_Str"");
            }
          }
          if (firstComponentHeight == -1)           firstComponentHeight=((IFormElement)element).getSize().height;
          if (!addHeaders && !shouldFillAllHorizSpace) {
            columns.append(""String_Node_Str"");
            int w=((IFormElement)element).getSize().width;
            totalWidth+=w;
            columns.append(w);
            columns.append(""String_Node_Str"");
          }
          columns.append('>');
          columns.append(""String_Node_Str"");
          createComponentHTML(element,form,columns,css,bgColor,startY,endY,false,sp);
          TextualStyle idBasedStyle=css.addStyle('#' + ComponentFactory.getWebID(form,element));
          TextualStyle classBasedStyle=css.addStyle('.' + ComponentFactory.getWebID(form,element));
          classBasedStyle.copyAllFrom(idBasedStyle);
          if (element instanceof Field) {
            int type=((Field)element).getDisplayType();
            if (type == Field.PASSWORD || type == Field.TEXT_FIELD || type == Field.TYPE_AHEAD || type == Field.TEXT_AREA) {
              classBasedStyle.setProperty(""String_Node_Str"",""String_Node_Str"");
            }
          }
          columns.append(""String_Node_Str"");
          columns.append(""String_Node_Str"");
          colCount++;
        }
      }
    }
    if (!shouldFillAllHorizSpace) {
      columns.append(""String_Node_Str"");
      if (bgColor != null) {
        columns.append(""String_Node_Str"");
        columns.append(PersistHelper.createColorString(bgColor));
        columns.append(""String_Node_Str"");
      }
      columns.append(""String_Node_Str"");
    }
    html.append(""String_Node_Str"");
    html.append(""String_Node_Str"");
    html.append(firstComponentHeight);
    html.append(""String_Node_Str"");
    if ((obj instanceof ISupportRowBGColorScript) && (((ISupportRowBGColorScript)obj).getRowBGColorScript() == null || ((ISupportRowBGColorScript)obj).getRowBGColorScript().trim().length() == 0)) {
      html.append(""String_Node_Str"");
    }
    html.append(""String_Node_Str"");
    html.append(columns);
    html.append(""String_Node_Str"");
    html.append(""String_Node_Str"");
    html.append(""String_Node_Str"");
    html.append(""String_Node_Str"");
    html.append(""String_Node_Str"");
    html.append(""String_Node_Str"");
    html.append(""String_Node_Str"");
    if (!(obj instanceof Form)) {
      html.append(""String_Node_Str"");
    }
    html.append(""String_Node_Str"");
  }
  finally {
    css.removeCSSBoundsHandler();
  }
}","private static void createCellBasedView(AbstractBase obj,Form form,StringBuffer html,TextualCSS css,boolean addHeaders,int startY,int endY,Color bgColor,IServiceProvider sp) throws RepositoryException {
  try {
    html.append('\n');
    boolean sortable=true;
    boolean shouldFillAllHorizSpace=false;
    if (obj instanceof ISupportScrollbars) {
      int scrollbars=((ISupportScrollbars)obj).getScrollbars();
      if ((scrollbars & ISupportScrollbars.HORIZONTAL_SCROLLBAR_NEVER) == ISupportScrollbars.HORIZONTAL_SCROLLBAR_NEVER) {
        boolean hasAtLeastOneAnchored=false;
        Iterator<IPersist> it2=obj.getAllObjects(PositionComparator.XY_PERSIST_COMPARATOR);
        while (it2.hasNext()) {
          IPersist element=it2.next();
          if (element instanceof Field || element instanceof GraphicalComponent || element instanceof Bean) {
            if (element instanceof GraphicalComponent && ((GraphicalComponent)element).getLabelFor() != null) {
              continue;
            }
            Point l=((IFormElement)element).getLocation();
            if (l == null) {
              continue;
            }
            if (l.y >= startY && l.y < endY) {
              if (element instanceof ISupportAnchors) {
                int anchors=((ISupportAnchors)element).getAnchors();
                if (((anchors & IAnchorConstants.EAST) != 0) && ((anchors & IAnchorConstants.WEST) != 0)) {
                  hasAtLeastOneAnchored=true;
                  break;
                }
              }
            }
          }
        }
        if (hasAtLeastOneAnchored)         shouldFillAllHorizSpace=true;
      }
    }
    if (obj instanceof Form) {
      html.append(""String_Node_Str"");
    }
 else {
      Portal p=(Portal)obj;
      sortable=p.getSortable();
      TextualStyle styleObj=css.addStyle('#' + ComponentFactory.getWebID(form,p));
      BorderAndPadding ins=applyBaseComponentProperties(p,form,styleObj,null,null,sp);
      applyLocationAndSize(p,styleObj,ins,startY,endY,form.getSize().width,true);
      html.append(""String_Node_Str"");
      html.append(getWicketIDParameter(form,p));
      html.append(getCSSClassParameter(""String_Node_Str""));
      html.append(""String_Node_Str"");
    }
    css.addCSSBoundsHandler(NoLocationCSSBoundsHandler.INSTANCE);
    html.append(""String_Node_Str"");
    int totalWidth=0;
    if (addHeaders) {
      Map<String,GraphicalComponent> labelsFor=new HashMap<String,GraphicalComponent>();
      html.append(""String_Node_Str"");
      html.append(""String_Node_Str"");
      html.append(""String_Node_Str"");
      Iterator<IPersist> it1=obj.getAllObjects(PositionComparator.XY_PERSIST_COMPARATOR);
      while (it1.hasNext()) {
        IPersist element=it1.next();
        if (element instanceof GraphicalComponent && ((GraphicalComponent)element).getLabelFor() != null) {
          labelsFor.put(((GraphicalComponent)element).getLabelFor(),(GraphicalComponent)element);
        }
      }
      boolean usesImageMedia=false;
      boolean hasAtLeastOneLabelFor=false;
      int totalColumnsCount=0;
      Iterator<IPersist> it2=obj.getAllObjects(PositionComparator.XY_PERSIST_COMPARATOR);
      while (it2.hasNext()) {
        IPersist element=it2.next();
        if (element instanceof Field || element instanceof GraphicalComponent || element instanceof Bean) {
          if (element instanceof GraphicalComponent && ((GraphicalComponent)element).getLabelFor() != null) {
            continue;
          }
          Point l=((IFormElement)element).getLocation();
          if (l == null) {
            continue;
          }
          if (l.y >= startY && l.y < endY) {
            totalColumnsCount++;
            GraphicalComponent label=labelsFor.get(((IFormElement)element).getName());
            if (label != null)             hasAtLeastOneLabelFor=true;
          }
        }
      }
      int currentColumnCount=0;
      it2=obj.getAllObjects(PositionComparator.XY_PERSIST_COMPARATOR);
      while (it2.hasNext()) {
        IPersist element=it2.next();
        if (element instanceof Field || element instanceof GraphicalComponent || element instanceof Bean) {
          if (element instanceof GraphicalComponent && ((GraphicalComponent)element).getLabelFor() != null) {
            continue;
          }
          Point l=((IFormElement)element).getLocation();
          if (l == null) {
            continue;
          }
          if (l.y >= startY && l.y < endY) {
            currentColumnCount++;
            html.append(""String_Node_Str"");
            html.append(getWicketIDParameter(form,element));
            int w=((IFormElement)element).getSize().width;
            totalWidth+=w;
            w=w - 2;
            TextualStyle styleObj=new TextualStyle();
            GraphicalComponent label=labelsFor.get(((IFormElement)element).getName());
            if (label != null) {
              html.append(' ');
              BorderAndPadding ins=applyBaseComponentProperties(label,form,styleObj,(Insets)DEFAULT_LABEL_PADDING.clone(),null,sp);
              Pair<FixedStyleSheet,javax.swing.text.Style> styleInfo=ComponentFactory.getStyleForBasicComponent(sp,label,form);
              Border cssBorder=null;
              if (styleInfo != null) {
                javax.swing.text.Style s=styleInfo.getRight();
                FixedStyleSheet ss=styleInfo.getLeft();
                if (ss != null && s != null) {
                  addAttributeToStyle(styleObj,CSS.Attribute.COLOR.toString(),s.getAttribute(CSS.Attribute.COLOR));
                  addAttributeToStyle(styleObj,CSS.Attribute.BACKGROUND_COLOR.toString(),s.getAttribute(CSS.Attribute.BACKGROUND_COLOR));
                  addAttributeToStyle(styleObj,CSS.Attribute.FONT.toString(),s.getAttribute(CSS.Attribute.FONT));
                  addAttributeToStyle(styleObj,CSS.Attribute.FONT_FAMILY.toString(),s.getAttribute(CSS.Attribute.FONT_FAMILY));
                  addAttributeToStyle(styleObj,CSS.Attribute.FONT_SIZE.toString(),s.getAttribute(CSS.Attribute.FONT_SIZE));
                  addAttributeToStyle(styleObj,CSS.Attribute.FONT_STYLE.toString(),s.getAttribute(CSS.Attribute.FONT_STYLE));
                  addAttributeToStyle(styleObj,CSS.Attribute.FONT_VARIANT.toString(),s.getAttribute(CSS.Attribute.FONT_VARIANT));
                  addAttributeToStyle(styleObj,CSS.Attribute.FONT_WEIGHT.toString(),s.getAttribute(CSS.Attribute.FONT_WEIGHT));
                  cssBorder=ss.getBorder(s);
                }
              }
              if (ins.border != null)               w=w - ins.border.left - ins.border.right;
              applyTextProperties(label,styleObj);
              TextualStyle bgborderstyleObj=new TextualStyle();
              if (!sortable) {
                bgborderstyleObj.setProperty(""String_Node_Str"",styleObj.getProperty(""String_Node_Str""));
                bgborderstyleObj.setProperty(""String_Node_Str"",styleObj.getProperty(""String_Node_Str""));
              }
              if (label.getImageMediaID() <= 0) {
                bgborderstyleObj.setProperty(""String_Node_Str"",""String_Node_Str"");
                usesImageMedia=false;
              }
 else {
                usesImageMedia=true;
              }
              bgborderstyleObj.setProperty(""String_Node_Str"",styleObj.getProperty(""String_Node_Str""));
              if (styleObj.getProperty(CSS.Attribute.FONT_WEIGHT.toString()) == null) {
                bgborderstyleObj.setProperty(CSS.Attribute.FONT_WEIGHT.toString(),""String_Node_Str"",false);
              }
              if (cssBorder != null && label.getBorderType() == null)               ComponentFactoryHelper.createBorderCSSProperties(ComponentFactoryHelper.createBorderString(cssBorder),bgborderstyleObj);
 else               ComponentFactoryHelper.createBorderCSSProperties(label.getBorderType(),bgborderstyleObj);
              bgborderstyleObj.setProperty(CSS.Attribute.HEIGHT.toString(),label.getSize().height + ""String_Node_Str"");
              html.append(bgborderstyleObj.toString());
              Enumeration<Object> e=bgborderstyleObj.keys();
              while (e.hasMoreElements()) {
                String key=(String)e.nextElement();
                styleObj.remove(key);
              }
            }
 else {
              if (!hasAtLeastOneLabelFor) {
                TextualStyle defaultBorder=new TextualStyle();
                defaultBorder.setProperty(""String_Node_Str"",NO_LABELFOR_DEFAULT_BORDER_WIDTH + ""String_Node_Str"");
                html.append(defaultBorder.toString());
              }
            }
            if (sortable && !usesImageMedia) {
              html.append(""String_Node_Str"");
            }
 else {
              html.append(""String_Node_Str"");
            }
            html.append(""String_Node_Str"");
            html.append(w);
            html.append(""String_Node_Str"");
            html.append('>');
            int headerW=w;
            if (!hasAtLeastOneLabelFor)             headerW-=1;
            html.append(""String_Node_Str"");
            html.append(headerW).append(""String_Node_Str"");
            Object fontHeight=styleObj.get(CSS.Attribute.FONT_SIZE.toString());
            int cellHeight=13;
            if (fontHeight != null) {
              String sFontHeight=fontHeight.toString().toLowerCase();
              if (sFontHeight.endsWith(""String_Node_Str"") || sFontHeight.endsWith(""String_Node_Str""))               sFontHeight=sFontHeight.substring(0,sFontHeight.length() - 2);
              try {
                cellHeight=Integer.parseInt(sFontHeight);
                cellHeight+=2;
              }
 catch (              NumberFormatException ex) {
                Debug.error(ex);
              }
            }
            html.append(""String_Node_Str"").append(cellHeight).append(""String_Node_Str"");
            styleObj.setProperty(""String_Node_Str"",""String_Node_Str"");
            styleObj.setProperty(""String_Node_Str"",""String_Node_Str"");
            styleObj.setProperty(""String_Node_Str"",""String_Node_Str"");
            styleObj.setProperty(""String_Node_Str"",""String_Node_Str"");
            TextualStyle sortLinkStyle=new TextualStyle();
            sortLinkStyle.setProperty(""String_Node_Str"",""String_Node_Str"");
            sortLinkStyle.setProperty(""String_Node_Str"",(headerW - SortableCellViewHeader.ARROW_WIDTH) + ""String_Node_Str"");
            if (sortable) {
              sortLinkStyle.setProperty(""String_Node_Str"",styleObj.getProperty(""String_Node_Str""));
              html.append(""String_Node_Str"");
              html.append(sortLinkStyle.toString());
              html.append('>');
              html.append(""String_Node_Str"");
              styleObj.setProperty(""String_Node_Str"",""String_Node_Str"");
              html.append(styleObj.toString());
              html.append(""String_Node_Str"");
              html.append(""String_Node_Str"");
            }
 else {
              html.append(""String_Node_Str"");
              html.append(sortLinkStyle.toString());
              html.append('>');
              html.append(""String_Node_Str"");
              html.append(styleObj.toString());
              html.append(""String_Node_Str"");
              html.append(""String_Node_Str"");
            }
            html.append(""String_Node_Str"");
            if (sortable) {
              html.append(""String_Node_Str"");
            }
 else {
              html.append(""String_Node_Str"");
            }
            html.append(""String_Node_Str"");
            html.append(""String_Node_Str"");
          }
        }
      }
      if (!shouldFillAllHorizSpace) {
        html.append(""String_Node_Str"");
        if (bgColor != null) {
          html.append(""String_Node_Str"");
          html.append(PersistHelper.createColorString(bgColor));
          html.append(""String_Node_Str"");
        }
        html.append(""String_Node_Str"");
      }
      html.append(""String_Node_Str"");
    }
    html.append(""String_Node_Str"");
    StringBuffer columns=new StringBuffer();
    int colCount=0;
    Iterator<IPersist> it=obj.getAllObjects(PositionComparator.XY_PERSIST_COMPARATOR);
    int firstComponentHeight=-1;
    while (it.hasNext()) {
      IPersist element=it.next();
      if (element instanceof Field || element instanceof GraphicalComponent || element instanceof Bean) {
        if (element instanceof GraphicalComponent && ((GraphicalComponent)element).getLabelFor() != null) {
          continue;
        }
        Point l=((IFormElement)element).getLocation();
        if (l == null) {
          continue;
        }
        if (l.y >= startY && l.y < endY) {
          columns.append(""String_Node_Str"");
          if (element instanceof ISupportName) {
            String name=((ISupportName)element).getName();
            if (((name != null) && (name.trim().length() > 0)) || addHeaders) {
              columns.append(""String_Node_Str"");
              columns.append(ComponentFactory.getWebID(form,element));
              columns.append(""String_Node_Str"");
            }
          }
          if (firstComponentHeight == -1)           firstComponentHeight=((IFormElement)element).getSize().height;
          if (!addHeaders && !shouldFillAllHorizSpace) {
            columns.append(""String_Node_Str"");
            int w=((IFormElement)element).getSize().width;
            totalWidth+=w;
            columns.append(w);
            columns.append(""String_Node_Str"");
          }
          columns.append('>');
          columns.append(""String_Node_Str"" + TABLE_VIEW_CELL_CLASS + ""String_Node_Str"");
          createComponentHTML(element,form,columns,css,bgColor,startY,endY,false,sp);
          TextualStyle idBasedStyle=css.addStyle('#' + ComponentFactory.getWebID(form,element));
          TextualStyle classBasedStyle=css.addStyle('.' + ComponentFactory.getWebID(form,element));
          classBasedStyle.copyAllFrom(idBasedStyle);
          if (element instanceof Field) {
            int type=((Field)element).getDisplayType();
            if (type == Field.PASSWORD || type == Field.TEXT_FIELD || type == Field.TYPE_AHEAD || type == Field.TEXT_AREA) {
              classBasedStyle.setProperty(""String_Node_Str"",""String_Node_Str"");
            }
          }
          columns.append(""String_Node_Str"");
          columns.append(""String_Node_Str"");
          colCount++;
        }
      }
    }
    if (!shouldFillAllHorizSpace) {
      columns.append(""String_Node_Str"");
      if (bgColor != null) {
        columns.append(""String_Node_Str"");
        columns.append(PersistHelper.createColorString(bgColor));
        columns.append(""String_Node_Str"");
      }
      columns.append(""String_Node_Str"");
    }
    html.append(""String_Node_Str"");
    html.append(""String_Node_Str"");
    html.append(firstComponentHeight);
    html.append(""String_Node_Str"");
    if ((obj instanceof ISupportRowBGColorScript) && (((ISupportRowBGColorScript)obj).getRowBGColorScript() == null || ((ISupportRowBGColorScript)obj).getRowBGColorScript().trim().length() == 0)) {
      html.append(""String_Node_Str"");
    }
    html.append(""String_Node_Str"");
    html.append(columns);
    html.append(""String_Node_Str"");
    html.append(""String_Node_Str"");
    html.append(""String_Node_Str"");
    html.append(""String_Node_Str"");
    html.append(""String_Node_Str"");
    html.append(""String_Node_Str"");
    html.append(""String_Node_Str"");
    if (!(obj instanceof Form)) {
      html.append(""String_Node_Str"");
    }
    html.append(""String_Node_Str"");
  }
  finally {
    css.removeCSSBoundsHandler();
  }
}",0.9985768807814218
143793,"public Scriptable getParentScope(){
  return parentScope;
}","public Scriptable getParentScope(){
  if (parentScope == null) {
    return parent.getFoundSetManager().getApplication().getScriptEngine().getSolutionScope().getParentScope();
  }
  return parentScope;
}",0.3129770992366412
143794,"public void userAddSms(long new_id,String body,String s,int i,Time now,int i1){
  add_sms(new_id,body,s,i,now,i1);
  conversationAdapter.notifyDataSetChanged();
  conversation_nb_sms+=1;
  liste.smoothScrollToPosition(liste.getBottom());
}","public void userAddSms(long new_id,String body,String s,int i,Time now,int i1){
  add_sms(""String_Node_Str"",new_id,body,s,i,now,i1);
  conversation_nb_sms+=1;
  liste.smoothScrollToPosition(liste.getBottom());
}",0.8577777777777778
143795,"@Override public void customReceivedSMS(){
  if (PhoneNumberUtils.compare(phoneContact,phone)) {
    Time t=new Time();
    t.set(date);
    add_sms(-1L,body,""String_Node_Str"",0,t,0);
    conversationAdapter.notifyDataSetChanged();
    conversation_nb_sms+=1;
    liste.smoothScrollToPosition(liste.getBottom());
    LheidoUtils.Send.newMessageRead(context,list_conversationId,phoneContact);
  }
}","@Override public void customReceivedSMS(){
  if (PhoneNumberUtils.compare(phoneContact,phone)) {
    Time t=new Time();
    t.set(date);
    add_sms(phone,-1L,body,""String_Node_Str"",0,t,0);
    conversation_nb_sms+=1;
    liste.smoothScrollToPosition(liste.getBottom());
    LheidoUtils.Send.newMessageRead(context,list_conversationId,phoneContact);
  }
}",0.928191489361702
143796,"public void add_sms(long _id,String body,String sender,int deli,Time t,int position){
  add_sms_(new Message(_id,body,sender,deli,t),position);
}","public void add_sms(String phone,long _id,String body,String sender,int deli,Time t,int position){
  Message sms=new Message(_id,body,sender,deli,t);
  sms.setSender(phone);
  add_sms_(sms,position);
}",0.7283236994219653
143797,"public void init_broadcast(){
  mBroadCast=new SmsReceiver(){
    @Override public void customReceivedSMS(){
      if (PhoneNumberUtils.compare(phoneContact,phone)) {
        Time t=new Time();
        t.set(date);
        add_sms(-1L,body,""String_Node_Str"",0,t,0);
        conversationAdapter.notifyDataSetChanged();
        conversation_nb_sms+=1;
        liste.smoothScrollToPosition(liste.getBottom());
        LheidoUtils.Send.newMessageRead(context,list_conversationId,phoneContact);
      }
    }
    @Override public void customReceivedMMS(){
      if (PhoneNumberUtils.compare(phoneContact,phone)) {
      }
    }
    @Override public void customNewMessageRead(    int position,    String phone){
    }
    @Override public void customDelivered(    long _id){
      int k=0;
      boolean find=false;
      while (!find && k < Message_list.size()) {
        if (_id == Message_list.get(k).getId()) {
          find=true;
          Message_list.get(k).setRead(true);
          conversationAdapter.notifyDataSetChanged();
        }
        k++;
      }
    }
  }
;
  IntentFilter filter=new IntentFilter();
  filter.addAction(LheidoUtils.ACTION_RECEIVE_SMS);
  filter.addAction(LheidoUtils.ACTION_SENT_SMS);
  filter.addAction(LheidoUtils.ACTION_DELIVERED_SMS);
  filter.setPriority(2000);
  context.registerReceiver(mBroadCast,filter);
}","public void init_broadcast(){
  mBroadCast=new SmsReceiver(){
    @Override public void customReceivedSMS(){
      if (PhoneNumberUtils.compare(phoneContact,phone)) {
        Time t=new Time();
        t.set(date);
        add_sms(phone,-1L,body,""String_Node_Str"",0,t,0);
        conversation_nb_sms+=1;
        liste.smoothScrollToPosition(liste.getBottom());
        LheidoUtils.Send.newMessageRead(context,list_conversationId,phoneContact);
      }
    }
    @Override public void customReceivedMMS(){
      if (PhoneNumberUtils.compare(phoneContact,phone)) {
      }
    }
    @Override public void customNewMessageRead(    int position,    String phone){
    }
    @Override public void customDelivered(    long _id){
      int k=0;
      boolean find=false;
      while (!find && k < Message_list.size()) {
        if (_id == Message_list.get(k).getId()) {
          find=true;
          Message_list.get(k).setRead(true);
          conversationAdapter.notifyDataSetChanged();
        }
        k++;
      }
    }
  }
;
  IntentFilter filter=new IntentFilter();
  filter.addAction(LheidoUtils.ACTION_RECEIVE_SMS);
  filter.addAction(LheidoUtils.ACTION_SENT_SMS);
  filter.addAction(LheidoUtils.ACTION_DELIVERED_SMS);
  filter.setPriority(2000);
  context.registerReceiver(mBroadCast,filter);
}",0.9780635400907716
143798,"@Override public View getView(int r,View convertView,ViewGroup parent){
  Message message=this.getItem(r);
  SmsBaseViewHolder holder;
  if (convertView == null) {
    holder=new SmsBaseViewHolder();
    convertView=LayoutInflater.from(mContext).inflate(R.layout.message_mms,parent,false);
    holder.mBody=(TextView)convertView.findViewById(R.id.message);
    holder.mPict=(ImageView)convertView.findViewById(R.id.m_pict);
    holder.mdate=(TextView)convertView.findViewById(R.id.date_message);
    holder.mLayout=(RelativeLayout)convertView.findViewById(R.id.message_relativeLayout);
    holder.mIsRead=(View)convertView.findViewById(R.id.is_read);
    convertView.setTag(holder);
  }
 else   holder=(SmsBaseViewHolder)convertView.getTag();
  userPref.setUserPref(PreferenceManager.getDefaultSharedPreferences(mContext));
  holder.mBody.setText(message.getBody());
  holder.mBody.setTextSize(userPref.text_size);
  holder.mdate.setText(message.getDate());
  if (message.getUriPicture() != null) {
    Picasso.with(mContext).load(message.getUriPicture()).fit().centerCrop().into(holder.mPict);
  }
  if (!PhoneNumberUtils.compare(mPhoneContact,message.getSender())) {
    holder.mLayout.setGravity(Gravity.RIGHT);
    holder.mLayout.setPadding(42,0,0,0);
    holder.mBody.setBackgroundColor(mContext.getResources().getColor(R.color.grey_mid_high));
    if (message.isRead())     holder.mIsRead.setBackgroundColor(mContext.getResources().getColor(R.color.read_green));
 else {
      holder.mIsRead.setBackgroundColor(mContext.getResources().getColor(android.R.color.transparent));
    }
  }
 else {
    holder.mLayout.setGravity(Gravity.LEFT);
    holder.mLayout.setPadding(0,0,42,0);
    holder.mBody.setBackgroundColor(mContext.getResources().getColor(R.color.grey_low));
    holder.mIsRead.setBackgroundColor(mContext.getResources().getColor(android.R.color.transparent));
  }
  return convertView;
}","@Override public View getView(int r,View convertView,ViewGroup parent){
  Message message=this.getItem(r);
  SmsBaseViewHolder holder;
  if (convertView == null) {
    holder=new SmsBaseViewHolder();
    convertView=LayoutInflater.from(mContext).inflate(R.layout.message_mms,parent,false);
    holder.mBody=(TextView)convertView.findViewById(R.id.message);
    holder.mPict=(ImageView)convertView.findViewById(R.id.m_pict);
    holder.mdate=(TextView)convertView.findViewById(R.id.date_message);
    holder.mLayout=(RelativeLayout)convertView.findViewById(R.id.message_relativeLayout);
    holder.mIsRead=(View)convertView.findViewById(R.id.is_read);
    convertView.setTag(holder);
  }
 else   holder=(SmsBaseViewHolder)convertView.getTag();
  userPref.setUserPref(PreferenceManager.getDefaultSharedPreferences(mContext));
  holder.mBody.setText(message.getBody());
  holder.mBody.setTextSize(userPref.text_size);
  holder.mdate.setText(message.getDate());
  if (message.getUriPicture() != null) {
    Picasso.with(mContext).load(message.getUriPicture()).fit().centerCrop().into(holder.mPict);
  }
  if (!PhoneNumberUtils.compare(mPhoneContact,message.getSender())) {
    holder.mLayout.setGravity(GravityCompat.END);
    holder.mLayout.setPadding(42,0,0,0);
    holder.mBody.setBackgroundColor(mContext.getResources().getColor(R.color.grey_mid_high));
    if (message.isRead())     holder.mIsRead.setBackgroundColor(mContext.getResources().getColor(R.color.read_green));
 else {
      holder.mIsRead.setBackgroundColor(mContext.getResources().getColor(android.R.color.transparent));
    }
  }
 else {
    holder.mLayout.setGravity(GravityCompat.START);
    holder.mLayout.setPadding(0,0,42,0);
    holder.mBody.setBackgroundColor(mContext.getResources().getColor(R.color.grey_low));
    holder.mIsRead.setBackgroundColor(mContext.getResources().getColor(android.R.color.transparent));
  }
  return convertView;
}",0.9918784385643176
143799,"@Override public View getView(int r,View convertView,ViewGroup parent){
  Message message=this.getItem(r);
  SmsBaseViewHolder holder;
  if (convertView == null) {
    holder=new SmsBaseViewHolder();
    convertView=LayoutInflater.from(mContext).inflate(R.layout.message,parent,false);
    holder.mBody=(TextView)convertView.findViewById(R.id.message);
    holder.mdate=(TextView)convertView.findViewById(R.id.date_message);
    holder.mLayout=(RelativeLayout)convertView.findViewById(R.id.message_relativeLayout);
    holder.mIsRead=(View)convertView.findViewById(R.id.is_read);
    convertView.setTag(holder);
  }
 else   holder=(SmsBaseViewHolder)convertView.getTag();
  userPref.setUserPref(PreferenceManager.getDefaultSharedPreferences(mContext));
  holder.mBody.setText(message.getBody());
  holder.mBody.setTextSize(userPref.text_size);
  holder.mdate.setText(message.getDate());
  if (!PhoneNumberUtils.compare(mPhoneContact,message.getSender())) {
    holder.mLayout.setGravity(Gravity.RIGHT);
    holder.mLayout.setPadding(42,0,0,0);
    holder.mBody.setBackgroundColor(mContext.getResources().getColor(R.color.grey_mid_high));
    if (message.isRead())     holder.mIsRead.setBackgroundColor(mContext.getResources().getColor(R.color.read_green));
 else {
      holder.mIsRead.setBackgroundColor(mContext.getResources().getColor(android.R.color.transparent));
    }
  }
 else {
    holder.mLayout.setGravity(Gravity.LEFT);
    holder.mLayout.setPadding(0,0,42,0);
    holder.mBody.setBackgroundColor(mContext.getResources().getColor(R.color.grey_low));
    holder.mIsRead.setBackgroundColor(mContext.getResources().getColor(android.R.color.transparent));
  }
  return convertView;
}","@Override public View getView(int r,View convertView,ViewGroup parent){
  Message message=this.getItem(r);
  SmsBaseViewHolder holder;
  if (convertView == null) {
    holder=new SmsBaseViewHolder();
    convertView=LayoutInflater.from(mContext).inflate(R.layout.message,parent,false);
    holder.mBody=(TextView)convertView.findViewById(R.id.message);
    holder.mdate=(TextView)convertView.findViewById(R.id.date_message);
    holder.mLayout=(RelativeLayout)convertView.findViewById(R.id.message_relativeLayout);
    holder.mIsRead=(View)convertView.findViewById(R.id.is_read);
    convertView.setTag(holder);
  }
 else   holder=(SmsBaseViewHolder)convertView.getTag();
  userPref.setUserPref(PreferenceManager.getDefaultSharedPreferences(mContext));
  holder.mBody.setText(message.getBody());
  holder.mBody.setTextSize(userPref.text_size);
  holder.mdate.setText(message.getDate());
  if (!PhoneNumberUtils.compare(mPhoneContact,message.getSender())) {
    holder.mLayout.setGravity(GravityCompat.END);
    holder.mLayout.setPadding(42,0,0,0);
    holder.mBody.setBackgroundColor(mContext.getResources().getColor(R.color.grey_mid_high));
    if (message.isRead())     holder.mIsRead.setBackgroundColor(mContext.getResources().getColor(R.color.read_green));
 else {
      holder.mIsRead.setBackgroundColor(mContext.getResources().getColor(android.R.color.transparent));
    }
  }
 else {
    holder.mLayout.setGravity(GravityCompat.START);
    holder.mLayout.setPadding(0,0,42,0);
    holder.mBody.setBackgroundColor(mContext.getResources().getColor(R.color.grey_low));
    holder.mIsRead.setBackgroundColor(mContext.getResources().getColor(android.R.color.transparent));
  }
  return convertView;
}",0.9908635425876804
143800,"@Override public void onCreate(){
  super.onCreate();
  mContext=getApplicationContext();
  Global.conversationsList.clear();
  loadConversationsList();
  notificationsId=new HashMap<String,Integer>();
  userPref=PreferenceManager.getDefaultSharedPreferences(mContext);
  activ_notif=userPref.getBoolean(LheidoUtils.receiver_notification_key,true);
  vibrate=userPref.getBoolean(LheidoUtils.vibration_key,true);
  v=(Vibrator)mContext.getSystemService(Context.VIBRATOR_SERVICE);
  mBroadcast=new MainServiceReceiver(){
    @Override protected void customReceiveSms(    String new_name,    String phone,    String body,    long date){
      userPref=PreferenceManager.getDefaultSharedPreferences(mContext);
      activ_notif=userPref.getBoolean(LheidoUtils.receiver_notification_key,true);
      Toast.makeText(mContext,""String_Node_Str"" + new_name,Toast.LENGTH_LONG).show();
      if (activ_notif) {
        if (!notificationsId.containsKey(phone))         notificationsId.put(phone,notificationsId.size());
        Intent notificationIntent=new Intent(mContext,MainLheidoSMS.class);
        notificationIntent.setFlags(Intent.FLAG_ACTIVITY_SINGLE_TOP);
        PendingIntent pIntent=PendingIntent.getActivity(mContext,0,notificationIntent,0);
        Intent openAction=new Intent(mContext,MainLheidoSMS.class);
        openAction.putExtra(""String_Node_Str"",new_name);
        openAction.setFlags(Intent.FLAG_ACTIVITY_SINGLE_TOP | Intent.FLAG_ACTIVITY_CLEAR_TOP | Intent.FLAG_ACTIVITY_NEW_TASK);
        PendingIntent openPending=PendingIntent.getActivity(mContext,0,openAction,PendingIntent.FLAG_CANCEL_CURRENT);
        showNotification(body,new_name,phone,pIntent,openPending);
      }
      playNotificationSound();
      moveConversationOnTop(phone,true);
      LheidoUtils.Send.receiveNewMessage(mContext);
      Time d=new Time();
      d.set(date);
      LheidoUtils.Send.notifyReceiveSms(mContext,new Message(-1,body,phone,1,d));
    }
    @Override protected void customDeliveredSms(    long id){
      userPref=PreferenceManager.getDefaultSharedPreferences(mContext);
      Toast.makeText(mContext,""String_Node_Str"",Toast.LENGTH_SHORT).show();
      LheidoUtils.Send.notifyDeliveredSms(mContext,id);
      if (userPref.getBoolean(""String_Node_Str"",true)) {
        try {
          long[] pattern={0,100,100,100,100,100,100,100,10};
          v.vibrate(pattern,-1);
        }
 catch (        Exception e) {
          Toast.makeText(mContext,e.getMessage(),Toast.LENGTH_LONG).show();
        }
      }
    }
    @Override protected void customNewMessageRead(    int position,    String phone){
      cancelNotif(phone);
      int i=0;
      int size=Global.conversationsList.size();
      while (i < size && !PhoneNumberUtils.compare(Global.conversationsList.get(i).getPhone(),phone)) {
        i++;
      }
      if (i < size && PhoneNumberUtils.compare(Global.conversationsList.get(i).getPhone(),phone)) {
        Global.conversationsList.get(i).markNewMessage(false);
      }
      LheidoUtils.Send.notifyDataChanged(mContext);
    }
    @Override protected void customSentSms(){
    }
    @Override protected void customReceiveMms(    String new_name,    String phone,    String body,    long date){
      Toast.makeText(mContext,""String_Node_Str"" + new_name,Toast.LENGTH_LONG).show();
      if (activ_notif) {
        Intent notificationIntent=new Intent(mContext,MainLheidoSMS.class);
        notificationIntent.setFlags(Intent.FLAG_ACTIVITY_CLEAR_TOP | Intent.FLAG_ACTIVITY_SINGLE_TOP);
        PendingIntent pIntent=PendingIntent.getActivity(mContext,0,notificationIntent,0);
        Intent openAction=new Intent(mContext,MainLheidoSMS.class);
        openAction.putExtra(""String_Node_Str"",new_name);
        PendingIntent openPending=PendingIntent.getActivity(mContext,0,openAction,0);
        showNotification(""String_Node_Str"",new_name,phone,pIntent,openPending);
      }
      playNotificationSound();
      LheidoUtils.Send.receiveNewMessage(mContext);
    }
    @Override protected void customUserNewMessage(    String phone){
      moveConversationOnTop(phone,false);
      LheidoUtils.Send.receiveNewMessage(mContext);
    }
    @Override protected void customCancelVibrator(){
      v.cancel();
    }
  }
;
  filter=mBroadcast.getIntentFilter(3000);
  getApplicationContext().registerReceiver(mBroadcast,filter);
  Toast.makeText(mContext,""String_Node_Str"",Toast.LENGTH_SHORT).show();
}","@Override public void onCreate(){
  super.onCreate();
  mContext=getApplicationContext();
  Global.conversationsList.clear();
  loadConversationsList();
  notificationsId=new HashMap<String,Integer>();
  userPref=PreferenceManager.getDefaultSharedPreferences(mContext);
  activ_notif=userPref.getBoolean(LheidoUtils.receiver_notification_key,true);
  vibrate=userPref.getBoolean(LheidoUtils.vibration_key,true);
  v=(Vibrator)mContext.getSystemService(Context.VIBRATOR_SERVICE);
  mBroadcast=new MainServiceReceiver(){
    @Override protected void customReceiveSms(    String new_name,    String phone,    String body,    long date){
      userPref=PreferenceManager.getDefaultSharedPreferences(mContext);
      activ_notif=userPref.getBoolean(LheidoUtils.receiver_notification_key,true);
      Toast.makeText(mContext,""String_Node_Str"" + new_name,Toast.LENGTH_LONG).show();
      if (activ_notif) {
        if (!notificationsId.containsKey(phone))         notificationsId.put(phone,notificationsId.size());
        Intent notificationIntent=new Intent(mContext,MainLheidoSMS.class);
        notificationIntent.setFlags(Intent.FLAG_ACTIVITY_SINGLE_TOP | Intent.FLAG_ACTIVITY_CLEAR_TOP | Intent.FLAG_ACTIVITY_NEW_TASK);
        PendingIntent pIntent=PendingIntent.getActivity(mContext,0,notificationIntent,0);
        Intent openAction=new Intent(mContext,MainLheidoSMS.class);
        openAction.putExtra(""String_Node_Str"",new_name);
        openAction.setFlags(Intent.FLAG_ACTIVITY_SINGLE_TOP | Intent.FLAG_ACTIVITY_CLEAR_TOP | Intent.FLAG_ACTIVITY_NEW_TASK);
        PendingIntent openPending=PendingIntent.getActivity(mContext,0,openAction,PendingIntent.FLAG_CANCEL_CURRENT);
        showNotification(body,new_name,phone,pIntent,openPending);
      }
      playNotificationSound();
      moveConversationOnTop(phone,true);
      LheidoUtils.Send.receiveNewMessage(mContext);
      Time d=new Time();
      d.set(date);
      LheidoUtils.Send.notifyReceiveSms(mContext,new Message(-1,body,phone,1,d));
    }
    @Override protected void customDeliveredSms(    long id){
      userPref=PreferenceManager.getDefaultSharedPreferences(mContext);
      Toast.makeText(mContext,""String_Node_Str"",Toast.LENGTH_SHORT).show();
      LheidoUtils.Send.notifyDeliveredSms(mContext,id);
      if (userPref.getBoolean(""String_Node_Str"",true)) {
        try {
          long[] pattern={0,100,100,100,100,100,100,100,10};
          v.vibrate(pattern,-1);
        }
 catch (        Exception e) {
          Toast.makeText(mContext,e.getMessage(),Toast.LENGTH_LONG).show();
        }
      }
    }
    @Override protected void customNewMessageRead(    int position,    String phone){
      cancelNotif(phone);
      int i=0;
      int size=Global.conversationsList.size();
      while (i < size && !PhoneNumberUtils.compare(Global.conversationsList.get(i).getPhone(),phone)) {
        i++;
      }
      if (i < size && PhoneNumberUtils.compare(Global.conversationsList.get(i).getPhone(),phone)) {
        Global.conversationsList.get(i).markNewMessage(false);
      }
      LheidoUtils.Send.notifyDataChanged(mContext);
    }
    @Override protected void customSentSms(){
    }
    @Override protected void customReceiveMms(    String new_name,    String phone,    String body,    long date){
      Toast.makeText(mContext,""String_Node_Str"" + new_name,Toast.LENGTH_LONG).show();
      if (activ_notif) {
        Intent notificationIntent=new Intent(mContext,MainLheidoSMS.class);
        notificationIntent.setFlags(Intent.FLAG_ACTIVITY_CLEAR_TOP | Intent.FLAG_ACTIVITY_SINGLE_TOP);
        PendingIntent pIntent=PendingIntent.getActivity(mContext,0,notificationIntent,0);
        Intent openAction=new Intent(mContext,MainLheidoSMS.class);
        openAction.putExtra(""String_Node_Str"",new_name);
        PendingIntent openPending=PendingIntent.getActivity(mContext,0,openAction,0);
        showNotification(""String_Node_Str"",new_name,phone,pIntent,openPending);
      }
      playNotificationSound();
      LheidoUtils.Send.receiveNewMessage(mContext);
    }
    @Override protected void customUserNewMessage(    String phone){
      moveConversationOnTop(phone,false);
      LheidoUtils.Send.receiveNewMessage(mContext);
    }
    @Override protected void customCancelVibrator(){
      v.cancel();
    }
  }
;
  filter=mBroadcast.getIntentFilter(3000);
  getApplicationContext().registerReceiver(mBroadcast,filter);
  Toast.makeText(mContext,""String_Node_Str"",Toast.LENGTH_SHORT).show();
}",0.9926875914051074
143801,"@Override protected void customReceiveSms(String new_name,String phone,String body,long date){
  userPref=PreferenceManager.getDefaultSharedPreferences(mContext);
  activ_notif=userPref.getBoolean(LheidoUtils.receiver_notification_key,true);
  Toast.makeText(mContext,""String_Node_Str"" + new_name,Toast.LENGTH_LONG).show();
  if (activ_notif) {
    if (!notificationsId.containsKey(phone))     notificationsId.put(phone,notificationsId.size());
    Intent notificationIntent=new Intent(mContext,MainLheidoSMS.class);
    notificationIntent.setFlags(Intent.FLAG_ACTIVITY_SINGLE_TOP);
    PendingIntent pIntent=PendingIntent.getActivity(mContext,0,notificationIntent,0);
    Intent openAction=new Intent(mContext,MainLheidoSMS.class);
    openAction.putExtra(""String_Node_Str"",new_name);
    openAction.setFlags(Intent.FLAG_ACTIVITY_SINGLE_TOP | Intent.FLAG_ACTIVITY_CLEAR_TOP | Intent.FLAG_ACTIVITY_NEW_TASK);
    PendingIntent openPending=PendingIntent.getActivity(mContext,0,openAction,PendingIntent.FLAG_CANCEL_CURRENT);
    showNotification(body,new_name,phone,pIntent,openPending);
  }
  playNotificationSound();
  moveConversationOnTop(phone,true);
  LheidoUtils.Send.receiveNewMessage(mContext);
  Time d=new Time();
  d.set(date);
  LheidoUtils.Send.notifyReceiveSms(mContext,new Message(-1,body,phone,1,d));
}","@Override protected void customReceiveSms(String new_name,String phone,String body,long date){
  userPref=PreferenceManager.getDefaultSharedPreferences(mContext);
  activ_notif=userPref.getBoolean(LheidoUtils.receiver_notification_key,true);
  Toast.makeText(mContext,""String_Node_Str"" + new_name,Toast.LENGTH_LONG).show();
  if (activ_notif) {
    if (!notificationsId.containsKey(phone))     notificationsId.put(phone,notificationsId.size());
    Intent notificationIntent=new Intent(mContext,MainLheidoSMS.class);
    notificationIntent.setFlags(Intent.FLAG_ACTIVITY_SINGLE_TOP | Intent.FLAG_ACTIVITY_CLEAR_TOP | Intent.FLAG_ACTIVITY_NEW_TASK);
    PendingIntent pIntent=PendingIntent.getActivity(mContext,0,notificationIntent,0);
    Intent openAction=new Intent(mContext,MainLheidoSMS.class);
    openAction.putExtra(""String_Node_Str"",new_name);
    openAction.setFlags(Intent.FLAG_ACTIVITY_SINGLE_TOP | Intent.FLAG_ACTIVITY_CLEAR_TOP | Intent.FLAG_ACTIVITY_NEW_TASK);
    PendingIntent openPending=PendingIntent.getActivity(mContext,0,openAction,PendingIntent.FLAG_CANCEL_CURRENT);
    showNotification(body,new_name,phone,pIntent,openPending);
  }
  playNotificationSound();
  moveConversationOnTop(phone,true);
  LheidoUtils.Send.receiveNewMessage(mContext);
  Time d=new Time();
  d.set(date);
  LheidoUtils.Send.notifyReceiveSms(mContext,new Message(-1,body,phone,1,d));
}",0.9759170062986292
143802,"private void selectItem(int position){
  mCurrentSelectedPosition=position;
  if (mDrawerListView != null) {
  }
  if (mDrawerLayout != null) {
    mDrawerLayout.closeDrawer(mFragmentContainerView);
  }
  if (mCallbacks != null) {
    cancelNotification(position);
    mCallbacks.onNavigationDrawerItemSelected(position,lheidoConversationListe.get(position));
  }
}","private void selectItem(int position){
  mCurrentSelectedPosition=position;
  if (mDrawerListView != null) {
  }
  if (mDrawerLayout != null && !onPauseDrawerOpened) {
    mDrawerLayout.closeDrawer(mFragmentContainerView);
  }
  if (mCallbacks != null) {
    cancelNotification(position);
    LheidoContact contact=lheidoConversationListe.get(position);
    mCallbacks.onNavigationDrawerItemSelected(position,contact);
    if (!onPauseDrawerOpened)     getActionBar().setTitle(contact.getName());
  }
}",0.7243367935409458
143803,"@Override public void onResume(){
  super.onResume();
  updateFragment();
}","@Override public void onResume(){
  super.onResume();
}",0.8461538461538461
143804,"@Override public View onCreateView(LayoutInflater inflater,ViewGroup container,Bundle savedInstanceState){
  View rootView=inflater.inflate(R.layout.conversation,container,false);
  init(rootView);
  init_sms_body(rootView);
  init_send_button(rootView);
  getActivity().setTitle(name);
  init_broadcast();
  return rootView;
}","@Override public View onCreateView(LayoutInflater inflater,ViewGroup container,Bundle savedInstanceState){
  View rootView=inflater.inflate(R.layout.conversation,container,false);
  init(rootView);
  gen_conversation();
  init_sms_body(rootView);
  init_send_button(rootView);
  init_broadcast();
  return rootView;
}",0.9161490683229814
143805,"@Override public boolean onOptionsItemSelected(MenuItem item){
  int id=item.getItemId();
  if (id == R.id.action_call) {
    Intent call=new Intent(Intent.ACTION_CALL);
    SMSFragment frag=(SMSFragment)pages.get(PAGE_SMS);
    call.setData(Uri.parse(""String_Node_Str"" + frag.phoneContact));
    startActivity(call);
    return true;
  }
 else   if (id == R.id.action_voir_contact) {
    if (contactsList.contains(Global.conversationsList.get(currentConversation))) {
      Uri contactUri=ContentUris.withAppendedId(ContactsContract.Contacts.CONTENT_URI,Global.conversationsList.get(currentConversation).getId());
      Intent look=new Intent(Intent.ACTION_VIEW,contactUri);
      look.setFlags(Intent.FLAG_ACTIVITY_NEW_TASK);
      startActivity(look);
    }
 else {
      LheidoContact c=Global.conversationsList.get(currentConversation);
      Intent intent=new Intent(Intent.ACTION_INSERT);
      intent.setType(ContactsContract.Contacts.CONTENT_TYPE);
      intent.putExtra(ContactsContract.Intents.Insert.PHONE,c.getPhone());
      startActivityForResult(intent,PICK_CONTACT);
    }
    return true;
  }
 else   if (id == R.id.action_new_conversation) {
    final Context context=this;
    LheidoUtils.LheidoDialog dialog=new LheidoUtils.LheidoDialog(this,R.layout.new_conversation,""String_Node_Str""){
      LheidoContact contact=null;
      @Override public void customInit(){
        final AutoCompleteTextView entry=(AutoCompleteTextView)findViewById(R.id.new_conversation_phone);
        if (entry != null) {
          entry.setAdapter(new AutoCompleteAdapter(context,R.layout.auto_complete,contactsList));
        }
        entry.setThreshold(1);
        entry.setOnItemClickListener(new AdapterView.OnItemClickListener(){
          @Override public void onItemClick(          AdapterView<?> adapterView,          View view,          int position,          long l){
            contact=contactsList.get(position);
            entry.setText(contact.getName());
          }
        }
);
      }
      @Override public void customCancel(){
      }
      @Override public void cancel(){
        super.cancel();
        contact=null;
      }
      @Override public void customOk(){
        AutoCompleteTextView nConversationPhone=(AutoCompleteTextView)findViewById(R.id.new_conversation_phone);
        String str=nConversationPhone.getText().toString();
        if (!PhoneNumberUtils.isGlobalPhoneNumber(str)) {
          if (contact == null) {
            for (            LheidoContact tmp : contactsList) {
              if (tmp.getName().equals(str))               contact=tmp;
            }
          }
          if (contact != null) {
            int position=-1;
            for (            LheidoContact c : Global.conversationsList) {
              if (c.getName().equals(contact.getName()))               position=Global.conversationsList.indexOf(c);
            }
            if (position != -1) {
              onNavigationDrawerItemSelected(position,Global.conversationsList.get(position));
            }
 else {
              createNewConversation(contact,str);
            }
          }
 else {
            Toast.makeText(context,R.string.error_contact_name,Toast.LENGTH_SHORT).show();
          }
        }
 else {
          int position=-1;
          for (          LheidoContact c : Global.conversationsList) {
            if (c.getName().equals(str))             position=Global.conversationsList.indexOf(c);
          }
          if (position != -1) {
            onNavigationDrawerItemSelected(position,Global.conversationsList.get(position));
          }
 else {
            createNewConversation(new LheidoContact(str,str,0L,null),str);
          }
        }
        contact=null;
      }
    }
;
    dialog.show();
    return true;
  }
 else   if (id == R.id.action_settings) {
    Intent intent;
    if (Build.VERSION.SDK_INT >= Build.VERSION_CODES.HONEYCOMB) {
      intent=new Intent(this,LheidoSMSPreference.class);
    }
 else {
      intent=new Intent(this,LheidoSMSPreferenceOldApi.class);
    }
    if (intent.resolveActivity(getPackageManager()) != null) {
      startActivity(intent);
    }
    return true;
  }
 else   if (id == R.id.action_delete_old) {
    if (userPref.old_message) {
      Intent i=new Intent(getApplicationContext(),DeleteOldSMSService.class);
      startService(i);
    }
 else {
      Toast.makeText(this,R.string.old_message_false,Toast.LENGTH_SHORT).show();
    }
  }
  return super.onOptionsItemSelected(item);
}","@Override public boolean onOptionsItemSelected(MenuItem item){
  int id=item.getItemId();
  if (id == R.id.action_call) {
    Intent call=new Intent(Intent.ACTION_CALL);
    SMSFragment frag=(SMSFragment)pages.get(PAGE_SMS);
    call.setData(Uri.parse(""String_Node_Str"" + frag.phoneContact));
    startActivity(call);
    return true;
  }
 else   if (id == R.id.action_voir_contact) {
    if (!PhoneNumberUtils.isGlobalPhoneNumber(Global.conversationsList.get(currentConversation).getName())) {
      Uri contactUri=ContentUris.withAppendedId(ContactsContract.Contacts.CONTENT_URI,Global.conversationsList.get(currentConversation).getId());
      Intent look=new Intent(Intent.ACTION_VIEW,contactUri);
      look.setFlags(Intent.FLAG_ACTIVITY_NEW_TASK);
      startActivity(look);
    }
 else {
      LheidoContact c=Global.conversationsList.get(currentConversation);
      Intent intent=new Intent(Intent.ACTION_INSERT);
      intent.setType(ContactsContract.Contacts.CONTENT_TYPE);
      intent.putExtra(ContactsContract.Intents.Insert.PHONE,c.getPhone());
      startActivityForResult(intent,PICK_CONTACT);
    }
    return true;
  }
 else   if (id == R.id.action_new_conversation) {
    final Context context=this;
    LheidoUtils.LheidoDialog dialog=new LheidoUtils.LheidoDialog(this,R.layout.new_conversation,""String_Node_Str""){
      LheidoContact contact=null;
      @Override public void customInit(){
        final AutoCompleteTextView entry=(AutoCompleteTextView)findViewById(R.id.new_conversation_phone);
        if (entry != null) {
          entry.setAdapter(new AutoCompleteAdapter(context,R.layout.auto_complete,contactsList));
        }
        entry.setThreshold(1);
        entry.setOnItemClickListener(new AdapterView.OnItemClickListener(){
          @Override public void onItemClick(          AdapterView<?> adapterView,          View view,          int position,          long l){
            contact=contactsList.get(position);
            entry.setText(contact.getName());
          }
        }
);
      }
      @Override public void customCancel(){
      }
      @Override public void cancel(){
        super.cancel();
        contact=null;
      }
      @Override public void customOk(){
        AutoCompleteTextView nConversationPhone=(AutoCompleteTextView)findViewById(R.id.new_conversation_phone);
        String str=nConversationPhone.getText().toString();
        if (!PhoneNumberUtils.isGlobalPhoneNumber(str)) {
          if (contact == null) {
            for (            LheidoContact tmp : contactsList) {
              if (tmp.getName().equals(str))               contact=tmp;
            }
          }
          if (contact != null) {
            int position=-1;
            for (            LheidoContact c : Global.conversationsList) {
              if (c.getName().equals(contact.getName()))               position=Global.conversationsList.indexOf(c);
            }
            if (position != -1) {
              onNavigationDrawerItemSelected(position,Global.conversationsList.get(position));
            }
 else {
              createNewConversation(contact,str);
            }
          }
 else {
            Toast.makeText(context,R.string.error_contact_name,Toast.LENGTH_SHORT).show();
          }
        }
 else {
          int position=-1;
          for (          LheidoContact c : Global.conversationsList) {
            if (c.getName().equals(str))             position=Global.conversationsList.indexOf(c);
          }
          if (position != -1) {
            onNavigationDrawerItemSelected(position,Global.conversationsList.get(position));
          }
 else {
            createNewConversation(new LheidoContact(str,str,0L,null),str);
          }
        }
        contact=null;
      }
    }
;
    dialog.show();
    return true;
  }
 else   if (id == R.id.action_settings) {
    Intent intent;
    if (Build.VERSION.SDK_INT >= Build.VERSION_CODES.HONEYCOMB) {
      intent=new Intent(this,LheidoSMSPreference.class);
    }
 else {
      intent=new Intent(this,LheidoSMSPreferenceOldApi.class);
    }
    if (intent.resolveActivity(getPackageManager()) != null) {
      startActivity(intent);
    }
    return true;
  }
 else   if (id == R.id.action_delete_old) {
    if (userPref.old_message) {
      Intent i=new Intent(getApplicationContext(),DeleteOldSMSService.class);
      startService(i);
    }
 else {
      Toast.makeText(this,R.string.old_message_false,Toast.LENGTH_SHORT).show();
    }
  }
  return super.onOptionsItemSelected(item);
}",0.986206896551724
143806,"public LheidoContact(String name,String phone,long nb_sms,String conversation_id){
  this.name_=name;
  this.phone_=phone;
  this.nb_sms_=nb_sms;
  this.conversation_id_=conversation_id;
}","/** 
 * @param name            : contact name.
 * @param phone           : contact phone number
 * @param nb_sms          : sms count
 * @param conversation_id : conversation id to fetch database
 */
public LheidoContact(String name,String phone,long nb_sms,String conversation_id){
  this.name_=name;
  this.phone_=phone;
  this.nb_sms_=nb_sms;
  this.conversation_id_=conversation_id;
}",0.6527777777777778
143807,"@Override public void onCreate(){
  Log.v(SERVICE_TAG,""String_Node_Str"");
  context=getApplicationContext();
  Global.conversationsList.clear();
  getConversationsList2();
  smsReceiver=new SmsReceiver(){
    @Override public void customReceivedSMS(){
      Toast.makeText(context,""String_Node_Str"" + new_name,Toast.LENGTH_LONG).show();
      if (activ_notif) {
        Intent notificationIntent=new Intent(context,MainLheidoSMS.class);
        PendingIntent pIntent=PendingIntent.getActivity(context,0,notificationIntent,0);
        showNotification(body,new_name,phone,pIntent);
      }
      playNotificationSound();
      if (vibrate)       v.vibrate(1000);
      moveConversationOnTop(phone,true);
      LheidoUtils.Send.receiveNewMessage(context);
    }
    @Override public void customReceivedMMS(){
      if (activ_notif) {
        Intent notificationIntent=new Intent(context,MainLheidoSMS.class);
        PendingIntent pIntent=PendingIntent.getActivity(context,0,notificationIntent,0);
        showNotification(""String_Node_Str"",new_name,phone,pIntent);
      }
    }
    @Override public void customNewMessageRead(    int position,    String phone){
      cancelNotif(phone);
      Global.conversationsList.get(position).markNewMessage(false);
      LheidoUtils.Send.notifyDataChanged(context);
    }
    @Override public void customDelivered(    long id){
      Toast.makeText(context,""String_Node_Str"",Toast.LENGTH_SHORT).show();
      if (userPref.getBoolean(""String_Node_Str"",true)) {
        long[] pattern={0,100,100,100,100,100,100,100};
        v.vibrate(pattern,-1);
      }
    }
  }
;
  IntentFilter filter=new IntentFilter();
  filter.addAction(LheidoUtils.ACTION_RECEIVE_SMS);
  filter.addAction(LheidoUtils.ACTION_RECEIVE_MMS);
  filter.addAction(LheidoUtils.ACTION_SENT_SMS);
  filter.addAction(LheidoUtils.ACTION_DELIVERED_SMS);
  filter.addAction(LheidoUtils.ACTION_NEW_MESSAGE_READ);
  filter.setPriority(2000);
  getApplication().registerReceiver(smsReceiver,filter);
  mBroadcast=new BroadcastReceiver(){
    @Override public void onReceive(    Context context,    Intent intent){
      String iAction=intent.getAction();
      if (iAction.equals(LheidoUtils.ACTION_USER_NEW_MESSAGE)) {
        String phone=intent.getStringExtra(""String_Node_Str"");
        moveConversationOnTop(phone,false);
        LheidoUtils.Send.receiveNewMessage(context);
      }
    }
  }
;
  IntentFilter filter2=new IntentFilter();
  filter2.addAction(LheidoUtils.ACTION_USER_NEW_MESSAGE);
  filter2.setPriority(2000);
  getApplication().registerReceiver(mBroadcast,filter2);
  super.onCreate();
}","@Override public void onCreate(){
  Log.v(SERVICE_TAG,""String_Node_Str"");
  context=getApplicationContext();
  Global.conversationsList.clear();
  getConversationsList2();
  smsReceiver=new SmsReceiver(){
    @Override public void customReceivedSMS(){
      Toast.makeText(context,""String_Node_Str"" + new_name,Toast.LENGTH_LONG).show();
      if (activ_notif) {
        Intent notificationIntent=new Intent(context,MainLheidoSMS.class);
        PendingIntent pIntent=PendingIntent.getActivity(context,0,notificationIntent,0);
        showNotification(body,new_name,phone,pIntent);
      }
      playNotificationSound();
      if (vibrate)       v.vibrate(1000);
      moveConversationOnTop(phone,true);
      LheidoUtils.Send.receiveNewMessage(context);
    }
    @Override public void customReceivedMMS(){
      if (activ_notif) {
        Intent notificationIntent=new Intent(context,MainLheidoSMS.class);
        PendingIntent pIntent=PendingIntent.getActivity(context,0,notificationIntent,0);
        showNotification(""String_Node_Str"",new_name,phone,pIntent);
      }
    }
    @Override public void customNewMessageRead(    int position,    String phone){
      cancelNotif(phone);
      int i=0;
      int size=Global.conversationsList.size();
      while (i < size && !PhoneNumberUtils.compare(Global.conversationsList.get(i).getPhone(),phone)) {
        i++;
      }
      if (i < size && PhoneNumberUtils.compare(Global.conversationsList.get(i).getPhone(),phone)) {
        Global.conversationsList.get(i).markNewMessage(false);
      }
      LheidoUtils.Send.notifyDataChanged(context);
    }
    @Override public void customDelivered(    long id){
      Toast.makeText(context,""String_Node_Str"",Toast.LENGTH_SHORT).show();
      if (userPref.getBoolean(""String_Node_Str"",true)) {
        long[] pattern={0,100,100,100,100,100,100,100};
        v.vibrate(pattern,-1);
      }
    }
  }
;
  IntentFilter filter=new IntentFilter();
  filter.addAction(LheidoUtils.ACTION_RECEIVE_SMS);
  filter.addAction(LheidoUtils.ACTION_RECEIVE_MMS);
  filter.addAction(LheidoUtils.ACTION_SENT_SMS);
  filter.addAction(LheidoUtils.ACTION_DELIVERED_SMS);
  filter.addAction(LheidoUtils.ACTION_NEW_MESSAGE_READ);
  filter.setPriority(2000);
  getApplication().registerReceiver(smsReceiver,filter);
  mBroadcast=new BroadcastReceiver(){
    @Override public void onReceive(    Context context,    Intent intent){
      String iAction=intent.getAction();
      if (iAction.equals(LheidoUtils.ACTION_USER_NEW_MESSAGE)) {
        String phone=intent.getStringExtra(""String_Node_Str"");
        moveConversationOnTop(phone,false);
        LheidoUtils.Send.receiveNewMessage(context);
      }
    }
  }
;
  IntentFilter filter2=new IntentFilter();
  filter2.addAction(LheidoUtils.ACTION_USER_NEW_MESSAGE);
  filter2.setPriority(2000);
  getApplication().registerReceiver(mBroadcast,filter2);
  super.onCreate();
}",0.942758495366164
143808,"@Override public void customNewMessageRead(int position,String phone){
  cancelNotif(phone);
  Global.conversationsList.get(position).markNewMessage(false);
  LheidoUtils.Send.notifyDataChanged(context);
}","@Override public void customNewMessageRead(int position,String phone){
  cancelNotif(phone);
  int i=0;
  int size=Global.conversationsList.size();
  while (i < size && !PhoneNumberUtils.compare(Global.conversationsList.get(i).getPhone(),phone)) {
    i++;
  }
  if (i < size && PhoneNumberUtils.compare(Global.conversationsList.get(i).getPhone(),phone)) {
    Global.conversationsList.get(i).markNewMessage(false);
  }
  LheidoUtils.Send.notifyDataChanged(context);
}",0.5735512630014858
143809,"public void link(FragmentActivity pActivity){
  act=new WeakReference<FragmentActivity>(pActivity);
}","public void link(MainLheidoSMS pActivity){
  act=new WeakReference<MainLheidoSMS>(pActivity);
}",0.7653061224489796
143810,"@Override protected Boolean doInBackground(Void... params){
  if (act.get() != null) {
    Cursor allMms=context.getContentResolver().query(Uri.parse(mms_uri),projection,selection,selectionArgs.toArray(new String[selectionArgs.size()]),""String_Node_Str"");
    if (allMms != null) {
      int count=0;
      while (count < userPref.max_sms && allMms.moveToNext()) {
        long mmsId=allMms.getLong(allMms.getColumnIndexOrThrow(""String_Node_Str""));
        int read=allMms.getInt(allMms.getColumnIndexOrThrow(""String_Node_Str""));
        String senderAdd=getAddressNumber(mmsId);
        if (senderAdd == null)         senderAdd=getUserPhone(context);
        Message mms=getMMSData(mmsId,senderAdd);
        long date=allMms.getLong(allMms.getColumnIndex(""String_Node_Str""));
        Time t=new Time();
        t.set(date);
        mms.setDate(t);
        publishProgress(mms);
        count+=1;
      }
      allMms.close();
      if (count == 0 && last_sms == -1) {
        Time now=new Time();
        now.setToNow();
        Message sms=new Message(-1L,""String_Node_Str"",""String_Node_Str"",0,now);
        publishProgress(sms);
      }
    }
    return true;
  }
  return false;
}","@Override protected Boolean doInBackground(Void... voids){
  String[] projection={ContactsContract.Contacts._ID,ContactsContract.Contacts.DISPLAY_NAME,ContactsContract.Contacts.HAS_PHONE_NUMBER};
  if (act.get() != null) {
    Cursor c=context.getContentResolver().query(ContactsContract.Contacts.CONTENT_URI,projection,null,null,null);
    if (c != null) {
      while (c.moveToNext()) {
        String phone=null;
        String id=c.getString(c.getColumnIndex(ContactsContract.Contacts._ID));
        String name=c.getString(c.getColumnIndex(ContactsContract.Contacts.DISPLAY_NAME));
        int hasPhone=c.getInt(c.getColumnIndex(ContactsContract.Contacts.HAS_PHONE_NUMBER));
        if (hasPhone > 0) {
          String[] pr={ContactsContract.CommonDataKinds.Phone.NUMBER};
          Cursor cur=context.getContentResolver().query(ContactsContract.CommonDataKinds.Phone.CONTENT_URI,pr,ContactsContract.CommonDataKinds.Phone.CONTACT_ID + ""String_Node_Str"" + id,null,null);
          if (cur != null) {
            while (cur.moveToNext()) {
              phone=cur.getString(cur.getColumnIndex(ContactsContract.CommonDataKinds.Phone.NUMBER));
            }
            cur.close();
            LheidoContact contact=new LheidoContact();
            contact.setId(Long.parseLong(id));
            contact.setName(name);
            contact.setPhone(phone);
            contact.setPic();
            publishProgress(contact);
          }
        }
      }
      c.close();
      return true;
    }
  }
  return false;
}",0.1442307692307692
143811,"public static long store_sms(Context context,Message sms,long thread_id){
  try {
    ContentValues values=new ContentValues();
    values.put(""String_Node_Str"",sms.getSender());
    values.put(""String_Node_Str"",sms.getBody());
    values.put(""String_Node_Str"",false);
    values.put(""String_Node_Str"",isRight(context,sms.getSender()) ? 2 : 1);
    values.put(""String_Node_Str"",32);
    if (thread_id != -1)     values.put(""String_Node_Str"",thread_id);
    values.put(""String_Node_Str"",sms.getDateNormalize());
    Uri uri_id=context.getContentResolver().insert(Uri.parse(""String_Node_Str""),values);
    if (uri_id != null)     return Long.parseLong(uri_id.toString().substring(14));
  }
 catch (  Exception ex) {
    Toast.makeText(context,""String_Node_Str"" + ex.toString(),Toast.LENGTH_LONG).show();
  }
  return -1;
}","public static long store_sms(Context context,String phoneContact,Message sms,long thread_id){
  try {
    ContentValues values=new ContentValues();
    values.put(""String_Node_Str"",sms.getSender());
    values.put(""String_Node_Str"",sms.getBody());
    values.put(""String_Node_Str"",false);
    values.put(""String_Node_Str"",(!PhoneNumberUtils.compare(phoneContact,sms.getSender())) ? 2 : 1);
    values.put(""String_Node_Str"",32);
    if (thread_id != -1)     values.put(""String_Node_Str"",thread_id);
    values.put(""String_Node_Str"",sms.getDateNormalize());
    Uri uri_id=context.getContentResolver().insert(Uri.parse(""String_Node_Str""),values);
    if (uri_id != null)     return Long.parseLong(uri_id.toString().substring(14));
  }
 catch (  Exception ex) {
    Toast.makeText(context,""String_Node_Str"" + ex.toString(),Toast.LENGTH_LONG).show();
  }
  return -1;
}",0.9388724035608308
143812,"@Override protected void onPreExecute(){
  if (act.get() != null) {
    context=act.get().getApplicationContext();
    userPref=new UserPref();
    userPref.setUserPref(PreferenceManager.getDefaultSharedPreferences(context));
  }
}","@Override protected void onPreExecute(){
  if (act.get() != null) {
    context=act.get().getApplicationContext();
  }
}",0.6837606837606838
143813,@Override abstract protected void onProgressUpdate(Message... prog);,@Override abstract protected void onProgressUpdate(LheidoContact... prog);,0.8873239436619719
143814,"public void init_sms_body(){
  sms_body=(EditText)findViewById(R.id.send_body);
  final Context context=this;
  sms_body.setOnFocusChangeListener(new View.OnFocusChangeListener(){
    @Override public void onFocusChange(    View v,    boolean hasFocus){
      if (!hasFocus) {
        InputMethodManager inputManager=(InputMethodManager)context.getSystemService(Context.INPUT_METHOD_SERVICE);
        inputManager.hideSoftInputFromWindow(v.getWindowToken(),InputMethodManager.HIDE_NOT_ALWAYS);
      }
    }
  }
);
  if (mem_body != null)   sms_body.setText(mem_body);
  sms_body.setInputType(InputType.TYPE_CLASS_TEXT | InputType.TYPE_TEXT_FLAG_CAP_SENTENCES | InputType.TYPE_TEXT_FLAG_AUTO_CORRECT);
  if (!userPref.first_upper)   sms_body.setInputType(InputType.TYPE_CLASS_TEXT | InputType.TYPE_TEXT_FLAG_AUTO_CORRECT);
  sms_body.setSingleLine(false);
  sms_body.setFocusable(false);
}","public void init_sms_body(){
  sms_body=(EditText)findViewById(R.id.send_body);
  final Context context=this;
  sms_body.setOnFocusChangeListener(new View.OnFocusChangeListener(){
    @Override public void onFocusChange(    View v,    boolean hasFocus){
      if (!hasFocus) {
        InputMethodManager inputManager=(InputMethodManager)context.getSystemService(Context.INPUT_METHOD_SERVICE);
        inputManager.hideSoftInputFromWindow(v.getWindowToken(),InputMethodManager.HIDE_NOT_ALWAYS);
      }
    }
  }
);
  if (mem_body != null)   sms_body.setText(mem_body);
  sms_body.setInputType(InputType.TYPE_CLASS_TEXT | InputType.TYPE_TEXT_FLAG_CAP_SENTENCES | InputType.TYPE_TEXT_FLAG_AUTO_CORRECT);
  if (!userPref.first_upper)   sms_body.setInputType(InputType.TYPE_CLASS_TEXT | InputType.TYPE_TEXT_FLAG_AUTO_CORRECT);
  sms_body.setSingleLine(false);
}",0.981672394043528
143815,"public ConversationAdapter(Context context,int ressource,ArrayList<Message> conversation){
  mContext=context;
  mListSms=conversation;
  userPref=new LheidoUtils.UserPref();
  userPref.setUserPref(PreferenceManager.getDefaultSharedPreferences(mContext));
}","public ConversationAdapter(Context context,String contactPhone,ArrayList<Message> conversation){
  mContext=context;
  mListSms=conversation;
  mPhoneContact=contactPhone;
  userPref=new LheidoUtils.UserPref();
  userPref.setUserPref(PreferenceManager.getDefaultSharedPreferences(mContext));
}",0.8909090909090909
143816,"public View getView(int r,View convertView,ViewGroup parent){
  Message message=(Message)this.getItem(r);
  ConversationViewHolder holder;
  if (convertView == null) {
    holder=new ConversationViewHolder();
    convertView=LayoutInflater.from(mContext).inflate(R.layout.message,parent,false);
    holder.mBody=(TextView)convertView.findViewById(R.id.message);
    holder.mdate=(TextView)convertView.findViewById(R.id.date_message);
    holder.mLayout=(RelativeLayout)convertView.findViewById(R.id.message_relativeLayout);
    holder.mIsRead=(View)convertView.findViewById(R.id.is_read);
    convertView.setTag(holder);
  }
 else   holder=(ConversationViewHolder)convertView.getTag();
  holder.mBody.setText(message.getBody());
  holder.mBody.setTextSize(userPref.text_size);
  holder.mdate.setText(message.getDate());
  if (LheidoUtils.isRight(mContext,message.getSender())) {
    holder.mLayout.setGravity(Gravity.RIGHT);
    holder.mLayout.setPadding(42,0,0,0);
    holder.mBody.setBackgroundColor(mContext.getResources().getColor(R.color.grey_mid_high));
    if (message.isRead())     holder.mIsRead.setBackgroundColor(mContext.getResources().getColor(R.color.read_green));
 else {
      holder.mIsRead.setBackgroundColor(mContext.getResources().getColor(android.R.color.transparent));
    }
  }
 else {
    holder.mLayout.setGravity(Gravity.LEFT);
    holder.mLayout.setPadding(0,0,42,0);
    holder.mBody.setBackgroundColor(mContext.getResources().getColor(R.color.grey_low));
    holder.mIsRead.setBackgroundColor(mContext.getResources().getColor(android.R.color.transparent));
  }
  return convertView;
}","public View getView(int r,View convertView,ViewGroup parent){
  Message message=(Message)this.getItem(r);
  ConversationViewHolder holder;
  if (convertView == null) {
    holder=new ConversationViewHolder();
    convertView=LayoutInflater.from(mContext).inflate(R.layout.message,parent,false);
    holder.mBody=(TextView)convertView.findViewById(R.id.message);
    holder.mdate=(TextView)convertView.findViewById(R.id.date_message);
    holder.mLayout=(RelativeLayout)convertView.findViewById(R.id.message_relativeLayout);
    holder.mIsRead=(View)convertView.findViewById(R.id.is_read);
    convertView.setTag(holder);
  }
 else   holder=(ConversationViewHolder)convertView.getTag();
  holder.mBody.setText(message.getBody());
  holder.mBody.setTextSize(userPref.text_size);
  holder.mdate.setText(message.getDate());
  if (!PhoneNumberUtils.compare(mPhoneContact,message.getSender())) {
    holder.mLayout.setGravity(Gravity.RIGHT);
    holder.mLayout.setPadding(42,0,0,0);
    holder.mBody.setBackgroundColor(mContext.getResources().getColor(R.color.grey_mid_high));
    if (message.isRead())     holder.mIsRead.setBackgroundColor(mContext.getResources().getColor(R.color.read_green));
 else {
      holder.mIsRead.setBackgroundColor(mContext.getResources().getColor(android.R.color.transparent));
    }
  }
 else {
    holder.mLayout.setGravity(Gravity.LEFT);
    holder.mLayout.setPadding(0,0,42,0);
    holder.mBody.setBackgroundColor(mContext.getResources().getColor(R.color.grey_low));
    holder.mIsRead.setBackgroundColor(mContext.getResources().getColor(android.R.color.transparent));
  }
  return convertView;
}",0.983626814952116
143817,"public View getView(int r,View convertView,ViewGroup parent){
  Message message=(Message)this.getItem(r);
  ConversationViewHolder holder;
  if (convertView == null) {
    holder=new ConversationViewHolder();
    convertView=LayoutInflater.from(mContext).inflate(R.layout.message_mms,parent,false);
    holder.mBody=(TextView)convertView.findViewById(R.id.message);
    holder.mPict=(ImageView)convertView.findViewById(R.id.m_pict);
    holder.mdate=(TextView)convertView.findViewById(R.id.date_message);
    holder.mLayout=(RelativeLayout)convertView.findViewById(R.id.message_relativeLayout);
    holder.mIsRead=(View)convertView.findViewById(R.id.is_read);
    convertView.setTag(holder);
  }
 else   holder=(ConversationViewHolder)convertView.getTag();
  holder.mBody.setText(message.getBody());
  holder.mBody.setTextSize(userPref.text_size);
  holder.mdate.setText(message.getDate());
  if (message.getUriPicture() != null) {
    Picasso.with(mContext).load(message.getUriPicture()).fit().centerCrop().into(holder.mPict);
  }
  if (LheidoUtils.isRight(mContext,message.getSender())) {
    holder.mLayout.setGravity(Gravity.RIGHT);
    holder.mLayout.setPadding(42,0,0,0);
    holder.mBody.setBackgroundColor(mContext.getResources().getColor(R.color.grey_mid_high));
    if (message.isRead())     holder.mIsRead.setBackgroundColor(mContext.getResources().getColor(R.color.read_green));
 else {
      holder.mIsRead.setBackgroundColor(mContext.getResources().getColor(android.R.color.transparent));
    }
  }
 else {
    holder.mLayout.setGravity(Gravity.LEFT);
    holder.mLayout.setPadding(0,0,42,0);
    holder.mBody.setBackgroundColor(mContext.getResources().getColor(R.color.grey_low));
    holder.mIsRead.setBackgroundColor(mContext.getResources().getColor(android.R.color.transparent));
  }
  return convertView;
}","public View getView(int r,View convertView,ViewGroup parent){
  Message message=(Message)this.getItem(r);
  ConversationViewHolder holder;
  if (convertView == null) {
    holder=new ConversationViewHolder();
    convertView=LayoutInflater.from(mContext).inflate(R.layout.message_mms,parent,false);
    holder.mBody=(TextView)convertView.findViewById(R.id.message);
    holder.mPict=(ImageView)convertView.findViewById(R.id.m_pict);
    holder.mdate=(TextView)convertView.findViewById(R.id.date_message);
    holder.mLayout=(RelativeLayout)convertView.findViewById(R.id.message_relativeLayout);
    holder.mIsRead=(View)convertView.findViewById(R.id.is_read);
    convertView.setTag(holder);
  }
 else   holder=(ConversationViewHolder)convertView.getTag();
  holder.mBody.setText(message.getBody());
  holder.mBody.setTextSize(userPref.text_size);
  holder.mdate.setText(message.getDate());
  if (message.getUriPicture() != null) {
    Picasso.with(mContext).load(message.getUriPicture()).fit().centerCrop().into(holder.mPict);
  }
  if (!PhoneNumberUtils.compare(mPhoneContact,message.getSender())) {
    holder.mLayout.setGravity(Gravity.RIGHT);
    holder.mLayout.setPadding(42,0,0,0);
    holder.mBody.setBackgroundColor(mContext.getResources().getColor(R.color.grey_mid_high));
    if (message.isRead())     holder.mIsRead.setBackgroundColor(mContext.getResources().getColor(R.color.read_green));
 else {
      holder.mIsRead.setBackgroundColor(mContext.getResources().getColor(android.R.color.transparent));
    }
  }
 else {
    holder.mLayout.setGravity(Gravity.LEFT);
    holder.mLayout.setPadding(0,0,42,0);
    holder.mBody.setBackgroundColor(mContext.getResources().getColor(R.color.grey_low));
    holder.mIsRead.setBackgroundColor(mContext.getResources().getColor(android.R.color.transparent));
  }
  return convertView;
}",0.9855230811253756
143818,"public MMSAdapter(Context context,ArrayList<Message> conversation){
  mContext=context;
  mListSms=conversation;
  userPref=new LheidoUtils.UserPref();
  userPref.setUserPref(PreferenceManager.getDefaultSharedPreferences(mContext));
}","public MMSAdapter(Context context,String contactPhone,ArrayList<Message> conversation){
  mContext=context;
  mListSms=conversation;
  mPhoneContact=contactPhone;
  userPref=new LheidoUtils.UserPref();
  userPref.setUserPref(PreferenceManager.getDefaultSharedPreferences(mContext));
}",0.9034749034749034
143819,"@Override public View onCreateView(LayoutInflater inflater,ViewGroup container,Bundle savedInstanceState){
  View rootView=inflater.inflate(R.layout.conversation_mms,container,false);
  if (rootView != null) {
    context=getActivity();
    userPref=new LheidoUtils.UserPref();
    userPref.setUserPref(PreferenceManager.getDefaultSharedPreferences(context));
    name=getArguments().getString(ARG_CONTACT_NAME);
    phoneContact=getArguments().getString(ARG_CONTACT_PHONE);
    conversationId=getArguments().getInt(ARG_CONVERSATION_ID);
    list_conversationId=getArguments().getInt(ARG_CONVERSATION_NUMBER);
    liste=(JazzyListView)rootView.findViewById(R.id.list_conversation_mms);
    liste.setTransitionEffect(userPref.conversation_effect);
    liste.setTranscriptMode(ListView.TRANSCRIPT_MODE_NORMAL);
    liste.setOnItemClickListener(new MMSItemClickListener());
    zoom=(ImageButton)rootView.findViewById(R.id.expanded_image);
    zoom.setOnClickListener(new View.OnClickListener(){
      @Override public void onClick(      View view){
        zoom.setVisibility(View.INVISIBLE);
      }
    }
);
    conversation_nb_sms=getArguments().getLong(ARG_CONVERSATION_COUNT);
    conversationMmsAdapter=new MMSAdapter(context,Message_list);
    liste.setAdapter(conversationMmsAdapter);
    swipeLayout=(SwipeRefreshLayout)rootView.findViewById(R.id.swipe_container);
    swipeLayout.setOnRefreshListener(this);
    init_broadcast();
  }
  return rootView;
}","@Override public View onCreateView(LayoutInflater inflater,ViewGroup container,Bundle savedInstanceState){
  View rootView=inflater.inflate(R.layout.conversation_mms,container,false);
  if (rootView != null) {
    context=getActivity();
    userPref=new LheidoUtils.UserPref();
    userPref.setUserPref(PreferenceManager.getDefaultSharedPreferences(context));
    name=getArguments().getString(ARG_CONTACT_NAME);
    phoneContact=getArguments().getString(ARG_CONTACT_PHONE);
    conversationId=getArguments().getInt(ARG_CONVERSATION_ID);
    list_conversationId=getArguments().getInt(ARG_CONVERSATION_NUMBER);
    liste=(JazzyListView)rootView.findViewById(R.id.list_conversation_mms);
    liste.setTransitionEffect(userPref.conversation_effect);
    liste.setTranscriptMode(ListView.TRANSCRIPT_MODE_NORMAL);
    liste.setOnItemClickListener(new MMSItemClickListener());
    zoom=(ImageButton)rootView.findViewById(R.id.expanded_image);
    zoom.setOnClickListener(new View.OnClickListener(){
      @Override public void onClick(      View view){
        zoom.setVisibility(View.INVISIBLE);
      }
    }
);
    conversation_nb_sms=getArguments().getLong(ARG_CONVERSATION_COUNT);
    conversationMmsAdapter=new MMSAdapter(context,phoneContact,Message_list);
    liste.setAdapter(conversationMmsAdapter);
    swipeLayout=(SwipeRefreshLayout)rootView.findViewById(R.id.swipe_container);
    swipeLayout.setOnRefreshListener(this);
    init_broadcast();
  }
  return rootView;
}",0.9955737146748382
143820,"private void init(View rootView){
  context=getActivity();
  userPref=new LheidoUtils.UserPref();
  userPref.setUserPref(PreferenceManager.getDefaultSharedPreferences(context));
  name=getArguments().getString(ARG_CONTACT_NAME);
  phoneContact=getArguments().getString(ARG_CONTACT_PHONE);
  conversationId=getArguments().getInt(ARG_CONVERSATION_ID);
  conversation_nb_sms=getArguments().getLong(ARG_CONVERSATION_COUNT);
  liste=(JazzyListView)rootView.findViewById(R.id.list_conversation);
  liste.setTransitionEffect(userPref.conversation_effect);
  liste.setTranscriptMode(ListView.TRANSCRIPT_MODE_NORMAL);
  list_conversationId=getArguments().getInt(ARG_CONVERSATION_NUMBER);
  liste.setOnItemLongClickListener(new AdapterView.OnItemLongClickListener(){
    @Override public boolean onItemLongClick(    AdapterView<?> adapterView,    View view,    int position,    long id){
      int sdk=android.os.Build.VERSION.SDK_INT;
      if (sdk < Build.VERSION_CODES.HONEYCOMB) {
        android.text.ClipboardManager clipboard=(android.text.ClipboardManager)context.getSystemService(Context.CLIPBOARD_SERVICE);
        clipboard.setText(Message_list.get(Message_list.size() - 1 - position).getBody());
      }
 else {
        android.content.ClipboardManager clipboard=(android.content.ClipboardManager)context.getSystemService(Context.CLIPBOARD_SERVICE);
        ClipData clip=ClipData.newPlainText(""String_Node_Str"",Message_list.get(Message_list.size() - 1 - position).getBody());
        clipboard.setPrimaryClip(clip);
      }
      Toast.makeText(context,""String_Node_Str"",Toast.LENGTH_LONG).show();
      return true;
    }
  }
);
  conversationAdapter=new ConversationAdapter(context,R.layout.message,Message_list);
  liste.setAdapter(conversationAdapter);
  swipeLayout=(SwipeRefreshLayout)rootView.findViewById(R.id.swipe_container);
  swipeLayout.setOnRefreshListener(this);
}","private void init(View rootView){
  context=getActivity();
  userPref=new LheidoUtils.UserPref();
  userPref.setUserPref(PreferenceManager.getDefaultSharedPreferences(context));
  name=getArguments().getString(ARG_CONTACT_NAME);
  phoneContact=getArguments().getString(ARG_CONTACT_PHONE);
  conversationId=getArguments().getInt(ARG_CONVERSATION_ID);
  conversation_nb_sms=getArguments().getLong(ARG_CONVERSATION_COUNT);
  liste=(JazzyListView)rootView.findViewById(R.id.list_conversation);
  liste.setTransitionEffect(userPref.conversation_effect);
  liste.setTranscriptMode(ListView.TRANSCRIPT_MODE_NORMAL);
  list_conversationId=getArguments().getInt(ARG_CONVERSATION_NUMBER);
  liste.setOnItemLongClickListener(new AdapterView.OnItemLongClickListener(){
    @Override public boolean onItemLongClick(    AdapterView<?> adapterView,    View view,    int position,    long id){
      int sdk=android.os.Build.VERSION.SDK_INT;
      if (sdk < Build.VERSION_CODES.HONEYCOMB) {
        android.text.ClipboardManager clipboard=(android.text.ClipboardManager)context.getSystemService(Context.CLIPBOARD_SERVICE);
        clipboard.setText(Message_list.get(Message_list.size() - 1 - position).getBody());
      }
 else {
        android.content.ClipboardManager clipboard=(android.content.ClipboardManager)context.getSystemService(Context.CLIPBOARD_SERVICE);
        ClipData clip=ClipData.newPlainText(""String_Node_Str"",Message_list.get(Message_list.size() - 1 - position).getBody());
        clipboard.setPrimaryClip(clip);
      }
      Toast.makeText(context,""String_Node_Str"",Toast.LENGTH_LONG).show();
      return true;
    }
  }
);
  conversationAdapter=new ConversationAdapter(context,phoneContact,Message_list);
  liste.setAdapter(conversationAdapter);
  swipeLayout=(SwipeRefreshLayout)rootView.findViewById(R.id.swipe_container);
  swipeLayout.setOnRefreshListener(this);
}",0.9925531914893616
143821,"@Override public void onCreate(){
  Log.v(SERVICE_TAG,""String_Node_Str"");
  context=getApplicationContext();
  Global.conversationsList.clear();
  getConversationsList2();
  smsReceiver=new SmsReceiver(){
    @Override public void customReceivedSMS(){
      Toast.makeText(context,""String_Node_Str"" + new_name,Toast.LENGTH_LONG).show();
      if (activ_notif) {
        Intent notificationIntent=new Intent(context,MainLheidoSMS.class);
        PendingIntent pIntent=PendingIntent.getActivity(context,0,notificationIntent,0);
        showNotification(body,new_name,phone,pIntent);
      }
      playNotificationSound();
      if (vibrate)       v.vibrate(1000);
      moveConversationOnTop(phone,true);
      LheidoUtils.Send.receiveNewMessage(context);
    }
    @Override public void customReceivedMMS(){
      if (activ_notif) {
        Intent notificationIntent=new Intent(context,MainLheidoSMS.class);
        PendingIntent pIntent=PendingIntent.getActivity(context,0,notificationIntent,0);
        showNotification(""String_Node_Str"",new_name,phone,pIntent);
      }
    }
    @Override public void customNewMessageRead(    int position,    String phone){
      cancelNotif(phone);
      int i=0;
      int size=Global.conversationsList.size();
      while (i < size && !PhoneNumberUtils.compare(Global.conversationsList.get(i).getPhone(),phone)) {
        i++;
      }
      if (i < size && PhoneNumberUtils.compare(Global.conversationsList.get(i).getPhone(),phone)) {
        Global.conversationsList.get(i).markNewMessage(false);
      }
      LheidoUtils.Send.notifyDataChanged(context);
    }
    @Override public void customDelivered(    long id){
      Toast.makeText(context,""String_Node_Str"",Toast.LENGTH_SHORT).show();
      if (userPref.getBoolean(""String_Node_Str"",true)) {
        long[] pattern={0,100,100,100,100,100,100,100};
        v.vibrate(pattern,-1);
      }
    }
  }
;
  IntentFilter filter=new IntentFilter();
  filter.addAction(LheidoUtils.ACTION_RECEIVE_SMS);
  filter.addAction(LheidoUtils.ACTION_RECEIVE_MMS);
  filter.addAction(LheidoUtils.ACTION_SENT_SMS);
  filter.addAction(LheidoUtils.ACTION_DELIVERED_SMS);
  filter.addAction(LheidoUtils.ACTION_NEW_MESSAGE_READ);
  filter.setPriority(2000);
  getApplication().registerReceiver(smsReceiver,filter);
  mBroadcast=new BroadcastReceiver(){
    @Override public void onReceive(    Context context,    Intent intent){
      String iAction=intent.getAction();
      if (iAction.equals(LheidoUtils.ACTION_USER_NEW_MESSAGE)) {
        String phone=intent.getStringExtra(""String_Node_Str"");
        moveConversationOnTop(phone,false);
        LheidoUtils.Send.receiveNewMessage(context);
      }
    }
  }
;
  IntentFilter filter2=new IntentFilter();
  filter2.addAction(LheidoUtils.ACTION_USER_NEW_MESSAGE);
  filter2.setPriority(2000);
  getApplication().registerReceiver(mBroadcast,filter2);
  super.onCreate();
}","@Override public void onCreate(){
  Log.v(SERVICE_TAG,""String_Node_Str"");
  context=getApplicationContext();
  Global.conversationsList.clear();
  getConversationsList2();
  smsReceiver=new SmsReceiver(){
    @Override public void customReceivedSMS(){
      Toast.makeText(context,""String_Node_Str"" + new_name,Toast.LENGTH_LONG).show();
      if (activ_notif) {
        Intent notificationIntent=new Intent(context,MainLheidoSMS.class);
        PendingIntent pIntent=PendingIntent.getActivity(context,0,notificationIntent,0);
        showNotification(body,new_name,phone,pIntent);
      }
      playNotificationSound();
      moveConversationOnTop(phone,true);
      LheidoUtils.Send.receiveNewMessage(context);
    }
    @Override public void customReceivedMMS(){
      if (activ_notif) {
        Intent notificationIntent=new Intent(context,MainLheidoSMS.class);
        PendingIntent pIntent=PendingIntent.getActivity(context,0,notificationIntent,0);
        showNotification(""String_Node_Str"",new_name,phone,pIntent);
      }
    }
    @Override public void customNewMessageRead(    int position,    String phone){
      cancelNotif(phone);
      int i=0;
      int size=Global.conversationsList.size();
      while (i < size && !PhoneNumberUtils.compare(Global.conversationsList.get(i).getPhone(),phone)) {
        i++;
      }
      if (i < size && PhoneNumberUtils.compare(Global.conversationsList.get(i).getPhone(),phone)) {
        Global.conversationsList.get(i).markNewMessage(false);
      }
      LheidoUtils.Send.notifyDataChanged(context);
    }
    @Override public void customDelivered(    long id){
      Toast.makeText(context,""String_Node_Str"",Toast.LENGTH_SHORT).show();
      if (userPref.getBoolean(""String_Node_Str"",true)) {
        try {
          long[] pattern={0,100,100,100,100,100,100,100};
          v.vibrate(pattern,-1);
        }
 catch (        Exception e) {
          Toast.makeText(context,e.getMessage(),Toast.LENGTH_LONG).show();
        }
      }
    }
  }
;
  IntentFilter filter=new IntentFilter();
  filter.addAction(LheidoUtils.ACTION_RECEIVE_SMS);
  filter.addAction(LheidoUtils.ACTION_RECEIVE_MMS);
  filter.addAction(LheidoUtils.ACTION_SENT_SMS);
  filter.addAction(LheidoUtils.ACTION_DELIVERED_SMS);
  filter.addAction(LheidoUtils.ACTION_NEW_MESSAGE_READ);
  filter.setPriority(2000);
  getApplication().registerReceiver(smsReceiver,filter);
  mBroadcast=new BroadcastReceiver(){
    @Override public void onReceive(    Context context,    Intent intent){
      String iAction=intent.getAction();
      if (iAction.equals(LheidoUtils.ACTION_USER_NEW_MESSAGE)) {
        String phone=intent.getStringExtra(""String_Node_Str"");
        moveConversationOnTop(phone,false);
        LheidoUtils.Send.receiveNewMessage(context);
      }
    }
  }
;
  IntentFilter filter2=new IntentFilter();
  filter2.addAction(LheidoUtils.ACTION_USER_NEW_MESSAGE);
  filter2.addAction(LheidoUtils.ACTION_CANCEL_VIBRATOR);
  filter2.setPriority(2000);
  getApplication().registerReceiver(mBroadcast,filter2);
  super.onCreate();
}",0.9591802452544936
143822,"@Override public void customReceivedSMS(){
  Toast.makeText(context,""String_Node_Str"" + new_name,Toast.LENGTH_LONG).show();
  if (activ_notif) {
    Intent notificationIntent=new Intent(context,MainLheidoSMS.class);
    PendingIntent pIntent=PendingIntent.getActivity(context,0,notificationIntent,0);
    showNotification(body,new_name,phone,pIntent);
  }
  playNotificationSound();
  if (vibrate)   v.vibrate(1000);
  moveConversationOnTop(phone,true);
  LheidoUtils.Send.receiveNewMessage(context);
}","@Override public void customReceivedSMS(){
  Toast.makeText(context,""String_Node_Str"" + new_name,Toast.LENGTH_LONG).show();
  if (activ_notif) {
    Intent notificationIntent=new Intent(context,MainLheidoSMS.class);
    PendingIntent pIntent=PendingIntent.getActivity(context,0,notificationIntent,0);
    showNotification(body,new_name,phone,pIntent);
  }
  playNotificationSound();
  moveConversationOnTop(phone,true);
  LheidoUtils.Send.receiveNewMessage(context);
}",0.9649484536082474
143823,"@Override public void customDelivered(long id){
  Toast.makeText(context,""String_Node_Str"",Toast.LENGTH_SHORT).show();
  if (userPref.getBoolean(""String_Node_Str"",true)) {
    long[] pattern={0,100,100,100,100,100,100,100};
    v.vibrate(pattern,-1);
  }
}","@Override public void customDelivered(long id){
  Toast.makeText(context,""String_Node_Str"",Toast.LENGTH_SHORT).show();
  if (userPref.getBoolean(""String_Node_Str"",true)) {
    try {
      long[] pattern={0,100,100,100,100,100,100,100};
      v.vibrate(pattern,-1);
    }
 catch (    Exception e) {
      Toast.makeText(context,e.getMessage(),Toast.LENGTH_LONG).show();
    }
  }
}",0.7955974842767296
143824,"@Override protected void onDestroy(){
  super.onDestroy();
}","@Override protected void onDestroy(){
  LheidoUtils.Send.cancelVibrator(this);
  super.onDestroy();
}",0.7453416149068323
143825,"public void playNotificationSound(){
  AudioManager am=(AudioManager)context.getSystemService(Context.AUDIO_SERVICE);
switch (am.getRingerMode()) {
case AudioManager.RINGER_MODE_SILENT:
    break;
case AudioManager.RINGER_MODE_VIBRATE:
  break;
case AudioManager.RINGER_MODE_NORMAL:
SharedPreferences userPref=PreferenceManager.getDefaultSharedPreferences(context);
if (userPref.getBoolean(LheidoUtils.receiver_ringtone_key,true)) {
try {
  Uri notification=RingtoneManager.getDefaultUri(RingtoneManager.TYPE_NOTIFICATION);
  Ringtone r=RingtoneManager.getRingtone(context,notification);
  r.play();
}
 catch (Exception e) {
  e.printStackTrace();
}
}
break;
}
}","public void playNotificationSound(){
  AudioManager am=(AudioManager)context.getSystemService(Context.AUDIO_SERVICE);
  SharedPreferences userPref=PreferenceManager.getDefaultSharedPreferences(context);
switch (am.getRingerMode()) {
case AudioManager.RINGER_MODE_SILENT:
    break;
case AudioManager.RINGER_MODE_VIBRATE:
  try {
    if (vibrate)     v.vibrate(1000);
  }
 catch (  Exception e) {
    Toast.makeText(context,e.getMessage(),Toast.LENGTH_LONG).show();
  }
break;
case AudioManager.RINGER_MODE_NORMAL:
if (userPref.getBoolean(LheidoUtils.receiver_ringtone_key,true)) {
try {
  Uri notification=RingtoneManager.getDefaultUri(RingtoneManager.TYPE_NOTIFICATION);
  Ringtone r=RingtoneManager.getRingtone(context,notification);
  r.play();
}
 catch (Exception e) {
  Toast.makeText(context,e.getMessage(),Toast.LENGTH_LONG).show();
}
}
break;
}
}",0.7427440633245382
143826,"@Override public void onReceive(Context c,Intent intent){
  context=c;
  userPref=PreferenceManager.getDefaultSharedPreferences(context);
  activ_notif=userPref.getBoolean(LheidoUtils.receiver_notification_key,true);
  vibrate=userPref.getBoolean(LheidoUtils.vibration_key,true);
  v=(Vibrator)context.getSystemService(Context.VIBRATOR_SERVICE);
  String iAction=intent.getAction();
  if (iAction.equals(LheidoUtils.ACTION_RECEIVE_SMS)) {
    Bundle bundle=intent.getExtras();
    if (bundle != null) {
      Object[] pdus=(Object[])bundle.get(""String_Node_Str"");
      final SmsMessage[] messages=new SmsMessage[pdus.length];
      for (int i=0; i < pdus.length; i++) {
        messages[i]=SmsMessage.createFromPdu((byte[])pdus[i]);
      }
      if (messages.length > -1) {
        body=""String_Node_Str"";
        for (        SmsMessage x : messages) {
          body+=x.getMessageBody();
        }
        date=messages[0].getTimestampMillis();
        phone=messages[0].getDisplayOriginatingAddress();
        new_name=LheidoContact.getContactName(context,phone);
        Log.v(""String_Node_Str"",""String_Node_Str"" + phone);
        if (!notificationsId.containsKey(phone))         notificationsId.put(phone,notificationsId.size());
        Log.v(""String_Node_Str"",notificationsId.toString());
        customReceivedSMS();
      }
    }
  }
 else   if (iAction.equals(LheidoUtils.ACTION_DELIVERED_SMS)) {
switch (getResultCode()) {
case Activity.RESULT_OK:
      long _id=intent.getExtras().getLong(LheidoUtils.ARG_SMS_DELIVERED,-1);
    if (_id != -1) {
      ContentValues values=new ContentValues();
      values.put(""String_Node_Str"",0);
      try {
        context.getContentResolver().update(Uri.parse(""String_Node_Str"" + _id),values,null,null);
        customDelivered(_id);
      }
 catch (      Exception ex) {
        Toast.makeText(context,ex.toString(),Toast.LENGTH_LONG).show();
      }
    }
  break;
default :
Toast.makeText(context,""String_Node_Str"",Toast.LENGTH_SHORT).show();
if (vibrate) v.vibrate(2000);
break;
}
}
 else if (iAction.equals(LheidoUtils.ACTION_SENT_SMS)) {
switch (getResultCode()) {
case Activity.RESULT_OK:
break;
default :
Toast.makeText(context,""String_Node_Str"",Toast.LENGTH_SHORT).show();
if (vibrate) v.vibrate(2000);
break;
}
}
 else if (iAction.equals(LheidoUtils.ACTION_NEW_MESSAGE_READ)) {
int position=intent.getIntExtra(""String_Node_Str"",0);
String phone=intent.getStringExtra(""String_Node_Str"");
customNewMessageRead(position,phone);
}
 else if (iAction.equals(LheidoUtils.ACTION_RECEIVE_MMS)) {
customReceivedMMS();
}
}","@Override public void onReceive(Context c,Intent intent){
  context=c;
  userPref=PreferenceManager.getDefaultSharedPreferences(context);
  activ_notif=userPref.getBoolean(LheidoUtils.receiver_notification_key,true);
  vibrate=userPref.getBoolean(LheidoUtils.vibration_key,true);
  v=(Vibrator)context.getSystemService(Context.VIBRATOR_SERVICE);
  String iAction=intent.getAction();
  if (iAction.equals(LheidoUtils.ACTION_CANCEL_VIBRATOR)) {
    v.cancel();
  }
 else   if (iAction.equals(LheidoUtils.ACTION_RECEIVE_SMS)) {
    Bundle bundle=intent.getExtras();
    if (bundle != null) {
      Object[] pdus=(Object[])bundle.get(""String_Node_Str"");
      final SmsMessage[] messages=new SmsMessage[pdus.length];
      for (int i=0; i < pdus.length; i++) {
        messages[i]=SmsMessage.createFromPdu((byte[])pdus[i]);
      }
      if (messages.length > -1) {
        body=""String_Node_Str"";
        for (        SmsMessage x : messages) {
          body+=x.getMessageBody();
        }
        date=messages[0].getTimestampMillis();
        phone=messages[0].getDisplayOriginatingAddress();
        new_name=LheidoContact.getContactName(context,phone);
        Log.v(""String_Node_Str"",""String_Node_Str"" + phone);
        if (!notificationsId.containsKey(phone))         notificationsId.put(phone,notificationsId.size());
        Log.v(""String_Node_Str"",notificationsId.toString());
        customReceivedSMS();
      }
    }
  }
 else   if (iAction.equals(LheidoUtils.ACTION_DELIVERED_SMS)) {
switch (getResultCode()) {
case Activity.RESULT_OK:
      long _id=intent.getExtras().getLong(LheidoUtils.ARG_SMS_DELIVERED,-1);
    if (_id != -1) {
      ContentValues values=new ContentValues();
      values.put(""String_Node_Str"",0);
      try {
        context.getContentResolver().update(Uri.parse(""String_Node_Str"" + _id),values,null,null);
        customDelivered(_id);
      }
 catch (      Exception ex) {
        Toast.makeText(context,ex.toString(),Toast.LENGTH_LONG).show();
      }
    }
  break;
default :
Toast.makeText(context,""String_Node_Str"",Toast.LENGTH_SHORT).show();
try {
if (vibrate) v.vibrate(2000);
}
 catch (Exception e) {
Toast.makeText(context,e.getMessage(),Toast.LENGTH_LONG).show();
}
break;
}
}
 else if (iAction.equals(LheidoUtils.ACTION_SENT_SMS)) {
switch (getResultCode()) {
case Activity.RESULT_OK:
break;
default :
Toast.makeText(context,""String_Node_Str"",Toast.LENGTH_SHORT).show();
try {
if (vibrate) v.vibrate(2000);
}
 catch (Exception e) {
Toast.makeText(context,e.getMessage(),Toast.LENGTH_LONG).show();
}
break;
}
}
 else if (iAction.equals(LheidoUtils.ACTION_NEW_MESSAGE_READ)) {
int position=intent.getIntExtra(""String_Node_Str"",0);
String phone=intent.getStringExtra(""String_Node_Str"");
customNewMessageRead(position,phone);
}
 else if (iAction.equals(LheidoUtils.ACTION_RECEIVE_MMS)) {
customReceivedMMS();
}
}",0.9480471628592484
143827,"@Override protected void onCreate(Bundle savedInstanceState){
  super.onCreate(savedInstanceState);
  setContentView(R.layout.main_activity);
  Toolbar actionBar=(Toolbar)findViewById(R.id.action_bar);
  setSupportActionBar(actionBar);
  syncLogFragment=(SyncLogFragment)getSupportFragmentManager().findFragmentById(R.id.sync_log);
  drawerLayout=(DrawerLayout)findViewById(R.id.drawer_layout);
  drawerToggle=new ActionBarDrawerToggle(this,drawerLayout,actionBar,0,0){
    @Override public void onDrawerOpened(    View drawerView){
      super.onDrawerOpened(drawerView);
      getSupportActionBar().setTitle(R.string.app_name);
      invalidateOptionsMenu();
    }
    @Override public void onDrawerClosed(    View drawerView){
      super.onDrawerClosed(drawerView);
      getSupportActionBar().setTitle(title);
      invalidateOptionsMenu();
    }
    @Override public void onDrawerSlide(    View drawerView,    float slideOffset){
      super.onDrawerSlide(drawerView,slideOffset);
      syncLogFragment.setScaleFactor(1 - slideOffset);
    }
  }
;
  drawerLayout.setDrawerListener(drawerToggle);
  drawerListAdapter=new FeedListAdapter();
  drawerListView=(ListView)drawerLayout.findViewById(R.id.drawer);
  drawerListView.setAdapter(drawerListAdapter);
  drawerListView.setOnItemClickListener(this);
  getLoaderManager().initLoader(LOADER_FEEDS,null,this);
  getSupportActionBar().setDisplayHomeAsUpEnabled(true);
  getSupportActionBar().setHomeButtonEnabled(true);
  title=getTitle();
  selectDrawerItem(0,-1);
}","@Override protected void onCreate(Bundle savedInstanceState){
  super.onCreate(savedInstanceState);
  setContentView(R.layout.main_activity);
  Toolbar actionBar=(Toolbar)findViewById(R.id.action_bar);
  setSupportActionBar(actionBar);
  syncLogFragment=(SyncLogFragment)getFragmentManager().findFragmentById(R.id.sync_log);
  drawerLayout=(DrawerLayout)findViewById(R.id.drawer_layout);
  drawerToggle=new ActionBarDrawerToggle(this,drawerLayout,actionBar,0,0){
    @Override public void onDrawerOpened(    View drawerView){
      super.onDrawerOpened(drawerView);
      getSupportActionBar().setTitle(R.string.app_name);
      invalidateOptionsMenu();
    }
    @Override public void onDrawerClosed(    View drawerView){
      super.onDrawerClosed(drawerView);
      getSupportActionBar().setTitle(title);
      invalidateOptionsMenu();
    }
    @Override public void onDrawerSlide(    View drawerView,    float slideOffset){
      super.onDrawerSlide(drawerView,slideOffset);
      syncLogFragment.setScaleFactor(1 - slideOffset);
    }
  }
;
  drawerLayout.setDrawerListener(drawerToggle);
  drawerListAdapter=new FeedListAdapter();
  drawerListView=(ListView)drawerLayout.findViewById(R.id.drawer);
  drawerListView.setAdapter(drawerListAdapter);
  drawerListView.setOnItemClickListener(this);
  getLoaderManager().initLoader(LOADER_FEEDS,null,this);
  getSupportActionBar().setDisplayHomeAsUpEnabled(true);
  getSupportActionBar().setHomeButtonEnabled(true);
  title=getTitle();
  if (savedInstanceState == null) {
    selectDrawerItem(0,-1);
  }
}",0.9840650406504065
143828,"private void selectDrawerItem(int position,long feedId){
  Fragment fragment=new EntryListFragment();
  Bundle args=new Bundle();
  args.putParcelable(EntryListFragment.ARG_ENTRIES_URI,Uris.newFeedEntriesUri(feedId));
  fragment.setArguments(args);
  getFragmentManager().beginTransaction().replace(R.id.content,fragment).commit();
  if (drawerListAdapter.getCursor() != null) {
    drawerListView.setItemChecked(position,true);
  }
  drawerLayout.closeDrawer(drawerListView);
  syncLogFragment.setSyncLogUri(Uris.newFeedSyncLogUri(feedId));
}","private void selectDrawerItem(int position,long feedId){
  EntryListFragment entryListFragment=new EntryListFragment();
  Bundle entryListFragmentArgs=new Bundle();
  entryListFragmentArgs.putParcelable(EntryListFragment.ARG_ENTRIES_URI,Uris.newFeedEntriesUri(feedId));
  entryListFragment.setArguments(entryListFragmentArgs);
  syncLogFragment=new SyncLogFragment();
  Bundle syncLogFragmentArgs=new Bundle();
  syncLogFragmentArgs.putParcelable(SyncLogFragment.ARG_SYNC_LOG_URI,Uris.newFeedSyncLogUri(feedId));
  syncLogFragment.setArguments(syncLogFragmentArgs);
  getFragmentManager().beginTransaction().replace(R.id.content,entryListFragment).replace(R.id.sync_log,syncLogFragment).commit();
  if (drawerListAdapter.getCursor() != null) {
    drawerListView.setItemChecked(position,true);
  }
  drawerLayout.closeDrawer(drawerListView);
}",0.6392496392496393
143829,"@Override public Loader<Cursor> onCreateLoader(int loader,Bundle args){
  return new CursorLoader(context,syncLogUri,SYNC_LOG_PROJECTION,null,null,null);
}","@Override public Loader<Cursor> onCreateLoader(int loader,Bundle args){
  Uri syncLogUri=getArguments().getParcelable(ARG_SYNC_LOG_URI);
  return new CursorLoader(context,syncLogUri,SYNC_LOG_PROJECTION,null,null,null);
}",0.6506666666666666
143830,"@Override protected void onSizeChanged(int w,int h,int oldw,int oldh){
  if (w > 0) {
    setSyncLogUri(syncLogUri);
  }
}","@Override protected void onSizeChanged(int w,int h,int oldw,int oldh){
  if (w > 0) {
    Bundle args=new Bundle();
    args.putLong(SYNC_LOG_LOADER_FIRST_POLL,System.currentTimeMillis() - w * STEP_TIME / syncLogView.step);
    getLoaderManager().restartLoader(SYNC_LOG_LOADER,args,SyncLogFragment.this);
  }
}",0.5
143831,"/** 
 * Registers a target database on which a task (e.g. update) can be executed.
 * @param database The configuration of the database
 */
public void addDatabase(Database database){
  DbMaintainDatabase dbMaintainDatabase=new DbMaintainDatabase();
  dbMaintainDatabase.setName(database.getName());
  dbMaintainDatabase.setIncluded(database.isIncluded());
  dbMaintainDatabase.setDialect(database.getDialect());
  dbMaintainDatabase.setDriverClassName(database.getDriverClassName());
  dbMaintainDatabase.setUrl(database.getUrl());
  dbMaintainDatabase.setUserName(database.getUserName());
  dbMaintainDatabase.setPassword(database.getPassword());
  dbMaintainDatabase.setSchemaNames(database.getSchemaNames());
  databases.add(dbMaintainDatabase);
}","/** 
 * Registers a target database on which a task (e.g. update) can be executed.
 * @param database The configuration of the database
 */
public void addDatabase(Database database){
  databases.add(database);
}",0.3966770508826583
143832,"@Override protected DbMaintainTask createDbMaintainTask(){
  return new CheckScriptUpdatesTask(databases,scriptLocations,scriptEncoding,postProcessingScriptDirectoryName,fromScratchEnabled,autoCreateDbMaintainScriptsTable,allowOutOfSequenceExecutionOfPatches,qualifiers,patchQualifiers,includedQualifiers,excludedQualifiers,scriptFileExtensions,useLastModificationDates);
}","@Override protected DbMaintainTask createDbMaintainTask(){
  return new CheckScriptUpdatesTask(getDbMaintainDatabases(),scriptLocations,scriptEncoding,postProcessingScriptDirectoryName,fromScratchEnabled,autoCreateDbMaintainScriptsTable,allowOutOfSequenceExecutionOfPatches,qualifiers,patchQualifiers,includedQualifiers,excludedQualifiers,scriptFileExtensions,useLastModificationDates);
}",0.9566360052562418
143833,"@Override protected DbMaintainTask createDbMaintainTask(){
  return new CleanDatabaseTask(databases);
}","@Override protected DbMaintainTask createDbMaintainTask(){
  return new CleanDatabaseTask(getDbMaintainDatabases());
}",0.9230769230769232
143834,"@Override protected DbMaintainTask createDbMaintainTask(){
  return new ClearDatabaseTask(databases);
}","@Override protected DbMaintainTask createDbMaintainTask(){
  return new ClearDatabaseTask(getDbMaintainDatabases());
}",0.9230769230769232
143835,"@Override protected DbMaintainTask createDbMaintainTask(){
  return new DisableConstraintsTask(databases);
}","@Override protected DbMaintainTask createDbMaintainTask(){
  return new DisableConstraintsTask(getDbMaintainDatabases());
}",0.9264069264069263
143836,"@Override protected DbMaintainTask createDbMaintainTask(){
  return new MarkDatabaseAsUpToDateTask(databases,scriptLocations,autoCreateDbMaintainScriptsTable,qualifiers,includedQualifiers,excludedQualifiers,scriptFileExtensions);
}","@Override protected DbMaintainTask createDbMaintainTask(){
  return new MarkDatabaseAsUpToDateTask(getDbMaintainDatabases(),scriptLocations,autoCreateDbMaintainScriptsTable,qualifiers,includedQualifiers,excludedQualifiers,scriptFileExtensions);
}",0.9308176100628932
143837,"@Override protected DbMaintainTask createDbMaintainTask(){
  return new MarkErrorScriptPerformedTask(databases);
}","@Override protected DbMaintainTask createDbMaintainTask(){
  return new MarkErrorScriptPerformedTask(getDbMaintainDatabases());
}",0.9300411522633744
143838,"@Override protected DbMaintainTask createDbMaintainTask(){
  return new MarkErrorScriptRevertedTask(databases);
}","@Override protected DbMaintainTask createDbMaintainTask(){
  return new MarkErrorScriptRevertedTask(getDbMaintainDatabases());
}",0.9294605809128632
143839,"@Override protected DbMaintainTask createDbMaintainTask(){
  return new UpdateDatabaseTask(databases,scriptLocations,scriptEncoding,postProcessingScriptDirectoryName,fromScratchEnabled,autoCreateDbMaintainScriptsTable,allowOutOfSequenceExecutionOfPatches,qualifiers,patchQualifiers,includedQualifiers,excludedQualifiers,cleanDb,disableConstraints,updateSequences,useLastModificationDates,scriptFileExtensions,scriptParameterFile);
}","@Override protected DbMaintainTask createDbMaintainTask(){
  return new UpdateDatabaseTask(getDbMaintainDatabases(),scriptLocations,scriptEncoding,postProcessingScriptDirectoryName,fromScratchEnabled,autoCreateDbMaintainScriptsTable,allowOutOfSequenceExecutionOfPatches,qualifiers,patchQualifiers,includedQualifiers,excludedQualifiers,cleanDb,disableConstraints,updateSequences,useLastModificationDates,scriptFileExtensions,scriptParameterFile);
}",0.962457337883959
143840,"@Override protected DbMaintainTask createDbMaintainTask(){
  return new UpdateSequencesTask(databases,lowestAcceptableSequenceValue);
}","@Override protected DbMaintainTask createDbMaintainTask(){
  return new UpdateSequencesTask(getDbMaintainDatabases(),lowestAcceptableSequenceValue);
}",0.9403508771929824
143841,"/** 
 * Verifies that, if the dbmaintain_scripts table doesn't exist yet, and the autoCreateExecutedScriptsInfoTable property is set to true, we start with a from scratch update
 */
@Test public void noInitialFromScratchUpdateIfFromScratchDisabled(){
  disableFromScratch();
  createTable(BEFORE_INITIAL_TABLE);
  createScripts(INCREMENTAL_1);
  updateDatabase();
  assertTableExists(BEFORE_INITIAL_TABLE);
}","/** 
 * Verifies that, if the dbmaintain_scripts table doesn't exist yet, and the autoCreateExecutedScriptsInfoTable property is set to true, we don't start with a from scratch update
 */
@Test public void noInitialFromScratchUpdateIfFromScratchDisabled(){
  disableFromScratch();
  createTable(BEFORE_INITIAL_TABLE);
  createScripts(INCREMENTAL_1);
  updateDatabase();
  assertTableExists(BEFORE_INITIAL_TABLE);
}",0.9927007299270072
143842,"/** 
 * Test for adding a hotfix script that has an index smaller than an existing index. Out of sequence is not allowed so the update should have failed.
 */
@Test(expected=DbMaintainException.class) public void addPatchScript_outOfSequenceNotAllowed(){
  createScripts(INCREMENTAL_2);
  updateDatabase();
  createPatchScript(INCREMENTAL_1);
  updateDatabase();
}","/** 
 * Test for adding a patch script that has an index smaller than an existing index. Out of sequence is not allowed so the update should have failed.
 */
@Test(expected=DbMaintainException.class) public void addPatchScript_outOfSequenceNotAllowed(){
  createScripts(INCREMENTAL_2);
  updateDatabase();
  createPatchScript(INCREMENTAL_1);
  updateDatabase();
}",0.984869325997249
143843,"private void updateDatabase(){
  MainFactory mainFactory=new MainFactory(configuration);
  DbMaintainer dbMaintainer=mainFactory.createDbMaintainer();
  dbMaintainer.updateDatabase(false);
}","private boolean updateDatabase(){
  MainFactory mainFactory=new MainFactory(configuration);
  DbMaintainer dbMaintainer=mainFactory.createDbMaintainer();
  return dbMaintainer.updateDatabase(false);
}",0.953846153846154
143844,"/** 
 * Test for adding a hotfix script that has an index smaller than an existing index. Out of sequence is allowed, the hotfix script should have been executed (with a warning)
 */
@Test public void addPatchScript_outOfSequenceAllowed(){
  allowOutOfSequenceExecutionOfPatches();
  createScripts(INCREMENTAL_2);
  updateDatabase();
  createPatchScript(INCREMENTAL_1);
  updateDatabase();
}","/** 
 * Test for adding a patch script that has an index smaller than an existing index. Out of sequence is allowed, the patch script should have been executed (with a warning)
 */
@Test public void addPatchScript_outOfSequenceAllowed(){
  allowOutOfSequenceExecutionOfPatches();
  createScripts(INCREMENTAL_2);
  updateDatabase();
  createPatchScript(INCREMENTAL_1);
  updateDatabase();
}",0.9717948717948718
143845,"@Test public void updateIncremental_fromScratchEnabled(){
  enableFromScratch();
  createScripts(INCREMENTAL_1,INCREMENTAL_2);
  updateDatabase();
  updateScript(INCREMENTAL_1);
  updateDatabase();
  assertScriptsNotExecuted(INCREMENTAL_1);
  assertUpdatedScriptsExecuted(INCREMENTAL_1);
}","@Test public void updateIncremental_fromScratchEnabled(){
  enableFromScratch();
  createScripts(INCREMENTAL_1,INCREMENTAL_2);
  updateDatabase();
  updateScript(INCREMENTAL_1);
  updateDatabase();
  assertScriptsNotExecuted(INCREMENTAL_1);
  assertUpdatedScriptsExecuted(INCREMENTAL_1);
  boolean updatePerformed=updateDatabase();
  assertFalse(updatePerformed);
}",0.8837920489296636
143846,"/** 
 * This operation can be used to bring the database to the latest version. First it checks which scripts were already applied to the database and executes the new scripts or the updated repeatable scripts. If an existing incremental script was changed,  removed, or if a new incremental script has been added with a lower index than one that was already executed, an error is given; unless the <fromScratch> option is enabled: in that case all database objects at the end.
 * @param dryRun if true, no updates have to be performed on the database - we do a simulation of the database updateinstead of actually performing the database update.
 * @return whether updates were performed on the database
 */
public boolean updateDatabase(boolean dryRun){
  try {
    ScriptUpdates scriptUpdates=getScriptUpdates();
    if (!getIncrementalScriptsThatFailedDuringLastUpdate().isEmpty() && !scriptUpdates.hasIrregularScriptUpdates()) {
      throw new DbMaintainException(""String_Node_Str"" + getIncrementalScriptsThatFailedDuringLastUpdate().first() + ""String_Node_Str""+ ""String_Node_Str""+ getErrorScriptOptionsMessage());
    }
    if (!getRepeatableScriptsThatFailedDuringLastUpdate().isEmpty() && !scriptUpdates.hasIrregularScriptUpdates()) {
      ExecutedScript failedScript=getRepeatableScriptsThatFailedDuringLastUpdate().first();
      if (!scriptUpdates.getRegularlyAddedOrModifiedScripts().contains(new ScriptUpdate(REPEATABLE_SCRIPT_UPDATED,failedScript.getScript())) && !scriptUpdates.getRegularlyDeletedRepeatableScripts().contains(new ScriptUpdate(REPEATABLE_SCRIPT_DELETED,failedScript.getScript()))) {
        throw new DbMaintainException(""String_Node_Str"" + getRepeatableScriptsThatFailedDuringLastUpdate().first() + ""String_Node_Str""+ ""String_Node_Str"");
      }
    }
    if (scriptUpdates.isEmpty()) {
      logger.info(""String_Node_Str"");
      return false;
    }
    boolean recreateFromScratch=false;
    if (fromScratchEnabled && isInitialDatabaseUpdate()) {
      logger.info(""String_Node_Str"");
      recreateFromScratch=true;
    }
    if (scriptUpdates.hasIrregularScriptUpdates()) {
      if (fromScratchEnabled) {
        logger.info(""String_Node_Str"" + scriptUpdatesFormatter.formatScriptUpdates(scriptUpdates.getIrregularScriptUpdates()));
        recreateFromScratch=true;
      }
 else {
        throw new DbMaintainException(""String_Node_Str"" + scriptUpdatesFormatter.formatScriptUpdates(scriptUpdates.getIrregularScriptUpdates()) + ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str"");
      }
    }
    if (recreateFromScratch) {
      if (baseLineRevision != null) {
        throw new DbMaintainException(""String_Node_Str"" + ""String_Node_Str"" + ""String_Node_Str""+ ""String_Node_Str"");
      }
      logger.info(""String_Node_Str"");
      if (!dryRun) {
        dbClearer.clearDatabase();
        executeScripts(scriptRepository.getAllUpdateScripts());
      }
    }
 else {
      logger.info(""String_Node_Str"" + scriptUpdatesFormatter.formatScriptUpdates(scriptUpdates.getRegularScriptUpdates()));
      if (!dryRun) {
        if (disableConstraints) {
          constraintsDisabler.disableConstraints();
        }
        if (cleanDb) {
          dbCleaner.cleanDatabase();
        }
        executeScriptUpdates(scriptUpdates.getRegularlyAddedPatchScripts());
        executeScriptUpdates(scriptUpdates.getRegularlyAddedOrModifiedScripts());
        removeDeletedRepeatableScriptsFromExecutedScripts(scriptUpdates.getRegularlyDeletedRepeatableScripts());
        performRegularScriptRenamesInExecutedScripts(scriptUpdates.getRegularlyRenamedScripts());
      }
    }
    if (scriptUpdates.noUpdatesOtherThanRepeatableScriptDeletionsOrRenames()) {
      logger.info(""String_Node_Str"");
      return false;
    }
    if (!dryRun) {
      executePostprocessingScripts();
      if (disableConstraints) {
        constraintsDisabler.disableConstraints();
      }
      if (cleanDb) {
        dbCleaner.cleanDatabase();
      }
      if (updateSequences) {
        sequenceUpdater.updateSequences();
      }
      logger.info(""String_Node_Str"");
    }
    return true;
  }
  finally {
    sqlHandler.closeAllConnections();
  }
}","/** 
 * This operation can be used to bring the database to the latest version. First it checks which scripts were already applied to the database and executes the new scripts or the updated repeatable scripts. If an existing incremental script was changed,  removed, or if a new incremental script has been added with a lower index than one that was already executed, an error is given; unless the <fromScratch> option is enabled: in that case all database objects at the end.
 * @param dryRun if true, no updates have to be performed on the database - we do a simulation of the database updateinstead of actually performing the database update.
 * @return whether updates were performed on the database
 */
public boolean updateDatabase(boolean dryRun){
  try {
    ScriptUpdates scriptUpdates=getScriptUpdates();
    if (!getIncrementalScriptsThatFailedDuringLastUpdate().isEmpty() && !scriptUpdates.hasIrregularScriptUpdates()) {
      throw new DbMaintainException(""String_Node_Str"" + getIncrementalScriptsThatFailedDuringLastUpdate().first() + ""String_Node_Str""+ ""String_Node_Str""+ getErrorScriptOptionsMessage());
    }
    if (!getRepeatableScriptsThatFailedDuringLastUpdate().isEmpty() && !scriptUpdates.hasIrregularScriptUpdates()) {
      ExecutedScript failedScript=getRepeatableScriptsThatFailedDuringLastUpdate().first();
      if (!scriptUpdates.getRegularlyAddedOrModifiedScripts().contains(new ScriptUpdate(REPEATABLE_SCRIPT_UPDATED,failedScript.getScript())) && !scriptUpdates.getRegularlyDeletedRepeatableScripts().contains(new ScriptUpdate(REPEATABLE_SCRIPT_DELETED,failedScript.getScript()))) {
        throw new DbMaintainException(""String_Node_Str"" + getRepeatableScriptsThatFailedDuringLastUpdate().first() + ""String_Node_Str""+ ""String_Node_Str"");
      }
    }
    if (scriptUpdates.isEmpty()) {
      logger.info(""String_Node_Str"");
      return false;
    }
    boolean recreateFromScratch=false;
    if (fromScratchEnabled && isInitialDatabaseUpdate()) {
      logger.info(""String_Node_Str"");
      recreateFromScratch=true;
    }
    if (scriptUpdates.hasIrregularScriptUpdates()) {
      if (fromScratchEnabled) {
        logger.info(""String_Node_Str"" + scriptUpdatesFormatter.formatScriptUpdates(scriptUpdates.getIrregularScriptUpdates()));
        recreateFromScratch=true;
      }
 else {
        throw new DbMaintainException(""String_Node_Str"" + scriptUpdatesFormatter.formatScriptUpdates(scriptUpdates.getIrregularScriptUpdates()) + ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str"");
      }
    }
    if (recreateFromScratch) {
      if (baseLineRevision != null) {
        throw new DbMaintainException(""String_Node_Str"" + ""String_Node_Str"" + ""String_Node_Str""+ ""String_Node_Str"");
      }
      logger.info(""String_Node_Str"");
      if (!dryRun) {
        dbClearer.clearDatabase();
        executedScriptInfoSource.clearAllExecutedScripts();
        executeScripts(scriptRepository.getAllUpdateScripts());
      }
    }
 else {
      logger.info(""String_Node_Str"" + scriptUpdatesFormatter.formatScriptUpdates(scriptUpdates.getRegularScriptUpdates()));
      if (!dryRun) {
        if (disableConstraints) {
          constraintsDisabler.disableConstraints();
        }
        if (cleanDb) {
          dbCleaner.cleanDatabase();
        }
        executeScriptUpdates(scriptUpdates.getRegularlyAddedPatchScripts());
        executeScriptUpdates(scriptUpdates.getRegularlyAddedOrModifiedScripts());
        removeDeletedRepeatableScriptsFromExecutedScripts(scriptUpdates.getRegularlyDeletedRepeatableScripts());
        performRegularScriptRenamesInExecutedScripts(scriptUpdates.getRegularlyRenamedScripts());
      }
    }
    if (scriptUpdates.noUpdatesOtherThanRepeatableScriptDeletionsOrRenames()) {
      logger.info(""String_Node_Str"");
      return false;
    }
    if (!dryRun) {
      executePostprocessingScripts();
      if (disableConstraints) {
        constraintsDisabler.disableConstraints();
      }
      if (cleanDb) {
        dbCleaner.cleanDatabase();
      }
      if (updateSequences) {
        sequenceUpdater.updateSequences();
      }
      logger.info(""String_Node_Str"");
    }
    return true;
  }
  finally {
    sqlHandler.closeAllConnections();
  }
}",0.9928791834797056
143847,"public DBClearer createInstance(){
  Set<DbItemIdentifier> itemsToPreserve=getItemsToPreserve();
  MainFactory mainFactory=factoryWithDatabaseContext.getMainFactory();
  ConstraintsDisabler constraintsDisabler=mainFactory.createConstraintsDisabler();
  ExecutedScriptInfoSource executedScriptInfoSource=mainFactory.createExecutedScriptInfoSource();
  return new DefaultDBClearer(getDatabases(),itemsToPreserve,constraintsDisabler,executedScriptInfoSource);
}","public DBClearer createInstance(){
  Set<DbItemIdentifier> itemsToPreserve=getItemsToPreserve();
  MainFactory mainFactory=factoryWithDatabaseContext.getMainFactory();
  ConstraintsDisabler constraintsDisabler=mainFactory.createConstraintsDisabler();
  return new DefaultDBClearer(getDatabases(),itemsToPreserve,constraintsDisabler);
}",0.6557377049180327
143848,"/** 
 * @param databases                The db support instances, not null
 * @param itemsToPreserve          The schema's, tables, triggers etc that should not be dropped, not null
 * @param constraintsDisabler      Disables of constraints before clearing the database, not null
 */
public DefaultDBClearer(Databases databases,Set<DbItemIdentifier> itemsToPreserve,ConstraintsDisabler constraintsDisabler,ExecutedScriptInfoSource executedScriptInfoSource){
  this.databases=databases;
  this.itemsToPreserve=itemsToPreserve;
  this.constraintsDisabler=constraintsDisabler;
  this.executedScriptInfoSource=executedScriptInfoSource;
  assertItemsToPreserveExist(itemsToPreserve);
}","/** 
 * @param databases                The db support instances, not null
 * @param itemsToPreserve          The schema's, tables, triggers etc that should not be dropped, not null
 * @param constraintsDisabler      Disables of constraints before clearing the database, not null
 */
public DefaultDBClearer(Databases databases,Set<DbItemIdentifier> itemsToPreserve,ConstraintsDisabler constraintsDisabler){
  this.databases=databases;
  this.itemsToPreserve=itemsToPreserve;
  this.constraintsDisabler=constraintsDisabler;
  assertItemsToPreserveExist(itemsToPreserve);
}",0.6869009584664537
143849,"/** 
 * When we throw an exception on the first pass then it is ignored and we try another pass (which succeeds).
 */
@Test public void testClearDatabase_IgnoreFirstErrorOnDropTable() throws Exception {
  database.onceRaises(new RuntimeException(""String_Node_Str"")).dropTable(SCHEMA,""String_Node_Str"");
  defaultDBClearer.clearDatabase();
}","/** 
 * When we throw an exception on the first pass then it is ignored and we try another pass (which succeeds).
 */
@Test public void testClearDatabase_IgnoreFirstErrorOnDropTable() throws Exception {
  database.onceRaises(RuntimeException.class).dropTable(SCHEMA,""String_Node_Str"");
  defaultDBClearer.clearDatabase();
}",0.9562594268476622
143850,"/** 
 * Configures the tested object.
 */
@Before public void setUp() throws Exception {
  Databases databases=new Databases(asList(database.getMock()),new ArrayList<String>());
  defaultDBClearer=new DefaultDBClearer(databases,new HashSet<DbItemIdentifier>(),constraintsDisabler.getMock(),executedScriptInfoSource.getMock());
  database.returns(tableNames).getTableNames(SCHEMA);
  database.returns(asSet(SCHEMA)).getSchemaNames();
}","/** 
 * Configures the tested object.
 */
@Before public void setUp() throws Exception {
  Databases databases=new Databases(asList(database.getMock()),new ArrayList<String>());
  defaultDBClearer=new DefaultDBClearer(databases,new HashSet<DbItemIdentifier>(),constraintsDisabler.getMock());
  database.returns(tableNames).getTableNames(SCHEMA);
  database.returns(asSet(SCHEMA)).getSchemaNames();
}",0.957983193277311
143851,"/** 
 * Configures the tested object. Creates a test table, index, view and sequence
 */
@Before public void setUp() throws Exception {
  databases=getDatabases(""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"");
  defaultDatabase=databases.getDefaultDatabase();
  dataSource=defaultDatabase.getDataSource();
  cleanupTestDatabase();
  createTestDatabase();
  Set<DbItemIdentifier> itemsToPreserve=new HashSet<DbItemIdentifier>();
  itemsToPreserve.add(parseSchemaIdentifier(""String_Node_Str"",databases));
  itemsToPreserve.add(parseItemIdentifier(TABLE,""String_Node_Str"",databases));
  itemsToPreserve.add(parseItemIdentifier(TABLE,defaultDatabase.quoted(""String_Node_Str"") + ""String_Node_Str"" + defaultDatabase.quoted(""String_Node_Str""),databases));
  itemsToPreserve.add(parseItemIdentifier(VIEW,""String_Node_Str"",databases));
  itemsToPreserve.add(parseItemIdentifier(VIEW,""String_Node_Str"" + defaultDatabase.quoted(""String_Node_Str""),databases));
  itemsToPreserve.add(parseItemIdentifier(SEQUENCE,""String_Node_Str"",databases));
  itemsToPreserve.add(parseItemIdentifier(SEQUENCE,defaultDatabase.quoted(""String_Node_Str"") + ""String_Node_Str"",databases));
  ConstraintsDisabler constraintsDisabler=new DefaultConstraintsDisabler(databases);
  ExecutedScriptInfoSource executedScriptInfoSource=getDefaultExecutedScriptInfoSource(defaultDatabase,true);
  defaultDBClearer=new DefaultDBClearer(databases,itemsToPreserve,constraintsDisabler,executedScriptInfoSource);
}","/** 
 * Configures the tested object. Creates a test table, index, view and sequence
 */
@Before public void setUp() throws Exception {
  databases=getDatabases(""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"");
  defaultDatabase=databases.getDefaultDatabase();
  dataSource=defaultDatabase.getDataSource();
  cleanupTestDatabase();
  createTestDatabase();
  Set<DbItemIdentifier> itemsToPreserve=asSet(parseSchemaIdentifier(""String_Node_Str"",databases),parseItemIdentifier(TABLE,""String_Node_Str"",databases),parseItemIdentifier(TABLE,defaultDatabase.quoted(""String_Node_Str"") + ""String_Node_Str"" + defaultDatabase.quoted(""String_Node_Str""),databases),parseItemIdentifier(VIEW,""String_Node_Str"",databases),parseItemIdentifier(VIEW,""String_Node_Str"" + defaultDatabase.quoted(""String_Node_Str""),databases),parseItemIdentifier(SEQUENCE,""String_Node_Str"",databases),parseItemIdentifier(SEQUENCE,defaultDatabase.quoted(""String_Node_Str"") + ""String_Node_Str"",databases));
  ConstraintsDisabler constraintsDisabler=new DefaultConstraintsDisabler(databases);
  defaultDBClearer=new DefaultDBClearer(databases,itemsToPreserve,constraintsDisabler);
}",0.8681235870384325
143852,"@Before public void setUp() throws Exception {
  databases=getDatabases(""String_Node_Str"",""String_Node_Str"",""String_Node_Str"");
  defaultDatabase=databases.getDefaultDatabase();
  dataSource=defaultDatabase.getDataSource();
  ConstraintsDisabler constraintsDisabler=new DefaultConstraintsDisabler(databases);
  ExecutedScriptInfoSource executedScriptInfoSource=getDefaultExecutedScriptInfoSource(defaultDatabase,true);
  defaultDBClearer=new DefaultDBClearer(databases,new HashSet<DbItemIdentifier>(),constraintsDisabler,executedScriptInfoSource);
  dropTestDatabase();
  createTestDatabase();
}","@Before public void setUp() throws Exception {
  databases=getDatabases(""String_Node_Str"",""String_Node_Str"",""String_Node_Str"");
  defaultDatabase=databases.getDefaultDatabase();
  dataSource=defaultDatabase.getDataSource();
  ConstraintsDisabler constraintsDisabler=new DefaultConstraintsDisabler(databases);
  defaultDBClearer=new DefaultDBClearer(databases,new HashSet<DbItemIdentifier>(),constraintsDisabler);
  dropTestDatabase();
  createTestDatabase();
}",0.8720379146919431
143853,"/** 
 * Disables not-null constraints on the given table. <p/> For primary keys, row-guid, identity and computed columns not-null constrains cannot be disabled in MS-Sql.
 * @param schemaName the schema name, not null
 * @param tableName  The table, not null
 */
protected void disableNotNullConstraints(String schemaName,String tableName){
  SQLHandler sqlHandler=getSQLHandler();
  Set<String> primaryKeyColumnNames=sqlHandler.getItemsAsStringSet(""String_Node_Str"" + ""String_Node_Str"" + ""String_Node_Str""+ ""String_Node_Str"" + tableName + ""String_Node_Str""+ schemaName+ ""String_Node_Str"",getDataSource());
  Connection connection=null;
  Statement statement=null;
  ResultSet resultSet=null;
  try {
    connection=getDataSource().getConnection();
    statement=connection.createStatement();
    resultSet=statement.executeQuery(""String_Node_Str"" + ""String_Node_Str"" + ""String_Node_Str"" + tableName + ""String_Node_Str""+ schemaName+ ""String_Node_Str"");
    while (resultSet.next()) {
      String columnName=resultSet.getString(""String_Node_Str"");
      if (primaryKeyColumnNames.contains(columnName)) {
        continue;
      }
      String dataType=resultSet.getString(""String_Node_Str"");
      if (""String_Node_Str"".equals(dataType)) {
        continue;
      }
      if (""String_Node_Str"".equals(dataType) || ""String_Node_Str"".equals(dataType)) {
        String precision=resultSet.getString(""String_Node_Str"");
        String scale=resultSet.getString(""String_Node_Str"");
        dataType+=""String_Node_Str"" + precision + ""String_Node_Str""+ scale+ ""String_Node_Str"";
      }
 else       if (dataType.contains(""String_Node_Str"")) {
        String maxLength=resultSet.getString(""String_Node_Str"");
        if (dataType.equals(""String_Node_Str"") || dataType.equals(""String_Node_Str"")) {
          maxLength=String.valueOf(Integer.parseInt(maxLength) / 2);
        }
        dataType+=""String_Node_Str"" + maxLength + ""String_Node_Str"";
      }
      sqlHandler.execute(""String_Node_Str"" + qualified(schemaName,tableName) + ""String_Node_Str""+ quoted(columnName)+ ""String_Node_Str""+ dataType+ ""String_Node_Str"",getDataSource());
    }
  }
 catch (  Exception e) {
    throw new DatabaseException(""String_Node_Str"" + schemaName + ""String_Node_Str""+ tableName,e);
  }
 finally {
    closeQuietly(connection,statement,resultSet);
  }
}","/** 
 * Disables not-null constraints on the given table. <p/> For primary keys, row-guid, identity and computed columns not-null constrains cannot be disabled in MS-Sql.
 * @param schemaName the schema name, not null
 * @param tableName  The table, not null
 */
protected void disableNotNullConstraints(String schemaName,String tableName){
  SQLHandler sqlHandler=getSQLHandler();
  Set<String> primaryKeyColumnNames=sqlHandler.getItemsAsStringSet(""String_Node_Str"" + ""String_Node_Str"" + ""String_Node_Str""+ ""String_Node_Str"" + tableName + ""String_Node_Str""+ schemaName+ ""String_Node_Str"",getDataSource());
  Connection connection=null;
  Statement statement=null;
  ResultSet resultSet=null;
  try {
    connection=getDataSource().getConnection();
    statement=connection.createStatement();
    resultSet=statement.executeQuery(""String_Node_Str"" + ""String_Node_Str"" + ""String_Node_Str"" + tableName + ""String_Node_Str""+ schemaName+ ""String_Node_Str"");
    while (resultSet.next()) {
      String columnName=resultSet.getString(""String_Node_Str"");
      if (primaryKeyColumnNames.contains(columnName)) {
        continue;
      }
      String dataType=resultSet.getString(""String_Node_Str"");
      if (""String_Node_Str"".equals(dataType)) {
        continue;
      }
      if (""String_Node_Str"".equals(dataType) || ""String_Node_Str"".equals(dataType)) {
        String precision=resultSet.getString(""String_Node_Str"");
        String scale=resultSet.getString(""String_Node_Str"");
        dataType+=""String_Node_Str"" + precision + ""String_Node_Str""+ scale+ ""String_Node_Str"";
      }
 else       if (dataType.contains(""String_Node_Str"")) {
        String maxLength=resultSet.getString(""String_Node_Str"");
        if (dataType.equals(""String_Node_Str"") || dataType.equals(""String_Node_Str"")) {
          maxLength=String.valueOf(Integer.parseInt(maxLength) / 2);
        }
        dataType+=""String_Node_Str"" + (""String_Node_Str"".equals(maxLength) ? ""String_Node_Str"" : String.valueOf(maxLength)) + ""String_Node_Str"";
      }
      sqlHandler.execute(""String_Node_Str"" + qualified(schemaName,tableName) + ""String_Node_Str""+ quoted(columnName)+ ""String_Node_Str""+ dataType+ ""String_Node_Str"",getDataSource());
    }
  }
 catch (  Exception e) {
    throw new DatabaseException(""String_Node_Str"" + schemaName + ""String_Node_Str""+ tableName,e);
  }
 finally {
    closeQuietly(connection,statement,resultSet);
  }
}",0.9839662447257383
143854,"/** 
 * @return a set with the available DbSupport instances, one for each configured database
 */
protected Set<DbSupport> getDbSupports(){
  Set<DbSupport> result=new HashSet<DbSupport>();
  for (  DbSupport dbSupport : nameDbSupportMap.values()) {
    if (dbSupport != null) {
      result.add(dbSupport);
    }
  }
  return result;
}","/** 
 * @return a set with the available DbSupport instances, one for each configured database
 */
protected Set<DbSupport> getDbSupports(){
  Set<DbSupport> result=new HashSet<DbSupport>();
  for (  DbSupport dbSupport : getNameDbSupportMap().values()) {
    if (dbSupport != null) {
      result.add(dbSupport);
    }
  }
  return result;
}",0.9896907216494846
143855,"protected ScriptRunner createSqlPlusScriptRunner(Class<ScriptRunner> clazz){
  String sqlPlusCommand=PropertyUtils.getString(PROPERTY_SQL_PLUS_COMMAND,configuration);
  return createInstanceOfType(clazz,false,new Class<?>[]{DbSupport.class,Map.class,String.class},new Object[]{defaultDbSupport,nameDbSupportMap,sqlPlusCommand});
}","protected ScriptRunner createSqlPlusScriptRunner(Class<ScriptRunner> clazz){
  String sqlPlusCommand=PropertyUtils.getString(PROPERTY_SQL_PLUS_COMMAND,configuration);
  return createInstanceOfType(clazz,false,new Class<?>[]{DbSupport.class,Map.class,String.class},new Object[]{getDefaultDbSupport(),getNameDbSupportMap(),sqlPlusCommand});
}",0.9761194029850746
143856,"public DBClearer createDbClearer(){
  Class<DefaultDBClearer> clazz=getConfiguredClass(DefaultDBClearer.class,configuration);
  DefaultDBClearer dbClearer=createInstanceOfType(clazz,false,new Class<?>[]{Map.class},new Object[]{getNameDbSupportMap()});
  Set<DbItemIdentifier> schemasToPreserve=getSchemasToPreserve(PROPERTY_PRESERVE_SCHEMAS);
  for (  DbItemIdentifier schemaToPreserve : schemasToPreserve) {
    dbClearer.addItemToPreserve(schemaToPreserve,true);
  }
  String executedScriptsTableName=getString(PROPERTY_EXECUTED_SCRIPTS_TABLE_NAME,configuration);
  dbClearer.addItemToPreserve(DbItemIdentifier.parseItemIdentifier(TABLE,executedScriptsTableName,defaultDbSupport,nameDbSupportMap),false);
  addItemsToPreserve(dbClearer,TABLE,PROPERTY_PRESERVE_TABLES);
  addItemsToPreserve(dbClearer,VIEW,PROPERTY_PRESERVE_VIEWS);
  addItemsToPreserve(dbClearer,MATERIALZED_VIEW,PROPERTY_PRESERVE_MATERIALIZED_VIEWS);
  addItemsToPreserve(dbClearer,SYNONYM,PROPERTY_PRESERVE_SYNONYMS);
  addItemsToPreserve(dbClearer,SEQUENCE,PROPERTY_PRESERVE_SEQUENCES);
  addItemsToPreserve(dbClearer,TRIGGER,PROPERTY_PRESERVE_TRIGGERS);
  addItemsToPreserve(dbClearer,TYPE,PROPERTY_PRESERVE_TYPES);
  return dbClearer;
}","public DBClearer createDbClearer(){
  Class<DefaultDBClearer> clazz=getConfiguredClass(DefaultDBClearer.class,configuration);
  DefaultDBClearer dbClearer=createInstanceOfType(clazz,false,new Class<?>[]{Map.class},new Object[]{getNameDbSupportMap()});
  Set<DbItemIdentifier> schemasToPreserve=getSchemasToPreserve(PROPERTY_PRESERVE_SCHEMAS);
  for (  DbItemIdentifier schemaToPreserve : schemasToPreserve) {
    dbClearer.addItemToPreserve(schemaToPreserve,true);
  }
  String executedScriptsTableName=getString(PROPERTY_EXECUTED_SCRIPTS_TABLE_NAME,configuration);
  dbClearer.addItemToPreserve(DbItemIdentifier.parseItemIdentifier(TABLE,executedScriptsTableName,getDefaultDbSupport(),getNameDbSupportMap()),false);
  addItemsToPreserve(dbClearer,TABLE,PROPERTY_PRESERVE_TABLES);
  addItemsToPreserve(dbClearer,VIEW,PROPERTY_PRESERVE_VIEWS);
  addItemsToPreserve(dbClearer,MATERIALZED_VIEW,PROPERTY_PRESERVE_MATERIALIZED_VIEWS);
  addItemsToPreserve(dbClearer,SYNONYM,PROPERTY_PRESERVE_SYNONYMS);
  addItemsToPreserve(dbClearer,SEQUENCE,PROPERTY_PRESERVE_SEQUENCES);
  addItemsToPreserve(dbClearer,TRIGGER,PROPERTY_PRESERVE_TRIGGERS);
  addItemsToPreserve(dbClearer,TYPE,PROPERTY_PRESERVE_TYPES);
  return dbClearer;
}",0.9810543657331136
143857,"protected void appendToCurrentLine(Character currentChar){
  if (currentChar != null)   currentLine.append(currentChar);
}","protected void appendToCurrentLine(Character currentChar){
  if (currentChar == null) {
  }
 else   if (CARRIAGE_RETURN.equals(currentChar))   currentLine.append(NEWLINE);
 else   if (CARRIAGE_RETURN.equals(previousChar) && NEWLINE.equals(currentChar)) {
  }
 else   currentLine.append(currentChar);
}",0.3877068557919622
143858,"protected void appendToStatementWithoutCommentsAndWhitespace(Character currentChar,HandleNextCharacterResult handleNextCharacterResult){
  if (handleNextCharacterResult.isExecutable()) {
    statementWithoutCommentsAndWhitespace.append(currentChar);
  }
 else {
    if (isWhitespace(currentChar) && statementWithoutCommentsAndWhitespace.length() > 0 && getLastCharacter(statementWithoutCommentsAndWhitespace) != ' ') {
      statementWithoutCommentsAndWhitespace.append(' ');
    }
  }
}","protected void appendToStatementWithoutCommentsAndWhitespace(Character currentChar,HandleNextCharacterResult handleNextCharacterResult){
  if (handleNextCharacterResult.isExecutable()) {
    statementInUppercaseWithoutCommentsAndWhitespace.append(Character.toUpperCase(currentChar));
  }
 else {
    if (isWhitespace(currentChar) && statementInUppercaseWithoutCommentsAndWhitespace.length() > 0 && getLastCharacter(statementInUppercaseWithoutCommentsAndWhitespace) != ' ') {
      statementInUppercaseWithoutCommentsAndWhitespace.append(' ');
    }
  }
}",0.914505283381364
143859,"protected HandleNextCharacterResult moveToStoredProcedureStateResult(Character currentChar,StatementBuilder statementBuilder){
  if (isWhitespace(currentChar) && storedProcedureMatcher.isStartOfStoredProcedure(statementBuilder.getStatementWithoutCommentsOrWhitespace())) {
    return toInStoredProcedureStateResult;
  }
  return null;
}","protected HandleNextCharacterResult moveToStoredProcedureStateResult(Character currentChar,StatementBuilder statementBuilder){
  if (isWhitespace(currentChar) && storedProcedureMatcher.isStartOfStoredProcedure(statementBuilder.getStatementInUppercaseWithoutCommentsOrWhitespace())) {
    return toInStoredProcedureStateResult;
  }
  return null;
}",0.9838945827232796
143860,"public static boolean isNewLineCharacter(Character currentChar){
  return CARRIAGE_RETURN.equals(currentChar) || LINE_FEED.equals(currentChar);
}","public static boolean isNewLineCharacter(Character currentChar){
  return CARRIAGE_RETURN.equals(currentChar) || NEW_LINE.equals(currentChar);
}",0.9688581314878892
143861,"public static QualifierEvaluator getTrivialQualifierEvaluator(){
  return new QualifierEvaluator(){
    @Override public boolean evaluate(    Set<Qualifier> qualifiers){
      return true;
    }
  }
;
}","public static QualifierEvaluator getTrivialQualifierEvaluator(){
  return new QualifierEvaluator(){
    public boolean evaluate(    Set<Qualifier> qualifiers){
      return true;
    }
  }
;
}",0.9746192893401016
143862,"@Override public boolean evaluate(Set<Qualifier> qualifiers){
  return true;
}","public boolean evaluate(Set<Qualifier> qualifiers){
  return true;
}",0.9315068493150684
143863,"public ConstraintsDisabler createConstraintsDisabler(){
  return new DefaultConstraintsDisabler(nameDbSupportMap.values());
}","public ConstraintsDisabler createConstraintsDisabler(){
  return new DefaultConstraintsDisabler(getDbSupports());
}",0.9416666666666668
143864,"public DbMaintainer createDbMaintainer(){
  ScriptRunner scriptRunner=createScriptRunner();
  ScriptSource scriptSource=createScriptSource();
  ExecutedScriptInfoSource executedScriptInfoSource=createExecutedScriptInfoSource();
  boolean cleanDbEnabled=PropertyUtils.getBoolean(PROPERTY_CLEANDB_ENABLED,configuration);
  boolean fromScratchEnabled=PropertyUtils.getBoolean(PROPERTY_FROM_SCRATCH_ENABLED,configuration);
  boolean keepRetryingAfterError=PropertyUtils.getBoolean(PROPKEY_KEEP_RETRYING_AFTER_ERROR_ENABLED,configuration);
  boolean updateSequencesEnabled=PropertyUtils.getBoolean(PROPERTY_UPDATE_SEQUENCES_ENABLED,configuration);
  DBCleaner dbCleaner=createDbCleaner();
  DBClearer dbClearer=createDbClearer();
  ConstraintsDisabler constraintsDisabler=createConstraintsDisabler();
  SequenceUpdater sequenceUpdater=createSequenceUpdater();
  Class<DbMaintainer> clazz=ConfigUtils.getConfiguredClass(DbMaintainer.class,configuration);
  return createInstanceOfType(clazz,false,new Class<?>[]{ScriptRunner.class,ScriptSource.class,ExecutedScriptInfoSource.class,boolean.class,boolean.class,boolean.class,boolean.class,boolean.class,DBClearer.class,DBCleaner.class,ConstraintsDisabler.class,SequenceUpdater.class},new Object[]{scriptRunner,scriptSource,executedScriptInfoSource,fromScratchEnabled,keepRetryingAfterError,cleanDbEnabled,disableConstraintsEnabled,updateSequencesEnabled,dbClearer,dbCleaner,constraintsDisabler,sequenceUpdater});
}","public DbMaintainer createDbMaintainer(){
  ScriptRunner scriptRunner=createScriptRunner();
  ScriptSource scriptSource=createScriptSource();
  ExecutedScriptInfoSource executedScriptInfoSource=createExecutedScriptInfoSource();
  boolean cleanDbEnabled=PropertyUtils.getBoolean(PROPERTY_CLEANDB_ENABLED,configuration);
  boolean fromScratchEnabled=PropertyUtils.getBoolean(PROPERTY_FROM_SCRATCH_ENABLED,configuration);
  boolean keepRetryingAfterError=PropertyUtils.getBoolean(PROPERTY_KEEP_RETRYING_AFTER_ERROR_ENABLED,configuration);
  boolean disableConstraintsEnabled=PropertyUtils.getBoolean(PROPERTY_DISABLE_CONSTRAINTS_ENABLED,configuration);
  boolean updateSequencesEnabled=PropertyUtils.getBoolean(PROPERTY_UPDATE_SEQUENCES_ENABLED,configuration);
  DBCleaner dbCleaner=createDbCleaner();
  DBClearer dbClearer=createDbClearer();
  ConstraintsDisabler constraintsDisabler=createConstraintsDisabler();
  SequenceUpdater sequenceUpdater=createSequenceUpdater();
  Class<DbMaintainer> clazz=ConfigUtils.getConfiguredClass(DbMaintainer.class,configuration);
  return createInstanceOfType(clazz,false,new Class<?>[]{ScriptRunner.class,ScriptSource.class,ExecutedScriptInfoSource.class,boolean.class,boolean.class,boolean.class,boolean.class,boolean.class,DBClearer.class,DBCleaner.class,ConstraintsDisabler.class,SequenceUpdater.class},new Object[]{scriptRunner,scriptSource,executedScriptInfoSource,fromScratchEnabled,keepRetryingAfterError,cleanDbEnabled,disableConstraintsEnabled,updateSequencesEnabled,dbClearer,dbCleaner,constraintsDisabler,sequenceUpdater});
}",0.9606871489924016
143865,"public DbMaintainer createDbMaintainer(){
  ScriptRunner scriptRunner=createScriptRunner();
  ScriptSource scriptSource=createScriptSource();
  ExecutedScriptInfoSource executedScriptInfoSource=createExecutedScriptInfoSource();
  boolean cleanDbEnabled=PropertyUtils.getBoolean(PROPKEY_CLEANDB_ENABLED,configuration);
  boolean fromScratchEnabled=PropertyUtils.getBoolean(PROPKEY_FROM_SCRATCH_ENABLED,configuration);
  boolean disableConstraintsEnabled=PropertyUtils.getBoolean(PROPKEY_DISABLE_CONSTRAINTS_ENABLED,configuration);
  boolean updateSequencesEnabled=PropertyUtils.getBoolean(PROPKEY_UPDATE_SEQUENCES_ENABLED,configuration);
  DBCleaner dbCleaner=createDbCleaner();
  DBClearer dbClearer=createDbClearer();
  ConstraintsDisabler constraintsDisabler=createConstraintsDisabler();
  SequenceUpdater sequenceUpdater=createSequenceUpdater();
  Class<DbMaintainer> clazz=ConfigUtils.getConfiguredClass(DbMaintainer.class,configuration);
  return createInstanceOfType(clazz,false,new Class<?>[]{ScriptRunner.class,ScriptSource.class,ExecutedScriptInfoSource.class,boolean.class,boolean.class,boolean.class,boolean.class,DBClearer.class,DBCleaner.class,ConstraintsDisabler.class,SequenceUpdater.class},new Object[]{scriptRunner,scriptSource,executedScriptInfoSource,fromScratchEnabled,cleanDbEnabled,disableConstraintsEnabled,updateSequencesEnabled,dbClearer,dbCleaner,constraintsDisabler,sequenceUpdater});
}","public DbMaintainer createDbMaintainer(){
  ScriptRunner scriptRunner=createScriptRunner();
  ScriptSource scriptSource=createScriptSource();
  ExecutedScriptInfoSource executedScriptInfoSource=createExecutedScriptInfoSource();
  boolean cleanDbEnabled=PropertyUtils.getBoolean(PROPKEY_CLEANDB_ENABLED,configuration);
  boolean fromScratchEnabled=PropertyUtils.getBoolean(PROPKEY_FROM_SCRATCH_ENABLED,configuration);
  boolean keepRetryingAfterError=PropertyUtils.getBoolean(PROPKEY_KEEP_RETRYING_AFTER_ERROR_ENABLED,configuration);
  boolean disableConstraintsEnabled=PropertyUtils.getBoolean(PROPKEY_DISABLE_CONSTRAINTS_ENABLED,configuration);
  boolean updateSequencesEnabled=PropertyUtils.getBoolean(PROPKEY_UPDATE_SEQUENCES_ENABLED,configuration);
  DBCleaner dbCleaner=createDbCleaner();
  DBClearer dbClearer=createDbClearer();
  ConstraintsDisabler constraintsDisabler=createConstraintsDisabler();
  SequenceUpdater sequenceUpdater=createSequenceUpdater();
  Class<DbMaintainer> clazz=ConfigUtils.getConfiguredClass(DbMaintainer.class,configuration);
  return createInstanceOfType(clazz,false,new Class<?>[]{ScriptRunner.class,ScriptSource.class,ExecutedScriptInfoSource.class,boolean.class,boolean.class,boolean.class,boolean.class,boolean.class,DBClearer.class,DBCleaner.class,ConstraintsDisabler.class,SequenceUpdater.class},new Object[]{scriptRunner,scriptSource,executedScriptInfoSource,fromScratchEnabled,keepRetryingAfterError,cleanDbEnabled,disableConstraintsEnabled,updateSequencesEnabled,dbClearer,dbCleaner,constraintsDisabler,sequenceUpdater});
}",0.9486404833836858
143866,"/** 
 * This operation can be used to bring the database to the latest version. First it checks which scripts were already applied to the database and executes the new scripts or the updated repeatable scripts. If an existing incremental script was changed,  removed, or if a new incremental script has been added with a lower index than one that was already executed, an error is given; unless the <fromScratch> option is enabled: in that case all database objects at the end.
 */
public void updateDatabase(){
  ScriptUpdates scriptUpdates=new ScriptUpdatesAnalyzer(scriptRepository,executedScriptInfoSource,useScriptFileLastModificationDates,allowOutOfSequenceExecutionOfPatchScripts).calculateScriptUpdates();
  if (!getIndexedScriptsThatFailedDuringLastUpdate().isEmpty()) {
    if (!scriptUpdates.hasIrregularScriptUpdates()) {
      throw new DbMaintainException(""String_Node_Str"" + getIndexedScriptsThatFailedDuringLastUpdate().first() + ""String_Node_Str""+ ""String_Node_Str"");
    }
  }
  if (scriptUpdates.isEmpty()) {
    logger.info(""String_Node_Str"");
    return;
  }
  boolean recreateFromScratch=false;
  if (fromScratchEnabled && !hasItemsToPreserve && isInitialDatabaseUpdate()) {
    logger.info(""String_Node_Str"");
    recreateFromScratch=true;
  }
  if (scriptUpdates.hasIrregularScriptUpdates()) {
    if (fromScratchEnabled) {
      logger.info(""String_Node_Str"" + formatIrregularUpdates(scriptUpdates));
      recreateFromScratch=true;
    }
 else {
      throw new DbMaintainException(""String_Node_Str"" + ""String_Node_Str"" + ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str"" + formatIrregularUpdates(scriptUpdates) + ""String_Node_Str"");
    }
  }
  if (recreateFromScratch) {
    clearDatabase();
    executeScripts(scriptRepository.getAllUpdateScripts());
  }
 else {
    logger.info(""String_Node_Str"" + formatRegularUpdates(scriptUpdates));
    if (cleanDbEnabled) {
      dbCleaner.cleanDatabase();
    }
    executeScriptUpdates(scriptUpdates.getRegularPatchScriptUpdates());
    executeScriptUpdates(scriptUpdates.getRegularScriptUpdates());
  }
  executeScripts(scriptRepository.getPostProcessingScripts());
  if (disableConstraintsEnabled) {
    constraintsDisabler.disableConstraints();
  }
  if (updateSequencesEnabled) {
    sequenceUpdater.updateSequences();
  }
}","/** 
 * This operation can be used to bring the database to the latest version. First it checks which scripts were already applied to the database and executes the new scripts or the updated repeatable scripts. If an existing incremental script was changed,  removed, or if a new incremental script has been added with a lower index than one that was already executed, an error is given; unless the <fromScratch> option is enabled: in that case all database objects at the end.
 */
public void updateDatabase(){
  ScriptUpdates scriptUpdates=new ScriptUpdatesAnalyzer(scriptRepository,executedScriptInfoSource,useScriptFileLastModificationDates,allowOutOfSequenceExecutionOfPatchScripts).calculateScriptUpdates();
  if (!getIndexedScriptsThatFailedDuringLastUpdate().isEmpty()) {
    if (!scriptUpdates.hasIrregularScriptUpdates()) {
      throw new DbMaintainException(""String_Node_Str"" + getIndexedScriptsThatFailedDuringLastUpdate().first() + ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str"");
    }
  }
  if (!getRepeatableScriptsThatFailedDuringLastUpdate().isEmpty() && !scriptUpdates.hasIrregularScriptUpdates()) {
    for (    ExecutedScript failedScript : getRepeatableScriptsThatFailedDuringLastUpdate()) {
      if (!scriptUpdates.getRegularScriptUpdates(REPEATABLE_SCRIPT_UPDATED).contains(new ScriptUpdate(REPEATABLE_SCRIPT_UPDATED,failedScript.getScript())) && !scriptUpdates.getRepeatableScriptDeletions().contains(new ScriptUpdate(REPEATABLE_SCRIPT_DELETED,failedScript.getScript()))) {
        throw new DbMaintainException(""String_Node_Str"" + getRepeatableScriptsThatFailedDuringLastUpdate().first() + ""String_Node_Str""+ ""String_Node_Str"");
      }
    }
  }
  if (scriptUpdates.isEmpty()) {
    logger.info(""String_Node_Str"");
    return;
  }
  boolean recreateFromScratch=false;
  if (fromScratchEnabled && !hasItemsToPreserve && isInitialDatabaseUpdate()) {
    logger.info(""String_Node_Str"");
    recreateFromScratch=true;
  }
  if (scriptUpdates.hasIrregularScriptUpdates()) {
    if (fromScratchEnabled) {
      logger.info(""String_Node_Str"" + formatIrregularUpdates(scriptUpdates));
      recreateFromScratch=true;
    }
 else {
      throw new DbMaintainException(""String_Node_Str"" + ""String_Node_Str"" + ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str"" + formatIrregularUpdates(scriptUpdates) + ""String_Node_Str"");
    }
  }
  if (recreateFromScratch) {
    clearDatabase();
    executeScripts(scriptRepository.getAllUpdateScripts());
  }
 else {
    logger.info(""String_Node_Str"" + formatRegularUpdates(scriptUpdates));
    if (cleanDbEnabled) {
      dbCleaner.cleanDatabase();
    }
    executeScriptUpdates(scriptUpdates.getRegularPatchScriptUpdates());
    executeScriptUpdates(scriptUpdates.getRegularScriptUpdates());
  }
  executeScripts(scriptRepository.getPostProcessingScripts());
  if (disableConstraintsEnabled) {
    constraintsDisabler.disableConstraints();
  }
  if (updateSequencesEnabled) {
    sequenceUpdater.updateSequences();
  }
}",0.7053048895601284
143867,"protected ScriptUpdates(Map<ScriptUpdateType,SortedSet<ScriptUpdate>> regularScriptUpdates,Map<ScriptUpdateType,SortedSet<ScriptUpdate>> irregularScriptUpdates,Map<ScriptUpdateType,SortedSet<ScriptUpdate>> patchScriptUpdates,Map<ScriptUpdateType,SortedSet<ScriptUpdate>> postprocessingScriptUpdates){
  this.regularScriptUpdates=regularScriptUpdates;
  this.irregularScriptUpdates=irregularScriptUpdates;
  this.patchScriptUpdates=patchScriptUpdates;
  this.postprocessingScriptUpdates=postprocessingScriptUpdates;
}","protected ScriptUpdates(Map<ScriptUpdateType,SortedSet<ScriptUpdate>> regularScriptUpdates,Map<ScriptUpdateType,SortedSet<ScriptUpdate>> irregularScriptUpdates,Map<ScriptUpdateType,SortedSet<ScriptUpdate>> repeatableScriptDeletions,Map<ScriptUpdateType,SortedSet<ScriptUpdate>> regularPatchScriptUpdates,Map<ScriptUpdateType,SortedSet<ScriptUpdate>> postprocessingScriptUpdates){
  this.regularScriptUpdates=regularScriptUpdates;
  this.irregularScriptUpdates=irregularScriptUpdates;
  this.repeatableScriptDeletions=repeatableScriptDeletions;
  this.regularPatchScriptUpdates=regularPatchScriptUpdates;
  this.postprocessingScriptUpdates=postprocessingScriptUpdates;
}",0.8388185654008439
143868,"public SortedSet<ScriptUpdate> getRegularPatchScriptUpdates(){
  SortedSet<ScriptUpdate> result=new TreeSet<ScriptUpdate>();
  for (  ScriptUpdateType patchScriptUpdateType : ScriptUpdateType.getPatchScriptUpdateTypes()) {
    result.addAll(patchScriptUpdates.get(patchScriptUpdateType));
  }
  return result;
}","public SortedSet<ScriptUpdate> getRegularPatchScriptUpdates(){
  SortedSet<ScriptUpdate> result=new TreeSet<ScriptUpdate>();
  for (  ScriptUpdateType patchScriptUpdateType : ScriptUpdateType.getPatchScriptUpdateTypes()) {
    result.addAll(regularPatchScriptUpdates.get(patchScriptUpdateType));
  }
  return result;
}",0.985691573926868
143869,"public ScriptUpdates calculateScriptUpdates(){
  regularScriptUpdates=initScriptUpdateMap(ScriptUpdateType.getRegularScriptUpdateTypes());
  irregularScriptUpdates=initScriptUpdateMap(ScriptUpdateType.getIrregularScriptUpdateTypes());
  patchScriptUpdates=initScriptUpdateMap(ScriptUpdateType.getPatchScriptUpdateTypes());
  postprocessingScriptUpdates=initScriptUpdateMap(ScriptUpdateType.getPostprocessingScriptUpdateTypes());
  Map<Script,ExecutedScript> alreadyExecutedScripts=getAlreadyExecutedScripts(executedScriptInfoSource);
  SortedSet<Script> allScripts=scriptRepository.getAllScripts();
  for (  Script alreadyExecutedScript : alreadyExecutedScripts.keySet()) {
    if (!allScripts.contains(alreadyExecutedScript)) {
      if (alreadyExecutedScript.isIncremental()) {
        addIrregularScriptUpdate(INDEXED_SCRIPT_DELETED,alreadyExecutedScript);
      }
 else       if (alreadyExecutedScript.isRepeatable()) {
        logger.warn(""String_Node_Str"");
      }
 else       if (alreadyExecutedScript.isPostProcessingScript()) {
        addPostprocessingScriptUpdate(POSTPROCESSING_SCRIPT_DELETED,alreadyExecutedScript);
      }
    }
  }
  Script scriptWithHighestScriptIndex=getExecutedScriptWithHighestScriptIndex(executedScriptInfoSource.getExecutedScripts());
  for (  Script indexedScript : scriptRepository.getIndexedScripts()) {
    if (!alreadyExecutedScripts.containsKey(indexedScript)) {
      if (scriptWithHighestScriptIndex == null || indexedScript.compareTo(scriptWithHighestScriptIndex) > 0) {
        addRegularScriptUpdate(HIGHER_INDEX_SCRIPT_ADDED,indexedScript);
      }
 else {
        if (indexedScript.isPatchScript()) {
          if (allowOutOfSequenceExecutionOfPatchScripts) {
            addPatchScriptUpdate(LOWER_INDEX_PATCH_SCRIPT_ADDED,indexedScript);
          }
 else {
            addIrregularScriptUpdate(LOWER_INDEX_PATCH_SCRIPT_ADDED,indexedScript);
          }
        }
 else {
          addIrregularScriptUpdate(LOWER_INDEX_NON_PATCH_SCRIPT_ADDED,indexedScript);
        }
      }
    }
 else {
      if (!alreadyExecutedScripts.get(indexedScript).getScript().isScriptContentEqualTo(indexedScript,useScriptFileLastModificationDates)) {
        addIrregularScriptUpdate(INDEXED_SCRIPT_UPDATED,indexedScript);
      }
    }
  }
  for (  Script repeatableScript : scriptRepository.getRepeatableScripts()) {
    if (!alreadyExecutedScripts.containsKey(repeatableScript)) {
      addRegularScriptUpdate(REPEATABLE_SCRIPT_ADDED,repeatableScript);
    }
 else {
      if (!alreadyExecutedScripts.get(repeatableScript).getScript().isScriptContentEqualTo(repeatableScript,useScriptFileLastModificationDates)) {
        addRegularScriptUpdate(REPEATABLE_SCRIPT_UPDATED,repeatableScript);
      }
    }
  }
  for (  Script postprocessingScript : scriptRepository.getPostProcessingScripts()) {
    if (!alreadyExecutedScripts.containsKey(postprocessingScript)) {
      addPostprocessingScriptUpdate(POSTPROCESSING_SCRIPT_ADDED,postprocessingScript);
    }
 else {
      if (!alreadyExecutedScripts.get(postprocessingScript).getScript().isScriptContentEqualTo(postprocessingScript,useScriptFileLastModificationDates)) {
        addPostprocessingScriptUpdate(POSTPROCESSING_SCRIPT_UPDATED,postprocessingScript);
      }
    }
  }
  return new ScriptUpdates(regularScriptUpdates,irregularScriptUpdates,patchScriptUpdates,postprocessingScriptUpdates);
}","public ScriptUpdates calculateScriptUpdates(){
  regularScriptUpdates=initScriptUpdateMap(ScriptUpdateType.getRegularScriptUpdateTypes());
  irregularScriptUpdates=initScriptUpdateMap(ScriptUpdateType.getIrregularScriptUpdateTypes());
  repeatableScriptDeletions=initScriptUpdateMap(ScriptUpdateType.getRepeatableScriptDeletionTypes());
  patchScriptUpdates=initScriptUpdateMap(ScriptUpdateType.getPatchScriptUpdateTypes());
  postprocessingScriptUpdates=initScriptUpdateMap(ScriptUpdateType.getPostprocessingScriptUpdateTypes());
  Map<Script,ExecutedScript> alreadyExecutedScripts=getAlreadyExecutedScripts(executedScriptInfoSource);
  SortedSet<Script> allScripts=scriptRepository.getAllScripts();
  for (  Script alreadyExecutedScript : alreadyExecutedScripts.keySet()) {
    if (!allScripts.contains(alreadyExecutedScript)) {
      if (alreadyExecutedScript.isIncremental()) {
        addIrregularScriptUpdate(INDEXED_SCRIPT_DELETED,alreadyExecutedScript);
      }
 else       if (alreadyExecutedScript.isRepeatable()) {
        addRepeatableScriptDeletion(alreadyExecutedScript);
      }
 else       if (alreadyExecutedScript.isPostProcessingScript()) {
        addPostprocessingScriptUpdate(POSTPROCESSING_SCRIPT_DELETED,alreadyExecutedScript);
      }
    }
  }
  Script scriptWithHighestScriptIndex=getExecutedScriptWithHighestScriptIndex(executedScriptInfoSource.getExecutedScripts());
  for (  Script indexedScript : scriptRepository.getIndexedScripts()) {
    if (!alreadyExecutedScripts.containsKey(indexedScript)) {
      if (scriptWithHighestScriptIndex == null || indexedScript.compareTo(scriptWithHighestScriptIndex) > 0) {
        addRegularScriptUpdate(HIGHER_INDEX_SCRIPT_ADDED,indexedScript);
      }
 else {
        if (indexedScript.isPatchScript()) {
          if (allowOutOfSequenceExecutionOfPatchScripts) {
            addPatchScriptUpdate(LOWER_INDEX_PATCH_SCRIPT_ADDED,indexedScript);
          }
 else {
            addIrregularScriptUpdate(LOWER_INDEX_PATCH_SCRIPT_ADDED,indexedScript);
          }
        }
 else {
          addIrregularScriptUpdate(LOWER_INDEX_NON_PATCH_SCRIPT_ADDED,indexedScript);
        }
      }
    }
 else {
      if (!alreadyExecutedScripts.get(indexedScript).getScript().isScriptContentEqualTo(indexedScript,useScriptFileLastModificationDates)) {
        addIrregularScriptUpdate(INDEXED_SCRIPT_UPDATED,indexedScript);
      }
    }
  }
  for (  Script repeatableScript : scriptRepository.getRepeatableScripts()) {
    if (!alreadyExecutedScripts.containsKey(repeatableScript)) {
      addRegularScriptUpdate(REPEATABLE_SCRIPT_ADDED,repeatableScript);
    }
 else {
      if (!alreadyExecutedScripts.get(repeatableScript).getScript().isScriptContentEqualTo(repeatableScript,useScriptFileLastModificationDates)) {
        addRegularScriptUpdate(REPEATABLE_SCRIPT_UPDATED,repeatableScript);
      }
    }
  }
  for (  Script postprocessingScript : scriptRepository.getPostProcessingScripts()) {
    if (!alreadyExecutedScripts.containsKey(postprocessingScript)) {
      addPostprocessingScriptUpdate(POSTPROCESSING_SCRIPT_ADDED,postprocessingScript);
    }
 else {
      if (!alreadyExecutedScripts.get(postprocessingScript).getScript().isScriptContentEqualTo(postprocessingScript,useScriptFileLastModificationDates)) {
        addPostprocessingScriptUpdate(POSTPROCESSING_SCRIPT_UPDATED,postprocessingScript);
      }
    }
  }
  return new ScriptUpdates(regularScriptUpdates,irregularScriptUpdates,repeatableScriptDeletions,patchScriptUpdates,postprocessingScriptUpdates);
}",0.9702312138728324
143870,"@Test public void testErrorInIncrementalScript(){
  enableFromScratch();
  createInitialScripts();
  errorInInitialScript();
  newIncrementalScript();
  try {
    updateDatabase();
  }
 catch (  DbMaintainException e) {
    assertMessageContains(e.getMessage(),""String_Node_Str"");
  }
  assertTablesDontExist(INITIAL_INCREMENTAL_2,NEW_INCREMENTAL_1);
  try {
    updateDatabase();
  }
 catch (  DbMaintainException e) {
    assertMessageContains(e.getMessage(),""String_Node_Str"",INITIAL_INCREMENTAL_2);
  }
  assertTablesDontExist(INITIAL_INCREMENTAL_2,NEW_INCREMENTAL_1);
  fixErrorInInitialScript();
  updateDatabase();
  assertTablesExist(INITIAL_INCREMENTAL_1,INITIAL_REPEATABLE,INITIAL_INCREMENTAL_2,NEW_INCREMENTAL_1);
}","@Test public void testErrorInIncrementalScript(){
  enableFromScratch();
  createInitialScripts();
  errorInInitialScript();
  newIncrementalScript();
  try {
    updateDatabase();
  }
 catch (  DbMaintainException e) {
    assertMessageContains(e.getMessage(),""String_Node_Str"");
  }
  assertTablesDontExist(INITIAL_INCREMENTAL_2,NEW_INCREMENTAL_1);
  try {
    updateDatabase();
  }
 catch (  DbMaintainException e) {
    assertMessageContains(e.getMessage(),""String_Node_Str"",INITIAL_INCREMENTAL_2 + ""String_Node_Str"");
  }
  assertTablesDontExist(INITIAL_INCREMENTAL_2,NEW_INCREMENTAL_1);
  fixErrorInInitialScript();
  updateDatabase();
  assertTablesExist(INITIAL_INCREMENTAL_1,INITIAL_REPEATABLE,INITIAL_INCREMENTAL_2,NEW_INCREMENTAL_1);
}",0.9864130434782608
143871,"@Test public void testErrorInRepeatableScript(){
  createInitialScripts();
  try {
    updateDatabase();
  }
 catch (  DbMaintainException e) {
  }
  try {
    updateDatabase();
  }
 catch (  DbMaintainException e) {
    assertMessageContains(e.getMessage(),""String_Node_Str"",""String_Node_Str"",INITIAL_REPEATABLE + ""String_Node_Str"");
  }
  updateDatabase();
  assertTablesExist(INITIAL_INCREMENTAL_1,INITIAL_REPEATABLE,INITIAL_INCREMENTAL_2);
}","@Test public void testErrorInRepeatableScript(){
  enableFromScratch();
  createInitialScripts();
  errorInRepeatableScript();
  try {
    updateDatabase();
    fail();
  }
 catch (  DbMaintainException e) {
    assertMessageContains(e.getMessage(),""String_Node_Str"",INITIAL_REPEATABLE + ""String_Node_Str"");
  }
  try {
    updateDatabase();
    fail();
  }
 catch (  DbMaintainException e) {
    assertMessageContains(e.getMessage(),""String_Node_Str"",INITIAL_REPEATABLE + ""String_Node_Str"");
  }
  updateIncrementalScript();
  try {
    updateDatabase();
    fail();
  }
 catch (  DbMaintainException e) {
    assertMessageContains(e.getMessage(),""String_Node_Str"",INITIAL_REPEATABLE + ""String_Node_Str"");
  }
  fixErrorInRepeatableScript();
  updateDatabase();
  assertTablesExist(UPDATED_INCREMENTAL_1,INITIAL_REPEATABLE,INITIAL_INCREMENTAL_2);
}",0.6197836166924265
143872,"/** 
 * Deletions of repeatable scripts are currently not registered! Nothing is done if a repeatable script is deleted: this is ignored. This must be fixed in the future! TODO
 */
@Test public void repeatableScriptDeleted(){
  executedScripts(REPEATABLE_1,REPEATABLE_2);
  scripts(REPEATABLE_1);
  calculateScriptUpdates();
  assertNoScriptUpdates();
}","@Test public void repeatableScriptDeleted(){
  executedScripts(REPEATABLE_1,REPEATABLE_2);
  scripts(REPEATABLE_1);
  calculateScriptUpdates();
  assertRepeatableScriptDeletion(REPEATABLE_2);
}",0.6007326007326007
143873,"/** 
 * todo check javadoc <p/> Checks whether the database should be updated from scratch or just incrementally. The database needs to be rebuilt in following cases: <ul> <li>Some existing scripts were modified.</li> <li>The last update of the database was unsuccessful.</li> </ul>
 * @param currentVersion         The current database version, not null
 * @param alreadyExecutedScripts The current set of executed scripts, not null
 * @return True if a from scratch rebuild is needed, false otherwise
 */
protected boolean shouldUpdateDatabaseFromScratch(ScriptIndexes currentVersion,Set<ExecutedScript> alreadyExecutedScripts){
  if (scriptSource.isIncrementalScriptModified(currentVersion,alreadyExecutedScripts)) {
    if (fromScratchEnabled) {
      logger.info(""String_Node_Str"");
      return true;
    }
    throw new DbMaintainException(""String_Node_Str"" + ""String_Node_Str"");
  }
  return false;
}","/** 
 * Checks whether the database should be updated from scratch or just incrementally. The database needs to be rebuilt in following cases: <ul> <li>Some existing scripts were modified.</li> <li>The last update of the database was unsuccessful.</li> </ul> The database will only be rebuilt from scratch if from scratch is enabled. If the keep retrying is set to false, the database will only be rebuilt again after an unsuccessful build when a change is made to the script files. Otherwise it will not attempt to rebuild the database.
 * @param currentVersion         The current database version, not null
 * @param alreadyExecutedScripts The scripts that were already applied on the database, not null
 * @return True if a from scratch rebuild is needed, false otherwise
 */
protected boolean shouldUpdateDatabaseFromScratch(ScriptIndexes currentVersion,Set<ExecutedScript> alreadyExecutedScripts){
  if (scriptSource.isIncrementalScriptModified(currentVersion,alreadyExecutedScripts)) {
    if (!fromScratchEnabled) {
      throw new DbMaintainException(""String_Node_Str"" + ""String_Node_Str"" + ""String_Node_Str"");
    }
    logger.info(""String_Node_Str"");
    return true;
  }
  if (errorInIndexedScriptDuringLastUpdate(alreadyExecutedScripts)) {
    if (fromScratchEnabled) {
      if (!keepRetryingAfterError) {
        throw new DbMaintainException(""String_Node_Str"" + PROPKEY_KEEP_RETRYING_AFTER_ERROR_ENABLED + ""String_Node_Str""+ ""String_Node_Str"");
      }
      logger.info(""String_Node_Str"" + ""String_Node_Str"");
      return true;
    }
 else {
      logger.warn(""String_Node_Str"" + ""String_Node_Str"" + ""String_Node_Str"");
      return false;
    }
  }
  return false;
}",0.587736212880833
143874,"public DefaultDbMaintainer(ScriptRunner scriptRunner,ScriptSource scriptSource,ExecutedScriptInfoSource executedScriptInfoSource,boolean fromScratchEnabled,boolean cleanDbEnabled,boolean disableConstraintsEnabled,boolean updateSequencesEnabled,DBClearer dbClearer,DBCleaner dbCleaner,ConstraintsDisabler constraintsDisabler,SequenceUpdater sequenceUpdater){
  this.scriptRunner=scriptRunner;
  this.scriptSource=scriptSource;
  this.executedScriptInfoSource=executedScriptInfoSource;
  this.fromScratchEnabled=fromScratchEnabled;
  this.cleanDbEnabled=cleanDbEnabled;
  this.disableConstraintsEnabled=disableConstraintsEnabled;
  this.updateSequencesEnabled=updateSequencesEnabled;
  this.dbClearer=dbClearer;
  this.dbCleaner=dbCleaner;
  this.constraintsDisabler=constraintsDisabler;
  this.sequenceUpdater=sequenceUpdater;
}","public DefaultDbMaintainer(ScriptRunner scriptRunner,ScriptSource scriptSource,ExecutedScriptInfoSource executedScriptInfoSource,boolean fromScratchEnabled,boolean keepRetryingAfterError,boolean cleanDbEnabled,boolean disableConstraintsEnabled,boolean updateSequencesEnabled,DBClearer dbClearer,DBCleaner dbCleaner,ConstraintsDisabler constraintsDisabler,SequenceUpdater sequenceUpdater){
  this.scriptRunner=scriptRunner;
  this.scriptSource=scriptSource;
  this.executedScriptInfoSource=executedScriptInfoSource;
  this.fromScratchEnabled=fromScratchEnabled;
  this.keepRetryingAfterError=keepRetryingAfterError;
  this.cleanDbEnabled=cleanDbEnabled;
  this.disableConstraintsEnabled=disableConstraintsEnabled;
  this.updateSequencesEnabled=updateSequencesEnabled;
  this.dbClearer=dbClearer;
  this.dbCleaner=dbCleaner;
  this.constraintsDisabler=constraintsDisabler;
  this.sequenceUpdater=sequenceUpdater;
}",0.9511213341000576
143875,"/** 
 * Constructor for DefaultScriptRunner.
 * @param scriptParserFactory
 * @param defaultDbSupport
 * @param nameDbSupportMap
 * @param sqlHandler 
 */
public DefaultScriptRunner(ScriptParserFactory scriptParserFactory,DbSupport defaultDbSupport,Map<String,DbSupport> nameDbSupportMap,SQLHandler sqlHandler){
  this.scriptParserFactory=scriptParserFactory;
  this.defaultDbSupport=defaultDbSupport;
  this.nameDbSupportMap=nameDbSupportMap;
  this.sqlHandler=sqlHandler;
}","/** 
 * Constructor for DefaultScriptRunner.
 * @param scriptParserFactory
 * @param defaultDbSupport
 * @param nameDbSupportMap
 * @param sqlHandler
 */
public DefaultScriptRunner(ScriptParserFactory scriptParserFactory,DbSupport defaultDbSupport,Map<String,DbSupport> nameDbSupportMap,SQLHandler sqlHandler){
  this.scriptParserFactory=scriptParserFactory;
  this.defaultDbSupport=defaultDbSupport;
  this.nameDbSupportMap=nameDbSupportMap;
  this.sqlHandler=sqlHandler;
}",0.9989462592202318
143876,"/** 
 * Copies a file to a new location. <p> This method copies the contents of the specified source file to the specified destination file. The directory holding the destination file is created if it does not exist. If the destination file exists, then this method will overwrite it.
 * @param srcFile  an existing file to copy, must not be null
 * @param destFile  the new file, must not be null
 * @param preserveFileDate  true if the file date of the copyshould be the same as the original
 * @throws NullPointerException if source or destination is null
 * @throws IOException if source or destination is invalid
 * @throws IOException if an IO error occurs during copying
 * @see #copyFileToDirectory
 */
public static void copyFile(File srcFile,File destFile,boolean preserveFileDate) throws IOException {
  if (srcFile == null) {
    throw new NullPointerException(""String_Node_Str"");
  }
  if (destFile == null) {
    throw new NullPointerException(""String_Node_Str"");
  }
  if (srcFile.exists() == false) {
    throw new FileNotFoundException(""String_Node_Str"" + srcFile + ""String_Node_Str"");
  }
  if (srcFile.isDirectory()) {
    throw new IOException(""String_Node_Str"" + srcFile + ""String_Node_Str"");
  }
  if (srcFile.getCanonicalPath().equals(destFile.getCanonicalPath())) {
    throw new IOException(""String_Node_Str"" + srcFile + ""String_Node_Str""+ destFile+ ""String_Node_Str"");
  }
  if (destFile.getParentFile() != null && destFile.getParentFile().exists() == false) {
    if (destFile.getParentFile().mkdirs() == false) {
      throw new IOException(""String_Node_Str"" + destFile + ""String_Node_Str"");
    }
  }
  if (destFile.exists() && destFile.canWrite() == false) {
    throw new IOException(""String_Node_Str"" + destFile + ""String_Node_Str"");
  }
  doCopyFile(srcFile,destFile,preserveFileDate);
}","/** 
 * Copies a file to a new location. <p> This method copies the contents of the specified source file to the specified destination file. The directory holding the destination file is created if it does not exist. If the destination file exists, then this method will overwrite it.
 * @param srcFile  an existing file to copy, must not be null
 * @param destFile  the new file, must not be null
 * @param preserveFileDate  true if the file date of the copyshould be the same as the original
 * @throws NullPointerException if source or destination is null
 * @throws IOException if source or destination is invalid
 * @throws IOException if an IO error occurs during copying
 * @see #copyFileToDirectory
 */
public static void copyFile(File srcFile,File destFile,boolean preserveFileDate) throws IOException {
  if (srcFile == null) {
    throw new NullPointerException(""String_Node_Str"");
  }
  if (destFile == null) {
    throw new NullPointerException(""String_Node_Str"");
  }
  if (!srcFile.exists()) {
    throw new FileNotFoundException(""String_Node_Str"" + srcFile + ""String_Node_Str"");
  }
  if (srcFile.isDirectory()) {
    throw new IOException(""String_Node_Str"" + srcFile + ""String_Node_Str"");
  }
  if (srcFile.getCanonicalPath().equals(destFile.getCanonicalPath())) {
    throw new IOException(""String_Node_Str"" + srcFile + ""String_Node_Str""+ destFile+ ""String_Node_Str"");
  }
  if (destFile.getParentFile() != null && !destFile.getParentFile().exists() && !destFile.getParentFile().mkdirs()) {
    throw new IOException(""String_Node_Str"" + destFile + ""String_Node_Str"");
  }
  if (destFile.exists() && !destFile.canWrite()) {
    throw new IOException(""String_Node_Str"" + destFile + ""String_Node_Str"");
  }
  doCopyFile(srcFile,destFile,preserveFileDate);
}",0.982739420935412
143877,"@Override public void newRevision(Object arg0){
  SIGHRevisionEntity revisionEntity=(SIGHRevisionEntity)arg0;
  if (!processReplicationChange(revisionEntity)) {
    if (!processJSFChange(revisionEntity)) {
      throw new KarakuRuntimeException(""String_Node_Str"");
    }
  }
}","@Override public void newRevision(Object arg0){
  SIGHRevisionEntity revisionEntity=(SIGHRevisionEntity)arg0;
  if (!processReplicationChange(revisionEntity) && !processJSFChange(revisionEntity)) {
    throw new KarakuRuntimeException(""String_Node_Str"");
  }
}",0.9552238805970148
143878,"/** 
 * Verifica si esta activado JPA y si no es así lo deshabilita.
 */
private void checkState(){
  if (this.properties.getBoolean(KARAKU_JPA_ENABLED,true)) {
    this.enabled=true;
  }
 else {
    log.info(""String_Node_Str"");
    this.enabled=false;
    log.info(""String_Node_Str"");
    this.liquibase=false;
    return;
  }
  if (this.properties.getBoolean(""String_Node_Str"",true)) {
    this.liquibase=true;
  }
 else {
    log.info(""String_Node_Str"");
    this.liquibase=false;
  }
}","/** 
 * Verifica si esta activado JPA y si no es así lo deshabilita.
 */
private void checkState(){
  if (this.properties.getBoolean(KARAKU_JPA_ENABLED,true)) {
    this.enabled=true;
  }
 else {
    LOG.info(""String_Node_Str"");
    this.enabled=false;
    LOG.info(""String_Node_Str"");
    this.liquibase=false;
    return;
  }
  if (this.properties.getBoolean(""String_Node_Str"",true)) {
    this.liquibase=true;
  }
 else {
    LOG.info(""String_Node_Str"");
    this.liquibase=false;
  }
}",0.98159509202454
143879,"private Jaxb2Marshaller getJaxb2Marshaller(){
  if (!(properties.get(KARAKU_WS_CLIENT_ENABLED).equals(""String_Node_Str""))) {
    return null;
  }
  Pattern pattern=Pattern.compile(properties.get(KARAKU_WS_CLIENT_PACKAGES_TO_SCAN,DEFAULT_PACKAGES_TO_SCAN_EXPRESSION));
  Package[] packages=Package.getPackages();
  List<String> packagesFound=new ArrayList<String>();
  for (  Package pa : packages) {
    Matcher matcher=pattern.matcher(pa.getName());
    if (matcher.matches()) {
      log.info(""String_Node_Str"" + pa.getName());
      packagesFound.add(pa.getName());
    }
  }
  String paquetes=properties.get(KARAKU_WS_CLIENT_PACKAGES_TO_SCAN_SPACES,""String_Node_Str"").trim();
  if (!""String_Node_Str"".equals(paquetes)) {
    for (    String pa : paquetes.split(""String_Node_Str"")) {
      packagesFound.add(pa);
    }
  }
  try {
    Class<?> clazz=Class.forName(""String_Node_Str"");
    Object o=clazz.newInstance();
    String[] clases=packagesFound.toArray(new String[0]);
    clazz.getMethod(""String_Node_Str"",String[].class).invoke(o,(Object)clases);
    return (Jaxb2Marshaller)o;
  }
 catch (  ClassNotFoundException e) {
    throw new KarakuRuntimeException(""String_Node_Str"" + ""String_Node_Str"",e);
  }
catch (  Exception e) {
    throw new KarakuRuntimeException(""String_Node_Str"",e);
  }
}","private Jaxb2Marshaller getJaxb2Marshaller(){
  if (!(properties.get(KARAKU_WS_CLIENT_ENABLED).equals(""String_Node_Str""))) {
    return null;
  }
  Pattern pattern=Pattern.compile(properties.get(KARAKU_WS_CLIENT_PACKAGES_TO_SCAN,DEFAULT_PACKAGES_TO_SCAN_EXPRESSION));
  Package[] packages=Package.getPackages();
  List<String> packagesFound=new ArrayList<String>();
  for (  Package pa : packages) {
    Matcher matcher=pattern.matcher(pa.getName());
    if (matcher.matches()) {
      log.info(""String_Node_Str"" + pa.getName());
      packagesFound.add(pa.getName());
    }
  }
  addSpecificPackages(packagesFound);
  return instanciateMarshaller(packagesFound);
}",0.6067073170731707
143880,"/** 
 * Define el tipo de proveedor de URl que a ser utilizado. Si la persistencia esta activa se retorna un   {@link EntityURLProvider}que busca en la base de datos. En caso contrario retorna un  {@link JsonURLProvider}.
 * @return {@link WSInformationProvider}
 */
@Bean WSInformationProvider wsInformationProvider(){
  if (properties.getBoolean(KarakuPersistence.KARAKU_JPA_ENABLED,true)) {
    return new EntityURLProvider();
  }
 else {
    return new JsonURLProvider();
  }
}","/** 
 * Define el tipo de proveedor de URl que a ser utilizado. Si la persistencia esta activa se retorna un   {@link EntityURLProvider}que busca en la base de datos. En caso contrario retorna un  {@link JsonURLProvider}.
 * @return {@link WSInformationProvider}
 * @throws Exception
 */
@Bean WSInformationProvider wsInformationProvider() throws IOException {
  if (properties.getBoolean(KarakuPersistence.KARAKU_JPA_ENABLED,true)) {
    return new EntityURLProvider();
  }
 else {
    String url=properties.get(""String_Node_Str"",""String_Node_Str"");
    InputStream is;
    if (url.startsWith(""String_Node_Str"")) {
      is=new FileInputStream(url);
    }
 else {
      is=new ClassPathResource(properties.get(""String_Node_Str"",""String_Node_Str"")).getInputStream();
    }
    return new JsonURLProvider(is);
  }
}",0.7428571428571429
143881,"/** 
 * @param operation
 * @param dc
 * @return
 */
@SuppressWarnings(""String_Node_Str"") public <T>Operation redirect(Operation operation,Class<T> clazz,T dc){
  HashSet<Watcher<?>> watchers=getWatchers(clazz);
  for (  Watcher<?> watcher : watchers) {
    Watcher<T> wath=(Watcher<T>)watcher;
    Operation nOp=wath.redirect(operation,dc);
    if (nOp != operation) {
      return redirect(nOp,clazz,dc);
    }
  }
  return operation;
}","/** 
 * @param operation
 * @param dc
 * @return
 */
@SuppressWarnings(""String_Node_Str"") public <T>Operation redirect(Operation operation,Class<T> clazz,T dc){
  Set<Watcher<?>> watchers=getWatchers(clazz);
  for (  Watcher<?> watcher : watchers) {
    Watcher<T> wath=(Watcher<T>)watcher;
    Operation nOp=wath.redirect(operation,dc);
    if (!nOp.equals(operation)) {
      return redirect(nOp,clazz,dc);
    }
  }
  return operation;
}",0.9544419134396356
143882,"/** 
 * @param operation
 * @param dc
 * @return
 */
@SuppressWarnings(""String_Node_Str"") public <T>T process(Operation origin,Operation operation,Class<T> clazz,T dc){
  HashSet<Watcher<?>> watchers=getWatchers(clazz);
  T bean=dc;
  for (  Watcher<?> watcher : watchers) {
    Watcher<T> wath=(Watcher<T>)watcher;
    bean=wath.process(origin,operation,bean);
  }
  return bean;
}","/** 
 * @param operation
 * @param dc
 * @return
 */
@SuppressWarnings(""String_Node_Str"") public <T>T process(Operation origin,Operation operation,Class<T> clazz,T dc){
  Set<Watcher<?>> currentWatchers=getWatchers(clazz);
  T bean=dc;
  for (  Watcher<?> watcher : currentWatchers) {
    Watcher<T> wath=(Watcher<T>)watcher;
    bean=wath.process(origin,operation,bean);
  }
  return bean;
}",0.9715762273901808
143883,"/** 
 * @param clazz
 * @return
 */
private <T>HashSet<Watcher<?>> getWatchers(Class<T> clazz){
  HashSet<Watcher<?>> watchers=new HashSet<Watcher<?>>();
  for (  Entry<Class<?>,List<Watcher<?>>> entry : maps.entrySet()) {
    Class<?> oClazz=entry.getKey();
    if (oClazz.isAssignableFrom(clazz)) {
      watchers.addAll(entry.getValue());
    }
  }
  return watchers;
}","/** 
 * @param clazz
 * @return
 */
private <T>Set<Watcher<?>> getWatchers(Class<T> clazz){
  Set<Watcher<?>> currentWatchers=new HashSet<Watcher<?>>();
  for (  Entry<Class<?>,List<Watcher<?>>> entry : maps.entrySet()) {
    Class<?> oClazz=entry.getKey();
    if (oClazz.isAssignableFrom(clazz)) {
      currentWatchers.addAll(entry.getValue());
    }
  }
  return currentWatchers;
}",0.953764861294584
143884,"@Override public List<Vehicle> list(int cusid) throws DataAccessException {
  logger.info(""String_Node_Str"");
  String sql=""String_Node_Str"";
  List<Vehicle> vhcList=jdbcTemplate.query(sql,new VehicleMapper());
  return vhcList;
}","@Override public List<Vehicle> list(int cusid) throws DataAccessException {
  logger.info(""String_Node_Str"");
  String sql=""String_Node_Str"";
  List<Vehicle> vhcList=jdbcTemplate.query(sql,new Object[]{cusid},new VehicleMapper());
  return vhcList;
}",0.9583333333333334
143885,"private void startAnimation(){
  ImageView centerWheel=(ImageView)findViewById(R.id.center_wheel);
  View infoView=findViewById(R.id.info);
  Animation rotation=AnimationUtils.loadAnimation(this,R.anim.rotation_start);
  centerWheel.startAnimation(rotation);
  Animation slideLeft=AnimationUtils.loadAnimation(this,R.anim.slide_in_left);
  button_logout.startAnimation(slideLeft);
  Animation slideRight=AnimationUtils.loadAnimation(this,R.anim.slide_in_right);
  button_web.startAnimation(slideRight);
  Animation slideTop=AnimationUtils.loadAnimation(this,R.anim.slide_in_top);
  infoView.startAnimation(slideTop);
  button_login.startAnimation(slideTop);
  Animation slideBottom=AnimationUtils.loadAnimation(this,R.anim.slide_in_bottom);
  Animation popBehind=AnimationUtils.loadAnimation(this,R.anim.pop_enter_behind);
  centerWheel.startAnimation(popBehind);
}","private void startAnimation(){
  ImageView centerWheel=(ImageView)findViewById(R.id.center_wheel);
  View infoView=findViewById(R.id.info);
  Animation rotation=AnimationUtils.loadAnimation(this,R.anim.rotation_start);
  centerWheel.startAnimation(rotation);
  Animation slideLeft=AnimationUtils.loadAnimation(this,R.anim.slide_in_left);
  button_logout.startAnimation(slideLeft);
  Animation slideRight=AnimationUtils.loadAnimation(this,R.anim.slide_in_right);
  button_web.startAnimation(slideRight);
  Animation slideTop=AnimationUtils.loadAnimation(this,R.anim.slide_in_top);
  infoView.startAnimation(slideTop);
  button_login.startAnimation(slideTop);
  Animation slideBottom=AnimationUtils.loadAnimation(this,R.anim.slide_in_bottom);
}",0.923459863098942
143886,"public void add(LayoutInflater inflater){
  initialise(inflater);
  AlertDialog.Builder builder=new AlertDialog.Builder(this.context);
  builder.setView(v).setTitle(""String_Node_Str"").setPositiveButton(""String_Node_Str"",new DialogInterface.OnClickListener(){
    @Override public void onClick(    DialogInterface dialogInterface,    int i){
      add_update=true;
      add_update(textbox_username.getText().toString(),textbox_password.getText().toString());
    }
  }
).setNegativeButton(""String_Node_Str"",new DialogInterface.OnClickListener(){
    @Override public void onClick(    DialogInterface dialogInterface,    int i){
      Toast.makeText(context,""String_Node_Str"",Toast.LENGTH_SHORT).show();
    }
  }
);
  builder.create().show();
}","public void add(LayoutInflater inflater){
  initialise(inflater);
  AlertDialog.Builder builder=new AlertDialog.Builder(this.context);
  builder.setView(v).setTitle(""String_Node_Str"").setPositiveButton(""String_Node_Str"",new DialogInterface.OnClickListener(){
    @Override public void onClick(    DialogInterface dialogInterface,    int i){
    }
  }
).setNegativeButton(""String_Node_Str"",new DialogInterface.OnClickListener(){
    @Override public void onClick(    DialogInterface dialogInterface,    int i){
      Toast.makeText(context,""String_Node_Str"",Toast.LENGTH_SHORT).show();
    }
  }
);
  final AlertDialog dialog=builder.create();
  dialog.show();
  dialog.getButton(AlertDialog.BUTTON_POSITIVE).setOnClickListener(new View.OnClickListener(){
    @Override public void onClick(    View view){
      add_update=true;
      if (add_update(textbox_username.getText().toString(),textbox_password.getText().toString())) {
        dialog.dismiss();
      }
    }
  }
);
}",0.7274840209180709
143887,"public void add_update(String un,String pwd){
  if (un.trim().isEmpty()) {
    Toast.makeText(this.context,""String_Node_Str"",Toast.LENGTH_LONG).show();
    return;
  }
  if (pwd.trim().isEmpty()) {
    Toast.makeText(this.context,""String_Node_Str"",Toast.LENGTH_LONG).show();
    return;
  }
  UserStructure userStructure=new UserStructure();
  userStructure.setUsername(un);
  userStructure.setPassword(pwd);
  if (add_update) {
    saveCredential(userStructure);
  }
 else {
    updateCredentials(userStructure);
  }
}","public boolean add_update(String un,String pwd){
  if (un.trim().isEmpty()) {
    Toast.makeText(this.context,""String_Node_Str"",Toast.LENGTH_LONG).show();
    return false;
  }
  if (pwd.trim().isEmpty()) {
    Toast.makeText(this.context,""String_Node_Str"",Toast.LENGTH_LONG).show();
    return false;
  }
  UserStructure userStructure=new UserStructure();
  userStructure.setUsername(un);
  userStructure.setPassword(pwd);
  if (add_update) {
    return saveCredential(userStructure);
  }
 else {
    return updateCredentials(userStructure);
  }
}",0.9653233364573572
143888,"public void updateCredentials(UserStructure userStructure){
  int i=databaseEngine.updateUser(userStructure,username);
  if (i == 1) {
    Log.e(""String_Node_Str"",""String_Node_Str"");
    Toast.makeText(this.context,""String_Node_Str"",Toast.LENGTH_SHORT).show();
  }
 else   if (i == 0) {
    Toast.makeText(this.context,""String_Node_Str"",Toast.LENGTH_SHORT).show();
    Log.e(""String_Node_Str"",""String_Node_Str"");
  }
 else {
    Toast.makeText(this.context,""String_Node_Str"",Toast.LENGTH_SHORT).show();
    Log.e(""String_Node_Str"",""String_Node_Str"");
  }
}","public boolean updateCredentials(UserStructure userStructure){
  int i=databaseEngine.updateUser(userStructure,username);
  if (i == 1) {
    Log.e(""String_Node_Str"",""String_Node_Str"");
    Toast.makeText(this.context,""String_Node_Str"",Toast.LENGTH_SHORT).show();
    return true;
  }
 else   if (i == 0) {
    Toast.makeText(this.context,""String_Node_Str"",Toast.LENGTH_SHORT).show();
    Log.e(""String_Node_Str"",""String_Node_Str"");
    return false;
  }
 else {
    Toast.makeText(this.context,""String_Node_Str"",Toast.LENGTH_SHORT).show();
    Log.e(""String_Node_Str"",""String_Node_Str"");
    return true;
  }
}",0.9460154241645244
143889,"public void update(String un,LayoutInflater inflater){
  this.username=un;
  initialise(inflater);
  textbox_username.setText(un);
  UserStructure us=databaseEngine.getUsernamePassword(un);
  textbox_password.setText(us.getPassword());
  AlertDialog.Builder builder=new AlertDialog.Builder(this.context);
  builder.setView(v).setTitle(""String_Node_Str"").setPositiveButton(""String_Node_Str"",new DialogInterface.OnClickListener(){
    @Override public void onClick(    DialogInterface dialogInterface,    int i){
      add_update=false;
      add_update(textbox_username.getText().toString(),textbox_password.getText().toString());
    }
  }
).setNegativeButton(""String_Node_Str"",new DialogInterface.OnClickListener(){
    @Override public void onClick(    DialogInterface dialogInterface,    int i){
      Toast.makeText(context,""String_Node_Str"",Toast.LENGTH_SHORT).show();
    }
  }
);
  builder.create().show();
}","public void update(String un,LayoutInflater inflater){
  this.username=un;
  initialise(inflater);
  textbox_username.setText(un);
  UserStructure us=databaseEngine.getUsernamePassword(un);
  textbox_password.setText(us.getPassword());
  AlertDialog.Builder builder=new AlertDialog.Builder(this.context);
  builder.setView(v).setTitle(""String_Node_Str"").setPositiveButton(""String_Node_Str"",new DialogInterface.OnClickListener(){
    @Override public void onClick(    DialogInterface dialogInterface,    int i){
    }
  }
).setNegativeButton(""String_Node_Str"",new DialogInterface.OnClickListener(){
    @Override public void onClick(    DialogInterface dialogInterface,    int i){
      Toast.makeText(context,""String_Node_Str"",Toast.LENGTH_SHORT).show();
    }
  }
);
  final AlertDialog dialog=builder.create();
  dialog.show();
  dialog.getButton(AlertDialog.BUTTON_POSITIVE).setOnClickListener(new View.OnClickListener(){
    @Override public void onClick(    View view){
      add_update=false;
      if (add_update(textbox_username.getText().toString(),textbox_password.getText().toString())) {
        dialog.dismiss();
      }
    }
  }
);
}",0.7716917111003393
143890,"void saveCredential(UserStructure userStructure){
  if (!databaseEngine.existsUser(userStructure.getUsername())) {
    if (databaseEngine.insert(userStructure)) {
      Toast.makeText(this.context,userStructure.getUsername() + ""String_Node_Str"",Toast.LENGTH_SHORT).show();
    }
 else {
      Toast.makeText(this.context,""String_Node_Str"",Toast.LENGTH_SHORT).show();
    }
  }
 else {
    Toast.makeText(this.context,""String_Node_Str"",Toast.LENGTH_SHORT).show();
  }
}","boolean saveCredential(UserStructure userStructure){
  if (!databaseEngine.existsUser(userStructure.getUsername())) {
    if (databaseEngine.insert(userStructure)) {
      Toast.makeText(this.context,userStructure.getUsername() + ""String_Node_Str"",Toast.LENGTH_SHORT).show();
      return true;
    }
 else {
      Toast.makeText(this.context,""String_Node_Str"",Toast.LENGTH_SHORT).show();
      return false;
    }
  }
 else {
    Toast.makeText(this.context,""String_Node_Str"",Toast.LENGTH_SHORT).show();
    return false;
  }
}",0.931726907630522
143891,"@Override protected void onCreate(Bundle savedInstanceState){
  super.onCreate(savedInstanceState);
  setContentView(R.layout.activity_main);
  networkEngine=NetworkEngine.getInstance(this);
  databaseEngine=DatabaseEngine.getInstance(this);
  preferences=PreferenceManager.getDefaultSharedPreferences(this.getApplicationContext());
  button_login=(ImageButton)findViewById(R.id.button_login);
  button_login.setOnClickListener(new View.OnClickListener(){
    public void onClick(    View v){
      login();
    }
  }
);
  button_logout=(ImageButton)findViewById(R.id.button_logout);
  button_web=(ImageButton)findViewById(R.id.button_web);
  button_del=(Button)findViewById(R.id.button_del);
  button_del.setOnClickListener(new View.OnClickListener(){
    public void onClick(    View v){
      String username=spinner_user_list.getSelectedItem().toString();
      ManagerUserServices managerUserServices=new ManagerUserServices(MainActivity.this);
      managerUserServices.delete(spinner_user_list.getSelectedItem().toString());
      spinnerUpdateFlag=false;
      updateHomescreenData();
    }
  }
);
  button_add=(Button)findViewById(R.id.button_add);
  button_add.setOnClickListener(new View.OnClickListener(){
    @Override public void onClick(    View view){
      ManagerUserServices managerUserServices=new ManagerUserServices(MainActivity.this);
      managerUserServices.add(getLayoutInflater());
    }
  }
);
  button_edit=(Button)findViewById(R.id.button_edit);
  button_edit.setOnClickListener(new View.OnClickListener(){
    public void onClick(    View v){
      LayoutInflater inflater=getLayoutInflater();
      ManagerUserServices managerUserServices=new ManagerUserServices(MainActivity.this);
      managerUserServices.update(spinner_user_list.getSelectedItem().toString(),inflater);
    }
  }
);
  user_list=databaseEngine.userList();
  adapter=new ArrayAdapter<String>(this,R.layout.spinner_layout,user_list);
  adapter.setDropDownViewResource(android.R.layout.simple_spinner_item);
  spinner_user_list=(Spinner)findViewById(R.id.spinner_user_list);
  spinner_user_list.setAdapter(adapter);
  adapter.notifyDataSetChanged();
  spinnerUpdateFlag=false;
  spinner_user_list.setOnItemSelectedListener(new AdapterView.OnItemSelectedListener(){
    @Override public void onItemSelected(    AdapterView<?> parent,    View view,    int pos,    long l){
      parent.setSelection(pos);
    }
    @Override public void onNothingSelected(    AdapterView<?> adapterView){
    }
  }
);
  if (savedInstanceState == null) {
    getSupportFragmentManager().beginTransaction().add(R.id.container,new PlaceholderFragment()).commit();
  }
  updateHomescreenData();
  startAnimation();
  String intentMethod=getIntent().getStringExtra(""String_Node_Str"");
  if (intentMethod != null && intentMethod.equals(""String_Node_Str"")) {
    login();
    finish();
  }
 else   if (intentMethod != null && intentMethod.equals(""String_Node_Str"")) {
    logout();
    finish();
  }
  boolean prefNeedPersistence=preferences.getBoolean(SettingsActivity.KEY_PERSISTENCE,SettingsActivity.DEFAULT_KEY_PERSISTENCE);
  boolean perfStartupLogin=preferences.getBoolean(SettingsActivity.KEY_STARTUP_LOGIN,SettingsActivity.DEFAULT_KEY_STARTUP_LOGIN);
  if (prefNeedPersistence) {
    startService(new Intent(this,LoginService.class));
  }
  if (perfStartupLogin)   login();
}","@Override protected void onCreate(Bundle savedInstanceState){
  super.onCreate(savedInstanceState);
  setContentView(R.layout.activity_main);
  networkEngine=NetworkEngine.getInstance(this);
  databaseEngine=DatabaseEngine.getInstance(this);
  preferences=PreferenceManager.getDefaultSharedPreferences(this.getApplicationContext());
  button_login=(ImageButton)findViewById(R.id.button_login);
  button_login.setOnClickListener(new View.OnClickListener(){
    public void onClick(    View v){
      login();
    }
  }
);
  button_logout=(ImageButton)findViewById(R.id.button_logout);
  button_web=(ImageButton)findViewById(R.id.button_web);
  button_del=(Button)findViewById(R.id.button_del);
  button_del.setOnClickListener(new View.OnClickListener(){
    public void onClick(    View v){
      if (databaseEngine.isUserListEmpty()) {
        Toast.makeText(MainActivity.this,""String_Node_Str"",Toast.LENGTH_SHORT).show();
        return;
      }
      String username=spinner_user_list.getSelectedItem().toString();
      ManagerUserServices managerUserServices=new ManagerUserServices(MainActivity.this);
      managerUserServices.delete(spinner_user_list.getSelectedItem().toString());
      spinnerUpdateFlag=false;
      updateHomescreenData();
    }
  }
);
  button_add=(Button)findViewById(R.id.button_add);
  button_add.setOnClickListener(new View.OnClickListener(){
    @Override public void onClick(    View view){
      ManagerUserServices managerUserServices=new ManagerUserServices(MainActivity.this);
      managerUserServices.add(getLayoutInflater());
    }
  }
);
  button_edit=(Button)findViewById(R.id.button_edit);
  button_edit.setOnClickListener(new View.OnClickListener(){
    public void onClick(    View v){
      if (databaseEngine.isUserListEmpty()) {
        Toast.makeText(MainActivity.this,""String_Node_Str"",Toast.LENGTH_SHORT).show();
        return;
      }
      LayoutInflater inflater=getLayoutInflater();
      ManagerUserServices managerUserServices=new ManagerUserServices(MainActivity.this);
      managerUserServices.update(spinner_user_list.getSelectedItem().toString(),inflater);
    }
  }
);
  user_list=databaseEngine.userList();
  adapter=new ArrayAdapter<String>(this,R.layout.spinner_layout,user_list);
  adapter.setDropDownViewResource(android.R.layout.simple_spinner_item);
  spinner_user_list=(Spinner)findViewById(R.id.spinner_user_list);
  spinner_user_list.setAdapter(adapter);
  adapter.notifyDataSetChanged();
  spinnerUpdateFlag=false;
  spinner_user_list.setOnItemSelectedListener(new AdapterView.OnItemSelectedListener(){
    @Override public void onItemSelected(    AdapterView<?> parent,    View view,    int pos,    long l){
      parent.setSelection(pos);
    }
    @Override public void onNothingSelected(    AdapterView<?> adapterView){
    }
  }
);
  if (savedInstanceState == null) {
    getSupportFragmentManager().beginTransaction().add(R.id.container,new PlaceholderFragment()).commit();
  }
  updateHomescreenData();
  startAnimation();
  String intentMethod=getIntent().getStringExtra(""String_Node_Str"");
  if (intentMethod != null && intentMethod.equals(""String_Node_Str"")) {
    login();
    finish();
  }
 else   if (intentMethod != null && intentMethod.equals(""String_Node_Str"")) {
    logout();
    finish();
  }
  boolean prefNeedPersistence=preferences.getBoolean(SettingsActivity.KEY_PERSISTENCE,SettingsActivity.DEFAULT_KEY_PERSISTENCE);
  boolean perfStartupLogin=preferences.getBoolean(SettingsActivity.KEY_STARTUP_LOGIN,SettingsActivity.DEFAULT_KEY_STARTUP_LOGIN);
  if (prefNeedPersistence) {
    startService(new Intent(this,LoginService.class));
  }
  if (perfStartupLogin)   login();
}",0.9553215708594196
143892,"void login(){
  NetworkEngine.StatusCode status=null;
  Log.d(""String_Node_Str"",""String_Node_Str"");
  String username, password;
  username=getSelectedUsername();
  password=databaseEngine.getUsernamePassword(username).getPassword();
  if (password.isEmpty()) {
    Toast.makeText(this,""String_Node_Str"" + username,Toast.LENGTH_SHORT).show();
    return;
  }
  try {
    status=networkEngine.login(username,password);
  }
 catch (  Exception e) {
    e.printStackTrace();
  }
}","void login(){
  if (databaseEngine.isUserListEmpty()) {
    Toast.makeText(MainActivity.this,""String_Node_Str"",Toast.LENGTH_SHORT).show();
    return;
  }
  NetworkEngine.StatusCode status=null;
  Log.d(""String_Node_Str"",""String_Node_Str"");
  String username, password;
  username=getSelectedUsername();
  password=databaseEngine.getUsernamePassword(username).getPassword();
  if (password.isEmpty()) {
    Toast.makeText(this,""String_Node_Str"" + username,Toast.LENGTH_SHORT).show();
    return;
  }
  try {
    status=networkEngine.login(username,password);
  }
 catch (  Exception e) {
    e.printStackTrace();
  }
}",0.3287671232876712
143893,"@Override public void onClick(View view){
  delete_user();
}","@Override public void onClick(DialogInterface dialogInterface,int i){
  Toast.makeText(getApplicationContext(),""String_Node_Str"",Toast.LENGTH_SHORT).show();
}",0.4587155963302752
143894,"public void onClickNegative(){
  Toast.makeText(this,""String_Node_Str"",Toast.LENGTH_SHORT).show();
  if (add_update) {
    this.finish();
  }
 else {
    dialogAlert.dismiss();
  }
}","public void onClickNegative(){
  Toast.makeText(this,""String_Node_Str"",Toast.LENGTH_SHORT).show();
  dialogAlert.dismiss();
}",0.8143322475570033
143895,"public void onClickPositive(String local_username,String password){
  if (username.isEmpty()) {
    Toast.makeText(this,""String_Node_Str"",Toast.LENGTH_LONG).show();
    return;
  }
  UserStructure userStructure=new UserStructure();
  userStructure.setUsername(local_username);
  userStructure.setPassword(password);
  if (add_update) {
    saveCredential(userStructure);
  }
 else {
    updateCredentials(userStructure);
  }
  dialogAlert.dismiss();
}","public void onClickPositive(String local_username,String password){
  if (local_username.isEmpty()) {
    Toast.makeText(this,""String_Node_Str"",Toast.LENGTH_LONG).show();
    return;
  }
  if (password.isEmpty()) {
    Toast.makeText(this,""String_Node_Str"",Toast.LENGTH_LONG).show();
    return;
  }
  UserStructure userStructure=new UserStructure();
  userStructure.setUsername(local_username);
  userStructure.setPassword(password);
  if (add_update) {
    saveCredential(userStructure);
  }
 else {
    updateCredentials(userStructure);
  }
  dialogAlert.dismiss();
}",0.8834476003917727
143896,"public void updateCredentials(UserStructure userStructure){
  int i=databaseEngine.updateUser(userStructure,username);
  Boolean flag=false;
  if (i == 1) {
    Log.e(""String_Node_Str"",""String_Node_Str"");
    Toast.makeText(this,""String_Node_Str"",Toast.LENGTH_SHORT).show();
    flag=true;
  }
 else   if (i == 0) {
    Toast.makeText(this,""String_Node_Str"",Toast.LENGTH_SHORT).show();
    Log.e(""String_Node_Str"",""String_Node_Str"");
  }
 else {
    Toast.makeText(this,""String_Node_Str"",Toast.LENGTH_SHORT).show();
    Log.e(""String_Node_Str"",""String_Node_Str"");
    flag=true;
  }
}","public void updateCredentials(UserStructure userStructure){
  int i=databaseEngine.updateUser(userStructure,username);
  if (i == 1) {
    Log.e(""String_Node_Str"",""String_Node_Str"");
    Toast.makeText(this,""String_Node_Str"",Toast.LENGTH_SHORT).show();
  }
 else   if (i == 0) {
    Toast.makeText(this,""String_Node_Str"",Toast.LENGTH_SHORT).show();
    Log.e(""String_Node_Str"",""String_Node_Str"");
  }
 else {
    Toast.makeText(this,""String_Node_Str"",Toast.LENGTH_SHORT).show();
    Log.e(""String_Node_Str"",""String_Node_Str"");
  }
}",0.953405017921147
143897,"public void delete_user(){
  Intent intent=new Intent(this,DeleteUser.class);
  startActivity(intent);
}","public void delete_user(){
  showDeleteDialog(""String_Node_Str"",""String_Node_Str"" + username,""String_Node_Str"",""String_Node_Str"").show();
}",0.419753086419753
143898,"String getPassword(){
  String password=null;
  try {
    database=myDatabaseHelper.getReadableDatabase();
    String[] columns=new String[]{""String_Node_Str"",""String_Node_Str""};
    System.out.println(""String_Node_Str"");
    cursor=database.query(""String_Node_Str"",columns,null,null,null,null,null);
    int indexUsername=cursor.getColumnIndex(""String_Node_Str"");
    cursor.moveToLast();
    password=cursor.getString(1);
    database.close();
  }
 catch (  Exception e) {
    System.out.println(""String_Node_Str"");
    e.printStackTrace();
  }
  return password;
}","String getPassword(){
  String password=null;
  try {
    database=myDatabaseHelper.getReadableDatabase();
    String[] columns=new String[]{dbhelper.USERNAME,dbhelper.PASSWORD};
    cursor=database.query(dbhelper.TABLE,columns,null,null,null,null,null);
    int indexPassword=cursor.getColumnIndex(dbhelper.PASSWORD);
    cursor.moveToLast();
    password=cursor.getString(indexPassword);
    database.close();
  }
 catch (  Exception e) {
    e.printStackTrace();
  }
  return password;
}",0.5070955534531694
143899,"void saveToDatabase(String username,String password){
  try {
    Log.d(""String_Node_Str"",""String_Node_Str"" + username + ""String_Node_Str""+ password+ ""String_Node_Str"");
    database=myDatabaseHelper.getWritableDatabase();
    ContentValues values=new ContentValues();
    if (username != null && password != null) {
      values.put(dbhelper.USERNAME,username);
      values.put(dbhelper.PASSWORD,password);
      database.insert(dbhelper.TABLE,null,values);
      String[] columns=new String[]{""String_Node_Str"",""String_Node_Str""};
      cursor=database.query(""String_Node_Str"",columns,null,null,null,null,null);
      Log.v(""String_Node_Str"",DatabaseUtils.dumpCursorToString(cursor));
      Log.d(""String_Node_Str"",""String_Node_Str"");
      database.close();
    }
  }
 catch (  Exception e) {
    e.printStackTrace();
  }
}","void saveToDatabase(String username,String password){
  try {
    Log.d(""String_Node_Str"",""String_Node_Str"" + username + ""String_Node_Str""+ password+ ""String_Node_Str"");
    database=myDatabaseHelper.getWritableDatabase();
    ContentValues values=new ContentValues();
    if (username != null && password != null) {
      values.put(dbhelper.USERNAME,username);
      values.put(dbhelper.PASSWORD,password);
      database.insert(dbhelper.TABLE,null,values);
      String[] columns=new String[]{dbhelper.USERNAME,dbhelper.PASSWORD};
      cursor=database.query(dbhelper.TABLE,columns,null,null,null,null,null);
      Log.v(""String_Node_Str"",""String_Node_Str"" + DatabaseUtils.dumpCursorToString(cursor));
      Log.d(""String_Node_Str"",""String_Node_Str"");
      database.close();
    }
  }
 catch (  Exception e) {
    e.printStackTrace();
  }
}",0.9275882704967086
143900,"String getUsername(){
  String username=null;
  try {
    database=myDatabaseHelper.getReadableDatabase();
    String[] columns=new String[]{""String_Node_Str"",""String_Node_Str""};
    cursor=database.query(""String_Node_Str"",columns,null,null,null,null,null);
    int indexUsername=cursor.getColumnIndex(""String_Node_Str"");
    cursor.moveToLast();
    username=cursor.getString(0);
    database.close();
  }
 catch (  Exception e) {
    System.out.println(""String_Node_Str"");
    e.printStackTrace();
  }
  return username;
}","String getUsername(){
  String username=null;
  try {
    database=myDatabaseHelper.getReadableDatabase();
    String[] columns=new String[]{dbhelper.USERNAME,dbhelper.PASSWORD};
    cursor=database.query(dbhelper.TABLE,columns,null,null,null,null,null);
    int indexUsername=cursor.getColumnIndex(dbhelper.USERNAME);
    cursor.moveToLast();
    username=cursor.getString(indexUsername);
    database.close();
  }
 catch (  Exception e) {
    e.printStackTrace();
  }
  return username;
}",0.814595660749507
143901,"String getPassword(){
  String password=null;
  try {
    database=DBHELPER.getReadableDatabase();
    String[] columns=new String[]{""String_Node_Str"",""String_Node_Str""};
    System.out.println(""String_Node_Str"");
    cursor=database.query(""String_Node_Str"",columns,null,null,null,null,null);
    int indexUsername=cursor.getColumnIndex(""String_Node_Str"");
    cursor.moveToLast();
    password=cursor.getString(1);
  }
 catch (  Exception e) {
    System.out.println(""String_Node_Str"");
    e.printStackTrace();
  }
  database.close();
  return password;
}","String getPassword(){
  String password=null;
  try {
    database=myDatabaseHelper.getReadableDatabase();
    String[] columns=new String[]{""String_Node_Str"",""String_Node_Str""};
    System.out.println(""String_Node_Str"");
    cursor=database.query(""String_Node_Str"",columns,null,null,null,null,null);
    int indexUsername=cursor.getColumnIndex(""String_Node_Str"");
    cursor.moveToLast();
    password=cursor.getString(1);
    database.close();
  }
 catch (  Exception e) {
    System.out.println(""String_Node_Str"");
    e.printStackTrace();
  }
  return password;
}",0.9448398576512456
143902,"void saveToDatabase(String username,String password){
  try {
    System.out.print(""String_Node_Str"");
    System.out.print(""String_Node_Str"");
    database=DBHELPER.getWritableDatabase();
    ContentValues values=new ContentValues();
    if (username != null && password != null) {
      values.put(dbhelper.USERNAME,username);
      values.put(dbhelper.PASSWORD,password);
      database.insert(dbhelper.TABLE,null,values);
      String[] columns=new String[]{""String_Node_Str"",""String_Node_Str""};
      cursor=database.query(""String_Node_Str"",columns,null,null,null,null,null);
      Log.v(""String_Node_Str"",DatabaseUtils.dumpCursorToString(cursor));
      Log.d(""String_Node_Str"",""String_Node_Str"");
    }
  }
 catch (  Exception e) {
    System.out.println(""String_Node_Str"");
  }
  database.close();
}","void saveToDatabase(String username,String password){
  try {
    Log.d(""String_Node_Str"",""String_Node_Str"" + username + ""String_Node_Str""+ password+ ""String_Node_Str"");
    database=myDatabaseHelper.getWritableDatabase();
    ContentValues values=new ContentValues();
    if (username != null && password != null) {
      values.put(dbhelper.USERNAME,username);
      values.put(dbhelper.PASSWORD,password);
      database.insert(dbhelper.TABLE,null,values);
      String[] columns=new String[]{""String_Node_Str"",""String_Node_Str""};
      cursor=database.query(""String_Node_Str"",columns,null,null,null,null,null);
      Log.v(""String_Node_Str"",DatabaseUtils.dumpCursorToString(cursor));
      Log.d(""String_Node_Str"",""String_Node_Str"");
      database.close();
    }
  }
 catch (  Exception e) {
    e.printStackTrace();
  }
}",0.8017135862913096
143903,"String getUsername(){
  String username=null;
  try {
    database=DBHELPER.getReadableDatabase();
    String[] columns=new String[]{""String_Node_Str"",""String_Node_Str""};
    cursor=database.query(""String_Node_Str"",columns,null,null,null,null,null);
    int indexUsername=cursor.getColumnIndex(""String_Node_Str"");
    cursor.moveToLast();
    username=cursor.getString(0);
  }
 catch (  Exception e) {
    System.out.println(""String_Node_Str"");
    e.printStackTrace();
  }
  database.close();
  return username;
}","String getUsername(){
  String username=null;
  try {
    database=myDatabaseHelper.getReadableDatabase();
    String[] columns=new String[]{""String_Node_Str"",""String_Node_Str""};
    cursor=database.query(""String_Node_Str"",columns,null,null,null,null,null);
    int indexUsername=cursor.getColumnIndex(""String_Node_Str"");
    cursor.moveToLast();
    username=cursor.getString(0);
    database.close();
  }
 catch (  Exception e) {
    System.out.println(""String_Node_Str"");
    e.printStackTrace();
  }
  return username;
}",0.9402697495183044
143904,"String getUsername(){
  String username=null;
  try {
    database=DBHELPER.getReadableDatabase();
    String[] columns=new String[]{""String_Node_Str"",""String_Node_Str""};
    cursor=database.query(""String_Node_Str"",columns,null,null,null,null,null);
    int indexUsername=cursor.getColumnIndex(""String_Node_Str"");
    cursor.moveToFirst();
    username=cursor.getString(indexUsername);
  }
 catch (  Exception e) {
    System.out.println(""String_Node_Str"");
  }
  database.close();
  return username;
}","String getUsername(){
  String username=null;
  try {
    database=DBHELPER.getReadableDatabase();
    String[] columns=new String[]{""String_Node_Str"",""String_Node_Str""};
    cursor=database.query(""String_Node_Str"",columns,null,null,null,null,null);
    int indexUsername=cursor.getColumnIndex(""String_Node_Str"");
    cursor.moveToLast();
    username=cursor.getString(0);
  }
 catch (  Exception e) {
    System.out.println(""String_Node_Str"");
    e.printStackTrace();
  }
  database.close();
  return username;
}",0.9566929133858268
143905,"public void login_runner(String username,String password) throws Exception {
  System.out.println(""String_Node_Str"");
  if (username == null || password == null) {
    Log.wtf(""String_Node_Str"",""String_Node_Str"");
    return;
  }
  String urlParameters=""String_Node_Str"" + username + ""String_Node_Str""+ password;
  String request=""String_Node_Str"";
  URL puServerUrl=new URL(request);
  URLConnection puServerConnection=puServerUrl.openConnection();
  puServerConnection.setDoOutput(true);
  OutputStreamWriter writer=new OutputStreamWriter(puServerConnection.getOutputStream());
  writer.write(urlParameters);
  writer.flush();
  String line;
  BufferedReader reader=new BufferedReader(new InputStreamReader(puServerConnection.getInputStream()));
  while ((line=reader.readLine()) != null) {
    Log.w(""String_Node_Str"",line);
  }
  writer.close();
  reader.close();
}","public void login_runner(String username,String password) throws Exception {
  if (username == null || password == null) {
    Log.wtf(""String_Node_Str"",""String_Node_Str"");
    return;
  }
  System.out.println(""String_Node_Str"" + username + password);
  String urlParameters=""String_Node_Str"" + username + ""String_Node_Str""+ password;
  String request=""String_Node_Str"";
  URL puServerUrl=new URL(request);
  URLConnection puServerConnection=puServerUrl.openConnection();
  puServerConnection.setDoOutput(true);
  OutputStreamWriter writer=new OutputStreamWriter(puServerConnection.getOutputStream());
  writer.write(urlParameters);
  writer.flush();
  String line;
  BufferedReader reader=new BufferedReader(new InputStreamReader(puServerConnection.getInputStream()));
  while ((line=reader.readLine()) != null) {
    Log.w(""String_Node_Str"",line);
  }
  writer.close();
  reader.close();
}",0.9409090909090908
143906,"String getPassword(){
  String password=null;
  try {
    database=DBHELPER.getReadableDatabase();
    String[] columns=new String[]{""String_Node_Str"",""String_Node_Str""};
    cursor=database.query(""String_Node_Str"",columns,null,null,null,null,null);
    int indexUsername=cursor.getColumnIndex(""String_Node_Str"");
    cursor.moveToFirst();
    password=cursor.getString(indexUsername);
  }
 catch (  Exception e) {
    System.out.println(""String_Node_Str"");
  }
  database.close();
  return password;
}","String getPassword(){
  String password=null;
  try {
    database=DBHELPER.getReadableDatabase();
    String[] columns=new String[]{""String_Node_Str"",""String_Node_Str""};
    System.out.println(""String_Node_Str"");
    cursor=database.query(""String_Node_Str"",columns,null,null,null,null,null);
    int indexUsername=cursor.getColumnIndex(""String_Node_Str"");
    cursor.moveToLast();
    password=cursor.getString(1);
  }
 catch (  Exception e) {
    System.out.println(""String_Node_Str"");
    e.printStackTrace();
  }
  database.close();
  return password;
}",0.9178470254957508
143907,"/** 
 * Read all parameters from the applet configuration and do initializations for the plugins and the applet.
 */
public void init(){
  if (debug > 0)   System.err.println(""String_Node_Str"");
  if (pluginLoader == null) {
    try {
      options.load(Applet.class.getResourceAsStream(""String_Node_Str""));
    }
 catch (    Exception e) {
      try {
        URL url=new URL(getCodeBase() + ""String_Node_Str"");
        options.load(url.openStream());
      }
 catch (      Exception e1) {
        System.err.println(""String_Node_Str"");
        System.err.println(""String_Node_Str"");
        System.err.println(""String_Node_Str"" + getCodeBase() + ""String_Node_Str"");
      }
    }
    String value;
    if ((value=getParameter(""String_Node_Str"")) != null) {
      Properties appletParams=new Properties();
      URL url=null;
      try {
        url=new URL(value);
      }
 catch (      Exception e) {
        try {
          url=new URL(getCodeBase() + value);
        }
 catch (        Exception ce) {
          System.err.println(""String_Node_Str"" + ce);
        }
      }
      if (url != null) {
        try {
          appletParams.load(Applet.class.getResourceAsStream(""String_Node_Str"" + value));
          Enumeration ape=appletParams.keys();
          while (ape.hasMoreElements()) {
            String key=(String)ape.nextElement();
            options.put(key,appletParams.getProperty(key));
          }
        }
 catch (        Exception e) {
          try {
            appletParams.load(url.openStream());
            Enumeration ape=appletParams.keys();
            while (ape.hasMoreElements()) {
              String key=(String)ape.nextElement();
              options.put(key,appletParams.getProperty(key));
            }
          }
 catch (          Exception e2) {
            System.err.println(""String_Node_Str"" + e2);
          }
        }
      }
    }
    parameterOverride(options);
    pluginLoader=new Common(options);
    host=options.getProperty(""String_Node_Str"");
    if (host == null)     host=getCodeBase().getHost();
    port=options.getProperty(""String_Node_Str"");
    if (port == null)     port=""String_Node_Str"";
    if ((new Boolean(options.getProperty(""String_Node_Str"")).booleanValue()))     connect=true;
    if (!(new Boolean(options.getProperty(""String_Node_Str"")).booleanValue()))     disconnect=false;
    if (!(new Boolean(options.getProperty(""String_Node_Str"")).booleanValue()))     disconnectCloseWindow=false;
    frameTitle=options.getProperty(""String_Node_Str"");
    if ((new Boolean(options.getProperty(""String_Node_Str""))).booleanValue()) {
      if (frameTitle == null) {
        appletFrame=(RootPaneContainer)new JFrame(""String_Node_Str"" + host + (port.equals(""String_Node_Str"") ? ""String_Node_Str"" : ""String_Node_Str"" + port));
      }
 else {
        appletFrame=(RootPaneContainer)new JFrame(frameTitle);
      }
    }
 else {
      appletFrame=(RootPaneContainer)this;
    }
    appletFrame.getContentPane().setLayout(new BorderLayout());
    Map componentList=pluginLoader.getComponents();
    Iterator names=componentList.keySet().iterator();
    while (names.hasNext()) {
      String name=(String)names.next();
      Component c=(Component)componentList.get(name);
      if ((value=options.getProperty(""String_Node_Str"" + name)) != null) {
        appletFrame.getContentPane().add(value,c);
      }
 else {
        System.err.println(""String_Node_Str"" + name + ""String_Node_Str"");
        System.err.println(""String_Node_Str"" + name + ""String_Node_Str"");
      }
    }
    pluginLoader.registerPluginListener(new SoundListener(){
      public void playSound(      URL audioClip){
        Applet.this.getAudioClip(audioClip).play();
      }
    }
);
    pluginLoader.broadcast(new AppletRequest(this));
    if (appletFrame != this) {
      final String startText=options.getProperty(""String_Node_Str"");
      final String stopText=options.getProperty(""String_Node_Str"");
      final Button close=new Button();
      Vector privileges=Common.split(options.getProperty(""String_Node_Str""),',');
      Class privilegeManager=null;
      Method enable=null;
      try {
        privilegeManager=Class.forName(""String_Node_Str"");
        enable=privilegeManager.getMethod(""String_Node_Str"",new Class[]{String.class});
      }
 catch (      Exception e) {
        System.err.println(""String_Node_Str"");
      }
      if (privilegeManager != null && enable != null && privileges != null)       for (int i=0; i < privileges.size(); i++)       try {
        enable.invoke(privilegeManager,new Object[]{privileges.elementAt(i)});
        System.out.println(""String_Node_Str"" + privileges.elementAt(i) + ""String_Node_Str"");
      }
 catch (      Exception e) {
        System.err.println(""String_Node_Str"" + privileges.elementAt(i) + ""String_Node_Str"");
      }
      try {
        clipboard=appletFrame.getContentPane().getToolkit().getSystemClipboard();
        System.err.println(""String_Node_Str"" + clipboard);
      }
 catch (      Exception e) {
        System.err.println(""String_Node_Str"" + ((e instanceof InvocationTargetException) ? ((InvocationTargetException)e).getTargetException() : e));
      }
 finally {
        if (clipboard == null) {
          System.err.println(""String_Node_Str"");
          clipboard=new Clipboard(""String_Node_Str"");
        }
      }
      if ((new Boolean(options.getProperty(""String_Node_Str"")).booleanValue())) {
        if ((new Boolean(options.getProperty(""String_Node_Str"")).booleanValue()))         ((JFrame)appletFrame).setSize(appletFrame.getContentPane().getToolkit().getScreenSize());
 else         ((JFrame)appletFrame).pack();
        ((JFrame)appletFrame).show();
        pluginLoader.broadcast(new SocketRequest(host,Integer.parseInt(port)));
        pluginLoader.broadcast(new ReturnFocusRequest());
        close.setLabel(startText != null ? stopText : ""String_Node_Str"");
      }
 else       close.setLabel(startText != null ? startText : ""String_Node_Str"");
      close.addActionListener(new ActionListener(){
        public void actionPerformed(        ActionEvent evt){
          if (((JFrame)appletFrame).isVisible()) {
            pluginLoader.broadcast(new SocketRequest());
            ((JFrame)appletFrame).setVisible(false);
            close.setLabel(startText != null ? startText : ""String_Node_Str"");
          }
 else {
            if (frameTitle == null)             ((JFrame)appletFrame).setTitle(""String_Node_Str"" + host + (port.equals(""String_Node_Str"") ? ""String_Node_Str"" : ""String_Node_Str"" + port));
            if ((new Boolean(options.getProperty(""String_Node_Str"")).booleanValue()))             ((JFrame)appletFrame).setSize(appletFrame.getContentPane().getToolkit().getScreenSize());
 else             ((JFrame)appletFrame).pack();
            ((JFrame)appletFrame).show();
            if (port == null || port.length() <= 0)             port=""String_Node_Str"";
            getAppletContext().showStatus(""String_Node_Str"" + host + ""String_Node_Str""+ port+ ""String_Node_Str"");
            pluginLoader.broadcast(new SocketRequest(host,Integer.parseInt(port)));
            pluginLoader.broadcast(new ReturnFocusRequest());
            close.setLabel(stopText != null ? stopText : ""String_Node_Str"");
          }
        }
      }
);
      getContentPane().setLayout(new BorderLayout());
      getContentPane().add(""String_Node_Str"",close);
      MenuBar mb=new MenuBar();
      Menu file=new Menu(""String_Node_Str"");
      file.setShortcut(new MenuShortcut(KeyEvent.VK_F,true));
      MenuItem tmp;
      file.add(tmp=new MenuItem(""String_Node_Str""));
      tmp.addActionListener(new ActionListener(){
        public void actionPerformed(        ActionEvent evt){
          pluginLoader.broadcast(new SocketRequest(host,Integer.parseInt(port)));
        }
      }
);
      file.add(tmp=new MenuItem(""String_Node_Str""));
      tmp.addActionListener(new ActionListener(){
        public void actionPerformed(        ActionEvent evt){
          pluginLoader.broadcast(new SocketRequest());
        }
      }
);
      file.add(new MenuItem(""String_Node_Str""));
      file.add(tmp=new MenuItem(""String_Node_Str""));
      tmp.addActionListener(new ActionListener(){
        public void actionPerformed(        ActionEvent evt){
          if (pluginLoader.getComponents().get(""String_Node_Str"") != null) {
            PrintJob printJob=appletFrame.getContentPane().getToolkit().getPrintJob((JFrame)appletFrame,""String_Node_Str"",null);
            ((Component)pluginLoader.getComponents().get(""String_Node_Str"")).print(printJob.getGraphics());
            printJob.end();
          }
        }
      }
);
      file.add(new MenuItem(""String_Node_Str""));
      file.add(tmp=new MenuItem(""String_Node_Str""));
      tmp.addActionListener(new ActionListener(){
        public void actionPerformed(        ActionEvent evt){
          ((JFrame)appletFrame).setVisible(false);
          pluginLoader.broadcast(new SocketRequest());
          close.setLabel(startText != null ? startText : ""String_Node_Str"");
        }
      }
);
      mb.add(file);
      Menu edit=new Menu(""String_Node_Str"");
      edit.setShortcut(new MenuShortcut(KeyEvent.VK_E,true));
      edit.add(tmp=new MenuItem(""String_Node_Str""));
      tmp.addActionListener(new ActionListener(){
        public void actionPerformed(        ActionEvent evt){
          if (debug > 2)           System.err.println(""String_Node_Str"" + focussedPlugin);
          if (focussedPlugin instanceof VisualTransferPlugin)           ((VisualTransferPlugin)focussedPlugin).copy(clipboard);
        }
      }
);
      edit.add(tmp=new MenuItem(""String_Node_Str""));
      tmp.addActionListener(new ActionListener(){
        public void actionPerformed(        ActionEvent evt){
          if (debug > 2)           System.err.println(""String_Node_Str"" + focussedPlugin);
          if (focussedPlugin instanceof VisualTransferPlugin)           ((VisualTransferPlugin)focussedPlugin).paste(clipboard);
        }
      }
);
      mb.add(edit);
      Map menuList=pluginLoader.getMenus();
      names=menuList.keySet().iterator();
      while (names.hasNext()) {
        String name=(String)names.next();
        Object o=menuList.get(name);
        if (o instanceof Menu)         mb.add((Menu)o);
      }
      Menu help=new Menu(""String_Node_Str"");
      help.setShortcut(new MenuShortcut(KeyEvent.VK_HELP,true));
      help.add(tmp=new MenuItem(""String_Node_Str""));
      tmp.addActionListener(new ActionListener(){
        public void actionPerformed(        ActionEvent e){
          Help.show(appletFrame.getContentPane(),options.getProperty(""String_Node_Str""));
        }
      }
);
      mb.setHelpMenu(help);
      if ((new Boolean(options.getProperty(""String_Node_Str"")).booleanValue()))       ((JFrame)appletFrame).setMenuBar(mb);
      try {
        ((JFrame)appletFrame).addWindowListener(new WindowAdapter(){
          public void windowClosing(          WindowEvent evt){
            pluginLoader.broadcast(new SocketRequest());
            ((JFrame)appletFrame).setVisible(false);
            close.setLabel(startText != null ? startText : ""String_Node_Str"");
          }
        }
);
      }
 catch (      Exception e) {
        System.err.println(""String_Node_Str"");
        System.err.println(""String_Node_Str"");
      }
      pluginLoader.registerPluginListener(new OnlineStatusListener(){
        public void online(){
          if (debug > 0)           System.err.println(""String_Node_Str"");
          online=true;
          if (((JFrame)appletFrame).isVisible() == false)           ((JFrame)appletFrame).setVisible(true);
        }
        public void offline(){
          if (debug > 0)           System.err.println(""String_Node_Str"");
          online=false;
          if (disconnectCloseWindow) {
            ((JFrame)appletFrame).setVisible(false);
            close.setLabel(startText != null ? startText : ""String_Node_Str"");
          }
        }
      }
);
      pluginLoader.registerPluginListener(new FocusStatusListener(){
        public void pluginGainedFocus(        Plugin plugin){
          if (Applet.debug > 0)           System.err.println(""String_Node_Str"" + plugin + ""String_Node_Str"");
          focussedPlugin=plugin;
        }
        public void pluginLostFocus(        Plugin plugin){
          if (Applet.debug > 0)           System.err.println(""String_Node_Str"" + plugin + ""String_Node_Str"");
        }
      }
);
    }
 else     pluginLoader.registerPluginListener(new OnlineStatusListener(){
      public void online(){
        if (debug > 0)         System.err.println(""String_Node_Str"");
        online=true;
      }
      public void offline(){
        if (debug > 0)         System.err.println(""String_Node_Str"");
        online=false;
      }
    }
);
  }
}","/** 
 * Read all parameters from the applet configuration and do initializations for the plugins and the applet.
 */
public void init(){
  if (debug > 0)   System.err.println(""String_Node_Str"");
  if (pluginLoader == null) {
    try {
      options.load(Applet.class.getResourceAsStream(""String_Node_Str""));
    }
 catch (    Exception e) {
      try {
        URL url=new URL(getCodeBase() + ""String_Node_Str"");
        options.load(url.openStream());
      }
 catch (      Exception e1) {
        System.err.println(""String_Node_Str"");
        System.err.println(""String_Node_Str"");
        System.err.println(""String_Node_Str"" + getCodeBase() + ""String_Node_Str"");
      }
    }
    String value;
    if ((value=getParameter(""String_Node_Str"")) != null) {
      Properties appletParams=new Properties();
      URL url=null;
      try {
        url=new URL(value);
      }
 catch (      Exception e) {
        try {
          url=new URL(getCodeBase() + value);
        }
 catch (        Exception ce) {
          System.err.println(""String_Node_Str"" + ce);
        }
      }
      if (url != null) {
        try {
          appletParams.load(Applet.class.getResourceAsStream(""String_Node_Str"" + value));
          Enumeration ape=appletParams.keys();
          while (ape.hasMoreElements()) {
            String key=(String)ape.nextElement();
            options.put(key,appletParams.getProperty(key));
          }
        }
 catch (        Exception e) {
          try {
            appletParams.load(url.openStream());
            Enumeration ape=appletParams.keys();
            while (ape.hasMoreElements()) {
              String key=(String)ape.nextElement();
              options.put(key,appletParams.getProperty(key));
            }
          }
 catch (          Exception e2) {
            System.err.println(""String_Node_Str"" + e2);
          }
        }
      }
    }
    parameterOverride(options);
    pluginLoader=new Common(options);
    host=options.getProperty(""String_Node_Str"");
    if (host == null)     host=getCodeBase().getHost();
    port=options.getProperty(""String_Node_Str"");
    if (port == null)     port=""String_Node_Str"";
    if ((new Boolean(options.getProperty(""String_Node_Str"")).booleanValue()))     connect=true;
    if (!(new Boolean(options.getProperty(""String_Node_Str"")).booleanValue()))     disconnect=false;
    if (!(new Boolean(options.getProperty(""String_Node_Str"")).booleanValue()))     disconnectCloseWindow=false;
    frameTitle=options.getProperty(""String_Node_Str"");
    if ((new Boolean(options.getProperty(""String_Node_Str""))).booleanValue()) {
      if (frameTitle == null) {
        appletFrame=(RootPaneContainer)new JFrame(""String_Node_Str"" + host + (port.equals(""String_Node_Str"") ? ""String_Node_Str"" : ""String_Node_Str"" + port));
      }
 else {
        appletFrame=(RootPaneContainer)new JFrame(frameTitle);
      }
    }
 else {
      appletFrame=(RootPaneContainer)this;
    }
    appletFrame.getContentPane().setLayout(new BorderLayout());
    Map componentList=pluginLoader.getComponents();
    Iterator names=componentList.keySet().iterator();
    while (names.hasNext()) {
      String name=(String)names.next();
      Component c=(Component)componentList.get(name);
      if ((value=options.getProperty(""String_Node_Str"" + name)) != null) {
        appletFrame.getContentPane().add(value,c);
      }
 else {
        System.err.println(""String_Node_Str"" + name + ""String_Node_Str"");
        System.err.println(""String_Node_Str"" + name + ""String_Node_Str"");
      }
    }
    pluginLoader.registerPluginListener(new SoundListener(){
      public void playSound(      URL audioClip){
        Applet.this.getAudioClip(audioClip).play();
      }
    }
);
    pluginLoader.broadcast(new AppletRequest(this));
    if (appletFrame != this) {
      final String startText=options.getProperty(""String_Node_Str"");
      final String stopText=options.getProperty(""String_Node_Str"");
      final Button close=new Button();
      Vector privileges=Common.split(options.getProperty(""String_Node_Str""),',');
      Class privilegeManager=null;
      Method enable=null;
      try {
        privilegeManager=Class.forName(""String_Node_Str"");
        enable=privilegeManager.getMethod(""String_Node_Str"",new Class[]{String.class});
      }
 catch (      Exception e) {
        System.err.println(""String_Node_Str"");
      }
      if (privilegeManager != null && enable != null && privileges != null)       for (int i=0; i < privileges.size(); i++)       try {
        enable.invoke(privilegeManager,new Object[]{privileges.elementAt(i)});
        System.out.println(""String_Node_Str"" + privileges.elementAt(i) + ""String_Node_Str"");
      }
 catch (      Exception e) {
        System.err.println(""String_Node_Str"" + privileges.elementAt(i) + ""String_Node_Str"");
      }
      try {
        clipboard=appletFrame.getContentPane().getToolkit().getSystemClipboard();
        System.err.println(""String_Node_Str"" + clipboard);
      }
 catch (      Exception e) {
        System.err.println(""String_Node_Str"" + ((e instanceof InvocationTargetException) ? ((InvocationTargetException)e).getTargetException() : e));
      }
 finally {
        if (clipboard == null) {
          System.err.println(""String_Node_Str"");
          clipboard=new Clipboard(""String_Node_Str"");
        }
      }
      if ((new Boolean(options.getProperty(""String_Node_Str"")).booleanValue())) {
        if ((new Boolean(options.getProperty(""String_Node_Str"")).booleanValue()))         ((JFrame)appletFrame).setSize(appletFrame.getContentPane().getToolkit().getScreenSize());
 else         ((JFrame)appletFrame).pack();
        ((JFrame)appletFrame).show();
        pluginLoader.broadcast(new SocketRequest(host,Integer.parseInt(port)));
        pluginLoader.broadcast(new ReturnFocusRequest());
        close.setLabel(startText != null ? stopText : ""String_Node_Str"");
      }
 else       close.setLabel(startText != null ? startText : ""String_Node_Str"");
      close.addActionListener(new ActionListener(){
        public void actionPerformed(        ActionEvent evt){
          if (((JFrame)appletFrame).isVisible()) {
            pluginLoader.broadcast(new SocketRequest());
            ((JFrame)appletFrame).setVisible(false);
            close.setLabel(startText != null ? startText : ""String_Node_Str"");
          }
 else {
            if (frameTitle == null)             ((JFrame)appletFrame).setTitle(""String_Node_Str"" + host + (port.equals(""String_Node_Str"") ? ""String_Node_Str"" : ""String_Node_Str"" + port));
            if ((new Boolean(options.getProperty(""String_Node_Str"")).booleanValue()))             ((JFrame)appletFrame).setSize(appletFrame.getContentPane().getToolkit().getScreenSize());
 else             ((JFrame)appletFrame).pack();
            ((JFrame)appletFrame).show();
            if (port == null || port.length() <= 0)             port=""String_Node_Str"";
            getAppletContext().showStatus(""String_Node_Str"" + host + ""String_Node_Str""+ port+ ""String_Node_Str"");
            pluginLoader.broadcast(new SocketRequest(host,Integer.parseInt(port)));
            pluginLoader.broadcast(new ReturnFocusRequest());
            close.setLabel(stopText != null ? stopText : ""String_Node_Str"");
          }
        }
      }
);
      getContentPane().setLayout(new BorderLayout());
      getContentPane().add(""String_Node_Str"",close);
      JMenuBar mb=new JMenuBar();
      JMenu file=new JMenu(""String_Node_Str"");
      file.setAccelerator(KeyStroke.getKeyStroke(KeyEvent.VK_F,0));
      JMenuItem tmp;
      file.add(tmp=new JMenuItem(""String_Node_Str""));
      tmp.addActionListener(new ActionListener(){
        public void actionPerformed(        ActionEvent evt){
          pluginLoader.broadcast(new SocketRequest(host,Integer.parseInt(port)));
        }
      }
);
      file.add(tmp=new JMenuItem(""String_Node_Str""));
      tmp.addActionListener(new ActionListener(){
        public void actionPerformed(        ActionEvent evt){
          pluginLoader.broadcast(new SocketRequest());
        }
      }
);
      file.add(new JMenuItem(""String_Node_Str""));
      file.add(tmp=new JMenuItem(""String_Node_Str""));
      tmp.addActionListener(new ActionListener(){
        public void actionPerformed(        ActionEvent evt){
          if (pluginLoader.getComponents().get(""String_Node_Str"") != null) {
            PrintJob printJob=appletFrame.getContentPane().getToolkit().getPrintJob((JFrame)appletFrame,""String_Node_Str"",null);
            ((Component)pluginLoader.getComponents().get(""String_Node_Str"")).print(printJob.getGraphics());
            printJob.end();
          }
        }
      }
);
      file.add(new JMenuItem(""String_Node_Str""));
      file.add(tmp=new JMenuItem(""String_Node_Str""));
      tmp.addActionListener(new ActionListener(){
        public void actionPerformed(        ActionEvent evt){
          ((JFrame)appletFrame).setVisible(false);
          pluginLoader.broadcast(new SocketRequest());
          close.setLabel(startText != null ? startText : ""String_Node_Str"");
        }
      }
);
      mb.add(file);
      JMenu edit=new JMenu(""String_Node_Str"");
      edit.setAccelerator(KeyStroke.getKeyStroke(KeyEvent.VK_E,0));
      edit.add(tmp=new JMenuItem(""String_Node_Str""));
      tmp.addActionListener(new ActionListener(){
        public void actionPerformed(        ActionEvent evt){
          if (debug > 2)           System.err.println(""String_Node_Str"" + focussedPlugin);
          if (focussedPlugin instanceof VisualTransferPlugin)           ((VisualTransferPlugin)focussedPlugin).copy(clipboard);
        }
      }
);
      edit.add(tmp=new JMenuItem(""String_Node_Str""));
      tmp.addActionListener(new ActionListener(){
        public void actionPerformed(        ActionEvent evt){
          if (debug > 2)           System.err.println(""String_Node_Str"" + focussedPlugin);
          if (focussedPlugin instanceof VisualTransferPlugin)           ((VisualTransferPlugin)focussedPlugin).paste(clipboard);
        }
      }
);
      mb.add(edit);
      Map menuList=pluginLoader.getMenus();
      names=menuList.keySet().iterator();
      while (names.hasNext()) {
        String name=(String)names.next();
        Object o=menuList.get(name);
        if (o instanceof JMenu)         mb.add((JMenu)o);
      }
      JMenu help=new JMenu(""String_Node_Str"");
      help.setAccelerator(KeyStroke.getKeyStroke(KeyEvent.VK_HELP,0));
      help.add(tmp=new JMenuItem(""String_Node_Str""));
      tmp.addActionListener(new ActionListener(){
        public void actionPerformed(        ActionEvent e){
          Help.show(appletFrame.getContentPane(),options.getProperty(""String_Node_Str""));
        }
      }
);
      mb.setHelpMenu(help);
      if ((new Boolean(options.getProperty(""String_Node_Str"")).booleanValue()))       ((JFrame)appletFrame).setJMenuBar(mb);
      try {
        ((JFrame)appletFrame).addWindowListener(new WindowAdapter(){
          public void windowClosing(          WindowEvent evt){
            pluginLoader.broadcast(new SocketRequest());
            ((JFrame)appletFrame).setVisible(false);
            close.setLabel(startText != null ? startText : ""String_Node_Str"");
          }
        }
);
      }
 catch (      Exception e) {
        System.err.println(""String_Node_Str"");
        System.err.println(""String_Node_Str"");
      }
      pluginLoader.registerPluginListener(new OnlineStatusListener(){
        public void online(){
          if (debug > 0)           System.err.println(""String_Node_Str"");
          online=true;
          if (((JFrame)appletFrame).isVisible() == false)           ((JFrame)appletFrame).setVisible(true);
        }
        public void offline(){
          if (debug > 0)           System.err.println(""String_Node_Str"");
          online=false;
          if (disconnectCloseWindow) {
            ((JFrame)appletFrame).setVisible(false);
            close.setLabel(startText != null ? startText : ""String_Node_Str"");
          }
        }
      }
);
      pluginLoader.registerPluginListener(new FocusStatusListener(){
        public void pluginGainedFocus(        Plugin plugin){
          if (Applet.debug > 0)           System.err.println(""String_Node_Str"" + plugin + ""String_Node_Str"");
          focussedPlugin=plugin;
        }
        public void pluginLostFocus(        Plugin plugin){
          if (Applet.debug > 0)           System.err.println(""String_Node_Str"" + plugin + ""String_Node_Str"");
        }
      }
);
    }
 else     pluginLoader.registerPluginListener(new OnlineStatusListener(){
      public void online(){
        if (debug > 0)         System.err.println(""String_Node_Str"");
        online=true;
      }
      public void offline(){
        if (debug > 0)         System.err.println(""String_Node_Str"");
        online=false;
      }
    }
);
  }
}",0.9908995039643792
143908,"/** 
 * Handle telnet protocol negotiation. The buffer will be parsed and necessary actions are taken according to the telnet protocol. See <A HREF=""RFC-Telnet-URL"">RFC-Telnet</A>
 * @param nbuf the byte buffer put out after negotiation
 * @return number of bytes processed, 0 for none, and -1 for end of buffer.
 */
public int negotiate(byte nbuf[]) throws IOException {
  byte sbbuf[]=new byte[tempbuf.length];
  int count=tempbuf.length;
  byte[] buf=tempbuf;
  byte sendbuf[]=new byte[3];
  byte b, reply;
  int sbcount=0;
  int boffset=0, noffset=0;
  boolean dobreak=false;
  if (count == 0)   return -1;
  while (!dobreak && (boffset < count) && (noffset < nbuf.length)) {
    b=buf[boffset++];
    if (b >= 128)     b=(byte)((int)b - 256);
    if (debug > 2) {
      Byte B=new Byte(b);
      System.err.print(""String_Node_Str"" + B.intValue() + ""String_Node_Str"");
    }
switch (neg_state) {
case STATE_DATA:
      if (b == IAC) {
        neg_state=STATE_IAC;
        dobreak=true;
      }
 else       nbuf[noffset++]=b;
    break;
case STATE_IAC:
switch (b) {
case IAC:
    if (debug > 2)     System.err.print(""String_Node_Str"");
  neg_state=STATE_DATA;
nbuf[noffset++]=IAC;
break;
case WILL:
if (debug > 2) System.err.print(""String_Node_Str"");
neg_state=STATE_IACWILL;
break;
case WONT:
if (debug > 2) System.err.print(""String_Node_Str"");
neg_state=STATE_IACWONT;
break;
case DONT:
if (debug > 2) System.err.print(""String_Node_Str"");
neg_state=STATE_IACDONT;
break;
case DO:
if (debug > 2) System.err.print(""String_Node_Str"");
neg_state=STATE_IACDO;
break;
case EOR:
if (debug > 1) System.err.print(""String_Node_Str"");
notifyEndOfRecord();
dobreak=true;
neg_state=STATE_DATA;
break;
case SB:
if (debug > 2) System.err.print(""String_Node_Str"");
neg_state=STATE_IACSB;
sbcount=0;
break;
default :
if (debug > 2) System.err.print(""String_Node_Str"" + b + ""String_Node_Str"");
neg_state=STATE_DATA;
break;
}
break;
case STATE_IACWILL:
switch (b) {
case TELOPT_ECHO:
if (debug > 2) System.err.println(""String_Node_Str"");
reply=DO;
setLocalEcho(false);
break;
case TELOPT_SGA:
if (debug > 2) System.err.println(""String_Node_Str"");
reply=DO;
break;
case TELOPT_EOR:
if (debug > 2) System.err.println(""String_Node_Str"");
reply=DO;
break;
case TELOPT_BINARY:
if (debug > 2) System.err.println(""String_Node_Str"");
reply=DO;
break;
default :
if (debug > 2) System.err.println(""String_Node_Str"" + b + ""String_Node_Str"");
reply=DONT;
break;
}
if (debug > 1) System.err.println(""String_Node_Str"" + b + ""String_Node_Str""+ WILL+ ""String_Node_Str"");
if (reply != sentDX[b + 128] || WILL != receivedWX[b + 128]) {
sendbuf[0]=IAC;
sendbuf[1]=reply;
sendbuf[2]=b;
write(sendbuf);
sentDX[b + 128]=reply;
receivedWX[b + 128]=WILL;
}
neg_state=STATE_DATA;
break;
case STATE_IACWONT:
switch (b) {
case TELOPT_ECHO:
if (debug > 2) System.err.println(""String_Node_Str"");
setLocalEcho(true);
reply=DONT;
break;
case TELOPT_SGA:
if (debug > 2) System.err.println(""String_Node_Str"");
reply=DONT;
break;
case TELOPT_EOR:
if (debug > 2) System.err.println(""String_Node_Str"");
reply=DONT;
break;
case TELOPT_BINARY:
if (debug > 2) System.err.println(""String_Node_Str"");
reply=DONT;
break;
default :
if (debug > 2) System.err.println(""String_Node_Str"" + b + ""String_Node_Str"");
reply=DONT;
break;
}
if (reply != sentDX[b + 128] || WONT != receivedWX[b + 128]) {
sendbuf[0]=IAC;
sendbuf[1]=reply;
sendbuf[2]=b;
write(sendbuf);
sentDX[b + 128]=reply;
receivedWX[b + 128]=WILL;
}
neg_state=STATE_DATA;
break;
case STATE_IACDO:
switch (b) {
case TELOPT_ECHO:
if (debug > 2) System.err.println(""String_Node_Str"");
reply=WILL;
setLocalEcho(true);
break;
case TELOPT_SGA:
if (debug > 2) System.err.println(""String_Node_Str"");
reply=WILL;
break;
case TELOPT_TTYPE:
if (debug > 2) System.err.println(""String_Node_Str"");
reply=WILL;
break;
case TELOPT_BINARY:
if (debug > 2) System.err.println(""String_Node_Str"");
reply=WILL;
break;
case TELOPT_NAWS:
if (debug > 2) System.err.println(""String_Node_Str"");
Dimension size=getWindowSize();
receivedDX[b]=DO;
if (size == null) {
write(IAC);
write(WONT);
write(TELOPT_NAWS);
reply=WONT;
sentWX[b]=WONT;
break;
}
reply=WILL;
sentWX[b]=WILL;
sendbuf[0]=IAC;
sendbuf[1]=WILL;
sendbuf[2]=TELOPT_NAWS;
write(sendbuf);
write(IAC);
write(SB);
write(TELOPT_NAWS);
write((byte)(size.width >> 8));
write((byte)(size.width & 0xff));
write((byte)(size.height >> 8));
write((byte)(size.height & 0xff));
write(IAC);
write(SE);
break;
default :
if (debug > 2) System.err.println(""String_Node_Str"" + b + ""String_Node_Str"");
reply=WONT;
break;
}
if (reply != sentWX[128 + b] || DO != receivedDX[128 + b]) {
sendbuf[0]=IAC;
sendbuf[1]=reply;
sendbuf[2]=b;
write(sendbuf);
sentWX[b + 128]=reply;
receivedDX[b + 128]=DO;
}
neg_state=STATE_DATA;
break;
case STATE_IACDONT:
switch (b) {
case TELOPT_ECHO:
if (debug > 2) System.err.println(""String_Node_Str"");
reply=WONT;
setLocalEcho(false);
break;
case TELOPT_SGA:
if (debug > 2) System.err.println(""String_Node_Str"");
reply=WONT;
break;
case TELOPT_NAWS:
if (debug > 2) System.err.println(""String_Node_Str"");
reply=WONT;
break;
case TELOPT_BINARY:
if (debug > 2) System.err.println(""String_Node_Str"");
reply=WONT;
break;
default :
if (debug > 2) System.err.println(""String_Node_Str"" + b + ""String_Node_Str"");
reply=WONT;
break;
}
if (reply != sentWX[b + 128] || DONT != receivedDX[b + 128]) {
write(IAC);
write(reply);
write(b);
sentWX[b + 128]=reply;
receivedDX[b + 128]=DONT;
}
neg_state=STATE_DATA;
break;
case STATE_IACSBIAC:
if (debug > 2) System.err.println(""String_Node_Str"" + b + ""String_Node_Str"");
if (b == IAC) {
sbcount=0;
current_sb=b;
neg_state=STATE_IACSBDATA;
}
 else {
System.err.println(""String_Node_Str"" + b + ""String_Node_Str"");
neg_state=STATE_DATA;
}
break;
case STATE_IACSB:
if (debug > 2) System.err.println(""String_Node_Str"" + b + ""String_Node_Str"");
switch (b) {
case IAC:
neg_state=STATE_IACSBIAC;
break;
default :
current_sb=b;
sbcount=0;
neg_state=STATE_IACSBDATA;
break;
}
break;
case STATE_IACSBDATA:
if (debug > 2) System.err.println(""String_Node_Str"" + b + ""String_Node_Str"");
switch (b) {
case IAC:
neg_state=STATE_IACSBDATAIAC;
break;
default :
sbbuf[sbcount++]=b;
break;
}
break;
case STATE_IACSBDATAIAC:
if (debug > 2) System.err.println(""String_Node_Str"" + b + ""String_Node_Str"");
switch (b) {
case IAC:
neg_state=STATE_IACSBDATA;
sbbuf[sbcount++]=IAC;
break;
case SE:
handle_sb(current_sb,sbbuf,sbcount);
current_sb=0;
neg_state=STATE_DATA;
break;
case SB:
handle_sb(current_sb,sbbuf,sbcount);
neg_state=STATE_IACSB;
break;
default :
neg_state=STATE_DATA;
break;
}
break;
default :
if (debug > 1) System.err.println(""String_Node_Str"" + neg_state + ""String_Node_Str"");
neg_state=STATE_DATA;
break;
}
}
byte[] xb=new byte[count - boffset];
System.arraycopy(tempbuf,boffset,xb,0,count - boffset);
tempbuf=xb;
return noffset;
}","/** 
 * Handle telnet protocol negotiation. The buffer will be parsed and necessary actions are taken according to the telnet protocol. See <A HREF=""RFC-Telnet-URL"">RFC-Telnet</A>
 * @param nbuf the byte buffer put out after negotiation
 * @return number of bytes processed, 0 for none, and -1 for end of buffer.
 */
public int negotiate(byte nbuf[]) throws IOException {
  int count=tempbuf.length;
  byte[] buf=tempbuf;
  byte sendbuf[]=new byte[3];
  byte b, reply;
  int boffset=0, noffset=0;
  boolean dobreak=false;
  if (count == 0)   return -1;
  while (!dobreak && (boffset < count) && (noffset < nbuf.length)) {
    b=buf[boffset++];
    if (b >= 128)     b=(byte)((int)b - 256);
    if (debug > 2) {
      Byte B=new Byte(b);
      System.err.print(""String_Node_Str"" + B.intValue() + ""String_Node_Str"");
    }
switch (neg_state) {
case STATE_DATA:
      if (b == IAC) {
        neg_state=STATE_IAC;
        dobreak=true;
      }
 else       nbuf[noffset++]=b;
    break;
case STATE_IAC:
switch (b) {
case IAC:
    if (debug > 2)     System.err.print(""String_Node_Str"");
  neg_state=STATE_DATA;
nbuf[noffset++]=IAC;
break;
case WILL:
if (debug > 2) System.err.print(""String_Node_Str"");
neg_state=STATE_IACWILL;
break;
case WONT:
if (debug > 2) System.err.print(""String_Node_Str"");
neg_state=STATE_IACWONT;
break;
case DONT:
if (debug > 2) System.err.print(""String_Node_Str"");
neg_state=STATE_IACDONT;
break;
case DO:
if (debug > 2) System.err.print(""String_Node_Str"");
neg_state=STATE_IACDO;
break;
case EOR:
if (debug > 1) System.err.print(""String_Node_Str"");
notifyEndOfRecord();
dobreak=true;
neg_state=STATE_DATA;
break;
case SB:
if (debug > 2) System.err.print(""String_Node_Str"");
neg_state=STATE_IACSB;
break;
default :
if (debug > 2) System.err.print(""String_Node_Str"" + b + ""String_Node_Str"");
neg_state=STATE_DATA;
break;
}
break;
case STATE_IACWILL:
switch (b) {
case TELOPT_ECHO:
if (debug > 2) System.err.println(""String_Node_Str"");
reply=DO;
setLocalEcho(false);
break;
case TELOPT_SGA:
if (debug > 2) System.err.println(""String_Node_Str"");
reply=DO;
break;
case TELOPT_EOR:
if (debug > 2) System.err.println(""String_Node_Str"");
reply=DO;
break;
case TELOPT_BINARY:
if (debug > 2) System.err.println(""String_Node_Str"");
reply=DO;
break;
default :
if (debug > 2) System.err.println(""String_Node_Str"" + b + ""String_Node_Str"");
reply=DONT;
break;
}
if (debug > 1) System.err.println(""String_Node_Str"" + b + ""String_Node_Str""+ WILL+ ""String_Node_Str"");
if (reply != sentDX[b + 128] || WILL != receivedWX[b + 128]) {
sendbuf[0]=IAC;
sendbuf[1]=reply;
sendbuf[2]=b;
write(sendbuf);
sentDX[b + 128]=reply;
receivedWX[b + 128]=WILL;
}
neg_state=STATE_DATA;
break;
case STATE_IACWONT:
switch (b) {
case TELOPT_ECHO:
if (debug > 2) System.err.println(""String_Node_Str"");
setLocalEcho(true);
reply=DONT;
break;
case TELOPT_SGA:
if (debug > 2) System.err.println(""String_Node_Str"");
reply=DONT;
break;
case TELOPT_EOR:
if (debug > 2) System.err.println(""String_Node_Str"");
reply=DONT;
break;
case TELOPT_BINARY:
if (debug > 2) System.err.println(""String_Node_Str"");
reply=DONT;
break;
default :
if (debug > 2) System.err.println(""String_Node_Str"" + b + ""String_Node_Str"");
reply=DONT;
break;
}
if (reply != sentDX[b + 128] || WONT != receivedWX[b + 128]) {
sendbuf[0]=IAC;
sendbuf[1]=reply;
sendbuf[2]=b;
write(sendbuf);
sentDX[b + 128]=reply;
receivedWX[b + 128]=WILL;
}
neg_state=STATE_DATA;
break;
case STATE_IACDO:
switch (b) {
case TELOPT_ECHO:
if (debug > 2) System.err.println(""String_Node_Str"");
reply=WILL;
setLocalEcho(true);
break;
case TELOPT_SGA:
if (debug > 2) System.err.println(""String_Node_Str"");
reply=WILL;
break;
case TELOPT_TTYPE:
if (debug > 2) System.err.println(""String_Node_Str"");
reply=WILL;
break;
case TELOPT_BINARY:
if (debug > 2) System.err.println(""String_Node_Str"");
reply=WILL;
break;
case TELOPT_NAWS:
if (debug > 2) System.err.println(""String_Node_Str"");
Dimension size=getWindowSize();
receivedDX[b]=DO;
if (size == null) {
write(IAC);
write(WONT);
write(TELOPT_NAWS);
reply=WONT;
sentWX[b]=WONT;
break;
}
reply=WILL;
sentWX[b]=WILL;
sendbuf[0]=IAC;
sendbuf[1]=WILL;
sendbuf[2]=TELOPT_NAWS;
write(sendbuf);
write(IAC);
write(SB);
write(TELOPT_NAWS);
write((byte)(size.width >> 8));
write((byte)(size.width & 0xff));
write((byte)(size.height >> 8));
write((byte)(size.height & 0xff));
write(IAC);
write(SE);
break;
default :
if (debug > 2) System.err.println(""String_Node_Str"" + b + ""String_Node_Str"");
reply=WONT;
break;
}
if (reply != sentWX[128 + b] || DO != receivedDX[128 + b]) {
sendbuf[0]=IAC;
sendbuf[1]=reply;
sendbuf[2]=b;
write(sendbuf);
sentWX[b + 128]=reply;
receivedDX[b + 128]=DO;
}
neg_state=STATE_DATA;
break;
case STATE_IACDONT:
switch (b) {
case TELOPT_ECHO:
if (debug > 2) System.err.println(""String_Node_Str"");
reply=WONT;
setLocalEcho(false);
break;
case TELOPT_SGA:
if (debug > 2) System.err.println(""String_Node_Str"");
reply=WONT;
break;
case TELOPT_NAWS:
if (debug > 2) System.err.println(""String_Node_Str"");
reply=WONT;
break;
case TELOPT_BINARY:
if (debug > 2) System.err.println(""String_Node_Str"");
reply=WONT;
break;
default :
if (debug > 2) System.err.println(""String_Node_Str"" + b + ""String_Node_Str"");
reply=WONT;
break;
}
if (reply != sentWX[b + 128] || DONT != receivedDX[b + 128]) {
write(IAC);
write(reply);
write(b);
sentWX[b + 128]=reply;
receivedDX[b + 128]=DONT;
}
neg_state=STATE_DATA;
break;
case STATE_IACSBIAC:
if (debug > 2) System.err.println(""String_Node_Str"" + b + ""String_Node_Str"");
if (b == IAC) {
sbbuf=new byte[0];
current_sb=b;
neg_state=STATE_IACSBDATA;
}
 else {
System.err.println(""String_Node_Str"" + b + ""String_Node_Str"");
neg_state=STATE_DATA;
}
break;
case STATE_IACSB:
if (debug > 2) System.err.println(""String_Node_Str"" + b + ""String_Node_Str"");
switch (b) {
case IAC:
neg_state=STATE_IACSBIAC;
break;
default :
current_sb=b;
sbbuf=new byte[0];
neg_state=STATE_IACSBDATA;
break;
}
break;
case STATE_IACSBDATA:
if (debug > 2) System.err.println(""String_Node_Str"" + b + ""String_Node_Str"");
switch (b) {
case IAC:
neg_state=STATE_IACSBDATAIAC;
break;
default :
byte[] xsb=new byte[sbbuf.length + 1];
System.arraycopy(sbbuf,0,xsb,0,sbbuf.length);
sbbuf=xsb;
sbbuf[sbbuf.length - 1]=b;
break;
}
break;
case STATE_IACSBDATAIAC:
if (debug > 2) System.err.println(""String_Node_Str"" + b + ""String_Node_Str"");
switch (b) {
case IAC:
neg_state=STATE_IACSBDATA;
byte[] xsb=new byte[sbbuf.length + 1];
System.arraycopy(sbbuf,0,xsb,0,sbbuf.length);
sbbuf=xsb;
sbbuf[sbbuf.length - 1]=IAC;
break;
case SE:
handle_sb(current_sb,sbbuf);
current_sb=0;
neg_state=STATE_DATA;
break;
case SB:
handle_sb(current_sb,sbbuf);
neg_state=STATE_IACSB;
break;
default :
neg_state=STATE_DATA;
break;
}
break;
default :
if (debug > 1) System.err.println(""String_Node_Str"" + neg_state + ""String_Node_Str"");
neg_state=STATE_DATA;
break;
}
}
byte[] xb=new byte[count - boffset];
System.arraycopy(tempbuf,boffset,xb,0,count - boffset);
tempbuf=xb;
return noffset;
}",0.8865439196565025
143909,"/** 
 * Handle an incoming IAC SB &lt;type&gt; &lt;bytes&gt; IAC SE
 * @param type type of SB
 * @param sbata byte array as &lt;bytes&gt;
 * @param sbcount nr of bytes. may be 0 too.
 */
private void handle_sb(byte type,byte[] sbdata,int sbcount) throws IOException {
  if (debug > 1)   System.err.println(""String_Node_Str"" + type + ""String_Node_Str"");
switch (type) {
case TELOPT_TTYPE:
    if (sbcount > 0 && sbdata[0] == TELQUAL_SEND) {
      write(IACSB);
      write(TELOPT_TTYPE);
      write(TELQUAL_IS);
      String ttype=getTerminalType();
      if (ttype == null)       ttype=""String_Node_Str"";
      write(ttype.getBytes());
      write(IACSE);
    }
}
}","/** 
 * Handle an incoming IAC SB &lt;type&gt; &lt;bytes&gt; IAC SE
 * @param type type of SB
 * @param sbata byte array as &lt;bytes&gt;
 */
private void handle_sb(byte type,byte[] sbdata) throws IOException {
  if (debug > 1)   System.err.println(""String_Node_Str"" + type + ""String_Node_Str"");
switch (type) {
case TELOPT_TTYPE:
    if (sbdata.length > 0 && sbdata[0] == TELQUAL_SEND) {
      write(IACSB);
      write(TELOPT_TTYPE);
      write(TELQUAL_IS);
      String ttype=getTerminalType();
      if (ttype == null)       ttype=""String_Node_Str"";
      write(ttype.getBytes());
      write(IACSE);
    }
}
}",0.9430132708821234
143910,"private void putChar(char c,boolean doshowcursor){
  int rows=getRows();
  int columns=getColumns();
  int tm=getTopMargin();
  int bm=getBottomMargin();
  boolean mapped=false;
  if (debug > 4)   System.out.println(""String_Node_Str"" + c + ""String_Node_Str""+ ((int)c)+ ""String_Node_Str""+ R+ ""String_Node_Str""+ C+ ""String_Node_Str""+ columns+ ""String_Node_Str""+ rows);
  markLine(R,1);
  if (c > 255) {
    if (debug > 0)     System.out.println(""String_Node_Str"" + (int)c);
  }
switch (term_state) {
case TSTATE_DATA:
    if (!useibmcharset) {
      boolean doneflag=true;
switch (c) {
case OSC:
        osc=""String_Node_Str"";
      term_state=TSTATE_OSC;
    break;
case RI:
  if (R > tm)   R--;
 else   insertLine(R,1,SCROLL_DOWN);
if (debug > 1) System.out.println(""String_Node_Str"");
break;
case IND:
if (debug > 2) System.out.println(""String_Node_Str"" + R + ""String_Node_Str""+ tm+ ""String_Node_Str""+ bm);
if (R == bm || R == rows - 1) insertLine(R,1,SCROLL_UP);
 else R++;
if (debug > 1) System.out.println(""String_Node_Str"" + R + ""String_Node_Str"");
break;
case NEL:
if (R == bm || R == rows - 1) insertLine(R,1,SCROLL_UP);
 else R++;
C=0;
if (debug > 1) System.out.println(""String_Node_Str"" + R + ""String_Node_Str"");
break;
case HTS:
Tabs[C]=1;
if (debug > 1) System.out.println(""String_Node_Str"");
break;
case DCS:
dcs=""String_Node_Str"";
term_state=TSTATE_DCS;
break;
default :
doneflag=false;
break;
}
if (doneflag) break;
}
switch (c) {
case SS3:
onegl=3;
break;
case SS2:
onegl=2;
break;
case CSI:
DCEvar=0;
DCEvars[0]=0;
DCEvars[1]=0;
DCEvars[2]=0;
DCEvars[3]=0;
term_state=TSTATE_CSI;
break;
case ESC:
term_state=TSTATE_ESC;
lastwaslf=0;
break;
case 5:
write(answerBack,false);
break;
case 12:
deleteArea(0,0,columns,rows,attributes);
C=R=0;
break;
case '\b':
C--;
if (C < 0) C=0;
lastwaslf=0;
break;
case '\t':
do {
C++;
}
 while (C < columns && (Tabs[C] == 0));
lastwaslf=0;
break;
case '\r':
C=0;
break;
case '\n':
if (debug > 3) System.out.println(""String_Node_Str"" + R + ""String_Node_Str""+ bm+ ""String_Node_Str""+ tm+ ""String_Node_Str""+ rows);
if (!vms) {
if (lastwaslf != 0 && lastwaslf != c) break;
lastwaslf=c;
}
if (R == bm || R >= rows - 1) insertLine(R,1,SCROLL_UP);
 else R++;
break;
case 7:
beep();
break;
case '\016':
gl=1;
usedcharsets=true;
break;
case '\017':
gl=0;
usedcharsets=true;
break;
default :
{
int thisgl=gl;
if (onegl >= 0) {
thisgl=onegl;
onegl=-1;
}
lastwaslf=0;
if (c < 32) {
if (c != 0) if (debug > 0) System.out.println(""String_Node_Str"" + ((int)c));
if (c == 0) break;
}
if (C >= columns) {
if (wraparound) {
if (R < rows - 1) R++;
 else insertLine(R,1,SCROLL_UP);
C=0;
}
 else {
C=columns - 1;
}
}
if (usedcharsets) {
if (c >= '\u0020' && c <= '\u007f') {
switch (gx[thisgl]) {
case '0':
if (terminalID.equals(""String_Node_Str"") || terminalID.equals(""String_Node_Str"")) {
for (int i=0; i < scoansi_acs.length(); i+=2) {
if (c == scoansi_acs.charAt(i)) {
c=scoansi_acs.charAt(i + 1);
break;
}
}
}
if (c >= '\u005f' && c <= '\u007e') {
c=DECSPECIAL[(short)c - 0x5f];
mapped=true;
}
break;
case '<':
c=(char)(((int)c & 0x7f) | 0x80);
mapped=true;
break;
case 'A':
case 'B':
mapped=true;
break;
default :
System.out.println(""String_Node_Str"" + gx[thisgl]);
break;
}
}
if (!mapped && (c >= '\u0080' && c <= '\u00ff')) {
switch (gx[gr]) {
case '0':
if (c >= '\u00df' && c <= '\u00fe') {
c=DECSPECIAL[c - '\u00df'];
mapped=true;
}
break;
case '<':
case 'A':
case 'B':
mapped=true;
break;
default :
System.out.println(""String_Node_Str"" + gx[gr]);
break;
}
}
}
if (!mapped && useibmcharset) c=map_cp850_unicode(c);
if (insertmode == 1) {
insertChar(C,R,c,attributes);
}
 else {
putChar(C,R,c,attributes);
}
C++;
break;
}
}
break;
case TSTATE_OSC:
if ((c < 0x20) && (c != ESC)) {
handle_osc(osc);
term_state=TSTATE_DATA;
break;
}
if (c == '\\' && osc.charAt(osc.length() - 1) == ESC) {
handle_osc(osc);
term_state=TSTATE_DATA;
break;
}
osc=osc + c;
break;
case TSTATE_ESCSPACE:
term_state=TSTATE_DATA;
switch (c) {
case 'F':
output8bit=false;
break;
case 'G':
output8bit=true;
break;
default :
System.out.println(""String_Node_Str"" + c + ""String_Node_Str"");
}
break;
case TSTATE_ESC:
term_state=TSTATE_DATA;
switch (c) {
case ' ':
term_state=TSTATE_ESCSPACE;
break;
case '#':
term_state=TSTATE_ESCSQUARE;
break;
case 'c':
gx[0]='B';
gx[1]='0';
gx[2]='B';
gx[3]='B';
gl=0;
gr=1;
int nw=getColumns();
if (nw < 132) nw=132;
Tabs=new byte[nw];
for (int i=0; i < nw; i+=8) {
Tabs[i]=1;
}
break;
case '[':
DCEvar=0;
DCEvars[0]=0;
DCEvars[1]=0;
DCEvars[2]=0;
DCEvars[3]=0;
term_state=TSTATE_CSI;
break;
case ']':
osc=""String_Node_Str"";
term_state=TSTATE_OSC;
break;
case 'P':
dcs=""String_Node_Str"";
term_state=TSTATE_DCS;
break;
case 'A':
R--;
if (R < 0) R=0;
break;
case 'B':
R++;
if (R > rows - 1) R=rows - 1;
break;
case 'C':
C++;
if (C >= columns) C=columns - 1;
break;
case 'I':
insertLine(R,1,SCROLL_DOWN);
break;
case 'E':
if (R == bm || R == rows - 1) insertLine(R,1,SCROLL_UP);
 else R++;
C=0;
if (debug > 1) System.out.println(""String_Node_Str"" + R + ""String_Node_Str"");
break;
case 'D':
if (R == bm || R == rows - 1) insertLine(R,1,SCROLL_UP);
 else R++;
if (debug > 1) System.out.println(""String_Node_Str"" + R + ""String_Node_Str"");
break;
case 'J':
if (R < rows - 1) deleteArea(0,R + 1,columns,rows - R - 1,attributes);
if (C < columns - 1) deleteArea(C,R,columns - C,1,attributes);
break;
case 'K':
if (C < columns - 1) deleteArea(C,R,columns - C,1,attributes);
break;
case 'M':
if (R > bm) break;
if (R > tm) {
R--;
}
 else {
insertLine(R,1,SCROLL_DOWN);
}
if (debug > 2) System.out.println(""String_Node_Str"");
break;
case 'H':
if (debug > 1) System.out.println(""String_Node_Str"" + C);
if (C >= columns) C=columns - 1;
Tabs[C]=1;
break;
case 'N':
onegl=2;
break;
case 'O':
onegl=3;
break;
case '=':
if (debug > 0) System.out.println(""String_Node_Str"");
keypadmode=true;
break;
case '<':
vt52mode=false;
break;
case '>':
if (debug > 0) System.out.println(""String_Node_Str"");
keypadmode=false;
break;
case '7':
Sc=C;
Sr=R;
Sgl=gl;
Sgr=gr;
Sa=attributes;
Sgx=new char[4];
for (int i=0; i < 4; i++) Sgx[i]=gx[i];
Stm=getTopMargin();
Sbm=getBottomMargin();
if (debug > 1) System.out.println(""String_Node_Str"");
break;
case '8':
C=Sc;
R=Sr;
gl=Sgl;
gr=Sgr;
for (int i=0; i < 4; i++) gx[i]=Sgx[i];
setTopMargin(Stm);
setBottomMargin(Sbm);
attributes=Sa;
if (debug > 1) System.out.println(""String_Node_Str"");
break;
case '(':
term_state=TSTATE_SETG0;
usedcharsets=true;
break;
case ')':
term_state=TSTATE_SETG1;
usedcharsets=true;
break;
case '*':
term_state=TSTATE_SETG2;
usedcharsets=true;
break;
case '+':
term_state=TSTATE_SETG3;
usedcharsets=true;
break;
case '~':
gr=1;
usedcharsets=true;
break;
case 'n':
gl=2;
usedcharsets=true;
break;
case '}':
gr=2;
usedcharsets=true;
break;
case 'o':
gl=3;
usedcharsets=true;
break;
case '|':
gr=3;
usedcharsets=true;
break;
case 'Y':
term_state=TSTATE_VT52Y;
break;
default :
System.out.println(""String_Node_Str"" + c + ""String_Node_Str""+ ((int)c)+ ""String_Node_Str"");
break;
}
break;
case TSTATE_VT52X:
C=c - 37;
term_state=TSTATE_VT52Y;
break;
case TSTATE_VT52Y:
R=c - 37;
term_state=TSTATE_DATA;
break;
case TSTATE_SETG0:
if (c != '0' && c != 'A' && c != 'B' && c != '<') System.out.println(""String_Node_Str"" + c + ""String_Node_Str""+ ((int)c)+ ""String_Node_Str"");
 else {
if (debug > 2) System.out.println(""String_Node_Str"" + c + ""String_Node_Str""+ ((int)c)+ ""String_Node_Str"");
gx[0]=c;
}
term_state=TSTATE_DATA;
break;
case TSTATE_SETG1:
if (c != '0' && c != 'A' && c != 'B' && c != '<') {
System.out.println(""String_Node_Str"" + c + ""String_Node_Str""+ ((int)c)+ ""String_Node_Str"");
}
 else {
if (debug > 2) System.out.println(""String_Node_Str"" + c + ""String_Node_Str""+ ((int)c)+ ""String_Node_Str"");
gx[1]=c;
}
term_state=TSTATE_DATA;
break;
case TSTATE_SETG2:
if (c != '0' && c != 'A' && c != 'B' && c != '<') System.out.println(""String_Node_Str"" + ((int)c) + ""String_Node_Str"");
 else {
if (debug > 2) System.out.println(""String_Node_Str"" + c + ""String_Node_Str""+ ((int)c)+ ""String_Node_Str"");
gx[2]=c;
}
term_state=TSTATE_DATA;
break;
case TSTATE_SETG3:
if (c != '0' && c != 'A' && c != 'B' && c != '<') System.out.println(""String_Node_Str"" + ((int)c) + ""String_Node_Str"");
 else {
if (debug > 2) System.out.println(""String_Node_Str"" + c + ""String_Node_Str""+ ((int)c)+ ""String_Node_Str"");
gx[3]=c;
}
term_state=TSTATE_DATA;
break;
case TSTATE_ESCSQUARE:
switch (c) {
case '8':
for (int i=0; i < columns; i++) for (int j=0; j < rows; j++) putChar(i,j,'E',0);
break;
default :
System.out.println(""String_Node_Str"" + c + ""String_Node_Str"");
break;
}
term_state=TSTATE_DATA;
break;
case TSTATE_DCS:
if (c == '\\' && dcs.charAt(dcs.length() - 1) == ESC) {
handle_dcs(dcs);
term_state=TSTATE_DATA;
break;
}
dcs=dcs + c;
break;
case TSTATE_DCEQ:
term_state=TSTATE_DATA;
switch (c) {
case '0':
case '1':
case '2':
case '3':
case '4':
case '5':
case '6':
case '7':
case '8':
case '9':
DCEvars[DCEvar]=DCEvars[DCEvar] * 10 + ((int)c) - 48;
term_state=TSTATE_DCEQ;
break;
case ';':
DCEvar++;
DCEvars[DCEvar]=0;
term_state=TSTATE_DCEQ;
break;
case 's':
if (true || debug > 1) System.out.println(""String_Node_Str"" + DCEvars[0] + ""String_Node_Str"");
break;
case 'r':
if (true || debug > 1) System.out.println(""String_Node_Str"" + DCEvars[0] + ""String_Node_Str"");
for (int i=0; i <= DCEvar; i++) {
switch (DCEvars[i]) {
case 3:
setScreenSize(80,getRows());
break;
case 4:
break;
case 5:
break;
case 6:
moveoutsidemargins=true;
break;
case 7:
wraparound=false;
break;
case 12:
break;
case 9:
case 1000:
case 1001:
case 1002:
case 1003:
mouserpt=DCEvars[i];
break;
default :
System.out.println(""String_Node_Str"" + DCEvars[0] + ""String_Node_Str"");
}
}
break;
case 'h':
if (debug > 0) System.out.println(""String_Node_Str"" + DCEvars[0] + ""String_Node_Str"");
for (int i=0; i <= DCEvar; i++) {
switch (DCEvars[i]) {
case 1:
KeyUp[0]=""String_Node_Str"";
KeyDown[0]=""String_Node_Str"";
KeyRight[0]=""String_Node_Str"";
KeyLeft[0]=""String_Node_Str"";
break;
case 2:
vt52mode=false;
break;
case 3:
setScreenSize(132,getRows());
break;
case 6:
moveoutsidemargins=false;
break;
case 7:
wraparound=true;
break;
case 25:
showCursor(true);
break;
case 9:
case 1000:
case 1001:
case 1002:
case 1003:
mouserpt=DCEvars[i];
break;
default :
System.out.println(""String_Node_Str"" + DCEvars[0] + ""String_Node_Str"");
break;
}
}
break;
case 'i':
switch (DCEvars[0]) {
case 1:
if (debug > 1) System.out.println(""String_Node_Str"");
break;
case 4:
if (debug > 1) System.out.println(""String_Node_Str"");
break;
case 5:
if (debug > 1) System.out.println(""String_Node_Str"");
break;
}
break;
case 'l':
if (debug > 0) System.out.println(""String_Node_Str"" + DCEvars[0] + ""String_Node_Str"");
for (int i=0; i <= DCEvar; i++) {
switch (DCEvars[i]) {
case 1:
KeyUp[0]=""String_Node_Str"";
KeyDown[0]=""String_Node_Str"";
KeyRight[0]=""String_Node_Str"";
KeyLeft[0]=""String_Node_Str"";
break;
case 2:
vt52mode=true;
break;
case 3:
setScreenSize(80,getRows());
break;
case 6:
moveoutsidemargins=true;
break;
case 7:
wraparound=false;
break;
case 25:
showCursor(false);
break;
case 9:
case 1000:
case 1001:
case 1002:
case 1003:
mouserpt=0;
break;
default :
System.out.println(""String_Node_Str"" + DCEvars[0] + ""String_Node_Str"");
break;
}
}
break;
case 'n':
if (debug > 0) System.out.println(""String_Node_Str"" + DCEvars[0] + ""String_Node_Str"");
switch (DCEvars[0]) {
case 15:
write(((char)ESC) + ""String_Node_Str"",false);
System.out.println(""String_Node_Str"");
break;
default :
System.out.println(""String_Node_Str"" + DCEvars[0] + ""String_Node_Str"");
break;
}
break;
default :
System.out.println(""String_Node_Str"" + DCEvars[0] + ""String_Node_Str""+ c+ ""String_Node_Str"");
break;
}
break;
case TSTATE_CSI_EX:
term_state=TSTATE_DATA;
switch (c) {
case ESC:
term_state=TSTATE_ESC;
break;
default :
System.out.println(""String_Node_Str"" + (int)c);
break;
}
break;
case TSTATE_CSI_TICKS:
term_state=TSTATE_DATA;
switch (c) {
case 'p':
System.out.println(""String_Node_Str"" + DCEvars[0] + ""String_Node_Str""+ DCEvars[1]);
if (DCEvars[0] == 61) {
output8bit=false;
break;
}
if (DCEvars[1] == 1) {
output8bit=false;
}
 else {
output8bit=true;
}
break;
default :
System.out.println(""String_Node_Str"" + c);
break;
}
break;
case TSTATE_CSI_EQUAL:
term_state=TSTATE_DATA;
switch (c) {
case '0':
case '1':
case '2':
case '3':
case '4':
case '5':
case '6':
case '7':
case '8':
case '9':
DCEvars[DCEvar]=DCEvars[DCEvar] * 10 + ((int)c) - 48;
term_state=TSTATE_CSI_EQUAL;
break;
case ';':
DCEvar++;
DCEvars[DCEvar]=0;
term_state=TSTATE_CSI_EQUAL;
break;
case 'F':
{
int newcolor;
attributes&=~COLOR_FG;
newcolor=((DCEvars[0] & 1) << 2) | (DCEvars[0] & 2) | ((DCEvars[0] & 4) >> 2);
attributes|=newcolor << COLOR_FG_SHIFT;
break;
}
case 'G':
{
int newcolor;
attributes&=~COLOR_BG;
newcolor=((DCEvars[0] & 1) << 2) | (DCEvars[0] & 2) | ((DCEvars[0] & 4) >> 2);
attributes|=newcolor << COLOR_BG_SHIFT;
break;
}
default :
System.out.print(""String_Node_Str"");
for (int i=0; i < DCEvar; i++) System.out.print(DCEvars[i] + ""String_Node_Str"");
System.out.println(""String_Node_Str"" + c);
break;
}
break;
case TSTATE_CSI_DOLLAR:
term_state=TSTATE_DATA;
switch (c) {
case '}':
System.out.println(""String_Node_Str"" + DCEvars[0]);
statusmode=DCEvars[0];
break;
case '~':
System.out.println(""String_Node_Str"" + DCEvars[0]);
break;
default :
System.out.println(""String_Node_Str"" + c + ""String_Node_Str""+ DCEvars[0]);
break;
}
break;
case TSTATE_CSI:
term_state=TSTATE_DATA;
switch (c) {
case '""':
term_state=TSTATE_CSI_TICKS;
break;
case '$':
term_state=TSTATE_CSI_DOLLAR;
break;
case '=':
term_state=TSTATE_CSI_EQUAL;
break;
case '!':
term_state=TSTATE_CSI_EX;
break;
case '?':
DCEvar=0;
DCEvars[0]=0;
term_state=TSTATE_DCEQ;
break;
case '0':
case '1':
case '2':
case '3':
case '4':
case '5':
case '6':
case '7':
case '8':
case '9':
DCEvars[DCEvar]=DCEvars[DCEvar] * 10 + ((int)c) - 48;
term_state=TSTATE_CSI;
break;
case ';':
DCEvar++;
DCEvars[DCEvar]=0;
term_state=TSTATE_CSI;
break;
case 'c':
String subcode=""String_Node_Str"";
if (terminalID.equals(""String_Node_Str"")) subcode=""String_Node_Str"";
if (terminalID.equals(""String_Node_Str"")) subcode=""String_Node_Str"";
if (terminalID.equals(""String_Node_Str"")) subcode=""String_Node_Str"";
write(((char)ESC) + ""String_Node_Str"" + subcode+ ""String_Node_Str"",false);
if (debug > 1) System.out.println(""String_Node_Str"" + DCEvars[0] + ""String_Node_Str"");
break;
case 'q':
if (debug > 1) System.out.println(""String_Node_Str"" + DCEvars[0] + ""String_Node_Str"");
break;
case 'g':
switch (DCEvars[0]) {
case 3:
Tabs=new byte[getColumns()];
break;
case 0:
Tabs[C]=0;
break;
}
if (debug > 1) System.out.println(""String_Node_Str"" + DCEvars[0] + ""String_Node_Str"");
break;
case 'h':
switch (DCEvars[0]) {
case 4:
insertmode=1;
break;
case 20:
System.out.println(""String_Node_Str"");
sendcrlf=true;
break;
default :
System.out.println(""String_Node_Str"" + DCEvars[0] + ""String_Node_Str"");
break;
}
if (debug > 1) System.out.println(""String_Node_Str"" + DCEvars[0] + ""String_Node_Str"");
break;
case 'i':
switch (DCEvars[0]) {
case 0:
if (debug > 1) System.out.println(""String_Node_Str"");
break;
case 4:
if (debug > 1) System.out.println(""String_Node_Str"");
break;
case 5:
if (debug > 1) System.out.println(""String_Node_Str"");
break;
default :
System.out.println(""String_Node_Str"" + DCEvars[0] + ""String_Node_Str"");
}
break;
case 'l':
switch (DCEvars[0]) {
case 4:
insertmode=0;
break;
case 20:
System.out.println(""String_Node_Str"");
sendcrlf=false;
break;
default :
System.out.println(""String_Node_Str"" + DCEvars[0] + ""String_Node_Str"");
break;
}
break;
case 'A':
{
int limit;
if (R > bm) limit=bm + 1;
 else if (R >= tm) {
limit=tm;
}
 else limit=0;
if (DCEvars[0] == 0) R--;
 else R-=DCEvars[0];
if (R < limit) R=limit;
if (debug > 1) System.out.println(""String_Node_Str"" + DCEvars[0] + ""String_Node_Str"");
break;
}
case 'B':
{
int limit;
if (R < tm) limit=tm - 1;
 else if (R <= bm) {
limit=bm;
}
 else limit=rows - 1;
if (DCEvars[0] == 0) R++;
 else R+=DCEvars[0];
if (R > limit) R=limit;
 else {
if (debug > 2) System.out.println(""String_Node_Str"");
}
if (debug > 2) System.out.println(""String_Node_Str"" + R);
if (debug > 1) System.out.println(""String_Node_Str"" + DCEvars[0] + ""String_Node_Str""+ C+ ""String_Node_Str"");
break;
}
case 'C':
if (DCEvars[0] == 0) C++;
 else C+=DCEvars[0];
if (C > columns - 1) C=columns - 1;
if (debug > 1) System.out.println(""String_Node_Str"" + DCEvars[0] + ""String_Node_Str"");
break;
case 'd':
R=DCEvars[0];
if (debug > 1) System.out.println(""String_Node_Str"" + DCEvars[0] + ""String_Node_Str"");
break;
case 'D':
if (DCEvars[0] == 0) C--;
 else C-=DCEvars[0];
if (C < 0) C=0;
if (debug > 1) System.out.println(""String_Node_Str"" + DCEvars[0] + ""String_Node_Str"");
break;
case 'r':
if (DCEvar > 0) {
R=DCEvars[1] - 1;
if (R < 0) R=rows - 1;
 else if (R >= rows) {
R=rows - 1;
}
}
 else R=rows - 1;
setBottomMargin(R);
if (R >= DCEvars[0]) {
R=DCEvars[0] - 1;
if (R < 0) R=0;
}
setTopMargin(R);
_SetCursor(0,0);
if (debug > 1) System.out.println(""String_Node_Str"" + DCEvars[0] + ""String_Node_Str""+ DCEvars[1]+ ""String_Node_Str"");
break;
case 'G':
C=DCEvars[0];
if (debug > 1) System.out.println(""String_Node_Str"" + DCEvars[0] + ""String_Node_Str"");
break;
case 'H':
_SetCursor(DCEvars[0] - 1,DCEvars[1] - 1);
if (debug > 2) {
System.out.println(""String_Node_Str"" + DCEvars[0] + ""String_Node_Str""+ DCEvars[1]+ ""String_Node_Str""+ moveoutsidemargins);
System.out.println(""String_Node_Str"" + R + ""String_Node_Str""+ C);
}
break;
case 'f':
R=DCEvars[0] - 1;
C=DCEvars[1] - 1;
if (C < 0) C=0;
if (R < 0) R=0;
if (debug > 2) System.out.println(""String_Node_Str"" + DCEvars[0] + ""String_Node_Str""+ DCEvars[1]+ ""String_Node_Str"");
break;
case 'S':
if (DCEvars[0] == 0) insertLine(rows - 1,SCROLL_UP);
 else insertLine(rows - 1,DCEvars[0],SCROLL_UP);
break;
case 'L':
if (DCEvars[0] == 0) insertLine(R,SCROLL_DOWN);
 else insertLine(R,DCEvars[0],SCROLL_DOWN);
if (debug > 1) System.out.println(""String_Node_Str"" + DCEvars[0] + ""String_Node_Str""+ (c)+ ""String_Node_Str""+ R+ ""String_Node_Str"");
break;
case 'T':
if (DCEvars[0] == 0) insertLine(0,SCROLL_DOWN);
 else insertLine(0,DCEvars[0],SCROLL_DOWN);
break;
case 'M':
if (debug > 1) System.out.println(""String_Node_Str"" + DCEvars[0] + ""String_Node_Str""+ (c)+ ""String_Node_Str""+ R);
if (DCEvars[0] == 0) deleteLine(R);
 else for (int i=0; i < DCEvars[0]; i++) deleteLine(R);
break;
case 'K':
if (debug > 1) System.out.println(""String_Node_Str"" + DCEvars[0] + ""String_Node_Str"");
switch (DCEvars[0]) {
case 6:
case 0:
if (C < columns - 1) deleteArea(C,R,columns - C,1,attributes);
break;
case 1:
if (C > 0) deleteArea(0,R,C + 1,1,attributes);
break;
case 2:
deleteArea(0,R,columns,1,attributes);
break;
}
break;
case 'J':
switch (DCEvars[0]) {
case 0:
if (R < rows - 1) deleteArea(0,R + 1,columns,rows - R - 1,attributes);
if (C < columns - 1) deleteArea(C,R,columns - C,1,attributes);
break;
case 1:
if (R > 0) deleteArea(0,0,columns,R,attributes);
if (C > 0) deleteArea(0,R,C + 1,1,attributes);
break;
case 2:
deleteArea(0,0,columns,rows,attributes);
break;
}
if (debug > 1) System.out.println(""String_Node_Str"" + DCEvars[0] + ""String_Node_Str"");
break;
case '@':
if (debug > 1) System.out.println(""String_Node_Str"" + DCEvars[0] + ""String_Node_Str"");
for (int i=0; i < DCEvars[0]; i++) insertChar(C,R,' ',attributes);
break;
case 'X':
{
int toerase=DCEvars[0];
if (debug > 1) System.out.println(""String_Node_Str"" + DCEvars[0] + ""String_Node_Str""+ C+ ""String_Node_Str""+ R);
if (toerase == 0) toerase=1;
if (toerase + C > columns) toerase=columns - C;
deleteArea(C,R,toerase,1,attributes);
break;
}
case 'P':
if (debug > 1) System.out.println(""String_Node_Str"" + DCEvars[0] + ""String_Node_Str""+ C+ ""String_Node_Str""+ R);
if (DCEvars[0] == 0) DCEvars[0]=1;
for (int i=0; i < DCEvars[0]; i++) deleteChar(C,R);
break;
case 'n':
switch (DCEvars[0]) {
case 5:
writeSpecial(((char)ESC) + ""String_Node_Str"");
if (debug > 1) System.out.println(""String_Node_Str"");
break;
case 6:
writeSpecial(((char)ESC) + ""String_Node_Str"" + R+ ""String_Node_Str""+ C+ ""String_Node_Str"");
if (debug > 1) System.out.println(""String_Node_Str"");
break;
default :
if (debug > 0) System.out.println(""String_Node_Str"" + DCEvars[0] + ""String_Node_Str"");
break;
}
break;
case 's':
Sc=C;
Sr=R;
Sa=attributes;
if (debug > 3) System.out.println(""String_Node_Str"");
break;
case 'u':
C=Sc;
R=Sr;
attributes=Sa;
if (debug > 3) System.out.println(""String_Node_Str"");
break;
case 'm':
if (debug > 3) System.out.print(""String_Node_Str"");
if (DCEvar == 0 && DCEvars[0] == 0) attributes=0;
for (int i=0; i <= DCEvar; i++) {
switch (DCEvars[i]) {
case 0:
if (DCEvar > 0) {
if (terminalID.equals(""String_Node_Str"")) {
attributes&=COLOR;
}
 else {
attributes=0;
}
}
break;
case 1:
attributes|=BOLD;
attributes&=~LOW;
break;
case 2:
if (terminalID.equals(""String_Node_Str"") && ((DCEvar - i) >= 2)) {
int ncolor;
attributes&=~(COLOR | BOLD);
ncolor=DCEvars[i + 1];
if ((ncolor & 8) == 8) attributes|=BOLD;
ncolor=((ncolor & 1) << 2) | (ncolor & 2) | ((ncolor & 4) >> 2);
attributes|=((ncolor) + 1) << COLOR_FG_SHIFT;
ncolor=DCEvars[i + 2];
ncolor=((ncolor & 1) << 2) | (ncolor & 2) | ((ncolor & 4) >> 2);
attributes|=((ncolor) + 1) << COLOR_BG_SHIFT;
i+=2;
}
 else {
attributes|=LOW;
}
break;
case 4:
attributes|=UNDERLINE;
break;
case 7:
attributes|=INVERT;
break;
case 8:
attributes|=INVISIBLE;
break;
case 5:
break;
case 10:
gl=0;
usedcharsets=true;
break;
case 11:
case 12:
gl=1;
usedcharsets=true;
break;
case 21:
attributes&=~(LOW | BOLD);
break;
case 25:
break;
case 27:
attributes&=~INVERT;
break;
case 28:
attributes&=~INVISIBLE;
break;
case 24:
attributes&=~UNDERLINE;
break;
case 22:
attributes&=~BOLD;
break;
case 30:
case 31:
case 32:
case 33:
case 34:
case 35:
case 36:
case 37:
attributes&=~COLOR_FG;
attributes|=((DCEvars[i] - 30) + 1) << COLOR_FG_SHIFT;
break;
case 39:
attributes&=~COLOR_FG;
break;
case 40:
case 41:
case 42:
case 43:
case 44:
case 45:
case 46:
case 47:
attributes&=~COLOR_BG;
attributes|=((DCEvars[i] - 40) + 1) << COLOR_BG_SHIFT;
break;
case 49:
attributes&=~COLOR_BG;
break;
default :
System.out.println(""String_Node_Str"" + DCEvars[i] + ""String_Node_Str"");
break;
}
if (debug > 3) System.out.print(""String_Node_Str"" + DCEvars[i] + ""String_Node_Str"");
}
if (debug > 3) System.out.print(""String_Node_Str"" + attributes + ""String_Node_Str"");
break;
default :
System.out.println(""String_Node_Str"" + c + ""String_Node_Str""+ ((int)c)+ ""String_Node_Str"");
break;
}
break;
default :
term_state=TSTATE_DATA;
break;
}
if (C > columns) C=columns;
if (R > rows) R=rows;
if (C < 0) C=0;
if (R < 0) R=0;
if (doshowcursor) setCursorPosition(C,R);
markLine(R,1);
}","private void putChar(char c,boolean doshowcursor){
  int rows=getRows();
  int columns=getColumns();
  int tm=getTopMargin();
  int bm=getBottomMargin();
  boolean mapped=false;
  if (debug > 4)   System.out.println(""String_Node_Str"" + c + ""String_Node_Str""+ ((int)c)+ ""String_Node_Str""+ R+ ""String_Node_Str""+ C+ ""String_Node_Str""+ columns+ ""String_Node_Str""+ rows);
  markLine(R,1);
  if (c > 255) {
    if (debug > 0)     System.out.println(""String_Node_Str"" + (int)c);
  }
switch (term_state) {
case TSTATE_DATA:
    if (!useibmcharset) {
      boolean doneflag=true;
switch (c) {
case OSC:
        osc=""String_Node_Str"";
      term_state=TSTATE_OSC;
    break;
case RI:
  if (R > tm)   R--;
 else   insertLine(R,1,SCROLL_DOWN);
if (debug > 1) System.out.println(""String_Node_Str"");
break;
case IND:
if (debug > 2) System.out.println(""String_Node_Str"" + R + ""String_Node_Str""+ tm+ ""String_Node_Str""+ bm);
if (R == bm || R == rows - 1) insertLine(R,1,SCROLL_UP);
 else R++;
if (debug > 1) System.out.println(""String_Node_Str"" + R + ""String_Node_Str"");
break;
case NEL:
if (R == bm || R == rows - 1) insertLine(R,1,SCROLL_UP);
 else R++;
C=0;
if (debug > 1) System.out.println(""String_Node_Str"" + R + ""String_Node_Str"");
break;
case HTS:
Tabs[C]=1;
if (debug > 1) System.out.println(""String_Node_Str"");
break;
case DCS:
dcs=""String_Node_Str"";
term_state=TSTATE_DCS;
break;
default :
doneflag=false;
break;
}
if (doneflag) break;
}
switch (c) {
case SS3:
onegl=3;
break;
case SS2:
onegl=2;
break;
case CSI:
DCEvar=0;
DCEvars[0]=0;
DCEvars[1]=0;
DCEvars[2]=0;
DCEvars[3]=0;
term_state=TSTATE_CSI;
break;
case ESC:
term_state=TSTATE_ESC;
lastwaslf=0;
break;
case 5:
write(answerBack,false);
break;
case 12:
deleteArea(0,0,columns,rows,attributes);
C=R=0;
break;
case '\b':
C--;
if (C < 0) C=0;
lastwaslf=0;
break;
case '\t':
do {
C++;
}
 while (C < columns && (Tabs[C] == 0));
lastwaslf=0;
break;
case '\r':
C=0;
break;
case '\n':
if (debug > 3) System.out.println(""String_Node_Str"" + R + ""String_Node_Str""+ bm+ ""String_Node_Str""+ tm+ ""String_Node_Str""+ rows);
if (!vms) {
if (lastwaslf != 0 && lastwaslf != c) break;
lastwaslf=c;
}
if (R == bm || R >= rows - 1) insertLine(R,1,SCROLL_UP);
 else R++;
break;
case 7:
beep();
break;
case '\016':
gl=1;
usedcharsets=true;
break;
case '\017':
gl=0;
usedcharsets=true;
break;
default :
{
int thisgl=gl;
if (onegl >= 0) {
thisgl=onegl;
onegl=-1;
}
lastwaslf=0;
if (c < 32) {
if (c != 0) if (debug > 0) System.out.println(""String_Node_Str"" + ((int)c));
if (c == 0) break;
}
if (C >= columns) {
if (wraparound) {
if (R < rows - 1) R++;
 else insertLine(R,1,SCROLL_UP);
C=0;
}
 else {
C=columns - 1;
}
}
if (usedcharsets) {
if (c >= '\u0020' && c <= '\u007f') {
switch (gx[thisgl]) {
case '0':
if (terminalID.equals(""String_Node_Str"") || terminalID.equals(""String_Node_Str"")) {
for (int i=0; i < scoansi_acs.length(); i+=2) {
if (c == scoansi_acs.charAt(i)) {
c=scoansi_acs.charAt(i + 1);
break;
}
}
}
if (c >= '\u005f' && c <= '\u007e') {
c=DECSPECIAL[(short)c - 0x5f];
mapped=true;
}
break;
case '<':
c=(char)(((int)c & 0x7f) | 0x80);
mapped=true;
break;
case 'A':
case 'B':
mapped=true;
break;
default :
System.out.println(""String_Node_Str"" + gx[thisgl]);
break;
}
}
if (!mapped && (c >= '\u0080' && c <= '\u00ff')) {
switch (gx[gr]) {
case '0':
if (c >= '\u00df' && c <= '\u00fe') {
c=DECSPECIAL[c - '\u00df'];
mapped=true;
}
break;
case '<':
case 'A':
case 'B':
mapped=true;
break;
default :
System.out.println(""String_Node_Str"" + gx[gr]);
break;
}
}
}
if (!mapped && useibmcharset) c=map_cp850_unicode(c);
if (insertmode == 1) {
insertChar(C,R,c,attributes);
}
 else {
putChar(C,R,c,attributes);
}
C++;
break;
}
}
break;
case TSTATE_OSC:
if ((c < 0x20) && (c != ESC)) {
handle_osc(osc);
term_state=TSTATE_DATA;
break;
}
if (c == '\\' && osc.charAt(osc.length() - 1) == ESC) {
handle_osc(osc);
term_state=TSTATE_DATA;
break;
}
osc=osc + c;
break;
case TSTATE_ESCSPACE:
term_state=TSTATE_DATA;
switch (c) {
case 'F':
output8bit=false;
break;
case 'G':
output8bit=true;
break;
default :
System.out.println(""String_Node_Str"" + c + ""String_Node_Str"");
}
break;
case TSTATE_ESC:
term_state=TSTATE_DATA;
switch (c) {
case ' ':
term_state=TSTATE_ESCSPACE;
break;
case '#':
term_state=TSTATE_ESCSQUARE;
break;
case 'c':
gx[0]='B';
gx[1]='0';
gx[2]='B';
gx[3]='B';
gl=0;
gr=1;
int nw=getColumns();
if (nw < 132) nw=132;
Tabs=new byte[nw];
for (int i=0; i < nw; i+=8) {
Tabs[i]=1;
}
break;
case '[':
DCEvar=0;
DCEvars[0]=0;
DCEvars[1]=0;
DCEvars[2]=0;
DCEvars[3]=0;
term_state=TSTATE_CSI;
break;
case ']':
osc=""String_Node_Str"";
term_state=TSTATE_OSC;
break;
case 'P':
dcs=""String_Node_Str"";
term_state=TSTATE_DCS;
break;
case 'A':
R--;
if (R < 0) R=0;
break;
case 'B':
R++;
if (R > rows - 1) R=rows - 1;
break;
case 'C':
C++;
if (C >= columns) C=columns - 1;
break;
case 'I':
insertLine(R,1,SCROLL_DOWN);
break;
case 'E':
if (R == bm || R == rows - 1) insertLine(R,1,SCROLL_UP);
 else R++;
C=0;
if (debug > 1) System.out.println(""String_Node_Str"" + R + ""String_Node_Str"");
break;
case 'D':
if (R == bm || R == rows - 1) insertLine(R,1,SCROLL_UP);
 else R++;
if (debug > 1) System.out.println(""String_Node_Str"" + R + ""String_Node_Str"");
break;
case 'J':
if (R < rows - 1) deleteArea(0,R + 1,columns,rows - R - 1,attributes);
if (C < columns - 1) deleteArea(C,R,columns - C,1,attributes);
break;
case 'K':
if (C < columns - 1) deleteArea(C,R,columns - C,1,attributes);
break;
case 'M':
System.out.println(""String_Node_Str"" + R + ""String_Node_Str""+ tm+ ""String_Node_Str""+ bm);
if (R > bm) break;
if (R > tm) {
R--;
}
 else {
insertLine(R,1,SCROLL_DOWN);
}
if (debug > 2) System.out.println(""String_Node_Str"");
break;
case 'H':
if (debug > 1) System.out.println(""String_Node_Str"" + C);
if (C >= columns) C=columns - 1;
Tabs[C]=1;
break;
case 'N':
onegl=2;
break;
case 'O':
onegl=3;
break;
case '=':
if (debug > 0) System.out.println(""String_Node_Str"");
keypadmode=true;
break;
case '<':
vt52mode=false;
break;
case '>':
if (debug > 0) System.out.println(""String_Node_Str"");
keypadmode=false;
break;
case '7':
Sc=C;
Sr=R;
Sgl=gl;
Sgr=gr;
Sa=attributes;
Sgx=new char[4];
for (int i=0; i < 4; i++) Sgx[i]=gx[i];
Stm=getTopMargin();
Sbm=getBottomMargin();
if (debug > 1) System.out.println(""String_Node_Str"");
break;
case '8':
C=Sc;
R=Sr;
gl=Sgl;
gr=Sgr;
for (int i=0; i < 4; i++) gx[i]=Sgx[i];
setTopMargin(Stm);
setBottomMargin(Sbm);
attributes=Sa;
if (debug > 1) System.out.println(""String_Node_Str"");
break;
case '(':
term_state=TSTATE_SETG0;
usedcharsets=true;
break;
case ')':
term_state=TSTATE_SETG1;
usedcharsets=true;
break;
case '*':
term_state=TSTATE_SETG2;
usedcharsets=true;
break;
case '+':
term_state=TSTATE_SETG3;
usedcharsets=true;
break;
case '~':
gr=1;
usedcharsets=true;
break;
case 'n':
gl=2;
usedcharsets=true;
break;
case '}':
gr=2;
usedcharsets=true;
break;
case 'o':
gl=3;
usedcharsets=true;
break;
case '|':
gr=3;
usedcharsets=true;
break;
case 'Y':
term_state=TSTATE_VT52Y;
break;
default :
System.out.println(""String_Node_Str"" + c + ""String_Node_Str""+ ((int)c)+ ""String_Node_Str"");
break;
}
break;
case TSTATE_VT52X:
C=c - 37;
term_state=TSTATE_VT52Y;
break;
case TSTATE_VT52Y:
R=c - 37;
term_state=TSTATE_DATA;
break;
case TSTATE_SETG0:
if (c != '0' && c != 'A' && c != 'B' && c != '<') System.out.println(""String_Node_Str"" + c + ""String_Node_Str""+ ((int)c)+ ""String_Node_Str"");
 else {
if (debug > 2) System.out.println(""String_Node_Str"" + c + ""String_Node_Str""+ ((int)c)+ ""String_Node_Str"");
gx[0]=c;
}
term_state=TSTATE_DATA;
break;
case TSTATE_SETG1:
if (c != '0' && c != 'A' && c != 'B' && c != '<') {
System.out.println(""String_Node_Str"" + c + ""String_Node_Str""+ ((int)c)+ ""String_Node_Str"");
}
 else {
if (debug > 2) System.out.println(""String_Node_Str"" + c + ""String_Node_Str""+ ((int)c)+ ""String_Node_Str"");
gx[1]=c;
}
term_state=TSTATE_DATA;
break;
case TSTATE_SETG2:
if (c != '0' && c != 'A' && c != 'B' && c != '<') System.out.println(""String_Node_Str"" + ((int)c) + ""String_Node_Str"");
 else {
if (debug > 2) System.out.println(""String_Node_Str"" + c + ""String_Node_Str""+ ((int)c)+ ""String_Node_Str"");
gx[2]=c;
}
term_state=TSTATE_DATA;
break;
case TSTATE_SETG3:
if (c != '0' && c != 'A' && c != 'B' && c != '<') System.out.println(""String_Node_Str"" + ((int)c) + ""String_Node_Str"");
 else {
if (debug > 2) System.out.println(""String_Node_Str"" + c + ""String_Node_Str""+ ((int)c)+ ""String_Node_Str"");
gx[3]=c;
}
term_state=TSTATE_DATA;
break;
case TSTATE_ESCSQUARE:
switch (c) {
case '8':
for (int i=0; i < columns; i++) for (int j=0; j < rows; j++) putChar(i,j,'E',0);
break;
default :
System.out.println(""String_Node_Str"" + c + ""String_Node_Str"");
break;
}
term_state=TSTATE_DATA;
break;
case TSTATE_DCS:
if (c == '\\' && dcs.charAt(dcs.length() - 1) == ESC) {
handle_dcs(dcs);
term_state=TSTATE_DATA;
break;
}
dcs=dcs + c;
break;
case TSTATE_DCEQ:
term_state=TSTATE_DATA;
switch (c) {
case '0':
case '1':
case '2':
case '3':
case '4':
case '5':
case '6':
case '7':
case '8':
case '9':
DCEvars[DCEvar]=DCEvars[DCEvar] * 10 + ((int)c) - 48;
term_state=TSTATE_DCEQ;
break;
case ';':
DCEvar++;
DCEvars[DCEvar]=0;
term_state=TSTATE_DCEQ;
break;
case 's':
if (true || debug > 1) System.out.println(""String_Node_Str"" + DCEvars[0] + ""String_Node_Str"");
break;
case 'r':
if (true || debug > 1) System.out.println(""String_Node_Str"" + DCEvars[0] + ""String_Node_Str"");
for (int i=0; i <= DCEvar; i++) {
switch (DCEvars[i]) {
case 3:
setScreenSize(80,getRows());
break;
case 4:
break;
case 5:
break;
case 6:
moveoutsidemargins=true;
break;
case 7:
wraparound=false;
break;
case 12:
break;
case 9:
case 1000:
case 1001:
case 1002:
case 1003:
mouserpt=DCEvars[i];
break;
default :
System.out.println(""String_Node_Str"" + DCEvars[0] + ""String_Node_Str"");
}
}
break;
case 'h':
if (debug > 0) System.out.println(""String_Node_Str"" + DCEvars[0] + ""String_Node_Str"");
for (int i=0; i <= DCEvar; i++) {
switch (DCEvars[i]) {
case 1:
KeyUp[0]=""String_Node_Str"";
KeyDown[0]=""String_Node_Str"";
KeyRight[0]=""String_Node_Str"";
KeyLeft[0]=""String_Node_Str"";
break;
case 2:
vt52mode=false;
break;
case 3:
setScreenSize(132,getRows());
break;
case 6:
moveoutsidemargins=false;
break;
case 7:
wraparound=true;
break;
case 25:
showCursor(true);
break;
case 9:
case 1000:
case 1001:
case 1002:
case 1003:
mouserpt=DCEvars[i];
break;
default :
System.out.println(""String_Node_Str"" + DCEvars[0] + ""String_Node_Str"");
break;
}
}
break;
case 'i':
switch (DCEvars[0]) {
case 1:
if (debug > 1) System.out.println(""String_Node_Str"");
break;
case 4:
if (debug > 1) System.out.println(""String_Node_Str"");
break;
case 5:
if (debug > 1) System.out.println(""String_Node_Str"");
break;
}
break;
case 'l':
if (debug > 0) System.out.println(""String_Node_Str"" + DCEvars[0] + ""String_Node_Str"");
for (int i=0; i <= DCEvar; i++) {
switch (DCEvars[i]) {
case 1:
KeyUp[0]=""String_Node_Str"";
KeyDown[0]=""String_Node_Str"";
KeyRight[0]=""String_Node_Str"";
KeyLeft[0]=""String_Node_Str"";
break;
case 2:
vt52mode=true;
break;
case 3:
setScreenSize(80,getRows());
break;
case 6:
moveoutsidemargins=true;
break;
case 7:
wraparound=false;
break;
case 25:
showCursor(false);
break;
case 9:
case 1000:
case 1001:
case 1002:
case 1003:
mouserpt=0;
break;
default :
System.out.println(""String_Node_Str"" + DCEvars[0] + ""String_Node_Str"");
break;
}
}
break;
case 'n':
if (debug > 0) System.out.println(""String_Node_Str"" + DCEvars[0] + ""String_Node_Str"");
switch (DCEvars[0]) {
case 15:
write(((char)ESC) + ""String_Node_Str"",false);
System.out.println(""String_Node_Str"");
break;
default :
System.out.println(""String_Node_Str"" + DCEvars[0] + ""String_Node_Str"");
break;
}
break;
default :
System.out.println(""String_Node_Str"" + DCEvars[0] + ""String_Node_Str""+ c+ ""String_Node_Str"");
break;
}
break;
case TSTATE_CSI_EX:
term_state=TSTATE_DATA;
switch (c) {
case ESC:
term_state=TSTATE_ESC;
break;
default :
System.out.println(""String_Node_Str"" + (int)c);
break;
}
break;
case TSTATE_CSI_TICKS:
term_state=TSTATE_DATA;
switch (c) {
case 'p':
System.out.println(""String_Node_Str"" + DCEvars[0] + ""String_Node_Str""+ DCEvars[1]);
if (DCEvars[0] == 61) {
output8bit=false;
break;
}
if (DCEvars[1] == 1) {
output8bit=false;
}
 else {
output8bit=true;
}
break;
default :
System.out.println(""String_Node_Str"" + c);
break;
}
break;
case TSTATE_CSI_EQUAL:
term_state=TSTATE_DATA;
switch (c) {
case '0':
case '1':
case '2':
case '3':
case '4':
case '5':
case '6':
case '7':
case '8':
case '9':
DCEvars[DCEvar]=DCEvars[DCEvar] * 10 + ((int)c) - 48;
term_state=TSTATE_CSI_EQUAL;
break;
case ';':
DCEvar++;
DCEvars[DCEvar]=0;
term_state=TSTATE_CSI_EQUAL;
break;
case 'F':
{
int newcolor;
System.out.print(""String_Node_Str"" + DCEvars[0] + ""String_Node_Str"");
attributes&=~COLOR_FG;
newcolor=((DCEvars[0] & 1) << 2) | (DCEvars[0] & 2) | ((DCEvars[0] & 4) >> 2);
attributes|=newcolor << COLOR_FG_SHIFT;
break;
}
case 'G':
{
int newcolor;
System.out.print(""String_Node_Str"" + DCEvars[0] + ""String_Node_Str"");
attributes&=~COLOR_BG;
newcolor=((DCEvars[0] & 1) << 2) | (DCEvars[0] & 2) | ((DCEvars[0] & 4) >> 2);
attributes|=newcolor << COLOR_BG_SHIFT;
break;
}
default :
System.out.print(""String_Node_Str"");
for (int i=0; i < DCEvar; i++) System.out.print(DCEvars[i] + ""String_Node_Str"");
System.out.println(""String_Node_Str"" + c);
break;
}
break;
case TSTATE_CSI_DOLLAR:
term_state=TSTATE_DATA;
switch (c) {
case '}':
System.out.println(""String_Node_Str"" + DCEvars[0]);
statusmode=DCEvars[0];
break;
case '~':
System.out.println(""String_Node_Str"" + DCEvars[0]);
break;
default :
System.out.println(""String_Node_Str"" + c + ""String_Node_Str""+ DCEvars[0]);
break;
}
break;
case TSTATE_CSI:
term_state=TSTATE_DATA;
switch (c) {
case '""':
term_state=TSTATE_CSI_TICKS;
break;
case '$':
term_state=TSTATE_CSI_DOLLAR;
break;
case '=':
term_state=TSTATE_CSI_EQUAL;
break;
case '!':
term_state=TSTATE_CSI_EX;
break;
case '?':
DCEvar=0;
DCEvars[0]=0;
term_state=TSTATE_DCEQ;
break;
case '0':
case '1':
case '2':
case '3':
case '4':
case '5':
case '6':
case '7':
case '8':
case '9':
DCEvars[DCEvar]=DCEvars[DCEvar] * 10 + ((int)c) - 48;
term_state=TSTATE_CSI;
break;
case ';':
DCEvar++;
DCEvars[DCEvar]=0;
term_state=TSTATE_CSI;
break;
case 'c':
String subcode=""String_Node_Str"";
if (terminalID.equals(""String_Node_Str"")) subcode=""String_Node_Str"";
if (terminalID.equals(""String_Node_Str"")) subcode=""String_Node_Str"";
if (terminalID.equals(""String_Node_Str"")) subcode=""String_Node_Str"";
write(((char)ESC) + ""String_Node_Str"" + subcode+ ""String_Node_Str"",false);
if (debug > 1) System.out.println(""String_Node_Str"" + DCEvars[0] + ""String_Node_Str"");
break;
case 'q':
if (debug > 1) System.out.println(""String_Node_Str"" + DCEvars[0] + ""String_Node_Str"");
break;
case 'g':
switch (DCEvars[0]) {
case 3:
Tabs=new byte[getColumns()];
break;
case 0:
Tabs[C]=0;
break;
}
if (debug > 1) System.out.println(""String_Node_Str"" + DCEvars[0] + ""String_Node_Str"");
break;
case 'h':
switch (DCEvars[0]) {
case 4:
insertmode=1;
break;
case 20:
System.out.println(""String_Node_Str"");
sendcrlf=true;
break;
default :
System.out.println(""String_Node_Str"" + DCEvars[0] + ""String_Node_Str"");
break;
}
if (debug > 1) System.out.println(""String_Node_Str"" + DCEvars[0] + ""String_Node_Str"");
break;
case 'i':
switch (DCEvars[0]) {
case 0:
if (debug > 1) System.out.println(""String_Node_Str"");
break;
case 4:
if (debug > 1) System.out.println(""String_Node_Str"");
break;
case 5:
if (debug > 1) System.out.println(""String_Node_Str"");
break;
default :
System.out.println(""String_Node_Str"" + DCEvars[0] + ""String_Node_Str"");
}
break;
case 'l':
switch (DCEvars[0]) {
case 4:
insertmode=0;
break;
case 20:
System.out.println(""String_Node_Str"");
sendcrlf=false;
break;
default :
System.out.println(""String_Node_Str"" + DCEvars[0] + ""String_Node_Str"");
break;
}
break;
case 'A':
{
int limit;
if (R > bm) limit=bm + 1;
 else if (R >= tm) {
limit=tm;
}
 else limit=0;
if (DCEvars[0] == 0) R--;
 else R-=DCEvars[0];
if (R < limit) R=limit;
if (debug > 1) System.out.println(""String_Node_Str"" + DCEvars[0] + ""String_Node_Str"");
break;
}
case 'B':
{
int limit;
if (R < tm) limit=tm - 1;
 else if (R <= bm) {
limit=bm;
}
 else limit=rows - 1;
if (DCEvars[0] == 0) R++;
 else R+=DCEvars[0];
if (R > limit) R=limit;
 else {
if (debug > 2) System.out.println(""String_Node_Str"");
}
if (debug > 2) System.out.println(""String_Node_Str"" + R);
if (debug > 1) System.out.println(""String_Node_Str"" + DCEvars[0] + ""String_Node_Str""+ C+ ""String_Node_Str"");
break;
}
case 'C':
if (DCEvars[0] == 0) C++;
 else C+=DCEvars[0];
if (C > columns - 1) C=columns - 1;
if (debug > 1) System.out.println(""String_Node_Str"" + DCEvars[0] + ""String_Node_Str"");
break;
case 'd':
R=DCEvars[0];
if (debug > 1) System.out.println(""String_Node_Str"" + DCEvars[0] + ""String_Node_Str"");
break;
case 'D':
if (DCEvars[0] == 0) C--;
 else C-=DCEvars[0];
if (C < 0) C=0;
if (debug > 1) System.out.println(""String_Node_Str"" + DCEvars[0] + ""String_Node_Str"");
break;
case 'r':
if (DCEvar > 0) {
R=DCEvars[1] - 1;
if (R < 0) R=rows - 1;
 else if (R >= rows) {
R=rows - 1;
}
}
 else R=rows - 1;
setBottomMargin(R);
if (R >= DCEvars[0]) {
R=DCEvars[0] - 1;
if (R < 0) R=0;
}
setTopMargin(R);
_SetCursor(0,0);
if (debug > 1) System.out.println(""String_Node_Str"" + DCEvars[0] + ""String_Node_Str""+ DCEvars[1]+ ""String_Node_Str"");
break;
case 'G':
C=DCEvars[0];
if (debug > 1) System.out.println(""String_Node_Str"" + DCEvars[0] + ""String_Node_Str"");
break;
case 'H':
_SetCursor(DCEvars[0] - 1,DCEvars[1] - 1);
if (debug > 2) {
System.out.println(""String_Node_Str"" + DCEvars[0] + ""String_Node_Str""+ DCEvars[1]+ ""String_Node_Str""+ moveoutsidemargins);
System.out.println(""String_Node_Str"" + R + ""String_Node_Str""+ C);
}
break;
case 'f':
R=DCEvars[0] - 1;
C=DCEvars[1] - 1;
if (C < 0) C=0;
if (R < 0) R=0;
if (debug > 2) System.out.println(""String_Node_Str"" + DCEvars[0] + ""String_Node_Str""+ DCEvars[1]+ ""String_Node_Str"");
break;
case 'S':
if (DCEvars[0] == 0) insertLine(rows - 1,SCROLL_UP);
 else insertLine(rows - 1,DCEvars[0],SCROLL_UP);
break;
case 'L':
if (DCEvars[0] == 0) insertLine(R,SCROLL_DOWN);
 else insertLine(R,DCEvars[0],SCROLL_DOWN);
if (debug > 1) System.out.println(""String_Node_Str"" + DCEvars[0] + ""String_Node_Str""+ (c)+ ""String_Node_Str""+ R+ ""String_Node_Str"");
break;
case 'T':
if (DCEvars[0] == 0) insertLine(0,SCROLL_DOWN);
 else insertLine(0,DCEvars[0],SCROLL_DOWN);
break;
case 'M':
if (debug > 1) System.out.println(""String_Node_Str"" + DCEvars[0] + ""String_Node_Str""+ (c)+ ""String_Node_Str""+ R);
if (DCEvars[0] == 0) deleteLine(R);
 else for (int i=0; i < DCEvars[0]; i++) deleteLine(R);
break;
case 'K':
if (debug > 1) System.out.println(""String_Node_Str"" + DCEvars[0] + ""String_Node_Str"");
switch (DCEvars[0]) {
case 6:
case 0:
if (C < columns - 1) deleteArea(C,R,columns - C,1,attributes);
break;
case 1:
if (C > 0) deleteArea(0,R,C + 1,1,attributes);
break;
case 2:
deleteArea(0,R,columns,1,attributes);
break;
}
break;
case 'J':
switch (DCEvars[0]) {
case 0:
if (R < rows - 1) deleteArea(0,R + 1,columns,rows - R - 1,attributes);
if (C < columns - 1) deleteArea(C,R,columns - C,1,attributes);
break;
case 1:
if (R > 0) deleteArea(0,0,columns,R,attributes);
if (C > 0) deleteArea(0,R,C + 1,1,attributes);
break;
case 2:
deleteArea(0,0,columns,rows,attributes);
break;
}
if (debug > 1) System.out.println(""String_Node_Str"" + DCEvars[0] + ""String_Node_Str"");
break;
case '@':
if (debug > 1) System.out.println(""String_Node_Str"" + DCEvars[0] + ""String_Node_Str"");
for (int i=0; i < DCEvars[0]; i++) insertChar(C,R,' ',attributes);
break;
case 'X':
{
int toerase=DCEvars[0];
if (debug > 1) System.out.println(""String_Node_Str"" + DCEvars[0] + ""String_Node_Str""+ C+ ""String_Node_Str""+ R);
if (toerase == 0) toerase=1;
if (toerase + C > columns) toerase=columns - C;
deleteArea(C,R,toerase,1,attributes);
break;
}
case 'P':
if (debug > 1) System.out.println(""String_Node_Str"" + DCEvars[0] + ""String_Node_Str""+ C+ ""String_Node_Str""+ R);
if (DCEvars[0] == 0) DCEvars[0]=1;
for (int i=0; i < DCEvars[0]; i++) deleteChar(C,R);
break;
case 'n':
switch (DCEvars[0]) {
case 5:
writeSpecial(((char)ESC) + ""String_Node_Str"");
if (debug > 1) System.out.println(""String_Node_Str"");
break;
case 6:
writeSpecial(((char)ESC) + ""String_Node_Str"" + R+ ""String_Node_Str""+ C+ ""String_Node_Str"");
if (debug > 1) System.out.println(""String_Node_Str"");
break;
default :
if (debug > 0) System.out.println(""String_Node_Str"" + DCEvars[0] + ""String_Node_Str"");
break;
}
break;
case 's':
Sc=C;
Sr=R;
Sa=attributes;
if (debug > 3) System.out.println(""String_Node_Str"");
break;
case 'u':
C=Sc;
R=Sr;
attributes=Sa;
if (debug > 3) System.out.println(""String_Node_Str"");
break;
case 'm':
if (debug > 3) System.out.print(""String_Node_Str"");
if (DCEvar == 0 && DCEvars[0] == 0) attributes=0;
for (int i=0; i <= DCEvar; i++) {
switch (DCEvars[i]) {
case 0:
if (DCEvar > 0) {
if (terminalID.equals(""String_Node_Str"")) {
attributes&=COLOR;
}
 else {
attributes=0;
}
}
break;
case 1:
attributes|=BOLD;
attributes&=~LOW;
break;
case 2:
if (terminalID.equals(""String_Node_Str"") && ((DCEvar - i) >= 2)) {
int ncolor;
attributes&=~(COLOR | BOLD);
ncolor=DCEvars[i + 1];
if ((ncolor & 8) == 8) attributes|=BOLD;
ncolor=((ncolor & 1) << 2) | (ncolor & 2) | ((ncolor & 4) >> 2);
attributes|=((ncolor) + 1) << COLOR_FG_SHIFT;
ncolor=DCEvars[i + 2];
ncolor=((ncolor & 1) << 2) | (ncolor & 2) | ((ncolor & 4) >> 2);
attributes|=((ncolor) + 1) << COLOR_BG_SHIFT;
i+=2;
}
 else {
attributes|=LOW;
}
break;
case 4:
attributes|=UNDERLINE;
break;
case 7:
attributes|=INVERT;
break;
case 8:
attributes|=INVISIBLE;
break;
case 5:
break;
case 10:
gl=0;
usedcharsets=true;
break;
case 11:
case 12:
gl=1;
usedcharsets=true;
break;
case 21:
attributes&=~(LOW | BOLD);
break;
case 25:
break;
case 27:
attributes&=~INVERT;
break;
case 28:
attributes&=~INVISIBLE;
break;
case 24:
attributes&=~UNDERLINE;
break;
case 22:
attributes&=~BOLD;
break;
case 30:
case 31:
case 32:
case 33:
case 34:
case 35:
case 36:
case 37:
attributes&=~COLOR_FG;
attributes|=((DCEvars[i] - 30) + 1) << COLOR_FG_SHIFT;
break;
case 39:
attributes&=~COLOR_FG;
break;
case 40:
case 41:
case 42:
case 43:
case 44:
case 45:
case 46:
case 47:
attributes&=~COLOR_BG;
attributes|=((DCEvars[i] - 40) + 1) << COLOR_BG_SHIFT;
break;
case 49:
attributes&=~COLOR_BG;
break;
default :
System.out.println(""String_Node_Str"" + DCEvars[i] + ""String_Node_Str"");
break;
}
if (debug > 3) System.out.print(""String_Node_Str"" + DCEvars[i] + ""String_Node_Str"");
}
if (debug > 3) System.out.print(""String_Node_Str"" + attributes + ""String_Node_Str"");
break;
default :
System.out.println(""String_Node_Str"" + c + ""String_Node_Str""+ ((int)c)+ ""String_Node_Str"");
break;
}
break;
default :
term_state=TSTATE_DATA;
break;
}
if (C > columns) C=columns;
if (R > rows) R=rows;
if (C < 0) C=0;
if (R < 0) R=0;
if (doshowcursor) setCursorPosition(C,R);
markLine(R,1);
}",0.9949175763468424
143911,"static public byte[] encrypteRSAPkcs1Twice(byte[] clearData,byte[] server_key_public_exponent,byte[] server_key_public_modulus,byte[] host_key_public_exponent,byte[] host_key_public_modulus){
  byte[] EncryptionBlock;
  int offset=0;
  EncryptionBlock=new byte[server_key_public_modulus.length];
  EncryptionBlock[0]=0;
  EncryptionBlock[1]=2;
  offset=2;
  for (int i=2; i < (EncryptionBlock.length - clearData.length - 1); i++)   EncryptionBlock[offset++]=SshMisc.getNotZeroRandomByte();
  EncryptionBlock[offset++]=0;
  for (int i=0; i < clearData.length; i++)   EncryptionBlock[offset++]=clearData[i];
  BigInteger m, e, message;
  byte[] messageByte;
  m=new BigInteger(1,server_key_public_modulus);
  e=new BigInteger(1,server_key_public_exponent);
  message=new BigInteger(1,EncryptionBlock);
  message=message.modPow(e,m);
  byte[] messageByteTemp=message.toByteArray();
  messageByte=new byte[server_key_public_modulus.length];
  int tempOffset=0;
  while (messageByteTemp[tempOffset] == 0)   tempOffset++;
  for (int i=messageByte.length - messageByteTemp.length + tempOffset; i < messageByte.length; i++)   messageByte[i]=messageByteTemp[tempOffset++];
  clearData=messageByte;
  offset=0;
  EncryptionBlock=new byte[host_key_public_modulus.length];
  EncryptionBlock[0]=0;
  EncryptionBlock[1]=2;
  offset=2;
  for (int i=2; i < (EncryptionBlock.length - clearData.length - 1); i++)   EncryptionBlock[offset++]=SshMisc.getNotZeroRandomByte();
  EncryptionBlock[offset++]=0;
  for (int i=0; i < clearData.length; i++)   EncryptionBlock[offset++]=clearData[i];
  m=new BigInteger(1,host_key_public_modulus);
  e=new BigInteger(1,host_key_public_exponent);
  message=new BigInteger(1,EncryptionBlock);
  message=message.modPow(e,m);
  messageByteTemp=message.toByteArray();
  messageByte=new byte[host_key_public_modulus.length];
  tempOffset=0;
  while (messageByteTemp[tempOffset] == 0)   tempOffset++;
  for (int i=messageByte.length - messageByteTemp.length + tempOffset; i < messageByte.length; i++)   messageByte[i]=messageByteTemp[tempOffset++];
  byte[] encrypted_session_key=new byte[host_key_public_modulus.length + 2];
  encrypted_session_key[1]=(byte)((8 * host_key_public_modulus.length) & 0xff);
  encrypted_session_key[0]=(byte)(((8 * host_key_public_modulus.length) >> 8) & 0xff);
  for (int i=0; i < host_key_public_modulus.length; i++)   encrypted_session_key[i + 2]=messageByte[i];
  return encrypted_session_key;
}","static public byte[] encrypteRSAPkcs1Twice(byte[] clearData,byte[] server_key_public_exponent,byte[] server_key_public_modulus,byte[] host_key_public_exponent,byte[] host_key_public_modulus){
  byte[] key1exp, key1mod, key2exp, key2mod;
  if (server_key_public_modulus.length < host_key_public_modulus.length) {
    key1exp=server_key_public_exponent;
    key1mod=server_key_public_modulus;
    key2exp=host_key_public_exponent;
    key2mod=host_key_public_modulus;
  }
 else {
    key1exp=host_key_public_exponent;
    key1mod=host_key_public_modulus;
    key2exp=server_key_public_exponent;
    key2mod=server_key_public_modulus;
  }
  byte[] EncryptionBlock;
  int offset=0;
  EncryptionBlock=new byte[key1mod.length];
  EncryptionBlock[0]=0;
  EncryptionBlock[1]=2;
  offset=2;
  for (int i=2; i < (EncryptionBlock.length - clearData.length - 1); i++)   EncryptionBlock[offset++]=SshMisc.getNotZeroRandomByte();
  EncryptionBlock[offset++]=0;
  for (int i=0; i < clearData.length; i++)   EncryptionBlock[offset++]=clearData[i];
  BigInteger m, e, message;
  byte[] messageByte;
  m=new BigInteger(1,key1mod);
  e=new BigInteger(1,key1exp);
  message=new BigInteger(1,EncryptionBlock);
  message=message.modPow(e,m);
  byte[] messageByteTemp=message.toByteArray();
  messageByte=new byte[key1mod.length];
  int tempOffset=0;
  while (messageByteTemp[tempOffset] == 0)   tempOffset++;
  for (int i=messageByte.length - messageByteTemp.length + tempOffset; i < messageByte.length; i++)   messageByte[i]=messageByteTemp[tempOffset++];
  clearData=messageByte;
  offset=0;
  EncryptionBlock=new byte[key2mod.length];
  EncryptionBlock[0]=0;
  EncryptionBlock[1]=2;
  offset=2;
  for (int i=2; i < (EncryptionBlock.length - clearData.length - 1); i++)   EncryptionBlock[offset++]=SshMisc.getNotZeroRandomByte();
  EncryptionBlock[offset++]=0;
  for (int i=0; (i < clearData.length); i++)   EncryptionBlock[offset++]=clearData[i];
  m=new BigInteger(1,key2mod);
  e=new BigInteger(1,key2exp);
  message=new BigInteger(1,EncryptionBlock);
  message=message.modPow(e,m);
  messageByteTemp=message.toByteArray();
  messageByte=new byte[key2mod.length];
  tempOffset=0;
  while (messageByteTemp[tempOffset] == 0)   tempOffset++;
  for (int i=messageByte.length - messageByteTemp.length + tempOffset; i < messageByte.length; i++)   messageByte[i]=messageByteTemp[tempOffset++];
  byte[] encrypted_session_key=new byte[key2mod.length + 2];
  encrypted_session_key[1]=(byte)((8 * key2mod.length) & 0xff);
  encrypted_session_key[0]=(byte)(((8 * key2mod.length) >> 8) & 0xff);
  for (int i=0; i < key2mod.length; i++)   encrypted_session_key[i + 2]=messageByte[i];
  return encrypted_session_key;
}",0.8230019493177388
143912,"public void actionPerformed(ActionEvent e){
  String urlID=e.getActionCommand();
  URL url=(URL)remoteUrlList.get(urlID);
  if (debug > 0)   System.err.println(""String_Node_Str"" + urlID + ""String_Node_Str""+ remoteUrlList.get(urlID));
  try {
    URLConnection urlConnection=url.openConnection();
    DataOutputStream out;
    DataInputStream in;
    urlConnection.setDoInput(true);
    urlConnection.setDoOutput(true);
    urlConnection.setUseCaches(false);
    urlConnection.setRequestProperty(""String_Node_Str"",""String_Node_Str"");
    out=new DataOutputStream(urlConnection.getOutputStream());
    String content=(String)remoteUrlList.get(urlID + ""String_Node_Str"");
    content=(content == null ? ""String_Node_Str"" : content + ""String_Node_Str"") + ""String_Node_Str"" + URLEncoder.encode(textArea.getText());
    if (debug > 0)     System.err.println(""String_Node_Str"" + content);
    out.writeBytes(content);
    out.flush();
    out.close();
    if (debug > 0)     System.err.println(""String_Node_Str"");
    in=new DataInputStream(urlConnection.getInputStream());
    String str;
    while (null != ((str=in.readLine()))) {
      System.out.println(""String_Node_Str"" + str);
    }
    in.close();
  }
 catch (  IOException ioe) {
    dialog.setVisible(true);
    System.err.println(""String_Node_Str"" + url);
    ioe.printStackTrace();
  }
  if (debug > 0)   System.err.println(""String_Node_Str"" + url);
}","public void actionPerformed(ActionEvent e){
  String urlID=e.getActionCommand();
  if (debug > 0)   System.err.println(""String_Node_Str"" + urlID + ""String_Node_Str""+ remoteUrlList.get(urlID));
  saveFile(urlID);
}",0.245679012345679
143913,"public void setConfiguration(PluginConfig config){
  String tmp;
  int i=1;
  while ((tmp=config.getProperty(""String_Node_Str"",id,i + ""String_Node_Str"")) != null) {
    try {
      String urlID=""String_Node_Str"" + i;
      URL remoteURL=new URL(tmp);
      remoteUrlList.put(urlID,remoteURL);
      if ((tmp=config.getProperty(""String_Node_Str"",id,i + ""String_Node_Str"")) != null) {
        remoteUrlList.put(urlID + ""String_Node_Str"",tmp);
      }
      if ((tmp=config.getProperty(""String_Node_Str"",id,i + ""String_Node_Str"")) != null) {
        save=new MenuItem(""String_Node_Str"" + tmp);
      }
 else {
        save=new MenuItem(""String_Node_Str"" + remoteURL.toString());
      }
      save.setEnabled(true);
      save.addActionListener(Capture.this);
      save.setActionCommand(urlID);
      menu.add(save);
      i++;
    }
 catch (    MalformedURLException e) {
      System.err.println(""String_Node_Str"" + e);
    }
  }
}","public void setConfiguration(PluginConfig config){
  String tmp;
  MenuItem save=new MenuItem(""String_Node_Str"");
  menu.add(save);
  if ((tmp=config.getProperty(""String_Node_Str"",id,""String_Node_Str"")) != null) {
    try {
      remoteUrlList.put(""String_Node_Str"",new URL(tmp));
      if ((tmp=config.getProperty(""String_Node_Str"",id,""String_Node_Str"")) != null) {
        remoteUrlList.put(""String_Node_Str"",tmp);
      }
      save.addActionListener(new ActionListener(){
        public void actionPerformed(        ActionEvent e){
          fileDialog.setVisible(true);
        }
      }
);
      save.addActionListener(Capture.this);
      save.setActionCommand(""String_Node_Str"");
    }
 catch (    MalformedURLException e) {
      System.err.println(""String_Node_Str"" + e);
    }
  }
 else {
    save.setEnabled(false);
  }
  int i=1;
  while ((tmp=config.getProperty(""String_Node_Str"",id,i + ""String_Node_Str"")) != null) {
    try {
      String urlID=""String_Node_Str"" + i;
      URL remoteURL=new URL(tmp);
      remoteUrlList.put(urlID,remoteURL);
      if ((tmp=config.getProperty(""String_Node_Str"",id,i + ""String_Node_Str"")) != null) {
        remoteUrlList.put(urlID + ""String_Node_Str"",tmp);
      }
      if ((tmp=config.getProperty(""String_Node_Str"",id,i + ""String_Node_Str"")) != null) {
        save=new MenuItem(""String_Node_Str"" + tmp);
      }
 else {
        save=new MenuItem(""String_Node_Str"" + remoteURL.toString());
      }
      save.setEnabled(true);
      save.addActionListener(Capture.this);
      save.setActionCommand(urlID);
      menu.add(save);
      i++;
    }
 catch (    MalformedURLException e) {
      System.err.println(""String_Node_Str"" + e);
    }
  }
}",0.2860403195131228
143914,"/** 
 * Initialize the Capture plugin. This sets up the menu entries and registers the plugin on the bus.
 */
public Capture(final PluginBus bus,final String id){
  super(bus,id);
  if (!personalJava) {
    frame=new Frame(""String_Node_Str"");
    frame.setLayout(new BorderLayout());
    frame.add(textArea=new TextArea(24,80),BorderLayout.CENTER);
    textArea.setFont(new Font(""String_Node_Str"",Font.PLAIN,12));
    frame.addWindowListener(new WindowAdapter(){
      public void windowClosing(      WindowEvent e){
        frame.setVisible(false);
      }
    }
);
    frame.pack();
    dialog=new Dialog(frame);
    dialog.setLayout(new BorderLayout());
    dialog.add(new Label(""String_Node_Str""));
    Button close=new Button(""String_Node_Str"");
    dialog.add(close);
    close.addActionListener(new ActionListener(){
      public void actionPerformed(      ActionEvent e){
        dialog.setVisible(false);
      }
    }
);
    menu=new Menu(""String_Node_Str"");
    start=new MenuItem(""String_Node_Str"");
    start.addActionListener(new ActionListener(){
      public void actionPerformed(      ActionEvent e){
        if (debug > 0)         System.out.println(""String_Node_Str"");
        captureEnabled=true;
        start.setEnabled(false);
        stop.setEnabled(true);
      }
    }
);
    menu.add(start);
    stop=new MenuItem(""String_Node_Str"");
    stop.addActionListener(new ActionListener(){
      public void actionPerformed(      ActionEvent e){
        if (debug > 0)         System.out.println(""String_Node_Str"");
        captureEnabled=false;
        start.setEnabled(true);
        stop.setEnabled(false);
      }
    }
);
    stop.setEnabled(false);
    menu.add(stop);
    clear=new MenuItem(""String_Node_Str"");
    clear.addActionListener(new ActionListener(){
      public void actionPerformed(      ActionEvent e){
        if (debug > 0)         System.out.println(""String_Node_Str"");
        textArea.setText(""String_Node_Str"");
      }
    }
);
    menu.add(clear);
    menu.addSeparator();
    MenuItem view=new MenuItem(""String_Node_Str"");
    view.addActionListener(new ActionListener(){
      public void actionPerformed(      ActionEvent e){
        if (debug > 0)         System.out.println(""String_Node_Str"" + frame.isVisible());
        if (frame.isVisible()) {
          frame.setVisible(false);
          frame.hide();
        }
 else {
          frame.setVisible(true);
          frame.show();
        }
      }
    }
);
    menu.add(view);
  }
  bus.registerPluginListener(new ConfigurationListener(){
    public void setConfiguration(    PluginConfig config){
      String tmp;
      int i=1;
      while ((tmp=config.getProperty(""String_Node_Str"",id,i + ""String_Node_Str"")) != null) {
        try {
          String urlID=""String_Node_Str"" + i;
          URL remoteURL=new URL(tmp);
          remoteUrlList.put(urlID,remoteURL);
          if ((tmp=config.getProperty(""String_Node_Str"",id,i + ""String_Node_Str"")) != null) {
            remoteUrlList.put(urlID + ""String_Node_Str"",tmp);
          }
          if ((tmp=config.getProperty(""String_Node_Str"",id,i + ""String_Node_Str"")) != null) {
            save=new MenuItem(""String_Node_Str"" + tmp);
          }
 else {
            save=new MenuItem(""String_Node_Str"" + remoteURL.toString());
          }
          save.setEnabled(true);
          save.addActionListener(Capture.this);
          save.setActionCommand(urlID);
          menu.add(save);
          i++;
        }
 catch (        MalformedURLException e) {
          System.err.println(""String_Node_Str"" + e);
        }
      }
    }
  }
);
}","/** 
 * Initialize the Capture plugin. This sets up the menu entries and registers the plugin on the bus.
 */
public Capture(final PluginBus bus,final String id){
  super(bus,id);
  if (!personalJava) {
    frame=new Frame(""String_Node_Str"");
    frame.setLayout(new BorderLayout());
    frame.add(textArea=new TextArea(24,80),BorderLayout.CENTER);
    textArea.setFont(new Font(""String_Node_Str"",Font.PLAIN,12));
    frame.addWindowListener(new WindowAdapter(){
      public void windowClosing(      WindowEvent e){
        frame.setVisible(false);
      }
    }
);
    frame.pack();
    errorDialog=new Dialog(frame,""String_Node_Str"",true);
    errorDialog.setLayout(new BorderLayout());
    errorDialog.add(new Label(""String_Node_Str""),BorderLayout.NORTH);
    Panel panel=new Panel();
    Button button=new Button(""String_Node_Str"");
    panel.add(button);
    errorDialog.add(panel,BorderLayout.SOUTH);
    button.addActionListener(new ActionListener(){
      public void actionPerformed(      ActionEvent e){
        errorDialog.setVisible(false);
      }
    }
);
    fileDialog=new Dialog(frame,""String_Node_Str"",true);
    fileDialog.setLayout(new BorderLayout());
    ActionListener saveFileListener=new ActionListener(){
      public void actionPerformed(      ActionEvent e){
        String params=(String)remoteUrlList.get(""String_Node_Str"");
        params=params == null ? ""String_Node_Str"" : params + ""String_Node_Str"";
        remoteUrlList.put(""String_Node_Str"",params + ""String_Node_Str"" + URLEncoder.encode(fileName.getText()));
        saveFile(""String_Node_Str"");
        fileDialog.setVisible(false);
      }
    }
;
    panel=new Panel();
    panel.add(new Label(""String_Node_Str""));
    panel.add(fileName=new TextField(30));
    fileName.addActionListener(saveFileListener);
    fileDialog.add(panel,BorderLayout.CENTER);
    panel=new Panel();
    panel.add(button=new Button(""String_Node_Str""));
    button.addActionListener(new ActionListener(){
      public void actionPerformed(      ActionEvent e){
        fileDialog.setVisible(false);
      }
    }
);
    panel.add(button=new Button(""String_Node_Str""));
    button.addActionListener(saveFileListener);
    fileDialog.add(panel,BorderLayout.SOUTH);
    fileDialog.pack();
    menu=new Menu(""String_Node_Str"");
    start=new MenuItem(""String_Node_Str"");
    start.addActionListener(new ActionListener(){
      public void actionPerformed(      ActionEvent e){
        if (debug > 0)         System.out.println(""String_Node_Str"");
        captureEnabled=true;
        start.setEnabled(false);
        stop.setEnabled(true);
      }
    }
);
    menu.add(start);
    stop=new MenuItem(""String_Node_Str"");
    stop.addActionListener(new ActionListener(){
      public void actionPerformed(      ActionEvent e){
        if (debug > 0)         System.out.println(""String_Node_Str"");
        captureEnabled=false;
        start.setEnabled(true);
        stop.setEnabled(false);
      }
    }
);
    stop.setEnabled(false);
    menu.add(stop);
    clear=new MenuItem(""String_Node_Str"");
    clear.addActionListener(new ActionListener(){
      public void actionPerformed(      ActionEvent e){
        if (debug > 0)         System.out.println(""String_Node_Str"");
        textArea.setText(""String_Node_Str"");
      }
    }
);
    menu.add(clear);
    menu.addSeparator();
    MenuItem view=new MenuItem(""String_Node_Str"");
    view.addActionListener(new ActionListener(){
      public void actionPerformed(      ActionEvent e){
        if (debug > 0)         System.out.println(""String_Node_Str"" + frame.isVisible());
        if (frame.isVisible()) {
          frame.setVisible(false);
          frame.hide();
        }
 else {
          frame.setVisible(true);
          frame.show();
        }
      }
    }
);
    menu.add(view);
  }
  bus.registerPluginListener(new ConfigurationListener(){
    public void setConfiguration(    PluginConfig config){
      String tmp;
      MenuItem save=new MenuItem(""String_Node_Str"");
      menu.add(save);
      if ((tmp=config.getProperty(""String_Node_Str"",id,""String_Node_Str"")) != null) {
        try {
          remoteUrlList.put(""String_Node_Str"",new URL(tmp));
          if ((tmp=config.getProperty(""String_Node_Str"",id,""String_Node_Str"")) != null) {
            remoteUrlList.put(""String_Node_Str"",tmp);
          }
          save.addActionListener(new ActionListener(){
            public void actionPerformed(            ActionEvent e){
              fileDialog.setVisible(true);
            }
          }
);
          save.addActionListener(Capture.this);
          save.setActionCommand(""String_Node_Str"");
        }
 catch (        MalformedURLException e) {
          System.err.println(""String_Node_Str"" + e);
        }
      }
 else {
        save.setEnabled(false);
      }
      int i=1;
      while ((tmp=config.getProperty(""String_Node_Str"",id,i + ""String_Node_Str"")) != null) {
        try {
          String urlID=""String_Node_Str"" + i;
          URL remoteURL=new URL(tmp);
          remoteUrlList.put(urlID,remoteURL);
          if ((tmp=config.getProperty(""String_Node_Str"",id,i + ""String_Node_Str"")) != null) {
            remoteUrlList.put(urlID + ""String_Node_Str"",tmp);
          }
          if ((tmp=config.getProperty(""String_Node_Str"",id,i + ""String_Node_Str"")) != null) {
            save=new MenuItem(""String_Node_Str"" + tmp);
          }
 else {
            save=new MenuItem(""String_Node_Str"" + remoteURL.toString());
          }
          save.setEnabled(true);
          save.addActionListener(Capture.this);
          save.setActionCommand(urlID);
          menu.add(save);
          i++;
        }
 catch (        MalformedURLException e) {
          System.err.println(""String_Node_Str"" + e);
        }
      }
    }
  }
);
  if (!personalJava) {
  }
}",0.2768740031897926
143915,"private void putChar(char c,boolean doshowcursor){
  Dimension size;
  int rows=getRows();
  int columns=getColumns();
  int tm=getTopMargin();
  int bm=getBottomMargin();
  byte msg[];
  if (debug > 4)   System.out.println(""String_Node_Str"" + c + ""String_Node_Str""+ ((int)c)+ ""String_Node_Str""+ R+ ""String_Node_Str""+ C+ ""String_Node_Str""+ columns+ ""String_Node_Str""+ rows);
  markLine(R,1);
  if (c > 255) {
    if (debug > 0)     System.out.println(""String_Node_Str"" + (int)c);
  }
switch (term_state) {
case TSTATE_DATA:
    if (!useibmcharset) {
      boolean doneflag=true;
switch (c) {
case OSC:
        osc=""String_Node_Str"";
      term_state=TSTATE_OSC;
    break;
case RI:
  if (R > tm)   R--;
 else   insertLine(R,1,SCROLL_DOWN);
if (debug > 1) System.out.println(""String_Node_Str"");
break;
case IND:
if (R == tm - 1 || R == bm || R == rows - 1) insertLine(R,1,SCROLL_UP);
 else R++;
if (debug > 1) System.out.println(""String_Node_Str"" + R + ""String_Node_Str"");
break;
case NEL:
if (R == tm - 1 || R == bm || R == rows - 1) insertLine(R,1,SCROLL_UP);
 else R++;
C=0;
if (debug > 1) System.out.println(""String_Node_Str"" + R + ""String_Node_Str"");
break;
case HTS:
Tabs[C]=1;
if (debug > 1) System.out.println(""String_Node_Str"");
break;
case DCS:
dcs=""String_Node_Str"";
term_state=TSTATE_DCS;
break;
default :
doneflag=false;
break;
}
if (doneflag) break;
}
switch (c) {
case CSI:
term_state=TSTATE_DCEQ;
break;
case ESC:
term_state=TSTATE_ESC;
lastwaslf=0;
break;
case 12:
System.out.println(""String_Node_Str"");
C=R=0;
break;
case '\b':
C--;
if (C < 0) C=0;
lastwaslf=0;
break;
case '\t':
do {
C++;
}
 while (C < columns && (Tabs[C] == 0));
lastwaslf=0;
break;
case '\r':
C=0;
break;
case '\n':
if (debug > 3) System.out.println(""String_Node_Str"" + R + ""String_Node_Str""+ bm+ ""String_Node_Str""+ tm+ ""String_Node_Str""+ rows);
if (!vms) {
if (lastwaslf != 0 && lastwaslf != c) break;
lastwaslf=c;
}
if (R == bm || R >= rows - 1) insertLine(R,1);
 else R++;
break;
case 7:
beep();
break;
case '\016':
gl=1;
break;
case '\017':
gl=0;
break;
default :
lastwaslf=0;
if (c < 32) {
if (c != 0) if (debug > 0) System.out.println(""String_Node_Str"" + ((int)c));
break;
}
if (C >= columns) {
if (R < rows - 1) R++;
 else insertLine(R,SCROLL_UP);
C=0;
}
if (gx[gl] == '0') {
if (c >= '\u005f' && c <= '\u007e') {
if (debug > 3) System.out.print(""String_Node_Str"" + c + ""String_Node_Str""+ ((short)c - 0x5f)+ ""String_Node_Str"");
c=DECSPECIAL[(short)c - 0x5f];
if (debug > 3) System.out.println(c + ""String_Node_Str"" + (int)c+ ""String_Node_Str"");
}
}
if (debug > 4) System.out.println(""String_Node_Str"" + c + ""String_Node_Str""+ C+ ""String_Node_Str""+ R);
if (useibmcharset) c=map_cp850_unicode(c);
if (debug > 4) System.out.println(""String_Node_Str"" + c + ""String_Node_Str""+ C+ ""String_Node_Str""+ R);
if (insertmode == 1) {
insertChar(C,R,c,attributes);
}
 else {
putChar(C,R,c,attributes);
}
C++;
break;
}
break;
case TSTATE_OSC:
if ((c < 0x20) && (c != ESC)) {
handle_osc(osc);
term_state=TSTATE_DATA;
break;
}
if (c == '\\' && osc.charAt(osc.length() - 1) == ESC) {
handle_osc(osc);
term_state=TSTATE_DATA;
break;
}
osc=osc + c;
break;
case TSTATE_ESC:
term_state=TSTATE_DATA;
switch (c) {
case '#':
term_state=TSTATE_ESCSQUARE;
break;
case 'c':
gx[0]='B';
gx[1]='0';
gx[2]='A';
gx[3]='<';
gl=0;
gr=1;
int nw=getColumns();
if (nw < 132) nw=132;
Tabs=new byte[nw];
for (int i=0; i < nw; i+=8) {
Tabs[i]=1;
}
break;
case '[':
DCEvar=0;
DCEvars[0]=0;
DCEvars[1]=0;
DCEvars[2]=0;
DCEvars[3]=0;
term_state=TSTATE_CSI;
break;
case ']':
osc=""String_Node_Str"";
term_state=TSTATE_OSC;
break;
case 'P':
dcs=""String_Node_Str"";
term_state=TSTATE_DCS;
break;
case 'E':
if (R == tm - 1 || R == bm || R == rows - 1) insertLine(R,1,SCROLL_UP);
 else R++;
C=0;
if (debug > 1) System.out.println(""String_Node_Str"" + R + ""String_Node_Str"");
break;
case 'D':
if (R == tm - 1 || R == bm || R == rows - 1) insertLine(R,1,SCROLL_UP);
 else R++;
if (debug > 1) System.out.println(""String_Node_Str"" + R + ""String_Node_Str"");
break;
case 'M':
if ((R >= tm) && (R <= bm)) insertLine(R,1,SCROLL_DOWN);
if (debug > 1) System.out.println(""String_Node_Str"");
break;
case 'H':
if (debug > 1) System.out.println(""String_Node_Str"" + C);
if (C >= columns) C=columns - 1;
Tabs[C]=1;
break;
case '=':
if (debug > 0) System.out.println(""String_Node_Str"");
break;
case '>':
if (debug > 0) System.out.println(""String_Node_Str"");
break;
case '7':
Sc=C;
Sr=R;
Sgl=gl;
Sgr=gr;
Sa=attributes;
Sgx=new char[4];
for (int i=0; i < 4; i++) Sgx[i]=gx[i];
Stm=getTopMargin();
Sbm=getBottomMargin();
if (debug > 1) System.out.println(""String_Node_Str"");
break;
case '8':
C=Sc;
R=Sr;
gl=Sgl;
gr=Sgr;
for (int i=0; i < 4; i++) gx[i]=Sgx[i];
setTopMargin(Stm);
setBottomMargin(Sbm);
attributes=Sa;
if (debug > 1) System.out.println(""String_Node_Str"");
break;
case '(':
term_state=TSTATE_SETG0;
break;
case ')':
term_state=TSTATE_SETG1;
break;
case '*':
term_state=TSTATE_SETG2;
break;
case '+':
term_state=TSTATE_SETG3;
break;
case '~':
gr=1;
break;
case 'n':
gl=2;
break;
case '}':
gr=2;
break;
case 'o':
gl=3;
break;
case '|':
gr=3;
break;
default :
System.out.println(""String_Node_Str"" + ((int)c) + ""String_Node_Str"");
break;
}
break;
case TSTATE_SETG0:
if (c != '0' && c != 'A' && c != 'B') System.out.println(""String_Node_Str"" + c + ""String_Node_Str""+ ((int)c)+ ""String_Node_Str"");
 else {
if (debug > 2) System.out.println(""String_Node_Str"" + c + ""String_Node_Str""+ ((int)c)+ ""String_Node_Str"");
gx[0]=c;
}
term_state=TSTATE_DATA;
break;
case TSTATE_SETG1:
if (c != '0' && c != 'A' && c != 'B') {
System.out.println(""String_Node_Str"" + c + ""String_Node_Str""+ ((int)c)+ ""String_Node_Str"");
}
 else {
if (debug > 2) System.out.println(""String_Node_Str"" + c + ""String_Node_Str""+ ((int)c)+ ""String_Node_Str"");
gx[1]=c;
}
term_state=TSTATE_DATA;
break;
case TSTATE_SETG2:
if (c != '0' && c != 'A' && c != 'B') System.out.println(""String_Node_Str"" + ((int)c) + ""String_Node_Str"");
 else {
if (debug > 2) System.out.println(""String_Node_Str"" + c + ""String_Node_Str""+ ((int)c)+ ""String_Node_Str"");
gx[2]=c;
}
term_state=TSTATE_DATA;
break;
case TSTATE_SETG3:
if (c != '0' && c != 'A' && c != 'B') System.out.println(""String_Node_Str"" + ((int)c) + ""String_Node_Str"");
 else {
if (debug > 2) System.out.println(""String_Node_Str"" + c + ""String_Node_Str""+ ((int)c)+ ""String_Node_Str"");
gx[3]=c;
}
term_state=TSTATE_DATA;
break;
case TSTATE_ESCSQUARE:
switch (c) {
case '8':
for (int i=0; i < columns; i++) for (int j=0; j < rows; j++) putChar(i,j,'E',0);
break;
default :
System.out.println(""String_Node_Str"" + c + ""String_Node_Str"");
break;
}
term_state=TSTATE_DATA;
break;
case TSTATE_DCS:
if (c == '\\' && dcs.charAt(dcs.length() - 1) == ESC) {
handle_dcs(dcs);
term_state=TSTATE_DATA;
break;
}
dcs=dcs + c;
break;
case TSTATE_DCEQ:
term_state=TSTATE_DATA;
switch (c) {
case '0':
case '1':
case '2':
case '3':
case '4':
case '5':
case '6':
case '7':
case '8':
case '9':
DCEvars[DCEvar]=DCEvars[DCEvar] * 10 + ((int)c) - 48;
term_state=TSTATE_DCEQ;
break;
case ';':
DCEvar++;
DCEvars[DCEvar]=0;
term_state=TSTATE_DCEQ;
break;
case 's':
if (true || debug > 1) System.out.println(""String_Node_Str"" + DCEvars[0] + ""String_Node_Str"");
break;
case 'r':
if (true || debug > 1) System.out.println(""String_Node_Str"" + DCEvars[0] + ""String_Node_Str"");
for (i=0; i <= DCEvar; i++) {
switch (DCEvars[i]) {
case 3:
size=getSize();
setScreenSize(80,rows);
break;
case 4:
break;
case 5:
break;
case 6:
moveoutsidemargins=true;
break;
case 12:
break;
case 9:
case 1000:
case 1001:
case 1002:
case 1003:
mouserpt=DCEvars[i];
break;
default :
System.out.println(""String_Node_Str"" + DCEvars[0] + ""String_Node_Str"");
}
}
break;
case 'h':
if (debug > 0) System.out.println(""String_Node_Str"" + DCEvars[0] + ""String_Node_Str"");
for (i=0; i <= DCEvar; i++) {
switch (DCEvars[i]) {
case 1:
KeyUp[0]=""String_Node_Str"";
KeyDown[0]=""String_Node_Str"";
KeyRight[0]=""String_Node_Str"";
KeyLeft[0]=""String_Node_Str"";
break;
case 3:
size=getSize();
setScreenSize(132,rows);
break;
case 6:
moveoutsidemargins=false;
break;
case 25:
showCursor(true);
redraw();
break;
case 9:
case 1000:
case 1001:
case 1002:
case 1003:
mouserpt=DCEvars[i];
break;
default :
System.out.println(""String_Node_Str"" + DCEvars[0] + ""String_Node_Str"");
break;
}
}
break;
case 'i':
switch (DCEvars[0]) {
case 1:
if (debug > 1) System.out.println(""String_Node_Str"");
break;
case 4:
if (debug > 1) System.out.println(""String_Node_Str"");
break;
case 5:
if (debug > 1) System.out.println(""String_Node_Str"");
break;
}
break;
case 'l':
if (debug > 0) System.out.println(""String_Node_Str"" + DCEvars[0] + ""String_Node_Str"");
for (i=0; i <= DCEvar; i++) {
switch (DCEvars[i]) {
case 1:
KeyUp[0]=""String_Node_Str"";
KeyDown[0]=""String_Node_Str"";
KeyRight[0]=""String_Node_Str"";
KeyLeft[0]=""String_Node_Str"";
break;
case 3:
size=getSize();
setScreenSize(80,rows);
break;
case 6:
moveoutsidemargins=true;
break;
case 25:
showCursor(false);
redraw();
break;
case 9:
case 1000:
case 1001:
case 1002:
case 1003:
mouserpt=0;
break;
default :
System.out.println(""String_Node_Str"" + DCEvars[0] + ""String_Node_Str"");
break;
}
}
break;
case 'n':
if (debug > 0) System.out.println(""String_Node_Str"" + DCEvars[0] + ""String_Node_Str"");
switch (DCEvars[0]) {
case 15:
write(((char)ESC) + ""String_Node_Str"",false);
System.out.println(""String_Node_Str"");
break;
default :
System.out.println(""String_Node_Str"" + DCEvars[0] + ""String_Node_Str"");
break;
}
break;
default :
System.out.println(""String_Node_Str"" + DCEvars[0] + ""String_Node_Str""+ c+ ""String_Node_Str"");
break;
}
break;
case TSTATE_CSI_EX:
term_state=TSTATE_DATA;
switch (c) {
case ESC:
term_state=TSTATE_ESC;
break;
default :
System.out.println(""String_Node_Str"" + (int)c);
break;
}
break;
case TSTATE_CSI_DOLLAR:
term_state=TSTATE_DATA;
switch (c) {
case '}':
System.out.println(""String_Node_Str"" + DCEvars[0]);
statusmode=DCEvars[0];
break;
case '~':
System.out.println(""String_Node_Str"" + DCEvars[0]);
break;
default :
System.out.println(""String_Node_Str"" + c + ""String_Node_Str""+ DCEvars[0]);
break;
}
break;
case TSTATE_CSI:
term_state=TSTATE_DATA;
switch (c) {
case '$':
term_state=TSTATE_CSI_DOLLAR;
break;
case '!':
term_state=TSTATE_CSI_EX;
break;
case '?':
DCEvar=0;
DCEvars[0]=0;
term_state=TSTATE_DCEQ;
break;
case '0':
case '1':
case '2':
case '3':
case '4':
case '5':
case '6':
case '7':
case '8':
case '9':
DCEvars[DCEvar]=DCEvars[DCEvar] * 10 + ((int)c) - 48;
term_state=TSTATE_CSI;
break;
case ';':
DCEvar++;
DCEvars[DCEvar]=0;
term_state=TSTATE_CSI;
break;
case 'c':
write(((char)ESC) + ""String_Node_Str"",false);
if (debug > 1) System.out.println(""String_Node_Str"" + DCEvars[0] + ""String_Node_Str"");
break;
case 'q':
if (debug > 1) System.out.println(""String_Node_Str"" + DCEvars[0] + ""String_Node_Str"");
break;
case 'g':
switch (DCEvars[0]) {
case 3:
int nw=getColumns();
Tabs=new byte[nw];
break;
case 0:
Tabs[C]=0;
break;
}
if (debug > 1) System.out.println(""String_Node_Str"" + DCEvars[0] + ""String_Node_Str"");
break;
case 'h':
switch (DCEvars[0]) {
case 4:
insertmode=1;
break;
case 20:
System.out.println(""String_Node_Str"");
sendcrlf=true;
break;
default :
System.out.println(""String_Node_Str"" + DCEvars[0] + ""String_Node_Str"");
break;
}
if (debug > 1) System.out.println(""String_Node_Str"" + DCEvars[0] + ""String_Node_Str"");
break;
case 'i':
switch (DCEvars[0]) {
case 0:
if (debug > 1) System.out.println(""String_Node_Str"");
break;
case 4:
if (debug > 1) System.out.println(""String_Node_Str"");
break;
case 5:
if (debug > 1) System.out.println(""String_Node_Str"");
break;
default :
System.out.println(""String_Node_Str"" + DCEvars[0] + ""String_Node_Str"");
}
break;
case 'l':
switch (DCEvars[0]) {
case 4:
insertmode=0;
break;
case 20:
System.out.println(""String_Node_Str"");
sendcrlf=false;
break;
default :
System.out.println(""String_Node_Str"" + DCEvars[0] + ""String_Node_Str"");
break;
}
break;
case 'A':
{
int limit;
if (R > bm) limit=bm + 1;
 else if (R >= tm) {
limit=tm;
}
 else limit=0;
if (DCEvars[0] == 0) R--;
 else R-=DCEvars[0];
if (R < limit) R=limit;
if (debug > 1) System.out.println(""String_Node_Str"" + DCEvars[0] + ""String_Node_Str"");
break;
}
case 'B':
{
int limit;
if (R < tm) limit=tm - 1;
 else if (R <= bm) {
limit=bm;
}
 else limit=rows - 1;
if (DCEvars[0] == 0) R++;
 else R+=DCEvars[0];
if (R > limit) R=limit;
 else {
if (debug > 2) System.out.println(""String_Node_Str"");
}
if (debug > 2) System.out.println(""String_Node_Str"" + R);
if (debug > 1) System.out.println(""String_Node_Str"" + DCEvars[0] + ""String_Node_Str""+ C+ ""String_Node_Str"");
break;
}
case 'C':
if (DCEvars[0] == 0) C++;
 else C+=DCEvars[0];
if (C > columns - 1) C=columns - 1;
if (debug > 1) System.out.println(""String_Node_Str"" + DCEvars[0] + ""String_Node_Str"");
break;
case 'd':
R=DCEvars[0];
System.out.println(""String_Node_Str"" + DCEvars[0] + ""String_Node_Str"");
break;
case 'D':
if (DCEvars[0] == 0) C--;
 else C-=DCEvars[0];
if (C < 0) C=0;
if (debug > 1) System.out.println(""String_Node_Str"" + DCEvars[0] + ""String_Node_Str"");
break;
case 'r':
if (DCEvar > 0) {
R=DCEvars[1] - 1;
if (R < 0) R=rows - 1;
 else if (R >= rows) {
R=rows - 1;
}
}
 else R=rows - 1;
setBottomMargin(DCEvars[1] - 1);
if (R >= DCEvars[0]) {
R=DCEvars[0] - 1;
if (R < 0) R=0;
}
setTopMargin(DCEvars[0] - 1);
_SetCursor(0,0);
if (debug > 1) System.out.println(""String_Node_Str"" + DCEvars[0] + ""String_Node_Str""+ DCEvars[1]+ ""String_Node_Str"");
break;
case 'G':
C=DCEvars[0];
if (debug > 1) System.out.println(""String_Node_Str"" + DCEvars[0] + ""String_Node_Str"");
break;
case 'H':
_SetCursor(DCEvars[0] - 1,DCEvars[1] - 1);
if (debug > 2) {
System.out.println(""String_Node_Str"" + DCEvars[0] + ""String_Node_Str""+ DCEvars[1]+ ""String_Node_Str""+ moveoutsidemargins);
System.out.println(""String_Node_Str"" + R + ""String_Node_Str""+ C);
}
break;
case 'f':
R=DCEvars[0] - 1;
C=DCEvars[1] - 1;
if (C < 0) C=0;
if (R < 0) R=0;
if (debug > 2) System.out.println(""String_Node_Str"" + DCEvars[0] + ""String_Node_Str""+ DCEvars[1]+ ""String_Node_Str"");
break;
case 'L':
if (DCEvars[0] == 0) insertLine(R,SCROLL_DOWN);
 else insertLine(R,DCEvars[0],SCROLL_DOWN);
if (debug > 1) System.out.println(""String_Node_Str"" + DCEvars[0] + ""String_Node_Str""+ R+ ""String_Node_Str"");
break;
case 'M':
if (debug > 1) System.out.println(""String_Node_Str"" + DCEvars[0] + ""String_Node_Str""+ R);
if (DCEvars[0] == 0) deleteLine(R);
 else for (int i=0; i < DCEvars[0]; i++) deleteLine(R);
break;
case 'K':
if (debug > 1) System.out.println(""String_Node_Str"" + DCEvars[0] + ""String_Node_Str"");
switch (DCEvars[0]) {
case 0:
if (C < columns - 1) deleteArea(C,R,columns - C,1);
break;
case 1:
if (C > 0) deleteArea(0,R,C + 1,1);
break;
case 2:
deleteArea(0,R,columns,1);
break;
}
break;
case 'J':
switch (DCEvars[0]) {
case 0:
if (R < rows - 1) deleteArea(0,R + 1,columns,rows - R - 1);
if (C < columns - 1) deleteArea(C,R,columns - C,1);
break;
case 1:
if (R > 0) deleteArea(0,0,columns,R);
if (C > 0) deleteArea(0,R,C,1);
break;
case 2:
deleteArea(0,0,columns,rows);
break;
}
if (debug > 1) System.out.println(""String_Node_Str"" + DCEvars[0] + ""String_Node_Str"");
break;
case '@':
if (debug > 1) System.out.println(""String_Node_Str"" + DCEvars[0] + ""String_Node_Str"");
for (int i=0; i < DCEvars[0]; i++) insertChar(C,R,' ',attributes);
break;
case 'P':
if (debug > 1) System.out.println(""String_Node_Str"" + DCEvars[0] + ""String_Node_Str""+ C+ ""String_Node_Str""+ R);
if (DCEvars[0] == 0) DCEvars[0]=1;
for (int i=0; i < DCEvars[0]; i++) deleteChar(C,R);
break;
case 'n':
switch (DCEvars[0]) {
case 5:
write(((char)ESC) + ""String_Node_Str"",false);
if (debug > 1) System.out.println(""String_Node_Str"");
break;
case 6:
write(((char)ESC) + ""String_Node_Str"" + R+ ""String_Node_Str""+ C+ ""String_Node_Str"",false);
if (debug > 1) System.out.println(""String_Node_Str"");
break;
default :
if (debug > 0) System.out.println(""String_Node_Str"" + DCEvars[0] + ""String_Node_Str"");
break;
}
break;
case 's':
Sc=C;
Sr=R;
Sa=attributes;
if (debug > 3) System.out.println(""String_Node_Str"");
break;
case 'u':
C=Sc;
R=Sr;
attributes=Sa;
if (debug > 3) System.out.println(""String_Node_Str"");
break;
case 'm':
if (debug > 3) System.out.print(""String_Node_Str"");
if (DCEvar == 0 && DCEvars[0] == 0) attributes=0;
for (i=0; i <= DCEvar; i++) {
switch (DCEvars[i]) {
case 0:
if (DCEvar > 0) attributes=0;
break;
case 4:
attributes|=UNDERLINE;
break;
case 1:
attributes|=BOLD;
break;
case 7:
attributes|=INVERT;
break;
case 5:
break;
case 25:
break;
case 27:
attributes&=~INVERT;
break;
case 24:
attributes&=~UNDERLINE;
break;
case 22:
attributes&=~BOLD;
break;
case 30:
case 31:
case 32:
case 33:
case 34:
case 35:
case 36:
case 37:
attributes&=~(0xf << 3);
attributes|=((DCEvars[i] - 30) + 1) << 3;
break;
case 39:
attributes&=~(0xf << 3);
break;
case 40:
case 41:
case 42:
case 43:
case 44:
case 45:
case 46:
case 47:
attributes&=~(0xf << 7);
attributes|=((DCEvars[i] - 40) + 1) << 7;
break;
case 49:
attributes&=~(0xf << 7);
break;
default :
System.out.println(""String_Node_Str"" + DCEvars[i] + ""String_Node_Str"");
break;
}
if (debug > 3) System.out.print(""String_Node_Str"" + DCEvars[i] + ""String_Node_Str"");
}
if (debug > 3) System.out.print(""String_Node_Str"" + attributes + ""String_Node_Str"");
break;
default :
System.out.println(""String_Node_Str"" + c + ""String_Node_Str""+ ((int)c)+ ""String_Node_Str"");
break;
}
break;
default :
term_state=TSTATE_DATA;
break;
}
if (C > columns) C=columns;
if (R > rows) R=rows;
if (C < 0) C=0;
if (R < 0) R=0;
if (doshowcursor) setCursorPosition(C,R);
markLine(R,1);
}","private void putChar(char c,boolean doshowcursor){
  Dimension size;
  int rows=getRows();
  int columns=getColumns();
  int tm=getTopMargin();
  int bm=getBottomMargin();
  byte msg[];
  if (debug > 4)   System.out.println(""String_Node_Str"" + c + ""String_Node_Str""+ ((int)c)+ ""String_Node_Str""+ R+ ""String_Node_Str""+ C+ ""String_Node_Str""+ columns+ ""String_Node_Str""+ rows);
  markLine(R,1);
  if (c > 255) {
    if (debug > 0)     System.out.println(""String_Node_Str"" + (int)c);
  }
switch (term_state) {
case TSTATE_DATA:
    if (!useibmcharset) {
      boolean doneflag=true;
switch (c) {
case OSC:
        osc=""String_Node_Str"";
      term_state=TSTATE_OSC;
    break;
case RI:
  if (R > tm)   R--;
 else   insertLine(R,1,SCROLL_DOWN);
if (debug > 1) System.out.println(""String_Node_Str"");
break;
case IND:
if (R == tm - 1 || R == bm || R == rows - 1) insertLine(R,1,SCROLL_UP);
 else R++;
if (debug > 1) System.out.println(""String_Node_Str"" + R + ""String_Node_Str"");
break;
case NEL:
if (R == tm - 1 || R == bm || R == rows - 1) insertLine(R,1,SCROLL_UP);
 else R++;
C=0;
if (debug > 1) System.out.println(""String_Node_Str"" + R + ""String_Node_Str"");
break;
case HTS:
Tabs[C]=1;
if (debug > 1) System.out.println(""String_Node_Str"");
break;
case DCS:
dcs=""String_Node_Str"";
term_state=TSTATE_DCS;
break;
default :
doneflag=false;
break;
}
if (doneflag) break;
}
switch (c) {
case CSI:
term_state=TSTATE_DCEQ;
break;
case ESC:
term_state=TSTATE_ESC;
lastwaslf=0;
break;
case 12:
System.out.println(""String_Node_Str"");
C=R=0;
break;
case '\b':
C--;
if (C < 0) C=0;
lastwaslf=0;
break;
case '\t':
do {
C++;
}
 while (C < columns && (Tabs[C] == 0));
lastwaslf=0;
break;
case '\r':
C=0;
break;
case '\n':
if (debug > 3) System.out.println(""String_Node_Str"" + R + ""String_Node_Str""+ bm+ ""String_Node_Str""+ tm+ ""String_Node_Str""+ rows);
if (!vms) {
if (lastwaslf != 0 && lastwaslf != c) break;
lastwaslf=c;
}
if (R == bm || R >= rows - 1) insertLine(R,1);
 else R++;
break;
case 7:
beep();
break;
case '\016':
gl=1;
break;
case '\017':
gl=0;
break;
default :
lastwaslf=0;
if (c < 32) {
if (c != 0) if (debug > 0) System.out.println(""String_Node_Str"" + ((int)c));
break;
}
if (C >= columns) {
if (R < rows - 1) R++;
 else insertLine(R,SCROLL_UP);
C=0;
}
if (gx[gl] == '0') {
if (c >= '\u005f' && c <= '\u007e') {
if (debug > 3) System.out.print(""String_Node_Str"" + c + ""String_Node_Str""+ ((short)c - 0x5f)+ ""String_Node_Str"");
c=DECSPECIAL[(short)c - 0x5f];
if (debug > 3) System.out.println(c + ""String_Node_Str"" + (int)c+ ""String_Node_Str"");
}
}
if (debug > 4) System.out.println(""String_Node_Str"" + c + ""String_Node_Str""+ C+ ""String_Node_Str""+ R);
if (useibmcharset) c=map_cp850_unicode(c);
if (debug > 4) System.out.println(""String_Node_Str"" + c + ""String_Node_Str""+ C+ ""String_Node_Str""+ R);
if (insertmode == 1) {
insertChar(C,R,c,attributes);
}
 else {
putChar(C,R,c,attributes);
}
C++;
break;
}
break;
case TSTATE_OSC:
if ((c < 0x20) && (c != ESC)) {
handle_osc(osc);
term_state=TSTATE_DATA;
break;
}
if (c == '\\' && osc.charAt(osc.length() - 1) == ESC) {
handle_osc(osc);
term_state=TSTATE_DATA;
break;
}
osc=osc + c;
break;
case TSTATE_ESC:
term_state=TSTATE_DATA;
switch (c) {
case '#':
term_state=TSTATE_ESCSQUARE;
break;
case 'c':
gx[0]='B';
gx[1]='0';
gx[2]='A';
gx[3]='<';
gl=0;
gr=1;
int nw=getColumns();
if (nw < 132) nw=132;
Tabs=new byte[nw];
for (int i=0; i < nw; i+=8) {
Tabs[i]=1;
}
break;
case '[':
DCEvar=0;
DCEvars[0]=0;
DCEvars[1]=0;
DCEvars[2]=0;
DCEvars[3]=0;
term_state=TSTATE_CSI;
break;
case ']':
osc=""String_Node_Str"";
term_state=TSTATE_OSC;
break;
case 'P':
dcs=""String_Node_Str"";
term_state=TSTATE_DCS;
break;
case 'E':
if (R == tm - 1 || R == bm || R == rows - 1) insertLine(R,1,SCROLL_UP);
 else R++;
C=0;
if (debug > 1) System.out.println(""String_Node_Str"" + R + ""String_Node_Str"");
break;
case 'D':
if (R == tm - 1 || R == bm || R == rows - 1) insertLine(R,1,SCROLL_UP);
 else R++;
if (debug > 1) System.out.println(""String_Node_Str"" + R + ""String_Node_Str"");
break;
case 'M':
if ((R >= tm) && (R <= bm)) insertLine(R,1,SCROLL_DOWN);
if (debug > 1) System.out.println(""String_Node_Str"");
break;
case 'H':
if (debug > 1) System.out.println(""String_Node_Str"" + C);
if (C >= columns) C=columns - 1;
Tabs[C]=1;
break;
case '=':
if (debug > 0) System.out.println(""String_Node_Str"");
break;
case '>':
if (debug > 0) System.out.println(""String_Node_Str"");
break;
case '7':
Sc=C;
Sr=R;
Sgl=gl;
Sgr=gr;
Sa=attributes;
Sgx=new char[4];
for (int i=0; i < 4; i++) Sgx[i]=gx[i];
Stm=getTopMargin();
Sbm=getBottomMargin();
if (debug > 1) System.out.println(""String_Node_Str"");
break;
case '8':
C=Sc;
R=Sr;
gl=Sgl;
gr=Sgr;
for (int i=0; i < 4; i++) gx[i]=Sgx[i];
setTopMargin(Stm);
setBottomMargin(Sbm);
attributes=Sa;
if (debug > 1) System.out.println(""String_Node_Str"");
break;
case '(':
term_state=TSTATE_SETG0;
break;
case ')':
term_state=TSTATE_SETG1;
break;
case '*':
term_state=TSTATE_SETG2;
break;
case '+':
term_state=TSTATE_SETG3;
break;
case '~':
gr=1;
break;
case 'n':
gl=2;
break;
case '}':
gr=2;
break;
case 'o':
gl=3;
break;
case '|':
gr=3;
break;
default :
System.out.println(""String_Node_Str"" + ((int)c) + ""String_Node_Str"");
break;
}
break;
case TSTATE_SETG0:
if (c != '0' && c != 'A' && c != 'B') System.out.println(""String_Node_Str"" + c + ""String_Node_Str""+ ((int)c)+ ""String_Node_Str"");
 else {
if (debug > 2) System.out.println(""String_Node_Str"" + c + ""String_Node_Str""+ ((int)c)+ ""String_Node_Str"");
gx[0]=c;
}
term_state=TSTATE_DATA;
break;
case TSTATE_SETG1:
if (c != '0' && c != 'A' && c != 'B') {
System.out.println(""String_Node_Str"" + c + ""String_Node_Str""+ ((int)c)+ ""String_Node_Str"");
}
 else {
if (debug > 2) System.out.println(""String_Node_Str"" + c + ""String_Node_Str""+ ((int)c)+ ""String_Node_Str"");
gx[1]=c;
}
term_state=TSTATE_DATA;
break;
case TSTATE_SETG2:
if (c != '0' && c != 'A' && c != 'B') System.out.println(""String_Node_Str"" + ((int)c) + ""String_Node_Str"");
 else {
if (debug > 2) System.out.println(""String_Node_Str"" + c + ""String_Node_Str""+ ((int)c)+ ""String_Node_Str"");
gx[2]=c;
}
term_state=TSTATE_DATA;
break;
case TSTATE_SETG3:
if (c != '0' && c != 'A' && c != 'B') System.out.println(""String_Node_Str"" + ((int)c) + ""String_Node_Str"");
 else {
if (debug > 2) System.out.println(""String_Node_Str"" + c + ""String_Node_Str""+ ((int)c)+ ""String_Node_Str"");
gx[3]=c;
}
term_state=TSTATE_DATA;
break;
case TSTATE_ESCSQUARE:
switch (c) {
case '8':
for (int i=0; i < columns; i++) for (int j=0; j < rows; j++) putChar(i,j,'E',0);
break;
default :
System.out.println(""String_Node_Str"" + c + ""String_Node_Str"");
break;
}
term_state=TSTATE_DATA;
break;
case TSTATE_DCS:
if (c == '\\' && dcs.charAt(dcs.length() - 1) == ESC) {
handle_dcs(dcs);
term_state=TSTATE_DATA;
break;
}
dcs=dcs + c;
break;
case TSTATE_DCEQ:
term_state=TSTATE_DATA;
switch (c) {
case '0':
case '1':
case '2':
case '3':
case '4':
case '5':
case '6':
case '7':
case '8':
case '9':
DCEvars[DCEvar]=DCEvars[DCEvar] * 10 + ((int)c) - 48;
term_state=TSTATE_DCEQ;
break;
case ';':
DCEvar++;
DCEvars[DCEvar]=0;
term_state=TSTATE_DCEQ;
break;
case 's':
if (true || debug > 1) System.out.println(""String_Node_Str"" + DCEvars[0] + ""String_Node_Str"");
break;
case 'r':
if (true || debug > 1) System.out.println(""String_Node_Str"" + DCEvars[0] + ""String_Node_Str"");
for (i=0; i <= DCEvar; i++) {
switch (DCEvars[i]) {
case 3:
size=getSize();
setScreenSize(80,rows);
break;
case 4:
break;
case 5:
break;
case 6:
moveoutsidemargins=true;
break;
case 12:
break;
case 9:
case 1000:
case 1001:
case 1002:
case 1003:
mouserpt=DCEvars[i];
break;
default :
System.out.println(""String_Node_Str"" + DCEvars[0] + ""String_Node_Str"");
}
}
break;
case 'h':
if (debug > 0) System.out.println(""String_Node_Str"" + DCEvars[0] + ""String_Node_Str"");
for (i=0; i <= DCEvar; i++) {
switch (DCEvars[i]) {
case 1:
KeyUp[0]=""String_Node_Str"";
KeyDown[0]=""String_Node_Str"";
KeyRight[0]=""String_Node_Str"";
KeyLeft[0]=""String_Node_Str"";
break;
case 3:
size=getSize();
setScreenSize(132,rows);
break;
case 6:
moveoutsidemargins=false;
break;
case 25:
showCursor(true);
redraw();
break;
case 9:
case 1000:
case 1001:
case 1002:
case 1003:
mouserpt=DCEvars[i];
break;
default :
System.out.println(""String_Node_Str"" + DCEvars[0] + ""String_Node_Str"");
break;
}
}
break;
case 'i':
switch (DCEvars[0]) {
case 1:
if (debug > 1) System.out.println(""String_Node_Str"");
break;
case 4:
if (debug > 1) System.out.println(""String_Node_Str"");
break;
case 5:
if (debug > 1) System.out.println(""String_Node_Str"");
break;
}
break;
case 'l':
if (debug > 0) System.out.println(""String_Node_Str"" + DCEvars[0] + ""String_Node_Str"");
for (i=0; i <= DCEvar; i++) {
switch (DCEvars[i]) {
case 1:
KeyUp[0]=""String_Node_Str"";
KeyDown[0]=""String_Node_Str"";
KeyRight[0]=""String_Node_Str"";
KeyLeft[0]=""String_Node_Str"";
break;
case 3:
size=getSize();
setScreenSize(80,rows);
break;
case 6:
moveoutsidemargins=true;
break;
case 25:
showCursor(false);
redraw();
break;
case 9:
case 1000:
case 1001:
case 1002:
case 1003:
mouserpt=0;
break;
default :
System.out.println(""String_Node_Str"" + DCEvars[0] + ""String_Node_Str"");
break;
}
}
break;
case 'n':
if (debug > 0) System.out.println(""String_Node_Str"" + DCEvars[0] + ""String_Node_Str"");
switch (DCEvars[0]) {
case 15:
write(((char)ESC) + ""String_Node_Str"",false);
System.out.println(""String_Node_Str"");
break;
default :
System.out.println(""String_Node_Str"" + DCEvars[0] + ""String_Node_Str"");
break;
}
break;
default :
System.out.println(""String_Node_Str"" + DCEvars[0] + ""String_Node_Str""+ c+ ""String_Node_Str"");
break;
}
break;
case TSTATE_CSI_EX:
term_state=TSTATE_DATA;
switch (c) {
case ESC:
term_state=TSTATE_ESC;
break;
default :
System.out.println(""String_Node_Str"" + (int)c);
break;
}
break;
case TSTATE_CSI_DOLLAR:
term_state=TSTATE_DATA;
switch (c) {
case '}':
System.out.println(""String_Node_Str"" + DCEvars[0]);
statusmode=DCEvars[0];
break;
case '~':
System.out.println(""String_Node_Str"" + DCEvars[0]);
break;
default :
System.out.println(""String_Node_Str"" + c + ""String_Node_Str""+ DCEvars[0]);
break;
}
break;
case TSTATE_CSI:
term_state=TSTATE_DATA;
switch (c) {
case '$':
term_state=TSTATE_CSI_DOLLAR;
break;
case '!':
term_state=TSTATE_CSI_EX;
break;
case '?':
DCEvar=0;
DCEvars[0]=0;
term_state=TSTATE_DCEQ;
break;
case '0':
case '1':
case '2':
case '3':
case '4':
case '5':
case '6':
case '7':
case '8':
case '9':
DCEvars[DCEvar]=DCEvars[DCEvar] * 10 + ((int)c) - 48;
term_state=TSTATE_CSI;
break;
case ';':
DCEvar++;
DCEvars[DCEvar]=0;
term_state=TSTATE_CSI;
break;
case 'c':
write(((char)ESC) + ""String_Node_Str"",false);
if (debug > 1) System.out.println(""String_Node_Str"" + DCEvars[0] + ""String_Node_Str"");
break;
case 'q':
if (debug > 1) System.out.println(""String_Node_Str"" + DCEvars[0] + ""String_Node_Str"");
break;
case 'g':
switch (DCEvars[0]) {
case 3:
int nw=getColumns();
Tabs=new byte[nw];
break;
case 0:
Tabs[C]=0;
break;
}
if (debug > 1) System.out.println(""String_Node_Str"" + DCEvars[0] + ""String_Node_Str"");
break;
case 'h':
switch (DCEvars[0]) {
case 4:
insertmode=1;
break;
case 20:
System.out.println(""String_Node_Str"");
sendcrlf=true;
break;
default :
System.out.println(""String_Node_Str"" + DCEvars[0] + ""String_Node_Str"");
break;
}
if (debug > 1) System.out.println(""String_Node_Str"" + DCEvars[0] + ""String_Node_Str"");
break;
case 'i':
switch (DCEvars[0]) {
case 0:
if (debug > 1) System.out.println(""String_Node_Str"");
break;
case 4:
if (debug > 1) System.out.println(""String_Node_Str"");
break;
case 5:
if (debug > 1) System.out.println(""String_Node_Str"");
break;
default :
System.out.println(""String_Node_Str"" + DCEvars[0] + ""String_Node_Str"");
}
break;
case 'l':
switch (DCEvars[0]) {
case 4:
insertmode=0;
break;
case 20:
System.out.println(""String_Node_Str"");
sendcrlf=false;
break;
default :
System.out.println(""String_Node_Str"" + DCEvars[0] + ""String_Node_Str"");
break;
}
break;
case 'A':
{
int limit;
if (R > bm) limit=bm + 1;
 else if (R >= tm) {
limit=tm;
}
 else limit=0;
if (DCEvars[0] == 0) R--;
 else R-=DCEvars[0];
if (R < limit) R=limit;
if (debug > 1) System.out.println(""String_Node_Str"" + DCEvars[0] + ""String_Node_Str"");
break;
}
case 'B':
{
int limit;
if (R < tm) limit=tm - 1;
 else if (R <= bm) {
limit=bm;
}
 else limit=rows - 1;
if (DCEvars[0] == 0) R++;
 else R+=DCEvars[0];
if (R > limit) R=limit;
 else {
if (debug > 2) System.out.println(""String_Node_Str"");
}
if (debug > 2) System.out.println(""String_Node_Str"" + R);
if (debug > 1) System.out.println(""String_Node_Str"" + DCEvars[0] + ""String_Node_Str""+ C+ ""String_Node_Str"");
break;
}
case 'C':
if (DCEvars[0] == 0) C++;
 else C+=DCEvars[0];
if (C > columns - 1) C=columns - 1;
if (debug > 1) System.out.println(""String_Node_Str"" + DCEvars[0] + ""String_Node_Str"");
break;
case 'd':
R=DCEvars[0];
System.out.println(""String_Node_Str"" + DCEvars[0] + ""String_Node_Str"");
break;
case 'D':
if (DCEvars[0] == 0) C--;
 else C-=DCEvars[0];
if (C < 0) C=0;
if (debug > 1) System.out.println(""String_Node_Str"" + DCEvars[0] + ""String_Node_Str"");
break;
case 'r':
if (DCEvar > 0) {
R=DCEvars[1] - 1;
if (R < 0) R=rows - 1;
 else if (R >= rows) {
R=rows - 1;
}
}
 else R=rows - 1;
setBottomMargin(DCEvars[1] - 1);
if (R >= DCEvars[0]) {
R=DCEvars[0] - 1;
if (R < 0) R=0;
}
setTopMargin(DCEvars[0] - 1);
_SetCursor(0,0);
if (debug > 1) System.out.println(""String_Node_Str"" + DCEvars[0] + ""String_Node_Str""+ DCEvars[1]+ ""String_Node_Str"");
break;
case 'G':
C=DCEvars[0];
if (debug > 1) System.out.println(""String_Node_Str"" + DCEvars[0] + ""String_Node_Str"");
break;
case 'H':
_SetCursor(DCEvars[0] - 1,DCEvars[1] - 1);
if (debug > 2) {
System.out.println(""String_Node_Str"" + DCEvars[0] + ""String_Node_Str""+ DCEvars[1]+ ""String_Node_Str""+ moveoutsidemargins);
System.out.println(""String_Node_Str"" + R + ""String_Node_Str""+ C);
}
break;
case 'f':
R=DCEvars[0] - 1;
C=DCEvars[1] - 1;
if (C < 0) C=0;
if (R < 0) R=0;
if (debug > 2) System.out.println(""String_Node_Str"" + DCEvars[0] + ""String_Node_Str""+ DCEvars[1]+ ""String_Node_Str"");
break;
case 'L':
if (DCEvars[0] == 0) insertLine(R,SCROLL_DOWN);
 else insertLine(R,DCEvars[0],SCROLL_DOWN);
if (debug > 1) System.out.println(""String_Node_Str"" + DCEvars[0] + ""String_Node_Str""+ R+ ""String_Node_Str"");
break;
case 'M':
if (debug > 1) System.out.println(""String_Node_Str"" + DCEvars[0] + ""String_Node_Str""+ R);
if (DCEvars[0] == 0) deleteLine(R);
 else for (int i=0; i < DCEvars[0]; i++) deleteLine(R);
break;
case 'K':
if (debug > 1) System.out.println(""String_Node_Str"" + DCEvars[0] + ""String_Node_Str"");
switch (DCEvars[0]) {
case 0:
if (C < columns - 1) deleteArea(C,R,columns - C,1);
break;
case 1:
if (C > 0) deleteArea(0,R,C + 1,1);
break;
case 2:
deleteArea(0,R,columns,1);
break;
}
break;
case 'J':
switch (DCEvars[0]) {
case 0:
if (R < rows - 1) deleteArea(0,R + 1,columns,rows - R - 1);
if (C < columns - 1) deleteArea(C,R,columns - C,1);
break;
case 1:
if (R > 0) deleteArea(0,0,columns,R);
if (C > 0) deleteArea(0,R,C + 1,1);
break;
case 2:
deleteArea(0,0,columns,rows);
break;
}
if (debug > 1) System.out.println(""String_Node_Str"" + DCEvars[0] + ""String_Node_Str"");
break;
case '@':
if (debug > 1) System.out.println(""String_Node_Str"" + DCEvars[0] + ""String_Node_Str"");
for (int i=0; i < DCEvars[0]; i++) insertChar(C,R,' ',attributes);
break;
case 'P':
if (debug > 1) System.out.println(""String_Node_Str"" + DCEvars[0] + ""String_Node_Str""+ C+ ""String_Node_Str""+ R);
if (DCEvars[0] == 0) DCEvars[0]=1;
for (int i=0; i < DCEvars[0]; i++) deleteChar(C,R);
break;
case 'n':
switch (DCEvars[0]) {
case 5:
write(((char)ESC) + ""String_Node_Str"",false);
if (debug > 1) System.out.println(""String_Node_Str"");
break;
case 6:
write(((char)ESC) + ""String_Node_Str"" + R+ ""String_Node_Str""+ C+ ""String_Node_Str"",false);
if (debug > 1) System.out.println(""String_Node_Str"");
break;
default :
if (debug > 0) System.out.println(""String_Node_Str"" + DCEvars[0] + ""String_Node_Str"");
break;
}
break;
case 's':
Sc=C;
Sr=R;
Sa=attributes;
if (debug > 3) System.out.println(""String_Node_Str"");
break;
case 'u':
C=Sc;
R=Sr;
attributes=Sa;
if (debug > 3) System.out.println(""String_Node_Str"");
break;
case 'm':
if (debug > 3) System.out.print(""String_Node_Str"");
if (DCEvar == 0 && DCEvars[0] == 0) attributes=0;
for (i=0; i <= DCEvar; i++) {
switch (DCEvars[i]) {
case 0:
if (DCEvar > 0) attributes=0;
break;
case 4:
attributes|=UNDERLINE;
break;
case 1:
attributes|=BOLD;
break;
case 7:
attributes|=INVERT;
break;
case 5:
break;
case 25:
break;
case 27:
attributes&=~INVERT;
break;
case 24:
attributes&=~UNDERLINE;
break;
case 22:
attributes&=~BOLD;
break;
case 30:
case 31:
case 32:
case 33:
case 34:
case 35:
case 36:
case 37:
attributes&=~(0xf << 3);
attributes|=((DCEvars[i] - 30) + 1) << 3;
break;
case 39:
attributes&=~(0xf << 3);
break;
case 40:
case 41:
case 42:
case 43:
case 44:
case 45:
case 46:
case 47:
attributes&=~(0xf << 7);
attributes|=((DCEvars[i] - 40) + 1) << 7;
break;
case 49:
attributes&=~(0xf << 7);
break;
default :
System.out.println(""String_Node_Str"" + DCEvars[i] + ""String_Node_Str"");
break;
}
if (debug > 3) System.out.print(""String_Node_Str"" + DCEvars[i] + ""String_Node_Str"");
}
if (debug > 3) System.out.print(""String_Node_Str"" + attributes + ""String_Node_Str"");
break;
default :
System.out.println(""String_Node_Str"" + c + ""String_Node_Str""+ ((int)c)+ ""String_Node_Str"");
break;
}
break;
default :
term_state=TSTATE_DATA;
break;
}
if (C > columns) C=columns;
if (R > rows) R=rows;
if (C < 0) C=0;
if (R < 0) R=0;
if (doshowcursor) setCursorPosition(C,R);
markLine(R,1);
}",0.9998853013706486
143916,"private void putChar(char c,boolean doshowcursor){
  Dimension size;
  int rows=getRows();
  int columns=getColumns();
  int tm=getTopMargin();
  int bm=getBottomMargin();
  byte msg[];
  if (debug > 4)   System.out.println(""String_Node_Str"" + c + ""String_Node_Str""+ ((int)c)+ ""String_Node_Str""+ R+ ""String_Node_Str""+ C+ ""String_Node_Str""+ columns+ ""String_Node_Str""+ rows);
  markLine(R,1);
  if (c > 255) {
    if (debug > 0)     System.out.println(""String_Node_Str"" + (int)c);
  }
switch (term_state) {
case TSTATE_DATA:
    if (!useibmcharset) {
      boolean doneflag=true;
switch (c) {
case OSC:
        osc=""String_Node_Str"";
      term_state=TSTATE_OSC;
    break;
case RI:
  if (R > tm)   R--;
 else   insertLine(R,1,SCROLL_DOWN);
if (debug > 1) System.out.println(""String_Node_Str"");
break;
case IND:
if (R == tm - 1 || R == bm || R == rows - 1) insertLine(R,1,SCROLL_UP);
 else R++;
if (debug > 1) System.out.println(""String_Node_Str"" + R + ""String_Node_Str"");
break;
case NEL:
if (R == tm - 1 || R == bm || R == rows - 1) insertLine(R,1,SCROLL_UP);
 else R++;
C=0;
if (debug > 1) System.out.println(""String_Node_Str"" + R + ""String_Node_Str"");
break;
case HTS:
Tabs[C]=1;
if (debug > 1) System.out.println(""String_Node_Str"");
break;
case DCS:
dcs=""String_Node_Str"";
term_state=TSTATE_DCS;
break;
default :
doneflag=false;
break;
}
if (doneflag) break;
}
switch (c) {
case CSI:
term_state=TSTATE_DCEQ;
break;
case ESC:
term_state=TSTATE_ESC;
lastwaslf=0;
break;
case 12:
System.out.println(""String_Node_Str"");
C=R=0;
break;
case '\b':
C--;
if (C < 0) C=0;
lastwaslf=0;
break;
case '\t':
do {
C++;
}
 while (C < columns && (Tabs[C] == 0));
lastwaslf=0;
break;
case '\r':
C=0;
break;
case '\n':
if (debug > 3) System.out.println(""String_Node_Str"" + R + ""String_Node_Str""+ bm+ ""String_Node_Str""+ tm+ ""String_Node_Str""+ rows);
if (!vms) {
if (lastwaslf != 0 && lastwaslf != c) break;
lastwaslf=c;
}
if (R == bm || R >= rows - 1) insertLine(R,1);
 else R++;
break;
case 7:
beep();
break;
case '\016':
gl=1;
break;
case '\017':
gl=0;
break;
default :
lastwaslf=0;
if (c < 32) {
if (c != 0) if (debug > 0) System.out.println(""String_Node_Str"" + ((int)c));
break;
}
if (C >= columns) {
if (R < rows - 1) R++;
 else insertLine(R,SCROLL_UP);
C=0;
}
if (gx[gl] == '0') {
if (c >= '\u005f' && c <= '\u007e') {
if (debug > 3) System.out.print(""String_Node_Str"" + c + ""String_Node_Str""+ ((short)c - 0x5f)+ ""String_Node_Str"");
c=DECSPECIAL[(short)c - 0x5f];
if (debug > 3) System.out.println(c + ""String_Node_Str"" + (int)c+ ""String_Node_Str"");
}
}
if (debug > 4) System.out.println(""String_Node_Str"" + c + ""String_Node_Str""+ C+ ""String_Node_Str""+ R);
if (useibmcharset) c=map_cp850_unicode(c);
if (debug > 4) System.out.println(""String_Node_Str"" + c + ""String_Node_Str""+ C+ ""String_Node_Str""+ R);
if (insertmode == 1) {
insertChar(C,R,c,attributes);
}
 else {
putChar(C,R,c,attributes);
}
C++;
break;
}
break;
case TSTATE_OSC:
if ((c < 0x20) && (c != ESC)) {
handle_osc(osc);
term_state=TSTATE_DATA;
break;
}
if (c == '\\' && osc.charAt(osc.length() - 1) == ESC) {
handle_osc(osc);
term_state=TSTATE_DATA;
break;
}
osc=osc + c;
break;
case TSTATE_ESC:
term_state=TSTATE_DATA;
switch (c) {
case '#':
term_state=TSTATE_ESCSQUARE;
break;
case 'c':
gx[0]='B';
gx[1]='0';
gx[2]='A';
gx[3]='<';
gl=0;
gr=1;
int nw=getColumns();
if (nw < 132) nw=132;
Tabs=new byte[nw];
for (int i=0; i < nw; i+=8) {
Tabs[i]=1;
}
break;
case '[':
DCEvar=0;
DCEvars[0]=0;
DCEvars[1]=0;
DCEvars[2]=0;
DCEvars[3]=0;
term_state=TSTATE_CSI;
break;
case ']':
osc=""String_Node_Str"";
term_state=TSTATE_OSC;
break;
case 'P':
dcs=""String_Node_Str"";
term_state=TSTATE_DCS;
break;
case 'E':
if (R == tm - 1 || R == bm || R == rows - 1) insertLine(R,1,SCROLL_UP);
 else R++;
C=0;
if (debug > 1) System.out.println(""String_Node_Str"" + R + ""String_Node_Str"");
break;
case 'D':
if (R == tm - 1 || R == bm || R == rows - 1) insertLine(R,1,SCROLL_UP);
 else R++;
if (debug > 1) System.out.println(""String_Node_Str"" + R + ""String_Node_Str"");
break;
case 'M':
if ((R >= tm) && (R <= bm)) insertLine(R,1,SCROLL_DOWN);
if (debug > 1) System.out.println(""String_Node_Str"");
break;
case 'H':
if (debug > 1) System.out.println(""String_Node_Str"" + C);
if (C >= columns) C=columns - 1;
Tabs[C]=1;
break;
case '=':
if (debug > 0) System.out.println(""String_Node_Str"");
break;
case '>':
if (debug > 0) System.out.println(""String_Node_Str"");
break;
case '7':
Sc=C;
Sr=R;
Sgl=gl;
Sgr=gr;
Sa=attributes;
Sgx=new char[4];
for (int i=0; i < 4; i++) Sgx[i]=gx[i];
Stm=getTopMargin();
Sbm=getBottomMargin();
if (debug > 1) System.out.println(""String_Node_Str"");
break;
case '8':
C=Sc;
R=Sr;
gl=Sgl;
gr=Sgr;
for (int i=0; i < 4; i++) gx[i]=Sgx[i];
setTopMargin(Stm);
setBottomMargin(Sbm);
attributes=Sa;
if (debug > 1) System.out.println(""String_Node_Str"");
break;
case '(':
term_state=TSTATE_SETG0;
break;
case ')':
term_state=TSTATE_SETG1;
break;
case '*':
term_state=TSTATE_SETG2;
break;
case '+':
term_state=TSTATE_SETG3;
break;
case '~':
gr=1;
break;
case 'n':
gl=2;
break;
case '}':
gr=2;
break;
case 'o':
gl=3;
break;
case '|':
gr=3;
break;
default :
System.out.println(""String_Node_Str"" + ((int)c) + ""String_Node_Str"");
break;
}
break;
case TSTATE_SETG0:
if (c != '0' && c != 'A' && c != 'B') System.out.println(""String_Node_Str"" + c + ""String_Node_Str""+ ((int)c)+ ""String_Node_Str"");
 else {
if (debug > 2) System.out.println(""String_Node_Str"" + c + ""String_Node_Str""+ ((int)c)+ ""String_Node_Str"");
gx[0]=c;
}
term_state=TSTATE_DATA;
break;
case TSTATE_SETG1:
if (c != '0' && c != 'A' && c != 'B') {
System.out.println(""String_Node_Str"" + c + ""String_Node_Str""+ ((int)c)+ ""String_Node_Str"");
}
 else {
if (debug > 2) System.out.println(""String_Node_Str"" + c + ""String_Node_Str""+ ((int)c)+ ""String_Node_Str"");
gx[1]=c;
}
term_state=TSTATE_DATA;
break;
case TSTATE_SETG2:
if (c != '0' && c != 'A' && c != 'B') System.out.println(""String_Node_Str"" + ((int)c) + ""String_Node_Str"");
 else {
if (debug > 2) System.out.println(""String_Node_Str"" + c + ""String_Node_Str""+ ((int)c)+ ""String_Node_Str"");
gx[2]=c;
}
term_state=TSTATE_DATA;
break;
case TSTATE_SETG3:
if (c != '0' && c != 'A' && c != 'B') System.out.println(""String_Node_Str"" + ((int)c) + ""String_Node_Str"");
 else {
if (debug > 2) System.out.println(""String_Node_Str"" + c + ""String_Node_Str""+ ((int)c)+ ""String_Node_Str"");
gx[3]=c;
}
term_state=TSTATE_DATA;
break;
case TSTATE_ESCSQUARE:
switch (c) {
case '8':
for (int i=0; i < columns; i++) for (int j=0; j < rows; j++) putChar(i,j,'E',0);
break;
default :
System.out.println(""String_Node_Str"" + c + ""String_Node_Str"");
break;
}
term_state=TSTATE_DATA;
break;
case TSTATE_DCS:
if (c == '\\' && dcs.charAt(dcs.length() - 1) == ESC) {
handle_dcs(dcs);
term_state=TSTATE_DATA;
break;
}
dcs=dcs + c;
break;
case TSTATE_DCEQ:
term_state=TSTATE_DATA;
switch (c) {
case '0':
case '1':
case '2':
case '3':
case '4':
case '5':
case '6':
case '7':
case '8':
case '9':
DCEvars[DCEvar]=DCEvars[DCEvar] * 10 + ((int)c) - 48;
term_state=TSTATE_DCEQ;
break;
case ';':
DCEvar++;
DCEvars[DCEvar]=0;
term_state=TSTATE_DCEQ;
break;
case 's':
if (true || debug > 1) System.out.println(""String_Node_Str"" + DCEvars[0] + ""String_Node_Str"");
break;
case 'r':
if (true || debug > 1) System.out.println(""String_Node_Str"" + DCEvars[0] + ""String_Node_Str"");
for (i=0; i <= DCEvar; i++) {
switch (DCEvars[i]) {
case 3:
size=getSize();
setScreenSize(80,rows);
break;
case 4:
break;
case 5:
break;
case 6:
moveoutsidemargins=true;
break;
case 12:
break;
case 9:
case 1000:
case 1001:
case 1002:
case 1003:
mouserpt=DCEvars[i];
break;
default :
System.out.println(""String_Node_Str"" + DCEvars[0] + ""String_Node_Str"");
}
}
break;
case 'h':
if (debug > 0) System.out.println(""String_Node_Str"" + DCEvars[0] + ""String_Node_Str"");
for (i=0; i <= DCEvar; i++) {
switch (DCEvars[i]) {
case 1:
KeyUp[0]=""String_Node_Str"";
KeyDown[0]=""String_Node_Str"";
KeyRight[0]=""String_Node_Str"";
KeyLeft[0]=""String_Node_Str"";
break;
case 3:
size=getSize();
setScreenSize(132,rows);
break;
case 6:
moveoutsidemargins=false;
break;
case 25:
showCursor(true);
redraw();
break;
case 9:
case 1000:
case 1001:
case 1002:
case 1003:
mouserpt=DCEvars[i];
break;
default :
System.out.println(""String_Node_Str"" + DCEvars[0] + ""String_Node_Str"");
break;
}
}
break;
case 'i':
switch (DCEvars[0]) {
case 1:
if (debug > 1) System.out.println(""String_Node_Str"");
break;
case 4:
if (debug > 1) System.out.println(""String_Node_Str"");
break;
case 5:
if (debug > 1) System.out.println(""String_Node_Str"");
break;
}
break;
case 'l':
if (debug > 0) System.out.println(""String_Node_Str"" + DCEvars[0] + ""String_Node_Str"");
for (i=0; i <= DCEvar; i++) {
switch (DCEvars[i]) {
case 1:
KeyUp[0]=""String_Node_Str"";
KeyDown[0]=""String_Node_Str"";
KeyRight[0]=""String_Node_Str"";
KeyLeft[0]=""String_Node_Str"";
break;
case 3:
size=getSize();
setScreenSize(80,rows);
break;
case 6:
moveoutsidemargins=true;
break;
case 25:
showCursor(false);
redraw();
break;
case 9:
case 1000:
case 1001:
case 1002:
case 1003:
mouserpt=0;
break;
default :
System.out.println(""String_Node_Str"" + DCEvars[0] + ""String_Node_Str"");
break;
}
}
break;
case 'n':
if (debug > 0) System.out.println(""String_Node_Str"" + DCEvars[0] + ""String_Node_Str"");
switch (DCEvars[0]) {
case 15:
write(((char)ESC) + ""String_Node_Str"",false);
System.out.println(""String_Node_Str"");
break;
default :
System.out.println(""String_Node_Str"" + DCEvars[0] + ""String_Node_Str"");
break;
}
break;
default :
System.out.println(""String_Node_Str"" + DCEvars[0] + ""String_Node_Str""+ c+ ""String_Node_Str"");
break;
}
break;
case TSTATE_CSI_EX:
term_state=TSTATE_DATA;
switch (c) {
case ESC:
term_state=TSTATE_ESC;
break;
default :
System.out.println(""String_Node_Str"" + (int)c);
break;
}
break;
case TSTATE_CSI_DOLLAR:
term_state=TSTATE_DATA;
switch (c) {
case '}':
System.out.println(""String_Node_Str"" + DCEvars[0]);
statusmode=DCEvars[0];
break;
case '~':
System.out.println(""String_Node_Str"" + DCEvars[0]);
break;
default :
System.out.println(""String_Node_Str"" + c + ""String_Node_Str""+ DCEvars[0]);
break;
}
break;
case TSTATE_CSI:
term_state=TSTATE_DATA;
switch (c) {
case '$':
term_state=TSTATE_CSI_DOLLAR;
break;
case '!':
term_state=TSTATE_CSI_EX;
break;
case '?':
DCEvar=0;
DCEvars[0]=0;
term_state=TSTATE_DCEQ;
break;
case '0':
case '1':
case '2':
case '3':
case '4':
case '5':
case '6':
case '7':
case '8':
case '9':
DCEvars[DCEvar]=DCEvars[DCEvar] * 10 + ((int)c) - 48;
term_state=TSTATE_CSI;
break;
case ';':
DCEvar++;
DCEvars[DCEvar]=0;
term_state=TSTATE_CSI;
break;
case 'c':
write(((char)ESC) + ""String_Node_Str"",false);
if (debug > 1) System.out.println(""String_Node_Str"" + DCEvars[0] + ""String_Node_Str"");
break;
case 'q':
if (debug > 1) System.out.println(""String_Node_Str"" + DCEvars[0] + ""String_Node_Str"");
break;
case 'g':
switch (DCEvars[0]) {
case 3:
int nw=getColumns();
Tabs=new byte[nw];
break;
case 0:
Tabs[C]=0;
break;
}
if (debug > 1) System.out.println(""String_Node_Str"" + DCEvars[0] + ""String_Node_Str"");
break;
case 'h':
switch (DCEvars[0]) {
case 4:
insertmode=1;
break;
case 20:
System.out.println(""String_Node_Str"");
sendcrlf=true;
break;
default :
System.out.println(""String_Node_Str"" + DCEvars[0] + ""String_Node_Str"");
break;
}
if (debug > 1) System.out.println(""String_Node_Str"" + DCEvars[0] + ""String_Node_Str"");
break;
case 'i':
switch (DCEvars[0]) {
case 0:
if (debug > 1) System.out.println(""String_Node_Str"");
break;
case 4:
if (debug > 1) System.out.println(""String_Node_Str"");
break;
case 5:
if (debug > 1) System.out.println(""String_Node_Str"");
break;
default :
System.out.println(""String_Node_Str"" + DCEvars[0] + ""String_Node_Str"");
}
break;
case 'l':
switch (DCEvars[0]) {
case 4:
insertmode=0;
break;
case 20:
System.out.println(""String_Node_Str"");
sendcrlf=false;
break;
default :
System.out.println(""String_Node_Str"" + DCEvars[0] + ""String_Node_Str"");
break;
}
break;
case 'A':
{
int limit;
if (R > bm) limit=bm + 1;
 else if (R >= tm) {
limit=tm;
}
 else limit=0;
if (DCEvars[0] == 0) R--;
 else R-=DCEvars[0];
if (R < limit) R=limit;
if (debug > 1) System.out.println(""String_Node_Str"" + DCEvars[0] + ""String_Node_Str"");
break;
}
case 'B':
{
int limit;
if (R < tm) limit=tm - 1;
 else if (R <= bm) {
limit=bm;
}
 else limit=rows - 1;
if (DCEvars[0] == 0) R++;
 else R+=DCEvars[0];
if (R > limit) R=limit;
 else {
if (debug > 2) System.out.println(""String_Node_Str"");
}
if (debug > 2) System.out.println(""String_Node_Str"" + R);
if (debug > 1) System.out.println(""String_Node_Str"" + DCEvars[0] + ""String_Node_Str""+ C+ ""String_Node_Str"");
break;
}
case 'C':
if (DCEvars[0] == 0) C++;
 else C+=DCEvars[0];
if (C > columns - 1) C=columns - 1;
if (debug > 1) System.out.println(""String_Node_Str"" + DCEvars[0] + ""String_Node_Str"");
break;
case 'd':
R=DCEvars[0];
System.out.println(""String_Node_Str"" + DCEvars[0] + ""String_Node_Str"");
break;
case 'D':
if (DCEvars[0] == 0) C--;
 else C-=DCEvars[0];
if (C < 0) C=0;
if (debug > 1) System.out.println(""String_Node_Str"" + DCEvars[0] + ""String_Node_Str"");
break;
case 'r':
if (DCEvar > 0) {
R=DCEvars[1] - 1;
if (R < 0) R=rows - 1;
 else if (R >= rows) {
R=rows - 1;
}
}
 else R=rows - 1;
setBottomMargin(DCEvars[1] - 1);
if (R >= DCEvars[0]) {
R=DCEvars[0] - 1;
if (R < 0) R=0;
}
setTopMargin(DCEvars[0] - 1);
_SetCursor(0,0);
if (debug > 1) System.out.println(""String_Node_Str"" + DCEvars[0] + ""String_Node_Str""+ DCEvars[1]+ ""String_Node_Str"");
break;
case 'G':
C=DCEvars[0];
if (debug > 1) System.out.println(""String_Node_Str"" + DCEvars[0] + ""String_Node_Str"");
break;
case 'H':
_SetCursor(DCEvars[0] - 1,DCEvars[1] - 1);
if (debug > 2) {
System.out.println(""String_Node_Str"" + DCEvars[0] + ""String_Node_Str""+ DCEvars[1]+ ""String_Node_Str""+ moveoutsidemargins);
System.out.println(""String_Node_Str"" + R + ""String_Node_Str""+ C);
}
break;
case 'f':
R=DCEvars[0] - 1;
C=DCEvars[1] - 1;
if (C < 0) C=0;
if (R < 0) R=0;
if (debug > 2) System.out.println(""String_Node_Str"" + DCEvars[0] + ""String_Node_Str""+ DCEvars[1]+ ""String_Node_Str"");
break;
case 'L':
if (DCEvars[0] == 0) insertLine(R,SCROLL_DOWN);
 else insertLine(R,DCEvars[0],SCROLL_DOWN);
if (debug > 1) System.out.println(""String_Node_Str"" + DCEvars[0] + ""String_Node_Str""+ R+ ""String_Node_Str"");
break;
case 'M':
if (debug > 1) System.out.println(""String_Node_Str"" + DCEvars[0] + ""String_Node_Str""+ R);
if (DCEvars[0] == 0) deleteLine(R);
 else for (int i=0; i < DCEvars[0]; i++) deleteLine(R);
break;
case 'K':
if (debug > 1) System.out.println(""String_Node_Str"" + DCEvars[0] + ""String_Node_Str"");
switch (DCEvars[0]) {
case 0:
if (C < columns - 1) deleteArea(C,R,columns - C,1);
break;
case 1:
if (C > 0) deleteArea(0,R,C,1);
break;
case 2:
deleteArea(0,R,columns,1);
break;
}
break;
case 'J':
switch (DCEvars[0]) {
case 0:
if (R < rows - 1) deleteArea(0,R + 1,columns,rows - R - 1);
if (C < columns - 1) deleteArea(C,R,columns - C,1);
break;
case 1:
if (R > 0) deleteArea(0,0,columns,R - 1);
if (C > 0) deleteArea(0,R,C,1);
break;
case 2:
deleteArea(0,0,columns,rows);
break;
}
if (debug > 1) System.out.println(""String_Node_Str"" + DCEvars[0] + ""String_Node_Str"");
break;
case '@':
if (debug > 1) System.out.println(""String_Node_Str"" + DCEvars[0] + ""String_Node_Str"");
for (int i=0; i < DCEvars[0]; i++) insertChar(C,R,' ',attributes);
break;
case 'P':
if (debug > 1) System.out.println(""String_Node_Str"" + DCEvars[0] + ""String_Node_Str""+ C+ ""String_Node_Str""+ R);
if (DCEvars[0] == 0) DCEvars[0]=1;
for (int i=0; i < DCEvars[0]; i++) deleteChar(C,R);
break;
case 'n':
switch (DCEvars[0]) {
case 5:
write(((char)ESC) + ""String_Node_Str"",false);
if (debug > 1) System.out.println(""String_Node_Str"");
break;
case 6:
write(((char)ESC) + ""String_Node_Str"" + R+ ""String_Node_Str""+ C+ ""String_Node_Str"",false);
if (debug > 1) System.out.println(""String_Node_Str"");
break;
default :
if (debug > 0) System.out.println(""String_Node_Str"" + DCEvars[0] + ""String_Node_Str"");
break;
}
break;
case 's':
Sc=C;
Sr=R;
Sa=attributes;
if (debug > 3) System.out.println(""String_Node_Str"");
break;
case 'u':
C=Sc;
R=Sr;
attributes=Sa;
if (debug > 3) System.out.println(""String_Node_Str"");
break;
case 'm':
if (debug > 3) System.out.print(""String_Node_Str"");
if (DCEvar == 0 && DCEvars[0] == 0) attributes=0;
for (i=0; i <= DCEvar; i++) {
switch (DCEvars[i]) {
case 0:
if (DCEvar > 0) attributes=0;
break;
case 4:
attributes|=UNDERLINE;
break;
case 1:
attributes|=BOLD;
break;
case 7:
attributes|=INVERT;
break;
case 5:
break;
case 25:
break;
case 27:
attributes&=~INVERT;
break;
case 24:
attributes&=~UNDERLINE;
break;
case 22:
attributes&=~BOLD;
break;
case 30:
case 31:
case 32:
case 33:
case 34:
case 35:
case 36:
case 37:
attributes&=~(0xf << 3);
attributes|=((DCEvars[i] - 30) + 1) << 3;
break;
case 39:
attributes&=~(0xf << 3);
break;
case 40:
case 41:
case 42:
case 43:
case 44:
case 45:
case 46:
case 47:
attributes&=~(0xf << 7);
attributes|=((DCEvars[i] - 40) + 1) << 7;
break;
case 49:
attributes&=~(0xf << 7);
break;
default :
System.out.println(""String_Node_Str"" + DCEvars[i] + ""String_Node_Str"");
break;
}
if (debug > 3) System.out.print(""String_Node_Str"" + DCEvars[i] + ""String_Node_Str"");
}
if (debug > 3) System.out.print(""String_Node_Str"" + attributes + ""String_Node_Str"");
break;
default :
System.out.println(""String_Node_Str"" + c + ""String_Node_Str""+ ((int)c)+ ""String_Node_Str"");
break;
}
break;
default :
term_state=TSTATE_DATA;
break;
}
if (C > columns) C=columns;
if (R > rows) R=rows;
if (C < 0) C=0;
if (R < 0) R=0;
if (doshowcursor) setCursorPosition(C,R);
markLine(R,1);
}","private void putChar(char c,boolean doshowcursor){
  Dimension size;
  int rows=getRows();
  int columns=getColumns();
  int tm=getTopMargin();
  int bm=getBottomMargin();
  byte msg[];
  if (debug > 4)   System.out.println(""String_Node_Str"" + c + ""String_Node_Str""+ ((int)c)+ ""String_Node_Str""+ R+ ""String_Node_Str""+ C+ ""String_Node_Str""+ columns+ ""String_Node_Str""+ rows);
  markLine(R,1);
  if (c > 255) {
    if (debug > 0)     System.out.println(""String_Node_Str"" + (int)c);
  }
switch (term_state) {
case TSTATE_DATA:
    if (!useibmcharset) {
      boolean doneflag=true;
switch (c) {
case OSC:
        osc=""String_Node_Str"";
      term_state=TSTATE_OSC;
    break;
case RI:
  if (R > tm)   R--;
 else   insertLine(R,1,SCROLL_DOWN);
if (debug > 1) System.out.println(""String_Node_Str"");
break;
case IND:
if (R == tm - 1 || R == bm || R == rows - 1) insertLine(R,1,SCROLL_UP);
 else R++;
if (debug > 1) System.out.println(""String_Node_Str"" + R + ""String_Node_Str"");
break;
case NEL:
if (R == tm - 1 || R == bm || R == rows - 1) insertLine(R,1,SCROLL_UP);
 else R++;
C=0;
if (debug > 1) System.out.println(""String_Node_Str"" + R + ""String_Node_Str"");
break;
case HTS:
Tabs[C]=1;
if (debug > 1) System.out.println(""String_Node_Str"");
break;
case DCS:
dcs=""String_Node_Str"";
term_state=TSTATE_DCS;
break;
default :
doneflag=false;
break;
}
if (doneflag) break;
}
switch (c) {
case CSI:
term_state=TSTATE_DCEQ;
break;
case ESC:
term_state=TSTATE_ESC;
lastwaslf=0;
break;
case 12:
System.out.println(""String_Node_Str"");
C=R=0;
break;
case '\b':
C--;
if (C < 0) C=0;
lastwaslf=0;
break;
case '\t':
do {
C++;
}
 while (C < columns && (Tabs[C] == 0));
lastwaslf=0;
break;
case '\r':
C=0;
break;
case '\n':
if (debug > 3) System.out.println(""String_Node_Str"" + R + ""String_Node_Str""+ bm+ ""String_Node_Str""+ tm+ ""String_Node_Str""+ rows);
if (!vms) {
if (lastwaslf != 0 && lastwaslf != c) break;
lastwaslf=c;
}
if (R == bm || R >= rows - 1) insertLine(R,1);
 else R++;
break;
case 7:
beep();
break;
case '\016':
gl=1;
break;
case '\017':
gl=0;
break;
default :
lastwaslf=0;
if (c < 32) {
if (c != 0) if (debug > 0) System.out.println(""String_Node_Str"" + ((int)c));
break;
}
if (C >= columns) {
if (R < rows - 1) R++;
 else insertLine(R,SCROLL_UP);
C=0;
}
if (gx[gl] == '0') {
if (c >= '\u005f' && c <= '\u007e') {
if (debug > 3) System.out.print(""String_Node_Str"" + c + ""String_Node_Str""+ ((short)c - 0x5f)+ ""String_Node_Str"");
c=DECSPECIAL[(short)c - 0x5f];
if (debug > 3) System.out.println(c + ""String_Node_Str"" + (int)c+ ""String_Node_Str"");
}
}
if (debug > 4) System.out.println(""String_Node_Str"" + c + ""String_Node_Str""+ C+ ""String_Node_Str""+ R);
if (useibmcharset) c=map_cp850_unicode(c);
if (debug > 4) System.out.println(""String_Node_Str"" + c + ""String_Node_Str""+ C+ ""String_Node_Str""+ R);
if (insertmode == 1) {
insertChar(C,R,c,attributes);
}
 else {
putChar(C,R,c,attributes);
}
C++;
break;
}
break;
case TSTATE_OSC:
if ((c < 0x20) && (c != ESC)) {
handle_osc(osc);
term_state=TSTATE_DATA;
break;
}
if (c == '\\' && osc.charAt(osc.length() - 1) == ESC) {
handle_osc(osc);
term_state=TSTATE_DATA;
break;
}
osc=osc + c;
break;
case TSTATE_ESC:
term_state=TSTATE_DATA;
switch (c) {
case '#':
term_state=TSTATE_ESCSQUARE;
break;
case 'c':
gx[0]='B';
gx[1]='0';
gx[2]='A';
gx[3]='<';
gl=0;
gr=1;
int nw=getColumns();
if (nw < 132) nw=132;
Tabs=new byte[nw];
for (int i=0; i < nw; i+=8) {
Tabs[i]=1;
}
break;
case '[':
DCEvar=0;
DCEvars[0]=0;
DCEvars[1]=0;
DCEvars[2]=0;
DCEvars[3]=0;
term_state=TSTATE_CSI;
break;
case ']':
osc=""String_Node_Str"";
term_state=TSTATE_OSC;
break;
case 'P':
dcs=""String_Node_Str"";
term_state=TSTATE_DCS;
break;
case 'E':
if (R == tm - 1 || R == bm || R == rows - 1) insertLine(R,1,SCROLL_UP);
 else R++;
C=0;
if (debug > 1) System.out.println(""String_Node_Str"" + R + ""String_Node_Str"");
break;
case 'D':
if (R == tm - 1 || R == bm || R == rows - 1) insertLine(R,1,SCROLL_UP);
 else R++;
if (debug > 1) System.out.println(""String_Node_Str"" + R + ""String_Node_Str"");
break;
case 'M':
if ((R >= tm) && (R <= bm)) insertLine(R,1,SCROLL_DOWN);
if (debug > 1) System.out.println(""String_Node_Str"");
break;
case 'H':
if (debug > 1) System.out.println(""String_Node_Str"" + C);
if (C >= columns) C=columns - 1;
Tabs[C]=1;
break;
case '=':
if (debug > 0) System.out.println(""String_Node_Str"");
break;
case '>':
if (debug > 0) System.out.println(""String_Node_Str"");
break;
case '7':
Sc=C;
Sr=R;
Sgl=gl;
Sgr=gr;
Sa=attributes;
Sgx=new char[4];
for (int i=0; i < 4; i++) Sgx[i]=gx[i];
Stm=getTopMargin();
Sbm=getBottomMargin();
if (debug > 1) System.out.println(""String_Node_Str"");
break;
case '8':
C=Sc;
R=Sr;
gl=Sgl;
gr=Sgr;
for (int i=0; i < 4; i++) gx[i]=Sgx[i];
setTopMargin(Stm);
setBottomMargin(Sbm);
attributes=Sa;
if (debug > 1) System.out.println(""String_Node_Str"");
break;
case '(':
term_state=TSTATE_SETG0;
break;
case ')':
term_state=TSTATE_SETG1;
break;
case '*':
term_state=TSTATE_SETG2;
break;
case '+':
term_state=TSTATE_SETG3;
break;
case '~':
gr=1;
break;
case 'n':
gl=2;
break;
case '}':
gr=2;
break;
case 'o':
gl=3;
break;
case '|':
gr=3;
break;
default :
System.out.println(""String_Node_Str"" + ((int)c) + ""String_Node_Str"");
break;
}
break;
case TSTATE_SETG0:
if (c != '0' && c != 'A' && c != 'B') System.out.println(""String_Node_Str"" + c + ""String_Node_Str""+ ((int)c)+ ""String_Node_Str"");
 else {
if (debug > 2) System.out.println(""String_Node_Str"" + c + ""String_Node_Str""+ ((int)c)+ ""String_Node_Str"");
gx[0]=c;
}
term_state=TSTATE_DATA;
break;
case TSTATE_SETG1:
if (c != '0' && c != 'A' && c != 'B') {
System.out.println(""String_Node_Str"" + c + ""String_Node_Str""+ ((int)c)+ ""String_Node_Str"");
}
 else {
if (debug > 2) System.out.println(""String_Node_Str"" + c + ""String_Node_Str""+ ((int)c)+ ""String_Node_Str"");
gx[1]=c;
}
term_state=TSTATE_DATA;
break;
case TSTATE_SETG2:
if (c != '0' && c != 'A' && c != 'B') System.out.println(""String_Node_Str"" + ((int)c) + ""String_Node_Str"");
 else {
if (debug > 2) System.out.println(""String_Node_Str"" + c + ""String_Node_Str""+ ((int)c)+ ""String_Node_Str"");
gx[2]=c;
}
term_state=TSTATE_DATA;
break;
case TSTATE_SETG3:
if (c != '0' && c != 'A' && c != 'B') System.out.println(""String_Node_Str"" + ((int)c) + ""String_Node_Str"");
 else {
if (debug > 2) System.out.println(""String_Node_Str"" + c + ""String_Node_Str""+ ((int)c)+ ""String_Node_Str"");
gx[3]=c;
}
term_state=TSTATE_DATA;
break;
case TSTATE_ESCSQUARE:
switch (c) {
case '8':
for (int i=0; i < columns; i++) for (int j=0; j < rows; j++) putChar(i,j,'E',0);
break;
default :
System.out.println(""String_Node_Str"" + c + ""String_Node_Str"");
break;
}
term_state=TSTATE_DATA;
break;
case TSTATE_DCS:
if (c == '\\' && dcs.charAt(dcs.length() - 1) == ESC) {
handle_dcs(dcs);
term_state=TSTATE_DATA;
break;
}
dcs=dcs + c;
break;
case TSTATE_DCEQ:
term_state=TSTATE_DATA;
switch (c) {
case '0':
case '1':
case '2':
case '3':
case '4':
case '5':
case '6':
case '7':
case '8':
case '9':
DCEvars[DCEvar]=DCEvars[DCEvar] * 10 + ((int)c) - 48;
term_state=TSTATE_DCEQ;
break;
case ';':
DCEvar++;
DCEvars[DCEvar]=0;
term_state=TSTATE_DCEQ;
break;
case 's':
if (true || debug > 1) System.out.println(""String_Node_Str"" + DCEvars[0] + ""String_Node_Str"");
break;
case 'r':
if (true || debug > 1) System.out.println(""String_Node_Str"" + DCEvars[0] + ""String_Node_Str"");
for (i=0; i <= DCEvar; i++) {
switch (DCEvars[i]) {
case 3:
size=getSize();
setScreenSize(80,rows);
break;
case 4:
break;
case 5:
break;
case 6:
moveoutsidemargins=true;
break;
case 12:
break;
case 9:
case 1000:
case 1001:
case 1002:
case 1003:
mouserpt=DCEvars[i];
break;
default :
System.out.println(""String_Node_Str"" + DCEvars[0] + ""String_Node_Str"");
}
}
break;
case 'h':
if (debug > 0) System.out.println(""String_Node_Str"" + DCEvars[0] + ""String_Node_Str"");
for (i=0; i <= DCEvar; i++) {
switch (DCEvars[i]) {
case 1:
KeyUp[0]=""String_Node_Str"";
KeyDown[0]=""String_Node_Str"";
KeyRight[0]=""String_Node_Str"";
KeyLeft[0]=""String_Node_Str"";
break;
case 3:
size=getSize();
setScreenSize(132,rows);
break;
case 6:
moveoutsidemargins=false;
break;
case 25:
showCursor(true);
redraw();
break;
case 9:
case 1000:
case 1001:
case 1002:
case 1003:
mouserpt=DCEvars[i];
break;
default :
System.out.println(""String_Node_Str"" + DCEvars[0] + ""String_Node_Str"");
break;
}
}
break;
case 'i':
switch (DCEvars[0]) {
case 1:
if (debug > 1) System.out.println(""String_Node_Str"");
break;
case 4:
if (debug > 1) System.out.println(""String_Node_Str"");
break;
case 5:
if (debug > 1) System.out.println(""String_Node_Str"");
break;
}
break;
case 'l':
if (debug > 0) System.out.println(""String_Node_Str"" + DCEvars[0] + ""String_Node_Str"");
for (i=0; i <= DCEvar; i++) {
switch (DCEvars[i]) {
case 1:
KeyUp[0]=""String_Node_Str"";
KeyDown[0]=""String_Node_Str"";
KeyRight[0]=""String_Node_Str"";
KeyLeft[0]=""String_Node_Str"";
break;
case 3:
size=getSize();
setScreenSize(80,rows);
break;
case 6:
moveoutsidemargins=true;
break;
case 25:
showCursor(false);
redraw();
break;
case 9:
case 1000:
case 1001:
case 1002:
case 1003:
mouserpt=0;
break;
default :
System.out.println(""String_Node_Str"" + DCEvars[0] + ""String_Node_Str"");
break;
}
}
break;
case 'n':
if (debug > 0) System.out.println(""String_Node_Str"" + DCEvars[0] + ""String_Node_Str"");
switch (DCEvars[0]) {
case 15:
write(((char)ESC) + ""String_Node_Str"",false);
System.out.println(""String_Node_Str"");
break;
default :
System.out.println(""String_Node_Str"" + DCEvars[0] + ""String_Node_Str"");
break;
}
break;
default :
System.out.println(""String_Node_Str"" + DCEvars[0] + ""String_Node_Str""+ c+ ""String_Node_Str"");
break;
}
break;
case TSTATE_CSI_EX:
term_state=TSTATE_DATA;
switch (c) {
case ESC:
term_state=TSTATE_ESC;
break;
default :
System.out.println(""String_Node_Str"" + (int)c);
break;
}
break;
case TSTATE_CSI_DOLLAR:
term_state=TSTATE_DATA;
switch (c) {
case '}':
System.out.println(""String_Node_Str"" + DCEvars[0]);
statusmode=DCEvars[0];
break;
case '~':
System.out.println(""String_Node_Str"" + DCEvars[0]);
break;
default :
System.out.println(""String_Node_Str"" + c + ""String_Node_Str""+ DCEvars[0]);
break;
}
break;
case TSTATE_CSI:
term_state=TSTATE_DATA;
switch (c) {
case '$':
term_state=TSTATE_CSI_DOLLAR;
break;
case '!':
term_state=TSTATE_CSI_EX;
break;
case '?':
DCEvar=0;
DCEvars[0]=0;
term_state=TSTATE_DCEQ;
break;
case '0':
case '1':
case '2':
case '3':
case '4':
case '5':
case '6':
case '7':
case '8':
case '9':
DCEvars[DCEvar]=DCEvars[DCEvar] * 10 + ((int)c) - 48;
term_state=TSTATE_CSI;
break;
case ';':
DCEvar++;
DCEvars[DCEvar]=0;
term_state=TSTATE_CSI;
break;
case 'c':
write(((char)ESC) + ""String_Node_Str"",false);
if (debug > 1) System.out.println(""String_Node_Str"" + DCEvars[0] + ""String_Node_Str"");
break;
case 'q':
if (debug > 1) System.out.println(""String_Node_Str"" + DCEvars[0] + ""String_Node_Str"");
break;
case 'g':
switch (DCEvars[0]) {
case 3:
int nw=getColumns();
Tabs=new byte[nw];
break;
case 0:
Tabs[C]=0;
break;
}
if (debug > 1) System.out.println(""String_Node_Str"" + DCEvars[0] + ""String_Node_Str"");
break;
case 'h':
switch (DCEvars[0]) {
case 4:
insertmode=1;
break;
case 20:
System.out.println(""String_Node_Str"");
sendcrlf=true;
break;
default :
System.out.println(""String_Node_Str"" + DCEvars[0] + ""String_Node_Str"");
break;
}
if (debug > 1) System.out.println(""String_Node_Str"" + DCEvars[0] + ""String_Node_Str"");
break;
case 'i':
switch (DCEvars[0]) {
case 0:
if (debug > 1) System.out.println(""String_Node_Str"");
break;
case 4:
if (debug > 1) System.out.println(""String_Node_Str"");
break;
case 5:
if (debug > 1) System.out.println(""String_Node_Str"");
break;
default :
System.out.println(""String_Node_Str"" + DCEvars[0] + ""String_Node_Str"");
}
break;
case 'l':
switch (DCEvars[0]) {
case 4:
insertmode=0;
break;
case 20:
System.out.println(""String_Node_Str"");
sendcrlf=false;
break;
default :
System.out.println(""String_Node_Str"" + DCEvars[0] + ""String_Node_Str"");
break;
}
break;
case 'A':
{
int limit;
if (R > bm) limit=bm + 1;
 else if (R >= tm) {
limit=tm;
}
 else limit=0;
if (DCEvars[0] == 0) R--;
 else R-=DCEvars[0];
if (R < limit) R=limit;
if (debug > 1) System.out.println(""String_Node_Str"" + DCEvars[0] + ""String_Node_Str"");
break;
}
case 'B':
{
int limit;
if (R < tm) limit=tm - 1;
 else if (R <= bm) {
limit=bm;
}
 else limit=rows - 1;
if (DCEvars[0] == 0) R++;
 else R+=DCEvars[0];
if (R > limit) R=limit;
 else {
if (debug > 2) System.out.println(""String_Node_Str"");
}
if (debug > 2) System.out.println(""String_Node_Str"" + R);
if (debug > 1) System.out.println(""String_Node_Str"" + DCEvars[0] + ""String_Node_Str""+ C+ ""String_Node_Str"");
break;
}
case 'C':
if (DCEvars[0] == 0) C++;
 else C+=DCEvars[0];
if (C > columns - 1) C=columns - 1;
if (debug > 1) System.out.println(""String_Node_Str"" + DCEvars[0] + ""String_Node_Str"");
break;
case 'd':
R=DCEvars[0];
System.out.println(""String_Node_Str"" + DCEvars[0] + ""String_Node_Str"");
break;
case 'D':
if (DCEvars[0] == 0) C--;
 else C-=DCEvars[0];
if (C < 0) C=0;
if (debug > 1) System.out.println(""String_Node_Str"" + DCEvars[0] + ""String_Node_Str"");
break;
case 'r':
if (DCEvar > 0) {
R=DCEvars[1] - 1;
if (R < 0) R=rows - 1;
 else if (R >= rows) {
R=rows - 1;
}
}
 else R=rows - 1;
setBottomMargin(DCEvars[1] - 1);
if (R >= DCEvars[0]) {
R=DCEvars[0] - 1;
if (R < 0) R=0;
}
setTopMargin(DCEvars[0] - 1);
_SetCursor(0,0);
if (debug > 1) System.out.println(""String_Node_Str"" + DCEvars[0] + ""String_Node_Str""+ DCEvars[1]+ ""String_Node_Str"");
break;
case 'G':
C=DCEvars[0];
if (debug > 1) System.out.println(""String_Node_Str"" + DCEvars[0] + ""String_Node_Str"");
break;
case 'H':
_SetCursor(DCEvars[0] - 1,DCEvars[1] - 1);
if (debug > 2) {
System.out.println(""String_Node_Str"" + DCEvars[0] + ""String_Node_Str""+ DCEvars[1]+ ""String_Node_Str""+ moveoutsidemargins);
System.out.println(""String_Node_Str"" + R + ""String_Node_Str""+ C);
}
break;
case 'f':
R=DCEvars[0] - 1;
C=DCEvars[1] - 1;
if (C < 0) C=0;
if (R < 0) R=0;
if (debug > 2) System.out.println(""String_Node_Str"" + DCEvars[0] + ""String_Node_Str""+ DCEvars[1]+ ""String_Node_Str"");
break;
case 'L':
if (DCEvars[0] == 0) insertLine(R,SCROLL_DOWN);
 else insertLine(R,DCEvars[0],SCROLL_DOWN);
if (debug > 1) System.out.println(""String_Node_Str"" + DCEvars[0] + ""String_Node_Str""+ R+ ""String_Node_Str"");
break;
case 'M':
if (debug > 1) System.out.println(""String_Node_Str"" + DCEvars[0] + ""String_Node_Str""+ R);
if (DCEvars[0] == 0) deleteLine(R);
 else for (int i=0; i < DCEvars[0]; i++) deleteLine(R);
break;
case 'K':
if (debug > 1) System.out.println(""String_Node_Str"" + DCEvars[0] + ""String_Node_Str"");
switch (DCEvars[0]) {
case 0:
if (C < columns - 1) deleteArea(C,R,columns - C,1);
break;
case 1:
if (C > 0) deleteArea(0,R,C + 1,1);
break;
case 2:
deleteArea(0,R,columns,1);
break;
}
break;
case 'J':
switch (DCEvars[0]) {
case 0:
if (R < rows - 1) deleteArea(0,R + 1,columns,rows - R - 1);
if (C < columns - 1) deleteArea(C,R,columns - C,1);
break;
case 1:
if (R > 0) deleteArea(0,0,columns,R);
if (C > 0) deleteArea(0,R,C,1);
break;
case 2:
deleteArea(0,0,columns,rows);
break;
}
if (debug > 1) System.out.println(""String_Node_Str"" + DCEvars[0] + ""String_Node_Str"");
break;
case '@':
if (debug > 1) System.out.println(""String_Node_Str"" + DCEvars[0] + ""String_Node_Str"");
for (int i=0; i < DCEvars[0]; i++) insertChar(C,R,' ',attributes);
break;
case 'P':
if (debug > 1) System.out.println(""String_Node_Str"" + DCEvars[0] + ""String_Node_Str""+ C+ ""String_Node_Str""+ R);
if (DCEvars[0] == 0) DCEvars[0]=1;
for (int i=0; i < DCEvars[0]; i++) deleteChar(C,R);
break;
case 'n':
switch (DCEvars[0]) {
case 5:
write(((char)ESC) + ""String_Node_Str"",false);
if (debug > 1) System.out.println(""String_Node_Str"");
break;
case 6:
write(((char)ESC) + ""String_Node_Str"" + R+ ""String_Node_Str""+ C+ ""String_Node_Str"",false);
if (debug > 1) System.out.println(""String_Node_Str"");
break;
default :
if (debug > 0) System.out.println(""String_Node_Str"" + DCEvars[0] + ""String_Node_Str"");
break;
}
break;
case 's':
Sc=C;
Sr=R;
Sa=attributes;
if (debug > 3) System.out.println(""String_Node_Str"");
break;
case 'u':
C=Sc;
R=Sr;
attributes=Sa;
if (debug > 3) System.out.println(""String_Node_Str"");
break;
case 'm':
if (debug > 3) System.out.print(""String_Node_Str"");
if (DCEvar == 0 && DCEvars[0] == 0) attributes=0;
for (i=0; i <= DCEvar; i++) {
switch (DCEvars[i]) {
case 0:
if (DCEvar > 0) attributes=0;
break;
case 4:
attributes|=UNDERLINE;
break;
case 1:
attributes|=BOLD;
break;
case 7:
attributes|=INVERT;
break;
case 5:
break;
case 25:
break;
case 27:
attributes&=~INVERT;
break;
case 24:
attributes&=~UNDERLINE;
break;
case 22:
attributes&=~BOLD;
break;
case 30:
case 31:
case 32:
case 33:
case 34:
case 35:
case 36:
case 37:
attributes&=~(0xf << 3);
attributes|=((DCEvars[i] - 30) + 1) << 3;
break;
case 39:
attributes&=~(0xf << 3);
break;
case 40:
case 41:
case 42:
case 43:
case 44:
case 45:
case 46:
case 47:
attributes&=~(0xf << 7);
attributes|=((DCEvars[i] - 40) + 1) << 7;
break;
case 49:
attributes&=~(0xf << 7);
break;
default :
System.out.println(""String_Node_Str"" + DCEvars[i] + ""String_Node_Str"");
break;
}
if (debug > 3) System.out.print(""String_Node_Str"" + DCEvars[i] + ""String_Node_Str"");
}
if (debug > 3) System.out.print(""String_Node_Str"" + attributes + ""String_Node_Str"");
break;
default :
System.out.println(""String_Node_Str"" + c + ""String_Node_Str""+ ((int)c)+ ""String_Node_Str"");
break;
}
break;
default :
term_state=TSTATE_DATA;
break;
}
if (C > columns) C=columns;
if (R > rows) R=rows;
if (C < 0) C=0;
if (R < 0) R=0;
if (doshowcursor) setCursorPosition(C,R);
markLine(R,1);
}",0.9997705764267278
143917,"public static void main(String args[]){
  Properties options=new Properties();
  try {
    options.load(Main.class.getResourceAsStream(""String_Node_Str""));
  }
 catch (  IOException e) {
    System.err.println(""String_Node_Str"");
  }
  String error=parseOptions(options,args);
  if (error != null) {
    System.err.println(error);
    System.err.println(""String_Node_Str"" + ""String_Node_Str"" + ""String_Node_Str""+ ""String_Node_Str"");
    System.exit(0);
  }
  String cfg=options.getProperty(""String_Node_Str"");
  if (cfg != null)   try {
    options.load(new URL(cfg).openStream());
  }
 catch (  IOException e) {
    try {
      options.load(new FileInputStream(cfg));
    }
 catch (    Exception fe) {
      System.err.println(""String_Node_Str"" + cfg);
    }
  }
  final String host=options.getProperty(""String_Node_Str"");
  final String port=options.getProperty(""String_Node_Str"");
  final Frame frame=new Frame(""String_Node_Str"" + host + (port.equals(""String_Node_Str"") ? ""String_Node_Str"" : ""String_Node_Str"" + port));
  try {
    clipboard=frame.getToolkit().getSystemClipboard();
  }
 catch (  Exception e) {
    System.err.println(""String_Node_Str"");
    System.err.println(""String_Node_Str"");
    clipboard=new Clipboard(""String_Node_Str"");
  }
  final Common setup=new Common(options);
  setup.registerPluginListener(new OnlineStatusListener(){
    public void online(){
      frame.setTitle(""String_Node_Str"" + host + (port.equals(""String_Node_Str"") ? ""String_Node_Str"" : ""String_Node_Str"" + port));
    }
    public void offline(){
      frame.setTitle(""String_Node_Str"");
    }
  }
);
  setup.registerPluginListener(new FocusStatusListener(){
    public void pluginGainedFocus(    Plugin plugin){
      if (Main.debug > 0)       System.err.println(""String_Node_Str"" + plugin + ""String_Node_Str"");
      focussedPlugin=plugin;
    }
    public void pluginLostFocus(    Plugin plugin){
      if (Main.debug > 0)       System.err.println(""String_Node_Str"" + plugin + ""String_Node_Str"");
    }
  }
);
  Hashtable componentList=setup.getComponents();
  Enumeration names=componentList.keys();
  while (names.hasMoreElements()) {
    String name=(String)names.nextElement();
    Component c=(Component)componentList.get(name);
    if (options.getProperty(""String_Node_Str"" + name) == null) {
      System.err.println(""String_Node_Str"" + name + ""String_Node_Str"");
      frame.add(""String_Node_Str"",c);
    }
 else     frame.add(options.getProperty(""String_Node_Str"" + name),c);
  }
  if (!personalJava) {
    MenuBar mb=new MenuBar();
    Menu file=new Menu(""String_Node_Str"");
    file.setShortcut(new MenuShortcut(KeyEvent.VK_H,true));
    MenuItem tmp;
    file.add(tmp=new MenuItem(""String_Node_Str""));
    tmp.addActionListener(new ActionListener(){
      public void actionPerformed(      ActionEvent evt){
        setup.broadcast(new SocketRequest(host,Integer.parseInt(port)));
      }
    }
);
    file.add(tmp=new MenuItem(""String_Node_Str""));
    tmp.addActionListener(new ActionListener(){
      public void actionPerformed(      ActionEvent evt){
        setup.broadcast(new SocketRequest());
      }
    }
);
    file.add(new MenuItem(""String_Node_Str""));
    file.add(tmp=new MenuItem(""String_Node_Str""));
    tmp.addActionListener(new ActionListener(){
      public void actionPerformed(      ActionEvent evt){
        if (setup.getComponents().get(""String_Node_Str"") != null) {
          PrintJob printJob=frame.getToolkit().getPrintJob(frame,""String_Node_Str"",null);
          if (printJob == null)           return;
          ((Component)setup.getComponents().get(""String_Node_Str"")).print(printJob.getGraphics());
          printJob.end();
        }
      }
    }
);
    file.add(new MenuItem(""String_Node_Str""));
    file.add(tmp=new MenuItem(""String_Node_Str""));
    tmp.addActionListener(new ActionListener(){
      public void actionPerformed(      ActionEvent evt){
        frame.dispose();
        System.exit(0);
      }
    }
);
    mb.add(file);
    Menu edit=new Menu(""String_Node_Str"");
    edit.setShortcut(new MenuShortcut(KeyEvent.VK_H,true));
    edit.add(tmp=new MenuItem(""String_Node_Str""));
    tmp.addActionListener(new ActionListener(){
      public void actionPerformed(      ActionEvent evt){
        if (focussedPlugin instanceof VisualTransferPlugin)         ((VisualTransferPlugin)focussedPlugin).copy(clipboard);
      }
    }
);
    edit.add(tmp=new MenuItem(""String_Node_Str""));
    tmp.addActionListener(new ActionListener(){
      public void actionPerformed(      ActionEvent evt){
        if (focussedPlugin instanceof VisualTransferPlugin)         ((VisualTransferPlugin)focussedPlugin).paste(clipboard);
      }
    }
);
    mb.add(edit);
    Hashtable menuList=setup.getMenus();
    names=menuList.keys();
    while (names.hasMoreElements()) {
      String name=(String)names.nextElement();
      mb.add((Menu)menuList.get(name));
    }
    Menu help=new Menu(""String_Node_Str"");
    help.add(tmp=new MenuItem(""String_Node_Str""));
    tmp.addActionListener(new ActionListener(){
      public void actionPerformed(      ActionEvent evt){
        final Dialog d=new Dialog(frame,""String_Node_Str"",true);
        d.add(""String_Node_Str"",new Label(""String_Node_Str"" + ""String_Node_Str""));
        Button close=new Button(""String_Node_Str"");
        close.addActionListener(new ActionListener(){
          public void actionPerformed(          ActionEvent evt){
            d.dispose();
          }
        }
);
        d.add(""String_Node_Str"",close);
        d.pack();
        d.setResizable(false);
        d.show();
      }
    }
);
    mb.setHelpMenu(help);
    frame.setMenuBar(mb);
  }
  frame.pack();
  frame.show();
  setup.broadcast(new SocketRequest(host,Integer.parseInt(port)));
  setup.broadcast(new ReturnFocusRequest());
}","public static void main(String args[]){
  Properties options=new Properties();
  try {
    options.load(Main.class.getResourceAsStream(""String_Node_Str""));
  }
 catch (  IOException e) {
    System.err.println(""String_Node_Str"");
  }
  String error=parseOptions(options,args);
  if (error != null) {
    System.err.println(error);
    System.err.println(""String_Node_Str"" + ""String_Node_Str"" + ""String_Node_Str""+ ""String_Node_Str"");
    System.exit(0);
  }
  String cfg=options.getProperty(""String_Node_Str"");
  if (cfg != null)   try {
    options.load(new URL(cfg).openStream());
  }
 catch (  IOException e) {
    try {
      options.load(new FileInputStream(cfg));
    }
 catch (    Exception fe) {
      System.err.println(""String_Node_Str"" + cfg);
    }
  }
  final String host=options.getProperty(""String_Node_Str"");
  final String port=options.getProperty(""String_Node_Str"");
  final Frame frame=new Frame(""String_Node_Str"" + host + (port.equals(""String_Node_Str"") ? ""String_Node_Str"" : ""String_Node_Str"" + port));
  try {
    clipboard=frame.getToolkit().getSystemClipboard();
  }
 catch (  Exception e) {
    System.err.println(""String_Node_Str"");
    System.err.println(""String_Node_Str"");
    clipboard=new Clipboard(""String_Node_Str"");
  }
  final Common setup=new Common(options);
  setup.registerPluginListener(new OnlineStatusListener(){
    public void online(){
      frame.setTitle(""String_Node_Str"" + host + (port.equals(""String_Node_Str"") ? ""String_Node_Str"" : ""String_Node_Str"" + port));
    }
    public void offline(){
      frame.setTitle(""String_Node_Str"");
    }
  }
);
  setup.registerPluginListener(new FocusStatusListener(){
    public void pluginGainedFocus(    Plugin plugin){
      if (Main.debug > 0)       System.err.println(""String_Node_Str"" + plugin + ""String_Node_Str"");
      focussedPlugin=plugin;
    }
    public void pluginLostFocus(    Plugin plugin){
      if (Main.debug > 0)       System.err.println(""String_Node_Str"" + plugin + ""String_Node_Str"");
    }
  }
);
  Hashtable componentList=setup.getComponents();
  Enumeration names=componentList.keys();
  while (names.hasMoreElements()) {
    String name=(String)names.nextElement();
    Component c=(Component)componentList.get(name);
    if (options.getProperty(""String_Node_Str"" + name) == null) {
      System.err.println(""String_Node_Str"" + name + ""String_Node_Str"");
      frame.add(""String_Node_Str"",c);
    }
 else     frame.add(options.getProperty(""String_Node_Str"" + name),c);
  }
  if (!personalJava) {
    frame.addWindowListener(new WindowAdapter(){
      public void windowClosing(      WindowEvent evt){
        setup.broadcast(new SocketRequest());
        frame.setVisible(false);
        frame.dispose();
        System.exit(0);
      }
    }
);
    MenuBar mb=new MenuBar();
    Menu file=new Menu(""String_Node_Str"");
    file.setShortcut(new MenuShortcut(KeyEvent.VK_H,true));
    MenuItem tmp;
    file.add(tmp=new MenuItem(""String_Node_Str""));
    tmp.addActionListener(new ActionListener(){
      public void actionPerformed(      ActionEvent evt){
        setup.broadcast(new SocketRequest(host,Integer.parseInt(port)));
      }
    }
);
    file.add(tmp=new MenuItem(""String_Node_Str""));
    tmp.addActionListener(new ActionListener(){
      public void actionPerformed(      ActionEvent evt){
        setup.broadcast(new SocketRequest());
      }
    }
);
    file.add(new MenuItem(""String_Node_Str""));
    file.add(tmp=new MenuItem(""String_Node_Str""));
    tmp.addActionListener(new ActionListener(){
      public void actionPerformed(      ActionEvent evt){
        if (setup.getComponents().get(""String_Node_Str"") != null) {
          PrintJob printJob=frame.getToolkit().getPrintJob(frame,""String_Node_Str"",null);
          if (printJob == null)           return;
          ((Component)setup.getComponents().get(""String_Node_Str"")).print(printJob.getGraphics());
          printJob.end();
        }
      }
    }
);
    file.add(new MenuItem(""String_Node_Str""));
    file.add(tmp=new MenuItem(""String_Node_Str""));
    tmp.addActionListener(new ActionListener(){
      public void actionPerformed(      ActionEvent evt){
        frame.dispose();
        System.exit(0);
      }
    }
);
    mb.add(file);
    Menu edit=new Menu(""String_Node_Str"");
    edit.setShortcut(new MenuShortcut(KeyEvent.VK_H,true));
    edit.add(tmp=new MenuItem(""String_Node_Str""));
    tmp.addActionListener(new ActionListener(){
      public void actionPerformed(      ActionEvent evt){
        if (focussedPlugin instanceof VisualTransferPlugin)         ((VisualTransferPlugin)focussedPlugin).copy(clipboard);
      }
    }
);
    edit.add(tmp=new MenuItem(""String_Node_Str""));
    tmp.addActionListener(new ActionListener(){
      public void actionPerformed(      ActionEvent evt){
        if (focussedPlugin instanceof VisualTransferPlugin)         ((VisualTransferPlugin)focussedPlugin).paste(clipboard);
      }
    }
);
    mb.add(edit);
    Hashtable menuList=setup.getMenus();
    names=menuList.keys();
    while (names.hasMoreElements()) {
      String name=(String)names.nextElement();
      mb.add((Menu)menuList.get(name));
    }
    Menu help=new Menu(""String_Node_Str"");
    help.add(tmp=new MenuItem(""String_Node_Str""));
    tmp.addActionListener(new ActionListener(){
      public void actionPerformed(      ActionEvent evt){
        final Dialog d=new Dialog(frame,""String_Node_Str"",true);
        d.add(""String_Node_Str"",new Label(""String_Node_Str"" + ""String_Node_Str""));
        Button close=new Button(""String_Node_Str"");
        close.addActionListener(new ActionListener(){
          public void actionPerformed(          ActionEvent evt){
            d.dispose();
          }
        }
);
        d.add(""String_Node_Str"",close);
        d.pack();
        d.setResizable(false);
        d.show();
      }
    }
);
    mb.setHelpMenu(help);
    frame.setMenuBar(mb);
  }
  frame.pack();
  frame.show();
  setup.broadcast(new SocketRequest(host,Integer.parseInt(port)));
  setup.broadcast(new ReturnFocusRequest());
}",0.978877999324096
143918,"public void mouseDragged(MouseEvent evt){
  if (buttonCheck(evt.getModifiers(),MouseEvent.BUTTON1_MASK)) {
    int xoffset=(super.getSize().width - size.width * charWidth) / 2;
    int yoffset=(super.getSize().height - size.height * charHeight) / 2;
    int x=(evt.getX() - xoffset) / charWidth;
    int y=(evt.getY() - yoffset) / charHeight + windowBase;
    int oldx=selectEnd.x, oldy=selectEnd.y;
    if ((x <= selectBegin.x && y <= selectBegin.y)) {
      selectBegin.x=x;
      selectBegin.y=y;
    }
 else {
      selectEnd.x=x;
      selectEnd.y=y;
    }
    if (oldx != x || oldy != y) {
      update[0]=true;
      if (debug > 0)       System.err.println(""String_Node_Str"" + selectBegin.x + ""String_Node_Str""+ selectBegin.y+ ""String_Node_Str""+ ""String_Node_Str""+ selectEnd.x+ ""String_Node_Str""+ selectEnd.y+ ""String_Node_Str"");
      redraw();
    }
  }
}","public void mouseDragged(MouseEvent evt){
  if (buttonCheck(evt.getModifiers(),MouseEvent.BUTTON1_MASK) || evt.getModifiers() == 0) {
    int xoffset=(super.getSize().width - size.width * charWidth) / 2;
    int yoffset=(super.getSize().height - size.height * charHeight) / 2;
    int x=(evt.getX() - xoffset) / charWidth;
    int y=(evt.getY() - yoffset) / charHeight + windowBase;
    int oldx=selectEnd.x, oldy=selectEnd.y;
    if ((x <= selectBegin.x && y <= selectBegin.y)) {
      selectBegin.x=x;
      selectBegin.y=y;
    }
 else {
      selectEnd.x=x;
      selectEnd.y=y;
    }
    if (oldx != x || oldy != y) {
      update[0]=true;
      if (debug > 0)       System.err.println(""String_Node_Str"" + selectBegin.x + ""String_Node_Str""+ selectBegin.y+ ""String_Node_Str""+ ""String_Node_Str""+ selectEnd.x+ ""String_Node_Str""+ selectEnd.y+ ""String_Node_Str"");
      redraw();
    }
  }
}",0.9846153846153848
143919,"private byte[] Send_SSH_CMSG_SESSION_KEY(byte[] anti_spoofing_cookie,byte[] server_key_public_modulus,byte[] host_key_public_modulus,byte[] supported_ciphers_mask,byte[] server_key_public_exponent,byte[] host_key_public_exponent) throws IOException {
  String str;
  int boffset;
  byte cipher_type;
  byte[] session_key;
  byte[] session_id_byte=new byte[host_key_public_modulus.length + server_key_public_modulus.length + anti_spoofing_cookie.length];
  System.arraycopy(host_key_public_modulus,0,session_id_byte,0,host_key_public_modulus.length);
  System.arraycopy(server_key_public_modulus,0,session_id_byte,host_key_public_modulus.length,server_key_public_modulus.length);
  System.arraycopy(anti_spoofing_cookie,0,session_id_byte,host_key_public_modulus.length + server_key_public_modulus.length,anti_spoofing_cookie.length);
  byte[] hash_md5=MD5.hash(session_id_byte);
  cipher_type=(byte)SSH_CIPHER_IDEA;
  if ((((1 << cipher_type) & 0xff) & supported_ciphers_mask[3]) == 0) {
    System.err.println(""String_Node_Str"");
    disconnect();
    return ""String_Node_Str"".getBytes();
  }
  byte[] random_bits1=new byte[16], random_bits2=new byte[16];
  random_bits2=random_bits1=MD5.hash(""String_Node_Str"" + Math.random() * (new java.util.Date()).getTime());
  random_bits1=MD5.hash(SshMisc.addArrayOfBytes(MD5.hash(password + login),random_bits1));
  random_bits2=MD5.hash(SshMisc.addArrayOfBytes(MD5.hash(password + login),random_bits2));
  session_key=SshMisc.addArrayOfBytes(random_bits1,random_bits2);
  byte[] session_keyXored=SshMisc.XORArrayOfBytes(random_bits1,hash_md5);
  session_keyXored=SshMisc.addArrayOfBytes(session_keyXored,session_keyXored);
  byte[] encrypted_session_key=SshCrypto.encrypteRSAPkcs1Twice(session_keyXored,server_key_public_exponent,server_key_public_modulus,host_key_public_exponent,host_key_public_modulus);
  byte[] protocol_flags=new byte[4];
  protocol_flags[0]=protocol_flags[1]=protocol_flags[2]=protocol_flags[3]=0;
  int length=1 + anti_spoofing_cookie.length + encrypted_session_key.length+ protocol_flags.length;
  byte[] data=new byte[length];
  boffset=0;
  data[boffset++]=(byte)cipher_type;
  for (int i=0; i < 8; i++)   data[boffset++]=anti_spoofing_cookie[i];
  for (int i=0; i < encrypted_session_key.length; i++)   data[boffset++]=encrypted_session_key[i];
  for (int i=0; i < 4; i++)   data[boffset++]=protocol_flags[i];
  byte packet_type=SSH_CMSG_SESSION_KEY;
  SshPacket packet=createPacket(packet_type,data);
  sendPacket(packet);
  if (cipher_type == (byte)SSH_CIPHER_IDEA) {
    byte[] IDEAKey=new byte[16];
    for (int i=0; i < 16; i++)     IDEAKey[i]=session_key[i];
    crypto=new SshCrypto(IDEAKey);
    encryption=true;
  }
  return null;
}","private byte[] Send_SSH_CMSG_SESSION_KEY(byte[] anti_spoofing_cookie,byte[] server_key_public_modulus,byte[] host_key_public_modulus,byte[] supported_ciphers_mask,byte[] server_key_public_exponent,byte[] host_key_public_exponent) throws IOException {
  String str;
  int boffset;
  byte cipher_type;
  byte[] session_key;
  byte[] session_id_byte=new byte[host_key_public_modulus.length + server_key_public_modulus.length + anti_spoofing_cookie.length];
  System.arraycopy(host_key_public_modulus,0,session_id_byte,0,host_key_public_modulus.length);
  System.arraycopy(server_key_public_modulus,0,session_id_byte,host_key_public_modulus.length,server_key_public_modulus.length);
  System.arraycopy(anti_spoofing_cookie,0,session_id_byte,host_key_public_modulus.length + server_key_public_modulus.length,anti_spoofing_cookie.length);
  byte[] hash_md5=MD5.hash(session_id_byte);
  cipher_type=(byte)SSH_CIPHER_IDEA;
  if ((((1 << cipher_type) & 0xff) & supported_ciphers_mask[3]) == 0) {
    System.err.println(""String_Node_Str"" + supported_ciphers_mask[3] + ""String_Node_Str"");
    disconnect();
    return ""String_Node_Str"".getBytes();
  }
  byte[] random_bits1=new byte[16], random_bits2=new byte[16];
  random_bits2=random_bits1=MD5.hash(""String_Node_Str"" + Math.random() * (new java.util.Date()).getTime());
  random_bits1=MD5.hash(SshMisc.addArrayOfBytes(MD5.hash(password + login),random_bits1));
  random_bits2=MD5.hash(SshMisc.addArrayOfBytes(MD5.hash(password + login),random_bits2));
  session_key=SshMisc.addArrayOfBytes(random_bits1,random_bits2);
  byte[] session_keyXored=SshMisc.XORArrayOfBytes(random_bits1,hash_md5);
  session_keyXored=SshMisc.addArrayOfBytes(session_keyXored,session_keyXored);
  byte[] encrypted_session_key=SshCrypto.encrypteRSAPkcs1Twice(session_keyXored,server_key_public_exponent,server_key_public_modulus,host_key_public_exponent,host_key_public_modulus);
  byte[] protocol_flags=new byte[4];
  protocol_flags[0]=protocol_flags[1]=protocol_flags[2]=protocol_flags[3]=0;
  int length=1 + anti_spoofing_cookie.length + encrypted_session_key.length+ protocol_flags.length;
  byte[] data=new byte[length];
  boffset=0;
  data[boffset++]=(byte)cipher_type;
  for (int i=0; i < 8; i++)   data[boffset++]=anti_spoofing_cookie[i];
  for (int i=0; i < encrypted_session_key.length; i++)   data[boffset++]=encrypted_session_key[i];
  for (int i=0; i < 4; i++)   data[boffset++]=protocol_flags[i];
  byte packet_type=SSH_CMSG_SESSION_KEY;
  SshPacket packet=createPacket(packet_type,data);
  sendPacket(packet);
  if (cipher_type == (byte)SSH_CIPHER_IDEA) {
    byte[] IDEAKey=new byte[16];
    for (int i=0; i < 16; i++)     IDEAKey[i]=session_key[i];
    crypto=new SshCrypto(IDEAKey);
    encryption=true;
  }
  return null;
}",0.9912248628884828
143920,"private byte[] handlePacket(byte packetType,byte[] packetData) throws IOException {
  byte b;
  int boffset=0;
  if (debug > 0)   System.out.println(""String_Node_Str"" + packetType);
switch (packetType) {
case SSH_MSG_DISCONNECT:
    String str=SshMisc.getString(boffset,packetData);
  disconnect();
return str.getBytes();
case SSH_SMSG_PUBLIC_KEY:
byte[] anti_spoofing_cookie=new byte[8];
byte[] server_key_bits=new byte[4];
byte[] server_key_public_exponent;
byte[] server_key_public_modulus;
byte[] host_key_bits=new byte[4];
byte[] host_key_public_exponent;
byte[] host_key_public_modulus;
byte[] protocol_flags=new byte[4];
byte[] supported_ciphers_mask=new byte[4];
byte[] supported_authentications_mask=new byte[4];
for (int i=0; i <= 7; i++) anti_spoofing_cookie[i]=packetData[boffset++];
for (int i=0; i <= 3; i++) server_key_bits[i]=packetData[boffset++];
server_key_public_exponent=SshMisc.getMpInt(boffset,packetData);
boffset+=server_key_public_exponent.length + 2;
server_key_public_modulus=SshMisc.getMpInt(boffset,packetData);
boffset+=server_key_public_modulus.length + 2;
for (int i=0; i <= 3; i++) host_key_bits[i]=packetData[boffset++];
host_key_public_exponent=SshMisc.getMpInt(boffset,packetData);
boffset+=host_key_public_exponent.length + 2;
host_key_public_modulus=SshMisc.getMpInt(boffset,packetData);
boffset+=host_key_public_modulus.length + 2;
for (int i=0; i < 4; i++) protocol_flags[i]=packetData[boffset++];
for (int i=0; i < 4; i++) supported_ciphers_mask[i]=packetData[boffset++];
for (int i=0; i < 4; i++) supported_authentications_mask[i]=packetData[boffset++];
Send_SSH_CMSG_SESSION_KEY(anti_spoofing_cookie,server_key_public_modulus,host_key_public_modulus,supported_ciphers_mask,server_key_public_exponent,host_key_public_exponent);
if (hashHostKey != null && hashHostKey.compareTo(""String_Node_Str"") != 0) {
byte[] Md5_hostKey=MD5.hash(host_key_public_modulus);
String hashHostKeyBis=""String_Node_Str"";
for (int i=0; i < Md5_hostKey.length; i++) {
String hex=""String_Node_Str"";
int[] v=new int[2];
v[0]=(Md5_hostKey[i] & 240) >> 4;
v[1]=(Md5_hostKey[i] & 15);
for (int j=0; j < 1; j++) switch (v[j]) {
case 10:
hex+=""String_Node_Str"";
break;
case 11:
hex+=""String_Node_Str"";
break;
case 12:
hex+=""String_Node_Str"";
break;
case 13:
hex+=""String_Node_Str"";
break;
case 14:
hex+=""String_Node_Str"";
break;
case 15:
hex+=""String_Node_Str"";
break;
default :
hex+=String.valueOf(v[j]);
break;
}
hashHostKeyBis=hashHostKeyBis + hex;
}
if (hashHostKeyBis.compareTo(hashHostKey) != 0) {
login=password=""String_Node_Str"";
return (""String_Node_Str"" + ""String_Node_Str"" + ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str"").getBytes();
}
}
break;
case SSH_SMSG_SUCCESS:
if (debug > 0) System.out.println(""String_Node_Str"" + lastPacketSentType + ""String_Node_Str"");
if (lastPacketSentType == SSH_CMSG_SESSION_KEY) {
Send_SSH_CMSG_USER();
break;
}
if (lastPacketSentType == SSH_CMSG_USER) {
Send_SSH_CMSG_REQUEST_PTY();
return ""String_Node_Str"".getBytes();
}
if (lastPacketSentType == SSH_CMSG_AUTH_PASSWORD) {
System.out.println(""String_Node_Str"");
Send_SSH_CMSG_REQUEST_PTY();
return ""String_Node_Str"".getBytes();
}
if (lastPacketSentType == SSH_CMSG_REQUEST_PTY) {
cansenddata=true;
if (dataToSend != null) {
Send_SSH_CMSG_STDIN_DATA(dataToSend);
dataToSend=null;
}
Send_SSH_CMSG_EXEC_SHELL();
break;
}
if (lastPacketSentType == SSH_CMSG_EXEC_SHELL) {
}
break;
case SSH_SMSG_FAILURE:
if (lastPacketSentType == SSH_CMSG_AUTH_PASSWORD) {
System.out.println(""String_Node_Str"");
disconnect();
return ""String_Node_Str"".getBytes();
}
if (lastPacketSentType == SSH_CMSG_USER) {
Send_SSH_CMSG_AUTH_PASSWORD();
break;
}
if (lastPacketSentType == SSH_CMSG_REQUEST_PTY) {
break;
}
break;
case SSH_SMSG_STDOUT_DATA:
str=SshMisc.getString(0,packetData);
return str.getBytes();
case SSH_SMSG_STDERR_DATA:
str=""String_Node_Str"" + SshMisc.getString(0,packetData);
System.out.println(""String_Node_Str"" + ""String_Node_Str"" + str);
return str.getBytes();
case SSH_SMSG_EXITSTATUS:
int value=(packetData[0] << 24) + (packetData[1] << 16) + (packetData[2] << 8)+ (packetData[3]);
Send_SSH_CMSG_EXIT_CONFIRMATION();
System.out.println(""String_Node_Str"" + value);
disconnect();
break;
case SSH_MSG_DEBUG:
str=SshMisc.getString(0,packetData);
if (debug > 0) {
System.out.println(""String_Node_Str"" + ""String_Node_Str"" + str);
return str.getBytes();
}
return ""String_Node_Str"".getBytes();
default :
System.err.print(""String_Node_Str"" + packetType);
break;
}
return null;
}","private byte[] handlePacket(byte packetType,byte[] packetData) throws IOException {
  byte b;
  int boffset=0;
  if (debug > 0)   System.out.println(""String_Node_Str"" + packetType);
switch (packetType) {
case SSH_MSG_DISCONNECT:
    String str=SshMisc.getString(boffset,packetData);
  disconnect();
return str.getBytes();
case SSH_SMSG_PUBLIC_KEY:
byte[] anti_spoofing_cookie=new byte[8];
byte[] server_key_bits=new byte[4];
byte[] server_key_public_exponent;
byte[] server_key_public_modulus;
byte[] host_key_bits=new byte[4];
byte[] host_key_public_exponent;
byte[] host_key_public_modulus;
byte[] protocol_flags=new byte[4];
byte[] supported_ciphers_mask=new byte[4];
byte[] supported_authentications_mask=new byte[4];
for (int i=0; i <= 7; i++) anti_spoofing_cookie[i]=packetData[boffset++];
for (int i=0; i <= 3; i++) server_key_bits[i]=packetData[boffset++];
server_key_public_exponent=SshMisc.getMpInt(boffset,packetData);
boffset+=server_key_public_exponent.length + 2;
server_key_public_modulus=SshMisc.getMpInt(boffset,packetData);
boffset+=server_key_public_modulus.length + 2;
for (int i=0; i <= 3; i++) host_key_bits[i]=packetData[boffset++];
host_key_public_exponent=SshMisc.getMpInt(boffset,packetData);
boffset+=host_key_public_exponent.length + 2;
host_key_public_modulus=SshMisc.getMpInt(boffset,packetData);
boffset+=host_key_public_modulus.length + 2;
for (int i=0; i < 4; i++) protocol_flags[i]=packetData[boffset++];
for (int i=0; i < 4; i++) supported_ciphers_mask[i]=packetData[boffset++];
for (int i=0; i < 4; i++) supported_authentications_mask[i]=packetData[boffset++];
byte ret[]=Send_SSH_CMSG_SESSION_KEY(anti_spoofing_cookie,server_key_public_modulus,host_key_public_modulus,supported_ciphers_mask,server_key_public_exponent,host_key_public_exponent);
if (ret != null) return ret;
if (hashHostKey != null && hashHostKey.compareTo(""String_Node_Str"") != 0) {
byte[] Md5_hostKey=MD5.hash(host_key_public_modulus);
String hashHostKeyBis=""String_Node_Str"";
for (int i=0; i < Md5_hostKey.length; i++) {
String hex=""String_Node_Str"";
int[] v=new int[2];
v[0]=(Md5_hostKey[i] & 240) >> 4;
v[1]=(Md5_hostKey[i] & 15);
for (int j=0; j < 1; j++) switch (v[j]) {
case 10:
hex+=""String_Node_Str"";
break;
case 11:
hex+=""String_Node_Str"";
break;
case 12:
hex+=""String_Node_Str"";
break;
case 13:
hex+=""String_Node_Str"";
break;
case 14:
hex+=""String_Node_Str"";
break;
case 15:
hex+=""String_Node_Str"";
break;
default :
hex+=String.valueOf(v[j]);
break;
}
hashHostKeyBis=hashHostKeyBis + hex;
}
if (hashHostKeyBis.compareTo(hashHostKey) != 0) {
login=password=""String_Node_Str"";
return (""String_Node_Str"" + ""String_Node_Str"" + ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str"").getBytes();
}
}
break;
case SSH_SMSG_SUCCESS:
if (debug > 0) System.out.println(""String_Node_Str"" + lastPacketSentType + ""String_Node_Str"");
if (lastPacketSentType == SSH_CMSG_SESSION_KEY) {
Send_SSH_CMSG_USER();
break;
}
if (lastPacketSentType == SSH_CMSG_USER) {
Send_SSH_CMSG_REQUEST_PTY();
return ""String_Node_Str"".getBytes();
}
if (lastPacketSentType == SSH_CMSG_AUTH_PASSWORD) {
System.out.println(""String_Node_Str"");
Send_SSH_CMSG_REQUEST_PTY();
return ""String_Node_Str"".getBytes();
}
if (lastPacketSentType == SSH_CMSG_REQUEST_PTY) {
cansenddata=true;
if (dataToSend != null) {
Send_SSH_CMSG_STDIN_DATA(dataToSend);
dataToSend=null;
}
Send_SSH_CMSG_EXEC_SHELL();
break;
}
if (lastPacketSentType == SSH_CMSG_EXEC_SHELL) {
}
break;
case SSH_SMSG_FAILURE:
if (lastPacketSentType == SSH_CMSG_AUTH_PASSWORD) {
System.out.println(""String_Node_Str"");
disconnect();
return ""String_Node_Str"".getBytes();
}
if (lastPacketSentType == SSH_CMSG_USER) {
Send_SSH_CMSG_AUTH_PASSWORD();
break;
}
if (lastPacketSentType == SSH_CMSG_REQUEST_PTY) {
break;
}
break;
case SSH_SMSG_STDOUT_DATA:
str=SshMisc.getString(0,packetData);
return str.getBytes();
case SSH_SMSG_STDERR_DATA:
str=""String_Node_Str"" + SshMisc.getString(0,packetData);
System.out.println(""String_Node_Str"" + ""String_Node_Str"" + str);
return str.getBytes();
case SSH_SMSG_EXITSTATUS:
int value=(packetData[0] << 24) + (packetData[1] << 16) + (packetData[2] << 8)+ (packetData[3]);
Send_SSH_CMSG_EXIT_CONFIRMATION();
System.out.println(""String_Node_Str"" + value);
disconnect();
break;
case SSH_MSG_DEBUG:
str=SshMisc.getString(0,packetData);
if (debug > 0) {
System.out.println(""String_Node_Str"" + ""String_Node_Str"" + str);
return str.getBytes();
}
return ""String_Node_Str"".getBytes();
default :
System.err.print(""String_Node_Str"" + packetType);
break;
}
return null;
}",0.9955722824883771
143921,"private SshPacket handleBytes(byte buff[],int offset,int count) throws IOException {
  if (debug > 1)   System.out.println(""String_Node_Str"" + buff + ""String_Node_Str""+ count+ ""String_Node_Str"");
  byte b;
  int boffset=offset;
  while (boffset < count) {
    b=buff[boffset++];
switch (phase) {
case PHASE_INIT:
      identification_string+=(char)b;
    if (b == '\n') {
      phase++;
      write(identification_string_sent.getBytes());
      position=0;
      byte[] data=SshMisc.createString(identification_string_sent);
      byte packet_type=SSH_SMSG_STDOUT_DATA;
      SshPacket fistLine=createPacket(packet_type,data);
      return fistLine;
    }
  break;
case PHASE_SSH_RECEIVE_PACKET:
SshPacket result=lastPacketReceived.getPacketfromBytes(buff,boffset - 1,count,encryption,crypto);
return result;
}
}
return null;
}","private SshPacket handleBytes(byte buff[],int offset,int count) throws IOException {
  if (debug > 1)   System.out.println(""String_Node_Str"" + buff + ""String_Node_Str""+ count+ ""String_Node_Str"");
  byte b;
  int boffset=offset;
  while (boffset < count) {
    b=buff[boffset++];
switch (phase) {
case PHASE_INIT:
      identification_string+=(char)b;
    if (b == '\n') {
      phase++;
      write(identification_string_sent.getBytes());
      position=0;
      byte[] data=SshMisc.createString(identification_string);
      byte packet_type=SSH_SMSG_STDOUT_DATA;
      SshPacket firstLine=createPacket(packet_type,data);
      return firstLine;
    }
  break;
case PHASE_SSH_RECEIVE_PACKET:
SshPacket result=lastPacketReceived.getPacketfromBytes(buff,boffset - 1,count,encryption,crypto);
return result;
}
}
return null;
}",0.9957601453664444
143922,"/** 
 * Get the attributes for the specified position.
 * @param c x-coordinate (column)
 * @param l y-coordinate (line)
 * @see #putChar
 */
public int getAttributes(int c,int l){
  c=checkBounds(c,0,size.width - 1);
  l=checkBounds(l,0,size.height - 1);
  return charAttributes[l][c];
}","/** 
 * Get the attributes for the specified position.
 * @param c x-coordinate (column)
 * @param l y-coordinate (line)
 * @see #putChar
 */
public int getAttributes(int c,int l){
  c=checkBounds(c,0,size.width - 1);
  l=checkBounds(l,0,size.height - 1);
  return charAttributes[screenBase + l][c];
}",0.9779286926994908
143923,"/** 
 * Get the character at the specified position.
 * @param c x-coordinate (column)
 * @param l y-coordinate (line)
 * @see #putChar
 */
public char getChar(int c,int l){
  c=checkBounds(c,0,size.width - 1);
  l=checkBounds(l,0,size.height - 1);
  return charArray[l][c];
}","/** 
 * Get the character at the specified position.
 * @param c x-coordinate (column)
 * @param l y-coordinate (line)
 * @see #putChar
 */
public char getChar(int c,int l){
  c=checkBounds(c,0,size.width - 1);
  l=checkBounds(l,0,size.height - 1);
  return charArray[screenBase + l][c];
}",0.976991150442478
143924,"public void disconnect(){
  System.out.println(""String_Node_Str"");
}","public void disconnect(){
  System.err.println(""String_Node_Str"");
  login=""String_Node_Str"";
  password=""String_Node_Str"";
  phase=0;
  encryption=false;
  lastPacketReceived=null;
}",0.5179282868525896
143925,"private byte[] Send_SSH_CMSG_SESSION_KEY(byte[] anti_spoofing_cookie,byte[] server_key_public_modulus,byte[] host_key_public_modulus,byte[] supported_ciphers_mask,byte[] server_key_public_exponent,byte[] host_key_public_exponent) throws IOException {
  String str;
  int boffset;
  byte cipher_type;
  byte[] session_key;
  byte[] session_id_byte=new byte[host_key_public_modulus.length + server_key_public_modulus.length + anti_spoofing_cookie.length];
  System.arraycopy(host_key_public_modulus,0,session_id_byte,0,host_key_public_modulus.length);
  System.arraycopy(server_key_public_modulus,0,session_id_byte,host_key_public_modulus.length,server_key_public_modulus.length);
  System.arraycopy(anti_spoofing_cookie,0,session_id_byte,host_key_public_modulus.length + server_key_public_modulus.length,anti_spoofing_cookie.length);
  byte[] hash_md5=MD5.hash(session_id_byte);
  cipher_type=(byte)SSH_CIPHER_IDEA;
  if ((((1 << cipher_type) & 0xff) & supported_ciphers_mask[3]) == 0) {
    System.err.println(""String_Node_Str"");
    disconnect();
    return ""String_Node_Str"".getBytes();
  }
  byte[] random_bits1=new byte[16], random_bits2=new byte[16];
  random_bits2=random_bits1=MD5.hash(""String_Node_Str"" + Math.random() * (new java.util.Date()).getTime());
  random_bits1=MD5.hash(SshMisc.addArrayOfBytes(MD5.hash(password + login),random_bits1));
  random_bits2=MD5.hash(SshMisc.addArrayOfBytes(MD5.hash(password + login),random_bits2));
  session_key=SshMisc.addArrayOfBytes(random_bits1,random_bits2);
  byte[] session_keyXored=SshMisc.XORArrayOfBytes(random_bits1,hash_md5);
  session_keyXored=SshMisc.addArrayOfBytes(session_keyXored,session_keyXored);
  byte[] encrypted_session_key=SshCrypto.encrypteRSAPkcs1Twice(session_keyXored,server_key_public_exponent,server_key_public_modulus,host_key_public_exponent,host_key_public_modulus);
  byte[] protocol_flags=new byte[4];
  protocol_flags[0]=protocol_flags[1]=protocol_flags[2]=protocol_flags[3]=0;
  int length=1 + anti_spoofing_cookie.length + encrypted_session_key.length+ protocol_flags.length;
  byte[] data=new byte[length];
  boffset=0;
  data[boffset++]=(byte)cipher_type;
  for (int i=0; i < 8; i++)   data[boffset++]=anti_spoofing_cookie[i];
  for (int i=0; i < encrypted_session_key.length; i++)   data[boffset++]=encrypted_session_key[i];
  for (int i=0; i < 4; i++)   data[boffset++]=protocol_flags[i];
  byte packet_type=SSH_CMSG_SESSION_KEY;
  SshPacket packet=createPacket(packet_type,data);
  sendPacket(packet);
  if (cipher_type == (byte)SSH_CIPHER_IDEA) {
    byte[] IDEAKey=new byte[16];
    for (int i=0; i < 16; i++)     IDEAKey[i]=session_key[i];
    crypto=new SshCrypto(IDEAKey);
    encryption=true;
    SshPacket.encryption=encryption;
    SshPacket.crypto=crypto;
  }
  return null;
}","private byte[] Send_SSH_CMSG_SESSION_KEY(byte[] anti_spoofing_cookie,byte[] server_key_public_modulus,byte[] host_key_public_modulus,byte[] supported_ciphers_mask,byte[] server_key_public_exponent,byte[] host_key_public_exponent) throws IOException {
  String str;
  int boffset;
  byte cipher_type;
  byte[] session_key;
  byte[] session_id_byte=new byte[host_key_public_modulus.length + server_key_public_modulus.length + anti_spoofing_cookie.length];
  System.arraycopy(host_key_public_modulus,0,session_id_byte,0,host_key_public_modulus.length);
  System.arraycopy(server_key_public_modulus,0,session_id_byte,host_key_public_modulus.length,server_key_public_modulus.length);
  System.arraycopy(anti_spoofing_cookie,0,session_id_byte,host_key_public_modulus.length + server_key_public_modulus.length,anti_spoofing_cookie.length);
  byte[] hash_md5=MD5.hash(session_id_byte);
  cipher_type=(byte)SSH_CIPHER_IDEA;
  if ((((1 << cipher_type) & 0xff) & supported_ciphers_mask[3]) == 0) {
    System.err.println(""String_Node_Str"");
    disconnect();
    return ""String_Node_Str"".getBytes();
  }
  byte[] random_bits1=new byte[16], random_bits2=new byte[16];
  random_bits2=random_bits1=MD5.hash(""String_Node_Str"" + Math.random() * (new java.util.Date()).getTime());
  random_bits1=MD5.hash(SshMisc.addArrayOfBytes(MD5.hash(password + login),random_bits1));
  random_bits2=MD5.hash(SshMisc.addArrayOfBytes(MD5.hash(password + login),random_bits2));
  session_key=SshMisc.addArrayOfBytes(random_bits1,random_bits2);
  byte[] session_keyXored=SshMisc.XORArrayOfBytes(random_bits1,hash_md5);
  session_keyXored=SshMisc.addArrayOfBytes(session_keyXored,session_keyXored);
  byte[] encrypted_session_key=SshCrypto.encrypteRSAPkcs1Twice(session_keyXored,server_key_public_exponent,server_key_public_modulus,host_key_public_exponent,host_key_public_modulus);
  byte[] protocol_flags=new byte[4];
  protocol_flags[0]=protocol_flags[1]=protocol_flags[2]=protocol_flags[3]=0;
  int length=1 + anti_spoofing_cookie.length + encrypted_session_key.length+ protocol_flags.length;
  byte[] data=new byte[length];
  boffset=0;
  data[boffset++]=(byte)cipher_type;
  for (int i=0; i < 8; i++)   data[boffset++]=anti_spoofing_cookie[i];
  for (int i=0; i < encrypted_session_key.length; i++)   data[boffset++]=encrypted_session_key[i];
  for (int i=0; i < 4; i++)   data[boffset++]=protocol_flags[i];
  byte packet_type=SSH_CMSG_SESSION_KEY;
  SshPacket packet=createPacket(packet_type,data);
  sendPacket(packet);
  if (cipher_type == (byte)SSH_CIPHER_IDEA) {
    byte[] IDEAKey=new byte[16];
    for (int i=0; i < 16; i++)     IDEAKey[i]=session_key[i];
    crypto=new SshCrypto(IDEAKey);
    encryption=true;
  }
  return null;
}",0.9879737609329446
143926,"/** 
 * Initialise SshIO
 */
public SshIO(){
  SshPacket.encryption=encryption=false;
}","/** 
 * Initialise SshIO
 */
public SshIO(){
  encryption=false;
}",0.8627450980392157
143927,"private byte[] handlePacket(byte packetType,byte[] packetData) throws IOException {
  byte b;
  int boffset=0;
  if (debug > 0)   System.out.println(""String_Node_Str"" + packetType);
switch (packetType) {
case SSH_MSG_DISCONNECT:
    String str=SshMisc.getString(boffset,packetData);
  disconnect();
return str.getBytes();
case SSH_SMSG_PUBLIC_KEY:
byte[] anti_spoofing_cookie=new byte[8];
byte[] server_key_bits=new byte[4];
byte[] server_key_public_exponent;
byte[] server_key_public_modulus;
byte[] host_key_bits=new byte[4];
byte[] host_key_public_exponent;
byte[] host_key_public_modulus;
byte[] protocol_flags=new byte[4];
byte[] supported_ciphers_mask=new byte[4];
byte[] supported_authentications_mask=new byte[4];
for (int i=0; i <= 7; i++) anti_spoofing_cookie[i]=packetData[boffset++];
for (int i=0; i <= 3; i++) server_key_bits[i]=packetData[boffset++];
server_key_public_exponent=SshMisc.getMpInt(boffset,packetData);
boffset+=server_key_public_exponent.length + 2;
server_key_public_modulus=SshMisc.getMpInt(boffset,packetData);
boffset+=server_key_public_modulus.length + 2;
for (int i=0; i <= 3; i++) host_key_bits[i]=packetData[boffset++];
host_key_public_exponent=SshMisc.getMpInt(boffset,packetData);
boffset+=host_key_public_exponent.length + 2;
host_key_public_modulus=SshMisc.getMpInt(boffset,packetData);
boffset+=host_key_public_modulus.length + 2;
for (int i=0; i < 4; i++) protocol_flags[i]=packetData[boffset++];
for (int i=0; i < 4; i++) supported_ciphers_mask[i]=packetData[boffset++];
for (int i=0; i < 4; i++) supported_authentications_mask[i]=packetData[boffset++];
Send_SSH_CMSG_SESSION_KEY(anti_spoofing_cookie,server_key_public_modulus,host_key_public_modulus,supported_ciphers_mask,server_key_public_exponent,host_key_public_exponent);
if (hashHostKey != null && hashHostKey.compareTo(""String_Node_Str"") != 0) {
byte[] Md5_hostKey=MD5.hash(host_key_public_modulus);
String hashHostKeyBis=""String_Node_Str"";
for (int i=0; i < Md5_hostKey.length; i++) {
String hex=""String_Node_Str"";
int[] v=new int[2];
v[0]=(Md5_hostKey[i] & 240) >> 4;
v[1]=(Md5_hostKey[i] & 15);
for (int j=0; j < 1; j++) switch (v[j]) {
case 10:
hex+=""String_Node_Str"";
break;
case 11:
hex+=""String_Node_Str"";
break;
case 12:
hex+=""String_Node_Str"";
break;
case 13:
hex+=""String_Node_Str"";
break;
case 14:
hex+=""String_Node_Str"";
break;
case 15:
hex+=""String_Node_Str"";
break;
default :
hex+=String.valueOf(v[j]);
break;
}
hashHostKeyBis=hashHostKeyBis + hex;
}
if (hashHostKeyBis.compareTo(hashHostKey) != 0) {
login=password=""String_Node_Str"";
return (""String_Node_Str"" + ""String_Node_Str"" + ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str"").getBytes();
}
}
break;
case SSH_SMSG_SUCCESS:
if (lastPacketSentType == SSH_CMSG_SESSION_KEY) {
Send_SSH_CMSG_USER();
break;
}
if (lastPacketSentType == SSH_CMSG_AUTH_PASSWORD) {
System.out.println(""String_Node_Str"");
Send_SSH_CMSG_REQUEST_PTY();
return ""String_Node_Str"".getBytes();
}
if (lastPacketSentType == SSH_CMSG_REQUEST_PTY) {
Send_SSH_CMSG_EXEC_SHELL();
break;
}
break;
case SSH_SMSG_FAILURE:
if (lastPacketSentType == SSH_CMSG_AUTH_PASSWORD) {
System.out.println(""String_Node_Str"");
return ""String_Node_Str"".getBytes();
}
if (lastPacketSentType == SSH_CMSG_USER) {
Send_SSH_CMSG_AUTH_PASSWORD();
break;
}
if (lastPacketSentType == SSH_CMSG_REQUEST_PTY) {
break;
}
break;
case SSH_SMSG_STDOUT_DATA:
str=SshMisc.getString(0,packetData);
return str.getBytes();
case SSH_SMSG_STDERR_DATA:
str=""String_Node_Str"" + SshMisc.getString(0,packetData);
System.out.println(""String_Node_Str"" + ""String_Node_Str"" + str);
return str.getBytes();
case SSH_SMSG_EXITSTATUS:
int value=(packetData[0] << 24) + (packetData[1] << 16) + (packetData[2] << 8)+ (packetData[3]);
Send_SSH_CMSG_EXIT_CONFIRMATION();
System.out.println(""String_Node_Str"" + value);
disconnect();
break;
case SSH_MSG_DEBUG:
str=SshMisc.getString(0,packetData);
System.out.println(""String_Node_Str"" + ""String_Node_Str"" + str);
if (lastPacketSentType == SSH_CMSG_USER) {
Send_SSH_CMSG_AUTH_PASSWORD();
break;
}
return str.getBytes();
default :
System.err.print(""String_Node_Str"" + packetType);
break;
}
return null;
}","private byte[] handlePacket(byte packetType,byte[] packetData) throws IOException {
  byte b;
  int boffset=0;
  if (debug > 0)   System.out.println(""String_Node_Str"" + packetType);
switch (packetType) {
case SSH_MSG_DISCONNECT:
    String str=SshMisc.getString(boffset,packetData);
  disconnect();
return str.getBytes();
case SSH_SMSG_PUBLIC_KEY:
byte[] anti_spoofing_cookie=new byte[8];
byte[] server_key_bits=new byte[4];
byte[] server_key_public_exponent;
byte[] server_key_public_modulus;
byte[] host_key_bits=new byte[4];
byte[] host_key_public_exponent;
byte[] host_key_public_modulus;
byte[] protocol_flags=new byte[4];
byte[] supported_ciphers_mask=new byte[4];
byte[] supported_authentications_mask=new byte[4];
for (int i=0; i <= 7; i++) anti_spoofing_cookie[i]=packetData[boffset++];
for (int i=0; i <= 3; i++) server_key_bits[i]=packetData[boffset++];
server_key_public_exponent=SshMisc.getMpInt(boffset,packetData);
boffset+=server_key_public_exponent.length + 2;
server_key_public_modulus=SshMisc.getMpInt(boffset,packetData);
boffset+=server_key_public_modulus.length + 2;
for (int i=0; i <= 3; i++) host_key_bits[i]=packetData[boffset++];
host_key_public_exponent=SshMisc.getMpInt(boffset,packetData);
boffset+=host_key_public_exponent.length + 2;
host_key_public_modulus=SshMisc.getMpInt(boffset,packetData);
boffset+=host_key_public_modulus.length + 2;
for (int i=0; i < 4; i++) protocol_flags[i]=packetData[boffset++];
for (int i=0; i < 4; i++) supported_ciphers_mask[i]=packetData[boffset++];
for (int i=0; i < 4; i++) supported_authentications_mask[i]=packetData[boffset++];
Send_SSH_CMSG_SESSION_KEY(anti_spoofing_cookie,server_key_public_modulus,host_key_public_modulus,supported_ciphers_mask,server_key_public_exponent,host_key_public_exponent);
if (hashHostKey != null && hashHostKey.compareTo(""String_Node_Str"") != 0) {
byte[] Md5_hostKey=MD5.hash(host_key_public_modulus);
String hashHostKeyBis=""String_Node_Str"";
for (int i=0; i < Md5_hostKey.length; i++) {
String hex=""String_Node_Str"";
int[] v=new int[2];
v[0]=(Md5_hostKey[i] & 240) >> 4;
v[1]=(Md5_hostKey[i] & 15);
for (int j=0; j < 1; j++) switch (v[j]) {
case 10:
hex+=""String_Node_Str"";
break;
case 11:
hex+=""String_Node_Str"";
break;
case 12:
hex+=""String_Node_Str"";
break;
case 13:
hex+=""String_Node_Str"";
break;
case 14:
hex+=""String_Node_Str"";
break;
case 15:
hex+=""String_Node_Str"";
break;
default :
hex+=String.valueOf(v[j]);
break;
}
hashHostKeyBis=hashHostKeyBis + hex;
}
if (hashHostKeyBis.compareTo(hashHostKey) != 0) {
login=password=""String_Node_Str"";
return (""String_Node_Str"" + ""String_Node_Str"" + ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str"").getBytes();
}
}
break;
case SSH_SMSG_SUCCESS:
if (lastPacketSentType == SSH_CMSG_SESSION_KEY) {
Send_SSH_CMSG_USER();
break;
}
if (lastPacketSentType == SSH_CMSG_AUTH_PASSWORD) {
System.out.println(""String_Node_Str"");
Send_SSH_CMSG_REQUEST_PTY();
return ""String_Node_Str"".getBytes();
}
if (lastPacketSentType == SSH_CMSG_REQUEST_PTY) {
Send_SSH_CMSG_EXEC_SHELL();
break;
}
break;
case SSH_SMSG_FAILURE:
if (lastPacketSentType == SSH_CMSG_AUTH_PASSWORD) {
System.out.println(""String_Node_Str"");
disconnect();
return ""String_Node_Str"".getBytes();
}
if (lastPacketSentType == SSH_CMSG_USER) {
Send_SSH_CMSG_AUTH_PASSWORD();
break;
}
if (lastPacketSentType == SSH_CMSG_REQUEST_PTY) {
break;
}
break;
case SSH_SMSG_STDOUT_DATA:
str=SshMisc.getString(0,packetData);
return str.getBytes();
case SSH_SMSG_STDERR_DATA:
str=""String_Node_Str"" + SshMisc.getString(0,packetData);
System.out.println(""String_Node_Str"" + ""String_Node_Str"" + str);
return str.getBytes();
case SSH_SMSG_EXITSTATUS:
int value=(packetData[0] << 24) + (packetData[1] << 16) + (packetData[2] << 8)+ (packetData[3]);
Send_SSH_CMSG_EXIT_CONFIRMATION();
System.out.println(""String_Node_Str"" + value);
disconnect();
break;
case SSH_MSG_DEBUG:
str=SshMisc.getString(0,packetData);
System.out.println(""String_Node_Str"" + ""String_Node_Str"" + str);
return str.getBytes();
default :
System.err.print(""String_Node_Str"" + packetType);
break;
}
return null;
}",0.988221007893139
143928,"private SshPacket handleBytes(byte buff[],int offset,int count) throws IOException {
  if (debug > 1)   System.out.println(""String_Node_Str"" + buff + ""String_Node_Str""+ count+ ""String_Node_Str"");
  byte b;
  int boffset=offset;
  while (boffset < count) {
    b=buff[boffset++];
switch (phase) {
case PHASE_INIT:
      identification_string+=(char)b;
    if (b == '\n') {
      phase++;
      write(identification_string_sent.getBytes());
      position=0;
      byte[] data=SshMisc.createString(identification_string_sent);
      byte packet_type=SSH_SMSG_STDOUT_DATA;
      SshPacket fistLine=createPacket(packet_type,data);
      return fistLine;
    }
  break;
case PHASE_SSH_RECEIVE_PACKET:
SshPacket result=lastPacketReceived.getPacketfromBytes(buff,boffset - 1,count);
return result;
}
}
return null;
}","private SshPacket handleBytes(byte buff[],int offset,int count) throws IOException {
  if (debug > 1)   System.out.println(""String_Node_Str"" + buff + ""String_Node_Str""+ count+ ""String_Node_Str"");
  byte b;
  int boffset=offset;
  while (boffset < count) {
    b=buff[boffset++];
switch (phase) {
case PHASE_INIT:
      identification_string+=(char)b;
    if (b == '\n') {
      phase++;
      write(identification_string_sent.getBytes());
      position=0;
      byte[] data=SshMisc.createString(identification_string_sent);
      byte packet_type=SSH_SMSG_STDOUT_DATA;
      SshPacket fistLine=createPacket(packet_type,data);
      return fistLine;
    }
  break;
case PHASE_SSH_RECEIVE_PACKET:
SshPacket result=lastPacketReceived.getPacketfromBytes(buff,boffset - 1,count,encryption,crypto);
return result;
}
}
return null;
}",0.988997555012225
143929,"private SshPacket createPacket(byte newType,byte[] newData) throws IOException {
  return new SshPacket(newType,newData);
}","private SshPacket createPacket(byte newType,byte[] newData) throws IOException {
  return new SshPacket(newType,newData,encryption,crypto);
}",0.9318181818181818
143930,"public SshPacket getPacketfromBytes(byte buff[],int offset,int count) throws IOException {
  int boffset=offset;
  byte b;
  while (boffset < count) {
    b=buff[boffset++];
switch (phase_packet) {
case PHASE_packet_length:
      packet_length_array[position]=b;
    if (++position >= 4) {
      packet_length=(packet_length_array[3] & 0xff) + ((packet_length_array[2] & 0xff) << 8) + ((packet_length_array[1] & 0xff) << 16)+ ((packet_length_array[0] & 0xff) << 24);
      position=0;
      phase_packet++;
    }
  break;
case PHASE_block:
if (position == 0) {
  int lengthBlock=8 * (packet_length / 8 + 1);
  block=new byte[lengthBlock];
}
block[position]=b;
if (++position >= block.length) {
if (count > boffset) {
toBeFinished=true;
unfinishedBuffer=buff;
positionInUnfinishedBuffer=boffset;
}
 else toBeFinished=false;
position=0;
phase_packet=PHASE_packet_length;
if (encryption) crypto.decrypt(block);
decryptedBlock=block;
setPacketFromDecryptedBlock();
if (!checkCrc()) {
System.err.println(""String_Node_Str"");
return null;
}
return this;
}
break;
}
}
toBeFinished=false;
return null;
}","public SshPacket getPacketfromBytes(byte buff[],int offset,int count,boolean encryption,SshCrypto crypto) throws IOException {
  int boffset=offset;
  byte b;
  while (boffset < count) {
    b=buff[boffset++];
switch (phase_packet) {
case PHASE_packet_length:
      packet_length_array[position]=b;
    if (++position >= 4) {
      packet_length=(packet_length_array[3] & 0xff) + ((packet_length_array[2] & 0xff) << 8) + ((packet_length_array[1] & 0xff) << 16)+ ((packet_length_array[0] & 0xff) << 24);
      position=0;
      phase_packet++;
    }
  break;
case PHASE_block:
if (position == 0) {
  int lengthBlock=8 * (packet_length / 8 + 1);
  block=new byte[lengthBlock];
}
block[position]=b;
if (++position >= block.length) {
if (count > boffset) {
toBeFinished=true;
unfinishedBuffer=buff;
positionInUnfinishedBuffer=boffset;
}
 else toBeFinished=false;
position=0;
phase_packet=PHASE_packet_length;
if (encryption) crypto.decrypt(block);
decryptedBlock=block;
setPacketFromDecryptedBlock();
if (!checkCrc()) {
System.err.println(""String_Node_Str"");
return null;
}
return this;
}
break;
}
}
toBeFinished=false;
return null;
}",0.9838129496402878
143931,"public SshPacket(byte newType,byte[] newData) throws IOException {
  data=newData;
  packet_type=newType;
  if (data != null)   packet_length=data.length + 5;
 else   packet_length=5;
  packet_length_array[3]=(byte)(packet_length & 0xff);
  packet_length_array[2]=(byte)((packet_length >> 8) & 0xff);
  packet_length_array[1]=(byte)((packet_length >> 16) & 0xff);
  packet_length_array[0]=(byte)((packet_length >> 24) & 0xff);
  padding=new byte[(8 - (packet_length % 8))];
  if (!encryption)   for (int i=0; i < padding.length; i++)   padding[i]=0;
 else {
    for (int i=0; i < padding.length; i++)     padding[i]=SshMisc.getNotZeroRandomByte();
  }
  byte[] tempByte=new byte[packet_length + padding.length - 4];
  int offset=0;
  for (int i=0; i < padding.length; i++)   tempByte[offset++]=padding[i];
  tempByte[offset++]=packet_type;
  if (packet_length > 5)   for (int i=0; i < data.length; i++)   tempByte[offset++]=data[i];
  long crc=0;
  crc=SshMisc.crc32(tempByte,tempByte.length);
  crc_array[3]=(byte)(crc & 0xff);
  crc_array[2]=(byte)((crc >> 8) & 0xff);
  crc_array[1]=(byte)((crc >> 16) & 0xff);
  crc_array[0]=(byte)((crc >> 24) & 0xff);
  setBlock();
  if (encryption)   crypto.encrypt(block);
  encryptedBlock=block;
}","public SshPacket(byte newType,byte[] newData,boolean encryption,SshCrypto crypto) throws IOException {
  data=newData;
  packet_type=newType;
  if (data != null)   packet_length=data.length + 5;
 else   packet_length=5;
  packet_length_array[3]=(byte)(packet_length & 0xff);
  packet_length_array[2]=(byte)((packet_length >> 8) & 0xff);
  packet_length_array[1]=(byte)((packet_length >> 16) & 0xff);
  packet_length_array[0]=(byte)((packet_length >> 24) & 0xff);
  padding=new byte[(8 - (packet_length % 8))];
  if (!encryption)   for (int i=0; i < padding.length; i++)   padding[i]=0;
 else {
    for (int i=0; i < padding.length; i++)     padding[i]=SshMisc.getNotZeroRandomByte();
  }
  byte[] tempByte=new byte[packet_length + padding.length - 4];
  int offset=0;
  for (int i=0; i < padding.length; i++)   tempByte[offset++]=padding[i];
  tempByte[offset++]=packet_type;
  if (packet_length > 5)   for (int i=0; i < data.length; i++)   tempByte[offset++]=data[i];
  long crc=0;
  crc=SshMisc.crc32(tempByte,tempByte.length);
  crc_array[3]=(byte)(crc & 0xff);
  crc_array[2]=(byte)((crc >> 8) & 0xff);
  crc_array[1]=(byte)((crc >> 16) & 0xff);
  crc_array[0]=(byte)((crc >> 24) & 0xff);
  setBlock();
  if (encryption)   crypto.encrypt(block);
  encryptedBlock=block;
}",0.9856801909307876
143932,"private byte[] Send_SSH_CMSG_SESSION_KEY(byte[] anti_spoofing_cookie,byte[] server_key_public_modulus,byte[] host_key_public_modulus,byte[] supported_ciphers_mask,byte[] server_key_public_exponent,byte[] host_key_public_exponent) throws IOException {
  String str;
  int boffset;
  String session_id;
  byte cipher_type;
  byte[] session_key;
  session_id=new String(host_key_public_modulus);
  session_id+=new String(server_key_public_modulus);
  session_id+=new String(anti_spoofing_cookie);
  byte[] hash_md5=MD5.hash(session_id);
  byte[] session_id_byte=session_id.getBytes();
  cipher_type=(byte)SSH_CIPHER_IDEA;
  if ((((1 << cipher_type) & 0xff) & supported_ciphers_mask[3]) == 0) {
    System.err.println(""String_Node_Str"");
    disconnect();
    return ""String_Node_Str"".getBytes();
  }
  byte[] random_bits1=new byte[16], random_bits2=new byte[16];
  java.util.Date date=new java.util.Date();
  random_bits2=random_bits1=MD5.hash(""String_Node_Str"" + Math.random() * (new java.util.Date()).getDate());
  random_bits1=MD5.hash(SshMisc.addArrayOfBytes(MD5.hash(password + login),random_bits1));
  random_bits2=MD5.hash(SshMisc.addArrayOfBytes(MD5.hash(password + login),random_bits2));
  session_key=SshMisc.addArrayOfBytes(random_bits1,random_bits2);
  byte[] session_keyXored=SshMisc.XORArrayOfBytes(random_bits1,hash_md5);
  session_keyXored=SshMisc.addArrayOfBytes(session_keyXored,session_keyXored);
  byte[] encrypted_session_key=SshCrypto.encrypteRSAPkcs1Twice(session_keyXored,server_key_public_exponent,server_key_public_modulus,host_key_public_exponent,host_key_public_modulus);
  byte[] protocol_flags=new byte[4];
  protocol_flags[0]=protocol_flags[1]=protocol_flags[2]=protocol_flags[3]=0;
  int length=1 + anti_spoofing_cookie.length + encrypted_session_key.length+ protocol_flags.length;
  byte[] data=new byte[length];
  boffset=0;
  data[boffset++]=(byte)cipher_type;
  for (int i=0; i < 8; i++)   data[boffset++]=anti_spoofing_cookie[i];
  for (int i=0; i < encrypted_session_key.length; i++)   data[boffset++]=encrypted_session_key[i];
  for (int i=0; i < 4; i++)   data[boffset++]=protocol_flags[i];
  byte packet_type=SSH_CMSG_SESSION_KEY;
  SshPacket packet=createPacket(packet_type,data);
  sendPacket(packet);
  if (cipher_type == (byte)SSH_CIPHER_IDEA) {
    byte[] IDEAKey=new byte[16];
    for (int i=0; i < 16; i++)     IDEAKey[i]=session_key[i];
    crypto=new SshCrypto(IDEAKey);
    encryption=true;
    SshPacket.encryption=encryption;
    SshPacket.crypto=crypto;
  }
  return null;
}","private byte[] Send_SSH_CMSG_SESSION_KEY(byte[] anti_spoofing_cookie,byte[] server_key_public_modulus,byte[] host_key_public_modulus,byte[] supported_ciphers_mask,byte[] server_key_public_exponent,byte[] host_key_public_exponent) throws IOException {
  String str;
  int boffset;
  byte cipher_type;
  byte[] session_key;
  byte[] session_id_byte=new byte[host_key_public_modulus.length + server_key_public_modulus.length + anti_spoofing_cookie.length];
  System.arraycopy(host_key_public_modulus,0,session_id_byte,0,host_key_public_modulus.length);
  System.arraycopy(server_key_public_modulus,0,session_id_byte,host_key_public_modulus.length,server_key_public_modulus.length);
  System.arraycopy(anti_spoofing_cookie,0,session_id_byte,host_key_public_modulus.length + server_key_public_modulus.length,anti_spoofing_cookie.length);
  byte[] hash_md5=MD5.hash(session_id_byte);
  cipher_type=(byte)SSH_CIPHER_IDEA;
  if ((((1 << cipher_type) & 0xff) & supported_ciphers_mask[3]) == 0) {
    System.err.println(""String_Node_Str"");
    disconnect();
    return ""String_Node_Str"".getBytes();
  }
  byte[] random_bits1=new byte[16], random_bits2=new byte[16];
  random_bits2=random_bits1=MD5.hash(""String_Node_Str"" + Math.random() * (new java.util.Date()).getTime());
  random_bits1=MD5.hash(SshMisc.addArrayOfBytes(MD5.hash(password + login),random_bits1));
  random_bits2=MD5.hash(SshMisc.addArrayOfBytes(MD5.hash(password + login),random_bits2));
  session_key=SshMisc.addArrayOfBytes(random_bits1,random_bits2);
  byte[] session_keyXored=SshMisc.XORArrayOfBytes(random_bits1,hash_md5);
  session_keyXored=SshMisc.addArrayOfBytes(session_keyXored,session_keyXored);
  byte[] encrypted_session_key=SshCrypto.encrypteRSAPkcs1Twice(session_keyXored,server_key_public_exponent,server_key_public_modulus,host_key_public_exponent,host_key_public_modulus);
  byte[] protocol_flags=new byte[4];
  protocol_flags[0]=protocol_flags[1]=protocol_flags[2]=protocol_flags[3]=0;
  int length=1 + anti_spoofing_cookie.length + encrypted_session_key.length+ protocol_flags.length;
  byte[] data=new byte[length];
  boffset=0;
  data[boffset++]=(byte)cipher_type;
  for (int i=0; i < 8; i++)   data[boffset++]=anti_spoofing_cookie[i];
  for (int i=0; i < encrypted_session_key.length; i++)   data[boffset++]=encrypted_session_key[i];
  for (int i=0; i < 4; i++)   data[boffset++]=protocol_flags[i];
  byte packet_type=SSH_CMSG_SESSION_KEY;
  SshPacket packet=createPacket(packet_type,data);
  sendPacket(packet);
  if (cipher_type == (byte)SSH_CIPHER_IDEA) {
    byte[] IDEAKey=new byte[16];
    for (int i=0; i < 16; i++)     IDEAKey[i]=session_key[i];
    crypto=new SshCrypto(IDEAKey);
    encryption=true;
    SshPacket.encryption=encryption;
    SshPacket.crypto=crypto;
  }
  return null;
}",0.8498679743493022
143933,"/** 
 * Read data from the remote host. Blocks until data is available.  Returns an array of bytes that will be displayed.
 */
synchronized public byte[] handleSSH(byte[] b) throws IOException {
  byte[] rest=null;
  while (lastPacketReceived != null && lastPacketReceived.toBeFinished) {
    byte[] buff=lastPacketReceived.unfinishedBuffer;
    int start=lastPacketReceived.positionInUnfinishedBuffer;
    if (buff != null) {
      byte[] result=packetDone(handleBytes(buff,start,buff.length));
      if (rest != null) {
        if (result != null) {
          byte[] tmp=new byte[rest.length + result.length];
          System.arraycopy(rest,0,tmp,0,rest.length);
          System.arraycopy(result,0,tmp,rest.length,result.length);
          rest=tmp;
        }
      }
 else       rest=result;
    }
  }
  byte[] result=packetDone(handleBytes(b,0,b.length));
  if (rest != null)   if (result != null) {
    byte[] cat=new byte[rest.length + result.length];
    System.arraycopy(rest,0,cat,0,rest.length);
    System.arraycopy(result,0,cat,rest.length,result.length);
    return cat;
  }
 else   return rest;
  return result;
}","/** 
 * Read data from the remote host. Blocks until data is available.  Returns an array of bytes that will be displayed.
 */
synchronized public byte[] handleSSH(byte[] b) throws IOException {
  byte[] result=packetDone(handleBytes(b,0,b.length));
  while (lastPacketReceived != null && lastPacketReceived.toBeFinished) {
    byte[] buff=lastPacketReceived.unfinishedBuffer;
    int start=lastPacketReceived.positionInUnfinishedBuffer;
    if (buff != null) {
      byte[] rest=packetDone(handleBytes(buff,start,buff.length));
      if (rest != null) {
        if (result != null) {
          byte[] tmp=new byte[rest.length + result.length];
          System.arraycopy(result,0,tmp,0,result.length);
          System.arraycopy(rest,0,tmp,result.length,rest.length);
          result=tmp;
        }
 else         result=rest;
      }
    }
  }
  return result;
}",0.7757150025087808
143934,"private void configure(PluginConfig cfg){
  String tmp;
  if ((tmp=cfg.getProperty(""String_Node_Str"",id,""String_Node_Str"")) != null)   terminal.setForeground(Color.decode(tmp));
  if ((tmp=cfg.getProperty(""String_Node_Str"",id,""String_Node_Str"")) != null)   terminal.setBackground(Color.decode(tmp));
  if ((tmp=cfg.getProperty(""String_Node_Str"",id,""String_Node_Str"")) != null) {
    Properties colorSet=new Properties();
    try {
      colorSet.load(getClass().getResourceAsStream(tmp));
    }
 catch (    Exception e) {
      try {
        colorSet.load(new URL(tmp).openStream());
      }
 catch (      Exception ue) {
        error(""String_Node_Str"" + tmp);
        error(""String_Node_Str"" + e);
        error(""String_Node_Str"" + ue);
        colorSet=null;
      }
    }
    Hashtable colors=new Hashtable();
    colors.put(""String_Node_Str"",Color.black);
    colors.put(""String_Node_Str"",Color.red);
    colors.put(""String_Node_Str"",Color.green);
    colors.put(""String_Node_Str"",Color.yellow);
    colors.put(""String_Node_Str"",Color.blue);
    colors.put(""String_Node_Str"",Color.magenta);
    colors.put(""String_Node_Str"",Color.orange);
    colors.put(""String_Node_Str"",Color.pink);
    colors.put(""String_Node_Str"",Color.cyan);
    colors.put(""String_Node_Str"",Color.white);
    colors.put(""String_Node_Str"",Color.white);
    if (colorSet != null) {
      Color set[]=terminal.getColorSet();
      for (int i=0; i < 8; i++)       if ((tmp=colorSet.getProperty(""String_Node_Str"" + i)) != null)       if (colors.get(tmp) != null)       set[i]=(Color)colors.get(tmp);
 else       try {
        set[i]=Color.getColor(tmp);
      }
 catch (      Exception e) {
        error(""String_Node_Str"" + tmp);
      }
      terminal.setColorSet(set);
    }
  }
  if ((tmp=cfg.getProperty(""String_Node_Str"",id,""String_Node_Str"")) != null) {
    String size=tmp;
    boolean raised=false;
    if ((tmp=cfg.getProperty(""String_Node_Str"",id,""String_Node_Str"")) != null)     raised=Boolean.valueOf(tmp).booleanValue();
    terminal.setBorder(Integer.parseInt(size),raised);
  }
  if ((tmp=cfg.getProperty(""String_Node_Str"",id,""String_Node_Str"")) != null && !personalJava) {
    String direction=tmp;
    if (!direction.equals(""String_Node_Str"")) {
      if (!direction.equals(""String_Node_Str"") && !direction.equals(""String_Node_Str""))       direction=""String_Node_Str"";
      Scrollbar scrollBar=new Scrollbar();
      tPanel.add(direction,scrollBar);
      terminal.setScrollbar(scrollBar);
    }
  }
  if ((tmp=cfg.getProperty(""String_Node_Str"",id,""String_Node_Str"")) != null)   terminal.setTerminalID(tmp);
  if ((tmp=cfg.getProperty(""String_Node_Str"",id,""String_Node_Str"")) != null)   terminal.setBufferSize(Integer.parseInt(tmp));
  if ((tmp=cfg.getProperty(""String_Node_Str"",id,""String_Node_Str"")) != null)   try {
    int idx=tmp.indexOf(',');
    int width=Integer.parseInt(tmp.substring(1,idx).trim());
    int height=Integer.parseInt(tmp.substring(idx + 1,tmp.length() - 1).trim());
    terminal.setScreenSize(width,height);
  }
 catch (  Exception e) {
    error(""String_Node_Str"" + tmp);
    error(""String_Node_Str"" + e);
  }
  if ((tmp=cfg.getProperty(""String_Node_Str"",id,""String_Node_Str"")) != null)   if (tmp.equals(""String_Node_Str""))   terminal.setResizeStrategy(terminal.RESIZE_FONT);
 else   if (tmp.equals(""String_Node_Str""))   terminal.setResizeStrategy(terminal.RESIZE_SCREEN);
 else   terminal.setResizeStrategy(terminal.RESIZE_NONE);
  if ((tmp=cfg.getProperty(""String_Node_Str"",id,""String_Node_Str"")) != null) {
    String font=tmp;
    int style=Font.PLAIN, fsize=12;
    if ((tmp=cfg.getProperty(""String_Node_Str"",id,""String_Node_Str"")) != null)     fsize=Integer.parseInt(tmp);
    String fontStyle=cfg.getProperty(""String_Node_Str"",id,""String_Node_Str"");
    if (fontStyle == null || fontStyle.equals(""String_Node_Str""))     style=Font.PLAIN;
 else     if (fontStyle.equals(""String_Node_Str""))     style=Font.BOLD;
 else     if (fontStyle.equals(""String_Node_Str""))     style=Font.ITALIC;
 else     if (fontStyle.equals(""String_Node_Str""))     style=Font.BOLD | Font.ITALIC;
    terminal.setFont(new Font(font,style,fsize));
  }
  if ((tmp=cfg.getProperty(""String_Node_Str"",id,""String_Node_Str"")) != null) {
    Properties keyCodes=new Properties();
    try {
      keyCodes.load(getClass().getResourceAsStream(tmp));
    }
 catch (    Exception e) {
      try {
        keyCodes.load(new URL(tmp).openStream());
      }
 catch (      Exception ue) {
        error(""String_Node_Str"" + tmp);
        error(""String_Node_Str"" + e);
        error(""String_Node_Str"" + ue);
        keyCodes=null;
      }
    }
    if (keyCodes != null)     terminal.setKeyCodes(keyCodes);
  }
  if ((tmp=cfg.getProperty(""String_Node_Str"",id,""String_Node_Str"")) != null)   terminal.setVMS((Boolean.valueOf(tmp)).booleanValue());
  if ((tmp=cfg.getProperty(""String_Node_Str"",id,""String_Node_Str"")) != null)   terminal.setIBMCharset((Boolean.valueOf(tmp)).booleanValue());
  tPanel.setBackground(terminal.getBackground());
}","private void configure(PluginConfig cfg){
  String tmp;
  if ((tmp=cfg.getProperty(""String_Node_Str"",id,""String_Node_Str"")) != null)   terminal.setForeground(Color.decode(tmp));
  if ((tmp=cfg.getProperty(""String_Node_Str"",id,""String_Node_Str"")) != null)   terminal.setBackground(Color.decode(tmp));
  if ((tmp=cfg.getProperty(""String_Node_Str"",id,""String_Node_Str"")) != null) {
    Properties colorSet=new Properties();
    try {
      colorSet.load(getClass().getResourceAsStream(tmp));
    }
 catch (    Exception e) {
      try {
        colorSet.load(new URL(tmp).openStream());
      }
 catch (      Exception ue) {
        error(""String_Node_Str"" + tmp);
        error(""String_Node_Str"" + e);
        error(""String_Node_Str"" + ue);
        colorSet=null;
      }
    }
    Hashtable colors=new Hashtable();
    colors.put(""String_Node_Str"",Color.black);
    colors.put(""String_Node_Str"",Color.red);
    colors.put(""String_Node_Str"",Color.green);
    colors.put(""String_Node_Str"",Color.yellow);
    colors.put(""String_Node_Str"",Color.blue);
    colors.put(""String_Node_Str"",Color.magenta);
    colors.put(""String_Node_Str"",Color.orange);
    colors.put(""String_Node_Str"",Color.pink);
    colors.put(""String_Node_Str"",Color.cyan);
    colors.put(""String_Node_Str"",Color.white);
    colors.put(""String_Node_Str"",Color.white);
    if (colorSet != null) {
      Color set[]=terminal.getColorSet();
      for (int i=0; i < 8; i++)       if ((tmp=colorSet.getProperty(""String_Node_Str"" + i)) != null)       if (colors.get(tmp) != null)       set[i]=(Color)colors.get(tmp);
 else       try {
        if (Color.getColor(tmp) != null)         set[i]=Color.getColor(tmp);
 else         set[i]=Color.decode(tmp);
      }
 catch (      Exception e) {
        error(""String_Node_Str"" + tmp);
      }
      terminal.setColorSet(set);
    }
  }
  if ((tmp=cfg.getProperty(""String_Node_Str"",id,""String_Node_Str"")) != null) {
    String size=tmp;
    boolean raised=false;
    if ((tmp=cfg.getProperty(""String_Node_Str"",id,""String_Node_Str"")) != null)     raised=Boolean.valueOf(tmp).booleanValue();
    terminal.setBorder(Integer.parseInt(size),raised);
  }
  if ((tmp=cfg.getProperty(""String_Node_Str"",id,""String_Node_Str"")) != null && !personalJava) {
    String direction=tmp;
    if (!direction.equals(""String_Node_Str"")) {
      if (!direction.equals(""String_Node_Str"") && !direction.equals(""String_Node_Str""))       direction=""String_Node_Str"";
      Scrollbar scrollBar=new Scrollbar();
      tPanel.add(direction,scrollBar);
      terminal.setScrollbar(scrollBar);
    }
  }
  if ((tmp=cfg.getProperty(""String_Node_Str"",id,""String_Node_Str"")) != null)   terminal.setTerminalID(tmp);
  if ((tmp=cfg.getProperty(""String_Node_Str"",id,""String_Node_Str"")) != null)   terminal.setBufferSize(Integer.parseInt(tmp));
  if ((tmp=cfg.getProperty(""String_Node_Str"",id,""String_Node_Str"")) != null)   try {
    int idx=tmp.indexOf(',');
    int width=Integer.parseInt(tmp.substring(1,idx).trim());
    int height=Integer.parseInt(tmp.substring(idx + 1,tmp.length() - 1).trim());
    terminal.setScreenSize(width,height);
  }
 catch (  Exception e) {
    error(""String_Node_Str"" + tmp);
    error(""String_Node_Str"" + e);
  }
  if ((tmp=cfg.getProperty(""String_Node_Str"",id,""String_Node_Str"")) != null)   if (tmp.equals(""String_Node_Str""))   terminal.setResizeStrategy(terminal.RESIZE_FONT);
 else   if (tmp.equals(""String_Node_Str""))   terminal.setResizeStrategy(terminal.RESIZE_SCREEN);
 else   terminal.setResizeStrategy(terminal.RESIZE_NONE);
  if ((tmp=cfg.getProperty(""String_Node_Str"",id,""String_Node_Str"")) != null) {
    String font=tmp;
    int style=Font.PLAIN, fsize=12;
    if ((tmp=cfg.getProperty(""String_Node_Str"",id,""String_Node_Str"")) != null)     fsize=Integer.parseInt(tmp);
    String fontStyle=cfg.getProperty(""String_Node_Str"",id,""String_Node_Str"");
    if (fontStyle == null || fontStyle.equals(""String_Node_Str""))     style=Font.PLAIN;
 else     if (fontStyle.equals(""String_Node_Str""))     style=Font.BOLD;
 else     if (fontStyle.equals(""String_Node_Str""))     style=Font.ITALIC;
 else     if (fontStyle.equals(""String_Node_Str""))     style=Font.BOLD | Font.ITALIC;
    terminal.setFont(new Font(font,style,fsize));
  }
  if ((tmp=cfg.getProperty(""String_Node_Str"",id,""String_Node_Str"")) != null) {
    Properties keyCodes=new Properties();
    try {
      keyCodes.load(getClass().getResourceAsStream(tmp));
    }
 catch (    Exception e) {
      try {
        keyCodes.load(new URL(tmp).openStream());
      }
 catch (      Exception ue) {
        error(""String_Node_Str"" + tmp);
        error(""String_Node_Str"" + e);
        error(""String_Node_Str"" + ue);
        keyCodes=null;
      }
    }
    if (keyCodes != null)     terminal.setKeyCodes(keyCodes);
  }
  if ((tmp=cfg.getProperty(""String_Node_Str"",id,""String_Node_Str"")) != null)   terminal.setVMS((Boolean.valueOf(tmp)).booleanValue());
  if ((tmp=cfg.getProperty(""String_Node_Str"",id,""String_Node_Str"")) != null)   terminal.setIBMCharset((Boolean.valueOf(tmp)).booleanValue());
  tPanel.setBackground(terminal.getBackground());
}",0.9919952564482656
143935,"/** 
 * Create a new scripting plugin.
 */
public Script(PluginBus bus,final String id){
  super(bus,id);
  bus.registerPluginListener(new SocketListener(){
    public void connect(    String host,    int port){
      setup(savedScript);
    }
    public void disconnect(){
    }
  }
);
  bus.registerPluginListener(new ConfigurationListener(){
    public void setConfiguration(    PluginConfig config){
      savedScript=new Vector();
      String s=config.getProperty(""String_Node_Str"",id,""String_Node_Str"");
      if (s != null) {
        if (s.charAt(0) == '@') {
          Script.this.error(""String_Node_Str"");
        }
        if (debug > 0)         Script.this.error(s);
        String pair[]=null;
        int old=-1, idx=s.indexOf('|');
        while (idx >= 0) {
          if (pair == null) {
            pair=new String[2];
            pair[0]=s.substring(old + 1,idx);
            if (debug > 0)             System.out.print(""String_Node_Str"" + pair[0] + ""String_Node_Str"");
          }
 else {
            pair[1]=s.substring(old + 1,idx) + ""String_Node_Str"";
            if (debug > 0)             System.out.print(pair[1]);
            savedScript.addElement(pair);
            pair=null;
          }
          old=idx;
          idx=s.indexOf('|',old + 1);
        }
        if (pair != null) {
          pair[1]=s.substring(old + 1) + ""String_Node_Str"";
          savedScript.addElement(pair);
          if (debug > 0)           System.out.print(pair[1]);
        }
 else         Script.this.error(""String_Node_Str"");
        setup(savedScript);
      }
    }
  }
);
}","/** 
 * Create a new scripting plugin.
 */
public Script(PluginBus bus,final String id){
  super(bus,id);
  bus.registerPluginListener(new OnlineStatusListener(){
    public void online(){
      setup(savedScript);
    }
    public void offline(){
    }
  }
);
  bus.registerPluginListener(new ConfigurationListener(){
    public void setConfiguration(    PluginConfig config){
      savedScript=new Vector();
      String s=config.getProperty(""String_Node_Str"",id,""String_Node_Str"");
      if (s != null) {
        if (s.charAt(0) == '@') {
          Script.this.error(""String_Node_Str"");
        }
        if (debug > 0)         Script.this.error(s);
        String pair[]=null;
        int old=-1, idx=s.indexOf('|');
        while (idx >= 0) {
          if (pair == null) {
            pair=new String[2];
            pair[0]=s.substring(old + 1,idx);
            if (debug > 0)             System.out.print(""String_Node_Str"" + pair[0] + ""String_Node_Str"");
          }
 else {
            pair[1]=s.substring(old + 1,idx) + ""String_Node_Str"";
            if (debug > 0)             System.out.print(pair[1]);
            savedScript.addElement(pair);
            pair=null;
          }
          old=idx;
          idx=s.indexOf('|',old + 1);
        }
        if (pair != null) {
          pair[1]=s.substring(old + 1) + ""String_Node_Str"";
          savedScript.addElement(pair);
          if (debug > 0)           System.out.print(pair[1]);
        }
 else         Script.this.error(""String_Node_Str"");
      }
    }
  }
);
}",0.9660038486209108
143936,"/** 
 * Try to match the byte array s against the most current script match. It will write the answer immediatly  if the script matches and will return instantly when all the script work is done.
 * @param s the array of bytes to match against
 * @param length the amount of bytes in the array
 */
private void match(byte[] s,int length) throws IOException {
  for (int i=0; !done && i < length; i++) {
    if (s[i] == match[matchPos])     if (++matchPos >= match.length)     write(found());
 else     reset();
  }
}","/** 
 * Try to match the byte array s against the most current script match. It will write the answer immediatly  if the script matches and will return instantly when all the script work is done.
 * @param s the array of bytes to match against
 * @param length the amount of bytes in the array
 */
private void match(byte[] s,int length) throws IOException {
  for (int i=0; !done && i < length; i++) {
    if (s[i] == match[matchPos]) {
      if (++matchPos >= match.length)       write(found());
    }
 else     reset();
  }
}",0.9885057471264368
143937,"public void setConfiguration(PluginConfig config){
  savedScript=new Vector();
  String s=config.getProperty(""String_Node_Str"",id,""String_Node_Str"");
  if (s != null) {
    if (s.charAt(0) == '@') {
      Script.this.error(""String_Node_Str"");
    }
    if (debug > 0)     Script.this.error(s);
    String pair[]=null;
    int old=-1, idx=s.indexOf('|');
    while (idx >= 0) {
      if (pair == null) {
        pair=new String[2];
        pair[0]=s.substring(old + 1,idx);
        if (debug > 0)         System.out.print(""String_Node_Str"" + pair[0] + ""String_Node_Str"");
      }
 else {
        pair[1]=s.substring(old + 1,idx) + ""String_Node_Str"";
        if (debug > 0)         System.out.print(pair[1]);
        savedScript.addElement(pair);
        pair=null;
      }
      old=idx;
      idx=s.indexOf('|',old + 1);
    }
    if (pair != null) {
      pair[1]=s.substring(old + 1) + ""String_Node_Str"";
      savedScript.addElement(pair);
      if (debug > 0)       System.out.print(pair[1]);
    }
 else     Script.this.error(""String_Node_Str"");
    setup(savedScript);
  }
}","public void setConfiguration(PluginConfig config){
  savedScript=new Vector();
  String s=config.getProperty(""String_Node_Str"",id,""String_Node_Str"");
  if (s != null) {
    if (s.charAt(0) == '@') {
      Script.this.error(""String_Node_Str"");
    }
    if (debug > 0)     Script.this.error(s);
    String pair[]=null;
    int old=-1, idx=s.indexOf('|');
    while (idx >= 0) {
      if (pair == null) {
        pair=new String[2];
        pair[0]=s.substring(old + 1,idx);
        if (debug > 0)         System.out.print(""String_Node_Str"" + pair[0] + ""String_Node_Str"");
      }
 else {
        pair[1]=s.substring(old + 1,idx) + ""String_Node_Str"";
        if (debug > 0)         System.out.print(pair[1]);
        savedScript.addElement(pair);
        pair=null;
      }
      old=idx;
      idx=s.indexOf('|',old + 1);
    }
    if (pair != null) {
      pair[1]=s.substring(old + 1) + ""String_Node_Str"";
      savedScript.addElement(pair);
      if (debug > 0)       System.out.print(pair[1]);
    }
 else     Script.this.error(""String_Node_Str"");
  }
}",0.9887640449438202
143938,"/** 
 * parse the input buffer
 * @param b      input buffer byte array
 * @param length count of valid bytes in buffer
 * @return       new length of valid bytes in buffer
 */
protected int parse(byte[] b,int length) throws IOException {
  int index, resindex;
  for (index=resindex=0; index < length; index++) {
switch (state) {
case 0:
      if ((char)b[index] == '@') {
        cmd[cmdlen++]=b[index];
        state=1;
      }
 else {
        res[resindex++]=b[index];
      }
    break;
case 1:
  if ((char)b[index] == '@') {
    for (int i=0; i < cmdlen; i++)     res[resindex++]=cmd[i];
    cmdlen=0;
    cmd[cmdlen++]=b[index];
  }
 else {
    cmd[cmdlen++]=b[index];
    if (cmdlen == 4) {
      if (equals(cmd,RFS)) {
        visual.refreshScene();
        reset();
      }
 else       if (equals(cmd,RQV)) {
        write(""String_Node_Str"" + VERSION + ""String_Node_Str"");
        reset();
      }
 else       if (equals(cmd,SCE)) {
        state=2;
      }
 else       if (equals(cmd,VIO)) {
        state=2;
      }
 else       if (equals(cmd,DFO)) {
        state=2;
      }
 else       if (equals(cmd,RMO)) {
        state=2;
      }
 else       if (equals(cmd,DFS)) {
        state=2;
      }
 else       if (equals(cmd,TMS)) {
        byte[] temp=""String_Node_Str"".getBytes();
        for (int i=0; i < temp.length; i++)         res[resindex++]=temp[i];
        reset();
      }
 else {
        for (int i=0; i < cmdlen; i++)         res[resindex++]=cmd[i];
        reset();
      }
    }
  }
break;
case 2:
if ((char)b[index] == '@') {
for (int i=0; i < cmdlen; i++) res[resindex++]=cmd[i];
for (int i=0; i < idlen; i++) res[resindex++]=id[i];
cmdlen=0;
cmd[cmdlen++]=b[index];
idlen=0;
state=1;
}
 else if ((char)b[index] != '.') {
id[idlen++]=b[index];
}
 else {
obj=new String(id,0,idlen);
if (equals(cmd,SCE)) {
  String query=visual.showScene(obj);
  if (query != null)   write(query);
  reset();
}
 else if (equals(cmd,VIO)) {
  state=6;
}
 else if (equals(cmd,RMO)) {
  visual.removeObject(obj);
  reset();
}
 else if (equals(cmd,DFS)) {
  state=3;
}
 else if (equals(cmd,DFO)) {
  state=3;
}
}
break;
case 3:
hex[hexlen++]=b[index];
if (hexlen == 2) {
polys=hexToInt(hex);
if (polys > 32 || polys < 0) {
DBG(""String_Node_Str"" + polys + ""String_Node_Str""+ obj);
if (ignoreErrors) {
DBG(""String_Node_Str"");
cmdlen=0;
state=8;
}
 else {
reset();
}
}
 else {
data=new int[polys][];
state=4;
hexlen=0;
}
}
break;
case 4:
hex[hexlen++]=b[index];
if (hexlen == 2) {
edges=hexToInt(hex);
if (edges > 32 || edges < 0) {
DBG(""String_Node_Str"" + edges + ""String_Node_Str""+ obj);
if (ignoreErrors) {
DBG(""String_Node_Str"");
cmdlen=0;
state=8;
}
 else {
reset();
}
}
 else {
data[poly]=new int[1 + edges * 2];
state=5;
hexlen=0;
}
}
break;
case 5:
hex[hexlen++]=b[index];
if (hexlen == 2) {
int c=hexToInt(hex);
if (c < 0) {
DBG(""String_Node_Str"" + c + ""String_Node_Str""+ obj);
if (ignoreErrors) {
DBG(""String_Node_Str"");
cmdlen=0;
state=8;
}
 else {
reset();
}
}
 else {
data[poly][pos]=c;
hexlen=0;
pos++;
if (pos == edges * 2 + 1) {
poly++;
state=4;
pos=0;
if (poly == polys) {
if (equals(cmd,DFS)) {
visual.defineScene(obj,data);
}
 else if (equals(cmd,DFO)) {
visual.defineObject(obj,data);
}
reset();
}
}
}
}
break;
case 6:
hex[hexlen++]=b[index];
if (hexlen == 2) {
xpos=hexToInt(hex);
if (xpos > 15 || xpos < 0) {
DBG(""String_Node_Str"" + xpos + ""String_Node_Str""+ obj);
reset();
}
 else {
state=7;
hexlen=0;
}
}
break;
case 7:
hex[hexlen++]=b[index];
if (hexlen == 2) {
ypos=hexToInt(hex);
if (ypos > 7 || ypos < 0) {
DBG(""String_Node_Str"" + ypos + ""String_Node_Str""+ obj);
reset();
}
 else {
String query=visual.showObject(obj,xpos,ypos);
if (query != null) write(query);
reset();
}
}
break;
case 8:
if ((char)b[index] == '@') {
cmdlen=0;
cmd[cmdlen++]=b[index];
}
 else if (cmdlen > 0) {
cmd[cmdlen++]=b[index];
if (cmdlen == 4) {
if (equals(cmd,RFS)) {
visual.refreshScene();
reset();
}
 else {
cmdlen=0;
}
}
}
 else {
}
break;
}
}
System.arraycopy(res,0,b,0,resindex);
return resindex;
}","/** 
 * parse the input buffer
 * @param b      input buffer byte array
 * @param length count of valid bytes in buffer
 * @return       new length of valid bytes in buffer
 */
protected int parse(byte[] b,int length) throws IOException {
  int index, resindex;
  for (index=resindex=0; index < length; index++) {
switch (state) {
case 0:
      if ((char)b[index] == '@') {
        cmd[cmdlen++]=b[index];
        state=1;
      }
 else {
        res[resindex++]=b[index];
      }
    break;
case 1:
  if ((char)b[index] == '@') {
    for (int i=0; i < cmdlen; i++)     res[resindex++]=cmd[i];
    cmdlen=0;
    cmd[cmdlen++]=b[index];
  }
 else {
    cmd[cmdlen++]=b[index];
    if (cmdlen == 4) {
      if (equals(cmd,RFS)) {
        visual.refreshScene();
        reset();
      }
 else       if (equals(cmd,RQV)) {
        write(""String_Node_Str"" + VERSION + ""String_Node_Str"");
        reset();
      }
 else       if (equals(cmd,SCE)) {
        state=2;
      }
 else       if (equals(cmd,VIO)) {
        state=2;
      }
 else       if (equals(cmd,DFO)) {
        state=2;
      }
 else       if (equals(cmd,RMO)) {
        state=2;
      }
 else       if (equals(cmd,DFS)) {
        state=2;
      }
 else       if (equals(cmd,TMS)) {
        byte[] temp=""String_Node_Str"".getBytes();
        for (int i=0; i < temp.length; i++)         res[resindex++]=temp[i];
        reset();
      }
 else {
        for (int i=0; i < cmdlen; i++)         res[resindex++]=cmd[i];
        reset();
      }
    }
  }
break;
case 2:
if ((char)b[index] == '@') {
for (int i=0; i < cmdlen; i++) res[resindex++]=cmd[i];
for (int i=0; i < idlen; i++) res[resindex++]=id[i];
cmdlen=0;
cmd[cmdlen++]=b[index];
idlen=0;
state=1;
}
 else if ((char)b[index] != '.') {
id[idlen++]=b[index];
}
 else {
obj=new String(id,0,idlen);
if (equals(cmd,SCE)) {
  String query=visual.showScene(obj);
  if (query != null)   write(query);
  reset();
}
 else if (equals(cmd,VIO)) {
  state=6;
}
 else if (equals(cmd,RMO)) {
  visual.removeObject(obj);
  reset();
}
 else if (equals(cmd,DFS)) {
  state=3;
}
 else if (equals(cmd,DFO)) {
  state=3;
}
}
break;
case 3:
hex[hexlen++]=b[index];
if (hexlen == 2) {
polys=hexToInt(hex);
if (polys > 32 || polys < 0) {
DBG(""String_Node_Str"" + polys + ""String_Node_Str""+ obj);
if (ignoreErrors) {
DBG(""String_Node_Str"");
cmdlen=0;
state=8;
}
 else {
reset();
}
}
 else {
data=new int[polys][];
if (polys > 0) {
state=4;
}
 else {
if (equals(cmd,DFS)) {
visual.defineScene(obj,data);
}
 else if (equals(cmd,DFO)) {
visual.defineObject(obj,data);
}
reset();
}
hexlen=0;
}
}
break;
case 4:
hex[hexlen++]=b[index];
if (hexlen == 2) {
edges=hexToInt(hex);
if (edges > 32 || edges < 0) {
DBG(""String_Node_Str"" + edges + ""String_Node_Str""+ obj);
if (ignoreErrors) {
DBG(""String_Node_Str"");
cmdlen=0;
state=8;
}
 else {
reset();
}
}
 else {
data[poly]=new int[1 + edges * 2];
state=5;
hexlen=0;
}
}
break;
case 5:
hex[hexlen++]=b[index];
if (hexlen == 2) {
int c=hexToInt(hex);
if (c < 0) {
DBG(""String_Node_Str"" + c + ""String_Node_Str""+ obj);
if (ignoreErrors) {
DBG(""String_Node_Str"");
cmdlen=0;
state=8;
}
 else {
reset();
}
}
 else {
data[poly][pos]=c;
hexlen=0;
pos++;
if (pos == edges * 2 + 1) {
poly++;
state=4;
pos=0;
if (poly == polys) {
if (equals(cmd,DFS)) {
visual.defineScene(obj,data);
}
 else if (equals(cmd,DFO)) {
visual.defineObject(obj,data);
}
reset();
}
}
}
}
break;
case 6:
hex[hexlen++]=b[index];
if (hexlen == 2) {
xpos=hexToInt(hex);
if (xpos > 15 || xpos < 0) {
DBG(""String_Node_Str"" + xpos + ""String_Node_Str""+ obj);
reset();
}
 else {
state=7;
hexlen=0;
}
}
break;
case 7:
hex[hexlen++]=b[index];
if (hexlen == 2) {
ypos=hexToInt(hex);
if (ypos > 7 || ypos < 0) {
DBG(""String_Node_Str"" + ypos + ""String_Node_Str""+ obj);
reset();
}
 else {
String query=visual.showObject(obj,xpos,ypos);
if (query != null) write(query);
reset();
}
}
break;
case 8:
if ((char)b[index] == '@') {
cmdlen=0;
cmd[cmdlen++]=b[index];
}
 else if (cmdlen > 0) {
cmd[cmdlen++]=b[index];
if (cmdlen == 4) {
if (equals(cmd,RFS)) {
visual.refreshScene();
reset();
}
 else {
cmdlen=0;
}
}
}
 else {
}
break;
}
}
System.arraycopy(res,0,b,0,resindex);
return resindex;
}",0.7738779503485386
143939,"/** 
 * Create a new terminal plugin and initialize the terminal emulation.
 */
public Terminal(final PluginBus bus,final String id){
  super(bus,id);
  if (!personalJava) {
    menu=new Menu(""String_Node_Str"");
    MenuItem item;
    menu.add(item=new MenuItem(""String_Node_Str""));
    item.addActionListener(new ActionListener(){
      public void actionPerformed(      ActionEvent e){
        Font font=terminal.getFont();
        terminal.setFont(new Font(font.getName(),font.getStyle(),font.getSize() - 1));
        if (tPanel.getParent() != null) {
          Component parent=tPanel.getParent();
          if (parent instanceof java.awt.Frame)           ((java.awt.Frame)parent).pack();
          tPanel.getParent().doLayout();
          tPanel.getParent().validate();
        }
      }
    }
);
    menu.add(item=new MenuItem(""String_Node_Str""));
    item.addActionListener(new ActionListener(){
      public void actionPerformed(      ActionEvent e){
        Font font=terminal.getFont();
        terminal.setFont(new Font(font.getName(),font.getStyle(),font.getSize() + 1));
        if (tPanel.getParent() != null) {
          Component parent=tPanel.getParent();
          if (parent instanceof java.awt.Frame)           ((java.awt.Frame)parent).pack();
          tPanel.getParent().doLayout();
          tPanel.getParent().validate();
        }
      }
    }
);
    menu.add(item=new MenuItem(""String_Node_Str""));
    item.addActionListener(new ActionListener(){
      public void actionPerformed(      ActionEvent e){
        terminal.reset();
      }
    }
);
  }
  terminal=new vt320(){
    public void write(    byte[] b){
      try {
        Terminal.this.write(b);
      }
 catch (      IOException e) {
        reader=null;
      }
    }
  }
;
  tPanel=new Panel(new BorderLayout()){
    public void update(    java.awt.Graphics g){
      paint(g);
    }
  }
;
  tPanel.add(""String_Node_Str"",terminal);
  terminal.addFocusListener(new FocusListener(){
    public void focusGained(    FocusEvent evt){
      terminal.setCursor(Cursor.getPredefinedCursor(Cursor.TEXT_CURSOR));
      bus.broadcast(new FocusStatus(Terminal.this,evt));
    }
    public void focusLost(    FocusEvent evt){
      terminal.setCursor(Cursor.getDefaultCursor());
      bus.broadcast(new FocusStatus(Terminal.this,evt));
    }
  }
);
  bus.registerPluginListener(new OnlineStatusListener(){
    public void online(){
      if (debug > 0)       System.err.println(""String_Node_Str"" + reader);
      if (reader == null) {
        reader=new Thread(Terminal.this);
        reader.start();
      }
    }
    public void offline(){
      if (debug > 0)       System.err.println(""String_Node_Str"");
      if (reader != null)       reader=null;
    }
  }
);
  bus.registerPluginListener(new TerminalTypeListener(){
    public String getTerminalType(){
      return terminal.getTerminalID();
    }
  }
);
  bus.registerPluginListener(new WindowSizeListener(){
    public Dimension getWindowSize(){
      return terminal.getScreenSize();
    }
  }
);
  bus.registerPluginListener(new LocalEchoListener(){
    public void setLocalEcho(    boolean echo){
      terminal.setLocalEcho(echo);
    }
  }
);
  bus.registerPluginListener(new ConfigurationListener(){
    public void setConfiguration(    PluginConfig config){
      configure(config);
    }
  }
);
}","/** 
 * Create a new terminal plugin and initialize the terminal emulation.
 */
public Terminal(final PluginBus bus,final String id){
  super(bus,id);
  if (!personalJava) {
    menu=new Menu(""String_Node_Str"");
    MenuItem item;
    menu.add(item=new MenuItem(""String_Node_Str""));
    item.addActionListener(new ActionListener(){
      public void actionPerformed(      ActionEvent e){
        Font font=terminal.getFont();
        terminal.setFont(new Font(font.getName(),font.getStyle(),font.getSize() - 1));
        if (tPanel.getParent() != null) {
          Component parent=tPanel.getParent();
          if (parent instanceof java.awt.Frame)           ((java.awt.Frame)parent).pack();
          tPanel.getParent().doLayout();
          tPanel.getParent().validate();
        }
      }
    }
);
    menu.add(item=new MenuItem(""String_Node_Str""));
    item.addActionListener(new ActionListener(){
      public void actionPerformed(      ActionEvent e){
        Font font=terminal.getFont();
        terminal.setFont(new Font(font.getName(),font.getStyle(),font.getSize() + 1));
        if (tPanel.getParent() != null) {
          Component parent=tPanel.getParent();
          if (parent instanceof java.awt.Frame)           ((java.awt.Frame)parent).pack();
          tPanel.getParent().doLayout();
          tPanel.getParent().validate();
        }
      }
    }
);
    menu.add(item=new MenuItem(""String_Node_Str""));
    item.addActionListener(new ActionListener(){
      public void actionPerformed(      ActionEvent e){
        terminal.setBufferSize(terminal.getBufferSize() + 50);
      }
    }
);
    menu.add(item=new MenuItem(""String_Node_Str""));
    item.addActionListener(new ActionListener(){
      public void actionPerformed(      ActionEvent e){
        terminal.setBufferSize(terminal.getBufferSize() - 50);
      }
    }
);
    menu.addSeparator();
    menu.add(item=new MenuItem(""String_Node_Str""));
    item.addActionListener(new ActionListener(){
      public void actionPerformed(      ActionEvent e){
        terminal.reset();
      }
    }
);
  }
  terminal=new vt320(){
    public void write(    byte[] b){
      try {
        Terminal.this.write(b);
      }
 catch (      IOException e) {
        reader=null;
      }
    }
  }
;
  tPanel=new Panel(new BorderLayout()){
    public void update(    java.awt.Graphics g){
      paint(g);
    }
  }
;
  tPanel.add(""String_Node_Str"",terminal);
  terminal.addFocusListener(new FocusListener(){
    public void focusGained(    FocusEvent evt){
      terminal.setCursor(Cursor.getPredefinedCursor(Cursor.TEXT_CURSOR));
      bus.broadcast(new FocusStatus(Terminal.this,evt));
    }
    public void focusLost(    FocusEvent evt){
      terminal.setCursor(Cursor.getDefaultCursor());
      bus.broadcast(new FocusStatus(Terminal.this,evt));
    }
  }
);
  bus.registerPluginListener(new OnlineStatusListener(){
    public void online(){
      if (debug > 0)       System.err.println(""String_Node_Str"" + reader);
      if (reader == null) {
        reader=new Thread(Terminal.this);
        reader.start();
      }
    }
    public void offline(){
      if (debug > 0)       System.err.println(""String_Node_Str"");
      if (reader != null)       reader=null;
    }
  }
);
  bus.registerPluginListener(new TerminalTypeListener(){
    public String getTerminalType(){
      return terminal.getTerminalID();
    }
  }
);
  bus.registerPluginListener(new WindowSizeListener(){
    public Dimension getWindowSize(){
      return terminal.getScreenSize();
    }
  }
);
  bus.registerPluginListener(new LocalEchoListener(){
    public void setLocalEcho(    boolean echo){
      terminal.setLocalEcho(echo);
    }
  }
);
  bus.registerPluginListener(new ConfigurationListener(){
    public void setConfiguration(    PluginConfig config){
      configure(config);
    }
  }
);
}",0.9304917119375956
143940,"/** 
 * Set the current window base. This allows to view the scrollback buffer.
 * @param line the line where the screen window starts
 * @see setBufferSize
 * @see getBufferSize
 */
public void setWindowBase(int line){
  if (line > screenBase)   line=screenBase;
 else   if (line < 0)   line=0;
  windowBase=line;
  repaint();
}","/** 
 * Set the current window base. This allows to view the scrollback buffer.
 * @param line the line where the screen window starts
 * @see setBufferSize
 * @see getBufferSize
 */
public void setWindowBase(int line){
  if (line > screenBase)   line=screenBase;
 else   if (line < 0)   line=0;
  windowBase=line;
  update[0]=true;
  redraw();
}",0.957037037037037
143941,"public void mouseDragged(MouseEvent evt){
  if (buttonCheck(evt.getModifiers(),MouseEvent.BUTTON1_MASK)) {
    int xoffset=(super.getSize().width - size.width * charWidth) / 2;
    int yoffset=(super.getSize().height - size.height * charHeight) / 2;
    int x=(evt.getX() - xoffset) / charWidth;
    int y=(evt.getY() - yoffset) / charHeight + windowBase;
    int oldx=selectEnd.x, oldy=selectEnd.y;
    if ((x < selectBegin.x && y < selectBegin.y) && (x < selectEnd.x && y < selectEnd.y)) {
      selectBegin.x=x;
      selectBegin.y=y;
    }
 else {
      selectEnd.x=x;
      selectEnd.y=y;
    }
    if (oldx != x || oldy != y)     repaint();
  }
}","public void mouseDragged(MouseEvent evt){
  if (buttonCheck(evt.getModifiers(),MouseEvent.BUTTON1_MASK)) {
    int xoffset=(super.getSize().width - size.width * charWidth) / 2;
    int yoffset=(super.getSize().height - size.height * charHeight) / 2;
    int x=(evt.getX() - xoffset) / charWidth;
    int y=(evt.getY() - yoffset) / charHeight + windowBase;
    int oldx=selectEnd.x, oldy=selectEnd.y;
    if ((x < selectBegin.x && y < selectBegin.y) && (x < selectEnd.x && y < selectEnd.y)) {
      selectBegin.x=x;
      selectBegin.y=y;
    }
 else {
      selectEnd.x=x;
      selectEnd.y=y;
    }
    if (oldx != x || oldy != y) {
      update[0]=true;
      redraw();
    }
  }
}",0.9558052434456928
143942,"/** 
 * Paint the current screen. All painting is done here. Only lines that have changed will be redrawn!
 */
public void paint(Graphics g){
  if (backingStore == null) {
    Dimension size=super.getSize();
    backingStore=createImage(size.width,size.height);
    redraw();
  }
  g.drawImage(backingStore,0,0,this);
}","/** 
 * Paint the current screen. All painting is done here. Only lines that have changed will be redrawn!
 */
public void paint(Graphics g){
  if (backingStore == null) {
    Dimension size=super.getSize();
    backingStore=createImage(size.width,size.height);
    update[0]=true;
    redraw();
  }
  if (debug > 0)   System.err.println(""String_Node_Str"" + g.getClipBounds());
  g.drawImage(backingStore,0,0,this);
}",0.8668478260869565
143943,"/** 
 * Redraw marked lines.
 * @see #markLine
 */
public void redraw(){
  if (debug > 0)   System.err.println(""String_Node_Str"");
  update[0]=true;
  if (backingStore == null || screenLocked)   return;
  Graphics g=backingStore.getGraphics();
  if (debug > 0) {
    System.err.println(""String_Node_Str"" + g.getClipBounds());
    System.err.println(""String_Node_Str"");
    for (int l=0; l < size.height; l++)     if (update[l])     System.err.println(""String_Node_Str"" + l + ""String_Node_Str""+ update[l]);
  }
  int xoffset=(super.getSize().width - size.width * charWidth) / 2;
  int yoffset=(super.getSize().height - size.height * charHeight) / 2;
  Color fg=color[COLOR_FG_STD];
  Color bg=color[COLOR_BG_STD];
  g.setFont(normalFont);
  for (int l=0; l < size.height; l++) {
    if (update[0] && !update[l + 1])     continue;
    update[l + 1]=false;
    for (int c=0; c < size.width; c++) {
      int addr=0;
      int currAttr=charAttributes[windowBase + l][c];
      fg=getForeground();
      bg=getBackground();
      if (((currAttr & BOLD) != 0) && ((currAttr & COLOR_FG) == 0) && ((currAttr & COLOR_BG) == 0))       fg=color[COLOR_FG_BOLD];
      if ((currAttr & COLOR_FG) != 0)       fg=color[((currAttr & COLOR_FG) >> 3) - 1];
      if ((currAttr & COLOR_BG) != 0)       bg=color[((currAttr & COLOR_BG) >> 7) - 1];
      if ((currAttr & BOLD) != 0)       if (fg.equals(Color.black))       fg=Color.gray;
 else {
        fg=fg.brighter();
        bg=bg.brighter();
      }
      if ((currAttr & INVERT) != 0) {
        Color swapc=bg;
        bg=fg;
        fg=swapc;
      }
      if (sf.inSoftFont(charArray[windowBase + l][c])) {
        g.setColor(bg);
        g.fillRect(c * charWidth + xoffset,l * charHeight + yoffset,charWidth,charHeight);
        g.setColor(fg);
        sf.drawChar(g,charArray[windowBase + l][c],xoffset + c * charWidth,l * charHeight + yoffset,charWidth,charHeight);
        if ((currAttr & UNDERLINE) != 0)         g.drawLine(c * charWidth + xoffset,(l + 1) * charHeight - charDescent / 2 + yoffset,c * charWidth + charWidth + xoffset,(l + 1) * charHeight - charDescent / 2 + yoffset);
        continue;
      }
      while (c + addr < size.width && charAttributes[windowBase + l][c + addr] == currAttr && !sf.inSoftFont(charArray[windowBase + l][c + addr])) {
        if (charArray[windowBase + l][c + addr] < ' ')         charArray[windowBase + l][c + addr]=' ';
        addr++;
      }
      g.setColor(bg);
      g.fillRect(c * charWidth + xoffset,l * charHeight + yoffset,addr * charWidth,charHeight);
      g.setColor(fg);
      g.drawChars(charArray[windowBase + l],c,addr,c * charWidth + xoffset,(l + 1) * charHeight - charDescent + yoffset);
      if ((currAttr & UNDERLINE) != 0)       g.drawLine(c * charWidth + xoffset,(l + 1) * charHeight - charDescent / 2 + yoffset,c * charWidth + addr * charWidth + xoffset,(l + 1) * charHeight - charDescent / 2 + yoffset);
      c+=addr - 1;
    }
  }
  if (screenBase + cursorY >= windowBase && screenBase + cursorY < windowBase + size.height) {
    g.setColor(color[COLOR_FG_STD]);
    g.setXORMode(color[COLOR_BG_STD]);
    g.fillRect(cursorX * charWidth + xoffset,(cursorY + screenBase - windowBase) * charHeight + yoffset,charWidth,charHeight);
    g.setPaintMode();
  }
  if (windowBase <= selectBegin.y || windowBase <= selectEnd.y) {
    int beginLine=selectBegin.y - windowBase;
    int endLine=selectEnd.y - selectBegin.y;
    if (beginLine < 0) {
      endLine+=beginLine;
      beginLine=0;
    }
    if (endLine > size.height)     endLine=size.height - beginLine;
    g.setXORMode(color[COLOR_BG_STD]);
    g.fillRect(selectBegin.x * charWidth + xoffset,beginLine * charHeight + yoffset,(endLine == 0 ? (selectEnd.x - selectBegin.x) : (size.width - selectBegin.x)) * charWidth,charHeight);
    if (endLine > 1)     g.fillRect(0 + xoffset,(beginLine + 1) * charHeight + yoffset,size.width * charWidth,(endLine - 1) * charHeight);
    if (endLine > 0)     g.fillRect(0 + xoffset,(beginLine + endLine) * charHeight + yoffset,selectEnd.x * charWidth,charHeight);
    g.setPaintMode();
  }
  if (insets != null) {
    g.setColor(getBackground());
    xoffset--;
    yoffset--;
    for (int i=insets.top - 1; i >= 0; i--)     g.draw3DRect(xoffset - i,yoffset - i,charWidth * size.width + 1 + i * 2,charHeight * size.height + 1 + i * 2,raised);
  }
  update[0]=false;
  repaint();
}","/** 
 * Redraw marked lines.
 * @see #markLine
 */
public void redraw(){
  if (debug > 0)   System.err.println(""String_Node_Str"");
  if (backingStore != null) {
    Graphics g=backingStore.getGraphics();
    int xoffset=(super.getSize().width - size.width * charWidth) / 2;
    int yoffset=(super.getSize().height - size.height * charHeight) / 2;
    Color fg=color[COLOR_FG_STD];
    Color bg=color[COLOR_BG_STD];
    g.setFont(normalFont);
    for (int l=0; l < size.height; l++) {
      if (!update[0] && !update[l + 1])       continue;
      update[l + 1]=false;
      for (int c=0; c < size.width; c++) {
        int addr=0;
        int currAttr=charAttributes[windowBase + l][c];
        fg=getForeground();
        bg=getBackground();
        if (((currAttr & BOLD) != 0) && ((currAttr & COLOR_FG) == 0) && ((currAttr & COLOR_BG) == 0))         fg=color[COLOR_FG_BOLD];
        if ((currAttr & COLOR_FG) != 0)         fg=color[((currAttr & COLOR_FG) >> 3) - 1];
        if ((currAttr & COLOR_BG) != 0)         bg=color[((currAttr & COLOR_BG) >> 7) - 1];
        if ((currAttr & BOLD) != 0)         if (fg.equals(Color.black))         fg=Color.gray;
 else {
          fg=fg.brighter();
          bg=bg.brighter();
        }
        if ((currAttr & INVERT) != 0) {
          Color swapc=bg;
          bg=fg;
          fg=swapc;
        }
        if (sf.inSoftFont(charArray[windowBase + l][c])) {
          g.setColor(bg);
          g.fillRect(c * charWidth + xoffset,l * charHeight + yoffset,charWidth,charHeight);
          g.setColor(fg);
          sf.drawChar(g,charArray[windowBase + l][c],xoffset + c * charWidth,l * charHeight + yoffset,charWidth,charHeight);
          if ((currAttr & UNDERLINE) != 0)           g.drawLine(c * charWidth + xoffset,(l + 1) * charHeight - charDescent / 2 + yoffset,c * charWidth + charWidth + xoffset,(l + 1) * charHeight - charDescent / 2 + yoffset);
          continue;
        }
        while (c + addr < size.width && charAttributes[windowBase + l][c + addr] == currAttr && !sf.inSoftFont(charArray[windowBase + l][c + addr])) {
          if (charArray[windowBase + l][c + addr] < ' ')           charArray[windowBase + l][c + addr]=' ';
          addr++;
        }
        g.setColor(bg);
        g.fillRect(c * charWidth + xoffset,l * charHeight + yoffset,addr * charWidth,charHeight);
        g.setColor(fg);
        g.drawChars(charArray[windowBase + l],c,addr,c * charWidth + xoffset,(l + 1) * charHeight - charDescent + yoffset);
        if ((currAttr & UNDERLINE) != 0)         g.drawLine(c * charWidth + xoffset,(l + 1) * charHeight - charDescent / 2 + yoffset,c * charWidth + addr * charWidth + xoffset,(l + 1) * charHeight - charDescent / 2 + yoffset);
        c+=addr - 1;
      }
    }
    if (screenBase + cursorY >= windowBase && screenBase + cursorY < windowBase + size.height) {
      g.setColor(color[COLOR_FG_STD]);
      g.setXORMode(color[COLOR_BG_STD]);
      g.fillRect(cursorX * charWidth + xoffset,(cursorY + screenBase - windowBase) * charHeight + yoffset,charWidth,charHeight);
      g.setPaintMode();
    }
    if (windowBase <= selectBegin.y || windowBase <= selectEnd.y) {
      int beginLine=selectBegin.y - windowBase;
      int endLine=selectEnd.y - selectBegin.y;
      if (beginLine < 0) {
        endLine+=beginLine;
        beginLine=0;
      }
      if (endLine > size.height)       endLine=size.height - beginLine;
      g.setXORMode(color[COLOR_BG_STD]);
      g.fillRect(selectBegin.x * charWidth + xoffset,beginLine * charHeight + yoffset,(endLine == 0 ? (selectEnd.x - selectBegin.x) : (size.width - selectBegin.x)) * charWidth,charHeight);
      if (endLine > 1)       g.fillRect(0 + xoffset,(beginLine + 1) * charHeight + yoffset,size.width * charWidth,(endLine - 1) * charHeight);
      if (endLine > 0)       g.fillRect(0 + xoffset,(beginLine + endLine) * charHeight + yoffset,selectEnd.x * charWidth,charHeight);
      g.setPaintMode();
    }
    if (insets != null) {
      g.setColor(getBackground());
      xoffset--;
      yoffset--;
      for (int i=insets.top - 1; i >= 0; i--)       g.draw3DRect(xoffset - i,yoffset - i,charWidth * size.width + 1 + i * 2,charHeight * size.height + 1 + i * 2,raised);
    }
    update[0]=false;
  }
  repaint();
}",0.9013333333333332
143944,"/** 
 * Handle mouse released events for copy & paste.
 * @param evt the mouse event
 */
public void mouseReleased(MouseEvent evt){
  if (buttonCheck(evt.getModifiers(),MouseEvent.BUTTON1_MASK)) {
    int xoffset=(super.getSize().width - size.width * charWidth) / 2;
    int yoffset=(super.getSize().height - size.height * charHeight) / 2;
    mouseDragged(evt);
    if (selectBegin.x == selectEnd.x && selectBegin.y == selectEnd.y) {
      repaint();
      return;
    }
    selection=""String_Node_Str"";
    if (selectEnd.x < 0)     selectEnd.x=0;
    if (selectEnd.y < 0)     selectEnd.y=0;
    if (selectEnd.y >= charArray.length)     selectEnd.y=charArray.length - 1;
    if (selectEnd.x >= charArray[0].length)     selectEnd.x=charArray[0].length - 1;
    for (int l=selectBegin.y; l <= selectEnd.y; l++) {
      int start, end;
      start=(l == selectBegin.y ? start=selectBegin.x : 0);
      end=(l == selectEnd.y ? end=selectEnd.x : charArray[l].length - 1);
      selection+=(new String(charArray[l])).substring(start,end);
      if (end == charArray[l].length - 1)       selection+=""String_Node_Str"";
    }
  }
}","/** 
 * Handle mouse released events for copy & paste.
 * @param evt the mouse event
 */
public void mouseReleased(MouseEvent evt){
  if (buttonCheck(evt.getModifiers(),MouseEvent.BUTTON1_MASK)) {
    int xoffset=(super.getSize().width - size.width * charWidth) / 2;
    int yoffset=(super.getSize().height - size.height * charHeight) / 2;
    mouseDragged(evt);
    if (selectBegin.x == selectEnd.x && selectBegin.y == selectEnd.y) {
      update[0]=true;
      redraw();
      return;
    }
    selection=""String_Node_Str"";
    if (selectEnd.x < 0)     selectEnd.x=0;
    if (selectEnd.y < 0)     selectEnd.y=0;
    if (selectEnd.y >= charArray.length)     selectEnd.y=charArray.length - 1;
    if (selectEnd.x >= charArray[0].length)     selectEnd.x=charArray[0].length - 1;
    for (int l=selectBegin.y; l <= selectEnd.y; l++) {
      int start, end;
      start=(l == selectBegin.y ? start=selectBegin.x : 0);
      end=(l == selectEnd.y ? end=selectEnd.x : charArray[l].length - 1);
      selection+=(new String(charArray[l])).substring(start,end);
      if (end == charArray[l].length - 1)       selection+=""String_Node_Str"";
    }
  }
}",0.7472430524922805
143945,"/** 
 * Set scrollback buffer size.
 * @param amount new size of the buffer
 */
public void setBufferSize(int amount){
  screenLocked=true;
  if (amount < size.height)   amount=size.height;
  if (amount < maxBufSize) {
    char cbuf[][]=new char[amount][size.width];
    int abuf[][]=new int[amount][size.width];
    if (charArray != null)     System.arraycopy(charArray,bufSize - amount,cbuf,0,amount);
    if (charAttributes != null)     System.arraycopy(charAttributes,bufSize - amount,abuf,0,amount);
    charArray=cbuf;
    charAttributes=abuf;
  }
  maxBufSize=amount;
  screenLocked=false;
  repaint();
}","/** 
 * Set scrollback buffer size.
 * @param amount new size of the buffer
 */
public void setBufferSize(int amount){
  screenLocked=true;
  if (amount < size.height)   amount=size.height;
  if (amount < maxBufSize) {
    char cbuf[][]=new char[amount][size.width];
    int abuf[][]=new int[amount][size.width];
    int copyStart=bufSize - amount < 0 ? 0 : bufSize - amount;
    int copyCount=bufSize - amount < 0 ? bufSize : amount;
    if (charArray != null)     System.arraycopy(charArray,copyStart,cbuf,0,copyCount);
    if (charAttributes != null)     System.arraycopy(charAttributes,copyStart,abuf,0,copyCount);
    charArray=cbuf;
    charAttributes=abuf;
    bufSize=copyCount;
    screenBase=bufSize - size.height;
    windowBase=screenBase;
  }
  maxBufSize=amount;
  screenLocked=false;
  update[0]=true;
  redraw();
}",0.7911172796668979
143946,"private byte[] handlePacket(byte packetType,byte[] packetData) throws IOException {
  byte b;
  int boffset=0;
  if (debug > 0)   System.out.println(""String_Node_Str"");
switch (packetType) {
case SSH_MSG_DISCONNECT:
    String str=SshMisc.getString(boffset,packetData);
  disconnect();
return str.getBytes();
case SSH_SMSG_PUBLIC_KEY:
byte[] anti_spoofing_cookie=new byte[8];
byte[] server_key_bits=new byte[4];
byte[] server_key_public_exponent;
byte[] server_key_public_modulus;
byte[] host_key_bits=new byte[4];
byte[] host_key_public_exponent;
byte[] host_key_public_modulus;
byte[] protocol_flags=new byte[4];
byte[] supported_ciphers_mask=new byte[4];
byte[] supported_authentications_mask=new byte[4];
for (int i=0; i <= 7; i++) anti_spoofing_cookie[i]=packetData[boffset++];
for (int i=0; i <= 3; i++) server_key_bits[i]=packetData[boffset++];
server_key_public_exponent=SshMisc.getMpInt(boffset,packetData);
boffset+=server_key_public_exponent.length + 2;
server_key_public_modulus=SshMisc.getMpInt(boffset,packetData);
boffset+=server_key_public_modulus.length + 2;
for (int i=0; i <= 3; i++) host_key_bits[i]=packetData[boffset++];
host_key_public_exponent=SshMisc.getMpInt(boffset,packetData);
boffset+=host_key_public_exponent.length + 2;
host_key_public_modulus=SshMisc.getMpInt(boffset,packetData);
boffset+=host_key_public_modulus.length + 2;
for (int i=0; i < 4; i++) protocol_flags[i]=packetData[boffset++];
for (int i=0; i < 4; i++) supported_ciphers_mask[i]=packetData[boffset++];
for (int i=0; i < 4; i++) supported_authentications_mask[i]=packetData[boffset++];
Send_SSH_CMSG_SESSION_KEY(anti_spoofing_cookie,server_key_public_modulus,host_key_public_modulus,supported_ciphers_mask,server_key_public_exponent,host_key_public_exponent);
if (hashHostKey != null && hashHostKey.compareTo(""String_Node_Str"") != 0) {
byte[] Md5_hostKey=MD5.hash(host_key_public_modulus);
String hashHostKeyBis=""String_Node_Str"";
for (int i=0; i < Md5_hostKey.length; i++) {
String hex=""String_Node_Str"";
int[] v=new int[2];
v[0]=(Md5_hostKey[i] & 240) >> 4;
v[1]=(Md5_hostKey[i] & 15);
for (int j=0; j < 1; j++) switch (v[j]) {
case 10:
hex+=""String_Node_Str"";
break;
case 11:
hex+=""String_Node_Str"";
break;
case 12:
hex+=""String_Node_Str"";
break;
case 13:
hex+=""String_Node_Str"";
break;
case 14:
hex+=""String_Node_Str"";
break;
case 15:
hex+=""String_Node_Str"";
break;
default :
hex+=String.valueOf(v[j]);
break;
}
hashHostKeyBis=hashHostKeyBis + hex;
}
if (hashHostKeyBis.compareTo(hashHostKey) != 0) {
login=password=""String_Node_Str"";
return (""String_Node_Str"" + ""String_Node_Str"" + ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str"").getBytes();
}
}
break;
case SSH_SMSG_SUCCESS:
if (lastPacketSentType == SSH_CMSG_SESSION_KEY) {
Send_SSH_CMSG_USER();
break;
}
if (lastPacketSentType == SSH_CMSG_AUTH_PASSWORD) {
System.out.println(""String_Node_Str"");
Send_SSH_CMSG_REQUEST_PTY();
return ""String_Node_Str"".getBytes();
}
if (lastPacketSentType == SSH_CMSG_REQUEST_PTY) {
Send_SSH_CMSG_EXEC_SHELL();
break;
}
break;
case SSH_SMSG_FAILURE:
if (lastPacketSentType == SSH_CMSG_AUTH_PASSWORD) {
System.out.println(""String_Node_Str"");
return ""String_Node_Str"".getBytes();
}
if (lastPacketSentType == SSH_CMSG_USER) {
Send_SSH_CMSG_AUTH_PASSWORD();
break;
}
if (lastPacketSentType == SSH_CMSG_REQUEST_PTY) {
break;
}
break;
case SSH_SMSG_STDOUT_DATA:
str=SshMisc.getString(0,packetData);
return str.getBytes();
case SSH_SMSG_STDERR_DATA:
str=""String_Node_Str"" + SshMisc.getString(0,packetData);
System.out.println(""String_Node_Str"" + ""String_Node_Str"" + str);
return str.getBytes();
case SSH_SMSG_EXITSTATUS:
int value=(packetData[0] << 24) + (packetData[1] << 16) + (packetData[2] << 8)+ (packetData[3]);
Send_SSH_CMSG_EXIT_CONFIRMATION();
System.out.println(""String_Node_Str"" + value);
disconnect();
break;
case SSH_MSG_DEBUG:
str=SshMisc.getString(0,packetData);
System.out.println(""String_Node_Str"" + ""String_Node_Str"" + str);
if (lastPacketSentType == SSH_CMSG_USER) {
Send_SSH_CMSG_REQUEST_PTY();
break;
}
return str.getBytes();
default :
System.err.print(""String_Node_Str"" + packetType);
break;
}
return null;
}","private byte[] handlePacket(byte packetType,byte[] packetData) throws IOException {
  byte b;
  int boffset=0;
  if (debug > 0)   System.out.println(""String_Node_Str"" + packetType);
switch (packetType) {
case SSH_MSG_DISCONNECT:
    String str=SshMisc.getString(boffset,packetData);
  disconnect();
return str.getBytes();
case SSH_SMSG_PUBLIC_KEY:
byte[] anti_spoofing_cookie=new byte[8];
byte[] server_key_bits=new byte[4];
byte[] server_key_public_exponent;
byte[] server_key_public_modulus;
byte[] host_key_bits=new byte[4];
byte[] host_key_public_exponent;
byte[] host_key_public_modulus;
byte[] protocol_flags=new byte[4];
byte[] supported_ciphers_mask=new byte[4];
byte[] supported_authentications_mask=new byte[4];
for (int i=0; i <= 7; i++) anti_spoofing_cookie[i]=packetData[boffset++];
for (int i=0; i <= 3; i++) server_key_bits[i]=packetData[boffset++];
server_key_public_exponent=SshMisc.getMpInt(boffset,packetData);
boffset+=server_key_public_exponent.length + 2;
server_key_public_modulus=SshMisc.getMpInt(boffset,packetData);
boffset+=server_key_public_modulus.length + 2;
for (int i=0; i <= 3; i++) host_key_bits[i]=packetData[boffset++];
host_key_public_exponent=SshMisc.getMpInt(boffset,packetData);
boffset+=host_key_public_exponent.length + 2;
host_key_public_modulus=SshMisc.getMpInt(boffset,packetData);
boffset+=host_key_public_modulus.length + 2;
for (int i=0; i < 4; i++) protocol_flags[i]=packetData[boffset++];
for (int i=0; i < 4; i++) supported_ciphers_mask[i]=packetData[boffset++];
for (int i=0; i < 4; i++) supported_authentications_mask[i]=packetData[boffset++];
Send_SSH_CMSG_SESSION_KEY(anti_spoofing_cookie,server_key_public_modulus,host_key_public_modulus,supported_ciphers_mask,server_key_public_exponent,host_key_public_exponent);
if (hashHostKey != null && hashHostKey.compareTo(""String_Node_Str"") != 0) {
byte[] Md5_hostKey=MD5.hash(host_key_public_modulus);
String hashHostKeyBis=""String_Node_Str"";
for (int i=0; i < Md5_hostKey.length; i++) {
String hex=""String_Node_Str"";
int[] v=new int[2];
v[0]=(Md5_hostKey[i] & 240) >> 4;
v[1]=(Md5_hostKey[i] & 15);
for (int j=0; j < 1; j++) switch (v[j]) {
case 10:
hex+=""String_Node_Str"";
break;
case 11:
hex+=""String_Node_Str"";
break;
case 12:
hex+=""String_Node_Str"";
break;
case 13:
hex+=""String_Node_Str"";
break;
case 14:
hex+=""String_Node_Str"";
break;
case 15:
hex+=""String_Node_Str"";
break;
default :
hex+=String.valueOf(v[j]);
break;
}
hashHostKeyBis=hashHostKeyBis + hex;
}
if (hashHostKeyBis.compareTo(hashHostKey) != 0) {
login=password=""String_Node_Str"";
return (""String_Node_Str"" + ""String_Node_Str"" + ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str"").getBytes();
}
}
break;
case SSH_SMSG_SUCCESS:
if (lastPacketSentType == SSH_CMSG_SESSION_KEY) {
Send_SSH_CMSG_USER();
break;
}
if (lastPacketSentType == SSH_CMSG_AUTH_PASSWORD) {
System.out.println(""String_Node_Str"");
Send_SSH_CMSG_REQUEST_PTY();
return ""String_Node_Str"".getBytes();
}
if (lastPacketSentType == SSH_CMSG_REQUEST_PTY) {
Send_SSH_CMSG_EXEC_SHELL();
break;
}
break;
case SSH_SMSG_FAILURE:
if (lastPacketSentType == SSH_CMSG_AUTH_PASSWORD) {
System.out.println(""String_Node_Str"");
return ""String_Node_Str"".getBytes();
}
if (lastPacketSentType == SSH_CMSG_USER) {
Send_SSH_CMSG_AUTH_PASSWORD();
break;
}
if (lastPacketSentType == SSH_CMSG_REQUEST_PTY) {
break;
}
break;
case SSH_SMSG_STDOUT_DATA:
str=SshMisc.getString(0,packetData);
return str.getBytes();
case SSH_SMSG_STDERR_DATA:
str=""String_Node_Str"" + SshMisc.getString(0,packetData);
System.out.println(""String_Node_Str"" + ""String_Node_Str"" + str);
return str.getBytes();
case SSH_SMSG_EXITSTATUS:
int value=(packetData[0] << 24) + (packetData[1] << 16) + (packetData[2] << 8)+ (packetData[3]);
Send_SSH_CMSG_EXIT_CONFIRMATION();
System.out.println(""String_Node_Str"" + value);
disconnect();
break;
case SSH_MSG_DEBUG:
str=SshMisc.getString(0,packetData);
System.out.println(""String_Node_Str"" + ""String_Node_Str"" + str);
if (lastPacketSentType == SSH_CMSG_USER) {
Send_SSH_CMSG_AUTH_PASSWORD();
break;
}
return str.getBytes();
default :
System.err.print(""String_Node_Str"" + packetType);
break;
}
return null;
}",0.9957775364941488
143947,"/** 
 * Read all parameters from the applet configuration and do initializations for the plugins and the applet.
 */
public void init(){
  if (pluginLoader == null) {
    try {
      options.load(getClass().getResourceAsStream(""String_Node_Str""));
    }
 catch (    Exception e) {
      try {
        URL url=new URL(getCodeBase() + ""String_Node_Str"");
        options.load(url.openStream());
      }
 catch (      Exception e1) {
        System.err.println(""String_Node_Str"");
        System.err.println(""String_Node_Str"");
        System.err.println(""String_Node_Str"" + getCodeBase() + ""String_Node_Str"");
      }
    }
    String value;
    if ((value=getParameter(""String_Node_Str"")) != null) {
      Properties appletParams=new Properties();
      try {
        appletParams.load((new URL(getCodeBase() + value)).openStream());
        Enumeration ape=appletParams.keys();
        while (ape.hasMoreElements()) {
          String key=(String)ape.nextElement();
          options.put(key,appletParams.getProperty(key));
        }
      }
 catch (      Exception e) {
        System.err.println(""String_Node_Str"" + e);
      }
    }
    options.put(""String_Node_Str"",""String_Node_Str"");
    pluginLoader=new Common(options);
    host=options.getProperty(""String_Node_Str"");
    if (host == null)     host=getCodeBase().getHost();
    port=options.getProperty(""String_Node_Str"");
    if (port == null)     port=""String_Node_Str"";
    final java.awt.Container appletFrame;
    if (options.getProperty(""String_Node_Str"") != null)     appletFrame=new Frame(""String_Node_Str"" + host + (port.equals(""String_Node_Str"") ? ""String_Node_Str"" : ""String_Node_Str"" + port));
 else     appletFrame=this;
    appletFrame.setLayout(new BorderLayout());
    Hashtable componentList=pluginLoader.getComponents();
    Enumeration names=componentList.keys();
    while (names.hasMoreElements()) {
      String name=(String)names.nextElement();
      Component c=(Component)componentList.get(name);
      if ((value=options.getProperty(""String_Node_Str"" + name)) != null) {
        appletFrame.add(value,c);
      }
 else {
        System.err.println(""String_Node_Str"" + name + ""String_Node_Str"");
        System.err.println(""String_Node_Str"" + name + ""String_Node_Str"");
      }
    }
    if (appletFrame != this) {
      ((Frame)appletFrame).addWindowListener(new WindowAdapter(){
        public void windowClosing(        WindowEvent evt){
          Applet.this.stop();
          ((Frame)appletFrame).dispose();
        }
      }
);
      ((Frame)appletFrame).pack();
      ((Frame)appletFrame).show();
    }
  }
}","/** 
 * Read all parameters from the applet configuration and do initializations for the plugins and the applet.
 */
public void init(){
  if (pluginLoader == null) {
    try {
      options.load(getClass().getResourceAsStream(""String_Node_Str""));
    }
 catch (    Exception e) {
      try {
        URL url=new URL(getCodeBase() + ""String_Node_Str"");
        options.load(url.openStream());
      }
 catch (      Exception e1) {
        System.err.println(""String_Node_Str"");
        System.err.println(""String_Node_Str"");
        System.err.println(""String_Node_Str"" + getCodeBase() + ""String_Node_Str"");
      }
    }
    String value;
    if ((value=getParameter(""String_Node_Str"")) != null) {
      Properties appletParams=new Properties();
      URL url=null;
      try {
        url=new URL(value);
      }
 catch (      Exception e) {
        try {
          url=new URL(getCodeBase() + value);
        }
 catch (        Exception ce) {
          System.err.println(""String_Node_Str"" + ce);
        }
      }
      if (url != null) {
        try {
          appletParams.load(url.openStream());
          Enumeration ape=appletParams.keys();
          while (ape.hasMoreElements()) {
            String key=(String)ape.nextElement();
            options.put(key,appletParams.getProperty(key));
          }
        }
 catch (        Exception e) {
          System.err.println(""String_Node_Str"" + e);
        }
      }
    }
    options.put(""String_Node_Str"",""String_Node_Str"");
    pluginLoader=new Common(options);
    host=options.getProperty(""String_Node_Str"");
    if (host == null && (host=getParameter(""String_Node_Str"")) == null)     host=getCodeBase().getHost();
    port=options.getProperty(""String_Node_Str"");
    if (port == null && (port=getParameter(""String_Node_Str"")) == null)     port=""String_Node_Str"";
    final java.awt.Container appletFrame;
    if (options.getProperty(""String_Node_Str"") != null)     appletFrame=new Frame(""String_Node_Str"" + host + (port.equals(""String_Node_Str"") ? ""String_Node_Str"" : ""String_Node_Str"" + port));
 else     appletFrame=this;
    appletFrame.setLayout(new BorderLayout());
    Hashtable componentList=pluginLoader.getComponents();
    Enumeration names=componentList.keys();
    while (names.hasMoreElements()) {
      String name=(String)names.nextElement();
      Component c=(Component)componentList.get(name);
      if ((value=options.getProperty(""String_Node_Str"" + name)) != null) {
        appletFrame.add(value,c);
      }
 else {
        System.err.println(""String_Node_Str"" + name + ""String_Node_Str"");
        System.err.println(""String_Node_Str"" + name + ""String_Node_Str"");
      }
    }
    if (appletFrame != this) {
      ((Frame)appletFrame).addWindowListener(new WindowAdapter(){
        public void windowClosing(        WindowEvent evt){
          Applet.this.stop();
          ((Frame)appletFrame).dispose();
        }
      }
);
      ((Frame)appletFrame).pack();
      ((Frame)appletFrame).show();
    }
  }
}",0.8243074173369079
143948,"/** 
 * Paint the current screen. All painting is done here. Only lines that have changed will be redrawn!
 */
public synchronized void paint(Graphics g){
  if (screenLocked)   return;
  int xoffset=(super.getSize().width - size.width * charWidth) / 2;
  int yoffset=(super.getSize().height - size.height * charHeight) / 2;
  Color fg=color[COLOR_FG_STD];
  Color bg=color[COLOR_BG_STD];
  g.setFont(normalFont);
  for (int l=0; l < size.height; l++) {
    if (update[0] && !update[l + 1])     continue;
    update[l + 1]=false;
    for (int c=0; c < size.width; c++) {
      int addr=0;
      int currAttr=charAttributes[windowBase + l][c];
      fg=getForeground();
      bg=getBackground();
      if (((currAttr & BOLD) != 0) && ((currAttr & COLOR_FG) == 0) && ((currAttr & COLOR_BG) == 0))       fg=color[COLOR_FG_BOLD];
      if ((currAttr & COLOR_FG) != 0)       fg=color[((currAttr & COLOR_FG) >> 3) - 1];
      if ((currAttr & COLOR_BG) != 0)       bg=color[((currAttr & COLOR_BG) >> 7) - 1];
      if ((currAttr & BOLD) != 0)       if (fg.equals(Color.black))       fg=Color.gray;
 else {
        fg=fg.brighter();
        bg=bg.brighter();
      }
      if ((currAttr & INVERT) != 0) {
        Color swapc=bg;
        bg=fg;
        fg=swapc;
      }
      if (sf.inSoftFont(charArray[windowBase + l][c])) {
        g.setColor(bg);
        g.fillRect(c * charWidth + xoffset,l * charHeight + yoffset,charWidth,charHeight);
        g.setColor(fg);
        sf.drawChar(g,charArray[windowBase + l][c],xoffset + c * charWidth,l * charHeight + yoffset,charWidth,charHeight);
        if ((currAttr & UNDERLINE) != 0)         g.drawLine(c * charWidth + xoffset,(l + 1) * charHeight - charDescent / 2 + yoffset,c * charWidth + charWidth + xoffset,(l + 1) * charHeight - charDescent / 2 + yoffset);
        continue;
      }
      while (c + addr < size.width && charAttributes[windowBase + l][c + addr] == currAttr && !sf.inSoftFont(charArray[windowBase + l][c + addr])) {
        if (charArray[windowBase + l][c + addr] < ' ')         charArray[windowBase + l][c + addr]=' ';
        addr++;
      }
      g.setColor(bg);
      g.fillRect(c * charWidth + xoffset,l * charHeight + yoffset,addr * charWidth,charHeight);
      g.setColor(fg);
      g.drawChars(charArray[windowBase + l],c,addr,c * charWidth + xoffset,(l + 1) * charHeight - charDescent + yoffset);
      if ((currAttr & UNDERLINE) != 0)       g.drawLine(c * charWidth + xoffset,(l + 1) * charHeight - charDescent / 2 + yoffset,c * charWidth + addr * charWidth + xoffset,(l + 1) * charHeight - charDescent / 2 + yoffset);
      c+=addr - 1;
    }
  }
  if (screenBase + cursorY >= windowBase && screenBase + cursorY < windowBase + size.height) {
    g.setColor(color[COLOR_FG_STD]);
    g.setXORMode(color[COLOR_BG_STD]);
    g.fillRect(cursorX * charWidth + xoffset,(cursorY + screenBase - windowBase) * charHeight + yoffset,charWidth,charHeight);
    g.setPaintMode();
  }
  if (windowBase <= selectBegin.y || windowBase <= selectEnd.y) {
    int beginLine=selectBegin.y - windowBase;
    int endLine=selectEnd.y - selectBegin.y;
    if (beginLine < 0) {
      endLine+=beginLine;
      beginLine=0;
    }
    if (endLine > size.height)     endLine=size.height - beginLine;
    g.setXORMode(color[COLOR_BG_STD]);
    g.fillRect(selectBegin.x * charWidth + xoffset,beginLine * charHeight + yoffset,(endLine == 0 ? (selectEnd.x - selectBegin.x) : (size.width - selectBegin.x)) * charWidth,charHeight);
    if (endLine > 1)     g.fillRect(0 + xoffset,(beginLine + 1) * charHeight + yoffset,size.width * charWidth,(endLine - 1) * charHeight);
    if (endLine > 0)     g.fillRect(0 + xoffset,(beginLine + endLine) * charHeight + yoffset,selectEnd.x * charWidth,charHeight);
    g.setPaintMode();
  }
  if (insets != null) {
    g.setColor(getBackground());
    xoffset--;
    yoffset--;
    for (int i=insets.top - 1; i >= 0; i--)     g.draw3DRect(xoffset - i,yoffset - i,charWidth * size.width + 1 + i * 2,charHeight * size.height + 1 + i * 2,raised);
  }
  update[0]=false;
}","/** 
 * Paint the current screen. All painting is done here. Only lines that have changed will be redrawn!
 */
public void paint(Graphics g){
  if (screenLocked)   return;
  int xoffset=(super.getSize().width - size.width * charWidth) / 2;
  int yoffset=(super.getSize().height - size.height * charHeight) / 2;
  Color fg=color[COLOR_FG_STD];
  Color bg=color[COLOR_BG_STD];
  g.setFont(normalFont);
  for (int l=0; l < size.height; l++) {
    if ((update[0] > 0) && (0 == update[l + 1]))     continue;
    update[l + 1]=0;
    for (int c=0; c < size.width; c++) {
      int addr=0;
      int currAttr=charAttributes[windowBase + l][c];
      fg=getForeground();
      bg=getBackground();
      if (((currAttr & BOLD) != 0) && ((currAttr & COLOR_FG) == 0) && ((currAttr & COLOR_BG) == 0))       fg=color[COLOR_FG_BOLD];
      if ((currAttr & COLOR_FG) != 0)       fg=color[((currAttr & COLOR_FG) >> 3) - 1];
      if ((currAttr & COLOR_BG) != 0)       bg=color[((currAttr & COLOR_BG) >> 7) - 1];
      if ((currAttr & BOLD) != 0)       if (fg.equals(Color.black))       fg=Color.gray;
 else {
        fg=fg.brighter();
        bg=bg.brighter();
      }
      if ((currAttr & INVERT) != 0) {
        Color swapc=bg;
        bg=fg;
        fg=swapc;
      }
      if (sf.inSoftFont(charArray[windowBase + l][c])) {
        g.setColor(bg);
        g.fillRect(c * charWidth + xoffset,l * charHeight + yoffset,charWidth,charHeight);
        g.setColor(fg);
        sf.drawChar(g,charArray[windowBase + l][c],xoffset + c * charWidth,l * charHeight + yoffset,charWidth,charHeight);
        if ((currAttr & UNDERLINE) != 0)         g.drawLine(c * charWidth + xoffset,(l + 1) * charHeight - charDescent / 2 + yoffset,c * charWidth + charWidth + xoffset,(l + 1) * charHeight - charDescent / 2 + yoffset);
        continue;
      }
      while (c + addr < size.width && charAttributes[windowBase + l][c + addr] == currAttr && !sf.inSoftFont(charArray[windowBase + l][c + addr])) {
        if (charArray[windowBase + l][c + addr] < ' ')         charArray[windowBase + l][c + addr]=' ';
        addr++;
      }
      g.setColor(bg);
      g.fillRect(c * charWidth + xoffset,l * charHeight + yoffset,addr * charWidth,charHeight);
      g.setColor(fg);
      g.drawChars(charArray[windowBase + l],c,addr,c * charWidth + xoffset,(l + 1) * charHeight - charDescent + yoffset);
      if ((currAttr & UNDERLINE) != 0)       g.drawLine(c * charWidth + xoffset,(l + 1) * charHeight - charDescent / 2 + yoffset,c * charWidth + addr * charWidth + xoffset,(l + 1) * charHeight - charDescent / 2 + yoffset);
      c+=addr - 1;
    }
  }
  if (screenBase + cursorY >= windowBase && screenBase + cursorY < windowBase + size.height) {
    g.setColor(color[COLOR_FG_STD]);
    g.setXORMode(color[COLOR_BG_STD]);
    g.fillRect(cursorX * charWidth + xoffset,(cursorY + screenBase - windowBase) * charHeight + yoffset,charWidth,charHeight);
    g.setPaintMode();
  }
  if (windowBase <= selectBegin.y || windowBase <= selectEnd.y) {
    int beginLine=selectBegin.y - windowBase;
    int endLine=selectEnd.y - selectBegin.y;
    if (beginLine < 0) {
      endLine+=beginLine;
      beginLine=0;
    }
    if (endLine > size.height)     endLine=size.height - beginLine;
    g.setXORMode(color[COLOR_BG_STD]);
    g.fillRect(selectBegin.x * charWidth + xoffset,beginLine * charHeight + yoffset,(endLine == 0 ? (selectEnd.x - selectBegin.x) : (size.width - selectBegin.x)) * charWidth,charHeight);
    if (endLine > 1)     g.fillRect(0 + xoffset,(beginLine + 1) * charHeight + yoffset,size.width * charWidth,(endLine - 1) * charHeight);
    if (endLine > 0)     g.fillRect(0 + xoffset,(beginLine + endLine) * charHeight + yoffset,selectEnd.x * charWidth,charHeight);
    g.setPaintMode();
  }
  if (insets != null) {
    g.setColor(getBackground());
    xoffset--;
    yoffset--;
    for (int i=insets.top - 1; i >= 0; i--)     g.draw3DRect(xoffset - i,yoffset - i,charWidth * size.width + 1 + i * 2,charHeight * size.height + 1 + i * 2,raised);
  }
  update[0]--;
}",0.9949200842522612
143949,"/** 
 * Change the size of the screen. This will include adjustment of the  scrollback buffer.
 * @param columns width of the screen
 * @param columns height of the screen
 */
public void setScreenSize(int width,int height){
  char cbuf[][];
  int abuf[][];
  int bsize=bufSize;
  if (width < 1 || height < 1)   return;
  if (debug > 0)   System.err.println(""String_Node_Str"" + width + ""String_Node_Str""+ height+ ""String_Node_Str"");
  screenLocked=true;
  if (height > maxBufSize)   maxBufSize=height;
  if (height > bufSize) {
    bufSize=height;
    screenBase=0;
    windowBase=0;
  }
  cbuf=new char[bufSize][width];
  abuf=new int[bufSize][width];
  if (charArray != null && charAttributes != null)   for (int i=0; i < bsize && i < bufSize; i++) {
    System.arraycopy(charArray[i],0,cbuf[i],0,width < size.width ? width : size.width);
    System.arraycopy(charAttributes[i],0,abuf[i],0,width < size.width ? width : size.width);
  }
  charArray=cbuf;
  charAttributes=abuf;
  size=new Dimension(width,height);
  topMargin=0;
  bottomMargin=height - 1;
  update=new boolean[height + 1];
  for (int i=0; i <= height; i++)   update[i]=true;
  screenLocked=false;
}","/** 
 * Change the size of the screen. This will include adjustment of the  scrollback buffer.
 * @param columns width of the screen
 * @param columns height of the screen
 */
public void setScreenSize(int width,int height){
  char cbuf[][];
  int abuf[][];
  int bsize=bufSize;
  if (width < 1 || height < 1)   return;
  if (debug > 0)   System.err.println(""String_Node_Str"" + width + ""String_Node_Str""+ height+ ""String_Node_Str"");
  screenLocked=true;
  if (height > maxBufSize)   maxBufSize=height;
  if (height > bufSize) {
    bufSize=height;
    screenBase=0;
    windowBase=0;
  }
  cbuf=new char[bufSize][width];
  abuf=new int[bufSize][width];
  if (charArray != null && charAttributes != null)   for (int i=0; i < bsize && i < bufSize; i++) {
    System.arraycopy(charArray[i],0,cbuf[i],0,width < size.width ? width : size.width);
    System.arraycopy(charAttributes[i],0,abuf[i],0,width < size.width ? width : size.width);
  }
  charArray=cbuf;
  charAttributes=abuf;
  size=new Dimension(width,height);
  topMargin=0;
  bottomMargin=height - 1;
  update=new int[height + 1];
  for (int i=0; i <= height; i++)   update[i]=1;
  screenLocked=false;
}",0.9935483870967742
143950,"/** 
 * Redraw marked lines.
 * @see #markLine
 */
public void redraw(){
  update[0]=true;
  repaint();
}","/** 
 * Redraw marked lines.
 * @see #markLine
 */
public void redraw(){
  update[0]+=2;
  repaint();
}",0.971153846153846
143951,"/** 
 * Mark lines to be updated with redraw().
 * @param l starting line
 * @param n amount of lines to be updated
 * @see #redraw
 */
public void markLine(int l,int n){
  l=checkBounds(l,0,size.height - 1);
  for (int i=0; i < n && l + i < size.height; i++)   update[l + i + 1]=true;
}","/** 
 * Mark lines to be updated with redraw().
 * @param l starting line
 * @param n amount of lines to be updated
 * @see #redraw
 */
public void markLine(int l,int n){
  l=checkBounds(l,0,size.height - 1);
  for (int i=0; (i < n) && (l + i < size.height); i++)   update[l + i + 1]=1;
}",0.9843478260869564
143952,"public void print(Graphics g){
  for (int i=0; i <= size.height; i++)   update[i]=true;
  paint(g);
}","public void print(Graphics g){
  for (int i=0; i <= size.height; i++)   update[i]=1;
  paint(g);
}",0.9748743718592964
143953,"private void configure(Properties config){
  Enumeration p=config.keys();
  while (p.hasMoreElements()) {
    String key=(String)p.nextElement();
    if (key.startsWith(""String_Node_Str"")) {
      if (key.equals(""String_Node_Str""))       terminal.setForeground(Color.decode(config.getProperty(key)));
 else       if (key.equals(""String_Node_Str""))       terminal.setBackground(Color.decode(config.getProperty(key)));
 else       if (key.equals(""String_Node_Str""))       System.out.println(""String_Node_Str"");
 else       if (key.equals(""String_Node_Str""))       ;
 else       if (key.equals(""String_Node_Str"")) {
        boolean raised=false;
        if (config.containsKey(""String_Node_Str""))         raised=Boolean.getBoolean(""String_Node_Str"");
        terminal.setBorder(Integer.parseInt(config.getProperty(key)),raised);
      }
 else       if (key.equals(""String_Node_Str"")) {
        Scrollbar scrollBar=new Scrollbar();
        tPanel.add(""String_Node_Str"",scrollBar);
        terminal.setScrollbar(scrollBar);
      }
 else       if (key.equals(""String_Node_Str""))       terminal.setTerminalID(config.getProperty(key));
 else       if (key.equals(""String_Node_Str""))       terminal.setBufferSize(Integer.parseInt(config.getProperty(key)));
 else       if (key.equals(""String_Node_Str""))       System.out.println(""String_Node_Str"");
 else       if (key.equals(""String_Node_Str"")) {
        String resize=config.getProperty(""String_Node_Str"");
        if (resize.equals(""String_Node_Str""))         terminal.setResizeStrategy(terminal.RESIZE_FONT);
 else         if (resize.equals(""String_Node_Str""))         terminal.setResizeStrategy(terminal.RESIZE_SCREEN);
 else         terminal.setResizeStrategy(terminal.RESIZE_NONE);
      }
 else       if (key.equals(""String_Node_Str"") || key.equals(""String_Node_Str""))       ;
 else       if (key.equals(""String_Node_Str"")) {
        int style=Font.PLAIN, fsize=12;
        if (config.containsKey(""String_Node_Str""))         fsize=Integer.parseInt(config.getProperty(""String_Node_Str""));
        String fontStyle=config.getProperty(""String_Node_Str"");
        if (fontStyle == null || fontStyle.equals(""String_Node_Str""))         style=Font.PLAIN;
 else         if (fontStyle.equals(""String_Node_Str""))         style=Font.BOLD;
 else         if (fontStyle.equals(""String_Node_Str""))         style=Font.ITALIC;
 else         if (fontStyle.equals(""String_Node_Str""))         style=Font.BOLD | Font.ITALIC;
        terminal.setFont(new Font(config.getProperty(key),style,fsize));
      }
 else       if (key.equals(""String_Node_Str""))       System.out.println(""String_Node_Str"");
 else       if (key.equals(""String_Node_Str""))       terminal.setVMS((Boolean.valueOf(config.getProperty(key))).booleanValue());
 else       if (key.equals(""String_Node_Str""))       terminal.setIBMCharset((Boolean.valueOf(config.getProperty(key))).booleanValue());
 else       System.err.println(""String_Node_Str"" + key + ""String_Node_Str"");
    }
  }
}","private void configure(Properties config){
  Enumeration p=config.keys();
  while (p.hasMoreElements()) {
    String key=(String)p.nextElement();
    if (key.startsWith(""String_Node_Str"")) {
      if (key.equals(""String_Node_Str""))       terminal.setForeground(Color.decode(config.getProperty(key)));
 else       if (key.equals(""String_Node_Str""))       terminal.setBackground(Color.decode(config.getProperty(key)));
 else       if (key.equals(""String_Node_Str""))       System.out.println(""String_Node_Str"");
 else       if (key.equals(""String_Node_Str""))       ;
 else       if (key.equals(""String_Node_Str"")) {
        boolean raised=false;
        if (config.containsKey(""String_Node_Str""))         raised=Boolean.valueOf(""String_Node_Str"").booleanValue();
        terminal.setBorder(Integer.parseInt(config.getProperty(key)),raised);
      }
 else       if (key.equals(""String_Node_Str"")) {
        String direction=config.getProperty(key);
        if (!direction.equals(""String_Node_Str"") && !direction.equals(""String_Node_Str""))         direction=""String_Node_Str"";
        Scrollbar scrollBar=new Scrollbar();
        tPanel.add(direction,scrollBar);
        terminal.setScrollbar(scrollBar);
      }
 else       if (key.equals(""String_Node_Str""))       terminal.setTerminalID(config.getProperty(key));
 else       if (key.equals(""String_Node_Str""))       terminal.setBufferSize(Integer.parseInt(config.getProperty(key)));
 else       if (key.equals(""String_Node_Str""))       System.out.println(""String_Node_Str"");
 else       if (key.equals(""String_Node_Str"")) {
        String resize=config.getProperty(""String_Node_Str"");
        if (resize.equals(""String_Node_Str""))         terminal.setResizeStrategy(terminal.RESIZE_FONT);
 else         if (resize.equals(""String_Node_Str""))         terminal.setResizeStrategy(terminal.RESIZE_SCREEN);
 else         terminal.setResizeStrategy(terminal.RESIZE_NONE);
      }
 else       if (key.equals(""String_Node_Str"") || key.equals(""String_Node_Str""))       ;
 else       if (key.equals(""String_Node_Str"")) {
        int style=Font.PLAIN, fsize=12;
        if (config.containsKey(""String_Node_Str""))         fsize=Integer.parseInt(config.getProperty(""String_Node_Str""));
        String fontStyle=config.getProperty(""String_Node_Str"");
        if (fontStyle == null || fontStyle.equals(""String_Node_Str""))         style=Font.PLAIN;
 else         if (fontStyle.equals(""String_Node_Str""))         style=Font.BOLD;
 else         if (fontStyle.equals(""String_Node_Str""))         style=Font.ITALIC;
 else         if (fontStyle.equals(""String_Node_Str""))         style=Font.BOLD | Font.ITALIC;
        terminal.setFont(new Font(config.getProperty(key),style,fsize));
      }
 else       if (key.equals(""String_Node_Str""))       System.out.println(""String_Node_Str"");
 else       if (key.equals(""String_Node_Str""))       terminal.setVMS((Boolean.valueOf(config.getProperty(key))).booleanValue());
 else       if (key.equals(""String_Node_Str""))       terminal.setIBMCharset((Boolean.valueOf(config.getProperty(key))).booleanValue());
 else       System.err.println(""String_Node_Str"" + key + ""String_Node_Str"");
    }
  }
}",0.8923628073603648
143954,"/** 
 * Split up comma separated lists of strings. This is quite strict, no whitespace characters are allowed.
 * @param s the string to be split up
 * @return an array of strings
 */
private static Vector split(String s){
  Vector v=new Vector();
  int old=-1, idx=s.indexOf(',');
  while (idx >= 0) {
    v.addElement(s.substring(old + 1,idx));
    old=idx;
    idx=s.indexOf(',',old + 1);
  }
  v.addElement(s.substring(old + 1));
  return v;
}","/** 
 * Split up comma separated lists of strings. This is quite strict, no whitespace characters are allowed.
 * @param s the string to be split up
 * @return an array of strings
 */
private static Vector split(String s){
  if (s == null)   return null;
  Vector v=new Vector();
  int old=-1, idx=s.indexOf(',');
  while (idx >= 0) {
    v.addElement(s.substring(old + 1,idx));
    old=idx;
    idx=s.indexOf(',',old + 1);
  }
  v.addElement(s.substring(old + 1));
  return v;
}",0.9654427645788336
143955,"public Common(Properties config){
  System.out.println(""String_Node_Str"");
  System.out.println(""String_Node_Str"");
  System.out.println(""String_Node_Str"" + ""String_Node_Str"");
  plugins=new Hashtable();
  components=new Hashtable();
  menus=new Hashtable();
  Vector names=split(config.getProperty(""String_Node_Str""));
  Enumeration e=names.elements();
  while (e.hasMoreElements()) {
    String name=(String)e.nextElement();
    System.out.println(""String_Node_Str"" + name + ""String_Node_Str"");
    Plugin plugin=addPlugin(name);
    if (plugin instanceof VisualPlugin) {
      Component c=((VisualPlugin)plugin).getPluginVisual();
      if (c != null)       components.put(name,c);
      Menu menu=((VisualPlugin)plugin).getPluginMenu();
      if (menu != null)       menus.put(name,menu);
    }
  }
  broadcast(new ConfigurationRequest(config));
}","public Common(Properties config){
  System.out.println(""String_Node_Str"");
  System.out.println(""String_Node_Str"");
  System.out.println(""String_Node_Str"" + ""String_Node_Str"");
  plugins=new Hashtable();
  components=new Hashtable();
  menus=new Hashtable();
  Vector names=split(config.getProperty(""String_Node_Str""));
  if (names == null) {
    System.err.println(""String_Node_Str"");
    return;
  }
  Enumeration e=names.elements();
  while (e.hasMoreElements()) {
    String name=(String)e.nextElement();
    System.out.println(""String_Node_Str"" + name + ""String_Node_Str"");
    Plugin plugin=addPlugin(name);
    if (plugin instanceof VisualPlugin) {
      Component c=((VisualPlugin)plugin).getPluginVisual();
      if (c != null)       components.put(name,c);
      Menu menu=((VisualPlugin)plugin).getPluginMenu();
      if (menu != null)       menus.put(name,menu);
    }
  }
  broadcast(new ConfigurationRequest(config));
}",0.954035874439462
143956,"public void mouseReleased(MouseEvent evt){
  if (buttonCheck(evt.getModifiers(),MouseEvent.BUTTON1_MASK)) {
    int xoffset=(super.getSize().width - size.width * charWidth) / 2;
    int yoffset=(super.getSize().height - size.height * charHeight) / 2;
    mouseDragged(evt);
    if (selectBegin.x == selectEnd.x && selectBegin.y == selectEnd.y) {
      repaint();
      return;
    }
    selection=""String_Node_Str"";
    if (selectEnd.x < 0)     selectEnd.x=0;
    if (selectEnd.y < 0)     selectEnd.y=0;
    if (selectEnd.y >= charArray.length)     selectEnd.y=charArray.length - 1;
    if (selectEnd.x >= charArray[0].length)     selectEnd.x=charArray[0].length - 1;
    for (int l=selectBegin.y; l <= selectEnd.y; l++) {
      int start, end;
      start=(l == selectBegin.y ? start=selectBegin.x : 0);
      end=(l == selectEnd.y ? end=selectEnd.x : charArray.length - 1);
      selection+=(new String(charArray[l])).substring(start,end);
      if (end == charArray.length - 1)       selection+=""String_Node_Str"";
    }
    repaint();
  }
}","public void mouseReleased(MouseEvent evt){
  if (buttonCheck(evt.getModifiers(),MouseEvent.BUTTON1_MASK)) {
    int xoffset=(super.getSize().width - size.width * charWidth) / 2;
    int yoffset=(super.getSize().height - size.height * charHeight) / 2;
    mouseDragged(evt);
    if (selectBegin.x == selectEnd.x && selectBegin.y == selectEnd.y) {
      repaint();
      return;
    }
    selection=""String_Node_Str"";
    if (selectEnd.x < 0)     selectEnd.x=0;
    if (selectEnd.y < 0)     selectEnd.y=0;
    if (selectEnd.y >= charArray.length)     selectEnd.y=charArray.length - 1;
    if (selectEnd.x >= charArray[0].length)     selectEnd.x=charArray[0].length - 1;
    for (int l=selectBegin.y; l <= selectEnd.y; l++) {
      int start, end;
      start=(l == selectBegin.y ? start=selectBegin.x : 0);
      end=(l == selectEnd.y ? end=selectEnd.x : charArray[l].length - 1);
      selection+=(new String(charArray[l])).substring(start,end);
      if (end == charArray[l].length - 1)       selection+=""String_Node_Str"";
    }
    repaint();
  }
}",0.997131931166348
143957,"public void actionPerformed(ActionEvent evt){
  Dialog d=new Dialog(frame,""String_Node_Str"",true);
  d.add(new Label(""String_Node_Str"" + ""String_Node_Str""));
  d.setResizable(false);
  d.pack();
  d.show();
}","public void actionPerformed(ActionEvent evt){
  d.dispose();
}",0.4444444444444444
143958,"public static void main(String args[]){
  Properties options=new Properties();
  try {
    options.load(options.getClass().getResourceAsStream(""String_Node_Str""));
  }
 catch (  IOException e) {
    System.err.println(""String_Node_Str"");
  }
  String error=parseOptions(options,args);
  if (error != null) {
    System.err.println(error);
    System.err.println(""String_Node_Str"" + ""String_Node_Str"" + ""String_Node_Str"");
    System.exit(0);
  }
  final String host=options.getProperty(""String_Node_Str"");
  final String port=options.getProperty(""String_Node_Str"");
  final Frame frame=new Frame(""String_Node_Str"" + host + (port.equals(""String_Node_Str"") ? ""String_Node_Str"" : ""String_Node_Str"" + port));
  try {
    clipboard=frame.getToolkit().getSystemClipboard();
  }
 catch (  Exception e) {
    System.err.println(""String_Node_Str"");
    System.err.println(""String_Node_Str"");
    clipboard=new Clipboard(""String_Node_Str"");
  }
  final Common setup=new Common(options);
  setup.registerPluginListener(new OnlineStatusListener(){
    public void online(){
      frame.setTitle(""String_Node_Str"" + host + (port.equals(""String_Node_Str"") ? ""String_Node_Str"" : ""String_Node_Str"" + port));
    }
    public void offline(){
      frame.setTitle(""String_Node_Str"");
    }
  }
);
  FocusListener focusListener=new FocusListener(){
    public void focusGained(    FocusEvent e){
      Component c=e.getComponent();
      Hashtable components=setup.getComponents();
      Enumeration ce=components.keys();
      while (ce.hasMoreElements()) {
        String key=(String)ce.nextElement();
        if (c == components.get(key)) {
          focussedPlugin=(Plugin)setup.getPlugins().get(key);
          return;
        }
      }
    }
    public void focusLost(    FocusEvent e){
    }
  }
;
  Hashtable componentList=setup.getComponents();
  Enumeration names=componentList.keys();
  while (names.hasMoreElements()) {
    String name=(String)names.nextElement();
    Component c=(Component)componentList.get(name);
    c.addFocusListener(focusListener);
    c.addMouseListener(new java.awt.event.MouseAdapter(){
      public void mouseEntered(      java.awt.event.MouseEvent evt){
        evt.getComponent().requestFocus();
      }
    }
);
    if (options.getProperty(""String_Node_Str"" + name) == null) {
      System.err.println(""String_Node_Str"" + name + ""String_Node_Str"");
      frame.add(""String_Node_Str"",c);
    }
 else     frame.add(options.getProperty(""String_Node_Str"" + name),c);
  }
  MenuBar mb=new MenuBar();
  Menu file=new Menu(""String_Node_Str"");
  file.setShortcut(new MenuShortcut(KeyEvent.VK_H,true));
  MenuItem tmp;
  file.add(tmp=new MenuItem(""String_Node_Str""));
  tmp.addActionListener(new ActionListener(){
    public void actionPerformed(    ActionEvent evt){
      setup.broadcast(new SocketRequest(host,Integer.parseInt(port)));
    }
  }
);
  file.add(tmp=new MenuItem(""String_Node_Str""));
  tmp.addActionListener(new ActionListener(){
    public void actionPerformed(    ActionEvent evt){
      setup.broadcast(new SocketRequest());
    }
  }
);
  file.add(new MenuItem(""String_Node_Str""));
  file.add(tmp=new MenuItem(""String_Node_Str""));
  tmp.addActionListener(new ActionListener(){
    public void actionPerformed(    ActionEvent evt){
      frame.dispose();
      System.exit(0);
    }
  }
);
  mb.add(file);
  Menu edit=new Menu(""String_Node_Str"");
  edit.setShortcut(new MenuShortcut(KeyEvent.VK_H,true));
  edit.add(tmp=new MenuItem(""String_Node_Str""));
  tmp.addActionListener(new ActionListener(){
    public void actionPerformed(    ActionEvent evt){
      if (focussedPlugin instanceof VisualTransferPlugin)       ((VisualTransferPlugin)focussedPlugin).copy(clipboard);
    }
  }
);
  edit.add(tmp=new MenuItem(""String_Node_Str""));
  tmp.addActionListener(new ActionListener(){
    public void actionPerformed(    ActionEvent evt){
      if (focussedPlugin instanceof VisualTransferPlugin)       ((VisualTransferPlugin)focussedPlugin).paste(clipboard);
    }
  }
);
  mb.add(edit);
  Hashtable menuList=setup.getMenus();
  names=menuList.keys();
  while (names.hasMoreElements()) {
    String name=(String)names.nextElement();
    mb.add((Menu)menuList.get(name));
  }
  Menu help=new Menu(""String_Node_Str"");
  help.add(tmp=new MenuItem(""String_Node_Str""));
  tmp.addActionListener(new ActionListener(){
    public void actionPerformed(    ActionEvent evt){
      Dialog d=new Dialog(frame,""String_Node_Str"",true);
      d.add(new Label(""String_Node_Str"" + ""String_Node_Str""));
      d.setResizable(false);
      d.pack();
      d.show();
    }
  }
);
  mb.setHelpMenu(help);
  frame.setMenuBar(mb);
  frame.pack();
  frame.show();
  setup.broadcast(new SocketRequest(host,Integer.parseInt(port)));
}","public static void main(String args[]){
  Properties options=new Properties();
  try {
    options.load(options.getClass().getResourceAsStream(""String_Node_Str""));
  }
 catch (  IOException e) {
    System.err.println(""String_Node_Str"");
  }
  String error=parseOptions(options,args);
  if (error != null) {
    System.err.println(error);
    System.err.println(""String_Node_Str"" + ""String_Node_Str"" + ""String_Node_Str"");
    System.exit(0);
  }
  final String host=options.getProperty(""String_Node_Str"");
  final String port=options.getProperty(""String_Node_Str"");
  final Frame frame=new Frame(""String_Node_Str"" + host + (port.equals(""String_Node_Str"") ? ""String_Node_Str"" : ""String_Node_Str"" + port));
  try {
    clipboard=frame.getToolkit().getSystemClipboard();
  }
 catch (  Exception e) {
    System.err.println(""String_Node_Str"");
    System.err.println(""String_Node_Str"");
    clipboard=new Clipboard(""String_Node_Str"");
  }
  final Common setup=new Common(options);
  setup.registerPluginListener(new OnlineStatusListener(){
    public void online(){
      frame.setTitle(""String_Node_Str"" + host + (port.equals(""String_Node_Str"") ? ""String_Node_Str"" : ""String_Node_Str"" + port));
    }
    public void offline(){
      frame.setTitle(""String_Node_Str"");
    }
  }
);
  FocusListener focusListener=new FocusListener(){
    public void focusGained(    FocusEvent e){
      Component c=e.getComponent();
      Hashtable components=setup.getComponents();
      Enumeration ce=components.keys();
      while (ce.hasMoreElements()) {
        String key=(String)ce.nextElement();
        if (c == components.get(key)) {
          focussedPlugin=(Plugin)setup.getPlugins().get(key);
          return;
        }
      }
    }
    public void focusLost(    FocusEvent e){
    }
  }
;
  Hashtable componentList=setup.getComponents();
  Enumeration names=componentList.keys();
  while (names.hasMoreElements()) {
    String name=(String)names.nextElement();
    Component c=(Component)componentList.get(name);
    c.addFocusListener(focusListener);
    c.addMouseListener(new java.awt.event.MouseAdapter(){
      public void mouseEntered(      java.awt.event.MouseEvent evt){
        evt.getComponent().requestFocus();
      }
    }
);
    if (options.getProperty(""String_Node_Str"" + name) == null) {
      System.err.println(""String_Node_Str"" + name + ""String_Node_Str"");
      frame.add(""String_Node_Str"",c);
    }
 else     frame.add(options.getProperty(""String_Node_Str"" + name),c);
  }
  MenuBar mb=new MenuBar();
  Menu file=new Menu(""String_Node_Str"");
  file.setShortcut(new MenuShortcut(KeyEvent.VK_H,true));
  MenuItem tmp;
  file.add(tmp=new MenuItem(""String_Node_Str""));
  tmp.addActionListener(new ActionListener(){
    public void actionPerformed(    ActionEvent evt){
      setup.broadcast(new SocketRequest(host,Integer.parseInt(port)));
    }
  }
);
  file.add(tmp=new MenuItem(""String_Node_Str""));
  tmp.addActionListener(new ActionListener(){
    public void actionPerformed(    ActionEvent evt){
      setup.broadcast(new SocketRequest());
    }
  }
);
  file.add(new MenuItem(""String_Node_Str""));
  file.add(tmp=new MenuItem(""String_Node_Str""));
  tmp.addActionListener(new ActionListener(){
    public void actionPerformed(    ActionEvent evt){
      frame.dispose();
      System.exit(0);
    }
  }
);
  mb.add(file);
  Menu edit=new Menu(""String_Node_Str"");
  edit.setShortcut(new MenuShortcut(KeyEvent.VK_H,true));
  edit.add(tmp=new MenuItem(""String_Node_Str""));
  tmp.addActionListener(new ActionListener(){
    public void actionPerformed(    ActionEvent evt){
      if (focussedPlugin instanceof VisualTransferPlugin)       ((VisualTransferPlugin)focussedPlugin).copy(clipboard);
    }
  }
);
  edit.add(tmp=new MenuItem(""String_Node_Str""));
  tmp.addActionListener(new ActionListener(){
    public void actionPerformed(    ActionEvent evt){
      if (focussedPlugin instanceof VisualTransferPlugin)       ((VisualTransferPlugin)focussedPlugin).paste(clipboard);
    }
  }
);
  mb.add(edit);
  Hashtable menuList=setup.getMenus();
  names=menuList.keys();
  while (names.hasMoreElements()) {
    String name=(String)names.nextElement();
    mb.add((Menu)menuList.get(name));
  }
  Menu help=new Menu(""String_Node_Str"");
  help.add(tmp=new MenuItem(""String_Node_Str""));
  tmp.addActionListener(new ActionListener(){
    public void actionPerformed(    ActionEvent evt){
      final Dialog d=new Dialog(frame,""String_Node_Str"",true);
      d.add(""String_Node_Str"",new Label(""String_Node_Str"" + ""String_Node_Str""));
      Button close=new Button(""String_Node_Str"");
      close.addActionListener(new ActionListener(){
        public void actionPerformed(        ActionEvent evt){
          d.dispose();
        }
      }
);
      d.add(""String_Node_Str"",close);
      d.setResizable(false);
      d.pack();
      d.show();
    }
  }
);
  mb.setHelpMenu(help);
  frame.setMenuBar(mb);
  frame.pack();
  frame.show();
  setup.broadcast(new SocketRequest(host,Integer.parseInt(port)));
}",0.9723076923076924
143959,"/** 
 * Handle events for the terminal. Only accept events for the scroll bar. Any other events have to be propagated to the parent.
 * @param evt the event
 */
public void keyPressed(KeyEvent evt){
  boolean control=evt.isControlDown();
  boolean shift=evt.isShiftDown();
  boolean alt=evt.isAltDown();
  int keyCode=evt.getKeyCode();
  char keyChar=evt.getKeyChar();
  if (pressedKey == KeyEvent.VK_ENTER && (keyCode == KeyEvent.VK_ENTER || keyChar == 10) && evt.getWhen() - pressedWhen < 50)   return;
  pressedWhen=evt.getWhen();
  if (keyCode == KeyEvent.VK_ENTER && !control) {
    if (sendcrlf)     write(""String_Node_Str"");
 else     write(""String_Node_Str"");
  }
  if (((!vms && keyChar == '2') || keyChar == ' ') && control)   write(""String_Node_Str"" + (char)0);
  if (vms) {
    if (keyChar == 8) {
      if (shift && !control)       write(""String_Node_Str"" + (char)10);
 else       if (control && !shift)       write(""String_Node_Str"" + (char)24);
 else       write(""String_Node_Str"" + (char)127);
    }
 else     if (keyChar == 127 && !control) {
      if (shift)       write(Insert[0]);
 else       write(Remove[0]);
    }
 else     if (control) switch (keyChar) {
case '0':
      write(KP0);
    return;
case '1':
  write(KP1);
return;
case '2':
write(KP2);
return;
case '3':
write(KP3);
return;
case '4':
write(KP4);
return;
case '5':
write(KP5);
return;
case '6':
write(KP6);
return;
case '7':
write(KP7);
return;
case '8':
write(KP8);
return;
case '9':
write(KP9);
return;
case '.':
write(KPPeriod);
return;
case '-':
case 31:
write(KPMinus);
return;
case '+':
write(KPComma);
return;
case 10:
write(KPEnter);
return;
case '/':
write(PF2);
return;
case '*':
write(PF3);
return;
}
if (shift && keyChar < 32) write(PF1 + (char)(keyChar + 64));
return;
}
String fmap[];
int xind;
xind=0;
fmap=FunctionKey;
if (shift) {
fmap=FunctionKeyShift;
xind=1;
}
if (control) {
fmap=FunctionKeyCtrl;
xind=2;
}
if (alt) {
fmap=FunctionKeyAlt;
xind=3;
}
switch (keyCode) {
case KeyEvent.VK_F1:
write(fmap[1]);
return;
case KeyEvent.VK_F2:
write(fmap[2]);
return;
case KeyEvent.VK_F3:
write(fmap[3]);
return;
case KeyEvent.VK_F4:
write(fmap[4]);
return;
case KeyEvent.VK_F5:
write(fmap[5]);
return;
case KeyEvent.VK_F6:
write(fmap[6]);
return;
case KeyEvent.VK_F7:
write(fmap[7]);
return;
case KeyEvent.VK_F8:
write(fmap[8]);
return;
case KeyEvent.VK_F9:
write(fmap[9]);
return;
case KeyEvent.VK_F10:
write(fmap[10]);
return;
case KeyEvent.VK_F11:
write(fmap[11]);
return;
case KeyEvent.VK_F12:
write(fmap[12]);
return;
case KeyEvent.VK_UP:
write(KeyUp);
return;
case KeyEvent.VK_DOWN:
write(KeyDown);
return;
case KeyEvent.VK_LEFT:
write(KeyLeft);
return;
case KeyEvent.VK_RIGHT:
write(KeyRight);
return;
case KeyEvent.VK_PAGE_DOWN:
write(NextScn[xind]);
return;
case KeyEvent.VK_PAGE_UP:
write(PrevScn[xind]);
return;
case KeyEvent.VK_INSERT:
write(Insert[xind]);
return;
case KeyEvent.VK_HOME:
if (vms) write(""String_Node_Str"" + (char)8);
 else write(KeyHome[xind]);
return;
case KeyEvent.VK_END:
if (vms) write(""String_Node_Str"" + (char)5);
 else write(KeyEnd[xind]);
return;
case KeyEvent.VK_NUM_LOCK:
if (vms && control) if (pressedKey != keyCode) {
pressedKey=keyCode;
write(PF1);
}
 else pressedKey=' ';
if (!control) numlock=!numlock;
return;
case KeyEvent.VK_CAPS_LOCK:
capslock=!capslock;
return;
default :
if (debug > 0) System.out.println(""String_Node_Str"" + evt);
}
}","/** 
 * Handle events for the terminal. Only accept events for the scroll bar. Any other events have to be propagated to the parent.
 * @param evt the event
 */
public void keyPressed(KeyEvent evt){
  boolean control=evt.isControlDown();
  boolean shift=evt.isShiftDown();
  boolean alt=evt.isAltDown();
  int keyCode=evt.getKeyCode();
  char keyChar=evt.getKeyChar();
  if (keyCode == KeyEvent.VK_ENTER && !control) {
    if (sendcrlf)     write(""String_Node_Str"");
 else     write(""String_Node_Str"");
  }
  if (((!vms && keyChar == '2') || keyChar == ' ') && control)   write(""String_Node_Str"" + (char)0);
  if (vms) {
    if (keyChar == 8) {
      if (shift && !control)       write(""String_Node_Str"" + (char)10);
 else       if (control && !shift)       write(""String_Node_Str"" + (char)24);
 else       write(""String_Node_Str"" + (char)127);
    }
 else     if (keyChar == 127 && !control) {
      if (shift)       write(Insert[0]);
 else       write(Remove[0]);
    }
 else     if (control) switch (keyChar) {
case '0':
      write(KP0);
    return;
case '1':
  write(KP1);
return;
case '2':
write(KP2);
return;
case '3':
write(KP3);
return;
case '4':
write(KP4);
return;
case '5':
write(KP5);
return;
case '6':
write(KP6);
return;
case '7':
write(KP7);
return;
case '8':
write(KP8);
return;
case '9':
write(KP9);
return;
case '.':
write(KPPeriod);
return;
case '-':
case 31:
write(KPMinus);
return;
case '+':
write(KPComma);
return;
case 10:
write(KPEnter);
return;
case '/':
write(PF2);
return;
case '*':
write(PF3);
return;
}
if (shift && keyChar < 32) write(PF1 + (char)(keyChar + 64));
return;
}
String fmap[];
int xind;
xind=0;
fmap=FunctionKey;
if (shift) {
fmap=FunctionKeyShift;
xind=1;
}
if (control) {
fmap=FunctionKeyCtrl;
xind=2;
}
if (alt) {
fmap=FunctionKeyAlt;
xind=3;
}
switch (keyCode) {
case KeyEvent.VK_F1:
write(fmap[1]);
return;
case KeyEvent.VK_F2:
write(fmap[2]);
return;
case KeyEvent.VK_F3:
write(fmap[3]);
return;
case KeyEvent.VK_F4:
write(fmap[4]);
return;
case KeyEvent.VK_F5:
write(fmap[5]);
return;
case KeyEvent.VK_F6:
write(fmap[6]);
return;
case KeyEvent.VK_F7:
write(fmap[7]);
return;
case KeyEvent.VK_F8:
write(fmap[8]);
return;
case KeyEvent.VK_F9:
write(fmap[9]);
return;
case KeyEvent.VK_F10:
write(fmap[10]);
return;
case KeyEvent.VK_F11:
write(fmap[11]);
return;
case KeyEvent.VK_F12:
write(fmap[12]);
return;
case KeyEvent.VK_UP:
write(KeyUp);
return;
case KeyEvent.VK_DOWN:
write(KeyDown);
return;
case KeyEvent.VK_LEFT:
write(KeyLeft);
return;
case KeyEvent.VK_RIGHT:
write(KeyRight);
return;
case KeyEvent.VK_PAGE_DOWN:
write(NextScn[xind]);
return;
case KeyEvent.VK_PAGE_UP:
write(PrevScn[xind]);
return;
case KeyEvent.VK_INSERT:
write(Insert[xind]);
return;
case KeyEvent.VK_HOME:
if (vms) write(""String_Node_Str"" + (char)8);
 else write(KeyHome[xind]);
return;
case KeyEvent.VK_END:
if (vms) write(""String_Node_Str"" + (char)5);
 else write(KeyEnd[xind]);
return;
case KeyEvent.VK_NUM_LOCK:
if (vms && control) if (pressedKey != keyCode) {
pressedKey=keyCode;
write(PF1);
}
 else pressedKey=' ';
if (!control) numlock=!numlock;
return;
case KeyEvent.VK_CAPS_LOCK:
capslock=!capslock;
return;
default :
if (debug > 0) System.out.println(""String_Node_Str"" + evt);
}
}",0.9749962115472042
143960,"/** 
 * Not used.
 */
public void keyTyped(KeyEvent evt){
  boolean control=evt.isControlDown();
  boolean shift=evt.isShiftDown();
  boolean alt=evt.isAltDown();
  int keyCode=evt.getKeyCode();
  char keyChar=evt.getKeyChar();
  if (shift && (keyChar == '\t'))   write(KeyBacktab);
 else   if (alt)   write(""String_Node_Str"" + ((char)(keyChar | 0x80)));
 else   if (capslock && !shift)   write((""String_Node_Str"" + keyChar).toUpperCase());
 else   write(""String_Node_Str"" + keyChar);
}","/** 
 * Not used.
 */
public void keyTyped(KeyEvent evt){
  boolean control=evt.isControlDown();
  boolean shift=evt.isShiftDown();
  boolean alt=evt.isAltDown();
  int keyCode=evt.getKeyCode();
  char keyChar=evt.getKeyChar();
  if (shift && (keyChar == '\t'))   write(KeyBacktab);
 else   if (alt)   write(""String_Node_Str"" + ((char)(keyChar | 0x80)));
 else   if (capslock && !shift)   write((""String_Node_Str"" + keyChar).toUpperCase());
 else   if (!(keyChar == '\r' || keyChar == '\n') || control)   write(""String_Node_Str"" + keyChar);
}",0.9455252918287936
143961,"/** 
 * Handle events for the terminal. Only accept events for the scroll bar. Any other events have to be propagated to the parent.
 * @param evt the event
 */
public void keyPressed(KeyEvent evt){
  boolean control=evt.isControlDown();
  boolean shift=evt.isShiftDown();
  boolean alt=evt.isAltDown();
  int keyCode=evt.getKeyCode();
  char keyChar=evt.getKeyChar();
  if (pressedKey == KeyEvent.VK_ENTER && (keyCode == KeyEvent.VK_ENTER || keyChar == 10) && evt.getWhen() - pressedWhen < 50)   return;
  pressedWhen=evt.getWhen();
  if (keyCode == KeyEvent.VK_ENTER && !control) {
    if (sendcrlf)     write(""String_Node_Str"");
 else     write(""String_Node_Str"");
  }
  if (((!vms && keyChar == '2') || keyChar == ' ') && control)   write(""String_Node_Str"" + (char)0);
  if (vms) {
    if (keyChar == 8) {
      if (shift && !control)       write(""String_Node_Str"" + (char)10);
 else       if (control && !shift)       write(""String_Node_Str"" + (char)24);
 else       write(""String_Node_Str"" + (char)127);
    }
 else     if (keyChar == 127 && !control) {
      if (shift)       write(Insert[0]);
 else       write(Remove[0]);
    }
 else     if (control) switch (keyChar) {
case '0':
      write(KP0);
    return;
case '1':
  write(KP1);
return;
case '2':
write(KP2);
return;
case '3':
write(KP3);
return;
case '4':
write(KP4);
return;
case '5':
write(KP5);
return;
case '6':
write(KP6);
return;
case '7':
write(KP7);
return;
case '8':
write(KP8);
return;
case '9':
write(KP9);
return;
case '.':
write(KPPeriod);
return;
case '-':
case 31:
write(KPMinus);
return;
case '+':
write(KPComma);
return;
case 10:
write(KPEnter);
return;
case '/':
write(PF2);
return;
case '*':
write(PF3);
return;
}
if (shift && keyChar < 32) write(PF1 + (char)(keyChar + 64));
return;
}
String fmap[];
int xind;
xind=0;
fmap=FunctionKey;
if (shift) {
fmap=FunctionKeyShift;
xind=1;
}
if (control) {
fmap=FunctionKeyCtrl;
xind=2;
}
if (alt) {
fmap=FunctionKeyAlt;
xind=3;
}
switch (keyCode) {
case KeyEvent.VK_F1:
write(fmap[1]);
return;
case KeyEvent.VK_F2:
write(fmap[2]);
return;
case KeyEvent.VK_F3:
write(fmap[3]);
return;
case KeyEvent.VK_F4:
write(fmap[4]);
return;
case KeyEvent.VK_F5:
write(fmap[5]);
return;
case KeyEvent.VK_F6:
write(fmap[6]);
return;
case KeyEvent.VK_F7:
write(fmap[7]);
return;
case KeyEvent.VK_F8:
write(fmap[8]);
return;
case KeyEvent.VK_F9:
write(fmap[9]);
return;
case KeyEvent.VK_F10:
write(fmap[10]);
return;
case KeyEvent.VK_F11:
write(fmap[11]);
return;
case KeyEvent.VK_F12:
write(fmap[12]);
return;
case KeyEvent.VK_UP:
write(KeyUp);
return;
case KeyEvent.VK_DOWN:
write(KeyDown);
return;
case KeyEvent.VK_LEFT:
write(KeyLeft);
return;
case KeyEvent.VK_RIGHT:
write(KeyRight);
return;
case KeyEvent.VK_PAGE_DOWN:
write(NextScn[xind]);
return;
case KeyEvent.VK_PAGE_UP:
write(PrevScn[xind]);
return;
case KeyEvent.VK_INSERT:
write(Insert[xind]);
return;
case KeyEvent.VK_HOME:
if (vms) write(""String_Node_Str"" + (char)8);
 else write(KeyHome[xind]);
return;
case KeyEvent.VK_END:
if (vms) write(""String_Node_Str"" + (char)5);
 else write(KeyEnd[xind]);
return;
case KeyEvent.VK_NUM_LOCK:
if (vms && control) if (pressedKey != keyCode) {
pressedKey=keyCode;
write(PF1);
}
 else pressedKey=' ';
if (!control) numlock=!numlock;
return;
case KeyEvent.VK_CAPS_LOCK:
capslock=!capslock;
return;
default :
if (debug > 0) System.out.println(""String_Node_Str"" + evt);
}
if (shift && (keyChar == '\t')) write(KeyBacktab);
 else if (alt) write(""String_Node_Str"" + ((char)(keyChar | 0x80)));
 else if (capslock) write((""String_Node_Str"" + keyChar).toUpperCase());
 else write(""String_Node_Str"" + keyChar);
}","/** 
 * Handle events for the terminal. Only accept events for the scroll bar. Any other events have to be propagated to the parent.
 * @param evt the event
 */
public void keyPressed(KeyEvent evt){
  boolean control=evt.isControlDown();
  boolean shift=evt.isShiftDown();
  boolean alt=evt.isAltDown();
  int keyCode=evt.getKeyCode();
  char keyChar=evt.getKeyChar();
  if (pressedKey == KeyEvent.VK_ENTER && (keyCode == KeyEvent.VK_ENTER || keyChar == 10) && evt.getWhen() - pressedWhen < 50)   return;
  pressedWhen=evt.getWhen();
  if (keyCode == KeyEvent.VK_ENTER && !control) {
    if (sendcrlf)     write(""String_Node_Str"");
 else     write(""String_Node_Str"");
  }
  if (((!vms && keyChar == '2') || keyChar == ' ') && control)   write(""String_Node_Str"" + (char)0);
  if (vms) {
    if (keyChar == 8) {
      if (shift && !control)       write(""String_Node_Str"" + (char)10);
 else       if (control && !shift)       write(""String_Node_Str"" + (char)24);
 else       write(""String_Node_Str"" + (char)127);
    }
 else     if (keyChar == 127 && !control) {
      if (shift)       write(Insert[0]);
 else       write(Remove[0]);
    }
 else     if (control) switch (keyChar) {
case '0':
      write(KP0);
    return;
case '1':
  write(KP1);
return;
case '2':
write(KP2);
return;
case '3':
write(KP3);
return;
case '4':
write(KP4);
return;
case '5':
write(KP5);
return;
case '6':
write(KP6);
return;
case '7':
write(KP7);
return;
case '8':
write(KP8);
return;
case '9':
write(KP9);
return;
case '.':
write(KPPeriod);
return;
case '-':
case 31:
write(KPMinus);
return;
case '+':
write(KPComma);
return;
case 10:
write(KPEnter);
return;
case '/':
write(PF2);
return;
case '*':
write(PF3);
return;
}
if (shift && keyChar < 32) write(PF1 + (char)(keyChar + 64));
return;
}
String fmap[];
int xind;
xind=0;
fmap=FunctionKey;
if (shift) {
fmap=FunctionKeyShift;
xind=1;
}
if (control) {
fmap=FunctionKeyCtrl;
xind=2;
}
if (alt) {
fmap=FunctionKeyAlt;
xind=3;
}
switch (keyCode) {
case KeyEvent.VK_F1:
write(fmap[1]);
return;
case KeyEvent.VK_F2:
write(fmap[2]);
return;
case KeyEvent.VK_F3:
write(fmap[3]);
return;
case KeyEvent.VK_F4:
write(fmap[4]);
return;
case KeyEvent.VK_F5:
write(fmap[5]);
return;
case KeyEvent.VK_F6:
write(fmap[6]);
return;
case KeyEvent.VK_F7:
write(fmap[7]);
return;
case KeyEvent.VK_F8:
write(fmap[8]);
return;
case KeyEvent.VK_F9:
write(fmap[9]);
return;
case KeyEvent.VK_F10:
write(fmap[10]);
return;
case KeyEvent.VK_F11:
write(fmap[11]);
return;
case KeyEvent.VK_F12:
write(fmap[12]);
return;
case KeyEvent.VK_UP:
write(KeyUp);
return;
case KeyEvent.VK_DOWN:
write(KeyDown);
return;
case KeyEvent.VK_LEFT:
write(KeyLeft);
return;
case KeyEvent.VK_RIGHT:
write(KeyRight);
return;
case KeyEvent.VK_PAGE_DOWN:
write(NextScn[xind]);
return;
case KeyEvent.VK_PAGE_UP:
write(PrevScn[xind]);
return;
case KeyEvent.VK_INSERT:
write(Insert[xind]);
return;
case KeyEvent.VK_HOME:
if (vms) write(""String_Node_Str"" + (char)8);
 else write(KeyHome[xind]);
return;
case KeyEvent.VK_END:
if (vms) write(""String_Node_Str"" + (char)5);
 else write(KeyEnd[xind]);
return;
case KeyEvent.VK_NUM_LOCK:
if (vms && control) if (pressedKey != keyCode) {
pressedKey=keyCode;
write(PF1);
}
 else pressedKey=' ';
if (!control) numlock=!numlock;
return;
case KeyEvent.VK_CAPS_LOCK:
capslock=!capslock;
return;
default :
if (debug > 0) System.out.println(""String_Node_Str"" + evt);
}
if (keyChar == 0) return;
if (shift && (keyChar == '\t')) write(KeyBacktab);
 else if (alt) write(""String_Node_Str"" + ((char)(keyChar | 0x80)));
 else if (capslock) write((""String_Node_Str"" + keyChar).toUpperCase());
 else write(""String_Node_Str"" + keyChar);
}",0.9964167585446528
143962,"private <T>List<DataInstance<Vector>> shuffledInstances(Map<DataInstance<Vector>,Map<Label,T>> map){
  List<DataInstance<Vector>> instances=new ArrayList<>(map.keySet());
  Collections.shuffle(instances);
  return instances;
}","private <T>List<DataInstance<Vector>> shuffledInstances(Map<DataInstance<Vector>,Map<Label,T>> map){
  List<DataInstance<Vector>> instances=new ArrayList<>(map.keySet());
  Collections.shuffle(instances,new Random(9999));
  return instances;
}",0.9637526652452024
143963,"private void runExperiment(String methodName,boolean detailedLog){
  Integrator integrator;
  int experimentRepetitions=1;
  Matcher patternMatcher=Pattern.compile(""String_Node_Str"").matcher(methodName);
  if (patternMatcher.find()) {
    methodName=patternMatcher.group(1);
    if (patternMatcher.group(2) != null)     experimentRepetitions=Integer.parseInt(patternMatcher.group(2));
  }
  List<Results> results=new ArrayList<>();
  for (int repetition=0; repetition < experimentRepetitions; repetition++) {
    if (methodName.equals(""String_Node_Str"")) {
      integrator=new MajorityVoteIntegrator.Builder(predictedData).build();
    }
 else     if (methodName.startsWith(""String_Node_Str"")) {
      String[] methodNameParts=methodName.split(""String_Node_Str"");
      if (methodNameParts.length == 1)       integrator=new AgreementIntegrator.Builder(predictedData).highestOrder(-1).build();
 else       integrator=new AgreementIntegrator.Builder(predictedData).highestOrder(Integer.parseInt(methodNameParts[1])).build();
    }
 else     if (methodName.startsWith(""String_Node_Str"")) {
      String[] methodNameParts=methodName.split(""String_Node_Str"");
      if (methodNameParts.length == 1)       integrator=new BayesianIntegrator.Builder(predictedData).build();
 else       integrator=new BayesianIntegrator.Builder(predictedData).numberOfBurnInSamples(Integer.parseInt(methodNameParts[1])).numberOfThinningSamples(Integer.parseInt(methodNameParts[2])).numberOfSamples(Integer.parseInt(methodNameParts[3])).build();
    }
 else     if (methodName.startsWith(""String_Node_Str"")) {
      String[] methodNameParts=methodName.split(""String_Node_Str"");
      if (methodNameParts.length == 1)       integrator=new CoupledBayesianIntegrator.Builder(predictedData).build();
 else       integrator=new CoupledBayesianIntegrator.Builder(predictedData).numberOfBurnInSamples(Integer.parseInt(methodNameParts[1])).numberOfThinningSamples(Integer.parseInt(methodNameParts[2])).numberOfSamples(Integer.parseInt(methodNameParts[3])).build();
    }
 else     if (methodName.startsWith(""String_Node_Str"")) {
      String[] methodNameParts=methodName.split(""String_Node_Str"");
      if (methodNameParts.length == 1)       integrator=new HierarchicalCoupledBayesianIntegrator.Builder(predictedData).build();
 else       integrator=new HierarchicalCoupledBayesianIntegrator.Builder(predictedData).numberOfBurnInSamples(Integer.parseInt(methodNameParts[1])).numberOfThinningSamples(Integer.parseInt(methodNameParts[2])).numberOfSamples(Integer.parseInt(methodNameParts[3])).build();
    }
 else     if (methodName.startsWith(""String_Node_Str"")) {
      integrator=new TuffyLogicIntegrator.Builder(predictedData).addConstraints(constraints).workingDirectory(""String_Node_Str"").logProgress(detailedLog).build();
    }
 else     if (methodName.startsWith(""String_Node_Str"")) {
      String[] methodNameParts=methodName.split(""String_Node_Str"");
      if (methodNameParts.length == 1) {
        integrator=new LogicIntegrator.Builder(predictedData).addConstraints(constraints).logProgress(detailedLog).build();
      }
 else {
        boolean sampleEstimates=methodNameParts[methodNameParts.length - 1].equals(""String_Node_Str"");
        integrator=new LogicIntegrator.Builder(predictedData).addConstraints(constraints).sampleErrorRatesEstimates(sampleEstimates).logProgress(detailedLog).build();
      }
    }
 else {
      throw new IllegalArgumentException(""String_Node_Str"" + methodName + ""String_Node_Str"");
    }
    Integrator.ErrorRates errorRates=integrator.errorRates();
    Integrator.Data<Integrator.Data.PredictedInstance> integratedData=integrator.integratedData();
    Results result=evaluate(errorRates,integratedData,methodName);
    results.add(result);
    if (detailedLog)     logResults(result,true);
  }
  logResults(new Results.Statistics(results),detailedLog);
}","private void runExperiment(String methodName,boolean detailedLog){
  Integrator integrator;
  int experimentRepetitions=2;
  Matcher patternMatcher=Pattern.compile(""String_Node_Str"").matcher(methodName);
  if (patternMatcher.find()) {
    methodName=patternMatcher.group(1);
    if (patternMatcher.group(2) != null)     experimentRepetitions=Integer.parseInt(patternMatcher.group(2));
  }
  List<Results> results=new ArrayList<>();
  for (int repetition=0; repetition < experimentRepetitions; repetition++) {
    if (methodName.equals(""String_Node_Str"")) {
      integrator=new MajorityVoteIntegrator.Builder(predictedData).build();
    }
 else     if (methodName.startsWith(""String_Node_Str"")) {
      String[] methodNameParts=methodName.split(""String_Node_Str"");
      if (methodNameParts.length == 1)       integrator=new AgreementIntegrator.Builder(predictedData).highestOrder(-1).build();
 else       integrator=new AgreementIntegrator.Builder(predictedData).highestOrder(Integer.parseInt(methodNameParts[1])).build();
    }
 else     if (methodName.startsWith(""String_Node_Str"")) {
      String[] methodNameParts=methodName.split(""String_Node_Str"");
      if (methodNameParts.length == 1)       integrator=new BayesianIntegrator.Builder(predictedData).build();
 else       integrator=new BayesianIntegrator.Builder(predictedData).numberOfBurnInSamples(Integer.parseInt(methodNameParts[1])).numberOfThinningSamples(Integer.parseInt(methodNameParts[2])).numberOfSamples(Integer.parseInt(methodNameParts[3])).build();
    }
 else     if (methodName.startsWith(""String_Node_Str"")) {
      String[] methodNameParts=methodName.split(""String_Node_Str"");
      if (methodNameParts.length == 1)       integrator=new CoupledBayesianIntegrator.Builder(predictedData).build();
 else       integrator=new CoupledBayesianIntegrator.Builder(predictedData).numberOfBurnInSamples(Integer.parseInt(methodNameParts[1])).numberOfThinningSamples(Integer.parseInt(methodNameParts[2])).numberOfSamples(Integer.parseInt(methodNameParts[3])).build();
    }
 else     if (methodName.startsWith(""String_Node_Str"")) {
      String[] methodNameParts=methodName.split(""String_Node_Str"");
      if (methodNameParts.length == 1)       integrator=new HierarchicalCoupledBayesianIntegrator.Builder(predictedData).build();
 else       integrator=new HierarchicalCoupledBayesianIntegrator.Builder(predictedData).numberOfBurnInSamples(Integer.parseInt(methodNameParts[1])).numberOfThinningSamples(Integer.parseInt(methodNameParts[2])).numberOfSamples(Integer.parseInt(methodNameParts[3])).build();
    }
 else     if (methodName.startsWith(""String_Node_Str"")) {
      integrator=new TuffyLogicIntegrator.Builder(predictedData).addConstraints(constraints).workingDirectory(""String_Node_Str"").logProgress(detailedLog).build();
    }
 else     if (methodName.startsWith(""String_Node_Str"")) {
      String[] methodNameParts=methodName.split(""String_Node_Str"");
      if (methodNameParts.length == 1) {
        integrator=new LogicIntegrator.Builder(predictedData).addConstraints(constraints).logProgress(detailedLog).build();
      }
 else {
        boolean sampleEstimates=methodNameParts[methodNameParts.length - 1].equals(""String_Node_Str"");
        integrator=new LogicIntegrator.Builder(predictedData).addConstraints(constraints).sampleErrorRatesEstimates(sampleEstimates).logProgress(detailedLog).build();
      }
    }
 else {
      throw new IllegalArgumentException(""String_Node_Str"" + methodName + ""String_Node_Str"");
    }
    Integrator.ErrorRates errorRates=integrator.errorRates();
    Integrator.Data<Integrator.Data.PredictedInstance> integratedData=integrator.integratedData();
    Results result=evaluate(errorRates,integratedData,methodName);
    results.add(result);
    if (detailedLog)     logResults(result,true);
  }
  logResults(new Results.Statistics(results),detailedLog);
}",0.9997413347128816
143964,"public static void main(String[] args){
  boolean softPredictions=!args[1].equals(""String_Node_Str"");
  InputData data=null;
  Set<Constraint> constraints=new HashSet<>();
switch (args[2]) {
case ""String_Node_Str"":
    double threshold=Double.parseDouble(args[4]);
  constraints=Integrator.loadConstraints(args[3] + ""String_Node_Str"");
DataSets.NELLData nellData=DataSets.importNELLData(args[3]);
BiMap<String,Integer> instanceIds=HashBiMap.create();
BiMap<String,Integer> componentIds=HashBiMap.create();
List<Integrator.Data.ObservedInstance> observedInstances=new ArrayList<>();
List<Integrator.Data.PredictedInstance> predictedInstances=new ArrayList<>();
for (DataSets.NELLData.Instance instance : nellData) {
int instanceID=instanceIds.computeIfAbsent(instance.nounPhrase(),key -> instanceIds.size());
int componentID=componentIds.computeIfAbsent(instance.component(),key -> componentIds.size());
if (instance.component().equals(""String_Node_Str"")) observedInstances.add(new Integrator.Data.ObservedInstance(instanceID,new Label(instance.category()),instance.probability() >= threshold));
 else predictedInstances.add(new Integrator.Data.PredictedInstance(instanceID,new Label(instance.category()),componentID,softPredictions ? instance.probability() : (instance.probability() >= 0.5 ? 1.0 : 0.0)));
}
data=new InputData(new Integrator.Data<>(predictedInstances),new Integrator.Data<>(observedInstances),instanceIds,componentIds);
break;
case ""String_Node_Str"":
data=parseLabeledDataFromCSVFile(new File(args[3]),""String_Node_Str"",softPredictions ? null : new double[]{Double.parseDouble(args[4])});
break;
}
if (data != null) {
IntegratorExperiment experiment=new IntegratorExperiment(data.observedData,data.predictedData,constraints,data.instanceIds,data.componentIds);
String[] methodNames=args[0].split(""String_Node_Str"");
if (methodNames.length > 1) logger.info(""String_Node_Str"" + ""String_Node_Str"" + ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str"");
for (String methodName : methodNames) experiment.runExperiment(methodName,methodNames.length == 1);
}
}","public static void main(String[] args){
  boolean softPredictions=!args[1].equals(""String_Node_Str"");
  InputData data=null;
  Set<Constraint> constraints=new HashSet<>();
switch (args[2]) {
case ""String_Node_Str"":
    double threshold=Double.parseDouble(args[4]);
  constraints=Integrator.loadConstraints(args[3] + ""String_Node_Str"");
DataSets.NELLData nellData=DataSets.importNELLData(args[3]);
BiMap<String,Integer> instanceIds=HashBiMap.create();
BiMap<String,Integer> componentIds=HashBiMap.create();
List<Integrator.Data.ObservedInstance> observedInstances=new ArrayList<>();
List<Integrator.Data.PredictedInstance> predictedInstances=new ArrayList<>();
for (DataSets.NELLData.Instance instance : nellData) {
int instanceID=instanceIds.computeIfAbsent(instance.nounPhrase(),key -> instanceIds.size());
if (instance.component().equals(""String_Node_Str"")) observedInstances.add(new Integrator.Data.ObservedInstance(instanceID,new Label(instance.category()),instance.probability() >= threshold));
 else predictedInstances.add(new Integrator.Data.PredictedInstance(instanceID,new Label(instance.category()),componentIds.computeIfAbsent(instance.component(),key -> componentIds.size()),softPredictions ? instance.probability() : (instance.probability() >= 0.5 ? 1.0 : 0.0)));
}
data=new InputData(new Integrator.Data<>(predictedInstances),new Integrator.Data<>(observedInstances),instanceIds,componentIds);
break;
case ""String_Node_Str"":
data=parseLabeledDataFromCSVFile(new File(args[3]),""String_Node_Str"",softPredictions ? null : new double[]{Double.parseDouble(args[4])});
break;
}
if (data != null) {
IntegratorExperiment experiment=new IntegratorExperiment(data.observedData,data.predictedData,constraints,data.instanceIds,data.componentIds);
String[] methodNames=args[0].split(""String_Node_Str"");
if (methodNames.length > 1) logger.info(""String_Node_Str"" + ""String_Node_Str"" + ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str"");
for (String methodName : methodNames) experiment.runExperiment(methodName,methodNames.length == 1);
}
}",0.8477785870356883
143965,"private Results evaluate(Integrator.ErrorRates estimatedErrorRates,Integrator.Data<Integrator.Data.PredictedInstance> integratedData,String methodName){
  List<Integrator.ErrorRates.Instance> estimatedErrorRatesList=estimatedErrorRates.stream().sorted((i1,i2) -> Integer.compare(i1.functionId(),i2.functionId())).sorted((i1,i2) -> i1.label().name().compareTo(i2.label().name())).collect(Collectors.toList());
  Map<Label,Map<Integer,Double>> errorRatesMap=new HashMap<>();
  Map<Label,Map<Integer,Double>> sampleErrorRatesMap=new HashMap<>();
  double mseError=0.0;
  double madError=0.0;
  double mseErrorWeighted=0.0;
  double madErrorWeighted=0.0;
  for (  Integrator.ErrorRates.Instance instance : estimatedErrorRatesList) {
    if (!errorRatesMap.containsKey(instance.label())) {
      errorRatesMap.put(instance.label(),new HashMap<>());
      sampleErrorRatesMap.put(instance.label(),new HashMap<>());
    }
    errorRatesMap.get(instance.label()).put(instance.functionId(),instance.value());
    Optional<Integrator.ErrorRates.Instance> sampleErrorRateResultInstance=sampleErrorRates.stream().filter(i -> i.label().equals(instance.label()) && i.functionId() == instance.functionId()).findFirst();
    double sampleErrorRate=0.0;
    if (sampleErrorRateResultInstance.isPresent())     sampleErrorRate=sampleErrorRateResultInstance.get().value();
    sampleErrorRatesMap.get(instance.label()).put(instance.functionId(),sampleErrorRate);
    double seError=(instance.value() - sampleErrorRate) * (instance.value() - sampleErrorRate);
    double adError=Math.abs(instance.value() - sampleErrorRate);
    mseError+=seError;
    madError+=adError;
    mseErrorWeighted+=seError / numberOfInstances.get(instance.label());
    madErrorWeighted+=adError / numberOfInstances.get(instance.label());
  }
  mseError/=estimatedErrorRatesList.size();
  madError/=estimatedErrorRatesList.size();
  mseErrorWeighted/=labels.size();
  madErrorWeighted/=labels.size();
  Map<Integer,Map<Label,Boolean>> estimatedLabelsMap=new HashMap<>();
  Map<Integer,Map<Label,Boolean>> trueLabelsMap=new HashMap<>();
  double[] madErrorRank={0.0};
  double[] madErrorRankWeighted={0.0};
  double[] aucLabel={0.0};
  double[] madLabel={0.0};
  double[] madHardLabel={0.0};
  double[] aucLabelWeighted={0.0};
  double[] madLabelWeighted={0.0};
  double[] madHardLabelWeighted={0.0};
  integratedData.stream().map(Integrator.Data.PredictedInstance::label).distinct().forEach(label -> {
    List<Integer> rankedByErrorRate=CollectionUtilities.sortByValue(errorRatesMap.get(label)).entrySet().stream().map(Map.Entry::getKey).collect(Collectors.toList());
    List<Integer> rankedBySampleErrorRate=CollectionUtilities.sortByValue(sampleErrorRatesMap.get(label)).entrySet().stream().map(Map.Entry::getKey).collect(Collectors.toList());
    for (int i=0; i < rankedByErrorRate.size(); i++) {
      double adErrorRank=Math.abs(rankedByErrorRate.get(i) - rankedBySampleErrorRate.get(i));
      madErrorRank[0]+=adErrorRank;
      madErrorRankWeighted[0]+=adErrorRank * numberOfInstances.get(label);
    }
    double[] adLabel={0};
    double[] adHardLabel={0};
    int[] numberOfSamples={0};
    Map<Integer,Boolean> observedInstances=new HashMap<>();
    observedData.stream().filter(i -> i.label().equals(label)).forEach(instance -> observedInstances.put(instance.id(),instance.value()));
    List<Boolean> observedLabels=new ArrayList<>();
    List<Double> predictions=new ArrayList<>();
    integratedData.stream().filter(i -> i.label().equals(label) && observedInstances.containsKey(i.id())).sorted((i1,i2) -> i1.value() - i2.value() == 0.0 ? 0 : i1.value() - i2.value() > 0.0 ? -1 : 1).forEach(i -> {
      observedLabels.add(observedInstances.get(i.id()));
      predictions.add(i.value());
    }
);
    double areaUnderTheCurve=PrecisionRecall.areaUnderTheCurve(observedLabels,predictions);
    aucLabel[0]+=areaUnderTheCurve;
    aucLabelWeighted[0]+=areaUnderTheCurve / numberOfInstances.get(label);
    integratedData.stream().filter(i -> i.label().equals(label) && observedInstances.containsKey(i.id())).forEach(instance -> {
      adLabel[0]+=Math.abs(instance.value() - (observedInstances.get(instance.id()) ? 1.0 : 0.0));
      if ((instance.value() >= 0.5) != observedInstances.get(instance.id()))       adHardLabel[0]++;
      numberOfSamples[0]++;
      if (!estimatedLabelsMap.containsKey(instance.id()))       estimatedLabelsMap.put(instance.id(),new HashMap<>());
      estimatedLabelsMap.get(instance.id()).put(label,instance.value() >= 0.5);
      if (!trueLabelsMap.containsKey(instance.id()))       trueLabelsMap.put(instance.id(),new HashMap<>());
      trueLabelsMap.get(instance.id()).put(label,observedInstances.get(instance.id()));
    }
);
    double accuracyLabel=adLabel[0] / (double)numberOfSamples[0];
    double accuracyHardLabel=adHardLabel[0] / (double)numberOfSamples[0];
    madLabel[0]+=accuracyLabel;
    madHardLabel[0]+=accuracyHardLabel;
    madLabelWeighted[0]+=accuracyLabel / numberOfInstances.get(label);
    madHardLabelWeighted[0]+=accuracyHardLabel / numberOfInstances.get(label);
  }
);
  madErrorRank[0]/=labels.size();
  madErrorRankWeighted[0]/=numberOfInstances.values().stream().mapToInt(n -> n).sum();
  aucLabel[0]/=labels.size();
  madLabel[0]/=labels.size();
  madHardLabel[0]/=labels.size();
  aucLabelWeighted[0]/=labels.size();
  madLabelWeighted[0]/=labels.size();
  madHardLabelWeighted[0]/=labels.size();
  return new Results(methodName,errorRatesMap,sampleErrorRatesMap,madErrorRank[0],mseError,madError,madErrorRankWeighted[0],mseErrorWeighted,madErrorWeighted,aucLabel[0],madLabel[0],madHardLabel[0],aucLabelWeighted[0],madLabelWeighted[0],madHardLabelWeighted[0]);
}","private Results evaluate(Integrator.ErrorRates estimatedErrorRates,Integrator.Data<Integrator.Data.PredictedInstance> integratedData,String methodName){
  List<Integrator.ErrorRates.Instance> estimatedErrorRatesList=estimatedErrorRates.stream().sorted((i1,i2) -> Integer.compare(i1.functionId(),i2.functionId())).sorted((i1,i2) -> i1.label().name().compareTo(i2.label().name())).collect(Collectors.toList());
  Map<Label,Map<Integer,Double>> errorRatesMap=new HashMap<>();
  Map<Label,Map<Integer,Double>> sampleErrorRatesMap=new HashMap<>();
  double mseError=0.0;
  double madError=0.0;
  double mseErrorWeighted=0.0;
  double madErrorWeighted=0.0;
  for (  Integrator.ErrorRates.Instance instance : estimatedErrorRatesList) {
    if (!errorRatesMap.containsKey(instance.label())) {
      errorRatesMap.put(instance.label(),new HashMap<>());
      sampleErrorRatesMap.put(instance.label(),new HashMap<>());
    }
    errorRatesMap.get(instance.label()).put(instance.functionId(),instance.value());
    Optional<Integrator.ErrorRates.Instance> sampleErrorRateResultInstance=sampleErrorRates.stream().filter(i -> i.label().equals(instance.label()) && i.functionId() == instance.functionId()).findFirst();
    double sampleErrorRate=0.0;
    if (sampleErrorRateResultInstance.isPresent())     sampleErrorRate=sampleErrorRateResultInstance.get().value();
    sampleErrorRatesMap.get(instance.label()).put(instance.functionId(),sampleErrorRate);
    double seError=(instance.value() - sampleErrorRate) * (instance.value() - sampleErrorRate);
    double adError=Math.abs(instance.value() - sampleErrorRate);
    mseError+=seError;
    madError+=adError;
    mseErrorWeighted+=seError / numberOfInstances.get(instance.label());
    madErrorWeighted+=adError / numberOfInstances.get(instance.label());
  }
  mseError/=estimatedErrorRatesList.size();
  madError/=estimatedErrorRatesList.size();
  mseErrorWeighted/=labels.size();
  madErrorWeighted/=labels.size();
  Map<Integer,Map<Label,Boolean>> estimatedLabelsMap=new HashMap<>();
  Map<Integer,Map<Label,Boolean>> trueLabelsMap=new HashMap<>();
  double[] madErrorRank={0.0};
  double[] madErrorRankWeighted={0.0};
  double[] aucLabel={0.0};
  double[] madLabel={0.0};
  double[] madHardLabel={0.0};
  double[] aucLabelWeighted={0.0};
  double[] madLabelWeighted={0.0};
  double[] madHardLabelWeighted={0.0};
  integratedData.stream().map(Integrator.Data.PredictedInstance::label).distinct().forEach(label -> {
    List<Integer> rankedByErrorRate=CollectionUtilities.sortByValue(errorRatesMap.get(label)).entrySet().stream().map(Map.Entry::getKey).collect(Collectors.toList());
    List<Integer> rankedBySampleErrorRate=CollectionUtilities.sortByValue(sampleErrorRatesMap.get(label)).entrySet().stream().map(Map.Entry::getKey).collect(Collectors.toList());
    int[] ranks=new int[rankedByErrorRate.size()];
    int[] sampleRanks=new int[rankedByErrorRate.size()];
    for (int i=0; i < rankedByErrorRate.size(); i++) {
      ranks[rankedByErrorRate.get(i)]=i;
      sampleRanks[rankedBySampleErrorRate.get(i)]=i;
    }
    double tempMadErrorRank=0.0;
    double tempMadErrorRankWeighted=0.0;
    for (int i=0; i < rankedByErrorRate.size(); i++) {
      double adErrorRank=Math.abs(ranks[i] - sampleRanks[i]);
      tempMadErrorRank+=adErrorRank;
      tempMadErrorRankWeighted+=adErrorRank * numberOfInstances.get(label);
    }
    madErrorRank[0]+=tempMadErrorRank / rankedByErrorRate.size();
    madErrorRankWeighted[0]+=tempMadErrorRankWeighted / rankedByErrorRate.size();
    double[] adLabel={0};
    double[] adHardLabel={0};
    int[] numberOfSamples={0};
    Map<Integer,Boolean> observedInstances=new HashMap<>();
    observedData.stream().filter(i -> i.label().equals(label)).forEach(instance -> observedInstances.put(instance.id(),instance.value()));
    List<Boolean> observedLabels=new ArrayList<>();
    List<Double> predictions=new ArrayList<>();
    integratedData.stream().filter(i -> i.label().equals(label) && observedInstances.containsKey(i.id())).sorted((i1,i2) -> i1.value() - i2.value() == 0.0 ? 0 : i1.value() - i2.value() > 0.0 ? -1 : 1).forEach(i -> {
      observedLabels.add(observedInstances.get(i.id()));
      predictions.add(i.value());
    }
);
    double areaUnderTheCurve=PrecisionRecall.areaUnderTheCurve(observedLabels,predictions);
    aucLabel[0]+=areaUnderTheCurve;
    aucLabelWeighted[0]+=areaUnderTheCurve / numberOfInstances.get(label);
    integratedData.stream().filter(i -> i.label().equals(label) && observedInstances.containsKey(i.id())).forEach(instance -> {
      adLabel[0]+=Math.abs(instance.value() - (observedInstances.get(instance.id()) ? 1.0 : 0.0));
      if ((instance.value() >= 0.5) != observedInstances.get(instance.id()))       adHardLabel[0]++;
      numberOfSamples[0]++;
      if (!estimatedLabelsMap.containsKey(instance.id()))       estimatedLabelsMap.put(instance.id(),new HashMap<>());
      estimatedLabelsMap.get(instance.id()).put(label,instance.value() >= 0.5);
      if (!trueLabelsMap.containsKey(instance.id()))       trueLabelsMap.put(instance.id(),new HashMap<>());
      trueLabelsMap.get(instance.id()).put(label,observedInstances.get(instance.id()));
    }
);
    double accuracyLabel=adLabel[0] / (double)numberOfSamples[0];
    double accuracyHardLabel=adHardLabel[0] / (double)numberOfSamples[0];
    madLabel[0]+=accuracyLabel;
    madHardLabel[0]+=accuracyHardLabel;
    madLabelWeighted[0]+=accuracyLabel / numberOfInstances.get(label);
    madHardLabelWeighted[0]+=accuracyHardLabel / numberOfInstances.get(label);
  }
);
  madErrorRank[0]/=labels.size();
  madErrorRankWeighted[0]/=numberOfInstances.values().stream().mapToInt(n -> n).sum();
  aucLabel[0]/=labels.size();
  madLabel[0]/=labels.size();
  madHardLabel[0]/=labels.size();
  aucLabelWeighted[0]/=labels.size();
  madLabelWeighted[0]/=labels.size();
  madHardLabelWeighted[0]/=labels.size();
  return new Results(methodName,errorRatesMap,sampleErrorRatesMap,madErrorRank[0],mseError,madError,madErrorRankWeighted[0],mseErrorWeighted,madErrorWeighted,aucLabel[0],madLabel[0],madHardLabel[0],aucLabelWeighted[0],madLabelWeighted[0],madHardLabelWeighted[0]);
}",0.947820955913344
143966,"public static void main(String[] args){
  int numberOfExperimentRepetitions=2;
  int numberOfExamplesToPickPerIteration=1000000;
  int maximumNumberOfIterations=1000000000;
  boolean includeTitleInResultsPlot=true;
  boolean includeHorizontalAxisLabelInResultsPlot=true;
  boolean includeVerticalAxisLabelInResultsPlot=true;
  boolean includeLegendInResultsPlot=true;
  ScoringFunction[] scoringFunctions=new ScoringFunction[]{new RandomScoringFunction(),new EntropyScoringFunction(),new RandomScoringFunction(true),new EntropyScoringFunction(true),new ExpectedLabelsFixedScoringFunction(true),new ConstraintPropagationScoringFunction(true),new ConstraintPropagationScoringFunction(SurpriseFunction.NEGATIVE_LOGARITHM,true),new ConstraintPropagationScoringFunction(SurpriseFunction.ONE_MINUS_PROBABILITY,true)};
  Set<ResultType> resultTypes=new LinkedHashSet<>();
  resultTypes.add(ResultType.AVERAGE_AUC_FULL_DATA_SET);
  resultTypes.add(ResultType.AVERAGE_AUC_EVALUATION_DATA_SET);
  resultTypes.add(ResultType.NUMBER_OF_EXAMPLES_PICKED);
  boolean useLogicIntegrator=args[0].equals(""String_Node_Str"");
  boolean retrainClassifiers=args[1].equals(""String_Node_Str"");
  double negativeToPositiveTrainingExamplesRatio=1;
  ExamplePickingMethod examplePickingMethod=ExamplePickingMethod.PSEUDO_SEQUENTIAL;
  String experiment=args[2];
  String workingDirectory;
  String cplFeatureMapDirectory;
  String hostname=execReadToString(""String_Node_Str"");
switch (hostname) {
case ""String_Node_Str"":
    workingDirectory=""String_Node_Str"";
  cplFeatureMapDirectory=""String_Node_Str"";
break;
case ""String_Node_Str"":
case ""String_Node_Str"":
case ""String_Node_Str"":
workingDirectory=""String_Node_Str"";
cplFeatureMapDirectory=""String_Node_Str"";
break;
default :
throw new IllegalStateException(""String_Node_Str"" + hostname + ""String_Node_Str"");
}
ImportedDataSet dataSet;
Map<ScoringFunction,List<ExperimentResults>> results;
logger.info(""String_Node_Str"" + experiment + ""String_Node_Str"");
workingDirectory+=""String_Node_Str"" + experiment + ""String_Node_Str"";
numberOfExperimentRepetitions=10;
switch (experiment) {
case ""String_Node_Str"":
case ""String_Node_Str"":
case ""String_Node_Str"":
numberOfExamplesToPickPerIteration=1000;
maximumNumberOfIterations=1000;
dataSet=importNELLDataSet(cplFeatureMapDirectory,workingDirectory,negativeToPositiveTrainingExamplesRatio,0,0);
break;
case ""String_Node_Str"":
numberOfExamplesToPickPerIteration=1;
maximumNumberOfIterations=1000;
dataSet=importISOLETDataSet(workingDirectory,negativeToPositiveTrainingExamplesRatio,0.0,0.0);
break;
case ""String_Node_Str"":
numberOfExamplesToPickPerIteration=50;
maximumNumberOfIterations=1000;
dataSet=importLIBSVMDataSet(workingDirectory,true,negativeToPositiveTrainingExamplesRatio,0.0,0.0);
break;
case ""String_Node_Str"":
numberOfExamplesToPickPerIteration=1000;
maximumNumberOfIterations=100000;
dataSet=importLIBSVMDataSet(workingDirectory,true,negativeToPositiveTrainingExamplesRatio,0.0,0.0);
break;
case ""String_Node_Str"":
numberOfExamplesToPickPerIteration=100;
maximumNumberOfIterations=100000;
dataSet=importLIBSVMDataSet(workingDirectory,false,negativeToPositiveTrainingExamplesRatio,0.0,0.0);
break;
case ""String_Node_Str"":
numberOfExamplesToPickPerIteration=1000;
maximumNumberOfIterations=100000;
dataSet=importISOLETDataSet(workingDirectory,negativeToPositiveTrainingExamplesRatio,0.0,0.0);
break;
case ""String_Node_Str"":
numberOfExamplesToPickPerIteration=100;
maximumNumberOfIterations=2000;
dataSet=importLIBSVMDataSet(workingDirectory,false,negativeToPositiveTrainingExamplesRatio,0.0,0.0);
break;
case ""String_Node_Str"":
numberOfExamplesToPickPerIteration=100;
maximumNumberOfIterations=100000;
dataSet=importLIBSVMDataSet(workingDirectory,false,negativeToPositiveTrainingExamplesRatio,0.0,0.0);
break;
case ""String_Node_Str"":
numberOfExamplesToPickPerIteration=10;
maximumNumberOfIterations=100000;
dataSet=importLIBSVMDataSet(workingDirectory,false,negativeToPositiveTrainingExamplesRatio,0.0,0.0);
break;
case ""String_Node_Str"":
numberOfExamplesToPickPerIteration=1000;
maximumNumberOfIterations=100000;
dataSet=importLIBSVMDataSet(workingDirectory,false,negativeToPositiveTrainingExamplesRatio,0.0,0.0);
break;
case ""String_Node_Str"":
numberOfExamplesToPickPerIteration=1000;
maximumNumberOfIterations=100000;
dataSet=importLIBSVMDataSet(workingDirectory,false,negativeToPositiveTrainingExamplesRatio,0.0,0.0);
break;
case ""String_Node_Str"":
numberOfExamplesToPickPerIteration=1000;
maximumNumberOfIterations=10000;
dataSet=importLIBSVMDataSet(workingDirectory,false,negativeToPositiveTrainingExamplesRatio,0.0,0.0);
break;
case ""String_Node_Str"":
numberOfExamplesToPickPerIteration=1;
maximumNumberOfIterations=1000;
dataSet=importLIBSVMDataSet(workingDirectory,false,negativeToPositiveTrainingExamplesRatio,0.0,0.0);
break;
case ""String_Node_Str"":
numberOfExamplesToPickPerIteration=10;
maximumNumberOfIterations=10000000;
dataSet=importLIBSVMDataSet(workingDirectory,false,negativeToPositiveTrainingExamplesRatio,0.0,0.0);
break;
case ""String_Node_Str"":
numberOfExamplesToPickPerIteration=10;
maximumNumberOfIterations=1000;
dataSet=importLIBSVMDataSet(workingDirectory,false,negativeToPositiveTrainingExamplesRatio,0.0,0.0);
break;
case ""String_Node_Str"":
numberOfExamplesToPickPerIteration=10000;
maximumNumberOfIterations=100000;
dataSet=importLIBSVMDataSet(workingDirectory,true,negativeToPositiveTrainingExamplesRatio,0.0,0.0);
break;
case ""String_Node_Str"":
numberOfExamplesToPickPerIteration=100;
maximumNumberOfIterations=1000;
dataSet=importLIBSVMDataSet(workingDirectory,false,negativeToPositiveTrainingExamplesRatio,0.0,0.0);
break;
case ""String_Node_Str"":
numberOfExamplesToPickPerIteration=10000;
maximumNumberOfIterations=1000000;
dataSet=importLIBSVMDataSet(workingDirectory,true,negativeToPositiveTrainingExamplesRatio,0.0,0.0);
break;
case ""String_Node_Str"":
numberOfExamplesToPickPerIteration=10000;
maximumNumberOfIterations=1000000;
dataSet=importLIBSVMDataSet(workingDirectory,true,negativeToPositiveTrainingExamplesRatio,0.0,0.0);
break;
default :
throw new IllegalStateException(""String_Node_Str"");
}
String resultsDirectoryName;
if (retrainClassifiers && useLogicIntegrator) resultsDirectoryName=""String_Node_Str"" + examplePickingMethod.name() + ""String_Node_Str"";
 else if (retrainClassifiers) resultsDirectoryName=""String_Node_Str"" + examplePickingMethod.name() + ""String_Node_Str"";
 else if (useLogicIntegrator) resultsDirectoryName=""String_Node_Str"" + examplePickingMethod.name() + ""String_Node_Str"";
 else resultsDirectoryName=""String_Node_Str"" + examplePickingMethod.name() + ""String_Node_Str"";
dataSet.exportStatistics(workingDirectory + ""String_Node_Str"");
results=runExperiments(numberOfExperimentRepetitions,numberOfExamplesToPickPerIteration,maximumNumberOfIterations,scoringFunctions,examplePickingMethod,useLogicIntegrator,retrainClassifiers,dataSet,resultTypes);
ConstrainedLearningExperiment.exportResults(numberOfExperimentRepetitions,numberOfExamplesToPickPerIteration,maximumNumberOfIterations,results,workingDirectory + resultsDirectoryName,resultTypes,includeTitleInResultsPlot,includeHorizontalAxisLabelInResultsPlot,includeVerticalAxisLabelInResultsPlot,includeLegendInResultsPlot);
logger.info(""String_Node_Str"");
}","public static void main(String[] args){
  int numberOfExperimentRepetitions=2;
  int numberOfExamplesToPickPerIteration=1000000;
  int maximumNumberOfIterations=1000000000;
  boolean includeTitleInResultsPlot=true;
  boolean includeHorizontalAxisLabelInResultsPlot=true;
  boolean includeVerticalAxisLabelInResultsPlot=true;
  boolean includeLegendInResultsPlot=true;
  ScoringFunction[] scoringFunctions=new ScoringFunction[]{new RandomScoringFunction(),new EntropyScoringFunction(),new RandomScoringFunction(true),new EntropyScoringFunction(true),new ExpectedLabelsFixedScoringFunction(true),new ConstraintPropagationScoringFunction(true),new ConstraintPropagationScoringFunction(SurpriseFunction.NEGATIVE_LOGARITHM,true),new ConstraintPropagationScoringFunction(SurpriseFunction.ONE_MINUS_PROBABILITY,true)};
  Set<ResultType> resultTypes=new LinkedHashSet<>();
  resultTypes.add(ResultType.AVERAGE_AUC_FULL_DATA_SET);
  resultTypes.add(ResultType.AVERAGE_AUC_EVALUATION_DATA_SET);
  resultTypes.add(ResultType.NUMBER_OF_EXAMPLES_PICKED);
  boolean useLogicIntegrator=args[0].equals(""String_Node_Str"");
  boolean retrainClassifiers=args[1].equals(""String_Node_Str"");
  double negativeToPositiveTrainingExamplesRatio=1;
  ExamplePickingMethod examplePickingMethod=ExamplePickingMethod.PSEUDO_SEQUENTIAL;
  String experiment=args[2].replace(""String_Node_Str"",""String_Node_Str"");
  String workingDirectory;
  String cplFeatureMapDirectory;
  String hostname=execReadToString(""String_Node_Str"");
switch (hostname) {
case ""String_Node_Str"":
    workingDirectory=""String_Node_Str"";
  cplFeatureMapDirectory=""String_Node_Str"";
break;
case ""String_Node_Str"":
case ""String_Node_Str"":
case ""String_Node_Str"":
workingDirectory=""String_Node_Str"";
cplFeatureMapDirectory=""String_Node_Str"";
break;
default :
throw new IllegalStateException(""String_Node_Str"" + hostname + ""String_Node_Str"");
}
ImportedDataSet dataSet;
Map<ScoringFunction,List<ExperimentResults>> results;
logger.info(""String_Node_Str"" + experiment + ""String_Node_Str"");
workingDirectory+=""String_Node_Str"" + experiment + ""String_Node_Str"";
numberOfExperimentRepetitions=10;
switch (experiment) {
case ""String_Node_Str"":
case ""String_Node_Str"":
case ""String_Node_Str"":
numberOfExamplesToPickPerIteration=1000;
maximumNumberOfIterations=1000;
dataSet=importNELLDataSet(cplFeatureMapDirectory,workingDirectory,negativeToPositiveTrainingExamplesRatio,0,0);
break;
case ""String_Node_Str"":
numberOfExamplesToPickPerIteration=1;
maximumNumberOfIterations=1000;
dataSet=importISOLETDataSet(workingDirectory,negativeToPositiveTrainingExamplesRatio,0.0,0.0);
break;
case ""String_Node_Str"":
numberOfExamplesToPickPerIteration=50;
maximumNumberOfIterations=1000;
dataSet=importLIBSVMDataSet(workingDirectory,true,negativeToPositiveTrainingExamplesRatio,0.0,0.0);
break;
case ""String_Node_Str"":
numberOfExamplesToPickPerIteration=1000;
maximumNumberOfIterations=100000;
dataSet=importLIBSVMDataSet(workingDirectory,true,negativeToPositiveTrainingExamplesRatio,0.0,0.0);
break;
case ""String_Node_Str"":
numberOfExamplesToPickPerIteration=100;
maximumNumberOfIterations=100000;
dataSet=importLIBSVMDataSet(workingDirectory,false,negativeToPositiveTrainingExamplesRatio,0.0,0.0);
break;
case ""String_Node_Str"":
numberOfExamplesToPickPerIteration=1000;
maximumNumberOfIterations=100000;
dataSet=importISOLETDataSet(workingDirectory,negativeToPositiveTrainingExamplesRatio,0.0,0.0);
break;
case ""String_Node_Str"":
numberOfExamplesToPickPerIteration=100;
maximumNumberOfIterations=2000;
dataSet=importLIBSVMDataSet(workingDirectory,false,negativeToPositiveTrainingExamplesRatio,0.0,0.0);
break;
case ""String_Node_Str"":
numberOfExamplesToPickPerIteration=100;
maximumNumberOfIterations=100000;
dataSet=importLIBSVMDataSet(workingDirectory,false,negativeToPositiveTrainingExamplesRatio,0.0,0.0);
break;
case ""String_Node_Str"":
numberOfExamplesToPickPerIteration=10;
maximumNumberOfIterations=100000;
dataSet=importLIBSVMDataSet(workingDirectory,false,negativeToPositiveTrainingExamplesRatio,0.0,0.0);
break;
case ""String_Node_Str"":
numberOfExamplesToPickPerIteration=1000;
maximumNumberOfIterations=100000;
dataSet=importLIBSVMDataSet(workingDirectory,false,negativeToPositiveTrainingExamplesRatio,0.0,0.0);
break;
case ""String_Node_Str"":
numberOfExamplesToPickPerIteration=1000;
maximumNumberOfIterations=100000;
dataSet=importLIBSVMDataSet(workingDirectory,false,negativeToPositiveTrainingExamplesRatio,0.0,0.0);
break;
case ""String_Node_Str"":
numberOfExamplesToPickPerIteration=1000;
maximumNumberOfIterations=10000;
dataSet=importLIBSVMDataSet(workingDirectory,false,negativeToPositiveTrainingExamplesRatio,0.0,0.0);
break;
case ""String_Node_Str"":
numberOfExamplesToPickPerIteration=1;
maximumNumberOfIterations=1000;
dataSet=importLIBSVMDataSet(workingDirectory,false,negativeToPositiveTrainingExamplesRatio,0.0,0.0);
break;
case ""String_Node_Str"":
numberOfExamplesToPickPerIteration=10;
maximumNumberOfIterations=10000000;
dataSet=importLIBSVMDataSet(workingDirectory,false,negativeToPositiveTrainingExamplesRatio,0.0,0.0);
break;
case ""String_Node_Str"":
numberOfExamplesToPickPerIteration=10;
maximumNumberOfIterations=1000;
dataSet=importLIBSVMDataSet(workingDirectory,false,negativeToPositiveTrainingExamplesRatio,0.0,0.0);
break;
case ""String_Node_Str"":
numberOfExamplesToPickPerIteration=10000;
maximumNumberOfIterations=100000;
dataSet=importLIBSVMDataSet(workingDirectory,true,negativeToPositiveTrainingExamplesRatio,0.0,0.0);
break;
case ""String_Node_Str"":
numberOfExamplesToPickPerIteration=100;
maximumNumberOfIterations=1000;
dataSet=importLIBSVMDataSet(workingDirectory,false,negativeToPositiveTrainingExamplesRatio,0.0,0.0);
break;
case ""String_Node_Str"":
numberOfExamplesToPickPerIteration=10000;
maximumNumberOfIterations=1000000;
dataSet=importLIBSVMDataSet(workingDirectory,true,negativeToPositiveTrainingExamplesRatio,0.0,0.0);
break;
case ""String_Node_Str"":
numberOfExamplesToPickPerIteration=10000;
maximumNumberOfIterations=1000000;
dataSet=importLIBSVMDataSet(workingDirectory,true,negativeToPositiveTrainingExamplesRatio,0.0,0.0);
break;
default :
throw new IllegalStateException(""String_Node_Str"");
}
String resultsDirectoryName;
if (retrainClassifiers && useLogicIntegrator) resultsDirectoryName=""String_Node_Str"" + examplePickingMethod.name() + ""String_Node_Str"";
 else if (retrainClassifiers) resultsDirectoryName=""String_Node_Str"" + examplePickingMethod.name() + ""String_Node_Str"";
 else if (useLogicIntegrator) resultsDirectoryName=""String_Node_Str"" + examplePickingMethod.name() + ""String_Node_Str"";
 else resultsDirectoryName=""String_Node_Str"" + examplePickingMethod.name() + ""String_Node_Str"";
dataSet.exportStatistics(workingDirectory + ""String_Node_Str"");
results=runExperiments(numberOfExperimentRepetitions,numberOfExamplesToPickPerIteration,maximumNumberOfIterations,scoringFunctions,examplePickingMethod,useLogicIntegrator,retrainClassifiers,dataSet,resultTypes);
ConstrainedLearningExperiment.exportResults(numberOfExperimentRepetitions,numberOfExamplesToPickPerIteration,maximumNumberOfIterations,results,workingDirectory + resultsDirectoryName,resultTypes,includeTitleInResultsPlot,includeHorizontalAxisLabelInResultsPlot,includeVerticalAxisLabelInResultsPlot,includeLegendInResultsPlot);
logger.info(""String_Node_Str"");
}",0.9969095529153218
143967,"public static void main(String[] args){
  int numberOfExperimentRepetitions=2;
  int numberOfExamplesToPickPerIteration=1000000;
  int maximumNumberOfIterations=1000000000;
  boolean includeTitleInResultsPlot=true;
  boolean includeHorizontalAxisLabelInResultsPlot=true;
  boolean includeVerticalAxisLabelInResultsPlot=true;
  boolean includeLegendInResultsPlot=true;
  ScoringFunction[] scoringFunctions=new ScoringFunction[]{new EntropyScoringFunction(),new EntropyScoringFunction(true),new ConstraintPropagationScoringFunction(true),new ConstraintPropagationScoringFunction(SurpriseFunction.NEGATIVE_LOGARITHM,true),new ConstraintPropagationScoringFunction(SurpriseFunction.ONE_MINUS_PROBABILITY,true)};
  Set<ResultType> resultTypes=new LinkedHashSet<>();
  resultTypes.add(ResultType.AUC_1_ITERATIONS_FULL_DATA_SET);
  resultTypes.add(ResultType.AVERAGE_AUC_FULL_DATA_SET);
  resultTypes.add(ResultType.NUMBER_OF_EXAMPLES_PICKED);
  boolean useLogicIntegrator=args[0].equals(""String_Node_Str"");
  boolean retrainClassifiers=args[1].equals(""String_Node_Str"");
  double negativeToPositiveTrainingExamplesRatio=1;
  ExamplePickingMethod examplePickingMethod=ExamplePickingMethod.PSEUDO_SEQUENTIAL;
  String workingDirectory;
  ImportedDataSet dataSet;
  Map<ScoringFunction,List<ExperimentResults>> results;
  logger.info(""String_Node_Str"");
  numberOfExperimentRepetitions=10;
  numberOfExamplesToPickPerIteration=1000;
  maximumNumberOfIterations=100000;
  workingDirectory=""String_Node_Str"";
  dataSet=importLIBSVMDataSet(workingDirectory,false,negativeToPositiveTrainingExamplesRatio,0.0,0.0);
  String resultsDirectoryName;
  if (retrainClassifiers && useLogicIntegrator)   resultsDirectoryName=""String_Node_Str"" + examplePickingMethod.name() + ""String_Node_Str"";
 else   if (retrainClassifiers)   resultsDirectoryName=""String_Node_Str"" + examplePickingMethod.name() + ""String_Node_Str"";
 else   if (useLogicIntegrator)   resultsDirectoryName=""String_Node_Str"" + examplePickingMethod.name() + ""String_Node_Str"";
 else   resultsDirectoryName=""String_Node_Str"" + examplePickingMethod.name() + ""String_Node_Str"";
  dataSet.exportStatistics(workingDirectory + ""String_Node_Str"");
  results=runExperiments(numberOfExperimentRepetitions,numberOfExamplesToPickPerIteration,maximumNumberOfIterations,scoringFunctions,examplePickingMethod,useLogicIntegrator,retrainClassifiers,dataSet,resultTypes);
  ConstrainedLearningExperiment.exportResults(numberOfExperimentRepetitions,numberOfExamplesToPickPerIteration,maximumNumberOfIterations,results,workingDirectory + resultsDirectoryName,resultTypes,includeTitleInResultsPlot,includeHorizontalAxisLabelInResultsPlot,includeVerticalAxisLabelInResultsPlot,includeLegendInResultsPlot);
  logger.info(""String_Node_Str"");
}","public static void main(String[] args){
  int numberOfExperimentRepetitions=2;
  int numberOfExamplesToPickPerIteration=1000000;
  int maximumNumberOfIterations=1000000000;
  boolean includeTitleInResultsPlot=true;
  boolean includeHorizontalAxisLabelInResultsPlot=true;
  boolean includeVerticalAxisLabelInResultsPlot=true;
  boolean includeLegendInResultsPlot=true;
  ScoringFunction[] scoringFunctions=new ScoringFunction[]{new EntropyScoringFunction(),new EntropyScoringFunction(true),new ConstraintPropagationScoringFunction(true),new ConstraintPropagationScoringFunction(SurpriseFunction.NEGATIVE_LOGARITHM,true),new ConstraintPropagationScoringFunction(SurpriseFunction.ONE_MINUS_PROBABILITY,true)};
  Set<ResultType> resultTypes=new LinkedHashSet<>();
  resultTypes.add(ResultType.AUC_1_ITERATIONS_FULL_DATA_SET);
  resultTypes.add(ResultType.AVERAGE_AUC_FULL_DATA_SET);
  resultTypes.add(ResultType.NUMBER_OF_EXAMPLES_PICKED);
  boolean useLogicIntegrator=args[0].equals(""String_Node_Str"");
  boolean retrainClassifiers=args[1].equals(""String_Node_Str"");
  double negativeToPositiveTrainingExamplesRatio=1;
  ExamplePickingMethod examplePickingMethod=ExamplePickingMethod.PSEUDO_SEQUENTIAL;
  String workingDirectory;
  ImportedDataSet dataSet;
  Map<ScoringFunction,List<ExperimentResults>> results;
  logger.info(""String_Node_Str"");
  numberOfExperimentRepetitions=10;
  numberOfExamplesToPickPerIteration=1;
  maximumNumberOfIterations=1000;
  workingDirectory=""String_Node_Str"";
  dataSet=importISOLETDataSet(workingDirectory,negativeToPositiveTrainingExamplesRatio,0.0,0.0);
  String resultsDirectoryName;
  if (retrainClassifiers && useLogicIntegrator)   resultsDirectoryName=""String_Node_Str"" + examplePickingMethod.name() + ""String_Node_Str"";
 else   if (retrainClassifiers)   resultsDirectoryName=""String_Node_Str"" + examplePickingMethod.name() + ""String_Node_Str"";
 else   if (useLogicIntegrator)   resultsDirectoryName=""String_Node_Str"" + examplePickingMethod.name() + ""String_Node_Str"";
 else   resultsDirectoryName=""String_Node_Str"" + examplePickingMethod.name() + ""String_Node_Str"";
  dataSet.exportStatistics(workingDirectory + ""String_Node_Str"");
  results=runExperiments(numberOfExperimentRepetitions,numberOfExamplesToPickPerIteration,maximumNumberOfIterations,scoringFunctions,examplePickingMethod,useLogicIntegrator,retrainClassifiers,dataSet,resultTypes);
  ConstrainedLearningExperiment.exportResults(numberOfExperimentRepetitions,numberOfExamplesToPickPerIteration,maximumNumberOfIterations,results,workingDirectory + resultsDirectoryName,resultTypes,includeTitleInResultsPlot,includeHorizontalAxisLabelInResultsPlot,includeVerticalAxisLabelInResultsPlot,includeLegendInResultsPlot);
  logger.info(""String_Node_Str"");
}",0.9961908216941774
143968,"private LogicIntegrator(AbstractBuilder<?> builder){
  super(builder);
  logicManager=builder.logicManager;
  labels=builder.labels;
  classifiers=builder.classifiers;
  constraints=builder.constraints;
  sampleErrorRatesEstimates=builder.sampleErrorRatesEstimates;
  logProgress=builder.logProgress;
  instanceKeysMap=HashBiMap.create(data.size());
  labelKeysMap=HashBiMap.create(labels.size());
  classifierKeysMap=HashBiMap.create((int)classifiers.stream().count());
  ProbabilisticSoftLogic.Builder pslBuilder=new ProbabilisticSoftLogic.Builder(logicManager);
  final long[] currentInstanceKey={0};
  final long[] currentLabelKey={0};
  final long[] currentClassifierKey={0};
  if (builder.observedData != null)   builder.observedData.stream().map(Integrator.Data.Instance::instanceId).forEach(instance -> {
    if (!instanceKeysMap.containsValue(instance))     instanceKeysMap.put(currentInstanceKey[0]++,instance);
  }
);
  data.stream().map(Integrator.Data.Instance::instanceId).forEach(instance -> {
    if (!instanceKeysMap.containsValue(instance))     instanceKeysMap.put(currentInstanceKey[0]++,instance);
  }
);
  labels.forEach(label -> labelKeysMap.put(currentLabelKey[0]++,label));
  classifiers.forEach(classifier -> classifierKeysMap.put(currentClassifierKey[0]++,classifier));
  if (logProgress)   logger.info(""String_Node_Str"");
  instanceType=logicManager.addEntityType(""String_Node_Str"",instanceKeysMap.keySet());
  labelType=logicManager.addEntityType(""String_Node_Str"",labelKeysMap.keySet());
  classifierType=logicManager.addEntityType(""String_Node_Str"",classifierKeysMap.keySet());
  if (logProgress)   logger.info(""String_Node_Str"");
  List<EntityType> argumentTypes=new ArrayList<>(2);
  argumentTypes.add(labelType);
  argumentTypes.add(labelType);
  mutualExclusionPredicate=logicManager.addPredicate(""String_Node_Str"",argumentTypes,true);
  subsumptionPredicate=logicManager.addPredicate(""String_Node_Str"",argumentTypes,true);
  argumentTypes=new ArrayList<>(2);
  argumentTypes.add(instanceType);
  argumentTypes.add(labelType);
  labelPredicate=logicManager.addPredicate(""String_Node_Str"",argumentTypes,false);
  argumentTypes=new ArrayList<>(2);
  argumentTypes.add(labelType);
  argumentTypes.add(labelType);
  equalLabelsPredicate=logicManager.addPredicate(""String_Node_Str"",argumentTypes,true);
  argumentTypes=new ArrayList<>(3);
  argumentTypes.add(instanceType);
  argumentTypes.add(classifierType);
  argumentTypes.add(labelType);
  labelPredictionPredicate=logicManager.addPredicate(""String_Node_Str"",argumentTypes,false);
  argumentTypes=new ArrayList<>(2);
  argumentTypes.add(classifierType);
  argumentTypes.add(labelType);
  errorRatePredicate=logicManager.addPredicate(""String_Node_Str"",argumentTypes,false);
  if (logProgress)   logger.info(""String_Node_Str"");
  Variable instanceVariable=new Variable(0,""String_Node_Str"",instanceType);
  Variable classifierVariable=new Variable(1,""String_Node_Str"",classifierType);
  Variable label1Variable=new Variable(2,""String_Node_Str"",labelType);
  Variable label2Variable=new Variable(3,""String_Node_Str"",labelType);
  double power=2;
  double weight=1;
  List<Formula> bodyFormulas=new ArrayList<>();
  bodyFormulas.add(new Atom(mutualExclusionPredicate,Arrays.asList(label1Variable,label2Variable)));
  bodyFormulas.add(new Atom(labelPredictionPredicate,Arrays.asList(instanceVariable,classifierVariable,label1Variable)));
  bodyFormulas.add(new Atom(labelPredicate,Arrays.asList(instanceVariable,label2Variable)));
  bodyFormulas.add(new Negation(new Atom(equalLabelsPredicate,Arrays.asList(label1Variable,label2Variable))));
  List<Formula> headFormulas=new ArrayList<>();
  headFormulas.add(new Atom(errorRatePredicate,Arrays.asList(classifierVariable,label1Variable)));
  pslBuilder.addLogicRule(new ProbabilisticSoftLogic.LogicRule(bodyFormulas,headFormulas,power,weight));
  power=2;
  weight=1;
  bodyFormulas=new ArrayList<>();
  bodyFormulas.add(new Atom(subsumptionPredicate,Arrays.asList(label1Variable,label2Variable)));
  bodyFormulas.add(new Negation(new Atom(labelPredictionPredicate,Arrays.asList(instanceVariable,classifierVariable,label1Variable))));
  bodyFormulas.add(new Atom(labelPredicate,Arrays.asList(instanceVariable,label2Variable)));
  bodyFormulas.add(new Negation(new Atom(equalLabelsPredicate,Arrays.asList(label1Variable,label2Variable))));
  headFormulas=new ArrayList<>();
  headFormulas.add(new Atom(errorRatePredicate,Arrays.asList(classifierVariable,label1Variable)));
  pslBuilder.addLogicRule(new ProbabilisticSoftLogic.LogicRule(bodyFormulas,headFormulas,power,weight));
  power=2;
  weight=1;
  bodyFormulas=new ArrayList<>();
  bodyFormulas.add(new Atom(labelPredictionPredicate,Arrays.asList(instanceVariable,classifierVariable,label1Variable)));
  bodyFormulas.add(new Negation(new Atom(errorRatePredicate,Arrays.asList(classifierVariable,label1Variable))));
  headFormulas=new ArrayList<>();
  headFormulas.add(new Atom(labelPredicate,Arrays.asList(instanceVariable,label1Variable)));
  pslBuilder.addLogicRule(new ProbabilisticSoftLogic.LogicRule(bodyFormulas,headFormulas,power,weight));
  power=2;
  weight=1;
  bodyFormulas=new ArrayList<>();
  bodyFormulas.add(new Atom(labelPredictionPredicate,Arrays.asList(instanceVariable,classifierVariable,label1Variable)));
  bodyFormulas.add(new Atom(errorRatePredicate,Arrays.asList(classifierVariable,label1Variable)));
  headFormulas=new ArrayList<>();
  headFormulas.add(new Negation(new Atom(labelPredicate,Arrays.asList(instanceVariable,label1Variable))));
  pslBuilder.addLogicRule(new ProbabilisticSoftLogic.LogicRule(bodyFormulas,headFormulas,power,weight));
  power=2;
  weight=1;
  bodyFormulas=new ArrayList<>();
  bodyFormulas.add(new Negation(new Atom(labelPredictionPredicate,Arrays.asList(instanceVariable,classifierVariable,label1Variable))));
  bodyFormulas.add(new Negation(new Atom(errorRatePredicate,Arrays.asList(classifierVariable,label1Variable))));
  headFormulas=new ArrayList<>();
  headFormulas.add(new Negation(new Atom(labelPredicate,Arrays.asList(instanceVariable,label1Variable))));
  pslBuilder.addLogicRule(new ProbabilisticSoftLogic.LogicRule(bodyFormulas,headFormulas,power,weight));
  power=2;
  weight=1;
  bodyFormulas=new ArrayList<>();
  bodyFormulas.add(new Negation(new Atom(labelPredictionPredicate,Arrays.asList(instanceVariable,classifierVariable,label1Variable))));
  bodyFormulas.add(new Atom(errorRatePredicate,Arrays.asList(classifierVariable,label1Variable)));
  headFormulas=new ArrayList<>();
  headFormulas.add(new Atom(labelPredicate,Arrays.asList(instanceVariable,label1Variable)));
  pslBuilder.addLogicRule(new ProbabilisticSoftLogic.LogicRule(bodyFormulas,headFormulas,power,weight));
  if (logProgress)   logger.info(""String_Node_Str"");
  labels.forEach(label -> logicManager.addGroundPredicate(equalLabelsPredicate,Arrays.asList(labelKeysMap.inverse().get(label),labelKeysMap.inverse().get(label)),1.0));
  for (  Constraint constraint : constraints) {
    if (constraint instanceof MutualExclusionConstraint) {
      List<Label> labelsList=new ArrayList<>(((MutualExclusionConstraint)constraint).getLabels());
      for (int label1Index=0; label1Index < labelsList.size(); label1Index++)       for (int label2Index=0; label2Index < labelsList.size(); label2Index++)       if (label1Index != label2Index)       logicManager.addGroundPredicate(mutualExclusionPredicate,Arrays.asList(labelKeysMap.inverse().get(labelsList.get(label1Index)),labelKeysMap.inverse().get(labelsList.get(label2Index))),1.0);
    }
 else     if (constraint instanceof SubsumptionConstraint) {
      Label parentLabel=((SubsumptionConstraint)constraint).getParentLabel();
      Label childLabel=((SubsumptionConstraint)constraint).getChildLabel();
      logicManager.addGroundPredicate(subsumptionPredicate,Arrays.asList(labelKeysMap.inverse().get(parentLabel),labelKeysMap.inverse().get(childLabel)),1.0);
    }
  }
  if (builder.observedData != null)   for (  Integrator.Data.ObservedInstance instance : builder.observedData)   logicManager.addOrReplaceGroundPredicate(labelPredicate,Arrays.asList(instanceKeysMap.inverse().get(instance.instanceId()),labelKeysMap.inverse().get(instance.label())),instance.value() ? 1.0 : 0.0);
  if (logProgress) {
    logger.info(""String_Node_Str"" + data.stream().filter(i -> i.value() >= 0.5).count());
    logger.info(""String_Node_Str"" + data.stream().filter(i -> i.value() < 0.5).count());
  }
  for (  Integrator.Data.PredictedInstance instance : data) {
    List<GroundPredicate> mutualExclusionRulePredicates=new ArrayList<>(4);
    List<GroundPredicate> subsumptionRulePredicates=new ArrayList<>(4);
    List<GroundPredicate> ensembleRulePredicates=new ArrayList<>(3);
    List<GroundPredicate> majorityVotePriorRulePredicates=new ArrayList<>(2);
    List<Long> assignment=new ArrayList<>(3);
    assignment.add(instanceKeysMap.inverse().get(instance.instanceId()));
    assignment.add(classifierKeysMap.inverse().get(instance.classifierId()));
    assignment.add(labelKeysMap.inverse().get(instance.label()));
    if (logicManager.checkIfGroundPredicateExists(labelPredictionPredicate,assignment))     continue;
    GroundPredicate predictionPredicate=logicManager.addGroundPredicate(labelPredictionPredicate,assignment,instance.value());
    mutualExclusionRulePredicates.add(predictionPredicate);
    subsumptionRulePredicates.add(predictionPredicate);
    ensembleRulePredicates.add(predictionPredicate);
    majorityVotePriorRulePredicates.add(predictionPredicate);
    assignment=new ArrayList<>(2);
    assignment.add(classifierKeysMap.inverse().get(instance.classifierId()));
    assignment.add(labelKeysMap.inverse().get(instance.label()));
    GroundPredicate errorPredicate=logicManager.addGroundPredicate(errorRatePredicate,assignment,null);
    mutualExclusionRulePredicates.add(errorPredicate);
    subsumptionRulePredicates.add(errorPredicate);
    ensembleRulePredicates.add(errorPredicate);
    assignment=new ArrayList<>(2);
    assignment.add(instanceKeysMap.inverse().get(instance.instanceId()));
    assignment.add(labelKeysMap.inverse().get(instance.label()));
    GroundPredicate integratedLabelPredicate=logicManager.addGroundPredicate(labelPredicate,assignment,null);
    ensembleRulePredicates.add(integratedLabelPredicate);
    majorityVotePriorRulePredicates.add(integratedLabelPredicate);
    pslBuilder.addRule(ensembleRulePredicates,new boolean[]{true,false,false},2,1);
    pslBuilder.addRule(ensembleRulePredicates,new boolean[]{true,true,true},2,1);
    pslBuilder.addRule(ensembleRulePredicates,new boolean[]{false,false,true},2,1);
    pslBuilder.addRule(ensembleRulePredicates,new boolean[]{false,true,false},2,1);
    pslBuilder.addRule(majorityVotePriorRulePredicates,new boolean[]{true,false},2,1);
    pslBuilder.addRule(majorityVotePriorRulePredicates,new boolean[]{false,true},2,1);
    for (    Constraint constraint : constraints) {
      if (constraint instanceof MutualExclusionConstraint) {
        List<Label> labelsList=new ArrayList<>(((MutualExclusionConstraint)constraint).getLabels());
        if (labelsList.contains(instance.label())) {
          for (          Label label : labelsList.stream().filter(l -> !l.equals(instance.label())).collect(Collectors.toList())) {
            List<GroundPredicate> mutualExclusionRulePredicatesCopy=new ArrayList<>(mutualExclusionRulePredicates);
            assignment=new ArrayList<>(2);
            assignment.add(instanceKeysMap.inverse().get(instance.instanceId()));
            assignment.add(labelKeysMap.inverse().get(label));
            mutualExclusionRulePredicatesCopy.add(logicManager.addGroundPredicate(labelPredicate,assignment,null));
            assignment=new ArrayList<>(2);
            assignment.add(labelKeysMap.inverse().get(instance.label()));
            assignment.add(labelKeysMap.inverse().get(label));
            mutualExclusionRulePredicatesCopy.add(logicManager.getGroundPredicate(mutualExclusionPredicate,assignment));
            pslBuilder.addRule(mutualExclusionRulePredicatesCopy,new boolean[]{true,false,true,true},2,1);
          }
        }
      }
 else       if (constraint instanceof SubsumptionConstraint) {
        if (((SubsumptionConstraint)constraint).getParentLabel().equals(instance.label())) {
          Label childLabel=((SubsumptionConstraint)constraint).getChildLabel();
          List<GroundPredicate> subsumptionRulePredicatesCopy=new ArrayList<>(subsumptionRulePredicates);
          assignment=new ArrayList<>(2);
          assignment.add(instanceKeysMap.inverse().get(instance.instanceId()));
          assignment.add(labelKeysMap.inverse().get(childLabel));
          subsumptionRulePredicatesCopy.add(logicManager.addGroundPredicate(labelPredicate,assignment,null));
          assignment=new ArrayList<>(2);
          assignment.add(labelKeysMap.inverse().get(instance.label()));
          assignment.add(labelKeysMap.inverse().get(childLabel));
          subsumptionRulePredicatesCopy.add(logicManager.getGroundPredicate(subsumptionPredicate,assignment));
          pslBuilder.addRule(subsumptionRulePredicatesCopy,new boolean[]{false,false,true,true},2,1);
        }
      }
    }
  }
  psl=pslBuilder.build(false);
}","private LogicIntegrator(AbstractBuilder<?> builder){
  super(builder);
  logicManager=builder.logicManager;
  labels=builder.labels;
  classifiers=builder.classifiers;
  constraints=builder.constraints;
  sampleErrorRatesEstimates=builder.sampleErrorRatesEstimates;
  logProgress=builder.logProgress;
  instanceKeysMap=HashBiMap.create(data.size());
  labelKeysMap=HashBiMap.create(labels.size());
  classifierKeysMap=HashBiMap.create((int)classifiers.stream().count());
  ProbabilisticSoftLogic.Builder pslBuilder=new ProbabilisticSoftLogic.Builder(logicManager);
  final long[] currentInstanceKey={0};
  final long[] currentLabelKey={0};
  final long[] currentClassifierKey={0};
  if (builder.observedData != null)   builder.observedData.stream().map(Integrator.Data.Instance::instanceId).forEach(instance -> {
    if (!instanceKeysMap.containsValue(instance))     instanceKeysMap.put(currentInstanceKey[0]++,instance);
  }
);
  data.stream().map(Integrator.Data.Instance::instanceId).forEach(instance -> {
    if (!instanceKeysMap.containsValue(instance))     instanceKeysMap.put(currentInstanceKey[0]++,instance);
  }
);
  labels.forEach(label -> labelKeysMap.put(currentLabelKey[0]++,label));
  classifiers.forEach(classifier -> classifierKeysMap.put(currentClassifierKey[0]++,classifier));
  if (logProgress)   logger.info(""String_Node_Str"");
  instanceType=logicManager.addEntityType(""String_Node_Str"",instanceKeysMap.keySet());
  labelType=logicManager.addEntityType(""String_Node_Str"",labelKeysMap.keySet());
  classifierType=logicManager.addEntityType(""String_Node_Str"",classifierKeysMap.keySet());
  if (logProgress)   logger.info(""String_Node_Str"");
  List<EntityType> argumentTypes=new ArrayList<>(2);
  argumentTypes.add(labelType);
  argumentTypes.add(labelType);
  mutualExclusionPredicate=logicManager.addPredicate(""String_Node_Str"",argumentTypes,true);
  subsumptionPredicate=logicManager.addPredicate(""String_Node_Str"",argumentTypes,true);
  argumentTypes=new ArrayList<>(2);
  argumentTypes.add(instanceType);
  argumentTypes.add(labelType);
  labelPredicate=logicManager.addPredicate(""String_Node_Str"",argumentTypes,false);
  argumentTypes=new ArrayList<>(2);
  argumentTypes.add(labelType);
  argumentTypes.add(labelType);
  equalLabelsPredicate=logicManager.addPredicate(""String_Node_Str"",argumentTypes,true);
  argumentTypes=new ArrayList<>(3);
  argumentTypes.add(instanceType);
  argumentTypes.add(classifierType);
  argumentTypes.add(labelType);
  labelPredictionPredicate=logicManager.addPredicate(""String_Node_Str"",argumentTypes,false);
  argumentTypes=new ArrayList<>(2);
  argumentTypes.add(classifierType);
  argumentTypes.add(labelType);
  errorRatePredicate=logicManager.addPredicate(""String_Node_Str"",argumentTypes,false);
  if (logProgress)   logger.info(""String_Node_Str"");
  Variable instanceVariable=new Variable(0,""String_Node_Str"",instanceType);
  Variable classifierVariable=new Variable(1,""String_Node_Str"",classifierType);
  Variable label1Variable=new Variable(2,""String_Node_Str"",labelType);
  Variable label2Variable=new Variable(3,""String_Node_Str"",labelType);
  double power=2;
  double weight=1;
  List<Formula> bodyFormulas=new ArrayList<>();
  bodyFormulas.add(new Atom(mutualExclusionPredicate,Arrays.asList(label1Variable,label2Variable)));
  bodyFormulas.add(new Atom(labelPredictionPredicate,Arrays.asList(instanceVariable,classifierVariable,label1Variable)));
  bodyFormulas.add(new Atom(labelPredicate,Arrays.asList(instanceVariable,label2Variable)));
  bodyFormulas.add(new Negation(new Atom(equalLabelsPredicate,Arrays.asList(label1Variable,label2Variable))));
  List<Formula> headFormulas=new ArrayList<>();
  headFormulas.add(new Atom(errorRatePredicate,Arrays.asList(classifierVariable,label1Variable)));
  pslBuilder.addLogicRule(new ProbabilisticSoftLogic.LogicRule(bodyFormulas,headFormulas,power,weight));
  power=2;
  weight=1;
  bodyFormulas=new ArrayList<>();
  bodyFormulas.add(new Atom(subsumptionPredicate,Arrays.asList(label1Variable,label2Variable)));
  bodyFormulas.add(new Negation(new Atom(labelPredictionPredicate,Arrays.asList(instanceVariable,classifierVariable,label1Variable))));
  bodyFormulas.add(new Atom(labelPredicate,Arrays.asList(instanceVariable,label2Variable)));
  bodyFormulas.add(new Negation(new Atom(equalLabelsPredicate,Arrays.asList(label1Variable,label2Variable))));
  headFormulas=new ArrayList<>();
  headFormulas.add(new Atom(errorRatePredicate,Arrays.asList(classifierVariable,label1Variable)));
  pslBuilder.addLogicRule(new ProbabilisticSoftLogic.LogicRule(bodyFormulas,headFormulas,power,weight));
  power=2;
  weight=1;
  bodyFormulas=new ArrayList<>();
  bodyFormulas.add(new Atom(labelPredictionPredicate,Arrays.asList(instanceVariable,classifierVariable,label1Variable)));
  bodyFormulas.add(new Negation(new Atom(errorRatePredicate,Arrays.asList(classifierVariable,label1Variable))));
  headFormulas=new ArrayList<>();
  headFormulas.add(new Atom(labelPredicate,Arrays.asList(instanceVariable,label1Variable)));
  pslBuilder.addLogicRule(new ProbabilisticSoftLogic.LogicRule(bodyFormulas,headFormulas,power,weight));
  power=2;
  weight=1;
  bodyFormulas=new ArrayList<>();
  bodyFormulas.add(new Atom(labelPredictionPredicate,Arrays.asList(instanceVariable,classifierVariable,label1Variable)));
  bodyFormulas.add(new Atom(errorRatePredicate,Arrays.asList(classifierVariable,label1Variable)));
  headFormulas=new ArrayList<>();
  headFormulas.add(new Negation(new Atom(labelPredicate,Arrays.asList(instanceVariable,label1Variable))));
  pslBuilder.addLogicRule(new ProbabilisticSoftLogic.LogicRule(bodyFormulas,headFormulas,power,weight));
  power=2;
  weight=1;
  bodyFormulas=new ArrayList<>();
  bodyFormulas.add(new Negation(new Atom(labelPredictionPredicate,Arrays.asList(instanceVariable,classifierVariable,label1Variable))));
  bodyFormulas.add(new Negation(new Atom(errorRatePredicate,Arrays.asList(classifierVariable,label1Variable))));
  headFormulas=new ArrayList<>();
  headFormulas.add(new Negation(new Atom(labelPredicate,Arrays.asList(instanceVariable,label1Variable))));
  pslBuilder.addLogicRule(new ProbabilisticSoftLogic.LogicRule(bodyFormulas,headFormulas,power,weight));
  power=2;
  weight=1;
  bodyFormulas=new ArrayList<>();
  bodyFormulas.add(new Negation(new Atom(labelPredictionPredicate,Arrays.asList(instanceVariable,classifierVariable,label1Variable))));
  bodyFormulas.add(new Atom(errorRatePredicate,Arrays.asList(classifierVariable,label1Variable)));
  headFormulas=new ArrayList<>();
  headFormulas.add(new Atom(labelPredicate,Arrays.asList(instanceVariable,label1Variable)));
  pslBuilder.addLogicRule(new ProbabilisticSoftLogic.LogicRule(bodyFormulas,headFormulas,power,weight));
  if (logProgress)   logger.info(""String_Node_Str"");
  labels.forEach(label -> logicManager.addGroundPredicate(equalLabelsPredicate,Arrays.asList(labelKeysMap.inverse().get(label),labelKeysMap.inverse().get(label)),1.0));
  for (  Constraint constraint : constraints) {
    if (constraint instanceof MutualExclusionConstraint) {
      List<Label> labelsList=new ArrayList<>(((MutualExclusionConstraint)constraint).getLabels());
      for (int label1Index=0; label1Index < labelsList.size(); label1Index++)       for (int label2Index=0; label2Index < labelsList.size(); label2Index++)       if (label1Index != label2Index)       logicManager.addGroundPredicate(mutualExclusionPredicate,Arrays.asList(labelKeysMap.inverse().get(labelsList.get(label1Index)),labelKeysMap.inverse().get(labelsList.get(label2Index))),1.0);
    }
 else     if (constraint instanceof SubsumptionConstraint) {
      Label parentLabel=((SubsumptionConstraint)constraint).getParentLabel();
      Label childLabel=((SubsumptionConstraint)constraint).getChildLabel();
      logicManager.addGroundPredicate(subsumptionPredicate,Arrays.asList(labelKeysMap.inverse().get(parentLabel),labelKeysMap.inverse().get(childLabel)),1.0);
    }
  }
  if (builder.observedData != null)   for (  Integrator.Data.ObservedInstance instance : builder.observedData)   logicManager.addOrReplaceGroundPredicate(labelPredicate,Arrays.asList(instanceKeysMap.inverse().get(instance.instanceId()),labelKeysMap.inverse().get(instance.label())),instance.value() ? 1.0 : 0.0);
  if (logProgress) {
    logger.info(""String_Node_Str"" + data.stream().filter(i -> i.value() >= 0.5).count());
    logger.info(""String_Node_Str"" + data.stream().filter(i -> i.value() < 0.5).count());
  }
  for (  Integrator.Data.PredictedInstance instance : data) {
    List<GroundPredicate> mutualExclusionRulePredicates=new ArrayList<>(4);
    List<GroundPredicate> subsumptionRulePredicates=new ArrayList<>(4);
    List<GroundPredicate> ensembleRulePredicates=new ArrayList<>(3);
    List<GroundPredicate> majorityVotePriorRulePredicates=new ArrayList<>(2);
    List<Long> assignment=new ArrayList<>(3);
    assignment.add(instanceKeysMap.inverse().get(instance.instanceId()));
    assignment.add(classifierKeysMap.inverse().get(instance.classifierId()));
    assignment.add(labelKeysMap.inverse().get(instance.label()));
    if (logicManager.checkIfGroundPredicateExists(labelPredictionPredicate,assignment))     continue;
    GroundPredicate predictionPredicate=logicManager.addGroundPredicate(labelPredictionPredicate,assignment,instance.value());
    mutualExclusionRulePredicates.add(predictionPredicate);
    subsumptionRulePredicates.add(predictionPredicate);
    ensembleRulePredicates.add(predictionPredicate);
    majorityVotePriorRulePredicates.add(predictionPredicate);
    assignment=new ArrayList<>(2);
    assignment.add(classifierKeysMap.inverse().get(instance.classifierId()));
    assignment.add(labelKeysMap.inverse().get(instance.label()));
    GroundPredicate errorPredicate=logicManager.addGroundPredicate(errorRatePredicate,assignment,null);
    mutualExclusionRulePredicates.add(errorPredicate);
    subsumptionRulePredicates.add(errorPredicate);
    ensembleRulePredicates.add(errorPredicate);
    assignment=new ArrayList<>(2);
    assignment.add(instanceKeysMap.inverse().get(instance.instanceId()));
    assignment.add(labelKeysMap.inverse().get(instance.label()));
    GroundPredicate integratedLabelPredicate=logicManager.addGroundPredicate(labelPredicate,assignment,null);
    ensembleRulePredicates.add(integratedLabelPredicate);
    majorityVotePriorRulePredicates.add(integratedLabelPredicate);
    pslBuilder.addRule(ensembleRulePredicates,new boolean[]{true,false,false},2,1);
    pslBuilder.addRule(ensembleRulePredicates,new boolean[]{true,true,true},2,1);
    pslBuilder.addRule(ensembleRulePredicates,new boolean[]{false,false,true},2,1);
    pslBuilder.addRule(ensembleRulePredicates,new boolean[]{false,true,false},2,1);
    pslBuilder.addRule(majorityVotePriorRulePredicates,new boolean[]{true,false},2,1);
    pslBuilder.addRule(majorityVotePriorRulePredicates,new boolean[]{false,true},2,1);
    for (    Constraint constraint : constraints) {
      if (constraint instanceof MutualExclusionConstraint) {
        List<Label> labelsList=new ArrayList<>(((MutualExclusionConstraint)constraint).getLabels());
        if (labelsList.contains(instance.label())) {
          for (          Label label : labelsList.stream().filter(l -> !l.equals(instance.label())).collect(Collectors.toList())) {
            List<GroundPredicate> mutualExclusionRulePredicatesCopy=new ArrayList<>(mutualExclusionRulePredicates);
            assignment=new ArrayList<>(2);
            assignment.add(instanceKeysMap.inverse().get(instance.instanceId()));
            assignment.add(labelKeysMap.inverse().get(label));
            if (logicManager.checkIfGroundPredicateExists(labelPredicate,assignment))             mutualExclusionRulePredicatesCopy.add(logicManager.getGroundPredicate(labelPredicate,assignment));
 else             mutualExclusionRulePredicatesCopy.add(logicManager.addGroundPredicate(labelPredicate,assignment,null));
            assignment=new ArrayList<>(2);
            assignment.add(labelKeysMap.inverse().get(instance.label()));
            assignment.add(labelKeysMap.inverse().get(label));
            mutualExclusionRulePredicatesCopy.add(logicManager.getGroundPredicate(mutualExclusionPredicate,assignment));
            pslBuilder.addRule(mutualExclusionRulePredicatesCopy,new boolean[]{true,false,true,true},2,1);
          }
        }
      }
 else       if (constraint instanceof SubsumptionConstraint) {
        if (((SubsumptionConstraint)constraint).getParentLabel().equals(instance.label())) {
          Label childLabel=((SubsumptionConstraint)constraint).getChildLabel();
          List<GroundPredicate> subsumptionRulePredicatesCopy=new ArrayList<>(subsumptionRulePredicates);
          assignment=new ArrayList<>(2);
          assignment.add(instanceKeysMap.inverse().get(instance.instanceId()));
          assignment.add(labelKeysMap.inverse().get(childLabel));
          if (logicManager.checkIfGroundPredicateExists(labelPredicate,assignment))           subsumptionRulePredicatesCopy.add(logicManager.getGroundPredicate(labelPredicate,assignment));
 else           subsumptionRulePredicatesCopy.add(logicManager.addGroundPredicate(labelPredicate,assignment,null));
          assignment=new ArrayList<>(2);
          assignment.add(labelKeysMap.inverse().get(instance.label()));
          assignment.add(labelKeysMap.inverse().get(childLabel));
          subsumptionRulePredicatesCopy.add(logicManager.getGroundPredicate(subsumptionPredicate,assignment));
          pslBuilder.addRule(subsumptionRulePredicatesCopy,new boolean[]{false,false,true,true},2,1);
        }
      }
    }
  }
  psl=pslBuilder.build(false);
}",0.98518904435844
143969,"private List<GroundPredicate> solve(ConsensusADMMSolver.Builder solverBuilder){
  for (  Constraint constraint : constraints)   solverBuilder.addConstraint(constraint.constraint,constraint.variableIndexes);
  solver=solverBuilder.subProblemSolver((subProblem) -> solveProbabilisticSoftLogicSubProblem(subProblem,subProblemCholeskyFactors)).maximumNumberOfIterations(5000).checkForPointConvergence(false).checkForObjectiveConvergence(false).checkForGradientConvergence(false).logObjectiveValue(false).logGradientNorm(false).loggingLevel(0).build();
  Vector result=solver.solve();
  this.solverBuilder=solverBuilder.initialPoint(solver.currentPoint);
  List<GroundPredicate> groundPredicates=new ArrayList<>();
  for (int internalId=0; internalId < result.size(); internalId++) {
    GroundPredicate groundPredicate=logicManager.getGroundPredicate(externalToInternalIdsMap.inverse().get(internalId));
    groundPredicate.setValue(result.get(internalId));
    groundPredicates.add(groundPredicate);
  }
  return groundPredicates;
}","private List<GroundPredicate> solve(ConsensusADMMSolver.Builder solverBuilder){
  for (  Constraint constraint : constraints)   solverBuilder.addConstraint(constraint.constraint,constraint.variableIndexes);
  solver=solverBuilder.subProblemSolver((subProblem) -> solveProbabilisticSoftLogicSubProblem(subProblem,subProblemCholeskyFactors)).maximumNumberOfIterations(5000).checkForPointConvergence(false).checkForObjectiveConvergence(false).checkForGradientConvergence(false).logObjectiveValue(false).logGradientNorm(false).loggingLevel(0).build();
  Vector result=objectiveFunction.getNumberOfVariables() > 0 ? solver.solve() : Vectors.dense(0);
  this.solverBuilder=solverBuilder.initialPoint(solver.currentPoint);
  List<GroundPredicate> groundPredicates=new ArrayList<>();
  for (int internalId=0; internalId < result.size(); internalId++) {
    GroundPredicate groundPredicate=logicManager.getGroundPredicate(externalToInternalIdsMap.inverse().get(internalId));
    groundPredicate.setValue(result.get(internalId));
    groundPredicates.add(groundPredicate);
  }
  return groundPredicates;
}",0.9566854990583804
143970,"public static void main(String[] args){
  int numberOfExperimentRepetitions=2;
  int numberOfExamplesToPickPerIteration=1000000;
  int maximumNumberOfIterations=1000000000;
  boolean includeTitleInResultsPlot=true;
  boolean includeHorizontalAxisLabelInResultsPlot=true;
  boolean includeVerticalAxisLabelInResultsPlot=true;
  boolean includeLegendInResultsPlot=true;
  ScoringFunction[] scoringFunctions=new ScoringFunction[]{new RandomScoringFunction(),new EntropyScoringFunction(),new RandomScoringFunction(true),new EntropyScoringFunction(true),new ExpectedLabelsFixedScoringFunction(true),new ConstraintPropagationScoringFunction(true),new ConstraintPropagationScoringFunction(SurpriseFunction.NEGATIVE_LOGARITHM,true),new ConstraintPropagationScoringFunction(SurpriseFunction.ONE_MINUS_PROBABILITY,true)};
  Set<ResultType> resultTypes=new LinkedHashSet<>();
  resultTypes.add(ResultType.AVERAGE_AUC_FULL_DATA_SET);
  resultTypes.add(ResultType.AVERAGE_AUC_EVALUATION_DATA_SET);
  resultTypes.add(ResultType.NUMBER_OF_EXAMPLES_PICKED);
  boolean useLogicIntegrator=args[0].equals(""String_Node_Str"");
  boolean retrainClassifiers=args[1].equals(""String_Node_Str"");
  double negativeToPositiveTrainingExamplesRatio=1;
  ExamplePickingMethod examplePickingMethod=ExamplePickingMethod.PSEUDO_SEQUENTIAL;
  String experiment=args[2];
  String workingDirectory;
  String cplFeatureMapDirectory;
switch (execReadToString(""String_Node_Str"")) {
case ""String_Node_Str"":
    workingDirectory=""String_Node_Str"";
  cplFeatureMapDirectory=""String_Node_Str"";
break;
case ""String_Node_Str"":
case ""String_Node_Str"":
case ""String_Node_Str"":
workingDirectory=""String_Node_Str"";
cplFeatureMapDirectory=""String_Node_Str"";
break;
default :
throw new IllegalStateException(""String_Node_Str"");
}
ImportedDataSet dataSet;
Map<ScoringFunction,List<ExperimentResults>> results;
logger.info(""String_Node_Str"" + experiment + ""String_Node_Str"");
workingDirectory+=""String_Node_Str"" + experiment + ""String_Node_Str"";
numberOfExperimentRepetitions=10;
switch (experiment) {
case ""String_Node_Str"":
case ""String_Node_Str"":
case ""String_Node_Str"":
numberOfExamplesToPickPerIteration=1000;
maximumNumberOfIterations=1000;
dataSet=importNELLDataSet(cplFeatureMapDirectory,workingDirectory,negativeToPositiveTrainingExamplesRatio,0,0);
break;
case ""String_Node_Str"":
numberOfExamplesToPickPerIteration=1;
maximumNumberOfIterations=1000;
dataSet=importISOLETDataSet(workingDirectory,negativeToPositiveTrainingExamplesRatio,0.0,0.0);
break;
case ""String_Node_Str"":
numberOfExamplesToPickPerIteration=50;
maximumNumberOfIterations=1000;
dataSet=importLIBSVMDataSet(workingDirectory,true,negativeToPositiveTrainingExamplesRatio,0.0,0.0);
break;
case ""String_Node_Str"":
numberOfExamplesToPickPerIteration=1000;
maximumNumberOfIterations=100000;
dataSet=importLIBSVMDataSet(workingDirectory,true,negativeToPositiveTrainingExamplesRatio,0.0,0.0);
break;
case ""String_Node_Str"":
numberOfExamplesToPickPerIteration=100;
maximumNumberOfIterations=100000;
dataSet=importLIBSVMDataSet(workingDirectory,false,negativeToPositiveTrainingExamplesRatio,0.0,0.0);
break;
case ""String_Node_Str"":
numberOfExamplesToPickPerIteration=1000;
maximumNumberOfIterations=100000;
dataSet=importISOLETDataSet(workingDirectory,negativeToPositiveTrainingExamplesRatio,0.0,0.0);
break;
case ""String_Node_Str"":
numberOfExamplesToPickPerIteration=100;
maximumNumberOfIterations=2000;
dataSet=importLIBSVMDataSet(workingDirectory,false,negativeToPositiveTrainingExamplesRatio,0.0,0.0);
break;
case ""String_Node_Str"":
numberOfExamplesToPickPerIteration=100;
maximumNumberOfIterations=100000;
dataSet=importLIBSVMDataSet(workingDirectory,false,negativeToPositiveTrainingExamplesRatio,0.0,0.0);
break;
case ""String_Node_Str"":
numberOfExamplesToPickPerIteration=10;
maximumNumberOfIterations=100000;
dataSet=importLIBSVMDataSet(workingDirectory,false,negativeToPositiveTrainingExamplesRatio,0.0,0.0);
break;
case ""String_Node_Str"":
numberOfExamplesToPickPerIteration=1000;
maximumNumberOfIterations=100000;
dataSet=importLIBSVMDataSet(workingDirectory,false,negativeToPositiveTrainingExamplesRatio,0.0,0.0);
break;
case ""String_Node_Str"":
numberOfExamplesToPickPerIteration=1000;
maximumNumberOfIterations=100000;
dataSet=importLIBSVMDataSet(workingDirectory,false,negativeToPositiveTrainingExamplesRatio,0.0,0.0);
break;
case ""String_Node_Str"":
numberOfExamplesToPickPerIteration=1000;
maximumNumberOfIterations=10000;
dataSet=importLIBSVMDataSet(workingDirectory,false,negativeToPositiveTrainingExamplesRatio,0.0,0.0);
break;
case ""String_Node_Str"":
numberOfExamplesToPickPerIteration=1;
maximumNumberOfIterations=1000;
dataSet=importLIBSVMDataSet(workingDirectory,false,negativeToPositiveTrainingExamplesRatio,0.0,0.0);
break;
case ""String_Node_Str"":
numberOfExamplesToPickPerIteration=10;
maximumNumberOfIterations=10000000;
dataSet=importLIBSVMDataSet(workingDirectory,false,negativeToPositiveTrainingExamplesRatio,0.0,0.0);
break;
case ""String_Node_Str"":
numberOfExamplesToPickPerIteration=10;
maximumNumberOfIterations=1000;
dataSet=importLIBSVMDataSet(workingDirectory,false,negativeToPositiveTrainingExamplesRatio,0.0,0.0);
break;
case ""String_Node_Str"":
numberOfExamplesToPickPerIteration=10000;
maximumNumberOfIterations=100000;
dataSet=importLIBSVMDataSet(workingDirectory,true,negativeToPositiveTrainingExamplesRatio,0.0,0.0);
break;
case ""String_Node_Str"":
numberOfExamplesToPickPerIteration=100;
maximumNumberOfIterations=1000;
dataSet=importLIBSVMDataSet(workingDirectory,false,negativeToPositiveTrainingExamplesRatio,0.0,0.0);
break;
case ""String_Node_Str"":
numberOfExamplesToPickPerIteration=10000;
maximumNumberOfIterations=1000000;
dataSet=importLIBSVMDataSet(workingDirectory,true,negativeToPositiveTrainingExamplesRatio,0.0,0.0);
break;
case ""String_Node_Str"":
numberOfExamplesToPickPerIteration=10000;
maximumNumberOfIterations=1000000;
dataSet=importLIBSVMDataSet(workingDirectory,true,negativeToPositiveTrainingExamplesRatio,0.0,0.0);
break;
default :
throw new IllegalStateException(""String_Node_Str"");
}
String resultsDirectoryName;
if (retrainClassifiers && useLogicIntegrator) resultsDirectoryName=""String_Node_Str"" + examplePickingMethod.name() + ""String_Node_Str"";
 else if (retrainClassifiers) resultsDirectoryName=""String_Node_Str"" + examplePickingMethod.name() + ""String_Node_Str"";
 else if (useLogicIntegrator) resultsDirectoryName=""String_Node_Str"" + examplePickingMethod.name() + ""String_Node_Str"";
 else resultsDirectoryName=""String_Node_Str"" + examplePickingMethod.name() + ""String_Node_Str"";
dataSet.exportStatistics(workingDirectory + ""String_Node_Str"");
results=runExperiments(numberOfExperimentRepetitions,numberOfExamplesToPickPerIteration,maximumNumberOfIterations,scoringFunctions,examplePickingMethod,useLogicIntegrator,retrainClassifiers,dataSet,resultTypes);
ConstrainedLearningExperiment.exportResults(numberOfExperimentRepetitions,numberOfExamplesToPickPerIteration,maximumNumberOfIterations,results,workingDirectory + resultsDirectoryName,resultTypes,includeTitleInResultsPlot,includeHorizontalAxisLabelInResultsPlot,includeVerticalAxisLabelInResultsPlot,includeLegendInResultsPlot);
logger.info(""String_Node_Str"");
}","public static void main(String[] args){
  int numberOfExperimentRepetitions=2;
  int numberOfExamplesToPickPerIteration=1000000;
  int maximumNumberOfIterations=1000000000;
  boolean includeTitleInResultsPlot=true;
  boolean includeHorizontalAxisLabelInResultsPlot=true;
  boolean includeVerticalAxisLabelInResultsPlot=true;
  boolean includeLegendInResultsPlot=true;
  ScoringFunction[] scoringFunctions=new ScoringFunction[]{new RandomScoringFunction(),new EntropyScoringFunction(),new RandomScoringFunction(true),new EntropyScoringFunction(true),new ExpectedLabelsFixedScoringFunction(true),new ConstraintPropagationScoringFunction(true),new ConstraintPropagationScoringFunction(SurpriseFunction.NEGATIVE_LOGARITHM,true),new ConstraintPropagationScoringFunction(SurpriseFunction.ONE_MINUS_PROBABILITY,true)};
  Set<ResultType> resultTypes=new LinkedHashSet<>();
  resultTypes.add(ResultType.AVERAGE_AUC_FULL_DATA_SET);
  resultTypes.add(ResultType.AVERAGE_AUC_EVALUATION_DATA_SET);
  resultTypes.add(ResultType.NUMBER_OF_EXAMPLES_PICKED);
  boolean useLogicIntegrator=args[0].equals(""String_Node_Str"");
  boolean retrainClassifiers=args[1].equals(""String_Node_Str"");
  double negativeToPositiveTrainingExamplesRatio=1;
  ExamplePickingMethod examplePickingMethod=ExamplePickingMethod.PSEUDO_SEQUENTIAL;
  String experiment=args[2];
  String workingDirectory;
  String cplFeatureMapDirectory;
  String hostname=execReadToString(""String_Node_Str"");
switch (hostname) {
case ""String_Node_Str"":
    workingDirectory=""String_Node_Str"";
  cplFeatureMapDirectory=""String_Node_Str"";
break;
case ""String_Node_Str"":
case ""String_Node_Str"":
case ""String_Node_Str"":
workingDirectory=""String_Node_Str"";
cplFeatureMapDirectory=""String_Node_Str"";
break;
default :
throw new IllegalStateException(""String_Node_Str"" + hostname + ""String_Node_Str"");
}
ImportedDataSet dataSet;
Map<ScoringFunction,List<ExperimentResults>> results;
logger.info(""String_Node_Str"" + experiment + ""String_Node_Str"");
workingDirectory+=""String_Node_Str"" + experiment + ""String_Node_Str"";
numberOfExperimentRepetitions=10;
switch (experiment) {
case ""String_Node_Str"":
case ""String_Node_Str"":
case ""String_Node_Str"":
numberOfExamplesToPickPerIteration=1000;
maximumNumberOfIterations=1000;
dataSet=importNELLDataSet(cplFeatureMapDirectory,workingDirectory,negativeToPositiveTrainingExamplesRatio,0,0);
break;
case ""String_Node_Str"":
numberOfExamplesToPickPerIteration=1;
maximumNumberOfIterations=1000;
dataSet=importISOLETDataSet(workingDirectory,negativeToPositiveTrainingExamplesRatio,0.0,0.0);
break;
case ""String_Node_Str"":
numberOfExamplesToPickPerIteration=50;
maximumNumberOfIterations=1000;
dataSet=importLIBSVMDataSet(workingDirectory,true,negativeToPositiveTrainingExamplesRatio,0.0,0.0);
break;
case ""String_Node_Str"":
numberOfExamplesToPickPerIteration=1000;
maximumNumberOfIterations=100000;
dataSet=importLIBSVMDataSet(workingDirectory,true,negativeToPositiveTrainingExamplesRatio,0.0,0.0);
break;
case ""String_Node_Str"":
numberOfExamplesToPickPerIteration=100;
maximumNumberOfIterations=100000;
dataSet=importLIBSVMDataSet(workingDirectory,false,negativeToPositiveTrainingExamplesRatio,0.0,0.0);
break;
case ""String_Node_Str"":
numberOfExamplesToPickPerIteration=1000;
maximumNumberOfIterations=100000;
dataSet=importISOLETDataSet(workingDirectory,negativeToPositiveTrainingExamplesRatio,0.0,0.0);
break;
case ""String_Node_Str"":
numberOfExamplesToPickPerIteration=100;
maximumNumberOfIterations=2000;
dataSet=importLIBSVMDataSet(workingDirectory,false,negativeToPositiveTrainingExamplesRatio,0.0,0.0);
break;
case ""String_Node_Str"":
numberOfExamplesToPickPerIteration=100;
maximumNumberOfIterations=100000;
dataSet=importLIBSVMDataSet(workingDirectory,false,negativeToPositiveTrainingExamplesRatio,0.0,0.0);
break;
case ""String_Node_Str"":
numberOfExamplesToPickPerIteration=10;
maximumNumberOfIterations=100000;
dataSet=importLIBSVMDataSet(workingDirectory,false,negativeToPositiveTrainingExamplesRatio,0.0,0.0);
break;
case ""String_Node_Str"":
numberOfExamplesToPickPerIteration=1000;
maximumNumberOfIterations=100000;
dataSet=importLIBSVMDataSet(workingDirectory,false,negativeToPositiveTrainingExamplesRatio,0.0,0.0);
break;
case ""String_Node_Str"":
numberOfExamplesToPickPerIteration=1000;
maximumNumberOfIterations=100000;
dataSet=importLIBSVMDataSet(workingDirectory,false,negativeToPositiveTrainingExamplesRatio,0.0,0.0);
break;
case ""String_Node_Str"":
numberOfExamplesToPickPerIteration=1000;
maximumNumberOfIterations=10000;
dataSet=importLIBSVMDataSet(workingDirectory,false,negativeToPositiveTrainingExamplesRatio,0.0,0.0);
break;
case ""String_Node_Str"":
numberOfExamplesToPickPerIteration=1;
maximumNumberOfIterations=1000;
dataSet=importLIBSVMDataSet(workingDirectory,false,negativeToPositiveTrainingExamplesRatio,0.0,0.0);
break;
case ""String_Node_Str"":
numberOfExamplesToPickPerIteration=10;
maximumNumberOfIterations=10000000;
dataSet=importLIBSVMDataSet(workingDirectory,false,negativeToPositiveTrainingExamplesRatio,0.0,0.0);
break;
case ""String_Node_Str"":
numberOfExamplesToPickPerIteration=10;
maximumNumberOfIterations=1000;
dataSet=importLIBSVMDataSet(workingDirectory,false,negativeToPositiveTrainingExamplesRatio,0.0,0.0);
break;
case ""String_Node_Str"":
numberOfExamplesToPickPerIteration=10000;
maximumNumberOfIterations=100000;
dataSet=importLIBSVMDataSet(workingDirectory,true,negativeToPositiveTrainingExamplesRatio,0.0,0.0);
break;
case ""String_Node_Str"":
numberOfExamplesToPickPerIteration=100;
maximumNumberOfIterations=1000;
dataSet=importLIBSVMDataSet(workingDirectory,false,negativeToPositiveTrainingExamplesRatio,0.0,0.0);
break;
case ""String_Node_Str"":
numberOfExamplesToPickPerIteration=10000;
maximumNumberOfIterations=1000000;
dataSet=importLIBSVMDataSet(workingDirectory,true,negativeToPositiveTrainingExamplesRatio,0.0,0.0);
break;
case ""String_Node_Str"":
numberOfExamplesToPickPerIteration=10000;
maximumNumberOfIterations=1000000;
dataSet=importLIBSVMDataSet(workingDirectory,true,negativeToPositiveTrainingExamplesRatio,0.0,0.0);
break;
default :
throw new IllegalStateException(""String_Node_Str"");
}
String resultsDirectoryName;
if (retrainClassifiers && useLogicIntegrator) resultsDirectoryName=""String_Node_Str"" + examplePickingMethod.name() + ""String_Node_Str"";
 else if (retrainClassifiers) resultsDirectoryName=""String_Node_Str"" + examplePickingMethod.name() + ""String_Node_Str"";
 else if (useLogicIntegrator) resultsDirectoryName=""String_Node_Str"" + examplePickingMethod.name() + ""String_Node_Str"";
 else resultsDirectoryName=""String_Node_Str"" + examplePickingMethod.name() + ""String_Node_Str"";
dataSet.exportStatistics(workingDirectory + ""String_Node_Str"");
results=runExperiments(numberOfExperimentRepetitions,numberOfExamplesToPickPerIteration,maximumNumberOfIterations,scoringFunctions,examplePickingMethod,useLogicIntegrator,retrainClassifiers,dataSet,resultTypes);
ConstrainedLearningExperiment.exportResults(numberOfExperimentRepetitions,numberOfExamplesToPickPerIteration,maximumNumberOfIterations,results,workingDirectory + resultsDirectoryName,resultTypes,includeTitleInResultsPlot,includeHorizontalAxisLabelInResultsPlot,includeVerticalAxisLabelInResultsPlot,includeLegendInResultsPlot);
logger.info(""String_Node_Str"");
}",0.9497129418274884
143971,"private void computeIntegratedDataAndErrorRates(){
  if (!needsComputeIntegratedDataAndErrorRates)   return;
  List<Data.PredictedInstance> integratedDataInstances=new ArrayList<>();
  List<ErrorRates.Instance> errorRatesInstances=new ArrayList<>();
  Map<Label,Map<Integer,Boolean>> integratedPredictions=new HashMap<>();
  for (  Label label : labels) {
    integratedPredictions.put(label,new HashMap<>());
    Map<Integer,int[]> predictions=new HashMap<>();
    data.stream().filter(i -> i.label().equals(label)).forEach(instance -> {
      if (!predictions.containsKey(instance.id()))       predictions.put(instance.id(),new int[2]);
      if (instance.value() >= 0.5)       predictions.get(instance.id())[0]++;
 else       predictions.get(instance.id())[1]++;
    }
);
    for (    Map.Entry<Integer,int[]> prediction : predictions.entrySet())     if (prediction.getValue()[0] >= prediction.getValue()[1]) {
      integratedDataInstances.add(new Data.PredictedInstance(prediction.getKey(),label,-1,1.0));
      integratedPredictions.get(label).put(prediction.getKey(),true);
    }
 else {
      integratedDataInstances.add(new Data.PredictedInstance(prediction.getKey(),label,-1,0.0));
      integratedPredictions.get(label).put(prediction.getKey(),false);
    }
    data.stream().filter(i -> i.label().equals(label)).map(Data.PredictedInstance::functionId).distinct().forEach(classifierID -> {
      int[] numberOfErrorSamples=new int[]{0};
      int[] numberOfSamples=new int[]{0};
      data.stream().filter(i -> i.label().equals(label) && i.functionId() == classifierID).forEach(instance -> {
        if ((instance.value() >= 0.5 && !integratedPredictions.get(label).get(instance.id())) || (instance.value() < 0.5 && integratedPredictions.get(label).get(instance.id())))         numberOfErrorSamples[0]++;
        numberOfSamples[0]++;
      }
);
      errorRatesInstances.add(new ErrorRates.Instance(label,classifierID,numberOfErrorSamples[0] / (double)numberOfSamples[0]));
    }
);
  }
  integratedData=new Data<>(integratedDataInstances);
  errorRates=new ErrorRates(errorRatesInstances);
  needsComputeIntegratedDataAndErrorRates=false;
}","private void computeIntegratedDataAndErrorRates(){
  if (!needsComputeIntegratedDataAndErrorRates)   return;
  List<Data.PredictedInstance> integratedDataInstances=new ArrayList<>();
  List<ErrorRates.Instance> errorRatesInstances=new ArrayList<>();
  Map<Label,Map<Integer,Boolean>> integratedPredictions=new HashMap<>();
  for (  Label label : labels) {
    integratedPredictions.put(label,new HashMap<>());
    Map<Integer,int[]> predictions=new HashMap<>();
    data.stream().filter(i -> i.label().equals(label)).forEach(instance -> {
      if (!predictions.containsKey(instance.id()))       predictions.put(instance.id(),new int[2]);
      if (instance.value() >= 0.5)       predictions.get(instance.id())[0]++;
 else       predictions.get(instance.id())[1]++;
    }
);
    for (    Map.Entry<Integer,int[]> prediction : predictions.entrySet())     if (prediction.getValue()[0] >= prediction.getValue()[1]) {
      integratedDataInstances.add(new Data.PredictedInstance(prediction.getKey(),label,-1,1.0));
      integratedPredictions.get(label).put(prediction.getKey(),true);
    }
 else {
      integratedDataInstances.add(new Data.PredictedInstance(prediction.getKey(),label,-1,0.0));
      integratedPredictions.get(label).put(prediction.getKey(),false);
    }
    data.stream().filter(i -> i.label().equals(label)).map(Data.PredictedInstance::functionId).distinct().forEach(functionId -> {
      int[] numberOfErrorSamples=new int[]{0};
      int[] numberOfSamples=new int[]{0};
      data.stream().filter(i -> i.label().equals(label) && i.functionId() == functionId).forEach(instance -> {
        if ((instance.value() >= 0.5 && !integratedPredictions.get(label).get(instance.id())) || (instance.value() < 0.5 && integratedPredictions.get(label).get(instance.id())))         numberOfErrorSamples[0]++;
        numberOfSamples[0]++;
      }
);
      errorRatesInstances.add(new ErrorRates.Instance(label,functionId,numberOfErrorSamples[0] / (double)numberOfSamples[0]));
    }
);
  }
  integratedData=new Data<>(integratedDataInstances);
  errorRates=new ErrorRates(errorRatesInstances);
  needsComputeIntegratedDataAndErrorRates=false;
}",0.9846511627906976
143972,"private AbstractBuilder(String predictedDataFilename){
  super(predictedDataFilename);
}","private AbstractBuilder(String predictedDataFilename){
  super(predictedDataFilename);
  extractLabelsSet();
}",0.8888888888888888
143973,"public BayesianCombinationOfClassifiers(List<boolean[][]> functionOutputs,int numberOfBurnInSamples,int numberOfThinningSamples,int numberOfSamples,double alpha){
  this.numberOfBurnInSamples=numberOfBurnInSamples;
  this.numberOfThinningSamples=numberOfThinningSamples;
  this.numberOfSamples=numberOfSamples;
  numberOfFunctions=functionOutputs.get(0)[0].length;
  numberOfDomains=functionOutputs.size();
  numberOfDataSamples=new int[numberOfDomains];
  functionOutputsArray=new int[numberOfFunctions][numberOfDomains][];
  for (int p=0; p < numberOfDomains; p++) {
    numberOfDataSamples[p]=functionOutputs.get(p).length;
    for (int j=0; j < numberOfFunctions; j++) {
      functionOutputsArray[j][p]=new int[numberOfDataSamples[p]];
      for (int i=0; i < numberOfDataSamples[p]; i++)       functionOutputsArray[j][p][i]=functionOutputs.get(p)[i][j] ? 1 : 0;
    }
  }
  dpPriors=new DirichletProcess[numberOfDomains];
  labelsSamples=new int[numberOfSamples][numberOfDomains][];
  labelPriorsSamples=new double[numberOfSamples][numberOfDomains];
  labelPriorsCounts=new double[numberOfDomains][2];
  confusionMatrixSamples=new double[numberOfSamples][numberOfDomains][numberOfFunctions][2][2];
  confusionMatrixCounts=new double[numberOfDomains][numberOfFunctions][2][2];
  clusterAssignmentSamples=new int[numberOfSamples][numberOfDomains][numberOfFunctions];
  priorMeans=new double[numberOfDomains];
  priorVariances=new double[numberOfDomains];
  labelMeans=new double[numberOfDomains][];
  labelVariances=new double[numberOfDomains][];
  errorRateMeans=new double[numberOfDomains][numberOfFunctions];
  errorRateVariances=new double[numberOfDomains][numberOfFunctions];
  for (int sampleIndex=0; sampleIndex < numberOfSamples; sampleIndex++)   for (int p=0; p < numberOfDomains; p++)   labelsSamples[sampleIndex][p]=new int[numberOfDataSamples[p]];
  for (int p=0; p < numberOfDomains; p++) {
    labelMeans[p]=new double[numberOfDataSamples[p]];
    labelVariances[p]=new double[numberOfDataSamples[p]];
    dpPriors[p]=new DirichletProcess(alpha,numberOfFunctions);
    labelPriorsSamples[0][p]=0.5;
    for (int j=0; j < numberOfFunctions; j++) {
      clusterAssignmentSamples[0][p][j]=0;
      dpPriors[p].addMemberToCluster(clusterAssignmentSamples[0][p][j]);
    }
    for (int i=0; i < numberOfDataSamples[p]; i++) {
      int sum=0;
      for (int j=0; j < numberOfFunctions; j++)       sum+=functionOutputsArray[j][p][i];
      labelsSamples[0][p][i]=sum >= (numberOfFunctions / 2) ? 1 : 0;
      updateCountsAfterSamplingLabel(0,p,i);
    }
  }
  samplePriors(0);
  for (int p=0; p < numberOfDomains; p++) {
    for (int j=0; j < numberOfFunctions; j++) {
      confusionMatrixSamples[0][p][0][0][0]=randomDataGenerator.nextBeta(confusionMatrixPrior[0][0] + confusionMatrixCounts[p][0][0][0],confusionMatrixPrior[0][1] + confusionMatrixCounts[p][0][0][1]);
      confusionMatrixSamples[0][p][0][1][0]=randomDataGenerator.nextBeta(confusionMatrixPrior[1][0] + confusionMatrixCounts[p][0][1][0],confusionMatrixPrior[1][1] + confusionMatrixCounts[p][0][1][1]);
      confusionMatrixSamples[0][p][0][0][1]=1 - confusionMatrixSamples[0][p][0][0][0];
      confusionMatrixSamples[0][p][0][1][1]=1 - confusionMatrixSamples[0][p][0][1][0];
    }
  }
}","public BayesianCombinationOfClassifiers(List<boolean[][]> functionOutputs,int numberOfBurnInSamples,int numberOfThinningSamples,int numberOfSamples,double alpha){
  this.numberOfBurnInSamples=numberOfBurnInSamples;
  this.numberOfThinningSamples=numberOfThinningSamples;
  this.numberOfSamples=numberOfSamples;
  numberOfFunctions=functionOutputs.get(0)[0].length;
  numberOfDomains=functionOutputs.size();
  numberOfDataSamples=new int[numberOfDomains];
  functionOutputsArray=new int[numberOfFunctions][numberOfDomains][];
  for (int p=0; p < numberOfDomains; p++) {
    numberOfDataSamples[p]=functionOutputs.get(p).length;
    for (int j=0; j < numberOfFunctions; j++) {
      functionOutputsArray[j][p]=new int[numberOfDataSamples[p]];
      for (int i=0; i < numberOfDataSamples[p]; i++)       functionOutputsArray[j][p][i]=functionOutputs.get(p)[i][j] ? 1 : 0;
    }
  }
  dpPriors=new DirichletProcess[numberOfDomains];
  labelsSamples=new int[numberOfSamples][numberOfDomains][];
  labelPriorsSamples=new double[numberOfSamples][numberOfDomains];
  labelPriorsCounts=new double[numberOfDomains][2];
  confusionMatrixSamples=new double[numberOfSamples][numberOfDomains][numberOfFunctions][2][2];
  confusionMatrixCounts=new double[numberOfDomains][numberOfFunctions][2][2];
  clusterAssignmentSamples=new int[numberOfSamples][numberOfDomains][numberOfFunctions];
  priorMeans=new double[numberOfDomains];
  priorVariances=new double[numberOfDomains];
  labelMeans=new double[numberOfDomains][];
  labelVariances=new double[numberOfDomains][];
  errorRateMeans=new double[numberOfDomains][numberOfFunctions];
  errorRateVariances=new double[numberOfDomains][numberOfFunctions];
  for (int sampleIndex=0; sampleIndex < numberOfSamples; sampleIndex++)   for (int p=0; p < numberOfDomains; p++)   labelsSamples[sampleIndex][p]=new int[numberOfDataSamples[p]];
  for (int p=0; p < numberOfDomains; p++) {
    labelMeans[p]=new double[numberOfDataSamples[p]];
    labelVariances[p]=new double[numberOfDataSamples[p]];
    dpPriors[p]=new DirichletProcess(alpha,numberOfFunctions);
    labelPriorsSamples[0][p]=0.5;
    for (int j=0; j < numberOfFunctions; j++) {
      clusterAssignmentSamples[0][p][j]=0;
      dpPriors[p].addMemberToCluster(clusterAssignmentSamples[0][p][j]);
    }
    for (int i=0; i < numberOfDataSamples[p]; i++) {
      int sum=0;
      for (int j=0; j < numberOfFunctions; j++)       sum+=functionOutputsArray[j][p][i];
      labelsSamples[0][p][i]=sum >= (numberOfFunctions / 2) ? 1 : 0;
      updateCountsAfterSamplingLabel(0,p,i);
    }
  }
  samplePriors(0);
  sampleConfusionMatrix(0);
}",0.8817934782608695
143974,"private void sampleClusterAssignments(int sampleNumber){
  for (int p=0; p < numberOfDomains; p++) {
    for (int j=0; j < numberOfFunctions; j++) {
      updateCountsBeforeSamplingClusterAssignment(sampleNumber,p,j);
      int currentNumberOfClusters=dpPriors[p].computeClustersDistribution();
      double cdf[]=new double[currentNumberOfClusters];
      double max=Double.NEGATIVE_INFINITY;
      for (int k=0; k < currentNumberOfClusters; k++) {
        int clusterID=dpPriors[p].getClusterID(k);
        cdf[k]=Math.log(dpPriors[p].getClusterUnnormalizedProbability(clusterID));
        cdf[k]+=confusionMatrixCounts[p][clusterID][0][0] * Math.log(confusionMatrixSamples[sampleNumber][p][clusterID][0][0]);
        cdf[k]+=confusionMatrixCounts[p][clusterID][0][1] * Math.log(confusionMatrixSamples[sampleNumber][p][clusterID][0][1]);
        cdf[k]+=confusionMatrixCounts[p][clusterID][1][0] * Math.log(confusionMatrixSamples[sampleNumber][p][clusterID][1][0]);
        cdf[k]+=confusionMatrixCounts[p][clusterID][1][1] * Math.log(confusionMatrixSamples[sampleNumber][p][clusterID][1][1]);
        if (max < cdf[k])         max=cdf[k];
      }
      cdf[0]-=max;
      for (int k=1; k < currentNumberOfClusters; k++) {
        cdf[k]-=max;
        cdf[k]=Math.log(Math.exp(cdf[k - 1]) + Math.exp(cdf[k]));
      }
      double uniform=Math.log(random.nextDouble()) + cdf[currentNumberOfClusters - 1];
      int newClusterID=dpPriors[p].getClusterID(currentNumberOfClusters - 1);
      clusterAssignmentSamples[sampleNumber][p][j]=newClusterID;
      for (int k=0; k < currentNumberOfClusters - 1; k++) {
        if (cdf[k] > uniform) {
          int clusterID=dpPriors[p].getClusterID(k);
          clusterAssignmentSamples[sampleNumber][p][j]=clusterID;
          break;
        }
      }
      updateCountsAfterSamplingClusterAssignment(sampleNumber,p,j);
    }
  }
}","private void sampleClusterAssignments(int sampleNumber){
  for (int p=0; p < numberOfDomains; p++) {
    for (int j=0; j < numberOfFunctions; j++) {
      int cnt_errs[][]=new int[2][2];
      for (int i=0; i < numberOfDataSamples[p]; i++)       cnt_errs[labelsSamples[sampleNumber][p][i]][functionOutputsArray[j][p][i]]++;
      updateCountsBeforeSamplingClusterAssignment(sampleNumber,p,j);
      int currentNumberOfClusters=dpPriors[p].computeClustersDistribution();
      double cdf[]=new double[currentNumberOfClusters];
      double max=Double.NEGATIVE_INFINITY;
      for (int k=0; k < currentNumberOfClusters; k++) {
        int clusterID=dpPriors[p].getClusterID(k);
        cdf[k]=Math.log(dpPriors[p].getClusterUnnormalizedProbability(clusterID));
        cdf[k]+=cnt_errs[0][0] * Math.log(confusionMatrixSamples[sampleNumber][p][clusterID][0][0]);
        cdf[k]+=cnt_errs[0][1] * Math.log(confusionMatrixSamples[sampleNumber][p][clusterID][0][1]);
        cdf[k]+=cnt_errs[1][0] * Math.log(confusionMatrixSamples[sampleNumber][p][clusterID][1][0]);
        cdf[k]+=cnt_errs[1][1] * Math.log(confusionMatrixSamples[sampleNumber][p][clusterID][1][1]);
        if (max < cdf[k])         max=cdf[k];
      }
      cdf[0]-=max;
      for (int k=1; k < currentNumberOfClusters; k++) {
        cdf[k]-=max;
        cdf[k]=Math.log(Math.exp(cdf[k - 1]) + Math.exp(cdf[k]));
      }
      double uniform=Math.log(random.nextDouble()) + cdf[currentNumberOfClusters - 1];
      int newClusterID=dpPriors[p].getClusterID(currentNumberOfClusters - 1);
      clusterAssignmentSamples[sampleNumber][p][j]=newClusterID;
      for (int k=0; k < currentNumberOfClusters - 1; k++) {
        if (cdf[k] > uniform) {
          int clusterID=dpPriors[p].getClusterID(k);
          clusterAssignmentSamples[sampleNumber][p][j]=clusterID;
          break;
        }
      }
      updateCountsAfterSamplingClusterAssignment(sampleNumber,p,j);
    }
  }
}",0.5066806392454808
143975,"private void sampleConfusionMatrix(int sampleNumber){
  for (int p=0; p < numberOfDomains; p++) {
    int currentNumberOfClusters=dpPriors[p].computeClustersDistribution();
    for (int k=0; k < currentNumberOfClusters; k++) {
      int clusterID=dpPriors[p].getClusterID(k);
      confusionMatrixSamples[sampleNumber][p][clusterID][0][0]=randomDataGenerator.nextBeta(confusionMatrixPrior[0][0] + confusionMatrixCounts[p][clusterID][0][0],confusionMatrixPrior[0][1] + confusionMatrixCounts[p][clusterID][0][1]);
      confusionMatrixSamples[sampleNumber][p][clusterID][1][0]=randomDataGenerator.nextBeta(confusionMatrixPrior[1][0] + confusionMatrixCounts[p][clusterID][1][0],confusionMatrixPrior[1][1] + confusionMatrixCounts[p][clusterID][1][1]);
      confusionMatrixSamples[sampleNumber][p][clusterID][0][1]=1 - confusionMatrixSamples[sampleNumber][p][clusterID][0][0];
      confusionMatrixSamples[sampleNumber][p][clusterID][1][1]=1 - confusionMatrixSamples[sampleNumber][p][clusterID][1][0];
    }
  }
}","private void sampleConfusionMatrix(int sampleNumber){
  for (int p=0; p < numberOfDomains; p++) {
    for (int j=0; j < numberOfFunctions; j++) {
      confusionMatrixSamples[sampleNumber][p][j][0][0]=randomDataGenerator.nextBeta(confusionMatrixPrior[0][0] + confusionMatrixCounts[p][j][0][0],confusionMatrixPrior[0][1] + confusionMatrixCounts[p][j][0][1]);
      confusionMatrixSamples[sampleNumber][p][j][1][0]=randomDataGenerator.nextBeta(confusionMatrixPrior[1][0] + confusionMatrixCounts[p][j][1][0],confusionMatrixPrior[1][1] + confusionMatrixCounts[p][j][1][1]);
      confusionMatrixSamples[sampleNumber][p][j][0][1]=1 - confusionMatrixSamples[sampleNumber][p][j][0][0];
      confusionMatrixSamples[sampleNumber][p][j][1][1]=1 - confusionMatrixSamples[sampleNumber][p][j][1][0];
    }
  }
}",0.5320796460176991
143976,"/** 
 * {@inheritDoc} 
 */
@Override public DenseVector transMult(Matrix matrix){
  if (matrix.getRowDimension() != size) {
    throw new IllegalArgumentException(""String_Node_Str"");
  }
  DenseVector resultVector=new DenseVector(matrix.getColumnDimension());
  double[] resultVectorArray=resultVector.getArray();
  for (int i=0; i < matrix.getRowDimension(); i++) {
    for (int j=0; j < size; j++) {
      resultVectorArray[i]+=array[j] * matrix.getElement(i,j);
    }
  }
  return resultVector;
}","/** 
 * {@inheritDoc} 
 */
@Override public DenseVector transMult(Matrix matrix){
  if (matrix.getRowDimension() != size) {
    throw new IllegalArgumentException(""String_Node_Str"");
  }
  DenseVector resultVector=new DenseVector(matrix.getColumnDimension());
  double[] resultVectorArray=resultVector.getArray();
  for (int i=0; i < matrix.getRowDimension(); i++) {
    for (int j=0; j < matrix.getColumnDimension(); j++) {
      resultVectorArray[j]+=array[i] * matrix.getElement(i,j);
    }
  }
  return resultVector;
}",0.950048971596474
143977,"private ConsensusADMMSolver(AbstractBuilder<?> builder){
  super(builder);
  objective=(SumFunction)builder.objective;
  constraintsVariablesIndexes=builder.constraintsVariablesIndexes;
  constraints=builder.constraints;
  maximumNumberOfIterationsWithNoPointChange=builder.maximumNumberOfIterationsWithNoPointChange;
  absoluteTolerance=Math.sqrt(currentPoint.size()) * builder.absoluteTolerance;
  relativeTolerance=builder.relativeTolerance;
  checkForPrimalAndDualResidualConvergence=builder.checkForPrimalAndDualResidualConvergence;
  primalResidualSquaredTerms=Vectors.build(objective.getNumberOfTerms(),VectorType.DENSE);
  mu=builder.mu;
  tauIncrement=builder.tauIncrement;
  tauDecrement=builder.tauDecrement;
  penaltyParameterSettingMethod=builder.penaltyParameterSettingMethod;
  penaltyParameter=builder.penaltyParameter;
  subProblemSolver=builder.subProblemSolver;
  subProblemSelectionMethod=builder.subProblemSelectionMethod;
  subProblemSelector=builder.subProblemSelector;
  numberOfSubProblemSamples=builder.numberOfSubProblemSamples;
  taskExecutor=Executors.newFixedThreadPool(builder.numberOfThreads);
  variableCopiesCounts=Vectors.dense(currentPoint.size());
  for (  int[] variableIndexes : Iterables.concat(objective.getTermVariables(),constraintsVariablesIndexes)) {
    Vector termPoint=Vectors.build(variableIndexes.length,currentPoint.type());
    termPoint.set(currentPoint.get(variableIndexes));
    variableCopies.add(termPoint);
    lagrangeMultipliers.add(Vectors.build(variableIndexes.length,currentPoint.type()));
    for (    int variableIndex : variableIndexes)     variableCopiesCounts.set(variableIndex,variableCopiesCounts.get(variableIndex) + 1);
  }
  variableCopiesSum=currentPoint.multElementwise(variableCopiesCounts);
  if (checkForGradientConvergence || logGradientNorm) {
    try {
      currentGradient=objective.getGradient(currentPoint);
    }
 catch (    NonSmoothFunctionException e) {
      logger.info(""String_Node_Str"");
    }
  }
  if (checkForObjectiveConvergence || logObjectiveValue)   currentObjectiveValue=objective.getValue(currentPoint);
}","private ConsensusADMMSolver(AbstractBuilder<?> builder){
  super(builder);
  objective=(SumFunction)builder.objective;
  constraintsVariablesIndexes=builder.constraintsVariablesIndexes;
  constraints=builder.constraints;
  maximumNumberOfIterationsWithNoPointChange=builder.maximumNumberOfIterationsWithNoPointChange;
  absoluteTolerance=Math.sqrt(currentPoint.size()) * builder.absoluteTolerance;
  relativeTolerance=builder.relativeTolerance;
  checkForPrimalAndDualResidualConvergence=builder.checkForPrimalAndDualResidualConvergence;
  primalResidualSquaredTerms=Vectors.build(objective.getNumberOfTerms(),VectorType.DENSE);
  mu=builder.mu;
  tauIncrement=builder.tauIncrement;
  tauDecrement=builder.tauDecrement;
  penaltyParameterSettingMethod=builder.penaltyParameterSettingMethod;
  penaltyParameter=builder.penaltyParameter;
  subProblemSolver=builder.subProblemSolver;
  subProblemSelectionMethod=builder.subProblemSelectionMethod;
  subProblemSelector=builder.subProblemSelector;
  numberOfSubProblemSamples=builder.numberOfSubProblemSamples;
  numberOfThreads=builder.numberOfThreads;
  variableCopiesCounts=Vectors.dense(currentPoint.size());
  for (  int[] variableIndexes : Iterables.concat(objective.getTermVariables(),constraintsVariablesIndexes)) {
    Vector termPoint=Vectors.build(variableIndexes.length,currentPoint.type());
    termPoint.set(currentPoint.get(variableIndexes));
    variableCopies.add(termPoint);
    lagrangeMultipliers.add(Vectors.build(variableIndexes.length,currentPoint.type()));
    for (    int variableIndex : variableIndexes)     variableCopiesCounts.set(variableIndex,variableCopiesCounts.get(variableIndex) + 1);
  }
  variableCopiesSum=currentPoint.multElementwise(variableCopiesCounts);
  if (checkForGradientConvergence || logGradientNorm) {
    try {
      currentGradient=objective.getGradient(currentPoint);
    }
 catch (    NonSmoothFunctionException e) {
      logger.info(""String_Node_Str"");
    }
  }
  if (checkForObjectiveConvergence || logObjectiveValue)   currentObjectiveValue=objective.getValue(currentPoint);
}",0.9820874134224982
143978,"@Override public void addResult(String name,List<PredictedDataInstance<T,S>> predictions,Function<PredictedDataInstance<T,S>,Boolean> groundTruth){
  Collections.sort(predictions,Collections.reverseOrder(Comparator.comparing(PredictedDataInstance::probability)));
  List<CurvePoint> points=new ArrayList<>();
  int truePositivesNumber=0;
  int falsePositivesNumber=0;
  int falseNegativesNumber=0;
  for (  PredictedDataInstance<T,S> prediction : predictions)   if (groundTruth.apply(prediction))   falseNegativesNumber++;
  points.add(new CurvePoint((truePositivesNumber + epsilon) / (truePositivesNumber + falseNegativesNumber + epsilon),(truePositivesNumber + epsilon) / (truePositivesNumber + falsePositivesNumber + epsilon)));
  double areaUnderCurve=0;
  if (numberOfCurvePoints < 0) {
    for (int predictionIndex=0; predictionIndex < predictions.size(); predictionIndex++) {
      do {
        if (groundTruth.apply(predictions.get(predictionIndex))) {
          falseNegativesNumber--;
          truePositivesNumber++;
        }
 else {
          falsePositivesNumber++;
        }
        predictionIndex++;
        if (predictionIndex == predictions.size())         break;
      }
 while (predictions.get(predictionIndex - 1).probability() == predictions.get(predictionIndex).probability());
      if (predictionIndex < predictions.size())       predictionIndex--;
      points.add(new CurvePoint((truePositivesNumber + epsilon) / (truePositivesNumber + falseNegativesNumber + epsilon),(truePositivesNumber + epsilon) / (truePositivesNumber + falsePositivesNumber + epsilon)));
      int k=points.size() - 1;
      areaUnderCurve+=0.5 * (points.get(k).getHorizontalAxisValue() - points.get(k - 1).getHorizontalAxisValue()) * (points.get(k).getVerticalAxisValue() + points.get(k - 1).getVerticalAxisValue());
    }
  }
 else {
    int previousThresholdPredictionIndex=0;
    for (double thresholdIndex=1; thresholdIndex < numberOfCurvePoints; thresholdIndex++) {
      double threshold=1 - thresholdIndex / (numberOfCurvePoints - 1);
      PredictedDataInstance<T,S> prediction=predictions.get(previousThresholdPredictionIndex);
      while (prediction.probability() >= threshold) {
        if (groundTruth.apply(prediction)) {
          falseNegativesNumber--;
          truePositivesNumber++;
        }
 else {
          falsePositivesNumber++;
        }
        if (++previousThresholdPredictionIndex < predictions.size())         prediction=predictions.get(previousThresholdPredictionIndex);
 else         break;
      }
      points.add(new CurvePoint((truePositivesNumber + epsilon) / (truePositivesNumber + falseNegativesNumber + epsilon),(truePositivesNumber + epsilon) / (truePositivesNumber + falsePositivesNumber + epsilon)));
      int k=points.size() - 1;
      areaUnderCurve+=0.5 * (points.get(k).getHorizontalAxisValue() - points.get(k - 1).getHorizontalAxisValue()) * (points.get(k).getVerticalAxisValue() + points.get(k - 1).getVerticalAxisValue());
      if (previousThresholdPredictionIndex == predictions.size())       break;
    }
  }
  curves.add(new Curve(name,points));
  areaUnderCurves.add(areaUnderCurve);
}","@Override public void addResult(String name,List<PredictedDataInstance<T,S>> predictions,Function<PredictedDataInstance<T,S>,Boolean> groundTruth){
  if (predictions.size() == 0) {
    List<CurvePoint> points=new ArrayList<>();
    points.add(new CurvePoint(0,1));
    points.add(new CurvePoint(1,1));
    curves.add(new Curve(name,points));
    areaUnderCurves.add(1.0);
    return;
  }
  Collections.sort(predictions,Collections.reverseOrder(Comparator.comparing(PredictedDataInstance::probability)));
  List<CurvePoint> points=new ArrayList<>();
  int truePositivesNumber=0;
  int falsePositivesNumber=0;
  int falseNegativesNumber=0;
  for (  PredictedDataInstance<T,S> prediction : predictions)   if (groundTruth.apply(prediction))   falseNegativesNumber++;
  points.add(new CurvePoint((truePositivesNumber + epsilon) / (truePositivesNumber + falseNegativesNumber + epsilon),(truePositivesNumber + epsilon) / (truePositivesNumber + falsePositivesNumber + epsilon)));
  double areaUnderCurve=0;
  if (numberOfCurvePoints < 0) {
    for (int predictionIndex=0; predictionIndex < predictions.size(); predictionIndex++) {
      do {
        if (groundTruth.apply(predictions.get(predictionIndex))) {
          falseNegativesNumber--;
          truePositivesNumber++;
        }
 else {
          falsePositivesNumber++;
        }
        predictionIndex++;
        if (predictionIndex == predictions.size())         break;
      }
 while (predictions.get(predictionIndex - 1).probability() == predictions.get(predictionIndex).probability());
      if (predictionIndex < predictions.size())       predictionIndex--;
      points.add(new CurvePoint((truePositivesNumber + epsilon) / (truePositivesNumber + falseNegativesNumber + epsilon),(truePositivesNumber + epsilon) / (truePositivesNumber + falsePositivesNumber + epsilon)));
      int k=points.size() - 1;
      areaUnderCurve+=0.5 * (points.get(k).getHorizontalAxisValue() - points.get(k - 1).getHorizontalAxisValue()) * (points.get(k).getVerticalAxisValue() + points.get(k - 1).getVerticalAxisValue());
    }
  }
 else {
    int previousThresholdPredictionIndex=0;
    for (double thresholdIndex=1; thresholdIndex < numberOfCurvePoints; thresholdIndex++) {
      double threshold=1 - thresholdIndex / (numberOfCurvePoints - 1);
      PredictedDataInstance<T,S> prediction=predictions.get(previousThresholdPredictionIndex);
      while (prediction.probability() >= threshold) {
        if (groundTruth.apply(prediction)) {
          falseNegativesNumber--;
          truePositivesNumber++;
        }
 else {
          falsePositivesNumber++;
        }
        if (++previousThresholdPredictionIndex < predictions.size())         prediction=predictions.get(previousThresholdPredictionIndex);
 else         break;
      }
      points.add(new CurvePoint((truePositivesNumber + epsilon) / (truePositivesNumber + falseNegativesNumber + epsilon),(truePositivesNumber + epsilon) / (truePositivesNumber + falsePositivesNumber + epsilon)));
      int k=points.size() - 1;
      areaUnderCurve+=0.5 * (points.get(k).getHorizontalAxisValue() - points.get(k - 1).getHorizontalAxisValue()) * (points.get(k).getVerticalAxisValue() + points.get(k - 1).getVerticalAxisValue());
      if (previousThresholdPredictionIndex == predictions.size())       break;
    }
  }
  curves.add(new Curve(name,points));
  areaUnderCurves.add(areaUnderCurve);
}",0.9632352941176472
143979,"public static ExperimentResults runExperiment(ErrorEstimationMethod method,List<boolean[][]> functionOutputs,List<boolean[]> trueLabels,List<boolean[][]> evaluationFunctionOutputs,double alpha,double gamma){
  double[][] errorRates=new double[functionOutputs.size()][];
  boolean[][] labels=new boolean[functionOutputs.size()][];
  int numberOfClusters=1;
  double logLikelihood=0;
switch (method) {
case BAYESIAN_COMBINATION_OF_CLASSIFIERS:
    BayesianCombinationOfClassifiers bcc=new BayesianCombinationOfClassifiers(functionOutputs,18000,10,200,alpha);
  bcc.runGibbsSampler();
errorRates=bcc.getErrorRatesMeans();
logLikelihood=bcc.logLikelihood(evaluationFunctionOutputs);
double[][] labelMeansBcc=bcc.getLabelMeans();
for (int p=0; p < functionOutputs.size(); p++) {
labels[p]=new boolean[functionOutputs.get(p).length];
for (int i=0; i < functionOutputs.get(p).length; i++) {
labels[p][i]=labelMeansBcc[p][i] >= 0.5;
}
}
break;
case AR_2:
for (int p=0; p < functionOutputs.size(); p++) {
int numberOfFunctions=functionOutputs.get(p)[0].length;
ErrorEstimationData errorEstimationData=new ErrorEstimationData.Builder(Arrays.asList(functionOutputs.get(p)),2,true).build();
ErrorEstimation errorEstimation=new ErrorEstimation.Builder(errorEstimationData).optimizationSolverType(ErrorEstimationInternalSolver.IP_OPT).build();
double[] allErrorRates=errorEstimation.solve().getErrorRates().array;
errorRates[p]=new double[numberOfFunctions];
System.arraycopy(allErrorRates,0,errorRates[p],0,numberOfFunctions);
labels[p]=new boolean[functionOutputs.get(p).length];
for (int i=0; i < functionOutputs.get(p).length; i++) {
double labelsSum=0;
double errorRatesSum=0;
for (int j=0; j < functionOutputs.get(p)[i].length; j++) {
labelsSum+=(1 - errorRates[p][j]) * (functionOutputs.get(p)[i][j] ? 1 : 0);
errorRatesSum+=(1 - errorRates[p][j]);
}
labels[p][i]=labelsSum / errorRatesSum >= 0.5;
}
}
break;
case AR_N:
for (int p=0; p < functionOutputs.size(); p++) {
int numberOfFunctions=functionOutputs.get(p)[0].length;
ErrorEstimationData errorEstimationData=new ErrorEstimationData.Builder(Arrays.asList(functionOutputs.get(p)),functionOutputs.get(0)[0].length,true).build();
ErrorEstimation errorEstimation=new ErrorEstimation.Builder(errorEstimationData).optimizationSolverType(ErrorEstimationInternalSolver.IP_OPT).build();
double[] allErrorRates=errorEstimation.solve().getErrorRates().array;
errorRates[p]=new double[numberOfFunctions];
System.arraycopy(allErrorRates,0,errorRates[p],0,numberOfFunctions);
labels[p]=new boolean[functionOutputs.get(p).length];
for (int i=0; i < functionOutputs.get(p).length; i++) {
double labelsSum=0;
double errorRatesSum=0;
for (int j=0; j < functionOutputs.get(p)[i].length; j++) {
labelsSum+=(1 - errorRates[p][j]) * (functionOutputs.get(p)[i][j] ? 1 : 0);
errorRatesSum+=(1 - errorRates[p][j]);
}
labels[p][i]=labelsSum / errorRatesSum >= 0.5;
}
}
break;
case ERROR_ESTIMATION_GM:
ErrorEstimationGraphicalModel eesgm=new ErrorEstimationGraphicalModel(functionOutputs,4000,10,200);
eesgm.runGibbsSampler();
errorRates=eesgm.getErrorRatesMeans();
double[][] labelMeansEesgm=eesgm.getLabelMeans();
for (int p=0; p < functionOutputs.size(); p++) {
labels[p]=new boolean[functionOutputs.get(p).length];
for (int i=0; i < functionOutputs.get(p).length; i++) {
labels[p][i]=labelMeansEesgm[p][i] >= 0.5;
}
}
break;
case COUPLED_ERROR_ESTIMATION_GM:
CoupledErrorEstimationGraphicalModel eedfdpgm=new CoupledErrorEstimationGraphicalModel(functionOutputs,5000,10,alpha);
eedfdpgm.performGibbsSampling();
errorRates=eedfdpgm.getErrorRatesMeans();
logLikelihood=eedfdpgm.logLikelihood(evaluationFunctionOutputs);
double[][] labelMeansEedfdpgm=eedfdpgm.getLabelMeans();
for (int p=0; p < functionOutputs.size(); p++) {
labels[p]=new boolean[functionOutputs.get(p).length];
for (int i=0; i < functionOutputs.get(p).length; i++) {
labels[p][i]=labelMeansEedfdpgm[p][i] >= 0.5;
}
}
break;
case HIERARCHICAL_COUPLED_ERROR_ESTIMATION_GM:
ErrorEstimationDomainsHDPNew eedfhdp=new ErrorEstimationDomainsHDPNew(functionOutputs,alpha,gamma);
eedfhdp.run_gibbs_collapsed(3000);
eedfhdp.run_gibbs_uncollapsed(1000,10,200);
errorRates=eedfhdp.rates_to_return;
double[][] labelMeansEedfhdpmgm=eedfhdp.labels_to_return;
int li_cnt[][]=new int[functionOutputs.size()][2];
for (int p=0; p < functionOutputs.size(); p++) {
labels[p]=new boolean[functionOutputs.get(p).length];
for (int i=0; i < functionOutputs.get(p).length; i++) {
labels[p][i]=labelMeansEedfhdpmgm[p][i] >= 0.5;
int lid=labelMeansEedfhdpmgm[p][i] >= 0.5 ? 1 : 0;
li_cnt[p][lid]++;
}
}
logLikelihood=eedfhdp.get_log_likelihood(evaluationFunctionOutputs,alpha,gamma,1000,li_cnt);
break;
}
double[] errorRatesMAD=new double[functionOutputs.size()];
double errorRatesMADMean=0;
double[] labelsErrorRate=new double[functionOutputs.size()];
double labelsErrorRateMean=0;
for (int p=0; p < functionOutputs.size(); p++) {
labelsErrorRate[p]=0;
double[] realErrorRates=new double[errorRates[p].length];
for (int i=0; i < trueLabels.get(p).length; i++) {
labelsErrorRate[p]+=(labels[p][i] != trueLabels.get(p)[i]) ? 1 : 0;
for (int j=0; j < errorRates[p].length; j++) realErrorRates[j]+=(functionOutputs.get(p)[i][j] != trueLabels.get(p)[i]) ? 1 : 0;
}
labelsErrorRate[p]/=trueLabels.get(p).length;
labelsErrorRateMean+=labelsErrorRate[p];
errorRatesMAD[p]=0;
for (int j=0; j < errorRates[p].length; j++) {
realErrorRates[j]/=trueLabels.get(p).length;
errorRatesMAD[p]+=Math.abs(errorRates[p][j] - realErrorRates[j]);
}
errorRatesMAD[p]/=errorRates[p].length;
errorRatesMADMean+=errorRatesMAD[p];
}
errorRatesMADMean/=functionOutputs.size();
labelsErrorRateMean/=functionOutputs.size();
return new ExperimentResults(errorRates,errorRatesMADMean,labelsErrorRateMean,logLikelihood);
}","public static ExperimentResults runExperiment(ErrorEstimationMethod method,List<boolean[][]> functionOutputs,List<boolean[]> trueLabels,List<boolean[][]> evaluationFunctionOutputs,double alpha,double gamma){
  double[][] errorRates=new double[functionOutputs.size()][];
  boolean[][] labels=new boolean[functionOutputs.size()][];
  int numberOfClusters=1;
  double logLikelihood=0;
switch (method) {
case BAYESIAN_COMBINATION_OF_CLASSIFIERS:
    BayesianCombinationOfClassifiers bcc=new BayesianCombinationOfClassifiers(functionOutputs,4000,10,200,alpha);
  bcc.runGibbsSampler();
errorRates=bcc.getErrorRatesMeans();
logLikelihood=bcc.logLikelihood(evaluationFunctionOutputs);
double[][] labelMeansBcc=bcc.getLabelMeans();
for (int p=0; p < functionOutputs.size(); p++) {
labels[p]=new boolean[functionOutputs.get(p).length];
for (int i=0; i < functionOutputs.get(p).length; i++) {
labels[p][i]=labelMeansBcc[p][i] >= 0.5;
}
}
break;
case AR_2:
for (int p=0; p < functionOutputs.size(); p++) {
int numberOfFunctions=functionOutputs.get(p)[0].length;
ErrorEstimationData errorEstimationData=new ErrorEstimationData.Builder(Arrays.asList(functionOutputs.get(p)),2,true).build();
ErrorEstimation errorEstimation=new ErrorEstimation.Builder(errorEstimationData).optimizationSolverType(ErrorEstimationInternalSolver.IP_OPT).build();
double[] allErrorRates=errorEstimation.solve().getErrorRates().array;
errorRates[p]=new double[numberOfFunctions];
System.arraycopy(allErrorRates,0,errorRates[p],0,numberOfFunctions);
labels[p]=new boolean[functionOutputs.get(p).length];
for (int i=0; i < functionOutputs.get(p).length; i++) {
double labelsSum=0;
double errorRatesSum=0;
for (int j=0; j < functionOutputs.get(p)[i].length; j++) {
labelsSum+=(1 - errorRates[p][j]) * (functionOutputs.get(p)[i][j] ? 1 : 0);
errorRatesSum+=(1 - errorRates[p][j]);
}
labels[p][i]=labelsSum / errorRatesSum >= 0.5;
}
}
break;
case AR_N:
for (int p=0; p < functionOutputs.size(); p++) {
int numberOfFunctions=functionOutputs.get(p)[0].length;
ErrorEstimationData errorEstimationData=new ErrorEstimationData.Builder(Arrays.asList(functionOutputs.get(p)),functionOutputs.get(0)[0].length,true).build();
ErrorEstimation errorEstimation=new ErrorEstimation.Builder(errorEstimationData).optimizationSolverType(ErrorEstimationInternalSolver.IP_OPT).build();
double[] allErrorRates=errorEstimation.solve().getErrorRates().array;
errorRates[p]=new double[numberOfFunctions];
System.arraycopy(allErrorRates,0,errorRates[p],0,numberOfFunctions);
labels[p]=new boolean[functionOutputs.get(p).length];
for (int i=0; i < functionOutputs.get(p).length; i++) {
double labelsSum=0;
double errorRatesSum=0;
for (int j=0; j < functionOutputs.get(p)[i].length; j++) {
labelsSum+=(1 - errorRates[p][j]) * (functionOutputs.get(p)[i][j] ? 1 : 0);
errorRatesSum+=(1 - errorRates[p][j]);
}
labels[p][i]=labelsSum / errorRatesSum >= 0.5;
}
}
break;
case ERROR_ESTIMATION_GM:
BayesianErrorEstimation eesgm=new BayesianErrorEstimation(functionOutputs,4000,10,200);
eesgm.runGibbsSampler();
errorRates=eesgm.getErrorRatesMeans();
double[][] labelMeansEesgm=eesgm.getLabelMeans();
for (int p=0; p < functionOutputs.size(); p++) {
labels[p]=new boolean[functionOutputs.get(p).length];
for (int i=0; i < functionOutputs.get(p).length; i++) {
labels[p][i]=labelMeansEesgm[p][i] >= 0.5;
}
}
break;
case COUPLED_ERROR_ESTIMATION_GM:
CoupledBayesianErrorEstimation eedfdpgm=new CoupledBayesianErrorEstimation(functionOutputs,5000,10,alpha);
eedfdpgm.performGibbsSampling();
errorRates=eedfdpgm.getErrorRatesMeans();
logLikelihood=eedfdpgm.logLikelihood(evaluationFunctionOutputs);
double[][] labelMeansEedfdpgm=eedfdpgm.getLabelMeans();
for (int p=0; p < functionOutputs.size(); p++) {
labels[p]=new boolean[functionOutputs.get(p).length];
for (int i=0; i < functionOutputs.get(p).length; i++) {
labels[p][i]=labelMeansEedfdpgm[p][i] >= 0.5;
}
}
break;
case HIERARCHICAL_COUPLED_ERROR_ESTIMATION_GM:
HierarchicalCoupledBayesianErrorEstimation hcee=new HierarchicalCoupledBayesianErrorEstimation(functionOutputs,4000,10,200,alpha,gamma);
hcee.runGibbsSampler();
errorRates=hcee.getErrorRatesMeans();
logLikelihood=hcee.logLikelihood(evaluationFunctionOutputs);
double[][] labelMeansHcee=hcee.getLabelMeans();
for (int p=0; p < functionOutputs.size(); p++) {
labels[p]=new boolean[functionOutputs.get(p).length];
for (int i=0; i < functionOutputs.get(p).length; i++) {
labels[p][i]=labelMeansHcee[p][i] >= 0.5;
}
}
break;
}
double[] errorRatesMAD=new double[functionOutputs.size()];
double errorRatesMADMean=0;
double[] labelsErrorRate=new double[functionOutputs.size()];
double labelsErrorRateMean=0;
for (int p=0; p < functionOutputs.size(); p++) {
labelsErrorRate[p]=0;
double[] realErrorRates=new double[errorRates[p].length];
for (int i=0; i < trueLabels.get(p).length; i++) {
labelsErrorRate[p]+=(labels[p][i] != trueLabels.get(p)[i]) ? 1 : 0;
for (int j=0; j < errorRates[p].length; j++) realErrorRates[j]+=(functionOutputs.get(p)[i][j] != trueLabels.get(p)[i]) ? 1 : 0;
}
labelsErrorRate[p]/=trueLabels.get(p).length;
labelsErrorRateMean+=labelsErrorRate[p];
errorRatesMAD[p]=0;
for (int j=0; j < errorRates[p].length; j++) {
realErrorRates[j]/=trueLabels.get(p).length;
errorRatesMAD[p]+=Math.abs(errorRates[p][j] - realErrorRates[j]);
}
errorRatesMAD[p]/=errorRates[p].length;
errorRatesMADMean+=errorRatesMAD[p];
}
errorRatesMADMean/=functionOutputs.size();
labelsErrorRateMean/=functionOutputs.size();
return new ExperimentResults(errorRates,errorRatesMADMean,labelsErrorRateMean,logLikelihood);
}",0.9172639589416866
143980,"public static void main(String[] args){
  int numberOfExperimentRepetitions=10;
  int loggingLevel=2;
  String filename=args[0];
  String separator=""String_Node_Str"";
  double[] classificationThresholds=new double[]{Double.parseDouble(args[1])};
  List<String> domainNames=new ArrayList<>();
  List<boolean[][]> functionOutputs=new ArrayList<>();
  List<boolean[]> trueLabels=new ArrayList<>();
  List<boolean[][]> evaluationFunctionOutputs=new ArrayList<>();
  for (  File file : new File(filename).listFiles()) {
    if (file.isFile()) {
      DomainData data=parseLabeledDataFromCSVFile(file,separator,classificationThresholds,1,true);
      domainNames.add(data.domainName);
      functionOutputs.add(data.functionOutputs);
      trueLabels.add(data.trueLabels);
      evaluationFunctionOutputs.add(data.evaluationFunctionOutputs);
    }
  }
  CombinedResults results=new CombinedResults();
  for (int repetition=0; repetition < numberOfExperimentRepetitions; repetition++) {
    System.out.println(""String_Node_Str"" + (repetition + 1) + ""String_Node_Str"");
    ErrorEstimationMethod[] errorEstimationMethods=new ErrorEstimationMethod[]{ErrorEstimationMethod.BAYESIAN_COMBINATION_OF_CLASSIFIERS,ErrorEstimationMethod.AR_2,ErrorEstimationMethod.ERROR_ESTIMATION_GM,ErrorEstimationMethod.COUPLED_ERROR_ESTIMATION_GM};
    Double[] alphaValues=new Double[]{1e3,1e4,1e5,1e6,1e7};
    Double[] gammaValues=new Double[]{1e-1,1e0};
    runExperiments(loggingLevel,domainNames,errorEstimationMethods,alphaValues,gammaValues,functionOutputs,trueLabels,evaluationFunctionOutputs,results);
  }
  System.out.println(""String_Node_Str"");
  Map<ErrorEstimationMethod,double[]> errorRateMADStatistics=results.getErrorRatesMADStatistics();
  Map<ErrorEstimationMethod,double[]> labelMADStatistics=results.getLabelMADStatistics();
  for (  ErrorEstimationMethod method : results.getMethods()) {
    System.out.println(String.format(method.name() + ""String_Node_Str"" + ""String_Node_Str""+ ""String_Node_Str"",errorRateMADStatistics.get(method)[0],errorRateMADStatistics.get(method)[1],labelMADStatistics.get(method)[0],labelMADStatistics.get(method)[1]));
  }
  System.out.println(""String_Node_Str"");
}","public static void main(String[] args){
  int numberOfExperimentRepetitions=10;
  int loggingLevel=2;
  String filename=args[0];
  String separator=""String_Node_Str"";
  double[] classificationThresholds=new double[]{Double.parseDouble(args[1])};
  List<String> domainNames=new ArrayList<>();
  List<boolean[][]> functionOutputs=new ArrayList<>();
  List<boolean[]> trueLabels=new ArrayList<>();
  List<boolean[][]> evaluationFunctionOutputs=new ArrayList<>();
  for (  File file : new File(filename).listFiles()) {
    if (file.isFile()) {
      DomainData data=parseLabeledDataFromCSVFile(file,separator,classificationThresholds,1,true);
      domainNames.add(data.domainName);
      functionOutputs.add(data.functionOutputs);
      trueLabels.add(data.trueLabels);
      evaluationFunctionOutputs.add(data.evaluationFunctionOutputs);
    }
  }
  CombinedResults results=new CombinedResults();
  for (int repetition=0; repetition < numberOfExperimentRepetitions; repetition++) {
    System.out.println(""String_Node_Str"" + (repetition + 1) + ""String_Node_Str"");
    ErrorEstimationMethod[] errorEstimationMethods=new ErrorEstimationMethod[]{ErrorEstimationMethod.HIERARCHICAL_COUPLED_ERROR_ESTIMATION_GM};
    Double[] alphaValues=new Double[]{1e-4,1e-3,1e-2,1e-1,1e0,1e1,1e2,1e3,1e4};
    Double[] gammaValues=new Double[]{1e-4,1e-3,1e-2,1e-1,1e0,1e1,1e2,1e3,1e4};
    runExperiments(loggingLevel,domainNames,errorEstimationMethods,alphaValues,gammaValues,functionOutputs,trueLabels,evaluationFunctionOutputs,results);
  }
  System.out.println(""String_Node_Str"");
  Map<ErrorEstimationMethod,double[]> errorRateMADStatistics=results.getErrorRatesMADStatistics();
  Map<ErrorEstimationMethod,double[]> labelMADStatistics=results.getLabelMADStatistics();
  for (  ErrorEstimationMethod method : results.getMethods()) {
    System.out.println(String.format(method.name() + ""String_Node_Str"" + ""String_Node_Str""+ ""String_Node_Str"",errorRateMADStatistics.get(method)[0],errorRateMADStatistics.get(method)[1],labelMADStatistics.get(method)[0],labelMADStatistics.get(method)[1]));
  }
  System.out.println(""String_Node_Str"");
}",0.9528455284552846
143981,"public static void runExperiments(int loggingLevel,List<String> domainNames,ErrorEstimationMethod[] errorEstimationMethods,Double[] alphaValues,Double[] gammaValues,List<boolean[][]> functionOutputs,List<boolean[]> trueLabels,List<boolean[][]> evaluationFunctionOutputs,CombinedResults combinedResults){
  String trueErrorRatesString=""String_Node_Str"";
  trueErrorRatesString+=""String_Node_Str"";
  double[][] realErrorRates=new double[functionOutputs.size()][];
  for (int p=0; p < functionOutputs.size(); p++) {
    realErrorRates[p]=new double[functionOutputs.get(p)[0].length];
    for (int i=0; i < trueLabels.get(p).length; i++)     for (int j=0; j < functionOutputs.get(p)[i].length; j++)     realErrorRates[p][j]+=(functionOutputs.get(p)[i][j] != trueLabels.get(p)[i]) ? 1 : 0;
    for (int j=0; j < functionOutputs.get(p)[0].length; j++)     realErrorRates[p][j]/=trueLabels.get(p).length;
    trueErrorRatesString+=domainNames.get(p);
    for (int j=0; j < functionOutputs.get(p)[0].length; j++)     trueErrorRatesString+=""String_Node_Str"" + realErrorRates[p][j];
    trueErrorRatesString+=""String_Node_Str"";
  }
  if (loggingLevel > 2)   System.out.print(trueErrorRatesString);
  boolean[][] majorityVoteLabels=new boolean[functionOutputs.size()][];
  for (int p=0; p < functionOutputs.size(); p++) {
    majorityVoteLabels[p]=new boolean[functionOutputs.get(p).length];
    for (int i=0; i < functionOutputs.get(p).length; i++) {
      double labelsSum=0;
      for (int j=0; j < functionOutputs.get(p)[i].length; j++) {
        labelsSum+=(functionOutputs.get(p)[i][j] ? 1 : 0);
      }
      majorityVoteLabels[p][i]=labelsSum / functionOutputs.get(p)[i].length >= 0.5;
    }
  }
  double majorityVoteLabelMAD=0;
  for (int p=0; p < functionOutputs.size(); p++) {
    double labelsErrorRate=0;
    for (int i=0; i < trueLabels.get(p).length; i++)     labelsErrorRate+=(majorityVoteLabels[p][i] != trueLabels.get(p)[i]) ? 1 : 0;
    labelsErrorRate/=trueLabels.get(p).length;
    majorityVoteLabelMAD+=labelsErrorRate;
  }
  majorityVoteLabelMAD/=functionOutputs.size();
  if (loggingLevel > 1)   System.out.println(""String_Node_Str"" + majorityVoteLabelMAD);
  double majorityVoteErrorRateMAD=0;
  for (int p=0; p < functionOutputs.size(); p++) {
    double[] estimatedErrorRates=new double[functionOutputs.get(p)[0].length];
    for (int i=0; i < majorityVoteLabels[p].length; i++)     for (int j=0; j < functionOutputs.get(p)[i].length; j++)     estimatedErrorRates[j]+=(functionOutputs.get(p)[i][j] != majorityVoteLabels[p][i]) ? 1 : 0;
    double errorRateMAD=0;
    for (int j=0; j < functionOutputs.get(p)[0].length; j++)     errorRateMAD+=Math.abs(realErrorRates[p][j] - estimatedErrorRates[j] / majorityVoteLabels[p].length);
    majorityVoteErrorRateMAD+=errorRateMAD / functionOutputs.get(p)[0].length;
  }
  majorityVoteErrorRateMAD/=functionOutputs.size();
  if (loggingLevel > 1)   System.out.println(""String_Node_Str"" + majorityVoteErrorRateMAD);
  combinedResults.addResult(ErrorEstimationMethod.MAJORITY_VOTE,majorityVoteErrorRateMAD,majorityVoteLabelMAD);
  Arrays.asList(errorEstimationMethods).parallelStream().forEach(method -> {
    if (method != ErrorEstimationMethod.AR_2 && method != ErrorEstimationMethod.AR_N && method != ErrorEstimationMethod.ERROR_ESTIMATION_GM) {
      ConcurrentSkipListSet<ExperimentResults> differentParameterizationResults=new ConcurrentSkipListSet<>();
      Arrays.asList(alphaValues).parallelStream().forEach(alpha -> {
        if (method == ErrorEstimationMethod.HIERARCHICAL_COUPLED_ERROR_ESTIMATION_GM) {
          Arrays.asList(gammaValues).parallelStream().forEach(gamma -> {
            ExperimentResults results=runExperiment(method,functionOutputs,trueLabels,evaluationFunctionOutputs,gamma,alpha);
            differentParameterizationResults.add(results);
            String resultsString=""String_Node_Str"" + method + ""String_Node_Str""+ gamma+ ""String_Node_Str""+ alpha+ ""String_Node_Str""+ results.getErrorRateMAD()+ ""String_Node_Str""+ results.getLabelMAD()+ ""String_Node_Str""+ results.getLogLikelihood();
            resultsString+=""String_Node_Str"";
            if (loggingLevel > 2)             for (int p=0; p < functionOutputs.size(); p++) {
              resultsString+=domainNames.get(p);
              for (int j=0; j < functionOutputs.get(p)[0].length; j++)               resultsString+=""String_Node_Str"" + results.getErrorRates()[p][j];
              resultsString+=""String_Node_Str"";
            }
            if (loggingLevel > 1)             System.out.print(resultsString);
          }
);
        }
 else {
          ExperimentResults results=runExperiment(method,functionOutputs,trueLabels,evaluationFunctionOutputs,alpha,0);
          differentParameterizationResults.add(results);
          String resultsString=""String_Node_Str"" + method + ""String_Node_Str""+ alpha+ ""String_Node_Str""+ results.getErrorRateMAD()+ ""String_Node_Str""+ results.getLabelMAD()+ ""String_Node_Str""+ results.getLogLikelihood();
          resultsString+=""String_Node_Str"";
          if (loggingLevel > 2)           for (int p=0; p < functionOutputs.size(); p++) {
            resultsString+=domainNames.get(p);
            for (int j=0; j < functionOutputs.get(p)[0].length; j++)             resultsString+=""String_Node_Str"" + results.getErrorRates()[p][j];
            resultsString+=""String_Node_Str"";
          }
          if (loggingLevel > 1)           System.out.print(resultsString);
        }
      }
);
      combinedResults.addResult(method,differentParameterizationResults.last().getErrorRateMAD(),differentParameterizationResults.last().getLabelMAD());
    }
 else {
      ExperimentResults results=runExperiment(method,functionOutputs,trueLabels,evaluationFunctionOutputs,0,0);
      combinedResults.addResult(method,results.getErrorRateMAD(),results.getLabelMAD());
      String resultsString=""String_Node_Str"" + method + ""String_Node_Str""+ results.getErrorRateMAD()+ ""String_Node_Str""+ results.getLabelMAD();
      resultsString+=""String_Node_Str"";
      if (loggingLevel > 2)       for (int p=0; p < functionOutputs.size(); p++) {
        resultsString+=domainNames.get(p);
        for (int j=0; j < functionOutputs.get(p)[0].length; j++)         resultsString+=""String_Node_Str"" + results.getErrorRates()[p][j];
        resultsString+=""String_Node_Str"";
      }
      if (loggingLevel > 1)       System.out.print(resultsString);
    }
  }
);
  if (loggingLevel > 1)   System.out.println(""String_Node_Str"");
}","public static void runExperiments(int loggingLevel,List<String> domainNames,ErrorEstimationMethod[] errorEstimationMethods,Double[] alphaValues,Double[] gammaValues,List<boolean[][]> functionOutputs,List<boolean[]> trueLabels,List<boolean[][]> evaluationFunctionOutputs,CombinedResults combinedResults){
  String trueErrorRatesString=""String_Node_Str"";
  trueErrorRatesString+=""String_Node_Str"";
  double[][] realErrorRates=new double[functionOutputs.size()][];
  for (int p=0; p < functionOutputs.size(); p++) {
    realErrorRates[p]=new double[functionOutputs.get(p)[0].length];
    for (int i=0; i < trueLabels.get(p).length; i++)     for (int j=0; j < functionOutputs.get(p)[i].length; j++)     realErrorRates[p][j]+=(functionOutputs.get(p)[i][j] != trueLabels.get(p)[i]) ? 1 : 0;
    for (int j=0; j < functionOutputs.get(p)[0].length; j++)     realErrorRates[p][j]/=trueLabels.get(p).length;
    trueErrorRatesString+=domainNames.get(p);
    for (int j=0; j < functionOutputs.get(p)[0].length; j++)     trueErrorRatesString+=""String_Node_Str"" + realErrorRates[p][j];
    trueErrorRatesString+=""String_Node_Str"";
  }
  if (loggingLevel > 2)   System.out.print(trueErrorRatesString);
  boolean[][] majorityVoteLabels=new boolean[functionOutputs.size()][];
  for (int p=0; p < functionOutputs.size(); p++) {
    majorityVoteLabels[p]=new boolean[functionOutputs.get(p).length];
    for (int i=0; i < functionOutputs.get(p).length; i++) {
      double labelsSum=0;
      for (int j=0; j < functionOutputs.get(p)[i].length; j++) {
        labelsSum+=(functionOutputs.get(p)[i][j] ? 1 : 0);
      }
      majorityVoteLabels[p][i]=labelsSum / functionOutputs.get(p)[i].length >= 0.5;
    }
  }
  double majorityVoteLabelMAD=0;
  for (int p=0; p < functionOutputs.size(); p++) {
    double labelsErrorRate=0;
    for (int i=0; i < trueLabels.get(p).length; i++)     labelsErrorRate+=(majorityVoteLabels[p][i] != trueLabels.get(p)[i]) ? 1 : 0;
    labelsErrorRate/=trueLabels.get(p).length;
    majorityVoteLabelMAD+=labelsErrorRate;
  }
  majorityVoteLabelMAD/=functionOutputs.size();
  if (loggingLevel > 1)   System.out.println(""String_Node_Str"" + majorityVoteLabelMAD);
  double majorityVoteErrorRateMAD=0;
  for (int p=0; p < functionOutputs.size(); p++) {
    double[] estimatedErrorRates=new double[functionOutputs.get(p)[0].length];
    for (int i=0; i < majorityVoteLabels[p].length; i++)     for (int j=0; j < functionOutputs.get(p)[i].length; j++)     estimatedErrorRates[j]+=(functionOutputs.get(p)[i][j] != majorityVoteLabels[p][i]) ? 1 : 0;
    double errorRateMAD=0;
    for (int j=0; j < functionOutputs.get(p)[0].length; j++)     errorRateMAD+=Math.abs(realErrorRates[p][j] - estimatedErrorRates[j] / majorityVoteLabels[p].length);
    majorityVoteErrorRateMAD+=errorRateMAD / functionOutputs.get(p)[0].length;
  }
  majorityVoteErrorRateMAD/=functionOutputs.size();
  if (loggingLevel > 1)   System.out.println(""String_Node_Str"" + majorityVoteErrorRateMAD);
  combinedResults.addResult(ErrorEstimationMethod.MAJORITY_VOTE,majorityVoteErrorRateMAD,majorityVoteLabelMAD);
  Arrays.asList(errorEstimationMethods).parallelStream().forEach(method -> {
    if (method != ErrorEstimationMethod.AR_2 && method != ErrorEstimationMethod.AR_N && method != ErrorEstimationMethod.ERROR_ESTIMATION_GM) {
      ConcurrentSkipListSet<ExperimentResults> differentParameterizationResults=new ConcurrentSkipListSet<>();
      Arrays.asList(alphaValues).parallelStream().forEach(alpha -> {
        if (method == ErrorEstimationMethod.HIERARCHICAL_COUPLED_ERROR_ESTIMATION_GM) {
          Arrays.asList(gammaValues).parallelStream().forEach(gamma -> {
            ExperimentResults results=runExperiment(method,functionOutputs,trueLabels,evaluationFunctionOutputs,alpha,gamma);
            differentParameterizationResults.add(results);
            String resultsString=""String_Node_Str"" + method + ""String_Node_Str""+ gamma+ ""String_Node_Str""+ alpha+ ""String_Node_Str""+ results.getErrorRateMAD()+ ""String_Node_Str""+ results.getLabelMAD()+ ""String_Node_Str""+ results.getLogLikelihood();
            resultsString+=""String_Node_Str"";
            if (loggingLevel > 2)             for (int p=0; p < functionOutputs.size(); p++) {
              resultsString+=domainNames.get(p);
              for (int j=0; j < functionOutputs.get(p)[0].length; j++)               resultsString+=""String_Node_Str"" + results.getErrorRates()[p][j];
              resultsString+=""String_Node_Str"";
            }
            if (loggingLevel > 1)             System.out.print(resultsString);
          }
);
        }
 else {
          ExperimentResults results=runExperiment(method,functionOutputs,trueLabels,evaluationFunctionOutputs,alpha,0);
          differentParameterizationResults.add(results);
          String resultsString=""String_Node_Str"" + method + ""String_Node_Str""+ alpha+ ""String_Node_Str""+ results.getErrorRateMAD()+ ""String_Node_Str""+ results.getLabelMAD()+ ""String_Node_Str""+ results.getLogLikelihood();
          resultsString+=""String_Node_Str"";
          if (loggingLevel > 2)           for (int p=0; p < functionOutputs.size(); p++) {
            resultsString+=domainNames.get(p);
            for (int j=0; j < functionOutputs.get(p)[0].length; j++)             resultsString+=""String_Node_Str"" + results.getErrorRates()[p][j];
            resultsString+=""String_Node_Str"";
          }
          if (loggingLevel > 1)           System.out.print(resultsString);
        }
      }
);
      combinedResults.addResult(method,differentParameterizationResults.last().getErrorRateMAD(),differentParameterizationResults.last().getLabelMAD());
    }
 else {
      ExperimentResults results=runExperiment(method,functionOutputs,trueLabels,evaluationFunctionOutputs,0,0);
      combinedResults.addResult(method,results.getErrorRateMAD(),results.getLabelMAD());
      String resultsString=""String_Node_Str"" + method + ""String_Node_Str""+ results.getErrorRateMAD()+ ""String_Node_Str""+ results.getLabelMAD();
      resultsString+=""String_Node_Str"";
      if (loggingLevel > 2)       for (int p=0; p < functionOutputs.size(); p++) {
        resultsString+=domainNames.get(p);
        for (int j=0; j < functionOutputs.get(p)[0].length; j++)         resultsString+=""String_Node_Str"" + results.getErrorRates()[p][j];
        resultsString+=""String_Node_Str"";
      }
      if (loggingLevel > 1)       System.out.print(resultsString);
    }
  }
);
  if (loggingLevel > 1)   System.out.println(""String_Node_Str"");
}",0.9987671443982123
143982,"private void updateCountsAfterSamplingLabel(int sampleNumber,int p,int i){
  priorCounts[p][labelsSamples[sampleNumber][p][i]]++;
  for (int j=0; j < numberOfFunctions; j++)   confusionMatrixCounts[p][clusterAssignmentSamples[sampleNumber][p][j]][labelsSamples[sampleNumber][p][i]][functionOutputsArray[j][p][i]]++;
}","private void updateCountsAfterSamplingLabel(int sampleNumber,int p,int i){
  labelPriorsCounts[p][labelsSamples[sampleNumber][p][i]]++;
  for (int j=0; j < numberOfFunctions; j++)   confusionMatrixCounts[p][clusterAssignmentSamples[sampleNumber][p][j]][labelsSamples[sampleNumber][p][i]][functionOutputsArray[j][p][i]]++;
}",0.975
143983,"public BayesianCombinationOfClassifiers(List<boolean[][]> functionOutputs,int numberOfBurnInSamples,int numberOfThinningSamples,int numberOfSamples,double alpha){
  this.numberOfBurnInSamples=numberOfBurnInSamples;
  this.numberOfThinningSamples=numberOfThinningSamples;
  this.numberOfSamples=numberOfSamples;
  this.alpha=alpha;
  numberOfFunctions=functionOutputs.get(0)[0].length;
  numberOfDomains=functionOutputs.size();
  numberOfDataSamples=new int[numberOfDomains];
  functionOutputsArray=new int[numberOfFunctions][numberOfDomains][];
  for (int p=0; p < numberOfDomains; p++) {
    numberOfDataSamples[p]=functionOutputs.get(p).length;
    for (int j=0; j < numberOfFunctions; j++) {
      functionOutputsArray[j][p]=new int[numberOfDataSamples[p]];
      for (int i=0; i < numberOfDataSamples[p]; i++)       functionOutputsArray[j][p][i]=functionOutputs.get(p)[i][j] ? 1 : 0;
    }
  }
  dpPriors=new DirichletProcessPrior[numberOfDomains];
  labelsSamples=new int[numberOfSamples][numberOfDomains][];
  priorSamples=new double[numberOfSamples][numberOfDomains];
  priorCounts=new double[numberOfDomains][2];
  confusionMatrixSamples=new double[numberOfSamples][numberOfDomains][numberOfFunctions][2][2];
  confusionMatrixCounts=new double[numberOfDomains][numberOfFunctions][2][2];
  clusterAssignmentSamples=new int[numberOfSamples][numberOfDomains][numberOfFunctions];
  priorMeans=new double[numberOfDomains];
  priorVariances=new double[numberOfDomains];
  labelMeans=new double[numberOfDomains][];
  labelVariances=new double[numberOfDomains][];
  errorRateMeans=new double[numberOfDomains][numberOfFunctions];
  errorRateVariances=new double[numberOfDomains][numberOfFunctions];
  for (int sampleIndex=0; sampleIndex < numberOfSamples; sampleIndex++)   for (int p=0; p < numberOfDomains; p++)   labelsSamples[sampleIndex][p]=new int[numberOfDataSamples[p]];
  for (int p=0; p < numberOfDomains; p++) {
    labelMeans[p]=new double[numberOfDataSamples[p]];
    labelVariances[p]=new double[numberOfDataSamples[p]];
    dpPriors[p]=new DirichletProcessPrior(alpha,numberOfFunctions);
    priorSamples[0][p]=0.5;
    for (int j=0; j < numberOfFunctions; j++) {
      clusterAssignmentSamples[0][p][j]=0;
      updateCountsAfterSamplingClusterAssignment(0,p,j);
    }
    for (int i=0; i < numberOfDataSamples[p]; i++) {
      int sum=0;
      for (int j=0; j < numberOfFunctions; j++)       sum+=functionOutputsArray[j][p][i];
      labelsSamples[0][p][i]=sum >= (numberOfFunctions / 2) ? 1 : 0;
      updateCountsAfterSamplingLabel(0,p,i);
    }
  }
  samplePriors(0);
  for (int p=0; p < numberOfDomains; p++) {
    for (int j=0; j < numberOfFunctions; j++) {
      confusionMatrixSamples[0][p][0][0][0]=randomDataGenerator.nextBeta(confusionMatrixPrior[0][0] + confusionMatrixCounts[p][0][0][0],confusionMatrixPrior[0][1] + confusionMatrixCounts[p][0][0][1]);
      confusionMatrixSamples[0][p][0][1][0]=randomDataGenerator.nextBeta(confusionMatrixPrior[1][0] + confusionMatrixCounts[p][0][1][0],confusionMatrixPrior[1][1] + confusionMatrixCounts[p][0][1][1]);
      confusionMatrixSamples[0][p][0][0][1]=1 - confusionMatrixSamples[0][p][0][0][0];
      confusionMatrixSamples[0][p][0][1][1]=1 - confusionMatrixSamples[0][p][0][1][0];
    }
  }
}","public BayesianCombinationOfClassifiers(List<boolean[][]> functionOutputs,int numberOfBurnInSamples,int numberOfThinningSamples,int numberOfSamples,double alpha){
  this.numberOfBurnInSamples=numberOfBurnInSamples;
  this.numberOfThinningSamples=numberOfThinningSamples;
  this.numberOfSamples=numberOfSamples;
  numberOfFunctions=functionOutputs.get(0)[0].length;
  numberOfDomains=functionOutputs.size();
  numberOfDataSamples=new int[numberOfDomains];
  functionOutputsArray=new int[numberOfFunctions][numberOfDomains][];
  for (int p=0; p < numberOfDomains; p++) {
    numberOfDataSamples[p]=functionOutputs.get(p).length;
    for (int j=0; j < numberOfFunctions; j++) {
      functionOutputsArray[j][p]=new int[numberOfDataSamples[p]];
      for (int i=0; i < numberOfDataSamples[p]; i++)       functionOutputsArray[j][p][i]=functionOutputs.get(p)[i][j] ? 1 : 0;
    }
  }
  dpPriors=new DirichletProcess[numberOfDomains];
  labelsSamples=new int[numberOfSamples][numberOfDomains][];
  labelPriorsSamples=new double[numberOfSamples][numberOfDomains];
  labelPriorsCounts=new double[numberOfDomains][2];
  confusionMatrixSamples=new double[numberOfSamples][numberOfDomains][numberOfFunctions][2][2];
  confusionMatrixCounts=new double[numberOfDomains][numberOfFunctions][2][2];
  clusterAssignmentSamples=new int[numberOfSamples][numberOfDomains][numberOfFunctions];
  priorMeans=new double[numberOfDomains];
  priorVariances=new double[numberOfDomains];
  labelMeans=new double[numberOfDomains][];
  labelVariances=new double[numberOfDomains][];
  errorRateMeans=new double[numberOfDomains][numberOfFunctions];
  errorRateVariances=new double[numberOfDomains][numberOfFunctions];
  for (int sampleIndex=0; sampleIndex < numberOfSamples; sampleIndex++)   for (int p=0; p < numberOfDomains; p++)   labelsSamples[sampleIndex][p]=new int[numberOfDataSamples[p]];
  for (int p=0; p < numberOfDomains; p++) {
    labelMeans[p]=new double[numberOfDataSamples[p]];
    labelVariances[p]=new double[numberOfDataSamples[p]];
    dpPriors[p]=new DirichletProcess(alpha,numberOfFunctions);
    labelPriorsSamples[0][p]=0.5;
    for (int j=0; j < numberOfFunctions; j++) {
      clusterAssignmentSamples[0][p][j]=0;
      dpPriors[p].addMemberToCluster(clusterAssignmentSamples[0][p][j]);
    }
    for (int i=0; i < numberOfDataSamples[p]; i++) {
      int sum=0;
      for (int j=0; j < numberOfFunctions; j++)       sum+=functionOutputsArray[j][p][i];
      labelsSamples[0][p][i]=sum >= (numberOfFunctions / 2) ? 1 : 0;
      updateCountsAfterSamplingLabel(0,p,i);
    }
  }
  samplePriors(0);
  for (int p=0; p < numberOfDomains; p++) {
    for (int j=0; j < numberOfFunctions; j++) {
      confusionMatrixSamples[0][p][0][0][0]=randomDataGenerator.nextBeta(confusionMatrixPrior[0][0] + confusionMatrixCounts[p][0][0][0],confusionMatrixPrior[0][1] + confusionMatrixCounts[p][0][0][1]);
      confusionMatrixSamples[0][p][0][1][0]=randomDataGenerator.nextBeta(confusionMatrixPrior[1][0] + confusionMatrixCounts[p][0][1][0],confusionMatrixPrior[1][1] + confusionMatrixCounts[p][0][1][1]);
      confusionMatrixSamples[0][p][0][0][1]=1 - confusionMatrixSamples[0][p][0][0][0];
      confusionMatrixSamples[0][p][0][1][1]=1 - confusionMatrixSamples[0][p][0][1][0];
    }
  }
}",0.9317416590143864
143984,"private void samplePriors(int sampleNumber){
  for (int p=0; p < numberOfDomains; p++)   priorSamples[sampleNumber][p]=randomDataGenerator.nextBeta(labelsPriorAlpha + priorCounts[p][1],labelsPriorBeta + priorCounts[p][0]);
}","private void samplePriors(int sampleNumber){
  for (int p=0; p < numberOfDomains; p++)   labelPriorsSamples[sampleNumber][p]=randomDataGenerator.nextBeta(labelsPriorAlpha + labelPriorsCounts[p][1],labelsPriorBeta + labelPriorsCounts[p][0]);
}",0.8969957081545065
143985,"public void runGibbsSampler(){
  for (int sampleIndex=0; sampleIndex < numberOfBurnInSamples; sampleIndex++) {
    samplePriors(0);
    sampleConfusionMatrix(0);
    sampleClusterAssignments(0);
    sampleLabels(0);
  }
  for (int sampleIndex=1; sampleIndex < numberOfSamples; sampleIndex++) {
    for (int i=0; i < numberOfThinningSamples + 1; i++) {
      samplePriors(sampleIndex - 1);
      sampleConfusionMatrix(sampleIndex - 1);
      sampleClusterAssignments(sampleIndex - 1);
      sampleLabels(sampleIndex - 1);
    }
    storeSample(sampleIndex);
  }
  for (int sampleNumber=0; sampleNumber < numberOfSamples; sampleNumber++) {
    for (int p=0; p < numberOfDomains; p++) {
      priorMeans[p]+=priorSamples[sampleNumber][p];
      for (int j=0; j < numberOfFunctions; j++) {
        double errorRate=0;
        for (int i=0; i < numberOfDataSamples[p]; i++)         errorRate+=functionOutputsArray[j][p][i] != labelsSamples[sampleNumber][p][i] ? 1 : 0;
        errorRateMeans[p][j]+=errorRate / numberOfDataSamples[p];
      }
      for (int i=0; i < numberOfDataSamples[p]; i++)       labelMeans[p][i]+=labelsSamples[sampleNumber][p][i];
    }
  }
  for (int p=0; p < numberOfDomains; p++) {
    priorMeans[p]/=numberOfSamples;
    for (int j=0; j < numberOfFunctions; j++)     errorRateMeans[p][j]/=numberOfSamples;
    for (int i=0; i < numberOfDataSamples[p]; i++)     labelMeans[p][i]/=numberOfSamples;
    for (int sampleNumber=0; sampleNumber < numberOfSamples; sampleNumber++) {
      double temp=priorSamples[sampleNumber][p] - priorMeans[p];
      priorVariances[p]+=temp * temp;
      for (int j=0; j < numberOfFunctions; j++) {
        temp=(confusionMatrixSamples[sampleNumber][p][clusterAssignmentSamples[sampleNumber][p][j]][0][1] * priorSamples[sampleNumber][p] + confusionMatrixSamples[sampleNumber][p][clusterAssignmentSamples[sampleNumber][p][j]][1][0] * (1 - priorSamples[sampleNumber][p])) - errorRateMeans[p][j];
        errorRateVariances[p][j]+=temp * temp;
      }
      for (int i=0; i < numberOfDataSamples[p]; i++) {
        temp=labelsSamples[sampleNumber][p][i] - labelMeans[p][i];
        labelVariances[p][i]+=temp * temp;
      }
    }
    priorVariances[p]/=numberOfSamples;
    for (int j=0; j < numberOfFunctions; j++)     errorRateVariances[p][j]/=numberOfSamples;
    for (int i=0; i < numberOfDataSamples[p]; i++)     labelVariances[p][i]/=numberOfSamples;
  }
}","public void runGibbsSampler(){
  for (int sampleIndex=0; sampleIndex < numberOfBurnInSamples; sampleIndex++) {
    samplePriors(0);
    sampleConfusionMatrix(0);
    sampleClusterAssignments(0);
    sampleLabels(0);
  }
  for (int sampleIndex=1; sampleIndex < numberOfSamples; sampleIndex++) {
    for (int i=0; i < numberOfThinningSamples + 1; i++) {
      samplePriors(sampleIndex - 1);
      sampleConfusionMatrix(sampleIndex - 1);
      sampleClusterAssignments(sampleIndex - 1);
      sampleLabels(sampleIndex - 1);
    }
    storeSample(sampleIndex);
  }
  for (int sampleNumber=0; sampleNumber < numberOfSamples; sampleNumber++) {
    for (int p=0; p < numberOfDomains; p++) {
      priorMeans[p]+=labelPriorsSamples[sampleNumber][p];
      for (int j=0; j < numberOfFunctions; j++) {
        double errorRate=0;
        for (int i=0; i < numberOfDataSamples[p]; i++)         errorRate+=functionOutputsArray[j][p][i] != labelsSamples[sampleNumber][p][i] ? 1 : 0;
        errorRateMeans[p][j]+=errorRate / numberOfDataSamples[p];
      }
      for (int i=0; i < numberOfDataSamples[p]; i++)       labelMeans[p][i]+=labelsSamples[sampleNumber][p][i];
    }
  }
  for (int p=0; p < numberOfDomains; p++) {
    priorMeans[p]/=numberOfSamples;
    for (int j=0; j < numberOfFunctions; j++)     errorRateMeans[p][j]/=numberOfSamples;
    for (int i=0; i < numberOfDataSamples[p]; i++)     labelMeans[p][i]/=numberOfSamples;
    for (int sampleNumber=0; sampleNumber < numberOfSamples; sampleNumber++) {
      double temp=labelPriorsSamples[sampleNumber][p] - priorMeans[p];
      priorVariances[p]+=temp * temp;
      for (int j=0; j < numberOfFunctions; j++) {
        temp=(confusionMatrixSamples[sampleNumber][p][clusterAssignmentSamples[sampleNumber][p][j]][0][1] * labelPriorsSamples[sampleNumber][p] + confusionMatrixSamples[sampleNumber][p][clusterAssignmentSamples[sampleNumber][p][j]][1][0] * (1 - labelPriorsSamples[sampleNumber][p])) - errorRateMeans[p][j];
        errorRateVariances[p][j]+=temp * temp;
      }
      for (int i=0; i < numberOfDataSamples[p]; i++) {
        temp=labelsSamples[sampleNumber][p][i] - labelMeans[p][i];
        labelVariances[p][i]+=temp * temp;
      }
    }
    priorVariances[p]/=numberOfSamples;
    for (int j=0; j < numberOfFunctions; j++)     errorRateVariances[p][j]/=numberOfSamples;
    for (int i=0; i < numberOfDataSamples[p]; i++)     labelVariances[p][i]/=numberOfSamples;
  }
}",0.9867986798679867
143986,"public double logLikelihood(List<boolean[][]> functionOutputs){
  numberOfDataSamples=new int[numberOfDomains];
  functionOutputsArray=new int[numberOfFunctions][numberOfDomains][];
  for (int p=0; p < numberOfDomains; p++) {
    numberOfDataSamples[p]=functionOutputs.get(p).length;
    for (int j=0; j < numberOfFunctions; j++) {
      functionOutputsArray[j][p]=new int[numberOfDataSamples[p]];
      for (int i=0; i < numberOfDataSamples[p]; i++)       functionOutputsArray[j][p][i]=functionOutputs.get(p)[i][j] ? 1 : 0;
    }
  }
  for (int p=0; p < numberOfDomains; p++) {
    labelsSamples[0][p]=new int[numberOfDataSamples[p]];
    for (int i=0; i < numberOfDataSamples[p]; i++) {
      int sum=0;
      for (int j=0; j < numberOfFunctions; j++)       sum+=functionOutputsArray[j][p][i];
      labelsSamples[0][p][i]=sum >= (numberOfFunctions / 2) ? 1 : 0;
    }
  }
  double logLikelihood=0;
  for (int sampleNumber=0; sampleNumber < numberOfSamples; sampleNumber++) {
    sampleLabels(sampleNumber);
    for (int p=0; p < numberOfDomains; p++) {
      logLikelihood+=(labelsPriorAlpha - 1) * Math.log(priorSamples[sampleNumber][p]) + (labelsPriorBeta - 1) * Math.log(1 - priorSamples[sampleNumber][p]);
      Map<Integer,AtomicInteger> clusterCounts=new HashMap<>();
      for (int j=0; j < numberOfFunctions; j++)       if (!clusterCounts.containsKey(clusterAssignmentSamples[sampleNumber][p][j]))       clusterCounts.put(clusterAssignmentSamples[sampleNumber][p][j],new AtomicInteger(1));
 else       clusterCounts.get(clusterAssignmentSamples[sampleNumber][p][j]).incrementAndGet();
      for (int j=0; j < numberOfFunctions; j++)       logLikelihood+=Math.log(clusterCounts.get(clusterAssignmentSamples[sampleNumber][p][j]).intValue()) - Math.log(numberOfFunctions);
      for (int i=0; i < numberOfDataSamples[p]; i++) {
        if (labelsSamples[sampleNumber][p][i] == 1)         logLikelihood+=Math.log(priorSamples[sampleNumber][p]);
 else         logLikelihood+=Math.log(1 - priorSamples[sampleNumber][p]);
      }
      for (      int clusterID : clusterCounts.keySet()) {
        logLikelihood+=confusionMatrixPrior[0][0] * Math.log(confusionMatrixSamples[sampleNumber][p][clusterID][0][0]);
        logLikelihood+=confusionMatrixPrior[0][1] * Math.log(confusionMatrixSamples[sampleNumber][p][clusterID][0][1]);
        logLikelihood+=confusionMatrixPrior[1][0] * Math.log(confusionMatrixSamples[sampleNumber][p][clusterID][1][0]);
        logLikelihood+=confusionMatrixPrior[1][1] * Math.log(confusionMatrixSamples[sampleNumber][p][clusterID][1][1]);
      }
      for (int j=0; j < numberOfFunctions; j++)       for (int i=0; i < numberOfDataSamples[p]; i++)       logLikelihood+=Math.log(confusionMatrixSamples[sampleNumber][p][clusterAssignmentSamples[sampleNumber][p][j]][labelsSamples[sampleNumber][p][i]][functionOutputsArray[j][p][i]]);
    }
  }
  return logLikelihood / numberOfSamples;
}","public double logLikelihood(List<boolean[][]> functionOutputs){
  numberOfDataSamples=new int[numberOfDomains];
  functionOutputsArray=new int[numberOfFunctions][numberOfDomains][];
  for (int p=0; p < numberOfDomains; p++) {
    numberOfDataSamples[p]=functionOutputs.get(p).length;
    for (int j=0; j < numberOfFunctions; j++) {
      functionOutputsArray[j][p]=new int[numberOfDataSamples[p]];
      for (int i=0; i < numberOfDataSamples[p]; i++)       functionOutputsArray[j][p][i]=functionOutputs.get(p)[i][j] ? 1 : 0;
    }
  }
  for (int p=0; p < numberOfDomains; p++) {
    labelsSamples[0][p]=new int[numberOfDataSamples[p]];
    for (int i=0; i < numberOfDataSamples[p]; i++) {
      int sum=0;
      for (int j=0; j < numberOfFunctions; j++)       sum+=functionOutputsArray[j][p][i];
      labelsSamples[0][p][i]=sum >= (numberOfFunctions / 2) ? 1 : 0;
    }
  }
  double logLikelihood=0;
  for (int sampleNumber=0; sampleNumber < numberOfSamples; sampleNumber++) {
    sampleLabels(sampleNumber);
    for (int p=0; p < numberOfDomains; p++) {
      logLikelihood+=(labelsPriorAlpha - 1) * Math.log(labelPriorsSamples[sampleNumber][p]) + (labelsPriorBeta - 1) * Math.log(1 - labelPriorsSamples[sampleNumber][p]);
      Map<Integer,AtomicInteger> clusterCounts=new HashMap<>();
      for (int j=0; j < numberOfFunctions; j++)       if (!clusterCounts.containsKey(clusterAssignmentSamples[sampleNumber][p][j]))       clusterCounts.put(clusterAssignmentSamples[sampleNumber][p][j],new AtomicInteger(1));
 else       clusterCounts.get(clusterAssignmentSamples[sampleNumber][p][j]).incrementAndGet();
      for (int j=0; j < numberOfFunctions; j++)       logLikelihood+=Math.log(clusterCounts.get(clusterAssignmentSamples[sampleNumber][p][j]).intValue()) - Math.log(numberOfFunctions);
      for (int i=0; i < numberOfDataSamples[p]; i++) {
        if (labelsSamples[sampleNumber][p][i] == 1)         logLikelihood+=Math.log(labelPriorsSamples[sampleNumber][p]);
 else         logLikelihood+=Math.log(1 - labelPriorsSamples[sampleNumber][p]);
      }
      for (      int clusterID : clusterCounts.keySet()) {
        logLikelihood+=confusionMatrixPrior[0][0] * Math.log(confusionMatrixSamples[sampleNumber][p][clusterID][0][0]);
        logLikelihood+=confusionMatrixPrior[0][1] * Math.log(confusionMatrixSamples[sampleNumber][p][clusterID][0][1]);
        logLikelihood+=confusionMatrixPrior[1][0] * Math.log(confusionMatrixSamples[sampleNumber][p][clusterID][1][0]);
        logLikelihood+=confusionMatrixPrior[1][1] * Math.log(confusionMatrixSamples[sampleNumber][p][clusterID][1][1]);
      }
      for (int j=0; j < numberOfFunctions; j++)       for (int i=0; i < numberOfDataSamples[p]; i++)       logLikelihood+=Math.log(confusionMatrixSamples[sampleNumber][p][clusterAssignmentSamples[sampleNumber][p][j]][labelsSamples[sampleNumber][p][i]][functionOutputsArray[j][p][i]]);
    }
  }
  return logLikelihood / numberOfSamples;
}",0.9890822244967588
143987,"private void updateCountsBeforeSamplingLabel(int sampleNumber,int p,int i){
  priorCounts[p][labelsSamples[sampleNumber][p][i]]--;
  for (int j=0; j < numberOfFunctions; j++)   confusionMatrixCounts[p][clusterAssignmentSamples[sampleNumber][p][j]][labelsSamples[sampleNumber][p][i]][functionOutputsArray[j][p][i]]--;
}","private void updateCountsBeforeSamplingLabel(int sampleNumber,int p,int i){
  labelPriorsCounts[p][labelsSamples[sampleNumber][p][i]]--;
  for (int j=0; j < numberOfFunctions; j++)   confusionMatrixCounts[p][clusterAssignmentSamples[sampleNumber][p][j]][labelsSamples[sampleNumber][p][i]][functionOutputsArray[j][p][i]]--;
}",0.9750778816199376
143988,"private void storeSample(int sampleIndex){
  copyArray(priorSamples[sampleIndex - 1],priorSamples[sampleIndex]);
  copyArray(confusionMatrixSamples[sampleIndex - 1],confusionMatrixSamples[sampleIndex]);
  copyArray(clusterAssignmentSamples[sampleIndex - 1],clusterAssignmentSamples[sampleIndex]);
  copyArray(labelsSamples[sampleIndex - 1],labelsSamples[sampleIndex]);
}","private void storeSample(int sampleIndex){
  copyArray(labelPriorsSamples[sampleIndex - 1],labelPriorsSamples[sampleIndex]);
  copyArray(confusionMatrixSamples[sampleIndex - 1],confusionMatrixSamples[sampleIndex]);
  copyArray(clusterAssignmentSamples[sampleIndex - 1],clusterAssignmentSamples[sampleIndex]);
  copyArray(labelsSamples[sampleIndex - 1],labelsSamples[sampleIndex]);
}",0.9574468085106383
143989,"private void sampleLabels(int sampleNumber){
  for (int p=0; p < numberOfDomains; p++) {
    for (int i=0; i < numberOfDataSamples[p]; i++) {
      double p0=1 - priorSamples[sampleNumber][p];
      double p1=priorSamples[sampleNumber][p];
      for (int j=0; j < numberOfFunctions; j++) {
        p0*=confusionMatrixSamples[sampleNumber][p][clusterAssignmentSamples[sampleNumber][p][j]][0][functionOutputsArray[j][p][i]];
        p1*=confusionMatrixSamples[sampleNumber][p][clusterAssignmentSamples[sampleNumber][p][j]][1][functionOutputsArray[j][p][i]];
      }
      int newLabel=randomDataGenerator.nextBinomial(1,p1 / (p0 + p1));
      if (labelsSamples[sampleNumber][p][i] != newLabel) {
        updateCountsBeforeSamplingLabel(sampleNumber,p,i);
        labelsSamples[sampleNumber][p][i]=newLabel;
        updateCountsAfterSamplingLabel(sampleNumber,p,i);
      }
    }
  }
}","private void sampleLabels(int sampleNumber){
  for (int p=0; p < numberOfDomains; p++) {
    for (int i=0; i < numberOfDataSamples[p]; i++) {
      double p0=1 - labelPriorsSamples[sampleNumber][p];
      double p1=labelPriorsSamples[sampleNumber][p];
      for (int j=0; j < numberOfFunctions; j++) {
        p0*=confusionMatrixSamples[sampleNumber][p][clusterAssignmentSamples[sampleNumber][p][j]][0][functionOutputsArray[j][p][i]];
        p1*=confusionMatrixSamples[sampleNumber][p][clusterAssignmentSamples[sampleNumber][p][j]][1][functionOutputsArray[j][p][i]];
      }
      int newLabel=randomDataGenerator.nextBinomial(1,p1 / (p0 + p1));
      if (labelsSamples[sampleNumber][p][i] != newLabel) {
        updateCountsBeforeSamplingLabel(sampleNumber,p,i);
        labelsSamples[sampleNumber][p][i]=newLabel;
        updateCountsAfterSamplingLabel(sampleNumber,p,i);
      }
    }
  }
}",0.981981981981982
143990,"private ExperimentResults runExperiment(){
  logger.info(""String_Node_Str"");
  Map<Label,DataSet<PredictedDataInstance<Vector,Double>>> classifierDataSet=new HashMap<>();
  Map<Label,DataSet<PredictedDataInstance<Vector,Double>>> testingDataSet=new HashMap<>();
  Map<DataInstance<Vector>,Map<Label,Double>> selectionDataSet=new HashMap<>();
  for (  Label label : labels) {
    DataSet<PredictedDataInstance<Vector,Double>> classifierDataSetCopy=new DataSetInMemory<>();
    DataSet<PredictedDataInstance<Vector,Double>> testingDataSetCopy=new DataSetInMemory<>();
    for (    PredictedDataInstance<Vector,Double> instance : predictedDataSet.get(label)) {
      classifierDataSetCopy.add(new PredictedDataInstance<>(instance.name(),instance.features(),instance.label(),instance.source(),instance.probability()));
      testingDataSetCopy.add(new PredictedDataInstance<>(instance.name(),instance.features(),instance.label(),instance.source(),instance.probability()));
    }
    classifierDataSet.put(label,classifierDataSetCopy);
    testingDataSet.put(label,testingDataSetCopy);
  }
  for (  Map.Entry<Label,DataSet<PredictedDataInstance<Vector,Double>>> instanceEntry : classifierDataSet.entrySet())   for (  PredictedDataInstance<Vector,Double> predictedInstance : instanceEntry.getValue()) {
    DataInstance<Vector> instance=new DataInstance<>(predictedInstance.name(),predictedInstance.features());
    if (!selectionDataSet.containsKey(instance))     selectionDataSet.put(instance,new HashMap<>());
    selectionDataSet.get(instance).put(instanceEntry.getKey(),predictedInstance.probability());
  }
  final long experimentStartTime=System.currentTimeMillis();
  ExperimentResults results=new ExperimentResults();
  Map<DataInstance<Vector>,Map<Label,Boolean>> activeLearningDataSet=new HashMap<>();
  for (  DataInstance<Vector> instance : dataSet.keySet())   activeLearningDataSet.put(instance,new HashMap<>());
  ConstrainedLearning.Builder learningBuilder=new ConstrainedLearning.Builder(activeLearningDataSet).activeLearningMethod(activeLearningMethod).addConstraints(constraints.getConstraints());
  learningBuilder.addLabels(labels);
  Learning learning=learningBuilder.build();
  int numberOfExamplesPicked=0;
  int previousNumberOfExamplesPicked=0;
  int iterationNumber=0;
  while (true) {
    PrecisionRecall<Vector,Double> fullPrecisionRecall=new PrecisionRecall<>(1000);
    PrecisionRecall<Vector,Double> testingPrecisionRecall=new PrecisionRecall<>(1000);
    labels.stream().forEach(label -> {
      if (resultTypes.contains(ResultType.AVERAGE_AUC_FULL_DATA_SET))       fullPrecisionRecall.addResult(label.getName(),classifierDataSet.get(label),dataInstance -> dataSet.get(new DataInstance<>(dataInstance.name(),dataInstance.features())).get(label));
      if (resultTypes.contains(ResultType.AVERAGE_AUC_TESTING_DATA_SET))       testingPrecisionRecall.addResult(label.getName(),testingDataSet.get(label),dataInstance -> dataSet.get(new DataInstance<>(dataInstance.name(),dataInstance.features())).get(label));
    }
);
    if (resultTypes.contains(ResultType.AVERAGE_AUC_FULL_DATA_SET))     results.averageAreasUnderTheCurve.put(iterationNumber,fullPrecisionRecall.getAreaUnderCurves().stream().mapToDouble(area -> area == null ? 0.0 : area.isNaN() ? 0.0 : area).average().orElse(0));
    if (resultTypes.contains(ResultType.AVERAGE_AUC_TESTING_DATA_SET))     results.averageTestingAreasUnderTheCurve.put(iterationNumber,testingPrecisionRecall.getAreaUnderCurves().stream().mapToDouble(area -> area == null ? 0.0 : area.isNaN() ? 0.0 : area).average().orElse(0));
    if (resultTypes.contains(ResultType.NUMBER_OF_EXAMPLES_PICKED))     results.numberOfExamplesPicked.put(iterationNumber,numberOfExamplesPicked);
    final long startTime=System.nanoTime();
switch (examplePickingMethod) {
case BATCH:
      List<Learning.InstanceToLabel> selectedInstances=learning.pickInstancesToLabel(selectionDataSet,numberOfExamplesToPickPerIteration);
    for (    Learning.InstanceToLabel instance : selectedInstances) {
      boolean trueLabel=dataSet.get(instance.getInstance()).get(instance.getLabel());
      Map<Label,Boolean> fixedLabels=new HashMap<>(learning.getLabels(instance.getInstance()));
      learning.labelInstance(instance,trueLabel);
      Map<Label,Boolean> newFixedLabels=new HashMap<>(learning.getLabels(instance.getInstance()));
      fixedLabels.keySet().forEach(newFixedLabels::remove);
      for (      Map.Entry<Label,Boolean> instanceLabelEntry : fixedLabels.entrySet()) {
        for (        PredictedDataInstance<Vector,Double> predictedInstance : classifierDataSet.get(instanceLabelEntry.getKey()))         if (predictedInstance.name().equals(instance.getInstance().name())) {
          testingDataSet.get(instanceLabelEntry.getKey()).remove(predictedInstance);
          predictedInstance.label(1.0);
          predictedInstance.probability(instanceLabelEntry.getValue() ? 1.0 : 0.0);
          selectionDataSet.get(new DataInstance<>(predictedInstance.name(),predictedInstance.features())).remove(instanceLabelEntry.getKey());
          break;
        }
      }
    }
  numberOfExamplesPicked+=selectedInstances.size();
break;
case PSEUDO_SEQUENTIAL:
for (int exampleNumber=0; exampleNumber < numberOfExamplesToPickPerIteration; exampleNumber++) {
Learning.InstanceToLabel instance=learning.pickInstanceToLabel(selectionDataSet);
if (instance == null) break;
boolean trueLabel=dataSet.get(instance.getInstance()).get(instance.getLabel());
Map<Label,Boolean> fixedLabels=new HashMap<>(learning.getLabels(instance.getInstance()));
learning.labelInstance(instance,trueLabel);
Map<Label,Boolean> newFixedLabels=new HashMap<>(learning.getLabels(instance.getInstance()));
fixedLabels.keySet().forEach(newFixedLabels::remove);
for (PredictedDataInstance<Vector,Double> predictedInstance : classifierDataSet.get(instance.getLabel())) if (predictedInstance.name().equals(instance.getInstance().name())) {
  for (  Map.Entry<Label,Boolean> instanceLabelEntry : fixedLabels.entrySet()) {
    testingDataSet.get(instanceLabelEntry.getKey()).remove(predictedInstance);
    predictedInstance.label(1.0);
    predictedInstance.probability(instanceLabelEntry.getValue() ? 1.0 : 0.0);
  }
  break;
}
selectionDataSet.get(instance.getInstance()).remove(instance.getLabel());
numberOfExamplesPicked++;
}
break;
}
final long endTime=System.nanoTime();
if (resultTypes.contains(ResultType.ACTIVE_LEARNING_METHOD_TIMES)) results.activeLearningMethodTimesTaken.put(iterationNumber,endTime - startTime);
if (numberOfExamplesPicked == previousNumberOfExamplesPicked || ++iterationNumber >= maximumNumberOfIterations) break;
previousNumberOfExamplesPicked=numberOfExamplesPicked;
}
final long experimentEndTime=System.currentTimeMillis();
results.timeTaken=experimentEndTime - experimentStartTime;
return results;
}","private ExperimentResults runExperiment(){
  logger.info(""String_Node_Str"");
  Map<Label,DataSet<PredictedDataInstance<Vector,Double>>> classifierDataSet=new HashMap<>();
  Map<Label,DataSet<PredictedDataInstance<Vector,Double>>> testingDataSet=new HashMap<>();
  for (  Label label : labels) {
    DataSet<PredictedDataInstance<Vector,Double>> classifierDataSetCopy=new DataSetInMemory<>();
    DataSet<PredictedDataInstance<Vector,Double>> testingDataSetCopy=new DataSetInMemory<>();
    for (    PredictedDataInstance<Vector,Double> instance : predictedDataSetInstances.get(label)) {
      classifierDataSetCopy.add(new PredictedDataInstance<>(instance.name(),instance.features(),instance.label(),instance.source(),instance.probability()));
      testingDataSetCopy.add(new PredictedDataInstance<>(instance.name(),instance.features(),instance.label(),instance.source(),instance.probability()));
    }
    classifierDataSet.put(label,classifierDataSetCopy);
    testingDataSet.put(label,testingDataSetCopy);
  }
  final long experimentStartTime=System.currentTimeMillis();
  ExperimentResults results=new ExperimentResults();
  Map<DataInstance<Vector>,Map<Label,Boolean>> activeLearningDataSet=new HashMap<>();
  for (  DataInstance<Vector> instance : dataSet.keySet())   activeLearningDataSet.put(instance,new HashMap<>());
  ConstrainedLearning.Builder learningBuilder=new ConstrainedLearning.Builder(activeLearningDataSet,instanceToLabel -> predictedDataSet.get(instanceToLabel.getInstance()).get(instanceToLabel.getLabel())).activeLearningMethod(activeLearningMethod).addConstraints(constraints.getConstraints());
  learningBuilder.addLabels(labels);
  Learning learning=learningBuilder.build();
  for (  Map.Entry<Label,DataSet<PredictedDataInstance<Vector,Double>>> instanceEntry : classifierDataSet.entrySet())   for (  PredictedDataInstance<Vector,Double> predictedInstance : instanceEntry.getValue())   learning.addInstanceToLabel(new DataInstance<>(predictedInstance.name(),predictedInstance.features()),instanceEntry.getKey());
  int numberOfExamplesPicked=0;
  int previousNumberOfExamplesPicked=0;
  int iterationNumber=0;
  while (true) {
    PrecisionRecall<Vector,Double> fullPrecisionRecall=new PrecisionRecall<>(1000);
    PrecisionRecall<Vector,Double> testingPrecisionRecall=new PrecisionRecall<>(1000);
    labels.stream().forEach(label -> {
      if (resultTypes.contains(ResultType.AVERAGE_AUC_FULL_DATA_SET))       fullPrecisionRecall.addResult(label.getName(),classifierDataSet.get(label),dataInstance -> dataSet.get(new DataInstance<>(dataInstance.name(),dataInstance.features())).get(label));
      if (resultTypes.contains(ResultType.AVERAGE_AUC_TESTING_DATA_SET))       testingPrecisionRecall.addResult(label.getName(),testingDataSet.get(label),dataInstance -> dataSet.get(new DataInstance<>(dataInstance.name(),dataInstance.features())).get(label));
    }
);
    if (resultTypes.contains(ResultType.AVERAGE_AUC_FULL_DATA_SET))     results.averageAreasUnderTheCurve.put(iterationNumber,fullPrecisionRecall.getAreaUnderCurves().stream().mapToDouble(area -> area == null ? 0.0 : area.isNaN() ? 0.0 : area).average().orElse(0));
    if (resultTypes.contains(ResultType.AVERAGE_AUC_TESTING_DATA_SET))     results.averageTestingAreasUnderTheCurve.put(iterationNumber,testingPrecisionRecall.getAreaUnderCurves().stream().mapToDouble(area -> area == null ? 0.0 : area.isNaN() ? 0.0 : area).average().orElse(0));
    if (resultTypes.contains(ResultType.NUMBER_OF_EXAMPLES_PICKED))     results.numberOfExamplesPicked.put(iterationNumber,numberOfExamplesPicked);
    final long startTime=System.nanoTime();
switch (examplePickingMethod) {
case BATCH:
      List<Learning.InstanceToLabel> selectedInstances=learning.pickInstancesToLabel(numberOfExamplesToPickPerIteration);
    for (    Learning.InstanceToLabel instance : selectedInstances) {
      boolean trueLabel=dataSet.get(instance.getInstance()).get(instance.getLabel());
      Map<Label,Boolean> fixedLabels=new HashMap<>(learning.getLabels(instance.getInstance()));
      learning.labelInstance(instance,trueLabel);
      Map<Label,Boolean> newFixedLabels=new HashMap<>(learning.getLabels(instance.getInstance()));
      fixedLabels.keySet().forEach(newFixedLabels::remove);
      for (      Map.Entry<Label,Boolean> instanceLabelEntry : newFixedLabels.entrySet()) {
        for (        PredictedDataInstance<Vector,Double> predictedInstance : classifierDataSet.get(instanceLabelEntry.getKey()))         if (predictedInstance.name().equals(instance.getInstance().name())) {
          testingDataSet.get(instanceLabelEntry.getKey()).remove(predictedInstance);
          predictedInstance.label(1.0);
          predictedInstance.probability(instanceLabelEntry.getValue() ? 1.0 : 0.0);
          break;
        }
      }
    }
  numberOfExamplesPicked+=selectedInstances.size();
break;
case PSEUDO_SEQUENTIAL:
for (int exampleNumber=0; exampleNumber < numberOfExamplesToPickPerIteration; exampleNumber++) {
Learning.InstanceToLabel instance=learning.pickInstanceToLabel();
if (instance == null) break;
boolean trueLabel=dataSet.get(instance.getInstance()).get(instance.getLabel());
Map<Label,Boolean> fixedLabels=new HashMap<>(learning.getLabels(instance.getInstance()));
learning.labelInstance(instance,trueLabel);
Map<Label,Boolean> newFixedLabels=new HashMap<>(learning.getLabels(instance.getInstance()));
fixedLabels.keySet().forEach(newFixedLabels::remove);
for (Map.Entry<Label,Boolean> instanceLabelEntry : newFixedLabels.entrySet()) {
  for (  PredictedDataInstance<Vector,Double> predictedInstance : classifierDataSet.get(instanceLabelEntry.getKey()))   if (predictedInstance.name().equals(instance.getInstance().name())) {
    testingDataSet.get(instanceLabelEntry.getKey()).remove(predictedInstance);
    predictedInstance.label(1.0);
    predictedInstance.probability(instanceLabelEntry.getValue() ? 1.0 : 0.0);
    break;
  }
}
numberOfExamplesPicked++;
}
break;
}
final long endTime=System.nanoTime();
if (resultTypes.contains(ResultType.ACTIVE_LEARNING_METHOD_TIMES)) results.activeLearningMethodTimesTaken.put(iterationNumber,endTime - startTime);
if (numberOfExamplesPicked == previousNumberOfExamplesPicked || ++iterationNumber >= maximumNumberOfIterations) break;
previousNumberOfExamplesPicked=numberOfExamplesPicked;
}
final long experimentEndTime=System.currentTimeMillis();
results.timeTaken=experimentEndTime - experimentStartTime;
return results;
}",0.7261232783924136
143991,"public static void main(String[] args){
  int numberOfExperimentRepetitions=2;
  int numberOfExamplesToPickPerIteration=1000000;
  int maximumNumberOfIterations=1000000000;
  boolean includeTitleInResultsPlot=false;
  boolean includeHorizontalAxisLabelInResultsPlot=true;
  boolean includeVerticalAxisLabelInResultsPlot=true;
  boolean includeLegendInResultsPlot=false;
  ActiveLearningMethod[] activeLearningMethods=new ActiveLearningMethod[]{ActiveLearningMethod.RANDOM,ActiveLearningMethod.UNCERTAINTY_HEURISTIC,ActiveLearningMethod.CONSTRAINT_PROPAGATION_HEURISTIC};
  ExamplePickingMethod examplePickingMethod=ExamplePickingMethod.BATCH;
  Set<ResultType> resultTypes=new HashSet<>();
  resultTypes.add(ResultType.AVERAGE_AUC_FULL_DATA_SET);
  String workingDirectory;
  ImportedDataSet dataSet;
  Map<ActiveLearningMethod,List<ExperimentResults>> results;
  logger.info(""String_Node_Str"");
  numberOfExperimentRepetitions=10;
  numberOfExamplesToPickPerIteration=1;
  maximumNumberOfIterations=100000;
  workingDirectory=""String_Node_Str"";
  dataSet=importLIBSVMDataSet(workingDirectory,false,0.0,0.0);
  dataSet.exportStatistics(workingDirectory + ""String_Node_Str"");
  results=runExperiments(numberOfExperimentRepetitions,numberOfExamplesToPickPerIteration,maximumNumberOfIterations,workingDirectory,activeLearningMethods,examplePickingMethod,dataSet,resultTypes);
  ConstrainedLearningWithoutReTraining.exportResults(numberOfExperimentRepetitions,numberOfExamplesToPickPerIteration,maximumNumberOfIterations,results,workingDirectory + ""String_Node_Str"",resultTypes,includeTitleInResultsPlot,includeHorizontalAxisLabelInResultsPlot,includeVerticalAxisLabelInResultsPlot,includeLegendInResultsPlot);
  logger.info(""String_Node_Str"");
}","public static void main(String[] args){
  int numberOfExperimentRepetitions=2;
  int numberOfExamplesToPickPerIteration=1000000;
  int maximumNumberOfIterations=1000000000;
  boolean includeTitleInResultsPlot=false;
  boolean includeHorizontalAxisLabelInResultsPlot=true;
  boolean includeVerticalAxisLabelInResultsPlot=true;
  boolean includeLegendInResultsPlot=false;
  ActiveLearningMethod[] activeLearningMethods=new ActiveLearningMethod[]{ActiveLearningMethod.RANDOM,ActiveLearningMethod.UNCERTAINTY_HEURISTIC,ActiveLearningMethod.CONSTRAINT_PROPAGATION_HEURISTIC};
  ExamplePickingMethod examplePickingMethod=ExamplePickingMethod.PSEUDO_SEQUENTIAL;
  Set<ResultType> resultTypes=new HashSet<>();
  resultTypes.add(ResultType.AVERAGE_AUC_FULL_DATA_SET);
  String workingDirectory;
  ImportedDataSet dataSet;
  Map<ActiveLearningMethod,List<ExperimentResults>> results;
  logger.info(""String_Node_Str"");
  numberOfExperimentRepetitions=10;
  numberOfExamplesToPickPerIteration=100;
  maximumNumberOfIterations=100000;
  workingDirectory=""String_Node_Str"";
  dataSet=importLIBSVMDataSet(workingDirectory,false,0.0,0.0);
  dataSet.exportStatistics(workingDirectory + ""String_Node_Str"");
  results=runExperiments(numberOfExperimentRepetitions,numberOfExamplesToPickPerIteration,maximumNumberOfIterations,workingDirectory,activeLearningMethods,examplePickingMethod,dataSet,resultTypes);
  ConstrainedLearningWithoutReTraining.exportResults(numberOfExperimentRepetitions,numberOfExamplesToPickPerIteration,maximumNumberOfIterations,results,workingDirectory + ""String_Node_Str"",resultTypes,includeTitleInResultsPlot,includeHorizontalAxisLabelInResultsPlot,includeVerticalAxisLabelInResultsPlot,includeLegendInResultsPlot);
  logger.info(""String_Node_Str"");
}",0.9931389365351628
143992,"public Map<Label,DataSet<PredictedDataInstance<Vector,Double>>> getEvaluationPredictedDataSet(){
  return evaluationPredictedDataSet;
}","public Map<DataInstance<Vector>,Map<Label,Double>> getEvaluationPredictedDataSet(){
  return evaluationPredictedDataSet;
}",0.8638132295719845
143993,"private ConstrainedLearningWithoutReTraining(int numberOfExamplesToPickPerIteration,int maximumNumberOfIterations,ActiveLearningMethod activeLearningMethod,ExamplePickingMethod examplePickingMethod,String workingDirectory,ImportedDataSet importedDataSet,Set<ResultType> resultTypes){
  this.numberOfExamplesToPickPerIteration=numberOfExamplesToPickPerIteration;
  this.maximumNumberOfIterations=maximumNumberOfIterations;
  this.activeLearningMethod=activeLearningMethod;
  this.examplePickingMethod=examplePickingMethod;
  this.labels=importedDataSet.labels;
  this.dataSet=importedDataSet.evaluationDataSet;
  this.predictedDataSet=importedDataSet.evaluationPredictedDataSet;
  this.resultTypes=resultTypes;
  logger.info(""String_Node_Str"");
  constraints=importConstraints(workingDirectory);
}","private ConstrainedLearningWithoutReTraining(int numberOfExamplesToPickPerIteration,int maximumNumberOfIterations,ActiveLearningMethod activeLearningMethod,ExamplePickingMethod examplePickingMethod,String workingDirectory,ImportedDataSet importedDataSet,Set<ResultType> resultTypes){
  this.numberOfExamplesToPickPerIteration=numberOfExamplesToPickPerIteration;
  this.maximumNumberOfIterations=maximumNumberOfIterations;
  this.activeLearningMethod=activeLearningMethod;
  this.examplePickingMethod=examplePickingMethod;
  this.labels=importedDataSet.labels;
  this.dataSet=importedDataSet.evaluationDataSet;
  this.predictedDataSet=importedDataSet.evaluationPredictedDataSet;
  this.predictedDataSetInstances=importedDataSet.evaluationPredictedDataSetInstances;
  this.resultTypes=resultTypes;
  logger.info(""String_Node_Str"");
  constraints=importConstraints(workingDirectory);
}",0.9487485101311084
143994,"public ImportedDataSet(Set<Label> labels,Map<DataInstance<Vector>,Map<Label,Boolean>> dataSet,Map<DataInstance<Vector>,Map<Label,Boolean>> evaluationDataSet,double l1RegularizationWeight,double l2RegularizationWeight){
  this.labels=labels;
  this.dataSet=dataSet;
  this.evaluationDataSet=evaluationDataSet;
  statistics=new HashMap<>();
  for (  Label label : labels)   statistics.put(label,new DataSetStatistics());
  for (  Map.Entry<DataInstance<Vector>,Map<Label,Boolean>> instanceEntry : dataSet.entrySet()) {
    for (    Map.Entry<Label,Boolean> instanceLabelEntry : instanceEntry.getValue().entrySet()) {
      if (instanceLabelEntry.getValue())       statistics.get(instanceLabelEntry.getKey()).numberOfPositiveExamples++;
 else       statistics.get(instanceLabelEntry.getKey()).numberOfNegativeExamples++;
      statistics.get(instanceLabelEntry.getKey()).totalNumberOfExamples++;
    }
  }
  predictedDataSet=new HashMap<>();
  evaluationPredictedDataSet=new HashMap<>();
  classifiers=new HashMap<>();
  for (  Label label : labels) {
    predictedDataSet.put(label,new DataSetInMemory<>());
    evaluationPredictedDataSet.put(label,new DataSetInMemory<>());
    Vector randomFeatureVector=dataSet.keySet().iterator().next().features();
    LogisticRegressionAdaGrad.Builder classifierBuilder=new LogisticRegressionAdaGrad.Builder(randomFeatureVector.size()).useBiasTerm(true).l1RegularizationWeight(l1RegularizationWeight).l2RegularizationWeight(l2RegularizationWeight).loggingLevel(0).sampleWithReplacement(true).maximumNumberOfIterations(1000).maximumNumberOfIterationsWithNoPointChange(10).pointChangeTolerance(1e-5).checkForPointConvergence(true).batchSize(100);
    if (randomFeatureVector instanceof DenseVector)     classifierBuilder.sparse(false);
 else     classifierBuilder.sparse(true);
    classifiers.put(label,classifierBuilder.build());
  }
  for (  Map.Entry<DataInstance<Vector>,Map<Label,Boolean>> instanceEntry : dataSet.entrySet())   for (  Map.Entry<Label,Boolean> instanceLabelEntry : instanceEntry.getValue().entrySet()) {
    PredictedDataInstance<Vector,Double> predictedInstance=new PredictedDataInstance<>(instanceEntry.getKey().name(),instanceEntry.getKey().features(),instanceLabelEntry.getValue() ? 1.0 : 0.0,null,1.0);
    predictedDataSet.get(instanceLabelEntry.getKey()).add(predictedInstance);
  }
  for (  Map.Entry<DataInstance<Vector>,Map<Label,Boolean>> instanceEntry : evaluationDataSet.entrySet())   for (  Map.Entry<Label,Boolean> instanceLabelEntry : instanceEntry.getValue().entrySet()) {
    PredictedDataInstance<Vector,Double> predictedInstance=new PredictedDataInstance<>(instanceEntry.getKey().name(),instanceEntry.getKey().features(),instanceLabelEntry.getValue() ? 1.0 : 0.0,null,1.0);
    evaluationPredictedDataSet.get(instanceLabelEntry.getKey()).add(predictedInstance);
  }
  labels.stream().forEach(label -> {
    classifiers.get(label).train(predictedDataSet.get(label));
    classifiers.get(label).predictInPlace(evaluationPredictedDataSet.get(label));
    for (    PredictedDataInstance<Vector,Double> instance : evaluationPredictedDataSet.get(label))     if (instance.label() < 0.5) {
      instance.label(1 - instance.label());
      instance.probability(1 - instance.probability());
    }
  }
);
}","public ImportedDataSet(Set<Label> labels,Map<DataInstance<Vector>,Map<Label,Boolean>> dataSet,Map<DataInstance<Vector>,Map<Label,Boolean>> evaluationDataSet,double l1RegularizationWeight,double l2RegularizationWeight){
  this.labels=labels;
  this.dataSet=dataSet;
  this.evaluationDataSet=evaluationDataSet;
  statistics=new HashMap<>();
  for (  Label label : labels)   statistics.put(label,new DataSetStatistics());
  for (  Map.Entry<DataInstance<Vector>,Map<Label,Boolean>> instanceEntry : dataSet.entrySet()) {
    for (    Map.Entry<Label,Boolean> instanceLabelEntry : instanceEntry.getValue().entrySet()) {
      if (instanceLabelEntry.getValue())       statistics.get(instanceLabelEntry.getKey()).numberOfPositiveExamples++;
 else       statistics.get(instanceLabelEntry.getKey()).numberOfNegativeExamples++;
      statistics.get(instanceLabelEntry.getKey()).totalNumberOfExamples++;
    }
  }
  Map<Label,DataSet<PredictedDataInstance<Vector,Double>>> predictedDataSet=new HashMap<>();
  evaluationPredictedDataSetInstances=new HashMap<>();
  classifiers=new HashMap<>();
  for (  Label label : labels) {
    predictedDataSet.put(label,new DataSetInMemory<>());
    evaluationPredictedDataSetInstances.put(label,new DataSetInMemory<>());
    Vector randomFeatureVector=dataSet.keySet().iterator().next().features();
    LogisticRegressionAdaGrad.Builder classifierBuilder=new LogisticRegressionAdaGrad.Builder(randomFeatureVector.size()).useBiasTerm(true).l1RegularizationWeight(l1RegularizationWeight).l2RegularizationWeight(l2RegularizationWeight).loggingLevel(0).sampleWithReplacement(true).maximumNumberOfIterations(1000).maximumNumberOfIterationsWithNoPointChange(10).pointChangeTolerance(1e-5).checkForPointConvergence(true).batchSize(100);
    if (randomFeatureVector instanceof DenseVector)     classifierBuilder.sparse(false);
 else     classifierBuilder.sparse(true);
    classifiers.put(label,classifierBuilder.build());
  }
  for (  Map.Entry<DataInstance<Vector>,Map<Label,Boolean>> instanceEntry : dataSet.entrySet())   for (  Map.Entry<Label,Boolean> instanceLabelEntry : instanceEntry.getValue().entrySet()) {
    PredictedDataInstance<Vector,Double> predictedInstance=new PredictedDataInstance<>(instanceEntry.getKey().name(),instanceEntry.getKey().features(),instanceLabelEntry.getValue() ? 1.0 : 0.0,null,1.0);
    predictedDataSet.get(instanceLabelEntry.getKey()).add(predictedInstance);
  }
  for (  Map.Entry<DataInstance<Vector>,Map<Label,Boolean>> instanceEntry : evaluationDataSet.entrySet())   for (  Map.Entry<Label,Boolean> instanceLabelEntry : instanceEntry.getValue().entrySet()) {
    PredictedDataInstance<Vector,Double> predictedInstance=new PredictedDataInstance<>(instanceEntry.getKey().name(),instanceEntry.getKey().features(),instanceLabelEntry.getValue() ? 1.0 : 0.0,null,1.0);
    evaluationPredictedDataSetInstances.get(instanceLabelEntry.getKey()).add(predictedInstance);
  }
  labels.stream().forEach(label -> {
    classifiers.get(label).train(predictedDataSet.get(label));
    classifiers.get(label).predictInPlace(evaluationPredictedDataSetInstances.get(label));
    for (    PredictedDataInstance<Vector,Double> instance : evaluationPredictedDataSetInstances.get(label))     if (instance.label() < 0.5) {
      instance.label(1 - instance.label());
      instance.probability(1 - instance.probability());
    }
  }
);
  evaluationPredictedDataSet=new HashMap<>();
  for (  Map.Entry<Label,DataSet<PredictedDataInstance<Vector,Double>>> instanceEntry : evaluationPredictedDataSetInstances.entrySet()) {
    for (    PredictedDataInstance<Vector,Double> predictedInstance : instanceEntry.getValue()) {
      DataInstance<Vector> instance=new DataInstance<>(predictedInstance.name(),predictedInstance.features());
      if (!evaluationPredictedDataSet.containsKey(instance))       evaluationPredictedDataSet.put(instance,new HashMap<>());
      evaluationPredictedDataSet.get(instance).put(instanceEntry.getKey(),predictedInstance.probability());
    }
  }
}",0.8986820428336079
143995,"protected AbstractBuilder(Map<DataInstance<Vector>,Map<Label,Boolean>> dataSet){
  super(dataSet);
}","protected AbstractBuilder(Map<DataInstance<Vector>,Map<Label,Boolean>> dataSet,Function<InstanceToLabel,Double> probabilityFunction){
  super(dataSet,probabilityFunction);
}",0.7326007326007326
143996,"public Builder(Map<DataInstance<Vector>,Map<Label,Boolean>> dataSet){
  super(dataSet);
}","public Builder(Map<DataInstance<Vector>,Map<Label,Boolean>> dataSet,Function<InstanceToLabel,Double> probabilityFunction){
  super(dataSet,probabilityFunction);
}",0.7091633466135459
143997,"/** 
 * {@inheritDoc} 
 */
@Override public SparseVector saxpyPlusConstantInPlace(double scalar,Vector vector){
  if (vector.size() + 1 != this.size())   throw new IllegalArgumentException(""String_Node_Str"");
  if (vector.type() == VectorType.SPARSE) {
    int[] newIndexes=new int[numberOfNonzeroEntries + ((SparseVector)vector).numberOfNonzeroEntries + 1];
    double[] newValues=new double[numberOfNonzeroEntries + ((SparseVector)vector).numberOfNonzeroEntries + 1];
    int currentIndex=0;
    int vector1Index=0;
    int vector2Index=0;
    while (vector1Index < numberOfNonzeroEntries && vector2Index < ((SparseVector)vector).numberOfNonzeroEntries) {
      if (indexes[vector1Index] < ((SparseVector)vector).indexes[vector2Index]) {
        newIndexes[currentIndex]=indexes[vector1Index];
        newValues[currentIndex]=values[vector1Index];
        currentIndex++;
        vector1Index++;
      }
 else       if (indexes[vector1Index] > ((SparseVector)vector).indexes[vector2Index]) {
        newIndexes[currentIndex]=((SparseVector)vector).indexes[vector2Index];
        newValues[currentIndex]=scalar * ((SparseVector)vector).values[vector2Index];
        currentIndex++;
        vector2Index++;
      }
 else {
        newIndexes[currentIndex]=indexes[vector1Index];
        newValues[currentIndex]=values[vector1Index] + scalar * ((SparseVector)vector).values[vector2Index];
        currentIndex++;
        vector1Index++;
        vector2Index++;
      }
    }
    while (vector1Index < numberOfNonzeroEntries) {
      newIndexes[currentIndex]=indexes[vector1Index];
      newValues[currentIndex]=values[vector1Index];
      currentIndex++;
      vector1Index++;
    }
    while (vector2Index < ((SparseVector)vector).numberOfNonzeroEntries) {
      newIndexes[currentIndex]=((SparseVector)vector).indexes[vector2Index];
      newValues[currentIndex]=scalar * ((SparseVector)vector).values[vector2Index];
      currentIndex++;
      vector2Index++;
    }
    if (newIndexes[currentIndex - 1] == size - 1) {
      newValues[currentIndex - 1]+=scalar;
    }
 else {
      newIndexes[currentIndex]=size - 1;
      newValues[currentIndex]=scalar;
      currentIndex++;
    }
    indexes=newIndexes;
    values=newValues;
    numberOfNonzeroEntries=currentIndex;
  }
 else {
    throw new UnsupportedOperationException();
  }
  return this;
}","/** 
 * {@inheritDoc} 
 */
@Override public SparseVector saxpyPlusConstantInPlace(double scalar,Vector vector){
  if (vector.size() + 1 != this.size())   throw new IllegalArgumentException(""String_Node_Str"");
  if (vector.type() == VectorType.SPARSE) {
    int[] newIndexes=new int[numberOfNonzeroEntries + ((SparseVector)vector).numberOfNonzeroEntries + 1];
    double[] newValues=new double[numberOfNonzeroEntries + ((SparseVector)vector).numberOfNonzeroEntries + 1];
    int currentIndex=0;
    int vector1Index=0;
    int vector2Index=0;
    while (vector1Index < numberOfNonzeroEntries && vector2Index < ((SparseVector)vector).numberOfNonzeroEntries) {
      if (indexes[vector1Index] < ((SparseVector)vector).indexes[vector2Index]) {
        newIndexes[currentIndex]=indexes[vector1Index];
        newValues[currentIndex]=values[vector1Index];
        currentIndex++;
        vector1Index++;
      }
 else       if (indexes[vector1Index] > ((SparseVector)vector).indexes[vector2Index]) {
        newIndexes[currentIndex]=((SparseVector)vector).indexes[vector2Index];
        newValues[currentIndex]=scalar * ((SparseVector)vector).values[vector2Index];
        currentIndex++;
        vector2Index++;
      }
 else {
        newIndexes[currentIndex]=indexes[vector1Index];
        newValues[currentIndex]=values[vector1Index] + scalar * ((SparseVector)vector).values[vector2Index];
        currentIndex++;
        vector1Index++;
        vector2Index++;
      }
    }
    while (vector1Index < numberOfNonzeroEntries) {
      newIndexes[currentIndex]=indexes[vector1Index];
      newValues[currentIndex]=values[vector1Index];
      currentIndex++;
      vector1Index++;
    }
    while (vector2Index < ((SparseVector)vector).numberOfNonzeroEntries) {
      newIndexes[currentIndex]=((SparseVector)vector).indexes[vector2Index];
      newValues[currentIndex]=scalar * ((SparseVector)vector).values[vector2Index];
      currentIndex++;
      vector2Index++;
    }
    if (currentIndex > 0 && newIndexes[currentIndex - 1] == size - 1) {
      newValues[currentIndex - 1]+=scalar;
    }
 else {
      newIndexes[currentIndex]=size - 1;
      newValues[currentIndex]=scalar;
      currentIndex++;
    }
    indexes=newIndexes;
    values=newValues;
    numberOfNonzeroEntries=currentIndex;
  }
 else {
    throw new UnsupportedOperationException();
  }
  return this;
}",0.9957627118644068
143998,"/** 
 * {@inheritDoc} 
 */
@Override public SparseVector saxpyPlusConstant(double scalar,Vector vector){
  if (vector.size() + 1 != this.size())   throw new IllegalArgumentException(""String_Node_Str"");
  SparseVector resultVector;
  if (vector.type() == VectorType.SPARSE) {
    int[] newIndexes=new int[numberOfNonzeroEntries + ((SparseVector)vector).numberOfNonzeroEntries + 1];
    double[] newValues=new double[numberOfNonzeroEntries + ((SparseVector)vector).numberOfNonzeroEntries + 1];
    int currentIndex=0;
    int vector1Index=0;
    int vector2Index=0;
    while (vector1Index < numberOfNonzeroEntries && vector2Index < ((SparseVector)vector).numberOfNonzeroEntries) {
      if (indexes[vector1Index] < ((SparseVector)vector).indexes[vector2Index]) {
        newIndexes[currentIndex]=indexes[vector1Index];
        newValues[currentIndex]=values[vector1Index];
        currentIndex++;
        vector1Index++;
      }
 else       if (indexes[vector1Index] > ((SparseVector)vector).indexes[vector2Index]) {
        newIndexes[currentIndex]=((SparseVector)vector).indexes[vector2Index];
        newValues[currentIndex]=scalar * ((SparseVector)vector).values[vector2Index];
        currentIndex++;
        vector2Index++;
      }
 else {
        newIndexes[currentIndex]=indexes[vector1Index];
        newValues[currentIndex]=values[vector1Index] + scalar * ((SparseVector)vector).values[vector2Index];
        currentIndex++;
        vector1Index++;
        vector2Index++;
      }
    }
    while (vector1Index < numberOfNonzeroEntries) {
      newIndexes[currentIndex]=indexes[vector1Index];
      newValues[currentIndex]=values[vector1Index];
      currentIndex++;
      vector1Index++;
    }
    while (vector2Index < ((SparseVector)vector).numberOfNonzeroEntries) {
      newIndexes[currentIndex]=((SparseVector)vector).indexes[vector2Index];
      newValues[currentIndex]=scalar * ((SparseVector)vector).values[vector2Index];
      currentIndex++;
      vector2Index++;
    }
    if (newIndexes[currentIndex - 1] == size - 1) {
      newValues[currentIndex - 1]+=scalar;
    }
 else {
      newIndexes[currentIndex]=size - 1;
      newValues[currentIndex]=scalar;
      currentIndex++;
    }
    resultVector=new SparseVector(size,currentIndex,newIndexes,newValues);
  }
 else {
    throw new UnsupportedOperationException();
  }
  return resultVector;
}","/** 
 * {@inheritDoc} 
 */
@Override public SparseVector saxpyPlusConstant(double scalar,Vector vector){
  if (vector.size() + 1 != this.size())   throw new IllegalArgumentException(""String_Node_Str"");
  SparseVector resultVector;
  if (vector.type() == VectorType.SPARSE) {
    int[] newIndexes=new int[numberOfNonzeroEntries + ((SparseVector)vector).numberOfNonzeroEntries + 1];
    double[] newValues=new double[numberOfNonzeroEntries + ((SparseVector)vector).numberOfNonzeroEntries + 1];
    int currentIndex=0;
    int vector1Index=0;
    int vector2Index=0;
    while (vector1Index < numberOfNonzeroEntries && vector2Index < ((SparseVector)vector).numberOfNonzeroEntries) {
      if (indexes[vector1Index] < ((SparseVector)vector).indexes[vector2Index]) {
        newIndexes[currentIndex]=indexes[vector1Index];
        newValues[currentIndex]=values[vector1Index];
        currentIndex++;
        vector1Index++;
      }
 else       if (indexes[vector1Index] > ((SparseVector)vector).indexes[vector2Index]) {
        newIndexes[currentIndex]=((SparseVector)vector).indexes[vector2Index];
        newValues[currentIndex]=scalar * ((SparseVector)vector).values[vector2Index];
        currentIndex++;
        vector2Index++;
      }
 else {
        newIndexes[currentIndex]=indexes[vector1Index];
        newValues[currentIndex]=values[vector1Index] + scalar * ((SparseVector)vector).values[vector2Index];
        currentIndex++;
        vector1Index++;
        vector2Index++;
      }
    }
    while (vector1Index < numberOfNonzeroEntries) {
      newIndexes[currentIndex]=indexes[vector1Index];
      newValues[currentIndex]=values[vector1Index];
      currentIndex++;
      vector1Index++;
    }
    while (vector2Index < ((SparseVector)vector).numberOfNonzeroEntries) {
      newIndexes[currentIndex]=((SparseVector)vector).indexes[vector2Index];
      newValues[currentIndex]=scalar * ((SparseVector)vector).values[vector2Index];
      currentIndex++;
      vector2Index++;
    }
    if (currentIndex > 0 && newIndexes[currentIndex - 1] == size - 1) {
      newValues[currentIndex - 1]+=scalar;
    }
 else {
      newIndexes[currentIndex]=size - 1;
      newValues[currentIndex]=scalar;
      currentIndex++;
    }
    resultVector=new SparseVector(size,currentIndex,newIndexes,newValues);
  }
 else {
    throw new UnsupportedOperationException();
  }
  return resultVector;
}",0.9957947855340622
143999,"@Override public int hashCode(){
  return Objects.hashCode(predicate,arguments,value);
}","@Override public int hashCode(){
  return Objects.hashCode(id);
}",0.8366013071895425
144000,"@Override public boolean equals(Object other){
  if (this == other)   return true;
  if (other == null || getClass() != other.getClass())   return false;
  GroundPredicate that=(GroundPredicate)other;
  return Objects.equal(predicate,that.predicate) && Objects.equal(arguments,that.arguments) && Objects.equal(value,that.value);
}","@Override public boolean equals(Object other){
  if (this == other)   return true;
  if (other == null || getClass() != other.getClass())   return false;
  GroundPredicate that=(GroundPredicate)other;
  return Objects.equal(id,that.id);
}",0.823943661971831
