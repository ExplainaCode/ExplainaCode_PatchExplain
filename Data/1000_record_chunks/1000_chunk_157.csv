record_number,buggy_code,fixed_code,code_similarity
156001,"@Override protected Object decode(ChannelHandlerContext ctx,Channel channel,ChannelBuffer buf) throws Exception {
  char marker=(char)buf.getByte(buf.readerIndex());
  while (marker != '*' && marker != '$' && marker != 'X' && buf.readableBytes() > 0) {
    buf.skipBytes(1);
    if (buf.readableBytes() > 0) {
      marker=(char)buf.getByte(buf.readerIndex());
    }
  }
  if (marker == '*') {
    int index=buf.indexOf(buf.readerIndex(),buf.writerIndex(),(byte)'#');
    if (index != -1) {
      return buf.readBytes(index + 1 - buf.readerIndex());
    }
  }
 else   if (marker == '$') {
    if (messageLength == 0) {
      if (buf.readableBytes() == MESSAGE_LONG) {
        messageLength=MESSAGE_LONG;
      }
 else {
        messageLength=MESSAGE_SHORT;
      }
    }
    if (buf.readableBytes() >= messageLength) {
      return buf.readBytes(messageLength);
    }
  }
 else   if (marker == 'X') {
    if (buf.readableBytes() >= MESSAGE_SHORT) {
      return buf.readBytes(MESSAGE_SHORT);
    }
  }
  return null;
}","@Override protected Object decode(ChannelHandlerContext ctx,Channel channel,ChannelBuffer buf) throws Exception {
  char marker=(char)buf.getByte(buf.readerIndex());
  while (marker != '*' && marker != '$' && marker != 'X' && buf.readableBytes() > 0) {
    buf.skipBytes(1);
    if (buf.readableBytes() > 0) {
      marker=(char)buf.getByte(buf.readerIndex());
    }
  }
switch (marker) {
case '*':
    int index=buf.indexOf(buf.readerIndex(),buf.writerIndex(),(byte)'#');
  if (index != -1) {
    return buf.readBytes(index + 1 - buf.readerIndex());
  }
break;
case '$':
if (messageLength == 0) {
if (buf.readableBytes() == MESSAGE_LONG) {
  messageLength=MESSAGE_LONG;
}
 else {
  messageLength=MESSAGE_SHORT;
}
}
if (buf.readableBytes() >= messageLength) {
return buf.readBytes(messageLength);
}
break;
case 'X':
if (buf.readableBytes() >= MESSAGE_SHORT) {
return buf.readBytes(MESSAGE_SHORT);
}
break;
default :
throw new IllegalArgumentException();
}
return null;
}",0.8591549295774648
156002,"@Override protected Object decode(Channel channel,SocketAddress remoteAddress,Object msg) throws Exception {
  org.traccar.helper.PatternUtil.MatchResult matchResult=org.traccar.helper.PatternUtil.checkPattern(PATTERN.pattern(),(String)msg);
  Parser parser=new Parser(PATTERN,(String)msg);
  if (!parser.matches()) {
    return null;
  }
  DeviceSession deviceSession=getDeviceSession(channel,remoteAddress,parser.next());
  if (deviceSession == null) {
    return null;
  }
  Position position=new Position();
  position.setProtocol(getProtocolName());
  position.setDeviceId(deviceSession.getDeviceId());
  DateBuilder dateBuilder=new DateBuilder().setDateReverse(parser.nextInt(),parser.nextInt(),parser.nextInt()).setTime(parser.nextInt(),parser.nextInt(),parser.nextInt());
  position.setTime(dateBuilder.getDate());
  position.setValid(parser.nextInt() > 0);
  position.setLatitude(parser.nextCoordinate());
  position.setLongitude(parser.nextCoordinate());
  position.setSpeed(UnitsConverter.knotsFromKph(parser.nextDouble()));
  position.setCourse(parser.nextDouble());
  position.setAltitude(parser.nextDouble());
  position.set(Position.KEY_HDOP,parser.nextDouble());
  position.set(Position.KEY_SATELLITES,parser.nextInt());
  position.set(Position.KEY_IGNITION,parser.nextInt() == 1);
  position.set(Position.KEY_BATTERY,parser.nextDouble());
  position.set(Position.KEY_POWER,parser.nextDouble());
  position.set(Position.KEY_INPUT,parser.nextInt(2));
  position.set(Position.KEY_OUTPUT,parser.nextInt(2));
  return position;
}","@Override protected Object decode(Channel channel,SocketAddress remoteAddress,Object msg) throws Exception {
  Parser parser=new Parser(PATTERN,(String)msg);
  if (!parser.matches()) {
    return null;
  }
  DeviceSession deviceSession=getDeviceSession(channel,remoteAddress,parser.next());
  if (deviceSession == null) {
    return null;
  }
  Position position=new Position();
  position.setProtocol(getProtocolName());
  position.setDeviceId(deviceSession.getDeviceId());
  DateBuilder dateBuilder=new DateBuilder().setDateReverse(parser.nextInt(),parser.nextInt(),parser.nextInt()).setTime(parser.nextInt(),parser.nextInt(),parser.nextInt());
  position.setTime(dateBuilder.getDate());
  position.setValid(parser.nextInt() > 0);
  position.setLatitude(parser.nextCoordinate());
  position.setLongitude(parser.nextCoordinate());
  position.setSpeed(UnitsConverter.knotsFromKph(parser.nextDouble()));
  position.setCourse(parser.nextDouble());
  position.setAltitude(parser.nextDouble());
  position.set(Position.KEY_HDOP,parser.nextDouble());
  position.set(Position.KEY_SATELLITES,parser.nextInt());
  position.set(Position.KEY_IGNITION,parser.nextInt() == 1);
  position.set(Position.KEY_BATTERY,parser.nextDouble());
  position.set(Position.KEY_POWER,parser.nextDouble());
  position.set(Position.KEY_INPUT,parser.nextInt(2));
  position.set(Position.KEY_OUTPUT,parser.nextInt(2));
  return position;
}",0.9548999660902
156003,"private void decodeParameter(Position position,int id,ChannelBuffer buf,int length){
switch (id) {
case 9:
    position.set(Position.PREFIX_ADC + 1,buf.readUnsignedShort());
  break;
case 66:
position.set(Position.KEY_POWER,buf.readUnsignedShort() + ""String_Node_Str"");
break;
case 67:
position.set(Position.KEY_BATTERY,buf.readUnsignedShort() + ""String_Node_Str"");
break;
case 72:
position.set(Position.PREFIX_TEMP + 1,buf.readInt() * 0.1);
break;
case 73:
position.set(Position.PREFIX_TEMP + 2,buf.readInt() * 0.1);
break;
case 74:
position.set(Position.PREFIX_TEMP + 3,buf.readInt() * 0.1);
break;
case 78:
position.set(Position.KEY_RFID,buf.readLong());
break;
case 182:
position.set(Position.KEY_HDOP,buf.readUnsignedShort() * 0.1);
break;
default :
switch (length) {
case 1:
position.set(Position.PREFIX_IO + id,buf.readUnsignedByte());
break;
case 2:
position.set(Position.PREFIX_IO + id,buf.readUnsignedShort());
break;
case 4:
position.set(Position.PREFIX_IO + id,buf.readUnsignedInt());
break;
case 8:
position.set(Position.PREFIX_IO + id,buf.readLong());
break;
}
break;
}
}","private void decodeParameter(Position position,int id,ChannelBuffer buf,int length){
switch (id) {
case 9:
    position.set(Position.PREFIX_ADC + 1,buf.readUnsignedShort());
  break;
case 66:
position.set(Position.KEY_POWER,buf.readUnsignedShort() + ""String_Node_Str"");
break;
case 67:
position.set(Position.KEY_BATTERY,buf.readUnsignedShort() + ""String_Node_Str"");
break;
case 72:
position.set(Position.PREFIX_TEMP + 1,buf.readInt() * 0.1);
break;
case 73:
position.set(Position.PREFIX_TEMP + 2,buf.readInt() * 0.1);
break;
case 74:
position.set(Position.PREFIX_TEMP + 3,buf.readInt() * 0.1);
break;
case 78:
position.set(Position.KEY_RFID,buf.readLong());
break;
case 182:
position.set(Position.KEY_HDOP,buf.readUnsignedShort() * 0.1);
break;
default :
switch (length) {
case 1:
position.set(Position.PREFIX_IO + id,buf.readUnsignedByte());
break;
case 2:
position.set(Position.PREFIX_IO + id,buf.readUnsignedShort());
break;
case 4:
position.set(Position.PREFIX_IO + id,buf.readUnsignedInt());
break;
case 8:
default :
position.set(Position.PREFIX_IO + id,buf.readLong());
break;
}
break;
}
}",0.9954128440366972
156004,"@Override public ObjectMapper getContext(Class<?> type){
  return mapper;
}","@Override public ObjectMapper getContext(Class<?> type){
  return Context.getObjectMapper();
}",0.8757396449704142
156005,"@Override protected Object decode(Channel channel,SocketAddress remoteAddress,Object msg) throws Exception {
  ChannelBuffer buf=(ChannelBuffer)msg;
  int header=buf.readShort();
  if (header == 0x7878) {
    int length=buf.readUnsignedByte();
    int dataLength=length - 5;
    int type=buf.readUnsignedByte();
    if (type == MSG_LOGIN) {
      String imei=ChannelBuffers.hexDump(buf.readBytes(8)).substring(1);
      buf.readUnsignedShort();
      if (dataLength > 10) {
        int extensionBits=buf.readUnsignedShort();
        int hours=(extensionBits >> 4) / 100;
        int minutes=(extensionBits >> 4) % 100;
        int offset=(hours * 60 + minutes) * 60;
        if ((extensionBits & 0x8) != 0) {
          offset=-offset;
        }
        if (!forceTimeZone) {
          timeZone.setRawOffset(offset * 1000);
        }
      }
      DeviceSession deviceSession=getDeviceSession(channel,remoteAddress,imei);
      if (deviceSession != null) {
        buf.skipBytes(buf.readableBytes() - 6);
        sendResponse(channel,type,buf.readUnsignedShort());
      }
    }
 else {
      DeviceSession deviceSession=getDeviceSession(channel,remoteAddress);
      if (deviceSession == null) {
        return null;
      }
      if (type == MSG_LBS_EXTEND) {
        Position position=new Position();
        position.setDeviceId(deviceSession.getDeviceId());
        position.setProtocol(getProtocolName());
        DateBuilder dateBuilder=new DateBuilder(timeZone).setDate(buf.readUnsignedByte(),buf.readUnsignedByte(),buf.readUnsignedByte()).setTime(buf.readUnsignedByte(),buf.readUnsignedByte(),buf.readUnsignedByte());
        getLastLocation(position,dateBuilder.getDate());
        int mcc=buf.readUnsignedShort();
        int mnc=buf.readUnsignedByte();
        Network network=new Network();
        for (int i=0; i < 7; i++) {
          network.addCellTower(CellTower.from(mcc,mnc,buf.readUnsignedShort(),buf.readUnsignedMedium(),-buf.readUnsignedByte()));
        }
        position.setNetwork(network);
        return position;
      }
      if (type == MSG_STRING) {
        Position position=new Position();
        position.setDeviceId(deviceSession.getDeviceId());
        position.setProtocol(getProtocolName());
        getLastLocation(position,null);
        int commandLength=buf.readUnsignedByte();
        if (commandLength > 0) {
          buf.readUnsignedByte();
          position.set(""String_Node_Str"",buf.readBytes(commandLength - 1).toString(StandardCharsets.US_ASCII));
        }
        buf.readUnsignedShort();
        sendResponse(channel,type,buf.readUnsignedShort());
        return position;
      }
 else       if (isSupported(type)) {
        Position position=new Position();
        position.setDeviceId(deviceSession.getDeviceId());
        position.setProtocol(getProtocolName());
        if (hasGps(type)) {
          decodeGps(position,buf);
        }
 else {
          getLastLocation(position,null);
        }
        if (hasLbs(type)) {
          decodeLbs(position,buf,hasStatus(type));
        }
        if (hasStatus(type)) {
          decodeStatus(position,buf);
        }
        if (type == MSG_GPS_LBS_1 && buf.readableBytes() == 4 + 6) {
          position.set(Position.KEY_ODOMETER,buf.readUnsignedInt());
        }
        if (buf.readableBytes() > 6) {
          buf.skipBytes(buf.readableBytes() - 6);
        }
        int index=buf.readUnsignedShort();
        position.set(Position.KEY_INDEX,index);
        sendResponse(channel,type,index);
        return position;
      }
 else {
        buf.skipBytes(dataLength);
        if (type != MSG_COMMAND_0 && type != MSG_COMMAND_1 && type != MSG_COMMAND_2) {
          sendResponse(channel,type,buf.readUnsignedShort());
        }
      }
    }
  }
 else   if (header == 0x7979) {
    DeviceSession deviceSession=getDeviceSession(channel,remoteAddress);
    if (deviceSession == null) {
      return null;
    }
    buf.readUnsignedShort();
    int type=buf.readUnsignedByte();
    if (type == MSG_INFO) {
      int subType=buf.readUnsignedByte();
      Position position=new Position();
      position.setDeviceId(deviceSession.getDeviceId());
      position.setProtocol(getProtocolName());
      getLastLocation(position,null);
      if (subType == 0x00) {
        position.set(Position.KEY_POWER,buf.readUnsignedShort() * 0.01);
        return position;
      }
 else       if (subType == 0x05) {
        int flags=buf.readUnsignedByte();
        position.set(""String_Node_Str"",BitUtil.check(flags,0));
        position.set(Position.PREFIX_IO + 1,BitUtil.check(flags,2));
        return position;
      }
    }
  }
  return null;
}","@Override protected Object decode(Channel channel,SocketAddress remoteAddress,Object msg) throws Exception {
  ChannelBuffer buf=(ChannelBuffer)msg;
  int header=buf.readShort();
  if (header == 0x7878) {
    int length=buf.readUnsignedByte();
    int dataLength=length - 5;
    int type=buf.readUnsignedByte();
    if (type == MSG_LOGIN) {
      String imei=ChannelBuffers.hexDump(buf.readBytes(8)).substring(1);
      buf.readUnsignedShort();
      if (dataLength > 10) {
        int extensionBits=buf.readUnsignedShort();
        int hours=(extensionBits >> 4) / 100;
        int minutes=(extensionBits >> 4) % 100;
        int offset=(hours * 60 + minutes) * 60;
        if ((extensionBits & 0x8) != 0) {
          offset=-offset;
        }
        if (!forceTimeZone) {
          timeZone.setRawOffset(offset * 1000);
        }
      }
      if (getDeviceSession(channel,remoteAddress,imei) != null) {
        buf.skipBytes(buf.readableBytes() - 6);
        sendResponse(channel,type,buf.readUnsignedShort());
      }
    }
 else {
      DeviceSession deviceSession=getDeviceSession(channel,remoteAddress);
      if (deviceSession == null) {
        return null;
      }
      Position position=new Position();
      position.setDeviceId(deviceSession.getDeviceId());
      position.setProtocol(getProtocolName());
      if (type == MSG_LBS_EXTEND) {
        DateBuilder dateBuilder=new DateBuilder(timeZone).setDate(buf.readUnsignedByte(),buf.readUnsignedByte(),buf.readUnsignedByte()).setTime(buf.readUnsignedByte(),buf.readUnsignedByte(),buf.readUnsignedByte());
        getLastLocation(position,dateBuilder.getDate());
        int mcc=buf.readUnsignedShort();
        int mnc=buf.readUnsignedByte();
        Network network=new Network();
        for (int i=0; i < 7; i++) {
          network.addCellTower(CellTower.from(mcc,mnc,buf.readUnsignedShort(),buf.readUnsignedMedium(),-buf.readUnsignedByte()));
        }
        position.setNetwork(network);
      }
 else       if (type == MSG_STRING) {
        getLastLocation(position,null);
        int commandLength=buf.readUnsignedByte();
        if (commandLength > 0) {
          buf.readUnsignedByte();
          position.set(""String_Node_Str"",buf.readBytes(commandLength - 1).toString(StandardCharsets.US_ASCII));
        }
      }
 else       if (isSupported(type)) {
        if (hasGps(type)) {
          decodeGps(position,buf);
        }
 else {
          getLastLocation(position,null);
        }
        if (hasLbs(type)) {
          decodeLbs(position,buf,hasStatus(type));
        }
        if (hasStatus(type)) {
          decodeStatus(position,buf);
        }
        if (type == MSG_GPS_LBS_1 && buf.readableBytes() == 4 + 6) {
          position.set(Position.KEY_ODOMETER,buf.readUnsignedInt());
        }
      }
 else {
        buf.skipBytes(dataLength);
        if (type != MSG_COMMAND_0 && type != MSG_COMMAND_1 && type != MSG_COMMAND_2) {
          sendResponse(channel,type,buf.readUnsignedShort());
        }
        return null;
      }
      if (buf.readableBytes() > 6) {
        buf.skipBytes(buf.readableBytes() - 6);
      }
      sendResponse(channel,type,buf.readUnsignedShort());
      return position;
    }
  }
 else   if (header == 0x7979) {
    DeviceSession deviceSession=getDeviceSession(channel,remoteAddress);
    if (deviceSession == null) {
      return null;
    }
    buf.readUnsignedShort();
    int type=buf.readUnsignedByte();
    if (type == MSG_INFO) {
      int subType=buf.readUnsignedByte();
      Position position=new Position();
      position.setDeviceId(deviceSession.getDeviceId());
      position.setProtocol(getProtocolName());
      getLastLocation(position,null);
      if (subType == 0x00) {
        position.set(Position.KEY_POWER,buf.readUnsignedShort() * 0.01);
        return position;
      }
 else       if (subType == 0x05) {
        int flags=buf.readUnsignedByte();
        position.set(""String_Node_Str"",BitUtil.check(flags,0));
        position.set(Position.PREFIX_IO + 1,BitUtil.check(flags,2));
        return position;
      }
    }
  }
  return null;
}",0.7975263398992213
156006,"@Override public void process(T object,ResultSet resultSet) throws SQLException {
  String value=resultSet.getString(name);
  if (value != null) {
    try {
      method.invoke(object,Context.getObjectMapper().readValue(value,parameterType.getClass()));
    }
 catch (    InvocationTargetException|IllegalAccessException|IOException error) {
      Log.warning(error);
    }
  }
}","@Override public void process(T object,ResultSet resultSet) throws SQLException {
  String value=resultSet.getString(name);
  if (value != null) {
    try {
      method.invoke(object,Context.getObjectMapper().readValue(value,parameterType));
    }
 catch (    InvocationTargetException|IllegalAccessException|IOException error) {
      Log.warning(error);
    }
  }
}",0.9852744310575636
156007,"private <T>void addProcessors(List<ResultSetProcessor<T>> processors,final Class<?> parameterType,final Method method,final String name){
  if (parameterType.equals(boolean.class)) {
    processors.add(new ResultSetProcessor<T>(){
      @Override public void process(      T object,      ResultSet resultSet) throws SQLException {
        try {
          method.invoke(object,resultSet.getBoolean(name));
        }
 catch (        IllegalAccessException|InvocationTargetException error) {
          Log.warning(error);
        }
      }
    }
);
  }
 else   if (parameterType.equals(int.class)) {
    processors.add(new ResultSetProcessor<T>(){
      @Override public void process(      T object,      ResultSet resultSet) throws SQLException {
        try {
          method.invoke(object,resultSet.getInt(name));
        }
 catch (        IllegalAccessException|InvocationTargetException error) {
          Log.warning(error);
        }
      }
    }
);
  }
 else   if (parameterType.equals(long.class)) {
    processors.add(new ResultSetProcessor<T>(){
      @Override public void process(      T object,      ResultSet resultSet) throws SQLException {
        try {
          method.invoke(object,resultSet.getLong(name));
        }
 catch (        IllegalAccessException|InvocationTargetException error) {
          Log.warning(error);
        }
      }
    }
);
  }
 else   if (parameterType.equals(double.class)) {
    processors.add(new ResultSetProcessor<T>(){
      @Override public void process(      T object,      ResultSet resultSet) throws SQLException {
        try {
          method.invoke(object,resultSet.getDouble(name));
        }
 catch (        IllegalAccessException|InvocationTargetException error) {
          Log.warning(error);
        }
      }
    }
);
  }
 else   if (parameterType.equals(String.class)) {
    processors.add(new ResultSetProcessor<T>(){
      @Override public void process(      T object,      ResultSet resultSet) throws SQLException {
        try {
          method.invoke(object,resultSet.getString(name));
        }
 catch (        IllegalAccessException|InvocationTargetException error) {
          Log.warning(error);
        }
      }
    }
);
  }
 else   if (parameterType.equals(Date.class)) {
    processors.add(new ResultSetProcessor<T>(){
      @Override public void process(      T object,      ResultSet resultSet) throws SQLException {
        try {
          Timestamp timestamp=resultSet.getTimestamp(name);
          if (timestamp != null) {
            method.invoke(object,new Date(timestamp.getTime()));
          }
        }
 catch (        IllegalAccessException|InvocationTargetException error) {
          Log.warning(error);
        }
      }
    }
);
  }
 else   if (parameterType.equals(byte[].class)) {
    processors.add(new ResultSetProcessor<T>(){
      @Override public void process(      T object,      ResultSet resultSet) throws SQLException {
        try {
          method.invoke(object,resultSet.getBytes(name));
        }
 catch (        IllegalAccessException|InvocationTargetException error) {
          Log.warning(error);
        }
      }
    }
);
  }
 else {
    processors.add(new ResultSetProcessor<T>(){
      @Override public void process(      T object,      ResultSet resultSet) throws SQLException {
        String value=resultSet.getString(name);
        if (value != null) {
          try {
            method.invoke(object,Context.getObjectMapper().readValue(value,parameterType.getClass()));
          }
 catch (          InvocationTargetException|IllegalAccessException|IOException error) {
            Log.warning(error);
          }
        }
      }
    }
);
  }
}","private <T>void addProcessors(List<ResultSetProcessor<T>> processors,final Class<?> parameterType,final Method method,final String name){
  if (parameterType.equals(boolean.class)) {
    processors.add(new ResultSetProcessor<T>(){
      @Override public void process(      T object,      ResultSet resultSet) throws SQLException {
        try {
          method.invoke(object,resultSet.getBoolean(name));
        }
 catch (        IllegalAccessException|InvocationTargetException error) {
          Log.warning(error);
        }
      }
    }
);
  }
 else   if (parameterType.equals(int.class)) {
    processors.add(new ResultSetProcessor<T>(){
      @Override public void process(      T object,      ResultSet resultSet) throws SQLException {
        try {
          method.invoke(object,resultSet.getInt(name));
        }
 catch (        IllegalAccessException|InvocationTargetException error) {
          Log.warning(error);
        }
      }
    }
);
  }
 else   if (parameterType.equals(long.class)) {
    processors.add(new ResultSetProcessor<T>(){
      @Override public void process(      T object,      ResultSet resultSet) throws SQLException {
        try {
          method.invoke(object,resultSet.getLong(name));
        }
 catch (        IllegalAccessException|InvocationTargetException error) {
          Log.warning(error);
        }
      }
    }
);
  }
 else   if (parameterType.equals(double.class)) {
    processors.add(new ResultSetProcessor<T>(){
      @Override public void process(      T object,      ResultSet resultSet) throws SQLException {
        try {
          method.invoke(object,resultSet.getDouble(name));
        }
 catch (        IllegalAccessException|InvocationTargetException error) {
          Log.warning(error);
        }
      }
    }
);
  }
 else   if (parameterType.equals(String.class)) {
    processors.add(new ResultSetProcessor<T>(){
      @Override public void process(      T object,      ResultSet resultSet) throws SQLException {
        try {
          method.invoke(object,resultSet.getString(name));
        }
 catch (        IllegalAccessException|InvocationTargetException error) {
          Log.warning(error);
        }
      }
    }
);
  }
 else   if (parameterType.equals(Date.class)) {
    processors.add(new ResultSetProcessor<T>(){
      @Override public void process(      T object,      ResultSet resultSet) throws SQLException {
        try {
          Timestamp timestamp=resultSet.getTimestamp(name);
          if (timestamp != null) {
            method.invoke(object,new Date(timestamp.getTime()));
          }
        }
 catch (        IllegalAccessException|InvocationTargetException error) {
          Log.warning(error);
        }
      }
    }
);
  }
 else   if (parameterType.equals(byte[].class)) {
    processors.add(new ResultSetProcessor<T>(){
      @Override public void process(      T object,      ResultSet resultSet) throws SQLException {
        try {
          method.invoke(object,resultSet.getBytes(name));
        }
 catch (        IllegalAccessException|InvocationTargetException error) {
          Log.warning(error);
        }
      }
    }
);
  }
 else {
    processors.add(new ResultSetProcessor<T>(){
      @Override public void process(      T object,      ResultSet resultSet) throws SQLException {
        String value=resultSet.getString(name);
        if (value != null) {
          try {
            method.invoke(object,Context.getObjectMapper().readValue(value,parameterType));
          }
 catch (          InvocationTargetException|IllegalAccessException|IOException error) {
            Log.warning(error);
          }
        }
      }
    }
);
  }
}",0.9985007496251874
156008,"private double convertCoordinate(long value){
  boolean negative=value < 0;
  value=Math.abs(value);
  double minutes=(value % 100000) * 0.001;
  double degrees=value / 100000 + minutes / 60;
  return negative ? -degrees : degrees;
}","private double convertCoordinate(long value){
  boolean negative=value < 0;
  value=Math.abs(value);
  double minutes=(value % 100000) * 0.001;
  value/=100000;
  double degrees=value + minutes / 60;
  return negative ? -degrees : degrees;
}",0.890295358649789
156009,"public boolean hasKey(String key){
  return properties.containsKey(key) || (defaultProperties != null && defaultProperties.containsKey(key));
}","public boolean hasKey(String key){
  return properties.containsKey(key) || defaultProperties != null && defaultProperties.containsKey(key);
}",0.9929577464788732
156010,"@Override public void filter(ContainerRequestContext requestContext){
  if (requestContext.getMethod().equals(""String_Node_Str"")) {
    return;
  }
  SecurityContext securityContext=null;
  String authHeader=requestContext.getHeaderString(AUTHORIZATION_HEADER);
  if (authHeader != null) {
    try {
      String[] auth=decodeBasicAuth(authHeader);
      User user=Context.getPermissionsManager().login(auth[0],auth[1]);
      if (user != null) {
        Context.getStatisticsManager().registerRequest(user.getId());
        securityContext=new UserSecurityContext(new UserPrincipal(user.getId()));
      }
    }
 catch (    SQLException e) {
      throw new WebApplicationException(e);
    }
  }
 else   if (request.getSession() != null) {
    Long userId=(Long)request.getSession().getAttribute(SessionResource.USER_ID_KEY);
    if (userId != null) {
      Context.getPermissionsManager().checkUser(userId);
      Context.getStatisticsManager().registerRequest(userId);
      securityContext=new UserSecurityContext(new UserPrincipal(userId));
    }
  }
  if (securityContext != null) {
    requestContext.setSecurityContext(securityContext);
  }
 else {
    Method method=resourceInfo.getResourceMethod();
    if (!method.isAnnotationPresent(PermitAll.class)) {
      throw new WebApplicationException(Response.status(Response.Status.UNAUTHORIZED).header(WWW_AUTHENTICATE,BASIC_REALM).build());
    }
  }
}","@Override public void filter(ContainerRequestContext requestContext){
  if (requestContext.getMethod().equals(""String_Node_Str"")) {
    return;
  }
  SecurityContext securityContext=null;
  try {
    String authHeader=requestContext.getHeaderString(AUTHORIZATION_HEADER);
    if (authHeader != null) {
      try {
        String[] auth=decodeBasicAuth(authHeader);
        User user=Context.getPermissionsManager().login(auth[0],auth[1]);
        if (user != null) {
          Context.getStatisticsManager().registerRequest(user.getId());
          securityContext=new UserSecurityContext(new UserPrincipal(user.getId()));
        }
      }
 catch (      SQLException e) {
        throw new WebApplicationException(e);
      }
    }
 else     if (request.getSession() != null) {
      Long userId=(Long)request.getSession().getAttribute(SessionResource.USER_ID_KEY);
      if (userId != null) {
        Context.getPermissionsManager().checkUser(userId);
        Context.getStatisticsManager().registerRequest(userId);
        securityContext=new UserSecurityContext(new UserPrincipal(userId));
      }
    }
  }
 catch (  SecurityException e) {
    Log.warning(e);
  }
  if (securityContext != null) {
    requestContext.setSecurityContext(securityContext);
  }
 else {
    Method method=resourceInfo.getResourceMethod();
    if (!method.isAnnotationPresent(PermitAll.class)) {
      throw new WebApplicationException(Response.status(Response.Status.UNAUTHORIZED).header(WWW_AUTHENTICATE,BASIC_REALM).build());
    }
  }
}",0.9614466052541796
156011,"@Override protected Object decode(Channel channel,SocketAddress remoteAddress,Object msg) throws Exception {
  ChannelBuffer buf=(ChannelBuffer)msg;
  if (channel != null) {
    channel.write(ChannelBuffers.wrappedBuffer(new byte[]{0x06}),remoteAddress);
  }
  buf.readUnsignedByte();
  buf.readUnsignedShort();
  String imei=String.format(""String_Node_Str"",buf.readUnsignedInt()) + String.format(""String_Node_Str"",buf.readUnsignedMedium());
  DeviceSession deviceSession=getDeviceSession(channel,remoteAddress,imei);
  if (deviceSession == null) {
    return null;
  }
  List<Position> positions=new LinkedList<>();
  while (buf.readableBytes() > 2) {
    Position position=new Position();
    position.setProtocol(getProtocolName());
    position.setDeviceId(deviceSession.getDeviceId());
    buf.readUnsignedByte();
    position.setValid(true);
    position.setLatitude(buf.readInt() * 0.000001);
    position.setLongitude(buf.readInt() * 0.000001);
    DateBuilder dateBuilder=new DateBuilder().setDate(1980,1,6).addMillis(buf.readUnsignedInt() * 1000L);
    position.setTime(dateBuilder.getDate());
    position.setSpeed(UnitsConverter.knotsFromKph(buf.readUnsignedByte() * 2));
    position.setCourse(buf.readUnsignedByte() * 2);
    int reason=buf.readUnsignedMedium();
    position.set(Position.KEY_EVENT,reason);
    position.set(Position.KEY_STATUS,buf.readUnsignedShort());
    position.set(Position.PREFIX_IO + 1,buf.readUnsignedByte());
    position.set(Position.PREFIX_ADC + 1,buf.readUnsignedByte());
    position.set(Position.KEY_BATTERY,buf.readUnsignedByte());
    position.set(Position.KEY_POWER,buf.readUnsignedByte());
    buf.readUnsignedByte();
    buf.skipBytes(6);
    buf.readUnsignedShort();
    buf.readUnsignedShort();
    position.setAltitude(buf.readUnsignedByte() * 20);
    int quality=buf.readUnsignedByte();
    position.set(Position.KEY_SATELLITES,quality & 0xf);
    position.set(Position.KEY_GSM,quality >> 4);
    buf.readUnsignedByte();
    if (BitUtil.check(reason,6) || BitUtil.check(reason,7)) {
      position.set(Position.KEY_RFID,buf.readBytes(7).toString(StandardCharsets.US_ASCII));
      position.set(Position.KEY_ODOMETER,buf.readUnsignedMedium() * 1000);
      buf.readUnsignedShort();
    }
    positions.add(position);
  }
  return positions;
}","@Override protected Object decode(Channel channel,SocketAddress remoteAddress,Object msg) throws Exception {
  ChannelBuffer buf=(ChannelBuffer)msg;
  if (channel != null) {
    channel.write(ChannelBuffers.wrappedBuffer(new byte[]{0x06}),remoteAddress);
  }
  buf.readUnsignedByte();
  buf.readUnsignedShort();
  String imei=String.format(""String_Node_Str"",buf.readUnsignedInt()) + String.format(""String_Node_Str"",buf.readUnsignedMedium());
  DeviceSession deviceSession=getDeviceSession(channel,remoteAddress,imei);
  if (deviceSession == null) {
    return null;
  }
  List<Position> positions=new LinkedList<>();
  while (buf.readableBytes() > 2) {
    Position position=new Position();
    position.setProtocol(getProtocolName());
    position.setDeviceId(deviceSession.getDeviceId());
    buf.readUnsignedByte();
    position.setValid(true);
    position.setLatitude(buf.readInt() * 0.000001);
    position.setLongitude(buf.readInt() * 0.000001);
    DateBuilder dateBuilder=new DateBuilder().setDate(1980,1,6).addMillis(buf.readUnsignedInt() * 1000L);
    position.setTime(dateBuilder.getDate());
    position.setSpeed(UnitsConverter.knotsFromKph(buf.readUnsignedByte() * 2));
    position.setCourse(buf.readUnsignedByte() * 2);
    int reason=buf.readUnsignedMedium();
    position.set(Position.KEY_EVENT,reason);
    int status=buf.readUnsignedShort();
    position.set(Position.KEY_STATUS,status);
    position.set(Position.PREFIX_IO + 1,buf.readUnsignedByte());
    position.set(Position.PREFIX_ADC + 1,buf.readUnsignedByte());
    position.set(Position.KEY_BATTERY,buf.readUnsignedByte());
    position.set(Position.KEY_POWER,buf.readUnsignedByte());
    buf.readUnsignedByte();
    buf.skipBytes(6);
    buf.readUnsignedShort();
    buf.readUnsignedShort();
    position.setAltitude(buf.readUnsignedByte() * 20);
    int quality=buf.readUnsignedByte();
    position.set(Position.KEY_SATELLITES,quality & 0xf);
    position.set(Position.KEY_GSM,quality >> 4);
    buf.readUnsignedByte();
    if (BitUtil.check(status,8)) {
      position.set(Position.KEY_RFID,buf.readBytes(7).toString(StandardCharsets.US_ASCII));
      position.set(Position.KEY_ODOMETER,buf.readUnsignedMedium() * 1000);
      buf.readUnsignedShort();
    }
    if (BitUtil.check(status,6)) {
      Log.warning(""String_Node_Str"");
      return position;
    }
    positions.add(position);
  }
  return positions;
}",0.9364876385336744
156012,"@Test public void testDecode() throws Exception {
  AstraProtocolDecoder decoder=new AstraProtocolDecoder(new AstraProtocol());
  verifyPositions(decoder,binary(""String_Node_Str""));
  verifyPositions(decoder,binary(""String_Node_Str""));
}","@Test public void testDecode() throws Exception {
  AstraProtocolDecoder decoder=new AstraProtocolDecoder(new AstraProtocol());
  verifyPositions(decoder,binary(""String_Node_Str""));
  verifyPositions(decoder,binary(""String_Node_Str""));
  verifyPositions(decoder,binary(""String_Node_Str""));
}",0.8977272727272727
156013,"private void decodeLocation(Position position,String data){
  Parser parser=new Parser(PATTERN_LOCATION,data);
  if (parser.matches()) {
    DateBuilder dateBuilder=new DateBuilder().setTime(parser.nextInt(),parser.nextInt(),parser.nextInt());
    position.setValid(true);
    position.setLatitude(parser.nextCoordinate(Parser.CoordinateFormat.DEG_MIN_MIN));
    position.setLongitude(parser.nextCoordinate(Parser.CoordinateFormat.DEG_MIN_MIN));
    int flags=parser.nextInt();
    position.setValid(BitUtil.check(flags,0));
    if (!BitUtil.check(flags,1)) {
      position.setLatitude(-position.getLatitude());
    }
    if (!BitUtil.check(flags,2)) {
      position.setLatitude(-position.getLatitude());
    }
    position.setSpeed(parser.nextInt() * 2);
    position.setCourse(parser.nextInt() * 10);
    dateBuilder.setDateReverse(parser.nextInt(),parser.nextInt(),parser.nextInt());
    position.setTime(dateBuilder.getDate());
  }
}","private void decodeLocation(Position position,String data){
  Parser parser=new Parser(PATTERN_LOCATION,data);
  if (parser.matches()) {
    DateBuilder dateBuilder=new DateBuilder().setTime(parser.nextInt(),parser.nextInt(),parser.nextInt());
    position.setValid(true);
    position.setLatitude(parser.nextCoordinate(Parser.CoordinateFormat.DEG_MIN_MIN));
    position.setLongitude(parser.nextCoordinate(Parser.CoordinateFormat.DEG_MIN_MIN));
    int flags=parser.nextInt();
    position.setValid(BitUtil.check(flags,0));
    if (!BitUtil.check(flags,1)) {
      position.setLatitude(-position.getLatitude());
    }
    if (!BitUtil.check(flags,2)) {
      position.setLongitude(-position.getLongitude());
    }
    position.setSpeed(parser.nextInt() * 2);
    position.setCourse(parser.nextInt() * 10);
    dateBuilder.setDateReverse(parser.nextInt(),parser.nextInt(),parser.nextInt());
    position.setTime(dateBuilder.getDate());
  }
}",0.9946808510638298
156014,"@Test public void testDecode() throws Exception {
  UproProtocolDecoder decoder=new UproProtocolDecoder(new UproProtocol());
  verifyNothing(decoder,text(""String_Node_Str""));
  verifyPosition(decoder,text(""String_Node_Str""));
  verifyPosition(decoder,text(""String_Node_Str""));
  verifyPosition(decoder,text(""String_Node_Str""));
  verifyPosition(decoder,text(""String_Node_Str""));
  verifyPosition(decoder,text(""String_Node_Str""));
  verifyPosition(decoder,text(""String_Node_Str""));
  verifyPosition(decoder,text(""String_Node_Str""));
  verifyPosition(decoder,text(""String_Node_Str""));
}","@Test public void testDecode() throws Exception {
  UproProtocolDecoder decoder=new UproProtocolDecoder(new UproProtocol());
  verifyPosition(decoder,text(""String_Node_Str""),position(""String_Node_Str"",true,-33.58934,-70.61626));
  verifyNothing(decoder,text(""String_Node_Str""));
  verifyPosition(decoder,text(""String_Node_Str""));
  verifyPosition(decoder,text(""String_Node_Str""));
  verifyPosition(decoder,text(""String_Node_Str""));
  verifyPosition(decoder,text(""String_Node_Str""),position(""String_Node_Str"",false,49.22016,18.74855));
  verifyPosition(decoder,text(""String_Node_Str""));
  verifyPosition(decoder,text(""String_Node_Str""));
  verifyPosition(decoder,text(""String_Node_Str""));
  verifyPosition(decoder,text(""String_Node_Str""));
}",0.8821752265861027
156015,"@Test public void testDecode() throws Exception {
  UproProtocolDecoder decoder=new UproProtocolDecoder(new UproProtocol());
  verifyNothing(decoder,text(""String_Node_Str""));
  verifyPosition(decoder,text(""String_Node_Str""));
  verifyPosition(decoder,text(""String_Node_Str""));
  verifyPosition(decoder,text(""String_Node_Str""));
  verifyPosition(decoder,text(""String_Node_Str""));
  verifyPosition(decoder,text(""String_Node_Str""));
}","@Test public void testDecode() throws Exception {
  UproProtocolDecoder decoder=new UproProtocolDecoder(new UproProtocol());
  verifyPosition(decoder,text(""String_Node_Str""));
  verifyPosition(decoder,text(""String_Node_Str""));
  verifyPosition(decoder,text(""String_Node_Str""));
  verifyPosition(decoder,text(""String_Node_Str""));
  verifyPosition(decoder,text(""String_Node_Str""));
  verifyPosition(decoder,text(""String_Node_Str""));
}",0.9826187717265352
156016,"public FilterHandler(){
  Config config=Context.getConfig();
  filterInvalid=config.getBoolean(""String_Node_Str"");
  filterZero=config.getBoolean(""String_Node_Str"");
  filterDuplicate=config.getBoolean(""String_Node_Str"");
  filterFuture=config.getBoolean(""String_Node_Str"");
  filterApproximate=config.getBoolean(""String_Node_Str"");
  filterStatic=config.getBoolean(""String_Node_Str"");
  filterDistance=config.getInteger(""String_Node_Str"");
  filterLimit=config.getLong(""String_Node_Str"") * 1000;
}","public FilterHandler(){
  Config config=Context.getConfig();
  if (config != null) {
    filterInvalid=config.getBoolean(""String_Node_Str"");
    filterZero=config.getBoolean(""String_Node_Str"");
    filterDuplicate=config.getBoolean(""String_Node_Str"");
    filterFuture=config.getBoolean(""String_Node_Str"");
    filterApproximate=config.getBoolean(""String_Node_Str"");
    filterStatic=config.getBoolean(""String_Node_Str"");
    filterDistance=config.getInteger(""String_Node_Str"");
    filterLimit=config.getLong(""String_Node_Str"") * 1000;
  }
}",0.9576923076923076
156017,"@Before public void setUp(){
  filtingHandler=new FilterHandler(true,true,true,true,true,10,10);
  passingHandler=new FilterHandler(false,false,false,false,false,0,0);
}","@Before public void setUp(){
  passingHandler=new FilterHandler();
  filtingHandler=new FilterHandler();
  filtingHandler.setFilterInvalid(true);
  filtingHandler.setFilterZero(true);
  filtingHandler.setFilterDuplicate(true);
  filtingHandler.setFilterFuture(true);
  filtingHandler.setFilterApproximate(true);
  filtingHandler.setFilterStatic(true);
  filtingHandler.setFilterDistance(10);
  filtingHandler.setFilterLimit(10);
}",0.2270450751252087
156018,"private void decodeJ1708(Position position,ChannelBuffer buf,short length){
  int end=buf.readerIndex() + length;
  while (buf.readerIndex() < end) {
    int mark=buf.readUnsignedByte();
    int len=BitUtil.between(mark,0,6);
    int type=BitUtil.between(mark,6,8);
    int id=buf.readUnsignedByte();
    if (type == 3) {
      id+=256;
    }
    String value=ChannelBuffers.hexDump(buf.readBytes(len - 1));
    if (type == 2 || type == 3) {
      position.set(""String_Node_Str"" + id,value);
    }
  }
}","private void decodeJ1708(Position position,ChannelBuffer buf,int length){
  int end=buf.readerIndex() + length;
  while (buf.readerIndex() < end) {
    int mark=buf.readUnsignedByte();
    int len=BitUtil.between(mark,0,6);
    int type=BitUtil.between(mark,6,8);
    int id=buf.readUnsignedByte();
    if (type == 3) {
      id+=256;
    }
    String value=ChannelBuffers.hexDump(buf.readBytes(len - 1));
    if (type == 2 || type == 3) {
      position.set(""String_Node_Str"" + id,value);
    }
  }
}",0.99402390438247
156019,"private void decodeObd(Position position,ChannelBuffer buf,short length){
  int end=buf.readerIndex() + length;
  while (buf.readerIndex() < end) {
    int parameterLength=buf.getUnsignedByte(buf.readerIndex()) >> 4;
    int mode=buf.readUnsignedByte() & 0x0F;
    position.add(ObdDecoder.decode(mode,ChannelBuffers.hexDump(buf.readBytes(parameterLength - 1))));
  }
}","private void decodeObd(Position position,ChannelBuffer buf,int length){
  int end=buf.readerIndex() + length;
  while (buf.readerIndex() < end) {
    int parameterLength=buf.getUnsignedByte(buf.readerIndex()) >> 4;
    int mode=buf.readUnsignedByte() & 0x0F;
    position.add(ObdDecoder.decode(mode,ChannelBuffers.hexDump(buf.readBytes(parameterLength - 1))));
  }
}",0.9918256130790192
156020,"@Override protected Object decode(Channel channel,SocketAddress remoteAddress,Object msg) throws Exception {
  ChannelBuffer buf=(ChannelBuffer)msg;
  if (buf.readUnsignedByte() != 0xF8) {
    return null;
  }
  buf.readUnsignedByte();
  buf.readUnsignedByte();
  Position position=new Position();
  position.setProtocol(getProtocolName());
  String imei=ChannelBuffers.hexDump(buf.readBytes(8)).substring(1);
  DeviceSession deviceSession=getDeviceSession(channel,remoteAddress,imei);
  if (deviceSession == null) {
    return null;
  }
  position.setDeviceId(deviceSession.getDeviceId());
  long seconds=buf.readUnsignedInt() & 0x7fffffffL;
  seconds+=946684800L;
  seconds-=timeZone;
  Date time=new Date(seconds * 1000);
  boolean hasLocation=false;
  while (buf.readableBytes() > 3) {
    short type=buf.readUnsignedByte();
    short length=buf.readUnsignedByte();
switch (type) {
case DATA_GPS:
      hasLocation=true;
    position.setValid(true);
  position.setLatitude(buf.readInt() / 1000000.0);
position.setLongitude(buf.readInt() / 1000000.0);
position.setSpeed(UnitsConverter.knotsFromKph(buf.readUnsignedShort()));
position.setCourse(buf.readUnsignedShort());
position.set(Position.KEY_HDOP,buf.readUnsignedShort());
break;
case DATA_LBS:
position.set(Position.KEY_MCC,buf.readUnsignedShort());
position.set(Position.KEY_MNC,buf.readUnsignedShort());
position.set(Position.KEY_LAC,buf.readUnsignedShort());
if (length == 11) {
position.set(Position.KEY_CID,buf.readUnsignedInt());
}
 else {
position.set(Position.KEY_CID,buf.readUnsignedShort());
}
position.set(Position.KEY_GSM,-buf.readUnsignedByte());
if (length > 9 && length != 11) {
buf.skipBytes(length - 9);
}
break;
case DATA_STATUS:
int status=buf.readUnsignedShort();
position.set(Position.KEY_IGNITION,BitUtil.check(status,9));
position.set(Position.KEY_STATUS,status);
position.set(Position.KEY_ALARM,decodeAlarm(buf.readUnsignedShort()));
break;
case DATA_ODOMETER:
position.set(Position.KEY_ODOMETER,buf.readUnsignedInt());
break;
case DATA_ADC:
for (int i=0; i < length / 2; i++) {
int value=buf.readUnsignedShort();
position.set(Position.PREFIX_ADC + BitUtil.from(value,12),BitUtil.to(value,12));
}
break;
case DATA_GEOFENCE:
position.set(""String_Node_Str"",buf.readUnsignedInt());
position.set(""String_Node_Str"",buf.readUnsignedInt());
break;
case DATA_OBD2:
decodeObd(position,buf,length);
break;
case DATA_FUEL:
position.set(""String_Node_Str"",buf.readUnsignedInt() / 10000.0);
break;
case DATA_OBD2_ALARM:
decodeObd(position,buf,length);
break;
case DATA_HARSH_DRIVER:
decodeDriverBehavior(position,buf);
break;
case DATA_CANBUS:
position.set(""String_Node_Str"",ChannelBuffers.hexDump(buf.readBytes(length)));
break;
case DATA_J1708:
decodeJ1708(position,buf,length);
break;
case DATA_VIN:
position.set(Position.KEY_VIN,buf.readBytes(length).toString(StandardCharsets.US_ASCII));
break;
case DATA_RFID:
position.set(Position.KEY_RFID,buf.readBytes(length - 1).toString(StandardCharsets.US_ASCII));
position.set(""String_Node_Str"",buf.readUnsignedByte() != 0);
break;
case DATA_EVENT:
position.set(Position.KEY_EVENT,buf.readUnsignedByte());
if (length > 1) {
position.set(""String_Node_Str"",buf.readUnsignedInt());
}
break;
default :
buf.skipBytes(length);
break;
}
}
if (!hasLocation) {
getLastLocation(position,time);
}
 else {
position.setTime(time);
}
return position;
}","@Override protected Object decode(Channel channel,SocketAddress remoteAddress,Object msg) throws Exception {
  ChannelBuffer buf=(ChannelBuffer)msg;
  if (buf.readUnsignedByte() != 0xF8) {
    return null;
  }
  buf.readUnsignedByte();
  buf.readUnsignedByte();
  Position position=new Position();
  position.setProtocol(getProtocolName());
  String imei=ChannelBuffers.hexDump(buf.readBytes(8)).substring(1);
  DeviceSession deviceSession=getDeviceSession(channel,remoteAddress,imei);
  if (deviceSession == null) {
    return null;
  }
  position.setDeviceId(deviceSession.getDeviceId());
  long seconds=buf.readUnsignedInt() & 0x7fffffffL;
  seconds+=946684800L;
  seconds-=timeZone;
  Date time=new Date(seconds * 1000);
  boolean hasLocation=false;
  while (buf.readableBytes() > 3) {
    int type=buf.readUnsignedByte();
    int length=type == DATA_CANBUS ? buf.readUnsignedShort() : buf.readUnsignedByte();
switch (type) {
case DATA_GPS:
      hasLocation=true;
    position.setValid(true);
  position.setLatitude(buf.readInt() / 1000000.0);
position.setLongitude(buf.readInt() / 1000000.0);
position.setSpeed(UnitsConverter.knotsFromKph(buf.readUnsignedShort()));
position.setCourse(buf.readUnsignedShort());
position.set(Position.KEY_HDOP,buf.readUnsignedShort());
break;
case DATA_LBS:
position.set(Position.KEY_MCC,buf.readUnsignedShort());
position.set(Position.KEY_MNC,buf.readUnsignedShort());
position.set(Position.KEY_LAC,buf.readUnsignedShort());
if (length == 11) {
position.set(Position.KEY_CID,buf.readUnsignedInt());
}
 else {
position.set(Position.KEY_CID,buf.readUnsignedShort());
}
position.set(Position.KEY_GSM,-buf.readUnsignedByte());
if (length > 9 && length != 11) {
buf.skipBytes(length - 9);
}
break;
case DATA_STATUS:
int status=buf.readUnsignedShort();
position.set(Position.KEY_IGNITION,BitUtil.check(status,9));
position.set(Position.KEY_STATUS,status);
position.set(Position.KEY_ALARM,decodeAlarm(buf.readUnsignedShort()));
break;
case DATA_ODOMETER:
position.set(Position.KEY_ODOMETER,buf.readUnsignedInt());
break;
case DATA_ADC:
for (int i=0; i < length / 2; i++) {
int value=buf.readUnsignedShort();
position.set(Position.PREFIX_ADC + BitUtil.from(value,12),BitUtil.to(value,12));
}
break;
case DATA_GEOFENCE:
position.set(""String_Node_Str"",buf.readUnsignedInt());
position.set(""String_Node_Str"",buf.readUnsignedInt());
break;
case DATA_OBD2:
decodeObd(position,buf,length);
break;
case DATA_FUEL:
position.set(""String_Node_Str"",buf.readUnsignedInt() / 10000.0);
break;
case DATA_OBD2_ALARM:
decodeObd(position,buf,length);
break;
case DATA_HARSH_DRIVER:
decodeDriverBehavior(position,buf);
break;
case DATA_CANBUS:
position.set(""String_Node_Str"",ChannelBuffers.hexDump(buf.readBytes(length)));
break;
case DATA_J1708:
decodeJ1708(position,buf,length);
break;
case DATA_VIN:
position.set(Position.KEY_VIN,buf.readBytes(length).toString(StandardCharsets.US_ASCII));
break;
case DATA_RFID:
position.set(Position.KEY_RFID,buf.readBytes(length - 1).toString(StandardCharsets.US_ASCII));
position.set(""String_Node_Str"",buf.readUnsignedByte() != 0);
break;
case DATA_EVENT:
position.set(Position.KEY_EVENT,buf.readUnsignedByte());
if (length > 1) {
position.set(""String_Node_Str"",buf.readUnsignedInt());
}
break;
default :
buf.skipBytes(length);
break;
}
}
if (!hasLocation) {
getLastLocation(position,time);
}
 else {
position.setTime(time);
}
return position;
}",0.9911111111111112
156021,"@Test public void testDecode() throws Exception {
  UlbotechProtocolDecoder decoder=new UlbotechProtocolDecoder(new UlbotechProtocol());
  verifyPosition(decoder,binary(""String_Node_Str""));
  verifyNotNull(decoder,binary(""String_Node_Str""));
  verifyNotNull(decoder,binary(""String_Node_Str""));
  verifyAttributes(decoder,binary(""String_Node_Str""));
  verifyAttributes(decoder,binary(""String_Node_Str""));
  verifyPosition(decoder,binary(""String_Node_Str""));
  verifyPosition(decoder,binary(""String_Node_Str""));
  verifyPosition(decoder,binary(""String_Node_Str""));
  verifyNothing(decoder,binary(""String_Node_Str""));
  verifyPosition(decoder,binary(""String_Node_Str""));
  verifyPosition(decoder,binary(""String_Node_Str""));
  verifyPosition(decoder,binary(""String_Node_Str""));
  verifyPosition(decoder,binary(""String_Node_Str""));
  verifyPosition(decoder,binary(""String_Node_Str""));
  verifyPosition(decoder,binary(""String_Node_Str""));
  verifyPosition(decoder,binary(""String_Node_Str""));
  verifyPosition(decoder,binary(""String_Node_Str""));
  verifyNotNull(decoder,binary(""String_Node_Str""));
  verifyNotNull(decoder,binary(""String_Node_Str""));
  verifyPosition(decoder,binary(""String_Node_Str""));
  verifyPosition(decoder,binary(""String_Node_Str""));
  verifyPosition(decoder,binary(""String_Node_Str""));
}","@Test public void testDecode() throws Exception {
  UlbotechProtocolDecoder decoder=new UlbotechProtocolDecoder(new UlbotechProtocol());
  verifyPosition(decoder,binary(""String_Node_Str""));
  verifyPosition(decoder,binary(""String_Node_Str""));
  verifyNotNull(decoder,binary(""String_Node_Str""));
  verifyNotNull(decoder,binary(""String_Node_Str""));
  verifyAttributes(decoder,binary(""String_Node_Str""));
  verifyAttributes(decoder,binary(""String_Node_Str""));
  verifyPosition(decoder,binary(""String_Node_Str""));
  verifyPosition(decoder,binary(""String_Node_Str""));
  verifyPosition(decoder,binary(""String_Node_Str""));
  verifyNothing(decoder,binary(""String_Node_Str""));
  verifyPosition(decoder,binary(""String_Node_Str""));
  verifyPosition(decoder,binary(""String_Node_Str""));
  verifyPosition(decoder,binary(""String_Node_Str""));
  verifyPosition(decoder,binary(""String_Node_Str""));
  verifyPosition(decoder,binary(""String_Node_Str""));
  verifyPosition(decoder,binary(""String_Node_Str""));
  verifyPosition(decoder,binary(""String_Node_Str""));
  verifyPosition(decoder,binary(""String_Node_Str""));
  verifyNotNull(decoder,binary(""String_Node_Str""));
  verifyNotNull(decoder,binary(""String_Node_Str""));
  verifyPosition(decoder,binary(""String_Node_Str""));
  verifyPosition(decoder,binary(""String_Node_Str""));
  verifyPosition(decoder,binary(""String_Node_Str""));
}",0.9800676946220384
156022,"public static void sendMailSync(long userId,Event event,Position position){
  Properties mailServerProperties;
  Session mailSession;
  MimeMessage mailMessage;
  try {
    User user=Context.getPermissionsManager().getUser(userId);
    mailServerProperties=getConfigProperies();
    if (!mailServerProperties.containsKey(""String_Node_Str"")) {
      mailServerProperties=getAttributesProperties(user);
      if (!mailServerProperties.containsKey(""String_Node_Str"")) {
        return;
      }
    }
    mailSession=Session.getInstance(mailServerProperties,null);
    mailMessage=new MimeMessage(mailSession);
    if (mailServerProperties.getProperty(""String_Node_Str"") != null) {
      mailMessage.setFrom(new InternetAddress(mailServerProperties.getProperty(""String_Node_Str"")));
    }
    mailMessage.addRecipient(Message.RecipientType.TO,new InternetAddress(user.getEmail()));
    mailMessage.setSubject(NotificationFormatter.formatTitle(userId,event,position));
    mailMessage.setText(NotificationFormatter.formatMessage(userId,event,position));
    Transport transport=mailSession.getTransport(""String_Node_Str"");
    transport.connect(mailServerProperties.getProperty(""String_Node_Str""),mailServerProperties.getProperty(""String_Node_Str""),mailServerProperties.getProperty(""String_Node_Str""));
    transport.sendMessage(mailMessage,mailMessage.getAllRecipients());
    transport.close();
  }
 catch (  MessagingException error) {
    Log.warning(error);
  }
}","public static void sendMailSync(long userId,Event event,Position position){
  Properties mailServerProperties;
  Session mailSession;
  MimeMessage mailMessage;
  try {
    User user=Context.getPermissionsManager().getUser(userId);
    mailServerProperties=getConfigProperies();
    if (!mailServerProperties.containsKey(""String_Node_Str"")) {
      mailServerProperties=getAttributesProperties(user);
      if (!mailServerProperties.containsKey(""String_Node_Str"")) {
        return;
      }
    }
    mailSession=Session.getDefaultInstance(mailServerProperties);
    mailMessage=new MimeMessage(mailSession);
    if (mailServerProperties.getProperty(""String_Node_Str"") != null) {
      mailMessage.setFrom(new InternetAddress(mailServerProperties.getProperty(""String_Node_Str"")));
    }
    mailMessage.addRecipient(Message.RecipientType.TO,new InternetAddress(user.getEmail()));
    mailMessage.setSubject(NotificationFormatter.formatTitle(userId,event,position));
    mailMessage.setText(NotificationFormatter.formatMessage(userId,event,position));
    Transport transport=mailSession.getTransport(""String_Node_Str"");
    transport.connect(mailServerProperties.getProperty(""String_Node_Str""),mailServerProperties.getProperty(""String_Node_Str""),mailServerProperties.getProperty(""String_Node_Str""));
    transport.sendMessage(mailMessage,mailMessage.getAllRecipients());
    transport.close();
  }
 catch (  MessagingException error) {
    Log.warning(error);
  }
}",0.9959016393442623
156023,"public static int xor(String string){
  byte[] bytes=string.getBytes(StandardCharsets.US_ASCII);
  byte sum=0;
  for (  byte b : bytes) {
    sum^=b;
  }
  return sum;
}","public static int xor(String string){
  byte checksum=0;
  for (  byte b : string.getBytes(StandardCharsets.US_ASCII)) {
    checksum^=b;
  }
  return checksum;
}",0.7613293051359517
156024,"private Position decodeU01(String sentence,Channel channel,SocketAddress remoteAddress){
  Parser parser=new Parser(PATTERN_U01,sentence);
  if (!parser.matches()) {
    return null;
  }
  DeviceSession deviceSession=getDeviceSession(channel,remoteAddress,parser.next());
  if (deviceSession == null) {
    return null;
  }
  String messageType=parser.next();
  Position position=new Position();
  position.setProtocol(getProtocolName());
  position.setDeviceId(deviceSession.getDeviceId());
  DateBuilder dateBuilder=new DateBuilder().setDateReverse(parser.nextInt(),parser.nextInt(),parser.nextInt()).setTime(parser.nextInt(),parser.nextInt(),parser.nextInt());
  position.setTime(dateBuilder.getDate());
  position.setValid(parser.next().equals(""String_Node_Str""));
  position.setLatitude(parser.nextCoordinate(Parser.CoordinateFormat.DEG_HEM));
  position.setLongitude(parser.nextCoordinate(Parser.CoordinateFormat.DEG_HEM));
  position.setSpeed(UnitsConverter.knotsFromMph(parser.nextDouble()));
  position.setCourse(parser.nextDouble());
  position.set(Position.KEY_SATELLITES,parser.nextInt());
  position.set(Position.KEY_BATTERY,parser.next());
  position.set(Position.KEY_STATUS,parser.nextInt(2));
  position.set(Position.KEY_CID,parser.nextInt());
  position.set(Position.KEY_LAC,parser.nextInt());
  position.set(Position.KEY_GSM,parser.nextInt());
  position.set(Position.KEY_ODOMETER,parser.nextLong() * 1000);
  position.set(Position.KEY_INDEX,parser.nextInt());
switch (messageType) {
case ""String_Node_Str"":
case ""String_Node_Str"":
case ""String_Node_Str"":
    if (parser.hasNext(2)) {
      int checkSum=parser.nextInt(16);
      int calculatedCheckSum=Checksum.xor(sentence.substring(1,sentence.length() - 3));
      if (checkSum == calculatedCheckSum) {
        sendResponse(channel,""String_Node_Str"");
        return position;
      }
 else {
        return null;
      }
    }
 else {
      return position;
    }
case ""String_Node_Str"":
  sendResponse(channel,""String_Node_Str"");
return position;
default :
return null;
}
}","private Position decodeU01(String sentence,Channel channel,SocketAddress remoteAddress){
  Parser parser=new Parser(PATTERN_U01,sentence);
  if (!parser.matches()) {
    return null;
  }
  DeviceSession deviceSession=getDeviceSession(channel,remoteAddress,parser.next());
  if (deviceSession == null) {
    return null;
  }
  String type=parser.next();
  Position position=new Position();
  position.setProtocol(getProtocolName());
  position.setDeviceId(deviceSession.getDeviceId());
  DateBuilder dateBuilder=new DateBuilder().setDateReverse(parser.nextInt(),parser.nextInt(),parser.nextInt()).setTime(parser.nextInt(),parser.nextInt(),parser.nextInt());
  position.setTime(dateBuilder.getDate());
  position.setValid(parser.next().equals(""String_Node_Str""));
  position.setLatitude(parser.nextCoordinate(Parser.CoordinateFormat.DEG_HEM));
  position.setLongitude(parser.nextCoordinate(Parser.CoordinateFormat.DEG_HEM));
  position.setSpeed(UnitsConverter.knotsFromMph(parser.nextDouble()));
  position.setCourse(parser.nextDouble());
  position.set(Position.KEY_SATELLITES,parser.nextInt());
  position.set(Position.KEY_BATTERY,parser.next());
  position.set(Position.KEY_STATUS,parser.nextInt(2));
  position.set(Position.KEY_CID,parser.nextInt());
  position.set(Position.KEY_LAC,parser.nextInt());
  position.set(Position.KEY_GSM,parser.nextInt());
  position.set(Position.KEY_ODOMETER,parser.nextLong() * 1000);
  position.set(Position.KEY_INDEX,parser.nextInt());
  if (channel != null) {
    if (type.equals(""String_Node_Str"") || type.equals(""String_Node_Str"") || type.equals(""String_Node_Str"")) {
      channel.write(""String_Node_Str"");
    }
 else     if (type.equals(""String_Node_Str"")) {
      channel.write(""String_Node_Str"");
    }
  }
  return position;
}",0.7801938695310453
156025,"@Override protected Object decode(Channel channel,SocketAddress remoteAddress,Object msg) throws Exception {
  ChannelBuffer buf=(ChannelBuffer)msg;
  buf.skipBytes(2);
  buf.readUnsignedByte();
  String id=ChannelBuffers.hexDump(buf.readBytes(8));
  DeviceSession deviceSession=getDeviceSession(channel,remoteAddress,id);
  if (deviceSession == null) {
    return null;
  }
  int type=buf.readUnsignedByte();
  if (type == 0) {
    if (channel != null) {
    }
    Position position=new Position();
    position.setProtocol(getProtocolName());
    position.setDeviceId(deviceSession.getDeviceId());
    position.set(Position.KEY_STATUS,buf.readUnsignedByte());
    DateBuilder dateBuilder=new DateBuilder().setDate(2000,1,1).addSeconds(buf.readUnsignedInt());
    getLastLocation(position,dateBuilder.getDate());
    position.set(Position.KEY_INDEX,buf.readUnsignedByte());
    buf.readUnsignedShort();
    buf.readUnsignedShort();
    return position;
  }
  return null;
}","@Override protected Object decode(Channel channel,SocketAddress remoteAddress,Object msg) throws Exception {
  ChannelBuffer buf=(ChannelBuffer)msg;
  buf.skipBytes(2);
  buf.readUnsignedByte();
  String id=ChannelBuffers.hexDump(buf.readBytes(8));
  DeviceSession deviceSession=getDeviceSession(channel,remoteAddress,id);
  if (deviceSession == null) {
    return null;
  }
  int type=buf.readUnsignedByte();
  if (type == 0) {
    Position position=new Position();
    position.setProtocol(getProtocolName());
    position.setDeviceId(deviceSession.getDeviceId());
    position.set(Position.KEY_STATUS,buf.readUnsignedByte());
    DateBuilder dateBuilder=new DateBuilder().setDate(2000,1,1).addSeconds(buf.readUnsignedInt());
    getLastLocation(position,dateBuilder.getDate());
    position.set(Position.KEY_INDEX,buf.readUnsignedByte());
    buf.readUnsignedShort();
    buf.readUnsignedShort();
    return position;
  }
  return null;
}",0.9827676240208876
156026,"public void clearPositionsHistory() throws SQLException {
  int historyDays=config.getInteger(""String_Node_Str"");
  if (historyDays != 0) {
    QueryBuilder.create(dataSource,getQuery(""String_Node_Str"")).setDate(""String_Node_Str"",new Date(System.currentTimeMillis() - historyDays * 24 * 3600* 1000)).executeUpdate();
  }
}","public void clearPositionsHistory() throws SQLException {
  long historyDays=config.getInteger(""String_Node_Str"");
  if (historyDays != 0) {
    QueryBuilder.create(dataSource,getQuery(""String_Node_Str"")).setDate(""String_Node_Str"",new Date(System.currentTimeMillis() - historyDays * 24 * 3600* 1000)).executeUpdate();
  }
}",0.9891472868217054
156027,"private Position decodeNew(DeviceSession deviceSession,ChannelBuffer buf,int type,int index){
  Position position=new Position();
  position.setDeviceId(deviceSession.getDeviceId());
  position.setProtocol(getProtocolName());
  position.set(Position.KEY_INDEX,index);
  position.setTime(new Date(buf.readUnsignedInt() * 1000));
  int flags=buf.readUnsignedByte();
  if (BitUtil.check(flags,0)) {
    position.setLatitude(buf.readInt() / 1800000.0);
    position.setLongitude(buf.readInt() / 1800000.0);
    position.setAltitude(buf.readShort());
    position.setSpeed(UnitsConverter.knotsFromKph(buf.readUnsignedShort()));
    position.setCourse(buf.readUnsignedShort());
    position.set(Position.KEY_SATELLITES,buf.readUnsignedByte());
  }
  if (BitUtil.check(flags,1)) {
    position.set(Position.KEY_MCC,buf.readUnsignedShort());
    position.set(Position.KEY_MNC,buf.readUnsignedShort());
    position.set(Position.KEY_LAC,buf.readUnsignedShort());
    position.set(Position.KEY_CID,buf.readUnsignedInt());
    position.set(Position.KEY_GSM,buf.readUnsignedByte());
  }
  if (BitUtil.check(flags,2)) {
    buf.skipBytes(7);
  }
  if (BitUtil.check(flags,3)) {
    buf.skipBytes(7);
  }
  if (BitUtil.check(flags,4)) {
    buf.skipBytes(7);
  }
  if (BitUtil.check(flags,5)) {
    buf.skipBytes(7);
  }
  if (BitUtil.check(flags,6)) {
    buf.skipBytes(7);
  }
  return position;
}","private Position decodeNew(DeviceSession deviceSession,ChannelBuffer buf,int index){
  Position position=new Position();
  position.setDeviceId(deviceSession.getDeviceId());
  position.setProtocol(getProtocolName());
  position.set(Position.KEY_INDEX,index);
  position.setTime(new Date(buf.readUnsignedInt() * 1000));
  int flags=buf.readUnsignedByte();
  if (BitUtil.check(flags,0)) {
    position.setLatitude(buf.readInt() / 1800000.0);
    position.setLongitude(buf.readInt() / 1800000.0);
    position.setAltitude(buf.readShort());
    position.setSpeed(UnitsConverter.knotsFromKph(buf.readUnsignedShort()));
    position.setCourse(buf.readUnsignedShort());
    position.set(Position.KEY_SATELLITES,buf.readUnsignedByte());
  }
  if (BitUtil.check(flags,1)) {
    position.set(Position.KEY_MCC,buf.readUnsignedShort());
    position.set(Position.KEY_MNC,buf.readUnsignedShort());
    position.set(Position.KEY_LAC,buf.readUnsignedShort());
    position.set(Position.KEY_CID,buf.readUnsignedInt());
    position.set(Position.KEY_GSM,buf.readUnsignedByte());
  }
  if (BitUtil.check(flags,2)) {
    buf.skipBytes(7);
  }
  if (BitUtil.check(flags,3)) {
    buf.skipBytes(7);
  }
  if (BitUtil.check(flags,4)) {
    buf.skipBytes(7);
  }
  if (BitUtil.check(flags,5)) {
    buf.skipBytes(7);
  }
  if (BitUtil.check(flags,6)) {
    buf.skipBytes(7);
  }
  return position;
}",0.9967403114813472
156028,"@Override protected Object decode(Channel channel,SocketAddress remoteAddress,Object msg) throws Exception {
  ChannelBuffer buf=(ChannelBuffer)msg;
  buf.skipBytes(2);
  int type=buf.readUnsignedByte();
  buf.readShort();
  int index=buf.readUnsignedShort();
  if (type != MSG_GPS && type != MSG_DATA) {
    sendResponse(channel,type,index);
  }
  if (type == MSG_LOGIN) {
    getDeviceSession(channel,remoteAddress,ChannelBuffers.hexDump(buf.readBytes(8)).substring(1));
  }
 else {
    DeviceSession deviceSession=getDeviceSession(channel,remoteAddress);
    if (deviceSession == null) {
      return null;
    }
    if (type == MSG_GPS || type == MSG_ALARM || type == MSG_STATE || type == MSG_SMS) {
      return decodeOld(deviceSession,buf,type,index);
    }
 else     if (type >= MSG_NORMAL && type <= MSG_OBD_CODE) {
      return decodeNew(deviceSession,buf,type,index);
    }
  }
  return null;
}","@Override protected Object decode(Channel channel,SocketAddress remoteAddress,Object msg) throws Exception {
  ChannelBuffer buf=(ChannelBuffer)msg;
  buf.skipBytes(2);
  int type=buf.readUnsignedByte();
  buf.readShort();
  int index=buf.readUnsignedShort();
  if (type != MSG_GPS && type != MSG_DATA) {
    sendResponse(channel,type,index);
  }
  if (type == MSG_LOGIN) {
    getDeviceSession(channel,remoteAddress,ChannelBuffers.hexDump(buf.readBytes(8)).substring(1));
  }
 else {
    DeviceSession deviceSession=getDeviceSession(channel,remoteAddress);
    if (deviceSession == null) {
      return null;
    }
    if (type == MSG_GPS || type == MSG_ALARM || type == MSG_STATE || type == MSG_SMS) {
      return decodeOld(deviceSession,buf,type,index);
    }
 else     if (type >= MSG_NORMAL && type <= MSG_OBD_CODE) {
      return decodeNew(deviceSession,buf,index);
    }
  }
  return null;
}",0.9972268441486412
156029,"@Override protected Object decode(Channel channel,SocketAddress remoteAddress,Object msg) throws Exception {
  String sentence=(String)msg;
  Parser parser=new Parser(PATTERN,sentence);
  if (!parser.matches()) {
    return null;
  }
  Position position=new Position();
  position.setProtocol(getProtocolName());
  String type=parser.next();
  if (type.startsWith(""String_Node_Str"")) {
    if (channel != null) {
      channel.write(""String_Node_Str"" + type.substring(3) + ""String_Node_Str"");
    }
  }
  position.set(Position.KEY_ALARM,decodeAlarm(type));
  DeviceSession deviceSession=getDeviceSession(channel,remoteAddress,parser.next());
  if (deviceSession == null) {
    return null;
  }
  position.setDeviceId(deviceSession.getDeviceId());
  DateBuilder dateBuilder=new DateBuilder().setTime(parser.nextInt(),parser.nextInt(),parser.nextInt(),parser.nextInt());
  position.setValid(parser.next().equals(""String_Node_Str""));
  position.setLatitude(parser.nextCoordinate());
  position.setLongitude(parser.nextCoordinate());
  position.setSpeed(parser.nextDouble());
  position.setCourse(parser.nextDouble());
  dateBuilder.setDateReverse(parser.nextInt(),parser.nextInt(),parser.nextInt());
  position.setTime(dateBuilder.getDate());
  position.set(Position.KEY_INPUT,parser.next());
  position.set(Position.KEY_OUTPUT,parser.next());
  if (parser.hasNext()) {
    String[] values=parser.next().split(""String_Node_Str"");
    for (int i=0; i < values.length; i++) {
      position.set(Position.PREFIX_ADC + (i + 1),Integer.parseInt(values[i],16));
    }
  }
  position.set(Position.KEY_ODOMETER,parser.nextInt());
  position.set(Position.KEY_RFID,parser.next());
  if (parser.hasNext()) {
    int value=parser.nextInt(16);
    position.set(Position.KEY_BATTERY,value >> 8);
    position.set(Position.KEY_GSM,(value >> 4) & 0xf);
    position.set(Position.KEY_SATELLITES,value & 0xf);
  }
  return position;
}","@Override protected Object decode(Channel channel,SocketAddress remoteAddress,Object msg) throws Exception {
  String sentence=(String)msg;
  Parser parser=new Parser(PATTERN,sentence);
  if (!parser.matches()) {
    return null;
  }
  Position position=new Position();
  position.setProtocol(getProtocolName());
  String type=parser.next();
  if (type.startsWith(""String_Node_Str"") && channel != null) {
    channel.write(""String_Node_Str"" + type.substring(3) + ""String_Node_Str"");
  }
  position.set(Position.KEY_ALARM,decodeAlarm(type));
  DeviceSession deviceSession=getDeviceSession(channel,remoteAddress,parser.next());
  if (deviceSession == null) {
    return null;
  }
  position.setDeviceId(deviceSession.getDeviceId());
  DateBuilder dateBuilder=new DateBuilder().setTime(parser.nextInt(),parser.nextInt(),parser.nextInt(),parser.nextInt());
  position.setValid(parser.next().equals(""String_Node_Str""));
  position.setLatitude(parser.nextCoordinate());
  position.setLongitude(parser.nextCoordinate());
  position.setSpeed(parser.nextDouble());
  position.setCourse(parser.nextDouble());
  dateBuilder.setDateReverse(parser.nextInt(),parser.nextInt(),parser.nextInt());
  position.setTime(dateBuilder.getDate());
  position.set(Position.KEY_INPUT,parser.next());
  position.set(Position.KEY_OUTPUT,parser.next());
  if (parser.hasNext()) {
    String[] values=parser.next().split(""String_Node_Str"");
    for (int i=0; i < values.length; i++) {
      position.set(Position.PREFIX_ADC + (i + 1),Integer.parseInt(values[i],16));
    }
  }
  position.set(Position.KEY_ODOMETER,parser.nextInt());
  position.set(Position.KEY_RFID,parser.next());
  if (parser.hasNext()) {
    int value=parser.nextInt(16);
    position.set(Position.KEY_BATTERY,value >> 8);
    position.set(Position.KEY_GSM,(value >> 4) & 0xf);
    position.set(Position.KEY_SATELLITES,value & 0xf);
  }
  return position;
}",0.9937007874015747
156030,"@Override protected Object decode(ChannelHandlerContext ctx,Channel channel,ChannelBuffer buf) throws Exception {
  if (buf.readableBytes() < 80) {
    return null;
  }
  int beginIndex=buf.indexOf(buf.readerIndex(),buf.writerIndex(),new StringFinder(""String_Node_Str""));
  if (beginIndex == -1) {
    beginIndex=buf.indexOf(buf.readerIndex(),buf.writerIndex(),new StringFinder(""String_Node_Str""));
    if (beginIndex == -1) {
      return null;
    }
  }
  int identifierIndex=buf.indexOf(beginIndex,buf.writerIndex(),new StringFinder(""String_Node_Str""));
  if (identifierIndex == -1) {
    return null;
  }
  int endIndex=buf.indexOf(identifierIndex,buf.writerIndex(),(byte)',');
  if (endIndex == -1) {
    return null;
  }
  buf.skipBytes(beginIndex);
  return buf.readBytes(endIndex - beginIndex + 1);
}","@Override protected Object decode(ChannelHandlerContext ctx,Channel channel,ChannelBuffer buf) throws Exception {
  if (buf.readableBytes() < 80) {
    return null;
  }
  int beginIndex=buf.indexOf(buf.readerIndex(),buf.writerIndex(),new StringFinder(""String_Node_Str""));
  if (beginIndex == -1) {
    beginIndex=buf.indexOf(buf.readerIndex(),buf.writerIndex(),new StringFinder(""String_Node_Str""));
    if (beginIndex == -1) {
      return null;
    }
  }
  int identifierIndex=buf.indexOf(beginIndex,buf.writerIndex(),new StringFinder(""String_Node_Str""));
  if (identifierIndex == -1) {
    return null;
  }
  int endIndex=buf.indexOf(identifierIndex,buf.writerIndex(),(byte)',');
  if (endIndex == -1) {
    return null;
  }
  buf.skipBytes(beginIndex - buf.readerIndex());
  return buf.readBytes(endIndex - beginIndex + 1);
}",0.9877750611246944
156031,"@Override protected Object decode(Channel channel,SocketAddress remoteAddress,Object msg) throws Exception {
  ChannelBuffer buf=(ChannelBuffer)msg;
  buf.skipBytes(2);
  buf.readShort();
  ChannelBuffer id=buf.readBytes(7);
  int command=buf.readUnsignedShort();
  ChannelBuffer response;
  if (channel != null) {
    if (command == MSG_LOGIN) {
      response=ChannelBuffers.wrappedBuffer(new byte[]{0x01});
      sendResponse(channel,remoteAddress,id,MSG_LOGIN_RESPONSE,response);
    }
 else     if (command == MSG_HEARTBEAT) {
      response=ChannelBuffers.wrappedBuffer(new byte[]{0x01});
      sendResponse(channel,remoteAddress,id,MSG_HEARTBEAT,response);
    }
 else     if (command == MSG_SERVER) {
      response=ChannelBuffers.copiedBuffer(getServer(channel),StandardCharsets.US_ASCII);
      sendResponse(channel,remoteAddress,id,MSG_SERVER,response);
    }
  }
  Position position=new Position();
  position.setProtocol(getProtocolName());
  if (command == MSG_ALARM) {
    position.set(Position.KEY_ALARM,decodeAlarm(buf.readUnsignedByte()));
  }
 else   if (command == MSG_POSITION_LOGGED) {
    buf.skipBytes(6);
  }
  DeviceSession deviceSession=identify(id,channel,remoteAddress);
  if (deviceSession == null) {
    return null;
  }
  position.setDeviceId(deviceSession.getDeviceId());
  if (command == MSG_RFID) {
    for (int i=0; i < 15; i++) {
      long rfid=buf.readUnsignedInt();
      if (rfid != 0) {
        String card=String.format(""String_Node_Str"",rfid);
        position.set(""String_Node_Str"" + (i + 1),card);
        position.set(Position.KEY_RFID,card);
      }
    }
  }
  String sentence=buf.toString(buf.readerIndex(),buf.readableBytes() - 4,StandardCharsets.US_ASCII);
  if (command == MSG_POSITION || command == MSG_POSITION_LOGGED || command == MSG_ALARM) {
    return decodeRegular(position,sentence);
  }
 else   if (command == MSG_RFID) {
    return decodeRfid(position,sentence);
  }
 else   if (command == MSG_OBD_RT) {
    return decodeObd(position,sentence);
  }
  return null;
}","@Override protected Object decode(Channel channel,SocketAddress remoteAddress,Object msg) throws Exception {
  ChannelBuffer buf=(ChannelBuffer)msg;
  buf.skipBytes(2);
  buf.readShort();
  ChannelBuffer id=buf.readBytes(7);
  int command=buf.readUnsignedShort();
  ChannelBuffer response;
  if (channel != null) {
    if (command == MSG_LOGIN) {
      response=ChannelBuffers.wrappedBuffer(new byte[]{0x01});
      sendResponse(channel,remoteAddress,id,MSG_LOGIN_RESPONSE,response);
      return null;
    }
 else     if (command == MSG_HEARTBEAT) {
      response=ChannelBuffers.wrappedBuffer(new byte[]{0x01});
      sendResponse(channel,remoteAddress,id,MSG_HEARTBEAT,response);
      return null;
    }
 else     if (command == MSG_SERVER) {
      response=ChannelBuffers.copiedBuffer(getServer(channel),StandardCharsets.US_ASCII);
      sendResponse(channel,remoteAddress,id,MSG_SERVER,response);
      return null;
    }
  }
  Position position=new Position();
  position.setProtocol(getProtocolName());
  if (command == MSG_ALARM) {
    position.set(Position.KEY_ALARM,decodeAlarm(buf.readUnsignedByte()));
  }
 else   if (command == MSG_POSITION_LOGGED) {
    buf.skipBytes(6);
  }
  DeviceSession deviceSession=identify(id,channel,remoteAddress);
  if (deviceSession == null) {
    return null;
  }
  position.setDeviceId(deviceSession.getDeviceId());
  if (command == MSG_RFID) {
    for (int i=0; i < 15; i++) {
      long rfid=buf.readUnsignedInt();
      if (rfid != 0) {
        String card=String.format(""String_Node_Str"",rfid);
        position.set(""String_Node_Str"" + (i + 1),card);
        position.set(Position.KEY_RFID,card);
      }
    }
  }
  String sentence=buf.toString(buf.readerIndex(),buf.readableBytes() - 4,StandardCharsets.US_ASCII);
  if (command == MSG_POSITION || command == MSG_POSITION_LOGGED || command == MSG_ALARM) {
    return decodeRegular(position,sentence);
  }
 else   if (command == MSG_RFID) {
    return decodeRfid(position,sentence);
  }
 else   if (command == MSG_OBD_RT) {
    return decodeObd(position,sentence);
  }
  return null;
}",0.9861415025528812
156032,"@Override protected Object decode(Channel channel,SocketAddress remoteAddress,Object msg) throws Exception {
  Parser parser=new Parser(PATTERN,(String)msg);
  if (!parser.matches()) {
    return null;
  }
  Position position=new Position();
  position.setProtocol(getProtocolName());
  DeviceSession deviceSession=getDeviceSession(channel,remoteAddress,parser.next());
  if (deviceSession == null) {
    return null;
  }
  position.setDeviceId(deviceSession.getDeviceId());
  DateBuilder dateBuilder=new DateBuilder().setDateReverse(parser.nextInt(),parser.nextInt(),parser.nextInt()).setTime(parser.nextInt(),parser.nextInt(),parser.nextInt());
  position.setTime(dateBuilder.getDate());
  position.setValid(true);
  position.setLatitude(parser.nextCoordinate(Parser.CoordinateFormat.HEM_DEG_MIN_MIN));
  position.setLongitude(parser.nextCoordinate(Parser.CoordinateFormat.HEM_DEG_MIN_MIN));
  position.setSpeed(parser.nextDouble());
  position.setCourse(parser.nextDouble());
  position.set(Position.KEY_SATELLITES,parser.next());
  position.set(Position.KEY_BATTERY,parser.next());
  position.set(Position.KEY_INPUT,parser.next());
  position.set(Position.KEY_OUTPUT,parser.next());
  position.set(Position.PREFIX_TEMP + 1,parser.next());
  return position;
}","@Override protected Object decode(Channel channel,SocketAddress remoteAddress,Object msg) throws Exception {
  Parser parser=new Parser(PATTERN,(String)msg);
  if (!parser.matches()) {
    return null;
  }
  Position position=new Position();
  position.setProtocol(getProtocolName());
  DeviceSession deviceSession=getDeviceSession(channel,remoteAddress,parser.next());
  if (deviceSession == null) {
    return null;
  }
  position.setDeviceId(deviceSession.getDeviceId());
  DateBuilder dateBuilder=new DateBuilder().setDateReverse(parser.nextInt(),parser.nextInt(),parser.nextInt()).setTime(parser.nextInt(),parser.nextInt(),parser.nextInt());
  position.setTime(dateBuilder.getDate());
  position.setValid(true);
  position.setLatitude(parser.nextCoordinate(Parser.CoordinateFormat.HEM_DEG_MIN_MIN));
  position.setLongitude(parser.nextCoordinate(Parser.CoordinateFormat.HEM_DEG_MIN_MIN));
  position.setSpeed(parser.nextDouble());
  position.setCourse(parser.nextDouble());
  position.set(Position.KEY_SATELLITES,parser.nextInt(16));
  position.set(Position.KEY_BATTERY,parser.next());
  position.set(Position.KEY_INPUT,parser.next());
  position.set(Position.KEY_OUTPUT,parser.next());
  position.set(Position.PREFIX_TEMP + 1,parser.next());
  return position;
}",0.99723429474516
156033,"@Test public void testDecode() throws Exception {
  GpsMarkerProtocolDecoder decoder=new GpsMarkerProtocolDecoder(new GpsMarkerProtocol());
  verifyNothing(decoder,text(""String_Node_Str""));
  verifyPosition(decoder,text(""String_Node_Str""),position(""String_Node_Str"",true,55.86132,37.93539));
  verifyPosition(decoder,text(""String_Node_Str""));
  verifyPosition(decoder,text(""String_Node_Str""));
}","@Test public void testDecode() throws Exception {
  GpsMarkerProtocolDecoder decoder=new GpsMarkerProtocolDecoder(new GpsMarkerProtocol());
  verifyPosition(decoder,text(""String_Node_Str""));
  verifyNothing(decoder,text(""String_Node_Str""));
  verifyPosition(decoder,text(""String_Node_Str""),position(""String_Node_Str"",true,55.86132,37.93539));
  verifyPosition(decoder,text(""String_Node_Str""));
  verifyPosition(decoder,text(""String_Node_Str""));
}",0.93935790725327
156034,"@Override protected Object decode(Channel channel,SocketAddress remoteAddress,Object msg) throws Exception {
  ChannelBuffer buf=(ChannelBuffer)msg;
  int header=buf.readUnsignedShort();
  buf.readUnsignedShort();
  int version=-1;
  if (header == 0x4040) {
    version=buf.readUnsignedByte();
  }
  ChannelBuffer id=buf.readBytes(20);
  int type=ChannelBuffers.swapShort(buf.readShort());
  DeviceSession deviceSession=getDeviceSession(channel,remoteAddress,id.toString(StandardCharsets.US_ASCII).trim());
  if (deviceSession == null) {
    return null;
  }
  if (version == -1) {
    if (type == 0x2001) {
      sendResponse(channel,remoteAddress,id,(short)0x1001);
      buf.readUnsignedInt();
      buf.readUnsignedInt();
      buf.readUnsignedByte();
      return readPosition(deviceSession,buf);
    }
  }
 else   if (version == 4) {
    if (type == MSG_SC_HEARTBEAT) {
      sendResponse(channel,remoteAddress,version,id,MSG_SC_HEARTBEAT_RESPONSE,null);
    }
 else     if (type == MSG_SC_LOGIN || type == MSG_SC_LOGOUT || type == MSG_SC_GPS || type == MSG_SC_ALARM || type == MSG_SC_CURRENT_LOCATION) {
      if (type == MSG_SC_LOGIN) {
        ChannelBuffer response=ChannelBuffers.directBuffer(ByteOrder.LITTLE_ENDIAN,10);
        response.writeInt(0xFFFFFFFF);
        response.writeShort(0);
        response.writeInt((int)(System.currentTimeMillis() / 1000));
        sendResponse(channel,remoteAddress,version,id,MSG_SC_LOGIN_RESPONSE,response);
      }
      if (type == MSG_SC_GPS) {
        buf.readUnsignedByte();
      }
 else       if (type == MSG_SC_ALARM) {
        buf.readUnsignedInt();
      }
 else       if (type == MSG_SC_CURRENT_LOCATION) {
        buf.readUnsignedShort();
      }
      buf.readUnsignedInt();
      buf.readUnsignedInt();
      long odometer=buf.readUnsignedInt();
      buf.readUnsignedInt();
      buf.readUnsignedInt();
      buf.readUnsignedShort();
      long status=buf.readUnsignedInt();
      buf.skipBytes(8);
      int count=buf.readUnsignedByte();
      List<Position> positions=new LinkedList<>();
      for (int i=0; i < count; i++) {
        Position position=readPosition(deviceSession,buf);
        position.set(Position.KEY_ODOMETER,odometer);
        position.set(Position.KEY_STATUS,status);
        positions.add(position);
      }
      if (!positions.isEmpty()) {
        return positions;
      }
    }
 else     if (type == MSG_SC_GPS_SLEEP || type == MSG_SC_AGPS_REQUEST) {
      return readPosition(deviceSession,buf);
    }
  }
 else {
    if (type == MSG_CC_HEARTBEAT) {
      sendResponse(channel,remoteAddress,version,id,MSG_CC_HEARTBEAT_RESPONSE,null);
      buf.readUnsignedByte();
      int count=buf.readUnsignedByte();
      List<Position> positions=new LinkedList<>();
      for (int i=0; i < count; i++) {
        Position position=readPosition(deviceSession,buf);
        position.set(Position.KEY_STATUS,buf.readUnsignedInt());
        position.set(Position.KEY_BATTERY,buf.readUnsignedByte());
        position.set(Position.KEY_ODOMETER,buf.readUnsignedInt());
        buf.readUnsignedByte();
        buf.readUnsignedByte();
        buf.readUnsignedByte();
        position.set(Position.KEY_LAC,buf.readUnsignedShort());
        position.set(Position.KEY_CID,buf.readUnsignedShort());
        positions.add(position);
      }
      return positions;
    }
 else     if (type == MSG_CC_LOGIN) {
      sendResponse(channel,remoteAddress,version,id,MSG_CC_LOGIN_RESPONSE,null);
      Position position=readPosition(deviceSession,buf);
      position.set(Position.KEY_STATUS,buf.readUnsignedInt());
      position.set(Position.KEY_BATTERY,buf.readUnsignedByte());
      position.set(Position.KEY_ODOMETER,buf.readUnsignedInt());
      buf.readUnsignedByte();
      buf.readUnsignedByte();
      buf.readUnsignedByte();
      return position;
    }
  }
  return null;
}","@Override protected Object decode(Channel channel,SocketAddress remoteAddress,Object msg) throws Exception {
  ChannelBuffer buf=(ChannelBuffer)msg;
  int header=buf.readUnsignedShort();
  buf.readUnsignedShort();
  int version=-1;
  if (header == 0x4040) {
    version=buf.readUnsignedByte();
  }
  ChannelBuffer id=buf.readBytes(20);
  int type=ChannelBuffers.swapShort(buf.readShort());
  DeviceSession deviceSession=getDeviceSession(channel,remoteAddress,id.toString(StandardCharsets.US_ASCII).trim());
  if (deviceSession == null) {
    return null;
  }
  if (version == -1) {
    if (type == 0x2001) {
      sendResponse(channel,remoteAddress,id,(short)0x1001);
      buf.readUnsignedInt();
      buf.readUnsignedInt();
      buf.readUnsignedByte();
      return readPosition(deviceSession,buf);
    }
  }
 else   if (version == 4) {
    if (type == MSG_SC_HEARTBEAT) {
      sendResponse(channel,remoteAddress,version,id,MSG_SC_HEARTBEAT_RESPONSE,null);
    }
 else     if (type == MSG_SC_LOGIN || type == MSG_SC_LOGOUT || type == MSG_SC_GPS || type == MSG_SC_ALARM || type == MSG_SC_CURRENT_LOCATION) {
      if (type == MSG_SC_LOGIN) {
        ChannelBuffer response=ChannelBuffers.directBuffer(ByteOrder.LITTLE_ENDIAN,10);
        response.writeInt(0xFFFFFFFF);
        response.writeShort(0);
        response.writeInt((int)(System.currentTimeMillis() / 1000));
        sendResponse(channel,remoteAddress,version,id,MSG_SC_LOGIN_RESPONSE,response);
      }
      if (type == MSG_SC_GPS) {
        buf.readUnsignedByte();
      }
 else       if (type == MSG_SC_ALARM) {
        buf.readUnsignedInt();
      }
 else       if (type == MSG_SC_CURRENT_LOCATION) {
        buf.readUnsignedShort();
      }
      buf.readUnsignedInt();
      buf.readUnsignedInt();
      long odometer=buf.readUnsignedInt();
      buf.readUnsignedInt();
      buf.readUnsignedInt();
      buf.readUnsignedShort();
      long status=buf.readUnsignedInt();
      buf.skipBytes(8);
      int count=buf.readUnsignedByte();
      List<Position> positions=new LinkedList<>();
      for (int i=0; i < count; i++) {
        Position position=readPosition(deviceSession,buf);
        position.set(Position.KEY_ODOMETER,odometer);
        position.set(Position.KEY_STATUS,status);
        positions.add(position);
      }
      if (!positions.isEmpty()) {
        return positions;
      }
    }
 else     if (type == MSG_SC_GPS_SLEEP) {
      buf.readUnsignedInt();
      return readPosition(deviceSession,buf);
    }
 else     if (type == MSG_SC_AGPS_REQUEST) {
      return readPosition(deviceSession,buf);
    }
  }
 else {
    if (type == MSG_CC_HEARTBEAT) {
      sendResponse(channel,remoteAddress,version,id,MSG_CC_HEARTBEAT_RESPONSE,null);
      buf.readUnsignedByte();
      int count=buf.readUnsignedByte();
      List<Position> positions=new LinkedList<>();
      for (int i=0; i < count; i++) {
        Position position=readPosition(deviceSession,buf);
        position.set(Position.KEY_STATUS,buf.readUnsignedInt());
        position.set(Position.KEY_BATTERY,buf.readUnsignedByte());
        position.set(Position.KEY_ODOMETER,buf.readUnsignedInt());
        buf.readUnsignedByte();
        buf.readUnsignedByte();
        buf.readUnsignedByte();
        position.set(Position.KEY_LAC,buf.readUnsignedShort());
        position.set(Position.KEY_CID,buf.readUnsignedShort());
        positions.add(position);
      }
      return positions;
    }
 else     if (type == MSG_CC_LOGIN) {
      sendResponse(channel,remoteAddress,version,id,MSG_CC_LOGIN_RESPONSE,null);
      Position position=readPosition(deviceSession,buf);
      position.set(Position.KEY_STATUS,buf.readUnsignedInt());
      position.set(Position.KEY_BATTERY,buf.readUnsignedByte());
      position.set(Position.KEY_ODOMETER,buf.readUnsignedInt());
      buf.readUnsignedByte();
      buf.readUnsignedByte();
      buf.readUnsignedByte();
      return position;
    }
  }
  return null;
}",0.9867897909452352
156035,"@Test public void testDecode() throws Exception {
  CastelProtocolDecoder decoder=new CastelProtocolDecoder(new CastelProtocol());
  verifyNothing(decoder,binary(ByteOrder.LITTLE_ENDIAN,""String_Node_Str""));
  verifyPosition(decoder,binary(ByteOrder.LITTLE_ENDIAN,""String_Node_Str""));
  verifyPosition(decoder,binary(ByteOrder.LITTLE_ENDIAN,""String_Node_Str""));
  verifyPositions(decoder,binary(ByteOrder.LITTLE_ENDIAN,""String_Node_Str""));
  verifyPositions(decoder,binary(ByteOrder.LITTLE_ENDIAN,""String_Node_Str""));
  verifyPositions(decoder,binary(ByteOrder.LITTLE_ENDIAN,""String_Node_Str""));
  verifyPositions(decoder,binary(ByteOrder.LITTLE_ENDIAN,""String_Node_Str""));
  verifyNothing(decoder,binary(ByteOrder.LITTLE_ENDIAN,""String_Node_Str""));
  verifyPositions(decoder,binary(ByteOrder.LITTLE_ENDIAN,""String_Node_Str""));
  verifyNothing(decoder,binary(ByteOrder.LITTLE_ENDIAN,""String_Node_Str""));
  verifyNothing(decoder,binary(ByteOrder.LITTLE_ENDIAN,""String_Node_Str""));
  verifyNothing(decoder,binary(ByteOrder.LITTLE_ENDIAN,""String_Node_Str""));
  verifyPositions(decoder,binary(ByteOrder.LITTLE_ENDIAN,""String_Node_Str""));
  verifyPositions(decoder,binary(ByteOrder.LITTLE_ENDIAN,""String_Node_Str""));
  verifyPosition(decoder,binary(ByteOrder.LITTLE_ENDIAN,""String_Node_Str""));
  verifyNothing(decoder,binary(ByteOrder.LITTLE_ENDIAN,""String_Node_Str""));
  verifyNothing(decoder,binary(ByteOrder.LITTLE_ENDIAN,""String_Node_Str""));
  verifyNothing(decoder,binary(ByteOrder.LITTLE_ENDIAN,""String_Node_Str""));
  verifyNothing(decoder,binary(ByteOrder.LITTLE_ENDIAN,""String_Node_Str""));
  verifyNothing(decoder,binary(ByteOrder.LITTLE_ENDIAN,""String_Node_Str""));
  verifyNothing(decoder,binary(ByteOrder.LITTLE_ENDIAN,""String_Node_Str""));
  verifyNothing(decoder,binary(ByteOrder.LITTLE_ENDIAN,""String_Node_Str""));
  verifyPositions(decoder,binary(ByteOrder.LITTLE_ENDIAN,""String_Node_Str""));
  verifyPositions(decoder,binary(ByteOrder.LITTLE_ENDIAN,""String_Node_Str""));
  verifyPositions(decoder,binary(ByteOrder.LITTLE_ENDIAN,""String_Node_Str""));
}","@Test public void testDecode() throws Exception {
  CastelProtocolDecoder decoder=new CastelProtocolDecoder(new CastelProtocol());
  verifyPosition(decoder,binary(ByteOrder.LITTLE_ENDIAN,""String_Node_Str""));
  verifyNothing(decoder,binary(ByteOrder.LITTLE_ENDIAN,""String_Node_Str""));
  verifyPosition(decoder,binary(ByteOrder.LITTLE_ENDIAN,""String_Node_Str""));
  verifyPosition(decoder,binary(ByteOrder.LITTLE_ENDIAN,""String_Node_Str""));
  verifyPositions(decoder,binary(ByteOrder.LITTLE_ENDIAN,""String_Node_Str""));
  verifyPositions(decoder,binary(ByteOrder.LITTLE_ENDIAN,""String_Node_Str""));
  verifyPositions(decoder,binary(ByteOrder.LITTLE_ENDIAN,""String_Node_Str""));
  verifyPositions(decoder,binary(ByteOrder.LITTLE_ENDIAN,""String_Node_Str""));
  verifyNothing(decoder,binary(ByteOrder.LITTLE_ENDIAN,""String_Node_Str""));
  verifyPositions(decoder,binary(ByteOrder.LITTLE_ENDIAN,""String_Node_Str""));
  verifyNothing(decoder,binary(ByteOrder.LITTLE_ENDIAN,""String_Node_Str""));
  verifyNothing(decoder,binary(ByteOrder.LITTLE_ENDIAN,""String_Node_Str""));
  verifyNothing(decoder,binary(ByteOrder.LITTLE_ENDIAN,""String_Node_Str""));
  verifyPositions(decoder,binary(ByteOrder.LITTLE_ENDIAN,""String_Node_Str""));
  verifyPositions(decoder,binary(ByteOrder.LITTLE_ENDIAN,""String_Node_Str""));
  verifyPosition(decoder,binary(ByteOrder.LITTLE_ENDIAN,""String_Node_Str""));
  verifyNothing(decoder,binary(ByteOrder.LITTLE_ENDIAN,""String_Node_Str""));
  verifyNothing(decoder,binary(ByteOrder.LITTLE_ENDIAN,""String_Node_Str""));
  verifyNothing(decoder,binary(ByteOrder.LITTLE_ENDIAN,""String_Node_Str""));
  verifyNothing(decoder,binary(ByteOrder.LITTLE_ENDIAN,""String_Node_Str""));
  verifyNothing(decoder,binary(ByteOrder.LITTLE_ENDIAN,""String_Node_Str""));
  verifyNothing(decoder,binary(ByteOrder.LITTLE_ENDIAN,""String_Node_Str""));
  verifyNothing(decoder,binary(ByteOrder.LITTLE_ENDIAN,""String_Node_Str""));
  verifyPositions(decoder,binary(ByteOrder.LITTLE_ENDIAN,""String_Node_Str""));
  verifyPositions(decoder,binary(ByteOrder.LITTLE_ENDIAN,""String_Node_Str""));
  verifyPositions(decoder,binary(ByteOrder.LITTLE_ENDIAN,""String_Node_Str""));
}",0.981609744447098
156036,"@Override protected Object decode(Channel channel,SocketAddress remoteAddress,Object msg) throws Exception {
  String sentence=(String)msg;
  int beginIndex=sentence.indexOf('(');
  if (beginIndex != -1) {
    sentence=sentence.substring(beginIndex + 1);
  }
  if (channel != null) {
    String id=sentence.substring(0,12);
    String type=sentence.substring(12,16);
    if (type.equals(""String_Node_Str"")) {
      String content=sentence.substring(sentence.length() - 3);
      channel.write(""String_Node_Str"" + id + ""String_Node_Str""+ content+ ""String_Node_Str"");
    }
 else     if (type.equals(""String_Node_Str"")) {
      channel.write(""String_Node_Str"" + id + ""String_Node_Str"");
    }
  }
  Position position=new Position();
  position.setProtocol(getProtocolName());
  Parser parser=new Parser(PATTERN_BATTERY,sentence);
  if (parser.matches()) {
    if (!identify(parser.next(),channel,remoteAddress)) {
      return null;
    }
    position.setDeviceId(getDeviceId());
    DateBuilder dateBuilder=new DateBuilder().setDateReverse(parser.nextInt(),parser.nextInt(),parser.nextInt()).setTime(parser.nextInt(),parser.nextInt(),parser.nextInt());
    getLastLocation(position,dateBuilder.getDate());
    int battery=parser.nextInt();
    if (battery != 65535) {
      position.set(Position.KEY_BATTERY,battery);
    }
    int power=parser.nextInt();
    if (power != 65535) {
      position.set(Position.KEY_POWER,battery);
    }
    return position;
  }
  parser=new Parser(PATTERN_NETWORK,sentence);
  if (parser.matches()) {
    if (!identify(parser.next(),channel,remoteAddress)) {
      return null;
    }
    position.setDeviceId(getDeviceId());
    getLastLocation(position,null);
    position.set(Position.KEY_MCC,parser.nextInt());
    position.set(Position.KEY_MNC,parser.nextInt());
    position.set(Position.KEY_LAC,parser.nextInt(16));
    position.set(Position.KEY_CID,parser.nextInt(16));
    return position;
  }
  parser=new Parser(PATTERN,sentence);
  if (!parser.matches()) {
    return null;
  }
  if (!identify(parser.next(),channel,remoteAddress)) {
    return null;
  }
  position.setDeviceId(getDeviceId());
  int alarm=sentence.indexOf(""String_Node_Str"");
  if (alarm != -1) {
    position.set(Position.KEY_ALARM,Integer.parseInt(sentence.substring(alarm + 4,alarm + 5)));
  }
  DateBuilder dateBuilder=new DateBuilder();
  if (parser.next() == null) {
    dateBuilder.setDate(parser.nextInt(),parser.nextInt(),parser.nextInt());
  }
 else {
    dateBuilder.setDateReverse(parser.nextInt(),parser.nextInt(),parser.nextInt());
  }
  position.setValid(parser.next().equals(""String_Node_Str""));
  position.setLatitude(parser.nextCoordinate());
  position.setLongitude(parser.nextCoordinate());
switch (Context.getConfig().getString(getProtocolName() + ""String_Node_Str"",""String_Node_Str"")) {
case ""String_Node_Str"":
    position.setSpeed(parser.nextDouble());
  break;
case ""String_Node_Str"":
position.setSpeed(UnitsConverter.knotsFromMph(parser.nextDouble()));
break;
default :
position.setSpeed(UnitsConverter.knotsFromKph(parser.nextDouble()));
break;
}
dateBuilder.setTime(parser.nextInt(),parser.nextInt(),parser.nextInt());
position.setTime(dateBuilder.getDate());
position.setCourse(parser.nextDouble());
String status=parser.next();
if (status != null) {
position.set(Position.KEY_STATUS,status);
int value=Integer.parseInt(new StringBuilder(status).reverse().toString(),2);
position.set(Position.KEY_CHARGE,!BitUtil.check(value,0));
position.set(Position.KEY_IGNITION,BitUtil.check(value,1));
}
position.set(Position.KEY_STATUS,parser.next());
if (parser.hasNext()) {
position.set(Position.KEY_ODOMETER,parser.nextLong(16));
}
return position;
}","@Override protected Object decode(Channel channel,SocketAddress remoteAddress,Object msg) throws Exception {
  String sentence=(String)msg;
  int beginIndex=sentence.indexOf('(');
  if (beginIndex != -1) {
    sentence=sentence.substring(beginIndex + 1);
  }
  if (channel != null) {
    String id=sentence.substring(0,12);
    String type=sentence.substring(12,16);
    if (type.equals(""String_Node_Str"")) {
      String content=sentence.substring(sentence.length() - 3);
      channel.write(""String_Node_Str"" + id + ""String_Node_Str""+ content+ ""String_Node_Str"");
    }
 else     if (type.equals(""String_Node_Str"")) {
      channel.write(""String_Node_Str"" + id + ""String_Node_Str"");
    }
  }
  Position position=new Position();
  position.setProtocol(getProtocolName());
  Parser parser=new Parser(PATTERN_BATTERY,sentence);
  if (parser.matches()) {
    if (!identify(parser.next(),channel,remoteAddress)) {
      return null;
    }
    position.setDeviceId(getDeviceId());
    DateBuilder dateBuilder=new DateBuilder().setDateReverse(parser.nextInt(),parser.nextInt(),parser.nextInt()).setTime(parser.nextInt(),parser.nextInt(),parser.nextInt());
    getLastLocation(position,dateBuilder.getDate());
    int battery=parser.nextInt();
    if (battery != 65535) {
      position.set(Position.KEY_BATTERY,battery);
    }
    int power=parser.nextInt();
    if (power != 65535) {
      position.set(Position.KEY_POWER,power);
    }
    return position;
  }
  parser=new Parser(PATTERN_NETWORK,sentence);
  if (parser.matches()) {
    if (!identify(parser.next(),channel,remoteAddress)) {
      return null;
    }
    position.setDeviceId(getDeviceId());
    getLastLocation(position,null);
    position.set(Position.KEY_MCC,parser.nextInt());
    position.set(Position.KEY_MNC,parser.nextInt());
    position.set(Position.KEY_LAC,parser.nextInt(16));
    position.set(Position.KEY_CID,parser.nextInt(16));
    return position;
  }
  parser=new Parser(PATTERN,sentence);
  if (!parser.matches()) {
    return null;
  }
  if (!identify(parser.next(),channel,remoteAddress)) {
    return null;
  }
  position.setDeviceId(getDeviceId());
  int alarm=sentence.indexOf(""String_Node_Str"");
  if (alarm != -1) {
    position.set(Position.KEY_ALARM,Integer.parseInt(sentence.substring(alarm + 4,alarm + 5)));
  }
  DateBuilder dateBuilder=new DateBuilder();
  if (parser.next() == null) {
    dateBuilder.setDate(parser.nextInt(),parser.nextInt(),parser.nextInt());
  }
 else {
    dateBuilder.setDateReverse(parser.nextInt(),parser.nextInt(),parser.nextInt());
  }
  position.setValid(parser.next().equals(""String_Node_Str""));
  position.setLatitude(parser.nextCoordinate());
  position.setLongitude(parser.nextCoordinate());
switch (Context.getConfig().getString(getProtocolName() + ""String_Node_Str"",""String_Node_Str"")) {
case ""String_Node_Str"":
    position.setSpeed(parser.nextDouble());
  break;
case ""String_Node_Str"":
position.setSpeed(UnitsConverter.knotsFromMph(parser.nextDouble()));
break;
default :
position.setSpeed(UnitsConverter.knotsFromKph(parser.nextDouble()));
break;
}
dateBuilder.setTime(parser.nextInt(),parser.nextInt(),parser.nextInt());
position.setTime(dateBuilder.getDate());
position.setCourse(parser.nextDouble());
String status=parser.next();
if (status != null) {
position.set(Position.KEY_STATUS,status);
int value=Integer.parseInt(new StringBuilder(status).reverse().toString(),2);
position.set(Position.KEY_CHARGE,!BitUtil.check(value,0));
position.set(Position.KEY_IGNITION,BitUtil.check(value,1));
}
position.set(Position.KEY_STATUS,parser.next());
if (parser.hasNext()) {
position.set(Position.KEY_ODOMETER,parser.nextLong(16));
}
return position;
}",0.9983695652173912
156037,"@Test public void testDecode() throws Exception {
  Tk103ProtocolDecoder decoder=new Tk103ProtocolDecoder(new Tk103Protocol());
  verifyAttributes(decoder,text(""String_Node_Str""));
  verifyPosition(decoder,text(""String_Node_Str""));
  verifyAttributes(decoder,text(""String_Node_Str""));
  verifyAttributes(decoder,text(""String_Node_Str""));
  verifyAttributes(decoder,text(""String_Node_Str""));
  verifyPosition(decoder,text(""String_Node_Str""),position(""String_Node_Str"",true,-25.92255,28.92222));
  verifyPosition(decoder,text(""String_Node_Str""));
  verifyPosition(decoder,text(""String_Node_Str""));
  verifyPosition(decoder,text(""String_Node_Str""));
  verifyPosition(decoder,text(""String_Node_Str""));
  verifyNothing(decoder,text(""String_Node_Str""));
  verifyPosition(decoder,text(""String_Node_Str""));
  verifyPosition(decoder,text(""String_Node_Str""));
  verifyPosition(decoder,text(""String_Node_Str""));
  verifyPosition(decoder,text(""String_Node_Str""));
  verifyPosition(decoder,text(""String_Node_Str""));
  verifyPosition(decoder,text(""String_Node_Str""));
  verifyPosition(decoder,text(""String_Node_Str""));
  verifyPosition(decoder,text(""String_Node_Str""));
  verifyPosition(decoder,text(""String_Node_Str""));
  verifyPosition(decoder,text(""String_Node_Str""));
  verifyPosition(decoder,text(""String_Node_Str""));
  verifyPosition(decoder,text(""String_Node_Str""),position(""String_Node_Str"",true,45.45586,9.16626));
  verifyPosition(decoder,text(""String_Node_Str""));
  verifyPosition(decoder,text(""String_Node_Str""));
  verifyPosition(decoder,text(""String_Node_Str""));
  verifyPosition(decoder,text(""String_Node_Str""));
  verifyPosition(decoder,text(""String_Node_Str""));
  verifyPosition(decoder,text(""String_Node_Str""));
  verifyPosition(decoder,text(""String_Node_Str""));
  verifyPosition(decoder,text(""String_Node_Str""));
  verifyNothing(decoder,text(""String_Node_Str""));
  verifyPosition(decoder,text(""String_Node_Str""));
}","@Test public void testDecode() throws Exception {
  Tk103ProtocolDecoder decoder=new Tk103ProtocolDecoder(new Tk103Protocol());
  verifyAttributes(decoder,text(""String_Node_Str""));
  verifyAttributes(decoder,text(""String_Node_Str""));
  verifyPosition(decoder,text(""String_Node_Str""));
  verifyAttributes(decoder,text(""String_Node_Str""));
  verifyAttributes(decoder,text(""String_Node_Str""));
  verifyAttributes(decoder,text(""String_Node_Str""));
  verifyPosition(decoder,text(""String_Node_Str""),position(""String_Node_Str"",true,-25.92255,28.92222));
  verifyPosition(decoder,text(""String_Node_Str""));
  verifyPosition(decoder,text(""String_Node_Str""));
  verifyPosition(decoder,text(""String_Node_Str""));
  verifyPosition(decoder,text(""String_Node_Str""));
  verifyNothing(decoder,text(""String_Node_Str""));
  verifyPosition(decoder,text(""String_Node_Str""));
  verifyPosition(decoder,text(""String_Node_Str""));
  verifyPosition(decoder,text(""String_Node_Str""));
  verifyPosition(decoder,text(""String_Node_Str""));
  verifyPosition(decoder,text(""String_Node_Str""));
  verifyPosition(decoder,text(""String_Node_Str""));
  verifyPosition(decoder,text(""String_Node_Str""));
  verifyPosition(decoder,text(""String_Node_Str""));
  verifyPosition(decoder,text(""String_Node_Str""));
  verifyPosition(decoder,text(""String_Node_Str""));
  verifyPosition(decoder,text(""String_Node_Str""));
  verifyPosition(decoder,text(""String_Node_Str""),position(""String_Node_Str"",true,45.45586,9.16626));
  verifyPosition(decoder,text(""String_Node_Str""));
  verifyPosition(decoder,text(""String_Node_Str""));
  verifyPosition(decoder,text(""String_Node_Str""));
  verifyPosition(decoder,text(""String_Node_Str""));
  verifyPosition(decoder,text(""String_Node_Str""));
  verifyPosition(decoder,text(""String_Node_Str""));
  verifyPosition(decoder,text(""String_Node_Str""));
  verifyPosition(decoder,text(""String_Node_Str""));
  verifyNothing(decoder,text(""String_Node_Str""));
  verifyPosition(decoder,text(""String_Node_Str""));
}",0.9863858207038274
156038,"@Override protected Object decode(Channel channel,SocketAddress remoteAddress,Object msg) throws Exception {
  Parser parser=new Parser(PATTERN,(String)msg);
  if (!parser.matches()) {
    return null;
  }
  Position position=new Position();
  position.setProtocol(getProtocolName());
  position.set(Position.KEY_ARCHIVE,parser.next().equals(""String_Node_Str""));
  position.setValid(true);
  if (!identify(parser.next(),channel,remoteAddress)) {
    return null;
  }
  position.setDeviceId(getDeviceId());
  if (parser.hasNext(8)) {
    position.setLatitude(parser.nextCoordinate(CoordinateFormat.HEM_DEG_MIN_MIN));
    position.setLongitude(parser.nextCoordinate(CoordinateFormat.HEM_DEG_MIN_MIN));
  }
  if (parser.hasNext(4)) {
    position.setLatitude(parser.nextCoordinate(CoordinateFormat.HEM_DEG));
    position.setLongitude(parser.nextCoordinate(CoordinateFormat.HEM_DEG));
  }
  position.setSpeed(UnitsConverter.knotsFromKph(parser.nextInt()));
  position.setCourse(parser.nextInt());
  if (parser.hasNext(3)) {
    position.set(""String_Node_Str"",parser.nextInt());
    position.set(""String_Node_Str"",parser.nextInt());
    position.set(""String_Node_Str"",parser.nextInt());
  }
  if (parser.hasNext(1)) {
    position.set(""String_Node_Str"",parser.nextInt());
  }
  Double internalBattery=(parser.nextDouble() + 100d) * 0.0294d;
  position.set(Position.KEY_BATTERY,internalBattery);
  position.set(Position.KEY_GSM,parser.nextInt());
  position.set(""String_Node_Str"",parser.next().equals(""String_Node_Str""));
  position.set(Position.KEY_GPS,parser.nextInt());
  parser.next();
  DateBuilder dateBuilder=new DateBuilder().setDateReverse(parser.nextInt(),parser.nextInt(),parser.nextInt()).setTime(parser.nextInt(),parser.nextInt(),parser.nextInt());
  position.setTime(dateBuilder.getDate());
  position.set(""String_Node_Str"",parser.next().equals(""String_Node_Str""));
  position.set(Position.KEY_IGNITION,parser.next().equals(""String_Node_Str""));
  if (parser.hasNext(4)) {
    position.set(""String_Node_Str"",parser.next().equals(""String_Node_Str""));
    parser.next();
    Integer painelStatus=parser.nextInt();
    position.set(Position.KEY_ALARM,painelStatus.equals(""String_Node_Str""));
    position.set(""String_Node_Str"",painelStatus.equals(""String_Node_Str""));
    Double mainVoltage=parser.nextDouble() / 100d;
    position.set(Position.KEY_POWER,mainVoltage);
  }
  if (parser.hasNext(5)) {
    position.set(""String_Node_Str"",parser.nextInt());
    parser.next();
    parser.next();
    Double mainVoltage=parser.nextDouble() / 100d;
    position.set(Position.KEY_POWER,mainVoltage);
    position.set(""String_Node_Str"",parser.next());
  }
  return position;
}","@Override protected Object decode(Channel channel,SocketAddress remoteAddress,Object msg) throws Exception {
  Parser parser=new Parser(PATTERN,(String)msg);
  if (!parser.matches()) {
    return null;
  }
  Position position=new Position();
  position.setProtocol(getProtocolName());
  position.set(Position.KEY_ARCHIVE,parser.next().equals(""String_Node_Str""));
  position.setValid(true);
  if (!identify(parser.next(),channel,remoteAddress)) {
    return null;
  }
  position.setDeviceId(getDeviceId());
  if (parser.hasNext(8)) {
    position.setLatitude(parser.nextCoordinate(CoordinateFormat.HEM_DEG_MIN_MIN));
    position.setLongitude(parser.nextCoordinate(CoordinateFormat.HEM_DEG_MIN_MIN));
  }
  if (parser.hasNext(4)) {
    position.setLatitude(parser.nextCoordinate(CoordinateFormat.HEM_DEG));
    position.setLongitude(parser.nextCoordinate(CoordinateFormat.HEM_DEG));
  }
  position.setSpeed(UnitsConverter.knotsFromKph(parser.nextInt()));
  position.setCourse(parser.nextInt());
  if (parser.hasNext(3)) {
    position.set(""String_Node_Str"",parser.nextInt());
    position.set(""String_Node_Str"",parser.nextInt());
    position.set(""String_Node_Str"",parser.nextInt());
  }
  if (parser.hasNext(1)) {
    position.set(""String_Node_Str"",parser.nextInt());
  }
  Double internalBattery=(parser.nextDouble() + 100d) * 0.0294d;
  position.set(Position.KEY_BATTERY,internalBattery);
  position.set(Position.KEY_GSM,parser.nextInt());
  position.set(""String_Node_Str"",parser.next().equals(""String_Node_Str""));
  position.set(Position.KEY_GPS,parser.nextInt());
  parser.next();
  DateBuilder dateBuilder=new DateBuilder().setDateReverse(parser.nextInt(),parser.nextInt(),parser.nextInt()).setTime(parser.nextInt(),parser.nextInt(),parser.nextInt());
  position.setTime(dateBuilder.getDate());
  position.set(""String_Node_Str"",parser.next().equals(""String_Node_Str""));
  position.set(Position.KEY_IGNITION,parser.next().equals(""String_Node_Str""));
  if (parser.hasNext(4)) {
    position.set(""String_Node_Str"",parser.next().equals(""String_Node_Str""));
    parser.next();
    String painelStatus=parser.next();
    position.set(Position.KEY_ALARM,painelStatus.equals(""String_Node_Str""));
    position.set(""String_Node_Str"",painelStatus.equals(""String_Node_Str""));
    Double mainVoltage=parser.nextDouble() / 100d;
    position.set(Position.KEY_POWER,mainVoltage);
  }
  if (parser.hasNext(5)) {
    position.set(""String_Node_Str"",parser.nextInt());
    parser.next();
    parser.next();
    Double mainVoltage=parser.nextDouble() / 100d;
    position.set(Position.KEY_POWER,mainVoltage);
    position.set(""String_Node_Str"",parser.next());
  }
  return position;
}",0.9970048670909772
156039,"@Override public Collection<String> getSupportedCommands(){
  return supportedCommands;
}","@Override public Collection<String> getSupportedCommands(){
  Set<String> commands=new HashSet<>(supportedCommands);
  commands.add(Command.TYPE_CUSTOM);
  return commands;
}",0.6615969581749049
156040,"public BaseProtocol(String name){
  this.name=name;
  supportedCommands.add(Command.TYPE_CUSTOM);
}","public BaseProtocol(String name){
  this.name=name;
}",0.6973684210526315
156041,"private Position decodeOld(Channel channel,SocketAddress remoteAddress,String sentence){
  boolean simple=sentence.charAt(3) == ',' || sentence.charAt(6) == ',';
  String id;
  String location;
  String status;
  if (simple) {
    int beginIndex=sentence.indexOf(',') + 1;
    int endIndex=sentence.indexOf(',',beginIndex);
    id=sentence.substring(beginIndex,endIndex);
    beginIndex=endIndex + 1;
    endIndex=sentence.indexOf('*',beginIndex);
    if (endIndex != -1) {
      endIndex+=3;
    }
 else {
      endIndex=sentence.length();
    }
    location=sentence.substring(beginIndex,endIndex);
    beginIndex=endIndex + 1;
    if (beginIndex > sentence.length()) {
      beginIndex=endIndex;
    }
    status=sentence.substring(beginIndex);
  }
 else {
    int beginIndex=3;
    int endIndex=beginIndex + 16;
    id=sentence.substring(beginIndex,endIndex).trim();
    beginIndex=endIndex + 2;
    endIndex=sentence.indexOf('*',beginIndex) + 3;
    location=sentence.substring(beginIndex,endIndex);
    beginIndex=endIndex + 1;
    status=sentence.substring(beginIndex);
  }
  Position position=new Position();
  position.setProtocol(getProtocolName());
  if (!parseLocation(location,position)) {
    return null;
  }
  if (simple) {
    Parser parser=new Parser(PATTERN_SIMPLE,status);
    if (parser.matches()) {
      position.set(Position.KEY_ALARM,parser.next());
      if (!identify(parser.next(),channel,remoteAddress,false) && !identify(id,channel,remoteAddress)) {
        return null;
      }
      position.setDeviceId(getDeviceId());
      position.set(Position.KEY_SATELLITES,parser.next());
      position.setAltitude(parser.nextDouble());
      position.set(Position.KEY_POWER,parser.nextDouble());
      String charger=parser.next();
      if (charger != null) {
        position.set(Position.KEY_CHARGE,Integer.parseInt(charger) == 1);
      }
      if (parser.hasNext(3)) {
        position.set(Position.KEY_MCC,parser.nextInt());
        position.set(Position.KEY_MNC,parser.nextInt());
        position.set(Position.KEY_LAC,parser.nextInt(16));
        position.set(Position.KEY_CID,parser.nextInt(16));
      }
    }
 else {
      if (!identify(id,channel,remoteAddress)) {
        return null;
      }
      position.setDeviceId(getDeviceId());
    }
  }
 else {
    Parser parser=new Parser(PATTERN_ALTERNATIVE,status);
    if (parser.matches()) {
      if (!identify(id,channel,remoteAddress)) {
        return null;
      }
      position.setDeviceId(getDeviceId());
      position.set(Position.KEY_MCC,parser.nextInt());
      position.set(Position.KEY_MNC,parser.nextInt());
      position.set(Position.KEY_LAC,parser.nextInt(16));
      position.set(Position.KEY_CID,parser.nextInt(16));
      position.set(Position.KEY_GSM,parser.next());
      position.set(Position.KEY_BATTERY,Double.parseDouble(parser.next()));
      position.set(Position.KEY_FLAGS,parser.next());
      position.set(Position.KEY_INPUT,parser.next());
      position.set(Position.KEY_OUTPUT,parser.next());
      position.set(Position.PREFIX_ADC + 1,parser.next());
      position.set(Position.PREFIX_ADC + 2,parser.next());
      position.set(Position.PREFIX_ADC + 3,parser.next());
      position.set(Position.KEY_ALARM,parser.next());
    }
  }
  return position;
}","private Position decodeOld(Channel channel,SocketAddress remoteAddress,String sentence){
  boolean simple=sentence.charAt(3) == ',' || sentence.charAt(6) == ',';
  String id;
  String location;
  String status;
  if (simple) {
    int beginIndex=sentence.indexOf(',') + 1;
    int endIndex=sentence.indexOf(',',beginIndex);
    id=sentence.substring(beginIndex,endIndex);
    beginIndex=endIndex + 1;
    endIndex=sentence.indexOf('*',beginIndex);
    if (endIndex != -1) {
      endIndex+=3;
    }
 else {
      endIndex=sentence.length();
    }
    location=sentence.substring(beginIndex,endIndex);
    beginIndex=endIndex + 1;
    if (beginIndex > sentence.length()) {
      beginIndex=endIndex;
    }
    status=sentence.substring(beginIndex);
  }
 else {
    int beginIndex=3;
    int endIndex=beginIndex + 16;
    id=sentence.substring(beginIndex,endIndex).trim();
    beginIndex=endIndex + 2;
    endIndex=sentence.indexOf('*',beginIndex) + 3;
    location=sentence.substring(beginIndex,endIndex);
    beginIndex=endIndex + 1;
    status=sentence.substring(beginIndex);
  }
  Position position=new Position();
  position.setProtocol(getProtocolName());
  if (!parseLocation(location,position)) {
    return null;
  }
  if (simple) {
    Parser parser=new Parser(PATTERN_SIMPLE,status);
    if (parser.matches()) {
      position.set(Position.KEY_ALARM,parser.next());
      if (!identify(parser.next(),channel,remoteAddress,false) && !identify(id,channel,remoteAddress)) {
        return null;
      }
      position.setDeviceId(getDeviceId());
      position.set(Position.KEY_SATELLITES,parser.next());
      position.setAltitude(parser.nextDouble());
      position.set(Position.KEY_POWER,parser.nextDouble());
      String charger=parser.next();
      if (charger != null) {
        position.set(Position.KEY_CHARGE,Integer.parseInt(charger) == 1);
      }
      if (parser.hasNext(4)) {
        position.set(Position.KEY_MCC,parser.nextInt());
        position.set(Position.KEY_MNC,parser.nextInt());
        position.set(Position.KEY_LAC,parser.nextInt(16));
        position.set(Position.KEY_CID,parser.nextInt(16));
      }
    }
 else {
      if (!identify(id,channel,remoteAddress)) {
        return null;
      }
      position.setDeviceId(getDeviceId());
    }
  }
 else {
    Parser parser=new Parser(PATTERN_ALTERNATIVE,status);
    if (parser.matches()) {
      if (!identify(id,channel,remoteAddress)) {
        return null;
      }
      position.setDeviceId(getDeviceId());
      position.set(Position.KEY_MCC,parser.nextInt());
      position.set(Position.KEY_MNC,parser.nextInt());
      position.set(Position.KEY_LAC,parser.nextInt(16));
      position.set(Position.KEY_CID,parser.nextInt(16));
      position.set(Position.KEY_GSM,parser.next());
      position.set(Position.KEY_BATTERY,Double.parseDouble(parser.next()));
      position.set(Position.KEY_FLAGS,parser.next());
      position.set(Position.KEY_INPUT,parser.next());
      position.set(Position.KEY_OUTPUT,parser.next());
      position.set(Position.PREFIX_ADC + 1,parser.next());
      position.set(Position.PREFIX_ADC + 2,parser.next());
      position.set(Position.PREFIX_ADC + 3,parser.next());
      position.set(Position.KEY_ALARM,parser.next());
    }
  }
  return position;
}",0.9996945632254124
156042,"@Override protected Object decode(ChannelHandlerContext ctx,Channel channel,ChannelBuffer buf) throws Exception {
  if (buf.readableBytes() < 2) {
    return null;
  }
  int index=buf.indexOf(buf.readerIndex() + 1,buf.writerIndex(),(byte)0xC0);
  if (index != -1) {
    return buf.readBytes(index + 1 - buf.readerIndex());
  }
  return null;
}","@Override protected Object decode(ChannelHandlerContext ctx,Channel channel,ChannelBuffer buf) throws Exception {
  if (buf.readableBytes() < 2) {
    return null;
  }
  int index=buf.indexOf(buf.readerIndex() + 1,buf.writerIndex(),(byte)0xC0);
  if (index != -1) {
    ChannelBuffer result=ChannelBuffers.buffer(index + 1 - buf.readerIndex());
    while (buf.readerIndex() <= index) {
      int b=buf.readUnsignedByte();
      if (b == 0xDB) {
        int ext=buf.readUnsignedByte();
        if (ext == 0xDC) {
          result.writeByte(0xC0);
        }
 else         if (ext == 0xDD) {
          result.writeByte(0xDB);
        }
      }
 else {
        result.writeByte(b);
      }
    }
    return result;
  }
  return null;
}",0.5232774674115456
156043,"@Test public void testDecode() throws Exception {
  HuaShengFrameDecoder decoder=new HuaShengFrameDecoder();
  Assert.assertEquals(binary(""String_Node_Str""),decoder.decode(null,null,binary(""String_Node_Str"")));
  Assert.assertEquals(binary(""String_Node_Str""),decoder.decode(null,null,binary(""String_Node_Str"")));
}","@Test public void testDecode() throws Exception {
  HuaShengFrameDecoder decoder=new HuaShengFrameDecoder();
  Assert.assertEquals(binary(""String_Node_Str""),decoder.decode(null,null,binary(""String_Node_Str"")));
  Assert.assertEquals(binary(""String_Node_Str""),decoder.decode(null,null,binary(""String_Node_Str"")));
  Assert.assertEquals(binary(""String_Node_Str""),decoder.decode(null,null,binary(""String_Node_Str"")));
  Assert.assertEquals(binary(""String_Node_Str""),decoder.decode(null,null,binary(""String_Node_Str"")));
}",0.7548076923076923
156044,"public final void refresh(){
  if (dataManager != null) {
    try {
      geofencesLock.writeLock().lock();
      groupGeofencesLock.writeLock().lock();
      deviceGeofencesLock.writeLock().lock();
      try {
        geofences.clear();
        for (        Geofence geofence : dataManager.getGeofences()) {
          geofences.put(geofence.getId(),geofence);
        }
        userGeofences.clear();
        for (        GeofencePermission geofencePermission : dataManager.getGeofencePermissions()) {
          getUserGeofencesIds(geofencePermission.getUserId()).add(geofencePermission.getGeofenceId());
        }
        groupGeofences.clear();
        for (        GroupGeofence groupGeofence : dataManager.getGroupGeofences()) {
          getGroupGeofences(groupGeofence.getGroupId()).add(groupGeofence.getGeofenceId());
        }
        deviceGeofences.clear();
        deviceGeofencesWithGroups.clear();
        for (        DeviceGeofence deviceGeofence : dataManager.getDeviceGeofences()) {
          getDeviceGeofences(deviceGeofences,deviceGeofence.getDeviceId()).add(deviceGeofence.getGeofenceId());
          getDeviceGeofences(deviceGeofencesWithGroups,deviceGeofence.getDeviceId()).add(deviceGeofence.getGeofenceId());
        }
        for (        Device device : dataManager.getAllDevicesCached()) {
          long groupId=device.getGroupId();
          while (groupId != 0) {
            getDeviceGeofences(deviceGeofencesWithGroups,device.getId()).addAll(getGroupGeofences(groupId));
            groupId=dataManager.getGroupById(groupId).getGroupId();
          }
          List<Long> deviceGeofenceIds=device.getGeofenceIds();
          if (deviceGeofenceIds == null) {
            deviceGeofenceIds=new ArrayList<Long>();
          }
 else {
            deviceGeofenceIds.clear();
          }
          Position lastPosition=Context.getConnectionManager().getLastPosition(device.getId());
          if (lastPosition != null && deviceGeofencesWithGroups.containsKey(device.getId())) {
            for (            Long geofenceId : deviceGeofencesWithGroups.get(device.getId())) {
              if (getGeofence(geofenceId).getGeometry().containsPoint(lastPosition.getLatitude(),lastPosition.getLongitude())) {
                deviceGeofenceIds.add(geofenceId);
              }
            }
          }
          device.setGeofenceIds(deviceGeofenceIds);
        }
      }
  finally {
        geofencesLock.writeLock().unlock();
        groupGeofencesLock.writeLock().unlock();
        deviceGeofencesLock.writeLock().unlock();
      }
    }
 catch (    SQLException error) {
      Log.warning(error);
    }
  }
}","public final void refresh(){
  if (dataManager != null) {
    try {
      geofencesLock.writeLock().lock();
      groupGeofencesLock.writeLock().lock();
      deviceGeofencesLock.writeLock().lock();
      try {
        geofences.clear();
        for (        Geofence geofence : dataManager.getGeofences()) {
          geofences.put(geofence.getId(),geofence);
        }
        userGeofences.clear();
        for (        GeofencePermission geofencePermission : dataManager.getGeofencePermissions()) {
          getUserGeofencesIds(geofencePermission.getUserId()).add(geofencePermission.getGeofenceId());
        }
        groupGeofences.clear();
        for (        GroupGeofence groupGeofence : dataManager.getGroupGeofences()) {
          getGroupGeofences(groupGeofence.getGroupId()).add(groupGeofence.getGeofenceId());
        }
        deviceGeofences.clear();
        deviceGeofencesWithGroups.clear();
        for (        DeviceGeofence deviceGeofence : dataManager.getDeviceGeofences()) {
          getDeviceGeofences(deviceGeofences,deviceGeofence.getDeviceId()).add(deviceGeofence.getGeofenceId());
          getDeviceGeofences(deviceGeofencesWithGroups,deviceGeofence.getDeviceId()).add(deviceGeofence.getGeofenceId());
        }
        for (        Device device : dataManager.getAllDevicesCached()) {
          Group group=dataManager.getGroupById(device.getGroupId());
          while (group != null) {
            getDeviceGeofences(deviceGeofencesWithGroups,device.getId()).addAll(getGroupGeofences(group.getGroupId()));
            group=dataManager.getGroupById(group.getGroupId());
          }
          List<Long> deviceGeofenceIds=device.getGeofenceIds();
          if (deviceGeofenceIds == null) {
            deviceGeofenceIds=new ArrayList<>();
          }
 else {
            deviceGeofenceIds.clear();
          }
          Position lastPosition=Context.getConnectionManager().getLastPosition(device.getId());
          if (lastPosition != null && deviceGeofencesWithGroups.containsKey(device.getId())) {
            for (            Long geofenceId : deviceGeofencesWithGroups.get(device.getId())) {
              if (getGeofence(geofenceId).getGeometry().containsPoint(lastPosition.getLatitude(),lastPosition.getLongitude())) {
                deviceGeofenceIds.add(geofenceId);
              }
            }
          }
          device.setGeofenceIds(deviceGeofenceIds);
        }
      }
  finally {
        geofencesLock.writeLock().unlock();
        groupGeofencesLock.writeLock().unlock();
        deviceGeofencesLock.writeLock().unlock();
      }
    }
 catch (    SQLException error) {
      Log.warning(error);
    }
  }
}",0.9737686355916212
156045,"public List<Long> getCurrentDeviceGeofences(Position position){
  List<Long> result=new ArrayList<Long>();
  for (  Long geofenceId : getAllDeviceGeofences(position.getDeviceId())) {
    if (getGeofence(geofenceId).getGeometry().containsPoint(position.getLatitude(),position.getLongitude())) {
      result.add(geofenceId);
    }
  }
  return result;
}","public List<Long> getCurrentDeviceGeofences(Position position){
  List<Long> result=new ArrayList<>();
  for (  Long geofenceId : getAllDeviceGeofences(position.getDeviceId())) {
    if (getGeofence(geofenceId).getGeometry().containsPoint(position.getLatitude(),position.getLongitude())) {
      result.add(geofenceId);
    }
  }
  return result;
}",0.9942857142857144
156046,"public final void refresh(){
  if (dataManager != null) {
    try {
      geofencesLock.writeLock().lock();
      groupGeofencesLock.writeLock().lock();
      deviceGeofencesLock.writeLock().lock();
      try {
        geofences.clear();
        for (        Geofence geofence : dataManager.getGeofences()) {
          geofences.put(geofence.getId(),geofence);
        }
        userGeofences.clear();
        for (        GeofencePermission geofencePermission : dataManager.getGeofencePermissions()) {
          getUserGeofencesIds(geofencePermission.getUserId()).add(geofencePermission.getGeofenceId());
        }
        groupGeofences.clear();
        for (        GroupGeofence groupGeofence : dataManager.getGroupGeofences()) {
          getGroupGeofences(groupGeofence.getGroupId()).add(groupGeofence.getGeofenceId());
        }
        deviceGeofences.clear();
        deviceGeofencesWithGroups.clear();
        for (        DeviceGeofence deviceGeofence : dataManager.getDeviceGeofences()) {
          getDeviceGeofences(deviceGeofences,deviceGeofence.getDeviceId()).add(deviceGeofence.getGeofenceId());
          getDeviceGeofences(deviceGeofencesWithGroups,deviceGeofence.getDeviceId()).add(deviceGeofence.getGeofenceId());
        }
        for (        Device device : dataManager.getAllDevicesCached()) {
          long groupId=device.getGroupId();
          while (groupId != 0) {
            getDeviceGeofences(deviceGeofencesWithGroups,device.getId()).addAll(getGroupGeofences(groupId));
            groupId=dataManager.getGroupById(groupId).getGroupId();
          }
          List<Long> deviceGeofenceIds=device.getGeofenceIds();
          if (deviceGeofenceIds == null) {
            deviceGeofenceIds=new ArrayList<Long>();
          }
 else {
            deviceGeofenceIds.clear();
          }
          Position lastPosition=Context.getConnectionManager().getLastPosition(device.getId());
          if (lastPosition != null) {
            for (            Long geofenceId : deviceGeofencesWithGroups.get(device.getId())) {
              if (getGeofence(geofenceId).getGeometry().containsPoint(lastPosition.getLatitude(),lastPosition.getLongitude())) {
                deviceGeofenceIds.add(geofenceId);
              }
            }
          }
          device.setGeofenceIds(deviceGeofenceIds);
        }
      }
  finally {
        geofencesLock.writeLock().unlock();
        groupGeofencesLock.writeLock().unlock();
        deviceGeofencesLock.writeLock().unlock();
      }
    }
 catch (    SQLException error) {
      Log.warning(error);
    }
  }
}","public final void refresh(){
  if (dataManager != null) {
    try {
      geofencesLock.writeLock().lock();
      groupGeofencesLock.writeLock().lock();
      deviceGeofencesLock.writeLock().lock();
      try {
        geofences.clear();
        for (        Geofence geofence : dataManager.getGeofences()) {
          geofences.put(geofence.getId(),geofence);
        }
        userGeofences.clear();
        for (        GeofencePermission geofencePermission : dataManager.getGeofencePermissions()) {
          getUserGeofencesIds(geofencePermission.getUserId()).add(geofencePermission.getGeofenceId());
        }
        groupGeofences.clear();
        for (        GroupGeofence groupGeofence : dataManager.getGroupGeofences()) {
          getGroupGeofences(groupGeofence.getGroupId()).add(groupGeofence.getGeofenceId());
        }
        deviceGeofences.clear();
        deviceGeofencesWithGroups.clear();
        for (        DeviceGeofence deviceGeofence : dataManager.getDeviceGeofences()) {
          getDeviceGeofences(deviceGeofences,deviceGeofence.getDeviceId()).add(deviceGeofence.getGeofenceId());
          getDeviceGeofences(deviceGeofencesWithGroups,deviceGeofence.getDeviceId()).add(deviceGeofence.getGeofenceId());
        }
        for (        Device device : dataManager.getAllDevicesCached()) {
          long groupId=device.getGroupId();
          while (groupId != 0) {
            getDeviceGeofences(deviceGeofencesWithGroups,device.getId()).addAll(getGroupGeofences(groupId));
            groupId=dataManager.getGroupById(groupId).getGroupId();
          }
          List<Long> deviceGeofenceIds=device.getGeofenceIds();
          if (deviceGeofenceIds == null) {
            deviceGeofenceIds=new ArrayList<Long>();
          }
 else {
            deviceGeofenceIds.clear();
          }
          Position lastPosition=Context.getConnectionManager().getLastPosition(device.getId());
          if (lastPosition != null && deviceGeofencesWithGroups.containsKey(device.getId())) {
            for (            Long geofenceId : deviceGeofencesWithGroups.get(device.getId())) {
              if (getGeofence(geofenceId).getGeometry().containsPoint(lastPosition.getLatitude(),lastPosition.getLongitude())) {
                deviceGeofenceIds.add(geofenceId);
              }
            }
          }
          device.setGeofenceIds(deviceGeofenceIds);
        }
      }
  finally {
        geofencesLock.writeLock().unlock();
        groupGeofencesLock.writeLock().unlock();
        deviceGeofencesLock.writeLock().unlock();
      }
    }
 catch (    SQLException error) {
      Log.warning(error);
    }
  }
}",0.989065797045847
156047,"@Override protected Object decode(Channel channel,SocketAddress remoteAddress,Object msg) throws Exception {
  ChannelBuffer buf=(ChannelBuffer)msg;
  buf.skipBytes(2);
  buf.readShort();
  ChannelBuffer id=buf.readBytes(7);
  int command=buf.readUnsignedShort();
  ChannelBuffer response;
switch (command) {
case MSG_LOGIN:
    if (channel != null) {
      response=ChannelBuffers.wrappedBuffer(new byte[]{0x01});
      sendResponse(channel,remoteAddress,id,MSG_LOGIN_RESPONSE,response);
    }
  return null;
case MSG_HEARTBEAT:
if (channel != null) {
  response=ChannelBuffers.wrappedBuffer(new byte[]{0x01});
  sendResponse(channel,remoteAddress,id,MSG_HEARTBEAT,response);
}
return null;
case MSG_SERVER:
if (channel != null) {
response=ChannelBuffers.copiedBuffer(getMeiligaoServer(channel),StandardCharsets.US_ASCII);
sendResponse(channel,remoteAddress,id,MSG_SERVER,response);
}
return null;
case MSG_POSITION:
case MSG_POSITION_LOGGED:
case MSG_ALARM:
case MSG_RFID:
break;
default :
return null;
}
Position position=new Position();
position.setProtocol(getProtocolName());
if (command == MSG_ALARM) {
position.set(Position.KEY_ALARM,buf.readUnsignedByte());
}
 else if (command == MSG_POSITION_LOGGED) {
buf.skipBytes(6);
}
if (!identify(id,channel,remoteAddress)) {
return null;
}
position.setDeviceId(getDeviceId());
if (command == MSG_RFID) {
for (int i=0; i < 15; i++) {
long rfid=buf.readUnsignedInt();
if (rfid != 0) {
String card=String.format(""String_Node_Str"",rfid);
position.set(""String_Node_Str"" + (i + 1),card);
position.set(Position.KEY_RFID,card);
}
}
}
Pattern pattern;
if (command == MSG_RFID) {
pattern=PATTERN_RFID;
}
 else {
pattern=PATTERN;
}
Parser parser=new Parser(pattern,buf.toString(buf.readerIndex(),buf.readableBytes() - 4,StandardCharsets.US_ASCII));
if (!parser.matches()) {
return null;
}
if (command == MSG_RFID) {
DateBuilder dateBuilder=new DateBuilder().setTime(parser.nextInt(),parser.nextInt(),parser.nextInt()).setDateReverse(parser.nextInt(),parser.nextInt(),parser.nextInt());
position.setTime(dateBuilder.getDate());
position.setValid(true);
position.setLatitude(parser.nextCoordinate());
position.setLongitude(parser.nextCoordinate());
}
 else {
DateBuilder dateBuilder=new DateBuilder().setTime(parser.nextInt(),parser.nextInt(),parser.nextInt());
if (parser.hasNext()) {
dateBuilder.setMillis(parser.nextInt());
}
position.setValid(parser.next().equals(""String_Node_Str""));
position.setLatitude(parser.nextCoordinate());
position.setLongitude(parser.nextCoordinate());
if (parser.hasNext()) {
position.setSpeed(parser.nextDouble());
}
if (parser.hasNext()) {
position.setCourse(parser.nextDouble());
}
dateBuilder.setDateReverse(parser.nextInt(),parser.nextInt(),parser.nextInt());
position.setTime(dateBuilder.getDate());
position.set(Position.KEY_HDOP,parser.next());
if (parser.hasNext()) {
position.setAltitude(parser.nextDouble());
}
position.set(Position.KEY_STATUS,parser.next());
for (int i=1; i <= 8; i++) {
if (parser.hasNext()) {
position.set(Position.PREFIX_ADC + i,parser.nextInt(16));
}
}
if (parser.hasNext()) {
position.set(Position.KEY_GSM,parser.nextInt(16));
}
if (parser.hasNext()) {
position.set(Position.KEY_ODOMETER,parser.nextInt(16));
}
if (parser.hasNext()) {
position.set(Position.KEY_ODOMETER,parser.nextInt(16));
}
if (parser.hasNext()) {
position.set(Position.KEY_RFID,parser.nextInt(16));
}
}
return position;
}","@Override protected Object decode(Channel channel,SocketAddress remoteAddress,Object msg) throws Exception {
  ChannelBuffer buf=(ChannelBuffer)msg;
  buf.skipBytes(2);
  buf.readShort();
  ChannelBuffer id=buf.readBytes(7);
  int command=buf.readUnsignedShort();
  ChannelBuffer response;
switch (command) {
case MSG_LOGIN:
    if (channel != null) {
      response=ChannelBuffers.wrappedBuffer(new byte[]{0x01});
      sendResponse(channel,remoteAddress,id,MSG_LOGIN_RESPONSE,response);
    }
  return null;
case MSG_HEARTBEAT:
if (channel != null) {
  response=ChannelBuffers.wrappedBuffer(new byte[]{0x01});
  sendResponse(channel,remoteAddress,id,MSG_HEARTBEAT,response);
}
return null;
case MSG_SERVER:
if (channel != null) {
response=ChannelBuffers.copiedBuffer(getMeiligaoServer(channel),StandardCharsets.US_ASCII);
sendResponse(channel,remoteAddress,id,MSG_SERVER,response);
}
return null;
case MSG_POSITION:
case MSG_POSITION_LOGGED:
case MSG_ALARM:
case MSG_RFID:
break;
default :
return null;
}
Position position=new Position();
position.setProtocol(getProtocolName());
if (command == MSG_ALARM) {
position.set(Position.KEY_ALARM,buf.readUnsignedByte());
}
 else if (command == MSG_POSITION_LOGGED) {
buf.skipBytes(6);
}
if (!identify(id,channel,remoteAddress)) {
return null;
}
position.setDeviceId(getDeviceId());
if (command == MSG_RFID) {
for (int i=0; i < 15; i++) {
long rfid=buf.readUnsignedInt();
if (rfid != 0) {
String card=String.format(""String_Node_Str"",rfid);
position.set(""String_Node_Str"" + (i + 1),card);
position.set(Position.KEY_RFID,card);
}
}
}
Pattern pattern;
if (command == MSG_RFID) {
pattern=PATTERN_RFID;
}
 else {
pattern=PATTERN;
}
Parser parser=new Parser(pattern,buf.toString(buf.readerIndex(),buf.readableBytes() - 4,StandardCharsets.US_ASCII));
if (!parser.matches()) {
return null;
}
if (command == MSG_RFID) {
DateBuilder dateBuilder=new DateBuilder().setTime(parser.nextInt(),parser.nextInt(),parser.nextInt()).setDateReverse(parser.nextInt(),parser.nextInt(),parser.nextInt());
position.setTime(dateBuilder.getDate());
position.setValid(true);
position.setLatitude(parser.nextCoordinate());
position.setLongitude(parser.nextCoordinate());
}
 else {
DateBuilder dateBuilder=new DateBuilder().setTime(parser.nextInt(),parser.nextInt(),parser.nextInt());
if (parser.hasNext()) {
dateBuilder.setMillis(parser.nextInt());
}
position.setValid(parser.next().equals(""String_Node_Str""));
position.setLatitude(parser.nextCoordinate());
position.setLongitude(parser.nextCoordinate());
if (parser.hasNext()) {
position.setSpeed(parser.nextDouble());
}
if (parser.hasNext()) {
position.setCourse(parser.nextDouble());
}
dateBuilder.setDateReverse(parser.nextInt(),parser.nextInt(),parser.nextInt());
position.setTime(dateBuilder.getDate());
position.set(Position.KEY_HDOP,parser.next());
if (parser.hasNext()) {
position.setAltitude(parser.nextDouble());
}
position.set(Position.KEY_STATUS,parser.next());
for (int i=1; i <= 8; i++) {
if (parser.hasNext()) {
position.set(Position.PREFIX_ADC + i,parser.nextInt(16));
}
}
if (parser.hasNext()) {
position.set(Position.KEY_GSM,parser.nextInt(16));
}
if (parser.hasNext()) {
position.set(Position.KEY_ODOMETER,parser.nextLong(16));
}
if (parser.hasNext()) {
position.set(Position.KEY_ODOMETER,parser.nextLong(16));
}
if (parser.hasNext()) {
position.set(Position.KEY_RFID,parser.nextInt(16));
}
}
return position;
}",0.9979387514723204
156048,"@Test public void testDecode() throws Exception {
  MeiligaoProtocolDecoder decoder=new MeiligaoProtocolDecoder(new MeiligaoProtocol());
  verifyPosition(decoder,binary(""String_Node_Str""));
  verifyPosition(decoder,binary(""String_Node_Str""));
  verifyNothing(decoder,binary(""String_Node_Str""));
  verifyPosition(decoder,binary(""String_Node_Str""),position(""String_Node_Str"",true,10.63280,-61.35947));
  verifyPosition(decoder,binary(""String_Node_Str""),position(""String_Node_Str"",true,24.00000,121.00000));
  verifyPosition(decoder,binary(""String_Node_Str""));
  verifyNothing(decoder,binary(""String_Node_Str""));
  verifyNothing(decoder,binary(""String_Node_Str""));
  verifyPosition(decoder,binary(""String_Node_Str""));
  verifyPosition(decoder,binary(""String_Node_Str""));
  verifyPosition(decoder,binary(""String_Node_Str""));
  verifyPosition(decoder,binary(""String_Node_Str""));
  verifyPosition(decoder,binary(""String_Node_Str""));
  verifyPosition(decoder,binary(""String_Node_Str""));
  verifyPosition(decoder,binary(""String_Node_Str""));
  verifyPosition(decoder,binary(""String_Node_Str""));
  verifyPosition(decoder,binary(""String_Node_Str""));
  verifyPosition(decoder,binary(""String_Node_Str""));
  verifyPosition(decoder,binary(""String_Node_Str""));
  verifyPosition(decoder,binary(""String_Node_Str""));
  verifyNothing(decoder,binary(""String_Node_Str""));
  verifyPosition(decoder,binary(""String_Node_Str""));
  verifyPosition(decoder,binary(""String_Node_Str""));
  verifyPosition(decoder,binary(""String_Node_Str""));
  verifyPosition(decoder,binary(""String_Node_Str""));
  verifyPosition(decoder,binary(""String_Node_Str""));
}","@Test public void testDecode() throws Exception {
  MeiligaoProtocolDecoder decoder=new MeiligaoProtocolDecoder(new MeiligaoProtocol());
  verifyPosition(decoder,binary(""String_Node_Str""));
  verifyPosition(decoder,binary(""String_Node_Str""));
  verifyPosition(decoder,binary(""String_Node_Str""));
  verifyNothing(decoder,binary(""String_Node_Str""));
  verifyPosition(decoder,binary(""String_Node_Str""),position(""String_Node_Str"",true,10.63280,-61.35947));
  verifyPosition(decoder,binary(""String_Node_Str""),position(""String_Node_Str"",true,24.00000,121.00000));
  verifyPosition(decoder,binary(""String_Node_Str""));
  verifyNothing(decoder,binary(""String_Node_Str""));
  verifyNothing(decoder,binary(""String_Node_Str""));
  verifyPosition(decoder,binary(""String_Node_Str""));
  verifyPosition(decoder,binary(""String_Node_Str""));
  verifyPosition(decoder,binary(""String_Node_Str""));
  verifyPosition(decoder,binary(""String_Node_Str""));
  verifyPosition(decoder,binary(""String_Node_Str""));
  verifyPosition(decoder,binary(""String_Node_Str""));
  verifyPosition(decoder,binary(""String_Node_Str""));
  verifyPosition(decoder,binary(""String_Node_Str""));
  verifyPosition(decoder,binary(""String_Node_Str""));
  verifyPosition(decoder,binary(""String_Node_Str""));
  verifyPosition(decoder,binary(""String_Node_Str""));
  verifyPosition(decoder,binary(""String_Node_Str""));
  verifyNothing(decoder,binary(""String_Node_Str""));
  verifyPosition(decoder,binary(""String_Node_Str""));
  verifyAttributes(decoder,binary(""String_Node_Str""));
  verifyPosition(decoder,binary(""String_Node_Str""));
  verifyPosition(decoder,binary(""String_Node_Str""));
  verifyPosition(decoder,binary(""String_Node_Str""));
  verifyPosition(decoder,binary(""String_Node_Str""));
}",0.9676646706586828
156049,"@Override protected void addSpecificHandlers(ChannelPipeline pipeline){
  pipeline.addLast(""String_Node_Str"",new StringEncoder());
  pipeline.addLast(""String_Node_Str"",new StringDecoder());
  pipeline.addLast(""String_Node_Str"",new LdplProtocolDecoder(LdplProtocol.this));
}","@Override protected void addSpecificHandlers(ChannelPipeline pipeline){
  pipeline.addLast(""String_Node_Str"",new LineBasedFrameDecoder(1024));
  pipeline.addLast(""String_Node_Str"",new StringEncoder());
  pipeline.addLast(""String_Node_Str"",new StringDecoder());
  pipeline.addLast(""String_Node_Str"",new LdplProtocolDecoder(LdplProtocol.this));
}",0.8849270664505673
156050,"@Override public void initTrackerServers(List<TrackerServer> serverList){
  serverList.add(new TrackerServer(new ConnectionlessBootstrap(),this.getName()){
    @Override protected void addSpecificHandlers(    ChannelPipeline pipeline){
      pipeline.addLast(""String_Node_Str"",new StringEncoder());
      pipeline.addLast(""String_Node_Str"",new StringDecoder());
      pipeline.addLast(""String_Node_Str"",new LdplProtocolDecoder(LdplProtocol.this));
    }
  }
);
}","@Override public void initTrackerServers(List<TrackerServer> serverList){
  serverList.add(new TrackerServer(new ServerBootstrap(),this.getName()){
    @Override protected void addSpecificHandlers(    ChannelPipeline pipeline){
      pipeline.addLast(""String_Node_Str"",new LineBasedFrameDecoder(1024));
      pipeline.addLast(""String_Node_Str"",new StringEncoder());
      pipeline.addLast(""String_Node_Str"",new StringDecoder());
      pipeline.addLast(""String_Node_Str"",new LdplProtocolDecoder(LdplProtocol.this));
    }
  }
);
}",0.9041372351160444
156051,"@Override protected Object decode(Channel channel,SocketAddress remoteAddress,Object msg) throws Exception {
  Parser parser=new Parser(PATTERN,(String)msg);
  if (!parser.matches()) {
    return null;
  }
  Position position=new Position();
  position.setProtocol(getProtocolName());
  position.set(Position.KEY_TYPE,parser.nextInt());
  if (!identify(parser.next(),channel,remoteAddress)) {
    return null;
  }
  position.setDeviceId(getDeviceId());
  DateBuilder dateBuilder=new DateBuilder().setDateReverse(parser.nextInt(),parser.nextInt(),parser.nextInt()).setTime(parser.nextInt(),parser.nextInt(),parser.nextInt());
  position.setTime(dateBuilder.getDate());
  if (""String_Node_Str"".equals(parser.next())) {
    position.setValid(true);
  }
 else {
    position.setValid(false);
  }
  position.setLatitude(parser.nextCoordinate(CoordinateFormat.DEG_MIN_MIN_HEM));
  position.setLongitude(parser.nextCoordinate(CoordinateFormat.DEG_MIN_MIN_HEM));
  position.setSpeed(parser.nextDouble());
  position.setCourse(parser.nextDouble());
  position.set(Position.KEY_SATELLITES,parser.nextInt());
  position.set(Position.KEY_GSM,parser.nextInt());
  parser.next();
  position.set(Position.KEY_POWER,parser.nextInt());
  position.set(Position.KEY_BATTERY,parser.nextDouble());
  position.set(Position.KEY_ALARM,parser.nextInt());
  parser.nextInt();
  parser.nextInt();
  position.set(Position.KEY_IGNITION,parser.nextInt());
  position.set(Position.KEY_OUTPUT,parser.nextInt());
  position.set(Position.PREFIX_ADC + 1,parser.nextInt());
  position.set(Position.PREFIX_ADC + 2,parser.nextInt());
  position.set(Position.KEY_VERSION,parser.next());
  position.set(Position.KEY_ARCHIVE,parser.next().equals(""String_Node_Str""));
  parser.next();
  return position;
}","@Override protected Object decode(Channel channel,SocketAddress remoteAddress,Object msg) throws Exception {
  Parser parser=new Parser(PATTERN,(String)msg);
  if (!parser.matches()) {
    return null;
  }
  Position position=new Position();
  position.setProtocol(getProtocolName());
  position.set(Position.KEY_TYPE,parser.nextInt());
  if (!identify(parser.next(),channel,remoteAddress)) {
    return null;
  }
  position.setDeviceId(getDeviceId());
  DateBuilder dateBuilder=new DateBuilder().setDateReverse(parser.nextInt(),parser.nextInt(),parser.nextInt()).setTime(parser.nextInt(),parser.nextInt(),parser.nextInt());
  position.setTime(dateBuilder.getDate());
  position.setValid(parser.next().equals(""String_Node_Str""));
  position.setLatitude(parser.nextCoordinate(CoordinateFormat.DEG_MIN_MIN_HEM));
  position.setLongitude(parser.nextCoordinate(CoordinateFormat.DEG_MIN_MIN_HEM));
  position.setSpeed(parser.nextDouble());
  position.setCourse(parser.nextDouble());
  position.set(Position.KEY_SATELLITES,parser.nextInt());
  position.set(Position.KEY_GSM,parser.nextInt());
  parser.next();
  position.set(Position.KEY_POWER,parser.nextInt());
  position.set(Position.KEY_BATTERY,parser.nextDouble());
  position.set(Position.KEY_ALARM,parser.nextInt());
  parser.nextInt();
  parser.nextInt();
  position.set(Position.KEY_IGNITION,parser.nextInt());
  position.set(Position.KEY_OUTPUT,parser.nextInt());
  position.set(Position.PREFIX_ADC + 1,parser.nextInt());
  position.set(Position.PREFIX_ADC + 2,parser.nextInt());
  position.set(Position.KEY_VERSION,parser.next());
  position.set(Position.KEY_ARCHIVE,parser.next().equals(""String_Node_Str""));
  parser.next();
  return position;
}",0.9584295612009238
156052,"@Test public void testCheckPattern(){
  assertEquals(""String_Node_Str"",PatternUtil.checkPattern(""String_Node_Str"",""String_Node_Str"").pattern);
}","@Test public void testCheckPattern(){
  assertEquals(""String_Node_Str"",PatternUtil.checkPattern(""String_Node_Str"",""String_Node_Str"").getPattern());
}",0.9761092150170648
156053,"private Position decodePosition(Parser parser,Date time){
  Position position=new Position();
  position.setProtocol(getProtocolName());
  position.setDeviceId(getDeviceId());
  if (time != null) {
    position.setTime(time);
  }
  position.set(Event.KEY_EVENT,parser.next());
  position.setValid(parser.next().equals(""String_Node_Str""));
  position.set(Event.KEY_SATELLITES,parser.next());
  position.setLatitude(parser.nextCoordinate(Parser.CoordinateFormat.HEM_DEG));
  position.setLongitude(parser.nextCoordinate(Parser.CoordinateFormat.HEM_DEG));
  position.setSpeed(parser.nextDouble());
  position.setCourse(parser.nextDouble());
  position.setAltitude(parser.nextDouble());
  position.set(Event.KEY_HDOP,parser.next());
  if (parser.hasNext(4)) {
    position.set(Event.KEY_MCC,parser.nextInt());
    position.set(Event.KEY_MNC,parser.nextInt());
    position.set(Event.KEY_LAC,parser.nextInt(16));
    position.set(Event.KEY_CID,parser.nextInt(16));
  }
  position.set(Event.KEY_ODOMETER,parser.next());
  position.set(Event.KEY_POWER,parser.next());
  position.set(Event.KEY_BATTERY,parser.next());
  String status=parser.next();
  if (status != null) {
    position.set(Event.KEY_IGNITION,BitUtil.check(Integer.parseInt(status,16),13));
    position.set(Event.KEY_STATUS,status);
  }
  if (parser.hasNext()) {
    position.set(""String_Node_Str"",parser.next());
  }
  return position;
}","private Position decodePosition(Parser parser,Date time){
  Position position=new Position();
  position.setProtocol(getProtocolName());
  position.setDeviceId(getDeviceId());
  if (time != null) {
    position.setTime(time);
  }
  position.set(Event.KEY_EVENT,parser.next());
  position.setValid(parser.next().equals(""String_Node_Str""));
  position.set(Event.KEY_SATELLITES,parser.next());
  position.setLatitude(parser.nextCoordinate(Parser.CoordinateFormat.HEM_DEG));
  position.setLongitude(parser.nextCoordinate(Parser.CoordinateFormat.HEM_DEG));
  position.setSpeed(UnitsConverter.knotsFromKph(parser.nextDouble()));
  position.setCourse(parser.nextDouble());
  position.setAltitude(parser.nextDouble());
  position.set(Event.KEY_HDOP,parser.next());
  if (parser.hasNext(4)) {
    position.set(Event.KEY_MCC,parser.nextInt());
    position.set(Event.KEY_MNC,parser.nextInt());
    position.set(Event.KEY_LAC,parser.nextInt(16));
    position.set(Event.KEY_CID,parser.nextInt(16));
  }
  position.set(Event.KEY_ODOMETER,parser.next());
  position.set(Event.KEY_POWER,parser.next());
  position.set(Event.KEY_BATTERY,parser.next());
  String status=parser.next();
  if (status != null) {
    position.set(Event.KEY_IGNITION,BitUtil.check(Integer.parseInt(status,16),13));
    position.set(Event.KEY_STATUS,status);
  }
  if (parser.hasNext()) {
    position.set(""String_Node_Str"",parser.next());
  }
  return position;
}",0.9897199574618928
156054,"@Override public void filter(ContainerRequestContext request,ContainerResponseContext response) throws IOException {
  if (!response.getHeaders().containsKey(HttpHeaders.Names.ACCESS_CONTROL_ALLOW_HEADERS)) {
    response.getHeaders().add(HttpHeaders.Names.ACCESS_CONTROL_ALLOW_HEADERS,HEADERS_ALL);
  }
  if (!response.getHeaders().containsKey(HttpHeaders.Names.ACCESS_CONTROL_ALLOW_CREDENTIALS)) {
    response.getHeaders().add(HttpHeaders.Names.ACCESS_CONTROL_ALLOW_CREDENTIALS,true);
  }
  if (!response.getHeaders().containsKey(HttpHeaders.Names.ACCESS_CONTROL_ALLOW_METHODS)) {
    response.getHeaders().add(HttpHeaders.Names.ACCESS_CONTROL_ALLOW_METHODS,METHODS_ALL);
  }
  if (!response.getHeaders().containsKey(HttpHeaders.Names.ACCESS_CONTROL_ALLOW_ORIGIN)) {
    String origin=request.getHeaderString(HttpHeaders.Names.ORIGIN);
    String allowed=Context.getConfig().getString(""String_Node_Str"");
    if (allowed == null || origin == null) {
      response.getHeaders().add(HttpHeaders.Names.ACCESS_CONTROL_ALLOW_ORIGIN,ORIGIN_ALL);
    }
 else     if (allowed.equals(ORIGIN_ALL) || allowed.contains(origin)) {
      response.getHeaders().add(HttpHeaders.Names.ACCESS_CONTROL_ALLOW_ORIGIN,origin);
    }
  }
}","@Override public void filter(ContainerRequestContext request,ContainerResponseContext response) throws IOException {
  if (!response.getHeaders().containsKey(HttpHeaders.Names.ACCESS_CONTROL_ALLOW_HEADERS)) {
    response.getHeaders().add(HttpHeaders.Names.ACCESS_CONTROL_ALLOW_HEADERS,HEADERS_ALL);
  }
  if (!response.getHeaders().containsKey(HttpHeaders.Names.ACCESS_CONTROL_ALLOW_CREDENTIALS)) {
    response.getHeaders().add(HttpHeaders.Names.ACCESS_CONTROL_ALLOW_CREDENTIALS,true);
  }
  if (!response.getHeaders().containsKey(HttpHeaders.Names.ACCESS_CONTROL_ALLOW_METHODS)) {
    response.getHeaders().add(HttpHeaders.Names.ACCESS_CONTROL_ALLOW_METHODS,METHODS_ALL);
  }
  if (!response.getHeaders().containsKey(HttpHeaders.Names.ACCESS_CONTROL_ALLOW_ORIGIN)) {
    String origin=request.getHeaderString(HttpHeaders.Names.ORIGIN);
    String allowed=Context.getConfig().getString(""String_Node_Str"");
    if (origin == null) {
      response.getHeaders().add(HttpHeaders.Names.ACCESS_CONTROL_ALLOW_ORIGIN,ORIGIN_ALL);
    }
 else     if (allowed == null || allowed.equals(ORIGIN_ALL) || allowed.contains(origin)) {
      response.getHeaders().add(HttpHeaders.Names.ACCESS_CONTROL_ALLOW_ORIGIN,origin);
    }
  }
}",0.8885245901639345
156055,"@Override public void filter(ContainerRequestContext requestContext){
  if (requestContext.getMethod().equals(""String_Node_Str"")) {
    throw new WebApplicationException(Response.status(Response.Status.OK).build());
  }
  SecurityContext securityContext=null;
  String authHeader=requestContext.getHeaderString(AUTHORIZATION_HEADER);
  if (authHeader != null) {
    try {
      String[] auth=decodeBasicAuth(authHeader);
      User user=Context.getDataManager().login(auth[0],auth[1]);
      if (user != null) {
        securityContext=new UserSecurityContext(new UserPrincipal(user.getId()));
      }
    }
 catch (    SQLException e) {
      throw new WebApplicationException(e);
    }
  }
 else   if (request.getSession() != null) {
    Long userId=(Long)request.getSession().getAttribute(SessionResource.USER_ID_KEY);
    if (userId != null) {
      securityContext=new UserSecurityContext(new UserPrincipal(userId));
    }
  }
  if (securityContext != null) {
    requestContext.setSecurityContext(securityContext);
  }
 else {
    Method method=resourceInfo.getResourceMethod();
    if (!method.isAnnotationPresent(PermitAll.class)) {
      throw new WebApplicationException(Response.status(Response.Status.UNAUTHORIZED).header(WWW_AUTHENTICATE,BASIC_REALM).build());
    }
  }
}","@Override public void filter(ContainerRequestContext requestContext){
  if (requestContext.getMethod().equals(""String_Node_Str"")) {
    return;
  }
  SecurityContext securityContext=null;
  String authHeader=requestContext.getHeaderString(AUTHORIZATION_HEADER);
  if (authHeader != null) {
    try {
      String[] auth=decodeBasicAuth(authHeader);
      User user=Context.getDataManager().login(auth[0],auth[1]);
      if (user != null) {
        securityContext=new UserSecurityContext(new UserPrincipal(user.getId()));
      }
    }
 catch (    SQLException e) {
      throw new WebApplicationException(e);
    }
  }
 else   if (request.getSession() != null) {
    Long userId=(Long)request.getSession().getAttribute(SessionResource.USER_ID_KEY);
    if (userId != null) {
      securityContext=new UserSecurityContext(new UserPrincipal(userId));
    }
  }
  if (securityContext != null) {
    requestContext.setSecurityContext(securityContext);
  }
 else {
    Method method=resourceInfo.getResourceMethod();
    if (!method.isAnnotationPresent(PermitAll.class)) {
      throw new WebApplicationException(Response.status(Response.Status.UNAUTHORIZED).header(WWW_AUTHENTICATE,BASIC_REALM).build());
    }
  }
}",0.966373098478783
156056,"private Item findNearest(Item current,Item search,int depth){
  int direction=comparators.get(depth % 2).compare(search,current);
  Item next, other;
  if (direction < 0) {
    next=current.left;
    other=current.right;
  }
 else {
    next=current.right;
    other=current.left;
  }
  Item best=current;
  if (next != null) {
    best=findNearest(next,search,depth + 1);
  }
  if (current.squaredDistance(search) < best.squaredDistance(search)) {
    best=current;
  }
  if (other != null) {
    if (current.axisSquaredDistance(search,depth % 2) < best.squaredDistance(search)) {
      Item possibleBest=findNearest(other,search,depth + 1);
      if (possibleBest.squaredDistance(search) < best.squaredDistance(search)) {
        best=possibleBest;
      }
    }
  }
  return best;
}","private Item findNearest(Item current,Item search,int depth){
  int direction=comparators.get(depth % 2).compare(search,current);
  Item next, other;
  if (direction < 0) {
    next=current.left;
    other=current.right;
  }
 else {
    next=current.right;
    other=current.left;
  }
  Item best=current;
  if (next != null) {
    best=findNearest(next,search,depth + 1);
  }
  if (current.squaredDistance(search) < best.squaredDistance(search)) {
    best=current;
  }
  if (other != null && current.axisSquaredDistance(search,depth % 2) < best.squaredDistance(search)) {
    Item possibleBest=findNearest(other,search,depth + 1);
    if (possibleBest.squaredDistance(search) < best.squaredDistance(search)) {
      best=possibleBest;
    }
  }
  return best;
}",0.9638242894056848
156057,"private Item findNearest(Item current,Item search,int depth){
  int direction=comparators.get(depth % 2).compare(search,current);
  Item next, other;
  if (direction < 0) {
    next=current.left;
    other=current.right;
  }
 else {
    next=current.right;
    other=current.left;
  }
  Item best=current;
  if (next != null) {
    findNearest(next,search,depth + 1);
  }
  if (current.squaredDistance(search) < best.squaredDistance(search)) {
    best=current;
  }
  if (other != null) {
    if (current.axisSquaredDistance(search,depth % 2) < best.squaredDistance(search)) {
      Item possibleBest=findNearest(other,search,depth + 1);
      if (possibleBest.squaredDistance(search) < best.squaredDistance(search)) {
        best=possibleBest;
      }
    }
  }
  return best;
}","private Item findNearest(Item current,Item search,int depth){
  int direction=comparators.get(depth % 2).compare(search,current);
  Item next, other;
  if (direction < 0) {
    next=current.left;
    other=current.right;
  }
 else {
    next=current.right;
    other=current.left;
  }
  Item best=current;
  if (next != null) {
    best=findNearest(next,search,depth + 1);
  }
  if (current.squaredDistance(search) < best.squaredDistance(search)) {
    best=current;
  }
  if (other != null) {
    if (current.axisSquaredDistance(search,depth % 2) < best.squaredDistance(search)) {
      Item possibleBest=findNearest(other,search,depth + 1);
      if (possibleBest.squaredDistance(search) < best.squaredDistance(search)) {
        best=possibleBest;
      }
    }
  }
  return best;
}",0.9968051118210862
156058,"private void initApi(){
  ServletContextHandler servletHandler=new ServletContextHandler(ServletContextHandler.SESSIONS);
  servletHandler.setContextPath(""String_Node_Str"");
  servletHandler.getSessionHandler().setSessionManager(sessionManager);
  servletHandler.addServlet(new ServletHolder(new AsyncSocketServlet()),""String_Node_Str"");
  ResourceConfig resourceConfig=new ResourceConfig();
  resourceConfig.register(ObjectMapperProvider.class);
  resourceConfig.register(ResourceErrorHandler.class);
  resourceConfig.register(SecurityRequestFilter.class);
  resourceConfig.register(CorsResponseFilter.class);
  resourceConfig.registerClasses(ServerResource.class,SessionResource.class,CommandResource.class,GroupPermissionResource.class,DevicePermissionResource.class,UserResource.class,GroupResource.class,DeviceResource.class,PositionResource.class);
  servletHandler.addServlet(new ServletHolder(new ServletContainer(resourceConfig)),""String_Node_Str"");
  handlers.addHandler(servletHandler);
}","private void initApi(){
  ServletContextHandler servletHandler=new ServletContextHandler(ServletContextHandler.SESSIONS);
  servletHandler.setContextPath(""String_Node_Str"");
  servletHandler.getSessionHandler().setSessionManager(sessionManager);
  servletHandler.addServlet(new ServletHolder(new AsyncSocketServlet()),""String_Node_Str"");
  ResourceConfig resourceConfig=new ResourceConfig();
  resourceConfig.register(ObjectMapperProvider.class);
  resourceConfig.register(JacksonFeature.class);
  resourceConfig.register(ResourceErrorHandler.class);
  resourceConfig.register(SecurityRequestFilter.class);
  resourceConfig.register(CorsResponseFilter.class);
  resourceConfig.registerClasses(ServerResource.class,SessionResource.class,CommandResource.class,GroupPermissionResource.class,DevicePermissionResource.class,UserResource.class,GroupResource.class,DeviceResource.class,PositionResource.class);
  servletHandler.addServlet(new ServletHolder(new ServletContainer(resourceConfig)),""String_Node_Str"");
  handlers.addHandler(servletHandler);
}",0.9760625305324866
156059,"private Item findNearest(Item current,Item search,int depth){
  int direction=comparators.get(depth % 2).compare(search,current);
  Item next=(direction < 0) ? current.left : current.right;
  Item other=(direction < 0) ? current.right : current.left;
  Item best=(next == null) ? current : findNearest(next,search,depth + 1);
  if (current.squaredDistance(search) < best.squaredDistance(search)) {
    best=current;
  }
  if (other != null) {
    if (current.axisSquaredDistance(search,depth % 2) < best.squaredDistance(search)) {
      Item possibleBest=findNearest(other,search,depth + 1);
      if (possibleBest.squaredDistance(search) < best.squaredDistance(search)) {
        best=possibleBest;
      }
    }
  }
  return best;
}","private Item findNearest(Item current,Item search,int depth){
  int direction=comparators.get(depth % 2).compare(search,current);
  Item next, other;
  if (direction < 0) {
    next=current.left;
    other=current.right;
  }
 else {
    next=current.right;
    other=current.left;
  }
  Item best=current;
  if (next != null) {
    findNearest(next,search,depth + 1);
  }
  if (current.squaredDistance(search) < best.squaredDistance(search)) {
    best=current;
  }
  if (other != null) {
    if (current.axisSquaredDistance(search,depth % 2) < best.squaredDistance(search)) {
      Item possibleBest=findNearest(other,search,depth + 1);
      if (possibleBest.squaredDistance(search) < best.squaredDistance(search)) {
        best=possibleBest;
      }
    }
  }
  return best;
}",0.8322324966974901
156060,"@Override protected Object decode(Channel channel,SocketAddress remoteAddress,Object msg) throws Exception {
  String xml=(String)msg;
  String id=getAttribute(xml,""String_Node_Str"");
  String data=getAttribute(xml,""String_Node_Str"");
  if (id != null && data != null) {
    if (!identify(id,channel,remoteAddress)) {
      return null;
    }
    Parser parser=new Parser(PATTERN,data);
    if (!parser.matches()) {
      return null;
    }
    Position position=new Position();
    position.setProtocol(getProtocolName());
    position.setDeviceId(getDeviceId());
    position.set(Event.KEY_STATUS,parser.nextInt());
    position.setValid(parser.next().equals(""String_Node_Str""));
    DateBuilder dateBuilder=new DateBuilder().setDateReverse(parser.nextInt(),parser.nextInt(),parser.nextInt()).setTime(parser.nextInt(),parser.nextInt(),parser.nextInt());
    position.setTime(dateBuilder.getDate());
    position.setLatitude(parser.nextCoordinate());
    position.setLongitude(parser.nextCoordinate());
    position.setSpeed(UnitsConverter.knotsFromKph(parser.nextDouble()));
    position.setCourse(parser.nextDouble());
    position.set(Event.KEY_INPUT,parser.nextInt(2));
    position.set(Event.KEY_POWER,parser.nextDouble() / 10);
    position.set(Event.PREFIX_TEMP + 1,parser.nextInt());
    position.set(Event.KEY_FUEL,parser.nextInt());
    position.set(Event.PREFIX_ADC + 1,parser.nextInt());
    position.set(Event.PREFIX_ADC + 2,parser.nextInt());
    position.set(Event.KEY_OUTPUT,parser.nextInt(2));
    position.set(Event.KEY_ODOMETER,parser.nextInt());
    position.set(""String_Node_Str"",parser.nextInt());
    return position;
  }
  return null;
}","@Override protected Object decode(Channel channel,SocketAddress remoteAddress,Object msg) throws Exception {
  String xml=(String)msg;
  String id=getAttribute(xml,""String_Node_Str"");
  String data=getAttribute(xml,""String_Node_Str"");
  if (id != null && data != null) {
    if (!identify(id,channel,remoteAddress)) {
      return null;
    }
    Parser parser=new Parser(PATTERN,data);
    if (!parser.matches()) {
      return null;
    }
    Position position=new Position();
    position.setProtocol(getProtocolName());
    position.setDeviceId(getDeviceId());
    position.set(Event.KEY_STATUS,parser.nextInt());
    position.setValid(parser.next().equals(""String_Node_Str""));
    DateBuilder dateBuilder=new DateBuilder().setDateReverse(parser.nextInt(),parser.nextInt(),parser.nextInt()).setTime(parser.nextInt(),parser.nextInt(),parser.nextInt());
    position.setTime(dateBuilder.getDate());
    position.setLatitude(parser.nextCoordinate());
    position.setLongitude(parser.nextCoordinate());
    position.setSpeed(UnitsConverter.knotsFromKph(parser.nextDouble()));
    position.setCourse(parser.nextDouble());
    position.set(Event.KEY_INPUT,parser.nextInt(2));
    position.set(Event.KEY_POWER,parser.nextDouble() / 10);
    position.set(Event.PREFIX_TEMP + 1,parser.nextInt());
    position.set(Event.KEY_RPM,parser.nextInt());
    position.set(Event.KEY_FUEL,parser.nextInt());
    position.set(Event.PREFIX_ADC + 1,parser.nextInt());
    position.set(Event.PREFIX_ADC + 2,parser.nextInt());
    position.set(Event.KEY_OUTPUT,parser.nextInt(2));
    position.set(Event.KEY_ODOMETER,parser.nextInt());
    position.set(""String_Node_Str"",parser.next());
    return position;
  }
  return null;
}",0.9842776624147136
156061,"private void saveOriginal(Object decodedMessage,Object originalMessage){
  if (Context.getConfig().getBoolean(""String_Node_Str"")) {
    if (decodedMessage instanceof Position) {
      Position position=(Position)decodedMessage;
      if (originalMessage instanceof ChannelBuffer) {
        position.set(Event.KEY_ORIGINAL,ChannelBuffers.hexDump((ChannelBuffer)originalMessage));
      }
 else       if (originalMessage instanceof String) {
        position.set(Event.KEY_ORIGINAL,DatatypeConverter.printHexBinary(((String)originalMessage).getBytes()));
      }
    }
  }
}","private void saveOriginal(Object decodedMessage,Object originalMessage){
  if (Context.getConfig().getBoolean(""String_Node_Str"") && decodedMessage instanceof Position) {
    Position position=(Position)decodedMessage;
    if (originalMessage instanceof ChannelBuffer) {
      position.set(Event.KEY_ORIGINAL,ChannelBuffers.hexDump((ChannelBuffer)originalMessage));
    }
 else     if (originalMessage instanceof String) {
      position.set(Event.KEY_ORIGINAL,DatatypeConverter.printHexBinary(((String)originalMessage).getBytes(Charset.defaultCharset())));
    }
  }
}",0.868421052631579
156062,"@Override public void handleUpstream(final ChannelHandlerContext ctx,ChannelEvent evt) throws Exception {
  if (!(evt instanceof MessageEvent)) {
    ctx.sendUpstream(evt);
    return;
  }
  final MessageEvent e=(MessageEvent)evt;
  Object message=e.getMessage();
  if (message instanceof Position) {
    final Position position=(Position)message;
    if (position.getOutdated() || (processInvalidPositions && !position.getValid())) {
      locationProvider.getLocation(position.getAttributes(),new LocationProvider.LocationProviderCallback(){
        @Override public void onSuccess(        double latitude,        double longitude){
          position.set(Event.KEY_APPROXIMATE,true);
          position.setValid(true);
          position.setFixTime(position.getDeviceTime());
          position.setLatitude(latitude);
          position.setLongitude(longitude);
          Channels.fireMessageReceived(ctx,position,e.getRemoteAddress());
        }
        @Override public void onFailure(){
          Channels.fireMessageReceived(ctx,position,e.getRemoteAddress());
        }
      }
);
    }
 else {
      Channels.fireMessageReceived(ctx,position,e.getRemoteAddress());
    }
  }
 else {
    Channels.fireMessageReceived(ctx,message,e.getRemoteAddress());
  }
}","@Override public void handleUpstream(final ChannelHandlerContext ctx,ChannelEvent evt) throws Exception {
  if (!(evt instanceof MessageEvent)) {
    ctx.sendUpstream(evt);
    return;
  }
  final MessageEvent e=(MessageEvent)evt;
  Object message=e.getMessage();
  if (message instanceof Position) {
    final Position position=(Position)message;
    if (position.getOutdated() || processInvalidPositions && !position.getValid()) {
      locationProvider.getLocation(position.getAttributes(),new LocationProvider.LocationProviderCallback(){
        @Override public void onSuccess(        double latitude,        double longitude){
          position.set(Event.KEY_APPROXIMATE,true);
          position.setValid(true);
          position.setFixTime(position.getDeviceTime());
          position.setLatitude(latitude);
          position.setLongitude(longitude);
          Channels.fireMessageReceived(ctx,position,e.getRemoteAddress());
        }
        @Override public void onFailure(){
          Channels.fireMessageReceived(ctx,position,e.getRemoteAddress());
        }
      }
);
    }
 else {
      Channels.fireMessageReceived(ctx,position,e.getRemoteAddress());
    }
  }
 else {
    Channels.fireMessageReceived(ctx,message,e.getRemoteAddress());
  }
}",0.9992088607594936
156063,"public TreeNode(Device device){
  this.device=device;
}","TreeNode(Device device){
  this.device=device;
}",0.9320388349514565
156064,"@Override public boolean equals(Object obj){
  if (!(obj instanceof TreeNode)) {
    return false;
  }
  TreeNode other=(TreeNode)obj;
  if (other == this) {
    return true;
  }
  if (group != null) {
    if (other.group != null) {
      return group.getId() == other.group.getId();
    }
  }
 else   if (device != null) {
    if (other.device != null) {
      return device.getId() == other.device.getId();
    }
  }
  return false;
}","@Override public boolean equals(Object obj){
  if (!(obj instanceof TreeNode)) {
    return false;
  }
  TreeNode other=(TreeNode)obj;
  if (other == this) {
    return true;
  }
  if (group != null && other.group != null) {
    return group.getId() == other.group.getId();
  }
 else   if (device != null && other.device != null) {
    return device.getId() == other.device.getId();
  }
  return false;
}",0.6238095238095238
156065,"@Override public void filter(ContainerRequestContext request,ContainerResponseContext response) throws IOException {
  if (!response.getHeaders().containsKey(ACCESS_CONTROL_ALLOW_HEADERS_KEY)) {
    response.getHeaders().add(ACCESS_CONTROL_ALLOW_HEADERS_KEY,ACCESS_CONTROL_ALLOW_HEADERS_VALUE);
  }
  if (!response.getHeaders().containsKey(ACCESS_CONTROL_ALLOW_CREDENTIALS_KEY)) {
    response.getHeaders().add(ACCESS_CONTROL_ALLOW_CREDENTIALS_KEY,ACCESS_CONTROL_ALLOW_CREDENTIALS_VALUE);
  }
  if (!response.getHeaders().containsKey(ACCESS_CONTROL_ALLOW_METHODS_KEY)) {
    response.getHeaders().add(ACCESS_CONTROL_ALLOW_METHODS_KEY,ACCESS_CONTROL_ALLOW_METHODS_VALUE);
  }
  if (!response.getHeaders().containsKey(ACCESS_CONTROL_ALLOW_ORIGIN_KEY)) {
    String origin=request.getHeaderString(HttpHeaders.Names.ORIGIN);
    String allowed=Context.getConfig().getString(""String_Node_Str"");
    if (allowed == null) {
      response.getHeaders().add(ACCESS_CONTROL_ALLOW_ORIGIN_KEY,ACCESS_CONTROL_ALLOW_ORIGIN_VALUE);
    }
 else     if (allowed.contains(origin)) {
      String originSafe=URLEncoder.encode(origin,StandardCharsets.UTF_8.name());
      response.getHeaders().add(ACCESS_CONTROL_ALLOW_ORIGIN_KEY,originSafe);
    }
  }
}","@Override public void filter(ContainerRequestContext request,ContainerResponseContext response) throws IOException {
  if (!response.getHeaders().containsKey(ACCESS_CONTROL_ALLOW_HEADERS_KEY)) {
    response.getHeaders().add(ACCESS_CONTROL_ALLOW_HEADERS_KEY,ACCESS_CONTROL_ALLOW_HEADERS_VALUE);
  }
  if (!response.getHeaders().containsKey(ACCESS_CONTROL_ALLOW_CREDENTIALS_KEY)) {
    response.getHeaders().add(ACCESS_CONTROL_ALLOW_CREDENTIALS_KEY,ACCESS_CONTROL_ALLOW_CREDENTIALS_VALUE);
  }
  if (!response.getHeaders().containsKey(ACCESS_CONTROL_ALLOW_METHODS_KEY)) {
    response.getHeaders().add(ACCESS_CONTROL_ALLOW_METHODS_KEY,ACCESS_CONTROL_ALLOW_METHODS_VALUE);
  }
  if (!response.getHeaders().containsKey(ACCESS_CONTROL_ALLOW_ORIGIN_KEY)) {
    String origin=request.getHeaderString(HttpHeaders.Names.ORIGIN);
    String allowed=Context.getConfig().getString(""String_Node_Str"");
    if (allowed == null || origin == null) {
      response.getHeaders().add(ACCESS_CONTROL_ALLOW_ORIGIN_KEY,ACCESS_CONTROL_ALLOW_ORIGIN_VALUE);
    }
 else     if (allowed.contains(origin)) {
      String originSafe=URLEncoder.encode(origin,StandardCharsets.UTF_8.name());
      response.getHeaders().add(ACCESS_CONTROL_ALLOW_ORIGIN_KEY,originSafe);
    }
  }
}",0.992759452936444
156066,"@Override protected final void service(HttpServletRequest req,HttpServletResponse resp) throws ServletException, IOException {
  try {
    resp.setContentType(APPLICATION_JSON);
    resp.setCharacterEncoding(CharsetUtil.UTF_8.name());
    resp.setHeader(HttpHeaders.Names.ACCESS_CONTROL_ALLOW_HEADERS,ALLOW_HEADERS_VALUE);
    resp.setHeader(HttpHeaders.Names.ACCESS_CONTROL_ALLOW_METHODS,ALLOW_METHODS_VALUE);
    String origin=req.getHeader(HttpHeaders.Names.ORIGIN);
    String allowed=Context.getConfig().getString(""String_Node_Str"");
    if (allowed == null) {
      resp.setHeader(HttpHeaders.Names.ACCESS_CONTROL_ALLOW_ORIGIN,ALLOW_ORIGIN_VALUE);
    }
 else     if (allowed.contains(origin)) {
      String originSafe=URLEncoder.encode(origin,StandardCharsets.UTF_8.name());
      resp.setHeader(HttpHeaders.Names.ACCESS_CONTROL_ALLOW_ORIGIN,originSafe);
    }
    if (!handle(getCommand(req),req,resp)) {
      resp.sendError(HttpServletResponse.SC_BAD_REQUEST);
    }
  }
 catch (  Exception error) {
    if (error instanceof AccessControlException) {
      resp.setStatus(HttpServletResponse.SC_UNAUTHORIZED);
    }
 else     if (error instanceof SecurityException) {
      resp.setStatus(HttpServletResponse.SC_FORBIDDEN);
    }
    sendResponse(resp.getWriter(),error);
  }
}","@Override protected final void service(HttpServletRequest req,HttpServletResponse resp) throws ServletException, IOException {
  try {
    resp.setContentType(APPLICATION_JSON);
    resp.setCharacterEncoding(CharsetUtil.UTF_8.name());
    resp.setHeader(HttpHeaders.Names.ACCESS_CONTROL_ALLOW_HEADERS,ALLOW_HEADERS_VALUE);
    resp.setHeader(HttpHeaders.Names.ACCESS_CONTROL_ALLOW_METHODS,ALLOW_METHODS_VALUE);
    String origin=req.getHeader(HttpHeaders.Names.ORIGIN);
    String allowed=Context.getConfig().getString(""String_Node_Str"");
    if (allowed == null || origin == null) {
      resp.setHeader(HttpHeaders.Names.ACCESS_CONTROL_ALLOW_ORIGIN,ALLOW_ORIGIN_VALUE);
    }
 else     if (allowed.contains(origin)) {
      String originSafe=URLEncoder.encode(origin,StandardCharsets.UTF_8.name());
      resp.setHeader(HttpHeaders.Names.ACCESS_CONTROL_ALLOW_ORIGIN,originSafe);
    }
    if (!handle(getCommand(req),req,resp)) {
      resp.sendError(HttpServletResponse.SC_BAD_REQUEST);
    }
  }
 catch (  Exception error) {
    if (error instanceof AccessControlException) {
      resp.setStatus(HttpServletResponse.SC_UNAUTHORIZED);
    }
 else     if (error instanceof SecurityException) {
      resp.setStatus(HttpServletResponse.SC_FORBIDDEN);
    }
    sendResponse(resp.getWriter(),error);
  }
}",0.9930609097918272
156067,"@Override protected Object decode(Channel channel,SocketAddress remoteAddress,Object msg) throws Exception {
  String x=PatternUtil.checkPattern(PATTERN.pattern(),(String)msg);
  Parser parser=new Parser(PATTERN,(String)msg);
  if (!parser.matches()) {
    return null;
  }
  Position position=new Position();
  position.setProtocol(getProtocolName());
  if (!identify(parser.next(),channel,remoteAddress)) {
    return null;
  }
  position.setDeviceId(getDeviceId());
  position.setValid(parser.nextInt() < 20);
  position.setSpeed(UnitsConverter.knotsFromKph(parser.nextDouble()));
  position.setCourse(parser.nextDouble());
  position.setAltitude(parser.nextDouble());
  position.setLongitude(parser.nextDouble());
  position.setLatitude(parser.nextDouble());
  DateBuilder dateBuilder=new DateBuilder().setDate(parser.nextInt(),parser.nextInt(),parser.nextInt()).setTime(parser.nextInt(),parser.nextInt(),parser.nextInt());
  position.setTime(dateBuilder.getDate());
  if (parser.hasNext(4)) {
    position.set(Event.KEY_MCC,parser.nextInt());
    position.set(Event.KEY_MNC,parser.nextInt());
    position.set(Event.KEY_LAC,parser.nextInt(16));
    position.set(Event.KEY_CID,parser.nextInt(16));
  }
  return position;
}","@Override protected Object decode(Channel channel,SocketAddress remoteAddress,Object msg) throws Exception {
  Parser parser=new Parser(PATTERN,(String)msg);
  if (!parser.matches()) {
    return null;
  }
  Position position=new Position();
  position.setProtocol(getProtocolName());
  if (!identify(parser.next(),channel,remoteAddress)) {
    return null;
  }
  position.setDeviceId(getDeviceId());
  position.setValid(parser.nextInt() < 20);
  position.setSpeed(UnitsConverter.knotsFromKph(parser.nextDouble()));
  position.setCourse(parser.nextDouble());
  position.setAltitude(parser.nextDouble());
  position.setLongitude(parser.nextDouble());
  position.setLatitude(parser.nextDouble());
  DateBuilder dateBuilder=new DateBuilder().setDate(parser.nextInt(),parser.nextInt(),parser.nextInt()).setTime(parser.nextInt(),parser.nextInt(),parser.nextInt());
  position.setTime(dateBuilder.getDate());
  if (parser.hasNext(4)) {
    position.set(Event.KEY_MCC,parser.nextInt());
    position.set(Event.KEY_MNC,parser.nextInt());
    position.set(Event.KEY_LAC,parser.nextInt(16));
    position.set(Event.KEY_CID,parser.nextInt(16));
  }
  return position;
}",0.9538590604026844
156068,"@Override protected Object decode(Channel channel,SocketAddress remoteAddress,Object msg) throws Exception {
  Parser parser=new Parser(PATTERN,(String)msg);
  if (!parser.matches()) {
    return null;
  }
  Position position=new Position();
  position.setProtocol(getProtocolName());
  if (!identify(parser.next(),channel,remoteAddress)) {
    return null;
  }
  position.setDeviceId(getDeviceId());
  position.set(Event.KEY_TYPE,parser.next());
  DateBuilder dateBuilder=new DateBuilder().setDateReverse(parser.nextInt(),parser.nextInt(),parser.nextInt()).setTime(parser.nextInt(),parser.nextInt(),parser.nextInt());
  position.setTime(dateBuilder.getDate());
  if (parser.hasNext(6)) {
    position.setLongitude(parser.nextCoordinate(Parser.CoordinateFormat.DEG_MIN_MIN));
    position.setLongitude(parser.nextCoordinate(Parser.CoordinateFormat.DEG_MIN_MIN));
  }
  if (parser.hasNext(2)) {
    position.setLongitude(parser.nextDouble() / 10000);
    position.setLatitude(parser.nextDouble() / 10000);
  }
  position.setValid(parser.nextInt() != 1);
  position.setSpeed(parser.nextDouble());
  position.setCourse(parser.nextDouble());
  position.set(Event.KEY_SATELLITES,parser.next());
  position.set(Event.KEY_BATTERY,parser.nextInt());
  return position;
}","@Override protected Object decode(Channel channel,SocketAddress remoteAddress,Object msg) throws Exception {
  Parser parser=new Parser(PATTERN,(String)msg);
  if (!parser.matches()) {
    return null;
  }
  Position position=new Position();
  position.setProtocol(getProtocolName());
  if (!identify(parser.next(),channel,remoteAddress)) {
    return null;
  }
  position.setDeviceId(getDeviceId());
  position.set(Event.KEY_TYPE,parser.next());
  DateBuilder dateBuilder=new DateBuilder().setDateReverse(parser.nextInt(),parser.nextInt(),parser.nextInt()).setTime(parser.nextInt(),parser.nextInt(),parser.nextInt());
  position.setTime(dateBuilder.getDate());
  if (parser.hasNext(6)) {
    position.setLongitude(parser.nextCoordinate(Parser.CoordinateFormat.DEG_MIN_MIN));
    position.setLatitude(parser.nextCoordinate(Parser.CoordinateFormat.DEG_MIN_MIN));
  }
  if (parser.hasNext(2)) {
    position.setLongitude(parser.nextDouble() / 10000);
    position.setLatitude(parser.nextDouble() / 10000);
  }
  position.setValid(parser.nextInt() != 1);
  position.setSpeed(parser.nextDouble());
  position.setCourse(parser.nextDouble());
  position.set(Event.KEY_SATELLITES,parser.next());
  position.set(Event.KEY_BATTERY,parser.nextInt());
  return position;
}",0.9980182322631788
156069,"@Test public void testDecode() throws Exception {
  TelicProtocolDecoder decoder=new TelicProtocolDecoder(new TelicProtocol());
  verifyPosition(decoder,text(""String_Node_Str""));
  verifyNothing(decoder,text(""String_Node_Str""));
  verifyPosition(decoder,text(""String_Node_Str""));
  verifyPosition(decoder,text(""String_Node_Str""));
  verifyPosition(decoder,text(""String_Node_Str""),position(""String_Node_Str"",true,47.53410,16.66530));
  verifyPosition(decoder,text(""String_Node_Str""));
}","@Test public void testDecode() throws Exception {
  TelicProtocolDecoder decoder=new TelicProtocolDecoder(new TelicProtocol());
  verifyPosition(decoder,text(""String_Node_Str""));
  verifyPosition(decoder,text(""String_Node_Str""));
  verifyNothing(decoder,text(""String_Node_Str""));
  verifyPosition(decoder,text(""String_Node_Str""));
  verifyPosition(decoder,text(""String_Node_Str""));
  verifyPosition(decoder,text(""String_Node_Str""),position(""String_Node_Str"",true,47.53410,16.66530));
  verifyPosition(decoder,text(""String_Node_Str""));
}",0.950048971596474
156070,"@Test public void testDecode() throws Exception {
  Gps103ProtocolDecoder decoder=new Gps103ProtocolDecoder(new Gps103Protocol());
  verifyNothing(decoder,text(""String_Node_Str""));
  verifyNothing(decoder,text(""String_Node_Str""));
  verifyAttributes(decoder,text(""String_Node_Str""));
  verifyAttributes(decoder,text(""String_Node_Str""));
  verifyPosition(decoder,text(""String_Node_Str""));
  verifyAttributes(decoder,text(""String_Node_Str""));
  verifyAttributes(decoder,text(""String_Node_Str""));
  verifyAttributes(decoder,text(""String_Node_Str""));
  verifyPosition(decoder,text(""String_Node_Str""),position(""String_Node_Str"",true,54.72306,25.21512));
  verifyPosition(decoder,text(""String_Node_Str""),position(""String_Node_Str"",true,24.49193,44.40971));
  verifyPosition(decoder,text(""String_Node_Str""),position(""String_Node_Str"",true,60.33830,25.10323));
  verifyNothing(decoder,text(""String_Node_Str""));
  verifyNothing(decoder,text(""String_Node_Str""));
  verifyNothing(decoder,text(""String_Node_Str""));
  verifyPosition(decoder,text(""String_Node_Str""));
  verifyPosition(decoder,text(""String_Node_Str""));
  verifyPosition(decoder,text(""String_Node_Str""));
  verifyPosition(decoder,text(""String_Node_Str""));
  verifyPosition(decoder,text(""String_Node_Str""));
  verifyPosition(decoder,text(""String_Node_Str""));
  verifyPosition(decoder,text(""String_Node_Str""));
  verifyPosition(decoder,text(""String_Node_Str""));
  verifyPosition(decoder,text(""String_Node_Str""));
  verifyPosition(decoder,text(""String_Node_Str""));
  verifyPosition(decoder,text(""String_Node_Str""));
  verifyPosition(decoder,text(""String_Node_Str""));
  verifyPosition(decoder,text(""String_Node_Str""));
  verifyPosition(decoder,text(""String_Node_Str""));
  verifyPosition(decoder,text(""String_Node_Str""));
  verifyPosition(decoder,text(""String_Node_Str""));
  verifyPosition(decoder,text(""String_Node_Str""));
  verifyPosition(decoder,text(""String_Node_Str""));
  verifyPosition(decoder,text(""String_Node_Str""));
  verifyPosition(decoder,text(""String_Node_Str""));
  verifyPosition(decoder,text(""String_Node_Str""));
  verifyPosition(decoder,text(""String_Node_Str""));
  verifyPosition(decoder,text(""String_Node_Str""));
  verifyPosition(decoder,text(""String_Node_Str""));
  verifyPosition(decoder,text(""String_Node_Str""));
  verifyPosition(decoder,text(""String_Node_Str""));
  verifyPosition(decoder,text(""String_Node_Str""));
  verifyPosition(decoder,text(""String_Node_Str""));
  verifyPosition(decoder,text(""String_Node_Str""));
  verifyPosition(decoder,text(""String_Node_Str""));
  verifyPosition(decoder,text(""String_Node_Str""));
  verifyPosition(decoder,text(""String_Node_Str""));
  verifyPosition(decoder,text(""String_Node_Str""));
}","@Test public void testDecode() throws Exception {
  Gps103ProtocolDecoder decoder=new Gps103ProtocolDecoder(new Gps103Protocol());
  verifyPosition(decoder,text(""String_Node_Str""));
  verifyNothing(decoder,text(""String_Node_Str""));
  verifyAttributes(decoder,text(""String_Node_Str""));
  verifyAttributes(decoder,text(""String_Node_Str""));
  verifyPosition(decoder,text(""String_Node_Str""));
  verifyAttributes(decoder,text(""String_Node_Str""));
  verifyAttributes(decoder,text(""String_Node_Str""));
  verifyAttributes(decoder,text(""String_Node_Str""));
  verifyPosition(decoder,text(""String_Node_Str""),position(""String_Node_Str"",true,54.72306,25.21512));
  verifyPosition(decoder,text(""String_Node_Str""),position(""String_Node_Str"",true,24.49193,44.40971));
  verifyPosition(decoder,text(""String_Node_Str""),position(""String_Node_Str"",true,60.33830,25.10323));
  verifyNothing(decoder,text(""String_Node_Str""));
  verifyNothing(decoder,text(""String_Node_Str""));
  verifyNothing(decoder,text(""String_Node_Str""));
  verifyPosition(decoder,text(""String_Node_Str""));
  verifyPosition(decoder,text(""String_Node_Str""));
  verifyPosition(decoder,text(""String_Node_Str""));
  verifyPosition(decoder,text(""String_Node_Str""));
  verifyPosition(decoder,text(""String_Node_Str""));
  verifyPosition(decoder,text(""String_Node_Str""));
  verifyPosition(decoder,text(""String_Node_Str""));
  verifyPosition(decoder,text(""String_Node_Str""));
  verifyPosition(decoder,text(""String_Node_Str""));
  verifyPosition(decoder,text(""String_Node_Str""));
  verifyPosition(decoder,text(""String_Node_Str""));
  verifyPosition(decoder,text(""String_Node_Str""));
  verifyPosition(decoder,text(""String_Node_Str""));
  verifyPosition(decoder,text(""String_Node_Str""));
  verifyPosition(decoder,text(""String_Node_Str""));
  verifyPosition(decoder,text(""String_Node_Str""));
  verifyPosition(decoder,text(""String_Node_Str""));
  verifyPosition(decoder,text(""String_Node_Str""));
  verifyPosition(decoder,text(""String_Node_Str""));
  verifyPosition(decoder,text(""String_Node_Str""));
  verifyPosition(decoder,text(""String_Node_Str""));
  verifyPosition(decoder,text(""String_Node_Str""));
  verifyPosition(decoder,text(""String_Node_Str""));
  verifyPosition(decoder,text(""String_Node_Str""));
  verifyPosition(decoder,text(""String_Node_Str""));
  verifyPosition(decoder,text(""String_Node_Str""));
  verifyPosition(decoder,text(""String_Node_Str""));
  verifyPosition(decoder,text(""String_Node_Str""));
  verifyPosition(decoder,text(""String_Node_Str""));
  verifyPosition(decoder,text(""String_Node_Str""));
  verifyPosition(decoder,text(""String_Node_Str""));
  verifyPosition(decoder,text(""String_Node_Str""));
  verifyPosition(decoder,text(""String_Node_Str""));
}",0.9972093023255814
156071,"@Override protected Object decode(Channel channel,SocketAddress remoteAddress,Object msg) throws Exception {
  ChannelBuffer buf=(ChannelBuffer)msg;
  if (channel != null) {
    channel.write(ChannelBuffers.wrappedBuffer(new byte[]{0x06}),remoteAddress);
  }
  buf.readUnsignedByte();
  buf.readUnsignedShort();
  String imei=String.format(""String_Node_Str"",buf.readUnsignedInt()) + String.format(""String_Node_Str"",buf.readUnsignedMedium());
  if (!identify(imei,channel,remoteAddress)) {
    return null;
  }
  List<Position> positions=new LinkedList<>();
  while (buf.readableBytes() > 2) {
    Position position=new Position();
    position.setProtocol(getProtocolName());
    position.setDeviceId(getDeviceId());
    buf.readUnsignedByte();
    position.setLatitude(buf.readInt() * 0.000001);
    position.setLongitude(buf.readInt() * 0.000001);
    DateBuilder dateBuilder=new DateBuilder().setDate(1980,1,6).addMillis(buf.readUnsignedInt() * 1000L);
    position.setTime(dateBuilder.getDate());
    position.setSpeed(UnitsConverter.knotsFromKph(buf.readUnsignedByte() * 2));
    position.setCourse(buf.readUnsignedByte() * 2);
    int reason=buf.readUnsignedMedium();
    int status=buf.readUnsignedShort();
    position.set(Event.PREFIX_IO + 1,buf.readUnsignedByte());
    position.set(Event.PREFIX_ADC + 1,buf.readUnsignedByte());
    position.set(Event.KEY_BATTERY,buf.readUnsignedByte());
    position.set(Event.KEY_POWER,buf.readUnsignedByte());
    buf.readUnsignedByte();
    buf.skipBytes(6);
    buf.readUnsignedShort();
    buf.readUnsignedShort();
    position.setAltitude(buf.readUnsignedByte() * 20);
    int quality=buf.readUnsignedByte();
    position.set(Event.KEY_SATELLITES,quality & 0xf);
    position.set(Event.KEY_GSM,quality >> 4);
    buf.readUnsignedByte();
    if (BitUtil.check(reason,6) || BitUtil.check(reason,7)) {
      position.set(Event.KEY_RFID,buf.readBytes(7).toString(Charset.defaultCharset()));
      position.set(Event.KEY_ODOMETER,buf.readUnsignedMedium());
      buf.readUnsignedShort();
    }
    if (BitUtil.check(status,6)) {
    }
    positions.add(position);
  }
  return positions;
}","@Override protected Object decode(Channel channel,SocketAddress remoteAddress,Object msg) throws Exception {
  ChannelBuffer buf=(ChannelBuffer)msg;
  if (channel != null) {
    channel.write(ChannelBuffers.wrappedBuffer(new byte[]{0x06}),remoteAddress);
  }
  buf.readUnsignedByte();
  buf.readUnsignedShort();
  String imei=String.format(""String_Node_Str"",buf.readUnsignedInt()) + String.format(""String_Node_Str"",buf.readUnsignedMedium());
  if (!identify(imei,channel,remoteAddress)) {
    return null;
  }
  List<Position> positions=new LinkedList<>();
  while (buf.readableBytes() > 2) {
    Position position=new Position();
    position.setProtocol(getProtocolName());
    position.setDeviceId(getDeviceId());
    buf.readUnsignedByte();
    position.setLatitude(buf.readInt() * 0.000001);
    position.setLongitude(buf.readInt() * 0.000001);
    DateBuilder dateBuilder=new DateBuilder().setDate(1980,1,6).addMillis(buf.readUnsignedInt() * 1000L);
    position.setTime(dateBuilder.getDate());
    position.setSpeed(UnitsConverter.knotsFromKph(buf.readUnsignedByte() * 2));
    position.setCourse(buf.readUnsignedByte() * 2);
    int reason=buf.readUnsignedMedium();
    buf.readUnsignedShort();
    position.set(Event.PREFIX_IO + 1,buf.readUnsignedByte());
    position.set(Event.PREFIX_ADC + 1,buf.readUnsignedByte());
    position.set(Event.KEY_BATTERY,buf.readUnsignedByte());
    position.set(Event.KEY_POWER,buf.readUnsignedByte());
    buf.readUnsignedByte();
    buf.skipBytes(6);
    buf.readUnsignedShort();
    buf.readUnsignedShort();
    position.setAltitude(buf.readUnsignedByte() * 20);
    int quality=buf.readUnsignedByte();
    position.set(Event.KEY_SATELLITES,quality & 0xf);
    position.set(Event.KEY_GSM,quality >> 4);
    buf.readUnsignedByte();
    if (BitUtil.check(reason,6) || BitUtil.check(reason,7)) {
      position.set(Event.KEY_RFID,buf.readBytes(7).toString(Charset.defaultCharset()));
      position.set(Event.KEY_ODOMETER,buf.readUnsignedMedium());
      buf.readUnsignedShort();
    }
    positions.add(position);
  }
  return positions;
}",0.9672830725462304
156072,"private void sendResponse(Channel channel,SocketAddress remoteAddress,int version,ChannelBuffer id,short type,ChannelBuffer content){
  if (channel != null) {
    int length=2 + 2 + 1+ id.readableBytes()+ 2+ 2+ 2;
    if (content != null) {
      length+=content.readableBytes();
    }
    ChannelBuffer response=ChannelBuffers.directBuffer(ByteOrder.LITTLE_ENDIAN,length);
    response.writeByte('@');
    response.writeByte('@');
    response.writeShort(length);
    response.writeByte(version);
    response.writeBytes(id);
    response.writeShort(ChannelBuffers.swapShort(type));
    if (content != null) {
      response.writeBytes(content);
    }
    response.writeShort(Checksum.crc16(Checksum.CRC16_X25,response.toByteBuffer(0,response.writerIndex())));
    response.writeByte(0x0D);
    response.writeByte(0x0A);
    channel.write(response,remoteAddress);
  }
}","private void sendResponse(Channel channel,SocketAddress remoteAddress,ChannelBuffer id,short type){
  if (channel != null) {
    int length=2 + 2 + id.readableBytes()+ 2+ 4+ 8+ 2+ 2;
    ChannelBuffer response=ChannelBuffers.directBuffer(ByteOrder.LITTLE_ENDIAN,length);
    response.writeByte('@');
    response.writeByte('@');
    response.writeShort(length);
    response.writeBytes(id);
    response.writeShort(ChannelBuffers.swapShort(type));
    response.writeInt(0);
    for (int i=0; i < 8; i++) {
      response.writeByte(0xff);
    }
    response.writeShort(Checksum.crc16(Checksum.CRC16_X25,response.toByteBuffer(0,response.writerIndex())));
    response.writeByte(0x0D);
    response.writeByte(0x0A);
    channel.write(response,remoteAddress);
  }
}",0.8277130594727161
156073,"@Override protected Object decode(Channel channel,SocketAddress remoteAddress,Object msg) throws Exception {
  ChannelBuffer buf=(ChannelBuffer)msg;
  int header=buf.readUnsignedShort();
  buf.readUnsignedShort();
  int version=-1;
  if (header == 0x4040) {
    version=buf.readUnsignedByte();
  }
  ChannelBuffer id=buf.readBytes(20);
  int type=ChannelBuffers.swapShort(buf.readShort());
  if (!identify(id.toString(Charset.defaultCharset()).trim(),channel,remoteAddress)) {
    return null;
  }
  if (version == -1) {
    if (type == 0x2001) {
      if (channel != null) {
        int length=2 + 2 + id.readableBytes()+ 2+ 4+ 8+ 2+ 2;
        ChannelBuffer response=ChannelBuffers.directBuffer(ByteOrder.LITTLE_ENDIAN,length);
        response.writeByte('@');
        response.writeByte('@');
        response.writeShort(length);
        response.writeBytes(id);
        response.writeShort(ChannelBuffers.swapShort((short)0x1001));
        response.writeInt(0);
        for (int i=0; i < 8; i++) {
          response.writeByte(0xff);
        }
        response.writeShort(Checksum.crc16(Checksum.CRC16_X25,response.toByteBuffer(0,response.writerIndex())));
        response.writeByte(0x0D);
        response.writeByte(0x0A);
        channel.write(response,remoteAddress);
      }
      buf.readUnsignedInt();
      buf.readUnsignedInt();
      buf.readUnsignedByte();
      return readPosition(buf);
    }
  }
 else   if (version == 4) {
    if (type == MSG_SC_HEARTBEAT) {
      sendResponse(channel,remoteAddress,version,id,MSG_SC_HEARTBEAT_RESPONSE,null);
    }
 else     if (type == MSG_SC_LOGIN || type == MSG_SC_LOGOUT || type == MSG_SC_GPS || type == MSG_SC_ALARM || type == MSG_SC_CURRENT_LOCATION) {
      if (type == MSG_SC_LOGIN) {
        ChannelBuffer response=ChannelBuffers.directBuffer(ByteOrder.LITTLE_ENDIAN,10);
        response.writeInt(0xFFFFFFFF);
        response.writeShort(0);
        response.writeInt((int)(System.currentTimeMillis() / 1000));
        sendResponse(channel,remoteAddress,version,id,MSG_SC_LOGIN_RESPONSE,response);
      }
      if (type == MSG_SC_GPS) {
        buf.readUnsignedByte();
      }
 else       if (type == MSG_SC_ALARM) {
        buf.readUnsignedInt();
      }
 else       if (type == MSG_SC_CURRENT_LOCATION) {
        buf.readUnsignedShort();
      }
      buf.readUnsignedInt();
      buf.readUnsignedInt();
      long odometer=buf.readUnsignedInt();
      buf.readUnsignedInt();
      buf.readUnsignedInt();
      buf.readUnsignedShort();
      long status=buf.readUnsignedInt();
      buf.skipBytes(8);
      int count=buf.readUnsignedByte();
      List<Position> positions=new LinkedList<>();
      for (int i=0; i < count; i++) {
        Position position=readPosition(buf);
        position.set(Event.KEY_ODOMETER,odometer);
        position.set(Event.KEY_STATUS,status);
        positions.add(position);
      }
      if (!positions.isEmpty()) {
        return positions;
      }
    }
 else     if (type == MSG_SC_GPS_SLEEP || type == MSG_SC_AGPS_REQUEST) {
      return readPosition(buf);
    }
  }
 else {
    if (type == MSG_CC_HEARTBEAT) {
      sendResponse(channel,remoteAddress,version,id,MSG_CC_HEARTBEAT_RESPONSE,null);
      buf.readUnsignedByte();
      int count=buf.readUnsignedByte();
      List<Position> positions=new LinkedList<>();
      for (int i=0; i < count; i++) {
        Position position=readPosition(buf);
        position.set(Event.KEY_STATUS,buf.readUnsignedInt());
        position.set(Event.KEY_BATTERY,buf.readUnsignedByte());
        position.set(Event.KEY_ODOMETER,buf.readUnsignedInt());
        buf.readUnsignedByte();
        buf.readUnsignedByte();
        buf.readUnsignedByte();
        position.set(Event.KEY_LAC,buf.readUnsignedShort());
        position.set(Event.KEY_CID,buf.readUnsignedShort());
        positions.add(position);
      }
      return positions;
    }
 else     if (type == MSG_CC_LOGIN) {
      sendResponse(channel,remoteAddress,version,id,MSG_CC_LOGIN_RESPONSE,null);
      Position position=readPosition(buf);
      position.set(Event.KEY_STATUS,buf.readUnsignedInt());
      position.set(Event.KEY_BATTERY,buf.readUnsignedByte());
      position.set(Event.KEY_ODOMETER,buf.readUnsignedInt());
      buf.readUnsignedByte();
      buf.readUnsignedByte();
      buf.readUnsignedByte();
      return position;
    }
  }
  return null;
}","@Override protected Object decode(Channel channel,SocketAddress remoteAddress,Object msg) throws Exception {
  ChannelBuffer buf=(ChannelBuffer)msg;
  int header=buf.readUnsignedShort();
  buf.readUnsignedShort();
  int version=-1;
  if (header == 0x4040) {
    version=buf.readUnsignedByte();
  }
  ChannelBuffer id=buf.readBytes(20);
  int type=ChannelBuffers.swapShort(buf.readShort());
  if (!identify(id.toString(Charset.defaultCharset()).trim(),channel,remoteAddress)) {
    return null;
  }
  if (version == -1) {
    if (type == 0x2001) {
      sendResponse(channel,remoteAddress,id,(short)0x1001);
      buf.readUnsignedInt();
      buf.readUnsignedInt();
      buf.readUnsignedByte();
      return readPosition(buf);
    }
  }
 else   if (version == 4) {
    if (type == MSG_SC_HEARTBEAT) {
      sendResponse(channel,remoteAddress,version,id,MSG_SC_HEARTBEAT_RESPONSE,null);
    }
 else     if (type == MSG_SC_LOGIN || type == MSG_SC_LOGOUT || type == MSG_SC_GPS || type == MSG_SC_ALARM || type == MSG_SC_CURRENT_LOCATION) {
      if (type == MSG_SC_LOGIN) {
        ChannelBuffer response=ChannelBuffers.directBuffer(ByteOrder.LITTLE_ENDIAN,10);
        response.writeInt(0xFFFFFFFF);
        response.writeShort(0);
        response.writeInt((int)(System.currentTimeMillis() / 1000));
        sendResponse(channel,remoteAddress,version,id,MSG_SC_LOGIN_RESPONSE,response);
      }
      if (type == MSG_SC_GPS) {
        buf.readUnsignedByte();
      }
 else       if (type == MSG_SC_ALARM) {
        buf.readUnsignedInt();
      }
 else       if (type == MSG_SC_CURRENT_LOCATION) {
        buf.readUnsignedShort();
      }
      buf.readUnsignedInt();
      buf.readUnsignedInt();
      long odometer=buf.readUnsignedInt();
      buf.readUnsignedInt();
      buf.readUnsignedInt();
      buf.readUnsignedShort();
      long status=buf.readUnsignedInt();
      buf.skipBytes(8);
      int count=buf.readUnsignedByte();
      List<Position> positions=new LinkedList<>();
      for (int i=0; i < count; i++) {
        Position position=readPosition(buf);
        position.set(Event.KEY_ODOMETER,odometer);
        position.set(Event.KEY_STATUS,status);
        positions.add(position);
      }
      if (!positions.isEmpty()) {
        return positions;
      }
    }
 else     if (type == MSG_SC_GPS_SLEEP || type == MSG_SC_AGPS_REQUEST) {
      return readPosition(buf);
    }
  }
 else {
    if (type == MSG_CC_HEARTBEAT) {
      sendResponse(channel,remoteAddress,version,id,MSG_CC_HEARTBEAT_RESPONSE,null);
      buf.readUnsignedByte();
      int count=buf.readUnsignedByte();
      List<Position> positions=new LinkedList<>();
      for (int i=0; i < count; i++) {
        Position position=readPosition(buf);
        position.set(Event.KEY_STATUS,buf.readUnsignedInt());
        position.set(Event.KEY_BATTERY,buf.readUnsignedByte());
        position.set(Event.KEY_ODOMETER,buf.readUnsignedInt());
        buf.readUnsignedByte();
        buf.readUnsignedByte();
        buf.readUnsignedByte();
        position.set(Event.KEY_LAC,buf.readUnsignedShort());
        position.set(Event.KEY_CID,buf.readUnsignedShort());
        positions.add(position);
      }
      return positions;
    }
 else     if (type == MSG_CC_LOGIN) {
      sendResponse(channel,remoteAddress,version,id,MSG_CC_LOGIN_RESPONSE,null);
      Position position=readPosition(buf);
      position.set(Event.KEY_STATUS,buf.readUnsignedInt());
      position.set(Event.KEY_BATTERY,buf.readUnsignedByte());
      position.set(Event.KEY_ODOMETER,buf.readUnsignedInt());
      buf.readUnsignedByte();
      buf.readUnsignedByte();
      buf.readUnsignedByte();
      return position;
    }
  }
  return null;
}",0.9085267469281372
156074,"@Override protected Object decode(Channel channel,SocketAddress remoteAddress,Object msg) throws Exception {
  if (channel != null) {
    channel.write(""String_Node_Str"");
  }
  String sentence=(String)msg;
  Pattern pattern=sentence.startsWith(""String_Node_Str"") ? PATTERN_OLD : PATTERN;
  Parser parser=new Parser(pattern,(String)msg);
  if (!parser.matches()) {
    return null;
  }
  if (!identify(parser.next(),channel,remoteAddress)) {
    return null;
  }
  if (pattern == PATTERN_OLD) {
    Position position=new Position();
    position.setProtocol(getProtocolName());
    position.setDeviceId(getDeviceId());
    DateBuilder dateBuilder=new DateBuilder().setTime(parser.nextInt(),parser.nextInt(),parser.nextInt());
    position.setValid(parser.next().equals(""String_Node_Str""));
    position.setLatitude(parser.nextCoordinate(Parser.CoordinateFormat.HEM_DEG));
    position.setLongitude(parser.nextCoordinate(Parser.CoordinateFormat.HEM_DEG));
    position.setSpeed(parser.nextDouble());
    position.setCourse(parser.nextDouble());
    position.set(Event.KEY_HDOP,parser.next());
    dateBuilder.setDateReverse(parser.nextInt(),parser.nextInt(),parser.nextInt());
    position.setTime(dateBuilder.getDate());
    return position;
  }
 else {
    Date time=null;
    if (parser.hasNext(6)) {
      DateBuilder dateBuilder=new DateBuilder().setTime(parser.nextInt(),parser.nextInt(),parser.nextInt()).setDateReverse(parser.nextInt(),parser.nextInt(),parser.nextInt());
      time=dateBuilder.getDate();
    }
    List<Position> positions=new LinkedList<>();
    Parser itemParser=new Parser(PATTERN_ITEM,parser.next());
    while (itemParser.find()) {
      positions.add(decodePosition(itemParser,time));
    }
    return positions;
  }
}","@Override protected Object decode(Channel channel,SocketAddress remoteAddress,Object msg) throws Exception {
  if (channel != null) {
    channel.write(""String_Node_Str"");
  }
  String sentence=(String)msg;
  Pattern pattern=PATTERN;
  if (sentence.startsWith(""String_Node_Str"")) {
    pattern=PATTERN_OLD;
  }
  Parser parser=new Parser(pattern,(String)msg);
  if (!parser.matches()) {
    return null;
  }
  if (!identify(parser.next(),channel,remoteAddress)) {
    return null;
  }
  if (pattern == PATTERN_OLD) {
    Position position=new Position();
    position.setProtocol(getProtocolName());
    position.setDeviceId(getDeviceId());
    DateBuilder dateBuilder=new DateBuilder().setTime(parser.nextInt(),parser.nextInt(),parser.nextInt());
    position.setValid(parser.next().equals(""String_Node_Str""));
    position.setLatitude(parser.nextCoordinate(Parser.CoordinateFormat.HEM_DEG));
    position.setLongitude(parser.nextCoordinate(Parser.CoordinateFormat.HEM_DEG));
    position.setSpeed(parser.nextDouble());
    position.setCourse(parser.nextDouble());
    position.set(Event.KEY_HDOP,parser.next());
    dateBuilder.setDateReverse(parser.nextInt(),parser.nextInt(),parser.nextInt());
    position.setTime(dateBuilder.getDate());
    return position;
  }
 else {
    Date time=null;
    if (parser.hasNext(6)) {
      DateBuilder dateBuilder=new DateBuilder().setTime(parser.nextInt(),parser.nextInt(),parser.nextInt()).setDateReverse(parser.nextInt(),parser.nextInt(),parser.nextInt());
      time=dateBuilder.getDate();
    }
    List<Position> positions=new LinkedList<>();
    Parser itemParser=new Parser(PATTERN_ITEM,parser.next());
    while (itemParser.find()) {
      positions.add(decodePosition(itemParser,time));
    }
    return positions;
  }
}",0.9857954545454546
156075,"@Override protected Object decode(Channel channel,SocketAddress remoteAddress,Object msg) throws Exception {
  Parser parser=new Parser(PATTERN,(String)msg);
  if (!parser.matches()) {
    return null;
  }
  Position position=new Position();
  position.setProtocol(getProtocolName());
  if (!identify(parser.next(),channel,remoteAddress)) {
    return null;
  }
  position.setDeviceId(getDeviceId());
  position.setValid(parser.next().equals(""String_Node_Str""));
  DateBuilder dateBuilder=new DateBuilder().setTime(parser.nextInt(),parser.nextInt(),parser.nextInt()).setDateReverse(parser.nextInt(),parser.nextInt(),parser.nextInt());
  position.setTime(dateBuilder.getDate());
  position.setLatitude(parser.nextCoordinate());
  position.setLatitude(parser.nextCoordinate());
  position.setSpeed(parser.nextDouble());
  position.setCourse(parser.nextDouble());
  position.set(Event.KEY_SATELLITES,parser.next());
  position.set(Event.KEY_HDOP,parser.next());
  position.set(Event.KEY_GSM,parser.next());
  position.set(Event.KEY_CHARGE,parser.nextInt() == 2);
  position.set(Event.KEY_BATTERY,parser.next());
  position.set(Event.PREFIX_ADC + 1,parser.nextInt());
  position.set(Event.PREFIX_ADC + 1,parser.nextInt());
  position.set(Event.KEY_ODOMETER,parser.next());
  position.set(Event.KEY_INPUT,parser.next());
  return position;
}","@Override protected Object decode(Channel channel,SocketAddress remoteAddress,Object msg) throws Exception {
  Parser parser=new Parser(PATTERN,(String)msg);
  if (!parser.matches()) {
    return null;
  }
  Position position=new Position();
  position.setProtocol(getProtocolName());
  if (!identify(parser.next(),channel,remoteAddress)) {
    return null;
  }
  position.setDeviceId(getDeviceId());
  position.setValid(parser.next().equals(""String_Node_Str""));
  DateBuilder dateBuilder=new DateBuilder().setTime(parser.nextInt(),parser.nextInt(),parser.nextInt()).setDateReverse(parser.nextInt(),parser.nextInt(),parser.nextInt());
  position.setTime(dateBuilder.getDate());
  position.setLatitude(parser.nextCoordinate());
  position.setLongitude(parser.nextCoordinate());
  position.setSpeed(parser.nextDouble());
  position.setCourse(parser.nextDouble());
  position.set(Event.KEY_SATELLITES,parser.next());
  position.set(Event.KEY_HDOP,parser.next());
  position.set(Event.KEY_GSM,parser.next());
  position.set(Event.KEY_CHARGE,parser.nextInt() == 2);
  position.set(Event.KEY_BATTERY,parser.next());
  position.set(Event.PREFIX_ADC + 1,parser.nextInt());
  position.set(Event.PREFIX_ADC + 1,parser.nextInt());
  position.set(Event.KEY_ODOMETER,parser.next());
  position.set(Event.KEY_INPUT,parser.next());
  return position;
}",0.998129442573887
156076,"@Test public void testDecode() throws Exception {
  DishaProtocolDecoder decoder=new DishaProtocolDecoder(new DishaProtocol());
  verifyPosition(decoder,text(""String_Node_Str""));
}","@Test public void testDecode() throws Exception {
  DishaProtocolDecoder decoder=new DishaProtocolDecoder(new DishaProtocol());
  verifyPosition(decoder,text(""String_Node_Str""),position(""String_Node_Str"",true,22.53365,88.35546));
  verifyPosition(decoder,text(""String_Node_Str""));
}",0.7792207792207793
156077,"protected long getUserId(){
  return ((UserPrincipal)securityContext.getUserPrincipal()).getUserId();
}","protected long getUserId(){
  UserPrincipal principal=(UserPrincipal)securityContext.getUserPrincipal();
  if (principal != null) {
    return principal.getUserId();
  }
  return 0;
}",0.6923076923076923
156078,"@Override public Device getDeviceById(long id) throws SQLException {
  updateDeviceCache(!devicesById.containsKey(id));
  return devicesById.get(id);
}","@Override public Device getDeviceById(long id){
  try {
    updateDeviceCache(!devicesById.containsKey(id));
  }
 catch (  SQLException e) {
    Log.warning(e);
  }
  return devicesById.get(id);
}",0.7723342939481268
156079,Device getDeviceById(long id) throws Exception ;,Device getDeviceById(long id);,0.7692307692307693
156080,"public static String[] decodeBasicAuth(String auth){
  auth=auth.replaceFirst(""String_Node_Str"",""String_Node_Str"");
  byte[] decodedBytes=DatatypeConverter.parseBase64Binary(auth);
  if (decodedBytes != null && decodedBytes.length > 0) {
    return new String(decodedBytes).split(""String_Node_Str"",2);
  }
  return null;
}","public static String[] decodeBasicAuth(String auth){
  auth=auth.replaceFirst(""String_Node_Str"",""String_Node_Str"");
  byte[] decodedBytes=DatatypeConverter.parseBase64Binary(auth);
  if (decodedBytes != null && decodedBytes.length > 0) {
    return new String(decodedBytes,Charset.defaultCharset()).split(""String_Node_Str"",2);
  }
  return null;
}",0.9626307922272048
156081,"@Override protected Position handlePosition(Position position){
  Device device=Context.getIdentityManager().getDeviceById(position.getDeviceId());
  String attributes=MiscFormatter.toJsonString(position.getAttributes());
  String request=url.replace(""String_Node_Str"",device.getUniqueId()).replace(""String_Node_Str"",String.valueOf(position.getDeviceId())).replace(""String_Node_Str"",String.valueOf(position.getProtocol())).replace(""String_Node_Str"",String.valueOf(position.getDeviceTime().getTime())).replace(""String_Node_Str"",String.valueOf(position.getFixTime().getTime())).replace(""String_Node_Str"",String.valueOf(position.getLatitude())).replace(""String_Node_Str"",String.valueOf(position.getValid())).replace(""String_Node_Str"",String.valueOf(position.getLongitude())).replace(""String_Node_Str"",String.valueOf(position.getAltitude())).replace(""String_Node_Str"",String.valueOf(position.getSpeed())).replace(""String_Node_Str"",String.valueOf(position.getCourse())).replace(""String_Node_Str"",calculateStatus(position));
  if (position.getAddress() != null) {
    try {
      request=request.replace(""String_Node_Str"",URLEncoder.encode(position.getAddress(),""String_Node_Str""));
    }
 catch (    UnsupportedEncodingException error) {
      Log.warning(error);
    }
  }
  if (request.contains(""String_Node_Str"")) {
    try {
      request=request.replace(""String_Node_Str"",URLEncoder.encode(attributes,""String_Node_Str""));
    }
 catch (    UnsupportedEncodingException error) {
      Log.warning(error);
    }
  }
  if (request.contains(""String_Node_Str"")) {
    request=request.replace(""String_Node_Str"",formatSentence(position));
  }
  Context.getAsyncHttpClient().prepareGet(request).execute();
  return position;
}","@Override protected Position handlePosition(Position position){
  Device device=Context.getIdentityManager().getDeviceById(position.getDeviceId());
  String attributes=MiscFormatter.toJsonString(position.getAttributes());
  String request=url.replace(""String_Node_Str"",device.getUniqueId()).replace(""String_Node_Str"",String.valueOf(position.getDeviceId())).replace(""String_Node_Str"",String.valueOf(position.getProtocol())).replace(""String_Node_Str"",String.valueOf(position.getDeviceTime().getTime())).replace(""String_Node_Str"",String.valueOf(position.getFixTime().getTime())).replace(""String_Node_Str"",String.valueOf(position.getValid())).replace(""String_Node_Str"",String.valueOf(position.getLatitude())).replace(""String_Node_Str"",String.valueOf(position.getLongitude())).replace(""String_Node_Str"",String.valueOf(position.getAltitude())).replace(""String_Node_Str"",String.valueOf(position.getSpeed())).replace(""String_Node_Str"",String.valueOf(position.getCourse())).replace(""String_Node_Str"",calculateStatus(position));
  if (position.getAddress() != null) {
    try {
      request=request.replace(""String_Node_Str"",URLEncoder.encode(position.getAddress(),""String_Node_Str""));
    }
 catch (    UnsupportedEncodingException error) {
      Log.warning(error);
    }
  }
  if (request.contains(""String_Node_Str"")) {
    try {
      request=request.replace(""String_Node_Str"",URLEncoder.encode(attributes,""String_Node_Str""));
    }
 catch (    UnsupportedEncodingException error) {
      Log.warning(error);
    }
  }
  if (request.contains(""String_Node_Str"")) {
    request=request.replace(""String_Node_Str"",formatSentence(position));
  }
  Context.getAsyncHttpClient().prepareGet(request).execute();
  return position;
}",0.9924330616996508
156082,"public OpenChannelHandler(TrackerServer server){
  this.server=server;
}","private OpenChannelHandler(TrackerServer server){
  this.server=server;
}",0.9379310344827586
156083,"public ParseResult(long id,Position position){
  this.id=id;
  this.position=position;
}","private ParseResult(long id,Position position){
  this.id=id;
  this.position=position;
}",0.9491525423728814
156084,"@Override protected Object decode(Channel channel,SocketAddress remoteAddress,Object msg) throws Exception {
  ChannelBuffer buf=(ChannelBuffer)msg;
  buf.readUnsignedByte();
  int type=buf.readUnsignedShort();
  int flags=buf.readUnsignedShort();
  buf.skipBytes(6);
  buf.readUnsignedShort();
  return null;
}","@Override protected Object decode(Channel channel,SocketAddress remoteAddress,Object msg) throws Exception {
  ChannelBuffer buf=(ChannelBuffer)msg;
  buf.readUnsignedByte();
  buf.skipBytes(6);
  buf.readUnsignedShort();
  return null;
}",0.7978142076502732
156085,"private static String formatSentence(Position position){
  StringBuilder s=new StringBuilder(""String_Node_Str"");
  try (Formatter f=new Formatter(s,Locale.ENGLISH)){
    Calendar calendar=Calendar.getInstance(TimeZone.getTimeZone(""String_Node_Str""),Locale.ENGLISH);
    calendar.setTimeInMillis(position.getFixTime().getTime());
    f.format(""String_Node_Str"",calendar);
    double lat=position.getLatitude();
    double lon=position.getLongitude();
    f.format(""String_Node_Str"",(int)Math.abs(lat),Math.abs(lat) % 1 * 60,lat < 0 ? 'S' : 'N');
    f.format(""String_Node_Str"",(int)Math.abs(lon),Math.abs(lon) % 1 * 60,lon < 0 ? 'W' : 'E');
    f.format(""String_Node_Str"",position.getSpeed(),position.getCourse());
    f.format(""String_Node_Str"",calendar);
  }
   s.append(Checksum.nmea(s.toString()));
  return s.toString();
}","private static String formatSentence(Position position){
  StringBuilder s=new StringBuilder(""String_Node_Str"");
  try (Formatter f=new Formatter(s,Locale.ENGLISH)){
    Calendar calendar=Calendar.getInstance(TimeZone.getTimeZone(""String_Node_Str""),Locale.ENGLISH);
    calendar.setTimeInMillis(position.getFixTime().getTime());
    f.format(""String_Node_Str"",calendar);
    double lat=position.getLatitude();
    double lon=position.getLongitude();
    char hemisphere;
    if (lat < 0) {
      hemisphere='S';
    }
 else {
      hemisphere='N';
    }
    f.format(""String_Node_Str"",(int)Math.abs(lat),Math.abs(lat) % 1 * 60,hemisphere);
    if (lon < 0) {
      hemisphere='W';
    }
 else {
      hemisphere='E';
    }
    f.format(""String_Node_Str"",(int)Math.abs(lon),Math.abs(lon) % 1 * 60,hemisphere);
    f.format(""String_Node_Str"",position.getSpeed(),position.getCourse());
    f.format(""String_Node_Str"",calendar);
  }
   s.append(Checksum.nmea(s.toString()));
  return s.toString();
}",0.8028555738605162
156086,"public User login(String email,String password) throws SQLException {
  User user=QueryBuilder.create(dataSource,getQuery(""String_Node_Str"")).setString(""String_Node_Str"",email).executeQuerySingle(new User());
  return user != null && user.isPasswordValid(password) ? user : null;
}","public User login(String email,String password) throws SQLException {
  User user=QueryBuilder.create(dataSource,getQuery(""String_Node_Str"")).setString(""String_Node_Str"",email).executeQuerySingle(new User());
  if (user != null && user.isPasswordValid(password)) {
    return user;
  }
 else {
    return null;
  }
}",0.8710217755443886
156087,"public <T extends Factory>Collection<T> executeQuery(T prototype) throws SQLException {
  List<T> result=new LinkedList<>();
  if (query != null) {
    try {
      try (ResultSet resultSet=statement.executeQuery()){
        ResultSetMetaData resultMetaData=resultSet.getMetaData();
        List<ResultSetProcessor<T>> processors=new LinkedList<>();
        Method[] methods=prototype.getClass().getMethods();
        for (        final Method method : methods) {
          if (method.getName().startsWith(""String_Node_Str"") && method.getParameterTypes().length == 1) {
            final String name=method.getName().substring(3);
            boolean column=false;
            for (int i=1; i <= resultMetaData.getColumnCount(); i++) {
              if (name.equalsIgnoreCase(resultMetaData.getColumnLabel(i))) {
                column=true;
                break;
              }
            }
            if (!column) {
              continue;
            }
            Class<?> parameterType=method.getParameterTypes()[0];
            if (parameterType.equals(boolean.class)) {
              processors.add(new ResultSetProcessor<T>(){
                @Override public void process(                T object,                ResultSet resultSet) throws SQLException {
                  try {
                    method.invoke(object,resultSet.getBoolean(name));
                  }
 catch (                  IllegalAccessException|InvocationTargetException error) {
                    Log.warning(error);
                  }
                }
              }
);
            }
 else             if (parameterType.equals(int.class)) {
              processors.add(new ResultSetProcessor<T>(){
                @Override public void process(                T object,                ResultSet resultSet) throws SQLException {
                  try {
                    method.invoke(object,resultSet.getInt(name));
                  }
 catch (                  IllegalAccessException|InvocationTargetException error) {
                    Log.warning(error);
                  }
                }
              }
);
            }
 else             if (parameterType.equals(long.class)) {
              processors.add(new ResultSetProcessor<T>(){
                @Override public void process(                T object,                ResultSet resultSet) throws SQLException {
                  try {
                    method.invoke(object,resultSet.getLong(name));
                  }
 catch (                  IllegalAccessException|InvocationTargetException error) {
                    Log.warning(error);
                  }
                }
              }
);
            }
 else             if (parameterType.equals(double.class)) {
              processors.add(new ResultSetProcessor<T>(){
                @Override public void process(                T object,                ResultSet resultSet) throws SQLException {
                  try {
                    method.invoke(object,resultSet.getDouble(name));
                  }
 catch (                  IllegalAccessException|InvocationTargetException error) {
                    Log.warning(error);
                  }
                }
              }
);
            }
 else             if (parameterType.equals(String.class)) {
              processors.add(new ResultSetProcessor<T>(){
                @Override public void process(                T object,                ResultSet resultSet) throws SQLException {
                  try {
                    method.invoke(object,resultSet.getString(name));
                  }
 catch (                  IllegalAccessException|InvocationTargetException error) {
                    Log.warning(error);
                  }
                }
              }
);
            }
 else             if (parameterType.equals(Date.class)) {
              processors.add(new ResultSetProcessor<T>(){
                @Override public void process(                T object,                ResultSet resultSet) throws SQLException {
                  try {
                    Timestamp timestamp=resultSet.getTimestamp(name);
                    if (timestamp != null) {
                      method.invoke(object,new Date(timestamp.getTime()));
                    }
                  }
 catch (                  IllegalAccessException|InvocationTargetException error) {
                    Log.warning(error);
                  }
                }
              }
);
            }
 else             if (parameterType.equals(Map.class)) {
              processors.add(new ResultSetProcessor<T>(){
                @Override public void process(                T object,                ResultSet resultSet) throws SQLException {
                  try (JsonReader reader=Json.createReader(new StringReader(resultSet.getString(name)))){
                    method.invoke(object,MiscFormatter.fromJson(reader.readObject()));
                  }
 catch (                  IllegalAccessException|InvocationTargetException|JsonParsingException error) {
                    Log.warning(error);
                  }
                }
              }
);
            }
          }
        }
        while (resultSet.next()) {
          T object=(T)prototype.create();
          for (          ResultSetProcessor<T> processor : processors) {
            processor.process(object,resultSet);
          }
          result.add(object);
        }
      }
     }
  finally {
      statement.close();
      connection.close();
    }
  }
  return result;
}","public <T extends Factory>Collection<T> executeQuery(T prototype) throws SQLException {
  List<T> result=new LinkedList<>();
  if (query != null) {
    try {
      try (ResultSet resultSet=statement.executeQuery()){
        ResultSetMetaData resultMetaData=resultSet.getMetaData();
        List<ResultSetProcessor<T>> processors=new LinkedList<>();
        Method[] methods=prototype.getClass().getMethods();
        for (        final Method method : methods) {
          if (method.getName().startsWith(""String_Node_Str"") && method.getParameterTypes().length == 1) {
            final String name=method.getName().substring(3);
            boolean column=false;
            for (int i=1; i <= resultMetaData.getColumnCount(); i++) {
              if (name.equalsIgnoreCase(resultMetaData.getColumnLabel(i))) {
                column=true;
                break;
              }
            }
            if (!column) {
              continue;
            }
            addProcessors(processors,method.getParameterTypes()[0],method,name);
          }
        }
        while (resultSet.next()) {
          T object=(T)prototype.create();
          for (          ResultSetProcessor<T> processor : processors) {
            processor.process(object,resultSet);
          }
          result.add(object);
        }
      }
     }
  finally {
      statement.close();
      connection.close();
    }
  }
  return result;
}",0.3137931034482759
156088,"@Override public void handleUpstream(final ChannelHandlerContext ctx,ChannelEvent evt) throws Exception {
  if (!(evt instanceof MessageEvent)) {
    ctx.sendUpstream(evt);
    return;
  }
  final MessageEvent e=(MessageEvent)evt;
  Object message=e.getMessage();
  if (message instanceof Position) {
    final Position position=(Position)message;
    if (geocoder != null && (processInvalidPositions || position.getValid())) {
      geocoder.getAddress(addressFormat,position.getLatitude(),position.getLongitude(),new ReverseGeocoder.ReverseGeocoderCallback(){
        @Override public void onResult(        String address){
          position.setAddress(address);
          Channels.fireMessageReceived(ctx,position,e.getRemoteAddress());
        }
      }
);
    }
  }
 else {
    Channels.fireMessageReceived(ctx,message,e.getRemoteAddress());
  }
}","@Override public void handleUpstream(final ChannelHandlerContext ctx,ChannelEvent evt) throws Exception {
  if (!(evt instanceof MessageEvent)) {
    ctx.sendUpstream(evt);
    return;
  }
  final MessageEvent e=(MessageEvent)evt;
  Object message=e.getMessage();
  if (message instanceof Position) {
    final Position position=(Position)message;
    if (geocoder != null && (processInvalidPositions || position.getValid())) {
      geocoder.getAddress(addressFormat,position.getLatitude(),position.getLongitude(),new ReverseGeocoder.ReverseGeocoderCallback(){
        @Override public void onResult(        String address){
          position.setAddress(address);
          Channels.fireMessageReceived(ctx,position,e.getRemoteAddress());
        }
      }
);
    }
 else {
      Channels.fireMessageReceived(ctx,position,e.getRemoteAddress());
    }
  }
 else {
    Channels.fireMessageReceived(ctx,message,e.getRemoteAddress());
  }
}",0.9525404801786712
156089,"@Override protected Object decode(Channel channel,SocketAddress remoteAddress,Object msg) throws Exception {
  ChannelBuffer buf=(ChannelBuffer)msg;
  buf.skipBytes(2);
  buf.readUnsignedShort();
  int version=buf.readUnsignedByte();
  ChannelBuffer id=buf.readBytes(20);
  int type=ChannelBuffers.swapShort(buf.readShort());
  if (!identify(id.toString(Charset.defaultCharset()).trim(),channel,remoteAddress)) {
    return null;
  }
  if (version == 4) {
    if (type == MSG_SC_HEARTBEAT) {
      sendResponse(channel,remoteAddress,version,id,MSG_SC_HEARTBEAT_RESPONSE,null);
    }
 else     if (type == MSG_SC_LOGIN || type == MSG_SC_LOGOUT || type == MSG_SC_GPS || type == MSG_SC_ALARM || type == MSG_SC_CURRENT_LOCATION) {
      if (type == MSG_SC_LOGIN) {
        ChannelBuffer response=ChannelBuffers.directBuffer(ByteOrder.LITTLE_ENDIAN,10);
        response.writeInt(0xFFFFFFFF);
        response.writeShort(0);
        response.writeInt((int)(System.currentTimeMillis() / 1000));
        sendResponse(channel,remoteAddress,version,id,MSG_SC_LOGIN_RESPONSE,response);
      }
      if (type == MSG_SC_GPS) {
        buf.readUnsignedByte();
      }
 else       if (type == MSG_SC_ALARM) {
        buf.readUnsignedInt();
      }
 else       if (type == MSG_SC_CURRENT_LOCATION) {
        buf.readUnsignedShort();
      }
      buf.readUnsignedInt();
      buf.readUnsignedInt();
      long odometer=buf.readUnsignedInt();
      buf.readUnsignedInt();
      buf.readUnsignedInt();
      buf.readUnsignedShort();
      long status=buf.readUnsignedInt();
      buf.skipBytes(8);
      int count=buf.readUnsignedByte();
      List<Position> positions=new LinkedList<>();
      for (int i=0; i < count; i++) {
        Position position=readPosition(buf);
        position.set(Event.KEY_ODOMETER,odometer);
        position.set(Event.KEY_STATUS,status);
        positions.add(position);
      }
      if (!positions.isEmpty()) {
        return positions;
      }
    }
 else     if (type == MSG_SC_GPS_SLEEP || type == MSG_SC_AGPS_REQUEST) {
      return readPosition(buf);
    }
  }
 else {
    if (type == MSG_CC_HEARTBEAT) {
      sendResponse(channel,remoteAddress,version,id,MSG_CC_HEARTBEAT_RESPONSE,null);
      buf.readUnsignedByte();
      int count=buf.readUnsignedByte();
      List<Position> positions=new LinkedList<>();
      for (int i=0; i < count; i++) {
        Position position=readPosition(buf);
        position.set(Event.KEY_STATUS,buf.readUnsignedInt());
        position.set(Event.KEY_BATTERY,buf.readUnsignedByte());
        position.set(Event.KEY_ODOMETER,buf.readUnsignedInt());
        buf.readUnsignedByte();
        buf.readUnsignedByte();
        buf.readUnsignedByte();
        position.set(Event.KEY_LAC,buf.readUnsignedShort());
        position.set(Event.KEY_CELL,buf.readUnsignedShort());
        positions.add(position);
        return positions;
      }
    }
 else     if (type == MSG_CC_LOGIN) {
      sendResponse(channel,remoteAddress,version,id,MSG_CC_LOGIN_RESPONSE,null);
      Position position=readPosition(buf);
      position.set(Event.KEY_STATUS,buf.readUnsignedInt());
      position.set(Event.KEY_BATTERY,buf.readUnsignedByte());
      position.set(Event.KEY_ODOMETER,buf.readUnsignedInt());
      buf.readUnsignedByte();
      buf.readUnsignedByte();
      buf.readUnsignedByte();
      return position;
    }
  }
  return null;
}","@Override protected Object decode(Channel channel,SocketAddress remoteAddress,Object msg) throws Exception {
  ChannelBuffer buf=(ChannelBuffer)msg;
  buf.skipBytes(2);
  buf.readUnsignedShort();
  int version=buf.readUnsignedByte();
  ChannelBuffer id=buf.readBytes(20);
  int type=ChannelBuffers.swapShort(buf.readShort());
  if (!identify(id.toString(Charset.defaultCharset()).trim(),channel,remoteAddress)) {
    return null;
  }
  if (version == 4) {
    if (type == MSG_SC_HEARTBEAT) {
      sendResponse(channel,remoteAddress,version,id,MSG_SC_HEARTBEAT_RESPONSE,null);
    }
 else     if (type == MSG_SC_LOGIN || type == MSG_SC_LOGOUT || type == MSG_SC_GPS || type == MSG_SC_ALARM || type == MSG_SC_CURRENT_LOCATION) {
      if (type == MSG_SC_LOGIN) {
        ChannelBuffer response=ChannelBuffers.directBuffer(ByteOrder.LITTLE_ENDIAN,10);
        response.writeInt(0xFFFFFFFF);
        response.writeShort(0);
        response.writeInt((int)(System.currentTimeMillis() / 1000));
        sendResponse(channel,remoteAddress,version,id,MSG_SC_LOGIN_RESPONSE,response);
      }
      if (type == MSG_SC_GPS) {
        buf.readUnsignedByte();
      }
 else       if (type == MSG_SC_ALARM) {
        buf.readUnsignedInt();
      }
 else       if (type == MSG_SC_CURRENT_LOCATION) {
        buf.readUnsignedShort();
      }
      buf.readUnsignedInt();
      buf.readUnsignedInt();
      long odometer=buf.readUnsignedInt();
      buf.readUnsignedInt();
      buf.readUnsignedInt();
      buf.readUnsignedShort();
      long status=buf.readUnsignedInt();
      buf.skipBytes(8);
      int count=buf.readUnsignedByte();
      List<Position> positions=new LinkedList<>();
      for (int i=0; i < count; i++) {
        Position position=readPosition(buf);
        position.set(Event.KEY_ODOMETER,odometer);
        position.set(Event.KEY_STATUS,status);
        positions.add(position);
      }
      if (!positions.isEmpty()) {
        return positions;
      }
    }
 else     if (type == MSG_SC_GPS_SLEEP || type == MSG_SC_AGPS_REQUEST) {
      return readPosition(buf);
    }
  }
 else {
    if (type == MSG_CC_HEARTBEAT) {
      sendResponse(channel,remoteAddress,version,id,MSG_CC_HEARTBEAT_RESPONSE,null);
      buf.readUnsignedByte();
      int count=buf.readUnsignedByte();
      List<Position> positions=new LinkedList<>();
      for (int i=0; i < count; i++) {
        Position position=readPosition(buf);
        position.set(Event.KEY_STATUS,buf.readUnsignedInt());
        position.set(Event.KEY_BATTERY,buf.readUnsignedByte());
        position.set(Event.KEY_ODOMETER,buf.readUnsignedInt());
        buf.readUnsignedByte();
        buf.readUnsignedByte();
        buf.readUnsignedByte();
        position.set(Event.KEY_LAC,buf.readUnsignedShort());
        position.set(Event.KEY_CELL,buf.readUnsignedShort());
        positions.add(position);
      }
      return positions;
    }
 else     if (type == MSG_CC_LOGIN) {
      sendResponse(channel,remoteAddress,version,id,MSG_CC_LOGIN_RESPONSE,null);
      Position position=readPosition(buf);
      position.set(Event.KEY_STATUS,buf.readUnsignedInt());
      position.set(Event.KEY_BATTERY,buf.readUnsignedByte());
      position.set(Event.KEY_ODOMETER,buf.readUnsignedInt());
      buf.readUnsignedByte();
      buf.readUnsignedByte();
      buf.readUnsignedByte();
      return position;
    }
  }
  return null;
}",0.9926101093703812
156090,"@Override protected Object decode(Channel channel,SocketAddress remoteAddress,Object msg) throws Exception {
  String sentence=(String)msg;
  if (sentence.contains(""String_Node_Str"")) {
    if (channel != null) {
      channel.write(""String_Node_Str"",remoteAddress);
      Parser handshakeParser=new Parser(PATTERN_HANDSHAKE,sentence);
      if (handshakeParser.matches()) {
        identify(handshakeParser.next(),channel);
      }
    }
    return null;
  }
  if (sentence.length() == 15 && Character.isDigit(sentence.charAt(0))) {
    if (channel != null) {
      channel.write(""String_Node_Str"",remoteAddress);
    }
    return null;
  }
  Parser parser=new Parser(PATTERN,sentence);
  if (!parser.matches()) {
    return null;
  }
  Position position=new Position();
  position.setProtocol(getProtocolName());
  String imei=parser.next();
  if (!identify(imei,channel,remoteAddress)) {
    return null;
  }
  position.setDeviceId(getDeviceId());
  String alarm=parser.next();
  position.set(Event.KEY_ALARM,alarm);
  if (channel != null && alarm.equals(""String_Node_Str"")) {
    channel.write(""String_Node_Str"" + imei + ""String_Node_Str"",remoteAddress);
  }
  DateBuilder dateBuilder=new DateBuilder().setDate(parser.nextInt(),parser.nextInt(),parser.nextInt());
  int localHours=parser.nextInt();
  int localMinutes=parser.nextInt();
  String utcHours=parser.next();
  String utcMinutes=parser.next();
  dateBuilder.setTime(localHours,localMinutes,parser.nextInt(),parser.nextInt());
  if (utcHours != null && utcMinutes != null) {
    int deltaMinutes=(localHours - Integer.valueOf(utcHours)) * 60;
    deltaMinutes+=localMinutes - Integer.valueOf(utcMinutes);
    if (deltaMinutes <= -12 * 60) {
      deltaMinutes+=24 * 60;
    }
 else     if (deltaMinutes > 12 * 60) {
      deltaMinutes-=24 * 60;
    }
    dateBuilder.addMinute(-deltaMinutes);
  }
  position.setTime(dateBuilder.getDate());
  position.setValid(parser.next().equals(""String_Node_Str""));
  position.setLatitude(parser.nextCoordinate(Parser.CoordinateFormat.HEM_DEG_MIN_HEM));
  position.setLongitude(parser.nextCoordinate(Parser.CoordinateFormat.HEM_DEG_MIN_HEM));
  position.setSpeed(parser.nextDouble());
  position.setCourse(parser.nextDouble());
  position.setAltitude(parser.nextDouble());
  for (int i=1; i <= 5; i++) {
    position.set(Event.PREFIX_IO + i,parser.next());
  }
  return position;
}","@Override protected Object decode(Channel channel,SocketAddress remoteAddress,Object msg) throws Exception {
  String sentence=(String)msg;
  if (sentence.contains(""String_Node_Str"")) {
    if (channel != null) {
      channel.write(""String_Node_Str"",remoteAddress);
      Parser handshakeParser=new Parser(PATTERN_HANDSHAKE,sentence);
      if (handshakeParser.matches()) {
        identify(handshakeParser.next(),channel);
      }
    }
    return null;
  }
  if (sentence.length() == 15 && Character.isDigit(sentence.charAt(0))) {
    if (channel != null) {
      channel.write(""String_Node_Str"",remoteAddress);
    }
    return null;
  }
  Parser parser=new Parser(PATTERN,sentence);
  if (!parser.matches()) {
    return null;
  }
  Position position=new Position();
  position.setProtocol(getProtocolName());
  String imei=parser.next();
  if (!identify(imei,channel,remoteAddress)) {
    return null;
  }
  position.setDeviceId(getDeviceId());
  String alarm=parser.next();
  position.set(Event.KEY_ALARM,alarm);
  if (channel != null && alarm.equals(""String_Node_Str"")) {
    channel.write(""String_Node_Str"" + imei + ""String_Node_Str"",remoteAddress);
  }
  DateBuilder dateBuilder=new DateBuilder().setDate(parser.nextInt(),parser.nextInt(),parser.nextInt());
  int localHours=parser.nextInt();
  int localMinutes=parser.nextInt();
  String utcHours=parser.next();
  String utcMinutes=parser.next();
  dateBuilder.setTime(localHours,localMinutes,parser.nextInt(),parser.nextInt());
  if (utcHours != null && utcMinutes != null) {
    int deltaMinutes=(localHours - Integer.parseInt(utcHours)) * 60;
    deltaMinutes+=localMinutes - Integer.parseInt(utcMinutes);
    if (deltaMinutes <= -12 * 60) {
      deltaMinutes+=24 * 60;
    }
 else     if (deltaMinutes > 12 * 60) {
      deltaMinutes-=24 * 60;
    }
    dateBuilder.addMinute(-deltaMinutes);
  }
  position.setTime(dateBuilder.getDate());
  position.setValid(parser.next().equals(""String_Node_Str""));
  position.setLatitude(parser.nextCoordinate(Parser.CoordinateFormat.HEM_DEG_MIN_HEM));
  position.setLongitude(parser.nextCoordinate(Parser.CoordinateFormat.HEM_DEG_MIN_HEM));
  position.setSpeed(parser.nextDouble());
  position.setCourse(parser.nextDouble());
  position.setAltitude(parser.nextDouble());
  for (int i=1; i <= 5; i++) {
    position.set(Event.PREFIX_IO + i,parser.next());
  }
  return position;
}",0.99370012599748
156091,"@Test public void testDecode() throws Exception {
  GoSafeProtocolDecoder decoder=new GoSafeProtocolDecoder(new GoSafeProtocol());
  verifyPositions(decoder,text(""String_Node_Str""));
  verifyNothing(decoder,text(""String_Node_Str""));
  verifyPositions(decoder,text(""String_Node_Str""));
  verifyPositions(decoder,text(""String_Node_Str""));
  verifyPositions(decoder,text(""String_Node_Str""));
  verifyPositions(decoder,text(""String_Node_Str""));
}","@Test public void testDecode() throws Exception {
  GoSafeProtocolDecoder decoder=new GoSafeProtocolDecoder(new GoSafeProtocol());
  verifyPositions(decoder,text(""String_Node_Str""));
  verifyPositions(decoder,text(""String_Node_Str""));
  verifyNothing(decoder,text(""String_Node_Str""));
  verifyPositions(decoder,text(""String_Node_Str""));
  verifyPositions(decoder,text(""String_Node_Str""));
  verifyPositions(decoder,text(""String_Node_Str""));
  verifyPositions(decoder,text(""String_Node_Str""));
}",0.9444444444444444
156092,"@Test public void testDecode() throws Exception {
  GoSafeProtocolDecoder decoder=new GoSafeProtocolDecoder(new GoSafeProtocol());
  verifyPositions(decoder,text(""String_Node_Str""));
  verifyPositions(decoder,text(""String_Node_Str""));
  verifyNothing(decoder,text(""String_Node_Str""));
  verifyPositions(decoder,text(""String_Node_Str""));
  verifyPositions(decoder,text(""String_Node_Str""));
  verifyPositions(decoder,text(""String_Node_Str""));
  verifyPositions(decoder,text(""String_Node_Str""));
}","@Test public void testDecode() throws Exception {
  GoSafeProtocolDecoder decoder=new GoSafeProtocolDecoder(new GoSafeProtocol());
  verifyPositions(decoder,text(""String_Node_Str""));
  verifyPositions(decoder,text(""String_Node_Str""));
  verifyPositions(decoder,text(""String_Node_Str""));
  verifyNothing(decoder,text(""String_Node_Str""));
  verifyPositions(decoder,text(""String_Node_Str""));
  verifyPositions(decoder,text(""String_Node_Str""));
  verifyPositions(decoder,text(""String_Node_Str""));
}",0.8947368421052632
156093,"private Position decodePosition(Parser parser,Date time){
  Position position=new Position();
  position.setDeviceId(getDeviceId());
  position.setTime(time);
  position.set(Event.KEY_EVENT,parser.next());
  position.setValid(parser.next().equals(""String_Node_Str""));
  position.set(Event.KEY_SATELLITES,parser.next());
  position.setLatitude(parser.nextCoordinate(Parser.CoordinateFormat.HEM_DEG));
  position.setLongitude(parser.nextCoordinate(Parser.CoordinateFormat.HEM_DEG));
  position.setSpeed(parser.nextDouble());
  position.setCourse(parser.nextDouble());
  position.setAltitude(parser.nextDouble());
  position.set(Event.KEY_HDOP,parser.next());
  position.set(Event.KEY_ODOMETER,parser.next());
  position.set(Event.KEY_POWER,parser.next());
  position.set(Event.KEY_BATTERY,parser.next());
  String status=parser.next();
  if (status != null) {
    position.set(Event.KEY_IGNITION,BitUtil.check(Integer.parseInt(status,16),13));
    position.set(Event.KEY_STATUS,status);
  }
  return position;
}","private Position decodePosition(Parser parser,Date time){
  Position position=new Position();
  position.setDeviceId(getDeviceId());
  position.setTime(time);
  position.set(Event.KEY_EVENT,parser.next());
  position.setValid(parser.next().equals(""String_Node_Str""));
  position.set(Event.KEY_SATELLITES,parser.next());
  position.setLatitude(parser.nextCoordinate(Parser.CoordinateFormat.HEM_DEG));
  position.setLongitude(parser.nextCoordinate(Parser.CoordinateFormat.HEM_DEG));
  position.setSpeed(parser.nextDouble());
  position.setCourse(parser.nextDouble());
  position.setAltitude(parser.nextDouble());
  position.set(Event.KEY_HDOP,parser.next());
  position.set(Event.KEY_ODOMETER,parser.next());
  position.set(Event.KEY_POWER,parser.next());
  position.set(Event.KEY_BATTERY,parser.next());
  String status=parser.next();
  if (status != null) {
    position.set(Event.KEY_IGNITION,BitUtil.check(Integer.parseInt(status,16),13));
    position.set(Event.KEY_STATUS,status);
  }
  if (parser.hasNext()) {
    position.set(""String_Node_Str"",parser.next());
  }
  return position;
}",0.945212005717008
156094,"protected void verifyPositions(BaseProtocolDecoder decoder,Object object,Position position) throws Exception {
  Object decodedObject=decoder.decode(null,null,object);
  Assert.assertNotNull(decodedObject);
  Assert.assertTrue(decodedObject instanceof List);
  for (  Object item : (List)decodedObject) {
    verifyDecodedPosition(item,position);
  }
}","protected void verifyPositions(BaseProtocolDecoder decoder,Object object,Position position) throws Exception {
  Object decodedObject=decoder.decode(null,null,object);
  Assert.assertNotNull(decodedObject);
  Assert.assertTrue(decodedObject instanceof List);
  Assert.assertFalse(""String_Node_Str"",((List)decodedObject).isEmpty());
  for (  Object item : (List)decodedObject) {
    verifyDecodedPosition(item,position);
  }
}",0.906048906048906
156095,"@Test public void testDecode() throws Exception {
  GoSafeProtocolDecoder decoder=new GoSafeProtocolDecoder(new GoSafeProtocol());
  verifyNothing(decoder,text(""String_Node_Str""));
  verifyPositions(decoder,text(""String_Node_Str""));
  verifyPositions(decoder,text(""String_Node_Str""));
  verifyPositions(decoder,text(""String_Node_Str""));
  verifyPositions(decoder,text(""String_Node_Str""));
}","@Test public void testDecode() throws Exception {
  GoSafeProtocolDecoder decoder=new GoSafeProtocolDecoder(new GoSafeProtocol());
  verifyPositions(decoder,text(""String_Node_Str""));
  verifyNothing(decoder,text(""String_Node_Str""));
  verifyPositions(decoder,text(""String_Node_Str""));
  verifyPositions(decoder,text(""String_Node_Str""));
  verifyPositions(decoder,text(""String_Node_Str""));
  verifyPositions(decoder,text(""String_Node_Str""));
}",0.9375
156096,"@Override protected Object decode(Channel channel,SocketAddress remoteAddress,Object msg) throws Exception {
  ChannelBuffer buf=(ChannelBuffer)msg;
  int type=buf.getUnsignedByte(0);
  if (type == MSG_LOGIN) {
    byte[] bytes=new byte[19];
    buf.readBytes(bytes);
    String imei=ChannelBufferTools.readHexString(ChannelBuffers.wrappedBuffer(bytes,1,16),16).substring(1);
    if (!identify(imei,channel)) {
      return null;
    }
    if (channel != null) {
      byte[] response=""String_Node_Str"".getBytes(""String_Node_Str"");
      response=Arrays.copyOf(response,response.length + 1);
      response[response.length - 1]=crc(bytes,0,18);
      channel.write(ChannelBuffers.wrappedBuffer(response));
    }
  }
 else   if (type == MSG_LOCATION) {
    buf.readUnsignedByte();
    Position position=new Position();
    position.setProtocol(getProtocolName());
    position.setDeviceId(getDeviceId());
    short status=buf.readUnsignedByte();
    position.set(Event.KEY_ALARM,(status & 0x80) != 0);
    position.set(Event.KEY_BATTERY,status & 0x7F);
    buf.skipBytes(2);
    position.set(Event.PREFIX_TEMP + 1,buf.readByte());
    buf.skipBytes(2);
    buf.readByte();
    buf.readByte();
    buf.skipBytes(6);
    int valid=buf.readUnsignedByte();
    position.setValid((valid & 0xc0) != 0);
    position.set(Event.KEY_SATELLITES,valid & 0x3f);
    int timeOfDay=buf.readUnsignedByte() << 16 | buf.readUnsignedByte() << 8 | buf.readUnsignedByte();
    int date=buf.readUnsignedByte() << 16 | buf.readUnsignedByte() << 8 | buf.readUnsignedByte();
    Calendar time=Calendar.getInstance(TimeZone.getTimeZone(""String_Node_Str""));
    time.clear();
    time.set(Calendar.HOUR_OF_DAY,timeOfDay / 10000);
    time.set(Calendar.MINUTE,(timeOfDay - time.get(Calendar.HOUR_OF_DAY) * 10000) / 100);
    time.set(Calendar.SECOND,(timeOfDay - time.get(Calendar.HOUR_OF_DAY) * 10000 - time.get(Calendar.MINUTE) * 100));
    time.set(Calendar.DAY_OF_MONTH,date / 10000);
    time.set(Calendar.MONTH,(date - time.get(Calendar.DAY_OF_MONTH) * 10000) / 100 - 1);
    time.set(Calendar.YEAR,2000 + (date - time.get(Calendar.DAY_OF_MONTH) * 10000 - (time.get(Calendar.MONTH) + 1) * 100));
    position.setTime(time.getTime());
    position.setLatitude(convertCoordinate(buf.readUnsignedByte(),buf.readUnsignedByte() << 16 | buf.readUnsignedByte() << 8 | buf.readUnsignedByte()));
    position.setLongitude(convertCoordinate(buf.readUnsignedByte(),buf.readUnsignedByte() << 16 | buf.readUnsignedByte() << 8 | buf.readUnsignedByte()));
    position.setSpeed(buf.readUnsignedByte());
    position.setCourse(buf.readUnsignedByte() << 8 | buf.readUnsignedByte());
    buf.readUnsignedByte();
    return position;
  }
  return null;
}","@Override protected Object decode(Channel channel,SocketAddress remoteAddress,Object msg) throws Exception {
  ChannelBuffer buf=(ChannelBuffer)msg;
  int type=buf.getUnsignedByte(0);
  if (type == MSG_LOGIN) {
    byte[] bytes=new byte[19];
    buf.readBytes(bytes);
    String imei=ChannelBufferTools.readHexString(ChannelBuffers.wrappedBuffer(bytes,1,16),16).substring(1);
    if (!identify(imei,channel)) {
      return null;
    }
    if (channel != null) {
      byte[] response=""String_Node_Str"".getBytes(""String_Node_Str"");
      response=Arrays.copyOf(response,response.length + 1);
      response[response.length - 1]=checksum(bytes,0,18);
      channel.write(ChannelBuffers.wrappedBuffer(response));
    }
  }
 else   if (type == MSG_LOCATION) {
    buf.readUnsignedByte();
    Position position=new Position();
    position.setProtocol(getProtocolName());
    position.setDeviceId(getDeviceId());
    short status=buf.readUnsignedByte();
    position.set(Event.KEY_ALARM,(status & 0x80) != 0);
    position.set(Event.KEY_BATTERY,status & 0x7F);
    buf.skipBytes(2);
    position.set(Event.PREFIX_TEMP + 1,buf.readByte());
    buf.skipBytes(2);
    buf.readByte();
    buf.readByte();
    buf.skipBytes(6);
    int valid=buf.readUnsignedByte();
    position.setValid((valid & 0xc0) != 0);
    position.set(Event.KEY_SATELLITES,valid & 0x3f);
    int timeOfDay=buf.readUnsignedByte() << 16 | buf.readUnsignedByte() << 8 | buf.readUnsignedByte();
    int date=buf.readUnsignedByte() << 16 | buf.readUnsignedByte() << 8 | buf.readUnsignedByte();
    Calendar time=Calendar.getInstance(TimeZone.getTimeZone(""String_Node_Str""));
    time.clear();
    time.set(Calendar.HOUR_OF_DAY,timeOfDay / 10000);
    time.set(Calendar.MINUTE,(timeOfDay - time.get(Calendar.HOUR_OF_DAY) * 10000) / 100);
    time.set(Calendar.SECOND,(timeOfDay - time.get(Calendar.HOUR_OF_DAY) * 10000 - time.get(Calendar.MINUTE) * 100));
    time.set(Calendar.DAY_OF_MONTH,date / 10000);
    time.set(Calendar.MONTH,(date - time.get(Calendar.DAY_OF_MONTH) * 10000) / 100 - 1);
    time.set(Calendar.YEAR,2000 + (date - time.get(Calendar.DAY_OF_MONTH) * 10000 - (time.get(Calendar.MONTH) + 1) * 100));
    position.setTime(time.getTime());
    position.setLatitude(convertCoordinate(buf.readUnsignedByte(),buf.readUnsignedByte() << 16 | buf.readUnsignedByte() << 8 | buf.readUnsignedByte()));
    position.setLongitude(convertCoordinate(buf.readUnsignedByte(),buf.readUnsignedByte() << 16 | buf.readUnsignedByte() << 8 | buf.readUnsignedByte()));
    position.setSpeed(buf.readUnsignedByte());
    position.setCourse(buf.readUnsignedByte() << 8 | buf.readUnsignedByte());
    buf.readUnsignedByte();
    return position;
  }
  return null;
}",0.9987111029276377
156097,"@Override protected Object decode(Channel channel,SocketAddress remoteAddress,Object msg) throws Exception {
  ChannelBuffer buf=(ChannelBuffer)msg;
  int apiNumber=buf.readUnsignedShort();
  int commandType=buf.readUnsignedByte();
  int messageType=buf.getUnsignedByte(buf.readerIndex()) >> 4;
  boolean needAck=(buf.readUnsignedByte() & 0xf) == 1;
  long mask=defaultMask;
  if (buf.readUnsignedByte() == 4) {
    mask=buf.readUnsignedInt();
  }
  if (apiNumber == 5 && commandType == 2 && messageType == 1 && BitUtil.check(mask,0)) {
    Position position=new Position();
    position.setProtocol(getProtocolName());
    if (BitUtil.check(mask,1)) {
      position.set(Event.KEY_STATUS,buf.readUnsignedInt());
    }
    String id=null;
    if (BitUtil.check(mask,23)) {
      id=buf.toString(buf.readerIndex(),8,Charset.defaultCharset()).trim();
      buf.skipBytes(8);
    }
 else     if (BitUtil.check(mask,2)) {
      id=buf.toString(buf.readerIndex(),22,Charset.defaultCharset()).trim();
      buf.skipBytes(22);
    }
 else {
      Log.warning(""String_Node_Str"");
      return null;
    }
    if (!identify(id,channel)) {
      return null;
    }
    position.setDeviceId(getDeviceId());
    if (BitUtil.check(mask,3)) {
      buf.readUnsignedShort();
    }
    if (BitUtil.check(mask,4)) {
      buf.readUnsignedShort();
    }
    if (BitUtil.check(mask,5)) {
      buf.readUnsignedShort();
    }
    if (BitUtil.check(mask,7)) {
      buf.readUnsignedByte();
    }
    Calendar time=Calendar.getInstance(TimeZone.getTimeZone(""String_Node_Str""));
    time.clear();
    if (BitUtil.check(mask,8)) {
      time.set(Calendar.DAY_OF_MONTH,buf.readUnsignedByte());
      time.set(Calendar.MONTH,buf.readUnsignedByte() - 1);
      time.set(Calendar.YEAR,2000 + buf.readUnsignedByte());
    }
    if (BitUtil.check(mask,9)) {
      position.setValid(buf.readUnsignedByte() == 1);
    }
    if (BitUtil.check(mask,10)) {
      position.setLatitude(convertCoordinate(buf.readUnsignedInt()));
    }
    if (BitUtil.check(mask,11)) {
      position.setLongitude(convertCoordinate(buf.readUnsignedInt()));
    }
    if (BitUtil.check(mask,12)) {
      position.setSpeed(buf.readUnsignedShort() / 10.0);
    }
    if (BitUtil.check(mask,13)) {
      position.setCourse(buf.readUnsignedShort() / 10.0);
    }
    if (BitUtil.check(mask,14)) {
      time.set(Calendar.HOUR_OF_DAY,buf.readUnsignedByte());
      time.set(Calendar.MINUTE,buf.readUnsignedByte());
      time.set(Calendar.SECOND,buf.readUnsignedByte());
    }
    position.setTime(time.getTime());
    if (BitUtil.check(mask,15)) {
      position.setAltitude(buf.readMedium());
    }
    if (BitUtil.check(mask,16)) {
      position.set(Event.KEY_SATELLITES,buf.readUnsignedByte());
    }
    if (BitUtil.check(mask,17)) {
      buf.readUnsignedShort();
    }
    if (BitUtil.check(mask,20)) {
      position.set(""String_Node_Str"",buf.readUnsignedInt());
    }
    if (BitUtil.check(mask,21)) {
      position.set(Event.KEY_ODOMETER,buf.readUnsignedInt());
    }
    if (BitUtil.check(mask,22)) {
      buf.skipBytes(6);
    }
    if (BitUtil.check(mask,24)) {
      position.set(Event.KEY_POWER,buf.readUnsignedShort() / 1000.0);
    }
    if (BitUtil.check(mask,25)) {
      buf.skipBytes(18);
    }
    if (BitUtil.check(mask,26)) {
      buf.skipBytes(54);
    }
    if (BitUtil.check(mask,28)) {
      position.set(Event.KEY_INDEX,buf.readUnsignedShort());
    }
    return position;
  }
  return null;
}","@Override protected Object decode(Channel channel,SocketAddress remoteAddress,Object msg) throws Exception {
  ChannelBuffer buf=(ChannelBuffer)msg;
  int apiNumber=buf.readUnsignedShort();
  int commandType=buf.readUnsignedByte();
  int messageType=BitUtil.from(buf.readUnsignedByte(),4);
  long mask=defaultMask;
  if (buf.readUnsignedByte() == 4) {
    mask=buf.readUnsignedInt();
  }
  if (apiNumber == 5 && commandType == 2 && messageType == 1 && BitUtil.check(mask,0)) {
    Position position=new Position();
    position.setProtocol(getProtocolName());
    if (BitUtil.check(mask,1)) {
      position.set(Event.KEY_STATUS,buf.readUnsignedInt());
    }
    String id;
    if (BitUtil.check(mask,23)) {
      id=buf.toString(buf.readerIndex(),8,Charset.defaultCharset()).trim();
      buf.skipBytes(8);
    }
 else     if (BitUtil.check(mask,2)) {
      id=buf.toString(buf.readerIndex(),22,Charset.defaultCharset()).trim();
      buf.skipBytes(22);
    }
 else {
      Log.warning(""String_Node_Str"");
      return null;
    }
    if (!identify(id,channel)) {
      return null;
    }
    position.setDeviceId(getDeviceId());
    if (BitUtil.check(mask,3)) {
      buf.readUnsignedShort();
    }
    if (BitUtil.check(mask,4)) {
      buf.readUnsignedShort();
    }
    if (BitUtil.check(mask,5)) {
      buf.readUnsignedShort();
    }
    if (BitUtil.check(mask,7)) {
      buf.readUnsignedByte();
    }
    DateBuilder dateBuilder=new DateBuilder();
    if (BitUtil.check(mask,8)) {
      dateBuilder.setDateReverse(buf.readUnsignedByte(),buf.readUnsignedByte(),buf.readUnsignedByte());
    }
    if (BitUtil.check(mask,9)) {
      position.setValid(buf.readUnsignedByte() == 1);
    }
    if (BitUtil.check(mask,10)) {
      position.setLatitude(convertCoordinate(buf.readUnsignedInt()));
    }
    if (BitUtil.check(mask,11)) {
      position.setLongitude(convertCoordinate(buf.readUnsignedInt()));
    }
    if (BitUtil.check(mask,12)) {
      position.setSpeed(buf.readUnsignedShort() / 10.0);
    }
    if (BitUtil.check(mask,13)) {
      position.setCourse(buf.readUnsignedShort() / 10.0);
    }
    if (BitUtil.check(mask,14)) {
      dateBuilder.setTime(buf.readUnsignedByte(),buf.readUnsignedByte(),buf.readUnsignedByte());
    }
    position.setTime(dateBuilder.getDate());
    if (BitUtil.check(mask,15)) {
      position.setAltitude(buf.readMedium());
    }
    if (BitUtil.check(mask,16)) {
      position.set(Event.KEY_SATELLITES,buf.readUnsignedByte());
    }
    if (BitUtil.check(mask,17)) {
      buf.readUnsignedShort();
    }
    if (BitUtil.check(mask,20)) {
      position.set(""String_Node_Str"",buf.readUnsignedInt());
    }
    if (BitUtil.check(mask,21)) {
      position.set(Event.KEY_ODOMETER,buf.readUnsignedInt());
    }
    if (BitUtil.check(mask,22)) {
      buf.skipBytes(6);
    }
    if (BitUtil.check(mask,24)) {
      position.set(Event.KEY_POWER,buf.readUnsignedShort() / 1000.0);
    }
    if (BitUtil.check(mask,25)) {
      buf.skipBytes(18);
    }
    if (BitUtil.check(mask,26)) {
      buf.skipBytes(54);
    }
    if (BitUtil.check(mask,28)) {
      position.set(Event.KEY_INDEX,buf.readUnsignedShort());
    }
    return position;
  }
  return null;
}",0.8935212957408518
156098,"@Override protected Object decode(Channel channel,SocketAddress remoteAddress,Object msg) throws Exception {
  String sentence=(String)msg;
  if (sentence.startsWith(""String_Node_Str"")) {
    if (!identify(sentence.substring(14,14 + 15),channel)) {
      return null;
    }
    if (channel != null) {
      channel.write(""String_Node_Str"" + sentence.substring(13) + ""String_Node_Str"");
    }
  }
 else   if (sentence.startsWith(""String_Node_Str"")) {
  }
 else   if (hasDeviceId()) {
    Matcher parser=PATTERN.matcher(sentence);
    if (!parser.matches()) {
      return null;
    }
    Position position=new Position();
    position.setProtocol(getProtocolName());
    position.setDeviceId(getDeviceId());
    Integer index=1;
    Calendar time=Calendar.getInstance(TimeZone.getTimeZone(""String_Node_Str""));
    time.clear();
    time.set(Calendar.HOUR_OF_DAY,Integer.parseInt(parser.group(index++)));
    time.set(Calendar.MINUTE,Integer.parseInt(parser.group(index++)));
    time.set(Calendar.SECOND,Integer.parseInt(parser.group(index++)));
    position.setValid(parser.group(index++).compareTo(""String_Node_Str"") == 0);
    Double latitude=Double.parseDouble(parser.group(index++));
    latitude+=Double.parseDouble(parser.group(index++)) / 60;
    if (parser.group(index++).compareTo(""String_Node_Str"") == 0)     latitude=-latitude;
    position.setLatitude(latitude);
    Double longitude=Double.parseDouble(parser.group(index++));
    longitude+=Double.parseDouble(parser.group(index++)) / 60;
    if (parser.group(index++).compareTo(""String_Node_Str"") == 0)     longitude=-longitude;
    position.setLongitude(longitude);
    position.setSpeed(Double.parseDouble(parser.group(index++)));
    time.set(Calendar.DAY_OF_MONTH,Integer.parseInt(parser.group(index++)));
    time.set(Calendar.MONTH,Integer.parseInt(parser.group(index++)) - 1);
    time.set(Calendar.YEAR,2000 + Integer.parseInt(parser.group(index++)));
    position.setTime(time.getTime());
    return position;
  }
  return null;
}","@Override protected Object decode(Channel channel,SocketAddress remoteAddress,Object msg) throws Exception {
  String sentence=(String)msg;
  if (sentence.startsWith(""String_Node_Str"")) {
    if (!identify(sentence.substring(14,14 + 15),channel)) {
      return null;
    }
    if (channel != null) {
      channel.write(""String_Node_Str"" + sentence.substring(13) + ""String_Node_Str"");
    }
  }
 else   if (hasDeviceId()) {
    Parser parser=new Parser(PATTERN,sentence);
    if (!parser.matches()) {
      return null;
    }
    Position position=new Position();
    position.setProtocol(getProtocolName());
    position.setDeviceId(getDeviceId());
    DateBuilder dateBuilder=new DateBuilder().setTime(parser.nextInt(),parser.nextInt(),parser.nextInt());
    position.setValid(parser.next().equals(""String_Node_Str""));
    position.setLatitude(parser.nextCoordinate());
    position.setLongitude(parser.nextCoordinate());
    position.setSpeed(parser.nextDouble());
    dateBuilder.setDateReverse(parser.nextInt(),parser.nextInt(),parser.nextInt());
    position.setTime(dateBuilder.getDate());
    return position;
  }
  return null;
}",0.3392743475493316
156099,"private void decodeGps(Position position,ChannelBuffer buf){
  DateBuilder dateBuilder=new DateBuilder(timeZone).setDate(buf.readUnsignedByte(),buf.readUnsignedByte(),buf.readUnsignedByte()).setTime(buf.readUnsignedByte(),buf.readUnsignedByte(),buf.readUnsignedByte());
  position.setTime(dateBuilder.getDate());
  int length=buf.readUnsignedByte();
  position.set(Event.KEY_SATELLITES,BitUtil.to(length,4));
  length=BitUtil.from(length,4);
  double latitude=buf.readUnsignedInt() / 60.0 / 30000.0;
  double longitude=buf.readUnsignedInt() / 60.0 / 30000.0;
  position.setSpeed(UnitsConverter.knotsFromKph(buf.readUnsignedByte()));
  int flags=buf.readUnsignedShort();
  position.setCourse(BitUtil.to(flags,10));
  position.setValid(BitUtil.check(flags,12));
  if (BitUtil.check(flags,10)) {
    latitude=-latitude;
  }
  if (BitUtil.check(flags,11)) {
    longitude=-longitude;
  }
  position.setLatitude(latitude);
  position.setLongitude(longitude);
  if (BitUtil.check(flags,14)) {
    position.set(Event.KEY_IGNITION,BitUtil.check(flags,15));
  }
  buf.skipBytes(length - 12);
}","private void decodeGps(Position position,ChannelBuffer buf){
  DateBuilder dateBuilder=new DateBuilder(timeZone).setDate(buf.readUnsignedByte(),buf.readUnsignedByte(),buf.readUnsignedByte()).setTime(buf.readUnsignedByte(),buf.readUnsignedByte(),buf.readUnsignedByte());
  position.setTime(dateBuilder.getDate());
  int length=buf.readUnsignedByte();
  position.set(Event.KEY_SATELLITES,BitUtil.to(length,4));
  length=BitUtil.from(length,4);
  double latitude=buf.readUnsignedInt() / 60.0 / 30000.0;
  double longitude=buf.readUnsignedInt() / 60.0 / 30000.0;
  position.setSpeed(UnitsConverter.knotsFromKph(buf.readUnsignedByte()));
  int flags=buf.readUnsignedShort();
  position.setCourse(BitUtil.to(flags,10));
  position.setValid(BitUtil.check(flags,12));
  if (!BitUtil.check(flags,10)) {
    latitude=-latitude;
  }
  if (BitUtil.check(flags,11)) {
    longitude=-longitude;
  }
  position.setLatitude(latitude);
  position.setLongitude(longitude);
  if (BitUtil.check(flags,14)) {
    position.set(Event.KEY_IGNITION,BitUtil.check(flags,15));
  }
  buf.skipBytes(length - 12);
}",0.999538958045182
156100,"private void verifyDecodedPosition(Object decodedObject){
  Assert.assertNotNull(decodedObject);
  Assert.assertTrue(decodedObject instanceof Position);
  Position position=(Position)decodedObject;
  Assert.assertNotNull(position.getFixTime());
  Assert.assertTrue(position.getFixTime().after(new Date(946684800000L)));
  Assert.assertTrue(position.getFixTime().getTime() < System.currentTimeMillis() + 25 * 3600000);
  Assert.assertTrue(position.getLatitude() >= -90);
  Assert.assertTrue(position.getLatitude() <= 90);
  Assert.assertTrue(position.getLongitude() >= -180);
  Assert.assertTrue(position.getLongitude() <= 180);
  Assert.assertTrue(position.getAltitude() >= -12262);
  Assert.assertTrue(position.getAltitude() <= 18000);
  Assert.assertTrue(position.getSpeed() >= 0);
  Assert.assertTrue(position.getSpeed() <= 869);
  Assert.assertTrue(position.getCourse() >= 0);
  Assert.assertTrue(position.getCourse() <= 360);
}","private void verifyDecodedPosition(Object decodedObject){
  Assert.assertNotNull(decodedObject);
  Assert.assertTrue(decodedObject instanceof Position);
  Position position=(Position)decodedObject;
  Assert.assertNotNull(position.getFixTime());
  Assert.assertTrue(""String_Node_Str"",position.getFixTime().after(new Date(946684800000L)));
  Assert.assertTrue(""String_Node_Str"",position.getFixTime().getTime() < System.currentTimeMillis() + 25 * 3600000);
  Assert.assertTrue(""String_Node_Str"",position.getLatitude() >= -90);
  Assert.assertTrue(""String_Node_Str"",position.getLatitude() <= 90);
  Assert.assertTrue(""String_Node_Str"",position.getLongitude() >= -180);
  Assert.assertTrue(""String_Node_Str"",position.getLongitude() <= 180);
  Assert.assertTrue(""String_Node_Str"",position.getAltitude() >= -12262);
  Assert.assertTrue(""String_Node_Str"",position.getAltitude() <= 18000);
  Assert.assertTrue(""String_Node_Str"",position.getSpeed() >= 0);
  Assert.assertTrue(""String_Node_Str"",position.getSpeed() <= 869);
  Assert.assertTrue(""String_Node_Str"",position.getCourse() >= 0);
  Assert.assertTrue(""String_Node_Str"",position.getCourse() <= 360);
}",0.8961538461538462
156101,"protected ChannelBuffer binary(ByteOrder endianness,String... data){
  return ChannelBuffers.wrappedBuffer(endianness,ChannelBufferTools.convertHexString(String.join(""String_Node_Str"",data)));
}","protected ChannelBuffer binary(ByteOrder endianness,String... data){
  return ChannelBuffers.wrappedBuffer(endianness,ChannelBufferTools.convertHexString(concatenateStrings(data)));
}",0.9071618037135278
156102,"protected Position position(Date time,boolean valid,double lat,double lon,double altitude,double speed,double course){
  Position position=new Position();
  position.setDeviceTime(time);
  position.setFixTime(time);
  position.setValid(valid);
  position.setLatitude(lat);
  position.setLongitude(lon);
  position.setAltitude(altitude);
  position.setSpeed(speed);
  position.setCourse(course);
  return position;
}","protected Position position(String time,boolean valid,double lat,double lon) throws ParseException {
  Position position=new Position();
  if (time != null) {
    DateFormat dateFormat=new SimpleDateFormat(""String_Node_Str"");
    position.setTime(dateFormat.parse(time));
  }
  position.setValid(valid);
  position.setLatitude(lat);
  position.setLongitude(lon);
  return position;
}",0.4962406015037593
156103,"protected String text(String... data){
  return String.join(""String_Node_Str"",data);
}","protected String text(String... data){
  return concatenateStrings(data);
}",0.782608695652174
156104,"protected ChannelBuffer buffer(String... data){
  return ChannelBuffers.copiedBuffer(String.join(""String_Node_Str"",data),Charset.defaultCharset());
}","protected ChannelBuffer buffer(String... data){
  return ChannelBuffers.copiedBuffer(concatenateStrings(data),Charset.defaultCharset());
}",0.8780487804878049
156105,"@Test public void testDecode() throws Exception {
  Gt06ProtocolDecoder decoder=new Gt06ProtocolDecoder(new Gt06Protocol());
  verifyNothing(decoder,binary(""String_Node_Str""));
  verifyAttributes(decoder,binary(""String_Node_Str""));
  verifyPosition(decoder,binary(""String_Node_Str""));
  verifyPosition(decoder,binary(""String_Node_Str""));
  verifyNothing(decoder,binary(""String_Node_Str""));
  verifyNothing(decoder,binary(""String_Node_Str""));
  verifyNothing(decoder,binary(""String_Node_Str""));
  verifyPosition(decoder,binary(""String_Node_Str""));
  verifyPosition(decoder,binary(""String_Node_Str""));
  verifyPosition(decoder,binary(""String_Node_Str""));
  verifyNothing(decoder,binary(""String_Node_Str""));
  verifyPosition(decoder,binary(""String_Node_Str""));
  verifyPosition(decoder,binary(""String_Node_Str""));
  verifyNothing(decoder,binary(""String_Node_Str""));
  verifyNothing(decoder,binary(""String_Node_Str""));
  verifyPosition(decoder,binary(""String_Node_Str""));
}","@Test public void testDecode() throws Exception {
  Gt06ProtocolDecoder decoder=new Gt06ProtocolDecoder(new Gt06Protocol());
  verifyNothing(decoder,binary(""String_Node_Str""));
  verifyAttributes(decoder,binary(""String_Node_Str""));
  verifyPosition(decoder,binary(""String_Node_Str""),position(""String_Node_Str"",true,54.94535,24.01762));
  verifyPosition(decoder,binary(""String_Node_Str""));
  verifyPosition(decoder,binary(""String_Node_Str""));
  verifyNothing(decoder,binary(""String_Node_Str""));
  verifyNothing(decoder,binary(""String_Node_Str""));
  verifyNothing(decoder,binary(""String_Node_Str""));
  verifyPosition(decoder,binary(""String_Node_Str""));
  verifyPosition(decoder,binary(""String_Node_Str""));
  verifyPosition(decoder,binary(""String_Node_Str""));
  verifyNothing(decoder,binary(""String_Node_Str""));
  verifyPosition(decoder,binary(""String_Node_Str""));
  verifyPosition(decoder,binary(""String_Node_Str""));
  verifyNothing(decoder,binary(""String_Node_Str""));
  verifyNothing(decoder,binary(""String_Node_Str""));
  verifyPosition(decoder,binary(""String_Node_Str""));
}",0.9490695396669931
156106,"public boolean hasNext(){
  if (matcher.group(position) != null) {
    return true;
  }
 else {
    position++;
    return false;
  }
}","public boolean hasNext(int number){
  if (matcher.group(position) != null) {
    return true;
  }
 else {
    position+=number;
    return false;
  }
}",0.9370629370629372
156107,"@Override protected Object decode(Channel channel,SocketAddress remoteAddress,Object msg) throws Exception {
  String sentence=(String)msg;
  Matcher parser=PATTERN.matcher(sentence);
  if (!parser.matches()) {
    return null;
  }
  Position position=new Position();
  position.setProtocol(getProtocolName());
  Integer index=1;
  if (!identify(parser.group(index++),channel)) {
    return null;
  }
  position.setDeviceId(getDeviceId());
  Calendar time=Calendar.getInstance(TimeZone.getTimeZone(""String_Node_Str""));
  time.clear();
  time.set(Calendar.DAY_OF_MONTH,Integer.parseInt(parser.group(index++)));
  time.set(Calendar.MONTH,Integer.parseInt(parser.group(index++)) - 1);
  time.set(Calendar.YEAR,2000 + Integer.parseInt(parser.group(index++)));
  time.set(Calendar.HOUR_OF_DAY,Integer.parseInt(parser.group(index++)));
  time.set(Calendar.MINUTE,Integer.parseInt(parser.group(index++)));
  time.set(Calendar.SECOND,Integer.parseInt(parser.group(index++)));
  position.setTime(time.getTime());
  Double latitude=Double.parseDouble(parser.group(index++));
  latitude+=Double.parseDouble(parser.group(index++) + parser.group(index++)) / 600000;
  if (parser.group(index++).compareTo(""String_Node_Str"") == 0)   latitude=-latitude;
  position.setLatitude(latitude);
  Double longitude=Double.parseDouble(parser.group(index++));
  longitude+=Double.parseDouble(parser.group(index++) + parser.group(index++)) / 600000;
  if (parser.group(index++).compareTo(""String_Node_Str"") == 0)   longitude=-longitude;
  position.setLongitude(longitude);
  position.setSpeed(Double.parseDouble(parser.group(index++)));
  position.setCourse(Double.parseDouble(parser.group(index++)));
  if (parser.group(index) != null) {
    position.set(Event.KEY_ODOMETER,Integer.parseInt(parser.group(index++)));
    position.set(Event.KEY_IGNITION,Integer.parseInt(parser.group(index++)));
    position.set(Event.KEY_INPUT,Integer.parseInt(parser.group(index++)) + Integer.parseInt(parser.group(index++)) << 1);
    position.set(Event.KEY_FUEL,Integer.parseInt(parser.group(index++)));
  }
 else {
    index+=5;
  }
  if (parser.group(index) != null) {
    position.set(Event.KEY_CHARGE,Integer.parseInt(parser.group(index++)) == 1);
    position.set(Event.KEY_IGNITION,Integer.parseInt(parser.group(index++)));
    position.set(Event.KEY_INPUT,Integer.parseInt(parser.group(index++)));
    position.set(Event.KEY_RFID,parser.group(index++));
    position.set(Event.KEY_ODOMETER,Integer.parseInt(parser.group(index++)));
    position.set(Event.PREFIX_TEMP + 1,Integer.parseInt(parser.group(index++)));
    position.set(Event.KEY_FUEL,Integer.parseInt(parser.group(index++)));
    position.set(""String_Node_Str"",Integer.parseInt(parser.group(index++)) == 1);
    position.set(Event.KEY_OUTPUT,Integer.parseInt(parser.group(index++)) + Integer.parseInt(parser.group(index++)) << 1);
  }
 else {
    index+=10;
  }
  position.setValid(parser.group(index++).compareTo(""String_Node_Str"") == 0);
  return position;
}","@Override protected Object decode(Channel channel,SocketAddress remoteAddress,Object msg) throws Exception {
  Parser parser=new Parser(PATTERN,(String)msg);
  if (!parser.matches()) {
    return null;
  }
  Position position=new Position();
  position.setProtocol(getProtocolName());
  if (!identify(parser.next(),channel)) {
    return null;
  }
  position.setDeviceId(getDeviceId());
  DateBuilder dateBuilder=new DateBuilder().setDateReverse(parser.nextInt(),parser.nextInt(),parser.nextInt()).setTime(parser.nextInt(),parser.nextInt(),parser.nextInt());
  position.setTime(dateBuilder.getDate());
  position.setLatitude(parser.nextCoordinate(Parser.CoordinateFormat.DEG_MIN_MIN_HEM));
  position.setLongitude(parser.nextCoordinate(Parser.CoordinateFormat.DEG_MIN_MIN_HEM));
  position.setSpeed(parser.nextDouble());
  position.setCourse(parser.nextDouble());
  if (parser.hasNext(5)) {
    position.set(Event.KEY_ODOMETER,parser.nextInt());
    position.set(Event.KEY_IGNITION,parser.nextInt());
    position.set(Event.KEY_INPUT,parser.nextInt() + parser.nextInt() << 1);
    position.set(Event.KEY_FUEL,parser.nextInt());
  }
  if (parser.hasNext(10)) {
    position.set(Event.KEY_CHARGE,parser.nextInt() == 1);
    position.set(Event.KEY_IGNITION,parser.nextInt());
    position.set(Event.KEY_INPUT,parser.nextInt());
    position.set(Event.KEY_RFID,parser.next());
    position.set(Event.KEY_ODOMETER,parser.nextInt());
    position.set(Event.PREFIX_TEMP + 1,parser.nextInt());
    position.set(Event.KEY_FUEL,parser.nextInt());
    position.set(""String_Node_Str"",parser.nextInt() == 1);
    position.set(Event.KEY_OUTPUT,parser.nextInt() + parser.nextInt() << 1);
  }
  position.setValid(parser.next().equals(""String_Node_Str""));
  return position;
}",0.4158415841584158
156108,"private String readSerialNumber(ChannelBuffer buf){
  int b1=buf.readUnsignedByte();
  int b2=buf.readUnsignedByte();
  if (b2 > 0x80)   b2-=0x80;
  int b3=buf.readUnsignedByte();
  if (b3 > 0x80)   b3-=0x80;
  int b4=buf.readUnsignedByte();
  String serialNumber=String.format(""String_Node_Str"",b1,b2,b3,b4);
  return String.valueOf(Long.parseLong(serialNumber));
}","private String readSerialNumber(ChannelBuffer buf){
  int b1=buf.readUnsignedByte();
  int b2=buf.readUnsignedByte();
  if (b2 > 0x80) {
    b2-=0x80;
  }
  int b3=buf.readUnsignedByte();
  if (b3 > 0x80) {
    b3-=0x80;
  }
  int b4=buf.readUnsignedByte();
  String serialNumber=String.format(""String_Node_Str"",b1,b2,b3,b4);
  return String.valueOf(Long.parseLong(serialNumber));
}",0.9786096256684492
156109,"@Override protected Object decode(Channel channel,SocketAddress remoteAddress,Object msg) throws Exception {
  ChannelBuffer buf=(ChannelBuffer)msg;
  buf.readUnsignedShort();
  int type=buf.readUnsignedShort();
  if (type == MSG_SHAKE_HAND && channel != null) {
    ChannelBuffer response=ChannelBuffers.dynamicBuffer(ByteOrder.LITTLE_ENDIAN,13);
    response.writeBytes(ChannelBuffers.copiedBuffer(ByteOrder.LITTLE_ENDIAN,""String_Node_Str"",Charset.defaultCharset()));
    response.writeByte(0);
    response.writeShort(response.capacity());
    response.writeShort(MSG_SHAKE_HAND_RESPONSE);
    response.writeByte(1);
    response.writeBytes(ChannelBuffers.copiedBuffer(ByteOrder.LITTLE_ENDIAN,""String_Node_Str"",Charset.defaultCharset()));
    channel.write(response,remoteAddress);
  }
 else   if (type == MSG_UPLOAD_POSITION || type == MSG_UPLOAD_POSITION_NEW || type == MSG_CONTROL_RESPONSE || type == MSG_ALARM) {
    boolean newFormat=false;
    if (type == MSG_UPLOAD_POSITION && buf.readableBytes() == 48 || type == MSG_ALARM && buf.readableBytes() == 48 || type == MSG_CONTROL_RESPONSE && buf.readableBytes() == 57 || type == MSG_UPLOAD_POSITION_NEW) {
      newFormat=true;
    }
    Position position=new Position();
    position.setProtocol(getProtocolName());
    if (type == MSG_CONTROL_RESPONSE) {
      buf.readUnsignedInt();
      buf.readUnsignedInt();
    }
    int flags=buf.readUnsignedByte();
    position.setValid((flags & 0x01) != 0);
    position.set(Event.KEY_ALARM,buf.readUnsignedByte());
    if (newFormat) {
      position.setSpeed(buf.readUnsignedInt());
      position.setCourse(buf.readFloat());
    }
 else {
      position.setSpeed(buf.readUnsignedByte());
      position.setCourse(buf.readUnsignedShort());
    }
    position.setLongitude(buf.readFloat());
    position.setLatitude(buf.readFloat());
    if (!newFormat) {
      long timeValue=buf.readUnsignedInt();
      Calendar time=Calendar.getInstance(TimeZone.getTimeZone(""String_Node_Str""));
      time.clear();
      time.set(Calendar.YEAR,2000 + (int)(timeValue >> 26));
      time.set(Calendar.MONTH,(int)(timeValue >> 22 & 0x0f) - 1);
      time.set(Calendar.DAY_OF_MONTH,(int)(timeValue >> 17 & 0x1f));
      time.set(Calendar.HOUR_OF_DAY,(int)(timeValue >> 12 & 0x1f));
      time.set(Calendar.MINUTE,(int)(timeValue >> 6 & 0x3f));
      time.set(Calendar.SECOND,(int)(timeValue & 0x3f));
      position.setTime(time.getTime());
    }
    String id=buf.readBytes(newFormat ? 12 : 11).toString(Charset.defaultCharset()).replaceAll(""String_Node_Str"",""String_Node_Str"");
    if (!identify(id,channel,remoteAddress)) {
      return null;
    }
    position.setDeviceId(getDeviceId());
    if (newFormat) {
      DateFormat dateFormat=new SimpleDateFormat(""String_Node_Str"");
      position.setTime(dateFormat.parse(buf.readBytes(17).toString(Charset.defaultCharset())));
      buf.readByte();
    }
    if (!newFormat) {
      position.set(Event.PREFIX_IO + 1,buf.readUnsignedByte());
      position.set(Event.KEY_FUEL,buf.readUnsignedByte());
    }
 else     if (type == MSG_UPLOAD_POSITION_NEW) {
      position.set(Event.PREFIX_TEMP + 1,buf.readShort());
      position.set(Event.KEY_ODOMETER,buf.readFloat());
    }
    return position;
  }
  return null;
}","@Override protected Object decode(Channel channel,SocketAddress remoteAddress,Object msg) throws Exception {
  ChannelBuffer buf=(ChannelBuffer)msg;
  buf.readUnsignedShort();
  int type=buf.readUnsignedShort();
  if (type == MSG_SHAKE_HAND && channel != null) {
    ChannelBuffer response=ChannelBuffers.dynamicBuffer(ByteOrder.LITTLE_ENDIAN,13);
    response.writeBytes(ChannelBuffers.copiedBuffer(ByteOrder.LITTLE_ENDIAN,""String_Node_Str"",Charset.defaultCharset()));
    response.writeByte(0);
    response.writeShort(response.capacity());
    response.writeShort(MSG_SHAKE_HAND_RESPONSE);
    response.writeByte(1);
    response.writeBytes(ChannelBuffers.copiedBuffer(ByteOrder.LITTLE_ENDIAN,""String_Node_Str"",Charset.defaultCharset()));
    channel.write(response,remoteAddress);
  }
 else   if (type == MSG_UPLOAD_POSITION || type == MSG_UPLOAD_POSITION_NEW || type == MSG_CONTROL_RESPONSE || type == MSG_ALARM) {
    boolean newFormat=false;
    if (type == MSG_UPLOAD_POSITION && buf.readableBytes() == 48 || type == MSG_ALARM && buf.readableBytes() == 48 || type == MSG_CONTROL_RESPONSE && buf.readableBytes() == 57 || type == MSG_UPLOAD_POSITION_NEW) {
      newFormat=true;
    }
    Position position=new Position();
    position.setProtocol(getProtocolName());
    if (type == MSG_CONTROL_RESPONSE) {
      buf.readUnsignedInt();
      buf.readUnsignedInt();
    }
    int flags=buf.readUnsignedByte();
    position.setValid((flags & 0x01) != 0);
    position.set(Event.KEY_ALARM,buf.readUnsignedByte());
    if (newFormat) {
      position.setSpeed(buf.readUnsignedInt());
      position.setCourse(buf.readFloat());
    }
 else {
      position.setSpeed(buf.readUnsignedByte());
      position.setCourse(buf.readUnsignedShort());
    }
    position.setLongitude(buf.readFloat());
    position.setLatitude(buf.readFloat());
    if (!newFormat) {
      long timeValue=buf.readUnsignedInt();
      Calendar time=Calendar.getInstance(TimeZone.getTimeZone(""String_Node_Str""));
      time.clear();
      time.set(Calendar.YEAR,2000 + (int)(timeValue >> 26));
      time.set(Calendar.MONTH,(int)(timeValue >> 22 & 0x0f) - 1);
      time.set(Calendar.DAY_OF_MONTH,(int)(timeValue >> 17 & 0x1f));
      time.set(Calendar.HOUR_OF_DAY,(int)(timeValue >> 12 & 0x1f));
      time.set(Calendar.MINUTE,(int)(timeValue >> 6 & 0x3f));
      time.set(Calendar.SECOND,(int)(timeValue & 0x3f));
      position.setTime(time.getTime());
    }
    ChannelBuffer rawId;
    if (newFormat) {
      rawId=buf.readBytes(12);
    }
 else {
      rawId=buf.readBytes(11);
    }
    String id=rawId.toString(Charset.defaultCharset()).replaceAll(""String_Node_Str"",""String_Node_Str"");
    if (!identify(id,channel,remoteAddress)) {
      return null;
    }
    position.setDeviceId(getDeviceId());
    if (newFormat) {
      DateFormat dateFormat=new SimpleDateFormat(""String_Node_Str"");
      position.setTime(dateFormat.parse(buf.readBytes(17).toString(Charset.defaultCharset())));
      buf.readByte();
    }
    if (!newFormat) {
      position.set(Event.PREFIX_IO + 1,buf.readUnsignedByte());
      position.set(Event.KEY_FUEL,buf.readUnsignedByte());
    }
 else     if (type == MSG_UPLOAD_POSITION_NEW) {
      position.set(Event.PREFIX_TEMP + 1,buf.readShort());
      position.set(Event.KEY_ODOMETER,buf.readFloat());
    }
    return position;
  }
  return null;
}",0.9780734916074398
156110,"@Override protected Object decode(Channel channel,SocketAddress remoteAddress,Object msg) throws Exception {
  ChannelBuffer buf=(ChannelBuffer)msg;
  buf.readUnsignedByte();
  buf.readUnsignedShort();
  int index=buf.readUnsignedByte() >> 3;
  if (channel != null) {
    ChannelBuffer response=ChannelBuffers.copiedBuffer(""String_Node_Str"" + index,Charset.defaultCharset());
    channel.write(response,remoteAddress);
  }
  String id=String.valueOf(buf.readUnsignedInt());
  if (!identify(id,channel,remoteAddress)) {
    return null;
  }
  List<Position> positions=new LinkedList<>();
  while (buf.readableBytes() > 2) {
    Position position=new Position();
    position.setProtocol(getProtocolName());
    position.setDeviceId(getDeviceId());
    int end=buf.readerIndex() + buf.readUnsignedByte();
    position.setTime(new Date(buf.readUnsignedInt() * 1000));
    int flags=buf.readUnsignedByte();
    position.set(Event.KEY_SATELLITES,BitUtil.range(flags,2));
    position.setValid(BitUtil.range(flags,0,2) > 0);
    double lat=buf.readUnsignedMedium();
    lat=lat * -180 / 16777216 + 90;
    position.setLatitude(lat);
    double lon=buf.readUnsignedMedium();
    lon=lon * 360 / 16777216 - 180;
    position.setLongitude(lon);
    flags=buf.readUnsignedByte();
    position.set(Event.KEY_IGNITION,BitUtil.check(flags,0));
    position.set(Event.KEY_GSM,BitUtil.range(flags,2,3));
    position.setCourse((BitUtil.range(flags,5) * 45 + 180) % 360);
    int speed=buf.readUnsignedByte();
    if (speed < 250) {
      position.setSpeed(UnitsConverter.knotsFromKph(speed));
    }
    while (buf.readerIndex() < end) {
      int type=buf.readUnsignedByte();
      int length=buf.readUnsignedByte();
      if (length == 255) {
        length+=buf.readUnsignedByte();
      }
      int n=0;
switch (type) {
case 2:
        position.set(Event.KEY_ODOMETER,buf.readUnsignedMedium());
      break;
case 5:
    position.set(Event.KEY_INPUT,buf.readUnsignedByte());
  break;
case 6:
n=buf.readUnsignedByte() >> 4;
if (n < 2) {
position.set(Event.PREFIX_ADC + n,readSwappedFloat(buf));
}
 else {
position.set(""String_Node_Str"" + (n - 2),readSwappedFloat(buf));
}
break;
case 7:
int alarm=buf.readUnsignedByte();
buf.readUnsignedByte();
if (BitUtil.check(alarm,5)) {
position.set(Event.KEY_ALARM,BitUtil.range(alarm,0,4));
}
break;
case 8:
position.set(""String_Node_Str"",buf.readUnsignedByte());
break;
case 9:
position.set(""String_Node_Str"",ChannelBufferTools.readHexString(buf,16));
break;
case 10:
position.set(""String_Node_Str"",ChannelBufferTools.readHexString(buf,16));
break;
case 24:
Set<Integer> temps=new LinkedHashSet<>();
int temp=buf.readUnsignedByte();
for (int i=3; i >= 0; i--) {
n=(temp >> (2 * i)) & 0x03;
if (!temps.contains(n)) {
temps.add(n);
}
}
for (int i : temps) {
position.set(Event.PREFIX_TEMP + n,buf.readUnsignedByte());
}
break;
case 28:
position.set(""String_Node_Str"",buf.readUnsignedShort());
buf.readUnsignedByte();
break;
case 90:
position.set(Event.KEY_POWER,readSwappedFloat(buf));
break;
case 101:
position.set(Event.KEY_OBD_SPEED,buf.readUnsignedByte());
break;
case 102:
position.set(Event.KEY_RPM,buf.readUnsignedByte() * 50);
break;
case 107:
int fuel=buf.readUnsignedShort();
switch (fuel >> 14) {
case 1:
position.set(Event.KEY_FUEL,(fuel & 0x3fff) * 0.4 + ""String_Node_Str"");
break;
case 2:
position.set(Event.KEY_FUEL,(fuel & 0x3fff) * 0.5 + ""String_Node_Str"");
break;
case 3:
position.set(Event.KEY_FUEL,(fuel & 0x3fff) * -0.5 + ""String_Node_Str"");
break;
}
break;
case 108:
position.set(Event.KEY_OBD_ODOMETER,buf.readUnsignedInt() * 5);
break;
case 150:
position.set(""String_Node_Str"",buf.readUnsignedByte());
break;
default :
buf.skipBytes(length);
break;
}
}
positions.add(position);
}
return positions;
}","@Override protected Object decode(Channel channel,SocketAddress remoteAddress,Object msg) throws Exception {
  ChannelBuffer buf=(ChannelBuffer)msg;
  buf.readUnsignedByte();
  buf.readUnsignedShort();
  int index=buf.readUnsignedByte() >> 3;
  if (channel != null) {
    ChannelBuffer response=ChannelBuffers.copiedBuffer(""String_Node_Str"" + index,Charset.defaultCharset());
    channel.write(response,remoteAddress);
  }
  String id=String.valueOf(buf.readUnsignedInt());
  if (!identify(id,channel,remoteAddress)) {
    return null;
  }
  List<Position> positions=new LinkedList<>();
  while (buf.readableBytes() > 2) {
    Position position=new Position();
    position.setProtocol(getProtocolName());
    position.setDeviceId(getDeviceId());
    int end=buf.readerIndex() + buf.readUnsignedByte();
    position.setTime(new Date(buf.readUnsignedInt() * 1000));
    int flags=buf.readUnsignedByte();
    position.set(Event.KEY_SATELLITES,BitUtil.range(flags,2));
    position.setValid(BitUtil.range(flags,0,2) > 0);
    double lat=buf.readUnsignedMedium();
    lat=lat * -180 / 16777216 + 90;
    position.setLatitude(lat);
    double lon=buf.readUnsignedMedium();
    lon=lon * 360 / 16777216 - 180;
    position.setLongitude(lon);
    flags=buf.readUnsignedByte();
    position.set(Event.KEY_IGNITION,BitUtil.check(flags,0));
    position.set(Event.KEY_GSM,BitUtil.range(flags,2,3));
    position.setCourse((BitUtil.range(flags,5) * 45 + 180) % 360);
    int speed=buf.readUnsignedByte();
    if (speed < 250) {
      position.setSpeed(UnitsConverter.knotsFromKph(speed));
    }
    while (buf.readerIndex() < end) {
      int type=buf.readUnsignedByte();
      int length=buf.readUnsignedByte();
      if (length == 255) {
        length+=buf.readUnsignedByte();
      }
      int n=0;
switch (type) {
case 2:
        position.set(Event.KEY_ODOMETER,buf.readUnsignedMedium());
      break;
case 5:
    position.set(Event.KEY_INPUT,buf.readUnsignedByte());
  break;
case 6:
n=buf.readUnsignedByte() >> 4;
if (n < 2) {
position.set(Event.PREFIX_ADC + n,readSwappedFloat(buf));
}
 else {
position.set(""String_Node_Str"" + (n - 2),readSwappedFloat(buf));
}
break;
case 7:
int alarm=buf.readUnsignedByte();
buf.readUnsignedByte();
if (BitUtil.check(alarm,5)) {
position.set(Event.KEY_ALARM,BitUtil.range(alarm,0,4));
}
break;
case 8:
position.set(""String_Node_Str"",buf.readUnsignedByte());
break;
case 9:
position.set(""String_Node_Str"",ChannelBufferTools.readHexString(buf,16));
break;
case 10:
position.set(""String_Node_Str"",ChannelBufferTools.readHexString(buf,16));
break;
case 24:
Set<Integer> temps=new LinkedHashSet<>();
int temp=buf.readUnsignedByte();
for (int i=3; i >= 0; i--) {
n=(temp >> (2 * i)) & 0x03;
if (!temps.contains(n)) {
temps.add(n);
}
}
for (int i : temps) {
position.set(Event.PREFIX_TEMP + i,buf.readUnsignedByte());
}
break;
case 28:
position.set(""String_Node_Str"",buf.readUnsignedShort());
buf.readUnsignedByte();
break;
case 90:
position.set(Event.KEY_POWER,readSwappedFloat(buf));
break;
case 101:
position.set(Event.KEY_OBD_SPEED,buf.readUnsignedByte());
break;
case 102:
position.set(Event.KEY_RPM,buf.readUnsignedByte() * 50);
break;
case 107:
int fuel=buf.readUnsignedShort();
switch (fuel >> 14) {
case 1:
position.set(Event.KEY_FUEL,(fuel & 0x3fff) * 0.4 + ""String_Node_Str"");
break;
case 2:
position.set(Event.KEY_FUEL,(fuel & 0x3fff) * 0.5 + ""String_Node_Str"");
break;
case 3:
position.set(Event.KEY_FUEL,(fuel & 0x3fff) * -0.5 + ""String_Node_Str"");
break;
}
break;
case 108:
position.set(Event.KEY_OBD_ODOMETER,buf.readUnsignedInt() * 5);
break;
case 150:
position.set(""String_Node_Str"",buf.readUnsignedByte());
break;
default :
buf.skipBytes(length);
break;
}
}
positions.add(position);
}
return positions;
}",0.9997331910352188
156111,"@Override protected Object decode(Channel channel,SocketAddress remoteAddress,Object msg) throws Exception {
  ChannelBuffer buf=(ChannelBuffer)msg;
  if ((buf.getByte(buf.readerIndex()) & 0x80) != 0) {
    int content=buf.readUnsignedByte();
    if ((content & 0x01) != 0) {
      int length=buf.readUnsignedByte();
      long id=0;
      for (int i=0; i < length; i++) {
        int b=buf.readUnsignedByte();
        id=id * 10 + (b >> 4);
        if ((b & 0xf) != 0xf) {
          id=id * 10 + (b & 0xf);
        }
      }
      identify(String.valueOf(id),channel,remoteAddress);
    }
    if ((content & 0x02) != 0) {
      buf.skipBytes(buf.readUnsignedByte());
    }
    if ((content & 0x04) != 0) {
      buf.skipBytes(buf.readUnsignedByte());
    }
    if ((content & 0x08) != 0) {
      buf.skipBytes(buf.readUnsignedByte());
    }
    if ((content & 0x10) != 0) {
      buf.skipBytes(buf.readUnsignedByte());
    }
    if ((content & 0x20) != 0) {
      buf.skipBytes(buf.readUnsignedByte());
    }
  }
  if (!hasDeviceId()) {
    return null;
  }
  int service=buf.readUnsignedByte();
  int type=buf.readUnsignedByte();
  int index=buf.readUnsignedShort();
  if (service == SERVICE_ACKNOWLEDGED) {
    sendResponse(channel,remoteAddress,type,index,0);
  }
  if (type == MSG_EVENT_REPORT || type == MSG_LOCATE_REPORT || type == MSG_MINI_EVENT_REPORT) {
    Position position=new Position();
    position.setDeviceId(getDeviceId());
    position.setProtocol(getProtocolName());
    position.setTime(new Date(buf.readUnsignedInt() * 1000));
    if (type != MSG_MINI_EVENT_REPORT) {
      buf.readUnsignedInt();
    }
    position.setLatitude(buf.readInt() * 0.0000001);
    position.setLongitude(buf.readInt() * 0.0000001);
    if (type != MSG_MINI_EVENT_REPORT) {
      position.setAltitude(buf.readInt() * 0.01);
      position.setSpeed(UnitsConverter.knotsFromCps(buf.readUnsignedInt()));
    }
    position.setCourse(buf.readShort());
    if (type == MSG_MINI_EVENT_REPORT) {
      position.setSpeed(UnitsConverter.knotsFromKph(buf.readUnsignedByte()));
    }
    if (type == MSG_MINI_EVENT_REPORT) {
      position.set(Event.KEY_SATELLITES,buf.getUnsignedByte(buf.readerIndex()) & 0xf);
      position.setValid((buf.readUnsignedByte() & 0x20) == 0);
    }
 else {
      position.set(Event.KEY_SATELLITES,buf.readUnsignedByte());
      position.setValid((buf.readUnsignedByte() & 0x08) == 0);
    }
    if (type != MSG_MINI_EVENT_REPORT) {
      position.set(""String_Node_Str"",buf.readUnsignedShort());
      position.set(Event.KEY_GSM,buf.readShort());
    }
    position.set(""String_Node_Str"",buf.readUnsignedByte());
    if (type != MSG_MINI_EVENT_REPORT) {
      position.set(Event.KEY_HDOP,buf.readUnsignedByte());
    }
    position.set(Event.KEY_INPUT,buf.readUnsignedByte());
    if (type != MSG_MINI_EVENT_REPORT) {
      position.set(Event.KEY_STATUS,buf.readUnsignedByte());
    }
    if (type == MSG_EVENT_REPORT || type == MSG_MINI_EVENT_REPORT) {
      if (type != MSG_MINI_EVENT_REPORT) {
        buf.readUnsignedByte();
      }
      position.set(Event.KEY_EVENT,buf.readUnsignedByte());
    }
    int accCount=buf.readUnsignedByte();
    int accType=accCount >> 6;
    accCount&=0x3f;
    if (type != MSG_MINI_EVENT_REPORT) {
      buf.readUnsignedByte();
    }
    if (accType == 1) {
      buf.readUnsignedInt();
      buf.readUnsignedInt();
    }
    for (int i=0; i < accCount; i++) {
      position.set(""String_Node_Str"" + i,buf.readUnsignedInt());
    }
    return position;
  }
  return null;
}","@Override protected Object decode(Channel channel,SocketAddress remoteAddress,Object msg) throws Exception {
  ChannelBuffer buf=(ChannelBuffer)msg;
  if ((buf.getByte(buf.readerIndex()) & 0x80) != 0) {
    int content=buf.readUnsignedByte();
    if ((content & 0x01) != 0) {
      int length=buf.readUnsignedByte();
      long id=0;
      for (int i=0; i < length; i++) {
        int b=buf.readUnsignedByte();
        id=id * 10 + (b >> 4);
        if ((b & 0xf) != 0xf) {
          id=id * 10 + (b & 0xf);
        }
      }
      identify(String.valueOf(id),channel,remoteAddress);
    }
    if ((content & 0x02) != 0) {
      buf.skipBytes(buf.readUnsignedByte());
    }
    if ((content & 0x04) != 0) {
      buf.skipBytes(buf.readUnsignedByte());
    }
    if ((content & 0x08) != 0) {
      buf.skipBytes(buf.readUnsignedByte());
    }
    if ((content & 0x10) != 0) {
      buf.skipBytes(buf.readUnsignedByte());
    }
    if ((content & 0x20) != 0) {
      buf.skipBytes(buf.readUnsignedByte());
    }
  }
  if (!hasDeviceId()) {
    return null;
  }
  int service=buf.readUnsignedByte();
  int type=buf.readUnsignedByte();
  int index=buf.readUnsignedShort();
  if (service == SERVICE_ACKNOWLEDGED) {
    sendResponse(channel,remoteAddress,type,index,0);
  }
  if (type == MSG_EVENT_REPORT || type == MSG_LOCATE_REPORT || type == MSG_MINI_EVENT_REPORT) {
    return decodePosition(type,buf);
  }
  return null;
}",0.5666397415185783
156112,"private boolean identify(ChannelBuffer buf,Channel channel){
  StringBuilder builder=new StringBuilder();
  for (int i=0; i < 7; i++) {
    int b=buf.readUnsignedByte();
    int d1=(b & 0xf0) >> 4;
    if (d1 == 0xf)     break;
    builder.append(d1);
    int d2=b & 0x0f;
    if (d2 == 0xf)     break;
    builder.append(d2);
  }
  String id=builder.toString();
  if (id.length() == 14 && identify(id + Checksum.luhn(Long.parseLong(id)),channel,null,false)) {
    return true;
  }
  return identify(id,channel);
}","private boolean identify(ChannelBuffer buf,Channel channel){
  StringBuilder builder=new StringBuilder();
  for (int i=0; i < 7; i++) {
    int b=buf.readUnsignedByte();
    int d1=(b & 0xf0) >> 4;
    if (d1 == 0xf) {
      break;
    }
    builder.append(d1);
    int d2=b & 0x0f;
    if (d2 == 0xf) {
      break;
    }
    builder.append(d2);
  }
  String id=builder.toString();
  if (id.length() == 14 && identify(id + Checksum.luhn(Long.parseLong(id)),channel,null,false)) {
    return true;
  }
  return identify(id,channel);
}",0.9809160305343512
156113,"@Override protected Object decode(Channel channel,SocketAddress remoteAddress,Object msg) throws Exception {
  ChannelBuffer buf=(ChannelBuffer)msg;
  buf.skipBytes(2);
  buf.readShort();
  ChannelBuffer id=buf.readBytes(7);
  int command=buf.readUnsignedShort();
  ChannelBuffer response;
switch (command) {
case MSG_LOGIN:
    if (channel != null) {
      response=ChannelBuffers.wrappedBuffer(new byte[]{0x01});
      sendResponse(channel,id,MSG_LOGIN_RESPONSE,response);
    }
  return null;
case MSG_HEARTBEAT:
if (channel != null) {
  response=ChannelBuffers.wrappedBuffer(new byte[]{0x01});
  sendResponse(channel,id,MSG_HEARTBEAT,response);
}
return null;
case MSG_SERVER:
if (channel != null) {
response=ChannelBuffers.copiedBuffer(getMeiligaoServer(channel),Charset.defaultCharset());
sendResponse(channel,id,MSG_SERVER,response);
}
return null;
case MSG_POSITION:
case MSG_POSITION_LOGGED:
case MSG_ALARM:
case MSG_RFID:
break;
default :
return null;
}
Position position=new Position();
position.setProtocol(getProtocolName());
if (command == MSG_ALARM) {
position.set(Event.KEY_ALARM,buf.readUnsignedByte());
}
 else if (command == MSG_POSITION_LOGGED) {
buf.skipBytes(6);
}
if (!identify(id,channel)) {
return null;
}
position.setDeviceId(getDeviceId());
if (command == MSG_RFID) {
for (int i=0; i < 15; i++) {
long rfid=buf.readUnsignedInt();
if (rfid != 0) {
String card=String.format(""String_Node_Str"",rfid);
position.set(""String_Node_Str"" + (i + 1),card);
position.set(Event.KEY_RFID,card);
}
}
}
Parser parser=new Parser(command == MSG_RFID ? PATTERN_RFID : PATTERN,buf.toString(buf.readerIndex(),buf.readableBytes() - 4,Charset.defaultCharset()));
if (!parser.matches()) {
return null;
}
if (command == MSG_RFID) {
DateBuilder dateBuilder=new DateBuilder().setTime(parser.nextInt(),parser.nextInt(),parser.nextInt()).setDateReverse(parser.nextInt(),parser.nextInt(),parser.nextInt());
position.setTime(dateBuilder.getDate());
position.setLatitude(parser.nextCoordinate());
position.setLongitude(parser.nextCoordinate());
}
 else {
DateBuilder dateBuilder=new DateBuilder().setTime(parser.nextInt(),parser.nextInt(),parser.nextInt());
if (parser.hasNext()) {
dateBuilder.setMillis(parser.nextInt());
}
position.setValid(parser.next().equals(""String_Node_Str""));
position.setLatitude(parser.nextCoordinate());
position.setLongitude(parser.nextCoordinate());
if (parser.hasNext()) {
position.setSpeed(parser.nextDouble());
}
if (parser.hasNext()) {
position.setCourse(parser.nextDouble());
}
dateBuilder.setDateReverse(parser.nextInt(),parser.nextInt(),parser.nextInt());
position.setTime(dateBuilder.getDate());
position.set(Event.KEY_HDOP,parser.next());
if (parser.hasNext()) {
position.setAltitude(parser.nextDouble());
}
position.set(Event.KEY_STATUS,parser.next());
for (int i=1; i <= 8; i++) {
if (parser.hasNext()) {
position.set(Event.PREFIX_ADC + i,parser.nextInt(16));
}
}
position.set(Event.KEY_CELL,parser.next());
if (parser.hasNext()) {
position.set(Event.KEY_GSM,parser.nextInt(16));
}
if (parser.hasNext()) {
position.set(Event.KEY_ODOMETER,parser.nextInt(16));
}
 else if (parser.hasNext()) {
position.set(Event.KEY_ODOMETER,parser.nextInt(16));
}
if (parser.hasNext()) {
position.set(Event.KEY_RFID,parser.nextInt(16));
}
}
return position;
}","@Override protected Object decode(Channel channel,SocketAddress remoteAddress,Object msg) throws Exception {
  ChannelBuffer buf=(ChannelBuffer)msg;
  buf.skipBytes(2);
  buf.readShort();
  ChannelBuffer id=buf.readBytes(7);
  int command=buf.readUnsignedShort();
  ChannelBuffer response;
switch (command) {
case MSG_LOGIN:
    if (channel != null) {
      response=ChannelBuffers.wrappedBuffer(new byte[]{0x01});
      sendResponse(channel,id,MSG_LOGIN_RESPONSE,response);
    }
  return null;
case MSG_HEARTBEAT:
if (channel != null) {
  response=ChannelBuffers.wrappedBuffer(new byte[]{0x01});
  sendResponse(channel,id,MSG_HEARTBEAT,response);
}
return null;
case MSG_SERVER:
if (channel != null) {
response=ChannelBuffers.copiedBuffer(getMeiligaoServer(channel),Charset.defaultCharset());
sendResponse(channel,id,MSG_SERVER,response);
}
return null;
case MSG_POSITION:
case MSG_POSITION_LOGGED:
case MSG_ALARM:
case MSG_RFID:
break;
default :
return null;
}
Position position=new Position();
position.setProtocol(getProtocolName());
if (command == MSG_ALARM) {
position.set(Event.KEY_ALARM,buf.readUnsignedByte());
}
 else if (command == MSG_POSITION_LOGGED) {
buf.skipBytes(6);
}
if (!identify(id,channel)) {
return null;
}
position.setDeviceId(getDeviceId());
if (command == MSG_RFID) {
for (int i=0; i < 15; i++) {
long rfid=buf.readUnsignedInt();
if (rfid != 0) {
String card=String.format(""String_Node_Str"",rfid);
position.set(""String_Node_Str"" + (i + 1),card);
position.set(Event.KEY_RFID,card);
}
}
}
Pattern pattern;
if (command == MSG_RFID) {
pattern=PATTERN_RFID;
}
 else {
pattern=PATTERN;
}
Parser parser=new Parser(pattern,buf.toString(buf.readerIndex(),buf.readableBytes() - 4,Charset.defaultCharset()));
if (!parser.matches()) {
return null;
}
if (command == MSG_RFID) {
DateBuilder dateBuilder=new DateBuilder().setTime(parser.nextInt(),parser.nextInt(),parser.nextInt()).setDateReverse(parser.nextInt(),parser.nextInt(),parser.nextInt());
position.setTime(dateBuilder.getDate());
position.setLatitude(parser.nextCoordinate());
position.setLongitude(parser.nextCoordinate());
}
 else {
DateBuilder dateBuilder=new DateBuilder().setTime(parser.nextInt(),parser.nextInt(),parser.nextInt());
if (parser.hasNext()) {
dateBuilder.setMillis(parser.nextInt());
}
position.setValid(parser.next().equals(""String_Node_Str""));
position.setLatitude(parser.nextCoordinate());
position.setLongitude(parser.nextCoordinate());
if (parser.hasNext()) {
position.setSpeed(parser.nextDouble());
}
if (parser.hasNext()) {
position.setCourse(parser.nextDouble());
}
dateBuilder.setDateReverse(parser.nextInt(),parser.nextInt(),parser.nextInt());
position.setTime(dateBuilder.getDate());
position.set(Event.KEY_HDOP,parser.next());
if (parser.hasNext()) {
position.setAltitude(parser.nextDouble());
}
position.set(Event.KEY_STATUS,parser.next());
for (int i=1; i <= 8; i++) {
if (parser.hasNext()) {
position.set(Event.PREFIX_ADC + i,parser.nextInt(16));
}
}
position.set(Event.KEY_CELL,parser.next());
if (parser.hasNext()) {
position.set(Event.KEY_GSM,parser.nextInt(16));
}
if (parser.hasNext()) {
position.set(Event.KEY_ODOMETER,parser.nextInt(16));
}
 else if (parser.hasNext()) {
position.set(Event.KEY_ODOMETER,parser.nextInt(16));
}
if (parser.hasNext()) {
position.set(Event.KEY_RFID,parser.nextInt(16));
}
}
return position;
}",0.9827586206896552
156114,"public ServerManager() throws Exception {
  List<String> names=new LinkedList<>();
  String packageName=""String_Node_Str"";
  String packagePath=packageName.replace('.','/');
  URL packageUrl=Thread.currentThread().getContextClassLoader().getResource(packagePath);
  if (packageUrl.getProtocol().equals(""String_Node_Str"")) {
    String jarFileName=URLDecoder.decode(packageUrl.getFile(),""String_Node_Str"");
    JarFile jf=new JarFile(jarFileName.substring(5,jarFileName.indexOf(""String_Node_Str"")));
    Enumeration<JarEntry> jarEntries=jf.entries();
    while (jarEntries.hasMoreElements()) {
      String entryName=jarEntries.nextElement().getName();
      if (entryName.startsWith(packagePath) && entryName.length() > packagePath.length() + 5) {
        names.add(entryName.substring(packagePath.length() + 1,entryName.lastIndexOf('.')));
      }
    }
  }
 else {
    File folder=new File(new URI(packageUrl.toString()));
    File[] files=folder.listFiles();
    for (    File actual : files) {
      String entryName=actual.getName();
      names.add(entryName.substring(0,entryName.lastIndexOf('.')));
    }
  }
  for (  String name : names) {
    Class protocolClass=Class.forName(packageName + '.' + name);
    if (BaseProtocol.class.isAssignableFrom(protocolClass)) {
      initProtocolServer((BaseProtocol)protocolClass.newInstance());
    }
  }
  initProtocolDetector();
}","public ServerManager() throws Exception {
  List<String> names=new LinkedList<>();
  String packageName=""String_Node_Str"";
  String packagePath=packageName.replace('.','/');
  URL packageUrl=Thread.currentThread().getContextClassLoader().getResource(packagePath);
  if (packageUrl.getProtocol().equals(""String_Node_Str"")) {
    String jarFileName=URLDecoder.decode(packageUrl.getFile(),""String_Node_Str"");
    try (JarFile jf=new JarFile(jarFileName.substring(5,jarFileName.indexOf(""String_Node_Str"")))){
      Enumeration<JarEntry> jarEntries=jf.entries();
      while (jarEntries.hasMoreElements()) {
        String entryName=jarEntries.nextElement().getName();
        if (entryName.startsWith(packagePath) && entryName.length() > packagePath.length() + 5) {
          names.add(entryName.substring(packagePath.length() + 1,entryName.lastIndexOf('.')));
        }
      }
    }
   }
 else {
    File folder=new File(new URI(packageUrl.toString()));
    File[] files=folder.listFiles();
    if (files != null) {
      for (      File actual : files) {
        String entryName=actual.getName();
        names.add(entryName.substring(0,entryName.lastIndexOf('.')));
      }
    }
  }
  for (  String name : names) {
    Class protocolClass=Class.forName(packageName + '.' + name);
    if (BaseProtocol.class.isAssignableFrom(protocolClass)) {
      initProtocolServer((BaseProtocol)protocolClass.newInstance());
    }
  }
  initProtocolDetector();
}",0.971045197740113
156115,"private void initDatabaseSchema() throws SQLException {
  if (config.getString(""String_Node_Str"",""String_Node_Str"").equals(""String_Node_Str"") || config.getString(""String_Node_Str"",""String_Node_Str"").equals(""String_Node_Str"")) {
    Connection connection=dataSource.getConnection();
    ResultSet result=connection.getMetaData().getTables(connection.getCatalog(),null,null,null);
    boolean exist=false;
    String checkTable=config.getString(""String_Node_Str"");
    while (result.next()) {
      if (result.getString(""String_Node_Str"").equalsIgnoreCase(checkTable)) {
        exist=true;
        break;
      }
    }
    if (exist) {
      String schemaVersionQuery=getQuery(""String_Node_Str"");
      if (schemaVersionQuery != null) {
        Schema schema=QueryBuilder.create(dataSource,schemaVersionQuery).executeQuerySingle(new Schema());
        int version=0;
        if (schema != null) {
          version=schema.getVersion();
        }
        if (version != 301) {
          Log.error(""String_Node_Str"" + version + ""String_Node_Str"");
          throw new RuntimeException();
        }
      }
      return;
    }
    QueryBuilder.create(dataSource,getQuery(""String_Node_Str"")).executeUpdate();
    User admin=new User();
    admin.setName(""String_Node_Str"");
    admin.setEmail(""String_Node_Str"");
    admin.setAdmin(true);
    admin.setPassword(""String_Node_Str"");
    addUser(admin);
    Server server=new Server();
    server.setRegistration(true);
    QueryBuilder.create(dataSource,getQuery(""String_Node_Str"")).setObject(server).executeUpdate();
    mockData(admin.getId());
  }
}","private void initDatabaseSchema() throws SQLException {
  if (config.getString(""String_Node_Str"",""String_Node_Str"").equals(""String_Node_Str"") || config.getString(""String_Node_Str"",""String_Node_Str"").equals(""String_Node_Str"")) {
    boolean exist=false;
    try (Connection connection=dataSource.getConnection();ResultSet result=connection.getMetaData().getTables(connection.getCatalog(),null,null,null)){
      String checkTable=config.getString(""String_Node_Str"");
      while (result.next()) {
        if (result.getString(""String_Node_Str"").equalsIgnoreCase(checkTable)) {
          exist=true;
          break;
        }
      }
    }
     if (exist) {
      String schemaVersionQuery=getQuery(""String_Node_Str"");
      if (schemaVersionQuery != null) {
        Schema schema=QueryBuilder.create(dataSource,schemaVersionQuery).executeQuerySingle(new Schema());
        int version=0;
        if (schema != null) {
          version=schema.getVersion();
        }
        if (version != 301) {
          Log.error(""String_Node_Str"" + version + ""String_Node_Str"");
          throw new RuntimeException();
        }
      }
    }
 else {
      QueryBuilder.create(dataSource,getQuery(""String_Node_Str"")).executeUpdate();
      User admin=new User();
      admin.setName(""String_Node_Str"");
      admin.setEmail(""String_Node_Str"");
      admin.setAdmin(true);
      admin.setPassword(""String_Node_Str"");
      addUser(admin);
      Server server=new Server();
      server.setRegistration(true);
      QueryBuilder.create(dataSource,getQuery(""String_Node_Str"")).setObject(server).executeUpdate();
      mockData(admin.getId());
    }
  }
}",0.8843537414965986
156116,"/** 
 * Convert hex to integer (length in hex digits)
 */
public static int readHexInteger(ChannelBuffer buf,int length){
  int result=0;
  for (int i=0; i < length / 2; i++) {
    int b=buf.readUnsignedByte();
    result*=10;
    result+=b >>> 4;
    result*=10;
    result+=b & 0x0f;
  }
  if (length % 2 == 1) {
    int b=buf.getUnsignedByte(buf.readerIndex());
    result*=10;
    result+=b >>> 4;
  }
  return result;
}","/** 
 * Convert hex to integer (length in hex digits)
 */
public static int readHexInteger(ChannelBuffer buf,int length){
  int result=0;
  for (int i=0; i < length / 2; i++) {
    int b=buf.readUnsignedByte();
    result*=10;
    result+=b >>> 4;
    result*=10;
    result+=b & 0x0f;
  }
  if (length % 2 != 0) {
    int b=buf.getUnsignedByte(buf.readerIndex());
    result*=10;
    result+=b >>> 4;
  }
  return result;
}",0.9905660377358492
156117,"/** 
 * Return hex string
 */
public static String readHexString(ChannelBuffer buf,int length){
  StringBuilder result=new StringBuilder();
  Formatter formatter=new Formatter(result);
  for (int i=0; i < length / 2; i++) {
    formatter.format(""String_Node_Str"",buf.readByte());
  }
  if (length % 2 == 1) {
    int b=buf.getUnsignedByte(buf.readerIndex());
    formatter.format(""String_Node_Str"",b >>> 4);
  }
  return result.toString();
}","/** 
 * Return hex string
 */
public static String readHexString(ChannelBuffer buf,int length){
  StringBuilder result=new StringBuilder();
  Formatter formatter=new Formatter(result);
  for (int i=0; i < length / 2; i++) {
    formatter.format(""String_Node_Str"",buf.readByte());
  }
  if (length % 2 != 0) {
    int b=buf.getUnsignedByte(buf.readerIndex());
    formatter.format(""String_Node_Str"",b >>> 4);
  }
  return result.toString();
}",0.9931972789115646
156118,"private static int crc16Unreflected(ByteBuffer buf,int crc_in,int[] table){
  int crc16=crc_in;
  while (buf.hasRemaining()) {
    crc16=table[((crc16 >> 8) ^ buf.get()) & 0xff] ^ (crc16 << 8);
  }
  return crc16 & 0xFFFF;
}","private static int crc16Unreflected(ByteBuffer buf,int crcIn,int[] table){
  int crc16=crcIn;
  while (buf.hasRemaining()) {
    crc16=table[((crc16 >> 8) ^ buf.get()) & 0xff] ^ (crc16 << 8);
  }
  return crc16 & 0xFFFF;
}",0.9865470852017936
156119,"private static int crc16Reflected(ByteBuffer buf,int crc_in,int[] table){
  int crc16=crc_in;
  while (buf.hasRemaining()) {
    crc16=table[(crc16 ^ buf.get()) & 0xff] ^ (crc16 >> 8);
  }
  return crc16 & 0xFFFF;
}","private static int crc16Reflected(ByteBuffer buf,int crcIn,int[] table){
  int crc16=crcIn;
  while (buf.hasRemaining()) {
    crc16=table[(crc16 ^ buf.get()) & 0xff] ^ (crc16 >> 8);
  }
  return crc16 & 0xFFFF;
}",0.985981308411215
156120,"public PatternBuilder num(String s){
  if (collapse) {
    s=s.replace(""String_Node_Str"",""String_Node_Str"").replace(""String_Node_Str"",""String_Node_Str"").replace(""String_Node_Str"",""String_Node_Str"");
    s=s.replace(""String_Node_Str"",""String_Node_Str"").replace(""String_Node_Str"",""String_Node_Str"").replace(""String_Node_Str"",""String_Node_Str"");
  }
  pattern.append(s.replace(""String_Node_Str"",""String_Node_Str"").replace(""String_Node_Str"",""String_Node_Str"").replaceAll(""String_Node_Str"",""String_Node_Str""));
  return this;
}","public PatternBuilder num(String s){
  s=s.replace(""String_Node_Str"",""String_Node_Str"").replace(""String_Node_Str"",""String_Node_Str"").replace(""String_Node_Str"",""String_Node_Str"");
  s=s.replace(""String_Node_Str"",""String_Node_Str"").replace(""String_Node_Str"",""String_Node_Str"").replace(""String_Node_Str"",""String_Node_Str"");
  pattern.append(s.replace(""String_Node_Str"",""String_Node_Str"").replace(""String_Node_Str"",""String_Node_Str"").replaceAll(""String_Node_Str"",""String_Node_Str""));
  return this;
}",0.974459724950884
156121,"public void setLastUpdate(Date lastUpdate){
  this.lastUpdate=lastUpdate;
}","public void setLastUpdate(Date lastUpdate){
  if (lastUpdate != null) {
    this.lastUpdate=new Date(lastUpdate.getTime());
  }
 else {
    this.lastUpdate=null;
  }
}",0.6198347107438017
156122,"public Date getLastUpdate(){
  return lastUpdate;
}","public Date getLastUpdate(){
  if (lastUpdate != null) {
    return new Date(lastUpdate.getTime());
  }
 else {
    return null;
  }
}",0.4864864864864865
156123,"public void setDeviceTime(Date deviceTime){
  this.deviceTime=deviceTime;
}","public void setDeviceTime(Date deviceTime){
  if (deviceTime != null) {
    this.deviceTime=new Date(deviceTime.getTime());
  }
 else {
    this.deviceTime=null;
  }
}",0.6198347107438017
156124,"public Date getDeviceTime(){
  return deviceTime;
}","public Date getDeviceTime(){
  if (deviceTime != null) {
    return new Date(deviceTime.getTime());
  }
 else {
    return null;
  }
}",0.4864864864864865
156125,"public Date getServerTime(){
  return serverTime;
}","public Date getServerTime(){
  if (serverTime != null) {
    return new Date(serverTime.getTime());
  }
 else {
    return null;
  }
}",0.4864864864864865
156126,"public void setServerTime(Date serverTime){
  this.serverTime=serverTime;
}","public void setServerTime(Date serverTime){
  if (serverTime != null) {
    this.serverTime=new Date(serverTime.getTime());
  }
 else {
    this.serverTime=null;
  }
}",0.6198347107438017
156127,"public static Map<String,Object> fromJson(JsonObject json){
  Map<String,Object> attributes=new LinkedHashMap<>();
  for (  Map.Entry<String,JsonValue> entry : json.entrySet()) {
switch (entry.getValue().getValueType()) {
case STRING:
      attributes.put(entry.getKey(),((JsonString)entry.getValue()).getString());
    break;
case NUMBER:
  JsonNumber number=(JsonNumber)entry.getValue();
if (number.isIntegral()) {
  attributes.put(entry.getKey(),number.longValue());
}
 else {
  attributes.put(entry.getKey(),number.doubleValue());
}
break;
case TRUE:
attributes.put(entry.getKey(),true);
break;
case FALSE:
attributes.put(entry.getKey(),false);
break;
}
}
return attributes;
}","public static Map<String,Object> fromJson(JsonObject json){
  Map<String,Object> attributes=new LinkedHashMap<>();
  for (  Map.Entry<String,JsonValue> entry : json.entrySet()) {
switch (entry.getValue().getValueType()) {
case STRING:
      attributes.put(entry.getKey(),((JsonString)entry.getValue()).getString());
    break;
case NUMBER:
  JsonNumber number=(JsonNumber)entry.getValue();
if (number.isIntegral()) {
  attributes.put(entry.getKey(),number.longValue());
}
 else {
  attributes.put(entry.getKey(),number.doubleValue());
}
break;
case TRUE:
attributes.put(entry.getKey(),true);
break;
case FALSE:
attributes.put(entry.getKey(),false);
break;
default :
Log.warning(new IllegalArgumentException());
break;
}
}
return attributes;
}",0.9563994374120957
156128,"public void setFixTime(Date fixTime){
  this.fixTime=fixTime;
}","public void setFixTime(Date fixTime){
  if (fixTime != null) {
    this.fixTime=new Date(fixTime.getTime());
  }
 else {
    this.fixTime=null;
  }
}",0.5943396226415094
156129,"public Date getFixTime(){
  return fixTime;
}","public Date getFixTime(){
  if (fixTime != null) {
    return new Date(fixTime.getTime());
  }
 else {
    return null;
  }
}",0.5294117647058824
156130,"public void setPassword(String password){
  this.password=password;
  if (password != null && !password.isEmpty()) {
    Hashing.HashingResult hashingResult=Hashing.createHash(password);
    hashedPassword=hashingResult.hash;
    salt=hashingResult.salt;
  }
}","public void setPassword(String password){
  this.password=password;
  if (password != null && !password.isEmpty()) {
    Hashing.HashingResult hashingResult=Hashing.createHash(password);
    hashedPassword=hashingResult.getHash();
    salt=hashingResult.getSalt();
  }
}",0.8566037735849057
156131,"@Override protected Object decode(ChannelHandlerContext ctx,Channel channel,ChannelBuffer buf) throws Exception {
  if (buf.readableBytes() < 12) {
    return null;
  }
  int length=0;
switch (buf.getUnsignedByte(buf.readerIndex())) {
case MSG_LOGIN:
    length=19;
  break;
case MSG_LOCATION:
length=34;
break;
}
if (length != 0 && buf.readableBytes() >= length) {
return buf.readBytes(length);
}
return null;
}","@Override protected Object decode(ChannelHandlerContext ctx,Channel channel,ChannelBuffer buf) throws Exception {
  if (buf.readableBytes() < 12) {
    return null;
  }
  int length;
switch (buf.getUnsignedByte(buf.readerIndex())) {
case MSG_LOGIN:
    length=19;
  break;
case MSG_LOCATION:
length=34;
break;
default :
length=0;
break;
}
if (length != 0 && buf.readableBytes() >= length) {
return buf.readBytes(length);
}
return null;
}",0.9658421672555948
156132,"public static long range(long number,int index,int length){
  return (number >> index) & ((1l << length) - 1);
}","public static long range(long number,int index,int length){
  return (number >> index) & ((1L << length) - 1);
}",0.9910714285714286
156133,"public static String nmea(String msg){
  int checksum=0;
  byte bytes[]=msg.getBytes(Charset.defaultCharset());
  for (int i=1; i < msg.length(); i++) {
    checksum^=bytes[i];
  }
  return String.format(""String_Node_Str"",checksum).toUpperCase();
}","public static String nmea(String msg){
  int checksum=0;
  byte[] bytes=msg.getBytes(Charset.defaultCharset());
  for (int i=1; i < msg.length(); i++) {
    checksum^=bytes[i];
  }
  return String.format(""String_Node_Str"",checksum).toUpperCase();
}",0.9758064516129032
156134,"@Override protected Object decode(Channel channel,SocketAddress remoteAddress,Object msg) throws Exception {
  ChannelBuffer buf=(ChannelBuffer)msg;
  buf.readUnsignedByte();
  buf.readUnsignedByte();
  int sequenceNumber=buf.readUnsignedShort();
  int messageId=buf.readUnsignedShort();
  buf.readUnsignedShort();
  int flags=buf.readUnsignedShort();
  buf.readUnsignedShort();
  if (!identify(String.valueOf(buf.readUnsignedInt()),channel)) {
    return null;
  }
  long timestamp=buf.readUnsignedInt();
  if ((flags & 0x1) == 0x0) {
    sendAcknowledgment(channel,sequenceNumber);
  }
switch (messageId) {
case MSG_UNIT_REPORT:
    return parseUnitReport(buf,sequenceNumber);
case MSG_TG2_REPORT:
  return parseTg2Report(buf,sequenceNumber);
case MSG_POSITION_REPORT:
return parsePositionReport(buf,sequenceNumber,timestamp);
case MSG_POSITION_REPORT_2:
return parsePositionReport2(buf,sequenceNumber,timestamp);
case MSG_SNAPSHOT4:
return parseSnapshot4(buf,sequenceNumber);
case MSG_TRACKING_DATA:
return parseTrackingData(buf,sequenceNumber,timestamp);
}
return null;
}","@Override protected Object decode(Channel channel,SocketAddress remoteAddress,Object msg) throws Exception {
  ChannelBuffer buf=(ChannelBuffer)msg;
  buf.readUnsignedByte();
  buf.readUnsignedByte();
  int sequenceNumber=buf.readUnsignedShort();
  int messageId=buf.readUnsignedShort();
  buf.readUnsignedShort();
  int flags=buf.readUnsignedShort();
  buf.readUnsignedShort();
  if (!identify(String.valueOf(buf.readUnsignedInt()),channel)) {
    return null;
  }
  long timestamp=buf.readUnsignedInt();
  if ((flags & 0x1) == 0x0) {
    sendAcknowledgment(channel,sequenceNumber);
  }
switch (messageId) {
case MSG_UNIT_REPORT:
    return parseUnitReport(buf,sequenceNumber);
case MSG_TG2_REPORT:
  return parseTg2Report(buf,sequenceNumber);
case MSG_POSITION_REPORT:
return parsePositionReport(buf,sequenceNumber,timestamp);
case MSG_POSITION_REPORT_2:
return parsePositionReport2(buf,sequenceNumber,timestamp);
case MSG_SNAPSHOT4:
return parseSnapshot4(buf,sequenceNumber);
case MSG_TRACKING_DATA:
return parseTrackingData(buf,sequenceNumber,timestamp);
default :
Log.warning(new UnsupportedOperationException(String.valueOf(messageId)));
break;
}
return null;
}",0.9589652096342552
156135,"private static Date convertTimestamp(long timestamp){
  return new Date((timestamp - LEAP_SECONDS_DELTA) * 1000l);
}","private static Date convertTimestamp(long timestamp){
  return new Date((timestamp - LEAP_SECONDS_DELTA) * 1000);
}",0.9956709956709956
156136,"private Object processArray(Channel channel,ChannelBuffer buf){
  List<Position> positions=new LinkedList<>();
  int count=buf.readUnsignedByte();
  for (int i=0; i < count; i++) {
    Position position=parsePosition(buf).getPosition();
    if (position.getFixTime() != null) {
      positions.add(position);
    }
  }
  ChannelBuffer response=ChannelBuffers.dynamicBuffer(ByteOrder.LITTLE_ENDIAN,8);
  response.writeBytes(ChannelBuffers.copiedBuffer(ByteOrder.LITTLE_ENDIAN,""String_Node_Str"",charset));
  response.writeByte(count);
  sendReply(channel,response);
  if (positions.isEmpty()) {
    return null;
  }
  return positions;
}","private Object processArray(Channel channel,ChannelBuffer buf){
  List<Position> positions=new LinkedList<>();
  int count=buf.readUnsignedByte();
  for (int i=0; i < count; i++) {
    Position position=parsePosition(buf).getPosition();
    if (position.getFixTime() != null) {
      positions.add(position);
    }
  }
  ChannelBuffer response=ChannelBuffers.dynamicBuffer(ByteOrder.LITTLE_ENDIAN,8);
  response.writeBytes(ChannelBuffers.copiedBuffer(ByteOrder.LITTLE_ENDIAN,""String_Node_Str"",CHARSET));
  response.writeByte(count);
  sendReply(channel,response);
  if (positions.isEmpty()) {
    return null;
  }
  return positions;
}",0.988976377952756
156137,"private Object processSingle(Channel channel,ChannelBuffer buf){
  ParseResult result=parsePosition(buf);
  ChannelBuffer response=ChannelBuffers.dynamicBuffer(ByteOrder.LITTLE_ENDIAN,8);
  response.writeBytes(ChannelBuffers.copiedBuffer(ByteOrder.LITTLE_ENDIAN,""String_Node_Str"",charset));
  response.writeInt((int)result.getId());
  sendReply(channel,response);
  if (result.getPosition().getFixTime() == null) {
    return null;
  }
  return result.getPosition();
}","private Object processSingle(Channel channel,ChannelBuffer buf){
  ParseResult result=parsePosition(buf);
  ChannelBuffer response=ChannelBuffers.dynamicBuffer(ByteOrder.LITTLE_ENDIAN,8);
  response.writeBytes(ChannelBuffers.copiedBuffer(ByteOrder.LITTLE_ENDIAN,""String_Node_Str"",CHARSET));
  response.writeInt((int)result.getId());
  sendReply(channel,response);
  if (result.getPosition().getFixTime() == null) {
    return null;
  }
  return result.getPosition();
}",0.9850427350427352
156138,"private void sendReply(Channel channel,ChannelBuffer data){
  ChannelBuffer header=ChannelBuffers.directBuffer(ByteOrder.LITTLE_ENDIAN,16);
  header.writeBytes(ChannelBuffers.copiedBuffer(ByteOrder.LITTLE_ENDIAN,prefix,charset));
  header.writeInt((int)deviceUniqueId);
  header.writeInt((int)serverId);
  header.writeShort(data.readableBytes());
  header.writeByte(checksum(data));
  header.writeByte(checksum(header));
  if (channel != null) {
    channel.write(ChannelBuffers.copiedBuffer(header,data));
  }
}","private void sendReply(Channel channel,ChannelBuffer data){
  ChannelBuffer header=ChannelBuffers.directBuffer(ByteOrder.LITTLE_ENDIAN,16);
  header.writeBytes(ChannelBuffers.copiedBuffer(ByteOrder.LITTLE_ENDIAN,prefix,CHARSET));
  header.writeInt((int)deviceUniqueId);
  header.writeInt((int)serverId);
  header.writeShort(data.readableBytes());
  header.writeByte(checksum(data));
  header.writeByte(checksum(header));
  if (channel != null) {
    channel.write(ChannelBuffers.copiedBuffer(header,data));
  }
}",0.986328125
156139,"@Override protected Object decode(Channel channel,SocketAddress remoteAddress,Object msg) throws Exception {
  ChannelBuffer buf=(ChannelBuffer)msg;
  prefix=buf.toString(buf.readerIndex(),4,charset);
  buf.skipBytes(prefix.length());
  serverId=buf.readUnsignedInt();
  deviceUniqueId=buf.readUnsignedInt();
  int length=buf.readUnsignedShort();
  buf.skipBytes(2);
  if (length == 0) {
    return null;
  }
  String type=buf.toString(buf.readerIndex(),3,charset);
  buf.skipBytes(type.length());
switch (type) {
case ""String_Node_Str"":
    return processSingle(channel,buf);
case ""String_Node_Str"":
  return processArray(channel,buf);
case ""String_Node_Str"":
return processHandshake(channel,buf);
}
return null;
}","@Override protected Object decode(Channel channel,SocketAddress remoteAddress,Object msg) throws Exception {
  ChannelBuffer buf=(ChannelBuffer)msg;
  prefix=buf.toString(buf.readerIndex(),4,CHARSET);
  buf.skipBytes(prefix.length());
  serverId=buf.readUnsignedInt();
  deviceUniqueId=buf.readUnsignedInt();
  int length=buf.readUnsignedShort();
  buf.skipBytes(2);
  if (length == 0) {
    return null;
  }
  String type=buf.toString(buf.readerIndex(),3,CHARSET);
  buf.skipBytes(type.length());
switch (type) {
case ""String_Node_Str"":
    return processSingle(channel,buf);
case ""String_Node_Str"":
  return processArray(channel,buf);
case ""String_Node_Str"":
return processHandshake(channel,buf);
}
return null;
}",0.9804195804195804
156140,"private Object processHandshake(Channel channel,ChannelBuffer buf){
  buf.readByte();
  if (identify(buf.toString(Charset.defaultCharset()),channel)) {
    sendReply(channel,ChannelBuffers.copiedBuffer(ByteOrder.LITTLE_ENDIAN,""String_Node_Str"",charset));
  }
  return null;
}","private Object processHandshake(Channel channel,ChannelBuffer buf){
  buf.readByte();
  if (identify(buf.toString(Charset.defaultCharset()),channel)) {
    sendReply(channel,ChannelBuffers.copiedBuffer(ByteOrder.LITTLE_ENDIAN,""String_Node_Str"",CHARSET));
  }
  return null;
}",0.9745454545454544
156141,"private static double convertCoordinate(long coordinate){
  int sign=1;
  if (coordinate > 0x7fffffffl) {
    sign=-1;
    coordinate=0xffffffffl - coordinate;
  }
  long degrees=coordinate / 1000000;
  double minutes=(coordinate % 1000000) / 10000.0;
  return sign * (degrees + minutes / 60);
}","private static double convertCoordinate(long coordinate){
  int sign=1;
  if (coordinate > 0x7fffffffL) {
    sign=-1;
    coordinate=0xffffffffL - coordinate;
  }
  long degrees=coordinate / 1000000;
  double minutes=(coordinate % 1000000) / 10000.0;
  return sign * (degrees + minutes / 60);
}",0.9932203389830508
156142,"@Override protected Object decode(Channel channel,SocketAddress remoteAddress,Object msg) throws Exception {
  ChannelBuffer buf=(ChannelBuffer)msg;
  buf.readUnsignedByte();
  buf.readUnsignedShort();
  int index=buf.readUnsignedByte() >> 3;
  if (channel != null) {
    ChannelBuffer response=ChannelBuffers.copiedBuffer(""String_Node_Str"" + index,Charset.defaultCharset());
    channel.write(response,remoteAddress);
  }
  String id=String.valueOf(buf.readUnsignedInt());
  if (!identify(id,channel,remoteAddress)) {
    return null;
  }
  List<Position> positions=new LinkedList<>();
  while (buf.readableBytes() > 2) {
    Position position=new Position();
    position.setProtocol(getProtocolName());
    position.setDeviceId(getDeviceId());
    int end=buf.readerIndex() + buf.readUnsignedByte();
    position.setTime(new Date(buf.readUnsignedInt() * 1000));
    int flags=buf.readUnsignedByte();
    position.set(Event.KEY_SATELLITES,BitUtil.range(flags,2));
    position.setValid(BitUtil.range(flags,0,2) > 0);
    double lat=buf.readUnsignedMedium();
    lat=lat * -180 / 16777216 + 90;
    position.setLatitude(lat);
    double lon=buf.readUnsignedMedium();
    lon=lon * 360 / 16777216 - 180;
    position.setLongitude(lon);
    flags=buf.readUnsignedByte();
    position.set(Event.KEY_IGNITION,BitUtil.check(flags,0));
    position.set(Event.KEY_GSM,BitUtil.range(flags,2,3));
    position.setCourse((BitUtil.range(flags,5) * 45 + 180) % 360);
    int speed=buf.readUnsignedByte();
    if (speed < 250) {
      position.setSpeed(UnitsConverter.knotsFromKph(speed));
    }
    while (buf.readerIndex() < end) {
      int type=buf.readUnsignedByte();
      int length=buf.readUnsignedByte();
      if (length == 255) {
        length+=buf.readUnsignedByte();
      }
      int n=0;
switch (type) {
case 2:
        position.set(Event.KEY_ODOMETER,buf.readUnsignedMedium());
      break;
case 5:
    position.set(Event.KEY_INPUT,buf.readUnsignedByte());
  break;
case 6:
n=buf.readUnsignedByte() >> 4;
if (n < 2) {
position.set(Event.PREFIX_ADC + n,readSwappedFloat(buf));
}
 else {
position.set(""String_Node_Str"" + (n - 2),readSwappedFloat(buf));
}
break;
case 7:
int alarm=buf.readUnsignedByte();
buf.readUnsignedByte();
if (BitUtil.check(alarm,5)) {
position.set(Event.KEY_ALARM,BitUtil.range(alarm,0,4));
}
break;
case 8:
position.set(""String_Node_Str"",buf.readUnsignedByte());
break;
case 9:
position.set(""String_Node_Str"",ChannelBufferTools.readHexString(buf,16));
break;
case 10:
position.set(""String_Node_Str"",ChannelBufferTools.readHexString(buf,16));
break;
case 24:
Set<Integer> temps=new LinkedHashSet<>();
int temp=buf.readUnsignedByte();
for (int i=3; i >= 0; i--) {
n=(temp >> (2 * i)) & 0x03;
if (!temps.contains(n)) {
temps.add(n);
}
}
for (int i : temps) {
position.set(Event.PREFIX_TEMP + i,buf.readUnsignedByte());
}
break;
case 28:
position.set(""String_Node_Str"",buf.readUnsignedShort());
buf.readUnsignedByte();
break;
case 90:
position.set(Event.KEY_POWER,readSwappedFloat(buf));
break;
case 101:
position.set(Event.KEY_OBD_SPEED,buf.readUnsignedByte());
break;
case 102:
position.set(Event.KEY_RPM,buf.readUnsignedByte() * 50);
break;
case 107:
int fuel=buf.readUnsignedShort();
int fuelFormat=fuel >> 14;
if (fuelFormat == 1) {
position.set(Event.KEY_FUEL,(fuel & 0x3fff) * 0.4 + ""String_Node_Str"");
}
 else if (fuelFormat == 2) {
position.set(Event.KEY_FUEL,(fuel & 0x3fff) * 0.5 + ""String_Node_Str"");
}
 else if (fuelFormat == 3) {
position.set(Event.KEY_FUEL,(fuel & 0x3fff) * -0.5 + ""String_Node_Str"");
}
break;
case 108:
position.set(Event.KEY_OBD_ODOMETER,buf.readUnsignedInt() * 5);
break;
case 150:
position.set(""String_Node_Str"",buf.readUnsignedByte());
break;
default :
buf.skipBytes(length);
break;
}
}
positions.add(position);
}
return positions;
}","@Override protected Object decode(Channel channel,SocketAddress remoteAddress,Object msg) throws Exception {
  ChannelBuffer buf=(ChannelBuffer)msg;
  buf.readUnsignedByte();
  buf.readUnsignedShort();
  int index=buf.readUnsignedByte() >> 3;
  if (channel != null) {
    ChannelBuffer response=ChannelBuffers.copiedBuffer(""String_Node_Str"" + index,Charset.defaultCharset());
    channel.write(response,remoteAddress);
  }
  String id=String.valueOf(buf.readUnsignedInt());
  if (!identify(id,channel,remoteAddress)) {
    return null;
  }
  List<Position> positions=new LinkedList<>();
  while (buf.readableBytes() > 2) {
    Position position=new Position();
    position.setProtocol(getProtocolName());
    position.setDeviceId(getDeviceId());
    int end=buf.readerIndex() + buf.readUnsignedByte();
    position.setTime(new Date(buf.readUnsignedInt() * 1000));
    int flags=buf.readUnsignedByte();
    position.set(Event.KEY_SATELLITES,BitUtil.range(flags,2));
    position.setValid(BitUtil.range(flags,0,2) > 0);
    double lat=buf.readUnsignedMedium();
    lat=lat * -180 / 16777216 + 90;
    position.setLatitude(lat);
    double lon=buf.readUnsignedMedium();
    lon=lon * 360 / 16777216 - 180;
    position.setLongitude(lon);
    flags=buf.readUnsignedByte();
    position.set(Event.KEY_IGNITION,BitUtil.check(flags,0));
    position.set(Event.KEY_GSM,BitUtil.range(flags,2,3));
    position.setCourse((BitUtil.range(flags,5) * 45 + 180) % 360);
    int speed=buf.readUnsignedByte();
    if (speed < 250) {
      position.setSpeed(UnitsConverter.knotsFromKph(speed));
    }
    decodeExtraData(position,buf,end);
    positions.add(position);
  }
  return positions;
}",0.5842778793418647
156143,"@Override protected Object decode(Channel channel,SocketAddress remoteAddress,Object msg) throws Exception {
  ChannelBuffer buf=(ChannelBuffer)msg;
  buf.readByte();
  buf.readUnsignedByte();
  buf.readUnsignedByte();
  Position position=new Position();
  position.setProtocol(getProtocolName());
  String imei=ChannelBufferTools.readHexString(buf,16).substring(1);
  if (!identify(imei,channel)) {
    return null;
  }
  position.setDeviceId(getDeviceId());
  long seconds=buf.readUnsignedInt() & 0x7fffffffl;
  seconds+=946684800l;
  seconds-=timeZone;
  position.setTime(new Date(seconds * 1000));
  boolean hasLocation=false;
  while (buf.readableBytes() > 3) {
    short type=buf.readUnsignedByte();
    short length=buf.readUnsignedByte();
switch (type) {
case DATA_GPS:
      hasLocation=true;
    position.setValid(true);
  position.setLatitude(buf.readInt() / 1000000.0);
position.setLongitude(buf.readInt() / 1000000.0);
position.setSpeed(UnitsConverter.knotsFromKph(buf.readUnsignedShort()));
position.setCourse(buf.readUnsignedShort());
position.set(Event.KEY_HDOP,buf.readUnsignedShort());
break;
case DATA_LBS:
position.set(Event.KEY_MCC,buf.readUnsignedShort());
position.set(Event.KEY_MNC,buf.readUnsignedByte());
position.set(Event.KEY_LAC,buf.readUnsignedShort());
position.set(Event.KEY_CELL,buf.readUnsignedShort());
position.set(Event.KEY_GSM,-buf.readUnsignedByte());
break;
case DATA_STATUS:
int status=buf.readUnsignedShort();
position.set(Event.KEY_IGNITION,BitUtil.check(status,6));
position.set(Event.KEY_STATUS,status);
position.set(Event.KEY_ALARM,buf.readUnsignedShort());
break;
case DATA_ODOMETER:
position.set(Event.KEY_ODOMETER,buf.readUnsignedInt());
break;
case DATA_ADC:
for (int i=0; i < length / 2; i++) {
int value=buf.readUnsignedShort();
position.set(Event.PREFIX_ADC + BitUtil.range(value,12),BitUtil.range(value,0,12));
}
break;
case DATA_GEOFENCE:
position.set(""String_Node_Str"",buf.readUnsignedInt());
position.set(""String_Node_Str"",buf.readUnsignedInt());
break;
case DATA_OBD2:
position.set(""String_Node_Str"",ChannelBuffers.hexDump(buf.readBytes(length)));
break;
case DATA_FUEL:
position.set(""String_Node_Str"",buf.readUnsignedInt() / 10000.0);
break;
case DATA_OBD2_ALARM:
position.set(""String_Node_Str"",ChannelBuffers.hexDump(buf.readBytes(length)));
break;
case DATA_HARSH_DRIVER:
position.set(""String_Node_Str"",buf.readUnsignedByte());
break;
case DATA_CANBUS:
position.set(""String_Node_Str"",ChannelBuffers.hexDump(buf.readBytes(length)));
break;
case DATA_J1708:
position.set(""String_Node_Str"",ChannelBuffers.hexDump(buf.readBytes(length)));
break;
case DATA_VIN:
position.set(""String_Node_Str"",buf.readBytes(length).toString(Charset.defaultCharset()));
break;
case DATA_RFID:
position.set(Event.KEY_RFID,buf.readBytes(length - 1).toString(Charset.defaultCharset()));
position.set(""String_Node_Str"",buf.readUnsignedByte() != 0);
break;
case DATA_EVENT:
position.set(Event.KEY_EVENT,buf.readUnsignedByte());
position.set(""String_Node_Str"",buf.readUnsignedInt());
break;
default :
buf.skipBytes(length);
break;
}
}
if (hasLocation) {
return position;
}
return null;
}","@Override protected Object decode(Channel channel,SocketAddress remoteAddress,Object msg) throws Exception {
  ChannelBuffer buf=(ChannelBuffer)msg;
  buf.readByte();
  buf.readUnsignedByte();
  buf.readUnsignedByte();
  Position position=new Position();
  position.setProtocol(getProtocolName());
  String imei=ChannelBufferTools.readHexString(buf,16).substring(1);
  if (!identify(imei,channel)) {
    return null;
  }
  position.setDeviceId(getDeviceId());
  long seconds=buf.readUnsignedInt() & 0x7fffffffL;
  seconds+=946684800L;
  seconds-=timeZone;
  position.setTime(new Date(seconds * 1000));
  boolean hasLocation=false;
  while (buf.readableBytes() > 3) {
    short type=buf.readUnsignedByte();
    short length=buf.readUnsignedByte();
switch (type) {
case DATA_GPS:
      hasLocation=true;
    position.setValid(true);
  position.setLatitude(buf.readInt() / 1000000.0);
position.setLongitude(buf.readInt() / 1000000.0);
position.setSpeed(UnitsConverter.knotsFromKph(buf.readUnsignedShort()));
position.setCourse(buf.readUnsignedShort());
position.set(Event.KEY_HDOP,buf.readUnsignedShort());
break;
case DATA_LBS:
position.set(Event.KEY_MCC,buf.readUnsignedShort());
position.set(Event.KEY_MNC,buf.readUnsignedByte());
position.set(Event.KEY_LAC,buf.readUnsignedShort());
position.set(Event.KEY_CELL,buf.readUnsignedShort());
position.set(Event.KEY_GSM,-buf.readUnsignedByte());
break;
case DATA_STATUS:
int status=buf.readUnsignedShort();
position.set(Event.KEY_IGNITION,BitUtil.check(status,6));
position.set(Event.KEY_STATUS,status);
position.set(Event.KEY_ALARM,buf.readUnsignedShort());
break;
case DATA_ODOMETER:
position.set(Event.KEY_ODOMETER,buf.readUnsignedInt());
break;
case DATA_ADC:
for (int i=0; i < length / 2; i++) {
int value=buf.readUnsignedShort();
position.set(Event.PREFIX_ADC + BitUtil.range(value,12),BitUtil.range(value,0,12));
}
break;
case DATA_GEOFENCE:
position.set(""String_Node_Str"",buf.readUnsignedInt());
position.set(""String_Node_Str"",buf.readUnsignedInt());
break;
case DATA_OBD2:
position.set(""String_Node_Str"",ChannelBuffers.hexDump(buf.readBytes(length)));
break;
case DATA_FUEL:
position.set(""String_Node_Str"",buf.readUnsignedInt() / 10000.0);
break;
case DATA_OBD2_ALARM:
position.set(""String_Node_Str"",ChannelBuffers.hexDump(buf.readBytes(length)));
break;
case DATA_HARSH_DRIVER:
position.set(""String_Node_Str"",buf.readUnsignedByte());
break;
case DATA_CANBUS:
position.set(""String_Node_Str"",ChannelBuffers.hexDump(buf.readBytes(length)));
break;
case DATA_J1708:
position.set(""String_Node_Str"",ChannelBuffers.hexDump(buf.readBytes(length)));
break;
case DATA_VIN:
position.set(""String_Node_Str"",buf.readBytes(length).toString(Charset.defaultCharset()));
break;
case DATA_RFID:
position.set(Event.KEY_RFID,buf.readBytes(length - 1).toString(Charset.defaultCharset()));
position.set(""String_Node_Str"",buf.readUnsignedByte() != 0);
break;
case DATA_EVENT:
position.set(Event.KEY_EVENT,buf.readUnsignedByte());
position.set(""String_Node_Str"",buf.readUnsignedInt());
break;
default :
buf.skipBytes(length);
break;
}
}
if (hasLocation) {
return position;
}
return null;
}",0.9993587688361656
156144,"@Override protected Object decode(Channel channel,SocketAddress remoteAddress,Object msg) throws Exception {
  ChannelBuffer buf=(ChannelBuffer)msg;
  buf.readUnsignedByte();
  buf.readUnsignedShort();
  int index=buf.readUnsignedByte() >> 3;
  if (channel != null) {
    ChannelBuffer response=ChannelBuffers.copiedBuffer(""String_Node_Str"" + index,Charset.defaultCharset());
    channel.write(response,remoteAddress);
  }
  String id=String.valueOf(buf.readUnsignedInt());
  if (!identify(id,channel,remoteAddress)) {
    return null;
  }
  List<Position> positions=new LinkedList<>();
  while (buf.readableBytes() > 2) {
    Position position=new Position();
    position.setProtocol(getProtocolName());
    position.setDeviceId(getDeviceId());
    int end=buf.readerIndex() + buf.readUnsignedByte();
    position.setTime(new Date(buf.readUnsignedInt() * 1000));
    int flags=buf.readUnsignedByte();
    position.set(Event.KEY_SATELLITES,BitUtil.range(flags,2));
    position.setValid(BitUtil.range(flags,0,2) > 0);
    double lat=buf.readUnsignedMedium();
    lat=lat * -180 / 16777216 + 90;
    position.setLatitude(lat);
    double lon=buf.readUnsignedMedium();
    lon=lon * 360 / 16777216 - 180;
    position.setLongitude(lon);
    flags=buf.readUnsignedByte();
    position.set(Event.KEY_IGNITION,BitUtil.check(flags,0));
    position.set(Event.KEY_GSM,BitUtil.range(flags,2,3));
    position.setCourse((BitUtil.range(flags,5) * 45 + 180) % 360);
    int speed=buf.readUnsignedByte();
    if (speed < 250) {
      position.setSpeed(UnitsConverter.knotsFromKph(speed));
    }
    while (buf.readerIndex() < end) {
      int type=buf.readUnsignedByte();
      int length=buf.readUnsignedByte();
      if (length == 255) {
        length+=buf.readUnsignedByte();
      }
switch (type) {
case 2:
        position.set(Event.KEY_ODOMETER,buf.readUnsignedMedium() * 5);
      break;
case 5:
    position.set(Event.KEY_INPUT,buf.readUnsignedByte());
  break;
case 6:
{
  int n=buf.readUnsignedByte() >> 4;
  if (n < 2) {
    position.set(Event.PREFIX_ADC + n,readSwappedFloat(buf));
  }
 else {
    position.set(""String_Node_Str"" + (n - 2),readSwappedFloat(buf));
  }
}
break;
case 7:
{
int alarm=buf.readUnsignedByte();
buf.readUnsignedByte();
if (BitUtil.check(alarm,5)) {
position.set(Event.KEY_ALARM,BitUtil.range(alarm,0,4));
}
}
break;
case 8:
position.set(""String_Node_Str"",buf.readUnsignedByte());
break;
case 9:
position.set(""String_Node_Str"",ChannelBufferTools.readHexString(buf,16));
break;
case 10:
position.set(""String_Node_Str"",ChannelBufferTools.readHexString(buf,16));
break;
case 24:
{
Set<Integer> temps=new LinkedHashSet<>();
int temp=buf.readUnsignedByte();
for (int i=3; i >= 0; i--) {
int n=(temp >> (2 * i)) & 0x03;
if (!temps.contains(n)) {
temps.add(n);
}
}
for (int n : temps) {
position.set(Event.PREFIX_TEMP + n,buf.readUnsignedByte());
}
}
break;
case 28:
position.set(""String_Node_Str"",buf.readUnsignedShort());
buf.readUnsignedByte();
break;
case 90:
position.set(Event.KEY_POWER,readSwappedFloat(buf));
break;
case 101:
position.set(Event.KEY_OBD_SPEED,buf.readUnsignedByte());
break;
case 102:
position.set(Event.KEY_RPM,buf.readUnsignedByte() * 50);
break;
case 107:
{
int fuel=buf.readUnsignedShort();
switch (fuel >> 16) {
case 1:
position.set(Event.KEY_FUEL,(buf.readUnsignedShort() & 0x3fff) * 0.4 + ""String_Node_Str"");
break;
case 2:
position.set(Event.KEY_FUEL,(buf.readUnsignedShort() & 0x3fff) * 0.5 + ""String_Node_Str"");
break;
case 3:
position.set(Event.KEY_FUEL,(buf.readUnsignedShort() & 0x3fff) * -0.5 + ""String_Node_Str"");
break;
}
}
break;
case 108:
position.set(Event.KEY_OBD_ODOMETER,buf.readUnsignedInt() * 5);
break;
case 150:
position.set(""String_Node_Str"",buf.readUnsignedByte());
break;
default :
buf.skipBytes(length);
break;
}
}
positions.add(position);
}
return positions;
}","@Override protected Object decode(Channel channel,SocketAddress remoteAddress,Object msg) throws Exception {
  ChannelBuffer buf=(ChannelBuffer)msg;
  buf.readUnsignedByte();
  buf.readUnsignedShort();
  int index=buf.readUnsignedByte() >> 3;
  if (channel != null) {
    ChannelBuffer response=ChannelBuffers.copiedBuffer(""String_Node_Str"" + index,Charset.defaultCharset());
    channel.write(response,remoteAddress);
  }
  String id=String.valueOf(buf.readUnsignedInt());
  if (!identify(id,channel,remoteAddress)) {
    return null;
  }
  List<Position> positions=new LinkedList<>();
  while (buf.readableBytes() > 2) {
    Position position=new Position();
    position.setProtocol(getProtocolName());
    position.setDeviceId(getDeviceId());
    int end=buf.readerIndex() + buf.readUnsignedByte();
    position.setTime(new Date(buf.readUnsignedInt() * 1000));
    int flags=buf.readUnsignedByte();
    position.set(Event.KEY_SATELLITES,BitUtil.range(flags,2));
    position.setValid(BitUtil.range(flags,0,2) > 0);
    double lat=buf.readUnsignedMedium();
    lat=lat * -180 / 16777216 + 90;
    position.setLatitude(lat);
    double lon=buf.readUnsignedMedium();
    lon=lon * 360 / 16777216 - 180;
    position.setLongitude(lon);
    flags=buf.readUnsignedByte();
    position.set(Event.KEY_IGNITION,BitUtil.check(flags,0));
    position.set(Event.KEY_GSM,BitUtil.range(flags,2,3));
    position.setCourse((BitUtil.range(flags,5) * 45 + 180) % 360);
    int speed=buf.readUnsignedByte();
    if (speed < 250) {
      position.setSpeed(UnitsConverter.knotsFromKph(speed));
    }
    while (buf.readerIndex() < end) {
      int type=buf.readUnsignedByte();
      int length=buf.readUnsignedByte();
      if (length == 255) {
        length+=buf.readUnsignedByte();
      }
switch (type) {
case 2:
        position.set(Event.KEY_ODOMETER,buf.readUnsignedMedium());
      break;
case 5:
    position.set(Event.KEY_INPUT,buf.readUnsignedByte());
  break;
case 6:
{
  int n=buf.readUnsignedByte() >> 4;
  if (n < 2) {
    position.set(Event.PREFIX_ADC + n,readSwappedFloat(buf));
  }
 else {
    position.set(""String_Node_Str"" + (n - 2),readSwappedFloat(buf));
  }
}
break;
case 7:
{
int alarm=buf.readUnsignedByte();
buf.readUnsignedByte();
if (BitUtil.check(alarm,5)) {
position.set(Event.KEY_ALARM,BitUtil.range(alarm,0,4));
}
}
break;
case 8:
position.set(""String_Node_Str"",buf.readUnsignedByte());
break;
case 9:
position.set(""String_Node_Str"",ChannelBufferTools.readHexString(buf,16));
break;
case 10:
position.set(""String_Node_Str"",ChannelBufferTools.readHexString(buf,16));
break;
case 24:
{
Set<Integer> temps=new LinkedHashSet<>();
int temp=buf.readUnsignedByte();
for (int i=3; i >= 0; i--) {
int n=(temp >> (2 * i)) & 0x03;
if (!temps.contains(n)) {
temps.add(n);
}
}
for (int n : temps) {
position.set(Event.PREFIX_TEMP + n,buf.readUnsignedByte());
}
}
break;
case 28:
position.set(""String_Node_Str"",buf.readUnsignedShort());
buf.readUnsignedByte();
break;
case 90:
position.set(Event.KEY_POWER,readSwappedFloat(buf));
break;
case 101:
position.set(Event.KEY_OBD_SPEED,buf.readUnsignedByte());
break;
case 102:
position.set(Event.KEY_RPM,buf.readUnsignedByte() * 50);
break;
case 107:
{
int fuel=buf.readUnsignedShort();
switch (fuel >> 14) {
case 1:
position.set(Event.KEY_FUEL,(fuel & 0x3fff) * 0.4 + ""String_Node_Str"");
break;
case 2:
position.set(Event.KEY_FUEL,(fuel & 0x3fff) * 0.5 + ""String_Node_Str"");
break;
case 3:
position.set(Event.KEY_FUEL,(fuel & 0x3fff) * -0.5 + ""String_Node_Str"");
break;
}
}
break;
case 108:
position.set(Event.KEY_OBD_ODOMETER,buf.readUnsignedInt() * 5);
break;
case 150:
position.set(""String_Node_Str"",buf.readUnsignedByte());
break;
default :
buf.skipBytes(length);
break;
}
}
positions.add(position);
}
return positions;
}",0.9885631655054556
156145,"public static Map<String,Object> fromJson(JsonObject json){
  Map<String,Object> attributes=new LinkedHashMap<>();
  for (  Map.Entry<String,JsonValue> entry : json.entrySet()) {
switch (entry.getValue().getValueType()) {
case STRING:
      attributes.put(entry.getKey(),((JsonString)entry.getValue()).getString());
    break;
case NUMBER:
  JsonNumber number=(JsonNumber)entry.getValue();
if (number.isIntegral()) {
  attributes.put(entry.getKey(),number.longValue());
}
 else {
  attributes.put(entry.getKey(),number.doubleValue());
}
break;
case TRUE:
attributes.put(entry.getKey(),true);
break;
case FALSE:
attributes.put(entry.getKey(),false);
break;
default :
Log.warning(new IllegalArgumentException());
break;
}
}
return attributes;
}","public static Map<String,Object> fromJson(JsonObject json){
  Map<String,Object> attributes=new LinkedHashMap<>();
  for (  Map.Entry<String,JsonValue> entry : json.entrySet()) {
    JsonValue.ValueType type=entry.getValue().getValueType();
switch (type) {
case STRING:
      attributes.put(entry.getKey(),((JsonString)entry.getValue()).getString());
    break;
case NUMBER:
  JsonNumber number=(JsonNumber)entry.getValue();
if (number.isIntegral()) {
  attributes.put(entry.getKey(),number.longValue());
}
 else {
  attributes.put(entry.getKey(),number.doubleValue());
}
break;
case TRUE:
attributes.put(entry.getKey(),true);
break;
case FALSE:
attributes.put(entry.getKey(),false);
break;
default :
Log.warning(new IllegalArgumentException(type.name()));
break;
}
}
return attributes;
}",0.9294117647058824
156146,"@Override protected Object decode(ChannelHandlerContext ctx,Channel channel,ChannelBuffer buf) throws Exception {
  int available=buf.readableBytes();
  if (available < MESSAGE_MINIMUM_LENGTH) {
    return null;
  }
  int length=0;
switch (buf.getUnsignedByte(4)) {
case CellocatorProtocolDecoder.MSG_CLIENT_STATUS:
    length=70;
  break;
case CellocatorProtocolDecoder.MSG_CLIENT_PROGRAMMING:
length=31;
break;
case CellocatorProtocolDecoder.MSG_CLIENT_SERIAL_LOG:
length=70;
break;
case CellocatorProtocolDecoder.MSG_CLIENT_SERIAL:
if (available >= 19) {
length=19 + buf.getUnsignedShort(16);
}
break;
case CellocatorProtocolDecoder.MSG_CLIENT_MODULAR:
length=15 + buf.getUnsignedByte(13);
break;
default :
Log.warning(new UnsupportedOperationException());
break;
}
if (length > 0 && available >= length) {
return buf.readBytes(length);
}
return null;
}","@Override protected Object decode(ChannelHandlerContext ctx,Channel channel,ChannelBuffer buf) throws Exception {
  int available=buf.readableBytes();
  if (available < MESSAGE_MINIMUM_LENGTH) {
    return null;
  }
  int length=0;
  int type=buf.getUnsignedByte(4);
switch (type) {
case CellocatorProtocolDecoder.MSG_CLIENT_STATUS:
    length=70;
  break;
case CellocatorProtocolDecoder.MSG_CLIENT_PROGRAMMING:
length=31;
break;
case CellocatorProtocolDecoder.MSG_CLIENT_SERIAL_LOG:
length=70;
break;
case CellocatorProtocolDecoder.MSG_CLIENT_SERIAL:
if (available >= 19) {
length=19 + buf.getUnsignedShort(16);
}
break;
case CellocatorProtocolDecoder.MSG_CLIENT_MODULAR:
length=15 + buf.getUnsignedByte(13);
break;
default :
Log.warning(new UnsupportedOperationException(String.valueOf(type)));
break;
}
if (length > 0 && available >= length) {
return buf.readBytes(length);
}
return null;
}",0.9696969696969696
156147,"@Override protected Object encodeCommand(Command command){
switch (command.getType()) {
case Command.TYPE_POSITION_STOP:
    return formatCommand(command,""String_Node_Str"",Command.KEY_UNIQUE_ID);
case Command.TYPE_POSITION_SINGLE:
  return formatCommand(command,""String_Node_Str"",Command.KEY_UNIQUE_ID);
case Command.TYPE_POSITION_PERIODIC:
return formatCommand(command,""String_Node_Str"",this,Command.KEY_UNIQUE_ID,Command.KEY_FREQUENCY);
case Command.TYPE_ENGINE_STOP:
return formatCommand(command,""String_Node_Str"",Command.KEY_UNIQUE_ID);
case Command.TYPE_ENGINE_RESUME:
return formatCommand(command,""String_Node_Str"",Command.KEY_UNIQUE_ID);
case Command.TYPE_ALARM_ARM:
return formatCommand(command,""String_Node_Str"",Command.KEY_UNIQUE_ID);
case Command.TYPE_ALARM_DISARM:
return formatCommand(command,""String_Node_Str"",Command.KEY_UNIQUE_ID);
}
return null;
}","@Override protected Object encodeCommand(Command command){
switch (command.getType()) {
case Command.TYPE_POSITION_STOP:
    return formatCommand(command,""String_Node_Str"",Command.KEY_UNIQUE_ID);
case Command.TYPE_POSITION_SINGLE:
  return formatCommand(command,""String_Node_Str"",Command.KEY_UNIQUE_ID);
case Command.TYPE_POSITION_PERIODIC:
return formatCommand(command,""String_Node_Str"",this,Command.KEY_UNIQUE_ID,Command.KEY_FREQUENCY);
case Command.TYPE_ENGINE_STOP:
return formatCommand(command,""String_Node_Str"",Command.KEY_UNIQUE_ID);
case Command.TYPE_ENGINE_RESUME:
return formatCommand(command,""String_Node_Str"",Command.KEY_UNIQUE_ID);
case Command.TYPE_ALARM_ARM:
return formatCommand(command,""String_Node_Str"",Command.KEY_UNIQUE_ID);
case Command.TYPE_ALARM_DISARM:
return formatCommand(command,""String_Node_Str"",Command.KEY_UNIQUE_ID);
default :
Log.warning(new UnsupportedOperationException(command.getType()));
break;
}
return null;
}",0.9536423841059604
156148,"@Override protected Object encodeCommand(Command command){
switch (command.getType()) {
case Command.TYPE_ENGINE_STOP:
    return encodeContent(""String_Node_Str"");
case Command.TYPE_ENGINE_RESUME:
  return encodeContent(""String_Node_Str"");
}
return null;
}","@Override protected Object encodeCommand(Command command){
switch (command.getType()) {
case Command.TYPE_ENGINE_STOP:
    return encodeContent(""String_Node_Str"");
case Command.TYPE_ENGINE_RESUME:
  return encodeContent(""String_Node_Str"");
default :
Log.warning(new UnsupportedOperationException(command.getType()));
break;
}
return null;
}",0.8590604026845637
156149,"@Override protected Object encodeCommand(Command command){
switch (command.getType()) {
case Command.TYPE_ENGINE_STOP:
    return formatCommand(command,""String_Node_Str"",Command.KEY_UNIQUE_ID);
case Command.TYPE_ENGINE_RESUME:
  return formatCommand(command,""String_Node_Str"",Command.KEY_UNIQUE_ID);
case Command.TYPE_ALARM_ARM:
return formatCommand(command,""String_Node_Str"",Command.KEY_UNIQUE_ID);
case Command.TYPE_ALARM_DISARM:
return formatCommand(command,""String_Node_Str"",Command.KEY_UNIQUE_ID);
}
return null;
}","@Override protected Object encodeCommand(Command command){
switch (command.getType()) {
case Command.TYPE_ENGINE_STOP:
    return formatCommand(command,""String_Node_Str"",Command.KEY_UNIQUE_ID);
case Command.TYPE_ENGINE_RESUME:
  return formatCommand(command,""String_Node_Str"",Command.KEY_UNIQUE_ID);
case Command.TYPE_ALARM_ARM:
return formatCommand(command,""String_Node_Str"",Command.KEY_UNIQUE_ID);
case Command.TYPE_ALARM_DISARM:
return formatCommand(command,""String_Node_Str"",Command.KEY_UNIQUE_ID);
default :
Log.warning(new UnsupportedOperationException(command.getType()));
break;
}
return null;
}",0.9251336898395722
156150,"@Override protected Object decode(Channel channel,SocketAddress remoteAddress,Object msg) throws Exception {
  ChannelBuffer buf=(ChannelBuffer)msg;
  buf.readUnsignedByte();
  int version=buf.readUnsignedByte();
  String imei;
  if ((version & 0x80) != 0) {
    imei=String.valueOf((buf.readUnsignedInt() << (3 * 8)) | buf.readUnsignedMedium());
  }
 else {
    imei=String.valueOf(imeiFromUnitId(buf.readUnsignedMedium()));
  }
  buf.readUnsignedShort();
  int selector=DEFAULT_SELECTOR;
  if ((version & 0x40) != 0) {
    selector=buf.readUnsignedMedium();
  }
  Position position=new Position();
  position.setProtocol(getProtocolName());
  if (!identify(imei,channel)) {
    return null;
  }
  position.setDeviceId(getDeviceId());
  int event=buf.readUnsignedByte();
  position.set(Event.KEY_EVENT,event);
  buf.readUnsignedByte();
  if ((selector & 0x0008) != 0) {
    position.setValid((buf.readUnsignedByte() & 0x40) != 0);
  }
 else {
    return null;
  }
  if ((selector & 0x0004) != 0) {
    buf.skipBytes(4);
  }
  if ((selector & 0x0008) != 0) {
    position.setTime(new Date(buf.readUnsignedInt() * 1000));
    position.setLatitude(buf.readInt() / 1000000.0);
    position.setLongitude(buf.readInt() / 1000000.0);
    position.set(Event.KEY_SATELLITES,buf.readUnsignedByte());
  }
  if ((selector & 0x0010) != 0) {
    position.setSpeed(UnitsConverter.knotsFromKph(buf.readUnsignedByte()));
    buf.readUnsignedByte();
    position.setCourse(buf.readUnsignedByte() * 2.0);
  }
  if ((selector & 0x0040) != 0) {
    position.set(Event.KEY_INPUT,buf.readUnsignedByte());
  }
  if ((selector & 0x0020) != 0) {
    position.set(Event.PREFIX_ADC + 1,buf.readUnsignedShort());
    position.set(Event.PREFIX_ADC + 2,buf.readUnsignedShort());
    position.set(Event.PREFIX_ADC + 3,buf.readUnsignedShort());
    position.set(Event.PREFIX_ADC + 4,buf.readUnsignedShort());
  }
  if ((selector & 0x8000) != 0) {
    position.set(Event.KEY_POWER,buf.readUnsignedShort() / 1000.0);
    position.set(Event.KEY_BATTERY,buf.readUnsignedShort());
  }
  if ((selector & 0x10000) != 0) {
    buf.readUnsignedShort();
    buf.readUnsignedInt();
  }
  if ((selector & 0x20000) != 0) {
    buf.readUnsignedShort();
    buf.readUnsignedInt();
  }
  if ((selector & 0x0080) != 0) {
    position.set(""String_Node_Str"",buf.readUnsignedInt());
  }
  if ((selector & 0x0100) != 0) {
    position.set(""String_Node_Str"",buf.readUnsignedInt());
  }
  if ((selector & 0x0040) != 0) {
    position.set(Event.KEY_OUTPUT,buf.readUnsignedByte());
  }
  if ((selector & 0x0200) != 0) {
    buf.skipBytes(6);
  }
  if ((selector & 0x0400) != 0) {
    buf.readUnsignedByte();
  }
  if ((selector & 0x0800) != 0) {
    position.setAltitude(buf.readShort());
  }
  if ((selector & 0x2000) != 0) {
    buf.readUnsignedShort();
  }
  if ((selector & 0x4000) != 0) {
    buf.skipBytes(8);
  }
  if ((selector & 0x80000) != 0) {
    buf.skipBytes(11);
  }
  if ((selector & 0x1000) != 0) {
switch (event) {
case 2:
case 40:
      buf.readUnsignedByte();
    break;
case 9:
  buf.readUnsignedMedium();
break;
case 31:
case 32:
buf.readUnsignedShort();
break;
case 38:
buf.skipBytes(4 * 9);
break;
case 113:
buf.readUnsignedInt();
buf.readUnsignedByte();
break;
case 121:
case 142:
buf.readLong();
break;
case 130:
buf.readUnsignedInt();
break;
}
}
if (Context.getConfig().getBoolean(getProtocolName() + ""String_Node_Str"") && buf.readable() && (selector & 0x1000) != 0 && event == EVENT_DATA) {
buf.readUnsignedMedium();
buf.readUnsignedByte();
int count=buf.readUnsignedByte();
buf.readUnsignedByte();
buf.readUnsignedShort();
buf.readUnsignedInt();
buf.skipBytes(8);
ArrayList<ChannelBuffer> values=new ArrayList<>(count);
for (int i=0; i < count; i++) {
values.add(buf.readBytes(8));
}
for (int i=0; i < count; i++) {
ChannelBuffer value=values.get(i);
switch (buf.readInt()) {
case 0x20D:
position.set(Event.KEY_RPM,ChannelBuffers.swapShort(value.readShort()));
position.set(""String_Node_Str"",ChannelBuffers.swapShort(value.readShort()) * 0.1);
position.set(""String_Node_Str"",ChannelBuffers.swapShort(value.readShort()) * 0.01);
position.set(""String_Node_Str"",ChannelBuffers.swapShort(value.readShort()) * 0.1);
break;
case 0x30D:
position.set(""String_Node_Str"",ChannelBufferTools.readHexString(value,16));
break;
case 0x40C:
position.set(""String_Node_Str"",ChannelBuffers.swapShort(value.readShort()) * 0.1);
position.set(""String_Node_Str"",ChannelBuffers.swapShort(value.readShort()) * 0.1);
break;
case 0x40D:
position.set(""String_Node_Str"",ChannelBufferTools.readHexString(value,16));
break;
case 0x50C:
position.set(""String_Node_Str"",ChannelBuffers.swapShort(value.readShort()) * 0.1);
position.set(""String_Node_Str"",ChannelBuffers.swapShort(value.readShort()) * 0.1);
break;
case 0x50D:
position.set(""String_Node_Str"",ChannelBuffers.swapShort(value.readShort()) * 0.1);
position.set(""String_Node_Str"",ChannelBuffers.swapShort(value.readShort()) * 0.1);
break;
case 0x58C:
value.readByte();
value.readShort();
switch (value.readByte()) {
case 0x01:
position.set(""String_Node_Str"",ChannelBuffers.swapInt(value.readInt()) * 0.1);
break;
case 0x02:
position.set(""String_Node_Str"",ChannelBuffers.swapInt(value.readInt()) * 0.1);
break;
case 0x05:
position.set(""String_Node_Str"",ChannelBuffers.swapInt(value.readInt()));
break;
case 0x13:
position.set(""String_Node_Str"",ChannelBuffers.swapInt(value.readInt()) / 60 / 60);
break;
case 0x14:
position.set(""String_Node_Str"",ChannelBuffers.swapInt(value.readInt()) / 60 / 60);
break;
case 0x17:
position.set(""String_Node_Str"",ChannelBuffers.swapInt(value.readInt()));
break;
case 0x18:
position.set(""String_Node_Str"",ChannelBuffers.swapInt(value.readInt()) * 0.01);
break;
}
break;
}
}
}
return position;
}","@Override protected Object decode(Channel channel,SocketAddress remoteAddress,Object msg) throws Exception {
  ChannelBuffer buf=(ChannelBuffer)msg;
  buf.readUnsignedByte();
  int version=buf.readUnsignedByte();
  String imei;
  if ((version & 0x80) != 0) {
    imei=String.valueOf((buf.readUnsignedInt() << (3 * 8)) | buf.readUnsignedMedium());
  }
 else {
    imei=String.valueOf(imeiFromUnitId(buf.readUnsignedMedium()));
  }
  buf.readUnsignedShort();
  int selector=DEFAULT_SELECTOR;
  if ((version & 0x40) != 0) {
    selector=buf.readUnsignedMedium();
  }
  Position position=new Position();
  position.setProtocol(getProtocolName());
  if (!identify(imei,channel)) {
    return null;
  }
  position.setDeviceId(getDeviceId());
  int event=buf.readUnsignedByte();
  position.set(Event.KEY_EVENT,event);
  buf.readUnsignedByte();
  if ((selector & 0x0008) != 0) {
    position.setValid((buf.readUnsignedByte() & 0x40) != 0);
  }
 else {
    return null;
  }
  if ((selector & 0x0004) != 0) {
    buf.skipBytes(4);
  }
  if ((selector & 0x0008) != 0) {
    position.setTime(new Date(buf.readUnsignedInt() * 1000));
    position.setLatitude(buf.readInt() / 1000000.0);
    position.setLongitude(buf.readInt() / 1000000.0);
    position.set(Event.KEY_SATELLITES,buf.readUnsignedByte());
  }
  if ((selector & 0x0010) != 0) {
    position.setSpeed(UnitsConverter.knotsFromKph(buf.readUnsignedByte()));
    buf.readUnsignedByte();
    position.setCourse(buf.readUnsignedByte() * 2.0);
  }
  if ((selector & 0x0040) != 0) {
    position.set(Event.KEY_INPUT,buf.readUnsignedByte());
  }
  if ((selector & 0x0020) != 0) {
    position.set(Event.PREFIX_ADC + 1,buf.readUnsignedShort());
    position.set(Event.PREFIX_ADC + 2,buf.readUnsignedShort());
    position.set(Event.PREFIX_ADC + 3,buf.readUnsignedShort());
    position.set(Event.PREFIX_ADC + 4,buf.readUnsignedShort());
  }
  if ((selector & 0x8000) != 0) {
    position.set(Event.KEY_POWER,buf.readUnsignedShort() / 1000.0);
    position.set(Event.KEY_BATTERY,buf.readUnsignedShort());
  }
  if ((selector & 0x10000) != 0) {
    buf.readUnsignedShort();
    buf.readUnsignedInt();
  }
  if ((selector & 0x20000) != 0) {
    buf.readUnsignedShort();
    buf.readUnsignedInt();
  }
  if ((selector & 0x0080) != 0) {
    position.set(""String_Node_Str"",buf.readUnsignedInt());
  }
  if ((selector & 0x0100) != 0) {
    position.set(""String_Node_Str"",buf.readUnsignedInt());
  }
  if ((selector & 0x0040) != 0) {
    position.set(Event.KEY_OUTPUT,buf.readUnsignedByte());
  }
  if ((selector & 0x0200) != 0) {
    buf.skipBytes(6);
  }
  if ((selector & 0x0400) != 0) {
    buf.readUnsignedByte();
  }
  if ((selector & 0x0800) != 0) {
    position.setAltitude(buf.readShort());
  }
  if ((selector & 0x2000) != 0) {
    buf.readUnsignedShort();
  }
  if ((selector & 0x4000) != 0) {
    buf.skipBytes(8);
  }
  if ((selector & 0x80000) != 0) {
    buf.skipBytes(11);
  }
  if ((selector & 0x1000) != 0) {
switch (event) {
case 2:
case 40:
      buf.readUnsignedByte();
    break;
case 9:
  buf.readUnsignedMedium();
break;
case 31:
case 32:
buf.readUnsignedShort();
break;
case 38:
buf.skipBytes(4 * 9);
break;
case 113:
buf.readUnsignedInt();
buf.readUnsignedByte();
break;
case 121:
case 142:
buf.readLong();
break;
case 130:
buf.readUnsignedInt();
break;
default :
break;
}
}
if (Context.getConfig().getBoolean(getProtocolName() + ""String_Node_Str"") && buf.readable() && (selector & 0x1000) != 0 && event == EVENT_DATA) {
buf.readUnsignedMedium();
buf.readUnsignedByte();
int count=buf.readUnsignedByte();
buf.readUnsignedByte();
buf.readUnsignedShort();
buf.readUnsignedInt();
buf.skipBytes(8);
ArrayList<ChannelBuffer> values=new ArrayList<>(count);
for (int i=0; i < count; i++) {
values.add(buf.readBytes(8));
}
for (int i=0; i < count; i++) {
ChannelBuffer value=values.get(i);
switch (buf.readInt()) {
case 0x20D:
position.set(Event.KEY_RPM,ChannelBuffers.swapShort(value.readShort()));
position.set(""String_Node_Str"",ChannelBuffers.swapShort(value.readShort()) * 0.1);
position.set(""String_Node_Str"",ChannelBuffers.swapShort(value.readShort()) * 0.01);
position.set(""String_Node_Str"",ChannelBuffers.swapShort(value.readShort()) * 0.1);
break;
case 0x30D:
position.set(""String_Node_Str"",ChannelBufferTools.readHexString(value,16));
break;
case 0x40C:
position.set(""String_Node_Str"",ChannelBuffers.swapShort(value.readShort()) * 0.1);
position.set(""String_Node_Str"",ChannelBuffers.swapShort(value.readShort()) * 0.1);
break;
case 0x40D:
position.set(""String_Node_Str"",ChannelBufferTools.readHexString(value,16));
break;
case 0x50C:
position.set(""String_Node_Str"",ChannelBuffers.swapShort(value.readShort()) * 0.1);
position.set(""String_Node_Str"",ChannelBuffers.swapShort(value.readShort()) * 0.1);
break;
case 0x50D:
position.set(""String_Node_Str"",ChannelBuffers.swapShort(value.readShort()) * 0.1);
position.set(""String_Node_Str"",ChannelBuffers.swapShort(value.readShort()) * 0.1);
break;
case 0x58C:
value.readByte();
value.readShort();
switch (value.readByte()) {
case 0x01:
position.set(""String_Node_Str"",ChannelBuffers.swapInt(value.readInt()) * 0.1);
break;
case 0x02:
position.set(""String_Node_Str"",ChannelBuffers.swapInt(value.readInt()) * 0.1);
break;
case 0x05:
position.set(""String_Node_Str"",ChannelBuffers.swapInt(value.readInt()));
break;
case 0x13:
position.set(""String_Node_Str"",ChannelBuffers.swapInt(value.readInt()) / 60 / 60);
break;
case 0x14:
position.set(""String_Node_Str"",ChannelBuffers.swapInt(value.readInt()) / 60 / 60);
break;
case 0x17:
position.set(""String_Node_Str"",ChannelBuffers.swapInt(value.readInt()));
break;
case 0x18:
position.set(""String_Node_Str"",ChannelBuffers.swapInt(value.readInt()) * 0.01);
break;
default :
break;
}
break;
}
}
}
return position;
}",0.997037295224817
156151,"@Override protected Object decode(ChannelHandlerContext ctx,Channel channel,ChannelBuffer buf) throws Exception {
  int available=buf.readableBytes();
  if (available < MESSAGE_MINIMUM_LENGTH) {
    return null;
  }
  int length=0;
switch (buf.getUnsignedByte(4)) {
case CellocatorProtocolDecoder.MSG_CLIENT_STATUS:
    length=70;
  break;
case CellocatorProtocolDecoder.MSG_CLIENT_PROGRAMMING:
length=31;
break;
case CellocatorProtocolDecoder.MSG_CLIENT_SERIAL_LOG:
length=70;
break;
case CellocatorProtocolDecoder.MSG_CLIENT_SERIAL:
if (available >= 19) {
length=19 + buf.getUnsignedShort(16);
}
break;
case CellocatorProtocolDecoder.MSG_CLIENT_MODULAR:
length=15 + buf.getUnsignedByte(13);
break;
}
if (length > 0 && available >= length) {
return buf.readBytes(length);
}
return null;
}","@Override protected Object decode(ChannelHandlerContext ctx,Channel channel,ChannelBuffer buf) throws Exception {
  int available=buf.readableBytes();
  if (available < MESSAGE_MINIMUM_LENGTH) {
    return null;
  }
  int length=0;
switch (buf.getUnsignedByte(4)) {
case CellocatorProtocolDecoder.MSG_CLIENT_STATUS:
    length=70;
  break;
case CellocatorProtocolDecoder.MSG_CLIENT_PROGRAMMING:
length=31;
break;
case CellocatorProtocolDecoder.MSG_CLIENT_SERIAL_LOG:
length=70;
break;
case CellocatorProtocolDecoder.MSG_CLIENT_SERIAL:
if (available >= 19) {
length=19 + buf.getUnsignedShort(16);
}
break;
case CellocatorProtocolDecoder.MSG_CLIENT_MODULAR:
length=15 + buf.getUnsignedByte(13);
break;
default :
Log.warning(new UnsupportedOperationException());
break;
}
if (length > 0 && available >= length) {
return buf.readBytes(length);
}
return null;
}",0.9592705167173252
156152,"public float readFloat(ChannelBuffer buf){
switch (buf.getUnsignedByte(buf.readerIndex()) >> 6) {
case 0:
    previousFloat=buf.readInt() << 2;
  break;
case 1:
previousFloat=(previousFloat & 0xffffff00) + ((buf.readUnsignedByte() & 0x3f) << 2);
break;
case 2:
previousFloat=(previousFloat & 0xffff0000) + ((buf.readUnsignedShort() & 0x3fff) << 2);
break;
case 3:
previousFloat=(previousFloat & 0xff000000) + ((buf.readUnsignedMedium() & 0x3fffff) << 2);
break;
}
return Float.intBitsToFloat(previousFloat);
}","public float readFloat(ChannelBuffer buf){
switch (buf.getUnsignedByte(buf.readerIndex()) >> 6) {
case 0:
    previousFloat=buf.readInt() << 2;
  break;
case 1:
previousFloat=(previousFloat & 0xffffff00) + ((buf.readUnsignedByte() & 0x3f) << 2);
break;
case 2:
previousFloat=(previousFloat & 0xffff0000) + ((buf.readUnsignedShort() & 0x3fff) << 2);
break;
case 3:
previousFloat=(previousFloat & 0xff000000) + ((buf.readUnsignedMedium() & 0x3fffff) << 2);
break;
default :
Log.warning(new IllegalArgumentException());
break;
}
return Float.intBitsToFloat(previousFloat);
}",0.9425925925925924
156153,"@Override protected Object decode(Channel channel,SocketAddress remoteAddress,Object msg) throws Exception {
  ChannelBuffer buf=(ChannelBuffer)msg;
  buf.readUnsignedByte();
  buf.readUnsignedShort();
  int index=buf.readUnsignedByte() >> 3;
  if (channel != null) {
    ChannelBuffer response=ChannelBuffers.copiedBuffer(""String_Node_Str"" + index,Charset.defaultCharset());
    channel.write(response,remoteAddress);
  }
  String id=String.valueOf(buf.readUnsignedInt());
  if (!identify(id,channel,remoteAddress)) {
    return null;
  }
  List<Position> positions=new LinkedList<>();
  while (buf.readableBytes() > 2) {
    Position position=new Position();
    position.setProtocol(getProtocolName());
    position.setDeviceId(getDeviceId());
    int end=buf.readerIndex() + buf.readUnsignedByte();
    position.setTime(new Date(buf.readUnsignedInt() * 1000));
    int flags=buf.readUnsignedByte();
    position.set(Event.KEY_SATELLITES,BitUtil.range(flags,2));
    position.setValid(BitUtil.range(flags,0,2) > 0);
    double lat=buf.readUnsignedMedium();
    lat=lat * -180 / 16777216 + 90;
    position.setLatitude(lat);
    double lon=buf.readUnsignedMedium();
    lon=lon * 360 / 16777216 - 180;
    position.setLongitude(lon);
    flags=buf.readUnsignedByte();
    position.set(Event.KEY_IGNITION,BitUtil.check(flags,0));
    position.set(Event.KEY_GSM,BitUtil.range(flags,2,3));
    position.setCourse((BitUtil.range(flags,5) * 45 + 180) % 360);
    int speed=buf.readUnsignedByte();
    if (speed < 250) {
      position.setSpeed(UnitsConverter.knotsFromKph(speed));
    }
    while (buf.readerIndex() < end) {
      int type=buf.readUnsignedByte();
      int length=buf.readUnsignedByte();
      if (length == 255) {
        length+=buf.readUnsignedByte();
      }
      int n=0;
switch (type) {
case 2:
        position.set(Event.KEY_ODOMETER,buf.readUnsignedMedium());
      break;
case 5:
    position.set(Event.KEY_INPUT,buf.readUnsignedByte());
  break;
case 6:
n=buf.readUnsignedByte() >> 4;
if (n < 2) {
position.set(Event.PREFIX_ADC + n,readSwappedFloat(buf));
}
 else {
position.set(""String_Node_Str"" + (n - 2),readSwappedFloat(buf));
}
break;
case 7:
int alarm=buf.readUnsignedByte();
buf.readUnsignedByte();
if (BitUtil.check(alarm,5)) {
position.set(Event.KEY_ALARM,BitUtil.range(alarm,0,4));
}
break;
case 8:
position.set(""String_Node_Str"",buf.readUnsignedByte());
break;
case 9:
position.set(""String_Node_Str"",ChannelBufferTools.readHexString(buf,16));
break;
case 10:
position.set(""String_Node_Str"",ChannelBufferTools.readHexString(buf,16));
break;
case 24:
Set<Integer> temps=new LinkedHashSet<>();
int temp=buf.readUnsignedByte();
for (int i=3; i >= 0; i--) {
n=(temp >> (2 * i)) & 0x03;
if (!temps.contains(n)) {
temps.add(n);
}
}
for (int i : temps) {
position.set(Event.PREFIX_TEMP + i,buf.readUnsignedByte());
}
break;
case 28:
position.set(""String_Node_Str"",buf.readUnsignedShort());
buf.readUnsignedByte();
break;
case 90:
position.set(Event.KEY_POWER,readSwappedFloat(buf));
break;
case 101:
position.set(Event.KEY_OBD_SPEED,buf.readUnsignedByte());
break;
case 102:
position.set(Event.KEY_RPM,buf.readUnsignedByte() * 50);
break;
case 107:
int fuel=buf.readUnsignedShort();
switch (fuel >> 14) {
case 1:
position.set(Event.KEY_FUEL,(fuel & 0x3fff) * 0.4 + ""String_Node_Str"");
break;
case 2:
position.set(Event.KEY_FUEL,(fuel & 0x3fff) * 0.5 + ""String_Node_Str"");
break;
case 3:
position.set(Event.KEY_FUEL,(fuel & 0x3fff) * -0.5 + ""String_Node_Str"");
break;
}
break;
case 108:
position.set(Event.KEY_OBD_ODOMETER,buf.readUnsignedInt() * 5);
break;
case 150:
position.set(""String_Node_Str"",buf.readUnsignedByte());
break;
default :
buf.skipBytes(length);
break;
}
}
positions.add(position);
}
return positions;
}","@Override protected Object decode(Channel channel,SocketAddress remoteAddress,Object msg) throws Exception {
  ChannelBuffer buf=(ChannelBuffer)msg;
  buf.readUnsignedByte();
  buf.readUnsignedShort();
  int index=buf.readUnsignedByte() >> 3;
  if (channel != null) {
    ChannelBuffer response=ChannelBuffers.copiedBuffer(""String_Node_Str"" + index,Charset.defaultCharset());
    channel.write(response,remoteAddress);
  }
  String id=String.valueOf(buf.readUnsignedInt());
  if (!identify(id,channel,remoteAddress)) {
    return null;
  }
  List<Position> positions=new LinkedList<>();
  while (buf.readableBytes() > 2) {
    Position position=new Position();
    position.setProtocol(getProtocolName());
    position.setDeviceId(getDeviceId());
    int end=buf.readerIndex() + buf.readUnsignedByte();
    position.setTime(new Date(buf.readUnsignedInt() * 1000));
    int flags=buf.readUnsignedByte();
    position.set(Event.KEY_SATELLITES,BitUtil.range(flags,2));
    position.setValid(BitUtil.range(flags,0,2) > 0);
    double lat=buf.readUnsignedMedium();
    lat=lat * -180 / 16777216 + 90;
    position.setLatitude(lat);
    double lon=buf.readUnsignedMedium();
    lon=lon * 360 / 16777216 - 180;
    position.setLongitude(lon);
    flags=buf.readUnsignedByte();
    position.set(Event.KEY_IGNITION,BitUtil.check(flags,0));
    position.set(Event.KEY_GSM,BitUtil.range(flags,2,3));
    position.setCourse((BitUtil.range(flags,5) * 45 + 180) % 360);
    int speed=buf.readUnsignedByte();
    if (speed < 250) {
      position.setSpeed(UnitsConverter.knotsFromKph(speed));
    }
    while (buf.readerIndex() < end) {
      int type=buf.readUnsignedByte();
      int length=buf.readUnsignedByte();
      if (length == 255) {
        length+=buf.readUnsignedByte();
      }
      int n=0;
switch (type) {
case 2:
        position.set(Event.KEY_ODOMETER,buf.readUnsignedMedium());
      break;
case 5:
    position.set(Event.KEY_INPUT,buf.readUnsignedByte());
  break;
case 6:
n=buf.readUnsignedByte() >> 4;
if (n < 2) {
position.set(Event.PREFIX_ADC + n,readSwappedFloat(buf));
}
 else {
position.set(""String_Node_Str"" + (n - 2),readSwappedFloat(buf));
}
break;
case 7:
int alarm=buf.readUnsignedByte();
buf.readUnsignedByte();
if (BitUtil.check(alarm,5)) {
position.set(Event.KEY_ALARM,BitUtil.range(alarm,0,4));
}
break;
case 8:
position.set(""String_Node_Str"",buf.readUnsignedByte());
break;
case 9:
position.set(""String_Node_Str"",ChannelBufferTools.readHexString(buf,16));
break;
case 10:
position.set(""String_Node_Str"",ChannelBufferTools.readHexString(buf,16));
break;
case 24:
Set<Integer> temps=new LinkedHashSet<>();
int temp=buf.readUnsignedByte();
for (int i=3; i >= 0; i--) {
n=(temp >> (2 * i)) & 0x03;
if (!temps.contains(n)) {
temps.add(n);
}
}
for (int i : temps) {
position.set(Event.PREFIX_TEMP + i,buf.readUnsignedByte());
}
break;
case 28:
position.set(""String_Node_Str"",buf.readUnsignedShort());
buf.readUnsignedByte();
break;
case 90:
position.set(Event.KEY_POWER,readSwappedFloat(buf));
break;
case 101:
position.set(Event.KEY_OBD_SPEED,buf.readUnsignedByte());
break;
case 102:
position.set(Event.KEY_RPM,buf.readUnsignedByte() * 50);
break;
case 107:
int fuel=buf.readUnsignedShort();
int fuelFormat=fuel >> 14;
if (fuelFormat == 1) {
position.set(Event.KEY_FUEL,(fuel & 0x3fff) * 0.4 + ""String_Node_Str"");
}
 else if (fuelFormat == 2) {
position.set(Event.KEY_FUEL,(fuel & 0x3fff) * 0.5 + ""String_Node_Str"");
}
 else if (fuelFormat == 3) {
position.set(Event.KEY_FUEL,(fuel & 0x3fff) * -0.5 + ""String_Node_Str"");
}
break;
case 108:
position.set(Event.KEY_OBD_ODOMETER,buf.readUnsignedInt() * 5);
break;
case 150:
position.set(""String_Node_Str"",buf.readUnsignedByte());
break;
default :
buf.skipBytes(length);
break;
}
}
positions.add(position);
}
return positions;
}",0.9815674313751492
156154,"public static int crc16(String type,ByteBuffer buf){
switch (type) {
case CRC16_X25:
    return crc16Reflected(buf,0xFFFF,CRC16_CCITT_TABLE_REVERSE) ^ 0xFFFF;
case CRC16_CCITT_FALSE:
  return crc16Unreflected(buf,0xFFFF,CRC16_CCITT_TABLE);
case CRC16_KERMIT:
return crc16Reflected(buf,0,CRC16_CCITT_TABLE_REVERSE);
case CRC16_XMODEM:
return crc16Unreflected(buf,0,CRC16_CCITT_TABLE);
case CRC16_AUG_CCITT:
return crc16Unreflected(buf,0x1d0f,CRC16_CCITT_TABLE);
case CRC16_GENIBUS:
return crc16Unreflected(buf,0xFFFF,CRC16_CCITT_TABLE) ^ 0xFFFF;
case CRC16_MCRF4XX:
return crc16Reflected(buf,0xFFFF,CRC16_CCITT_TABLE_REVERSE);
}
throw new UnsupportedOperationException();
}","public static int crc16(String type,ByteBuffer buf){
switch (type) {
case CRC16_X25:
    return crc16Reflected(buf,0xFFFF,CRC16_CCITT_TABLE_REVERSE) ^ 0xFFFF;
case CRC16_CCITT_FALSE:
  return crc16Unreflected(buf,0xFFFF,CRC16_CCITT_TABLE);
case CRC16_KERMIT:
return crc16Reflected(buf,0,CRC16_CCITT_TABLE_REVERSE);
case CRC16_XMODEM:
return crc16Unreflected(buf,0,CRC16_CCITT_TABLE);
case CRC16_AUG_CCITT:
return crc16Unreflected(buf,0x1d0f,CRC16_CCITT_TABLE);
case CRC16_GENIBUS:
return crc16Unreflected(buf,0xFFFF,CRC16_CCITT_TABLE) ^ 0xFFFF;
case CRC16_MCRF4XX:
return crc16Reflected(buf,0xFFFF,CRC16_CCITT_TABLE_REVERSE);
default :
throw new UnsupportedOperationException(type);
}
}",0.9882179675994108
156155,"public static HashingResult createHash(String password){
  byte[] salt=new byte[SALT_SIZE];
  random.nextBytes(salt);
  byte[] hash=function(password.toCharArray(),salt);
  return new HashingResult(ChannelBufferTools.convertByteArray(hash),ChannelBufferTools.convertByteArray(salt));
}","public static HashingResult createHash(String password){
  byte[] salt=new byte[SALT_SIZE];
  RANDOM.nextBytes(salt);
  byte[] hash=function(password.toCharArray(),salt);
  return new HashingResult(ChannelBufferTools.convertByteArray(hash),ChannelBufferTools.convertByteArray(salt));
}",0.9789473684210528
156156,"public PatternBuilder groupEnd(boolean optional){
  return xpr(optional ? ""String_Node_Str"" : ""String_Node_Str"");
}","public PatternBuilder groupEnd(boolean optional){
  if (optional) {
    return xpr(""String_Node_Str"");
  }
 else {
    return xpr(""String_Node_Str"");
  }
}",0.6222222222222222
156157,"public static String toXmlString(Map<String,Object> attributes){
  StringBuilder result=new StringBuilder();
  result.append(""String_Node_Str"").append(xmlRootNode).append(""String_Node_Str"");
  for (  Map.Entry<String,Object> entry : attributes.entrySet()) {
    result.append(""String_Node_Str"").append(entry.getKey()).append(""String_Node_Str"");
    result.append(format(entry.getValue()));
    result.append(""String_Node_Str"").append(entry.getKey()).append(""String_Node_Str"");
  }
  result.append(""String_Node_Str"").append(xmlRootNode).append(""String_Node_Str"");
  return result.toString();
}","public static String toXmlString(Map<String,Object> attributes){
  StringBuilder result=new StringBuilder();
  result.append(""String_Node_Str"").append(XML_ROOT_NODE).append(""String_Node_Str"");
  for (  Map.Entry<String,Object> entry : attributes.entrySet()) {
    result.append(""String_Node_Str"").append(entry.getKey()).append(""String_Node_Str"");
    result.append(format(entry.getValue()));
    result.append(""String_Node_Str"").append(entry.getKey()).append(""String_Node_Str"");
  }
  result.append(""String_Node_Str"").append(XML_ROOT_NODE).append(""String_Node_Str"");
  return result.toString();
}",0.9629629629629628
156158,"private static String format(Object value){
  if (value instanceof Double || value instanceof Float) {
    return decimalFormat.format(value);
  }
 else {
    return value.toString();
  }
}","private static String format(Object value){
  if (value instanceof Double || value instanceof Float) {
    return DECIMAL_FORMAT.format(value);
  }
 else {
    return value.toString();
  }
}",0.934036939313984
156159,"@Override protected Object decode(Channel channel,SocketAddress remoteAddress,Object msg) throws Exception {
  ChannelBuffer buf=(ChannelBuffer)msg;
  buf.skipBytes(1);
  int type=buf.readUnsignedByte();
  buf.readUnsignedByte();
  if (type == MSG_LOGIN) {
    if (identify(readImei(buf),channel)) {
      sendResponse(channel,type);
    }
  }
 else   if (hasDeviceId() && type == MSG_STATUS) {
    sendResponse(channel,type);
  }
 else   if (hasDeviceId() && type == MSG_GPS_LBS_STATUS) {
    Position position=new Position();
    position.setDeviceId(getDeviceId());
    position.setProtocol(getProtocolName());
    Calendar time=Calendar.getInstance(TimeZone.getTimeZone(""String_Node_Str""));
    time.clear();
    time.set(Calendar.YEAR,2000 + buf.readUnsignedByte());
    time.set(Calendar.MONTH,buf.readUnsignedByte() - 1);
    time.set(Calendar.DAY_OF_MONTH,buf.readUnsignedByte());
    time.set(Calendar.HOUR_OF_DAY,buf.readUnsignedByte());
    time.set(Calendar.MINUTE,buf.readUnsignedByte());
    time.set(Calendar.SECOND,buf.readUnsignedByte());
    position.setTime(time.getTime());
    int gpsLength=buf.readUnsignedByte();
    position.set(Event.KEY_SATELLITES,gpsLength & 0xf);
    buf.skipBytes(1);
    double latitude=buf.readUnsignedInt() / 600000.0;
    double longitude=buf.readUnsignedInt() / 600000.0;
    position.setSpeed(buf.readUnsignedByte() * 1.0);
    int union=buf.readUnsignedShort();
    position.setCourse(union & 0x03FF);
    position.setValid((union & 0x1000) != 0);
    if ((union & 0x0400) != 0)     latitude=-latitude;
    if ((union & 0x0800) != 0)     longitude=-longitude;
    position.setLatitude(latitude);
    position.setLongitude(longitude);
    if ((union & 0x4000) != 0) {
      position.set(""String_Node_Str"",(union & 0x8000) != 0);
    }
    position.set(Event.KEY_LAC,buf.readUnsignedShort());
    position.set(Event.KEY_CELL,buf.readUnsignedMedium());
    position.set(Event.KEY_ALARM,true);
    int flags=buf.readUnsignedByte();
    position.set(""String_Node_Str"",(flags & 0x2) != 0);
    position.set(Event.KEY_POWER,buf.readUnsignedByte());
    position.set(Event.KEY_GSM,buf.readUnsignedByte());
    return position;
  }
  return null;
}","@Override protected Object decode(Channel channel,SocketAddress remoteAddress,Object msg) throws Exception {
  ChannelBuffer buf=(ChannelBuffer)msg;
  buf.skipBytes(1);
  int type=buf.readUnsignedByte();
  buf.readUnsignedByte();
  if (type == MSG_LOGIN) {
    if (identify(readImei(buf),channel)) {
      sendResponse(channel,type);
    }
  }
 else   if (hasDeviceId() && type == MSG_STATUS) {
    sendResponse(channel,type);
  }
 else   if (hasDeviceId() && type == MSG_GPS_LBS_STATUS) {
    Position position=new Position();
    position.setDeviceId(getDeviceId());
    position.setProtocol(getProtocolName());
    Calendar time=Calendar.getInstance(TimeZone.getTimeZone(""String_Node_Str""));
    time.clear();
    time.set(Calendar.YEAR,2000 + buf.readUnsignedByte());
    time.set(Calendar.MONTH,buf.readUnsignedByte() - 1);
    time.set(Calendar.DAY_OF_MONTH,buf.readUnsignedByte());
    time.set(Calendar.HOUR_OF_DAY,buf.readUnsignedByte());
    time.set(Calendar.MINUTE,buf.readUnsignedByte());
    time.set(Calendar.SECOND,buf.readUnsignedByte());
    position.setTime(time.getTime());
    int gpsLength=buf.readUnsignedByte();
    position.set(Event.KEY_SATELLITES,gpsLength & 0xf);
    buf.skipBytes(1);
    double latitude=buf.readUnsignedInt() / 600000.0;
    double longitude=buf.readUnsignedInt() / 600000.0;
    position.setSpeed(buf.readUnsignedByte() * 1.0);
    int union=buf.readUnsignedShort();
    position.setCourse(union & 0x03FF);
    position.setValid((union & 0x1000) != 0);
    if ((union & 0x0400) != 0) {
      latitude=-latitude;
    }
    if ((union & 0x0800) != 0) {
      longitude=-longitude;
    }
    position.setLatitude(latitude);
    position.setLongitude(longitude);
    if ((union & 0x4000) != 0) {
      position.set(""String_Node_Str"",(union & 0x8000) != 0);
    }
    position.set(Event.KEY_LAC,buf.readUnsignedShort());
    position.set(Event.KEY_CELL,buf.readUnsignedMedium());
    position.set(Event.KEY_ALARM,true);
    int flags=buf.readUnsignedByte();
    position.set(""String_Node_Str"",(flags & 0x2) != 0);
    position.set(Event.KEY_POWER,buf.readUnsignedByte());
    position.set(Event.KEY_GSM,buf.readUnsignedByte());
    return position;
  }
  return null;
}",0.9954586739327884
156160,"@Override protected Object decode(Channel channel,SocketAddress remoteAddress,Object msg) throws Exception {
  ChannelBuffer buf=(ChannelBuffer)msg;
  String imei=String.format(""String_Node_Str"",buf.readLong());
  if (!identify(imei,channel)) {
    return null;
  }
  List<Position> positions=new LinkedList<>();
  while (buf.readableBytes() > 1) {
    int dataEnd=buf.readUnsignedShort() + buf.readerIndex();
    int type=buf.readUnsignedByte();
    int confirmKey=buf.readUnsignedByte() & 0x7F;
    while (buf.readerIndex() < dataEnd) {
      Position position=new Position();
      position.setProtocol(getProtocolName());
      position.setDeviceId(getDeviceId());
      int structEnd=buf.readUnsignedByte() + buf.readerIndex();
      long time=buf.readUnsignedInt();
      if ((time & 0x0f) == DATA_TYPE) {
        time=time >> 4 << 1;
        time+=0x47798280;
        position.setTime(new Date(time * 1000));
        int mask;
        List<Integer> masks=new LinkedList<>();
        do {
          mask=buf.readUnsignedShort();
          masks.add(mask);
        }
 while (BitUtil.check(mask,15));
        mask=masks.get(0);
        if (BitUtil.check(mask,0)) {
          position.setValid(true);
          position.setLongitude(buf.readFloat());
          position.setLatitude(buf.readFloat());
          position.setSpeed(buf.readUnsignedByte());
          int gps=buf.readUnsignedByte();
          position.set(Event.KEY_SATELLITES,gps & 0xf);
          position.set(Event.KEY_HDOP,gps >> 4);
          position.setCourse(buf.readUnsignedByte());
          position.setAltitude(buf.readUnsignedShort());
          position.set(Event.KEY_ODOMETER,buf.readUnsignedInt());
        }
        if (BitUtil.check(mask,1)) {
          position.set(Event.KEY_INPUT,buf.readUnsignedShort());
        }
        for (int i=1; i <= 8; i++) {
          if (BitUtil.check(mask,i + 1)) {
            position.set(Event.PREFIX_ADC + i,buf.readUnsignedShort());
          }
        }
        if (BitUtil.check(mask,10))         buf.skipBytes(4);
        if (BitUtil.check(mask,11))         buf.skipBytes(4);
        if (BitUtil.check(mask,12))         buf.skipBytes(2);
        if (BitUtil.check(mask,13))         buf.skipBytes(2);
        if (BitUtil.check(mask,14)) {
          position.set(Event.KEY_MCC,buf.readUnsignedShort());
          position.set(Event.KEY_MNC,buf.readUnsignedByte());
          position.set(Event.KEY_LAC,buf.readUnsignedShort());
          position.set(Event.KEY_CELL,buf.readUnsignedShort());
          position.set(Event.KEY_GSM,buf.readUnsignedByte());
          buf.readUnsignedByte();
        }
        if (BitUtil.check(mask,0)) {
          positions.add(position);
        }
      }
      buf.readerIndex(structEnd);
    }
    if (type == MSG_ASYNC_STACK && channel != null) {
      ChannelBuffer response=ChannelBuffers.buffer(ByteOrder.LITTLE_ENDIAN,8 + 2 + 2+ 1);
      response.writeLong(Long.parseLong(imei));
      response.writeShort(2);
      response.writeByte(MSG_STACK_COFIRM);
      response.writeByte(confirmKey);
      int checksum=0;
      for (int i=0; i < response.writerIndex(); i++) {
        checksum+=response.getUnsignedByte(i);
      }
      response.writeByte(checksum);
      channel.write(response);
    }
  }
  return positions;
}","@Override protected Object decode(Channel channel,SocketAddress remoteAddress,Object msg) throws Exception {
  ChannelBuffer buf=(ChannelBuffer)msg;
  String imei=String.format(""String_Node_Str"",buf.readLong());
  if (!identify(imei,channel)) {
    return null;
  }
  List<Position> positions=new LinkedList<>();
  while (buf.readableBytes() > 1) {
    int dataEnd=buf.readUnsignedShort() + buf.readerIndex();
    int type=buf.readUnsignedByte();
    int confirmKey=buf.readUnsignedByte() & 0x7F;
    while (buf.readerIndex() < dataEnd) {
      Position position=new Position();
      position.setProtocol(getProtocolName());
      position.setDeviceId(getDeviceId());
      int structEnd=buf.readUnsignedByte() + buf.readerIndex();
      long time=buf.readUnsignedInt();
      if ((time & 0x0f) == DATA_TYPE) {
        time=time >> 4 << 1;
        time+=0x47798280;
        position.setTime(new Date(time * 1000));
        int mask;
        List<Integer> masks=new LinkedList<>();
        do {
          mask=buf.readUnsignedShort();
          masks.add(mask);
        }
 while (BitUtil.check(mask,15));
        mask=masks.get(0);
        if (BitUtil.check(mask,0)) {
          position.setValid(true);
          position.setLongitude(buf.readFloat());
          position.setLatitude(buf.readFloat());
          position.setSpeed(buf.readUnsignedByte());
          int gps=buf.readUnsignedByte();
          position.set(Event.KEY_SATELLITES,gps & 0xf);
          position.set(Event.KEY_HDOP,gps >> 4);
          position.setCourse(buf.readUnsignedByte());
          position.setAltitude(buf.readUnsignedShort());
          position.set(Event.KEY_ODOMETER,buf.readUnsignedInt());
        }
        if (BitUtil.check(mask,1)) {
          position.set(Event.KEY_INPUT,buf.readUnsignedShort());
        }
        for (int i=1; i <= 8; i++) {
          if (BitUtil.check(mask,i + 1)) {
            position.set(Event.PREFIX_ADC + i,buf.readUnsignedShort());
          }
        }
        if (BitUtil.check(mask,10)) {
          buf.skipBytes(4);
        }
        if (BitUtil.check(mask,11)) {
          buf.skipBytes(4);
        }
        if (BitUtil.check(mask,12)) {
          buf.skipBytes(2);
        }
        if (BitUtil.check(mask,13)) {
          buf.skipBytes(2);
        }
        if (BitUtil.check(mask,14)) {
          position.set(Event.KEY_MCC,buf.readUnsignedShort());
          position.set(Event.KEY_MNC,buf.readUnsignedByte());
          position.set(Event.KEY_LAC,buf.readUnsignedShort());
          position.set(Event.KEY_CELL,buf.readUnsignedShort());
          position.set(Event.KEY_GSM,buf.readUnsignedByte());
          buf.readUnsignedByte();
        }
        if (BitUtil.check(mask,0)) {
          positions.add(position);
        }
      }
      buf.readerIndex(structEnd);
    }
    if (type == MSG_ASYNC_STACK && channel != null) {
      ChannelBuffer response=ChannelBuffers.buffer(ByteOrder.LITTLE_ENDIAN,8 + 2 + 2+ 1);
      response.writeLong(Long.parseLong(imei));
      response.writeShort(2);
      response.writeByte(MSG_STACK_COFIRM);
      response.writeByte(confirmKey);
      int checksum=0;
      for (int i=0; i < response.writerIndex(); i++) {
        checksum+=response.getUnsignedByte(i);
      }
      response.writeByte(checksum);
      channel.write(response);
    }
  }
  return positions;
}",0.9915458937198068
156161,"@Override protected Object decode(Channel channel,SocketAddress remoteAddress,Object msg) throws Exception {
  ChannelBuffer buf=(ChannelBuffer)msg;
  buf.readUnsignedByte();
  int length=(buf.readUnsignedShort() & 0x7fff) + 3;
  List<Position> positions=new LinkedList<>();
  Set<Integer> tags=new HashSet<>();
  boolean hasLocation=false;
  Position position=new Position();
  position.setProtocol(getProtocolName());
  while (buf.readerIndex() < length) {
    int tag=buf.readUnsignedByte();
    if (tags.contains(tag)) {
      if (hasLocation && position.getFixTime() != null) {
        positions.add(position);
      }
      tags.clear();
      hasLocation=false;
      position=new Position();
    }
    tags.add(tag);
switch (tag) {
case TAG_IMEI:
      String imei=buf.toString(buf.readerIndex(),15,Charset.defaultCharset());
    buf.skipBytes(imei.length());
  identify(imei,channel);
break;
case TAG_DATE:
position.setTime(new Date(buf.readUnsignedInt() * 1000));
break;
case TAG_COORDINATES:
hasLocation=true;
position.setValid((buf.readUnsignedByte() & 0xf0) == 0x00);
position.setLatitude(buf.readInt() / 1000000.0);
position.setLongitude(buf.readInt() / 1000000.0);
break;
case TAG_SPEED_COURSE:
position.setSpeed(buf.readUnsignedShort() * 0.0539957);
position.setCourse(buf.readUnsignedShort() * 0.1);
break;
case TAG_ALTITUDE:
position.setAltitude(buf.readShort());
break;
case TAG_STATUS:
int status=buf.readUnsignedShort();
position.set(Event.KEY_IGNITION,BitUtil.check(status,9));
position.set(Event.KEY_ALARM,BitUtil.check(status,15));
position.set(Event.KEY_POWER,BitUtil.check(status,2));
break;
case TAG_DIGITAL_INPUTS:
int input=buf.readUnsignedShort();
for (int i=0; i < 16; i++) position.set(Event.PREFIX_IO + (i + 1),BitUtil.check(input,i));
break;
case TAG_DIGITAL_OUTPUTS:
int output=buf.readUnsignedShort();
for (int i=0; i < 16; i++) position.set(Event.PREFIX_IO + (i + 17),BitUtil.check(output,i));
break;
case TAG_INPUT_VOLTAGE1:
position.set(Event.PREFIX_ADC + 1,buf.readUnsignedShort() / 1000.0);
break;
case TAG_INPUT_VOLTAGE2:
position.set(Event.PREFIX_ADC + 2,buf.readUnsignedShort() / 1000.0);
break;
case TAG_INPUT_VOLTAGE3:
position.set(Event.PREFIX_ADC + 3,buf.readUnsignedShort() / 1000.0);
break;
case TAG_INPUT_VOLTAGE4:
position.set(Event.PREFIX_ADC + 4,buf.readUnsignedShort() / 1000.0);
break;
case TAG_XT1:
case TAG_XT2:
case TAG_XT3:
buf.skipBytes(16);
break;
default :
break;
}
}
if (hasLocation && position.getFixTime() != null) {
positions.add(position);
}
if (!hasDeviceId()) {
Log.warning(""String_Node_Str"");
return null;
}
sendReply(channel,buf.readUnsignedShort());
for (Position p : positions) {
p.setDeviceId(getDeviceId());
}
if (positions.isEmpty()) {
return null;
}
return positions;
}","@Override protected Object decode(Channel channel,SocketAddress remoteAddress,Object msg) throws Exception {
  ChannelBuffer buf=(ChannelBuffer)msg;
  buf.readUnsignedByte();
  int length=(buf.readUnsignedShort() & 0x7fff) + 3;
  List<Position> positions=new LinkedList<>();
  Set<Integer> tags=new HashSet<>();
  boolean hasLocation=false;
  Position position=new Position();
  position.setProtocol(getProtocolName());
  while (buf.readerIndex() < length) {
    int tag=buf.readUnsignedByte();
    if (tags.contains(tag)) {
      if (hasLocation && position.getFixTime() != null) {
        positions.add(position);
      }
      tags.clear();
      hasLocation=false;
      position=new Position();
    }
    tags.add(tag);
switch (tag) {
case TAG_IMEI:
      String imei=buf.toString(buf.readerIndex(),15,Charset.defaultCharset());
    buf.skipBytes(imei.length());
  identify(imei,channel);
break;
case TAG_DATE:
position.setTime(new Date(buf.readUnsignedInt() * 1000));
break;
case TAG_COORDINATES:
hasLocation=true;
position.setValid((buf.readUnsignedByte() & 0xf0) == 0x00);
position.setLatitude(buf.readInt() / 1000000.0);
position.setLongitude(buf.readInt() / 1000000.0);
break;
case TAG_SPEED_COURSE:
position.setSpeed(buf.readUnsignedShort() * 0.0539957);
position.setCourse(buf.readUnsignedShort() * 0.1);
break;
case TAG_ALTITUDE:
position.setAltitude(buf.readShort());
break;
case TAG_STATUS:
int status=buf.readUnsignedShort();
position.set(Event.KEY_IGNITION,BitUtil.check(status,9));
position.set(Event.KEY_ALARM,BitUtil.check(status,15));
position.set(Event.KEY_POWER,BitUtil.check(status,2));
break;
case TAG_DIGITAL_INPUTS:
int input=buf.readUnsignedShort();
for (int i=0; i < 16; i++) {
position.set(Event.PREFIX_IO + (i + 1),BitUtil.check(input,i));
}
break;
case TAG_DIGITAL_OUTPUTS:
int output=buf.readUnsignedShort();
for (int i=0; i < 16; i++) {
position.set(Event.PREFIX_IO + (i + 17),BitUtil.check(output,i));
}
break;
case TAG_INPUT_VOLTAGE1:
position.set(Event.PREFIX_ADC + 1,buf.readUnsignedShort() / 1000.0);
break;
case TAG_INPUT_VOLTAGE2:
position.set(Event.PREFIX_ADC + 2,buf.readUnsignedShort() / 1000.0);
break;
case TAG_INPUT_VOLTAGE3:
position.set(Event.PREFIX_ADC + 3,buf.readUnsignedShort() / 1000.0);
break;
case TAG_INPUT_VOLTAGE4:
position.set(Event.PREFIX_ADC + 4,buf.readUnsignedShort() / 1000.0);
break;
case TAG_XT1:
case TAG_XT2:
case TAG_XT3:
buf.skipBytes(16);
break;
default :
break;
}
}
if (hasLocation && position.getFixTime() != null) {
positions.add(position);
}
if (!hasDeviceId()) {
Log.warning(""String_Node_Str"");
return null;
}
sendReply(channel,buf.readUnsignedShort());
for (Position p : positions) {
p.setDeviceId(getDeviceId());
}
if (positions.isEmpty()) {
return null;
}
return positions;
}",0.9985459832788076
156162,"@Override protected Object encodeCommand(Command command){
  ChannelBuffer content=ChannelBuffers.dynamicBuffer();
switch (command.getType()) {
case Command.TYPE_POSITION_SINGLE:
    return encodeContent(CityeasyProtocolDecoder.MSG_LOCATION_REQUEST,content);
case Command.TYPE_POSITION_PERIODIC:
  content.writeShort(((Number)command.getAttributes().get(Command.KEY_FREQUENCY)).intValue());
return encodeContent(CityeasyProtocolDecoder.MSG_LOCATION_INTERVAL,content);
case Command.TYPE_POSITION_STOP:
content.writeShort(0);
return encodeContent(CityeasyProtocolDecoder.MSG_LOCATION_INTERVAL,content);
case Command.TYPE_SET_TIMEZONE:
int timezone=((Number)command.getAttributes().get(Command.KEY_TIMEZONE)).intValue();
content.writeByte(timezone < 0 ? 1 : 0);
content.writeShort(Math.abs(timezone) / 60);
return encodeContent(CityeasyProtocolDecoder.MSG_TIMEZONE,content);
}
return null;
}","@Override protected Object encodeCommand(Command command){
  ChannelBuffer content=ChannelBuffers.dynamicBuffer();
switch (command.getType()) {
case Command.TYPE_POSITION_SINGLE:
    return encodeContent(CityeasyProtocolDecoder.MSG_LOCATION_REQUEST,content);
case Command.TYPE_POSITION_PERIODIC:
  content.writeShort(((Number)command.getAttributes().get(Command.KEY_FREQUENCY)).intValue());
return encodeContent(CityeasyProtocolDecoder.MSG_LOCATION_INTERVAL,content);
case Command.TYPE_POSITION_STOP:
content.writeShort(0);
return encodeContent(CityeasyProtocolDecoder.MSG_LOCATION_INTERVAL,content);
case Command.TYPE_SET_TIMEZONE:
int timezone=((Number)command.getAttributes().get(Command.KEY_TIMEZONE)).intValue();
if (timezone < 0) {
content.writeByte(1);
}
 else {
content.writeByte(0);
}
content.writeShort(Math.abs(timezone) / 60);
return encodeContent(CityeasyProtocolDecoder.MSG_TIMEZONE,content);
default :
Log.warning(new UnsupportedOperationException(command.getType()));
break;
}
return null;
}",0.9150395778364117
156163,"@Override protected Object decode(Channel channel,SocketAddress remoteAddress,Object msg) throws Exception {
  ChannelBuffer buf=(ChannelBuffer)msg;
  prefix=buf.toString(buf.readerIndex(),4,CHARSET);
  buf.skipBytes(prefix.length());
  serverId=buf.readUnsignedInt();
  deviceUniqueId=buf.readUnsignedInt();
  int length=buf.readUnsignedShort();
  buf.skipBytes(2);
  if (length == 0) {
    return null;
  }
  String type=buf.toString(buf.readerIndex(),3,CHARSET);
  buf.skipBytes(type.length());
switch (type) {
case ""String_Node_Str"":
    return processSingle(channel,buf);
case ""String_Node_Str"":
  return processArray(channel,buf);
case ""String_Node_Str"":
return processHandshake(channel,buf);
}
return null;
}","@Override protected Object decode(Channel channel,SocketAddress remoteAddress,Object msg) throws Exception {
  ChannelBuffer buf=(ChannelBuffer)msg;
  prefix=buf.toString(buf.readerIndex(),4,CHARSET);
  buf.skipBytes(prefix.length());
  serverId=buf.readUnsignedInt();
  deviceUniqueId=buf.readUnsignedInt();
  int length=buf.readUnsignedShort();
  buf.skipBytes(2);
  if (length == 0) {
    return null;
  }
  String type=buf.toString(buf.readerIndex(),3,CHARSET);
  buf.skipBytes(type.length());
switch (type) {
case ""String_Node_Str"":
    return processSingle(channel,buf);
case ""String_Node_Str"":
  return processArray(channel,buf);
case ""String_Node_Str"":
return processHandshake(channel,buf);
default :
Log.warning(new UnsupportedOperationException(type));
break;
}
return null;
}",0.9526982011992006
156164,"@Override public void log(ChannelEvent e){
  if (e instanceof MessageEvent) {
    MessageEvent event=(MessageEvent)e;
    StringBuilder msg=new StringBuilder();
    msg.append(""String_Node_Str"").append(String.format(""String_Node_Str"",e.getChannel().getId())).append(""String_Node_Str"");
    msg.append(((InetSocketAddress)e.getChannel().getLocalAddress()).getPort());
    msg.append(e instanceof DownstreamMessageEvent ? ""String_Node_Str"" : ""String_Node_Str"");
    msg.append(((InetSocketAddress)event.getRemoteAddress()).getAddress().getHostAddress()).append(""String_Node_Str"");
    if (event.getMessage() instanceof ChannelBuffer) {
      msg.append(""String_Node_Str"");
      msg.append(ChannelBuffers.hexDump((ChannelBuffer)event.getMessage()));
    }
    Log.debug(msg.toString());
  }
}","@Override public void log(ChannelEvent e){
  if (e instanceof MessageEvent) {
    MessageEvent event=(MessageEvent)e;
    StringBuilder msg=new StringBuilder();
    msg.append(""String_Node_Str"").append(String.format(""String_Node_Str"",e.getChannel().getId())).append(""String_Node_Str"");
    msg.append(((InetSocketAddress)e.getChannel().getLocalAddress()).getPort());
    if (e instanceof DownstreamMessageEvent) {
      msg.append(""String_Node_Str"");
    }
 else {
      msg.append(""String_Node_Str"");
    }
    msg.append(((InetSocketAddress)event.getRemoteAddress()).getAddress().getHostAddress()).append(""String_Node_Str"");
    if (event.getMessage() instanceof ChannelBuffer) {
      msg.append(""String_Node_Str"");
      msg.append(ChannelBuffers.hexDump((ChannelBuffer)event.getMessage()));
    }
    Log.debug(msg.toString());
  }
}",0.9508599508599508
156165,"@Override public Address parseAddress(JsonObject json){
  JsonArray results=json.getJsonArray(""String_Node_Str"");
  if (!results.isEmpty()) {
    Address address=new Address();
    JsonObject result=(JsonObject)results.get(0);
    JsonArray components=result.getJsonArray(""String_Node_Str"");
    for (    JsonObject component : components.getValuesAs(JsonObject.class)) {
      String value=component.getString(""String_Node_Str"");
      typesLoop:       for (      JsonString type : component.getJsonArray(""String_Node_Str"").getValuesAs(JsonString.class)) {
switch (type.getString()) {
case ""String_Node_Str"":
          address.setHouse(value);
        break typesLoop;
case ""String_Node_Str"":
      address.setStreet(value);
    break typesLoop;
case ""String_Node_Str"":
  address.setSettlement(value);
break typesLoop;
case ""String_Node_Str"":
address.setDistrict(value);
break typesLoop;
case ""String_Node_Str"":
address.setState(value);
break typesLoop;
case ""String_Node_Str"":
address.setCountry(value);
break typesLoop;
case ""String_Node_Str"":
address.setPostcode(value);
break typesLoop;
}
}
}
return address;
}
return null;
}","@Override public Address parseAddress(JsonObject json){
  JsonArray results=json.getJsonArray(""String_Node_Str"");
  if (!results.isEmpty()) {
    Address address=new Address();
    JsonObject result=(JsonObject)results.get(0);
    JsonArray components=result.getJsonArray(""String_Node_Str"");
    for (    JsonObject component : components.getValuesAs(JsonObject.class)) {
      String value=component.getString(""String_Node_Str"");
      typesLoop:       for (      JsonString type : component.getJsonArray(""String_Node_Str"").getValuesAs(JsonString.class)) {
switch (type.getString()) {
case ""String_Node_Str"":
          address.setHouse(value);
        break typesLoop;
case ""String_Node_Str"":
      address.setStreet(value);
    break typesLoop;
case ""String_Node_Str"":
  address.setSettlement(value);
break typesLoop;
case ""String_Node_Str"":
address.setDistrict(value);
break typesLoop;
case ""String_Node_Str"":
address.setState(value);
break typesLoop;
case ""String_Node_Str"":
address.setCountry(value);
break typesLoop;
case ""String_Node_Str"":
address.setPostcode(value);
break typesLoop;
default :
break;
}
}
}
return address;
}
return null;
}",0.9925340360122968
156166,"private static int getTagLength(int tag){
  return tagLengthMap.get(tag);
}","private static int getTagLength(int tag){
  return TAG_LENGTH_MAP.get(tag);
}",0.8552631578947368
156167,"@Override protected Object encodeCommand(Command command){
switch (command.getType()) {
case Command.TYPE_ENGINE_STOP:
    return encodeCommand(MSG_CUT_OIL);
case Command.TYPE_ENGINE_RESUME:
  return encodeCommand(MSG_RESUME_OIL);
}
return null;
}","@Override protected Object encodeCommand(Command command){
switch (command.getType()) {
case Command.TYPE_ENGINE_STOP:
    return encodeCommand(MSG_CUT_OIL);
case Command.TYPE_ENGINE_RESUME:
  return encodeCommand(MSG_RESUME_OIL);
default :
Log.warning(new UnsupportedOperationException(command.getType()));
break;
}
return null;
}",0.8546712802768166
156168,"@Override protected Object decode(Channel channel,SocketAddress remoteAddress,Object msg) throws Exception {
  HttpRequest request=(HttpRequest)msg;
  QueryStringDecoder decoder=new QueryStringDecoder(request.getUri());
  Map<String,List<String>> params=decoder.getParameters();
  if (params.isEmpty()) {
    decoder=new QueryStringDecoder(request.getContent().toString(Charset.defaultCharset()),false);
    params=decoder.getParameters();
  }
  Position position=new Position();
  position.setProtocol(getProtocolName());
  String id=params.get(params.containsKey(""String_Node_Str"") ? ""String_Node_Str"" : ""String_Node_Str"").get(0);
  if (!identify(id,channel)) {
    return null;
  }
  position.setDeviceId(getDeviceId());
  position.setValid(true);
  if (params.containsKey(""String_Node_Str"")) {
    try {
      long timestamp=Long.parseLong(params.get(""String_Node_Str"").get(0));
      if (timestamp < Integer.MAX_VALUE) {
        timestamp*=1000;
      }
      position.setTime(new Date(timestamp));
    }
 catch (    NumberFormatException error) {
      DateFormat dateFormat=new SimpleDateFormat(""String_Node_Str"");
      position.setTime(dateFormat.parse(params.get(""String_Node_Str"").get(0)));
    }
  }
 else {
    position.setTime(new Date());
  }
  position.setLatitude(Double.parseDouble(params.get(""String_Node_Str"").get(0)));
  position.setLongitude(Double.parseDouble(params.get(""String_Node_Str"").get(0)));
  if (params.containsKey(""String_Node_Str"")) {
    position.setSpeed(Double.parseDouble(params.get(""String_Node_Str"").get(0)));
  }
  if (params.containsKey(""String_Node_Str"")) {
    position.setCourse(Double.parseDouble(params.get(""String_Node_Str"").get(0)));
  }
 else   if (params.containsKey(""String_Node_Str"")) {
    position.setCourse(Double.parseDouble(params.get(""String_Node_Str"").get(0)));
  }
  if (params.containsKey(""String_Node_Str"")) {
    position.setAltitude(Double.parseDouble(params.get(""String_Node_Str"").get(0)));
  }
  if (params.containsKey(""String_Node_Str"")) {
    position.set(Event.KEY_HDOP,params.get(""String_Node_Str"").get(0));
  }
  if (params.containsKey(""String_Node_Str"")) {
    position.set(""String_Node_Str"",params.get(""String_Node_Str"").get(0));
  }
  if (params.containsKey(""String_Node_Str"")) {
    position.set(""String_Node_Str"",params.get(""String_Node_Str"").get(0));
  }
  if (params.containsKey(""String_Node_Str"")) {
    position.set(Event.KEY_BATTERY,params.get(""String_Node_Str"").get(0));
  }
  if (params.containsKey(""String_Node_Str"")) {
    position.set(""String_Node_Str"",params.get(""String_Node_Str"").get(0));
  }
  if (channel != null) {
    HttpResponse response=new DefaultHttpResponse(HttpVersion.HTTP_1_1,HttpResponseStatus.OK);
    channel.write(response).addListener(ChannelFutureListener.CLOSE);
  }
  return position;
}","@Override protected Object decode(Channel channel,SocketAddress remoteAddress,Object msg) throws Exception {
  HttpRequest request=(HttpRequest)msg;
  QueryStringDecoder decoder=new QueryStringDecoder(request.getUri());
  Map<String,List<String>> params=decoder.getParameters();
  if (params.isEmpty()) {
    decoder=new QueryStringDecoder(request.getContent().toString(Charset.defaultCharset()),false);
    params=decoder.getParameters();
  }
  Position position=new Position();
  position.setProtocol(getProtocolName());
  String id;
  if (params.containsKey(""String_Node_Str"")) {
    id=params.get(""String_Node_Str"").get(0);
  }
 else {
    id=params.get(""String_Node_Str"").get(0);
  }
  if (!identify(id,channel)) {
    return null;
  }
  position.setDeviceId(getDeviceId());
  position.setValid(true);
  if (params.containsKey(""String_Node_Str"")) {
    try {
      long timestamp=Long.parseLong(params.get(""String_Node_Str"").get(0));
      if (timestamp < Integer.MAX_VALUE) {
        timestamp*=1000;
      }
      position.setTime(new Date(timestamp));
    }
 catch (    NumberFormatException error) {
      DateFormat dateFormat=new SimpleDateFormat(""String_Node_Str"");
      position.setTime(dateFormat.parse(params.get(""String_Node_Str"").get(0)));
    }
  }
 else {
    position.setTime(new Date());
  }
  position.setLatitude(Double.parseDouble(params.get(""String_Node_Str"").get(0)));
  position.setLongitude(Double.parseDouble(params.get(""String_Node_Str"").get(0)));
  if (params.containsKey(""String_Node_Str"")) {
    position.setSpeed(Double.parseDouble(params.get(""String_Node_Str"").get(0)));
  }
  if (params.containsKey(""String_Node_Str"")) {
    position.setCourse(Double.parseDouble(params.get(""String_Node_Str"").get(0)));
  }
 else   if (params.containsKey(""String_Node_Str"")) {
    position.setCourse(Double.parseDouble(params.get(""String_Node_Str"").get(0)));
  }
  if (params.containsKey(""String_Node_Str"")) {
    position.setAltitude(Double.parseDouble(params.get(""String_Node_Str"").get(0)));
  }
  if (params.containsKey(""String_Node_Str"")) {
    position.set(Event.KEY_HDOP,params.get(""String_Node_Str"").get(0));
  }
  if (params.containsKey(""String_Node_Str"")) {
    position.set(""String_Node_Str"",params.get(""String_Node_Str"").get(0));
  }
  if (params.containsKey(""String_Node_Str"")) {
    position.set(""String_Node_Str"",params.get(""String_Node_Str"").get(0));
  }
  if (params.containsKey(""String_Node_Str"")) {
    position.set(Event.KEY_BATTERY,params.get(""String_Node_Str"").get(0));
  }
  if (params.containsKey(""String_Node_Str"")) {
    position.set(""String_Node_Str"",params.get(""String_Node_Str"").get(0));
  }
  if (channel != null) {
    HttpResponse response=new DefaultHttpResponse(HttpVersion.HTTP_1_1,HttpResponseStatus.OK);
    channel.write(response).addListener(ChannelFutureListener.CLOSE);
  }
  return position;
}",0.9688605803255484
156169,"@Override protected Object encodeCommand(Command command){
switch (command.getType()) {
case Command.TYPE_ENGINE_STOP:
    return formatCommand(command,""String_Node_Str"",Command.KEY_UNIQUE_ID);
case Command.TYPE_ENGINE_RESUME:
  return formatCommand(command,""String_Node_Str"",Command.KEY_UNIQUE_ID);
}
return null;
}","@Override protected Object encodeCommand(Command command){
switch (command.getType()) {
case Command.TYPE_ENGINE_STOP:
    return formatCommand(command,""String_Node_Str"",Command.KEY_UNIQUE_ID);
case Command.TYPE_ENGINE_RESUME:
  return formatCommand(command,""String_Node_Str"",Command.KEY_UNIQUE_ID);
default :
Log.warning(new UnsupportedOperationException(command.getType()));
break;
}
return null;
}",0.88268156424581
156170,"@Override protected Object encodeCommand(Command command){
  command.set(Command.KEY_DEVICE_PASSWORD,""String_Node_Str"");
switch (command.getType()) {
case Command.TYPE_ENGINE_STOP:
    return formatCommand(command,""String_Node_Str"",Command.KEY_DEVICE_PASSWORD);
case Command.TYPE_ENGINE_RESUME:
  return formatCommand(command,""String_Node_Str"",Command.KEY_DEVICE_PASSWORD);
}
return null;
}","@Override protected Object encodeCommand(Command command){
  command.set(Command.KEY_DEVICE_PASSWORD,""String_Node_Str"");
switch (command.getType()) {
case Command.TYPE_ENGINE_STOP:
    return formatCommand(command,""String_Node_Str"",Command.KEY_DEVICE_PASSWORD);
case Command.TYPE_ENGINE_RESUME:
  return formatCommand(command,""String_Node_Str"",Command.KEY_DEVICE_PASSWORD);
default :
Log.warning(new UnsupportedOperationException(command.getType()));
break;
}
return null;
}",0.9027777777777778
156171,"@Override protected Object decode(ChannelHandlerContext ctx,Channel channel,ChannelBuffer buf) throws Exception {
  if (buf.readableBytes() < 20) {
    return null;
  }
  if (buf.getUnsignedByte(buf.readerIndex()) == 0x80) {
    int length=buf.readableBytes();
    byte bytes[]=new byte[length];
    buf.getBytes(buf.readerIndex(),bytes);
    ChannelBuffer result=(ChannelBuffer)super.decode(ctx,channel,ChannelBuffers.wrappedBuffer(ByteOrder.LITTLE_ENDIAN,bytes));
    if (result != null) {
      buf.skipBytes(result.readableBytes());
    }
    return result;
  }
  return super.decode(ctx,channel,buf);
}","@Override protected Object decode(ChannelHandlerContext ctx,Channel channel,ChannelBuffer buf) throws Exception {
  if (buf.readableBytes() < 20) {
    return null;
  }
  if (buf.getUnsignedByte(buf.readerIndex()) == 0x80) {
    int length=buf.readableBytes();
    byte[] bytes=new byte[length];
    buf.getBytes(buf.readerIndex(),bytes);
    ChannelBuffer result=(ChannelBuffer)super.decode(ctx,channel,ChannelBuffers.wrappedBuffer(ByteOrder.LITTLE_ENDIAN,bytes));
    if (result != null) {
      buf.skipBytes(result.readableBytes());
    }
    return result;
  }
  return super.decode(ctx,channel,buf);
}",0.9901153212520593
156172,"private void async(final AsyncContext context,long userId){
  context.setTimeout(ASYNC_TIMEOUT);
  HttpServletRequest req=(HttpServletRequest)context.getRequest();
synchronized (asyncSessions) {
    if (Boolean.parseBoolean(req.getParameter(""String_Node_Str"")) || !asyncSessions.containsKey(userId)) {
      Collection<Long> devices=Context.getPermissionsManager().allowedDevices(userId);
      asyncSessions.put(userId,new AsyncSession(userId,devices));
    }
    asyncSessions.get(userId).request(context);
  }
}","private void async(final AsyncContext context,long userId){
  context.setTimeout(ASYNC_TIMEOUT);
  HttpServletRequest req=(HttpServletRequest)context.getRequest();
synchronized (ASYNC_SESSIONS) {
    if (Boolean.parseBoolean(req.getParameter(""String_Node_Str"")) || !ASYNC_SESSIONS.containsKey(userId)) {
      Collection<Long> devices=Context.getPermissionsManager().allowedDevices(userId);
      ASYNC_SESSIONS.put(userId,new AsyncSession(userId,devices));
    }
    ASYNC_SESSIONS.get(userId).request(context);
  }
}",0.8624031007751938
156173,"public static void sessionRefreshUser(long userId){
synchronized (asyncSessions) {
    asyncSessions.remove(userId);
  }
}","public static void sessionRefreshUser(long userId){
synchronized (ASYNC_SESSIONS) {
    ASYNC_SESSIONS.remove(userId);
  }
}",0.7967479674796748
156174,"public static void sessionRefreshDevice(long deviceId){
synchronized (asyncSessions) {
    Iterator<Entry<Long,AsyncSession>> iterator=asyncSessions.entrySet().iterator();
    while (iterator.hasNext()) {
      if (iterator.next().getValue().hasDevice(deviceId)) {
        iterator.remove();
      }
    }
  }
}","public static void sessionRefreshDevice(long deviceId){
synchronized (ASYNC_SESSIONS) {
    Iterator<Entry<Long,AsyncSession>> iterator=ASYNC_SESSIONS.entrySet().iterator();
    while (iterator.hasNext()) {
      if (iterator.next().getValue().hasDevice(deviceId)) {
        iterator.remove();
      }
    }
  }
}",0.9134615384615384
156175,"@Test public void testDecode() throws Exception {
  UlbotechProtocolDecoder decoder=new UlbotechProtocolDecoder(new UlbotechProtocol());
  verify(decoder.decode(null,null,ChannelBuffers.wrappedBuffer(ChannelBufferTools.convertHexString(""String_Node_Str""))));
  verify(decoder.decode(null,null,ChannelBuffers.wrappedBuffer(ChannelBufferTools.convertHexString(""String_Node_Str""))));
  verify(decoder.decode(null,null,ChannelBuffers.wrappedBuffer(ChannelBufferTools.convertHexString(""String_Node_Str""))));
  verify(decoder.decode(null,null,ChannelBuffers.wrappedBuffer(ChannelBufferTools.convertHexString(""String_Node_Str""))));
  verify(decoder.decode(null,null,ChannelBuffers.wrappedBuffer(ChannelBufferTools.convertHexString(""String_Node_Str""))));
  assertNull(decoder.decode(null,null,ChannelBuffers.wrappedBuffer(ChannelBufferTools.convertHexString(""String_Node_Str""))));
  assertNull(decoder.decode(null,null,ChannelBuffers.wrappedBuffer(ChannelBufferTools.convertHexString(""String_Node_Str""))));
  verify(decoder.decode(null,null,ChannelBuffers.wrappedBuffer(ChannelBufferTools.convertHexString(""String_Node_Str""))));
  verify(decoder.decode(null,null,ChannelBuffers.wrappedBuffer(ChannelBufferTools.convertHexString(""String_Node_Str""))));
  verify(decoder.decode(null,null,ChannelBuffers.wrappedBuffer(ChannelBufferTools.convertHexString(""String_Node_Str""))));
}","@Test public void testDecode() throws Exception {
  UlbotechProtocolDecoder decoder=new UlbotechProtocolDecoder(new UlbotechProtocol());
  verify(decoder.decode(null,null,ChannelBuffers.wrappedBuffer(ChannelBufferTools.convertHexString(""String_Node_Str""))));
  verify(decoder.decode(null,null,ChannelBuffers.wrappedBuffer(ChannelBufferTools.convertHexString(""String_Node_Str""))));
  verify(decoder.decode(null,null,ChannelBuffers.wrappedBuffer(ChannelBufferTools.convertHexString(""String_Node_Str""))));
  verify(decoder.decode(null,null,ChannelBuffers.wrappedBuffer(ChannelBufferTools.convertHexString(""String_Node_Str""))));
  verify(decoder.decode(null,null,ChannelBuffers.wrappedBuffer(ChannelBufferTools.convertHexString(""String_Node_Str""))));
  verify(decoder.decode(null,null,ChannelBuffers.wrappedBuffer(ChannelBufferTools.convertHexString(""String_Node_Str""))));
  assertNull(decoder.decode(null,null,ChannelBuffers.wrappedBuffer(ChannelBufferTools.convertHexString(""String_Node_Str""))));
  assertNull(decoder.decode(null,null,ChannelBuffers.wrappedBuffer(ChannelBufferTools.convertHexString(""String_Node_Str""))));
  verify(decoder.decode(null,null,ChannelBuffers.wrappedBuffer(ChannelBufferTools.convertHexString(""String_Node_Str""))));
  verify(decoder.decode(null,null,ChannelBuffers.wrappedBuffer(ChannelBufferTools.convertHexString(""String_Node_Str""))));
  verify(decoder.decode(null,null,ChannelBuffers.wrappedBuffer(ChannelBufferTools.convertHexString(""String_Node_Str""))));
}",0.9572529782761036
156176,"public static AsyncHttpClient getAsyncHttpClient(){
  return asyncHttpClient;
}","public static AsyncHttpClient getAsyncHttpClient(){
  return ASYNC_HTTP_CLIENT;
}",0.825
156177,"@Override protected Position handlePosition(Position position){
  return filter(position) ? null : position;
}","@Override protected Position handlePosition(Position position){
  if (filter(position)) {
    return null;
  }
  return position;
}",0.8464730290456431
156178,"private boolean filterZero(Position position){
  return filterZero && (position.getLatitude() == 0.0) && (position.getLongitude() == 0.0);
}","private boolean filterZero(Position position){
  return filterZero && position.getLatitude() == 0.0 && position.getLongitude() == 0.0;
}",0.9855072463768116
156179,"@Override protected Object decode(Channel channel,SocketAddress remoteAddress,Object msg) throws Exception {
  String sentence=(String)msg;
  if (sentence.contains(""String_Node_Str"")) {
    Matcher parser=patternLogon.matcher(sentence);
    if (!parser.matches()) {
      return null;
    }
    int index=1;
    sendAcknowledgement(channel,parser.group(index++));
    String id=parser.group(index++);
    String iccid=parser.group(index++);
    if (!identify(iccid,channel,null,false)) {
      if (!identify(id,channel)) {
        return null;
      }
    }
  }
 else   if (sentence.contains(""String_Node_Str"") && hasDeviceId()) {
    String x=PatternUtil.checkPattern(pattern.pattern(),sentence);
    Matcher parser=pattern.matcher(sentence);
    if (!parser.matches()) {
      return null;
    }
    Position position=new Position();
    position.setProtocol(getProtocolName());
    position.setDeviceId(getDeviceId());
    int index=1;
    sendAcknowledgement(channel,parser.group(index++));
    Calendar time=Calendar.getInstance(TimeZone.getTimeZone(""String_Node_Str""));
    time.clear();
    time.set(Calendar.YEAR,Integer.valueOf(parser.group(index++)));
    time.set(Calendar.MONTH,Integer.valueOf(parser.group(index++)) - 1);
    time.set(Calendar.DAY_OF_MONTH,Integer.valueOf(parser.group(index++)));
    time.set(Calendar.HOUR_OF_DAY,Integer.valueOf(parser.group(index++)));
    time.set(Calendar.MINUTE,Integer.valueOf(parser.group(index++)));
    time.set(Calendar.SECOND,Integer.valueOf(parser.group(index++)));
    position.setTime(time.getTime());
    String hemisphere=parser.group(index++);
    double lat=Integer.parseInt(parser.group(index++));
    lat+=Double.parseDouble(parser.group(index++)) / 60;
    if (hemisphere.equals(""String_Node_Str"")) {
      lat=-lat;
    }
    position.setLatitude(lat);
    hemisphere=parser.group(index++);
    double lon=Integer.parseInt(parser.group(index++));
    lon+=Double.parseDouble(parser.group(index++)) / 60;
    if (hemisphere.equals(""String_Node_Str"")) {
      lon=-lon;
    }
    position.setLongitude(lon);
    position.setValid(true);
    position.setSpeed(UnitsConverter.knotsFromKph(Integer.parseInt(parser.group(index++))));
    position.setCourse(Integer.parseInt(parser.group(index++)));
    position.set(Event.KEY_SATELLITES,Integer.parseInt(parser.group(index++)));
    position.set(Event.KEY_BATTERY,Integer.parseInt(parser.group(index++)));
    position.set(Event.KEY_GSM,Integer.parseInt(parser.group(index++)));
    position.set(Event.KEY_STATUS,Integer.parseInt(parser.group(index++),16));
    position.set(Event.KEY_MCC,Integer.parseInt(parser.group(index++)));
    position.set(Event.KEY_MNC,Integer.parseInt(parser.group(index++)));
    position.setAltitude(Integer.parseInt(parser.group(index++)));
    position.set(Event.KEY_HDOP,Integer.parseInt(parser.group(index++)) / 10.0);
    position.set(Event.KEY_CELL,parser.group(index++));
    position.set(Event.KEY_LAC,parser.group(index++));
    position.set(Event.KEY_ODOMETER,Integer.parseInt(parser.group(index++)));
    return position;
  }
  return null;
}","@Override protected Object decode(Channel channel,SocketAddress remoteAddress,Object msg) throws Exception {
  String sentence=(String)msg;
  if (sentence.contains(""String_Node_Str"")) {
    Matcher parser=patternLogon.matcher(sentence);
    if (!parser.matches()) {
      return null;
    }
    int index=1;
    sendAcknowledgement(channel,parser.group(index++));
    String id=parser.group(index++);
    String iccid=parser.group(index++);
    if (!identify(iccid,channel,null,false)) {
      if (!identify(id,channel)) {
        return null;
      }
    }
  }
 else   if (sentence.contains(""String_Node_Str"") && hasDeviceId()) {
    Matcher parser=pattern.matcher(sentence);
    if (!parser.matches()) {
      return null;
    }
    Position position=new Position();
    position.setProtocol(getProtocolName());
    position.setDeviceId(getDeviceId());
    int index=1;
    sendAcknowledgement(channel,parser.group(index++));
    Calendar time=Calendar.getInstance(TimeZone.getTimeZone(""String_Node_Str""));
    time.clear();
    time.set(Calendar.YEAR,Integer.valueOf(parser.group(index++)));
    time.set(Calendar.MONTH,Integer.valueOf(parser.group(index++)) - 1);
    time.set(Calendar.DAY_OF_MONTH,Integer.valueOf(parser.group(index++)));
    time.set(Calendar.HOUR_OF_DAY,Integer.valueOf(parser.group(index++)));
    time.set(Calendar.MINUTE,Integer.valueOf(parser.group(index++)));
    time.set(Calendar.SECOND,Integer.valueOf(parser.group(index++)));
    position.setTime(time.getTime());
    String hemisphere=parser.group(index++);
    double lat=Integer.parseInt(parser.group(index++));
    lat+=Double.parseDouble(parser.group(index++)) / 60;
    if (hemisphere.equals(""String_Node_Str"")) {
      lat=-lat;
    }
    position.setLatitude(lat);
    hemisphere=parser.group(index++);
    double lon=Integer.parseInt(parser.group(index++));
    lon+=Double.parseDouble(parser.group(index++)) / 60;
    if (hemisphere.equals(""String_Node_Str"")) {
      lon=-lon;
    }
    position.setLongitude(lon);
    position.setValid(true);
    position.setSpeed(UnitsConverter.knotsFromKph(Integer.parseInt(parser.group(index++))));
    position.setCourse(Integer.parseInt(parser.group(index++)));
    position.set(Event.KEY_SATELLITES,Integer.parseInt(parser.group(index++)));
    position.set(Event.KEY_BATTERY,Integer.parseInt(parser.group(index++)));
    position.set(Event.KEY_GSM,Integer.parseInt(parser.group(index++)));
    position.set(Event.KEY_STATUS,Integer.parseInt(parser.group(index++),16));
    position.set(Event.KEY_MCC,Integer.parseInt(parser.group(index++)));
    position.set(Event.KEY_MNC,Integer.parseInt(parser.group(index++)));
    position.setAltitude(Integer.parseInt(parser.group(index++)));
    position.set(Event.KEY_HDOP,Integer.parseInt(parser.group(index++)) / 10.0);
    position.set(Event.KEY_CELL,parser.group(index++));
    position.set(Event.KEY_LAC,parser.group(index++));
    position.set(Event.KEY_ODOMETER,Integer.parseInt(parser.group(index++)));
    return position;
  }
  return null;
}",0.989061224489796
156180,"@Override protected Object decode(Channel channel,SocketAddress remoteAddress,Object msg) throws Exception {
  HttpRequest request=(HttpRequest)msg;
  ChannelBuffer buf=request.getContent();
  int length=buf.readableBytes();
  buf.skipBytes(""String_Node_Str"".length());
  int index=ChannelBufferTools.find(buf,buf.readerIndex(),length,""String_Node_Str"");
  String uniqueId=buf.toString(buf.readerIndex(),index - buf.readerIndex(),Charset.defaultCharset());
  if (!identify(uniqueId,channel)) {
    return null;
  }
  buf.skipBytes(uniqueId.length());
  buf.skipBytes(""String_Node_Str"".length());
  short packetId=buf.readUnsignedByte();
  short offset=buf.readUnsignedByte();
  short packetCount=buf.readUnsignedByte();
  buf.readUnsignedByte();
  short parameters=buf.readUnsignedByte();
  buf.skipBytes(offset - 5);
  if (channel != null) {
    sendContinue(channel);
    sendResponse(channel,packetId,packetCount);
  }
  if (packetId == 0x31 || packetId == 0x32 || packetId == 0x36) {
    if (simple) {
      return parseFormatA1(buf);
    }
 else {
      return parseFormatA(buf);
    }
  }
  return null;
}","@Override protected Object decode(Channel channel,SocketAddress remoteAddress,Object msg) throws Exception {
  HttpRequest request=(HttpRequest)msg;
  ChannelBuffer buf=request.getContent();
  int length=buf.readableBytes();
  buf.skipBytes(""String_Node_Str"".length());
  int index=ChannelBufferTools.find(buf,buf.readerIndex(),length,""String_Node_Str"");
  String uniqueId=buf.toString(buf.readerIndex(),index - buf.readerIndex(),Charset.defaultCharset());
  if (!identify(uniqueId,channel)) {
    return null;
  }
  buf.skipBytes(uniqueId.length());
  buf.skipBytes(""String_Node_Str"".length());
  short packetId=buf.readUnsignedByte();
  short offset=buf.readUnsignedByte();
  short packetCount=buf.readUnsignedByte();
  buf.readUnsignedByte();
  buf.readUnsignedByte();
  buf.skipBytes(offset - 5);
  if (channel != null) {
    sendContinue(channel);
    sendResponse(channel,packetId,packetCount);
  }
  if (packetId == 0x31 || packetId == 0x32 || packetId == 0x36) {
    if (simple) {
      return parseFormatA1(buf);
    }
 else {
      return parseFormatA(buf);
    }
  }
  return null;
}",0.9922902494331066
156181,"@Override protected Object decode(ChannelHandlerContext ctx,Channel channel,ChannelBuffer buf) throws Exception {
  if (buf.readableBytes() < 2) {
    return null;
  }
  int index=buf.indexOf(buf.readerIndex() + 1,buf.writerIndex(),(byte)0x04);
  if (index != -1) {
    ChannelBuffer result=ChannelBuffers.buffer(ByteOrder.LITTLE_ENDIAN,index + 1 - buf.readerIndex());
    while (buf.readerIndex() <= index) {
      int b=buf.readUnsignedByte();
      if (b == 0x10) {
        result.writeByte(buf.readUnsignedByte() - 0x20);
      }
 else {
        result.writeByte(b);
      }
    }
    String s=ChannelBuffers.hexDump(result);
    return result;
  }
  return null;
}","@Override protected Object decode(ChannelHandlerContext ctx,Channel channel,ChannelBuffer buf) throws Exception {
  if (buf.readableBytes() < 2) {
    return null;
  }
  int index=buf.indexOf(buf.readerIndex() + 1,buf.writerIndex(),(byte)0x04);
  if (index != -1) {
    ChannelBuffer result=ChannelBuffers.buffer(ByteOrder.LITTLE_ENDIAN,index + 1 - buf.readerIndex());
    while (buf.readerIndex() <= index) {
      int b=buf.readUnsignedByte();
      if (b == 0x10) {
        result.writeByte(buf.readUnsignedByte() - 0x20);
      }
 else {
        result.writeByte(b);
      }
    }
    return result;
  }
  return null;
}",0.965197215777262
156182,"private Position parsePositionReport2(ChannelBuffer buf,int sequenceNumber,long timestamp){
  Position position=new Position();
  position.setProtocol(getProtocolName());
  position.set(Event.KEY_INDEX,sequenceNumber);
  position.setDeviceId(getDeviceId());
  position.setTime(convertTimestamp(timestamp));
  position.setLatitude(buf.readInt() * 0.0000001);
  position.setLongitude(buf.readInt() * 0.0000001);
  buf.readUnsignedByte();
  position.setSpeed(UnitsConverter.knotsFromKph(buf.readUnsignedByte()));
  short flags=buf.readUnsignedByte();
  position.setValid((flags & 0x80) == 0x80 && (flags & 0x40) == 0x40);
  int x=buf.readUnsignedByte();
  buf.readUnsignedInt();
  return position;
}","private Position parsePositionReport2(ChannelBuffer buf,int sequenceNumber,long timestamp){
  Position position=new Position();
  position.setProtocol(getProtocolName());
  position.set(Event.KEY_INDEX,sequenceNumber);
  position.setDeviceId(getDeviceId());
  position.setTime(convertTimestamp(timestamp));
  position.setLatitude(buf.readInt() * 0.0000001);
  position.setLongitude(buf.readInt() * 0.0000001);
  buf.readUnsignedByte();
  position.setSpeed(UnitsConverter.knotsFromKph(buf.readUnsignedByte()));
  short flags=buf.readUnsignedByte();
  position.setValid((flags & 0x80) == 0x80 && (flags & 0x40) == 0x40);
  position.set(Event.KEY_SATELLITES,buf.readUnsignedByte());
  buf.readUnsignedInt();
  return position;
}",0.9711470795214636
156183,"@Override protected Object decode(Channel channel,SocketAddress remoteAddress,Object msg) throws Exception {
  ChannelBuffer buf=(ChannelBuffer)msg;
  int type=buf.readUnsignedShort();
  buf.readUnsignedShort();
  if (type == MSG_IDENT || type == MSG_IDENT_FULL) {
    long id=buf.readUnsignedInt();
    int length=buf.readUnsignedShort();
    buf.skipBytes(length);
    length=buf.readUnsignedShort();
    buf.skipBytes(length);
    length=buf.readUnsignedShort();
    String imei=buf.readBytes(length).toString(Charset.defaultCharset());
    identify(imei,channel);
  }
 else   if (hasDeviceId() && (type == MSG_POINT || type == MSG_ALARM || type == MSG_LOGMSG)) {
    List<Position> positions=new LinkedList<>();
    int recordCount=1;
    if (type == MSG_LOGMSG) {
      recordCount=buf.readUnsignedShort();
    }
    for (int j=0; j < recordCount; j++) {
      Position position=new Position();
      position.setProtocol(getProtocolName());
      position.setDeviceId(getDeviceId());
      if (type == MSG_LOGMSG) {
        position.set(Event.KEY_ARCHIVE,true);
        int subtype=buf.readUnsignedShort();
        if (subtype == MSG_ALARM) {
          position.set(Event.KEY_ALARM,true);
        }
        if (buf.readUnsignedShort() > buf.readableBytes()) {
          lastIndex+=1;
          break;
        }
        lastIndex=buf.readUnsignedInt();
        position.set(Event.KEY_INDEX,lastIndex);
      }
 else {
        newIndex=buf.readUnsignedInt();
      }
      Calendar time=Calendar.getInstance(TimeZone.getTimeZone(""String_Node_Str""));
      time.clear();
      time.setTimeInMillis(buf.readUnsignedInt() * 1000);
      position.setTime(time.getTime());
      position.setLatitude(buf.readInt() * 180.0 / 0x7FFFFFFF);
      position.setLongitude(buf.readInt() * 180.0 / 0x7FFFFFFF);
      position.setSpeed(buf.readUnsignedInt() / 100);
      position.setCourse(buf.readUnsignedShort() / 100);
      position.setAltitude(buf.readUnsignedShort() / 100);
      int satellitesNumber=buf.readUnsignedByte();
      position.set(Event.KEY_SATELLITES,satellitesNumber);
      position.setValid(satellitesNumber >= 3);
      position.set(Event.KEY_GSM,buf.readUnsignedByte());
      position.set(Event.KEY_ODOMETER,buf.readUnsignedInt());
      long extraFlags=buf.readLong();
      if ((extraFlags & 0x1) == 0x1) {
        int count=buf.readUnsignedShort();
        for (int i=1; i <= count; i++) {
          position.set(Event.PREFIX_ADC + i,buf.readUnsignedShort());
        }
      }
      if ((extraFlags & 0x2) == 0x2) {
        int size=buf.readUnsignedShort();
        position.set(""String_Node_Str"",buf.toString(buf.readerIndex(),size,Charset.defaultCharset()));
        buf.skipBytes(size);
      }
      if ((extraFlags & 0x4) == 0x4) {
        int size=buf.readUnsignedShort();
        StringBuilder hex=new StringBuilder();
        for (int i=buf.readerIndex(); i < buf.readerIndex() + size; i++) {
          byte b=buf.getByte(i);
          hex.append(HEX_CHARS.charAt((b & 0xf0) >> 4));
          hex.append(HEX_CHARS.charAt((b & 0x0F)));
        }
        position.set(""String_Node_Str"",hex.toString());
        buf.skipBytes(size);
      }
      if (type == MSG_ALARM) {
        byte[] response={(byte)0xC9,0x00,0x00,0x00,0x00,0x00,0x00,0x00};
        channel.write(ChannelBuffers.wrappedBuffer(response));
        position.set(Event.KEY_ALARM,true);
      }
      buf.readUnsignedInt();
      positions.add(position);
    }
    requestArchive(channel);
    return positions;
  }
  return null;
}","@Override protected Object decode(Channel channel,SocketAddress remoteAddress,Object msg) throws Exception {
  ChannelBuffer buf=(ChannelBuffer)msg;
  int type=buf.readUnsignedShort();
  buf.readUnsignedShort();
  if (type == MSG_IDENT || type == MSG_IDENT_FULL) {
    buf.readUnsignedInt();
    int length=buf.readUnsignedShort();
    buf.skipBytes(length);
    length=buf.readUnsignedShort();
    buf.skipBytes(length);
    length=buf.readUnsignedShort();
    String imei=buf.readBytes(length).toString(Charset.defaultCharset());
    identify(imei,channel);
  }
 else   if (hasDeviceId() && (type == MSG_POINT || type == MSG_ALARM || type == MSG_LOGMSG)) {
    List<Position> positions=new LinkedList<>();
    int recordCount=1;
    if (type == MSG_LOGMSG) {
      recordCount=buf.readUnsignedShort();
    }
    for (int j=0; j < recordCount; j++) {
      Position position=new Position();
      position.setProtocol(getProtocolName());
      position.setDeviceId(getDeviceId());
      if (type == MSG_LOGMSG) {
        position.set(Event.KEY_ARCHIVE,true);
        int subtype=buf.readUnsignedShort();
        if (subtype == MSG_ALARM) {
          position.set(Event.KEY_ALARM,true);
        }
        if (buf.readUnsignedShort() > buf.readableBytes()) {
          lastIndex+=1;
          break;
        }
        lastIndex=buf.readUnsignedInt();
        position.set(Event.KEY_INDEX,lastIndex);
      }
 else {
        newIndex=buf.readUnsignedInt();
      }
      Calendar time=Calendar.getInstance(TimeZone.getTimeZone(""String_Node_Str""));
      time.clear();
      time.setTimeInMillis(buf.readUnsignedInt() * 1000);
      position.setTime(time.getTime());
      position.setLatitude(buf.readInt() * 180.0 / 0x7FFFFFFF);
      position.setLongitude(buf.readInt() * 180.0 / 0x7FFFFFFF);
      position.setSpeed(buf.readUnsignedInt() / 100);
      position.setCourse(buf.readUnsignedShort() / 100);
      position.setAltitude(buf.readUnsignedShort() / 100);
      int satellitesNumber=buf.readUnsignedByte();
      position.set(Event.KEY_SATELLITES,satellitesNumber);
      position.setValid(satellitesNumber >= 3);
      position.set(Event.KEY_GSM,buf.readUnsignedByte());
      position.set(Event.KEY_ODOMETER,buf.readUnsignedInt());
      long extraFlags=buf.readLong();
      if ((extraFlags & 0x1) == 0x1) {
        int count=buf.readUnsignedShort();
        for (int i=1; i <= count; i++) {
          position.set(Event.PREFIX_ADC + i,buf.readUnsignedShort());
        }
      }
      if ((extraFlags & 0x2) == 0x2) {
        int size=buf.readUnsignedShort();
        position.set(""String_Node_Str"",buf.toString(buf.readerIndex(),size,Charset.defaultCharset()));
        buf.skipBytes(size);
      }
      if ((extraFlags & 0x4) == 0x4) {
        int size=buf.readUnsignedShort();
        StringBuilder hex=new StringBuilder();
        for (int i=buf.readerIndex(); i < buf.readerIndex() + size; i++) {
          byte b=buf.getByte(i);
          hex.append(HEX_CHARS.charAt((b & 0xf0) >> 4));
          hex.append(HEX_CHARS.charAt((b & 0x0F)));
        }
        position.set(""String_Node_Str"",hex.toString());
        buf.skipBytes(size);
      }
      if (type == MSG_ALARM) {
        byte[] response={(byte)0xC9,0x00,0x00,0x00,0x00,0x00,0x00,0x00};
        channel.write(ChannelBuffers.wrappedBuffer(response));
        position.set(Event.KEY_ALARM,true);
      }
      buf.readUnsignedInt();
      positions.add(position);
    }
    requestArchive(channel);
    return positions;
  }
  return null;
}",0.9988633134413184
156184,"@Override protected Object decode(Channel channel,SocketAddress remoteAddress,Object msg) throws Exception {
  String sentence=(String)msg;
  if (sentence.contains(""String_Node_Str"")) {
    Matcher parser=patternLogon.matcher(sentence);
    if (!parser.matches()) {
      return null;
    }
    int index=1;
    sendAcknowledgement(channel,parser.group(index++));
    String id=parser.group(index++);
    String iccid=parser.group(index++);
    if (!identify(iccid,channel,null,false)) {
      if (!identify(id,channel)) {
        return null;
      }
    }
  }
 else   if (sentence.contains(""String_Node_Str"")) {
    Matcher parser=pattern.matcher(sentence);
    if (!parser.matches()) {
      return null;
    }
    Position position=new Position();
    position.setProtocol(getProtocolName());
    int index=1;
    sendAcknowledgement(channel,parser.group(index++));
    Calendar time=Calendar.getInstance(TimeZone.getTimeZone(""String_Node_Str""));
    time.clear();
    time.set(Calendar.YEAR,Integer.valueOf(parser.group(index++)));
    time.set(Calendar.MONTH,Integer.valueOf(parser.group(index++)) - 1);
    time.set(Calendar.DAY_OF_MONTH,Integer.valueOf(parser.group(index++)));
    time.set(Calendar.HOUR_OF_DAY,Integer.valueOf(parser.group(index++)));
    time.set(Calendar.MINUTE,Integer.valueOf(parser.group(index++)));
    time.set(Calendar.SECOND,Integer.valueOf(parser.group(index++)));
    position.setTime(time.getTime());
    String hemisphere=parser.group(index++);
    double lat=Integer.parseInt(parser.group(index++));
    lat+=Double.parseDouble(parser.group(index++)) / 60;
    if (hemisphere.equals(""String_Node_Str"")) {
      lat=-lat;
    }
    position.setLatitude(lat);
    hemisphere=parser.group(index++);
    double lon=Integer.parseInt(parser.group(index++));
    lon+=Double.parseDouble(parser.group(index++)) / 60;
    if (hemisphere.equals(""String_Node_Str"")) {
      lon=-lon;
    }
    position.setLongitude(lon);
    position.setSpeed(UnitsConverter.knotsFromKph(Integer.parseInt(parser.group(index++))));
    position.setCourse(Integer.parseInt(parser.group(index++)));
    position.set(Event.KEY_SATELLITES,Integer.parseInt(parser.group(index++)));
    position.set(Event.KEY_BATTERY,Integer.parseInt(parser.group(index++)));
    position.set(Event.KEY_GSM,Integer.parseInt(parser.group(index++)));
    position.set(Event.KEY_STATUS,Integer.parseInt(parser.group(index++),16));
    position.set(Event.KEY_MCC,Integer.parseInt(parser.group(index++)));
    position.set(Event.KEY_MNC,Integer.parseInt(parser.group(index++)));
    position.setAltitude(Integer.parseInt(parser.group(index++)));
    position.set(Event.KEY_HDOP,Integer.parseInt(parser.group(index++)) / 10.0);
    position.set(Event.KEY_CELL,parser.group(index++));
    position.set(Event.KEY_LAC,parser.group(index++));
    position.set(Event.KEY_ODOMETER,Integer.parseInt(parser.group(index++)));
    return position;
  }
  return null;
}","@Override protected Object decode(Channel channel,SocketAddress remoteAddress,Object msg) throws Exception {
  String sentence=(String)msg;
  if (sentence.contains(""String_Node_Str"")) {
    Matcher parser=patternLogon.matcher(sentence);
    if (!parser.matches()) {
      return null;
    }
    int index=1;
    sendAcknowledgement(channel,parser.group(index++));
    String id=parser.group(index++);
    String iccid=parser.group(index++);
    if (!identify(iccid,channel,null,false)) {
      if (!identify(id,channel)) {
        return null;
      }
    }
  }
 else   if (sentence.contains(""String_Node_Str"") && hasDeviceId()) {
    String x=PatternUtil.checkPattern(pattern.pattern(),sentence);
    Matcher parser=pattern.matcher(sentence);
    if (!parser.matches()) {
      return null;
    }
    Position position=new Position();
    position.setProtocol(getProtocolName());
    position.setDeviceId(getDeviceId());
    int index=1;
    sendAcknowledgement(channel,parser.group(index++));
    Calendar time=Calendar.getInstance(TimeZone.getTimeZone(""String_Node_Str""));
    time.clear();
    time.set(Calendar.YEAR,Integer.valueOf(parser.group(index++)));
    time.set(Calendar.MONTH,Integer.valueOf(parser.group(index++)) - 1);
    time.set(Calendar.DAY_OF_MONTH,Integer.valueOf(parser.group(index++)));
    time.set(Calendar.HOUR_OF_DAY,Integer.valueOf(parser.group(index++)));
    time.set(Calendar.MINUTE,Integer.valueOf(parser.group(index++)));
    time.set(Calendar.SECOND,Integer.valueOf(parser.group(index++)));
    position.setTime(time.getTime());
    String hemisphere=parser.group(index++);
    double lat=Integer.parseInt(parser.group(index++));
    lat+=Double.parseDouble(parser.group(index++)) / 60;
    if (hemisphere.equals(""String_Node_Str"")) {
      lat=-lat;
    }
    position.setLatitude(lat);
    hemisphere=parser.group(index++);
    double lon=Integer.parseInt(parser.group(index++));
    lon+=Double.parseDouble(parser.group(index++)) / 60;
    if (hemisphere.equals(""String_Node_Str"")) {
      lon=-lon;
    }
    position.setLongitude(lon);
    position.setSpeed(UnitsConverter.knotsFromKph(Integer.parseInt(parser.group(index++))));
    position.setCourse(Integer.parseInt(parser.group(index++)));
    position.set(Event.KEY_SATELLITES,Integer.parseInt(parser.group(index++)));
    position.set(Event.KEY_BATTERY,Integer.parseInt(parser.group(index++)));
    position.set(Event.KEY_GSM,Integer.parseInt(parser.group(index++)));
    position.set(Event.KEY_STATUS,Integer.parseInt(parser.group(index++),16));
    position.set(Event.KEY_MCC,Integer.parseInt(parser.group(index++)));
    position.set(Event.KEY_MNC,Integer.parseInt(parser.group(index++)));
    position.setAltitude(Integer.parseInt(parser.group(index++)));
    position.set(Event.KEY_HDOP,Integer.parseInt(parser.group(index++)) / 10.0);
    position.set(Event.KEY_CELL,parser.group(index++));
    position.set(Event.KEY_LAC,parser.group(index++));
    position.set(Event.KEY_ODOMETER,Integer.parseInt(parser.group(index++)));
    return position;
  }
  return null;
}",0.9791978698618738
156185,"@Test public void testDecode() throws Exception {
  FlextrackProtocolDecoder decoder=new FlextrackProtocolDecoder(new FlextrackProtocol());
  assertNull(decoder.decode(null,null,""String_Node_Str""));
  assertNull(decoder.decode(null,null,""String_Node_Str""));
  verify(decoder.decode(null,null,""String_Node_Str""));
}","@Test public void testDecode() throws Exception {
  FlextrackProtocolDecoder decoder=new FlextrackProtocolDecoder(new FlextrackProtocol());
  assertNull(decoder.decode(null,null,""String_Node_Str""));
  assertNull(decoder.decode(null,null,""String_Node_Str""));
  verify(decoder.decode(null,null,""String_Node_Str""));
  verify(decoder.decode(null,null,""String_Node_Str""));
}",0.9194729136163984
156186,"private String calculateStatus(Position position){
  if (position.getAttributes().containsKey(Event.KEY_ALARM) && (Boolean)position.getAttributes().get(Event.KEY_ALARM)) {
    return ""String_Node_Str"";
  }
 else   if (position.getSpeed() < 1.0) {
    return ""String_Node_Str"";
  }
 else {
    return ""String_Node_Str"";
  }
}","private String calculateStatus(Position position){
  if (position.getAttributes().containsKey(Event.KEY_ALARM)) {
    return ""String_Node_Str"";
  }
 else   if (position.getSpeed() < 1.0) {
    return ""String_Node_Str"";
  }
 else {
    return ""String_Node_Str"";
  }
}",0.9016949152542372
156187,"@Override protected Address parseAddress(JsonObject json){
  JsonObject result=json.getJsonObject(""String_Node_Str"").getJsonObject(""String_Node_Str"");
  JsonObject dummy;
  if (result != null) {
    Address address=new Address();
    if (result.getJsonObject(""String_Node_Str"") != null) {
      address.setHouse(result.getJsonObject(""String_Node_Str"").getString(""String_Node_Str""));
    }
    if (result.getJsonObject(""String_Node_Str"") != null) {
      address.setStreet(result.getJsonObject(""String_Node_Str"").getString(""String_Node_Str""));
    }
    if (result.getJsonObject(""String_Node_Str"") != null) {
      address.setSettlement(result.getJsonObject(""String_Node_Str"").getString(""String_Node_Str""));
    }
    if (result.getJsonObject(""String_Node_Str"") != null) {
      address.setDistrict(result.getJsonObject(""String_Node_Str"").getString(""String_Node_Str""));
    }
    if (result.getJsonObject(""String_Node_Str"") != null) {
      address.setState(result.getJsonObject(""String_Node_Str"").getString(""String_Node_Str""));
    }
    if (result.getJsonObject(""String_Node_Str"") != null) {
      address.setCountry(result.getJsonObject(""String_Node_Str"").getString(""String_Node_Str""));
    }
    if (result.getJsonObject(""String_Node_Str"") != null) {
      address.setPostcode(result.getJsonObject(""String_Node_Str"").getString(""String_Node_Str""));
    }
    return address;
  }
  return null;
}","@Override protected Address parseAddress(JsonObject json){
  JsonObject result=json.getJsonObject(""String_Node_Str"").getJsonObject(""String_Node_Str"");
  if (result != null) {
    Address address=new Address();
    if (result.getJsonObject(""String_Node_Str"") != null) {
      address.setHouse(result.getJsonObject(""String_Node_Str"").getString(""String_Node_Str""));
    }
    if (result.getJsonObject(""String_Node_Str"") != null) {
      address.setStreet(result.getJsonObject(""String_Node_Str"").getString(""String_Node_Str""));
    }
    if (result.getJsonObject(""String_Node_Str"") != null) {
      address.setSettlement(result.getJsonObject(""String_Node_Str"").getString(""String_Node_Str""));
    }
    if (result.getJsonObject(""String_Node_Str"") != null) {
      address.setDistrict(result.getJsonObject(""String_Node_Str"").getString(""String_Node_Str""));
    }
    if (result.getJsonObject(""String_Node_Str"") != null) {
      address.setState(result.getJsonObject(""String_Node_Str"").getString(""String_Node_Str""));
    }
    if (result.getJsonObject(""String_Node_Str"") != null) {
      address.setCountry(result.getJsonObject(""String_Node_Str"").getString(""String_Node_Str""));
    }
    if (result.getJsonObject(""String_Node_Str"") != null) {
      address.setPostcode(result.getJsonObject(""String_Node_Str"").getString(""String_Node_Str""));
    }
    return address;
  }
  return null;
}",0.992790194664744
156188,"@Override protected Address parseAddress(JsonObject json){
  JsonArray result=json.getJsonArray(""String_Node_Str"");
  if (result != null) {
    JsonObject result1=result.getJsonObject(0);
    JsonArray location=result1.getJsonArray(""String_Node_Str"");
    if (location != null) {
      JsonObject location1=location.getJsonObject(0);
      Address address=new Address();
      if (location1.containsKey(""String_Node_Str"")) {
        address.setStreet(location1.getString(""String_Node_Str""));
      }
      if (location1.containsKey(""String_Node_Str"")) {
        address.setSettlement(location1.getString(""String_Node_Str""));
      }
      if (location1.containsKey(""String_Node_Str"")) {
        address.setDistrict(location1.getString(""String_Node_Str""));
      }
      if (location1.containsKey(""String_Node_Str"")) {
        address.setState(location1.getString(""String_Node_Str""));
      }
      if (location1.containsKey(""String_Node_Str"")) {
        address.setCountry(location1.getString(""String_Node_Str"").toUpperCase());
      }
      if (location1.containsKey(""String_Node_Str"")) {
        address.setPostcode(location1.getString(""String_Node_Str""));
      }
      return address;
    }
  }
  return null;
}","@Override protected Address parseAddress(JsonObject json){
  JsonArray result=json.getJsonArray(""String_Node_Str"");
  if (result != null) {
    JsonArray locations=result.getJsonObject(0).getJsonArray(""String_Node_Str"");
    if (locations != null) {
      JsonObject location=locations.getJsonObject(0);
      Address address=new Address();
      if (location.containsKey(""String_Node_Str"")) {
        address.setStreet(location.getString(""String_Node_Str""));
      }
      if (location.containsKey(""String_Node_Str"")) {
        address.setSettlement(location.getString(""String_Node_Str""));
      }
      if (location.containsKey(""String_Node_Str"")) {
        address.setDistrict(location.getString(""String_Node_Str""));
      }
      if (location.containsKey(""String_Node_Str"")) {
        address.setState(location.getString(""String_Node_Str""));
      }
      if (location.containsKey(""String_Node_Str"")) {
        address.setCountry(location.getString(""String_Node_Str"").toUpperCase());
      }
      if (location.containsKey(""String_Node_Str"")) {
        address.setPostcode(location.getString(""String_Node_Str""));
      }
      return address;
    }
  }
  return null;
}",0.7043551088777219
156189,"@Override protected Address parseAddress(JsonObject json){
  JsonArray result=json.getJsonArray(""String_Node_Str"");
  if (result != null) {
    JsonObject result1=result.getJsonObject(0);
    JsonObject location=result1.getJsonObject(""String_Node_Str"");
    if (location != null) {
      Address address=new Address();
      if (location.containsKey(""String_Node_Str"")) {
        address.setHouse(location.getString(""String_Node_Str""));
      }
      if (location.containsKey(""String_Node_Str"")) {
        address.setStreet(location.getString(""String_Node_Str""));
      }
      if (location.containsKey(""String_Node_Str"")) {
        address.setSettlement(location.getString(""String_Node_Str""));
      }
      if (location.containsKey(""String_Node_Str"")) {
        address.setDistrict(location.getString(""String_Node_Str""));
      }
      if (location.containsKey(""String_Node_Str"")) {
        address.setState(location.getString(""String_Node_Str""));
      }
      if (location.containsKey(""String_Node_Str"")) {
        address.setCountry(location.getString(""String_Node_Str"").toUpperCase());
      }
      if (location.containsKey(""String_Node_Str"")) {
        address.setPostcode(location.getString(""String_Node_Str""));
      }
      return address;
    }
  }
  return null;
}","@Override protected Address parseAddress(JsonObject json){
  JsonArray result=json.getJsonArray(""String_Node_Str"");
  if (result != null) {
    JsonObject location=result.getJsonObject(0).getJsonObject(""String_Node_Str"");
    if (location != null) {
      Address address=new Address();
      if (location.containsKey(""String_Node_Str"")) {
        address.setHouse(location.getString(""String_Node_Str""));
      }
      if (location.containsKey(""String_Node_Str"")) {
        address.setStreet(location.getString(""String_Node_Str""));
      }
      if (location.containsKey(""String_Node_Str"")) {
        address.setSettlement(location.getString(""String_Node_Str""));
      }
      if (location.containsKey(""String_Node_Str"")) {
        address.setDistrict(location.getString(""String_Node_Str""));
      }
      if (location.containsKey(""String_Node_Str"")) {
        address.setState(location.getString(""String_Node_Str""));
      }
      if (location.containsKey(""String_Node_Str"")) {
        address.setCountry(location.getString(""String_Node_Str"").toUpperCase());
      }
      if (location.containsKey(""String_Node_Str"")) {
        address.setPostcode(location.getString(""String_Node_Str""));
      }
      return address;
    }
  }
  return null;
}",0.9777954004758128
156190,"private void mockData(long userId){
  if (config.getBoolean(""String_Node_Str"")) {
    try {
      Device device=new Device();
      device.setName(""String_Node_Str"");
      device.setUniqueId(""String_Node_Str"");
      addDevice(device);
      linkDevice(userId,device.getId());
      Position position=new Position();
      position.setDeviceId(device.getId());
      position.setTime(JsonConverter.parseDate(""String_Node_Str""));
      position.setLatitude(-36.8785803);
      position.setLongitude(174.7281713);
      addPosition(position);
      position.setTime(JsonConverter.parseDate(""String_Node_Str""));
      position.setLatitude(-36.8870932);
      position.setLongitude(174.7473116);
      addPosition(position);
      position.setTime(JsonConverter.parseDate(""String_Node_Str""));
      position.setLatitude(-36.8932371);
      position.setLongitude(174.7743053);
      addPosition(position);
      updateLatestPosition(position);
    }
 catch (    SQLException|ParseException error) {
      Log.warning(error);
    }
  }
}","private void mockData(long userId){
  if (config.getBoolean(""String_Node_Str"")) {
    try {
      Device device=new Device();
      device.setName(""String_Node_Str"");
      device.setUniqueId(""String_Node_Str"");
      addDevice(device);
      linkDevice(userId,device.getId());
      Position position=new Position();
      position.setDeviceId(device.getId());
      position.setTime(JsonConverter.parseDate(""String_Node_Str""));
      position.setLatitude(-36.8785803);
      position.setLongitude(174.7281713);
      addPosition(position);
      position.setTime(JsonConverter.parseDate(""String_Node_Str""));
      position.setLatitude(-36.8870932);
      position.setLongitude(174.7473116);
      addPosition(position);
      position.setTime(JsonConverter.parseDate(""String_Node_Str""));
      position.setLatitude(-36.8932371);
      position.setLongitude(174.7743053);
      addPosition(position);
      updateLatestPosition(position);
    }
 catch (    SQLException error) {
      Log.warning(error);
    }
  }
}",0.9926793557833088
156191,"@Override protected Object decode(Channel channel,SocketAddress remoteAddress,Object msg) throws Exception {
  String sentence=(String)msg;
  Matcher parser=heartbeatPattern.matcher(sentence);
  if (parser.matches()) {
    if (channel != null) {
      channel.write(""String_Node_Str"" + parser.group(1) + ""String_Node_Str""+ parser.group(2)+ ""String_Node_Str"",remoteAddress);
    }
    return null;
  }
  parser=pattern.matcher(sentence);
  if (!parser.matches()) {
    return null;
  }
  Position position=new Position();
  position.setProtocol(getProtocolName());
  Integer index=1;
  if (!identify(parser.group(index++),channel,remoteAddress)) {
    return null;
  }
  position.setDeviceId(getDeviceId());
  position.set(""String_Node_Str"",parser.group(index++));
  position.set(Event.KEY_FUEL,parser.group(index++));
  position.setValid(Integer.valueOf(parser.group(index++)) < 20);
  String speed=parser.group(index++);
  if (speed != null) {
    position.setSpeed(UnitsConverter.knotsFromKph(Double.valueOf(speed)));
  }
  String course=parser.group(index++);
  if (speed != null) {
    position.setCourse(Double.valueOf(course));
  }
  String altitude=parser.group(index++);
  if (speed != null) {
    position.setAltitude(Double.valueOf(altitude));
  }
  position.setLongitude(Double.valueOf(parser.group(index++)));
  position.setLatitude(Double.valueOf(parser.group(index++)));
  Calendar time=Calendar.getInstance(TimeZone.getTimeZone(""String_Node_Str""));
  time.clear();
  time.set(Calendar.YEAR,Integer.valueOf(parser.group(index++)));
  time.set(Calendar.MONTH,Integer.valueOf(parser.group(index++)) - 1);
  time.set(Calendar.DAY_OF_MONTH,Integer.valueOf(parser.group(index++)));
  time.set(Calendar.HOUR_OF_DAY,Integer.valueOf(parser.group(index++)));
  time.set(Calendar.MINUTE,Integer.valueOf(parser.group(index++)));
  time.set(Calendar.SECOND,Integer.valueOf(parser.group(index++)));
  position.setTime(time.getTime());
  position.set(Event.KEY_MCC,parser.group(index++));
  position.set(Event.KEY_MNC,parser.group(index++));
  position.set(Event.KEY_LAC,parser.group(index++));
  position.set(Event.KEY_CELL,parser.group(index++));
  String odometer=parser.group(index++);
  if (odometer != null && Double.valueOf(odometer) != 0) {
    position.set(Event.KEY_ODOMETER,odometer);
  }
  position.set(Event.KEY_BATTERY,parser.group(index++));
  if (Context.getConfig().getBoolean(getProtocolName() + ""String_Node_Str"") && channel != null) {
    channel.write(""String_Node_Str"" + parser.group(index++) + ""String_Node_Str"",remoteAddress);
  }
  return position;
}","@Override protected Object decode(Channel channel,SocketAddress remoteAddress,Object msg) throws Exception {
  String sentence=(String)msg;
  Matcher parser=heartbeatPattern.matcher(sentence);
  if (parser.matches()) {
    if (channel != null) {
      channel.write(""String_Node_Str"" + parser.group(1) + ""String_Node_Str""+ parser.group(2)+ ""String_Node_Str"",remoteAddress);
    }
    return null;
  }
  parser=pattern.matcher(sentence);
  if (!parser.matches()) {
    return null;
  }
  Position position=new Position();
  position.setProtocol(getProtocolName());
  Integer index=1;
  if (!identify(parser.group(index++),channel,remoteAddress)) {
    return null;
  }
  position.setDeviceId(getDeviceId());
  position.set(""String_Node_Str"",parser.group(index++));
  position.set(Event.KEY_FUEL,parser.group(index++));
  position.setValid(Integer.valueOf(parser.group(index++)) < 20);
  String speed=parser.group(index++);
  if (speed != null) {
    position.setSpeed(UnitsConverter.knotsFromKph(Double.valueOf(speed)));
  }
  String course=parser.group(index++);
  if (speed != null) {
    position.setCourse(Double.valueOf(course));
  }
  String altitude=parser.group(index++);
  if (altitude != null) {
    position.setAltitude(Double.valueOf(altitude));
  }
  position.setLongitude(Double.valueOf(parser.group(index++)));
  position.setLatitude(Double.valueOf(parser.group(index++)));
  Calendar time=Calendar.getInstance(TimeZone.getTimeZone(""String_Node_Str""));
  time.clear();
  time.set(Calendar.YEAR,Integer.valueOf(parser.group(index++)));
  time.set(Calendar.MONTH,Integer.valueOf(parser.group(index++)) - 1);
  time.set(Calendar.DAY_OF_MONTH,Integer.valueOf(parser.group(index++)));
  time.set(Calendar.HOUR_OF_DAY,Integer.valueOf(parser.group(index++)));
  time.set(Calendar.MINUTE,Integer.valueOf(parser.group(index++)));
  time.set(Calendar.SECOND,Integer.valueOf(parser.group(index++)));
  position.setTime(time.getTime());
  position.set(Event.KEY_MCC,parser.group(index++));
  position.set(Event.KEY_MNC,parser.group(index++));
  position.set(Event.KEY_LAC,parser.group(index++));
  position.set(Event.KEY_CELL,parser.group(index++));
  String odometer=parser.group(index++);
  if (odometer != null && Double.valueOf(odometer) != 0) {
    position.set(Event.KEY_ODOMETER,odometer);
  }
  position.set(Event.KEY_BATTERY,parser.group(index++));
  if (Context.getConfig().getBoolean(getProtocolName() + ""String_Node_Str"") && channel != null) {
    channel.write(""String_Node_Str"" + parser.group(index++) + ""String_Node_Str"",remoteAddress);
  }
  return position;
}",0.997477197748884
156192,"@Test public void testDecode() throws Exception {
  Gl200ProtocolDecoder decoder=new Gl200ProtocolDecoder(new Gl200Protocol());
  verify(decoder.decode(null,null,""String_Node_Str""));
  verify(decoder.decode(null,null,""String_Node_Str""));
  verify(decoder.decode(null,null,""String_Node_Str""));
  verify(decoder.decode(null,null,""String_Node_Str""));
  verify(decoder.decode(null,null,""String_Node_Str""));
  verify(decoder.decode(null,null,""String_Node_Str""));
  assertNull(decoder.decode(null,null,""String_Node_Str""));
  verify(decoder.decode(null,null,""String_Node_Str""));
  verify(decoder.decode(null,null,""String_Node_Str""));
  verify(decoder.decode(null,null,""String_Node_Str""));
  verify(decoder.decode(null,null,""String_Node_Str""));
  verify(decoder.decode(null,null,""String_Node_Str""));
  verify(decoder.decode(null,null,""String_Node_Str""));
  verify(decoder.decode(null,null,""String_Node_Str""));
  verify(decoder.decode(null,null,""String_Node_Str""));
  verify(decoder.decode(null,null,""String_Node_Str""));
  verify(decoder.decode(null,null,""String_Node_Str""));
  verify(decoder.decode(null,null,""String_Node_Str""));
  verify(decoder.decode(null,null,""String_Node_Str""));
  verify(decoder.decode(null,null,""String_Node_Str""));
  verify(decoder.decode(null,null,""String_Node_Str""));
  verify(decoder.decode(null,null,""String_Node_Str""));
  verify(decoder.decode(null,null,""String_Node_Str""));
  verify(decoder.decode(null,null,""String_Node_Str""));
  verify(decoder.decode(null,null,""String_Node_Str""));
  verify(decoder.decode(null,null,""String_Node_Str""));
  verify(decoder.decode(null,null,""String_Node_Str""));
  verify(decoder.decode(null,null,""String_Node_Str""));
  verify(decoder.decode(null,null,""String_Node_Str""));
  verify(decoder.decode(null,null,""String_Node_Str""));
  verify(decoder.decode(null,null,""String_Node_Str""));
  verify(decoder.decode(null,null,""String_Node_Str""));
  verify(decoder.decode(null,null,""String_Node_Str""));
  verify(decoder.decode(null,null,""String_Node_Str""));
  verify(decoder.decode(null,null,""String_Node_Str""));
  verify(decoder.decode(null,null,""String_Node_Str""));
  assertNull(decoder.decode(null,null,""String_Node_Str""));
  verify(decoder.decode(null,null,""String_Node_Str""));
  verify(decoder.decode(null,null,""String_Node_Str""));
  verify(decoder.decode(null,null,""String_Node_Str""));
  assertNull(decoder.decode(null,null,""String_Node_Str""));
}","@Test public void testDecode() throws Exception {
  Gl200ProtocolDecoder decoder=new Gl200ProtocolDecoder(new Gl200Protocol());
  verify(decoder.decode(null,null,""String_Node_Str""));
  verify(decoder.decode(null,null,""String_Node_Str""));
  verify(decoder.decode(null,null,""String_Node_Str""));
  verify(decoder.decode(null,null,""String_Node_Str""));
  verify(decoder.decode(null,null,""String_Node_Str""));
  verify(decoder.decode(null,null,""String_Node_Str""));
  verify(decoder.decode(null,null,""String_Node_Str""));
  assertNull(decoder.decode(null,null,""String_Node_Str""));
  verify(decoder.decode(null,null,""String_Node_Str""));
  verify(decoder.decode(null,null,""String_Node_Str""));
  verify(decoder.decode(null,null,""String_Node_Str""));
  verify(decoder.decode(null,null,""String_Node_Str""));
  verify(decoder.decode(null,null,""String_Node_Str""));
  verify(decoder.decode(null,null,""String_Node_Str""));
  verify(decoder.decode(null,null,""String_Node_Str""));
  verify(decoder.decode(null,null,""String_Node_Str""));
  verify(decoder.decode(null,null,""String_Node_Str""));
  verify(decoder.decode(null,null,""String_Node_Str""));
  verify(decoder.decode(null,null,""String_Node_Str""));
  verify(decoder.decode(null,null,""String_Node_Str""));
  verify(decoder.decode(null,null,""String_Node_Str""));
  verify(decoder.decode(null,null,""String_Node_Str""));
  verify(decoder.decode(null,null,""String_Node_Str""));
  verify(decoder.decode(null,null,""String_Node_Str""));
  verify(decoder.decode(null,null,""String_Node_Str""));
  verify(decoder.decode(null,null,""String_Node_Str""));
  verify(decoder.decode(null,null,""String_Node_Str""));
  verify(decoder.decode(null,null,""String_Node_Str""));
  verify(decoder.decode(null,null,""String_Node_Str""));
  verify(decoder.decode(null,null,""String_Node_Str""));
  verify(decoder.decode(null,null,""String_Node_Str""));
  verify(decoder.decode(null,null,""String_Node_Str""));
  verify(decoder.decode(null,null,""String_Node_Str""));
  verify(decoder.decode(null,null,""String_Node_Str""));
  verify(decoder.decode(null,null,""String_Node_Str""));
  verify(decoder.decode(null,null,""String_Node_Str""));
  verify(decoder.decode(null,null,""String_Node_Str""));
  assertNull(decoder.decode(null,null,""String_Node_Str""));
  verify(decoder.decode(null,null,""String_Node_Str""));
  verify(decoder.decode(null,null,""String_Node_Str""));
  verify(decoder.decode(null,null,""String_Node_Str""));
  assertNull(decoder.decode(null,null,""String_Node_Str""));
}",0.9886527749123168
156193,"@Override protected Object decode(Channel channel,SocketAddress remoteAddress,Object msg) throws Exception {
  HttpRequest request=(HttpRequest)msg;
  QueryStringDecoder decoder=new QueryStringDecoder(request.getUri());
  Map<String,List<String>> params=decoder.getParameters();
  if (params.isEmpty()) {
    decoder=new QueryStringDecoder(request.getContent().toString(Charset.defaultCharset()),false);
    params=decoder.getParameters();
  }
  Position position=new Position();
  position.setProtocol(getProtocolName());
  String id=params.get(params.containsKey(""String_Node_Str"") ? ""String_Node_Str"" : ""String_Node_Str"").get(0);
  if (!identify(id,channel)) {
    return null;
  }
  position.setDeviceId(getDeviceId());
  position.setValid(true);
  if (params.containsKey(""String_Node_Str"")) {
    try {
      position.setTime(new Date(Long.valueOf(params.get(""String_Node_Str"").get(0)) * 1000));
    }
 catch (    NumberFormatException error) {
      DateFormat dateFormat=new SimpleDateFormat(""String_Node_Str"");
      position.setTime(dateFormat.parse(params.get(""String_Node_Str"").get(0)));
    }
  }
 else {
    position.setTime(new Date());
  }
  position.setLatitude(Double.valueOf(params.get(""String_Node_Str"").get(0)));
  position.setLongitude(Double.valueOf(params.get(""String_Node_Str"").get(0)));
  if (params.containsKey(""String_Node_Str"")) {
    position.setSpeed(Double.valueOf(params.get(""String_Node_Str"").get(0)));
  }
  if (params.containsKey(""String_Node_Str"")) {
    position.setCourse(Double.valueOf(params.get(""String_Node_Str"").get(0)));
  }
 else   if (params.containsKey(""String_Node_Str"")) {
    position.setCourse(Double.valueOf(params.get(""String_Node_Str"").get(0)));
  }
  if (params.containsKey(""String_Node_Str"")) {
    position.setAltitude(Double.valueOf(params.get(""String_Node_Str"").get(0)));
  }
  if (params.containsKey(""String_Node_Str"")) {
    position.set(Event.KEY_HDOP,params.get(""String_Node_Str"").get(0));
  }
  if (params.containsKey(""String_Node_Str"")) {
    position.set(""String_Node_Str"",params.get(""String_Node_Str"").get(0));
  }
  if (params.containsKey(""String_Node_Str"")) {
    position.set(""String_Node_Str"",params.get(""String_Node_Str"").get(0));
  }
  if (params.containsKey(""String_Node_Str"")) {
    position.set(Event.KEY_BATTERY,params.get(""String_Node_Str"").get(0));
  }
  if (params.containsKey(""String_Node_Str"")) {
    position.set(""String_Node_Str"",params.get(""String_Node_Str"").get(0));
  }
  if (channel != null) {
    HttpResponse response=new DefaultHttpResponse(HttpVersion.HTTP_1_1,HttpResponseStatus.OK);
    channel.write(response).addListener(ChannelFutureListener.CLOSE);
  }
  return position;
}","@Override protected Object decode(Channel channel,SocketAddress remoteAddress,Object msg) throws Exception {
  HttpRequest request=(HttpRequest)msg;
  QueryStringDecoder decoder=new QueryStringDecoder(request.getUri());
  Map<String,List<String>> params=decoder.getParameters();
  if (params.isEmpty()) {
    decoder=new QueryStringDecoder(request.getContent().toString(Charset.defaultCharset()),false);
    params=decoder.getParameters();
  }
  Position position=new Position();
  position.setProtocol(getProtocolName());
  String id=params.get(params.containsKey(""String_Node_Str"") ? ""String_Node_Str"" : ""String_Node_Str"").get(0);
  if (!identify(id,channel)) {
    return null;
  }
  position.setDeviceId(getDeviceId());
  position.setValid(true);
  if (params.containsKey(""String_Node_Str"")) {
    try {
      long timestamp=Long.valueOf(params.get(""String_Node_Str"").get(0));
      if (timestamp < Integer.MAX_VALUE) {
        timestamp*=1000;
      }
      position.setTime(new Date(timestamp));
    }
 catch (    NumberFormatException error) {
      DateFormat dateFormat=new SimpleDateFormat(""String_Node_Str"");
      position.setTime(dateFormat.parse(params.get(""String_Node_Str"").get(0)));
    }
  }
 else {
    position.setTime(new Date());
  }
  position.setLatitude(Double.valueOf(params.get(""String_Node_Str"").get(0)));
  position.setLongitude(Double.valueOf(params.get(""String_Node_Str"").get(0)));
  if (params.containsKey(""String_Node_Str"")) {
    position.setSpeed(Double.valueOf(params.get(""String_Node_Str"").get(0)));
  }
  if (params.containsKey(""String_Node_Str"")) {
    position.setCourse(Double.valueOf(params.get(""String_Node_Str"").get(0)));
  }
 else   if (params.containsKey(""String_Node_Str"")) {
    position.setCourse(Double.valueOf(params.get(""String_Node_Str"").get(0)));
  }
  if (params.containsKey(""String_Node_Str"")) {
    position.setAltitude(Double.valueOf(params.get(""String_Node_Str"").get(0)));
  }
  if (params.containsKey(""String_Node_Str"")) {
    position.set(Event.KEY_HDOP,params.get(""String_Node_Str"").get(0));
  }
  if (params.containsKey(""String_Node_Str"")) {
    position.set(""String_Node_Str"",params.get(""String_Node_Str"").get(0));
  }
  if (params.containsKey(""String_Node_Str"")) {
    position.set(""String_Node_Str"",params.get(""String_Node_Str"").get(0));
  }
  if (params.containsKey(""String_Node_Str"")) {
    position.set(Event.KEY_BATTERY,params.get(""String_Node_Str"").get(0));
  }
  if (params.containsKey(""String_Node_Str"")) {
    position.set(""String_Node_Str"",params.get(""String_Node_Str"").get(0));
  }
  if (channel != null) {
    HttpResponse response=new DefaultHttpResponse(HttpVersion.HTTP_1_1,HttpResponseStatus.OK);
    channel.write(response).addListener(ChannelFutureListener.CLOSE);
  }
  return position;
}",0.9711556127135772
156194,"@Test public void testDecode() throws Exception {
  OsmAndProtocolDecoder decoder=new OsmAndProtocolDecoder(new OsmAndProtocol());
  verify(decoder.decode(null,null,new DefaultHttpRequest(HttpVersion.HTTP_1_1,HttpMethod.GET,""String_Node_Str"")));
  verify(decoder.decode(null,null,new DefaultHttpRequest(HttpVersion.HTTP_1_1,HttpMethod.GET,""String_Node_Str"")));
  verify(decoder.decode(null,null,new DefaultHttpRequest(HttpVersion.HTTP_1_1,HttpMethod.GET,""String_Node_Str"")));
  verify(decoder.decode(null,null,new DefaultHttpRequest(HttpVersion.HTTP_1_1,HttpMethod.GET,""String_Node_Str"")));
  verify(decoder.decode(null,null,new DefaultHttpRequest(HttpVersion.HTTP_1_1,HttpMethod.GET,""String_Node_Str"")));
}","@Test public void testDecode() throws Exception {
  OsmAndProtocolDecoder decoder=new OsmAndProtocolDecoder(new OsmAndProtocol());
  verify(decoder.decode(null,null,new DefaultHttpRequest(HttpVersion.HTTP_1_1,HttpMethod.GET,""String_Node_Str"")));
  verify(decoder.decode(null,null,new DefaultHttpRequest(HttpVersion.HTTP_1_1,HttpMethod.GET,""String_Node_Str"")));
  verify(decoder.decode(null,null,new DefaultHttpRequest(HttpVersion.HTTP_1_1,HttpMethod.GET,""String_Node_Str"")));
  verify(decoder.decode(null,null,new DefaultHttpRequest(HttpVersion.HTTP_1_1,HttpMethod.GET,""String_Node_Str"")));
  verify(decoder.decode(null,null,new DefaultHttpRequest(HttpVersion.HTTP_1_1,HttpMethod.GET,""String_Node_Str"")));
  verify(decoder.decode(null,null,new DefaultHttpRequest(HttpVersion.HTTP_1_1,HttpMethod.GET,""String_Node_Str"")));
}",0.9247874427730542
156195,"@Override public void sendCommand(ActiveDevice activeDevice,Command command){
  if (!supportedCommands.contains(command.getType())) {
    throw new RuntimeException(""String_Node_Str"" + command + ""String_Node_Str""+ getName());
  }
  activeDevice.write(command);
}","@Override public void sendCommand(ActiveDevice activeDevice,Command command){
  if (!supportedCommands.contains(command.getType())) {
    throw new RuntimeException(""String_Node_Str"" + command.getType() + ""String_Node_Str""+ getName());
  }
  activeDevice.write(command);
}",0.9812734082397004
156196,"@Override protected Object encodeCommand(Command command){
  String content=""String_Node_Str"";
switch (command.getType()) {
case Command.TYPE_ENGINE_STOP:
    content=""String_Node_Str"";
  break;
case Command.TYPE_ENGINE_RESUME:
content=""String_Node_Str"";
break;
}
int serverFlagBit=0x00;
int commandLength=serverFlagBit + content.length();
int packetLength=0x80 + content.length() + 2+ 2;
ChannelBuffer response=ChannelBuffers.directBuffer(10);
response.writeBytes(new byte[]{0x78,0x78});
response.writeByte(packetLength);
response.writeByte(0x80);
response.writeByte(commandLength);
response.writeByte(serverFlagBit);
response.writeBytes(content.getBytes());
response.writeBytes(new byte[]{0x00,0x02});
response.writeShort(1);
int crc=Crc.crc16Ccitt(response.toByteBuffer(2,response.writerIndex()));
response.writeShort(crc);
response.writeBytes(new byte[]{0x0D,0x0A});
return response;
}","@Override protected Object encodeCommand(Command command){
  String content=""String_Node_Str"";
switch (command.getType()) {
case Command.TYPE_ENGINE_STOP:
    content=""String_Node_Str"";
  break;
case Command.TYPE_ENGINE_RESUME:
content=""String_Node_Str"";
break;
}
int serverFlagBit=0x00;
int commandLength=serverFlagBit + content.length();
int packetLength=0x80 + content.length() + 2+ 2;
ChannelBuffer response=ChannelBuffers.dynamicBuffer();
response.writeBytes(new byte[]{0x78,0x78});
response.writeByte(packetLength);
response.writeByte(0x80);
response.writeByte(commandLength);
response.writeByte(serverFlagBit);
response.writeBytes(content.getBytes());
response.writeBytes(new byte[]{0x00,0x02});
response.writeShort(1);
int crc=Crc.crc16Ccitt(response.toByteBuffer(2,response.writerIndex()));
response.writeShort(crc);
response.writeBytes(new byte[]{0x0D,0x0A});
return response;
}",0.9926842993809792
156197,"private void send(HttpServletRequest req,HttpServletResponse resp) throws Exception {
  Command command=JsonConverter.objectFromJson(req.getReader(),new Command());
  getActiveDevice(command.getDeviceId()).write(command);
  sendResponse(resp.getWriter(),true);
}","private void send(HttpServletRequest req,HttpServletResponse resp) throws Exception {
  Command command=JsonConverter.objectFromJson(req.getReader(),new Command());
  getActiveDevice(command.getDeviceId()).sendCommand(command);
  sendResponse(resp.getWriter(),true);
}",0.969811320754717
156198,"@Override public void handleUpstream(ChannelHandlerContext ctx,ChannelEvent evt) throws Exception {
  if (!(evt instanceof MessageEvent)) {
    ctx.sendUpstream(evt);
    return;
  }
  MessageEvent e=(MessageEvent)evt;
  Object originalMessage=e.getMessage();
  Object decodedMessage=decode(e.getChannel(),e.getRemoteAddress(),originalMessage);
  if (originalMessage == decodedMessage) {
    ctx.sendUpstream(evt);
  }
 else   if (decodedMessage != null) {
    if (decodedMessage instanceof Collection) {
      for (      Object o : (Collection)e.getMessage()) {
        fireMessageReceived(ctx,o,e.getRemoteAddress());
      }
    }
 else {
      fireMessageReceived(ctx,decodedMessage,e.getRemoteAddress());
    }
  }
}","@Override public void handleUpstream(ChannelHandlerContext ctx,ChannelEvent evt) throws Exception {
  if (!(evt instanceof MessageEvent)) {
    ctx.sendUpstream(evt);
    return;
  }
  MessageEvent e=(MessageEvent)evt;
  Object originalMessage=e.getMessage();
  Object decodedMessage=decode(e.getChannel(),e.getRemoteAddress(),originalMessage);
  if (originalMessage == decodedMessage) {
    ctx.sendUpstream(evt);
  }
 else   if (decodedMessage != null) {
    if (decodedMessage instanceof Collection) {
      for (      Object o : (Collection)decodedMessage) {
        fireMessageReceived(ctx,o,e.getRemoteAddress());
      }
    }
 else {
      fireMessageReceived(ctx,decodedMessage,e.getRemoteAddress());
    }
  }
}",0.9805825242718448
156199,"@Override protected Object decode(ChannelHandlerContext ctx,Channel channel,SocketAddress remoteAddress,Object msg) throws Exception {
  ChannelBuffer buf=(ChannelBuffer)msg;
  buf.skipBytes(2);
  buf.readUnsignedShort();
  int version=buf.readUnsignedByte();
  ChannelBuffer id=buf.readBytes(20);
  int type=ChannelBuffers.swapShort(buf.readShort());
  if (type == MSG_HEARTBEAT) {
    if (channel != null) {
      ChannelBuffer response=ChannelBuffers.directBuffer(ByteOrder.LITTLE_ENDIAN,31);
      response.writeByte(0x40);
      response.writeByte(0x40);
      response.writeShort(response.capacity());
      response.writeByte(version);
      response.writeBytes(id);
      response.writeShort(ChannelBuffers.swapShort(MSG_HEARTBEAT_RESPONSE));
      response.writeShort(Crc.crc16Ccitt(response.toByteBuffer(0,response.writerIndex())));
      response.writeByte(0x0D);
      response.writeByte(0x0A);
      channel.write(response,remoteAddress);
    }
  }
 else   if (type == MSG_LOGIN || type == MSG_GPS) {
    Position position=new Position();
    position.setProtocol(getProtocolName());
    if (!identify(id.toString(Charset.defaultCharset()).trim(),channel,remoteAddress)) {
      return null;
    }
 else     if (type == MSG_LOGIN) {
      if (channel != null) {
        ChannelBuffer response=ChannelBuffers.directBuffer(ByteOrder.LITTLE_ENDIAN,41);
        response.writeByte(0x40);
        response.writeByte(0x40);
        response.writeShort(response.capacity());
        response.writeByte(version);
        response.writeBytes(id);
        response.writeShort(ChannelBuffers.swapShort(MSG_LOGIN_RESPONSE));
        response.writeInt(0xFFFFFFFF);
        response.writeShort(0);
        response.writeInt((int)(new Date().getTime() / 1000));
        response.writeShort(Crc.crc16Ccitt(response.toByteBuffer(0,response.writerIndex())));
        response.writeByte(0x0D);
        response.writeByte(0x0A);
        channel.write(response,remoteAddress);
      }
    }
    position.setDeviceId(getDeviceId());
    if (type == MSG_GPS) {
      buf.readUnsignedByte();
    }
    buf.readUnsignedInt();
    buf.readUnsignedInt();
    position.set(Event.KEY_ODOMETER,buf.readUnsignedInt());
    buf.readUnsignedInt();
    buf.readUnsignedInt();
    buf.readUnsignedShort();
    position.set(Event.KEY_STATUS,buf.readUnsignedInt());
    buf.skipBytes(8);
    buf.readUnsignedByte();
    Calendar time=Calendar.getInstance(TimeZone.getTimeZone(""String_Node_Str""));
    time.clear();
    time.set(Calendar.DAY_OF_MONTH,buf.readUnsignedByte());
    time.set(Calendar.MONTH,buf.readUnsignedByte() - 1);
    time.set(Calendar.YEAR,2000 + buf.readUnsignedByte());
    time.set(Calendar.HOUR_OF_DAY,buf.readUnsignedByte());
    time.set(Calendar.MINUTE,buf.readUnsignedByte());
    time.set(Calendar.SECOND,buf.readUnsignedByte());
    position.setTime(time.getTime());
    double lat=buf.readUnsignedInt() / 3600000.0;
    double lon=buf.readUnsignedInt() / 3600000.0;
    position.setSpeed(UnitsConverter.knotsFromKph(buf.readUnsignedShort()));
    position.setCourse(buf.readUnsignedShort() % 360);
    int flags=buf.readUnsignedByte();
    position.setLatitude((flags & 0x01) == 0 ? -lat : lat);
    position.setLongitude((flags & 0x02) == 0 ? -lon : lon);
    position.setValid((flags & 0x0C) > 0);
    position.set(Event.KEY_SATELLITES,flags >> 4);
    return position;
  }
  return null;
}","@Override protected Object decode(ChannelHandlerContext ctx,Channel channel,SocketAddress remoteAddress,Object msg) throws Exception {
  ChannelBuffer buf=(ChannelBuffer)msg;
  buf.skipBytes(2);
  buf.readUnsignedShort();
  int version=buf.readUnsignedByte();
  ChannelBuffer id=buf.readBytes(20);
  int type=ChannelBuffers.swapShort(buf.readShort());
  if (type == MSG_HEARTBEAT) {
    if (channel != null) {
      ChannelBuffer response=ChannelBuffers.directBuffer(ByteOrder.LITTLE_ENDIAN,31);
      response.writeByte(0x40);
      response.writeByte(0x40);
      response.writeShort(response.capacity());
      response.writeByte(version);
      response.writeBytes(id);
      response.writeShort(ChannelBuffers.swapShort(MSG_HEARTBEAT_RESPONSE));
      response.writeShort(Crc.crc16Ccitt(response.toByteBuffer(0,response.writerIndex())));
      response.writeByte(0x0D);
      response.writeByte(0x0A);
      channel.write(response,remoteAddress);
    }
  }
 else   if (type == MSG_LOGIN || type == MSG_GPS) {
    Position position=new Position();
    position.setProtocol(getProtocolName());
    if (!identify(id.toString(Charset.defaultCharset()).trim(),channel,remoteAddress)) {
      return null;
    }
 else     if (type == MSG_LOGIN) {
      if (channel != null) {
        ChannelBuffer response=ChannelBuffers.directBuffer(ByteOrder.LITTLE_ENDIAN,41);
        response.writeByte(0x40);
        response.writeByte(0x40);
        response.writeShort(response.capacity());
        response.writeByte(version);
        response.writeBytes(id);
        response.writeShort(ChannelBuffers.swapShort(MSG_LOGIN_RESPONSE));
        response.writeInt(0xFFFFFFFF);
        response.writeShort(0);
        response.writeInt((int)(new Date().getTime() / 1000));
        response.writeShort(Crc.crc16Ccitt(response.toByteBuffer(0,response.writerIndex())));
        response.writeByte(0x0D);
        response.writeByte(0x0A);
        channel.write(response,remoteAddress);
      }
    }
    position.setDeviceId(getDeviceId());
    if (type == MSG_GPS) {
      buf.readUnsignedByte();
    }
    buf.readUnsignedInt();
    buf.readUnsignedInt();
    position.set(Event.KEY_ODOMETER,buf.readUnsignedInt());
    buf.readUnsignedInt();
    buf.readUnsignedInt();
    buf.readUnsignedShort();
    position.set(Event.KEY_STATUS,buf.readUnsignedInt());
    buf.skipBytes(8);
    buf.readUnsignedByte();
    Calendar time=Calendar.getInstance(TimeZone.getTimeZone(""String_Node_Str""));
    time.clear();
    time.set(Calendar.DAY_OF_MONTH,buf.readUnsignedByte());
    time.set(Calendar.MONTH,buf.readUnsignedByte() - 1);
    time.set(Calendar.YEAR,2000 + buf.readUnsignedByte());
    time.set(Calendar.HOUR_OF_DAY,buf.readUnsignedByte());
    time.set(Calendar.MINUTE,buf.readUnsignedByte());
    time.set(Calendar.SECOND,buf.readUnsignedByte());
    position.setTime(time.getTime());
    double lat=buf.readUnsignedInt() / 3600000.0;
    double lon=buf.readUnsignedInt() / 3600000.0;
    position.setSpeed(UnitsConverter.knotsFromKph(buf.readUnsignedShort()));
    position.setCourse(buf.readUnsignedShort() % 360);
    int flags=buf.readUnsignedByte();
    position.setLatitude((flags & 0x02) == 0 ? -lat : lat);
    position.setLongitude((flags & 0x01) == 0 ? -lon : lon);
    position.setValid((flags & 0x0C) > 0);
    position.set(Event.KEY_SATELLITES,flags >> 4);
    return position;
  }
  return null;
}",0.9994114184814596
156200,"private QueryBuilder(DataSource dataSource,String query,boolean returnGeneratedKeys) throws SQLException {
  indexMap=new HashMap<String,List<Integer>>();
  connection=dataSource.getConnection();
  this.query=query;
  if (query != null) {
    String parsedQuery=parse(query.trim(),indexMap);
    try {
      if (returnGeneratedKeys) {
        statement=connection.prepareStatement(parsedQuery,Statement.RETURN_GENERATED_KEYS);
      }
 else {
        statement=connection.prepareStatement(parsedQuery);
      }
    }
 catch (    SQLException error) {
      connection.close();
      throw error;
    }
  }
}","private QueryBuilder(DataSource dataSource,String query,boolean returnGeneratedKeys) throws SQLException {
  indexMap=new HashMap<String,List<Integer>>();
  connection=dataSource.getConnection();
  this.query=query;
  this.returnGeneratedKeys=returnGeneratedKeys;
  if (query != null) {
    String parsedQuery=parse(query.trim(),indexMap);
    try {
      if (returnGeneratedKeys) {
        statement=connection.prepareStatement(parsedQuery,Statement.RETURN_GENERATED_KEYS);
      }
 else {
        statement=connection.prepareStatement(parsedQuery);
      }
    }
 catch (    SQLException error) {
      connection.close();
      throw error;
    }
  }
}",0.9619651347068146
156201,"public long executeUpdate() throws SQLException {
  if (query != null) {
    try {
      statement.executeUpdate();
      ResultSet resultSet=statement.getGeneratedKeys();
      if (resultSet.next()) {
        return resultSet.getLong(1);
      }
    }
  finally {
      statement.close();
      connection.close();
    }
  }
  return 0;
}","public long executeUpdate() throws SQLException {
  if (query != null) {
    try {
      statement.executeUpdate();
      if (returnGeneratedKeys) {
        ResultSet resultSet=statement.getGeneratedKeys();
        if (resultSet.next()) {
          return resultSet.getLong(1);
        }
      }
    }
  finally {
      statement.close();
      connection.close();
    }
  }
  return 0;
}",0.8308115543328748
156202,"@Override protected final void service(HttpServletRequest req,HttpServletResponse resp) throws ServletException, IOException {
  String command=req.getPathInfo();
  try {
    if (command == null || !handle(command,req,resp)) {
      resp.sendError(HttpServletResponse.SC_BAD_REQUEST);
    }
  }
 catch (  Exception error) {
    sendResponse(resp.getWriter(),error);
  }
}","@Override protected final void service(HttpServletRequest req,HttpServletResponse resp) throws ServletException, IOException {
  String command=req.getPathInfo();
  if (command == null) {
    command=""String_Node_Str"";
  }
  try {
    if (!handle(command,req,resp)) {
      resp.sendError(HttpServletResponse.SC_BAD_REQUEST);
    }
  }
 catch (  Exception error) {
    sendResponse(resp.getWriter(),error);
  }
}",0.9118773946360154
156203,"@Override protected Object decode(ChannelHandlerContext ctx,Channel channel,SocketAddress remoteAddress,Object msg) throws Exception {
  String sentence=(String)msg;
  Matcher parser=heartbeatPattern.matcher(sentence);
  if (parser.matches()) {
    if (channel != null) {
      channel.write(""String_Node_Str"" + parser.group(1) + ""String_Node_Str""+ parser.group(2)+ ""String_Node_Str"",remoteAddress);
    }
    return null;
  }
  parser=pattern.matcher(sentence);
  if (!parser.matches()) {
    return null;
  }
  Position position=new Position();
  position.setProtocol(getProtocol());
  Integer index=1;
  if (!identify(parser.group(index++))) {
    return null;
  }
  position.setDeviceId(getDeviceId());
  position.setValid(Integer.valueOf(parser.group(index++)) < 20);
  String speed=parser.group(index++);
  if (speed != null) {
    position.setSpeed(Double.valueOf(speed));
  }
  String course=parser.group(index++);
  if (speed != null) {
    position.setCourse(Double.valueOf(course));
  }
  String altitude=parser.group(index++);
  if (speed != null) {
    position.setAltitude(Double.valueOf(altitude));
  }
  position.setLongitude(Double.valueOf(parser.group(index++)));
  position.setLatitude(Double.valueOf(parser.group(index++)));
  Calendar time=Calendar.getInstance(TimeZone.getTimeZone(""String_Node_Str""));
  time.clear();
  time.set(Calendar.YEAR,Integer.valueOf(parser.group(index++)));
  time.set(Calendar.MONTH,Integer.valueOf(parser.group(index++)) - 1);
  time.set(Calendar.DAY_OF_MONTH,Integer.valueOf(parser.group(index++)));
  time.set(Calendar.HOUR_OF_DAY,Integer.valueOf(parser.group(index++)));
  time.set(Calendar.MINUTE,Integer.valueOf(parser.group(index++)));
  time.set(Calendar.SECOND,Integer.valueOf(parser.group(index++)));
  position.setTime(time.getTime());
  position.set(Event.KEY_MCC,parser.group(index++));
  position.set(Event.KEY_MNC,parser.group(index++));
  position.set(Event.KEY_LAC,parser.group(index++));
  position.set(Event.KEY_CELL,parser.group(index++));
  String odometer=parser.group(index++);
  if (odometer != null && Double.valueOf(odometer) != 0) {
    position.set(Event.KEY_ODOMETER,odometer);
  }
  position.set(Event.KEY_BATTERY,parser.group(index++));
  if (Boolean.valueOf(Context.getProps().getProperty(getProtocol() + ""String_Node_Str"")) && channel != null) {
    channel.write(""String_Node_Str"" + parser.group(index++) + ""String_Node_Str"",remoteAddress);
  }
  return position;
}","@Override protected Object decode(ChannelHandlerContext ctx,Channel channel,SocketAddress remoteAddress,Object msg) throws Exception {
  String sentence=(String)msg;
  Matcher parser=heartbeatPattern.matcher(sentence);
  if (parser.matches()) {
    if (channel != null) {
      channel.write(""String_Node_Str"" + parser.group(1) + ""String_Node_Str""+ parser.group(2)+ ""String_Node_Str"",remoteAddress);
    }
    return null;
  }
  parser=pattern.matcher(sentence);
  if (!parser.matches()) {
    return null;
  }
  Position position=new Position();
  position.setProtocol(getProtocol());
  Integer index=1;
  if (!identify(parser.group(index++))) {
    return null;
  }
  position.setDeviceId(getDeviceId());
  position.setValid(Integer.valueOf(parser.group(index++)) < 20);
  String speed=parser.group(index++);
  if (speed != null) {
    position.setSpeed(UnitsConverter.knotsFromKph(Double.valueOf(speed)));
  }
  String course=parser.group(index++);
  if (speed != null) {
    position.setCourse(Double.valueOf(course));
  }
  String altitude=parser.group(index++);
  if (speed != null) {
    position.setAltitude(Double.valueOf(altitude));
  }
  position.setLongitude(Double.valueOf(parser.group(index++)));
  position.setLatitude(Double.valueOf(parser.group(index++)));
  Calendar time=Calendar.getInstance(TimeZone.getTimeZone(""String_Node_Str""));
  time.clear();
  time.set(Calendar.YEAR,Integer.valueOf(parser.group(index++)));
  time.set(Calendar.MONTH,Integer.valueOf(parser.group(index++)) - 1);
  time.set(Calendar.DAY_OF_MONTH,Integer.valueOf(parser.group(index++)));
  time.set(Calendar.HOUR_OF_DAY,Integer.valueOf(parser.group(index++)));
  time.set(Calendar.MINUTE,Integer.valueOf(parser.group(index++)));
  time.set(Calendar.SECOND,Integer.valueOf(parser.group(index++)));
  position.setTime(time.getTime());
  position.set(Event.KEY_MCC,parser.group(index++));
  position.set(Event.KEY_MNC,parser.group(index++));
  position.set(Event.KEY_LAC,parser.group(index++));
  position.set(Event.KEY_CELL,parser.group(index++));
  String odometer=parser.group(index++);
  if (odometer != null && Double.valueOf(odometer) != 0) {
    position.set(Event.KEY_ODOMETER,odometer);
  }
  position.set(Event.KEY_BATTERY,parser.group(index++));
  if (Boolean.valueOf(Context.getProps().getProperty(getProtocol() + ""String_Node_Str"")) && channel != null) {
    channel.write(""String_Node_Str"" + parser.group(index++) + ""String_Node_Str"",remoteAddress);
  }
  return position;
}",0.9941116751269036
156204,"@Test public void testDecode() throws Exception {
  Gl200ProtocolDecoder decoder=new Gl200ProtocolDecoder(null);
  verify(decoder.decode(null,null,null,""String_Node_Str""));
  verify(decoder.decode(null,null,null,""String_Node_Str""));
  assertNull(decoder.decode(null,null,null,""String_Node_Str""));
  verify(decoder.decode(null,null,null,""String_Node_Str""));
  verify(decoder.decode(null,null,null,""String_Node_Str""));
  verify(decoder.decode(null,null,null,""String_Node_Str""));
  verify(decoder.decode(null,null,null,""String_Node_Str""));
  verify(decoder.decode(null,null,null,""String_Node_Str""));
  verify(decoder.decode(null,null,null,""String_Node_Str""));
  verify(decoder.decode(null,null,null,""String_Node_Str""));
  verify(decoder.decode(null,null,null,""String_Node_Str""));
  verify(decoder.decode(null,null,null,""String_Node_Str""));
  verify(decoder.decode(null,null,null,""String_Node_Str""));
  verify(decoder.decode(null,null,null,""String_Node_Str""));
  verify(decoder.decode(null,null,null,""String_Node_Str""));
  verify(decoder.decode(null,null,null,""String_Node_Str""));
  verify(decoder.decode(null,null,null,""String_Node_Str""));
  verify(decoder.decode(null,null,null,""String_Node_Str""));
  verify(decoder.decode(null,null,null,""String_Node_Str""));
  verify(decoder.decode(null,null,null,""String_Node_Str""));
  verify(decoder.decode(null,null,null,""String_Node_Str""));
  verify(decoder.decode(null,null,null,""String_Node_Str""));
  verify(decoder.decode(null,null,null,""String_Node_Str""));
  verify(decoder.decode(null,null,null,""String_Node_Str""));
  verify(decoder.decode(null,null,null,""String_Node_Str""));
  verify(decoder.decode(null,null,null,""String_Node_Str""));
  verify(decoder.decode(null,null,null,""String_Node_Str""));
  verify(decoder.decode(null,null,null,""String_Node_Str""));
  verify(decoder.decode(null,null,null,""String_Node_Str""));
  verify(decoder.decode(null,null,null,""String_Node_Str""));
  verify(decoder.decode(null,null,null,""String_Node_Str""));
  verify(decoder.decode(null,null,null,""String_Node_Str""));
  assertNull(decoder.decode(null,null,null,""String_Node_Str""));
  verify(decoder.decode(null,null,null,""String_Node_Str""));
  verify(decoder.decode(null,null,null,""String_Node_Str""));
  verify(decoder.decode(null,null,null,""String_Node_Str""));
  assertNull(decoder.decode(null,null,null,""String_Node_Str""));
}","@Test public void testDecode() throws Exception {
  Gl200ProtocolDecoder decoder=new Gl200ProtocolDecoder(null);
  verify(decoder.decode(null,null,null,""String_Node_Str""));
  verify(decoder.decode(null,null,null,""String_Node_Str""));
  verify(decoder.decode(null,null,null,""String_Node_Str""));
  assertNull(decoder.decode(null,null,null,""String_Node_Str""));
  verify(decoder.decode(null,null,null,""String_Node_Str""));
  verify(decoder.decode(null,null,null,""String_Node_Str""));
  verify(decoder.decode(null,null,null,""String_Node_Str""));
  verify(decoder.decode(null,null,null,""String_Node_Str""));
  verify(decoder.decode(null,null,null,""String_Node_Str""));
  verify(decoder.decode(null,null,null,""String_Node_Str""));
  verify(decoder.decode(null,null,null,""String_Node_Str""));
  verify(decoder.decode(null,null,null,""String_Node_Str""));
  verify(decoder.decode(null,null,null,""String_Node_Str""));
  verify(decoder.decode(null,null,null,""String_Node_Str""));
  verify(decoder.decode(null,null,null,""String_Node_Str""));
  verify(decoder.decode(null,null,null,""String_Node_Str""));
  verify(decoder.decode(null,null,null,""String_Node_Str""));
  verify(decoder.decode(null,null,null,""String_Node_Str""));
  verify(decoder.decode(null,null,null,""String_Node_Str""));
  verify(decoder.decode(null,null,null,""String_Node_Str""));
  verify(decoder.decode(null,null,null,""String_Node_Str""));
  verify(decoder.decode(null,null,null,""String_Node_Str""));
  verify(decoder.decode(null,null,null,""String_Node_Str""));
  verify(decoder.decode(null,null,null,""String_Node_Str""));
  verify(decoder.decode(null,null,null,""String_Node_Str""));
  verify(decoder.decode(null,null,null,""String_Node_Str""));
  verify(decoder.decode(null,null,null,""String_Node_Str""));
  verify(decoder.decode(null,null,null,""String_Node_Str""));
  verify(decoder.decode(null,null,null,""String_Node_Str""));
  verify(decoder.decode(null,null,null,""String_Node_Str""));
  verify(decoder.decode(null,null,null,""String_Node_Str""));
  verify(decoder.decode(null,null,null,""String_Node_Str""));
  verify(decoder.decode(null,null,null,""String_Node_Str""));
  assertNull(decoder.decode(null,null,null,""String_Node_Str""));
  verify(decoder.decode(null,null,null,""String_Node_Str""));
  verify(decoder.decode(null,null,null,""String_Node_Str""));
  verify(decoder.decode(null,null,null,""String_Node_Str""));
  assertNull(decoder.decode(null,null,null,""String_Node_Str""));
}",0.9873737373737372
156205,"public void addUser(User user) throws SQLException {
  user.setId(QueryBuilder.create(dataSource,getQuery(""String_Node_Str"")).setObject(user).executeUpdate());
  Context.getPermissionsManager().refresh();
}","public void addUser(User user) throws SQLException {
  user.setId(QueryBuilder.create(dataSource,getQuery(""String_Node_Str""),true).setObject(user).executeUpdate());
  Context.getPermissionsManager().refresh();
}",0.988009592326139
156206,"public void addPosition(Position position) throws SQLException {
  position.setId(QueryBuilder.create(dataSource,getQuery(""String_Node_Str"")).setObject(position).setDate(""String_Node_Str"",position.getFixTime()).setLong(""String_Node_Str"",position.getDeviceId()).setLong(""String_Node_Str"",0).setString(""String_Node_Str"",position.getOther()).executeUpdate());
}","public void addPosition(Position position) throws SQLException {
  position.setId(QueryBuilder.create(dataSource,getQuery(""String_Node_Str""),true).setObject(position).setDate(""String_Node_Str"",position.getFixTime()).setLong(""String_Node_Str"",position.getDeviceId()).setLong(""String_Node_Str"",0).setString(""String_Node_Str"",position.getOther()).executeUpdate());
}",0.9930651872399444
156207,"public void addDevice(Device device) throws SQLException {
  device.setId(QueryBuilder.create(dataSource,getQuery(""String_Node_Str"")).setObject(device).executeUpdate());
}","public void addDevice(Device device) throws SQLException {
  device.setId(QueryBuilder.create(dataSource,getQuery(""String_Node_Str""),true).setObject(device).executeUpdate());
}",0.9855907780979828
156208,"private QueryBuilder(DataSource dataSource,String query) throws SQLException {
  indexMap=new HashMap<String,List<Integer>>();
  connection=dataSource.getConnection();
  this.query=query;
  if (query != null) {
    String parsedQuery=parse(query,indexMap);
    try {
      statement=connection.prepareStatement(parsedQuery,Statement.RETURN_GENERATED_KEYS);
    }
 catch (    SQLException error) {
      connection.close();
      throw error;
    }
  }
}","private QueryBuilder(DataSource dataSource,String query,boolean returnGeneratedKeys) throws SQLException {
  indexMap=new HashMap<String,List<Integer>>();
  connection=dataSource.getConnection();
  this.query=query;
  if (query != null) {
    String parsedQuery=parse(query.trim(),indexMap);
    try {
      if (returnGeneratedKeys) {
        statement=connection.prepareStatement(parsedQuery,Statement.RETURN_GENERATED_KEYS);
      }
 else {
        statement=connection.prepareStatement(parsedQuery);
      }
    }
 catch (    SQLException error) {
      connection.close();
      throw error;
    }
  }
}",0.8547169811320755
156209,"public static QueryBuilder create(DataSource dataSource,String query) throws SQLException {
  return new QueryBuilder(dataSource,query);
}","public static QueryBuilder create(DataSource dataSource,String query,boolean returnGeneratedKeys) throws SQLException {
  return new QueryBuilder(dataSource,query,returnGeneratedKeys);
}",0.8518518518518519
156210,"private void update(HttpServletRequest req,HttpServletResponse resp) throws Exception {
  User user=JsonConverter.objectFromJson(req.getReader(),new User());
  Context.getPermissionsManager().checkUser(getUserId(req),user.getId());
  Context.getDataManager().updateUser(user);
  sendResponse(resp.getWriter(),true);
}","private void update(HttpServletRequest req,HttpServletResponse resp) throws Exception {
  User user=JsonConverter.objectFromJson(req.getReader(),new User());
  if (user.getAdmin()) {
    Context.getPermissionsManager().checkAdmin(getUserId(req));
  }
 else {
    Context.getPermissionsManager().checkUser(getUserId(req),user.getId());
  }
  Context.getDataManager().updateUser(user);
  sendResponse(resp.getWriter(),true);
}",0.844804318488529
156211,"private void createDatabaseSchema() throws SQLException {
  Connection connection=dataSource.getConnection();
  ResultSet result=connection.getMetaData().getTables(connection.getCatalog(),null,null,null);
  boolean exist=false;
  while (result.next()) {
    if (result.getString(""String_Node_Str"").equalsIgnoreCase(""String_Node_Str"")) {
      exist=true;
      break;
    }
  }
  if (exist) {
    return;
  }
  QueryBuilder.create(dataSource,properties.getProperty(""String_Node_Str"")).executeUpdate();
  User admin=new User();
  admin.setName(""String_Node_Str"");
  admin.setEmail(""String_Node_Str"");
  admin.setPassword(""String_Node_Str"");
  admin.setAdmin(true);
  addUser(admin);
  Server server=new Server();
  server.setRegistration(true);
  QueryBuilder.create(dataSource,properties.getProperty(""String_Node_Str"")).setObject(server).executeUpdate();
  mockData(admin.getId());
}","private void createDatabaseSchema() throws SQLException {
  Connection connection=dataSource.getConnection();
  ResultSet result=connection.getMetaData().getTables(connection.getCatalog(),null,null,null);
  boolean exist=false;
  while (result.next()) {
    if (result.getString(""String_Node_Str"").equalsIgnoreCase(""String_Node_Str"")) {
      exist=true;
      break;
    }
  }
  if (exist) {
    return;
  }
  QueryBuilder.create(dataSource,properties.getProperty(""String_Node_Str"")).executeUpdate();
  User admin=new User();
  admin.setName(""String_Node_Str"");
  admin.setEmail(""String_Node_Str"");
  admin.setPassword(""String_Node_Str"");
  admin.setAdmin(true);
  QueryBuilder.create(dataSource,properties.getProperty(""String_Node_Str"")).setObject(admin).executeUpdate();
  Server server=new Server();
  server.setRegistration(true);
  QueryBuilder.create(dataSource,properties.getProperty(""String_Node_Str"")).setObject(server).executeUpdate();
  mockData(admin.getId());
}",0.8643702906350915
156212,"public void checkDevice(long userId,long deviceId) throws SecurityException {
  if (getNotNull(userId).contains(deviceId)) {
    throw new SecurityException(""String_Node_Str"");
  }
}","public void checkDevice(long userId,long deviceId) throws SecurityException {
  if (!getNotNull(userId).contains(deviceId)) {
    throw new SecurityException(""String_Node_Str"");
  }
}",0.9972602739726028
156213,"public <T extends Factory>Collection<T> executeQuery(T prototype) throws SQLException {
  List<T> result=new LinkedList<T>();
  try {
    ResultSet resultSet=statement.executeQuery();
    try {
      ResultSetMetaData resultMetaData=resultSet.getMetaData();
      List<ResultSetProcessor<T>> processors=new LinkedList<ResultSetProcessor<T>>();
      Method[] methods=prototype.getClass().getMethods();
      for (      final Method method : methods) {
        if (method.getName().startsWith(""String_Node_Str"") && method.getParameterTypes().length == 1) {
          final String name=method.getName().substring(3);
          boolean column=false;
          for (int i=1; i <= resultMetaData.getColumnCount(); i++) {
            if (name.equalsIgnoreCase(resultMetaData.getColumnName(i))) {
              column=true;
              break;
            }
          }
          if (!column) {
            continue;
          }
          Class<?> parameterType=method.getParameterTypes()[0];
          if (parameterType.equals(boolean.class)) {
            processors.add(new ResultSetProcessor<T>(){
              @Override public void process(              T object,              ResultSet resultSet) throws SQLException {
                try {
                  method.invoke(object,resultSet.getBoolean(name));
                }
 catch (                IllegalAccessException error) {
                }
catch (                InvocationTargetException error) {
                }
              }
            }
);
          }
 else           if (parameterType.equals(int.class)) {
            processors.add(new ResultSetProcessor<T>(){
              @Override public void process(              T object,              ResultSet resultSet) throws SQLException {
                try {
                  method.invoke(object,resultSet.getInt(name));
                }
 catch (                IllegalAccessException error) {
                }
catch (                InvocationTargetException error) {
                }
              }
            }
);
          }
 else           if (parameterType.equals(long.class)) {
            processors.add(new ResultSetProcessor<T>(){
              @Override public void process(              T object,              ResultSet resultSet) throws SQLException {
                try {
                  method.invoke(object,resultSet.getLong(name));
                }
 catch (                IllegalAccessException error) {
                }
catch (                InvocationTargetException error) {
                }
              }
            }
);
          }
 else           if (parameterType.equals(double.class)) {
            processors.add(new ResultSetProcessor<T>(){
              @Override public void process(              T object,              ResultSet resultSet) throws SQLException {
                try {
                  method.invoke(object,resultSet.getDouble(name));
                }
 catch (                IllegalAccessException error) {
                }
catch (                InvocationTargetException error) {
                }
              }
            }
);
          }
 else           if (parameterType.equals(String.class)) {
            processors.add(new ResultSetProcessor<T>(){
              @Override public void process(              T object,              ResultSet resultSet) throws SQLException {
                try {
                  method.invoke(object,resultSet.getString(name));
                }
 catch (                IllegalAccessException error) {
                }
catch (                InvocationTargetException error) {
                }
              }
            }
);
          }
 else           if (parameterType.equals(Date.class)) {
            processors.add(new ResultSetProcessor<T>(){
              @Override public void process(              T object,              ResultSet resultSet) throws SQLException {
                try {
                  method.invoke(object,new Date(resultSet.getTimestamp(name).getTime()));
                }
 catch (                IllegalAccessException error) {
                }
catch (                InvocationTargetException error) {
                }
              }
            }
);
          }
        }
      }
      while (resultSet.next()) {
        T object=(T)prototype.create();
        for (        ResultSetProcessor<T> processor : processors) {
          processor.process(object,resultSet);
        }
        result.add(object);
      }
    }
  finally {
      resultSet.close();
    }
  }
  finally {
    statement.close();
    connection.close();
  }
  return result;
}","public <T extends Factory>Collection<T> executeQuery(T prototype) throws SQLException {
  List<T> result=new LinkedList<T>();
  try {
    ResultSet resultSet=statement.executeQuery();
    try {
      ResultSetMetaData resultMetaData=resultSet.getMetaData();
      List<ResultSetProcessor<T>> processors=new LinkedList<ResultSetProcessor<T>>();
      Method[] methods=prototype.getClass().getMethods();
      for (      final Method method : methods) {
        if (method.getName().startsWith(""String_Node_Str"") && method.getParameterTypes().length == 1) {
          final String name=method.getName().substring(3);
          boolean column=false;
          for (int i=1; i <= resultMetaData.getColumnCount(); i++) {
            if (name.equalsIgnoreCase(resultMetaData.getColumnLabel(i))) {
              column=true;
              break;
            }
          }
          if (!column) {
            continue;
          }
          Class<?> parameterType=method.getParameterTypes()[0];
          if (parameterType.equals(boolean.class)) {
            processors.add(new ResultSetProcessor<T>(){
              @Override public void process(              T object,              ResultSet resultSet) throws SQLException {
                try {
                  method.invoke(object,resultSet.getBoolean(name));
                }
 catch (                IllegalAccessException error) {
                }
catch (                InvocationTargetException error) {
                }
              }
            }
);
          }
 else           if (parameterType.equals(int.class)) {
            processors.add(new ResultSetProcessor<T>(){
              @Override public void process(              T object,              ResultSet resultSet) throws SQLException {
                try {
                  method.invoke(object,resultSet.getInt(name));
                }
 catch (                IllegalAccessException error) {
                }
catch (                InvocationTargetException error) {
                }
              }
            }
);
          }
 else           if (parameterType.equals(long.class)) {
            processors.add(new ResultSetProcessor<T>(){
              @Override public void process(              T object,              ResultSet resultSet) throws SQLException {
                try {
                  method.invoke(object,resultSet.getLong(name));
                }
 catch (                IllegalAccessException error) {
                }
catch (                InvocationTargetException error) {
                }
              }
            }
);
          }
 else           if (parameterType.equals(double.class)) {
            processors.add(new ResultSetProcessor<T>(){
              @Override public void process(              T object,              ResultSet resultSet) throws SQLException {
                try {
                  method.invoke(object,resultSet.getDouble(name));
                }
 catch (                IllegalAccessException error) {
                }
catch (                InvocationTargetException error) {
                }
              }
            }
);
          }
 else           if (parameterType.equals(String.class)) {
            processors.add(new ResultSetProcessor<T>(){
              @Override public void process(              T object,              ResultSet resultSet) throws SQLException {
                try {
                  method.invoke(object,resultSet.getString(name));
                }
 catch (                IllegalAccessException error) {
                }
catch (                InvocationTargetException error) {
                }
              }
            }
);
          }
 else           if (parameterType.equals(Date.class)) {
            processors.add(new ResultSetProcessor<T>(){
              @Override public void process(              T object,              ResultSet resultSet) throws SQLException {
                try {
                  method.invoke(object,new Date(resultSet.getTimestamp(name).getTime()));
                }
 catch (                IllegalAccessException error) {
                }
catch (                InvocationTargetException error) {
                }
              }
            }
);
          }
        }
      }
      while (resultSet.next()) {
        T object=(T)prototype.create();
        for (        ResultSetProcessor<T> processor : processors) {
          processor.process(object,resultSet);
        }
        result.add(object);
      }
    }
  finally {
      resultSet.close();
    }
  }
  finally {
    statement.close();
    connection.close();
  }
  return result;
}",0.9990262901655308
156214,"@Override protected Object decode(ChannelHandlerContext ctx,Channel channel,SocketAddress remoteAddress,Object msg) throws Exception {
  ChannelBuffer buf=(ChannelBuffer)msg;
  buf.skipBytes(2);
  buf.readUnsignedShort();
  int version=buf.readUnsignedByte();
  ChannelBuffer id=buf.readBytes(20);
  int type=ChannelBuffers.swapShort(buf.readShort());
  if (type == MSG_HEARTBEAT) {
    if (channel != null) {
      ChannelBuffer response=ChannelBuffers.directBuffer(ByteOrder.LITTLE_ENDIAN,31);
      response.writeByte(0x40);
      response.writeByte(0x40);
      response.writeShort(response.capacity());
      response.writeByte(version);
      response.writeBytes(id);
      response.writeShort(ChannelBuffers.swapShort(MSG_HEARTBEAT_RESPONSE));
      response.writeShort(Crc.crc16Ccitt(response.toByteBuffer(0,response.writerIndex())));
      response.writeByte(0x0D);
      response.writeByte(0x0A);
      channel.write(response,remoteAddress);
    }
  }
 else   if (type == MSG_LOGIN || type == MSG_GPS) {
    Position position=new Position();
    position.setDeviceId(getDeviceId());
    position.setProtocol(getProtocol());
    if (!identify(id.toString(Charset.defaultCharset()))) {
      return null;
    }
 else     if (type == MSG_LOGIN) {
      if (channel == null) {
        ChannelBuffer response=ChannelBuffers.directBuffer(ByteOrder.LITTLE_ENDIAN,41);
        response.writeByte(0x40);
        response.writeByte(0x40);
        response.writeShort(response.capacity());
        response.writeByte(version);
        response.writeBytes(id);
        response.writeShort(ChannelBuffers.swapShort(MSG_LOGIN_RESPONSE));
        response.writeInt(0xFFFFFFFF);
        response.writeShort(0);
        response.writeInt((int)(new Date().getTime() / 1000));
        response.writeShort(Crc.crc16Ccitt(response.toByteBuffer(0,response.writerIndex())));
        response.writeByte(0x0D);
        response.writeByte(0x0A);
        channel.write(response,remoteAddress);
      }
    }
    if (type == MSG_GPS) {
      buf.readUnsignedByte();
    }
    buf.readUnsignedInt();
    buf.readUnsignedInt();
    position.set(Event.KEY_ODOMETER,buf.readUnsignedInt());
    buf.readUnsignedInt();
    buf.readUnsignedInt();
    buf.readUnsignedShort();
    position.set(Event.KEY_STATUS,buf.readUnsignedInt());
    buf.skipBytes(8);
    buf.readUnsignedByte();
    Calendar time=Calendar.getInstance(TimeZone.getTimeZone(""String_Node_Str""));
    time.clear();
    time.set(Calendar.DAY_OF_MONTH,buf.readUnsignedByte());
    time.set(Calendar.MONTH,buf.readUnsignedByte() - 1);
    time.set(Calendar.YEAR,2000 + buf.readUnsignedByte());
    time.set(Calendar.HOUR_OF_DAY,buf.readUnsignedByte());
    time.set(Calendar.MINUTE,buf.readUnsignedByte());
    time.set(Calendar.SECOND,buf.readUnsignedByte());
    position.setTime(time.getTime());
    double lat=buf.readUnsignedInt() / 3600000.0;
    double lon=buf.readUnsignedInt() / 3600000.0;
    position.setSpeed(UnitsConverter.knotsFromKph(buf.readUnsignedShort()));
    position.setCourse(buf.readUnsignedShort());
    int flags=buf.readUnsignedByte();
    position.setLatitude((flags & 0x01) == 0 ? -lat : lat);
    position.setLongitude((flags & 0x02) == 0 ? -lon : lon);
    position.setValid((flags & 0x0C) > 0);
    position.set(Event.KEY_SATELLITES,flags >> 4);
    return position;
  }
  return null;
}","@Override protected Object decode(ChannelHandlerContext ctx,Channel channel,SocketAddress remoteAddress,Object msg) throws Exception {
  ChannelBuffer buf=(ChannelBuffer)msg;
  buf.skipBytes(2);
  buf.readUnsignedShort();
  int version=buf.readUnsignedByte();
  ChannelBuffer id=buf.readBytes(20);
  int type=ChannelBuffers.swapShort(buf.readShort());
  if (type == MSG_HEARTBEAT) {
    if (channel != null) {
      ChannelBuffer response=ChannelBuffers.directBuffer(ByteOrder.LITTLE_ENDIAN,31);
      response.writeByte(0x40);
      response.writeByte(0x40);
      response.writeShort(response.capacity());
      response.writeByte(version);
      response.writeBytes(id);
      response.writeShort(ChannelBuffers.swapShort(MSG_HEARTBEAT_RESPONSE));
      response.writeShort(Crc.crc16Ccitt(response.toByteBuffer(0,response.writerIndex())));
      response.writeByte(0x0D);
      response.writeByte(0x0A);
      channel.write(response,remoteAddress);
    }
  }
 else   if (type == MSG_LOGIN || type == MSG_GPS) {
    Position position=new Position();
    position.setDeviceId(getDeviceId());
    position.setProtocol(getProtocol());
    if (!identify(id.toString(Charset.defaultCharset()))) {
      return null;
    }
 else     if (type == MSG_LOGIN) {
      if (channel != null) {
        ChannelBuffer response=ChannelBuffers.directBuffer(ByteOrder.LITTLE_ENDIAN,41);
        response.writeByte(0x40);
        response.writeByte(0x40);
        response.writeShort(response.capacity());
        response.writeByte(version);
        response.writeBytes(id);
        response.writeShort(ChannelBuffers.swapShort(MSG_LOGIN_RESPONSE));
        response.writeInt(0xFFFFFFFF);
        response.writeShort(0);
        response.writeInt((int)(new Date().getTime() / 1000));
        response.writeShort(Crc.crc16Ccitt(response.toByteBuffer(0,response.writerIndex())));
        response.writeByte(0x0D);
        response.writeByte(0x0A);
        channel.write(response,remoteAddress);
      }
    }
    if (type == MSG_GPS) {
      buf.readUnsignedByte();
    }
    buf.readUnsignedInt();
    buf.readUnsignedInt();
    position.set(Event.KEY_ODOMETER,buf.readUnsignedInt());
    buf.readUnsignedInt();
    buf.readUnsignedInt();
    buf.readUnsignedShort();
    position.set(Event.KEY_STATUS,buf.readUnsignedInt());
    buf.skipBytes(8);
    buf.readUnsignedByte();
    Calendar time=Calendar.getInstance(TimeZone.getTimeZone(""String_Node_Str""));
    time.clear();
    time.set(Calendar.DAY_OF_MONTH,buf.readUnsignedByte());
    time.set(Calendar.MONTH,buf.readUnsignedByte() - 1);
    time.set(Calendar.YEAR,2000 + buf.readUnsignedByte());
    time.set(Calendar.HOUR_OF_DAY,buf.readUnsignedByte());
    time.set(Calendar.MINUTE,buf.readUnsignedByte());
    time.set(Calendar.SECOND,buf.readUnsignedByte());
    position.setTime(time.getTime());
    double lat=buf.readUnsignedInt() / 3600000.0;
    double lon=buf.readUnsignedInt() / 3600000.0;
    position.setSpeed(UnitsConverter.knotsFromKph(buf.readUnsignedShort()));
    position.setCourse(buf.readUnsignedShort());
    int flags=buf.readUnsignedByte();
    position.setLatitude((flags & 0x01) == 0 ? -lat : lat);
    position.setLongitude((flags & 0x02) == 0 ? -lon : lon);
    position.setValid((flags & 0x0C) > 0);
    position.set(Event.KEY_SATELLITES,flags >> 4);
    return position;
  }
  return null;
}",0.9997022923489134
156215,"private void parseIdentification(Channel channel,ChannelBuffer buf){
  boolean result=false;
  int length=buf.readUnsignedShort();
  String imei=buf.toString(buf.readerIndex(),length,Charset.defaultCharset());
  result=identify(imei);
  if (channel != null) {
    ChannelBuffer response=ChannelBuffers.directBuffer(1);
    response.writeByte(result ? 1 : 0);
    channel.write(response);
  }
}","private void parseIdentification(Channel channel,ChannelBuffer buf){
  int length=buf.readUnsignedShort();
  String imei=buf.toString(buf.readerIndex(),length,Charset.defaultCharset());
  boolean result=identify(imei);
  if (channel != null) {
    ChannelBuffer response=ChannelBuffers.directBuffer(1);
    response.writeByte(result ? 1 : 0);
    channel.write(response);
  }
}",0.9584415584415584
156216,"private List<Position> parseLocation(Channel channel,ChannelBuffer buf){
  List<Position> positions=new LinkedList<Position>();
  buf.skipBytes(4);
  buf.readUnsignedInt();
  int codec=buf.readUnsignedByte();
  if (codec == CODEC_12) {
    return null;
  }
  int count=buf.readUnsignedByte();
  for (int i=0; i < count; i++) {
    Position position=new Position();
    position.setProtocol(getProtocol());
    position.setDeviceId(deviceId);
    int globalMask=0x0f;
    if (codec == CODEC_GH3000) {
      long time=buf.readUnsignedInt() & 0x3fffffff;
      time+=1167609600;
      position.setTime(new Date(time * 1000));
      globalMask=buf.readUnsignedByte();
      if (!checkBit(globalMask,0)) {
        return null;
      }
      int locationMask=buf.readUnsignedByte();
      if (checkBit(locationMask,0)) {
        position.setLatitude(Double.valueOf(buf.readFloat()));
        position.setLongitude(Double.valueOf(buf.readFloat()));
      }
      if (checkBit(locationMask,1)) {
        position.setAltitude(buf.readUnsignedShort());
      }
      if (checkBit(locationMask,2)) {
        position.setCourse(buf.readUnsignedByte() * 360.0 / 256);
      }
      if (checkBit(locationMask,3)) {
        position.setSpeed(buf.readUnsignedByte() * 0.539957);
      }
      if (checkBit(locationMask,4)) {
        int satellites=buf.readUnsignedByte();
        position.set(""String_Node_Str"",satellites);
        position.setValid(satellites >= 3);
      }
      if (checkBit(locationMask,5)) {
        position.set(""String_Node_Str"",buf.readUnsignedShort());
        position.set(""String_Node_Str"",buf.readUnsignedShort());
      }
      if (checkBit(locationMask,6)) {
        position.set(""String_Node_Str"",buf.readUnsignedByte());
      }
      if (checkBit(locationMask,7)) {
        position.set(""String_Node_Str"",buf.readUnsignedInt());
      }
    }
 else {
      position.setTime(new Date(buf.readLong()));
      position.set(""String_Node_Str"",buf.readUnsignedByte());
      position.setLongitude(buf.readInt() / 10000000.0);
      position.setLatitude(buf.readInt() / 10000000.0);
      position.setAltitude(buf.readShort());
      position.setCourse(buf.readUnsignedShort());
      int satellites=buf.readUnsignedByte();
      position.set(""String_Node_Str"",satellites);
      position.setValid(satellites != 0);
      position.setSpeed(buf.readUnsignedShort() * 0.539957);
      position.set(""String_Node_Str"",buf.readUnsignedByte());
      buf.readUnsignedByte();
    }
    if (checkBit(globalMask,1)) {
      int cnt=buf.readUnsignedByte();
      for (int j=0; j < cnt; j++) {
        int id=buf.readUnsignedByte();
        if (id == 1) {
          position.set(""String_Node_Str"",buf.readUnsignedByte());
        }
 else {
          position.set(""String_Node_Str"" + id,buf.readUnsignedByte());
        }
      }
    }
    if (checkBit(globalMask,2)) {
      int cnt=buf.readUnsignedByte();
      for (int j=0; j < cnt; j++) {
        position.set(""String_Node_Str"" + buf.readUnsignedByte(),buf.readUnsignedShort());
      }
    }
    if (checkBit(globalMask,3)) {
      int cnt=buf.readUnsignedByte();
      for (int j=0; j < cnt; j++) {
        position.set(""String_Node_Str"" + buf.readUnsignedByte(),buf.readUnsignedInt());
      }
    }
    if (codec == CODEC_FM4X00) {
      int cnt=buf.readUnsignedByte();
      for (int j=0; j < cnt; j++) {
        position.set(""String_Node_Str"" + buf.readUnsignedByte(),buf.readLong());
      }
    }
    positions.add(position);
  }
  if (channel != null) {
    ChannelBuffer response=ChannelBuffers.directBuffer(4);
    response.writeInt(count);
    channel.write(response);
  }
  return positions;
}","private List<Position> parseLocation(Channel channel,ChannelBuffer buf){
  List<Position> positions=new LinkedList<Position>();
  buf.skipBytes(4);
  buf.readUnsignedInt();
  int codec=buf.readUnsignedByte();
  if (codec == CODEC_12) {
    return null;
  }
  int count=buf.readUnsignedByte();
  for (int i=0; i < count; i++) {
    Position position=new Position();
    position.setProtocol(getProtocol());
    position.setDeviceId(getDeviceId());
    int globalMask=0x0f;
    if (codec == CODEC_GH3000) {
      long time=buf.readUnsignedInt() & 0x3fffffff;
      time+=1167609600;
      position.setTime(new Date(time * 1000));
      globalMask=buf.readUnsignedByte();
      if (!checkBit(globalMask,0)) {
        return null;
      }
      int locationMask=buf.readUnsignedByte();
      if (checkBit(locationMask,0)) {
        position.setLatitude(buf.readFloat());
        position.setLongitude(buf.readFloat());
      }
      if (checkBit(locationMask,1)) {
        position.setAltitude(buf.readUnsignedShort());
      }
      if (checkBit(locationMask,2)) {
        position.setCourse(buf.readUnsignedByte() * 360.0 / 256);
      }
      if (checkBit(locationMask,3)) {
        position.setSpeed(buf.readUnsignedByte() * 0.539957);
      }
      if (checkBit(locationMask,4)) {
        int satellites=buf.readUnsignedByte();
        position.set(""String_Node_Str"",satellites);
        position.setValid(satellites >= 3);
      }
      if (checkBit(locationMask,5)) {
        position.set(""String_Node_Str"",buf.readUnsignedShort());
        position.set(""String_Node_Str"",buf.readUnsignedShort());
      }
      if (checkBit(locationMask,6)) {
        position.set(""String_Node_Str"",buf.readUnsignedByte());
      }
      if (checkBit(locationMask,7)) {
        position.set(""String_Node_Str"",buf.readUnsignedInt());
      }
    }
 else {
      position.setTime(new Date(buf.readLong()));
      position.set(""String_Node_Str"",buf.readUnsignedByte());
      position.setLongitude(buf.readInt() / 10000000.0);
      position.setLatitude(buf.readInt() / 10000000.0);
      position.setAltitude(buf.readShort());
      position.setCourse(buf.readUnsignedShort());
      int satellites=buf.readUnsignedByte();
      position.set(""String_Node_Str"",satellites);
      position.setValid(satellites != 0);
      position.setSpeed(buf.readUnsignedShort() * 0.539957);
      position.set(""String_Node_Str"",buf.readUnsignedByte());
      buf.readUnsignedByte();
    }
    if (checkBit(globalMask,1)) {
      int cnt=buf.readUnsignedByte();
      for (int j=0; j < cnt; j++) {
        int id=buf.readUnsignedByte();
        if (id == 1) {
          position.set(""String_Node_Str"",buf.readUnsignedByte());
        }
 else {
          position.set(""String_Node_Str"" + id,buf.readUnsignedByte());
        }
      }
    }
    if (checkBit(globalMask,2)) {
      int cnt=buf.readUnsignedByte();
      for (int j=0; j < cnt; j++) {
        position.set(""String_Node_Str"" + buf.readUnsignedByte(),buf.readUnsignedShort());
      }
    }
    if (checkBit(globalMask,3)) {
      int cnt=buf.readUnsignedByte();
      for (int j=0; j < cnt; j++) {
        position.set(""String_Node_Str"" + buf.readUnsignedByte(),buf.readUnsignedInt());
      }
    }
    if (codec == CODEC_FM4X00) {
      int cnt=buf.readUnsignedByte();
      for (int j=0; j < cnt; j++) {
        position.set(""String_Node_Str"" + buf.readUnsignedByte(),buf.readLong());
      }
    }
    positions.add(position);
  }
  if (channel != null) {
    ChannelBuffer response=ChannelBuffers.directBuffer(4);
    response.writeInt(count);
    channel.write(response);
  }
  return positions;
}",0.9946524064171124
156217,"@Override protected Object decode(ChannelHandlerContext ctx,Channel channel,Object msg) throws Exception {
  ChannelBuffer buf=(ChannelBuffer)msg;
  if (buf.readByte() != 0x78 || buf.readByte() != 0x78) {
    return null;
  }
  int length=buf.readUnsignedByte();
  int dataLength=length - 5;
  int type=buf.readUnsignedByte();
  if (type == MSG_LOGIN) {
    String imei=readImei(buf);
    buf.readUnsignedShort();
    if (dataLength > 10) {
      int extensionBits=buf.readUnsignedShort();
      int offset=(extensionBits >> 4) * 36000;
      if ((extensionBits & 0x8) != 0) {
        offset=-offset;
      }
      timeZone.setRawOffset(offset);
    }
    try {
      deviceId=getDataManager().getDeviceByImei(imei).getId();
      buf.skipBytes(dataLength - 8);
      sendResponse(channel,type,buf.readUnsignedShort());
    }
 catch (    Exception error) {
      Log.warning(""String_Node_Str"" + imei);
    }
  }
 else   if (deviceId != null && (type == MSG_GPS || type == MSG_GPS_LBS_1 || type == MSG_GPS_LBS_2 || type == MSG_GPS_LBS_STATUS_1 || type == MSG_GPS_LBS_STATUS_2 || type == MSG_GPS_PHONE || type == MSG_GPS_LBS_EXTEND)) {
    Position position=new Position();
    position.setDeviceId(deviceId);
    ExtendedInfoFormatter extendedInfo=new ExtendedInfoFormatter(getProtocol());
    Calendar time=Calendar.getInstance(timeZone);
    time.clear();
    time.set(Calendar.YEAR,2000 + buf.readUnsignedByte());
    time.set(Calendar.MONTH,buf.readUnsignedByte() - 1);
    time.set(Calendar.DAY_OF_MONTH,buf.readUnsignedByte());
    time.set(Calendar.HOUR_OF_DAY,buf.readUnsignedByte());
    time.set(Calendar.MINUTE,buf.readUnsignedByte());
    time.set(Calendar.SECOND,buf.readUnsignedByte());
    position.setTime(time.getTime());
    int gpsLength=buf.readUnsignedByte();
    extendedInfo.set(""String_Node_Str"",gpsLength & 0xf);
    gpsLength>>=4;
    double latitude=buf.readUnsignedInt() / (60.0 * 30000.0);
    double longitude=buf.readUnsignedInt() / (60.0 * 30000.0);
    position.setSpeed(buf.readUnsignedByte() * 0.539957);
    int union=buf.readUnsignedShort();
    position.setCourse((double)(union & 0x03FF));
    position.setValid((union & 0x1000) != 0);
    if ((union & 0x0400) == 0)     latitude=-latitude;
    if ((union & 0x0800) != 0)     longitude=-longitude;
    position.setLatitude(latitude);
    position.setLongitude(longitude);
    position.setAltitude(0.0);
    if ((union & 0x4000) != 0) {
      extendedInfo.set(""String_Node_Str"",(union & 0x8000) != 0);
    }
    buf.skipBytes(gpsLength - 12);
    if (type == MSG_GPS_LBS_1 || type == MSG_GPS_LBS_2 || type == MSG_GPS_LBS_STATUS_1 || type == MSG_GPS_LBS_STATUS_2) {
      int lbsLength=0;
      if (type == MSG_GPS_LBS_STATUS_1 || type == MSG_GPS_LBS_STATUS_2) {
        lbsLength=buf.readUnsignedByte();
      }
      extendedInfo.set(""String_Node_Str"",buf.readUnsignedShort());
      extendedInfo.set(""String_Node_Str"",buf.readUnsignedByte());
      extendedInfo.set(""String_Node_Str"",buf.readUnsignedShort());
      extendedInfo.set(""String_Node_Str"",buf.readUnsignedShort() << 8 + buf.readUnsignedByte());
      buf.skipBytes(lbsLength - 9);
      if (type == MSG_GPS_LBS_STATUS_1 || type == MSG_GPS_LBS_STATUS_2) {
        extendedInfo.set(""String_Node_Str"",true);
        int flags=buf.readUnsignedByte();
        extendedInfo.set(""String_Node_Str"",(flags & 0x2) != 0);
        extendedInfo.set(""String_Node_Str"",buf.readUnsignedByte());
        extendedInfo.set(""String_Node_Str"",buf.readUnsignedByte());
      }
    }
    if (buf.readableBytes() > 6) {
      buf.skipBytes(buf.readableBytes() - 6);
    }
    int index=buf.readUnsignedShort();
    extendedInfo.set(""String_Node_Str"",index);
    sendResponse(channel,type,index);
    position.setExtendedInfo(extendedInfo.toString());
    return position;
  }
 else {
    buf.skipBytes(dataLength);
    if (type != MSG_COMMAND_0 && type != MSG_COMMAND_1 && type != MSG_COMMAND_2) {
      sendResponse(channel,type,buf.readUnsignedShort());
    }
  }
  return null;
}","@Override protected Object decode(ChannelHandlerContext ctx,Channel channel,Object msg) throws Exception {
  ChannelBuffer buf=(ChannelBuffer)msg;
  if (buf.readByte() != 0x78 || buf.readByte() != 0x78) {
    return null;
  }
  int length=buf.readUnsignedByte();
  int dataLength=length - 5;
  int type=buf.readUnsignedByte();
  if (type == MSG_LOGIN) {
    String imei=readImei(buf);
    buf.readUnsignedShort();
    if (dataLength > 10) {
      int extensionBits=buf.readUnsignedShort();
      int offset=(extensionBits >> 4) * 36000;
      if ((extensionBits & 0x8) != 0) {
        offset=-offset;
      }
      timeZone.setRawOffset(offset);
    }
    try {
      deviceId=getDataManager().getDeviceByImei(imei).getId();
      buf.skipBytes(buf.readableBytes() - 6);
      sendResponse(channel,type,buf.readUnsignedShort());
    }
 catch (    Exception error) {
      Log.warning(""String_Node_Str"" + imei);
    }
  }
 else   if (deviceId != null && (type == MSG_GPS || type == MSG_GPS_LBS_1 || type == MSG_GPS_LBS_2 || type == MSG_GPS_LBS_STATUS_1 || type == MSG_GPS_LBS_STATUS_2 || type == MSG_GPS_PHONE || type == MSG_GPS_LBS_EXTEND)) {
    Position position=new Position();
    position.setDeviceId(deviceId);
    ExtendedInfoFormatter extendedInfo=new ExtendedInfoFormatter(getProtocol());
    Calendar time=Calendar.getInstance(timeZone);
    time.clear();
    time.set(Calendar.YEAR,2000 + buf.readUnsignedByte());
    time.set(Calendar.MONTH,buf.readUnsignedByte() - 1);
    time.set(Calendar.DAY_OF_MONTH,buf.readUnsignedByte());
    time.set(Calendar.HOUR_OF_DAY,buf.readUnsignedByte());
    time.set(Calendar.MINUTE,buf.readUnsignedByte());
    time.set(Calendar.SECOND,buf.readUnsignedByte());
    position.setTime(time.getTime());
    int gpsLength=buf.readUnsignedByte();
    extendedInfo.set(""String_Node_Str"",gpsLength & 0xf);
    gpsLength>>=4;
    double latitude=buf.readUnsignedInt() / (60.0 * 30000.0);
    double longitude=buf.readUnsignedInt() / (60.0 * 30000.0);
    position.setSpeed(buf.readUnsignedByte() * 0.539957);
    int union=buf.readUnsignedShort();
    position.setCourse((double)(union & 0x03FF));
    position.setValid((union & 0x1000) != 0);
    if ((union & 0x0400) == 0)     latitude=-latitude;
    if ((union & 0x0800) != 0)     longitude=-longitude;
    position.setLatitude(latitude);
    position.setLongitude(longitude);
    position.setAltitude(0.0);
    if ((union & 0x4000) != 0) {
      extendedInfo.set(""String_Node_Str"",(union & 0x8000) != 0);
    }
    buf.skipBytes(gpsLength - 12);
    if (type == MSG_GPS_LBS_1 || type == MSG_GPS_LBS_2 || type == MSG_GPS_LBS_STATUS_1 || type == MSG_GPS_LBS_STATUS_2) {
      int lbsLength=0;
      if (type == MSG_GPS_LBS_STATUS_1 || type == MSG_GPS_LBS_STATUS_2) {
        lbsLength=buf.readUnsignedByte();
      }
      extendedInfo.set(""String_Node_Str"",buf.readUnsignedShort());
      extendedInfo.set(""String_Node_Str"",buf.readUnsignedByte());
      extendedInfo.set(""String_Node_Str"",buf.readUnsignedShort());
      extendedInfo.set(""String_Node_Str"",buf.readUnsignedShort() << 8 + buf.readUnsignedByte());
      buf.skipBytes(lbsLength - 9);
      if (type == MSG_GPS_LBS_STATUS_1 || type == MSG_GPS_LBS_STATUS_2) {
        extendedInfo.set(""String_Node_Str"",true);
        int flags=buf.readUnsignedByte();
        extendedInfo.set(""String_Node_Str"",(flags & 0x2) != 0);
        extendedInfo.set(""String_Node_Str"",buf.readUnsignedByte());
        extendedInfo.set(""String_Node_Str"",buf.readUnsignedByte());
      }
    }
    if (buf.readableBytes() > 6) {
      buf.skipBytes(buf.readableBytes() - 6);
    }
    int index=buf.readUnsignedShort();
    extendedInfo.set(""String_Node_Str"",index);
    sendResponse(channel,type,index);
    position.setExtendedInfo(extendedInfo.toString());
    return position;
  }
 else {
    buf.skipBytes(dataLength);
    if (type != MSG_COMMAND_0 && type != MSG_COMMAND_1 && type != MSG_COMMAND_2) {
      sendResponse(channel,type,buf.readUnsignedShort());
    }
  }
  return null;
}",0.9961380341347952
156218,"private Position decodeAlternative(Channel channel,String sentence){
  Matcher parser=pattern.matcher(sentence);
  if (!parser.matches()) {
    return null;
  }
  Position position=new Position();
  ExtendedInfoFormatter extendedInfo=new ExtendedInfoFormatter(""String_Node_Str"");
  Integer index=1;
  String imei=parser.group(index++);
  try {
    position.setDeviceId(getDataManager().getDeviceByImei(imei).getId());
  }
 catch (  Exception error) {
    Log.warning(""String_Node_Str"" + imei);
    return null;
  }
  position.setValid(parser.group(index++).compareTo(""String_Node_Str"") != 0 ? true : false);
  Calendar time=Calendar.getInstance(TimeZone.getTimeZone(""String_Node_Str""));
  time.clear();
  time.set(Calendar.DAY_OF_MONTH,Integer.valueOf(parser.group(index++)));
  time.set(Calendar.MONTH,Integer.valueOf(parser.group(index++)) - 1);
  time.set(Calendar.YEAR,2000 + Integer.valueOf(parser.group(index++)));
  time.set(Calendar.HOUR,Integer.valueOf(parser.group(index++)));
  time.set(Calendar.MINUTE,Integer.valueOf(parser.group(index++)));
  time.set(Calendar.SECOND,Integer.valueOf(parser.group(index++)));
  position.setTime(time.getTime());
  String hemisphere=parser.group(index++);
  Double longitude=Double.valueOf(parser.group(index++));
  longitude+=Double.valueOf(parser.group(index++)) / 60;
  if (hemisphere.compareTo(""String_Node_Str"") == 0)   longitude=-longitude;
  position.setLongitude(longitude);
  hemisphere=parser.group(index++);
  Double latitude=Double.valueOf(parser.group(index++));
  latitude+=Double.valueOf(parser.group(index++)) / 60;
  if (hemisphere.compareTo(""String_Node_Str"") == 0)   latitude=-latitude;
  position.setLatitude(latitude);
  position.setAltitude(Double.valueOf(parser.group(index++)));
  position.setSpeed(Double.valueOf(parser.group(index++)));
  position.setCourse(Double.valueOf(parser.group(index++)));
  extendedInfo.set(""String_Node_Str"",Integer.valueOf(parser.group(index++)));
  extendedInfo.set(""String_Node_Str"",parser.group(index++));
  position.setExtendedInfo(extendedInfo.toString());
  return position;
}","private Position decodeAlternative(Channel channel,String sentence){
  Matcher parser=pattern.matcher(sentence);
  if (!parser.matches()) {
    return null;
  }
  Position position=new Position();
  ExtendedInfoFormatter extendedInfo=new ExtendedInfoFormatter(""String_Node_Str"");
  Integer index=1;
  String imei=parser.group(index++);
  try {
    position.setDeviceId(getDataManager().getDeviceByImei(imei).getId());
  }
 catch (  Exception error) {
    Log.warning(""String_Node_Str"" + imei);
    return null;
  }
  position.setValid(parser.group(index++).compareTo(""String_Node_Str"") != 0);
  Calendar time=Calendar.getInstance(TimeZone.getTimeZone(""String_Node_Str""));
  time.clear();
  time.set(Calendar.DAY_OF_MONTH,Integer.valueOf(parser.group(index++)));
  time.set(Calendar.MONTH,Integer.valueOf(parser.group(index++)) - 1);
  time.set(Calendar.YEAR,2000 + Integer.valueOf(parser.group(index++)));
  time.set(Calendar.HOUR,Integer.valueOf(parser.group(index++)));
  time.set(Calendar.MINUTE,Integer.valueOf(parser.group(index++)));
  time.set(Calendar.SECOND,Integer.valueOf(parser.group(index++)));
  position.setTime(time.getTime());
  String hemisphere=parser.group(index++);
  Double longitude=Double.valueOf(parser.group(index++));
  longitude+=Double.valueOf(parser.group(index++)) / 60;
  if (hemisphere.compareTo(""String_Node_Str"") == 0)   longitude=-longitude;
  position.setLongitude(longitude);
  hemisphere=parser.group(index++);
  Double latitude=Double.valueOf(parser.group(index++));
  latitude+=Double.valueOf(parser.group(index++)) / 60;
  if (hemisphere.compareTo(""String_Node_Str"") == 0)   latitude=-latitude;
  position.setLatitude(latitude);
  position.setAltitude(Double.valueOf(parser.group(index++)));
  position.setSpeed(Double.valueOf(parser.group(index++)));
  position.setCourse(Double.valueOf(parser.group(index++)));
  extendedInfo.set(""String_Node_Str"",Integer.valueOf(parser.group(index++)));
  extendedInfo.set(""String_Node_Str"",parser.group(index++));
  position.setExtendedInfo(extendedInfo.toString());
  return position;
}",0.9963846710050616
156219,"public GlobalSatProtocolDecoder(ServerManager serverManager){
  super(serverManager);
  format0=""String_Node_Str"";
  format1=""String_Node_Str"";
  if (getServerManager() != null) {
    Properties p=getServerManager().getProperties();
    if (p.contains(""String_Node_Str"")) {
      format0=p.getProperty(""String_Node_Str"");
    }
    if (p.contains(""String_Node_Str"")) {
      format1=p.getProperty(""String_Node_Str"");
    }
  }
}","public GlobalSatProtocolDecoder(ServerManager serverManager){
  super(serverManager);
  format0=""String_Node_Str"";
  format1=""String_Node_Str"";
  if (getServerManager() != null) {
    Properties p=getServerManager().getProperties();
    if (p.containsKey(""String_Node_Str"")) {
      format0=p.getProperty(""String_Node_Str"");
    }
    if (p.containsKey(""String_Node_Str"")) {
      format1=p.getProperty(""String_Node_Str"");
    }
  }
}",0.9930394431554525
156220,"@Override protected Object decode(ChannelHandlerContext ctx,Channel channel,Object msg) throws Exception {
  ChannelBuffer buf=(ChannelBuffer)msg;
  buf.skipBytes(2);
  int length=buf.readByte();
  int dataLength=length - 5;
  int type=buf.readUnsignedByte();
  if (type == MSG_LOGIN) {
    String imei=readImei(buf);
    try {
      deviceId=getDataManager().getDeviceByImei(imei).getId();
      buf.skipBytes(dataLength - 8);
      sendResponse(channel,type,buf.readUnsignedShort());
    }
 catch (    Exception error) {
      Log.warning(""String_Node_Str"" + imei);
    }
  }
 else   if (type == MSG_GPS || type == MSG_GPS_LBS || type == MSG_GPS_LBS_STATUS || type == MSG_GPS_PHONE) {
    Position position=new Position();
    position.setDeviceId(deviceId);
    ExtendedInfoFormatter extendedInfo=new ExtendedInfoFormatter(""String_Node_Str"");
    Calendar time=Calendar.getInstance(TimeZone.getTimeZone(""String_Node_Str""));
    time.clear();
    time.set(Calendar.YEAR,2000 + buf.readUnsignedByte());
    time.set(Calendar.MONTH,buf.readUnsignedByte() - 1);
    time.set(Calendar.DAY_OF_MONTH,buf.readUnsignedByte());
    time.set(Calendar.HOUR,buf.readUnsignedByte());
    time.set(Calendar.MINUTE,buf.readUnsignedByte());
    time.set(Calendar.SECOND,buf.readUnsignedByte());
    position.setTime(time.getTime());
    int gpsLength=buf.readUnsignedByte();
    extendedInfo.set(""String_Node_Str"",gpsLength & 0xf);
    gpsLength>>=4;
    double latitude=buf.readUnsignedInt() / (60.0 * 30000.0);
    double longitude=buf.readUnsignedInt() / (60.0 * 30000.0);
    position.setSpeed(buf.readUnsignedByte() * 0.539957);
    int union=buf.readUnsignedShort();
    position.setCourse((double)(union & 0x03FF));
    position.setValid((union & 0x1000) != 0);
    if ((union & 0x0400) == 0)     latitude=-latitude;
    if ((union & 0x0800) != 0)     longitude=-longitude;
    position.setLatitude(latitude);
    position.setLongitude(longitude);
    position.setAltitude(0.0);
    buf.skipBytes(gpsLength - 12);
    if (type == MSG_GPS_LBS || type == MSG_GPS_LBS_STATUS) {
      int lbsLength=0;
      if (type == MSG_GPS_LBS_STATUS) {
        lbsLength=buf.readUnsignedByte();
      }
      extendedInfo.set(""String_Node_Str"",buf.readUnsignedShort());
      extendedInfo.set(""String_Node_Str"",buf.readUnsignedByte());
      extendedInfo.set(""String_Node_Str"",buf.readUnsignedShort());
      extendedInfo.set(""String_Node_Str"",buf.readUnsignedShort() << 8 + buf.readUnsignedByte());
      buf.skipBytes(lbsLength - 9);
      if (type == MSG_GPS_LBS_STATUS) {
        extendedInfo.set(""String_Node_Str"",true);
        int flags=buf.readUnsignedByte();
        extendedInfo.set(""String_Node_Str"",(flags & 0x2) != 0);
        extendedInfo.set(""String_Node_Str"",buf.readUnsignedByte());
        extendedInfo.set(""String_Node_Str"",buf.readUnsignedByte());
      }
    }
    if (buf.readableBytes() > 6) {
      buf.skipBytes(buf.readableBytes() - 6);
    }
    int index=buf.readUnsignedShort();
    extendedInfo.set(""String_Node_Str"",index);
    sendResponse(channel,type,index);
    position.setExtendedInfo(extendedInfo.toString());
    return position;
  }
 else {
    buf.skipBytes(dataLength);
    sendResponse(channel,type,buf.readUnsignedShort());
  }
  return null;
}","@Override protected Object decode(ChannelHandlerContext ctx,Channel channel,Object msg) throws Exception {
  ChannelBuffer buf=(ChannelBuffer)msg;
  buf.skipBytes(2);
  int length=buf.readByte();
  int dataLength=length - 5;
  int type=buf.readUnsignedByte();
  if (type == MSG_LOGIN) {
    String imei=readImei(buf);
    buf.readUnsignedShort();
    if (dataLength > 10) {
      int extensionBits=buf.readUnsignedShort();
      int offset=(extensionBits >> 4) * 36000;
      if ((extensionBits & 0x8) != 0) {
        offset=-offset;
      }
      timeZone.setRawOffset(offset);
    }
    try {
      deviceId=getDataManager().getDeviceByImei(imei).getId();
      buf.skipBytes(dataLength - 8);
      sendResponse(channel,type,buf.readUnsignedShort());
    }
 catch (    Exception error) {
      Log.warning(""String_Node_Str"" + imei);
    }
  }
 else   if (type == MSG_GPS || type == MSG_GPS_LBS || type == MSG_GPS_LBS_STATUS || type == MSG_GPS_PHONE) {
    Position position=new Position();
    position.setDeviceId(deviceId);
    ExtendedInfoFormatter extendedInfo=new ExtendedInfoFormatter(""String_Node_Str"");
    Calendar time=Calendar.getInstance(timeZone);
    time.clear();
    time.set(Calendar.YEAR,2000 + buf.readUnsignedByte());
    time.set(Calendar.MONTH,buf.readUnsignedByte() - 1);
    time.set(Calendar.DAY_OF_MONTH,buf.readUnsignedByte());
    time.set(Calendar.HOUR,buf.readUnsignedByte());
    time.set(Calendar.MINUTE,buf.readUnsignedByte());
    time.set(Calendar.SECOND,buf.readUnsignedByte());
    position.setTime(time.getTime());
    int gpsLength=buf.readUnsignedByte();
    extendedInfo.set(""String_Node_Str"",gpsLength & 0xf);
    gpsLength>>=4;
    double latitude=buf.readUnsignedInt() / (60.0 * 30000.0);
    double longitude=buf.readUnsignedInt() / (60.0 * 30000.0);
    position.setSpeed(buf.readUnsignedByte() * 0.539957);
    int union=buf.readUnsignedShort();
    position.setCourse((double)(union & 0x03FF));
    position.setValid((union & 0x1000) != 0);
    if ((union & 0x0400) == 0)     latitude=-latitude;
    if ((union & 0x0800) != 0)     longitude=-longitude;
    position.setLatitude(latitude);
    position.setLongitude(longitude);
    position.setAltitude(0.0);
    buf.skipBytes(gpsLength - 12);
    if (type == MSG_GPS_LBS || type == MSG_GPS_LBS_STATUS) {
      int lbsLength=0;
      if (type == MSG_GPS_LBS_STATUS) {
        lbsLength=buf.readUnsignedByte();
      }
      extendedInfo.set(""String_Node_Str"",buf.readUnsignedShort());
      extendedInfo.set(""String_Node_Str"",buf.readUnsignedByte());
      extendedInfo.set(""String_Node_Str"",buf.readUnsignedShort());
      extendedInfo.set(""String_Node_Str"",buf.readUnsignedShort() << 8 + buf.readUnsignedByte());
      buf.skipBytes(lbsLength - 9);
      if (type == MSG_GPS_LBS_STATUS) {
        extendedInfo.set(""String_Node_Str"",true);
        int flags=buf.readUnsignedByte();
        extendedInfo.set(""String_Node_Str"",(flags & 0x2) != 0);
        extendedInfo.set(""String_Node_Str"",buf.readUnsignedByte());
        extendedInfo.set(""String_Node_Str"",buf.readUnsignedByte());
      }
    }
    if (buf.readableBytes() > 6) {
      buf.skipBytes(buf.readableBytes() - 6);
    }
    int index=buf.readUnsignedShort();
    extendedInfo.set(""String_Node_Str"",index);
    sendResponse(channel,type,index);
    position.setExtendedInfo(extendedInfo.toString());
    return position;
  }
 else {
    buf.skipBytes(dataLength);
    sendResponse(channel,type,buf.readUnsignedShort());
  }
  return null;
}",0.9556737588652482
156221,"@Test public void testDecode() throws Exception {
  Gt06ProtocolDecoder decoder=new Gt06ProtocolDecoder(null);
  decoder.setDataManager(new TestDataManager());
  int[] buf1={0x78,0x78,0x11,0x01,0x01,0x23,0x45,0x67,(byte)0x89,0x01,0x23,0x45,0x10,0x0B,0x32,0x01,0x00,0x01,0x71,(byte)0x93,0x0D,0x0A};
  assertNull(decoder.decode(null,null,ChannelBuffers.wrappedBuffer(ChannelBufferTools.convertArray(buf1))));
  int[] buf2={0x78,0x78,0x1F,0x12,0x0B,0x08,0x1D,0x11,0x2E,0x10,(byte)0xCC,0x02,0x7A,(byte)0xC7,(byte)0xEB,0x0C,0x46,0x58,0x49,0x00,0x14,(byte)0x8F,0x01,(byte)0xCC,0x00,0x28,0x7D,0x00,0x1F,(byte)0xB8,0x00,0x03,(byte)0x80,(byte)0x81,0x0D,0x0A};
  verify(decoder.decode(null,null,ChannelBuffers.wrappedBuffer(ChannelBufferTools.convertArray(buf2))));
  int[] buf3={0x78,0x78,0x0D,0x01,0x08,0x64,0x71,0x70,0x03,0x28,0x35,(byte)0x81,0x00,0x09,0x3F,0x04,0x0D,0x0A};
  assertNull(decoder.decode(null,null,ChannelBuffers.wrappedBuffer(ChannelBufferTools.convertArray(buf3))));
  int[] buf4={0x78,0x78,0x0D,0x01,0x01,0x23,0x45,0x67,(byte)0x89,0x01,0x23,0x45,0x00,0x01,(byte)0x8C,(byte)0xDD,0x0D,0x0A};
  assertNull(decoder.decode(null,null,ChannelBuffers.wrappedBuffer(ChannelBufferTools.convertArray(buf4))));
  int[] buf5={0x78,0x78,0x0d,0x01,0x03,0x53,0x41,(byte)0x90,0x36,0x06,0x60,0x61,0x00,0x03,(byte)0xc3,(byte)0xdf,0x0d,0x0a};
  assertNull(decoder.decode(null,null,ChannelBuffers.wrappedBuffer(ChannelBufferTools.convertArray(buf5))));
  int[] buf6={0x78,0x78,0x19,0x10,0x0B,0x03,0x1A,0x0B,0x1B,0x31,(byte)0xCC,0x02,0x7A,(byte)0xC7,(byte)0xFD,0x0C,0x46,0x57,(byte)0xBF,0x01,0x15,0x21,0x00,0x01,0x00,0x1C,(byte)0xC6,0x07,0x0D,0x0A};
  verify(decoder.decode(null,null,ChannelBuffers.wrappedBuffer(ChannelBufferTools.convertArray(buf6))));
  int[] buf7={78,0x78,0x21,0x12,0x0C,0x01,0x0C,0x0F,0x15,0x1F,(byte)0xCF,0x02,0x7A,(byte)0xC8,(byte)0x84,0x0C,0x46,0x57,(byte)0xEC,0x00,0x14,0x00,0x01,(byte)0xCC,0x00,0x28,0x7D,0x00,0x1F,0x72,0x00,0x01,0x00,0x0F,0x53,(byte)0xA0,0x0D,0x0A};
  verify(decoder.decode(null,null,ChannelBuffers.wrappedBuffer(ChannelBufferTools.convertArray(buf7))));
  int[] buf8={0x78,0x78,0x25,0x16,0x0B,0x05,0x1B,0x09,0x35,0x23,(byte)0xCF,0x02,0x7A,(byte)0xC8,0x36,0x0C,0x46,0x57,(byte)0xB3,0x00,0x14,0x00,0x09,0x01,(byte)0xCC,0x00,0x26,0x6A,0x00,0x1E,0x17,0x40,0x05,0x04,0x00,0x02,0x00,0x08,(byte)0xD7,(byte)0xB1,0x0D,0x0A};
  verify(decoder.decode(null,null,ChannelBuffers.wrappedBuffer(ChannelBufferTools.convertArray(buf8))));
  int[] buf9={0x78,0x78,0x19,0x10,0x0e,0x01,0x09,0x03,0x23,0x0e,0xc8,0x03,0xae,0x32,0xa6,0x06,0x53,0xcd,0xed,0x00,0x18,0x00,0x00,0x02,0x00,0x72,0xfe,0xb7,0x0d,0x0a};
  verify(decoder.decode(null,null,ChannelBuffers.wrappedBuffer(ChannelBufferTools.convertArray(buf9))));
}","@Test public void testDecode() throws Exception {
  Gt06ProtocolDecoder decoder=new Gt06ProtocolDecoder(null);
  decoder.setDataManager(new TestDataManager());
  int[] buf1={0x78,0x78,0x11,0x01,0x01,0x23,0x45,0x67,0x89,0x01,0x23,0x45,0x10,0x0B,0x32,0x01,0x00,0x01,0x71,0x93,0x0D,0x0A};
  assertNull(decoder.decode(null,null,ChannelBuffers.wrappedBuffer(ChannelBufferTools.convertArray(buf1))));
  int[] buf2={0x78,0x78,0x1F,0x12,0x0B,0x08,0x1D,0x11,0x2E,0x10,0xCC,0x02,0x7A,0xC7,0xEB,0x0C,0x46,0x58,0x49,0x00,0x14,0x8F,0x01,0xCC,0x00,0x28,0x7D,0x00,0x1F,0xB8,0x00,0x03,0x80,0x81,0x0D,0x0A};
  verify(decoder.decode(null,null,ChannelBuffers.wrappedBuffer(ChannelBufferTools.convertArray(buf2))));
  int[] buf3={0x78,0x78,0x0D,0x01,0x08,0x64,0x71,0x70,0x03,0x28,0x35,0x81,0x00,0x09,0x3F,0x04,0x0D,0x0A};
  assertNull(decoder.decode(null,null,ChannelBuffers.wrappedBuffer(ChannelBufferTools.convertArray(buf3))));
  int[] buf4={0x78,0x78,0x0D,0x01,0x01,0x23,0x45,0x67,0x89,0x01,0x23,0x45,0x00,0x01,0x8C,0xDD,0x0D,0x0A};
  assertNull(decoder.decode(null,null,ChannelBuffers.wrappedBuffer(ChannelBufferTools.convertArray(buf4))));
  int[] buf5={0x78,0x78,0x0d,0x01,0x03,0x53,0x41,0x90,0x36,0x06,0x60,0x61,0x00,0x03,0xc3,0xdf,0x0d,0x0a};
  assertNull(decoder.decode(null,null,ChannelBuffers.wrappedBuffer(ChannelBufferTools.convertArray(buf5))));
  int[] buf6={0x78,0x78,0x19,0x10,0x0B,0x03,0x1A,0x0B,0x1B,0x31,0xCC,0x02,0x7A,0xC7,0xFD,0x0C,0x46,0x57,0xBF,0x01,0x15,0x21,0x00,0x01,0x00,0x1C,0xC6,0x07,0x0D,0x0A};
  verify(decoder.decode(null,null,ChannelBuffers.wrappedBuffer(ChannelBufferTools.convertArray(buf6))));
  int[] buf7={78,0x78,0x21,0x12,0x0C,0x01,0x0C,0x0F,0x15,0x1F,0xCF,0x02,0x7A,0xC8,0x84,0x0C,0x46,0x57,0xEC,0x00,0x14,0x00,0x01,0xCC,0x00,0x28,0x7D,0x00,0x1F,0x72,0x00,0x01,0x00,0x0F,0x53,0xA0,0x0D,0x0A};
  verify(decoder.decode(null,null,ChannelBuffers.wrappedBuffer(ChannelBufferTools.convertArray(buf7))));
  int[] buf8={0x78,0x78,0x25,0x16,0x0B,0x05,0x1B,0x09,0x35,0x23,0xCF,0x02,0x7A,0xC8,0x36,0x0C,0x46,0x57,0xB3,0x00,0x14,0x00,0x09,0x01,0xCC,0x00,0x26,0x6A,0x00,0x1E,0x17,0x40,0x05,0x04,0x00,0x02,0x00,0x08,0xD7,0xB1,0x0D,0x0A};
  verify(decoder.decode(null,null,ChannelBuffers.wrappedBuffer(ChannelBufferTools.convertArray(buf8))));
  int[] buf9={0x78,0x78,0x11,0x01,0x08,0x64,0x71,0x70,0x03,0x66,0x44,0x67,0x10,0x0f,0x19,0x0a,0x00,0x02,0xc6,0xd2,0x0d,0x0a};
  assertNull(decoder.decode(null,null,ChannelBuffers.wrappedBuffer(ChannelBufferTools.convertArray(buf9))));
  int[] buf10={0x78,0x78,0x19,0x10,0x0e,0x01,0x09,0x03,0x23,0x0e,0xc8,0x03,0xae,0x32,0xa6,0x06,0x53,0xcd,0xed,0x00,0x18,0x00,0x00,0x02,0x00,0x72,0xfe,0xb7,0x0d,0x0a};
  verify(decoder.decode(null,null,ChannelBuffers.wrappedBuffer(ChannelBufferTools.convertArray(buf10))));
}",0.8580797959555475
156222,"@Override protected Object decode(ChannelHandlerContext ctx,Channel channel,Object msg) throws Exception {
  if (msg instanceof Position) {
    Position position=(Position)msg;
    if (geocoder != null) {
      position.setAddress(geocoder.getAddress(position.getLatitude(),position.getLongitude()));
    }
  }
  return msg;
}","@Override protected Object decode(ChannelHandlerContext ctx,Channel channel,Object msg) throws Exception {
  if (geocoder != null) {
    if (msg instanceof Position) {
      Position position=(Position)msg;
      position.setAddress(geocoder.getAddress(position.getLatitude(),position.getLongitude()));
    }
 else     if (msg instanceof List) {
      List<Position> positions=(List<Position>)msg;
      for (      Position position : positions) {
        position.setAddress(geocoder.getAddress(position.getLatitude(),position.getLongitude()));
      }
    }
  }
  return msg;
}",0.5613259668508287
156223,"@Override public Logger getParentLogger() throws SQLFeatureNotSupportedException {
  return driver.getParentLogger();
}","public Logger getParentLogger() throws SQLFeatureNotSupportedException {
  throw new SQLFeatureNotSupportedException();
}",0.7166666666666667
156224,"@Override protected Object decode(ChannelHandlerContext ctx,Channel channel,Object msg) throws Exception {
  String sentence=(String)msg;
  if (sentence.contains(""String_Node_Str"")) {
    if (channel != null) {
      channel.write(""String_Node_Str"");
    }
    return null;
  }
  if (sentence.length() == 15 && Character.isDigit(sentence.charAt(0))) {
    if (channel != null) {
      channel.write(""String_Node_Str"");
    }
    return null;
  }
  Matcher parser=pattern.matcher(sentence);
  if (!parser.matches()) {
    Log.info(""String_Node_Str"");
    return null;
  }
  Position position=new Position();
  StringBuilder extendedInfo=new StringBuilder(""String_Node_Str"");
  Integer index=1;
  String imei=parser.group(index++);
  try {
    position.setDeviceId(getDataManager().getDeviceByImei(imei).getId());
  }
 catch (  Exception error) {
    Log.warning(""String_Node_Str"" + imei);
    return null;
  }
  extendedInfo.append(""String_Node_Str"");
  extendedInfo.append(parser.group(index++));
  extendedInfo.append(""String_Node_Str"");
  Calendar time=Calendar.getInstance(TimeZone.getTimeZone(""String_Node_Str""));
  time.clear();
  time.set(Calendar.YEAR,2000 + Integer.valueOf(parser.group(index++)));
  time.set(Calendar.MONTH,Integer.valueOf(parser.group(index++)) - 1);
  time.set(Calendar.DAY_OF_MONTH,Integer.valueOf(parser.group(index++)));
  int localHours=Integer.valueOf(parser.group(index++));
  int localMinutes=Integer.valueOf(parser.group(index++));
  int utcHours=Integer.valueOf(parser.group(index++));
  int utcMinutes=Integer.valueOf(parser.group(index++));
  time.set(Calendar.HOUR,localHours);
  time.set(Calendar.MINUTE,localMinutes);
  time.set(Calendar.SECOND,Integer.valueOf(parser.group(index++)));
  time.set(Calendar.MILLISECOND,Integer.valueOf(parser.group(index++)));
  int deltaMinutes=(localHours - utcHours) * 60 + localMinutes - utcMinutes;
  if (deltaMinutes <= -12 * 60) {
    deltaMinutes+=24 * 60;
  }
 else   if (deltaMinutes > 12) {
    deltaMinutes-=24 * 60;
  }
  time.add(Calendar.MINUTE,-deltaMinutes);
  position.setTime(time.getTime());
  position.setValid(parser.group(index++).compareTo(""String_Node_Str"") == 0 ? true : false);
  Double latitude=Double.valueOf(parser.group(index++));
  latitude+=Double.valueOf(parser.group(index++)) / 60;
  if (parser.group(index++).compareTo(""String_Node_Str"") == 0)   latitude=-latitude;
  position.setLatitude(latitude);
  Double lonlitude=Double.valueOf(parser.group(index++));
  lonlitude+=Double.valueOf(parser.group(index++)) / 60;
  String hemisphere=parser.group(index++);
  if (hemisphere != null) {
    if (hemisphere.compareTo(""String_Node_Str"") == 0)     lonlitude=-lonlitude;
  }
  position.setLongitude(lonlitude);
  position.setAltitude(0.0);
  position.setSpeed(Double.valueOf(parser.group(index++)));
  String course=parser.group(index++);
  if (course != null) {
    position.setCourse(Double.valueOf(course));
  }
 else {
    position.setCourse(0.0);
  }
  position.setExtendedInfo(extendedInfo.toString());
  return position;
}","@Override protected Object decode(ChannelHandlerContext ctx,Channel channel,Object msg) throws Exception {
  String sentence=(String)msg;
  if (sentence.contains(""String_Node_Str"")) {
    if (channel != null) {
      channel.write(""String_Node_Str"");
    }
    return null;
  }
  if (sentence.length() == 15 && Character.isDigit(sentence.charAt(0))) {
    if (channel != null) {
      channel.write(""String_Node_Str"");
    }
    return null;
  }
  Matcher parser=pattern.matcher(sentence);
  if (!parser.matches()) {
    Log.info(""String_Node_Str"");
    return null;
  }
  Position position=new Position();
  StringBuilder extendedInfo=new StringBuilder(""String_Node_Str"");
  Integer index=1;
  String imei=parser.group(index++);
  try {
    position.setDeviceId(getDataManager().getDeviceByImei(imei).getId());
  }
 catch (  Exception error) {
    Log.warning(""String_Node_Str"" + imei);
    return null;
  }
  extendedInfo.append(""String_Node_Str"");
  extendedInfo.append(parser.group(index++));
  extendedInfo.append(""String_Node_Str"");
  Calendar time=Calendar.getInstance(TimeZone.getTimeZone(""String_Node_Str""));
  time.clear();
  time.set(Calendar.YEAR,2000 + Integer.valueOf(parser.group(index++)));
  time.set(Calendar.MONTH,Integer.valueOf(parser.group(index++)) - 1);
  time.set(Calendar.DAY_OF_MONTH,Integer.valueOf(parser.group(index++)));
  int localHours=Integer.valueOf(parser.group(index++));
  int localMinutes=Integer.valueOf(parser.group(index++));
  int utcHours=Integer.valueOf(parser.group(index++));
  int utcMinutes=Integer.valueOf(parser.group(index++));
  time.set(Calendar.HOUR,localHours);
  time.set(Calendar.MINUTE,localMinutes);
  time.set(Calendar.SECOND,Integer.valueOf(parser.group(index++)));
  time.set(Calendar.MILLISECOND,Integer.valueOf(parser.group(index++)));
  int deltaMinutes=(localHours - utcHours) * 60 + localMinutes - utcMinutes;
  if (deltaMinutes <= -12 * 60) {
    deltaMinutes+=24 * 60;
  }
 else   if (deltaMinutes > 12 * 60) {
    deltaMinutes-=24 * 60;
  }
  time.add(Calendar.MINUTE,-deltaMinutes);
  position.setTime(time.getTime());
  position.setValid(parser.group(index++).compareTo(""String_Node_Str"") == 0 ? true : false);
  Double latitude=Double.valueOf(parser.group(index++));
  latitude+=Double.valueOf(parser.group(index++)) / 60;
  if (parser.group(index++).compareTo(""String_Node_Str"") == 0)   latitude=-latitude;
  position.setLatitude(latitude);
  Double lonlitude=Double.valueOf(parser.group(index++));
  lonlitude+=Double.valueOf(parser.group(index++)) / 60;
  String hemisphere=parser.group(index++);
  if (hemisphere != null) {
    if (hemisphere.compareTo(""String_Node_Str"") == 0)     lonlitude=-lonlitude;
  }
  position.setLongitude(lonlitude);
  position.setAltitude(0.0);
  position.setSpeed(Double.valueOf(parser.group(index++)));
  String course=parser.group(index++);
  if (course != null) {
    position.setCourse(Double.valueOf(course));
  }
 else {
    position.setCourse(0.0);
  }
  position.setExtendedInfo(extendedInfo.toString());
  return position;
}",0.9991769547325104
156225,"@Test public void testDecode() throws Exception {
  Gps103ProtocolDecoder decoder=new Gps103ProtocolDecoder(null);
  decoder.setDataManager(new TestDataManager());
  assertNull(decoder.decode(null,null,""String_Node_Str""));
  assertNull(decoder.decode(null,null,""String_Node_Str""));
  assertNull(decoder.decode(null,null,""String_Node_Str""));
  assertNotNull(decoder.decode(null,null,""String_Node_Str""));
  assertNotNull(decoder.decode(null,null,""String_Node_Str""));
  assertNotNull(decoder.decode(null,null,""String_Node_Str""));
  assertNotNull(decoder.decode(null,null,""String_Node_Str""));
  assertNotNull(decoder.decode(null,null,""String_Node_Str""));
  assertNotNull(decoder.decode(null,null,""String_Node_Str""));
  assertNotNull(decoder.decode(null,null,""String_Node_Str""));
  assertNotNull(decoder.decode(null,null,""String_Node_Str""));
  assertNotNull(decoder.decode(null,null,""String_Node_Str""));
  assertNotNull(decoder.decode(null,null,""String_Node_Str""));
  assertNotNull(decoder.decode(null,null,""String_Node_Str""));
  assertNotNull(decoder.decode(null,null,""String_Node_Str""));
  assertNotNull(decoder.decode(null,null,""String_Node_Str""));
  assertNotNull(decoder.decode(null,null,""String_Node_Str""));
  assertNotNull(decoder.decode(null,null,""String_Node_Str""));
  assertNotNull(decoder.decode(null,null,""String_Node_Str""));
  assertNotNull(decoder.decode(null,null,""String_Node_Str""));
  assertNotNull(decoder.decode(null,null,""String_Node_Str""));
  assertNotNull(decoder.decode(null,null,""String_Node_Str""));
}","@Test public void testDecode() throws Exception {
  Gps103ProtocolDecoder decoder=new Gps103ProtocolDecoder(null);
  decoder.setDataManager(new TestDataManager());
  assertNull(decoder.decode(null,null,""String_Node_Str""));
  assertNull(decoder.decode(null,null,""String_Node_Str""));
  assertNull(decoder.decode(null,null,""String_Node_Str""));
  assertNotNull(decoder.decode(null,null,""String_Node_Str""));
  assertNotNull(decoder.decode(null,null,""String_Node_Str""));
  assertNotNull(decoder.decode(null,null,""String_Node_Str""));
  assertNotNull(decoder.decode(null,null,""String_Node_Str""));
  assertNotNull(decoder.decode(null,null,""String_Node_Str""));
  assertNotNull(decoder.decode(null,null,""String_Node_Str""));
  assertNotNull(decoder.decode(null,null,""String_Node_Str""));
  assertNotNull(decoder.decode(null,null,""String_Node_Str""));
  assertNotNull(decoder.decode(null,null,""String_Node_Str""));
  assertNotNull(decoder.decode(null,null,""String_Node_Str""));
  assertNotNull(decoder.decode(null,null,""String_Node_Str""));
  assertNotNull(decoder.decode(null,null,""String_Node_Str""));
  assertNotNull(decoder.decode(null,null,""String_Node_Str""));
  assertNotNull(decoder.decode(null,null,""String_Node_Str""));
  assertNotNull(decoder.decode(null,null,""String_Node_Str""));
  assertNotNull(decoder.decode(null,null,""String_Node_Str""));
  assertNotNull(decoder.decode(null,null,""String_Node_Str""));
  assertNotNull(decoder.decode(null,null,""String_Node_Str""));
  assertNotNull(decoder.decode(null,null,""String_Node_Str""));
  assertNotNull(decoder.decode(null,null,""String_Node_Str""));
}",0.980012894906512
156226,"/** 
 * Request archive messages
 */
private void requestArchive(Channel channel,long newIndex){
  if (lastIndex == 0) {
    lastIndex=newIndex;
  }
 else   if (newIndex > lastIndex) {
    ChannelBuffer request=ChannelBuffers.directBuffer(ByteOrder.BIG_ENDIAN,12);
    request.writeShort(MSG_LOG_SYNC);
    request.writeShort(4);
    request.writeInt((int)lastIndex);
    request.writeInt(0);
    channel.write(request);
  }
}","/** 
 * Request archive messages
 */
private void requestArchive(Channel channel){
  if (lastIndex == 0) {
    lastIndex=newIndex;
  }
 else   if (newIndex > lastIndex) {
    ChannelBuffer request=ChannelBuffers.directBuffer(ByteOrder.LITTLE_ENDIAN,12);
    request.writeShort(MSG_LOG_SYNC);
    request.writeShort(4);
    request.writeInt((int)lastIndex);
    request.writeInt(0);
    channel.write(request);
  }
}",0.9726516052318668
156227,"/** 
 * Decode message
 */
@Override protected Object decode(ChannelHandlerContext ctx,Channel channel,Object msg) throws Exception {
  ChannelBuffer buf=(ChannelBuffer)msg;
  int type=buf.readUnsignedShort();
  buf.readUnsignedShort();
  if (type == MSG_IDENT || type == MSG_IDENT_FULL) {
    long id=buf.readUnsignedInt();
    int length=buf.readUnsignedShort();
    buf.skipBytes(length);
    length=buf.readUnsignedShort();
    buf.skipBytes(length);
    length=buf.readUnsignedShort();
    String imei=buf.readBytes(length).toString(Charset.defaultCharset());
    try {
      deviceId=getDataManager().getDeviceByImei(imei).getId();
    }
 catch (    Exception error) {
      Log.warning(""String_Node_Str"" + imei + ""String_Node_Str""+ id+ ""String_Node_Str"");
    }
  }
 else   if (deviceId != 0 && (type == MSG_POINT || type == MSG_ALARM || type == MSG_LOGMSG)) {
    List<Position> positions=new LinkedList<Position>();
    int recordCount=1;
    if (type == MSG_LOGMSG) {
      recordCount=buf.readUnsignedShort();
    }
    for (int j=0; j < recordCount; j++) {
      Position position=new Position();
      StringBuilder extendedInfo=new StringBuilder(""String_Node_Str"");
      position.setDeviceId(deviceId);
      if (type == MSG_LOGMSG) {
        lastIndex=buf.readUnsignedInt();
      }
 else {
        requestArchive(channel,buf.readUnsignedInt());
      }
      Calendar time=Calendar.getInstance(TimeZone.getTimeZone(""String_Node_Str""));
      time.clear();
      time.setTimeInMillis(buf.readUnsignedInt() * 1000);
      position.setTime(time.getTime());
      position.setLatitude(((double)buf.readInt()) / 0x7FFFFFFF * 180.0);
      position.setLongitude(((double)buf.readInt()) / 0x7FFFFFFF * 180.0);
      position.setSpeed(((double)buf.readUnsignedInt()) / 100);
      position.setCourse(((double)buf.readUnsignedShort()) / 100);
      position.setAltitude(((double)buf.readUnsignedShort()) / 100);
      int satellitesNumber=buf.readUnsignedByte();
      extendedInfo.append(""String_Node_Str"");
      extendedInfo.append(satellitesNumber);
      extendedInfo.append(""String_Node_Str"");
      position.setValid(satellitesNumber >= 3);
      extendedInfo.append(""String_Node_Str"");
      extendedInfo.append(buf.readUnsignedByte());
      extendedInfo.append(""String_Node_Str"");
      extendedInfo.append(""String_Node_Str"");
      extendedInfo.append(buf.readUnsignedInt());
      extendedInfo.append(""String_Node_Str"");
      long extraFlags=buf.readLong();
      if ((extraFlags & 0x1) == 0x1) {
        int count=buf.readUnsignedShort();
        for (int i=1; i <= count; i++) {
          extendedInfo.append(""String_Node_Str"").append(i).append(""String_Node_Str"");
          extendedInfo.append(buf.readUnsignedShort());
          extendedInfo.append(""String_Node_Str"").append(i).append(""String_Node_Str"");
        }
      }
      if ((extraFlags & 0x2) == 0x2) {
        int size=buf.readUnsignedShort();
        extendedInfo.append(""String_Node_Str"");
        extendedInfo.append(buf.toString(buf.readerIndex(),size,Charset.defaultCharset()));
        extendedInfo.append(""String_Node_Str"");
        buf.skipBytes(size);
      }
      if ((extraFlags & 0x4) == 0x4) {
        int size=buf.readUnsignedShort();
        StringBuilder hex=new StringBuilder();
        for (int i=buf.readerIndex(); i < buf.readerIndex() + size; i++) {
          byte b=buf.getByte(i);
          hex.append(HEX_CHARS.charAt((b & 0xf0) >> 4));
          hex.append(HEX_CHARS.charAt((b & 0x0F)));
        }
        extendedInfo.append(""String_Node_Str"");
        extendedInfo.append(hex);
        extendedInfo.append(""String_Node_Str"");
        buf.skipBytes(size);
      }
      if (type == MSG_ALARM) {
        byte[] response={(byte)0xC9,0x00,0x00,0x00,0x00,0x00,0x00,0x00};
        channel.write(ChannelBuffers.wrappedBuffer(response));
        extendedInfo.append(""String_Node_Str"");
      }
 else       if (type == MSG_LOGMSG) {
        extendedInfo.append(""String_Node_Str"");
      }
      position.setExtendedInfo(extendedInfo.toString());
      positions.add(position);
    }
    return positions;
  }
  return null;
}","/** 
 * Decode message
 */
@Override protected Object decode(ChannelHandlerContext ctx,Channel channel,Object msg) throws Exception {
  ChannelBuffer buf=(ChannelBuffer)msg;
  int type=buf.readUnsignedShort();
  buf.readUnsignedShort();
  if (type == MSG_IDENT || type == MSG_IDENT_FULL) {
    long id=buf.readUnsignedInt();
    int length=buf.readUnsignedShort();
    buf.skipBytes(length);
    length=buf.readUnsignedShort();
    buf.skipBytes(length);
    length=buf.readUnsignedShort();
    String imei=buf.readBytes(length).toString(Charset.defaultCharset());
    try {
      deviceId=getDataManager().getDeviceByImei(imei).getId();
    }
 catch (    Exception error) {
      Log.warning(""String_Node_Str"" + imei + ""String_Node_Str""+ id+ ""String_Node_Str"");
    }
  }
 else   if ((type == MSG_POINT || type == MSG_ALARM || type == MSG_LOGMSG)) {
    List<Position> positions=new LinkedList<Position>();
    int recordCount=1;
    if (type == MSG_LOGMSG) {
      recordCount=buf.readUnsignedShort();
    }
    for (int j=0; j < recordCount; j++) {
      Position position=new Position();
      StringBuilder extendedInfo=new StringBuilder(""String_Node_Str"");
      position.setDeviceId(deviceId);
      if (type == MSG_LOGMSG) {
        extendedInfo.append(""String_Node_Str"");
        int subtype=buf.readUnsignedShort();
        if (subtype == MSG_ALARM) {
          extendedInfo.append(""String_Node_Str"");
        }
        buf.readUnsignedShort();
        lastIndex=buf.readUnsignedInt();
        position.setId(lastIndex);
      }
 else {
        newIndex=buf.readUnsignedInt();
      }
      Calendar time=Calendar.getInstance(TimeZone.getTimeZone(""String_Node_Str""));
      time.clear();
      time.setTimeInMillis(buf.readUnsignedInt() * 1000);
      position.setTime(time.getTime());
      position.setLatitude(((double)buf.readInt()) / 0x7FFFFFFF * 180.0);
      position.setLongitude(((double)buf.readInt()) / 0x7FFFFFFF * 180.0);
      position.setSpeed(((double)buf.readUnsignedInt()) / 100);
      position.setCourse(((double)buf.readUnsignedShort()) / 100);
      position.setAltitude(((double)buf.readUnsignedShort()) / 100);
      int satellitesNumber=buf.readUnsignedByte();
      extendedInfo.append(""String_Node_Str"");
      extendedInfo.append(satellitesNumber);
      extendedInfo.append(""String_Node_Str"");
      position.setValid(satellitesNumber >= 3);
      extendedInfo.append(""String_Node_Str"");
      extendedInfo.append(buf.readUnsignedByte());
      extendedInfo.append(""String_Node_Str"");
      extendedInfo.append(""String_Node_Str"");
      extendedInfo.append(buf.readUnsignedInt());
      extendedInfo.append(""String_Node_Str"");
      long extraFlags=buf.readLong();
      if ((extraFlags & 0x1) == 0x1) {
        int count=buf.readUnsignedShort();
        for (int i=1; i <= count; i++) {
          extendedInfo.append(""String_Node_Str"").append(i).append(""String_Node_Str"");
          extendedInfo.append(buf.readUnsignedShort());
          extendedInfo.append(""String_Node_Str"").append(i).append(""String_Node_Str"");
        }
      }
      if ((extraFlags & 0x2) == 0x2) {
        int size=buf.readUnsignedShort();
        extendedInfo.append(""String_Node_Str"");
        extendedInfo.append(buf.toString(buf.readerIndex(),size,Charset.defaultCharset()));
        extendedInfo.append(""String_Node_Str"");
        buf.skipBytes(size);
      }
      if ((extraFlags & 0x4) == 0x4) {
        int size=buf.readUnsignedShort();
        StringBuilder hex=new StringBuilder();
        for (int i=buf.readerIndex(); i < buf.readerIndex() + size; i++) {
          byte b=buf.getByte(i);
          hex.append(HEX_CHARS.charAt((b & 0xf0) >> 4));
          hex.append(HEX_CHARS.charAt((b & 0x0F)));
        }
        extendedInfo.append(""String_Node_Str"");
        extendedInfo.append(hex);
        extendedInfo.append(""String_Node_Str"");
        buf.skipBytes(size);
      }
      if (type == MSG_ALARM) {
        byte[] response={(byte)0xC9,0x00,0x00,0x00,0x00,0x00,0x00,0x00};
        channel.write(ChannelBuffers.wrappedBuffer(response));
        extendedInfo.append(""String_Node_Str"");
      }
      buf.readUnsignedInt();
      position.setExtendedInfo(extendedInfo.toString());
      positions.add(position);
    }
    requestArchive(channel);
    return positions;
  }
  return null;
}",0.9139339410441576
156228,"/** 
 * Decode message
 */
@Override protected Object decode(ChannelHandlerContext ctx,Channel channel,Object msg) throws Exception {
  ChannelBuffer buf=(ChannelBuffer)msg;
  int type=buf.readUnsignedShort();
  buf.readUnsignedShort();
  if (type == MSG_IDENT || type == MSG_IDENT_FULL) {
    long id=buf.readUnsignedInt();
    int length=buf.readUnsignedShort();
    buf.skipBytes(length);
    length=buf.readUnsignedShort();
    buf.skipBytes(length);
    length=buf.readUnsignedShort();
    String imei=buf.readBytes(length).toString(Charset.defaultCharset());
    try {
      deviceId=getDataManager().getDeviceByImei(imei).getId();
      loadLastIndex();
    }
 catch (    Exception error) {
      Log.warning(""String_Node_Str"" + imei + ""String_Node_Str""+ id+ ""String_Node_Str"");
    }
  }
 else   if (deviceId != 0 && (type == MSG_POINT || type == MSG_ALARM || type == MSG_LOGMSG)) {
    List<Position> positions=new LinkedList<Position>();
    int recordCount=1;
    if (type == MSG_LOGMSG) {
      recordCount=buf.readUnsignedShort();
    }
    for (int j=0; j < recordCount; j++) {
      Position position=new Position();
      StringBuilder extendedInfo=new StringBuilder(""String_Node_Str"");
      position.setDeviceId(deviceId);
      if (type == MSG_LOGMSG) {
        extendedInfo.append(""String_Node_Str"");
        int subtype=buf.readUnsignedShort();
        if (subtype == MSG_ALARM) {
          extendedInfo.append(""String_Node_Str"");
        }
        if (buf.readUnsignedShort() > buf.readableBytes()) {
          break;
        }
        lastIndex=buf.readUnsignedInt();
        position.setId(lastIndex);
      }
 else {
        newIndex=buf.readUnsignedInt();
      }
      Calendar time=Calendar.getInstance(TimeZone.getTimeZone(""String_Node_Str""));
      time.clear();
      time.setTimeInMillis(buf.readUnsignedInt() * 1000);
      position.setTime(time.getTime());
      position.setLatitude(((double)buf.readInt()) / 0x7FFFFFFF * 180.0);
      position.setLongitude(((double)buf.readInt()) / 0x7FFFFFFF * 180.0);
      position.setSpeed(((double)buf.readUnsignedInt()) / 100);
      position.setCourse(((double)buf.readUnsignedShort()) / 100);
      position.setAltitude(((double)buf.readUnsignedShort()) / 100);
      int satellitesNumber=buf.readUnsignedByte();
      extendedInfo.append(""String_Node_Str"");
      extendedInfo.append(satellitesNumber);
      extendedInfo.append(""String_Node_Str"");
      position.setValid(satellitesNumber >= 3);
      extendedInfo.append(""String_Node_Str"");
      extendedInfo.append(buf.readUnsignedByte());
      extendedInfo.append(""String_Node_Str"");
      extendedInfo.append(""String_Node_Str"");
      extendedInfo.append(buf.readUnsignedInt());
      extendedInfo.append(""String_Node_Str"");
      long extraFlags=buf.readLong();
      if ((extraFlags & 0x1) == 0x1) {
        int count=buf.readUnsignedShort();
        for (int i=1; i <= count; i++) {
          extendedInfo.append(""String_Node_Str"").append(i).append(""String_Node_Str"");
          extendedInfo.append(buf.readUnsignedShort());
          extendedInfo.append(""String_Node_Str"").append(i).append(""String_Node_Str"");
        }
      }
      if ((extraFlags & 0x2) == 0x2) {
        int size=buf.readUnsignedShort();
        extendedInfo.append(""String_Node_Str"");
        extendedInfo.append(buf.toString(buf.readerIndex(),size,Charset.defaultCharset()));
        extendedInfo.append(""String_Node_Str"");
        buf.skipBytes(size);
      }
      if ((extraFlags & 0x4) == 0x4) {
        int size=buf.readUnsignedShort();
        StringBuilder hex=new StringBuilder();
        for (int i=buf.readerIndex(); i < buf.readerIndex() + size; i++) {
          byte b=buf.getByte(i);
          hex.append(HEX_CHARS.charAt((b & 0xf0) >> 4));
          hex.append(HEX_CHARS.charAt((b & 0x0F)));
        }
        extendedInfo.append(""String_Node_Str"");
        extendedInfo.append(hex);
        extendedInfo.append(""String_Node_Str"");
        buf.skipBytes(size);
      }
      if (type == MSG_ALARM) {
        byte[] response={(byte)0xC9,0x00,0x00,0x00,0x00,0x00,0x00,0x00};
        channel.write(ChannelBuffers.wrappedBuffer(response));
        extendedInfo.append(""String_Node_Str"");
      }
      buf.readUnsignedInt();
      position.setExtendedInfo(extendedInfo.toString());
      positions.add(position);
    }
    requestArchive(channel);
    return positions;
  }
  return null;
}","/** 
 * Decode message
 */
@Override protected Object decode(ChannelHandlerContext ctx,Channel channel,Object msg) throws Exception {
  ChannelBuffer buf=(ChannelBuffer)msg;
  int type=buf.readUnsignedShort();
  buf.readUnsignedShort();
  if (type == MSG_IDENT || type == MSG_IDENT_FULL) {
    long id=buf.readUnsignedInt();
    int length=buf.readUnsignedShort();
    buf.skipBytes(length);
    length=buf.readUnsignedShort();
    buf.skipBytes(length);
    length=buf.readUnsignedShort();
    String imei=buf.readBytes(length).toString(Charset.defaultCharset());
    try {
      deviceId=getDataManager().getDeviceByImei(imei).getId();
      loadLastIndex();
    }
 catch (    Exception error) {
      Log.warning(""String_Node_Str"" + imei + ""String_Node_Str""+ id+ ""String_Node_Str"");
    }
  }
 else   if (deviceId != 0 && (type == MSG_POINT || type == MSG_ALARM || type == MSG_LOGMSG)) {
    List<Position> positions=new LinkedList<Position>();
    int recordCount=1;
    if (type == MSG_LOGMSG) {
      recordCount=buf.readUnsignedShort();
    }
    for (int j=0; j < recordCount; j++) {
      Position position=new Position();
      StringBuilder extendedInfo=new StringBuilder(""String_Node_Str"");
      position.setDeviceId(deviceId);
      if (type == MSG_LOGMSG) {
        extendedInfo.append(""String_Node_Str"");
        int subtype=buf.readUnsignedShort();
        if (subtype == MSG_ALARM) {
          extendedInfo.append(""String_Node_Str"");
        }
        if (buf.readUnsignedShort() > buf.readableBytes()) {
          lastIndex+=1;
          break;
        }
        lastIndex=buf.readUnsignedInt();
        position.setId(lastIndex);
      }
 else {
        newIndex=buf.readUnsignedInt();
      }
      Calendar time=Calendar.getInstance(TimeZone.getTimeZone(""String_Node_Str""));
      time.clear();
      time.setTimeInMillis(buf.readUnsignedInt() * 1000);
      position.setTime(time.getTime());
      position.setLatitude(((double)buf.readInt()) / 0x7FFFFFFF * 180.0);
      position.setLongitude(((double)buf.readInt()) / 0x7FFFFFFF * 180.0);
      position.setSpeed(((double)buf.readUnsignedInt()) / 100);
      position.setCourse(((double)buf.readUnsignedShort()) / 100);
      position.setAltitude(((double)buf.readUnsignedShort()) / 100);
      int satellitesNumber=buf.readUnsignedByte();
      extendedInfo.append(""String_Node_Str"");
      extendedInfo.append(satellitesNumber);
      extendedInfo.append(""String_Node_Str"");
      position.setValid(satellitesNumber >= 3);
      extendedInfo.append(""String_Node_Str"");
      extendedInfo.append(buf.readUnsignedByte());
      extendedInfo.append(""String_Node_Str"");
      extendedInfo.append(""String_Node_Str"");
      extendedInfo.append(buf.readUnsignedInt());
      extendedInfo.append(""String_Node_Str"");
      long extraFlags=buf.readLong();
      if ((extraFlags & 0x1) == 0x1) {
        int count=buf.readUnsignedShort();
        for (int i=1; i <= count; i++) {
          extendedInfo.append(""String_Node_Str"").append(i).append(""String_Node_Str"");
          extendedInfo.append(buf.readUnsignedShort());
          extendedInfo.append(""String_Node_Str"").append(i).append(""String_Node_Str"");
        }
      }
      if ((extraFlags & 0x2) == 0x2) {
        int size=buf.readUnsignedShort();
        extendedInfo.append(""String_Node_Str"");
        extendedInfo.append(buf.toString(buf.readerIndex(),size,Charset.defaultCharset()));
        extendedInfo.append(""String_Node_Str"");
        buf.skipBytes(size);
      }
      if ((extraFlags & 0x4) == 0x4) {
        int size=buf.readUnsignedShort();
        StringBuilder hex=new StringBuilder();
        for (int i=buf.readerIndex(); i < buf.readerIndex() + size; i++) {
          byte b=buf.getByte(i);
          hex.append(HEX_CHARS.charAt((b & 0xf0) >> 4));
          hex.append(HEX_CHARS.charAt((b & 0x0F)));
        }
        extendedInfo.append(""String_Node_Str"");
        extendedInfo.append(hex);
        extendedInfo.append(""String_Node_Str"");
        buf.skipBytes(size);
      }
      if (type == MSG_ALARM) {
        byte[] response={(byte)0xC9,0x00,0x00,0x00,0x00,0x00,0x00,0x00};
        channel.write(ChannelBuffers.wrappedBuffer(response));
        extendedInfo.append(""String_Node_Str"");
      }
      buf.readUnsignedInt();
      position.setExtendedInfo(extendedInfo.toString());
      positions.add(position);
    }
    requestArchive(channel);
    return positions;
  }
  return null;
}",0.9972881355932204
156229,"@Override public List<Event> getEventsSinceId(String workflowId,int eventId) throws IOException {
  WorkflowId id=WorkflowId.parseString(workflowId);
  FlowEventKey flowEventKey=new FlowEventKey(toFlowKey(id),eventId);
  List<FlowEvent> flowEventList=flowEventService.getFlowEventsSince(flowEventKey);
  List<Event> workflowEvents=new ArrayList<Event>();
  for (  FlowEvent flowEvent : flowEventList) {
    String eventDataJson=flowEvent.getEventDataJSON();
    try {
      Event event=Event.fromJson(eventDataJson);
      workflowEvents.add(event);
    }
 catch (    JsonMappingException e) {
      LOG.error(""String_Node_Str"" + eventDataJson,e);
    }
  }
  return workflowEvents;
}","@Override public List<Event> getEventsSinceId(String workflowId,int eventId,int maxEvents) throws IOException {
  Preconditions.checkArgument(maxEvents > 0);
  WorkflowId id=WorkflowId.parseString(workflowId);
  FlowEventKey flowEventKey=new FlowEventKey(toFlowKey(id),eventId);
  List<FlowEvent> flowEventList=flowEventService.getFlowEventsSince(flowEventKey);
  int numElems=0;
  List<Event> workflowEvents=new ArrayList<Event>();
  for (  FlowEvent flowEvent : flowEventList) {
    if (numElems >= maxEvents) {
      break;
    }
    String eventDataJson=flowEvent.getEventDataJSON();
    try {
      Event event=Event.fromJson(eventDataJson);
      numElems++;
      workflowEvents.add(event);
    }
 catch (    JsonMappingException e) {
      LOG.error(""String_Node_Str"" + eventDataJson,e);
    }
  }
  return workflowEvents;
}",0.9023746701846964
156230,"/** 
 * The onStarting event is fired when a Flow instance receives the start() message. -a Flow is cut down into executing units called stepFlow -stepFlow contains a stepFlowJob which represents the mapreduce job to be submitted to Hadoop -the DAG graph is constructed from the step graph found in flow object
 * @param flow
 */
@Override public void onStarting(Flow flow){
  List<BaseFlowStep> steps=flow.getFlowSteps();
  totalNumberOfJobs=steps.size();
  runnigJobs=0;
  currentFlowId=flow.getID();
  AmbroseCascadingGraphConverter convertor=new AmbroseCascadingGraphConverter((SimpleDirectedGraph)Flows.getStepGraphFrom(flow),dagNodeNameMap);
  convertor.convert();
  AmbroseUtils.sendDagNodeNameMap(statsWriteService,null,this.dagNodeNameMap);
}","/** 
 * The onStarting event is fired when a Flow instance receives the start() message. -a Flow is cut down into executing units called stepFlow -stepFlow contains a stepFlowJob which represents the mapreduce job to be submitted to Hadoop -the DAG graph is constructed from the step graph found in flow object
 * @param flow
 */
@Override public void onStarting(Flow flow){
  List<BaseFlowStep> steps=flow.getFlowSteps();
  totalNumberOfJobs=steps.size();
  runnigJobs=0;
  currentFlowId=flow.getID();
  Properties props=new Properties();
  props.putAll(flow.getConfigAsProperties());
  statsWriteService.initialize(props);
  AmbroseCascadingGraphConverter convertor=new AmbroseCascadingGraphConverter((SimpleDirectedGraph)Flows.getStepGraphFrom(flow),dagNodeNameMap);
  convertor.convert();
  AmbroseUtils.sendDagNodeNameMap(statsWriteService,null,this.dagNodeNameMap);
}",0.917487684729064
156231,"@Override public void sendDagNodeNameMap(String workflowId,Map dagNodeMap) throws IOException {
  Preconditions.checkNotNull(dagNodeMap);
  this.dagNodeNameMap=dagNodeMap;
  lazyInitWorkflow();
  updateFlowQueue(flowQueueKey);
}","@Override public void sendDagNodeNameMap(String workflowId,Map dagNodeMap) throws IOException {
  Preconditions.checkNotNull(dagNodeMap);
  this.dagNodeNameMap=dagNodeMap;
  updateFlowQueue(flowQueueKey);
}",0.9493087557603688
156232,"@SuppressWarnings(""String_Node_Str"") @Override public void pushEvent(String workflowId,Event event) throws IOException {
  lazyInitWorkflow();
  String eventDataJson=event.toJson();
switch (event.getType()) {
case WORKFLOW_PROGRESS:
    updateWorkflowProgress((Map<Event.WorkflowProgressField,String>)event.getPayload());
  break;
case JOB_STARTED:
updateJobStarted((DAGNode)event.getPayload());
break;
case JOB_FAILED:
case JOB_FINISHED:
updateJobComplete((DAGNode)event.getPayload(),event.getType());
break;
default :
break;
}
Preconditions.checkNotNull(flowKey,String.format(""String_Node_Str"",event.getType()));
FlowEventKey eventKey=new FlowEventKey(flowKey,event.getId());
FlowEvent flowEvent=new FlowEvent(eventKey);
flowEvent.setTimestamp(event.getTimestamp());
flowEvent.setFramework(JobDescFactory.getFramework(jobConf));
flowEvent.setType(event.getType().name());
if (eventDataJson != null) {
flowEvent.setEventDataJSON(eventDataJson);
}
hRavenPool.submit(new HRavenEventRunnable(flowEventService,flowEvent));
}","@SuppressWarnings(""String_Node_Str"") @Override public void pushEvent(String workflowId,Event event) throws IOException {
  String eventDataJson=event.toJson();
switch (event.getType()) {
case WORKFLOW_PROGRESS:
    updateWorkflowProgress((Map<Event.WorkflowProgressField,String>)event.getPayload());
  break;
case JOB_STARTED:
updateJobStarted((DAGNode)event.getPayload());
break;
case JOB_FAILED:
case JOB_FINISHED:
updateJobComplete((DAGNode)event.getPayload(),event.getType());
break;
default :
break;
}
Preconditions.checkNotNull(flowKey,String.format(""String_Node_Str"",event.getType()));
FlowEventKey eventKey=new FlowEventKey(flowKey,event.getId());
FlowEvent flowEvent=new FlowEvent(eventKey);
flowEvent.setTimestamp(event.getTimestamp());
flowEvent.setFramework(JobDescFactory.getFramework(jobConf));
flowEvent.setType(event.getType().name());
if (eventDataJson != null) {
flowEvent.setEventDataJSON(eventDataJson);
}
hRavenPool.submit(new HRavenEventRunnable(flowEventService,flowEvent));
}",0.9891089108910892
156233,"public HRavenStatsWriteService(JobConf jobConf){
  this.runningJobs=Sets.newHashSet();
  this.completedJobs=Sets.newHashSet();
  this.failedJobs=Sets.newHashSet();
  this.username=System.getProperty(""String_Node_Str"");
  this.jobConf=jobConf;
  this.hRavenPool=Executors.newFixedThreadPool(1);
  Runtime.getRuntime().addShutdownHook(new Thread(){
    @Override public void run(){
      shutdown();
    }
  }
);
}","public HRavenStatsWriteService(){
  this.runningJobs=Sets.newHashSet();
  this.completedJobs=Sets.newHashSet();
  this.failedJobs=Sets.newHashSet();
  this.username=System.getProperty(""String_Node_Str"");
  this.hRavenPool=Executors.newFixedThreadPool(1);
  Runtime.getRuntime().addShutdownHook(new Thread(){
    @Override public void run(){
      shutdown();
    }
  }
);
}",0.9503184713375796
156234,"/** 
 * Called after the job DAG has been created, but before any jobs are fired.
 * @param plan the MROperPlan that represents the DAG of operations. Each operation will becomea MapReduce job when it's launched.
 */
@Override public void initialPlanNotification(String scriptId,MROperPlan plan){
  log.info(""String_Node_Str"" + scriptId + ""String_Node_Str""+ plan);
  Preconditions.checkNotNull(pigConfig.getJobClient());
  Preconditions.checkNotNull(pigConfig.getJobGraph());
  Preconditions.checkNotNull(pigConfig.getPigProperties());
  this.workflowVersion=pigConfig.getPigProperties().getProperty(""String_Node_Str"");
  Map<OperatorKey,MapReduceOper> planKeys=plan.getKeys();
  for (  Map.Entry<OperatorKey,MapReduceOper> entry : planKeys.entrySet()) {
    String nodeName=entry.getKey().toString();
    String[] aliases=toArray(ScriptState.get().getAlias(entry.getValue()).trim());
    String[] features=toArray(ScriptState.get().getPigFeature(entry.getValue()).trim());
    PigJob job=new PigJob();
    job.setAliases(aliases);
    job.setFeatures(features);
    DAGNode<PigJob> node=new DAGNode<PigJob>(nodeName,job);
    this.dagNodeNameMap.put(node.getName(),node);
    log.info(""String_Node_Str"" + Arrays.toString(aliases) + ""String_Node_Str""+ node.getName()+ ""String_Node_Str""+ Arrays.toString(features));
  }
  for (  Map.Entry<OperatorKey,MapReduceOper> entry : planKeys.entrySet()) {
    DAGNode node=this.dagNodeNameMap.get(entry.getKey().toString());
    List<DAGNode<? extends Job>> successorNodeList=Lists.newArrayList();
    List<MapReduceOper> successors=plan.getSuccessors(entry.getValue());
    if (successors != null) {
      for (      MapReduceOper successor : successors) {
        DAGNode<? extends Job> successorNode=this.dagNodeNameMap.get(successor.getOperatorKey().toString());
        successorNodeList.add(successorNode);
      }
    }
    node.setSuccessors(successorNodeList);
  }
  AmbroseUtils.sendDagNodeNameMap(statsWriteService,scriptId,dagNodeNameMap);
}","/** 
 * Called after the job DAG has been created, but before any jobs are fired.
 * @param plan the MROperPlan that represents the DAG of operations. Each operation will becomea MapReduce job when it's launched.
 */
@Override public void initialPlanNotification(String scriptId,MROperPlan plan){
  log.info(""String_Node_Str"" + scriptId + ""String_Node_Str""+ plan);
  Preconditions.checkNotNull(pigConfig.getJobClient());
  Preconditions.checkNotNull(pigConfig.getJobGraph());
  Preconditions.checkNotNull(pigConfig.getPigProperties());
  statsWriteService.initialize(pigConfig.getPigProperties());
  this.workflowVersion=pigConfig.getPigProperties().getProperty(""String_Node_Str"");
  Map<OperatorKey,MapReduceOper> planKeys=plan.getKeys();
  for (  Map.Entry<OperatorKey,MapReduceOper> entry : planKeys.entrySet()) {
    String nodeName=entry.getKey().toString();
    String[] aliases=toArray(ScriptState.get().getAlias(entry.getValue()).trim());
    String[] features=toArray(ScriptState.get().getPigFeature(entry.getValue()).trim());
    PigJob job=new PigJob();
    job.setAliases(aliases);
    job.setFeatures(features);
    DAGNode<PigJob> node=new DAGNode<PigJob>(nodeName,job);
    this.dagNodeNameMap.put(node.getName(),node);
    log.info(""String_Node_Str"" + Arrays.toString(aliases) + ""String_Node_Str""+ node.getName()+ ""String_Node_Str""+ Arrays.toString(features));
  }
  for (  Map.Entry<OperatorKey,MapReduceOper> entry : planKeys.entrySet()) {
    DAGNode node=this.dagNodeNameMap.get(entry.getKey().toString());
    List<DAGNode<? extends Job>> successorNodeList=Lists.newArrayList();
    List<MapReduceOper> successors=plan.getSuccessors(entry.getValue());
    if (successors != null) {
      for (      MapReduceOper successor : successors) {
        DAGNode<? extends Job> successorNode=this.dagNodeNameMap.get(successor.getOperatorKey().toString());
        successorNodeList.add(successorNode);
      }
    }
    node.setSuccessors(successorNodeList);
  }
  AmbroseUtils.sendDagNodeNameMap(statsWriteService,scriptId,dagNodeNameMap);
}",0.9846837944664032
156235,"public APIHandler(StatsReadService statsReadService){
  this.statsReadService=statsReadService;
}","public APIHandler(WorkflowIndexReadService workflowIndexReadService,StatsReadService<Job> statsReadService){
  this.workflowIndexReadService=workflowIndexReadService;
  this.statsReadService=statsReadService;
}",0.5276872964169381
156236,"@Override public void handle(String target,HttpServletRequest request,HttpServletResponse response,int dispatch) throws IOException, ServletException {
  if (target.endsWith(""String_Node_Str"")) {
    response.setContentType(MIME_TYPE_JSON);
    response.setStatus(HttpServletResponse.SC_OK);
    Collection<DAGNode> nodes=statsReadService.getDagNodeNameMap(request.getParameter(QUERY_PARAM_WORKFLOW_ID)).values();
    sendJson(request,response,nodes.toArray(new DAGNode[nodes.size()]));
  }
 else   if (target.endsWith(""String_Node_Str"")) {
    response.setContentType(MIME_TYPE_JSON);
    response.setStatus(HttpServletResponse.SC_OK);
    Integer sinceId=request.getParameter(QUERY_PARAM_LAST_EVENT_ID) != null ? Integer.parseInt(request.getParameter(QUERY_PARAM_LAST_EVENT_ID)) : -1;
    Collection<Event> events=statsReadService.getEventsSinceId(request.getParameter(QUERY_PARAM_WORKFLOW_ID),sinceId);
    sendJson(request,response,events.toArray(new Event[events.size()]));
  }
 else   if (target.endsWith(""String_Node_Str"")) {
    response.setContentType(MIME_TYPE_HTML);
  }
}","@Override public void handle(String target,HttpServletRequest request,HttpServletResponse response,int dispatch) throws IOException, ServletException {
  if (target.endsWith(""String_Node_Str"")) {
    response.setContentType(MIME_TYPE_JSON);
    response.setStatus(HttpServletResponse.SC_OK);
    String cluster=request.getParameter(QUERY_PARAM_CLUSTER);
    String userId=request.getParameter(QUERY_PARAM_USER_ID);
    String status=request.getParameter(QUERY_PARAM_STATUS);
    String startKey=request.getParameter(QUERY_PARAM_START_KEY);
    PaginatedList<WorkflowSummary> workflows=workflowIndexReadService.getWorkflows(cluster,status != null ? WorkflowSummary.Status.valueOf(status) : null,userId,10,startKey != null ? startKey.getBytes(Charsets.UTF_8) : null);
    sendJson(request,response,workflows);
  }
 else   if (target.endsWith(""String_Node_Str"")) {
    response.setContentType(MIME_TYPE_JSON);
    response.setStatus(HttpServletResponse.SC_OK);
    Map<String,DAGNode<Job>> dagNodeNameMap=statsReadService.getDagNodeNameMap(request.getParameter(QUERY_PARAM_WORKFLOW_ID));
    Collection<DAGNode<Job>> nodes=dagNodeNameMap.values();
    sendJson(request,response,nodes.toArray(new DAGNode[nodes.size()]));
  }
 else   if (target.endsWith(""String_Node_Str"")) {
    response.setContentType(MIME_TYPE_JSON);
    response.setStatus(HttpServletResponse.SC_OK);
    Integer sinceId=request.getParameter(QUERY_PARAM_LAST_EVENT_ID) != null ? Integer.parseInt(request.getParameter(QUERY_PARAM_LAST_EVENT_ID)) : -1;
    Collection<Event> events=statsReadService.getEventsSinceId(request.getParameter(QUERY_PARAM_WORKFLOW_ID),sinceId);
    sendJson(request,response,events.toArray(new Event[events.size()]));
  }
 else   if (target.endsWith(""String_Node_Str"")) {
    response.setContentType(MIME_TYPE_HTML);
  }
}",0.7380048325854333
156237,"public ScriptStatusServer(StatsReadService statsReadService){
  this.statsReadService=statsReadService;
  this.port=getConfiguredPort();
}","public ScriptStatusServer(WorkflowIndexReadService workflowIndexReadService,StatsReadService<Job> statsReadService){
  this.workflowIndexReadService=workflowIndexReadService;
  this.statsReadService=statsReadService;
  this.port=getConfiguredPort();
}",0.6272493573264781
156238,"/** 
 * Run the server in the current thread.
 */
@Override public void run(){
  Connector connector=new SocketConnector(){
    @Override protected ServerSocket newServerSocket(    String host,    int port,    int backlog) throws IOException {
      ServerSocket ss=super.newServerSocket(host,port,backlog);
      int localPort=ss.getLocalPort();
      LOG.info(""String_Node_Str"",localPort);
      LOG.info(""String_Node_Str"",localPort);
      return ss;
    }
  }
;
  connector.setPort(port);
  server=new Server();
  server.setConnectors(new Connector[]{connector});
  URL resourcesUrl=this.getClass().getClassLoader().getResource(ROOT_PATH);
  HandlerList handler=new HandlerList();
  handler.setHandlers(new Handler[]{new APIHandler(statsReadService),new WebAppContext(resourcesUrl.toExternalForm(),SLASH)});
  server.setHandler(handler);
  server.setStopAtShutdown(false);
  try {
    server.start();
    server.join();
  }
 catch (  Exception e) {
    LOG.error(""String_Node_Str"",e);
  }
}","/** 
 * Run the server in the current thread.
 */
@Override public void run(){
  Connector connector=new SocketConnector(){
    @Override protected ServerSocket newServerSocket(    String host,    int port,    int backlog) throws IOException {
      ServerSocket ss=super.newServerSocket(host,port,backlog);
      int localPort=ss.getLocalPort();
      LOG.info(""String_Node_Str"",localPort);
      LOG.info(""String_Node_Str"",localPort);
      return ss;
    }
  }
;
  connector.setPort(port);
  server=new Server();
  server.setConnectors(new Connector[]{connector});
  URL resourcesUrl=this.getClass().getClassLoader().getResource(ROOT_PATH);
  HandlerList handler=new HandlerList();
  handler.setHandlers(new Handler[]{new APIHandler(workflowIndexReadService,statsReadService),new WebAppContext(resourcesUrl.toExternalForm(),SLASH)});
  server.setHandler(handler);
  server.setStopAtShutdown(false);
  try {
    server.start();
    server.join();
  }
 catch (  Exception e) {
    LOG.error(""String_Node_Str"",e);
  }
}",0.9875807252856432
156239,"@Override public synchronized void pushEvent(String workflowId,Event event) throws IOException {
  eventMap.put(event.getId(),event);
  if (event.getType() == Event.Type.WORKFLOW_PROGRESS) {
    Event.WorkflowProgressEvent workflowProgressEvent=(Event.WorkflowProgressEvent)event;
    String progressString=workflowProgressEvent.getPayload().get(Event.WorkflowProgressField.workflowProgress);
    summary.setProgress(Integer.parseInt(progressString));
  }
  writeJsonEventToDisk(event);
}","@Override public synchronized void pushEvent(String workflowId,Event event) throws IOException {
  eventMap.put(event.getId(),event);
switch (event.getType()) {
case WORKFLOW_PROGRESS:
    Event.WorkflowProgressEvent workflowProgressEvent=(Event.WorkflowProgressEvent)event;
  String progressString=workflowProgressEvent.getPayload().get(Event.WorkflowProgressField.workflowProgress);
int progress=Integer.parseInt(progressString);
summary.setProgress(progress);
if (progress == 100) {
summary.setStatus(jobFailed ? WorkflowSummary.Status.FAILED : WorkflowSummary.Status.SUCCEEDED);
}
break;
case JOB_FAILED:
jobFailed=true;
default :
}
writeJsonEventToDisk(event);
}",0.3688311688311688
156240,"@JsonIgnore public synchronized Collection<DAGNode<? extends Job>> getSuccessors(){
  return successors;
}","public synchronized Collection<DAGNode<? extends Job>> getSuccessors(){
  return successors;
}",0.94
156241,"@JsonCreator public DAGNode(@JsonProperty(""String_Node_Str"") String name,@JsonProperty(""String_Node_Str"") T job,@JsonProperty(""String_Node_Str"") Collection<String> successorNames){
  this.name=name;
  this.successorNames=successorNames;
}","public DAGNode(){
  this(null,null);
}",0.217391304347826
156242,"@JsonCreator public Job(@JsonProperty(""String_Node_Str"") String runtime,@JsonProperty(""String_Node_Str"") String id,@JsonProperty(""String_Node_Str"") Map<String,Number> metrics,@JsonProperty(""String_Node_Str"") Properties configuration){
  this.runtime=runtime;
  this.id=id;
  this.metrics=metrics;
  this.configuration=configuration;
}","public Job(String id,Map<String,Number> metrics,Properties configuration){
  this.id=id;
  this.metrics=metrics;
  this.configuration=configuration;
}",0.6198347107438017
156243,"@Test public void testRoundTrip() throws IOException {
  DAGNode<Job> node=new DAGNode<Job>(""String_Node_Str"",new Job(""String_Node_Str"",""String_Node_Str"",null,null));
  testRoundTrip(node);
}","@Test public void testRoundTrip() throws IOException {
  DAGNode<Job> node=new DAGNode<Job>(""String_Node_Str"",new Job(""String_Node_Str"",null,null));
  testRoundTrip(node);
}",0.9505494505494504
156244,"@Test public void testRoundTrip() throws IOException {
  Map<String,Number> metrics=new HashMap<String,Number>();
  metrics.put(""String_Node_Str"",6);
  Properties properties=new Properties();
  properties.setProperty(""String_Node_Str"",""String_Node_Str"");
  Job job=new Job(""String_Node_Str"",""String_Node_Str"",metrics,properties);
  testRoundTrip(job);
}","@Test public void testRoundTrip() throws IOException {
  Map<String,Number> metrics=new HashMap<String,Number>();
  metrics.put(""String_Node_Str"",6);
  Properties properties=new Properties();
  properties.setProperty(""String_Node_Str"",""String_Node_Str"");
  Job job=new Job(""String_Node_Str"",metrics,properties);
  testRoundTrip(job);
}",0.9738372093023256
156245,"public static void assertJobEquals(Job expected,Job found){
  assertEquals(expected.getRuntime(),found.getRuntime());
  assertEquals(expected.getId(),found.getId());
  assertEquals(expected.getMetrics(),found.getMetrics());
  assertEquals(expected.getConfiguration(),found.getConfiguration());
}","public static void assertJobEquals(Job expected,Job found){
  assertEquals(expected.getId(),found.getId());
  assertEquals(expected.getMetrics(),found.getMetrics());
  assertEquals(expected.getConfiguration(),found.getConfiguration());
}",0.5902255639097744
156246,"@JsonCreator public PigJob(@JsonProperty(""String_Node_Str"") String id,@JsonProperty(""String_Node_Str"") String[] aliases,@JsonProperty(""String_Node_Str"") String[] features){
  super(RUNTIME);
  this.aliases=aliases;
  this.features=features;
  this.mapReduceJobState=mapReduceJobState;
  this.counterGroupMap=counterGroupMap;
  this.inputInfoList=inputInfoList;
  this.outputInfoList=outputInfoList;
}","@JsonCreator public PigJob(@JsonProperty(""String_Node_Str"") String id,@JsonProperty(""String_Node_Str"") String[] aliases,@JsonProperty(""String_Node_Str"") String[] features){
  super(id,null,null);
  this.aliases=aliases;
  this.features=features;
  this.mapReduceJobState=mapReduceJobState;
  this.counterGroupMap=counterGroupMap;
  this.inputInfoList=inputInfoList;
  this.outputInfoList=outputInfoList;
}",0.5565217391304348
156247,"public static void assertJobEquals(PigJob expected,PigJob found){
  assertEquals(expected.getRuntime(),found.getRuntime());
  assertEquals(expected.getId(),found.getId());
  assertArrayEquals(expected.getAliases(),found.getAliases());
  assertArrayEquals(expected.getFeatures(),found.getFeatures());
  assertEquals(expected.getMetrics(),found.getMetrics());
  assertEquals(expected.getConfiguration(),found.getConfiguration());
}","public static void assertJobEquals(PigJob expected,PigJob found){
  assertEquals(expected.getId(),found.getId());
  assertArrayEquals(expected.getAliases(),found.getAliases());
  assertArrayEquals(expected.getFeatures(),found.getFeatures());
  assertEquals(expected.getMetrics(),found.getMetrics());
  assertEquals(expected.getConfiguration(),found.getConfiguration());
}",0.9275
156248,"@Test public void testGetEventsSince(){
  for (  WorkflowEvent event : testEvents) {
    service.pushEvent(workflowId,event);
  }
  Collection<WorkflowEvent> allEvents=service.getEventsSinceId(workflowId,-1);
  int sinceId=allEvents.iterator().next().getEventId();
  Collection<WorkflowEvent> events=service.getEventsSinceId(workflowId,sinceId);
  Iterator<WorkflowEvent> foundEvents=events.iterator();
  assertEquals(""String_Node_Str"",testEvents.length - 1,events.size());
  for (  WorkflowEvent sentEvent : testEvents) {
    if (sentEvent.getEventId() <= sinceId) {
      continue;
    }
    assertEqualWorkflows(sentEvent,foundEvents.next());
  }
  assertFalse(""String_Node_Str"",foundEvents.hasNext());
}","@Test public void testGetEventsSince() throws IOException {
  for (  WorkflowEvent event : testEvents) {
    service.pushEvent(workflowId,event);
  }
  Collection<WorkflowEvent> allEvents=service.getEventsSinceId(workflowId,-1);
  int sinceId=allEvents.iterator().next().getEventId();
  Collection<WorkflowEvent> events=service.getEventsSinceId(workflowId,sinceId);
  Iterator<WorkflowEvent> foundEvents=events.iterator();
  assertEquals(""String_Node_Str"",testEvents.length - 1,events.size());
  for (  WorkflowEvent sentEvent : testEvents) {
    if (sentEvent.getEventId() <= sinceId) {
      continue;
    }
    assertEqualWorkflows(sentEvent,foundEvents.next());
  }
  assertFalse(""String_Node_Str"",foundEvents.hasNext());
}",0.9860529986052998
156249,"@Test public void testGetAllEvents(){
  for (  WorkflowEvent event : testEvents) {
    service.pushEvent(workflowId,event);
  }
  Collection<WorkflowEvent> events=service.getEventsSinceId(workflowId,-1);
  Iterator<WorkflowEvent> foundEvents=events.iterator();
  assertTrue(""String_Node_Str"",foundEvents.hasNext());
  for (  WorkflowEvent sentEvent : testEvents) {
    assertEqualWorkflows(sentEvent,foundEvents.next());
  }
  assertFalse(""String_Node_Str"",foundEvents.hasNext());
}","@Test public void testGetAllEvents() throws IOException {
  for (  WorkflowEvent event : testEvents) {
    service.pushEvent(workflowId,event);
  }
  Collection<WorkflowEvent> events=service.getEventsSinceId(workflowId,-1);
  Iterator<WorkflowEvent> foundEvents=events.iterator();
  assertTrue(""String_Node_Str"",foundEvents.hasNext());
  for (  WorkflowEvent sentEvent : testEvents) {
    assertEqualWorkflows(sentEvent,foundEvents.next());
  }
  assertFalse(""String_Node_Str"",foundEvents.hasNext());
}",0.9796747967479674
156250,"/** 
 * Called whenever the block holding this tile is exploded. Called by  {@link Block#onBlockExploded(World,BlockPos,Explosion)} 
 */
public void onExplode(Explosion explosion){
  onRemove();
}","/** 
 * Called whenever the block holding this tile is exploded. Called by  {@link Block#onBlockExploded(World,BlockPos,Explosion)} 
 */
public void onExplode(Explosion explosion){
}",0.9629629629629628
156251,"private void updateConnections(){
  if (holder.getPipeWorld().isRemote) {
    return;
  }
  updateMarked=false;
  EnumMap<EnumFacing,Float> old=connected.clone();
  connected.clear();
  types.clear();
  for (  EnumFacing facing : EnumFacing.VALUES) {
    PipePluggable plug=getHolder().getPluggable(facing);
    if (plug != null && plug.isBlocking()) {
      continue;
    }
    TileEntity oTile=getHolder().getNeighbourTile(facing);
    if (oTile == null) {
      continue;
    }
    IPipe oPipe=getHolder().getNeighbourPipe(facing);
    if (oPipe != null) {
      PipeBehaviour oBehaviour=oPipe.getBehaviour();
      if (oBehaviour == null) {
        continue;
      }
      PipePluggable oPlug=oTile.getCapability(PipeApi.CAP_PLUG,facing.getOpposite());
      if (oPlug == null || !oPlug.isBlocking()) {
        if (canPipesConnect(facing,this,oPipe)) {
          connected.put(facing,DEFAULT_CONNECTION_DISTANCE);
          types.put(facing,ConnectedType.PIPE);
        }
        continue;
      }
    }
    BlockPos nPos=holder.getPipePos().offset(facing);
    IBlockState neighbour=holder.getPipeWorld().getBlockState(nPos);
    ICustomPipeConnection cust=PipeConnectionAPI.getCustomConnection(neighbour.getBlock());
    if (cust == null) {
      cust=DefaultPipeConnection.INSTANCE;
    }
    float ext=DEFAULT_CONNECTION_DISTANCE + cust.getExtension(holder.getPipeWorld(),nPos,facing.getOpposite(),neighbour);
    if (behaviour.canConnect(facing,oTile) & flow.canConnect(facing,oTile)) {
      connected.put(facing,ext);
      types.put(facing,ConnectedType.TILE);
    }
  }
  if (!old.equals(connected)) {
    for (    EnumFacing face : EnumFacing.VALUES) {
      boolean o=old.containsKey(face);
      boolean n=connected.containsKey(face);
      if (o != n) {
        IPipe oPipe=getHolder().getNeighbourPipe(face);
        if (oPipe != null) {
          oPipe.markForUpdate();
        }
      }
    }
  }
  getHolder().scheduleNetworkUpdate(PipeMessageReceiver.BEHAVIOUR);
}","private void updateConnections(){
  if (holder.getPipeWorld().isRemote) {
    return;
  }
  updateMarked=false;
  EnumMap<EnumFacing,Float> old=connected.clone();
  connected.clear();
  types.clear();
  for (  EnumFacing facing : EnumFacing.VALUES) {
    PipePluggable plug=getHolder().getPluggable(facing);
    if (plug != null && plug.isBlocking()) {
      continue;
    }
    TileEntity oTile=getHolder().getNeighbourTile(facing);
    if (oTile == null) {
      continue;
    }
    IPipe oPipe=getHolder().getNeighbourPipe(facing);
    if (oPipe != null) {
      PipeBehaviour oBehaviour=oPipe.getBehaviour();
      if (oBehaviour == null) {
        continue;
      }
      PipePluggable oPlug=oTile.getCapability(PipeApi.CAP_PLUG,facing.getOpposite());
      if (oPlug == null || !oPlug.isBlocking()) {
        if (canPipesConnect(facing,this,oPipe)) {
          connected.put(facing,DEFAULT_CONNECTION_DISTANCE);
          types.put(facing,ConnectedType.PIPE);
        }
        continue;
      }
    }
    BlockPos nPos=holder.getPipePos().offset(facing);
    IBlockState neighbour=holder.getPipeWorld().getBlockState(nPos);
    ICustomPipeConnection cust=PipeConnectionAPI.getCustomConnection(neighbour.getBlock());
    if (cust == null) {
      cust=DefaultPipeConnection.INSTANCE;
    }
    float ext=DEFAULT_CONNECTION_DISTANCE + cust.getExtension(holder.getPipeWorld(),nPos,facing.getOpposite(),neighbour);
    if (behaviour.canConnect(facing,oTile) && flow.canConnect(facing,oTile)) {
      connected.put(facing,ext);
      types.put(facing,ConnectedType.TILE);
    }
  }
  if (!old.equals(connected)) {
    for (    EnumFacing face : EnumFacing.VALUES) {
      boolean o=old.containsKey(face);
      boolean n=connected.containsKey(face);
      if (o != n) {
        IPipe oPipe=getHolder().getNeighbourPipe(face);
        if (oPipe != null) {
          oPipe.markForUpdate();
        }
      }
    }
  }
  getHolder().scheduleNetworkUpdate(PipeMessageReceiver.BEHAVIOUR);
}",0.9997483010319658
156252,"/** 
 * @return A list of itemstacks that are dropped from the block, or null if the block is air
 */
@Nullable public static NonNullList<ItemStack> getItemStackFromBlock(WorldServer world,BlockPos pos,GameProfile owner){
  IBlockState state=world.getBlockState(pos);
  Block block=state.getBlock();
  if (block.isAir(state,world,pos)) {
    return null;
  }
  NonNullList<ItemStack> dropsList=NonNullList.create();
  block.getDrops(dropsList,world,pos,state,0);
  EntityPlayer fakePlayer=BuildCraftAPI.fakePlayerProvider.getFakePlayer(world,owner,pos);
  float dropChance=ForgeEventFactory.fireBlockHarvesting(dropsList,world,pos,state,0,1.0F,false,fakePlayer);
  NonNullList<ItemStack> returnList=NonNullList.create();
  for (  ItemStack s : dropsList) {
    if (world.rand.nextFloat() <= dropChance) {
      returnList.add(s);
    }
  }
  return returnList;
}","/** 
 * @return A list of itemstacks that are dropped from the block, or null if the block is air
 */
@Nullable public static NonNullList<ItemStack> getItemStackFromBlock(WorldServer world,BlockPos pos,GameProfile owner){
  IBlockState state=world.getBlockState(pos);
  Block block=state.getBlock();
  if (block.isAir(state,world,pos)) {
    return null;
  }
  List<ItemStack> drops=block.getDrops(world,pos,state,0);
  EntityPlayer fakePlayer=BuildCraftAPI.fakePlayerProvider.getFakePlayer(world,owner,pos);
  float dropChance=ForgeEventFactory.fireBlockHarvesting(drops,world,pos,state,0,1.0F,false,fakePlayer);
  NonNullList<ItemStack> returnList=NonNullList.create();
  for (  ItemStack s : drops) {
    if (world.rand.nextFloat() <= dropChance) {
      returnList.add(s);
    }
  }
  return returnList;
}",0.9682824655894674
156253,"public static void init(){
  PipeConnectionAPI.registerConnection(Blocks.BREWING_STAND,(world,pos,face,state) -> face.getAxis().getPlane() == EnumFacing.Plane.HORIZONTAL ? 4 / 16F : 0);
  PipeApi.stripeRegistry.addHandler(StripesHandlerPlant.INSTANCE);
  PipeApi.stripeRegistry.addHandler(StripesHandlerShears.INSTANCE);
  PipeApi.stripeRegistry.addHandler(new StripesHandlerPipes());
  PipeApi.stripeRegistry.addHandler(StripesHandlerEntityInteract.INSTANCE,EnumHandlerPriority.LOW);
  PipeApi.stripeRegistry.addHandler(StripesHandlerHoe.INSTANCE);
  PipeApi.stripeRegistry.addHandler(StripesHandlerDispenser.INSTANCE,EnumHandlerPriority.LOW);
  PipeApi.stripeRegistry.addHandler(StripesHandlerPlaceBlock.INSTANCE,EnumHandlerPriority.LOW);
  PipeApi.stripeRegistry.addHandler(StripesHandlerUse.INSTANCE,EnumHandlerPriority.LOW);
  PipeApi.stripeRegistry.addHandler(StripesHandlerMinecartDestroy.INSTANCE);
  BCTransportRegistries.extensionManager.registerRetractionPipe(BCTransportPipes.voidItem);
}","public static void init(){
  PipeConnectionAPI.registerConnection(Blocks.BREWING_STAND,(world,pos,face,state) -> face.getAxis().getPlane() == EnumFacing.Plane.HORIZONTAL ? 4 / 16F : 0);
  PipeApi.stripeRegistry.addHandler(StripesHandlerPlant.INSTANCE);
  PipeApi.stripeRegistry.addHandler(StripesHandlerShears.INSTANCE);
  PipeApi.stripeRegistry.addHandler(new StripesHandlerPipes());
  PipeApi.stripeRegistry.addHandler(StripesHandlerEntityInteract.INSTANCE,EnumHandlerPriority.LOW);
  PipeApi.stripeRegistry.addHandler(StripesHandlerHoe.INSTANCE);
  PipeApi.stripeRegistry.addHandler(StripesHandlerDispenser.INSTANCE,EnumHandlerPriority.LOW);
  PipeApi.stripeRegistry.addHandler(StripesHandlerPlaceBlock.INSTANCE,EnumHandlerPriority.LOW);
  PipeApi.stripeRegistry.addHandler(StripesHandlerUse.INSTANCE,EnumHandlerPriority.LOW);
  PipeApi.stripeRegistry.addHandler(StripesHandlerMinecartDestroy.INSTANCE);
  PipeApi.extensionManager.registerRetractionPipe(BCTransportPipes.voidItem);
}",0.944612286002014
156254,"public static void preInit(){
  FacadeAPI.registry=FacadeStateManager.INSTANCE;
  PipeApi.pipeRegistry=PipeRegistry.INSTANCE;
  PipeApi.pluggableRegistry=PluggableRegistry.INSTANCE;
  PipeApi.stripeRegistry=StripesRegistry.INSTANCE;
  BCTransportRegistries.extensionManager=PipeExtensionManager.INSTANCE;
  MinecraftForge.EVENT_BUS.register(PipeExtensionManager.INSTANCE);
  PipeApi.flowItems=new PipeFlowType(PipeFlowItems::new,PipeFlowItems::new);
  PipeApi.flowFluids=new PipeFlowType(PipeFlowFluids::new,PipeFlowFluids::new);
  PipeApi.flowPower=new PipeFlowType(PipeFlowPower::new,PipeFlowPower::new);
  PipeApi.flowStructure=new PipeFlowType(PipeFlowStructure::new,PipeFlowStructure::new);
}","public static void preInit(){
  FacadeAPI.registry=FacadeStateManager.INSTANCE;
  PipeApi.pipeRegistry=PipeRegistry.INSTANCE;
  PipeApi.pluggableRegistry=PluggableRegistry.INSTANCE;
  PipeApi.stripeRegistry=StripesRegistry.INSTANCE;
  PipeApi.extensionManager=PipeExtensionManager.INSTANCE;
  MinecraftForge.EVENT_BUS.register(PipeExtensionManager.INSTANCE);
  PipeApi.flowItems=new PipeFlowType(PipeFlowItems::new,PipeFlowItems::new);
  PipeApi.flowFluids=new PipeFlowType(PipeFlowFluids::new,PipeFlowFluids::new);
  PipeApi.flowPower=new PipeFlowType(PipeFlowPower::new,PipeFlowPower::new);
  PipeApi.flowStructure=new PipeFlowType(PipeFlowStructure::new,PipeFlowStructure::new);
}",0.9797101449275364
156255,"@Override public List<ItemStack> getDrops(IBlockAccess world,BlockPos pos,IBlockState state,int fortune){
  NonNullList<ItemStack> toDrop=NonNullList.create();
  TilePipeHolder tile=getPipe(world,pos,false);
  for (  EnumFacing face : EnumFacing.VALUES) {
    PipePluggable pluggable=tile.getPluggable(face);
    if (pluggable != null) {
      pluggable.addDrops(toDrop,fortune);
    }
  }
  for (  EnumDyeColor color : tile.wireManager.parts.values()) {
    toDrop.add(new ItemStack(BCTransportItems.wire,1,color.getMetadata()));
  }
  Pipe pipe=tile.getPipe();
  if (pipe != null) {
    pipe.addDrops(toDrop,fortune);
  }
  return toDrop;
}","@Override public void getDrops(NonNullList<ItemStack> toDrop,IBlockAccess world,BlockPos pos,IBlockState state,int fortune){
  TilePipeHolder tile=getPipe(world,pos,false);
  for (  EnumFacing face : EnumFacing.VALUES) {
    PipePluggable pluggable=tile.getPluggable(face);
    if (pluggable != null) {
      pluggable.addDrops(toDrop,fortune);
    }
  }
  for (  EnumDyeColor color : tile.wireManager.parts.values()) {
    toDrop.add(new ItemStack(BCTransportItems.wire,1,color.getMetadata()));
  }
  Pipe pipe=tile.getPipe();
  if (pipe != null) {
    pipe.addDrops(toDrop,fortune);
  }
}",0.9123376623376624
156256,"@Override public boolean handle(World world,BlockPos pos,EnumFacing direction,ItemStack stack,EntityPlayer player,IStripesActivator activator){
  if (!(stack.getItem() instanceof IItemPipe)) {
    return false;
  }
  PipeDefinition pipeDefinition=((IItemPipe)stack.getItem()).getDefinition();
  if (pipeDefinition.flowType == PipeApi.flowItems) {
    if (BCTransportRegistries.extensionManager.requestPipeExtension(world,pos,direction,activator,stack.copy())) {
      player.inventory.clear();
      return true;
    }
  }
  return false;
}","@Override public boolean handle(World world,BlockPos pos,EnumFacing direction,ItemStack stack,EntityPlayer player,IStripesActivator activator){
  if (!(stack.getItem() instanceof IItemPipe)) {
    return false;
  }
  PipeDefinition pipeDefinition=((IItemPipe)stack.getItem()).getDefinition();
  if (pipeDefinition.flowType == PipeApi.flowItems) {
    if (PipeApi.extensionManager.requestPipeExtension(world,pos,direction,activator,stack.copy())) {
      player.inventory.clear();
      return true;
    }
  }
  return false;
}",0.9737335834896812
156257,"@Override public boolean load(IResourceManager manager,ResourceLocation location,Function<ResourceLocation,TextureAtlasSprite> textureGetter){
  ResourceLocation from=SpriteUtil.transformLocation(fromName);
  AtlasSpriteDirect sprite=loadSprite(manager,from.toString(),from,true);
  if (sprite == null) {
    BCLog.logger.warn(""String_Node_Str"" + from + ""String_Node_Str"");
    return true;
  }
  for (int f=0; f < sprite.getFrameCount(); f++) {
    recolourFrame(sprite,f);
  }
  swapWith(sprite);
  return false;
}","@Override public boolean load(IResourceManager manager,ResourceLocation location,Function<ResourceLocation,TextureAtlasSprite> textureGetter){
  ResourceLocation from=SpriteUtil.transformLocation(fromName);
  TextureAtlasSprite sprite=loadSprite(manager,from.toString(),from,true);
  if (sprite == null) {
    BCLog.logger.warn(""String_Node_Str"" + from + ""String_Node_Str"");
    return true;
  }
  for (int f=0; f < sprite.getFrameCount(); f++) {
    recolourFrame(sprite,f);
  }
  swapWith(sprite);
  return false;
}",0.9874152952565344
156258,"@Override public void render(TileQuarry tile,double x,double y,double z,float partialTicks,int destroyStage,float alpha){
  Profiler profiler=Minecraft.getMinecraft().mcProfiler;
  profiler.startSection(""String_Node_Str"");
  profiler.startSection(""String_Node_Str"");
  profiler.startSection(""String_Node_Str"");
  SpriteUtil.bindBlockTextureMap();
  RenderHelper.disableStandardItemLighting();
  GlStateManager.blendFunc(GL11.GL_SRC_ALPHA,GL11.GL_ONE_MINUS_SRC_ALPHA);
  GlStateManager.enableBlend();
  GlStateManager.enableCull();
  if (Minecraft.isAmbientOcclusionEnabled()) {
    GlStateManager.shadeModel(GL11.GL_SMOOTH);
  }
 else {
    GlStateManager.shadeModel(GL11.GL_FLAT);
  }
  GlStateManager.pushMatrix();
  GlStateManager.translate(x - tile.getPos().getX(),y - tile.getPos().getY(),z - tile.getPos().getZ());
  final BlockPos min=tile.frameBox.min();
  final BlockPos max=tile.frameBox.max();
  profiler.endSection();
  if (tile.frameBox.isInitialized()) {
    double yOffset=1 + 4 / 16D;
    profiler.startSection(""String_Node_Str"");
    if (tile.currentTask != null && tile.currentTask instanceof TileQuarry.TaskBreakBlock) {
      TileQuarry.TaskBreakBlock taskBreakBlock=(TileQuarry.TaskBreakBlock)tile.currentTask;
      BlockPos pos=taskBreakBlock.breakPos;
      if (tile.drillPos == null) {
        if (taskBreakBlock.clientPower != 0) {
          Vec3d from=VecUtil.convertCenter(tile.getPos());
          Vec3d to=VecUtil.convertCenter(pos);
          LaserData_BC8 laser=new LaserData_BC8(LASER,from,to,1 / 16.0);
          LaserRenderer_BC8.renderLaserStatic(laser);
        }
      }
 else {
        long power=(long)(taskBreakBlock.prevClientPower + (taskBreakBlock.clientPower - taskBreakBlock.prevClientPower) * (double)partialTicks);
        AxisAlignedBB aabb=tile.getWorld().getBlockState(pos).getBoundingBox(tile.getWorld(),pos);
        ;
        double value=(double)power / taskBreakBlock.getTarget();
        if (value < 0.9) {
          value=1 - value / 0.9;
        }
 else {
          value=(value - 0.9) / 0.1;
        }
        double scaleMin=1 - (1 - aabb.maxY) - (aabb.maxY - aabb.minY) / 2;
        double scaleMax=1 + 4 / 16D;
        yOffset=scaleMin + value * (scaleMax - scaleMin);
      }
    }
    profiler.endStartSection(""String_Node_Str"");
    if (tile.clientDrillPos != null && tile.prevClientDrillPos != null) {
      Vec3d interpolatedPos=tile.prevClientDrillPos.add(tile.clientDrillPos.subtract(tile.prevClientDrillPos).scale(partialTicks));
      LaserRenderer_BC8.renderLaserStatic(new LaserData_BC8(FRAME,new Vec3d(interpolatedPos.x + 0.5,max.getY() + 0.5,interpolatedPos.z),new Vec3d(interpolatedPos.x + 0.5,max.getY() + 0.5,max.getZ() + 12 / 16D),1 / 16D,true,true,0));
      LaserRenderer_BC8.renderLaserStatic(new LaserData_BC8(FRAME,new Vec3d(interpolatedPos.x + 0.5,max.getY() + 0.5,interpolatedPos.z),new Vec3d(interpolatedPos.x + 0.5,max.getY() + 0.5,min.getZ() + 4 / 16D),1 / 16D,true,true,0));
      LaserRenderer_BC8.renderLaserStatic(new LaserData_BC8(FRAME,new Vec3d(interpolatedPos.x,max.getY() + 0.5,interpolatedPos.z + 0.5),new Vec3d(max.getX() + 12 / 16D,max.getY() + 0.5,interpolatedPos.z + 0.5),1 / 16D,true,true,0));
      LaserRenderer_BC8.renderLaserStatic(new LaserData_BC8(FRAME,new Vec3d(interpolatedPos.x,max.getY() + 0.5,interpolatedPos.z + 0.5),new Vec3d(min.getX() + 4 / 16D,max.getY() + 0.5,interpolatedPos.z + 0.5),1 / 16D,true,true,0));
      LaserRenderer_BC8.renderLaserStatic(new LaserData_BC8(FRAME_BOTTOM,new Vec3d(interpolatedPos.x + 0.5,interpolatedPos.y + 1 + 4 / 16D,interpolatedPos.z + 0.5),new Vec3d(interpolatedPos.x + 0.5,max.getY() + 0.5,interpolatedPos.z + 0.5),1 / 16D,true,true,0));
      LaserRenderer_BC8.renderLaserStatic(new LaserData_BC8(DRILL,new Vec3d(interpolatedPos.x + 0.5,interpolatedPos.y + 1 + yOffset,interpolatedPos.z + 0.5),new Vec3d(interpolatedPos.x + 0.5,interpolatedPos.y + yOffset,interpolatedPos.z + 0.5),1 / 16D,true,true,0));
    }
 else {
      LaserBoxRenderer.renderLaserBoxStatic(tile.frameBox,BuildCraftLaserManager.STRIPES_WRITE,true);
    }
    profiler.endSection();
  }
  GlStateManager.popMatrix();
  profiler.startSection(""String_Node_Str"");
  if (tile.frameBox.isInitialized() && false) {
    TileQuarry.TaskAddFrame currentTask=(TileQuarry.TaskAddFrame)tile.currentTask;
    int index=tile.framePoses.indexOf(currentTask.framePos);
    if (index > 1) {
      double progress=(double)currentTask.power / currentTask.getTarget() * (index - 1) / tile.framePoses.size();
      double progress1=(progress >= 0 && progress <= 0.25) ? progress * 4 : (progress >= 0.25 && progress <= 0.5) ? 1 : (progress >= 0.5 && progress <= 0.75) ? 1 - (progress - 0.5) * 4 : (progress >= 0.75 && progress <= 1) ? 0 : -1;
      double progress2=(progress >= 0 && progress <= 0.25) ? 1 : (progress >= 0.25 && progress <= 0.5) ? 1 - (progress - 0.25) * 4 : (progress >= 0.5 && progress <= 0.75) ? 0 : (progress >= 0.75 && progress <= 1) ? (progress - 0.75) * 4 : -1;
      double xProgress=-1;
      double zProgress=-1;
      EnumFacing side=tile.getWorld().getBlockState(tile.getPos()).getValue(BuildCraftProperties.BLOCK_FACING).getOpposite();
      BlockPos firstPos=tile.getPos().offset(side);
switch (side) {
case SOUTH:
        if (firstPos.getX() == min.getX()) {
          xProgress=1 - progress2;
          zProgress=progress1;
        }
 else {
          xProgress=progress2;
          zProgress=progress1;
        }
      break;
case WEST:
    if (firstPos.getZ() == min.getZ()) {
      xProgress=1 - progress1;
      zProgress=1 - progress2;
    }
 else {
      xProgress=1 - progress1;
      zProgress=progress2;
    }
  break;
case NORTH:
if (firstPos.getX() == min.getX()) {
  xProgress=1 - progress2;
  zProgress=1 - progress1;
}
 else {
  xProgress=progress2;
  zProgress=1 - progress1;
}
break;
case EAST:
if (firstPos.getZ() == min.getZ()) {
xProgress=progress1;
zProgress=1 - progress2;
}
 else {
xProgress=progress1;
zProgress=progress2;
}
break;
}
double xResult=min.getX() + (max.getX() - min.getX()) * xProgress;
double zResult=min.getZ() + (max.getZ() - min.getZ()) * zProgress;
ItemStack stack=new ItemStack(BCBuildersBlocks.frame);
RenderHelper.disableStandardItemLighting();
GlStateManager.setActiveTexture(OpenGlHelper.lightmapTexUnit);
GlStateManager.disableTexture2D();
GlStateManager.setActiveTexture(OpenGlHelper.defaultTexUnit);
GlStateManager.pushMatrix();
GlStateManager.translate(x - tile.getPos().getX(),y - tile.getPos().getY(),z - tile.getPos().getZ());
GlStateManager.pushMatrix();
GlStateManager.translate(xResult + 0.5,tile.getPos().getY(),zResult + 0.5);
GlStateManager.scale(3,3,3);
Minecraft.getMinecraft().getRenderItem().renderItem(stack,ItemCameraTransforms.TransformType.GROUND);
GlStateManager.popMatrix();
GlStateManager.popMatrix();
}
}
RenderHelper.enableStandardItemLighting();
profiler.endSection();
profiler.endSection();
profiler.endSection();
}","@Override public void render(TileQuarry tile,double x,double y,double z,float partialTicks,int destroyStage,float alpha){
  Profiler profiler=Minecraft.getMinecraft().mcProfiler;
  profiler.startSection(""String_Node_Str"");
  profiler.startSection(""String_Node_Str"");
  profiler.startSection(""String_Node_Str"");
  SpriteUtil.bindBlockTextureMap();
  RenderHelper.disableStandardItemLighting();
  GlStateManager.blendFunc(GL11.GL_SRC_ALPHA,GL11.GL_ONE_MINUS_SRC_ALPHA);
  GlStateManager.enableBlend();
  GlStateManager.enableCull();
  if (Minecraft.isAmbientOcclusionEnabled()) {
    GlStateManager.shadeModel(GL11.GL_SMOOTH);
  }
 else {
    GlStateManager.shadeModel(GL11.GL_FLAT);
  }
  GlStateManager.pushMatrix();
  GlStateManager.translate(x - tile.getPos().getX(),y - tile.getPos().getY(),z - tile.getPos().getZ());
  final BlockPos min=tile.frameBox.min();
  final BlockPos max=tile.frameBox.max();
  profiler.endSection();
  if (tile.frameBox.isInitialized()) {
    double yOffset=1 + 4 / 16D;
    profiler.startSection(""String_Node_Str"");
    if (tile.currentTask != null && tile.currentTask instanceof TileQuarry.TaskBreakBlock) {
      TileQuarry.TaskBreakBlock taskBreakBlock=(TileQuarry.TaskBreakBlock)tile.currentTask;
      BlockPos pos=taskBreakBlock.breakPos;
      if (tile.drillPos == null) {
        if (taskBreakBlock.clientPower != 0) {
          Vec3d from=VecUtil.convertCenter(tile.getPos());
          Vec3d to=VecUtil.convertCenter(pos);
          LaserData_BC8 laser=new LaserData_BC8(LASER,from,to,1 / 16.0);
          LaserRenderer_BC8.renderLaserStatic(laser);
        }
      }
 else {
        long power=(long)(taskBreakBlock.prevClientPower + (taskBreakBlock.clientPower - taskBreakBlock.prevClientPower) * (double)partialTicks);
        AxisAlignedBB aabb=tile.getWorld().getBlockState(pos).getBoundingBox(tile.getWorld(),pos);
        double value=(double)power / taskBreakBlock.getTarget();
        if (value < 0.9) {
          value=1 - value / 0.9;
        }
 else {
          value=(value - 0.9) / 0.1;
        }
        double scaleMin=1 - (1 - aabb.maxY) - (aabb.maxY - aabb.minY) / 2;
        double scaleMax=1 + 4 / 16D;
        yOffset=scaleMin + value * (scaleMax - scaleMin);
      }
    }
    profiler.endStartSection(""String_Node_Str"");
    if (tile.clientDrillPos != null && tile.prevClientDrillPos != null) {
      Vec3d interpolatedPos=tile.prevClientDrillPos.add(tile.clientDrillPos.subtract(tile.prevClientDrillPos).scale(partialTicks));
      LaserRenderer_BC8.renderLaserStatic(new LaserData_BC8(FRAME,new Vec3d(interpolatedPos.x + 0.5,max.getY() + 0.5,interpolatedPos.z),new Vec3d(interpolatedPos.x + 0.5,max.getY() + 0.5,max.getZ() + 12 / 16D),1 / 16D,true,true,0));
      LaserRenderer_BC8.renderLaserStatic(new LaserData_BC8(FRAME,new Vec3d(interpolatedPos.x + 0.5,max.getY() + 0.5,interpolatedPos.z),new Vec3d(interpolatedPos.x + 0.5,max.getY() + 0.5,min.getZ() + 4 / 16D),1 / 16D,true,true,0));
      LaserRenderer_BC8.renderLaserStatic(new LaserData_BC8(FRAME,new Vec3d(interpolatedPos.x,max.getY() + 0.5,interpolatedPos.z + 0.5),new Vec3d(max.getX() + 12 / 16D,max.getY() + 0.5,interpolatedPos.z + 0.5),1 / 16D,true,true,0));
      LaserRenderer_BC8.renderLaserStatic(new LaserData_BC8(FRAME,new Vec3d(interpolatedPos.x,max.getY() + 0.5,interpolatedPos.z + 0.5),new Vec3d(min.getX() + 4 / 16D,max.getY() + 0.5,interpolatedPos.z + 0.5),1 / 16D,true,true,0));
      LaserRenderer_BC8.renderLaserStatic(new LaserData_BC8(FRAME_BOTTOM,new Vec3d(interpolatedPos.x + 0.5,interpolatedPos.y + 1 + 4 / 16D,interpolatedPos.z + 0.5),new Vec3d(interpolatedPos.x + 0.5,max.getY() + 0.5,interpolatedPos.z + 0.5),1 / 16D,true,true,0));
      LaserRenderer_BC8.renderLaserStatic(new LaserData_BC8(DRILL,new Vec3d(interpolatedPos.x + 0.5,interpolatedPos.y + 1 + yOffset,interpolatedPos.z + 0.5),new Vec3d(interpolatedPos.x + 0.5,interpolatedPos.y + yOffset,interpolatedPos.z + 0.5),1 / 16D,true,true,0));
    }
 else {
      LaserBoxRenderer.renderLaserBoxStatic(tile.frameBox,BuildCraftLaserManager.STRIPES_WRITE,true);
    }
    profiler.endSection();
  }
  GlStateManager.popMatrix();
  profiler.startSection(""String_Node_Str"");
  if (tile.frameBox.isInitialized() && false) {
    TileQuarry.TaskAddFrame currentTask=(TileQuarry.TaskAddFrame)tile.currentTask;
    int index=tile.framePoses.indexOf(currentTask.framePos);
    if (index > 1) {
      double progress=(double)currentTask.power / currentTask.getTarget() * (index - 1) / tile.framePoses.size();
      double progress1=(progress >= 0 && progress <= 0.25) ? progress * 4 : (progress >= 0.25 && progress <= 0.5) ? 1 : (progress >= 0.5 && progress <= 0.75) ? 1 - (progress - 0.5) * 4 : (progress >= 0.75 && progress <= 1) ? 0 : -1;
      double progress2=(progress >= 0 && progress <= 0.25) ? 1 : (progress >= 0.25 && progress <= 0.5) ? 1 - (progress - 0.25) * 4 : (progress >= 0.5 && progress <= 0.75) ? 0 : (progress >= 0.75 && progress <= 1) ? (progress - 0.75) * 4 : -1;
      double xProgress=-1;
      double zProgress=-1;
      EnumFacing side=tile.getWorld().getBlockState(tile.getPos()).getValue(BuildCraftProperties.BLOCK_FACING).getOpposite();
      BlockPos firstPos=tile.getPos().offset(side);
switch (side) {
case SOUTH:
        if (firstPos.getX() == min.getX()) {
          xProgress=1 - progress2;
          zProgress=progress1;
        }
 else {
          xProgress=progress2;
          zProgress=progress1;
        }
      break;
case WEST:
    if (firstPos.getZ() == min.getZ()) {
      xProgress=1 - progress1;
      zProgress=1 - progress2;
    }
 else {
      xProgress=1 - progress1;
      zProgress=progress2;
    }
  break;
case NORTH:
if (firstPos.getX() == min.getX()) {
  xProgress=1 - progress2;
  zProgress=1 - progress1;
}
 else {
  xProgress=progress2;
  zProgress=1 - progress1;
}
break;
case EAST:
if (firstPos.getZ() == min.getZ()) {
xProgress=progress1;
zProgress=1 - progress2;
}
 else {
xProgress=progress1;
zProgress=progress2;
}
break;
}
double xResult=min.getX() + (max.getX() - min.getX()) * xProgress;
double zResult=min.getZ() + (max.getZ() - min.getZ()) * zProgress;
ItemStack stack=new ItemStack(BCBuildersBlocks.frame);
RenderHelper.disableStandardItemLighting();
GlStateManager.setActiveTexture(OpenGlHelper.lightmapTexUnit);
GlStateManager.disableTexture2D();
GlStateManager.setActiveTexture(OpenGlHelper.defaultTexUnit);
GlStateManager.pushMatrix();
GlStateManager.translate(x - tile.getPos().getX(),y - tile.getPos().getY(),z - tile.getPos().getZ());
GlStateManager.pushMatrix();
GlStateManager.translate(xResult + 0.5,tile.getPos().getY(),zResult + 0.5);
GlStateManager.scale(3,3,3);
Minecraft.getMinecraft().getRenderItem().renderItem(stack,ItemCameraTransforms.TransformType.GROUND);
GlStateManager.popMatrix();
GlStateManager.popMatrix();
}
}
RenderHelper.enableStandardItemLighting();
profiler.endSection();
profiler.endSection();
profiler.endSection();
}",0.9992777697529972
156259,"@Nullable public static IDebuggable getDebuggableObject(RayTraceResult mouseOver){
  Minecraft mc=Minecraft.getMinecraft();
  if (mc.gameSettings.reducedDebugInfo || mc.player.hasReducedDebug() || !mc.player.capabilities.isCreativeMode|| !mc.gameSettings.showDebugInfo) {
    return null;
  }
  if (mouseOver == null) {
    return null;
  }
  RayTraceResult.Type type=mouseOver.typeOfHit;
  WorldClient world=mc.world;
  if (world == null) {
    return null;
  }
  if (type == RayTraceResult.Type.BLOCK) {
    BlockPos pos=mouseOver.getBlockPos();
    TileEntity tile=world.getTileEntity(pos);
    if (tile instanceof IDebuggable) {
      return (IDebuggable)tile;
    }
  }
 else   if (type == RayTraceResult.Type.ENTITY) {
    Entity entity=mouseOver.entityHit;
    if (entity instanceof IDebuggable) {
      return (IDebuggable)entity;
    }
  }
  return null;
}","@Nullable public static IDebuggable getDebuggableObject(RayTraceResult mouseOver){
  Minecraft mc=Minecraft.getMinecraft();
  if (mc.gameSettings.reducedDebugInfo || mc.player.hasReducedDebug() || !mc.gameSettings.showDebugInfo|| !ItemDebugger.isShowDebugInfo(mc.player)) {
    return null;
  }
  if (mouseOver == null) {
    return null;
  }
  RayTraceResult.Type type=mouseOver.typeOfHit;
  WorldClient world=mc.world;
  if (world == null) {
    return null;
  }
  if (type == RayTraceResult.Type.BLOCK) {
    BlockPos pos=mouseOver.getBlockPos();
    TileEntity tile=world.getTileEntity(pos);
    if (tile instanceof IDebuggable) {
      return (IDebuggable)tile;
    }
  }
 else   if (type == RayTraceResult.Type.ENTITY) {
    Entity entity=mouseOver.entityHit;
    if (entity instanceof IDebuggable) {
      return (IDebuggable)entity;
    }
  }
  return null;
}",0.941108545034642
156260,"public void drawBackgroundLayer(float partialTicks,int mouseX,int mouseY){
}","public void drawBackgroundLayer(float partialTicks,int mouseX,int mouseY,Runnable menuBackgroundRenderer){
}",0.8260869565217391
156261,"public void onMouseClicked(int mouseX,int mouseY,int mouseButton){
  mouse.setMousePosition(mouseX,mouseY);
  if (isDebuggingShown.evaluate()) {
    GuiRectangle debugRect=new GuiRectangle(0,0,16,16);
    if (debugRect.contains(mouse)) {
      isDebuggingEnabled.set(!isDebuggingEnabled.evaluate());
    }
  }
  IMenuElement m=currentMenu;
  if (m != null) {
    m.onMouseClicked(mouseButton);
    if (m.shouldFullyOverride()) {
      return;
    }
  }
  for (  IGuiElement element : shownElements) {
    if (element instanceof IInteractionElement) {
      ((IInteractionElement)element).onMouseClicked(mouseButton);
    }
  }
}","/** 
 * @return True if the {@link #currentMenu} {@link IMenuElement#shouldFullyOverride() fully overrides} other mouseclicks, false otherwise. 
 */
public boolean onMouseClicked(int mouseX,int mouseY,int mouseButton){
  mouse.setMousePosition(mouseX,mouseY);
  if (isDebuggingShown.evaluate()) {
    GuiRectangle debugRect=new GuiRectangle(0,0,16,16);
    if (debugRect.contains(mouse)) {
      isDebuggingEnabled.set(!isDebuggingEnabled.evaluate());
    }
  }
  IMenuElement m=currentMenu;
  if (m != null) {
    m.onMouseClicked(mouseButton);
    if (m.shouldFullyOverride()) {
      return true;
    }
  }
  for (  IGuiElement element : shownElements) {
    if (element instanceof IInteractionElement) {
      ((IInteractionElement)element).onMouseClicked(mouseButton);
    }
  }
  return false;
}",0.8733379986004198
156262,"@Override protected final void drawGuiContainerForegroundLayer(int mouseX,int mouseY){
  mainGui.mouse.setMousePosition(mouseX,mouseY);
  mainGui.preDrawForeground();
  drawForegroundLayer();
  mainGui.drawElementForegrounds(this::drawDefaultBackground);
  drawForegroundLayerAboveElements();
  mainGui.postDrawForeground();
}","@Override protected final void drawGuiContainerForegroundLayer(int mouseX,int mouseY){
  mainGui.preDrawForeground();
  drawForegroundLayer();
  mainGui.drawElementForegrounds(this::drawDefaultBackground);
  drawForegroundLayerAboveElements();
  mainGui.postDrawForeground();
}",0.4344941956882255
156263,"@Override protected final void drawGuiContainerBackgroundLayer(float partialTicks,int mouseX,int mouseY){
  mainGui.drawBackgroundLayer(partialTicks,mouseX,mouseY);
  drawBackgroundLayer(partialTicks);
  mainGui.drawElementBackgrounds();
}","@Override protected final void drawGuiContainerBackgroundLayer(float partialTicks,int mouseX,int mouseY){
  mainGui.drawBackgroundLayer(partialTicks,mouseX,mouseY,this::drawDefaultBackground);
  drawBackgroundLayer(partialTicks);
  mainGui.drawElementBackgrounds();
}",0.9446640316205532
156264,"@Override public void drawScreen(int mouseX,int mouseY,float partialTicks){
  boolean drawEverything=mainGui.currentMenu == null || !mainGui.currentMenu.shouldFullyOverride();
  if (drawEverything) {
    this.drawDefaultBackground();
  }
  super.drawScreen(mouseX,mouseY,partialTicks);
  if (drawEverything) {
    this.renderHoveredToolTip(mouseX,mouseY);
  }
}","@Override public void drawScreen(int mouseX,int mouseY,float partialTicks){
  super.drawScreen(mouseX,mouseY,partialTicks);
  if (mainGui.currentMenu == null || !mainGui.currentMenu.shouldFullyOverride()) {
    this.renderHoveredToolTip(mouseX,mouseY);
  }
}",0.5234248788368336
156265,"@Override public void drawBackgroundLayer(float partialTicks,int mouseX,int mouseY){
  time.value=timeOpen + partialTicks;
  varData.refresh();
  super.drawBackgroundLayer(partialTicks,mouseX,mouseY);
}","@Override public void drawBackgroundLayer(float partialTicks,int mouseX,int mouseY,Runnable backgroundRenderer){
  time.value=timeOpen + partialTicks;
  varData.refresh();
  super.drawBackgroundLayer(partialTicks,mouseX,mouseY,backgroundRenderer);
}",0.8957871396895787
156266,"@Override public void readPayload(PacketBuffer buffer,Side side,MessageContext ctx){
  super.readPayload(buffer,side,ctx);
  if (side == Side.CLIENT) {
    colour=EnumDyeColor.byMetadata(buffer.readUnsignedByte());
  }
}","@Override public void readPayload(PacketBuffer buffer,Side side,MessageContext ctx) throws IOException {
  super.readPayload(buffer,side,ctx);
  if (side == Side.CLIENT) {
    colour=EnumDyeColor.byMetadata(buffer.readUnsignedByte());
  }
}",0.9565217391304348
156267,"@Override public void readPayload(PacketBuffer buffer,Side side,MessageContext ctx){
  super.readPayload(buffer,side,ctx);
  currentDir=PacketBufferBC.asPacketBufferBc(buffer).readEnumValue(EnumPipePart.class);
}","@Override public void readPayload(PacketBuffer buffer,Side side,MessageContext ctx) throws IOException {
  super.readPayload(buffer,side,ctx);
  currentDir=PacketBufferBC.asPacketBufferBc(buffer).readEnumValue(EnumPipePart.class);
}",0.954954954954955
156268,"@Override public void readPayload(PacketBuffer buffer,Side side,MessageContext ctx){
  super.readPayload(buffer,side,ctx);
  if (side == Side.CLIENT) {
    for (    SlotIndex index : SlotIndex.VALUES) {
      EnumDyeColor colour=MessageUtil.readEnumOrNull(buffer,EnumDyeColor.class);
      if (colour == null) {
        slotColours.remove(index);
      }
 else {
        slotColours.put(index,colour);
      }
    }
    activeSlots.clear();
    activeSlots.addAll(MessageUtil.readEnumSet(buffer,SlotIndex.class));
    currentSlot=MessageUtil.readEnumOrNull(buffer,SlotIndex.class);
  }
}","@Override public void readPayload(PacketBuffer buffer,Side side,MessageContext ctx) throws IOException {
  super.readPayload(buffer,side,ctx);
  if (side == Side.CLIENT) {
    for (    SlotIndex index : SlotIndex.VALUES) {
      EnumDyeColor colour=MessageUtil.readEnumOrNull(buffer,EnumDyeColor.class);
      if (colour == null) {
        slotColours.remove(index);
      }
 else {
        slotColours.put(index,colour);
      }
    }
    activeSlots.clear();
    activeSlots.addAll(MessageUtil.readEnumSet(buffer,SlotIndex.class));
    currentSlot=MessageUtil.readEnumOrNull(buffer,SlotIndex.class);
  }
}",0.983249581239531
156269,"@Override public void readPayload(PacketBuffer buffer,Side side,MessageContext ctx){
  super.readPayload(buffer,side,ctx);
  if (side == Side.CLIENT) {
    colour=EnumDyeColor.byMetadata(buffer.readUnsignedByte());
  }
}","@Override public void readPayload(PacketBuffer buffer,Side side,MessageContext ctx) throws IOException {
  super.readPayload(buffer,side,ctx);
  if (side == Side.CLIENT) {
    colour=EnumDyeColor.byMetadata(buffer.readUnsignedByte());
  }
}",0.9565217391304348
156270,"@Override public void readPayload(PacketBuffer buffer,Side side,MessageContext ctx){
  super.readPayload(buffer,side,ctx);
  direction=MessageUtil.readEnumOrNull(buffer,EnumFacing.class);
}","@Override public void readPayload(PacketBuffer buffer,Side side,MessageContext ctx) throws IOException {
  super.readPayload(buffer,side,ctx);
  direction=MessageUtil.readEnumOrNull(buffer,EnumFacing.class);
}",0.949748743718593
156271,"@Override public void readPayload(PacketBuffer buffer,Side side,MessageContext ctx){
  super.readPayload(buffer,side,ctx);
  if (side == Side.CLIENT) {
    filterMode=FilterMode.get(buffer.readUnsignedByte());
    currentFilter=buffer.readUnsignedByte() % filters.getSlots();
    filterValid=buffer.readBoolean();
  }
}","@Override public void readPayload(PacketBuffer buffer,Side side,MessageContext ctx) throws IOException {
  super.readPayload(buffer,side,ctx);
  if (side == Side.CLIENT) {
    filterMode=FilterMode.get(buffer.readUnsignedByte());
    currentFilter=buffer.readUnsignedByte() % filters.getSlots();
    filterValid=buffer.readBoolean();
  }
}",0.9696048632218844
156272,"@Override public void getDebugInfo(List<String> left,List<String> right,EnumFacing side){
  super.getDebugInfo(left,right,side);
  left.add(""String_Node_Str"");
  left.add(""String_Node_Str"" + tank1.getContentsString());
  left.add(""String_Node_Str"" + tank2.getContentsString());
}","@Override public void getDebugInfo(List<String> left,List<String> right,EnumFacing side){
  left.add(""String_Node_Str"");
  left.add(""String_Node_Str"" + tank1.getContentsString());
  left.add(""String_Node_Str"" + tank2.getContentsString());
}",0.9248554913294798
156273,"public static void reloadConfig(EnumRestartRequirement restarted){
  if (EnumRestartRequirement.WORLD.hasBeenRestarted(restarted)) {
    addBiomeNames(propExcludedBiomes,excessiveBiomes);
    addBiomeNames(propExcessiveBiomes,excessiveBiomes);
    addBiomeNames(propSurfaceDepositBiomes,surfaceDepositBiomes);
    excludedDimensions.clear();
    excludedDimensions.addAll(propExcludedDimensions.getIntList());
    if (EnumRestartRequirement.GAME.hasBeenRestarted(restarted)) {
      enableOilGeneration=propEnableOilGeneration.getBoolean();
    }
 else {
      validateBiomeNames();
    }
  }
}","public static void reloadConfig(EnumRestartRequirement restarted){
  if (EnumRestartRequirement.WORLD.hasBeenRestarted(restarted)) {
    addBiomeNames(propExcludedBiomes,excludedBiomes);
    addBiomeNames(propExcessiveBiomes,excessiveBiomes);
    addBiomeNames(propSurfaceDepositBiomes,surfaceDepositBiomes);
    excludedDimensions.clear();
    excludedDimensions.addAll(propExcludedDimensions.getIntList());
    if (EnumRestartRequirement.GAME.hasBeenRestarted(restarted)) {
      enableOilGeneration=propEnableOilGeneration.getBoolean();
    }
 else {
      validateBiomeNames();
    }
  }
}",0.9907329401853412
156274,"/** 
 * Attempts to craft a single item. Assumes that   {@link #canCraft()} has been called in the same tick, without anymodifications happening to the
 * @return True if the crafting happened, false otherwise. 
 * @throws IllegalStateException if {@link #canCraft()} hasn't been called before, or something changed in themeantime. 
 */
public boolean craft() throws IllegalStateException {
  if (isBlueprintDirty) {
    return false;
  }
switch (recipeType) {
case INGREDIENTS:
{
    }
case EXACT_STACKS:
{
    return craftExact();
  }
default :
{
  throw new IllegalStateException(""String_Node_Str"" + recipeType);
}
}
}","/** 
 * Attempts to craft a single item. Assumes that   {@link #canCraft()} has been called in the same tick, without anymodifications happening to the
 * @return True if the crafting happened, false otherwise. 
 * @throws IllegalStateException if {@link #canCraft()} hasn't been called before, or something changed in themeantime. 
 */
public boolean craft() throws IllegalStateException {
  if (isBlueprintDirty) {
    return false;
  }
switch (recipeType) {
case INGREDIENTS:
case EXACT_STACKS:
{
      return craftExact();
    }
default :
{
    throw new IllegalStateException(""String_Node_Str"" + recipeType);
  }
}
}",0.9871175523349436
156275,"/** 
 * @return True if {@link #craft()} might return true, or false if {@link #craft()} will definitely returnfalse. 
 */
public boolean canCraft(){
  if (currentRecipe == null || isBlueprintDirty) {
    return false;
  }
  if (!invResult.canFullyAccept(assumedResult)) {
    return false;
  }
  if (areMaterialsDirty) {
    areMaterialsDirty=false;
switch (recipeType) {
case INGREDIENTS:
{
      }
case EXACT_STACKS:
{
      cachedHasRequirements=hasExactStacks();
      break;
    }
default :
{
    throw new IllegalStateException(""String_Node_Str"" + recipeType);
  }
}
}
return cachedHasRequirements;
}","/** 
 * @return True if {@link #craft()} might return true, or false if {@link #craft()} will definitely returnfalse. 
 */
public boolean canCraft(){
  if (currentRecipe == null || isBlueprintDirty) {
    return false;
  }
  if (!invResult.canFullyAccept(assumedResult)) {
    return false;
  }
  if (areMaterialsDirty) {
    areMaterialsDirty=false;
switch (recipeType) {
case INGREDIENTS:
case EXACT_STACKS:
{
        cachedHasRequirements=hasExactStacks();
        break;
      }
default :
{
      throw new IllegalStateException(""String_Node_Str"" + recipeType);
    }
}
}
return cachedHasRequirements;
}",0.9835255354200988
156276,"public void rotateIfInvalid(){
  BCLog.logger.info(""String_Node_Str"" + StringUtilBC.blockPosToString(getPos()));
  if (currentDirection != null && isFacingReceiver(currentDirection)) {
    return;
  }
  attemptRotation();
  if (currentDirection == null) {
    currentDirection=EnumFacing.UP;
  }
}","public void rotateIfInvalid(){
  if (currentDirection != null && isFacingReceiver(currentDirection)) {
    return;
  }
  attemptRotation();
  if (currentDirection == null) {
    currentDirection=EnumFacing.UP;
  }
}",0.83984375
156277,"public EnumActionResult attemptRotation(){
  BCLog.logger.info(""String_Node_Str"" + StringUtilBC.blockPosToString(getPos()));
  OrderedEnumMap<EnumFacing> possible=VanillaRotationHandlers.ROTATE_FACING;
  EnumFacing current=currentDirection;
  for (int i=0; i < 6; i++) {
    current=possible.next(current);
    if (isFacingReceiver(current)) {
      if (currentDirection != current) {
        currentDirection=current;
        sendNetworkUpdate(NET_RENDER_DATA);
        redrawBlock();
        world.notifyNeighborsRespectDebug(getPos(),getBlockType(),true);
        return EnumActionResult.SUCCESS;
      }
      return EnumActionResult.FAIL;
    }
  }
  return EnumActionResult.FAIL;
}","public EnumActionResult attemptRotation(){
  OrderedEnumMap<EnumFacing> possible=VanillaRotationHandlers.ROTATE_FACING;
  EnumFacing current=currentDirection;
  for (int i=0; i < 6; i++) {
    current=possible.next(current);
    if (isFacingReceiver(current)) {
      if (currentDirection != current) {
        currentDirection=current;
        sendNetworkUpdate(NET_RENDER_DATA);
        redrawBlock();
        world.notifyNeighborsRespectDebug(getPos(),getBlockType(),true);
        return EnumActionResult.SUCCESS;
      }
      return EnumActionResult.FAIL;
    }
  }
  return EnumActionResult.FAIL;
}",0.936532507739938
156278,"public PipeFlowPower(IPipe pipe,NBTTagCompound nbt){
  super(pipe,nbt);
  sections=new EnumMap<>(EnumFacing.class);
  for (  EnumFacing face : EnumFacing.VALUES) {
    sections.put(face,new Section(face));
  }
}","public PipeFlowPower(IPipe pipe,NBTTagCompound nbt){
  super(pipe,nbt);
  isReceiver=nbt.getBoolean(""String_Node_Str"");
  sections=new EnumMap<>(EnumFacing.class);
  for (  EnumFacing face : EnumFacing.VALUES) {
    sections.put(face,new Section(face));
  }
}",0.8978723404255319
156279,"@Override public NBTTagCompound writeToNbt(){
  NBTTagCompound nbt=super.writeToNbt();
  return nbt;
}","@Override public NBTTagCompound writeToNbt(){
  NBTTagCompound nbt=super.writeToNbt();
  nbt.setBoolean(""String_Node_Str"",isReceiver);
  return nbt;
}",0.8095238095238095
156280,"@SubscribeEvent public static void renderOverlay(RenderGameOverlayEvent.Text event){
  Minecraft mc=Minecraft.getMinecraft();
  if (!mc.gameSettings.showDebugInfo)   return;
  if (mc.player.hasReducedDebug() || mc.gameSettings.reducedDebugInfo || !mc.player.capabilities.isCreativeMode) {
    return;
  }
  List<String> left=event.getLeft();
  List<String> right=event.getRight();
  RayTraceResult mouseOver=mc.objectMouseOver;
  if (mouseOver == null) {
    return;
  }
  getDebuggableObject(mouseOver).ifPresent(client -> {
    EnumFacing side=mouseOver.sideHit;
    MessageManager.sendToServer(new MessageDebuggableRequest(client.getPos(),side));
    List<String> clientLeft=new ArrayList<>();
    List<String> clientRight=new ArrayList<>();
    client.getClientDebugInfo(clientLeft,clientRight,side);
    final String headerFirst=DIFF_HEADER_FORMATTING + ""String_Node_Str"";
    final String headerSecond=DIFF_HEADER_FORMATTING + ""String_Node_Str"";
    appendDiff(left,ClientDebuggables.SERVER_LEFT,clientLeft,headerFirst,headerSecond);
    appendDiff(right,ClientDebuggables.SERVER_RIGHT,clientRight,headerFirst,headerSecond);
  }
);
}","@SubscribeEvent public static void renderOverlay(RenderGameOverlayEvent.Text event){
  Minecraft mc=Minecraft.getMinecraft();
  if (!mc.gameSettings.showDebugInfo)   return;
  if (mc.player.hasReducedDebug() || mc.gameSettings.reducedDebugInfo || !mc.player.capabilities.isCreativeMode) {
    return;
  }
  List<String> left=event.getLeft();
  List<String> right=event.getRight();
  ClientDebuggables.getDebuggableTileSide().ifPresent(tileSide -> {
    List<String> clientLeft=new ArrayList<>();
    List<String> clientRight=new ArrayList<>();
    tileSide.getLeft().getClientDebugInfo(clientLeft,clientRight,tileSide.getRight());
    final String headerFirst=DIFF_HEADER_FORMATTING + ""String_Node_Str"";
    final String headerSecond=DIFF_HEADER_FORMATTING + ""String_Node_Str"";
    appendDiff(left,ClientDebuggables.SERVER_LEFT,clientLeft,headerFirst,headerSecond);
    appendDiff(right,ClientDebuggables.SERVER_RIGHT,clientRight,headerFirst,headerSecond);
  }
);
}",0.8374524714828897
156281,"@Override @SideOnly(Side.CLIENT) public void getDebugInfo(List<String> left,List<String> right,EnumFacing side){
  left.add(""String_Node_Str"");
  left.add(""String_Node_Str"" + box.min());
  left.add(""String_Node_Str"" + box.max());
  left.add(""String_Node_Str"" + scanning);
  left.add(""String_Node_Str"" + (boxIterator == null ? null : boxIterator.getCurrent()));
}","@Override public void getDebugInfo(List<String> left,List<String> right,EnumFacing side){
  left.add(""String_Node_Str"");
  left.add(""String_Node_Str"" + box.min());
  left.add(""String_Node_Str"" + box.max());
  left.add(""String_Node_Str"" + scanning);
  left.add(""String_Node_Str"" + (boxIterator == null ? null : boxIterator.getCurrent()));
}",0.9671897289586304
156282,"@Override @SideOnly(Side.CLIENT) public void getDebugInfo(List<String> left,List<String> right,EnumFacing side){
  left.add(""String_Node_Str"" + battery.getDebugString());
  left.add(""String_Node_Str"" + (basePoses == null ? ""String_Node_Str"" : basePoses.size()));
  left.add(""String_Node_Str"" + currentBasePosIndex);
  left.add(""String_Node_Str"" + isDone);
}","@Override public void getDebugInfo(List<String> left,List<String> right,EnumFacing side){
  left.add(""String_Node_Str"" + battery.getDebugString());
  left.add(""String_Node_Str"" + (basePoses == null ? ""String_Node_Str"" : basePoses.size()));
  left.add(""String_Node_Str"" + currentBasePosIndex);
  left.add(""String_Node_Str"" + isDone);
}",0.9667149059334298
156283,"@Override @SideOnly(Side.CLIENT) public void getDebugInfo(List<String> left,List<String> right,EnumFacing side){
  left.add(""String_Node_Str"" + battery.getDebugString());
  left.add(""String_Node_Str"" + addon);
}","@Override public void getDebugInfo(List<String> left,List<String> right,EnumFacing side){
  left.add(""String_Node_Str"" + battery.getDebugString());
  left.add(""String_Node_Str"" + addon);
}",0.9423558897243108
156284,"public static void preInit(File cfgFolder){
  config=new Configuration(new File(cfgFolder,""String_Node_Str""));
  objConfig=RegistryHelper.setRegistryConfig(BCCore.MODID,new File(cfgFolder,""String_Node_Str""));
  detailedConfigManager=new FileConfigManager(""String_Node_Str"" + ""String_Node_Str"" + ""String_Node_Str"");
  detailedConfigManager.setConfigFile(new File(cfgFolder,""String_Node_Str""));
  String general=Configuration.CATEGORY_GENERAL;
  String display=""String_Node_Str"";
  String worldgen=""String_Node_Str"";
  EnumRestartRequirement none=EnumRestartRequirement.NONE;
  EnumRestartRequirement game=EnumRestartRequirement.GAME;
  propColourBlindMode=config.get(display,""String_Node_Str"",false);
  propColourBlindMode.setComment(""String_Node_Str"");
  none.setTo(propColourBlindMode);
  propWorldGen=config.get(worldgen,""String_Node_Str"",true);
  propWorldGen.setComment(""String_Node_Str"");
  game.setTo(propWorldGen);
  propWorldGenWaterSpring=config.get(worldgen,""String_Node_Str"",true);
  propWorldGenWaterSpring.setComment(""String_Node_Str"");
  game.setTo(propWorldGenWaterSpring);
  propUseLocalServerOnClient=config.get(general,""String_Node_Str"",true);
  propUseLocalServerOnClient.setComment(""String_Node_Str"");
  none.setTo(propUseLocalServerOnClient);
  propMinePlayerProtected=config.get(general,""String_Node_Str"",false);
  propMinePlayerProtected.setComment(""String_Node_Str"");
  none.setTo(propMinePlayerProtected);
  propUseColouredLabels=config.get(display,""String_Node_Str"",true);
  propUseColouredLabels.setComment(""String_Node_Str"");
  none.setTo(propUseColouredLabels);
  propUseHighContrastColouredLabels=config.get(display,""String_Node_Str"",false);
  propUseHighContrastColouredLabels.setComment(""String_Node_Str"");
  none.setTo(propUseHighContrastColouredLabels);
  propHidePower=config.get(display,""String_Node_Str"",false);
  propHidePower.setComment(""String_Node_Str"");
  none.setTo(propHidePower);
  propHideFluid=config.get(display,""String_Node_Str"",false);
  propHideFluid.setComment(""String_Node_Str"");
  none.setTo(propHideFluid);
  propUseBucketsStatic=config.get(display,""String_Node_Str"",false);
  propUseBucketsStatic.setComment(""String_Node_Str"");
  none.setTo(propUseBucketsStatic);
  propUseBucketsFlow=config.get(display,""String_Node_Str"",false);
  propUseBucketsFlow.setComment(""String_Node_Str"");
  none.setTo(propUseBucketsFlow);
  propUseLongLocalizedName=config.get(display,""String_Node_Str"",false);
  propUseLongLocalizedName.setComment(""String_Node_Str"");
  none.setTo(propUseLongLocalizedName);
  propDisplayTimeGap=config.get(display,""String_Node_Str"",TimeGap.TICKS.name().toLowerCase(Locale.ROOT));
  propDisplayTimeGap.setComment(""String_Node_Str"");
  ConfigUtil.setEnumProperty(propDisplayTimeGap,TimeGap.values());
  none.setTo(propDisplayTimeGap);
  propItemLifespan=config.get(general,""String_Node_Str"",60);
  propItemLifespan.setMinValue(5).setMaxValue(600);
  propItemLifespan.setComment(""String_Node_Str"");
  none.setTo(propItemLifespan);
  propMarkerMaxDistance=config.get(general,""String_Node_Str"",64);
  propMarkerMaxDistance.setMinValue(16).setMaxValue(256);
  propMarkerMaxDistance.setComment(""String_Node_Str"");
  none.setTo(propMarkerMaxDistance);
  propNetworkUpdateRate=config.get(general,""String_Node_Str"",networkUpdateRate);
  propNetworkUpdateRate.setMinValue(1).setMaxValue(100);
  propNetworkUpdateRate.setComment(""String_Node_Str"");
  none.setTo(propNetworkUpdateRate);
  reloadConfig(game);
  addReloadListener(BCCoreConfig::reloadConfig);
  MinecraftForge.EVENT_BUS.register(BCCoreConfig.class);
}","public static void preInit(File cfgFolder){
  config=new Configuration(new File(cfgFolder,""String_Node_Str""));
  objConfig=RegistryHelper.setRegistryConfig(BCCore.MODID,new File(cfgFolder,""String_Node_Str""));
  detailedConfigManager=new FileConfigManager(""String_Node_Str"" + ""String_Node_Str"" + ""String_Node_Str"");
  detailedConfigManager.setConfigFile(new File(cfgFolder,""String_Node_Str""));
  String general=Configuration.CATEGORY_GENERAL;
  String display=""String_Node_Str"";
  String worldgen=""String_Node_Str"";
  EnumRestartRequirement none=EnumRestartRequirement.NONE;
  EnumRestartRequirement game=EnumRestartRequirement.GAME;
  propColourBlindMode=config.get(display,""String_Node_Str"",false);
  propColourBlindMode.setComment(""String_Node_Str"");
  none.setTo(propColourBlindMode);
  propWorldGen=config.get(worldgen,""String_Node_Str"",true);
  propWorldGen.setComment(""String_Node_Str"");
  game.setTo(propWorldGen);
  propWorldGenWaterSpring=config.get(worldgen,""String_Node_Str"",true);
  propWorldGenWaterSpring.setComment(""String_Node_Str"");
  game.setTo(propWorldGenWaterSpring);
  propMinePlayerProtected=config.get(general,""String_Node_Str"",false);
  propMinePlayerProtected.setComment(""String_Node_Str"");
  none.setTo(propMinePlayerProtected);
  propUseColouredLabels=config.get(display,""String_Node_Str"",true);
  propUseColouredLabels.setComment(""String_Node_Str"");
  none.setTo(propUseColouredLabels);
  propUseHighContrastColouredLabels=config.get(display,""String_Node_Str"",false);
  propUseHighContrastColouredLabels.setComment(""String_Node_Str"");
  none.setTo(propUseHighContrastColouredLabels);
  propHidePower=config.get(display,""String_Node_Str"",false);
  propHidePower.setComment(""String_Node_Str"");
  none.setTo(propHidePower);
  propHideFluid=config.get(display,""String_Node_Str"",false);
  propHideFluid.setComment(""String_Node_Str"");
  none.setTo(propHideFluid);
  propUseBucketsStatic=config.get(display,""String_Node_Str"",false);
  propUseBucketsStatic.setComment(""String_Node_Str"");
  none.setTo(propUseBucketsStatic);
  propUseBucketsFlow=config.get(display,""String_Node_Str"",false);
  propUseBucketsFlow.setComment(""String_Node_Str"");
  none.setTo(propUseBucketsFlow);
  propUseLongLocalizedName=config.get(display,""String_Node_Str"",false);
  propUseLongLocalizedName.setComment(""String_Node_Str"");
  none.setTo(propUseLongLocalizedName);
  propDisplayTimeGap=config.get(display,""String_Node_Str"",TimeGap.TICKS.name().toLowerCase(Locale.ROOT));
  propDisplayTimeGap.setComment(""String_Node_Str"");
  ConfigUtil.setEnumProperty(propDisplayTimeGap,TimeGap.values());
  none.setTo(propDisplayTimeGap);
  propItemLifespan=config.get(general,""String_Node_Str"",60);
  propItemLifespan.setMinValue(5).setMaxValue(600);
  propItemLifespan.setComment(""String_Node_Str"");
  none.setTo(propItemLifespan);
  propMarkerMaxDistance=config.get(general,""String_Node_Str"",64);
  propMarkerMaxDistance.setMinValue(16).setMaxValue(256);
  propMarkerMaxDistance.setComment(""String_Node_Str"");
  none.setTo(propMarkerMaxDistance);
  propNetworkUpdateRate=config.get(general,""String_Node_Str"",networkUpdateRate);
  propNetworkUpdateRate.setMinValue(1).setMaxValue(100);
  propNetworkUpdateRate.setComment(""String_Node_Str"");
  none.setTo(propNetworkUpdateRate);
  reloadConfig(game);
  addReloadListener(BCCoreConfig::reloadConfig);
  MinecraftForge.EVENT_BUS.register(BCCoreConfig.class);
}",0.9748815846131764
156285,"public static void reloadConfig(EnumRestartRequirement restarted){
  useLocalServerOnClient=propUseLocalServerOnClient.getBoolean();
  minePlayerProtected=propMinePlayerProtected.getBoolean();
  BCLibConfig.useColouredLabels=propUseColouredLabels.getBoolean();
  BCLibConfig.useHighContrastLabelColours=propUseHighContrastColouredLabels.getBoolean();
  hidePower=propHidePower.getBoolean();
  hideFluid=propHideFluid.getBoolean();
  BCLibConfig.useBucketsStatic=propUseBucketsStatic.getBoolean();
  BCLibConfig.useBucketsFlow=propUseBucketsFlow.getBoolean();
  BCLibConfig.useLongLocalizedName=propUseLongLocalizedName.getBoolean();
  BCLibConfig.itemLifespan=propItemLifespan.getInt();
  markerMaxDistance=propMarkerMaxDistance.getInt();
  BCLibConfig.colourBlindMode=propColourBlindMode.getBoolean();
  BCLibConfig.displayTimeGap=ConfigUtil.parseEnumForConfig(propDisplayTimeGap.getString(),TimeGap.values(),TimeGap.TICKS);
  if (EnumRestartRequirement.GAME.hasBeenRestarted(restarted)) {
    worldGen=propWorldGen.getBoolean();
    worldGenWaterSpring=propWorldGenWaterSpring.getBoolean();
  }
  BCLibConfig.refreshConfigs();
  if (config.hasChanged()) {
    config.save();
  }
  if (objConfig.hasChanged()) {
    objConfig.save();
  }
}","public static void reloadConfig(EnumRestartRequirement restarted){
  minePlayerProtected=propMinePlayerProtected.getBoolean();
  BCLibConfig.useColouredLabels=propUseColouredLabels.getBoolean();
  BCLibConfig.useHighContrastLabelColours=propUseHighContrastColouredLabels.getBoolean();
  hidePower=propHidePower.getBoolean();
  hideFluid=propHideFluid.getBoolean();
  BCLibConfig.useBucketsStatic=propUseBucketsStatic.getBoolean();
  BCLibConfig.useBucketsFlow=propUseBucketsFlow.getBoolean();
  BCLibConfig.useLongLocalizedName=propUseLongLocalizedName.getBoolean();
  BCLibConfig.itemLifespan=propItemLifespan.getInt();
  markerMaxDistance=propMarkerMaxDistance.getInt();
  BCLibConfig.colourBlindMode=propColourBlindMode.getBoolean();
  BCLibConfig.displayTimeGap=ConfigUtil.parseEnumForConfig(propDisplayTimeGap.getString(),TimeGap.values(),TimeGap.TICKS);
  if (EnumRestartRequirement.GAME.hasBeenRestarted(restarted)) {
    worldGen=propWorldGen.getBoolean();
    worldGenWaterSpring=propWorldGenWaterSpring.getBoolean();
  }
  BCLibConfig.refreshConfigs();
  if (config.hasChanged()) {
    config.save();
  }
  if (objConfig.hasChanged()) {
    objConfig.save();
  }
}",0.9726594863297432
156286,"@Override @SideOnly(Side.CLIENT) public void getDebugInfo(List<String> left,List<String> right,EnumFacing side){
  super.getDebugInfo(left,right,side);
  left.add(""String_Node_Str"");
  left.add(""String_Node_Str"" + tank1.getContentsString());
  left.add(""String_Node_Str"" + tank2.getContentsString());
}","@Override public void getDebugInfo(List<String> left,List<String> right,EnumFacing side){
  super.getDebugInfo(left,right,side);
  left.add(""String_Node_Str"");
  left.add(""String_Node_Str"" + tank1.getContentsString());
  left.add(""String_Node_Str"" + tank2.getContentsString());
}",0.9604130808950088
156287,"@Override @SideOnly(Side.CLIENT) public void getDebugInfo(List<String> left,List<String> right,EnumFacing side){
  left.add(""String_Node_Str"" + tankIn.getDebugString());
  left.add(""String_Node_Str"" + tankGasOut.getDebugString());
  left.add(""String_Node_Str"" + tankLiquidOut.getDebugString());
  left.add(""String_Node_Str"" + mjBattery.getDebugString());
  left.add(""String_Node_Str"" + MjAPI.formatMj(distillPower));
  left.add(""String_Node_Str"" + LocaleUtil.localizeMjFlow(powerAvgClient));
  left.add(""String_Node_Str"" + currentRecipe);
  if (world.isRemote) {
    setClientModelVariables(1);
    left.add(""String_Node_Str"");
    left.add(""String_Node_Str"" + MODEL_FACING.value);
    left.add(""String_Node_Str"" + MODEL_ACTIVE.value);
    left.add(""String_Node_Str"" + MODEL_POWER_AVG.value);
    left.add(""String_Node_Str"" + MODEL_POWER_MAX.value);
    left.add(""String_Node_Str"");
    clientModelData.refresh();
    clientModelData.addDebugInfo(left);
  }
}","@Override public void getDebugInfo(List<String> left,List<String> right,EnumFacing side){
  left.add(""String_Node_Str"" + tankIn.getDebugString());
  left.add(""String_Node_Str"" + tankGasOut.getDebugString());
  left.add(""String_Node_Str"" + tankLiquidOut.getDebugString());
  left.add(""String_Node_Str"" + mjBattery.getDebugString());
  left.add(""String_Node_Str"" + MjAPI.formatMj(distillPower));
  left.add(""String_Node_Str"" + LocaleUtil.localizeMjFlow(powerAvgClient));
  left.add(""String_Node_Str"" + currentRecipe);
}",0.7005420054200542
156288,"@Override @SideOnly(Side.CLIENT) public void getDebugInfo(List<String> left,List<String> right,EnumFacing side){
  left.add(""String_Node_Str"" + tank.getDebugString());
  String s=""String_Node_Str"";
  for (  EnumFacing f : EnumFacing.VALUES) {
    if (openSides.contains(f)) {
      if (s.length() > 0) {
        s+=""String_Node_Str"";
      }
      s+=f.getName();
    }
  }
  left.add(""String_Node_Str"" + s);
  left.add(""String_Node_Str"" + getCurrentDelay());
  left.add(""String_Node_Str"" + tick);
  left.add(""String_Node_Str"" + queue.size());
}","@Override public void getDebugInfo(List<String> left,List<String> right,EnumFacing side){
  left.add(""String_Node_Str"" + tank.getDebugString());
  left.add(""String_Node_Str"" + openSides.stream().map(Enum::name).collect(Collectors.joining(""String_Node_Str"")));
  left.add(""String_Node_Str"" + getCurrentDelay());
  left.add(""String_Node_Str"" + tick);
  left.add(""String_Node_Str"" + queue.size());
}",0.3251859723698193
156289,"@Override @SideOnly(Side.CLIENT) public void getDebugInfo(List<String> left,List<String> right,EnumFacing side){
  if (hasWorld() && world.isRemote) {
    left.add(""String_Node_Str"");
    smoothedCoolableIn.getDebugInfo(left,right,side);
    left.add(""String_Node_Str"");
    left.add(""String_Node_Str"");
    smoothedHeatableOut.getDebugInfo(left,right,side);
  }
 else {
    left.add(""String_Node_Str"" + tankHeatableOut.getDebugString());
    left.add(""String_Node_Str"" + tankCoolableIn.getDebugString());
  }
}","@Override public void getDebugInfo(List<String> left,List<String> right,EnumFacing side){
  left.add(""String_Node_Str"" + tankHeatableOut.getDebugString());
  left.add(""String_Node_Str"" + tankCoolableIn.getDebugString());
}",0.398362892223738
156290,"@Override @SideOnly(Side.CLIENT) public void getDebugInfo(List<String> left,List<String> right,EnumFacing side){
  left.add(""String_Node_Str"" + progress);
  left.add(""String_Node_Str"" + progressState);
  left.add(""String_Node_Str"" + (tileEnd != null));
  left.add(""String_Node_Str"" + heatProvided);
  left.add(""String_Node_Str"" + coolingProvided);
  if (hasWorld() && world.isRemote) {
    left.add(""String_Node_Str"");
    left.add(""String_Node_Str"");
    smoothedCoolableOut.getDebugInfo(left,right,side);
    left.add(""String_Node_Str"");
    left.add(""String_Node_Str"");
    smoothedHeatableIn.getDebugInfo(left,right,side);
  }
 else {
    left.add(""String_Node_Str"" + tankHeatableIn.getDebugString());
    left.add(""String_Node_Str"" + tankCoolableOut.getDebugString());
  }
}","@Override public void getDebugInfo(List<String> left,List<String> right,EnumFacing side){
  left.add(""String_Node_Str"" + progress);
  left.add(""String_Node_Str"" + progressState);
  left.add(""String_Node_Str"" + (tileEnd != null));
  left.add(""String_Node_Str"" + heatProvided);
  left.add(""String_Node_Str"" + coolingProvided);
  left.add(""String_Node_Str"" + tankHeatableIn.getDebugString());
  left.add(""String_Node_Str"" + tankCoolableOut.getDebugString());
}",0.7394822006472492
156291,"public static void init(){
  PipeConnectionAPI.registerConnection(Blocks.BREWING_STAND,(world,pos,face,state) -> face.getAxis().getPlane() == EnumFacing.Plane.HORIZONTAL ? 4 / 16F : 0);
  PipeApi.stripeRegistry.addHandler(StripesHandlerPlant.INSTANCE);
  PipeApi.stripeRegistry.addHandler(StripesHandlerShears.INSTANCE);
  PipeApi.stripeRegistry.addHandler(StripesHandlerEntityInteract.INSTANCE,EnumHandlerPriority.LOW);
  PipeApi.stripeRegistry.addHandler(StripesHandlerHoe.INSTANCE);
  PipeApi.stripeRegistry.addHandler(StripesHandlerDispenser.INSTANCE,EnumHandlerPriority.LOW);
  PipeApi.stripeRegistry.addHandler(StripesHandlerPlaceBlock.INSTANCE,EnumHandlerPriority.LOW);
  PipeApi.stripeRegistry.addHandler(StripesHandlerUse.INSTANCE,EnumHandlerPriority.LOW);
  StripesHandlerDispenser.ITEM_CLASSES.add(ItemBucket.class);
  StripesHandlerDispenser.ITEM_CLASSES.add(ItemMinecart.class);
  StripesHandlerUse.ITEMS.add(Items.FIREWORKS);
  PipeApi.stripeRegistry.addHandler(StripesHandlerMinecartDestroy.INSTANCE);
}","public static void init(){
  PipeConnectionAPI.registerConnection(Blocks.BREWING_STAND,(world,pos,face,state) -> face.getAxis().getPlane() == EnumFacing.Plane.HORIZONTAL ? 4 / 16F : 0);
  PipeApi.stripeRegistry.addHandler(StripesHandlerPlant.INSTANCE);
  PipeApi.stripeRegistry.addHandler(StripesHandlerShears.INSTANCE);
  PipeApi.stripeRegistry.addHandler(StripesHandlerEntityInteract.INSTANCE,EnumHandlerPriority.LOW);
  PipeApi.stripeRegistry.addHandler(StripesHandlerHoe.INSTANCE);
  PipeApi.stripeRegistry.addHandler(StripesHandlerDispenser.INSTANCE,EnumHandlerPriority.LOW);
  PipeApi.stripeRegistry.addHandler(StripesHandlerPlaceBlock.INSTANCE,EnumHandlerPriority.LOW);
  PipeApi.stripeRegistry.addHandler(StripesHandlerUse.INSTANCE,EnumHandlerPriority.LOW);
  PipeApi.stripeRegistry.addHandler(StripesHandlerMinecartDestroy.INSTANCE);
}",0.8302900107411385
156292,"private void findPossibleTargets(){
  possible=new ArrayList<>();
  IBlockState state=world.getBlockState(pos);
  if (state.getBlock() != BCSiliconBlocks.laser) {
    return;
  }
  EnumFacing face=state.getValue(BuildCraftProperties.BLOCK_FACING_6);
  VolumeUtil.iterateCone(world,pos,face,TARGETING_RANGE,true,(w,s,p,visible) -> {
    if (!visible) {
      return;
    }
    IBlockState stateAt=world.getBlockState(p);
    if (stateAt.getBlock() instanceof ILaserTargetBlock) {
      TileEntity tileAt=world.getTileEntity(p);
      if (tileAt instanceof ILaserTarget) {
        ILaserTarget targetAt=(ILaserTarget)tileAt;
        if (targetAt.getRequiredLaserPower() > 0) {
          possible.add(p);
        }
      }
    }
  }
);
}","private void findPossibleTargets(){
  targetPositions=new ArrayList<>();
  IBlockState state=world.getBlockState(pos);
  if (state.getBlock() != BCSiliconBlocks.laser) {
    return;
  }
  EnumFacing face=state.getValue(BuildCraftProperties.BLOCK_FACING_6);
  VolumeUtil.iterateCone(world,pos,face,TARGETING_RANGE,true,(w,s,p,visible) -> {
    if (!visible) {
      return;
    }
    IBlockState stateAt=world.getBlockState(p);
    if (stateAt.getBlock() instanceof ILaserTargetBlock) {
      TileEntity tileAt=world.getTileEntity(p);
      if (tileAt instanceof ILaserTarget) {
        targetPositions.add(p);
      }
    }
  }
);
}",0.8667642752562226
156293,"private void randomlyChooseTargetPos(){
  if (possible.isEmpty()) {
    targetPos=null;
    return;
  }
  targetPos=possible.get(world.rand.nextInt(possible.size()));
}","private void randomlyChooseTargetPos(){
  List<BlockPos> targetsNeedingPower=new ArrayList<>();
  for (  BlockPos position : targetPositions) {
    if (powerNeededAt(position)) {
      targetsNeedingPower.add(position);
    }
  }
  if (targetsNeedingPower.isEmpty()) {
    targetPos=null;
    return;
  }
  targetPos=targetsNeedingPower.get(world.rand.nextInt(targetsNeedingPower.size()));
}",0.5044722719141324
156294,"@Override public void update(){
  if (world.isRemote) {
    if (clientLaserMoveInterval.markTimeIfDelay(world) || targetPos == null) {
      updateLaser();
    }
    return;
  }
  avgPower.tick();
  BlockPos previousTargetPos=targetPos;
  if (possible == null) {
    findPossibleTargets();
  }
  if (getTarget() == null) {
    targetPos=null;
  }
  if (serverTargetMoveInterval.markTimeIfDelay(world) || getTarget() == null) {
    randomlyChooseTargetPos();
  }
  ILaserTarget target=getTarget();
  if (target != null) {
    long max=getMaxPowerPerTick();
    max*=battery.getStored() + max;
    max/=battery.getCapacity() / 2;
    max=Math.min(Math.min(max,getMaxPowerPerTick()),target.getRequiredLaserPower());
    long power=battery.extractPower(0,max);
    long excess=target.receiveLaserPower(power);
    if (excess > 0) {
      battery.addPowerChecking(excess,false);
    }
    avgPower.push(power - excess);
  }
 else {
    avgPower.clear();
  }
  if (!Objects.equals(previousTargetPos,targetPos)) {
    sendNetworkUpdate(NET_RENDER_DATA);
  }
}","@Override public void update(){
  if (world.isRemote) {
    if (clientLaserMoveInterval.markTimeIfDelay(world) || targetPos == null) {
      updateLaser();
    }
    return;
  }
  avgPower.tick();
  BlockPos previousTargetPos=targetPos;
  if (targetPositions == null) {
    findPossibleTargets();
  }
  if (!powerNeededAt(targetPos)) {
    targetPos=null;
  }
  if (serverTargetMoveInterval.markTimeIfDelay(world) || !powerNeededAt(targetPos)) {
    randomlyChooseTargetPos();
  }
  ILaserTarget target=getTarget();
  if (target != null) {
    long max=getMaxPowerPerTick();
    max*=battery.getStored() + max;
    max/=battery.getCapacity() / 2;
    max=Math.min(Math.min(max,getMaxPowerPerTick()),target.getRequiredLaserPower());
    long power=battery.extractPower(0,max);
    long excess=target.receiveLaserPower(power);
    if (excess > 0) {
      battery.addPowerChecking(excess,false);
    }
    avgPower.push(power - excess);
  }
 else {
    avgPower.clear();
  }
  if (!Objects.equals(previousTargetPos,targetPos)) {
    sendNetworkUpdate(NET_RENDER_DATA);
  }
}",0.9279321714554876
156295,"private ILaserTarget getTarget(){
  if (targetPos != null) {
    TileEntity tile=world.getTileEntity(targetPos);
    if (tile instanceof ILaserTarget) {
      ILaserTarget target=(ILaserTarget)tile;
      return target.getRequiredLaserPower() > 0 ? target : null;
    }
 else {
      possible.remove(targetPos);
      return null;
    }
  }
 else {
    return null;
  }
}","private ILaserTarget getTarget(){
  if (targetPos != null) {
    return (ILaserTarget)world.getTileEntity(targetPos);
  }
  return null;
}",0.4715127701375246
156296,"@Override public void renderAddonFast(AddonFillingPlanner addon,EntityPlayer player,float partialTicks,VertexBuffer vb){
  Template.BuildingInfo info=addon.buildingInfo;
  if (info == null) {
    return;
  }
  info.box.getBlocksInArea().stream().filter(blockPos -> info.getSnapshot().data.get(info.getSnapshot().posToIndex(info.fromWorld(blockPos)))).filter(player.world::isAirBlock).sorted(Comparator.comparing((  BlockPos blockPos) -> Math.pow(player.posX - blockPos.getX(),2) + Math.pow(player.posY - blockPos.getY(),2) + Math.pow(player.posZ - blockPos.getZ(),2)).reversed()).forEach(blockPos -> {
    AxisAlignedBB bb=new AxisAlignedBB(blockPos,blockPos.add(1,1,1)).expandXyz(-0.1);
    TextureAtlasSprite s=ModelLoader.White.INSTANCE;
    vb.pos(bb.minX,bb.maxY,bb.minZ).color(204,204,204,127).tex(s.getMinU(),s.getMinV()).lightmap(240,0).endVertex();
    vb.pos(bb.maxX,bb.maxY,bb.minZ).color(204,204,204,127).tex(s.getMinU(),s.getMaxV()).lightmap(240,0).endVertex();
    vb.pos(bb.maxX,bb.minY,bb.minZ).color(204,204,204,127).tex(s.getMaxU(),s.getMaxV()).lightmap(240,0).endVertex();
    vb.pos(bb.minX,bb.minY,bb.minZ).color(204,204,204,127).tex(s.getMaxU(),s.getMinV()).lightmap(240,0).endVertex();
    vb.pos(bb.minX,bb.minY,bb.maxZ).color(204,204,204,127).tex(s.getMinU(),s.getMinV()).lightmap(240,0).endVertex();
    vb.pos(bb.maxX,bb.minY,bb.maxZ).color(204,204,204,127).tex(s.getMinU(),s.getMaxV()).lightmap(240,0).endVertex();
    vb.pos(bb.maxX,bb.maxY,bb.maxZ).color(204,204,204,127).tex(s.getMaxU(),s.getMaxV()).lightmap(240,0).endVertex();
    vb.pos(bb.minX,bb.maxY,bb.maxZ).color(204,204,204,127).tex(s.getMaxU(),s.getMinV()).lightmap(240,0).endVertex();
    vb.pos(bb.minX,bb.minY,bb.minZ).color(127,127,127,127).tex(s.getMinU(),s.getMinV()).lightmap(240,0).endVertex();
    vb.pos(bb.maxX,bb.minY,bb.minZ).color(127,127,127,127).tex(s.getMinU(),s.getMaxV()).lightmap(240,0).endVertex();
    vb.pos(bb.maxX,bb.minY,bb.maxZ).color(127,127,127,127).tex(s.getMaxU(),s.getMaxV()).lightmap(240,0).endVertex();
    vb.pos(bb.minX,bb.minY,bb.maxZ).color(127,127,127,127).tex(s.getMaxU(),s.getMinV()).lightmap(240,0).endVertex();
    vb.pos(bb.minX,bb.maxY,bb.maxZ).color(255,255,255,127).tex(s.getMinU(),s.getMinV()).lightmap(240,0).endVertex();
    vb.pos(bb.maxX,bb.maxY,bb.maxZ).color(255,255,255,127).tex(s.getMinU(),s.getMaxV()).lightmap(240,0).endVertex();
    vb.pos(bb.maxX,bb.maxY,bb.minZ).color(255,255,255,127).tex(s.getMaxU(),s.getMaxV()).lightmap(240,0).endVertex();
    vb.pos(bb.minX,bb.maxY,bb.minZ).color(255,255,255,127).tex(s.getMaxU(),s.getMinV()).lightmap(240,0).endVertex();
    vb.pos(bb.minX,bb.minY,bb.maxZ).color(153,153,153,127).tex(s.getMinU(),s.getMinV()).lightmap(240,0).endVertex();
    vb.pos(bb.minX,bb.maxY,bb.maxZ).color(153,153,153,127).tex(s.getMinU(),s.getMaxV()).lightmap(240,0).endVertex();
    vb.pos(bb.minX,bb.maxY,bb.minZ).color(153,153,153,127).tex(s.getMaxU(),s.getMaxV()).lightmap(240,0).endVertex();
    vb.pos(bb.minX,bb.minY,bb.minZ).color(153,153,153,127).tex(s.getMaxU(),s.getMinV()).lightmap(240,0).endVertex();
    vb.pos(bb.maxX,bb.minY,bb.minZ).color(153,153,153,127).tex(s.getMinU(),s.getMinV()).lightmap(240,0).endVertex();
    vb.pos(bb.maxX,bb.maxY,bb.minZ).color(153,153,153,127).tex(s.getMinU(),s.getMaxV()).lightmap(240,0).endVertex();
    vb.pos(bb.maxX,bb.maxY,bb.maxZ).color(153,153,153,127).tex(s.getMaxU(),s.getMaxV()).lightmap(240,0).endVertex();
    vb.pos(bb.maxX,bb.minY,bb.maxZ).color(153,153,153,127).tex(s.getMaxU(),s.getMinV()).lightmap(240,0).endVertex();
  }
);
}","@Override public void renderAddonFast(AddonFillingPlanner addon,EntityPlayer player,float partialTicks,VertexBuffer vb){
  Template.BuildingInfo info=addon.buildingInfo;
  if (info == null) {
    return;
  }
  Profiler prof=Minecraft.getMinecraft().mcProfiler;
  prof.startSection(""String_Node_Str"");
  prof.startSection(""String_Node_Str"");
  List<BlockPos> list=new ArrayList<>();
  Template tpl=info.getSnapshot();
  for (  BlockPos p : BlockPos.getAllInBoxMutable(info.box.min(),info.box.max())) {
    if (tpl.data.get(tpl.posToIndex(info.fromWorld(p))) && player.world.isAirBlock(p)) {
      list.add(p.toImmutable());
    }
  }
  prof.endStartSection(""String_Node_Str"");
  list.sort(Comparator.<BlockPos>comparingDouble((p) -> {
    return player.getPositionVector().squareDistanceTo(new Vec3d(p));
  }
).reversed());
  prof.endStartSection(""String_Node_Str"");
  for (  BlockPos p : list) {
    AxisAlignedBB bb=new AxisAlignedBB(p,p.add(1,1,1)).expandXyz(-0.1);
    TextureAtlasSprite s=ModelLoader.White.INSTANCE;
    vb.pos(bb.minX,bb.maxY,bb.minZ).color(204,204,204,127).tex(s.getMinU(),s.getMinV()).lightmap(240,0).endVertex();
    vb.pos(bb.maxX,bb.maxY,bb.minZ).color(204,204,204,127).tex(s.getMinU(),s.getMaxV()).lightmap(240,0).endVertex();
    vb.pos(bb.maxX,bb.minY,bb.minZ).color(204,204,204,127).tex(s.getMaxU(),s.getMaxV()).lightmap(240,0).endVertex();
    vb.pos(bb.minX,bb.minY,bb.minZ).color(204,204,204,127).tex(s.getMaxU(),s.getMinV()).lightmap(240,0).endVertex();
    vb.pos(bb.minX,bb.minY,bb.maxZ).color(204,204,204,127).tex(s.getMinU(),s.getMinV()).lightmap(240,0).endVertex();
    vb.pos(bb.maxX,bb.minY,bb.maxZ).color(204,204,204,127).tex(s.getMinU(),s.getMaxV()).lightmap(240,0).endVertex();
    vb.pos(bb.maxX,bb.maxY,bb.maxZ).color(204,204,204,127).tex(s.getMaxU(),s.getMaxV()).lightmap(240,0).endVertex();
    vb.pos(bb.minX,bb.maxY,bb.maxZ).color(204,204,204,127).tex(s.getMaxU(),s.getMinV()).lightmap(240,0).endVertex();
    vb.pos(bb.minX,bb.minY,bb.minZ).color(127,127,127,127).tex(s.getMinU(),s.getMinV()).lightmap(240,0).endVertex();
    vb.pos(bb.maxX,bb.minY,bb.minZ).color(127,127,127,127).tex(s.getMinU(),s.getMaxV()).lightmap(240,0).endVertex();
    vb.pos(bb.maxX,bb.minY,bb.maxZ).color(127,127,127,127).tex(s.getMaxU(),s.getMaxV()).lightmap(240,0).endVertex();
    vb.pos(bb.minX,bb.minY,bb.maxZ).color(127,127,127,127).tex(s.getMaxU(),s.getMinV()).lightmap(240,0).endVertex();
    vb.pos(bb.minX,bb.maxY,bb.maxZ).color(255,255,255,127).tex(s.getMinU(),s.getMinV()).lightmap(240,0).endVertex();
    vb.pos(bb.maxX,bb.maxY,bb.maxZ).color(255,255,255,127).tex(s.getMinU(),s.getMaxV()).lightmap(240,0).endVertex();
    vb.pos(bb.maxX,bb.maxY,bb.minZ).color(255,255,255,127).tex(s.getMaxU(),s.getMaxV()).lightmap(240,0).endVertex();
    vb.pos(bb.minX,bb.maxY,bb.minZ).color(255,255,255,127).tex(s.getMaxU(),s.getMinV()).lightmap(240,0).endVertex();
    vb.pos(bb.minX,bb.minY,bb.maxZ).color(153,153,153,127).tex(s.getMinU(),s.getMinV()).lightmap(240,0).endVertex();
    vb.pos(bb.minX,bb.maxY,bb.maxZ).color(153,153,153,127).tex(s.getMinU(),s.getMaxV()).lightmap(240,0).endVertex();
    vb.pos(bb.minX,bb.maxY,bb.minZ).color(153,153,153,127).tex(s.getMaxU(),s.getMaxV()).lightmap(240,0).endVertex();
    vb.pos(bb.minX,bb.minY,bb.minZ).color(153,153,153,127).tex(s.getMaxU(),s.getMinV()).lightmap(240,0).endVertex();
    vb.pos(bb.maxX,bb.minY,bb.minZ).color(153,153,153,127).tex(s.getMinU(),s.getMinV()).lightmap(240,0).endVertex();
    vb.pos(bb.maxX,bb.maxY,bb.minZ).color(153,153,153,127).tex(s.getMinU(),s.getMaxV()).lightmap(240,0).endVertex();
    vb.pos(bb.maxX,bb.maxY,bb.maxZ).color(153,153,153,127).tex(s.getMaxU(),s.getMaxV()).lightmap(240,0).endVertex();
    vb.pos(bb.maxX,bb.minY,bb.maxZ).color(153,153,153,127).tex(s.getMaxU(),s.getMinV()).lightmap(240,0).endVertex();
  }
  prof.endSection();
  prof.endSection();
}",0.8545674693932463
156297,"private void buildQueue(){
  world.profiler.startSection(""String_Node_Str"");
  queue.clear();
  paths.clear();
  queueFluid=null;
  Set<BlockPos> checked=new HashSet<>();
  List<BlockPos> nextPosesToCheck=new ArrayList<>();
  for (BlockPos posToCheck=pos.down(); posToCheck.getY() > 0; posToCheck=posToCheck.down()) {
    if (BlockUtil.getFluidWithFlowing(world,posToCheck) != null) {
      queueFluid=BlockUtil.getFluidWithFlowing(world,posToCheck);
      nextPosesToCheck.add(posToCheck);
      paths.put(posToCheck,Collections.singletonList(posToCheck));
      checked.add(posToCheck);
      if (BlockUtil.getFluid(world,posToCheck) != null) {
        queue.add(posToCheck);
      }
      fluidConnection=posToCheck;
      break;
    }
 else     if (!world.isAirBlock(posToCheck) && world.getBlockState(posToCheck).getBlock() != BCFactoryBlocks.tube) {
      break;
    }
  }
  if (nextPosesToCheck.isEmpty()) {
    world.profiler.endSection();
    return;
  }
  world.profiler.endStartSection(""String_Node_Str"");
  while (!nextPosesToCheck.isEmpty()) {
    List<BlockPos> nextPosesToCheckCopy=new ArrayList<>(nextPosesToCheck);
    nextPosesToCheck.clear();
    for (    BlockPos posToCheck : nextPosesToCheckCopy) {
      for (      EnumFacing side : new EnumFacing[]{EnumFacing.UP,EnumFacing.NORTH,EnumFacing.SOUTH,EnumFacing.WEST,EnumFacing.EAST}) {
        BlockPos offsetPos=posToCheck.offset(side);
        if ((offsetPos.getX() - pos.getX()) * (offsetPos.getX() - pos.getX()) + (offsetPos.getZ() - pos.getZ()) * (offsetPos.getZ() - pos.getZ()) > 64 * 64) {
          continue;
        }
        if (checked.add(offsetPos)) {
          if (FluidUtilBC.areFluidsEqual(BlockUtil.getFluidWithFlowing(world,offsetPos),queueFluid)) {
            ImmutableList.Builder<BlockPos> pathBuilder=new ImmutableList.Builder<>();
            pathBuilder.addAll(paths.get(posToCheck));
            pathBuilder.add(offsetPos);
            paths.put(offsetPos,pathBuilder.build());
            if (BlockUtil.getFluid(world,offsetPos) != null) {
              queue.add(offsetPos);
            }
            nextPosesToCheck.add(offsetPos);
          }
        }
      }
    }
  }
  world.profiler.endStartSection(""String_Node_Str"");
  if (FluidUtilBC.areFluidsEqual(queueFluid,BCEnergyFluids.crudeOil[0])) {
    List<BlockPos> springPositions=new ArrayList<>();
    BlockPos center=VecUtil.replaceValue(getPos(),Axis.Y,0);
    for (    BlockPos spring : BlockPos.getAllInBox(center.add(-10,0,-10),center.add(10,0,10))) {
      if (world.getBlockState(spring).getBlock() == BCCoreBlocks.spring) {
        BCLog.logger.info(""String_Node_Str"" + spring);
        TileEntity tile=world.getTileEntity(spring);
        if (tile instanceof TileSpringOil) {
          springPositions.add(spring);
          BCLog.logger.info(""String_Node_Str"" + spring);
        }
      }
    }
switch (springPositions.size()) {
case 0:
      break;
case 1:
    oilSpringPos=springPositions.get(0);
  break;
default :
springPositions.sort(Comparator.comparingDouble(pos::distanceSq));
oilSpringPos=springPositions.get(0);
}
}
world.profiler.endSection();
}","private void buildQueue(){
  world.profiler.startSection(""String_Node_Str"");
  queue.clear();
  paths.clear();
  queueFluid=null;
  Set<BlockPos> checked=new HashSet<>();
  List<BlockPos> nextPosesToCheck=new ArrayList<>();
  for (BlockPos posToCheck=pos.down(); posToCheck.getY() > 0; posToCheck=posToCheck.down()) {
    if (BlockUtil.getFluidWithFlowing(world,posToCheck) != null) {
      queueFluid=BlockUtil.getFluidWithFlowing(world,posToCheck);
      nextPosesToCheck.add(posToCheck);
      paths.put(posToCheck,Collections.singletonList(posToCheck));
      checked.add(posToCheck);
      if (BlockUtil.getFluid(world,posToCheck) != null) {
        queue.add(posToCheck);
      }
      fluidConnection=posToCheck;
      break;
    }
 else     if (!world.isAirBlock(posToCheck) && world.getBlockState(posToCheck).getBlock() != BCFactoryBlocks.tube) {
      break;
    }
  }
  if (nextPosesToCheck.isEmpty()) {
    world.profiler.endSection();
    return;
  }
  world.profiler.endStartSection(""String_Node_Str"");
  while (!nextPosesToCheck.isEmpty()) {
    List<BlockPos> nextPosesToCheckCopy=new ArrayList<>(nextPosesToCheck);
    nextPosesToCheck.clear();
    for (    BlockPos posToCheck : nextPosesToCheckCopy) {
      for (      EnumFacing side : new EnumFacing[]{EnumFacing.UP,EnumFacing.NORTH,EnumFacing.SOUTH,EnumFacing.WEST,EnumFacing.EAST}) {
        BlockPos offsetPos=posToCheck.offset(side);
        if ((offsetPos.getX() - pos.getX()) * (offsetPos.getX() - pos.getX()) + (offsetPos.getZ() - pos.getZ()) * (offsetPos.getZ() - pos.getZ()) > 64 * 64) {
          continue;
        }
        if (checked.add(offsetPos)) {
          if (FluidUtilBC.areFluidsEqual(BlockUtil.getFluidWithFlowing(world,offsetPos),queueFluid)) {
            ImmutableList.Builder<BlockPos> pathBuilder=new ImmutableList.Builder<>();
            pathBuilder.addAll(paths.get(posToCheck));
            pathBuilder.add(offsetPos);
            paths.put(offsetPos,pathBuilder.build());
            if (BlockUtil.getFluid(world,offsetPos) != null) {
              queue.add(offsetPos);
            }
            nextPosesToCheck.add(offsetPos);
          }
        }
      }
    }
  }
  world.profiler.endStartSection(""String_Node_Str"");
  if (FluidUtilBC.areFluidsEqual(queueFluid,BCEnergyFluids.crudeOil[0])) {
    List<BlockPos> springPositions=new ArrayList<>();
    BlockPos center=VecUtil.replaceValue(getPos(),Axis.Y,0);
    for (    BlockPos spring : BlockPos.getAllInBox(center.add(-10,0,-10),center.add(10,0,10))) {
      if (world.getBlockState(spring).getBlock() == BCCoreBlocks.spring) {
        TileEntity tile=world.getTileEntity(spring);
        if (tile instanceof TileSpringOil) {
          springPositions.add(spring);
        }
      }
    }
switch (springPositions.size()) {
case 0:
      break;
case 1:
    oilSpringPos=springPositions.get(0);
  break;
default :
springPositions.sort(Comparator.comparingDouble(pos::distanceSq));
oilSpringPos=springPositions.get(0);
}
}
world.profiler.endSection();
}",0.9817411150961852
156298,"public void arc(int ca,int cb,double ra,double rb,int da,int db,ArcType type){
  ra=Math.max(1,ra);
  rb=Math.max(1,rb);
  double ra2=ra * ra;
  double rb2=rb * rb;
  double sigma=2 * rb2 + ra2 * (1 - 2 * rb);
  for (int a=0, b=(int)rb; rb2 * a <= ra2 * b; a++) {
    iterator.iterate(ca - a,cb - b);
    if (type.shouldDrawSecondQuadrant()) {
      iterator.iterate(ca + a + da,cb - b);
      if (type.shouldDrawAllQuadrants()) {
        iterator.iterate(ca - a,cb + b + db);
        iterator.iterate(ca + a + da,cb + b + db);
      }
    }
    if (sigma >= 0) {
      sigma+=4 * ra2 * (1 - b);
      b--;
    }
    sigma+=rb2 * ((4 * a) + 6);
  }
  sigma=2 * ra2 + rb2 * (1 - 2 * ra);
  for (int a=(int)ra, b=0; ra2 * b <= rb2 * a; b++) {
    iterator.iterate(ca - a,cb - b);
    if (type.shouldDrawSecondQuadrant()) {
      iterator.iterate(ca + a + da,cb - b);
      if (type.shouldDrawAllQuadrants()) {
        iterator.iterate(ca - a,cb + b + db);
        iterator.iterate(ca + a + da,cb + b + db);
      }
    }
    if (sigma >= 0) {
      sigma+=4 * rb2 * (1 - a);
      a--;
    }
    sigma+=ra2 * ((4 * b) + 6);
  }
}","public void arc(int ca,int cb,double ra,double rb,int da,int db,ArcType type){
  if (ra <= 0) {
    throw new IllegalArgumentException(""String_Node_Str"" + ra + ""String_Node_Str"");
  }
  if (rb <= 0) {
    throw new IllegalArgumentException(""String_Node_Str"" + rb + ""String_Node_Str"");
  }
  double ra2=ra * ra;
  double rb2=rb * rb;
  double sigma=2 * rb2 + ra2 * (1 - 2 * rb);
  for (int a=0, b=(int)rb; rb2 * a <= ra2 * b; a++) {
    iterator.iterate(ca - a,cb - b);
    if (type.shouldDrawSecondQuadrant()) {
      iterator.iterate(ca + a + da,cb - b);
      if (type.shouldDrawAllQuadrants()) {
        iterator.iterate(ca - a,cb + b + db);
        iterator.iterate(ca + a + da,cb + b + db);
      }
    }
    if (sigma >= 0) {
      sigma+=4 * ra2 * (1 - b);
      b--;
    }
    sigma+=rb2 * ((4 * a) + 6);
  }
  sigma=2 * ra2 + rb2 * (1 - 2 * ra);
  for (int a=(int)ra, b=0; ra2 * b <= rb2 * a; b++) {
    iterator.iterate(ca - a,cb - b);
    if (type.shouldDrawSecondQuadrant()) {
      iterator.iterate(ca + a + da,cb - b);
      if (type.shouldDrawAllQuadrants()) {
        iterator.iterate(ca - a,cb + b + db);
        iterator.iterate(ca + a + da,cb + b + db);
      }
    }
    if (sigma >= 0) {
      sigma+=4 * rb2 * (1 - a);
      a--;
    }
    sigma+=ra2 * ((4 * b) + 6);
  }
}",0.9050371593724196
156299,"@Override protected void genShape(int maxA,int maxB,LineList list){
  list.setFillPoint(maxA,maxB);
  list.arc(maxA,maxB,maxA,maxB);
}","@Override protected void genShape(int maxA,int maxB,LineList list){
  if (maxA == 0 || maxB == 0) {
    list.moveTo(0,0);
    list.lineTo(maxA,maxB);
    return;
  }
  list.setFillPoint(maxA,maxB);
  list.arc(maxA,maxB,maxA,maxB);
}",0.73224043715847
156300,"@Override protected void genShape(int maxA,int maxB,LineList list){
  int halfA=maxA / 2;
  int halfB=maxB / 2;
  int halfAUpper=maxA - halfA;
  int halfBUpper=maxB - halfB;
  list.setFillPoint(halfA,halfB);
  list.arc(halfA,halfB,maxA / 2.0,maxB / 2.0,halfAUpper - halfA,halfBUpper - halfB,ArcType.FULL_CIRCLE);
}","@Override protected void genShape(int maxA,int maxB,LineList list){
  if (maxA == 0 || maxB == 0) {
    list.moveTo(0,0);
    list.lineTo(maxA,maxB);
    return;
  }
  int halfA=maxA / 2;
  int halfB=maxB / 2;
  int halfAUpper=maxA - halfA;
  int halfBUpper=maxB - halfB;
  list.setFillPoint(halfA,halfB);
  list.arc(halfA,halfB,maxA / 2.0,maxB / 2.0,halfAUpper - halfA,halfBUpper - halfB,ArcType.FULL_CIRCLE);
}",0.8650137741046832
156301,"@Override protected void genShape(int maxA,int maxB,LineList list){
  int halfA=maxA / 2;
  int halfAUpper=maxA - halfA;
  list.setFillPoint(halfA,maxB);
  list.arc(halfA,maxB,maxA / 2.0,maxB,halfAUpper - halfA,0,ArcType.SEMI_CIRCLE);
}","@Override protected void genShape(int maxA,int maxB,LineList list){
  if (maxA == 0 || maxB == 0) {
    list.moveTo(0,0);
    list.lineTo(maxA,maxB);
    return;
  }
  int halfA=maxA / 2;
  int halfAUpper=maxA - halfA;
  list.setFillPoint(halfA,maxB);
  list.arc(halfA,maxB,maxA / 2.0,maxB,halfAUpper - halfA,0,ArcType.SEMI_CIRCLE);
}",0.8280701754385965
156302,"@Override public FilledTemplate createTemplate(IFillerStatementContainer filler,IStatementParameter[] params){
  PatternParameterHollow hollow=getParam(0,params,PatternParameterHollow.FILLED_INNER);
  FilledTemplate tpl=new FilledTemplate(filler.getBox());
  double cx=tpl.maxX / 2.0;
  double cy=tpl.maxY / 2.0;
  double cz=tpl.maxZ / 2.0;
  double rx=cx + 0.5;
  double ry=cy + 0.5;
  double rz=cz + 0.5;
  BCLog.logger.info(""String_Node_Str"" + new Vec3d(cx,cy,cz).add(new Vec3d(tpl.min)) + ""String_Node_Str""+ new Vec3d(rx,ry,rz));
  for (int x=0; x <= tpl.maxX; x++) {
    double dx=Math.abs(x - cx) / rx;
    double dxx=dx * dx;
    for (int y=0; y <= tpl.maxY; y++) {
      double dy=Math.abs(y - cy) / ry;
      double dyy=dy * dy;
      for (int z=0; z <= tpl.maxZ; z++) {
        double dz=Math.abs(z - cz) / rz;
        double dzz=dz * dz;
        if (dxx + dyy + dzz < 1) {
          tpl.fill(x,y,z);
        }
      }
    }
  }
  boolean removeInside=hollow != PatternParameterHollow.FILLED_INNER;
  boolean outerFilled=hollow.outerFilled;
  if (removeInside) {
    FilledTemplate tpl2=new FilledTemplate(filler.getBox());
    for (int x=0; x <= tpl.maxX; x++) {
      for (int y=0; y <= tpl.maxY; y++) {
        for (int z=0; z <= tpl.maxZ; z++) {
          if (tpl.get(x,y,z)) {
            tpl2.fill(x,y,z);
            break;
          }
          if (outerFilled) {
            tpl2.fill(x,y,z);
          }
        }
        for (int z=tpl.maxZ; z >= 0; z--) {
          if (tpl.get(x,y,z)) {
            tpl2.fill(x,y,z);
            break;
          }
          if (outerFilled) {
            tpl2.fill(x,y,z);
          }
        }
      }
    }
    for (int x=0; x <= tpl.maxX; x++) {
      for (int z=0; z <= tpl.maxZ; z++) {
        for (int y=0; y <= tpl.maxY; y++) {
          if (tpl.get(x,y,z)) {
            tpl2.fill(x,y,z);
            break;
          }
          if (outerFilled) {
            tpl2.fill(x,y,z);
          }
        }
        for (int y=tpl.maxY; y >= 0; y--) {
          if (tpl.get(x,y,z)) {
            tpl2.fill(x,y,z);
            break;
          }
          if (outerFilled) {
            tpl2.fill(x,y,z);
          }
        }
      }
    }
    for (int y=0; y <= tpl.maxY; y++) {
      for (int z=0; z <= tpl.maxZ; z++) {
        for (int x=0; x <= tpl.maxX; x++) {
          if (tpl.get(x,y,z)) {
            tpl2.fill(x,y,z);
            break;
          }
          if (outerFilled) {
            tpl2.fill(x,y,z);
          }
        }
        for (int x=tpl.maxX; x >= 0; x--) {
          if (tpl.get(x,y,z)) {
            tpl2.fill(x,y,z);
            break;
          }
          if (outerFilled) {
            tpl2.fill(x,y,z);
          }
        }
      }
    }
    tpl=tpl2;
  }
  return tpl;
}","@Override public FilledTemplate createTemplate(IFillerStatementContainer filler,IStatementParameter[] params){
  PatternParameterHollow hollow=getParam(0,params,PatternParameterHollow.FILLED_INNER);
  FilledTemplate tpl=new FilledTemplate(filler.getBox());
  double cx=tpl.maxX / 2.0;
  double cy=tpl.maxY / 2.0;
  double cz=tpl.maxZ / 2.0;
  double rx=cx + 0.5;
  double ry=cy + 0.5;
  double rz=cz + 0.5;
  for (int x=0; x <= tpl.maxX; x++) {
    double dx=Math.abs(x - cx) / rx;
    double dxx=dx * dx;
    for (int y=0; y <= tpl.maxY; y++) {
      double dy=Math.abs(y - cy) / ry;
      double dyy=dy * dy;
      for (int z=0; z <= tpl.maxZ; z++) {
        double dz=Math.abs(z - cz) / rz;
        double dzz=dz * dz;
        if (dxx + dyy + dzz < 1) {
          tpl.fill(x,y,z);
        }
      }
    }
  }
  boolean removeInside=hollow != PatternParameterHollow.FILLED_INNER;
  boolean outerFilled=hollow.outerFilled;
  if (removeInside) {
    FilledTemplate tpl2=new FilledTemplate(filler.getBox());
    for (int x=0; x <= tpl.maxX; x++) {
      for (int y=0; y <= tpl.maxY; y++) {
        for (int z=0; z <= tpl.maxZ; z++) {
          if (tpl.get(x,y,z)) {
            tpl2.fill(x,y,z);
            break;
          }
          if (outerFilled) {
            tpl2.fill(x,y,z);
          }
        }
        for (int z=tpl.maxZ; z >= 0; z--) {
          if (tpl.get(x,y,z)) {
            tpl2.fill(x,y,z);
            break;
          }
          if (outerFilled) {
            tpl2.fill(x,y,z);
          }
        }
      }
    }
    for (int x=0; x <= tpl.maxX; x++) {
      for (int z=0; z <= tpl.maxZ; z++) {
        for (int y=0; y <= tpl.maxY; y++) {
          if (tpl.get(x,y,z)) {
            tpl2.fill(x,y,z);
            break;
          }
          if (outerFilled) {
            tpl2.fill(x,y,z);
          }
        }
        for (int y=tpl.maxY; y >= 0; y--) {
          if (tpl.get(x,y,z)) {
            tpl2.fill(x,y,z);
            break;
          }
          if (outerFilled) {
            tpl2.fill(x,y,z);
          }
        }
      }
    }
    for (int y=0; y <= tpl.maxY; y++) {
      for (int z=0; z <= tpl.maxZ; z++) {
        for (int x=0; x <= tpl.maxX; x++) {
          if (tpl.get(x,y,z)) {
            tpl2.fill(x,y,z);
            break;
          }
          if (outerFilled) {
            tpl2.fill(x,y,z);
          }
        }
        for (int x=tpl.maxX; x >= 0; x--) {
          if (tpl.get(x,y,z)) {
            tpl2.fill(x,y,z);
            break;
          }
          if (outerFilled) {
            tpl2.fill(x,y,z);
          }
        }
      }
    }
    tpl=tpl2;
  }
  return tpl;
}",0.9764771253935914
156303,"@Override public FilledTemplate createTemplate(IFillerStatementContainer filler,IStatementParameter[] params){
  PatternParameterHollow hollow=getParam(0,params,PatternParameterHollow.FILLED_INNER);
  PatternParameterFacing facing=getParam(1,params,PatternParameterFacing.DOWN);
  PatternParameterRotation rotation=getParam(2,params,PatternParameterRotation.NONE);
  FilledTemplate tpl=new FilledTemplate(filler.getBox());
  Vec3d center;
  Vec3d radius;
  Set<EnumFacing> innerSides=EnumSet.noneOf(EnumFacing.class);
  Vec3d max=new Vec3d(tpl.maxX,tpl.maxY,tpl.maxZ);
  center=VecUtil.scale(max,0.5);
  radius=center.addVector(0.5,0.5,0.5);
  innerSides.add(facing.face);
  Axis axis=facing.face.getAxis();
  Vec3d offset=VecUtil.offset(Vec3d.ZERO,facing.face,VecUtil.getValue(radius,axis));
  center=center.add(offset);
  radius=VecUtil.replaceValue(radius,axis,VecUtil.getValue(radius,axis) * 2);
  if (type.openFaces > 1) {
    Axis secondaryAxis;
    if (rotation.rotationCount % 2 == 1) {
      secondaryAxis=axis == Axis.X ? Axis.Y : axis == Axis.Y ? Axis.Z : Axis.X;
    }
 else {
      secondaryAxis=axis == Axis.X ? Axis.Z : axis == Axis.Y ? Axis.X : Axis.Y;
    }
    EnumFacing secondaryFace=VecUtil.getFacing(secondaryAxis,rotation.rotationCount >= 2);
    innerSides.add(secondaryFace);
    offset=VecUtil.offset(Vec3d.ZERO,secondaryFace,VecUtil.getValue(radius,secondaryAxis));
    center=center.add(offset);
    radius=VecUtil.replaceValue(radius,secondaryAxis,VecUtil.getValue(radius,secondaryAxis) * 2);
    if (type.openFaces > 2) {
      Axis tertiaryAxis;
      int rotationCount=(rotation.rotationCount + 1) & 3;
      if (rotationCount % 2 == 1) {
        tertiaryAxis=axis == Axis.X ? Axis.Y : axis == Axis.Y ? Axis.Z : Axis.X;
      }
 else {
        tertiaryAxis=axis == Axis.X ? Axis.Z : axis == Axis.Y ? Axis.X : Axis.Y;
      }
      EnumFacing tertiaryFace=VecUtil.getFacing(tertiaryAxis,rotationCount >= 2);
      innerSides.add(tertiaryFace);
      offset=VecUtil.offset(Vec3d.ZERO,tertiaryFace,VecUtil.getValue(radius,tertiaryAxis));
      center=center.add(offset);
      radius=VecUtil.replaceValue(radius,tertiaryAxis,VecUtil.getValue(radius,tertiaryAxis) * 2);
    }
  }
  BCLog.logger.info(""String_Node_Str"" + center.add(new Vec3d(tpl.min)) + ""String_Node_Str""+ radius);
  double cx=center.xCoord;
  double cy=center.yCoord;
  double cz=center.zCoord;
  double rx=radius.xCoord;
  double ry=radius.yCoord;
  double rz=radius.zCoord;
  for (int x=0; x <= tpl.maxX; x++) {
    double dx=Math.abs(x - cx) / rx;
    double dxx=dx * dx;
    for (int y=0; y <= tpl.maxY; y++) {
      double dy=Math.abs(y - cy) / ry;
      double dyy=dy * dy;
      for (int z=0; z <= tpl.maxZ; z++) {
        double dz=Math.abs(z - cz) / rz;
        double dzz=dz * dz;
        if (dxx + dyy + dzz < 1) {
          tpl.fill(x,y,z);
        }
      }
    }
  }
  boolean removeInside=hollow != PatternParameterHollow.FILLED_INNER;
  boolean outerFilled=hollow.outerFilled;
  if (removeInside) {
    FilledTemplate tpl2=new FilledTemplate(filler.getBox());
    for (int x=0; x <= tpl.maxX; x++) {
      for (int y=0; y <= tpl.maxY; y++) {
        if (!innerSides.contains(EnumFacing.NORTH)) {
          for (int z=0; z <= tpl.maxZ; z++) {
            if (tpl.get(x,y,z)) {
              tpl2.fill(x,y,z);
              break;
            }
            if (outerFilled) {
              tpl2.fill(x,y,z);
            }
          }
        }
        if (!innerSides.contains(EnumFacing.SOUTH)) {
          for (int z=tpl.maxZ; z >= 0; z--) {
            if (tpl.get(x,y,z)) {
              tpl2.fill(x,y,z);
              break;
            }
            if (outerFilled) {
              tpl2.fill(x,y,z);
            }
          }
        }
      }
    }
    for (int x=0; x <= tpl.maxX; x++) {
      for (int z=0; z <= tpl.maxZ; z++) {
        if (!innerSides.contains(EnumFacing.DOWN)) {
          for (int y=0; y <= tpl.maxY; y++) {
            if (tpl.get(x,y,z)) {
              tpl2.fill(x,y,z);
              break;
            }
            if (outerFilled) {
              tpl2.fill(x,y,z);
            }
          }
        }
        if (!innerSides.contains(EnumFacing.UP)) {
          for (int y=tpl.maxY; y >= 0; y--) {
            if (tpl.get(x,y,z)) {
              tpl2.fill(x,y,z);
              break;
            }
            if (outerFilled) {
              tpl2.fill(x,y,z);
            }
          }
        }
      }
    }
    for (int y=0; y <= tpl.maxY; y++) {
      for (int z=0; z <= tpl.maxZ; z++) {
        if (!innerSides.contains(EnumFacing.WEST)) {
          for (int x=0; x <= tpl.maxX; x++) {
            if (tpl.get(x,y,z)) {
              tpl2.fill(x,y,z);
              break;
            }
            if (outerFilled) {
              tpl2.fill(x,y,z);
            }
          }
        }
        if (!innerSides.contains(EnumFacing.EAST)) {
          for (int x=tpl.maxX; x >= 0; x--) {
            if (tpl.get(x,y,z)) {
              tpl2.fill(x,y,z);
              break;
            }
            if (outerFilled) {
              tpl2.fill(x,y,z);
            }
          }
        }
      }
    }
    tpl=tpl2;
  }
  return tpl;
}","@Override public FilledTemplate createTemplate(IFillerStatementContainer filler,IStatementParameter[] params){
  PatternParameterHollow hollow=getParam(0,params,PatternParameterHollow.FILLED_INNER);
  PatternParameterFacing facing=getParam(1,params,PatternParameterFacing.DOWN);
  PatternParameterRotation rotation=getParam(2,params,PatternParameterRotation.NONE);
  FilledTemplate tpl=new FilledTemplate(filler.getBox());
  Vec3d center;
  Vec3d radius;
  Set<EnumFacing> innerSides=EnumSet.noneOf(EnumFacing.class);
  Vec3d max=new Vec3d(tpl.maxX,tpl.maxY,tpl.maxZ);
  center=VecUtil.scale(max,0.5);
  radius=center.addVector(0.5,0.5,0.5);
  innerSides.add(facing.face);
  Axis axis=facing.face.getAxis();
  Vec3d offset=VecUtil.offset(Vec3d.ZERO,facing.face,VecUtil.getValue(radius,axis));
  center=center.add(offset);
  radius=VecUtil.replaceValue(radius,axis,VecUtil.getValue(radius,axis) * 2);
  if (type.openFaces > 1) {
    Axis secondaryAxis;
    if (rotation.rotationCount % 2 == 1) {
      secondaryAxis=axis == Axis.X ? Axis.Y : axis == Axis.Y ? Axis.Z : Axis.X;
    }
 else {
      secondaryAxis=axis == Axis.X ? Axis.Z : axis == Axis.Y ? Axis.X : Axis.Y;
    }
    EnumFacing secondaryFace=VecUtil.getFacing(secondaryAxis,rotation.rotationCount >= 2);
    innerSides.add(secondaryFace);
    offset=VecUtil.offset(Vec3d.ZERO,secondaryFace,VecUtil.getValue(radius,secondaryAxis));
    center=center.add(offset);
    radius=VecUtil.replaceValue(radius,secondaryAxis,VecUtil.getValue(radius,secondaryAxis) * 2);
    if (type.openFaces > 2) {
      Axis tertiaryAxis;
      int rotationCount=(rotation.rotationCount + 1) & 3;
      if (rotationCount % 2 == 1) {
        tertiaryAxis=axis == Axis.X ? Axis.Y : axis == Axis.Y ? Axis.Z : Axis.X;
      }
 else {
        tertiaryAxis=axis == Axis.X ? Axis.Z : axis == Axis.Y ? Axis.X : Axis.Y;
      }
      EnumFacing tertiaryFace=VecUtil.getFacing(tertiaryAxis,rotationCount >= 2);
      innerSides.add(tertiaryFace);
      offset=VecUtil.offset(Vec3d.ZERO,tertiaryFace,VecUtil.getValue(radius,tertiaryAxis));
      center=center.add(offset);
      radius=VecUtil.replaceValue(radius,tertiaryAxis,VecUtil.getValue(radius,tertiaryAxis) * 2);
    }
  }
  double cx=center.xCoord;
  double cy=center.yCoord;
  double cz=center.zCoord;
  double rx=radius.xCoord;
  double ry=radius.yCoord;
  double rz=radius.zCoord;
  for (int x=0; x <= tpl.maxX; x++) {
    double dx=Math.abs(x - cx) / rx;
    double dxx=dx * dx;
    for (int y=0; y <= tpl.maxY; y++) {
      double dy=Math.abs(y - cy) / ry;
      double dyy=dy * dy;
      for (int z=0; z <= tpl.maxZ; z++) {
        double dz=Math.abs(z - cz) / rz;
        double dzz=dz * dz;
        if (dxx + dyy + dzz < 1) {
          tpl.fill(x,y,z);
        }
      }
    }
  }
  boolean removeInside=hollow != PatternParameterHollow.FILLED_INNER;
  boolean outerFilled=hollow.outerFilled;
  if (removeInside) {
    FilledTemplate tpl2=new FilledTemplate(filler.getBox());
    for (int x=0; x <= tpl.maxX; x++) {
      for (int y=0; y <= tpl.maxY; y++) {
        if (!innerSides.contains(EnumFacing.NORTH)) {
          for (int z=0; z <= tpl.maxZ; z++) {
            if (tpl.get(x,y,z)) {
              tpl2.fill(x,y,z);
              break;
            }
            if (outerFilled) {
              tpl2.fill(x,y,z);
            }
          }
        }
        if (!innerSides.contains(EnumFacing.SOUTH)) {
          for (int z=tpl.maxZ; z >= 0; z--) {
            if (tpl.get(x,y,z)) {
              tpl2.fill(x,y,z);
              break;
            }
            if (outerFilled) {
              tpl2.fill(x,y,z);
            }
          }
        }
      }
    }
    for (int x=0; x <= tpl.maxX; x++) {
      for (int z=0; z <= tpl.maxZ; z++) {
        if (!innerSides.contains(EnumFacing.DOWN)) {
          for (int y=0; y <= tpl.maxY; y++) {
            if (tpl.get(x,y,z)) {
              tpl2.fill(x,y,z);
              break;
            }
            if (outerFilled) {
              tpl2.fill(x,y,z);
            }
          }
        }
        if (!innerSides.contains(EnumFacing.UP)) {
          for (int y=tpl.maxY; y >= 0; y--) {
            if (tpl.get(x,y,z)) {
              tpl2.fill(x,y,z);
              break;
            }
            if (outerFilled) {
              tpl2.fill(x,y,z);
            }
          }
        }
      }
    }
    for (int y=0; y <= tpl.maxY; y++) {
      for (int z=0; z <= tpl.maxZ; z++) {
        if (!innerSides.contains(EnumFacing.WEST)) {
          for (int x=0; x <= tpl.maxX; x++) {
            if (tpl.get(x,y,z)) {
              tpl2.fill(x,y,z);
              break;
            }
            if (outerFilled) {
              tpl2.fill(x,y,z);
            }
          }
        }
        if (!innerSides.contains(EnumFacing.EAST)) {
          for (int x=tpl.maxX; x >= 0; x--) {
            if (tpl.get(x,y,z)) {
              tpl2.fill(x,y,z);
              break;
            }
            if (outerFilled) {
              tpl2.fill(x,y,z);
            }
          }
        }
      }
    }
    tpl=tpl2;
  }
  return tpl;
}",0.9901664881705774
156304,"public String toFormatString(){
  StringBuilder miscString=new StringBuilder();
  for (  TextFormatting format : misc) {
    miscString.append(format.toString());
  }
  return (colour == null ? ""String_Node_Str"" : colour.toString()) + miscString + text;
}","public String toFormatString(){
  StringBuilder miscString=new StringBuilder();
  for (  TextFormatting format : misc) {
    miscString.append(format.toString());
  }
  return TextFormatting.RESET + (colour == null ? ""String_Node_Str"" : colour.toString()) + miscString+ text;
}",0.9548872180451128
156305,"public static void loadAll(){
  RULES.clear();
  READ_DOMAINS.clear();
  for (  ModContainer modContainer : Loader.instance().getModList()) {
    String domain=modContainer.getModId();
    if (!READ_DOMAINS.contains(domain)) {
      String base=""String_Node_Str"" + domain + ""String_Node_Str"";
      if (modContainer.getMod() == null) {
        continue;
      }
      InputStream inputStream=modContainer.getMod().getClass().getClassLoader().getResourceAsStream(base + ""String_Node_Str"");
      if (inputStream != null) {
        GSON.<List<String>>fromJson(new InputStreamReader(inputStream),new TypeToken<List<String>>(){
        }
.getType()).stream().map(name -> base + name + ""String_Node_Str"").map(name -> {
          InputStream resourceAsStream=modContainer.getMod().getClass().getClassLoader().getResourceAsStream(name);
          if (resourceAsStream == null) {
            throw new RuntimeException(new IOException(""String_Node_Str"" + name));
          }
          return resourceAsStream;
        }
).flatMap(localInputStream -> GSON.<List<JsonRule>>fromJson(new InputStreamReader(localInputStream),new TypeToken<List<JsonRule>>(){
        }
.getType()).stream()).forEach(RULES::add);
        READ_DOMAINS.add(domain);
      }
    }
  }
  READ_DOMAINS.add(""String_Node_Str"");
  READ_DOMAINS.add(""String_Node_Str"");
  READ_DOMAINS.add(""String_Node_Str"");
  READ_DOMAINS.add(""String_Node_Str"");
  READ_DOMAINS.add(""String_Node_Str"");
  READ_DOMAINS.add(""String_Node_Str"");
  READ_DOMAINS.add(""String_Node_Str"");
  READ_DOMAINS.add(""String_Node_Str"");
  READ_DOMAINS.add(""String_Node_Str"");
  if (!BCLib.DEV) {
    READ_DOMAINS.removeIf(domain -> domain.startsWith(""String_Node_Str""));
  }
}","public static void loadAll(){
  RULES.clear();
  READ_DOMAINS.clear();
  for (  ModContainer modContainer : Loader.instance().getModList()) {
    String domain=modContainer.getModId();
    if (!READ_DOMAINS.contains(domain)) {
      String base=""String_Node_Str"" + domain + ""String_Node_Str"";
      if (modContainer.getMod() == null) {
        continue;
      }
      InputStream inputStream=modContainer.getMod().getClass().getClassLoader().getResourceAsStream(base + ""String_Node_Str"");
      if (inputStream != null) {
        GSON.<List<String>>fromJson(new InputStreamReader(inputStream,StandardCharsets.UTF_8),new TypeToken<List<String>>(){
        }
.getType()).stream().map(name -> base + name + ""String_Node_Str"").map(name -> {
          InputStream resourceAsStream=modContainer.getMod().getClass().getClassLoader().getResourceAsStream(name);
          if (resourceAsStream == null) {
            throw new RuntimeException(new IOException(""String_Node_Str"" + name));
          }
          return resourceAsStream;
        }
).flatMap(localInputStream -> GSON.<List<JsonRule>>fromJson(new InputStreamReader(localInputStream),new TypeToken<List<JsonRule>>(){
        }
.getType()).stream()).forEach(RULES::add);
        READ_DOMAINS.add(domain);
      }
    }
  }
  READ_DOMAINS.add(""String_Node_Str"");
  READ_DOMAINS.add(""String_Node_Str"");
  READ_DOMAINS.add(""String_Node_Str"");
  READ_DOMAINS.add(""String_Node_Str"");
  READ_DOMAINS.add(""String_Node_Str"");
  READ_DOMAINS.add(""String_Node_Str"");
  READ_DOMAINS.add(""String_Node_Str"");
  READ_DOMAINS.add(""String_Node_Str"");
  READ_DOMAINS.add(""String_Node_Str"");
  if (!BCLib.DEV) {
    READ_DOMAINS.removeIf(domain -> domain.startsWith(""String_Node_Str""));
  }
}",0.9932846715328468
156306,"@Override public boolean isTriggerActive(TileEntity tile,EnumFacing side,IStatementContainer container,IStatementParameter[] parameters){
  ItemStack searchedStack=StackUtil.EMPTY;
  if (parameters != null && parameters.length >= 1 && parameters[0] != null) {
    searchedStack=parameters[0].getItemStack();
  }
  IItemHandler handler=tile.getCapability(CapUtil.CAP_ITEMS,side.getOpposite());
  if (handler != null) {
    boolean hasSlots=false;
    boolean foundItems=false;
    boolean foundSpace=false;
    for (int i=0; i < handler.getSlots(); i++) {
      hasSlots=true;
      ItemStack stack=handler.getStackInSlot(i);
      foundItems|=!stack.isEmpty() && (searchedStack.isEmpty() || StackUtil.canStacksOrListsMerge(stack,searchedStack));
      foundSpace|=(stack.isEmpty() | (StackUtil.canStacksOrListsMerge(stack,searchedStack) && stack.getCount() < stack.getMaxStackSize())) && (searchedStack.isEmpty() || searchedStack.getItem() instanceof IList || handler.insertItem(i,searchedStack,true).isEmpty());
    }
    if (!hasSlots) {
      return false;
    }
switch (state) {
case EMPTY:
      return !foundItems;
case CONTAINS:
    return foundItems;
case SPACE:
  return foundSpace;
default :
return !foundSpace;
}
}
return false;
}","@Override public boolean isTriggerActive(TileEntity tile,EnumFacing side,IStatementContainer container,IStatementParameter[] parameters){
  ItemStack searchedStack=StackUtil.EMPTY;
  if (parameters != null && parameters.length >= 1 && parameters[0] != null) {
    searchedStack=parameters[0].getItemStack();
  }
  IItemHandler handler=tile.getCapability(CapUtil.CAP_ITEMS,side.getOpposite());
  if (handler != null) {
    boolean hasSlots=false;
    boolean foundItems=false;
    boolean foundSpace=false;
    for (int i=0; i < handler.getSlots(); i++) {
      hasSlots=true;
      ItemStack stack=handler.getStackInSlot(i);
      foundItems|=!stack.isEmpty() && (searchedStack.isEmpty() || StackUtil.canStacksOrListsMerge(stack,searchedStack));
      foundSpace|=(stack.isEmpty() || (StackUtil.canStacksOrListsMerge(stack,searchedStack) && stack.getCount() < stack.getMaxStackSize())) && (searchedStack.isEmpty() || searchedStack.getItem() instanceof IList || handler.insertItem(i,searchedStack,true).isEmpty());
    }
    if (!hasSlots) {
      return false;
    }
switch (state) {
case EMPTY:
      return !foundItems;
case CONTAINS:
    return foundItems;
case SPACE:
  return foundSpace;
default :
return !foundSpace;
}
}
return false;
}",0.999597261377366
156307,"private static JsonContents loadContents(IResourceManager resourceManager,String domain){
  ResourceLocation location=new ResourceLocation(domain,""String_Node_Str"");
  try (InputStream is=resourceManager.getResource(location).getInputStream()){
    if (is != null) {
      InputStreamReader isr=new InputStreamReader(is);
      return new Gson().fromJson(isr,JsonContents.class);
    }
    return null;
  }
 catch (  FileNotFoundException fnfe) {
    if (DEBUG) {
      BCLog.logger.warn(""String_Node_Str"" + location + ""String_Node_Str"");
    }
    return null;
  }
catch (  IOException io) {
    if (DEBUG) {
      BCLog.logger.warn(""String_Node_Str"" + domain + ""String_Node_Str"",io);
    }
 else {
      BCLog.logger.warn(""String_Node_Str"" + domain + ""String_Node_Str""+ io.getMessage());
    }
    return null;
  }
}","private static JsonContents loadContents(IResourceManager resourceManager,String domain){
  ResourceLocation location=new ResourceLocation(domain,""String_Node_Str"");
  try (InputStream is=resourceManager.getResource(location).getInputStream()){
    if (is != null) {
      InputStreamReader isr=new InputStreamReader(is,StandardCharsets.UTF_8);
      return new Gson().fromJson(isr,JsonContents.class);
    }
    return null;
  }
 catch (  FileNotFoundException fnfe) {
    if (DEBUG) {
      BCLog.logger.warn(""String_Node_Str"" + location + ""String_Node_Str"");
    }
    return null;
  }
catch (  IOException io) {
    if (DEBUG) {
      BCLog.logger.warn(""String_Node_Str"" + domain + ""String_Node_Str"",io);
    }
 else {
      BCLog.logger.warn(""String_Node_Str"" + domain + ""String_Node_Str""+ io.getMessage());
    }
    return null;
  }
}",0.9861362266425556
156308,"public InputStreamReader startLoading(ResourceLocation location) throws JsonSyntaxException {
  if (!loaded.add(location)) {
    throw new JsonSyntaxException(""String_Node_Str"" + location + ""String_Node_Str""+ loadingStack.peek());
  }
  loadingStack.push(location);
  try {
    IResource res=Minecraft.getMinecraft().getResourceManager().getResource(location);
    return new InputStreamReader(res.getInputStream());
  }
 catch (  FileNotFoundException e) {
    throw new JsonSyntaxException(""String_Node_Str"" + location,e);
  }
catch (  IOException io) {
    throw new JsonSyntaxException(io);
  }
}","public InputStreamReader startLoading(ResourceLocation location) throws JsonSyntaxException {
  if (!loaded.add(location)) {
    throw new JsonSyntaxException(""String_Node_Str"" + location + ""String_Node_Str""+ loadingStack.peek());
  }
  loadingStack.push(location);
  try {
    IResource res=Minecraft.getMinecraft().getResourceManager().getResource(location);
    return new InputStreamReader(res.getInputStream(),StandardCharsets.UTF_8);
  }
 catch (  FileNotFoundException e) {
    throw new JsonSyntaxException(""String_Node_Str"" + location,e);
  }
catch (  IOException io) {
    throw new JsonSyntaxException(io);
  }
}",0.98119378577269
156309,"protected final void read(InputStream streamIn){
  if (streamIn != null) {
    try (Reader reader=new InputStreamReader(streamIn)){
      properties.load(reader);
      reader.close();
    }
 catch (    IOException e) {
      BCLog.logger.warn(""String_Node_Str"" + e.getMessage());
    }
  }
}","protected final void read(InputStream streamIn){
  if (streamIn != null) {
    try (Reader reader=new InputStreamReader(streamIn,StandardCharsets.UTF_8)){
      properties.load(reader);
      reader.close();
    }
 catch (    IOException e) {
      BCLog.logger.warn(""String_Node_Str"" + e.getMessage());
    }
  }
}",0.9621087314662272
156310,"protected final void write(OutputStream streamOut){
  if (streamOut == null)   return;
  try (Writer writer=new OutputStreamWriter(streamOut)){
    properties.store(writer,comment());
    writer.close();
  }
 catch (  IOException e) {
    BCLog.logger.warn(""String_Node_Str"" + e.getMessage());
  }
}","protected final void write(OutputStream streamOut){
  if (streamOut == null)   return;
  try (Writer writer=new OutputStreamWriter(streamOut,StandardCharsets.UTF_8)){
    properties.store(writer,comment());
    writer.close();
  }
 catch (  IOException e) {
    BCLog.logger.warn(""String_Node_Str"" + e.getMessage());
  }
}",0.9629629629629628
156311,"private void internalTick(double value){
  pos=++pos % precise;
  double oldValue=data[pos];
  data[pos]=value;
  if (pos == 0) {
    averageRaw=0;
    for (    double iValue : data) {
      averageRaw+=iValue;
    }
  }
 else {
    averageRaw=averageRaw - oldValue + value;
  }
}","private void internalTick(double value){
  pos=(pos + 1) % precise;
  double oldValue=data[pos];
  data[pos]=value;
  if (pos == 0) {
    averageRaw=0;
    for (    double iValue : data) {
      averageRaw+=iValue;
    }
  }
 else {
    averageRaw=averageRaw - oldValue + value;
  }
}",0.1773049645390071
156312,"public static boolean isValid(BlockPos offset){
  if (offset.getX() < 0 | offset.getX() >= 16)   return false;
  if (offset.getY() < 0 | offset.getY() >= 16)   return false;
  if (offset.getZ() < 0 | offset.getZ() >= 16)   return false;
  return true;
}","public static boolean isValid(BlockPos offset){
  if (offset.getX() < 0 || offset.getX() >= 16)   return false;
  if (offset.getY() < 0 || offset.getY() >= 16)   return false;
  if (offset.getZ() < 0 || offset.getZ() >= 16)   return false;
  return true;
}",0.9941060903732808
156313,"@Override public void update(){
  if (world.isRemote) {
    prevClientDrillPos=clientDrillPos;
    clientDrillPos=drillPos;
    if (currentTask != null) {
      currentTask.clientTick();
    }
    return;
  }
  if (!frameBox.isInitialized() || !miningBox.isInitialized()) {
    return;
  }
  if (!toCheck.isEmpty()) {
    for (int i=0; i < (firstChecked ? 10 : 50); i++) {
      BlockPos blockPos=toCheck.pollFirst();
      check(blockPos);
      toCheck.addLast(blockPos);
    }
  }
  if (currentTask != null) {
    long max=MAX_MJ_PER_TICK;
    max*=battery.getStored() + max;
    max/=battery.getCapacity() / 2;
    max=Math.min(max,MAX_MJ_PER_TICK);
    long power=battery.extractPower(0,max);
    if (currentTask.addPower(power)) {
      currentTask=null;
    }
    sendNetworkUpdate(NET_RENDER_DATA);
    return;
  }
  if (!firstChecked) {
    return;
  }
  if (!frameBreakBlockPoses.isEmpty()) {
    BlockPos blockPos=frameBreakBlockPoses.iterator().next();
    if (!canNotMine(blockPos)) {
      drillPos=null;
      currentTask=new TaskBreakBlock(blockPos);
      sendNetworkUpdate(NET_RENDER_DATA);
    }
    check(blockPos);
    return;
  }
  if (!framePlaceFramePoses.isEmpty()) {
    for (    BlockPos blockPos : getFramePositions()) {
      if (!framePlaceFramePoses.contains(blockPos)) {
        continue;
      }
      check(blockPos);
      if (!framePlaceFramePoses.contains(blockPos)) {
        continue;
      }
      drillPos=null;
      currentTask=new TaskAddFrame(blockPos);
      sendNetworkUpdate(NET_RENDER_DATA);
      return;
    }
  }
  if (boxIterator == null || drillPos == null) {
    boxIterator=createBoxIterator();
    while (world.isAirBlock(boxIterator.getCurrent()) || canSkip(boxIterator.getCurrent())) {
      if (boxIterator.advance() == null) {
        break;
      }
    }
    drillPos=new Vec3d(miningBox.closestInsideTo(pos));
  }
  if (boxIterator != null && boxIterator.hasNext()) {
    boolean found=false;
    if (drillPos.squareDistanceTo(new Vec3d(boxIterator.getCurrent())) >= 1) {
      currentTask=new TaskMoveDrill(drillPos,new Vec3d(boxIterator.getCurrent()));
      found=true;
    }
 else     if (!world.isAirBlock(boxIterator.getCurrent()) && !canSkip(boxIterator.getCurrent())) {
      if (!canNotMine(boxIterator.getCurrent())) {
        currentTask=new TaskBreakBlock(boxIterator.getCurrent());
        found=true;
      }
    }
 else {
      found=true;
      BlockPos next=boxIterator.advance();
      if (next == null) {
        currentTask=null;
      }
 else {
        currentTask=new TaskMoveDrill(drillPos,new Vec3d(next));
      }
    }
    if (found) {
      sendNetworkUpdate(NET_RENDER_DATA);
    }
  }
}","@Override public void update(){
  if (world.isRemote) {
    prevClientDrillPos=clientDrillPos;
    clientDrillPos=drillPos;
    if (currentTask != null) {
      currentTask.clientTick();
    }
    return;
  }
  if (!frameBox.isInitialized() || !miningBox.isInitialized()) {
    return;
  }
  if (!toCheck.isEmpty()) {
    for (int i=0; i < (firstChecked ? 10 : 50); i++) {
      BlockPos blockPos=toCheck.pollFirst();
      check(blockPos);
      toCheck.addLast(blockPos);
    }
  }
  if (currentTask != null) {
    long max=MAX_MJ_PER_TICK;
    max*=battery.getStored() + max;
    max/=battery.getCapacity() / 2;
    max=Math.min(max,MAX_MJ_PER_TICK);
    debugPowerRate=max;
    long power=battery.extractPower(0,max);
    if (currentTask.addPower(power)) {
      currentTask=null;
    }
    sendNetworkUpdate(NET_RENDER_DATA);
    return;
  }
  if (!firstChecked) {
    return;
  }
  if (!frameBreakBlockPoses.isEmpty()) {
    BlockPos blockPos=frameBreakBlockPoses.iterator().next();
    if (!canNotMine(blockPos)) {
      drillPos=null;
      currentTask=new TaskBreakBlock(blockPos);
      sendNetworkUpdate(NET_RENDER_DATA);
    }
    check(blockPos);
    return;
  }
  if (!framePlaceFramePoses.isEmpty()) {
    for (    BlockPos blockPos : getFramePositions()) {
      if (!framePlaceFramePoses.contains(blockPos)) {
        continue;
      }
      check(blockPos);
      if (!framePlaceFramePoses.contains(blockPos)) {
        continue;
      }
      drillPos=null;
      currentTask=new TaskAddFrame(blockPos);
      sendNetworkUpdate(NET_RENDER_DATA);
      return;
    }
  }
  if (boxIterator == null || drillPos == null) {
    boxIterator=createBoxIterator();
    while (world.isAirBlock(boxIterator.getCurrent()) || canSkip(boxIterator.getCurrent())) {
      if (boxIterator.advance() == null) {
        break;
      }
    }
    drillPos=new Vec3d(miningBox.closestInsideTo(pos));
  }
  if (boxIterator != null && boxIterator.hasNext()) {
    boolean found=false;
    if (drillPos.squareDistanceTo(new Vec3d(boxIterator.getCurrent())) >= 1) {
      currentTask=new TaskMoveDrill(drillPos,new Vec3d(boxIterator.getCurrent()));
      found=true;
    }
 else     if (!world.isAirBlock(boxIterator.getCurrent()) && !canSkip(boxIterator.getCurrent())) {
      if (!canNotMine(boxIterator.getCurrent())) {
        currentTask=new TaskBreakBlock(boxIterator.getCurrent());
        found=true;
      }
    }
 else {
      found=true;
      BlockPos next=boxIterator.advance();
      if (next == null) {
        currentTask=null;
      }
 else {
        currentTask=new TaskMoveDrill(drillPos,new Vec3d(next));
      }
    }
    if (found) {
      sendNetworkUpdate(NET_RENDER_DATA);
    }
  }
}",0.995539033457249
156314,"@Override public void getDebugInfo(List<String> left,List<String> right,EnumFacing side){
  left.add(""String_Node_Str"");
  left.add(""String_Node_Str"" + battery.getDebugString());
  left.add(""String_Node_Str"");
  left.add(""String_Node_Str"" + frameBox.min());
  left.add(""String_Node_Str"" + frameBox.max());
  left.add(""String_Node_Str"");
  left.add(""String_Node_Str"" + miningBox.min());
  left.add(""String_Node_Str"" + miningBox.max());
  left.add(""String_Node_Str"" + (boxIterator == null ? ""String_Node_Str"" : boxIterator.getCurrent()));
  if (currentTask != null) {
    left.add(""String_Node_Str"");
    left.add(""String_Node_Str"" + currentTask.getClass().getName());
    left.add(""String_Node_Str"" + LocaleUtil.localizeMj(currentTask.getPower()));
    left.add(""String_Node_Str"" + LocaleUtil.localizeMj(currentTask.getTarget()));
  }
 else {
    left.add(""String_Node_Str"");
  }
  left.add(""String_Node_Str"" + drillPos);
}","@Override public void getDebugInfo(List<String> left,List<String> right,EnumFacing side){
  left.add(""String_Node_Str"");
  left.add(""String_Node_Str"" + battery.getDebugString());
  left.add(""String_Node_Str"" + LocaleUtil.localizeMjFlow(debugPowerRate));
  left.add(""String_Node_Str"");
  left.add(""String_Node_Str"" + frameBox.min());
  left.add(""String_Node_Str"" + frameBox.max());
  left.add(""String_Node_Str"");
  left.add(""String_Node_Str"" + miningBox.min());
  left.add(""String_Node_Str"" + miningBox.max());
  BoxIterator iter=boxIterator;
  left.add(""String_Node_Str"" + (iter == null ? ""String_Node_Str"" : iter.getCurrent()));
  Task task=currentTask;
  if (task != null) {
    left.add(""String_Node_Str"");
    left.add(""String_Node_Str"" + task.getClass().getName());
    left.add(""String_Node_Str"" + LocaleUtil.localizeMj(task.getPower()));
    left.add(""String_Node_Str"" + LocaleUtil.localizeMj(task.getTarget()));
  }
 else {
    left.add(""String_Node_Str"");
  }
  left.add(""String_Node_Str"" + drillPos);
}",0.843846949327818
156315,"@Override @SideOnly(Side.CLIENT) public void addInformation(ItemStack stack,EntityPlayer player,List<String> tooltip,boolean advanced){
  String tipName=""String_Node_Str"" + unlocalizedName.replace(""String_Node_Str"",""String_Node_Str"").replace(""String_Node_Str"",""String_Node_Str"");
  String localised=I18n.format(tipName);
  if (!localised.equals(tipName)) {
    tooltip.add(TextFormatting.GRAY + localised);
  }
  if (definition.flowType == PipeApi.flowFluids) {
    PipeApi.FluidTransferInfo fti=PipeApi.getFluidTransferInfo(definition);
    tooltip.add(LocaleUtil.localizeFluidFlow(fti.transferPerTick));
  }
 else   if (definition.flowType == PipeApi.flowPower) {
    PipeApi.PowerTransferInfo pti=PipeApi.getPowerTransferInfo(definition);
    tooltip.add(LocaleUtil.localizeMjFlow(pti.transferPerTick));
  }
}","@Override @SideOnly(Side.CLIENT) public void addInformation(ItemStack stack,EntityPlayer player,List<String> tooltip,boolean advanced){
  String tipName=""String_Node_Str"" + unlocalizedName.replace(""String_Node_Str"",""String_Node_Str"").replace(""String_Node_Str"",""String_Node_Str"");
  String localised=I18n.format(tipName);
  if (!localised.equals(tipName)) {
    tooltip.add(TextFormatting.GRAY + localised);
  }
  if (definition.flowType == PipeApi.flowFluids) {
    PipeApi.FluidTransferInfo fti=PipeApi.getFluidTransferInfo(definition);
    tooltip.add(LocaleUtil.localizeFluidFlow(fti.transferPerTick));
  }
 else   if (definition.flowType == PipeApi.flowPower) {
    PipeApi.PowerTransferInfo pti=PipeApi.getPowerTransferInfo(definition);
    tooltip.add(LocaleUtil.localizeMjFlow(pti.transferPerTick));
    tooltip.add(""String_Node_Str"");
  }
}",0.9783132530120482
156316,"@Override public void update(){
  if (!queueBuilt && !world.isRemote) {
    buildQueue();
    queueBuilt=true;
  }
  super.update();
  tank.drain(tank.getCapacity(),true);
  FluidUtilBC.pushFluidAround(world,pos,tank);
}","@Override public void update(){
  if (!queueBuilt && !world.isRemote) {
    buildQueue();
    queueBuilt=true;
  }
  super.update();
  FluidUtilBC.pushFluidAround(world,pos,tank);
}",0.9027431421446384
156317,"@PipeEventHandler public static void addActions(PipeEventStatement.AddActionInternal event){
  Collections.addAll(event.actions,BCTransportStatements.ACTION_PIPE_COLOUR);
}","@Override public void addActions(PipeEventStatement.AddActionInternal event){
  super.addActions(event);
  Collections.addAll(event.actions,BCTransportStatements.ACTION_PIPE_COLOUR);
}",0.8595505617977528
156318,"private static List<Handler> getHandlers(Class<?> cls){
  if (!allHandlers.containsKey(cls)) {
    List<Handler> list=new ArrayList<>();
    for (    Method m : cls.getMethods()) {
      PipeEventHandler annot=m.getAnnotation(PipeEventHandler.class);
      if (annot == null) {
        continue;
      }
      Parameter[] params=m.getParameters();
      if (params.length != 1) {
        throw new IllegalStateException(""String_Node_Str"" + m + ""String_Node_Str""+ Arrays.toString(params)+ ""String_Node_Str"");
      }
      Parameter p=params[0];
      if (!PipeEvent.class.isAssignableFrom(p.getType())) {
        throw new IllegalStateException(""String_Node_Str"" + m + ""String_Node_Str""+ p.getType()+ ""String_Node_Str"");
      }
      MethodHandle mh;
      try {
        mh=MethodHandles.publicLookup().unreflect(m);
      }
 catch (      IllegalAccessException e) {
        throw new IllegalStateException(""String_Node_Str"" + m + ""String_Node_Str"",e);
      }
      boolean isStatic=Modifier.isStatic(m.getModifiers());
      String methodName=m.toString();
      list.add(new Handler(annot.priority(),annot.receiveCancelled(),isStatic,methodName,mh,p.getType()));
    }
    Class<?> superCls=cls.getSuperclass();
    if (superCls != null) {
      list.addAll(getHandlers(superCls));
    }
    allHandlers.put(cls,list);
    return list;
  }
  return allHandlers.get(cls);
}","private static List<Handler> getHandlers(Class<?> cls){
  if (!allHandlers.containsKey(cls)) {
    List<Handler> list=new ArrayList<>();
    Class<?> superCls=cls.getSuperclass();
    if (superCls != null) {
      list.addAll(getHandlers(superCls));
    }
    for (    Method m : cls.getMethods()) {
      PipeEventHandler annot=m.getAnnotation(PipeEventHandler.class);
      if (annot == null) {
        continue;
      }
      Parameter[] params=m.getParameters();
      if (params.length != 1) {
        throw new IllegalStateException(""String_Node_Str"" + m + ""String_Node_Str""+ Arrays.toString(params)+ ""String_Node_Str"");
      }
      Parameter p=params[0];
      if (!PipeEvent.class.isAssignableFrom(p.getType())) {
        throw new IllegalStateException(""String_Node_Str"" + m + ""String_Node_Str""+ p.getType()+ ""String_Node_Str"");
      }
      MethodHandle mh;
      try {
        mh=MethodHandles.publicLookup().unreflect(m);
      }
 catch (      IllegalAccessException e) {
        throw new IllegalStateException(""String_Node_Str"" + m + ""String_Node_Str"",e);
      }
      boolean isStatic=Modifier.isStatic(m.getModifiers());
      String methodName=m.toString();
      list.add(new Handler(annot.priority(),annot.receiveCancelled(),isStatic,methodName,mh,p.getType()));
    }
    allHandlers.put(cls,list);
    return list;
  }
  return allHandlers.get(cls);
}",0.8640988372093024
156319,"@PipeEventHandler public static void addActions(PipeEventStatement.AddActionInternal event){
  Collections.addAll(event.actions,BCTransportStatements.ACTION_EXTRACTION_PRESET);
}","@Override public void addActions(PipeEventStatement.AddActionInternal event){
  super.addActions(event);
  Collections.addAll(event.actions,BCTransportStatements.ACTION_EXTRACTION_PRESET);
}",0.8641304347826086
156320,"@PipeEventHandler public void onActionActivate(PipeEventActionActivate event){
  if (event.action instanceof ActionExtractionPreset) {
    ActionExtractionPreset preset=(ActionExtractionPreset)event.action;
    activeSlots.add(preset.index);
    activatedTtl[preset.index.ordinal()]=2;
  }
}","@Override public void onActionActivate(PipeEventActionActivate event){
  super.onActionActivate(event);
  if (event.action instanceof ActionExtractionPreset) {
    ActionExtractionPreset preset=(ActionExtractionPreset)event.action;
    activeSlots.add(preset.index);
    activatedTtl[preset.index.ordinal()]=2;
  }
}",0.9060955518945636
156321,"@Override public boolean onBlockActivated(World world,BlockPos pos,IBlockState state,EntityPlayer player,EnumHand hand,EnumFacing side,float hitX,float hitY,float hitZ){
  if (world.isRemote) {
    return true;
  }
  if (player.getHeldItem(hand).isEmpty()) {
    return super.onBlockActivated(world,pos,state,player,hand,side,hitX,hitY,hitZ);
  }
  TileEntity tile=world.getTileEntity(pos);
  if (tile instanceof TileTank) {
    TileTank tank=(TileTank)tile;
    if (FluidUtil.interactWithFluidHandler(player,hand,world,pos,side)) {
      tank.sendNetworkUpdate(TileBC_Neptune.NET_RENDER_DATA);
      player.inventoryContainer.detectAndSendChanges();
      return true;
    }
  }
  return false;
}","@Override public boolean onBlockActivated(World world,BlockPos pos,IBlockState state,EntityPlayer player,EnumHand hand,EnumFacing side,float hitX,float hitY,float hitZ){
  TileEntity tile=world.getTileEntity(pos);
  if (tile instanceof TileTank) {
    TileTank tank=(TileTank)tile;
    return tank.onActivate(player,hand);
  }
  return false;
}",0.388088376560999
156322,"@Override public void renderTileEntityAt(TileTank tile,double x,double y,double z,float partialTicks,int destroyStage){
  FluidStack forRender=tile.tank.getFluidForRender();
  if (forRender == null) {
    return;
  }
  Minecraft.getMinecraft().mcProfiler.startSection(""String_Node_Str"");
  Minecraft.getMinecraft().mcProfiler.startSection(""String_Node_Str"");
  RenderHelper.disableStandardItemLighting();
  Minecraft.getMinecraft().getTextureManager().bindTexture(TextureMap.LOCATION_BLOCKS_TEXTURE);
  GlStateManager.enableBlend();
  GlStateManager.blendFunc(SourceFactor.SRC_ALPHA,DestFactor.ONE_MINUS_SRC_ALPHA);
  VertexBuffer vb=Tessellator.getInstance().getBuffer();
  vb.begin(GL11.GL_QUADS,DefaultVertexFormats.BLOCK);
  vb.setTranslation(x,y,z);
  boolean[] sideRender={true,true,true,true,true,true};
  boolean connectedUp=isFullyConnected(tile,EnumFacing.UP);
  boolean connectedDown=isFullyConnected(tile,EnumFacing.DOWN);
  sideRender[EnumFacing.DOWN.ordinal()]=!connectedDown;
  sideRender[EnumFacing.UP.ordinal()]=!connectedUp;
  Vec3d min=connectedDown ? MIN_CONNECTED : MIN;
  Vec3d max=connectedUp ? MAX_CONNECTED : MAX;
  int blocklight=forRender.getFluid().getLuminosity(forRender);
  int combinedLight=tile.getWorld().getCombinedLight(tile.getPos(),blocklight);
  FluidRenderer.vertex.lighti(combinedLight);
  FluidRenderer.renderFluid(FluidSpriteType.STILL,forRender,tile.getFluidAmountForRender(partialTicks),tile.tank.getCapacity(),min,max,vb,sideRender);
  vb.setTranslation(0,0,0);
  Tessellator.getInstance().draw();
  RenderHelper.enableStandardItemLighting();
  Minecraft.getMinecraft().mcProfiler.endSection();
  Minecraft.getMinecraft().mcProfiler.endSection();
}","@Override public void renderTileEntityAt(TileTank tile,double x,double y,double z,float partialTicks,int destroyStage){
  SmoothedFluid forRender=tile.getFluidForRender(partialTicks);
  if (forRender == null) {
    return;
  }
  Minecraft.getMinecraft().mcProfiler.startSection(""String_Node_Str"");
  Minecraft.getMinecraft().mcProfiler.startSection(""String_Node_Str"");
  RenderHelper.disableStandardItemLighting();
  Minecraft.getMinecraft().getTextureManager().bindTexture(TextureMap.LOCATION_BLOCKS_TEXTURE);
  GlStateManager.enableBlend();
  GlStateManager.blendFunc(SourceFactor.SRC_ALPHA,DestFactor.ONE_MINUS_SRC_ALPHA);
  VertexBuffer vb=Tessellator.getInstance().getBuffer();
  vb.begin(GL11.GL_QUADS,DefaultVertexFormats.BLOCK);
  vb.setTranslation(x,y,z);
  boolean[] sideRender={true,true,true,true,true,true};
  boolean connectedUp=isFullyConnected(tile,EnumFacing.UP);
  boolean connectedDown=isFullyConnected(tile,EnumFacing.DOWN);
  sideRender[EnumFacing.DOWN.ordinal()]=!connectedDown;
  sideRender[EnumFacing.UP.ordinal()]=!connectedUp;
  Vec3d min=connectedDown ? MIN_CONNECTED : MIN;
  Vec3d max=connectedUp ? MAX_CONNECTED : MAX;
  FluidStack fluid=forRender.fluid;
  int blocklight=fluid.getFluid().getLuminosity(fluid);
  int combinedLight=tile.getWorld().getCombinedLight(tile.getPos(),blocklight);
  FluidRenderer.vertex.lighti(combinedLight);
  FluidRenderer.renderFluid(FluidSpriteType.STILL,fluid,forRender.amount,tile.tank.getCapacity(),min,max,vb,sideRender);
  vb.setTranslation(0,0,0);
  Tessellator.getInstance().draw();
  RenderHelper.enableStandardItemLighting();
  Minecraft.getMinecraft().mcProfiler.endSection();
  Minecraft.getMinecraft().mcProfiler.endSection();
}",0.8515901060070671
156323,"private void findEnd(){
  tileEnd=null;
  IBlockState state=getCurrentStateForBlock(BCFactoryBlocks.heatExchangeStart);
  if (state == null) {
    return;
  }
  BlockHeatExchange block=(BlockHeatExchange)state.getBlock();
  EnumFacing facing=state.getValue(BlockBCBase_Neptune.PROP_FACING);
  int middles=0;
  BlockPos search=getPos();
  for (int i=0; i < 3; i++) {
    search=search.offset(facing);
    state=getLocalState(search);
    if (state.getBlock() != BCFactoryBlocks.heatExchangeMiddle) {
      break;
    }
    block=BCFactoryBlocks.heatExchangeMiddle;
    if (block.part.getAxis(state) != facing.getAxis()) {
      return;
    }
    middles++;
  }
  if (middles == 0) {
    return;
  }
  if (state.getBlock() != BCFactoryBlocks.heatExchangeEnd) {
    return;
  }
  if (state.getValue(BlockBCBase_Neptune.PROP_FACING) != facing.getOpposite()) {
    return;
  }
  TileEntity tile=getLocalTile(search);
  if (tile instanceof TileHeatExchangeEnd) {
    tileEnd=(TileHeatExchangeEnd)tile;
  }
 else {
  }
}","private void findEnd(){
  tileEnd=null;
  IBlockState state=getCurrentStateForBlock(BCFactoryBlocks.heatExchangeStart);
  if (state == null) {
    return;
  }
  BlockHeatExchange block=(BlockHeatExchange)state.getBlock();
  EnumFacing facing=state.getValue(BlockBCBase_Neptune.PROP_FACING);
  int middles=0;
  BlockPos search=getPos();
  for (int i=0; i <= 3; i++) {
    search=search.offset(facing);
    state=getLocalState(search);
    if (state.getBlock() != BCFactoryBlocks.heatExchangeMiddle) {
      break;
    }
    block=BCFactoryBlocks.heatExchangeMiddle;
    if (block.part.getAxis(state) != facing.getAxis()) {
      return;
    }
    middles++;
  }
  if (middles == 0) {
    return;
  }
  if (state.getBlock() != BCFactoryBlocks.heatExchangeEnd) {
    return;
  }
  if (state.getValue(BlockBCBase_Neptune.PROP_FACING) != facing.getOpposite()) {
    return;
  }
  TileEntity tile=getLocalTile(search);
  if (tile instanceof TileHeatExchangeEnd) {
    tileEnd=(TileHeatExchangeEnd)tile;
  }
 else {
  }
}",0.9995066600888012
156324,"private Tank getTank(BlockPos at){
  TileEntity tile=world.getTileEntity(at);
  if (tile instanceof TileTank) {
    TileTank tileTank=(TileTank)tile;
    return tileTank.tank;
  }
  return null;
}","private TileTank getTank(BlockPos at){
  TileEntity tile=world.getTileEntity(at);
  if (tile instanceof TileTank) {
    return (TileTank)tile;
  }
  return null;
}",0.8635097493036211
156325,"@Override public void update(){
  if (world.isRemote) {
    amountLast=amount;
    if (amount != target) {
      int delta=target - amount;
      long msgDelta=lastMessage - lastMessageMinus1;
      msgDelta=MathUtil.clamp((int)msgDelta,1,60);
      if (Math.abs(delta) < msgDelta) {
        amount+=delta;
      }
 else {
        amount+=delta / (int)msgDelta;
      }
    }
    return;
  }
  if (lastSentFluid != (tank.getFluid() != null)) {
    if (tracker.markTimeIfDelay(world)) {
      lastSentFluid=tank.getFluid() != null;
      lastSentAmount=tank.getFluidAmount();
      sendNetworkUpdate(NET_RENDER_DATA);
    }
  }
 else   if (lastSentAmount != tank.getFluidAmount()) {
    if (tracker.markTimeIfDelay(world)) {
      lastSentAmount=tank.getFluidAmount();
      world.notifyNeighborsOfStateChange(pos,world.getBlockState(pos).getBlock(),false);
      sendNetworkUpdate(NET_FLUID_DELTA);
    }
  }
}","@Override public void update(){
  smoothedTank.tick(getWorld());
}",0.0922131147540983
156326,"@Override public int fill(FluidStack resource,boolean doFill){
  if (resource == null || resource.amount <= 0) {
    return 0;
  }
  int filled=0;
  List<Tank> tanks=getTanks();
  for (  Tank t : tanks) {
    FluidStack current=t.getFluid();
    if (current != null && !current.isFluidEqual(resource)) {
      return 0;
    }
  }
  for (  Tank t : tanks) {
    int tankFilled=t.fill(resource,doFill);
    if (tankFilled > 0) {
      resource.amount-=tankFilled;
      filled+=tankFilled;
      if (resource.amount == 0) {
        break;
      }
    }
  }
  return filled;
}","@Override public int fill(FluidStack resource,boolean doFill){
  if (resource == null || resource.amount <= 0) {
    return 0;
  }
  int filled=0;
  List<TileTank> tanks=getTanks();
  for (  TileTank t : tanks) {
    FluidStack current=t.tank.getFluid();
    if (current != null && !current.isFluidEqual(resource)) {
      return 0;
    }
  }
  for (  TileTank t : tanks) {
    int tankFilled=t.tank.fill(resource,doFill);
    if (tankFilled > 0) {
      if (isPlayerInteracting) {
        t.sendNetworkUpdate(NET_RENDER_DATA);
      }
      resource.amount-=tankFilled;
      filled+=tankFilled;
      if (resource.amount == 0) {
        break;
      }
    }
  }
  return filled;
}",0.9131474103585656
156327,"@Override public FluidStack drain(IFluidFilter filter,int maxDrain,boolean doDrain){
  if (maxDrain <= 0) {
    return null;
  }
  List<Tank> tanks=getTanks();
  Collections.reverse(tanks);
  FluidStack total=null;
  for (  Tank t : tanks) {
    int realMax=maxDrain - (total == null ? 0 : total.amount);
    if (realMax <= 0) {
      break;
    }
    FluidStack drained=t.drain(filter,realMax,doDrain);
    if (drained == null)     continue;
    if (total == null) {
      total=drained.copy();
      total.amount=0;
    }
    total.amount+=drained.amount;
  }
  return total;
}","@Override public FluidStack drain(IFluidFilter filter,int maxDrain,boolean doDrain){
  if (maxDrain <= 0) {
    return null;
  }
  List<TileTank> tanks=getTanks();
  Collections.reverse(tanks);
  FluidStack total=null;
  for (  TileTank t : tanks) {
    int realMax=maxDrain - (total == null ? 0 : total.amount);
    if (realMax <= 0) {
      break;
    }
    FluidStack drained=t.tank.drain(filter,realMax,doDrain);
    if (drained == null)     continue;
    if (isPlayerInteracting) {
      t.sendNetworkUpdate(NET_RENDER_DATA);
    }
    if (total == null) {
      total=drained.copy();
      total.amount=0;
    }
    total.amount+=drained.amount;
  }
  return total;
}",0.9249201277955272
156328,"@Override public void readPayload(int id,PacketBufferBC buffer,Side side,MessageContext ctx) throws IOException {
  super.readPayload(id,buffer,side,ctx);
  if (side == Side.CLIENT) {
    if (id == NET_RENDER_DATA) {
      tank.readFromBuffer(buffer);
      target=tank.getClientAmount();
      lastMessageMinus1=lastMessage=world.getTotalWorldTime();
    }
 else     if (id == NET_FLUID_DELTA) {
      target=buffer.readInt();
      lastMessageMinus1=lastMessage;
      lastMessage=world.getTotalWorldTime();
    }
  }
}","@Override public void readPayload(int id,PacketBufferBC buffer,Side side,MessageContext ctx) throws IOException {
  super.readPayload(id,buffer,side,ctx);
  if (side == Side.CLIENT) {
    if (id == NET_RENDER_DATA) {
      readPayload(NET_FLUID_DELTA,buffer,side,ctx);
      smoothedTank.resetSmoothing(getWorld());
    }
 else     if (id == NET_FLUID_DELTA) {
      smoothedTank.handleMessage(getWorld(),buffer);
    }
  }
}",0.5708245243128964
156329,"@Override public IFluidTankProperties[] getTankProperties(){
  List<Tank> tanks=getTanks();
  Tank bottom=tanks.get(0);
  FluidStack total=bottom.getFluid();
  int capacity=0;
  if (total == null) {
    for (    Tank t : tanks) {
      capacity+=t.getCapacity();
    }
  }
 else {
    total=total.copy();
    total.amount=0;
    for (    Tank t : tanks) {
      FluidStack other=t.getFluid();
      if (other != null) {
        total.amount+=other.amount;
      }
      capacity+=t.getCapacity();
    }
  }
  return new IFluidTankProperties[]{new FluidTankProperties(total,capacity)};
}","@Override public IFluidTankProperties[] getTankProperties(){
  List<TileTank> tanks=getTanks();
  TileTank bottom=tanks.get(0);
  FluidStack total=bottom.tank.getFluid();
  int capacity=0;
  if (total == null) {
    for (    TileTank t : tanks) {
      capacity+=t.tank.getCapacity();
    }
  }
 else {
    total=total.copy();
    total.amount=0;
    for (    TileTank t : tanks) {
      FluidStack other=t.tank.getFluid();
      if (other != null) {
        total.amount+=other.amount;
      }
      capacity+=t.tank.getCapacity();
    }
  }
  return new IFluidTankProperties[]{new FluidTankProperties(total,capacity)};
}",0.9701986754966888
156330,"@Override public void writePayload(int id,PacketBufferBC buffer,Side side){
  super.writePayload(id,buffer,side);
  if (side == Side.SERVER) {
    if (id == NET_RENDER_DATA) {
      tank.writeToBuffer(buffer);
    }
 else     if (id == NET_FLUID_DELTA) {
      buffer.writeInt(tank.getFluidAmount());
    }
  }
}","@Override public void writePayload(int id,PacketBufferBC buffer,Side side){
  super.writePayload(id,buffer,side);
  if (side == Side.SERVER) {
    if (id == NET_RENDER_DATA) {
      writePayload(NET_FLUID_DELTA,buffer,side);
    }
 else     if (id == NET_FLUID_DELTA) {
      smoothedTank.writeInit(buffer);
    }
  }
}",0.6561014263074485
156331,"@Override @SideOnly(Side.CLIENT) public void getDebugInfo(List<String> left,List<String> right,EnumFacing side){
  left.add(""String_Node_Str"" + tank.getDebugString());
  if (world.isRemote) {
    left.add(""String_Node_Str"" + amount + ""String_Node_Str""+ target);
    left.add(""String_Node_Str"" + lastMessage + ""String_Node_Str""+ lastMessageMinus1+ ""String_Node_Str""+ (lastMessage - lastMessageMinus1));
  }
 else {
    left.add(""String_Node_Str"" + tank.getFluidAmount() + ""String_Node_Str""+ ((tank.getFluid() != null) ? ""String_Node_Str"" : ""String_Node_Str""));
    left.add(""String_Node_Str"" + lastSentAmount + ""String_Node_Str""+ (lastSentFluid ? ""String_Node_Str"" : ""String_Node_Str""));
  }
}","@Override @SideOnly(Side.CLIENT) public void getDebugInfo(List<String> left,List<String> right,EnumFacing side){
  left.add(""String_Node_Str"" + tank.getDebugString());
  smoothedTank.getDebugInfo(left,right,side);
}",0.3880926130099228
156332,"private List<Tank> getTanks(){
  List<Tank> tanks=new ArrayList<>();
  BlockPos currentPos=pos;
  while (true) {
    Tank tankUp=getTank(currentPos);
    if (tankUp != null) {
      tanks.add(tankUp);
    }
 else {
      break;
    }
    currentPos=currentPos.up();
  }
  currentPos=pos.down();
  while (true) {
    Tank tankBelow=getTank(currentPos);
    if (tankBelow != null) {
      tanks.add(0,tankBelow);
    }
 else {
      break;
    }
    currentPos=currentPos.down();
  }
  return tanks;
}","private List<TileTank> getTanks(){
  List<TileTank> tanks=new ArrayList<>();
  BlockPos currentPos=pos;
  while (true) {
    TileTank tankUp=getTank(currentPos);
    if (tankUp != null) {
      tanks.add(tankUp);
    }
 else {
      break;
    }
    currentPos=currentPos.up();
  }
  currentPos=pos.down();
  while (true) {
    TileTank tankBelow=getTank(currentPos);
    if (tankBelow != null) {
      tanks.add(0,tankBelow);
    }
 else {
      break;
    }
    currentPos=currentPos.down();
  }
  return tanks;
}",0.9842209072978304
156333,"public static Fluid getFluid(Block block){
  return FluidRegistry.lookupFluidForBlock(block);
}","public static Fluid getFluid(Block block){
  if (block instanceof IFluidBlock) {
    return FluidRegistry.getFluid(((IFluidBlock)block).getFluid().getName());
  }
  return FluidRegistry.lookupFluidForBlock(block);
}",0.6129032258064516
156334,"public TileFiller(){
  caps.addProvider(new MjCapabilityHelper(new MjBatteryReciver(battery)));
  pattern=BCCoreStatements.PATTERN_NONE;
  params=new IStatementParameter[0];
}","public TileFiller(){
  caps.addProvider(new MjCapabilityHelper(new MjBatteryReciver(battery)));
  pattern=BCCoreStatements.PATTERN_NONE;
  params=new IStatementParameter[0];
  StackInsertionChecker checker=(slot,stack) -> Filling.INSTANCE.getItemBlocks().contains(stack.getItem());
  StackInsertionFunction insertor=StackInsertionFunction.getDefaultInserter();
  ItemHandlerSimple handler=new ItemHandlerSimple(27,checker,insertor,this::onSlotChange);
  invResources=itemManager.addInvHandler(""String_Node_Str"",handler,EnumAccess.BOTH,EnumPipePart.VALUES);
}",0.4774897680763983
156335,"@Override public void setPattern(IFillerPattern pattern,IStatementParameter[] params){
  this.pattern=pattern;
  this.params=params;
  template=pattern.createTemplate(box,params);
}","@Override public void setPattern(IFillerPattern pattern,IStatementParameter[] params){
  this.pattern=pattern;
  this.params=params;
  template=pattern.createTemplate(this,params);
}",0.9807162534435262
156336,"@Override @SideOnly(Side.CLIENT) public TextureAtlasSprite getGuiSprite(){
  EnumFacing dir=getDirection();
  if (dir == null) {
    return null;
  }
 else {
    return null;
  }
}","@Override @SideOnly(Side.CLIENT) public ISprite getGuiSprite(){
  EnumFacing dir=getDirection();
  if (dir == null) {
    return null;
  }
 else {
    return null;
  }
}",0.9627507163323782
156337,"@Override public TextureAtlasSprite getGuiSprite(){
  return null;
}","@Override public ISprite getGuiSprite(){
  return null;
}",0.896
156338,"/** 
 * Gets a stack insertion function that will insert up to full stacks into a given slot. This is just  {@link #getInsertionFunction(int)} with an argument of 64. 
 */
public static StackInsertionFunction getDefaultInserter(){
  return getInsertionFunction(64);
}","/** 
 * Gets a stack insertion function that will insert up to full stacks into a given slot. This is just  {@link #getInsertionFunction(int)} with an argument of 64. 
 */
public static StackInsertionFunction getDefaultInserter(){
  return getInsertionFunction(Integer.MAX_VALUE);
}",0.965391621129326
156339,"@Override @SideOnly(Side.CLIENT) public TextureAtlasSprite getGuiSprite(){
  if (colour == null) {
    return null;
  }
  return BCTransportSprites.getPipeSignal(active,colour).getSprite();
}","@Override @SideOnly(Side.CLIENT) public ISprite getGuiSprite(){
  if (colour == null) {
    return null;
  }
  return BCTransportSprites.getPipeSignal(active,colour);
}",0.9303621169916436
156340,"@Mod.EventHandler public static void preInit(FMLPreInitializationEvent event){
  File cfgFolder=event.getModConfigurationDirectory();
  cfgFolder=new File(cfgFolder,""String_Node_Str"");
  BCCoreConfig.preInit(cfgFolder);
  BCCoreProxy.getProxy().fmlPreInit();
  CreativeTabBC tab=CreativeTabManager.createTab(""String_Node_Str"");
  BCCoreItems.preInit();
  BCCoreBlocks.preInit();
  BCCoreStatements.preInit();
  tab.setItem(BCCoreItems.wrench);
  NetworkRegistry.INSTANCE.registerGuiHandler(INSTANCE,BCCoreProxy.getProxy());
  MinecraftForge.EVENT_BUS.register(ListTooltipHandler.INSTANCE);
  OreDictionary.registerOre(""String_Node_Str"",Blocks.CRAFTING_TABLE);
  MinecraftForge.EVENT_BUS.register(BCCoreEventDist.INSTANCE);
  BCMessageHandler.addMessageType(MessageVolumeBoxes.class,MessageVolumeBoxes.HANDLER,Side.CLIENT);
}","@Mod.EventHandler public static void preInit(FMLPreInitializationEvent event){
  File cfgFolder=event.getModConfigurationDirectory();
  cfgFolder=new File(cfgFolder,""String_Node_Str"");
  BCCoreConfig.preInit(cfgFolder);
  CreativeTabBC tab=CreativeTabManager.createTab(""String_Node_Str"");
  BCCoreItems.preInit();
  BCCoreBlocks.preInit();
  BCCoreStatements.preInit();
  BCCoreProxy.getProxy().fmlPreInit();
  tab.setItem(BCCoreItems.wrench);
  NetworkRegistry.INSTANCE.registerGuiHandler(INSTANCE,BCCoreProxy.getProxy());
  MinecraftForge.EVENT_BUS.register(ListTooltipHandler.INSTANCE);
  OreDictionary.registerOre(""String_Node_Str"",Blocks.CRAFTING_TABLE);
  MinecraftForge.EVENT_BUS.register(BCCoreEventDist.INSTANCE);
  BCMessageHandler.addMessageType(MessageVolumeBoxes.class,MessageVolumeBoxes.HANDLER,Side.CLIENT);
}",0.8179611650485437
156341,"public static void fmlPreInit(){
  MinecraftForge.EVENT_BUS.register(BCCoreModels.class);
}","public static void fmlPreInit(){
  MinecraftForge.EVENT_BUS.register(BCCoreModels.class);
  ModelLoader.setCustomStateMapper(BCCoreBlocks.engine,b -> ImmutableMap.of());
}",0.6946564885496184
156342,"@Override public void fmlInit(){
  ClientRegistry.bindTileEntitySpecialRenderer(TileMarkerVolume.class,RenderMarkerVolume.INSTANCE);
  ClientRegistry.bindTileEntitySpecialRenderer(TileEngineRedstone_BC8.class,RenderEngineWood.INSTANCE);
  ClientRegistry.bindTileEntitySpecialRenderer(TileEngineCreative.class,RenderEngineCreative.INSTANCE);
  MinecraftForge.EVENT_BUS.register(RenderTickListener.class);
}","@Override public void fmlInit(){
  BCCoreModels.fmlInit();
  MinecraftForge.EVENT_BUS.register(RenderTickListener.class);
}",0.4090909090909091
156343,"@Override protected BlockStateContainer createBlockState(){
  return new BlockStateContainer(this,getEngineProperty(),BuildCraftProperties.ENERGY_STAGE,BuildCraftProperties.BLOCK_FACING_6);
}","@Override protected BlockStateContainer createBlockState(){
  return new BlockStateContainer(this,getEngineProperty());
}",0.7756410256410257
156344,"public TileBuilder(){
  for (int i=1; i <= 4; i++) {
    tankManager.add(new Tank(""String_Node_Str"" + i,Fluid.BUCKET_VOLUME * 8,this));
  }
  caps.addProvider(mjCapHelper);
  caps.addCapability(CapUtil.CAP_FLUIDS,tankManager,EnumPipePart.VALUES);
}","public TileBuilder(){
  for (int i=1; i <= 4; i++) {
    tankManager.add(new Tank(""String_Node_Str"" + i,Fluid.BUCKET_VOLUME * 8,this));
  }
  caps.addProvider(mjCapHelper);
  caps.addCapabilityInstance(CapUtil.CAP_FLUIDS,tankManager,EnumPipePart.VALUES);
}",0.984126984126984
156345,"public TileQuarry(){
  caps.addProvider(mjCapHelper);
  caps.addCapability(CapUtil.CAP_ITEM_TRANSACTOR,AutomaticProvidingTransactor.INSTANCE,EnumPipePart.VALUES);
}","public TileQuarry(){
  caps.addProvider(mjCapHelper);
  caps.addCapabilityInstance(CapUtil.CAP_ITEM_TRANSACTOR,AutomaticProvidingTransactor.INSTANCE,EnumPipePart.VALUES);
}",0.9761904761904762
156346,"public TileMarkerVolume(){
  caps.addCapability(TilesAPI.CAP_TILE_AREA_PROVIDER,this,EnumPipePart.VALUES);
}","public TileMarkerVolume(){
  caps.addCapabilityInstance(TilesAPI.CAP_TILE_AREA_PROVIDER,this,EnumPipePart.VALUES);
}",0.9642857142857144
156347,"public TileAutoWorkbenchBase(int slots){
  invBlueprint=itemManager.addInvHandler(""String_Node_Str"",slots,EnumAccess.NONE);
  invMaterials=itemManager.addInvHandler(""String_Node_Str"",slots,EnumAccess.INSERT,EnumPipePart.VALUES);
  invResult=itemManager.addInvHandler(""String_Node_Str"",1,EnumAccess.EXTRACT,EnumPipePart.VALUES);
  invOverflow=itemManager.addInvHandler(""String_Node_Str"",slots,EnumAccess.EXTRACT,EnumPipePart.VALUES);
  itemStackCache=new HashMap<>();
  caps.addCapability(TilesAPI.CAP_HAS_WORK,this::hasWork,EnumPipePart.VALUES);
}","public TileAutoWorkbenchBase(int slots){
  invBlueprint=itemManager.addInvHandler(""String_Node_Str"",slots,EnumAccess.NONE);
  invMaterials=itemManager.addInvHandler(""String_Node_Str"",slots,EnumAccess.INSERT,EnumPipePart.VALUES);
  invResult=itemManager.addInvHandler(""String_Node_Str"",1,EnumAccess.EXTRACT,EnumPipePart.VALUES);
  invOverflow=itemManager.addInvHandler(""String_Node_Str"",slots,EnumAccess.EXTRACT,EnumPipePart.VALUES);
  itemStackCache=new HashMap<>();
  caps.addCapabilityInstance(TilesAPI.CAP_HAS_WORK,this::hasWork,EnumPipePart.VALUES);
}",0.9927404718693283
156348,"public TileAutoWorkbenchFluids(){
  super(4);
  caps.addCapability(CapUtil.CAP_FLUIDS,tankManager,EnumPipePart.CENTER);
  caps.addCapability(CapUtil.CAP_FLUIDS,tank1,EnumPipePart.DOWN,EnumPipePart.NORTH,EnumPipePart.WEST);
  caps.addCapability(CapUtil.CAP_FLUIDS,tank2,EnumPipePart.UP,EnumPipePart.SOUTH,EnumPipePart.EAST);
}","public TileAutoWorkbenchFluids(){
  super(4);
  caps.addCapabilityInstance(CapUtil.CAP_FLUIDS,tankManager,EnumPipePart.CENTER);
  caps.addCapabilityInstance(CapUtil.CAP_FLUIDS,tank1,EnumPipePart.DOWN,EnumPipePart.NORTH,EnumPipePart.WEST);
  caps.addCapabilityInstance(CapUtil.CAP_FLUIDS,tank2,EnumPipePart.UP,EnumPipePart.SOUTH,EnumPipePart.EAST);
}",0.9643916913946587
156349,"public TileDistiller_BC8(){
  tankIn.setCanDrain(false);
  tankOutGas.setCanFill(false);
  tankOutLiquid.setCanFill(false);
  caps.addCapability(CapUtil.CAP_FLUIDS,tankIn,EnumPipePart.HORIZONTALS);
  caps.addCapability(CapUtil.CAP_FLUIDS,tankOutGas,EnumPipePart.UP);
  caps.addCapability(CapUtil.CAP_FLUIDS,tankOutLiquid,EnumPipePart.DOWN);
  caps.addProvider(mjCapHelper);
}","public TileDistiller_BC8(){
  tankIn.setCanDrain(false);
  tankOutGas.setCanFill(false);
  tankOutLiquid.setCanFill(false);
  caps.addCapabilityInstance(CapUtil.CAP_FLUIDS,tankIn,EnumPipePart.HORIZONTALS);
  caps.addCapabilityInstance(CapUtil.CAP_FLUIDS,tankOutGas,EnumPipePart.UP);
  caps.addCapabilityInstance(CapUtil.CAP_FLUIDS,tankOutLiquid,EnumPipePart.DOWN);
  caps.addProvider(mjCapHelper);
}",0.9689922480620154
156350,"public TileHeatExchangeEnd(){
  caps.addCapability(CapUtil.CAP_FLUIDS,tankHeatableOut,EnumPipePart.UP);
  caps.addCapability(CapUtil.CAP_FLUIDS,this::getTankForSide,EnumPipePart.HORIZONTALS);
}","public TileHeatExchangeEnd(){
  caps.addCapabilityInstance(CapUtil.CAP_FLUIDS,tankHeatableOut,EnumPipePart.UP);
  caps.addCapability(CapUtil.CAP_FLUIDS,this::getTankForSide,EnumPipePart.HORIZONTALS);
}",0.9796954314720812
156351,"public TileHeatExchangeStart(){
  caps.addCapability(CapUtil.CAP_FLUIDS,tankHeatableIn,EnumPipePart.DOWN);
  caps.addCapability(CapUtil.CAP_FLUIDS,this::getTankForSide,EnumPipePart.HORIZONTALS);
}","public TileHeatExchangeStart(){
  caps.addCapabilityInstance(CapUtil.CAP_FLUIDS,tankHeatableIn,EnumPipePart.DOWN);
  caps.addCapability(CapUtil.CAP_FLUIDS,this::getTankForSide,EnumPipePart.HORIZONTALS);
}",0.98
156352,"public TileMiner(){
  caps.addProvider(mjCapHelper);
  caps.addCapability(TilesAPI.CAP_HAS_WORK,() -> !isComplete,EnumPipePart.VALUES);
}","public TileMiner(){
  caps.addProvider(mjCapHelper);
  caps.addCapabilityInstance(TilesAPI.CAP_HAS_WORK,() -> !isComplete,EnumPipePart.VALUES);
}",0.9716312056737588
156353,"public TilePump(){
  tank.setCanFill(false);
  caps.addCapability(CapUtil.CAP_FLUIDS,tank,EnumPipePart.VALUES);
}","public TilePump(){
  tank.setCanFill(false);
  caps.addCapabilityInstance(CapUtil.CAP_FLUIDS,tank,EnumPipePart.VALUES);
}",0.9658119658119658
156354,"public TileTank(){
  caps.addCapability(CapUtil.CAP_FLUIDS,this,EnumPipePart.VALUES);
}","public TileTank(){
  caps.addCapabilityInstance(CapUtil.CAP_FLUIDS,this,EnumPipePart.VALUES);
}",0.956043956043956
156355,"public TileLaserTableBase(){
  caps.addCapability(TilesAPI.CAP_HAS_WORK,this,EnumPipePart.VALUES);
}","public TileLaserTableBase(){
  caps.addCapabilityInstance(TilesAPI.CAP_HAS_WORK,this,EnumPipePart.VALUES);
}",0.9615384615384616
156356,"public TilePipeHolder(){
  for (  EnumFacing side : EnumFacing.VALUES) {
    pluggables.put(side,new PluggableHolder(this,side));
  }
  caps.addCapability(PipeApi.CAP_PIPE_HOLDER,this,EnumPipePart.VALUES);
  caps.addCapability(PipeApi.CAP_PIPE,this::getPipe,EnumPipePart.VALUES);
  caps.addCapability(PipeApi.CAP_PLUG,this::getPluggable,EnumPipePart.FACES);
}","public TilePipeHolder(){
  for (  EnumFacing side : EnumFacing.VALUES) {
    pluggables.put(side,new PluggableHolder(this,side));
  }
  caps.addCapabilityInstance(PipeApi.CAP_PIPE_HOLDER,this,EnumPipePart.VALUES);
  caps.addCapability(PipeApi.CAP_PIPE,this::getPipe,EnumPipePart.VALUES);
  caps.addCapability(PipeApi.CAP_PLUG,this::getPluggable,EnumPipePart.FACES);
}",0.9889807162534436
156357,"public TileFloodGate(){
  caps.addCapability(CapUtil.CAP_FLUIDS,tank,EnumPipePart.VALUES);
}","public TileFloodGate(){
  caps.addCapabilityInstance(CapUtil.CAP_FLUIDS,tank,EnumPipePart.VALUES);
}",0.9583333333333334
156358,"@Override public void renderTileEntityFast(TileFiller tile,double x,double y,double z,float partialTicks,int destroyStage,VertexBuffer vb){
  Minecraft.getMinecraft().mcProfiler.startSection(""String_Node_Str"");
  Minecraft.getMinecraft().mcProfiler.startSection(""String_Node_Str"");
  for (  MutableTriple<BlockPos,ItemStack,Long> renderTask : tile.clientPlaceTasks) {
    ItemStack stack=renderTask.getMiddle();
    Vec3d prevPos=tile.prevClientPlaceTasks.stream().filter(renderTaskLocal -> renderTaskLocal.getLeft().equals(renderTask.getLeft())).map(tile::getTaskPos).findFirst().orElse(tile.getTaskPos(MutableTriple.of(tile.getPos(),ItemStack.EMPTY,0L)));
    Vec3d pos=prevPos.add(tile.getTaskPos(renderTask).subtract(prevPos).scale(partialTicks));
    ItemRenderUtil.renderItemStack(x - tile.getPos().getX() + pos.xCoord,y - tile.getPos().getY() + pos.yCoord,z - tile.getPos().getZ() + pos.zCoord,stack,EnumFacing.SOUTH,vb);
    ItemRenderUtil.endItemBatch();
  }
  Vec3d robotPos=tile.robotPos;
  if (robotPos != null) {
    if (tile.prevRobotPos != null) {
      robotPos=tile.prevRobotPos.add(robotPos.subtract(tile.prevRobotPos).scale(partialTicks));
    }
    RenderEntity.renderOffsetAABB(new AxisAlignedBB(robotPos.subtract(VecUtil.VEC_HALF),robotPos.add(VecUtil.VEC_HALF)),x - tile.getPos().getX(),y - tile.getPos().getY(),z - tile.getPos().getZ());
    vb.setTranslation(x - tile.getPos().getX(),y - tile.getPos().getY(),z - tile.getPos().getZ());
    for (    MutablePair<BlockPos,Long> breakTask : tile.clientBreakTasks) {
      LaserRenderer_BC8.renderLaserDynamic(new LaserData_BC8(BuildCraftLaserManager.POWERS[(int)Math.round(MathUtil.clamp(breakTask.getRight() * 1D / tile.getTarget(breakTask),0D,1D) * (BuildCraftLaserManager.POWERS.length - 1))],robotPos,new Vec3d(breakTask.getLeft()).add(VecUtil.VEC_HALF),1 / 16D),vb);
    }
  }
  vb.setTranslation(0,0,0);
  Minecraft.getMinecraft().mcProfiler.endSection();
  Minecraft.getMinecraft().mcProfiler.endSection();
}","@Override public void renderTileEntityFast(TileFiller tile,double x,double y,double z,float partialTicks,int destroyStage,VertexBuffer vb){
  Minecraft.getMinecraft().mcProfiler.startSection(""String_Node_Str"");
  Minecraft.getMinecraft().mcProfiler.startSection(""String_Node_Str"");
  for (  MutableTriple<BlockPos,ItemStack,Long> renderTask : tile.clientPlaceTasks) {
    ItemStack stack=renderTask.getMiddle();
    Vec3d prevPos=tile.prevClientPlaceTasks.stream().filter(renderTaskLocal -> renderTaskLocal.getLeft().equals(renderTask.getLeft())).map(tile::getTaskPos).findFirst().orElse(tile.getTaskPos(MutableTriple.of(tile.getPos(),ItemStack.EMPTY,0L)));
    Vec3d pos=prevPos.add(tile.getTaskPos(renderTask).subtract(prevPos).scale(partialTicks));
    ItemRenderUtil.renderItemStack(x - tile.getPos().getX() + pos.xCoord,y - tile.getPos().getY() + pos.yCoord,z - tile.getPos().getZ() + pos.zCoord,stack,tile.getWorld().getCombinedLight(tile.getPos(),0),EnumFacing.SOUTH,vb);
    ItemRenderUtil.endItemBatch();
  }
  Vec3d robotPos=tile.robotPos;
  if (robotPos != null) {
    if (tile.prevRobotPos != null) {
      robotPos=tile.prevRobotPos.add(robotPos.subtract(tile.prevRobotPos).scale(partialTicks));
    }
    RenderEntity.renderOffsetAABB(new AxisAlignedBB(robotPos.subtract(VecUtil.VEC_HALF),robotPos.add(VecUtil.VEC_HALF)),x - tile.getPos().getX(),y - tile.getPos().getY(),z - tile.getPos().getZ());
    vb.setTranslation(x - tile.getPos().getX(),y - tile.getPos().getY(),z - tile.getPos().getZ());
    for (    MutablePair<BlockPos,Long> breakTask : tile.clientBreakTasks) {
      LaserRenderer_BC8.renderLaserDynamic(new LaserData_BC8(BuildCraftLaserManager.POWERS[(int)Math.round(MathUtil.clamp(breakTask.getRight() * 1D / tile.getTarget(breakTask),0D,1D) * (BuildCraftLaserManager.POWERS.length - 1))],robotPos,new Vec3d(breakTask.getLeft()).add(VecUtil.VEC_HALF),1 / 16D),vb);
    }
  }
  vb.setTranslation(0,0,0);
  Minecraft.getMinecraft().mcProfiler.endSection();
  Minecraft.getMinecraft().mcProfiler.endSection();
}",0.9875745526838966
156359,"@Override public void initGui(){
  super.initGui();
  buttonList.add(new GuiButtonSmall(this,0,rootElement.getX() + 7,rootElement.getY() + 38,100,""String_Node_Str"").setToolTip(ToolTip.createLocalized(""String_Node_Str"")).setBehaviour(IButtonBehaviour.TOGGLE).setActive(container.inverted).registerListener((button,buttonId) -> {
    container.inverted=button.isButtonActive();
    container.sendDataToServer();
  }
));
}","@Override public void initGui(){
  super.initGui();
  buttonList.add(new GuiButtonSmall(this,0,rootElement.getX() + 7,rootElement.getY() + 38,100,""String_Node_Str"").setToolTip(ToolTip.createLocalized(""String_Node_Str"")).setBehaviour(IButtonBehaviour.TOGGLE).setActive(container.inverted).registerListener((button,buttonId,buttonKey) -> {
    container.inverted=button.isButtonActive();
    container.sendDataToServer();
  }
));
}",0.9882075471698112
156360,"/** 
 * @return True if this task has been completed, or cancelled. 
 */
public final boolean addPower(long microJoules){
  power+=microJoules;
  if (power >= getTarget()) {
    if (!finish()) {
      battery.addPower(Math.min(power,battery.getCapacity() - battery.getStored()));
    }
    return true;
  }
 else {
    return onReceivePower();
  }
}","/** 
 * @return True if this task has been completed, or cancelled. 
 */
public final boolean addPower(long microJoules){
  power+=microJoules;
  if (power >= getTarget()) {
    if (!finish()) {
      battery.addPower(Math.min(power,battery.getCapacity() - battery.getStored()),false);
    }
    return true;
  }
 else {
    return onReceivePower();
  }
}",0.9914772727272728
156361,"@Override public void update(){
  if (world.isRemote) {
    tubeLengthLast=tubeLengthCurrent;
    if (Math.abs(tubeLengthWanted - tubeLengthCurrent) <= 0.1) {
      tubeLengthCurrent=tubeLengthWanted;
    }
 else {
      tubeLengthCurrent=tubeLengthCurrent + Math.min(Math.abs((tubeLengthWanted - tubeLengthCurrent) / 10D),0.1) * (tubeLengthWanted > tubeLengthCurrent ? 1 : -1);
    }
    return;
  }
  if (!battery.isFull()) {
    battery.addPower(MjAPI.MJ);
  }
  battery.tick(getWorld(),getPos());
  if (true) {
    sendNetworkUpdate(NET_LED_STATUS);
  }
  initCurrentPos();
  mine();
}","@Override public void update(){
  if (world.isRemote) {
    tubeLengthLast=tubeLengthCurrent;
    if (Math.abs(tubeLengthWanted - tubeLengthCurrent) <= 0.1) {
      tubeLengthCurrent=tubeLengthWanted;
    }
 else {
      tubeLengthCurrent=tubeLengthCurrent + Math.min(Math.abs((tubeLengthWanted - tubeLengthCurrent) / 10D),0.1) * (tubeLengthWanted > tubeLengthCurrent ? 1 : -1);
    }
    return;
  }
  if (!battery.isFull()) {
    battery.addPower(MjAPI.MJ,false);
  }
  battery.tick(getWorld(),getPos());
  if (true) {
    sendNetworkUpdate(NET_LED_STATUS);
  }
  initCurrentPos();
  mine();
}",0.9949324324324323
156362,"@Override public long receivePower(long microJoules,boolean simulate){
  if (simulate) {
    if (battery.isFull()) {
      return microJoules;
    }
 else {
      return 0;
    }
  }
  return battery.addPowerChecking(microJoules);
}","@Override public long receivePower(long microJoules,boolean simulate){
  return battery.addPowerChecking(microJoules,simulate);
}",0.6648199445983379
156363,"@Override public void reconfigure(){
  PipeEventPower.Configure configure=new PipeEventPower.Configure(pipe.getHolder(),this);
  configure.setMaxPower(maxPower);
  configure.setPowerLoss(powerLoss);
  configure.setPowerResistance(powerResistance);
  configure.setReceiver(isReceiver);
  pipe.getHolder().fireEvent(configure);
  maxPower=configure.getMaxPower();
  if (maxPower <= 0) {
    maxPower=DEFAULT_MAX_POWER;
  }
  powerLoss=MathUtil.clamp(configure.getPowerLoss(),-1,maxPower);
  powerResistance=MathUtil.clamp(configure.getPowerResistance(),-1,MjAPI.MJ);
  if (powerLoss < 0) {
    if (powerResistance < 0) {
      powerResistance=MjAPI.MJ / 100;
    }
    powerLoss=maxPower * powerResistance / MjAPI.MJ;
  }
 else   if (powerResistance < 0) {
    powerResistance=powerLoss * MjAPI.MJ / maxPower;
  }
  isReceiver=configure.isReceiver();
}","@Override public void reconfigure(){
  PipeEventPower.Configure configure=new PipeEventPower.Configure(pipe.getHolder(),this);
  configure.setReceiver(isReceiver);
  configure.setMaxPower(maxPower);
  configure.setPowerLoss(powerLoss);
  configure.setPowerResistance(powerResistance);
  pipe.getHolder().fireEvent(configure);
  isReceiver=configure.isReceiver();
  maxPower=configure.getMaxPower();
  if (maxPower <= 0) {
    maxPower=DEFAULT_MAX_POWER;
  }
  powerLoss=MathUtil.clamp(configure.getPowerLoss(),-1,maxPower);
  powerResistance=MathUtil.clamp(configure.getPowerResistance(),-1,MjAPI.MJ);
  if (powerLoss < 0) {
    if (powerResistance < 0) {
      powerResistance=MjAPI.MJ / 100;
    }
    powerLoss=maxPower * powerResistance / MjAPI.MJ;
  }
 else   if (powerResistance < 0) {
    powerResistance=powerLoss * MjAPI.MJ / maxPower;
  }
}",0.9129411764705884
156364,"@Override public IMessage handleWidgetDataServer(MessageContext ctx,PacketBufferBC buffer) throws IOException {
  EnumDyeColor colour=MessageUtil.readEnumOrNull(buffer,EnumDyeColor.class);
  System.out.println(""String_Node_Str"" + colour + ""String_Node_Str""+ index);
  if (colour == null) {
    container.behaviour.slotColours.remove(index);
  }
 else {
    container.behaviour.slotColours.put(index,colour);
  }
  container.behaviour.pipe.getHolder().scheduleNetworkGuiUpdate(PipeMessageReceiver.BEHAVIOUR);
  return null;
}","@Override public IMessage handleWidgetDataServer(MessageContext ctx,PacketBufferBC buffer) throws IOException {
  EnumDyeColor colour=MessageUtil.readEnumOrNull(buffer,EnumDyeColor.class);
  if (colour == null) {
    container.behaviour.slotColours.remove(index);
  }
 else {
    container.behaviour.slotColours.put(index,colour);
  }
  container.behaviour.pipe.getHolder().scheduleNetworkGuiUpdate(PipeMessageReceiver.BEHAVIOUR);
  return null;
}",0.9207003089598352
156365,"@Override protected int extractItems(IFlowItems flow,EnumFacing dir,int count){
  if (currentSlot == null)   return 0;
  EnumDyeColor colour=slotColours.get(currentSlot);
  System.out.println(""String_Node_Str"" + currentSlot + ""String_Node_Str""+ colour);
  return flow.tryExtractItems(count,dir,colour,filter);
}","@Override protected int extractItems(IFlowItems flow,EnumFacing dir,int count){
  if (currentSlot == null)   return 0;
  return flow.tryExtractItems(count,dir,slotColours.get(currentSlot),filter);
}",0.68762278978389
156366,"@PipeEventHandler public void sideCheck(PipeEventItem.SideCheck event){
  if (isFilter) {
    if (event.colour == colour) {
      event.increasePriority(side);
    }
 else     if (event.colour != null) {
      event.disallow(side);
    }
 else {
      event.decreasePriority(side);
    }
  }
}","@PipeEventHandler public void sideCheck(PipeEventItem.SideCheck event){
  sideCheckAnyPos(event,side);
}",0.4534005037783375
156367,"@Override public void readFromNBT(NBTTagCompound nbt){
  super.readFromNBT(nbt);
  if (nbt.hasKey(""String_Node_Str"")) {
    try {
      pipe=new Pipe(this,nbt.getCompoundTag(""String_Node_Str""));
      eventBus.registerHandler(pipe.behaviour);
      eventBus.registerHandler(pipe.flow);
    }
 catch (    LoadingException e) {
      e.printStackTrace();
    }
  }
  NBTTagCompound plugs=nbt.getCompoundTag(""String_Node_Str"");
  for (  EnumFacing face : EnumFacing.VALUES) {
    pluggables.get(face).readFromNbt(plugs.getCompoundTag(face.getName()));
  }
  wireManager.readFromNbt(nbt.getCompoundTag(""String_Node_Str""));
}","@Override public void readFromNBT(NBTTagCompound nbt){
  super.readFromNBT(nbt);
  if (nbt.hasKey(""String_Node_Str"")) {
    try {
      pipe=new Pipe(this,nbt.getCompoundTag(""String_Node_Str""));
      eventBus.registerHandler(pipe.behaviour);
      eventBus.registerHandler(pipe.flow);
      if (pipe.flow instanceof IFlowItems) {
        eventBus.registerHandler(FilterEventHandler.class);
      }
    }
 catch (    LoadingException e) {
      e.printStackTrace();
    }
  }
  NBTTagCompound plugs=nbt.getCompoundTag(""String_Node_Str"");
  for (  EnumFacing face : EnumFacing.VALUES) {
    pluggables.get(face).readFromNbt(plugs.getCompoundTag(face.getName()));
  }
  wireManager.readFromNbt(nbt.getCompoundTag(""String_Node_Str""));
}",0.9164818920916482
156368,"@Override public void readPayload(int id,PacketBufferBC buffer,Side side,MessageContext ctx) throws IOException {
  super.readPayload(id,buffer,side,ctx);
  if (side == Side.CLIENT) {
    if (id == NET_RENDER_DATA) {
      if (buffer.readBoolean()) {
        pipe=new Pipe(this,buffer,ctx);
        eventBus.registerHandler(pipe.behaviour);
        eventBus.registerHandler(pipe.flow);
      }
 else       if (pipe != null) {
        eventBus.unregisterHandler(pipe.behaviour);
        eventBus.unregisterHandler(pipe.flow);
        pipe=null;
      }
      for (      EnumFacing face : EnumFacing.VALUES) {
        pluggables.get(face).readCreationPayload(buffer);
      }
      wireManager.readPayload(buffer,side,ctx);
    }
 else     if (id == NET_UPDATE_MULTI) {
      int total=buffer.readUnsignedByte();
      for (      PipeMessageReceiver type : PipeMessageReceiver.VALUES) {
        if (((total >> type.ordinal()) & 1) == 1) {
          readPayload(getReceiverId(type),buffer,side,ctx);
        }
      }
    }
 else     if (id == NET_UPDATE_PIPE_BEHAVIOUR) {
      if (buffer.readBoolean()) {
        if (pipe == null) {
          throw new IllegalStateException(""String_Node_Str"");
        }
 else {
          pipe.readPayload(buffer,side,ctx);
        }
      }
    }
 else     if (id == NET_UPDATE_PIPE_FLOW) {
      if (buffer.readBoolean()) {
        if (pipe == null) {
          throw new IllegalStateException(""String_Node_Str"");
        }
 else {
          int fId=buffer.readShort();
          pipe.flow.readPayload(fId,buffer,side);
        }
      }
    }
 else     if (id == NET_UPDATE_PLUG_DOWN)     pluggables.get(EnumFacing.DOWN).readPayload(buffer,side,ctx);
 else     if (id == NET_UPDATE_PLUG_UP)     pluggables.get(EnumFacing.UP).readPayload(buffer,side,ctx);
 else     if (id == NET_UPDATE_PLUG_NORTH)     pluggables.get(EnumFacing.NORTH).readPayload(buffer,side,ctx);
 else     if (id == NET_UPDATE_PLUG_SOUTH)     pluggables.get(EnumFacing.SOUTH).readPayload(buffer,side,ctx);
 else     if (id == NET_UPDATE_PLUG_WEST)     pluggables.get(EnumFacing.WEST).readPayload(buffer,side,ctx);
 else     if (id == NET_UPDATE_PLUG_EAST)     pluggables.get(EnumFacing.EAST).readPayload(buffer,side,ctx);
 else     if (id == NET_UPDATE_WIRES)     wireManager.readPayload(buffer,side,ctx);
  }
}","@Override public void readPayload(int id,PacketBufferBC buffer,Side side,MessageContext ctx) throws IOException {
  super.readPayload(id,buffer,side,ctx);
  if (side == Side.CLIENT) {
    if (id == NET_RENDER_DATA) {
      if (buffer.readBoolean()) {
        pipe=new Pipe(this,buffer,ctx);
        eventBus.registerHandler(pipe.behaviour);
        eventBus.registerHandler(pipe.flow);
        if (pipe.flow instanceof IFlowItems) {
          eventBus.registerHandler(FilterEventHandler.class);
        }
      }
 else       if (pipe != null) {
        eventBus.unregisterHandler(pipe.behaviour);
        eventBus.unregisterHandler(pipe.flow);
        pipe=null;
      }
      for (      EnumFacing face : EnumFacing.VALUES) {
        pluggables.get(face).readCreationPayload(buffer);
      }
      wireManager.readPayload(buffer,side,ctx);
    }
 else     if (id == NET_UPDATE_MULTI) {
      int total=buffer.readUnsignedByte();
      for (      PipeMessageReceiver type : PipeMessageReceiver.VALUES) {
        if (((total >> type.ordinal()) & 1) == 1) {
          readPayload(getReceiverId(type),buffer,side,ctx);
        }
      }
    }
 else     if (id == NET_UPDATE_PIPE_BEHAVIOUR) {
      if (buffer.readBoolean()) {
        if (pipe == null) {
          throw new IllegalStateException(""String_Node_Str"");
        }
 else {
          pipe.readPayload(buffer,side,ctx);
        }
      }
    }
 else     if (id == NET_UPDATE_PIPE_FLOW) {
      if (buffer.readBoolean()) {
        if (pipe == null) {
          throw new IllegalStateException(""String_Node_Str"");
        }
 else {
          int fId=buffer.readShort();
          pipe.flow.readPayload(fId,buffer,side);
        }
      }
    }
 else     if (id == NET_UPDATE_PLUG_DOWN)     pluggables.get(EnumFacing.DOWN).readPayload(buffer,side,ctx);
 else     if (id == NET_UPDATE_PLUG_UP)     pluggables.get(EnumFacing.UP).readPayload(buffer,side,ctx);
 else     if (id == NET_UPDATE_PLUG_NORTH)     pluggables.get(EnumFacing.NORTH).readPayload(buffer,side,ctx);
 else     if (id == NET_UPDATE_PLUG_SOUTH)     pluggables.get(EnumFacing.SOUTH).readPayload(buffer,side,ctx);
 else     if (id == NET_UPDATE_PLUG_WEST)     pluggables.get(EnumFacing.WEST).readPayload(buffer,side,ctx);
 else     if (id == NET_UPDATE_PLUG_EAST)     pluggables.get(EnumFacing.EAST).readPayload(buffer,side,ctx);
 else     if (id == NET_UPDATE_WIRES)     wireManager.readPayload(buffer,side,ctx);
  }
}",0.9749526415491476
156369,"@Override public void onPlacedBy(EntityLivingBase placer,ItemStack stack){
  super.onPlacedBy(placer,stack);
  Item item=stack.getItem();
  if (item instanceof IPipeItem) {
    PipeDefinition definition=((IPipeItem)item).getDefiniton();
    this.pipe=new Pipe(this,definition);
    eventBus.registerHandler(pipe.behaviour);
    eventBus.registerHandler(pipe.flow);
    int meta=stack.getMetadata();
    if (meta > 0 && meta <= 16) {
      pipe.setColour(EnumDyeColor.byMetadata(meta - 1));
    }
  }
  scheduleRenderUpdate();
}","@Override public void onPlacedBy(EntityLivingBase placer,ItemStack stack){
  super.onPlacedBy(placer,stack);
  Item item=stack.getItem();
  if (item instanceof IPipeItem) {
    PipeDefinition definition=((IPipeItem)item).getDefiniton();
    this.pipe=new Pipe(this,definition);
    eventBus.registerHandler(pipe.behaviour);
    eventBus.registerHandler(pipe.flow);
    if (pipe.flow instanceof IFlowItems) {
      eventBus.registerHandler(FilterEventHandler.class);
    }
    int meta=stack.getMetadata();
    if (meta > 0 && meta <= 16) {
      pipe.setColour(EnumDyeColor.byMetadata(meta - 1));
    }
  }
  scheduleRenderUpdate();
}",0.9078380706287684
156370,"/** 
 * Used to render a lot of items in sequential order. Assumes that you don't change the glstate inbetween calls. You must call   {@link #endItemBatch()} after your have rendered all of the items. 
 */
public static void renderItemStack(double x,double y,double z,ItemStack stack,EnumFacing dir,VertexBuffer vb){
  if (stack.isEmpty()) {
    return;
  }
  if (dir == null) {
    dir=EnumFacing.EAST;
  }
  dir=BCLibConfig.rotateTravelingItems.changeFacing(dir);
  IBakedModel model=Minecraft.getMinecraft().getRenderItem().getItemModelMesher().getItemModel(stack);
  model=model.getOverrides().handleItemState(model,stack,null,null);
  boolean requireGl=stack.hasEffect() || model.isBuiltInRenderer();
  if (vb != null && !requireGl) {
    vb.setTranslation(x,y,z);
    float scale=0.30f;
    MutableQuad q=new MutableQuad(-1,null);
    for (    EnumPipePart part : EnumPipePart.VALUES) {
      for (      BakedQuad quad : model.getQuads(null,part.face,0)) {
        q.fromBakedItem(quad);
        q.translated(-0.5,-0.5,-0.5);
        q.scaled(scale);
switch (dir) {
case EAST:
{
            q.rotateY_90(1);
            break;
          }
case WEST:
{
          q.rotateY_90(-1);
          break;
        }
case DOWN:
{
        q.rotateX_90(1);
        break;
      }
case UP:
{
      q.rotateX_90(-1);
      break;
    }
case NORTH:
{
    q.rotateY_180();
    break;
  }
case SOUTH:
{
  break;
}
default :
{
throw new IllegalStateException(""String_Node_Str"" + dir);
}
}
if (quad.hasTintIndex()) {
int colour=Minecraft.getMinecraft().getItemColors().getColorFromItemstack(stack,quad.getTintIndex());
if (EntityRenderer.anaglyphEnable) {
colour=TextureUtil.anaglyphColor(colour);
}
q.multColouri(colour,colour >> 8,colour >> 16,0xFF);
}
q.lighti(15,15);
Vector3f normal=q.getCalculatedNormal();
q.normalvf(normal);
q.multShade();
q.render(vb);
}
}
vb.setTranslation(0,0,0);
return;
}
if (!inBatch) {
inBatch=true;
Minecraft.getMinecraft().renderEngine.bindTexture(TextureMap.LOCATION_BLOCKS_TEXTURE);
}
}","/** 
 * Used to render a lot of items in sequential order. Assumes that you don't change the glstate inbetween calls. You must call   {@link #endItemBatch()} after your have rendered all of the items. 
 */
public static void renderItemStack(double x,double y,double z,ItemStack stack,int lightc,EnumFacing dir,VertexBuffer vb){
  if (stack.isEmpty()) {
    return;
  }
  if (dir == null) {
    dir=EnumFacing.EAST;
  }
  dir=BCLibConfig.rotateTravelingItems.changeFacing(dir);
  IBakedModel model=Minecraft.getMinecraft().getRenderItem().getItemModelMesher().getItemModel(stack);
  model=model.getOverrides().handleItemState(model,stack,null,null);
  boolean requireGl=stack.hasEffect() || model.isBuiltInRenderer();
  if (vb != null && !requireGl) {
    vb.setTranslation(x,y,z);
    float scale=0.30f;
    MutableQuad q=new MutableQuad(-1,null);
    for (    EnumPipePart part : EnumPipePart.VALUES) {
      for (      BakedQuad quad : model.getQuads(null,part.face,0)) {
        q.fromBakedItem(quad);
        q.translated(-0.5,-0.5,-0.5);
        q.scaled(scale);
switch (dir) {
case EAST:
{
            q.rotateY_90(1);
            break;
          }
case WEST:
{
          q.rotateY_90(-1);
          break;
        }
case DOWN:
{
        q.rotateX_90(1);
        break;
      }
case UP:
{
      q.rotateX_90(-1);
      break;
    }
case NORTH:
{
    q.rotateY_180();
    break;
  }
case SOUTH:
{
  break;
}
default :
{
throw new IllegalStateException(""String_Node_Str"" + dir);
}
}
if (quad.hasTintIndex()) {
int colour=Minecraft.getMinecraft().getItemColors().getColorFromItemstack(stack,quad.getTintIndex());
if (EntityRenderer.anaglyphEnable) {
colour=TextureUtil.anaglyphColor(colour);
}
q.multColouri(colour,colour >> 8,colour >> 16,0xFF);
}
q.lighti(lightc);
Vector3f normal=q.getCalculatedNormal();
q.normalvf(normal);
q.multShade();
q.render(vb);
}
}
vb.setTranslation(0,0,0);
return;
}
if (!inBatch) {
inBatch=true;
Minecraft.getMinecraft().renderEngine.bindTexture(TextureMap.LOCATION_BLOCKS_TEXTURE);
}
}",0.9945409429280396
156371,"/** 
 * Used by   {@link MessageObjectCacheReply.Handler} to read an object in.
 * @param id
 * @param buffer
 * @throws IOException 
 */
void readObjectClient(int id,PacketBufferBC buffer) throws IOException {
  Link link=clientRetrieve(id);
  link.actual=readObject(buffer);
}","/** 
 * Used by   {@link MessageObjectCacheReply.Handler} to read an object in.
 * @param id
 * @param buffer
 * @throws IOException 
 */
void readObjectClient(int id,PacketBufferBC buffer) throws IOException {
  Link link=clientRetrieve(id);
  link.actual=readObject(buffer);
  if (DEBUG_CPLX) {
    BCLog.logger.info(""String_Node_Str"" + getNameAndId() + ""String_Node_Str""+ id+ ""String_Node_Str""+ link.actual);
  }
}",0.8
156372,"@PipeEventHandler public static void reachCentre(PipeEventItem.ReachCenter reachCenter){
  reachCenter.stack.setCount(0);
}","@PipeEventHandler public static void reachCentre(PipeEventItem.ReachCenter reachCenter){
  reachCenter.getStack().setCount(0);
}",0.9721115537848606
156373,"private void onItemReachCenter(TravellingItem item){
  ItemStack oldStack=item.stack;
  PipeEventItem.ReachCenter reachCenter=new PipeEventItem.ReachCenter(pipe.getHolder(),this,oldStack.copy(),item.from,item.colour);
  if (pipe.getHolder().fireEvent(reachCenter)) {
    ItemStack newStack=reachCenter.stack;
    if (newStack.isEmpty()) {
      return;
    }
 else     if (item.colour == reachCenter.colour && ItemStack.areItemStacksEqual(oldStack,newStack)) {
      item.state=EnumTravelState.SERVER_TO_EXIT;
      item.colour=reachCenter.colour;
      items.add(item.timeToExit,item);
    }
 else {
      PipeEventItem.SideCheck sideCheck=new PipeEventItem.SideCheck(pipe.getHolder(),this,reachCenter.colour,item.from,newStack);
      sideCheck.disallow(item.from);
      if (item.tried != null) {
        sideCheck.disallowAll(item.tried);
      }
      for (      EnumFacing face : EnumFacing.VALUES) {
        if (!pipe.isConnected(face)) {
          sideCheck.disallow(face);
        }
      }
      pipe.getHolder().fireEvent(sideCheck);
      ItemEntry entry=new ItemEntry(reachCenter.colour,newStack,item.from);
      PipeEventItem.FindDest findDest=new PipeEventItem.FindDest(pipe.getHolder(),this,sideCheck.getOrder(),ImmutableList.of(entry));
      pipe.getHolder().fireEvent(findDest);
      if (entry.to == null) {
        entry.to=findDest.generateRandomOrder();
      }
      List<EnumFacing> to=entry.to;
      item.to=(to.size() <= 0) ? null : to.get(0);
      if (to.size() > 1) {
        item.toTryOrder=to.subList(1,to.size());
      }
 else {
        item.toTryOrder=null;
      }
      item.colour=entry.colour;
      item.stack=entry.stack;
      item.state=EnumTravelState.SERVER_TO_EXIT;
      items.add(item.timeToExit,item);
    }
  }
 else {
    item.state=EnumTravelState.SERVER_TO_EXIT;
    items.add(item.timeToExit,item);
  }
}","private void onItemReachCenter(TravellingItem item){
  IPipeHolder holder=pipe.getHolder();
  PipeEventItem.ReachCenter reachCenter=new PipeEventItem.ReachCenter(holder,this,item.colour,item.stack,item.side);
  holder.fireEvent(reachCenter);
  if (reachCenter.getStack().isEmpty()) {
    return;
  }
  PipeEventItem.SideCheck sideCheck=new PipeEventItem.SideCheck(holder,this,reachCenter.colour,reachCenter.from,reachCenter.getStack());
  sideCheck.disallow(reachCenter.from);
  for (  EnumFacing face : EnumFacing.VALUES) {
    if (item.tried.contains(face) || !pipe.isConnected(face)) {
      sideCheck.disallow(face);
    }
  }
  holder.fireEvent(sideCheck);
  List<EnumSet<EnumFacing>> order=sideCheck.getOrder();
  if (order.isEmpty()) {
    PipeEventItem.TryBounce tryBounce=new PipeEventItem.TryBounce(holder,this,reachCenter.colour,reachCenter.from,reachCenter.getStack());
    holder.fireEvent(tryBounce);
    if (tryBounce.canBounce) {
      order=ImmutableList.of(EnumSet.of(reachCenter.from));
    }
 else {
      dropItem(item.stack,null,item.side.getOpposite());
      return;
    }
  }
  PipeEventItem.ItemEntry entry=new PipeEventItem.ItemEntry(reachCenter.colour,reachCenter.getStack(),reachCenter.from);
  PipeEventItem.Split split=new PipeEventItem.Split(holder,this,order,entry);
  holder.fireEvent(split);
  ImmutableList<PipeEventItem.ItemEntry> entries=ImmutableList.copyOf(split.items);
  PipeEventItem.FindDest findDest=new PipeEventItem.FindDest(holder,this,order,entries);
  holder.fireEvent(findDest);
  World world=holder.getPipeWorld();
  long now=world.getTotalWorldTime();
  for (  PipeEventItem.ItemEntry itemEntry : findDest.items) {
    if (itemEntry.stack.isEmpty()) {
      continue;
    }
    PipeEventItem.ModifySpeed modifySpeed=new PipeEventItem.ModifySpeed(holder,this,itemEntry,item.speed);
    modifySpeed.modifyTo(0.04,0.01);
    holder.fireEvent(modifySpeed);
    double target=modifySpeed.targetSpeed;
    double maxDelta=modifySpeed.maxSpeedChange;
    double nSpeed=item.speed;
    if (nSpeed < target) {
      nSpeed+=maxDelta;
      if (nSpeed > target) {
        nSpeed=target;
      }
    }
 else     if (nSpeed > target) {
      nSpeed-=maxDelta;
      if (nSpeed < target) {
        nSpeed=target;
      }
    }
    if (itemEntry.to == null || itemEntry.to.size() == 0) {
      itemEntry.to=findDest.generateRandomOrder();
    }
    if (itemEntry.to.size() == 0) {
      dropItem(itemEntry.stack,null,item.side.getOpposite());
    }
 else {
      item.toCenter=false;
      item.stack=itemEntry.stack;
      item.colour=itemEntry.colour;
      item.side=itemEntry.to.get(0);
      item.speed=nSpeed;
      item.genTimings(now,getPipeLength(item.side));
      items.add(item.timeToDest,item);
      sendItemDataToClient(item);
    }
  }
}",0.1573516766981943
156374,"@Override public void onTick(){
  World world=pipe.getHolder().getPipeWorld();
  List<TravellingItem> toTick=items.advance();
  if (world.isRemote) {
    for (    TravellingItem item : toTick) {
      if (item.state == EnumTravelState.CLIENT_RUNNING) {
        if (item.motion != null) {
          runItemInstructions(item);
        }
 else {
          item.state=EnumTravelState.CLIENT_WAITING;
          items.add(2,item);
        }
      }
 else       if (item.state == EnumTravelState.CLIENT_WAITING) {
        if (item.motion != null) {
          runItemInstructions(item);
        }
 else {
        }
      }
 else {
      }
    }
    return;
  }
  for (  TravellingItem item : toTick) {
    if (item.state == EnumTravelState.SERVER_TO_CENTER) {
      onItemReachCenter(item);
    }
 else {
      onItemReachEnd(item);
    }
  }
}","@Override public void onTick(){
  World world=pipe.getHolder().getPipeWorld();
  List<TravellingItem> toTick=items.advance();
  if (world.isRemote) {
    return;
  }
  for (  TravellingItem item : toTick) {
    if (item.toCenter) {
      onItemReachCenter(item);
    }
 else {
      onItemReachEnd(item);
    }
  }
}",0.5121527777777778
156375,"private void onItemReachEnd(TravellingItem item){
  EnumFacing to=item.to;
  if (to == null) {
    dropItem(item);
  }
 else {
    PipeEventItem.ReachEnd event=new PipeEventItem.ReachEnd(pipe.getHolder(),this,item.stack,item.from,to,item.colour);
    pipe.getHolder().fireEvent(event);
    item.stack=event.stack;
    item.colour=event.colour;
    ConnectedType type=pipe.getConnectedType(to);
    ItemStack leftOver=item.stack;
    if (type == ConnectedType.PIPE) {
      IPipe oPipe=pipe.getConnectedPipe(to);
      PipeFlow flow=oPipe.getFlow();
      if (flow instanceof IInjectable) {
        IInjectable oItemFlow=(IInjectable)flow;
        leftOver=oItemFlow.injectItem(item.stack,true,to.getOpposite(),item.colour,item.speed);
      }
    }
 else     if (type == ConnectedType.TILE) {
      TileEntity tile=pipe.getConnectedTile(to);
      IItemTransactor trans=ItemTransactorHelper.getTransactor(tile,to.getOpposite());
      leftOver=trans.insert(item.stack,false,false);
    }
    if (!leftOver.isEmpty()) {
      if (item.toTryOrder == null || item.toTryOrder.isEmpty()) {
        dropItem(item,leftOver);
      }
 else {
        if (item.tried == null) {
          item.tried=new ArrayList<>(6);
        }
        item.tried.add(to);
        insertItemImpl(leftOver,item.colour,item.speed,item.to,item.toTryOrder,item.tried);
      }
    }
  }
}","private void onItemReachEnd(TravellingItem item){
  IPipeHolder holder=pipe.getHolder();
  PipeEventItem.ReachEnd reachEnd=new PipeEventItem.ReachEnd(holder,this,item.colour,item.stack,item.side);
  item.colour=reachEnd.colour;
  item.stack=reachEnd.getStack();
  ItemStack excess=item.stack;
  if (excess.isEmpty()) {
    return;
  }
  if (pipe.isConnected(item.side)) {
    ConnectedType type=pipe.getConnectedType(item.side);
switch (type) {
case PIPE:
{
        IPipe oPipe=pipe.getConnectedPipe(item.side);
        if (oPipe == null) {
          break;
        }
        PipeFlow flow=oPipe.getFlow();
        if (flow instanceof IFlowItems) {
          IFlowItems oFlow=(IFlowItems)flow;
          excess=oFlow.injectItem(excess,true,item.side.getOpposite(),item.colour,item.speed);
          if (excess.isEmpty()) {
            return;
          }
        }
        break;
      }
case TILE:
{
      TileEntity tile=pipe.getConnectedTile(item.side);
      IInjectable injectable=ItemTransactorHelper.getInjectable(tile,item.side.getOpposite());
      excess=injectable.injectItem(excess,true,item.side.getOpposite(),item.colour,item.speed);
      if (excess.isEmpty()) {
        return;
      }
      IItemTransactor transactor=ItemTransactorHelper.getTransactor(tile,item.side.getOpposite());
      excess=transactor.insert(excess,false,false);
      if (excess.isEmpty()) {
        return;
      }
      break;
    }
}
}
if (excess.isEmpty()) {
return;
}
item.tried.add(item.side);
item.toCenter=true;
item.stack=excess;
item.genTimings(holder.getPipeWorld().getTotalWorldTime(),getPipeLength(item.side));
items.add(item.timeToDest,item);
sendItemDataToClient(item);
}",0.28665568369028
156376,"/** 
 * Used internally to split up manual insertions from controlled extractions. 
 */
private void insertItemEvents(@Nonnull ItemStack toInsert,EnumDyeColor colour,double speed,EnumFacing from){
  IPipeHolder holder=pipe.getHolder();
  PipeEventItem.BeforeInsert beforeInsert=new PipeEventItem.BeforeInsert(holder,this,colour,from,toInsert);
  holder.fireEvent(beforeInsert);
  colour=beforeInsert.colour;
  PipeEventItem.SideCheck sideCheck=new PipeEventItem.SideCheck(holder,this,colour,from,toInsert);
  sideCheck.disallow(from);
  for (  EnumFacing face : EnumFacing.VALUES) {
    if (face == from) {
      continue;
    }
    if (!pipe.isConnected(face)) {
      sideCheck.disallow(face);
    }
  }
  holder.fireEvent(sideCheck);
  List<EnumSet<EnumFacing>> order=sideCheck.getOrder();
  if (order.isEmpty()) {
    PipeEventItem.TryBounce bounce=new PipeEventItem.TryBounce(holder,this,colour,from,toInsert);
    holder.fireEvent(bounce);
    if (bounce.canBounce) {
      order=ImmutableList.of(EnumSet.of(from));
    }
 else {
      insertItemImpl(toInsert,colour,speed,from,null,null);
      return;
    }
  }
  PipeEventItem.ItemEntry toSplit=new PipeEventItem.ItemEntry(colour,toInsert,from);
  PipeEventItem.Split split=new PipeEventItem.Split(holder,this,order,toSplit);
  holder.fireEvent(split);
  ImmutableList<PipeEventItem.ItemEntry> splitList=ImmutableList.copyOf(split.items);
  PipeEventItem.FindDest findDest=new PipeEventItem.FindDest(holder,this,order,splitList);
  holder.fireEvent(findDest);
  for (  PipeEventItem.ItemEntry item : findDest.items) {
    PipeEventItem.ModifySpeed modifySpeed=new PipeEventItem.ModifySpeed(holder,this,item,speed);
    modifySpeed.modifyTo(0.04,0.01);
    holder.fireEvent(modifySpeed);
    double target=modifySpeed.targetSpeed;
    double maxDelta=modifySpeed.maxSpeedChange;
    double nSpeed=speed;
    if (nSpeed < target) {
      nSpeed+=maxDelta;
      if (nSpeed > target) {
        nSpeed=target;
      }
    }
 else     if (nSpeed > target) {
      nSpeed-=maxDelta;
      if (nSpeed < target) {
        nSpeed=target;
      }
    }
    if (item.to == null) {
      item.to=findDest.generateRandomOrder();
    }
    insertItemImpl(item.stack,item.colour,nSpeed,from,item.to,null);
  }
}","/** 
 * Used internally to split up manual insertions from controlled extractions. 
 */
private void insertItemEvents(@Nonnull ItemStack toInsert,EnumDyeColor colour,double speed,EnumFacing from){
  IPipeHolder holder=pipe.getHolder();
  PipeEventItem.OnInsert onInsert=new PipeEventItem.OnInsert(holder,this,colour,toInsert,from);
  holder.fireEvent(onInsert);
  if (onInsert.getStack().isEmpty()) {
    return;
  }
  World world=pipe.getHolder().getPipeWorld();
  long now=world.getTotalWorldTime();
  TravellingItem item=new TravellingItem(toInsert);
  item.side=from;
  item.toCenter=true;
  item.speed=speed;
  item.colour=onInsert.colour;
  item.stack=onInsert.getStack();
  item.genTimings(now,getPipeLength(from));
  items.add(item.timeToDest,item);
  sendItemDataToClient(item);
}",0.202365308804205
156377,"@Override public void readPayload(int id,PacketBuffer bufIn,Side side) throws IOException {
  PacketBufferBC buffer=PacketBufferBC.asPacketBufferBc(bufIn);
  if (side == Side.CLIENT) {
    if (id == NET_CREATE_ITEM) {
      EnumFacing from=buffer.readEnumValue(EnumFacing.class);
      EnumFacing to=MessageUtil.readEnumOrNull(buffer,EnumFacing.class);
      EnumDyeColor colour=MessageUtil.readEnumOrNull(buffer,EnumDyeColor.class);
      int delay=buffer.readInt();
      int stackId=buffer.readInt();
      int stackSize=buffer.readShort();
      Supplier<ItemStack> link=BuildCraftObjectCaches.retrieveItemStack(stackId);
      TravellingItem item=new TravellingItem(link,stackSize);
      item.from=from;
      item.to=to;
      item.colour=colour;
      long now=pipe.getHolder().getPipeWorld().getTotalWorldTime();
      item.tickStarted=now;
      item.tickFinished=now + delay;
      item.state=EnumTravelState.CLIENT_RUNNING;
      items.add(delay,item);
    }
  }
}","@Override public void readPayload(int id,PacketBuffer bufIn,Side msgSide) throws IOException {
  PacketBufferBC buffer=PacketBufferBC.asPacketBufferBc(bufIn);
  if (msgSide == Side.CLIENT) {
    if (id == NET_CREATE_ITEM) {
      int stackId=buffer.readInt();
      Supplier<ItemStack> link=BuildCraftObjectCaches.retrieveItemStack(stackId);
      int count=buffer.readUnsignedShort();
      TravellingItem item=new TravellingItem(link,count);
      item.toCenter=buffer.readBoolean();
      item.side=buffer.readEnumValue(EnumFacing.class);
      item.colour=MessageUtil.readEnumOrNull(buffer,EnumDyeColor.class);
      item.timeToDest=buffer.readUnsignedShort();
      item.tickStarted=pipe.getHolder().getPipeWorld().getTotalWorldTime() + 1;
      item.tickFinished=item.tickStarted + item.timeToDest;
      items.add(item.timeToDest + 1,item);
    }
  }
}",0.3258855585831062
156378,"private void dropItem(TravellingItem item,ItemStack stack){
  if (stack == null) {
    return;
  }
  EnumFacing to=item.from.getOpposite();
  IPipeHolder holder=pipe.getHolder();
  World world=holder.getPipeWorld();
  BlockPos pos=holder.getPipePos();
  double x=pos.getX() + 0.5;
  double y=pos.getY() + 0.5;
  double z=pos.getZ() + 0.5;
  EntityItem ent=new EntityItem(world,x,y,z,stack);
  ent.motionX=to.getFrontOffsetX() * 0.04;
  ent.motionY=to.getFrontOffsetY() * 0.04;
  ent.motionZ=to.getFrontOffsetZ() * 0.04;
  world.spawnEntity(ent);
}","private void dropItem(ItemStack stack,EnumFacing side,EnumFacing motion){
  if (stack == null || stack.isEmpty()) {
    return;
  }
  IPipeHolder holder=pipe.getHolder();
  World world=holder.getPipeWorld();
  BlockPos pos=holder.getPipePos();
  double x=pos.getX() + 0.5;
  double y=pos.getY() + 0.5;
  double z=pos.getZ() + 0.5;
  if (side != null) {
    x+=side.getFrontOffsetX() * 0.4;
    y+=side.getFrontOffsetY() * 0.4;
    z+=side.getFrontOffsetZ() * 0.4;
  }
  EntityItem ent=new EntityItem(world,x,y,z,stack);
  if (motion != null) {
    ent.motionX=motion.getFrontOffsetX() * 0.04;
    ent.motionY=motion.getFrontOffsetY() * 0.04;
    ent.motionZ=motion.getFrontOffsetZ() * 0.04;
  }
  world.spawnEntity(ent);
}",0.7565011820330969
156379,"private double getPipeLength(EnumFacing to){
  if (to == null) {
    return 0;
  }
  if (pipe.isConnected(to)) {
    return 0.5;
  }
 else {
    return 0.25;
  }
}","private double getPipeLength(EnumFacing side){
  if (side == null) {
    return 0;
  }
  if (pipe.isConnected(side)) {
    return 0.5;
  }
 else {
    return 0.25;
  }
}",0.9457831325301204
156380,"public TravellingItem(NBTTagCompound nbt,long tickNow){
  stack=new ItemStack(nbt.getCompoundTag(""String_Node_Str""));
  int c=nbt.getByte(""String_Node_Str"");
  this.colour=c == 0 ? null : EnumDyeColor.byMetadata(c - 1);
  this.state=nbt.getBoolean(""String_Node_Str"") ? EnumTravelState.SERVER_TO_CENTER : EnumTravelState.SERVER_TO_EXIT;
  this.speed=nbt.getDouble(""String_Node_Str"");
  if (speed < 0.001) {
    speed=0.001;
  }
  tickStarted=nbt.getInteger(""String_Node_Str"") + tickNow;
  tickFinished=nbt.getInteger(""String_Node_Str"") + tickNow;
  timeToCenter=nbt.getInteger(""String_Node_Str"");
  timeToExit=nbt.getInteger(""String_Node_Str"");
  int f=nbt.getInteger(""String_Node_Str"");
  from=f == 0 ? null : EnumFacing.getFront(f - 1);
  int t=nbt.getInteger(""String_Node_Str"");
  to=t == 0 ? null : EnumFacing.getFront(t - 1);
  int[] toTry=nbt.getIntArray(""String_Node_Str"");
  if (toTry.length > 0) {
    toTryOrder=new ArrayList<>(toTry.length);
    for (    int i : toTry) {
      toTryOrder.add(EnumFacing.getFront(i));
    }
  }
  int[] triedArr=nbt.getIntArray(""String_Node_Str"");
  if (triedArr.length > 0) {
    tried=new ArrayList<>(triedArr.length);
    for (    int i : toTry) {
      tried.add(EnumFacing.getFront(i));
    }
  }
}","public TravellingItem(NBTTagCompound nbt,long tickNow){
  stack=new ItemStack(nbt.getCompoundTag(""String_Node_Str""));
  int c=nbt.getByte(""String_Node_Str"");
  this.colour=c == 0 ? null : EnumDyeColor.byMetadata(c - 1);
  this.toCenter=nbt.getBoolean(""String_Node_Str"");
  this.speed=nbt.getDouble(""String_Node_Str"");
  if (speed < 0.001) {
    speed=0.001;
  }
  tickStarted=nbt.getInteger(""String_Node_Str"") + tickNow;
  tickFinished=nbt.getInteger(""String_Node_Str"") + tickNow;
  timeToDest=nbt.getInteger(""String_Node_Str"");
  side=NBTUtilBC.readEnum(nbt.getTag(""String_Node_Str""),EnumFacing.class);
  if (side == null || timeToDest == 0) {
    toCenter=true;
  }
  tried=NBTUtilBC.readEnumSet(nbt.getTag(""String_Node_Str""),EnumFacing.class);
}",0.5025075225677031
156381,"public EnumFacing getRenderDirection(long tick,float partialTicks){
  long diff=tickFinished - tickStarted;
  long afterTick=tick - tickStarted;
  float interp=(afterTick + partialTicks) / diff;
  interp=Math.max(0,Math.min(1,interp));
  if (interp < 0.5) {
    return from.getOpposite();
  }
 else {
    return to;
  }
}","public EnumFacing getRenderDirection(long tick,float partialTicks){
  long diff=tickFinished - tickStarted;
  long afterTick=tick - tickStarted;
  float interp=(afterTick + partialTicks) / diff;
  interp=Math.max(0,Math.min(1,interp));
  if (toCenter) {
    return side == null ? null : side.getOpposite();
  }
 else {
    return side;
  }
}",0.797583081570997
156382,"public boolean isVisible(){
  return state != EnumTravelState.CLIENT_INVALID;
}","public boolean isVisible(){
  return true;
}",0.6829268292682927
156383,"public Vec3d getRenderPosition(BlockPos pos,long tick,float partialTicks){
  long diff=tickFinished - tickStarted;
  long afterTick=tick - tickStarted;
  float interp=(afterTick + partialTicks) / diff;
  interp=Math.max(0,Math.min(1,interp));
  Vec3d center=new Vec3d(pos).addVector(0.5,0.5,0.5);
  Vec3d start=VecUtil.offset(center,from,0.5);
  Vec3d end=center;
  if (to != null) {
    end=VecUtil.offset(center,to,0.5);
  }
  Vec3d vecFrom;
  Vec3d vecTo;
  if (interp < 0.5) {
    vecFrom=start;
    vecTo=center;
    interp*=2;
  }
 else {
    vecFrom=center;
    vecTo=end;
    interp=(interp - 0.5f) * 2;
  }
  return VecUtil.scale(vecFrom,1 - interp).add(VecUtil.scale(vecTo,interp));
}","public Vec3d getRenderPosition(BlockPos pos,long tick,float partialTicks){
  long diff=tickFinished - tickStarted;
  long afterTick=tick - tickStarted;
  float interp=(afterTick + partialTicks) / diff;
  interp=Math.max(0,Math.min(1,interp));
  Vec3d center=new Vec3d(pos).addVector(0.5,0.5,0.5);
  Vec3d vecSide=side == null ? center : VecUtil.offset(center,side,0.5);
  Vec3d vecFrom;
  Vec3d vecTo;
  if (toCenter) {
    vecFrom=vecSide;
    vecTo=center;
  }
 else {
    vecFrom=center;
    vecTo=vecSide;
  }
  return VecUtil.scale(vecFrom,1 - interp).add(VecUtil.scale(vecTo,interp));
}",0.5443234836702955
156384,"public NBTTagCompound writeToNbt(long tickNow){
  NBTTagCompound nbt=new NBTTagCompound();
  nbt.setTag(""String_Node_Str"",stack.serializeNBT());
  nbt.setByte(""String_Node_Str"",(byte)(colour == null ? 0 : colour.getMetadata() + 1));
  nbt.setBoolean(""String_Node_Str"",state == EnumTravelState.SERVER_TO_CENTER);
  nbt.setDouble(""String_Node_Str"",speed);
  nbt.setInteger(""String_Node_Str"",(int)(tickStarted - tickNow));
  nbt.setInteger(""String_Node_Str"",(int)(tickFinished - tickNow));
  nbt.setInteger(""String_Node_Str"",timeToCenter);
  nbt.setInteger(""String_Node_Str"",timeToExit);
  nbt.setByte(""String_Node_Str"",(byte)(from == null ? 0 : from.ordinal() + 1));
  nbt.setByte(""String_Node_Str"",(byte)(to == null ? 0 : to.ordinal() + 1));
  if (toTryOrder != null) {
    int[] order=new int[toTryOrder.size()];
    for (int i=toTryOrder.size() - 1; i >= 0; i--) {
      order[i]=toTryOrder.get(i).getIndex();
    }
    nbt.setIntArray(""String_Node_Str"",order);
  }
  if (tried != null) {
    int[] order=new int[tried.size()];
    for (int i=tried.size() - 1; i >= 0; i--) {
      order[i]=tried.get(i).getIndex();
    }
    nbt.setIntArray(""String_Node_Str"",order);
  }
  return nbt;
}","public NBTTagCompound writeToNbt(long tickNow){
  NBTTagCompound nbt=new NBTTagCompound();
  nbt.setTag(""String_Node_Str"",stack.serializeNBT());
  nbt.setByte(""String_Node_Str"",(byte)(colour == null ? 0 : colour.getMetadata() + 1));
  nbt.setBoolean(""String_Node_Str"",toCenter);
  nbt.setDouble(""String_Node_Str"",speed);
  nbt.setInteger(""String_Node_Str"",(int)(tickStarted - tickNow));
  nbt.setInteger(""String_Node_Str"",(int)(tickFinished - tickNow));
  nbt.setInteger(""String_Node_Str"",timeToDest);
  nbt.setTag(""String_Node_Str"",NBTUtilBC.writeEnum(side));
  nbt.setTag(""String_Node_Str"",NBTUtilBC.writeEnumSet(tried,EnumFacing.class));
  return nbt;
}",0.5357917570498916
156385,"public void genTimings(long now,double distance){
  tickStarted=now;
  int time=(int)Math.ceil(distance / speed);
  tickFinished=now + (time);
  timeToCenter=time / 2;
  timeToExit=time - timeToCenter;
}","public void genTimings(long now,double distance){
  tickStarted=now;
  timeToDest=(int)Math.ceil(distance / speed);
  tickFinished=now + timeToDest;
}",0.8045325779036827
156386,"@PipeEventHandler public static void sideCheck(PipeEventItem.SideCheck event){
  for (  EnumFacing side : EnumFacing.VALUES) {
    if (!event.isAllowed(side)) {
      continue;
    }
    IPipe neighbour=event.holder.getNeighbouringPipe(side);
    if (neighbour == null) {
      continue;
    }
    PipePluggable plug=neighbour.getHolder().getPluggable(side.getOpposite());
    if (plug instanceof PluggableLens) {
      PluggableLens lens=(PluggableLens)plug;
      lens.sideCheckAnyPos(event,side);
    }
  }
}","@PipeEventHandler public static void sideCheck(PipeEventItem.SideCheck event){
  for (  EnumFacing side : EnumFacing.VALUES) {
    if (!event.isAllowed(side)) {
      continue;
    }
    IPipe neighbour=event.holder.getNeighbouringPipe(side);
    if (neighbour == null) {
      continue;
    }
    PipePluggable neighbourPlug=neighbour.getHolder().getPluggable(side.getOpposite());
    PipePluggable atPlug=event.holder.getPluggable(side);
    if (neighbourPlug instanceof PluggableLens) {
      EnumDyeColor colourAt=event.colour;
      if (atPlug instanceof PluggableLens) {
        PluggableLens lens=(PluggableLens)atPlug;
        if (!lens.isFilter) {
          colourAt=lens.colour;
        }
      }
      PluggableLens lens=(PluggableLens)neighbourPlug;
      if (lens.isFilter) {
        if (colourAt == lens.colour) {
          event.increasePriority(side);
        }
 else         if (colourAt == null) {
          event.decreasePriority(side);
        }
      }
    }
  }
}",0.6136363636363636
156387,"@PipeEventHandler public void sideCheck(PipeEventItem.SideCheck event){
  sideCheckAnyPos(event,side);
}","@PipeEventHandler public void sideCheck(PipeEventItem.SideCheck event){
  if (isFilter) {
    if (event.colour == colour) {
      event.increasePriority(side);
    }
 else     if (event.colour != null) {
      event.disallow(side);
    }
 else {
      event.decreasePriority(side);
    }
  }
}",0.4130982367758186
156388,"@PipeEventHandler public void beforeInsert(PipeEventItem.BeforeInsert event){
  if (!isFilter) {
    if (event.from == side) {
      event.colour=colour;
    }
  }
}","@PipeEventHandler public void beforeInsert(PipeEventItem.OnInsert event){
  if (!isFilter) {
    if (event.from == side) {
      event.colour=colour;
    }
  }
}",0.9754601226993864
156389,"@Override public void reconfigure(){
  PipeEventPower.Configure configure=new PipeEventPower.Configure(pipe.getHolder(),this);
  configure.setMaxPower(maxPower);
  configure.setReceiver(isReceiver);
  pipe.getHolder().fireEvent(configure);
  maxPower=MathUtil.clamp(configure.getMaxPower(),MjAPI.MJ,ABSOLUTE_MAX_POWER);
  isReceiver=configure.isReceiver();
}","@Override public void reconfigure(){
  PipeEventPower.Configure configure=new PipeEventPower.Configure(pipe.getHolder(),this);
  configure.setMaxPower(maxPower);
  configure.setReceiver(isReceiver);
  pipe.getHolder().fireEvent(configure);
  maxPower=configure.getMaxPower();
  if (maxPower <= 0) {
    maxPower=DEFAULT_MAX_POWER;
  }
  isReceiver=configure.isReceiver();
}",0.7305061559507524
156390,"public boolean tryPairEntity(EntityQuarryFrame frame,Axis axis,int listIndex){
  List<EntityQuarryFrame> entities=getArmList(axis);
  if (world.isRemote && entities.size() == 0) {
    BlockPos size=frameBox.size();
    resizeTo(xArm,size.getX());
    resizeTo(zArm,size.getZ());
    int ySize=frameBox.max().getY() - (int)Math.ceil(drillPos.yCoord);
    resizeTo(yArm,ySize + 10);
  }
  if (listIndex < 0 || listIndex >= entities.size()) {
    return false;
  }
  EntityQuarryFrame current=entities.get(listIndex);
  if (current == null || current.isDead || !current.isConnected(this)) {
    if (current != null) {
      current.setDead();
    }
    entities.set(listIndex,frame);
    return true;
  }
  return false;
}","public boolean tryPairEntity(EntityQuarryFrame frame,Axis axis,int listIndex){
  if (!frameBox.isInitialized()) {
    return false;
  }
  List<EntityQuarryFrame> entities=getArmList(axis);
  if (world.isRemote && entities.size() == 0) {
    BlockPos size=frameBox.size();
    resizeTo(xArm,size.getX());
    resizeTo(zArm,size.getZ());
    int ySize=frameBox.max().getY() - (int)Math.ceil(drillPos.yCoord);
    resizeTo(yArm,ySize + 10);
  }
  if (listIndex < 0 || listIndex >= entities.size()) {
    return false;
  }
  EntityQuarryFrame current=entities.get(listIndex);
  if (current == null || current.isDead || !current.isConnected(this)) {
    if (current != null) {
      current.setDead();
    }
    entities.set(listIndex,frame);
    return true;
  }
  return false;
}",0.9618729096989966
156391,"private static MutableQuad[] getEngineQuads(ModelHolderVariable model,TileEngineRedstone_BC8 tile,float partialTicks){
  ENGINE_PROGRESS.value=tile.getProgressClient(partialTicks);
  ENGINE_STAGE.value=tile.getPowerStage().getModelName();
  return model.getCutoutQuads();
}","private static MutableQuad[] getEngineQuads(ModelHolderVariable model,TileEngineBase_BC8 tile,float partialTicks){
  ENGINE_PROGRESS.value=tile.getProgressClient(partialTicks);
  ENGINE_STAGE.value=tile.getPowerStage().getModelName();
  ENGINE_FACING.value=tile.getCurrentFacing().getName();
  return model.getCutoutQuads();
}",0.8647746243739566
156392,"public static final MutableQuad[] getCreativeEngineQuads(TileEngineRedstone_BC8 tile,float partialTicks){
  return getEngineQuads(ENGINE_CREATIVE,tile,partialTicks);
}","public static final MutableQuad[] getCreativeEngineQuads(TileEngineBase_BC8 tile,float partialTicks){
  return getEngineQuads(ENGINE_CREATIVE,tile,partialTicks);
}",0.9757575757575756
156393,"@Override protected MutableQuad[] getEngineModel(TileEngineRedstone_BC8 engine,float partialTicks){
}","@Override protected MutableQuad[] getEngineModel(TileEngineRedstone_BC8 engine,float partialTicks){
  return BCCoreModels.getRedstoneEngineQuads(engine,partialTicks);
}",0.7509293680297398
156394,"@SideOnly(Side.CLIENT) public float getProgressClient(float partialTicks){
  return progress;
}","@SideOnly(Side.CLIENT) public float getProgressClient(float partialTicks){
  return lastProgress * (1 - partialTicks) + progress * partialTicks;
}",0.7883817427385892
156395,"@Override protected void drawBackgroundLayer(float partialTicks){
  ICON_GUI.drawAt(rootElement);
  DeltaInt delta=container.tile.deltaProgress;
  double dynamic=delta.getDynamic(partialTicks);
  double p=dynamic / 100;
  GuiRectangle progress=RECT_PROGRESS.createProgress(p,1);
  ICON_PROGRESS.drawCutInside(progress.offset(rootElement));
  fontRendererObj.drawString(""String_Node_Str"" + delta.getStatic(true),10,10,-1);
  fontRendererObj.drawString(""String_Node_Str"" + dynamic,10,20,-1);
  fontRendererObj.drawString(""String_Node_Str"" + delta.getStatic(false),10,30,-1);
  fontRendererObj.drawString(""String_Node_Str"" + delta.changingEntries.size(),10,40,-1);
  if (container.tile.currentRecipe != null) {
    RenderHelper.enableGUIStandardItemLighting();
    ItemStack output=container.tile.getOutput();
    int x=rootElement.getX() + 93;
    int y=rootElement.getY() + 27;
    this.itemRender.renderItemAndEffectIntoGUI(this.mc.thePlayer,output,x,y);
    this.itemRender.renderItemOverlayIntoGUI(this.mc.fontRendererObj,output,x,y,null);
    RenderHelper.enableStandardItemLighting();
  }
}","@Override protected void drawBackgroundLayer(float partialTicks){
  ICON_GUI.drawAt(rootElement);
  DeltaInt delta=container.tile.deltaProgress;
  double dynamic=delta.getDynamic(partialTicks);
  double p=dynamic / 100;
  GuiRectangle progress=RECT_PROGRESS.createProgress(p,1);
  ICON_PROGRESS.drawCutInside(progress.offset(rootElement));
  fontRendererObj.drawString(""String_Node_Str"" + delta.getStatic(true),10,10,-1);
  fontRendererObj.drawString(""String_Node_Str"" + dynamic,10,20,-1);
  fontRendererObj.drawString(""String_Node_Str"" + delta.getStatic(false),10,30,-1);
  fontRendererObj.drawString(""String_Node_Str"" + delta.changingEntries.size(),10,40,-1);
  if (container.tile.currentRecipe != null) {
    RenderHelper.enableGUIStandardItemLighting();
    ItemStack output=container.tile.getOutput();
    int x=rootElement.getX() + 93;
    int y=rootElement.getY() + 27;
    this.itemRender.renderItemAndEffectIntoGUI(this.mc.player,output,x,y);
    this.itemRender.renderItemOverlayIntoGUI(this.mc.fontRendererObj,output,x,y,null);
    RenderHelper.enableStandardItemLighting();
  }
}",0.9977116704805492
156396,"@Override public ActionResult<ItemStack> onItemRightClick(ItemStack stack,World world,EntityPlayer player,EnumHand hand){
  Vec3d start=player.getPositionVector().addVector(0,player.getEyeHeight(),0);
  Vec3d look=player.getLookVec();
  Vec3d end=start.add(look.scale(7));
  RayTraceResult ray=world.rayTraceBlocks(start,end,true,false,true);
  if (ray == null || ray.getBlockPos() == null) {
    return new ActionResult<>(EnumActionResult.FAIL,stack);
  }
  Block b=world.getBlockState(ray.getBlockPos()).getBlock();
  if (b != Blocks.WATER) {
    return new ActionResult<>(EnumActionResult.FAIL,stack);
  }
  if (!player.capabilities.isCreativeMode) {
    stack.setCount(stack.getCount() - 1);
  }
  world.playSound((EntityPlayer)null,player.posX,player.posY,player.posZ,SoundEvents.ENTITY_SNOWBALL_THROW,SoundCategory.NEUTRAL,0.5F,0.4F / (itemRand.nextFloat() * 0.4F + 0.8F));
  if (!world.isRemote) {
    world.setBlockState(ray.getBlockPos(),BCFactoryBlocks.waterGel.getDefaultState().withProperty(BlockWaterGel.PROP_STAGE,GelStage.SPREAD_0));
    world.scheduleUpdate(ray.getBlockPos(),BCFactoryBlocks.waterGel,200);
  }
  return new ActionResult<>(EnumActionResult.SUCCESS,stack);
}","@Override public ActionResult<ItemStack> onItemRightClick(World world,EntityPlayer player,EnumHand hand){
  ItemStack stack=player.getHeldItem(hand);
  Vec3d start=player.getPositionVector().addVector(0,player.getEyeHeight(),0);
  Vec3d look=player.getLookVec();
  Vec3d end=start.add(look.scale(7));
  RayTraceResult ray=world.rayTraceBlocks(start,end,true,false,true);
  if (ray == null || ray.getBlockPos() == null) {
    return new ActionResult<>(EnumActionResult.FAIL,stack);
  }
  Block b=world.getBlockState(ray.getBlockPos()).getBlock();
  if (b != Blocks.WATER) {
    return new ActionResult<>(EnumActionResult.FAIL,stack);
  }
  if (!player.capabilities.isCreativeMode) {
    stack.setCount(stack.getCount() - 1);
  }
  world.playSound((EntityPlayer)null,player.posX,player.posY,player.posZ,SoundEvents.ENTITY_SNOWBALL_THROW,SoundCategory.NEUTRAL,0.5F,0.4F / (itemRand.nextFloat() * 0.4F + 0.8F));
  if (!world.isRemote) {
    world.setBlockState(ray.getBlockPos(),BCFactoryBlocks.waterGel.getDefaultState().withProperty(BlockWaterGel.PROP_STAGE,GelStage.SPREAD_0));
    world.scheduleUpdate(ray.getBlockPos(),BCFactoryBlocks.waterGel,200);
  }
  return new ActionResult<>(EnumActionResult.SUCCESS,stack);
}",0.9750623441396508
156397,"private void putInInventories(EnumFacing currentSide){
  List<EnumFacing> sides=Arrays.asList(EnumFacing.values());
  Collections.shuffle(sides,new Random());
  for (  EnumFacing side : sides) {
    if (side == currentSide) {
      return;
    }
    TileEntity tile=worldObj.getTileEntity(pos.offset(side));
    IItemTransactor transactor=ItemTransactorHelper.getTransactor(tile,side.getOpposite());
    if (transactor == NoSpaceTransactor.INSTANCE) {
      continue;
    }
    IStackFilter filter=(stack) -> {
      if (stack == null) {
        return false;
      }
      ItemStack leftOver=transactor.insert(stack.copy(),false,true);
      if (leftOver == null) {
        return true;
      }
      return leftOver.getCount() < stack.getCount();
    }
;
    ItemStack extracted=inv.extract(filter,1,1,false);
    transactor.insert(extracted,false,false);
  }
}","private void putInInventories(EnumFacing currentSide){
  List<EnumFacing> sides=Arrays.asList(EnumFacing.values());
  Collections.shuffle(sides,new Random());
  for (  EnumFacing side : sides) {
    if (side == currentSide) {
      return;
    }
    TileEntity tile=world.getTileEntity(pos.offset(side));
    IItemTransactor transactor=ItemTransactorHelper.getTransactor(tile,side.getOpposite());
    if (transactor == NoSpaceTransactor.INSTANCE) {
      continue;
    }
    IStackFilter filter=(stack) -> {
      if (stack.isEmpty()) {
        return false;
      }
      ItemStack leftOver=transactor.insert(stack.copy(),false,true);
      if (leftOver.isEmpty()) {
        return true;
      }
      return leftOver.getCount() < stack.getCount();
    }
;
    ItemStack extracted=inv.extract(filter,1,1,false);
    transactor.insert(extracted,false,false);
  }
}",0.9774174869716272
156398,"private void putItemsFromGround(EnumFacing currentSide){
  int radius=3;
  BlockPos offset=new BlockPos(currentSide.getDirectionVec());
  offset=new BlockPos(offset.getX() * radius,offset.getY() * radius,offset.getZ() * radius);
  AxisAlignedBB aabb=new AxisAlignedBB(this.pos,this.pos).expandXyz(radius).offset(offset);
  List<EntityItem> entityItems=worldObj.getEntitiesWithinAABB(EntityItem.class,aabb);
  int index=0, max=3;
  for (  EntityItem entityItem : entityItems) {
    ItemStack stack=entityItem.getEntityItem();
    stack=inv.insert(stack,false,false);
    if (stack == null) {
      entityItem.setDead();
    }
 else {
      entityItem.setEntityItemStack(stack);
    }
    if (index++ >= max) {
      break;
    }
  }
}","private void putItemsFromGround(EnumFacing currentSide){
  int radius=3;
  BlockPos offset=new BlockPos(currentSide.getDirectionVec());
  offset=new BlockPos(offset.getX() * radius,offset.getY() * radius,offset.getZ() * radius);
  AxisAlignedBB aabb=new AxisAlignedBB(this.pos,this.pos).expandXyz(radius).offset(offset);
  List<EntityItem> entityItems=world.getEntitiesWithinAABB(EntityItem.class,aabb);
  int index=0, max=3;
  for (  EntityItem entityItem : entityItems) {
    ItemStack stack=entityItem.getEntityItem();
    stack=inv.insert(stack,false,false);
    if (stack.isEmpty()) {
      entityItem.setDead();
    }
 else {
      entityItem.setEntityItemStack(stack);
    }
    if (index++ >= max) {
      break;
    }
  }
}",0.985665529010239
156399,"@Override public void update(){
  if (worldObj.isRemote) {
    return;
  }
  if (!(worldObj.getBlockState(pos).getBlock() instanceof BlockChute)) {
    return;
  }
  battery.tick(getWorld(),getPos());
  battery.addPower(1000);
  EnumFacing currentSide=worldObj.getBlockState(pos).getValue(BlockBCBase_Neptune.BLOCK_FACING_6);
  int target=100000;
  if (currentSide == EnumFacing.UP.getOpposite()) {
    progress+=1000;
  }
  progress+=battery.extractPower(0,target - progress);
  if (progress >= target) {
    progress=0;
    putItemsFromGround(currentSide);
  }
  putInInventories(currentSide);
}","@Override public void update(){
  if (world.isRemote) {
    return;
  }
  if (!(world.getBlockState(pos).getBlock() instanceof BlockChute)) {
    return;
  }
  battery.tick(getWorld(),getPos());
  battery.addPower(1000);
  EnumFacing currentSide=world.getBlockState(pos).getValue(BlockBCBase_Neptune.BLOCK_FACING_6);
  int target=100000;
  if (currentSide == EnumFacing.UP.getOpposite()) {
    progress+=1000;
  }
  progress+=battery.extractPower(0,target - progress);
  if (progress >= target) {
    progress=0;
    putItemsFromGround(currentSide);
  }
  putInInventories(currentSide);
}",0.9924050632911392
156400,"@Override public void update(){
  deltaManager.tick();
  if (worldObj.isRemote) {
    return;
  }
  battery.tick(getWorld(),getPos());
  if (mode != Mode.On) {
    return;
  }
  if (true) {
    sendNetworkUpdate(NET_LED_STATUS);
  }
  if (isComplete) {
    return;
  }
  initCurrentPos();
  if (hasTubeStopped()) {
    mine();
  }
}","@Override public void update(){
  deltaManager.tick();
  if (world.isRemote) {
    return;
  }
  battery.tick(getWorld(),getPos());
  if (mode != Mode.On) {
    return;
  }
  if (true) {
    sendNetworkUpdate(NET_LED_STATUS);
  }
  if (isComplete) {
    return;
  }
  initCurrentPos();
  if (hasTubeStopped()) {
    mine();
  }
}",0.9954614220877458
156401,"protected void setComplete(boolean isComplete){
  this.isComplete=isComplete;
  if (!worldObj.isRemote) {
    sendNetworkUpdate(NET_LED_STATUS);
  }
}","protected void setComplete(boolean isComplete){
  this.isComplete=isComplete;
  if (!world.isRemote) {
    sendNetworkUpdate(NET_LED_STATUS);
  }
}",0.98989898989899
156402,"@Mod.EventHandler public static void init(FMLInitializationEvent evt){
  BCLibProxy.getProxy().fmlInit();
  VanillaSchematics.fmlInit();
  VanillaListHandlers.fmlInit();
  VanillaPaintHandlers.fmlInit();
  VanillaRotationHandlers.fmlInit();
  ItemManager.fmlInit();
  BCLibRecipes.fmlInit();
  BCLibDatabase.fmlInit();
}","@Mod.EventHandler public static void init(FMLInitializationEvent evt){
  BCLibProxy.getProxy().fmlInit();
  VanillaListHandlers.fmlInit();
  VanillaPaintHandlers.fmlInit();
  VanillaRotationHandlers.fmlInit();
  ItemManager.fmlInit();
  BCLibRecipes.fmlInit();
  BCLibDatabase.fmlInit();
}",0.9490968801313628
156403,"public ArrayStackFilter(ItemStack... stacks){
  this.stacks=stacks;
}","public ArrayStackFilter(ItemStack... stacks){
  this.stacks=StackUtil.listOf(stacks);
}",0.8846153846153846
156404,"@Override public boolean matches(ItemStack stack){
  if (stacks.length == 0 || !hasFilter()) {
    return true;
  }
  for (  ItemStack s : stacks) {
    if (StackUtil.isMatchingItemOrList(s,stack)) {
      return true;
    }
  }
  return false;
}","@Override public boolean matches(ItemStack stack){
  if (stacks.size() == 0 || !hasFilter()) {
    return true;
  }
  for (  ItemStack s : stacks) {
    if (StackUtil.isMatchingItemOrList(s,stack)) {
      return true;
    }
  }
  return false;
}",0.975609756097561
156405,"public CraftingFilter(ItemStack... stacks){
  this.stacks=stacks;
}","public CraftingFilter(ItemStack... stacks){
  this.stacks=StackUtil.listOf(stacks);
}",0.881578947368421
156406,"@Override public boolean matches(ItemStack stack){
  if (stacks.length == 0 || !hasFilter()) {
    return true;
  }
  for (  ItemStack s : stacks) {
    if (StackUtil.isCraftingEquivalent(s,stack,true)) {
      return true;
    }
  }
  return false;
}","@Override public boolean matches(ItemStack stack){
  if (stacks.size() == 0 || !hasFilter()) {
    return true;
  }
  for (int i=0; i < stacks.size(); i++) {
    if (StackUtil.isCraftingEquivalent(stacks.get(i),stack,true)) {
      return true;
    }
  }
  return false;
}",0.8527724665391969
156407,"@Override public <T extends Enum<T>>T readEnumValue(Class<T> enumClass){
  boolean exists=readBoolean();
  if (!exists) {
    return null;
  }
  T[] enums=enumClass.getEnumConstants();
  int length=MathHelper.smallestEncompassingPowerOfTwo(enums.length);
  int index=readFixedBits(length);
  return enums[index];
}","@Override public <T extends Enum<T>>T readEnumValue(Class<T> enumClass){
  T[] enums=enumClass.getEnumConstants();
  int length=MathHelper.log2DeBruijn(enums.length);
  int index=readFixedBits(length);
  return enums[index];
}",0.7962962962962963
156408,"/** 
 * @param length
 * @return The read bits, compacted into an int.
 * @throws IllegalArgumentException if the length argument was less than 1 or greater than 32. 
 */
public int readFixedBits(int length) throws IllegalArgumentException {
  if (length <= 0) {
    throw new IllegalArgumentException(""String_Node_Str"" + length + ""String_Node_Str"");
  }
  if (length > 32) {
    throw new IllegalArgumentException(""String_Node_Str"" + length + ""String_Node_Str"");
  }
  readPartialBitsBegin();
  throw new AbstractMethodError(""String_Node_Str"");
}","/** 
 * @param length
 * @return The read bits, compacted into an int.
 * @throws IllegalArgumentException if the length argument was less than 1 or greater than 32. 
 */
public int readFixedBits(int length) throws IllegalArgumentException {
  if (length <= 0) {
    throw new IllegalArgumentException(""String_Node_Str"" + length + ""String_Node_Str"");
  }
  if (length > 32) {
    throw new IllegalArgumentException(""String_Node_Str"" + length + ""String_Node_Str"");
  }
  readPartialBitsBegin();
  int value=0;
  if (readPartialOffset > 0) {
    int avalibleBits=8 - readPartialOffset;
    if (avalibleBits >= length) {
      int mask=(1 << length) - 1;
      value=(readPartialCache >>> readPartialOffset) & mask;
      readPartialOffset+=length;
      return value;
    }
 else {
      int bitsRead=readPartialCache >>> readPartialOffset;
      value=bitsRead;
      readPartialCache=0;
      readPartialOffset=8;
      length-=avalibleBits;
    }
  }
  while (length >= 8) {
    readPartialBitsBegin();
    length-=8;
    value<<=8;
    value|=readPartialCache;
    readPartialOffset=8;
  }
  if (length > 0) {
    readPartialBitsBegin();
    int mask=(1 << length) - 1;
    value<<=length;
    value|=readPartialCache & mask;
    readPartialOffset=length;
  }
  return value;
}",0.547645125958379
156409,"/** 
 * Writes a fixed number of bits out to the stream.
 * @param value the value to write out.
 * @param length The number of bits to write.
 * @return This buffer.
 * @throws IllegalArgumentException if the length argument was less than 1 or greater than 32. 
 */
public PacketBufferBC writeFixedBits(int value,int length) throws IllegalArgumentException {
  if (length <= 0) {
    throw new IllegalArgumentException(""String_Node_Str"" + length + ""String_Node_Str"");
  }
  if (length > 32) {
    throw new IllegalArgumentException(""String_Node_Str"" + length + ""String_Node_Str"");
  }
  writePartialBitsBegin();
  if (writePartialOffset > 0) {
    int availbleBits=8 - writePartialOffset;
    if (availbleBits >= length) {
      int mask=(1 << length) - 1;
      int bitsToWrite=value & mask;
      writePartialCache|=bitsToWrite << writePartialOffset;
      setByte(writePartialIndex,writePartialCache);
      writePartialOffset+=length;
      return this;
    }
 else {
      int mask=(1 << availbleBits) - 1;
      int shiftBack=length - availbleBits;
      int bitsToWrite=(value >>> shiftBack) & mask;
      writePartialCache|=bitsToWrite << writePartialOffset;
      setByte(writePartialIndex,writePartialCache);
      writePartialCache=0;
      writePartialOffset=8;
      value>>>=shiftBack;
      length-=shiftBack;
    }
  }
  while (length >= 8) {
    writePartialBitsBegin();
    int byteToWrite=(value >>> (length - 8)) & 0xFFFF;
    setByte(writePartialIndex,byteToWrite);
    writePartialCache=0;
    writePartialOffset=8;
    value>>>=8;
    length-=8;
  }
  if (length > 0) {
    writePartialBitsBegin();
    int mask=(1 << length) - 1;
    writePartialCache=value & mask;
    setByte(writePartialIndex,writePartialCache);
    writePartialOffset=length;
  }
  return this;
}","/** 
 * Writes a fixed number of bits out to the stream.
 * @param value the value to write out.
 * @param length The number of bits to write.
 * @return This buffer.
 * @throws IllegalArgumentException if the length argument was less than 1 or greater than 32. 
 */
public PacketBufferBC writeFixedBits(int value,int length) throws IllegalArgumentException {
  if (length <= 0) {
    throw new IllegalArgumentException(""String_Node_Str"" + length + ""String_Node_Str"");
  }
  if (length > 32) {
    throw new IllegalArgumentException(""String_Node_Str"" + length + ""String_Node_Str"");
  }
  writePartialBitsBegin();
  if (writePartialOffset > 0) {
    int availbleBits=8 - writePartialOffset;
    if (availbleBits >= length) {
      int mask=(1 << length) - 1;
      int bitsToWrite=value & mask;
      writePartialCache|=bitsToWrite << writePartialOffset;
      setByte(writePartialIndex,writePartialCache);
      writePartialOffset+=length;
      return this;
    }
 else {
      int mask=(1 << availbleBits) - 1;
      int shift=length - availbleBits;
      int bitsToWrite=(value >>> shift) & mask;
      writePartialCache|=bitsToWrite << writePartialOffset;
      setByte(writePartialIndex,writePartialCache);
      writePartialCache=0;
      writePartialOffset=8;
      length-=availbleBits;
    }
  }
  while (length >= 8) {
    writePartialBitsBegin();
    int byteToWrite=(value >>> (length - 8)) & 0xFF;
    setByte(writePartialIndex,byteToWrite);
    writePartialCache=0;
    writePartialOffset=8;
    length-=8;
  }
  if (length > 0) {
    writePartialBitsBegin();
    int mask=(1 << length) - 1;
    writePartialCache=value & mask;
    setByte(writePartialIndex,writePartialCache);
    writePartialOffset=length;
  }
  return this;
}",0.9765205091937764
156410,"/** 
 * Writes a single boolean out to some position in this buffer. The boolean flag might be written to a new byte (increasing the writerIndex) or it might be added to an existing byte that was written with a previous call to this method. 
 */
@Override public PacketBufferBC writeBoolean(boolean flag){
  writePartialBitsBegin();
  writePartialCache|=(flag ? 1 : 0) << writePartialOffset;
  writePartialOffset++;
  setByte(writePartialIndex,writePartialCache);
  return this;
}","/** 
 * Writes a single boolean out to some position in this buffer. The boolean flag might be written to a new byte (increasing the writerIndex) or it might be added to an existing byte that was written with a previous call to this method. 
 */
@Override public PacketBufferBC writeBoolean(boolean flag){
  writePartialBitsBegin();
  int toWrite=(flag ? 1 : 0) << writePartialOffset;
  writePartialCache|=toWrite;
  writePartialOffset++;
  setByte(writePartialIndex,writePartialCache);
  return this;
}",0.9033570701932858
156411,"@Override public PacketBufferBC writeEnumValue(Enum<?> value){
  if (value == null) {
    writeBoolean(false);
  }
 else {
    writeBoolean(true);
    Enum<?>[] possible=value.getClass().getEnumConstants();
    writeFixedBits(value.ordinal(),MathHelper.smallestEncompassingPowerOfTwo(possible.length));
  }
  return this;
}","@Override public PacketBufferBC writeEnumValue(Enum<?> value){
  Enum<?>[] possible=value.getClass().getEnumConstants();
  writeFixedBits(value.ordinal(),MathHelper.log2DeBruijn(possible.length));
  return this;
}",0.7014925373134329
156412,"@Override public FluidStack tryExtractFluidAdv(int millibuckets,EnumFacing from,IFluidFilter filter){
  if (from == null || filter == null || millibuckets <= 0) {
    return null;
  }
  TileEntity connected=pipe.getConnectedTile(from);
  if (connected == null) {
    return null;
  }
  IFluidHandler fluidHandler=connected.getCapability(CapabilityFluidHandler.FLUID_HANDLER_CAPABILITY,from.getOpposite());
  if (!(fluidHandler instanceof IFluidHandlerAdv)) {
    return null;
  }
  IFluidHandlerAdv handlerAdv=(IFluidHandlerAdv)fluidHandler;
  if (currentFluid != null) {
    if (!filter.matches(currentFluid)) {
      return null;
    }
    final IFluidFilter existing=filter;
    filter=(fluid) -> currentFluid.isFluidEqual(fluid) && existing.matches(fluid);
  }
  Section section=sections.get(EnumPipePart.fromFacing(from));
  millibuckets=Math.min(millibuckets,section.getMaxFilled());
  if (millibuckets <= 0) {
    return null;
  }
  FluidStack toAdd=handlerAdv.drain(filter,millibuckets,true);
  if (toAdd == null) {
    return null;
  }
  if (currentFluid == null) {
    setFluid(toAdd);
  }
  int reallyFilled=section.fill(millibuckets,true);
  section.ticksInDirection=COOLDOWN_INPUT;
  if (reallyFilled != millibuckets) {
    BCLog.logger.warn(""String_Node_Str"" + reallyFilled + ""String_Node_Str""+ millibuckets);
  }
  return toAdd;
}","@Override public FluidStack tryExtractFluidAdv(int millibuckets,EnumFacing from,IFluidFilter filter){
  if (from == null || filter == null || millibuckets <= 0) {
    return null;
  }
  TileEntity connected=pipe.getConnectedTile(from);
  if (connected == null) {
    return null;
  }
  IFluidHandler fluidHandler=connected.getCapability(CapabilityFluidHandler.FLUID_HANDLER_CAPABILITY,from.getOpposite());
  if (!(fluidHandler instanceof IFluidHandlerAdv)) {
    return null;
  }
  IFluidHandlerAdv handlerAdv=(IFluidHandlerAdv)fluidHandler;
  if (currentFluid != null) {
    if (!filter.matches(currentFluid)) {
      return null;
    }
    final IFluidFilter existing=filter;
    filter=(fluid) -> currentFluid.isFluidEqual(fluid) && existing.matches(fluid);
  }
  Section section=sections.get(EnumPipePart.fromFacing(from));
  millibuckets=Math.min(millibuckets,section.getMaxFilled());
  if (millibuckets <= 0) {
    return null;
  }
  FluidStack toAdd=handlerAdv.drain(filter,millibuckets,true);
  if (toAdd == null || toAdd.amount <= 0) {
    return null;
  }
  millibuckets=toAdd.amount;
  if (currentFluid == null) {
    setFluid(toAdd);
  }
  int reallyFilled=section.fill(millibuckets,true);
  section.ticksInDirection=COOLDOWN_INPUT;
  if (reallyFilled != millibuckets) {
    BCLog.logger.warn(""String_Node_Str"" + reallyFilled + ""String_Node_Str""+ millibuckets);
  }
  return toAdd;
}",0.9817518248175182
156413,"@Override public FluidStack tryExtractFluid(int millibuckets,EnumFacing from,FluidStack filter){
  if (from == null) {
    return null;
  }
  TileEntity connected=pipe.getConnectedTile(from);
  if (connected == null) {
    return null;
  }
  IFluidHandler fluidHandler=connected.getCapability(CapabilityFluidHandler.FLUID_HANDLER_CAPABILITY,from.getOpposite());
  if (fluidHandler == null) {
    return null;
  }
  if (filter == null) {
    filter=this.currentFluid;
  }
 else   if (currentFluid != null && !filter.isFluidEqual(currentFluid)) {
    return null;
  }
  Section section=sections.get(EnumPipePart.fromFacing(from));
  millibuckets=Math.min(millibuckets,section.getMaxFilled());
  if (millibuckets <= 0) {
    return null;
  }
  FluidStack toAdd;
  if (filter == null) {
    toAdd=fluidHandler.drain(millibuckets,true);
  }
 else {
    filter=filter.copy();
    filter.amount=millibuckets;
    toAdd=fluidHandler.drain(filter,true);
  }
  if (toAdd == null) {
    return null;
  }
  if (currentFluid == null) {
    setFluid(toAdd);
  }
  int reallyFilled=section.fill(millibuckets,true);
  section.ticksInDirection=COOLDOWN_INPUT;
  if (reallyFilled != millibuckets) {
    BCLog.logger.warn(""String_Node_Str"" + reallyFilled + ""String_Node_Str""+ millibuckets);
  }
  return toAdd;
}","@Override public FluidStack tryExtractFluid(int millibuckets,EnumFacing from,FluidStack filter){
  if (from == null) {
    return null;
  }
  TileEntity connected=pipe.getConnectedTile(from);
  if (connected == null) {
    return null;
  }
  IFluidHandler fluidHandler=connected.getCapability(CapabilityFluidHandler.FLUID_HANDLER_CAPABILITY,from.getOpposite());
  if (fluidHandler == null) {
    return null;
  }
  if (filter == null) {
    filter=this.currentFluid;
  }
 else   if (currentFluid != null && !filter.isFluidEqual(currentFluid)) {
    return null;
  }
  Section section=sections.get(EnumPipePart.fromFacing(from));
  millibuckets=Math.min(millibuckets,section.getMaxFilled());
  if (millibuckets <= 0) {
    return null;
  }
  FluidStack toAdd;
  if (filter == null) {
    toAdd=fluidHandler.drain(millibuckets,true);
  }
 else {
    filter=filter.copy();
    filter.amount=millibuckets;
    toAdd=fluidHandler.drain(filter,true);
  }
  if (toAdd == null || toAdd.amount <= 0) {
    return null;
  }
  millibuckets=toAdd.amount;
  if (currentFluid == null) {
    setFluid(toAdd);
  }
  int reallyFilled=section.fill(millibuckets,true);
  section.ticksInDirection=COOLDOWN_INPUT;
  if (reallyFilled != millibuckets) {
    BCLog.logger.warn(""String_Node_Str"" + reallyFilled + ""String_Node_Str""+ millibuckets);
  }
  return toAdd;
}",0.98103186646434
156414,"public String[] tokenize(String src){
  List<String> tokens=new ArrayList<>();
  int index=0;
  while (index < src.length()) {
    final int contextStart=index;
    ITokenizingContext ctx=(relStart,relEnd) -> {
      int start=contextStart + relStart;
      int end=contextStart + relEnd;
      int stringEnd=src.length();
      String gotten=src.substring(start,Math.min(end,stringEnd));
      while (gotten.length() < end - start) {
        gotten+=END_OF_LINE;
      }
      return gotten;
    }
;
    boolean consumed=false;
    for (    ITokenizerGobbler token : tokenizers) {
      TokenResult res=token.tokenizePart(ctx);
      if (res == ResultSpecific.IGNORE)       continue;
      if (res == ResultSpecific.INVALID) {
        throw new InputMismatchException(""String_Node_Str"" + ctx.get(10) + ""String_Node_Str"");
      }
      if (res instanceof ResultInvalid) {
        throw new InputMismatchException(""String_Node_Str"" + ctx.get(((ResultInvalid)res).length).replace('\n','¬') + ""String_Node_Str"");
      }
      if (res instanceof ResultDiscard) {
        int discardLength=((ResultDiscard)res).length;
        index+=discardLength;
        consumed=true;
        break;
      }
      if (res instanceof ResultConsume) {
        int consumedLength=((ResultConsume)res).length;
        String at=ctx.get(consumedLength);
        tokens.add(at);
        index+=consumedLength;
        consumed=true;
        break;
      }
    }
    if (!consumed) {
      throw new IllegalStateException(""String_Node_Str"" + ctx.get(50));
    }
  }
  return tokens.toArray(new String[tokens.size()]);
}","public String[] tokenize(String src){
  List<String> tokens=new ArrayList<>();
  int index=0;
  while (index < src.length()) {
    final int contextStart=index;
    ITokenizingContext ctx=(relStart,relEnd) -> {
      int start=contextStart + relStart;
      int end=contextStart + relEnd;
      int stringEnd=src.length();
      String gotten=src.substring(start,Math.min(end,stringEnd));
      while (gotten.length() < end - start) {
        gotten+=END_OF_LINE;
      }
      return gotten;
    }
;
    boolean consumed=false;
    for (    ITokenizerGobbler token : tokenizers) {
      TokenResult res=token.tokenizePart(ctx);
      if (res == ResultSpecific.IGNORE)       continue;
      if (res == ResultSpecific.INVALID) {
        throw new InputMismatchException(""String_Node_Str"" + ctx.get(10).replace(""String_Node_Str"",""String_Node_Str"") + ""String_Node_Str"");
      }
      if (res instanceof ResultInvalid) {
        throw new InputMismatchException(""String_Node_Str"" + ctx.get(((ResultInvalid)res).length).replace(""String_Node_Str"",""String_Node_Str"") + ""String_Node_Str"");
      }
      if (res instanceof ResultDiscard) {
        int discardLength=((ResultDiscard)res).length;
        index+=discardLength;
        consumed=true;
        break;
      }
      if (res instanceof ResultConsume) {
        int consumedLength=((ResultConsume)res).length;
        String at=ctx.get(consumedLength);
        tokens.add(at);
        index+=consumedLength;
        consumed=true;
        break;
      }
    }
    if (!consumed) {
      throw new IllegalStateException(""String_Node_Str"" + ctx.get(50));
    }
  }
  return tokens.toArray(new String[tokens.size()]);
}",0.9736519607843136
156415,"@Override public boolean onBlockActivated(World world,BlockPos pos,IBlockState state,EntityPlayer player,EnumHand hand,ItemStack held,EnumFacing side,float hitX,float hitY,float hitZ){
  TilePipeHolder tile=getPipe(world,pos,false);
  if (tile == null) {
    return false;
  }
  RayTraceResult trace=rayTrace(world,pos,player);
  if (trace == null) {
    return false;
  }
  EnumFacing realSide=getPartSideHit(trace);
  if (realSide == null) {
    realSide=side;
  }
  PipePluggable existing=tile.getPluggable(realSide);
  if (existing != null) {
    return existing.onPluggableActivate(player,trace,hitX,hitY,hitZ);
  }
  EnumPipePart part=trace.subHit == 0 ? EnumPipePart.CENTER : EnumPipePart.fromFacing(realSide);
  Item item=held == null ? null : held.getItem();
  if (item instanceof IItemPluggable) {
    IItemPluggable itemPlug=(IItemPluggable)item;
    PipePluggable plug=itemPlug.onPlace(held,tile,realSide);
    if (plug == null) {
      return false;
    }
 else {
      tile.replacePluggable(realSide,plug);
      if (!player.capabilities.isCreativeMode) {
        held.stackSize--;
      }
      return true;
    }
  }
  if (tile.getPipe().behaviour.onPipeActivate(player,trace,hitX,hitY,hitZ,part)) {
    return true;
  }
  if (tile.getPipe().flow.onFlowActivate(player,trace,hitX,hitY,hitZ,part)) {
    return true;
  }
  return false;
}","@Override public boolean onBlockActivated(World world,BlockPos pos,IBlockState state,EntityPlayer player,EnumHand hand,ItemStack held,EnumFacing side,float hitX,float hitY,float hitZ){
  TilePipeHolder tile=getPipe(world,pos,false);
  if (tile == null) {
    return false;
  }
  RayTraceResult trace=rayTrace(world,pos,player);
  if (trace == null) {
    return false;
  }
  EnumFacing realSide=getPartSideHit(trace);
  if (realSide == null) {
    realSide=side;
  }
  if (trace.subHit > 6 && trace.subHit <= 12) {
    PipePluggable existing=tile.getPluggable(realSide);
    if (existing != null) {
      return existing.onPluggableActivate(player,trace,hitX,hitY,hitZ);
    }
  }
  EnumPipePart part=trace.subHit == 0 ? EnumPipePart.CENTER : EnumPipePart.fromFacing(realSide);
  Item item=held == null ? null : held.getItem();
  if (item instanceof IItemPluggable) {
    IItemPluggable itemPlug=(IItemPluggable)item;
    PipePluggable plug=itemPlug.onPlace(held,tile,realSide);
    if (plug == null) {
      return false;
    }
 else {
      tile.replacePluggable(realSide,plug);
      if (!player.capabilities.isCreativeMode) {
        held.stackSize--;
      }
      return true;
    }
  }
  if (tile.getPipe().behaviour.onPipeActivate(player,trace,hitX,hitY,hitZ,part)) {
    return true;
  }
  if (tile.getPipe().flow.onFlowActivate(player,trace,hitX,hitY,hitZ,part)) {
    return true;
  }
  return false;
}",0.9710773680404916
156416,"@Override public boolean isTriggerActive(TileEntity tile,EnumFacing side,IStatementContainer statementContainer,IStatementParameter[] parameters){
  IFluidHandler handler=tile.getCapability(CapabilityFluidHandler.FLUID_HANDLER_CAPABILITY,side.getOpposite());
  if (handler != null) {
    FluidStack searchedFluid=null;
    if (parameters != null && parameters.length >= 1 && parameters[0] != null && parameters[0].getItemStack() != null) {
      searchedFluid=FluidContainerRegistry.getFluidForFilledItem(parameters[0].getItemStack());
    }
    if (searchedFluid != null) {
      searchedFluid.amount=1;
    }
    FluidTankInfo[] liquids=handler.getTankInfo(side);
    if (liquids == null || liquids.length == 0) {
      return false;
    }
switch (state) {
case Empty:
      for (      FluidTankInfo c : liquids) {
        if (c != null && c.fluid != null && c.fluid.amount > 0 && (searchedFluid == null || searchedFluid.isFluidEqual(c.fluid))) {
          return false;
        }
      }
    return true;
case Contains:
  for (  FluidTankInfo c : liquids) {
    if (c != null && c.fluid != null && c.fluid.amount > 0 && (searchedFluid == null || searchedFluid.isFluidEqual(c.fluid))) {
      return true;
    }
  }
return false;
case Space:
if (searchedFluid == null) {
for (FluidTankInfo c : liquids) {
  if (c != null && (c.fluid == null || c.fluid.amount < c.capacity)) {
    return true;
  }
}
return false;
}
return handler.fill(side,searchedFluid,false) > 0;
case Full:
if (searchedFluid == null) {
for (FluidTankInfo c : liquids) {
if (c != null && (c.fluid == null || c.fluid.amount < c.capacity)) {
return false;
}
}
return true;
}
return handler.fill(side,searchedFluid,false) <= 0;
}
}
return false;
}","@Override public boolean isTriggerActive(TileEntity tile,EnumFacing side,IStatementContainer statementContainer,IStatementParameter[] parameters){
  IFluidHandler handler=tile.getCapability(CapabilityFluidHandler.FLUID_HANDLER_CAPABILITY,side.getOpposite());
  if (handler != null) {
    FluidStack searchedFluid=null;
    if (parameters != null && parameters.length >= 1 && parameters[0] != null && parameters[0].getItemStack() != null) {
      searchedFluid=FluidUtil.getFluidContained(parameters[0].getItemStack());
    }
    if (searchedFluid != null) {
      searchedFluid.amount=1;
    }
    IFluidTankProperties[] liquids=handler.getTankProperties();
    if (liquids == null || liquids.length == 0) {
      return false;
    }
switch (state) {
case Empty:
      FluidStack drained=handler.drain(1,false);
    return drained == null || drained.amount <= 0;
case Contains:
  for (  IFluidTankProperties c : liquids) {
    if (c == null)     continue;
    FluidStack fluid=c.getContents();
    if (fluid != null && fluid.amount > 0 && (searchedFluid == null || searchedFluid.isFluidEqual(fluid))) {
      return true;
    }
  }
return false;
case Space:
if (searchedFluid == null) {
for (IFluidTankProperties c : liquids) {
  if (c == null)   continue;
  FluidStack fluid=c.getContents();
  if ((fluid == null || fluid.amount < c.getCapacity())) {
    return true;
  }
}
return false;
}
return handler.fill(searchedFluid,false) > 0;
case Full:
if (searchedFluid == null) {
for (IFluidTankProperties c : liquids) {
if (c == null) continue;
FluidStack fluid=c.getContents();
if ((fluid == null || fluid.amount < c.getCapacity())) {
return false;
}
}
return true;
}
return handler.fill(searchedFluid,false) <= 0;
}
}
return false;
}",0.5736658932714617
156417,"public TriggerFluidContainerLevel(TriggerType type){
  super(""String_Node_Str"" + type.name().toLowerCase(Locale.ROOT),""String_Node_Str"" + type.name().toLowerCase(Locale.ROOT));
  setBuildCraftLocation(""String_Node_Str"",""String_Node_Str"" + type.name().toLowerCase(Locale.ROOT));
  this.type=type;
}","public TriggerFluidContainerLevel(TriggerType type){
  super(""String_Node_Str"" + type.name().toLowerCase(Locale.ROOT),""String_Node_Str"" + type.name().toLowerCase(Locale.ROOT));
  this.type=type;
}",0.795131845841785
156418,"@Override public boolean isTriggerActive(TileEntity tile,EnumFacing side,IStatementContainer statementContainer,IStatementParameter[] parameters){
  if (tile instanceof IFluidHandler) {
    IFluidHandler container=(IFluidHandler)tile;
    FluidStack searchedFluid=null;
    if (parameters != null && parameters.length >= 1 && parameters[0] != null && parameters[0].getItemStack() != null) {
      searchedFluid=FluidContainerRegistry.getFluidForFilledItem(parameters[0].getItemStack());
    }
    if (searchedFluid != null) {
      searchedFluid.amount=1;
    }
    FluidTankInfo[] liquids=container.getTankInfo(side);
    if (liquids == null || liquids.length == 0) {
      return false;
    }
    for (    FluidTankInfo c : liquids) {
      if (c == null) {
        continue;
      }
      if (c.fluid == null) {
        if (searchedFluid == null) {
          return true;
        }
        return container.fill(side,searchedFluid,false) > 0;
      }
      if (searchedFluid == null || searchedFluid.isFluidEqual(c.fluid)) {
        float percentage=(float)c.fluid.amount / (float)c.capacity;
        return percentage < type.level;
      }
    }
  }
  return false;
}","@Override public boolean isTriggerActive(TileEntity tile,EnumFacing side,IStatementContainer statementContainer,IStatementParameter[] parameters){
  IFluidHandler handler=tile.getCapability(CapabilityFluidHandler.FLUID_HANDLER_CAPABILITY,side.getOpposite());
  if (handler == null) {
    return false;
  }
  FluidStack searchedFluid=null;
  if (parameters != null && parameters.length >= 1 && parameters[0] != null && parameters[0].getItemStack() != null) {
    searchedFluid=FluidUtil.getFluidContained(parameters[0].getItemStack());
    if (searchedFluid != null) {
      searchedFluid.amount=1;
    }
  }
  IFluidTankProperties[] liquids=handler.getTankProperties();
  if (liquids == null || liquids.length == 0) {
    return false;
  }
  for (  IFluidTankProperties c : liquids) {
    if (c == null) {
      continue;
    }
    FluidStack fluid=c.getContents();
    if (fluid == null) {
      if (searchedFluid == null) {
        return true;
      }
      return handler.fill(searchedFluid,false) > 0;
    }
    if (searchedFluid == null || searchedFluid.isFluidEqual(fluid)) {
      float percentage=fluid.amount / (float)c.getCapacity();
      return percentage < type.level;
    }
  }
  return false;
}",0.6585468290634188
156419,"@Override public void handleUpdateTag(NBTTagCompound tag){
  super.readFromNBT(tag);
  byte[] bytes=tag.getByteArray(""String_Node_Str"");
  ByteBuf buf=Unpooled.copiedBuffer(bytes);
  try {
    int id=buf.readUnsignedShort();
    readPayload(id,new PacketBuffer(buf),worldObj.isRemote ? Side.CLIENT : Side.SERVER,null);
  }
 catch (  IOException e) {
    throw new RuntimeException(e);
  }
}","@Override public void handleUpdateTag(NBTTagCompound tag){
  super.readFromNBT(tag);
  byte[] bytes=tag.getByteArray(""String_Node_Str"");
  ByteBuf buf=Unpooled.copiedBuffer(bytes);
  try {
    int id=buf.readUnsignedShort();
    readPayload(id,new PacketBuffer(buf),worldObj.isRemote ? Side.CLIENT : Side.SERVER,null);
    MessageUtil.ensureEmpty(buf,worldObj.isRemote,getClass().getSimpleName());
  }
 catch (  IOException e) {
    throw new RuntimeException(e);
  }
}",0.9080325960419092
156420,"/** 
 * Tells MC to redraw this block. Note that (in 1.9) this ALSO sends a description packet. 
 */
public final void redrawBlock(){
  if (hasWorldObj()) {
    IBlockState state=worldObj.getBlockState(getPos());
    worldObj.notifyBlockUpdate(pos,state,state,0);
  }
}","/** 
 * Tells MC to redraw this block. Note that (in 1.9) this ALSO sends a description packet. 
 */
public final void redrawBlock(){
  if (hasWorldObj()) {
    IBlockState state=worldObj.getBlockState(pos);
    worldObj.notifyBlockUpdate(pos,state,state,0);
  }
}",0.9793621013133208
156421,"@Override public final NBTTagCompound getUpdateTag(){
  MessageUpdateTile message=createNetworkUpdate(NET_RENDER_DATA);
  ByteBuf buf=Unpooled.buffer();
  message.toBytes(buf);
  byte[] bytes=new byte[buf.readableBytes()];
  buf.readBytes(bytes);
  NBTTagCompound nbt=super.getUpdateTag();
  nbt.setByteArray(""String_Node_Str"",bytes);
  return nbt;
}","@Override public final NBTTagCompound getUpdateTag(){
  ByteBuf buf=Unpooled.buffer();
  buf.writeShort(NET_RENDER_DATA);
  writePayload(NET_RENDER_DATA,new PacketBuffer(buf),worldObj.isRemote ? Side.CLIENT : Side.SERVER);
  byte[] bytes=new byte[buf.readableBytes()];
  buf.readBytes(bytes);
  NBTTagCompound nbt=super.getUpdateTag();
  nbt.setByteArray(""String_Node_Str"",bytes);
  return nbt;
}",0.7131367292225201
156422,"@SuppressWarnings(""String_Node_Str"") @Override protected void drawForegroundLayer(){
  camY+=scaleSpeed;
  scaleSpeed*=0.7F;
{
    ChunkPos chunkPos=new ChunkPos((int)positionX >> 4,(int)positionZ >> 4);
    ZonePlannerMapChunk zonePlannerMapChunk=ZonePlannerMapDataClient.instance.getLoadedChunk(new ZonePlannerMapChunkKey(chunkPos,Minecraft.getMinecraft().theWorld.provider.getDimension(),getLevel()));
    BlockPos pos=null;
    if (zonePlannerMapChunk != null) {
      pos=zonePlannerMapChunk.data.keySet().stream().filter(blockPos -> blockPos.getX() == (int)positionX - chunkPos.getXStart() && blockPos.getZ() == (int)positionZ - chunkPos.getZStart()).findAny().orElse(null);
    }
    if (pos != null && pos.getY() + 10 > camY) {
      camY=Math.max(camY,pos.getY() + 10);
    }
  }
  int x=guiLeft;
  int y=guiTop;
  if (lastSelected != null) {
    String text=""String_Node_Str"" + lastSelected.getX() + ""String_Node_Str""+ lastSelected.getY()+ ""String_Node_Str""+ lastSelected.getZ();
    fontRendererObj.drawString(text,x + 130,y + 130,0x404040);
  }
  int offsetX=8;
  int offsetY=9;
  int sizeX=213;
  int sizeY=100;
  GL11.glClear(GL11.GL_DEPTH_BUFFER_BIT);
  GL11.glPushMatrix();
  GL11.glMatrixMode(GL11.GL_PROJECTION);
  GL11.glPushMatrix();
  GL11.glLoadIdentity();
  ScaledResolution scaledResolution=new ScaledResolution(Minecraft.getMinecraft());
  GL11.glViewport((x + offsetX) * scaledResolution.getScaleFactor(),Minecraft.getMinecraft().displayHeight - (sizeY + y + offsetY) * scaledResolution.getScaleFactor(),sizeX * scaledResolution.getScaleFactor(),sizeY * scaledResolution.getScaleFactor());
  GL11.glScalef(scaledResolution.getScaleFactor(),scaledResolution.getScaleFactor(),1);
  GLU.gluPerspective(70.0F,(float)sizeX / sizeY,1F,1000.0F);
  GL11.glMatrixMode(GL11.GL_MODELVIEW);
  GL11.glLoadIdentity();
  RenderHelper.enableStandardItemLighting();
  GL11.glEnable(GL12.GL_RESCALE_NORMAL);
  GL11.glRotatef(90,1,0,0);
  GL11.glPushMatrix();
  GL11.glTranslatef(-positionX,-camY,-positionZ);
  GL11.glDisable(GL11.GL_BLEND);
  GL11.glDisable(GL11.GL_ALPHA_TEST);
  Minecraft.getMinecraft().getRenderManager().renderEngine.bindTexture(new ResourceLocation(""String_Node_Str"",""String_Node_Str""));
  int chunkBaseX=(int)positionX >> 4;
  int chunkBaseZ=(int)positionZ >> 4;
  int radius=8;
  for (int chunkX=chunkBaseX - radius; chunkX < chunkBaseX + radius; chunkX++) {
    for (int chunkZ=chunkBaseZ - radius; chunkZ < chunkBaseZ + radius; chunkZ++) {
      GL11.glCallList(ZonePlannerMapRenderer.instance.drawChunk(new ZonePlannerMapChunkKey(new ChunkPos(chunkX,chunkZ),container.tile.getWorld().provider.getDimension(),getLevel())));
    }
  }
  BlockPos found=null;
  int foundColor=0;
  if (Mouse.getX() / scaledResolution.getScaleFactor() > x + offsetX && Mouse.getX() / scaledResolution.getScaleFactor() < x + offsetX + sizeX && scaledResolution.getScaledHeight() - Mouse.getY() / scaledResolution.getScaleFactor() > y + offsetY && scaledResolution.getScaledHeight() - Mouse.getY() / scaledResolution.getScaleFactor() < y + offsetY + sizeY) {
    FloatBuffer projectionBuffer=BufferUtils.createFloatBuffer(16);
    FloatBuffer modelViewBuffer=BufferUtils.createFloatBuffer(16);
    IntBuffer viewportBuffer=BufferUtils.createIntBuffer(16);
    GL11.glGetFloat(GL11.GL_PROJECTION_MATRIX,projectionBuffer);
    GL11.glGetFloat(GL11.GL_MODELVIEW_MATRIX,modelViewBuffer);
    GL11.glGetInteger(GL11.GL_VIEWPORT,viewportBuffer);
    FloatBuffer positionNearBuffer=BufferUtils.createFloatBuffer(3);
    FloatBuffer positionFarBuffer=BufferUtils.createFloatBuffer(3);
    GLU.gluUnProject(Mouse.getX(),Mouse.getY(),0f,modelViewBuffer,projectionBuffer,viewportBuffer,positionNearBuffer);
    GLU.gluUnProject(Mouse.getX(),Mouse.getY(),1f,modelViewBuffer,projectionBuffer,viewportBuffer,positionFarBuffer);
    Vector3d rayStart=new Vector3d(positionNearBuffer.get(0),positionNearBuffer.get(1),positionNearBuffer.get(2));
    Vector3d rayPosition=new Vector3d(rayStart);
    Vector3d rayDirection=new Vector3d(positionFarBuffer.get(0),positionFarBuffer.get(1),positionFarBuffer.get(2));
    rayDirection.sub(rayStart);
    rayDirection.normalize();
    rayDirection.scale(0.1);
    for (int i=0; i < 10000; i++) {
      int chunkX=(int)rayPosition.getX() >> 4;
      int chunkZ=(int)rayPosition.getZ() >> 4;
      ZonePlannerMapChunk zonePlannerMapChunk=ZonePlannerMapDataClient.instance.getLoadedChunk(new ZonePlannerMapChunkKey(new ChunkPos(chunkX,chunkZ),Minecraft.getMinecraft().theWorld.provider.getDimension(),getLevel()));
      if (zonePlannerMapChunk != null) {
        BlockPos pos=new BlockPos(Math.round(rayPosition.getX()) - chunkX * 16,Math.round(rayPosition.getY()),Math.round(rayPosition.getZ()) - chunkZ * 16);
        if (zonePlannerMapChunk.data.containsKey(pos)) {
          found=new BlockPos(pos.getX() + chunkX * 16,pos.getY(),pos.getZ() + chunkZ * 16);
          foundColor=zonePlannerMapChunk.data.get(pos);
          break;
        }
      }
 else {
        break;
      }
      rayPosition.add(rayDirection);
    }
  }
  if (found != null) {
    GL11.glDisable(GL11.GL_DEPTH_TEST);
    GL11.glDisable(GL11.GL_LIGHTING);
    GL11.glEnable(GL11.GL_BLEND);
    GL11.glPolygonMode(GL11.GL_FRONT_AND_BACK,GL11.GL_LINE);
    GL11.glBegin(GL11.GL_QUADS);
    int r=(foundColor >> 16) & 0xFF;
    int g=(foundColor >> 8) & 0xFF;
    int b=(foundColor >> 0) & 0xFF;
    int a=(foundColor >> 24) & 0xFF;
    GL11.glColor4d(r / (double)0xFF + 0.3,g / (double)0xFF + 0.3,b / (double)0xFF + 0.3,0.7);
    ZonePlannerMapRenderer.instance.drawBlockCuboid(found.getX(),found.getY(),found.getZ());
    GL11.glEnd();
    GL11.glPolygonMode(GL11.GL_FRONT_AND_BACK,GL11.GL_FILL);
    GL11.glDisable(GL11.GL_BLEND);
    GL11.glEnable(GL11.GL_LIGHTING);
    GL11.glEnable(GL11.GL_DEPTH_TEST);
  }
  GL11.glDisable(GL11.GL_TEXTURE_2D);
  GL11.glDisable(GL11.GL_LIGHTING);
  GL11.glEnable(GL11.GL_BLEND);
  GL11.glBegin(GL11.GL_QUADS);
  for (int i=0; i < container.tile.layers.length; i++) {
    if (getPaintbrushBrush() != null && getPaintbrushBrush().colour.getMetadata() != i) {
      continue;
    }
    ZonePlan layer=container.tile.layers[i];
    if (getPaintbrushBrush() != null && getPaintbrushBrush().colour.getMetadata() == i && bufferLayer != null) {
      layer=bufferLayer;
    }
    if (!layer.getChunkPoses().isEmpty()) {
      for (int chunkX=chunkBaseX - radius; chunkX < chunkBaseX + radius; chunkX++) {
        for (int chunkZ=chunkBaseZ - radius; chunkZ < chunkBaseZ + radius; chunkZ++) {
          ChunkPos chunkPos=new ChunkPos(chunkX,chunkZ);
          if (layer.hasChunk(chunkPos)) {
            for (int blockX=chunkPos.getXStart(); blockX <= chunkPos.getXEnd(); blockX++) {
              for (int blockZ=chunkPos.getZStart(); blockZ <= chunkPos.getZEnd(); blockZ++) {
                if (layer.get(blockX,blockZ)) {
                  int height=256;
                  ZonePlannerMapChunk zonePlannerMapChunk=ZonePlannerMapDataClient.instance.getLoadedChunk(new ZonePlannerMapChunkKey(chunkPos,Minecraft.getMinecraft().theWorld.provider.getDimension(),getLevel()));
                  if (zonePlannerMapChunk != null) {
                    int finalBlockX=blockX;
                    int finalBlockZ=blockZ;
                    BlockPos pos=zonePlannerMapChunk.data.keySet().stream().filter(blockPos -> {
                      return blockPos.getX() == finalBlockX - chunkPos.chunkXPos * 16 && blockPos.getZ() == finalBlockZ - chunkPos.chunkZPos * 16;
                    }
).findFirst().orElse(null);
                    if (pos != null) {
                      height=pos.getY();
                    }
                  }
                  int color=EnumDyeColor.byMetadata(i).getMapColor().colorValue;
                  int r=(color >> 16) & 0xFF;
                  int g=(color >> 8) & 0xFF;
                  int b=(color >> 0) & 0xFF;
                  int a=(color >> 24) & 0xFF;
                  GL11.glColor4d(r / (double)0xFF,g / (double)0xFF,b / (double)0xFF,0.3);
                  ZonePlannerMapRenderer.instance.drawBlockCuboid(blockX,height + 0.1,blockZ,height,0.6);
                }
              }
            }
          }
        }
      }
    }
  }
  GL11.glEnd();
  GL11.glDisable(GL11.GL_BLEND);
  GL11.glEnable(GL11.GL_LIGHTING);
  GL11.glEnable(GL11.GL_TEXTURE_2D);
  lastSelected=found;
  GL11.glPopMatrix();
  GL11.glDisable(GL12.GL_RESCALE_NORMAL);
  GL11.glMatrixMode(GL11.GL_PROJECTION);
  GL11.glViewport(0,0,Minecraft.getMinecraft().displayWidth,Minecraft.getMinecraft().displayHeight);
  GL11.glPopMatrix();
  GL11.glMatrixMode(GL11.GL_MODELVIEW);
  GL11.glPopMatrix();
  RenderHelper.disableStandardItemLighting();
  GL11.glColor4d(1,1,1,1);
  GL11.glDisable(GL11.GL_BLEND);
}","@SuppressWarnings(""String_Node_Str"") @Override protected void drawForegroundLayer(){
  camY+=scaleSpeed;
  scaleSpeed*=0.7F;
{
    ChunkPos chunkPos=new ChunkPos((int)positionX >> 4,(int)positionZ >> 4);
    ZonePlannerMapChunk zonePlannerMapChunk=ZonePlannerMapDataClient.instance.getLoadedChunk(new ZonePlannerMapChunkKey(chunkPos,Minecraft.getMinecraft().theWorld.provider.getDimension(),getLevel()));
    BlockPos pos=null;
    if (zonePlannerMapChunk != null) {
      pos=zonePlannerMapChunk.data.keySet().stream().filter(blockPos -> blockPos.getX() == (int)positionX - chunkPos.getXStart() && blockPos.getZ() == (int)positionZ - chunkPos.getZStart()).findAny().orElse(null);
    }
    if (pos != null && pos.getY() + 10 > camY) {
      camY=Math.max(camY,pos.getY() + 10);
    }
  }
  int x=guiLeft;
  int y=guiTop;
  if (lastSelected != null) {
    String text=""String_Node_Str"" + lastSelected.getX() + ""String_Node_Str""+ lastSelected.getY()+ ""String_Node_Str""+ lastSelected.getZ();
    fontRendererObj.drawString(text,x + 130,y + 130,0x404040);
  }
  int offsetX=8;
  int offsetY=9;
  int sizeX=213;
  int sizeY=100;
  GL11.glClear(GL11.GL_DEPTH_BUFFER_BIT);
  GL11.glPushMatrix();
  GL11.glMatrixMode(GL11.GL_PROJECTION);
  GL11.glPushMatrix();
  GL11.glLoadIdentity();
  ScaledResolution scaledResolution=new ScaledResolution(Minecraft.getMinecraft());
  GL11.glViewport((x + offsetX) * scaledResolution.getScaleFactor(),Minecraft.getMinecraft().displayHeight - (sizeY + y + offsetY) * scaledResolution.getScaleFactor(),sizeX * scaledResolution.getScaleFactor(),sizeY * scaledResolution.getScaleFactor());
  GL11.glScalef(scaledResolution.getScaleFactor(),scaledResolution.getScaleFactor(),1);
  GLU.gluPerspective(70.0F,(float)sizeX / sizeY,1F,1000.0F);
  GL11.glMatrixMode(GL11.GL_MODELVIEW);
  GL11.glLoadIdentity();
  RenderHelper.enableStandardItemLighting();
  GlStateManager.enableRescaleNormal();
  GL11.glRotatef(90,1,0,0);
  GL11.glPushMatrix();
  GL11.glTranslatef(-positionX,-camY,-positionZ);
  GlStateManager.disableBlend();
  GlStateManager.disableAlpha();
  Minecraft.getMinecraft().getRenderManager().renderEngine.bindTexture(new ResourceLocation(""String_Node_Str"",""String_Node_Str""));
  int chunkBaseX=(int)positionX >> 4;
  int chunkBaseZ=(int)positionZ >> 4;
  int radius=8;
  for (int chunkX=chunkBaseX - radius; chunkX < chunkBaseX + radius; chunkX++) {
    for (int chunkZ=chunkBaseZ - radius; chunkZ < chunkBaseZ + radius; chunkZ++) {
      GL11.glCallList(ZonePlannerMapRenderer.instance.drawChunk(new ZonePlannerMapChunkKey(new ChunkPos(chunkX,chunkZ),container.tile.getWorld().provider.getDimension(),getLevel())));
    }
  }
  BlockPos found=null;
  int foundColor=0;
  if (Mouse.getX() / scaledResolution.getScaleFactor() > x + offsetX && Mouse.getX() / scaledResolution.getScaleFactor() < x + offsetX + sizeX && scaledResolution.getScaledHeight() - Mouse.getY() / scaledResolution.getScaleFactor() > y + offsetY && scaledResolution.getScaledHeight() - Mouse.getY() / scaledResolution.getScaleFactor() < y + offsetY + sizeY) {
    FloatBuffer projectionBuffer=BufferUtils.createFloatBuffer(16);
    FloatBuffer modelViewBuffer=BufferUtils.createFloatBuffer(16);
    IntBuffer viewportBuffer=BufferUtils.createIntBuffer(16);
    GL11.glGetFloat(GL11.GL_PROJECTION_MATRIX,projectionBuffer);
    GL11.glGetFloat(GL11.GL_MODELVIEW_MATRIX,modelViewBuffer);
    GL11.glGetInteger(GL11.GL_VIEWPORT,viewportBuffer);
    FloatBuffer positionNearBuffer=BufferUtils.createFloatBuffer(3);
    FloatBuffer positionFarBuffer=BufferUtils.createFloatBuffer(3);
    GLU.gluUnProject(Mouse.getX(),Mouse.getY(),0f,modelViewBuffer,projectionBuffer,viewportBuffer,positionNearBuffer);
    GLU.gluUnProject(Mouse.getX(),Mouse.getY(),1f,modelViewBuffer,projectionBuffer,viewportBuffer,positionFarBuffer);
    Vector3d rayStart=new Vector3d(positionNearBuffer.get(0),positionNearBuffer.get(1),positionNearBuffer.get(2));
    Vector3d rayPosition=new Vector3d(rayStart);
    Vector3d rayDirection=new Vector3d(positionFarBuffer.get(0),positionFarBuffer.get(1),positionFarBuffer.get(2));
    rayDirection.sub(rayStart);
    rayDirection.normalize();
    rayDirection.scale(0.1);
    for (int i=0; i < 10000; i++) {
      int chunkX=(int)rayPosition.getX() >> 4;
      int chunkZ=(int)rayPosition.getZ() >> 4;
      ZonePlannerMapChunk zonePlannerMapChunk=ZonePlannerMapDataClient.instance.getLoadedChunk(new ZonePlannerMapChunkKey(new ChunkPos(chunkX,chunkZ),Minecraft.getMinecraft().theWorld.provider.getDimension(),getLevel()));
      if (zonePlannerMapChunk != null) {
        BlockPos pos=new BlockPos(Math.round(rayPosition.getX()) - chunkX * 16,Math.round(rayPosition.getY()),Math.round(rayPosition.getZ()) - chunkZ * 16);
        if (zonePlannerMapChunk.data.containsKey(pos)) {
          found=new BlockPos(pos.getX() + chunkX * 16,pos.getY(),pos.getZ() + chunkZ * 16);
          foundColor=zonePlannerMapChunk.data.get(pos);
          break;
        }
      }
 else {
        break;
      }
      rayPosition.add(rayDirection);
    }
  }
  if (found != null) {
    GlStateManager.disableDepth();
    GlStateManager.disableLighting();
    GlStateManager.enableBlend();
    GL11.glPolygonMode(GL11.GL_FRONT_AND_BACK,GL11.GL_LINE);
    GL11.glBegin(GL11.GL_QUADS);
    int r=(foundColor >> 16) & 0xFF;
    int g=(foundColor >> 8) & 0xFF;
    int b=(foundColor >> 0) & 0xFF;
    int a=(foundColor >> 24) & 0xFF;
    GL11.glColor4d(r / (double)0xFF + 0.3,g / (double)0xFF + 0.3,b / (double)0xFF + 0.3,0.7);
    ZonePlannerMapRenderer.instance.drawBlockCuboid(found.getX(),found.getY(),found.getZ());
    GL11.glEnd();
    GL11.glPolygonMode(GL11.GL_FRONT_AND_BACK,GL11.GL_FILL);
    GlStateManager.disableBlend();
    GlStateManager.enableLighting();
    GlStateManager.enableLighting();
    GlStateManager.enableDepth();
  }
  GlStateManager.disableTexture2D();
  GlStateManager.disableLighting();
  GlStateManager.enableBlend();
  GL11.glBegin(GL11.GL_QUADS);
  for (int i=0; i < container.tile.layers.length; i++) {
    if (getPaintbrushBrush() != null && getPaintbrushBrush().colour.getMetadata() != i) {
      continue;
    }
    ZonePlan layer=container.tile.layers[i];
    if (getPaintbrushBrush() != null && getPaintbrushBrush().colour.getMetadata() == i && bufferLayer != null) {
      layer=bufferLayer;
    }
    if (!layer.getChunkPoses().isEmpty()) {
      for (int chunkX=chunkBaseX - radius; chunkX < chunkBaseX + radius; chunkX++) {
        for (int chunkZ=chunkBaseZ - radius; chunkZ < chunkBaseZ + radius; chunkZ++) {
          ChunkPos chunkPos=new ChunkPos(chunkX,chunkZ);
          if (layer.hasChunk(chunkPos)) {
            for (int blockX=chunkPos.getXStart(); blockX <= chunkPos.getXEnd(); blockX++) {
              for (int blockZ=chunkPos.getZStart(); blockZ <= chunkPos.getZEnd(); blockZ++) {
                if (layer.get(blockX,blockZ)) {
                  int height=256;
                  ZonePlannerMapChunk zonePlannerMapChunk=ZonePlannerMapDataClient.instance.getLoadedChunk(new ZonePlannerMapChunkKey(chunkPos,Minecraft.getMinecraft().theWorld.provider.getDimension(),getLevel()));
                  if (zonePlannerMapChunk != null) {
                    int finalBlockX=blockX;
                    int finalBlockZ=blockZ;
                    BlockPos pos=zonePlannerMapChunk.data.keySet().stream().filter(blockPos -> {
                      return blockPos.getX() == finalBlockX - chunkPos.chunkXPos * 16 && blockPos.getZ() == finalBlockZ - chunkPos.chunkZPos * 16;
                    }
).findFirst().orElse(null);
                    if (pos != null) {
                      height=pos.getY();
                    }
                  }
                  int color=EnumDyeColor.byMetadata(i).getMapColor().colorValue;
                  int r=(color >> 16) & 0xFF;
                  int g=(color >> 8) & 0xFF;
                  int b=(color >> 0) & 0xFF;
                  int a=(color >> 24) & 0xFF;
                  GL11.glColor4d(r / (double)0xFF,g / (double)0xFF,b / (double)0xFF,0.3);
                  ZonePlannerMapRenderer.instance.drawBlockCuboid(blockX,height + 0.1,blockZ,height,0.6);
                }
              }
            }
          }
        }
      }
    }
  }
  GL11.glEnd();
  GlStateManager.disableBlend();
  GlStateManager.disableLighting();
  GlStateManager.enableTexture2D();
  lastSelected=found;
  GL11.glPopMatrix();
  GlStateManager.disableRescaleNormal();
  GL11.glMatrixMode(GL11.GL_PROJECTION);
  GL11.glViewport(0,0,Minecraft.getMinecraft().displayWidth,Minecraft.getMinecraft().displayHeight);
  GL11.glPopMatrix();
  GL11.glMatrixMode(GL11.GL_MODELVIEW);
  GL11.glPopMatrix();
  RenderHelper.disableStandardItemLighting();
  GL11.glColor4d(1,1,1,1);
  GlStateManager.disableBlend();
}",0.9437189941267036
156423,"@SideOnly(Side.CLIENT) public final void handleMessageMain(MessageMarker message){
  if (handleMessage(message)) {
    return;
  }
  if (!message.connection) {
    List<BlockPos> positions=message.positions;
    if (message.add) {
      for (      BlockPos p : positions) {
        removeMarker(p);
      }
    }
 else {
      for (      BlockPos p : positions) {
        loadMarker(p,null);
      }
    }
  }
}","@SideOnly(Side.CLIENT) public final void handleMessageMain(MessageMarker message){
  if (handleMessage(message)) {
    return;
  }
  if (!message.connection) {
    List<BlockPos> positions=message.positions;
    if (message.add) {
      for (      BlockPos p : positions) {
        loadMarker(p,null);
      }
    }
 else {
      for (      BlockPos p : positions) {
        removeMarker(p);
      }
    }
  }
}",0.7639902676399026
156424,"@SubscribeEvent public void itemTooltipEvent(ItemTooltipEvent event){
  if (event.itemStack != null && event.entityPlayer != null && event.entityPlayer.openContainer != null && event.entityPlayer.openContainer instanceof ContainerBuilder) {
    ContainerBuilder containerBuilder=(ContainerBuilder)event.entityPlayer.openContainer;
    TileBuilder builder=containerBuilder.getBuilder();
    if (builder != null) {
      List<RequirementItemStack> needs=builder.getNeededItems();
      if (needs != null) {
        for (        RequirementItemStack ris : needs) {
          if (ris.stack == event.itemStack) {
            event.toolTip.add(EnumChatFormatting.GRAY + ""String_Node_Str"" + EnumChatFormatting.ITALIC+ ""String_Node_Str""+ ris.size);
          }
        }
      }
    }
  }
}","@SubscribeEvent public void itemTooltipEvent(ItemTooltipEvent event){
  EntityPlayer player=event.getEntityPlayer();
  if (event.getItemStack() != null && player != null && player.openContainer != null && player.openContainer instanceof ContainerBuilder) {
    ContainerBuilder containerBuilder=(ContainerBuilder)player.openContainer;
    TileBuilder builder=containerBuilder.getBuilder();
    if (builder != null) {
      List<RequirementItemStack> needs=builder.getNeededItems();
      if (needs != null) {
        for (        RequirementItemStack ris : needs) {
          if (ris.stack == event.getItemStack()) {
            event.getToolTip().add(TextFormatting.GRAY + ""String_Node_Str"" + TextFormatting.ITALIC+ ""String_Node_Str""+ ris.size);
          }
        }
      }
    }
  }
}",0.8955414012738854
156425,"@SubscribeEvent public void handleWorldUnload(WorldEvent.Unload event){
  if (FMLCommonHandler.instance().getEffectiveSide() == Side.SERVER) {
    TilePathMarker.clearAvailableMarkersList(event.world);
  }
}","@SubscribeEvent public void handleWorldUnload(WorldEvent.Unload event){
  if (FMLCommonHandler.instance().getEffectiveSide() == Side.SERVER) {
    TilePathMarker.clearAvailableMarkersList(event.getWorld());
  }
}",0.964200477326969
156426,"@SubscribeEvent public void handleWorldLoad(WorldEvent.Load event){
  if (FMLCommonHandler.instance().getEffectiveSide() == Side.SERVER) {
    TilePathMarker.clearAvailableMarkersList(event.world);
  }
}","@SubscribeEvent public void handleWorldLoad(WorldEvent.Load event){
  if (FMLCommonHandler.instance().getEffectiveSide() == Side.SERVER) {
    TilePathMarker.clearAvailableMarkersList(event.getWorld());
  }
}",0.9635036496350364
156427,"public static void start(){
  Iterator<Block> i=Block.blockRegistry.iterator();
  while (i.hasNext()) {
    Block block=i.next();
    if (block == null || block == Blocks.air) {
      continue;
    }
    for (    Object obj : block.getBlockState().getValidStates()) {
      IBlockState state=(IBlockState)obj;
      if (!SchematicRegistry.INSTANCE.isSupported(state)) {
        try {
          if (block.hasTileEntity(state)) {
            SchematicRegistry.INSTANCE.registerSchematicBlock(state,SchematicTileCreative.class);
            continue;
          }
          try {
            if (block instanceof IFluidBlock) {
              IFluidBlock fblock=(IFluidBlock)block;
              if (fblock.getFluid() != null) {
                SchematicRegistry.INSTANCE.registerSchematicBlock(state,SchematicFluid.class,new FluidStack(fblock.getFluid(),1000));
              }
            }
 else {
              SchematicRegistry.INSTANCE.registerSchematicBlock(state,SchematicBlock.class);
            }
          }
 catch (          Exception e) {
            e.printStackTrace();
          }
        }
 catch (        Exception e) {
        }
      }
    }
  }
}","public static void start(){
  Iterator<Block> i=Block.REGISTRY.iterator();
  while (i.hasNext()) {
    Block block=i.next();
    if (block == null || block == Blocks.AIR) {
      continue;
    }
    for (    Object obj : block.getBlockState().getValidStates()) {
      IBlockState state=(IBlockState)obj;
      if (!SchematicRegistry.INSTANCE.isSupported(state)) {
        try {
          if (block.hasTileEntity(state)) {
            SchematicRegistry.INSTANCE.registerSchematicBlock(state,SchematicTileCreative.class);
            continue;
          }
          try {
            if (block instanceof IFluidBlock) {
              IFluidBlock fblock=(IFluidBlock)block;
              if (fblock.getFluid() != null) {
                SchematicRegistry.INSTANCE.registerSchematicBlock(state,SchematicFluid.class,new FluidStack(fblock.getFluid(),1000));
              }
            }
 else {
              SchematicRegistry.INSTANCE.registerSchematicBlock(state,SchematicBlock.class);
            }
          }
 catch (          Exception e) {
            e.printStackTrace();
          }
        }
 catch (        Exception e) {
        }
      }
    }
  }
}",0.989228780697975
156428,"@Override public ItemStack load(ItemStack stack,NBTTagCompound compound){
  ItemStack out=new ItemStack(Items.written_book);
  NBTTagCompound outNBT=new NBTTagCompound();
  outNBT.setString(""String_Node_Str"",compound.getString(""String_Node_Str""));
  outNBT.setString(""String_Node_Str"",compound.getString(""String_Node_Str""));
  outNBT.setTag(""String_Node_Str"",compound.getTagList(""String_Node_Str"",8));
  out.setTagCompound(outNBT);
  return out;
}","@Override public ItemStack load(ItemStack stack,NBTTagCompound compound){
  ItemStack out=new ItemStack(Items.WRITTEN_BOOK);
  NBTTagCompound outNBT=new NBTTagCompound();
  outNBT.setString(""String_Node_Str"",compound.getString(""String_Node_Str""));
  outNBT.setString(""String_Node_Str"",compound.getString(""String_Node_Str""));
  outNBT.setTag(""String_Node_Str"",compound.getTagList(""String_Node_Str"",8));
  out.setTagCompound(outNBT);
  return out;
}",0.9731543624161074
156429,"@Override public boolean isHandler(ItemStack stack,HandlerType type){
  if (type == HandlerType.STORE) {
    return stack.getItem() == Items.written_book;
  }
 else {
    return stack.getItem() == Items.writable_book || stack.getItem() == Items.written_book;
  }
}","@Override public boolean isHandler(ItemStack stack,HandlerType type){
  if (type == HandlerType.STORE) {
    return stack.getItem() == Items.WRITTEN_BOOK;
  }
 else {
    return stack.getItem() == Items.WRITABLE_BOOK || stack.getItem() == Items.WRITTEN_BOOK;
  }
}",0.8712121212121212
156430,"@Override public void detectAndSendChanges(){
  super.detectAndSendChanges();
  for (  Object crafter : crafters) {
    ICrafting icrafting=(ICrafting)crafter;
    if (computingTime != architect.getComputingProgressScaled(24)) {
      icrafting.sendProgressBarUpdate(this,0,architect.getComputingProgressScaled(24));
    }
  }
  computingTime=architect.getComputingProgressScaled(24);
}","@Override public void detectAndSendChanges(){
  super.detectAndSendChanges();
  for (  IContainerListener listener : listeners) {
    if (computingTime != architect.getComputingProgressScaled(24)) {
      listener.sendProgressBarUpdate(this,0,architect.getComputingProgressScaled(24));
    }
  }
  computingTime=architect.getComputingProgressScaled(24);
}",0.8529014844804319
156431,"public void doRenderItem(ItemStack stack,double x,double y,double z){
  if (stack == null) {
    return;
  }
  float renderScale=1.5f;
  GL11.glPushMatrix();
  GL11.glTranslatef((float)x,(float)y,(float)z);
  GL11.glTranslatef(0,0.25F,0);
  GL11.glScalef(renderScale,renderScale,renderScale);
  Minecraft.getMinecraft().getTextureManager().bindTexture(TextureMap.locationBlocksTexture);
  IBakedModel model=Minecraft.getMinecraft().getRenderItem().getItemModelMesher().getItemModel(stack);
  Minecraft.getMinecraft().getRenderItem().renderItem(stack,model);
  GL11.glPopMatrix();
}","public void doRenderItem(ItemStack stack,double x,double y,double z){
  if (stack == null) {
    return;
  }
  float renderScale=1.5f;
  GL11.glPushMatrix();
  GL11.glTranslatef((float)x,(float)y,(float)z);
  GL11.glTranslatef(0,0.25F,0);
  GL11.glScalef(renderScale,renderScale,renderScale);
  Minecraft.getMinecraft().getTextureManager().bindTexture(TextureMap.LOCATION_BLOCKS_TEXTURE);
  IBakedModel model=Minecraft.getMinecraft().getRenderItem().getItemModelMesher().getItemModel(stack);
  Minecraft.getMinecraft().getRenderItem().renderItem(stack,model);
  GL11.glPopMatrix();
}",0.7646048109965635
156432,"@Override public void readFromWorld(IBuilderContext context,Entity entity){
  super.readFromWorld(context,entity);
  List<ItemStack> requirements=new ArrayList<>();
  EntityArmorStand stand=(EntityArmorStand)entity;
  requirements.add(new ItemStack(Items.armor_stand));
  for (int i=0; i <= 4; i++) {
    ItemStack stack=stand.getEquipmentInSlot(i);
    if (stack != null) {
      requirements.add(stack);
    }
  }
  storedRequirements=requirements.toArray(new ItemStack[requirements.size()]);
}","@Override public void readFromWorld(IBuilderContext context,Entity entity){
  super.readFromWorld(context,entity);
  List<ItemStack> requirements=new ArrayList<>();
  EntityArmorStand stand=(EntityArmorStand)entity;
  requirements.add(new ItemStack(Items.ARMOR_STAND));
  for (  EntityEquipmentSlot slot : EntityEquipmentSlot.values()) {
    ItemStack stack=stand.getItemStackFromSlot(slot);
    if (stack != null) {
      requirements.add(stack);
    }
  }
  storedRequirements=requirements.toArray(new ItemStack[requirements.size()]);
}",0.8239845261121856
156433,"@Override public void getRequirementsForPlacement(IBuilderContext context,List<ItemStack> requirements){
  if (state.getValue(BlockBed.PART) == BlockBed.EnumPartType.HEAD) {
    requirements.add(new ItemStack(Items.bed));
  }
}","@Override public void getRequirementsForPlacement(IBuilderContext context,List<ItemStack> requirements){
  if (state.getValue(BlockBed.PART) == BlockBed.EnumPartType.HEAD) {
    requirements.add(new ItemStack(Items.BED));
  }
}",0.986784140969163
156434,"@Override public void rotateLeft(IBuilderContext context){
  IBlockState oldState=state;
  EnumFacing oldFacing=(EnumFacing)oldState.getValue(BlockBed.FACING);
  state=oldState.withProperty(BlockBed.FACING,oldFacing.rotateY());
}","@Override public void rotateLeft(IBuilderContext context){
  IBlockState oldState=state;
  EnumFacing oldFacing=oldState.getValue(BlockBed.FACING);
  state=oldState.withProperty(BlockBed.FACING,oldFacing.rotateY());
}",0.9730941704035876
156435,"@Override public void placeInWorld(IBuilderContext context,BlockPos pos,List<ItemStack> stacks){
  context.world().setBlockState(pos,state.withProperty(BlockBed.PART,BlockBed.EnumPartType.HEAD));
  BlockPos feetPos=pos.offset(state.getValue(getFacingProp()),-1);
  context.world().setBlockState(feetPos,state.withProperty(BlockBed.PART,BlockBed.EnumPartType.FOOT));
}","@Override public void placeInWorld(IBuilderContext context,BlockPos pos,List<ItemStack> stacks){
  context.world().setBlockState(pos,state.withProperty(BlockBed.PART,BlockBed.EnumPartType.HEAD));
  BlockPos feetPos=pos.offset(state.getValue(BlockBed.FACING),-1);
  context.world().setBlockState(feetPos,state.withProperty(BlockBed.PART,BlockBed.EnumPartType.FOOT));
}",0.9618528610354224
156436,"@Override public void getRequirementsForPlacement(IBuilderContext context,List<ItemStack> requirements){
  requirements.add(new ItemStack(Blocks.cactus));
}","@Override public void getRequirementsForPlacement(IBuilderContext context,List<ItemStack> requirements){
  requirements.add(new ItemStack(Blocks.CACTUS));
}",0.9615384615384616
156437,"@Override public boolean isAlreadyBuilt(IBuilderContext context,BlockPos pos){
  return context.world().getBlockState(pos).getBlock() == Blocks.cactus;
}","@Override public boolean isAlreadyBuilt(IBuilderContext context,BlockPos pos){
  return context.world().getBlockState(pos).getBlock() == Blocks.CACTUS;
}",0.9607843137254902
156438,"@Override public void placeInWorld(IBuilderContext context,BlockPos pos,List<ItemStack> stacks){
  context.world().setBlockState(pos,Blocks.cactus.getDefaultState(),3);
}","@Override public void placeInWorld(IBuilderContext context,BlockPos pos,List<ItemStack> stacks){
  context.world().setBlockState(pos,Blocks.CACTUS.getDefaultState(),3);
}",0.9647058823529412
156439,"@Override public void getRequirementsForPlacement(IBuilderContext context,List<ItemStack> requirements){
  requirements.add(new ItemStack(Blocks.dirt));
}","@Override public void getRequirementsForPlacement(IBuilderContext context,List<ItemStack> requirements){
  requirements.add(new ItemStack(Blocks.DIRT));
}",0.974025974025974
156440,"@Override public boolean isAlreadyBuilt(IBuilderContext context,BlockPos pos){
  Block block=context.world().getBlockState(pos).getBlock();
  return block == Blocks.dirt || block == Blocks.grass || block == Blocks.farmland;
}","@Override public boolean isAlreadyBuilt(IBuilderContext context,BlockPos pos){
  Block block=context.world().getBlockState(pos).getBlock();
  return block == Blocks.DIRT || block == Blocks.GRASS || block == Blocks.FARMLAND;
}",0.7466666666666667
156441,"@Override public void placeInWorld(IBuilderContext context,BlockPos pos,List<ItemStack> stacks){
  context.world().setBlockState(pos,Blocks.dirt.getDefaultState(),3);
}","@Override public void placeInWorld(IBuilderContext context,BlockPos pos,List<ItemStack> stacks){
  context.world().setBlockState(pos,Blocks.DIRT.getDefaultState(),3);
}",0.9761904761904762
156442,"@Override public void getRequirementsForPlacement(IBuilderContext context,List<ItemStack> requirements){
  requirements.add(new ItemStack(Blocks.obsidian,8));
  requirements.add(new ItemStack(Items.ender_eye,1));
}","@Override public void getRequirementsForPlacement(IBuilderContext context,List<ItemStack> requirements){
  requirements.add(new ItemStack(Blocks.OBSIDIAN,8));
  requirements.add(new ItemStack(Items.ENDER_EYE,1));
}",0.9252336448598132
156443,"@Override protected SchematicBlock loadSchematicFromWorldNBT(NBTTagCompound nbt,MappingRegistry registry) throws MappingNotFoundException {
  int blockId=nbt.getInteger(""String_Node_Str"");
  Block b=registry.getBlockForId(blockId);
  if (b == Blocks.air) {
    SchematicBlock s=new SchematicBlock();
    s.state=Blocks.air.getDefaultState();
    return s;
  }
 else {
    SchematicBlock s=SchematicRegistry.INSTANCE.createSchematicBlock(b.getStateFromMeta(nbt.getInteger(""String_Node_Str"")));
    if (s != null) {
      s.readSchematicFromNBT(nbt,registry);
      return s;
    }
  }
  return null;
}","@Override protected SchematicBlock loadSchematicFromWorldNBT(NBTTagCompound nbt,MappingRegistry registry) throws MappingNotFoundException {
  int blockId=nbt.getInteger(""String_Node_Str"");
  Block b=registry.getBlockForId(blockId);
  if (b == Blocks.AIR) {
    SchematicBlock s=new SchematicBlock();
    s.state=Blocks.AIR.getDefaultState();
    return s;
  }
 else {
    SchematicBlock s=SchematicRegistry.INSTANCE.createSchematicBlock(b.getStateFromMeta(nbt.getInteger(""String_Node_Str"")));
    if (s != null) {
      s.readSchematicFromNBT(nbt,registry);
      return s;
    }
  }
  return null;
}",0.99
156444,"@Override public void getRequirementsForPlacement(IBuilderContext context,List<ItemStack> requirements){
  requirements.add(new ItemStack(Blocks.dirt));
}","@Override public void getRequirementsForPlacement(IBuilderContext context,List<ItemStack> requirements){
  requirements.add(new ItemStack(Blocks.DIRT));
}",0.974025974025974
156445,"@Override public boolean isAlreadyBuilt(IBuilderContext context,BlockPos pos){
  Block block=context.world().getBlockState(pos).getBlock();
  return block == Blocks.farmland;
}","@Override public boolean isAlreadyBuilt(IBuilderContext context,BlockPos pos){
  Block block=context.world().getBlockState(pos).getBlock();
  return block == Blocks.FARMLAND;
}",0.9545454545454546
156446,"@Override public void getRequirementsForPlacement(IBuilderContext context,List<ItemStack> requirements){
  requirements.add(new ItemStack(Items.flint_and_steel));
}","@Override public void getRequirementsForPlacement(IBuilderContext context,List<ItemStack> requirements){
  requirements.add(new ItemStack(Items.FLINT_AND_STEEL));
}",0.9207317073170732
156447,"@Override public void getRequirementsForPlacement(IBuilderContext context,List<ItemStack> requirements){
  requirements.add(new ItemStack(Blocks.gravel));
}","@Override public void getRequirementsForPlacement(IBuilderContext context,List<ItemStack> requirements){
  requirements.add(new ItemStack(Blocks.GRAVEL));
}",0.9615384615384616
156448,"@Override public boolean isAlreadyBuilt(IBuilderContext context,BlockPos pos){
  Block block=context.world().getBlockState(pos).getBlock();
  return block == Blocks.gravel;
}","@Override public boolean isAlreadyBuilt(IBuilderContext context,BlockPos pos){
  Block block=context.world().getBlockState(pos).getBlock();
  return block == Blocks.GRAVEL;
}",0.9655172413793104
156449,"@Override public void placeInWorld(IBuilderContext context,BlockPos pos,List<ItemStack> stacks){
  context.world().setBlockState(pos,Blocks.gravel.getDefaultState());
}","@Override public void placeInWorld(IBuilderContext context,BlockPos pos,List<ItemStack> stacks){
  context.world().setBlockState(pos,Blocks.GRAVEL.getDefaultState());
}",0.9642857142857144
156450,"@Override public void translateToWorld(Vec3d transform){
  super.translateToWorld(transform);
  Vec3d pos=new Vec3d(entityNBT.getInteger(""String_Node_Str""),entityNBT.getInteger(""String_Node_Str""),entityNBT.getInteger(""String_Node_Str""));
  pos=pos.add(transform);
  Vec3di floored=Utils.convertFloor(pos);
  entityNBT.setInteger(""String_Node_Str"",floored.getX());
  entityNBT.setInteger(""String_Node_Str"",floored.getY());
  entityNBT.setInteger(""String_Node_Str"",floored.getZ());
}","@Override public void translateToWorld(Vec3d transform){
  super.translateToWorld(transform);
  Vec3d pos=new Vec3d(entityNBT.getInteger(""String_Node_Str""),entityNBT.getInteger(""String_Node_Str""),entityNBT.getInteger(""String_Node_Str""));
  pos=pos.add(transform);
  Vec3i floored=Utils.convertFloor(pos);
  entityNBT.setInteger(""String_Node_Str"",floored.getX());
  entityNBT.setInteger(""String_Node_Str"",floored.getY());
  entityNBT.setInteger(""String_Node_Str"",floored.getZ());
}",0.9989594172736732
156451,"@Override public void readFromWorld(IBuilderContext context,Entity entity){
  super.readFromWorld(context,entity);
  if (baseItem == Items.item_frame) {
    NBTTagCompound tag=entityNBT.getCompoundTag(""String_Node_Str"");
    ItemStack stack=ItemStack.loadItemStackFromNBT(tag);
    if (stack != null) {
      storedRequirements=new ItemStack[2];
      storedRequirements[0]=new ItemStack(baseItem);
      storedRequirements[1]=stack;
    }
 else {
      storedRequirements=new ItemStack[1];
      storedRequirements[0]=new ItemStack(baseItem);
    }
  }
 else {
    storedRequirements=new ItemStack[1];
    storedRequirements[0]=new ItemStack(baseItem);
  }
}","@Override public void readFromWorld(IBuilderContext context,Entity entity){
  super.readFromWorld(context,entity);
  if (baseItem == Items.ITEM_FRAME) {
    NBTTagCompound tag=entityNBT.getCompoundTag(""String_Node_Str"");
    ItemStack stack=ItemStack.loadItemStackFromNBT(tag);
    if (stack != null) {
      storedRequirements=new ItemStack[2];
      storedRequirements[0]=new ItemStack(baseItem);
      storedRequirements[1]=stack;
    }
 else {
      storedRequirements=new ItemStack[1];
      storedRequirements[0]=new ItemStack(baseItem);
    }
  }
 else {
    storedRequirements=new ItemStack[1];
    storedRequirements[0]=new ItemStack(baseItem);
  }
}",0.9863429438543247
156452,"@Override public void translateToBlueprint(Vec3d transform){
  super.translateToBlueprint(transform);
  Vec3d pos=new Vec3d(entityNBT.getInteger(""String_Node_Str""),entityNBT.getInteger(""String_Node_Str""),entityNBT.getInteger(""String_Node_Str""));
  pos=pos.add(transform);
  Vec3di floored=Utils.convertFloor(pos);
  entityNBT.setInteger(""String_Node_Str"",floored.getX());
  entityNBT.setInteger(""String_Node_Str"",floored.getY());
  entityNBT.setInteger(""String_Node_Str"",floored.getZ());
}","@Override public void translateToBlueprint(Vec3d transform){
  super.translateToBlueprint(transform);
  Vec3d pos=new Vec3d(entityNBT.getInteger(""String_Node_Str""),entityNBT.getInteger(""String_Node_Str""),entityNBT.getInteger(""String_Node_Str""));
  pos=pos.add(transform);
  Vec3i floored=Utils.convertFloor(pos);
  entityNBT.setInteger(""String_Node_Str"",floored.getX());
  entityNBT.setInteger(""String_Node_Str"",floored.getY());
  entityNBT.setInteger(""String_Node_Str"",floored.getZ());
}",0.9989764585465712
156453,"@Override public void getRequirementsForPlacement(IBuilderContext context,List<ItemStack> requirements){
  requirements.add(new ItemStack(Blocks.redstone_lamp,1,0));
}","@Override public void getRequirementsForPlacement(IBuilderContext context,List<ItemStack> requirements){
  requirements.add(new ItemStack(Blocks.REDSTONE_LAMP,1,0));
}",0.9281437125748504
156454,"@Override public boolean isAlreadyBuilt(IBuilderContext context,BlockPos pos){
  Block block=context.world().getBlockState(pos).getBlock();
  return block == Blocks.redstone_lamp || block == Blocks.lit_redstone_lamp;
}","@Override public boolean isAlreadyBuilt(IBuilderContext context,BlockPos pos){
  Block block=context.world().getBlockState(pos).getBlock();
  return block == Blocks.REDSTONE_LAMP || block == Blocks.LIT_REDSTONE_LAMP;
}",0.8761467889908257
156455,"@Mod.EventHandler public void init(FMLInitializationEvent evt){
  BuildCraftAPI.proxy=CoreProxy.proxy;
  ChannelHandler coreChannelHandler=new ChannelHandler();
  coreChannelHandler.registerPacketType(PacketTabletMessage.class);
  channels=NetworkRegistry.INSTANCE.newChannel(DefaultProps.NET_CHANNEL_NAME + ""String_Node_Str"",coreChannelHandler,handler=new PacketHandler());
  achievementManager=new AchievementManager(""String_Node_Str"");
  MinecraftForge.EVENT_BUS.register(achievementManager);
  woodenGearAchievement=achievementManager.registerAchievement(new Achievement(""String_Node_Str"",""String_Node_Str"",0,0,woodenGearItem,null));
  stoneGearAchievement=achievementManager.registerAchievement(new Achievement(""String_Node_Str"",""String_Node_Str"",2,0,stoneGearItem,woodenGearAchievement));
  ironGearAchievement=achievementManager.registerAchievement(new Achievement(""String_Node_Str"",""String_Node_Str"",4,0,ironGearItem,stoneGearAchievement));
  goldGearAchievement=achievementManager.registerAchievement(new Achievement(""String_Node_Str"",""String_Node_Str"",6,0,goldGearItem,ironGearAchievement));
  diamondGearAchievement=achievementManager.registerAchievement(new Achievement(""String_Node_Str"",""String_Node_Str"",8,0,diamondGearItem,goldGearAchievement));
  wrenchAchievement=achievementManager.registerAchievement(new Achievement(""String_Node_Str"",""String_Node_Str"",3,2,wrenchItem,stoneGearAchievement));
  engineRedstoneAchievement=BuildCraftCore.achievementManager.registerAchievement(new Achievement(""String_Node_Str"",""String_Node_Str"",1,-2,new ItemStack(engineBlock,1,0),BuildCraftCore.woodenGearAchievement));
  StatementManager.registerParameterClass(""String_Node_Str"",StatementParameterItemStack.class);
  StatementManager.registerParameterClass(""String_Node_Str"",StatementParameterItemStack.class);
  StatementManager.registerParameterClass(StatementParameterItemStack.class);
  StatementManager.registerParameterClass(StatementParameterItemStackExact.class);
  StatementManager.registerParameterClass(StatementParameterDirection.class);
  StatementManager.registerParameterClass(StatementParameterRedstoneGateSideOnly.class);
  StatementManager.registerTriggerProvider(new DefaultTriggerProvider());
  StatementManager.registerActionProvider(new DefaultActionProvider());
  if (BuildCraftCore.modifyWorld) {
    MinecraftForge.EVENT_BUS.register(new SpringPopulate());
  }
  if (mainConfiguration.hasChanged()) {
    mainConfiguration.save();
  }
  if (BuildCraftCore.loadDefaultRecipes) {
    loadRecipes();
  }
  BCCreativeTab.get(""String_Node_Str"").setIcon(new ItemStack(BuildCraftCore.wrenchItem,1));
  EntityList.stringToClassMapping.remove(""String_Node_Str"");
  EntityList.stringToClassMapping.remove(""String_Node_Str"");
  BuilderAPI.schematicRegistry.registerSchematicBlock(engineBlock,SchematicEngine.class);
  CoreProxy.proxy.init();
  NetworkRegistry.INSTANCE.registerGuiHandler(instance,new CoreGuiHandler());
  MinecraftForge.EVENT_BUS.register(TabletManagerClient.INSTANCE);
  MinecraftForge.EVENT_BUS.register(TabletManagerServer.INSTANCE);
  MinecraftForge.EVENT_BUS.register(TickHandlerCore.INSTANCE);
  TabletAPI.registerProgram(new TabletProgramMenuFactory());
  try {
    FillerManager.registry=new FillerRegistry();
    IFillerPattern[] patterns={PatternFill.INSTANCE,PatternNone.INSTANCE,new PatternFlatten(),new PatternHorizon(),new PatternClear(),new PatternBox(),new PatternPyramid(),new PatternStairs(),new PatternCylinder(),new PatternFrame()};
    for (    IFillerPattern pattern : patterns) {
      FillerManager.registry.addPattern(pattern);
    }
    ActionFiller.resetMap();
  }
 catch (  Error error) {
    BCLog.logErrorAPI(error,IFillerPattern.class);
    throw error;
  }
  StatementManager.registerParameterClass(PatternParameterYDir.class);
  StatementManager.registerParameterClass(PatternParameterXZDir.class);
  StatementManager.registerParameterClass(PatternParameterCenter.class);
  StatementManager.registerParameterClass(PatternParameterHollow.class);
  ListRegistry.registerHandler(new ListMatchHandlerClass());
  ListRegistry.registerHandler(new ListMatchHandlerFluid());
  ListRegistry.registerHandler(new ListMatchHandlerTools());
  ListRegistry.registerHandler(new ListMatchHandlerArmor());
  ListRegistry.itemClassAsType.add(ItemFood.class);
  DebuggingTools.init();
}","@Mod.EventHandler public void init(FMLInitializationEvent evt){
  BuildCraftAPI.proxy=CoreProxy.proxy;
  EntityRegistry.registerModEntity(EntityResizableCuboid.class,""String_Node_Str"",EntityIds.RESIZABLE_CUBOID,instance,0,100,false);
  ChannelHandler coreChannelHandler=new ChannelHandler();
  coreChannelHandler.registerPacketType(PacketTabletMessage.class);
  channels=NetworkRegistry.INSTANCE.newChannel(DefaultProps.NET_CHANNEL_NAME + ""String_Node_Str"",coreChannelHandler,handler=new PacketHandler());
  achievementManager=new AchievementManager(""String_Node_Str"");
  MinecraftForge.EVENT_BUS.register(achievementManager);
  woodenGearAchievement=achievementManager.registerAchievement(new Achievement(""String_Node_Str"",""String_Node_Str"",0,0,woodenGearItem,null));
  stoneGearAchievement=achievementManager.registerAchievement(new Achievement(""String_Node_Str"",""String_Node_Str"",2,0,stoneGearItem,woodenGearAchievement));
  ironGearAchievement=achievementManager.registerAchievement(new Achievement(""String_Node_Str"",""String_Node_Str"",4,0,ironGearItem,stoneGearAchievement));
  goldGearAchievement=achievementManager.registerAchievement(new Achievement(""String_Node_Str"",""String_Node_Str"",6,0,goldGearItem,ironGearAchievement));
  diamondGearAchievement=achievementManager.registerAchievement(new Achievement(""String_Node_Str"",""String_Node_Str"",8,0,diamondGearItem,goldGearAchievement));
  wrenchAchievement=achievementManager.registerAchievement(new Achievement(""String_Node_Str"",""String_Node_Str"",3,2,wrenchItem,stoneGearAchievement));
  engineRedstoneAchievement=BuildCraftCore.achievementManager.registerAchievement(new Achievement(""String_Node_Str"",""String_Node_Str"",1,-2,new ItemStack(engineBlock,1,0),BuildCraftCore.woodenGearAchievement));
  StatementManager.registerParameterClass(""String_Node_Str"",StatementParameterItemStack.class);
  StatementManager.registerParameterClass(""String_Node_Str"",StatementParameterItemStack.class);
  StatementManager.registerParameterClass(StatementParameterItemStack.class);
  StatementManager.registerParameterClass(StatementParameterItemStackExact.class);
  StatementManager.registerParameterClass(StatementParameterDirection.class);
  StatementManager.registerParameterClass(StatementParameterRedstoneGateSideOnly.class);
  StatementManager.registerTriggerProvider(new DefaultTriggerProvider());
  StatementManager.registerActionProvider(new DefaultActionProvider());
  if (BuildCraftCore.modifyWorld) {
    MinecraftForge.EVENT_BUS.register(new SpringPopulate());
  }
  if (mainConfiguration.hasChanged()) {
    mainConfiguration.save();
  }
  if (BuildCraftCore.loadDefaultRecipes) {
    loadRecipes();
  }
  BCCreativeTab.get(""String_Node_Str"").setIcon(new ItemStack(BuildCraftCore.wrenchItem,1));
  EntityList.stringToClassMapping.remove(""String_Node_Str"");
  EntityList.stringToClassMapping.remove(""String_Node_Str"");
  BuilderAPI.schematicRegistry.registerSchematicBlock(engineBlock,SchematicEngine.class);
  CoreProxy.proxy.init();
  NetworkRegistry.INSTANCE.registerGuiHandler(instance,new CoreGuiHandler());
  MinecraftForge.EVENT_BUS.register(TabletManagerClient.INSTANCE);
  MinecraftForge.EVENT_BUS.register(TabletManagerServer.INSTANCE);
  MinecraftForge.EVENT_BUS.register(TickHandlerCore.INSTANCE);
  TabletAPI.registerProgram(new TabletProgramMenuFactory());
  try {
    FillerManager.registry=new FillerRegistry();
    IFillerPattern[] patterns={PatternFill.INSTANCE,PatternNone.INSTANCE,new PatternFlatten(),new PatternHorizon(),new PatternClear(),new PatternBox(),new PatternPyramid(),new PatternStairs(),new PatternCylinder(),new PatternFrame()};
    for (    IFillerPattern pattern : patterns) {
      FillerManager.registry.addPattern(pattern);
    }
    ActionFiller.resetMap();
  }
 catch (  Error error) {
    BCLog.logErrorAPI(error,IFillerPattern.class);
    throw error;
  }
  StatementManager.registerParameterClass(PatternParameterYDir.class);
  StatementManager.registerParameterClass(PatternParameterXZDir.class);
  StatementManager.registerParameterClass(PatternParameterCenter.class);
  StatementManager.registerParameterClass(PatternParameterHollow.class);
  ListRegistry.registerHandler(new ListMatchHandlerClass());
  ListRegistry.registerHandler(new ListMatchHandlerFluid());
  ListRegistry.registerHandler(new ListMatchHandlerTools());
  ListRegistry.registerHandler(new ListMatchHandlerArmor());
  ListRegistry.itemClassAsType.add(ItemFood.class);
  DebuggingTools.init();
}",0.9851085597362738
156456,"@Override public boolean isValidExpansion(ItemStack input,ItemStack expansion){
  if (StackHelper.isMatchingItem(EnumRedstoneChipset.RED.getStack(),expansion,true,true)) {
    return true;
  }
  for (  ItemStack s : recipes.values()) {
    if (StackHelper.isMatchingItem(s,expansion,true,true)) {
      IGateExpansion exp=recipes.inverse().get(expansion);
      if (exp.canAddToGate(ItemGate.getMaterial(input).numTriggerParameters,ItemGate.getMaterial(input).numActionParameters)) {
        return true;
      }
 else {
        return false;
      }
    }
  }
  return false;
}","@Override public boolean isValidExpansion(ItemStack input,ItemStack expansion){
  if (StackHelper.isMatchingItem(EnumRedstoneChipset.RED.getStack(),expansion,true,true)) {
    return true;
  }
  for (  ItemStack s : recipes.values()) {
    if (StackHelper.isMatchingItem(s,expansion,true,true)) {
      IGateExpansion exp=recipes.inverse().get(expansion);
      GateDefinition.GateMaterial material=ItemGate.getMaterial(input);
      int numTP=material != null ? material.numTriggerParameters : 0;
      int numAP=material != null ? material.numActionParameters : 0;
      if (exp.canAddToGate(numTP,numAP)) {
        return true;
      }
 else {
        return false;
      }
    }
  }
  return false;
}",0.7691107644305772
156457,"private boolean isTriggeredEnergyHandler(IEnergyConnection connection,EnumPipePart part){
  int energyStored, energyMaxStored;
  EnumFacing side=part.face;
  if (connection instanceof IEnergyHandler) {
    energyStored=((IEnergyHandler)connection).getEnergyStored(side);
    energyMaxStored=((IEnergyHandler)connection).getMaxEnergyStored(side);
  }
 else   if (connection instanceof IEnergyProvider) {
    energyStored=((IEnergyProvider)connection).getEnergyStored(side);
    energyMaxStored=((IEnergyProvider)connection).getMaxEnergyStored(side);
  }
 else   if (connection instanceof IEnergyReceiver) {
    energyStored=((IEnergyReceiver)connection).getEnergyStored(side);
    energyMaxStored=((IEnergyReceiver)connection).getMaxEnergyStored(side);
  }
 else {
    return false;
  }
  if (energyMaxStored > 0) {
    float level=(float)energyStored / (float)energyMaxStored;
    if (high) {
      return level > 0.95F;
    }
 else {
      return level < 0.05F;
    }
  }
  return false;
}","private boolean isTriggeredEnergyHandler(IEnergyConnection connection,EnumPipePart part){
  int energyStored, energyMaxStored;
  EnumFacing side=part.face;
  if (connection instanceof IEnergyHandler) {
    energyStored=((IEnergyHandler)connection).getEnergyStored(side);
    energyMaxStored=((IEnergyHandler)connection).getMaxEnergyStored(side);
  }
 else {
    return false;
  }
  if (energyMaxStored > 0) {
    float level=(float)energyStored / (float)energyMaxStored;
    if (high) {
      return level > 0.95F;
    }
 else {
      return level < 0.05F;
    }
  }
  return false;
}",0.7420584498094028
156458,"protected static boolean isTriggered(Object tile,EnumPipePart side){
  if (tile instanceof IEnergyConnection) {
    return ((IEnergyConnection)tile).canConnectEnergy(side.opposite().face);
  }
  return false;
}","protected static boolean isTriggered(Object tile,EnumPipePart side){
  if (tile instanceof IPipeTile) {
    return false;
  }
 else   if (tile instanceof IEnergyConnection) {
    return ((IEnergyConnection)tile).canConnectEnergy(side.opposite().face);
  }
 else {
    return false;
  }
}",0.8410462776659959
156459,"@Override public boolean isValidExpansion(ItemStack input,ItemStack expansion){
  if (StackHelper.isMatchingItem(EnumRedstoneChipset.RED.getStack(),expansion,true,true)) {
    return true;
  }
  for (  ItemStack s : recipes.values()) {
    System.out.println(s.toString());
    if (StackHelper.isMatchingItem(s,expansion,true,true)) {
      IGateExpansion exp=recipes.inverse().get(s);
      if (exp != null) {
        GateDefinition.GateMaterial material=ItemGate.getMaterial(input);
        int numTP=material != null ? material.numTriggerParameters : 0;
        int numAP=material != null ? material.numActionParameters : 0;
        if (exp.canAddToGate(numTP,numAP)) {
          return true;
        }
 else {
          return false;
        }
      }
    }
  }
  return false;
}","@Override public boolean isValidExpansion(ItemStack input,ItemStack expansion){
  if (StackHelper.isMatchingItem(EnumRedstoneChipset.RED.getStack(),expansion,true,true)) {
    return true;
  }
  for (  ItemStack s : recipes.values()) {
    if (StackHelper.isMatchingItem(s,expansion,true,true)) {
      IGateExpansion exp=recipes.inverse().get(s);
      if (exp != null) {
        GateDefinition.GateMaterial material=ItemGate.getMaterial(input);
        int numTP=material != null ? material.numTriggerParameters : 0;
        int numAP=material != null ? material.numActionParameters : 0;
        if (exp.canAddToGate(numTP,numAP)) {
          return true;
        }
 else {
          return false;
        }
      }
    }
  }
  return false;
}",0.975130890052356
156460,"private boolean isTriggeredEnergyHandler(IEnergyConnection connection,EnumPipePart part){
  int energyStored, energyMaxStored;
  EnumFacing side=part.face;
  if (connection instanceof IEnergyHandler) {
    energyStored=((IEnergyHandler)connection).getEnergyStored(side);
    energyMaxStored=((IEnergyHandler)connection).getMaxEnergyStored(side);
  }
 else   if (connection instanceof IEnergyProvider) {
    energyStored=((IEnergyProvider)connection).getEnergyStored(side);
    energyMaxStored=((IEnergyProvider)connection).getMaxEnergyStored(side);
  }
 else   if (connection instanceof IEnergyReceiver) {
    energyStored=((IEnergyReceiver)connection).getEnergyStored(side);
    energyMaxStored=((IEnergyReceiver)connection).getMaxEnergyStored(side);
  }
 else {
    return false;
  }
  if (energyMaxStored > 0) {
    float level=(float)energyStored / (float)energyMaxStored;
    if (high) {
      return level > 0.95F;
    }
 else {
      return level < 0.05F;
    }
  }
  return false;
}","private boolean isTriggeredEnergyHandler(IEnergyConnection connection,EnumPipePart part){
  int energyStored, energyMaxStored;
  EnumFacing side=part.face;
  if (connection instanceof IEnergyHandler) {
    energyStored=((IEnergyHandler)connection).getEnergyStored(side);
    energyMaxStored=((IEnergyHandler)connection).getMaxEnergyStored(side);
  }
 else {
    return false;
  }
  if (energyMaxStored > 0) {
    float level=(float)energyStored / (float)energyMaxStored;
    if (high) {
      return level > 0.95F;
    }
 else {
      return level < 0.05F;
    }
  }
  return false;
}",0.7420584498094028
156461,"protected static boolean isTriggered(Object tile,EnumPipePart side){
  if (tile instanceof IEnergyConnection) {
    return ((IEnergyConnection)tile).canConnectEnergy(side.opposite().face);
  }
  return false;
}","protected static boolean isTriggered(Object tile,EnumPipePart side){
  if (tile instanceof IPipeTile) {
    return false;
  }
 else   if (tile instanceof IEnergyConnection) {
    return ((IEnergyConnection)tile).canConnectEnergy(side.opposite().face);
  }
 else {
    return false;
  }
}",0.8410462776659959
156462,"@Override public boolean isValidExpansion(ItemStack input,ItemStack expansion){
  if (StackHelper.isMatchingItem(EnumRedstoneChipset.RED.getStack(),expansion,true,true)) {
    return true;
  }
  for (  ItemStack s : recipes.values()) {
    if (StackHelper.isMatchingItem(s,expansion,true,true)) {
      IGateExpansion exp=recipes.inverse().get(expansion);
      if (exp != null) {
        GateDefinition.GateMaterial material=ItemGate.getMaterial(input);
        int numTP=material != null ? material.numTriggerParameters : 0;
        int numAP=material != null ? material.numActionParameters : 0;
        if (exp.canAddToGate(numTP,numAP)) {
          return true;
        }
 else {
          return false;
        }
      }
    }
  }
  return false;
}","@Override public boolean isValidExpansion(ItemStack input,ItemStack expansion){
  if (StackHelper.isMatchingItem(EnumRedstoneChipset.RED.getStack(),expansion,true,true)) {
    return true;
  }
  for (  ItemStack s : recipes.values()) {
    System.out.println(s.toString());
    if (StackHelper.isMatchingItem(s,expansion,true,true)) {
      IGateExpansion exp=recipes.inverse().get(s);
      if (exp != null) {
        GateDefinition.GateMaterial material=ItemGate.getMaterial(input);
        int numTP=material != null ? material.numTriggerParameters : 0;
        int numAP=material != null ? material.numActionParameters : 0;
        if (exp.canAddToGate(numTP,numAP)) {
          return true;
        }
 else {
          return false;
        }
      }
    }
  }
  return false;
}",0.96875
156463,"@Override public IPipePluggableDynamicRenderer getDynamicRenderer(){
  return GatePluggableModel.INSTANCE;
}","@Override @SideOnly(Side.CLIENT) public IPipePluggableDynamicRenderer getDynamicRenderer(){
  return GatePluggableModel.INSTANCE;
}",0.9037656903765692
156464,"@Override public ModelKeyGate getModelRenderKey(EnumWorldBlockLayer layer,EnumFacing side){
  if (layer == EnumWorldBlockLayer.CUTOUT) {
    return new ModelKeyGate(side,material,logic,isLit,expansions);
  }
  return null;
}","@Override @SideOnly(Side.CLIENT) public ModelKeyGate getModelRenderKey(EnumWorldBlockLayer layer,EnumFacing side){
  if (layer == EnumWorldBlockLayer.CUTOUT) {
    return new ModelKeyGate(side,material,logic,isLit,expansions);
  }
  return null;
}",0.951167728237792
156465,"@Override public void registerBlockRenderers(){
  super.registerBlockRenderers();
  ClientRegistry.bindTileEntitySpecialRenderer(TileArchitect.class,new RenderArchitect());
  ClientRegistry.bindTileEntitySpecialRenderer(TileFiller.class,new RenderBuilder<TileFiller>());
  ClientRegistry.bindTileEntitySpecialRenderer(TileBuilder.class,new RenderBuilderTile());
  ClientRegistry.bindTileEntitySpecialRenderer(TileConstructionMarker.class,new RenderConstructionMarker());
  ClientRegistry.bindTileEntitySpecialRenderer(TileQuarry.class,new RenderQuarry());
  RenderingRegistry.registerEntityRenderingHandler(EntityMechanicalArm.class,new RenderVoid<EntityMechanicalArm>());
}","@Override public void registerBlockRenderers(){
  super.registerBlockRenderers();
  ClientRegistry.bindTileEntitySpecialRenderer(TileArchitect.class,new RenderArchitect());
  ClientRegistry.bindTileEntitySpecialRenderer(TileFiller.class,new RenderFiller());
  ClientRegistry.bindTileEntitySpecialRenderer(TileBuilder.class,new RenderBuilderTile());
  ClientRegistry.bindTileEntitySpecialRenderer(TileConstructionMarker.class,new RenderConstructionMarker());
  ClientRegistry.bindTileEntitySpecialRenderer(TileQuarry.class,new RenderQuarry());
  RenderingRegistry.registerEntityRenderingHandler(EntityMechanicalArm.class,new RenderVoid<EntityMechanicalArm>());
}",0.9902621722846442
156466,"public static void doRender(World world,TextureManager t,ResourceLocation texture,Box box){
  GL11.glPushMatrix();
  GL11.glDisable(GL11.GL_LIGHTING);
  box.createLaserData();
  for (  LaserData l : box.lasersData) {
    l.update();
    GL11.glPushMatrix();
    GL11.glTranslated(0.5F,0.5F,0.5F);
    RenderLaser.doRenderLaser(world,t,l,texture);
    GL11.glPopMatrix();
  }
  GL11.glEnable(GL11.GL_LIGHTING);
  GL11.glPopMatrix();
}","public static void doRender(World world,TextureManager t,ResourceLocation texture,Box box){
  Minecraft.getMinecraft().mcProfiler.startSection(""String_Node_Str"");
  Minecraft.getMinecraft().mcProfiler.startSection(""String_Node_Str"");
  GL11.glPushMatrix();
  GL11.glDisable(GL11.GL_LIGHTING);
  box.createLaserData();
  Minecraft.getMinecraft().mcProfiler.endStartSection(""String_Node_Str"");
  for (  LaserData l : box.lasersData) {
    GL11.glPushMatrix();
    GL11.glTranslated(0.5F,0.5F,0.5F);
    RenderLaser.doRenderLaser(world,t,l,texture);
    GL11.glPopMatrix();
  }
  GL11.glEnable(GL11.GL_LIGHTING);
  GL11.glPopMatrix();
  Minecraft.getMinecraft().mcProfiler.endSection();
  Minecraft.getMinecraft().mcProfiler.endSection();
}",0.7128205128205128
156467,"@Override public void renderTileEntityAt(T tileentity,double x,double y,double z,float f,int anArgument){
  Minecraft.getMinecraft().mcProfiler.startSection(""String_Node_Str"");
  GL11.glPushMatrix();
  GL11.glPushAttrib(GL11.GL_ENABLE_BIT);
  GlStateManager.enableCull();
  GlStateManager.disableLighting();
  GlStateManager.enableBlend();
  GlStateManager.blendFunc(GL11.GL_SRC_ALPHA,GL11.GL_ONE_MINUS_SRC_ALPHA);
  GL11.glPushMatrix();
  GL11.glTranslated(-tileentity.getPos().getX(),-tileentity.getPos().getY(),-tileentity.getPos().getZ());
  GL11.glTranslated(x,y,z);
  if (tileentity instanceof IBoxesProvider) {
    for (    Box b : ((IBoxesProvider)tileentity).getBoxes()) {
      if (b.isVisible) {
        RenderBox.doRender(TileEntityRendererDispatcher.instance.worldObj,Minecraft.getMinecraft().renderEngine,getTexture(b.kind),b);
      }
    }
  }
 else   if (tileentity instanceof IBoxProvider) {
    Box b=((IBoxProvider)tileentity).getBox();
    if (b.isVisible && b.isInitialized()) {
      RenderBox.doRender(TileEntityRendererDispatcher.instance.worldObj,Minecraft.getMinecraft().renderEngine,getTexture(b.kind),b);
    }
  }
  GL11.glPopMatrix();
  GL11.glPopAttrib();
  GL11.glPopMatrix();
  Minecraft.getMinecraft().mcProfiler.endSection();
}","@Override public void renderTileEntityAt(T tileentity,double x,double y,double z,float f,int anArgument){
  GL11.glPushMatrix();
  GL11.glPushAttrib(GL11.GL_ENABLE_BIT);
  GlStateManager.enableCull();
  GlStateManager.disableLighting();
  GlStateManager.enableBlend();
  GlStateManager.blendFunc(GL11.GL_SRC_ALPHA,GL11.GL_ONE_MINUS_SRC_ALPHA);
  GL11.glPushMatrix();
  GL11.glTranslated(-tileentity.getPos().getX(),-tileentity.getPos().getY(),-tileentity.getPos().getZ());
  GL11.glTranslated(x,y,z);
  if (tileentity instanceof IBoxesProvider) {
    for (    Box b : ((IBoxesProvider)tileentity).getBoxes()) {
      if (b.isVisible) {
        RenderBox.doRender(TileEntityRendererDispatcher.instance.worldObj,Minecraft.getMinecraft().renderEngine,getTexture(b.kind),b);
      }
    }
  }
 else   if (tileentity instanceof IBoxProvider) {
    Box b=((IBoxProvider)tileentity).getBox();
    if (b.isVisible && b.isInitialized()) {
      RenderBox.doRender(TileEntityRendererDispatcher.instance.worldObj,Minecraft.getMinecraft().renderEngine,getTexture(b.kind),b);
    }
  }
  GL11.glPopMatrix();
  GL11.glPopAttrib();
  GL11.glPopMatrix();
}",0.9488139825218476
156468,"public static void doRenderLaser(World world,TextureManager textureManager,LaserData laser,ResourceLocation texture){
  if (!laser.isVisible || texture == null) {
    return;
  }
  GL11.glPushMatrix();
  GL11.glTranslated(laser.head.xCoord,laser.head.yCoord,laser.head.zCoord);
  laser.update();
  GL11.glRotatef((float)laser.angleZ,0,1,0);
  GL11.glRotatef((float)laser.angleY,0,0,1);
  textureManager.bindTexture(texture);
  initScaledBoxes(world);
  doRenderLaserLine(laser.renderSize,laser.laserTexAnimation);
  GL11.glPopMatrix();
  GL11.glLineWidth(OPTION_LASER_FALLBACK_PIXELS.getAsInt());
  GL11.glBegin(GL11.GL_LINES);
  GL11.glTexCoord2d(0.9999d,0.9999d);
  GL11.glVertex3d(laser.head.xCoord,laser.head.yCoord,laser.head.zCoord);
  GL11.glVertex3d(laser.tail.xCoord,laser.tail.yCoord,laser.tail.zCoord);
  GL11.glEnd();
}","public static void doRenderLaser(World world,TextureManager textureManager,LaserData laser,ResourceLocation texture){
  if (!laser.isVisible || texture == null) {
    return;
  }
  Minecraft.getMinecraft().mcProfiler.startSection(""String_Node_Str"");
  Minecraft.getMinecraft().mcProfiler.startSection(""String_Node_Str"");
  GL11.glPushMatrix();
  GL11.glTranslated(laser.head.xCoord,laser.head.yCoord,laser.head.zCoord);
  laser.update();
  GL11.glRotatef((float)laser.angleZ,0,1,0);
  GL11.glRotatef((float)laser.angleY,0,0,1);
  textureManager.bindTexture(texture);
  initScaledBoxes(world);
  Minecraft.getMinecraft().mcProfiler.endStartSection(""String_Node_Str"");
  doRenderLaserLine(laser.renderSize,laser.laserTexAnimation);
  Minecraft.getMinecraft().mcProfiler.endStartSection(""String_Node_Str"");
  GL11.glPopMatrix();
  GL11.glLineWidth(OPTION_LASER_FALLBACK_PIXELS.getAsInt());
  GL11.glBegin(GL11.GL_LINES);
  GL11.glTexCoord2d(0.9999d,0.9999d);
  GL11.glVertex3d(laser.head.xCoord,laser.head.yCoord,laser.head.zCoord);
  GL11.glVertex3d(laser.tail.xCoord,laser.tail.yCoord,laser.tail.zCoord);
  GL11.glEnd();
  Minecraft.getMinecraft().mcProfiler.endSection();
  Minecraft.getMinecraft().mcProfiler.endSection();
}",0.8083657587548638
156469,"@Override public void renderTileEntityAt(TileMarker marker,double x,double y,double z,float partialTicks,int destroyStage){
  if (marker != null) {
    GL11.glPushMatrix();
    GL11.glPushAttrib(GL11.GL_ENABLE_BIT);
    GL11.glTranslated(x,y,z);
    GL11.glTranslated(-marker.getPos().getX(),-marker.getPos().getY(),-marker.getPos().getZ());
    if (marker.lasers != null)     for (    LaserData laser : marker.lasers) {
      if (laser != null) {
        GL11.glPushMatrix();
        RenderLaser.doRenderLaser(TileEntityRendererDispatcher.instance.worldObj,Minecraft.getMinecraft().renderEngine,laser,EntityLaser.LASER_RED);
        GL11.glPopMatrix();
      }
    }
    if (marker.signals != null)     for (    LaserData laser : marker.signals) {
      if (laser != null) {
        GL11.glPushMatrix();
        RenderLaser.doRenderLaser(TileEntityRendererDispatcher.instance.worldObj,Minecraft.getMinecraft().renderEngine,laser,EntityLaser.LASER_BLUE);
        GL11.glPopMatrix();
      }
    }
    GL11.glPopAttrib();
    GL11.glPopMatrix();
  }
}","@Override public void renderTileEntityAt(TileMarker marker,double x,double y,double z,float partialTicks,int destroyStage){
  if (marker != null) {
    Minecraft.getMinecraft().mcProfiler.startSection(""String_Node_Str"");
    Minecraft.getMinecraft().mcProfiler.startSection(""String_Node_Str"");
    GL11.glPushMatrix();
    GL11.glPushAttrib(GL11.GL_ENABLE_BIT);
    GL11.glTranslated(x,y,z);
    GL11.glTranslated(-marker.getPos().getX(),-marker.getPos().getY(),-marker.getPos().getZ());
    Minecraft.getMinecraft().mcProfiler.startSection(""String_Node_Str"");
    if (marker.lasers != null)     for (    LaserData laser : marker.lasers) {
      if (laser != null) {
        GL11.glPushMatrix();
        RenderLaser.doRenderLaser(TileEntityRendererDispatcher.instance.worldObj,Minecraft.getMinecraft().renderEngine,laser,EntityLaser.LASER_RED);
        GL11.glPopMatrix();
      }
    }
    Minecraft.getMinecraft().mcProfiler.endStartSection(""String_Node_Str"");
    if (marker.signals != null)     for (    LaserData laser : marker.signals) {
      if (laser != null) {
        GL11.glPushMatrix();
        RenderLaser.doRenderLaser(TileEntityRendererDispatcher.instance.worldObj,Minecraft.getMinecraft().renderEngine,laser,EntityLaser.LASER_BLUE);
        GL11.glPopMatrix();
      }
    }
    Minecraft.getMinecraft().mcProfiler.endSection();
    GL11.glPopAttrib();
    GL11.glPopMatrix();
    Minecraft.getMinecraft().mcProfiler.endSection();
    Minecraft.getMinecraft().mcProfiler.endSection();
  }
}",0.8212749315604224
156470,"@Override public void renderTileEntityAt(TileLaser laser,double x,double y,double z,float f,int i){
  if (laser != null) {
    GL11.glPushMatrix();
    GL11.glTranslated(x,y,z);
    GL11.glTranslated(-laser.getPos().getX(),-laser.getPos().getY(),-laser.getPos().getZ());
    GL11.glPushMatrix();
    RenderLaser.doRenderLaser(TileEntityRendererDispatcher.instance.worldObj,TileEntityRendererDispatcher.instance.renderEngine,laser.laser,laser.getTexture());
    GL11.glPopMatrix();
    GL11.glPopMatrix();
  }
}","@Override public void renderTileEntityAt(TileLaser laser,double x,double y,double z,float f,int i){
  Minecraft.getMinecraft().mcProfiler.startSection(""String_Node_Str"");
  Minecraft.getMinecraft().mcProfiler.startSection(""String_Node_Str"");
  if (laser != null) {
    GL11.glPushMatrix();
    GL11.glTranslated(x,y,z);
    GL11.glTranslated(-laser.getPos().getX(),-laser.getPos().getY(),-laser.getPos().getZ());
    GL11.glPushMatrix();
    RenderLaser.doRenderLaser(TileEntityRendererDispatcher.instance.worldObj,TileEntityRendererDispatcher.instance.renderEngine,laser.laser,laser.getTexture());
    GL11.glPopMatrix();
    GL11.glPopMatrix();
  }
  Minecraft.getMinecraft().mcProfiler.endSection();
  Minecraft.getMinecraft().mcProfiler.endSection();
}",0.8056872037914692
156471,"@Override public void readData(ByteBuf data){
  int blockId=data.readUnsignedShort();
  Block block;
  if (blockId > 0) {
    block=Block.getBlockById(blockId);
  }
 else {
    block=null;
  }
  int flags=data.readUnsignedByte();
  int meta=flags & 0x0F;
  state=block.getStateFromMeta(meta);
  transparent=(flags & 0x80) > 0;
  renderAsHollow=(flags & 0x40) > 0;
}","@Override public void readData(ByteBuf data){
  int blockId=data.readUnsignedShort();
  Block block;
  if (blockId > 0) {
    block=Block.getBlockById(blockId);
  }
 else {
    block=Blocks.stone;
  }
  int flags=data.readUnsignedByte();
  int meta=flags & 0x0F;
  state=block.getStateFromMeta(meta);
  transparent=(flags & 0x80) > 0;
  renderAsHollow=(flags & 0x40) > 0;
}",0.978319783197832
156472,"@Override public PluggableModelKeyCutout<?> getModelRenderKey(EnumFacing side){
  return null;
}","@Override public ModelKeyFacade getModelRenderKey(EnumWorldBlockLayer layer,EnumFacing side){
  if (layer == EnumWorldBlockLayer.CUTOUT) {
    return new ModelKeyFacade(side,state,isHollow());
  }
  return null;
}",0.3171521035598705
156473,"protected void notifyBlocksOfNeighborChange(EnumFacing side){
  container.getWorld().notifyBlockOfStateChange(container.getPos().offset(side),BuildCraftTransport.genericPipeBlock);
}","protected void notifyBlocksOfNeighborChange(EnumFacing side){
  container.getWorld().notifyNeighborsOfStateChange(container.getPos().offset(side),BuildCraftTransport.genericPipeBlock);
}",0.967391304347826
156474,"private void fireRenderer(EnumEngineType type,final EnumFacing face,float progress,BlockPos pos){
  if (progress > 0.5) {
    progress=1 - progress;
  }
  progress*=2;
  final Vec3 coord=Utils.convert(pos);
  IBlockLocation locationFormula=new IBlockLocation(){
    @Override public Vec3 transformToWorld(    Vec3 vec){
      return coord;
    }
  }
;
  IFacingLocation faceFormula=new RotatedFacingLocation(EnumFacing.UP,face);
  GL11.glPushMatrix();
  RenderUtils.translate(Utils.VEC_HALF);
  if (face == EnumFacing.DOWN) {
    GL11.glRotated(180,1,0,0);
  }
 else   if (face == EnumFacing.UP) {
  }
 else {
    GL11.glRotated(90,1,0,0);
    int angle=0;
    EnumFacing tempFace=face;
    while (tempFace != EnumFacing.SOUTH) {
      angle+=90;
      tempFace=tempFace.rotateYCCW();
    }
    GL11.glRotated(angle,0,0,1);
    GL11.glRotated(-angle,0,1,0);
  }
  RenderUtils.translate(Utils.vec3(-0.5));
  EntityResizableCuboid chamberCuboid=new EntityResizableCuboid(getWorld());
  chamberCuboid.texture=spriteChamber;
  chamberCuboid.setTextureOffset(new Vec3(3,0,3));
  Vec3 chamberSize=Utils.divide(new Vec3(10,progress * 8,10),16);
  chamberCuboid.setSize(chamberSize);
  Vec3 chamberOffset=Utils.divide(new Vec3(3,4,3),16);
  RenderUtils.translate(chamberOffset);
  RenderResizableCuboid.INSTANCE.renderCube(chamberCuboid,EnumShadeArgument.FACE_LIGHT,locationFormula,faceFormula);
  RenderUtils.translate(Utils.multiply(chamberOffset,-1));
  EntityResizableCuboid boxCuboid=new EntityResizableCuboid(getWorld());
  boxCuboid.texture=spriteBoxSide.get(type);
  boxCuboid.makeClient();
  boxCuboid.textures[EnumFacing.UP.ordinal()]=spriteBoxTop.get(type);
  boxCuboid.textures[EnumFacing.DOWN.ordinal()]=spriteBoxTop.get(type);
  Vec3 boxSize=Utils.divide(new Vec3(16,4,16),16);
  boxCuboid.setSize(boxSize);
  Vec3 boxOffset=new Vec3(0,4 / 16d + progress / 2,0);
  RenderUtils.translate(boxOffset);
  RenderResizableCuboid.INSTANCE.renderCube(boxCuboid,EnumShadeArgument.FACE_LIGHT,locationFormula,faceFormula);
  RenderUtils.translate(Utils.multiply(boxOffset,-1));
  GL11.glPopMatrix();
}","private void fireRenderer(EnumEngineType type,final EnumFacing face,float progress,BlockPos pos){
  if (progress > 0.5) {
    progress=1 - progress;
  }
  progress*=2;
  final Vec3 coord=Utils.convert(pos);
  IBlockLocation locationFormula=new IBlockLocation(){
    @Override public Vec3 transformToWorld(    Vec3 vec){
      return coord;
    }
  }
;
  IFacingLocation faceFormula=new RotatedFacingLocation(EnumFacing.UP,face);
  GL11.glPushMatrix();
  RenderUtils.translate(Utils.VEC_HALF);
  if (face == EnumFacing.DOWN) {
    GL11.glRotated(180,1,0,0);
  }
 else   if (face == EnumFacing.UP) {
  }
 else {
    GL11.glRotated(90,1,0,0);
    int angle=0;
    EnumFacing tempFace=face;
    while (tempFace != EnumFacing.SOUTH) {
      angle+=90;
      tempFace=tempFace.rotateYCCW();
    }
    GL11.glRotated(angle,0,0,1);
    GL11.glRotated(-angle,0,1,0);
  }
  RenderUtils.translate(Utils.vec3(-0.5));
  EntityResizableCuboid chamberCuboid=new EntityResizableCuboid(getWorld());
  chamberCuboid.texture=spriteChamber;
  chamberCuboid.setTextureOffset(new Vec3(3,0,3));
  Vec3 chamberSize=Utils.divide(new Vec3(10,progress * 8,10),16);
  chamberCuboid.setSize(chamberSize);
  Vec3 chamberOffset=Utils.divide(new Vec3(3,4,3),16);
  RenderUtils.translate(chamberOffset);
  RenderResizableCuboid.INSTANCE.renderCube(chamberCuboid,EnumShadeArgument.FACE_LIGHT,locationFormula,faceFormula);
  RenderUtils.translate(Utils.multiply(chamberOffset,-1));
  EntityResizableCuboid boxCuboid=new EntityResizableCuboid(getWorld());
  boxCuboid.texture=spriteBoxSide.get(type);
  boxCuboid.makeClient();
  boxCuboid.textures[EnumFacing.UP.ordinal()]=spriteBoxTop.get(type);
  boxCuboid.textures[EnumFacing.DOWN.ordinal()]=spriteBoxTop.get(type);
  Vec3 boxSize=Utils.divide(new Vec3(16,4,16),16);
  boxCuboid.setSize(boxSize);
  Vec3 boxOffset=new Vec3(0,4 / 16d + progress / 2,0);
  RenderUtils.translate(boxOffset);
  RenderResizableCuboid.INSTANCE.renderCube(boxCuboid,EnumShadeArgument.FACE_LIGHT,locationFormula,faceFormula);
  RenderUtils.translate(Utils.multiply(boxOffset,-1));
  GlStateManager.enableAlpha();
  GL11.glPopMatrix();
}",0.9924242424242424
156475,"public static ChuteRenderModel create(IBakedModel parent){
  if (parent == null) {
    throw new IllegalStateException(""String_Node_Str"" + ""String_Node_Str"");
  }
  List<BakedQuad> lst=Lists.newArrayList(parent.getGeneralQuads());
  Vector3f eastSouthUp__=new Vector3f(15 / 16F,9 / 16F,15 / 16F);
  Vector3f eastSouthDown=new Vector3f(11 / 16F,3 / 16F,11 / 16F);
  Vector3f eastNorthUp__=new Vector3f(15 / 16F,9 / 16F,1 / 16F);
  Vector3f eastNorthDown=new Vector3f(11 / 16F,3 / 16F,5 / 16F);
  Vector3f westSouthUp__=new Vector3f(1 / 16F,9 / 16F,15 / 16F);
  Vector3f westSouthDown=new Vector3f(5 / 16F,3 / 16F,11 / 16F);
  Vector3f westNorthUp__=new Vector3f(1 / 16F,9 / 16F,1 / 16F);
  Vector3f westNorthDown=new Vector3f(5 / 16F,3 / 16F,5 / 16F);
  float[] uvs=new float[4];
  uvs[U_MIN]=sideTexture.getMinU();
  uvs[U_MAX]=sideTexture.getMaxU();
  uvs[V_MIN]=sideTexture.getMinV();
  uvs[V_MAX]=sideTexture.getInterpolatedV(8);
  MutableQuad[] quads={BCModelHelper.createFace(EnumFacing.EAST,eastNorthDown,eastNorthUp__,eastSouthUp__,eastSouthDown,uvs),BCModelHelper.createFace(EnumFacing.WEST,westSouthDown,westSouthUp__,westNorthUp__,westNorthDown,uvs),BCModelHelper.createFace(EnumFacing.NORTH,westNorthDown,westNorthUp__,eastNorthUp__,eastNorthDown,uvs),BCModelHelper.createFace(EnumFacing.SOUTH,eastSouthDown,eastSouthUp__,westSouthUp__,westSouthDown,uvs)};
  for (  MutableQuad q : quads) {
    q.setCalculatedDiffuse();
  }
  BCModelHelper.appendBakeQuads(lst,quads);
  return new ChuteRenderModel(ImmutableList.copyOf(lst),parent);
}","public static ChuteRenderModel create(IBakedModel parent){
  if (parent == null) {
    throw new IllegalStateException(""String_Node_Str"" + ""String_Node_Str"");
  }
  List<BakedQuad> lst=Lists.newArrayList(parent.getGeneralQuads());
  Vector3f eastSouthUp__=new Vector3f(15 / 16F,9 / 16F,15 / 16F);
  Vector3f eastSouthDown=new Vector3f(11 / 16F,3 / 16F,11 / 16F);
  Vector3f eastNorthUp__=new Vector3f(15 / 16F,9 / 16F,1 / 16F);
  Vector3f eastNorthDown=new Vector3f(11 / 16F,3 / 16F,5 / 16F);
  Vector3f westSouthUp__=new Vector3f(1 / 16F,9 / 16F,15 / 16F);
  Vector3f westSouthDown=new Vector3f(5 / 16F,3 / 16F,11 / 16F);
  Vector3f westNorthUp__=new Vector3f(1 / 16F,9 / 16F,1 / 16F);
  Vector3f westNorthDown=new Vector3f(5 / 16F,3 / 16F,5 / 16F);
  float[] uvs=new float[4];
  uvs[U_MIN]=sideTexture.getMinU();
  uvs[U_MAX]=sideTexture.getMaxU();
  uvs[V_MIN]=sideTexture.getMinV();
  uvs[V_MAX]=sideTexture.getInterpolatedV(8);
  MutableQuad[] quads={BCModelHelper.createFace(EnumFacing.EAST,eastNorthDown,eastNorthUp__,eastSouthUp__,eastSouthDown,uvs),BCModelHelper.createFace(EnumFacing.WEST,westSouthDown,westSouthUp__,westNorthUp__,westNorthDown,uvs),BCModelHelper.createFace(EnumFacing.NORTH,westNorthDown,westNorthUp__,eastNorthUp__,eastNorthDown,uvs),BCModelHelper.createFace(EnumFacing.SOUTH,eastSouthDown,eastSouthUp__,westSouthUp__,westSouthDown,uvs)};
  for (  MutableQuad q : quads) {
    q.setCalculatedDiffuse();
  }
  BCModelHelper.appendBakeQuads(lst,MutableQuad.ITEM_BLOCK_PADDING,quads);
  return new ChuteRenderModel(ImmutableList.copyOf(lst),parent);
}",0.990073647134166
156476,"protected ChuteRenderModel(ImmutableList<BakedQuad> quads,IBakedModel parent){
  super(quads,null,DefaultVertexFormats.BLOCK);
  this.parent=parent;
}","protected ChuteRenderModel(ImmutableList<BakedQuad> quads,IBakedModel parent){
  super(quads,null,MutableQuad.ITEM_BLOCK_PADDING);
  this.parent=parent;
}",0.868421052631579
156477,"/** 
 * Computes the PacketFluidUpdate packet for transmission to a client
 * @param initPacket everything is sent, no delta stuff ( first packet )
 * @param persistChange The render cache change is persisted
 * @return PacketFluidUpdate liquid update packet 
 */
private PacketFluidUpdate computeFluidUpdate(boolean initPacket,boolean persistChange){
  boolean changed=false;
  BitSet delta=new BitSet(8);
  FluidRenderData renderCacheCopy=this.renderCache;
  if (initPacket || (fluidType == null && renderCacheCopy.fluidID != 0) || (fluidType != null && renderCacheCopy.fluidID != fluidType.getFluid().getID())) {
    changed=true;
    renderCache.fluidID=fluidType != null ? fluidType.getFluid().getID() : 0;
    renderCache.color=fluidType != null ? fluidType.getFluid().getColor(fluidType) : 0;
    renderCache.flags=FluidRenderData.getFlags(fluidType);
    delta.set(0);
  }
  for (  int dir : orientations) {
    int pamount=renderCache.amount[dir];
    int camount=sections[dir].amount;
    int displayQty=(pamount * 4 + camount) / 5;
    if (displayQty == 0 && camount > 0 || initPacket) {
      displayQty=camount;
    }
    displayQty=Math.min(getCapacity(),displayQty);
    if (pamount != displayQty || initPacket) {
      changed=true;
      renderCache.amount[dir]=displayQty;
      delta.set(dir + 1);
    }
  }
  renderCacheCopy.flow=flow;
  for (int i=0; i < 6; i++) {
    if (renderCache.flow[i] != renderCacheCopy.flow[i]) {
      changed=true;
    }
  }
  if (persistChange) {
    this.renderCache=renderCacheCopy;
  }
  if (changed || initPacket) {
    PacketFluidUpdate packet=new PacketFluidUpdate(container,initPacket);
    packet.renderCache=renderCacheCopy;
    packet.delta=delta;
    packet.flow=renderCacheCopy.flow;
    return packet;
  }
  return null;
}","/** 
 * Computes the PacketFluidUpdate packet for transmission to a client
 * @param initPacket everything is sent, no delta stuff ( first packet )
 * @param persistChange The render cache change is persisted
 * @return PacketFluidUpdate liquid update packet 
 */
private PacketFluidUpdate computeFluidUpdate(boolean initPacket,boolean persistChange){
  boolean changed=false;
  BitSet delta=new BitSet(8);
  FluidRenderData renderCacheCopy=this.renderCache;
  if (initPacket || (fluidType == null && renderCacheCopy.fluidID != 0) || (fluidType != null && renderCacheCopy.fluidID != fluidType.getFluid().getID())) {
    changed=true;
    renderCache.fluidID=fluidType != null ? fluidType.getFluid().getID() : 0;
    renderCache.color=fluidType != null ? fluidType.getFluid().getColor(fluidType) : -1;
    renderCache.flags=FluidRenderData.getFlags(fluidType);
    delta.set(0);
  }
  for (  int dir : orientations) {
    int pamount=renderCache.amount[dir];
    int camount=sections[dir].amount;
    int displayQty=(pamount * 4 + camount) / 5;
    if (displayQty == 0 && camount > 0 || initPacket) {
      displayQty=camount;
    }
    displayQty=Math.min(getCapacity(),displayQty);
    if (pamount != displayQty || initPacket) {
      changed=true;
      renderCache.amount[dir]=displayQty;
      delta.set(dir + 1);
    }
  }
  renderCacheCopy.flow=flow;
  for (int i=0; i < 6; i++) {
    if (renderCache.flow[i] != renderCacheCopy.flow[i]) {
      changed=true;
    }
  }
  if (persistChange) {
    this.renderCache=renderCacheCopy;
  }
  if (changed || initPacket) {
    PacketFluidUpdate packet=new PacketFluidUpdate(container,initPacket);
    packet.renderCache=renderCacheCopy;
    packet.delta=delta;
    packet.flow=renderCacheCopy.flow;
    return packet;
  }
  return null;
}",0.9991598991879026
156478,"private List<BakedQuad> bakeTransclucent(LensPluggable lens,EnumFacing face,VertexFormat format){
  EnumDyeColor colour=lens.getColour();
  TextureAtlasSprite sprite=spriteTranslucent;
  int shade=-1;
  if (colour == null) {
    if (lens.isFilter)     return Collections.emptyList();
    sprite=spriteWaterFlow;
  }
 else {
    shade=ColorUtils.getLightHex(colour);
    if (format == DefaultVertexFormats.ITEM)     shade=ColorUtils.convertBGRAtoRGBA(shade);
  }
  List<BakedQuad> quads=Lists.newArrayList();
  List<BakedQuad> bakedQuads=renderLens(modelTranslucent(),sprite,format);
  Matrix4f matrix=MatrixUtils.rotateTowardsFace(face);
  for (  BakedQuad quad : bakedQuads) {
    MutableQuad mutable=MutableQuad.create(quad);
    mutable.setTint(shade);
    mutable.transform(matrix);
    BCModelHelper.appendBakeQuads(quads,format,mutable);
  }
  return quads;
}","private List<BakedQuad> bakeTransclucent(LensPluggable lens,EnumFacing face,VertexFormat format){
  EnumDyeColor colour=lens.getColour();
  TextureAtlasSprite sprite=spriteTranslucent;
  int shade=-1;
  if (colour == null) {
    if (lens.isFilter)     return Collections.emptyList();
    sprite=spriteWaterFlow;
  }
 else {
    shade=ColorUtils.getLightHex(colour);
  }
  List<BakedQuad> quads=Lists.newArrayList();
  List<BakedQuad> bakedQuads=renderLens(modelTranslucent(),sprite,format);
  Matrix4f matrix=MatrixUtils.rotateTowardsFace(face);
  for (  BakedQuad quad : bakedQuads) {
    MutableQuad mutable=MutableQuad.create(quad);
    mutable.setTint(shade);
    mutable.transform(matrix);
    BCModelHelper.appendBakeQuads(quads,format,mutable);
  }
  return quads;
}",0.9438339438339438
156479,"static void renderFluidPipe(Pipe<PipeTransportFluids> pipe,double x,double y,double z){
  PipeTransportFluids trans=pipe.transport;
  boolean needsRender=false;
  FluidRenderData renderData=trans.renderCache;
  for (int i=0; i < 7; ++i) {
    if (renderData.amount[i] > 0) {
      needsRender=true;
      break;
    }
  }
  if (!needsRender) {
    return;
  }
  GL11.glPushMatrix();
  GL11.glPushAttrib(GL11.GL_ENABLE_BIT);
  GlStateManager.enableCull();
  GlStateManager.disableLighting();
  GlStateManager.enableBlend();
  GlStateManager.blendFunc(GL11.GL_SRC_ALPHA,GL11.GL_ONE_MINUS_SRC_ALPHA);
  GL11.glTranslatef((float)x,(float)y,(float)z);
  DisplayFluidList dfl=getDisplayFluidList(renderData.fluidID);
  if (dfl != null) {
    long ms=System.currentTimeMillis();
    long diff=ms - trans.clientLastDisplayTime;
    if (trans.clientLastDisplayTime == 0 || diff <= 0) {
      diff=1;
    }
    trans.clientLastDisplayTime=ms;
    TextureAtlasSprite sprite=FluidRenderer.getFluidTexture(FluidRegistry.getFluid(renderData.fluidID),FluidType.STILL);
    RenderUtils.setGLColorFromInt(renderData.color);
    Minecraft.getMinecraft().getTextureManager().bindTexture(TextureMap.locationBlocksTexture);
    boolean above=renderData.amount[EnumFacing.UP.ordinal()] > 0;
    boolean sides=false;
    for (    EnumFacing connection : EnumFacing.VALUES) {
      float amount=renderData.amount[connection.ordinal()] / (float)trans.getCapacity();
      if (amount > 0) {
        int stage=(int)(amount * (DISPLAY_STAGES - 1));
        if (stage >= DISPLAY_STAGES)         stage=DISPLAY_STAGES - 1;
        sides=true;
        GL11.glPushMatrix();
        GL11.glCallList(dfl.sideFaces[stage][connection.ordinal()]);
        GL11.glPopMatrix();
      }
    }
    if (above) {
      float amount=renderData.amount[6] / (float)trans.getCapacity();
      if (amount > 0) {
        int stage=(int)(amount * (DISPLAY_STAGES - 1));
        if (stage >= DISPLAY_STAGES)         stage=DISPLAY_STAGES - 1;
        GL11.glPushMatrix();
        GL11.glCallList(dfl.centerFacesVertical[stage]);
        GL11.glPopMatrix();
      }
    }
    if (sides) {
      float amount=renderData.amount[6] / (float)trans.getCapacity();
      if (amount > 0) {
        int stage=(int)(amount * (DISPLAY_STAGES - 1));
        if (stage >= DISPLAY_STAGES)         stage=DISPLAY_STAGES - 1;
        GL11.glPushMatrix();
        GL11.glCallList(dfl.centerFaces[stage]);
        GL11.glPopMatrix();
      }
    }
  }
  GlStateManager.color(1,1,1,1);
  GlStateManager.enableLighting();
  GlStateManager.disableBlend();
  GlStateManager.disableCull();
  GL11.glPopAttrib();
  GL11.glPopMatrix();
}","static void renderFluidPipe(Pipe<PipeTransportFluids> pipe,double x,double y,double z){
  PipeTransportFluids trans=pipe.transport;
  boolean needsRender=false;
  FluidRenderData renderData=trans.renderCache;
  for (int i=0; i < 7; ++i) {
    if (renderData.amount[i] > 0) {
      needsRender=true;
      break;
    }
  }
  if (!needsRender) {
    return;
  }
  GL11.glPushMatrix();
  GL11.glPushAttrib(GL11.GL_ENABLE_BIT);
  GlStateManager.enableCull();
  GlStateManager.disableLighting();
  GlStateManager.enableBlend();
  GlStateManager.blendFunc(GL11.GL_SRC_ALPHA,GL11.GL_ONE_MINUS_SRC_ALPHA);
  GL11.glTranslatef((float)x,(float)y,(float)z);
  DisplayFluidList dfl=getDisplayFluidList(renderData.fluidID);
  if (dfl != null) {
    long ms=System.currentTimeMillis();
    long diff=ms - trans.clientLastDisplayTime;
    if (trans.clientLastDisplayTime == 0 || diff <= 0) {
      diff=1;
    }
    trans.clientLastDisplayTime=ms;
    RenderUtils.setGLColorFromInt(-1);
    Minecraft.getMinecraft().getTextureManager().bindTexture(TextureMap.locationBlocksTexture);
    boolean above=renderData.amount[EnumFacing.UP.ordinal()] > 0;
    boolean sides=false;
    for (    EnumFacing connection : EnumFacing.VALUES) {
      float amount=renderData.amount[connection.ordinal()] / (float)trans.getCapacity();
      if (amount > 0) {
        int stage=(int)(amount * (DISPLAY_STAGES - 1));
        if (stage >= DISPLAY_STAGES)         stage=DISPLAY_STAGES - 1;
        sides=true;
        GL11.glPushMatrix();
        GL11.glCallList(dfl.sideFaces[stage][connection.ordinal()]);
        GL11.glPopMatrix();
      }
    }
    if (above) {
      float amount=renderData.amount[6] / (float)trans.getCapacity();
      if (amount > 0) {
        int stage=(int)(amount * (DISPLAY_STAGES - 1));
        if (stage >= DISPLAY_STAGES)         stage=DISPLAY_STAGES - 1;
        GL11.glPushMatrix();
        GL11.glCallList(dfl.centerFacesVertical[stage]);
        GL11.glPopMatrix();
      }
    }
    if (sides) {
      float amount=renderData.amount[6] / (float)trans.getCapacity();
      if (amount > 0) {
        int stage=(int)(amount * (DISPLAY_STAGES - 1));
        if (stage >= DISPLAY_STAGES)         stage=DISPLAY_STAGES - 1;
        GL11.glPushMatrix();
        GL11.glCallList(dfl.centerFaces[stage]);
        GL11.glPopMatrix();
      }
    }
  }
  GlStateManager.color(1,1,1,1);
  GlStateManager.enableLighting();
  GlStateManager.disableBlend();
  GlStateManager.disableCull();
  GL11.glPopAttrib();
  GL11.glPopMatrix();
}",0.9731712024705657
156480,"private ModelKeyGate getState(ItemStack stack){
  GateMaterial material=ItemGate.getMaterial(stack);
  GateLogic logic=ItemGate.getLogic(stack);
  Set<IGateExpansion> expansions=ItemGate.getInstalledExpansions(stack);
  Set<IGateStaticRenderState> states=Sets.newHashSet();
  for (  IGateExpansion exp : expansions)   states.add(exp.getRenderState());
  return new ModelKeyGate(EnumFacing.UP,material,logic,expansions.toArray(new IGateExpansion[0]));
}","private ModelKeyGate getState(ItemStack stack){
  GateMaterial material=ItemGate.getMaterial(stack);
  GateLogic logic=ItemGate.getLogic(stack);
  Set<IGateExpansion> expansions=ItemGate.getInstalledExpansions(stack);
  return new ModelKeyGate(EnumFacing.UP,material,logic,expansions.toArray(new IGateExpansion[0]));
}",0.825974025974026
156481,"public static void loadRecipes(){
  BCRegistry.INSTANCE.addCraftingRecipe(new ItemStack(laserBlock),""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",'O',Blocks.obsidian,'R',""String_Node_Str"",'D',""String_Node_Str"");
  BCRegistry.INSTANCE.addCraftingRecipe(new ItemStack(laserBlock),""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",'O',Blocks.obsidian,'R',""String_Node_Str"",'D',""String_Node_Str"");
  BCRegistry.INSTANCE.addCraftingRecipe(new ItemStack(laserBlock),""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",'O',Blocks.obsidian,'R',""String_Node_Str"",'D',""String_Node_Str"");
  BCRegistry.INSTANCE.addCraftingRecipe(new ItemStack(laserBlock),""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",'O',Blocks.obsidian,'R',""String_Node_Str"",'D',""String_Node_Str"");
  BCRegistry.INSTANCE.addCraftingRecipe(new ItemStack(assemblyTableBlock,1,0),""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",'O',Blocks.obsidian,'R',""String_Node_Str"",'D',""String_Node_Str"",'G',""String_Node_Str"");
  BCRegistry.INSTANCE.addCraftingRecipe(new ItemStack(assemblyTableBlock,1,2),""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",'O',Blocks.obsidian,'I',""String_Node_Str"",'C',new ItemStack(redstoneChipset,1,0),'G',""String_Node_Str"");
  BCRegistry.INSTANCE.addCraftingRecipe(new ItemStack(assemblyTableBlock,1,3),""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",'O',Blocks.obsidian,'I',""String_Node_Str"",'C',new ItemStack(redstoneChipset,1,0),'G',""String_Node_Str"");
  BCRegistry.INSTANCE.addCraftingRecipe(new ItemStack(assemblyTableBlock,1,4),""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",'O',Blocks.obsidian,'R',new ItemStack(redstoneChipset,1,0),'C',""String_Node_Str"",'G',""String_Node_Str"");
  BCRegistry.INSTANCE.addCraftingRecipe(new ItemStack(assemblyTableBlock,1,5),""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",'O',Blocks.obsidian,'W',""String_Node_Str"",'G',""String_Node_Str"",'R',new ItemStack(redstoneChipset,1,0));
  BCRegistry.INSTANCE.addCraftingRecipe(new ItemStack(packagerBlock,1,0),""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",'I',""String_Node_Str"",'C',""String_Node_Str"",'P',Blocks.piston);
  BuildcraftRecipeRegistry.assemblyTable.addRecipe(""String_Node_Str"",Math.round(100000 * chipsetCostMultiplier),Chipset.RED.getStack(),""String_Node_Str"");
  BuildcraftRecipeRegistry.assemblyTable.addRecipe(""String_Node_Str"",Math.round(200000 * chipsetCostMultiplier),Chipset.IRON.getStack(),""String_Node_Str"",""String_Node_Str"");
  BuildcraftRecipeRegistry.assemblyTable.addRecipe(""String_Node_Str"",Math.round(400000 * chipsetCostMultiplier),Chipset.GOLD.getStack(),""String_Node_Str"",""String_Node_Str"");
  BuildcraftRecipeRegistry.assemblyTable.addRecipe(""String_Node_Str"",Math.round(800000 * chipsetCostMultiplier),Chipset.DIAMOND.getStack(),""String_Node_Str"",""String_Node_Str"");
  BuildcraftRecipeRegistry.assemblyTable.addRecipe(""String_Node_Str"",Math.round(1200000 * chipsetCostMultiplier),Chipset.EMERALD.getStack(),""String_Node_Str"",""String_Node_Str"");
  BuildcraftRecipeRegistry.assemblyTable.addRecipe(""String_Node_Str"",Math.round(400000 * chipsetCostMultiplier),Chipset.PULSATING.getStack(2),""String_Node_Str"",Items.ender_pearl);
  BuildcraftRecipeRegistry.assemblyTable.addRecipe(""String_Node_Str"",Math.round(600000 * chipsetCostMultiplier),Chipset.QUARTZ.getStack(),""String_Node_Str"",""String_Node_Str"");
  BuildcraftRecipeRegistry.assemblyTable.addRecipe(""String_Node_Str"",Math.round(600000 * chipsetCostMultiplier),Chipset.COMP.getStack(),""String_Node_Str"",Items.comparator);
  BuildcraftRecipeRegistry.assemblyTable.addRecipe(""String_Node_Str"",10000000,new ItemStack(redstoneCrystal),new ItemStack(Blocks.redstone_block));
}","public static void loadRecipes(){
  BCRegistry.INSTANCE.addCraftingRecipe(new ItemStack(laserBlock),""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",'O',Blocks.obsidian,'R',""String_Node_Str"",'D',""String_Node_Str"");
  BCRegistry.INSTANCE.addCraftingRecipe(new ItemStack(laserBlock),""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",'O',Blocks.obsidian,'R',""String_Node_Str"",'D',""String_Node_Str"");
  BCRegistry.INSTANCE.addCraftingRecipe(new ItemStack(laserBlock),""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",'O',Blocks.obsidian,'R',""String_Node_Str"",'D',""String_Node_Str"");
  BCRegistry.INSTANCE.addCraftingRecipe(new ItemStack(laserBlock),""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",'O',Blocks.obsidian,'R',""String_Node_Str"",'D',""String_Node_Str"");
  BCRegistry.INSTANCE.addCraftingRecipe(new ItemStack(assemblyTableBlock,1,0),""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",'O',Blocks.obsidian,'R',""String_Node_Str"",'D',""String_Node_Str"",'G',""String_Node_Str"");
  BCRegistry.INSTANCE.addCraftingRecipe(new ItemStack(assemblyTableBlock,1,1),""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",'O',Blocks.obsidian,'W',Blocks.crafting_table,'C',Blocks.chest,'R',new ItemStack(redstoneChipset,1,0));
  BCRegistry.INSTANCE.addCraftingRecipe(new ItemStack(assemblyTableBlock,1,2),""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",'O',Blocks.obsidian,'I',""String_Node_Str"",'C',new ItemStack(redstoneChipset,1,0),'G',""String_Node_Str"");
  BCRegistry.INSTANCE.addCraftingRecipe(new ItemStack(assemblyTableBlock,1,3),""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",'O',Blocks.obsidian,'I',""String_Node_Str"",'C',new ItemStack(redstoneChipset,1,0),'G',""String_Node_Str"");
  BCRegistry.INSTANCE.addCraftingRecipe(new ItemStack(assemblyTableBlock,1,4),""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",'O',Blocks.obsidian,'R',new ItemStack(redstoneChipset,1,0),'C',""String_Node_Str"",'G',""String_Node_Str"");
  BCRegistry.INSTANCE.addCraftingRecipe(new ItemStack(assemblyTableBlock,1,5),""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",'O',Blocks.obsidian,'W',""String_Node_Str"",'G',""String_Node_Str"",'R',new ItemStack(redstoneChipset,1,0));
  BCRegistry.INSTANCE.addCraftingRecipe(new ItemStack(packagerBlock,1,0),""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",'I',""String_Node_Str"",'C',""String_Node_Str"",'P',Blocks.piston);
  BuildcraftRecipeRegistry.assemblyTable.addRecipe(""String_Node_Str"",Math.round(100000 * chipsetCostMultiplier),Chipset.RED.getStack(),""String_Node_Str"");
  BuildcraftRecipeRegistry.assemblyTable.addRecipe(""String_Node_Str"",Math.round(200000 * chipsetCostMultiplier),Chipset.IRON.getStack(),""String_Node_Str"",""String_Node_Str"");
  BuildcraftRecipeRegistry.assemblyTable.addRecipe(""String_Node_Str"",Math.round(400000 * chipsetCostMultiplier),Chipset.GOLD.getStack(),""String_Node_Str"",""String_Node_Str"");
  BuildcraftRecipeRegistry.assemblyTable.addRecipe(""String_Node_Str"",Math.round(800000 * chipsetCostMultiplier),Chipset.DIAMOND.getStack(),""String_Node_Str"",""String_Node_Str"");
  BuildcraftRecipeRegistry.assemblyTable.addRecipe(""String_Node_Str"",Math.round(1200000 * chipsetCostMultiplier),Chipset.EMERALD.getStack(),""String_Node_Str"",""String_Node_Str"");
  BuildcraftRecipeRegistry.assemblyTable.addRecipe(""String_Node_Str"",Math.round(400000 * chipsetCostMultiplier),Chipset.PULSATING.getStack(2),""String_Node_Str"",Items.ender_pearl);
  BuildcraftRecipeRegistry.assemblyTable.addRecipe(""String_Node_Str"",Math.round(600000 * chipsetCostMultiplier),Chipset.QUARTZ.getStack(),""String_Node_Str"",""String_Node_Str"");
  BuildcraftRecipeRegistry.assemblyTable.addRecipe(""String_Node_Str"",Math.round(600000 * chipsetCostMultiplier),Chipset.COMP.getStack(),""String_Node_Str"",Items.comparator);
  BuildcraftRecipeRegistry.assemblyTable.addRecipe(""String_Node_Str"",10000000,new ItemStack(redstoneCrystal),new ItemStack(Blocks.redstone_block));
}",0.9688736481139542
156482,"public ItemStack getRecipeOutput(){
  if (currentRecipe == null) {
    return null;
  }
  ItemStack result=currentRecipe.getCraftingResult(craftMatrix);
  if (result != null) {
    result=result.copy();
  }
  return result;
}","public ItemStack getRecipeOutput(){
  currentRecipe=findRecipe();
  if (currentRecipe == null) {
    return null;
  }
  ItemStack result=currentRecipe.getCraftingResult(this);
  if (result != null) {
    result=result.copy();
  }
  return result;
}",0.904862579281184
156483,"@SubscribeEvent public void tick(TickEvent.WorldTickEvent event){
  if (event.phase == TickEvent.Phase.END && requests.containsKey(event.world)) {
    HashSet<PipeExtensionRequest> rSet=requests.get(event.world);
    World w=event.world;
    for (    PipeExtensionRequest r : rSet) {
      Position target=new Position(r.x,r.y,r.z);
      target.orientation=r.o;
      boolean retract=r.stack.getItem() == BuildCraftTransport.pipeItemsVoid;
      ArrayList<ItemStack> removedPipeStacks=null;
      if (retract) {
        target.moveBackwards(1.0D);
      }
 else {
        target.moveForwards(1.0D);
        if (!w.isAirBlock((int)target.x,(int)target.y,(int)target.z)) {
          r.h.sendItem(r.stack,r.o.getOpposite());
          continue;
        }
      }
      Block oldBlock=w.getBlock(r.x,r.y,r.z);
      int oldMeta=w.getBlockMetadata(r.x,r.y,r.z);
      NBTTagCompound nbt=new NBTTagCompound();
      w.getTileEntity(r.x,r.y,r.z).writeToNBT(nbt);
      w.setBlockToAir(r.x,r.y,r.z);
      boolean failedPlacement=false;
      if (retract) {
        removedPipeStacks=w.getBlock((int)target.x,(int)target.y,(int)target.z).getDrops(w,(int)target.x,(int)target.y,(int)target.z,w.getBlockMetadata((int)target.x,(int)target.y,(int)target.z),0);
        w.setBlockToAir((int)target.x,(int)target.y,(int)target.z);
      }
 else {
        if (!r.stack.getItem().onItemUse(r.stack,CoreProxy.proxy.getBuildCraftPlayer((WorldServer)w,r.x,r.y,r.z).get(),w,r.x,r.y,r.z,1,0,0,0)) {
          failedPlacement=true;
          target.moveBackwards(1.0D);
        }
      }
      nbt.setInteger(""String_Node_Str"",(int)target.x);
      nbt.setInteger(""String_Node_Str"",(int)target.y);
      nbt.setInteger(""String_Node_Str"",(int)target.z);
      TileGenericPipe pipeTile=(TileGenericPipe)TileEntity.createAndLoadEntity(nbt);
      w.setBlock((int)target.x,(int)target.y,(int)target.z,oldBlock,oldMeta,3);
      w.setTileEntity((int)target.x,(int)target.y,(int)target.z,pipeTile);
      pipeTile.setWorldObj(w);
      pipeTile.validate();
      pipeTile.updateEntity();
      PipeTransportItems items=(PipeTransportItems)pipeTile.pipe.transport;
      if (!retract && !failedPlacement) {
        r.stack.stackSize--;
      }
      if (r.stack.stackSize > 0) {
        sendItem(items,r.stack,r.o.getOpposite());
      }
      if (removedPipeStacks != null) {
        for (        ItemStack s : removedPipeStacks) {
          sendItem(items,s,r.o.getOpposite());
        }
      }
      if (!retract && !failedPlacement) {
        TileGenericPipe newPipeTile=(TileGenericPipe)w.getTileEntity(r.x,r.y,r.z);
        newPipeTile.updateEntity();
        pipeTile.scheduleNeighborChange();
        if (pipeTile.getPipe() != null) {
          ((Pipe)pipeTile.getPipe()).scheduleWireUpdate();
        }
      }
    }
    rSet.clear();
  }
}","@SubscribeEvent public void tick(TickEvent.WorldTickEvent event){
  if (event.phase == TickEvent.Phase.END && requests.containsKey(event.world)) {
    HashSet<PipeExtensionRequest> rSet=requests.get(event.world);
    World w=event.world;
    for (    PipeExtensionRequest r : rSet) {
      Position target=new Position(r.x,r.y,r.z);
      target.orientation=r.o;
      boolean retract=r.stack.getItem() == BuildCraftTransport.pipeItemsVoid;
      ArrayList<ItemStack> removedPipeStacks=null;
      if (retract) {
        target.moveBackwards(1.0D);
        if (w.getBlock((int)target.x,(int)target.y,(int)target.z) != BuildCraftTransport.genericPipeBlock) {
          r.h.sendItem(r.stack,r.o.getOpposite());
          continue;
        }
        target.moveBackwards(1.0D);
        if (w.getBlock((int)target.x,(int)target.y,(int)target.z) != BuildCraftTransport.genericPipeBlock) {
          r.h.sendItem(r.stack,r.o.getOpposite());
          continue;
        }
        target.moveForwards(1.0D);
      }
 else {
        target.moveForwards(1.0D);
        if (!w.isAirBlock((int)target.x,(int)target.y,(int)target.z)) {
          r.h.sendItem(r.stack,r.o.getOpposite());
          continue;
        }
      }
      Block oldBlock=w.getBlock(r.x,r.y,r.z);
      int oldMeta=w.getBlockMetadata(r.x,r.y,r.z);
      NBTTagCompound nbt=new NBTTagCompound();
      w.getTileEntity(r.x,r.y,r.z).writeToNBT(nbt);
      w.setBlockToAir(r.x,r.y,r.z);
      boolean failedPlacement=false;
      if (retract) {
        removedPipeStacks=w.getBlock((int)target.x,(int)target.y,(int)target.z).getDrops(w,(int)target.x,(int)target.y,(int)target.z,w.getBlockMetadata((int)target.x,(int)target.y,(int)target.z),0);
        w.setBlockToAir((int)target.x,(int)target.y,(int)target.z);
      }
 else {
        if (!r.stack.getItem().onItemUse(r.stack,CoreProxy.proxy.getBuildCraftPlayer((WorldServer)w,r.x,r.y,r.z).get(),w,r.x,r.y,r.z,1,0,0,0)) {
          failedPlacement=true;
          target.moveBackwards(1.0D);
        }
      }
      nbt.setInteger(""String_Node_Str"",(int)target.x);
      nbt.setInteger(""String_Node_Str"",(int)target.y);
      nbt.setInteger(""String_Node_Str"",(int)target.z);
      TileGenericPipe pipeTile=(TileGenericPipe)TileEntity.createAndLoadEntity(nbt);
      w.setBlock((int)target.x,(int)target.y,(int)target.z,oldBlock,oldMeta,3);
      w.setTileEntity((int)target.x,(int)target.y,(int)target.z,pipeTile);
      pipeTile.setWorldObj(w);
      pipeTile.validate();
      pipeTile.updateEntity();
      PipeTransportItems items=(PipeTransportItems)pipeTile.pipe.transport;
      if (!retract && !failedPlacement) {
        r.stack.stackSize--;
      }
      if (r.stack.stackSize > 0) {
        sendItem(items,r.stack,r.o.getOpposite());
      }
      if (removedPipeStacks != null) {
        for (        ItemStack s : removedPipeStacks) {
          sendItem(items,s,r.o.getOpposite());
        }
      }
      if (!retract && !failedPlacement) {
        TileGenericPipe newPipeTile=(TileGenericPipe)w.getTileEntity(r.x,r.y,r.z);
        newPipeTile.updateEntity();
        pipeTile.scheduleNeighborChange();
        if (pipeTile.getPipe() != null) {
          ((Pipe)pipeTile.getPipe()).scheduleWireUpdate();
        }
      }
    }
    rSet.clear();
  }
}",0.9260049220672684
156484,"@Override public boolean handle(World world,BlockPos pos,EnumFacing direction,ItemStack stack,EntityPlayer player,IStripesActivator activator){
  if (!world.isAirBlock(pos)) {
    return false;
  }
  ItemBlock ib=(ItemBlock)stack.getItem();
  if (ib.placeBlockAt(stack,player,world,pos,direction,0.0f,0.0f,0.0f,ib.block.getStateFromMeta(stack.getMetadata()))) {
    if (stack.stackSize > 0) {
      activator.sendItem(stack,direction.getOpposite());
    }
    return true;
  }
  return false;
}","@Override public boolean handle(World world,BlockPos pos,EnumFacing direction,ItemStack stack,EntityPlayer player,IStripesActivator activator){
  if (!world.isAirBlock(pos)) {
    return false;
  }
  ItemBlock ib=(ItemBlock)stack.getItem();
  if (ib.onItemUse(stack,player,world,pos,direction,0.5f,0.5f,0.5f)) {
    if (stack.stackSize > 0) {
      activator.sendItem(stack,direction.getOpposite());
    }
    return true;
  }
  return false;
}",0.7526652452025586
156485,"private IdentifiableAABB<Part> getPipeBoundingBox(EnumFacing side){
  float min=CoreConstants.PIPE_MIN_POS;
  float max=CoreConstants.PIPE_MAX_POS;
  if (side == null) {
    return new IdentifiableAABB<Part>(min,min,min,max,max,max,Part.Pipe);
  }
  float[][] bounds=new float[3][2];
  bounds[0][0]=min;
  bounds[0][1]=max;
  bounds[1][0]=0;
  bounds[1][1]=min;
  bounds[2][0]=min;
  bounds[2][1]=max;
  MatrixTranformations.transform(bounds,side);
  return new IdentifiableAABB<Part>(bounds[0][0],bounds[1][0],bounds[2][0],bounds[0][1],bounds[1][1],bounds[2][1],Part.Pipe);
}","private static IdentifiableAABB<Part> getPipeBoundingBox(EnumFacing side){
  float min=CoreConstants.PIPE_MIN_POS;
  float max=CoreConstants.PIPE_MAX_POS;
  if (side == null) {
    return new IdentifiableAABB<>(min,min,min,max,max,max,Part.Pipe);
  }
  float[][] bounds=new float[3][2];
  bounds[0][0]=min;
  bounds[0][1]=max;
  bounds[1][0]=0;
  bounds[1][1]=min;
  bounds[2][0]=min;
  bounds[2][1]=max;
  MatrixTranformations.transform(bounds,side);
  return new IdentifiableAABB<>(bounds[0][0],bounds[1][0],bounds[2][0],bounds[0][1],bounds[1][1],bounds[2][1],Part.Pipe);
}",0.9869678540399652
156486,"@Override public AxisAlignedBB[] getBoxes(IBlockAccess access,BlockPos pos,IBlockState state){
  List<IdentifiableAABB<Part>> bbs=Lists.newArrayList();
  float min=CoreConstants.PIPE_MIN_POS;
  float max=CoreConstants.PIPE_MAX_POS;
  IdentifiableAABB<Part> base=new IdentifiableAABB<Part>(getPipeBoundingBox(null),Part.Pipe);
  bbs.add(base);
  TileEntity tile=access.getTileEntity(pos);
  if (tile instanceof TileGenericPipe) {
    TileGenericPipe pipe=(TileGenericPipe)tile;
    for (    EnumFacing face : EnumFacing.values()) {
      if (pipe.isPipeConnected(face)) {
        bbs.add(new IdentifiableAABB<Part>(getPipeBoundingBox(face),Part.Pipe));
      }
    }
    for (    EnumFacing face : EnumFacing.VALUES) {
      if (pipe.hasPipePluggable(face)) {
        bbs.add(new IdentifiableAABB<Part>(pipe.getPipePluggable(face).getBoundingBox(face),Part.Pluggable));
      }
    }
  }
  return bbs.toArray(new IdentifiableAABB[bbs.size()]);
}","@Override public AxisAlignedBB[] getBoxes(IBlockAccess access,BlockPos pos,IBlockState state){
  List<IdentifiableAABB<Part>> bbs=Lists.newArrayList();
  IdentifiableAABB<Part> base=new IdentifiableAABB<>(getPipeBoundingBox(null),Part.Pipe);
  bbs.add(base);
  TileEntity tile=access.getTileEntity(pos);
  if (tile instanceof TileGenericPipe) {
    TileGenericPipe pipe=(TileGenericPipe)tile;
    for (    EnumFacing face : EnumFacing.values()) {
      if (pipe.isPipeConnected(face)) {
        bbs.add(new IdentifiableAABB<>(getPipeBoundingBox(face),Part.Pipe));
      }
    }
    for (    EnumFacing face : EnumFacing.VALUES) {
      if (pipe.hasPipePluggable(face)) {
        bbs.add(new IdentifiableAABB<>(pipe.getPipePluggable(face).getBoundingBox(face),Part.Pluggable));
      }
    }
  }
  return bbs.toArray(new IdentifiableAABB[bbs.size()]);
}",0.9142538975501112
156487,"public RaytraceResult doRayTrace(final World world,final BlockPos pos,final Vec3 origin,final Vec3 direction){
  Pipe<?> pipe=getPipe(world,pos);
  if (!isValid(pipe)) {
    return null;
  }
  TileGenericPipe tileG=pipe.container;
  if (tileG == null) {
    return null;
  }
  TraceTester tester=new TraceTester(world,pos,origin,direction);
  tester.test(getPipeBoundingBox(null),null);
  for (  EnumFacing face : EnumFacing.values()) {
    if (tileG.isPipeConnected(face)) {
      tester.test(getPipeBoundingBox(face),face);
    }
  }
  for (  EnumFacing face : EnumFacing.values()) {
    if (tileG.getPipePluggable(face) != null) {
      AxisAlignedBB aabb=tileG.getPipePluggable(face).getBoundingBox(face);
      IdentifiableAABB<Part> iaabb=new IdentifiableAABB<Part>(aabb,Part.Pluggable);
      tester.test(iaabb,face);
    }
  }
  setBlockBounds(0,0,0,1,1,1);
  if (tester.closestHit != null) {
    return new RaytraceResult(tester.closestHit,tester.closestBox,tester.closestSide,tester.closestSideHit);
  }
 else {
    return null;
  }
}","public RaytraceResult doRayTrace(final World world,final BlockPos pos,final Vec3 origin,final Vec3 direction){
  Pipe<?> pipe=getPipe(world,pos);
  if (!isValid(pipe)) {
    return null;
  }
  TileGenericPipe tileG=pipe.container;
  if (tileG == null) {
    return null;
  }
  TraceTester tester=new TraceTester(world,pos,origin,direction);
  tester.test(getPipeBoundingBox(null),null);
  for (  EnumFacing face : EnumFacing.values()) {
    if (tileG.isPipeConnected(face)) {
      tester.test(getPipeBoundingBox(face),face);
    }
  }
  for (  EnumFacing face : EnumFacing.values()) {
    if (tileG.getPipePluggable(face) != null) {
      AxisAlignedBB aabb=tileG.getPipePluggable(face).getBoundingBox(face);
      IdentifiableAABB<Part> iaabb=new IdentifiableAABB<>(aabb,Part.Pluggable);
      tester.test(iaabb,face);
    }
  }
  setBlockBounds(0,0,0,1,1,1);
  if (tester.closestHit != null) {
    return new RaytraceResult(tester.closestHit,tester.closestBox,tester.closestSide,tester.closestSideHit);
  }
 else {
    return null;
  }
}",0.9980806142034548
156488,"@Override public List<ItemStack> getDrops(IBlockAccess world,BlockPos pos,IBlockState state,int fortune){
  ArrayList<ItemStack> list=new ArrayList<ItemStack>();
  Pipe<?> pipe=getPipe(world,pos);
  if (pipe == null) {
    pipe=pipeRemoved.get(new BlockPos(pos));
  }
  if (pipe != null) {
    if (pipe.item != null) {
      list.add(new ItemStack(pipe.item,1,pipe.container.getItemMetadata()));
      list.addAll(pipe.computeItemDrop());
      list.addAll(pipe.getDroppedItems());
    }
  }
  return list;
}","@Override public List<ItemStack> getDrops(IBlockAccess world,BlockPos pos,IBlockState state,int fortune){
  ArrayList<ItemStack> list=new ArrayList<>();
  Pipe<?> pipe=getPipe(world,pos);
  if (pipe == null) {
    pipe=pipeRemoved.get(new BlockPos(pos));
  }
  if (pipe != null) {
    if (pipe.item != null) {
      list.add(new ItemStack(pipe.item,1,pipe.container.getItemMetadata()));
      list.addAll(pipe.computeItemDrop());
      list.addAll(pipe.getDroppedItems());
    }
  }
  return list;
}",0.9910625620655412
156489,"@Override public boolean onItemUse(ItemStack itemstack,EntityPlayer entityplayer,World world,BlockPos pos,EnumFacing side,float par8,float par9,float par10){
  Block block=BuildCraftTransport.genericPipeBlock;
  Block worldBlock=world.getBlockState(pos).getBlock();
  if (worldBlock == Blocks.snow) {
    side=EnumFacing.UP;
  }
 else   if (worldBlock != Blocks.vine && worldBlock != Blocks.tallgrass && worldBlock != Blocks.deadbush && (worldBlock == null || !worldBlock.isReplaceable(world,pos))) {
    pos=pos.offset(side);
  }
  if (itemstack.stackSize == 0) {
    return false;
  }
  if (world.canBlockBePlaced(block,pos,false,side,entityplayer,itemstack)) {
    Pipe<?> pipe=BlockGenericPipe.createPipe(this);
    if (pipe == null) {
      BCLog.logger.log(Level.WARN,""String_Node_Str"",pos);
      return true;
    }
    if (BlockGenericPipe.placePipe(pipe,world,pos,block.getDefaultState(),entityplayer,side)) {
      block.onBlockPlacedBy(world,pos,block.getDefaultState(),entityplayer,itemstack);
      if (!world.isRemote) {
        TileEntity tile=world.getTileEntity(pos);
        ((TileGenericPipe)tile).initializeFromItemMetadata(itemstack.getItemDamage());
      }
      world.playSoundEffect(pos.getX() + 0.5F,pos.getY() + 0.5F,pos.getZ() + 0.5F,block.stepSound.getPlaceSound(),(block.stepSound.getVolume() + 1.0F) / 2.0F,block.stepSound.getFrequency() * 0.8F);
      itemstack.stackSize--;
      return true;
    }
 else {
      return false;
    }
  }
 else {
    return false;
  }
}","@Override public boolean onItemUse(ItemStack stack,EntityPlayer player,World world,BlockPos pos,EnumFacing side,float par8,float par9,float par10){
  Block block=BuildCraftTransport.genericPipeBlock;
  Block worldBlock=world.getBlockState(pos).getBlock();
  if (!worldBlock.isReplaceable(world,pos)) {
    pos=pos.offset(side);
  }
  if (stack.stackSize == 0) {
    return false;
  }
 else   if (!player.canPlayerEdit(pos,side,stack)) {
    return false;
  }
 else   if (world.canBlockBePlaced(block,pos,false,side,null,stack)) {
    Pipe<?> pipe=BlockGenericPipe.createPipe(this);
    if (pipe == null) {
      BCLog.logger.log(Level.WARN,""String_Node_Str"",pos);
      return true;
    }
    if (BlockGenericPipe.placePipe(pipe,world,pos,block.getDefaultState(),player,side)) {
      block.onBlockPlacedBy(world,pos,block.getDefaultState(),player,stack);
      if (!world.isRemote) {
        TileEntity tile=world.getTileEntity(pos);
        ((TileGenericPipe)tile).initializeFromItemMetadata(stack.getItemDamage());
      }
      world.playSoundEffect(pos.getX() + 0.5F,pos.getY() + 0.5F,pos.getZ() + 0.5F,block.stepSound.getPlaceSound(),(block.stepSound.getVolume() + 1.0F) / 2.0F,block.stepSound.getFrequency() * 0.8F);
      stack.stackSize--;
      return true;
    }
 else {
      return false;
    }
  }
 else {
    return false;
  }
}",0.7215189873417721
156490,"@Override public void updateEntity(){
  if (container.getWorld().isRemote) {
    return;
  }
  step();
  init();
  for (  EnumFacing side : EnumFacing.VALUES) {
    if (tiles[side.ordinal()] != null && tiles[side.ordinal()].isInvalid()) {
      updateTile(side);
    }
  }
  Arrays.fill(displayFlow,(short)0);
  for (int i=0; i < 6; ++i) {
    if (internalPower[i] > 0) {
      int totalPowerQuery=0;
      for (int j=0; j < 6; ++j) {
        if (j != i && powerQuery[j] > 0) {
          Object ep=providers[j];
          if (ep instanceof IPipeTile || ep instanceof IEnergyReceiver || ep instanceof IEnergyHandler) {
            totalPowerQuery+=powerQuery[j];
          }
        }
      }
      if (totalPowerQuery > 0) {
        int unusedPowerQuery=totalPowerQuery;
        for (int j=0; j < 6; ++j) {
          if (j != i && powerQuery[j] > 0) {
            Object ep=providers[j];
            double watts=Math.min(internalPower[i] * powerQuery[j] / unusedPowerQuery,internalPower[i]);
            unusedPowerQuery-=powerQuery[j];
            if (ep instanceof IPipeTile && ((IPipeTile)ep).getPipeType() == IPipeTile.PipeType.POWER) {
              Pipe<?> nearbyPipe=(Pipe<?>)((IPipeTile)ep).getPipe();
              PipeTransportPower nearbyTransport=(PipeTransportPower)nearbyPipe.transport;
              watts=nearbyTransport.receiveEnergy(EnumFacing.VALUES[j].getOpposite(),watts);
              internalPower[i]-=watts;
              dbgEnergyOutput[j]+=watts;
              powerAverage[j].push((int)Math.ceil(watts));
              powerAverage[i].push((int)Math.ceil(watts));
              displayFlow[i]=1;
              displayFlow[j]=-1;
            }
 else {
              int iWatts=(int)watts;
              if (ep instanceof IEnergyHandler) {
                IEnergyHandler handler=(IEnergyHandler)ep;
                if (handler.canConnectEnergy(EnumFacing.values()[j].getOpposite())) {
                  iWatts=handler.receiveEnergy(EnumFacing.values()[j].getOpposite(),iWatts,false);
                }
              }
 else               if (ep instanceof IEnergyReceiver) {
                IEnergyReceiver handler=(IEnergyReceiver)ep;
                if (handler.canConnectEnergy(EnumFacing.values()[j].getOpposite())) {
                  iWatts=handler.receiveEnergy(EnumFacing.values()[j].getOpposite(),iWatts,false);
                }
              }
              internalPower[i]-=iWatts;
              dbgEnergyOutput[j]+=iWatts;
              powerAverage[j].push(iWatts);
              powerAverage[i].push(iWatts);
              displayFlow[i]=1;
              displayFlow[j]=-1;
            }
          }
        }
      }
    }
  }
  short highestPower=0;
  for (int i=0; i < 6; i++) {
    powerAverage[i].tick();
    displayPower[i]=(short)Math.round(powerAverage[i].getAverage());
    if (displayPower[i] > highestPower) {
      highestPower=displayPower[i];
    }
  }
  overload+=highestPower > (maxPower * 0.95F) ? 1 : -1;
  if (overload < 0) {
    overload=0;
  }
  if (overload > OVERLOAD_TICKS) {
    overload=OVERLOAD_TICKS;
  }
  for (  EnumFacing dir : EnumFacing.VALUES) {
    if (!outputOpen(dir)) {
      continue;
    }
    Object tile=providers[dir.ordinal()];
    if (tile instanceof IPipeTile && ((IPipeTile)tile).getPipe() != null && ((Pipe<?>)((IPipeTile)tile).getPipe()).transport instanceof PipeTransportPower) {
      continue;
    }
    if (tile instanceof IEnergyHandler) {
      IEnergyHandler handler=(IEnergyHandler)tile;
      if (handler.canConnectEnergy(dir.getOpposite())) {
        int request=handler.receiveEnergy(dir.getOpposite(),this.maxPower,true);
        if (request > 0) {
          requestEnergy(dir,request);
        }
      }
    }
 else     if (tile instanceof IEnergyReceiver) {
      IEnergyReceiver handler=(IEnergyReceiver)tile;
      if (handler.canConnectEnergy(dir.getOpposite())) {
        int request=handler.receiveEnergy(dir.getOpposite(),this.maxPower,true);
        if (request > 0) {
          requestEnergy(dir,request);
        }
      }
    }
  }
  int[] transferQuery=new int[6];
  for (int i=0; i < 6; ++i) {
    transferQuery[i]=0;
    if (!inputOpen(EnumFacing.getFront(i))) {
      continue;
    }
    for (int j=0; j < 6; ++j) {
      if (j != i) {
        transferQuery[i]+=powerQuery[j];
      }
    }
    transferQuery[i]=Math.min(transferQuery[i],maxPower);
  }
  for (int i=0; i < 6; ++i) {
    if (transferQuery[i] != 0 && tiles[i] != null) {
      TileEntity entity=tiles[i];
      if (entity instanceof IPipeTile && ((IPipeTile)entity).getPipeType() == IPipeTile.PipeType.POWER) {
        IPipeTile nearbyTile=(IPipeTile)entity;
        if (nearbyTile.getPipe() == null || nearbyTile.getPipeType() != IPipeTile.PipeType.POWER) {
          continue;
        }
        PipeTransportPower nearbyTransport=(PipeTransportPower)((Pipe<?>)nearbyTile.getPipe()).transport;
        nearbyTransport.requestEnergy(EnumFacing.VALUES[i].getOpposite(),transferQuery[i]);
      }
    }
  }
  if (tracker.markTimeIfDelay(container.getWorld())) {
    PacketPowerUpdate packet=new PacketPowerUpdate(container);
    packet.displayPower=new short[6];
    for (int i=0; i < 6; i++) {
      double val=displayPower[i];
      val/=maxPower;
      val=Math.sqrt(val);
      val*=POWER_STAGES;
      packet.displayPower[i]=(short)val;
    }
    packet.displayFlow=displayFlow;
    packet.overload=isOverloaded();
    BuildCraftTransport.instance.sendToPlayersNear(packet,container);
  }
}","@Override public void updateEntity(){
  if (container.getWorld().isRemote) {
    return;
  }
  step();
  init();
  for (  EnumFacing side : EnumFacing.VALUES) {
    if (tiles[side.ordinal()] != null && tiles[side.ordinal()].isInvalid()) {
      updateTile(side);
    }
  }
  Arrays.fill(displayFlow,(short)0);
  for (int i=0; i < 6; ++i) {
    if (internalPower[i] > 0) {
      int totalPowerQuery=0;
      for (int j=0; j < 6; ++j) {
        if (j != i && powerQuery[j] > 0) {
          Object ep=providers[j];
          if (ep instanceof IPipeTile || ep instanceof IEnergyReceiver || ep instanceof IEnergyHandler) {
            totalPowerQuery+=powerQuery[j];
          }
        }
      }
      if (totalPowerQuery > 0) {
        int unusedPowerQuery=totalPowerQuery;
        for (int j=0; j < 6; ++j) {
          if (j != i && powerQuery[j] > 0) {
            Object ep=providers[j];
            double watts=Math.min(internalPower[i] * powerQuery[j] / unusedPowerQuery,internalPower[i]);
            unusedPowerQuery-=powerQuery[j];
            if (ep instanceof IPipeTile && ((IPipeTile)ep).getPipeType() == IPipeTile.PipeType.POWER) {
              Pipe<?> nearbyPipe=(Pipe<?>)((IPipeTile)ep).getPipe();
              PipeTransportPower nearbyTransport=(PipeTransportPower)nearbyPipe.transport;
              watts=nearbyTransport.receiveEnergy(EnumFacing.VALUES[j].getOpposite(),watts);
              internalPower[i]-=watts;
              dbgEnergyOutput[j]+=watts;
              powerAverage[j].push((int)Math.ceil(watts));
              powerAverage[i].push((int)Math.ceil(watts));
              displayFlow[i]=1;
              displayFlow[j]=-1;
            }
 else {
              int iWatts=(int)watts;
              if (ep instanceof IEnergyHandler) {
                IEnergyHandler handler=(IEnergyHandler)ep;
                if (handler.canConnectEnergy(EnumFacing.values()[j].getOpposite())) {
                  iWatts=handler.receiveEnergy(EnumFacing.values()[j].getOpposite(),iWatts,false);
                }
              }
 else               if (ep instanceof IEnergyReceiver) {
                IEnergyReceiver handler=(IEnergyReceiver)ep;
                if (handler.canConnectEnergy(EnumFacing.values()[j].getOpposite())) {
                  iWatts=handler.receiveEnergy(EnumFacing.values()[j].getOpposite(),iWatts,false);
                }
              }
              internalPower[i]-=iWatts;
              dbgEnergyOutput[j]+=iWatts;
              powerAverage[j].push(iWatts);
              powerAverage[i].push(iWatts);
              displayFlow[i]=1;
              displayFlow[j]=-1;
            }
          }
        }
      }
    }
  }
  short highestPower=0;
  for (int i=0; i < 6; i++) {
    powerAverage[i].tick();
    displayPower[i]=(short)Math.round(powerAverage[i].getAverage());
    if (displayPower[i] > highestPower) {
      highestPower=displayPower[i];
    }
  }
  overload+=highestPower > (maxPower * 0.95F) ? 1 : -1;
  if (overload < 0) {
    overload=0;
  }
  if (overload > OVERLOAD_TICKS) {
    overload=OVERLOAD_TICKS;
  }
  for (  EnumFacing dir : EnumFacing.VALUES) {
    if (!outputOpen(dir)) {
      continue;
    }
    Object tile=providers[dir.ordinal()];
    if (tile instanceof IPipeTile && ((IPipeTile)tile).getPipe() != null && ((Pipe<?>)((IPipeTile)tile).getPipe()).transport instanceof PipeTransportPower) {
      continue;
    }
    if (tile instanceof IEnergyHandler) {
      IEnergyHandler handler=(IEnergyHandler)tile;
      if (handler.canConnectEnergy(dir.getOpposite())) {
        int request=handler.receiveEnergy(dir.getOpposite(),this.maxPower,true);
        if (request > 0) {
          requestEnergy(dir,request);
        }
      }
    }
 else     if (tile instanceof IEnergyReceiver) {
      IEnergyReceiver handler=(IEnergyReceiver)tile;
      if (handler.canConnectEnergy(dir.getOpposite())) {
        int request=handler.receiveEnergy(dir.getOpposite(),this.maxPower,true);
        if (request > 0) {
          requestEnergy(dir,request);
        }
      }
    }
  }
  int[] transferQuery=new int[6];
  for (int i=0; i < 6; ++i) {
    transferQuery[i]=0;
    if (!inputOpen(EnumFacing.getFront(i))) {
      continue;
    }
    for (int j=0; j < 6; ++j) {
      if (j != i) {
        transferQuery[i]+=powerQuery[j];
      }
    }
    transferQuery[i]=Math.min(transferQuery[i],maxPower);
  }
  for (int i=0; i < 6; ++i) {
    if (transferQuery[i] != 0 && tiles[i] != null) {
      TileEntity entity=tiles[i];
      if (entity instanceof IPipeTile && ((IPipeTile)entity).getPipeType() == IPipeTile.PipeType.POWER) {
        IPipeTile nearbyTile=(IPipeTile)entity;
        if (nearbyTile.getPipe() == null || nearbyTile.getPipeType() != IPipeTile.PipeType.POWER) {
          continue;
        }
        PipeTransportPower nearbyTransport=(PipeTransportPower)((Pipe<?>)nearbyTile.getPipe()).transport;
        nearbyTransport.requestEnergy(EnumFacing.VALUES[i].getOpposite(),transferQuery[i]);
      }
    }
  }
  if (tracker.markTimeIfDelay(container.getWorld())) {
    PacketPowerUpdate packet=new PacketPowerUpdate(container);
    packet.displayPower=new short[6];
    for (int i=0; i < 6; i++) {
      double val=displayPower[i];
      val/=MAX_POWER;
      val=Math.sqrt(val);
      val*=POWER_STAGES;
      packet.displayPower[i]=(short)val;
    }
    packet.displayFlow=displayFlow;
    packet.overload=isOverloaded();
    BuildCraftTransport.instance.sendToPlayersNear(packet,container);
  }
}",0.9984484804234736
156491,"static void renderPowerPipe(Pipe<PipeTransportPower> pipe,double x,double y,double z){
  PipeTransportPower pow=pipe.transport;
  GL11.glPushMatrix();
  GL11.glPushAttrib(GL11.GL_ENABLE_BIT);
  GlStateManager.disableLighting();
  GL11.glDisable(GL11.GL_LIGHTING);
  GL11.glTranslatef((float)x,(float)y,(float)z);
  Minecraft.getMinecraft().getTextureManager().bindTexture(TextureMap.locationBlocksTexture);
  short centerPower=0;
  short[] power=pow.displayPower;
  short[] flow=pow.displayFlow;
  for (int i=0; i < 6; i++) {
    short d=power[i];
    if (d > centerPower) {
      centerPower=d;
    }
  }
  if (centerPower > 0) {
    long ms=System.currentTimeMillis();
    long diff=ms - pow.clientLastDisplayTime;
    if (pow.clientLastDisplayTime == 0 || diff <= 0) {
      diff=1;
    }
    pow.clientLastDisplayTime=ms;
    for (int i=0; i < 6; i++) {
      EnumFacing face=EnumFacing.values()[i];
      if (!pipe.getTile().isPipeConnected(face)) {
        continue;
      }
      double actualDiff=flow[i] * diff * FLOW_MULTIPLIER;
      double connectionDiff=face.getAxisDirection() == AxisDirection.POSITIVE ? actualDiff : -actualDiff;
      pow.clientDisplayFlow[i]+=connectionDiff;
      while (pow.clientDisplayFlow[i] < 0) {
        pow.clientDisplayFlow[i]+=16;
      }
      while (pow.clientDisplayFlow[i] > 16) {
        pow.clientDisplayFlow[i]-=16;
      }
      pow.clientDisplayFlowCentre=pow.clientDisplayFlowCentre.add(Utils.convert(face,actualDiff / 2));
      renderSidePower(face,power[i],pow.clientDisplayFlow[i],centerPower);
    }
    for (    Axis axis : Axis.values()) {
      double value=Utils.getValue(pow.clientDisplayFlowCentre,axis);
      while (value < 0) {
        value+=16;
      }
      while (value > 16) {
        value-=16;
      }
      pow.clientDisplayFlowCentre=Utils.withValue(pow.clientDisplayFlowCentre,axis,value);
    }
    renderCenterPower(centerPower,pow.clientDisplayFlowCentre);
  }
  GlStateManager.enableLighting();
  GL11.glPopAttrib();
  GL11.glPopMatrix();
}","static void renderPowerPipe(Pipe<PipeTransportPower> pipe,double x,double y,double z){
  PipeTransportPower pow=pipe.transport;
  GL11.glPushMatrix();
  GL11.glPushAttrib(GL11.GL_ENABLE_BIT);
  GlStateManager.disableLighting();
  GL11.glTranslatef((float)x,(float)y,(float)z);
  Minecraft.getMinecraft().getTextureManager().bindTexture(TextureMap.locationBlocksTexture);
  short centerPower=0;
  short[] power=pow.displayPower;
  short[] flow=pow.displayFlow;
  for (int i=0; i < 6; i++) {
    short d=power[i];
    if (d > centerPower) {
      centerPower=d;
    }
  }
  if (centerPower > 0) {
    long ms=System.currentTimeMillis();
    long diff=ms - pow.clientLastDisplayTime;
    if (pow.clientLastDisplayTime == 0 || diff <= 0) {
      diff=1;
    }
    pow.clientLastDisplayTime=ms;
    for (int i=0; i < 6; i++) {
      EnumFacing face=EnumFacing.values()[i];
      if (!pipe.getTile().isPipeConnected(face)) {
        continue;
      }
      double actualDiff=flow[i] * diff * FLOW_MULTIPLIER;
      double connectionDiff=face.getAxisDirection() == AxisDirection.POSITIVE ? actualDiff : -actualDiff;
      pow.clientDisplayFlow[i]+=connectionDiff;
      while (pow.clientDisplayFlow[i] < 0) {
        pow.clientDisplayFlow[i]+=16;
      }
      while (pow.clientDisplayFlow[i] > 16) {
        pow.clientDisplayFlow[i]-=16;
      }
      pow.clientDisplayFlowCentre=pow.clientDisplayFlowCentre.add(Utils.convert(face,actualDiff / 2));
      renderSidePower(face,power[i],pow.clientDisplayFlow[i],centerPower);
    }
    for (    Axis axis : Axis.values()) {
      double value=Utils.getValue(pow.clientDisplayFlowCentre,axis);
      while (value < 0) {
        value+=16;
      }
      while (value > 16) {
        value-=16;
      }
      pow.clientDisplayFlowCentre=Utils.withValue(pow.clientDisplayFlowCentre,axis,value);
    }
    renderCenterPower(centerPower,pow.clientDisplayFlowCentre);
  }
  GlStateManager.enableLighting();
  GL11.glPopAttrib();
  GL11.glPopMatrix();
}",0.9910224438902744
156492,"@Override public void render(Pipe<PipeTransportFluids> pipe,double x,double y,double z,float f){
  PipeTransportFluids trans=pipe.transport;
  boolean needsRender=false;
  FluidRenderData renderData=trans.renderCache;
  for (int i=0; i < 7; ++i) {
    if (renderData.amount[i] > 0) {
      needsRender=true;
      break;
    }
  }
  if (!needsRender) {
    return;
  }
  if (pipe.container == null)   return;
  GL11.glPushMatrix();
  GL11.glPushAttrib(GL11.GL_ENABLE_BIT);
  GL11.glEnable(GL11.GL_CULL_FACE);
  GL11.glDisable(GL11.GL_LIGHTING);
  GL11.glEnable(GL11.GL_BLEND);
  GL11.glBlendFunc(GL11.GL_SRC_ALPHA,GL11.GL_ONE_MINUS_SRC_ALPHA);
  GL11.glTranslatef((float)x,(float)y,(float)z);
  int skylight=pipe.container.getWorld().getSkyBlockTypeBrightness(EnumSkyBlock.Sky,pipe.container.x(),pipe.container.y(),pipe.container.z());
  int blocklight=pipe.container.getWorld().getSkyBlockTypeBrightness(EnumSkyBlock.Block,pipe.container.x(),pipe.container.y(),pipe.container.z());
  boolean sides=false, above=false;
  for (  ForgeDirection side : ForgeDirection.VALID_DIRECTIONS) {
    int i=side.ordinal();
    if (renderData.amount[i] <= 0) {
      continue;
    }
    if (!pipe.container.isPipeConnected(side)) {
      continue;
    }
    DisplayFluidList d=getDisplayFluidLists(renderData.fluidID,skylight,blocklight,renderData.flags,pipe.container.getWorldObj());
    if (d == null) {
      continue;
    }
    int stage=(int)((float)renderData.amount[i] / (float)(trans.getCapacity()) * (LIQUID_STAGES - 1));
    GL11.glPushMatrix();
    int list=0;
switch (ForgeDirection.VALID_DIRECTIONS[i]) {
case UP:
      above=true;
    list=d.sideVertical[stage];
  break;
case DOWN:
GL11.glTranslatef(0,-0.75F,0);
list=d.sideVertical[stage];
break;
case EAST:
case WEST:
case SOUTH:
case NORTH:
sides=true;
GL11.glTranslatef(0.5F,0.0F,0.5F);
GL11.glRotatef(angleY[i],0,1,0);
GL11.glRotatef(angleZ[i],0,0,1);
GL11.glTranslatef(-0.5F,0.0F,-0.5F);
list=d.sideHorizontal[stage];
break;
default :
}
bindTexture(TextureMap.locationBlocksTexture);
RenderUtils.setGLColorFromInt(renderData.color);
GL11.glCallList(list);
GL11.glPopMatrix();
}
if (renderData.amount[6] > 0) {
DisplayFluidList d=getDisplayFluidLists(renderData.fluidID,skylight,blocklight,renderData.flags,pipe.container.getWorldObj());
if (d != null) {
int stage=(int)((float)renderData.amount[6] / (float)(trans.getCapacity()) * (LIQUID_STAGES - 1));
bindTexture(TextureMap.locationBlocksTexture);
RenderUtils.setGLColorFromInt(renderData.color);
if (above) {
GL11.glCallList(d.centerVertical[stage]);
}
if (!above || sides) {
GL11.glCallList(d.centerHorizontal[stage]);
}
}
}
GL11.glPopAttrib();
GL11.glPopMatrix();
}","@Override public void render(Pipe<PipeTransportFluids> pipe,double x,double y,double z,float f){
  PipeTransportFluids trans=pipe.transport;
  boolean needsRender=false;
  FluidRenderData renderData=trans.renderCache;
  for (int i=0; i < 7; ++i) {
    if (renderData.amount[i] > 0) {
      needsRender=true;
      break;
    }
  }
  if (!needsRender) {
    return;
  }
  if (pipe.container == null) {
    return;
  }
  GL11.glPushMatrix();
  GL11.glPushAttrib(GL11.GL_ENABLE_BIT);
  GL11.glEnable(GL11.GL_CULL_FACE);
  GL11.glDisable(GL11.GL_LIGHTING);
  GL11.glEnable(GL11.GL_BLEND);
  GL11.glBlendFunc(GL11.GL_SRC_ALPHA,GL11.GL_ONE_MINUS_SRC_ALPHA);
  GL11.glTranslatef((float)x,(float)y,(float)z);
  int skylight=pipe.container.getWorld().getSkyBlockTypeBrightness(EnumSkyBlock.Sky,pipe.container.x(),pipe.container.y(),pipe.container.z());
  int blocklight=pipe.container.getWorld().getSkyBlockTypeBrightness(EnumSkyBlock.Block,pipe.container.x(),pipe.container.y(),pipe.container.z());
  boolean sides=false, above=false;
  for (  ForgeDirection side : ForgeDirection.VALID_DIRECTIONS) {
    int i=side.ordinal();
    if (renderData.amount[i] <= 0) {
      continue;
    }
    if (!pipe.container.isPipeConnected(side)) {
      continue;
    }
    DisplayFluidList d=getDisplayFluidLists(renderData.fluidID,skylight,blocklight,renderData.flags,pipe.container.getWorldObj());
    if (d == null) {
      continue;
    }
    int stage=(int)((float)renderData.amount[i] / (float)(trans.getCapacity()) * (LIQUID_STAGES - 1));
    GL11.glPushMatrix();
    int list=0;
switch (ForgeDirection.VALID_DIRECTIONS[i]) {
case UP:
      above=true;
    list=d.sideVertical[stage];
  break;
case DOWN:
GL11.glTranslatef(0,-0.75F,0);
list=d.sideVertical[stage];
break;
case EAST:
case WEST:
case SOUTH:
case NORTH:
sides=true;
GL11.glTranslatef(0.5F,0.0F,0.5F);
GL11.glRotatef(angleY[i],0,1,0);
GL11.glRotatef(angleZ[i],0,0,1);
GL11.glTranslatef(-0.5F,0.0F,-0.5F);
list=d.sideHorizontal[stage];
break;
default :
}
bindTexture(TextureMap.locationBlocksTexture);
RenderUtils.setGLColorFromInt(renderData.color);
GL11.glCallList(list);
GL11.glPopMatrix();
}
if (renderData.amount[6] > 0) {
DisplayFluidList d=getDisplayFluidLists(renderData.fluidID,skylight,blocklight,renderData.flags,pipe.container.getWorldObj());
if (d != null) {
int stage=(int)((float)renderData.amount[6] / (float)(trans.getCapacity()) * (LIQUID_STAGES - 1));
bindTexture(TextureMap.locationBlocksTexture);
RenderUtils.setGLColorFromInt(renderData.color);
if (above) {
GL11.glCallList(d.centerVertical[stage]);
}
if (!above || sides) {
GL11.glCallList(d.centerHorizontal[stage]);
}
}
}
GL11.glPopAttrib();
GL11.glPopMatrix();
}",0.9951528709917972
156493,"public static void loadRecipes(){
  BCRegistry.INSTANCE.addCraftingRecipe(new ItemStack(laserBlock),""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",'O',Blocks.obsidian,'R',""String_Node_Str"",'D',""String_Node_Str"");
  BCRegistry.INSTANCE.addCraftingRecipe(new ItemStack(laserBlock),""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",'O',Blocks.obsidian,'R',""String_Node_Str"",'D',""String_Node_Str"");
  BCRegistry.INSTANCE.addCraftingRecipe(new ItemStack(laserBlock),""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",'O',Blocks.obsidian,'R',""String_Node_Str"",'D',""String_Node_Str"");
  BCRegistry.INSTANCE.addCraftingRecipe(new ItemStack(laserBlock),""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",'O',Blocks.obsidian,'R',""String_Node_Str"",'D',""String_Node_Str"");
  BCRegistry.INSTANCE.addCraftingRecipe(new ItemStack(assemblyTableBlock,1,0),""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",'O',Blocks.obsidian,'R',""String_Node_Str"",'D',""String_Node_Str"",'G',""String_Node_Str"");
  BCRegistry.INSTANCE.addCraftingRecipe(new ItemStack(assemblyTableBlock,1,2),""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",'O',Blocks.obsidian,'I',""String_Node_Str"",'C',new ItemStack(redstoneChipset,1,0),'G',""String_Node_Str"");
  BCRegistry.INSTANCE.addCraftingRecipe(new ItemStack(assemblyTableBlock,1,3),""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",'O',Blocks.obsidian,'I',""String_Node_Str"",'C',new ItemStack(redstoneChipset,1,0),'G',""String_Node_Str"");
  BCRegistry.INSTANCE.addCraftingRecipe(new ItemStack(assemblyTableBlock,1,4),""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",'O',Blocks.obsidian,'R',new ItemStack(redstoneChipset,1,0),'C',""String_Node_Str"",'G',""String_Node_Str"");
  BCRegistry.INSTANCE.addCraftingRecipe(new ItemStack(assemblyTableBlock,1,5),""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",'O',Blocks.obsidian,'W',""String_Node_Str"",'G',""String_Node_Str"",'R',new ItemStack(redstoneChipset,1,0));
  BCRegistry.INSTANCE.addCraftingRecipe(new ItemStack(packagerBlock,1,0),""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",'I',""String_Node_Str"",'C',""String_Node_Str"",'P',Blocks.piston);
  BuildcraftRecipeRegistry.assemblyTable.addRecipe(""String_Node_Str"",Math.round(100000 * chipsetCostMultiplier),Chipset.RED.getStack(),""String_Node_Str"");
  BuildcraftRecipeRegistry.assemblyTable.addRecipe(""String_Node_Str"",Math.round(200000 * chipsetCostMultiplier),Chipset.IRON.getStack(),""String_Node_Str"",""String_Node_Str"");
  BuildcraftRecipeRegistry.assemblyTable.addRecipe(""String_Node_Str"",Math.round(400000 * chipsetCostMultiplier),Chipset.GOLD.getStack(),""String_Node_Str"",""String_Node_Str"");
  BuildcraftRecipeRegistry.assemblyTable.addRecipe(""String_Node_Str"",Math.round(800000 * chipsetCostMultiplier),Chipset.DIAMOND.getStack(),""String_Node_Str"",""String_Node_Str"");
  BuildcraftRecipeRegistry.assemblyTable.addRecipe(""String_Node_Str"",Math.round(1200000 * chipsetCostMultiplier),Chipset.EMERALD.getStack(),""String_Node_Str"",""String_Node_Str"");
  BuildcraftRecipeRegistry.assemblyTable.addRecipe(""String_Node_Str"",Math.round(400000 * chipsetCostMultiplier),Chipset.PULSATING.getStack(2),""String_Node_Str"",Items.ender_pearl);
  BuildcraftRecipeRegistry.assemblyTable.addRecipe(""String_Node_Str"",Math.round(600000 * chipsetCostMultiplier),Chipset.QUARTZ.getStack(),""String_Node_Str"",""String_Node_Str"");
  BuildcraftRecipeRegistry.assemblyTable.addRecipe(""String_Node_Str"",Math.round(600000 * chipsetCostMultiplier),Chipset.COMP.getStack(),""String_Node_Str"",Items.comparator);
  BuildcraftRecipeRegistry.assemblyTable.addRecipe(""String_Node_Str"",10000000,new ItemStack(redstoneCrystal),new ItemStack(Blocks.redstone_block));
}","public static void loadRecipes(){
  BCRegistry.INSTANCE.addCraftingRecipe(new ItemStack(laserBlock),""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",'O',Blocks.obsidian,'R',""String_Node_Str"",'D',""String_Node_Str"");
  BCRegistry.INSTANCE.addCraftingRecipe(new ItemStack(laserBlock),""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",'O',Blocks.obsidian,'R',""String_Node_Str"",'D',""String_Node_Str"");
  BCRegistry.INSTANCE.addCraftingRecipe(new ItemStack(laserBlock),""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",'O',Blocks.obsidian,'R',""String_Node_Str"",'D',""String_Node_Str"");
  BCRegistry.INSTANCE.addCraftingRecipe(new ItemStack(laserBlock),""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",'O',Blocks.obsidian,'R',""String_Node_Str"",'D',""String_Node_Str"");
  BCRegistry.INSTANCE.addCraftingRecipe(new ItemStack(assemblyTableBlock,1,0),""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",'O',Blocks.obsidian,'R',""String_Node_Str"",'D',""String_Node_Str"",'G',""String_Node_Str"");
  BCRegistry.INSTANCE.addCraftingRecipe(new ItemStack(assemblyTableBlock,1,1),""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",'O',Blocks.obsidian,'W',Blocks.crafting_table,'C',Blocks.chest,'R',new ItemStack(redstoneChipset,1,0));
  BCRegistry.INSTANCE.addCraftingRecipe(new ItemStack(assemblyTableBlock,1,2),""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",'O',Blocks.obsidian,'I',""String_Node_Str"",'C',new ItemStack(redstoneChipset,1,0),'G',""String_Node_Str"");
  BCRegistry.INSTANCE.addCraftingRecipe(new ItemStack(assemblyTableBlock,1,3),""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",'O',Blocks.obsidian,'I',""String_Node_Str"",'C',new ItemStack(redstoneChipset,1,0),'G',""String_Node_Str"");
  BCRegistry.INSTANCE.addCraftingRecipe(new ItemStack(assemblyTableBlock,1,4),""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",'O',Blocks.obsidian,'R',new ItemStack(redstoneChipset,1,0),'C',""String_Node_Str"",'G',""String_Node_Str"");
  BCRegistry.INSTANCE.addCraftingRecipe(new ItemStack(assemblyTableBlock,1,5),""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",'O',Blocks.obsidian,'W',""String_Node_Str"",'G',""String_Node_Str"",'R',new ItemStack(redstoneChipset,1,0));
  BCRegistry.INSTANCE.addCraftingRecipe(new ItemStack(packagerBlock,1,0),""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",'I',""String_Node_Str"",'C',""String_Node_Str"",'P',Blocks.piston);
  BuildcraftRecipeRegistry.assemblyTable.addRecipe(""String_Node_Str"",Math.round(100000 * chipsetCostMultiplier),Chipset.RED.getStack(),""String_Node_Str"");
  BuildcraftRecipeRegistry.assemblyTable.addRecipe(""String_Node_Str"",Math.round(200000 * chipsetCostMultiplier),Chipset.IRON.getStack(),""String_Node_Str"",""String_Node_Str"");
  BuildcraftRecipeRegistry.assemblyTable.addRecipe(""String_Node_Str"",Math.round(400000 * chipsetCostMultiplier),Chipset.GOLD.getStack(),""String_Node_Str"",""String_Node_Str"");
  BuildcraftRecipeRegistry.assemblyTable.addRecipe(""String_Node_Str"",Math.round(800000 * chipsetCostMultiplier),Chipset.DIAMOND.getStack(),""String_Node_Str"",""String_Node_Str"");
  BuildcraftRecipeRegistry.assemblyTable.addRecipe(""String_Node_Str"",Math.round(1200000 * chipsetCostMultiplier),Chipset.EMERALD.getStack(),""String_Node_Str"",""String_Node_Str"");
  BuildcraftRecipeRegistry.assemblyTable.addRecipe(""String_Node_Str"",Math.round(400000 * chipsetCostMultiplier),Chipset.PULSATING.getStack(2),""String_Node_Str"",Items.ender_pearl);
  BuildcraftRecipeRegistry.assemblyTable.addRecipe(""String_Node_Str"",Math.round(600000 * chipsetCostMultiplier),Chipset.QUARTZ.getStack(),""String_Node_Str"",""String_Node_Str"");
  BuildcraftRecipeRegistry.assemblyTable.addRecipe(""String_Node_Str"",Math.round(600000 * chipsetCostMultiplier),Chipset.COMP.getStack(),""String_Node_Str"",Items.comparator);
  BuildcraftRecipeRegistry.assemblyTable.addRecipe(""String_Node_Str"",10000000,new ItemStack(redstoneCrystal),new ItemStack(Blocks.redstone_block));
}",0.9688736481139542
156494,"@Override public int hashCode(){
  return new HashCodeBuilder().append(stack).append(pos).append(display).build();
}","@Override public int hashCode(){
  return new HashCodeBuilder().append(stack).append(pos).append(display).toHashCode();
}",0.9451476793248944
156495,"@Override public boolean equals(Object o){
  if (o == null || !(o instanceof StackAtPosition)) {
    return false;
  }
  StackAtPosition other=(StackAtPosition)o;
  return other.stack.equals(stack) && other.pos.equals(pos) && other.display == display;
}","@Override public boolean equals(Object o){
  if (o == null)   return false;
  if (o.getClass() != getClass())   return false;
  StackAtPosition other=(StackAtPosition)o;
  return new EqualsBuilder().append(stack,other.stack).append(pos,other.pos).append(display,other.display).isEquals();
}",0.283609576427256
156496,"public static BakedQuad transform(BakedQuad quad,Matrix4f matrix4f){
  int[] data=quad.getVertexData();
  if (data.length != 28)   throw new IllegalArgumentException(""String_Node_Str"" + data.length + ""String_Node_Str"");
  data=Arrays.copyOf(data,28);
  boolean colour=quad instanceof IColoredBakedQuad;
  for (int i=0; i < 4; i++) {
    Point3f vec=new Point3f();
    vec.x=Float.intBitsToFloat(data[i * 7 + X]);
    vec.y=Float.intBitsToFloat(data[i * 7 + Y]);
    vec.z=Float.intBitsToFloat(data[i * 7 + Z]);
    matrix4f.transform(vec);
    data[i * 7 + X]=Float.floatToRawIntBits(vec.x);
    data[i * 7 + Y]=Float.floatToRawIntBits(vec.y);
    data[i * 7 + Z]=Float.floatToRawIntBits(vec.z);
  }
  return colour ? new ColoredBakedQuad(data,quad.getTintIndex(),quad.getFace()) : new BakedQuad(data,quad.getTintIndex(),quad.getFace());
}","public static BakedQuad transform(BakedQuad quad,Matrix4f matrix4f){
  int[] data=quad.getVertexData();
  data=Arrays.copyOf(data,data.length);
  boolean colour=quad instanceof IColoredBakedQuad;
  int step=data.length / 4;
  for (int i=0; i < 4; i++) {
    Point3f vec=new Point3f();
    vec.x=Float.intBitsToFloat(data[i * step + X]);
    vec.y=Float.intBitsToFloat(data[i * step + Y]);
    vec.z=Float.intBitsToFloat(data[i * step + Z]);
    matrix4f.transform(vec);
    data[i * step + X]=Float.floatToRawIntBits(vec.x);
    data[i * step + Y]=Float.floatToRawIntBits(vec.y);
    data[i * step + Z]=Float.floatToRawIntBits(vec.z);
  }
  return colour ? new ColoredBakedQuad(data,quad.getTintIndex(),quad.getFace()) : new BakedQuad(data,quad.getTintIndex(),quad.getFace());
}",0.8843537414965986
156497,"public static BakedQuad replaceShade(BakedQuad quad,int shade){
  int[] data=quad.getVertexData();
  if (data.length != 28)   throw new IllegalArgumentException(""String_Node_Str"" + data.length + ""String_Node_Str"");
  data=Arrays.copyOf(data,28);
  boolean colour=quad instanceof IColoredBakedQuad;
  for (int i=0; i < 4; i++) {
    data[i * ARRAY_SIZE + SHADE]=shade;
  }
  return colour ? new ColoredBakedQuad(data,quad.getTintIndex(),quad.getFace()) : new BakedQuad(data,quad.getTintIndex(),quad.getFace());
}","public static BakedQuad replaceShade(BakedQuad quad,int shade){
  int[] data=quad.getVertexData();
  int step=data.length / 4;
  data=Arrays.copyOf(data,data.length);
  boolean colour=quad instanceof IColoredBakedQuad;
  for (int i=0; i < 4; i++) {
    data[i * step + SHADE]=shade;
  }
  return colour ? new ColoredBakedQuad(data,quad.getTintIndex(),quad.getFace()) : new BakedQuad(data,quad.getTintIndex(),quad.getFace());
}",0.8537886872998933
156498,"public static Vector3f normal(BakedQuad quad){
  int[] data=quad.getVertexData();
  if (data.length != 28)   throw new IllegalArgumentException(""String_Node_Str"" + data.length + ""String_Node_Str"");
  data=Arrays.copyOf(data,28);
  Point3f[] positions=new Point3f[3];
  for (int i=0; i < 3; i++) {
    Point3f vec=new Point3f();
    vec.x=Float.intBitsToFloat(data[i * 7 + X]);
    vec.y=Float.intBitsToFloat(data[i * 7 + Y]);
    vec.z=Float.intBitsToFloat(data[i * 7 + Z]);
    positions[i]=vec;
  }
  Vector3f a=new Vector3f(positions[1]);
  a.sub(positions[0]);
  Vector3f b=new Vector3f(positions[2]);
  b.sub(positions[0]);
  Vector3f c=new Vector3f();
  c.cross(a,b);
  return c;
}","public static Vector3f normal(BakedQuad quad){
  int[] data=quad.getVertexData();
  int step=data.length / 4;
  data=Arrays.copyOf(data,data.length);
  Point3f[] positions=new Point3f[3];
  for (int i=0; i < 3; i++) {
    Point3f vec=new Point3f();
    vec.x=Float.intBitsToFloat(data[i * step + X]);
    vec.y=Float.intBitsToFloat(data[i * step + Y]);
    vec.z=Float.intBitsToFloat(data[i * step + Z]);
    positions[i]=vec;
  }
  Vector3f a=new Vector3f(positions[1]);
  a.sub(positions[0]);
  Vector3f b=new Vector3f(positions[2]);
  b.sub(positions[0]);
  Vector3f c=new Vector3f();
  c.cross(a,b);
  return c;
}",0.8941717791411042
156499,"public void deployBlueprint(World world,BlockPos pos,EnumFacing dir,Blueprint bpt){
  bpt.id=new LibraryId();
  bpt.id.extension=""String_Node_Str"";
  BptContext context=bpt.getContext(world,bpt.getBoxForPos(pos));
  if (bpt.rotate) {
    if (dir == EnumFacing.EAST) {
    }
 else     if (dir == EnumFacing.SOUTH) {
      bpt.rotateLeft(context);
    }
 else     if (dir == EnumFacing.WEST) {
      bpt.rotateLeft(context);
      bpt.rotateLeft(context);
    }
 else     if (dir == EnumFacing.NORTH) {
      bpt.rotateLeft(context);
      bpt.rotateLeft(context);
      bpt.rotateLeft(context);
    }
  }
  Vec3 transform=Utils.convert(pos).subtract(bpt.anchorX,bpt.anchorY,bpt.anchorZ);
  bpt.translateToWorld(transform);
  new BptBuilderBlueprint(bpt,world,pos).deploy();
}","public void deployBlueprint(World world,BlockPos pos,EnumFacing dir,Blueprint bpt){
  bpt.id=new LibraryId();
  bpt.id.extension=""String_Node_Str"";
  BptContext context=bpt.getContext(world,bpt.getBoxForPos(pos));
  if (bpt.rotate) {
    if (dir == EnumFacing.EAST) {
    }
 else     if (dir == EnumFacing.SOUTH) {
      bpt.rotateLeft(context);
    }
 else     if (dir == EnumFacing.WEST) {
      bpt.rotateLeft(context);
      bpt.rotateLeft(context);
    }
 else     if (dir == EnumFacing.NORTH) {
      bpt.rotateLeft(context);
      bpt.rotateLeft(context);
      bpt.rotateLeft(context);
    }
  }
  Vec3 transform=Utils.convert(pos).subtract(Utils.convert(bpt.anchor));
  bpt.translateToWorld(transform);
  new BptBuilderBlueprint(bpt,world,pos).deploy();
}",0.9739921976592978
156500,"public BptBuilderBase(BlueprintBase bluePrint,World world,BlockPos pos){
  this.blueprint=bluePrint;
  this.pos=pos;
  this.usedLocations=new BitSet(bluePrint.sizeX * bluePrint.sizeY * bluePrint.sizeZ);
  done=false;
  Box box=new Box();
  box.initialize(this);
  context=bluePrint.getContext(world,box);
}","public BptBuilderBase(BlueprintBase bluePrint,World world,BlockPos pos){
  this.blueprint=bluePrint;
  this.pos=pos;
  this.usedLocations=new BitSet(bluePrint.size.getX() * bluePrint.size.getY() * bluePrint.size.getZ());
  done=false;
  Box box=new Box();
  box.initialize(this);
  context=bluePrint.getContext(world,box);
}",0.9714285714285714
156501,"@Override public void loadContents(NBTTagCompound nbt) throws BptError {
  byte[] data=nbt.getByteArray(""String_Node_Str"");
  int ind=0;
  for (int x=0; x < sizeX; ++x) {
    for (int y=0; y < sizeY; ++y) {
      for (int z=0; z < sizeZ; ++z) {
        if (data[ind] == 1) {
          set(new BlockPos(x,y,z),new SchematicMask(true));
        }
        ind++;
      }
    }
  }
}","@Override public void loadContents(NBTTagCompound nbt) throws BptError {
  byte[] data=nbt.getByteArray(""String_Node_Str"");
  int ind=0;
  for (int x=0; x < size.getX(); ++x) {
    for (int y=0; y < size.getY(); ++y) {
      for (int z=0; z < size.getZ(); ++z) {
        if (data[ind] == 1) {
          set(new BlockPos(x,y,z),new SchematicMask(true));
        }
        ind++;
      }
    }
  }
}",0.9768041237113402
156502,"@Override public void readFromWorld(IBuilderContext context,TileEntity anchorTile,BlockPos pos){
  Vec3 nPos=Utils.convert(pos).subtract(context.surroundingBox().min());
  int posX=(int)nPos.xCoord;
  int posY=(int)nPos.yCoord;
  int posZ=(int)nPos.zCoord;
  if (!BuildCraftAPI.isSoftBlock(anchorTile.getWorld(),pos)) {
    set(new BlockPos(posX,posY,posZ),new SchematicMask(true));
  }
}","@Override public void readFromWorld(IBuilderContext context,TileEntity anchorTile,BlockPos pos){
  Vec3 nPos=Utils.convert(pos).subtract(Utils.convert(context.surroundingBox().min()));
  if (!BuildCraftAPI.isSoftBlock(anchorTile.getWorld(),pos)) {
    set(Utils.convertFloor(nPos),new SchematicMask(true));
  }
}",0.7428571428571429
156503,"public Template(int sizeX,int sizeY,int sizeZ){
  super(sizeX,sizeY,sizeZ);
  id.extension=""String_Node_Str"";
}","public Template(BlockPos size){
  super(size);
  id.extension=""String_Node_Str"";
}",0.7668393782383419
156504,"@Override public void saveContents(NBTTagCompound nbt){
  byte[] data=new byte[sizeX * sizeY * sizeZ];
  int ind=0;
  for (int x=0; x < sizeX; ++x) {
    for (int y=0; y < sizeY; ++y) {
      for (int z=0; z < sizeZ; ++z) {
        data[ind]=(byte)((get(new BlockPos(x,y,z)) == null) ? 0 : 1);
        ind++;
      }
    }
  }
  nbt.setByteArray(""String_Node_Str"",data);
}","@Override public void saveContents(NBTTagCompound nbt){
  byte[] data=new byte[size.getX() * size.getY() * size.getZ()];
  int ind=0;
  for (int x=0; x < size.getX(); ++x) {
    for (int y=0; y < size.getY(); ++y) {
      for (int z=0; z < size.getZ(); ++z) {
        data[ind]=(byte)((get(new BlockPos(x,y,z)) == null) ? 0 : 1);
        ind++;
      }
    }
  }
  nbt.setByteArray(""String_Node_Str"",data);
}",0.953846153846154
156505,"@Override public BlockPos next(){
  BlockPos index=new BlockPos(pos);
  it++;
  blocksDone++;
  if (pos.getX() < box.xMax) {
    pos=pos.east();
  }
 else {
    pos=new BlockPos(box.xMin,pos.getY(),pos.getZ());
    if (pos.getY() < box.yMax) {
      pos=pos.up();
    }
 else {
      pos=new BlockPos(pos.getX(),box.yMin,pos.getZ() + 1);
    }
  }
  return index;
}","@Override public BlockPos next(){
  BlockPos index=new BlockPos(pos);
  it++;
  blocksDone++;
  if (pos.getX() < box.max().getX()) {
    pos=pos.east();
  }
 else {
    pos=new BlockPos(box.min().getX(),pos.getY(),pos.getZ());
    if (pos.getY() < box.max().getY()) {
      pos=pos.up();
    }
 else {
      pos=new BlockPos(pos.getX(),box.min().getY(),pos.getZ() + 1);
    }
  }
  return index;
}",0.926509186351706
156506,"@Override public boolean hasNext(){
  return pos.getZ() <= box.zMax && it <= iterationsPerCycle;
}","@Override public boolean hasNext(){
  return pos.getZ() <= box.max().getZ() && it <= iterationsPerCycle;
}",0.9411764705882352
156507,"public int totalBlocks(){
  return box.sizeX() * box.sizeY() * box.sizeZ();
}","public int totalBlocks(){
  return box.size().getX() * box.size().getY() * box.size().getZ();
}",0.8953488372093024
156508,"public FakeWorld(Template template,IBlockState filledBlock){
  this(EnumDecoratedBlock.BLUEPRINT);
  BlockPos start=new BlockPos(-template.sizeX / 2,1,-template.sizeZ / 2);
  BlockPos end=start.add(template.sizeX - 1,template.sizeY - 1,template.sizeZ - 1);
  IBlockState state=BuildCraftCore.decoratedBlock.getDefaultState();
  state=state.withProperty(BuildCraftProperties.DECORATED_BLOCK,EnumDecoratedBlock.TEMPLATE);
  IBlockState roofState=Blocks.dirt.getDefaultState();
  for (  BlockPos pos : Utils.allInBoxIncludingCorners(start,end)) {
    BlockPos array=pos.subtract(start);
    SchematicBlockBase block=template.get(array);
    if (block != null) {
      setBlockState(pos,filledBlock);
    }
    if (pos.getY() == 1) {
      setBlockState(pos.down(),state);
      setBlockState(pos.up(254),roofState);
    }
  }
}","public FakeWorld(Template template,IBlockState filledBlock){
  this(EnumDecoratedBlock.BLUEPRINT);
  BlockPos start=template.getBoxForPos(BlockPos.ORIGIN).center();
  BlockPos end=start.add(template.size).subtract(Utils.POS_ONE);
  IBlockState state=BuildCraftCore.decoratedBlock.getDefaultState();
  state=state.withProperty(BuildCraftProperties.DECORATED_BLOCK,EnumDecoratedBlock.TEMPLATE);
  IBlockState roofState=Blocks.dirt.getDefaultState();
  for (  BlockPos pos : Utils.allInBoxIncludingCorners(start,end)) {
    BlockPos array=pos.subtract(start);
    SchematicBlockBase block=template.get(array);
    if (block != null) {
      setBlockState(pos,filledBlock);
    }
    if (pos.getY() == 1) {
      setBlockState(pos.down(),state);
      setBlockState(pos.up(254),roofState);
    }
  }
}",0.8624305983960519
156509,boolean contains(Vec3 point);,"/** 
 * Returns true if the point is enclosed by this zone, such that none of the coordinates lie outside the range specified by this zone. 
 */
boolean contains(Vec3 point);",0.2857142857142857
156510,BlockPos getRandomBlockPos(Random rand);,"/** 
 * Gets a random position that   {@link #contains(Vec3)} will return true. 
 */
BlockPos getRandomBlockPos(Random rand);",0.4848484848484848
156511,double distanceToSquared(BlockPos index);,"/** 
 * Returns   {@link #distanceTo(BlockPos)} but squared. Usually this will be quicker to calculate. 
 */
double distanceToSquared(BlockPos index);",0.4293193717277487
156512,double distanceTo(BlockPos index);,"/** 
 * Returns the smallest possible distance that the index would have to be changed by in order for  {@link #contains(Vec3)} to return true. If the position is already inside then this will return 0 
 */
double distanceTo(BlockPos index);",0.2472727272727272
156513,"@Override protected void writeEntityToNBT(NBTTagCompound nbttagcompound){
  nbttagcompound.setDouble(""String_Node_Str"",xRoot);
  nbttagcompound.setDouble(""String_Node_Str"",yRoot);
  nbttagcompound.setDouble(""String_Node_Str"",zRoot);
  nbttagcompound.setDouble(""String_Node_Str"",armSizeX);
  nbttagcompound.setDouble(""String_Node_Str"",armSizeZ);
}","@Override protected void writeEntityToNBT(NBTTagCompound nbttagcompound){
  nbttagcompound.setDouble(""String_Node_Str"",root.xCoord);
  nbttagcompound.setDouble(""String_Node_Str"",root.yCoord);
  nbttagcompound.setDouble(""String_Node_Str"",root.zCoord);
  nbttagcompound.setDouble(""String_Node_Str"",armSizeX);
  nbttagcompound.setDouble(""String_Node_Str"",armSizeZ);
}",0.6704225352112676
156514,"public void updatePosition(){
  double[] headT=getHead();
  this.xArm.setPosition(xRoot,yRoot,headT[2] + 0.25);
  this.yArm.ySize=yRoot - headT[1] - 1;
  this.yArm.setPosition(headT[0] + 0.25,headT[1] + 1,headT[2] + 0.25);
  this.zArm.setPosition(headT[0] + 0.25,yRoot,zRoot);
  this.head.setPosition(headT[0] + 0.4,headT[1] - 0.01,headT[2] + 0.4);
}","public void updatePosition(){
  double[] headT=getHead();
  this.xArm.setPosition(root.xCoord,root.yCoord,headT[2] + 0.25);
  this.yArm.ySize=root.yCoord - headT[1] - 1;
  this.yArm.setPosition(headT[0] + 0.25,headT[1] + 1,headT[2] + 0.25);
  this.zArm.setPosition(headT[0] + 0.25,root.yCoord,root.zCoord);
  this.headEntity.setPosition(headT[0] + 0.4,headT[1] - 0.01,headT[2] + 0.4);
}",0.845108695652174
156515,"@Override protected void readEntityFromNBT(NBTTagCompound nbttagcompound){
  xRoot=nbttagcompound.getDouble(""String_Node_Str"");
  yRoot=nbttagcompound.getDouble(""String_Node_Str"");
  zRoot=nbttagcompound.getDouble(""String_Node_Str"");
  armSizeX=nbttagcompound.getDouble(""String_Node_Str"");
  armSizeZ=nbttagcompound.getDouble(""String_Node_Str"");
  setArmSize(armSizeX,armSizeZ);
  updatePosition();
}","@Override protected void readEntityFromNBT(NBTTagCompound nbttagcompound){
  double xRoot=nbttagcompound.getDouble(""String_Node_Str"");
  double yRoot=nbttagcompound.getDouble(""String_Node_Str"");
  double zRoot=nbttagcompound.getDouble(""String_Node_Str"");
  root=new Vec3(xRoot,yRoot,zRoot);
  armSizeX=nbttagcompound.getDouble(""String_Node_Str"");
  armSizeZ=nbttagcompound.getDouble(""String_Node_Str"");
  setArmSize(armSizeX,armSizeZ);
  updatePosition();
}",0.9334889148191364
156516,"private double[] getHead(){
  return new double[]{this.headX / 32D,this.headY / 32D,this.headZ / 32D};
}","private double[] getHead(){
  return new double[]{head.xCoord,head.yCoord,head.zCoord};
}",0.7046632124352331
156517,"public void setHead(double x,double y,double z){
  this.headX=(int)(x * 32D);
  this.headY=(int)(y * 32D);
  this.headZ=(int)(z * 32D);
}","public void setHead(Vec3 vec){
  this.head=vec;
}",0.4516129032258064
156518,"private void makeParts(World world){
  xArm=BuilderProxy.proxy.newDrill(world,0,0,0,1,0.5,0.5);
  yArm=BuilderProxy.proxy.newDrill(world,0,0,0,0.5,1,0.5);
  zArm=BuilderProxy.proxy.newDrill(world,0,0,0,0.5,0.5,1);
  head=BuilderProxy.proxy.newDrillHead(world,0,0,0,0.2,1,0.2);
  head.shadowSize=1.0F;
  world.spawnEntityInWorld(xArm);
  world.spawnEntityInWorld(yArm);
  world.spawnEntityInWorld(zArm);
  world.spawnEntityInWorld(head);
}","private void makeParts(World world){
  xArm=BuilderProxy.proxy.newDrill(world,0,0,0,1,0.5,0.5);
  yArm=BuilderProxy.proxy.newDrill(world,0,0,0,0.5,1,0.5);
  zArm=BuilderProxy.proxy.newDrill(world,0,0,0,0.5,0.5,1);
  headEntity=BuilderProxy.proxy.newDrillHead(world,0,0,0,0.2,1,0.2);
  headEntity.shadowSize=1.0F;
  world.spawnEntityInWorld(xArm);
  world.spawnEntityInWorld(yArm);
  world.spawnEntityInWorld(zArm);
  world.spawnEntityInWorld(headEntity);
}",0.9798657718120806
156519,"public EntityMechanicalArm(World world,double x,double y,double z,double width,double height,TileQuarry parent){
  this(world);
  setPositionAndRotation(parent.getPos().getX(),parent.getPos().getY(),parent.getPos().getZ(),0,0);
  this.xRoot=x;
  this.yRoot=y;
  this.zRoot=z;
  this.motionX=0.0;
  this.motionY=0.0;
  this.motionZ=0.0;
  setArmSize(width,height);
  setHead(x,y - 2,z);
  this.parent=parent;
  parent.setArm(this);
  updatePosition();
}","public EntityMechanicalArm(World world,Vec3 root,double width,double height,TileQuarry parent){
  this(world);
  setPositionAndRotation(parent.getPos().getX(),parent.getPos().getY(),parent.getPos().getZ(),0,0);
  this.root=root;
  this.motionX=0.0;
  this.motionY=0.0;
  this.motionZ=0.0;
  setArmSize(width,height);
  setHead(root.addVector(0,-2,0));
  this.parent=parent;
  parent.setArm(this);
  updatePosition();
}",0.871264367816092
156520,"@Override public void setDead(){
  if (worldObj != null && worldObj.isRemote) {
    xArm.setDead();
    yArm.setDead();
    zArm.setDead();
    head.setDead();
  }
  super.setDead();
}","@Override public void setDead(){
  if (worldObj != null && worldObj.isRemote) {
    xArm.setDead();
    yArm.setDead();
    zArm.setDead();
    headEntity.setDead();
  }
  super.setDead();
}",0.983957219251337
156521,"private void initTemplate(){
  if (currentPattern != null && box.isInitialized() && box.sizeX() > 0 && box.sizeY() > 0 && box.sizeZ() > 0) {
    currentTemplate=currentPattern.getTemplateBuilder(box,getWorld(),patternParameters);
    currentTemplate.blueprint.excavate=excavate;
  }
}","private void initTemplate(){
  if (currentPattern != null && box.size().distanceSq(BlockPos.ORIGIN) > 0) {
    currentTemplate=currentPattern.getTemplateBuilder(box,getWorld(),patternParameters);
    currentTemplate.blueprint.excavate=excavate;
  }
}",0.8164794007490637
156522,"@Override public void initializeFromObjectAt(IBuilderContext context,int x,int y,int z){
  super.initializeFromObjectAt(context,x,y,z);
  if (block.hasTileEntity(meta)) {
    TileEntity tile=context.world().getTileEntity(x,y,z);
    if (tile != null) {
      tile.writeToNBT(tileNBT);
    }
    tileNBT=(NBTTagCompound)tileNBT.copy();
  }
}","@Override public void initializeFromObjectAt(IBuilderContext context,int x,int y,int z){
  super.initializeFromObjectAt(context,x,y,z);
  if (block.hasTileEntity(meta)) {
    TileEntity tile=context.world().getTileEntity(x,y,z);
    if (tile != null) {
      tile.writeToNBT(tileNBT);
    }
    tileNBT=(NBTTagCompound)tileNBT.copy();
    onNBTLoaded();
  }
}",0.9728183118741058
156523,"@Override public void readSchematicFromNBT(NBTTagCompound nbt,MappingRegistry registry){
  super.readSchematicFromNBT(nbt,registry);
  tileNBT=nbt.getCompoundTag(""String_Node_Str"");
}","@Override public void readSchematicFromNBT(NBTTagCompound nbt,MappingRegistry registry){
  super.readSchematicFromNBT(nbt,registry);
  tileNBT=nbt.getCompoundTag(""String_Node_Str"");
  onNBTLoaded();
}",0.9556135770234988
156524,"@Mod.EventHandler public void init(FMLInitializationEvent evt){
  NetworkRegistry.INSTANCE.registerGuiHandler(instance,new BuildersGuiHandler());
  ISchematicRegistry schemes=BuilderAPI.schematicRegistry;
  schemes.registerSchematicBlock(Blocks.air,SchematicAir.class);
  schemes.registerSchematicBlock(Blocks.snow,SchematicIgnore.class);
  schemes.registerSchematicBlock(Blocks.tallgrass,SchematicIgnore.class);
  schemes.registerSchematicBlock(Blocks.double_plant,SchematicIgnore.class);
  schemes.registerSchematicBlock(Blocks.ice,SchematicIgnore.class);
  schemes.registerSchematicBlock(Blocks.piston_head,SchematicIgnore.class);
  schemes.registerSchematicBlock(Blocks.dirt,SchematicDirt.class);
  schemes.registerSchematicBlock(Blocks.grass,SchematicDirt.class);
  schemes.registerSchematicBlock(Blocks.cactus,SchematicCactus.class);
  schemes.registerSchematicBlock(Blocks.farmland,SchematicFarmland.class);
  schemes.registerSchematicBlock(Blocks.wheat,SchematicSeeds.class,Items.wheat_seeds);
  schemes.registerSchematicBlock(Blocks.pumpkin_stem,SchematicSeeds.class,Items.pumpkin_seeds);
  schemes.registerSchematicBlock(Blocks.melon_stem,SchematicSeeds.class,Items.melon_seeds);
  schemes.registerSchematicBlock(Blocks.nether_wart,SchematicSeeds.class,Items.nether_wart);
  schemes.registerSchematicBlock(Blocks.tripwire,SchematicBlockFloored.class);
  schemes.registerSchematicBlock(Blocks.tripwire_hook,SchematicTripWireHook.class);
  schemes.registerSchematicBlock(Blocks.skull,SchematicSkull.class);
  schemes.registerSchematicBlock(Blocks.ladder,SchematicRotateMetaSupported.class,new int[]{2,5,3,4},true);
  schemes.registerSchematicBlock(Blocks.fence_gate,SchematicRotateMeta.class,new int[]{0,1,2,3},true);
  schemes.registerSchematicBlock(Blocks.log,SchematicRotateMeta.class,new int[]{8,4,8,4},true);
  schemes.registerSchematicBlock(Blocks.log2,SchematicRotateMeta.class,new int[]{8,4,8,4},true);
  schemes.registerSchematicBlock(Blocks.hay_block,SchematicRotateMeta.class,new int[]{8,4,8,4},true);
  schemes.registerSchematicBlock(Blocks.quartz_block,SchematicRotateMeta.class,new int[]{4,3,4,3},true);
  schemes.registerSchematicBlock(Blocks.hopper,SchematicRotateMeta.class,new int[]{2,5,3,4},true);
  schemes.registerSchematicBlock(Blocks.anvil,SchematicRotateMeta.class,new int[]{0,1,2,3},true);
  schemes.registerSchematicBlock(Blocks.furnace,SchematicRotateMeta.class,new int[]{2,5,3,4},true);
  schemes.registerSchematicBlock(Blocks.lit_furnace,SchematicRotateMeta.class,new int[]{2,5,3,4},true);
  schemes.registerSchematicBlock(Blocks.chest,SchematicRotateMeta.class,new int[]{2,5,3,4},true);
  schemes.registerSchematicBlock(Blocks.trapped_chest,SchematicRotateMeta.class,new int[]{2,5,3,4},true);
  schemes.registerSchematicBlock(Blocks.dispenser,SchematicRotateMeta.class,new int[]{2,5,3,4},true);
  schemes.registerSchematicBlock(Blocks.dropper,SchematicRotateMeta.class,new int[]{2,5,3,4},true);
  schemes.registerSchematicBlock(Blocks.ender_chest,SchematicEnderChest.class);
  schemes.registerSchematicBlock(Blocks.vine,SchematicRotateMeta.class,new int[]{1,4,8,2},false);
  schemes.registerSchematicBlock(Blocks.trapdoor,SchematicRotateMeta.class,new int[]{0,1,2,3},false);
  schemes.registerSchematicBlock(Blocks.stone,SchematicStone.class);
  schemes.registerSchematicBlock(Blocks.coal_ore,SchematicStone.class);
  schemes.registerSchematicBlock(Blocks.lapis_ore,SchematicStone.class);
  schemes.registerSchematicBlock(Blocks.diamond_ore,SchematicStone.class);
  schemes.registerSchematicBlock(Blocks.redstone_ore,SchematicStone.class);
  schemes.registerSchematicBlock(Blocks.lit_redstone_ore,SchematicStone.class);
  schemes.registerSchematicBlock(Blocks.emerald_ore,SchematicStone.class);
  schemes.registerSchematicBlock(Blocks.monster_egg,SchematicSilverfish.class);
  schemes.registerSchematicBlock(Blocks.gravel,SchematicGravel.class);
  schemes.registerSchematicBlock(Blocks.redstone_wire,SchematicRedstoneWire.class,new ItemStack(Items.redstone));
  schemes.registerSchematicBlock(Blocks.cake,SchematicCustomStack.class,new ItemStack(Items.cake));
  schemes.registerSchematicBlock(Blocks.glowstone,SchematicCustomStack.class,new ItemStack(Blocks.glowstone));
  schemes.registerSchematicBlock(Blocks.powered_repeater,SchematicRedstoneDiode.class,Items.repeater);
  schemes.registerSchematicBlock(Blocks.unpowered_repeater,SchematicRedstoneDiode.class,Items.repeater);
  schemes.registerSchematicBlock(Blocks.powered_comparator,SchematicRedstoneDiode.class,Items.comparator);
  schemes.registerSchematicBlock(Blocks.unpowered_comparator,SchematicRedstoneDiode.class,Items.comparator);
  schemes.registerSchematicBlock(Blocks.redstone_lamp,SchematicRedstoneLamp.class);
  schemes.registerSchematicBlock(Blocks.lit_redstone_lamp,SchematicRedstoneLamp.class);
  schemes.registerSchematicBlock(Blocks.glass_pane,SchematicGlassPane.class);
  schemes.registerSchematicBlock(Blocks.stained_glass_pane,SchematicGlassPane.class);
  schemes.registerSchematicBlock(Blocks.piston,SchematicPiston.class);
  schemes.registerSchematicBlock(Blocks.piston_extension,SchematicPiston.class);
  schemes.registerSchematicBlock(Blocks.sticky_piston,SchematicPiston.class);
  schemes.registerSchematicBlock(Blocks.lit_pumpkin,SchematicPumpkin.class);
  schemes.registerSchematicBlock(Blocks.wooden_door,SchematicDoor.class,new ItemStack(Items.wooden_door));
  schemes.registerSchematicBlock(Blocks.iron_door,SchematicDoor.class,new ItemStack(Items.iron_door));
  schemes.registerSchematicBlock(Blocks.bed,SchematicBed.class);
  schemes.registerSchematicBlock(Blocks.wall_sign,SchematicSign.class,true);
  schemes.registerSchematicBlock(Blocks.standing_sign,SchematicSign.class,false);
  schemes.registerSchematicBlock(Blocks.portal,SchematicPortal.class);
  schemes.registerSchematicBlock(Blocks.rail,SchematicRail.class);
  schemes.registerSchematicBlock(Blocks.activator_rail,SchematicRail.class);
  schemes.registerSchematicBlock(Blocks.detector_rail,SchematicRail.class);
  schemes.registerSchematicBlock(Blocks.golden_rail,SchematicRail.class);
  schemes.registerSchematicBlock(Blocks.fire,SchematicFire.class);
  schemes.registerSchematicBlock(Blocks.bedrock,SchematicBlockCreative.class);
  schemes.registerSchematicBlock(Blocks.mob_spawner,SchematicTileCreative.class);
  schemes.registerSchematicEntity(EntityMinecartEmpty.class,SchematicMinecart.class,Items.minecart);
  schemes.registerSchematicEntity(EntityMinecartFurnace.class,SchematicMinecart.class,Items.furnace_minecart);
  schemes.registerSchematicEntity(EntityMinecartTNT.class,SchematicMinecart.class,Items.tnt_minecart);
  schemes.registerSchematicEntity(EntityMinecartChest.class,SchematicMinecart.class,Items.chest_minecart);
  schemes.registerSchematicEntity(EntityMinecartHopper.class,SchematicMinecart.class,Items.hopper_minecart);
  schemes.registerSchematicEntity(EntityPainting.class,SchematicHanging.class,Items.painting);
  schemes.registerSchematicEntity(EntityItemFrame.class,SchematicHanging.class,Items.item_frame);
  schemes.registerSchematicBlock(architectBlock,SchematicRotateMeta.class,new int[]{2,5,3,4},true);
  schemes.registerSchematicBlock(builderBlock,SchematicRotateMeta.class,new int[]{2,5,3,4},true);
  if (constructionMarkerBlock != null) {
    schemes.registerSchematicBlock(constructionMarkerBlock,SchematicIgnore.class);
  }
  schemes.registerSchematicBlock(frameBlock,SchematicFree.class);
  SchematicFactory.registerSchematicFactory(SchematicBlock.class,new SchematicFactoryBlock());
  SchematicFactory.registerSchematicFactory(SchematicMask.class,new SchematicFactoryMask());
  SchematicFactory.registerSchematicFactory(SchematicEntity.class,new SchematicFactoryEntity());
  LibraryAPI.registerHandler(new LibraryBlueprintTypeHandler(false));
  LibraryAPI.registerHandler(new LibraryBlueprintTypeHandler(true));
  LibraryAPI.registerHandler(new LibraryBookTypeHandler());
  BlueprintDeployer.instance=new RealBlueprintDeployer();
  architectAchievement=BuildCraftCore.achievementManager.registerAchievement(new Achievement(""String_Node_Str"",""String_Node_Str"",11,2,BuildCraftBuilders.architectBlock,BuildCraftCore.goldGearAchievement));
  builderAchievement=BuildCraftCore.achievementManager.registerAchievement(new Achievement(""String_Node_Str"",""String_Node_Str"",13,2,BuildCraftBuilders.builderBlock,architectAchievement));
  blueprintAchievement=BuildCraftCore.achievementManager.registerAchievement(new Achievement(""String_Node_Str"",""String_Node_Str"",11,4,BuildCraftBuilders.blueprintItem,architectAchievement));
  templateAchievement=BuildCraftCore.achievementManager.registerAchievement(new Achievement(""String_Node_Str"",""String_Node_Str"",13,4,BuildCraftBuilders.templateItem,blueprintAchievement));
  libraryAchievement=BuildCraftCore.achievementManager.registerAchievement(new Achievement(""String_Node_Str"",""String_Node_Str"",15,2,BuildCraftBuilders.libraryBlock,builderAchievement));
  chunkDestroyerAchievement=BuildCraftCore.achievementManager.registerAchievement(new Achievement(""String_Node_Str"",""String_Node_Str"",9,2,quarryBlock,BuildCraftCore.diamondGearAchievement));
  if (BuildCraftCore.loadDefaultRecipes) {
    loadRecipes();
  }
  BuilderProxy.proxy.registerBlockRenderers();
}","@Mod.EventHandler public void init(FMLInitializationEvent evt){
  NetworkRegistry.INSTANCE.registerGuiHandler(instance,new BuildersGuiHandler());
  ISchematicRegistry schemes=BuilderAPI.schematicRegistry;
  schemes.registerSchematicBlock(Blocks.air,SchematicAir.class);
  schemes.registerSchematicBlock(Blocks.snow,SchematicIgnore.class);
  schemes.registerSchematicBlock(Blocks.tallgrass,SchematicIgnore.class);
  schemes.registerSchematicBlock(Blocks.double_plant,SchematicIgnore.class);
  schemes.registerSchematicBlock(Blocks.ice,SchematicIgnore.class);
  schemes.registerSchematicBlock(Blocks.piston_head,SchematicIgnore.class);
  schemes.registerSchematicBlock(Blocks.dirt,SchematicDirt.class);
  schemes.registerSchematicBlock(Blocks.grass,SchematicDirt.class);
  schemes.registerSchematicBlock(Blocks.cactus,SchematicCactus.class);
  schemes.registerSchematicBlock(Blocks.farmland,SchematicFarmland.class);
  schemes.registerSchematicBlock(Blocks.wheat,SchematicSeeds.class,Items.wheat_seeds);
  schemes.registerSchematicBlock(Blocks.pumpkin_stem,SchematicSeeds.class,Items.pumpkin_seeds);
  schemes.registerSchematicBlock(Blocks.melon_stem,SchematicSeeds.class,Items.melon_seeds);
  schemes.registerSchematicBlock(Blocks.nether_wart,SchematicSeeds.class,Items.nether_wart);
  schemes.registerSchematicBlock(Blocks.flower_pot,SchematicTile.class);
  schemes.registerSchematicBlock(Blocks.tripwire,SchematicBlockFloored.class);
  schemes.registerSchematicBlock(Blocks.tripwire_hook,SchematicTripWireHook.class);
  schemes.registerSchematicBlock(Blocks.skull,SchematicSkull.class);
  schemes.registerSchematicBlock(Blocks.ladder,SchematicRotateMetaSupported.class,new int[]{2,5,3,4},true);
  schemes.registerSchematicBlock(Blocks.fence_gate,SchematicRotateMeta.class,new int[]{0,1,2,3},true);
  schemes.registerSchematicBlock(Blocks.log,SchematicRotateMeta.class,new int[]{8,4,8,4},true);
  schemes.registerSchematicBlock(Blocks.log2,SchematicRotateMeta.class,new int[]{8,4,8,4},true);
  schemes.registerSchematicBlock(Blocks.hay_block,SchematicRotateMeta.class,new int[]{8,4,8,4},true);
  schemes.registerSchematicBlock(Blocks.quartz_block,SchematicRotateMeta.class,new int[]{4,3,4,3},true);
  schemes.registerSchematicBlock(Blocks.hopper,SchematicRotateMeta.class,new int[]{2,5,3,4},true);
  schemes.registerSchematicBlock(Blocks.anvil,SchematicRotateMeta.class,new int[]{0,1,2,3},true);
  schemes.registerSchematicBlock(Blocks.furnace,SchematicRotateMeta.class,new int[]{2,5,3,4},true);
  schemes.registerSchematicBlock(Blocks.lit_furnace,SchematicRotateMeta.class,new int[]{2,5,3,4},true);
  schemes.registerSchematicBlock(Blocks.chest,SchematicRotateMeta.class,new int[]{2,5,3,4},true);
  schemes.registerSchematicBlock(Blocks.trapped_chest,SchematicRotateMeta.class,new int[]{2,5,3,4},true);
  schemes.registerSchematicBlock(Blocks.dispenser,SchematicRotateMeta.class,new int[]{2,5,3,4},true);
  schemes.registerSchematicBlock(Blocks.dropper,SchematicRotateMeta.class,new int[]{2,5,3,4},true);
  schemes.registerSchematicBlock(Blocks.ender_chest,SchematicEnderChest.class);
  schemes.registerSchematicBlock(Blocks.vine,SchematicRotateMeta.class,new int[]{1,4,8,2},false);
  schemes.registerSchematicBlock(Blocks.trapdoor,SchematicRotateMeta.class,new int[]{0,1,2,3},false);
  schemes.registerSchematicBlock(Blocks.stone,SchematicStone.class);
  schemes.registerSchematicBlock(Blocks.coal_ore,SchematicStone.class);
  schemes.registerSchematicBlock(Blocks.lapis_ore,SchematicStone.class);
  schemes.registerSchematicBlock(Blocks.diamond_ore,SchematicStone.class);
  schemes.registerSchematicBlock(Blocks.redstone_ore,SchematicStone.class);
  schemes.registerSchematicBlock(Blocks.lit_redstone_ore,SchematicStone.class);
  schemes.registerSchematicBlock(Blocks.emerald_ore,SchematicStone.class);
  schemes.registerSchematicBlock(Blocks.monster_egg,SchematicSilverfish.class);
  schemes.registerSchematicBlock(Blocks.gravel,SchematicGravel.class);
  schemes.registerSchematicBlock(Blocks.redstone_wire,SchematicRedstoneWire.class,new ItemStack(Items.redstone));
  schemes.registerSchematicBlock(Blocks.cake,SchematicCustomStack.class,new ItemStack(Items.cake));
  schemes.registerSchematicBlock(Blocks.glowstone,SchematicCustomStack.class,new ItemStack(Blocks.glowstone));
  schemes.registerSchematicBlock(Blocks.powered_repeater,SchematicRedstoneDiode.class,Items.repeater);
  schemes.registerSchematicBlock(Blocks.unpowered_repeater,SchematicRedstoneDiode.class,Items.repeater);
  schemes.registerSchematicBlock(Blocks.powered_comparator,SchematicRedstoneDiode.class,Items.comparator);
  schemes.registerSchematicBlock(Blocks.unpowered_comparator,SchematicRedstoneDiode.class,Items.comparator);
  schemes.registerSchematicBlock(Blocks.daylight_detector,SchematicTile.class);
  schemes.registerSchematicBlock(Blocks.jukebox,SchematicJukebox.class);
  schemes.registerSchematicBlock(Blocks.noteblock,SchematicTile.class);
  schemes.registerSchematicBlock(Blocks.redstone_lamp,SchematicRedstoneLamp.class);
  schemes.registerSchematicBlock(Blocks.lit_redstone_lamp,SchematicRedstoneLamp.class);
  schemes.registerSchematicBlock(Blocks.glass_pane,SchematicGlassPane.class);
  schemes.registerSchematicBlock(Blocks.stained_glass_pane,SchematicGlassPane.class);
  schemes.registerSchematicBlock(Blocks.piston,SchematicPiston.class);
  schemes.registerSchematicBlock(Blocks.piston_extension,SchematicPiston.class);
  schemes.registerSchematicBlock(Blocks.sticky_piston,SchematicPiston.class);
  schemes.registerSchematicBlock(Blocks.lit_pumpkin,SchematicPumpkin.class);
  schemes.registerSchematicBlock(Blocks.wooden_door,SchematicDoor.class,new ItemStack(Items.wooden_door));
  schemes.registerSchematicBlock(Blocks.iron_door,SchematicDoor.class,new ItemStack(Items.iron_door));
  schemes.registerSchematicBlock(Blocks.bed,SchematicBed.class);
  schemes.registerSchematicBlock(Blocks.wall_sign,SchematicSign.class,true);
  schemes.registerSchematicBlock(Blocks.standing_sign,SchematicSign.class,false);
  schemes.registerSchematicBlock(Blocks.portal,SchematicPortal.class);
  schemes.registerSchematicBlock(Blocks.rail,SchematicRail.class);
  schemes.registerSchematicBlock(Blocks.activator_rail,SchematicRail.class);
  schemes.registerSchematicBlock(Blocks.detector_rail,SchematicRail.class);
  schemes.registerSchematicBlock(Blocks.golden_rail,SchematicRail.class);
  schemes.registerSchematicBlock(Blocks.beacon,SchematicTile.class);
  schemes.registerSchematicBlock(Blocks.brewing_stand,SchematicBrewingStand.class);
  schemes.registerSchematicBlock(Blocks.enchanting_table,SchematicTile.class);
  schemes.registerSchematicBlock(Blocks.fire,SchematicFire.class);
  schemes.registerSchematicBlock(Blocks.bedrock,SchematicBlockCreative.class);
  schemes.registerSchematicBlock(Blocks.command_block,SchematicTileCreative.class);
  schemes.registerSchematicBlock(Blocks.mob_spawner,SchematicTileCreative.class);
  schemes.registerSchematicEntity(EntityMinecartEmpty.class,SchematicMinecart.class,Items.minecart);
  schemes.registerSchematicEntity(EntityMinecartFurnace.class,SchematicMinecart.class,Items.furnace_minecart);
  schemes.registerSchematicEntity(EntityMinecartTNT.class,SchematicMinecart.class,Items.tnt_minecart);
  schemes.registerSchematicEntity(EntityMinecartChest.class,SchematicMinecart.class,Items.chest_minecart);
  schemes.registerSchematicEntity(EntityMinecartHopper.class,SchematicMinecart.class,Items.hopper_minecart);
  schemes.registerSchematicEntity(EntityPainting.class,SchematicHanging.class,Items.painting);
  schemes.registerSchematicEntity(EntityItemFrame.class,SchematicHanging.class,Items.item_frame);
  schemes.registerSchematicBlock(architectBlock,SchematicRotateMeta.class,new int[]{2,5,3,4},true);
  schemes.registerSchematicBlock(builderBlock,SchematicBuilderLike.class);
  schemes.registerSchematicBlock(fillerBlock,SchematicBuilderLike.class);
  schemes.registerSchematicBlock(libraryBlock,SchematicRotateMeta.class,new int[]{2,5,3,4},true);
  schemes.registerSchematicBlock(quarryBlock,SchematicBuilderLike.class);
  if (constructionMarkerBlock != null) {
    schemes.registerSchematicBlock(constructionMarkerBlock,SchematicIgnore.class);
  }
  schemes.registerSchematicBlock(frameBlock,SchematicFree.class);
  SchematicFactory.registerSchematicFactory(SchematicBlock.class,new SchematicFactoryBlock());
  SchematicFactory.registerSchematicFactory(SchematicMask.class,new SchematicFactoryMask());
  SchematicFactory.registerSchematicFactory(SchematicEntity.class,new SchematicFactoryEntity());
  LibraryAPI.registerHandler(new LibraryBlueprintTypeHandler(false));
  LibraryAPI.registerHandler(new LibraryBlueprintTypeHandler(true));
  LibraryAPI.registerHandler(new LibraryBookTypeHandler());
  BlueprintDeployer.instance=new RealBlueprintDeployer();
  architectAchievement=BuildCraftCore.achievementManager.registerAchievement(new Achievement(""String_Node_Str"",""String_Node_Str"",11,2,BuildCraftBuilders.architectBlock,BuildCraftCore.goldGearAchievement));
  builderAchievement=BuildCraftCore.achievementManager.registerAchievement(new Achievement(""String_Node_Str"",""String_Node_Str"",13,2,BuildCraftBuilders.builderBlock,architectAchievement));
  blueprintAchievement=BuildCraftCore.achievementManager.registerAchievement(new Achievement(""String_Node_Str"",""String_Node_Str"",11,4,BuildCraftBuilders.blueprintItem,architectAchievement));
  templateAchievement=BuildCraftCore.achievementManager.registerAchievement(new Achievement(""String_Node_Str"",""String_Node_Str"",13,4,BuildCraftBuilders.templateItem,blueprintAchievement));
  libraryAchievement=BuildCraftCore.achievementManager.registerAchievement(new Achievement(""String_Node_Str"",""String_Node_Str"",15,2,BuildCraftBuilders.libraryBlock,builderAchievement));
  chunkDestroyerAchievement=BuildCraftCore.achievementManager.registerAchievement(new Achievement(""String_Node_Str"",""String_Node_Str"",9,2,quarryBlock,BuildCraftCore.diamondGearAchievement));
  if (BuildCraftCore.loadDefaultRecipes) {
    loadRecipes();
  }
  BuilderProxy.proxy.registerBlockRenderers();
}",0.9566073928145576
156525,"@Mod.EventHandler public void loadConfiguration(FMLPreInitializationEvent evt){
  BCLog.logger.info(""String_Node_Str"" + Version.getVersion());
  BCLog.logger.info(""String_Node_Str"");
  BCLog.logger.info(""String_Node_Str"");
  new BCCreativeTab(""String_Node_Str"");
  commandBuildcraft.addAlias(""String_Node_Str"");
  commandBuildcraft.addChildCommand(new SubCommandVersion());
  commandBuildcraft.addChildCommand(new SubCommandChangelog());
  commandBuildcraft.addChildCommand(new SubCommandDeop());
  commandBuildcraft.addChildCommand(new SubCommandOp());
  BuildcraftRecipeRegistry.assemblyTable=AssemblyRecipeManager.INSTANCE;
  BuildcraftRecipeRegistry.integrationTable=IntegrationRecipeManager.INSTANCE;
  BuildcraftRecipeRegistry.refinery=RefineryRecipeManager.INSTANCE;
  BuildcraftRecipeRegistry.programmingTable=ProgrammingRecipeManager.INSTANCE;
  BuilderAPI.schematicRegistry=SchematicRegistry.INSTANCE;
  BCRegistry.INSTANCE.setRegistryConfig(new File(evt.getModConfigurationDirectory(),""String_Node_Str""));
  mainConfiguration=new BuildCraftConfiguration(new File(evt.getModConfigurationDirectory(),""String_Node_Str""));
  mainConfigManager=new ConfigManager(mainConfiguration);
  mainConfiguration.load();
  mainConfigManager.getCat(""String_Node_Str"").setShowInGui(false);
  mainConfigManager.getCat(""String_Node_Str"").setShowInGui(false);
  mainConfigManager.register(""String_Node_Str"",false,""String_Node_Str"",ConfigManager.RestartRequirement.NONE);
  mainConfigManager.register(""String_Node_Str"",true,""String_Node_Str"",ConfigManager.RestartRequirement.NONE);
  mainConfigManager.register(""String_Node_Str"",false,""String_Node_Str"",ConfigManager.RestartRequirement.NONE);
  mainConfigManager.register(""String_Node_Str"",false,""String_Node_Str"",ConfigManager.RestartRequirement.NONE);
  mainConfigManager.register(""String_Node_Str"",60,""String_Node_Str"",ConfigManager.RestartRequirement.NONE).setMinValue(5);
  mainConfigManager.register(""String_Node_Str"",10,""String_Node_Str"",ConfigManager.RestartRequirement.GAME).setMinValue(1);
  mainConfigManager.register(""String_Node_Str"",40,""String_Node_Str"",ConfigManager.RestartRequirement.GAME).setMinValue(1);
  mainConfigManager.register(""String_Node_Str"",false,""String_Node_Str"",ConfigManager.RestartRequirement.NONE);
  mainConfigManager.register(""String_Node_Str"",true,""String_Node_Str"",ConfigManager.RestartRequirement.GAME);
  mainConfigManager.register(""String_Node_Str"",false,""String_Node_Str"",ConfigManager.RestartRequirement.NONE);
  mainConfigManager.register(""String_Node_Str"",1.0D,""String_Node_Str"",ConfigManager.RestartRequirement.NONE);
  mainConfigManager.register(""String_Node_Str"",false,""String_Node_Str"",ConfigManager.RestartRequirement.GAME);
  mainConfigManager.register(""String_Node_Str"",true,""String_Node_Str"",ConfigManager.RestartRequirement.GAME);
  reloadConfig(ConfigManager.RestartRequirement.GAME);
  wrenchItem=(new ItemWrench()).setUnlocalizedName(""String_Node_Str"");
  BCRegistry.INSTANCE.registerItem(wrenchItem,false);
  mapLocationItem=(new ItemMapLocation()).setUnlocalizedName(""String_Node_Str"");
  BCRegistry.INSTANCE.registerItem(mapLocationItem,false);
  listItem=(ItemList)(new ItemList()).setUnlocalizedName(""String_Node_Str"");
  BCRegistry.INSTANCE.registerItem(listItem,false);
  debuggerItem=(new ItemDebugger()).setUnlocalizedName(""String_Node_Str"");
  BCRegistry.INSTANCE.registerItem(debuggerItem,false);
  if (BuildCraftCore.modifyWorld) {
    BlockSpring.EnumSpring.WATER.canGen=BuildCraftCore.mainConfigManager.get(""String_Node_Str"").getBoolean();
    springBlock=new BlockSpring().setBlockName(""String_Node_Str"");
    BCRegistry.INSTANCE.registerBlock(springBlock,ItemSpring.class,false);
  }
  woodenGearItem=(new ItemGear()).setUnlocalizedName(""String_Node_Str"");
  if (BCRegistry.INSTANCE.registerItem(woodenGearItem,false)) {
    OreDictionary.registerOre(""String_Node_Str"",new ItemStack(woodenGearItem));
  }
  stoneGearItem=(new ItemGear()).setUnlocalizedName(""String_Node_Str"");
  if (BCRegistry.INSTANCE.registerItem(stoneGearItem,false)) {
    OreDictionary.registerOre(""String_Node_Str"",new ItemStack(stoneGearItem));
  }
  ironGearItem=(new ItemGear()).setUnlocalizedName(""String_Node_Str"");
  if (BCRegistry.INSTANCE.registerItem(ironGearItem,false)) {
    OreDictionary.registerOre(""String_Node_Str"",new ItemStack(ironGearItem));
  }
  goldGearItem=(new ItemGear()).setUnlocalizedName(""String_Node_Str"");
  if (BCRegistry.INSTANCE.registerItem(goldGearItem,false)) {
    OreDictionary.registerOre(""String_Node_Str"",new ItemStack(goldGearItem));
  }
  diamondGearItem=(new ItemGear()).setUnlocalizedName(""String_Node_Str"");
  if (BCRegistry.INSTANCE.registerItem(diamondGearItem,false)) {
    OreDictionary.registerOre(""String_Node_Str"",new ItemStack(diamondGearItem));
  }
  paintbrushItem=(new ItemPaintbrush()).setUnlocalizedName(""String_Node_Str"");
  BCRegistry.INSTANCE.registerItem(paintbrushItem,false);
  if (DEVELOPER_MODE) {
    tabletItem=new ItemTablet();
    tabletItem.setUnlocalizedName(""String_Node_Str"");
    BCRegistry.INSTANCE.registerItem(tabletItem,false);
  }
  buildToolBlock=new BlockBuildTool();
  buildToolBlock.setBlockName(""String_Node_Str"");
  BCRegistry.INSTANCE.registerBlock(buildToolBlock,true);
  engineBlock=(BlockEngine)CompatHooks.INSTANCE.getBlock(BlockEngine.class);
  BCRegistry.INSTANCE.registerBlock(engineBlock,ItemEngine.class,true);
  engineBlock.registerTile((Class<? extends TileEngineBase>)CompatHooks.INSTANCE.getTile(TileEngineWood.class),0,""String_Node_Str"",""String_Node_Str"");
  BCRegistry.INSTANCE.registerTileEntity(TileEngineWood.class,""String_Node_Str"");
  markerBlock=(BlockMarker)CompatHooks.INSTANCE.getBlock(BlockMarker.class);
  BCRegistry.INSTANCE.registerBlock(markerBlock.setBlockName(""String_Node_Str""),false);
  pathMarkerBlock=(BlockPathMarker)CompatHooks.INSTANCE.getBlock(BlockPathMarker.class);
  BCRegistry.INSTANCE.registerBlock(pathMarkerBlock.setBlockName(""String_Node_Str""),false);
  FMLCommonHandler.instance().bus().register(this);
  MinecraftForge.EVENT_BUS.register(this);
  MinecraftForge.EVENT_BUS.register(new BlockHighlightHandler());
  MinecraftForge.EVENT_BUS.register(new ListTooltipHandler());
  OreDictionary.registerOre(""String_Node_Str"",Blocks.chest);
  OreDictionary.registerOre(""String_Node_Str"",Blocks.crafting_table);
}","@Mod.EventHandler public void loadConfiguration(FMLPreInitializationEvent evt){
  BCLog.logger.info(""String_Node_Str"" + Version.getVersion());
  BCLog.logger.info(""String_Node_Str"");
  BCLog.logger.info(""String_Node_Str"");
  new BCCreativeTab(""String_Node_Str"");
  commandBuildcraft.addAlias(""String_Node_Str"");
  commandBuildcraft.addChildCommand(new SubCommandVersion());
  commandBuildcraft.addChildCommand(new SubCommandChangelog());
  commandBuildcraft.addChildCommand(new SubCommandDeop());
  commandBuildcraft.addChildCommand(new SubCommandOp());
  BuildcraftRecipeRegistry.assemblyTable=AssemblyRecipeManager.INSTANCE;
  BuildcraftRecipeRegistry.integrationTable=IntegrationRecipeManager.INSTANCE;
  BuildcraftRecipeRegistry.refinery=RefineryRecipeManager.INSTANCE;
  BuildcraftRecipeRegistry.programmingTable=ProgrammingRecipeManager.INSTANCE;
  BuilderAPI.schematicHelper=SchematicHelper.INSTANCE;
  BuilderAPI.schematicRegistry=SchematicRegistry.INSTANCE;
  BCRegistry.INSTANCE.setRegistryConfig(new File(evt.getModConfigurationDirectory(),""String_Node_Str""));
  mainConfiguration=new BuildCraftConfiguration(new File(evt.getModConfigurationDirectory(),""String_Node_Str""));
  mainConfigManager=new ConfigManager(mainConfiguration);
  mainConfiguration.load();
  mainConfigManager.getCat(""String_Node_Str"").setShowInGui(false);
  mainConfigManager.getCat(""String_Node_Str"").setShowInGui(false);
  mainConfigManager.register(""String_Node_Str"",false,""String_Node_Str"",ConfigManager.RestartRequirement.NONE);
  mainConfigManager.register(""String_Node_Str"",true,""String_Node_Str"",ConfigManager.RestartRequirement.NONE);
  mainConfigManager.register(""String_Node_Str"",false,""String_Node_Str"",ConfigManager.RestartRequirement.NONE);
  mainConfigManager.register(""String_Node_Str"",false,""String_Node_Str"",ConfigManager.RestartRequirement.NONE);
  mainConfigManager.register(""String_Node_Str"",60,""String_Node_Str"",ConfigManager.RestartRequirement.NONE).setMinValue(5);
  mainConfigManager.register(""String_Node_Str"",10,""String_Node_Str"",ConfigManager.RestartRequirement.GAME).setMinValue(1);
  mainConfigManager.register(""String_Node_Str"",40,""String_Node_Str"",ConfigManager.RestartRequirement.GAME).setMinValue(1);
  mainConfigManager.register(""String_Node_Str"",false,""String_Node_Str"",ConfigManager.RestartRequirement.NONE);
  mainConfigManager.register(""String_Node_Str"",true,""String_Node_Str"",ConfigManager.RestartRequirement.GAME);
  mainConfigManager.register(""String_Node_Str"",false,""String_Node_Str"",ConfigManager.RestartRequirement.NONE);
  mainConfigManager.register(""String_Node_Str"",1.0D,""String_Node_Str"",ConfigManager.RestartRequirement.NONE);
  mainConfigManager.register(""String_Node_Str"",false,""String_Node_Str"",ConfigManager.RestartRequirement.GAME);
  mainConfigManager.register(""String_Node_Str"",true,""String_Node_Str"",ConfigManager.RestartRequirement.GAME);
  reloadConfig(ConfigManager.RestartRequirement.GAME);
  wrenchItem=(new ItemWrench()).setUnlocalizedName(""String_Node_Str"");
  BCRegistry.INSTANCE.registerItem(wrenchItem,false);
  mapLocationItem=(new ItemMapLocation()).setUnlocalizedName(""String_Node_Str"");
  BCRegistry.INSTANCE.registerItem(mapLocationItem,false);
  listItem=(ItemList)(new ItemList()).setUnlocalizedName(""String_Node_Str"");
  BCRegistry.INSTANCE.registerItem(listItem,false);
  debuggerItem=(new ItemDebugger()).setUnlocalizedName(""String_Node_Str"");
  BCRegistry.INSTANCE.registerItem(debuggerItem,false);
  if (BuildCraftCore.modifyWorld) {
    BlockSpring.EnumSpring.WATER.canGen=BuildCraftCore.mainConfigManager.get(""String_Node_Str"").getBoolean();
    springBlock=new BlockSpring().setBlockName(""String_Node_Str"");
    BCRegistry.INSTANCE.registerBlock(springBlock,ItemSpring.class,false);
  }
  woodenGearItem=(new ItemGear()).setUnlocalizedName(""String_Node_Str"");
  if (BCRegistry.INSTANCE.registerItem(woodenGearItem,false)) {
    OreDictionary.registerOre(""String_Node_Str"",new ItemStack(woodenGearItem));
  }
  stoneGearItem=(new ItemGear()).setUnlocalizedName(""String_Node_Str"");
  if (BCRegistry.INSTANCE.registerItem(stoneGearItem,false)) {
    OreDictionary.registerOre(""String_Node_Str"",new ItemStack(stoneGearItem));
  }
  ironGearItem=(new ItemGear()).setUnlocalizedName(""String_Node_Str"");
  if (BCRegistry.INSTANCE.registerItem(ironGearItem,false)) {
    OreDictionary.registerOre(""String_Node_Str"",new ItemStack(ironGearItem));
  }
  goldGearItem=(new ItemGear()).setUnlocalizedName(""String_Node_Str"");
  if (BCRegistry.INSTANCE.registerItem(goldGearItem,false)) {
    OreDictionary.registerOre(""String_Node_Str"",new ItemStack(goldGearItem));
  }
  diamondGearItem=(new ItemGear()).setUnlocalizedName(""String_Node_Str"");
  if (BCRegistry.INSTANCE.registerItem(diamondGearItem,false)) {
    OreDictionary.registerOre(""String_Node_Str"",new ItemStack(diamondGearItem));
  }
  paintbrushItem=(new ItemPaintbrush()).setUnlocalizedName(""String_Node_Str"");
  BCRegistry.INSTANCE.registerItem(paintbrushItem,false);
  if (DEVELOPER_MODE) {
    tabletItem=new ItemTablet();
    tabletItem.setUnlocalizedName(""String_Node_Str"");
    BCRegistry.INSTANCE.registerItem(tabletItem,false);
  }
  buildToolBlock=new BlockBuildTool();
  buildToolBlock.setBlockName(""String_Node_Str"");
  BCRegistry.INSTANCE.registerBlock(buildToolBlock,true);
  engineBlock=(BlockEngine)CompatHooks.INSTANCE.getBlock(BlockEngine.class);
  BCRegistry.INSTANCE.registerBlock(engineBlock,ItemEngine.class,true);
  engineBlock.registerTile((Class<? extends TileEngineBase>)CompatHooks.INSTANCE.getTile(TileEngineWood.class),0,""String_Node_Str"",""String_Node_Str"");
  BCRegistry.INSTANCE.registerTileEntity(TileEngineWood.class,""String_Node_Str"");
  markerBlock=(BlockMarker)CompatHooks.INSTANCE.getBlock(BlockMarker.class);
  BCRegistry.INSTANCE.registerBlock(markerBlock.setBlockName(""String_Node_Str""),false);
  pathMarkerBlock=(BlockPathMarker)CompatHooks.INSTANCE.getBlock(BlockPathMarker.class);
  BCRegistry.INSTANCE.registerBlock(pathMarkerBlock.setBlockName(""String_Node_Str""),false);
  FMLCommonHandler.instance().bus().register(this);
  MinecraftForge.EVENT_BUS.register(this);
  MinecraftForge.EVENT_BUS.register(new BlockHighlightHandler());
  MinecraftForge.EVENT_BUS.register(new ListTooltipHandler());
  OreDictionary.registerOre(""String_Node_Str"",Blocks.chest);
  OreDictionary.registerOre(""String_Node_Str"",Blocks.crafting_table);
}",0.9956737198143631
156526,"@Mod.EventHandler public void init(FMLInitializationEvent evt){
  NetworkRegistry.INSTANCE.registerGuiHandler(instance,new RoboticsGuiHandler());
  MinecraftForge.EVENT_BUS.register(this);
  if (BuildCraftCore.loadDefaultRecipes && Loader.isModLoaded(""String_Node_Str"")) {
    loadRecipes();
  }
  BCCreativeTab.get(""String_Node_Str"").setIcon(new ItemStack(BuildCraftRobotics.redstoneBoard,1));
  PipeManager.registerPipePluggable(RobotStationPluggable.class,""String_Node_Str"");
  EntityRegistry.registerModEntity(EntityRobot.class,""String_Node_Str"",EntityIds.ROBOT,instance,50,1,true);
  BCRegistry.INSTANCE.registerTileEntity(TileZonePlan.class,""String_Node_Str"");
  BCRegistry.INSTANCE.registerTileEntity(TileRequester.class,""String_Node_Str"");
  RobotManager.registryProvider=new RobotRegistryProvider();
  RobotManager.registerAIRobot(AIRobotMain.class,""String_Node_Str"",""String_Node_Str"");
  RobotManager.registerAIRobot(BoardRobotEmpty.class,""String_Node_Str"");
  RobotManager.registerAIRobot(BoardRobotBomber.class,""String_Node_Str"",""String_Node_Str"");
  if (Loader.isModLoaded(""String_Node_Str"")) {
    RobotManager.registerAIRobot(BoardRobotBuilder.class,""String_Node_Str"",""String_Node_Str"");
  }
  RobotManager.registerAIRobot(BoardRobotButcher.class,""String_Node_Str"",""String_Node_Str"");
  RobotManager.registerAIRobot(BoardRobotCarrier.class,""String_Node_Str"",""String_Node_Str"");
  RobotManager.registerAIRobot(BoardRobotDelivery.class,""String_Node_Str"",""String_Node_Str"");
  RobotManager.registerAIRobot(BoardRobotFarmer.class,""String_Node_Str"",""String_Node_Str"");
  RobotManager.registerAIRobot(BoardRobotFluidCarrier.class,""String_Node_Str"",""String_Node_Str"");
  RobotManager.registerAIRobot(BoardRobotHarvester.class,""String_Node_Str"",""String_Node_Str"");
  RobotManager.registerAIRobot(BoardRobotKnight.class,""String_Node_Str"",""String_Node_Str"");
  RobotManager.registerAIRobot(BoardRobotLeaveCutter.class,""String_Node_Str"",""String_Node_Str"");
  RobotManager.registerAIRobot(BoardRobotLumberjack.class,""String_Node_Str"",""String_Node_Str"");
  RobotManager.registerAIRobot(BoardRobotMiner.class,""String_Node_Str"",""String_Node_Str"");
  RobotManager.registerAIRobot(BoardRobotPicker.class,""String_Node_Str"",""String_Node_Str"");
  RobotManager.registerAIRobot(BoardRobotPlanter.class,""String_Node_Str"",""String_Node_Str"");
  RobotManager.registerAIRobot(BoardRobotPump.class,""String_Node_Str"",""String_Node_Str"");
  RobotManager.registerAIRobot(BoardRobotShovelman.class,""String_Node_Str"",""String_Node_Str"");
  RobotManager.registerAIRobot(BoardRobotStripes.class,""String_Node_Str"",""String_Node_Str"");
  RobotManager.registerAIRobot(AIRobotAttack.class,""String_Node_Str"",""String_Node_Str"");
  RobotManager.registerAIRobot(AIRobotBreak.class,""String_Node_Str"",""String_Node_Str"");
  RobotManager.registerAIRobot(AIRobotDeliverRequested.class,""String_Node_Str"",""String_Node_Str"");
  RobotManager.registerAIRobot(AIRobotDisposeItems.class,""String_Node_Str"",""String_Node_Str"");
  RobotManager.registerAIRobot(AIRobotFetchAndEquipItemStack.class,""String_Node_Str"",""String_Node_Str"");
  RobotManager.registerAIRobot(AIRobotFetchItem.class,""String_Node_Str"",""String_Node_Str"");
  RobotManager.registerAIRobot(AIRobotGoAndLinkToDock.class,""String_Node_Str"",""String_Node_Str"");
  RobotManager.registerAIRobot(AIRobotGoto.class,""String_Node_Str"",""String_Node_Str"");
  RobotManager.registerAIRobot(AIRobotGotoBlock.class,""String_Node_Str"",""String_Node_Str"");
  RobotManager.registerAIRobot(AIRobotGotoSleep.class,""String_Node_Str"",""String_Node_Str"");
  RobotManager.registerAIRobot(AIRobotGotoStation.class,""String_Node_Str"",""String_Node_Str"");
  RobotManager.registerAIRobot(AIRobotGotoStationAndLoad.class,""String_Node_Str"",""String_Node_Str"");
  RobotManager.registerAIRobot(AIRobotGotoStationAndLoadFluids.class,""String_Node_Str"",""String_Node_Str"");
  RobotManager.registerAIRobot(AIRobotGotoStationAndUnload.class,""String_Node_Str"",""String_Node_Str"");
  RobotManager.registerAIRobot(AIRobotGotoStationToLoad.class,""String_Node_Str"",""String_Node_Str"");
  RobotManager.registerAIRobot(AIRobotGotoStationToLoadFluids.class,""String_Node_Str"",""String_Node_Str"");
  RobotManager.registerAIRobot(AIRobotGotoStationToUnload.class,""String_Node_Str"",""String_Node_Str"");
  RobotManager.registerAIRobot(AIRobotGotoStationToUnloadFluids.class,""String_Node_Str"",""String_Node_Str"");
  RobotManager.registerAIRobot(AIRobotHarvest.class,""String_Node_Str"");
  RobotManager.registerAIRobot(AIRobotLoad.class,""String_Node_Str"",""String_Node_Str"");
  RobotManager.registerAIRobot(AIRobotLoadFluids.class,""String_Node_Str"",""String_Node_Str"");
  RobotManager.registerAIRobot(AIRobotPlant.class,""String_Node_Str"");
  RobotManager.registerAIRobot(AIRobotPumpBlock.class,""String_Node_Str"",""String_Node_Str"");
  RobotManager.registerAIRobot(AIRobotRecharge.class,""String_Node_Str"",""String_Node_Str"");
  RobotManager.registerAIRobot(AIRobotSearchAndGotoBlock.class,""String_Node_Str"");
  RobotManager.registerAIRobot(AIRobotSearchAndGotoStation.class,""String_Node_Str"",""String_Node_Str"");
  RobotManager.registerAIRobot(AIRobotSearchBlock.class,""String_Node_Str"",""String_Node_Str"");
  RobotManager.registerAIRobot(AIRobotSearchEntity.class,""String_Node_Str"",""String_Node_Str"");
  RobotManager.registerAIRobot(AIRobotSearchRandomGroundBlock.class,""String_Node_Str"",""String_Node_Str"");
  RobotManager.registerAIRobot(AIRobotSearchStackRequest.class,""String_Node_Str"",""String_Node_Str"");
  RobotManager.registerAIRobot(AIRobotSearchStation.class,""String_Node_Str"",""String_Node_Str"");
  RobotManager.registerAIRobot(AIRobotShutdown.class,""String_Node_Str"");
  RobotManager.registerAIRobot(AIRobotSleep.class,""String_Node_Str"",""String_Node_Str"");
  RobotManager.registerAIRobot(AIRobotStraightMoveTo.class,""String_Node_Str"",""String_Node_Str"");
  RobotManager.registerAIRobot(AIRobotUnload.class,""String_Node_Str"",""String_Node_Str"");
  RobotManager.registerAIRobot(AIRobotUnloadFluids.class,""String_Node_Str"",""String_Node_Str"");
  RobotManager.registerAIRobot(AIRobotUseToolOnBlock.class,""String_Node_Str"",""String_Node_Str"");
  RobotManager.registerDockingStation(DockingStationPipe.class,""String_Node_Str"");
  RoboticsProxy.proxy.registerRenderers();
  ListRegistry.itemClassAsType.add(ItemRobot.class);
}","@Mod.EventHandler public void init(FMLInitializationEvent evt){
  NetworkRegistry.INSTANCE.registerGuiHandler(instance,new RoboticsGuiHandler());
  MinecraftForge.EVENT_BUS.register(this);
  if (BuildCraftCore.loadDefaultRecipes && Loader.isModLoaded(""String_Node_Str"")) {
    loadRecipes();
  }
  BCCreativeTab.get(""String_Node_Str"").setIcon(new ItemStack(BuildCraftRobotics.redstoneBoard,1));
  BuilderAPI.schematicRegistry.registerSchematicBlock(requesterBlock,SchematicTile.class);
  PipeManager.registerPipePluggable(RobotStationPluggable.class,""String_Node_Str"");
  EntityRegistry.registerModEntity(EntityRobot.class,""String_Node_Str"",EntityIds.ROBOT,instance,50,1,true);
  BCRegistry.INSTANCE.registerTileEntity(TileZonePlan.class,""String_Node_Str"");
  BCRegistry.INSTANCE.registerTileEntity(TileRequester.class,""String_Node_Str"");
  RobotManager.registryProvider=new RobotRegistryProvider();
  RobotManager.registerAIRobot(AIRobotMain.class,""String_Node_Str"",""String_Node_Str"");
  RobotManager.registerAIRobot(BoardRobotEmpty.class,""String_Node_Str"");
  RobotManager.registerAIRobot(BoardRobotBomber.class,""String_Node_Str"",""String_Node_Str"");
  if (Loader.isModLoaded(""String_Node_Str"")) {
    RobotManager.registerAIRobot(BoardRobotBuilder.class,""String_Node_Str"",""String_Node_Str"");
  }
  RobotManager.registerAIRobot(BoardRobotButcher.class,""String_Node_Str"",""String_Node_Str"");
  RobotManager.registerAIRobot(BoardRobotCarrier.class,""String_Node_Str"",""String_Node_Str"");
  RobotManager.registerAIRobot(BoardRobotDelivery.class,""String_Node_Str"",""String_Node_Str"");
  RobotManager.registerAIRobot(BoardRobotFarmer.class,""String_Node_Str"",""String_Node_Str"");
  RobotManager.registerAIRobot(BoardRobotFluidCarrier.class,""String_Node_Str"",""String_Node_Str"");
  RobotManager.registerAIRobot(BoardRobotHarvester.class,""String_Node_Str"",""String_Node_Str"");
  RobotManager.registerAIRobot(BoardRobotKnight.class,""String_Node_Str"",""String_Node_Str"");
  RobotManager.registerAIRobot(BoardRobotLeaveCutter.class,""String_Node_Str"",""String_Node_Str"");
  RobotManager.registerAIRobot(BoardRobotLumberjack.class,""String_Node_Str"",""String_Node_Str"");
  RobotManager.registerAIRobot(BoardRobotMiner.class,""String_Node_Str"",""String_Node_Str"");
  RobotManager.registerAIRobot(BoardRobotPicker.class,""String_Node_Str"",""String_Node_Str"");
  RobotManager.registerAIRobot(BoardRobotPlanter.class,""String_Node_Str"",""String_Node_Str"");
  RobotManager.registerAIRobot(BoardRobotPump.class,""String_Node_Str"",""String_Node_Str"");
  RobotManager.registerAIRobot(BoardRobotShovelman.class,""String_Node_Str"",""String_Node_Str"");
  RobotManager.registerAIRobot(BoardRobotStripes.class,""String_Node_Str"",""String_Node_Str"");
  RobotManager.registerAIRobot(AIRobotAttack.class,""String_Node_Str"",""String_Node_Str"");
  RobotManager.registerAIRobot(AIRobotBreak.class,""String_Node_Str"",""String_Node_Str"");
  RobotManager.registerAIRobot(AIRobotDeliverRequested.class,""String_Node_Str"",""String_Node_Str"");
  RobotManager.registerAIRobot(AIRobotDisposeItems.class,""String_Node_Str"",""String_Node_Str"");
  RobotManager.registerAIRobot(AIRobotFetchAndEquipItemStack.class,""String_Node_Str"",""String_Node_Str"");
  RobotManager.registerAIRobot(AIRobotFetchItem.class,""String_Node_Str"",""String_Node_Str"");
  RobotManager.registerAIRobot(AIRobotGoAndLinkToDock.class,""String_Node_Str"",""String_Node_Str"");
  RobotManager.registerAIRobot(AIRobotGoto.class,""String_Node_Str"",""String_Node_Str"");
  RobotManager.registerAIRobot(AIRobotGotoBlock.class,""String_Node_Str"",""String_Node_Str"");
  RobotManager.registerAIRobot(AIRobotGotoSleep.class,""String_Node_Str"",""String_Node_Str"");
  RobotManager.registerAIRobot(AIRobotGotoStation.class,""String_Node_Str"",""String_Node_Str"");
  RobotManager.registerAIRobot(AIRobotGotoStationAndLoad.class,""String_Node_Str"",""String_Node_Str"");
  RobotManager.registerAIRobot(AIRobotGotoStationAndLoadFluids.class,""String_Node_Str"",""String_Node_Str"");
  RobotManager.registerAIRobot(AIRobotGotoStationAndUnload.class,""String_Node_Str"",""String_Node_Str"");
  RobotManager.registerAIRobot(AIRobotGotoStationToLoad.class,""String_Node_Str"",""String_Node_Str"");
  RobotManager.registerAIRobot(AIRobotGotoStationToLoadFluids.class,""String_Node_Str"",""String_Node_Str"");
  RobotManager.registerAIRobot(AIRobotGotoStationToUnload.class,""String_Node_Str"",""String_Node_Str"");
  RobotManager.registerAIRobot(AIRobotGotoStationToUnloadFluids.class,""String_Node_Str"",""String_Node_Str"");
  RobotManager.registerAIRobot(AIRobotHarvest.class,""String_Node_Str"");
  RobotManager.registerAIRobot(AIRobotLoad.class,""String_Node_Str"",""String_Node_Str"");
  RobotManager.registerAIRobot(AIRobotLoadFluids.class,""String_Node_Str"",""String_Node_Str"");
  RobotManager.registerAIRobot(AIRobotPlant.class,""String_Node_Str"");
  RobotManager.registerAIRobot(AIRobotPumpBlock.class,""String_Node_Str"",""String_Node_Str"");
  RobotManager.registerAIRobot(AIRobotRecharge.class,""String_Node_Str"",""String_Node_Str"");
  RobotManager.registerAIRobot(AIRobotSearchAndGotoBlock.class,""String_Node_Str"");
  RobotManager.registerAIRobot(AIRobotSearchAndGotoStation.class,""String_Node_Str"",""String_Node_Str"");
  RobotManager.registerAIRobot(AIRobotSearchBlock.class,""String_Node_Str"",""String_Node_Str"");
  RobotManager.registerAIRobot(AIRobotSearchEntity.class,""String_Node_Str"",""String_Node_Str"");
  RobotManager.registerAIRobot(AIRobotSearchRandomGroundBlock.class,""String_Node_Str"",""String_Node_Str"");
  RobotManager.registerAIRobot(AIRobotSearchStackRequest.class,""String_Node_Str"",""String_Node_Str"");
  RobotManager.registerAIRobot(AIRobotSearchStation.class,""String_Node_Str"",""String_Node_Str"");
  RobotManager.registerAIRobot(AIRobotShutdown.class,""String_Node_Str"");
  RobotManager.registerAIRobot(AIRobotSleep.class,""String_Node_Str"",""String_Node_Str"");
  RobotManager.registerAIRobot(AIRobotStraightMoveTo.class,""String_Node_Str"",""String_Node_Str"");
  RobotManager.registerAIRobot(AIRobotUnload.class,""String_Node_Str"",""String_Node_Str"");
  RobotManager.registerAIRobot(AIRobotUnloadFluids.class,""String_Node_Str"",""String_Node_Str"");
  RobotManager.registerAIRobot(AIRobotUseToolOnBlock.class,""String_Node_Str"",""String_Node_Str"");
  RobotManager.registerDockingStation(DockingStationPipe.class,""String_Node_Str"");
  RoboticsProxy.proxy.registerRenderers();
  ListRegistry.itemClassAsType.add(ItemRobot.class);
}",0.9927966437109158
156527,"@Mod.EventHandler public void init(FMLInitializationEvent evt){
  transportChannelHandler=new ChannelHandler();
  MinecraftForge.EVENT_BUS.register(this);
  transportChannelHandler.registerPacketType(PacketFluidUpdate.class);
  transportChannelHandler.registerPacketType(PacketPipeTransportItemStack.class);
  transportChannelHandler.registerPacketType(PacketPipeTransportItemStackRequest.class);
  transportChannelHandler.registerPacketType(PacketPipeTransportTraveler.class);
  transportChannelHandler.registerPacketType(PacketPowerUpdate.class);
  channels=NetworkRegistry.INSTANCE.newChannel(DefaultProps.NET_CHANNEL_NAME + ""String_Node_Str"",transportChannelHandler,new PacketHandlerTransport());
  TransportProxy.proxy.registerTileEntities();
  BuilderAPI.schematicRegistry.registerSchematicBlock(genericPipeBlock,SchematicPipe.class);
  new BptPipeRotatable(pipeItemsWood);
  new BptPipeRotatable(pipeFluidsWood);
  new BptPipeRotatable(pipeItemsIron);
  new BptPipeRotatable(pipeFluidsIron);
  new BptPipeRotatable(pipeItemsEmerald);
  new BptPipeRotatable(pipeFluidsEmerald);
  new BptPipeRotatable(pipeItemsDaizuli);
  new BptPipeRotatable(pipeItemsEmzuli);
  for (  Item itemPipe : BlockGenericPipe.pipes.keySet()) {
    Class<? extends Pipe<?>> klazz=BlockGenericPipe.pipes.get(itemPipe);
    if (IDiamondPipe.class.isAssignableFrom(klazz)) {
      new BptPipeFiltered(itemPipe);
    }
  }
  PipeEventBus.registerGlobalHandler(new LensFilterHandler());
  BCCreativeTab.get(""String_Node_Str"").setIcon(new ItemStack(BuildCraftTransport.pipeItemsDiamond,1));
  if (showAllFacadesCreative) {
    BCCreativeTab.get(""String_Node_Str"").setIcon(facadeItem.getFacadeForBlock(Blocks.brick_block,0));
  }
  if (Loader.isModLoaded(""String_Node_Str"")) {
    BCCreativeTab.get(""String_Node_Str"").setIcon(ItemGate.makeGateItem(GateMaterial.DIAMOND,GateLogic.AND));
  }
  StatementManager.registerParameterClass(TriggerParameterSignal.class);
  StatementManager.registerParameterClass(ActionParameterSignal.class);
  StatementManager.registerTriggerProvider(new PipeTriggerProvider());
  StatementManager.registerActionProvider(new PipeActionProvider());
  PipeManager.registerStripesHandler(new StripesHandlerRightClick(),-32768);
  PipeManager.registerStripesHandler(new StripesHandlerDispenser(),-49152);
  PipeManager.registerStripesHandler(new StripesHandlerPlant(),0);
  PipeManager.registerStripesHandler(new StripesHandlerBucket(),0);
  PipeManager.registerStripesHandler(new StripesHandlerArrow(),0);
  PipeManager.registerStripesHandler(new StripesHandlerShears(),0);
  PipeManager.registerStripesHandler(new StripesHandlerPipes(),0);
  PipeManager.registerStripesHandler(new StripesHandlerPipeWires(),0);
  PipeManager.registerStripesHandler(new StripesHandlerEntityInteract(),0);
  PipeManager.registerStripesHandler(new StripesHandlerPlaceBlock(),-65536);
  PipeManager.registerStripesHandler(new StripesHandlerUse(),-131072);
  PipeManager.registerStripesHandler(new StripesHandlerHoe(),0);
  StripesHandlerDispenser.items.add(ItemMinecart.class);
  StripesHandlerRightClick.items.add(Items.egg);
  StripesHandlerRightClick.items.add(Items.snowball);
  StripesHandlerRightClick.items.add(Items.experience_bottle);
  StripesHandlerUse.items.add(Items.fireworks);
  PipeManager.registerStripesHandler(new StripesHandlerMinecartDestroy(),0);
  PipeManager.registerPipePluggable(FacadePluggable.class,""String_Node_Str"");
  PipeManager.registerPipePluggable(GatePluggable.class,""String_Node_Str"");
  PipeManager.registerPipePluggable(LensPluggable.class,""String_Node_Str"");
  PipeManager.registerPipePluggable(PlugPluggable.class,""String_Node_Str"");
  PipeManager.registerPipePluggable(PowerAdapterPluggable.class,""String_Node_Str"");
  GateExpansions.registerExpansion(GateExpansionPulsar.INSTANCE);
  GateExpansions.registerExpansion(GateExpansionTimer.INSTANCE);
  GateExpansions.registerExpansion(GateExpansionRedstoneFader.INSTANCE);
  GateExpansions.registerExpansion(GateExpansionLightSensor.INSTANCE,new ItemStack(Blocks.daylight_detector));
  if (BuildCraftCore.loadDefaultRecipes) {
    loadRecipes();
  }
  TransportProxy.proxy.registerRenderers();
  NetworkRegistry.INSTANCE.registerGuiHandler(instance,new TransportGuiHandler());
}","@Mod.EventHandler public void init(FMLInitializationEvent evt){
  transportChannelHandler=new ChannelHandler();
  MinecraftForge.EVENT_BUS.register(this);
  transportChannelHandler.registerPacketType(PacketFluidUpdate.class);
  transportChannelHandler.registerPacketType(PacketPipeTransportItemStack.class);
  transportChannelHandler.registerPacketType(PacketPipeTransportItemStackRequest.class);
  transportChannelHandler.registerPacketType(PacketPipeTransportTraveler.class);
  transportChannelHandler.registerPacketType(PacketPowerUpdate.class);
  channels=NetworkRegistry.INSTANCE.newChannel(DefaultProps.NET_CHANNEL_NAME + ""String_Node_Str"",transportChannelHandler,new PacketHandlerTransport());
  TransportProxy.proxy.registerTileEntities();
  BuilderAPI.schematicRegistry.registerSchematicBlock(genericPipeBlock,SchematicPipe.class);
  BuilderAPI.schematicRegistry.registerSchematicBlock(filteredBufferBlock,SchematicTile.class);
  new BptPipeRotatable(pipeItemsWood);
  new BptPipeRotatable(pipeFluidsWood);
  new BptPipeRotatable(pipeItemsIron);
  new BptPipeRotatable(pipeFluidsIron);
  new BptPipeRotatable(pipeItemsEmerald);
  new BptPipeRotatable(pipeFluidsEmerald);
  new BptPipeRotatable(pipeItemsDaizuli);
  new BptPipeRotatable(pipeItemsEmzuli);
  for (  Item itemPipe : BlockGenericPipe.pipes.keySet()) {
    Class<? extends Pipe<?>> klazz=BlockGenericPipe.pipes.get(itemPipe);
    if (IDiamondPipe.class.isAssignableFrom(klazz)) {
      new BptPipeFiltered(itemPipe);
    }
  }
  PipeEventBus.registerGlobalHandler(new LensFilterHandler());
  BCCreativeTab.get(""String_Node_Str"").setIcon(new ItemStack(BuildCraftTransport.pipeItemsDiamond,1));
  if (showAllFacadesCreative) {
    BCCreativeTab.get(""String_Node_Str"").setIcon(facadeItem.getFacadeForBlock(Blocks.brick_block,0));
  }
  if (Loader.isModLoaded(""String_Node_Str"")) {
    BCCreativeTab.get(""String_Node_Str"").setIcon(ItemGate.makeGateItem(GateMaterial.DIAMOND,GateLogic.AND));
  }
  StatementManager.registerParameterClass(TriggerParameterSignal.class);
  StatementManager.registerParameterClass(ActionParameterSignal.class);
  StatementManager.registerTriggerProvider(new PipeTriggerProvider());
  StatementManager.registerActionProvider(new PipeActionProvider());
  PipeManager.registerStripesHandler(new StripesHandlerRightClick(),-32768);
  PipeManager.registerStripesHandler(new StripesHandlerDispenser(),-49152);
  PipeManager.registerStripesHandler(new StripesHandlerPlant(),0);
  PipeManager.registerStripesHandler(new StripesHandlerBucket(),0);
  PipeManager.registerStripesHandler(new StripesHandlerArrow(),0);
  PipeManager.registerStripesHandler(new StripesHandlerShears(),0);
  PipeManager.registerStripesHandler(new StripesHandlerPipes(),0);
  PipeManager.registerStripesHandler(new StripesHandlerPipeWires(),0);
  PipeManager.registerStripesHandler(new StripesHandlerEntityInteract(),0);
  PipeManager.registerStripesHandler(new StripesHandlerPlaceBlock(),-65536);
  PipeManager.registerStripesHandler(new StripesHandlerUse(),-131072);
  PipeManager.registerStripesHandler(new StripesHandlerHoe(),0);
  StripesHandlerDispenser.items.add(ItemMinecart.class);
  StripesHandlerRightClick.items.add(Items.egg);
  StripesHandlerRightClick.items.add(Items.snowball);
  StripesHandlerRightClick.items.add(Items.experience_bottle);
  StripesHandlerUse.items.add(Items.fireworks);
  PipeManager.registerStripesHandler(new StripesHandlerMinecartDestroy(),0);
  PipeManager.registerPipePluggable(FacadePluggable.class,""String_Node_Str"");
  PipeManager.registerPipePluggable(GatePluggable.class,""String_Node_Str"");
  PipeManager.registerPipePluggable(LensPluggable.class,""String_Node_Str"");
  PipeManager.registerPipePluggable(PlugPluggable.class,""String_Node_Str"");
  PipeManager.registerPipePluggable(PowerAdapterPluggable.class,""String_Node_Str"");
  GateExpansions.registerExpansion(GateExpansionPulsar.INSTANCE);
  GateExpansions.registerExpansion(GateExpansionTimer.INSTANCE);
  GateExpansions.registerExpansion(GateExpansionRedstoneFader.INSTANCE);
  GateExpansions.registerExpansion(GateExpansionLightSensor.INSTANCE,new ItemStack(Blocks.daylight_detector));
  if (BuildCraftCore.loadDefaultRecipes) {
    loadRecipes();
  }
  TransportProxy.proxy.registerRenderers();
  NetworkRegistry.INSTANCE.registerGuiHandler(instance,new TransportGuiHandler());
}",0.9888242142025612
156528,"@Override public void useRequirements(IInventory inv,BuildingSlot slot){
  if (slot instanceof BuildingSlotBlock && ((BuildingSlotBlock)slot).mode == Mode.ClearIfInvalid) {
    return;
  }
  LinkedList<ItemStack> tmpReq=new LinkedList<ItemStack>();
  try {
    for (    ItemStack stk : slot.getRequirements(context)) {
      if (stk != null) {
        tmpReq.add(stk.copy());
      }
    }
  }
 catch (  Throwable t) {
    t.printStackTrace();
    BCLog.logger.throwing(t);
  }
  if (context.world().getWorldInfo().getGameType() == GameType.CREATIVE) {
    for (    ItemStack s : tmpReq) {
      slot.addStackConsumed(s);
    }
    return;
  }
  ListIterator<ItemStack> itr=tmpReq.listIterator();
  while (itr.hasNext()) {
    ItemStack reqStk=itr.next();
    boolean smallStack=reqStk.stackSize == 1;
    ItemStack usedStack=reqStk;
    boolean itemBlock=reqStk.getItem() instanceof ItemBlock;
    Fluid fluid=itemBlock ? FluidRegistry.lookupFluidForBlock(((ItemBlock)reqStk.getItem()).field_150939_a) : null;
    if (fluid != null && inv instanceof TileAbstractBuilder && ((TileAbstractBuilder)inv).drainBuild(new FluidStack(fluid,FluidContainerRegistry.BUCKET_VOLUME),true)) {
      continue;
    }
    for (    IInvSlot slotInv : InventoryIterator.getIterable(inv,ForgeDirection.UNKNOWN)) {
      if (inv instanceof TileAbstractBuilder && !((TileAbstractBuilder)inv).isBuildingMaterialSlot(slotInv.getIndex())) {
        continue;
      }
      ItemStack invStk=slotInv.getStackInSlot();
      if (invStk == null || invStk.stackSize == 0) {
        continue;
      }
      FluidStack fluidStack=fluid != null ? FluidContainerRegistry.getFluidForFilledItem(invStk) : null;
      boolean fluidFound=fluidStack != null && fluidStack.getFluid() == fluid && fluidStack.amount >= FluidContainerRegistry.BUCKET_VOLUME;
      if (fluidFound || StackHelper.isEqualItem(reqStk,invStk)) {
        try {
          usedStack=slot.getSchematic().useItem(context,reqStk,slotInv);
          slot.addStackConsumed(usedStack);
        }
 catch (        Throwable t) {
          t.printStackTrace();
          BCLog.logger.throwing(t);
        }
        if (reqStk.stackSize == 0) {
          break;
        }
      }
    }
    if (reqStk.stackSize != 0) {
      return;
    }
    if (smallStack) {
      itr.set(usedStack);
    }
  }
}","@Override public void useRequirements(IInventory inv,BuildingSlot slot){
  if (slot instanceof BuildingSlotBlock && ((BuildingSlotBlock)slot).mode == Mode.ClearIfInvalid) {
    return;
  }
  LinkedList<ItemStack> tmpReq=new LinkedList<ItemStack>();
  try {
    for (    ItemStack stk : slot.getRequirements(context)) {
      if (stk != null) {
        tmpReq.add(stk.copy());
      }
    }
  }
 catch (  Throwable t) {
    t.printStackTrace();
    BCLog.logger.throwing(t);
  }
  if (context.world().getWorldInfo().getGameType() == GameType.CREATIVE) {
    for (    ItemStack s : tmpReq) {
      slot.addStackConsumed(s);
    }
    return;
  }
  ListIterator<ItemStack> itr=tmpReq.listIterator();
  while (itr.hasNext()) {
    ItemStack reqStk=itr.next();
    boolean smallStack=reqStk.stackSize == 1;
    ItemStack usedStack=reqStk;
    boolean itemBlock=reqStk.getItem() instanceof ItemBlock;
    Fluid fluid=itemBlock ? FluidRegistry.lookupFluidForBlock(((ItemBlock)reqStk.getItem()).field_150939_a) : null;
    if (fluid != null && inv instanceof TileAbstractBuilder && ((TileAbstractBuilder)inv).drainBuild(new FluidStack(fluid,FluidContainerRegistry.BUCKET_VOLUME),true)) {
      continue;
    }
    for (    IInvSlot slotInv : InventoryIterator.getIterable(inv,ForgeDirection.UNKNOWN)) {
      if (inv instanceof TileAbstractBuilder && !((TileAbstractBuilder)inv).isBuildingMaterialSlot(slotInv.getIndex())) {
        continue;
      }
      ItemStack invStk=slotInv.getStackInSlot();
      if (invStk == null || invStk.stackSize == 0) {
        continue;
      }
      FluidStack fluidStack=fluid != null ? FluidContainerRegistry.getFluidForFilledItem(invStk) : null;
      boolean fluidFound=fluidStack != null && fluidStack.getFluid() == fluid && fluidStack.amount >= FluidContainerRegistry.BUCKET_VOLUME;
      if (fluidFound || slot.getSchematic().isItemMatchingRequirement(invStk,reqStk)) {
        try {
          usedStack=slot.getSchematic().useItem(context,reqStk,slotInv);
          slot.addStackConsumed(usedStack);
        }
 catch (        Throwable t) {
          t.printStackTrace();
          BCLog.logger.throwing(t);
        }
        if (reqStk.stackSize == 0) {
          break;
        }
      }
    }
    if (reqStk.stackSize != 0) {
      return;
    }
    if (smallStack) {
      itr.set(usedStack);
    }
  }
}",0.9828473413379074
156529,"public boolean checkRequirements(TileAbstractBuilder builder,Schematic slot){
  LinkedList<ItemStack> tmpReq=new LinkedList<ItemStack>();
  try {
    LinkedList<ItemStack> req=new LinkedList<ItemStack>();
    slot.getRequirementsForPlacement(context,req);
    for (    ItemStack stk : req) {
      if (stk != null) {
        tmpReq.add(stk.copy());
      }
    }
  }
 catch (  Throwable t) {
    t.printStackTrace();
    BCLog.logger.throwing(t);
  }
  LinkedList<ItemStack> stacksUsed=new LinkedList<ItemStack>();
  if (context.world().getWorldInfo().getGameType() == GameType.CREATIVE) {
    for (    ItemStack s : tmpReq) {
      stacksUsed.add(s);
    }
    return !(builder.energyAvailable() < slot.getEnergyRequirement(stacksUsed));
  }
  for (  ItemStack reqStk : tmpReq) {
    boolean itemBlock=reqStk.getItem() instanceof ItemBlock;
    Fluid fluid=itemBlock ? FluidRegistry.lookupFluidForBlock(((ItemBlock)reqStk.getItem()).field_150939_a) : null;
    if (fluid != null && builder.drainBuild(new FluidStack(fluid,FluidContainerRegistry.BUCKET_VOLUME),true)) {
      continue;
    }
    for (    IInvSlot slotInv : InventoryIterator.getIterable(new InventoryCopy(builder),ForgeDirection.UNKNOWN)) {
      if (!builder.isBuildingMaterialSlot(slotInv.getIndex())) {
        continue;
      }
      ItemStack invStk=slotInv.getStackInSlot();
      if (invStk == null || invStk.stackSize == 0) {
        continue;
      }
      FluidStack fluidStack=fluid != null ? FluidContainerRegistry.getFluidForFilledItem(invStk) : null;
      boolean compatibleContainer=fluidStack != null && fluidStack.getFluid() == fluid && fluidStack.amount >= FluidContainerRegistry.BUCKET_VOLUME;
      if (StackHelper.isEqualItem(reqStk,invStk) || compatibleContainer) {
        try {
          stacksUsed.add(slot.useItem(context,reqStk,slotInv));
        }
 catch (        Throwable t) {
          t.printStackTrace();
          BCLog.logger.throwing(t);
        }
        if (reqStk.stackSize == 0) {
          break;
        }
      }
    }
    if (reqStk.stackSize != 0) {
      return false;
    }
  }
  return builder.energyAvailable() >= slot.getEnergyRequirement(stacksUsed);
}","public boolean checkRequirements(TileAbstractBuilder builder,Schematic slot){
  LinkedList<ItemStack> tmpReq=new LinkedList<ItemStack>();
  try {
    LinkedList<ItemStack> req=new LinkedList<ItemStack>();
    slot.getRequirementsForPlacement(context,req);
    for (    ItemStack stk : req) {
      if (stk != null) {
        tmpReq.add(stk.copy());
      }
    }
  }
 catch (  Throwable t) {
    t.printStackTrace();
    BCLog.logger.throwing(t);
  }
  LinkedList<ItemStack> stacksUsed=new LinkedList<ItemStack>();
  if (context.world().getWorldInfo().getGameType() == GameType.CREATIVE) {
    for (    ItemStack s : tmpReq) {
      stacksUsed.add(s);
    }
    return !(builder.energyAvailable() < slot.getEnergyRequirement(stacksUsed));
  }
  for (  ItemStack reqStk : tmpReq) {
    boolean itemBlock=reqStk.getItem() instanceof ItemBlock;
    Fluid fluid=itemBlock ? FluidRegistry.lookupFluidForBlock(((ItemBlock)reqStk.getItem()).field_150939_a) : null;
    if (fluid != null && builder.drainBuild(new FluidStack(fluid,FluidContainerRegistry.BUCKET_VOLUME),true)) {
      continue;
    }
    for (    IInvSlot slotInv : InventoryIterator.getIterable(new InventoryCopy(builder),ForgeDirection.UNKNOWN)) {
      if (!builder.isBuildingMaterialSlot(slotInv.getIndex())) {
        continue;
      }
      ItemStack invStk=slotInv.getStackInSlot();
      if (invStk == null || invStk.stackSize == 0) {
        continue;
      }
      FluidStack fluidStack=fluid != null ? FluidContainerRegistry.getFluidForFilledItem(invStk) : null;
      boolean compatibleContainer=fluidStack != null && fluidStack.getFluid() == fluid && fluidStack.amount >= FluidContainerRegistry.BUCKET_VOLUME;
      if (slot.isItemMatchingRequirement(invStk,reqStk) || compatibleContainer) {
        try {
          stacksUsed.add(slot.useItem(context,reqStk,slotInv));
        }
 catch (        Throwable t) {
          t.printStackTrace();
          BCLog.logger.throwing(t);
        }
        if (reqStk.stackSize == 0) {
          break;
        }
      }
    }
    if (reqStk.stackSize != 0) {
      return false;
    }
  }
  return builder.energyAvailable() >= slot.getEnergyRequirement(stacksUsed);
}",0.9850540354104392
156530,"@Override public boolean writeToWorld(IBuilderContext context){
  if (internalRequirementRemovalListener != null) {
    internalRequirementRemovalListener.remove(this);
  }
  if (mode == Mode.ClearIfInvalid) {
    if (!getSchematic().isAlreadyBuilt(context,x,y,z)) {
      if (BuildCraftBuilders.dropBrokenBlocks) {
        return BlockUtils.breakBlock((WorldServer)context.world(),x,y,z);
      }
 else {
        context.world().setBlockToAir(x,y,z);
        return true;
      }
    }
  }
 else {
    try {
      getSchematic().placeInWorld(context,x,y,z,stackConsumed);
      if (!getSchematic().isAlreadyBuilt(context,x,y,z)) {
        return false;
      }
      if (!context.world().isAirBlock(x,y,z) && getSchematic().getBuildingPermission() == BuildingPermission.ALL && getSchematic() instanceof SchematicBlock) {
        SchematicBlock sb=(SchematicBlock)getSchematic();
        ItemStack[] oldRequirementsArray=sb.storedRequirements;
        List<ItemStack> oldRequirements=Arrays.asList(oldRequirementsArray);
        sb.storedRequirements=new ItemStack[0];
        sb.storeRequirements(context,x,y,z);
        for (        ItemStack s : sb.storedRequirements) {
          boolean contains=false;
          for (          ItemStack ss : oldRequirements) {
            if (StackHelper.isEqualItem(s,ss)) {
              contains=true;
              break;
            }
          }
          if (!contains) {
            BCLog.logger.warn(""String_Node_Str"");
            BCLog.logger.warn(""String_Node_Str"" + x + ""String_Node_Str""+ y+ ""String_Node_Str""+ z+ ""String_Node_Str""+ s.toString());
            context.world().removeTileEntity(x,y,z);
            context.world().setBlockToAir(x,y,z);
            return false;
          }
        }
        sb.storedRequirements=oldRequirementsArray;
      }
      TileEntity e=context.world().getTileEntity(x,y,z);
      if (e != null) {
        e.updateEntity();
      }
      return true;
    }
 catch (    Throwable t) {
      t.printStackTrace();
      context.world().setBlockToAir(x,y,z);
      return false;
    }
  }
  return false;
}","@Override public boolean writeToWorld(IBuilderContext context){
  if (internalRequirementRemovalListener != null) {
    internalRequirementRemovalListener.remove(this);
  }
  if (mode == Mode.ClearIfInvalid) {
    if (!getSchematic().isAlreadyBuilt(context,x,y,z)) {
      if (BuildCraftBuilders.dropBrokenBlocks) {
        return BlockUtils.breakBlock((WorldServer)context.world(),x,y,z);
      }
 else {
        context.world().setBlockToAir(x,y,z);
        return true;
      }
    }
  }
 else {
    try {
      getSchematic().placeInWorld(context,x,y,z,stackConsumed);
      if (!getSchematic().isAlreadyBuilt(context,x,y,z)) {
        return false;
      }
      if (!context.world().isAirBlock(x,y,z) && getSchematic().getBuildingPermission() == BuildingPermission.ALL && getSchematic() instanceof SchematicBlock) {
        SchematicBlock sb=(SchematicBlock)getSchematic();
        ItemStack[] oldRequirementsArray=sb.storedRequirements;
        List<ItemStack> oldRequirements=Arrays.asList(oldRequirementsArray);
        sb.storedRequirements=new ItemStack[0];
        sb.storeRequirements(context,x,y,z);
        for (        ItemStack s : sb.storedRequirements) {
          boolean contains=false;
          for (          ItemStack ss : oldRequirements) {
            if (getSchematic().isItemMatchingRequirement(s,ss)) {
              contains=true;
              break;
            }
          }
          if (!contains) {
            BCLog.logger.warn(""String_Node_Str"");
            BCLog.logger.warn(""String_Node_Str"" + x + ""String_Node_Str""+ y+ ""String_Node_Str""+ z+ ""String_Node_Str""+ s.toString());
            context.world().removeTileEntity(x,y,z);
            context.world().setBlockToAir(x,y,z);
            return false;
          }
        }
        sb.storedRequirements=oldRequirementsArray;
      }
      TileEntity e=context.world().getTileEntity(x,y,z);
      if (e != null) {
        e.updateEntity();
      }
      return true;
    }
 catch (    Throwable t) {
      t.printStackTrace();
      context.world().setBlockToAir(x,y,z);
      return false;
    }
  }
  return false;
}",0.9859824186267522
156531,"public void update(Chunk chunk){
  for (int bz=0; bz < 16; bz++) {
    for (int bx=0; bx < 16; bx++) {
      int y=chunk.getHeightValue(bx,bz);
      int color;
      if (y < 0) {
        y=255;
      }
      while ((color=chunk.getBlock(bx,y,bz).getMapColor(0).colorIndex) == MapColor.airColor.colorIndex) {
        y--;
        if (y < 0) {
          break;
        }
      }
      data[(bz << 4) | bx]=(byte)color;
    }
  }
}","public void update(Chunk chunk){
  for (int bz=0; bz < 16; bz++) {
    for (int bx=0; bx < 16; bx++) {
      int y=chunk.getHeightValue(bx,bz);
      int color=MapColor.airColor.colorIndex;
      if (y < 0) {
        y=255;
      }
      Block b;
      while (y >= 0) {
        b=chunk.getBlock(bx,y,bz);
        color=b.getMapColor(0) != null ? b.getMapColor(0).colorIndex : MapColor.airColor.colorIndex;
        if (color != MapColor.airColor.colorIndex) {
          break;
        }
        y--;
      }
      data[(bz << 4) | bx]=(byte)color;
    }
  }
}",0.75177304964539
156532,"@Mod.EventHandler public void init(FMLInitializationEvent evt){
  NetworkRegistry.INSTANCE.registerGuiHandler(instance,new BuildersGuiHandler());
  ISchematicRegistry schemes=BuilderAPI.schematicRegistry;
  schemes.registerSchematicBlock(Blocks.air,SchematicAir.class);
  schemes.registerSchematicBlock(Blocks.snow,SchematicIgnore.class);
  schemes.registerSchematicBlock(Blocks.tallgrass,SchematicIgnore.class);
  schemes.registerSchematicBlock(Blocks.double_plant,SchematicIgnore.class);
  schemes.registerSchematicBlock(Blocks.ice,SchematicIgnore.class);
  schemes.registerSchematicBlock(Blocks.piston_head,SchematicIgnore.class);
  schemes.registerSchematicBlock(Blocks.dirt,SchematicDirt.class);
  schemes.registerSchematicBlock(Blocks.grass,SchematicDirt.class);
  schemes.registerSchematicBlock(Blocks.cactus,SchematicCactus.class);
  schemes.registerSchematicBlock(Blocks.farmland,SchematicFarmland.class);
  schemes.registerSchematicBlock(Blocks.wheat,SchematicSeeds.class,Items.wheat_seeds);
  schemes.registerSchematicBlock(Blocks.pumpkin_stem,SchematicSeeds.class,Items.pumpkin_seeds);
  schemes.registerSchematicBlock(Blocks.melon_stem,SchematicSeeds.class,Items.melon_seeds);
  schemes.registerSchematicBlock(Blocks.nether_wart,SchematicSeeds.class,Items.nether_wart);
  schemes.registerSchematicBlock(Blocks.torch,SchematicWallSide.class);
  schemes.registerSchematicBlock(Blocks.redstone_torch,SchematicWallSide.class);
  schemes.registerSchematicBlock(Blocks.unlit_redstone_torch,SchematicWallSide.class);
  schemes.registerSchematicBlock(Blocks.tripwire,SchematicBlockFloored.class);
  schemes.registerSchematicBlock(Blocks.tripwire_hook,SchematicTripWireHook.class);
  schemes.registerSchematicBlock(Blocks.skull,SchematicSkull.class);
  schemes.registerSchematicBlock(Blocks.ladder,SchematicRotateMetaSupported.class,new int[]{2,5,3,4},true);
  schemes.registerSchematicBlock(Blocks.fence_gate,SchematicRotateMeta.class,new int[]{0,1,2,3},true);
  schemes.registerSchematicBlock(Blocks.log,SchematicRotateMeta.class,new int[]{8,4,8,4},true);
  schemes.registerSchematicBlock(Blocks.log2,SchematicRotateMeta.class,new int[]{8,4,8,4},true);
  schemes.registerSchematicBlock(Blocks.hay_block,SchematicRotateMeta.class,new int[]{8,4,8,4},true);
  schemes.registerSchematicBlock(Blocks.quartz_block,SchematicRotateMeta.class,new int[]{4,3,4,3},true);
  schemes.registerSchematicBlock(Blocks.hopper,SchematicRotateMeta.class,new int[]{2,5,3,4},true);
  schemes.registerSchematicBlock(Blocks.anvil,SchematicRotateMeta.class,new int[]{0,1,2,3},true);
  schemes.registerSchematicBlock(Blocks.furnace,SchematicRotateMeta.class,new int[]{2,5,3,4},true);
  schemes.registerSchematicBlock(Blocks.lit_furnace,SchematicRotateMeta.class,new int[]{2,5,3,4},true);
  schemes.registerSchematicBlock(Blocks.chest,SchematicRotateMeta.class,new int[]{2,5,3,4},true);
  schemes.registerSchematicBlock(Blocks.trapped_chest,SchematicRotateMeta.class,new int[]{2,5,3,4},true);
  schemes.registerSchematicBlock(Blocks.dispenser,SchematicRotateMeta.class,new int[]{2,5,3,4},true);
  schemes.registerSchematicBlock(Blocks.dropper,SchematicRotateMeta.class,new int[]{2,5,3,4},true);
  schemes.registerSchematicBlock(Blocks.ender_chest,SchematicEnderChest.class);
  schemes.registerSchematicBlock(Blocks.vine,SchematicRotateMeta.class,new int[]{1,4,8,2},false);
  schemes.registerSchematicBlock(Blocks.trapdoor,SchematicRotateMeta.class,new int[]{0,1,2,3},false);
  schemes.registerSchematicBlock(Blocks.wooden_button,SchematicLever.class);
  schemes.registerSchematicBlock(Blocks.stone_button,SchematicLever.class);
  schemes.registerSchematicBlock(Blocks.lever,SchematicLever.class);
  schemes.registerSchematicBlock(Blocks.stone,SchematicStone.class);
  schemes.registerSchematicBlock(Blocks.gold_ore,SchematicStone.class);
  schemes.registerSchematicBlock(Blocks.iron_ore,SchematicStone.class);
  schemes.registerSchematicBlock(Blocks.coal_ore,SchematicStone.class);
  schemes.registerSchematicBlock(Blocks.lapis_ore,SchematicStone.class);
  schemes.registerSchematicBlock(Blocks.diamond_ore,SchematicStone.class);
  schemes.registerSchematicBlock(Blocks.redstone_ore,SchematicStone.class);
  schemes.registerSchematicBlock(Blocks.lit_redstone_ore,SchematicStone.class);
  schemes.registerSchematicBlock(Blocks.emerald_ore,SchematicStone.class);
  schemes.registerSchematicBlock(Blocks.gravel,SchematicGravel.class);
  schemes.registerSchematicBlock(Blocks.redstone_wire,SchematicRedstoneWire.class,new ItemStack(Items.redstone));
  schemes.registerSchematicBlock(Blocks.cake,SchematicCustomStack.class,new ItemStack(Items.cake));
  schemes.registerSchematicBlock(Blocks.glowstone,SchematicCustomStack.class,new ItemStack(Blocks.glowstone));
  schemes.registerSchematicBlock(Blocks.powered_repeater,SchematicRedstoneDiode.class,Items.repeater);
  schemes.registerSchematicBlock(Blocks.unpowered_repeater,SchematicRedstoneDiode.class,Items.repeater);
  schemes.registerSchematicBlock(Blocks.powered_comparator,SchematicRedstoneDiode.class,Items.comparator);
  schemes.registerSchematicBlock(Blocks.unpowered_comparator,SchematicRedstoneDiode.class,Items.comparator);
  schemes.registerSchematicBlock(Blocks.redstone_lamp,SchematicRedstoneLamp.class);
  schemes.registerSchematicBlock(Blocks.lit_redstone_lamp,SchematicRedstoneLamp.class);
  schemes.registerSchematicBlock(Blocks.glass_pane,SchematicGlassPane.class);
  schemes.registerSchematicBlock(Blocks.stained_glass_pane,SchematicGlassPane.class);
  schemes.registerSchematicBlock(Blocks.piston,SchematicPiston.class);
  schemes.registerSchematicBlock(Blocks.piston_extension,SchematicPiston.class);
  schemes.registerSchematicBlock(Blocks.sticky_piston,SchematicPiston.class);
  schemes.registerSchematicBlock(Blocks.lit_pumpkin,SchematicPumpkin.class);
  schemes.registerSchematicBlock(Blocks.oak_stairs,SchematicStairs.class);
  schemes.registerSchematicBlock(Blocks.stone_stairs,SchematicStairs.class);
  schemes.registerSchematicBlock(Blocks.brick_stairs,SchematicStairs.class);
  schemes.registerSchematicBlock(Blocks.stone_brick_stairs,SchematicStairs.class);
  schemes.registerSchematicBlock(Blocks.nether_brick_stairs,SchematicStairs.class);
  schemes.registerSchematicBlock(Blocks.sandstone_stairs,SchematicStairs.class);
  schemes.registerSchematicBlock(Blocks.spruce_stairs,SchematicStairs.class);
  schemes.registerSchematicBlock(Blocks.birch_stairs,SchematicStairs.class);
  schemes.registerSchematicBlock(Blocks.jungle_stairs,SchematicStairs.class);
  schemes.registerSchematicBlock(Blocks.quartz_stairs,SchematicStairs.class);
  schemes.registerSchematicBlock(Blocks.acacia_stairs,SchematicStairs.class);
  schemes.registerSchematicBlock(Blocks.dark_oak_stairs,SchematicStairs.class);
  schemes.registerSchematicBlock(Blocks.wooden_door,SchematicDoor.class,new ItemStack(Items.wooden_door));
  schemes.registerSchematicBlock(Blocks.iron_door,SchematicDoor.class,new ItemStack(Items.iron_door));
  schemes.registerSchematicBlock(Blocks.bed,SchematicBed.class);
  schemes.registerSchematicBlock(Blocks.wall_sign,SchematicSign.class,true);
  schemes.registerSchematicBlock(Blocks.standing_sign,SchematicSign.class,false);
  schemes.registerSchematicBlock(Blocks.portal,SchematicPortal.class);
  schemes.registerSchematicBlock(Blocks.rail,SchematicRail.class);
  schemes.registerSchematicBlock(Blocks.activator_rail,SchematicRail.class);
  schemes.registerSchematicBlock(Blocks.detector_rail,SchematicRail.class);
  schemes.registerSchematicBlock(Blocks.golden_rail,SchematicRail.class);
  schemes.registerSchematicBlock(Blocks.fire,SchematicFire.class);
  schemes.registerSchematicBlock(Blocks.bedrock,SchematicBlockCreative.class);
  schemes.registerSchematicBlock(Blocks.mob_spawner,SchematicTileCreative.class);
  schemes.registerSchematicBlock(Blocks.glass,SchematicStandalone.class);
  schemes.registerSchematicBlock(Blocks.stone_slab,SchematicStandalone.class);
  schemes.registerSchematicBlock(Blocks.double_stone_slab,SchematicStandalone.class);
  schemes.registerSchematicBlock(Blocks.wooden_slab,SchematicStandalone.class);
  schemes.registerSchematicBlock(Blocks.double_wooden_slab,SchematicStandalone.class);
  schemes.registerSchematicBlock(Blocks.stained_glass,SchematicStandalone.class);
  schemes.registerSchematicBlock(Blocks.fence,SchematicStandalone.class);
  schemes.registerSchematicBlock(Blocks.daylight_detector,SchematicStandalone.class);
  schemes.registerSchematicBlock(Blocks.iron_bars,SchematicStandalone.class);
  schemes.registerSchematicEntity(EntityMinecartEmpty.class,SchematicMinecart.class,Items.minecart);
  schemes.registerSchematicEntity(EntityMinecartFurnace.class,SchematicMinecart.class,Items.furnace_minecart);
  schemes.registerSchematicEntity(EntityMinecartTNT.class,SchematicMinecart.class,Items.tnt_minecart);
  schemes.registerSchematicEntity(EntityMinecartChest.class,SchematicMinecart.class,Items.chest_minecart);
  schemes.registerSchematicEntity(EntityMinecartHopper.class,SchematicMinecart.class,Items.hopper_minecart);
  schemes.registerSchematicEntity(EntityPainting.class,SchematicHanging.class,Items.painting);
  schemes.registerSchematicEntity(EntityItemFrame.class,SchematicHanging.class,Items.item_frame);
  schemes.registerSchematicBlock(architectBlock,SchematicRotateMeta.class,new int[]{2,5,3,4},true);
  schemes.registerSchematicBlock(builderBlock,SchematicRotateMeta.class,new int[]{2,5,3,4},true);
  if (constructionMarkerBlock != null) {
    schemes.registerSchematicBlock(constructionMarkerBlock,SchematicIgnore.class);
  }
  schemes.registerSchematicBlock(frameBlock,SchematicFree.class);
  SchematicFactory.registerSchematicFactory(SchematicBlock.class,new SchematicFactoryBlock());
  SchematicFactory.registerSchematicFactory(SchematicMask.class,new SchematicFactoryMask());
  SchematicFactory.registerSchematicFactory(SchematicEntity.class,new SchematicFactoryEntity());
  LibraryAPI.registerHandler(new LibraryBlueprintTypeHandler(false));
  LibraryAPI.registerHandler(new LibraryBlueprintTypeHandler(true));
  LibraryAPI.registerHandler(new LibraryBookTypeHandler());
  BlueprintDeployer.instance=new RealBlueprintDeployer();
  architectAchievement=BuildCraftCore.achievementManager.registerAchievement(new Achievement(""String_Node_Str"",""String_Node_Str"",11,2,BuildCraftBuilders.architectBlock,BuildCraftCore.goldGearAchievement));
  builderAchievement=BuildCraftCore.achievementManager.registerAchievement(new Achievement(""String_Node_Str"",""String_Node_Str"",13,2,BuildCraftBuilders.builderBlock,architectAchievement));
  blueprintAchievement=BuildCraftCore.achievementManager.registerAchievement(new Achievement(""String_Node_Str"",""String_Node_Str"",11,4,BuildCraftBuilders.blueprintItem,architectAchievement));
  templateAchievement=BuildCraftCore.achievementManager.registerAchievement(new Achievement(""String_Node_Str"",""String_Node_Str"",13,4,BuildCraftBuilders.templateItem,blueprintAchievement));
  libraryAchievement=BuildCraftCore.achievementManager.registerAchievement(new Achievement(""String_Node_Str"",""String_Node_Str"",15,2,BuildCraftBuilders.libraryBlock,builderAchievement));
  chunkDestroyerAchievement=BuildCraftCore.achievementManager.registerAchievement(new Achievement(""String_Node_Str"",""String_Node_Str"",9,2,quarryBlock,BuildCraftCore.diamondGearAchievement));
  if (BuildCraftCore.loadDefaultRecipes) {
    loadRecipes();
  }
  BuilderProxy.proxy.registerBlockRenderers();
}","@Mod.EventHandler public void init(FMLInitializationEvent evt){
  NetworkRegistry.INSTANCE.registerGuiHandler(instance,new BuildersGuiHandler());
  ISchematicRegistry schemes=BuilderAPI.schematicRegistry;
  schemes.registerSchematicBlock(Blocks.air,SchematicAir.class);
  schemes.registerSchematicBlock(Blocks.snow,SchematicIgnore.class);
  schemes.registerSchematicBlock(Blocks.tallgrass,SchematicIgnore.class);
  schemes.registerSchematicBlock(Blocks.double_plant,SchematicIgnore.class);
  schemes.registerSchematicBlock(Blocks.ice,SchematicIgnore.class);
  schemes.registerSchematicBlock(Blocks.piston_head,SchematicIgnore.class);
  schemes.registerSchematicBlock(Blocks.dirt,SchematicDirt.class);
  schemes.registerSchematicBlock(Blocks.grass,SchematicDirt.class);
  schemes.registerSchematicBlock(Blocks.cactus,SchematicCactus.class);
  schemes.registerSchematicBlock(Blocks.farmland,SchematicFarmland.class);
  schemes.registerSchematicBlock(Blocks.wheat,SchematicSeeds.class,Items.wheat_seeds);
  schemes.registerSchematicBlock(Blocks.pumpkin_stem,SchematicSeeds.class,Items.pumpkin_seeds);
  schemes.registerSchematicBlock(Blocks.melon_stem,SchematicSeeds.class,Items.melon_seeds);
  schemes.registerSchematicBlock(Blocks.nether_wart,SchematicSeeds.class,Items.nether_wart);
  schemes.registerSchematicBlock(Blocks.tripwire,SchematicBlockFloored.class);
  schemes.registerSchematicBlock(Blocks.tripwire_hook,SchematicTripWireHook.class);
  schemes.registerSchematicBlock(Blocks.skull,SchematicSkull.class);
  schemes.registerSchematicBlock(Blocks.ladder,SchematicRotateMetaSupported.class,new int[]{2,5,3,4},true);
  schemes.registerSchematicBlock(Blocks.fence_gate,SchematicRotateMeta.class,new int[]{0,1,2,3},true);
  schemes.registerSchematicBlock(Blocks.log,SchematicRotateMeta.class,new int[]{8,4,8,4},true);
  schemes.registerSchematicBlock(Blocks.log2,SchematicRotateMeta.class,new int[]{8,4,8,4},true);
  schemes.registerSchematicBlock(Blocks.hay_block,SchematicRotateMeta.class,new int[]{8,4,8,4},true);
  schemes.registerSchematicBlock(Blocks.quartz_block,SchematicRotateMeta.class,new int[]{4,3,4,3},true);
  schemes.registerSchematicBlock(Blocks.hopper,SchematicRotateMeta.class,new int[]{2,5,3,4},true);
  schemes.registerSchematicBlock(Blocks.anvil,SchematicRotateMeta.class,new int[]{0,1,2,3},true);
  schemes.registerSchematicBlock(Blocks.furnace,SchematicRotateMeta.class,new int[]{2,5,3,4},true);
  schemes.registerSchematicBlock(Blocks.lit_furnace,SchematicRotateMeta.class,new int[]{2,5,3,4},true);
  schemes.registerSchematicBlock(Blocks.chest,SchematicRotateMeta.class,new int[]{2,5,3,4},true);
  schemes.registerSchematicBlock(Blocks.trapped_chest,SchematicRotateMeta.class,new int[]{2,5,3,4},true);
  schemes.registerSchematicBlock(Blocks.dispenser,SchematicRotateMeta.class,new int[]{2,5,3,4},true);
  schemes.registerSchematicBlock(Blocks.dropper,SchematicRotateMeta.class,new int[]{2,5,3,4},true);
  schemes.registerSchematicBlock(Blocks.ender_chest,SchematicEnderChest.class);
  schemes.registerSchematicBlock(Blocks.vine,SchematicRotateMeta.class,new int[]{1,4,8,2},false);
  schemes.registerSchematicBlock(Blocks.trapdoor,SchematicRotateMeta.class,new int[]{0,1,2,3},false);
  schemes.registerSchematicBlock(Blocks.stone,SchematicStone.class);
  schemes.registerSchematicBlock(Blocks.coal_ore,SchematicStone.class);
  schemes.registerSchematicBlock(Blocks.lapis_ore,SchematicStone.class);
  schemes.registerSchematicBlock(Blocks.diamond_ore,SchematicStone.class);
  schemes.registerSchematicBlock(Blocks.redstone_ore,SchematicStone.class);
  schemes.registerSchematicBlock(Blocks.lit_redstone_ore,SchematicStone.class);
  schemes.registerSchematicBlock(Blocks.emerald_ore,SchematicStone.class);
  schemes.registerSchematicBlock(Blocks.monster_egg,SchematicSilverfish.class);
  schemes.registerSchematicBlock(Blocks.gravel,SchematicGravel.class);
  schemes.registerSchematicBlock(Blocks.redstone_wire,SchematicRedstoneWire.class,new ItemStack(Items.redstone));
  schemes.registerSchematicBlock(Blocks.cake,SchematicCustomStack.class,new ItemStack(Items.cake));
  schemes.registerSchematicBlock(Blocks.glowstone,SchematicCustomStack.class,new ItemStack(Blocks.glowstone));
  schemes.registerSchematicBlock(Blocks.powered_repeater,SchematicRedstoneDiode.class,Items.repeater);
  schemes.registerSchematicBlock(Blocks.unpowered_repeater,SchematicRedstoneDiode.class,Items.repeater);
  schemes.registerSchematicBlock(Blocks.powered_comparator,SchematicRedstoneDiode.class,Items.comparator);
  schemes.registerSchematicBlock(Blocks.unpowered_comparator,SchematicRedstoneDiode.class,Items.comparator);
  schemes.registerSchematicBlock(Blocks.redstone_lamp,SchematicRedstoneLamp.class);
  schemes.registerSchematicBlock(Blocks.lit_redstone_lamp,SchematicRedstoneLamp.class);
  schemes.registerSchematicBlock(Blocks.glass_pane,SchematicGlassPane.class);
  schemes.registerSchematicBlock(Blocks.stained_glass_pane,SchematicGlassPane.class);
  schemes.registerSchematicBlock(Blocks.piston,SchematicPiston.class);
  schemes.registerSchematicBlock(Blocks.piston_extension,SchematicPiston.class);
  schemes.registerSchematicBlock(Blocks.sticky_piston,SchematicPiston.class);
  schemes.registerSchematicBlock(Blocks.lit_pumpkin,SchematicPumpkin.class);
  schemes.registerSchematicBlock(Blocks.wooden_door,SchematicDoor.class,new ItemStack(Items.wooden_door));
  schemes.registerSchematicBlock(Blocks.iron_door,SchematicDoor.class,new ItemStack(Items.iron_door));
  schemes.registerSchematicBlock(Blocks.bed,SchematicBed.class);
  schemes.registerSchematicBlock(Blocks.wall_sign,SchematicSign.class,true);
  schemes.registerSchematicBlock(Blocks.standing_sign,SchematicSign.class,false);
  schemes.registerSchematicBlock(Blocks.portal,SchematicPortal.class);
  schemes.registerSchematicBlock(Blocks.rail,SchematicRail.class);
  schemes.registerSchematicBlock(Blocks.activator_rail,SchematicRail.class);
  schemes.registerSchematicBlock(Blocks.detector_rail,SchematicRail.class);
  schemes.registerSchematicBlock(Blocks.golden_rail,SchematicRail.class);
  schemes.registerSchematicBlock(Blocks.fire,SchematicFire.class);
  schemes.registerSchematicBlock(Blocks.bedrock,SchematicBlockCreative.class);
  schemes.registerSchematicBlock(Blocks.mob_spawner,SchematicTileCreative.class);
  schemes.registerSchematicEntity(EntityMinecartEmpty.class,SchematicMinecart.class,Items.minecart);
  schemes.registerSchematicEntity(EntityMinecartFurnace.class,SchematicMinecart.class,Items.furnace_minecart);
  schemes.registerSchematicEntity(EntityMinecartTNT.class,SchematicMinecart.class,Items.tnt_minecart);
  schemes.registerSchematicEntity(EntityMinecartChest.class,SchematicMinecart.class,Items.chest_minecart);
  schemes.registerSchematicEntity(EntityMinecartHopper.class,SchematicMinecart.class,Items.hopper_minecart);
  schemes.registerSchematicEntity(EntityPainting.class,SchematicHanging.class,Items.painting);
  schemes.registerSchematicEntity(EntityItemFrame.class,SchematicHanging.class,Items.item_frame);
  schemes.registerSchematicBlock(architectBlock,SchematicRotateMeta.class,new int[]{2,5,3,4},true);
  schemes.registerSchematicBlock(builderBlock,SchematicRotateMeta.class,new int[]{2,5,3,4},true);
  if (constructionMarkerBlock != null) {
    schemes.registerSchematicBlock(constructionMarkerBlock,SchematicIgnore.class);
  }
  schemes.registerSchematicBlock(frameBlock,SchematicFree.class);
  SchematicFactory.registerSchematicFactory(SchematicBlock.class,new SchematicFactoryBlock());
  SchematicFactory.registerSchematicFactory(SchematicMask.class,new SchematicFactoryMask());
  SchematicFactory.registerSchematicFactory(SchematicEntity.class,new SchematicFactoryEntity());
  LibraryAPI.registerHandler(new LibraryBlueprintTypeHandler(false));
  LibraryAPI.registerHandler(new LibraryBlueprintTypeHandler(true));
  LibraryAPI.registerHandler(new LibraryBookTypeHandler());
  BlueprintDeployer.instance=new RealBlueprintDeployer();
  architectAchievement=BuildCraftCore.achievementManager.registerAchievement(new Achievement(""String_Node_Str"",""String_Node_Str"",11,2,BuildCraftBuilders.architectBlock,BuildCraftCore.goldGearAchievement));
  builderAchievement=BuildCraftCore.achievementManager.registerAchievement(new Achievement(""String_Node_Str"",""String_Node_Str"",13,2,BuildCraftBuilders.builderBlock,architectAchievement));
  blueprintAchievement=BuildCraftCore.achievementManager.registerAchievement(new Achievement(""String_Node_Str"",""String_Node_Str"",11,4,BuildCraftBuilders.blueprintItem,architectAchievement));
  templateAchievement=BuildCraftCore.achievementManager.registerAchievement(new Achievement(""String_Node_Str"",""String_Node_Str"",13,4,BuildCraftBuilders.templateItem,blueprintAchievement));
  libraryAchievement=BuildCraftCore.achievementManager.registerAchievement(new Achievement(""String_Node_Str"",""String_Node_Str"",15,2,BuildCraftBuilders.libraryBlock,builderAchievement));
  chunkDestroyerAchievement=BuildCraftCore.achievementManager.registerAchievement(new Achievement(""String_Node_Str"",""String_Node_Str"",9,2,quarryBlock,BuildCraftCore.diamondGearAchievement));
  if (BuildCraftCore.loadDefaultRecipes) {
    loadRecipes();
  }
  BuilderProxy.proxy.registerBlockRenderers();
}",0.8405811138014528
156533,"public static void start(){
  Iterator i=Block.blockRegistry.iterator();
  while (i.hasNext()) {
    Block block=(Block)i.next();
    if (block == null || block == Blocks.air) {
      continue;
    }
    for (int meta=0; meta < 16; meta++) {
      if (!SchematicRegistry.INSTANCE.isSupported(block,meta)) {
        try {
          if (block.hasTileEntity(meta)) {
            SchematicRegistry.INSTANCE.registerSchematicBlock(block,meta,SchematicTileCreative.class);
            continue;
          }
          try {
            if (block instanceof IFluidBlock) {
              IFluidBlock fblock=(IFluidBlock)block;
              if (fblock.getFluid() != null) {
                SchematicRegistry.INSTANCE.registerSchematicBlock(block,meta,SchematicFluid.class,new FluidStack(fblock.getFluid(),1000));
              }
            }
 else {
              if (block instanceof BlockBush || block instanceof IPlantable || block instanceof IGrowable) {
                SchematicRegistry.INSTANCE.registerSchematicBlock(block,meta,SchematicBlockFloored.class);
              }
 else {
                SchematicRegistry.INSTANCE.registerSchematicBlock(block,meta,SchematicBlock.class);
              }
            }
          }
 catch (          Exception e) {
            e.printStackTrace();
          }
        }
 catch (        Exception e) {
        }
      }
    }
  }
}","public static void start(){
  Iterator i=Block.blockRegistry.iterator();
  while (i.hasNext()) {
    Block block=(Block)i.next();
    if (block == null || block == Blocks.air) {
      continue;
    }
    for (int meta=0; meta < 16; meta++) {
      if (!SchematicRegistry.INSTANCE.isSupported(block,meta)) {
        try {
          if (block.hasTileEntity(meta)) {
            SchematicRegistry.INSTANCE.registerSchematicBlock(block,meta,SchematicTileCreative.class);
            continue;
          }
          try {
            if (block instanceof IFluidBlock) {
              IFluidBlock fblock=(IFluidBlock)block;
              if (fblock.getFluid() != null) {
                SchematicRegistry.INSTANCE.registerSchematicBlock(block,meta,SchematicFluid.class,new FluidStack(fblock.getFluid(),1000));
              }
            }
 else {
              if (block instanceof BlockBush || block instanceof IPlantable || block instanceof IGrowable|| block instanceof BlockBasePressurePlate) {
                SchematicRegistry.INSTANCE.registerSchematicBlock(block,meta,SchematicBlockFloored.class);
              }
 else               if (block instanceof BlockLever || block instanceof BlockTorch || block instanceof BlockButton) {
                SchematicRegistry.INSTANCE.registerSchematicBlock(block,meta,SchematicWallSide.class);
              }
 else               if (block instanceof BlockStairs) {
                SchematicRegistry.INSTANCE.registerSchematicBlock(block,meta,SchematicStairs.class);
              }
 else {
                SchematicRegistry.INSTANCE.registerSchematicBlock(block,meta,SchematicBlock.class);
              }
            }
          }
 catch (          Exception e) {
            e.printStackTrace();
          }
        }
 catch (        Exception e) {
        }
      }
    }
  }
}",0.8585732165206508
156534,"@Override public boolean isHandler(ItemStack stack,HandlerType type){
  if (isBlueprint) {
    return stack.getItem() instanceof ItemBlueprintStandard && ItemBlueprint.isContentReadable(stack);
  }
 else {
    return stack.getItem() instanceof ItemBlueprintTemplate && ItemBlueprint.isContentReadable(stack);
  }
}","@Override public boolean isHandler(ItemStack stack,HandlerType type){
  if (isBlueprint) {
    return stack.getItem() instanceof ItemBlueprintStandard && (type == HandlerType.LOAD || ItemBlueprint.isContentReadable(stack));
  }
 else {
    return stack.getItem() instanceof ItemBlueprintTemplate && (type == HandlerType.LOAD || ItemBlueprint.isContentReadable(stack));
  }
}",0.9127906976744186
156535,"/** 
 * Gets the next available block. If builder is not null, then building will be verified and performed. Otherwise, the next possible building slot is returned, possibly for reservation, with no building.
 */
private BuildingSlot internalGetNextBlock(World world,TileAbstractBuilder builder){
  if (builder != null && builder.energyAvailable() < BuilderAPI.BREAK_ENERGY) {
    return null;
  }
  iterator=new BuildingSlotMapIterator(buildList,builder,buildStageOccurences);
  BuildingSlotBlock slot;
  while ((slot=iterator.next()) != null) {
    if (!world.blockExists(slot.x,slot.y,slot.z)) {
      continue;
    }
    boolean skipped=false;
    for (int i=0; i < slot.buildStage; i++) {
      if (buildStageOccurences[i] > 0) {
        iterator.skipList();
        skipped=true;
        break;
      }
    }
    if (skipped) {
      continue;
    }
    if (slot.built) {
      iterator.remove();
      markLocationUsed(slot.x,slot.y,slot.z);
      postProcessing.add(slot);
      continue;
    }
    if (slot.reserved) {
      continue;
    }
    try {
      if (slot.isAlreadyBuilt(context)) {
        requirementMap.remove(slot);
        if (slot.mode == Mode.Build) {
          postProcessing.add(slot);
        }
        iterator.remove();
        continue;
      }
      if (BlockUtils.isUnbreakableBlock(world,slot.x,slot.y,slot.z)) {
        iterator.remove();
        markLocationUsed(slot.x,slot.y,slot.z);
        requirementMap.remove(slot);
      }
 else {
        if (slot.mode == Mode.ClearIfInvalid) {
          if (BuildCraftAPI.isSoftBlock(world,slot.x,slot.y,slot.z) || isBlockBreakCanceled(world,slot.x,slot.y,slot.z)) {
            iterator.remove();
            markLocationUsed(slot.x,slot.y,slot.z);
            requirementMap.remove(slot);
          }
 else {
            if (builder == null) {
              createDestroyItems(slot);
              return slot;
            }
 else             if (canDestroy(builder,context,slot)) {
              consumeEnergyToDestroy(builder,slot);
              createDestroyItems(slot);
              iterator.remove();
              markLocationUsed(slot.x,slot.y,slot.z);
              requirementMap.remove(slot);
              return slot;
            }
          }
        }
 else         if (!slot.schematic.doNotBuild()) {
          if (builder == null) {
            return slot;
          }
 else           if (checkRequirements(builder,slot.schematic)) {
            if (!BuildCraftAPI.isSoftBlock(world,slot.x,slot.y,slot.z) || requirementMap.contains(new BlockIndex(slot.x,slot.y,slot.z))) {
              continue;
            }
 else             if (isBlockPlaceCanceled(world,slot.x,slot.y,slot.z,slot.schematic)) {
              iterator.remove();
              requirementMap.remove(slot);
              markLocationUsed(slot.x,slot.y,slot.z);
              continue;
            }
            builder.consumeEnergy(slot.getEnergyRequirement());
            useRequirements(builder,slot);
            iterator.remove();
            markLocationUsed(slot.x,slot.y,slot.z);
            postProcessing.add(slot);
            return slot;
          }
        }
 else {
          postProcessing.add(slot);
          requirementMap.remove(slot);
          iterator.remove();
        }
      }
    }
 catch (    Throwable t) {
      t.printStackTrace();
      BCLog.logger.throwing(t);
      iterator.remove();
      requirementMap.remove(slot);
    }
  }
  return null;
}","/** 
 * Gets the next available block. If builder is not null, then building will be verified and performed. Otherwise, the next possible building slot is returned, possibly for reservation, with no building.
 */
private BuildingSlot internalGetNextBlock(World world,TileAbstractBuilder builder){
  if (builder != null && builder.energyAvailable() < BuilderAPI.BREAK_ENERGY) {
    return null;
  }
  iterator=new BuildingSlotMapIterator(buildList,builder,buildStageOccurences);
  BuildingSlotBlock slot;
  while ((slot=iterator.next()) != null) {
    if (!world.blockExists(slot.x,slot.y,slot.z)) {
      continue;
    }
    boolean skipped=false;
    for (int i=0; i < slot.buildStage; i++) {
      if (buildStageOccurences[i] > 0) {
        iterator.skipList();
        skipped=true;
        break;
      }
    }
    if (skipped) {
      continue;
    }
    if (slot.built) {
      iterator.remove();
      markLocationUsed(slot.x,slot.y,slot.z);
      postProcessing.add(slot);
      continue;
    }
    if (slot.reserved) {
      continue;
    }
    try {
      if (slot.isAlreadyBuilt(context)) {
        if (slot.mode == Mode.Build) {
          requirementMap.remove(slot);
          postProcessing.add(slot);
        }
        iterator.remove();
        continue;
      }
      if (BlockUtils.isUnbreakableBlock(world,slot.x,slot.y,slot.z)) {
        iterator.remove();
        markLocationUsed(slot.x,slot.y,slot.z);
        requirementMap.remove(slot);
      }
 else {
        if (slot.mode == Mode.ClearIfInvalid) {
          if (BuildCraftAPI.isSoftBlock(world,slot.x,slot.y,slot.z) || isBlockBreakCanceled(world,slot.x,slot.y,slot.z)) {
            iterator.remove();
            markLocationUsed(slot.x,slot.y,slot.z);
          }
 else {
            if (builder == null) {
              createDestroyItems(slot);
              return slot;
            }
 else             if (canDestroy(builder,context,slot)) {
              consumeEnergyToDestroy(builder,slot);
              createDestroyItems(slot);
              iterator.remove();
              markLocationUsed(slot.x,slot.y,slot.z);
              return slot;
            }
          }
        }
 else         if (!slot.schematic.doNotBuild()) {
          if (builder == null) {
            return slot;
          }
 else           if (checkRequirements(builder,slot.schematic)) {
            if (!BuildCraftAPI.isSoftBlock(world,slot.x,slot.y,slot.z) || requirementMap.contains(new BlockIndex(slot.x,slot.y,slot.z))) {
              continue;
            }
 else             if (isBlockPlaceCanceled(world,slot.x,slot.y,slot.z,slot.schematic)) {
              iterator.remove();
              requirementMap.remove(slot);
              markLocationUsed(slot.x,slot.y,slot.z);
              continue;
            }
            builder.consumeEnergy(slot.getEnergyRequirement());
            useRequirements(builder,slot);
            iterator.remove();
            markLocationUsed(slot.x,slot.y,slot.z);
            postProcessing.add(slot);
            return slot;
          }
        }
 else {
          postProcessing.add(slot);
          requirementMap.remove(slot);
          iterator.remove();
        }
      }
    }
 catch (    Throwable t) {
      t.printStackTrace();
      BCLog.logger.throwing(t);
      iterator.remove();
      requirementMap.remove(slot);
    }
  }
  return null;
}",0.9765464673116389
156536,"@Override public void rotateLeft(IBuilderContext context){
  final int xPos=2;
  final int xNeg=1;
  final int zPos=4;
  final int zNeg=3;
switch (meta) {
case xPos:
    meta=zPos;
  break;
case zNeg:
meta=xPos;
break;
case xNeg:
meta=zNeg;
break;
case zPos:
meta=xNeg;
break;
}
}","@Override public void rotateLeft(IBuilderContext context){
  final int xPos=2;
  final int xNeg=1;
  final int zPos=4;
  final int zNeg=3;
switch (meta & 7) {
case xPos:
    meta=(meta & 8) | zPos;
  break;
case zNeg:
meta=(meta & 8) | xPos;
break;
case xNeg:
meta=(meta & 8) | zNeg;
break;
case zPos:
meta=(meta & 8) | xNeg;
break;
}
}",0.9090909090909092
156537,"@Override public Set<BlockIndex> getPrerequisiteBlocks(IBuilderContext context){
  final int yPos=0;
  final int yNeg=5;
  final int xPos=2;
  final int xNeg=1;
  final int zPos=4;
  final int zNeg=3;
switch (meta & 7) {
case xPos:
    return Sets.newHashSet(RELATIVE_INDEXES[ForgeDirection.EAST.ordinal()]);
case xNeg:
  return Sets.newHashSet(RELATIVE_INDEXES[ForgeDirection.WEST.ordinal()]);
case yPos:
return Sets.newHashSet(RELATIVE_INDEXES[ForgeDirection.UP.ordinal()]);
case yNeg:
return Sets.newHashSet(RELATIVE_INDEXES[ForgeDirection.DOWN.ordinal()]);
case zPos:
return Sets.newHashSet(RELATIVE_INDEXES[ForgeDirection.SOUTH.ordinal()]);
case zNeg:
return Sets.newHashSet(RELATIVE_INDEXES[ForgeDirection.NORTH.ordinal()]);
}
return null;
}","@Override public Set<BlockIndex> getPrerequisiteBlocks(IBuilderContext context){
  final int yPos=0;
  final int yNeg=5;
  final int xPos=2;
  final int xNeg=1;
  final int zPos=4;
  final int zNeg=3;
switch (meta & 7) {
case xPos:
    return Sets.newHashSet(RELATIVE_INDEXES[ForgeDirection.EAST.ordinal()]);
case xNeg:
  return Sets.newHashSet(RELATIVE_INDEXES[ForgeDirection.WEST.ordinal()]);
case yPos:
case 7:
return Sets.newHashSet(RELATIVE_INDEXES[ForgeDirection.UP.ordinal()]);
case yNeg:
case 6:
return Sets.newHashSet(RELATIVE_INDEXES[ForgeDirection.DOWN.ordinal()]);
case zPos:
return Sets.newHashSet(RELATIVE_INDEXES[ForgeDirection.SOUTH.ordinal()]);
case zNeg:
return Sets.newHashSet(RELATIVE_INDEXES[ForgeDirection.NORTH.ordinal()]);
}
return null;
}",0.9894039735099338
156538,"@Override public int receiveEnergy(ForgeDirection from,int maxReceive,boolean simulate){
  int maxR=Math.min(MAX_POWER,maxReceive);
  if (container.getPipe() instanceof IEnergyHandler) {
    int energyCanReceive=((IEnergyHandler)container.getPipe()).receiveEnergy(from,maxR,true);
    if (!simulate) {
      return ((IEnergyHandler)container.getPipe()).receiveEnergy(from,energyCanReceive,false);
    }
 else {
      return energyCanReceive;
    }
  }
  return 0;
}","@Override public int receiveEnergy(ForgeDirection from,int maxReceive,boolean simulate){
  int maxR=Math.min(MAX_POWER,maxReceive);
  if (container != null && container.getPipe() instanceof IEnergyHandler) {
    int energyCanReceive=((IEnergyHandler)container.getPipe()).receiveEnergy(from,maxR,true);
    if (!simulate) {
      return ((IEnergyHandler)container.getPipe()).receiveEnergy(from,energyCanReceive,false);
    }
 else {
      return energyCanReceive;
    }
  }
  return 0;
}",0.9779179810725552
156539,"@Override public void start(){
  if (robot.getDockingStation() != null && filter.matches(robot.getDockingStation())) {
    targetStation=robot.getDockingStation();
    terminate();
    return;
  }
  double potentialStationDistance=Float.MAX_VALUE;
  DockingStation potentialStation=null;
  for (  DockingStation station : robot.getRegistry().getStations()) {
    if (station.isTaken() && station.robotIdTaking() != robot.getRobotId()) {
      continue;
    }
    if (zone != null && !zone.contains(station.x(),station.y(),station.z())) {
      continue;
    }
    if (filter.matches(station)) {
      if (ActionStationForbidRobot.isForbidden(station,robot)) {
        continue;
      }
      double dx=robot.posX - station.x();
      double dy=robot.posY - station.y();
      double dz=robot.posZ - station.z();
      double distance=dx * dx + dy * dy + dz * dz;
      if (potentialStation == null || distance < potentialStationDistance) {
        potentialStation=station;
        potentialStationDistance=distance;
      }
    }
  }
  if (potentialStation != null) {
    targetStation=potentialStation;
  }
  terminate();
}","@Override public void start(){
  if (robot.getDockingStation() != null && filter.matches(robot.getDockingStation())) {
    targetStation=robot.getDockingStation();
    terminate();
    return;
  }
  double potentialStationDistance=Float.MAX_VALUE;
  DockingStation potentialStation=null;
  for (  DockingStation station : robot.getRegistry().getStations()) {
    if (!station.isInitialized()) {
      continue;
    }
    if (station.isTaken() && station.robotIdTaking() != robot.getRobotId()) {
      continue;
    }
    if (zone != null && !zone.contains(station.x(),station.y(),station.z())) {
      continue;
    }
    if (filter.matches(station)) {
      if (ActionStationForbidRobot.isForbidden(station,robot)) {
        continue;
      }
      double dx=robot.posX - station.x();
      double dy=robot.posY - station.y();
      double dz=robot.posZ - station.z();
      double distance=dx * dx + dy * dy + dz * dz;
      if (potentialStation == null || distance < potentialStationDistance) {
        potentialStation=station;
        potentialStationDistance=distance;
      }
    }
  }
  if (potentialStation != null) {
    targetStation=potentialStation;
  }
  terminate();
}",0.9748700173310224
156540,"/** 
 * Get the debug information from a tile entity as a list of strings, used for the F3 debug menu
 * @param info The List debug strings should be output to. 
 */
void getDebugInfo(List<String> left,List<String> right,EnumFacing side);","/** 
 * Get the debug information from a tile entity as a list of strings, used for the F3 debug menu. The left and right parameters correspond to the sides of the F3 screen.
 * @param side The side the block was clicked on, may be null if we don't know, or is the ""centre"" side 
 */
void getDebugInfo(List<String> left,List<String> right,EnumFacing side);",0.6565656565656566
156541,"@Optional.Method(modid=""String_Node_Str"") public static void loadSiliconRecipes(){
  GameRegistry.addShapelessRecipe(new ItemStack(BuildCraftTransport.gateCopier,1),new ItemStack(BuildCraftCore.wrenchItem),ItemRedstoneChipset.Chipset.RED.getStack(1));
  BuildcraftRecipeRegistry.assemblyTable.addRecipe(""String_Node_Str"",5000,PipeWire.RED.getStack(8),""String_Node_Str"",""String_Node_Str"",""String_Node_Str"");
  BuildcraftRecipeRegistry.assemblyTable.addRecipe(""String_Node_Str"",5000,PipeWire.BLUE.getStack(8),""String_Node_Str"",""String_Node_Str"",""String_Node_Str"");
  BuildcraftRecipeRegistry.assemblyTable.addRecipe(""String_Node_Str"",5000,PipeWire.GREEN.getStack(8),""String_Node_Str"",""String_Node_Str"",""String_Node_Str"");
  BuildcraftRecipeRegistry.assemblyTable.addRecipe(""String_Node_Str"",5000,PipeWire.YELLOW.getStack(8),""String_Node_Str"",""String_Node_Str"",""String_Node_Str"");
  for (int i=0; i < 16; i++) {
    BuildcraftRecipeRegistry.assemblyTable.addRecipe(""String_Node_Str"" + i,10000,new ItemStack(BuildCraftTransport.lensItem,2,i),ColorUtils.getOreDictionaryName(15 - i),""String_Node_Str"",""String_Node_Str"");
    BuildcraftRecipeRegistry.assemblyTable.addRecipe(""String_Node_Str"" + i,10000,new ItemStack(BuildCraftTransport.lensItem,2,i + 16),ColorUtils.getOreDictionaryName(15 - i),""String_Node_Str"",Blocks.iron_bars);
  }
  BuildcraftRecipeRegistry.assemblyTable.addRecipe(""String_Node_Str"",(int)Math.round(100000 * BuildCraftTransport.gateCostMultiplier),ItemGate.makeGateItem(GateDefinition.GateMaterial.REDSTONE,GateDefinition.GateLogic.AND),ItemRedstoneChipset.Chipset.RED.getStack(),PipeWire.RED.getStack());
  addGateRecipe(""String_Node_Str"",(int)Math.round(200000 * BuildCraftTransport.gateCostMultiplier),GateDefinition.GateMaterial.IRON,ItemRedstoneChipset.Chipset.IRON,PipeWire.RED,PipeWire.BLUE);
  addGateRecipe(""String_Node_Str"",(int)Math.round(400000 * BuildCraftTransport.gateCostMultiplier),GateDefinition.GateMaterial.GOLD,ItemRedstoneChipset.Chipset.GOLD,PipeWire.RED,PipeWire.BLUE,PipeWire.GREEN);
  addGateRecipe(""String_Node_Str"",(int)Math.round(600000 * BuildCraftTransport.gateCostMultiplier),GateDefinition.GateMaterial.QUARTZ,ItemRedstoneChipset.Chipset.QUARTZ,PipeWire.RED,PipeWire.BLUE,PipeWire.GREEN);
  addGateRecipe(""String_Node_Str"",(int)Math.round(800000 * BuildCraftTransport.gateCostMultiplier),GateDefinition.GateMaterial.DIAMOND,ItemRedstoneChipset.Chipset.DIAMOND,PipeWire.RED,PipeWire.BLUE,PipeWire.GREEN,PipeWire.YELLOW);
  addGateRecipe(""String_Node_Str"",(int)Math.round(1200000 * BuildCraftTransport.gateCostMultiplier),GateDefinition.GateMaterial.EMERALD,ItemRedstoneChipset.Chipset.EMERALD,PipeWire.RED,PipeWire.BLUE,PipeWire.GREEN,PipeWire.YELLOW);
  BuildcraftRecipeRegistry.integrationTable.addRecipe(new GateExpansionRecipe());
  BuildcraftRecipeRegistry.integrationTable.addRecipe(new AdvancedFacadeRecipe());
  GateExpansions.registerExpansion(GateExpansionPulsar.INSTANCE,ItemRedstoneChipset.Chipset.PULSATING.getStack());
  GateExpansions.registerExpansion(GateExpansionTimer.INSTANCE,ItemRedstoneChipset.Chipset.QUARTZ.getStack());
  GateExpansions.registerExpansion(GateExpansionRedstoneFader.INSTANCE,ItemRedstoneChipset.Chipset.COMP.getStack());
}","@Optional.Method(modid=""String_Node_Str"") public static void loadSiliconRecipes(){
  GameRegistry.addShapelessRecipe(new ItemStack(BuildCraftTransport.gateCopier,1),new ItemStack(BuildCraftCore.wrenchItem),EnumRedstoneChipset.RED.getStack(1));
  BuildcraftRecipeRegistry.assemblyTable.addRecipe(""String_Node_Str"",5000,PipeWire.RED.getStack(8),""String_Node_Str"",""String_Node_Str"",""String_Node_Str"");
  BuildcraftRecipeRegistry.assemblyTable.addRecipe(""String_Node_Str"",5000,PipeWire.BLUE.getStack(8),""String_Node_Str"",""String_Node_Str"",""String_Node_Str"");
  BuildcraftRecipeRegistry.assemblyTable.addRecipe(""String_Node_Str"",5000,PipeWire.GREEN.getStack(8),""String_Node_Str"",""String_Node_Str"",""String_Node_Str"");
  BuildcraftRecipeRegistry.assemblyTable.addRecipe(""String_Node_Str"",5000,PipeWire.YELLOW.getStack(8),""String_Node_Str"",""String_Node_Str"",""String_Node_Str"");
  for (int i=0; i < 16; i++) {
    BuildcraftRecipeRegistry.assemblyTable.addRecipe(""String_Node_Str"" + i,10000,new ItemStack(BuildCraftTransport.lensItem,2,i),ColorUtils.getOreDictionaryName(15 - i),""String_Node_Str"",""String_Node_Str"");
    BuildcraftRecipeRegistry.assemblyTable.addRecipe(""String_Node_Str"" + i,10000,new ItemStack(BuildCraftTransport.lensItem,2,i + 16),ColorUtils.getOreDictionaryName(15 - i),""String_Node_Str"",Blocks.iron_bars);
  }
  BuildcraftRecipeRegistry.assemblyTable.addRecipe(""String_Node_Str"",(int)Math.round(100000 * BuildCraftTransport.gateCostMultiplier),ItemGate.makeGateItem(GateDefinition.GateMaterial.REDSTONE,GateDefinition.GateLogic.AND),EnumRedstoneChipset.RED.getStack(1),PipeWire.RED.getStack());
  addGateRecipe(""String_Node_Str"",(int)Math.round(200000 * BuildCraftTransport.gateCostMultiplier),GateDefinition.GateMaterial.IRON,EnumRedstoneChipset.IRON,PipeWire.RED,PipeWire.BLUE);
  addGateRecipe(""String_Node_Str"",(int)Math.round(400000 * BuildCraftTransport.gateCostMultiplier),GateDefinition.GateMaterial.GOLD,EnumRedstoneChipset.GOLD,PipeWire.RED,PipeWire.BLUE,PipeWire.GREEN);
  addGateRecipe(""String_Node_Str"",(int)Math.round(600000 * BuildCraftTransport.gateCostMultiplier),GateDefinition.GateMaterial.QUARTZ,EnumRedstoneChipset.QUARTZ,PipeWire.RED,PipeWire.BLUE,PipeWire.GREEN);
  addGateRecipe(""String_Node_Str"",(int)Math.round(800000 * BuildCraftTransport.gateCostMultiplier),GateDefinition.GateMaterial.DIAMOND,EnumRedstoneChipset.DIAMOND,PipeWire.RED,PipeWire.BLUE,PipeWire.GREEN,PipeWire.YELLOW);
  addGateRecipe(""String_Node_Str"",(int)Math.round(1200000 * BuildCraftTransport.gateCostMultiplier),GateDefinition.GateMaterial.EMERALD,EnumRedstoneChipset.EMERALD,PipeWire.RED,PipeWire.BLUE,PipeWire.GREEN,PipeWire.YELLOW);
  BuildcraftRecipeRegistry.integrationTable.addRecipe(new GateExpansionRecipe());
  BuildcraftRecipeRegistry.integrationTable.addRecipe(new AdvancedFacadeRecipe());
  GateExpansions.registerExpansion(GateExpansionPulsar.INSTANCE,EnumRedstoneChipset.PULSATING.getStack());
  GateExpansions.registerExpansion(GateExpansionTimer.INSTANCE,EnumRedstoneChipset.QUARTZ.getStack());
  GateExpansions.registerExpansion(GateExpansionRedstoneFader.INSTANCE,EnumRedstoneChipset.COMP.getStack());
}",0.9777707709285828
156542,"@Optional.Method(modid=""String_Node_Str"") private static void addGateRecipe(String materialName,int energyCost,GateDefinition.GateMaterial material,ItemRedstoneChipset.Chipset chipset,PipeWire... pipeWire){
  List<ItemStack> temp=new ArrayList<ItemStack>();
  temp.add(chipset.getStack());
  for (  PipeWire wire : pipeWire) {
    temp.add(wire.getStack());
  }
  Object[] inputs=temp.toArray();
  BuildcraftRecipeRegistry.assemblyTable.addRecipe(""String_Node_Str"" + materialName,energyCost,ItemGate.makeGateItem(material,GateDefinition.GateLogic.AND),inputs);
  BuildcraftRecipeRegistry.assemblyTable.addRecipe(""String_Node_Str"" + materialName,energyCost,ItemGate.makeGateItem(material,GateDefinition.GateLogic.OR),inputs);
}","@Optional.Method(modid=""String_Node_Str"") private static void addGateRecipe(String materialName,int energyCost,GateDefinition.GateMaterial material,EnumRedstoneChipset chipset,PipeWire... pipeWire){
  List<ItemStack> temp=new ArrayList<ItemStack>();
  temp.add(chipset.getStack());
  for (  PipeWire wire : pipeWire) {
    temp.add(wire.getStack());
  }
  Object[] inputs=temp.toArray();
  BuildcraftRecipeRegistry.assemblyTable.addRecipe(""String_Node_Str"" + materialName,energyCost,ItemGate.makeGateItem(material,GateDefinition.GateLogic.AND),inputs);
  BuildcraftRecipeRegistry.assemblyTable.addRecipe(""String_Node_Str"" + materialName,energyCost,ItemGate.makeGateItem(material,GateDefinition.GateLogic.OR),inputs);
}",0.9778393351800554
156543,"@Override public boolean isValidExpansion(ItemStack input,ItemStack expansion){
  if (StackHelper.isMatchingItem(ItemRedstoneChipset.Chipset.RED.getStack(),expansion,true,true)) {
    return true;
  }
  for (  ItemStack s : recipes.values()) {
    if (StackHelper.isMatchingItem(s,expansion,true,true)) {
      return true;
    }
  }
  return false;
}","@Override public boolean isValidExpansion(ItemStack input,ItemStack expansion){
  if (StackHelper.isMatchingItem(EnumRedstoneChipset.RED.getStack(),expansion,true,true)) {
    return true;
  }
  for (  ItemStack s : recipes.values()) {
    if (StackHelper.isMatchingItem(s,expansion,true,true)) {
      return true;
    }
  }
  return false;
}",0.9798270893371758
156544,"@Override public ItemStack craft(ItemStack input,List<ItemStack> expansions,boolean preview){
  ItemStack output=input.copy();
  output.stackSize=1;
  int expansionsAdded=0;
  for (  ItemStack chipset : expansions) {
    if (StackHelper.isMatchingItem(ItemRedstoneChipset.Chipset.RED.getStack(),chipset,true,true)) {
      ItemGate.setLogic(output,ItemGate.getLogic(output) == GateDefinition.GateLogic.AND ? GateDefinition.GateLogic.OR : GateDefinition.GateLogic.AND);
      expansionsAdded++;
      continue;
    }
    for (    ItemStack expansion : recipes.values()) {
      if (StackHelper.isMatchingItem(chipset,expansion,true,true) && !ItemGate.hasGateExpansion(output,recipes.inverse().get(expansion))) {
        if (!preview) {
          chipset.stackSize--;
        }
        ItemGate.addGateExpansion(output,recipes.inverse().get(expansion));
        expansionsAdded++;
        break;
      }
    }
  }
  if (expansionsAdded > 0) {
    return output;
  }
 else {
    return null;
  }
}","@Override public ItemStack craft(ItemStack input,List<ItemStack> expansions,boolean preview){
  ItemStack output=input.copy();
  output.stackSize=1;
  int expansionsAdded=0;
  for (  ItemStack chipset : expansions) {
    if (StackHelper.isMatchingItem(EnumRedstoneChipset.RED.getStack(),chipset,true,true)) {
      ItemGate.setLogic(output,ItemGate.getLogic(output) == GateDefinition.GateLogic.AND ? GateDefinition.GateLogic.OR : GateDefinition.GateLogic.AND);
      expansionsAdded++;
      continue;
    }
    for (    ItemStack expansion : recipes.values()) {
      if (StackHelper.isMatchingItem(chipset,expansion,true,true) && !ItemGate.hasGateExpansion(output,recipes.inverse().get(expansion))) {
        if (!preview) {
          chipset.stackSize--;
        }
        ItemGate.addGateExpansion(output,recipes.inverse().get(expansion));
        expansionsAdded++;
        break;
      }
    }
  }
  if (expansionsAdded > 0) {
    return output;
  }
 else {
    return null;
  }
}",0.9929292929292928
156545,"boolean contains(double x,double y,double z);",boolean contains(Vec3 point);,0.5405405405405406
156546,"@Override public boolean contains(double x,double y,double z){
  int xBlock=(int)Math.floor(x);
  int zBlock=(int)Math.floor(z);
  return get(xBlock,zBlock);
}","@Override public boolean contains(Vec3 point){
  int xBlock=(int)Math.floor(point.xCoord);
  int zBlock=(int)Math.floor(point.zCoord);
  return get(xBlock,zBlock);
}",0.8271604938271605
156547,"@Override public void readEntitiesFromWorld(IBuilderContext context,TileEntity anchorTile){
  BptContext bptContext=(BptContext)context;
  Vec3 transform=new Vec3(0,0,0).subtract(context.surroundingBox().pMin());
  for (  Object o : context.world().loadedEntityList) {
    Entity e=(Entity)o;
    if (context.surroundingBox().contains(e.posX,e.posY,e.posZ)) {
      SchematicEntity s=SchematicRegistry.INSTANCE.createSchematicEntity(e.getClass());
      if (s != null) {
        s.readFromWorld(context,e);
switch (s.getBuildingPermission()) {
case ALL:
          entities.add(s);
        break;
case CREATIVE_ONLY:
      if (bptContext.readConfiguration.allowCreative) {
        if (buildingPermission == BuildingPermission.ALL) {
          buildingPermission=BuildingPermission.CREATIVE_ONLY;
        }
        entities.add(s);
      }
    break;
case NONE:
  buildingPermission=BuildingPermission.NONE;
break;
}
}
}
}
}","@Override public void readEntitiesFromWorld(IBuilderContext context,TileEntity anchorTile){
  BptContext bptContext=(BptContext)context;
  Vec3 transform=new Vec3(0,0,0).subtract(context.surroundingBox().pMin());
  for (  Object o : context.world().loadedEntityList) {
    Entity e=(Entity)o;
    if (context.surroundingBox().contains(new Vec3(e.posX,e.posY,e.posZ))) {
      SchematicEntity s=SchematicRegistry.INSTANCE.createSchematicEntity(e.getClass());
      if (s != null) {
        s.readFromWorld(context,e);
switch (s.getBuildingPermission()) {
case ALL:
          entities.add(s);
        break;
case CREATIVE_ONLY:
      if (bptContext.readConfiguration.allowCreative) {
        if (buildingPermission == BuildingPermission.ALL) {
          buildingPermission=BuildingPermission.CREATIVE_ONLY;
        }
        entities.add(s);
      }
    break;
case NONE:
  buildingPermission=BuildingPermission.NONE;
break;
}
}
}
}
}",0.9946062567421792
156548,"public void set(TextureAtlasSprite icon){
  currentTexture=icon;
}","@Override public void set(TextureAtlasSprite icon){
  currentTexture=icon;
}",0.9295774647887324
156549,"@Override public BlockPos next(){
  BlockPos pos=zone.getRandomBlockPos(rand);
  return new BlockPos(pos.getX() - x,pos.getY() - y,pos.getZ() - z);
}","@Override public BlockPos next(){
  BlockPos pos=zone.getRandomBlockPos(rand);
  return pos.subtract(BlockScannerZoneRandom.this.pos);
}",0.7157894736842105
156550,"public BlockScannerZoneRandom(int iX,int iY,int iZ,Random iRand,IZone iZone){
  x=iX;
  y=iY;
  z=iZ;
  rand=iRand;
  zone=iZone;
}","public BlockScannerZoneRandom(BlockPos pos,Random iRand,IZone iZone){
  this.pos=pos;
  rand=iRand;
  zone=iZone;
}",0.7560975609756098
156551,"private boolean isTarget(BlockPos block){
  if (zone != null && !zone.contains(block.getX(),block.getY(),block.getZ())) {
    return false;
  }
  if (!pathFound.matches(world,block)) {
    return false;
  }
synchronized (reservations) {
    if (reservations.containsKey(world.provider.getDimensionId())) {
      HashSet<BlockPos> dimReservations=reservations.get(world.provider.getDimensionId());
      if (dimReservations.contains(block)) {
        return false;
      }
    }
  }
  if (!BuildCraftAPI.isSoftBlock(world,block.west()) && !BuildCraftAPI.isSoftBlock(world,block.east()) && !BuildCraftAPI.isSoftBlock(world,block.north())&& !BuildCraftAPI.isSoftBlock(world,block.south())&& !BuildCraftAPI.isSoftBlock(world,block.down())&& !BuildCraftAPI.isSoftBlock(world,block.up())) {
    return false;
  }
  return true;
}","private boolean isTarget(BlockPos block){
  if (zone != null && !zone.contains(Utils.convert(block))) {
    return false;
  }
  if (!pathFound.matches(world,block)) {
    return false;
  }
synchronized (reservations) {
    if (reservations.containsKey(world.provider.getDimensionId())) {
      HashSet<BlockPos> dimReservations=reservations.get(world.provider.getDimensionId());
      if (dimReservations.contains(block)) {
        return false;
      }
    }
  }
  if (!BuildCraftAPI.isSoftBlock(world,block.west()) && !BuildCraftAPI.isSoftBlock(world,block.east()) && !BuildCraftAPI.isSoftBlock(world,block.north())&& !BuildCraftAPI.isSoftBlock(world,block.south())&& !BuildCraftAPI.isSoftBlock(world,block.down())&& !BuildCraftAPI.isSoftBlock(world,block.up())) {
    return false;
  }
  return true;
}",0.9656019656019657
156552,"@SubscribeEvent @SideOnly(Side.CLIENT) public void textureHook(TextureStitchEvent.Pre event){
  if (event.map.getTextureType() == 1) {
    RedstoneBoardRegistry.instance.registerIcons(event.map);
  }
}","@SubscribeEvent @SideOnly(Side.CLIENT) public void textureHook(TextureStitchEvent.Pre event){
  RedstoneBoardRegistry.instance.registerIcons(event.map);
}",0.8676056338028169
156553,"@Override protected void entityInit(){
  super.entityInit();
  setNullBoundingBox();
  preventEntitySpawning=false;
  noClip=true;
  isImmuneToFire=true;
  this.func_110163_bv();
  dataWatcher.addObject(12,Float.valueOf(0));
  dataWatcher.addObject(13,Float.valueOf(0));
  dataWatcher.addObject(14,Float.valueOf(0));
  dataWatcher.addObject(15,Byte.valueOf((byte)0));
  dataWatcher.addObject(16,""String_Node_Str"");
  dataWatcher.addObject(17,Float.valueOf(0));
  dataWatcher.addObject(18,Float.valueOf(0));
  dataWatcher.addObject(19,Integer.valueOf(0));
  dataWatcher.addObject(20,Byte.valueOf((byte)0));
  dataWatcher.addObject(21,Integer.valueOf(0));
}","@Override protected void entityInit(){
  super.entityInit();
  setNullBoundingBox();
  preventEntitySpawning=false;
  noClip=true;
  isImmuneToFire=true;
  this.enablePersistence();
  dataWatcher.addObject(12,Float.valueOf(0));
  dataWatcher.addObject(13,Float.valueOf(0));
  dataWatcher.addObject(14,Float.valueOf(0));
  dataWatcher.addObject(15,Byte.valueOf((byte)0));
  dataWatcher.addObject(16,""String_Node_Str"");
  dataWatcher.addObject(17,Float.valueOf(0));
  dataWatcher.addObject(18,Float.valueOf(0));
  dataWatcher.addObject(19,Integer.valueOf(0));
  dataWatcher.addObject(20,Byte.valueOf((byte)0));
  dataWatcher.addObject(21,Integer.valueOf(0));
}",0.9763899466869764
156554,"protected void updateDataClient(){
  laser.tail.x=dataWatcher.getWatchableObjectFloat(12);
  laser.tail.y=dataWatcher.getWatchableObjectFloat(13);
  laser.tail.z=dataWatcher.getWatchableObjectFloat(14);
  laser.isVisible=dataWatcher.getWatchableObjectByte(15) == 1;
  RedstoneBoardNBT<?> boardNBT=RedstoneBoardRegistry.instance.getRedstoneBoard(dataWatcher.getWatchableObjectString(16));
  if (boardNBT != null) {
    texture=((RedstoneBoardRobotNBT)boardNBT).getRobotTexture();
  }
  itemAngle1=dataWatcher.getWatchableObjectFloat(17);
  itemAngle2=dataWatcher.getWatchableObjectFloat(18);
  energySpendPerCycle=dataWatcher.getWatchableObjectInt(19);
  isActiveClient=dataWatcher.getWatchableObjectByte(20) == 1;
  battery.setEnergy(dataWatcher.getWatchableObjectInt(21));
}","protected void updateDataClient(){
  float x=dataWatcher.getWatchableObjectFloat(12);
  float y=dataWatcher.getWatchableObjectFloat(13);
  float z=dataWatcher.getWatchableObjectFloat(14);
  laser.tail=new Vec3(x,y,z);
  laser.isVisible=dataWatcher.getWatchableObjectByte(15) == 1;
  RedstoneBoardNBT<?> boardNBT=RedstoneBoardRegistry.instance.getRedstoneBoard(dataWatcher.getWatchableObjectString(16));
  if (boardNBT != null) {
    texture=((RedstoneBoardRobotNBT)boardNBT).getRobotTexture();
  }
  itemAngle1=dataWatcher.getWatchableObjectFloat(17);
  itemAngle2=dataWatcher.getWatchableObjectFloat(18);
  energySpendPerCycle=dataWatcher.getWatchableObjectInt(19);
  isActiveClient=dataWatcher.getWatchableObjectByte(20) == 1;
  battery.setEnergy(dataWatcher.getWatchableObjectInt(21));
}",0.9482428115015974
156555,"protected void updateDataServer(){
  dataWatcher.updateObject(12,Float.valueOf((float)laser.tail.x));
  dataWatcher.updateObject(13,Float.valueOf((float)laser.tail.y));
  dataWatcher.updateObject(14,Float.valueOf((float)laser.tail.z));
  dataWatcher.updateObject(15,Byte.valueOf((byte)(laser.isVisible ? 1 : 0)));
  dataWatcher.updateObject(17,Float.valueOf(itemAngle1));
  dataWatcher.updateObject(18,Float.valueOf(itemAngle2));
}","protected void updateDataServer(){
  dataWatcher.updateObject(12,Float.valueOf((float)laser.tail.xCoord));
  dataWatcher.updateObject(13,Float.valueOf((float)laser.tail.yCoord));
  dataWatcher.updateObject(14,Float.valueOf((float)laser.tail.zCoord));
  dataWatcher.updateObject(15,Byte.valueOf((byte)(laser.isVisible ? 1 : 0)));
  dataWatcher.updateObject(17,Float.valueOf(itemAngle1));
  dataWatcher.updateObject(18,Float.valueOf(itemAngle2));
}",0.982896237172178
156556,"@Override public List<BakedQuad> renderStaticPluggable(PipeRenderState render,PipePluggableState pluggableState,IPipe pipe,PipePluggable pluggable,EnumFacing face){
  return null;
}","@Override public List<BakedQuad> renderStaticPluggable(IPipeRenderState render,IPipePluggableState pluggableState,IPipe pipe,PipePluggable pluggable,EnumFacing face){
  return null;
}",0.9945054945054944
156557,"@Override public List<BakedQuad> renderStaticPluggable(PipeRenderState render,PipePluggableState pluggableState,IPipe pipe,PipePluggable pluggable,EnumFacing face){
  return null;
}","@Override public List<BakedQuad> renderStaticPluggable(IPipeRenderState render,IPipePluggableState pluggableState,IPipe pipe,PipePluggable pluggable,EnumFacing face){
  return null;
}",0.9945054945054944
156558,"@Override public List<BakedQuad> renderStaticPluggable(PipeRenderState render,PipePluggableState pluggableState,IPipe pipe,PipePluggable pluggable,EnumFacing face){
  return null;
}","@Override public List<BakedQuad> renderStaticPluggable(IPipeRenderState render,IPipePluggableState pluggableState,IPipe pipe,PipePluggable pluggable,EnumFacing face){
  return null;
}",0.9945054945054944
156559,"public boolean linkIsDocked(){
  if (isTaken()) {
    return robotTaking().getDockingStation() == this;
  }
 else {
    return false;
  }
}","public boolean linkIsDocked(){
  if (robotTaking() != null) {
    return robotTaking().getDockingStation() == this;
  }
 else {
    return false;
  }
}",0.9379310344827586
156560,"public TileEntity getTile(boolean forceUpdate){
  if (!Utils.CAULDRON_DETECTED && tile != null && !tile.isInvalid()) {
    return tile;
  }
  if (Utils.CAULDRON_DETECTED || (forceUpdate && tile != null && tile.isInvalid()) || tracker.markTimeIfDelay(world)) {
    refresh();
    if (tile != null && !tile.isInvalid()) {
      return tile;
    }
  }
  return null;
}","public TileEntity getTile(boolean forceUpdate){
  refresh();
  return tile;
}",0.3212669683257919
156561,"public void refresh(){
  tile=null;
  state=null;
  if (!loadUnloaded && world.isAirBlock(pos)) {
    return;
  }
  state=world.getBlockState(pos);
  if (state != null && state.getBlock().hasTileEntity(state)) {
    tile=world.getTileEntity(pos);
  }
}","public void refresh(){
  tile=null;
  state=null;
  state=world.getBlockState(pos);
  tile=world.getTileEntity(pos);
}",0.6378378378378379
156562,"public boolean exists(){
  if (tile != null && !Utils.CAULDRON_DETECTED && !tile.isInvalid()) {
    return true;
  }
  return !world.isAirBlock(pos);
}","public boolean exists(){
  return !world.isAirBlock(pos);
}",0.5619047619047619
156563,"private void tryRefresh(){
  if (Utils.CAULDRON_DETECTED || (tile != null && tile.isInvalid()) || (tile == null && tracker.markTimeIfDelay(world))) {
    refresh();
  }
}","private void tryRefresh(){
  refresh();
}",0.3886255924170616
156564,"@SideOnly(Side.CLIENT) @SubscribeEvent public void handleBlockHighlight(DrawBlockHighlightEvent e){
  if (e.target.typeOfHit == MovingObjectPosition.MovingObjectType.BLOCK) {
    int x=MathHelper.floor_double(e.target.hitVec.xCoord);
    int y=MathHelper.floor_double(e.target.hitVec.yCoord);
    int z=MathHelper.floor_double(e.target.hitVec.zCoord);
    BlockPos pos=new BlockPos(x,y,z);
    IBlockState state=e.player.worldObj.getBlockState(pos);
    Block block=state.getBlock();
    if (block instanceof ICustomHighlight) {
      AxisAlignedBB[] aabbs=((ICustomHighlight)block).getBoxes(e.player.worldObj,pos,state);
      Vec3 nPos=e.player.getPositionEyes(e.partialTicks).subtract(0,e.player.getEyeHeight(),0);
      long millis=System.currentTimeMillis();
      float expansion=(millis % 5000) / 2500F - 1;
      expansion*=Math.PI * 2;
      expansion=(MathHelper.sin(expansion) + 1) / 2;
      GL11.glEnable(GL11.GL_BLEND);
      OpenGlHelper.glBlendFunc(GL11.GL_SRC_ALPHA,GL11.GL_ONE_MINUS_SRC_ALPHA,GL11.GL_ONE,GL11.GL_ZERO);
      GL11.glColor4f(0.0F,0.0F,0.0F,0.4F);
      GL11.glLineWidth(2F);
      GL11.glDisable(GL11.GL_TEXTURE_2D);
      GL11.glDepthMask(false);
      double exp=((ICustomHighlight)block).getExpansion();
      exp+=expansion / 32D;
      nPos=nPos.subtract(x,y,z);
      for (      AxisAlignedBB aabb : aabbs) {
        AxisAlignedBB changed=aabb.expand(exp,exp,exp).offset(-nPos.xCoord,-nPos.yCoord,-nPos.zCoord);
        RenderGlobal.drawOutlinedBoundingBox(changed,-1);
      }
      GL11.glDepthMask(true);
      GL11.glEnable(GL11.GL_TEXTURE_2D);
      GL11.glDisable(GL11.GL_BLEND);
      e.setCanceled(true);
    }
  }
}","@SideOnly(Side.CLIENT) @SubscribeEvent public void handleBlockHighlight(DrawBlockHighlightEvent e){
  if (e.target.typeOfHit == MovingObjectPosition.MovingObjectType.BLOCK) {
    int x=MathHelper.floor_double(e.target.hitVec.xCoord);
    int y=MathHelper.floor_double(e.target.hitVec.yCoord);
    int z=MathHelper.floor_double(e.target.hitVec.zCoord);
    BlockPos pos=new BlockPos(x,y,z);
    IBlockState state=e.player.worldObj.getBlockState(pos);
    Block block=state.getBlock();
    if (block instanceof ICustomHighlight) {
      AxisAlignedBB[] aabbs=((ICustomHighlight)block).getBoxes(e.player.worldObj,pos,state);
      Vec3 nPos=e.player.getPositionEyes(e.partialTicks).subtract(0,e.player.getEyeHeight(),0);
      long millis=System.currentTimeMillis();
      float expansion=(millis % 5000) / 2500F - 1;
      expansion*=Math.PI * 2;
      expansion=(MathHelper.sin(expansion) + 1) / 2;
      expansion*=((ICustomHighlight)block).getBreathingCoefficent();
      GL11.glEnable(GL11.GL_BLEND);
      OpenGlHelper.glBlendFunc(GL11.GL_SRC_ALPHA,GL11.GL_ONE_MINUS_SRC_ALPHA,GL11.GL_ONE,GL11.GL_ZERO);
      GL11.glColor4f(0.0F,0.0F,0.0F,0.4F);
      GL11.glLineWidth(2F);
      GL11.glDisable(GL11.GL_TEXTURE_2D);
      GL11.glDepthMask(false);
      double exp=((ICustomHighlight)block).getExpansion();
      exp+=expansion / 32D;
      nPos=nPos.subtract(x,y,z);
      for (      AxisAlignedBB aabb : aabbs) {
        AxisAlignedBB changed=aabb.expand(exp,exp,exp).offset(-nPos.xCoord,-nPos.yCoord,-nPos.zCoord);
        RenderGlobal.drawOutlinedBoundingBox(changed,-1);
      }
      GL11.glDepthMask(true);
      GL11.glEnable(GL11.GL_TEXTURE_2D);
      GL11.glDisable(GL11.GL_BLEND);
      e.setCanceled(true);
    }
  }
}",0.9796879599646748
156565,"/** 
 * UniqueTag accepts multiple possible tags, use this feature to migrate to more standardized tags if needed, otherwise just pass a single string. The first passed string will be the one used when saved to disk. The ResourceLocation is the location of the icon to be displayed for this statement
 * @param uniqueTag 
 */
protected BCStatement(ResourceLocation loc,String... uniqueTag){
  this.uniqueTag=uniqueTag[0];
  for (  String tag : uniqueTag) {
    StatementManager.statements.put(tag,this);
  }
  location=loc;
  MinecraftForge.EVENT_BUS.register(this);
}","/** 
 * UniqueTag accepts multiple possible tags, use this feature to migrate to more standardized tags if needed, otherwise just pass a single string. The first passed string will be the one used when saved to disk.
 * @deprecated use the above one, and set the ResourceLocation seperately
 * @param uniqueTag 
 */
protected BCStatement(ResourceLocation loc,String... uniqueTag){
  this.uniqueTag=uniqueTag[0];
  for (  String tag : uniqueTag) {
    StatementManager.statements.put(tag,this);
  }
  location=loc;
  MinecraftForge.EVENT_BUS.register(this);
}",0.8969804618117229
156566,"protected void computeConnections(){
  TileBuffer[] cache=getTileCache();
  if (cache == null) {
    return;
  }
  for (  EnumFacing side : EnumFacing.VALUES) {
    TileBuffer t=cache[side.ordinal()];
    if (t.exists() || !initialized) {
      t.refresh();
      pipeConnectionsBuffer[side.ordinal()]=canPipeConnect(t.getTile(),side);
    }
  }
}","protected void computeConnections(){
  TileBuffer[] cache=getTileCache();
  if (cache == null) {
    return;
  }
  for (  EnumFacing side : EnumFacing.VALUES) {
    TileBuffer t=cache[side.ordinal()];
    pipeConnectionsBuffer[side.ordinal()]=canPipeConnect(worldObj.getTileEntity(pos.offset(side)),side);
  }
}",0.6474164133738601
156567,"public void writeToNBT(NBTTagCompound data){
  data.setDouble(""String_Node_Str"",xCoord);
  data.setDouble(""String_Node_Str"",yCoord);
  data.setDouble(""String_Node_Str"",zCoord);
  data.setFloat(""String_Node_Str"",getSpeed());
  NBTTagCompound itemStackTag=new NBTTagCompound();
  getItemStack().writeToNBT(itemStackTag);
  data.setTag(""String_Node_Str"",itemStackTag);
  data.setBoolean(""String_Node_Str"",toCenter);
  data.setByte(""String_Node_Str"",(byte)input.ordinal());
  data.setByte(""String_Node_Str"",(byte)output.ordinal());
  data.setByte(""String_Node_Str"",color != null ? (byte)color.ordinal() : -1);
  if (extraData != null) {
    data.setTag(""String_Node_Str"",extraData);
  }
}","public void writeToNBT(NBTTagCompound data){
  data.setDouble(""String_Node_Str"",pos.xCoord);
  data.setDouble(""String_Node_Str"",pos.yCoord);
  data.setDouble(""String_Node_Str"",pos.zCoord);
  data.setFloat(""String_Node_Str"",getSpeed());
  NBTTagCompound itemStackTag=new NBTTagCompound();
  getItemStack().writeToNBT(itemStackTag);
  data.setTag(""String_Node_Str"",itemStackTag);
  data.setBoolean(""String_Node_Str"",toCenter);
  data.setByte(""String_Node_Str"",(byte)input.ordinal());
  data.setByte(""String_Node_Str"",(byte)output.ordinal());
  data.setByte(""String_Node_Str"",color != null ? (byte)color.ordinal() : -1);
  if (extraData != null) {
    data.setTag(""String_Node_Str"",extraData);
  }
}",0.991304347826087
156568,"public EntityItem toEntityItem(){
  if (container != null && !container.getWorld().isRemote) {
    if (getItemStack().stackSize <= 0) {
      return null;
    }
    Vec3 motion=Utils.convert(output,0.1 + getSpeed() * 2D);
    EntityItem entity=new EntityItem(container.getWorld(),xCoord,yCoord,zCoord,getItemStack());
    entity.lifespan=BuildCraftCore.itemLifespan * 20;
    entity.setDefaultPickupDelay();
    float f3=0.00F + container.getWorld().rand.nextFloat() * 0.04F - 0.02F;
    entity.motionX=(float)container.getWorld().rand.nextGaussian() * f3 + motion.xCoord;
    entity.motionY=(float)container.getWorld().rand.nextGaussian() * f3 + motion.yCoord;
    entity.motionZ=(float)container.getWorld().rand.nextGaussian() * f3 + +motion.zCoord;
    return entity;
  }
  return null;
}","public EntityItem toEntityItem(){
  if (container != null && !container.getWorld().isRemote) {
    if (getItemStack().stackSize <= 0) {
      return null;
    }
    Vec3 motion=Utils.convert(output,0.1 + getSpeed() * 2D);
    EntityItem entity=new EntityItem(container.getWorld(),pos.xCoord,pos.yCoord,pos.zCoord,getItemStack());
    entity.lifespan=BuildCraftCore.itemLifespan * 20;
    entity.setDefaultPickupDelay();
    float f3=0.00F + container.getWorld().rand.nextFloat() * 0.04F - 0.02F;
    entity.motionX=(float)container.getWorld().rand.nextGaussian() * f3 + motion.xCoord;
    entity.motionY=(float)container.getWorld().rand.nextGaussian() * f3 + motion.yCoord;
    entity.motionZ=(float)container.getWorld().rand.nextGaussian() * f3 + +motion.zCoord;
    return entity;
  }
  return null;
}",0.9924717691342536
156569,"@Override public AxisAlignedBB[] getBoxes(IBlockAccess access,BlockPos pos,IBlockState state){
  List<AxisAlignedBB> bbs=Lists.newArrayList();
  float min=CoreConstants.PIPE_MIN_POS;
  float max=CoreConstants.PIPE_MAX_POS;
  AxisAlignedBB base=new AxisAlignedBB(min,min,min,max,max,max);
  bbs.add(base);
  TileEntity tile=access.getTileEntity(pos);
  if (tile instanceof TileGenericPipe) {
    TileGenericPipe pipe=(TileGenericPipe)tile;
    if (pipe.isPipeConnected(EnumFacing.WEST)) {
      bbs.add(new AxisAlignedBB(0,min,min,min,max,max));
    }
    if (pipe.isPipeConnected(EnumFacing.EAST)) {
      bbs.add(new AxisAlignedBB(max,min,min,1,max,max));
    }
    if (pipe.isPipeConnected(EnumFacing.NORTH)) {
      bbs.add(new AxisAlignedBB(min,min,0,max,max,min));
    }
    if (pipe.isPipeConnected(EnumFacing.SOUTH)) {
      bbs.add(new AxisAlignedBB(max,min,min,1,max,max));
    }
    if (pipe.isPipeConnected(EnumFacing.DOWN)) {
      bbs.add(new AxisAlignedBB(min,0,min,max,min,max));
    }
    if (pipe.isPipeConnected(EnumFacing.UP)) {
      bbs.add(new AxisAlignedBB(min,max,min,max,1,max));
    }
    float facadeThickness=TransportConstants.FACADE_THICKNESS;
    if (pipe.hasEnabledFacade(EnumFacing.WEST)) {
      bbs.add(new AxisAlignedBB(0,0,0,facadeThickness,1,1));
    }
    if (pipe.hasEnabledFacade(EnumFacing.EAST)) {
      bbs.add(new AxisAlignedBB(1 - facadeThickness,0,0,1,1,1));
    }
    if (pipe.hasEnabledFacade(EnumFacing.NORTH)) {
      bbs.add(new AxisAlignedBB(0,0,0,1,1,facadeThickness));
    }
    if (pipe.hasEnabledFacade(EnumFacing.SOUTH)) {
      bbs.add(new AxisAlignedBB(0,0,1 - facadeThickness,1,1,1));
    }
    if (pipe.hasEnabledFacade(EnumFacing.DOWN)) {
      bbs.add(new AxisAlignedBB(0,0,0,1,facadeThickness,1));
    }
    if (pipe.hasEnabledFacade(EnumFacing.UP)) {
      bbs.add(new AxisAlignedBB(0,1 - facadeThickness,0,1,1,1));
    }
    for (    EnumFacing face : EnumFacing.VALUES) {
      if (pipe.hasPipePluggable(face)) {
        bbs.add(pipe.getPipePluggable(EnumFacing.WEST).getBoundingBox(face));
      }
    }
  }
  return bbs.toArray(new AxisAlignedBB[bbs.size()]);
}","@Override public AxisAlignedBB[] getBoxes(IBlockAccess access,BlockPos pos,IBlockState state){
  List<AxisAlignedBB> bbs=Lists.newArrayList();
  float min=CoreConstants.PIPE_MIN_POS;
  float max=CoreConstants.PIPE_MAX_POS;
  AxisAlignedBB base=new AxisAlignedBB(min,min,min,max,max,max);
  bbs.add(base);
  TileEntity tile=access.getTileEntity(pos);
  if (tile instanceof TileGenericPipe) {
    TileGenericPipe pipe=(TileGenericPipe)tile;
    if (pipe.isPipeConnected(EnumFacing.WEST)) {
      bbs.add(new AxisAlignedBB(0,min,min,min,max,max));
    }
    if (pipe.isPipeConnected(EnumFacing.EAST)) {
      bbs.add(new AxisAlignedBB(max,min,min,1,max,max));
    }
    if (pipe.isPipeConnected(EnumFacing.NORTH)) {
      bbs.add(new AxisAlignedBB(min,min,0,max,max,min));
    }
    if (pipe.isPipeConnected(EnumFacing.SOUTH)) {
      bbs.add(new AxisAlignedBB(min,min,max,max,max,1));
    }
    if (pipe.isPipeConnected(EnumFacing.DOWN)) {
      bbs.add(new AxisAlignedBB(min,0,min,max,min,max));
    }
    if (pipe.isPipeConnected(EnumFacing.UP)) {
      bbs.add(new AxisAlignedBB(min,max,min,max,1,max));
    }
    float facadeThickness=TransportConstants.FACADE_THICKNESS;
    if (pipe.hasEnabledFacade(EnumFacing.WEST)) {
      bbs.add(new AxisAlignedBB(0,0,0,facadeThickness,1,1));
    }
    if (pipe.hasEnabledFacade(EnumFacing.EAST)) {
      bbs.add(new AxisAlignedBB(1 - facadeThickness,0,0,1,1,1));
    }
    if (pipe.hasEnabledFacade(EnumFacing.NORTH)) {
      bbs.add(new AxisAlignedBB(0,0,0,1,1,facadeThickness));
    }
    if (pipe.hasEnabledFacade(EnumFacing.SOUTH)) {
      bbs.add(new AxisAlignedBB(0,0,1 - facadeThickness,1,1,1));
    }
    if (pipe.hasEnabledFacade(EnumFacing.DOWN)) {
      bbs.add(new AxisAlignedBB(0,0,0,1,facadeThickness,1));
    }
    if (pipe.hasEnabledFacade(EnumFacing.UP)) {
      bbs.add(new AxisAlignedBB(0,1 - facadeThickness,0,1,1,1));
    }
    for (    EnumFacing face : EnumFacing.VALUES) {
      if (pipe.hasPipePluggable(face)) {
        bbs.add(pipe.getPipePluggable(EnumFacing.WEST).getBoundingBox(face));
      }
    }
  }
  return bbs.toArray(new AxisAlignedBB[bbs.size()]);
}",0.991553261379634
156570,"public BlockGenericPipe(){
  super(Material.glass,GENERIC_PIPE_DATA);
  setCreativeTab(null);
}","public BlockGenericPipe(){
  super(Material.glass,GENERIC_PIPE_DATA,CONNECTED_UP,CONNECTED_DOWN,CONNECTED_EAST,CONNECTED_WEST,CONNECTED_NORTH,CONNECTED_SOUTH);
  setCreativeTab(null);
  setLightOpacity(0);
}",0.6291390728476821
156571,"@Override public void readData(ByteBuf data){
  itemPos=new Vec3(data.readFloat(),data.readFloat(),data.readFloat());
  pos=Utils.convertFloor(itemPos);
  this.entityId=data.readShort();
  int flags=data.readUnsignedByte();
  this.input=EnumFacing.getFront((flags >> 3) & 7);
  this.output=EnumFacing.getFront(flags & 7);
  byte c=data.readByte();
  if (c != -1) {
    this.color=EnumColor.fromId(c);
  }
  this.speed=data.readFloat();
  this.forceStackRefresh=(flags & 0x40) > 0;
}","@Override public void readData(ByteBuf data){
  itemPos=new Vec3(data.readFloat(),data.readFloat(),data.readFloat());
  pos=Utils.convertFloor(itemPos);
  this.entityId=data.readShort();
  int flags=data.readUnsignedByte();
  int in=(flags >> 3) & 7;
  if (in == 6) {
    this.input=null;
  }
 else {
    this.input=EnumFacing.getFront(in);
  }
  int out=flags & 7;
  if (out == 6) {
    this.output=null;
  }
 else {
    this.output=EnumFacing.getFront(out);
  }
  byte c=data.readByte();
  if (c != -1) {
    this.color=EnumColor.fromId(c);
  }
  this.speed=data.readFloat();
  this.forceStackRefresh=(flags & 0x40) > 0;
}",0.7884267631103075
156572,"@Override public void writeData(ByteBuf data){
  data.writeFloat((float)item.pos.xCoord);
  data.writeFloat((float)item.pos.yCoord);
  data.writeFloat((float)item.pos.zCoord);
  data.writeShort(item.id);
  byte flags=(byte)((item.output.ordinal() & 7) | ((item.input.ordinal() & 7) << 3) | (forceStackRefresh ? 64 : 0));
  data.writeByte(flags);
  data.writeByte(item.color != null ? item.color.ordinal() : -1);
  data.writeFloat(item.getSpeed());
}","@Override public void writeData(ByteBuf data){
  data.writeFloat((float)item.pos.xCoord);
  data.writeFloat((float)item.pos.yCoord);
  data.writeFloat((float)item.pos.zCoord);
  data.writeShort(item.id);
  int out=item.output == null ? 6 : item.output.ordinal();
  int in=item.input == null ? 6 : item.input.ordinal();
  byte flags=(byte)((out & 7) | ((in & 7) << 3) | (forceStackRefresh ? 64 : 0));
  data.writeByte(flags);
  data.writeByte(item.color != null ? item.color.ordinal() : -1);
  data.writeFloat(item.getSpeed());
}",0.8372569089048106
156573,"public boolean linkIsDocked(){
  if (isTaken()) {
    return robotTaking().getDockingStation() == this;
  }
 else {
    return false;
  }
}","public boolean linkIsDocked(){
  if (robotTaking() != null) {
    return robotTaking().getDockingStation() == this;
  }
 else {
    return false;
  }
}",0.9379310344827586
156574,"@Override public void start(){
  if (robot.getDockingStation() != null && filter.matches(robot.getDockingStation())) {
    targetStation=robot.getDockingStation();
    terminate();
    return;
  }
  double potentialStationDistance=Float.MAX_VALUE;
  DockingStation potentialStation=null;
  for (  DockingStation station : robot.getRegistry().getStations()) {
    if (station.isTaken() && station.robotIdTaking() != robot.getRobotId()) {
      continue;
    }
    if (zone != null && !zone.contains(station.x(),station.y(),station.z())) {
      continue;
    }
    if (filter.matches(station)) {
      if (ActionStationForbidRobot.isForbidden(station,robot)) {
        continue;
      }
      double dx=robot.posX - station.x();
      double dy=robot.posY - station.y();
      double dz=robot.posZ - station.z();
      double distance=dx * dx + dy * dy + dz * dz;
      if (potentialStation == null || distance < potentialStationDistance) {
        potentialStation=station;
        potentialStationDistance=distance;
      }
    }
  }
  if (potentialStation != null) {
    targetStation=potentialStation;
  }
  terminate();
}","@Override public void start(){
  if (robot.getDockingStation() != null && filter.matches(robot.getDockingStation())) {
    targetStation=robot.getDockingStation();
    terminate();
    return;
  }
  double potentialStationDistance=Float.MAX_VALUE;
  DockingStation potentialStation=null;
  for (  DockingStation station : robot.getRegistry().getStations()) {
    if (!station.isInitialized()) {
      continue;
    }
    if (station.isTaken() && station.robotIdTaking() != robot.getRobotId()) {
      continue;
    }
    if (zone != null && !zone.contains(station.x(),station.y(),station.z())) {
      continue;
    }
    if (filter.matches(station)) {
      if (ActionStationForbidRobot.isForbidden(station,robot)) {
        continue;
      }
      double dx=robot.posX - station.x();
      double dy=robot.posY - station.y();
      double dz=robot.posZ - station.z();
      double distance=dx * dx + dy * dy + dz * dz;
      if (potentialStation == null || distance < potentialStationDistance) {
        potentialStation=station;
        potentialStationDistance=distance;
      }
    }
  }
  if (potentialStation != null) {
    targetStation=potentialStation;
  }
  terminate();
}",0.9748700173310224
156575,"@Override public void getDebugInfo(List<String> left,List<String> right,EnumFacing side){
  left.add(""String_Node_Str"");
  left.add(""String_Node_Str"" + maxPower + ""String_Node_Str"");
  left.add(""String_Node_Str"" + Arrays.toString(internalPower) + ""String_Node_Str""+ Arrays.toString(internalNextPower));
  left.add(""String_Node_Str"" + Arrays.toString(powerQuery) + ""String_Node_Str""+ Arrays.toString(nextPowerQuery));
  left.add(""String_Node_Str"" + Arrays.toString(dbgEnergyInput) + ""String_Node_Str""+ Arrays.toString(dbgEnergyOutput));
  left.add(""String_Node_Str"" + Arrays.toString(dbgEnergyOffered));
  int[] totalPowerQuery=new int[6];
  for (int i=0; i < 6; ++i) {
    if (internalPower[i] > 0) {
      for (int j=0; j < 6; ++j) {
        if (j != i && powerQuery[j] > 0) {
          Object ep=providers[j];
          if (ep instanceof IPipeTile || ep instanceof IEnergyReceiver || ep instanceof IEnergyHandler) {
            totalPowerQuery[i]+=powerQuery[j];
          }
        }
      }
    }
  }
  left.add(""String_Node_Str"" + Arrays.toString(totalPowerQuery));
}","@Override public void getDebugInfo(List<String> left,List<String> right,EnumFacing side){
  left.add(""String_Node_Str"");
  left.add(""String_Node_Str"" + maxPower + ""String_Node_Str"");
  for (  EnumFacing face : EnumFacing.VALUES) {
    int ord=face.ordinal();
    left.add(""String_Node_Str"" + face.getName2() + ""String_Node_Str""+ displayPower[ord]+ ""String_Node_Str"");
  }
}",0.2782006920415225
156576,"@SuppressWarnings(""String_Node_Str"") @Override public void renderTileEntityAt(TileEntity tileentity,double x,double y,double z,float f,int argumentthatisalwaysminusone){
  if (BuildCraftCore.render == RenderMode.NoDynamic) {
    return;
  }
  TileGenericPipe pipe=(TileGenericPipe)tileentity;
  if (pipe.pipe == null) {
    return;
  }
  renderGatesWires(pipe,x,y,z);
  renderPluggables(pipe,x,y,z);
  IPipeTile.PipeType pipeType=pipe.getPipeType();
  if (pipeType == IPipeTile.PipeType.ITEM) {
    renderSolids((Pipe<PipeTransportItems>)pipe.pipe,x,y,z,f);
  }
 else   if (pipeType == IPipeTile.PipeType.FLUID) {
    renderFluids((Pipe<PipeTransportFluids>)pipe.pipe,x,y,z);
  }
 else   if (pipeType == IPipeTile.PipeType.POWER) {
    renderPower((Pipe<PipeTransportPower>)pipe.pipe,x,y,z);
  }
}","@SuppressWarnings(""String_Node_Str"") @Override public void renderTileEntityAt(TileEntity tileentity,double x,double y,double z,float f,int argumentthatisalwaysminusone){
  if (BuildCraftCore.render == RenderMode.NoDynamic) {
    return;
  }
  TileGenericPipe pipe=(TileGenericPipe)tileentity;
  if (pipe.pipe == null) {
    return;
  }
  renderGatesWires(pipe,x,y,z);
  renderPluggables(pipe,x,y,z);
  IPipeTile.PipeType pipeType=pipe.getPipeType();
  if (pipeType == IPipeTile.PipeType.ITEM) {
    renderSolids((Pipe<PipeTransportItems>)pipe.pipe,x,y,z,f);
  }
 else   if (pipeType == IPipeTile.PipeType.FLUID) {
  }
 else   if (pipeType == IPipeTile.PipeType.POWER) {
  }
}",0.9171195652173914
156577,"@Override public boolean onItemUse(ItemStack stack,EntityPlayer player,World world,BlockPos pos,EnumFacing side,float hitX,float hitY,float hitZ){
  TileEntity tile=world.getTileEntity(pos);
  if (tile instanceof IDebuggable) {
    ArrayList<String> info=new ArrayList<String>();
    String effSide=FMLCommonHandler.instance().getEffectiveSide().name().substring(0,1) + ""String_Node_Str"";
    ((IDebuggable)tile).getDebugInfo(info);
    for (    String s : info) {
      player.addChatComponentMessage(new ChatComponentText(effSide + s));
    }
    return true;
  }
  return false;
}","@Override public boolean onItemUse(ItemStack stack,EntityPlayer player,World world,BlockPos pos,EnumFacing side,float hitX,float hitY,float hitZ){
  return false;
}",0.4390896921017403
156578,"@Override public void update(){
  if (!init && !isInvalid()) {
    initialize();
    init=true;
  }
  if (battery != null) {
    receivedTick=0;
    extractedTick=0;
    if (!worldObj.isRemote) {
      int prePower=ledPower;
      int stored=battery.getEnergyStored();
      int max=battery.getMaxEnergyStored();
      ledPower=0;
      if (stored != 0) {
        ledPower=stored * 2 / max + 1;
      }
      if (prePower != ledPower) {
        sendNetworkUpdate();
      }
    }
  }
}","@Override public void update(){
  if (init != 2 && !isInvalid()) {
    if (init < 2) {
      init++;
      return;
    }
    initialize();
    init=2;
  }
  if (battery != null) {
    receivedTick=0;
    extractedTick=0;
    if (!worldObj.isRemote) {
      int prePower=ledPower;
      int stored=battery.getEnergyStored();
      int max=battery.getMaxEnergyStored();
      ledPower=0;
      if (stored != 0) {
        ledPower=stored * 2 / max + 1;
      }
      if (prePower != ledPower) {
        sendNetworkUpdate();
      }
    }
  }
}",0.9307317073170732
156579,"@Override public void invalidate(){
  init=false;
  super.invalidate();
  cache=null;
}","@Override public void invalidate(){
  init=0;
  super.invalidate();
  cache=null;
}",0.9647058823529412
156580,"public static int[] getFluidDisplayLists(FluidStack fluidStack,boolean flowing,Vec3 size){
  if (fluidStack == null) {
    return null;
  }
  Fluid fluid=fluidStack.getFluid();
  if (fluid == null) {
    return null;
  }
  Map<Fluid,Map<Vec3,int[]>> cache=flowing ? flowingRenderCache : stillRenderCache;
  Map<Vec3,int[]> displayLists=cache.get(fluid);
  int[] displayList;
  if (displayLists != null) {
    displayList=displayLists.get(size);
    if (displayList != null) {
      return displayList;
    }
  }
 else {
    displayLists=Maps.newHashMap();
    cache.put(fluid,displayLists);
  }
  displayList=new int[DISPLAY_STAGES];
  cache.put(fluid,displayLists);
  GlStateManager.disableLighting();
  GlStateManager.disableBlend();
  GlStateManager.disableCull();
  for (int s=0; s < DISPLAY_STAGES; ++s) {
    displayList[s]=GLAllocation.generateDisplayLists(1);
    GL11.glNewList(displayList[s],GL11.GL_COMPILE);
    EntityResizableCuboid ent=new EntityResizableCuboid(null);
    ent.iSize=size.xCoord;
    ent.jSize=(Math.max(s,1) / (float)DISPLAY_STAGES) * size.yCoord;
    ent.kSize=size.zCoord;
    ent.texture=getFluidTexture(fluidStack,flowing);
    GL11.glTranslated(0.01,0.01,0.01);
    RenderResizableCuboid.INSTANCE.renderCube(ent);
    GL11.glTranslated(-0.01,-0.01,-0.01);
    GL11.glEndList();
  }
  GlStateManager.color(1,1,1,1);
  GlStateManager.enableLighting();
  GlStateManager.enableBlend();
  GlStateManager.enableCull();
  displayLists.put(size,displayList);
  return displayList;
}","public static int[] getFluidDisplayLists(FluidStack fluidStack,boolean flowing,Vec3 size){
  if (fluidStack == null) {
    return null;
  }
  Fluid fluid=fluidStack.getFluid();
  if (fluid == null) {
    return null;
  }
  Map<Fluid,Map<Vec3,int[]>> cache=flowing ? flowingRenderCache : stillRenderCache;
  Map<Vec3,int[]> displayLists=cache.get(fluid);
  int[] displayList;
  if (displayLists != null) {
    displayList=displayLists.get(size);
    if (displayList != null) {
      return displayList;
    }
  }
 else {
    displayLists=Maps.newHashMap();
    cache.put(fluid,displayLists);
  }
  displayList=new int[DISPLAY_STAGES];
  cache.put(fluid,displayLists);
  GlStateManager.disableLighting();
  GlStateManager.disableBlend();
  GlStateManager.disableCull();
  for (int s=0; s < DISPLAY_STAGES; ++s) {
    displayList[s]=GLAllocation.generateDisplayLists(1);
    GL11.glNewList(displayList[s],GL11.GL_COMPILE);
    EntityResizableCuboid ent=new EntityResizableCuboid(null);
    ent.iSize=size.xCoord;
    ent.jSize=(Math.max(s,1) / (float)DISPLAY_STAGES) * size.yCoord;
    ent.kSize=size.zCoord;
    ent.texture=getFluidTexture(fluidStack,flowing);
    RenderResizableCuboid.INSTANCE.renderCube(ent);
    GL11.glEndList();
  }
  GlStateManager.color(1,1,1,1);
  GlStateManager.enableLighting();
  GlStateManager.enableBlend();
  GlStateManager.enableCull();
  displayLists.put(size,displayList);
  return displayList;
}",0.9724396053079278
156581,"private void render(TileRefinery tile,double x,double y,double z){
  FluidStack liquid1=null, liquid2=null, liquidResult=null;
  int color1=0xFFFFFF, color2=0xFFFFFF, colorResult=0xFFFFFF;
  float anim=0;
  int angle=0;
  ModelRenderer theMagnet=magnet[0];
  if (tile != null) {
    if (tile.tanks[0].getFluid() != null) {
      liquid1=tile.tanks[0].getFluid();
      color1=tile.tanks[0].colorRenderCache;
    }
    if (tile.tanks[1].getFluid() != null) {
      liquid2=tile.tanks[1].getFluid();
      color2=tile.tanks[1].colorRenderCache;
    }
    if (tile.result.getFluid() != null) {
      liquidResult=tile.result.getFluid();
      colorResult=tile.result.colorRenderCache;
    }
    anim=tile.getAnimationStage();
    IBlockState state=tile.getWorld().getBlockState(tile.getPos());
    EnumFacing face=BuildCraftProperties.BLOCK_FACING.getValue(state);
    while (face != EnumFacing.EAST) {
      face=face.rotateY();
      angle+=90;
    }
    if (tile.animationSpeed <= 1) {
      theMagnet=magnet[0];
    }
 else     if (tile.animationSpeed <= 2.5) {
      theMagnet=magnet[1];
    }
 else     if (tile.animationSpeed <= 4.5) {
      theMagnet=magnet[2];
    }
 else {
      theMagnet=magnet[3];
    }
  }
  GL11.glPushMatrix();
  GL11.glPushAttrib(GL11.GL_ENABLE_BIT);
  GlStateManager.enableLighting();
  GlStateManager.disableCull();
  GlStateManager.enableAlpha();
  GL11.glTranslatef((float)x + 0.5F,(float)y + 0.5F,(float)z + 0.5F);
  GL11.glScalef(0.99F,0.99F,0.99F);
  GL11.glRotatef(angle,0,1,0);
  bindTexture(TEXTURE);
  GL11.glPushMatrix();
  GL11.glTranslatef(-0.5F,-0.5F,-0.5F);
  GL11.glTranslatef(-4F * pixel,0,-4F * pixel);
  tank.render(pixel);
  GL11.glTranslatef(4F * pixel,0,4F * pixel);
  GL11.glTranslatef(-4F * pixel,0,4F * pixel);
  tank.render(pixel);
  GL11.glTranslatef(4F * pixel,0,-4F * pixel);
  GL11.glTranslatef(4F * pixel,0,0);
  tank.render(pixel);
  GL11.glTranslatef(-4F * pixel,0,0);
  GL11.glPopMatrix();
  float trans1, trans2;
  if (anim <= 100) {
    trans1=12F * pixel * anim / 100F;
    trans2=0;
  }
 else   if (anim <= 200) {
    trans1=12F * pixel - (12F * pixel * (anim - 100F) / 100F);
    trans2=12F * pixel * (anim - 100F) / 100F;
  }
 else {
    trans1=12F * pixel * (anim - 200F) / 100F;
    trans2=12F * pixel - (12F * pixel * (anim - 200F) / 100F);
  }
  GL11.glPushMatrix();
  GL11.glScalef(0.99F,0.99F,0.99F);
  GL11.glTranslatef(-0.51F,trans1 - 0.5F,-0.5F);
  theMagnet.render(pixel);
  GL11.glPopMatrix();
  GL11.glPushMatrix();
  GL11.glScalef(0.99F,0.99F,0.99F);
  GL11.glTranslatef(-0.51F,trans2 - 0.5F,12F * pixel - 0.5F);
  theMagnet.render(pixel);
  GL11.glPopMatrix();
  if (tile != null) {
    GL11.glPushAttrib(GL11.GL_ENABLE_BIT);
    GlStateManager.enableCull();
    GlStateManager.disableLighting();
    GlStateManager.enableBlend();
    GlStateManager.blendFunc(GL11.GL_SRC_ALPHA,GL11.GL_ONE_MINUS_SRC_ALPHA);
    GL11.glTranslatef(-0.5F,-0.5F,-0.5F);
    GL11.glScalef(0.5F,1,0.5F);
    if (liquid1 != null && liquid1.amount > 0) {
      int[] list1=FluidRenderer.getFluidDisplayLists(liquid1,false);
      if (list1 != null) {
        bindTexture(TextureMap.locationBlocksTexture);
        RenderUtils.setGLColorFromInt(color1);
        GL11.glCallList(list1[getDisplayListIndex(tile.tanks[0])]);
      }
    }
    if (liquid2 != null && liquid2.amount > 0) {
      int[] list2=FluidRenderer.getFluidDisplayLists(liquid2,false);
      if (list2 != null) {
        GL11.glPushMatrix();
        GL11.glTranslatef(0,0,1);
        bindTexture(TextureMap.locationBlocksTexture);
        RenderUtils.setGLColorFromInt(color2);
        GL11.glCallList(list2[getDisplayListIndex(tile.tanks[1])]);
        GL11.glPopMatrix();
      }
    }
    if (liquidResult != null && liquidResult.amount > 0) {
      int[] list3=FluidRenderer.getFluidDisplayLists(liquidResult,false);
      if (list3 != null) {
        GL11.glPushMatrix();
        GL11.glTranslatef(1,0,0.5F);
        bindTexture(TextureMap.locationBlocksTexture);
        RenderUtils.setGLColorFromInt(colorResult);
        GL11.glCallList(list3[getDisplayListIndex(tile.result)]);
        GL11.glPopMatrix();
      }
    }
    GL11.glPopAttrib();
  }
  GL11.glPopAttrib();
  GL11.glPopMatrix();
  GlStateManager.enableLighting();
  GlStateManager.disableCull();
  GlStateManager.disableAlpha();
}","private void render(TileRefinery tile,double x,double y,double z){
  FluidStack liquid1=null, liquid2=null, liquidResult=null;
  int color1=0xFFFFFF, color2=0xFFFFFF, colorResult=0xFFFFFF;
  float anim=0;
  int angle=0;
  ModelRenderer theMagnet=magnet[0];
  if (tile != null) {
    if (tile.tanks[0].getFluid() != null) {
      liquid1=tile.tanks[0].getFluid();
      color1=tile.tanks[0].colorRenderCache;
    }
    if (tile.tanks[1].getFluid() != null) {
      liquid2=tile.tanks[1].getFluid();
      color2=tile.tanks[1].colorRenderCache;
    }
    if (tile.result.getFluid() != null) {
      liquidResult=tile.result.getFluid();
      colorResult=tile.result.colorRenderCache;
    }
    anim=tile.getAnimationStage();
    IBlockState state=tile.getWorld().getBlockState(tile.getPos());
    EnumFacing face=BuildCraftProperties.BLOCK_FACING.getValue(state);
    while (face != EnumFacing.EAST) {
      face=face.rotateY();
      angle+=90;
    }
    if (tile.animationSpeed <= 1) {
      theMagnet=magnet[0];
    }
 else     if (tile.animationSpeed <= 2.5) {
      theMagnet=magnet[1];
    }
 else     if (tile.animationSpeed <= 4.5) {
      theMagnet=magnet[2];
    }
 else {
      theMagnet=magnet[3];
    }
  }
  GL11.glPushMatrix();
  GL11.glPushAttrib(GL11.GL_ENABLE_BIT);
  GlStateManager.enableLighting();
  GlStateManager.disableCull();
  GlStateManager.enableAlpha();
  GL11.glTranslatef((float)x + 0.5F,(float)y + 0.5F,(float)z + 0.5F);
  GL11.glScalef(0.99F,0.99F,0.99F);
  GL11.glRotatef(angle,0,1,0);
  bindTexture(TEXTURE);
  GL11.glPushMatrix();
  GL11.glTranslatef(-0.5F,-0.5F,-0.5F);
  GL11.glTranslatef(-4F * pixel,0,-4F * pixel);
  tank.render(pixel);
  GL11.glTranslatef(4F * pixel,0,4F * pixel);
  GL11.glTranslatef(-4F * pixel,0,4F * pixel);
  tank.render(pixel);
  GL11.glTranslatef(4F * pixel,0,-4F * pixel);
  GL11.glTranslatef(4F * pixel,0,0);
  tank.render(pixel);
  GL11.glTranslatef(-4F * pixel,0,0);
  GL11.glPopMatrix();
  float trans1, trans2;
  if (anim <= 100) {
    trans1=12F * pixel * anim / 100F;
    trans2=0;
  }
 else   if (anim <= 200) {
    trans1=12F * pixel - (12F * pixel * (anim - 100F) / 100F);
    trans2=12F * pixel * (anim - 100F) / 100F;
  }
 else {
    trans1=12F * pixel * (anim - 200F) / 100F;
    trans2=12F * pixel - (12F * pixel * (anim - 200F) / 100F);
  }
  GL11.glPushMatrix();
  GL11.glScalef(0.99F,0.99F,0.99F);
  GL11.glTranslatef(-0.51F,trans1 - 0.5F,-0.5F);
  theMagnet.render(pixel);
  GL11.glPopMatrix();
  GL11.glPushMatrix();
  GL11.glScalef(0.99F,0.99F,0.99F);
  GL11.glTranslatef(-0.51F,trans2 - 0.5F,12F * pixel - 0.5F);
  theMagnet.render(pixel);
  GL11.glPopMatrix();
  if (tile != null) {
    GL11.glPushAttrib(GL11.GL_ENABLE_BIT);
    GlStateManager.enableCull();
    GlStateManager.disableLighting();
    GlStateManager.enableBlend();
    GlStateManager.blendFunc(GL11.GL_SRC_ALPHA,GL11.GL_ONE_MINUS_SRC_ALPHA);
    if (liquid1 != null && liquid1.amount > 0) {
      int[] list1=FluidRenderer.getFluidDisplayLists(liquid1,false,TANK_SIZE);
      if (list1 != null) {
        bindTexture(TextureMap.locationBlocksTexture);
        RenderUtils.setGLColorFromInt(color1);
        GL11.glPushMatrix();
        GL11.glTranslatef(-0.25f,0,-0.25f);
        GL11.glScalef(0.99f,0.99f,0.99f);
        GL11.glTranslatef(-0.25f,-0.5f,-0.25f);
        GL11.glCallList(list1[getDisplayListIndex(tile.tanks[0])]);
        GL11.glPopMatrix();
      }
    }
    if (liquid2 != null && liquid2.amount > 0) {
      int[] list2=FluidRenderer.getFluidDisplayLists(liquid2,false,TANK_SIZE);
      if (list2 != null) {
        GL11.glPushMatrix();
        GL11.glTranslatef(-0.25f,0,0.25f);
        GL11.glScalef(0.99f,0.99f,0.99f);
        GL11.glTranslatef(-0.25f,-0.5f,-0.25f);
        bindTexture(TextureMap.locationBlocksTexture);
        RenderUtils.setGLColorFromInt(color2);
        GL11.glCallList(list2[getDisplayListIndex(tile.tanks[1])]);
        GL11.glPopMatrix();
      }
    }
    if (liquidResult != null && liquidResult.amount > 0) {
      int[] list3=FluidRenderer.getFluidDisplayLists(liquidResult,false,TANK_SIZE);
      if (list3 != null) {
        GL11.glPushMatrix();
        GL11.glTranslatef(0.25f,0,0);
        GL11.glScalef(0.99f,0.99f,0.99f);
        GL11.glTranslatef(-0.25f,-0.5f,-0.25f);
        bindTexture(TextureMap.locationBlocksTexture);
        RenderUtils.setGLColorFromInt(colorResult);
        GL11.glCallList(list3[getDisplayListIndex(tile.result)]);
        GL11.glPopMatrix();
      }
    }
    GL11.glPopAttrib();
  }
  GL11.glPopAttrib();
  GL11.glPopMatrix();
  GlStateManager.enableLighting();
  GlStateManager.disableCull();
  GlStateManager.disableAlpha();
}",0.845649516612957
156582,"@Override public void renderTileEntityAt(TileEntity tileentity,double x,double y,double z,float f,int minusOne){
  TileTank tank=(TileTank)tileentity;
  FluidStack liquid=tank.tank.getFluid();
  int color=tank.tank.colorRenderCache;
  if (liquid == null || liquid.amount <= 0) {
    return;
  }
  int[] displayList=FluidRenderer.getFluidDisplayLists(liquid,false,TANK_SIZE);
  if (displayList == null) {
    return;
  }
  GL11.glPushMatrix();
  GL11.glPushAttrib(GL11.GL_ENABLE_BIT);
  GL11.glEnable(GL11.GL_CULL_FACE);
  GL11.glDisable(GL11.GL_LIGHTING);
  GL11.glEnable(GL11.GL_BLEND);
  GL11.glBlendFunc(GL11.GL_SRC_ALPHA,GL11.GL_ONE_MINUS_SRC_ALPHA);
  bindTexture(TextureMap.locationBlocksTexture);
  RenderUtils.setGLColorFromInt(color);
  GL11.glTranslatef((float)x + 0.5F,(float)y + 0.5F,(float)z + 0.5F);
  GL11.glScalef(0.999F,0.999F,0.999F);
  GL11.glTranslatef(-0.25F,-0.5F,-0.25F);
  GL11.glCallList(displayList[(int)((float)liquid.amount / (float)(tank.tank.getCapacity()) * (FluidRenderer.DISPLAY_STAGES - 1))]);
  GL11.glPopAttrib();
  GL11.glPopMatrix();
}","@Override public void renderTileEntityAt(TileEntity tileentity,double x,double y,double z,float f,int minusOne){
  TileTank tank=(TileTank)tileentity;
  FluidStack liquid=tank.tank.getFluid();
  int color=tank.tank.colorRenderCache;
  if (liquid == null || liquid.amount <= 0) {
    return;
  }
  int[] displayList=FluidRenderer.getFluidDisplayLists(liquid,false,TANK_SIZE);
  if (displayList == null) {
    return;
  }
  GL11.glPushMatrix();
  GL11.glPushAttrib(GL11.GL_ENABLE_BIT);
  GL11.glEnable(GL11.GL_CULL_FACE);
  GL11.glDisable(GL11.GL_LIGHTING);
  GL11.glEnable(GL11.GL_BLEND);
  GL11.glBlendFunc(GL11.GL_SRC_ALPHA,GL11.GL_ONE_MINUS_SRC_ALPHA);
  bindTexture(TextureMap.locationBlocksTexture);
  RenderUtils.setGLColorFromInt(color);
  GL11.glTranslatef((float)x + 0.5F,(float)y + 0.5F,(float)z + 0.5F);
  GL11.glScalef(0.999F,0.999F,0.999F);
  GL11.glTranslatef(-0.375F,-0.5F,-0.375F);
  GL11.glCallList(displayList[(int)((float)liquid.amount / (float)(tank.tank.getCapacity()) * (FluidRenderer.DISPLAY_STAGES - 1))]);
  GL11.glPopAttrib();
  GL11.glPopMatrix();
}",0.9972067039106144
156583,"@Override public void getDebugInfo(List<String> left,List<String> right,EnumFacing side){
  left.add(""String_Node_Str"");
  left.add(""String_Node_Str"");
  left.add(""String_Node_Str"" + tanks[0].getFluidAmount() + ""String_Node_Str""+ tanks[0].getCapacity()+ ""String_Node_Str"");
  left.add(""String_Node_Str"" + (tanks[0].getFluid() == null ? ""String_Node_Str"" : tanks[0].getFluidType().getLocalizedName(tanks[0].getFluid())));
  left.add(""String_Node_Str"");
  left.add(""String_Node_Str"" + tanks[1].getFluidAmount() + ""String_Node_Str""+ tanks[1].getCapacity()+ ""String_Node_Str"");
  left.add(""String_Node_Str"" + (tanks[1].getFluid() == null ? ""String_Node_Str"" : tanks[0].getFluidType().getLocalizedName(tanks[1].getFluid())));
  left.add(""String_Node_Str"");
  left.add(""String_Node_Str"" + result.getFluidAmount() + ""String_Node_Str""+ result.getCapacity()+ ""String_Node_Str"");
  left.add(""String_Node_Str"" + (result.getFluid() == null ? ""String_Node_Str"" : result.getFluidType().getLocalizedName(result.getFluid())));
}","@Override public void getDebugInfo(List<String> left,List<String> right,EnumFacing side){
  left.add(""String_Node_Str"");
  left.add(""String_Node_Str"");
  left.add(""String_Node_Str"" + tanks[0].getFluidAmount() + ""String_Node_Str""+ tanks[0].getCapacity()+ ""String_Node_Str"");
  left.add(""String_Node_Str"" + (tanks[0].getFluid() == null ? ""String_Node_Str"" : tanks[0].getFluidType().getLocalizedName(tanks[0].getFluid())));
  left.add(""String_Node_Str"");
  left.add(""String_Node_Str"" + tanks[1].getFluidAmount() + ""String_Node_Str""+ tanks[1].getCapacity()+ ""String_Node_Str"");
  left.add(""String_Node_Str"" + (tanks[1].getFluid() == null ? ""String_Node_Str"" : tanks[1].getFluidType().getLocalizedName(tanks[1].getFluid())));
  left.add(""String_Node_Str"");
  left.add(""String_Node_Str"" + result.getFluidAmount() + ""String_Node_Str""+ result.getCapacity()+ ""String_Node_Str"");
  left.add(""String_Node_Str"" + (result.getFluid() == null ? ""String_Node_Str"" : result.getFluidType().getLocalizedName(result.getFluid())));
}",0.99901185770751
156584,"@SubscribeEvent @SideOnly(Side.CLIENT) public void renderOverlay(RenderGameOverlayEvent.Text event){
  if (Minecraft.getMinecraft().thePlayer.hasReducedDebug() || Minecraft.getMinecraft().gameSettings.reducedDebugInfo) {
    return;
  }
  MovingObjectPosition object=Minecraft.getMinecraft().objectMouseOver;
  MovingObjectType type=object.typeOfHit;
  if (type == MovingObjectType.BLOCK && object.getBlockPos() != null) {
    BlockPos pos=object.getBlockPos();
    TileEntity tile=Minecraft.getMinecraft().theWorld.getTileEntity(pos);
    if (tile instanceof IDebuggable && tile != null) {
      ((IDebuggable)tile).getDebugInfo(event.left,event.right,object.sideHit);
    }
  }
 else   if (type == MovingObjectType.ENTITY) {
  }
}","@SubscribeEvent @SideOnly(Side.CLIENT) public void renderOverlay(RenderGameOverlayEvent.Text event){
  Minecraft mc=Minecraft.getMinecraft();
  if (!mc.gameSettings.showDebugInfo)   return;
  if (mc.thePlayer.hasReducedDebug() || mc.gameSettings.reducedDebugInfo) {
    return;
  }
  MovingObjectPosition object=mc.objectMouseOver;
  MovingObjectType type=object.typeOfHit;
  if (type == MovingObjectType.BLOCK && object.getBlockPos() != null) {
    BlockPos pos=object.getBlockPos();
    TileEntity tile=mc.theWorld.getTileEntity(pos);
    if (tile instanceof IDebuggable && tile != null) {
      ((IDebuggable)tile).getDebugInfo(event.left,event.right,object.sideHit);
    }
  }
 else   if (type == MovingObjectType.ENTITY) {
  }
}",0.816382252559727
156585,"@Override public void getDebugInfo(List<String> left,List<String> right,EnumFacing side){
  left.add(""String_Node_Str"");
  left.add(""String_Node_Str"");
  left.add(""String_Node_Str"" + tanks[0].getFluidAmount() + ""String_Node_Str""+ tanks[0].getCapacity()+ ""String_Node_Str"");
  left.add(""String_Node_Str"" + tanks[0].getFluid() == null ? ""String_Node_Str"" : tanks[0].getFluidType().getLocalizedName(tanks[0].getFluid()));
  left.add(""String_Node_Str"");
  left.add(""String_Node_Str"" + tanks[1].getFluidAmount() + ""String_Node_Str""+ tanks[1].getCapacity()+ ""String_Node_Str"");
  left.add(""String_Node_Str"" + tanks[1].getFluid() == null ? ""String_Node_Str"" : tanks[0].getFluidType().getLocalizedName(tanks[1].getFluid()));
  left.add(""String_Node_Str"");
  left.add(""String_Node_Str"" + result.getFluidAmount() + ""String_Node_Str""+ result.getCapacity()+ ""String_Node_Str"");
  left.add(""String_Node_Str"" + result.getFluid() == null ? ""String_Node_Str"" : result.getFluidType().getLocalizedName(result.getFluid()));
}","@Override public void getDebugInfo(List<String> left,List<String> right,EnumFacing side){
  left.add(""String_Node_Str"");
  left.add(""String_Node_Str"");
  left.add(""String_Node_Str"" + tanks[0].getFluidAmount() + ""String_Node_Str""+ tanks[0].getCapacity()+ ""String_Node_Str"");
  left.add(""String_Node_Str"" + (tanks[0].getFluid() == null ? ""String_Node_Str"" : tanks[0].getFluidType().getLocalizedName(tanks[0].getFluid())));
  left.add(""String_Node_Str"");
  left.add(""String_Node_Str"" + tanks[1].getFluidAmount() + ""String_Node_Str""+ tanks[1].getCapacity()+ ""String_Node_Str"");
  left.add(""String_Node_Str"" + (tanks[1].getFluid() == null ? ""String_Node_Str"" : tanks[0].getFluidType().getLocalizedName(tanks[1].getFluid())));
  left.add(""String_Node_Str"");
  left.add(""String_Node_Str"" + result.getFluidAmount() + ""String_Node_Str""+ result.getCapacity()+ ""String_Node_Str"");
  left.add(""String_Node_Str"" + (result.getFluid() == null ? ""String_Node_Str"" : result.getFluidType().getLocalizedName(result.getFluid())));
}",0.9970267591674926
156586,"@Override public void addInformation(ItemStack stack,EntityPlayer player,List list,boolean debug){
  for (  FacadeState state : getFacadeStates(stack)) {
    if (state != null && !state.transparent && state.block != null && Item.getItemFromBlock(state.block) != null) {
      Item.getItemFromBlock(state.block).addInformation(new ItemStack(state.block,1,state.metadata),player,list,debug);
    }
  }
  if (getFacadeType(stack) == FacadeType.Phased) {
    String stateString=StringUtils.localize(""String_Node_Str"");
    FacadeState defaultState=null;
    for (    FacadeState state : getFacadeStates(stack)) {
      if (state.wire == null) {
        defaultState=state;
        continue;
      }
      list.add(String.format(stateString,state.wire.getColor(),getFacadeStateDisplayName(state)));
    }
    if (defaultState != null) {
      list.add(1,String.format(StringUtils.localize(""String_Node_Str""),getFacadeStateDisplayName(defaultState)));
    }
  }
}","@SuppressWarnings({""String_Node_Str"",""String_Node_Str""}) @Override public void addInformation(ItemStack stack,EntityPlayer player,List list,boolean debug){
  for (  FacadeState state : getFacadeStates(stack)) {
    if (state != null && !state.transparent && state.block != null && Item.getItemFromBlock(state.block) != null) {
      Item.getItemFromBlock(state.block).addInformation(new ItemStack(state.block,1,state.metadata),player,list,debug);
    }
  }
  if (getFacadeType(stack) == FacadeType.Phased) {
    String stateString=StringUtils.localize(""String_Node_Str"");
    FacadeState defaultState=null;
    for (    FacadeState state : getFacadeStates(stack)) {
      if (state.wire == null) {
        defaultState=state;
        continue;
      }
      list.add(String.format(stateString,state.wire.getColor(),getFacadeStateDisplayName(state)));
    }
    if (defaultState != null) {
      list.add(1,String.format(StringUtils.localize(""String_Node_Str""),getFacadeStateDisplayName(defaultState)));
    }
  }
}",0.9710806697108066
156587,"private void registerValidFacades(Block block,Item item){
  ArrayList<ItemStack> stacks=new ArrayList<ItemStack>(16);
  try {
    if (FMLCommonHandler.instance().getEffectiveSide() == Side.CLIENT) {
      for (      CreativeTabs ct : item.getCreativeTabs()) {
        block.getSubBlocks(item,ct,stacks);
      }
    }
 else {
      for (int i=0; i < 16; i++) {
        stacks.add(new ItemStack(item,1,i));
      }
    }
  }
 catch (  Exception e) {
    e.printStackTrace();
  }
  for (  ItemStack stack : stacks) {
    try {
      int i=stack.getItemDamage();
      if (block.hasTileEntity()) {
        continue;
      }
      try {
        if (stack.getDisplayName() == null || Strings.isNullOrEmpty(stack.getUnlocalizedName())) {
          continue;
        }
      }
 catch (      Throwable t) {
        continue;
      }
      addFacade(stack);
    }
 catch (    IndexOutOfBoundsException e) {
    }
catch (    Throwable t) {
      t.printStackTrace();
    }
  }
}","private void registerValidFacades(Block block,Item item){
  ArrayList<ItemStack> stacks=new ArrayList<ItemStack>(16);
  try {
    if (FMLCommonHandler.instance().getEffectiveSide() == Side.CLIENT) {
      for (      CreativeTabs ct : item.getCreativeTabs()) {
        block.getSubBlocks(item,ct,stacks);
      }
    }
 else {
      for (int i=0; i < 16; i++) {
        stacks.add(new ItemStack(item,1,i));
      }
    }
  }
 catch (  Exception e) {
    e.printStackTrace();
  }
  for (  ItemStack stack : stacks) {
    try {
      if (block.hasTileEntity(block.getDefaultState())) {
        continue;
      }
      try {
        if (stack.getDisplayName() == null || Strings.isNullOrEmpty(stack.getUnlocalizedName())) {
          continue;
        }
      }
 catch (      Throwable t) {
        continue;
      }
      addFacade(stack);
    }
 catch (    IndexOutOfBoundsException e) {
    }
catch (    Throwable t) {
      t.printStackTrace();
    }
  }
}",0.9542619542619544
156588,"public void requestPipeExtension(ItemStack stack,World world,BlockPos pos,EnumFacing o,IStripesActivator h){
  if (world.isRemote) {
    return;
  }
  if (!requests.containsKey(world)) {
    requests.put(world,new HashSet<PipeExtensionRequest>());
  }
  PipeExtensionRequest r=new PipeExtensionRequest();
  r.stack=stack;
  r.x=x;
  r.y=y;
  r.z=z;
  r.o=o;
  r.h=h;
  requests.get(world).add(r);
}","public void requestPipeExtension(ItemStack stack,World world,BlockPos pos,EnumFacing o,IStripesActivator h){
  if (world.isRemote) {
    return;
  }
  if (!requests.containsKey(world)) {
    requests.put(world,new HashSet<PipeExtensionRequest>());
  }
  PipeExtensionRequest r=new PipeExtensionRequest();
  r.stack=stack;
  r.pos=pos;
  r.o=o;
  r.h=h;
  requests.get(world).add(r);
}",0.9641943734015346
156589,"@SubscribeEvent public void tick(TickEvent.WorldTickEvent event){
  if (event.phase == TickEvent.Phase.END && requests.containsKey(event.world)) {
    HashSet<PipeExtensionRequest> rSet=requests.get(event.world);
    World w=event.world;
    for (    PipeExtensionRequest r : rSet) {
      Vec3 target=new Vec3(r.x,r.y,r.z);
      target.orientation=r.o;
      boolean retract=r.stack.getItem() == BuildCraftTransport.pipeItemsVoid;
      ArrayList<ItemStack> removedPipeStacks=null;
      if (retract) {
        target.moveBackwards(1.0D);
      }
 else {
        target.moveForwards(1.0D);
        if (!w.isAirBlock((int)target.x,(int)target.y,(int)target.z)) {
          r.h.sendItem(r.stack,r.o.getOpposite());
          continue;
        }
      }
      Block oldBlock=w.getBlock(r.x,r.y,r.z);
      int oldMeta=w.getBlockMetadata(r.x,r.y,r.z);
      NBTTagCompound nbt=new NBTTagCompound();
      w.getTileEntity(r.x,r.y,r.z).writeToNBT(nbt);
      w.setBlockToAir(r.x,r.y,r.z);
      if (retract) {
        removedPipeStacks=w.getBlock((int)target.x,(int)target.y,(int)target.z).getDrops(w,(int)target.x,(int)target.y,(int)target.z,w.getBlockMetadata((int)target.x,(int)target.y,(int)target.z),0);
        w.setBlockToAir((int)target.x,(int)target.y,(int)target.z);
      }
 else {
        r.stack.getItem().onItemUse(r.stack,CoreProxy.proxy.getBuildCraftPlayer((WorldServer)w,r.x,r.y,r.z).get(),w,r.x,r.y,r.z,1,0,0,0);
      }
      nbt.setInteger(""String_Node_Str"",(int)target.x);
      nbt.setInteger(""String_Node_Str"",(int)target.y);
      nbt.setInteger(""String_Node_Str"",(int)target.z);
      TileGenericPipe pipeTile=(TileGenericPipe)TileEntity.createAndLoadEntity(nbt);
      w.setBlock((int)target.x,(int)target.y,(int)target.z,oldBlock,oldMeta,3);
      w.setTileEntity((int)target.x,(int)target.y,(int)target.z,pipeTile);
      pipeTile.setWorldObj(w);
      pipeTile.validate();
      pipeTile.updateEntity();
      PipeTransportItems items=(PipeTransportItems)pipeTile.pipe.transport;
      if (!retract) {
        r.stack.stackSize--;
      }
      if (r.stack.stackSize > 0) {
        sendItem(items,r.stack,r.o.getOpposite());
      }
      if (removedPipeStacks != null) {
        for (        ItemStack s : removedPipeStacks) {
          sendItem(items,s,r.o.getOpposite());
        }
      }
      if (!retract) {
        TileGenericPipe newPipeTile=(TileGenericPipe)w.getTileEntity(r.x,r.y,r.z);
        newPipeTile.updateEntity();
        pipeTile.scheduleNeighborChange();
      }
    }
    rSet.clear();
  }
}","@SubscribeEvent public void tick(TickEvent.WorldTickEvent event){
  if (event.phase == TickEvent.Phase.END && requests.containsKey(event.world)) {
    HashSet<PipeExtensionRequest> rSet=requests.get(event.world);
    World w=event.world;
    for (    PipeExtensionRequest r : rSet) {
      Vec3 target=Utils.convert(r.pos);
      boolean retract=r.stack.getItem() == BuildCraftTransport.pipeItemsVoid;
      List<ItemStack> removedPipeStacks=null;
      if (retract) {
        target=target.add(Utils.convert(r.o,-1));
      }
 else {
        target=target.add(Utils.convert(r.o,1));
        if (!w.isAirBlock(Utils.convertFloor(target))) {
          r.h.sendItem(r.stack,r.o.getOpposite());
          continue;
        }
      }
      IBlockState oldState=w.getBlockState(r.pos);
      NBTTagCompound nbt=new NBTTagCompound();
      w.getTileEntity(r.pos).writeToNBT(nbt);
      w.setBlockToAir(r.pos);
      BlockPos targetPos=Utils.convertFloor(target);
      if (retract) {
        removedPipeStacks=w.getBlockState(targetPos).getBlock().getDrops(w,targetPos,w.getBlockState(targetPos),0);
        w.setBlockToAir(targetPos);
      }
 else {
        r.stack.getItem().onItemUse(r.stack,CoreProxy.proxy.getBuildCraftPlayer((WorldServer)w,r.pos).get(),w,r.pos,EnumFacing.UP,0,0,0);
      }
      nbt.setInteger(""String_Node_Str"",MathHelper.floor_double(target.xCoord));
      nbt.setInteger(""String_Node_Str"",MathHelper.floor_double(target.yCoord));
      nbt.setInteger(""String_Node_Str"",MathHelper.floor_double(target.zCoord));
      TileGenericPipe pipeTile=(TileGenericPipe)TileEntity.createAndLoadEntity(nbt);
      w.setBlockState(targetPos,oldState,3);
      w.setTileEntity(targetPos,pipeTile);
      pipeTile.setWorldObj(w);
      pipeTile.validate();
      pipeTile.update();
      PipeTransportItems items=(PipeTransportItems)pipeTile.pipe.transport;
      if (!retract) {
        r.stack.stackSize--;
      }
      if (r.stack.stackSize > 0) {
        sendItem(items,r.stack,r.o.getOpposite());
      }
      if (removedPipeStacks != null) {
        for (        ItemStack s : removedPipeStacks) {
          sendItem(items,s,r.o.getOpposite());
        }
      }
      if (!retract) {
        TileGenericPipe newPipeTile=(TileGenericPipe)w.getTileEntity(r.pos);
        newPipeTile.update();
        pipeTile.scheduleNeighborChange();
      }
    }
    rSet.clear();
  }
}",0.7029441624365482
156590,"private void sendItem(PipeTransportItems transport,ItemStack itemStack,EnumFacing direction){
  TravelingItem newItem=TravelingItem.make(transport.container.xCoord + 0.5,transport.container.yCoord + TransportUtils.getPipeFloorOf(itemStack),transport.container.zCoord + 0.5,itemStack);
  transport.injectItem(newItem,direction);
}","private void sendItem(PipeTransportItems transport,ItemStack itemStack,EnumFacing direction){
  Vec3 pos=Utils.convert(transport.container.getPos());
  pos=pos.addVector(0.5,TransportUtils.getPipeFloorOf(itemStack),0.5);
  TravelingItem newItem=TravelingItem.make(pos,itemStack);
  transport.injectItem(newItem,direction);
}",0.5911179173047473
156591,"@Override public boolean handle(World world,BlockPos pos,EnumFacing direction,ItemStack stack,EntityPlayer player,IStripesActivator activator){
  EntityArrow entityArrow=new EntityArrow(world,player,0);
  entityArrow.setPosition(x + 0.5d,y + 0.5d,z + 0.5d);
  entityArrow.setDamage(3);
  entityArrow.setKnockbackStrength(1);
  entityArrow.motionX=direction.offsetX * 1.8d + world.rand.nextGaussian() * 0.007499999832361937D;
  entityArrow.motionY=direction.offsetY * 1.8d + world.rand.nextGaussian() * 0.007499999832361937D;
  entityArrow.motionZ=direction.offsetZ * 1.8d + world.rand.nextGaussian() * 0.007499999832361937D;
  world.spawnEntityInWorld(entityArrow);
  stack.stackSize--;
  if (stack.stackSize > 0) {
    activator.sendItem(stack,direction.getOpposite());
  }
  return true;
}","@Override public boolean handle(World world,BlockPos pos,EnumFacing direction,ItemStack stack,EntityPlayer player,IStripesActivator activator){
  EntityArrow entityArrow=new EntityArrow(world,player,0);
  entityArrow.setPosition(pos.getX() + 0.5d,pos.getY() + 0.5d,pos.getZ() + 0.5d);
  entityArrow.setDamage(3);
  entityArrow.setKnockbackStrength(1);
  entityArrow.motionX=direction.getFrontOffsetX() * 1.8d + world.rand.nextGaussian() * 0.007499999832361937D;
  entityArrow.motionY=direction.getFrontOffsetY() * 1.8d + world.rand.nextGaussian() * 0.007499999832361937D;
  entityArrow.motionZ=direction.getFrontOffsetZ() * 1.8d + world.rand.nextGaussian() * 0.007499999832361937D;
  world.spawnEntityInWorld(entityArrow);
  stack.stackSize--;
  if (stack.stackSize > 0) {
    activator.sendItem(stack,direction.getOpposite());
  }
  return true;
}",0.9579011592434412
156592,"@Override public boolean handle(World world,BlockPos pos,EnumFacing direction,ItemStack stack,EntityPlayer player,IStripesActivator activator){
  Block block=world.getBlock(pos);
  if (block == Blocks.air) {
    Block underblock=world.getBlock(x,y - 1,z);
    if (((ItemBucket)stack.getItem()).tryPlaceContainedLiquid(world,x,y - 1,z)) {
      activator.sendItem(emptyBucket,direction.getOpposite());
      stack.stackSize--;
      if (stack.stackSize > 0) {
        activator.sendItem(stack,direction.getOpposite());
      }
      return true;
    }
 else {
      if (!FluidContainerRegistry.isEmptyContainer(stack)) {
        activator.sendItem(stack,direction.getOpposite());
        return true;
      }
      FluidStack fluidStack=BlockUtils.drainBlock(underblock,world,x,y - 1,z,true);
      ItemStack filledBucket=getFilledBucket(fluidStack,underblock);
      if (fluidStack == null || filledBucket == null) {
        activator.sendItem(stack,direction.getOpposite());
        return true;
      }
      activator.sendItem(filledBucket,direction.getOpposite());
      stack.stackSize--;
      if (stack.stackSize > 0) {
        activator.sendItem(stack,direction.getOpposite());
      }
      return true;
    }
  }
  return false;
}","@Override public boolean handle(World world,BlockPos pos,EnumFacing direction,ItemStack stack,EntityPlayer player,IStripesActivator activator){
  IBlockState state=world.getBlockState(pos);
  Block block=state.getBlock();
  if (block == Blocks.air) {
    IBlockState underblock=world.getBlockState(pos.down());
    if (((ItemBucket)stack.getItem()).tryPlaceContainedLiquid(world,pos.down())) {
      activator.sendItem(emptyBucket,direction.getOpposite());
      stack.stackSize--;
      if (stack.stackSize > 0) {
        activator.sendItem(stack,direction.getOpposite());
      }
      return true;
    }
 else {
      if (!FluidContainerRegistry.isEmptyContainer(stack)) {
        activator.sendItem(stack,direction.getOpposite());
        return true;
      }
      FluidStack fluidStack=BlockUtils.drainBlock(underblock,world,pos.down(),true);
      ItemStack filledBucket=getFilledBucket(fluidStack,underblock.getBlock());
      if (fluidStack == null || filledBucket == null) {
        activator.sendItem(stack,direction.getOpposite());
        return true;
      }
      activator.sendItem(filledBucket,direction.getOpposite());
      stack.stackSize--;
      if (stack.stackSize > 0) {
        activator.sendItem(stack,direction.getOpposite());
      }
      return true;
    }
  }
  return false;
}",0.93563579277865
156593,"@Override public boolean handle(World world,BlockPos pos,EnumFacing direction,ItemStack stack,EntityPlayer player,IStripesActivator activator){
  Vec3 origin=new Vec3(pos,direction);
  origin.moveBackwards(1.0D);
  IBlockSource source=new Source(world,(int)origin.x,(int)origin.y,(int)origin.z,direction);
  IBehaviorDispenseItem behaviour=(IBehaviorDispenseItem)BlockDispenser.dispenseBehaviorRegistry.getObject(stack.getItem());
  if (behaviour != null) {
    ItemStack output=behaviour.dispense(source,stack.copy());
    if (output.stackSize > 0) {
      activator.sendItem(output,direction.getOpposite());
    }
    return true;
  }
  return false;
}","@Override public boolean handle(World world,BlockPos pos,EnumFacing direction,ItemStack stack,EntityPlayer player,IStripesActivator activator){
  Vec3 origin=Utils.convert(pos).add(Utils.convert(direction,-1));
  IBlockSource source=new Source(world,Utils.convertFloor(origin),direction);
  IBehaviorDispenseItem behaviour=(IBehaviorDispenseItem)BlockDispenser.dispenseBehaviorRegistry.getObject(stack.getItem());
  if (behaviour != null) {
    ItemStack output=behaviour.dispense(source,stack.copy());
    if (output.stackSize > 0) {
      activator.sendItem(output,direction.getOpposite());
    }
    return true;
  }
  return false;
}",0.8195197521301317
156594,"public Source(World world,BlockPos pos,EnumFacing side){
  this.world=world;
  this.x=x;
  this.y=y;
  this.z=z;
  this.side=side;
}","public Source(World world,BlockPos pos,EnumFacing side){
  this.world=world;
  this.pos=pos;
  this.side=side;
}",0.8770491803278688
156595,"@Override public boolean shouldHandle(ItemStack stack){
  if (items.contains(stack.getItem())) {
    return true;
  }
  Class c=stack.getItem().getClass();
  while (c != Item.class) {
    if (items.contains(c)) {
      return true;
    }
    c=c.getSuperclass();
  }
  return false;
}","@Override public boolean shouldHandle(ItemStack stack){
  if (items.contains(stack.getItem())) {
    return true;
  }
  Class<?> c=stack.getItem().getClass();
  while (c != Item.class) {
    if (items.contains(c)) {
      return true;
    }
    c=c.getSuperclass();
  }
  return false;
}",0.9947460595446584
156596,"@Override public double getX(){
  return (double)x + 0.5D;
}","@Override public double getX(){
  return (double)pos.getX() + 0.5D;
}",0.9147286821705426
156597,"@Override public double getY(){
  return (double)y + 0.5D;
}","@Override public double getY(){
  return (double)pos.getY() + 0.5D;
}",0.9147286821705426
156598,"@Override public double getZ(){
  return (double)z + 0.5D;
}","@Override public double getZ(){
  return (double)pos.getZ() + 0.5D;
}",0.9147286821705426
156599,"@Override public boolean handle(World world,BlockPos pos,EnumFacing direction,ItemStack stack,EntityPlayer player,IStripesActivator activator){
  AxisAlignedBB box=new AxisAlignedBB(pos,x + 1,y + 1,z + 1);
  List entities=world.getEntitiesWithinAABBExcludingEntity(null,box);
  if (entities.size() <= 0) {
    return false;
  }
  List<EntityLivingBase> livingEntities=new LinkedList<EntityLivingBase>();
  for (  Object entityObj : entities) {
    if (entityObj instanceof EntityLivingBase) {
      livingEntities.add((EntityLivingBase)entityObj);
    }
  }
  player.setCurrentItemOrArmor(0,stack);
  boolean successful=false;
  Collections.shuffle(livingEntities);
  while (livingEntities.size() > 0) {
    EntityLivingBase entity=livingEntities.remove(0);
    if (!player.interactWith(entity)) {
      continue;
    }
    successful=true;
    dropItemsExcept(stack,player,activator,direction);
  }
  if (stack.stackSize > 0 && successful) {
    activator.sendItem(stack,direction.getOpposite());
  }
  player.setCurrentItemOrArmor(0,null);
  return successful;
}","@Override public boolean handle(World world,BlockPos pos,EnumFacing direction,ItemStack stack,EntityPlayer player,IStripesActivator activator){
  AxisAlignedBB box=new AxisAlignedBB(pos,pos.add(1,1,1));
  List entities=world.getEntitiesWithinAABBExcludingEntity(null,box);
  if (entities.size() <= 0) {
    return false;
  }
  List<EntityLivingBase> livingEntities=new LinkedList<EntityLivingBase>();
  for (  Object entityObj : entities) {
    if (entityObj instanceof EntityLivingBase) {
      livingEntities.add((EntityLivingBase)entityObj);
    }
  }
  player.setCurrentItemOrArmor(0,stack);
  boolean successful=false;
  Collections.shuffle(livingEntities);
  while (livingEntities.size() > 0) {
    EntityLivingBase entity=livingEntities.remove(0);
    if (!player.interactWith(entity)) {
      continue;
    }
    successful=true;
    dropItemsExcept(stack,player,activator,direction);
  }
  if (stack.stackSize > 0 && successful) {
    activator.sendItem(stack,direction.getOpposite());
  }
  player.setCurrentItemOrArmor(0,null);
  return successful;
}",0.9901176470588235
156600,"@Override public boolean handle(World world,BlockPos pos,EnumFacing direction,ItemStack stack,EntityPlayer player,IStripesActivator activator){
  if (!world.isAirBlock(x,y - 1,z) && stack.tryPlaceItemIntoWorld(player,world,x,y - 1,z,1,0.0f,0.0f,0.0f)) {
    if (stack.stackSize > 0) {
      activator.sendItem(stack,direction.getOpposite());
    }
    return true;
  }
  return false;
}","@Override public boolean handle(World world,BlockPos pos,EnumFacing direction,ItemStack stack,EntityPlayer player,IStripesActivator activator){
  if (!world.isAirBlock(pos.down()) && stack.onItemUse(player,world,pos.down(),EnumFacing.DOWN,0.0f,0.0f,0.0f)) {
    if (stack.stackSize > 0) {
      activator.sendItem(stack,direction.getOpposite());
    }
    return true;
  }
  return false;
}",0.6726804123711341
156601,"@Override public boolean handle(World world,BlockPos pos,EnumFacing direction,ItemStack stack,EntityPlayer player,IStripesActivator activator){
  AxisAlignedBB box=new AxisAlignedBB(pos,x + 1,y + 1,z + 1);
  List entities=world.getEntitiesWithinAABBExcludingEntity(null,box);
  if (entities.size() <= 0) {
    return false;
  }
  List<EntityMinecart> minecarts=new LinkedList<EntityMinecart>();
  for (  Object entityObj : entities) {
    if (entityObj instanceof EntityMinecart) {
      minecarts.add((EntityMinecart)entityObj);
    }
  }
  if (minecarts.size() > 0) {
    Collections.shuffle(minecarts);
    EntityMinecart cart=minecarts.get(0);
    if (cart instanceof EntityMinecartContainer) {
      EntityMinecartContainer container=(EntityMinecartContainer)cart;
      for (int i=0; i < container.getSizeInventory(); i++) {
        ItemStack s=container.getStackInSlot(i);
        if (s != null) {
          container.setInventorySlotContents(i,null);
          if (container.getStackInSlot(i) == null) {
            activator.sendItem(s,direction.getOpposite());
          }
        }
      }
    }
    cart.setDead();
    activator.sendItem(cart.getCartItem(),direction.getOpposite());
    return true;
  }
  return false;
}","@Override public boolean handle(World world,BlockPos pos,EnumFacing direction,ItemStack stack,EntityPlayer player,IStripesActivator activator){
  AxisAlignedBB box=new AxisAlignedBB(pos,pos.add(1,1,1));
  @SuppressWarnings(""String_Node_Str"") List entities=world.getEntitiesWithinAABBExcludingEntity(null,box);
  if (entities.size() <= 0) {
    return false;
  }
  List<EntityMinecart> minecarts=new LinkedList<EntityMinecart>();
  for (  Object entityObj : entities) {
    if (entityObj instanceof EntityMinecart) {
      minecarts.add((EntityMinecart)entityObj);
    }
  }
  if (minecarts.size() > 0) {
    Collections.shuffle(minecarts);
    EntityMinecart cart=minecarts.get(0);
    if (cart instanceof EntityMinecartContainer) {
      EntityMinecartContainer container=(EntityMinecartContainer)cart;
      for (int i=0; i < container.getSizeInventory(); i++) {
        ItemStack s=container.getStackInSlot(i);
        if (s != null) {
          container.setInventorySlotContents(i,null);
          if (container.getStackInSlot(i) == null) {
            activator.sendItem(s,direction.getOpposite());
          }
        }
      }
    }
    cart.setDead();
    activator.sendItem(cart.getCartItem(),direction.getOpposite());
    return true;
  }
  return false;
}",0.9744
156602,"@Override public boolean handle(World world,BlockPos pos,EnumFacing direction,ItemStack stack,EntityPlayer player,IStripesActivator activator){
  int pipesToTry=8;
  int pipeWireColor=stack.getItemDamage();
  Vec3 p=new Vec3(pos);
  p.orientation=direction;
  while (pipesToTry > 0) {
    p.moveBackwards(1.0);
    TileEntity tile=world.getTileEntity((int)p.x,(int)p.y,(int)p.z);
    if (tile instanceof TileGenericPipe) {
      TileGenericPipe pipeTile=(TileGenericPipe)tile;
      if (!pipeTile.pipe.wireSet[pipeWireColor]) {
        pipeTile.pipe.wireSet[pipeWireColor]=true;
        pipeTile.pipe.signalStrength[pipeWireColor]=0;
        pipeTile.pipe.updateSignalState();
        pipeTile.scheduleRenderUpdate();
        world.notifyBlocksOfNeighborChange(pipeTile.xCoord,pipeTile.yCoord,pipeTile.zCoord,pipeTile.getBlock());
        return true;
      }
 else {
        pipesToTry--;
        continue;
      }
    }
 else {
      break;
    }
  }
  return false;
}","@Override public boolean handle(World world,BlockPos pos,EnumFacing direction,ItemStack stack,EntityPlayer player,IStripesActivator activator){
  int pipesToTry=8;
  int pipeWireColor=stack.getItemDamage();
  Vec3 p=Utils.convert(pos);
  while (pipesToTry > 0) {
    p=p.add(Utils.convert(direction,-1));
    TileEntity tile=world.getTileEntity(Utils.convertFloor(p));
    if (tile instanceof TileGenericPipe) {
      TileGenericPipe pipeTile=(TileGenericPipe)tile;
      if (!pipeTile.pipe.wireSet[pipeWireColor]) {
        pipeTile.pipe.wireSet[pipeWireColor]=true;
        pipeTile.pipe.signalStrength[pipeWireColor]=0;
        pipeTile.pipe.updateSignalState();
        pipeTile.scheduleRenderUpdate();
        world.notifyNeighborsOfStateChange(pipeTile.getPos(),pipeTile.getBlock());
        return true;
      }
 else {
        pipesToTry--;
        continue;
      }
    }
 else {
      break;
    }
  }
  return false;
}",0.8825697735650342
156603,"/** 
 * Every parameter needs a unique tag, it should be in the format of ""&lt;modi&gt;:&lt;name&gt;"".
 * @return the unique id 
 */
String getUniqueTag();","/** 
 * Every parameter needs a unique tag, it should be in the format of ""&lt;modid&gt;:&lt;name&gt;"".
 * @return the unique id 
 */
String getUniqueTag();",0.9967845659163987
156604,"protected BCStatement(ResourceLocation loc,String... uniqueTag){
  this.uniqueTag=uniqueTag[0];
  for (  String tag : uniqueTag) {
    StatementManager.statements.put(tag,this);
  }
  location=loc;
  MinecraftForge.EVENT_BUS.register(this);
}","/** 
 * UniqueTag accepts multiple possible tags, use this feature to migrate to more standardized tags if needed, otherwise just pass a single string. The first passed string will be the one used when saved to disk. The ResourceLocation is the location of the icon to be displayed for this statement
 * @param uniqueTag 
 */
protected BCStatement(ResourceLocation loc,String... uniqueTag){
  this.uniqueTag=uniqueTag[0];
  for (  String tag : uniqueTag) {
    StatementManager.statements.put(tag,this);
  }
  location=loc;
  MinecraftForge.EVENT_BUS.register(this);
}",0.5975308641975309
156605,"@SubscribeEvent @SideOnly(Side.CLIENT) public void textureHook(TextureStitchEvent.Pre event){
  for (  Item i : BlockGenericPipe.pipes.keySet()) {
    Pipe<?> dummyPipe=BlockGenericPipe.createPipe(i);
    if (dummyPipe != null) {
      dummyPipe.getIconProvider().registerIcons(event.map);
    }
  }
  wireIconProvider.registerIcons(event.map);
  for (  GateDefinition.GateMaterial material : GateDefinition.GateMaterial.VALUES) {
    material.registerBlockIcon(event.map);
  }
  for (  GateDefinition.GateLogic logic : GateDefinition.GateLogic.VALUES) {
    logic.registerBlockIcon(event.map);
  }
  for (  IGateExpansion expansion : GateExpansions.getExpansions()) {
    expansion.registerBlockOverlay(event.map);
  }
}","@SubscribeEvent @SideOnly(Side.CLIENT) public void textureHook(TextureStitchEvent.Pre event){
  for (  Item i : BlockGenericPipe.pipes.keySet()) {
    Pipe<?> dummyPipe=BlockGenericPipe.createPipe(i);
    if (dummyPipe != null) {
      dummyPipe.getIconProvider().registerIcons(event.map);
    }
  }
  wireIconProvider.registerIcons(event.map);
  for (  GateDefinition.GateMaterial material : GateDefinition.GateMaterial.VALUES) {
    material.registerBlockIcon(event.map);
  }
  for (  GateDefinition.GateLogic logic : GateDefinition.GateLogic.VALUES) {
    logic.registerBlockIcon(event.map);
  }
  for (  IGateExpansion expansion : GateExpansions.getExpansions()) {
    expansion.registerBlockOverlay(event.map);
  }
  TriggerParameterSignal.registerIcons(event);
  ActionParameterSignal.registerIcons(event);
}",0.9394136807817588
156606,"public ActionExtractionPreset(EnumColor color){
  super(""String_Node_Str"" + color.getTag(),""String_Node_Str"" + color.getTag());
  this.color=color;
}","public ActionExtractionPreset(EnumColor color){
  super(new ResourceLocation(""String_Node_Str"" + color.name().toLowerCase(Locale.ENGLISH)),""String_Node_Str"" + color.getTag(),""String_Node_Str"" + color.getTag());
  this.color=color;
}",0.7821522309711286
156607,"@Override public void registerIcons(TextureAtlasSpriteRegister iconRegister){
  icons=new TextureAtlasSprite[]{iconRegister.registerIcon(""String_Node_Str""),iconRegister.registerIcon(""String_Node_Str""),iconRegister.registerIcon(""String_Node_Str""),iconRegister.registerIcon(""String_Node_Str"")};
}","public static void registerIcons(TextureStitchEvent.Pre event){
  icons=new TextureAtlasSprite[4];
  icons[0]=event.map.registerSprite(new ResourceLocation(""String_Node_Str""));
  icons[1]=event.map.registerSprite(new ResourceLocation(""String_Node_Str""));
  icons[2]=event.map.registerSprite(new ResourceLocation(""String_Node_Str""));
  icons[3]=event.map.registerSprite(new ResourceLocation(""String_Node_Str""));
}",0.2237960339943343
156608,"public ActionPipeColor(EnumColor color){
  super(""String_Node_Str"" + color.getTag(),""String_Node_Str"" + color.getTag());
  this.color=color;
}","public ActionPipeColor(EnumColor color){
  super(new ResourceLocation(""String_Node_Str"" + color.name().toLowerCase(Locale.ENGLISH)),""String_Node_Str"" + color.getTag(),""String_Node_Str"" + color.getTag());
  this.color=color;
}",0.773841961852861
156609,"@Override public IStatement rotateLeft(){
  return BuildCraftTransport.actionPipeDirection[direction.getRotation(EnumFacing.UP).ordinal()];
}","@Override public IStatement rotateLeft(){
  EnumFacing face=direction.getAxis() == Axis.Y ? direction : direction.rotateY();
  return BuildCraftTransport.actionPipeDirection[face.ordinal()];
}",0.6426426426426426
156610,"public ActionPowerLimiter(PowerMode limit){
  super(""String_Node_Str"" + limit.name().toLowerCase(Locale.ENGLISH),""String_Node_Str"" + limit.name().toLowerCase(Locale.ENGLISH));
  this.limit=limit;
}","public ActionPowerLimiter(PowerMode limit){
  super(new ResourceLocation(""String_Node_Str"" + limit.name().toLowerCase(Locale.ENGLISH)),""String_Node_Str"" + limit.name().toLowerCase(Locale.ENGLISH),""String_Node_Str"" + limit.name().toLowerCase(Locale.ENGLISH));
  this.limit=limit;
}",0.8259958071278826
156611,"public ActionRedstoneFaderOutput(int level){
  super(String.format(""String_Node_Str"",level));
  this.level=level;
}","public ActionRedstoneFaderOutput(int level){
  super(String.format(""String_Node_Str"",level));
  location=new ResourceLocation(String.format(""String_Node_Str"",level));
  this.level=level;
}",0.759075907590759
156612,"public ActionSignalOutput(PipeWire color){
  super(""String_Node_Str"" + color.name().toLowerCase(Locale.ENGLISH),""String_Node_Str"" + color.name().toLowerCase(Locale.ENGLISH));
  this.color=color;
}","public ActionSignalOutput(PipeWire color){
  super(""String_Node_Str"" + color.name().toLowerCase(Locale.ENGLISH),""String_Node_Str"" + color.name().toLowerCase(Locale.ENGLISH));
  location=new ResourceLocation(""String_Node_Str"" + color.name().toLowerCase() + ""String_Node_Str"");
  this.color=color;
}",0.795131845841785
156613,"public ActionSingleEnergyPulse(){
  super(""String_Node_Str"",""String_Node_Str"");
}","public ActionSingleEnergyPulse(){
  super(""String_Node_Str"",""String_Node_Str"");
  location=new ResourceLocation(""String_Node_Str"");
}",0.7570093457943925
156614,"public ActionValve(ValveState valveState){
  super(""String_Node_Str"" + valveState.name().toLowerCase(Locale.ENGLISH));
  state=valveState;
}","public ActionValve(ValveState valveState){
  super(""String_Node_Str"" + valveState.name().toLowerCase(Locale.ENGLISH));
  state=valveState;
  location=new ResourceLocation(""String_Node_Str"" + state.name().toLowerCase(Locale.ENGLISH));
}",0.7466666666666667
156615,"@Override public void actionActivate(IStatementContainer container,IStatementParameter[] parameters){
  IPipe pipe=((Gate)container).getPipe();
  if (pipe != null && pipe instanceof Pipe) {
    PipeTransport transport=((Pipe)pipe).transport;
    if (parameters[0] != null && parameters[0] instanceof StatementParameterDirection) {
      EnumFacing side=((StatementParameterDirection)parameters[0]).direction;
      if (side != null) {
        transport.allowInput(side,state.inputOpen);
        transport.allowOutput(side,state.outputOpen);
      }
    }
 else {
      for (      EnumFacing side : EnumFacing.VALUES) {
        transport.allowInput(side,state.inputOpen);
        transport.allowOutput(side,state.outputOpen);
      }
    }
  }
}","@Override public void actionActivate(IStatementContainer container,IStatementParameter[] parameters){
  IPipe pipe=((Gate)container).getPipe();
  if (pipe != null && pipe instanceof Pipe) {
    PipeTransport transport=((Pipe<?>)pipe).transport;
    if (parameters[0] != null && parameters[0] instanceof StatementParameterDirection) {
      EnumFacing side=((StatementParameterDirection)parameters[0]).direction;
      if (side != null) {
        transport.allowInput(side,state.inputOpen);
        transport.allowOutput(side,state.outputOpen);
      }
    }
 else {
      for (      EnumFacing side : EnumFacing.VALUES) {
        transport.allowInput(side,state.inputOpen);
        transport.allowOutput(side,state.outputOpen);
      }
    }
  }
}",0.9979879275653925
156616,"public TriggerClockTimer(Time time){
  super(""String_Node_Str"" + time.name().toLowerCase(Locale.ENGLISH));
  this.time=time;
}","public TriggerClockTimer(Time time){
  super(""String_Node_Str"" + time.name().toLowerCase(Locale.ENGLISH));
  location=new ResourceLocation(""String_Node_Str"" + time.name().toLowerCase(Locale.ENGLISH));
  this.time=time;
}",0.7283236994219653
156617,"public static BlockPos convertFloor(Vec3 vec){
  return new BlockPos(vec.xCoord,vec.yCoord,vec.zCoord);
}","public static BlockPos convertFloor(EnumFacing face,int multiple){
  return convertFloor(convert(face,multiple));
}",0.6
156618,"@Override public IFluidHandler getFluidInput(){
  if (getPipe().getPipeType() != IPipeTile.PipeType.FLUID) {
    return null;
  }
  if (!(getPipe().getPipe() instanceof PipeFluidsWood)) {
    return null;
  }
  int meta=((TileEntity)getPipe()).getBlockMetadata();
  EnumFacing dir=EnumFacing.getOrientation(meta);
  TileEntity connectedTile=getPipe().getWorld().getTileEntity(x() + dir.offsetX,y() + dir.offsetY,z() + dir.offsetZ);
  if (connectedTile instanceof IFluidHandler) {
    return (IFluidHandler)connectedTile;
  }
  return null;
}","@Override public IFluidHandler getFluidInput(){
  if (getPipe().getPipeType() != IPipeTile.PipeType.FLUID) {
    return null;
  }
  if (!(getPipe().getPipe() instanceof PipeFluidsWood)) {
    return null;
  }
  int meta=((TileEntity)getPipe()).getBlockMetadata();
  EnumFacing dir=EnumFacing.getFront(meta);
  TileEntity connectedTile=getPipe().getWorld().getTileEntity(getPos().add(Utils.convertFloor(dir)));
  if (connectedTile instanceof IFluidHandler) {
    return (IFluidHandler)connectedTile;
  }
  return null;
}",0.8415094339622642
156619,"public IPipeTile getPipe(){
  if (pipe == null) {
    pipe=(IPipeTile)world.getTileEntity(x(),y(),z());
  }
  if (pipe == null || ((TileEntity)pipe).isInvalid()) {
    RobotManager.registryProvider.getRegistry(world).removeStation(this);
    pipe=null;
  }
  return pipe;
}","public IPipeTile getPipe(){
  if (pipe == null) {
    pipe=(IPipeTile)world.getTileEntity(getPos());
  }
  if (pipe == null || ((TileEntity)pipe).isInvalid()) {
    RobotManager.registryProvider.getRegistry(world).removeStation(this);
    pipe=null;
  }
  return pipe;
}",0.9723756906077348
156620,"@Override public boolean isInitialized(){
  if (getPipe() == null || getPipe().getPipe() == null) {
    return false;
  }
  return ((Pipe)getPipe().getPipe()).isInitialized();
}","@Override public boolean isInitialized(){
  if (getPipe() == null || getPipe().getPipe() == null) {
    return false;
  }
  return ((Pipe<?>)getPipe().getPipe()).isInitialized();
}",0.9915966386554622
156621,"@Override public int injectItem(ItemStack stack,boolean doAdd,EnumFacing from,EnumColor color){
  if (doAdd) {
    float cx=x() + 0.5F + 0.2F * side().offsetX;
    float cy=y() + 0.5F + 0.2F * side().offsetY;
    float cz=z() + 0.5F + 0.2F * side().offsetZ;
    TravelingItem item=TravelingItem.make(cx,cy,cz,stack);
    ((PipeTransportItems)((Pipe)getPipe().getPipe()).transport).injectItem(item,from);
  }
  return stack.stackSize;
}","@Override public int injectItem(ItemStack stack,boolean doAdd,EnumFacing from,EnumColor color){
  if (doAdd) {
    Vec3 vec=Utils.convertMiddle(getPos()).add(Utils.convert(side,0.2));
    TravelingItem item=TravelingItem.make(vec,stack);
    ((PipeTransportItems)((Pipe<?>)getPipe().getPipe()).transport).injectItem(item,from);
  }
  return stack.stackSize;
}",0.4206549118387909
156622,"@Override public IFluidHandler getFluidOutput(){
  if (getPipe().getPipeType() != IPipeTile.PipeType.FLUID) {
    return null;
  }
  return (IFluidHandler)((Pipe)getPipe().getPipe()).transport;
}","@Override public IFluidHandler getFluidOutput(){
  if (getPipe().getPipeType() != IPipeTile.PipeType.FLUID) {
    return null;
  }
  return (IFluidHandler)((Pipe<?>)getPipe().getPipe()).transport;
}",0.9923664122137404
156623,"@Override public IInventory getItemInput(){
  if (getPipe().getPipeType() != IPipeTile.PipeType.ITEM) {
    return null;
  }
  if (!(getPipe().getPipe() instanceof PipeItemsWood)) {
    return null;
  }
  int meta=((TileEntity)getPipe()).getBlockMetadata();
  EnumFacing dir=EnumFacing.getOrientation(meta);
  TileEntity connectedTile=getPipe().getWorld().getTileEntity(x() + dir.offsetX,y() + dir.offsetY,z() + dir.offsetZ);
  if (connectedTile instanceof IInventory) {
    return (IInventory)connectedTile;
  }
  return null;
}","@Override public IInventory getItemInput(){
  if (getPipe().getPipeType() != IPipeTile.PipeType.ITEM) {
    return null;
  }
  if (!(getPipe().getPipe() instanceof PipeItemsWood)) {
    return null;
  }
  int meta=((TileEntity)getPipe()).getBlockMetadata();
  EnumFacing dir=EnumFacing.getFront(meta);
  TileEntity connectedTile=getPipe().getWorld().getTileEntity(getPos().add(Utils.convertFloor(dir)));
  if (connectedTile instanceof IInventory) {
    return (IInventory)connectedTile;
  }
  return null;
}",0.8378378378378378
156624,"@Override public IRequestProvider getRequestProvider(){
  for (  EnumFacing dir : EnumFacing.VALUES) {
    TileEntity nearbyTile=getPipe().getWorld().getTileEntity(x() + dir.offsetX,y() + dir.offsetY,z() + dir.offsetZ);
    if (nearbyTile instanceof IRequestProvider) {
      return (IRequestProvider)nearbyTile;
    }
  }
  return null;
}","@Override public IRequestProvider getRequestProvider(){
  for (  EnumFacing dir : EnumFacing.VALUES) {
    TileEntity nearbyTile=getPipe().getWorld().getTileEntity(getPos().add(Utils.convertFloor(dir)));
    if (nearbyTile instanceof IRequestProvider) {
      return (IRequestProvider)nearbyTile;
    }
  }
  return null;
}",0.8640483383685801
156625,"protected void findTable(){
  int meta=getBlockMetadata();
  int minX=xCoord - 5;
  int minY=yCoord - 5;
  int minZ=zCoord - 5;
  int maxX=xCoord + 5;
  int maxY=yCoord + 5;
  int maxZ=zCoord + 5;
switch (EnumFacing.getOrientation(meta)) {
case WEST:
    maxX=xCoord;
  break;
case EAST:
minX=xCoord;
break;
case DOWN:
maxY=yCoord;
break;
case UP:
minY=yCoord;
break;
case NORTH:
maxZ=zCoord;
break;
default :
case SOUTH:
minZ=zCoord;
break;
}
List<ILaserTarget> targets=new LinkedList<ILaserTarget>();
if (minY < 0) {
minY=0;
}
if (maxY > 255) {
maxY=255;
}
for (int y=minY; y <= maxY; ++y) {
for (int x=minX; x <= maxX; ++x) {
for (int z=minZ; z <= maxZ; ++z) {
if (BlockUtils.getBlock(worldObj,pos) instanceof ILaserTargetBlock) {
TileEntity tile=BlockUtils.getTileEntity(worldObj,pos);
if (tile instanceof ILaserTarget) {
ILaserTarget table=(ILaserTarget)tile;
if (table.requiresLaserEnergy()) {
targets.add(table);
}
}
}
}
}
}
if (targets.isEmpty()) {
return;
}
laserTarget=targets.get(worldObj.rand.nextInt(targets.size()));
}","protected void findTable(){
  int meta=getBlockMetadata();
  int minX=xCoord - 5;
  int minY=yCoord - 5;
  int minZ=zCoord - 5;
  int maxX=xCoord + 5;
  int maxY=yCoord + 5;
  int maxZ=zCoord + 5;
switch (EnumFacing.getFront(meta)) {
case WEST:
    maxX=xCoord;
  break;
case EAST:
minX=xCoord;
break;
case DOWN:
maxY=yCoord;
break;
case UP:
minY=yCoord;
break;
case NORTH:
maxZ=zCoord;
break;
default :
case SOUTH:
minZ=zCoord;
break;
}
List<ILaserTarget> targets=new LinkedList<ILaserTarget>();
if (minY < 0) {
minY=0;
}
if (maxY > 255) {
maxY=255;
}
for (int y=minY; y <= maxY; ++y) {
for (int x=minX; x <= maxX; ++x) {
for (int z=minZ; z <= maxZ; ++z) {
if (BlockUtils.getBlock(worldObj,pos) instanceof ILaserTargetBlock) {
TileEntity tile=BlockUtils.getTileEntity(worldObj,pos);
if (tile instanceof ILaserTarget) {
ILaserTarget table=(ILaserTarget)tile;
if (table.requiresLaserEnergy()) {
targets.add(table);
}
}
}
}
}
}
if (targets.isEmpty()) {
return;
}
laserTarget=targets.get(worldObj.rand.nextInt(targets.size()));
}",0.9922254616132168
156626,"protected void updateLaser(){
  int meta=getBlockMetadata();
  double px=0, py=0, pz=0;
switch (EnumFacing.getOrientation(meta)) {
case WEST:
    px=-LASER_OFFSET;
  break;
case EAST:
px=LASER_OFFSET;
break;
case DOWN:
py=-LASER_OFFSET;
break;
case UP:
py=LASER_OFFSET;
break;
case NORTH:
pz=-LASER_OFFSET;
break;
case SOUTH:
default :
pz=LASER_OFFSET;
break;
}
Vec3 head=new Vec3(xCoord + 0.5 + px,yCoord + 0.5 + py,zCoord + 0.5 + pz);
Vec3 tail=new Vec3(laserTarget.getXCoord() + 0.475 + (worldObj.rand.nextFloat() - 0.5) / 5F,laserTarget.getYCoord() + 9F / 16F,laserTarget.getZCoord() + 0.475 + (worldObj.rand.nextFloat() - 0.5) / 5F);
laser.head=head;
laser.tail=tail;
if (!laser.isVisible) {
laser.isVisible=true;
}
}","protected void updateLaser(){
  int meta=getBlockMetadata();
  double px=0, py=0, pz=0;
switch (EnumFacing.getFront(meta)) {
case WEST:
    px=-LASER_OFFSET;
  break;
case EAST:
px=LASER_OFFSET;
break;
case DOWN:
py=-LASER_OFFSET;
break;
case UP:
py=LASER_OFFSET;
break;
case NORTH:
pz=-LASER_OFFSET;
break;
case SOUTH:
default :
pz=LASER_OFFSET;
break;
}
Vec3 head=new Vec3(xCoord + 0.5 + px,yCoord + 0.5 + py,zCoord + 0.5 + pz);
Vec3 tail=new Vec3(laserTarget.getXCoord() + 0.475 + (worldObj.rand.nextFloat() - 0.5) / 5F,laserTarget.getYCoord() + 9F / 16F,laserTarget.getZCoord() + 0.475 + (worldObj.rand.nextFloat() - 0.5) / 5F);
laser.head=head;
laser.tail=tail;
if (!laser.isVisible) {
laser.isVisible=true;
}
}",0.9888734353268428
156627,"private boolean attemptCrafting(ItemStack input){
  if (inventoryPublic.getStackInSlot(11) != null) {
    return false;
  }
  if (input == null || input.stackSize == 0 || !(input.getItem() == Items.paper || input.getItem() instanceof ItemPackage)) {
    return false;
  }
  if (input.getItem() instanceof ItemPackage) {
    NBTTagCompound inputTag=NBTUtils.getItemData(input);
    for (int i=0; i < 9; i++) {
      if (isPatternSlotSet(i) && inputTag.hasKey(""String_Node_Str"" + i)) {
        return false;
      }
    }
  }
  TObjectIntHashMap<Requirement> reqCounts=new TObjectIntHashMap<Requirement>(9);
  int missingCount=0;
  int filteredReqsToFulfill=0;
  for (int i=0; i < 9; i++) {
    if (isPatternSlotSet(i)) {
      ItemStack inputStack=inventoryPattern.getStackInSlot(i);
      if (inputStack != null) {
        filteredReqsToFulfill++;
      }
 else {
        missingCount++;
        requirements[i]=null;
        continue;
      }
      Requirement r=requirements[i];
      if (r == null) {
        continue;
      }
      if (!r.isValid()) {
        requirements[i]=null;
        continue;
      }
      if (r.getStack() == null) {
        requirements[i]=null;
        continue;
      }
      if (inputStack != null) {
        if (!StackHelper.isMatchingItem(inputStack,r.getStack(),true,false)) {
          requirements[i]=null;
          continue;
        }
      }
      reqCounts.adjustOrPutValue(requirements[i],1,1);
      filteredReqsToFulfill--;
    }
 else {
      requirements[i]=null;
    }
  }
  for (  Requirement r : reqCounts.keys(new Requirement[reqCounts.size()])) {
    if (r.getStack().stackSize < reqCounts.get(r)) {
      int allowedAmount=0;
      for (int i=0; i < 9; i++) {
        if (requirements[i] != null && requirements[i].equals(r)) {
          allowedAmount--;
          if (allowedAmount < 0) {
            requirements[i]=null;
            filteredReqsToFulfill++;
          }
        }
      }
      reqCounts.remove(r);
    }
  }
  if (filteredReqsToFulfill > 0) {
    for (int i=0; i < 9; i++) {
      if (filteredReqsToFulfill == 0) {
        break;
      }
      if (isPatternSlotSet(i) && requirements[i] == null) {
        ItemStack inputStack=inventoryPattern.getStackInSlot(i);
        if (inputStack != null) {
          for (int j=0; j < 9; j++) {
            ItemStack comparedStack=inventoryPublic.getStackInSlot(j);
            if (comparedStack == null) {
              continue;
            }
            Requirement r=new Requirement(this,j);
            if (comparedStack.stackSize <= reqCounts.get(r)) {
              continue;
            }
            if (StackHelper.isMatchingItem(inputStack,comparedStack,true,false)) {
              requirements[i]=r;
              filteredReqsToFulfill--;
              reqCounts.adjustOrPutValue(r,1,1);
              break;
            }
          }
        }
      }
    }
  }
  Map<EnumFacing,IInventory> invs=new HashMap<EnumFacing,IInventory>();
  if (filteredReqsToFulfill > 0 || missingCount > 0) {
    for (int i=2; i < 6; i++) {
      TileEntity neighbor=getTile(EnumFacing.getOrientation(i));
      if (neighbor instanceof IInventory) {
        invs.put(EnumFacing.getOrientation(i),(IInventory)neighbor);
      }
    }
  }
  if (filteredReqsToFulfill > 0) {
    for (    EnumFacing dir : invs.keySet()) {
      if (filteredReqsToFulfill == 0) {
        break;
      }
      IInventory inv=invs.get(dir);
      Iterable<IInvSlot> iterator=InventoryIterator.getIterable(inv,dir);
      for (      IInvSlot slot : iterator) {
        if (filteredReqsToFulfill == 0) {
          break;
        }
        ItemStack comparedStack=slot.getStackInSlot();
        if (comparedStack == null || !slot.canTakeStackFromSlot(comparedStack)) {
          continue;
        }
        Requirement r=new Requirement(inv,slot.getIndex());
        if (comparedStack.stackSize <= reqCounts.get(r)) {
          continue;
        }
        for (int j=0; j < 9; j++) {
          ItemStack inputStack=inventoryPattern.getStackInSlot(j);
          if (isPatternSlotSet(j) && requirements[j] == null && inputStack != null) {
            if (StackHelper.isMatchingItem(inputStack,comparedStack,true,false)) {
              filteredReqsToFulfill--;
              requirements[j]=r;
              reqCounts.adjustOrPutValue(r,1,1);
              break;
            }
          }
        }
      }
    }
  }
  if (filteredReqsToFulfill > 0) {
    return false;
  }
  boolean foundMissing=false;
  if (missingCount > 0) {
    for (int i=0; i < 9; i++) {
      Requirement r=new Requirement(this,i);
      if (reqCounts.contains(r)) {
        continue;
      }
      if (validMissing(r,missingCount)) {
        foundMissing=true;
        for (int j=0; j < 9; j++) {
          if (requirements[j] == null && isPatternSlotSet(j) && inventoryPattern.getStackInSlot(j) == null) {
            requirements[j]=r;
          }
        }
        reqCounts.adjustOrPutValue(r,missingCount,missingCount);
        missingCount=0;
        break;
      }
    }
  }
  if (missingCount > 0) {
    for (    EnumFacing dir : invs.keySet()) {
      if (foundMissing) {
        break;
      }
      IInventory inv=invs.get(dir);
      Iterable<IInvSlot> iterator=InventoryIterator.getIterable(inv,dir);
      for (      IInvSlot slot : iterator) {
        if (foundMissing) {
          break;
        }
        Requirement r=new Requirement(inv,slot.getIndex());
        if (reqCounts.contains(r)) {
          continue;
        }
        if (validMissing(r,missingCount)) {
          foundMissing=true;
          for (int j=0; j < 9; j++) {
            if (requirements[j] == null && isPatternSlotSet(j) && inventoryPattern.getStackInSlot(j) == null) {
              requirements[j]=r;
            }
          }
          reqCounts.adjustOrPutValue(r,missingCount,missingCount);
          missingCount=0;
          break;
        }
      }
    }
  }
  if (missingCount > 0) {
    return false;
  }
  ItemStack pkg;
  if (input.getItem() instanceof ItemPackage) {
    pkg=input.copy();
  }
 else {
    pkg=new ItemStack(BuildCraftSilicon.packageItem);
  }
  NBTTagCompound pkgTag=NBTUtils.getItemData(pkg);
  boolean broken=false;
  for (int i=0; i < 9; i++) {
    if (isPatternSlotSet(i)) {
      if (requirements[i] == null) {
        BCLog.logger.error(""String_Node_Str"" + xCoord + ""String_Node_Str""+ yCoord+ ""String_Node_Str""+ zCoord+ ""String_Node_Str""+ i+ ""String_Node_Str"");
        broken=true;
        continue;
      }
      ItemStack usedStack=requirements[i].decrStackSize(1);
      if (usedStack == null) {
        BCLog.logger.error(""String_Node_Str"" + xCoord + ""String_Node_Str""+ yCoord+ ""String_Node_Str""+ zCoord+ ""String_Node_Str""+ i+ ""String_Node_Str"");
        broken=true;
        continue;
      }
      NBTTagCompound itemTag=new NBTTagCompound();
      usedStack.writeToNBT(itemTag);
      pkgTag.setTag(""String_Node_Str"" + i,itemTag);
    }
  }
  if (broken) {
    return false;
  }
  ItemPackage.update(pkg);
  decrStackSize(9,1);
  setInventorySlotContents(11,pkg);
  return true;
}","private boolean attemptCrafting(ItemStack input){
  if (inventoryPublic.getStackInSlot(11) != null) {
    return false;
  }
  if (input == null || input.stackSize == 0 || !(input.getItem() == Items.paper || input.getItem() instanceof ItemPackage)) {
    return false;
  }
  if (input.getItem() instanceof ItemPackage) {
    NBTTagCompound inputTag=NBTUtils.getItemData(input);
    for (int i=0; i < 9; i++) {
      if (isPatternSlotSet(i) && inputTag.hasKey(""String_Node_Str"" + i)) {
        return false;
      }
    }
  }
  TObjectIntHashMap<Requirement> reqCounts=new TObjectIntHashMap<Requirement>(9);
  int missingCount=0;
  int filteredReqsToFulfill=0;
  for (int i=0; i < 9; i++) {
    if (isPatternSlotSet(i)) {
      ItemStack inputStack=inventoryPattern.getStackInSlot(i);
      if (inputStack != null) {
        filteredReqsToFulfill++;
      }
 else {
        missingCount++;
        requirements[i]=null;
        continue;
      }
      Requirement r=requirements[i];
      if (r == null) {
        continue;
      }
      if (!r.isValid()) {
        requirements[i]=null;
        continue;
      }
      if (r.getStack() == null) {
        requirements[i]=null;
        continue;
      }
      if (inputStack != null) {
        if (!StackHelper.isMatchingItem(inputStack,r.getStack(),true,false)) {
          requirements[i]=null;
          continue;
        }
      }
      reqCounts.adjustOrPutValue(requirements[i],1,1);
      filteredReqsToFulfill--;
    }
 else {
      requirements[i]=null;
    }
  }
  for (  Requirement r : reqCounts.keys(new Requirement[reqCounts.size()])) {
    if (r.getStack().stackSize < reqCounts.get(r)) {
      int allowedAmount=0;
      for (int i=0; i < 9; i++) {
        if (requirements[i] != null && requirements[i].equals(r)) {
          allowedAmount--;
          if (allowedAmount < 0) {
            requirements[i]=null;
            filteredReqsToFulfill++;
          }
        }
      }
      reqCounts.remove(r);
    }
  }
  if (filteredReqsToFulfill > 0) {
    for (int i=0; i < 9; i++) {
      if (filteredReqsToFulfill == 0) {
        break;
      }
      if (isPatternSlotSet(i) && requirements[i] == null) {
        ItemStack inputStack=inventoryPattern.getStackInSlot(i);
        if (inputStack != null) {
          for (int j=0; j < 9; j++) {
            ItemStack comparedStack=inventoryPublic.getStackInSlot(j);
            if (comparedStack == null) {
              continue;
            }
            Requirement r=new Requirement(this,j);
            if (comparedStack.stackSize <= reqCounts.get(r)) {
              continue;
            }
            if (StackHelper.isMatchingItem(inputStack,comparedStack,true,false)) {
              requirements[i]=r;
              filteredReqsToFulfill--;
              reqCounts.adjustOrPutValue(r,1,1);
              break;
            }
          }
        }
      }
    }
  }
  Map<EnumFacing,IInventory> invs=new HashMap<EnumFacing,IInventory>();
  if (filteredReqsToFulfill > 0 || missingCount > 0) {
    for (int i=2; i < 6; i++) {
      TileEntity neighbor=getTile(EnumFacing.getFront(i));
      if (neighbor instanceof IInventory) {
        invs.put(EnumFacing.getFront(i),(IInventory)neighbor);
      }
    }
  }
  if (filteredReqsToFulfill > 0) {
    for (    EnumFacing dir : invs.keySet()) {
      if (filteredReqsToFulfill == 0) {
        break;
      }
      IInventory inv=invs.get(dir);
      Iterable<IInvSlot> iterator=InventoryIterator.getIterable(inv,dir);
      for (      IInvSlot slot : iterator) {
        if (filteredReqsToFulfill == 0) {
          break;
        }
        ItemStack comparedStack=slot.getStackInSlot();
        if (comparedStack == null || !slot.canTakeStackFromSlot(comparedStack)) {
          continue;
        }
        Requirement r=new Requirement(inv,slot.getIndex());
        if (comparedStack.stackSize <= reqCounts.get(r)) {
          continue;
        }
        for (int j=0; j < 9; j++) {
          ItemStack inputStack=inventoryPattern.getStackInSlot(j);
          if (isPatternSlotSet(j) && requirements[j] == null && inputStack != null) {
            if (StackHelper.isMatchingItem(inputStack,comparedStack,true,false)) {
              filteredReqsToFulfill--;
              requirements[j]=r;
              reqCounts.adjustOrPutValue(r,1,1);
              break;
            }
          }
        }
      }
    }
  }
  if (filteredReqsToFulfill > 0) {
    return false;
  }
  boolean foundMissing=false;
  if (missingCount > 0) {
    for (int i=0; i < 9; i++) {
      Requirement r=new Requirement(this,i);
      if (reqCounts.contains(r)) {
        continue;
      }
      if (validMissing(r,missingCount)) {
        foundMissing=true;
        for (int j=0; j < 9; j++) {
          if (requirements[j] == null && isPatternSlotSet(j) && inventoryPattern.getStackInSlot(j) == null) {
            requirements[j]=r;
          }
        }
        reqCounts.adjustOrPutValue(r,missingCount,missingCount);
        missingCount=0;
        break;
      }
    }
  }
  if (missingCount > 0) {
    for (    EnumFacing dir : invs.keySet()) {
      if (foundMissing) {
        break;
      }
      IInventory inv=invs.get(dir);
      Iterable<IInvSlot> iterator=InventoryIterator.getIterable(inv,dir);
      for (      IInvSlot slot : iterator) {
        if (foundMissing) {
          break;
        }
        Requirement r=new Requirement(inv,slot.getIndex());
        if (reqCounts.contains(r)) {
          continue;
        }
        if (validMissing(r,missingCount)) {
          foundMissing=true;
          for (int j=0; j < 9; j++) {
            if (requirements[j] == null && isPatternSlotSet(j) && inventoryPattern.getStackInSlot(j) == null) {
              requirements[j]=r;
            }
          }
          reqCounts.adjustOrPutValue(r,missingCount,missingCount);
          missingCount=0;
          break;
        }
      }
    }
  }
  if (missingCount > 0) {
    return false;
  }
  ItemStack pkg;
  if (input.getItem() instanceof ItemPackage) {
    pkg=input.copy();
  }
 else {
    pkg=new ItemStack(BuildCraftSilicon.packageItem);
  }
  NBTTagCompound pkgTag=NBTUtils.getItemData(pkg);
  boolean broken=false;
  for (int i=0; i < 9; i++) {
    if (isPatternSlotSet(i)) {
      if (requirements[i] == null) {
        BCLog.logger.error(""String_Node_Str"" + xCoord + ""String_Node_Str""+ yCoord+ ""String_Node_Str""+ zCoord+ ""String_Node_Str""+ i+ ""String_Node_Str"");
        broken=true;
        continue;
      }
      ItemStack usedStack=requirements[i].decrStackSize(1);
      if (usedStack == null) {
        BCLog.logger.error(""String_Node_Str"" + xCoord + ""String_Node_Str""+ yCoord+ ""String_Node_Str""+ zCoord+ ""String_Node_Str""+ i+ ""String_Node_Str"");
        broken=true;
        continue;
      }
      NBTTagCompound itemTag=new NBTTagCompound();
      usedStack.writeToNBT(itemTag);
      pkgTag.setTag(""String_Node_Str"" + i,itemTag);
    }
  }
  if (broken) {
    return false;
  }
  ItemPackage.update(pkg);
  decrStackSize(9,1);
  setInventorySlotContents(11,pkg);
  return true;
}",0.9977359558511392
156628,"private ItemStack getResult(InventoryCrafting crafting){
  ItemStack oneColorPipeStack=null;
  ItemStack pipeStack=null;
  boolean hasDifferentColorPipes=false;
  boolean hasDifferentPipes=false;
  boolean isBleach=false;
  ItemStack dye=null;
  for (int i=0; i < 9; i++) {
    ItemStack stack=crafting.getStackInSlot(i);
    if (stack == null || stack.getItem() == null || stack.stackSize == 0) {
      continue;
    }
    if (stack.getItem() instanceof ItemPipe) {
      if (pipeStack == null) {
        pipeStack=new ItemStack(stack.getItem(),1,0);
        oneColorPipeStack=new ItemStack(stack.getItem(),1,stack.getItemDamage());
      }
 else {
        if (stack.getItem() == pipeStack.getItem()) {
          pipeStack.stackSize++;
          if (oneColorPipeStack.getItemDamage() == oneColorPipeStack.getItemDamage()) {
            oneColorPipeStack.stackSize++;
          }
 else {
            hasDifferentColorPipes=true;
          }
        }
 else {
          hasDifferentColorPipes=true;
          hasDifferentPipes=true;
        }
      }
    }
 else     if (stack.getItem() == Items.water_bucket) {
      isBleach=true;
    }
 else     if (ColorUtils.isDye(stack)) {
      dye=stack;
    }
  }
  if (isBleach && dye != null) {
    return null;
  }
 else   if (pipeStack != null && (isBleach || (dye != null && pipeStack.stackSize == 8)) && !hasDifferentPipes) {
    ItemStack result=pipeStack;
    if (dye != null) {
      result.setItemDamage(ColorUtils.getColorIDFromDye(dye) + 1);
    }
    return result;
  }
  return null;
}","private ItemStack getResult(InventoryCrafting crafting){
  ItemStack oneColorPipeStack=null;
  ItemStack pipeStack=null;
  boolean hasDifferentPipes=false;
  boolean isBleach=false;
  ItemStack dye=null;
  for (int i=0; i < 9; i++) {
    ItemStack stack=crafting.getStackInSlot(i);
    if (stack == null || stack.getItem() == null || stack.stackSize == 0) {
      continue;
    }
    if (stack.getItem() instanceof ItemPipe) {
      if (pipeStack == null) {
        pipeStack=new ItemStack(stack.getItem(),1,0);
        oneColorPipeStack=new ItemStack(stack.getItem(),1,stack.getItemDamage());
      }
 else {
        if (stack.getItem() == pipeStack.getItem()) {
          pipeStack.stackSize++;
          if (oneColorPipeStack.getItemDamage() == oneColorPipeStack.getItemDamage()) {
            oneColorPipeStack.stackSize++;
          }
        }
 else {
          hasDifferentPipes=true;
        }
      }
    }
 else     if (stack.getItem() == Items.water_bucket) {
      isBleach=true;
    }
 else     if (ColorUtils.isDye(stack)) {
      dye=stack;
    }
  }
  if (isBleach && dye != null) {
    return null;
  }
 else   if (pipeStack != null && (isBleach || (dye != null && pipeStack.stackSize == 8)) && !hasDifferentPipes) {
    ItemStack result=pipeStack;
    if (dye != null) {
      result.setItemDamage(ColorUtils.getColorIDFromDye(dye) + 1);
    }
    return result;
  }
  return null;
}",0.945615227736234
156629,"public void initFromPipe(Class<? extends Pipe> pipeClass){
  capacity=LIQUID_IN_PIPE;
  flowRate=fluidCapacities.get(pipeClass);
  travelDelay=MathUtils.clamp(Math.round(16 / (flowRate / 10)),1,MAX_TRAVEL_DELAY);
}","public void initFromPipe(Class<? extends Pipe<?>> pipeClass){
  capacity=LIQUID_IN_PIPE;
  flowRate=fluidCapacities.get(pipeClass);
  travelDelay=MathUtils.clamp(Math.round(16 / (flowRate / 10)),1,MAX_TRAVEL_DELAY);
}",0.9930394431554525
156630,"private short computeCurrentConnectionStatesAndTickFlows(short newTimeSlot){
  short outputCount=0;
  for (  EnumFacing direction : orientations) {
    sections[direction.ordinal()].setTime(newTimeSlot);
    sections[direction.ordinal()].moveFluids();
    if (direction == null) {
      continue;
    }
    if (transferState[direction.ordinal()] == TransferState.Input) {
      inputTTL[direction.ordinal()]--;
      if (inputTTL[direction.ordinal()] <= 0) {
        transferState[direction.ordinal()]=TransferState.None;
      }
      continue;
    }
    if (!container.pipe.outputOpen(direction)) {
      transferState[direction.ordinal()]=TransferState.None;
      continue;
    }
    if (outputCooldown[direction.ordinal()] > 0) {
      outputCooldown[direction.ordinal()]--;
      continue;
    }
    if (outputTTL[direction.ordinal()] <= 0) {
      transferState[direction.ordinal()]=TransferState.None;
      outputCooldown[direction.ordinal()]=OUTPUT_COOLDOWN;
      outputTTL[direction.ordinal()]=OUTPUT_TTL;
      continue;
    }
    if (canReceiveCache[direction.ordinal()] && outputOpen(direction)) {
      transferState[direction.ordinal()]=TransferState.Output;
      outputCount++;
    }
  }
  return outputCount;
}","private short computeCurrentConnectionStatesAndTickFlows(short newTimeSlot){
  short outputCount=0;
  for (  EnumFacing direction : orientations) {
    sections[direction.ordinal()].setTime(newTimeSlot);
    sections[direction.ordinal()].moveFluids();
    if (transferState[direction.ordinal()] == TransferState.Input) {
      inputTTL[direction.ordinal()]--;
      if (inputTTL[direction.ordinal()] <= 0) {
        transferState[direction.ordinal()]=TransferState.None;
      }
      continue;
    }
    if (!container.pipe.outputOpen(direction)) {
      transferState[direction.ordinal()]=TransferState.None;
      continue;
    }
    if (outputCooldown[direction.ordinal()] > 0) {
      outputCooldown[direction.ordinal()]--;
      continue;
    }
    if (outputTTL[direction.ordinal()] <= 0) {
      transferState[direction.ordinal()]=TransferState.None;
      outputCooldown[direction.ordinal()]=OUTPUT_COOLDOWN;
      outputTTL[direction.ordinal()]=OUTPUT_TTL;
      continue;
    }
    if (canReceiveCache[direction.ordinal()] && outputOpen(direction)) {
      transferState[direction.ordinal()]=TransferState.Output;
      outputCount++;
    }
  }
  return outputCount;
}",0.978829389788294
156631,"public void initFromPipe(Class<? extends Pipe> pipeClass){
  capacity=25 * Math.min(1000,BuildCraftTransport.pipeFluidsBaseFlowRate);
  flowRate=fluidCapacities.get(pipeClass);
  travelDelay=MathUtils.clamp(Math.round(16F / (flowRate / 10)),1,MAX_TRAVEL_DELAY);
}","public void initFromPipe(Class<? extends Pipe> pipeClass){
  capacity=25 * Math.min(1000,BuildCraftTransport.pipeFluidsBaseFlowRate);
  flowRate=fluidCapacities.get(pipeClass);
  travelDelay=MathUtils.clamp(Math.round(16F / (flowRate / BuildCraftTransport.pipeFluidsBaseFlowRate)),1,MAX_TRAVEL_DELAY);
}",0.92226148409894
156632,"private void computeTTLs(){
  for (int i=0; i < 6; i++) {
    if (transferState[i] == TransferState.Input) {
      if (inputTTL[i] > 0) {
        inputTTL[i]--;
      }
 else {
        transferState[i]=TransferState.None;
      }
    }
    if (outputCooldown[i] > 0) {
      outputCooldown[i]--;
    }
 else {
      if (outputTTL[i] > 0) {
        outputTTL[i]--;
      }
 else {
        transferState[i]=TransferState.None;
      }
    }
  }
}","private void computeTTLs(){
  for (int i=0; i < 6; i++) {
    if (transferState[i] == TransferState.Input) {
      if (inputTTL[i] > 0) {
        inputTTL[i]--;
      }
 else {
        transferState[i]=TransferState.None;
      }
    }
    if (outputCooldown[i] > 0) {
      outputCooldown[i]--;
    }
  }
}",0.8069241011984021
156633,"private void moveFromPipe(int outputCount){
  if (outputCount > 0) {
    for (    ForgeDirection o : directions) {
      if (transferState[o.ordinal()] == TransferState.Output) {
        TileEntity target=this.container.getTile(o);
        if (!(target instanceof IFluidHandler)) {
          continue;
        }
        PipeSection section=sections[o.ordinal()];
        FluidStack liquidToPush=new FluidStack(fluidType,section.drain(flowRate,false));
        if (liquidToPush.amount > 0) {
          int filled=((IFluidHandler)target).fill(o.getOpposite(),liquidToPush,true);
          section.drain(filled,true);
          if (filled <= 0) {
            outputTTL[o.ordinal()]--;
          }
        }
      }
    }
  }
}","private void moveFromPipe(int outputCount){
  if (outputCount > 0) {
    for (    ForgeDirection o : directions) {
      if (transferState[o.ordinal()] == TransferState.Output) {
        TileEntity target=this.container.getTile(o);
        if (!(target instanceof IFluidHandler)) {
          continue;
        }
        PipeSection section=sections[o.ordinal()];
        FluidStack liquidToPush=new FluidStack(fluidType,section.drain(flowRate,false));
        if (liquidToPush.amount > 0) {
          int filled=((IFluidHandler)target).fill(o.getOpposite(),liquidToPush,true);
          if (filled <= 0) {
            outputTTL[o.ordinal()]--;
          }
 else {
            section.drain(filled,true);
          }
        }
      }
    }
  }
}",0.9332425068119892
156634,"@Override public ItemStack craft(ItemStack input,List<ItemStack> expansions,boolean preview){
  PipeWire wire=null;
  ItemStack facade=null;
  for (  ItemStack stack : expansions) {
    if (wire == null && stack.getItem() instanceof ItemPipeWire) {
      wire=PipeWire.fromOrdinal(stack.getItemDamage());
      if (!preview) {
        stack.stackSize--;
      }
    }
 else     if (facade == null && (stack.getItem() instanceof ItemFacade || stack.getItem() == BuildCraftTransport.pipeWire)) {
      facade=stack;
      if (!preview) {
        stack.stackSize--;
      }
    }
  }
  if (wire != null && facade != null) {
    ItemFacade.FacadeState[] states=ItemFacade.getFacadeStates(input);
    ItemFacade.FacadeState additionalState;
    if (facade.getItem() == BuildCraftTransport.plugItem) {
      additionalState=ItemFacade.FacadeState.createTransparent(wire);
    }
 else {
      additionalState=ItemFacade.getFacadeStates(facade)[0];
      additionalState=ItemFacade.FacadeState.create(additionalState.block,additionalState.metadata,wire);
    }
    for (int i=0; i < states.length; i++) {
      if (states[i].wire == wire) {
        states[i]=additionalState;
        return ItemFacade.getFacade(states);
      }
    }
    return ItemFacade.getFacade(JavaTools.concat(states,new ItemFacade.FacadeState[]{additionalState}));
  }
 else {
    return null;
  }
}","@Override public ItemStack craft(ItemStack input,List<ItemStack> expansions,boolean preview){
  PipeWire wire=null;
  ItemStack facade=null;
  for (  ItemStack stack : expansions) {
    if (wire == null && stack.getItem() instanceof ItemPipeWire) {
      wire=PipeWire.fromOrdinal(stack.getItemDamage());
      if (!preview) {
        stack.stackSize--;
      }
    }
 else     if (facade == null && (stack.getItem() instanceof ItemFacade || stack.getItem() == BuildCraftTransport.pipeWire)) {
      facade=stack;
      if (!preview) {
        stack.stackSize--;
      }
    }
  }
  if (wire != null && facade != null) {
    ItemFacade.FacadeState[] states=ItemFacade.getFacadeStates(input);
    ItemFacade.FacadeState additionalState;
    if (facade.getItem() == BuildCraftTransport.plugItem) {
      additionalState=ItemFacade.FacadeState.createTransparent(wire);
    }
 else {
      additionalState=ItemFacade.getFacadeStates(facade)[0];
      additionalState=new ItemFacade.FacadeState(additionalState.block,additionalState.metadata,wire,additionalState.hollow);
    }
    for (int i=0; i < states.length; i++) {
      if (states[i].wire == wire) {
        states[i]=additionalState;
        return ItemFacade.getFacade(states);
      }
    }
    return ItemFacade.getFacade(JavaTools.concat(states,new ItemFacade.FacadeState[]{additionalState}));
  }
 else {
    return null;
  }
}",0.9738372093023256
156635,"public void initFromPipe(Class<? extends Pipe> pipeClass){
  capacity=LIQUID_IN_PIPE;
  flowRate=fluidCapacities.get(pipeClass);
  travelDelay=MathUtils.clamp(Math.round(16F / (flowRate / 10)),1,MAX_TRAVEL_DELAY);
}","public void initFromPipe(Class<? extends Pipe> pipeClass){
  capacity=LIQUID_IN_PIPE;
  flowRate=fluidCapacities.get(pipeClass);
  travelDelay=MathUtils.clamp(Math.round(16F / (flowRate / BuildCraftTransport.pipeFluidsBaseFlowRate)),1,MAX_TRAVEL_DELAY);
}",0.9063829787234042
156636,"private void computeTTLs(){
  for (int i=0; i < 6; i++) {
    if (transferState[i] == TransferState.Input) {
      if (inputTTL[i] > 0) {
        inputTTL[i]--;
      }
 else {
        transferState[i]=TransferState.None;
      }
    }
    if (outputCooldown[i] > 0) {
      outputCooldown[i]--;
    }
 else {
      if (outputTTL[i] > 0) {
        outputTTL[i]--;
      }
 else {
        transferState[i]=TransferState.None;
      }
    }
  }
}","private void computeTTLs(){
  for (int i=0; i < 6; i++) {
    if (transferState[i] == TransferState.Input) {
      if (inputTTL[i] > 0) {
        inputTTL[i]--;
      }
 else {
        transferState[i]=TransferState.None;
      }
    }
    if (outputCooldown[i] > 0) {
      outputCooldown[i]--;
    }
  }
}",0.8069241011984021
156637,"private void moveFromPipe(int outputCount){
  if (outputCount > 0) {
    for (    ForgeDirection o : directions) {
      if (transferState[o.ordinal()] == TransferState.Output) {
        TileEntity target=this.container.getTile(o);
        if (!(target instanceof IFluidHandler)) {
          continue;
        }
        PipeSection section=sections[o.ordinal()];
        FluidStack liquidToPush=new FluidStack(fluidType,section.drain(flowRate,false));
        if (liquidToPush.amount > 0) {
          int filled=((IFluidHandler)target).fill(o.getOpposite(),liquidToPush,true);
          section.drain(filled,true);
          if (filled <= 0) {
            outputTTL[o.ordinal()]--;
          }
        }
      }
    }
  }
}","private void moveFromPipe(int outputCount){
  if (outputCount > 0) {
    for (    ForgeDirection o : directions) {
      if (transferState[o.ordinal()] == TransferState.Output) {
        TileEntity target=this.container.getTile(o);
        if (!(target instanceof IFluidHandler)) {
          continue;
        }
        PipeSection section=sections[o.ordinal()];
        FluidStack liquidToPush=new FluidStack(fluidType,section.drain(flowRate,false));
        if (liquidToPush.amount > 0) {
          int filled=((IFluidHandler)target).fill(o.getOpposite(),liquidToPush,true);
          if (filled <= 0) {
            outputTTL[o.ordinal()]--;
          }
 else {
            section.drain(filled,true);
          }
        }
      }
    }
  }
}",0.9332425068119892
156638,"@Override public ItemStack craft(ItemStack input,List<ItemStack> expansions,boolean preview){
  PipeWire wire=null;
  ItemStack facade=null;
  for (  ItemStack stack : expansions) {
    if (wire == null && stack.getItem() instanceof ItemPipeWire) {
      wire=PipeWire.fromOrdinal(stack.getItemDamage());
      if (!preview) {
        stack.stackSize--;
      }
    }
 else     if (facade == null && (stack.getItem() instanceof ItemFacade || stack.getItem() == BuildCraftTransport.pipeWire)) {
      facade=stack;
      if (!preview) {
        stack.stackSize--;
      }
    }
  }
  if (wire != null && facade != null) {
    ItemFacade.FacadeState[] states=ItemFacade.getFacadeStates(input);
    ItemFacade.FacadeState additionalState;
    if (facade.getItem() == BuildCraftTransport.plugItem) {
      additionalState=ItemFacade.FacadeState.createTransparent(wire);
    }
 else {
      additionalState=ItemFacade.getFacadeStates(facade)[0];
      additionalState=ItemFacade.FacadeState.create(additionalState.block,additionalState.metadata,wire);
    }
    for (int i=0; i < states.length; i++) {
      if (states[i].wire == wire) {
        states[i]=additionalState;
        return ItemFacade.getFacade(states);
      }
    }
    return ItemFacade.getFacade(JavaTools.concat(states,new ItemFacade.FacadeState[]{additionalState}));
  }
 else {
    return null;
  }
}","@Override public ItemStack craft(ItemStack input,List<ItemStack> expansions,boolean preview){
  PipeWire wire=null;
  ItemStack facade=null;
  for (  ItemStack stack : expansions) {
    if (wire == null && stack.getItem() instanceof ItemPipeWire) {
      wire=PipeWire.fromOrdinal(stack.getItemDamage());
      if (!preview) {
        stack.stackSize--;
      }
    }
 else     if (facade == null && (stack.getItem() instanceof ItemFacade || stack.getItem() == BuildCraftTransport.pipeWire)) {
      facade=stack;
      if (!preview) {
        stack.stackSize--;
      }
    }
  }
  if (wire != null && facade != null) {
    ItemFacade.FacadeState[] states=ItemFacade.getFacadeStates(input);
    ItemFacade.FacadeState additionalState;
    if (facade.getItem() == BuildCraftTransport.plugItem) {
      additionalState=ItemFacade.FacadeState.createTransparent(wire);
    }
 else {
      additionalState=ItemFacade.getFacadeStates(facade)[0];
      additionalState=new ItemFacade.FacadeState(additionalState.block,additionalState.metadata,wire,additionalState.hollow);
    }
    for (int i=0; i < states.length; i++) {
      if (states[i].wire == wire) {
        states[i]=additionalState;
        return ItemFacade.getFacade(states);
      }
    }
    return ItemFacade.getFacade(JavaTools.concat(states,new ItemFacade.FacadeState[]{additionalState}));
  }
 else {
    return null;
  }
}",0.9738372093023256
156639,"public final void loadFromNBT(NBTTagCompound nbt){
  loadSelfFromNBT(nbt.getCompoundTag(""String_Node_Str""));
  if (nbt.hasKey(""String_Node_Str"")) {
    NBTTagCompound sub=nbt.getCompoundTag(""String_Node_Str"");
    try {
      Class<?> aiRobotClass=null;
      if (sub.hasKey(""String_Node_Str"")) {
        aiRobotClass=RobotManager.getAIRobotByLegacyClassName(sub.getString(""String_Node_Str""));
      }
 else {
        aiRobotClass=RobotManager.getAIRobotByName(sub.getString(""String_Node_Str""));
      }
      if (aiRobotClass != null) {
        delegateAI=(AIRobot)aiRobotClass.getConstructor(EntityRobotBase.class).newInstance(robot);
        if (delegateAI.canLoadFromNBT()) {
          delegateAI.parentAI=this;
          delegateAI.loadFromNBT(sub);
        }
      }
    }
 catch (    Throwable e) {
      e.printStackTrace();
    }
  }
}","public final void loadFromNBT(NBTTagCompound nbt){
  loadSelfFromNBT(nbt.getCompoundTag(""String_Node_Str""));
  if (nbt.hasKey(""String_Node_Str"")) {
    NBTTagCompound sub=nbt.getCompoundTag(""String_Node_Str"");
    try {
      Class<?> aiRobotClass=null;
      if (sub.hasKey(""String_Node_Str"")) {
        aiRobotClass=RobotManager.getAIRobotByLegacyClassName(sub.getString(""String_Node_Str""));
      }
 else {
        aiRobotClass=RobotManager.getAIRobotByName(sub.getString(""String_Node_Str""));
      }
      if (aiRobotClass != null) {
        delegateAI=(AIRobot)aiRobotClass.getConstructor(EntityRobotBase.class).newInstance(robot);
        delegateAI.parentAI=this;
        if (delegateAI.canLoadFromNBT()) {
          delegateAI.loadFromNBT(sub);
        }
      }
    }
 catch (    Throwable e) {
      e.printStackTrace();
    }
  }
}",0.9442467378410438
156640,"@Override public ResourceLocation getTexture(){
  return FluidRenderer.getFluidSheet(fluid);
}","@Override public ResourceLocation getTexture(){
  return TextureMap.locationBlocksTexture;
}",0.6989247311827957
156641,"@Override public void draw(GuiBuildCraft gui,int guiX,int guiY,int mouseX,int mouseY){
  if (tank == null) {
    return;
  }
  FluidStack fluidStack=tank.getFluid();
  if (fluidStack == null || fluidStack.amount <= 0 || fluidStack.getFluid() == null) {
    return;
  }
  TextureAtlasSprite liquidIcon=FluidRenderer.getFluidTexture(fluidStack,false);
  if (liquidIcon == null) {
    return;
  }
  float scale=Math.min(fluidStack.amount,tank.getCapacity()) / (float)tank.getCapacity();
  gui.bindTexture(FluidRenderer.getFluidSheet(fluidStack));
  for (int col=0; col < w / 16; col++) {
    for (int row=0; row <= h / 16; row++) {
      gui.drawTexturedModalRect(guiX + x + col * 16,guiY + y + row * 16 - 1,liquidIcon,16,16);
    }
  }
  gui.bindTexture(gui.texture);
  gui.drawTexturedModalRect(guiX + x,guiY + y - 1,x,y - 1,w,h - (int)Math.floor(h * scale) + 1);
  gui.drawTexturedModalRect(guiX + x,guiY + y,u,v,w,h);
}","@Override public void draw(GuiBuildCraft gui,int guiX,int guiY,int mouseX,int mouseY){
  if (tank == null) {
    return;
  }
  FluidStack fluidStack=tank.getFluid();
  if (fluidStack == null || fluidStack.amount <= 0 || fluidStack.getFluid() == null) {
    return;
  }
  TextureAtlasSprite liquidIcon=FluidRenderer.getFluidTexture(fluidStack,false);
  if (liquidIcon == null) {
    return;
  }
  float scale=Math.min(fluidStack.amount,tank.getCapacity()) / (float)tank.getCapacity();
  gui.bindTexture(TextureMap.locationBlocksTexture);
  for (int col=0; col < w / 16; col++) {
    for (int row=0; row <= h / 16; row++) {
      gui.drawTexturedModalRect(guiX + x + col * 16,guiY + y + row * 16 - 1,liquidIcon,16,16);
    }
  }
  gui.bindTexture(gui.texture);
  gui.drawTexturedModalRect(guiX + x,guiY + y - 1,x,y - 1,w,h - (int)Math.floor(h * scale) + 1);
  gui.drawTexturedModalRect(guiX + x,guiY + y,u,v,w,h);
}",0.96126568466994
156642,"@Override public void breakBlock(World world,BlockPos pos,IBlockState state){
  TileEntity tile=world.getTileEntity(pos);
  if (tile != null && tile instanceof TileTank) {
    TileTank tank=(TileTank)tile;
    tank.onBlockBreak();
  }
  TileEntity tileAbove=world.getTileEntity(x,y + 1,z);
  TileEntity tileBelow=world.getTileEntity(x,y - 1,z);
  super.breakBlock(world,pos,block,par6);
  if (tileAbove instanceof TileTank) {
    ((TileTank)tileAbove).updateComparators();
  }
  if (tileBelow instanceof TileTank) {
    ((TileTank)tileBelow).updateComparators();
  }
}","@Override public void breakBlock(World world,BlockPos pos,IBlockState state){
  TileEntity tile=world.getTileEntity(pos);
  if (tile != null && tile instanceof TileTank) {
    TileTank tank=(TileTank)tile;
    tank.onBlockBreak();
  }
  TileEntity tileAbove=world.getTileEntity(pos.up());
  TileEntity tileBelow=world.getTileEntity(pos.down());
  super.breakBlock(world,pos,state);
  if (tileAbove instanceof TileTank) {
    ((TileTank)tileAbove).updateComparators();
    world.setBlockState(pos.up(),world.getBlockState(pos.up()).withProperty(JOINED_BELOW,false));
  }
  if (tileBelow instanceof TileTank) {
    ((TileTank)tileBelow).updateComparators();
  }
}",0.7550854353132628
156643,"@Mod.EventHandler public void load(FMLInitializationEvent evt){
  NetworkRegistry.INSTANCE.registerGuiHandler(instance,new FactoryGuiHandler());
  CoreProxy.proxy.registerTileEntity(TileMiningWell.class,""String_Node_Str"");
  CoreProxy.proxy.registerTileEntity(TileAutoWorkbench.class,""String_Node_Str"");
  CoreProxy.proxy.registerTileEntity(TilePump.class,""String_Node_Str"");
  CoreProxy.proxy.registerTileEntity(TileFloodGate.class,""String_Node_Str"");
  CoreProxy.proxy.registerTileEntity(TileTank.class,""String_Node_Str"");
  CoreProxy.proxy.registerTileEntity(TileRefinery.class,""String_Node_Str"");
  CoreProxy.proxy.registerTileEntity(TileHopper.class,""String_Node_Str"");
  FactoryProxy.proxy.initializeTileEntities();
  BuilderAPI.schematicRegistry.registerSchematicBlock(refineryBlock,SchematicRefinery.class);
  BuilderAPI.schematicRegistry.registerSchematicBlock(tankBlock,SchematicTileIgnoreState.class);
  BuilderAPI.schematicRegistry.registerSchematicBlock(pumpBlock,SchematicPump.class);
  BuilderAPI.schematicRegistry.registerSchematicBlock(miningWellBlock,SchematicTileIgnoreState.class);
  BuilderAPI.schematicRegistry.registerSchematicBlock(floodGateBlock,SchematicTileIgnoreState.class);
  BuilderAPI.schematicRegistry.registerSchematicBlock(autoWorkbenchBlock,SchematicAutoWorkbench.class);
  BuilderAPI.schematicRegistry.registerSchematicBlock(hopperBlock,SchematicTile.class);
  BuilderAPI.schematicRegistry.registerSchematicBlock(plainPipeBlock,SchematicFree.class);
  aLotOfCraftingAchievement=BuildCraftCore.achievementManager.registerAchievement(new Achievement(""String_Node_Str"",""String_Node_Str"",1,2,autoWorkbenchBlock,BuildCraftCore.woodenGearAchievement));
  straightDownAchievement=BuildCraftCore.achievementManager.registerAchievement(new Achievement(""String_Node_Str"",""String_Node_Str"",5,2,miningWellBlock,BuildCraftCore.ironGearAchievement));
  refineAndRedefineAchievement=BuildCraftCore.achievementManager.registerAchievement(new Achievement(""String_Node_Str"",""String_Node_Str"",10,0,refineryBlock,BuildCraftCore.diamondGearAchievement));
  if (BuildCraftCore.loadDefaultRecipes) {
    loadRecipes();
  }
}","@Mod.EventHandler public void load(FMLInitializationEvent evt){
  NetworkRegistry.INSTANCE.registerGuiHandler(instance,new FactoryGuiHandler());
  CoreProxy.proxy.registerTileEntity(TileMiningWell.class,""String_Node_Str"",""String_Node_Str"");
  CoreProxy.proxy.registerTileEntity(TileAutoWorkbench.class,""String_Node_Str"",""String_Node_Str"");
  CoreProxy.proxy.registerTileEntity(TilePump.class,""String_Node_Str"",""String_Node_Str"");
  CoreProxy.proxy.registerTileEntity(TileFloodGate.class,""String_Node_Str"",""String_Node_Str"");
  CoreProxy.proxy.registerTileEntity(TileTank.class,""String_Node_Str"",""String_Node_Str"");
  CoreProxy.proxy.registerTileEntity(TileRefinery.class,""String_Node_Str"",""String_Node_Str"");
  CoreProxy.proxy.registerTileEntity(TileChute.class,""String_Node_Str"",""String_Node_Str"");
  FactoryProxy.proxy.initializeTileEntities();
  BuilderAPI.schematicRegistry.registerSchematicBlock(refineryBlock,SchematicRefinery.class);
  BuilderAPI.schematicRegistry.registerSchematicBlock(tankBlock,SchematicTileIgnoreState.class);
  BuilderAPI.schematicRegistry.registerSchematicBlock(pumpBlock,SchematicPump.class);
  BuilderAPI.schematicRegistry.registerSchematicBlock(miningWellBlock,SchematicTileIgnoreState.class);
  BuilderAPI.schematicRegistry.registerSchematicBlock(floodGateBlock,SchematicTileIgnoreState.class);
  BuilderAPI.schematicRegistry.registerSchematicBlock(autoWorkbenchBlock,SchematicAutoWorkbench.class);
  BuilderAPI.schematicRegistry.registerSchematicBlock(chuteBlock,SchematicTile.class);
  BuilderAPI.schematicRegistry.registerSchematicBlock(plainPipeBlock,SchematicFree.class);
  aLotOfCraftingAchievement=BuildCraftCore.achievementManager.registerAchievement(new Achievement(""String_Node_Str"",""String_Node_Str"",1,2,autoWorkbenchBlock,BuildCraftCore.woodenGearAchievement));
  straightDownAchievement=BuildCraftCore.achievementManager.registerAchievement(new Achievement(""String_Node_Str"",""String_Node_Str"",5,2,miningWellBlock,BuildCraftCore.ironGearAchievement));
  refineAndRedefineAchievement=BuildCraftCore.achievementManager.registerAchievement(new Achievement(""String_Node_Str"",""String_Node_Str"",10,0,refineryBlock,BuildCraftCore.diamondGearAchievement));
  if (BuildCraftCore.loadDefaultRecipes) {
    loadRecipes();
  }
}",0.9636363636363636
156644,"@Mod.EventHandler public void whiteListAppliedEnergetics(FMLInitializationEvent event){
  FMLInterModComms.sendMessage(""String_Node_Str"",""String_Node_Str"",TileAutoWorkbench.class.getCanonicalName());
  FMLInterModComms.sendMessage(""String_Node_Str"",""String_Node_Str"",TileFloodGate.class.getCanonicalName());
  FMLInterModComms.sendMessage(""String_Node_Str"",""String_Node_Str"",TileTank.class.getCanonicalName());
  FMLInterModComms.sendMessage(""String_Node_Str"",""String_Node_Str"",TileRefinery.class.getCanonicalName());
  FMLInterModComms.sendMessage(""String_Node_Str"",""String_Node_Str"",TileHopper.class.getCanonicalName());
}","@Mod.EventHandler public void whiteListAppliedEnergetics(FMLInitializationEvent event){
  FMLInterModComms.sendMessage(""String_Node_Str"",""String_Node_Str"",TileAutoWorkbench.class.getCanonicalName());
  FMLInterModComms.sendMessage(""String_Node_Str"",""String_Node_Str"",TileFloodGate.class.getCanonicalName());
  FMLInterModComms.sendMessage(""String_Node_Str"",""String_Node_Str"",TileTank.class.getCanonicalName());
  FMLInterModComms.sendMessage(""String_Node_Str"",""String_Node_Str"",TileRefinery.class.getCanonicalName());
  FMLInterModComms.sendMessage(""String_Node_Str"",""String_Node_Str"",TileChute.class.getCanonicalName());
}",0.9911788291900562
156645,"@Mod.EventHandler public void initialize(FMLPreInitializationEvent evt){
  channels=NetworkRegistry.INSTANCE.newChannel(DefaultProps.NET_CHANNEL_NAME + ""String_Node_Str"",new ChannelHandler(),new PacketHandler());
  String plc=""String_Node_Str"" + ""String_Node_Str"" + ""String_Node_Str""+ ""String_Node_Str"";
  BuildCraftCore.mainConfigManager.register(""String_Node_Str"",256,""String_Node_Str"",ConfigManager.RestartRequirement.NONE);
  BuildCraftCore.mainConfigManager.get(""String_Node_Str"").setMinValue(2).setMaxValue(256);
  BuildCraftCore.mainConfigManager.register(""String_Node_Str"",DefaultProps.PUMP_DIMENSION_LIST,plc,ConfigManager.RestartRequirement.NONE);
  reloadConfig(ConfigManager.RestartRequirement.GAME);
  miningWellBlock=(BlockMiningWell)CompatHooks.INSTANCE.getBlock(BlockMiningWell.class);
  CoreProxy.proxy.registerBlock(miningWellBlock.setUnlocalizedName(""String_Node_Str""));
  plainPipeBlock=new BlockPlainPipe();
  CoreProxy.proxy.registerBlock(plainPipeBlock.setUnlocalizedName(""String_Node_Str""));
  autoWorkbenchBlock=(BlockAutoWorkbench)CompatHooks.INSTANCE.getBlock(BlockAutoWorkbench.class);
  CoreProxy.proxy.registerBlock(autoWorkbenchBlock.setUnlocalizedName(""String_Node_Str""));
  tankBlock=(BlockTank)CompatHooks.INSTANCE.getBlock(BlockTank.class);
  CoreProxy.proxy.registerBlock(tankBlock.setUnlocalizedName(""String_Node_Str""));
  pumpBlock=(BlockPump)CompatHooks.INSTANCE.getBlock(BlockPump.class);
  CoreProxy.proxy.registerBlock(pumpBlock.setUnlocalizedName(""String_Node_Str""));
  floodGateBlock=(BlockFloodGate)CompatHooks.INSTANCE.getBlock(BlockFloodGate.class);
  CoreProxy.proxy.registerBlock(floodGateBlock.setUnlocalizedName(""String_Node_Str""));
  refineryBlock=(BlockRefinery)CompatHooks.INSTANCE.getBlock(BlockRefinery.class);
  CoreProxy.proxy.registerBlock(refineryBlock.setUnlocalizedName(""String_Node_Str""));
  hopperBlock=(BlockHopper)CompatHooks.INSTANCE.getBlock(BlockHopper.class);
  CoreProxy.proxy.registerBlock(hopperBlock.setUnlocalizedName(""String_Node_Str""));
  FactoryProxy.proxy.initializeEntityRenders();
  FMLCommonHandler.instance().bus().register(this);
  MinecraftForge.EVENT_BUS.register(this);
}","@Mod.EventHandler public void initialize(FMLPreInitializationEvent evt){
  channels=NetworkRegistry.INSTANCE.newChannel(DefaultProps.NET_CHANNEL_NAME + ""String_Node_Str"",new ChannelHandler(),new PacketHandler());
  String plc=""String_Node_Str"" + ""String_Node_Str"" + ""String_Node_Str""+ ""String_Node_Str"";
  BuildCraftCore.mainConfigManager.register(""String_Node_Str"",256,""String_Node_Str"",ConfigManager.RestartRequirement.NONE);
  BuildCraftCore.mainConfigManager.get(""String_Node_Str"").setMinValue(2).setMaxValue(256);
  BuildCraftCore.mainConfigManager.register(""String_Node_Str"",DefaultProps.PUMP_DIMENSION_LIST,plc,ConfigManager.RestartRequirement.NONE);
  reloadConfig(ConfigManager.RestartRequirement.GAME);
  miningWellBlock=(BlockMiningWell)CompatHooks.INSTANCE.getBlock(BlockMiningWell.class);
  CoreProxy.proxy.registerBlock(miningWellBlock.setUnlocalizedName(""String_Node_Str""));
  plainPipeBlock=new BlockPlainPipe();
  CoreProxy.proxy.registerBlock(plainPipeBlock.setUnlocalizedName(""String_Node_Str""));
  autoWorkbenchBlock=(BlockAutoWorkbench)CompatHooks.INSTANCE.getBlock(BlockAutoWorkbench.class);
  CoreProxy.proxy.registerBlock(autoWorkbenchBlock.setUnlocalizedName(""String_Node_Str""));
  tankBlock=(BlockTank)CompatHooks.INSTANCE.getBlock(BlockTank.class);
  CoreProxy.proxy.registerBlock(tankBlock.setUnlocalizedName(""String_Node_Str""));
  pumpBlock=(BlockPump)CompatHooks.INSTANCE.getBlock(BlockPump.class);
  CoreProxy.proxy.registerBlock(pumpBlock.setUnlocalizedName(""String_Node_Str""));
  floodGateBlock=(BlockFloodGate)CompatHooks.INSTANCE.getBlock(BlockFloodGate.class);
  CoreProxy.proxy.registerBlock(floodGateBlock.setUnlocalizedName(""String_Node_Str""));
  refineryBlock=(BlockRefinery)CompatHooks.INSTANCE.getBlock(BlockRefinery.class);
  CoreProxy.proxy.registerBlock(refineryBlock.setUnlocalizedName(""String_Node_Str""));
  chuteBlock=(BlockChute)CompatHooks.INSTANCE.getBlock(BlockChute.class);
  CoreProxy.proxy.registerBlock(chuteBlock.setUnlocalizedName(""String_Node_Str""));
  FactoryProxy.proxy.initializeEntityRenders();
  FMLCommonHandler.instance().bus().register(this);
  MinecraftForge.EVENT_BUS.register(this);
}",0.9907235621521336
156646,"public static void loadRecipes(){
  if (miningWellBlock != null) {
    CoreProxy.proxy.addCraftingRecipe(new ItemStack(miningWellBlock,1),""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",'p',""String_Node_Str"",'i',""String_Node_Str"",'g',""String_Node_Str"",'P',Items.iron_pickaxe);
  }
  if (pumpBlock != null) {
    CoreProxy.proxy.addCraftingRecipe(new ItemStack(pumpBlock),""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",'p',""String_Node_Str"",'i',""String_Node_Str"",'T',tankBlock,'g',""String_Node_Str"",'B',Items.bucket);
  }
  if (autoWorkbenchBlock != null) {
    CoreProxy.proxy.addCraftingRecipe(new ItemStack(autoWorkbenchBlock),""String_Node_Str"",'w',Blocks.crafting_table,'g',""String_Node_Str"");
    CoreProxy.proxy.addCraftingRecipe(new ItemStack(autoWorkbenchBlock),""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",'w',Blocks.crafting_table,'g',""String_Node_Str"");
  }
  if (tankBlock != null) {
    CoreProxy.proxy.addCraftingRecipe(new ItemStack(tankBlock),""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",'g',""String_Node_Str"");
  }
  if (refineryBlock != null) {
    CoreProxy.proxy.addCraftingRecipe(new ItemStack(refineryBlock),""String_Node_Str"",""String_Node_Str"",'T',tankBlock != null ? tankBlock : ""String_Node_Str"",'G',""String_Node_Str"",'R',Blocks.redstone_torch);
  }
  if (hopperBlock != null) {
    CoreProxy.proxy.addCraftingRecipe(new ItemStack(hopperBlock),""String_Node_Str"",""String_Node_Str"",'I',""String_Node_Str"",'C',Blocks.chest,'G',""String_Node_Str"");
    CoreProxy.proxy.addShapelessRecipe(new ItemStack(hopperBlock),Blocks.hopper,""String_Node_Str"");
  }
  if (floodGateBlock != null) {
    CoreProxy.proxy.addCraftingRecipe(new ItemStack(floodGateBlock),""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",'I',""String_Node_Str"",'T',tankBlock != null ? tankBlock : ""String_Node_Str"",'G',""String_Node_Str"",'F',new ItemStack(Blocks.iron_bars));
  }
}","public static void loadRecipes(){
  if (miningWellBlock != null) {
    CoreProxy.proxy.addCraftingRecipe(new ItemStack(miningWellBlock,1),""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",'p',""String_Node_Str"",'i',""String_Node_Str"",'g',""String_Node_Str"",'P',Items.iron_pickaxe);
  }
  if (pumpBlock != null) {
    CoreProxy.proxy.addCraftingRecipe(new ItemStack(pumpBlock),""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",'p',""String_Node_Str"",'i',""String_Node_Str"",'T',tankBlock,'g',""String_Node_Str"",'B',Items.bucket);
  }
  if (autoWorkbenchBlock != null) {
    CoreProxy.proxy.addCraftingRecipe(new ItemStack(autoWorkbenchBlock),""String_Node_Str"",'w',Blocks.crafting_table,'g',""String_Node_Str"");
    CoreProxy.proxy.addCraftingRecipe(new ItemStack(autoWorkbenchBlock),""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",'w',Blocks.crafting_table,'g',""String_Node_Str"");
  }
  if (tankBlock != null) {
    CoreProxy.proxy.addCraftingRecipe(new ItemStack(tankBlock),""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",'g',""String_Node_Str"");
  }
  if (refineryBlock != null) {
    CoreProxy.proxy.addCraftingRecipe(new ItemStack(refineryBlock),""String_Node_Str"",""String_Node_Str"",'T',tankBlock != null ? tankBlock : ""String_Node_Str"",'G',""String_Node_Str"",'R',Blocks.redstone_torch);
  }
  if (chuteBlock != null) {
    CoreProxy.proxy.addCraftingRecipe(new ItemStack(chuteBlock),""String_Node_Str"",""String_Node_Str"",'I',""String_Node_Str"",'C',Blocks.chest,'G',""String_Node_Str"");
    CoreProxy.proxy.addShapelessRecipe(new ItemStack(chuteBlock),Blocks.hopper,""String_Node_Str"");
  }
  if (floodGateBlock != null) {
    CoreProxy.proxy.addCraftingRecipe(new ItemStack(floodGateBlock),""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",'I',""String_Node_Str"",'T',tankBlock != null ? tankBlock : ""String_Node_Str"",'G',""String_Node_Str"",'F',new ItemStack(Blocks.iron_bars));
  }
}",0.992874109263658
156647,"@Mod.EventHandler public void remap(FMLMissingMappingsEvent event){
  for (  FMLMissingMappingsEvent.MissingMapping mapping : event.get()) {
    if (mapping.name.equals(""String_Node_Str"")) {
      if (Loader.isModLoaded(""String_Node_Str"")) {
        if (mapping.type == GameRegistry.Type.BLOCK) {
          mapping.remap(Block.getBlockFromName(""String_Node_Str""));
        }
 else         if (mapping.type == GameRegistry.Type.ITEM) {
          mapping.remap(Item.getItemFromBlock(Block.getBlockFromName(""String_Node_Str"")));
        }
      }
 else {
        mapping.warn();
      }
    }
 else     if (mapping.name.equals(""String_Node_Str"")) {
      if (Loader.isModLoaded(""String_Node_Str"")) {
        if (mapping.type == GameRegistry.Type.BLOCK) {
          mapping.remap(Block.getBlockFromName(""String_Node_Str""));
        }
 else         if (mapping.type == GameRegistry.Type.ITEM) {
          mapping.remap(Item.getItemFromBlock(Block.getBlockFromName(""String_Node_Str"")));
        }
      }
 else {
        mapping.ignore();
      }
    }
  }
}","@Mod.EventHandler public void remap(FMLMissingMappingsEvent event){
  for (  FMLMissingMappingsEvent.MissingMapping mapping : event.get()) {
    if (mapping.name.equals(""String_Node_Str"") || mapping.name.equals(""String_Node_Str"")) {
      if (Loader.isModLoaded(""String_Node_Str"")) {
        if (mapping.type == GameRegistry.Type.BLOCK) {
          mapping.remap(Block.getBlockFromName(""String_Node_Str""));
        }
 else         if (mapping.type == GameRegistry.Type.ITEM) {
          mapping.remap(Item.getItemFromBlock(Block.getBlockFromName(""String_Node_Str"")));
        }
      }
 else {
        mapping.warn();
      }
    }
 else     if (mapping.name.equals(""String_Node_Str"")) {
      if (Loader.isModLoaded(""String_Node_Str"")) {
        if (mapping.type == GameRegistry.Type.BLOCK) {
          mapping.remap(Block.getBlockFromName(""String_Node_Str""));
        }
 else         if (mapping.type == GameRegistry.Type.ITEM) {
          mapping.remap(Item.getItemFromBlock(Block.getBlockFromName(""String_Node_Str"")));
        }
      }
 else {
        mapping.ignore();
      }
    }
 else     if (mapping.name.equals(""String_Node_Str"")) {
      mapping.remap(Block.getBlockFromName(""String_Node_Str""));
    }
  }
}",0.926056338028169
156648,"@Override public Object getServerGuiElement(int id,EntityPlayer player,World world,BlockPos pos){
  if (!world.blockExists(pos)) {
    return null;
  }
  TileEntity tile=world.getTileEntity(pos);
switch (id) {
case GuiIds.AUTO_CRAFTING_TABLE:
    if (!(tile instanceof TileAutoWorkbench)) {
      return null;
    }
 else {
      return new ContainerAutoWorkbench(player.inventory,(TileAutoWorkbench)tile);
    }
case GuiIds.REFINERY:
  if (!(tile instanceof TileRefinery)) {
    return null;
  }
 else {
    return new ContainerRefinery(player.inventory,(TileRefinery)tile);
  }
case GuiIds.HOPPER:
if (!(tile instanceof TileHopper)) {
  return null;
}
 else {
  return new ContainerHopper(player.inventory,(TileHopper)tile);
}
default :
return null;
}
}","@Override public Object getServerGuiElement(int id,EntityPlayer player,World world,int x,int y,int z){
  BlockPos pos=new BlockPos(x,y,z);
  if (world.isAirBlock(pos)) {
    return null;
  }
  TileEntity tile=world.getTileEntity(pos);
switch (id) {
case GuiIds.AUTO_CRAFTING_TABLE:
    if (!(tile instanceof TileAutoWorkbench)) {
      return null;
    }
 else {
      return new ContainerAutoWorkbench(player.inventory,(TileAutoWorkbench)tile);
    }
case GuiIds.REFINERY:
  if (!(tile instanceof TileRefinery)) {
    return null;
  }
 else {
    return new ContainerRefinery(player.inventory,(TileRefinery)tile);
  }
case GuiIds.HOPPER:
if (!(tile instanceof TileChute)) {
  return null;
}
 else {
  return new ContainerChute(player.inventory,(TileChute)tile);
}
default :
return null;
}
}",0.8369987063389392
156649,"@Override public Object getClientGuiElement(int id,EntityPlayer player,World world,BlockPos pos){
  if (!world.blockExists(pos)) {
    return null;
  }
  TileEntity tile=world.getTileEntity(pos);
switch (id) {
case GuiIds.AUTO_CRAFTING_TABLE:
    if (!(tile instanceof TileAutoWorkbench)) {
      return null;
    }
 else {
      return new GuiAutoCrafting(player.inventory,world,(TileAutoWorkbench)tile);
    }
case GuiIds.REFINERY:
  if (!(tile instanceof TileRefinery)) {
    return null;
  }
 else {
    return new GuiRefinery(player.inventory,(TileRefinery)tile);
  }
case GuiIds.HOPPER:
if (!(tile instanceof TileHopper)) {
  return null;
}
 else {
  return new GuiHopper(player.inventory,(TileHopper)tile);
}
default :
return null;
}
}","@Override public Object getClientGuiElement(int id,EntityPlayer player,World world,int x,int y,int z){
  BlockPos pos=new BlockPos(x,y,z);
  if (world.isAirBlock(pos)) {
    return null;
  }
  TileEntity tile=world.getTileEntity(pos);
switch (id) {
case GuiIds.AUTO_CRAFTING_TABLE:
    if (!(tile instanceof TileAutoWorkbench)) {
      return null;
    }
 else {
      return new GuiAutoCrafting(player.inventory,world,(TileAutoWorkbench)tile);
    }
case GuiIds.REFINERY:
  if (!(tile instanceof TileRefinery)) {
    return null;
  }
 else {
    return new GuiRefinery(player.inventory,(TileRefinery)tile);
  }
case GuiIds.HOPPER:
if (!(tile instanceof TileChute)) {
  return null;
}
 else {
  return new GuiChute(player.inventory,(TileChute)tile);
}
default :
return null;
}
}",0.868421052631579
156650,"@Override public void initializeTileEntities(){
  super.initializeTileEntities();
  if (BuildCraftFactory.tankBlock != null) {
    ClientRegistry.bindTileEntitySpecialRenderer(TileTank.class,new RenderTank());
  }
  if (BuildCraftFactory.refineryBlock != null) {
    ClientRegistry.bindTileEntitySpecialRenderer(TileRefinery.class,new RenderRefinery());
    RenderingEntityBlocks.blockByEntityRenders.put(new EntityRenderIndex(BuildCraftFactory.refineryBlock,0),new RenderRefinery());
  }
  if (BuildCraftFactory.hopperBlock != null) {
    ClientRegistry.bindTileEntitySpecialRenderer(TileHopper.class,new RenderHopper());
    RenderingEntityBlocks.blockByEntityRenders.put(new EntityRenderIndex(BuildCraftFactory.hopperBlock,0),new RenderHopper());
  }
}","@Override public void initializeTileEntities(){
  super.initializeTileEntities();
  if (BuildCraftFactory.tankBlock != null) {
    ClientRegistry.bindTileEntitySpecialRenderer(TileTank.class,new RenderTank());
  }
  if (BuildCraftFactory.refineryBlock != null) {
    ClientRegistry.bindTileEntitySpecialRenderer(TileRefinery.class,new RenderRefinery());
  }
  if (BuildCraftFactory.chuteBlock != null) {
    ClientRegistry.bindTileEntitySpecialRenderer(TileChute.class,new RenderChute());
  }
}",0.7574059247397918
156651,"@Override public boolean onBlockActivated(World world,BlockPos pos,EntityPlayer entityplayer,int par6,float par7,float par8,float par9){
  if (super.onBlockActivated(world,pos,entityplayer,par6,par7,par8,par9)) {
    return true;
  }
  if (entityplayer.isSneaking()) {
    return false;
  }
  if (entityplayer.getCurrentEquippedItem() != null) {
    if (entityplayer.getCurrentEquippedItem().getItem() instanceof IItemPipe) {
      return false;
    }
  }
  if (!world.isRemote) {
    entityplayer.openGui(BuildCraftFactory.instance,GuiIds.AUTO_CRAFTING_TABLE,world,pos);
  }
  return true;
}","@Override public boolean onBlockActivated(World world,BlockPos pos,IBlockState state,EntityPlayer entityplayer,EnumFacing face,float par7,float par8,float par9){
  if (super.onBlockActivated(world,pos,state,entityplayer,face,par7,par8,par9)) {
    return true;
  }
  if (entityplayer.isSneaking()) {
    return false;
  }
  if (entityplayer.getCurrentEquippedItem() != null) {
    if (entityplayer.getCurrentEquippedItem().getItem() instanceof IItemPipe) {
      return false;
    }
  }
  if (!world.isRemote) {
    entityplayer.openGui(BuildCraftFactory.instance,GuiIds.AUTO_CRAFTING_TABLE,world,pos.getX(),pos.getY(),pos.getZ());
  }
  return true;
}",0.9115755627009646
156652,"@Override public ConnectOverride overridePipeConnection(IPipeTile.PipeType type,EnumFacing with){
  if (with.ordinal() == worldObj.getBlockMetadata(xCoord,yCoord,zCoord)) {
    return ConnectOverride.DISCONNECT;
  }
  return type == IPipeTile.PipeType.ITEM ? ConnectOverride.CONNECT : ConnectOverride.DEFAULT;
}","@Override public ConnectOverride overridePipeConnection(IPipeTile.PipeType type,EnumFacing with){
  if (BuildCraftProperties.BLOCK_FACING.getValue(worldObj.getBlockState(pos)) == with) {
    return ConnectOverride.DISCONNECT;
  }
  return type == IPipeTile.PipeType.ITEM ? ConnectOverride.CONNECT : ConnectOverride.DEFAULT;
}",0.8018867924528302
156653,"@Override public void readData(ByteBuf stream){
  super.readData(stream);
  int newLedState=stream.readUnsignedByte();
  if (newLedState != ledState) {
    ledState=newLedState;
    worldObj.markBlockRangeForRenderUpdate(xCoord,yCoord,zCoord,xCoord,yCoord,zCoord);
  }
}","@Override public void readData(ByteBuf stream){
  super.readData(stream);
  int newLedState=stream.readUnsignedByte();
  if (newLedState != ledState) {
    ledState=newLedState;
    worldObj.markBlockRangeForRenderUpdate(pos,pos);
  }
}",0.9090909090909092
156654,"/** 
 * Dig the next available piece of land if not done. As soon as it reaches bedrock, lava or goes below 0, it's considered done. 
 */
@Override public void update(){
  super.update();
  if (worldObj.isRemote) {
    return;
  }
  if (updateTracker.markTimeIfDelay(worldObj)) {
    sendNetworkUpdate();
  }
  ticksSinceAction++;
  if (mode == Mode.Off) {
    if (miner != null) {
      miner.invalidate();
      miner=null;
    }
    isDigging=false;
    return;
  }
  if (getBattery().getEnergyStored() == 0) {
    return;
  }
  if (miner == null) {
    World world=worldObj;
    int depth=pos.getY() - 1;
    while (world.getBlockState(xCoord,depth,zCoord) == BuildCraftFactory.plainPipeBlock) {
      depth=depth - 1;
    }
    if (depth < 1 || depth < yCoord - BuildCraftFactory.miningDepth || !BlockUtils.canChangeBlock(world,xCoord,depth,zCoord)) {
      isDigging=false;
      getBattery().useEnergy(0,10,false);
      return;
    }
    if (world.isAirBlock(xCoord,depth,zCoord) || world.getBlock(xCoord,depth,zCoord).isReplaceable(world,xCoord,depth,zCoord)) {
      ticksSinceAction=0;
      world.setBlock(xCoord,depth,zCoord,BuildCraftFactory.plainPipeBlock);
    }
 else {
      miner=new BlockMiner(world,this,xCoord,depth,zCoord);
    }
  }
  if (miner != null) {
    isDigging=true;
    ticksSinceAction=0;
    int usedEnergy=miner.acceptEnergy(getBattery().getEnergyStored());
    getBattery().useEnergy(usedEnergy,usedEnergy,false);
    if (miner.hasMined()) {
      if (miner.hasFailed()) {
        isDigging=false;
      }
      miner=null;
    }
  }
}","/** 
 * Dig the next available piece of land if not done. As soon as it reaches bedrock, lava or goes below 0, it's considered done. 
 */
@Override public void update(){
  super.update();
  if (worldObj.isRemote) {
    return;
  }
  if (updateTracker.markTimeIfDelay(worldObj)) {
    sendNetworkUpdate();
  }
  ticksSinceAction++;
  if (mode == Mode.Off) {
    if (miner != null) {
      miner.invalidate();
      miner=null;
    }
    isDigging=false;
    return;
  }
  if (getBattery().getEnergyStored() == 0) {
    return;
  }
  if (miner == null) {
    World world=worldObj;
    BlockPos search=pos.down();
    while (world.getBlockState(search).getBlock() == BuildCraftFactory.plainPipeBlock) {
      search=search.down();
    }
    if (search.getY() < 1 || search.getY() < pos.getY() - BuildCraftFactory.miningDepth || !BlockUtils.canChangeBlock(world,search)) {
      isDigging=false;
      getBattery().useEnergy(0,10,false);
      return;
    }
    if (world.isAirBlock(search) || world.getBlockState(search).getBlock().isReplaceable(world,search)) {
      ticksSinceAction=0;
      world.setBlockState(search,BuildCraftFactory.plainPipeBlock.getDefaultState());
    }
 else {
      miner=new BlockMiner(world,this,search);
    }
  }
  if (miner != null) {
    isDigging=true;
    ticksSinceAction=0;
    int usedEnergy=miner.acceptEnergy(getBattery().getEnergyStored());
    getBattery().useEnergy(usedEnergy,usedEnergy,false);
    if (miner.hasMined()) {
      if (miner.hasFailed()) {
        isDigging=false;
      }
      miner=null;
    }
  }
}",0.7260536398467433
156655,"@Override public void invalidate(){
  super.invalidate();
  if (miner != null) {
    miner.invalidate();
  }
  if (worldObj != null && yCoord > 2) {
    BuildCraftFactory.miningWellBlock.removePipes(worldObj,xCoord,yCoord,zCoord);
  }
}","@Override public void invalidate(){
  super.invalidate();
  if (miner != null) {
    miner.invalidate();
  }
  if (worldObj != null && pos.getY() > 2) {
    BuildCraftFactory.miningWellBlock.removePipes(worldObj,pos);
  }
}",0.915032679738562
156656,"void EFrameConnection(AxisAlignedBB bb){
  boundingBox=bb;
}","void EFrameConnection(EnumFacing... facings){
  this.facings=facings;
  AxisAlignedBB bb=new AxisAlignedBB(0.25,0.25,0.25,0.75,0.75,0.75);
  for (  EnumFacing face : facings) {
    bb=bb.addCoord(face.getFrontOffsetX() * 0.25,face.getFrontOffsetY() * 0.25,face.getFrontOffsetZ() * 0.25);
  }
  boundingBox=bb;
  connectionMap.put(facings,this);
}",0.2906403940886699
156657,"public BlockFrame(){
  super(Material.glass,CONNECTIONS);
  setHardness(0.5F);
}","public BlockFrame(){
  super(Material.glass,CONNECTIONS);
  setHardness(0.5F);
  setLightOpacity(0);
}",0.8791208791208791
156658,"private void initializeBlueprintBuilder(){
  Blueprint bpt=((FillerPattern)FillerManager.registry.getPattern(""String_Node_Str"")).getBlueprint(box,worldObj,new IStatementParameter[0],BuildCraftBuilders.frameBlock.getDefaultState());
  if (bpt != null) {
    builder=new BptBuilderBlueprint(bpt,worldObj,new BlockPos(box.xMin,pos.getY(),box.zMin));
    stage=Stage.BUILDING;
  }
}","private void initializeBlueprintBuilder(){
  PatternQuarryFrame pqf=PatternQuarryFrame.INSTANCE;
  Blueprint bpt=((FillerPattern)FillerManager.registry.getPattern(""String_Node_Str"")).getBlueprint(box,worldObj,new IStatementParameter[0],BuildCraftBuilders.frameBlock.getDefaultState());
  if (bpt != null) {
    builder=new BptBuilderBlueprint(bpt,worldObj,new BlockPos(box.xMin,pos.getY(),box.zMin));
    stage=Stage.BUILDING;
  }
}",0.9333333333333332
156659,"@Mod.EventHandler public void init(FMLInitializationEvent evt){
  BuildCraftAPI.proxy=CoreProxy.proxy;
  ChannelHandler coreChannelHandler=new ChannelHandler();
  coreChannelHandler.registerPacketType(PacketTabletMessage.class);
  channels=NetworkRegistry.INSTANCE.newChannel(DefaultProps.NET_CHANNEL_NAME + ""String_Node_Str"",coreChannelHandler,new PacketHandlerCore());
  achievementManager=new AchievementManager(""String_Node_Str"");
  FMLCommonHandler.instance().bus().register(achievementManager);
  woodenGearAchievement=achievementManager.registerAchievement(new Achievement(""String_Node_Str"",""String_Node_Str"",0,0,woodenGearItem,null));
  stoneGearAchievement=achievementManager.registerAchievement(new Achievement(""String_Node_Str"",""String_Node_Str"",2,0,stoneGearItem,woodenGearAchievement));
  ironGearAchievement=achievementManager.registerAchievement(new Achievement(""String_Node_Str"",""String_Node_Str"",4,0,ironGearItem,stoneGearAchievement));
  goldGearAchievement=achievementManager.registerAchievement(new Achievement(""String_Node_Str"",""String_Node_Str"",6,0,goldGearItem,ironGearAchievement));
  diamondGearAchievement=achievementManager.registerAchievement(new Achievement(""String_Node_Str"",""String_Node_Str"",8,0,diamondGearItem,goldGearAchievement));
  wrenchAchievement=achievementManager.registerAchievement(new Achievement(""String_Node_Str"",""String_Node_Str"",3,2,wrenchItem,stoneGearAchievement));
  engineRedstoneAchievement=BuildCraftCore.achievementManager.registerAchievement(new Achievement(""String_Node_Str"",""String_Node_Str"",1,-2,new ItemStack(engineBlock,1,0),BuildCraftCore.woodenGearAchievement));
  StatementManager.registerParameterClass(""String_Node_Str"",StatementParameterItemStack.class);
  StatementManager.registerParameterClass(""String_Node_Str"",StatementParameterItemStack.class);
  StatementManager.registerParameterClass(StatementParameterItemStack.class);
  StatementManager.registerParameterClass(StatementParameterDirection.class);
  StatementManager.registerParameterClass(StatementParameterRedstoneGateSideOnly.class);
  StatementManager.registerTriggerProvider(new DefaultTriggerProvider());
  StatementManager.registerActionProvider(new DefaultActionProvider());
  if (BuildCraftCore.modifyWorld) {
    MinecraftForge.EVENT_BUS.register(new SpringPopulate());
  }
  if (mainConfiguration.hasChanged()) {
    mainConfiguration.save();
  }
  if (BuildCraftCore.loadDefaultRecipes) {
    loadRecipes();
  }
  BCCreativeTab.get(""String_Node_Str"").setIcon(new ItemStack(BuildCraftCore.wrenchItem,1));
  EntityList.stringToClassMapping.remove(""String_Node_Str"");
  EntityList.stringToClassMapping.remove(""String_Node_Str"");
  BuilderAPI.schematicRegistry.registerSchematicBlock(engineBlock,SchematicEngine.class);
  CoreProxy.proxy.initializeRendering();
  CoreProxy.proxy.initializeEntityRendering();
  NetworkRegistry.INSTANCE.registerGuiHandler(instance,new CoreGuiHandler());
  FMLCommonHandler.instance().bus().register(TabletManagerClient.INSTANCE);
  FMLCommonHandler.instance().bus().register(TabletManagerServer.INSTANCE);
  MinecraftForge.EVENT_BUS.register(TabletManagerClient.INSTANCE);
  MinecraftForge.EVENT_BUS.register(TabletManagerServer.INSTANCE);
  TabletAPI.registerProgram(new TabletProgramMenuFactory());
  try {
    FillerManager.registry=new FillerRegistry();
    FillerManager.registry.addPattern(PatternFill.INSTANCE);
    FillerManager.registry.addPattern(new PatternFlatten());
    FillerManager.registry.addPattern(new PatternHorizon());
    FillerManager.registry.addPattern(new PatternClear());
    FillerManager.registry.addPattern(new PatternBox());
    FillerManager.registry.addPattern(new PatternPyramid());
    FillerManager.registry.addPattern(new PatternStairs());
    FillerManager.registry.addPattern(new PatternCylinder());
    FillerManager.registry.addPattern(new PatternFrame());
  }
 catch (  Error error) {
    BCLog.logErrorAPI(""String_Node_Str"",error,IFillerPattern.class);
    throw error;
  }
  StatementManager.registerParameterClass(PatternParameterYDir.class);
  StatementManager.registerParameterClass(PatternParameterXZDir.class);
  StatementManager.registerParameterClass(PatternParameterCenter.class);
  StatementManager.registerParameterClass(PatternParameterHollow.class);
  ListRegistry.registerHandler(new ListMatchHandlerClass());
  ListMatchHandlerClass.itemClasses.add(ItemFood.class);
}","@Mod.EventHandler public void init(FMLInitializationEvent evt){
  BuildCraftAPI.proxy=CoreProxy.proxy;
  ChannelHandler coreChannelHandler=new ChannelHandler();
  coreChannelHandler.registerPacketType(PacketTabletMessage.class);
  channels=NetworkRegistry.INSTANCE.newChannel(DefaultProps.NET_CHANNEL_NAME + ""String_Node_Str"",coreChannelHandler,new PacketHandlerCore());
  achievementManager=new AchievementManager(""String_Node_Str"");
  FMLCommonHandler.instance().bus().register(achievementManager);
  woodenGearAchievement=achievementManager.registerAchievement(new Achievement(""String_Node_Str"",""String_Node_Str"",0,0,woodenGearItem,null));
  stoneGearAchievement=achievementManager.registerAchievement(new Achievement(""String_Node_Str"",""String_Node_Str"",2,0,stoneGearItem,woodenGearAchievement));
  ironGearAchievement=achievementManager.registerAchievement(new Achievement(""String_Node_Str"",""String_Node_Str"",4,0,ironGearItem,stoneGearAchievement));
  goldGearAchievement=achievementManager.registerAchievement(new Achievement(""String_Node_Str"",""String_Node_Str"",6,0,goldGearItem,ironGearAchievement));
  diamondGearAchievement=achievementManager.registerAchievement(new Achievement(""String_Node_Str"",""String_Node_Str"",8,0,diamondGearItem,goldGearAchievement));
  wrenchAchievement=achievementManager.registerAchievement(new Achievement(""String_Node_Str"",""String_Node_Str"",3,2,wrenchItem,stoneGearAchievement));
  engineRedstoneAchievement=BuildCraftCore.achievementManager.registerAchievement(new Achievement(""String_Node_Str"",""String_Node_Str"",1,-2,new ItemStack(engineBlock,1,0),BuildCraftCore.woodenGearAchievement));
  StatementManager.registerParameterClass(""String_Node_Str"",StatementParameterItemStack.class);
  StatementManager.registerParameterClass(""String_Node_Str"",StatementParameterItemStack.class);
  StatementManager.registerParameterClass(StatementParameterItemStack.class);
  StatementManager.registerParameterClass(StatementParameterDirection.class);
  StatementManager.registerParameterClass(StatementParameterRedstoneGateSideOnly.class);
  StatementManager.registerTriggerProvider(new DefaultTriggerProvider());
  StatementManager.registerActionProvider(new DefaultActionProvider());
  if (BuildCraftCore.modifyWorld) {
    MinecraftForge.EVENT_BUS.register(new SpringPopulate());
  }
  if (mainConfiguration.hasChanged()) {
    mainConfiguration.save();
  }
  if (BuildCraftCore.loadDefaultRecipes) {
    loadRecipes();
  }
  BCCreativeTab.get(""String_Node_Str"").setIcon(new ItemStack(BuildCraftCore.wrenchItem,1));
  EntityList.stringToClassMapping.remove(""String_Node_Str"");
  EntityList.stringToClassMapping.remove(""String_Node_Str"");
  BuilderAPI.schematicRegistry.registerSchematicBlock(engineBlock,SchematicEngine.class);
  CoreProxy.proxy.initializeRendering();
  CoreProxy.proxy.initializeEntityRendering();
  NetworkRegistry.INSTANCE.registerGuiHandler(instance,new CoreGuiHandler());
  FMLCommonHandler.instance().bus().register(TabletManagerClient.INSTANCE);
  FMLCommonHandler.instance().bus().register(TabletManagerServer.INSTANCE);
  MinecraftForge.EVENT_BUS.register(TabletManagerClient.INSTANCE);
  MinecraftForge.EVENT_BUS.register(TabletManagerServer.INSTANCE);
  TabletAPI.registerProgram(new TabletProgramMenuFactory());
  try {
    FillerManager.registry=new FillerRegistry();
    FillerManager.registry.addPattern(PatternFill.INSTANCE);
    FillerManager.registry.addPattern(new PatternFlatten());
    FillerManager.registry.addPattern(new PatternHorizon());
    FillerManager.registry.addPattern(new PatternClear());
    FillerManager.registry.addPattern(new PatternBox());
    FillerManager.registry.addPattern(new PatternPyramid());
    FillerManager.registry.addPattern(new PatternStairs());
    FillerManager.registry.addPattern(new PatternCylinder());
    FillerManager.registry.addPattern(new PatternFrame());
  }
 catch (  Error error) {
    BCLog.logErrorAPI(""String_Node_Str"",error,IFillerPattern.class);
    throw error;
  }
  StatementManager.registerParameterClass(PatternParameterYDir.class);
  StatementManager.registerParameterClass(PatternParameterXZDir.class);
  StatementManager.registerParameterClass(PatternParameterCenter.class);
  StatementManager.registerParameterClass(PatternParameterHollow.class);
  ListRegistry.registerHandler(new ListMatchHandlerClass());
  ListRegistry.registerHandler(new ListMatchHandlerFluid());
  ListMatchHandlerClass.itemClasses.add(ItemFood.class);
}",0.9919728660260034
156660,"@Mod.EventHandler public void init(FMLInitializationEvent evt){
  NetworkRegistry.INSTANCE.registerGuiHandler(instance,new RoboticsGuiHandler());
  MinecraftForge.EVENT_BUS.register(this);
  if (BuildCraftCore.loadDefaultRecipes && Loader.isModLoaded(""String_Node_Str"")) {
    loadRecipes();
  }
  BCCreativeTab.get(""String_Node_Str"").setIcon(new ItemStack(BuildCraftRobotics.redstoneBoard,1));
  PipeManager.registerPipePluggable(RobotStationPluggable.class,""String_Node_Str"");
  EntityRegistry.registerModEntity(EntityRobot.class,""String_Node_Str"",EntityIds.ROBOT,instance,50,1,true);
  CoreProxy.proxy.registerTileEntity(TileZonePlan.class,""String_Node_Str"");
  CoreProxy.proxy.registerTileEntity(TileRequester.class,""String_Node_Str"");
  RobotManager.registryProvider=new RobotRegistryProvider();
  RobotManager.registerAIRobot(AIRobotMain.class,""String_Node_Str"",""String_Node_Str"");
  RobotManager.registerAIRobot(BoardRobotEmpty.class,""String_Node_Str"");
  RobotManager.registerAIRobot(BoardRobotBomber.class,""String_Node_Str"",""String_Node_Str"");
  if (Loader.isModLoaded(""String_Node_Str"")) {
    RobotManager.registerAIRobot(BoardRobotBuilder.class,""String_Node_Str"",""String_Node_Str"");
  }
  RobotManager.registerAIRobot(BoardRobotButcher.class,""String_Node_Str"",""String_Node_Str"");
  RobotManager.registerAIRobot(BoardRobotCarrier.class,""String_Node_Str"",""String_Node_Str"");
  RobotManager.registerAIRobot(BoardRobotDelivery.class,""String_Node_Str"",""String_Node_Str"");
  RobotManager.registerAIRobot(BoardRobotFarmer.class,""String_Node_Str"",""String_Node_Str"");
  RobotManager.registerAIRobot(BoardRobotFluidCarrier.class,""String_Node_Str"",""String_Node_Str"");
  RobotManager.registerAIRobot(BoardRobotHarvester.class,""String_Node_Str"",""String_Node_Str"");
  RobotManager.registerAIRobot(BoardRobotKnight.class,""String_Node_Str"",""String_Node_Str"");
  RobotManager.registerAIRobot(BoardRobotLeaveCutter.class,""String_Node_Str"",""String_Node_Str"");
  RobotManager.registerAIRobot(BoardRobotLumberjack.class,""String_Node_Str"",""String_Node_Str"");
  RobotManager.registerAIRobot(BoardRobotMiner.class,""String_Node_Str"",""String_Node_Str"");
  RobotManager.registerAIRobot(BoardRobotPicker.class,""String_Node_Str"",""String_Node_Str"");
  RobotManager.registerAIRobot(BoardRobotPlanter.class,""String_Node_Str"",""String_Node_Str"");
  RobotManager.registerAIRobot(BoardRobotPump.class,""String_Node_Str"",""String_Node_Str"");
  RobotManager.registerAIRobot(BoardRobotShovelman.class,""String_Node_Str"",""String_Node_Str"");
  RobotManager.registerAIRobot(BoardRobotStripes.class,""String_Node_Str"",""String_Node_Str"");
  RobotManager.registerAIRobot(AIRobotAttack.class,""String_Node_Str"",""String_Node_Str"");
  RobotManager.registerAIRobot(AIRobotBreak.class,""String_Node_Str"",""String_Node_Str"");
  RobotManager.registerAIRobot(AIRobotDeliverRequested.class,""String_Node_Str"",""String_Node_Str"");
  RobotManager.registerAIRobot(AIRobotDisposeItems.class,""String_Node_Str"",""String_Node_Str"");
  RobotManager.registerAIRobot(AIRobotFetchAndEquipItemStack.class,""String_Node_Str"",""String_Node_Str"");
  RobotManager.registerAIRobot(AIRobotFetchItem.class,""String_Node_Str"",""String_Node_Str"");
  RobotManager.registerAIRobot(AIRobotGoAndLinkToDock.class,""String_Node_Str"",""String_Node_Str"");
  RobotManager.registerAIRobot(AIRobotGoto.class,""String_Node_Str"",""String_Node_Str"");
  RobotManager.registerAIRobot(AIRobotGotoBlock.class,""String_Node_Str"",""String_Node_Str"");
  RobotManager.registerAIRobot(AIRobotGotoSleep.class,""String_Node_Str"",""String_Node_Str"");
  RobotManager.registerAIRobot(AIRobotGotoStation.class,""String_Node_Str"",""String_Node_Str"");
  RobotManager.registerAIRobot(AIRobotGotoStationAndLoad.class,""String_Node_Str"",""String_Node_Str"");
  RobotManager.registerAIRobot(AIRobotGotoStationAndLoadFluids.class,""String_Node_Str"",""String_Node_Str"");
  RobotManager.registerAIRobot(AIRobotGotoStationAndUnload.class,""String_Node_Str"",""String_Node_Str"");
  RobotManager.registerAIRobot(AIRobotGotoStationToLoad.class,""String_Node_Str"",""String_Node_Str"");
  RobotManager.registerAIRobot(AIRobotGotoStationToLoadFluids.class,""String_Node_Str"",""String_Node_Str"");
  RobotManager.registerAIRobot(AIRobotGotoStationToUnload.class,""String_Node_Str"",""String_Node_Str"");
  RobotManager.registerAIRobot(AIRobotGotoStationToUnloadFluids.class,""String_Node_Str"",""String_Node_Str"");
  RobotManager.registerAIRobot(AIRobotHarvest.class,""String_Node_Str"");
  RobotManager.registerAIRobot(AIRobotLoad.class,""String_Node_Str"",""String_Node_Str"");
  RobotManager.registerAIRobot(AIRobotLoadFluids.class,""String_Node_Str"",""String_Node_Str"");
  RobotManager.registerAIRobot(AIRobotPlant.class,""String_Node_Str"");
  RobotManager.registerAIRobot(AIRobotPumpBlock.class,""String_Node_Str"",""String_Node_Str"");
  RobotManager.registerAIRobot(AIRobotRecharge.class,""String_Node_Str"",""String_Node_Str"");
  RobotManager.registerAIRobot(AIRobotSearchAndGotoBlock.class,""String_Node_Str"");
  RobotManager.registerAIRobot(AIRobotSearchAndGotoStation.class,""String_Node_Str"",""String_Node_Str"");
  RobotManager.registerAIRobot(AIRobotSearchBlock.class,""String_Node_Str"",""String_Node_Str"");
  RobotManager.registerAIRobot(AIRobotSearchEntity.class,""String_Node_Str"",""String_Node_Str"");
  RobotManager.registerAIRobot(AIRobotSearchRandomGroundBlock.class,""String_Node_Str"",""String_Node_Str"");
  RobotManager.registerAIRobot(AIRobotSearchStackRequest.class,""String_Node_Str"",""String_Node_Str"");
  RobotManager.registerAIRobot(AIRobotSearchStation.class,""String_Node_Str"",""String_Node_Str"");
  RobotManager.registerAIRobot(AIRobotShutdown.class,""String_Node_Str"");
  RobotManager.registerAIRobot(AIRobotSleep.class,""String_Node_Str"",""String_Node_Str"");
  RobotManager.registerAIRobot(AIRobotStraightMoveTo.class,""String_Node_Str"",""String_Node_Str"");
  RobotManager.registerAIRobot(AIRobotUnload.class,""String_Node_Str"",""String_Node_Str"");
  RobotManager.registerAIRobot(AIRobotUnloadFluids.class,""String_Node_Str"",""String_Node_Str"");
  RobotManager.registerAIRobot(AIRobotUseToolOnBlock.class,""String_Node_Str"",""String_Node_Str"");
  RobotManager.registerDockingStation(DockingStationPipe.class,""String_Node_Str"");
  RoboticsProxy.proxy.registerRenderers();
}","@Mod.EventHandler public void init(FMLInitializationEvent evt){
  NetworkRegistry.INSTANCE.registerGuiHandler(instance,new RoboticsGuiHandler());
  MinecraftForge.EVENT_BUS.register(this);
  if (BuildCraftCore.loadDefaultRecipes && Loader.isModLoaded(""String_Node_Str"")) {
    loadRecipes();
  }
  BCCreativeTab.get(""String_Node_Str"").setIcon(new ItemStack(BuildCraftRobotics.redstoneBoard,1));
  PipeManager.registerPipePluggable(RobotStationPluggable.class,""String_Node_Str"");
  EntityRegistry.registerModEntity(EntityRobot.class,""String_Node_Str"",EntityIds.ROBOT,instance,50,1,true);
  CoreProxy.proxy.registerTileEntity(TileZonePlan.class,""String_Node_Str"");
  CoreProxy.proxy.registerTileEntity(TileRequester.class,""String_Node_Str"");
  RobotManager.registryProvider=new RobotRegistryProvider();
  RobotManager.registerAIRobot(AIRobotMain.class,""String_Node_Str"",""String_Node_Str"");
  RobotManager.registerAIRobot(BoardRobotEmpty.class,""String_Node_Str"");
  RobotManager.registerAIRobot(BoardRobotBomber.class,""String_Node_Str"",""String_Node_Str"");
  if (Loader.isModLoaded(""String_Node_Str"")) {
    RobotManager.registerAIRobot(BoardRobotBuilder.class,""String_Node_Str"",""String_Node_Str"");
  }
  RobotManager.registerAIRobot(BoardRobotButcher.class,""String_Node_Str"",""String_Node_Str"");
  RobotManager.registerAIRobot(BoardRobotCarrier.class,""String_Node_Str"",""String_Node_Str"");
  RobotManager.registerAIRobot(BoardRobotDelivery.class,""String_Node_Str"",""String_Node_Str"");
  RobotManager.registerAIRobot(BoardRobotFarmer.class,""String_Node_Str"",""String_Node_Str"");
  RobotManager.registerAIRobot(BoardRobotFluidCarrier.class,""String_Node_Str"",""String_Node_Str"");
  RobotManager.registerAIRobot(BoardRobotHarvester.class,""String_Node_Str"",""String_Node_Str"");
  RobotManager.registerAIRobot(BoardRobotKnight.class,""String_Node_Str"",""String_Node_Str"");
  RobotManager.registerAIRobot(BoardRobotLeaveCutter.class,""String_Node_Str"",""String_Node_Str"");
  RobotManager.registerAIRobot(BoardRobotLumberjack.class,""String_Node_Str"",""String_Node_Str"");
  RobotManager.registerAIRobot(BoardRobotMiner.class,""String_Node_Str"",""String_Node_Str"");
  RobotManager.registerAIRobot(BoardRobotPicker.class,""String_Node_Str"",""String_Node_Str"");
  RobotManager.registerAIRobot(BoardRobotPlanter.class,""String_Node_Str"",""String_Node_Str"");
  RobotManager.registerAIRobot(BoardRobotPump.class,""String_Node_Str"",""String_Node_Str"");
  RobotManager.registerAIRobot(BoardRobotShovelman.class,""String_Node_Str"",""String_Node_Str"");
  RobotManager.registerAIRobot(BoardRobotStripes.class,""String_Node_Str"",""String_Node_Str"");
  RobotManager.registerAIRobot(AIRobotAttack.class,""String_Node_Str"",""String_Node_Str"");
  RobotManager.registerAIRobot(AIRobotBreak.class,""String_Node_Str"",""String_Node_Str"");
  RobotManager.registerAIRobot(AIRobotDeliverRequested.class,""String_Node_Str"",""String_Node_Str"");
  RobotManager.registerAIRobot(AIRobotDisposeItems.class,""String_Node_Str"",""String_Node_Str"");
  RobotManager.registerAIRobot(AIRobotFetchAndEquipItemStack.class,""String_Node_Str"",""String_Node_Str"");
  RobotManager.registerAIRobot(AIRobotFetchItem.class,""String_Node_Str"",""String_Node_Str"");
  RobotManager.registerAIRobot(AIRobotGoAndLinkToDock.class,""String_Node_Str"",""String_Node_Str"");
  RobotManager.registerAIRobot(AIRobotGoto.class,""String_Node_Str"",""String_Node_Str"");
  RobotManager.registerAIRobot(AIRobotGotoBlock.class,""String_Node_Str"",""String_Node_Str"");
  RobotManager.registerAIRobot(AIRobotGotoSleep.class,""String_Node_Str"",""String_Node_Str"");
  RobotManager.registerAIRobot(AIRobotGotoStation.class,""String_Node_Str"",""String_Node_Str"");
  RobotManager.registerAIRobot(AIRobotGotoStationAndLoad.class,""String_Node_Str"",""String_Node_Str"");
  RobotManager.registerAIRobot(AIRobotGotoStationAndLoadFluids.class,""String_Node_Str"",""String_Node_Str"");
  RobotManager.registerAIRobot(AIRobotGotoStationAndUnload.class,""String_Node_Str"",""String_Node_Str"");
  RobotManager.registerAIRobot(AIRobotGotoStationToLoad.class,""String_Node_Str"",""String_Node_Str"");
  RobotManager.registerAIRobot(AIRobotGotoStationToLoadFluids.class,""String_Node_Str"",""String_Node_Str"");
  RobotManager.registerAIRobot(AIRobotGotoStationToUnload.class,""String_Node_Str"",""String_Node_Str"");
  RobotManager.registerAIRobot(AIRobotGotoStationToUnloadFluids.class,""String_Node_Str"",""String_Node_Str"");
  RobotManager.registerAIRobot(AIRobotHarvest.class,""String_Node_Str"");
  RobotManager.registerAIRobot(AIRobotLoad.class,""String_Node_Str"",""String_Node_Str"");
  RobotManager.registerAIRobot(AIRobotLoadFluids.class,""String_Node_Str"",""String_Node_Str"");
  RobotManager.registerAIRobot(AIRobotPlant.class,""String_Node_Str"");
  RobotManager.registerAIRobot(AIRobotPumpBlock.class,""String_Node_Str"",""String_Node_Str"");
  RobotManager.registerAIRobot(AIRobotRecharge.class,""String_Node_Str"",""String_Node_Str"");
  RobotManager.registerAIRobot(AIRobotSearchAndGotoBlock.class,""String_Node_Str"");
  RobotManager.registerAIRobot(AIRobotSearchAndGotoStation.class,""String_Node_Str"",""String_Node_Str"");
  RobotManager.registerAIRobot(AIRobotSearchBlock.class,""String_Node_Str"",""String_Node_Str"");
  RobotManager.registerAIRobot(AIRobotSearchEntity.class,""String_Node_Str"",""String_Node_Str"");
  RobotManager.registerAIRobot(AIRobotSearchRandomGroundBlock.class,""String_Node_Str"",""String_Node_Str"");
  RobotManager.registerAIRobot(AIRobotSearchStackRequest.class,""String_Node_Str"",""String_Node_Str"");
  RobotManager.registerAIRobot(AIRobotSearchStation.class,""String_Node_Str"",""String_Node_Str"");
  RobotManager.registerAIRobot(AIRobotShutdown.class,""String_Node_Str"");
  RobotManager.registerAIRobot(AIRobotSleep.class,""String_Node_Str"",""String_Node_Str"");
  RobotManager.registerAIRobot(AIRobotStraightMoveTo.class,""String_Node_Str"",""String_Node_Str"");
  RobotManager.registerAIRobot(AIRobotUnload.class,""String_Node_Str"",""String_Node_Str"");
  RobotManager.registerAIRobot(AIRobotUnloadFluids.class,""String_Node_Str"",""String_Node_Str"");
  RobotManager.registerAIRobot(AIRobotUseToolOnBlock.class,""String_Node_Str"",""String_Node_Str"");
  RobotManager.registerDockingStation(DockingStationPipe.class,""String_Node_Str"");
  RoboticsProxy.proxy.registerRenderers();
  ListMatchHandlerClass.itemClasses.add(ItemRobot.class);
}",0.9953518192017952
156661,"@Mod.EventHandler public void postInit(FMLPostInitializationEvent evt){
  facadeItem.initialize();
  if (debugPrintFacadeList) {
    try {
      PrintWriter writer=new PrintWriter(""String_Node_Str"",""String_Node_Str"");
      writer.println(""String_Node_Str"");
      for (      ItemStack stack : ItemFacade.allFacades) {
        if (facadeItem.getBlocksForFacade(stack).length > 0) {
          writer.println(Block.blockRegistry.getNameForObject(facadeItem.getBlocksForFacade(stack)[0]) + ""String_Node_Str"" + facadeItem.getMetaValuesForFacade(stack)[0]);
        }
      }
      writer.close();
    }
 catch (    Exception e) {
      e.printStackTrace();
    }
  }
}","@Mod.EventHandler public void postInit(FMLPostInitializationEvent evt){
  facadeItem.initialize();
  if (debugPrintFacadeList) {
    try {
      PrintWriter writer=new PrintWriter(""String_Node_Str"",""String_Node_Str"");
      writer.println(""String_Node_Str"");
      for (      ItemStack stack : ItemFacade.allFacades) {
        if (facadeItem.getBlocksForFacade(stack).length > 0) {
          writer.println(Block.blockRegistry.getNameForObject(facadeItem.getBlocksForFacade(stack)[0]) + ""String_Node_Str"" + facadeItem.getMetaValuesForFacade(stack)[0]);
        }
      }
      writer.close();
    }
 catch (    Exception e) {
      e.printStackTrace();
    }
  }
  ListMatchHandlerClass.itemClasses.add(ItemPipe.class);
  ListMatchHandlerClass.itemClasses.add(ItemGate.class);
  ListMatchHandlerClass.itemClasses.add(ItemFacade.class);
  ListMatchHandlerClass.itemClasses.add(ItemPipeWire.class);
}",0.8501920614596671
156662,"public void drawStack(ItemStack item){
  int cornerX=(gui.width - gui.getXSize()) / 2;
  int cornerY=(gui.height - gui.getYSize()) / 2;
  gui.drawStack(item,cornerX + x,cornerY + y);
}","public void drawStack(ItemStack item){
  int cornerX=(gui.width - gui.getXSize()) / 2;
  int cornerY=(gui.height - gui.getYSize()) / 2;
  gui.drawStack(item,cornerX + x,cornerY + y);
  GL11.glColor4f(1.0F,1.0F,1.0F,1.0F);
}",0.9041769041769042
156663,"public void drawSprite(int cornerX,int cornerY){
  Minecraft mc=Minecraft.getMinecraft();
  if (drawBackround) {
    mc.renderEngine.bindTexture(TEXTURE_SLOT);
    gui.drawTexturedModalRect(cornerX + x - 1,cornerY + y - 1,0,0,18,18);
  }
  if (!isDefined()) {
    return;
  }
  if (getItemStack() != null) {
    drawStack(getItemStack());
  }
 else   if (getIcon() != null) {
    mc.renderEngine.bindTexture(getTexture());
    GL11.glDisable(GL11.GL_LIGHTING);
    GL11.glEnable(GL11.GL_ALPHA_TEST);
    GL11.glEnable(GL11.GL_BLEND);
    gui.drawTexturedModelRectFromIcon(cornerX + x,cornerY + y,getIcon(),16,16);
    GL11.glEnable(GL11.GL_LIGHTING);
    GL11.glDisable(GL11.GL_ALPHA_TEST);
    GL11.glDisable(GL11.GL_BLEND);
  }
}","public void drawSprite(int cornerX,int cornerY){
  Minecraft mc=Minecraft.getMinecraft();
  if (drawBackround) {
    mc.renderEngine.bindTexture(TEXTURE_SLOT);
    gui.drawTexturedModalRect(cornerX + x - 1,cornerY + y - 1,0,0,18,18);
  }
  if (!isDefined()) {
    return;
  }
  if (getItemStack() != null) {
    drawStack(getItemStack());
  }
 else   if (getIcon() != null) {
    mc.renderEngine.bindTexture(getTexture());
    GL11.glPushAttrib(GL11.GL_LIGHTING_BIT | GL11.GL_COLOR_BUFFER_BIT);
    GL11.glDisable(GL11.GL_LIGHTING);
    GL11.glEnable(GL11.GL_ALPHA_TEST);
    GL11.glEnable(GL11.GL_BLEND);
    gui.drawTexturedModelRectFromIcon(cornerX + x,cornerY + y,getIcon(),16,16);
    GL11.glPopAttrib();
  }
}",0.8769017980636238
156664,"@Override public void worldMoved(GuiUrbanist gui,MovingObjectPosition pos){
  if (step == 1) {
    x=pos.blockX;
    z=pos.blockZ;
    gui.urbanist.rpcMoveFrame(pos);
  }
 else   if (step == 2) {
    float ydiff=(float)Mouse.getY() / (float)Minecraft.getMinecraft().displayHeight;
    y=(int)(startY + (ydiff - baseY) * 50);
    gui.urbanist.rpcMoveFrame(pos);
  }
}","@Override public void worldMoved(GuiUrbanist gui,MovingObjectPosition pos){
  if (step == 1) {
    this.pos=new BlockPos(pos.getBlockPos().getX(),this.pos.getY(),pos.getBlockPos().getX());
    gui.urbanist.rpcMoveFrame(this.pos);
  }
 else   if (step == 2) {
    float ydiff=(float)Mouse.getY() / (float)Minecraft.getMinecraft().displayHeight;
    this.pos=new BlockPos(this.pos.getX(),(int)(start.getY() + (ydiff - baseY) * 50),this.pos.getZ());
    gui.urbanist.rpcMoveFrame(this.pos);
  }
}",0.7660069848661234
156665,"@Override public void worldClicked(GuiUrbanist gui,MovingObjectPosition pos){
  gui.urbanist.rpcEraseBlock(pos.blockX,pos.blockY,pos.blockZ);
}","@Override public void worldClicked(GuiUrbanist gui,MovingObjectPosition pos){
  gui.urbanist.rpcEraseBlock(pos.getBlockPos());
}",0.8929889298892989
156666,"@Override public void areaSet(GuiUrbanist gui,int x1,int y1,int z1,int x2,int y2,int z2){
  super.areaSet(gui,x1,y1,z1,x2,y2,z2);
  if (selection != -1) {
    Box box=new Box();
    box.initialize(x1,y1,z1,x2,y2,z2);
    gui.urbanist.rpcStartFiller(fillerSlots.get(selection).getPattern().getUniqueTag(),box);
  }
}","@Override public void areaSet(GuiUrbanist gui,BlockPos start,BlockPos end){
  super.areaSet(gui,start,end);
  if (selection != -1) {
    Box box=new Box(start,end);
    gui.urbanist.rpcStartFiller(fillerSlots.get(selection).getPattern().getUniqueTag(),box);
  }
}",0.4567474048442906
156667,"@Override @SideOnly(Side.CLIENT) public TextureAtlasSprite getIcon(int iconIndex){
  return icons[iconIndex];
}","@SideOnly(Side.CLIENT) public TextureAtlasSprite getIcon(int iconIndex){
  return icons[iconIndex];
}",0.9528301886792452
156668,"@Override public ItemStack getStack(){
  Item item=(Item)Item.itemRegistry.getObject(""String_Node_Str"");
  if (item == null) {
    throw new Error(""String_Node_Str"");
  }
  ItemStack stack=new ItemStack(item,1);
  NBTTagCompound nbt=NBTUtils.getItemData(stack);
  id.write(nbt);
  nbt.setString(""String_Node_Str"",author);
  nbt.setString(""String_Node_Str"",id.name);
  nbt.setByte(""String_Node_Str"",(byte)buildingPermission.ordinal());
  nbt.setBoolean(""String_Node_Str"",isComplete);
  return stack;
}","@Override public ItemStack getStack(){
  Item item=(Item)Item.itemRegistry.getObject(""String_Node_Str"");
  if (item == null) {
    throw new Error(""String_Node_Str"");
  }
  ItemStack stack=new ItemStack(item,1,1);
  NBTTagCompound nbt=NBTUtils.getItemData(stack);
  id.write(nbt);
  nbt.setString(""String_Node_Str"",author);
  nbt.setString(""String_Node_Str"",id.name);
  nbt.setByte(""String_Node_Str"",(byte)buildingPermission.ordinal());
  nbt.setBoolean(""String_Node_Str"",isComplete);
  return stack;
}",0.998003992015968
156669,"@Override public ItemStack getStack(){
  Item item=(Item)Item.itemRegistry.getObject(""String_Node_Str"");
  if (item == null) {
    throw new Error(""String_Node_Str"");
  }
  ItemStack stack=new ItemStack(item,1);
  NBTTagCompound nbt=NBTUtils.getItemData(stack);
  id.write(nbt);
  nbt.setString(""String_Node_Str"",author);
  nbt.setString(""String_Node_Str"",id.name);
  return stack;
}","@Override public ItemStack getStack(){
  Item item=(Item)Item.itemRegistry.getObject(""String_Node_Str"");
  if (item == null) {
    throw new Error(""String_Node_Str"");
  }
  ItemStack stack=new ItemStack(item,1,1);
  NBTTagCompound nbt=NBTUtils.getItemData(stack);
  id.write(nbt);
  nbt.setString(""String_Node_Str"",author);
  nbt.setString(""String_Node_Str"",id.name);
  return stack;
}",0.9973958333333334
156670,"public static Object getBlockResourceLocation(Block block){
  return new ModelResourceLocation(Utils.getNameForBlock(block));
}","public static Object getBlockResourceLocation(Block block){
  return new ModelResourceLocation(Utils.getNameForBlock(block).replace(""String_Node_Str"",""String_Node_Str""));
}",0.8494983277591973
156671,"public static ModelResourceLocation getItemResourceLocation(Item item,String suffix){
  return new ModelResourceLocation(Utils.getNameForItem(item) + suffix,""String_Node_Str"");
}","public static ModelResourceLocation getItemResourceLocation(Item item,String suffix){
  return new ModelResourceLocation(Utils.getNameForItem(item).replace(""String_Node_Str"",""String_Node_Str"") + suffix,""String_Node_Str"");
}",0.8877805486284289
156672,"@Override public boolean equals(Object obj){
  if (obj.getClass() != getClass()) {
    return false;
  }
  ResourceId compareId=(ResourceId)obj;
  return index.equals(compareId.index) && side == compareId.side && localId == compareId.localId;
}","@Override public boolean equals(Object obj){
  if (obj == null || obj.getClass() != getClass()) {
    return false;
  }
  ResourceId compareId=(ResourceId)obj;
  return index.equals(compareId.index) && side == compareId.side && localId == compareId.localId;
}",0.9701789264413518
156673,"@Override public boolean onBlockActivated(World world,int i,int j,int k,EntityPlayer entityplayer,int par6,float par7,float par8,float par9){
  if (super.onBlockActivated(world,i,j,k,entityplayer,par6,par7,par8,par9)) {
    return true;
  }
  if (entityplayer.inventory.getCurrentItem() != null && entityplayer.inventory.getCurrentItem().getItem() instanceof IMapLocation) {
    return false;
  }
  if (entityplayer.isSneaking()) {
    return false;
  }
  TileEntity tile=world.getTileEntity(i,j,k);
  if (tile instanceof TileMarker && !(tile instanceof TileConstructionMarker)) {
    ((TileMarker)tile).tryConnection();
    return true;
  }
  return false;
}","@Override public boolean onBlockActivated(World world,int i,int j,int k,EntityPlayer entityplayer,int par6,float par7,float par8,float par9){
  if (super.onBlockActivated(world,i,j,k,entityplayer,par6,par7,par8,par9)) {
    return true;
  }
  if (entityplayer.inventory.getCurrentItem() != null && entityplayer.inventory.getCurrentItem().getItem() instanceof IMapLocation) {
    return false;
  }
  if (entityplayer.isSneaking()) {
    return false;
  }
  TileEntity tile=world.getTileEntity(i,j,k);
  if (tile instanceof TileMarker) {
    ((TileMarker)tile).tryConnection();
    return true;
  }
  return false;
}",0.8421052631578947
156674,"@Override public void renderTileEntityAt(TileEntity tileentity,double x,double y,double z,float f){
  super.renderTileEntityAt(tileentity,x,y,z,f);
  TileArchitect architect=(TileArchitect)tileentity;
  if (architect != null) {
    GL11.glPushMatrix();
    GL11.glPushAttrib(GL11.GL_ENABLE_BIT);
    GL11.glEnable(GL11.GL_CULL_FACE);
    GL11.glEnable(GL11.GL_LIGHTING);
    GL11.glEnable(GL11.GL_BLEND);
    GL11.glBlendFunc(GL11.GL_SRC_ALPHA,GL11.GL_ONE_MINUS_SRC_ALPHA);
    GL11.glTranslated(x,y,z);
    GL11.glTranslated(-tileentity.xCoord,-tileentity.yCoord,-tileentity.zCoord);
    for (    LaserData laser : architect.subLasers) {
      if (laser != null) {
        GL11.glPushMatrix();
        RenderLaser.doRenderLaserWave(TileEntityRendererDispatcher.instance.field_147553_e,laser,EntityLaser.LASER_TEXTURES[3]);
        GL11.glPopMatrix();
      }
    }
    GL11.glPopAttrib();
    GL11.glPopMatrix();
  }
}","@Override public void renderTileEntityAt(TileEntity tileentity,double x,double y,double z,float f){
  super.renderTileEntityAt(tileentity,x,y,z,f);
  TileArchitect architect=(TileArchitect)tileentity;
  GL11.glPushMatrix();
  GL11.glPushAttrib(GL11.GL_ENABLE_BIT);
  GL11.glEnable(GL11.GL_CULL_FACE);
  GL11.glEnable(GL11.GL_LIGHTING);
  GL11.glEnable(GL11.GL_BLEND);
  GL11.glBlendFunc(GL11.GL_SRC_ALPHA,GL11.GL_ONE_MINUS_SRC_ALPHA);
  GL11.glTranslated(x,y,z);
  GL11.glTranslated(-tileentity.xCoord,-tileentity.yCoord,-tileentity.zCoord);
  for (  LaserData laser : architect.subLasers) {
    if (laser != null) {
      GL11.glPushMatrix();
      RenderLaser.doRenderLaserWave(TileEntityRendererDispatcher.instance.field_147553_e,laser,EntityLaser.LASER_TEXTURES[3]);
      GL11.glPopMatrix();
    }
  }
  GL11.glPopAttrib();
  GL11.glPopMatrix();
}",0.9621682665160926
156675,"@Override public void renderTileEntityAt(TileEntity tileentity,double x,double y,double z,float f){
  super.renderTileEntityAt(tileentity,x,y,z,f);
  TileConstructionMarker marker=(TileConstructionMarker)tileentity;
  if (marker != null) {
    GL11.glPushMatrix();
    GL11.glPushAttrib(GL11.GL_ENABLE_BIT);
    GL11.glEnable(GL11.GL_CULL_FACE);
    GL11.glEnable(GL11.GL_LIGHTING);
    GL11.glEnable(GL11.GL_BLEND);
    GL11.glBlendFunc(GL11.GL_SRC_ALPHA,GL11.GL_ONE_MINUS_SRC_ALPHA);
    GL11.glTranslated(x,y,z);
    GL11.glTranslated(-tileentity.xCoord,-tileentity.yCoord,-tileentity.zCoord);
    if (marker.laser != null) {
      GL11.glPushMatrix();
      RenderLaser.doRenderLaser(TileEntityRendererDispatcher.instance.field_147553_e,marker.laser,EntityLaser.LASER_TEXTURES[4]);
      GL11.glPopMatrix();
    }
    if (marker.itemBlueprint != null) {
      doRenderItem(marker.itemBlueprint,marker.xCoord + 0.5F,marker.yCoord + 0.2F,marker.zCoord + 0.5F);
    }
    GL11.glPopAttrib();
    GL11.glPopMatrix();
    renderItems.render(tileentity,x,y,z);
  }
}","@Override public void renderTileEntityAt(TileEntity tileentity,double x,double y,double z,float f){
  super.renderTileEntityAt(tileentity,x,y,z,f);
  TileConstructionMarker marker=(TileConstructionMarker)tileentity;
  GL11.glPushMatrix();
  GL11.glPushAttrib(GL11.GL_ENABLE_BIT);
  GL11.glEnable(GL11.GL_CULL_FACE);
  GL11.glEnable(GL11.GL_LIGHTING);
  GL11.glEnable(GL11.GL_BLEND);
  GL11.glBlendFunc(GL11.GL_SRC_ALPHA,GL11.GL_ONE_MINUS_SRC_ALPHA);
  GL11.glTranslated(x,y,z);
  GL11.glTranslated(-tileentity.xCoord,-tileentity.yCoord,-tileentity.zCoord);
  if (marker.laser != null) {
    GL11.glPushMatrix();
    RenderLaser.doRenderLaser(TileEntityRendererDispatcher.instance.field_147553_e,marker.laser,EntityLaser.LASER_TEXTURES[4]);
    GL11.glPopMatrix();
  }
  if (marker.itemBlueprint != null) {
    doRenderItem(marker.itemBlueprint,marker.xCoord + 0.5F,marker.yCoord + 0.2F,marker.zCoord + 0.5F);
  }
  GL11.glPopAttrib();
  GL11.glPopMatrix();
  renderItems.render(tileentity,x,y,z);
}",0.967992240543162
156676,"public void write(ByteBuf data){
  data.writeShort(items.size());
  if (items != null) {
    for (    ItemStack rb : items) {
      NetworkUtils.writeStack(data,rb);
      data.writeShort(rb.stackSize);
    }
  }
}","public void write(ByteBuf data){
  data.writeShort(items.size());
  for (  ItemStack rb : items) {
    NetworkUtils.writeStack(data,rb);
    data.writeShort(rb.stackSize);
  }
}",0.90537084398977
156677,"private Packet getItemRequirementsPacket(final ArrayList<ItemStack> items){
  if (items != null) {
    return new PacketCommand(this,""String_Node_Str"",new CommandWriter(){
      public void write(      ByteBuf data){
        data.writeShort(items.size());
        if (items != null) {
          for (          ItemStack rb : items) {
            NetworkUtils.writeStack(data,rb);
            data.writeShort(rb.stackSize);
          }
        }
      }
    }
);
  }
 else {
    return new PacketCommand(this,""String_Node_Str"",null);
  }
}","private Packet getItemRequirementsPacket(final ArrayList<ItemStack> items){
  if (items != null) {
    return new PacketCommand(this,""String_Node_Str"",new CommandWriter(){
      public void write(      ByteBuf data){
        data.writeShort(items.size());
        for (        ItemStack rb : items) {
          NetworkUtils.writeStack(data,rb);
          data.writeShort(rb.stackSize);
        }
      }
    }
);
  }
 else {
    return new PacketCommand(this,""String_Node_Str"",null);
  }
}",0.9444985394352484
156678,"public void createUtilsIfNeeded(){
  if (!worldObj.isRemote) {
    if (builder == null) {
      if (!box.isInitialized()) {
        setBoundaries(loadDefaultBoundaries);
      }
      initializeBlueprintBuilder();
    }
  }
  if (stage != Stage.BUILDING) {
    box.isVisible=false;
    if (arm == null) {
      createArm();
    }
    if (findTarget(false)) {
      if (box != null && ((headPosX < box.xMin || headPosX > box.xMax) || (headPosZ < box.zMin || headPosZ > box.zMax))) {
        setHead(box.xMin + 1,yCoord + 2,box.zMin + 1);
      }
    }
  }
 else {
    box.isVisible=true;
  }
}","public void createUtilsIfNeeded(){
  if (!worldObj.isRemote) {
    if (builder == null) {
      if (!box.isInitialized()) {
        setBoundaries(loadDefaultBoundaries);
      }
      initializeBlueprintBuilder();
    }
  }
  if (stage != Stage.BUILDING) {
    box.isVisible=false;
    if (arm == null) {
      createArm();
    }
    if (findTarget(false)) {
      if ((headPosX < box.xMin || headPosX > box.xMax) || (headPosZ < box.zMin || headPosZ > box.zMax)) {
        setHead(box.xMin + 1,yCoord + 2,box.zMin + 1);
      }
    }
  }
 else {
    box.isVisible=true;
  }
}",0.9854327335047128
156679,"@Override public void updateEntity(){
  super.updateEntity();
  if (worldObj.isRemote) {
    if (stage != Stage.DONE) {
      moveHead(speed);
    }
    return;
  }
  if (stage == Stage.DONE) {
    if (mode == Mode.Loop) {
      stage=Stage.IDLE;
    }
 else {
      return;
    }
  }
  if (!areChunksLoaded()) {
    return;
  }
  if (mode == Mode.Off && stage != Stage.MOVING) {
    return;
  }
  createUtilsIfNeeded();
  if (stage == Stage.BUILDING) {
    if (builder != null && !builder.isDone(this)) {
      builder.buildNextSlot(worldObj,this,xCoord,yCoord,zCoord);
    }
 else {
      stage=Stage.IDLE;
    }
  }
 else   if (stage == Stage.DIGGING) {
    dig();
  }
 else   if (stage == Stage.IDLE) {
    idling();
    return;
  }
 else   if (stage == Stage.MOVING) {
    int energyUsed=this.getBattery().useEnergy(20,(int)Math.ceil(20 + getBattery().getEnergyStored() / 10),false);
    if (energyUsed >= 20) {
      speed=0.1 + energyUsed / 2000F;
      if (worldObj.isRaining()) {
        int headBPX=(int)headPosX;
        int headBPY=(int)headPosY;
        int headBPZ=(int)headPosZ;
        if (worldObj.getHeightValue(headBPX,headBPZ) < headBPY) {
          speed*=0.7;
        }
      }
      moveHead(speed);
    }
  }
  if (updateTracker.markTimeIfDelay(worldObj)) {
    sendNetworkUpdate();
  }
}","@Override public void updateEntity(){
  super.updateEntity();
  if (worldObj.isRemote) {
    if (stage != Stage.DONE) {
      moveHead(speed);
    }
    return;
  }
  if (stage == Stage.DONE) {
    if (mode == Mode.Loop) {
      stage=Stage.IDLE;
    }
 else {
      return;
    }
  }
  if (!areChunksLoaded()) {
    return;
  }
  if (mode == Mode.Off && stage != Stage.MOVING) {
    return;
  }
  createUtilsIfNeeded();
  if (stage == Stage.BUILDING) {
    if (builder != null && !builder.isDone(this)) {
      builder.buildNextSlot(worldObj,this,xCoord,yCoord,zCoord);
    }
 else {
      stage=Stage.IDLE;
    }
  }
 else   if (stage == Stage.DIGGING) {
    dig();
  }
 else   if (stage == Stage.IDLE) {
    idling();
    return;
  }
 else   if (stage == Stage.MOVING) {
    int energyUsed=this.getBattery().useEnergy(20,(int)Math.ceil(20D + getBattery().getEnergyStored() / 10),false);
    if (energyUsed >= 20) {
      speed=0.1 + energyUsed / 2000F;
      if (worldObj.isRaining()) {
        int headBPX=(int)headPosX;
        int headBPY=(int)headPosY;
        int headBPZ=(int)headPosZ;
        if (worldObj.getHeightValue(headBPX,headBPZ) < headBPY) {
          speed*=0.7;
        }
      }
      moveHead(speed);
    }
  }
  if (updateTracker.markTimeIfDelay(worldObj)) {
    sendNetworkUpdate();
  }
}",0.9996190476190476
156680,"public void saveBuildStateToNBT(NBTTagCompound nbt,IBuildingItemsProvider builder){
  NBTTagList clearList=new NBTTagList();
  nbt.setByteArray(""String_Node_Str"",BitSetUtils.toByteArray(usedLocations));
  NBTTagList buildingList=new NBTTagList();
  for (  BuildingItem item : builder.getBuilders()) {
    NBTTagCompound sub=new NBTTagCompound();
    item.writeToNBT(sub);
    buildingList.appendTag(sub);
  }
  nbt.setTag(""String_Node_Str"",buildingList);
}","public void saveBuildStateToNBT(NBTTagCompound nbt,IBuildingItemsProvider builder){
  nbt.setByteArray(""String_Node_Str"",BitSetUtils.toByteArray(usedLocations));
  NBTTagList buildingList=new NBTTagList();
  for (  BuildingItem item : builder.getBuilders()) {
    NBTTagCompound sub=new NBTTagCompound();
    item.writeToNBT(sub);
    buildingList.appendTag(sub);
  }
  nbt.setTag(""String_Node_Str"",buildingList);
}",0.9529276693455798
156681,"public void createDestroyItems(BuildingSlotBlock slot){
  int hardness=(int)Math.ceil(getBlockBreakEnergy(slot) / BuilderAPI.BREAK_ENERGY);
  for (int i=0; i < hardness; ++i) {
    slot.addStackConsumed(new ItemStack(BuildCraftCore.buildToolBlock));
  }
}","public void createDestroyItems(BuildingSlotBlock slot){
  int hardness=(int)Math.ceil((double)getBlockBreakEnergy(slot) / BuilderAPI.BREAK_ENERGY);
  for (int i=0; i < hardness; ++i) {
    slot.addStackConsumed(new ItemStack(BuildCraftCore.buildToolBlock));
  }
}",0.9845559845559846
156682,"private Constructor<?> findConstructor() throws IllegalArgumentException {
  if (params.length == 0 && emptyConstructorMap.containsKey(clazz)) {
    return emptyConstructorMap.get(clazz);
  }
  for (  Constructor<?> c : clazz.getConstructors()) {
    Class<?>[] typesSignature=c.getParameterTypes();
    if (typesSignature.length != params.length) {
      continue;
    }
    boolean valid=true;
    for (int i=0; i < params.length; i++) {
      if (params[i] == null) {
        continue;
      }
      Class<?> paramClass=params[i].getClass();
      if (!(typesSignature[i].isAssignableFrom(paramClass) || (typesSignature[i] == int.class && paramClass == Integer.class) || (typesSignature[i] == double.class && paramClass == Double.class)|| (typesSignature[i] == boolean.class && paramClass == Boolean.class))) {
        valid=false;
        break;
      }
    }
    if (!valid) {
      continue;
    }
    if (c != null && params.length == 0) {
      emptyConstructorMap.put(clazz,c);
    }
    return c;
  }
  throw new IllegalArgumentException(""String_Node_Str"" + clazz);
}","private Constructor<?> findConstructor() throws IllegalArgumentException {
  if (params.length == 0 && emptyConstructorMap.containsKey(clazz)) {
    return emptyConstructorMap.get(clazz);
  }
  for (  Constructor<?> c : clazz.getConstructors()) {
    if (c == null) {
      continue;
    }
    Class<?>[] typesSignature=c.getParameterTypes();
    if (typesSignature.length != params.length) {
      continue;
    }
    boolean valid=true;
    for (int i=0; i < params.length; i++) {
      if (params[i] == null) {
        continue;
      }
      Class<?> paramClass=params[i].getClass();
      if (!(typesSignature[i].isAssignableFrom(paramClass) || (typesSignature[i] == int.class && paramClass == Integer.class) || (typesSignature[i] == double.class && paramClass == Double.class)|| (typesSignature[i] == boolean.class && paramClass == Boolean.class))) {
        valid=false;
        break;
      }
    }
    if (!valid) {
      continue;
    }
    if (params.length == 0) {
      emptyConstructorMap.put(clazz,c);
    }
    return c;
  }
  throw new IllegalArgumentException(""String_Node_Str"" + clazz);
}",0.9743589743589745
156683,"public ConfigManager(Configuration c){
  this.config=c;
}","public ConfigManager(Configuration c){
  config=c;
}",0.9541284403669724
156684,"public void getGUINetworkData(int id,int value){
switch (id) {
case 0:
    int iEnergy=Math.round(energy);
  iEnergy=(iEnergy & 0xffff0000) | (value & 0xffff);
energy=iEnergy;
break;
case 1:
iEnergy=Math.round(energy);
iEnergy=(iEnergy & 0xffff) | ((value & 0xffff) << 16);
energy=iEnergy;
break;
case 2:
currentOutput=value;
break;
case 3:
heat=value / 100F;
break;
}
}","public void getGUINetworkData(int id,int value){
switch (id) {
case 0:
    energy=(energy & 0xffff0000) | (value & 0xffff);
  break;
case 1:
energy=(energy & 0xffff) | ((value & 0xffff) << 16);
break;
case 2:
currentOutput=value;
break;
case 3:
heat=value / 100F;
break;
}
}",0.7888198757763976
156685,"public void sendGUINetworkData(Container container,ICrafting iCrafting){
  iCrafting.sendProgressBarUpdate(container,0,Math.round(energy) & 0xffff);
  iCrafting.sendProgressBarUpdate(container,1,(Math.round(energy) & 0xffff0000) >> 16);
  iCrafting.sendProgressBarUpdate(container,2,Math.round(currentOutput));
  iCrafting.sendProgressBarUpdate(container,3,Math.round(heat * 100));
}","public void sendGUINetworkData(Container container,ICrafting iCrafting){
  iCrafting.sendProgressBarUpdate(container,0,energy & 0xffff);
  iCrafting.sendProgressBarUpdate(container,1,(energy & 0xffff0000) >> 16);
  iCrafting.sendProgressBarUpdate(container,2,currentOutput);
  iCrafting.sendProgressBarUpdate(container,3,Math.round(heat * 100));
}",0.7534246575342466
156686,"@Override public void addRecipe(String id,FluidStack ingredient1,FluidStack ingredient2,FluidStack result,int energy,int delay){
  String name=result.getFluid().getName();
  if (ingredient1 == null || ingredient2 == null || result == null) {
    BCLog.logger.warn(""String_Node_Str"" + id + ""String_Node_Str"");
  }
  FlexibleRecipe<FluidStack> recipe=new FlexibleRecipe<FluidStack>(id,result,energy,delay,ingredient1,ingredient2);
  recipes.put(id,recipe);
  validFluids1.add(ingredient1);
  validFluids2.add(ingredient2);
}","@Override public void addRecipe(String id,FluidStack ingredient1,FluidStack ingredient2,FluidStack result,int energy,int delay){
  if (ingredient1 == null || ingredient2 == null || result == null) {
    BCLog.logger.warn(""String_Node_Str"" + id + ""String_Node_Str"");
  }
  FlexibleRecipe<FluidStack> recipe=new FlexibleRecipe<FluidStack>(id,result,energy,delay,ingredient1,ingredient2);
  recipes.put(id,recipe);
  validFluids1.add(ingredient1);
  validFluids2.add(ingredient2);
}",0.957042957042957
156687,"@Override public void renderTileEntityAt(TileEntity tileentity,double x,double y,double z,float f){
  super.renderTileEntityAt(tileentity,x,y,z,f);
  TileAbstractBuilder builder=(TileAbstractBuilder)tileentity;
  if (builder != null) {
    GL11.glPushMatrix();
    GL11.glPushAttrib(GL11.GL_ENABLE_BIT);
    GL11.glEnable(GL11.GL_CULL_FACE);
    GL11.glEnable(GL11.GL_LIGHTING);
    GL11.glEnable(GL11.GL_BLEND);
    GL11.glBlendFunc(GL11.GL_SRC_ALPHA,GL11.GL_ONE_MINUS_SRC_ALPHA);
    GL11.glTranslated(x,y,z);
    GL11.glTranslated(-tileentity.xCoord,-tileentity.yCoord,-tileentity.zCoord);
    if (builder.getPathLaser() != null) {
      for (      LaserData laser : builder.getPathLaser()) {
        if (laser != null) {
          GL11.glPushMatrix();
          RenderLaser.doRenderLaser(TileEntityRendererDispatcher.instance.field_147553_e,laser,EntityLaser.LASER_TEXTURES[4]);
          GL11.glPopMatrix();
        }
      }
    }
    GL11.glPopAttrib();
    GL11.glPopMatrix();
    renderItems.render(tileentity,x,y,z);
  }
}","@Override public void renderTileEntityAt(TileEntity tileentity,double x,double y,double z,float f){
  super.renderTileEntityAt(tileentity,x,y,z,f);
  TileAbstractBuilder builder=(TileAbstractBuilder)tileentity;
  GL11.glPushMatrix();
  GL11.glPushAttrib(GL11.GL_ENABLE_BIT);
  GL11.glEnable(GL11.GL_CULL_FACE);
  GL11.glEnable(GL11.GL_LIGHTING);
  GL11.glEnable(GL11.GL_BLEND);
  GL11.glBlendFunc(GL11.GL_SRC_ALPHA,GL11.GL_ONE_MINUS_SRC_ALPHA);
  GL11.glTranslated(x,y,z);
  GL11.glTranslated(-tileentity.xCoord,-tileentity.yCoord,-tileentity.zCoord);
  if (builder.getPathLaser() != null) {
    for (    LaserData laser : builder.getPathLaser()) {
      if (laser != null) {
        GL11.glPushMatrix();
        RenderLaser.doRenderLaser(TileEntityRendererDispatcher.instance.field_147553_e,laser,EntityLaser.LASER_TEXTURES[4]);
        GL11.glPopMatrix();
      }
    }
  }
  GL11.glPopAttrib();
  GL11.glPopMatrix();
  renderItems.render(tileentity,x,y,z);
}",0.9643753135975917
156688,"@Override public int fill(ForgeDirection from,FluidStack resource,boolean doFill){
  if (BuildcraftFuelRegistry.coolant.getCoolant(resource.getFluid()) != null) {
    return tankCoolant.fill(resource,doFill);
  }
 else   if (BuildcraftFuelRegistry.fuel.getFuel(resource.getFluid()) != null) {
    int filled=tankFuel.fill(resource,doFill);
    if (filled > 0 && tankFuel.getFluid() != null && tankFuel.getFluid().getFluid() != null && tankFuel.getFluid().getFluid() != currentFuel) {
      currentFuel=BuildcraftFuelRegistry.fuel.getFuel(tankFuel.getFluid().getFluid());
    }
    return filled;
  }
 else {
    return 0;
  }
}","@Override public int fill(ForgeDirection from,FluidStack resource,boolean doFill){
  if (BuildcraftFuelRegistry.coolant.getCoolant(resource.getFluid()) != null) {
    return tankCoolant.fill(resource,doFill);
  }
 else   if (BuildcraftFuelRegistry.fuel.getFuel(resource.getFluid()) != null) {
    int filled=tankFuel.fill(resource,doFill);
    if (filled > 0 && tankFuel.getFluid() != null && tankFuel.getFluid().getFluid() != null && (currentFuel == null || tankFuel.getFluid().getFluid() != currentFuel.getFluid())) {
      currentFuel=BuildcraftFuelRegistry.fuel.getFuel(tankFuel.getFluid().getFluid());
    }
    return filled;
  }
 else {
    return 0;
  }
}",0.972093023255814
156689,"private void initSkullItem(ItemStack skullStack){
  if (skullStack.hasTagCompound()) {
    NBTTagCompound nbttagcompound=skullStack.getTagCompound();
    GameProfile gameProfile=null;
    if (nbttagcompound.hasKey(""String_Node_Str"",NBT.TAG_COMPOUND)) {
      gameProfile=NBTUtil.func_152459_a(nbttagcompound.getCompoundTag(""String_Node_Str""));
    }
 else     if (nbttagcompound.hasKey(""String_Node_Str"",NBT.TAG_STRING) && !StringUtils.isNullOrEmpty(nbttagcompound.getString(""String_Node_Str""))) {
      gameProfile=new GameProfile((UUID)null,nbttagcompound.getString(""String_Node_Str""));
    }
    if (!StringUtils.isNullOrEmpty(gameProfile.getName())) {
      if (!gameProfile.isComplete() || !gameProfile.getProperties().containsKey(""String_Node_Str"")) {
        gameProfile=MinecraftServer.getServer().func_152358_ax().func_152655_a(gameProfile.getName());
        if (gameProfile != null) {
          Property property=(Property)Iterables.getFirst(gameProfile.getProperties().get(""String_Node_Str""),(Object)null);
          if (property == null) {
            gameProfile=MinecraftServer.getServer().func_147130_as().fillProfileProperties(gameProfile,true);
          }
        }
      }
    }
    if (gameProfile != null && gameProfile.isComplete() && gameProfile.getProperties().containsKey(""String_Node_Str"")) {
      NBTTagCompound profileNBT=new NBTTagCompound();
      NBTUtil.func_152460_a(profileNBT,gameProfile);
      nbttagcompound.setTag(""String_Node_Str"",profileNBT);
    }
 else {
      nbttagcompound.removeTag(""String_Node_Str"");
    }
  }
}","private void initSkullItem(ItemStack skullStack){
  if (skullStack.hasTagCompound()) {
    NBTTagCompound nbttagcompound=skullStack.getTagCompound();
    GameProfile gameProfile=null;
    if (nbttagcompound.hasKey(""String_Node_Str"",NBT.TAG_COMPOUND)) {
      gameProfile=NBTUtil.func_152459_a(nbttagcompound.getCompoundTag(""String_Node_Str""));
    }
 else     if (nbttagcompound.hasKey(""String_Node_Str"",NBT.TAG_STRING) && !StringUtils.isNullOrEmpty(nbttagcompound.getString(""String_Node_Str""))) {
      gameProfile=new GameProfile((UUID)null,nbttagcompound.getString(""String_Node_Str""));
    }
    if (gameProfile != null && !StringUtils.isNullOrEmpty(gameProfile.getName())) {
      if (!gameProfile.isComplete() || !gameProfile.getProperties().containsKey(""String_Node_Str"")) {
        gameProfile=MinecraftServer.getServer().func_152358_ax().func_152655_a(gameProfile.getName());
        if (gameProfile != null) {
          Property property=(Property)Iterables.getFirst(gameProfile.getProperties().get(""String_Node_Str""),(Object)null);
          if (property == null) {
            gameProfile=MinecraftServer.getServer().func_147130_as().fillProfileProperties(gameProfile,true);
          }
        }
      }
    }
    if (gameProfile != null && gameProfile.isComplete() && gameProfile.getProperties().containsKey(""String_Node_Str"")) {
      NBTTagCompound profileNBT=new NBTTagCompound();
      NBTUtil.func_152460_a(profileNBT,gameProfile);
      nbttagcompound.setTag(""String_Node_Str"",profileNBT);
    }
 else {
      nbttagcompound.removeTag(""String_Node_Str"");
    }
  }
}",0.9926914521766762
156690,"@Override public boolean equals(Object obj){
  if (obj.getClass() != getClass()) {
    return false;
  }
  StationIndex compareId=(StationIndex)obj;
  return index.equals(compareId.index) && side == compareId.side;
}","@Override public boolean equals(Object obj){
  if (obj == null || obj.getClass() != getClass()) {
    return false;
  }
  StationIndex compareId=(StationIndex)obj;
  return index.equals(compareId.index) && side == compareId.side;
}",0.9664429530201344
156691,"@Override public void updateEntity(){
  super.updateEntity();
  laser.iterateTexture();
  if (worldObj.isRemote) {
    return;
  }
  if (mode == IControllable.Mode.Off) {
    removeLaser();
    return;
  }
  if (canFindTable()) {
    findTable();
  }
  if (!isValidTable()) {
    removeLaser();
    return;
  }
  if (getBattery().getEnergyStored() == 0) {
    removeLaser();
    return;
  }
  laser.isVisible=true;
  if (laser != null && canUpdateLaser()) {
    updateLaser();
  }
  int localPower=getBattery().useEnergy(0,getMaxPowerSent(),false);
  laserTarget.receiveLaserEnergy(localPower);
  if (laser != null) {
    pushPower(localPower);
  }
  onPowerSent(localPower);
  sendNetworkUpdate();
}","@Override public void updateEntity(){
  super.updateEntity();
  laser.iterateTexture();
  if (worldObj.isRemote) {
    return;
  }
  if (mode == IControllable.Mode.Off) {
    removeLaser();
    return;
  }
  if (canFindTable()) {
    findTable();
  }
  if (!isValidTable()) {
    removeLaser();
    return;
  }
  if (getBattery().getEnergyStored() == 0) {
    removeLaser();
    return;
  }
  if (laser != null) {
    laser.isVisible=true;
    if (canUpdateLaser()) {
      updateLaser();
    }
  }
  int localPower=getBattery().useEnergy(0,getMaxPowerSent(),false);
  laserTarget.receiveLaserEnergy(localPower);
  if (laser != null) {
    pushPower(localPower);
  }
  onPowerSent(localPower);
  sendNetworkUpdate();
}",0.9478138222849084
156692,"public static void removePipe(Pipe<?> pipe){
  if (!isValid(pipe)) {
    return;
  }
  World world=pipe.container.getWorldObj();
  if (world == null) {
    return;
  }
  int x=pipe.container.xCoord;
  int y=pipe.container.yCoord;
  int z=pipe.container.zCoord;
  if (lastRemovedDate != world.getTotalWorldTime()) {
    lastRemovedDate=world.getTotalWorldTime();
    pipeRemoved.clear();
  }
  if (pipe != null) {
    pipeRemoved.put(new BlockIndex(x,y,z),pipe);
    updateNeighbourSignalState(pipe);
  }
  world.removeTileEntity(x,y,z);
}","public static void removePipe(Pipe<?> pipe){
  if (!isValid(pipe)) {
    return;
  }
  World world=pipe.container.getWorldObj();
  if (world == null) {
    return;
  }
  int x=pipe.container.xCoord;
  int y=pipe.container.yCoord;
  int z=pipe.container.zCoord;
  if (lastRemovedDate != world.getTotalWorldTime()) {
    lastRemovedDate=world.getTotalWorldTime();
    pipeRemoved.clear();
  }
  pipeRemoved.put(new BlockIndex(x,y,z),pipe);
  updateNeighbourSignalState(pipe);
  world.removeTileEntity(x,y,z);
}",0.97131931166348
156693,"public void initFromPipe(Class<? extends Pipe> pipeClass){
  capacity=LIQUID_IN_PIPE;
  flowRate=fluidCapacities.get(pipeClass);
  travelDelay=MathUtils.clamp(Math.round(16 / (flowRate / 10)),1,MAX_TRAVEL_DELAY);
}","public void initFromPipe(Class<? extends Pipe> pipeClass){
  capacity=LIQUID_IN_PIPE;
  flowRate=fluidCapacities.get(pipeClass);
  travelDelay=MathUtils.clamp(Math.round(16F / (flowRate / 10)),1,MAX_TRAVEL_DELAY);
}",0.9976689976689976
156694,"public int extractFluid(IFluidHandler fluidHandler,ForgeDirection side){
  int amount=liquidToExtract > transport.getFlowRate() ? transport.getFlowRate() : liquidToExtract;
  FluidTankInfo tankInfo=transport.getTankInfo(side)[0];
  FluidStack extracted;
  if (tankInfo.fluid != null && tankInfo.fluid != null) {
    extracted=fluidHandler.drain(side.getOpposite(),new FluidStack(tankInfo.fluid,amount),false);
  }
 else {
    extracted=fluidHandler.drain(side.getOpposite(),amount,false);
  }
  int inserted=0;
  if (extracted != null) {
    inserted=transport.fill(side,extracted,true);
    if (inserted > 0) {
      fluidHandler.drain(side.getOpposite(),new FluidStack(extracted.getFluid(),inserted),true);
    }
  }
  return inserted;
}","public int extractFluid(IFluidHandler fluidHandler,ForgeDirection side){
  int amount=liquidToExtract > transport.getFlowRate() ? transport.getFlowRate() : liquidToExtract;
  FluidTankInfo tankInfo=transport.getTankInfo(side)[0];
  FluidStack extracted;
  if (tankInfo.fluid != null) {
    extracted=fluidHandler.drain(side.getOpposite(),new FluidStack(tankInfo.fluid,amount),false);
  }
 else {
    extracted=fluidHandler.drain(side.getOpposite(),amount,false);
  }
  int inserted=0;
  if (extracted != null) {
    inserted=transport.fill(side,extracted,true);
    if (inserted > 0) {
      fluidHandler.drain(side.getOpposite(),new FluidStack(extracted.getFluid(),inserted),true);
    }
  }
  return inserted;
}",0.5234159779614325
156695,"public Achievement registerAchievement(Achievement a){
  page.getAchievements().add(a.registerStat());
  return a;
}","public Achievement registerAchievement(Achievement a){
  page.getAchievements().add(a);
  return a;
}",0.9308755760368664
156696,"public AxisAlignedBB getBoundingBox(){
  return AxisAlignedBB.getBoundingBox(xMin,yMin,zMin,xMax,yMax,zMax);
}","public AxisAlignedBB getBoundingBox(){
  return new AxisAlignedBB(xMin,yMin,zMin,xMax,yMax,zMax);
}",0.9090909090909092
156697,"@Override public double distanceToSquared(BlockPos index){
  int dx=index.x - (xMin + (xMax - xMin + 1));
  int dy=index.y - (yMin + (yMax - yMin + 1));
  int dz=index.z - (zMin + (zMax - zMin + 1));
  return dx * dx + dy * dy + dz * dz;
}","@Override public double distanceToSquared(BlockPos index){
  int dx=index.getX() - (xMin + (xMax - xMin + 1));
  int dy=index.getY() - (yMin + (yMax - yMin + 1));
  int dz=index.getZ() - (zMin + (zMax - zMin + 1));
  return dx * dx + dy * dy + dz * dz;
}",0.9574036511156186
156698,"public Box extendToEncompass(BlockPos toBeContained){
  if (toBeContained.x < xMin) {
    xMin=toBeContained.x - 1;
  }
  if (toBeContained.y < yMin) {
    yMin=toBeContained.y - 1;
  }
  if (toBeContained.z < zMin) {
    zMin=toBeContained.z - 1;
  }
  if (toBeContained.x > xMax) {
    xMax=toBeContained.x + 1;
  }
  if (toBeContained.y > yMax) {
    yMax=toBeContained.y + 1;
  }
  if (toBeContained.z > zMax) {
    zMax=toBeContained.z + 1;
  }
  return this;
}","public Box extendToEncompass(BlockPos toBeContained){
  if (toBeContained.getX() < xMin) {
    xMin=toBeContained.getX() - 1;
  }
  if (toBeContained.getY() < yMin) {
    yMin=toBeContained.getY() - 1;
  }
  if (toBeContained.getZ() < zMin) {
    zMin=toBeContained.getZ() - 1;
  }
  if (toBeContained.getX() > xMax) {
    xMax=toBeContained.getX() + 1;
  }
  if (toBeContained.getY() > yMax) {
    yMax=toBeContained.getY() + 1;
  }
  if (toBeContained.getZ() > zMax) {
    zMax=toBeContained.getZ() + 1;
  }
  return this;
}",0.4879032258064516
156699,"public boolean contains(BlockPos i){
  return contains(i.x,i.y,i.z);
}","public boolean contains(BlockPos i){
  return contains(i.getX(),i.getY(),i.getZ());
}",0.864516129032258
156700,"@Override public boolean doesSneakBypassUse(World world,int x,int y,int z,EntityPlayer player){
  return true;
}","@Override public boolean doesSneakBypassUse(World world,BlockPos pos,EntityPlayer player){
  return true;
}",0.8767123287671232
156701,"@Override public boolean onItemUseFirst(ItemStack stack,EntityPlayer player,World world,int x,int y,int z,int side,float hitX,float hitY,float hitZ){
  if (world.isRemote) {
    return false;
  }
  TileEntity tile=world.getTileEntity(x,y,z);
  if (tile instanceof IDebuggable) {
    ArrayList<String> info=new ArrayList<String>();
    ((IDebuggable)tile).getDebugInfo(info,EnumFacing.getOrientation(side),stack,player);
    for (    String s : info) {
      player.addChatComponentMessage(new ChatComponentText(s));
    }
    return true;
  }
  return false;
}","@Override public boolean onItemUseFirst(ItemStack stack,EntityPlayer player,World world,BlockPos pos,EnumFacing side,float hitX,float hitY,float hitZ){
  if (world.isRemote) {
    return false;
  }
  TileEntity tile=world.getTileEntity(pos);
  if (tile instanceof IDebuggable) {
    ArrayList<String> info=new ArrayList<String>();
    ((IDebuggable)tile).getDebugInfo(info,side,stack,player);
    for (    String s : info) {
      player.addChatComponentMessage(new ChatComponentText(s));
    }
    return true;
  }
  return false;
}",0.9204025617566332
156702,"private boolean classMatch(Item base,Item matched){
  if (base.getClass() == Item.class) {
    return base == matched;
  }
 else   if (base.getClass() == matched.getClass()) {
    if (base instanceof ItemBlock) {
      Block baseBlock=((ItemBlock)base).field_150939_a;
      Block matchedBlock=((ItemBlock)matched).field_150939_a;
      if (baseBlock.getClass() == Block.class) {
        return baseBlock == matchedBlock;
      }
 else {
        return baseBlock.equals(matchedBlock);
      }
    }
 else {
      return true;
    }
  }
 else {
    return false;
  }
}","private boolean classMatch(Item base,Item matched){
  if (base.getClass() == Item.class) {
    return base == matched;
  }
 else   if (base.getClass() == matched.getClass()) {
    if (base instanceof ItemBlock) {
      Block baseBlock=((ItemBlock)base).block;
      Block matchedBlock=((ItemBlock)matched).block;
      if (baseBlock.getClass() == Block.class) {
        return baseBlock == matchedBlock;
      }
 else {
        return baseBlock.equals(matchedBlock);
      }
    }
 else {
      return true;
    }
  }
 else {
    return false;
  }
}",0.9659498207885304
156703,"@Override public void addInformation(ItemStack stack,EntityPlayer player,List list,boolean advanced){
  NBTTagCompound cpt=NBTUtils.getItemData(stack);
  if (cpt.hasKey(""String_Node_Str"")) {
    String name=cpt.getString(""String_Node_Str"");
    if (name.length() > 0) {
      list.add(name);
    }
  }
  if (cpt.hasKey(""String_Node_Str"")) {
switch (cpt.getByte(""String_Node_Str"")) {
case 0:
{
        int x=cpt.getInteger(""String_Node_Str"");
        int y=cpt.getInteger(""String_Node_Str"");
        int z=cpt.getInteger(""String_Node_Str"");
        EnumFacing side=EnumFacing.values()[cpt.getByte(""String_Node_Str"")];
        list.add(StringUtils.localize(""String_Node_Str"" + x + ""String_Node_Str""+ y+ ""String_Node_Str""+ z+ ""String_Node_Str""+ side+ ""String_Node_Str""));
        break;
      }
case 1:
{
      int x=cpt.getInteger(""String_Node_Str"");
      int y=cpt.getInteger(""String_Node_Str"");
      int z=cpt.getInteger(""String_Node_Str"");
      int xLength=cpt.getInteger(""String_Node_Str"") - x + 1;
      int yLength=cpt.getInteger(""String_Node_Str"") - y + 1;
      int zLength=cpt.getInteger(""String_Node_Str"") - z + 1;
      list.add(StringUtils.localize(""String_Node_Str"" + x + ""String_Node_Str""+ y+ ""String_Node_Str""+ z+ ""String_Node_Str""+ xLength+ ""String_Node_Str""+ yLength+ ""String_Node_Str""+ zLength+ ""String_Node_Str""));
      break;
    }
case 2:
{
    NBTTagList pathNBT=cpt.getTagList(""String_Node_Str"",Constants.NBT.TAG_COMPOUND);
    BlockPos first=new BlockPos(pathNBT.getCompoundTagAt(0));
    int x=first.x;
    int y=first.y;
    int z=first.z;
    list.add(StringUtils.localize(""String_Node_Str"" + x + ""String_Node_Str""+ y+ ""String_Node_Str""+ z+ ""String_Node_Str""+ pathNBT.tagCount()+ ""String_Node_Str""));
    break;
  }
case 3:
{
  break;
}
}
}
}","@Override public void addInformation(ItemStack stack,EntityPlayer player,List list,boolean advanced){
  NBTTagCompound cpt=NBTUtils.getItemData(stack);
  if (cpt.hasKey(""String_Node_Str"")) {
    String name=cpt.getString(""String_Node_Str"");
    if (name.length() > 0) {
      list.add(name);
    }
  }
  if (cpt.hasKey(""String_Node_Str"")) {
switch (cpt.getByte(""String_Node_Str"")) {
case 0:
{
        int x=cpt.getInteger(""String_Node_Str"");
        int y=cpt.getInteger(""String_Node_Str"");
        int z=cpt.getInteger(""String_Node_Str"");
        EnumFacing side=EnumFacing.values()[cpt.getByte(""String_Node_Str"")];
        list.add(StringUtils.localize(""String_Node_Str"" + x + ""String_Node_Str""+ y+ ""String_Node_Str""+ z+ ""String_Node_Str""+ side+ ""String_Node_Str""));
        break;
      }
case 1:
{
      int x=cpt.getInteger(""String_Node_Str"");
      int y=cpt.getInteger(""String_Node_Str"");
      int z=cpt.getInteger(""String_Node_Str"");
      int xLength=cpt.getInteger(""String_Node_Str"") - x + 1;
      int yLength=cpt.getInteger(""String_Node_Str"") - y + 1;
      int zLength=cpt.getInteger(""String_Node_Str"") - z + 1;
      list.add(StringUtils.localize(""String_Node_Str"" + x + ""String_Node_Str""+ y+ ""String_Node_Str""+ z+ ""String_Node_Str""+ xLength+ ""String_Node_Str""+ yLength+ ""String_Node_Str""+ zLength+ ""String_Node_Str""));
      break;
    }
case 2:
{
    NBTTagList pathNBT=cpt.getTagList(""String_Node_Str"",Constants.NBT.TAG_COMPOUND);
    BlockPos first=NBTUtils.readBlockPos(pathNBT);
    int x=first.getX();
    int y=first.getY();
    int z=first.getZ();
    list.add(StringUtils.localize(""String_Node_Str"" + x + ""String_Node_Str""+ y+ ""String_Node_Str""+ z+ ""String_Node_Str""+ pathNBT.tagCount()+ ""String_Node_Str""));
    break;
  }
case 3:
{
  break;
}
}
}
}",0.9836435420191766
156704,"@Override public List<BlockPos> getPath(ItemStack item){
  NBTTagCompound cpt=NBTUtils.getItemData(item);
  if (cpt.hasKey(""String_Node_Str"") && cpt.getByte(""String_Node_Str"") == 2) {
    List<BlockPos> indexList=new ArrayList<BlockPos>();
    NBTTagList pathNBT=cpt.getTagList(""String_Node_Str"",Constants.NBT.TAG_COMPOUND);
    for (int i=0; i < pathNBT.tagCount(); i++) {
      indexList.add(new BlockPos(pathNBT.getCompoundTagAt(i)));
    }
    return indexList;
  }
 else   if (cpt.hasKey(""String_Node_Str"") && cpt.getByte(""String_Node_Str"") == 0) {
    List<BlockPos> indexList=new ArrayList<BlockPos>();
    indexList.add(new BlockPos(cpt.getInteger(""String_Node_Str""),cpt.getInteger(""String_Node_Str""),cpt.getInteger(""String_Node_Str"")));
    return indexList;
  }
 else {
    return null;
  }
}","@Override public List<BlockPos> getPath(ItemStack item){
  NBTTagCompound cpt=NBTUtils.getItemData(item);
  if (cpt.hasKey(""String_Node_Str"") && cpt.getByte(""String_Node_Str"") == 2) {
    List<BlockPos> indexList=new ArrayList<BlockPos>();
    NBTTagList pathNBT=cpt.getTagList(""String_Node_Str"",Constants.NBT.TAG_COMPOUND);
    for (int i=0; i < pathNBT.tagCount(); i++) {
      indexList.add(NBTUtils.readBlockPos(pathNBT.getCompoundTagAt(i)));
    }
    return indexList;
  }
 else   if (cpt.hasKey(""String_Node_Str"") && cpt.getByte(""String_Node_Str"") == 0) {
    List<BlockPos> indexList=new ArrayList<BlockPos>();
    indexList.add(new BlockPos(cpt.getInteger(""String_Node_Str""),cpt.getInteger(""String_Node_Str""),cpt.getInteger(""String_Node_Str"")));
    return indexList;
  }
 else {
    return null;
  }
}",0.9894606323620584
156705,"@Override public EnumFacing getPointSide(ItemStack item){
  NBTTagCompound cpt=NBTUtils.getItemData(item);
  if (cpt.hasKey(""String_Node_Str"") && cpt.getByte(""String_Node_Str"") == 0) {
    return EnumFacing.values()[cpt.getByte(""String_Node_Str"")];
  }
 else {
    return EnumFacing.UNKNOWN;
  }
}","@Override public EnumFacing getPointSide(ItemStack item){
  NBTTagCompound cpt=NBTUtils.getItemData(item);
  if (cpt.hasKey(""String_Node_Str"") && cpt.getByte(""String_Node_Str"") == 0) {
    return EnumFacing.values()[cpt.getByte(""String_Node_Str"")];
  }
 else {
    return null;
  }
}",0.9620689655172414
156706,"@Override public boolean onItemUse(ItemStack stack,EntityPlayer par2EntityPlayer,World world,int x,int y,int z,int side,float par8,float par9,float par10){
  TileEntity tile=world.getTileEntity(x,y,z);
  NBTTagCompound cpt=NBTUtils.getItemData(stack);
  if (tile instanceof IPathProvider) {
    cpt.setByte(""String_Node_Str"",(byte)2);
    NBTTagList pathNBT=new NBTTagList();
    for (    BlockPos index : ((IPathProvider)tile).getPath()) {
      NBTTagCompound nbt=new NBTTagCompound();
      index.writeTo(nbt);
      pathNBT.appendTag(nbt);
    }
    cpt.setTag(""String_Node_Str"",pathNBT);
  }
 else   if (tile instanceof IAreaProvider) {
    cpt.setByte(""String_Node_Str"",(byte)1);
    IAreaProvider areaTile=(IAreaProvider)tile;
    cpt.setInteger(""String_Node_Str"",areaTile.xMin());
    cpt.setInteger(""String_Node_Str"",areaTile.yMin());
    cpt.setInteger(""String_Node_Str"",areaTile.zMin());
    cpt.setInteger(""String_Node_Str"",areaTile.xMax());
    cpt.setInteger(""String_Node_Str"",areaTile.yMax());
    cpt.setInteger(""String_Node_Str"",areaTile.zMax());
  }
 else {
    cpt.setByte(""String_Node_Str"",(byte)0);
    cpt.setByte(""String_Node_Str"",(byte)side);
    cpt.setInteger(""String_Node_Str"",x);
    cpt.setInteger(""String_Node_Str"",y);
    cpt.setInteger(""String_Node_Str"",z);
  }
  return true;
}","@Override public boolean onItemUse(ItemStack stack,EntityPlayer par2EntityPlayer,World world,BlockPos pos,EnumFacing side,float par8,float par9,float par10){
  TileEntity tile=world.getTileEntity(pos);
  NBTTagCompound cpt=NBTUtils.getItemData(stack);
  if (tile instanceof IPathProvider) {
    cpt.setByte(""String_Node_Str"",(byte)2);
    NBTTagList pathNBT=new NBTTagList();
    for (    BlockPos index : ((IPathProvider)tile).getPath()) {
      pathNBT.appendTag(NBTUtils.writeBlockPos(index));
    }
    cpt.setTag(""String_Node_Str"",pathNBT);
  }
 else   if (tile instanceof IAreaProvider) {
    cpt.setByte(""String_Node_Str"",(byte)1);
    IAreaProvider areaTile=(IAreaProvider)tile;
    cpt.setInteger(""String_Node_Str"",areaTile.xMin());
    cpt.setInteger(""String_Node_Str"",areaTile.yMin());
    cpt.setInteger(""String_Node_Str"",areaTile.zMin());
    cpt.setInteger(""String_Node_Str"",areaTile.xMax());
    cpt.setInteger(""String_Node_Str"",areaTile.yMax());
    cpt.setInteger(""String_Node_Str"",areaTile.zMax());
  }
 else {
    cpt.setByte(""String_Node_Str"",(byte)0);
    cpt.setByte(""String_Node_Str"",(byte)side.getIndex());
    cpt.setInteger(""String_Node_Str"",pos.getX());
    cpt.setInteger(""String_Node_Str"",pos.getY());
    cpt.setInteger(""String_Node_Str"",pos.getZ());
  }
  return true;
}",0.8226733052470317
156707,"/** 
 * Deploy the contents of the byte array as if the builder was located at {x, y, z} facing the direction dir. 
 */
public abstract void deployBlueprintFromFileStream(World world,int x,int y,int z,EnumFacing dir,byte[] data);","/** 
 * Deploy the contents of the byte array as if the builder was located at {pos} facing the direction dir. 
 */
public abstract void deployBlueprintFromFileStream(World world,BlockPos pos,EnumFacing dir,byte[] data);",0.9131403118040088
156708,"/** 
 * Deploy the contents of the blueprints as if the builder was located at {x, y, z} facing the direction dir. 
 */
public abstract void deployBlueprint(World world,BlockPos pos,EnumFacing facing,File file);","/** 
 * Deploy the contents of the blueprints as if the builder was located at {pos} facing the direction dir. 
 */
public abstract void deployBlueprint(World world,BlockPos pos,EnumFacing facing,File file);",0.9760765550239234
156709,"void registerSchematicBlock(Block block,int meta,Class<? extends Schematic> clazz,Object... params);","void registerSchematicBlock(IBlockState state,Class<? extends Schematic> clazz,Object... params);",0.883248730964467
156710,"boolean isSupported(Block block,int metadata);",boolean isSupported(IBlockState state);,0.7294117647058823
156711,"@SubscribeEvent @SideOnly(Side.CLIENT) public void textureHook(TextureStitchEvent.Pre event){
  if (event.map.getTextureType() == 0) {
    for (    Item i : BlockGenericPipe.pipes.keySet()) {
      Pipe<?> dummyPipe=BlockGenericPipe.createPipe(i);
      if (dummyPipe != null) {
        dummyPipe.getIconProvider().registerIcons(event.map);
      }
    }
    wireIconProvider.registerIcons(event.map);
    for (    GateDefinition.GateMaterial material : GateDefinition.GateMaterial.VALUES) {
      material.registerBlockIcon(event.map);
    }
    for (    GateDefinition.GateLogic logic : GateDefinition.GateLogic.VALUES) {
      logic.registerBlockIcon(event.map);
    }
    for (    IGateExpansion expansion : GateExpansions.getExpansions()) {
      expansion.registerBlockOverlay(event.map);
    }
  }
}","@SubscribeEvent @SideOnly(Side.CLIENT) public void textureHook(TextureStitchEvent.Pre event){
  if (event.map.getTextureType() == 0) {
    for (    Item i : BlockGenericPipe.pipes.keySet()) {
      Pipe<?> dummyPipe=BlockGenericPipe.createPipe(i);
      if (dummyPipe != null) {
        dummyPipe.getIconProvider().registerIcons(event.map);
      }
    }
    wireIconProvider.registerIcons(event.map);
    for (    GateDefinition.GateMaterial material : GateDefinition.GateMaterial.VALUES) {
      material.registerBlockIcon(event.map);
    }
    for (    GateDefinition.GateLogic logic : GateDefinition.GateLogic.VALUES) {
      logic.registerBlockIcon(event.map);
    }
    for (    IGateExpansion expansion : GateExpansions.getExpansions()) {
      expansion.registerBlockOverlay(event.map);
    }
    PipeRendererTESR.INSTANCE.onTextureReload();
  }
}",0.9704996989765202
156712,"@Override public void registerTileEntities(){
  super.registerTileEntities();
  PipeRendererTESR rp=new PipeRendererTESR();
  ClientRegistry.bindTileEntitySpecialRenderer(TileGenericPipe.class,rp);
}","@Override public void registerTileEntities(){
  super.registerTileEntities();
  ClientRegistry.bindTileEntitySpecialRenderer(TileGenericPipe.class,PipeRendererTESR.INSTANCE);
}",0.8106666666666666
156713,"public PipeRendererTESR(){
  customRenderItem=new RenderItem(){
    @Override public boolean shouldBob(){
      return false;
    }
    @Override public boolean shouldSpreadItems(){
      return false;
    }
  }
;
  customRenderItem.setRenderManager(RenderManager.instance);
}","private PipeRendererTESR(){
  customRenderItem=new RenderItem(){
    @Override public boolean shouldBob(){
      return false;
    }
    @Override public boolean shouldSpreadItems(){
      return false;
    }
  }
;
  customRenderItem.setRenderManager(RenderManager.instance);
}",0.9801084990958407
156714,"/** 
 * Relocates a stack nbt from the registry referential to the world referential.
 */
public void stackToWorld(NBTTagCompound nbt) throws MappingNotFoundException {
  Item item=getItemForId(nbt.getShort(""String_Node_Str""));
  nbt.setShort(""String_Node_Str"",(short)Item.getIdFromItem(item));
}","/** 
 * Relocates a stack nbt from the registry referential to the world referential. 
 */
public void stackToWorld(NBTTagCompound nbt) throws MappingNotFoundException {
  Item item=getItemForId(nbt.getShort(""String_Node_Str""));
  nbt.setShort(""String_Node_Str"",(short)Item.getIdFromItem(item));
}",0.9983136593591906
156715,"public void scanAndTranslateStacksToRegistry(NBTTagCompound nbt){
  if (isStackLayout(nbt)) {
    stackToRegistry(nbt);
  }
  for (  Object keyO : nbt.func_150296_c()) {
    String key=(String)keyO;
    if (nbt.getTag(key) instanceof NBTTagCompound) {
      scanAndTranslateStacksToRegistry(nbt.getCompoundTag(key));
    }
    if (nbt.getTag(key) instanceof NBTTagList) {
      NBTTagList list=(NBTTagList)nbt.getTag(key);
      if (list.func_150303_d() == Constants.NBT.TAG_COMPOUND) {
        for (int i=0; i < list.tagCount(); ++i) {
          scanAndTranslateStacksToRegistry(list.getCompoundTagAt(i));
        }
      }
    }
  }
}","public void scanAndTranslateStacksToRegistry(NBTTagCompound nbt){
  if (isStackLayout(nbt)) {
    stackToRegistry(nbt);
  }
  for (  Object keyO : nbt.getKeySet()) {
    String key=(String)keyO;
    if (nbt.getTag(key) instanceof NBTTagCompound) {
      scanAndTranslateStacksToRegistry(nbt.getCompoundTag(key));
    }
    if (nbt.getTag(key) instanceof NBTTagList) {
      NBTTagList list=(NBTTagList)nbt.getTag(key);
      if (list.getTagType() == Constants.NBT.TAG_COMPOUND) {
        for (int i=0; i < list.tagCount(); ++i) {
          scanAndTranslateStacksToRegistry(list.getCompoundTagAt(i));
        }
      }
    }
  }
}",0.9644268774703556
156716,"public void scanAndTranslateStacksToWorld(NBTTagCompound nbt) throws MappingNotFoundException {
  if (isStackLayout(nbt)) {
    stackToWorld(nbt);
  }
  for (  Object keyO : new HashSet(nbt.func_150296_c())) {
    String key=(String)keyO;
    if (nbt.getTag(key) instanceof NBTTagCompound) {
      try {
        scanAndTranslateStacksToWorld(nbt.getCompoundTag(key));
      }
 catch (      MappingNotFoundException e) {
        nbt.removeTag(key);
      }
    }
    if (nbt.getTag(key) instanceof NBTTagList) {
      NBTTagList list=(NBTTagList)nbt.getTag(key);
      if (list.func_150303_d() == Constants.NBT.TAG_COMPOUND) {
        for (int i=list.tagCount() - 1; i >= 0; --i) {
          try {
            scanAndTranslateStacksToWorld(list.getCompoundTagAt(i));
          }
 catch (          MappingNotFoundException e) {
            list.removeTag(i);
          }
        }
      }
    }
  }
}","public void scanAndTranslateStacksToWorld(NBTTagCompound nbt) throws MappingNotFoundException {
  if (isStackLayout(nbt)) {
    stackToWorld(nbt);
  }
  for (  Object keyO : new HashSet(nbt.getKeySet())) {
    String key=(String)keyO;
    if (nbt.getTag(key) instanceof NBTTagCompound) {
      try {
        scanAndTranslateStacksToWorld(nbt.getCompoundTag(key));
      }
 catch (      MappingNotFoundException e) {
        nbt.removeTag(key);
      }
    }
    if (nbt.getTag(key) instanceof NBTTagList) {
      NBTTagList list=(NBTTagList)nbt.getTag(key);
      if (list.getTagType() == Constants.NBT.TAG_COMPOUND) {
        for (int i=list.tagCount() - 1; i >= 0; --i) {
          try {
            scanAndTranslateStacksToWorld(list.getCompoundTagAt(i));
          }
 catch (          MappingNotFoundException e) {
            list.removeTag(i);
          }
        }
      }
    }
  }
}",0.9748462828395752
156717,"private Object getMissingMappingFromFML(boolean isBlock,String name,int i){
  String modName=name.split(""String_Node_Str"")[0];
  if (Loader.isModLoaded(modName)) {
    try {
      FMLMissingMappingsEvent.MissingMapping mapping=new FMLMissingMappingsEvent.MissingMapping((isBlock ? '\u0001' : '\u0020') + name,i);
      ListMultimap<String,FMLMissingMappingsEvent.MissingMapping> missingMapping=ArrayListMultimap.create();
      missingMapping.put(modName,mapping);
      FMLMissingMappingsEvent event=new FMLMissingMappingsEvent(missingMapping);
      for (      ModContainer container : Loader.instance().getModList()) {
        if (container instanceof FMLModContainer) {
          event.applyModContainer(container);
          ((FMLModContainer)container).handleModStateEvent(event);
          if (mapping.getAction() != FMLMissingMappingsEvent.Action.DEFAULT) {
            break;
          }
        }
      }
      if (mapping.getAction() == FMLMissingMappingsEvent.Action.REMAP) {
        return mapping.getTarget();
      }
    }
 catch (    Exception e) {
      e.printStackTrace();
    }
  }
  return null;
}","private Object getMissingMappingFromFML(boolean isBlock,String name,int i){
  String modName=name.split(""String_Node_Str"")[0];
  if (Loader.isModLoaded(modName)) {
    try {
      FMLMissingMappingsEvent.MissingMapping mapping=new FMLMissingMappingsEvent.MissingMapping(isBlock ? GameRegistry.Type.BLOCK : GameRegistry.Type.ITEM,name,i);
      ListMultimap<String,FMLMissingMappingsEvent.MissingMapping> missingMapping=ArrayListMultimap.create();
      missingMapping.put(modName,mapping);
      FMLMissingMappingsEvent event=new FMLMissingMappingsEvent(missingMapping);
      for (      ModContainer container : Loader.instance().getModList()) {
        if (container instanceof FMLModContainer) {
          event.applyModContainer(container);
          ((FMLModContainer)container).handleModStateEvent(event);
          if (mapping.getAction() != FMLMissingMappingsEvent.Action.DEFAULT) {
            break;
          }
        }
      }
      if (mapping.getAction() == FMLMissingMappingsEvent.Action.REMAP) {
        return mapping.getTarget();
      }
    }
 catch (    Exception e) {
      e.printStackTrace();
    }
  }
  return null;
}",0.9703670942061036
156718,"/** 
 * Relocates a stack nbt from the world referential to the registry referential.
 */
public void stackToRegistry(NBTTagCompound nbt){
  Item item=Item.getItemById(nbt.getShort(""String_Node_Str""));
  nbt.setShort(""String_Node_Str"",(short)getIdForItem(item));
}","/** 
 * Relocates a stack nbt from the world referential to the registry referential. 
 */
public void stackToRegistry(NBTTagCompound nbt){
  Item item=Item.getItemById(nbt.getShort(""String_Node_Str""));
  nbt.setShort(""String_Node_Str"",(short)getIdForItem(item));
}",0.998109640831758
156719,"public void write(NBTTagCompound nbt){
  NBTTagList blocksMapping=new NBTTagList();
  for (  Block b : idToBlock) {
    NBTTagCompound sub=new NBTTagCompound();
    if (b != null) {
      String name=Block.blockRegistry.getNameForObject(b);
      if (name == null || name.length() == 0) {
        BCLog.logger.error(""String_Node_Str"" + b.getUnlocalizedName() + ""String_Node_Str""+ b.getClass().getName()+ ""String_Node_Str"");
      }
 else {
        sub.setString(""String_Node_Str"",name);
      }
    }
    blocksMapping.appendTag(sub);
  }
  nbt.setTag(""String_Node_Str"",blocksMapping);
  NBTTagList itemsMapping=new NBTTagList();
  for (  Item i : idToItem) {
    NBTTagCompound sub=new NBTTagCompound();
    if (i != null) {
      String name=Item.itemRegistry.getNameForObject(i);
      if (name == null || name.length() == 0) {
        BCLog.logger.error(""String_Node_Str"" + i.getUnlocalizedName() + ""String_Node_Str""+ i.getClass().getName()+ ""String_Node_Str"");
      }
 else {
        sub.setString(""String_Node_Str"",name);
      }
    }
    itemsMapping.appendTag(sub);
  }
  nbt.setTag(""String_Node_Str"",itemsMapping);
  NBTTagList entitiesMapping=new NBTTagList();
  for (  Class<? extends Entity> e : idToEntity) {
    NBTTagCompound sub=new NBTTagCompound();
    sub.setString(""String_Node_Str"",e.getCanonicalName());
    entitiesMapping.appendTag(sub);
  }
  nbt.setTag(""String_Node_Str"",entitiesMapping);
}","public void write(NBTTagCompound nbt){
  NBTTagList blocksMapping=new NBTTagList();
  for (  Block b : idToBlock) {
    NBTTagCompound sub=new NBTTagCompound();
    if (b != null) {
      Object obj=Block.blockRegistry.getNameForObject(b);
      if (obj == null) {
        BCLog.logger.error(""String_Node_Str"" + b.getUnlocalizedName() + ""String_Node_Str""+ b.getClass().getName()+ ""String_Node_Str"");
      }
 else {
        String name=obj.toString();
        if (name == null || name.length() == 0) {
          BCLog.logger.error(""String_Node_Str"" + b.getUnlocalizedName() + ""String_Node_Str""+ b.getClass().getName()+ ""String_Node_Str"");
        }
 else {
          sub.setString(""String_Node_Str"",name);
        }
      }
    }
    blocksMapping.appendTag(sub);
  }
  nbt.setTag(""String_Node_Str"",blocksMapping);
  NBTTagList itemsMapping=new NBTTagList();
  for (  Item i : idToItem) {
    NBTTagCompound sub=new NBTTagCompound();
    if (i != null) {
      Object obj=Item.itemRegistry.getNameForObject(i);
      if (obj == null) {
        BCLog.logger.error(""String_Node_Str"" + i.getUnlocalizedName() + ""String_Node_Str""+ i.getClass().getName()+ ""String_Node_Str"");
      }
 else {
        String name=obj.toString();
        if (name == null || name.length() == 0) {
          BCLog.logger.error(""String_Node_Str"" + i.getUnlocalizedName() + ""String_Node_Str""+ i.getClass().getName()+ ""String_Node_Str"");
        }
 else {
          sub.setString(""String_Node_Str"",name);
        }
      }
    }
    itemsMapping.appendTag(sub);
  }
  nbt.setTag(""String_Node_Str"",itemsMapping);
  NBTTagList entitiesMapping=new NBTTagList();
  for (  Class<? extends Entity> e : idToEntity) {
    NBTTagCompound sub=new NBTTagCompound();
    sub.setString(""String_Node_Str"",e.getCanonicalName());
    entitiesMapping.appendTag(sub);
  }
  nbt.setTag(""String_Node_Str"",entitiesMapping);
}",0.8476017000607164
156720,"/** 
 * Initializes a schematic for blueprint according to an objet placed on {x, y, z} on the world. For blocks, block and meta fields will be initialized automatically.
 */
public void initializeFromObjectAt(IBuilderContext context,int x,int y,int z){
}","/** 
 * Initializes a schematic for blueprint according to an objet placed on {x, y, z} on the world. For blocks, block and meta fields will be initialized automatically.
 */
public void initializeFromObjectAt(IBuilderContext context,BlockPos pos){
}",0.9425742574257424
156721,"/** 
 * Return true if the block on the world correspond to the block stored in the blueprint at the location given by the slot. By default, this subprogram is permissive and doesn't take into account metadata. Post processing will be called on these blocks.
 */
public boolean isAlreadyBuilt(IBuilderContext context,int x,int y,int z){
  return true;
}","/** 
 * Return true if the block on the world correspond to the block stored in the blueprint at the location given by the slot. By default, this subprogram is permissive and doesn't take into account metadata. Post processing will be called on these blocks.
 */
public boolean isAlreadyBuilt(IBuilderContext context,BlockPos pos){
  return true;
}",0.9586305278174037
156722,"/** 
 * Places the block in the world, at the location specified in the slot, using the stack in parameters
 */
public void placeInWorld(IBuilderContext context,int x,int y,int z,LinkedList<ItemStack> stacks){
}","/** 
 * Places the block in the world, at the location specified in the slot, using the stack in parameters
 */
public void placeInWorld(IBuilderContext context,BlockPos pos,LinkedList<ItemStack> stacks){
}",0.9304556354916068
156723,"/** 
 * Write specific requirements coming from the world to the blueprint.
 */
public void storeRequirements(IBuilderContext context,int x,int y,int z){
}","/** 
 * Write specific requirements coming from the world to the blueprint.
 */
public void storeRequirements(IBuilderContext context,BlockPos pos){
}",0.9114754098360656
156724,"/** 
 * Called on a block when the blueprint has finished to place all the blocks. This may be useful to adjust variable depending on surrounding blocks that may not be there already at initial building.
 */
public void postProcessing(IBuilderContext context,int x,int y,int z){
}","/** 
 * Called on a block when the blueprint has finished to place all the blocks. This may be useful to adjust variable depending on surrounding blocks that may not be there already at initial building.
 */
public void postProcessing(IBuilderContext context,BlockPos pos){
}",0.9477477477477476
156725,"@Override public boolean handle(World world,int x,int y,int z,ForgeDirection direction,ItemStack stack,EntityPlayer player,IStripesActivator activator){
  AxisAlignedBB box=AxisAlignedBB.getBoundingBox(x,y,z,x + 1,y + 1,z + 1);
  List entities=world.getEntitiesWithinAABBExcludingEntity(null,box);
  if (entities.size() <= 0) {
    return false;
  }
  List<EntityLivingBase> livingEntities=new LinkedList<EntityLivingBase>();
  for (  Object entityObj : entities) {
    if (entityObj instanceof EntityLivingBase) {
      livingEntities.add((EntityLivingBase)entityObj);
    }
  }
  player.setCurrentItemOrArmor(0,stack);
  boolean successful=false;
  Collections.shuffle(livingEntities);
  while (livingEntities.size() > 0) {
    EntityLivingBase entity=livingEntities.remove(0);
    if (!player.interactWith(entity)) {
      continue;
    }
    successful=true;
    dropItemsExcept(stack,player,activator,direction);
  }
  if (stack.stackSize > 0 && successful) {
    activator.sendItem(stack,direction.getOpposite());
  }
  return successful;
}","@Override public boolean handle(World world,int x,int y,int z,ForgeDirection direction,ItemStack stack,EntityPlayer player,IStripesActivator activator){
  AxisAlignedBB box=AxisAlignedBB.getBoundingBox(x,y,z,x + 1,y + 1,z + 1);
  List entities=world.getEntitiesWithinAABBExcludingEntity(null,box);
  if (entities.size() <= 0) {
    return false;
  }
  List<EntityLivingBase> livingEntities=new LinkedList<EntityLivingBase>();
  for (  Object entityObj : entities) {
    if (entityObj instanceof EntityLivingBase) {
      livingEntities.add((EntityLivingBase)entityObj);
    }
  }
  player.setCurrentItemOrArmor(0,stack);
  boolean successful=false;
  Collections.shuffle(livingEntities);
  while (livingEntities.size() > 0) {
    EntityLivingBase entity=livingEntities.remove(0);
    if (!player.interactWith(entity)) {
      continue;
    }
    successful=true;
    dropItemsExcept(stack,player,activator,direction);
  }
  if (stack.stackSize > 0 && successful) {
    activator.sendItem(stack,direction.getOpposite());
  }
  player.setCurrentItemOrArmor(0,null);
  return successful;
}",0.9812382739212008
156726,"@Override public boolean handle(World world,int x,int y,int z,ForgeDirection direction,ItemStack stack,EntityPlayer player,IStripesActivator activator){
  Block block=world.getBlock(x,y,z);
  if (block instanceof IShearable) {
    IShearable shearableBlock=(IShearable)block;
    if (shearableBlock.isShearable(stack,world,x,y,z)) {
      world.playSoundEffect(x,y,z,Block.soundTypeGrass.getBreakSound(),1,1);
      List<ItemStack> drops=shearableBlock.onSheared(stack,world,x,y,z,EnchantmentHelper.getEnchantmentLevel(Enchantment.fortune.effectId,stack));
      world.setBlockToAir(x,y,z);
      stack.damageItem(1,player);
      activator.sendItem(stack,direction.getOpposite());
      for (      ItemStack dropStack : drops) {
        activator.sendItem(dropStack,direction.getOpposite());
      }
      return true;
    }
  }
  return false;
}","@Override public boolean handle(World world,int x,int y,int z,ForgeDirection direction,ItemStack stack,EntityPlayer player,IStripesActivator activator){
  Block block=world.getBlock(x,y,z);
  if (block instanceof IShearable) {
    IShearable shearableBlock=(IShearable)block;
    if (shearableBlock.isShearable(stack,world,x,y,z)) {
      world.playSoundEffect(x,y,z,Block.soundTypeGrass.getBreakSound(),1,1);
      List<ItemStack> drops=shearableBlock.onSheared(stack,world,x,y,z,EnchantmentHelper.getEnchantmentLevel(Enchantment.fortune.effectId,stack));
      world.setBlockToAir(x,y,z);
      if (stack.attemptDamageItem(1,player.getRNG())) {
        stack.stackSize--;
      }
      if (stack.stackSize > 0) {
        activator.sendItem(stack,direction.getOpposite());
      }
      for (      ItemStack dropStack : drops) {
        activator.sendItem(dropStack,direction.getOpposite());
      }
      return true;
    }
  }
  return false;
}",0.935340022296544
156727,"@Override public float getMaxU(){
  return u + (uScale * w / icon.getIconWidth());
}","@Override public float getMaxU(){
  return u + (uScale * w / iw);
}",0.8741721854304636
156728,"public SubIcon(IIcon icon,int u,int v,int w,int h){
  this.icon=icon;
  this.uScale=icon.getMaxU() - icon.getMinU();
  this.vScale=icon.getMaxV() - icon.getMinV();
  this.u=icon.getMinU() + (this.uScale * u / icon.getIconWidth());
  this.v=icon.getMinV() + (this.vScale * v / icon.getIconHeight());
  this.w=w;
  this.h=h;
}","public SubIcon(IIcon icon,int u,int v,int w,int h){
  iw=icon.getIconWidth();
  ih=icon.getIconHeight();
  if (Minecraft.getMinecraft().gameSettings.anisotropicFiltering > 1) {
    iw-=16;
    ih-=16;
  }
  this.icon=icon;
  this.uScale=icon.getMaxU() - icon.getMinU();
  this.vScale=icon.getMaxV() - icon.getMinV();
  this.u=icon.getMinU() + (this.uScale * u / iw);
  this.v=icon.getMinV() + (this.vScale * v / ih);
  this.w=w;
  this.h=h;
}",0.7493472584856397
156729,"@Override public float getInterpolatedU(double uu){
  return u + (uScale * (float)uu / (float)icon.getIconWidth());
}","@Override public float getInterpolatedU(double uu){
  return u + (uScale * (float)uu / (float)iw);
}",0.912442396313364
156730,"@Override public float getMaxV(){
  return v + (vScale * h / icon.getIconHeight());
}","@Override public float getMaxV(){
  return v + (vScale * h / ih);
}",0.881578947368421
156731,"@Override public float getInterpolatedV(double vv){
  return v + (vScale * (float)vv / (float)icon.getIconHeight());
}","@Override public float getInterpolatedV(double vv){
  return v + (vScale * (float)vv / (float)ih);
}",0.9174311926605504
156732,"private byte[][][] movements(Node from){
  byte[][][] resultMoves=new byte[3][3][3];
  for (int dx=-1; dx <= +1; ++dx) {
    for (int dy=-1; dy <= +1; ++dy) {
      for (int dz=-1; dz <= +1; ++dz) {
        int x=from.index.x + dx;
        int y=from.index.y + dy;
        int z=from.index.z + dz;
        if (endReached(x,y,z)) {
          resultMoves[dx + 1][dy + 1][dz + 1]=2;
        }
 else         if (!BuildCraftAPI.isSoftBlock(world,x,y,z)) {
          resultMoves[dx + 1][dy + 1][dz + 1]=0;
        }
 else {
          resultMoves[dx + 1][dy + 1][dz + 1]=1;
        }
      }
    }
  }
  resultMoves[1][1][1]=0;
  if (resultMoves[0][1][1] == 0) {
    for (int i=0; i <= 2; ++i) {
      for (int j=0; j <= 2; ++j) {
        resultMoves[0][i][j]=0;
      }
    }
  }
  if (resultMoves[2][1][1] == 0) {
    for (int i=0; i <= 2; ++i) {
      for (int j=0; j <= 2; ++j) {
        resultMoves[2][i][j]=0;
      }
    }
  }
  if (resultMoves[1][0][1] == 0) {
    for (int i=0; i <= 2; ++i) {
      for (int j=0; j <= 2; ++j) {
        resultMoves[i][0][j]=0;
      }
    }
  }
  if (resultMoves[1][2][1] == 0) {
    for (int i=0; i <= 2; ++i) {
      for (int j=0; j <= 2; ++j) {
        resultMoves[i][2][j]=0;
      }
    }
  }
  if (resultMoves[1][1][0] == 0) {
    for (int i=0; i <= 2; ++i) {
      for (int j=0; j <= 2; ++j) {
        resultMoves[i][j][0]=0;
      }
    }
  }
  if (resultMoves[1][1][2] == 0) {
    for (int i=0; i <= 2; ++i) {
      for (int j=0; j <= 2; ++j) {
        resultMoves[i][j][2]=0;
      }
    }
  }
  if (resultMoves[0][0][1] == 0) {
    resultMoves[0][0][0]=0;
    resultMoves[0][0][2]=0;
  }
  if (resultMoves[0][2][1] == 0) {
    resultMoves[0][2][0]=0;
    resultMoves[0][2][2]=0;
  }
  if (resultMoves[2][0][1] == 0) {
    resultMoves[2][0][0]=0;
    resultMoves[2][0][2]=0;
  }
  if (resultMoves[2][2][1] == 0) {
    resultMoves[2][2][0]=0;
    resultMoves[2][2][2]=0;
  }
  if (resultMoves[0][1][0] == 0) {
    resultMoves[0][0][0]=0;
    resultMoves[0][2][0]=0;
  }
  if (resultMoves[0][1][2] == 0) {
    resultMoves[0][0][2]=0;
    resultMoves[0][2][2]=0;
  }
  if (resultMoves[2][1][0] == 0) {
    resultMoves[2][0][0]=0;
    resultMoves[2][2][0]=0;
  }
  if (resultMoves[2][1][2] == 0) {
    resultMoves[2][0][2]=0;
    resultMoves[2][2][2]=0;
  }
  if (resultMoves[1][0][0] == 0) {
    resultMoves[0][0][0]=0;
    resultMoves[2][0][0]=0;
  }
  if (resultMoves[1][0][2] == 0) {
    resultMoves[0][0][2]=0;
    resultMoves[2][0][2]=0;
  }
  if (resultMoves[1][2][0] == 0) {
    resultMoves[0][2][0]=0;
    resultMoves[2][2][0]=0;
  }
  if (resultMoves[1][2][2] == 0) {
    resultMoves[0][2][2]=0;
    resultMoves[2][2][2]=0;
  }
  return resultMoves;
}","private byte[][][] movements(Node from){
  byte[][][] resultMoves=new byte[3][3][3];
  for (int dx=-1; dx <= +1; ++dx) {
    for (int dy=-1; dy <= +1; ++dy) {
      for (int dz=-1; dz <= +1; ++dz) {
        int x=from.index.x + dx;
        int y=from.index.y + dy;
        int z=from.index.z + dz;
        if (y < 0) {
          resultMoves[dx + 1][dy + 1][dz + 1]=0;
        }
 else         if (endReached(x,y,z)) {
          resultMoves[dx + 1][dy + 1][dz + 1]=2;
        }
 else         if (!BuildCraftAPI.isSoftBlock(world,x,y,z)) {
          resultMoves[dx + 1][dy + 1][dz + 1]=0;
        }
 else {
          resultMoves[dx + 1][dy + 1][dz + 1]=1;
        }
      }
    }
  }
  resultMoves[1][1][1]=0;
  if (resultMoves[0][1][1] == 0) {
    for (int i=0; i <= 2; ++i) {
      for (int j=0; j <= 2; ++j) {
        resultMoves[0][i][j]=0;
      }
    }
  }
  if (resultMoves[2][1][1] == 0) {
    for (int i=0; i <= 2; ++i) {
      for (int j=0; j <= 2; ++j) {
        resultMoves[2][i][j]=0;
      }
    }
  }
  if (resultMoves[1][0][1] == 0) {
    for (int i=0; i <= 2; ++i) {
      for (int j=0; j <= 2; ++j) {
        resultMoves[i][0][j]=0;
      }
    }
  }
  if (resultMoves[1][2][1] == 0) {
    for (int i=0; i <= 2; ++i) {
      for (int j=0; j <= 2; ++j) {
        resultMoves[i][2][j]=0;
      }
    }
  }
  if (resultMoves[1][1][0] == 0) {
    for (int i=0; i <= 2; ++i) {
      for (int j=0; j <= 2; ++j) {
        resultMoves[i][j][0]=0;
      }
    }
  }
  if (resultMoves[1][1][2] == 0) {
    for (int i=0; i <= 2; ++i) {
      for (int j=0; j <= 2; ++j) {
        resultMoves[i][j][2]=0;
      }
    }
  }
  if (resultMoves[0][0][1] == 0) {
    resultMoves[0][0][0]=0;
    resultMoves[0][0][2]=0;
  }
  if (resultMoves[0][2][1] == 0) {
    resultMoves[0][2][0]=0;
    resultMoves[0][2][2]=0;
  }
  if (resultMoves[2][0][1] == 0) {
    resultMoves[2][0][0]=0;
    resultMoves[2][0][2]=0;
  }
  if (resultMoves[2][2][1] == 0) {
    resultMoves[2][2][0]=0;
    resultMoves[2][2][2]=0;
  }
  if (resultMoves[0][1][0] == 0) {
    resultMoves[0][0][0]=0;
    resultMoves[0][2][0]=0;
  }
  if (resultMoves[0][1][2] == 0) {
    resultMoves[0][0][2]=0;
    resultMoves[0][2][2]=0;
  }
  if (resultMoves[2][1][0] == 0) {
    resultMoves[2][0][0]=0;
    resultMoves[2][2][0]=0;
  }
  if (resultMoves[2][1][2] == 0) {
    resultMoves[2][0][2]=0;
    resultMoves[2][2][2]=0;
  }
  if (resultMoves[1][0][0] == 0) {
    resultMoves[0][0][0]=0;
    resultMoves[2][0][0]=0;
  }
  if (resultMoves[1][0][2] == 0) {
    resultMoves[0][0][2]=0;
    resultMoves[2][0][2]=0;
  }
  if (resultMoves[1][2][0] == 0) {
    resultMoves[0][2][0]=0;
    resultMoves[2][2][0]=0;
  }
  if (resultMoves[1][2][2] == 0) {
    resultMoves[0][2][2]=0;
    resultMoves[2][2][2]=0;
  }
  return resultMoves;
}",0.984335154826958
156733,"@Override public int hashCode(){
  int result=7;
  if (stack != null) {
    result=31 * result + stack.getItem().hashCode();
    result=31 * result + stack.getItemDamage();
    result=31 * result + objectHashCode(stack.getTagCompound());
  }
  result=31 * result + 7;
  if (fluidStack != null) {
    result=31 * result + fluidStack.fluidID;
    result=31 * result + fluidStack.amount;
    result=31 * result + objectHashCode(fluidStack.tag);
  }
  return result;
}","@Override public int hashCode(){
  int result=7;
  if (stack != null) {
    result=31 * result + stack.getItem().hashCode();
    result=31 * result + stack.getItemDamage();
    result=31 * result + objectHashCode(stack.getTagCompound());
  }
  result=31 * result + 7;
  if (fluidStack != null) {
    result=31 * result + fluidStack.getFluid().getID();
    result=31 * result + fluidStack.amount;
    result=31 * result + objectHashCode(fluidStack.tag);
  }
  return result;
}",0.977635782747604
156734,"@Override public boolean equals(Object o){
  if (this == o) {
    return true;
  }
  if (o == null || o.getClass() != StackKey.class) {
    return false;
  }
  StackKey k=(StackKey)o;
  if ((stack == null ^ k.stack == null) || (fluidStack == null ^ k.fluidStack == null)) {
    return false;
  }
  if (stack != null) {
    if (stack.getItem() != k.stack.getItem() || stack.getHasSubtypes() && stack.getItemDamage() != k.stack.getItemDamage() || !objectsEqual(stack.getTagCompound(),k.stack.getTagCompound())) {
      return false;
    }
  }
  if (fluidStack != null) {
    if (fluidStack.fluidID != k.fluidStack.fluidID || fluidStack.amount != k.fluidStack.amount || !objectsEqual(fluidStack.tag,k.fluidStack.tag)) {
      return false;
    }
  }
  return true;
}","@Override public boolean equals(Object o){
  if (this == o) {
    return true;
  }
  if (o == null || o.getClass() != StackKey.class) {
    return false;
  }
  StackKey k=(StackKey)o;
  if ((stack == null ^ k.stack == null) || (fluidStack == null ^ k.fluidStack == null)) {
    return false;
  }
  if (stack != null) {
    if (stack.getItem() != k.stack.getItem() || stack.getHasSubtypes() && stack.getItemDamage() != k.stack.getItemDamage() || !objectsEqual(stack.getTagCompound(),k.stack.getTagCompound())) {
      return false;
    }
  }
  if (fluidStack != null) {
    if (fluidStack.getFluid().getID() != k.fluidStack.getFluid().getID() || fluidStack.amount != k.fluidStack.amount || !objectsEqual(fluidStack.tag,k.fluidStack.tag)) {
      return false;
    }
  }
  return true;
}",0.9509043927648578
156735,"@Override public boolean onBlockActivated(World world,int i,int j,int k,EntityPlayer entityplayer,int par6,float par7,float par8,float par9){
  if (super.onBlockActivated(world,i,j,k,entityplayer,par6,par7,par8,par9)) {
    return true;
  }
  ItemStack current=entityplayer.inventory.getCurrentItem();
  if (current != null) {
    TileEntity tile=world.getTileEntity(i,j,k);
    if (tile instanceof TileTank) {
      TileTank tank=(TileTank)tile;
      if (FluidContainerRegistry.isContainer(current)) {
        FluidStack liquid=FluidContainerRegistry.getFluidForFilledItem(current);
        if (liquid != null) {
          int qty=tank.fill(ForgeDirection.UNKNOWN,liquid,true);
          if (qty != 0 && !BuildCraftCore.debugWorldgen && !entityplayer.capabilities.isCreativeMode) {
            if (current.stackSize > 1) {
              if (!entityplayer.inventory.addItemStackToInventory(FluidContainerRegistry.drainFluidContainer(current))) {
                entityplayer.dropPlayerItemWithRandomChoice(FluidContainerRegistry.drainFluidContainer(current),false);
              }
              entityplayer.inventory.setInventorySlotContents(entityplayer.inventory.currentItem,InvUtils.consumeItem(current));
            }
 else {
              entityplayer.inventory.setInventorySlotContents(entityplayer.inventory.currentItem,FluidContainerRegistry.drainFluidContainer(current));
            }
          }
          return true;
        }
 else {
          FluidStack available=tank.getTankInfo(ForgeDirection.UNKNOWN)[0].fluid;
          if (available != null) {
            ItemStack filled=FluidContainerRegistry.fillFluidContainer(available,current);
            liquid=FluidContainerRegistry.getFluidForFilledItem(filled);
            if (liquid != null) {
              if (!BuildCraftCore.debugWorldgen && !entityplayer.capabilities.isCreativeMode) {
                if (current.stackSize > 1) {
                  if (!entityplayer.inventory.addItemStackToInventory(filled)) {
                    return false;
                  }
 else {
                    entityplayer.inventory.setInventorySlotContents(entityplayer.inventory.currentItem,InvUtils.consumeItem(current));
                  }
                }
 else {
                  entityplayer.inventory.setInventorySlotContents(entityplayer.inventory.currentItem,InvUtils.consumeItem(current));
                  entityplayer.inventory.setInventorySlotContents(entityplayer.inventory.currentItem,filled);
                }
              }
              tank.drain(ForgeDirection.UNKNOWN,liquid.amount,true);
              return true;
            }
          }
        }
      }
 else       if (current.getItem() instanceof IFluidContainerItem) {
        if (current.stackSize != 1) {
          return false;
        }
        if (!world.isRemote) {
          IFluidContainerItem container=(IFluidContainerItem)current.getItem();
          FluidStack liquid=container.getFluid(current);
          FluidStack tankLiquid=tank.getTankInfo(ForgeDirection.UNKNOWN)[0].fluid;
          boolean mustDrain=liquid == null || liquid.amount == 0;
          boolean mustFill=tankLiquid == null || tankLiquid.amount == 0;
          if (mustDrain && mustFill) {
          }
 else           if (mustDrain || !entityplayer.isSneaking()) {
            liquid=tank.drain(ForgeDirection.UNKNOWN,1000,false);
            int qtyToFill=container.fill(current,liquid,true);
            tank.drain(ForgeDirection.UNKNOWN,qtyToFill,true);
          }
 else           if (mustFill || entityplayer.isSneaking()) {
            if (liquid != null && liquid.amount > 0) {
              int qty=tank.fill(ForgeDirection.UNKNOWN,liquid,false);
              tank.fill(ForgeDirection.UNKNOWN,container.drain(current,qty,true),true);
            }
          }
        }
        return true;
      }
    }
  }
  return false;
}","@Override public boolean onBlockActivated(World world,int i,int j,int k,EntityPlayer entityplayer,int par6,float par7,float par8,float par9){
  if (super.onBlockActivated(world,i,j,k,entityplayer,par6,par7,par8,par9)) {
    return true;
  }
  ItemStack current=entityplayer.inventory.getCurrentItem();
  if (current != null) {
    TileEntity tile=world.getTileEntity(i,j,k);
    if (tile instanceof TileTank) {
      TileTank tank=(TileTank)tile;
      if (FluidContainerRegistry.isContainer(current)) {
        FluidStack liquid=FluidContainerRegistry.getFluidForFilledItem(current);
        if (liquid != null) {
          int qty=tank.fill(ForgeDirection.UNKNOWN,liquid,true);
          if (qty != 0 && !BuildCraftCore.debugWorldgen && !entityplayer.capabilities.isCreativeMode) {
            if (current.stackSize > 1) {
              if (!entityplayer.inventory.addItemStackToInventory(FluidContainerRegistry.drainFluidContainer(current))) {
                entityplayer.dropPlayerItemWithRandomChoice(FluidContainerRegistry.drainFluidContainer(current),false);
              }
              entityplayer.inventory.setInventorySlotContents(entityplayer.inventory.currentItem,InvUtils.consumeItem(current));
            }
 else {
              entityplayer.inventory.setInventorySlotContents(entityplayer.inventory.currentItem,FluidContainerRegistry.drainFluidContainer(current));
            }
          }
          return true;
        }
 else {
          FluidStack available=tank.getTankInfo(ForgeDirection.UNKNOWN)[0].fluid;
          if (available != null) {
            ItemStack filled=FluidContainerRegistry.fillFluidContainer(available,current);
            liquid=FluidContainerRegistry.getFluidForFilledItem(filled);
            if (liquid != null) {
              if (!BuildCraftCore.debugWorldgen && !entityplayer.capabilities.isCreativeMode) {
                if (current.stackSize > 1) {
                  if (!entityplayer.inventory.addItemStackToInventory(filled)) {
                    return false;
                  }
 else {
                    entityplayer.inventory.setInventorySlotContents(entityplayer.inventory.currentItem,InvUtils.consumeItem(current));
                  }
                }
 else {
                  entityplayer.inventory.setInventorySlotContents(entityplayer.inventory.currentItem,InvUtils.consumeItem(current));
                  entityplayer.inventory.setInventorySlotContents(entityplayer.inventory.currentItem,filled);
                }
              }
              tank.drain(ForgeDirection.UNKNOWN,liquid.amount,true);
              return true;
            }
          }
        }
      }
 else       if (current.getItem() instanceof IFluidContainerItem) {
        if (current.stackSize != 1) {
          return false;
        }
        if (!world.isRemote) {
          IFluidContainerItem container=(IFluidContainerItem)current.getItem();
          FluidStack liquid=container.getFluid(current);
          FluidStack tankLiquid=tank.getTankInfo(ForgeDirection.UNKNOWN)[0].fluid;
          boolean mustDrain=liquid == null || liquid.amount == 0;
          boolean mustFill=tankLiquid == null || tankLiquid.amount == 0;
          if (mustDrain && mustFill) {
          }
 else           if (mustDrain || !entityplayer.isSneaking()) {
            liquid=tank.drain(ForgeDirection.UNKNOWN,1000,false);
            int qtyToFill=container.fill(current,liquid,true);
            tank.drain(ForgeDirection.UNKNOWN,qtyToFill,true);
          }
 else           if (mustFill || entityplayer.isSneaking()) {
            if (liquid != null && liquid.amount > 0) {
              int qty=tank.fill(ForgeDirection.UNKNOWN,liquid,false);
              tank.fill(ForgeDirection.UNKNOWN,container.drain(current,qty,true),true);
            }
          }
        }
        return true;
      }
    }
  }
 else   if (DEBUG_MODE) {
    TileEntity tile=world.getTileEntity(i,j,k);
    if (tile instanceof TileTank) {
      TileTank tank=(TileTank)tile;
      if (tank.getTankInfo(ForgeDirection.UNKNOWN)[0].fluid != null) {
        entityplayer.addChatComponentMessage(new ChatComponentText(""String_Node_Str"" + tank.getTankInfo(ForgeDirection.UNKNOWN)[0].fluid.amount + ""String_Node_Str""));
      }
    }
  }
  return false;
}",0.9473425196850394
156736,"@Override public void readFromNBT(NBTTagCompound nbttagcompound){
  super.readFromNBT(nbttagcompound);
  if (nbttagcompound.hasKey(""String_Node_Str"")) {
    fluidType=FluidStack.loadFluidStackFromNBT(nbttagcompound.getCompoundTag(""String_Node_Str""));
  }
 else {
    fluidType=null;
  }
  for (  ForgeDirection direction : orientations) {
    if (nbttagcompound.hasKey(""String_Node_Str"" + direction.ordinal() + ""String_Node_Str"")) {
      NBTTagCompound compound=nbttagcompound.getCompoundTag(""String_Node_Str"" + direction.ordinal() + ""String_Node_Str"");
      if (compound.hasKey(""String_Node_Str"")) {
        FluidStack stack=FluidStack.loadFluidStackFromNBT(compound);
        if (fluidType == null) {
          fluidType=stack;
        }
        if (stack.isFluidEqual(fluidType)) {
          sections[direction.ordinal()].readFromNBT(nbttagcompound);
        }
      }
 else {
        sections[direction.ordinal()].readFromNBT(nbttagcompound);
      }
    }
    if (direction != ForgeDirection.UNKNOWN) {
      transferState[direction.ordinal()]=TransferState.values()[nbttagcompound.getShort(""String_Node_Str"" + direction.ordinal() + ""String_Node_Str"")];
    }
  }
}","@Override public void readFromNBT(NBTTagCompound nbttagcompound){
  super.readFromNBT(nbttagcompound);
  if (nbttagcompound.hasKey(""String_Node_Str"")) {
    fluidType=FluidStack.loadFluidStackFromNBT(nbttagcompound.getCompoundTag(""String_Node_Str""));
  }
 else {
    fluidType=null;
  }
  for (  ForgeDirection direction : orientations) {
    if (nbttagcompound.hasKey(""String_Node_Str"" + direction.ordinal() + ""String_Node_Str"")) {
      NBTTagCompound compound=nbttagcompound.getCompoundTag(""String_Node_Str"" + direction.ordinal() + ""String_Node_Str"");
      if (compound.hasKey(""String_Node_Str"")) {
        FluidStack stack=FluidStack.loadFluidStackFromNBT(compound);
        if (fluidType == null) {
          fluidType=stack;
        }
        if (stack.isFluidEqual(fluidType)) {
          sections[direction.ordinal()].readFromNBT(compound);
        }
      }
 else {
        sections[direction.ordinal()].readFromNBT(compound);
      }
    }
    if (direction != ForgeDirection.UNKNOWN) {
      transferState[direction.ordinal()]=TransferState.values()[nbttagcompound.getShort(""String_Node_Str"" + direction.ordinal() + ""String_Node_Str"")];
    }
  }
}",0.9948542024013722
156737,"public void initFromPipe(Class<? extends Pipe> pipeClass){
  capacity=LIQUID_IN_PIPE;
  flowRate=fluidCapacities.get(pipeClass);
  travelDelay=MathUtils.clamp(Math.round(16 / (flowRate / 10)),1,12);
  for (  ForgeDirection direction : orientations) {
    sections[direction.ordinal()]=new PipeSection();
  }
}","public void initFromPipe(Class<? extends Pipe> pipeClass){
  capacity=LIQUID_IN_PIPE;
  flowRate=fluidCapacities.get(pipeClass);
  travelDelay=MathUtils.clamp(Math.round(16 / (flowRate / 10)),1,MAX_TRAVEL_DELAY);
}",0.7571701720841301
156738,"@Override public void writeToNBT(NBTTagCompound nbttagcompound){
  super.writeToNBT(nbttagcompound);
  NBTTagCompound fluidTag=new NBTTagCompound();
  if (fluidType != null) {
    fluidType.writeToNBT(fluidTag);
    nbttagcompound.setTag(""String_Node_Str"",fluidTag);
  }
  for (  ForgeDirection direction : orientations) {
    NBTTagCompound subTag=new NBTTagCompound();
    sections[direction.ordinal()].writeToNBT(subTag);
    nbttagcompound.setTag(""String_Node_Str"" + direction.ordinal() + ""String_Node_Str"",subTag);
    if (direction != ForgeDirection.UNKNOWN) {
      nbttagcompound.setShort(""String_Node_Str"" + direction.ordinal() + ""String_Node_Str"",(short)transferState[direction.ordinal()].ordinal());
    }
  }
}","@Override public void writeToNBT(NBTTagCompound nbttagcompound){
  super.writeToNBT(nbttagcompound);
  if (fluidType != null) {
    NBTTagCompound fluidTag=new NBTTagCompound();
    fluidType.writeToNBT(fluidTag);
    nbttagcompound.setTag(""String_Node_Str"",fluidTag);
    for (    ForgeDirection direction : orientations) {
      NBTTagCompound subTag=new NBTTagCompound();
      sections[direction.ordinal()].writeToNBT(subTag);
      nbttagcompound.setTag(""String_Node_Str"" + direction.ordinal() + ""String_Node_Str"",subTag);
      if (direction != ForgeDirection.UNKNOWN) {
        nbttagcompound.setShort(""String_Node_Str"" + direction.ordinal() + ""String_Node_Str"",(short)transferState[direction.ordinal()].ordinal());
      }
    }
  }
}",0.9084699453551912
156739,"public PipeTransportFluids(){
  for (  ForgeDirection direction : directions) {
    transferState[direction.ordinal()]=TransferState.None;
  }
}","public PipeTransportFluids(){
  for (  ForgeDirection direction : directions) {
    sections[direction.ordinal()]=new PipeSection();
    transferState[direction.ordinal()]=TransferState.None;
  }
  sections[6]=new PipeSection();
}",0.7700534759358288
156740,"private byte[][][] movements(Node from){
  byte[][][] resultMoves=new byte[3][3][3];
  for (int dx=-1; dx <= +1; ++dx) {
    for (int dy=-1; dy <= +1; ++dy) {
      for (int dz=-1; dz <= +1; ++dz) {
        int x=from.index.x + dx;
        int y=from.index.y + dy;
        int z=from.index.z + dz;
        if (endReached(x,y,z)) {
          resultMoves[dx + 1][dy + 1][dz + 1]=2;
        }
 else         if (!BuildCraftAPI.isSoftBlock(world,x,y,z)) {
          resultMoves[dx + 1][dy + 1][dz + 1]=0;
        }
 else {
          resultMoves[dx + 1][dy + 1][dz + 1]=1;
        }
      }
    }
  }
  resultMoves[1][1][1]=0;
  if (resultMoves[0][1][1] == 0) {
    for (int i=0; i <= 2; ++i) {
      for (int j=0; j <= 2; ++j) {
        resultMoves[0][i][j]=0;
      }
    }
  }
  if (resultMoves[2][1][1] == 0) {
    for (int i=0; i <= 2; ++i) {
      for (int j=0; j <= 2; ++j) {
        resultMoves[2][i][j]=0;
      }
    }
  }
  if (resultMoves[1][0][1] == 0) {
    for (int i=0; i <= 2; ++i) {
      for (int j=0; j <= 2; ++j) {
        resultMoves[i][0][j]=0;
      }
    }
  }
  if (resultMoves[1][2][1] == 0) {
    for (int i=0; i <= 2; ++i) {
      for (int j=0; j <= 2; ++j) {
        resultMoves[i][2][j]=0;
      }
    }
  }
  if (resultMoves[1][1][0] == 0) {
    for (int i=0; i <= 2; ++i) {
      for (int j=0; j <= 2; ++j) {
        resultMoves[i][j][0]=0;
      }
    }
  }
  if (resultMoves[1][1][2] == 0) {
    for (int i=0; i <= 2; ++i) {
      for (int j=0; j <= 2; ++j) {
        resultMoves[i][j][2]=0;
      }
    }
  }
  if (resultMoves[0][0][1] == 0) {
    resultMoves[0][0][0]=0;
    resultMoves[0][0][2]=0;
  }
  if (resultMoves[0][2][1] == 0) {
    resultMoves[0][2][0]=0;
    resultMoves[0][2][2]=0;
  }
  if (resultMoves[2][0][1] == 0) {
    resultMoves[2][0][0]=0;
    resultMoves[2][0][2]=0;
  }
  if (resultMoves[2][2][1] == 0) {
    resultMoves[2][2][0]=0;
    resultMoves[2][2][2]=0;
  }
  if (resultMoves[0][1][0] == 0) {
    resultMoves[0][0][0]=0;
    resultMoves[0][2][0]=0;
  }
  if (resultMoves[0][1][2] == 0) {
    resultMoves[0][0][2]=0;
    resultMoves[0][2][2]=0;
  }
  if (resultMoves[2][1][0] == 0) {
    resultMoves[2][0][0]=0;
    resultMoves[2][2][0]=0;
  }
  if (resultMoves[2][1][2] == 0) {
    resultMoves[2][0][2]=0;
    resultMoves[2][2][2]=0;
  }
  if (resultMoves[1][0][0] == 0) {
    resultMoves[0][0][0]=0;
    resultMoves[2][0][0]=0;
  }
  if (resultMoves[1][0][2] == 0) {
    resultMoves[0][0][2]=0;
    resultMoves[2][0][2]=0;
  }
  if (resultMoves[1][2][0] == 0) {
    resultMoves[0][2][0]=0;
    resultMoves[2][2][0]=0;
  }
  if (resultMoves[1][2][2] == 0) {
    resultMoves[0][2][2]=0;
    resultMoves[2][2][2]=0;
  }
  return resultMoves;
}","private byte[][][] movements(Node from){
  byte[][][] resultMoves=new byte[3][3][3];
  for (int dx=-1; dx <= +1; ++dx) {
    for (int dy=-1; dy <= +1; ++dy) {
      for (int dz=-1; dz <= +1; ++dz) {
        int x=from.index.x + dx;
        int y=from.index.y + dy;
        int z=from.index.z + dz;
        if (y < 0) {
          resultMoves[dx + 1][dy + 1][dz + 1]=0;
        }
 else         if (endReached(x,y,z)) {
          resultMoves[dx + 1][dy + 1][dz + 1]=2;
        }
 else         if (!BuildCraftAPI.isSoftBlock(world,x,y,z)) {
          resultMoves[dx + 1][dy + 1][dz + 1]=0;
        }
 else {
          resultMoves[dx + 1][dy + 1][dz + 1]=1;
        }
      }
    }
  }
  resultMoves[1][1][1]=0;
  if (resultMoves[0][1][1] == 0) {
    for (int i=0; i <= 2; ++i) {
      for (int j=0; j <= 2; ++j) {
        resultMoves[0][i][j]=0;
      }
    }
  }
  if (resultMoves[2][1][1] == 0) {
    for (int i=0; i <= 2; ++i) {
      for (int j=0; j <= 2; ++j) {
        resultMoves[2][i][j]=0;
      }
    }
  }
  if (resultMoves[1][0][1] == 0) {
    for (int i=0; i <= 2; ++i) {
      for (int j=0; j <= 2; ++j) {
        resultMoves[i][0][j]=0;
      }
    }
  }
  if (resultMoves[1][2][1] == 0) {
    for (int i=0; i <= 2; ++i) {
      for (int j=0; j <= 2; ++j) {
        resultMoves[i][2][j]=0;
      }
    }
  }
  if (resultMoves[1][1][0] == 0) {
    for (int i=0; i <= 2; ++i) {
      for (int j=0; j <= 2; ++j) {
        resultMoves[i][j][0]=0;
      }
    }
  }
  if (resultMoves[1][1][2] == 0) {
    for (int i=0; i <= 2; ++i) {
      for (int j=0; j <= 2; ++j) {
        resultMoves[i][j][2]=0;
      }
    }
  }
  if (resultMoves[0][0][1] == 0) {
    resultMoves[0][0][0]=0;
    resultMoves[0][0][2]=0;
  }
  if (resultMoves[0][2][1] == 0) {
    resultMoves[0][2][0]=0;
    resultMoves[0][2][2]=0;
  }
  if (resultMoves[2][0][1] == 0) {
    resultMoves[2][0][0]=0;
    resultMoves[2][0][2]=0;
  }
  if (resultMoves[2][2][1] == 0) {
    resultMoves[2][2][0]=0;
    resultMoves[2][2][2]=0;
  }
  if (resultMoves[0][1][0] == 0) {
    resultMoves[0][0][0]=0;
    resultMoves[0][2][0]=0;
  }
  if (resultMoves[0][1][2] == 0) {
    resultMoves[0][0][2]=0;
    resultMoves[0][2][2]=0;
  }
  if (resultMoves[2][1][0] == 0) {
    resultMoves[2][0][0]=0;
    resultMoves[2][2][0]=0;
  }
  if (resultMoves[2][1][2] == 0) {
    resultMoves[2][0][2]=0;
    resultMoves[2][2][2]=0;
  }
  if (resultMoves[1][0][0] == 0) {
    resultMoves[0][0][0]=0;
    resultMoves[2][0][0]=0;
  }
  if (resultMoves[1][0][2] == 0) {
    resultMoves[0][0][2]=0;
    resultMoves[2][0][2]=0;
  }
  if (resultMoves[1][2][0] == 0) {
    resultMoves[0][2][0]=0;
    resultMoves[2][2][0]=0;
  }
  if (resultMoves[1][2][2] == 0) {
    resultMoves[0][2][2]=0;
    resultMoves[2][2][2]=0;
  }
  return resultMoves;
}",0.984335154826958
156741,"public void write(NBTTagCompound nbt){
  NBTTagList blocksMapping=new NBTTagList();
  for (  Block b : idToBlock) {
    NBTTagCompound sub=new NBTTagCompound();
    String name=Block.blockRegistry.getNameForObject(b);
    if (name == null || name.length() == 0) {
      BCLog.logger.error(""String_Node_Str"" + b.getUnlocalizedName() + ""String_Node_Str""+ b.getClass().getName()+ ""String_Node_Str"");
    }
 else {
      sub.setString(""String_Node_Str"",name);
    }
    blocksMapping.appendTag(sub);
  }
  nbt.setTag(""String_Node_Str"",blocksMapping);
  NBTTagList itemsMapping=new NBTTagList();
  for (  Item i : idToItem) {
    NBTTagCompound sub=new NBTTagCompound();
    String name=Item.itemRegistry.getNameForObject(i);
    if (name == null || name.length() == 0) {
      BCLog.logger.error(""String_Node_Str"" + i.getUnlocalizedName() + ""String_Node_Str""+ i.getClass().getName()+ ""String_Node_Str"");
    }
 else {
      sub.setString(""String_Node_Str"",name);
    }
    itemsMapping.appendTag(sub);
  }
  nbt.setTag(""String_Node_Str"",itemsMapping);
  NBTTagList entitiesMapping=new NBTTagList();
  for (  Class<? extends Entity> e : idToEntity) {
    NBTTagCompound sub=new NBTTagCompound();
    sub.setString(""String_Node_Str"",e.getCanonicalName());
    entitiesMapping.appendTag(sub);
  }
  nbt.setTag(""String_Node_Str"",entitiesMapping);
}","public void write(NBTTagCompound nbt){
  NBTTagList blocksMapping=new NBTTagList();
  for (  Block b : idToBlock) {
    NBTTagCompound sub=new NBTTagCompound();
    if (b != null) {
      String name=Block.blockRegistry.getNameForObject(b);
      if (name == null || name.length() == 0) {
        BCLog.logger.error(""String_Node_Str"" + b.getUnlocalizedName() + ""String_Node_Str""+ b.getClass().getName()+ ""String_Node_Str"");
      }
 else {
        sub.setString(""String_Node_Str"",name);
      }
    }
    blocksMapping.appendTag(sub);
  }
  nbt.setTag(""String_Node_Str"",blocksMapping);
  NBTTagList itemsMapping=new NBTTagList();
  for (  Item i : idToItem) {
    NBTTagCompound sub=new NBTTagCompound();
    if (i != null) {
      String name=Item.itemRegistry.getNameForObject(i);
      if (name == null || name.length() == 0) {
        BCLog.logger.error(""String_Node_Str"" + i.getUnlocalizedName() + ""String_Node_Str""+ i.getClass().getName()+ ""String_Node_Str"");
      }
 else {
        sub.setString(""String_Node_Str"",name);
      }
    }
    itemsMapping.appendTag(sub);
  }
  nbt.setTag(""String_Node_Str"",itemsMapping);
  NBTTagList entitiesMapping=new NBTTagList();
  for (  Class<? extends Entity> e : idToEntity) {
    NBTTagCompound sub=new NBTTagCompound();
    sub.setString(""String_Node_Str"",e.getCanonicalName());
    entitiesMapping.appendTag(sub);
  }
  nbt.setTag(""String_Node_Str"",entitiesMapping);
}",0.971718636693256
156742,"public void scanAndTranslateStacksToWorld(NBTTagCompound nbt) throws MappingNotFoundException {
  if (isStackLayout(nbt)) {
    stackToWorld(nbt);
  }
  for (  Object keyO : nbt.func_150296_c()) {
    String key=(String)keyO;
    if (nbt.getTag(key) instanceof NBTTagCompound) {
      try {
        scanAndTranslateStacksToWorld(nbt.getCompoundTag(key));
      }
 catch (      MappingNotFoundException e) {
        nbt.removeTag(key);
      }
    }
    if (nbt.getTag(key) instanceof NBTTagList) {
      NBTTagList list=(NBTTagList)nbt.getTag(key);
      if (list.func_150303_d() == Constants.NBT.TAG_COMPOUND) {
        for (int i=list.tagCount() - 1; i >= 0; --i) {
          try {
            scanAndTranslateStacksToWorld(list.getCompoundTagAt(i));
          }
 catch (          MappingNotFoundException e) {
            list.removeTag(i);
          }
        }
      }
    }
  }
}","public void scanAndTranslateStacksToWorld(NBTTagCompound nbt) throws MappingNotFoundException {
  if (isStackLayout(nbt)) {
    stackToWorld(nbt);
  }
  for (  Object keyO : new HashSet(nbt.func_150296_c())) {
    String key=(String)keyO;
    if (nbt.getTag(key) instanceof NBTTagCompound) {
      try {
        scanAndTranslateStacksToWorld(nbt.getCompoundTag(key));
      }
 catch (      MappingNotFoundException e) {
        nbt.removeTag(key);
      }
    }
    if (nbt.getTag(key) instanceof NBTTagList) {
      NBTTagList list=(NBTTagList)nbt.getTag(key);
      if (list.func_150303_d() == Constants.NBT.TAG_COMPOUND) {
        for (int i=list.tagCount() - 1; i >= 0; --i) {
          try {
            scanAndTranslateStacksToWorld(list.getCompoundTagAt(i));
          }
 catch (          MappingNotFoundException e) {
            list.removeTag(i);
          }
        }
      }
    }
  }
}",0.9927089175546832
156743,"public void scanAndTranslateStacksToWorld(NBTTagCompound nbt) throws MappingNotFoundException {
  if (isStackLayout(nbt)) {
    stackToWorld(nbt);
  }
  for (  Object keyO : nbt.func_150296_c()) {
    String key=(String)keyO;
    if (nbt.getTag(key) instanceof NBTTagCompound) {
      try {
        scanAndTranslateStacksToWorld(nbt.getCompoundTag(key));
      }
 catch (      MappingNotFoundException e) {
        nbt.removeTag(key);
      }
    }
    if (nbt.getTag(key) instanceof NBTTagList) {
      NBTTagList list=(NBTTagList)nbt.getTag(key);
      if (list.func_150303_d() == Constants.NBT.TAG_COMPOUND) {
        for (int i=list.tagCount() - 1; i >= 0; --i) {
          try {
            scanAndTranslateStacksToWorld(list.getCompoundTagAt(i));
          }
 catch (          MappingNotFoundException e) {
            list.removeTag(i);
          }
        }
      }
    }
  }
}","public void scanAndTranslateStacksToWorld(NBTTagCompound nbt) throws MappingNotFoundException {
  if (isStackLayout(nbt)) {
    stackToWorld(nbt);
  }
  for (  Object keyO : new HashSet(nbt.func_150296_c())) {
    String key=(String)keyO;
    if (nbt.getTag(key) instanceof NBTTagCompound) {
      try {
        scanAndTranslateStacksToWorld(nbt.getCompoundTag(key));
      }
 catch (      MappingNotFoundException e) {
        nbt.removeTag(key);
      }
    }
    if (nbt.getTag(key) instanceof NBTTagList) {
      NBTTagList list=(NBTTagList)nbt.getTag(key);
      if (list.func_150303_d() == Constants.NBT.TAG_COMPOUND) {
        for (int i=list.tagCount() - 1; i >= 0; --i) {
          try {
            scanAndTranslateStacksToWorld(list.getCompoundTagAt(i));
          }
 catch (          MappingNotFoundException e) {
            list.removeTag(i);
          }
        }
      }
    }
  }
}",0.9927089175546832
156744,"@Override public void getDebugInfo(List<String> info,ForgeDirection side,ItemStack debugger,EntityPlayer player){
  info.add(""String_Node_Str"" + board.getNBTHandler().getID() + ""String_Node_Str""+ getBattery().getEnergyStored()+ ""String_Node_Str""+ getBattery().getMaxEnergyStored()+ ""String_Node_Str"");
  info.add(""String_Node_Str"" + posX + ""String_Node_Str""+ posY+ ""String_Node_Str""+ posZ);
  info.add(""String_Node_Str"");
  AIRobot aiRobot=mainAI;
  while (aiRobot != null) {
    info.add(""String_Node_Str"" + RobotManager.getAIRobotName(aiRobot.getClass()) + ""String_Node_Str""+ aiRobot.getEnergyCost()+ ""String_Node_Str"");
    aiRobot=aiRobot.getDelegateAI();
  }
}","@Override public void getDebugInfo(List<String> info,ForgeDirection side,ItemStack debugger,EntityPlayer player){
  info.add(""String_Node_Str"" + board.getNBTHandler().getID() + ""String_Node_Str""+ getBattery().getEnergyStored()+ ""String_Node_Str""+ getBattery().getMaxEnergyStored()+ ""String_Node_Str"");
  info.add(String.format(""String_Node_Str"",posX,posY,posZ));
  info.add(""String_Node_Str"");
  AIRobot aiRobot=mainAI;
  while (aiRobot != null) {
    info.add(""String_Node_Str"" + RobotManager.getAIRobotName(aiRobot.getClass()) + ""String_Node_Str""+ aiRobot.getEnergyCost()+ ""String_Node_Str"");
    aiRobot=aiRobot.getDelegateAI();
  }
}",0.9247311827956988
156745,"public int extractFluid(IFluidHandler fluidHandler,ForgeDirection side){
  int flowRate=transport.flowRate;
  FluidStack extracted=fluidHandler.drain(side.getOpposite(),liquidToExtract > flowRate ? flowRate : liquidToExtract,false);
  int inserted=0;
  if (extracted != null) {
    inserted=transport.fill(side,extracted,true);
    fluidHandler.drain(side.getOpposite(),inserted,true);
  }
  return inserted;
}","public int extractFluid(IFluidHandler fluidHandler,ForgeDirection side){
  int amount=liquidToExtract > transport.flowRate ? transport.flowRate : liquidToExtract;
  FluidTankInfo tankInfo=transport.getTankInfo(side)[0];
  FluidStack extracted;
  if (tankInfo.fluid != null && tankInfo.fluid.getFluid() != null) {
    extracted=fluidHandler.drain(side.getOpposite(),new FluidStack(tankInfo.fluid.getFluid(),amount),false);
  }
 else {
    extracted=fluidHandler.drain(side.getOpposite(),amount,false);
  }
  int inserted=0;
  if (extracted != null) {
    inserted=transport.fill(side,extracted,true);
    if (inserted > 0) {
      fluidHandler.drain(side.getOpposite(),new FluidStack(extracted.getFluid(),inserted),true);
    }
  }
  return inserted;
}",0.3152454780361757
156746,"@Override public void updateEntity(){
  super.updateEntity();
  int meta=container.getBlockMetadata();
  if (liquidToExtract > 0 && meta < 6) {
    ForgeDirection side=ForgeDirection.getOrientation(meta);
    TileEntity tile=container.getTile(side);
    if (tile instanceof IFluidHandler) {
      liquidToExtract-=extractFluid((IFluidHandler)tile,side);
    }
  }
  if (battery.useEnergy(10,10,false) > 0) {
    if (meta > 5) {
      return;
    }
    TileEntity tile=container.getTile(ForgeDirection.getOrientation(meta));
    if (tile instanceof IFluidHandler) {
      if (liquidToExtract <= FluidContainerRegistry.BUCKET_VOLUME) {
        liquidToExtract+=FluidContainerRegistry.BUCKET_VOLUME;
      }
    }
  }
}","@Override public void updateEntity(){
  super.updateEntity();
  int meta=container.getBlockMetadata();
  if (meta >= 6) {
    battery.setEnergy(0);
    liquidToExtract=0;
    return;
  }
  if (liquidToExtract > 0 && meta < 6) {
    ForgeDirection side=ForgeDirection.getOrientation(meta);
    TileEntity tile=container.getTile(side);
    if (tile instanceof IFluidHandler) {
      extractFluid((IFluidHandler)tile,side);
      liquidToExtract-=transport.flowRate;
    }
  }
  if (battery.useEnergy(10,10,false) > 0) {
    TileEntity tile=container.getTile(ForgeDirection.getOrientation(meta));
    if (tile instanceof IFluidHandler) {
      if (liquidToExtract <= FluidContainerRegistry.BUCKET_VOLUME) {
        liquidToExtract+=FluidContainerRegistry.BUCKET_VOLUME;
      }
    }
  }
}",0.8495339547270306
156747,"@Override public boolean renderWorldBlock(IBlockAccess world,int x,int y,int z,Block block,int modelId,RenderBlocks renderer){
  TileEntity tile=world.getTileEntity(x,y,z);
  renderer.setRenderBounds(0,0,0,0,0,0);
  renderer.renderStandardBlock(Blocks.stone,x,y,z);
  renderer.setRenderBoundsFromBlock(block);
  if (tile instanceof TileGenericPipe) {
    TileGenericPipe pipeTile=(TileGenericPipe)tile;
    renderPipe(renderer,world,pipeTile,x,y,z);
  }
  return true;
}","@Override public boolean renderWorldBlock(IBlockAccess world,int x,int y,int z,Block block,int modelId,RenderBlocks renderer){
  TileEntity tile=world.getTileEntity(x,y,z);
  Tessellator.instance.addVertexWithUV(x,y,z,0,0);
  Tessellator.instance.addVertexWithUV(x,y,z,0,0);
  Tessellator.instance.addVertexWithUV(x,y,z,0,0);
  Tessellator.instance.addVertexWithUV(x,y,z,0,0);
  if (tile instanceof TileGenericPipe) {
    TileGenericPipe pipeTile=(TileGenericPipe)tile;
    renderPipe(renderer,world,pipeTile,x,y,z);
  }
  return true;
}",0.3535253227408143
156748,"public void renderPipe(RenderBlocks renderblocks,IBlockAccess iblockaccess,TileGenericPipe tile,int x,int y,int z){
  PipeRenderState state=tile.renderState;
  IIconProvider icons=tile.getPipeIcons();
  FakeBlock fakeBlock=FakeBlock.INSTANCE;
  int glassColor=tile.getPipeColor();
  if (icons == null) {
    return;
  }
  if (renderPass == 0 || glassColor >= 0) {
    int connectivity=state.pipeConnectionMatrix.getMask();
    float[] dim=new float[6];
    if (renderPass == 1) {
      fakeBlock.setColor(ColorUtils.getRGBColor(glassColor));
    }
    if (connectivity != 0x3f) {
      resetToCenterDimensions(dim);
      if (renderPass == 0) {
        fakeBlock.getTextureState().set(icons.getIcon(state.textureMatrix.getTextureIndex(ForgeDirection.UNKNOWN)));
      }
 else {
        fakeBlock.getTextureState().set(PipeIconProvider.TYPE.PipeStainedOverlay.getIcon());
      }
      fixForRenderPass(dim);
      renderTwoWayBlock(renderblocks,fakeBlock,x,y,z,dim,connectivity ^ 0x3f);
    }
    for (int dir=0; dir < 6; dir++) {
      int mask=1 << dir;
      if ((connectivity & mask) == 0) {
        continue;
      }
      resetToCenterDimensions(dim);
      dim[dir / 2]=dir % 2 == 0 ? 0 : CoreConstants.PIPE_MAX_POS;
      dim[dir / 2 + 3]=dir % 2 == 0 ? CoreConstants.PIPE_MIN_POS : 1;
      int renderMask=(3 << (dir / 2 * 2)) ^ 0x3f;
      fixForRenderPass(dim);
      if (renderPass == 0) {
        fakeBlock.getTextureState().set(icons.getIcon(state.textureMatrix.getTextureIndex(ForgeDirection.VALID_DIRECTIONS[dir])));
      }
 else {
        fakeBlock.getTextureState().set(PipeIconProvider.TYPE.PipeStainedOverlay.getIcon());
      }
      renderTwoWayBlock(renderblocks,fakeBlock,x,y,z,dim,renderMask);
    }
    fakeBlock.setColor(0xFFFFFF);
  }
 else   if (renderPass == 1) {
    IIcon i=PipeIconProvider.TYPE.Transparent.getIcon();
    Tessellator.instance.addVertexWithUV(x,y,z,0,0);
    Tessellator.instance.addVertexWithUV(x,y,z,0,0);
    Tessellator.instance.addVertexWithUV(x,y,z,0,0);
    Tessellator.instance.addVertexWithUV(x,y,z,0,0);
  }
  renderblocks.setRenderBounds(0.0F,0.0F,0.0F,1.0F,1.0F,1.0F);
  pipeFacadeRenderer(renderblocks,fakeBlock,tile,state,x,y,z);
  for (  ForgeDirection dir : ForgeDirection.VALID_DIRECTIONS) {
    if (tile.hasPipePluggable(dir)) {
      PipePluggable p=tile.getPipePluggable(dir);
      IPipePluggableRenderer r=p.getRenderer();
      if (r != null) {
        r.renderPluggable(renderblocks,tile.getPipe(),dir,p,fakeBlock,renderPass,x,y,z);
      }
    }
  }
}","public void renderPipe(RenderBlocks renderblocks,IBlockAccess iblockaccess,TileGenericPipe tile,int x,int y,int z){
  PipeRenderState state=tile.renderState;
  IIconProvider icons=tile.getPipeIcons();
  FakeBlock fakeBlock=FakeBlock.INSTANCE;
  int glassColor=tile.getPipeColor();
  if (icons == null) {
    return;
  }
  if (renderPass == 0 || glassColor >= 0) {
    int connectivity=state.pipeConnectionMatrix.getMask();
    float[] dim=new float[6];
    if (renderPass == 1) {
      fakeBlock.setColor(ColorUtils.getRGBColor(glassColor));
    }
    if (connectivity != 0x3f) {
      resetToCenterDimensions(dim);
      if (renderPass == 0) {
        fakeBlock.getTextureState().set(icons.getIcon(state.textureMatrix.getTextureIndex(ForgeDirection.UNKNOWN)));
      }
 else {
        fakeBlock.getTextureState().set(PipeIconProvider.TYPE.PipeStainedOverlay.getIcon());
      }
      fixForRenderPass(dim);
      renderTwoWayBlock(renderblocks,fakeBlock,x,y,z,dim,connectivity ^ 0x3f);
    }
    for (int dir=0; dir < 6; dir++) {
      int mask=1 << dir;
      if ((connectivity & mask) == 0) {
        continue;
      }
      resetToCenterDimensions(dim);
      dim[dir / 2]=dir % 2 == 0 ? 0 : CoreConstants.PIPE_MAX_POS;
      dim[dir / 2 + 3]=dir % 2 == 0 ? CoreConstants.PIPE_MIN_POS : 1;
      int renderMask=(3 << (dir / 2 * 2)) ^ 0x3f;
      fixForRenderPass(dim);
      if (renderPass == 0) {
        fakeBlock.getTextureState().set(icons.getIcon(state.textureMatrix.getTextureIndex(ForgeDirection.VALID_DIRECTIONS[dir])));
      }
 else {
        fakeBlock.getTextureState().set(PipeIconProvider.TYPE.PipeStainedOverlay.getIcon());
      }
      renderTwoWayBlock(renderblocks,fakeBlock,x,y,z,dim,renderMask);
    }
    fakeBlock.setColor(0xFFFFFF);
  }
  renderblocks.setRenderBounds(0.0F,0.0F,0.0F,1.0F,1.0F,1.0F);
  pipeFacadeRenderer(renderblocks,fakeBlock,tile,state,x,y,z);
  for (  ForgeDirection dir : ForgeDirection.VALID_DIRECTIONS) {
    if (tile.hasPipePluggable(dir)) {
      PipePluggable p=tile.getPipePluggable(dir);
      IPipePluggableRenderer r=p.getRenderer();
      if (r != null) {
        r.renderPluggable(renderblocks,tile.getPipe(),dir,p,fakeBlock,renderPass,x,y,z);
      }
    }
  }
}",0.9359730412805392
156749,"private void render(float progress,ForgeDirection orientation,ResourceLocation baseTexture,ResourceLocation chamberTexture,ResourceLocation trunkTexture,double x,double y,double z){
  if (BuildCraftCore.render == RenderMode.NoDynamic) {
    return;
  }
  GL11.glPushMatrix();
  GL11.glPushAttrib(GL11.GL_ENABLE_BIT);
  GL11.glEnable(GL11.GL_LIGHTING);
  GL11.glDisable(GL11.GL_BLEND);
  GL11.glEnable(GL11.GL_CULL_FACE);
  GL11.glColor3f(1,1,1);
  GL11.glTranslatef((float)x,(float)y,(float)z);
  float step;
  if (progress > 0.5) {
    step=7.99F - (progress - 0.5F) * 2F * 7.99F;
  }
 else {
    step=progress * 2F * 7.99F;
  }
  float translatefact=step / 16;
  float[] angle={0,0,0};
  float[] translate={orientation.offsetX,orientation.offsetY,orientation.offsetZ};
switch (orientation) {
case EAST:
case WEST:
case DOWN:
    angle[2]=angleMap[orientation.ordinal()];
  break;
case SOUTH:
case NORTH:
default :
angle[0]=angleMap[orientation.ordinal()];
break;
}
box.rotateAngleX=angle[0];
box.rotateAngleY=angle[1];
box.rotateAngleZ=angle[2];
trunk.rotateAngleX=angle[0];
trunk.rotateAngleY=angle[1];
trunk.rotateAngleZ=angle[2];
movingBox.rotateAngleX=angle[0];
movingBox.rotateAngleY=angle[1];
movingBox.rotateAngleZ=angle[2];
chamber.rotateAngleX=angle[0];
chamber.rotateAngleY=angle[1];
chamber.rotateAngleZ=angle[2];
float factor=(float)(1.0 / 16.0);
bindTexture(baseTexture);
box.render(factor);
GL11.glTranslatef(translate[0] * translatefact,translate[1] * translatefact,translate[2] * translatefact);
movingBox.render(factor);
GL11.glTranslatef(-translate[0] * translatefact,-translate[1] * translatefact,-translate[2] * translatefact);
bindTexture(chamberTexture);
float chamberf=2F / 16F;
int chamberc=((int)step + 2) / 2;
for (int i=0; i <= step + 2; i+=2) {
chamber.render(factor);
GL11.glTranslatef(translate[0] * chamberf,translate[1] * chamberf,translate[2] * chamberf);
}
GL11.glTranslatef(-translate[0] * chamberf * chamberc,-translate[1] * chamberf * chamberc,-translate[2] * chamberf * chamberc);
bindTexture(trunkTexture);
trunk.render(factor);
GL11.glPopAttrib();
GL11.glPopMatrix();
}","private void render(float progress,ForgeDirection orientation,ResourceLocation baseTexture,ResourceLocation chamberTexture,ResourceLocation trunkTexture,double x,double y,double z){
  if (BuildCraftCore.render == RenderMode.NoDynamic) {
    return;
  }
  GL11.glPushMatrix();
  GL11.glPushAttrib(GL11.GL_ENABLE_BIT);
  GL11.glEnable(GL11.GL_LIGHTING);
  GL11.glDisable(GL11.GL_BLEND);
  GL11.glEnable(GL11.GL_CULL_FACE);
  GL11.glColor3f(1,1,1);
  GL11.glTranslatef((float)x,(float)y,(float)z);
  float step;
  if (progress > 0.5) {
    step=7.99F - (progress - 0.5F) * 2F * 7.99F;
  }
 else {
    step=progress * 2F * 7.99F;
  }
  float translatefact=step / 16;
  float[] angle={0,0,0};
  float[] translate={orientation.offsetX,orientation.offsetY,orientation.offsetZ};
switch (orientation) {
case EAST:
case WEST:
case DOWN:
    angle[2]=angleMap[orientation.ordinal()];
  break;
case SOUTH:
case NORTH:
default :
angle[0]=angleMap[orientation.ordinal()];
break;
}
box.rotateAngleX=angle[0];
box.rotateAngleY=angle[1];
box.rotateAngleZ=angle[2];
trunk.rotateAngleX=angle[0];
trunk.rotateAngleY=angle[1];
trunk.rotateAngleZ=angle[2];
movingBox.rotateAngleX=angle[0];
movingBox.rotateAngleY=angle[1];
movingBox.rotateAngleZ=angle[2];
chamber.rotateAngleX=angle[0];
chamber.rotateAngleY=angle[1];
chamber.rotateAngleZ=angle[2];
float factor=(float)(1.0 / 16.0);
bindTexture(baseTexture);
box.render(factor);
GL11.glTranslatef(translate[0] * translatefact,translate[1] * translatefact,translate[2] * translatefact);
movingBox.render(factor);
GL11.glTranslatef(-translate[0] * translatefact,-translate[1] * translatefact,-translate[2] * translatefact);
bindTexture(chamberTexture);
float chamberf=2F / 16F;
int chamberc=((int)step + 4) / 2;
for (int i=0; i <= step + 2; i+=2) {
chamber.render(factor);
GL11.glTranslatef(translate[0] * chamberf,translate[1] * chamberf,translate[2] * chamberf);
}
GL11.glTranslatef(-translate[0] * chamberf * chamberc,-translate[1] * chamberf * chamberc,-translate[2] * chamberf * chamberc);
bindTexture(trunkTexture);
trunk.render(factor);
GL11.glPopAttrib();
GL11.glPopMatrix();
}",0.9995262908574136
156750,"public static ResourceId load(NBTTagCompound nbt){
  try {
    Class cls=null;
    if (nbt.hasKey(""String_Node_Str"")) {
      cls=RobotManager.getResourceIdByLegacyClassName(nbt.getString(""String_Node_Str""));
    }
 else {
      cls=RobotManager.getResourceIdByName(""String_Node_Str"");
    }
    ResourceId id=(ResourceId)cls.newInstance();
    id.readFromNBT(nbt);
    return id;
  }
 catch (  Throwable e) {
    e.printStackTrace();
  }
  return null;
}","public static ResourceId load(NBTTagCompound nbt){
  try {
    Class cls=null;
    if (nbt.hasKey(""String_Node_Str"")) {
      cls=RobotManager.getResourceIdByLegacyClassName(nbt.getString(""String_Node_Str""));
    }
 else {
      cls=RobotManager.getResourceIdByName(nbt.getString(""String_Node_Str""));
    }
    ResourceId id=(ResourceId)cls.newInstance();
    id.readFromNBT(nbt);
    return id;
  }
 catch (  Throwable e) {
    e.printStackTrace();
  }
  return null;
}",0.947027027027027
156751,"public int extractFluid(IFluidHandler fluidHandler,ForgeDirection side){
  int flowRate=transport.flowRate;
  FluidStack extracted=fluidHandler.drain(side.getOpposite(),liquidToExtract > flowRate ? flowRate : liquidToExtract,false);
  int inserted=0;
  if (extracted != null) {
    inserted=transport.fill(side,extracted,true);
    fluidHandler.drain(side.getOpposite(),inserted,true);
  }
  return inserted;
}","public int extractFluid(IFluidHandler fluidHandler,ForgeDirection side){
  int amount=liquidToExtract > transport.flowRate ? transport.flowRate : liquidToExtract;
  FluidTankInfo tankInfo=transport.getTankInfo(side)[0];
  FluidStack extracted;
  if (tankInfo.fluid != null && tankInfo.fluid.getFluid() != null) {
    extracted=fluidHandler.drain(side.getOpposite(),new FluidStack(tankInfo.fluid.getFluid(),amount),false);
  }
 else {
    extracted=fluidHandler.drain(side.getOpposite(),amount,false);
  }
  int inserted=0;
  if (extracted != null) {
    inserted=transport.fill(side,extracted,true);
    if (inserted > 0) {
      fluidHandler.drain(side.getOpposite(),new FluidStack(extracted.getFluid(),inserted),true);
    }
  }
  return inserted;
}",0.3152454780361757
156752,"@Override public void updateEntity(){
  super.updateEntity();
  int meta=container.getBlockMetadata();
  if (liquidToExtract > 0 && meta < 6) {
    ForgeDirection side=ForgeDirection.getOrientation(meta);
    TileEntity tile=container.getTile(side);
    if (tile instanceof IFluidHandler) {
      liquidToExtract-=extractFluid((IFluidHandler)tile,side);
    }
  }
  if (battery.useEnergy(10,10,false) > 0) {
    if (meta > 5) {
      return;
    }
    TileEntity tile=container.getTile(ForgeDirection.getOrientation(meta));
    if (tile instanceof IFluidHandler) {
      if (liquidToExtract <= FluidContainerRegistry.BUCKET_VOLUME) {
        liquidToExtract+=FluidContainerRegistry.BUCKET_VOLUME;
      }
    }
  }
}","@Override public void updateEntity(){
  super.updateEntity();
  int meta=container.getBlockMetadata();
  if (meta >= 6) {
    battery.setEnergy(0);
    liquidToExtract=0;
    return;
  }
  if (liquidToExtract > 0 && meta < 6) {
    ForgeDirection side=ForgeDirection.getOrientation(meta);
    TileEntity tile=container.getTile(side);
    if (tile instanceof IFluidHandler) {
      extractFluid((IFluidHandler)tile,side);
      liquidToExtract-=transport.flowRate;
    }
  }
  if (battery.useEnergy(10,10,false) > 0) {
    TileEntity tile=container.getTile(ForgeDirection.getOrientation(meta));
    if (tile instanceof IFluidHandler) {
      if (liquidToExtract <= FluidContainerRegistry.BUCKET_VOLUME) {
        liquidToExtract+=FluidContainerRegistry.BUCKET_VOLUME;
      }
    }
  }
}",0.8495339547270306
156753,"@Override public boolean renderWorldBlock(IBlockAccess world,int x,int y,int z,Block block,int modelId,RenderBlocks renderer){
  TileEntity tile=world.getTileEntity(x,y,z);
  if (tile instanceof TileGenericPipe) {
    TileGenericPipe pipeTile=(TileGenericPipe)tile;
    renderPipe(renderer,world,pipeTile,x,y,z);
  }
  return true;
}","@Override public boolean renderWorldBlock(IBlockAccess world,int x,int y,int z,Block block,int modelId,RenderBlocks renderer){
  TileEntity tile=world.getTileEntity(x,y,z);
  Tessellator.instance.addVertexWithUV(x,y,z,0,0);
  Tessellator.instance.addVertexWithUV(x,y,z,0,0);
  Tessellator.instance.addVertexWithUV(x,y,z,0,0);
  Tessellator.instance.addVertexWithUV(x,y,z,0,0);
  if (tile instanceof TileGenericPipe) {
    TileGenericPipe pipeTile=(TileGenericPipe)tile;
    renderPipe(renderer,world,pipeTile,x,y,z);
  }
  return true;
}",0.7655172413793103
156754,"public void renderPipe(RenderBlocks renderblocks,IBlockAccess iblockaccess,TileGenericPipe tile,int x,int y,int z){
  PipeRenderState state=tile.renderState;
  IIconProvider icons=tile.getPipeIcons();
  FakeBlock fakeBlock=FakeBlock.INSTANCE;
  int glassColor=tile.getPipeColor();
  if (icons == null) {
    return;
  }
  if (renderPass == 0 || glassColor >= 0) {
    int connectivity=state.pipeConnectionMatrix.getMask();
    float[] dim=new float[6];
    if (renderPass == 1) {
      fakeBlock.setColor(ColorUtils.getRGBColor(glassColor));
    }
    if (connectivity != 0x3f) {
      resetToCenterDimensions(dim);
      if (renderPass == 0) {
        fakeBlock.getTextureState().set(icons.getIcon(state.textureMatrix.getTextureIndex(ForgeDirection.UNKNOWN)));
      }
 else {
        fakeBlock.getTextureState().set(PipeIconProvider.TYPE.PipeStainedOverlay.getIcon());
      }
      fixForRenderPass(dim);
      renderTwoWayBlock(renderblocks,fakeBlock,x,y,z,dim,connectivity ^ 0x3f);
    }
    for (int dir=0; dir < 6; dir++) {
      int mask=1 << dir;
      if ((connectivity & mask) == 0) {
        continue;
      }
      resetToCenterDimensions(dim);
      dim[dir / 2]=dir % 2 == 0 ? 0 : CoreConstants.PIPE_MAX_POS;
      dim[dir / 2 + 3]=dir % 2 == 0 ? CoreConstants.PIPE_MIN_POS : 1;
      int renderMask=(3 << (dir & 0x6)) ^ 0x3f;
      fixForRenderPass(dim);
      if (renderPass == 0) {
        fakeBlock.getTextureState().set(icons.getIcon(state.textureMatrix.getTextureIndex(ForgeDirection.VALID_DIRECTIONS[dir])));
      }
 else {
        fakeBlock.getTextureState().set(PipeIconProvider.TYPE.PipeStainedOverlay.getIcon());
      }
      renderTwoWayBlock(renderblocks,fakeBlock,x,y,z,dim,renderMask);
      if (Minecraft.getMinecraft().gameSettings.fancyGraphics) {
        ForgeDirection side=ForgeDirection.getOrientation(dir);
        int px=x + side.offsetX;
        int py=y + side.offsetY;
        int pz=z + side.offsetZ;
        Block block=iblockaccess.getBlock(px,py,pz);
        if (!(block instanceof BlockGenericPipe) && !block.isOpaqueCube()) {
          double[] blockBB;
          if (block instanceof BlockChest) {
            blockBB=new double[]{0,0.0625F,0.0625F,0.875F,0.9375F,0.9375F};
          }
 else {
            block.setBlockBoundsBasedOnState(iblockaccess,px,py,pz);
            blockBB=new double[]{block.getBlockBoundsMinY(),block.getBlockBoundsMinX(),block.getBlockBoundsMinZ(),block.getBlockBoundsMaxY(),block.getBlockBoundsMaxX(),block.getBlockBoundsMaxZ()};
          }
          if ((dir % 2 == 1 && blockBB[dir / 2] != 0) || (dir % 2 == 0 && blockBB[dir / 2 + 3] != 1)) {
            resetToCenterDimensions(dim);
            if (dir % 2 == 1) {
              dim[dir / 2]=0;
              dim[dir / 2 + 3]=(float)blockBB[dir / 2];
            }
 else {
              dim[dir / 2]=(float)blockBB[dir / 2 + 3];
              dim[dir / 2 + 3]=1;
            }
            fixForRenderPass(dim);
            renderTwoWayBlock(renderblocks,fakeBlock,x + side.offsetX,y + side.offsetY,z + side.offsetZ,dim,renderMask);
          }
        }
      }
    }
    fakeBlock.setColor(0xFFFFFF);
  }
 else   if (renderPass == 1) {
    IIcon i=PipeIconProvider.TYPE.Transparent.getIcon();
    Tessellator.instance.addVertexWithUV(x,y,z,0,0);
    Tessellator.instance.addVertexWithUV(x,y,z,0,0);
    Tessellator.instance.addVertexWithUV(x,y,z,0,0);
    Tessellator.instance.addVertexWithUV(x,y,z,0,0);
  }
  renderblocks.setRenderBounds(0.0F,0.0F,0.0F,1.0F,1.0F,1.0F);
  pipeFacadeRenderer(renderblocks,fakeBlock,tile,state,x,y,z);
  for (  ForgeDirection dir : ForgeDirection.VALID_DIRECTIONS) {
    if (tile.hasPipePluggable(dir)) {
      PipePluggable p=tile.getPipePluggable(dir);
      IPipePluggableRenderer r=p.getRenderer();
      if (r != null) {
        r.renderPluggable(renderblocks,tile.getPipe(),dir,p,fakeBlock,renderPass,x,y,z);
      }
    }
  }
}","public void renderPipe(RenderBlocks renderblocks,IBlockAccess iblockaccess,TileGenericPipe tile,int x,int y,int z){
  PipeRenderState state=tile.renderState;
  IIconProvider icons=tile.getPipeIcons();
  FakeBlock fakeBlock=FakeBlock.INSTANCE;
  int glassColor=tile.getPipeColor();
  if (icons == null) {
    return;
  }
  if (renderPass == 0 || glassColor >= 0) {
    int connectivity=state.pipeConnectionMatrix.getMask();
    float[] dim=new float[6];
    if (renderPass == 1) {
      fakeBlock.setColor(ColorUtils.getRGBColor(glassColor));
    }
    if (connectivity != 0x3f) {
      resetToCenterDimensions(dim);
      if (renderPass == 0) {
        fakeBlock.getTextureState().set(icons.getIcon(state.textureMatrix.getTextureIndex(ForgeDirection.UNKNOWN)));
      }
 else {
        fakeBlock.getTextureState().set(PipeIconProvider.TYPE.PipeStainedOverlay.getIcon());
      }
      fixForRenderPass(dim);
      renderTwoWayBlock(renderblocks,fakeBlock,x,y,z,dim,connectivity ^ 0x3f);
    }
    for (int dir=0; dir < 6; dir++) {
      int mask=1 << dir;
      if ((connectivity & mask) == 0) {
        continue;
      }
      resetToCenterDimensions(dim);
      dim[dir / 2]=dir % 2 == 0 ? 0 : CoreConstants.PIPE_MAX_POS;
      dim[dir / 2 + 3]=dir % 2 == 0 ? CoreConstants.PIPE_MIN_POS : 1;
      int renderMask=(3 << (dir & 0x6)) ^ 0x3f;
      fixForRenderPass(dim);
      if (renderPass == 0) {
        fakeBlock.getTextureState().set(icons.getIcon(state.textureMatrix.getTextureIndex(ForgeDirection.VALID_DIRECTIONS[dir])));
      }
 else {
        fakeBlock.getTextureState().set(PipeIconProvider.TYPE.PipeStainedOverlay.getIcon());
      }
      renderTwoWayBlock(renderblocks,fakeBlock,x,y,z,dim,renderMask);
      if (Minecraft.getMinecraft().gameSettings.fancyGraphics) {
        ForgeDirection side=ForgeDirection.getOrientation(dir);
        int px=x + side.offsetX;
        int py=y + side.offsetY;
        int pz=z + side.offsetZ;
        Block block=iblockaccess.getBlock(px,py,pz);
        if (!(block instanceof BlockGenericPipe) && !block.isOpaqueCube()) {
          double[] blockBB;
          if (block instanceof BlockChest) {
            blockBB=new double[]{0,0.0625F,0.0625F,0.875F,0.9375F,0.9375F};
          }
 else {
            block.setBlockBoundsBasedOnState(iblockaccess,px,py,pz);
            blockBB=new double[]{block.getBlockBoundsMinY(),block.getBlockBoundsMinX(),block.getBlockBoundsMinZ(),block.getBlockBoundsMaxY(),block.getBlockBoundsMaxX(),block.getBlockBoundsMaxZ()};
          }
          if ((dir % 2 == 1 && blockBB[dir / 2] != 0) || (dir % 2 == 0 && blockBB[dir / 2 + 3] != 1)) {
            resetToCenterDimensions(dim);
            if (dir % 2 == 1) {
              dim[dir / 2]=0;
              dim[dir / 2 + 3]=(float)blockBB[dir / 2];
            }
 else {
              dim[dir / 2]=(float)blockBB[dir / 2 + 3];
              dim[dir / 2 + 3]=1;
            }
            fixForRenderPass(dim);
            renderTwoWayBlock(renderblocks,fakeBlock,x + side.offsetX,y + side.offsetY,z + side.offsetZ,dim,renderMask);
          }
        }
      }
    }
    fakeBlock.setColor(0xFFFFFF);
  }
  renderblocks.setRenderBounds(0.0F,0.0F,0.0F,1.0F,1.0F,1.0F);
  pipeFacadeRenderer(renderblocks,fakeBlock,tile,state,x,y,z);
  for (  ForgeDirection dir : ForgeDirection.VALID_DIRECTIONS) {
    if (tile.hasPipePluggable(dir)) {
      PipePluggable p=tile.getPipePluggable(dir);
      IPipePluggableRenderer r=p.getRenderer();
      if (r != null) {
        r.renderPluggable(renderblocks,tile.getPipe(),dir,p,fakeBlock,renderPass,x,y,z);
      }
    }
  }
}",0.9594990674127364
156755,"public void addFacade(ItemStack itemStack){
  if (itemStack.stackSize == 0) {
    itemStack.stackSize=1;
  }
  Block block=Block.getBlockFromItem(itemStack.getItem());
  if (block == null) {
    return;
  }
  if (!block.getMaterial().blocksMovement()) {
    return;
  }
  String recipeId=""String_Node_Str"" + Block.blockRegistry.getNameForObject(block) + ""String_Node_Str""+ itemStack.getItemDamage()+ ""String_Node_Str"";
  ItemStack facade=getFacadeForBlock(block,itemStack.getItemDamage());
  if (!allFacadeIDs.contains(recipeId)) {
    allFacadeIDs.add(recipeId);
    allFacades.add(facade);
    ItemStack facade6=facade.copy();
    facade6.stackSize=6;
    FacadeState state=getFacadeStates(facade6)[0];
    ItemStack facadeHollow=getFacade(new FacadeState(state.block,state.metadata,state.wire,true));
    allHollowFacades.add(facadeHollow);
    ItemStack facade6Hollow=facadeHollow.copy();
    facade6Hollow.stackSize=6;
    BuildcraftRecipeRegistry.assemblyTable.addRecipe(recipeId,8000,facade6,new ItemStack(BuildCraftTransport.pipeStructureCobblestone,3),itemStack);
    BuildcraftRecipeRegistry.assemblyTable.addRecipe(recipeId + ""String_Node_Str"",8000,facade6Hollow,new ItemStack(BuildCraftTransport.pipeStructureCobblestone,3),itemStack);
    BuildcraftRecipeRegistry.assemblyTable.addRecipe(recipeId + ""String_Node_Str"",160,facadeHollow,facade);
    BuildcraftRecipeRegistry.assemblyTable.addRecipe(recipeId + ""String_Node_Str"",160,facade,facadeHollow);
  }
}","public void addFacade(ItemStack itemStack){
  if (itemStack.stackSize == 0) {
    itemStack.stackSize=1;
  }
  Block block=Block.getBlockFromItem(itemStack.getItem());
  if (block == null) {
    return;
  }
  if (!block.getMaterial().blocksMovement()) {
    return;
  }
  String recipeId=""String_Node_Str"" + Block.blockRegistry.getNameForObject(block) + ""String_Node_Str""+ itemStack.getItemDamage()+ ""String_Node_Str"";
  ItemStack facade=getFacadeForBlock(block,itemStack.getItemDamage());
  if (!allFacadeIDs.contains(recipeId)) {
    allFacadeIDs.add(recipeId);
    allFacades.add(facade);
    ItemStack facade6=facade.copy();
    facade6.stackSize=6;
    FacadeState state=getFacadeStates(facade6)[0];
    ItemStack facadeHollow=getFacade(new FacadeState(state.block,state.metadata,state.wire,true));
    allHollowFacades.add(facadeHollow);
    ItemStack facade6Hollow=facadeHollow.copy();
    facade6Hollow.stackSize=6;
    if (Loader.isModLoaded(""String_Node_Str"")) {
      BuildcraftRecipeRegistry.assemblyTable.addRecipe(recipeId,8000,facade6,new ItemStack(BuildCraftTransport.pipeStructureCobblestone,3),itemStack);
      BuildcraftRecipeRegistry.assemblyTable.addRecipe(recipeId + ""String_Node_Str"",8000,facade6Hollow,new ItemStack(BuildCraftTransport.pipeStructureCobblestone,3),itemStack);
      BuildcraftRecipeRegistry.assemblyTable.addRecipe(recipeId + ""String_Node_Str"",160,facadeHollow,facade);
      BuildcraftRecipeRegistry.assemblyTable.addRecipe(recipeId + ""String_Node_Str"",160,facade,facadeHollow);
    }
 else {
      GameRegistry.addShapedRecipe(facade6,""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",'t',itemStack,'s',BuildCraftTransport.pipeStructureCobblestone);
      GameRegistry.addShapedRecipe(facade6Hollow,""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",'t',itemStack,'s',BuildCraftTransport.pipeStructureCobblestone);
    }
  }
}",0.8783258594917788
156756,"public MapWorld(World world,File location){
  this.world=world;
  regionMap=new TLongObjectHashMap<MapRegion>();
  queuedChunks=new PriorityQueue<QueuedXZ>(new Comparator<QueuedXZ>(){
    @Override public int compare(    QueuedXZ c1,    QueuedXZ c2){
      return c1.p - c2.p;
    }
  }
);
  String saveFolder=world.provider.getSaveFolder();
  if (saveFolder == null) {
    saveFolder=""String_Node_Str"";
  }
  this.location=new File(location,saveFolder);
  try {
    this.location.mkdirs();
  }
 catch (  Exception e) {
    e.printStackTrace();
  }
}","public MapWorld(World world,File location){
  this.world=world;
  regionMap=new TLongObjectHashMap<MapRegion>();
  queuedChunks=new PriorityQueue<QueuedXZ>(11,new Comparator<QueuedXZ>(){
    @Override public int compare(    QueuedXZ c1,    QueuedXZ c2){
      return c1.p - c2.p;
    }
  }
);
  String saveFolder=world.provider.getSaveFolder();
  if (saveFolder == null) {
    saveFolder=""String_Node_Str"";
  }
  this.location=new File(location,saveFolder);
  try {
    this.location.mkdirs();
  }
 catch (  Exception e) {
    e.printStackTrace();
  }
}",0.99728014505893
156757,"@Override public void delegateAIEnded(AIRobot ai){
  if (ai instanceof AIRobotSearchRandomBlock) {
    if (!ai.success()) {
      startDelegateAI(new AIRobotGotoSleep(robot));
    }
 else {
      releaseBlockFound();
      AIRobotSearchRandomBlock searchAI=(AIRobotSearchRandomBlock)ai;
      if (searchAI.takeResource()) {
        blockFound=searchAI.blockFound;
        searchAI.path.removeLast();
        startDelegateAI(new AIRobotGotoBlock(robot,searchAI.path));
      }
 else {
        startDelegateAI(new AIRobotGotoSleep(robot));
      }
    }
  }
 else   if (ai instanceof AIRobotGotoBlock) {
    startDelegateAI(new AIRobotUseToolOnBlock(robot,blockFound));
  }
 else   if (ai instanceof AIRobotUseToolOnBlock) {
    releaseBlockFound();
  }
 else   if (ai instanceof AIRobotFetchAndEquipItemStack) {
    if (robot.getHeldItem() == null) {
      startDelegateAI(new AIRobotGotoSleep(robot));
    }
  }
}","@Override public void delegateAIEnded(AIRobot ai){
  if (ai instanceof AIRobotSearchRandomBlock) {
    if (!ai.success()) {
      startDelegateAI(new AIRobotGotoSleep(robot));
    }
 else {
      releaseBlockFound();
      AIRobotSearchRandomBlock searchAI=(AIRobotSearchRandomBlock)ai;
      if (searchAI.takeResource()) {
        blockFound=searchAI.blockFound;
        if (searchAI.path.size() > 1) {
          searchAI.path.removeLast();
        }
        startDelegateAI(new AIRobotGotoBlock(robot,searchAI.path));
      }
 else {
        startDelegateAI(new AIRobotGotoSleep(robot));
      }
    }
  }
 else   if (ai instanceof AIRobotGotoBlock) {
    startDelegateAI(new AIRobotUseToolOnBlock(robot,blockFound));
  }
 else   if (ai instanceof AIRobotUseToolOnBlock) {
    releaseBlockFound();
  }
 else   if (ai instanceof AIRobotFetchAndEquipItemStack) {
    if (robot.getHeldItem() == null) {
      startDelegateAI(new AIRobotGotoSleep(robot));
    }
  }
}",0.972310969116081
156758,"@Override public void delegateAIEnded(AIRobot ai){
  if (ai instanceof AIRobotSearchRandomBlock) {
    if (!ai.success()) {
      startDelegateAI(new AIRobotGotoSleep(robot));
    }
 else {
      releaseBlockFound();
      AIRobotSearchRandomBlock searchAI=(AIRobotSearchRandomBlock)ai;
      if (searchAI.takeResource()) {
        blockFound=searchAI.blockFound;
        searchAI.path.removeLast();
        startDelegateAI(new AIRobotGotoBlock(robot,searchAI.path));
      }
 else {
        startDelegateAI(new AIRobotGotoSleep(robot));
      }
    }
  }
 else   if (ai instanceof AIRobotGotoBlock) {
    startDelegateAI(new AIRobotUseToolOnBlock(robot,blockFound));
  }
 else   if (ai instanceof AIRobotUseToolOnBlock) {
    releaseBlockFound();
  }
 else   if (ai instanceof AIRobotFetchAndEquipItemStack) {
    if (robot.getHeldItem() == null) {
      startDelegateAI(new AIRobotGotoSleep(robot));
    }
  }
}","@Override public void delegateAIEnded(AIRobot ai){
  if (ai instanceof AIRobotSearchRandomBlock) {
    if (!ai.success()) {
      startDelegateAI(new AIRobotGotoSleep(robot));
    }
 else {
      releaseBlockFound();
      AIRobotSearchRandomBlock searchAI=(AIRobotSearchRandomBlock)ai;
      if (searchAI.takeResource()) {
        blockFound=searchAI.blockFound;
        if (searchAI.path.size() > 1) {
          searchAI.path.removeLast();
        }
        startDelegateAI(new AIRobotGotoBlock(robot,searchAI.path));
      }
 else {
        startDelegateAI(new AIRobotGotoSleep(robot));
      }
    }
  }
 else   if (ai instanceof AIRobotGotoBlock) {
    startDelegateAI(new AIRobotUseToolOnBlock(robot,blockFound));
  }
 else   if (ai instanceof AIRobotUseToolOnBlock) {
    releaseBlockFound();
  }
 else   if (ai instanceof AIRobotFetchAndEquipItemStack) {
    if (robot.getHeldItem() == null) {
      startDelegateAI(new AIRobotGotoSleep(robot));
    }
  }
}",0.972310969116081
156759,"@Override public void run(){
  while (true) {
    try {
      Thread.sleep(10);
    }
 catch (    Exception e) {
    }
    while (!packets.isEmpty()) {
      packets.remove().run();
    }
  }
}","@Override public void run(){
  while (true) {
    try {
      Thread.sleep(10);
    }
 catch (    Exception e) {
    }
    while (!packets.isEmpty()) {
      SendRequest r=packets.remove();
      for (      EntityPlayerMP player : (List<EntityPlayerMP>)MinecraftServer.getServer().getConfigurationManager().playerEntityList) {
        if (r.isValid(player)) {
          NetHandlerPlayServer handler=player.playerNetServerHandler;
          if (handler == null) {
            continue;
          }
          NetworkManager manager=handler.netManager;
          if (manager == null || !manager.isChannelOpen()) {
            continue;
          }
          manager.scheduleOutboundPacket(r.source.channels.get(Side.SERVER).generatePacketFrom(r.packet));
        }
      }
    }
  }
}",0.3696098562628336
156760,"LocationSendRequest(BuildCraftMod source,Packet packet,int dimensionId,int x,int y,int z,int md){
  super(source,packet);
  this.dimensionId=dimensionId;
  this.x=x;
  this.y=y;
  this.z=z;
  this.md=md;
}","LocationSendRequest(BuildCraftMod source,Packet packet,int dimensionId,int x,int y,int z,int md){
  super(source,packet);
  this.dimensionId=dimensionId;
  this.x=x;
  this.y=y;
  this.z=z;
  this.md=md * md;
}",0.9879518072289156
156761,"@SuppressWarnings(""String_Node_Str"") @Override public void initGui(){
  super.initGui();
  Keyboard.enableRepeatEvents(true);
  optionRotate=new GuiBetterButton(0,guiLeft + 5,guiTop + 30,79,""String_Node_Str"");
  buttonList.add(optionRotate);
  optionExcavate=new GuiBetterButton(1,guiLeft + 5,guiTop + 55,79,""String_Node_Str"");
  buttonList.add(optionExcavate);
  optionAllowCreative=new GuiBetterButton(2,guiLeft + 5,guiTop + 80,79,""String_Node_Str"");
  optionAllowCreative.setToolTip(new ToolTip(500,new ToolTipLine(StringUtils.localize(""String_Node_Str"")),new ToolTipLine(StringUtils.localize(""String_Node_Str""))));
  buttonList.add(optionAllowCreative);
  textField=new GuiTextField(this.fontRendererObj,TEXT_X,TEXT_Y,TEXT_WIDTH,TEXT_HEIGHT);
  textField.setMaxStringLength(BuildCraftBuilders.MAX_BLUEPRINTS_NAME_SIZE);
  textField.setText(architect.name);
  textField.setFocused(true);
  updateButtons();
}","@SuppressWarnings(""String_Node_Str"") @Override public void initGui(){
  super.initGui();
  Keyboard.enableRepeatEvents(true);
  optionRotate=new GuiBetterButton(0,guiLeft + 5,guiTop + 30,79,""String_Node_Str"");
  buttonList.add(optionRotate);
  optionExcavate=new GuiBetterButton(1,guiLeft + 5,guiTop + 55,79,""String_Node_Str"");
  buttonList.add(optionExcavate);
  optionAllowCreative=new GuiBetterButton(2,guiLeft + 5,guiTop + 80,79,""String_Node_Str"");
  optionAllowCreative.setToolTip(new ToolTip(500,new ToolTipLine(StringUtils.localize(""String_Node_Str"")),new ToolTipLine(StringUtils.localize(""String_Node_Str""))));
  buttonList.add(optionAllowCreative);
  textField=new GuiTextField(this.fontRendererObj,TEXT_X,TEXT_Y,TEXT_WIDTH,TEXT_HEIGHT);
  textField.setMaxStringLength(DefaultProps.MAX_NAME_SIZE);
  textField.setText(architect.name);
  textField.setFocused(true);
  updateButtons();
}",0.9795013850415512
156762,"@Override protected void drawGuiContainerForegroundLayer(int par1,int par2){
  String title=StringUtils.localize(""String_Node_Str"");
  fontRendererObj.drawString(title,getCenteredOffset(title),6,0x404040);
  int c=0;
  for (  LibraryId bpt : library.currentPage) {
    String name=bpt.name;
    if (name.length() > BuildCraftBuilders.MAX_BLUEPRINTS_NAME_SIZE) {
      name=name.substring(0,BuildCraftBuilders.MAX_BLUEPRINTS_NAME_SIZE);
    }
    if (c == library.selected) {
      int l1=8;
      int i2=24;
      drawGradientRect(l1,i2 + 9 * c,l1 + 146,i2 + 9 * (c + 1),0x80ffffff,0x80ffffff);
    }
    fontRendererObj.drawString(name,9,25 + 9 * c,LibraryAPI.getHandler(bpt.extension).getTextColor());
    c++;
  }
}","@Override protected void drawGuiContainerForegroundLayer(int par1,int par2){
  String title=StringUtils.localize(""String_Node_Str"");
  fontRendererObj.drawString(title,getCenteredOffset(title),6,0x404040);
  int c=0;
  for (  LibraryId bpt : library.currentPage) {
    String name=bpt.name;
    if (name.length() > DefaultProps.MAX_NAME_SIZE) {
      name=name.substring(0,DefaultProps.MAX_NAME_SIZE);
    }
    if (c == library.selected) {
      int l1=8;
      int i2=24;
      drawGradientRect(l1,i2 + 9 * c,l1 + 146,i2 + 9 * (c + 1),0x80ffffff,0x80ffffff);
    }
    fontRendererObj.drawString(name,9,25 + 9 * c,LibraryAPI.getHandler(bpt.extension).getTextColor());
    c++;
  }
}",0.9472182596291012
156763,"@Override public void addInformation(ItemStack stack,EntityPlayer player,List list,boolean advanced){
  NBTTagCompound cpt=NBTUtils.getItemData(stack);
  if (!cpt.hasKey(""String_Node_Str"")) {
  }
 else {
switch (cpt.getByte(""String_Node_Str"")) {
case 0:
{
        int x=cpt.getInteger(""String_Node_Str"");
        int y=cpt.getInteger(""String_Node_Str"");
        int z=cpt.getInteger(""String_Node_Str"");
        ForgeDirection side=ForgeDirection.values()[cpt.getByte(""String_Node_Str"")];
        list.add(StringUtils.localize(""String_Node_Str"" + x + ""String_Node_Str""+ y+ ""String_Node_Str""+ z+ ""String_Node_Str""+ side+ ""String_Node_Str""));
        break;
      }
case 1:
{
      int x=cpt.getInteger(""String_Node_Str"");
      int y=cpt.getInteger(""String_Node_Str"");
      int z=cpt.getInteger(""String_Node_Str"");
      int xLength=cpt.getInteger(""String_Node_Str"") - x + 1;
      int yLength=cpt.getInteger(""String_Node_Str"") - y + 1;
      int zLength=cpt.getInteger(""String_Node_Str"") - z + 1;
      list.add(StringUtils.localize(""String_Node_Str"" + x + ""String_Node_Str""+ y+ ""String_Node_Str""+ z+ ""String_Node_Str""+ xLength+ ""String_Node_Str""+ yLength+ ""String_Node_Str""+ zLength+ ""String_Node_Str""));
      break;
    }
case 2:
{
    NBTTagList pathNBT=cpt.getTagList(""String_Node_Str"",Constants.NBT.TAG_COMPOUND);
    BlockIndex first=new BlockIndex(pathNBT.getCompoundTagAt(0));
    int x=first.x;
    int y=first.y;
    int z=first.z;
    list.add(StringUtils.localize(""String_Node_Str"" + x + ""String_Node_Str""+ y+ ""String_Node_Str""+ z+ ""String_Node_Str""+ pathNBT.tagCount()+ ""String_Node_Str""));
    break;
  }
case 3:
{
  break;
}
}
}
if (cpt.hasKey(""String_Node_Str"")) {
}
}","@Override public void addInformation(ItemStack stack,EntityPlayer player,List list,boolean advanced){
  NBTTagCompound cpt=NBTUtils.getItemData(stack);
  if (cpt.hasKey(""String_Node_Str"")) {
    String name=cpt.getString(""String_Node_Str"");
    if (name.length() > 0) {
      list.add(name);
    }
  }
  if (cpt.hasKey(""String_Node_Str"")) {
switch (cpt.getByte(""String_Node_Str"")) {
case 0:
{
        int x=cpt.getInteger(""String_Node_Str"");
        int y=cpt.getInteger(""String_Node_Str"");
        int z=cpt.getInteger(""String_Node_Str"");
        ForgeDirection side=ForgeDirection.values()[cpt.getByte(""String_Node_Str"")];
        list.add(StringUtils.localize(""String_Node_Str"" + x + ""String_Node_Str""+ y+ ""String_Node_Str""+ z+ ""String_Node_Str""+ side+ ""String_Node_Str""));
        break;
      }
case 1:
{
      int x=cpt.getInteger(""String_Node_Str"");
      int y=cpt.getInteger(""String_Node_Str"");
      int z=cpt.getInteger(""String_Node_Str"");
      int xLength=cpt.getInteger(""String_Node_Str"") - x + 1;
      int yLength=cpt.getInteger(""String_Node_Str"") - y + 1;
      int zLength=cpt.getInteger(""String_Node_Str"") - z + 1;
      list.add(StringUtils.localize(""String_Node_Str"" + x + ""String_Node_Str""+ y+ ""String_Node_Str""+ z+ ""String_Node_Str""+ xLength+ ""String_Node_Str""+ yLength+ ""String_Node_Str""+ zLength+ ""String_Node_Str""));
      break;
    }
case 2:
{
    NBTTagList pathNBT=cpt.getTagList(""String_Node_Str"",Constants.NBT.TAG_COMPOUND);
    BlockIndex first=new BlockIndex(pathNBT.getCompoundTagAt(0));
    int x=first.x;
    int y=first.y;
    int z=first.z;
    list.add(StringUtils.localize(""String_Node_Str"" + x + ""String_Node_Str""+ y+ ""String_Node_Str""+ z+ ""String_Node_Str""+ pathNBT.tagCount()+ ""String_Node_Str""));
    break;
  }
case 3:
{
  break;
}
}
}
}",0.9463667820069204
156764,"@Override public void readFromNBT(NBTTagCompound nbt){
  super.readFromNBT(nbt);
  scan=nbt.getBoolean(""String_Node_Str"");
  chunkIt=nbt.getInteger(""String_Node_Str"");
  colors=nbt.getByteArray(""String_Node_Str"");
  if (colors.length != RESOLUTION * RESOLUTION || chunkIt >= RESOLUTION_CHUNKS * RESOLUTION_CHUNKS) {
    colors=new byte[RESOLUTION * RESOLUTION];
    scan=true;
    chunkIt=0;
  }
  inv.readFromNBT(nbt.getCompoundTag(""String_Node_Str""));
  for (int i=0; i < selectedAreas.length; ++i) {
    if (nbt.hasKey(""String_Node_Str"" + i + ""String_Node_Str"")) {
      selectedAreas[i]=new ZonePlan();
      selectedAreas[i].readFromNBT(nbt.getCompoundTag(""String_Node_Str"" + i + ""String_Node_Str""));
    }
  }
}","@Override public void readFromNBT(NBTTagCompound nbt){
  super.readFromNBT(nbt);
  scan=nbt.getBoolean(""String_Node_Str"");
  chunkIt=nbt.getInteger(""String_Node_Str"");
  colors=nbt.getByteArray(""String_Node_Str"");
  mapName=nbt.getString(""String_Node_Str"");
  if (mapName == null) {
    mapName=""String_Node_Str"";
  }
  if (colors.length != RESOLUTION * RESOLUTION || chunkIt >= RESOLUTION_CHUNKS * RESOLUTION_CHUNKS) {
    colors=new byte[RESOLUTION * RESOLUTION];
    scan=true;
    chunkIt=0;
  }
  inv.readFromNBT(nbt.getCompoundTag(""String_Node_Str""));
  for (int i=0; i < selectedAreas.length; ++i) {
    if (nbt.hasKey(""String_Node_Str"" + i + ""String_Node_Str"")) {
      selectedAreas[i]=new ZonePlan();
      selectedAreas[i].readFromNBT(nbt.getCompoundTag(""String_Node_Str"" + i + ""String_Node_Str""));
    }
  }
}",0.9323797139141744
156765,"@Override public void readData(ByteBuf stream){
  progress=stream.readShort();
}","@Override public void readData(ByteBuf stream){
  progress=stream.readShort();
  mapName=NetworkUtils.readUTF(stream);
}",0.8
156766,"@Override public void writeData(ByteBuf stream){
  stream.writeShort(progress);
}","@Override public void writeData(ByteBuf stream){
  stream.writeShort(progress);
  NetworkUtils.writeUTF(stream,mapName);
}",0.7980295566502463
156767,"@Override public void updateEntity(){
  super.updateEntity();
  if (worldObj.isRemote) {
    return;
  }
  if (scan && zonePlannerScanning.markTimeIfDelay(worldObj)) {
    int[] coords=getCoords();
    Chunk chunk=worldObj.getChunkFromChunkCoords(coords[0],coords[1]);
    loadChunk(chunk);
    if (chunkIt > RESOLUTION_CHUNKS * RESOLUTION_CHUNKS) {
      scan=false;
      chunkIt=0;
    }
 else {
      chunkIt++;
    }
  }
  if (inv.getStackInSlot(0) != null && inv.getStackInSlot(1) == null && inv.getStackInSlot(0).getItem() instanceof ItemMapLocation) {
    if (progress < CRAFT_TIME) {
      progress++;
      if (worldObj.getTotalWorldTime() % 5 == 0) {
        sendNetworkUpdate();
      }
    }
 else {
      ItemStack stack=inv.decrStackSize(0,1);
      if (selectedAreas[currentSelectedArea] != null) {
        ItemMapLocation.setZone(stack,selectedAreas[currentSelectedArea]);
      }
      inv.setInventorySlotContents(1,stack);
    }
  }
 else   if (progress != 0) {
    progress=0;
    sendNetworkUpdate();
  }
}","@Override public void updateEntity(){
  super.updateEntity();
  if (worldObj.isRemote) {
    return;
  }
  if (scan && zonePlannerScanning.markTimeIfDelay(worldObj)) {
    int[] coords=getCoords();
    Chunk chunk=worldObj.getChunkFromChunkCoords(coords[0],coords[1]);
    loadChunk(chunk);
    if (chunkIt > RESOLUTION_CHUNKS * RESOLUTION_CHUNKS) {
      scan=false;
      chunkIt=0;
    }
 else {
      chunkIt++;
    }
  }
  if (inv.getStackInSlot(0) != null && inv.getStackInSlot(1) == null && inv.getStackInSlot(0).getItem() instanceof ItemMapLocation) {
    if (progress < CRAFT_TIME) {
      progress++;
      if (worldObj.getTotalWorldTime() % 5 == 0) {
        sendNetworkUpdate();
      }
    }
 else {
      ItemStack stack=inv.decrStackSize(0,1);
      if (selectedAreas[currentSelectedArea] != null) {
        ItemMapLocation.setZone(stack,selectedAreas[currentSelectedArea]);
        ((INamedItem)stack.getItem()).setName(stack,mapName);
      }
      inv.setInventorySlotContents(1,stack);
    }
  }
 else   if (progress != 0) {
    progress=0;
    sendNetworkUpdate();
  }
}",0.9707271010387156
156768,"@Override public void writeToNBT(NBTTagCompound nbt){
  super.writeToNBT(nbt);
  nbt.setBoolean(""String_Node_Str"",scan);
  nbt.setInteger(""String_Node_Str"",chunkIt);
  nbt.setByteArray(""String_Node_Str"",colors);
  NBTTagCompound invNBT=new NBTTagCompound();
  inv.writeToNBT(invNBT);
  nbt.setTag(""String_Node_Str"",invNBT);
  for (int i=0; i < selectedAreas.length; ++i) {
    if (selectedAreas[i] != null) {
      NBTTagCompound subNBT=new NBTTagCompound();
      selectedAreas[i].writeToNBT(subNBT);
      nbt.setTag(""String_Node_Str"" + i + ""String_Node_Str"",subNBT);
    }
  }
}","@Override public void writeToNBT(NBTTagCompound nbt){
  super.writeToNBT(nbt);
  nbt.setBoolean(""String_Node_Str"",scan);
  nbt.setInteger(""String_Node_Str"",chunkIt);
  nbt.setByteArray(""String_Node_Str"",colors);
  nbt.setString(""String_Node_Str"",mapName);
  NBTTagCompound invNBT=new NBTTagCompound();
  inv.writeToNBT(invNBT);
  nbt.setTag(""String_Node_Str"",invNBT);
  for (int i=0; i < selectedAreas.length; ++i) {
    if (selectedAreas[i] != null) {
      NBTTagCompound subNBT=new NBTTagCompound();
      selectedAreas[i].writeToNBT(subNBT);
      nbt.setTag(""String_Node_Str"" + i + ""String_Node_Str"",subNBT);
    }
  }
}",0.9635157545605308
156769,"@Override public void receiveCommand(String command,Side side,Object sender,ByteBuf stream){
  if (side.isClient()) {
    if (""String_Node_Str"".equals(command)) {
      currentAreaSelection=new ZonePlan();
      currentAreaSelection.readData(stream);
      gui.refreshSelectedArea();
    }
 else     if (""String_Node_Str"".equals(command)) {
      int size=stream.readUnsignedMedium();
      for (int i=0; i < size; ++i) {
        mapTexture.colorMap[i]=0xFF000000 | MapColor.mapColorArray[stream.readUnsignedByte()].colorValue;
      }
    }
  }
 else   if (side.isServer()) {
    if (""String_Node_Str"".equals(command)) {
      final int index=stream.readUnsignedByte();
      BuildCraftCore.instance.sendToPlayer((EntityPlayer)sender,new PacketCommand(this,""String_Node_Str"",new CommandWriter(){
        public void write(        ByteBuf data){
          map.selectArea(index).writeData(data);
        }
      }
));
    }
 else     if (""String_Node_Str"".equals(command)) {
      final int index=stream.readUnsignedByte();
      ZonePlan plan=new ZonePlan();
      plan.readData(stream);
      map.setArea(index,plan);
    }
 else     if (""String_Node_Str"".equals(command)) {
      computeMap(stream.readInt(),stream.readInt(),stream.readUnsignedShort(),stream.readUnsignedShort(),stream.readUnsignedByte(),(EntityPlayer)sender);
    }
  }
}","@Override public void receiveCommand(String command,Side side,Object sender,ByteBuf stream){
  if (side.isClient()) {
    if (""String_Node_Str"".equals(command)) {
      currentAreaSelection=new ZonePlan();
      currentAreaSelection.readData(stream);
      gui.refreshSelectedArea();
    }
 else     if (""String_Node_Str"".equals(command)) {
      int size=stream.readUnsignedMedium();
      for (int i=0; i < size; ++i) {
        mapTexture.colorMap[i]=0xFF000000 | MapColor.mapColorArray[stream.readUnsignedByte()].colorValue;
      }
    }
  }
 else   if (side.isServer()) {
    if (""String_Node_Str"".equals(command)) {
      final int index=stream.readUnsignedByte();
      BuildCraftCore.instance.sendToPlayer((EntityPlayer)sender,new PacketCommand(this,""String_Node_Str"",new CommandWriter(){
        public void write(        ByteBuf data){
          map.selectArea(index).writeData(data);
        }
      }
));
    }
 else     if (""String_Node_Str"".equals(command)) {
      final int index=stream.readUnsignedByte();
      ZonePlan plan=new ZonePlan();
      plan.readData(stream);
      map.setArea(index,plan);
    }
 else     if (""String_Node_Str"".equals(command)) {
      computeMap(stream.readInt(),stream.readInt(),stream.readUnsignedShort(),stream.readUnsignedShort(),stream.readUnsignedByte(),(EntityPlayer)sender);
    }
 else     if (""String_Node_Str"".equals(command)) {
      map.mapName=NetworkUtils.readUTF(stream);
    }
  }
}",0.96232508073197
156770,"public ContainerZonePlan(IInventory playerInventory,TileZonePlan iZonePlan){
  super(0);
  map=iZonePlan;
  addSlotToContainer(new Slot(iZonePlan,0,233,20));
  addSlotToContainer(new SlotOutput(iZonePlan,1,233,68));
  for (int l=0; l < 3; l++) {
    for (int k1=0; k1 < 9; k1++) {
      addSlotToContainer(new Slot(playerInventory,k1 + l * 9 + 9,88 + k1 * 18,138 + l * 18));
    }
  }
  for (int i1=0; i1 < 9; i1++) {
    addSlotToContainer(new Slot(playerInventory,i1,88 + i1 * 18,196));
  }
}","public ContainerZonePlan(IInventory playerInventory,TileZonePlan iZonePlan){
  super(0);
  map=iZonePlan;
  addSlotToContainer(new Slot(iZonePlan,0,233,20));
  addSlotToContainer(new SlotOutput(iZonePlan,1,233,68));
  for (int l=0; l < 3; l++) {
    for (int k1=0; k1 < 9; k1++) {
      addSlotToContainer(new Slot(playerInventory,k1 + l * 9 + 9,88 + k1 * 18,146 + l * 18));
    }
  }
  for (int i1=0; i1 < 9; i1++) {
    addSlotToContainer(new Slot(playerInventory,i1,88 + i1 * 18,204));
  }
}",0.9898785425101214
156771,"private boolean isCarryingList(){
  ItemStack stack=mc.thePlayer.inventory.getItemStack();
  return stack != null && stack.getItem() != null && stack.getItem() instanceof ItemList;
}","private boolean isCarryingList(){
  ItemStack stack=mc.thePlayer.inventory.getItemStack();
  return stack != null && stack.getItem() instanceof ItemList;
}",0.9198813056379822
156772,"@Override protected void mouseClicked(int x,int y,int b){
  super.mouseClicked(x,y,b);
  if (isCarryingList()) {
    return;
  }
  AdvancedSlot slot=getSlotAtLocation(x,y);
  ContainerList container=(ContainerList)getContainer();
  if (slot instanceof MainSlot) {
    container.setStack(((MainSlot)slot).lineIndex,0,mc.thePlayer.inventory.getItemStack());
  }
 else   if (slot instanceof SecondarySlot) {
    container.setStack(((SecondarySlot)slot).lineIndex,((SecondarySlot)slot).slotIndex,mc.thePlayer.inventory.getItemStack());
  }
 else   if (slot instanceof Button) {
    Button button=(Button)slot;
    container.switchButton(button.line,button.kind);
  }
  textField.mouseClicked(x - guiLeft,y - guiTop,b);
}","@Override protected void mouseClicked(int x,int y,int b){
  super.mouseClicked(x,y,b);
  if (isCarryingList() || !hasListEquipped()) {
    return;
  }
  AdvancedSlot slot=getSlotAtLocation(x,y);
  ContainerList container=(ContainerList)getContainer();
  if (slot instanceof MainSlot) {
    container.setStack(((MainSlot)slot).lineIndex,0,mc.thePlayer.inventory.getItemStack());
  }
 else   if (slot instanceof SecondarySlot) {
    container.setStack(((SecondarySlot)slot).lineIndex,((SecondarySlot)slot).slotIndex,mc.thePlayer.inventory.getItemStack());
  }
 else   if (slot instanceof Button) {
    Button button=(Button)slot;
    container.switchButton(button.line,button.kind);
  }
  textField.mouseClicked(x - guiLeft,y - guiTop,b);
}",0.984869325997249
156773,"/** 
 * This can be use to provide a rough estimate of how much power is contained in a pipe. Measured in RF. Max should be around (throughput * internalPower.length * 2), ie 112 MJ for a Cobblestone Pipe.
 * @return RF
 */
public int getCurrentPowerAmount(){
  int amount=0;
  for (  int d : internalPower) {
    amount+=d;
  }
  for (  int d : internalNextPower) {
    amount+=d;
  }
  return amount;
}","/** 
 * This can be use to provide a rough estimate of how much power is contained in a pipe. Measured in RF. Max should be around (throughput * internalPower.length * 2), ie 1120 RF for a Cobblestone Pipe.
 * @return RF
 */
public int getCurrentPowerAmount(){
  int amount=0;
  for (  int d : internalPower) {
    amount+=d;
  }
  for (  int d : internalNextPower) {
    amount+=d;
  }
  return amount;
}",0.9913473423980222
156774,"@Override public void updateEntity(){
  if (container.getWorldObj().isRemote) {
    for (int i=0; i < 6; i+=2) {
      movementStage[i / 2]=(movementStage[i / 2] + 0.01F) % 1.0F;
    }
    return;
  }
  step();
  init();
  for (  ForgeDirection side : ForgeDirection.VALID_DIRECTIONS) {
    if (tiles[side.ordinal()] != null && tiles[side.ordinal()].isInvalid()) {
      updateTile(side);
    }
  }
  System.arraycopy(displayPower,0,prevDisplayPower,0,6);
  Arrays.fill(displayPower,(short)0);
  for (int i=0; i < 6; ++i) {
    if (internalPower[i] > 0) {
      float totalPowerQuery=0;
      for (int j=0; j < 6; ++j) {
        if (j != i && powerQuery[j] > 0) {
          Object ep=getEnergyProvider(j);
          if (ep instanceof TileGenericPipe || ep instanceof IEnergyReceiver || ep instanceof IEnergyHandler) {
            totalPowerQuery+=powerQuery[j];
          }
        }
      }
      for (int j=0; j < 6; ++j) {
        if (j != i && powerQuery[j] > 0) {
          Object ep=getEnergyProvider(j);
          int watts=(int)Math.floor((internalPower[i] * powerQuery[j]) / totalPowerQuery);
          if (ep instanceof IPipeTile) {
            Pipe<?> nearbyPipe=(Pipe<?>)((IPipeTile)ep).getPipe();
            PipeTransportPower nearbyTransport=(PipeTransportPower)nearbyPipe.transport;
            watts=nearbyTransport.receiveEnergy(ForgeDirection.VALID_DIRECTIONS[j].getOpposite(),watts);
            internalPower[i]-=watts;
          }
 else           if (ep instanceof IEnergyHandler) {
            IEnergyHandler handler=(IEnergyHandler)ep;
            if (handler.canConnectEnergy(ForgeDirection.VALID_DIRECTIONS[j].getOpposite())) {
              watts=handler.receiveEnergy(ForgeDirection.VALID_DIRECTIONS[j].getOpposite(),watts,false);
              internalPower[i]-=watts;
            }
          }
 else           if (ep instanceof IEnergyReceiver) {
            IEnergyReceiver handler=(IEnergyReceiver)ep;
            if (handler.canConnectEnergy(ForgeDirection.VALID_DIRECTIONS[j].getOpposite())) {
              watts=handler.receiveEnergy(ForgeDirection.VALID_DIRECTIONS[j].getOpposite(),watts,false);
              internalPower[i]-=watts;
            }
          }
          displayPower[j]+=watts;
          displayPower[i]+=watts;
        }
      }
    }
  }
  for (int i=0; i < 6; i++) {
    displayPower[i]=(short)((prevDisplayPower[i] * (DISPLAY_SMOOTHING - 1.0F) + displayPower[i]) / DISPLAY_SMOOTHING);
    if (displayPower[i] > highestPower) {
      highestPower=displayPower[i];
    }
  }
  overload+=highestPower > maxPower * 0.95 ? 1 : -1;
  if (overload < 0) {
    overload=0;
  }
  if (overload > OVERLOAD_TICKS) {
    overload=OVERLOAD_TICKS;
  }
  for (  ForgeDirection dir : ForgeDirection.VALID_DIRECTIONS) {
    if (!outputOpen(dir)) {
      continue;
    }
    Object tile=getEnergyProvider(dir.ordinal());
    if (tile instanceof IPipeTile && ((Pipe<?>)((IPipeTile)tile).getPipe()).transport instanceof PipeTransportPower) {
      continue;
    }
    if (tile instanceof IEnergyHandler) {
      IEnergyHandler handler=(IEnergyHandler)tile;
      if (handler.canConnectEnergy(dir.getOpposite())) {
        int request=handler.receiveEnergy(dir.getOpposite(),this.maxPower,true);
        if (request > 0) {
          requestEnergy(dir,request);
        }
      }
    }
 else     if (tile instanceof IEnergyReceiver) {
      IEnergyReceiver handler=(IEnergyReceiver)tile;
      if (handler.canConnectEnergy(dir.getOpposite())) {
        int request=handler.receiveEnergy(dir.getOpposite(),this.maxPower,true);
        if (request > 0) {
          requestEnergy(dir,request);
        }
      }
    }
  }
  int[] transferQuery=new int[6];
  for (int i=0; i < 6; ++i) {
    transferQuery[i]=0;
    if (!inputOpen(ForgeDirection.getOrientation(i))) {
      continue;
    }
    for (int j=0; j < 6; ++j) {
      if (j != i) {
        transferQuery[i]+=powerQuery[j];
      }
    }
    transferQuery[i]=Math.min(transferQuery[i],maxPower);
  }
  for (int i=0; i < 6; ++i) {
    if (transferQuery[i] != 0) {
      if (tiles[i] != null) {
        TileEntity entity=tiles[i];
        if (entity instanceof TileGenericPipe) {
          TileGenericPipe nearbyTile=(TileGenericPipe)entity;
          if (nearbyTile.pipe == null) {
            continue;
          }
          PipeTransportPower nearbyTransport=(PipeTransportPower)nearbyTile.pipe.transport;
          nearbyTransport.requestEnergy(ForgeDirection.VALID_DIRECTIONS[i].getOpposite(),transferQuery[i]);
        }
      }
    }
  }
  if (tracker.markTimeIfDelay(container.getWorldObj())) {
    PacketPowerUpdate packet=new PacketPowerUpdate(container.xCoord,container.yCoord,container.zCoord);
    packet.displayPower=displayPower;
    packet.overload=isOverloaded();
    BuildCraftTransport.instance.sendToPlayers(packet,container.getWorldObj(),container.xCoord,container.yCoord,container.zCoord,DefaultProps.PIPE_CONTENTS_RENDER_DIST);
  }
}","@Override public void updateEntity(){
  if (container.getWorldObj().isRemote) {
    return;
  }
  step();
  init();
  for (  ForgeDirection side : ForgeDirection.VALID_DIRECTIONS) {
    if (tiles[side.ordinal()] != null && tiles[side.ordinal()].isInvalid()) {
      updateTile(side);
    }
  }
  System.arraycopy(displayPower,0,prevDisplayPower,0,6);
  Arrays.fill(displayPower,(short)0);
  for (int i=0; i < 6; ++i) {
    if (internalPower[i] > 0) {
      float totalPowerQuery=0;
      for (int j=0; j < 6; ++j) {
        if (j != i && powerQuery[j] > 0) {
          Object ep=getEnergyProvider(j);
          if (ep instanceof TileGenericPipe || ep instanceof IEnergyReceiver || ep instanceof IEnergyHandler) {
            totalPowerQuery+=powerQuery[j];
          }
        }
      }
      for (int j=0; j < 6; ++j) {
        if (j != i && powerQuery[j] > 0) {
          Object ep=getEnergyProvider(j);
          int watts=(int)Math.floor(internalPower[i] * powerQuery[j] / totalPowerQuery);
          if (ep instanceof IPipeTile) {
            Pipe<?> nearbyPipe=(Pipe<?>)((IPipeTile)ep).getPipe();
            PipeTransportPower nearbyTransport=(PipeTransportPower)nearbyPipe.transport;
            watts=nearbyTransport.receiveEnergy(ForgeDirection.VALID_DIRECTIONS[j].getOpposite(),watts);
            internalPower[i]-=watts;
          }
 else           if (ep instanceof IEnergyHandler) {
            IEnergyHandler handler=(IEnergyHandler)ep;
            if (handler.canConnectEnergy(ForgeDirection.VALID_DIRECTIONS[j].getOpposite())) {
              watts=handler.receiveEnergy(ForgeDirection.VALID_DIRECTIONS[j].getOpposite(),watts,false);
              internalPower[i]-=watts;
            }
          }
 else           if (ep instanceof IEnergyReceiver) {
            IEnergyReceiver handler=(IEnergyReceiver)ep;
            if (handler.canConnectEnergy(ForgeDirection.VALID_DIRECTIONS[j].getOpposite())) {
              watts=handler.receiveEnergy(ForgeDirection.VALID_DIRECTIONS[j].getOpposite(),watts,false);
              internalPower[i]-=watts;
            }
          }
          displayPower[j]+=watts;
          displayPower[i]+=watts;
        }
      }
    }
  }
  for (int i=0; i < 6; i++) {
    displayPower[i]=(short)((prevDisplayPower[i] * (DISPLAY_SMOOTHING - 1.0F) + displayPower[i]) / DISPLAY_SMOOTHING);
    if (displayPower[i] > highestPower) {
      highestPower=displayPower[i];
    }
  }
  overload+=highestPower > maxPower * 0.95 ? 1 : -1;
  if (overload < 0) {
    overload=0;
  }
  if (overload > OVERLOAD_TICKS) {
    overload=OVERLOAD_TICKS;
  }
  for (  ForgeDirection dir : ForgeDirection.VALID_DIRECTIONS) {
    if (!outputOpen(dir)) {
      continue;
    }
    Object tile=getEnergyProvider(dir.ordinal());
    if (tile instanceof IPipeTile && ((Pipe<?>)((IPipeTile)tile).getPipe()).transport instanceof PipeTransportPower) {
      continue;
    }
    if (tile instanceof IEnergyHandler) {
      IEnergyHandler handler=(IEnergyHandler)tile;
      if (handler.canConnectEnergy(dir.getOpposite())) {
        int request=handler.receiveEnergy(dir.getOpposite(),this.maxPower,true);
        if (request > 0) {
          requestEnergy(dir,request);
        }
      }
    }
 else     if (tile instanceof IEnergyReceiver) {
      IEnergyReceiver handler=(IEnergyReceiver)tile;
      if (handler.canConnectEnergy(dir.getOpposite())) {
        int request=handler.receiveEnergy(dir.getOpposite(),this.maxPower,true);
        if (request > 0) {
          requestEnergy(dir,request);
        }
      }
    }
  }
  int[] transferQuery=new int[6];
  for (int i=0; i < 6; ++i) {
    transferQuery[i]=0;
    if (!inputOpen(ForgeDirection.getOrientation(i))) {
      continue;
    }
    for (int j=0; j < 6; ++j) {
      if (j != i) {
        transferQuery[i]+=powerQuery[j];
      }
    }
    transferQuery[i]=Math.min(transferQuery[i],maxPower);
  }
  for (int i=0; i < 6; ++i) {
    if (transferQuery[i] != 0) {
      if (tiles[i] != null) {
        TileEntity entity=tiles[i];
        if (entity instanceof TileGenericPipe) {
          TileGenericPipe nearbyTile=(TileGenericPipe)entity;
          if (nearbyTile.pipe == null) {
            continue;
          }
          PipeTransportPower nearbyTransport=(PipeTransportPower)nearbyTile.pipe.transport;
          nearbyTransport.requestEnergy(ForgeDirection.VALID_DIRECTIONS[i].getOpposite(),transferQuery[i]);
        }
      }
    }
  }
  if (tracker.markTimeIfDelay(container.getWorldObj())) {
    PacketPowerUpdate packet=new PacketPowerUpdate(container.xCoord,container.yCoord,container.zCoord);
    packet.displayPower=displayPower;
    packet.overload=isOverloaded();
    BuildCraftTransport.instance.sendToPlayers(packet,container.getWorldObj(),container.xCoord,container.yCoord,container.zCoord,DefaultProps.PIPE_CONTENTS_RENDER_DIST);
  }
}",0.989055947632198
156775,"public PipeTransportPower(){
  for (int i=0; i < 6; ++i) {
    powerQuery[i]=0;
  }
  for (int i=0; i < 3; ++i) {
    movementStage[i]=(float)Math.random();
  }
}","public PipeTransportPower(){
  for (int i=0; i < 6; ++i) {
    powerQuery[i]=0;
  }
}",0.6882591093117408
156776,"private void step(){
  if (container != null && container.getWorldObj() != null && currentDate != container.getWorldObj().getTotalWorldTime()) {
    currentDate=container.getWorldObj().getTotalWorldTime();
    powerQuery=nextPowerQuery;
    nextPowerQuery=new int[6];
    int[] next=internalPower;
    internalPower=internalNextPower;
    internalNextPower=internalPower;
  }
}","private void step(){
  if (container != null && container.getWorldObj() != null && currentDate != container.getWorldObj().getTotalWorldTime()) {
    currentDate=container.getWorldObj().getTotalWorldTime();
    powerQuery=nextPowerQuery;
    nextPowerQuery=new int[6];
    int[] next=internalPower;
    internalPower=internalNextPower;
    internalNextPower=next;
  }
}",0.9771812080536912
156777,"@Override public void updateEntity(){
  if (container.getWorldObj().isRemote) {
    for (int i=0; i < 6; i+=2) {
      movementStage[i / 2]=(movementStage[i / 2] + 0.01F) % 1.0F;
    }
    return;
  }
  step();
  init();
  for (  ForgeDirection side : ForgeDirection.VALID_DIRECTIONS) {
    if (tiles[side.ordinal()] != null && tiles[side.ordinal()].isInvalid()) {
      updateTile(side);
    }
  }
  System.arraycopy(displayPower,0,prevDisplayPower,0,6);
  Arrays.fill(displayPower,(short)0);
  for (int i=0; i < 6; ++i) {
    if (internalPower[i] > 0) {
      float totalPowerQuery=0;
      for (int j=0; j < 6; ++j) {
        if (j != i && powerQuery[j] > 0) {
          Object ep=getEnergyProvider(j);
          if (ep instanceof TileGenericPipe || ep instanceof IEnergyReceiver || ep instanceof IEnergyHandler) {
            totalPowerQuery+=powerQuery[j];
          }
        }
      }
      for (int j=0; j < 6; ++j) {
        if (j != i && powerQuery[j] > 0) {
          Object ep=getEnergyProvider(j);
          int watts=(int)Math.floor((internalPower[i] * powerQuery[j]) / totalPowerQuery);
          if (ep instanceof IPipeTile) {
            Pipe<?> nearbyPipe=(Pipe<?>)((IPipeTile)ep).getPipe();
            PipeTransportPower nearbyTransport=(PipeTransportPower)nearbyPipe.transport;
            watts=nearbyTransport.receiveEnergy(ForgeDirection.VALID_DIRECTIONS[j].getOpposite(),watts);
            internalPower[i]-=watts;
          }
 else           if (ep instanceof IEnergyHandler) {
            IEnergyHandler handler=(IEnergyHandler)ep;
            if (handler.canConnectEnergy(ForgeDirection.VALID_DIRECTIONS[j].getOpposite())) {
              watts=handler.receiveEnergy(ForgeDirection.VALID_DIRECTIONS[j].getOpposite(),watts,false);
              internalPower[i]-=watts;
            }
          }
 else           if (ep instanceof IEnergyReceiver) {
            IEnergyReceiver handler=(IEnergyReceiver)ep;
            if (handler.canConnectEnergy(ForgeDirection.VALID_DIRECTIONS[j].getOpposite())) {
              watts=handler.receiveEnergy(ForgeDirection.VALID_DIRECTIONS[j].getOpposite(),watts,false);
              internalPower[i]-=watts;
            }
          }
          displayPower[j]+=watts;
          displayPower[i]+=watts;
        }
      }
    }
  }
  for (int i=0; i < 6; i++) {
    displayPower[i]=(short)((prevDisplayPower[i] * (DISPLAY_SMOOTHING - 1.0F) + displayPower[i]) / DISPLAY_SMOOTHING);
    if (displayPower[i] > highestPower) {
      highestPower=displayPower[i];
    }
  }
  overload+=highestPower > maxPower * 0.95 ? 1 : -1;
  if (overload < 0) {
    overload=0;
  }
  if (overload > OVERLOAD_TICKS) {
    overload=OVERLOAD_TICKS;
  }
  for (  ForgeDirection dir : ForgeDirection.VALID_DIRECTIONS) {
    if (!outputOpen(dir)) {
      continue;
    }
    Object tile=getEnergyProvider(dir.ordinal());
    if (tile instanceof IPipeTile && ((Pipe<?>)((IPipeTile)tile).getPipe()).transport instanceof PipeTransportPower) {
      continue;
    }
    if (tile instanceof IEnergyHandler) {
      IEnergyHandler handler=(IEnergyHandler)tile;
      if (handler.canConnectEnergy(dir.getOpposite())) {
        int request=handler.receiveEnergy(dir.getOpposite(),this.maxPower,true);
        if (request > 0) {
          requestEnergy(dir,request);
        }
      }
    }
 else     if (tile instanceof IEnergyReceiver) {
      IEnergyReceiver handler=(IEnergyReceiver)tile;
      if (handler.canConnectEnergy(dir.getOpposite())) {
        int request=handler.receiveEnergy(dir.getOpposite(),this.maxPower,true);
        if (request > 0) {
          requestEnergy(dir,request);
        }
      }
    }
  }
  int[] transferQuery=new int[6];
  for (int i=0; i < 6; ++i) {
    transferQuery[i]=0;
    for (int j=0; j < 6; ++j) {
      if (j != i) {
        transferQuery[i]+=powerQuery[j];
      }
    }
    transferQuery[i]=Math.min(transferQuery[i],maxPower);
  }
  for (int i=0; i < 6; ++i) {
    if (transferQuery[i] != 0) {
      if (tiles[i] != null) {
        TileEntity entity=tiles[i];
        if (entity instanceof TileGenericPipe) {
          TileGenericPipe nearbyTile=(TileGenericPipe)entity;
          if (nearbyTile.pipe == null) {
            continue;
          }
          PipeTransportPower nearbyTransport=(PipeTransportPower)nearbyTile.pipe.transport;
          nearbyTransport.requestEnergy(ForgeDirection.VALID_DIRECTIONS[i].getOpposite(),transferQuery[i]);
        }
      }
    }
  }
  if (tracker.markTimeIfDelay(container.getWorldObj())) {
    PacketPowerUpdate packet=new PacketPowerUpdate(container.xCoord,container.yCoord,container.zCoord);
    packet.displayPower=displayPower;
    packet.overload=isOverloaded();
    BuildCraftTransport.instance.sendToPlayers(packet,container.getWorldObj(),container.xCoord,container.yCoord,container.zCoord,DefaultProps.PIPE_CONTENTS_RENDER_DIST);
  }
}","@Override public void updateEntity(){
  if (container.getWorldObj().isRemote) {
    for (int i=0; i < 6; i+=2) {
      movementStage[i / 2]=(movementStage[i / 2] + 0.01F) % 1.0F;
    }
    return;
  }
  step();
  init();
  for (  ForgeDirection side : ForgeDirection.VALID_DIRECTIONS) {
    if (tiles[side.ordinal()] != null && tiles[side.ordinal()].isInvalid()) {
      updateTile(side);
    }
  }
  System.arraycopy(displayPower,0,prevDisplayPower,0,6);
  Arrays.fill(displayPower,(short)0);
  for (int i=0; i < 6; ++i) {
    if (internalPower[i] > 0) {
      float totalPowerQuery=0;
      for (int j=0; j < 6; ++j) {
        if (j != i && powerQuery[j] > 0) {
          Object ep=getEnergyProvider(j);
          if (ep instanceof TileGenericPipe || ep instanceof IEnergyReceiver || ep instanceof IEnergyHandler) {
            totalPowerQuery+=powerQuery[j];
          }
        }
      }
      for (int j=0; j < 6; ++j) {
        if (j != i && powerQuery[j] > 0) {
          Object ep=getEnergyProvider(j);
          int watts=(int)Math.floor((internalPower[i] * powerQuery[j]) / totalPowerQuery);
          if (ep instanceof IPipeTile) {
            Pipe<?> nearbyPipe=(Pipe<?>)((IPipeTile)ep).getPipe();
            PipeTransportPower nearbyTransport=(PipeTransportPower)nearbyPipe.transport;
            watts=nearbyTransport.receiveEnergy(ForgeDirection.VALID_DIRECTIONS[j].getOpposite(),watts);
            internalPower[i]-=watts;
          }
 else           if (ep instanceof IEnergyHandler) {
            IEnergyHandler handler=(IEnergyHandler)ep;
            if (handler.canConnectEnergy(ForgeDirection.VALID_DIRECTIONS[j].getOpposite())) {
              watts=handler.receiveEnergy(ForgeDirection.VALID_DIRECTIONS[j].getOpposite(),watts,false);
              internalPower[i]-=watts;
            }
          }
 else           if (ep instanceof IEnergyReceiver) {
            IEnergyReceiver handler=(IEnergyReceiver)ep;
            if (handler.canConnectEnergy(ForgeDirection.VALID_DIRECTIONS[j].getOpposite())) {
              watts=handler.receiveEnergy(ForgeDirection.VALID_DIRECTIONS[j].getOpposite(),watts,false);
              internalPower[i]-=watts;
            }
          }
          displayPower[j]+=watts;
          displayPower[i]+=watts;
        }
      }
    }
  }
  for (int i=0; i < 6; i++) {
    displayPower[i]=(short)((prevDisplayPower[i] * (DISPLAY_SMOOTHING - 1.0F) + displayPower[i]) / DISPLAY_SMOOTHING);
    if (displayPower[i] > highestPower) {
      highestPower=displayPower[i];
    }
  }
  overload+=highestPower > maxPower * 0.95 ? 1 : -1;
  if (overload < 0) {
    overload=0;
  }
  if (overload > OVERLOAD_TICKS) {
    overload=OVERLOAD_TICKS;
  }
  for (  ForgeDirection dir : ForgeDirection.VALID_DIRECTIONS) {
    if (!outputOpen(dir)) {
      continue;
    }
    Object tile=getEnergyProvider(dir.ordinal());
    if (tile instanceof IPipeTile && ((Pipe<?>)((IPipeTile)tile).getPipe()).transport instanceof PipeTransportPower) {
      continue;
    }
    if (tile instanceof IEnergyHandler) {
      IEnergyHandler handler=(IEnergyHandler)tile;
      if (handler.canConnectEnergy(dir.getOpposite())) {
        int request=handler.receiveEnergy(dir.getOpposite(),this.maxPower,true);
        if (request > 0) {
          requestEnergy(dir,request);
        }
      }
    }
 else     if (tile instanceof IEnergyReceiver) {
      IEnergyReceiver handler=(IEnergyReceiver)tile;
      if (handler.canConnectEnergy(dir.getOpposite())) {
        int request=handler.receiveEnergy(dir.getOpposite(),this.maxPower,true);
        if (request > 0) {
          requestEnergy(dir,request);
        }
      }
    }
  }
  int[] transferQuery=new int[6];
  for (int i=0; i < 6; ++i) {
    transferQuery[i]=0;
    if (!inputOpen(ForgeDirection.getOrientation(i))) {
      continue;
    }
    for (int j=0; j < 6; ++j) {
      if (j != i) {
        transferQuery[i]+=powerQuery[j];
      }
    }
    transferQuery[i]=Math.min(transferQuery[i],maxPower);
  }
  for (int i=0; i < 6; ++i) {
    if (transferQuery[i] != 0) {
      if (tiles[i] != null) {
        TileEntity entity=tiles[i];
        if (entity instanceof TileGenericPipe) {
          TileGenericPipe nearbyTile=(TileGenericPipe)entity;
          if (nearbyTile.pipe == null) {
            continue;
          }
          PipeTransportPower nearbyTransport=(PipeTransportPower)nearbyTile.pipe.transport;
          nearbyTransport.requestEnergy(ForgeDirection.VALID_DIRECTIONS[i].getOpposite(),transferQuery[i]);
        }
      }
    }
  }
  if (tracker.markTimeIfDelay(container.getWorldObj())) {
    PacketPowerUpdate packet=new PacketPowerUpdate(container.xCoord,container.yCoord,container.zCoord);
    packet.displayPower=displayPower;
    packet.overload=isOverloaded();
    BuildCraftTransport.instance.sendToPlayers(packet,container.getWorldObj(),container.xCoord,container.yCoord,container.zCoord,DefaultProps.PIPE_CONTENTS_RENDER_DIST);
  }
}",0.9920456863145012
156778,"public void setStack(int slot,ItemStack stack){
  stacks[slot]=stack;
  if (stack != null) {
    stacks[slot]=stacks[slot].copy();
    stacks[slot].stackSize=1;
  }
  if (FMLCommonHandler.instance().getEffectiveSide() == Side.CLIENT && slot == 0) {
    relatedItems.clear();
    ores.clear();
    if (stack == null) {
      isOre=false;
    }
 else {
      setClientPreviewLists();
    }
  }
}","public void setStack(int slot,ItemStack stack){
  stacks[slot]=stack;
  if (stack != null) {
    stacks[slot]=stacks[slot].copy();
    stacks[slot].stackSize=1;
  }
  if (slot == 0) {
    relatedItems.clear();
    ores.clear();
    if (stack == null) {
      isOre=false;
    }
 else {
      if (FMLCommonHandler.instance().getEffectiveSide() == Side.CLIENT) {
        setClientPreviewLists();
      }
 else {
        isOre=OreDictionary.getOreIDs(stacks[0]).length > 0;
      }
    }
  }
}",0.6047565118912798
156779,"@Override public void update(){
  PipeTransportPower powerProvider=(PipeTransportPower)((DockingStation)robot.getDockingStation()).getPipe().pipe.transport;
  int amount=robot.getBattery().receiveEnergy(1000,false);
  powerProvider.requestEnergy(robot.getDockingStation().side(),amount);
  robot.getBattery().receiveEnergy(powerProvider.consumePower(robot.getDockingStation().side(),amount),false);
  if (robot.getEnergy() >= EntityRobotBase.MAX_ENERGY) {
    terminate();
  }
}","@Override public void update(){
  PipeTransportPower powerProvider=(PipeTransportPower)((DockingStation)robot.getDockingStation()).getPipe().pipe.transport;
  int amount=robot.getBattery().receiveEnergy(1000,true);
  powerProvider.requestEnergy(robot.getDockingStation().side(),amount);
  robot.getBattery().receiveEnergy(powerProvider.consumePower(robot.getDockingStation().side(),amount),false);
  if (robot.getEnergy() >= EntityRobotBase.MAX_ENERGY) {
    terminate();
  }
}",0.9926701570680628
156780,"/** 
 * Make the column visit list: called once per layer
 */
private void createColumnVisitList(){
  visitList.clear();
  Integer[][] columnHeights=new Integer[builder.blueprint.sizeX - 2][builder.blueprint.sizeZ - 2];
  boolean[][] blockedColumns=new boolean[builder.blueprint.sizeX - 2][builder.blueprint.sizeZ - 2];
  for (int searchY=yCoord + 3; searchY >= 0; --searchY) {
    int startX, endX, incX;
    if (searchY % 2 == 0) {
      startX=0;
      endX=builder.blueprint.sizeX - 2;
      incX=1;
    }
 else {
      startX=builder.blueprint.sizeX - 3;
      endX=-1;
      incX=-1;
    }
    for (int searchX=startX; searchX != endX; searchX+=incX) {
      int startZ, endZ, incZ;
      if (searchX % 2 == searchY % 2) {
        startZ=0;
        endZ=builder.blueprint.sizeZ - 2;
        incZ=1;
      }
 else {
        startZ=builder.blueprint.sizeZ - 3;
        endZ=-1;
        incZ=-1;
      }
      for (int searchZ=startZ; searchZ != endZ; searchZ+=incZ) {
        if (!blockedColumns[searchX][searchZ]) {
          Integer height=columnHeights[searchX][searchZ];
          int bx=box.xMin + searchX + 1, by=searchY, bz=box.zMin + searchZ + 1;
          if (height == null) {
            columnHeights[searchX][searchZ]=height=worldObj.getHeightValue(bx,bz);
          }
          if (height > 0 && height < by && worldObj.provider.dimensionId != -1) {
            continue;
          }
          Block block=worldObj.getBlock(bx,by,bz);
          if (!BlockUtils.canChangeBlock(block,worldObj,bx,by,bz)) {
            blockedColumns[searchX][searchZ]=true;
            if (height == 0) {
              columnHeights[searchX][searchZ]=by;
            }
          }
 else           if (BlockUtils.isAnObstructingBlock(block,worldObj,bx,by,bz)) {
            visitList.add(new int[]{bx,by,bz});
          }
          if (visitList.size() > builder.blueprint.sizeZ * builder.blueprint.sizeX * 2) {
            return;
          }
        }
      }
    }
  }
}","/** 
 * Make the column visit list: called once per layer
 */
private void createColumnVisitList(){
  visitList.clear();
  Integer[][] columnHeights=new Integer[builder.blueprint.sizeX - 2][builder.blueprint.sizeZ - 2];
  boolean[][] blockedColumns=new boolean[builder.blueprint.sizeX - 2][builder.blueprint.sizeZ - 2];
  for (int searchY=yCoord + 3; searchY >= 0; --searchY) {
    int startX, endX, incX;
    if (searchY % 2 == 0) {
      startX=0;
      endX=builder.blueprint.sizeX - 2;
      incX=1;
    }
 else {
      startX=builder.blueprint.sizeX - 3;
      endX=-1;
      incX=-1;
    }
    for (int searchX=startX; searchX != endX; searchX+=incX) {
      int startZ, endZ, incZ;
      if (searchX % 2 == searchY % 2) {
        startZ=0;
        endZ=builder.blueprint.sizeZ - 2;
        incZ=1;
      }
 else {
        startZ=builder.blueprint.sizeZ - 3;
        endZ=-1;
        incZ=-1;
      }
      for (int searchZ=startZ; searchZ != endZ; searchZ+=incZ) {
        if (!blockedColumns[searchX][searchZ]) {
          Integer height=columnHeights[searchX][searchZ];
          int bx=box.xMin + searchX + 1, by=searchY, bz=box.zMin + searchZ + 1;
          if (height == null) {
            columnHeights[searchX][searchZ]=height=worldObj.getHeightValue(bx,bz);
          }
          if (height > 0 && height < by && worldObj.provider.dimensionId != -1) {
            continue;
          }
          Block block=worldObj.getBlock(bx,by,bz);
          if (!BlockUtils.canChangeBlock(block,worldObj,bx,by,bz)) {
            blockedColumns[searchX][searchZ]=true;
          }
 else           if (!BuildCraftAPI.isSoftBlock(worldObj,bx,by,bz)) {
            visitList.add(new int[]{bx,by,bz});
          }
          if (height == 0 && !worldObj.isAirBlock(bx,by,bz)) {
            columnHeights[searchX][searchZ]=by;
          }
          if (visitList.size() > builder.blueprint.sizeZ * builder.blueprint.sizeX * 2) {
            return;
          }
        }
      }
    }
  }
}",0.9234655215963627
156781,"public boolean findTarget(boolean doSet){
  if (worldObj.isRemote) {
    return false;
  }
  boolean columnVisitListIsUpdated=false;
  if (visitList.isEmpty()) {
    createColumnVisitList();
    columnVisitListIsUpdated=true;
  }
  if (!doSet) {
    return !visitList.isEmpty();
  }
  if (visitList.isEmpty()) {
    return false;
  }
  int[] nextTarget=visitList.removeFirst();
  if (!columnVisitListIsUpdated) {
    for (int y=nextTarget[1] + 1; y < yCoord + 3; y++) {
      Block block=worldObj.getBlock(nextTarget[0],y,nextTarget[2]);
      if (BlockUtils.isAnObstructingBlock(block,worldObj,nextTarget[0],y,nextTarget[2])) {
        createColumnVisitList();
        columnVisitListIsUpdated=true;
        nextTarget=null;
        break;
      }
    }
  }
  if (columnVisitListIsUpdated && nextTarget == null && !visitList.isEmpty()) {
    nextTarget=visitList.removeFirst();
  }
 else   if (columnVisitListIsUpdated && nextTarget == null) {
    return false;
  }
  setTarget(nextTarget[0],nextTarget[1] + 1,nextTarget[2]);
  return true;
}","public boolean findTarget(boolean doSet){
  if (worldObj.isRemote) {
    return false;
  }
  boolean columnVisitListIsUpdated=false;
  if (visitList.isEmpty()) {
    createColumnVisitList();
    columnVisitListIsUpdated=true;
  }
  if (!doSet) {
    return !visitList.isEmpty();
  }
  if (visitList.isEmpty()) {
    return false;
  }
  int[] nextTarget=visitList.removeFirst();
  if (!columnVisitListIsUpdated) {
    for (int y=nextTarget[1] + 1; y < yCoord + 3; y++) {
      Block block=worldObj.getBlock(nextTarget[0],y,nextTarget[2]);
      if (BlockUtils.isAnObstructingBlock(block,worldObj,nextTarget[0],y,nextTarget[2]) || !BuildCraftAPI.isSoftBlock(worldObj,nextTarget[0],y,nextTarget[2])) {
        createColumnVisitList();
        columnVisitListIsUpdated=true;
        nextTarget=null;
        break;
      }
    }
  }
  if (columnVisitListIsUpdated && nextTarget == null && !visitList.isEmpty()) {
    nextTarget=visitList.removeFirst();
  }
 else   if (columnVisitListIsUpdated && nextTarget == null) {
    return false;
  }
  setTarget(nextTarget[0],nextTarget[1] + 1,nextTarget[2]);
  return true;
}",0.6419294990723562
156782,"@SuppressWarnings(""String_Node_Str"") public void positionReached(){
  if (worldObj.isRemote) {
    return;
  }
  if (isQuarriableBlock(targetX,targetY - 1,targetZ)) {
    if (BuildCraftAPI.isSoftBlock(worldObj,targetX,targetY - 1,targetZ)) {
      miner=null;
      stage=Stage.IDLE;
      worldObj.setBlockToAir(targetX,targetY - 1,targetZ);
    }
 else {
      miner=new BlockMiner(worldObj,this,targetX,targetY - 1,targetZ);
      stage=Stage.DIGGING;
    }
  }
 else {
    stage=Stage.IDLE;
  }
}","@SuppressWarnings(""String_Node_Str"") public void positionReached(){
  if (worldObj.isRemote) {
    return;
  }
  if (isQuarriableBlock(targetX,targetY - 1,targetZ)) {
    miner=new BlockMiner(worldObj,this,targetX,targetY - 1,targetZ);
    stage=Stage.DIGGING;
  }
 else {
    stage=Stage.IDLE;
  }
}",0.7
156783,"private boolean isQuarriableBlock(int bx,int by,int bz){
  Block block=worldObj.getBlock(bx,by,bz);
  return BlockUtils.canChangeBlock(block,worldObj,bx,by,bz) && BlockUtils.isAnObstructingBlock(block,worldObj,bx,by,bz);
}","private boolean isQuarriableBlock(int bx,int by,int bz){
  Block block=worldObj.getBlock(bx,by,bz);
  return BlockUtils.canChangeBlock(block,worldObj,bx,by,bz) && !BuildCraftAPI.isSoftBlock(worldObj,bx,by,bz);
}",0.8545034642032333
156784,"public ArrayList<ItemStack> computeItemDrop(){
  ArrayList<ItemStack> result=new ArrayList<ItemStack>();
  for (  PipeWire pipeWire : PipeWire.VALUES) {
    if (wireSet[pipeWire.ordinal()]) {
      result.add(pipeWire.getStack());
    }
  }
  for (  ForgeDirection direction : ForgeDirection.VALID_DIRECTIONS) {
    if (container.hasPipePluggable(direction)) {
      for (      ItemStack stack : container.getPipePluggable(direction).getDropItems(container)) {
        result.add(stack);
      }
    }
  }
  return result;
}","public ArrayList<ItemStack> computeItemDrop(){
  ArrayList<ItemStack> result=new ArrayList<ItemStack>();
  for (  PipeWire pipeWire : PipeWire.VALUES) {
    if (wireSet[pipeWire.ordinal()]) {
      result.add(pipeWire.getStack());
    }
  }
  for (  Gate gate : gates) {
    if (gate != null) {
      result.add(gate.getGateItem());
    }
  }
  for (  ForgeDirection direction : ForgeDirection.VALID_DIRECTIONS) {
    if (container.hasPipePluggable(direction)) {
      for (      ItemStack stack : container.getPipePluggable(direction).getDropItems(container)) {
        result.add(stack);
      }
    }
  }
  return result;
}",0.9113043478260868
156785,"/** 
 * Shifts the coordinates around effectively rotating something. Zero state is DOWN then -> NORTH -> WEST Note - To obtain Position, do a mirrorY() before rotating
 * @param targetArray the array that should be rotated
 */
public static void rotate(float[][] targetArray){
  for (int i=0; i < 2; i++) {
    float temp=targetArray[2][i];
    targetArray[2][i]=targetArray[1][i];
    targetArray[1][i]=targetArray[0][i];
    targetArray[0][i]=temp;
  }
}","/** 
 * Shifts the coordinates around effectively rotating something. Zero state is DOWN then -&gt; NORTH -&gt; WEST Note - To obtain Position, do a mirrorY() before rotating
 * @param targetArray the array that should be rotated
 */
public static void rotate(float[][] targetArray){
  for (int i=0; i < 2; i++) {
    float temp=targetArray[2][i];
    targetArray[2][i]=targetArray[1][i];
    targetArray[1][i]=targetArray[0][i];
    targetArray[0][i]=temp;
  }
}",0.9891304347826086
156786,"@Override public void onEntityCollidedWithBlock(World world,int x,int y,int z,Entity entity){
  if (!dense || entity == null)   return;
  entity.motionY=Math.min(0.0,entity.motionY);
  if (entity.motionY < -0.05) {
    entity.motionY*=0.05;
  }
  entity.motionX=Math.max(-0.05,Math.min(0.05,entity.motionX * 0.05));
  entity.motionY-=0.05;
  entity.motionZ=Math.max(-0.05,Math.min(0.05,entity.motionZ * 0.05));
}","@Override public void onEntityCollidedWithBlock(World world,int x,int y,int z,Entity entity){
  if (!dense || entity == null) {
    return;
  }
  entity.motionY=Math.min(0.0,entity.motionY);
  if (entity.motionY < -0.05) {
    entity.motionY*=0.05;
  }
  entity.motionX=Math.max(-0.05,Math.min(0.05,entity.motionX * 0.05));
  entity.motionY-=0.05;
  entity.motionZ=Math.max(-0.05,Math.min(0.05,entity.motionZ * 0.05));
}",0.9903846153846154
156787,"public ArrayList<ItemStack> computeItemDrop(){
  ArrayList<ItemStack> result=new ArrayList<ItemStack>();
  for (  PipeWire pipeWire : PipeWire.VALUES) {
    if (wireSet[pipeWire.ordinal()]) {
      result.add(pipeWire.getStack());
    }
  }
  for (  Gate gate : gates) {
    if (gate != null) {
      result.add(gate.getGateItem());
    }
  }
  for (  ForgeDirection direction : ForgeDirection.VALID_DIRECTIONS) {
    if (container.hasPipePluggable(direction)) {
      for (      ItemStack stack : container.getPipePluggable(direction).getDropItems(container)) {
        result.add(stack);
      }
    }
  }
  return result;
}","public ArrayList<ItemStack> computeItemDrop(){
  ArrayList<ItemStack> result=new ArrayList<ItemStack>();
  for (  PipeWire pipeWire : PipeWire.VALUES) {
    if (wireSet[pipeWire.ordinal()]) {
      result.add(pipeWire.getStack());
    }
  }
  for (  ForgeDirection direction : ForgeDirection.VALID_DIRECTIONS) {
    if (container.hasPipePluggable(direction)) {
      for (      ItemStack stack : container.getPipePluggable(direction).getDropItems(container)) {
        result.add(stack);
      }
    }
  }
  return result;
}",0.9113043478260868
156788,"@Override public void rotateLeft(IBuilderContext context){
  int status=meta - (meta & 7);
  meta-=status;
  super.rotateLeft(context);
  meta+=status;
}","@Override public void rotateLeft(IBuilderContext context){
  int status=meta & 8;
  meta-=status;
  super.rotateLeft(context);
  meta+=status;
}",0.9629629629629628
156789,"/** 
 * Make the column visit list: called once per layer
 */
private void createColumnVisitList(){
  visitList.clear();
  Integer[][] columnHeights=new Integer[builder.blueprint.sizeX - 2][builder.blueprint.sizeZ - 2];
  boolean[][] blockedColumns=new boolean[builder.blueprint.sizeX - 2][builder.blueprint.sizeZ - 2];
  for (int searchY=yCoord + 3; searchY >= 0; --searchY) {
    int startX, endX, incX;
    if (searchY % 2 == 0) {
      startX=0;
      endX=builder.blueprint.sizeX - 2;
      incX=1;
    }
 else {
      startX=builder.blueprint.sizeX - 3;
      endX=-1;
      incX=-1;
    }
    for (int searchX=startX; searchX != endX; searchX+=incX) {
      int startZ, endZ, incZ;
      if (searchX % 2 == searchY % 2) {
        startZ=0;
        endZ=builder.blueprint.sizeZ - 2;
        incZ=1;
      }
 else {
        startZ=builder.blueprint.sizeZ - 3;
        endZ=-1;
        incZ=-1;
      }
      for (int searchZ=startZ; searchZ != endZ; searchZ+=incZ) {
        if (!blockedColumns[searchX][searchZ]) {
          Integer height=columnHeights[searchX][searchZ];
          int bx=box.xMin + searchX + 1, by=searchY, bz=box.zMin + searchZ + 1;
          if (height == null) {
            columnHeights[searchX][searchZ]=height=worldObj.getHeightValue(bx,bz);
          }
          if (height > 0 && height < by && worldObj.provider.dimensionId != -1) {
            continue;
          }
          Block block=worldObj.getBlock(bx,by,bz);
          if (!BlockUtils.canChangeBlock(block,worldObj,bx,by,bz)) {
            blockedColumns[searchX][searchZ]=true;
          }
 else           if (!BuildCraftAPI.isSoftBlock(worldObj,bx,by,bz)) {
            visitList.add(new int[]{bx,by,bz});
          }
          if (height == 0 && !worldObj.isAirBlock(bx,by,bz)) {
            columnHeights[searchX][searchZ]=by;
          }
          if (visitList.size() > builder.blueprint.sizeZ * builder.blueprint.sizeX * 2) {
            return;
          }
        }
      }
    }
  }
}","/** 
 * Make the column visit list: called once per layer
 */
private void createColumnVisitList(){
  visitList.clear();
  Integer[][] columnHeights=new Integer[builder.blueprint.sizeX - 2][builder.blueprint.sizeZ - 2];
  boolean[][] blockedColumns=new boolean[builder.blueprint.sizeX - 2][builder.blueprint.sizeZ - 2];
  for (int searchY=yCoord + 3; searchY >= 0; --searchY) {
    int startX, endX, incX;
    if (searchY % 2 == 0) {
      startX=0;
      endX=builder.blueprint.sizeX - 2;
      incX=1;
    }
 else {
      startX=builder.blueprint.sizeX - 3;
      endX=-1;
      incX=-1;
    }
    for (int searchX=startX; searchX != endX; searchX+=incX) {
      int startZ, endZ, incZ;
      if (searchX % 2 == searchY % 2) {
        startZ=0;
        endZ=builder.blueprint.sizeZ - 2;
        incZ=1;
      }
 else {
        startZ=builder.blueprint.sizeZ - 3;
        endZ=-1;
        incZ=-1;
      }
      for (int searchZ=startZ; searchZ != endZ; searchZ+=incZ) {
        if (!blockedColumns[searchX][searchZ]) {
          Integer height=columnHeights[searchX][searchZ];
          int bx=box.xMin + searchX + 1, by=searchY, bz=box.zMin + searchZ + 1;
          if (height == null) {
            columnHeights[searchX][searchZ]=height=worldObj.getHeightValue(bx,bz);
          }
          if (height > 0 && height < by && worldObj.provider.dimensionId != -1) {
            continue;
          }
          Block block=worldObj.getBlock(bx,by,bz);
          if (!BlockUtils.canChangeBlock(block,worldObj,bx,by,bz)) {
            blockedColumns[searchX][searchZ]=true;
            if (height == 0) {
              columnHeights[searchX][searchZ]=by;
            }
          }
 else           if (BlockUtils.isAnObstructingBlock(block,worldObj,bx,by,bz)) {
            visitList.add(new int[]{bx,by,bz});
          }
          if (visitList.size() > builder.blueprint.sizeZ * builder.blueprint.sizeX * 2) {
            return;
          }
        }
      }
    }
  }
}",0.9325587269512504
156790,"public boolean findTarget(boolean doSet){
  if (worldObj.isRemote) {
    return false;
  }
  boolean columnVisitListIsUpdated=false;
  if (visitList.isEmpty()) {
    createColumnVisitList();
    columnVisitListIsUpdated=true;
  }
  if (!doSet) {
    return !visitList.isEmpty();
  }
  if (visitList.isEmpty()) {
    return false;
  }
  int[] nextTarget=visitList.removeFirst();
  if (!columnVisitListIsUpdated) {
    for (int y=nextTarget[1] + 1; y < yCoord + 3; y++) {
      Block block=worldObj.getBlock(nextTarget[0],y,nextTarget[2]);
      if (BlockUtils.isAnObstructingBlock(block,worldObj,nextTarget[0],y,nextTarget[2]) || !BuildCraftAPI.isSoftBlock(worldObj,nextTarget[0],y,nextTarget[2])) {
        createColumnVisitList();
        columnVisitListIsUpdated=true;
        nextTarget=null;
        break;
      }
    }
  }
  if (columnVisitListIsUpdated && nextTarget == null && !visitList.isEmpty()) {
    nextTarget=visitList.removeFirst();
  }
 else   if (columnVisitListIsUpdated && nextTarget == null) {
    return false;
  }
  setTarget(nextTarget[0],nextTarget[1] + 1,nextTarget[2]);
  return true;
}","public boolean findTarget(boolean doSet){
  if (worldObj.isRemote) {
    return false;
  }
  boolean columnVisitListIsUpdated=false;
  if (visitList.isEmpty()) {
    createColumnVisitList();
    columnVisitListIsUpdated=true;
  }
  if (!doSet) {
    return !visitList.isEmpty();
  }
  if (visitList.isEmpty()) {
    return false;
  }
  int[] nextTarget=visitList.removeFirst();
  if (!columnVisitListIsUpdated) {
    for (int y=nextTarget[1] + 1; y < yCoord + 3; y++) {
      Block block=worldObj.getBlock(nextTarget[0],y,nextTarget[2]);
      if (BlockUtils.isAnObstructingBlock(block,worldObj,nextTarget[0],y,nextTarget[2])) {
        createColumnVisitList();
        columnVisitListIsUpdated=true;
        nextTarget=null;
        break;
      }
    }
  }
  if (columnVisitListIsUpdated && nextTarget == null && !visitList.isEmpty()) {
    nextTarget=visitList.removeFirst();
  }
 else   if (columnVisitListIsUpdated && nextTarget == null) {
    return false;
  }
  setTarget(nextTarget[0],nextTarget[1] + 1,nextTarget[2]);
  return true;
}",0.6103896103896104
156791,"@SuppressWarnings(""String_Node_Str"") public void positionReached(){
  if (worldObj.isRemote) {
    return;
  }
  if (isQuarriableBlock(targetX,targetY - 1,targetZ)) {
    miner=new BlockMiner(worldObj,this,targetX,targetY - 1,targetZ);
    stage=Stage.DIGGING;
  }
 else {
    stage=Stage.IDLE;
  }
}","@SuppressWarnings(""String_Node_Str"") public void positionReached(){
  if (worldObj.isRemote) {
    return;
  }
  if (isQuarriableBlock(targetX,targetY - 1,targetZ)) {
    if (BuildCraftAPI.isSoftBlock(worldObj,targetX,targetY - 1,targetZ)) {
      miner=null;
      stage=Stage.IDLE;
      worldObj.setBlockToAir(targetX,targetY - 1,targetZ);
    }
 else {
      miner=new BlockMiner(worldObj,this,targetX,targetY - 1,targetZ);
      stage=Stage.DIGGING;
    }
  }
 else {
    stage=Stage.IDLE;
  }
}",0.75
156792,"private boolean isQuarriableBlock(int bx,int by,int bz){
  Block block=worldObj.getBlock(bx,by,bz);
  return BlockUtils.canChangeBlock(block,worldObj,bx,by,bz) && !BuildCraftAPI.isSoftBlock(worldObj,bx,by,bz);
}","private boolean isQuarriableBlock(int bx,int by,int bz){
  Block block=worldObj.getBlock(bx,by,bz);
  return BlockUtils.canChangeBlock(block,worldObj,bx,by,bz) && BlockUtils.isAnObstructingBlock(block,worldObj,bx,by,bz);
}",0.8545034642032333
156793,"public ArrayList<ItemStack> computeItemDrop(){
  ArrayList<ItemStack> result=new ArrayList<ItemStack>();
  for (  PipeWire pipeWire : PipeWire.VALUES) {
    if (wireSet[pipeWire.ordinal()]) {
      result.add(pipeWire.getStack());
    }
  }
  for (  Gate gate : gates) {
    if (gate != null) {
      result.add(gate.getGateItem());
    }
  }
  for (  ForgeDirection direction : ForgeDirection.VALID_DIRECTIONS) {
    if (container.hasPipePluggable(direction)) {
      for (      ItemStack stack : container.getPipePluggable(direction).getDropItems(container)) {
        result.add(stack);
      }
    }
  }
  return result;
}","public ArrayList<ItemStack> computeItemDrop(){
  ArrayList<ItemStack> result=new ArrayList<ItemStack>();
  for (  PipeWire pipeWire : PipeWire.VALUES) {
    if (wireSet[pipeWire.ordinal()]) {
      result.add(pipeWire.getStack());
    }
  }
  for (  ForgeDirection direction : ForgeDirection.VALID_DIRECTIONS) {
    if (container.hasPipePluggable(direction)) {
      for (      ItemStack stack : container.getPipePluggable(direction).getDropItems(container)) {
        result.add(stack);
      }
    }
  }
  return result;
}",0.9113043478260868
156794,"private boolean addOrStripPipePluggable(World world,int x,int y,int z,ItemStack stack,EntityPlayer player,ForgeDirection side,Pipe<?> pipe){
  RaytraceResult rayTraceResult=doRayTrace(world,x,y,z,player);
  ForgeDirection pSide=rayTraceResult.sideHit;
  if (pSide == ForgeDirection.UNKNOWN || pSide == null) {
    pSide=side;
  }
  IPipePluggableItem pluggableItem=(IPipePluggableItem)stack.getItem();
  PipePluggable pluggable=pluggableItem.createPipePluggable(pipe,rayTraceResult.sideHit,stack);
  if (player.isSneaking()) {
    if (pipe.container.hasPipePluggable(pSide) && rayTraceResult != null && rayTraceResult.hitPart == Part.Pluggable && pluggable.getClass().isInstance(pipe.container.getPipePluggable(pSide))) {
      return pipe.container.dropSideItems(pSide);
    }
  }
  if (rayTraceResult != null && rayTraceResult.hitPart == Part.Pipe) {
    if (pluggable == null) {
      return false;
    }
    if (!pipe.container.hasPipePluggable(pSide)) {
      pipe.container.setPluggable(pSide,pluggable);
      if (!player.capabilities.isCreativeMode) {
        stack.stackSize--;
      }
      return true;
    }
  }
  return false;
}","private boolean addOrStripPipePluggable(World world,int x,int y,int z,ItemStack stack,EntityPlayer player,ForgeDirection side,Pipe<?> pipe){
  RaytraceResult rayTraceResult=doRayTrace(world,x,y,z,player);
  ForgeDirection placementSide=rayTraceResult != null && rayTraceResult.sideHit != ForgeDirection.UNKNOWN ? rayTraceResult.sideHit : side;
  IPipePluggableItem pluggableItem=(IPipePluggableItem)stack.getItem();
  PipePluggable pluggable=pluggableItem.createPipePluggable(pipe,placementSide,stack);
  if (pluggable == null) {
    return false;
  }
  if (player.isSneaking()) {
    if (pipe.container.hasPipePluggable(side) && rayTraceResult != null && rayTraceResult.hitPart == Part.Pluggable && pluggable.getClass().isInstance(pipe.container.getPipePluggable(side))) {
      return pipe.container.dropSideItems(side);
    }
  }
  if (rayTraceResult != null && rayTraceResult.hitPart == Part.Pipe) {
    if (!pipe.container.hasPipePluggable(placementSide)) {
      pipe.container.setPluggable(placementSide,pluggable);
      if (!player.capabilities.isCreativeMode) {
        stack.stackSize--;
      }
      return true;
    }
  }
  return false;
}",0.6451612903225806
156795,"public void addGateExpansion(IGateExpansion expansion){
  if (!expansions.containsKey(expansion)) {
    expansions.put(expansion,expansion.makeController(pipe.container));
  }
}","public void addGateExpansion(IGateExpansion expansion){
  if (!expansions.containsKey(expansion)) {
    expansions.put(expansion,expansion.makeController(pipe != null ? pipe.container : null));
  }
}",0.9414893617021276
156796,"@Override public void afterStateUpdated(byte stateId){
  if (!worldObj.isRemote) {
    return;
  }
switch (stateId) {
case 0:
    if (pipe == null && coreState.pipeId != 0) {
      initialize(BlockGenericPipe.createPipe((Item)Item.itemRegistry.getObjectById(coreState.pipeId)));
    }
  if (pipe == null) {
    break;
  }
worldObj.markBlockRangeForRenderUpdate(xCoord,yCoord,zCoord,xCoord,yCoord,zCoord);
break;
case 1:
{
if (renderState.needsRenderUpdate()) {
worldObj.markBlockRangeForRenderUpdate(xCoord,yCoord,zCoord,xCoord,yCoord,zCoord);
renderState.clean();
}
break;
}
case 2:
{
for (int i=0; i < ForgeDirection.VALID_DIRECTIONS.length; i++) {
final PipePluggable pluggable=getPipePluggable(ForgeDirection.getOrientation(i));
if (pluggable != null && pluggable instanceof GatePluggable) {
final GatePluggable gatePluggable=(GatePluggable)pluggable;
Gate gate=pipe.gates[i];
if (gate == null || gate.logic != gatePluggable.logic || gate.material != gatePluggable.material) {
  pipe.gates[i]=GateFactory.makeGate(pipe,gatePluggable.material,gatePluggable.logic,ForgeDirection.getOrientation(i));
}
}
 else {
pipe.gates[i]=null;
}
}
syncGateExpansions();
worldObj.markBlockRangeForRenderUpdate(xCoord,yCoord,zCoord,xCoord,yCoord,zCoord);
sideProperties.pluggables=pluggableState.getPluggables();
break;
}
}
}","@Override public void afterStateUpdated(byte stateId){
  if (!worldObj.isRemote) {
    return;
  }
switch (stateId) {
case 0:
    if (pipe == null && coreState.pipeId != 0) {
      initialize(BlockGenericPipe.createPipe((Item)Item.itemRegistry.getObjectById(coreState.pipeId)));
    }
  if (pipe == null) {
    break;
  }
worldObj.markBlockRangeForRenderUpdate(xCoord,yCoord,zCoord,xCoord,yCoord,zCoord);
break;
case 1:
{
if (renderState.needsRenderUpdate()) {
worldObj.markBlockRangeForRenderUpdate(xCoord,yCoord,zCoord,xCoord,yCoord,zCoord);
renderState.clean();
}
break;
}
case 2:
{
worldObj.markBlockRangeForRenderUpdate(xCoord,yCoord,zCoord,xCoord,yCoord,zCoord);
sideProperties.pluggables=pluggableState.getPluggables();
for (int i=0; i < ForgeDirection.VALID_DIRECTIONS.length; i++) {
final PipePluggable pluggable=getPipePluggable(ForgeDirection.getOrientation(i));
if (pluggable != null && pluggable instanceof GatePluggable) {
final GatePluggable gatePluggable=(GatePluggable)pluggable;
Gate gate=pipe.gates[i];
if (gate == null || gate.logic != gatePluggable.getLogic() || gate.material != gatePluggable.getMaterial()) {
  pipe.gates[i]=GateFactory.makeGate(pipe,gatePluggable.getMaterial(),gatePluggable.getLogic(),ForgeDirection.getOrientation(i));
}
}
 else {
pipe.gates[i]=null;
}
}
syncGateExpansions();
break;
}
}
}",0.81089258698941
156797,"private void syncGateExpansions(){
  resyncGateExpansions=false;
  for (int i=0; i < ForgeDirection.VALID_DIRECTIONS.length; i++) {
    Gate gate=pipe.gates[i];
    if (gate == null) {
      continue;
    }
    GatePluggable gatePluggable=(GatePluggable)sideProperties.pluggables[i];
    if (gatePluggable.expansions.length > 0) {
      for (      IGateExpansion expansion : gatePluggable.expansions) {
        if (expansion != null) {
          if (!gate.expansions.containsKey(expansion)) {
            gate.addGateExpansion(expansion);
          }
        }
 else {
          resyncGateExpansions=true;
        }
      }
    }
  }
}","private void syncGateExpansions(){
  resyncGateExpansions=false;
  for (int i=0; i < ForgeDirection.VALID_DIRECTIONS.length; i++) {
    Gate gate=pipe.gates[i];
    if (gate == null) {
      continue;
    }
    GatePluggable gatePluggable=(GatePluggable)sideProperties.pluggables[i];
    if (gatePluggable.getExpansions().length > 0) {
      for (      IGateExpansion expansion : gatePluggable.getExpansions()) {
        if (expansion != null) {
          if (!gate.expansions.containsKey(expansion)) {
            gate.addGateExpansion(expansion);
          }
        }
 else {
          resyncGateExpansions=true;
        }
      }
    }
  }
}",0.9609375
156798,"@Override public void updateEntity(){
  if (attachPluggables) {
    attachPluggables=false;
    for (int i=0; i < ForgeDirection.VALID_DIRECTIONS.length; i++) {
      if (sideProperties.pluggables[i] != null) {
        sideProperties.pluggables[i].onAttachedPipe(this,ForgeDirection.getOrientation(i));
        pipe.eventBus.registerHandler(sideProperties.pluggables[i]);
      }
    }
  }
  if (!worldObj.isRemote) {
    if (deletePipe) {
      worldObj.setBlockToAir(xCoord,yCoord,zCoord);
    }
    if (pipe == null) {
      return;
    }
    if (!initialized) {
      initialize(pipe);
    }
  }
  if (!BlockGenericPipe.isValid(pipe)) {
    return;
  }
  pipe.updateEntity();
  for (  ForgeDirection direction : ForgeDirection.VALID_DIRECTIONS) {
    PipePluggable p=getPipePluggable(direction);
    if (p != null) {
      p.update(this,direction);
    }
  }
  if (worldObj.isRemote) {
    if (resyncGateExpansions) {
      syncGateExpansions();
    }
    return;
  }
  if (blockNeighborChange) {
    computeConnections();
    pipe.onNeighborBlockChange(0);
    blockNeighborChange=false;
    refreshRenderState=true;
  }
  if (refreshRenderState) {
    refreshRenderState();
    refreshRenderState=false;
  }
  if (sendClientUpdate) {
    sendClientUpdate=false;
    if (worldObj instanceof WorldServer) {
      WorldServer world=(WorldServer)worldObj;
      BuildCraftPacket updatePacket=getBCDescriptionPacket();
      for (      Object o : world.playerEntities) {
        EntityPlayerMP player=(EntityPlayerMP)o;
        if (world.getPlayerManager().isPlayerWatchingChunk(player,xCoord >> 4,zCoord >> 4)) {
          BuildCraftCore.instance.sendToPlayer(player,updatePacket);
        }
      }
    }
  }
}","@Override public void updateEntity(){
  if (attachPluggables) {
    attachPluggables=false;
    for (int i=0; i < ForgeDirection.VALID_DIRECTIONS.length; i++) {
      if (sideProperties.pluggables[i] != null) {
        pipe.eventBus.registerHandler(sideProperties.pluggables[i]);
        sideProperties.pluggables[i].onAttachedPipe(this,ForgeDirection.getOrientation(i));
      }
    }
    notifyBlockChanged();
  }
  if (!worldObj.isRemote) {
    if (deletePipe) {
      worldObj.setBlockToAir(xCoord,yCoord,zCoord);
    }
    if (pipe == null) {
      return;
    }
    if (!initialized) {
      initialize(pipe);
    }
  }
  if (!BlockGenericPipe.isValid(pipe)) {
    return;
  }
  pipe.updateEntity();
  for (  ForgeDirection direction : ForgeDirection.VALID_DIRECTIONS) {
    PipePluggable p=getPipePluggable(direction);
    if (p != null) {
      p.update(this,direction);
    }
  }
  if (worldObj.isRemote) {
    if (resyncGateExpansions) {
      syncGateExpansions();
    }
    return;
  }
  if (blockNeighborChange) {
    computeConnections();
    pipe.onNeighborBlockChange(0);
    blockNeighborChange=false;
    refreshRenderState=true;
  }
  if (refreshRenderState) {
    refreshRenderState();
    refreshRenderState=false;
  }
  if (sendClientUpdate) {
    sendClientUpdate=false;
    if (worldObj instanceof WorldServer) {
      WorldServer world=(WorldServer)worldObj;
      BuildCraftPacket updatePacket=getBCDescriptionPacket();
      for (      Object o : world.playerEntities) {
        EntityPlayerMP player=(EntityPlayerMP)o;
        if (world.getPlayerManager().isPlayerWatchingChunk(player,xCoord >> 4,zCoord >> 4)) {
          BuildCraftCore.instance.sendToPlayer(player,updatePacket);
        }
      }
    }
  }
}",0.9490150637311704
156799,"@Override public void writeData(ByteBuf buf){
  buf.writeByte(material.ordinal());
  buf.writeByte(logic.ordinal());
  buf.writeBoolean(realGate.isGateActive());
  buf.writeBoolean(realGate.isGatePulsing());
  final int expansionsSize=expansions.length;
  buf.writeInt(expansionsSize);
  for (  IGateExpansion expansion : expansions) {
    buf.writeShort(GateExpansions.getExpansionID(expansion));
  }
}","@Override public void writeData(ByteBuf buf){
  buf.writeByte(material.ordinal());
  buf.writeByte(logic.ordinal());
  buf.writeBoolean(realGate != null ? realGate.isGateActive() : false);
  buf.writeBoolean(realGate != null ? realGate.isGatePulsing() : false);
  final int expansionsSize=expansions.length;
  buf.writeInt(expansionsSize);
  for (  IGateExpansion expansion : expansions) {
    buf.writeShort(GateExpansions.getExpansionID(expansion));
  }
}",0.8860465116279069
156800,"@Override public void onAttachedPipe(IPipeContainer pipe,ForgeDirection direction){
  TileGenericPipe pipeReal=(TileGenericPipe)pipe;
  if (!pipeReal.getWorld().isRemote) {
    Gate gate=pipeReal.pipe.gates[direction.ordinal()];
    if (gate == null || gate.material != material || gate.logic != logic) {
      pipeReal.pipe.gates[direction.ordinal()]=GateFactory.makeGate(pipeReal.pipe,material,logic,direction);
      pipeReal.scheduleRenderUpdate();
    }
    this.realGate=pipeReal.pipe.gates[direction.ordinal()];
  }
}","@Override public void onAttachedPipe(IPipeContainer pipe,ForgeDirection direction){
  TileGenericPipe pipeReal=(TileGenericPipe)pipe;
  if (!pipeReal.getWorld().isRemote) {
    if (instantiatedGate != null) {
      pipeReal.pipe.gates[direction.ordinal()]=instantiatedGate;
    }
 else {
      Gate gate=pipeReal.pipe.gates[direction.ordinal()];
      if (gate == null || gate.material != material || gate.logic != logic) {
        pipeReal.pipe.gates[direction.ordinal()]=GateFactory.makeGate(pipeReal.pipe,material,logic,direction);
        for (        IGateExpansion expansion : expansions) {
          pipeReal.pipe.gates[direction.ordinal()].addGateExpansion(expansion);
        }
        pipeReal.scheduleRenderUpdate();
      }
    }
    realGate=pipeReal.pipe.gates[direction.ordinal()];
  }
}",0.7828054298642534
156801,"public GatePluggable(Gate gate){
  this.material=gate.material;
  this.logic=gate.logic;
  Set<IGateExpansion> gateExpansions=gate.expansions.keySet();
  this.expansions=gateExpansions.toArray(new IGateExpansion[gateExpansions.size()]);
}","public GatePluggable(Gate gate){
  instantiatedGate=gate;
  initFromGate(gate);
}",0.3761755485893417
156802,"public static void start(){
  for (  Fluid f : FluidRegistry.getRegisteredFluids().values()) {
    SchematicRegistry.INSTANCE.registerSchematicBlock(f.getBlock(),SchematicFluid.class,new FluidStack(f,1000));
  }
  Iterator i=Block.blockRegistry.iterator();
  while (i.hasNext()) {
    Block block=(Block)i.next();
    if (block == null || block == Blocks.air) {
      continue;
    }
    for (int meta=0; meta < 16; meta++) {
      if (!SchematicRegistry.INSTANCE.isSupported(block,meta)) {
        try {
          if (block.hasTileEntity(meta)) {
            SchematicRegistry.INSTANCE.registerSchematicBlock(block,meta,SchematicTileCreative.class);
            continue;
          }
          boolean creativeOnly=false;
          try {
            if (creativeOnly) {
              SchematicRegistry.INSTANCE.registerSchematicBlock(block,meta,SchematicBlockCreative.class);
            }
 else {
              SchematicRegistry.INSTANCE.registerSchematicBlock(block,meta,SchematicBlock.class);
            }
          }
 catch (          Exception e) {
            e.printStackTrace();
          }
        }
 catch (        Exception e) {
        }
      }
    }
  }
}","public static void start(){
  Iterator i=Block.blockRegistry.iterator();
  while (i.hasNext()) {
    Block block=(Block)i.next();
    if (block == null || block == Blocks.air) {
      continue;
    }
    for (int meta=0; meta < 16; meta++) {
      if (!SchematicRegistry.INSTANCE.isSupported(block,meta)) {
        try {
          if (block.hasTileEntity(meta)) {
            SchematicRegistry.INSTANCE.registerSchematicBlock(block,meta,SchematicTileCreative.class);
            continue;
          }
          boolean creativeOnly=false;
          try {
            if (creativeOnly) {
              SchematicRegistry.INSTANCE.registerSchematicBlock(block,meta,SchematicBlockCreative.class);
            }
 else {
              if (block instanceof IFluidBlock) {
                IFluidBlock fblock=(IFluidBlock)block;
                if (fblock.getFluid() != null) {
                  SchematicRegistry.INSTANCE.registerSchematicBlock(block,meta,SchematicFluid.class,new FluidStack(fblock.getFluid(),1000));
                }
              }
 else {
                SchematicRegistry.INSTANCE.registerSchematicBlock(block,meta,SchematicBlock.class);
              }
            }
          }
 catch (          Exception e) {
            e.printStackTrace();
          }
        }
 catch (        Exception e) {
        }
      }
    }
  }
}",0.2968563469956227
156803,"public void registerSchematicBlock(Block block,int meta,Class<? extends Schematic> clazz,Object... params){
  if (block == null || Block.blockRegistry.getNameForObject(block) == null || ""String_Node_Str"".equals(Block.blockRegistry.getNameForObject(block))) {
    BCLog.logger.warn(""String_Node_Str"");
    return;
  }
  if (schematicBlocks.containsKey(toStringKey(block,meta))) {
    throw new RuntimeException(""String_Node_Str"" + Block.blockRegistry.getNameForObject(block) + ""String_Node_Str"");
  }
  schematicBlocks.put(toStringKey(block,meta),new SchematicConstructor(clazz,params));
}","public void registerSchematicBlock(Block block,int meta,Class<? extends Schematic> clazz,Object... params){
  if (block == null || Block.blockRegistry.getNameForObject(block) == null || ""String_Node_Str"".equals(Block.blockRegistry.getNameForObject(block))) {
    BCLog.logger.warn(""String_Node_Str"" + (block != null ? block.getClass().getName() : ""String_Node_Str"") + ""String_Node_Str"");
    return;
  }
  if (schematicBlocks.containsKey(toStringKey(block,meta))) {
    throw new RuntimeException(""String_Node_Str"" + Block.blockRegistry.getNameForObject(block) + ""String_Node_Str"");
  }
  schematicBlocks.put(toStringKey(block,meta),new SchematicConstructor(clazz,params));
}",0.9311163895486936
156804,"public BlockSpring(){
  super(Material.rock);
  setBlockUnbreakable();
  setResistance(6000000.0F);
  disableStats();
  setTickRandomly(true);
  setCreativeTab(CreativeTabBuildCraft.BLOCKS.get());
}","public BlockSpring(){
  super(Material.rock);
  setBlockUnbreakable();
  setResistance(6000000.0F);
  setStepSound(soundTypeStone);
  disableStats();
  setTickRandomly(true);
  setCreativeTab(CreativeTabBuildCraft.BLOCKS.get());
}",0.9252336448598132
156805,"public BptBuilderBase nextBuilder(){
  if (!returnedThis) {
    blueprint.adjustToWorld(world,x,y,x,dir);
    returnedThis=true;
    BptBuilderBase builder;
    if (blueprint instanceof Blueprint) {
      builder=new BptBuilderBlueprint((Blueprint)blueprint,world,x,y,z);
    }
 else     if (blueprint instanceof Template) {
      builder=new BptBuilderTemplate(blueprint,world,x,y,z);
    }
 else {
      return null;
    }
    box.initialize(builder);
    return builder;
  }
  blueprint=null;
  if (current != null) {
    BptBuilderBase builder=current.nextBuilder();
    if (builder != null) {
      return builder;
    }
  }
  if (nextSubBlueprint >= subBlueprints.size()) {
    return null;
  }
  NBTTagCompound nbt=subBlueprints.get(nextSubBlueprint);
  BlueprintBase bpt=BlueprintBase.loadBluePrint(nbt.getCompoundTag(""String_Node_Str""));
  int nx=box.xMin + nbt.getInteger(""String_Node_Str"");
  int ny=box.yMin + nbt.getInteger(""String_Node_Str"");
  int nz=box.zMin + nbt.getInteger(""String_Node_Str"");
  ForgeDirection nbtDir=ForgeDirection.values()[nbt.getByte(""String_Node_Str"")];
  current=new RecursiveBlueprintBuilder(bpt,world,nx,ny,nz,nbtDir);
  nextSubBlueprint++;
  return current.nextBuilder();
}","public BptBuilderBase nextBuilder(){
  if (!returnedThis) {
    blueprint.adjustToWorld(world,x,y,z,dir);
    returnedThis=true;
    BptBuilderBase builder;
    if (blueprint instanceof Blueprint) {
      builder=new BptBuilderBlueprint((Blueprint)blueprint,world,x,y,z);
    }
 else     if (blueprint instanceof Template) {
      builder=new BptBuilderTemplate(blueprint,world,x,y,z);
    }
 else {
      return null;
    }
    box.initialize(builder);
    return builder;
  }
  blueprint=null;
  if (current != null) {
    BptBuilderBase builder=current.nextBuilder();
    if (builder != null) {
      return builder;
    }
  }
  if (nextSubBlueprint >= subBlueprints.size()) {
    return null;
  }
  NBTTagCompound nbt=subBlueprints.get(nextSubBlueprint);
  BlueprintBase bpt=BlueprintBase.loadBluePrint(nbt.getCompoundTag(""String_Node_Str""));
  int nx=box.xMin + nbt.getInteger(""String_Node_Str"");
  int ny=box.yMin + nbt.getInteger(""String_Node_Str"");
  int nz=box.zMin + nbt.getInteger(""String_Node_Str"");
  ForgeDirection nbtDir=ForgeDirection.values()[nbt.getByte(""String_Node_Str"")];
  current=new RecursiveBlueprintBuilder(bpt,world,nx,ny,nz,nbtDir);
  nextSubBlueprint++;
  return current.nextBuilder();
}",0.9991776315789472
156806,"private WeakReference<EntityPlayer> createNewPlayer(WorldServer world,int x,int y,int z){
  EntityPlayer player=FakePlayerFactory.get(world,BuildCraftCore.gameProfile);
  player.posY=y;
  player.posZ=z;
  return new WeakReference<EntityPlayer>(player);
}","private WeakReference<EntityPlayer> createNewPlayer(WorldServer world,int x,int y,int z){
  EntityPlayer player=FakePlayerFactory.get(world,BuildCraftCore.gameProfile);
  player.posX=x;
  player.posY=y;
  player.posZ=z;
  return new WeakReference<EntityPlayer>(player);
}",0.9676190476190476
156807,"@Override public boolean get(IBlockAccess blockAccess,Block block,int meta,int x,int y,int z){
  if (block == null) {
    return false;
  }
 else {
    ItemStack stack=new ItemStack(block);
    if (stack.getItem() != null) {
      for (      int id : OreDictionary.getOreIDs(stack)) {
        if (id == leavesId) {
          return true;
        }
      }
    }
  }
  return false;
}","@Override public boolean get(IBlockAccess blockAccess,Block block,int meta,int x,int y,int z){
  if (block == null) {
    return false;
  }
 else {
    ItemStack stack=new ItemStack(block,1,meta);
    if (stack.getItem() != null) {
      for (      int id : OreDictionary.getOreIDs(stack)) {
        if (id == leavesId) {
          return true;
        }
      }
    }
  }
  return false;
}",0.9909443725743856
156808,"public BlockMiningWell(){
  super(Material.ground);
  setHardness(5F);
  setResistance(10F);
}","public BlockMiningWell(){
  super(Material.ground);
  setHardness(5F);
  setResistance(10F);
  setStepSound(soundTypeStone);
}",0.8545454545454545
156809,"public BlockQuarry(){
  super(Material.iron);
  setHardness(10F);
  setResistance(10F);
}","public BlockQuarry(){
  super(Material.iron);
  setHardness(10F);
  setResistance(10F);
  setStepSound(soundTypeAnvil);
}",0.8476190476190476
156810,"@Override public void writeToWorld(IBuilderContext context){
  if (mode == Mode.ClearIfInvalid) {
    if (!getSchematic().isAlreadyBuilt(context,x,y,z)) {
      context.world().setBlockToAir(x,y,z);
    }
  }
 else {
    try {
      getSchematic().placeInWorld(context,x,y,z,stackConsumed);
      TileEntity e=context.world().getTileEntity(x,y,z);
      if (e != null) {
        e.updateEntity();
      }
    }
 catch (    Throwable t) {
      t.printStackTrace();
      context.world().setBlockToAir(x,y,z);
    }
  }
}","@Override public void writeToWorld(IBuilderContext context){
  if (mode == Mode.ClearIfInvalid) {
    if (!getSchematic().isAlreadyBuilt(context,x,y,z)) {
      context.world().setBlockToAir(x,y,z);
    }
  }
 else {
    try {
      getSchematic().placeInWorld(context,x,y,z,stackConsumed);
      TileEntity e=context.world().getTileEntity(x,y,z);
      if (e != null) {
        e.updateEntity();
      }
      if (getSchematic() instanceof SchematicBlock) {
        SchematicBlock sb=(SchematicBlock)getSchematic();
        List<ItemStack> oldRequirements=Arrays.asList(sb.storedRequirements);
        sb.storedRequirements=new ItemStack[0];
        sb.storeRequirements(context,x,y,z);
        for (        ItemStack s : sb.storedRequirements) {
          if (!oldRequirements.contains(s)) {
            BCLog.logger.warn(""String_Node_Str"");
            context.world().setBlockToAir(x,y,z);
            return;
          }
        }
      }
    }
 catch (    Throwable t) {
      t.printStackTrace();
      context.world().setBlockToAir(x,y,z);
    }
  }
}",0.6586447118429386
156811,"public void read(NBTTagCompound nbt){
  NBTTagList blocksMapping=nbt.getTagList(""String_Node_Str"",Constants.NBT.TAG_COMPOUND);
  for (int i=0; i < blocksMapping.tagCount(); ++i) {
    NBTTagCompound sub=blocksMapping.getCompoundTagAt(i);
    String name=sub.getString(""String_Node_Str"");
    Block b=(Block)Block.blockRegistry.getObject(name);
    if (b != null) {
      registerBlock(b);
    }
 else {
      idToBlock.add(null);
      BCLog.logger.log(Level.WARN,""String_Node_Str"" + name);
    }
  }
  NBTTagList itemsMapping=nbt.getTagList(""String_Node_Str"",Constants.NBT.TAG_COMPOUND);
  for (int i=0; i < itemsMapping.tagCount(); ++i) {
    NBTTagCompound sub=itemsMapping.getCompoundTagAt(i);
    String name=sub.getString(""String_Node_Str"");
    Item item=(Item)Item.itemRegistry.getObject(name);
    if (item != null) {
      registerItem(item);
    }
 else {
      idToItem.add(null);
      BCLog.logger.log(Level.WARN,""String_Node_Str"" + name);
    }
  }
  NBTTagList entitiesMapping=nbt.getTagList(""String_Node_Str"",Constants.NBT.TAG_COMPOUND);
  for (int i=0; i < entitiesMapping.tagCount(); ++i) {
    NBTTagCompound sub=entitiesMapping.getCompoundTagAt(i);
    String name=sub.getString(""String_Node_Str"");
    Class<? extends Entity> e=null;
    try {
      e=(Class<? extends Entity>)Class.forName(name);
    }
 catch (    ClassNotFoundException e1) {
      e1.printStackTrace();
    }
    if (e != null) {
      registerEntity(e);
    }
 else {
      idToEntity.add(null);
      BCLog.logger.log(Level.WARN,""String_Node_Str"" + name);
    }
  }
}","public void read(NBTTagCompound nbt){
  NBTTagList blocksMapping=nbt.getTagList(""String_Node_Str"",Constants.NBT.TAG_COMPOUND);
  for (int i=0; i < blocksMapping.tagCount(); ++i) {
    NBTTagCompound sub=blocksMapping.getCompoundTagAt(i);
    String name=sub.getString(""String_Node_Str"");
    Block b=null;
    if (Block.blockRegistry.containsKey(name)) {
      b=(Block)Block.blockRegistry.getObject(name);
    }
    if (b != null) {
      registerBlock(b);
    }
 else {
      idToBlock.add(null);
      BCLog.logger.log(Level.WARN,""String_Node_Str"" + name);
    }
  }
  NBTTagList itemsMapping=nbt.getTagList(""String_Node_Str"",Constants.NBT.TAG_COMPOUND);
  for (int i=0; i < itemsMapping.tagCount(); ++i) {
    NBTTagCompound sub=itemsMapping.getCompoundTagAt(i);
    String name=sub.getString(""String_Node_Str"");
    Item item=null;
    if (Item.itemRegistry.containsKey(name)) {
      item=(Item)Item.itemRegistry.getObject(name);
    }
    if (item != null) {
      registerItem(item);
    }
 else {
      idToItem.add(null);
      BCLog.logger.log(Level.WARN,""String_Node_Str"" + name);
    }
  }
  NBTTagList entitiesMapping=nbt.getTagList(""String_Node_Str"",Constants.NBT.TAG_COMPOUND);
  for (int i=0; i < entitiesMapping.tagCount(); ++i) {
    NBTTagCompound sub=entitiesMapping.getCompoundTagAt(i);
    String name=sub.getString(""String_Node_Str"");
    Class<? extends Entity> e=null;
    try {
      e=(Class<? extends Entity>)Class.forName(name);
    }
 catch (    ClassNotFoundException e1) {
      e1.printStackTrace();
    }
    if (e != null) {
      registerEntity(e);
    }
 else {
      idToEntity.add(null);
      BCLog.logger.log(Level.WARN,""String_Node_Str"" + name);
    }
  }
}",0.9524685679239496
156812,"@Override public void readSchematicFromNBT(NBTTagCompound nbt,MappingRegistry registry){
  super.readSchematicFromNBT(nbt,registry);
  readBlockFromNBT(nbt,registry);
  readRequirementsFromNBT(nbt,registry);
}","@Override public void readSchematicFromNBT(NBTTagCompound nbt,MappingRegistry registry){
  super.readSchematicFromNBT(nbt,registry);
  readBlockFromNBT(nbt,registry);
  if (!doNotUse()) {
    readRequirementsFromNBT(nbt,registry);
  }
}",0.9393258426966292
156813,"protected void readBlockFromNBT(NBTTagCompound nbt,MappingRegistry registry){
  try {
    block=registry.getBlockForId(nbt.getInteger(""String_Node_Str""));
    meta=nbt.getInteger(""String_Node_Str"");
  }
 catch (  MappingNotFoundException e) {
    defaultPermission=BuildingPermission.CREATIVE_ONLY;
  }
}","protected void readBlockFromNBT(NBTTagCompound nbt,MappingRegistry registry){
  try {
    block=registry.getBlockForId(nbt.getInteger(""String_Node_Str""));
    meta=nbt.getInteger(""String_Node_Str"");
  }
 catch (  MappingNotFoundException e) {
    doNotUse=true;
  }
}",0.8966725043782837
156814,"protected void readRequirementsFromNBT(NBTTagCompound nbt,MappingRegistry registry){
  if (nbt.hasKey(""String_Node_Str"")) {
    NBTTagList rq=nbt.getTagList(""String_Node_Str"",Constants.NBT.TAG_COMPOUND);
    ArrayList<ItemStack> rqs=new ArrayList<ItemStack>();
    for (int i=0; i < rq.tagCount(); ++i) {
      try {
        NBTTagCompound sub=rq.getCompoundTagAt(i);
        if (sub.getInteger(""String_Node_Str"") >= 0) {
          registry.stackToWorld(sub);
          rqs.add(ItemStack.loadItemStackFromNBT(sub));
        }
 else {
          defaultPermission=BuildingPermission.CREATIVE_ONLY;
        }
      }
 catch (      MappingNotFoundException e) {
        defaultPermission=BuildingPermission.CREATIVE_ONLY;
      }
catch (      Throwable t) {
        t.printStackTrace();
        defaultPermission=BuildingPermission.CREATIVE_ONLY;
      }
    }
    storedRequirements=rqs.toArray(new ItemStack[rqs.size()]);
  }
 else {
    storedRequirements=new ItemStack[0];
  }
}","protected void readRequirementsFromNBT(NBTTagCompound nbt,MappingRegistry registry){
  if (nbt.hasKey(""String_Node_Str"")) {
    NBTTagList rq=nbt.getTagList(""String_Node_Str"",Constants.NBT.TAG_COMPOUND);
    ArrayList<ItemStack> rqs=new ArrayList<ItemStack>();
    int idTEST=0;
    for (int i=0; i < rq.tagCount(); ++i) {
      try {
        NBTTagCompound sub=rq.getCompoundTagAt(i);
        idTEST=sub.getInteger(""String_Node_Str"");
        if (sub.getInteger(""String_Node_Str"") >= 0) {
          registry.stackToWorld(sub);
          rqs.add(ItemStack.loadItemStackFromNBT(sub));
        }
 else {
          defaultPermission=BuildingPermission.CREATIVE_ONLY;
        }
      }
 catch (      MappingNotFoundException e) {
        defaultPermission=BuildingPermission.CREATIVE_ONLY;
      }
catch (      Throwable t) {
        t.printStackTrace();
        defaultPermission=BuildingPermission.CREATIVE_ONLY;
      }
    }
    storedRequirements=rqs.toArray(new ItemStack[rqs.size()]);
  }
 else {
    storedRequirements=new ItemStack[0];
  }
}",0.966403162055336
156815,"@Override public void loadContents(NBTTagCompound nbt) throws BptError {
  mapping.read(nbt.getCompoundTag(""String_Node_Str""));
  NBTTagList nbtContents=nbt.getTagList(""String_Node_Str"",Constants.NBT.TAG_COMPOUND);
  int index=0;
  for (int x=0; x < sizeX; ++x) {
    for (int y=0; y < sizeY; ++y) {
      for (int z=0; z < sizeZ; ++z) {
        NBTTagCompound cpt=nbtContents.getCompoundTagAt(index);
        index++;
        if (cpt.hasKey(""String_Node_Str"")) {
          Block block;
          try {
            block=mapping.getBlockForId(cpt.getInteger(""String_Node_Str""));
          }
 catch (          MappingNotFoundException e) {
            block=null;
            isComplete=false;
          }
          if (block != null) {
            int meta=cpt.getInteger(""String_Node_Str"");
            contents[x][y][z]=SchematicRegistry.INSTANCE.createSchematicBlock(block,meta);
            if (contents[x][y][z] != null) {
              contents[x][y][z].readSchematicFromNBT(cpt,mapping);
              if (!contents[x][y][z].doNotUse()) {
                contents[x][y][z].idsToWorld(mapping);
switch (contents[x][y][z].getBuildingPermission()) {
case ALL:
                  break;
case CREATIVE_ONLY:
                System.out.println(""String_Node_Str"");
              System.out.println(""String_Node_Str"" + Block.blockRegistry.getNameForObject(block));
            System.out.println(""String_Node_Str"" + meta);
          if (buildingPermission == BuildingPermission.ALL) {
            buildingPermission=BuildingPermission.CREATIVE_ONLY;
          }
        break;
case NONE:
      buildingPermission=BuildingPermission.NONE;
    break;
}
}
 else {
contents[x][y][z]=null;
isComplete=false;
}
}
}
 else {
contents[x][y][z]=null;
isComplete=false;
}
}
 else {
contents[x][y][z]=null;
}
}
}
}
NBTTagList entitiesNBT=nbt.getTagList(""String_Node_Str"",Constants.NBT.TAG_COMPOUND);
for (int i=0; i < entitiesNBT.tagCount(); ++i) {
NBTTagCompound cpt=entitiesNBT.getCompoundTagAt(i);
if (cpt.hasKey(""String_Node_Str"")) {
Class<? extends Entity> entity;
try {
entity=mapping.getEntityForId(cpt.getInteger(""String_Node_Str""));
}
 catch (MappingNotFoundException e) {
entity=null;
isComplete=false;
}
if (entity != null) {
SchematicEntity s=SchematicRegistry.INSTANCE.createSchematicEntity(entity);
s.readSchematicFromNBT(cpt,mapping);
s.idsToWorld(mapping);
entities.add(s);
}
 else {
isComplete=false;
}
}
}
}","@Override public void loadContents(NBTTagCompound nbt) throws BptError {
  mapping.read(nbt.getCompoundTag(""String_Node_Str""));
  NBTTagList nbtContents=nbt.getTagList(""String_Node_Str"",Constants.NBT.TAG_COMPOUND);
  int index=0;
  for (int x=0; x < sizeX; ++x) {
    for (int y=0; y < sizeY; ++y) {
      for (int z=0; z < sizeZ; ++z) {
        NBTTagCompound cpt=nbtContents.getCompoundTagAt(index);
        index++;
        if (cpt.hasKey(""String_Node_Str"")) {
          Block block;
          try {
            block=mapping.getBlockForId(cpt.getInteger(""String_Node_Str""));
          }
 catch (          MappingNotFoundException e) {
            block=null;
            isComplete=false;
          }
          if (block != null) {
            int meta=cpt.getInteger(""String_Node_Str"");
            contents[x][y][z]=SchematicRegistry.INSTANCE.createSchematicBlock(block,meta);
            if (contents[x][y][z] != null) {
              contents[x][y][z].readSchematicFromNBT(cpt,mapping);
              if (!contents[x][y][z].doNotUse()) {
                contents[x][y][z].idsToWorld(mapping);
switch (contents[x][y][z].getBuildingPermission()) {
case ALL:
                  break;
case CREATIVE_ONLY:
                if (buildingPermission == BuildingPermission.ALL) {
                  buildingPermission=BuildingPermission.CREATIVE_ONLY;
                }
              break;
case NONE:
            buildingPermission=BuildingPermission.NONE;
          break;
      }
    }
 else {
      contents[x][y][z]=null;
      isComplete=false;
    }
  }
}
 else {
  contents[x][y][z]=null;
  isComplete=false;
}
}
 else {
contents[x][y][z]=null;
}
}
}
}
NBTTagList entitiesNBT=nbt.getTagList(""String_Node_Str"",Constants.NBT.TAG_COMPOUND);
for (int i=0; i < entitiesNBT.tagCount(); ++i) {
NBTTagCompound cpt=entitiesNBT.getCompoundTagAt(i);
if (cpt.hasKey(""String_Node_Str"")) {
Class<? extends Entity> entity;
try {
entity=mapping.getEntityForId(cpt.getInteger(""String_Node_Str""));
}
 catch (MappingNotFoundException e) {
entity=null;
isComplete=false;
}
if (entity != null) {
SchematicEntity s=SchematicRegistry.INSTANCE.createSchematicEntity(entity);
s.readSchematicFromNBT(cpt,mapping);
s.idsToWorld(mapping);
entities.add(s);
}
 else {
isComplete=false;
}
}
}
}",0.9427105600684051
156816,"public void init(){
  if (gate == null) {
    return;
  }
  for (int y=0; y < 3; y++) {
    for (int x=0; x < 9; x++) {
      getSlot(x + y * 9).yDisplayPosition=gate.material.guiHeight - 84 + y * 18;
    }
  }
  for (int x=0; x < 9; x++) {
    getSlot(x + 27).yDisplayPosition=gate.material.guiHeight - 26;
  }
  if (!pipe.container.getWorldObj().isRemote) {
    potentialTriggers.addAll(gate.getAllValidTriggers());
    potentialActions.addAll(gate.getAllValidActions());
    if (gate.material.numTriggerParameters == 0) {
      Iterator<IStatement> it=potentialTriggers.iterator();
      while (it.hasNext()) {
        IStatement trigger=it.next();
        if (trigger.minParameters() > 0) {
          it.remove();
        }
      }
    }
    if (gate.material.numActionParameters == 0) {
      Iterator<IStatement> it=potentialActions.iterator();
      while (it.hasNext()) {
        IStatement action=it.next();
        if (action.minParameters() > 0) {
          it.remove();
        }
      }
    }
  }
  if (gateCallback != null) {
    gateCallback.setGate(gate);
  }
}","public void init(){
  if (gate == null) {
    return;
  }
  for (int y=0; y < 3; y++) {
    for (int x=0; x < 9; x++) {
      getSlot(x + y * 9).yDisplayPosition=gate.material.guiHeight - 84 + y * 18;
    }
  }
  for (int x=0; x < 9; x++) {
    getSlot(x + 27).yDisplayPosition=gate.material.guiHeight - 26;
  }
  if (!pipe.container.getWorldObj().isRemote) {
    potentialTriggers.addAll(gate.getAllValidTriggers());
    potentialActions.addAll(gate.getAllValidActions());
    Iterator<IStatement> it=potentialTriggers.iterator();
    while (it.hasNext()) {
      IStatement trigger=it.next();
      if (trigger.minParameters() > gate.material.numTriggerParameters) {
        it.remove();
      }
    }
    it=potentialActions.iterator();
    while (it.hasNext()) {
      IStatement action=it.next();
      if (action.minParameters() > gate.material.numActionParameters) {
        it.remove();
      }
    }
  }
  if (gateCallback != null) {
    gateCallback.setGate(gate);
  }
}",0.7758872143898882
156817,"@Override protected void mouseClicked(int i,int j,int k){
  if (gate == null) {
    return;
  }
  super.mouseClicked(i,j,k);
  AdvancedSlot slot=getSlotAtLocation(i,j);
  if (slot instanceof TriggerSlot && container.hasTriggers()) {
    TriggerSlot triggerSlot=(TriggerSlot)slot;
    IStatement changed=null;
    if (triggerSlot.getStatement() == null) {
      if (k == 0) {
        changed=container.getFirstTrigger();
      }
 else {
        changed=container.getLastTrigger();
      }
    }
 else {
      Iterator<IStatement> it=container.getTriggerIterator(k != 0);
      for (; it.hasNext(); ) {
        IStatement trigger=it.next();
        if (!it.hasNext()) {
          changed=null;
          break;
        }
        if (trigger == triggerSlot.getStatement()) {
          changed=it.next();
          break;
        }
      }
    }
    if (changed == null) {
      container.setTrigger(triggerSlot.slot,null,true);
    }
 else {
      container.setTrigger(triggerSlot.slot,changed.getUniqueTag(),true);
    }
    for (    StatementParameterSlot p : triggerSlot.parameters) {
      container.setTriggerParameter(triggerSlot.slot,p.slot,null,true);
    }
  }
 else   if (slot instanceof ActionSlot) {
    ActionSlot actionSlot=(ActionSlot)slot;
    IStatement changed=null;
    if (actionSlot.getStatement() == null) {
      if (k == 0) {
        changed=container.getFirstAction();
      }
 else {
        changed=container.getLastAction();
      }
    }
 else {
      Iterator<IStatement> it=container.getActionIterator(k != 0);
      for (; it.hasNext(); ) {
        IStatement action=it.next();
        if (!it.hasNext()) {
          changed=null;
          break;
        }
        if (action == actionSlot.getStatement()) {
          changed=it.next();
          break;
        }
      }
    }
    if (changed == null) {
      container.setAction(actionSlot.slot,null,true);
    }
 else {
      container.setAction(actionSlot.slot,changed.getUniqueTag(),true);
    }
    for (    StatementParameterSlot p : actionSlot.parameters) {
      container.setActionParameter(actionSlot.slot,p.slot,null,true);
    }
  }
 else   if (slot instanceof StatementParameterSlot) {
    StatementParameterSlot paramSlot=(StatementParameterSlot)slot;
    StatementSlot statement=paramSlot.statementSlot;
    if (statement.isDefined() && statement.getStatement().maxParameters() != 0) {
      IStatementParameter param=paramSlot.getParameter();
      if (param == null) {
        param=statement.getStatement().createParameter(paramSlot.slot);
      }
      if (param != null) {
        param.onClick(gate,statement.getStatement(),mc.thePlayer.inventory.getItemStack(),k);
        paramSlot.setParameter(param,true);
      }
    }
  }
  container.markDirty();
}","@Override protected void mouseClicked(int i,int j,int k){
  if (gate == null) {
    return;
  }
  super.mouseClicked(i,j,k);
  AdvancedSlot slot=getSlotAtLocation(i,j);
  if (slot instanceof TriggerSlot && container.hasTriggers()) {
    TriggerSlot triggerSlot=(TriggerSlot)slot;
    IStatement changed=null;
    if (triggerSlot.getStatement() == null) {
      if (k == 0) {
        changed=container.getFirstTrigger();
      }
 else {
        changed=container.getLastTrigger();
      }
    }
 else {
      Iterator<IStatement> it=container.getTriggerIterator(k != 0);
      for (; it.hasNext(); ) {
        IStatement trigger=it.next();
        if (!it.hasNext()) {
          changed=null;
          break;
        }
        if (trigger == triggerSlot.getStatement()) {
          changed=it.next();
          break;
        }
      }
    }
    if (changed == null) {
      container.setTrigger(triggerSlot.slot,null,true);
    }
 else {
      container.setTrigger(triggerSlot.slot,changed.getUniqueTag(),true);
    }
    for (    StatementParameterSlot p : triggerSlot.parameters) {
      IStatementParameter parameter=null;
      if (changed != null && p.slot < changed.minParameters()) {
        parameter=changed.createParameter(p.slot);
      }
      container.setTriggerParameter(triggerSlot.slot,p.slot,parameter,true);
    }
  }
 else   if (slot instanceof ActionSlot) {
    ActionSlot actionSlot=(ActionSlot)slot;
    IStatement changed=null;
    if (actionSlot.getStatement() == null) {
      if (k == 0) {
        changed=container.getFirstAction();
      }
 else {
        changed=container.getLastAction();
      }
    }
 else {
      Iterator<IStatement> it=container.getActionIterator(k != 0);
      for (; it.hasNext(); ) {
        IStatement action=it.next();
        if (!it.hasNext()) {
          changed=null;
          break;
        }
        if (action == actionSlot.getStatement()) {
          changed=it.next();
          break;
        }
      }
    }
    if (changed == null) {
      container.setAction(actionSlot.slot,null,true);
    }
 else {
      container.setAction(actionSlot.slot,changed.getUniqueTag(),true);
    }
    for (    StatementParameterSlot p : actionSlot.parameters) {
      IStatementParameter parameter=null;
      if (changed != null && p.slot < changed.minParameters()) {
        parameter=changed.createParameter(p.slot);
      }
      container.setActionParameter(actionSlot.slot,p.slot,parameter,true);
    }
  }
 else   if (slot instanceof StatementParameterSlot) {
    StatementParameterSlot paramSlot=(StatementParameterSlot)slot;
    StatementSlot statement=paramSlot.statementSlot;
    if (statement.isDefined() && statement.getStatement().maxParameters() != 0) {
      IStatementParameter param=paramSlot.getParameter();
      if (param == null) {
        param=statement.getStatement().createParameter(paramSlot.slot);
      }
      if (param != null) {
        param.onClick(gate,statement.getStatement(),mc.thePlayer.inventory.getItemStack(),k);
        paramSlot.setParameter(param,true);
      }
    }
  }
  container.markDirty();
}",0.938845234028015
156818,"public static BitSet fromByteArray(byte[] bytes){
  BitSet bits=new BitSet(bytes.length * 8);
  for (int i=0; i < bytes.length * 8; i++) {
    if ((bytes[bytes.length - (i >> 3) - 1] & (1 << (i & 7))) > 0) {
      bits.set(i);
    }
  }
  return bits;
}","public static BitSet fromByteArray(byte[] bytes){
  BitSet bits=new BitSet(bytes.length * 8);
  for (int i=0; i < bytes.length * 8; i++) {
    if ((bytes[i / 8] & (1 << (i % 8))) != 0) {
      bits.set(i);
    }
  }
  return bits;
}",0.8989690721649485
156819,"public static byte[] toByteArray(BitSet bits){
  byte[] bytes=new byte[(bits.length() + 7) >> 3];
  System.out.println(bits.length() + ""String_Node_Str"" + bytes.length);
  for (int i=0; i < bits.length(); i++) {
    if (bits.get(i)) {
      bytes[bytes.length - (i >> 3) - 1]|=1 << (i & 7);
    }
  }
  return bytes;
}","public static byte[] toByteArray(BitSet bits,int sizeInBytes){
  byte[] bytes=new byte[sizeInBytes];
  for (int i=0; i < bits.length(); i++) {
    if (bits.get(i)) {
      bytes[i / 8]|=1 << (i % 8);
    }
  }
  return bytes;
}",0.6201834862385321
156820,"@Override public void writeData(ByteBuf data){
  super.writeData(data);
  byte[] dBytes=BitSetUtils.toByteArray(delta);
  data.writeBytes(dBytes);
  for (  ForgeDirection dir : ForgeDirection.values()) {
    FluidStack liquid=renderCache[dir.ordinal()];
    if (delta.get(dir.ordinal() * FLUID_DATA_NUM + FLUID_ID_BIT)) {
      if (liquid != null) {
        data.writeShort(liquid.fluidID);
        data.writeInt(colorRenderCache[dir.ordinal()]);
      }
 else {
        data.writeShort(0);
        data.writeInt(0xFFFFFF);
      }
    }
    if (delta.get(dir.ordinal() * FLUID_DATA_NUM + FLUID_AMOUNT_BIT)) {
      if (liquid != null) {
        data.writeInt(liquid.amount);
      }
 else {
        data.writeInt(0);
      }
    }
  }
}","@Override public void writeData(ByteBuf data){
  super.writeData(data);
  byte[] dBytes=BitSetUtils.toByteArray(delta,2);
  data.writeBytes(dBytes);
  for (  ForgeDirection dir : ForgeDirection.values()) {
    FluidStack liquid=renderCache[dir.ordinal()];
    if (delta.get(dir.ordinal() * FLUID_DATA_NUM + FLUID_ID_BIT)) {
      if (liquid != null) {
        data.writeShort(liquid.fluidID);
        data.writeInt(colorRenderCache[dir.ordinal()]);
      }
 else {
        data.writeShort(0);
        data.writeInt(0xFFFFFF);
      }
    }
    if (delta.get(dir.ordinal() * FLUID_DATA_NUM + FLUID_AMOUNT_BIT)) {
      if (liquid != null) {
        data.writeInt(liquid.amount);
      }
 else {
        data.writeInt(0);
      }
    }
  }
}",0.9986449864498644
156821,"@Override public boolean isTriggerActive(TileEntity tile,ForgeDirection side,IStatementContainer statementContainer,IStatementParameter[] parameters){
  if (tile instanceof IFluidHandler) {
    IFluidHandler container=(IFluidHandler)tile;
    FluidStack searchedFluid=null;
    if (parameters != null && parameters.length >= 1 && parameters[0].getItemStack() != null) {
      searchedFluid=FluidContainerRegistry.getFluidForFilledItem(parameters[0].getItemStack());
    }
    if (searchedFluid != null) {
      searchedFluid.amount=1;
    }
    FluidTankInfo[] liquids=container.getTankInfo(side);
    if (liquids == null || liquids.length == 0) {
      return false;
    }
switch (state) {
case Empty:
      for (      FluidTankInfo c : liquids) {
        if (c.fluid != null && c.fluid.amount > 0 && (searchedFluid == null || searchedFluid.isFluidEqual(c.fluid))) {
          return false;
        }
      }
    return true;
case Contains:
  for (  FluidTankInfo c : liquids) {
    if (c.fluid != null && c.fluid.amount > 0 && (searchedFluid == null || searchedFluid.isFluidEqual(c.fluid))) {
      return true;
    }
  }
return false;
case Space:
if (searchedFluid == null) {
for (FluidTankInfo c : liquids) {
  if (c.fluid == null || c.fluid.amount < c.capacity) {
    return true;
  }
}
return false;
}
return container.fill(side,searchedFluid,false) > 0;
case Full:
if (searchedFluid == null) {
for (FluidTankInfo c : liquids) {
if (c.fluid == null || c.fluid.amount < c.capacity) {
return false;
}
}
return true;
}
return container.fill(side,searchedFluid,false) <= 0;
}
}
return false;
}","@Override public boolean isTriggerActive(TileEntity tile,ForgeDirection side,IStatementContainer statementContainer,IStatementParameter[] parameters){
  if (tile instanceof IFluidHandler) {
    IFluidHandler container=(IFluidHandler)tile;
    FluidStack searchedFluid=null;
    if (parameters != null && parameters.length >= 1 && parameters[0] != null && parameters[0].getItemStack() != null) {
      searchedFluid=FluidContainerRegistry.getFluidForFilledItem(parameters[0].getItemStack());
    }
    if (searchedFluid != null) {
      searchedFluid.amount=1;
    }
    FluidTankInfo[] liquids=container.getTankInfo(side);
    if (liquids == null || liquids.length == 0) {
      return false;
    }
switch (state) {
case Empty:
      for (      FluidTankInfo c : liquids) {
        if (c.fluid != null && c.fluid.amount > 0 && (searchedFluid == null || searchedFluid.isFluidEqual(c.fluid))) {
          return false;
        }
      }
    return true;
case Contains:
  for (  FluidTankInfo c : liquids) {
    if (c.fluid != null && c.fluid.amount > 0 && (searchedFluid == null || searchedFluid.isFluidEqual(c.fluid))) {
      return true;
    }
  }
return false;
case Space:
if (searchedFluid == null) {
for (FluidTankInfo c : liquids) {
  if (c.fluid == null || c.fluid.amount < c.capacity) {
    return true;
  }
}
return false;
}
return container.fill(side,searchedFluid,false) > 0;
case Full:
if (searchedFluid == null) {
for (FluidTankInfo c : liquids) {
if (c.fluid == null || c.fluid.amount < c.capacity) {
return false;
}
}
return true;
}
return container.fill(side,searchedFluid,false) <= 0;
}
}
return false;
}",0.9399688958009332
156822,"@Override public boolean isTriggerActive(TileEntity tile,ForgeDirection side,IStatementContainer statementContainer,IStatementParameter[] parameters){
  if (tile instanceof IFluidHandler) {
    IFluidHandler container=(IFluidHandler)tile;
    FluidStack searchedFluid=null;
    if (parameters != null && parameters.length >= 1 && parameters[0].getItemStack() != null) {
      searchedFluid=FluidContainerRegistry.getFluidForFilledItem(parameters[0].getItemStack());
    }
    if (searchedFluid != null) {
      searchedFluid.amount=1;
    }
    FluidTankInfo[] liquids=container.getTankInfo(side);
    if (liquids == null || liquids.length == 0) {
      return false;
    }
    for (    FluidTankInfo c : liquids) {
      if (c.fluid == null) {
        if (searchedFluid == null) {
          return true;
        }
        return container.fill(side,searchedFluid,false) > 0;
      }
      if (searchedFluid == null || searchedFluid.isFluidEqual(c.fluid)) {
        float percentage=(float)c.fluid.amount / (float)c.capacity;
        return percentage < type.level;
      }
    }
  }
  return false;
}","@Override public boolean isTriggerActive(TileEntity tile,ForgeDirection side,IStatementContainer statementContainer,IStatementParameter[] parameters){
  if (tile instanceof IFluidHandler) {
    IFluidHandler container=(IFluidHandler)tile;
    FluidStack searchedFluid=null;
    if (parameters != null && parameters.length >= 1 && parameters[0] != null && parameters[0].getItemStack() != null) {
      searchedFluid=FluidContainerRegistry.getFluidForFilledItem(parameters[0].getItemStack());
    }
    if (searchedFluid != null) {
      searchedFluid.amount=1;
    }
    FluidTankInfo[] liquids=container.getTankInfo(side);
    if (liquids == null || liquids.length == 0) {
      return false;
    }
    for (    FluidTankInfo c : liquids) {
      if (c.fluid == null) {
        if (searchedFluid == null) {
          return true;
        }
        return container.fill(side,searchedFluid,false) > 0;
      }
      if (searchedFluid == null || searchedFluid.isFluidEqual(c.fluid)) {
        float percentage=(float)c.fluid.amount / (float)c.capacity;
        return percentage < type.level;
      }
    }
  }
  return false;
}",0.913336326897171
156823,"@Override public boolean isTriggerActive(TileEntity tile,ForgeDirection side,IStatementContainer container,IStatementParameter[] parameters){
  ItemStack searchedStack=null;
  if (parameters != null && parameters.length >= 1) {
    searchedStack=parameters[0].getItemStack();
  }
  if (tile instanceof IInventory) {
    boolean hasSlots=false;
    boolean foundItems=false;
    boolean foundSpace=false;
    for (    IInvSlot slot : InventoryIterator.getIterable((IInventory)tile,side.getOpposite())) {
      hasSlots=true;
      ItemStack stack=slot.getStackInSlot();
      foundItems|=stack != null && (searchedStack == null || StackHelper.canStacksOrListsMerge(stack,searchedStack));
      foundSpace|=(stack == null || (StackHelper.canStacksOrListsMerge(stack,searchedStack) && stack.stackSize < stack.getMaxStackSize())) && (searchedStack == null || searchedStack.getItem() instanceof ItemList || slot.canPutStackInSlot(searchedStack));
    }
    if (!hasSlots) {
      return false;
    }
switch (state) {
case Empty:
      return !foundItems;
case Contains:
    return foundItems;
case Space:
  return foundSpace;
default :
return !foundSpace;
}
}
return false;
}","@Override public boolean isTriggerActive(TileEntity tile,ForgeDirection side,IStatementContainer container,IStatementParameter[] parameters){
  ItemStack searchedStack=null;
  if (parameters != null && parameters.length >= 1 && parameters[0] != null) {
    searchedStack=parameters[0].getItemStack();
  }
  if (tile instanceof IInventory) {
    boolean hasSlots=false;
    boolean foundItems=false;
    boolean foundSpace=false;
    for (    IInvSlot slot : InventoryIterator.getIterable((IInventory)tile,side.getOpposite())) {
      hasSlots=true;
      ItemStack stack=slot.getStackInSlot();
      foundItems|=stack != null && (searchedStack == null || StackHelper.canStacksOrListsMerge(stack,searchedStack));
      foundSpace|=(stack == null || (StackHelper.canStacksOrListsMerge(stack,searchedStack) && stack.stackSize < stack.getMaxStackSize())) && (searchedStack == null || searchedStack.getItem() instanceof ItemList || slot.canPutStackInSlot(searchedStack));
    }
    if (!hasSlots) {
      return false;
    }
switch (state) {
case Empty:
      return !foundItems;
case Contains:
    return foundItems;
case Space:
  return foundSpace;
default :
return !foundSpace;
}
}
return false;
}",0.9894291754756872
156824,"@Override @SideOnly(Side.CLIENT) public void addInformation(ItemStack stack,EntityPlayer player,List list,boolean advanced){
  super.addInformation(stack,player,list,advanced);
  Class<? extends Pipe> pipe=BlockGenericPipe.pipes.get(this);
  List<String> toolTip=PipeToolTipManager.getToolTip(pipe);
  list.addAll(toolTip);
}","@Override @SideOnly(Side.CLIENT) public void addInformation(ItemStack stack,EntityPlayer player,List list,boolean advanced){
  super.addInformation(stack,player,list,advanced);
  if (stack.getItemDamage() >= 1) {
    list.add(EnumChatFormatting.WHITE + ""String_Node_Str"" + EnumChatFormatting.ITALIC+ StringUtils.capitalize(ColorUtils.WOOL_TO_NAME[(stack.getItemDamage() - 1) & 15].replace('.',' ')));
  }
  Class<? extends Pipe> pipe=BlockGenericPipe.pipes.get(this);
  List<String> toolTip=PipeToolTipManager.getToolTip(pipe);
  list.addAll(toolTip);
}",0.7403189066059226
156825,"public void initialize(Pipe<?> pipe){
  this.blockType=getBlockType();
  if (pipe == null) {
    BCLog.logger.log(Level.WARN,""String_Node_Str"",new Object[]{xCoord,yCoord,zCoord});
    worldObj.setBlockToAir(xCoord,yCoord,zCoord);
    return;
  }
  this.pipe=pipe;
  for (  ForgeDirection o : ForgeDirection.VALID_DIRECTIONS) {
    TileEntity tile=getTile(o);
    if (tile instanceof ITileBufferHolder) {
      ((ITileBufferHolder)tile).blockCreated(o,BuildCraftTransport.genericPipeBlock,this);
    }
    if (tile instanceof TileGenericPipe) {
      ((TileGenericPipe)tile).scheduleNeighborChange();
    }
  }
  bindPipe();
  computeConnections();
  scheduleRenderUpdate();
  if (pipe.needsInit()) {
    pipe.initialize();
  }
  initialized=true;
}","public void initialize(Pipe<?> pipe){
  this.blockType=getBlockType();
  if (pipe == null) {
    BCLog.logger.log(Level.WARN,""String_Node_Str"",new Object[]{xCoord,yCoord,zCoord});
    worldObj.setBlockToAir(xCoord,yCoord,zCoord);
    return;
  }
  this.pipe=pipe;
  for (  ForgeDirection o : ForgeDirection.VALID_DIRECTIONS) {
    TileEntity tile=getTile(o);
    if (tile instanceof ITileBufferHolder) {
      ((ITileBufferHolder)tile).blockCreated(o,BuildCraftTransport.genericPipeBlock,this);
    }
    if (tile instanceof TileGenericPipe) {
      ((TileGenericPipe)tile).scheduleNeighborChange();
    }
  }
  bindPipe();
  computeConnections();
  scheduleNeighborChange();
  scheduleRenderUpdate();
  if (pipe.needsInit()) {
    pipe.initialize();
  }
  initialized=true;
}",0.9816272965879264
156826,"@Override public void onNeighborBlockChange(World world,int x,int y,int z,Block block){
  TileEntity tile=world.getTileEntity(x,y,z);
  if (tile instanceof TileEngine) {
    ((TileEngine)tile).checkRedstonePower();
  }
}","@Override public void onNeighborBlockChange(World world,int x,int y,int z,Block block){
  TileEntity tile=world.getTileEntity(x,y,z);
  if (tile instanceof TileEngine) {
    ((TileEngine)tile).onNeighborUpdate();
  }
}",0.9269406392694064
156827,"@Override public void updateEntity(){
  super.updateEntity();
  if (worldObj.isRemote) {
    if (progressPart != 0) {
      progress+=getPistonSpeed();
      if (progress > 1) {
        progressPart=0;
        progress=0;
      }
    }
 else     if (this.isPumping) {
      progressPart=1;
    }
    return;
  }
  if (checkOrienation) {
    checkOrienation=false;
    if (!isOrientationValid()) {
      switchOrientation(true);
    }
 else {
      TileEntity tile=getTileBuffer(orientation).getTile();
      if (isPoweredTile(tile,orientation)) {
        if ((tile instanceof IPipeTile) && (((IPipeTile)tile).getPipeType() != PipeType.POWER)) {
          constantPower=false;
        }
 else {
          constantPower=true;
        }
      }
    }
  }
  updateHeatLevel();
  getEnergyStage();
  engineUpdate();
  TileEntity tile=getTileBuffer(orientation).getTile();
  if (progressPart != 0) {
    progress+=getPistonSpeed();
    if (progress > 0.5 && progressPart == 1) {
      progressPart=2;
      if (!constantPower) {
        sendPower();
      }
    }
 else     if (progress >= 1) {
      progress=0;
      progressPart=0;
    }
  }
 else   if (isRedstonePowered && isActive()) {
    if (isPoweredTile(tile,orientation)) {
      progressPart=1;
      setPumping(true);
      if (getPowerToExtract() > 0) {
        progressPart=1;
        setPumping(true);
      }
 else {
        setPumping(false);
      }
    }
 else {
      setPumping(false);
    }
  }
 else {
    setPumping(false);
  }
  burn();
  if (!isRedstonePowered) {
    currentOutput=0;
  }
 else   if (constantPower && isRedstonePowered && isActive()) {
    sendPower();
  }
}","@Override public void updateEntity(){
  super.updateEntity();
  if (worldObj.isRemote) {
    if (progressPart != 0) {
      progress+=getPistonSpeed();
      if (progress > 1) {
        progressPart=0;
        progress=0;
      }
    }
 else     if (this.isPumping) {
      progressPart=1;
    }
    return;
  }
  if (checkOrientation) {
    checkOrientation=false;
    if (!isOrientationValid()) {
      switchOrientation(true);
    }
 else {
      TileEntity tile=getTileBuffer(orientation).getTile();
      refreshPowerMode(tile,orientation);
    }
  }
  updateHeatLevel();
  getEnergyStage();
  engineUpdate();
  TileEntity tile=getTileBuffer(orientation).getTile();
  if (progressPart != 0) {
    progress+=getPistonSpeed();
    if (progress > 0.5 && progressPart == 1) {
      progressPart=2;
      if (!constantPower) {
        sendPower();
      }
    }
 else     if (progress >= 1) {
      progress=0;
      progressPart=0;
    }
  }
 else   if (isRedstonePowered && isActive()) {
    if (isPoweredTile(tile,orientation)) {
      progressPart=1;
      setPumping(true);
      if (getPowerToExtract() > 0) {
        progressPart=1;
        setPumping(true);
      }
 else {
        setPumping(false);
      }
    }
 else {
      setPumping(false);
    }
  }
 else {
    setPumping(false);
  }
  burn();
  if (!isRedstonePowered) {
    currentOutput=0;
  }
 else   if (constantPower && isRedstonePowered && isActive()) {
    sendPower();
  }
}",0.9282945736434108
156828,"private boolean switchOrientationDo(boolean pipesOnly){
  for (int i=orientation.ordinal() + 1; i <= orientation.ordinal() + 6; ++i) {
    ForgeDirection o=ForgeDirection.VALID_DIRECTIONS[i % 6];
    TileEntity tile=getTileBuffer(o).getTile();
    if ((!pipesOnly || tile instanceof IPipeTile) && isPoweredTile(tile,o)) {
      if ((tile instanceof IPipeTile) && (((IPipeTile)tile).getPipeType() != PipeType.POWER)) {
        constantPower=false;
      }
 else {
        constantPower=true;
      }
      orientation=o;
      worldObj.markBlockForUpdate(xCoord,yCoord,zCoord);
      worldObj.notifyBlocksOfNeighborChange(xCoord,yCoord,zCoord,worldObj.getBlock(xCoord,yCoord,zCoord));
      return true;
    }
  }
  return false;
}","private boolean switchOrientationDo(boolean pipesOnly){
  for (int i=orientation.ordinal() + 1; i <= orientation.ordinal() + 6; ++i) {
    ForgeDirection o=ForgeDirection.VALID_DIRECTIONS[i % 6];
    TileEntity tile=getTileBuffer(o).getTile();
    if ((!pipesOnly || tile instanceof IPipeTile) && isPoweredTile(tile,o)) {
      refreshPowerMode(tile,o);
      orientation=o;
      worldObj.markBlockForUpdate(xCoord,yCoord,zCoord);
      worldObj.notifyBlocksOfNeighborChange(xCoord,yCoord,zCoord,worldObj.getBlock(xCoord,yCoord,zCoord));
      return true;
    }
  }
  return false;
}",0.8593155893536122
156829,"@Override public void validate(){
  super.validate();
  tileCache=null;
  checkOrienation=true;
}","@Override public void validate(){
  super.validate();
  tileCache=null;
  checkOrientation=true;
}",0.9948717948717948
156830,"@Override public void invalidate(){
  super.invalidate();
  tileCache=null;
  checkOrienation=true;
}","@Override public void invalidate(){
  super.invalidate();
  tileCache=null;
  checkOrientation=true;
}",0.9950738916256158
156831,"@Override public void updateEntity(){
  if (container.getWorldObj().isRemote) {
    for (int i=0; i < 6; i+=2) {
      movementStage[i / 2]=(movementStage[i / 2] + 0.01F) % 1.0F;
    }
    return;
  }
  step();
  init();
  System.arraycopy(displayPower,0,prevDisplayPower,0,6);
  Arrays.fill(displayPower,(short)0);
  int totalPowerContained=0;
  for (int in=0; in < 6; ++in) {
    totalPowerContained+=internalPower[in];
  }
  int totalPowerQuery=0;
  for (int out=0; out < 6; ++out) {
    if (internalPower[out] == 0) {
      totalPowerQuery+=powerQuery[out];
    }
  }
  int totalPowerConsumed=0;
  if (totalPowerContained > 0) {
    for (int out=0; out < 6; ++out) {
      externalPower[out]=0;
      if (powerQuery[out] > 0 && internalPower[out] == 0) {
        int powerConsumed=(int)Math.round((double)(powerQuery[out] * totalPowerContained) / totalPowerQuery);
        boolean tilePowered=false;
        if (tiles[out] instanceof TileGenericPipe) {
          TileGenericPipe nearbyTile=(TileGenericPipe)tiles[out];
          PipeTransportPower nearbyTransport=(PipeTransportPower)nearbyTile.pipe.transport;
          powerConsumed=nearbyTransport.receiveEnergy(ForgeDirection.VALID_DIRECTIONS[out].getOpposite(),powerConsumed);
          tilePowered=true;
        }
 else         if (tiles[out] instanceof IEnergyHandler) {
          IEnergyHandler handler=(IEnergyHandler)tiles[out];
          if (handler.canConnectEnergy(ForgeDirection.VALID_DIRECTIONS[out].getOpposite())) {
            powerConsumed=handler.receiveEnergy(ForgeDirection.VALID_DIRECTIONS[out].getOpposite(),powerConsumed,false);
            tilePowered=true;
          }
        }
 else {
          PowerReceiver prov=getReceiverOnSide(ForgeDirection.VALID_DIRECTIONS[out]);
          if (prov != null) {
            powerConsumed=(int)Math.ceil(prov.receiveEnergy(Type.PIPE,(double)powerConsumed / 10.0,ForgeDirection.VALID_DIRECTIONS[out].getOpposite()) * 10);
            tilePowered=true;
          }
        }
        if (!tilePowered) {
          externalPower[out]=powerConsumed;
        }
        displayPower[out]+=powerConsumed;
        totalPowerConsumed+=powerConsumed;
      }
    }
  }
  if (totalPowerConsumed > 0) {
    for (int in=0; in < 6; ++in) {
      int powerConsumed=(int)Math.round(internalPower[in] / totalPowerContained * totalPowerConsumed);
      displayPower[in]+=powerConsumed;
    }
  }
  highestPower=0;
  for (int i=0; i < 6; i++) {
    displayPower[i]=(short)((prevDisplayPower[i] * (DISPLAY_SMOOTHING - 1.0F) + displayPower[i]) / DISPLAY_SMOOTHING);
    if (displayPower[i] > highestPower) {
      highestPower=displayPower[i];
    }
    if (displayPower[i] < 0.01) {
      displayPower[i]=0;
    }
  }
  overload+=highestPower > maxPower * 0.95 ? 1 : -1;
  if (overload < 0) {
    overload=0;
  }
  if (overload > OVERLOAD_TICKS) {
    overload=OVERLOAD_TICKS;
  }
  for (  ForgeDirection dir : ForgeDirection.VALID_DIRECTIONS) {
    TileEntity tile=tiles[dir.ordinal()];
    if (tile instanceof IEnergyHandler) {
      IEnergyHandler handler=(IEnergyHandler)tile;
      if (handler.canConnectEnergy(dir.getOpposite())) {
        int request=handler.receiveEnergy(dir.getOpposite(),this.maxPower,true);
        if (request > 0) {
          requestEnergy(dir,request);
        }
      }
    }
 else     if (!(tile instanceof TileGenericPipe && ((TileGenericPipe)tile).pipe.transport instanceof PipeTransportPower)) {
      PowerReceiver prov=getReceiverOnSide(dir);
      if (prov != null) {
        int request=(int)Math.floor(prov.powerRequest() * 10);
        if (request > 0) {
          requestEnergy(dir,request);
        }
      }
    }
  }
  int[] transferQuery=new int[6];
  for (int i=0; i < 6; ++i) {
    transferQuery[i]=0;
    for (int j=0; j < 6; ++j) {
      if (j != i) {
        transferQuery[i]+=powerQuery[j];
      }
    }
    transferQuery[i]=Math.min(transferQuery[i],maxPower);
  }
  for (int i=0; i < 6; ++i) {
    if (transferQuery[i] != 0) {
      if (tiles[i] != null) {
        TileEntity entity=tiles[i];
        if (entity instanceof TileGenericPipe) {
          TileGenericPipe nearbyTile=(TileGenericPipe)entity;
          if (nearbyTile.pipe == null) {
            continue;
          }
          PipeTransportPower nearbyTransport=(PipeTransportPower)nearbyTile.pipe.transport;
          nearbyTransport.requestEnergy(ForgeDirection.VALID_DIRECTIONS[i].getOpposite(),transferQuery[i]);
        }
      }
    }
  }
  if (tracker.markTimeIfDelay(container.getWorldObj())) {
    PacketPowerUpdate packet=new PacketPowerUpdate(container.xCoord,container.yCoord,container.zCoord);
    packet.displayPower=displayPower;
    packet.overload=isOverloaded();
    BuildCraftTransport.instance.sendToPlayers(packet,container.getWorldObj(),container.xCoord,container.yCoord,container.zCoord,DefaultProps.PIPE_CONTENTS_RENDER_DIST);
  }
}","@Override public void updateEntity(){
  if (container.getWorldObj().isRemote) {
    for (int i=0; i < 6; i+=2) {
      movementStage[i / 2]=(movementStage[i / 2] + 0.01F) % 1.0F;
    }
    return;
  }
  step();
  init();
  System.arraycopy(displayPower,0,prevDisplayPower,0,6);
  Arrays.fill(displayPower,(short)0);
  int totalPowerContained=0;
  for (int in=0; in < 6; ++in) {
    totalPowerContained+=internalPower[in];
  }
  int totalPowerQuery=0;
  for (int out=0; out < 6; ++out) {
    if (internalPower[out] == 0) {
      totalPowerQuery+=powerQuery[out];
    }
  }
  int totalPowerConsumed=0;
  if (totalPowerContained > 0) {
    for (int out=0; out < 6; ++out) {
      externalPower[out]=0;
      if (powerQuery[out] > 0 && internalPower[out] == 0) {
        int powerConsumed=(int)Math.floor((double)(powerQuery[out] * totalPowerContained) / totalPowerQuery);
        boolean tilePowered=false;
        if (tiles[out] instanceof TileGenericPipe) {
          TileGenericPipe nearbyTile=(TileGenericPipe)tiles[out];
          PipeTransportPower nearbyTransport=(PipeTransportPower)nearbyTile.pipe.transport;
          powerConsumed=nearbyTransport.receiveEnergy(ForgeDirection.VALID_DIRECTIONS[out].getOpposite(),powerConsumed);
          tilePowered=true;
        }
 else         if (tiles[out] instanceof IEnergyHandler) {
          IEnergyHandler handler=(IEnergyHandler)tiles[out];
          if (handler.canConnectEnergy(ForgeDirection.VALID_DIRECTIONS[out].getOpposite())) {
            powerConsumed=handler.receiveEnergy(ForgeDirection.VALID_DIRECTIONS[out].getOpposite(),powerConsumed,false);
            tilePowered=true;
          }
        }
 else {
          PowerReceiver prov=getReceiverOnSide(ForgeDirection.VALID_DIRECTIONS[out]);
          if (prov != null) {
            powerConsumed=(int)Math.ceil(prov.receiveEnergy(Type.PIPE,(double)powerConsumed / 10.0,ForgeDirection.VALID_DIRECTIONS[out].getOpposite()) * 10);
            tilePowered=true;
          }
        }
        if (!tilePowered) {
          externalPower[out]=powerConsumed;
        }
        displayPower[out]+=powerConsumed;
        totalPowerConsumed+=powerConsumed;
      }
    }
  }
  if (totalPowerConsumed > 0) {
    for (int in=0; in < 6; ++in) {
      int powerConsumed=(int)Math.floor(internalPower[in] / totalPowerContained * totalPowerConsumed);
      displayPower[in]+=powerConsumed;
    }
  }
  highestPower=0;
  for (int i=0; i < 6; i++) {
    displayPower[i]=(short)((prevDisplayPower[i] * (DISPLAY_SMOOTHING - 1.0F) + displayPower[i]) / DISPLAY_SMOOTHING);
    if (displayPower[i] > highestPower) {
      highestPower=displayPower[i];
    }
    if (displayPower[i] < 0.01) {
      displayPower[i]=0;
    }
  }
  overload+=highestPower > maxPower * 0.95 ? 1 : -1;
  if (overload < 0) {
    overload=0;
  }
  if (overload > OVERLOAD_TICKS) {
    overload=OVERLOAD_TICKS;
  }
  for (  ForgeDirection dir : ForgeDirection.VALID_DIRECTIONS) {
    TileEntity tile=tiles[dir.ordinal()];
    if (tile instanceof IEnergyHandler) {
      IEnergyHandler handler=(IEnergyHandler)tile;
      if (handler.canConnectEnergy(dir.getOpposite())) {
        int request=handler.receiveEnergy(dir.getOpposite(),this.maxPower,true);
        if (request > 0) {
          requestEnergy(dir,request);
        }
      }
    }
 else     if (!(tile instanceof TileGenericPipe && ((TileGenericPipe)tile).pipe.transport instanceof PipeTransportPower)) {
      PowerReceiver prov=getReceiverOnSide(dir);
      if (prov != null) {
        int request=(int)Math.floor(prov.powerRequest() * 10);
        if (request > 0) {
          requestEnergy(dir,request);
        }
      }
    }
  }
  int[] transferQuery=new int[6];
  for (int i=0; i < 6; ++i) {
    transferQuery[i]=0;
    for (int j=0; j < 6; ++j) {
      if (j != i) {
        transferQuery[i]+=powerQuery[j];
      }
    }
    transferQuery[i]=Math.min(transferQuery[i],maxPower);
  }
  for (int i=0; i < 6; ++i) {
    if (transferQuery[i] != 0) {
      if (tiles[i] != null) {
        TileEntity entity=tiles[i];
        if (entity instanceof TileGenericPipe) {
          TileGenericPipe nearbyTile=(TileGenericPipe)entity;
          if (nearbyTile.pipe == null) {
            continue;
          }
          PipeTransportPower nearbyTransport=(PipeTransportPower)nearbyTile.pipe.transport;
          nearbyTransport.requestEnergy(ForgeDirection.VALID_DIRECTIONS[i].getOpposite(),transferQuery[i]);
        }
      }
    }
  }
  if (tracker.markTimeIfDelay(container.getWorldObj())) {
    PacketPowerUpdate packet=new PacketPowerUpdate(container.xCoord,container.yCoord,container.zCoord);
    packet.displayPower=displayPower;
    packet.overload=isOverloaded();
    BuildCraftTransport.instance.sendToPlayers(packet,container.getWorldObj(),container.xCoord,container.yCoord,container.zCoord,DefaultProps.PIPE_CONTENTS_RENDER_DIST);
  }
}",0.9979482970865818
156832,"private boolean writePrimitive(ByteBuf data,Class<?> formal,Object actual){
  if (int.class.equals(formal)) {
    data.writeInt((Integer)actual);
  }
 else   if (float.class.equals(formal)) {
    data.writeFloat((Float)actual);
  }
 else   if (double.class.equals(formal)) {
    data.writeDouble((Double)actual);
  }
 else   if (char.class.equals(formal)) {
    data.writeChar((Character)actual);
  }
 else   if (boolean.class.equals(formal)) {
    data.writeBoolean((Boolean)actual);
  }
 else   if (String.class.equals(formal)) {
    Utils.writeUTF(data,(String)actual);
  }
 else   if (Enum.class.isAssignableFrom(formal)) {
    data.writeByte((byte)((Enum)(actual)).ordinal());
  }
 else {
    return false;
  }
  return true;
}","private boolean writePrimitive(ByteBuf data,Class<?> formal,Object actual){
  if (int.class.equals(formal)) {
    data.writeInt((Integer)actual);
  }
 else   if (float.class.equals(formal)) {
    data.writeFloat((Float)actual);
  }
 else   if (double.class.equals(formal)) {
    data.writeDouble((Double)actual);
  }
 else   if (char.class.equals(formal)) {
    data.writeChar((Character)actual);
  }
 else   if (boolean.class.equals(formal)) {
    data.writeBoolean((Boolean)actual);
  }
 else   if (String.class.equals(formal)) {
    Utils.writeUTF(data,(String)actual);
  }
 else   if (Enum.class.isAssignableFrom(formal)) {
    data.writeByte((byte)((Enum)actual).ordinal());
  }
 else {
    return false;
  }
  return true;
}",0.902872777017784
156833,"@Override public void renderParticle(Tessellator p_70539_1_,float p_70539_2_,float p_70539_3_,float p_70539_4_,float p_70539_5_,float p_70539_6_,float p_70539_7_){
  float f6=(this.particleAge + p_70539_2_) / this.particleMaxAge * 32.0F;
  if (f6 < 0.0F) {
    f6=0.0F;
  }
  if (f6 > 1.0F) {
    f6=1.0F;
  }
  this.particleScale=this.smokeParticleScale * f6;
  super.renderParticle(p_70539_1_,p_70539_2_,p_70539_3_,p_70539_4_,p_70539_5_,p_70539_6_,p_70539_7_);
}","@Override public void renderParticle(Tessellator tesslator,float p2,float p3,float p4,float p5,float p6,float p7){
  float f6=(this.particleAge + p2) / this.particleMaxAge * 32.0F;
  if (f6 < 0.0F) {
    f6=0.0F;
  }
  if (f6 > 1.0F) {
    f6=1.0F;
  }
  this.particleScale=this.smokeParticleScale * f6;
  super.renderParticle(tesslator,p2,p3,p4,p5,p6,p7);
}",0.656934306569343
156834,"@Override public void dock(IDockingStation station){
  currentDockingStation=(DockingStation)station;
  setSteamDirection(currentDockingStation.side.offsetX,currentDockingStation.side.offsetY,currentDockingStation.side.offsetZ);
}","@Override public void dock(IDockingStation station){
  currentDockingStation=(DockingStation)station;
  setSteamDirection(currentDockingStation.side.offsetX,currentDockingStation.side.offsetY,currentDockingStation.side.offsetZ);
  currentDockingStationIndex=currentDockingStation.index();
  currentDockingStationSide=currentDockingStation.side();
}",0.7958477508650519
156835,"public void setMainStation(IDockingStation iStation){
  DockingStation station=(DockingStation)iStation;
  if (linkedDockingStation != null && linkedDockingStation != station) {
    ((DockingStation)linkedDockingStation).release(this);
  }
  linkedDockingStation=station;
}","public void setMainStation(IDockingStation iStation){
  DockingStation station=(DockingStation)iStation;
  if (linkedDockingStation != null && linkedDockingStation != station) {
    ((DockingStation)linkedDockingStation).release(this);
  }
  linkedDockingStation=station;
  linkedDockingStationIndex=linkedDockingStation.index();
  linkedDockingStationSide=linkedDockingStation.side();
}",0.8272727272727273
156836,"@Override public void undock(){
  if (currentDockingStation != null) {
    currentDockingStation.release(this);
    currentDockingStation=null;
    setSteamDirection(0,-1,0);
  }
}","@Override public void undock(){
  if (currentDockingStation != null) {
    currentDockingStation.release(this);
    currentDockingStation=null;
    setSteamDirection(0,-1,0);
    currentDockingStationIndex=null;
    currentDockingStationSide=null;
  }
}",0.8314087759815243
156837,"@Override public void onEntityUpdate(){
  if (!firstUpdateDone) {
    firstUpdate();
    firstUpdateDone=true;
  }
  if (!worldObj.isRemote && needsUpdate) {
    updateDataServer();
    needsUpdate=false;
  }
  if (worldObj.isRemote) {
    updateDataClient();
    energyFX+=energySpendPerCycle;
    if (energyFX >= 10) {
      energyFX=0;
      Minecraft.getMinecraft().effectRenderer.addEffect(new EntityRobotEnergyFX(worldObj,posX + steamDx * 0.25,posY + steamDy * 0.25,posZ + steamDz * 0.25,steamDx * 0.05,steamDy * 0.05,steamDz * 0.05,energySpendPerCycle * 0.75F < 1 ? 1 : energySpendPerCycle * 0.75F));
    }
  }
  if (currentDockingStation != null) {
    motionX=0;
    motionY=0;
    motionZ=0;
    posX=currentDockingStation.x() + 0.5F + currentDockingStation.side().offsetX * 0.5F;
    posY=currentDockingStation.y() + 0.5F + currentDockingStation.side().offsetY * 0.5F;
    posZ=currentDockingStation.z() + 0.5F + currentDockingStation.side().offsetZ * 0.5F;
  }
  if (!worldObj.isRemote) {
    if (linkedDockingStation == null) {
      linkedDockingStation=RobotRegistry.getRegistry(worldObj).getStation(linkedDockingStationIndex.x,linkedDockingStationIndex.y,linkedDockingStationIndex.z,linkedDockingStationSide);
      linkedDockingStationIndex=null;
      if (linkedDockingStation == null || linkedDockingStation.robotTaking() != this) {
        setDead();
        return;
      }
    }
    if (currentDockingStationIndex != null) {
      currentDockingStation=(DockingStation)RobotRegistry.getRegistry(worldObj).getStation(currentDockingStationIndex.x,currentDockingStationIndex.y,currentDockingStationIndex.z,currentDockingStationSide);
      currentDockingStationIndex=null;
    }
    if (linkedDockingStation != null) {
      mainAI.cycle();
      if (energySpendPerCycle != (float)mainAI.getActiveAI().getEnergyCost()) {
        energySpendPerCycle=(float)mainAI.getActiveAI().getEnergyCost();
        needsUpdate=true;
      }
      if (mjStored <= 0) {
        setDead();
      }
    }
  }
  super.onEntityUpdate();
}","@Override public void onEntityUpdate(){
  if (!firstUpdateDone) {
    firstUpdate();
    firstUpdateDone=true;
  }
  if (!worldObj.isRemote && needsUpdate) {
    updateDataServer();
    needsUpdate=false;
  }
  if (worldObj.isRemote) {
    updateDataClient();
    energyFX+=energySpendPerCycle;
    if (energyFX >= 10) {
      energyFX=0;
      Minecraft.getMinecraft().effectRenderer.addEffect(new EntityRobotEnergyFX(worldObj,posX + steamDx * 0.25,posY + steamDy * 0.25,posZ + steamDz * 0.25,steamDx * 0.05,steamDy * 0.05,steamDz * 0.05,energySpendPerCycle * 0.75F < 1 ? 1 : energySpendPerCycle * 0.75F));
    }
  }
  if (currentDockingStation != null) {
    motionX=0;
    motionY=0;
    motionZ=0;
    posX=currentDockingStation.x() + 0.5F + currentDockingStation.side().offsetX * 0.5F;
    posY=currentDockingStation.y() + 0.5F + currentDockingStation.side().offsetY * 0.5F;
    posZ=currentDockingStation.z() + 0.5F + currentDockingStation.side().offsetZ * 0.5F;
  }
  if (!worldObj.isRemote) {
    if (linkedDockingStation == null) {
      linkedDockingStation=RobotRegistry.getRegistry(worldObj).getStation(linkedDockingStationIndex.x,linkedDockingStationIndex.y,linkedDockingStationIndex.z,linkedDockingStationSide);
      if (linkedDockingStation == null || linkedDockingStation.robotTaking() != this) {
        setDead();
        return;
      }
    }
    if (currentDockingStationIndex != null && currentDockingStation == null) {
      currentDockingStation=(DockingStation)RobotRegistry.getRegistry(worldObj).getStation(currentDockingStationIndex.x,currentDockingStationIndex.y,currentDockingStationIndex.z,currentDockingStationSide);
    }
    if (linkedDockingStation != null) {
      mainAI.cycle();
      if (energySpendPerCycle != (float)mainAI.getActiveAI().getEnergyCost()) {
        energySpendPerCycle=(float)mainAI.getActiveAI().getEnergyCost();
        needsUpdate=true;
      }
      if (mjStored <= 0) {
        setDead();
      }
    }
  }
  super.onEntityUpdate();
}",0.972718253968254
156838,"@Override public void writeEntityToNBT(NBTTagCompound nbt){
  super.writeEntityToNBT(nbt);
  NBTTagCompound linkedStationNBT=new NBTTagCompound();
  NBTTagCompound linkedStationIndexNBT=new NBTTagCompound();
  linkedDockingStation.index().writeTo(linkedStationIndexNBT);
  linkedStationNBT.setTag(""String_Node_Str"",linkedStationIndexNBT);
  linkedStationNBT.setByte(""String_Node_Str"",(byte)linkedDockingStation.side().ordinal());
  nbt.setTag(""String_Node_Str"",linkedStationNBT);
  if (currentDockingStation != null) {
    NBTTagCompound currentStationNBT=new NBTTagCompound();
    NBTTagCompound currentStationIndexNBT=new NBTTagCompound();
    currentDockingStation.index().writeTo(currentStationIndexNBT);
    currentStationNBT.setTag(""String_Node_Str"",currentStationIndexNBT);
    currentStationNBT.setByte(""String_Node_Str"",(byte)currentDockingStation.side().ordinal());
    nbt.setTag(""String_Node_Str"",currentStationNBT);
  }
  NBTTagCompound nbtLaser=new NBTTagCompound();
  laser.writeToNBT(nbtLaser);
  nbt.setTag(""String_Node_Str"",nbtLaser);
  nbt.setDouble(""String_Node_Str"",mjStored);
  if (itemInUse != null) {
    NBTTagCompound itemNBT=new NBTTagCompound();
    itemInUse.writeToNBT(itemNBT);
    nbt.setTag(""String_Node_Str"",itemNBT);
    nbt.setBoolean(""String_Node_Str"",itemActive);
  }
  for (int i=0; i < inv.length; ++i) {
    NBTTagCompound stackNbt=new NBTTagCompound();
    if (inv[i] != null) {
      nbt.setTag(""String_Node_Str"" + i + ""String_Node_Str"",inv[i].writeToNBT(stackNbt));
    }
  }
  nbt.setTag(""String_Node_Str"",originalBoardNBT);
  NBTTagCompound ai=new NBTTagCompound();
  mainAI.writeToNBT(ai);
  nbt.setTag(""String_Node_Str"",ai);
  if (mainAI.getDelegateAI() != board) {
    NBTTagCompound boardNBT=new NBTTagCompound();
    board.writeToNBT(boardNBT);
    nbt.setTag(""String_Node_Str"",boardNBT);
  }
  nbt.setLong(""String_Node_Str"",robotId);
  if (tank != null) {
    NBTTagCompound tankNBT=new NBTTagCompound();
    tank.writeToNBT(tankNBT);
    nbt.setTag(""String_Node_Str"",tankNBT);
  }
}","@Override public void writeEntityToNBT(NBTTagCompound nbt){
  super.writeEntityToNBT(nbt);
  NBTTagCompound linkedStationNBT=new NBTTagCompound();
  NBTTagCompound linkedStationIndexNBT=new NBTTagCompound();
  linkedDockingStationIndex.writeTo(linkedStationIndexNBT);
  linkedStationNBT.setTag(""String_Node_Str"",linkedStationIndexNBT);
  linkedStationNBT.setByte(""String_Node_Str"",(byte)linkedDockingStationSide.ordinal());
  nbt.setTag(""String_Node_Str"",linkedStationNBT);
  if (currentDockingStationIndex != null) {
    NBTTagCompound currentStationNBT=new NBTTagCompound();
    NBTTagCompound currentStationIndexNBT=new NBTTagCompound();
    currentDockingStationIndex.writeTo(currentStationIndexNBT);
    currentStationNBT.setTag(""String_Node_Str"",currentStationIndexNBT);
    currentStationNBT.setByte(""String_Node_Str"",(byte)currentDockingStationSide.ordinal());
    nbt.setTag(""String_Node_Str"",currentStationNBT);
  }
  NBTTagCompound nbtLaser=new NBTTagCompound();
  laser.writeToNBT(nbtLaser);
  nbt.setTag(""String_Node_Str"",nbtLaser);
  nbt.setDouble(""String_Node_Str"",mjStored);
  if (itemInUse != null) {
    NBTTagCompound itemNBT=new NBTTagCompound();
    itemInUse.writeToNBT(itemNBT);
    nbt.setTag(""String_Node_Str"",itemNBT);
    nbt.setBoolean(""String_Node_Str"",itemActive);
  }
  for (int i=0; i < inv.length; ++i) {
    NBTTagCompound stackNbt=new NBTTagCompound();
    if (inv[i] != null) {
      nbt.setTag(""String_Node_Str"" + i + ""String_Node_Str"",inv[i].writeToNBT(stackNbt));
    }
  }
  nbt.setTag(""String_Node_Str"",originalBoardNBT);
  NBTTagCompound ai=new NBTTagCompound();
  mainAI.writeToNBT(ai);
  nbt.setTag(""String_Node_Str"",ai);
  if (mainAI.getDelegateAI() != board) {
    NBTTagCompound boardNBT=new NBTTagCompound();
    board.writeToNBT(boardNBT);
    nbt.setTag(""String_Node_Str"",boardNBT);
  }
  nbt.setLong(""String_Node_Str"",robotId);
  if (tank != null) {
    NBTTagCompound tankNBT=new NBTTagCompound();
    tank.writeToNBT(tankNBT);
    nbt.setTag(""String_Node_Str"",tankNBT);
  }
}",0.9908934285011076
156839,"@Override public void delegateAIEnded(AIRobot ai){
  if (ai instanceof AIRobotSearchStackRequest) {
    if (!ai.success()) {
      deliveryBlacklist.clear();
      startDelegateAI(new AIRobotGotoSleep(robot));
    }
 else {
      currentRequest=((AIRobotSearchStackRequest)ai).request;
      if (!currentRequest.station.take(robot)) {
        currentRequest=null;
      }
    }
  }
 else   if (ai instanceof AIRobotGotoStationAndLoad) {
    if (!ai.success()) {
      deliveryBlacklist.add(currentRequest.stack);
      robot.releaseResources();
      currentRequest=null;
    }
 else {
      startDelegateAI(new AIRobotDeliverRequested(robot,currentRequest));
    }
  }
 else   if (ai instanceof AIRobotDeliverRequested) {
    robot.releaseResources();
  }
}","@Override public void delegateAIEnded(AIRobot ai){
  if (ai instanceof AIRobotSearchStackRequest) {
    if (!ai.success()) {
      deliveryBlacklist.clear();
      startDelegateAI(new AIRobotGotoSleep(robot));
    }
 else {
      currentRequest=((AIRobotSearchStackRequest)ai).request;
      if (!currentRequest.station.take(robot)) {
        currentRequest=null;
      }
    }
  }
 else   if (ai instanceof AIRobotGotoStationAndLoad) {
    if (!ai.success()) {
      deliveryBlacklist.add(currentRequest.stack);
      robot.releaseResources();
      currentRequest=null;
    }
 else {
      startDelegateAI(new AIRobotDeliverRequested(robot,currentRequest));
    }
  }
 else   if (ai instanceof AIRobotDeliverRequested) {
    robot.releaseResources();
    currentRequest=null;
  }
}",0.9798831927319922
156840,"private IIcon tryGetBlockIcon(Block block,int side,int decodedMeta){
  try {
    IIcon icon=block.getIcon(side,decodedMeta);
    if (icon != null) {
      return icon;
    }
 else {
      return Blocks.cobblestone.getIcon(0,0);
    }
  }
 catch (  Throwable t) {
    try {
      return block.getBlockTextureFromSide(side);
    }
 catch (    Throwable t2) {
      return PipeIconProvider.TYPE.TransparentFacade.getIcon();
    }
  }
}","private IIcon tryGetBlockIcon(Block block,int side,int decodedMeta){
  try {
    IIcon icon=block.getIcon(side,decodedMeta);
    if (icon != null) {
      return icon;
    }
 else {
      return PipeIconProvider.TYPE.TransparentFacade.getIcon();
    }
  }
 catch (  Throwable t) {
    try {
      return block.getBlockTextureFromSide(side);
    }
 catch (    Throwable t2) {
      return PipeIconProvider.TYPE.TransparentFacade.getIcon();
    }
  }
}",0.9342403628117912
156841,"@Override public void update(){
  blockDamage+=speed / hardness / 30F;
  if (blockDamage > 1.0F) {
    robot.worldObj.destroyBlockInWorldPartially(robot.getEntityId(),blockToBreak.x,blockToBreak.y,blockToBreak.z,-1);
    blockDamage=0;
    if (robot.getHeldItem() != null) {
      robot.getHeldItem().getItem().onBlockStartBreak(robot.getHeldItem(),blockToBreak.x,blockToBreak.y,blockToBreak.z,CoreProxy.proxy.getBuildCraftPlayer((WorldServer)robot.worldObj).get());
    }
    BlockUtil.breakBlock((WorldServer)robot.worldObj,blockToBreak.x,blockToBreak.y,blockToBreak.z,6000);
    robot.worldObj.playAuxSFXAtEntity(null,2001,blockToBreak.x,blockToBreak.y,blockToBreak.z,Block.getIdFromBlock(block) + (meta << 12));
    if (robot.getHeldItem() != null) {
      robot.getHeldItem().getItem().onBlockDestroyed(robot.getHeldItem(),robot.worldObj,block,blockToBreak.x,blockToBreak.y,blockToBreak.z,robot);
      if (robot.getHeldItem().getItemDamage() >= robot.getHeldItem().getMaxDamage()) {
        robot.setItemInUse(null);
      }
    }
    terminate();
  }
 else {
    robot.worldObj.destroyBlockInWorldPartially(robot.getEntityId(),blockToBreak.x,blockToBreak.y,blockToBreak.z,(int)(blockDamage * 10.0F) - 1);
  }
}","@Override public void update(){
  if (hardness == 0) {
    terminate();
    return;
  }
  blockDamage+=speed / hardness / 30F;
  if (blockDamage > 1.0F) {
    robot.worldObj.destroyBlockInWorldPartially(robot.getEntityId(),blockToBreak.x,blockToBreak.y,blockToBreak.z,-1);
    blockDamage=0;
    if (robot.getHeldItem() != null) {
      robot.getHeldItem().getItem().onBlockStartBreak(robot.getHeldItem(),blockToBreak.x,blockToBreak.y,blockToBreak.z,CoreProxy.proxy.getBuildCraftPlayer((WorldServer)robot.worldObj).get());
    }
    BlockUtil.breakBlock((WorldServer)robot.worldObj,blockToBreak.x,blockToBreak.y,blockToBreak.z,6000);
    robot.worldObj.playAuxSFXAtEntity(null,2001,blockToBreak.x,blockToBreak.y,blockToBreak.z,Block.getIdFromBlock(block) + (meta << 12));
    if (robot.getHeldItem() != null) {
      robot.getHeldItem().getItem().onBlockDestroyed(robot.getHeldItem(),robot.worldObj,block,blockToBreak.x,blockToBreak.y,blockToBreak.z,robot);
      if (robot.getHeldItem().getItemDamage() >= robot.getHeldItem().getMaxDamage()) {
        robot.setItemInUse(null);
      }
    }
    terminate();
  }
 else {
    robot.worldObj.destroyBlockInWorldPartially(robot.getEntityId(),blockToBreak.x,blockToBreak.y,blockToBreak.z,(int)(blockDamage * 10.0F) - 1);
  }
}",0.9775100401606426
156842,"@Override protected void entityInit(){
  super.entityInit();
  setNullBoundingBox();
  preventEntitySpawning=false;
  noClip=true;
  isImmuneToFire=true;
  dataWatcher.addObject(12,Float.valueOf(0));
  dataWatcher.addObject(13,Float.valueOf(0));
  dataWatcher.addObject(14,Float.valueOf(0));
  dataWatcher.addObject(15,Byte.valueOf((byte)0));
  dataWatcher.addObject(16,""String_Node_Str"");
  dataWatcher.addObject(17,Float.valueOf(0));
  dataWatcher.addObject(18,Float.valueOf(0));
}","@Override protected void entityInit(){
  super.entityInit();
  setNullBoundingBox();
  preventEntitySpawning=false;
  noClip=true;
  isImmuneToFire=true;
  dataWatcher.addObject(12,Float.valueOf(0));
  dataWatcher.addObject(13,Float.valueOf(0));
  dataWatcher.addObject(14,Float.valueOf(0));
  dataWatcher.addObject(15,Byte.valueOf((byte)0));
  dataWatcher.addObject(16,""String_Node_Str"");
  dataWatcher.addObject(17,Float.valueOf(0));
  dataWatcher.addObject(18,Float.valueOf(0));
  dataWatcher.addObject(19,Float.valueOf(0));
}",0.9545454545454546
156843,"@Override public void onEntityUpdate(){
  if (!firstUpdateDone) {
    firstUpdate();
    firstUpdateDone=true;
  }
  if (!worldObj.isRemote && needsUpdate) {
    updateDataServer();
    needsUpdate=false;
  }
  if (worldObj.isRemote) {
    updateDataClient();
  }
  if (currentDockingStation != null) {
    motionX=0;
    motionY=0;
    motionZ=0;
    posX=currentDockingStation.x() + 0.5F + currentDockingStation.side().offsetX * 0.5F;
    posY=currentDockingStation.y() + 0.5F + currentDockingStation.side().offsetY * 0.5F;
    posZ=currentDockingStation.z() + 0.5F + currentDockingStation.side().offsetZ * 0.5F;
  }
  if (!worldObj.isRemote) {
    if (linkedDockingStation == null) {
      linkedDockingStation=RobotRegistry.getRegistry(worldObj).getStation(linkedDockingStationIndex.x,linkedDockingStationIndex.y,linkedDockingStationIndex.z,linkedDockingStationSide);
      linkedDockingStationIndex=null;
      if (linkedDockingStation.robotTaking() != this) {
        setDead();
        return;
      }
    }
    if (currentDockingStationIndex != null) {
      currentDockingStation=(DockingStation)RobotRegistry.getRegistry(worldObj).getStation(currentDockingStationIndex.x,currentDockingStationIndex.y,currentDockingStationIndex.z,currentDockingStationSide);
      currentDockingStationIndex=null;
    }
    if (linkedDockingStation != null) {
      mainAI.cycle();
      if (mjStored <= 0) {
        setDead();
      }
    }
  }
  super.onEntityUpdate();
}","@Override public void onEntityUpdate(){
  if (!firstUpdateDone) {
    firstUpdate();
    firstUpdateDone=true;
  }
  if (!worldObj.isRemote && needsUpdate) {
    updateDataServer();
    needsUpdate=false;
  }
  if (worldObj.isRemote) {
    updateDataClient();
    energyFX+=energySpendPerCycle;
    if (energyFX >= 10) {
      energyFX=0;
      ForgeDirection dir=ForgeDirection.values()[worldObj.rand.nextInt(6)];
      dir=ForgeDirection.UP;
      Minecraft.getMinecraft().effectRenderer.addEffect(new EntityRobotEnergyFX(worldObj,posX + dir.offsetX * 0.25,posY + dir.offsetY * 0.25,posZ + dir.offsetZ * 0.25,dir.offsetX * 0.05,dir.offsetY * 0.05,dir.offsetZ * 0.05,energySpendPerCycle < 1 ? 1 : energySpendPerCycle));
    }
  }
  if (currentDockingStation != null) {
    motionX=0;
    motionY=0;
    motionZ=0;
    posX=currentDockingStation.x() + 0.5F + currentDockingStation.side().offsetX * 0.5F;
    posY=currentDockingStation.y() + 0.5F + currentDockingStation.side().offsetY * 0.5F;
    posZ=currentDockingStation.z() + 0.5F + currentDockingStation.side().offsetZ * 0.5F;
  }
  if (!worldObj.isRemote) {
    if (linkedDockingStation == null) {
      linkedDockingStation=RobotRegistry.getRegistry(worldObj).getStation(linkedDockingStationIndex.x,linkedDockingStationIndex.y,linkedDockingStationIndex.z,linkedDockingStationSide);
      linkedDockingStationIndex=null;
      if (linkedDockingStation.robotTaking() != this) {
        setDead();
        return;
      }
    }
    if (currentDockingStationIndex != null) {
      currentDockingStation=(DockingStation)RobotRegistry.getRegistry(worldObj).getStation(currentDockingStationIndex.x,currentDockingStationIndex.y,currentDockingStationIndex.z,currentDockingStationSide);
      currentDockingStationIndex=null;
    }
    if (linkedDockingStation != null) {
      mainAI.cycle();
      if (energySpendPerCycle != (float)mainAI.getActiveAI().getEnergyCost()) {
        energySpendPerCycle=(float)mainAI.getActiveAI().getEnergyCost();
        needsUpdate=true;
      }
      if (mjStored <= 0) {
        setDead();
      }
    }
  }
  super.onEntityUpdate();
}",0.3404017857142857
156844,"protected void updateDataClient(){
  laser.tail.x=dataWatcher.getWatchableObjectFloat(12);
  laser.tail.y=dataWatcher.getWatchableObjectFloat(13);
  laser.tail.z=dataWatcher.getWatchableObjectFloat(14);
  laser.isVisible=dataWatcher.getWatchableObjectByte(15) == 1;
  RedstoneBoardNBT<?> boardNBT=RedstoneBoardRegistry.instance.getRedstoneBoard(dataWatcher.getWatchableObjectString(16));
  if (boardNBT != null) {
    texture=((RedstoneBoardRobotNBT)boardNBT).getRobotTexture();
  }
  itemAngle1=dataWatcher.getWatchableObjectFloat(17);
  itemAngle2=dataWatcher.getWatchableObjectFloat(18);
}","protected void updateDataClient(){
  laser.tail.x=dataWatcher.getWatchableObjectFloat(12);
  laser.tail.y=dataWatcher.getWatchableObjectFloat(13);
  laser.tail.z=dataWatcher.getWatchableObjectFloat(14);
  laser.isVisible=dataWatcher.getWatchableObjectByte(15) == 1;
  RedstoneBoardNBT<?> boardNBT=RedstoneBoardRegistry.instance.getRedstoneBoard(dataWatcher.getWatchableObjectString(16));
  if (boardNBT != null) {
    texture=((RedstoneBoardRobotNBT)boardNBT).getRobotTexture();
  }
  itemAngle1=dataWatcher.getWatchableObjectFloat(17);
  itemAngle2=dataWatcher.getWatchableObjectFloat(18);
  energySpendPerCycle=dataWatcher.getWatchableObjectFloat(19);
}",0.9494787489975942
156845,"protected void updateDataServer(){
  dataWatcher.updateObject(12,Float.valueOf((float)laser.tail.x));
  dataWatcher.updateObject(13,Float.valueOf((float)laser.tail.y));
  dataWatcher.updateObject(14,Float.valueOf((float)laser.tail.z));
  dataWatcher.updateObject(15,Byte.valueOf((byte)(laser.isVisible ? 1 : 0)));
  dataWatcher.updateObject(17,Float.valueOf(itemAngle1));
  dataWatcher.updateObject(18,Float.valueOf(itemAngle2));
}","protected void updateDataServer(){
  dataWatcher.updateObject(12,Float.valueOf((float)laser.tail.x));
  dataWatcher.updateObject(13,Float.valueOf((float)laser.tail.y));
  dataWatcher.updateObject(14,Float.valueOf((float)laser.tail.z));
  dataWatcher.updateObject(15,Byte.valueOf((byte)(laser.isVisible ? 1 : 0)));
  dataWatcher.updateObject(17,Float.valueOf(itemAngle1));
  dataWatcher.updateObject(18,Float.valueOf(itemAngle2));
  dataWatcher.updateObject(19,energySpendPerCycle);
}",0.9431072210065644
156846,"@Override public void update(){
  if (robot.getHeldItem() == null) {
    startDelegateAI(new AIRobotFetchAndEquipItemStack(robot,new IStackFilter(){
      @Override public boolean matches(      ItemStack stack){
        return stack != null && stack.getItem() instanceof ItemHoe;
      }
    }
));
  }
 else {
    startDelegateAI(new AIRobotSearchBlock(robot,new IBlockFilter(){
      @Override public boolean matches(      World world,      int x,      int y,      int z){
        return BuildCraftAPI.isDirtProperty.get(world,x,y,z) && robot.getRegistry().isTaken(new ResourceIdBlock(x,y,z)) && isAirAbove(world,x,y,z);
      }
    }
));
  }
}","@Override public void update(){
  if (robot.getHeldItem() == null) {
    startDelegateAI(new AIRobotFetchAndEquipItemStack(robot,new IStackFilter(){
      @Override public boolean matches(      ItemStack stack){
        return stack != null && stack.getItem() instanceof ItemHoe;
      }
    }
));
  }
 else {
    startDelegateAI(new AIRobotSearchBlock(robot,new IBlockFilter(){
      @Override public boolean matches(      World world,      int x,      int y,      int z){
        return BuildCraftAPI.isDirtProperty.get(world,x,y,z) && !robot.getRegistry().isTaken(new ResourceIdBlock(x,y,z)) && isAirAbove(world,x,y,z);
      }
    }
));
  }
}",0.9992254066615028
156847,"@Override public boolean matches(World world,int x,int y,int z){
  return BuildCraftAPI.isDirtProperty.get(world,x,y,z) && robot.getRegistry().isTaken(new ResourceIdBlock(x,y,z)) && isAirAbove(world,x,y,z);
}","@Override public boolean matches(World world,int x,int y,int z){
  return BuildCraftAPI.isDirtProperty.get(world,x,y,z) && !robot.getRegistry().isTaken(new ResourceIdBlock(x,y,z)) && isAirAbove(world,x,y,z);
}",0.9976019184652278
156848,"@Override public final void update(){
  if (!isExpectedTool(null) && robot.getHeldItem() == null) {
    startDelegateAI(new AIRobotFetchAndEquipItemStack(robot,new IStackFilter(){
      @Override public boolean matches(      ItemStack stack){
        return isExpectedTool(stack);
      }
    }
));
  }
 else {
    startDelegateAI(new AIRobotSearchBlock(robot,new IBlockFilter(){
      @Override public boolean matches(      World world,      int x,      int y,      int z){
        if (isExpectedBlock(world,x,y,z) && matchesGateFilter(world,x,y,z)) {
          return robot.getRegistry().isTaken(new ResourceIdBlock(x,y,z));
        }
 else {
          return false;
        }
      }
    }
));
  }
}","@Override public final void update(){
  if (!isExpectedTool(null) && robot.getHeldItem() == null) {
    startDelegateAI(new AIRobotFetchAndEquipItemStack(robot,new IStackFilter(){
      @Override public boolean matches(      ItemStack stack){
        return isExpectedTool(stack);
      }
    }
));
  }
 else {
    startDelegateAI(new AIRobotSearchBlock(robot,new IBlockFilter(){
      @Override public boolean matches(      World world,      int x,      int y,      int z){
        if (isExpectedBlock(world,x,y,z) && matchesGateFilter(world,x,y,z)) {
          return !robot.getRegistry().isTaken(new ResourceIdBlock(x,y,z));
        }
 else {
          return false;
        }
      }
    }
));
  }
}",0.999288256227758
156849,"@Override public boolean matches(World world,int x,int y,int z){
  if (isExpectedBlock(world,x,y,z) && matchesGateFilter(world,x,y,z)) {
    return robot.getRegistry().isTaken(new ResourceIdBlock(x,y,z));
  }
 else {
    return false;
  }
}","@Override public boolean matches(World world,int x,int y,int z){
  if (isExpectedBlock(world,x,y,z) && matchesGateFilter(world,x,y,z)) {
    return !robot.getRegistry().isTaken(new ResourceIdBlock(x,y,z));
  }
 else {
    return false;
  }
}",0.997920997920998
156850,"@Override public void update(){
  if (robot.getHeldItem() == null) {
    Collection<ItemStack> gateFilter=ActionRobotFilter.getGateFilterStacks(robot.getLinkedStation());
    if (gateFilter.size() != 0) {
      ArrayList<ItemStack> filteredFilter=new ArrayList<ItemStack>();
      for (      ItemStack tentative : gateFilter) {
        if (stackFilter.matches(tentative)) {
          filteredFilter.add(tentative);
        }
      }
      if (filteredFilter.size() > 0) {
        ArrayStackFilter arrayFilter=new ArrayStackFilter(filteredFilter.toArray(new ItemStack[filteredFilter.size()]));
        startDelegateAI(new AIRobotFetchAndEquipItemStack(robot,arrayFilter));
      }
 else {
        startDelegateAI(new AIRobotGotoSleep(robot));
      }
    }
 else {
      startDelegateAI(new AIRobotFetchAndEquipItemStack(robot,stackFilter));
    }
  }
 else {
    if (robot.getHeldItem().getItem() instanceof ItemSeeds) {
      startDelegateAI(new AIRobotSearchBlock(robot,new IBlockFilter(){
        @Override public boolean matches(        World world,        int x,        int y,        int z){
          return BuildCraftAPI.isFarmlandProperty.get(world,x,y,z) && robot.getRegistry().isTaken(new ResourceIdBlock(x,y,z)) && isAirAbove(world,x,y,z);
        }
      }
));
    }
 else {
      startDelegateAI(new AIRobotGotoRandomGroundBlock(robot,100,new IBlockFilter(){
        @Override public boolean matches(        World world,        int x,        int y,        int z){
          Block b=robot.worldObj.getBlock(x,y,z);
          return b instanceof BlockDirt || b instanceof BlockGrass;
        }
      }
,robot.getZoneToWork()));
    }
  }
}","@Override public void update(){
  if (robot.getHeldItem() == null) {
    Collection<ItemStack> gateFilter=ActionRobotFilter.getGateFilterStacks(robot.getLinkedStation());
    if (gateFilter.size() != 0) {
      ArrayList<ItemStack> filteredFilter=new ArrayList<ItemStack>();
      for (      ItemStack tentative : gateFilter) {
        if (stackFilter.matches(tentative)) {
          filteredFilter.add(tentative);
        }
      }
      if (filteredFilter.size() > 0) {
        ArrayStackFilter arrayFilter=new ArrayStackFilter(filteredFilter.toArray(new ItemStack[filteredFilter.size()]));
        startDelegateAI(new AIRobotFetchAndEquipItemStack(robot,arrayFilter));
      }
 else {
        startDelegateAI(new AIRobotGotoSleep(robot));
      }
    }
 else {
      startDelegateAI(new AIRobotFetchAndEquipItemStack(robot,stackFilter));
    }
  }
 else {
    if (robot.getHeldItem().getItem() instanceof ItemSeeds) {
      startDelegateAI(new AIRobotSearchBlock(robot,new IBlockFilter(){
        @Override public boolean matches(        World world,        int x,        int y,        int z){
          return BuildCraftAPI.isFarmlandProperty.get(world,x,y,z) && !robot.getRegistry().isTaken(new ResourceIdBlock(x,y,z)) && isAirAbove(world,x,y,z);
        }
      }
));
    }
 else {
      startDelegateAI(new AIRobotGotoRandomGroundBlock(robot,100,new IBlockFilter(){
        @Override public boolean matches(        World world,        int x,        int y,        int z){
          Block b=robot.worldObj.getBlock(x,y,z);
          return b instanceof BlockDirt || b instanceof BlockGrass;
        }
      }
,robot.getZoneToWork()));
    }
  }
}",0.9996970614965162
156851,"private void render(ItemRenderType type,ItemStack stack){
  GL11.glPushMatrix();
  GL11.glDisable(GL11.GL_LIGHTING);
  IIcon icon=ItemGate.getLogic(stack).getIconItem();
  renderItem.renderIcon(0,0,icon,16,16);
  if (type == ItemRenderType.ENTITY)   GL11.glTranslatef(0,0,-0.01f);
  icon=ItemGate.getMaterial(stack).getIconItem();
  if (icon != null)   renderItem.renderIcon(0,0,icon,16,16);
  for (  IGateExpansion expansion : ItemGate.getInstalledExpansions(stack)) {
    icon=expansion.getOverlayItem();
    if (icon != null)     renderItem.renderIcon(0,0,icon,16,16);
  }
  GL11.glEnable(GL11.GL_LIGHTING);
  GL11.glPopMatrix();
}","private void render(ItemRenderType type,ItemStack stack){
  GL11.glPushMatrix();
  GL11.glDisable(GL11.GL_LIGHTING);
  GL11.glEnable(GL11.GL_ALPHA_TEST);
  IIcon icon=ItemGate.getLogic(stack).getIconItem();
  renderItem.renderIcon(0,0,icon,16,16);
  if (type == ItemRenderType.ENTITY)   GL11.glTranslatef(0,0,-0.01f);
  icon=ItemGate.getMaterial(stack).getIconItem();
  if (icon != null)   renderItem.renderIcon(0,0,icon,16,16);
  for (  IGateExpansion expansion : ItemGate.getInstalledExpansions(stack)) {
    icon=expansion.getOverlayItem();
    if (icon != null)     renderItem.renderIcon(0,0,icon,16,16);
  }
  GL11.glEnable(GL11.GL_LIGHTING);
  GL11.glPopMatrix();
}",0.971647509578544
156852,"private void renderPipeItem(RenderBlocks render,ItemStack item,float translateX,float translateY,float translateZ){
  Tessellator tessellator=Tessellator.instance;
  Block block=BuildCraftTransport.genericPipeBlock;
  IIcon icon=item.getItem().getIconFromDamage(0);
  if (icon == null)   icon=((TextureMap)Minecraft.getMinecraft().getTextureManager().getTexture(TextureMap.locationBlocksTexture)).getAtlasSprite(""String_Node_Str"");
  block.setBlockBounds(CoreConstants.PIPE_MIN_POS,0.0F,CoreConstants.PIPE_MIN_POS,CoreConstants.PIPE_MAX_POS,1.0F,CoreConstants.PIPE_MAX_POS);
  block.setBlockBoundsForItemRender();
  render.setRenderBoundsFromBlock(block);
  GL11.glTranslatef(translateX,translateY,translateZ);
  tessellator.startDrawingQuads();
  tessellator.setNormal(0.0F,-1F,0.0F);
  render.renderFaceYNeg(block,0.0D,0.0D,0.0D,icon);
  tessellator.draw();
  tessellator.startDrawingQuads();
  tessellator.setNormal(0.0F,1.0F,0.0F);
  render.renderFaceYPos(block,0.0D,0.0D,0.0D,icon);
  tessellator.draw();
  tessellator.startDrawingQuads();
  tessellator.setNormal(0.0F,0.0F,-1F);
  render.renderFaceZNeg(block,0.0D,0.0D,0.0D,icon);
  tessellator.draw();
  tessellator.startDrawingQuads();
  tessellator.setNormal(0.0F,0.0F,1.0F);
  render.renderFaceZPos(block,0.0D,0.0D,0.0D,icon);
  tessellator.draw();
  tessellator.startDrawingQuads();
  tessellator.setNormal(-1F,0.0F,0.0F);
  render.renderFaceXNeg(block,0.0D,0.0D,0.0D,icon);
  tessellator.draw();
  tessellator.startDrawingQuads();
  tessellator.setNormal(1.0F,0.0F,0.0F);
  render.renderFaceXPos(block,0.0D,0.0D,0.0D,icon);
  tessellator.draw();
  GL11.glTranslatef(0.5F,0.5F,0.5F);
  block.setBlockBounds(0.0F,0.0F,0.0F,1.0F,1.0F,1.0F);
}","private void renderPipeItem(RenderBlocks render,ItemStack item,float translateX,float translateY,float translateZ){
  GL11.glPushAttrib(GL11.GL_COLOR_BUFFER_BIT);
  GL11.glBlendFunc(GL11.GL_SRC_ALPHA,GL11.GL_ONE_MINUS_SRC_ALPHA);
  GL11.glEnable(GL11.GL_BLEND);
  Tessellator tessellator=Tessellator.instance;
  Block block=BuildCraftTransport.genericPipeBlock;
  IIcon icon=item.getItem().getIconFromDamage(0);
  if (icon == null)   icon=((TextureMap)Minecraft.getMinecraft().getTextureManager().getTexture(TextureMap.locationBlocksTexture)).getAtlasSprite(""String_Node_Str"");
  block.setBlockBounds(CoreConstants.PIPE_MIN_POS,0.0F,CoreConstants.PIPE_MIN_POS,CoreConstants.PIPE_MAX_POS,1.0F,CoreConstants.PIPE_MAX_POS);
  block.setBlockBoundsForItemRender();
  render.setRenderBoundsFromBlock(block);
  GL11.glTranslatef(translateX,translateY,translateZ);
  tessellator.startDrawingQuads();
  tessellator.setNormal(0.0F,-1F,0.0F);
  render.renderFaceYNeg(block,0.0D,0.0D,0.0D,icon);
  tessellator.draw();
  tessellator.startDrawingQuads();
  tessellator.setNormal(0.0F,1.0F,0.0F);
  render.renderFaceYPos(block,0.0D,0.0D,0.0D,icon);
  tessellator.draw();
  tessellator.startDrawingQuads();
  tessellator.setNormal(0.0F,0.0F,-1F);
  render.renderFaceZNeg(block,0.0D,0.0D,0.0D,icon);
  tessellator.draw();
  tessellator.startDrawingQuads();
  tessellator.setNormal(0.0F,0.0F,1.0F);
  render.renderFaceZPos(block,0.0D,0.0D,0.0D,icon);
  tessellator.draw();
  tessellator.startDrawingQuads();
  tessellator.setNormal(-1F,0.0F,0.0F);
  render.renderFaceXNeg(block,0.0D,0.0D,0.0D,icon);
  tessellator.draw();
  tessellator.startDrawingQuads();
  tessellator.setNormal(1.0F,0.0F,0.0F);
  render.renderFaceXPos(block,0.0D,0.0D,0.0D,icon);
  tessellator.draw();
  GL11.glTranslatef(0.5F,0.5F,0.5F);
  block.setBlockBounds(0.0F,0.0F,0.0F,1.0F,1.0F,1.0F);
  GL11.glPopAttrib();
}",0.9529411764705882
156853,"@Override @SideOnly(Side.CLIENT) public void registerBlockIcons(IIconRegister par1IconRegister){
  blockIcon=par1IconRegister.registerIcon(""String_Node_Str"");
}","@Override @SideOnly(Side.CLIENT) public void registerBlockIcons(IIconRegister par1IconRegister){
  blockIcon=par1IconRegister.registerIcon(""String_Node_Str"");
  activeMarker=par1IconRegister.registerIcon(""String_Node_Str"");
}",0.8311688311688312
156854,"@Override public void delegateAIEnded(AIRobot ai){
  ItemStack itemFound=null;
  for (  ForgeDirection dir : ForgeDirection.VALID_DIRECTIONS) {
    TileEntity nearbyTile=robot.worldObj.getTileEntity(stationToDock.pipe.xCoord + dir.offsetX,stationToDock.pipe.yCoord + dir.offsetY,stationToDock.pipe.zCoord + dir.offsetZ);
    if (nearbyTile != null && nearbyTile instanceof IInventory) {
      ITransactor trans=Transactor.getTransactorFor(nearbyTile);
      itemFound=trans.remove(filter,dir.getOpposite(),true);
      if (itemFound != null) {
        break;
      }
    }
  }
  if (itemFound != null) {
    robot.setItemInUse(itemFound);
    terminate();
  }
}","@Override public void delegateAIEnded(AIRobot ai){
  if (robot.getDockingStation() != null) {
    DockingStation station=(DockingStation)robot.getDockingStation();
    ItemStack itemFound=null;
    for (    ForgeDirection dir : ForgeDirection.VALID_DIRECTIONS) {
      TileEntity nearbyTile=robot.worldObj.getTileEntity(station.pipe.xCoord + dir.offsetX,station.pipe.yCoord + dir.offsetY,station.pipe.zCoord + dir.offsetZ);
      if (nearbyTile != null && nearbyTile instanceof IInventory) {
        ITransactor trans=Transactor.getTransactorFor(nearbyTile);
        itemFound=trans.remove(filter,dir.getOpposite(),true);
        if (itemFound != null) {
          break;
        }
      }
    }
    if (itemFound != null) {
      robot.setItemInUse(itemFound);
      terminate();
    }
  }
}",0.8726772195457674
156855,"@Override public boolean matches(DockingStation station){
  for (  ForgeDirection dir : ForgeDirection.VALID_DIRECTIONS) {
    TileEntity nearbyTile=robot.worldObj.getTileEntity(station.x() + dir.offsetX,station.y() + dir.offsetY,station.z() + dir.offsetZ);
    if (nearbyTile != null && nearbyTile instanceof IInventory) {
      ITransactor trans=Transactor.getTransactorFor(nearbyTile);
      if (trans.remove(filter,dir.getOpposite(),false) != null) {
        stationToDock=station;
        return true;
      }
    }
  }
  return false;
}","@Override public boolean matches(DockingStation station){
  for (  ForgeDirection dir : ForgeDirection.VALID_DIRECTIONS) {
    TileEntity nearbyTile=robot.worldObj.getTileEntity(station.x() + dir.offsetX,station.y() + dir.offsetY,station.z() + dir.offsetZ);
    if (nearbyTile != null && nearbyTile instanceof IInventory) {
      ITransactor trans=Transactor.getTransactorFor(nearbyTile);
      if (trans.remove(filter,dir.getOpposite(),false) != null) {
        return true;
      }
    }
  }
  return false;
}",0.919278252611586
156856,"@RPC(RPCSide.SERVER) public void requestInitialization(RPCMessageInfo info){
  RPCHandler.rpcPlayer(info.sender,this,""String_Node_Str"",itemInUse);
}","@RPC(RPCSide.SERVER) public void requestInitialization(RPCMessageInfo info){
  RPCHandler.rpcPlayer(info.sender,this,""String_Node_Str"",itemInUse,itemActive);
}",0.9641693811074918
156857,"protected void init(){
}","protected void init(){
  if (worldObj.isRemote) {
    RPCHandler.rpcServer(this,""String_Node_Str"");
  }
}",0.3720930232558139
156858,"public EntityRobot(World par1World){
  super(par1World);
  motionX=0;
  motionY=0;
  motionZ=0;
  ignoreFrustumCheck=true;
  laser.isVisible=false;
  entityCollisionReduction=1F;
  width=0.5F;
  height=0.5F;
}","public EntityRobot(World world){
  super(world);
  motionX=0;
  motionY=0;
  motionZ=0;
  ignoreFrustumCheck=true;
  laser.isVisible=false;
  entityCollisionReduction=1F;
  width=0.5F;
  height=0.5F;
}",0.9707317073170731
156859,"@Override public void end(){
  robot.setItemActive(false);
}","@Override public void end(){
  robot.setItemActive(false);
  robot.worldObj.destroyBlockInWorldPartially(robot.getEntityId(),woodToChop.x,woodToChop.y,woodToChop.z,-1);
}",0.5217391304347826
156860,"@Override public void aimItemAt(int x,int y,int z){
  float itemAngle1=(float)Math.atan2(z - Math.floor(posZ),x - Math.floor(posX));
  float itemAngle2=0;
  if (Math.floor(posY) < y) {
    itemAngle2=(float)-Math.PI / 4;
    if (Math.floor(posX) == x && Math.floor(posZ) == z) {
      itemAngle2-=(float)Math.PI / 4;
    }
  }
 else   if (Math.floor(posY) > y) {
    itemAngle2=(float)Math.PI / 2;
    if (Math.floor(posX) == x && Math.floor(posZ) == z) {
      itemAngle2+=(float)Math.PI / 4;
    }
  }
  updateDataServer();
}","@Override public void aimItemAt(int x,int y,int z){
  itemAngle1=(float)Math.atan2(z - Math.floor(posZ),x - Math.floor(posX));
  itemAngle2=0;
  if (Math.floor(posY) < y) {
    itemAngle2=(float)-Math.PI / 4;
    if (Math.floor(posX) == x && Math.floor(posZ) == z) {
      itemAngle2-=(float)Math.PI / 4;
    }
  }
 else   if (Math.floor(posY) > y) {
    itemAngle2=(float)Math.PI / 2;
    if (Math.floor(posX) == x && Math.floor(posZ) == z) {
      itemAngle2+=(float)Math.PI / 4;
    }
  }
  updateDataServer();
}",0.9884836852207294
156861,"public Gate(Pipe pipe,GateMaterial material,GateLogic logic){
  this.pipe=pipe;
  this.material=material;
  this.logic=logic;
}","public Gate(Pipe pipe,GateMaterial material,GateLogic logic){
  this.pipe=pipe;
  this.material=material;
  this.logic=logic;
  for (int i=0; i < actionsState.length; ++i) {
    actionsState[i]=ActionState.Deactivated;
  }
}",0.7236467236467237
156862,"public void resolveActions(){
  int oldRedstoneOutput=redstoneOutput;
  redstoneOutput=0;
  BitSet temp=prevBroadcastSignal;
  temp.clear();
  prevBroadcastSignal=broadcastSignal;
  broadcastSignal=temp;
  startResolution();
  Map<IAction,Boolean> activeActions=new HashMap<IAction,Boolean>();
  Multiset<IAction> actionCount=HashMultiset.create();
  for (int it=0; it < 8; ++it) {
    ITrigger trigger=triggers[it];
    IAction action=actions[it];
    ITriggerParameter parameter=triggerParameters[it];
    if (trigger != null && action != null) {
      actionCount.add(action);
      if (!activeActions.containsKey(action)) {
        activeActions.put(action,isNearbyTriggerActive(trigger,parameter));
      }
 else       if (logic == GateLogic.AND) {
        activeActions.put(action,activeActions.get(action) && isNearbyTriggerActive(trigger,parameter));
      }
 else {
        activeActions.put(action,activeActions.get(action) || isNearbyTriggerActive(trigger,parameter));
      }
    }
  }
  for (  Map.Entry<IAction,Boolean> entry : activeActions.entrySet()) {
    if (entry.getValue()) {
      IAction action=entry.getKey();
      if (resolveAction(action,actionCount.count(action))) {
        continue;
      }
      if (action instanceof ActionRedstoneOutput) {
        redstoneOutput=15;
      }
 else       if (action instanceof ActionRedstoneFaderOutput) {
        redstoneOutput=((ActionRedstoneFaderOutput)action).level;
      }
 else       if (action instanceof ActionSignalOutput) {
        broadcastSignal.set(((ActionSignalOutput)action).color.ordinal());
      }
 else {
        for (        ForgeDirection side : ForgeDirection.VALID_DIRECTIONS) {
          TileEntity tile=pipe.container.getTile(side);
          if (tile instanceof IActionReceptor) {
            IActionReceptor recept=(IActionReceptor)tile;
            recept.actionActivated(action);
          }
        }
      }
    }
  }
  pipe.actionsActivated(activeActions);
  if (oldRedstoneOutput != redstoneOutput) {
    if (redstoneOutput == 0 ^ oldRedstoneOutput == 0) {
      pipe.container.scheduleRenderUpdate();
    }
    pipe.updateNeighbors(true);
  }
  if (!prevBroadcastSignal.equals(broadcastSignal)) {
    pipe.container.scheduleRenderUpdate();
    pipe.updateSignalState();
  }
}","public void resolveActions(){
  int oldRedstoneOutput=redstoneOutput;
  redstoneOutput=0;
  BitSet temp=prevBroadcastSignal;
  temp.clear();
  prevBroadcastSignal=broadcastSignal;
  broadcastSignal=temp;
  startResolution();
  Map<IAction,Boolean> activeActions=new HashMap<IAction,Boolean>();
  Multiset<IAction> actionCount=HashMultiset.create();
  for (int it=0; it < 8; ++it) {
    ITrigger trigger=triggers[it];
    IAction action=actions[it];
    ITriggerParameter parameter=triggerParameters[it];
    actionsState[it]=ActionState.Deactivated;
    if (trigger != null && action != null) {
      actionCount.add(action);
      boolean active=isNearbyTriggerActive(trigger,parameter);
      if (!activeActions.containsKey(action)) {
        activeActions.put(action,active);
      }
 else       if (logic == GateLogic.AND) {
        activeActions.put(action,activeActions.get(action) && active);
      }
 else {
        activeActions.put(action,activeActions.get(action) || active);
      }
      if (active) {
        actionsState[it]=ActionState.Partial;
      }
    }
  }
  for (int it=0; it < 8; ++it) {
    IAction action=actions[it];
    if (activeActions.containsKey(action)) {
      if (activeActions.get(action)) {
        actionsState[it]=ActionState.Activated;
      }
    }
  }
  for (  Map.Entry<IAction,Boolean> entry : activeActions.entrySet()) {
    if (entry.getValue()) {
      IAction action=entry.getKey();
      if (resolveAction(action,actionCount.count(action))) {
        continue;
      }
      if (action instanceof ActionRedstoneOutput) {
        redstoneOutput=15;
      }
 else       if (action instanceof ActionRedstoneFaderOutput) {
        redstoneOutput=((ActionRedstoneFaderOutput)action).level;
      }
 else       if (action instanceof ActionSignalOutput) {
        broadcastSignal.set(((ActionSignalOutput)action).color.ordinal());
      }
 else {
        for (        ForgeDirection side : ForgeDirection.VALID_DIRECTIONS) {
          TileEntity tile=pipe.container.getTile(side);
          if (tile instanceof IActionReceptor) {
            IActionReceptor recept=(IActionReceptor)tile;
            recept.actionActivated(action);
          }
        }
      }
    }
  }
  pipe.actionsActivated(activeActions);
  if (oldRedstoneOutput != redstoneOutput) {
    if (redstoneOutput == 0 ^ oldRedstoneOutput == 0) {
      pipe.container.scheduleRenderUpdate();
    }
    pipe.updateNeighbors(true);
  }
  if (!prevBroadcastSignal.equals(broadcastSignal)) {
    pipe.container.scheduleRenderUpdate();
    pipe.updateSignalState();
  }
}",0.8751030502885409
156863,"@Override public void updateProgressBar(int id,int state){
  if (id == 0) {
    for (int i=0; i < 8; i++) {
      triggerState[i]=((state >> i) & 0x01) == 0x01;
    }
  }
}","@Override public void updateProgressBar(int id,int state){
  if (id == 0) {
    for (int i=0; i < 8; i++) {
      actionsState[i]=ActionState.values()[((state >> (i * 2)) & 0x03)];
    }
  }
}",0.8681318681318682
156864,"/** 
 * SERVER SIDE 
 */
private int calculateTriggerState(){
  if (pipe.gate == null) {
    return 0;
  }
  int state=0;
  for (int i=0; i < triggerState.length; i++) {
    if (pipe.gate.triggers[i] != null) {
      triggerState[i]=isNearbyTriggerActive(pipe.gate.triggers[i],pipe.gate.getTriggerParameter(i));
    }
    state|=triggerState[i] ? 0x01 << i : 0x0;
  }
  return state;
}","/** 
 * SERVER SIDE 
 */
private int calculateTriggerState(){
  if (pipe.gate == null) {
    return 0;
  }
  int state=0;
  for (int i=0; i < actionsState.length; i++) {
    actionsState[i]=getActionState(i);
    state|=(actionsState[i].ordinal() & 0x03) << i * 2;
  }
  return state;
}",0.5991058122205664
156865,"@Override protected void drawGuiContainerBackgroundLayer(float f,int x,int y){
  container.synchronize();
  ResourceLocation texture=container.getGateGuiFile();
  GL11.glColor4f(1.0F,1.0F,1.0F,1.0F);
  mc.renderEngine.bindTexture(texture);
  int cornerX=(width - xSize) / 2;
  int cornerY=(height - ySize) / 2;
  drawTexturedModalRect(cornerX,cornerY,0,0,xSize,ySize);
  int triggerTracker=0;
  boolean allTriggersActive=true;
  for (  AdvancedSlot slot : slots) {
    if (slot instanceof TriggerSlot) {
      boolean active=container.triggerState[triggerTracker++];
      if (slot.isDefined() && ((TriggerSlot)slot).getTrigger() != null && !active) {
        allTriggersActive=false;
        break;
      }
    }
  }
  triggerTracker=0;
  for (int s=0; s < slots.length; ++s) {
    AdvancedSlot slot=slots[s];
    if (slot instanceof TriggerSlot) {
      ITrigger trigger=((TriggerSlot)slot).getTrigger();
      boolean halfWidth=pipe.gate.logic == GateDefinition.GateLogic.AND && !allTriggersActive;
      if (pipe.gate.material.hasParameterSlot) {
        if (container.triggerState[triggerTracker++]) {
          mc.renderEngine.bindTexture(texture);
          drawTexturedModalRect(cornerX + slot.x + 35,cornerY + slot.y + 6,176,18,halfWidth ? 9 : 18,4);
        }
        if (trigger == null || !trigger.hasParameter()) {
          mc.renderEngine.bindTexture(texture);
          drawTexturedModalRect(cornerX + slot.x + 17,cornerY + slot.y - 1,176,0,18,18);
        }
      }
 else       if (container.triggerState[triggerTracker++]) {
        mc.renderEngine.bindTexture(texture);
        drawTexturedModalRect(cornerX + slot.x + 17,cornerY + slot.y + 6,176,18,halfWidth ? 9 : 18,4);
      }
    }
 else     if (slot instanceof TriggerParameterSlot) {
      TriggerParameterSlot paramSlot=(TriggerParameterSlot)slot;
      TriggerSlot trigger=(TriggerSlot)slots[s - numSlots * 2];
      if (trigger.isDefined() && trigger.getTrigger().requiresParameter()) {
        if (paramSlot.getItemStack() == null) {
          mc.renderEngine.bindTexture(texture);
          drawTexturedModalRect(cornerX + slot.x - 1,cornerY + slot.y - 1,176,22,18,18);
        }
      }
    }
  }
  drawBackgroundSlots();
}","@Override protected void drawGuiContainerBackgroundLayer(float f,int x,int y){
  container.synchronize();
  ResourceLocation texture=container.getGateGuiFile();
  GL11.glColor4f(1.0F,1.0F,1.0F,1.0F);
  mc.renderEngine.bindTexture(texture);
  int cornerX=(width - xSize) / 2;
  int cornerY=(height - ySize) / 2;
  drawTexturedModalRect(cornerX,cornerY,0,0,xSize,ySize);
  int actionTracker=0;
  actionTracker=0;
  for (int s=0; s < slots.length; ++s) {
    AdvancedSlot slot=slots[s];
    if (slot instanceof TriggerSlot) {
      ITrigger trigger=((TriggerSlot)slot).getTrigger();
      boolean halfWidth=container.actionsState[actionTracker] == ActionState.Partial;
      if (pipe.gate.material.hasParameterSlot) {
        if (container.actionsState[actionTracker] != ActionState.Deactivated) {
          mc.renderEngine.bindTexture(texture);
          drawTexturedModalRect(cornerX + slot.x + 35,cornerY + slot.y + 6,176,18,halfWidth ? 9 : 18,4);
        }
        if (trigger == null || !trigger.hasParameter()) {
          mc.renderEngine.bindTexture(texture);
          drawTexturedModalRect(cornerX + slot.x + 17,cornerY + slot.y - 1,176,0,18,18);
        }
      }
 else       if (container.actionsState[actionTracker] != ActionState.Deactivated) {
        mc.renderEngine.bindTexture(texture);
        drawTexturedModalRect(cornerX + slot.x + 17,cornerY + slot.y + 6,176,18,halfWidth ? 9 : 18,4);
      }
      actionTracker++;
    }
 else     if (slot instanceof TriggerParameterSlot) {
      TriggerParameterSlot paramSlot=(TriggerParameterSlot)slot;
      TriggerSlot trigger=(TriggerSlot)slots[s - numSlots * 2];
      if (trigger.isDefined() && trigger.getTrigger().requiresParameter()) {
        if (paramSlot.getItemStack() == null) {
          mc.renderEngine.bindTexture(texture);
          drawTexturedModalRect(cornerX + slot.x - 1,cornerY + slot.y - 1,176,22,18,18);
        }
      }
    }
  }
  drawBackgroundSlots();
}",0.2562123039806996
156866,"private boolean isMatchingIngredient(int gridSlot,int inputSlot){
  ItemStack inputStack=internalInventoryCrafting.tempStacks[inputSlot];
  if (inputStack == null) {
    return false;
  }
 else   if (StackHelper.isMatchingItem(craftingSlots.getStackInSlot(gridSlot),inputStack,true,false)) {
    return true;
  }
 else   if (StackHelper.isCraftingEquivalent(craftingSlots.oreIDs[gridSlot],inputStack)) {
    return true;
  }
 else {
    return false;
  }
}","private boolean isMatchingIngredient(int gridSlot,int inputSlot){
  ItemStack inputStack=internalInventoryCrafting.tempStacks[inputSlot];
  if (inputStack == null) {
    return false;
  }
 else   if (StackHelper.isMatchingItem(craftingSlots.getStackInSlot(gridSlot),inputStack,true,false)) {
    return true;
  }
 else {
    return StackHelper.isCraftingEquivalent(craftingSlots.oreIDs[gridSlot],inputStack);
  }
}",0.92183908045977
156867,"public void inventorySlotsToWorld(MappingRegistry registry,NBTTagCompound nbt,String nbtName){
  if (!nbt.hasKey(nbtName)) {
    return;
  }
  NBTTagList list=nbt.getTagList(nbtName,Constants.NBT.TAG_COMPOUND);
  for (int i=0; i < list.tagCount(); ++i) {
    NBTTagCompound invSlot=list.getCompoundTagAt(i);
    Item item=registry.getItemForId(invSlot.getInteger(""String_Node_Str""));
    invSlot.setInteger(""String_Node_Str"",Item.getIdFromItem(item));
  }
}","public void inventorySlotsToWorld(MappingRegistry registry,NBTTagCompound nbt,String nbtName){
  if (!nbt.hasKey(nbtName)) {
    return;
  }
 else {
    registry.inventoryToWorld(nbt.getTagList(nbtName,Constants.NBT.TAG_COMPOUND));
  }
}",0.5734870317002881
156868,"@Override public void readFromNBT(NBTTagCompound nbt,MappingRegistry registry){
  block=registry.getBlockForId(nbt.getInteger(""String_Node_Str""));
  meta=nbt.getInteger(""String_Node_Str"");
  if (nbt.hasKey(""String_Node_Str"")) {
    NBTTagList rq=nbt.getTagList(""String_Node_Str"",Constants.NBT.TAG_COMPOUND);
    ArrayList<ItemStack> rqs=new ArrayList<ItemStack>();
    for (int i=0; i < rq.tagCount(); ++i) {
      try {
        NBTTagCompound sub=rq.getCompoundTagAt(i);
        if (sub.getInteger(""String_Node_Str"") >= 0) {
          sub.setInteger(""String_Node_Str"",Item.itemRegistry.getIDForObject(registry.getItemForId(sub.getInteger(""String_Node_Str""))));
          rqs.add(ItemStack.loadItemStackFromNBT(sub));
        }
 else {
          defaultPermission=BuildingPermission.CREATIVE_ONLY;
        }
      }
 catch (      Throwable t) {
        t.printStackTrace();
        defaultPermission=BuildingPermission.CREATIVE_ONLY;
      }
    }
    storedRequirements=rqs.toArray(new ItemStack[rqs.size()]);
  }
 else {
    storedRequirements=new ItemStack[0];
  }
}","@Override public void readFromNBT(NBTTagCompound nbt,MappingRegistry registry){
  super.readFromNBT(nbt,registry);
  block=registry.getBlockForId(nbt.getInteger(""String_Node_Str""));
  meta=nbt.getInteger(""String_Node_Str"");
  if (nbt.hasKey(""String_Node_Str"")) {
    NBTTagList rq=nbt.getTagList(""String_Node_Str"",Constants.NBT.TAG_COMPOUND);
    ArrayList<ItemStack> rqs=new ArrayList<ItemStack>();
    for (int i=0; i < rq.tagCount(); ++i) {
      try {
        NBTTagCompound sub=rq.getCompoundTagAt(i);
        if (sub.getInteger(""String_Node_Str"") >= 0) {
          registry.stackToWorld(sub);
          rqs.add(ItemStack.loadItemStackFromNBT(sub));
        }
 else {
          defaultPermission=BuildingPermission.CREATIVE_ONLY;
        }
      }
 catch (      Throwable t) {
        t.printStackTrace();
        defaultPermission=BuildingPermission.CREATIVE_ONLY;
      }
    }
    storedRequirements=rqs.toArray(new ItemStack[rqs.size()]);
  }
 else {
    storedRequirements=new ItemStack[0];
  }
}",0.9195180722891566
156869,"@Override public void writeToNBT(NBTTagCompound nbt,MappingRegistry registry){
  nbt.setInteger(""String_Node_Str"",registry.getIdForBlock(block));
  nbt.setInteger(""String_Node_Str"",meta);
  if (storedRequirements.length > 0) {
    NBTTagList rq=new NBTTagList();
    for (    ItemStack stack : storedRequirements) {
      NBTTagCompound sub=new NBTTagCompound();
      stack.writeToNBT(stack.writeToNBT(sub));
      sub.setInteger(""String_Node_Str"",registry.getIdForItem(stack.getItem()));
      rq.appendTag(sub);
    }
    nbt.setTag(""String_Node_Str"",rq);
  }
}","@Override public void writeToNBT(NBTTagCompound nbt,MappingRegistry registry){
  super.writeToNBT(nbt,registry);
  nbt.setInteger(""String_Node_Str"",registry.getIdForBlock(block));
  nbt.setInteger(""String_Node_Str"",meta);
  if (storedRequirements.length > 0) {
    NBTTagList rq=new NBTTagList();
    for (    ItemStack stack : storedRequirements) {
      NBTTagCompound sub=new NBTTagCompound();
      stack.writeToNBT(sub);
      registry.stackToRegistry(sub);
      rq.appendTag(sub);
    }
    nbt.setTag(""String_Node_Str"",rq);
  }
}",0.7574931880108992
156870,"@Override public void readFromNBT(NBTTagCompound nbt,MappingRegistry registry){
  cpt=nbt.getCompoundTag(""String_Node_Str"");
  NBTTagList rq=nbt.getTagList(""String_Node_Str"",Constants.NBT.TAG_COMPOUND);
  ArrayList<ItemStack> rqs=new ArrayList<ItemStack>();
  for (int i=0; i < rq.tagCount(); ++i) {
    try {
      NBTTagCompound sub=rq.getCompoundTagAt(i);
      if (sub.getInteger(""String_Node_Str"") >= 0) {
        sub.setInteger(""String_Node_Str"",Item.itemRegistry.getIDForObject(registry.getItemForId(sub.getInteger(""String_Node_Str""))));
        rqs.add(ItemStack.loadItemStackFromNBT(sub));
      }
 else {
      }
    }
 catch (    Throwable t) {
      t.printStackTrace();
    }
  }
  storedRequirements=rqs.toArray(new ItemStack[rqs.size()]);
}","@Override public void readFromNBT(NBTTagCompound nbt,MappingRegistry registry){
  super.readFromNBT(nbt,registry);
  cpt=nbt.getCompoundTag(""String_Node_Str"");
  NBTTagList rq=nbt.getTagList(""String_Node_Str"",Constants.NBT.TAG_COMPOUND);
  ArrayList<ItemStack> rqs=new ArrayList<ItemStack>();
  for (int i=0; i < rq.tagCount(); ++i) {
    try {
      NBTTagCompound sub=rq.getCompoundTagAt(i);
      if (sub.getInteger(""String_Node_Str"") >= 0) {
        sub.setInteger(""String_Node_Str"",Item.itemRegistry.getIDForObject(registry.getItemForId(sub.getInteger(""String_Node_Str""))));
        rqs.add(ItemStack.loadItemStackFromNBT(sub));
      }
 else {
      }
    }
 catch (    Throwable t) {
      t.printStackTrace();
    }
  }
  storedRequirements=rqs.toArray(new ItemStack[rqs.size()]);
}",0.9773462783171522
156871,"@Override public void writeToNBT(NBTTagCompound nbt,MappingRegistry registry){
  NBTTagList nbttaglist=cpt.getTagList(""String_Node_Str"",6);
  nbt.setInteger(""String_Node_Str"",registry.getIdForEntity(entity));
  nbt.setTag(""String_Node_Str"",cpt);
  NBTTagList rq=new NBTTagList();
  for (  ItemStack stack : storedRequirements) {
    NBTTagCompound sub=new NBTTagCompound();
    stack.writeToNBT(stack.writeToNBT(sub));
    sub.setInteger(""String_Node_Str"",registry.getIdForItem(stack.getItem()));
    rq.appendTag(sub);
  }
  nbt.setTag(""String_Node_Str"",rq);
}","@Override public void writeToNBT(NBTTagCompound nbt,MappingRegistry registry){
  super.writeToNBT(nbt,registry);
  NBTTagList nbttaglist=cpt.getTagList(""String_Node_Str"",6);
  nbt.setInteger(""String_Node_Str"",registry.getIdForEntity(entity));
  nbt.setTag(""String_Node_Str"",cpt);
  NBTTagList rq=new NBTTagList();
  for (  ItemStack stack : storedRequirements) {
    NBTTagCompound sub=new NBTTagCompound();
    stack.writeToNBT(stack.writeToNBT(sub));
    sub.setInteger(""String_Node_Str"",registry.getIdForItem(stack.getItem()));
    rq.appendTag(sub);
  }
  nbt.setTag(""String_Node_Str"",rq);
}",0.9705882352941176
156872,"/** 
 * Return the building permission for blueprint containing this schematic.
 * @return
 */
public BuildingPermission getBuildingPermission(){
  return BuildingPermission.ALL;
}","/** 
 * Return the building permission for blueprint containing this schematic.
 */
public BuildingPermission getBuildingPermission(){
  return BuildingPermission.ALL;
}",0.968481375358166
156873,"/** 
 * @param iconIndex
 * @return
 */
@SideOnly(Side.CLIENT) IIcon getIcon(int iconIndex);","/** 
 * @param iconIndex
 */
@SideOnly(Side.CLIENT) IIcon getIcon(int iconIndex);",0.9364161849710982
156874,"/** 
 * Get the PowerReceiver for this side of the block. You can return the same PowerReceiver for all sides or one for each side. You should NOT return null to this method unless you mean to NEVER receive power from that side. Returning null, after previous returning a PowerReceiver, will most likely cause pipe connections to derp out and engines to eventually explode.
 * @param side
 * @return
 */
PowerHandler.PowerReceiver getPowerReceiver(ForgeDirection side);","/** 
 * Get the PowerReceiver for this side of the block. You can return the same PowerReceiver for all sides or one for each side. You should NOT return null to this method unless you mean to NEVER receive power from that side. Returning null, after previous returning a PowerReceiver, will most likely cause pipe connections to derp out and engines to eventually explode.
 * @param side
 */
PowerHandler.PowerReceiver getPowerReceiver(ForgeDirection side);",0.988133764832794
156875,"/** 
 * The amount of power that this PowerHandler currently needs.
 * @return
 */
public double powerRequest(){
  update();
  return battery.getEnergyRequested();
}","/** 
 * The amount of power that this PowerHandler currently needs.
 */
public double powerRequest(){
  update();
  return battery.getEnergyRequested();
}",0.9655172413793104
156876,"/** 
 * Add an Assembly Table recipe.
 * @param input Object... containing either an ItemStack, or a paired stringand integer(ex: ""dyeBlue"", 1)
 * @param energy MJ cost to produce
 * @param output resulting ItemStack
 */
void addRecipe(double energyCost,ItemStack output,Object... input);","/** 
 * Add an Assembly Table recipe.
 * @param input Object... containing either an ItemStack, or a paired string and integer(ex: ""dyeBlue"", 1)
 * @param energyCost MJ cost to produce
 * @param output resulting ItemStack
 */
void addRecipe(double energyCost,ItemStack output,Object... input);",0.991394148020654
156877,"/** 
 * True if the pipe is connected to the block/pipe in the specific direction
 * @param wire
 * @return true if connect
 */
boolean isPipeConnected(ForgeDirection with);","/** 
 * True if the pipe is connected to the block/pipe in the specific direction
 * @param with
 * @return true if connect
 */
boolean isPipeConnected(ForgeDirection with);",0.9884393063583816
156878,"/** 
 * Removes and returns a single item from the inventory matching the filter.
 * @param filter
 * @param orientation
 * @param doRemove
 * @return 
 */
ItemStack remove(IStackFilter filter,ForgeDirection orientation,boolean doRemove);","/** 
 * Removes and returns a single item from the inventory matching the filter.
 * @param filter
 * @param orientation
 * @param doRemove
 */
ItemStack remove(IStackFilter filter,ForgeDirection orientation,boolean doRemove);",0.9741379310344828
156879,"/** 
 * Clones both dimensions of a float[][]
 * @param source the float[][] to deepClone
 * @return
 */
public static float[][] deepClone(float[][] source){
  float[][] target=source.clone();
  for (int i=0; i < target.length; i++) {
    target[i]=source[i].clone();
  }
  return target;
}","/** 
 * Clones both dimensions of a float[][]
 * @param source the float[][] to deepClone
 */
public static float[][] deepClone(float[][] source){
  float[][] target=source.clone();
  for (int i=0; i < target.length; i++) {
    target[i]=source[i].clone();
  }
  return target;
}",0.9806678383128296
156880,"/** 
 * Should return the textureindex used by the Pipe Item Renderer, as this is done client-side the default implementation might not work if your getTextureIndex(Orienations.Unknown) has logic. Then override this
 * @return
 */
public int getIconIndexForItem(){
  return getIconIndex(ForgeDirection.UNKNOWN);
}","/** 
 * Should return the textureindex used by the Pipe Item Renderer, as this is done client-side the default implementation might not work if your getTextureIndex(Orienations.Unknown) has logic. Then override this
 */
public int getIconIndexForItem(){
  return getIconIndex(ForgeDirection.UNKNOWN);
}",0.9821138211382112
156881,"/** 
 * Retrieves pipe at specified coordinates if any.
 * @param world
 * @param x
 * @param y
 * @param z
 * @return
 */
private TileGenericPipe getPipe(World world,int x,int y,int z){
  if (!world.blockExists(x,y,z)) {
    return null;
  }
  TileEntity tile=world.getTileEntity(x,y,z);
  if (!(tile instanceof TileGenericPipe)) {
    return null;
  }
  return (TileGenericPipe)tile;
}","/** 
 * Retrieves pipe at specified coordinates if any.
 * @param world
 * @param x
 * @param y
 * @param z
 */
private TileGenericPipe getPipe(World world,int x,int y,int z){
  if (!world.blockExists(x,y,z)) {
    return null;
  }
  TileEntity tile=world.getTileEntity(x,y,z);
  if (!(tile instanceof TileGenericPipe)) {
    return null;
  }
  return (TileGenericPipe)tile;
}",0.9855832241153342
156882,"private BuildingSlot internalGetNextBlock(World world,TileAbstractBuilder builder,LinkedList<BuildingSlotBlock> list){
  iterator.startIteration();
  while (iterator.hasNext()) {
    BuildingSlotBlock slot=iterator.next();
    if (slot.buildStage > buildList.getFirst().buildStage) {
      iterator.reset();
      return null;
    }
    try {
      if (!slot.isAlreadyBuilt(context)) {
        if (slot.mode == Mode.ClearIfInvalid) {
          if (BuildCraftAPI.isSoftBlock(world,slot.x,slot.y,slot.z) || BlockUtil.isUnbreakableBlock(world,slot.x,slot.y,slot.z)) {
            iterator.remove();
          }
 else {
            if (setupForDestroy(builder,context,slot)) {
              iterator.remove();
              clearedLocations.add(new BlockIndex(slot.x,slot.y,slot.z));
              return slot;
            }
          }
        }
 else         if (!slot.schematic.doNotBuild()) {
          if (checkRequirements(builder,slot.schematic)) {
            useRequirements(builder,slot);
            iterator.remove();
            postProcessing.add(slot);
            builtLocations.add(new BlockIndex(slot.x,slot.y,slot.z));
            return slot;
          }
        }
 else {
          postProcessing.add(slot);
          iterator.remove();
        }
      }
 else {
        if (slot.mode == Mode.Build) {
          postProcessing.add(slot);
        }
        iterator.remove();
      }
    }
 catch (    Throwable t) {
      t.printStackTrace();
      BCLog.logger.throwing(""String_Node_Str"",""String_Node_Str"",t);
      iterator.remove();
    }
  }
  return null;
}","private BuildingSlot internalGetNextBlock(World world,TileAbstractBuilder builder,LinkedList<BuildingSlotBlock> list){
  if (builder.energyAvailable() < SchematicRegistry.BREAK_ENERGY) {
    iterator.reset();
    return null;
  }
  iterator.startIteration();
  while (iterator.hasNext()) {
    BuildingSlotBlock slot=iterator.next();
    if (slot.buildStage > buildList.getFirst().buildStage) {
      iterator.reset();
      return null;
    }
    try {
      if (!slot.isAlreadyBuilt(context)) {
        if (slot.mode == Mode.ClearIfInvalid) {
          if (BuildCraftAPI.isSoftBlock(world,slot.x,slot.y,slot.z) || BlockUtil.isUnbreakableBlock(world,slot.x,slot.y,slot.z)) {
            iterator.remove();
          }
 else {
            if (setupForDestroy(builder,context,slot)) {
              iterator.remove();
              clearedLocations.add(new BlockIndex(slot.x,slot.y,slot.z));
              return slot;
            }
          }
        }
 else         if (!slot.schematic.doNotBuild()) {
          if (checkRequirements(builder,slot.schematic)) {
            useRequirements(builder,slot);
            iterator.remove();
            postProcessing.add(slot);
            builtLocations.add(new BlockIndex(slot.x,slot.y,slot.z));
            return slot;
          }
        }
 else {
          postProcessing.add(slot);
          iterator.remove();
        }
      }
 else {
        if (slot.mode == Mode.Build) {
          postProcessing.add(slot);
        }
        iterator.remove();
      }
    }
 catch (    Throwable t) {
      t.printStackTrace();
      BCLog.logger.throwing(""String_Node_Str"",""String_Node_Str"",t);
      iterator.remove();
    }
  }
  return null;
}",0.9660446619761396
156883,"/** 
 * Generates a flatten in a given area
 */
public static void flatten(int xMin,int yMin,int zMin,int xMax,int yMax,int zMax,Template template){
  int lastX=Integer.MAX_VALUE, lastY=Integer.MAX_VALUE, lastZ=Integer.MAX_VALUE;
  for (int x=xMin; x <= xMax; ++x) {
    for (int z=zMin; z <= zMax; ++z) {
      for (int y=yMax; y >= yMin; --y) {
        template.contents[x][y][z]=new SchematicMask(true);
      }
    }
  }
}","/** 
 * Generates a flatten in a given area
 */
public static void flatten(int xMin,int yMin,int zMin,int xMax,int yMax,int zMax,Template template){
  int lastX=Integer.MAX_VALUE, lastY=Integer.MAX_VALUE, lastZ=Integer.MAX_VALUE;
  for (int x=xMin; x <= xMax; ++x) {
    for (int z=zMin; z <= zMax; ++z) {
      for (int y=yMax; y >= yMin; --y) {
        if (isValid(x,y,z,template)) {
          template.contents[x][y][z]=new SchematicMask(true);
        }
      }
    }
  }
}",0.9435215946843852
156884,"/** 
 * Generates a filling in a given area
 */
public static void fill(int xMin,int yMin,int zMin,int xMax,int yMax,int zMax,Template template){
  for (int y=yMin; y <= yMax; ++y) {
    for (int x=xMin; x <= xMax; ++x) {
      for (int z=zMin; z <= zMax; ++z) {
        template.contents[x][y][z]=new SchematicMask(true);
      }
    }
  }
}","/** 
 * Generates a filling in a given area
 */
public static void fill(int xMin,int yMin,int zMin,int xMax,int yMax,int zMax,Template template){
  for (int y=yMin; y <= yMax; ++y) {
    for (int x=xMin; x <= xMax; ++x) {
      for (int z=zMin; z <= zMax; ++z) {
        if (isValid(x,y,z,template)) {
          template.contents[x][y][z]=new SchematicMask(true);
        }
      }
    }
  }
}",0.8952380952380953
156885,"/** 
 * Generates an empty in a given area
 */
public static void empty(int xMin,int yMin,int zMin,int xMax,int yMax,int zMax,Template template){
  int lastX=Integer.MAX_VALUE, lastY=Integer.MAX_VALUE, lastZ=Integer.MAX_VALUE;
  for (int y=yMax; y >= yMin; y--) {
    for (int x=xMin; x <= xMax; ++x) {
      for (int z=zMin; z <= zMax; ++z) {
        template.contents[x][y][z]=null;
      }
    }
  }
}","/** 
 * Generates an empty in a given area
 */
public static void empty(int xMin,int yMin,int zMin,int xMax,int yMax,int zMax,Template template){
  int lastX=Integer.MAX_VALUE, lastY=Integer.MAX_VALUE, lastZ=Integer.MAX_VALUE;
  for (int y=yMax; y >= yMin; y--) {
    for (int x=xMin; x <= xMax; ++x) {
      for (int z=zMin; z <= zMax; ++z) {
        if (isValid(x,y,z,template)) {
          template.contents[x][y][z]=null;
        }
      }
    }
  }
}",0.940628637951106
156886,"@Override public Template getTemplate(Box box,World world){
  Template result=new Template(box.sizeX(),box.sizeY(),box.sizeZ());
  int xMin=0;
  int yMin=0;
  int zMin=0;
  int xMax=box.sizeX() - 1;
  int yMax=box.sizeY() - 1;
  int zMax=box.sizeZ() - 1;
  int xFix=(xMax - xMin) % 2;
  int zFix=(zMax - zMin) % 2;
  int xCenter=(xMax + xMin) / 2 + (xMax + xMin < 0 && xFix == 1 ? -1 : 0);
  int zCenter=(zMax + zMin) / 2 + (zMax + zMin < 0 && zFix == 1 ? -1 : 0);
  int xRadius=(xMax - xMin) / 2;
  int zRadius=(zMax - zMin) / 2;
  if (xRadius == 0 || zRadius == 0) {
    fill(xMin,yMin,zMin,xMax,yMax,zMax,result);
  }
  int dx=xRadius, dz=0;
  int xChange=zRadius * zRadius * (1 - 2 * xRadius);
  int zChange=xRadius * xRadius;
  int ellipseError=0;
  int twoASquare=2 * xRadius * xRadius;
  int twoBSquare=2 * zRadius * zRadius;
  int stoppingX=twoBSquare * xRadius;
  int stoppingZ=0;
  while (stoppingX >= stoppingZ) {
    fillFourColumns(xCenter,zCenter,dx,dz,xFix,zFix,yMin,yMax,result);
    ++dz;
    stoppingZ+=twoASquare;
    ellipseError+=zChange;
    zChange+=twoASquare;
    if (2 * ellipseError + xChange > 0) {
      --dx;
      stoppingX-=twoBSquare;
      ellipseError+=xChange;
      xChange+=twoBSquare;
    }
  }
  dx=0;
  dz=zRadius;
  xChange=zRadius * zRadius;
  zChange=xRadius * xRadius * (1 - 2 * zRadius);
  ellipseError=0;
  stoppingX=0;
  stoppingZ=twoASquare * zRadius;
  while (stoppingX <= stoppingZ) {
    fillFourColumns(xCenter,zCenter,dx,dz,xFix,zFix,yMin,yMax,result);
    ++dx;
    stoppingX+=twoBSquare;
    ellipseError+=xChange;
    xChange+=twoBSquare;
    if (2 * ellipseError + zChange > 0) {
      --dz;
      stoppingZ-=twoASquare;
      ellipseError+=zChange;
      zChange+=twoASquare;
    }
  }
  return result;
}","@Override public Template getTemplate(Box box,World world){
  Template result=new Template(box.sizeX(),box.sizeY(),box.sizeZ());
  int xMin=0;
  int yMin=0;
  int zMin=0;
  int xMax=box.sizeX() - 1;
  int yMax=box.sizeY() - 1;
  int zMax=box.sizeZ() - 1;
  int xFix=(xMax - xMin) % 2;
  int zFix=(zMax - zMin) % 2;
  int xCenter=(xMax + xMin) / 2 + (xMax + xMin < 0 && xFix == 1 ? -1 : 0);
  int zCenter=(zMax + zMin) / 2 + (zMax + zMin < 0 && zFix == 1 ? -1 : 0);
  int xRadius=(xMax - xMin) / 2;
  int zRadius=(zMax - zMin) / 2;
  if (xRadius == 0 || zRadius == 0) {
    fill(xMin,yMin,zMin,xMax,yMax,zMax,result);
  }
  int dx=xRadius, dz=0;
  int xChange=zRadius * zRadius * (1 - 2 * xRadius);
  int zChange=xRadius * xRadius;
  int ellipseError=0;
  int twoASquare=2 * xRadius * xRadius;
  int twoBSquare=2 * zRadius * zRadius;
  int stoppingX=twoBSquare * xRadius;
  int stoppingZ=0;
  if (twoASquare > 0) {
    while (stoppingX >= stoppingZ) {
      fillFourColumns(xCenter,zCenter,dx,dz,xFix,zFix,yMin,yMax,result);
      ++dz;
      stoppingZ+=twoASquare;
      ellipseError+=zChange;
      zChange+=twoASquare;
      if (2 * ellipseError + xChange > 0) {
        --dx;
        stoppingX-=twoBSquare;
        ellipseError+=xChange;
        xChange+=twoBSquare;
      }
    }
  }
  dx=0;
  dz=zRadius;
  xChange=zRadius * zRadius;
  zChange=xRadius * xRadius * (1 - 2 * zRadius);
  ellipseError=0;
  stoppingX=0;
  stoppingZ=twoASquare * zRadius;
  if (twoBSquare > 0) {
    while (stoppingX <= stoppingZ) {
      fillFourColumns(xCenter,zCenter,dx,dz,xFix,zFix,yMin,yMax,result);
      ++dx;
      stoppingX+=twoBSquare;
      ellipseError+=xChange;
      xChange+=twoBSquare;
      if (2 * ellipseError + zChange > 0) {
        --dz;
        stoppingZ-=twoASquare;
        ellipseError+=zChange;
        zChange+=twoASquare;
      }
    }
  }
  return result;
}",0.7782058337919647
156887,"public static boolean isSoftBlock(Block block,World world,int x,int y,int z){
  return block == null || BuildCraftAPI.softBlocks.contains(block) || block.isAir(world,x,y,z);
}","public static boolean isSoftBlock(Block block,World world,int x,int y,int z){
  return block == null || BuildCraftAPI.softBlocks.contains(block) || block.isReplaceable(world,x,y,z) || block.isAir(world,x,y,z);
}",0.9067357512953368
156888,"public void initialize(){
  if (!initialized) {
    double dx=destination.x - origin.x;
    double dy=destination.y - origin.y;
    double dz=destination.z - origin.z;
    double size=Math.sqrt(dx * dx + dy * dy + dz * dz);
    maxLifetime=size * 7.0;
    maxHeight=(5.0 + (destination.y - origin.y) / 2.0);
    double a=maxLifetime / 2.0;
    double b=maxHeight;
    double c=Math.sqrt(a * a + b * b);
    maxLifetime+=c * 2;
    vx=dx / maxLifetime;
    vy=dy / maxLifetime;
    vz=dz / maxLifetime;
    for (    ItemStack s : stacksToBuild) {
      StackAtPosition sPos=new StackAtPosition();
      sPos.stack=s;
      stacksToDisplay.add(sPos);
    }
    if (stacksToDisplay.size() == 0) {
      StackAtPosition sPos=new StackAtPosition();
      sPos.stack=new ItemStack(BuildCraftBuilders.stripesBlock);
      stacksToDisplay.add(sPos);
    }
    initialized=true;
  }
}","public void initialize(){
  if (!initialized) {
    double dx=destination.x - origin.x;
    double dy=destination.y - origin.y;
    double dz=destination.z - origin.z;
    double size=Math.sqrt(dx * dx + dy * dy + dz * dz);
    maxLifetime=size * 7.0;
    maxHeight=(5.0 + (destination.y - origin.y) / 2.0);
    double a=maxLifetime / 2.0;
    double b=maxHeight;
    double c=Math.sqrt(a * a + b * b);
    maxLifetime=c * 2;
    vx=dx / maxLifetime;
    vy=dy / maxLifetime;
    vz=dz / maxLifetime;
    for (    ItemStack s : stacksToBuild) {
      StackAtPosition sPos=new StackAtPosition();
      sPos.stack=s;
      stacksToDisplay.add(sPos);
    }
    if (stacksToDisplay.size() == 0) {
      StackAtPosition sPos=new StackAtPosition();
      sPos.stack=new ItemStack(BuildCraftBuilders.stripesBlock);
      stacksToDisplay.add(sPos);
    }
    initialized=true;
  }
}",0.9994282447112636
156889,"@Override public void addInformation(ItemStack stack,EntityPlayer player,List list,boolean advanced){
  BlueprintId blueprint=getId(stack);
  if (blueprint != null) {
    if (blueprint.name.equals(""String_Node_Str"")) {
      list.add(String.format(StringUtils.localize(""String_Node_Str"")));
    }
 else {
      list.add(String.format(blueprint.name));
    }
    list.add(String.format(StringUtils.localize(""String_Node_Str"") + ""String_Node_Str"" + NBTUtils.getItemData(stack).getString(""String_Node_Str"")));
  }
 else {
    list.add(StringUtils.localize(""String_Node_Str""));
  }
}","@Override public void addInformation(ItemStack stack,EntityPlayer player,List list,boolean advanced){
  if (NBTUtils.getItemData(stack).hasKey(""String_Node_Str"")) {
    String name=NBTUtils.getItemData(stack).getString(""String_Node_Str"");
    if (name.equals(""String_Node_Str"")) {
      list.add(String.format(StringUtils.localize(""String_Node_Str"")));
    }
 else {
      list.add(String.format(name));
    }
    list.add(String.format(StringUtils.localize(""String_Node_Str"") + ""String_Node_Str"" + NBTUtils.getItemData(stack).getString(""String_Node_Str"")));
  }
 else {
    list.add(StringUtils.localize(""String_Node_Str""));
  }
}",0.3355371900826446
156890,"@Override public IIcon getIconIndex(ItemStack stack){
  if (getId(stack) == null) {
    return cleanBlueprint;
  }
 else {
    return usedBlueprint;
  }
}","@Override public IIcon getIconIndex(ItemStack stack){
  if (!NBTUtils.getItemData(stack).hasKey(""String_Node_Str"")) {
    return cleanBlueprint;
  }
 else {
    return usedBlueprint;
  }
}",0.8538011695906432
156891,"@Override public IIcon getIconIndex(ItemStack stack){
  if (getId(stack) == null) {
    return itemIcon;
  }
 else {
    return usedTemplate;
  }
}","@Override public IIcon getIconIndex(ItemStack stack){
  if (!NBTUtils.getItemData(stack).hasKey(""String_Node_Str"")) {
    return itemIcon;
  }
 else {
    return usedTemplate;
  }
}",0.8475609756097561
156892,"@Override public ItemStack getStack(){
  ItemStack stack=new ItemStack(BuildCraftBuilders.blueprintItem,1);
  NBTTagCompound nbt=NBTUtils.getItemData(stack);
  id.write(nbt);
  nbt.setString(""String_Node_Str"",author);
  return stack;
}","@Override public ItemStack getStack(){
  ItemStack stack=new ItemStack(BuildCraftBuilders.blueprintItem,1);
  NBTTagCompound nbt=NBTUtils.getItemData(stack);
  id.write(nbt);
  nbt.setString(""String_Node_Str"",author);
  nbt.setString(""String_Node_Str"",id.name);
  return stack;
}",0.914396887159533
156893,"@Override public ItemStack getStack(){
  ItemStack stack=new ItemStack(BuildCraftBuilders.templateItem,1);
  NBTTagCompound nbt=NBTUtils.getItemData(stack);
  id.write(nbt);
  nbt.setString(""String_Node_Str"",author);
  return stack;
}","@Override public ItemStack getStack(){
  ItemStack stack=new ItemStack(BuildCraftBuilders.templateItem,1);
  NBTTagCompound nbt=NBTUtils.getItemData(stack);
  id.write(nbt);
  nbt.setString(""String_Node_Str"",author);
  nbt.setString(""String_Node_Str"",id.name);
  return stack;
}",0.9140625
156894,"@EventHandler public void load(FMLInitializationEvent evt){
  NetworkRegistry.INSTANCE.registerGuiHandler(instance,new GuiHandler());
  CoreProxy.proxy.registerTileEntity(TileQuarry.class,""String_Node_Str"");
  CoreProxy.proxy.registerTileEntity(TileMiningWell.class,""String_Node_Str"");
  CoreProxy.proxy.registerTileEntity(TileAutoWorkbench.class,""String_Node_Str"");
  CoreProxy.proxy.registerTileEntity(TilePump.class,""String_Node_Str"");
  CoreProxy.proxy.registerTileEntity(TileFloodGate.class,""String_Node_Str"");
  CoreProxy.proxy.registerTileEntity(TileTank.class,""String_Node_Str"");
  CoreProxy.proxy.registerTileEntity(TileRefinery.class,""String_Node_Str"");
  CoreProxy.proxy.registerTileEntity(TileHopper.class,""String_Node_Str"");
  FactoryProxy.proxy.initializeTileEntities();
  SchematicRegistry.registerSchematicClass(autoWorkbenchBlock,SchematicAutoWorkbench.class);
  SchematicRegistry.registerSchematicClass(frameBlock,SchematicFrame.class);
  SchematicRegistry.registerSchematicClass(refineryBlock,SchematicRefinery.class);
  SchematicRegistry.registerSchematicClass(tankBlock,SchematicTank.class);
  if (BuildCraftCore.loadDefaultRecipes) {
    loadRecipes();
  }
}","@EventHandler public void load(FMLInitializationEvent evt){
  NetworkRegistry.INSTANCE.registerGuiHandler(instance,new GuiHandler());
  CoreProxy.proxy.registerTileEntity(TileQuarry.class,""String_Node_Str"");
  CoreProxy.proxy.registerTileEntity(TileMiningWell.class,""String_Node_Str"");
  CoreProxy.proxy.registerTileEntity(TileAutoWorkbench.class,""String_Node_Str"");
  CoreProxy.proxy.registerTileEntity(TilePump.class,""String_Node_Str"");
  CoreProxy.proxy.registerTileEntity(TileFloodGate.class,""String_Node_Str"");
  CoreProxy.proxy.registerTileEntity(TileTank.class,""String_Node_Str"");
  CoreProxy.proxy.registerTileEntity(TileRefinery.class,""String_Node_Str"");
  CoreProxy.proxy.registerTileEntity(TileHopper.class,""String_Node_Str"");
  FactoryProxy.proxy.initializeTileEntities();
  SchematicRegistry.registerSchematicClass(frameBlock,SchematicFrame.class);
  SchematicRegistry.registerSchematicClass(refineryBlock,SchematicRefinery.class);
  SchematicRegistry.registerSchematicClass(tankBlock,SchematicTank.class);
  if (BuildCraftCore.loadDefaultRecipes) {
    loadRecipes();
  }
}",0.9589766210851344
156895,"@SuppressWarnings(""String_Node_Str"") @Override public Schematic clone(){
  Schematic obj;
  try {
    obj=(Schematic)super.clone();
  }
 catch (  CloneNotSupportedException e) {
    return null;
  }
  obj.storedRequirements=ArrayUtils.clone(storedRequirements);
  return obj;
}","@SuppressWarnings(""String_Node_Str"") @Override public Schematic clone(){
  Schematic obj;
  try {
    obj=(Schematic)super.clone();
  }
 catch (  CloneNotSupportedException e) {
    return null;
  }
  return obj;
}",0.8431771894093686
156896,"@Override public void readFromNBT(NBTTagCompound nbt,MappingRegistry registry){
  block=registry.getBlockForId(nbt.getInteger(""String_Node_Str""));
  meta=nbt.getInteger(""String_Node_Str"");
  NBTTagList rq=nbt.getTagList(""String_Node_Str"",Utils.NBTTag_Types.NBTTagList.ordinal());
  storedRequirements=new ItemStack[rq.tagCount()];
  for (int i=0; i < rq.tagCount(); ++i) {
    NBTTagCompound sub=rq.getCompoundTagAt(i);
    sub.setInteger(""String_Node_Str"",Item.itemRegistry.getIDForObject(registry.getItemForId(sub.getInteger(""String_Node_Str""))));
    storedRequirements[i]=ItemStack.loadItemStackFromNBT(sub);
  }
}","@Override public void readFromNBT(NBTTagCompound nbt,MappingRegistry registry){
  block=registry.getBlockForId(nbt.getInteger(""String_Node_Str""));
  meta=nbt.getInteger(""String_Node_Str"");
  NBTTagList rq=nbt.getTagList(""String_Node_Str"",Utils.NBTTag_Types.NBTTagCompound.ordinal());
  ArrayList<ItemStack> rqs=new ArrayList<ItemStack>();
  for (int i=0; i < rq.tagCount(); ++i) {
    try {
      NBTTagCompound sub=rq.getCompoundTagAt(i);
      if (sub.getInteger(""String_Node_Str"") >= 0) {
        sub.setInteger(""String_Node_Str"",Item.itemRegistry.getIDForObject(registry.getItemForId(sub.getInteger(""String_Node_Str""))));
        rqs.add(ItemStack.loadItemStackFromNBT(sub));
      }
 else {
      }
    }
 catch (    Throwable t) {
      t.printStackTrace();
    }
  }
  storedRequirements=rqs.toArray(new ItemStack[rqs.size()]);
}",0.4264099037138927
156897,"@Override public void writeToNBT(NBTTagCompound nbt,MappingRegistry registry){
  nbt.setInteger(""String_Node_Str"",registry.getIdForBlock(block));
  nbt.setInteger(""String_Node_Str"",meta);
  NBTTagList rq=new NBTTagList();
  for (  ItemStack stack : storedRequirements) {
    NBTTagCompound sub=new NBTTagCompound();
    stack.writeToNBT(stack.writeToNBT(sub));
    sub.setInteger(""String_Node_Str"",Item.itemRegistry.getIDForObject(registry.getItemForId(sub.getInteger(""String_Node_Str""))));
    rq.appendTag(sub);
  }
  nbt.setTag(""String_Node_Str"",rq);
}","@Override public void writeToNBT(NBTTagCompound nbt,MappingRegistry registry){
  nbt.setInteger(""String_Node_Str"",registry.getIdForBlock(block));
  nbt.setInteger(""String_Node_Str"",meta);
  NBTTagList rq=new NBTTagList();
  for (  ItemStack stack : storedRequirements) {
    NBTTagCompound sub=new NBTTagCompound();
    stack.writeToNBT(stack.writeToNBT(sub));
    sub.setInteger(""String_Node_Str"",registry.getIdForItem(stack.getItem()));
    rq.appendTag(sub);
  }
  nbt.setTag(""String_Node_Str"",rq);
}",0.9111531190926276
156898,"/** 
 * Initializes a slot from the blueprint according to an objet placed on {x, y, z} on the world. This typically means adding entries in slot.cpt. Note that ""id"" and ""meta"" will be set automatically, corresponding to the block id and meta. By default, if the block is a BlockContainer, tile information will be to save / load the block.
 */
@Override public void readFromWorld(IBuilderContext context,int x,int y,int z){
  super.readFromWorld(context,x,y,z);
  if (block instanceof BlockContainer) {
    TileEntity tile=context.world().getTileEntity(x,y,z);
    if (tile != null) {
      tile.writeToNBT(cpt);
    }
  }
}","/** 
 * Initializes a slot from the blueprint according to an objet placed on {x, y, z} on the world. This typically means adding entries in slot.cpt. Note that ""id"" and ""meta"" will be set automatically, corresponding to the block id and meta. By default, if the block is a BlockContainer, tile information will be to save / load the block.
 */
@Override public void readFromWorld(IBuilderContext context,int x,int y,int z){
  super.readFromWorld(context,x,y,z);
  if (block instanceof BlockContainer) {
    TileEntity tile=context.world().getTileEntity(x,y,z);
    if (tile != null) {
      tile.writeToNBT(cpt);
    }
    if (tile instanceof IInventory) {
      IInventory inv=(IInventory)tile;
      ArrayList<ItemStack> rqs=new ArrayList<ItemStack>();
      for (int i=0; i < inv.getSizeInventory(); ++i) {
        if (inv.getStackInSlot(i) != null) {
          rqs.add(inv.getStackInSlot(i));
        }
      }
      storedRequirements=Utils.concat(storedRequirements,rqs.toArray(new ItemStack[rqs.size()]));
    }
  }
}",0.7575757575757576
156899,"/** 
 * Places the block in the world, at the location specified in the slot.
 */
@Override public void writeToWorld(IBuilderContext context,int x,int y,int z){
  super.writeToWorld(context,x,y,z);
  if (block instanceof BlockContainer) {
    TileEntity tile=context.world().getTileEntity(x,y,z);
    cpt.setInteger(""String_Node_Str"",x);
    cpt.setInteger(""String_Node_Str"",y);
    cpt.setInteger(""String_Node_Str"",z);
    if (tile != null) {
      tile.readFromNBT(cpt);
    }
    if (tile instanceof IInventory) {
      IInventory inv=(IInventory)tile;
      for (int i=0; i < inv.getSizeInventory(); ++i) {
        inv.setInventorySlotContents(i,null);
      }
    }
  }
}","/** 
 * Places the block in the world, at the location specified in the slot.
 */
@Override public void writeToWorld(IBuilderContext context,int x,int y,int z){
  super.writeToWorld(context,x,y,z);
  if (block instanceof BlockContainer) {
    TileEntity tile=context.world().getTileEntity(x,y,z);
    cpt.setInteger(""String_Node_Str"",x);
    cpt.setInteger(""String_Node_Str"",y);
    cpt.setInteger(""String_Node_Str"",z);
    if (tile != null) {
      tile.readFromNBT(cpt);
    }
  }
}",0.8344827586206897
156900,"public BptBuilderBase instanciateBluePrint(int x,int y,int z,ForgeDirection o){
  BlueprintBase bpt=null;
  try {
    bpt=ItemBlueprint.loadBlueprint(items[0]);
  }
 catch (  Throwable t) {
    setInventorySlotContents(0,null);
    return null;
  }
  if (bpt == null) {
    return null;
  }
  bpt=bpt.clone();
  BptContext context=bpt.getContext(worldObj,bpt.getBoxForPos(x,y,z));
  if (o == ForgeDirection.EAST) {
  }
 else   if (o == ForgeDirection.SOUTH) {
    bpt.rotateLeft(context);
  }
 else   if (o == ForgeDirection.WEST) {
    bpt.rotateLeft(context);
    bpt.rotateLeft(context);
  }
 else   if (o == ForgeDirection.NORTH) {
    bpt.rotateLeft(context);
    bpt.rotateLeft(context);
    bpt.rotateLeft(context);
  }
  BptBuilderBase result=null;
  if (items[0].getItem() instanceof ItemBlueprintStandard) {
    result=new BptBuilderBlueprint((Blueprint)bpt,worldObj,x,y,z);
  }
 else   if (items[0].getItem() instanceof ItemBlueprintTemplate) {
    return new BptBuilderTemplate(bpt,worldObj,x,y,z);
  }
 else {
    result=null;
  }
  return result;
}","public BptBuilderBase instanciateBluePrint(int x,int y,int z,ForgeDirection o){
  BlueprintBase bpt=null;
  try {
    bpt=ItemBlueprint.loadBlueprint(items[0]);
  }
 catch (  Throwable t) {
    setInventorySlotContents(0,null);
    t.printStackTrace();
    return null;
  }
  if (bpt == null) {
    return null;
  }
  bpt=bpt.clone();
  BptContext context=bpt.getContext(worldObj,bpt.getBoxForPos(x,y,z));
  if (o == ForgeDirection.EAST) {
  }
 else   if (o == ForgeDirection.SOUTH) {
    bpt.rotateLeft(context);
  }
 else   if (o == ForgeDirection.WEST) {
    bpt.rotateLeft(context);
    bpt.rotateLeft(context);
  }
 else   if (o == ForgeDirection.NORTH) {
    bpt.rotateLeft(context);
    bpt.rotateLeft(context);
    bpt.rotateLeft(context);
  }
  BptBuilderBase result=null;
  if (items[0].getItem() instanceof ItemBlueprintStandard) {
    result=new BptBuilderBlueprint((Blueprint)bpt,worldObj,x,y,z);
  }
 else   if (items[0].getItem() instanceof ItemBlueprintTemplate) {
    return new BptBuilderTemplate(bpt,worldObj,x,y,z);
  }
 else {
    result=null;
  }
  return result;
}",0.9883666821777572
156901,"@SideOnly(Side.CLIENT) @Override public ItemStack getPickBlock(MovingObjectPosition target,World world,int x,int y,int z){
}","@SideOnly(Side.CLIENT) @Override public ItemStack getPickBlock(MovingObjectPosition target,World world,int x,int y,int z){
  RaytraceResult rayTraceResult=doRayTrace(world,x,y,z,Minecraft.getMinecraft().thePlayer);
  if (rayTraceResult != null && rayTraceResult.boundingBox != null) {
switch (rayTraceResult.hitPart) {
case Gate:
      Pipe pipe=getPipe(world,x,y,z);
    return pipe.gate.getGateItem();
case Plug:
  return new ItemStack(BuildCraftTransport.plugItem);
case Pipe:
return new ItemStack(getPipe(world,x,y,z).item);
case Facade:
ForgeDirection dir=ForgeDirection.getOrientation(target.sideHit);
FacadeMatrix matrix=getPipe(world,x,y,z).container.renderState.facadeMatrix;
Block block=matrix.getFacadeBlock(dir);
if (block != null) {
return ItemFacade.getStack(block,matrix.getFacadeMetaId(dir));
}
}
}
return null;
}",0.2602308499475341
156902,"public PathIterator(BlockIndex from,Iterator<BlockIndex> it){
  this.to=it.next();
  currentIterator=it;
  double dx=to.x - from.z;
  double dy=to.y - from.y;
  double dz=to.z - from.z;
  double size=Math.sqrt(dx * dx + dy * dy + dz * dz);
  cx=dx / size / 10;
  cy=dy / size / 10;
  cz=dz / size / 10;
  ix=from.x;
  iy=from.y;
  iz=from.z;
  lastDistance=(ix - to.x) * (ix - to.x) + (iy - to.y) * (iy - to.y) + (iz - to.z) * (iz - to.z);
  if (Math.abs(dx) > Math.abs(dz)) {
    if (dx > 0) {
      o=ForgeDirection.EAST;
    }
 else {
      o=ForgeDirection.WEST;
    }
  }
 else {
    if (dz > 0) {
      o=ForgeDirection.SOUTH;
    }
 else {
      o=ForgeDirection.NORTH;
    }
  }
}","public PathIterator(BlockIndex from,Iterator<BlockIndex> it){
  this.to=it.next();
  currentIterator=it;
  double dx=to.x - from.x;
  double dy=to.y - from.y;
  double dz=to.z - from.z;
  double size=Math.sqrt(dx * dx + dy * dy + dz * dz);
  cx=dx / size / 10;
  cy=dy / size / 10;
  cz=dz / size / 10;
  ix=from.x;
  iy=from.y;
  iz=from.z;
  lastDistance=(ix - to.x) * (ix - to.x) + (iy - to.y) * (iy - to.y) + (iz - to.z) * (iz - to.z);
  if (Math.abs(dx) > Math.abs(dz)) {
    if (dx > 0) {
      o=ForgeDirection.EAST;
    }
 else {
      o=ForgeDirection.WEST;
    }
  }
 else {
    if (dz > 0) {
      o=ForgeDirection.SOUTH;
    }
 else {
      o=ForgeDirection.NORTH;
    }
  }
}",0.998546511627907
156903,"public void createBpt(){
  ForgeDirection o=ForgeDirection.values()[worldObj.getBlockMetadata(xCoord,yCoord,zCoord)].getOpposite();
  if (o == ForgeDirection.EAST) {
  }
 else   if (o == ForgeDirection.SOUTH) {
    writingBlueprint.rotateLeft(writingContext);
    writingBlueprint.rotateLeft(writingContext);
    writingBlueprint.rotateLeft(writingContext);
  }
 else   if (o == ForgeDirection.WEST) {
    writingBlueprint.rotateLeft(writingContext);
    writingBlueprint.rotateLeft(writingContext);
  }
 else   if (o == ForgeDirection.NORTH) {
    writingBlueprint.rotateLeft(writingContext);
  }
  BuildCraftBuilders.serverDB.add(writingBlueprint);
  setInventorySlotContents(1,ItemBlueprint.getBlueprintItem(writingBlueprint));
  setInventorySlotContents(0,null);
  writingBlueprint=null;
  writingContext=null;
  blockScanner=null;
}","public void createBpt(){
  BuildCraftBuilders.serverDB.add(writingBlueprint);
  setInventorySlotContents(1,ItemBlueprint.getBlueprintItem(writingBlueprint));
  setInventorySlotContents(0,null);
  writingBlueprint=null;
  writingContext=null;
  blockScanner=null;
}",0.4795640326975476
156904,"@Override public void updateEntity(){
  super.updateEntity();
  if (!worldObj.isRemote && blockScanner != null) {
    if (blockScanner.blocksLeft() != 0) {
      for (      BlockIndex index : blockScanner) {
        writingBlueprint.readFromWorld(writingContext,this,index.x,index.y,index.z);
      }
      computingTime=(int)((1 - (float)blockScanner.blocksLeft() / (float)blockScanner.totalBlocks()) * 100);
    }
 else {
      createBpt();
      computingTime=0;
    }
  }
}","@Override public void updateEntity(){
  super.updateEntity();
  if (!worldObj.isRemote && blockScanner != null) {
    if (blockScanner.blocksLeft() != 0) {
      for (      BlockIndex index : blockScanner) {
        writingBlueprint.readFromWorld(writingContext,this,index.x,index.y,index.z);
      }
      computingTime=(int)((1 - (float)blockScanner.blocksLeft() / (float)blockScanner.totalBlocks()) * 100);
      if (blockScanner.blocksLeft() == 0) {
        ForgeDirection o=ForgeDirection.values()[worldObj.getBlockMetadata(xCoord,yCoord,zCoord)].getOpposite();
        if (o == ForgeDirection.EAST) {
        }
 else         if (o == ForgeDirection.SOUTH) {
          writingBlueprint.rotateLeft(writingContext);
          writingBlueprint.rotateLeft(writingContext);
          writingBlueprint.rotateLeft(writingContext);
        }
 else         if (o == ForgeDirection.WEST) {
          writingBlueprint.rotateLeft(writingContext);
          writingBlueprint.rotateLeft(writingContext);
        }
 else         if (o == ForgeDirection.NORTH) {
          writingBlueprint.rotateLeft(writingContext);
        }
      }
    }
 else     if (writingBlueprint.getData() != null) {
      createBpt();
      computingTime=0;
    }
  }
}",0.5569176882661997
156905,"private BlueprintBase load(final BlueprintId id){
  File blueprintFile=new File(blueprintFolder,String.format(Locale.ENGLISH,""String_Node_Str"" + fileExt,id.toString()));
  if (blueprintFile.exists()) {
    try {
      NBTTagCompound nbt=CompressedStreamTools.readCompressed(new FileInputStream(blueprintFile));
      BlueprintBase blueprint=BlueprintBase.loadBluePrint(nbt);
      blueprint.id=id;
      loadedBlueprints.put(id,blueprint);
      return blueprint;
    }
 catch (    FileNotFoundException e) {
      e.printStackTrace();
    }
catch (    IOException e) {
      e.printStackTrace();
    }
  }
  return null;
}","private BlueprintBase load(final BlueprintId id){
  File blueprintFile=new File(blueprintFolder,String.format(Locale.ENGLISH,""String_Node_Str"" + fileExt,id.toString()));
  if (blueprintFile.exists()) {
    try {
      FileInputStream f=new FileInputStream(blueprintFile);
      byte[] data=new byte[(int)blueprintFile.length()];
      f.read(data);
      f.close();
      NBTTagCompound nbt=CompressedStreamTools.decompress(data);
      BlueprintBase blueprint=BlueprintBase.loadBluePrint(nbt);
      blueprint.id=id;
      loadedBlueprints.put(id,blueprint);
      return blueprint;
    }
 catch (    FileNotFoundException e) {
      e.printStackTrace();
    }
catch (    IOException e) {
      e.printStackTrace();
    }
  }
  return null;
}",0.8506588579795022
156906,"private BlueprintId save(BlueprintBase blueprint){
  NBTTagCompound nbt=new NBTTagCompound();
  blueprint.writeToNBT(nbt);
  ByteBuf buf=Unpooled.buffer();
  Utils.writeNBT(buf,nbt);
  byte[] data=new byte[buf.readableBytes()];
  buf.readBytes(data);
  blueprint.id.generateUniqueId(data);
  BlueprintId id=blueprint.id;
  File blueprintFile=new File(blueprintFolder,String.format(Locale.ENGLISH,""String_Node_Str"" + fileExt,id.toString()));
  if (!blueprintFile.exists()) {
    OutputStream gzOs=null;
    try {
      CompressedStreamTools.writeCompressed(nbt,new FileOutputStream(blueprintFile));
    }
 catch (    IOException ex) {
      Logger.getLogger(""String_Node_Str"").log(Level.SEVERE,String.format(""String_Node_Str"",blueprintFile.getName(),ex.getMessage()));
    }
 finally {
      try {
        if (gzOs != null)         gzOs.close();
      }
 catch (      IOException e) {
      }
    }
  }
  return id;
}","private BlueprintId save(BlueprintBase blueprint){
  blueprint.id.generateUniqueId(blueprint.getData());
  BlueprintId id=blueprint.id;
  File blueprintFile=new File(blueprintFolder,String.format(Locale.ENGLISH,""String_Node_Str"" + fileExt,id.toString()));
  if (!blueprintFile.exists()) {
    OutputStream gzOs=null;
    try {
      FileOutputStream f=new FileOutputStream(blueprintFile);
      f.write(blueprint.getData());
      f.close();
    }
 catch (    IOException ex) {
      Logger.getLogger(""String_Node_Str"").log(Level.SEVERE,String.format(""String_Node_Str"",blueprintFile.getName(),ex.getMessage()));
    }
 finally {
      try {
        if (gzOs != null) {
          gzOs.close();
        }
      }
 catch (      IOException e) {
      }
    }
  }
  return id;
}",0.7420118343195267
156907,"/** 
 * Called to update the entity's position/logic.
 */
@Override public void onUpdate(){
  this.prevPosX=this.posX;
  this.prevPosY=this.posY;
  this.prevPosZ=this.posZ;
  this.motionY-=(double)this.particleGravity;
  if (this.bobTimer-- > 0) {
    this.motionX*=0.02D;
    this.motionY*=0.02D;
    this.motionZ*=0.02D;
    this.setParticleTextureIndex(113);
  }
 else {
    this.setParticleTextureIndex(112);
  }
  this.moveEntity(this.motionX,this.motionY,this.motionZ);
  this.motionX*=0.9800000190734863D;
  this.motionY*=0.9800000190734863D;
  this.motionZ*=0.9800000190734863D;
  if (this.particleMaxAge-- <= 0) {
    this.setDead();
  }
  if (this.onGround) {
    this.setParticleTextureIndex(114);
    this.motionX*=0.699999988079071D;
    this.motionZ*=0.699999988079071D;
  }
  int x=MathHelper.floor_double(this.posX);
  int y=MathHelper.floor_double(this.posY);
  int z=MathHelper.floor_double(this.posZ);
  Block block=worldObj.getBlock(x,y,z);
  Material material=block.getMaterial();
  if (material.isLiquid() || material.isSolid()) {
    double d0=(double)((float)(MathHelper.floor_double(this.posY) + 1) - ((BlockFluidBase)block).getFilledPercentage(worldObj,x,y,z));
    if (this.posY < d0) {
      this.setDead();
    }
  }
}","/** 
 * Called to update the entity's position/logic.
 */
@Override public void onUpdate(){
  this.prevPosX=this.posX;
  this.prevPosY=this.posY;
  this.prevPosZ=this.posZ;
  this.motionY-=(double)this.particleGravity;
  if (this.bobTimer-- > 0) {
    this.motionX*=0.02D;
    this.motionY*=0.02D;
    this.motionZ*=0.02D;
    this.setParticleTextureIndex(113);
  }
 else {
    this.setParticleTextureIndex(112);
  }
  this.moveEntity(this.motionX,this.motionY,this.motionZ);
  this.motionX*=0.9800000190734863D;
  this.motionY*=0.9800000190734863D;
  this.motionZ*=0.9800000190734863D;
  if (this.particleMaxAge-- <= 0) {
    this.setDead();
  }
  if (this.onGround) {
    this.setParticleTextureIndex(114);
    this.motionX*=0.699999988079071D;
    this.motionZ*=0.699999988079071D;
  }
  int x=MathHelper.floor_double(this.posX);
  int y=MathHelper.floor_double(this.posY);
  int z=MathHelper.floor_double(this.posZ);
  Block block=worldObj.getBlock(x,y,z);
  Material material=block.getMaterial();
  if ((material.isLiquid() || material.isSolid()) && block instanceof IFluidBlock) {
    double d0=(double)((float)(MathHelper.floor_double(this.posY) + 1) - ((IFluidBlock)block).getFilledPercentage(worldObj,x,y,z));
    if (this.posY < d0) {
      this.setDead();
    }
  }
}",0.9805940594059406
156908,"public void sendToPlayers(Packet packet,World world,int x,int y,int z,int maxDistance){
  channels.get(Side.SERVER).attr(FMLOutboundHandler.FML_MESSAGETARGET).set(FMLOutboundHandler.OutboundTarget.ALL);
  channels.get(Side.SERVER).writeOutbound(packet);
}","public void sendToPlayers(BuildCraftPacket packet,World world,int x,int y,int z,int maxDistance){
  channels.get(Side.SERVER).attr(FMLOutboundHandler.FML_MESSAGETARGET).set(FMLOutboundHandler.OutboundTarget.ALL);
  channels.get(Side.SERVER).writeOutbound(packet);
}",0.9807692307692308
156909,"private boolean testStrings(String[] excludedBlocks,World world,int i,int j,int k){
  Block block=world.getBlock(i,j,k);
  if (block == null)   return false;
  int meta=world.getBlockMetadata(i,j,k);
  for (  String excluded : excludedBlocks) {
    if (excluded.equals(block.getUnlocalizedName()))     return false;
    String[] tokens=excluded.split(""String_Node_Str"");
    if (tokens[0].equals(Integer.toString(id)) && (tokens.length == 1 || tokens[1].equals(Integer.toString(meta))))     return false;
  }
  return true;
}","private boolean testStrings(String[] excludedBlocks,World world,int i,int j,int k){
  Block block=world.getBlock(i,j,k);
  if (block == null)   return false;
  int meta=world.getBlockMetadata(i,j,k);
  return true;
}",0.5479082321187584
156910,"@Override public int hashCode(){
  int hash=5;
  hash=67 * hash + stack.itemID;
  hash=67 * hash + stack.getItemDamage();
  if (stack.stackTagCompound != null)   hash=67 * hash + stack.stackTagCompound.hashCode();
  return hash;
}","@Override public int hashCode(){
  int hash=5;
  hash=67 * hash + Item.itemRegistry.getIDForObject(stack.getItem());
  hash=67 * hash + stack.getItemDamage();
  if (stack.stackTagCompound != null)   hash=67 * hash + stack.stackTagCompound.hashCode();
  return hash;
}",0.8853118712273642
156911,"public BlockMarker(){
  super(Material.circuits);
  setLightValue(0.5F);
  setCreativeTab(CreativeTabBuildCraft.MACHINES.get());
}","public BlockMarker(){
  super(Material.circuits);
  setLightLevel(0.5F);
  setCreativeTab(CreativeTabBuildCraft.MACHINES.get());
}",0.9692307692307692
156912,"@Override public void initialize(){
  super.initialize();
  if (CoreProxy.proxy.isRenderWorld(worldObj))   return;
  for (int x=xCoord - 1; x <= xCoord + 1; ++x) {
    for (int y=yCoord - 1; y <= yCoord + 1; ++y) {
      for (int z=zCoord - 1; z <= zCoord + 1; ++z) {
        TileEntity tile=worldObj.getTileEntity(x,y,z);
        if (tile instanceof TilePathMarker) {
          path=((TilePathMarker)tile).getPath();
          for (          BlockIndex b : path) {
            worldObj.setBlock(b.x,b.y,b.z,null);
            BuildCraftBuilders.pathMarkerBlock.dropBlockAsItem(worldObj,b.x,b.y,b.z,BuildCraftBuilders.pathMarkerBlock,0);
          }
          break;
        }
      }
    }
  }
  if (path != null && pathLasers == null) {
    path.getFirst().x=xCoord;
    path.getFirst().y=yCoord;
    path.getFirst().z=zCoord;
    createLasersForPath();
  }
  iterateBpt();
}","@Override public void initialize(){
  super.initialize();
  if (CoreProxy.proxy.isRenderWorld(worldObj))   return;
  for (int x=xCoord - 1; x <= xCoord + 1; ++x) {
    for (int y=yCoord - 1; y <= yCoord + 1; ++y) {
      for (int z=zCoord - 1; z <= zCoord + 1; ++z) {
        TileEntity tile=worldObj.getTileEntity(x,y,z);
        if (tile instanceof TilePathMarker) {
          path=((TilePathMarker)tile).getPath();
          for (          BlockIndex b : path) {
            worldObj.setBlock(b.x,b.y,b.z,null);
            BuildCraftBuilders.pathMarkerBlock.dropBlockAsItem(worldObj,b.x,b.y,b.z,0,0);
          }
          break;
        }
      }
    }
  }
  if (path != null && pathLasers == null) {
    path.getFirst().x=xCoord;
    path.getFirst().y=yCoord;
    path.getFirst().z=zCoord;
    createLasersForPath();
  }
  iterateBpt();
}",0.979662986635677
156913,"private static void breakBlock(World world,int x,int y,int z){
  Block block=world.getBlock(x,y,z);
  if (block != null)   world.playSoundEffect(x + 0.5F,y + 0.5F,z + 0.5F,block.stepSound.getPlaceSound(),(block.stepSound.getVolume() + 1.0F) / 2.0F,block.stepSound.getPitch() * 0.8F);
  if (BuildCraftBuilders.fillerDestroy) {
    world.setBlockToAir(x,y,z);
  }
 else   if (BlockUtil.isToughBlock(world,x,y,z)) {
    BlockUtil.breakBlock(world,x,y,z,BuildCraftBuilders.fillerLifespanTough);
  }
 else {
    BlockUtil.breakBlock(world,x,y,z,BuildCraftBuilders.fillerLifespanNormal);
  }
}","private static void breakBlock(World world,int x,int y,int z){
  Block block=world.getBlock(x,y,z);
  if (block != null) {
  }
  if (BuildCraftBuilders.fillerDestroy) {
    world.setBlockToAir(x,y,z);
  }
 else   if (BlockUtil.isToughBlock(world,x,y,z)) {
    BlockUtil.breakBlock(world,x,y,z,BuildCraftBuilders.fillerLifespanTough);
  }
 else {
    BlockUtil.breakBlock(world,x,y,z,BuildCraftBuilders.fillerLifespanNormal);
  }
}",0.8357915437561455
156914,"public BlockSpring(){
  super(Material.rock);
  setBlockUnbreakable();
  setResistance(6000000.0F);
  setStepSound(soundStoneFootstep);
  disableStats();
  setTickRandomly(true);
  setCreativeTab(CreativeTabBuildCraft.MACHINES.get());
}","public BlockSpring(){
  super(Material.rock);
  setBlockUnbreakable();
  setResistance(6000000.0F);
  disableStats();
  setTickRandomly(true);
  setCreativeTab(CreativeTabBuildCraft.MACHINES.get());
}",0.9174311926605504
156915,"@SideOnly(Side.CLIENT) @SubscribeEvent public void tickEnd(PlayerTickEvent evt){
  if (nagged) {
    return;
  }
  EntityPlayer player=evt.player;
  if (Version.needsUpdateNoticeAndMarkAsSeen()) {
    player.addChatMessage(String.format(""String_Node_Str"",Version.getRecommendedVersion(),CoreProxy.proxy.getMinecraftVersion()));
    for (    String updateLine : Version.getChangelog()) {
      player.addChatMessage(""String_Node_Str"" + updateLine);
    }
    player.addChatMessage(""String_Node_Str"");
  }
  nagged=true;
}","@SideOnly(Side.CLIENT) @SubscribeEvent public void tickEnd(PlayerTickEvent evt){
  if (nagged) {
    return;
  }
  EntityPlayer player=evt.player;
  if (Version.needsUpdateNoticeAndMarkAsSeen()) {
    player.addChatMessage(new ChatComponentText(String.format(""String_Node_Str"",Version.getRecommendedVersion(),CoreProxy.proxy.getMinecraftVersion())));
    for (    String updateLine : Version.getChangelog()) {
      player.addChatMessage(new ChatComponentText(""String_Node_Str"" + updateLine));
    }
    player.addChatMessage(new ChatComponentText(""String_Node_Str""));
  }
  nagged=true;
}",0.9377817853922452
156916,"@Override public Packet getDescriptionPacket(){
  return new PacketTileUpdate(this).getPacket();
}","@Override public Packet getDescriptionPacket(){
  return null;
}",0.7654320987654321
156917,"@Override public Packet getUpdatePacket(){
  return new PacketTileUpdate(this).getPacket();
}","@Override public BuildCraftPacket getUpdatePacket(){
  return new PacketTileUpdate(this);
}",0.8804347826086957
156918,"@Override public void handleDescriptionPacket(PacketUpdate packet) throws IOException {
  if (packet.payload instanceof PacketPayloadArrays)   descriptionPacket.fromPayload(this,(PacketPayloadArrays)packet.payload);
}","@Override public void handleDescriptionPacket(PacketUpdate packet) throws IOException {
  if (packet.payload instanceof PacketPayloadArrays) {
    descriptionPacket.fromPayload(this,(PacketPayloadArrays)packet.payload);
  }
}",0.9819004524886876
156919,"public void handleWidgetClientData(int widgetId,DataInputStream data) throws IOException {
  widgets.get(widgetId).handleClientPacketData(data);
}","public void handleWidgetClientData(int widgetId,ByteBuf data){
  InputStream input=new ByteBufInputStream(data);
  DataInputStream stream=new DataInputStream(input);
  try {
    widgets.get(widgetId).handleClientPacketData(stream);
  }
 catch (  IOException e) {
    e.printStackTrace();
  }
}",0.3280182232346241
156920,"public void sendWidgetDataToClient(Widget widget,ICrafting player,byte[] data){
  PacketGuiWidget pkt=new PacketGuiWidget(windowId,widgets.indexOf(widget),data);
  PacketDispatcher.sendPacketToPlayer(pkt.getPacket(),(Player)player);
}","public void sendWidgetDataToClient(Widget widget,ICrafting player,byte[] data){
  PacketGuiWidget pkt=new PacketGuiWidget(windowId,widgets.indexOf(widget),data);
  BuildCraftCore.instance.sendToPlayer((EntityPlayer)player,pkt);
}",0.7688984881209503
156921,"public void drawStack(ItemStack item){
  if (item != null) {
    int cornerX=(width - xSize) / 2;
    int cornerY=(height - ySize) / 2;
    itemRenderer.zLevel=200F;
    itemRenderer.renderItemAndEffectIntoGUI(fontRendererObj,mc.renderEngine,item,cornerX + x,cornerY + y);
    itemRenderer.renderItemOverlayIntoGUI(fontRendererObj,mc.renderEngine,item,cornerX + x,cornerY + y);
    itemRenderer.zLevel=0.0F;
  }
}","public void drawStack(ItemStack item){
  if (item != null) {
    int cornerX=(width - xSize) / 2;
    int cornerY=(height - ySize) / 2;
    itemRender.zLevel=200F;
    itemRender.renderItemAndEffectIntoGUI(fontRendererObj,mc.renderEngine,item,cornerX + x,cornerY + y);
    itemRender.renderItemOverlayIntoGUI(fontRendererObj,mc.renderEngine,item,cornerX + x,cornerY + y);
    itemRender.zLevel=0.0F;
  }
}",0.9902200488997556
156922,"private void drawToolTips(ToolTip toolTips,int mouseX,int mouseY){
  if (toolTips.size() > 0) {
    int left=this.guiLeft;
    int top=this.guiTop;
    int lenght=0;
    int x;
    int y;
    for (    ToolTipLine tip : toolTips) {
      y=this.fontRendererObj.getStringWidth(tip.text);
      if (y > lenght) {
        lenght=y;
      }
    }
    x=mouseX - left + 12;
    y=mouseY - top - 12;
    int var14=8;
    if (toolTips.size() > 1) {
      var14+=2 + (toolTips.size() - 1) * 10;
    }
    this.zLevel=300.0F;
    itemRendererObj.zLevel=300.0F;
    int var15=-267386864;
    this.drawGradientRect(x - 3,y - 4,x + lenght + 3,y - 3,var15,var15);
    this.drawGradientRect(x - 3,y + var14 + 3,x + lenght + 3,y + var14 + 4,var15,var15);
    this.drawGradientRect(x - 3,y - 3,x + lenght + 3,y + var14 + 3,var15,var15);
    this.drawGradientRect(x - 4,y - 3,x - 3,y + var14 + 3,var15,var15);
    this.drawGradientRect(x + lenght + 3,y - 3,x + lenght + 4,y + var14 + 3,var15,var15);
    int var16=1347420415;
    int var17=(var16 & 16711422) >> 1 | var16 & -16777216;
    this.drawGradientRect(x - 3,y - 3 + 1,x - 3 + 1,y + var14 + 3 - 1,var16,var17);
    this.drawGradientRect(x + lenght + 2,y - 3 + 1,x + lenght + 3,y + var14 + 3 - 1,var16,var17);
    this.drawGradientRect(x - 3,y - 3,x + lenght + 3,y - 3 + 1,var16,var16);
    this.drawGradientRect(x - 3,y + var14 + 2,x + lenght + 3,y + var14 + 3,var17,var17);
    for (    ToolTipLine tip : toolTips) {
      String line=tip.text;
      if (tip.color == -1) {
        line=""String_Node_Str"" + line;
      }
 else {
        line=""String_Node_Str"" + Integer.toHexString(tip.color) + line;
      }
      this.fontRendererObj.drawStringWithShadow(line,x,y,-1);
      y+=10 + tip.getSpacing();
    }
    this.zLevel=0.0F;
    itemRenderer.zLevel=0.0F;
  }
}","private void drawToolTips(ToolTip toolTips,int mouseX,int mouseY){
  if (toolTips.size() > 0) {
    int left=this.guiLeft;
    int top=this.guiTop;
    int lenght=0;
    int x;
    int y;
    for (    ToolTipLine tip : toolTips) {
      y=this.fontRendererObj.getStringWidth(tip.text);
      if (y > lenght) {
        lenght=y;
      }
    }
    x=mouseX - left + 12;
    y=mouseY - top - 12;
    int var14=8;
    if (toolTips.size() > 1) {
      var14+=2 + (toolTips.size() - 1) * 10;
    }
    this.zLevel=300.0F;
    itemRender.zLevel=300.0F;
    int var15=-267386864;
    this.drawGradientRect(x - 3,y - 4,x + lenght + 3,y - 3,var15,var15);
    this.drawGradientRect(x - 3,y + var14 + 3,x + lenght + 3,y + var14 + 4,var15,var15);
    this.drawGradientRect(x - 3,y - 3,x + lenght + 3,y + var14 + 3,var15,var15);
    this.drawGradientRect(x - 4,y - 3,x - 3,y + var14 + 3,var15,var15);
    this.drawGradientRect(x + lenght + 3,y - 3,x + lenght + 4,y + var14 + 3,var15,var15);
    int var16=1347420415;
    int var17=(var16 & 16711422) >> 1 | var16 & -16777216;
    this.drawGradientRect(x - 3,y - 3 + 1,x - 3 + 1,y + var14 + 3 - 1,var16,var17);
    this.drawGradientRect(x + lenght + 2,y - 3 + 1,x + lenght + 3,y + var14 + 3 - 1,var16,var17);
    this.drawGradientRect(x - 3,y - 3,x + lenght + 3,y - 3 + 1,var16,var16);
    this.drawGradientRect(x - 3,y + var14 + 2,x + lenght + 3,y + var14 + 3,var17,var17);
    for (    ToolTipLine tip : toolTips) {
      String line=tip.text;
      if (tip.color == -1) {
        line=""String_Node_Str"" + line;
      }
 else {
        line=""String_Node_Str"" + Integer.toHexString(tip.color) + line;
      }
      this.fontRendererObj.drawStringWithShadow(line,x,y,-1);
      y+=10 + tip.getSpacing();
    }
    this.zLevel=0.0F;
    itemRender.zLevel=0.0F;
  }
}",0.99805932908234
156923,"public static ItemStack consumeItem(ItemStack stack){
  if (stack.stackSize == 1) {
    if (stack.getItem().hasContainerItem()) {
      return stack.getItem().getContainerItemStack(stack);
    }
 else {
      return null;
    }
  }
 else {
    stack.splitStack(1);
    return stack;
  }
}","public static ItemStack consumeItem(ItemStack stack){
  if (stack.stackSize == 1) {
    if (stack.getItem().hasContainerItem()) {
      return stack.getItem().getContainerItem(stack);
    }
 else {
      return null;
    }
  }
 else {
    stack.splitStack(1);
    return stack;
  }
}",0.9912434325744308
156924,public Packet getUpdatePacket();,public BuildCraftPacket getUpdatePacket();,0.8648648648648649
156925,"public void sendPacket(){
  PacketDispatcher.sendPacketToServer(getPacket());
}","public void sendPacket(){
  BuildCraftCore.instance.sendToServer(this);
}",0.6578947368421053
156926,"public static boolean placePipe(Pipe pipe,World world,int i,int j,int k,int blockId,int meta){
  if (world.isRemote)   return true;
  boolean placed=world.setBlock(i,j,k,blockId,meta,1);
  if (placed) {
    TileGenericPipe tile=(TileGenericPipe)world.getBlockTileEntity(i,j,k);
    tile.initialize(pipe);
  }
  return placed;
}","public static boolean placePipe(Pipe pipe,World world,int i,int j,int k,int blockId,int meta){
  if (world.isRemote)   return true;
  boolean placed=world.setBlock(i,j,k,blockId,meta,1);
  if (placed) {
    TileGenericPipe tile=(TileGenericPipe)world.getBlockTileEntity(i,j,k);
    tile.initialize(pipe);
    tile.sendUpdateToClient();
  }
  return placed;
}",0.9547445255474452
156927,"public static ResourceLocation getFluidSheet(Fluid liquid){
  if (liquid.canBePlacedInWorld())   return BLOCK_TEXTURE;
 else   return ITEM_TEXTURE;
}","public static ResourceLocation getFluidSheet(Fluid liquid){
  return BLOCK_TEXTURE;
}",0.7264957264957265
156928,"public static ResourceLocation getFluidSheet(Fluid liquid){
  return BLOCK_TEXTURE;
}","public static ResourceLocation getFluidSheet(Fluid liquid){
  if (liquid.canBePlacedInWorld())   return BLOCK_TEXTURE;
 else   return ITEM_TEXTURE;
}",0.7264957264957265
156929,"@Override public float getPistonSpeed(){
  if (CoreProxy.proxy.isSimulating(worldObj))   return Math.max(0.8f * getHeatLevel(),0.01f);
switch (getEnergyStage()) {
case BLUE:
    return 0.01F;
case GREEN:
  return 0.02F;
case YELLOW:
return 0.04F;
case RED:
return 0.08F;
default :
return 0;
}
}","@Override public float getPistonSpeed(){
  if (CoreProxy.proxy.isSimulating(worldObj))   return Math.max(0.08f * getHeatLevel(),0.01f);
switch (getEnergyStage()) {
case GREEN:
    return 0.02F;
case YELLOW:
  return 0.04F;
case RED:
return 0.08F;
default :
return 0.01F;
}
}",0.9330985915492958
156930,"@Override public float maxEnergyExtracted(){
  return 1;
}","@Override public float maxEnergyExtracted(){
  return 1 + PowerHandler.PerditionCalculator.MIN_POWERLOSS;
}",0.703030303030303
156931,"@Override public void engineUpdate(){
  super.engineUpdate();
  if (isRedstonePowered)   if (worldObj.getTotalWorldTime() % 20 == 0)   addEnergy(1);
}","@Override public void engineUpdate(){
  super.engineUpdate();
  if (isRedstonePowered)   if (worldObj.getTotalWorldTime() % 16 == 0)   addEnergy(1);
}",0.9866666666666668
156932,"private void pipePlugRenderer(RenderBlocks renderblocks,Block block,PipeRenderState state,int x,int y,int z){
  float zFightOffset=1F / 4096F;
  float[][] zeroState=new float[3][2];
  zeroState[0][0]=0.25F + zFightOffset;
  zeroState[0][1]=0.75F - zFightOffset;
  zeroState[1][0]=0.125F;
  zeroState[1][1]=0.25F;
  zeroState[2][0]=0.25F + zFightOffset;
  zeroState[2][1]=0.75F - zFightOffset;
  state.currentTexture=BuildCraftTransport.instance.pipeIconProvider.getIcon(PipeIconProvider.TYPE.PipeStructureCobblestone.ordinal());
  for (  ForgeDirection direction : ForgeDirection.VALID_DIRECTIONS) {
    if (state.plugMatrix.isConnected(direction)) {
      float[][] rotated=deepClone(zeroState);
      transform(rotated,direction);
      block.setBlockBounds(rotated[0][0],rotated[1][0],rotated[2][0],rotated[0][1],rotated[1][1],rotated[2][1]);
      renderblocks.setRenderBoundsFromBlock(block);
      renderblocks.renderStandardBlock(block,x,y,z);
    }
  }
  zeroState[0][0]=0.25F + 0.125F / 2 + zFightOffset;
  zeroState[0][1]=0.75F - 0.125F / 2 + zFightOffset;
  zeroState[1][0]=0.25F;
  zeroState[1][1]=0.25F + 0.125F;
  zeroState[2][0]=0.25F + 0.125F / 2;
  zeroState[2][1]=0.75F - 0.125F / 2;
  state.currentTexture=BuildCraftTransport.instance.pipeIconProvider.getIcon(PipeIconProvider.TYPE.PipeStructureCobblestone.ordinal());
  for (  ForgeDirection direction : ForgeDirection.VALID_DIRECTIONS) {
    if (state.plugMatrix.isConnected(direction)) {
      float[][] rotated=deepClone(zeroState);
      transform(rotated,direction);
      block.setBlockBounds(rotated[0][0],rotated[1][0],rotated[2][0],rotated[0][1],rotated[1][1],rotated[2][1]);
      renderblocks.setRenderBoundsFromBlock(block);
      renderblocks.renderStandardBlock(block,x,y,z);
    }
  }
}","private void pipePlugRenderer(RenderBlocks renderblocks,Block block,PipeRenderState state,int x,int y,int z){
  float zFightOffset=1F / 4096F;
  float[][] zeroState=new float[3][2];
  zeroState[0][0]=0.25F + zFightOffset;
  zeroState[0][1]=0.75F - zFightOffset;
  zeroState[1][0]=0.125F;
  zeroState[1][1]=0.251F;
  zeroState[2][0]=0.25F + zFightOffset;
  zeroState[2][1]=0.75F - zFightOffset;
  state.currentTexture=BuildCraftTransport.instance.pipeIconProvider.getIcon(PipeIconProvider.TYPE.PipeStructureCobblestone.ordinal());
  for (  ForgeDirection direction : ForgeDirection.VALID_DIRECTIONS) {
    if (state.plugMatrix.isConnected(direction)) {
      float[][] rotated=deepClone(zeroState);
      transform(rotated,direction);
      block.setBlockBounds(rotated[0][0],rotated[1][0],rotated[2][0],rotated[0][1],rotated[1][1],rotated[2][1]);
      renderblocks.setRenderBoundsFromBlock(block);
      renderblocks.renderStandardBlock(block,x,y,z);
    }
  }
  zeroState[0][0]=0.25F + 0.125F / 2 + zFightOffset;
  zeroState[0][1]=0.75F - 0.125F / 2 + zFightOffset;
  zeroState[1][0]=0.25F;
  zeroState[1][1]=0.25F + 0.125F;
  zeroState[2][0]=0.25F + 0.125F / 2;
  zeroState[2][1]=0.75F - 0.125F / 2;
  state.currentTexture=BuildCraftTransport.instance.pipeIconProvider.getIcon(PipeIconProvider.TYPE.PipeStructureCobblestone.ordinal());
  for (  ForgeDirection direction : ForgeDirection.VALID_DIRECTIONS) {
    if (state.plugMatrix.isConnected(direction)) {
      float[][] rotated=deepClone(zeroState);
      transform(rotated,direction);
      block.setBlockBounds(rotated[0][0],rotated[1][0],rotated[2][0],rotated[0][1],rotated[1][1],rotated[2][1]);
      renderblocks.setRenderBoundsFromBlock(block);
      renderblocks.renderStandardBlock(block,x,y,z);
    }
  }
}",0.9997177533163986
156933,"private void pipeGateRender(RenderBlocks renderblocks,Block block,PipeRenderState state,int x,int y,int z){
  state.currentTexture=BuildCraftTransport.instance.gateIconProvider.getIcon(state.getGateIconIndex());
  float min=Utils.pipeMinPos + 0.05F;
  float max=Utils.pipeMaxPos - 0.05F;
  if (shouldRenderNormalPipeSide(state,ForgeDirection.WEST)) {
    block.setBlockBounds(Utils.pipeMinPos - 0.10F,min,min,Utils.pipeMinPos,max,max);
    renderblocks.setRenderBoundsFromBlock(block);
    renderblocks.renderStandardBlock(block,x,y,z);
  }
  if (shouldRenderNormalPipeSide(state,ForgeDirection.EAST)) {
    block.setBlockBounds(Utils.pipeMaxPos,min,min,Utils.pipeMaxPos + 0.10F,max,max);
    renderblocks.setRenderBoundsFromBlock(block);
    renderblocks.renderStandardBlock(block,x,y,z);
  }
  if (shouldRenderNormalPipeSide(state,ForgeDirection.DOWN)) {
    block.setBlockBounds(min,Utils.pipeMinPos - 0.10F,min,max,Utils.pipeMinPos,max);
    renderblocks.setRenderBoundsFromBlock(block);
    renderblocks.renderStandardBlock(block,x,y,z);
  }
  if (shouldRenderNormalPipeSide(state,ForgeDirection.UP)) {
    block.setBlockBounds(min,Utils.pipeMaxPos,min,max,Utils.pipeMaxPos + 0.10F,max);
    renderblocks.setRenderBoundsFromBlock(block);
    renderblocks.renderStandardBlock(block,x,y,z);
  }
  if (shouldRenderNormalPipeSide(state,ForgeDirection.NORTH)) {
    block.setBlockBounds(min,min,Utils.pipeMinPos - 0.10F,max,max,Utils.pipeMinPos);
    renderblocks.setRenderBoundsFromBlock(block);
    renderblocks.renderStandardBlock(block,x,y,z);
  }
  if (shouldRenderNormalPipeSide(state,ForgeDirection.SOUTH)) {
    block.setBlockBounds(min,min,Utils.pipeMaxPos,max,max,Utils.pipeMaxPos + 0.10F);
    renderblocks.setRenderBoundsFromBlock(block);
    renderblocks.renderStandardBlock(block,x,y,z);
  }
}","private void pipeGateRender(RenderBlocks renderblocks,Block block,PipeRenderState state,int x,int y,int z){
  state.currentTexture=BuildCraftTransport.instance.gateIconProvider.getIcon(state.getGateIconIndex());
  float min=Utils.pipeMinPos + 0.05F;
  float max=Utils.pipeMaxPos - 0.05F;
  if (shouldRenderNormalPipeSide(state,ForgeDirection.WEST)) {
    block.setBlockBounds(Utils.pipeMinPos - 0.10F,min,min,Utils.pipeMinPos + 0.001F,max,max);
    renderblocks.setRenderBoundsFromBlock(block);
    renderblocks.renderStandardBlock(block,x,y,z);
  }
  if (shouldRenderNormalPipeSide(state,ForgeDirection.EAST)) {
    block.setBlockBounds(Utils.pipeMaxPos + 0.001F,min,min,Utils.pipeMaxPos + 0.10F,max,max);
    renderblocks.setRenderBoundsFromBlock(block);
    renderblocks.renderStandardBlock(block,x,y,z);
  }
  if (shouldRenderNormalPipeSide(state,ForgeDirection.DOWN)) {
    block.setBlockBounds(min,Utils.pipeMinPos - 0.10F,min,max,Utils.pipeMinPos + 0.001F,max);
    renderblocks.setRenderBoundsFromBlock(block);
    renderblocks.renderStandardBlock(block,x,y,z);
  }
  if (shouldRenderNormalPipeSide(state,ForgeDirection.UP)) {
    block.setBlockBounds(min,Utils.pipeMaxPos + 0.001F,min,max,Utils.pipeMaxPos + 0.10F,max);
    renderblocks.setRenderBoundsFromBlock(block);
    renderblocks.renderStandardBlock(block,x,y,z);
  }
  if (shouldRenderNormalPipeSide(state,ForgeDirection.NORTH)) {
    block.setBlockBounds(min,min,Utils.pipeMinPos - 0.10F,max,max,Utils.pipeMinPos + 0.001F);
    renderblocks.setRenderBoundsFromBlock(block);
    renderblocks.renderStandardBlock(block,x,y,z);
  }
  if (shouldRenderNormalPipeSide(state,ForgeDirection.SOUTH)) {
    block.setBlockBounds(min,min,Utils.pipeMaxPos + 0.001F,max,max,Utils.pipeMaxPos + 0.10F);
    renderblocks.setRenderBoundsFromBlock(block);
    renderblocks.renderStandardBlock(block,x,y,z);
  }
}",0.985278080697928
156934,"public static PacketPayload makePayload(int type){
  if (type == Type.ARRAY.ordinal())   return new PacketPayloadArrays();
  if (type == Type.STREAM.ordinal())   return null;
  return null;
}","public static PacketPayload makePayload(int type){
  if (type == Type.ARRAY.ordinal())   return new PacketPayloadArrays();
  if (type == Type.STREAM.ordinal())   return new PacketPayloadStream();
  return null;
}",0.9330024813895782
156935,"@Override public void registerBlockRenderers(){
  RenderingEntityBlocks.blockByEntityRenders.put(new EntityRenderIndex(BuildCraftEnergy.engineBlock,0),new RenderEngine(DefaultProps.TEXTURE_PATH_BLOCKS + ""String_Node_Str""));
  RenderingEntityBlocks.blockByEntityRenders.put(new EntityRenderIndex(BuildCraftEnergy.engineBlock,1),new RenderEngine(DefaultProps.TEXTURE_PATH_BLOCKS + ""String_Node_Str""));
  RenderingEntityBlocks.blockByEntityRenders.put(new EntityRenderIndex(BuildCraftEnergy.engineBlock,2),new RenderEngine(DefaultProps.TEXTURE_PATH_BLOCKS + ""String_Node_Str""));
}","@Override public void registerBlockRenderers(){
  RenderingEntityBlocks.blockByEntityRenders.put(new EntityRenderIndex(BuildCraftEnergy.engineBlock,0),new RenderEngine(TileEngine.WOOD_TEXTURE));
  RenderingEntityBlocks.blockByEntityRenders.put(new EntityRenderIndex(BuildCraftEnergy.engineBlock,1),new RenderEngine(TileEngine.STONE_TEXTURE));
  RenderingEntityBlocks.blockByEntityRenders.put(new EntityRenderIndex(BuildCraftEnergy.engineBlock,2),new RenderEngine(TileEngine.IRON_TEXTURE));
}",0.8295880149812734
156936,public abstract String getTextureFile();,public abstract ResourceLocation getTextureFile();,0.8222222222222222
156937,"@Override public String getTextureFile(){
  return DefaultProps.TEXTURE_PATH_BLOCKS + ""String_Node_Str"";
}","@Override public ResourceLocation getTextureFile(){
  return IRON_TEXTURE;
}",0.6373626373626373
156938,"@Override public String getTextureFile(){
  return DefaultProps.TEXTURE_PATH_BLOCKS + ""String_Node_Str"";
}","@Override public ResourceLocation getTextureFile(){
  return WOOD_TEXTURE;
}",0.6483516483516484
156939,"@Override public String getTextureFile(){
  return DefaultProps.TEXTURE_PATH_BLOCKS + ""String_Node_Str"";
}","@Override public ResourceLocation getTextureFile(){
  return STONE_TEXTURE;
}",0.6338797814207651
156940,"@Override public String getTextureFile(){
  return DefaultProps.TEXTURE_PATH_BLOCKS + ""String_Node_Str"";
}","@Override public ResourceLocation getTextureFile(){
  return WOOD_TEXTURE;
}",0.6483516483516484
156941,"public RenderEngine(String baseTexture){
  this();
  this.baseTexture=baseTexture;
  setTileEntityRenderer(TileEntityRenderer.instance);
}","public RenderEngine(ResourceLocation baseTexture){
  this();
  this.baseTexture=baseTexture;
  setTileEntityRenderer(TileEntityRenderer.instance);
}",0.944055944055944
156942,"private void render(EnergyStage energy,float progress,ForgeDirection orientation,String baseTexture,double x,double y,double z){
  if (BuildCraftCore.render == RenderMode.NoDynamic) {
    return;
  }
  GL11.glPushMatrix();
  GL11.glPushAttrib(GL11.GL_ENABLE_BIT);
  GL11.glEnable(GL11.GL_LIGHTING);
  GL11.glDisable(GL11.GL_BLEND);
  GL11.glEnable(GL11.GL_CULL_FACE);
  GL11.glColor3f(1,1,1);
  GL11.glTranslatef((float)x,(float)y,(float)z);
  float step;
  if (progress > 0.5) {
    step=7.99F - (progress - 0.5F) * 2F * 7.99F;
  }
 else {
    step=progress * 2F * 7.99F;
  }
  float translatefact=step / 16;
  float[] angle={0,0,0};
  float[] translate={orientation.offsetX,orientation.offsetY,orientation.offsetZ};
switch (orientation) {
case EAST:
case WEST:
case DOWN:
    angle[2]=angleMap[orientation.ordinal()];
  break;
case SOUTH:
case NORTH:
angle[0]=angleMap[orientation.ordinal()];
break;
}
box.rotateAngleX=angle[0];
box.rotateAngleY=angle[1];
box.rotateAngleZ=angle[2];
trunk.rotateAngleX=angle[0];
trunk.rotateAngleY=angle[1];
trunk.rotateAngleZ=angle[2];
movingBox.rotateAngleX=angle[0];
movingBox.rotateAngleY=angle[1];
movingBox.rotateAngleZ=angle[2];
chamber.rotateAngleX=angle[0];
chamber.rotateAngleY=angle[1];
chamber.rotateAngleZ=angle[2];
float factor=(float)(1.0 / 16.0);
func_110628_a(new ResourceLocation(baseTexture));
box.render(factor);
GL11.glTranslatef(translate[0] * translatefact,translate[1] * translatefact,translate[2] * translatefact);
movingBox.render(factor);
GL11.glTranslatef(-translate[0] * translatefact,-translate[1] * translatefact,-translate[2] * translatefact);
func_110628_a(new ResourceLocation(DefaultProps.TEXTURE_PATH_BLOCKS + ""String_Node_Str""));
float chamberf=2F / 16F;
for (int i=0; i <= step + 2; i+=2) {
chamber.render(factor);
GL11.glTranslatef(translate[0] * chamberf,translate[1] * chamberf,translate[2] * chamberf);
}
for (int i=0; i <= step + 2; i+=2) {
GL11.glTranslatef(-translate[0] * chamberf,-translate[1] * chamberf,-translate[2] * chamberf);
}
String texture=""String_Node_Str"";
switch (energy) {
case BLUE:
texture=DefaultProps.TEXTURE_PATH_BLOCKS + ""String_Node_Str"";
break;
case GREEN:
texture=DefaultProps.TEXTURE_PATH_BLOCKS + ""String_Node_Str"";
break;
case YELLOW:
texture=DefaultProps.TEXTURE_PATH_BLOCKS + ""String_Node_Str"";
break;
default :
texture=DefaultProps.TEXTURE_PATH_BLOCKS + ""String_Node_Str"";
break;
}
func_110628_a(new ResourceLocation(texture));
trunk.render(factor);
GL11.glPopAttrib();
GL11.glPopMatrix();
}","private void render(EnergyStage energy,float progress,ForgeDirection orientation,ResourceLocation baseTexture,double x,double y,double z){
  if (BuildCraftCore.render == RenderMode.NoDynamic) {
    return;
  }
  GL11.glPushMatrix();
  GL11.glPushAttrib(GL11.GL_ENABLE_BIT);
  GL11.glEnable(GL11.GL_LIGHTING);
  GL11.glDisable(GL11.GL_BLEND);
  GL11.glEnable(GL11.GL_CULL_FACE);
  GL11.glColor3f(1,1,1);
  GL11.glTranslatef((float)x,(float)y,(float)z);
  float step;
  if (progress > 0.5) {
    step=7.99F - (progress - 0.5F) * 2F * 7.99F;
  }
 else {
    step=progress * 2F * 7.99F;
  }
  float translatefact=step / 16;
  float[] angle={0,0,0};
  float[] translate={orientation.offsetX,orientation.offsetY,orientation.offsetZ};
switch (orientation) {
case EAST:
case WEST:
case DOWN:
    angle[2]=angleMap[orientation.ordinal()];
  break;
case SOUTH:
case NORTH:
angle[0]=angleMap[orientation.ordinal()];
break;
}
box.rotateAngleX=angle[0];
box.rotateAngleY=angle[1];
box.rotateAngleZ=angle[2];
trunk.rotateAngleX=angle[0];
trunk.rotateAngleY=angle[1];
trunk.rotateAngleZ=angle[2];
movingBox.rotateAngleX=angle[0];
movingBox.rotateAngleY=angle[1];
movingBox.rotateAngleZ=angle[2];
chamber.rotateAngleX=angle[0];
chamber.rotateAngleY=angle[1];
chamber.rotateAngleZ=angle[2];
float factor=(float)(1.0 / 16.0);
func_110628_a(baseTexture);
box.render(factor);
GL11.glTranslatef(translate[0] * translatefact,translate[1] * translatefact,translate[2] * translatefact);
movingBox.render(factor);
GL11.glTranslatef(-translate[0] * translatefact,-translate[1] * translatefact,-translate[2] * translatefact);
func_110628_a(CHAMBER_TEXTURE);
float chamberf=2F / 16F;
for (int i=0; i <= step + 2; i+=2) {
chamber.render(factor);
GL11.glTranslatef(translate[0] * chamberf,translate[1] * chamberf,translate[2] * chamberf);
}
for (int i=0; i <= step + 2; i+=2) {
GL11.glTranslatef(-translate[0] * chamberf,-translate[1] * chamberf,-translate[2] * chamberf);
}
ResourceLocation texture;
switch (energy) {
case BLUE:
texture=TRUNK_BLUE_TEXTURE;
break;
case GREEN:
texture=TRUNK_GREEN_TEXTURE;
break;
case YELLOW:
texture=TRUNK_YELLOW_TEXTURE;
break;
default :
texture=TRUNK_RED_TEXTURE;
break;
}
func_110628_a(texture);
trunk.render(factor);
GL11.glPopAttrib();
GL11.glPopMatrix();
}",0.7535137402978813
156943,"@Override public void handleUpdatePacket(PacketUpdate packet) throws IOException {
  if (packet.payload != null) {
    DataInputStream stream=((PacketPayloadStream)packet.payload).stream;
    animationSpeed=stream.readFloat();
    tankManager.readData(stream);
  }
}","@Override public void handleUpdatePacket(PacketUpdate packet) throws IOException {
  DataInputStream stream=((PacketPayloadStream)packet.payload).stream;
  animationSpeed=stream.readFloat();
  tankManager.readData(stream);
}",0.4040816326530612
156944,"@Override protected void writeEntityToNBT(NBTTagCompound nbttagcompound){
  nbttagcompound.setDouble(""String_Node_Str"",iSize);
  nbttagcompound.setDouble(""String_Node_Str"",jSize);
  nbttagcompound.setDouble(""String_Node_Str"",kSize);
}","@Override protected void writeEntityToNBT(NBTTagCompound data){
  data.setDouble(""String_Node_Str"",iSize);
  data.setDouble(""String_Node_Str"",jSize);
  data.setDouble(""String_Node_Str"",kSize);
}",0.8691588785046729
156945,"@Override public int getBrightnessForRender(float par1){
  return 210;
}","@Override public int getBrightnessForRender(float par1){
  return brightness > 0 ? brightness : super.getBrightnessForRender(par1);
}",0.6829268292682927
156946,"@Override protected void readEntityFromNBT(NBTTagCompound nbttagcompound){
  iSize=nbttagcompound.getDouble(""String_Node_Str"");
  jSize=nbttagcompound.getDouble(""String_Node_Str"");
  kSize=nbttagcompound.getDouble(""String_Node_Str"");
}","@Override protected void readEntityFromNBT(NBTTagCompound data){
  iSize=data.getDouble(""String_Node_Str"");
  jSize=data.getDouble(""String_Node_Str"");
  kSize=data.getDouble(""String_Node_Str"");
}",0.8697674418604651
156947,"public static EntityBlock createLaser(World world,Position p1,Position p2,LaserKind kind){
  if (p1.equals(p2)) {
    return null;
  }
  double iSize=p2.x - p1.x;
  double jSize=p2.y - p1.y;
  double kSize=p2.z - p1.z;
  double i=p1.x;
  double j=p1.y;
  double k=p1.z;
  if (iSize != 0) {
    i+=0.5;
    j+=0.45;
    k+=0.45;
    jSize=0.10;
    kSize=0.10;
  }
 else   if (jSize != 0) {
    i+=0.45;
    j+=0.5;
    k+=0.45;
    iSize=0.10;
    kSize=0.10;
  }
 else   if (kSize != 0) {
    i+=0.45;
    j+=0.45;
    k+=0.5;
    iSize=0.10;
    jSize=0.10;
  }
  EntityBlock block=CoreProxy.proxy.newEntityBlock(world,i,j,k,iSize,jSize,kSize,kind);
  world.spawnEntityInWorld(block);
  return block;
}","public static EntityBlock createLaser(World world,Position p1,Position p2,LaserKind kind){
  if (p1.equals(p2)) {
    return null;
  }
  double iSize=p2.x - p1.x;
  double jSize=p2.y - p1.y;
  double kSize=p2.z - p1.z;
  double i=p1.x;
  double j=p1.y;
  double k=p1.z;
  if (iSize != 0) {
    i+=0.5;
    j+=0.45;
    k+=0.45;
    jSize=0.10;
    kSize=0.10;
  }
 else   if (jSize != 0) {
    i+=0.45;
    j+=0.5;
    k+=0.45;
    iSize=0.10;
    kSize=0.10;
  }
 else   if (kSize != 0) {
    i+=0.45;
    j+=0.45;
    k+=0.5;
    iSize=0.10;
    jSize=0.10;
  }
  EntityBlock block=CoreProxy.proxy.newEntityBlock(world,i,j,k,iSize,jSize,kSize,kind);
  block.setBrightness(210);
  world.spawnEntityInWorld(block);
  return block;
}",0.98050139275766
156948,"public long durationOfLastDelay(){
  return duration;
}","public long durationOfLastDelay(){
  return marked ? duration : 0;
}",0.8943089430894309
156949,"/** 
 * Return true if a given delay has passed since last time marked was called successfully.
 */
public boolean markTimeIfDelay(World world,long delay){
  if (world == null)   return false;
  long currentTime=world.getWorldTime();
  if (currentTime < lastMark) {
    lastMark=currentTime;
    return false;
  }
 else   if (lastMark + delay <= currentTime) {
    duration=currentTime - lastMark;
    lastMark=world.getWorldTime();
    return true;
  }
 else   return false;
}","/** 
 * Return true if a given delay has passed since last time marked was called successfully.
 */
public boolean markTimeIfDelay(World world,long delay){
  if (world == null)   return false;
  long currentTime=world.getWorldTime();
  if (currentTime < lastMark) {
    lastMark=currentTime;
    return false;
  }
 else   if (lastMark + delay <= currentTime) {
    duration=currentTime - lastMark;
    lastMark=world.getWorldTime();
    marked=true;
    return true;
  }
 else   return false;
}",0.9824922760041196
156950,"private void applyPerdition(){
  if (energyStored > 0) {
    if (perditionTracker.markTimeIfDelay(receptor.getWorldObj(),1)) {
      for (int i=0; i < perditionTracker.durationOfLastDelay(); i++) {
        float newEnergy=getPerdition().applyPerdition(this,energyStored);
        if (newEnergy == 0 || newEnergy < energyStored) {
          energyStored=newEnergy;
        }
 else {
          energyStored=DEFUALT_PERDITION.applyPerdition(this,energyStored);
        }
      }
    }
  }
}","private void applyPerdition(){
  if (perditionTracker.markTimeIfDelay(receptor.getWorldObj(),1) && energyStored > 0) {
    float newEnergy=getPerdition().applyPerdition(this,energyStored,perditionTracker.durationOfLastDelay());
    if (newEnergy == 0 || newEnergy < energyStored) {
      energyStored=newEnergy;
    }
 else {
      energyStored=DEFUALT_PERDITION.applyPerdition(this,energyStored,perditionTracker.durationOfLastDelay());
    }
    validateEnergy();
  }
}",0.6854754440961337
156951,"public void setPerdition(PerditionCalculator perdition){
  this.perdition=perdition;
}","/** 
 * Allows you to define a new PerditionCalculator class to handler perdition calculations. For example if you want exponentially increasing loss bases on amount stored.
 * @param perdition
 */
public void setPerdition(PerditionCalculator perdition){
  this.perdition=perdition;
}",0.4648648648648649
156952,"/** 
 * Extract energy from the PowerHandler. You must call this even if doWork() triggers.
 * @param min
 * @param max
 * @param doUse
 * @return amount used
 */
public float useEnergy(float min,float max,boolean doUse){
  float result=0;
  if (energyStored >= min) {
    if (energyStored <= max) {
      result=energyStored;
      if (doUse) {
        energyStored=0;
      }
    }
 else {
      result=max;
      if (doUse) {
        energyStored-=max;
      }
    }
  }
  return result;
}","/** 
 * Extract energy from the PowerHandler. You must call this even if doWork() triggers.
 * @param min
 * @param max
 * @param doUse
 * @return amount used
 */
public float useEnergy(float min,float max,boolean doUse){
  applyPerdition();
  float result=0;
  if (energyStored >= min) {
    if (energyStored <= max) {
      result=energyStored;
      if (doUse) {
        energyStored=0;
      }
    }
 else {
      result=max;
      if (doUse) {
        energyStored-=max;
      }
    }
  }
  validateEnergy();
  return result;
}",0.9609375
156953,"public void configurePowerPerdition(int powerLoss,int powerLossRegularity){
  if (powerLoss == 0 || powerLossRegularity == 0) {
    perdition=new PerditionCalculator(0);
    return;
  }
  perdition=new PerditionCalculator((float)powerLoss / (float)powerLossRegularity * 10.0F);
}","public void configurePowerPerdition(int powerLoss,int powerLossRegularity){
  if (powerLoss == 0 || powerLossRegularity == 0) {
    perdition=new PerditionCalculator(0);
    return;
  }
  perdition=new PerditionCalculator((float)powerLoss / (float)powerLossRegularity);
}",0.9854545454545456
156954,"public void setEnergy(float quantity){
  this.energyStored=quantity;
  if (energyStored > maxEnergyStored) {
    energyStored=maxEnergyStored;
  }
 else   if (energyStored < 0) {
    energyStored=0;
  }
}","public void setEnergy(float quantity){
  this.energyStored=quantity;
  validateEnergy();
}",0.564625850340136
156955,"@PreInit public void preInit(FMLPreInitializationEvent evt){
  Property engineId=BuildCraftCore.mainConfiguration.getBlock(""String_Node_Str"",DefaultProps.ENGINE_ID);
  Property oilStillId=BuildCraftCore.mainConfiguration.getBlock(""String_Node_Str"",DefaultProps.OIL_STILL_ID);
  Property oilMovingId=BuildCraftCore.mainConfiguration.getBlock(""String_Node_Str"",DefaultProps.OIL_MOVING_ID);
  Property bucketOilId=BuildCraftCore.mainConfiguration.get(Configuration.CATEGORY_ITEM,""String_Node_Str"",DefaultProps.BUCKET_OIL_ID);
  Property bucketFuelId=BuildCraftCore.mainConfiguration.get(Configuration.CATEGORY_ITEM,""String_Node_Str"",DefaultProps.BUCKET_FUEL_ID);
  Property itemFuelId=BuildCraftCore.mainConfiguration.get(Configuration.CATEGORY_ITEM,""String_Node_Str"",DefaultProps.FUEL_ID);
  Property oilDesertBiomeId=BuildCraftCore.mainConfiguration.get(""String_Node_Str"",""String_Node_Str"",160);
  Property oilOceanBiomeId=BuildCraftCore.mainConfiguration.get(""String_Node_Str"",""String_Node_Str"",161);
  canOilBurn=BuildCraftCore.mainConfiguration.get(Configuration.CATEGORY_GENERAL,""String_Node_Str"",true,""String_Node_Str"").getBoolean(true);
  BuildCraftCore.mainConfiguration.save();
class BiomeIdException extends RuntimeException {
    public BiomeIdException(    String biome,    int id){
      super(String.format(""String_Node_Str"",id,biome));
    }
  }
  int oilDesertId=oilDesertBiomeId.getInt();
  if (oilDesertId > 0) {
    if (BiomeGenBase.biomeList[oilDesertId] != null) {
      throw new BiomeIdException(""String_Node_Str"",oilDesertId);
    }
    biomeOilDesert=BiomeGenOilDesert.makeBiome(oilDesertId);
  }
  int oilOceanId=oilOceanBiomeId.getInt();
  if (oilOceanId > 0) {
    if (BiomeGenBase.biomeList[oilOceanId] != null) {
      throw new BiomeIdException(""String_Node_Str"",oilOceanId);
    }
    biomeOilOcean=BiomeGenOilOcean.makeBiome(oilOceanId);
  }
  engineBlock=new BlockEngine(engineId.getInt(DefaultProps.ENGINE_ID));
  CoreProxy.proxy.registerBlock(engineBlock,ItemEngine.class);
  LanguageRegistry.addName(new ItemStack(engineBlock,1,0),""String_Node_Str"");
  LanguageRegistry.addName(new ItemStack(engineBlock,1,1),""String_Node_Str"");
  LanguageRegistry.addName(new ItemStack(engineBlock,1,2),""String_Node_Str"");
  oilStill=(new BlockOilStill(oilStillId.getInt(DefaultProps.OIL_STILL_ID),Material.water)).setUnlocalizedName(""String_Node_Str"");
  CoreProxy.proxy.addName(oilStill.setUnlocalizedName(""String_Node_Str""),""String_Node_Str"");
  CoreProxy.proxy.registerBlock(oilStill);
  Property oilSpringsProp=BuildCraftCore.mainConfiguration.get(Configuration.CATEGORY_GENERAL,""String_Node_Str"",true);
  spawnOilSprings=oilSpringsProp.getBoolean(true);
  BlockSpring.EnumSpring.OIL.canGen=spawnOilSprings;
  BlockSpring.EnumSpring.OIL.liquidBlock=oilStill;
  oilMoving=(new BlockOilFlowing(oilMovingId.getInt(DefaultProps.OIL_MOVING_ID),Material.water)).setUnlocalizedName(""String_Node_Str"");
  CoreProxy.proxy.addName(oilMoving.setUnlocalizedName(""String_Node_Str""),""String_Node_Str"");
  CoreProxy.proxy.registerBlock(oilMoving);
  if (oilMoving.blockID + 1 != oilStill.blockID) {
    throw new RuntimeException(""String_Node_Str"");
  }
  fuel=new ItemBuildCraft(itemFuelId.getInt(DefaultProps.FUEL_ID)).setUnlocalizedName(""String_Node_Str"");
  LanguageRegistry.addName(fuel,""String_Node_Str"");
  MinecraftForge.EVENT_BUS.register(new OilBucketHandler());
  bucketOil=(new ItemBucketOil(bucketOilId.getInt(DefaultProps.BUCKET_OIL_ID))).setUnlocalizedName(""String_Node_Str"").setContainerItem(Item.bucketEmpty);
  LanguageRegistry.addName(bucketOil,""String_Node_Str"");
  bucketFuel=new ItemBuildCraft(bucketFuelId.getInt()).setUnlocalizedName(""String_Node_Str"").setContainerItem(Item.bucketEmpty);
  bucketFuel.setMaxStackSize(1);
  LanguageRegistry.addName(bucketFuel,""String_Node_Str"");
  oilLiquid=LiquidDictionary.getOrCreateLiquid(""String_Node_Str"",new LiquidStack(oilStill,1));
  fuelLiquid=LiquidDictionary.getOrCreateLiquid(""String_Node_Str"",new LiquidStack(fuel,1));
  RefineryRecipe.registerRefineryRecipe(new RefineryRecipe(LiquidDictionary.getLiquid(""String_Node_Str"",1),null,LiquidDictionary.getLiquid(""String_Node_Str"",1),12,1));
  IronEngineFuel.fuels.add(new IronEngineFuel(Block.lavaStill.blockID,1,20000));
  IronEngineFuel.fuels.add(new IronEngineFuel(LiquidDictionary.getLiquid(""String_Node_Str"",LiquidContainerRegistry.BUCKET_VOLUME),3,20000));
  IronEngineFuel.fuels.add(new IronEngineFuel(LiquidDictionary.getLiquid(""String_Node_Str"",LiquidContainerRegistry.BUCKET_VOLUME),6,100000));
  IronEngineCoolant.addCoolant(new LiquidStack(Block.waterStill,LiquidContainerRegistry.BUCKET_VOLUME),0.0025F);
  IronEngineCoolant.addCoolant(Block.ice.blockID,0,new LiquidStack(Block.waterStill,LiquidContainerRegistry.BUCKET_VOLUME * 2));
  LiquidContainerRegistry.registerLiquid(new LiquidContainerData(LiquidDictionary.getLiquid(""String_Node_Str"",LiquidContainerRegistry.BUCKET_VOLUME),new ItemStack(bucketOil),new ItemStack(Item.bucketEmpty)));
  LiquidContainerRegistry.registerLiquid(new LiquidContainerData(LiquidDictionary.getLiquid(""String_Node_Str"",LiquidContainerRegistry.BUCKET_VOLUME),new ItemStack(bucketFuel),new ItemStack(Item.bucketEmpty)));
  MinecraftForge.EVENT_BUS.register(this);
}","@PreInit public void preInit(FMLPreInitializationEvent evt){
  Property engineId=BuildCraftCore.mainConfiguration.getBlock(""String_Node_Str"",DefaultProps.ENGINE_ID);
  Property oilStillId=BuildCraftCore.mainConfiguration.getBlock(""String_Node_Str"",DefaultProps.OIL_STILL_ID);
  Property oilMovingId=BuildCraftCore.mainConfiguration.getBlock(""String_Node_Str"",DefaultProps.OIL_MOVING_ID);
  Property bucketOilId=BuildCraftCore.mainConfiguration.get(Configuration.CATEGORY_ITEM,""String_Node_Str"",DefaultProps.BUCKET_OIL_ID);
  Property bucketFuelId=BuildCraftCore.mainConfiguration.get(Configuration.CATEGORY_ITEM,""String_Node_Str"",DefaultProps.BUCKET_FUEL_ID);
  Property itemFuelId=BuildCraftCore.mainConfiguration.get(Configuration.CATEGORY_ITEM,""String_Node_Str"",DefaultProps.FUEL_ID);
  Property oilDesertBiomeId=BuildCraftCore.mainConfiguration.get(""String_Node_Str"",""String_Node_Str"",160);
  Property oilOceanBiomeId=BuildCraftCore.mainConfiguration.get(""String_Node_Str"",""String_Node_Str"",161);
  canOilBurn=BuildCraftCore.mainConfiguration.get(Configuration.CATEGORY_GENERAL,""String_Node_Str"",true,""String_Node_Str"").getBoolean(true);
  BuildCraftCore.mainConfiguration.save();
class BiomeIdException extends RuntimeException {
    public BiomeIdException(    String biome,    int id){
      super(String.format(""String_Node_Str"",id,biome));
    }
  }
  int oilDesertId=oilDesertBiomeId.getInt();
  if (oilDesertId > 0) {
    if (BiomeGenBase.biomeList[oilDesertId] != null) {
      throw new BiomeIdException(""String_Node_Str"",oilDesertId);
    }
    biomeOilDesert=BiomeGenOilDesert.makeBiome(oilDesertId);
  }
  int oilOceanId=oilOceanBiomeId.getInt();
  if (oilOceanId > 0) {
    if (BiomeGenBase.biomeList[oilOceanId] != null) {
      throw new BiomeIdException(""String_Node_Str"",oilOceanId);
    }
    biomeOilOcean=BiomeGenOilOcean.makeBiome(oilOceanId);
  }
  engineBlock=new BlockEngine(engineId.getInt(DefaultProps.ENGINE_ID));
  CoreProxy.proxy.registerBlock(engineBlock,ItemEngine.class);
  LanguageRegistry.addName(new ItemStack(engineBlock,1,0),""String_Node_Str"");
  LanguageRegistry.addName(new ItemStack(engineBlock,1,1),""String_Node_Str"");
  LanguageRegistry.addName(new ItemStack(engineBlock,1,2),""String_Node_Str"");
  oilStill=(new BlockOilStill(oilStillId.getInt(DefaultProps.OIL_STILL_ID),Material.water)).setUnlocalizedName(""String_Node_Str"");
  CoreProxy.proxy.addName(oilStill.setUnlocalizedName(""String_Node_Str""),""String_Node_Str"");
  CoreProxy.proxy.registerBlock(oilStill);
  Property oilSpringsProp=BuildCraftCore.mainConfiguration.get(Configuration.CATEGORY_GENERAL,""String_Node_Str"",true);
  spawnOilSprings=oilSpringsProp.getBoolean(true);
  BlockSpring.EnumSpring.OIL.canGen=spawnOilSprings;
  BlockSpring.EnumSpring.OIL.liquidBlock=oilStill;
  oilMoving=(new BlockOilFlowing(oilMovingId.getInt(DefaultProps.OIL_MOVING_ID),Material.water)).setUnlocalizedName(""String_Node_Str"");
  CoreProxy.proxy.addName(oilMoving.setUnlocalizedName(""String_Node_Str""),""String_Node_Str"");
  CoreProxy.proxy.registerBlock(oilMoving);
  if (oilMoving.blockID + 1 != oilStill.blockID) {
    throw new RuntimeException(""String_Node_Str"");
  }
  fuel=new ItemBuildCraft(itemFuelId.getInt(DefaultProps.FUEL_ID)).setUnlocalizedName(""String_Node_Str"");
  LanguageRegistry.addName(fuel,""String_Node_Str"");
  MinecraftForge.EVENT_BUS.register(new OilBucketHandler());
  bucketOil=(new ItemBucketOil(bucketOilId.getInt(DefaultProps.BUCKET_OIL_ID))).setUnlocalizedName(""String_Node_Str"").setContainerItem(Item.bucketEmpty);
  LanguageRegistry.addName(bucketOil,""String_Node_Str"");
  bucketFuel=new ItemBuildCraft(bucketFuelId.getInt()).setUnlocalizedName(""String_Node_Str"").setContainerItem(Item.bucketEmpty);
  bucketFuel.setMaxStackSize(1);
  LanguageRegistry.addName(bucketFuel,""String_Node_Str"");
  oilLiquid=LiquidDictionary.getOrCreateLiquid(""String_Node_Str"",new LiquidStack(oilStill,1));
  fuelLiquid=LiquidDictionary.getOrCreateLiquid(""String_Node_Str"",new LiquidStack(fuel,1));
  RefineryRecipe.registerRefineryRecipe(new RefineryRecipe(LiquidDictionary.getLiquid(""String_Node_Str"",1),null,LiquidDictionary.getLiquid(""String_Node_Str"",1),12,1));
  IronEngineFuel.fuels.add(new IronEngineFuel(Block.lavaStill.blockID,1,20000));
  IronEngineFuel.fuels.add(new IronEngineFuel(LiquidDictionary.getLiquid(""String_Node_Str"",LiquidContainerRegistry.BUCKET_VOLUME),3,20000));
  IronEngineFuel.fuels.add(new IronEngineFuel(LiquidDictionary.getLiquid(""String_Node_Str"",LiquidContainerRegistry.BUCKET_VOLUME),6,100000));
  IronEngineCoolant.addCoolant(new LiquidStack(Block.waterStill,LiquidContainerRegistry.BUCKET_VOLUME),0.0023F);
  IronEngineCoolant.addCoolant(Block.ice.blockID,0,new LiquidStack(Block.waterStill,LiquidContainerRegistry.BUCKET_VOLUME * 2));
  LiquidContainerRegistry.registerLiquid(new LiquidContainerData(LiquidDictionary.getLiquid(""String_Node_Str"",LiquidContainerRegistry.BUCKET_VOLUME),new ItemStack(bucketOil),new ItemStack(Item.bucketEmpty)));
  LiquidContainerRegistry.registerLiquid(new LiquidContainerData(LiquidDictionary.getLiquid(""String_Node_Str"",LiquidContainerRegistry.BUCKET_VOLUME),new ItemStack(bucketFuel),new ItemStack(Item.bucketEmpty)));
  MinecraftForge.EVENT_BUS.register(this);
}",0.9998090509833876
156956,"@Override public void engineUpdate(){
  final ItemStack stack=getStackInSlot(0);
  if (stack != null) {
    LiquidStack liquid=LiquidContainerRegistry.getLiquidForFilledItem(stack);
    if (liquid == null && heat > IDEAL_HEAT) {
      liquid=IronEngineCoolant.getLiquidCoolant(stack);
    }
    if (liquid != null) {
      if (fill(ForgeDirection.UNKNOWN,liquid,false) == liquid.amount) {
        fill(ForgeDirection.UNKNOWN,liquid,true);
        setInventorySlotContents(0,Utils.consumeItem(stack));
      }
    }
  }
  if (heat > IDEAL_HEAT) {
    float extraHeat=heat - IDEAL_HEAT;
    LiquidStack coolant=this.coolantTank.getLiquid();
    Coolant currentCoolant=IronEngineCoolant.getCoolant(coolant);
    if (currentCoolant != null) {
      float cooling=currentCoolant.getDegreesCoolingPerMB(heat);
      if (coolant.amount * cooling > extraHeat) {
        coolant.amount-=Math.round(extraHeat / cooling);
        heat=IDEAL_HEAT;
      }
 else {
        heat-=coolant.amount * cooling;
        coolantTank.setLiquid(null);
      }
    }
  }
  if (heat > 0 && (penaltyCooling > 0 || !isRedstonePowered)) {
    heat-=COOLDOWN_RATE;
  }
  if (heat <= MIN_HEAT) {
    heat=MIN_HEAT;
  }
  if (heat <= MIN_HEAT && penaltyCooling > 0) {
    penaltyCooling--;
  }
}","@Override public void engineUpdate(){
  final ItemStack stack=getStackInSlot(0);
  if (stack != null) {
    LiquidStack liquid=LiquidContainerRegistry.getLiquidForFilledItem(stack);
    if (liquid == null && heat > IDEAL_HEAT) {
      liquid=IronEngineCoolant.getLiquidCoolant(stack);
    }
    if (liquid != null) {
      if (fill(ForgeDirection.UNKNOWN,liquid,false) == liquid.amount) {
        fill(ForgeDirection.UNKNOWN,liquid,true);
        setInventorySlotContents(0,Utils.consumeItem(stack));
      }
    }
  }
  if (heat > IDEAL_HEAT) {
    float extraHeat=heat - IDEAL_HEAT;
    LiquidStack coolant=this.coolantTank.getLiquid();
    Coolant currentCoolant=IronEngineCoolant.getCoolant(coolant);
    if (currentCoolant != null) {
      float cooling=currentCoolant.getDegreesCoolingPerMB(heat);
      if (coolant.amount * cooling > extraHeat) {
        coolant.amount-=Math.round(extraHeat / cooling);
        heat=IDEAL_HEAT;
      }
 else {
        heat-=coolant.amount * cooling;
        coolantTank.setLiquid(null);
      }
    }
  }
  if (heat > MIN_HEAT && (penaltyCooling > 0 || !isRedstonePowered)) {
    heat-=COOLDOWN_RATE;
  }
  if (heat <= MIN_HEAT) {
    heat=MIN_HEAT;
  }
  if (heat <= MIN_HEAT && penaltyCooling > 0) {
    penaltyCooling--;
  }
}",0.9964497041420118
156957,"@PreInit public void preInit(FMLPreInitializationEvent evt){
  Property engineId=BuildCraftCore.mainConfiguration.getBlock(""String_Node_Str"",DefaultProps.ENGINE_ID);
  Property oilStillId=BuildCraftCore.mainConfiguration.getBlock(""String_Node_Str"",DefaultProps.OIL_STILL_ID);
  Property oilMovingId=BuildCraftCore.mainConfiguration.getBlock(""String_Node_Str"",DefaultProps.OIL_MOVING_ID);
  Property bucketOilId=BuildCraftCore.mainConfiguration.get(Configuration.CATEGORY_ITEM,""String_Node_Str"",DefaultProps.BUCKET_OIL_ID);
  Property bucketFuelId=BuildCraftCore.mainConfiguration.get(Configuration.CATEGORY_ITEM,""String_Node_Str"",DefaultProps.BUCKET_FUEL_ID);
  Property itemFuelId=BuildCraftCore.mainConfiguration.get(Configuration.CATEGORY_ITEM,""String_Node_Str"",DefaultProps.FUEL_ID);
  Property oilDesertBiomeId=BuildCraftCore.mainConfiguration.get(""String_Node_Str"",""String_Node_Str"",160);
  Property oilOceanBiomeId=BuildCraftCore.mainConfiguration.get(""String_Node_Str"",""String_Node_Str"",161);
  canOilBurn=BuildCraftCore.mainConfiguration.get(Configuration.CATEGORY_GENERAL,""String_Node_Str"",true,""String_Node_Str"").getBoolean(true);
  BuildCraftCore.mainConfiguration.save();
class BiomeIdException extends RuntimeException {
    public BiomeIdException(    String biome,    int id){
      super(String.format(""String_Node_Str"",id,biome));
    }
  }
  int oilDesertId=oilDesertBiomeId.getInt();
  if (oilDesertId > 0) {
    if (BiomeGenBase.biomeList[oilDesertId] != null) {
      throw new BiomeIdException(""String_Node_Str"",oilDesertId);
    }
    biomeOilDesert=BiomeGenOilDesert.makeBiome(oilDesertId);
  }
  int oilOceanId=oilOceanBiomeId.getInt();
  if (oilOceanId > 0) {
    if (BiomeGenBase.biomeList[oilOceanId] != null) {
      throw new BiomeIdException(""String_Node_Str"",oilOceanId);
    }
    biomeOilOcean=BiomeGenOilOcean.makeBiome(oilOceanId);
  }
  engineBlock=new BlockEngine(engineId.getInt(DefaultProps.ENGINE_ID));
  CoreProxy.proxy.registerBlock(engineBlock,ItemEngine.class);
  LanguageRegistry.addName(new ItemStack(engineBlock,1,0),""String_Node_Str"");
  LanguageRegistry.addName(new ItemStack(engineBlock,1,1),""String_Node_Str"");
  LanguageRegistry.addName(new ItemStack(engineBlock,1,2),""String_Node_Str"");
  oilStill=(new BlockOilStill(oilStillId.getInt(DefaultProps.OIL_STILL_ID),Material.water)).setUnlocalizedName(""String_Node_Str"");
  CoreProxy.proxy.addName(oilStill.setUnlocalizedName(""String_Node_Str""),""String_Node_Str"");
  CoreProxy.proxy.registerBlock(oilStill);
  Property oilSpringsProp=BuildCraftCore.mainConfiguration.get(Configuration.CATEGORY_GENERAL,""String_Node_Str"",true);
  spawnOilSprings=oilSpringsProp.getBoolean(true);
  BlockSpring.EnumSpring.OIL.canGen=spawnOilSprings;
  BlockSpring.EnumSpring.OIL.liquidBlock=oilStill;
  oilMoving=(new BlockOilFlowing(oilMovingId.getInt(DefaultProps.OIL_MOVING_ID),Material.water)).setUnlocalizedName(""String_Node_Str"");
  CoreProxy.proxy.addName(oilMoving.setUnlocalizedName(""String_Node_Str""),""String_Node_Str"");
  CoreProxy.proxy.registerBlock(oilMoving);
  if (oilMoving.blockID + 1 != oilStill.blockID) {
    throw new RuntimeException(""String_Node_Str"");
  }
  fuel=new ItemBuildCraft(itemFuelId.getInt(DefaultProps.FUEL_ID)).setUnlocalizedName(""String_Node_Str"");
  LanguageRegistry.addName(fuel,""String_Node_Str"");
  MinecraftForge.EVENT_BUS.register(new OilBucketHandler());
  bucketOil=(new ItemBucketOil(bucketOilId.getInt(DefaultProps.BUCKET_OIL_ID))).setUnlocalizedName(""String_Node_Str"").setContainerItem(Item.bucketEmpty);
  LanguageRegistry.addName(bucketOil,""String_Node_Str"");
  bucketFuel=new ItemBuildCraft(bucketFuelId.getInt()).setUnlocalizedName(""String_Node_Str"").setContainerItem(Item.bucketEmpty);
  bucketFuel.setMaxStackSize(1);
  LanguageRegistry.addName(bucketFuel,""String_Node_Str"");
  oilLiquid=LiquidDictionary.getOrCreateLiquid(""String_Node_Str"",new LiquidStack(oilStill,1));
  fuelLiquid=LiquidDictionary.getOrCreateLiquid(""String_Node_Str"",new LiquidStack(fuel,1));
  RefineryRecipe.registerRefineryRecipe(new RefineryRecipe(LiquidDictionary.getLiquid(""String_Node_Str"",1),null,LiquidDictionary.getLiquid(""String_Node_Str"",1),12,1));
  IronEngineFuel.fuels.add(new IronEngineFuel(Block.lavaStill.blockID,1,20000));
  IronEngineFuel.fuels.add(new IronEngineFuel(LiquidDictionary.getLiquid(""String_Node_Str"",LiquidContainerRegistry.BUCKET_VOLUME),3,20000));
  IronEngineFuel.fuels.add(new IronEngineFuel(LiquidDictionary.getLiquid(""String_Node_Str"",LiquidContainerRegistry.BUCKET_VOLUME),6,100000));
  IronEngineCoolant.addCoolant(new LiquidStack(Block.waterStill,LiquidContainerRegistry.BUCKET_VOLUME),0.0025F);
  IronEngineCoolant.addCoolant(Block.ice.blockID,0,new LiquidStack(Block.waterStill,LiquidContainerRegistry.BUCKET_VOLUME * 2));
  LiquidContainerRegistry.registerLiquid(new LiquidContainerData(LiquidDictionary.getLiquid(""String_Node_Str"",LiquidContainerRegistry.BUCKET_VOLUME),new ItemStack(bucketOil),new ItemStack(Item.bucketEmpty)));
  LiquidContainerRegistry.registerLiquid(new LiquidContainerData(LiquidDictionary.getLiquid(""String_Node_Str"",LiquidContainerRegistry.BUCKET_VOLUME),new ItemStack(bucketFuel),new ItemStack(Item.bucketEmpty)));
  MinecraftForge.EVENT_BUS.register(this);
}","@PreInit public void preInit(FMLPreInitializationEvent evt){
  Property engineId=BuildCraftCore.mainConfiguration.getBlock(""String_Node_Str"",DefaultProps.ENGINE_ID);
  Property oilStillId=BuildCraftCore.mainConfiguration.getBlock(""String_Node_Str"",DefaultProps.OIL_STILL_ID);
  Property oilMovingId=BuildCraftCore.mainConfiguration.getBlock(""String_Node_Str"",DefaultProps.OIL_MOVING_ID);
  Property bucketOilId=BuildCraftCore.mainConfiguration.get(Configuration.CATEGORY_ITEM,""String_Node_Str"",DefaultProps.BUCKET_OIL_ID);
  Property bucketFuelId=BuildCraftCore.mainConfiguration.get(Configuration.CATEGORY_ITEM,""String_Node_Str"",DefaultProps.BUCKET_FUEL_ID);
  Property itemFuelId=BuildCraftCore.mainConfiguration.get(Configuration.CATEGORY_ITEM,""String_Node_Str"",DefaultProps.FUEL_ID);
  Property oilDesertBiomeId=BuildCraftCore.mainConfiguration.get(""String_Node_Str"",""String_Node_Str"",160);
  Property oilOceanBiomeId=BuildCraftCore.mainConfiguration.get(""String_Node_Str"",""String_Node_Str"",161);
  canOilBurn=BuildCraftCore.mainConfiguration.get(Configuration.CATEGORY_GENERAL,""String_Node_Str"",true,""String_Node_Str"").getBoolean(true);
  BuildCraftCore.mainConfiguration.save();
class BiomeIdException extends RuntimeException {
    public BiomeIdException(    String biome,    int id){
      super(String.format(""String_Node_Str"",id,biome));
    }
  }
  int oilDesertId=oilDesertBiomeId.getInt();
  if (oilDesertId > 0) {
    if (BiomeGenBase.biomeList[oilDesertId] != null) {
      throw new BiomeIdException(""String_Node_Str"",oilDesertId);
    }
    biomeOilDesert=BiomeGenOilDesert.makeBiome(oilDesertId);
  }
  int oilOceanId=oilOceanBiomeId.getInt();
  if (oilOceanId > 0) {
    if (BiomeGenBase.biomeList[oilOceanId] != null) {
      throw new BiomeIdException(""String_Node_Str"",oilOceanId);
    }
    biomeOilOcean=BiomeGenOilOcean.makeBiome(oilOceanId);
  }
  engineBlock=new BlockEngine(engineId.getInt(DefaultProps.ENGINE_ID));
  CoreProxy.proxy.registerBlock(engineBlock,ItemEngine.class);
  LanguageRegistry.addName(new ItemStack(engineBlock,1,0),""String_Node_Str"");
  LanguageRegistry.addName(new ItemStack(engineBlock,1,1),""String_Node_Str"");
  LanguageRegistry.addName(new ItemStack(engineBlock,1,2),""String_Node_Str"");
  oilStill=(new BlockOilStill(oilStillId.getInt(DefaultProps.OIL_STILL_ID),Material.water)).setUnlocalizedName(""String_Node_Str"");
  CoreProxy.proxy.addName(oilStill.setUnlocalizedName(""String_Node_Str""),""String_Node_Str"");
  CoreProxy.proxy.registerBlock(oilStill);
  Property oilSpringsProp=BuildCraftCore.mainConfiguration.get(Configuration.CATEGORY_GENERAL,""String_Node_Str"",true);
  spawnOilSprings=oilSpringsProp.getBoolean(true);
  BlockSpring.EnumSpring.OIL.canGen=spawnOilSprings;
  BlockSpring.EnumSpring.OIL.liquidBlock=oilStill;
  oilMoving=(new BlockOilFlowing(oilMovingId.getInt(DefaultProps.OIL_MOVING_ID),Material.water)).setUnlocalizedName(""String_Node_Str"");
  CoreProxy.proxy.addName(oilMoving.setUnlocalizedName(""String_Node_Str""),""String_Node_Str"");
  CoreProxy.proxy.registerBlock(oilMoving);
  if (oilMoving.blockID + 1 != oilStill.blockID) {
    throw new RuntimeException(""String_Node_Str"");
  }
  fuel=new ItemBuildCraft(itemFuelId.getInt(DefaultProps.FUEL_ID)).setUnlocalizedName(""String_Node_Str"");
  LanguageRegistry.addName(fuel,""String_Node_Str"");
  MinecraftForge.EVENT_BUS.register(new OilBucketHandler());
  bucketOil=(new ItemBucketOil(bucketOilId.getInt(DefaultProps.BUCKET_OIL_ID))).setUnlocalizedName(""String_Node_Str"").setContainerItem(Item.bucketEmpty);
  LanguageRegistry.addName(bucketOil,""String_Node_Str"");
  bucketFuel=new ItemBuildCraft(bucketFuelId.getInt()).setUnlocalizedName(""String_Node_Str"").setContainerItem(Item.bucketEmpty);
  bucketFuel.setMaxStackSize(1);
  LanguageRegistry.addName(bucketFuel,""String_Node_Str"");
  oilLiquid=LiquidDictionary.getOrCreateLiquid(""String_Node_Str"",new LiquidStack(oilStill,1));
  fuelLiquid=LiquidDictionary.getOrCreateLiquid(""String_Node_Str"",new LiquidStack(fuel,1));
  RefineryRecipe.registerRefineryRecipe(new RefineryRecipe(LiquidDictionary.getLiquid(""String_Node_Str"",1),null,LiquidDictionary.getLiquid(""String_Node_Str"",1),12,1));
  IronEngineFuel.fuels.add(new IronEngineFuel(Block.lavaStill.blockID,1,20000));
  IronEngineFuel.fuels.add(new IronEngineFuel(LiquidDictionary.getLiquid(""String_Node_Str"",LiquidContainerRegistry.BUCKET_VOLUME),3,20000));
  IronEngineFuel.fuels.add(new IronEngineFuel(LiquidDictionary.getLiquid(""String_Node_Str"",LiquidContainerRegistry.BUCKET_VOLUME),6,100000));
  IronEngineCoolant.addCoolant(new LiquidStack(Block.waterStill,LiquidContainerRegistry.BUCKET_VOLUME),0.0023F);
  IronEngineCoolant.addCoolant(Block.ice.blockID,0,new LiquidStack(Block.waterStill,LiquidContainerRegistry.BUCKET_VOLUME * 2));
  LiquidContainerRegistry.registerLiquid(new LiquidContainerData(LiquidDictionary.getLiquid(""String_Node_Str"",LiquidContainerRegistry.BUCKET_VOLUME),new ItemStack(bucketOil),new ItemStack(Item.bucketEmpty)));
  LiquidContainerRegistry.registerLiquid(new LiquidContainerData(LiquidDictionary.getLiquid(""String_Node_Str"",LiquidContainerRegistry.BUCKET_VOLUME),new ItemStack(bucketFuel),new ItemStack(Item.bucketEmpty)));
  MinecraftForge.EVENT_BUS.register(this);
}",0.9998090509833876
156958,"@Override public void engineUpdate(){
  final ItemStack stack=getStackInSlot(0);
  if (stack != null) {
    LiquidStack liquid=LiquidContainerRegistry.getLiquidForFilledItem(stack);
    if (liquid == null && heat > IDEAL_HEAT) {
      liquid=IronEngineCoolant.getLiquidCoolant(stack);
    }
    if (liquid != null) {
      if (fill(ForgeDirection.UNKNOWN,liquid,false) == liquid.amount) {
        fill(ForgeDirection.UNKNOWN,liquid,true);
        setInventorySlotContents(0,Utils.consumeItem(stack));
      }
    }
  }
  if (heat > IDEAL_HEAT) {
    float extraHeat=heat - IDEAL_HEAT;
    LiquidStack coolant=this.coolantTank.getLiquid();
    Coolant currentCoolant=IronEngineCoolant.getCoolant(coolant);
    if (currentCoolant != null) {
      float cooling=currentCoolant.getDegreesCoolingPerMB(heat);
      if (coolant.amount * cooling > extraHeat) {
        coolant.amount-=Math.round(extraHeat / cooling);
        heat=IDEAL_HEAT;
      }
 else {
        heat-=coolant.amount * cooling;
        coolantTank.setLiquid(null);
      }
    }
  }
  if (heat > 0 && (penaltyCooling > 0 || !isRedstonePowered)) {
    heat-=COOLDOWN_RATE;
  }
  if (heat <= MIN_HEAT) {
    heat=MIN_HEAT;
  }
  if (heat <= MIN_HEAT && penaltyCooling > 0) {
    penaltyCooling--;
  }
}","@Override public void engineUpdate(){
  final ItemStack stack=getStackInSlot(0);
  if (stack != null) {
    LiquidStack liquid=LiquidContainerRegistry.getLiquidForFilledItem(stack);
    if (liquid == null && heat > IDEAL_HEAT) {
      liquid=IronEngineCoolant.getLiquidCoolant(stack);
    }
    if (liquid != null) {
      if (fill(ForgeDirection.UNKNOWN,liquid,false) == liquid.amount) {
        fill(ForgeDirection.UNKNOWN,liquid,true);
        setInventorySlotContents(0,Utils.consumeItem(stack));
      }
    }
  }
  if (heat > IDEAL_HEAT) {
    float extraHeat=heat - IDEAL_HEAT;
    LiquidStack coolant=this.coolantTank.getLiquid();
    Coolant currentCoolant=IronEngineCoolant.getCoolant(coolant);
    if (currentCoolant != null) {
      float cooling=currentCoolant.getDegreesCoolingPerMB(heat);
      if (coolant.amount * cooling > extraHeat) {
        coolant.amount-=Math.round(extraHeat / cooling);
        heat=IDEAL_HEAT;
      }
 else {
        heat-=coolant.amount * cooling;
        coolantTank.setLiquid(null);
      }
    }
  }
  if (heat > MIN_HEAT && (penaltyCooling > 0 || !isRedstonePowered)) {
    heat-=COOLDOWN_RATE;
  }
  if (heat <= MIN_HEAT) {
    heat=MIN_HEAT;
  }
  if (heat <= MIN_HEAT && penaltyCooling > 0) {
    penaltyCooling--;
  }
}",0.9964497041420118
156959,"@Override public void readFromNBT(NBTTagCompound data){
  super.readFromNBT(data);
  powerHandler.readFromNBT(data);
  initPowerProvider();
}","@Override public void readFromNBT(NBTTagCompound data){
  super.readFromNBT(data);
  powerHandler.readFromNBT(data);
  initPowerProvider();
  for (int i=0; i < ForgeDirection.VALID_DIRECTIONS.length; i++) {
    powerSources[i]=data.getBoolean(""String_Node_Str"" + i + ""String_Node_Str"");
  }
}",0.651270207852194
156960,"@Override public void updateEntity(){
  super.updateEntity();
  if (worldObj.isRemote)   return;
  if (powerHandler.getEnergyStored() <= 0)   return;
  int sources=0;
  for (  ForgeDirection o : ForgeDirection.VALID_DIRECTIONS) {
    if (!container.isPipeConnected(o)) {
      powerSources[o.ordinal()]=false;
      continue;
    }
    if (powerHandler.isPowerSource(o)) {
      powerSources[o.ordinal()]=true;
    }
    if (powerSources[o.ordinal()]) {
      sources++;
    }
  }
  if (sources <= 0)   return;
  float energyToRemove;
  if (powerHandler.getEnergyStored() > 40) {
    energyToRemove=powerHandler.getEnergyStored() / 40 + 4;
  }
 else   if (powerHandler.getEnergyStored() > 10) {
    energyToRemove=powerHandler.getEnergyStored() / 10;
  }
 else {
    energyToRemove=1;
  }
  energyToRemove/=(float)sources;
  PipeTransportPower trans=(PipeTransportPower)transport;
  for (  ForgeDirection o : ForgeDirection.VALID_DIRECTIONS) {
    if (!powerSources[o.ordinal()])     continue;
    float energyUsable=powerHandler.useEnergy(0,energyToRemove,false);
    float energySend=trans.receiveEnergy(o,energyUsable);
    if (energySend > 0) {
      powerHandler.useEnergy(0,energySend,true);
    }
  }
}","@Override public void updateEntity(){
  super.updateEntity();
  if (worldObj.isRemote)   return;
  if (powerHandler.getEnergyStored() <= 0)   return;
  int sources=0;
  for (  ForgeDirection o : ForgeDirection.VALID_DIRECTIONS) {
    if (!container.isPipeConnected(o)) {
      powerSources[o.ordinal()]=false;
      continue;
    }
    if (powerHandler.isPowerSource(o)) {
      powerSources[o.ordinal()]=true;
    }
    if (powerSources[o.ordinal()]) {
      sources++;
    }
  }
  if (sources <= 0) {
    powerHandler.useEnergy(5,5,true);
    return;
  }
  float energyToRemove;
  if (powerHandler.getEnergyStored() > 40) {
    energyToRemove=powerHandler.getEnergyStored() / 40 + 4;
  }
 else   if (powerHandler.getEnergyStored() > 10) {
    energyToRemove=powerHandler.getEnergyStored() / 10;
  }
 else {
    energyToRemove=1;
  }
  energyToRemove/=(float)sources;
  PipeTransportPower trans=(PipeTransportPower)transport;
  for (  ForgeDirection o : ForgeDirection.VALID_DIRECTIONS) {
    if (!powerSources[o.ordinal()])     continue;
    float energyUsable=powerHandler.useEnergy(0,energyToRemove,false);
    float energySend=trans.receiveEnergy(o,energyUsable);
    if (energySend > 0) {
      powerHandler.useEnergy(0,energySend,true);
    }
  }
}",0.974025974025974
156961,"@Override public void writeToNBT(NBTTagCompound data){
  super.writeToNBT(data);
  powerHandler.writeToNBT(data);
}","@Override public void writeToNBT(NBTTagCompound data){
  super.writeToNBT(data);
  powerHandler.writeToNBT(data);
  for (int i=0; i < ForgeDirection.VALID_DIRECTIONS.length; i++) {
    data.setBoolean(""String_Node_Str"" + i + ""String_Node_Str"",powerSources[i]);
  }
}",0.6036745406824147
156962,"public double receiveEnergy(ForgeDirection from,double val){
  step();
  if (this.container.pipe instanceof IPipeTransportPowerHook) {
    return ((IPipeTransportPowerHook)this.container.pipe).receiveEnergy(from,val);
  }
 else {
    internalNextPower[from.ordinal()]+=val;
    if (internalNextPower[from.ordinal()] > maxPower) {
      val=internalNextPower[from.ordinal()] - maxPower;
      internalNextPower[from.ordinal()]=maxPower;
    }
  }
  return val;
}","public double receiveEnergy(ForgeDirection from,double val){
  step();
  if (this.container.pipe instanceof IPipeTransportPowerHook) {
    return ((IPipeTransportPowerHook)this.container.pipe).receiveEnergy(from,val);
  }
 else {
    internalNextPower[from.ordinal()]+=val;
    if (internalNextPower[from.ordinal()] > maxPower) {
      val-=internalNextPower[from.ordinal()] - maxPower;
      internalNextPower[from.ordinal()]=maxPower;
    }
  }
  return val;
}",0.9989165763813652
156963,"public void step(){
  if (currentDate != worldObj.getWorldTime()) {
    currentDate=worldObj.getWorldTime();
    powerQuery=nextPowerQuery;
    nextPowerQuery=new int[6];
    double[] next=internalPower;
    internalPower=internalNextPower;
    internalNextPower=next;
    for (int i=0; i < powerQuery.length; i++) {
      int sum=0;
      for (int j=0; j < powerQuery.length; j++) {
        if (i != j) {
          sum+=powerQuery[j];
        }
      }
      if (sum == 0 && internalNextPower[i] > 0) {
        internalNextPower[i]-=1;
        if (internalNextPower[i] < 0) {
          internalNextPower[i]=0;
        }
      }
    }
  }
}","public void step(){
  if (currentDate != worldObj.getWorldTime()) {
    currentDate=worldObj.getWorldTime();
    powerQuery=nextPowerQuery;
    nextPowerQuery=new int[6];
    double[] next=internalPower;
    internalPower=internalNextPower;
    internalNextPower=next;
  }
}",0.5995623632385121
156964,"@Override public int powerRequest(ForgeDirection from){
  return 0;
}","@Override public int powerRequest(ForgeDirection from){
  return getPowerProvider().getMaxEnergyReceived();
}",0.7640449438202247
156965,"@Override public final void onCraftMatrixChanged(IInventory inv){
  super.onCraftMatrixChanged(inv);
  ItemStack output=tile.findRecipeOutput();
  if (output != null && tile.isLast()) {
    Utils.addItemToolTip(output,""String_Node_Str"",EnumChatFormatting.YELLOW + StringUtils.localize(""String_Node_Str""));
  }
  craftResult.setInventorySlotContents(0,output);
}","@Override public final void onCraftMatrixChanged(IInventory inv){
  super.onCraftMatrixChanged(inv);
  ItemStack output=tile.findRecipeOutput();
  craftResult.setInventorySlotContents(0,output);
}",0.703770197486535
156966,"public ContainerAutoWorkbench(InventoryPlayer inventoryplayer,TileAutoWorkbench t){
  super(t.getSizeInventory());
  craftResult=new InventoryCraftResult();
  this.tile=t;
  addSlotToContainer(new SlotUntouchable(craftResult,0,93,27){
    @Override public void onPickupFromSlot(    EntityPlayer player,    ItemStack itemstack){
      tile.useLast=true;
    }
  }
);
  addSlotToContainer(new SlotOutput(tile,TileAutoWorkbench.SLOT_RESULT,124,35));
  for (int y=0; y < 3; y++) {
    for (int x=0; x < 3; x++) {
      addSlotToContainer(new SlotWorkbench(tile.craftMatrix,x + y * 3,30 + x * 18,17 + y * 18));
    }
  }
  for (int y=0; y < 3; y++) {
    for (int x=0; x < 9; x++) {
      addSlotToContainer(new Slot(inventoryplayer,x + y * 9 + 9,8 + x * 18,84 + y * 18));
    }
  }
  for (int x=0; x < 9; x++) {
    addSlotToContainer(new Slot(inventoryplayer,x,8 + x * 18,142));
  }
  onCraftMatrixChanged(tile);
}","public ContainerAutoWorkbench(InventoryPlayer inventoryplayer,TileAutoWorkbench t){
  super(t.getSizeInventory());
  craftResult=new InventoryCraftResult(){
    @Override public void setInventorySlotContents(    int slot,    ItemStack stack){
      super.setInventorySlotContents(slot,stack);
      if (stack != null && tile.isLast() && CoreProxy.proxy.isRenderWorld(tile.worldObj)) {
        Utils.addItemToolTip(stack,""String_Node_Str"",EnumChatFormatting.YELLOW + StringUtils.localize(""String_Node_Str""));
      }
    }
  }
;
  this.tile=t;
  addSlotToContainer(new SlotUntouchable(craftResult,0,93,27){
    @Override public void onPickupFromSlot(    EntityPlayer player,    ItemStack itemstack){
      tile.useLast=true;
    }
  }
);
  addSlotToContainer(new SlotOutput(tile,TileAutoWorkbench.SLOT_RESULT,124,35));
  for (int y=0; y < 3; y++) {
    for (int x=0; x < 3; x++) {
      addSlotToContainer(new SlotWorkbench(tile.craftMatrix,x + y * 3,30 + x * 18,17 + y * 18));
    }
  }
  for (int y=0; y < 3; y++) {
    for (int x=0; x < 9; x++) {
      addSlotToContainer(new Slot(inventoryplayer,x + y * 9 + 9,8 + x * 18,84 + y * 18));
    }
  }
  for (int x=0; x < 9; x++) {
    addSlotToContainer(new Slot(inventoryplayer,x,8 + x * 18,142));
  }
  onCraftMatrixChanged(tile);
}",0.8308253533971728
156967,"/** 
 * Moves items out of the hidden input buffer into the craft grid.
 */
private void processHiddenBuffer(){
  for (  IInvSlot slot : InventoryIterator.getIterable(invBuffer,ForgeDirection.UP)) {
    ItemStack stack=slot.getStackInSlot();
    if (stack == null) {
      continue;
    }
    if (!gridHasRoomFor(stack)) {
      Utils.dropItems(worldObj,stack,xCoord,yCoord + 1,zCoord);
      continue;
    }
    stack.stackSize-=transactor.add(stack,ForgeDirection.DOWN,true).stackSize;
    if (stack.stackSize <= 0) {
      slot.setStackInSlot(null);
    }
  }
}","/** 
 * Moves items out of the hidden input buffer into the craft grid.
 */
private void processHiddenBuffer(){
  for (  IInvSlot slot : InventoryIterator.getIterable(invBuffer,ForgeDirection.UP)) {
    ItemStack stack=slot.getStackInSlot();
    if (stack == null) {
      continue;
    }
    if (!gridHasRoomFor(stack)) {
      slot.setStackInSlot(null);
      Utils.dropItems(worldObj,stack,xCoord,yCoord + 1,zCoord);
      continue;
    }
    stack.stackSize-=transactor.add(stack,ForgeDirection.DOWN,true).stackSize;
    if (stack.stackSize <= 0) {
      slot.setStackInSlot(null);
    }
  }
}",0.9715762273901808
156968,"public void onBlockRemoval(){
  if (wireSet[IPipe.WireColor.Red.ordinal()]) {
    Utils.dropItems(worldObj,new ItemStack(BuildCraftTransport.redPipeWire),xCoord,yCoord,zCoord);
  }
  if (wireSet[IPipe.WireColor.Blue.ordinal()]) {
    Utils.dropItems(worldObj,new ItemStack(BuildCraftTransport.bluePipeWire),xCoord,yCoord,zCoord);
  }
  if (wireSet[IPipe.WireColor.Green.ordinal()]) {
    Utils.dropItems(worldObj,new ItemStack(BuildCraftTransport.greenPipeWire),xCoord,yCoord,zCoord);
  }
  if (wireSet[IPipe.WireColor.Yellow.ordinal()]) {
    Utils.dropItems(worldObj,new ItemStack(BuildCraftTransport.yellowPipeWire),xCoord,yCoord,zCoord);
  }
  if (hasGate()) {
    gate.dropGate(worldObj,xCoord,yCoord,zCoord);
  }
  for (  ForgeDirection direction : ForgeDirection.VALID_DIRECTIONS) {
    if (container.hasFacade(direction)) {
      container.dropFacade(direction);
    }
  }
  if (broadcastRedstone) {
    updateNeighbors(false);
  }
}","public void onBlockRemoval(){
  if (wireSet[IPipe.WireColor.Red.ordinal()]) {
    Utils.dropItems(worldObj,new ItemStack(BuildCraftTransport.redPipeWire),xCoord,yCoord,zCoord);
  }
  if (wireSet[IPipe.WireColor.Blue.ordinal()]) {
    Utils.dropItems(worldObj,new ItemStack(BuildCraftTransport.bluePipeWire),xCoord,yCoord,zCoord);
  }
  if (wireSet[IPipe.WireColor.Green.ordinal()]) {
    Utils.dropItems(worldObj,new ItemStack(BuildCraftTransport.greenPipeWire),xCoord,yCoord,zCoord);
  }
  if (wireSet[IPipe.WireColor.Yellow.ordinal()]) {
    Utils.dropItems(worldObj,new ItemStack(BuildCraftTransport.yellowPipeWire),xCoord,yCoord,zCoord);
  }
  if (hasGate()) {
    gate.dropGate(worldObj,xCoord,yCoord,zCoord);
  }
  for (  ForgeDirection direction : ForgeDirection.VALID_DIRECTIONS) {
    if (container.hasFacade(direction)) {
      container.dropFacade(direction);
    }
    if (container.hasPlug(direction)) {
      container.removeAndDropPlug(direction);
    }
  }
  if (broadcastRedstone) {
    updateNeighbors(false);
  }
}",0.9533941236068896
156969,"private void refreshRenderState(){
  if (worldObj.isRemote)   return;
  for (  ForgeDirection o : ForgeDirection.VALID_DIRECTIONS) {
    renderState.pipeConnectionMatrix.setConnected(o,this.pipeConnectionsBuffer[o.ordinal()]);
  }
  for (  ForgeDirection o : ForgeDirection.values()) {
    renderState.textureMatrix.setIconIndex(o,pipe.getIconIndex(o));
  }
  for (  IPipe.WireColor color : IPipe.WireColor.values()) {
    renderState.wireMatrix.setWire(color,pipe.wireSet[color.ordinal()]);
    for (    ForgeDirection direction : ForgeDirection.VALID_DIRECTIONS) {
      renderState.wireMatrix.setWireConnected(color,direction,pipe.isWireConnectedTo(this.getTile(direction),color));
    }
    boolean lit=pipe.signalStrength[color.ordinal()] > 0;
switch (color) {
case Red:
      renderState.wireMatrix.setWireIndex(color,lit ? WireIconProvider.Texture_Red_Lit : WireIconProvider.Texture_Red_Dark);
    break;
case Blue:
  renderState.wireMatrix.setWireIndex(color,lit ? WireIconProvider.Texture_Blue_Lit : WireIconProvider.Texture_Blue_Dark);
break;
case Green:
renderState.wireMatrix.setWireIndex(color,lit ? WireIconProvider.Texture_Green_Lit : WireIconProvider.Texture_Green_Dark);
break;
case Yellow:
renderState.wireMatrix.setWireIndex(color,lit ? WireIconProvider.Texture_Yellow_Lit : WireIconProvider.Texture_Yellow_Dark);
break;
default :
break;
}
}
renderState.setHasGate(pipe.hasGate());
renderState.setGateIconIndex(!pipe.hasGate() ? 0 : pipe.gate.getTextureIconIndex(pipe.isGateActive()));
for (ForgeDirection direction : ForgeDirection.VALID_DIRECTIONS) {
int blockId=this.facadeBlocks[direction.ordinal()];
renderState.facadeMatrix.setFacade(direction,blockId,this.facadeMeta[direction.ordinal()]);
}
if (renderState.isDirty()) {
worldObj.markBlockForUpdate(this.xCoord,this.yCoord,this.zCoord);
renderState.clean();
}
for (ForgeDirection direction : ForgeDirection.VALID_DIRECTIONS) {
renderState.plugMatrix.setConnected(direction,plugs[direction.ordinal()]);
}
}","private void refreshRenderState(){
  if (worldObj.isRemote)   return;
  for (  ForgeDirection o : ForgeDirection.VALID_DIRECTIONS) {
    renderState.pipeConnectionMatrix.setConnected(o,this.pipeConnectionsBuffer[o.ordinal()]);
  }
  for (  ForgeDirection o : ForgeDirection.values()) {
    renderState.textureMatrix.setIconIndex(o,pipe.getIconIndex(o));
  }
  for (  IPipe.WireColor color : IPipe.WireColor.values()) {
    renderState.wireMatrix.setWire(color,pipe.wireSet[color.ordinal()]);
    for (    ForgeDirection direction : ForgeDirection.VALID_DIRECTIONS) {
      renderState.wireMatrix.setWireConnected(color,direction,pipe.isWireConnectedTo(this.getTile(direction),color));
    }
    boolean lit=pipe.signalStrength[color.ordinal()] > 0;
switch (color) {
case Red:
      renderState.wireMatrix.setWireIndex(color,lit ? WireIconProvider.Texture_Red_Lit : WireIconProvider.Texture_Red_Dark);
    break;
case Blue:
  renderState.wireMatrix.setWireIndex(color,lit ? WireIconProvider.Texture_Blue_Lit : WireIconProvider.Texture_Blue_Dark);
break;
case Green:
renderState.wireMatrix.setWireIndex(color,lit ? WireIconProvider.Texture_Green_Lit : WireIconProvider.Texture_Green_Dark);
break;
case Yellow:
renderState.wireMatrix.setWireIndex(color,lit ? WireIconProvider.Texture_Yellow_Lit : WireIconProvider.Texture_Yellow_Dark);
break;
default :
break;
}
}
renderState.setHasGate(pipe.hasGate());
renderState.setGateIconIndex(!pipe.hasGate() ? 0 : pipe.gate.getTextureIconIndex(pipe.isGateActive()));
for (ForgeDirection direction : ForgeDirection.VALID_DIRECTIONS) {
int blockId=this.facadeBlocks[direction.ordinal()];
renderState.facadeMatrix.setFacade(direction,blockId,this.facadeMeta[direction.ordinal()]);
}
for (ForgeDirection direction : ForgeDirection.VALID_DIRECTIONS) {
renderState.plugMatrix.setConnected(direction,plugs[direction.ordinal()]);
}
if (renderState.isDirty()) {
worldObj.markBlockForUpdate(this.xCoord,this.yCoord,this.zCoord);
renderState.clean();
}
}",0.9404341241797072
156970,"private void pipePlugRenderer(RenderBlocks renderblocks,Block block,PipeRenderState state,int x,int y,int z){
  float zFightOffset=1F / 4096F;
  float[][] zeroState=new float[3][2];
  zeroState[0][0]=0.25F - zFightOffset / 2;
  zeroState[0][1]=0.75F + zFightOffset / 2;
  zeroState[1][0]=0.75F;
  zeroState[1][1]=0.875F - zFightOffset;
  zeroState[2][0]=0.25F;
  zeroState[2][1]=0.75F;
  state.currentTexture=BuildCraftTransport.instance.pipeIconProvider.getIcon(PipeIconProvider.PipeStructureCobblestone);
  for (  ForgeDirection direction : ForgeDirection.VALID_DIRECTIONS) {
    if (state.plugMatrix.isConnected(direction)) {
      float[][] rotated=deepClone(zeroState);
      transform(rotated,direction);
      block.setBlockBounds(rotated[0][0],rotated[1][0],rotated[2][0],rotated[0][1],rotated[1][1],rotated[2][1]);
      renderblocks.setRenderBoundsFromBlock(block);
      renderblocks.renderStandardBlock(block,x,y,z);
    }
  }
}","private void pipePlugRenderer(RenderBlocks renderblocks,Block block,PipeRenderState state,int x,int y,int z){
  float zFightOffset=1F / 4096F;
  float[][] zeroState=new float[3][2];
  zeroState[0][0]=0.25F - zFightOffset / 2;
  zeroState[0][1]=0.75F + zFightOffset / 2;
  zeroState[1][0]=0.125F;
  zeroState[1][1]=0.25F;
  zeroState[2][0]=0.25F;
  zeroState[2][1]=0.75F;
  state.currentTexture=BuildCraftTransport.instance.pipeIconProvider.getIcon(PipeIconProvider.PipeStructureCobblestone);
  for (  ForgeDirection direction : ForgeDirection.VALID_DIRECTIONS) {
    if (state.plugMatrix.isConnected(direction)) {
      float[][] rotated=deepClone(zeroState);
      transform(rotated,direction);
      block.setBlockBounds(rotated[0][0],rotated[1][0],rotated[2][0],rotated[0][1],rotated[1][1],rotated[2][1]);
      renderblocks.setRenderBoundsFromBlock(block);
      renderblocks.renderStandardBlock(block,x,y,z);
    }
  }
}",0.9887399463806972
156971,"private boolean shouldRenderNormalPipeSide(PipeRenderState state,ForgeDirection direction){
  return !state.pipeConnectionMatrix.isConnected(direction) && state.facadeMatrix.getFacadeBlockId(direction) == 0;
}","private boolean shouldRenderNormalPipeSide(PipeRenderState state,ForgeDirection direction){
  return !state.pipeConnectionMatrix.isConnected(direction) && state.facadeMatrix.getFacadeBlockId(direction) == 0 && !state.plugMatrix.isConnected(direction);
}",0.9047619047619048
156972,"public void initialize(Pipe pipe){
  if (pipe == null) {
    BuildCraftCore.bcLog.log(Level.WARNING,""String_Node_Str"",new Object[]{xCoord,yCoord,zCoord});
    worldObj.setBlockToAir(xCoord,yCoord,zCoord);
    return;
  }
  this.pipe=pipe;
  tileBuffer=new TileBuffer[6];
  for (  ForgeDirection o : ForgeDirection.VALID_DIRECTIONS) {
    Position pos=new Position(xCoord,yCoord,zCoord,o);
    pos.moveForwards(1.0);
    tileBuffer[o.ordinal()]=new TileBuffer();
    tileBuffer[o.ordinal()].initialize(worldObj,(int)pos.x,(int)pos.y,(int)pos.z);
  }
  for (  ForgeDirection o : ForgeDirection.VALID_DIRECTIONS) {
    TileEntity tile=getTile(o);
    if (tile instanceof ITileBufferHolder) {
      ((ITileBufferHolder)tile).blockCreated(o,BuildCraftTransport.genericPipeBlock.blockID,this);
    }
  }
  bindPipe();
  computeConnections();
  scheduleRenderUpdate();
  pipe.initialize();
  initialized=true;
}","public void initialize(Pipe pipe){
  if (pipe == null) {
    BuildCraftCore.bcLog.log(Level.WARNING,""String_Node_Str"",new Object[]{xCoord,yCoord,zCoord});
    worldObj.setBlockToAir(xCoord,yCoord,zCoord);
    return;
  }
  this.pipe=pipe;
  tileBuffer=new TileBuffer[6];
  for (  ForgeDirection o : ForgeDirection.VALID_DIRECTIONS) {
    Position pos=new Position(xCoord,yCoord,zCoord,o);
    pos.moveForwards(1.0);
    tileBuffer[o.ordinal()]=new TileBuffer();
    tileBuffer[o.ordinal()].initialize(worldObj,(int)pos.x,(int)pos.y,(int)pos.z);
  }
  for (  ForgeDirection o : ForgeDirection.VALID_DIRECTIONS) {
    TileEntity tile=getTile(o);
    if (tile instanceof ITileBufferHolder) {
      ((ITileBufferHolder)tile).blockCreated(o,BuildCraftTransport.genericPipeBlock.blockID,this);
    }
    if (tile instanceof TileGenericPipe) {
      ((TileGenericPipe)tile).scheduleNeighborChange();
    }
  }
  bindPipe();
  computeConnections();
  scheduleRenderUpdate();
  pipe.initialize();
  initialized=true;
}",0.94511238891793
156973,"/** 
 * Checks if this tile is connected to another tile
 * @param with - The other Tile
 * @param side - The orientation to get to the other tile ('with')
 * @return true if pipes are considered connected
 */
protected boolean arePipesConnected(TileEntity with,ForgeDirection side){
  Pipe pipe1=pipe;
  if (!BlockGenericPipe.isValid(pipe1))   return false;
  if (with instanceof TileGenericPipe) {
    Pipe pipe2=((TileGenericPipe)with).pipe;
    if (!BlockGenericPipe.isValid(pipe2))     return false;
    if (!pipe2.canPipeConnect(this,side.getOpposite()))     return false;
  }
  return pipe1 != null ? pipe1.canPipeConnect(with,side) : false;
}","/** 
 * Checks if this tile is connected to another tile
 * @param with - The other Tile
 * @param side - The orientation to get to the other tile ('with')
 * @return true if pipes are considered connected
 */
protected boolean arePipesConnected(TileEntity with,ForgeDirection side){
  Pipe pipe1=pipe;
  if (hasPlug(side))   return false;
  if (!BlockGenericPipe.isValid(pipe1))   return false;
  if (with instanceof TileGenericPipe) {
    if (((TileGenericPipe)with).hasPlug(side.getOpposite()))     return false;
    Pipe pipe2=((TileGenericPipe)with).pipe;
    if (!BlockGenericPipe.isValid(pipe2))     return false;
    if (!pipe2.canPipeConnect(this,side.getOpposite()))     return false;
  }
  return pipe1 != null ? pipe1.canPipeConnect(with,side) : false;
}",0.9180790960451978
156974,"public boolean addPlug(ForgeDirection forgeDirection){
  if (hasPlug(forgeDirection))   return false;
  plugs[forgeDirection.ordinal()]=true;
  worldObj.notifyBlockChange(this.xCoord,this.yCoord,this.zCoord,worldObj.getBlockId(this.xCoord,this.yCoord,this.zCoord));
  scheduleRenderUpdate();
  return true;
}","public boolean addPlug(ForgeDirection forgeDirection){
  if (hasPlug(forgeDirection))   return false;
  plugs[forgeDirection.ordinal()]=true;
  worldObj.notifyBlockChange(this.xCoord,this.yCoord,this.zCoord,worldObj.getBlockId(this.xCoord,this.yCoord,this.zCoord));
  scheduleNeighborChange();
  scheduleRenderUpdate();
  return true;
}",0.9565217391304348
156975,"public void removeAndDropPlug(ForgeDirection forgeDirection){
  if (!hasPlug(forgeDirection))   return;
  plugs[forgeDirection.ordinal()]=false;
  Utils.dropItems(worldObj,new ItemStack(BuildCraftTransport.plugItem),this.xCoord,this.yCoord,this.zCoord);
  worldObj.notifyBlockChange(this.xCoord,this.yCoord,this.zCoord,worldObj.getBlockId(this.xCoord,this.yCoord,this.zCoord));
  scheduleRenderUpdate();
}","public void removeAndDropPlug(ForgeDirection forgeDirection){
  if (!hasPlug(forgeDirection))   return;
  plugs[forgeDirection.ordinal()]=false;
  Utils.dropItems(worldObj,new ItemStack(BuildCraftTransport.plugItem),this.xCoord,this.yCoord,this.zCoord);
  worldObj.notifyBlockChange(this.xCoord,this.yCoord,this.zCoord,worldObj.getBlockId(this.xCoord,this.yCoord,this.zCoord));
  scheduleNeighborChange();
  scheduleRenderUpdate();
}",0.9665871121718376
156976,"public static void doPopulate(World world,Random rand,int x,int z){
  BiomeGenBase biome=world.getBiomeGenForCoords(x + 16,z + 16);
  if (excludedBiomes.contains(biome.biomeID)) {
    return;
  }
  if (surfaceDepositBiomes.contains(biome.biomeID) && rand.nextFloat() > 0.97) {
    int lakeX=rand.nextInt(10) + 2 + x;
    int lakeY=world.getTopSolidOrLiquidBlock(x,z) - 1;
    int lakeZ=rand.nextInt(10) + 2 + z;
    int blockId=world.getBlockId(lakeX,lakeY,lakeZ);
    if (blockId == biome.topBlock) {
      generateSurfaceDeposit(world,rand,lakeX,lakeY,lakeZ,3);
    }
  }
  boolean mediumDeposit=rand.nextDouble() <= (0.15 / 100.0);
  boolean largeDeposit=rand.nextDouble() <= (0.005 / 100.0);
  if (BuildCraftCore.debugMode && x == 0 && z == 0) {
    largeDeposit=true;
  }
  if (mediumDeposit || largeDeposit) {
    int baseX=x, baseZ=z;
    int wellY=20 + rand.nextInt(10);
    int baseY;
    if (largeDeposit && (BuildCraftCore.debugMode || rand.nextDouble() <= 0.25)) {
      baseY=0;
    }
 else {
      baseY=wellY;
    }
    int radius=0;
    if (largeDeposit) {
      radius=8 + rand.nextInt(9);
    }
 else     if (mediumDeposit) {
      radius=4 + rand.nextInt(4);
    }
    int radiusSq=radius * radius;
    for (int poolX=-radius; poolX <= radius; poolX++) {
      for (int poolY=-radius; poolY <= radius; poolY++) {
        for (int poolZ=-radius; poolZ <= radius; poolZ++) {
          int distance=poolX * poolX + poolY * poolY + poolZ * poolZ;
          if (distance <= radiusSq) {
            world.setBlock(poolX + baseX,poolY + wellY,poolZ + baseZ,BuildCraftEnergy.oilStill.blockID);
          }
        }
      }
    }
    boolean started=false;
    for (int y=128; y >= baseY; --y) {
      if (started) {
        int blockId=world.getBlockId(baseX,y,baseZ);
        if (blockId == Block.bedrock.blockID) {
          world.setBlock(baseX,y,baseZ,BuildCraftCore.springBlock.blockID,1,2);
          break;
        }
        world.setBlock(baseX,y,baseZ,BuildCraftEnergy.oilStill.blockID);
      }
 else {
        int blockId=world.getBlockId(baseX,y,baseZ);
        Block block=Block.blocksList[blockId];
        if (blockId != 0 && !block.isLeaves(world,baseX,y,baseZ) && !block.isWood(world,baseX,y,baseZ)) {
          started=true;
          if (largeDeposit) {
            generateSurfaceDeposit(world,rand,baseX,y,baseZ,20 + rand.nextInt(20));
          }
 else           if (mediumDeposit) {
            generateSurfaceDeposit(world,rand,baseX,y,baseZ,5 + rand.nextInt(5));
          }
          int ymax=0;
          if (largeDeposit) {
            ymax=(y + 30 < 128 ? y + 30 : 128);
          }
 else           if (mediumDeposit) {
            ymax=(y + 4 < 128 ? y + 4 : 128);
          }
          for (int h=y + 1; h <= ymax; ++h) {
            world.setBlock(baseX,h,baseZ,BuildCraftEnergy.oilStill.blockID);
          }
        }
      }
    }
  }
}","public static void doPopulate(World world,Random rand,int x,int z){
  BiomeGenBase biome=world.getBiomeGenForCoords(x + 16,z + 16);
  if (excludedBiomes.contains(biome.biomeID)) {
    return;
  }
  if (surfaceDepositBiomes.contains(biome.biomeID) && rand.nextFloat() > 0.97) {
    int lakeX=rand.nextInt(10) + 2 + x;
    int lakeZ=rand.nextInt(10) + 2 + z;
    int lakeY=world.getTopSolidOrLiquidBlock(lakeX,lakeZ) - 1;
    int blockId=world.getBlockId(lakeX,lakeY,lakeZ);
    if (blockId == biome.topBlock) {
      generateSurfaceDeposit(world,rand,lakeX,lakeY,lakeZ,3);
    }
  }
  boolean mediumDeposit=rand.nextDouble() <= (0.15 / 100.0);
  boolean largeDeposit=rand.nextDouble() <= (0.005 / 100.0);
  if (BuildCraftCore.debugMode && x == 0 && z == 0) {
    largeDeposit=true;
  }
  if (mediumDeposit || largeDeposit) {
    int baseX=x, baseZ=z;
    int wellY=20 + rand.nextInt(10);
    int baseY;
    if (largeDeposit && (BuildCraftCore.debugMode || rand.nextDouble() <= 0.25)) {
      baseY=0;
    }
 else {
      baseY=wellY;
    }
    int radius=0;
    if (largeDeposit) {
      radius=8 + rand.nextInt(9);
    }
 else     if (mediumDeposit) {
      radius=4 + rand.nextInt(4);
    }
    int radiusSq=radius * radius;
    for (int poolX=-radius; poolX <= radius; poolX++) {
      for (int poolY=-radius; poolY <= radius; poolY++) {
        for (int poolZ=-radius; poolZ <= radius; poolZ++) {
          int distance=poolX * poolX + poolY * poolY + poolZ * poolZ;
          if (distance <= radiusSq) {
            world.setBlock(poolX + baseX,poolY + wellY,poolZ + baseZ,BuildCraftEnergy.oilStill.blockID);
          }
        }
      }
    }
    boolean started=false;
    for (int y=128; y >= baseY; --y) {
      if (started) {
        int blockId=world.getBlockId(baseX,y,baseZ);
        if (blockId == Block.bedrock.blockID) {
          world.setBlock(baseX,y,baseZ,BuildCraftCore.springBlock.blockID,1,2);
          break;
        }
        world.setBlock(baseX,y,baseZ,BuildCraftEnergy.oilStill.blockID);
      }
 else {
        int blockId=world.getBlockId(baseX,y,baseZ);
        Block block=Block.blocksList[blockId];
        if (blockId != 0 && !block.isLeaves(world,baseX,y,baseZ) && !block.isWood(world,baseX,y,baseZ)) {
          started=true;
          if (largeDeposit) {
            generateSurfaceDeposit(world,rand,baseX,y,baseZ,20 + rand.nextInt(20));
          }
 else           if (mediumDeposit) {
            generateSurfaceDeposit(world,rand,baseX,y,baseZ,5 + rand.nextInt(5));
          }
          int ymax=0;
          if (largeDeposit) {
            ymax=(y + 30 < 128 ? y + 30 : 128);
          }
 else           if (mediumDeposit) {
            ymax=(y + 4 < 128 ? y + 4 : 128);
          }
          for (int h=y + 1; h <= ymax; ++h) {
            world.setBlock(baseX,h,baseZ,BuildCraftEnergy.oilStill.blockID);
          }
        }
      }
    }
  }
}",0.9795635607897472
156977,"public static void doPopulate(World world,Random rand,int x,int z){
  BiomeGenBase biome=world.getBiomeGenForCoords(x + 16,z + 16);
  if (biome.biomeID == BiomeGenBase.sky.biomeID || biome.biomeID == BiomeGenBase.hell.biomeID) {
    return;
  }
  if (surfaceDepositBiomes.contains(biome.biomeID) && rand.nextFloat() > 0.97) {
    int startX=rand.nextInt(10) + 2;
    int startZ=rand.nextInt(10) + 2;
    for (int j=128; j > 65; --j) {
      int i=startX + x;
      int k=startZ + z;
      int blockId=world.getBlockId(i,j,k);
      if (blockId != 0 && blockId == Block.sand.blockID) {
        generateSurfaceDeposit(world,rand,i,j,k,3);
      }
      break;
    }
  }
  boolean mediumDeposit=rand.nextDouble() <= (0.15 / 100.0);
  boolean largeDeposit=rand.nextDouble() <= (0.005 / 100.0);
  if (BuildCraftCore.debugMode && x == 0 && z == 0) {
    largeDeposit=true;
  }
  if (mediumDeposit || largeDeposit) {
    int baseX=x, baseZ=z;
    int wellY=20 + rand.nextInt(10);
    int baseY;
    if (largeDeposit && (BuildCraftCore.debugMode || rand.nextDouble() <= 0.25)) {
      baseY=0;
    }
 else {
      baseY=wellY;
    }
    int radius=0;
    if (largeDeposit) {
      radius=8 + rand.nextInt(9);
    }
 else     if (mediumDeposit) {
      radius=4 + rand.nextInt(4);
    }
    int radiusSq=radius * radius;
    for (int poolX=-radius; poolX <= radius; poolX++) {
      for (int poolY=-radius; poolY <= radius; poolY++) {
        for (int poolZ=-radius; poolZ <= radius; poolZ++) {
          int distance=poolX * poolX + poolY * poolY + poolZ * poolZ;
          if (distance <= radiusSq) {
            world.setBlock(poolX + baseX,poolY + wellY,poolZ + baseZ,BuildCraftEnergy.oilStill.blockID);
          }
        }
      }
    }
    boolean started=false;
    for (int y=128; y >= baseY; --y) {
      if (started) {
        int blockId=world.getBlockId(baseX,y,baseZ);
        if (blockId == Block.bedrock.blockID) {
          world.setBlock(baseX,y,baseZ,BuildCraftCore.springBlock.blockID,1,2);
          break;
        }
        world.setBlock(baseX,y,baseZ,BuildCraftEnergy.oilStill.blockID);
      }
 else {
        int blockId=world.getBlockId(baseX,y,baseZ);
        if (blockId != 0 && blockId != Block.leaves.blockID && blockId != Block.wood.blockID && blockId != Block.grass.blockID) {
          started=true;
          if (largeDeposit) {
            generateSurfaceDeposit(world,rand,baseX,y,baseZ,20 + rand.nextInt(20));
          }
 else           if (mediumDeposit) {
            generateSurfaceDeposit(world,rand,baseX,y,baseZ,5 + rand.nextInt(5));
          }
          int ymax=0;
          if (largeDeposit) {
            ymax=(y + 30 < 128 ? y + 30 : 128);
          }
 else           if (mediumDeposit) {
            ymax=(y + 4 < 128 ? y + 4 : 128);
          }
          for (int h=y + 1; h <= ymax; ++h) {
            world.setBlock(baseX,h,baseZ,BuildCraftEnergy.oilStill.blockID);
          }
        }
      }
    }
  }
}","public static void doPopulate(World world,Random rand,int x,int z){
  BiomeGenBase biome=world.getBiomeGenForCoords(x + 16,z + 16);
  if (biome.biomeID == BiomeGenBase.sky.biomeID || biome.biomeID == BiomeGenBase.hell.biomeID) {
    return;
  }
  if (surfaceDepositBiomes.contains(biome.biomeID) && rand.nextFloat() > 0.97) {
    int startX=rand.nextInt(10) + 2;
    int startZ=rand.nextInt(10) + 2;
    for (int j=128; j > 65; --j) {
      int i=startX + x;
      int k=startZ + z;
      int blockId=world.getBlockId(i,j,k);
      if (blockId != 0) {
        if (blockId == Block.sand.blockID) {
          generateSurfaceDeposit(world,rand,i,j,k,3);
        }
        break;
      }
    }
  }
  boolean mediumDeposit=rand.nextDouble() <= (0.15 / 100.0);
  boolean largeDeposit=rand.nextDouble() <= (0.005 / 100.0);
  if (BuildCraftCore.debugMode && x == 0 && z == 0) {
    largeDeposit=true;
  }
  if (mediumDeposit || largeDeposit) {
    int baseX=x, baseZ=z;
    int wellY=20 + rand.nextInt(10);
    int baseY;
    if (largeDeposit && (BuildCraftCore.debugMode || rand.nextDouble() <= 0.25)) {
      baseY=0;
    }
 else {
      baseY=wellY;
    }
    int radius=0;
    if (largeDeposit) {
      radius=8 + rand.nextInt(9);
    }
 else     if (mediumDeposit) {
      radius=4 + rand.nextInt(4);
    }
    int radiusSq=radius * radius;
    for (int poolX=-radius; poolX <= radius; poolX++) {
      for (int poolY=-radius; poolY <= radius; poolY++) {
        for (int poolZ=-radius; poolZ <= radius; poolZ++) {
          int distance=poolX * poolX + poolY * poolY + poolZ * poolZ;
          if (distance <= radiusSq) {
            world.setBlock(poolX + baseX,poolY + wellY,poolZ + baseZ,BuildCraftEnergy.oilStill.blockID);
          }
        }
      }
    }
    boolean started=false;
    for (int y=128; y >= baseY; --y) {
      if (started) {
        int blockId=world.getBlockId(baseX,y,baseZ);
        if (blockId == Block.bedrock.blockID) {
          world.setBlock(baseX,y,baseZ,BuildCraftCore.springBlock.blockID,1,2);
          break;
        }
        world.setBlock(baseX,y,baseZ,BuildCraftEnergy.oilStill.blockID);
      }
 else {
        int blockId=world.getBlockId(baseX,y,baseZ);
        if (blockId != 0 && blockId != Block.leaves.blockID && blockId != Block.wood.blockID && blockId != Block.grass.blockID) {
          started=true;
          if (largeDeposit) {
            generateSurfaceDeposit(world,rand,baseX,y,baseZ,20 + rand.nextInt(20));
          }
 else           if (mediumDeposit) {
            generateSurfaceDeposit(world,rand,baseX,y,baseZ,5 + rand.nextInt(5));
          }
          int ymax=0;
          if (largeDeposit) {
            ymax=(y + 30 < 128 ? y + 30 : 128);
          }
 else           if (mediumDeposit) {
            ymax=(y + 4 < 128 ? y + 4 : 128);
          }
          for (int h=y + 1; h <= ymax; ++h) {
            world.setBlock(baseX,h,baseZ,BuildCraftEnergy.oilStill.blockID);
          }
        }
      }
    }
  }
}",0.992248062015504
156978,"public void readFromNBT(NBTTagCompound nbttagcompound){
  isActive=nbttagcompound.getBoolean(""String_Node_Str"");
  progressPart=nbttagcompound.getShort(""String_Node_Str"");
  progress=nbttagcompound.getFloat(""String_Node_Str"");
}","public void readFromNBT(NBTTagCompound nbttagcompound){
  isActive=nbttagcompound.getBoolean(""String_Node_Str"");
  singlePulse=nbttagcompound.getBoolean(""String_Node_Str"");
}",0.8009950248756219
156979,"public void enablePulse(){
  isActive=true;
}","public void enablePulse(int count){
  isActive=true;
  singlePulse=false;
  pulseCount=count;
}",0.6428571428571429
156980,"public void disablePulse(){
  isActive=false;
}","public void disablePulse(){
  if (!isActive) {
    hasPulsed=false;
  }
  isActive=false;
  pulseCount=0;
}",0.6103896103896104
156981,"public void update(){
  if (powerReceptor == null)   return;
  if (progressPart != 0) {
    progress+=getPulseSpeed();
    if (progress > 0.5 && progressPart == 1) {
      progressPart=2;
      powerReceptor.getPowerProvider().receiveEnergy(1,ForgeDirection.WEST);
    }
 else     if (progress >= 1) {
      progress=0;
      progressPart=0;
    }
  }
 else   if (isActive) {
    progressPart=1;
  }
}","public void update(){
  if (powerReceptor == null)   return;
  if (isActive) {
    tick++;
    if (!singlePulse || !hasPulsed) {
      if (tick % 10 == 0 || !hasPulsed) {
        powerReceptor.getPowerProvider().receiveEnergy(Math.min(1 << (pulseCount - 1),64),ForgeDirection.WEST);
        if (singlePulse) {
          hasPulsed=true;
        }
      }
    }
  }
}",0.2845953002610966
156982,"public void writeToNBT(NBTTagCompound nbttagcompound){
  nbttagcompound.setBoolean(""String_Node_Str"",isActive);
  nbttagcompound.setShort(""String_Node_Str"",(short)progressPart);
  nbttagcompound.setFloat(""String_Node_Str"",progress);
}","public void writeToNBT(NBTTagCompound nbttagcompound){
  nbttagcompound.setBoolean(""String_Node_Str"",singlePulse);
  nbttagcompound.setBoolean(""String_Node_Str"",isActive);
}",0.7567567567567568
156983,public abstract boolean resolveAction(IAction action);,"public abstract boolean resolveAction(IAction action,int count);",0.9152542372881356
156984,"@Override public void addActions(LinkedList<IAction> list){
  if (pipe.wireSet[IPipe.WireColor.Red.ordinal()] && kind.ordinal() >= Gate.GateKind.AND_2.ordinal()) {
    list.add(BuildCraftTransport.actionRedSignal);
  }
  if (pipe.wireSet[IPipe.WireColor.Blue.ordinal()] && kind.ordinal() >= Gate.GateKind.AND_3.ordinal()) {
    list.add(BuildCraftTransport.actionBlueSignal);
  }
  if (pipe.wireSet[IPipe.WireColor.Green.ordinal()] && kind.ordinal() >= Gate.GateKind.AND_4.ordinal()) {
    list.add(BuildCraftTransport.actionGreenSignal);
  }
  if (pipe.wireSet[IPipe.WireColor.Yellow.ordinal()] && kind.ordinal() >= Gate.GateKind.AND_4.ordinal()) {
    list.add(BuildCraftTransport.actionYellowSignal);
  }
  if (hasPulser()) {
    list.add(BuildCraftTransport.actionEnergyPulser);
  }
}","@Override public void addActions(LinkedList<IAction> list){
  if (pipe.wireSet[IPipe.WireColor.Red.ordinal()] && kind.ordinal() >= Gate.GateKind.AND_2.ordinal()) {
    list.add(BuildCraftTransport.actionRedSignal);
  }
  if (pipe.wireSet[IPipe.WireColor.Blue.ordinal()] && kind.ordinal() >= Gate.GateKind.AND_3.ordinal()) {
    list.add(BuildCraftTransport.actionBlueSignal);
  }
  if (pipe.wireSet[IPipe.WireColor.Green.ordinal()] && kind.ordinal() >= Gate.GateKind.AND_4.ordinal()) {
    list.add(BuildCraftTransport.actionGreenSignal);
  }
  if (pipe.wireSet[IPipe.WireColor.Yellow.ordinal()] && kind.ordinal() >= Gate.GateKind.AND_4.ordinal()) {
    list.add(BuildCraftTransport.actionYellowSignal);
  }
  if (hasPulser()) {
    list.add(BuildCraftTransport.actionEnergyPulser);
    list.add(BuildCraftTransport.actionSingleEnergyPulse);
  }
}",0.963914373088685
156985,"@Override public boolean resolveAction(IAction action){
  if (action instanceof ActionEnergyPulser) {
    pulser.enablePulse();
    return true;
  }
  return false;
}","@Override public boolean resolveAction(IAction action,int count){
  if (action instanceof ActionEnergyPulser) {
    pulser.enablePulse(count);
    return true;
  }
 else   if (action instanceof ActionSingleEnergyPulse) {
    pulser.enableSinglePulse(count);
    return true;
  }
  return false;
}",0.6536796536796536
156986,"private void resolveActions(){
  if (!hasGate())   return;
  boolean oldBroadcastRedstone=broadcastRedstone;
  boolean[] oldBroadcastSignal=broadcastSignal;
  broadcastRedstone=false;
  broadcastSignal=new boolean[]{false,false,false,false};
  gate.startResolution();
  HashMap<Integer,Boolean> actions=new HashMap<Integer,Boolean>();
  for (int it=0; it < 8; ++it) {
    ITrigger trigger=activatedTriggers[it];
    IAction action=activatedActions[it];
    ITriggerParameter parameter=triggerParameters[it];
    if (trigger != null && action != null)     if (!actions.containsKey(action.getId())) {
      actions.put(action.getId(),isNearbyTriggerActive(trigger,parameter));
    }
 else     if (gate.getConditional() == GateConditional.AND) {
      actions.put(action.getId(),actions.get(action.getId()) && isNearbyTriggerActive(trigger,parameter));
    }
 else {
      actions.put(action.getId(),actions.get(action.getId()) || isNearbyTriggerActive(trigger,parameter));
    }
  }
  for (  Integer i : actions.keySet())   if (actions.get(i)) {
    if (gate.resolveAction(ActionManager.actions[i])) {
      continue;
    }
    if (ActionManager.actions[i] instanceof ActionRedstoneOutput) {
      broadcastRedstone=true;
    }
 else     if (ActionManager.actions[i] instanceof ActionSignalOutput) {
      broadcastSignal[((ActionSignalOutput)ActionManager.actions[i]).color.ordinal()]=true;
    }
 else {
      for (int a=0; a < container.tileBuffer.length; ++a)       if (container.tileBuffer[a].getTile() instanceof IActionReceptor) {
        IActionReceptor recept=(IActionReceptor)container.tileBuffer[a].getTile();
        recept.actionActivated(ActionManager.actions[i]);
      }
    }
  }
  actionsActivated(actions);
  if (oldBroadcastRedstone != broadcastRedstone) {
    container.scheduleRenderUpdate();
    updateNeighbors(true);
  }
  for (int i=0; i < oldBroadcastSignal.length; ++i)   if (oldBroadcastSignal[i] != broadcastSignal[i]) {
    container.scheduleRenderUpdate();
    updateSignalState();
    break;
  }
}","private void resolveActions(){
  if (!hasGate())   return;
  boolean oldBroadcastRedstone=broadcastRedstone;
  boolean[] oldBroadcastSignal=broadcastSignal;
  broadcastRedstone=false;
  broadcastSignal=new boolean[]{false,false,false,false};
  gate.startResolution();
  HashMap<Integer,Boolean> actions=new HashMap<Integer,Boolean>();
  Multiset<Integer> actionCount=HashMultiset.create();
  for (int it=0; it < 8; ++it) {
    ITrigger trigger=activatedTriggers[it];
    IAction action=activatedActions[it];
    ITriggerParameter parameter=triggerParameters[it];
    if (trigger != null && action != null) {
      actionCount.add(action.getId());
      if (!actions.containsKey(action.getId())) {
        actions.put(action.getId(),isNearbyTriggerActive(trigger,parameter));
      }
 else       if (gate.getConditional() == GateConditional.AND) {
        actions.put(action.getId(),actions.get(action.getId()) && isNearbyTriggerActive(trigger,parameter));
      }
 else {
        actions.put(action.getId(),actions.get(action.getId()) || isNearbyTriggerActive(trigger,parameter));
      }
    }
  }
  for (  Integer i : actions.keySet())   if (actions.get(i)) {
    if (gate.resolveAction(ActionManager.actions[i],actionCount.count(i))) {
      continue;
    }
    if (ActionManager.actions[i] instanceof ActionRedstoneOutput) {
      broadcastRedstone=true;
    }
 else     if (ActionManager.actions[i] instanceof ActionSignalOutput) {
      broadcastSignal[((ActionSignalOutput)ActionManager.actions[i]).color.ordinal()]=true;
    }
 else {
      for (int a=0; a < container.tileBuffer.length; ++a)       if (container.tileBuffer[a].getTile() instanceof IActionReceptor) {
        IActionReceptor recept=(IActionReceptor)container.tileBuffer[a].getTile();
        recept.actionActivated(ActionManager.actions[i]);
      }
    }
  }
  actionsActivated(actions);
  if (oldBroadcastRedstone != broadcastRedstone) {
    container.scheduleRenderUpdate();
    updateNeighbors(true);
  }
  for (int i=0; i < oldBroadcastSignal.length; ++i)   if (oldBroadcastSignal[i] != broadcastSignal[i]) {
    container.scheduleRenderUpdate();
    updateSignalState();
    break;
  }
}",0.966865315852205
156987,"/** 
 * Should return the index in the array returned by GetTextureIcons() for a specified direction
 * @param direction - The direction for which the indexed should be rendered. Unknown for pipe center
 * @return An index valid in the array returned by getTextureIcons() 
 */
public abstract int getIconIndex(ForgeDirection direction);","/** 
 * Should return the index in the array returned by GetTextureIcons() for a specified direction
 * @param direction - The direction for which the indexed should be rendered. Unknown for pipe center
 * @return An index valid in the array returned by getTextureIcons()
 */
public abstract int getIconIndex(ForgeDirection direction);",0.9985096870342772
156988,"public BptSlot internalGetNextBlock(World world,IBuilderInventory inv,LinkedList<BptSlot> list){
  BptSlot result=null;
  while (list.size() > 0) {
    BptSlot slot=list.getFirst();
    if (BuildCraftAPI.softBlock(slot.blockId) == BuildCraftAPI.softBlock(world.getBlockId(slot.x,slot.y,slot.z))) {
      list.removeFirst();
    }
 else     if (slot.mode == Mode.ClearIfInvalid) {
      result=slot;
      list.removeFirst();
      break;
    }
 else {
      int size=inv.getSizeInventory();
      for (int i=0; i < size; ++i) {
        if (!inv.isBuildingMaterial(i)) {
          continue;
        }
        ItemStack stack=inv.decrStackSize(i,1);
        if (stack != null && stack.stackSize > 0) {
          result=slot.clone();
          result.stackToUse=stack;
          list.removeFirst();
          break;
        }
      }
      break;
    }
  }
  return result;
}","public BptSlot internalGetNextBlock(World world,IBuilderInventory inv,LinkedList<BptSlot> list){
  BptSlot result=null;
  while (list.size() > 0) {
    BptSlot slot=list.getFirst();
    if (slot.blockId == world.getBlockId(slot.x,slot.y,slot.z)) {
      list.removeFirst();
    }
 else     if (slot.mode == Mode.ClearIfInvalid) {
      result=slot;
      list.removeFirst();
      break;
    }
 else {
      int size=inv.getSizeInventory();
      for (int i=0; i < size; ++i) {
        if (!inv.isBuildingMaterial(i)) {
          continue;
        }
        ItemStack stack=inv.decrStackSize(i,1);
        if (stack != null && stack.stackSize > 0) {
          result=slot.clone();
          result.stackToUse=stack;
          list.removeFirst();
          break;
        }
      }
      break;
    }
  }
  return result;
}",0.9527744982290436
156989,"private void updateCraftingResults(){
  if (this.currentRecipe == null || !this.currentRecipe.matches(internalInventoryCrafting,worldObj))   currentRecipe=CraftingHelper.findMatchingRecipe(internalInventoryCrafting,worldObj);
  ItemStack resultStack=null;
  if (currentRecipe != null) {
    resultStack=currentRecipe.getCraftingResult(internalInventoryCrafting);
  }
  craftResult.setInventorySlotContents(0,resultStack);
  onInventoryChanged();
}","private void updateCraftingResults(){
  if (internalInventoryCrafting == null) {
    return;
  }
  internalInventoryCrafting.recipeUpdate(true);
  if (this.currentRecipe == null || !this.currentRecipe.matches(internalInventoryCrafting,worldObj))   currentRecipe=CraftingHelper.findMatchingRecipe(internalInventoryCrafting,worldObj);
  ItemStack resultStack=null;
  if (currentRecipe != null) {
    resultStack=currentRecipe.getCraftingResult(internalInventoryCrafting);
  }
  craftResult.setInventorySlotContents(0,resultStack);
  internalInventoryCrafting.recipeUpdate(false);
  onInventoryChanged();
}",0.8514285714285714
156990,"@Override public void updateEntity(){
  if (internalPlayer == null) {
    internalInventoryCrafting=new InternalInventoryCrafting();
    internalPlayer=new InternalPlayer();
    craftSlot=new SlotCrafting(internalPlayer,internalInventoryCrafting,craftResult,0,0,0);
    updateCraftingResults();
  }
  if (!CoreProxy.proxy.isSimulating(worldObj))   return;
  tick++;
  tick=tick % recentEnergy.length;
  recentEnergy[tick]=0.0f;
  while (storedEnergy >= getRequiredEnergy() && craftResult.getStackInSlot(0) != null) {
    ItemStack[] tempStorage=Arrays.copyOf(storageSlots,storageSlots.length);
    internalInventoryCrafting.tempStacks=tempStorage;
    internalInventoryCrafting.hitCount=new int[27];
    for (int j=0; j < craftingSlots.getSizeInventory(); j++) {
      if (craftingSlots.getStackInSlot(j) == null) {
        internalInventoryCrafting.bindings[j]=-1;
        continue;
      }
      boolean matchedStorage=false;
      for (int i=0; i < tempStorage.length; i++) {
        if (tempStorage[i] != null && craftingSlots.getStackInSlot(j).isItemEqual(tempStorage[i]) && internalInventoryCrafting.hitCount[i] < tempStorage[i].stackSize && internalInventoryCrafting.hitCount[i] < tempStorage[i].getMaxStackSize()) {
          internalInventoryCrafting.bindings[j]=i;
          internalInventoryCrafting.hitCount[i]++;
          matchedStorage=true;
          break;
        }
      }
      if (!matchedStorage) {
        craftable=false;
        internalInventoryCrafting.tempStacks=null;
        internalInventoryCrafting.hitCount=null;
        return;
      }
    }
    craftSlot.onPickupFromSlot(internalPlayer,craftResult.getStackInSlot(0));
    for (int i=0; i < tempStorage.length; i++) {
      if (tempStorage[i] != null && tempStorage[i].stackSize <= 0) {
        tempStorage[i]=null;
      }
    }
    storageSlots=tempStorage;
    storedEnergy-=getRequiredEnergy();
    List<ItemStack> outputs=Lists.newArrayList(craftResult.getStackInSlot(0).copy());
    for (int i=0; i < internalPlayer.inventory.mainInventory.length; i++) {
      if (internalPlayer.inventory.mainInventory[i] != null) {
        outputs.add(internalPlayer.inventory.mainInventory[i]);
        internalPlayer.inventory.mainInventory[i]=null;
      }
    }
    for (    ItemStack output : outputs) {
      boolean putToPipe=Utils.addToRandomPipeEntry(this,ForgeDirection.UP,output);
      if (!putToPipe) {
        for (int i=0; i < storageSlots.length; i++) {
          if (output.stackSize <= 0) {
            break;
          }
          if (storageSlots[i] != null && output.isStackable() && output.isItemEqual(storageSlots[i])) {
            storageSlots[i].stackSize+=output.stackSize;
            if (storageSlots[i].stackSize > output.getMaxStackSize()) {
              output.stackSize=storageSlots[i].stackSize - output.getMaxStackSize();
              storageSlots[i].stackSize=output.getMaxStackSize();
            }
 else {
              output.stackSize=0;
            }
          }
 else           if (storageSlots[i] == null) {
            storageSlots[i]=output.copy();
            output.stackSize=0;
          }
        }
        if (output.stackSize > 0) {
          output=Utils.addToRandomInventory(output,worldObj,xCoord,yCoord,zCoord,ForgeDirection.UNKNOWN);
        }
        if (output.stackSize > 0) {
          Utils.dropItems(worldObj,output,xCoord,yCoord,zCoord);
        }
      }
    }
  }
}","@Override public void updateEntity(){
  if (internalPlayer == null) {
    internalInventoryCrafting=new InternalInventoryCrafting();
    internalPlayer=new InternalPlayer();
    craftSlot=new SlotCrafting(internalPlayer,internalInventoryCrafting,craftResult,0,0,0);
    updateCraftingResults();
  }
  if (!CoreProxy.proxy.isSimulating(worldObj))   return;
  updateCraftingResults();
  tick++;
  tick=tick % recentEnergy.length;
  recentEnergy[tick]=0.0f;
  while (storedEnergy >= getRequiredEnergy() && craftResult.getStackInSlot(0) != null) {
    ItemStack[] tempStorage=Arrays.copyOf(storageSlots,storageSlots.length);
    internalInventoryCrafting.tempStacks=tempStorage;
    internalInventoryCrafting.hitCount=new int[27];
    for (int j=0; j < craftingSlots.getSizeInventory(); j++) {
      if (craftingSlots.getStackInSlot(j) == null) {
        internalInventoryCrafting.bindings[j]=-1;
        continue;
      }
      boolean matchedStorage=false;
      for (int i=0; i < tempStorage.length; i++) {
        if (tempStorage[i] != null && craftingSlots.getStackInSlot(j).isItemEqual(tempStorage[i]) && internalInventoryCrafting.hitCount[i] < tempStorage[i].stackSize && internalInventoryCrafting.hitCount[i] < tempStorage[i].getMaxStackSize()) {
          internalInventoryCrafting.bindings[j]=i;
          internalInventoryCrafting.hitCount[i]++;
          matchedStorage=true;
          break;
        }
      }
      if (!matchedStorage) {
        craftable=false;
        internalInventoryCrafting.tempStacks=null;
        internalInventoryCrafting.hitCount=null;
        return;
      }
    }
    craftSlot.onPickupFromSlot(internalPlayer,craftResult.getStackInSlot(0));
    for (int i=0; i < tempStorage.length; i++) {
      if (tempStorage[i] != null && tempStorage[i].stackSize <= 0) {
        tempStorage[i]=null;
      }
    }
    storageSlots=tempStorage;
    storedEnergy-=getRequiredEnergy();
    List<ItemStack> outputs=Lists.newArrayList(craftResult.getStackInSlot(0).copy());
    for (int i=0; i < internalPlayer.inventory.mainInventory.length; i++) {
      if (internalPlayer.inventory.mainInventory[i] != null) {
        outputs.add(internalPlayer.inventory.mainInventory[i]);
        internalPlayer.inventory.mainInventory[i]=null;
      }
    }
    for (    ItemStack output : outputs) {
      boolean putToPipe=Utils.addToRandomPipeEntry(this,ForgeDirection.UP,output);
      if (!putToPipe) {
        for (int i=0; i < storageSlots.length; i++) {
          if (output.stackSize <= 0) {
            break;
          }
          if (storageSlots[i] != null && output.isStackable() && output.isItemEqual(storageSlots[i])) {
            storageSlots[i].stackSize+=output.stackSize;
            if (storageSlots[i].stackSize > output.getMaxStackSize()) {
              output.stackSize=storageSlots[i].stackSize - output.getMaxStackSize();
              storageSlots[i].stackSize=output.getMaxStackSize();
            }
 else {
              output.stackSize=0;
            }
          }
 else           if (storageSlots[i] == null) {
            storageSlots[i]=output.copy();
            output.stackSize=0;
          }
        }
        if (output.stackSize > 0) {
          output=Utils.addToRandomInventory(output,worldObj,xCoord,yCoord,zCoord,ForgeDirection.UNKNOWN);
        }
        if (output.stackSize > 0) {
          Utils.dropItems(worldObj,output,xCoord,yCoord,zCoord);
        }
      }
    }
  }
}",0.996055514974434
156991,"@Override public ILiquidTank getTank(ForgeDirection direction,LiquidStack type){
  return null;
}","@Override public ILiquidTank getTank(ForgeDirection direction,LiquidStack type){
  ForgeDirection dir=ForgeDirection.values()[worldObj.getBlockMetadata(xCoord,yCoord,zCoord)];
switch (direction) {
case NORTH:
switch (dir) {
case WEST:
      return ingredient2;
case EAST:
    return ingredient1;
default :
  return null;
}
case SOUTH:
switch (dir) {
case WEST:
return ingredient1;
case EAST:
return ingredient2;
default :
return null;
}
case EAST:
switch (dir) {
case NORTH:
return ingredient2;
case SOUTH:
return ingredient1;
default :
return null;
}
case WEST:
switch (dir) {
case NORTH:
return ingredient1;
case SOUTH:
return ingredient2;
default :
return null;
}
case DOWN:
return result;
default :
return null;
}
}",0.2377450980392156
156992,"@Override public ILiquidTank getTank(ForgeDirection direction,LiquidStack type){
  return null;
}","@Override public ILiquidTank getTank(ForgeDirection direction,LiquidStack type){
  return tank;
}",0.9690721649484536
156993,"public ItemStack addToInventory(ItemStack stackToMove){
  for (int i=0; i < _inventory.getSizeInventory(); i++) {
    ItemStack stack=_inventory.getStackInSlot(i);
    if (stack == null) {
      _inventory.setInventorySlotContents(i,stackToMove);
      return null;
    }
    if (stackToMove.itemID == stack.itemID && (stackToMove.getItem().isDamageable() || stackToMove.getItemDamage() == stack.getItemDamage())) {
      if (stackToMove.stackSize + stack.stackSize <= stack.getMaxStackSize()) {
        stack.stackSize+=stackToMove.stackSize;
        return null;
      }
      int itemsToMove=stack.getMaxStackSize() - stack.stackSize;
      stack.stackSize+=itemsToMove;
      stackToMove.stackSize-=itemsToMove;
    }
  }
  return stackToMove;
}","public ItemStack addToInventory(ItemStack stackToMove){
  for (int i=0; i < _inventory.getSizeInventory(); i++) {
    ItemStack stack=_inventory.getStackInSlot(i);
    if (stack == null) {
      _inventory.setInventorySlotContents(i,stackToMove);
      return null;
    }
    if (stackToMove.itemID == stack.itemID && (stackToMove.getItem().isDamageable() || stackToMove.getItemDamage() == stack.getItemDamage()) && ItemStack.areItemStackTagsEqual(stack,stackToMove)) {
      if (stackToMove.stackSize + stack.stackSize <= stack.getMaxStackSize()) {
        stack.stackSize+=stackToMove.stackSize;
        return null;
      }
      int itemsToMove=stack.getMaxStackSize() - stack.stackSize;
      stack.stackSize+=itemsToMove;
      stackToMove.stackSize-=itemsToMove;
    }
  }
  return stackToMove;
}",0.9652061855670104
156994,"@Override public void updateEntity(){
  super.updateEntity();
  if (CoreProxy.proxy.isRenderWorld(worldObj) || worldObj.getWorldTime() % 5 != 0)   return;
  TileEntity tile=this.worldObj.getBlockTileEntity(xCoord,yCoord - 1,zCoord);
  if (tile == null)   return;
  ISpecialInventory special=null;
  InventoryUtil externalInventory=null;
  if (tile instanceof ISpecialInventory) {
    special=(ISpecialInventory)tile;
  }
 else   if (tile instanceof ISidedInventory) {
    externalInventory=new InventoryUtil(new SidedInventoryAdapter((ISidedInventory)tile,ForgeDirection.UP));
  }
 else   if (tile instanceof IInventory) {
    externalInventory=new InventoryUtil((IInventory)tile);
  }
  for (int internalSlot=0; internalSlot < _inventory.getSizeInventory(); internalSlot++) {
    ItemStack stackInSlot=_inventory.getStackInSlot(internalSlot);
    if (stackInSlot == null)     continue;
    if (special != null) {
      ItemStack clonedStack=stackInSlot.copy().splitStack(1);
      if (special.addItem(clonedStack,true,ForgeDirection.UP) > 0) {
        _inventory.decrStackSize(internalSlot,1);
        return;
      }
      continue;
    }
    if (externalInventory != null && externalInventory.hasRoomForItem(stackInSlot)) {
      ItemStack stackToMove=_inventory.decrStackSize(internalSlot,1);
      externalInventory.addToInventory(stackToMove);
      return;
    }
  }
}","@Override public void updateEntity(){
  super.updateEntity();
  if (CoreProxy.proxy.isRenderWorld(worldObj) || worldObj.getWorldTime() % 5 != 0)   return;
  TileEntity tile=this.worldObj.getBlockTileEntity(xCoord,yCoord - 1,zCoord);
  if (tile == null)   return;
  ITransactor transactor=Transactor.getTransactorFor(tile);
  if (transactor == null)   return;
  for (int internalSlot=0; internalSlot < _inventory.getSizeInventory(); internalSlot++) {
    ItemStack stackInSlot=_inventory.getStackInSlot(internalSlot);
    if (stackInSlot == null)     continue;
    ItemStack clonedStack=stackInSlot.copy().splitStack(1);
    if (transactor.addItem(clonedStack,ForgeDirection.UP,true).stackSize <= 0) {
      _inventory.decrStackSize(internalSlot,1);
      return;
    }
  }
}",0.3378315495579339
156995,"@Override public ItemStack decrStackSize(int i,int j){
  if (itemInInventory != null) {
    ItemStack newStack=itemInInventory.splitStack(j);
    if (itemInInventory.stackSize == 0) {
      itemInInventory=null;
    }
    return newStack;
  }
 else {
    return null;
  }
}","@Override public ItemStack decrStackSize(int slot,int amount){
  if (itemInInventory != null) {
    if (itemInInventory.stackSize <= 0) {
      itemInInventory=null;
      return null;
    }
    ItemStack newStack=itemInInventory;
    if (amount >= newStack.stackSize) {
      itemInInventory=null;
    }
 else {
      newStack=itemInInventory.splitStack(amount);
    }
    return newStack;
  }
  return null;
}",0.4766081871345029
156996,"@Override public void update(){
  super.update();
  if (itemInInventory != null) {
    LiquidStack liquid=null;
    if (Block.ice.blockID == itemInInventory.itemID && heat > COOLANT_THRESHOLD) {
      liquid=LiquidContainerRegistry.getLiquidForFilledItem(new ItemStack(Item.bucketWater));
    }
 else {
      liquid=LiquidContainerRegistry.getLiquidForFilledItem(itemInInventory);
    }
    if (liquid != null) {
      if (fill(ForgeDirection.UNKNOWN,liquid,false) == liquid.amount) {
        fill(ForgeDirection.UNKNOWN,liquid,true);
        tile.setInventorySlotContents(0,Utils.consumeItem(itemInInventory));
      }
    }
  }
  if (heat > COOLANT_THRESHOLD) {
    int extraHeat=heat - COOLANT_THRESHOLD;
    LiquidStack coolant=this.coolantTank.getLiquid();
    IronEngineCoolant currentCoolant=IronEngineCoolant.getCoolantForLiquid(coolant);
    if (currentCoolant != null) {
      if (coolant.amount * currentCoolant.coolingPerUnit > extraHeat) {
        coolant.amount-=Math.round(extraHeat / currentCoolant.coolingPerUnit);
        heat=COOLANT_THRESHOLD;
      }
 else {
        heat-=coolant.amount * currentCoolant.coolingPerUnit;
        coolant.amount=0;
      }
    }
  }
  if (heat > 0 && (penaltyCooling > 0 || !tile.isRedstonePowered)) {
    heat-=10;
  }
  if (heat <= 0)   heat=0;
  if (heat == 0 && penaltyCooling > 0) {
    penaltyCooling--;
  }
}","@Override public void update(){
  super.update();
  if (itemInInventory != null) {
    LiquidStack liquid;
    if (Block.ice.blockID == itemInInventory.itemID && heat > COOLANT_THRESHOLD) {
      liquid=LiquidContainerRegistry.getLiquidForFilledItem(new ItemStack(Item.bucketWater));
    }
 else {
      liquid=LiquidContainerRegistry.getLiquidForFilledItem(itemInInventory);
    }
    if (liquid != null) {
      if (fill(ForgeDirection.UNKNOWN,liquid,false) == liquid.amount) {
        fill(ForgeDirection.UNKNOWN,liquid,true);
        tile.setInventorySlotContents(0,Utils.consumeItem(itemInInventory));
      }
    }
  }
  if (heat > COOLANT_THRESHOLD) {
    int extraHeat=heat - COOLANT_THRESHOLD;
    LiquidStack coolant=this.coolantTank.getLiquid();
    IronEngineCoolant currentCoolant=IronEngineCoolant.getCoolantForLiquid(coolant);
    if (currentCoolant != null) {
      if (coolant.amount * currentCoolant.coolingPerUnit > extraHeat) {
        coolant.amount-=Math.round(extraHeat / currentCoolant.coolingPerUnit);
        heat=COOLANT_THRESHOLD;
      }
 else {
        heat-=coolant.amount * currentCoolant.coolingPerUnit;
        coolant.amount=0;
      }
    }
  }
  if (heat > 0 && (penaltyCooling > 0 || !tile.isRedstonePowered)) {
    heat-=10;
  }
  if (heat <= 0) {
    heat=0;
  }
  if (heat == 0 && penaltyCooling > 0) {
    penaltyCooling--;
  }
}",0.995253742241694
156997,"@Override public ItemStack decrStackSize(int i,int j){
  if (itemInInventory != null) {
    ItemStack newStack=itemInInventory.splitStack(j);
    if (itemInInventory.stackSize == 0) {
      itemInInventory=null;
    }
    return newStack;
  }
 else {
    return null;
  }
}","@Override public ItemStack decrStackSize(int slot,int amount){
  if (itemInInventory != null) {
    if (itemInInventory.stackSize <= 0) {
      itemInInventory=null;
      return null;
    }
    ItemStack newStack=itemInInventory;
    if (amount >= newStack.stackSize) {
      itemInInventory=null;
    }
 else {
      newStack=itemInInventory.splitStack(amount);
    }
    return newStack;
  }
  return null;
}",0.4766081871345029
156998,"@Override public void update(){
  super.update();
  if (itemInInventory != null) {
    LiquidStack liquid;
    if (Block.ice.blockID == itemInInventory.itemID && heat > COOLANT_THRESHOLD) {
      liquid=LiquidContainerRegistry.getLiquidForFilledItem(new ItemStack(Item.bucketWater));
    }
 else {
      liquid=LiquidContainerRegistry.getLiquidForFilledItem(itemInInventory);
    }
    if (liquid != null) {
      if (fill(ForgeDirection.UNKNOWN,liquid,false) == liquid.amount) {
        fill(ForgeDirection.UNKNOWN,liquid,true);
        tile.setInventorySlotContents(0,Utils.consumeItem(itemInInventory));
      }
    }
  }
  if (heat > COOLANT_THRESHOLD) {
    int extraHeat=heat - COOLANT_THRESHOLD;
    LiquidStack coolant=this.coolantTank.getLiquid();
    IronEngineCoolant currentCoolant=IronEngineCoolant.getCoolantForLiquid(coolant);
    if (currentCoolant != null) {
      if (coolant.amount * currentCoolant.coolingPerUnit > extraHeat) {
        coolant.amount-=Math.round(extraHeat / currentCoolant.coolingPerUnit);
        heat=COOLANT_THRESHOLD;
      }
 else {
        heat-=coolant.amount * currentCoolant.coolingPerUnit;
        coolant.amount=0;
      }
    }
  }
  if (heat > 0 && (penaltyCooling > 0 || !tile.isRedstonePowered)) {
    heat-=10;
  }
  if (heat <= 0) {
    heat=0;
  }
  if (heat == 0 && penaltyCooling > 0) {
    penaltyCooling--;
  }
}","@Override public void update(){
  super.update();
  if (itemInInventory != null) {
    LiquidStack liquid;
    if (Block.ice.blockID == itemInInventory.itemID && heat > COOLANT_THRESHOLD) {
      liquid=LiquidContainerRegistry.getLiquidForFilledItem(new ItemStack(Item.bucketWater));
    }
 else {
      liquid=LiquidContainerRegistry.getLiquidForFilledItem(itemInInventory);
    }
    if (liquid != null) {
      if (fill(ForgeDirection.UNKNOWN,liquid,false) == liquid.amount) {
        fill(ForgeDirection.UNKNOWN,liquid,true);
        tile.setInventorySlotContents(0,Utils.consumeItem(itemInInventory));
      }
    }
  }
  if (heat > COOLANT_THRESHOLD) {
    int extraHeat=heat - COOLANT_THRESHOLD;
    LiquidStack coolant=this.coolantTank.getLiquid();
    IronEngineCoolant currentCoolant=IronEngineCoolant.getCoolantForLiquid(coolant);
    if (currentCoolant != null) {
      if (coolant.amount * currentCoolant.coolingPerUnit > extraHeat) {
        coolant.amount-=Math.round(extraHeat / currentCoolant.coolingPerUnit);
        heat=COOLANT_THRESHOLD;
      }
 else {
        heat-=coolant.amount * currentCoolant.coolingPerUnit;
        coolantTank.setLiquid(null);
      }
    }
  }
  if (heat > 0 && (penaltyCooling > 0 || !tile.isRedstonePowered)) {
    heat-=10;
  }
  if (heat <= 0) {
    heat=0;
  }
  if (heat == 0 && penaltyCooling > 0) {
    penaltyCooling--;
  }
}",0.9894660370504904
156999,"@Override public void burn(){
  currentOutput=0;
  LiquidStack fuel=this.fuelTank.getLiquid();
  IronEngineFuel currentFuel=IronEngineFuel.getFuelForLiquid(fuel);
  if (currentFuel == null) {
    return;
  }
  if (penaltyCooling <= 0 && tile.isRedstonePowered) {
    lastPowered=true;
    if (burnTime > 0 || fuel.amount > 0) {
      if (burnTime > 0) {
        burnTime--;
      }
 else {
        fuel.amount--;
        burnTime=currentFuel.totalBurningTime / LiquidContainerRegistry.BUCKET_VOLUME;
      }
      currentOutput=currentFuel.powerPerCycle;
      addEnergy(currentFuel.powerPerCycle);
      heat+=currentFuel.powerPerCycle;
    }
  }
 else   if (penaltyCooling <= 0) {
    if (lastPowered) {
      lastPowered=false;
      penaltyCooling=30 * 20;
    }
  }
}","@Override public void burn(){
  currentOutput=0;
  LiquidStack fuel=this.fuelTank.getLiquid();
  IronEngineFuel currentFuel=IronEngineFuel.getFuelForLiquid(fuel);
  if (currentFuel == null) {
    return;
  }
  if (penaltyCooling <= 0 && tile.isRedstonePowered) {
    lastPowered=true;
    if (burnTime > 0 || fuel.amount > 0) {
      if (burnTime > 0) {
        burnTime--;
      }
 else {
        if (--fuel.amount <= 0)         fuelTank.setLiquid(null);
        burnTime=currentFuel.totalBurningTime / LiquidContainerRegistry.BUCKET_VOLUME;
      }
      currentOutput=currentFuel.powerPerCycle;
      addEnergy(currentFuel.powerPerCycle);
      heat+=currentFuel.powerPerCycle;
    }
  }
 else   if (penaltyCooling <= 0) {
    if (lastPowered) {
      lastPowered=false;
      penaltyCooling=30 * 20;
    }
  }
}",0.959042218021424
157000,"@Override public ItemStack decrStackSize(int i,int j){
  ItemStack newStack=stackList[i].copy();
  newStack.stackSize=j;
  stackList[i].stackSize-=j;
  if (stackList[i].stackSize == 0) {
    stackList[i]=null;
  }
  return newStack;
}","@Override public ItemStack decrStackSize(int slotId,int count){
  if (stackList[slotId] == null)   return null;
  if (stackList[slotId].stackSize > count)   return stackList[slotId].splitStack(count);
  ItemStack stack=stackList[slotId];
  stackList[slotId]=null;
  return stack;
}",0.2563106796116505
