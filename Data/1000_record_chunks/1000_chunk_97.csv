record_number,buggy_code,fixed_code,code_similarity
96001,"/** 
 * {@inheritDoc}
 */
protected void closeMenu(IMenuAdapter menuBar,int[] path){
  if (menuBar.getRealComponent() instanceof JPopupMenu) {
    for (int i=0; i < path.length; i++) {
      getRobot().keyType(menuBar.getRealComponent(),KeyEvent.VK_ESCAPE);
    }
    return;
  }
  super.closeMenu(menuBar,path);
}","/** 
 * {@inheritDoc}
 */
protected void closeMenu(IMenuAdapter menuBar,int[] path){
  if (menuBar.getRealComponent() instanceof JPopupMenu) {
    for (int i=0; i < path.length; i++) {
      if (((JPopupMenu)menuBar.getRealComponent()).isVisible()) {
        getRobot().keyType(menuBar.getRealComponent(),KeyEvent.VK_ESCAPE);
      }
    }
    return;
  }
  super.closeMenu(menuBar,path);
}",0.8920454545454546
96002,"/** 
 * select MenuItem programatically (for Mac OS)
 */
public void selectProgramatically(){
  final MenuItem menuItem=m_menuItem;
  final InterceptorOptions options=new InterceptorOptions(new long[]{SWT.Selection});
  final IEventMatcher matcher=new SelectionSwtEventMatcher();
  RobotFactorySwtImpl robotSwt=new RobotFactorySwtImpl();
  IRobotEventInterceptor interceptor=robotSwt.getRobotEventInterceptor();
  final IRobotEventConfirmer confirmer=interceptor.intercept(options);
  final Event event=new Event();
  event.time=(int)System.currentTimeMillis();
  event.widget=menuItem;
  event.display=menuItem.getDisplay();
  event.type=SWT.Selection;
  getEventThreadQueuer().invokeLater(""String_Node_Str"",new Runnable(){
    public void run(){
      if ((menuItem.getStyle() & SWT.CHECK) == 0 || (menuItem.getStyle() & SWT.RADIO) == 0) {
        if (menuItem.getSelection()) {
          menuItem.setSelection(false);
        }
 else {
          menuItem.setSelection(true);
        }
      }
      menuItem.notifyListeners(SWT.Selection,event);
    }
  }
);
  try {
    confirmer.waitToConfirm(menuItem,matcher);
  }
 catch (  RobotException re) {
    final StringBuffer sb=new StringBuffer(""String_Node_Str"");
    sb.append(""String_Node_Str"");
    getEventThreadQueuer().invokeAndWait(""String_Node_Str"",new IRunnable(){
      public Object run() throws StepExecutionException {
        sb.append(menuItem);
        return null;
      }
    }
);
    throw re;
  }
}","/** 
 * select MenuItem programatically (for Mac OS)
 */
public void selectProgramatically(){
  final MenuItem menuItem=m_menuItem;
  final InterceptorOptions options=new InterceptorOptions(new long[]{SWT.Selection});
  final IEventMatcher matcher=new SelectionSwtEventMatcher();
  RobotFactorySwtImpl robotSwt=new RobotFactorySwtImpl();
  IRobotEventInterceptor interceptor=robotSwt.getRobotEventInterceptor();
  final IRobotEventConfirmer confirmer=interceptor.intercept(options);
  final Event event=new Event();
  event.time=(int)System.currentTimeMillis();
  event.widget=menuItem;
  event.display=menuItem.getDisplay();
  event.type=SWT.Selection;
  closeUnderMac();
  getEventThreadQueuer().invokeLater(""String_Node_Str"",new Runnable(){
    public void run(){
      if ((menuItem.getStyle() & SWT.CHECK) == 0 || (menuItem.getStyle() & SWT.RADIO) == 0) {
        if (menuItem.getSelection()) {
          menuItem.setSelection(false);
        }
 else {
          menuItem.setSelection(true);
        }
      }
      menuItem.notifyListeners(SWT.Selection,event);
    }
  }
);
  try {
    confirmer.waitToConfirm(menuItem,matcher);
  }
 catch (  RobotException re) {
    final StringBuffer sb=new StringBuffer(""String_Node_Str"");
    sb.append(""String_Node_Str"");
    getEventThreadQueuer().invokeAndWait(""String_Node_Str"",new IRunnable(){
      public Object run() throws StepExecutionException {
        sb.append(menuItem);
        return null;
      }
    }
);
    throw re;
  }
}",0.9935745688197496
96003,"public Object run() throws StepExecutionException {
  sb.append(menuItem);
  return null;
}","public void run(){
  Menu parentMenu=m_menuItem.getParent();
  while (parentMenu.getParentMenu() != null) {
    parentMenu=parentMenu.getParentMenu();
  }
  parentMenu.setVisible(false);
}",0.3297491039426523
96004,"/** 
 * Collect all problems
 * @param checkCompNamesPair boolean, also used to determine whether missing project problems will be reused or rechecked.
 * @param state ServerState
 */
private void doProblemsCheck(boolean checkCompNamesPair,ServerState state){
  clearOldProblems();
  IProjectPO project=GeneralStorage.getInstance().getProject();
  if (project == null) {
    problemNoProjectExists();
  }
 else {
    if (TestSuiteBP.getListOfTestSuites().isEmpty()) {
      problemNoTestSuiteExists();
    }
    checkAllTestSuites();
    checkAllAutConfigs();
    checkAllTestJobs();
    if (project.getIsProtected()) {
      problemProtectedProjectLoaded();
    }
  }
  if (checkCompNamesPair) {
    checkCompNamesPairs();
  }
 else {
    copyCompNamesProblems();
  }
  if (checkCompNamesPair) {
    checkMissingProjects();
  }
 else {
    copyMissingProjectProblems();
  }
  checkReusedProjectLanguages();
  checkServerState(state);
  collectAdditionalProblemsWhichShouldBeMarked();
  createMarkers();
  cleanupProblems();
  ProblemPropagator.getInstance().propagate();
}","/** 
 * Collect all problems
 * @param checkCompNamesPair boolean, also used to determine whether missing project problems will be reused or rechecked.
 * @param state ServerState
 */
private void doProblemsCheck(boolean checkCompNamesPair,ServerState state){
  clearOldProblems();
  IProjectPO project=GeneralStorage.getInstance().getProject();
  if (project != null) {
    if (TestSuiteBP.getListOfTestSuites().isEmpty()) {
      problemNoTestSuiteExists();
    }
    checkAllTestSuites();
    checkAllAutConfigs();
    checkAllTestJobs();
    if (project.getIsProtected()) {
      problemProtectedProjectLoaded();
    }
  }
  if (checkCompNamesPair) {
    checkCompNamesPairs();
  }
 else {
    copyCompNamesProblems();
  }
  if (checkCompNamesPair) {
    checkMissingProjects();
  }
 else {
    copyMissingProjectProblems();
  }
  checkReusedProjectLanguages();
  checkServerState(state);
  collectAdditionalProblemsWhichShouldBeMarked();
  createMarkers();
  cleanupProblems();
  ProblemPropagator.getInstance().propagate();
}",0.973384030418251
96005,"/** 
 * Checks if there is a Connection to AutAgent
 * @param state ServerState
 */
private void checkServerState(ServerState state){
  final String serverPortPref=Plugin.getDefault().getPreferenceStore().getString(Constants.AUT_AGENT_SETTINGS_KEY);
  boolean isConnected=false;
  boolean isServerDefined=(serverPortPref.length() != 0);
  if (state == null) {
    try {
      isConnected=AutAgentConnection.getInstance().isConnected();
    }
 catch (    ConnectionException e) {
    }
  }
 else {
switch (state) {
case Connected:
      isConnected=true;
    break;
case Disconnected:
  isConnected=false;
break;
default :
break;
}
}
if (!isServerDefined) {
problemNoServerDefined();
}
 else if (!isConnected) {
problemNoAutStarterConnection();
}
}","/** 
 * Checks if there is a Connection to AutAgent
 * @param state ServerState
 */
private void checkServerState(ServerState state){
  final String serverPortPref=Plugin.getDefault().getPreferenceStore().getString(Constants.AUT_AGENT_SETTINGS_KEY);
  boolean isServerDefined=(serverPortPref.length() != 0);
  if (!isServerDefined) {
    problemNoServerDefined();
  }
}",0.6093189964157706
96006,"/** 
 * Clicks on a menu item
 * @param robot the robot
 * @param item the menu item
 */
public static void clickMenuItem(IRobot robot,JMenuItem item){
  if (!item.isEnabled()) {
    throw new StepExecutionException(""String_Node_Str"",EventFactory.createActionError(TestErrorEvent.MENU_ITEM_NOT_ENABLED));
  }
  if (item.getParent() instanceof JPopupMenu && ((JPopupMenu)item.getParent()).getInvoker().getParent() instanceof JMenuBar) {
    robot.click(item,null,ClickOptions.create().setClickType(ClickOptions.ClickType.RELEASED).setFirstHorizontal(true));
  }
 else {
    robot.click(item,null,ClickOptions.create().setClickType(ClickOptions.ClickType.RELEASED));
  }
}","/** 
 * Clicks on a menu item
 * @param robot the robot
 * @param item the menu item
 */
public static void clickMenuItem(IRobot robot,JMenuItem item){
  if (!item.isEnabled()) {
    throw new StepExecutionException(""String_Node_Str"",EventFactory.createActionError(TestErrorEvent.MENU_ITEM_NOT_ENABLED));
  }
  if (item.getParent() instanceof JPopupMenu && ((JPopupMenu)item.getParent()).getInvoker().getParent() instanceof JMenuBar) {
    robot.click(item,null,ClickOptions.create().setClickType(ClickOptions.ClickType.RELEASED).setFirstHorizontal(false));
  }
 else {
    robot.click(item,null,ClickOptions.create().setClickType(ClickOptions.ClickType.RELEASED));
  }
}",0.9947800149142432
96007,"/** 
 * {@inheritDoc}
 */
public IMenuAdapter openSubMenu(){
  if (!m_menuItem.isEnabled()) {
    throw new StepExecutionException(""String_Node_Str"",EventFactory.createActionError(TestErrorEvent.MENU_ITEM_NOT_ENABLED));
  }
  if (!(m_menuItem instanceof JMenu)) {
    throw new StepExecutionException(""String_Node_Str"",EventFactory.createActionError(TestErrorEvent.NOT_FOUND));
  }
  JMenu menu=(JMenu)m_menuItem;
  getRobot().click(m_menuItem,null,ClickOptions.create().setClickType(ClickOptions.ClickType.RELEASED));
  RobotTiming.sleepPostShowSubMenuItem(menu.getDelay());
  return getMenu();
}","/** 
 * {@inheritDoc}
 */
public IMenuAdapter openSubMenu(){
  if (!m_menuItem.isEnabled()) {
    throw new StepExecutionException(""String_Node_Str"",EventFactory.createActionError(TestErrorEvent.MENU_ITEM_NOT_ENABLED));
  }
  if (!(m_menuItem instanceof JMenu)) {
    throw new StepExecutionException(""String_Node_Str"",EventFactory.createActionError(TestErrorEvent.NOT_FOUND));
  }
  JMenu menu=(JMenu)m_menuItem;
  clickMenuItem(getRobot(),m_menuItem);
  RobotTiming.sleepPostShowSubMenuItem(menu.getDelay());
  return getMenu();
}",0.899911426040744
96008,"/** 
 * Clicks on a menu item
 * @param robot the robot
 * @param item  the menu item
 */
private void clickMenuItem(IRobot robot,JMenuItem item){
  if (!item.isEnabled()) {
    throw new StepExecutionException(""String_Node_Str"",EventFactory.createActionError(TestErrorEvent.MENU_ITEM_NOT_ENABLED));
  }
  robot.click(item,null,ClickOptions.create().setClickType(ClickOptions.ClickType.RELEASED));
}","/** 
 * Clicks on a menu item
 * @param robot the robot
 * @param item  the menu item
 */
private void clickMenuItem(IRobot robot,JMenuItem item){
  if (!item.isEnabled()) {
    throw new StepExecutionException(""String_Node_Str"",EventFactory.createActionError(TestErrorEvent.MENU_ITEM_NOT_ENABLED));
  }
  if (item.getParent() instanceof JPopupMenu && ((JPopupMenu)item.getParent()).getInvoker().getParent() instanceof JMenuBar) {
    robot.click(item,null,ClickOptions.create().setClickType(ClickOptions.ClickType.RELEASED).setFirstHorizontal(false));
  }
 else {
    robot.click(item,null,ClickOptions.create().setClickType(ClickOptions.ClickType.RELEASED));
  }
}",0.7492957746478873
96009,"/** 
 * Clicks on a menu item
 * @param robot the robot
 * @param item the menu item
 * @param clickCount the number of times to click the menu item
 */
public static void clickMenuItem(IRobot robot,final MenuItem item,int clickCount){
  robot.click(item,null,ClickOptions.create().setClickType(ClickOptions.ClickType.RELEASED).setStepMovement(false).setClickCount(clickCount));
}","/** 
 * Clicks on a menu item
 * @param robot the robot
 * @param item the menu item
 * @param clickCount the number of times to click the menu item
 */
private void clickMenuItem(IRobot robot,final MenuItem item,int clickCount){
  boolean isSecondInMenu=((Boolean)getEventThreadQueuer().invokeAndWait(""String_Node_Str"",new IRunnable(){
    public Object run() throws StepExecutionException {
      try {
        if ((item.getParent().getParentMenu().getStyle() & SWT.BAR) != 0) {
          return Boolean.TRUE;
        }
        Menu parent=item.getMenu().getParentMenu();
        if (parent != null) {
          Menu preparent=parent.getParentMenu();
          if (preparent != null) {
            return (preparent.getStyle() & SWT.BAR) != 0 ? Boolean.TRUE : Boolean.FALSE;
          }
        }
      }
 catch (      NullPointerException ne) {
      }
      return Boolean.FALSE;
    }
  }
)).booleanValue();
  if (isSecondInMenu) {
    robot.click(item,null,ClickOptions.create().setClickType(ClickOptions.ClickType.RELEASED).setStepMovement(true).setClickCount(clickCount).setFirstHorizontal(false));
  }
 else {
    robot.click(item,null,ClickOptions.create().setClickType(ClickOptions.ClickType.RELEASED).setStepMovement(true).setClickCount(clickCount));
  }
}",0.4150485436893203
96010,"/** 
 * {@inheritDoc}
 */
public void earlyStartup(){
  final Properties envVars=EnvironmentUtils.getProcessEnvironment();
  if (getValue(AutConfigConstants.AUT_AGENT_HOST,envVars) != null) {
    final IWorkbench workbench=PlatformUI.getWorkbench();
    final Display display=workbench.getDisplay();
    initAutServer(display,envVars);
    display.syncExec(new Runnable(){
      public void run(){
        if (Platform.getBundle(Startup.GEF_BUNDLE_ID) != null) {
          m_gefListener=new GefPartListener();
          AUTServer.getInstance().addInspectorListenerAppender(new GefInspectorListenerAppender());
        }
        ComponentNamer namer=new ComponentNamer();
        display.addFilter(SWT.Paint,namer);
        display.addFilter(SWT.Activate,namer);
        addWindowListener(workbench);
        IWorkbenchWindow window=workbench.getActiveWorkbenchWindow();
        if (window != null) {
          addPartListeners(window);
          IWorkbenchPage[] pages=window.getPages();
          for (int i=0; i < pages.length; i++) {
            IEditorReference[] editorRefs=pages[i].getEditorReferences();
            IViewReference[] viewRefs=pages[i].getViewReferences();
            for (int j=0; j < editorRefs.length; j++) {
              partNamingListener.partOpened(editorRefs[j]);
              if (m_gefListener != null) {
                m_gefListener.partOpened(editorRefs[j]);
              }
            }
            for (int k=0; k < viewRefs.length; k++) {
              partNamingListener.partOpened(viewRefs[k]);
              if (m_gefListener != null) {
                m_gefListener.partOpened(viewRefs[k]);
              }
            }
          }
          Shell mainShell=window.getShell();
          if (mainShell != null && !mainShell.isDisposed()) {
            repaintToolbars(mainShell);
          }
        }
      }
    }
);
    AUTServer.getInstance().addToolKitEventListenerToAUT();
  }
}","/** 
 * {@inheritDoc}
 */
public void earlyStartup(){
  final Properties envVars=EnvironmentUtils.getProcessEnvironment();
  if (getValue(AutConfigConstants.AUT_AGENT_HOST,envVars) != null) {
    final IWorkbench workbench=PlatformUI.getWorkbench();
    final Display display=workbench.getDisplay();
    initAutServer(display,envVars);
    display.syncExec(new Runnable(){
      public void run(){
        if (Platform.getBundle(Startup.GEF_BUNDLE_ID) != null) {
          m_gefListener=new GefPartListener();
          AUTServer.getInstance().addInspectorListenerAppender(new GefInspectorListenerAppender());
        }
        ComponentNamer namer=new ComponentNamer();
        display.addFilter(SWT.Paint,namer);
        display.addFilter(SWT.Activate,namer);
        addWindowListener(workbench);
        IWorkbenchWindow window=workbench.getActiveWorkbenchWindow();
        if (window != null) {
          addPartListeners(window);
          IWorkbenchPage[] pages=window.getPages();
          for (int i=0; i < pages.length; i++) {
            IEditorReference[] editorRefs=pages[i].getEditorReferences();
            IViewReference[] viewRefs=pages[i].getViewReferences();
            for (int j=0; j < editorRefs.length; j++) {
              partNamingListener.partOpened(editorRefs[j]);
              if (m_gefListener != null) {
                m_gefListener.partOpened(editorRefs[j]);
              }
            }
            for (int k=0; k < viewRefs.length; k++) {
              partNamingListener.partOpened(viewRefs[k]);
              if (m_gefListener != null) {
                m_gefListener.partOpened(viewRefs[k]);
              }
            }
          }
          Shell mainShell=window.getShell();
          if (mainShell != null && !mainShell.isDisposed()) {
            repaintToolbars(mainShell);
          }
        }
      }
    }
);
    GUIAdapterFactoryRegistry.getInstance().registerFactory(new SWTAdapterFactory());
    AUTServer.getInstance().addToolKitEventListenerToAUT();
  }
}",0.97818366311517
96011,"/** 
 * notify listener about loading of a project
 * @param monitor The progress monitor for this poperation.
 */
public void fireProjectLoadedListener(IProgressMonitor monitor){
  new LoadProjectDataOperation().run(monitor);
}","/** 
 * notify listener about loading of a project
 * @param monitor The progress monitor for this operation.
 */
public void fireProjectLoadedListener(IProgressMonitor monitor){
  new LoadProjectDataOperation().run(monitor);
}",0.9978021978021978
96012,"/** 
 * private constructor
 */
private DataEventDispatcher(){
  GeneralStorage.getInstance().addReloadedSessListener(this);
  GeneralStorage.getInstance().addDataModifiedListener(this);
}","/** 
 * private constructor
 */
private DataEventDispatcher(){
  final GeneralStorage gs=GeneralStorage.getInstance();
  gs.addReloadedSessListener(this);
  gs.addDataModifiedListener(this);
}",0.8526315789473684
96013,"/** 
 * Constructor
 */
public InspectableAutSourceProvider(){
  DataEventDispatcher.getInstance().addProjectLoadedListener(this,true);
  DataEventDispatcher.getInstance().addProjectPropertiesModifyListener(this,true);
  AutAgentRegistration.getInstance().addListener(this);
}","/** 
 * Constructor
 */
public InspectableAutSourceProvider(){
  final DataEventDispatcher ded=DataEventDispatcher.getInstance();
  ded.addProjectLoadedListener(this,true);
  ded.addProjectStateListener(this);
  AutAgentRegistration.getInstance().addListener(this);
}",0.7034990791896869
96014,"/** 
 * {@inheritDoc}
 */
public void dispose(){
  DataEventDispatcher.getInstance().removeProjectLoadedListener(this);
  DataEventDispatcher.getInstance().removeProjectPropertiesModifyListener(this);
  AutAgentRegistration.getInstance().removeListener(this);
}","/** 
 * {@inheritDoc}
 */
public void dispose(){
  final DataEventDispatcher ded=DataEventDispatcher.getInstance();
  ded.removeProjectLoadedListener(this);
  ded.removeProjectStateListener(this);
  AutAgentRegistration.getInstance().removeListener(this);
}",0.8185328185328186
96015,"/** 
 * {@inheritDoc} 
 */
public void doSave(IProgressMonitor monitor){
  monitor.beginTask(Messages.EditorsSaveEditors,IProgressMonitor.UNKNOWN);
  EditSupport editSupport=getEditorHelper().getEditSupport();
  try {
    editSupport.saveWorkVersion();
    updateReferencedParamNodes();
    getEditorHelper().resetEditableState();
    getEditorHelper().setDirty(false);
  }
 catch (  IncompatibleTypeException pmce) {
    handlePMCompNameException(pmce);
  }
catch (  PMException e) {
    PMExceptionHandler.handlePMExceptionForMasterSession(e);
    try {
      reOpenEditor(((PersistableEditorInput)getEditorInput()).getNode());
    }
 catch (    PMException e1) {
      PMExceptionHandler.handlePMExceptionForEditor(e,this);
    }
  }
catch (  ProjectDeletedException e) {
    PMExceptionHandler.handleGDProjectDeletedException();
  }
 finally {
    monitor.done();
  }
}","/** 
 * {@inheritDoc} 
 */
public void doSave(IProgressMonitor monitor){
  monitor.beginTask(Messages.EditorsSaveEditors,IProgressMonitor.UNKNOWN);
  EditSupport editSupport=getEditorHelper().getEditSupport();
  try {
    editSupport.saveWorkVersion();
    final EntityManager masterSession=GeneralStorage.getInstance().getMasterSession();
    IPersistentObject original=editSupport.getOriginal();
    if (original != null) {
      masterSession.refresh(original);
      if (original instanceof ITestDataCategoryPO) {
        for (        ITestDataCubePO dataCube : ((ITestDataCategoryPO)original).getTestDataChildren()) {
          masterSession.refresh(dataCube);
          ITDManager manager=dataCube.getDataManager();
          masterSession.refresh(manager);
        }
      }
    }
    updateReferencedParamNodes();
    getEditorHelper().resetEditableState();
    getEditorHelper().setDirty(false);
  }
 catch (  IncompatibleTypeException pmce) {
    handlePMCompNameException(pmce);
  }
catch (  PMException e) {
    PMExceptionHandler.handlePMExceptionForMasterSession(e);
    try {
      reOpenEditor(((PersistableEditorInput)getEditorInput()).getNode());
    }
 catch (    PMException e1) {
      PMExceptionHandler.handlePMExceptionForEditor(e,this);
    }
  }
catch (  ProjectDeletedException e) {
    PMExceptionHandler.handleGDProjectDeletedException();
  }
 finally {
    monitor.done();
  }
}",0.7654537483559842
96016,"/** 
 * This method is called if the Action of a CAP is not compatible with the current XML-Config-File.<br> The existent TDManager of the CAP is filled with the TestData
 * @param owner The CAP.
 * @param xmlCap The abstraction of the XML CAP (see Apache XML Beans)
 * @return the filled TDManager of the given owner
 */
private ITDManager fillTDManager(IParamNodePO owner,Cap xmlCap){
  final ITDManager tdman=owner.getDataManager();
  List<ParamDescription> parDescList=xmlCap.getParameterDescriptionList();
  final TestData testData=xmlCap.getTestdata();
  int tdRow=0;
  for (  TestDataRow rowXml : testData.getRowList()) {
    if (rowXml.getDataList().isEmpty()) {
      continue;
    }
    List<ITestDataPO> tdList=null;
    try {
      tdList=tdman.getDataSet(tdRow).getList();
    }
 catch (    IndexOutOfBoundsException ioobe) {
      final StringBuilder msgSb=new StringBuilder();
      msgSb.append(Messages.Component);
      msgSb.append(StringConstants.COLON + StringConstants.SPACE);
      msgSb.append(xmlCap.getComponentType());
      msgSb.append(StringConstants.NEWLINE + Messages.Action);
      msgSb.append(StringConstants.COLON + StringConstants.SPACE);
      msgSb.append(CompSystemI18n.getString(xmlCap.getActionName()));
      msgSb.append(StringConstants.NEWLINE + Messages.Parameter);
      msgSb.append(StringConstants.COLON + StringConstants.SPACE);
      msgSb.append(CompSystemI18n.getString(parDescList.get(tdRow).getName()));
      final String msg=msgSb.toString();
      log.error(msg,ioobe);
      continue;
    }
    int tdCell=0;
    for (    TestDataCell cellXml : rowXml.getDataList()) {
      String uniqueId=parDescList.get(tdCell).getUniqueId();
      final int ownerIndex=owner.getDataManager().findColumnForParam(uniqueId);
      if (ownerIndex > -1) {
        tdList.set(ownerIndex,PoMaker.createTestDataPO(readData(cellXml,owner)));
      }
      tdCell++;
    }
    tdman.clear();
    tdman.insertDataSet(PoMaker.createListWrapperPO(tdList),tdRow);
    tdRow++;
  }
  return tdman;
}","/** 
 * This method is called if the Action of a CAP is not compatible with the current XML-Config-File.<br> The existent TDManager of the CAP is filled with the TestData
 * @param owner The CAP.
 * @param xmlCap The abstraction of the XML CAP (see Apache XML Beans)
 * @return the filled TDManager of the given owner
 */
private ITDManager fillTDManager(IParamNodePO owner,Cap xmlCap){
  final ITDManager tdman=owner.getDataManager();
  List<ParamDescription> parDescList=xmlCap.getParameterDescriptionList();
  final TestData testData=xmlCap.getTestdata();
  int tdRow=0;
  for (  TestDataRow rowXml : testData.getRowList()) {
    if (rowXml.getDataList().isEmpty()) {
      continue;
    }
    List<ITestDataPO> tdList=null;
    try {
      tdList=tdman.getDataSet(tdRow).getList();
    }
 catch (    IndexOutOfBoundsException ioobe) {
      final StringBuilder msgSb=new StringBuilder();
      msgSb.append(Messages.Component);
      msgSb.append(StringConstants.COLON + StringConstants.SPACE);
      msgSb.append(xmlCap.getComponentType());
      msgSb.append(StringConstants.NEWLINE + Messages.Action);
      msgSb.append(StringConstants.COLON + StringConstants.SPACE);
      msgSb.append(CompSystemI18n.getString(xmlCap.getActionName(),true));
      msgSb.append(StringConstants.NEWLINE + Messages.Parameter);
      msgSb.append(StringConstants.COLON + StringConstants.SPACE);
      msgSb.append(CompSystemI18n.getString(parDescList.get(tdRow).getName(),true));
      final String msg=msgSb.toString();
      log.error(msg,ioobe);
      continue;
    }
    int tdCell=0;
    for (    TestDataCell cellXml : rowXml.getDataList()) {
      String uniqueId=parDescList.get(tdCell).getUniqueId();
      final int ownerIndex=owner.getDataManager().findColumnForParam(uniqueId);
      if (ownerIndex > -1) {
        tdList.set(ownerIndex,PoMaker.createTestDataPO(readData(cellXml,owner)));
      }
      tdCell++;
    }
    tdman.clear();
    tdman.insertDataSet(PoMaker.createListWrapperPO(tdList),tdRow);
    tdRow++;
  }
  return tdman;
}",0.9975442043222004
96017,"/** 
 * {@inheritDoc}
 */
@SuppressWarnings(""String_Node_Str"") public void changeReuse(IComponentNameReuser user,String oldGuid,String newGuid) throws IncompatibleTypeException, PMException {
  if (user == null) {
    return;
  }
  if (newGuid != null) {
    CompSystem compSystem=ComponentBuilder.getInstance().getCompSystem();
    List<Component> availableComponents=getFilterToolkitId() != null ? compSystem.getComponents(getFilterToolkitId(),true) : compSystem.getComponents();
    boolean isValidType=updateComponentType(newGuid,user.getComponentType(getCompNameCache(),availableComponents));
    if (!isValidType) {
      String currType=getCompNameCache().getCompNamePo(newGuid).getComponentType();
      String userType=user.getComponentType(getCompNameCache(),availableComponents);
      IComponentNamePO compNamePo=getCompNameCache().getCompNamePo(newGuid);
      StringBuilder msgBuid=new StringBuilder();
      msgBuid.append(Messages.ErrorSavingChangedComponentName);
      msgBuid.append(StringConstants.DOT);
      msgBuid.append(StringConstants.NEWLINE);
      msgBuid.append(StringConstants.APOSTROPHE);
      msgBuid.append(currType);
      msgBuid.append(StringConstants.APOSTROPHE);
      msgBuid.append(StringConstants.SPACE);
      msgBuid.append(StringConstants.MINUS);
      msgBuid.append(StringConstants.RIGHT_INEQUALITY_SING);
      msgBuid.append(StringConstants.SPACE);
      msgBuid.append(StringConstants.APOSTROPHE);
      msgBuid.append(userType);
      msgBuid.append(StringConstants.APOSTROPHE);
      msgBuid.append(StringConstants.EXCLAMATION_MARK);
      String msg=msgBuid.toString();
      throw new IncompatibleTypeException(compNamePo,msg,MessageIDs.E_COMP_TYPE_INCOMPATIBLE,new String[]{compNamePo.getName(),CompSystemI18n.getString(currType),CompSystemI18n.getString(userType)});
    }
    getCompNameCache().addReuse(newGuid);
  }
  user.changeCompName(oldGuid,newGuid);
  if (oldGuid != null) {
    updateComponentType(oldGuid,null);
    getCompNameCache().removeReuse(oldGuid);
  }
}","/** 
 * {@inheritDoc}
 */
@SuppressWarnings(""String_Node_Str"") public void changeReuse(IComponentNameReuser user,String oldGuid,String newGuid) throws IncompatibleTypeException, PMException {
  if (user == null) {
    return;
  }
  if (newGuid != null) {
    CompSystem compSystem=ComponentBuilder.getInstance().getCompSystem();
    List<Component> availableComponents=getFilterToolkitId() != null ? compSystem.getComponents(getFilterToolkitId(),true) : compSystem.getComponents();
    boolean isValidType=updateComponentType(newGuid,user.getComponentType(getCompNameCache(),availableComponents));
    if (!isValidType) {
      String currType=getCompNameCache().getCompNamePo(newGuid).getComponentType();
      String userType=user.getComponentType(getCompNameCache(),availableComponents);
      IComponentNamePO compNamePo=getCompNameCache().getCompNamePo(newGuid);
      StringBuilder msgBuid=new StringBuilder();
      msgBuid.append(Messages.ErrorSavingChangedComponentName);
      msgBuid.append(StringConstants.DOT);
      msgBuid.append(StringConstants.NEWLINE);
      msgBuid.append(StringConstants.APOSTROPHE);
      msgBuid.append(currType);
      msgBuid.append(StringConstants.APOSTROPHE);
      msgBuid.append(StringConstants.SPACE);
      msgBuid.append(StringConstants.MINUS);
      msgBuid.append(StringConstants.RIGHT_INEQUALITY_SING);
      msgBuid.append(StringConstants.SPACE);
      msgBuid.append(StringConstants.APOSTROPHE);
      msgBuid.append(userType);
      msgBuid.append(StringConstants.APOSTROPHE);
      msgBuid.append(StringConstants.EXCLAMATION_MARK);
      String msg=msgBuid.toString();
      throw new IncompatibleTypeException(compNamePo,msg,MessageIDs.E_COMP_TYPE_INCOMPATIBLE,new String[]{compNamePo.getName(),CompSystemI18n.getString(currType,true),CompSystemI18n.getString(userType,true)});
    }
    getCompNameCache().addReuse(newGuid);
  }
  user.changeCompName(oldGuid,newGuid);
  if (oldGuid != null) {
    updateComponentType(oldGuid,null);
    getCompNameCache().removeReuse(oldGuid);
  }
}",0.9975429975429976
96018,"/** 
 * adds information for a Cap to the XML file
 * @param resultNode the actual node
 * @param insertInto where to insert elements in xml
 * @param node NodePO
 */
protected void addCapElements(TestResultNode resultNode,Element insertInto,ICapPO node){
  ICapPO cap=node;
  getTimestampFromResultNode(resultNode,insertInto);
  Element compEl=insertInto.addElement(""String_Node_Str"");
  compEl.addText(StringUtils.defaultString(resultNode.getComponentName()));
  Element compTypeEl=insertInto.addElement(""String_Node_Str"");
  compTypeEl.addText(CompSystemI18n.getString(cap.getComponentType()));
  Element actionEl=insertInto.addElement(""String_Node_Str"");
  actionEl.addText(CompSystemI18n.getString(cap.getActionName()));
  if (resultNode.getStatus() == TestResultNode.ERROR || resultNode.getStatus() == TestResultNode.RETRYING) {
    Element error=insertInto.addElement(""String_Node_Str"");
    Element errorType=error.addElement(""String_Node_Str"");
    TestErrorEvent event=resultNode.getEvent();
    if (event != null) {
      errorType.addText(I18n.getString(event.getId(),true));
      Map<Object,Object> eventProps=event.getProps();
      if (eventProps.containsKey(TestErrorEvent.Property.DESCRIPTION_KEY)) {
        String key=(String)eventProps.get(TestErrorEvent.Property.DESCRIPTION_KEY);
        Object[] args=(Object[])eventProps.get(TestErrorEvent.Property.PARAMETER_KEY);
        args=args != null ? args : new Object[0];
        Element mapEntry=error.addElement(""String_Node_Str"");
        if (mapEntry != null && key != null) {
          mapEntry.addText(resultNode.hasBackingNode() ? String.valueOf(I18n.getString(key,args)) : key);
        }
      }
 else {
        for (        Map.Entry<Object,Object> entry : eventProps.entrySet()) {
          if (!TestErrorEvent.Property.DESCRIPTION_KEY.equals(entry.getKey())) {
            Element mapEntry=error.addElement((String)entry.getKey());
            mapEntry.addText(String.valueOf(entry.getValue()));
          }
        }
      }
    }
  }
}","/** 
 * adds information for a Cap to the XML file
 * @param resultNode the actual node
 * @param insertInto where to insert elements in xml
 * @param node NodePO
 */
protected void addCapElements(TestResultNode resultNode,Element insertInto,ICapPO node){
  ICapPO cap=node;
  getTimestampFromResultNode(resultNode,insertInto);
  Element compEl=insertInto.addElement(""String_Node_Str"");
  compEl.addText(StringUtils.defaultString(resultNode.getComponentName()));
  Element compTypeEl=insertInto.addElement(""String_Node_Str"");
  compTypeEl.addText(CompSystemI18n.getString(cap.getComponentType(),true));
  Element actionEl=insertInto.addElement(""String_Node_Str"");
  actionEl.addText(CompSystemI18n.getString(cap.getActionName(),true));
  if (resultNode.getStatus() == TestResultNode.ERROR || resultNode.getStatus() == TestResultNode.RETRYING) {
    Element error=insertInto.addElement(""String_Node_Str"");
    Element errorType=error.addElement(""String_Node_Str"");
    TestErrorEvent event=resultNode.getEvent();
    if (event != null) {
      errorType.addText(I18n.getString(event.getId(),true));
      Map<Object,Object> eventProps=event.getProps();
      if (eventProps.containsKey(TestErrorEvent.Property.DESCRIPTION_KEY)) {
        String key=(String)eventProps.get(TestErrorEvent.Property.DESCRIPTION_KEY);
        Object[] args=(Object[])eventProps.get(TestErrorEvent.Property.PARAMETER_KEY);
        args=args != null ? args : new Object[0];
        Element mapEntry=error.addElement(""String_Node_Str"");
        if (mapEntry != null && key != null) {
          mapEntry.addText(resultNode.hasBackingNode() ? String.valueOf(I18n.getString(key,args)) : key);
        }
      }
 else {
        for (        Map.Entry<Object,Object> entry : eventProps.entrySet()) {
          if (!TestErrorEvent.Property.DESCRIPTION_KEY.equals(entry.getKey())) {
            Element mapEntry=error.addElement((String)entry.getKey());
            mapEntry.addText(String.valueOf(entry.getValue()));
          }
        }
      }
    }
  }
}",0.9975272007912958
96019,"/** 
 * get a list of parameters for cap
 * @param node TestResultNode
 * @param parameterInterface Source for Parameter information.
 * @param keyword ITestResultPO
 * @return result mit parameter
 */
private ITestResultPO addParameterListToResult(ITestResultPO keyword,TestResultNode node,IParameterInterfacePO parameterInterface){
  int index=0;
  for (  IParamDescriptionPO param : parameterInterface.getParameterList()) {
    IParameterDetailsPO parameter=PoMaker.createParameterDetailsPO();
    parameter.setParameterName(param.getName());
    parameter.setInternalParameterType(param.getType());
    parameter.setParameterType(CompSystemI18n.getString(param.getType()));
    String paramValue=StringConstants.EMPTY;
    List<TestResultParameter> parameters=node.getParameters();
    if (parameters.size() >= index + 1) {
      final String value=parameters.get(index).getValue();
      paramValue=StringUtils.defaultString(value);
    }
    parameter.setParameterValue(paramValue);
    keyword.addParameter(parameter);
    index++;
  }
  return keyword;
}","/** 
 * get a list of parameters for cap
 * @param node TestResultNode
 * @param parameterInterface Source for Parameter information.
 * @param keyword ITestResultPO
 * @return result mit parameter
 */
private ITestResultPO addParameterListToResult(ITestResultPO keyword,TestResultNode node,IParameterInterfacePO parameterInterface){
  int index=0;
  for (  IParamDescriptionPO param : parameterInterface.getParameterList()) {
    IParameterDetailsPO parameter=PoMaker.createParameterDetailsPO();
    parameter.setParameterName(param.getName());
    parameter.setInternalParameterType(param.getType());
    parameter.setParameterType(CompSystemI18n.getString(param.getType(),true));
    String paramValue=StringConstants.EMPTY;
    List<TestResultParameter> parameters=node.getParameters();
    if (parameters.size() >= index + 1) {
      final String value=parameters.get(index).getValue();
      paramValue=StringUtils.defaultString(value);
    }
    parameter.setParameterValue(paramValue);
    keyword.addParameter(parameter);
    index++;
  }
  return keyword;
}",0.9976514795678724
96020,"/** 
 * {@inheritDoc}
 */
@Transient public String getName(){
  return CompSystemI18n.getString(getUniqueId());
}","/** 
 * {@inheritDoc}
 */
@Transient public String getName(){
  return CompSystemI18n.getString(getUniqueId(),true);
}",0.9783549783549784
96021,"/** 
 * Initializes m_map with name strings from xml file and its translations.
 */
@SuppressWarnings(""String_Node_Str"") private void initMap(){
  m_map=new HashMap<String,String>(10007);
  CompSystem compSystem=ComponentBuilder.getInstance().getCompSystem();
  for (Iterator itComp=compSystem.getComponents().iterator(); itComp.hasNext(); ) {
    Component component=(Component)itComp.next();
    String compType=component.getType();
    final List realizedTypes=component.getRealizedTypes();
    if (!component.isVisible() && !realizedTypes.isEmpty()) {
      String i18nType=realizedTypes.get(0).toString();
      if (!m_map.containsKey(compType)) {
        String value=CompSystemI18n.getString(i18nType);
        m_map.put(compType,value);
        m_map.put(value,compType);
      }
    }
 else {
      if (!m_map.containsKey(compType)) {
        String value=CompSystemI18n.getString(compType);
        m_map.put(compType,value);
        m_map.put(value,compType);
      }
    }
    if (component.isConcrete()) {
      ConcreteComponent cc=(ConcreteComponent)component;
      if (cc.hasDefaultMapping()) {
        String logicalName=cc.getDefaultMapping().getLogicalName();
        if (!m_map.containsKey(logicalName)) {
          String value=CompSystemI18n.getString(logicalName);
          m_map.put(logicalName,value);
          m_map.put(value,logicalName);
        }
      }
    }
    final List<Action> actions=component.getActions();
    for (    Action action : actions) {
      String actionName=action.getName();
      if (!m_map.containsKey(actionName)) {
        m_map.put(actionName,CompSystemI18n.getString(actionName));
      }
      List<Param> params=action.getParams();
      for (      Param param : params) {
        String paramName=param.getName();
        if (!m_map.containsKey(paramName)) {
          String value=CompSystemI18n.getString(paramName);
          m_map.put(paramName,value);
          m_map.put(value,paramName);
        }
        String paramType=param.getType();
        if (!m_map.containsKey(paramType)) {
          String value=CompSystemI18n.getString(paramType);
          m_map.put(paramType,value);
          m_map.put(value,paramType);
        }
        Iterator iter=param.valueSetIterator();
        while (iter.hasNext()) {
          ValueSetElement vSet=(ValueSetElement)iter.next();
          String paramValue=vSet.getValue();
          if (!m_map.containsKey(paramValue)) {
            String value=CompSystemI18n.getString(paramValue);
            m_map.put(paramValue,value);
            m_map.put(value,paramValue);
          }
        }
      }
    }
  }
  for (  Object o : compSystem.getEventTypes().keySet()) {
    String value=I18n.getString(o.toString());
    m_map.put(o.toString(),value);
    m_map.put(value,o.toString());
  }
}","/** 
 * Initializes m_map with name strings from xml file and its translations.
 */
@SuppressWarnings(""String_Node_Str"") private void initMap(){
  m_map=new HashMap<String,String>(10007);
  CompSystem compSystem=ComponentBuilder.getInstance().getCompSystem();
  for (Iterator itComp=compSystem.getComponents().iterator(); itComp.hasNext(); ) {
    Component component=(Component)itComp.next();
    String compType=component.getType();
    final List realizedTypes=component.getRealizedTypes();
    if (!component.isVisible() && !realizedTypes.isEmpty()) {
      String i18nType=realizedTypes.get(0).toString();
      if (!m_map.containsKey(compType)) {
        String value=CompSystemI18n.getString(i18nType);
        m_map.put(compType,value);
        m_map.put(value,compType);
      }
    }
 else {
      if (!m_map.containsKey(compType)) {
        String value=CompSystemI18n.getString(compType);
        m_map.put(compType,value);
        m_map.put(value,compType);
      }
    }
    if (component.isConcrete()) {
      ConcreteComponent cc=(ConcreteComponent)component;
      if (cc.hasDefaultMapping()) {
        String logicalName=cc.getDefaultMapping().getLogicalName();
        if (!m_map.containsKey(logicalName)) {
          String value=CompSystemI18n.getString(logicalName);
          m_map.put(logicalName,value);
          m_map.put(value,logicalName);
        }
      }
    }
    final List<Action> actions=component.getActions();
    for (    Action action : actions) {
      String actionName=action.getName();
      if (!m_map.containsKey(actionName)) {
        m_map.put(actionName,CompSystemI18n.getString(actionName));
      }
      List<Param> params=action.getParams();
      for (      Param param : params) {
        String paramName=param.getName();
        if (!m_map.containsKey(paramName)) {
          String value=CompSystemI18n.getString(paramName);
          m_map.put(paramName,value);
          m_map.put(value,paramName);
        }
        String paramType=param.getType();
        if (!m_map.containsKey(paramType)) {
          String value=CompSystemI18n.getString(paramType);
          m_map.put(paramType,value);
          m_map.put(value,paramType);
        }
        Iterator iter=param.valueSetIterator();
        while (iter.hasNext()) {
          ValueSetElement vSet=(ValueSetElement)iter.next();
          String paramValue=vSet.getValue();
          if (!m_map.containsKey(paramValue)) {
            String value=CompSystemI18n.getString(paramValue,true);
            m_map.put(paramValue,value);
            m_map.put(value,paramValue);
          }
        }
      }
    }
  }
  for (  Object o : compSystem.getEventTypes().keySet()) {
    String value=I18n.getString(o.toString());
    m_map.put(o.toString(),value);
    m_map.put(value,o.toString());
  }
}",0.9991088932454107
96022,"/** 
 * {@inheritDoc}
 */
public boolean operate(ITreeTraverserContext<INodePO> ctx,INodePO parent,INodePO node,boolean alreadyVisited){
  if (node instanceof IExecTestCasePO) {
    IExecTestCasePO execTC=(IExecTestCasePO)node;
    boolean hasCompleteTestCaseReferences=!execTC.getProblems().contains(ProblemFactory.createMissingReferencedSpecTestCasesProblem());
    if (hasCompleteTestCaseReferences) {
      for (      ICompNamesPairPO pair : execTC.getCompNamesPairs()) {
        String type=Utils.getComponentType(execTC,pair.getFirstName());
        pair.setType(type);
        if (type == null || StringConstants.EMPTY.equals(type)) {
          problemNoCompTypeForCompNamesPairExists(execTC);
        }
      }
    }
  }
 else   if (node instanceof ICapPO) {
    ICapPO cap=(ICapPO)node;
    if (cap.getMetaComponentType() instanceof InvalidComponent) {
      String message=Messages.Component + StringConstants.COLON + StringConstants.SPACE+ cap.getComponentType();
      log.error(Messages.CouldNotFind + StringConstants.SPACE + message);
      problemCompDoesNotExist(cap);
    }
 else     if (cap.getMetaAction() instanceof InvalidAction) {
      String message=Messages.CouldNotFindAction + StringConstants.SPACE + CompSystemI18n.getString(cap.getActionName())+ StringConstants.NEWLINE+ ""String_Node_Str""+ StringConstants.SPACE+ Messages.Component+ StringConstants.COLON+ StringConstants.SPACE+ cap.getComponentType();
      log.error(message);
      problemActionDoesNotExist(cap);
    }
    for (    Object paramObj : cap.getParameterList()) {
      if (paramObj instanceof InvalidParam) {
        Param param=(Param)paramObj;
        String message=Messages.Component + StringConstants.COLON + StringConstants.SPACE+ cap.getComponentType()+ StringConstants.NEWLINE+ Messages.Action+ StringConstants.COLON+ StringConstants.SPACE+ CompSystemI18n.getString(cap.getActionName())+ StringConstants.NEWLINE+ Messages.Parameter+ StringConstants.COLON+ StringConstants.SPACE+ CompSystemI18n.getString(param.getName());
        log.error(Messages.CouldNotFind + StringConstants.SPACE + message);
        problemParamDoesNotExist(cap);
      }
    }
  }
  return true;
}","/** 
 * {@inheritDoc}
 */
public boolean operate(ITreeTraverserContext<INodePO> ctx,INodePO parent,INodePO node,boolean alreadyVisited){
  if (node instanceof IExecTestCasePO) {
    IExecTestCasePO execTC=(IExecTestCasePO)node;
    boolean hasCompleteTestCaseReferences=!execTC.getProblems().contains(ProblemFactory.createMissingReferencedSpecTestCasesProblem());
    if (hasCompleteTestCaseReferences) {
      for (      ICompNamesPairPO pair : execTC.getCompNamesPairs()) {
        String type=Utils.getComponentType(execTC,pair.getFirstName());
        pair.setType(type);
        if (type == null || StringConstants.EMPTY.equals(type)) {
          problemNoCompTypeForCompNamesPairExists(execTC);
        }
      }
    }
  }
 else   if (node instanceof ICapPO) {
    ICapPO cap=(ICapPO)node;
    if (cap.getMetaComponentType() instanceof InvalidComponent) {
      String message=Messages.Component + StringConstants.COLON + StringConstants.SPACE+ cap.getComponentType();
      log.error(Messages.CouldNotFind + StringConstants.SPACE + message);
      problemCompDoesNotExist(cap);
    }
 else     if (cap.getMetaAction() instanceof InvalidAction) {
      String message=Messages.CouldNotFindAction + StringConstants.SPACE + CompSystemI18n.getString(cap.getActionName(),true)+ StringConstants.NEWLINE+ ""String_Node_Str""+ StringConstants.SPACE+ Messages.Component+ StringConstants.COLON+ StringConstants.SPACE+ cap.getComponentType();
      log.error(message);
      problemActionDoesNotExist(cap);
    }
    for (    Object paramObj : cap.getParameterList()) {
      if (paramObj instanceof InvalidParam) {
        Param param=(Param)paramObj;
        String message=Messages.Component + StringConstants.COLON + StringConstants.SPACE+ cap.getComponentType()+ StringConstants.NEWLINE+ Messages.Action+ StringConstants.COLON+ StringConstants.SPACE+ CompSystemI18n.getString(cap.getActionName(),true)+ StringConstants.NEWLINE+ Messages.Parameter+ StringConstants.COLON+ StringConstants.SPACE+ CompSystemI18n.getString(param.getName(),true);
        log.error(Messages.CouldNotFind + StringConstants.SPACE + message);
        problemParamDoesNotExist(cap);
      }
    }
  }
  return true;
}",0.9965635738831616
96023,"/** 
 * @param cap the corresponding cap
 */
private void problemCompDoesNotExist(ICapPO cap){
  final ITestCasePO tcPO=(ITestCasePO)cap.getParentNode();
  String message=NLS.bind(Messages.ProblemCheckerCompDoesNotExist,new String[]{cap.getName(),tcPO.getName(),CompSystemI18n.getString(cap.getComponentType())});
  m_localProblemsToShow.add(ProblemFactory.createProblemWithMarker(new Status(IStatus.ERROR,Activator.PLUGIN_ID,message),message,cap,ProblemType.REASON_COMP_DOES_NOT_EXIST));
}","/** 
 * @param cap the corresponding cap
 */
private void problemCompDoesNotExist(ICapPO cap){
  final ITestCasePO tcPO=(ITestCasePO)cap.getParentNode();
  String message=NLS.bind(Messages.ProblemCheckerCompDoesNotExist,new String[]{cap.getName(),tcPO.getName(),CompSystemI18n.getString(cap.getComponentType(),true)});
  m_localProblemsToShow.add(ProblemFactory.createProblemWithMarker(new Status(IStatus.ERROR,Activator.PLUGIN_ID,message),message,cap,ProblemType.REASON_COMP_DOES_NOT_EXIST));
}",0.9949238578680204
96024,"/** 
 * @param parameter The Parameter object.
 * @param columnIndex the index of the table column.
 * @return the table entry.
 */
private String getTableCellText(Parameter parameter,int columnIndex){
switch (columnIndex) {
case NAME_TABLE_COLUMN:
    return parameter.getName();
case TYPE_TABLE_COLUMN:
  final String paramType=parameter.getType();
return CompSystemI18n.getString(paramType);
default :
StringBuilder msg=new StringBuilder();
msg.append(Messages.ColumnIndex).append(StringConstants.SPACE).append(StringConstants.APOSTROPHE).append(columnIndex).append(StringConstants.APOSTROPHE).append(StringConstants.SPACE).append(Messages.DoesNotExist).append(StringConstants.EXCLAMATION_MARK);
Assert.notReached(msg.toString());
break;
}
return EMPTY_ENTRY;
}","/** 
 * @param parameter The Parameter object.
 * @param columnIndex the index of the table column.
 * @return the table entry.
 */
private String getTableCellText(Parameter parameter,int columnIndex){
switch (columnIndex) {
case NAME_TABLE_COLUMN:
    return parameter.getName();
case TYPE_TABLE_COLUMN:
  final String paramType=parameter.getType();
return CompSystemI18n.getString(paramType,true);
default :
StringBuilder msg=new StringBuilder();
msg.append(Messages.ColumnIndex).append(StringConstants.SPACE).append(StringConstants.APOSTROPHE).append(columnIndex).append(StringConstants.APOSTROPHE).append(StringConstants.SPACE).append(Messages.DoesNotExist).append(StringConstants.EXCLAMATION_MARK);
Assert.notReached(msg.toString());
break;
}
return EMPTY_ENTRY;
}",0.9967384213959556
96025,"/** 
 * {@inheritDoc}
 */
public String getText(Object element){
  if (element instanceof IParameterInterfacePO) {
    IParameterInterfacePO tdc=(IParameterInterfacePO)element;
    StringBuilder info=new StringBuilder(tdc.getName());
    Iterator iter=tdc.getParameterList().iterator();
    boolean parameterExist=false;
    if (iter.hasNext()) {
      parameterExist=true;
      info.append(OPEN_BRACKED);
    }
    if (iter.hasNext()) {
      while (iter.hasNext()) {
        IParamDescriptionPO descr=(IParamDescriptionPO)iter.next();
        info.append(CompSystemI18n.getString(descr.getType()));
        info.append(StringConstants.COLON);
        info.append(descr.getName());
        if (iter.hasNext()) {
          info.append(SEPARATOR);
        }
      }
    }
    if (parameterExist) {
      info.append(CLOSE_BRACKED);
    }
    return info.toString();
  }
  if (element instanceof ITestDataCategoryPO) {
    return ((ITestDataCategoryPO)element).getName();
  }
  return super.getText(element);
}","/** 
 * {@inheritDoc}
 */
public String getText(Object element){
  if (element instanceof IParameterInterfacePO) {
    IParameterInterfacePO tdc=(IParameterInterfacePO)element;
    StringBuilder info=new StringBuilder(tdc.getName());
    Iterator iter=tdc.getParameterList().iterator();
    boolean parameterExist=false;
    if (iter.hasNext()) {
      parameterExist=true;
      info.append(OPEN_BRACKED);
    }
    if (iter.hasNext()) {
      while (iter.hasNext()) {
        IParamDescriptionPO descr=(IParamDescriptionPO)iter.next();
        info.append(CompSystemI18n.getString(descr.getType(),true));
        info.append(StringConstants.COLON);
        info.append(descr.getName());
        if (iter.hasNext()) {
          info.append(SEPARATOR);
        }
      }
    }
    if (parameterExist) {
      info.append(CLOSE_BRACKED);
    }
    return info.toString();
  }
  if (element instanceof ITestDataCategoryPO) {
    return ((ITestDataCategoryPO)element).getName();
  }
  return super.getText(element);
}",0.9975284231339596
96026,"/** 
 * Logs in error log
 * @param key the I18n-key
 * @param throwable the Throwable
 */
private static void logError(String key,Throwable throwable){
  log.error(""String_Node_Str"" + key,throwable);
}","/** 
 * Logs in error log
 * @param key the I18n-key
 * @param throwable the throwable
 */
private static void logError(String key,Throwable throwable){
  log.error(""String_Node_Str"" + key,throwable);
}",0.995049504950495
96027,"/** 
 * Searches for th evalue of th egiven key in all bundles.<br> throws MissingResourceException if the key was not found. 
 * @param key the key
 * @return the value for the given key
 */
private static String getStringInternal(String key){
  if (key == null) {
    return StringUtils.EMPTY;
  }
  String value=(String)I18N_MAP.get(key);
  if (value != null) {
    return value;
  }
  Iterator bundleIter=PLUGIN_BUNDLES.iterator();
  while (bundleIter.hasNext()) {
    ResourceBundle bundle=(ResourceBundle)bundleIter.next();
    try {
      value=bundle.getString(key);
      I18N_MAP.put(key,value);
      return value;
    }
 catch (    MissingResourceException ex) {
    }
  }
  I18N_MAP.put(key,key);
  throw new MissingResourceException(""String_Node_Str"" + key,CompSystemI18n.class.getName(),key);
}","/** 
 * Searches for the value of the given key in all bundles.<br> throws MissingResourceException if the key was not found. 
 * @param key the key
 * @return the value for the given key
 */
private static String getStringInternal(String key){
  if (key == null) {
    return StringUtils.EMPTY;
  }
  String value=(String)I18N_MAP.get(key);
  if (value != null) {
    return value;
  }
  Iterator bundleIter=PLUGIN_BUNDLES.iterator();
  while (bundleIter.hasNext()) {
    ResourceBundle bundle=(ResourceBundle)bundleIter.next();
    try {
      value=bundle.getString(key);
      I18N_MAP.put(key,value);
      return value;
    }
 catch (    MissingResourceException ex) {
    }
  }
  I18N_MAP.put(key,key);
  throw new MissingResourceException(""String_Node_Str"" + key,CompSystemI18n.class.getName(),key);
}",0.9950556242274412
96028,"/** 
 * Creates a ResourceBundle from the given String.<br> The given String must have the specification of a Propeties-File:<br> key=value<br> key=value<br> ...<br> with a line break (\n) after every value.
 * @param string a String from bundleToString
 */
public static void fromString(String string){
  final ByteArrayInputStream stream=new ByteArrayInputStream(string.getBytes());
  try {
    final PropertyResourceBundle bundle=new PropertyResourceBundle(stream);
    PLUGIN_BUNDLES.clear();
    addResourceBundle(bundle);
  }
 catch (  IOException e) {
    log.error(DebugConstants.ERROR,e);
  }
}","/** 
 * Creates a ResourceBundle from the given String.<br> The given String must have the specification of a properties-file:<br> key=value<br> key=value<br> ...<br> with a line break (\n) after every value.
 * @param string a String from bundleToString
 */
public static void fromString(String string){
  final ByteArrayInputStream stream=new ByteArrayInputStream(string.getBytes());
  try {
    final PropertyResourceBundle bundle=new PropertyResourceBundle(stream);
    PLUGIN_BUNDLES.clear();
    addResourceBundle(bundle);
  }
 catch (  IOException e) {
    log.error(DebugConstants.ERROR,e);
  }
}",0.9892294946147472
96029,"/** 
 * @return a String repesentation of the ResourceBundles to use forfromString(String string)
 * @see fromString(String string)
 */
public static String bundlesToString(){
  final String keyValueSeparator=""String_Node_Str"";
  final String lineBreak=""String_Node_Str"";
  final StringBuffer entries=new StringBuffer();
  for (Iterator bundlesIt=PLUGIN_BUNDLES.iterator(); bundlesIt.hasNext(); ) {
    final ResourceBundle bundle=(ResourceBundle)bundlesIt.next();
    for (Enumeration keys=bundle.getKeys(); keys.hasMoreElements(); ) {
      final String key=String.valueOf(keys.nextElement());
      final String value=bundle.getString(key);
      entries.append(key).append(keyValueSeparator).append(value).append(lineBreak);
    }
  }
  return entries.toString();
}","/** 
 * @return a String representation of the ResourceBundles to use forfromString(String string)
 * @see fromString(String string)
 */
public static String bundlesToString(){
  final String keyValueSeparator=""String_Node_Str"";
  final String lineBreak=""String_Node_Str"";
  final StringBuffer entries=new StringBuffer();
  for (Iterator bundlesIt=PLUGIN_BUNDLES.iterator(); bundlesIt.hasNext(); ) {
    final ResourceBundle bundle=(ResourceBundle)bundlesIt.next();
    for (Enumeration keys=bundle.getKeys(); keys.hasMoreElements(); ) {
      final String key=String.valueOf(keys.nextElement());
      final String value=bundle.getString(key);
      entries.append(key).append(keyValueSeparator).append(value).append(lineBreak);
    }
  }
  return entries.toString();
}",0.9993502274204028
96030,"/** 
 * Returns the components with the specified typeName.
 * @param typeName Name of the specified component (the I18N key).
 * @return the specified Components.
 */
public List findComponents(String typeName){
  Validate.notNull(typeName);
  List comps=new LinkedList();
  if (StringConstants.EMPTY.equals(typeName)) {
    if (log.isDebugEnabled()) {
      log.debug(""String_Node_Str"");
    }
    comps.add(new InvalidComponent());
    return comps;
  }
  Iterator it=getComponents().iterator();
  while (it.hasNext()) {
    Component comp=(Component)it.next();
    if (comp instanceof ConcreteComponent) {
      ConcreteComponent ccomp=(ConcreteComponent)comp;
      if (typeName.equals(ccomp.getComponentClass())) {
        comps.add(ccomp);
      }
    }
  }
  if (!(comps.isEmpty())) {
    return comps;
  }
  if (log.isDebugEnabled()) {
    String translatedName=CompSystemI18n.getString(typeName);
    String message=""String_Node_Str"" + translatedName + ""String_Node_Str"";
    log.debug(message);
  }
  comps.add(new InvalidComponent());
  return comps;
}","/** 
 * Returns the components with the specified typeName.
 * @param typeName Name of the specified component (the I18N key).
 * @return the specified Components.
 */
public List findComponents(String typeName){
  Validate.notNull(typeName);
  List comps=new LinkedList();
  if (StringConstants.EMPTY.equals(typeName)) {
    if (log.isDebugEnabled()) {
      log.debug(""String_Node_Str"");
    }
    comps.add(new InvalidComponent());
    return comps;
  }
  Iterator it=getComponents().iterator();
  while (it.hasNext()) {
    Component comp=(Component)it.next();
    if (comp instanceof ConcreteComponent) {
      ConcreteComponent ccomp=(ConcreteComponent)comp;
      if (typeName.equals(ccomp.getComponentClass())) {
        comps.add(ccomp);
      }
    }
  }
  if (!(comps.isEmpty())) {
    return comps;
  }
  if (log.isDebugEnabled()) {
    String translatedName=CompSystemI18n.getString(typeName,true);
    String message=""String_Node_Str"" + translatedName + ""String_Node_Str"";
    log.debug(message);
  }
  comps.add(new InvalidComponent());
  return comps;
}",0.9976558837318332
96031,"/** 
 * Returns the component with the specified typeName.
 * @param typeName Name of the specified component (the I18N key).
 * @return the specified Component.
 */
public Component findComponent(String typeName){
  Validate.notNull(typeName);
  if (StringConstants.EMPTY.equals(typeName)) {
    if (log.isDebugEnabled()) {
      log.debug(""String_Node_Str"");
    }
    return new InvalidComponent();
  }
  Component comp=(Component)m_componentsByType.get(typeName);
  if (comp != null) {
    return comp;
  }
  if (log.isDebugEnabled()) {
    String translatedName=CompSystemI18n.getString(typeName);
    String message=""String_Node_Str"" + translatedName + ""String_Node_Str"";
    log.debug(message);
  }
  return new InvalidComponent();
}","/** 
 * Returns the component with the specified typeName.
 * @param typeName Name of the specified component (the I18N key).
 * @return the specified Component.
 */
public Component findComponent(String typeName){
  Validate.notNull(typeName);
  if (StringConstants.EMPTY.equals(typeName)) {
    if (log.isDebugEnabled()) {
      log.debug(""String_Node_Str"");
    }
    return new InvalidComponent();
  }
  Component comp=(Component)m_componentsByType.get(typeName);
  if (comp != null) {
    return comp;
  }
  if (log.isDebugEnabled()) {
    String translatedName=CompSystemI18n.getString(typeName,true);
    String message=""String_Node_Str"" + translatedName + ""String_Node_Str"";
    log.debug(message);
  }
  return new InvalidComponent();
}",0.9966329966329966
96032,"/** 
 * Creates the instance of the persistent object which is defined by the XML element used as prameter. The method generates all dependend objects as well.
 * @param xml Abstraction of the XML element (see Apache XML Beans)
 * @param assignNewGuid <code>true</code> if the test suiteshould be assigned a new GUID. Otherwise  <code>false</code>.
 * @return a persistent object generated from the information in the XMLelement
 */
private ITestJobPO createTestJob(TestJobs xml,boolean assignNewGuid){
  ITestJobPO tj;
  if (xml.getGUID() != null && !assignNewGuid) {
    tj=NodeMaker.createTestJobPO(xml.getName(),xml.getGUID());
  }
 else {
    tj=NodeMaker.createTestJobPO(xml.getName());
  }
  tj.setComment(xml.getComment());
  for (  RefTestSuite xmlRts : xml.getRefTestSuiteList()) {
    IRefTestSuitePO rts;
    if (assignNewGuid) {
      String testSuiteGuid=m_oldToNewGuids.get(xmlRts.getTsGuid());
      if (testSuiteGuid == null) {
        log.error(""String_Node_Str"" + xmlRts.getTsGuid());
      }
      rts=NodeMaker.createRefTestSuitePO(xmlRts.getName(),testSuiteGuid,xmlRts.getAutId());
    }
 else {
      rts=NodeMaker.createRefTestSuitePO(xmlRts.getName(),xmlRts.getGUID(),xmlRts.getTsGuid(),xmlRts.getAutId());
    }
    rts.setComment(xmlRts.getComment());
    tj.addNode(rts);
  }
  return tj;
}","/** 
 * Creates the instance of the persistent object which is defined by the XML element used as prameter. The method generates all dependend objects as well.
 * @param xml Abstraction of the XML element (see Apache XML Beans)
 * @param assignNewGuid <code>true</code> if the test suiteshould be assigned a new GUID. Otherwise  <code>false</code>.
 * @return a persistent object generated from the information in the XMLelement
 * @throws InvalidDataException if some data is invalid when constructingan object. This should not happen for exported project, but may happen when someone generates XML project description outside of GUIdancer.
 */
private ITestJobPO createTestJob(TestJobs xml,boolean assignNewGuid) throws InvalidDataException {
  ITestJobPO tj;
  if (xml.getGUID() != null && !assignNewGuid) {
    tj=NodeMaker.createTestJobPO(xml.getName(),xml.getGUID());
  }
 else {
    tj=NodeMaker.createTestJobPO(xml.getName());
  }
  tj.setComment(xml.getComment());
  for (  RefTestSuite xmlRts : xml.getRefTestSuiteList()) {
    IRefTestSuitePO rts;
    if (assignNewGuid) {
      String testSuiteGuid=m_oldToNewGuids.get(xmlRts.getTsGuid());
      if (testSuiteGuid == null) {
        throw new InvalidDataException(""String_Node_Str"" + xmlRts.getTsGuid(),MessageIDs.E_IMPORT_PROJECT_XML_FAILED);
      }
      rts=NodeMaker.createRefTestSuitePO(xmlRts.getName(),testSuiteGuid,xmlRts.getAutId());
    }
 else {
      rts=NodeMaker.createRefTestSuitePO(xmlRts.getName(),xmlRts.getGUID(),xmlRts.getTsGuid(),xmlRts.getAutId());
    }
    rts.setComment(xmlRts.getComment());
    tj.addNode(rts);
  }
  return tj;
}",0.8910823689584751
96033,"/** 
 * @param proj the project po
 * @param xml the project xml
 * @param assignNewGuid flag to indicate whether new ids should be assigned
 * @throws InterruptedException in case of interruption
 * @throws InvalidDataException in case of invalid data
 */
private void handleTestSuitesAndTestJobsAndCategories(IProjectPO proj,Project xml,boolean assignNewGuid) throws InterruptedException, InvalidDataException {
  for (  ExecCategory catXml : xml.getExecCategoriesList()) {
    checkCancel();
    List<IExecPersistable> tsAndCats=createListOfCategoriesAndTestsuites(proj,catXml,assignNewGuid);
    for (    IExecPersistable exec : tsAndCats) {
      proj.getExecObjCont().addExecObject(exec);
    }
    List<IExecPersistable> tjs=createListOfTestJobs(catXml,assignNewGuid);
    for (    IExecPersistable exec : tjs) {
      proj.getExecObjCont().addExecObject(exec);
    }
  }
}","/** 
 * @param proj the project po
 * @param xml the project xml
 * @param assignNewGuid flag to indicate whether new ids should be assigned
 * @throws InterruptedException in case of interruption
 * @throws InvalidDataException in case of invalid data
 */
private void handleTestSuitesAndTestJobsAndCategories(IProjectPO proj,Project xml,boolean assignNewGuid) throws InterruptedException, InvalidDataException {
  for (  ExecCategory catXml : xml.getExecCategoriesList()) {
    checkCancel();
    List<IExecPersistable> tsAndCats=createListOfCategoriesAndTestsuites(proj,catXml,assignNewGuid);
    for (    IExecPersistable exec : tsAndCats) {
      proj.getExecObjCont().addExecObject(exec);
    }
  }
  for (  ExecCategory catXml : xml.getExecCategoriesList()) {
    checkCancel();
    List<IExecPersistable> tjs=createListOfTestJobs(catXml,assignNewGuid);
    for (    IExecPersistable exec : tjs) {
      proj.getExecObjCont().addExecObject(exec);
    }
  }
}",0.9539295392953928
96034,"/** 
 * Handle ""old""-XML data structure for pre 1.2 datamodel
 * @param proj the project
 * @param xml the project xml
 * @param attrDescSession the attribute description
 * @param assignNewGuid whether new GUIDs should be assigned or not
 * @throws InterruptedException in case of an interruption
 */
private void handleOldTestSuitesAndTestJobs(IProjectPO proj,Project xml,EntityManager attrDescSession,boolean assignNewGuid) throws InterruptedException {
  if (!xml.getTestsuiteList().isEmpty()) {
    ICategoryPO catTS=NodeMaker.createCategoryPO(""String_Node_Str"");
    for (    TestSuite tsXml : xml.getTestsuiteList()) {
      checkCancel();
      ITestSuitePO tsPO=createTestSuite(proj,tsXml,assignNewGuid);
      catTS.addNode(tsPO);
    }
    proj.getExecObjCont().addExecObject(catTS);
  }
  if (!xml.getTestsuiteList().isEmpty()) {
    ICategoryPO catTJ=NodeMaker.createCategoryPO(""String_Node_Str"");
    for (    TestJobs tjXml : xml.getTestJobsList()) {
      checkCancel();
      catTJ.addNode(createTestJob(tjXml,assignNewGuid));
    }
    proj.getExecObjCont().addExecObject(catTJ);
  }
}","/** 
 * Handle ""old""-XML data structure for pre 1.2 datamodel
 * @param proj the project
 * @param xml the project xml
 * @param attrDescSession the attribute description
 * @param assignNewGuid whether new GUIDs should be assigned or not
 * @throws InterruptedException in case of an interruption
 * @throws InvalidDataException if some data is invalid when constructing an object. This should not happen for exported project, but may happen when someone generates XML project description outside of GUIdancer.
 */
private void handleOldTestSuitesAndTestJobs(IProjectPO proj,Project xml,EntityManager attrDescSession,boolean assignNewGuid) throws InterruptedException, InvalidDataException {
  if (!xml.getTestsuiteList().isEmpty()) {
    ICategoryPO catTS=NodeMaker.createCategoryPO(""String_Node_Str"");
    for (    TestSuite tsXml : xml.getTestsuiteList()) {
      checkCancel();
      ITestSuitePO tsPO=createTestSuite(proj,tsXml,assignNewGuid);
      catTS.addNode(tsPO);
    }
    proj.getExecObjCont().addExecObject(catTS);
  }
  if (!xml.getTestsuiteList().isEmpty()) {
    ICategoryPO catTJ=NodeMaker.createCategoryPO(""String_Node_Str"");
    for (    TestJobs tjXml : xml.getTestJobsList()) {
      checkCancel();
      catTJ.addNode(createTestJob(tjXml,assignNewGuid));
    }
    proj.getExecObjCont().addExecObject(catTJ);
  }
}",0.9033579033579032
96035,"/** 
 * Adds the parameters from the given Test Step to the given result node.
 * @param testStep The Test Step from which to copy the parameter info.
 * @param resultNode The result node to which the parameter info willbe copied.
 */
private void addParameters(ICapPO testStep,TestResultNode resultNode){
  List<IParamDescriptionPO> parameterList=testStep.getParameterList();
  String value=null;
  for (  IParamDescriptionPO desc : parameterList) {
    ITDManager tdManager=null;
    try {
      tdManager=m_externalTestDataBP.getExternalCheckedTDManager(testStep);
    }
 catch (    JBException e) {
      log.error(Messages.TestDataNotAvailable + StringConstants.DOT,e);
    }
    TestExecution te=TestExecution.getInstance();
    List<ExecObject> stackList=new ArrayList<ExecObject>(te.getTrav().getExecStackAsList());
    int dataSetIndex=0;
    if (tdManager.findColumnForParam(desc.getUniqueId()) == -1) {
      IParameterInterfacePO referencedDataCube=testStep.getReferencedDataCube();
      if (referencedDataCube != null) {
        desc=referencedDataCube.getParameterForName(desc.getName());
      }
    }
    ITestDataPO date=tdManager.getCell(dataSetIndex,desc);
    ParamValueConverter conv=new ModelParamValueConverter(date.getValue(te.getLocale()),testStep,te.getLocale(),desc);
    try {
      value=conv.getExecutionString(stackList,te.getLocale());
    }
 catch (    InvalidDataException e) {
      log.error(e.getMessage());
      value=MessageIDs.getMessageObject(e.getErrorId()).getMessage(new Object[]{});
    }
    resultNode.addParameter(new TestResultParameter(desc.getUniqueId(),desc.getType(),StringUtils.defaultString(value)));
  }
}","/** 
 * Adds the parameters from the given Test Step to the given result node.
 * @param testStep The Test Step from which to copy the parameter info.
 * @param resultNode The result node to which the parameter info willbe copied.
 */
private void addParameters(ICapPO testStep,TestResultNode resultNode){
  List<IParamDescriptionPO> parameterList=testStep.getParameterList();
  String value=null;
  for (  IParamDescriptionPO desc : parameterList) {
    ITDManager tdManager=null;
    try {
      tdManager=m_externalTestDataBP.getExternalCheckedTDManager(testStep);
    }
 catch (    JBException e) {
      log.error(Messages.TestDataNotAvailable + StringConstants.DOT,e);
    }
    TestExecution te=TestExecution.getInstance();
    List<ExecObject> stackList=new ArrayList<ExecObject>(te.getTrav().getExecStackAsList());
    int dataSetIndex=0;
    if (tdManager.findColumnForParam(desc.getUniqueId()) == -1) {
      IParameterInterfacePO referencedDataCube=testStep.getReferencedDataCube();
      if (referencedDataCube != null) {
        desc=referencedDataCube.getParameterForName(desc.getName());
      }
    }
    ITestDataPO date=tdManager.getCell(dataSetIndex,desc);
    ParamValueConverter conv=new ModelParamValueConverter(date.getValue(te.getLocale()),testStep,te.getLocale(),desc);
    try {
      value=conv.getExecutionString(stackList,te.getLocale());
    }
 catch (    InvalidDataException e) {
      log.error(e.getMessage());
      value=MessageIDs.getMessageObject(e.getErrorId()).getMessage(new Object[]{});
    }
    resultNode.addParameter(new TestResultParameter(CompSystemI18n.getString(desc.getUniqueId()),CompSystemI18n.getString(desc.getType()),StringUtils.defaultString(value)));
  }
}",0.9846062759029012
96036,"/** 
 * Implementation of the mouse move. The mouse is moved into the graphics component.
 * @param graphicsComponent The component to move to
 * @param constraints The more specific constraints. Use this, for example when you want the click point to be relative to a part  of the component (e.g. tree node, table cell, etc)   rather than the overall component itself. May be   <code>null</code>.
 * @param xPos xPos in component           
 * @param yPos yPos in component
 * @param xAbsolute true if x-position should be absolute  
 * @param yAbsolute true if y-position should be absolute  
 * @param clickOptions The click options 
 * @throws StepExecutionException If the click delay is interrupted or the  event confirmation receives a timeout. 
 */
private void moveImpl(Object graphicsComponent,final Rectangle constraints,final int xPos,final boolean xAbsolute,final int yPos,final boolean yAbsolute,ClickOptions clickOptions) throws StepExecutionException {
  if (clickOptions.isScrollToVisible()) {
    ensureComponentVisible((Component)graphicsComponent,constraints);
    m_eventFlusher.flush();
  }
  Component component=(Component)graphicsComponent;
  Rectangle bounds=null;
  bounds=new Rectangle(getLocation(component,new Point(0,0)));
  bounds.width=component.getWidth();
  bounds.height=component.getHeight();
  if (constraints != null) {
    bounds.x+=constraints.x;
    bounds.y+=constraints.y;
    bounds.height=constraints.height;
    bounds.width=constraints.width;
  }
  Point p=PointUtil.calculateAwtPointToGo(xPos,xAbsolute,yPos,yAbsolute,bounds);
  if (isMouseMoveRequired(p)) {
    if (log.isDebugEnabled()) {
      log.debug(""String_Node_Str"" + p);
    }
    InterceptorOptions options=new InterceptorOptions(new long[]{AWTEvent.MOUSE_MOTION_EVENT_MASK});
    IRobotEventConfirmer confirmer=m_interceptor.intercept(options);
    Point startpoint=m_mouseMotionTracker.getLastMousePointOnScreen();
    if (startpoint == null) {
      Component root=SwingUtilities.getRoot(component);
      Component c=(root != null) ? root : component;
      startpoint=getLocation(c,null);
    }
    Point[] mouseMove=MouseMovementStrategy.getMovementPath(startpoint,p,true);
    for (int i=0; i < mouseMove.length; i++) {
      m_robot.mouseMove(mouseMove[i].x,mouseMove[i].y);
      m_eventFlusher.flush();
    }
    if (clickOptions.isConfirmClick()) {
      confirmer.waitToConfirm(component,new MouseMovedAwtEventMatcher());
    }
  }
}","/** 
 * Implementation of the mouse move. The mouse is moved into the graphics component.
 * @param graphicsComponent The component to move to
 * @param constraints The more specific constraints. Use this, for example when you want the click point to be relative to a part  of the component (e.g. tree node, table cell, etc)   rather than the overall component itself. May be   <code>null</code>.
 * @param xPos xPos in component           
 * @param yPos yPos in component
 * @param xAbsolute true if x-position should be absolute  
 * @param yAbsolute true if y-position should be absolute  
 * @param clickOptions The click options 
 * @throws StepExecutionException If the click delay is interrupted or the  event confirmation receives a timeout. 
 */
private void moveImpl(Object graphicsComponent,final Rectangle constraints,final int xPos,final boolean xAbsolute,final int yPos,final boolean yAbsolute,ClickOptions clickOptions) throws StepExecutionException {
  if (clickOptions.isScrollToVisible()) {
    ensureComponentVisible((Component)graphicsComponent,constraints);
    m_eventFlusher.flush();
  }
  Component component=(Component)graphicsComponent;
  Rectangle bounds=null;
  bounds=new Rectangle(getLocation(component,new Point(0,0)));
  bounds.width=component.getWidth();
  bounds.height=component.getHeight();
  if (constraints != null) {
    bounds.x+=constraints.x;
    bounds.y+=constraints.y;
    bounds.height=constraints.height;
    bounds.width=constraints.width;
  }
  Point p=PointUtil.calculateAwtPointToGo(xPos,xAbsolute,yPos,yAbsolute,bounds);
  if (isMouseMoveRequired(p)) {
    if (log.isDebugEnabled()) {
      log.debug(""String_Node_Str"" + p);
    }
    IRobotEventConfirmer confirmer=null;
    if (clickOptions.isConfirmClick()) {
      InterceptorOptions options=new InterceptorOptions(new long[]{AWTEvent.MOUSE_MOTION_EVENT_MASK});
      confirmer=m_interceptor.intercept(options);
    }
    Point startpoint=m_mouseMotionTracker.getLastMousePointOnScreen();
    if (startpoint == null) {
      Component root=SwingUtilities.getRoot(component);
      Component c=(root != null) ? root : component;
      startpoint=getLocation(c,null);
    }
    Point[] mouseMove=MouseMovementStrategy.getMovementPath(startpoint,p,true);
    for (int i=0; i < mouseMove.length; i++) {
      m_robot.mouseMove(mouseMove[i].x,mouseMove[i].y);
      m_eventFlusher.flush();
    }
    if (confirmer != null) {
      confirmer.waitToConfirm(component,new MouseMovedAwtEventMatcher());
    }
  }
}",0.9687814702920444
96037,"/** 
 * Clicks at the current mouse position.
 * @param graphicsComponent The component used for confirming the click.
 * @param clickOptions Configuration for the click.
 */
private void clickImpl(Object graphicsComponent,ClickOptions clickOptions){
  int buttonMask=getButtonMask(clickOptions.getMouseButton());
  int clickCount=clickOptions.getClickCount();
  int[] modifierMask=getModifierMask(clickOptions.getClickModifier());
  if (clickCount > 0) {
    InterceptorOptions options=new InterceptorOptions(new long[]{AWTEvent.MOUSE_EVENT_MASK});
    IRobotEventConfirmer confirmer=m_interceptor.intercept(options);
    try {
      pressModifier(modifierMask);
      RobotTiming.sleepPreClickDelay();
      for (int i=0; i < clickCount; i++) {
        m_robot.mousePress(buttonMask);
        RobotTiming.sleepPostMouseDownDelay();
        m_eventFlusher.flush();
        m_robot.mouseRelease(buttonMask);
        RobotTiming.sleepPostMouseUpDelay();
        m_eventFlusher.flush();
      }
      if (clickOptions.isConfirmClick()) {
        confirmer.waitToConfirm(graphicsComponent,new ClickAwtEventMatcher(clickOptions));
      }
    }
  finally {
      releaseModifier(modifierMask);
    }
  }
}","/** 
 * Clicks at the current mouse position.
 * @param graphicsComponent The component used for confirming the click.
 * @param clickOptions Configuration for the click.
 */
private void clickImpl(Object graphicsComponent,ClickOptions clickOptions){
  int buttonMask=getButtonMask(clickOptions.getMouseButton());
  int clickCount=clickOptions.getClickCount();
  int[] modifierMask=getModifierMask(clickOptions.getClickModifier());
  if (clickCount > 0) {
    IRobotEventConfirmer confirmer=null;
    if (clickOptions.isConfirmClick()) {
      InterceptorOptions options=new InterceptorOptions(new long[]{AWTEvent.MOUSE_EVENT_MASK});
      confirmer=m_interceptor.intercept(options);
    }
    try {
      pressModifier(modifierMask);
      RobotTiming.sleepPreClickDelay();
      for (int i=0; i < clickCount; i++) {
        m_robot.mousePress(buttonMask);
        RobotTiming.sleepPostMouseDownDelay();
        m_eventFlusher.flush();
        m_robot.mouseRelease(buttonMask);
        RobotTiming.sleepPostMouseUpDelay();
        m_eventFlusher.flush();
      }
      if (confirmer != null) {
        confirmer.waitToConfirm(graphicsComponent,new ClickAwtEventMatcher(clickOptions));
      }
    }
  finally {
      releaseModifier(modifierMask);
    }
  }
}",0.4949207639171069
96038,"/** 
 * Enables or disables the confirmer. If the confirmer is enabled, the AWT listener is added to the AWT event queue so that the confirmer starts storing events of the configuered class of events. If it is disabled, the listener is removed from the AWT event queue.
 * @param enabled <code>true</code> or <code>false</code>.
 */
void setEnabled(boolean enabled){
  m_enabled=enabled;
  m_eventList.clear();
  if (enabled) {
    for (int i=0; i < m_options.getEventMask().length; i++) {
      Toolkit.getDefaultToolkit().addAWTEventListener(this,m_options.getEventMask()[i]);
    }
  }
 else {
    Toolkit.getDefaultToolkit().removeAWTEventListener(this);
  }
}","/** 
 * Enables or disables the confirmer. If the confirmer is enabled, the AWT listener is added to the AWT event queue so that the confirmer starts storing events of the configured class of events. If it is disabled, the listener is removed from the AWT event queue.
 * @param enabled <code>true</code> or <code>false</code>.
 */
void setEnabled(boolean enabled){
  m_enabled=enabled;
  m_eventList.clear();
  if (enabled) {
    for (int i=0; i < m_options.getEventMask().length; i++) {
      Toolkit.getDefaultToolkit().addAWTEventListener(this,m_options.getEventMask()[i]);
    }
  }
 else {
    Toolkit.getDefaultToolkit().removeAWTEventListener(this);
  }
}",0.9992464204973625
96039,"/** 
 * Clicks at the current mouse position.
 * @param graphicsComponent The component used for confirming the click.
 * @param clickOptions Configuration for the click.
 */
private void clickImpl(Object graphicsComponent,ClickOptions clickOptions){
  int buttonMask=getButtonMask(clickOptions.getMouseButton());
  int clickCount=clickOptions.getClickCount();
  int[] modifierMask=getModifierMask(clickOptions.getClickModifier());
  if (clickCount > 0) {
    final InterceptorOptions options=new InterceptorOptions(new long[]{SWT.MouseUp,SWT.MouseDown});
    final IEventMatcher matcher=new ClickSwtEventMatcher(clickOptions);
    final IRobotEventConfirmer confirmer=m_interceptor.intercept(options);
    try {
      pressModifier(modifierMask);
      RobotTiming.sleepPreClickDelay();
      for (int i=0; i < clickCount; i++) {
        m_robot.mousePress(buttonMask);
        RobotTiming.sleepPostMouseDownDelay();
        m_robot.mouseRelease(buttonMask);
        RobotTiming.sleepPostMouseUpDelay();
      }
      if (clickOptions.isConfirmClick()) {
        try {
          confirmer.waitToConfirm(graphicsComponent,matcher);
        }
 catch (        RobotException re) {
          StringBuffer sb=new StringBuffer(""String_Node_Str"");
          logRobotException(graphicsComponent,re,sb);
          throw re;
        }
      }
    }
  finally {
      releaseModifier(modifierMask);
    }
  }
}","/** 
 * Clicks at the current mouse position.
 * @param graphicsComponent The component used for confirming the click.
 * @param clickOptions Configuration for the click.
 */
private void clickImpl(Object graphicsComponent,ClickOptions clickOptions){
  int buttonMask=getButtonMask(clickOptions.getMouseButton());
  int clickCount=clickOptions.getClickCount();
  int[] modifierMask=getModifierMask(clickOptions.getClickModifier());
  if (clickCount > 0) {
    final IEventMatcher matcher=new ClickSwtEventMatcher(clickOptions);
    IRobotEventConfirmer confirmer=null;
    if (clickOptions.isConfirmClick()) {
      final InterceptorOptions options=new InterceptorOptions(new long[]{SWT.MouseUp,SWT.MouseDown});
      confirmer=m_interceptor.intercept(options);
    }
    try {
      pressModifier(modifierMask);
      RobotTiming.sleepPreClickDelay();
      for (int i=0; i < clickCount; i++) {
        m_robot.mousePress(buttonMask);
        RobotTiming.sleepPostMouseDownDelay();
        m_robot.mouseRelease(buttonMask);
        RobotTiming.sleepPostMouseUpDelay();
      }
      if (confirmer != null) {
        try {
          confirmer.waitToConfirm(graphicsComponent,matcher);
        }
 catch (        RobotException re) {
          StringBuffer sb=new StringBuffer(""String_Node_Str"");
          logRobotException(graphicsComponent,re,sb);
          throw re;
        }
      }
    }
  finally {
      releaseModifier(modifierMask);
    }
  }
}",0.8874868559411146
96040,"/** 
 * {@inheritDoc}
 */
public Object executeImpl(ExecutionEvent event){
  ProjectDialog.ProjectData project=null;
  boolean cancelPressed=false;
  ProjectDialog dialog=null;
  List<IProjectPO> projList=checkAllAvailableProjects();
  if (!projList.isEmpty()) {
    if (ProjectUIBP.getInstance().shouldPerformAutoProjectLoad()) {
      project=ProjectUIBP.getMostRecentProjectData();
    }
 else {
      dialog=openProjectOpenDialog(projList);
      if (dialog.getReturnCode() == Window.CANCEL) {
        cancelPressed=true;
      }
 else {
        project=dialog.getSelection();
      }
    }
    if (!cancelPressed) {
      loadProject(project,projList);
    }
  }
  return null;
}","/** 
 * {@inheritDoc}
 */
public Object executeImpl(ExecutionEvent event){
  ProjectDialog.ProjectData project=null;
  boolean cancelPressed=false;
  ProjectDialog dialog=null;
  List<IProjectPO> projList=checkAllAvailableProjects();
  if (!projList.isEmpty()) {
    if (ProjectUIBP.getInstance().shouldPerformAutoProjectLoad()) {
      project=ProjectUIBP.getMostRecentProjectData();
    }
 else {
      dialog=openProjectOpenDialog(projList);
      if (dialog == null || dialog.getReturnCode() == Window.CANCEL) {
        cancelPressed=true;
      }
 else {
        project=dialog.getSelection();
      }
    }
    if (!cancelPressed) {
      loadProject(project,projList);
    }
  }
  return null;
}",0.987012987012987
96041,"/** 
 * sleep the pre show popup delay
 */
public static final void sleepPostShowSubMenuItem(){
  delay(POST_SHOW_SUB_MENU_DELAY);
}","/** 
 * sleep the post show popup delay
 * @param lookAndFeelSpecific a look and feel specific delay
 */
public static final void sleepPostShowSubMenuItem(int lookAndFeelSpecific){
  delay(lookAndFeelSpecific);
  delay(POST_SHOW_SUB_MENU_DELAY);
}",0.633245382585752
96042,"/** 
 * Tries to navigate through the menu to the specified menu item.
 * @param robot robot
 * @param item the menu item
 * @param path the path where to navigate in the menu.
 * @param idx the current index in the path
 * @return the component at the end of the specified path.
 */
private static JMenuItem navigateToMenuItem(IRobot robot,JMenuItem item,int[] path,int idx){
  if (path.length == idx) {
    return item;
  }
  if (!(item instanceof JMenu)) {
    throw new StepExecutionException(""String_Node_Str"",EventFactory.createActionError());
  }
  clickMenuItem(robot,item);
  RobotTiming.sleepPostShowSubMenuItem();
  JMenuItem next=findMenuItem((JMenu)item,path[idx]);
  return navigateToMenuItem(robot,next,path,idx + 1);
}","/** 
 * Tries to navigate through the menu to the specified menu item.
 * @param robot robot
 * @param item the menu item
 * @param path the path where to navigate in the menu.
 * @param idx the current index in the path
 * @return the component at the end of the specified path.
 */
private static JMenuItem navigateToMenuItem(IRobot robot,JMenuItem item,int[] path,int idx){
  if (path.length == idx) {
    return item;
  }
  if (!(item instanceof JMenu)) {
    throw new StepExecutionException(""String_Node_Str"",EventFactory.createActionError());
  }
  JMenu menu=(JMenu)item;
  clickMenuItem(robot,menu);
  RobotTiming.sleepPostShowSubMenuItem(menu.getDelay());
  JMenuItem next=findMenuItem(menu,path[idx]);
  return navigateToMenuItem(robot,next,path,idx + 1);
}",0.9573901464713716
96043,"/** 
 * Returns an absolute (resolved) path of the given Plugin and the given Plugin-relative path.
 * @param plugin the Plugin
 * @param pluginRelPath the relative path
 * @return an absolute (resolved) path or null if the path could not be resolved.
 */
public static URL getURL(Plugin plugin,String pluginRelPath){
  URL unresolvedUrl=plugin.getBundle().getEntry(pluginRelPath);
  URL fileURL=null;
  try {
    fileURL=FileLocator.toFileURL(unresolvedUrl);
  }
 catch (  IOException e) {
    StringBuilder logMsg=new StringBuilder();
    logMsg.append(Messages.CouldNotResolvePath);
    logMsg.append(StringConstants.COLON);
    logMsg.append(StringConstants.SPACE);
    logMsg.append(pluginRelPath);
    logMsg.append(StringConstants.SPACE);
    logMsg.append(Messages.OfPlugin);
    logMsg.append(StringConstants.COLON);
    logMsg.append(StringConstants.SPACE);
    LOG.error(logMsg.toString(),e);
  }
  return fileURL;
}","/** 
 * Returns a (resolved) URL of the given Plugin and the given Plugin-relative path.
 * @param plugin the Plugin
 * @param pluginRelPath the relative path
 * @return a (resolved) URL or null if the path could not beresolved.
 */
public static URL getURL(Plugin plugin,String pluginRelPath){
  URL unresolvedUrl=plugin.getBundle().getEntry(pluginRelPath);
  URL fileURL=null;
  try {
    fileURL=FileLocator.resolve(unresolvedUrl);
  }
 catch (  IOException e) {
    StringBuilder logMsg=new StringBuilder();
    logMsg.append(Messages.CouldNotResolvePath);
    logMsg.append(StringConstants.COLON);
    logMsg.append(StringConstants.SPACE);
    logMsg.append(pluginRelPath);
    logMsg.append(StringConstants.SPACE);
    logMsg.append(Messages.OfPlugin);
    logMsg.append(StringConstants.COLON);
    logMsg.append(StringConstants.SPACE);
    LOG.error(logMsg.toString(),e);
  }
  return fileURL;
}",0.7588846364133406
96044,"/** 
 * tries to move all selected node into the target node. Operates on the GUI model and on the INodePO model 
 * @param target GuiNode
 * @param nodes List <INodePO>
 */
protected static void doMove(List<INodePO> nodes,IPersistentObject target) throws PMException, ProjectDeletedException {
  List<AbstractCmdHandle> cmds=new ArrayList<AbstractCmdHandle>();
  for (  INodePO nodeToMove : nodes) {
    INodePO oldParent=nodeToMove.getParentNode();
    cmds.add(new MoveNodeHandle(nodeToMove,oldParent,target));
  }
  MultipleNodePM.getInstance().executeCommands(cmds);
}","/** 
 * tries to move all selected node into the target node. Operates on the GUI model and on the INodePO model 
 * @param target GuiNode
 * @param nodes List <INodePO>
 */
protected static void doMove(List<INodePO> nodes,IPersistentObject target) throws PMException, ProjectDeletedException {
  List<AbstractCmdHandle> cmds=new ArrayList<AbstractCmdHandle>();
  List<DataChangedEvent> eventList=new ArrayList<DataChangedEvent>();
  for (  INodePO nodeToMove : nodes) {
    INodePO oldParent=nodeToMove.getParentNode();
    cmds.add(new MoveNodeHandle(nodeToMove,oldParent,target));
    eventList.add(new DataChangedEvent(target,DataState.StructureModified,UpdateState.notInEditor));
    eventList.add(new DataChangedEvent(oldParent,DataState.StructureModified,UpdateState.notInEditor));
  }
  MultipleNodePM.getInstance().executeCommands(cmds);
  DataEventDispatcher.getInstance().fireDataChangedListener(eventList.toArray(new DataChangedEvent[0]));
}",0.7509829619921363
96045,"/** 
 * Performs the moving.
 * @param tcb the TestCase-Browser.
 * @param selectionList the selected Nodes to move.
 * @param selectedProject the selected Project to move to.
 */
private void doMove(TestCaseBrowser tcb,List<INodePO> selectionList,IReusedProjectPO selectedProject){
  EntityManager sess=null;
  try {
    IProjectPO extProject=ProjectPM.loadReusedProject(selectedProject);
    sess=Persistor.instance().openSession();
    extProject=sess.find(NodeMaker.getProjectPOClass(),extProject.getId());
    List<ICapPO> moveProblem=getMoveProblem(extProject,selectionList);
    if (!moveProblem.isEmpty()) {
      ErrorHandlingUtil.createMessageDialog(MessageIDs.E_MOVE_TO_EXT_PROJ_ERROR_TOOLKITLEVEL,null,null);
      return;
    }
    ISpecObjContPO newParent=extProject.getSpecObjCont();
    List<MultipleNodePM.AbstractCmdHandle> commands=createCommands(selectionList,newParent,extProject);
    MessageInfo errorMessageInfo=MultipleNodePM.getInstance().executeCommands(commands,sess);
    if (errorMessageInfo == null) {
      GeneralStorage.getInstance().getMasterSession().refresh(GeneralStorage.getInstance().getProject().getSpecObjCont());
      tcb.getTreeViewer().refresh();
    }
 else {
      ErrorHandlingUtil.createMessageDialog(errorMessageInfo.getMessageId(),errorMessageInfo.getParams(),null);
    }
  }
 catch (  JBException e) {
    ErrorHandlingUtil.createMessageDialog(e,null,null);
  }
catch (  ToolkitPluginException tpie) {
    ErrorHandlingUtil.createMessageDialog(MessageIDs.E_GENERAL_TOOLKIT_ERROR);
  }
 finally {
    Persistor.instance().dropSession(sess);
  }
}","/** 
 * Performs the moving.
 * @param tcb the TestCase-Browser.
 * @param selectionList the selected Nodes to move.
 * @param selectedProject the selected Project to move to.
 */
private void doMove(TestCaseBrowser tcb,List<INodePO> selectionList,IReusedProjectPO selectedProject){
  EntityManager sess=null;
  try {
    IProjectPO extProject=ProjectPM.loadReusedProject(selectedProject);
    sess=Persistor.instance().openSession();
    extProject=sess.find(NodeMaker.getProjectPOClass(),extProject.getId());
    List<ICapPO> moveProblem=getMoveProblem(extProject,selectionList);
    if (!moveProblem.isEmpty()) {
      ErrorHandlingUtil.createMessageDialog(MessageIDs.E_MOVE_TO_EXT_PROJ_ERROR_TOOLKITLEVEL,null,null);
      return;
    }
    ISpecObjContPO newParent=extProject.getSpecObjCont();
    List<MultipleNodePM.AbstractCmdHandle> commands=createCommands(selectionList,newParent,extProject);
    MessageInfo errorMessageInfo=MultipleNodePM.getInstance().executeCommands(commands,sess);
    DataEventDispatcher.getInstance().fireDataChangedListener(newParent,DataState.StructureModified,UpdateState.all);
    if (errorMessageInfo == null) {
      GeneralStorage.getInstance().getMasterSession().refresh(GeneralStorage.getInstance().getProject().getSpecObjCont());
      tcb.getTreeViewer().refresh();
    }
 else {
      ErrorHandlingUtil.createMessageDialog(errorMessageInfo.getMessageId(),errorMessageInfo.getParams(),null);
    }
  }
 catch (  JBException e) {
    ErrorHandlingUtil.createMessageDialog(e,null,null);
  }
catch (  ToolkitPluginException tpie) {
    ErrorHandlingUtil.createMessageDialog(MessageIDs.E_GENERAL_TOOLKIT_ERROR);
  }
 finally {
    Persistor.instance().dropSession(sess);
  }
}",0.9644149577804584
96046,"/** 
 * @param po The persistent object for which the structure has changed
 */
private void handleDataStructureModified(final IPersistentObject po){
  if (po instanceof INodePO) {
    getTreeViewer().getTree().getParent().setRedraw(false);
    Object[] expandedElements=getTreeViewer().getExpandedElements();
    ISelection selection=getTreeViewer().getSelection();
    if (po instanceof IProjectPO) {
      rebuildTree();
    }
    getTreeViewer().refresh();
    getTreeViewer().setExpandedElements(expandedElements);
    getTreeViewer().setSelection(selection);
    getTreeViewer().getTree().getParent().setRedraw(true);
  }
}","/** 
 * @param po The persistent object for which the structure has changed
 */
private void handleDataStructureModified(final IPersistentObject po){
  if (po instanceof INodePO) {
    final TreeViewer tv=getTreeViewer();
    try {
      tv.getTree().getParent().setRedraw(false);
      Object[] expandedElements=tv.getExpandedElements();
      ISelection selection=tv.getSelection();
      if (po instanceof IProjectPO) {
        rebuildTree();
      }
      tv.refresh();
      tv.setExpandedElements(expandedElements);
      tv.setSelection(selection);
    }
  finally {
      tv.getTree().getParent().setRedraw(true);
    }
  }
}",0.7337559429477021
96047,"/** 
 * {@inheritDoc}
 */
public void handleDataChanged(final IPersistentObject po,final DataState dataState,final UpdateState updateState){
  Plugin.getDisplay().syncExec(new Runnable(){
    public void run(){
      if ((po instanceof IAUTMainPO) || (po instanceof ITestSuitePO)) {
        return;
      }
      if (updateState == UpdateState.onlyInEditor) {
        return;
      }
      if (po instanceof IReusedProjectPO) {
        handleProjectLoaded();
        return;
      }
switch (dataState) {
case Added:
        handleDataAdded(po,new NullProgressMonitor());
      break;
case Deleted:
    handleDataDeleted(po);
  break;
case Renamed:
handleDataRenamed(po);
break;
case StructureModified:
handleDataStructureModified(po);
break;
default :
break;
}
}
}
);
}","/** 
 * {@inheritDoc} 
 */
public void handleDataChanged(final IPersistentObject po,final DataState dataState,final UpdateState updateState){
  Plugin.getDisplay().syncExec(new Runnable(){
    public void run(){
      if ((po instanceof IAUTMainPO) || (po instanceof ITestSuitePO)) {
        return;
      }
      if (updateState == UpdateState.onlyInEditor) {
        return;
      }
      if (po instanceof IReusedProjectPO) {
        handleProjectLoaded();
        return;
      }
switch (dataState) {
case Added:
        handleDataAdded(po,new NullProgressMonitor());
      break;
case Deleted:
    handleDataDeleted(po);
  break;
case Renamed:
handleDataRenamed(po);
break;
case StructureModified:
handleDataStructureModified(po);
break;
default :
break;
}
}
}
);
}",0.9993502274204028
96048,"/** 
 * Loads the project in a session. This is shared code for detached in master session loading.
 * @param reused The reused project information for this project.
 * @param session Session context for db ops
 * @return the ProjectPO or null if no project in db 
 * @throws JBFatalAbortException
 * @throws OperationCanceledException
 * @throws JBException in case of general db access errors (db disconnect, shutdown, etc)
 */
private static IProjectPO loadProjectInSession(IReusedProjectPO reused,EntityManager session) throws JBFatalAbortException, OperationCanceledException, JBException {
  try {
    Query query=session.createQuery(""String_Node_Str"" + ""String_Node_Str"" + ""String_Node_Str"");
    query.setParameter(""String_Node_Str"",reused.getProjectGuid());
    query.setParameter(""String_Node_Str"",reused.getMajorNumber());
    query.setParameter(""String_Node_Str"",reused.getMinorNumber());
    try {
      return (IProjectPO)query.getSingleResult();
    }
 catch (    NoResultException nre) {
      return null;
    }
  }
 catch (  PersistenceException e) {
    OperationCanceledUtil.checkForOperationCanceled(e);
    log.error(Messages.PersistenceLoadFailed,e);
    throw new JBException(e.getMessage(),MessageIDs.E_PERSISTENCE_LOAD_FAILED);
  }
}","/** 
 * Loads the project in a session. This is shared code for detached in  master session loading.
 * @param reused The reused project information for this project.
 * @param session Session context for db ops
 * @return the ProjectPO or null if no project in db 
 * @throws JBFatalAbortException
 * @throws OperationCanceledException
 * @throws JBException in case of general db access errors (db disconnect, shutdown, etc)
 */
private static IProjectPO loadProjectInSession(IReusedProjectPO reused,EntityManager session) throws JBFatalAbortException, OperationCanceledException, JBException {
  try {
    Query query=session.createQuery(""String_Node_Str"" + ""String_Node_Str"" + ""String_Node_Str"");
    query.setParameter(""String_Node_Str"",reused.getProjectGuid());
    query.setParameter(""String_Node_Str"",reused.getMajorNumber());
    query.setParameter(""String_Node_Str"",reused.getMinorNumber());
    try {
      return (IProjectPO)query.getSingleResult();
    }
 catch (    NoResultException nre) {
      return null;
    }
  }
 catch (  PersistenceException e) {
    OperationCanceledUtil.checkForOperationCanceled(e);
    log.error(Messages.PersistenceLoadFailed,e);
    throw new JBException(e.getMessage(),MessageIDs.E_PERSISTENCE_LOAD_FAILED);
  }
}",0.999603017070266
96049,"/** 
 * {@inheritDoc}
 */
public Object executeImpl(ExecutionEvent event){
  Object testSuiteToStartObj=null;
  Object runningAutObj=null;
  ITestSuitePO testSuiteToStart=null;
  AutIdentifier runningAut=null;
  try {
    testSuiteToStartObj=event.getObjectParameterForExecution(TEST_SUITE_TO_START);
    runningAutObj=event.getObjectParameterForExecution(RUNNING_AUT);
  }
 catch (  ExecutionException ee) {
  }
  if (testSuiteToStartObj instanceof ITestSuitePO && runningAutObj instanceof AutIdentifier) {
    testSuiteToStart=(ITestSuitePO)testSuiteToStartObj;
    runningAut=(AutIdentifier)runningAutObj;
  }
 else {
    State lastStartedTestSuiteState=event.getCommand().getState(LAST_STARTED_TEST_SUITE);
    State lastTestedRunningAutState=event.getCommand().getState(LAST_TESTED_RUNNING_AUT);
    if (lastStartedTestSuiteState != null && lastTestedRunningAutState != null) {
      Object testSuiteStateValue=lastStartedTestSuiteState.getValue();
      Object runningAutStateValue=lastTestedRunningAutState.getValue();
      if (testSuiteStateValue instanceof ITestSuitePO && runningAutStateValue instanceof AutIdentifier) {
        testSuiteToStart=(ITestSuitePO)testSuiteStateValue;
        runningAut=(AutIdentifier)runningAutStateValue;
      }
    }
  }
  if (testSuiteToStart != null && runningAut != null && initTestExecution()) {
    final boolean autoScreenshots=Plugin.getDefault().getPreferenceStore().getBoolean(Constants.AUTO_SCREENSHOT_KEY);
    ChooseTestSuiteBP.getInstance().runTestSuite(testSuiteToStart,runningAut,autoScreenshots);
    State lastStartedAutState=event.getCommand().getState(LAST_STARTED_TEST_SUITE);
    State lastStartedAutConfigState=event.getCommand().getState(LAST_TESTED_RUNNING_AUT);
    if (lastStartedAutState != null && lastStartedAutConfigState != null) {
      lastStartedAutState.setValue(testSuiteToStart);
      lastStartedAutConfigState.setValue(runningAut);
    }
  }
  return null;
}","/** 
 * {@inheritDoc}
 */
public Object executeImpl(ExecutionEvent event){
  Object testSuiteToStartObj=null;
  Object runningAutObj=null;
  ITestSuitePO testSuiteToStart=null;
  AutIdentifier runningAut=null;
  try {
    testSuiteToStartObj=event.getObjectParameterForExecution(TEST_SUITE_TO_START);
    runningAutObj=event.getObjectParameterForExecution(RUNNING_AUT);
  }
 catch (  ExecutionException ee) {
  }
  State lastStartedTestSuiteState=event.getCommand().getState(LAST_STARTED_TEST_SUITE);
  State lastTestedRunningAutState=event.getCommand().getState(LAST_TESTED_RUNNING_AUT);
  if (testSuiteToStartObj instanceof ITestSuitePO && runningAutObj instanceof AutIdentifier) {
    testSuiteToStart=(ITestSuitePO)testSuiteToStartObj;
    runningAut=(AutIdentifier)runningAutObj;
  }
 else {
    if (lastStartedTestSuiteState != null && lastTestedRunningAutState != null) {
      Object testSuiteStateValue=lastStartedTestSuiteState.getValue();
      Object runningAutStateValue=lastTestedRunningAutState.getValue();
      if (testSuiteStateValue instanceof String && runningAutStateValue instanceof AutIdentifier) {
        String testSuiteGUIDtoStart=(String)testSuiteStateValue;
        List<ITestSuitePO> listOfTS=TestSuiteBP.getListOfTestSuites();
        for (        ITestSuitePO ts : listOfTS) {
          if (testSuiteGUIDtoStart.equals(ts.getGuid())) {
            testSuiteToStart=ts;
            break;
          }
        }
        runningAut=(AutIdentifier)runningAutStateValue;
      }
    }
  }
  if (testSuiteToStart != null && runningAut != null && initTestExecution()) {
    final boolean autoScreenshots=Plugin.getDefault().getPreferenceStore().getBoolean(Constants.AUTO_SCREENSHOT_KEY);
    ChooseTestSuiteBP.getInstance().runTestSuite(testSuiteToStart,runningAut,autoScreenshots);
    if (lastStartedTestSuiteState != null && lastTestedRunningAutState != null) {
      lastStartedTestSuiteState.setValue(testSuiteToStart.getGuid());
      lastTestedRunningAutState.setValue(runningAut);
    }
  }
  return null;
}",0.7106981416373681
96050,"/** 
 * {@inheritDoc}
 */
public Object executeImpl(ExecutionEvent event){
  ProjectDialog.ProjectData project=null;
  boolean cancelPressed=false;
  ProjectDialog dialog=null;
  List<IProjectPO> projList=checkAllAvailableProjects();
  if (ProjectUIBP.getInstance().shouldPerformAutoProjectLoad()) {
    project=ProjectUIBP.getMostRecentProjectData();
  }
 else {
    dialog=openProjectOpenDialog(projList);
    if (dialog.getReturnCode() == Window.CANCEL) {
      cancelPressed=true;
    }
 else {
      project=dialog.getSelection();
    }
  }
  if (!cancelPressed) {
    loadProject(project,projList);
  }
  return null;
}","/** 
 * {@inheritDoc}
 */
public Object executeImpl(ExecutionEvent event){
  ProjectDialog.ProjectData project=null;
  boolean cancelPressed=false;
  ProjectDialog dialog=null;
  List<IProjectPO> projList=checkAllAvailableProjects();
  if (ProjectUIBP.getInstance().shouldPerformAutoProjectLoad()) {
    project=ProjectUIBP.getMostRecentProjectData();
  }
 else {
    dialog=openProjectOpenDialog(projList);
    if (dialog.getReturnCode() == Window.CANCEL) {
      cancelPressed=true;
    }
 else {
      project=dialog.getSelection();
    }
  }
  if (!cancelPressed && !projList.isEmpty()) {
    loadProject(project,projList);
  }
  return null;
}",0.9819324430479184
96051,"/** 
 * {@inheritDoc}
 */
public Object executeImpl(ExecutionEvent event){
  ProjectDialog.ProjectData project=null;
  boolean cancelPressed=false;
  ProjectDialog dialog=null;
  List<IProjectPO> projList=checkAllAvailableProjects();
  if (ProjectUIBP.getInstance().shouldPerformAutoProjectLoad()) {
    project=ProjectUIBP.getMostRecentProjectData();
  }
 else {
    dialog=openProjectOpenDialog(projList);
    if (dialog.getReturnCode() == Window.CANCEL) {
      cancelPressed=true;
    }
 else {
      project=dialog.getSelection();
    }
  }
  if (!cancelPressed && !projList.isEmpty()) {
    loadProject(project,projList);
  }
  return null;
}","/** 
 * {@inheritDoc}
 */
public Object executeImpl(ExecutionEvent event){
  ProjectDialog.ProjectData project=null;
  boolean cancelPressed=false;
  ProjectDialog dialog=null;
  List<IProjectPO> projList=checkAllAvailableProjects();
  if (!projList.isEmpty()) {
    if (ProjectUIBP.getInstance().shouldPerformAutoProjectLoad()) {
      project=ProjectUIBP.getMostRecentProjectData();
    }
 else {
      dialog=openProjectOpenDialog(projList);
      if (dialog.getReturnCode() == Window.CANCEL) {
        cancelPressed=true;
      }
 else {
        project=dialog.getSelection();
      }
    }
    if (!cancelPressed) {
      loadProject(project,projList);
    }
  }
  return null;
}",0.7867867867867868
96052,"/** 
 * Releases the given mouse button on the given component in the given constraints. <br> <b>Note:</b> Use only for Drag and Drop! To click with the mouse, use click-methods!
 * @param graphicsComponent The graphics component.If null, the mouse button is released at the current location.
 * @param constraints A constraints object used by the Robot implementation, may be <code>null</code>.
 * @param button the mouse button.
 */
public void mouseRelease(Object graphicsComponent,Object constraints,int button) throws RobotException {
  if (graphicsComponent != null) {
    move(graphicsComponent,constraints);
  }
  RobotTiming.sleepPreClickDelay();
  m_robot.mouseRelease(getButtonMask(button));
  DragAndDropHelper.getInstance().setDragMode(false);
}","/** 
 * Releases the given mouse button on the given component in the given constraints. <br> <b>Note:</b> Use only for Drag and Drop! To click with the mouse, use click-methods!
 * @param graphicsComponent The graphics component.If null, the mouse button is released at the current location.
 * @param constraints A constraints object used by the Robot implementation, may be <code>null</code>.
 * @param button the mouse button.
 */
public void mouseRelease(Object graphicsComponent,Object constraints,int button) throws RobotException {
  if (graphicsComponent != null) {
    move(graphicsComponent,constraints);
  }
  RobotTiming.sleepPreClickDelay();
  m_robot.mouseRelease(getButtonMask(button));
  m_eventFlusher.flush();
  DragAndDropHelper.getInstance().setDragMode(false);
}",0.9831387808041504
96053,"/** 
 * Implementation of the mouse move. The mouse is moved into the graphics component.
 * @param graphicsComponent The component to move to
 * @param constraints The more specific constraints. Use this, for example when you want the click point to be relative to a part  of the component (e.g. tree node, table cell, etc)   rather than the overall component itself. May be   <code>null</code>.
 * @param xPos xPos in component           
 * @param yPos yPos in component
 * @param xAbsolute true if x-position should be absolute  
 * @param yAbsolute true if y-position should be absolute  
 * @param clickOptions The click options 
 * @throws StepExecutionException If the click delay is interrupted or the  event confirmation receives a timeout. 
 */
private void moveImpl(Object graphicsComponent,final Rectangle constraints,final int xPos,final boolean xAbsolute,final int yPos,final boolean yAbsolute,ClickOptions clickOptions) throws StepExecutionException {
  if (clickOptions.isScrollToVisible()) {
    ensureComponentVisible((Component)graphicsComponent,constraints);
  }
  Component component=(Component)graphicsComponent;
  preMove(component);
  Rectangle bounds=null;
  bounds=new Rectangle(getLocation(component,new Point(0,0)));
  bounds.width=component.getWidth();
  bounds.height=component.getHeight();
  if (constraints != null) {
    bounds.x+=constraints.x;
    bounds.y+=constraints.y;
    bounds.height=constraints.height;
    bounds.width=constraints.width;
  }
  Point p=PointUtil.calculateAwtPointToGo(xPos,xAbsolute,yPos,yAbsolute,bounds);
  if (isMouseMoveRequired(p)) {
    if (log.isDebugEnabled()) {
      log.debug(""String_Node_Str"" + p);
    }
    InterceptorOptions options=new InterceptorOptions(new long[]{AWTEvent.MOUSE_MOTION_EVENT_MASK});
    IRobotEventConfirmer confirmer=m_interceptor.intercept(options);
    Point ap=getAdjacentPoint(component,p);
    m_robot.mouseMove(ap.x,ap.y);
    RobotTiming.sleepPostMouseUpDelay();
    m_robot.mouseMove(p.x,p.y);
    if (clickOptions.isConfirmClick()) {
      confirmer.waitToConfirm(component,new MouseMovedAwtEventMatcher());
    }
  }
}","/** 
 * Implementation of the mouse move. The mouse is moved into the graphics component.
 * @param graphicsComponent The component to move to
 * @param constraints The more specific constraints. Use this, for example when you want the click point to be relative to a part  of the component (e.g. tree node, table cell, etc)   rather than the overall component itself. May be   <code>null</code>.
 * @param xPos xPos in component           
 * @param yPos yPos in component
 * @param xAbsolute true if x-position should be absolute  
 * @param yAbsolute true if y-position should be absolute  
 * @param clickOptions The click options 
 * @throws StepExecutionException If the click delay is interrupted or the  event confirmation receives a timeout. 
 */
private void moveImpl(Object graphicsComponent,final Rectangle constraints,final int xPos,final boolean xAbsolute,final int yPos,final boolean yAbsolute,ClickOptions clickOptions) throws StepExecutionException {
  if (clickOptions.isScrollToVisible()) {
    ensureComponentVisible((Component)graphicsComponent,constraints);
    m_eventFlusher.flush();
  }
  Component component=(Component)graphicsComponent;
  preMove(component);
  Rectangle bounds=null;
  bounds=new Rectangle(getLocation(component,new Point(0,0)));
  bounds.width=component.getWidth();
  bounds.height=component.getHeight();
  if (constraints != null) {
    bounds.x+=constraints.x;
    bounds.y+=constraints.y;
    bounds.height=constraints.height;
    bounds.width=constraints.width;
  }
  Point p=PointUtil.calculateAwtPointToGo(xPos,xAbsolute,yPos,yAbsolute,bounds);
  if (isMouseMoveRequired(p)) {
    if (log.isDebugEnabled()) {
      log.debug(""String_Node_Str"" + p);
    }
    InterceptorOptions options=new InterceptorOptions(new long[]{AWTEvent.MOUSE_MOTION_EVENT_MASK});
    IRobotEventConfirmer confirmer=m_interceptor.intercept(options);
    Point ap=getAdjacentPoint(component,p);
    m_robot.mouseMove(ap.x,ap.y);
    m_eventFlusher.flush();
    m_robot.mouseMove(p.x,p.y);
    m_eventFlusher.flush();
    if (clickOptions.isConfirmClick()) {
      confirmer.waitToConfirm(component,new MouseMovedAwtEventMatcher());
    }
  }
}",0.974609829955742
96054,"/** 
 * Clicks at the current mouse position.
 * @param graphicsComponent The component used for confirming the click.
 * @param clickOptions Configuration for the click.
 */
private void clickImpl(Object graphicsComponent,ClickOptions clickOptions){
  int buttonMask=getButtonMask(clickOptions.getMouseButton());
  int clickCount=clickOptions.getClickCount();
  int[] modifierMask=getModifierMask(clickOptions.getClickModifier());
  if (clickCount > 0) {
    InterceptorOptions options=new InterceptorOptions(new long[]{AWTEvent.MOUSE_EVENT_MASK});
    IRobotEventConfirmer confirmer=m_interceptor.intercept(options);
    try {
      pressModifier(modifierMask);
      RobotTiming.sleepPreClickDelay();
      for (int i=0; i < clickCount; i++) {
        m_robot.mousePress(buttonMask);
        RobotTiming.sleepPostMouseDownDelay();
        m_robot.mouseRelease(buttonMask);
        RobotTiming.sleepPostMouseUpDelay();
      }
      if (clickOptions.isConfirmClick()) {
        confirmer.waitToConfirm(graphicsComponent,new ClickAwtEventMatcher(clickOptions));
      }
    }
  finally {
      releaseModifier(modifierMask);
    }
  }
}","/** 
 * Clicks at the current mouse position.
 * @param graphicsComponent The component used for confirming the click.
 * @param clickOptions Configuration for the click.
 */
private void clickImpl(Object graphicsComponent,ClickOptions clickOptions){
  int buttonMask=getButtonMask(clickOptions.getMouseButton());
  int clickCount=clickOptions.getClickCount();
  int[] modifierMask=getModifierMask(clickOptions.getClickModifier());
  if (clickCount > 0) {
    InterceptorOptions options=new InterceptorOptions(new long[]{AWTEvent.MOUSE_EVENT_MASK});
    IRobotEventConfirmer confirmer=m_interceptor.intercept(options);
    try {
      pressModifier(modifierMask);
      RobotTiming.sleepPreClickDelay();
      for (int i=0; i < clickCount; i++) {
        m_robot.mousePress(buttonMask);
        RobotTiming.sleepPostMouseDownDelay();
        m_eventFlusher.flush();
        m_robot.mouseRelease(buttonMask);
        RobotTiming.sleepPostMouseUpDelay();
        m_eventFlusher.flush();
      }
      if (clickOptions.isConfirmClick()) {
        confirmer.waitToConfirm(graphicsComponent,new ClickAwtEventMatcher(clickOptions));
      }
    }
  finally {
      releaseModifier(modifierMask);
    }
  }
}",0.9726261762189906
96055,"/** 
 * {@inheritDoc}
 */
public void keyType(Object graphicsComponent,int keycode) throws RobotException {
  try {
    InterceptorOptions options=new InterceptorOptions(new long[]{AWTEvent.KEY_EVENT_MASK});
    IRobotEventConfirmer confirmer=m_interceptor.intercept(options);
    try {
      m_robot.keyPress(keycode);
    }
  finally {
      m_robot.keyRelease(keycode);
    }
    confirmer.waitToConfirm(graphicsComponent,new KeyAwtEventMatcher(KeyEvent.KEY_RELEASED));
  }
 catch (  IllegalArgumentException e) {
    throw new RobotException(e);
  }
}","/** 
 * {@inheritDoc}
 */
public void keyType(Object graphicsComponent,int keycode) throws RobotException {
  try {
    InterceptorOptions options=new InterceptorOptions(new long[]{AWTEvent.KEY_EVENT_MASK});
    IRobotEventConfirmer confirmer=m_interceptor.intercept(options);
    try {
      m_robot.keyPress(keycode);
      m_eventFlusher.flush();
    }
  finally {
      m_robot.keyRelease(keycode);
      m_eventFlusher.flush();
    }
    confirmer.waitToConfirm(graphicsComponent,new KeyAwtEventMatcher(KeyEvent.KEY_RELEASED));
  }
 catch (  IllegalArgumentException e) {
    throw new RobotException(e);
  }
}",0.9487179487179488
96056,"/** 
 * Implements the key press or release. 
 * @param graphicsComponent The component, may be <code>null</code>
 * @param keyCode  The key code
 * @param press If <code>true</code>, the key is pressed, otherwise released
 */
private void keyPressReleaseImpl(Object graphicsComponent,int keyCode,boolean press){
  InterceptorOptions options=new InterceptorOptions(new long[]{AWTEvent.KEY_EVENT_MASK});
  IRobotEventConfirmer confirmer=m_interceptor.intercept(options);
  if (press) {
    m_robot.keyPress(keyCode);
  }
 else {
    m_robot.keyRelease(keyCode);
  }
  confirmer.waitToConfirm(graphicsComponent,new KeyAwtEventMatcher(press ? KeyEvent.KEY_PRESSED : KeyEvent.KEY_RELEASED));
}","/** 
 * Implements the key press or release. 
 * @param graphicsComponent The component, may be <code>null</code>
 * @param keyCode  The key code
 * @param press If <code>true</code>, the key is pressed, otherwise released
 */
private void keyPressReleaseImpl(Object graphicsComponent,int keyCode,boolean press){
  InterceptorOptions options=new InterceptorOptions(new long[]{AWTEvent.KEY_EVENT_MASK});
  IRobotEventConfirmer confirmer=m_interceptor.intercept(options);
  if (press) {
    m_robot.keyPress(keyCode);
    m_eventFlusher.flush();
  }
 else {
    m_robot.keyRelease(keyCode);
    m_eventFlusher.flush();
  }
  confirmer.waitToConfirm(graphicsComponent,new KeyAwtEventMatcher(press ? KeyEvent.KEY_PRESSED : KeyEvent.KEY_RELEASED));
}",0.9609483960948396
96057,"/** 
 * Performs a mouse move only if the mouse motion tracker returns no latest motion event. In this case, the mouse is moved into the middle of the given component's root, or, if the root cannot be determined, into the middle of the component itself. 
 * @param component The AWT/Swing component
 * @throws RobotException If the component's location cannot be calculated.
 */
private void preMove(Component component) throws RobotException {
  if (m_mouseMotionTracker.getLastMouseMotionEvent() == null) {
    Component root=SwingUtilities.getRoot(component);
    Component c=(root != null) ? root : component;
    Point p=getLocation(c,null);
    m_robot.mouseMove(p.x,p.y);
  }
}","/** 
 * Performs a mouse move only if the mouse motion tracker returns no latest motion event. In this case, the mouse is moved into the middle of the given component's root, or, if the root cannot be determined, into the middle of the component itself. 
 * @param component The AWT/Swing component
 * @throws RobotException If the component's location cannot be calculated.
 */
private void preMove(Component component) throws RobotException {
  if (m_mouseMotionTracker.getLastMouseMotionEvent() == null) {
    Component root=SwingUtilities.getRoot(component);
    Component c=(root != null) ? root : component;
    Point p=getLocation(c,null);
    m_robot.mouseMove(p.x,p.y);
    m_eventFlusher.flush();
  }
}",0.9799426934097422
96058,"/** 
 * Presses the given mouse button on the given component in the given constraints. <br> <b>Note:</b> Use only for Drag and Drop! To click with the mouse, use click-methods!
 * @param graphicsComponent the component where to press the mouse button.If null, the mouse is pressed at the current location.
 * @param constraints A constraints object used by the Robot implementation, may be <code>null</code>.
 * @param button the mouse button which is to be pressed. 
 */
public void mousePress(Object graphicsComponent,Object constraints,int button){
  DragAndDropHelper.getInstance().setDragMode(true);
  if (graphicsComponent != null) {
    move(graphicsComponent,constraints);
  }
  RobotTiming.sleepPreClickDelay();
  m_robot.mousePress(getButtonMask(button));
}","/** 
 * Presses the given mouse button on the given component in the given constraints. <br> <b>Note:</b> Use only for Drag and Drop! To click with the mouse, use click-methods!
 * @param graphicsComponent the component where to press the mouse button.If null, the mouse is pressed at the current location.
 * @param constraints A constraints object used by the Robot implementation, may be <code>null</code>.
 * @param button the mouse button which is to be pressed. 
 */
public void mousePress(Object graphicsComponent,Object constraints,int button){
  DragAndDropHelper.getInstance().setDragMode(true);
  if (graphicsComponent != null) {
    move(graphicsComponent,constraints);
  }
  RobotTiming.sleepPreClickDelay();
  m_robot.mousePress(getButtonMask(button));
  m_eventFlusher.flush();
}",0.9833546734955184
96059,"/** 
 * Creates a new instance. 
 * @param factory The Robot factory instance.
 * @throws RobotException If the AWT-Robot cannot be created.
 */
public RobotAwtImpl(IRobotFactory factory) throws RobotException {
  try {
    m_robot=new Robot();
    m_robot.setAutoWaitForIdle(false);
    m_robot.setAutoDelay(0);
  }
 catch (  AWTException awte) {
    log.error(awte);
    m_robot=null;
    throw new RobotException(awte);
  }
catch (  SecurityException se) {
    log.error(se);
    m_robot=null;
    throw new RobotException(se);
  }
  m_interceptor=factory.getRobotEventInterceptor();
  m_mouseMotionTracker=factory.getMouseMotionTracker();
  m_queuer=factory.getEventThreadQueuer();
}","/** 
 * Creates a new instance. 
 * @param factory The Robot factory instance.
 * @throws RobotException If the AWT-Robot cannot be created.
 */
public RobotAwtImpl(IRobotFactory factory) throws RobotException {
  try {
    m_robot=new Robot();
    m_robot.setAutoWaitForIdle(false);
    m_robot.setAutoDelay(0);
  }
 catch (  AWTException awte) {
    log.error(awte);
    m_robot=null;
    throw new RobotException(awte);
  }
catch (  SecurityException se) {
    log.error(se);
    m_robot=null;
    throw new RobotException(se);
  }
  m_interceptor=factory.getRobotEventInterceptor();
  m_mouseMotionTracker=factory.getMouseMotionTracker();
  m_queuer=factory.getEventThreadQueuer();
  m_eventFlusher=new EventFlusher(m_robot,FLUSH_TIMEOUT);
}",0.9594972067039106
96060,"/** 
 * Creates the table page of the editor.
 * @param parent The parent composite.
 * @return the base control of the table view.
 */
private Control createTablePageControl(Composite parent){
  m_tableViewer=new TableViewer(parent,SWT.H_SCROLL | SWT.V_SCROLL | SWT.BORDER| SWT.FULL_SELECTION);
  addLogicalNameColumn(m_tableViewer);
  addTechNameColumn(m_tableViewer);
  addCategoryColumn(m_tableViewer);
  addCompTypeColumn(m_tableViewer);
  TableViewerEditor.create(m_tableViewer,new OMTableEditorActivationStrategy(m_tableViewer),ColumnViewerEditor.TABBING_VERTICAL | ColumnViewerEditor.TABBING_MOVE_TO_ROW_NEIGHBOR | ColumnViewerEditor.TABBING_HORIZONTAL);
  m_tableViewer.setContentProvider(new OMEditorTableContentProvider());
  m_tableViewer.getTable().setLinesVisible(true);
  m_tableViewer.getTable().setHeaderVisible(true);
  TableColumn sortColumn=m_tableViewer.getTable().getColumn(0);
  m_tableViewer.getTable().setSortColumn(sortColumn);
  m_tableViewer.getTable().setSortDirection(SWT.DOWN);
  ColumnSortListener sortListener=new ColumnSortListener(m_tableViewer,sortColumn);
  m_tableViewer.setComparator(sortListener);
  for (  TableColumn col : m_tableViewer.getTable().getColumns()) {
    col.addSelectionListener(sortListener);
  }
  m_tableViewer.setUseHashlookup(true);
  m_tableViewer.setInput(getAut().getObjMap());
  createTableContextMenu();
  return m_tableViewer.getControl();
}","/** 
 * Creates the table page of the editor.
 * @param parent The parent composite.
 * @return the base control of the table view.
 */
private Control createTablePageControl(Composite parent){
  m_tableViewer=new TableViewer(parent,SWT.H_SCROLL | SWT.V_SCROLL | SWT.BORDER| SWT.FULL_SELECTION);
  addLogicalNameColumn(m_tableViewer);
  addTechNameColumn(m_tableViewer);
  addCategoryColumn(m_tableViewer);
  addCompTypeColumn(m_tableViewer);
  TableViewerEditor.create(m_tableViewer,new OMTableEditorActivationStrategy(m_tableViewer),ColumnViewerEditor.TABBING_VERTICAL | ColumnViewerEditor.TABBING_MOVE_TO_ROW_NEIGHBOR | ColumnViewerEditor.TABBING_HORIZONTAL);
  m_tableViewer.setContentProvider(new OMEditorTableContentProvider());
  m_tableViewer.getTable().setLinesVisible(true);
  m_tableViewer.getTable().setHeaderVisible(true);
  TableColumn sortColumn=m_tableViewer.getTable().getColumn(0);
  m_tableViewer.getTable().setSortColumn(sortColumn);
  m_tableViewer.getTable().setSortDirection(SWT.DOWN);
  ColumnSortListener sortListener=new ColumnSortListener(m_tableViewer,sortColumn);
  for (  TableColumn col : m_tableViewer.getTable().getColumns()) {
    col.addSelectionListener(sortListener);
  }
  m_tableViewer.setUseHashlookup(true);
  m_tableViewer.setInput(getAut().getObjMap());
  createTableContextMenu();
  return m_tableViewer.getControl();
}",0.9837603753157704
96061,"/** 
 * {@inheritDoc}
 */
public Object executeImpl(ExecutionEvent event){
  IWorkbenchPart activePart=HandlerUtil.getActivePart(event);
  if (activePart instanceof TestresultSummaryView) {
    final TestresultSummaryView summary=(TestresultSummaryView)activePart;
    summary.refreshView();
  }
  return null;
}","/** 
 * {@inheritDoc}
 */
public Object executeImpl(ExecutionEvent event){
  IWorkbenchPart activePart=HandlerUtil.getActivePart(event);
  if (activePart instanceof TestresultSummaryView) {
    final TestresultSummaryView summary=(TestresultSummaryView)activePart;
    summary.loadViewInput();
  }
  return null;
}",0.97444089456869
96062,"/** 
 * {@inheritDoc}
 */
public Object[] getElements(Object inputElement){
  if (inputElement instanceof Object[]) {
    return (Object[])inputElement;
  }
  return null;
}","/** 
 * {@inheritDoc} 
 */
public Object[] getElements(Object inputElement){
  if (inputElement instanceof Object[]) {
    return (Object[])inputElement;
  }
  return null;
}",0.9971181556195964
96063,"/** 
 * {@inheritDoc}
 */
public void dispose(){
}","/** 
 * {@inheritDoc} 
 */
public void dispose(){
}",0.99009900990099
96064,"/** 
 * {@inheritDoc}
 */
public void inputChanged(Viewer viewer,Object oldInput,Object newInput){
}","/** 
 * {@inheritDoc} 
 */
public void inputChanged(Viewer viewer,Object oldInput,Object newInput){
}",0.9950248756218906
96065,"/** 
 * Constructor
 * @param viewer TableViewer
 * @param initialSortColumn The column to use initially for sorting.
 */
public ColumnSortListener(TableViewer viewer,TableColumn initialSortColumn){
  m_tableViewer=viewer;
  initialSortColumn.getParent().setSortColumn(initialSortColumn);
  initialSortColumn.getParent().setSortDirection(SWT.DOWN);
}","/** 
 * Constructor
 * @param viewer TableViewer
 * @param initialSortColumn The column to use initially for sorting.
 */
public ColumnSortListener(TableViewer viewer,TableColumn initialSortColumn){
  m_tableViewer=viewer;
  final Table parent=initialSortColumn.getParent();
  parent.setSortColumn(initialSortColumn);
  parent.setSortDirection(SWT.DOWN);
}",0.9093484419263456
96066,"/** 
 * Assigns the receiver as its viewer's sorter.
 * @param direction The sort direction to use.
 */
public void setSorter(int direction){
  m_column.getColumn().getParent().setSortColumn(m_column.getColumn());
  m_direction=direction;
  if (direction == ASC) {
    m_column.getColumn().getParent().setSortDirection(SWT.DOWN);
  }
 else {
    m_column.getColumn().getParent().setSortDirection(SWT.UP);
  }
  if (m_viewer.getComparator() == this) {
    m_viewer.refresh();
  }
 else {
    m_viewer.setComparator(this);
  }
}","/** 
 * Assigns the receiver as its viewer's sorter.
 * @param direction The sort direction to use.
 */
public void setSorter(int direction){
  final Table parent=m_column.getColumn().getParent();
  parent.setSortColumn(m_column.getColumn());
  m_direction=direction;
  if (direction == ASC) {
    parent.setSortDirection(SWT.UP);
  }
 else {
    parent.setSortDirection(SWT.DOWN);
  }
  if (m_viewer.getComparator() == this) {
    m_viewer.refresh();
  }
 else {
    m_viewer.setComparator(this);
  }
}",0.8163265306122449
96067,"/** 
 * @param arguments evaluate() parameter
 * @param numParamsExpected how many parameters does the Evaluator expect
 * @throws InvalidDataException if the are not exactly numParamsExpectedparameters in arguments
 */
protected void validateParamCount(String[] arguments,int numParamsExpected) throws InvalidDataException {
  if (arguments.length != 2) {
    throw new InvalidDataException(NLS.bind(Messages.WrongNumFunctionArgs,new Integer[]{numParamsExpected,arguments.length}),MessageIDs.E_WRONG_NUM_FUNCTION_ARGS);
  }
}","/** 
 * @param arguments evaluate() parameter
 * @param numParamsExpected how many parameters does the Evaluator expect
 * @throws InvalidDataException if the are not exactly numParamsExpected parameters in arguments
 */
protected void validateParamCount(String[] arguments,int numParamsExpected) throws InvalidDataException {
  if (arguments.length != numParamsExpected) {
    throw new InvalidDataException(NLS.bind(Messages.WrongNumFunctionArgs,new Integer[]{numParamsExpected,arguments.length}),MessageIDs.E_WRONG_NUM_FUNCTION_ARGS);
  }
}",0.9822263797942
96068,"/** 
 * Shows the SpecTS in the Test Suite Browser
 * @param node the node to show
 * @param viewPart the view part to show the specification in
 */
protected void showSpecUINode(INodePO node,IViewPart viewPart){
  if (!Utils.openPerspective(Constants.SPEC_PERSPECTIVE)) {
    return;
  }
  if (!PlatformUI.getWorkbench().getActiveWorkbenchWindow().getActivePage().getPerspective().getId().equals(Constants.SPEC_PERSPECTIVE)) {
    ErrorHandlingUtil.createMessageDialog(MessageIDs.I_NO_PERSPECTIVE_CHANGE);
    return;
  }
  if (viewPart instanceof AbstractJBTreeView) {
    AbstractJBTreeView jbtv=(AbstractJBTreeView)viewPart;
    UINodeBP.selectNodeInTree(node.getId(),jbtv.getTreeViewer(),jbtv.getEntityManager());
  }
}","/** 
 * Shows the SpecTS in the Test Suite Browser
 * @param node the node to show
 * @param viewPart the view part to show the specification in
 */
protected void showSpecUINode(INodePO node,IViewPart viewPart){
  if (!Utils.openPerspective(Constants.SPEC_PERSPECTIVE)) {
    return;
  }
  if (!PlatformUI.getWorkbench().getActiveWorkbenchWindow().getActivePage().getPerspective().getId().equals(Constants.SPEC_PERSPECTIVE)) {
    ErrorHandlingUtil.createMessageDialog(MessageIDs.I_NO_PERSPECTIVE_CHANGE);
    return;
  }
  if (viewPart instanceof AbstractJBTreeView) {
    AbstractJBTreeView jbtv=(AbstractJBTreeView)viewPart;
    Plugin.activate(jbtv);
    UINodeBP.selectNodeInTree(node.getId(),jbtv.getTreeViewer(),jbtv.getEntityManager());
  }
}",0.9816949152542372
96069,"/** 
 * {@inheritDoc} 
 */
public void jumpTo(Long id){
  AbstractJBTreeView jbtv=MultipleTCBTracker.getInstance().getMainTCB();
  if (jbtv == null) {
    jbtv=(AbstractJBTreeView)Plugin.showView(Constants.TC_BROWSER_ID);
  }
  TreeViewer tv=jbtv.getTreeViewer();
  EntityManager em=jbtv.getEntityManager();
  INodePO node=UINodeBP.selectNodeInTree(id,tv,em);
  if (node == null) {
    jbtv=(AbstractJBTreeView)Plugin.showView(Constants.TS_BROWSER_ID);
    tv=jbtv.getTreeViewer();
    node=UINodeBP.selectNodeInTree(id,tv,em);
  }
  BasicSearchResult.openEditorForNode(node,jbtv);
}","/** 
 * {@inheritDoc} 
 */
public void jumpTo(Long id){
  AbstractJBTreeView jbtv=MultipleTCBTracker.getInstance().getMainTCB();
  if (jbtv == null) {
    jbtv=(AbstractJBTreeView)Plugin.showView(Constants.TC_BROWSER_ID);
  }
 else {
    Plugin.activate(jbtv);
  }
  TreeViewer tv=jbtv.getTreeViewer();
  EntityManager em=jbtv.getEntityManager();
  INodePO node=UINodeBP.selectNodeInTree(id,tv,em);
  if (node == null) {
    jbtv=(AbstractJBTreeView)Plugin.showView(Constants.TS_BROWSER_ID);
    tv=jbtv.getTreeViewer();
    node=UINodeBP.selectNodeInTree(id,tv,em);
  }
  BasicSearchResult.openEditorForNode(node,jbtv);
}",0.9676348547717842
96070,"/** 
 * performs the extraction
 * @param newTcName the name of the new SpecTestCase
 * @param node the edited  {@link INodePO} from which to extract
 * @param selection the nodes to be extracted
 * @return an error message or null.
 */
private ExtractionReturn performExtraction(final String newTcName,final INodePO node,final IStructuredSelection selection){
  final List<IParamNodePO> modNodes=new ArrayList<IParamNodePO>(selection.size());
  Iterator it=selection.iterator();
  while (it.hasNext()) {
    modNodes.add((IParamNodePO)it.next());
  }
  try {
    ExtractionReturn extractionRet=persistExtraction(node,newTcName,modNodes);
    DataEventDispatcher.getInstance().fireDataChangedListener(node,DataState.StructureModified,UpdateState.all);
    DataEventDispatcher.getInstance().fireDataChangedListener(extractionRet.getExecTestCasePO(),DataState.Added,UpdateState.all);
    final ISpecTestCasePO newSpecTc=extractionRet.getExecTestCasePO().getSpecTestCase();
    DataEventDispatcher.getInstance().fireDataChangedListener(newSpecTc,DataState.Added,UpdateState.all);
    return extractionRet;
  }
 catch (  PMException e) {
    PMExceptionHandler.handlePMExceptionForMasterSession(e);
  }
catch (  ProjectDeletedException e) {
    PMExceptionHandler.handleGDProjectDeletedException();
  }
  return new ExtractionReturn();
}","/** 
 * performs the extraction
 * @param newTcName the name of the new SpecTestCase
 * @param node the edited  {@link INodePO} from which to extract
 * @param selection the nodes to be extracted
 * @return an error message or null.
 */
private ExtractionReturn performExtraction(final String newTcName,final INodePO node,final IStructuredSelection selection){
  final List<IParamNodePO> modNodes=new ArrayList<IParamNodePO>(selection.size());
  Iterator it=selection.iterator();
  while (it.hasNext()) {
    modNodes.add((IParamNodePO)it.next());
  }
  try {
    ExtractionReturn extractionRet=persistExtraction(node,newTcName,modNodes);
    DataEventDispatcher.getInstance().fireDataChangedListener(node,DataState.StructureModified,UpdateState.all);
    DataEventDispatcher.getInstance().fireDataChangedListener(extractionRet.getExecTestCasePO(),DataState.Added,UpdateState.all);
    final ISpecTestCasePO newSpecTc=extractionRet.getExecTestCasePO().getSpecTestCase();
    DataEventDispatcher.getInstance().fireDataChangedListener(newSpecTc,DataState.Added,UpdateState.all);
    TestCaseBrowser tcb=MultipleTCBTracker.getInstance().getMainTCB();
    if (tcb != null) {
      tcb.getTreeViewer().setSelection(new StructuredSelection(newSpecTc),true);
    }
    return extractionRet;
  }
 catch (  PMException e) {
    PMExceptionHandler.handlePMExceptionForMasterSession(e);
  }
catch (  ProjectDeletedException e) {
    PMExceptionHandler.handleGDProjectDeletedException();
  }
  return new ExtractionReturn();
}",0.93642430628732
96071,"/** 
 * @param event the execution event
 * @throws PMSaveException in case of DB storage problem
 * @throws PMAlreadyLockedException in case of locked catParentPO
 * @throws PMException in case of rollback failed
 * @throws ProjectDeletedException if the project was deleted in another instance
 */
private void createNewCategory(ExecutionEvent event) throws PMSaveException, PMAlreadyLockedException, PMException, ProjectDeletedException {
  final INodePO categoryParent=getParentNode(event);
  InputDialog dialog=new InputDialog(getActiveShell(),Messages.CreateNewCategoryActionCatTitle,InitialValueConstants.DEFAULT_CATEGORY_NAME,Messages.CreateNewCategoryActionCatMessage,Messages.CreateNewCategoryActionCatLabel,Messages.CreateNewCategoryActionCatError,Messages.CreateNewCategoryActionDoubleCatName,IconConstants.NEW_CAT_DIALOG_STRING,Messages.CreateNewCategoryActionNewCategory,false){
    /** 
 * @return False, if the input name already exists.
 */
    protected boolean isInputAllowed(){
      return !existCategory(categoryParent,getInputFieldText());
    }
  }
;
  dialog.setHelpAvailable(true);
  dialog.create();
  DialogUtils.setWidgetNameForModalDialog(dialog);
  Plugin.getHelpSystem().setHelp(dialog.getShell(),ContextHelpIds.DIALOG_NEW_CATEGORY);
  dialog.open();
  if (Window.OK == dialog.getReturnCode()) {
    String categoryName=dialog.getName();
    ICategoryPO category=NodeMaker.createCategoryPO(categoryName);
    NodePM.addAndPersistChildNode(categoryParent,category,null,NodePM.getCmdHandleChild(categoryParent,category));
    DataEventDispatcher.getInstance().fireDataChangedListener(category,DataState.Added,UpdateState.all);
  }
  dialog.close();
}","/** 
 * @param event the execution event
 * @throws PMSaveException in case of DB storage problem
 * @throws PMAlreadyLockedException in case of locked catParentPO
 * @throws PMException in case of rollback failed
 * @throws ProjectDeletedException if the project was deleted in another instance
 */
private void createNewCategory(ExecutionEvent event) throws PMSaveException, PMAlreadyLockedException, PMException, ProjectDeletedException {
  final INodePO categoryParent=getParentNode(event);
  IWorkbenchPart activePart=HandlerUtil.getActivePart(event);
  InputDialog dialog=new InputDialog(getActiveShell(),Messages.CreateNewCategoryActionCatTitle,InitialValueConstants.DEFAULT_CATEGORY_NAME,Messages.CreateNewCategoryActionCatMessage,Messages.CreateNewCategoryActionCatLabel,Messages.CreateNewCategoryActionCatError,Messages.CreateNewCategoryActionDoubleCatName,IconConstants.NEW_CAT_DIALOG_STRING,Messages.CreateNewCategoryActionNewCategory,false){
    /** 
 * @return False, if the input name already exists.
 */
    protected boolean isInputAllowed(){
      return !existCategory(categoryParent,getInputFieldText());
    }
  }
;
  dialog.setHelpAvailable(true);
  dialog.create();
  DialogUtils.setWidgetNameForModalDialog(dialog);
  Plugin.getHelpSystem().setHelp(dialog.getShell(),ContextHelpIds.DIALOG_NEW_CATEGORY);
  dialog.open();
  if (Window.OK == dialog.getReturnCode()) {
    String categoryName=dialog.getName();
    ICategoryPO category=NodeMaker.createCategoryPO(categoryName);
    NodePM.addAndPersistChildNode(categoryParent,category,null,NodePM.getCmdHandleChild(categoryParent,category));
    DataEventDispatcher.getInstance().fireDataChangedListener(category,DataState.Added,UpdateState.all);
    if (activePart instanceof TestCaseBrowser) {
      TestCaseBrowser tcb=(TestCaseBrowser)activePart;
      tcb.getTreeViewer().setSelection(new StructuredSelection(category),true);
    }
  }
  dialog.close();
}",0.9302325581395348
96072,"/** 
 * {@inheritDoc} 
 */
public Object executeImpl(ExecutionEvent event){
  String newTestCaseName=getNewTestCaseName(event);
  if (newTestCaseName != null) {
    ISpecTestCasePO newSpecTC=null;
    IStructuredSelection ss=getSelection();
    final List<IParamNodePO> nodesToClone=new ArrayList<IParamNodePO>(ss.size());
    Iterator it=ss.iterator();
    while (it.hasNext()) {
      nodesToClone.add((IParamNodePO)it.next());
    }
    newSpecTC=createAndPerformNodeDuplication(newTestCaseName,nodesToClone);
    DataEventDispatcher.getInstance().fireDataChangedListener(newSpecTC,DataState.Added,UpdateState.all);
  }
  return null;
}","/** 
 * {@inheritDoc} 
 */
public Object executeImpl(ExecutionEvent event){
  String newTestCaseName=getNewTestCaseName(event);
  if (newTestCaseName != null) {
    ISpecTestCasePO newSpecTC=null;
    IStructuredSelection ss=getSelection();
    final List<IParamNodePO> nodesToClone=new ArrayList<IParamNodePO>(ss.size());
    Iterator it=ss.iterator();
    while (it.hasNext()) {
      nodesToClone.add((IParamNodePO)it.next());
    }
    newSpecTC=createAndPerformNodeDuplication(newTestCaseName,nodesToClone);
    DataEventDispatcher.getInstance().fireDataChangedListener(newSpecTC,DataState.Added,UpdateState.all);
    TestCaseBrowser tcb=MultipleTCBTracker.getInstance().getMainTCB();
    if (tcb != null) {
      tcb.getTreeViewer().setSelection(new StructuredSelection(newSpecTC),true);
    }
  }
  return null;
}",0.858122001370802
96073,"/** 
 * @return the String from the Cell Renderer
 */
public String getText(){
  JComboBox comboBox=((JComboBox)m_implClass.getComponent());
  return m_implClass.getRenderedText(getComboBoxEditorComponent(comboBox),true);
}","/** 
 * @return the String from the Cell Renderer
 */
public String getText(){
  final JComboBox comboBox=((JComboBox)m_implClass.getComponent());
  String comboBoxText;
  if (comboBox.isEditable()) {
    comboBoxText=m_implClass.getRenderedText(getComboBoxEditorComponent(comboBox),true);
  }
 else {
    final int selIndex=comboBox.getSelectedIndex();
    if (selIndex == -1) {
      comboBoxText=String.valueOf(comboBox.getSelectedItem());
    }
 else {
      final JList jlist=new JList(comboBox.getModel());
      Object o=m_eventThreadQueuer.invokeAndWait(""String_Node_Str"",new IRunnable(){
        public Object run(){
          Component disp=comboBox.getRenderer().getListCellRendererComponent(jlist,jlist.getModel().getElementAt(selIndex),selIndex,true,comboBox.hasFocus());
          return m_implClass.getRenderedText(disp,false);
        }
      }
);
      comboBoxText=String.valueOf(o);
    }
  }
  return comboBoxText;
}",0.3727351164797239
96074,"public Object run(){
  JComboBox comboBox=(JComboBox)m_implClass.getComponent();
  return comboBox.isEditable() ? Boolean.TRUE : Boolean.FALSE;
}","public Object run(){
  Component disp=comboBox.getRenderer().getListCellRendererComponent(jlist,jlist.getModel().getElementAt(selIndex),selIndex,true,comboBox.hasFocus());
  return m_implClass.getRenderedText(disp,false);
}",0.3097826086956521
96075,"/** 
 * {@inheritDoc}
 */
public void writeMonitoringReport(OutputStream out){
}","/** 
 * {@inheritDoc}
 */
public void writeMonitoringReport(OutputStream out){
  try {
    out.close();
  }
 catch (  IOException e) {
    LOG.error(DebugConstants.ERROR,e);
  }
}",0.6177606177606177
96076,"/** 
 * {@inheritDoc}
 */
public Map<String,IMonitoringValue> getMonitoringData(){
  return null;
}","/** 
 * {@inheritDoc}
 */
public Map<String,IMonitoringValue> getMonitoringData(){
  return new HashMap<String,IMonitoringValue>();
}",0.8362068965517241
96077,"/** 
 * @param dbURL the dbURL string to get a database connection information for
 * @return The corresponding database connection information or<code>null</code> if no connection information available for the given dbURL.
 */
private DatabaseConnectionInfo getConnectionInfo(final String dbURL){
  DatabaseConnectionInfo connectionInfo=null;
  if (dbURL.startsWith(OracleConnectionInfo.JDBC_PRE)) {
    connectionInfo=new OracleConnectionInfo(){
      @Override public String getConnectionUrl(){
        return dbURL;
      }
    }
;
  }
 else   if (dbURL.startsWith(PostGreSQLConnectionInfo.JDBC_PRE)) {
    connectionInfo=new PostGreSQLConnectionInfo(){
      @Override public String getConnectionUrl(){
        return dbURL;
      }
    }
;
  }
 else   if (dbURL.startsWith(MySQLConnectionInfo.JDBC_PRE)) {
    connectionInfo=new MySQLConnectionInfo(){
      @Override public String getConnectionUrl(){
        return dbURL;
      }
    }
;
  }
 else   if (dbURL.startsWith(H2ConnectionInfo.JDBC_PRE)) {
    connectionInfo=new H2ConnectionInfo(){
      @Override public String getConnectionUrl(){
        return dbURL;
      }
    }
;
  }
  return connectionInfo;
}","/** 
 * @param dbURL the dbURL string to get a database connection information for
 * @return The corresponding database connection information or<code>null</code> if no connection information available for the given dbURL.
 */
private static DatabaseConnectionInfo getConnectionInfo(final String dbURL){
  DatabaseConnectionInfo connectionInfo=null;
  if (dbURL.startsWith(OracleConnectionInfo.JDBC_PRE)) {
    connectionInfo=new OracleConnectionInfo(){
      @Override public String getConnectionUrl(){
        return dbURL;
      }
    }
;
  }
 else   if (dbURL.startsWith(PostGreSQLConnectionInfo.JDBC_PRE)) {
    connectionInfo=new PostGreSQLConnectionInfo(){
      @Override public String getConnectionUrl(){
        return dbURL;
      }
    }
;
  }
 else   if (dbURL.startsWith(MySQLConnectionInfo.JDBC_PRE)) {
    connectionInfo=new MySQLConnectionInfo(){
      @Override public String getConnectionUrl(){
        return dbURL;
      }
    }
;
  }
 else   if (dbURL.startsWith(H2ConnectionInfo.JDBC_PRE)) {
    connectionInfo=new H2ConnectionInfo(){
      @Override public String getConnectionUrl(){
        return dbURL;
      }
    }
;
  }
  return connectionInfo;
}",0.9970174691095016
96078,"/** 
 * {@inheritDoc}
 * @throws IllegalArgumentException if no suitable Database Connection can be found.
 */
public Object unmarshal(HierarchicalStreamReader arg0,UnmarshallingContext arg1) throws IllegalArgumentException {
  JobConfiguration job=new JobConfiguration();
  while (arg0.hasMoreChildren()) {
    arg0.moveDown();
    if (arg0.getNodeName().equals(ClientTestStrings.PROJECT)) {
      job.setProjectName(arg0.getValue());
    }
 else     if (arg0.getNodeName().equals(ClientTestStrings.PROJECT_VERSION)) {
      job.setProjectVersion(arg0.getValue());
    }
 else     if (arg0.getNodeName().equals(ClientTestStrings.SERVER)) {
      job.setServer(arg0.getValue());
    }
 else     if (arg0.getNodeName().equals(ClientTestStrings.PORT)) {
      job.setPort(arg0.getValue());
    }
 else     if (arg0.getNodeName().equals(ClientTestStrings.RESULTDIR)) {
      job.setResultDir(arg0.getValue());
    }
 else     if (arg0.getNodeName().equals(ClientTestStrings.DBURL)) {
      job.setDb(arg0.getValue());
    }
 else     if (arg0.getNodeName().equals(ClientTestStrings.DB_SCHEME)) {
      job.setDbConnectionName(arg0.getValue());
    }
 else     if (arg0.getNodeName().equals(ClientTestStrings.DB_USER)) {
      job.setDbuser(arg0.getValue());
    }
 else     if (arg0.getNodeName().equals(ClientTestStrings.DB_PW)) {
      job.setDbpw(arg0.getValue());
    }
 else     if (arg0.getNodeName().equals(ClientTestStrings.LANGUAGE)) {
      job.setLanguage(LocaleUtil.convertStrToLocale(arg0.getValue()));
    }
 else     if (arg0.getNodeName().equals(ClientTestStrings.AUT_CONFIG)) {
      job.setAutConfigName(arg0.getValue());
    }
 else     if (arg0.getNodeName().equals(ClientTestStrings.AUT_ID)) {
      job.setAutId(new AutIdentifier(arg0.getValue()));
    }
 else     if (arg0.getNodeName().equals(ClientTestStrings.DATA_DIR)) {
      job.setDataDir(arg0.getValue());
    }
 else     if (arg0.getNodeName().equals(ClientTestStrings.TESTSUITE)) {
      job.setTestSuiteName(arg0.getValue());
    }
 else     if (arg0.getNodeName().equals(ClientTestStrings.TESTJOB)) {
      job.setTestJobName(arg0.getValue());
    }
    arg0.moveUp();
  }
  return job;
}","/** 
 * {@inheritDoc}
 * @throws IllegalArgumentException if no suitable Database Connection can be found.
 */
public Object unmarshal(HierarchicalStreamReader arg0,UnmarshallingContext arg1) throws IllegalArgumentException {
  JobConfiguration job=new JobConfiguration();
  while (arg0.hasMoreChildren()) {
    arg0.moveDown();
    if (arg0.getNodeName().equals(ClientTestStrings.PROJECT)) {
      job.setProjectName(arg0.getValue());
    }
 else     if (arg0.getNodeName().equals(ClientTestStrings.PROJECT_VERSION)) {
      job.setProjectVersion(arg0.getValue());
    }
 else     if (arg0.getNodeName().equals(ClientTestStrings.SERVER)) {
      job.setServer(arg0.getValue());
    }
 else     if (arg0.getNodeName().equals(ClientTestStrings.PORT)) {
      job.setPort(arg0.getValue());
    }
 else     if (arg0.getNodeName().equals(ClientTestStrings.RESULTDIR)) {
      job.setResultDir(arg0.getValue());
    }
 else     if (arg0.getNodeName().equals(ClientTestStrings.DBURL)) {
      String dbURL=arg0.getValue();
      job.setDb(dbURL);
      DatabaseConnectionInfo connectionInfo=getConnectionInfo(dbURL);
      job.setDbscheme(connectionInfo);
    }
 else     if (arg0.getNodeName().equals(ClientTestStrings.DB_SCHEME)) {
      job.setDbConnectionName(arg0.getValue());
    }
 else     if (arg0.getNodeName().equals(ClientTestStrings.DB_USER)) {
      job.setDbuser(arg0.getValue());
    }
 else     if (arg0.getNodeName().equals(ClientTestStrings.DB_PW)) {
      job.setDbpw(arg0.getValue());
    }
 else     if (arg0.getNodeName().equals(ClientTestStrings.LANGUAGE)) {
      job.setLanguage(LocaleUtil.convertStrToLocale(arg0.getValue()));
    }
 else     if (arg0.getNodeName().equals(ClientTestStrings.AUT_CONFIG)) {
      job.setAutConfigName(arg0.getValue());
    }
 else     if (arg0.getNodeName().equals(ClientTestStrings.AUT_ID)) {
      job.setAutId(new AutIdentifier(arg0.getValue()));
    }
 else     if (arg0.getNodeName().equals(ClientTestStrings.DATA_DIR)) {
      job.setDataDir(arg0.getValue());
    }
 else     if (arg0.getNodeName().equals(ClientTestStrings.TESTSUITE)) {
      job.setTestSuiteName(arg0.getValue());
    }
 else     if (arg0.getNodeName().equals(ClientTestStrings.TESTJOB)) {
      job.setTestJobName(arg0.getValue());
    }
    arg0.moveUp();
  }
  return job;
}",0.9631284916201116
96079,"/** 
 * {@inheritDoc} 
 */
public void partOpened(IWorkbenchPartReference partRef){
  if (Constants.TC_BROWSER_ID.equals(partRef.getId())) {
    m_tcb.add(partRef);
    if (m_tcb.size() > 1) {
      setMainTCB(getOpenTCBs().get(0));
    }
    fireStateChanged();
  }
}","/** 
 * {@inheritDoc} 
 */
public void partOpened(IWorkbenchPartReference partRef){
  if (Constants.TC_BROWSER_ID.equals(partRef.getId())) {
    m_tcb.add(partRef);
    if (getOpenTCBs().size() > 0) {
      setMainTCB(getOpenTCBs().get(0));
    }
    fireStateChanged();
  }
}",0.9632352941176472
96080,"/** 
 * {@inheritDoc} 
 */
public void partClosed(IWorkbenchPartReference partRef){
  if (Constants.TC_BROWSER_ID.equals(partRef.getId())) {
    m_tcb.remove(partRef);
    int count=m_tcb.size();
    if (partRef.getPartName().startsWith(Messages.TestCaseBrowserMainPrefix)) {
      if (count > 0) {
        setMainTCB(getOpenTCBs().get(0));
      }
 else {
        m_mainTCB=null;
      }
    }
    if (count == 1) {
      getMainTCB().setViewTitle(Messages.TestCaseBrowser);
    }
    fireStateChanged();
  }
}","/** 
 * {@inheritDoc} 
 */
public void partClosed(IWorkbenchPartReference partRef){
  if (Constants.TC_BROWSER_ID.equals(partRef.getId())) {
    m_tcb.remove(partRef);
    setMainTCB(getOpenTCBs().size() > 0 ? getOpenTCBs().get(0) : null);
    fireStateChanged();
  }
}",0.4846153846153846
96081,"/** 
 * @param mainTCB the mainTCB to set
 */
public void setMainTCB(TestCaseBrowser mainTCB){
  if (m_mainTCB != null) {
    m_mainTCB.setViewTitle(Messages.TestCaseBrowser);
  }
  mainTCB.setViewTitle(Messages.TestCaseBrowserMainPrefix + Messages.TestCaseBrowser);
  m_mainTCB=mainTCB;
}","/** 
 * @param mainTCB the mainTCB to set; may be <code>null</code>.
 */
public void setMainTCB(TestCaseBrowser mainTCB){
  TestCaseBrowser oldMainTCB=m_mainTCB;
  TestCaseBrowser newMainTCB=mainTCB;
  m_mainTCB=mainTCB;
  if (newMainTCB == null) {
    return;
  }
  final String tcbTitle=Messages.TestCaseBrowser;
  final String mainTcbTitle=Messages.TestCaseBrowserMainPrefix + tcbTitle;
  if (oldMainTCB != null) {
    oldMainTCB.setViewTitle(tcbTitle);
  }
  final int tcbCount=getOpenTCBs().size();
  if (tcbCount == 1) {
    newMainTCB.setViewTitle(tcbTitle);
  }
 else   if (tcbCount > 1) {
    newMainTCB.setViewTitle(mainTcbTitle);
  }
}",0.3721925133689839
96082,"/** 
 * {@inheritDoc}
 */
public void createPartControl(Composite parent){
  Composite composite=new Composite(parent,SWT.NONE);
  composite.setLayout(GridLayoutFactory.fillDefaults().create());
  composite.setLayoutData(GridDataFactory.fillDefaults().create());
  final FilteredTree ft=new JBFilteredTree(composite,SWT.MULTI | SWT.H_SCROLL | SWT.V_SCROLL| SWT.BORDER,new JBPatternFilter(),true);
  ComponentNameBrowserContentProvider cp=new ComponentNameBrowserContentProvider();
  setTreeViewer(ft.getViewer());
  ColumnViewerToolTipSupport.enableFor(getTreeViewer());
  getTreeViewer().setContentProvider(cp);
  getTreeViewer().setComparer(new UIIdentitiyElementComparer());
  DecoratingLabelProvider lp=new DecoratingLabelProvider(cp,Plugin.getDefault().getWorkbench().getDecoratorManager().getLabelDecorator());
  getTreeViewer().setLabelProvider(lp);
  getTreeViewer().setUseHashlookup(true);
  getTreeViewer().setAutoExpandLevel(DEFAULT_EXPANSION);
  getTreeViewer().setSorter(new ComponentNameNameViewerSorter());
  getTreeViewer().setComparer(new PersistentObjectComparer());
  getViewSite().setSelectionProvider(getTreeViewer());
  createTreeContextMenu(getViewSite());
  Plugin.getHelpSystem().setHelp(getTreeViewer().getControl(),ContextHelpIds.COMPONENT_NAMES_BROWSER);
  m_treeViewerUpdater=new ComponentNameTreeViewerUpdater(getTreeViewer());
  DataEventDispatcher ded=DataEventDispatcher.getInstance();
  ded.addProjectLoadedListener(this,true);
  ded.addDataChangedListener(this,true);
  ded.addDataChangedListener(m_treeViewerUpdater,true);
  if (GeneralStorage.getInstance().getProject() != null) {
    handleProjectLoaded();
  }
}","/** 
 * {@inheritDoc}
 */
public void createPartControl(Composite parent){
  Composite composite=new Composite(parent,SWT.NONE);
  composite.setLayout(GridLayoutFactory.fillDefaults().create());
  composite.setLayoutData(GridDataFactory.fillDefaults().create());
  final FilteredTree ft=new JBFilteredTree(composite,SWT.MULTI | SWT.H_SCROLL | SWT.V_SCROLL| SWT.BORDER,new JBPatternFilter(),true);
  ComponentNameBrowserContentProvider cp=new ComponentNameBrowserContentProvider();
  setTreeViewer(ft.getViewer());
  getTreeViewer().setContentProvider(cp);
  getTreeViewer().setComparer(new UIIdentitiyElementComparer());
  getTreeViewer().setLabelProvider(cp);
  getTreeViewer().setUseHashlookup(true);
  getTreeViewer().setAutoExpandLevel(DEFAULT_EXPANSION);
  getTreeViewer().setSorter(new ComponentNameNameViewerSorter());
  getTreeViewer().setComparer(new PersistentObjectComparer());
  getViewSite().setSelectionProvider(getTreeViewer());
  createTreeContextMenu(getViewSite());
  Plugin.getHelpSystem().setHelp(getTreeViewer().getControl(),ContextHelpIds.COMPONENT_NAMES_BROWSER);
  m_treeViewerUpdater=new ComponentNameTreeViewerUpdater(getTreeViewer());
  DataEventDispatcher ded=DataEventDispatcher.getInstance();
  ded.addProjectLoadedListener(this,true);
  ded.addDataChangedListener(this,true);
  ded.addDataChangedListener(m_treeViewerUpdater,true);
  if (GeneralStorage.getInstance().getProject() != null) {
    handleProjectLoaded();
  }
}",0.9233247422680412
96083,"/** 
 * {@inheritDoc} 
 */
public void postExecuteSuccess(String commandId,Object returnValue){
  completeProjectCheck();
}","/** 
 * {@inheritDoc} 
 */
public void postExecuteSuccess(String commandId,Object returnValue){
  if (isInteresting(commandId)) {
    completeProjectCheck();
  }
}",0.8601398601398601
96084,"/** 
 * {@inheritDoc} 
 */
public void postExecuteFailure(String commandId,ExecutionException exception){
  completeProjectCheck();
}","/** 
 * {@inheritDoc} 
 */
public void postExecuteFailure(String commandId,ExecutionException exception){
  if (isInteresting(commandId)) {
    completeProjectCheck();
  }
}",0.869281045751634
96085,"/** 
 * private constructor
 */
private CompletenessBP(){
  DataEventDispatcher ded=DataEventDispatcher.getInstance();
  ded.addLanguageChangedListener(this,false);
  ded.addProjectOpenedListener(this);
  ICommandService commandService=(ICommandService)PlatformUI.getWorkbench().getService(ICommandService.class);
  IExecutionListener saveListener=new IExecutionListener(){
    /** 
 * {@inheritDoc} 
 */
    public void preExecute(    String commandId,    ExecutionEvent event){
    }
    /** 
 * {@inheritDoc} 
 */
    public void postExecuteSuccess(    String commandId,    Object returnValue){
      completeProjectCheck();
    }
    /** 
 * {@inheritDoc} 
 */
    public void postExecuteFailure(    String commandId,    ExecutionException exception){
      completeProjectCheck();
    }
    /** 
 * {@inheritDoc} 
 */
    public void notHandled(    String commandId,    NotHandledException exception){
    }
  }
;
  commandService.getCommand(IWorkbenchCommandConstants.FILE_SAVE).addExecutionListener(saveListener);
  commandService.getCommand(IWorkbenchCommandConstants.FILE_SAVE_ALL).addExecutionListener(saveListener);
}","/** 
 * private constructor
 */
private CompletenessBP(){
  DataEventDispatcher ded=DataEventDispatcher.getInstance();
  ded.addLanguageChangedListener(this,false);
  ded.addProjectOpenedListener(this);
  ICommandService commandService=(ICommandService)PlatformUI.getWorkbench().getService(ICommandService.class);
  IExecutionListener saveListener=new IExecutionListener(){
    /** 
 * {@inheritDoc} 
 */
    public void preExecute(    String commandId,    ExecutionEvent event){
    }
    /** 
 * {@inheritDoc} 
 */
    public void postExecuteSuccess(    String commandId,    Object returnValue){
      if (isInteresting(commandId)) {
        completeProjectCheck();
      }
    }
    /** 
 * {@inheritDoc} 
 */
    public void postExecuteFailure(    String commandId,    ExecutionException exception){
      if (isInteresting(commandId)) {
        completeProjectCheck();
      }
    }
    /** 
 * {@inheritDoc} 
 */
    public void notHandled(    String commandId,    NotHandledException exception){
    }
    /** 
 * whether the corresponding command is ""interesting"" 
 */
    private boolean isInteresting(    String commandId){
      boolean isInteresting=false;
      if (IWorkbenchCommandConstants.FILE_SAVE.equals(commandId) || IWorkbenchCommandConstants.FILE_SAVE_ALL.equals(commandId)) {
        isInteresting=true;
      }
      return isInteresting;
    }
  }
;
  commandService.addExecutionListener(saveListener);
  commandService.addExecutionListener(saveListener);
}",0.7931034482758621
96086,"/** 
 * Updates this view. Causes the view to get and display its data.
 */
private void updateView(){
  clearTableViewer();
  fillParamCombo();
  fillDataSetCombo();
  fillLanguageCombo();
  setPriorComboSelection();
  if (getParamInterfaceObj() != null && isNodeValid(getParamInterfaceObj())) {
    getTableViewer().setInput(getInputForTable(getParamInterfaceObj()));
    createTable();
  }
 else {
    getTableViewer().setInput(null);
  }
}","/** 
 * Updates this view. Causes the view to get and display its data.
 */
private void updateView(){
  clearTableViewer();
  fillParamCombo();
  fillDataSetCombo();
  fillLanguageCombo();
  setPriorComboSelection();
  IParameterInterfacePO paramObj=getParamInterfaceObj();
  if (paramObj != null && isNodeValid(paramObj)) {
    getTableViewer().setInput(getInputForTable(paramObj));
    createTable();
  }
 else {
    getTableViewer().setInput(null);
  }
}",0.6725860155382908
96087,"/** 
 * {@inheritDoc}
 */
public void dispose(){
  final DataEventDispatcher dispatcher=DataEventDispatcher.getInstance();
  dispatcher.removeParamChangedListener(this);
  dispatcher.removeLanguageChangedListener(this);
  dispatcher.removeProjectLoadedListener(this);
  dispatcher.removeParamChangedListener(this);
  super.dispose();
}","/** 
 * {@inheritDoc}
 */
public void dispose(){
  final DataEventDispatcher dispatcher=DataEventDispatcher.getInstance();
  dispatcher.removeParamChangedListener(this);
  dispatcher.removeLanguageChangedListener(this);
  dispatcher.removeProjectLoadedListener(this);
  super.dispose();
}",0.9245585874799358
96088,"/** 
 * {@inheritDoc} 
 */
protected boolean isEditorOpen(IParameterInterfacePO paramObj){
  if (paramObj != null) {
    IParamNodePO paramNode=getParamNodePO(paramObj);
    INodePO node=paramNode;
    if (paramNode instanceof ICapPO || paramNode instanceof IExecTestCasePO) {
      node=paramNode.getParentNode();
    }
    List<IEditorReference> editors=Plugin.getAllEditors();
    for (    IEditorReference reference : editors) {
      try {
        if (reference.getEditorInput() instanceof NodeEditorInput) {
          INodePO editorInputNode=((NodeEditorInput)reference.getEditorInput()).getNode();
          if (editorInputNode != null && editorInputNode.equals(node)) {
            return true;
          }
        }
      }
 catch (      PartInitException e) {
      }
    }
  }
  return false;
}","/** 
 * {@inheritDoc} 
 */
protected boolean isEditorOpen(IParameterInterfacePO paramObj){
  if (paramObj != null) {
    Object inputNode=paramObj;
    if (paramObj instanceof ICapPO || paramObj instanceof IExecTestCasePO) {
      inputNode=getParamNodePO(paramObj).getParentNode();
    }
    List<IEditorReference> editors=Plugin.getAllEditors();
    for (    IEditorReference reference : editors) {
      try {
        if (reference.getEditorInput() instanceof NodeEditorInput) {
          INodePO editorInputNode=((NodeEditorInput)reference.getEditorInput()).getNode();
          if (editorInputNode != null && editorInputNode.equals(inputNode)) {
            return true;
          }
        }
      }
 catch (      PartInitException e) {
      }
    }
  }
  return false;
}",0.8414403032217309
96089,"/** 
 * {@inheritDoc} 
 */
protected boolean isNodeValid(IParameterInterfacePO paramObj){
  return getParamNodePO(paramObj).isValid();
}","/** 
 * {@inheritDoc} 
 */
protected boolean isNodeValid(IParameterInterfacePO paramObj){
  return paramObj instanceof IParamNodePO && getParamNodePO(paramObj).isValid();
}",0.8831168831168831
96090,"/** 
 * private constructor
 */
private CompletenessBP(){
  DataEventDispatcher ded=DataEventDispatcher.getInstance();
  ded.addLanguageChangedListener(this,false);
  ded.addProjectOpenedListener(this);
  ICommandService commandService=(ICommandService)PlatformUI.getWorkbench().getService(ICommandService.class);
  IExecutionListener saveListener=new IExecutionListener(){
    /** 
 * {@inheritDoc} 
 */
    public void preExecute(    String commandId,    ExecutionEvent event){
    }
    /** 
 * {@inheritDoc} 
 */
    public void postExecuteSuccess(    String commandId,    Object returnValue){
      if (isInteresting(commandId)) {
        completeProjectCheck();
      }
    }
    /** 
 * {@inheritDoc} 
 */
    public void postExecuteFailure(    String commandId,    ExecutionException exception){
      if (isInteresting(commandId)) {
        completeProjectCheck();
      }
    }
    /** 
 * {@inheritDoc} 
 */
    public void notHandled(    String commandId,    NotHandledException exception){
    }
    /** 
 * whether the corresponding command is ""interesting"" 
 */
    private boolean isInteresting(    String commandId){
      boolean isInteresting=false;
      if (IWorkbenchCommandConstants.FILE_SAVE.equals(commandId) || IWorkbenchCommandConstants.FILE_SAVE_ALL.equals(commandId)) {
        isInteresting=true;
      }
      return isInteresting;
    }
  }
;
  commandService.addExecutionListener(saveListener);
  commandService.addExecutionListener(saveListener);
}","/** 
 * private constructor
 */
private CompletenessBP(){
  DataEventDispatcher ded=DataEventDispatcher.getInstance();
  ded.addLanguageChangedListener(this,false);
  ded.addProjectOpenedListener(this);
  ICommandService commandService=(ICommandService)PlatformUI.getWorkbench().getService(ICommandService.class);
  IExecutionListener saveListener=new IExecutionListener(){
    /** 
 * {@inheritDoc} 
 */
    public void preExecute(    String commandId,    ExecutionEvent event){
    }
    /** 
 * {@inheritDoc} 
 */
    public void postExecuteSuccess(    String commandId,    Object returnValue){
      if (isInteresting(commandId)) {
        completeProjectCheck();
      }
    }
    /** 
 * {@inheritDoc} 
 */
    public void postExecuteFailure(    String commandId,    ExecutionException exception){
      if (isInteresting(commandId)) {
        completeProjectCheck();
      }
    }
    /** 
 * {@inheritDoc} 
 */
    public void notHandled(    String commandId,    NotHandledException exception){
    }
    /** 
 * whether the corresponding command is ""interesting"" 
 */
    private boolean isInteresting(    String commandId){
      boolean isInteresting=false;
      if (IWorkbenchCommandConstants.FILE_SAVE.equals(commandId) || IWorkbenchCommandConstants.FILE_SAVE_ALL.equals(commandId)) {
        isInteresting=true;
      }
      return isInteresting;
    }
  }
;
  commandService.addExecutionListener(saveListener);
}",0.9817931982136724
96091,"/** 
 * Tries to find a menu in the menubar.
 * @param mb the menu bar
 * @param idx the index of the menu to find
 * @return the menu
 */
public static JMenu findMenu(JMenuBar mb,int idx){
  List visibleSubMenus=new ArrayList();
  MenuElement[] subElements=mb.getSubElements();
  for (int i=0; i < subElements.length; ++i) {
    if (subElements[i] instanceof JMenu) {
      JMenu menu=(JMenu)subElements[i];
      if (menu != null && menu.isShowing()) {
        visibleSubMenus.add(menu);
      }
    }
  }
  if (idx >= visibleSubMenus.size()) {
    return null;
  }
  return (JMenu)visibleSubMenus.get(idx);
}","/** 
 * Tries to find a menu in the menubar.
 * @param mb the menu bar
 * @param idx the index of the menu to find
 * @return the menu, or <code>null</code> if not found
 */
public static JMenu findMenu(JMenuBar mb,int idx){
  List visibleSubMenus=new ArrayList();
  MenuElement[] subElements=mb.getSubElements();
  for (int i=0; i < subElements.length; ++i) {
    if (subElements[i] instanceof JMenu) {
      JMenu menu=(JMenu)subElements[i];
      if (menu != null && menu.isShowing()) {
        visibleSubMenus.add(menu);
      }
    }
  }
  if (idx >= visibleSubMenus.size() || idx < 0) {
    return null;
  }
  return (JMenu)visibleSubMenus.get(idx);
}",0.9637223974763408
96092,"/** 
 * Closes the given item in the given menuBar (if open)
 * @param robot the robot
 * @param menuBar the menu bar
 * @param item the item to close
 */
public static void closeMenu(IRobot robot,JMenuBar menuBar,String item){
  final int index=getItemNumber(menuBar,item);
  if (menuBar.getSelectionModel().getSelectedIndex() == index) {
    JMenu menu=findMenu(menuBar,index);
    clickMenuItem(robot,menu);
  }
}","/** 
 * Closes the given item in the given menuBar (if open)
 * @param robot the robot
 * @param menuBar the menu bar
 * @param item the item to close
 */
public static void closeMenu(IRobot robot,JMenuBar menuBar,String item){
  final int index=getItemNumber(menuBar,item);
  if (menuBar.getSelectionModel().getSelectedIndex() == index) {
    JMenu menu=findMenu(menuBar,index);
    if (menu != null) {
      clickMenuItem(robot,menu);
    }
  }
}",0.9629629629629628
96093,"/** 
 * get the eventExecTC for a given eventType
 * @param eventType eventType for wanted eventExecTC
 * @return the eventExecTC for given eventType or null
 */
public IEventExecTestCasePO getEventExecTC(String eventType){
  return getEventExecTcMap().get(eventType);
}","/** 
 * get the eventExecTC for a given eventType
 * @param eventType eventType for wanted eventExecTC
 * @return the eventExecTC for given eventType or null
 */
public IEventExecTestCasePO getEventExecTC(String eventType){
  setParents(getEventExecTcMap().values());
  return getEventExecTcMap().get(eventType);
}",0.8561643835616438
96094,"/** 
 * @return all EventExecTestCases of this SpecTestCasePO.
 */
@Transient public Collection<IEventExecTestCasePO> getAllEventEventExecTC(){
  Collection<IEventExecTestCasePO> evHandlers=getEventExecTcMap().values();
  for (  IEventExecTestCasePO evTc : evHandlers) {
    evTc.setParentNode(this);
  }
  return Collections.unmodifiableCollection(evHandlers);
}","/** 
 * @return all EventExecTestCases of this SpecTestCasePO.
 */
@Transient public Collection<IEventExecTestCasePO> getAllEventEventExecTC(){
  Collection<IEventExecTestCasePO> evHandlers=getEventExecTcMap().values();
  setParents(evHandlers);
  return Collections.unmodifiableCollection(evHandlers);
}",0.7106446776611695
96095,"/** 
 * find the next eventHandler for given eventType
 * @param eventType eventType for eventHandler to find
 * @return the next eventHandler for given eventType
 */
@SuppressWarnings(""String_Node_Str"") private EventObject getEventObject(String eventType){
  List<INodePO> nodeList=IteratorUtils.toList(m_execStack.peek().getExecNode().getNodeListIterator());
  ICapPO cap=(ICapPO)nodeList.get(m_execStack.peek().getIndex());
  ExecStackMarker marker=new ExecStackMarker(m_execStack,cap);
  EventObject eventObj=null;
  int startIndex=m_execStack.size() - 1;
  for (int i=startIndex; i > 0 && i < m_execStack.size(); --i) {
    ExecObject obj=m_execStack.get(i);
    IExecTestCasePO execTc=(IExecTestCasePO)obj.getExecNode();
    Map<String,IEventExecTestCasePO> eventMap=execTc.getEventMap();
    if (!isHandlingError(i) && eventMap.containsKey(eventType)) {
      IEventExecTestCasePO eventExecTc=eventMap.get(eventType);
      if (!(eventExecTc.getReentryProp().equals(ReentryProperty.RETRY) && m_markerToNumRetriesMap.containsKey(marker) && m_markerToNumRetriesMap.get(marker) >= eventExecTc.getMaxRetries())) {
        eventObj=new EventObject(eventExecTc,i);
        break;
      }
      eventExecTc=null;
    }
  }
  if (eventObj == null) {
    IEventExecTestCasePO eventExecTc=DefaultEventHandler.getDefaultEventHandler(eventType,m_root);
    Validate.notNull(eventExecTc,Messages.MissingDefaultEventHandlerForEventType + eventType + StringConstants.DOT);
    eventObj=new EventObject(eventExecTc,0);
  }
  return eventObj;
}","/** 
 * find the next eventHandler for given eventType
 * @param eventType eventType for eventHandler to find
 * @return the next eventHandler for given eventType
 */
@SuppressWarnings(""String_Node_Str"") private EventObject getEventObject(String eventType){
  List<INodePO> nodeList=IteratorUtils.toList(m_execStack.peek().getExecNode().getNodeListIterator());
  ICapPO cap=(ICapPO)nodeList.get(m_execStack.peek().getIndex());
  ExecStackMarker marker=new ExecStackMarker(m_execStack,cap);
  EventObject eventObj=null;
  int startIndex=m_execStack.size() - 1;
  for (int i=startIndex; i > 0 && i < m_execStack.size(); --i) {
    ExecObject obj=m_execStack.get(i);
    IExecTestCasePO execTc=(IExecTestCasePO)obj.getExecNode();
    IEventExecTestCasePO eventExecTc=execTc.getEventExecTC(eventType);
    if (!isHandlingError(i) && eventExecTc != null) {
      if (!(eventExecTc.getReentryProp().equals(ReentryProperty.RETRY) && m_markerToNumRetriesMap.containsKey(marker) && m_markerToNumRetriesMap.get(marker) >= eventExecTc.getMaxRetries())) {
        eventObj=new EventObject(eventExecTc,i);
        break;
      }
      eventExecTc=null;
    }
  }
  if (eventObj == null) {
    IEventExecTestCasePO eventExecTc=DefaultEventHandler.getDefaultEventHandler(eventType,m_root);
    Validate.notNull(eventExecTc,Messages.MissingDefaultEventHandlerForEventType + eventType + StringConstants.DOT);
    eventObj=new EventObject(eventExecTc,0);
  }
  return eventObj;
}",0.9368948247078464
96096,"/** 
 * {@inheritDoc} 
 */
public void decorate(Object element,IDecoration decoration){
  final INodePO node=(INodePO)element;
  if (ProblemFactory.hasProblem(node)) {
    IProblem worstProblem=ProblemFactory.getWorstProblem(node.getProblems());
switch (worstProblem.getStatus().getSeverity()) {
case IStatus.WARNING:
      decoration.addOverlay(IconConstants.WARNING_IMAGE_DESCRIPTOR);
    break;
case IStatus.ERROR:
  decoration.addOverlay(IconConstants.ERROR_IMAGE_DESCRIPTOR);
break;
default :
break;
}
}
}","/** 
 * {@inheritDoc} 
 */
public void decorate(Object element,IDecoration decoration){
  final INodePO node=(INodePO)element;
  IProblem worstProblem=ProblemFactory.getWorstProblem(node.getProblems());
  if (worstProblem != null) {
switch (worstProblem.getStatus().getSeverity()) {
case IStatus.WARNING:
      decoration.addOverlay(IconConstants.WARNING_IMAGE_DESCRIPTOR);
    break;
case IStatus.ERROR:
  decoration.addOverlay(IconConstants.ERROR_IMAGE_DESCRIPTOR);
break;
default :
break;
}
}
}",0.7964250248262165
96097,"/** 
 * {@inheritDoc}
 */
public void handleEditorDirtyStateChanged(IJBEditor gdEditor,boolean isDirty){
  if (gdEditor == this) {
    m_revertEditorChangesAction.setEnabled(isDirty);
  }
}","/** 
 * {@inheritDoc}
 */
public void handleEditorDirtyStateChanged(IJBEditor gdEditor,boolean isDirty){
  if (gdEditor == this) {
    IEvaluationService service=(IEvaluationService)getSite().getService(IEvaluationService.class);
    service.requestEvaluation(EditorPartPropertyTester.FQN_IS_DIRTY);
  }
}",0.5870445344129555
96098,"/** 
 * Creates the initial Context of this Editor.<br> Subclasses may override this method. 
 * @param parent Composite
 */
public void createPartControlImpl(Composite parent){
  createSashForm(parent);
  setParentComposite(parent);
  setInitialInput();
  ColumnViewerToolTipSupport.enableFor(getTreeViewer());
  DecoratingCellLabelProvider lp=new DecoratingCellLabelProvider(new TooltipLabelProvider(),Plugin.getDefault().getWorkbench().getDecoratorManager().getLabelDecorator());
  getTreeViewer().setLabelProvider(lp);
  final DataEventDispatcher dispatcher=DataEventDispatcher.getInstance();
  dispatcher.addPropertyChangedListener(this,true);
  addDragAndDropSupport(DND.DROP_MOVE,new Transfer[]{LocalSelectionTransfer.getInstance()});
  getEditorHelper().addListeners();
  setActionHandlers();
  addTreeDoubleClickListener(RCPCommandIDs.REFERENCE_TC_COMMAND_ID);
  GuiEventDispatcher.getInstance().addEditorDirtyStateListener(this,true);
  DataEventDispatcher.getInstance().addDataChangedListener(new CentralTestDataUpdateListener(),false);
}","/** 
 * Creates the initial Context of this Editor.<br> Subclasses may override this method. 
 * @param parent Composite
 */
public void createPartControlImpl(Composite parent){
  createSashForm(parent);
  setParentComposite(parent);
  setInitialInput();
  ColumnViewerToolTipSupport.enableFor(getTreeViewer());
  DecoratingCellLabelProvider lp=new DecoratingCellLabelProvider(new TooltipLabelProvider(),Plugin.getDefault().getWorkbench().getDecoratorManager().getLabelDecorator());
  getTreeViewer().setLabelProvider(lp);
  DataEventDispatcher ded=DataEventDispatcher.getInstance();
  ded.addPropertyChangedListener(this,true);
  addDragAndDropSupport(DND.DROP_MOVE,new Transfer[]{LocalSelectionTransfer.getInstance()});
  getEditorHelper().addListeners();
  setActionHandlers();
  addTreeDoubleClickListener(RCPCommandIDs.REFERENCE_TC_COMMAND_ID);
  GuiEventDispatcher.getInstance().addEditorDirtyStateListener(this,true);
  ded.addDataChangedListener(new CentralTestDataUpdateListener(),false);
  ded.addParamChangedListener(this,true);
}",0.9492822966507176
96099,"/** 
 * Cleanup on closing.
 */
public void dispose(){
  try {
    if (CAPRecordedCommand.getRecordListener() == this) {
      CAPRecordedCommand.setRecordListener(null);
      TestExecutionContributor.getInstance().getClientTest().resetToTesting();
    }
    if (getEditorSite() != null && getEditorSite().getPage() != null) {
      DataEventDispatcher.getInstance().fireRecordModeStateChanged(RecordModeState.notRunning);
      removeGlobalActionHandler();
    }
  }
  finally {
    super.dispose();
  }
}","/** 
 * Cleanup on closing.
 */
public void dispose(){
  try {
    DataEventDispatcher ded=DataEventDispatcher.getInstance();
    if (CAPRecordedCommand.getRecordListener() == this) {
      CAPRecordedCommand.setRecordListener(null);
      TestExecutionContributor.getInstance().getClientTest().resetToTesting();
    }
    if (getEditorSite() != null && getEditorSite().getPage() != null) {
      ded.fireRecordModeStateChanged(RecordModeState.notRunning);
      removeGlobalActionHandler();
    }
    ded.removeParamChangedListener(this);
  }
  finally {
    super.dispose();
  }
}",0.6317722681359045
96100,"/** 
 * {@inheritDoc} 
 */
public Object execute(ExecutionEvent event) throws ExecutionException {
  AutStarter autAgentInstance=AutStarter.getInstance();
  if (autAgentInstance.getCommunicator() == null) {
    final int port=Platform.getPreferencesService().getInt(Activator.PLUGIN_ID,PreferenceInitializer.PREF_EMBEDDED_AGENT_PORT,PreferenceInitializer.DEFAULT_EMBEDDED_AGENT_PORT,null);
    try {
      autAgentInstance.start(port,false,Verbosity.QUIET,false);
    }
 catch (    Exception e) {
      ExecutionException execException=new ExecutionException(""String_Node_Str"",e);
      StatusManager.getManager().handle(new Status(IStatus.ERROR,Activator.PLUGIN_ID,I18n.getString(""String_Node_Str"",new String[]{String.valueOf(port)}),e),StatusManager.SHOW);
      throw execException;
    }
  }
  String hostname=EMBEDDED_AGENT_HOSTNAME;
  int port=autAgentInstance.getCommunicator().getLocalPort();
  Command connectToAutAgentCommand=CommandHelper.getCommandService().getCommand(RCPCommandIDs.CONNECT_TO_AUT_AGENT_COMMAND_ID);
  Map<String,String> parameters=new HashMap<String,String>();
  parameters.put(AUTAgentConnectHandler.AUT_AGENT_NAME_TO_CONNECT,hostname);
  parameters.put(AUTAgentConnectHandler.AUT_AGENT_PORT_TO_CONNECT,String.valueOf(port));
  parameters.put(RadioState.PARAMETER_ID,hostname + StringConstants.COLON + port);
  CommandHelper.executeParameterizedCommand(ParameterizedCommand.generateCommand(connectToAutAgentCommand,parameters));
  return null;
}","/** 
 * {@inheritDoc} 
 */
public Object execute(ExecutionEvent event) throws ExecutionException {
  AutStarter autAgentInstance=AutStarter.getInstance();
  if (autAgentInstance.getCommunicator() == null) {
    final int port=Platform.getPreferencesService().getInt(Activator.PLUGIN_ID,PreferenceInitializer.PREF_EMBEDDED_AGENT_PORT,PreferenceInitializer.DEFAULT_EMBEDDED_AGENT_PORT,null);
    try {
      autAgentInstance.start(port,false,Verbosity.QUIET,false);
    }
 catch (    Exception e) {
      ExecutionException execException=new ExecutionException(""String_Node_Str"",e);
      StatusManager.getManager().handle(new Status(IStatus.ERROR,Activator.PLUGIN_ID,I18n.getString(""String_Node_Str"",new String[]{String.valueOf(port)}),e),StatusManager.SHOW);
      throw execException;
    }
  }
  String hostname=EMBEDDED_AGENT_HOSTNAME;
  int port=autAgentInstance.getCommunicator().getLocalPort();
  Command connectToAutAgentCommand=CommandHelper.getCommandService().getCommand(RCPCommandIDs.CONNECT_TO_AUT_AGENT_COMMAND_ID);
  Map<String,String> parameters=new HashMap<String,String>();
  parameters.put(AUTAgentConnectHandler.AUT_AGENT_NAME_TO_CONNECT,hostname);
  parameters.put(AUTAgentConnectHandler.AUT_AGENT_PORT_TO_CONNECT,String.valueOf(port));
  CommandHelper.executeParameterizedCommand(ParameterizedCommand.generateCommand(connectToAutAgentCommand,parameters));
  return null;
}",0.8839316835134193
96101,"/** 
 * {@inheritDoc}
 */
public boolean operate(ITreeTraverserContext<INodePO> ctx,INodePO parent,INodePO node,boolean alreadyVisited){
  Class<? extends INodePO> nodeType=null;
  if (node instanceof ICategoryPO || node instanceof ISpecTestCasePO || node instanceof ICapPO|| node instanceof ITestSuitePO|| node instanceof IExecTestCasePO|| node instanceof ITestJobPO|| node instanceof IRefTestSuitePO|| node instanceof IComponentNamePO|| node instanceof IEventExecTestCasePO) {
    nodeType=node.getClass();
  }
  if (nodeType != null) {
    Integer ccount=getAmount().get(nodeType);
    if (ccount == null) {
      ccount=new Integer(0);
    }
    Integer nCount=ccount + 1;
    getAmount().put(nodeType,nCount);
    getProgressMonitor().worked(1);
    if (getProgressMonitor().isCanceled()) {
      getProgressMonitor().done();
      throw new OperationCanceledException();
    }
  }
  return !alreadyVisited;
}","/** 
 * {@inheritDoc}
 */
public boolean operate(ITreeTraverserContext<INodePO> ctx,INodePO parent,INodePO node,boolean alreadyVisited){
  if (node instanceof IProjectPO) {
    return !alreadyVisited;
  }
  long currentProjectID=GeneralStorage.getInstance().getProject().getId();
  long nodeParentProjectID=node.getParentProjectId();
  if (currentProjectID != nodeParentProjectID) {
    return alreadyVisited;
  }
  Class<? extends INodePO> nodeType=null;
  if (node instanceof ICategoryPO || node instanceof ISpecTestCasePO || node instanceof ICapPO|| node instanceof ITestSuitePO|| node instanceof IExecTestCasePO|| node instanceof ITestJobPO|| node instanceof IRefTestSuitePO|| node instanceof IEventExecTestCasePO) {
    nodeType=node.getClass();
  }
  if (nodeType != null) {
    Integer ccount=getAmount().get(nodeType);
    if (ccount == null) {
      ccount=new Integer(0);
    }
    Integer nCount=ccount + 1;
    getAmount().put(nodeType,nCount);
    getProgressMonitor().worked(1);
    if (getProgressMonitor().isCanceled()) {
      getProgressMonitor().done();
      throw new OperationCanceledException();
    }
  }
  return !alreadyVisited;
}",0.8492753623188406
96102,"/** 
 * {@inheritDoc}
 */
public boolean operate(ITreeTraverserContext<INodePO> ctx,INodePO parent,INodePO node,boolean alreadyVisited){
  Class<? extends INodePO> nodeType=null;
  if (node instanceof ICategoryPO || node instanceof ISpecTestCasePO || node instanceof ICapPO|| node instanceof ITestSuitePO|| node instanceof IExecTestCasePO|| node instanceof ITestJobPO|| node instanceof IRefTestSuitePO|| node instanceof IComponentNamePO|| node instanceof IEventExecTestCasePO) {
    nodeType=node.getClass();
  }
  if (nodeType != null) {
    Integer ccount=getAmount().get(nodeType);
    if (ccount == null) {
      ccount=new Integer(0);
    }
    Integer nCount=ccount + 1;
    getAmount().put(nodeType,nCount);
    getProgressMonitor().worked(1);
    if (getProgressMonitor().isCanceled()) {
      getProgressMonitor().done();
      throw new OperationCanceledException();
    }
  }
  return !alreadyVisited;
}","/** 
 * {@inheritDoc}
 */
public boolean operate(ITreeTraverserContext<INodePO> ctx,INodePO parent,INodePO node,boolean alreadyVisited){
  if (node instanceof IProjectPO) {
    return !alreadyVisited;
  }
  long currentProjectID=GeneralStorage.getInstance().getProject().getId();
  long nodeParentProjectID=node.getParentProjectId();
  if (currentProjectID != nodeParentProjectID) {
    return alreadyVisited;
  }
  Class<? extends INodePO> nodeType=null;
  if (node instanceof ICategoryPO || node instanceof ISpecTestCasePO || node instanceof ICapPO|| node instanceof ITestSuitePO|| node instanceof IExecTestCasePO|| node instanceof ITestJobPO|| node instanceof IRefTestSuitePO|| node instanceof IEventExecTestCasePO) {
    nodeType=node.getClass();
  }
  if (nodeType != null) {
    Integer ccount=getAmount().get(nodeType);
    if (ccount == null) {
      ccount=new Integer(0);
    }
    Integer nCount=ccount + 1;
    getAmount().put(nodeType,nCount);
    getProgressMonitor().worked(1);
    if (getProgressMonitor().isCanceled()) {
      getProgressMonitor().done();
      throw new OperationCanceledException();
    }
  }
  return !alreadyVisited;
}",0.8492753623188406
96103,"/** 
 * This method will load the class which implements the   {@link IMonitoring} interface, and will invoke the ""getAgent"" method. 
 * @param parameters The AutConfigMap
 * @return agentString The agent String like -javaagent:myagent.jaror null if the monitoring agent String could't be generated
 */
protected String getMonitoringAgent(Map parameters){
  String autId=(String)parameters.get(AutConfigConstants.AUT_ID);
  MonitoringDataStore mds=MonitoringDataStore.getInstance();
  boolean duplicate=MonitoringUtil.checkForDuplicateAutID(autId);
  if (!duplicate) {
    mds.putConfigMap(autId,parameters);
  }
  String agentString=null;
  if (shouldAndCanRunWithMonitoring(parameters)) {
    String monitoringImplClass=(String)parameters.get(MonitoringConstants.AGENT_CLASS);
    String bundleId=(String)parameters.get(MonitoringConstants.BUNDLE_ID);
    try {
      Bundle bundle=Platform.getBundle(bundleId);
      if (bundle == null) {
        LOG.error(""String_Node_Str"");
        return null;
      }
      Class<?> monitoringClass=bundle.loadClass(monitoringImplClass);
      Constructor<?> constructor=monitoringClass.getConstructor();
      IMonitoring agentInstance=(IMonitoring)constructor.newInstance();
      agentInstance.setAutId(autId);
      agentInstance.setInstallDir(FileLocator.getBundleFile(bundle));
      agentString=agentInstance.createAgent();
      if (!duplicate) {
        mds.putMonitoringAgent(autId,agentInstance);
      }
    }
 catch (    InstantiationException e) {
      LOG.error(""String_Node_Str"",e);
    }
catch (    IllegalAccessException e) {
      LOG.error(""String_Node_Str"",e);
    }
catch (    SecurityException e) {
      LOG.error(""String_Node_Str"",e);
    }
catch (    NoSuchMethodException e) {
      LOG.error(""String_Node_Str"",e);
    }
catch (    IllegalArgumentException e) {
      LOG.error(""String_Node_Str"",e);
    }
catch (    InvocationTargetException e) {
      LOG.error(""String_Node_Str"",e);
    }
catch (    ClassNotFoundException e) {
      LOG.error(""String_Node_Str"",e);
    }
catch (    IOException e) {
      LOG.error(""String_Node_Str"",e);
    }
  }
  return agentString;
}","/** 
 * This method will load the class which implements the   {@link IMonitoring} interface, and will invoke the ""getAgent"" method. 
 * @param parameters The AutConfigMap
 * @return agentString The agent String like -javaagent:myagent.jaror null if the monitoring agent String couldn't be generated
 */
protected String getMonitoringAgent(Map parameters){
  String autId=(String)parameters.get(AutConfigConstants.AUT_ID);
  MonitoringDataStore mds=MonitoringDataStore.getInstance();
  boolean duplicate=MonitoringUtil.checkForDuplicateAutID(autId);
  if (!duplicate) {
    mds.putConfigMap(autId,parameters);
  }
  String agentString=null;
  String monitoringImplClass=(String)parameters.get(MonitoringConstants.AGENT_CLASS);
  String bundleId=(String)parameters.get(MonitoringConstants.BUNDLE_ID);
  try {
    Bundle bundle=Platform.getBundle(bundleId);
    if (bundle == null) {
      LOG.error(""String_Node_Str"");
      return null;
    }
    Class<?> monitoringClass=bundle.loadClass(monitoringImplClass);
    Constructor<?> constructor=monitoringClass.getConstructor();
    IMonitoring agentInstance=(IMonitoring)constructor.newInstance();
    agentInstance.setAutId(autId);
    agentInstance.setInstallDir(FileLocator.getBundleFile(bundle));
    agentString=agentInstance.createAgent();
    if (!duplicate) {
      mds.putMonitoringAgent(autId,agentInstance);
    }
  }
 catch (  InstantiationException e) {
    LOG.error(""String_Node_Str"",e);
  }
catch (  IllegalAccessException e) {
    LOG.error(""String_Node_Str"",e);
  }
catch (  SecurityException e) {
    LOG.error(""String_Node_Str"",e);
  }
catch (  NoSuchMethodException e) {
    LOG.error(""String_Node_Str"",e);
  }
catch (  IllegalArgumentException e) {
    LOG.error(""String_Node_Str"",e);
  }
catch (  InvocationTargetException e) {
    LOG.error(""String_Node_Str"",e);
  }
catch (  ClassNotFoundException e) {
    LOG.error(""String_Node_Str"",e);
  }
catch (  IOException e) {
    LOG.error(""String_Node_Str"",e);
  }
  return agentString;
}",0.950337512054002
96104,"/** 
 * Sets -javaagent and JRE arguments as SUN environment variable.
 * @param parameters The parameters for starting the AUT
 * @return the _JAVA_OPTIONS environment variable including -javaagentand jre arguments
 */
protected String setJavaOptions(Map parameters){
  StringBuffer sb=new StringBuffer();
  if (isRunningFromExecutable(parameters)) {
    Locale locale=(Locale)parameters.get(IStartAut.LOCALE);
    sb.append(JAVA_OPTIONS_INTRO);
    if (shouldAndCanRunWithMonitoring(parameters)) {
      sb.append(getMonitoringAgent(parameters)).append(StringConstants.SPACE);
    }
    sb.append(StringConstants.QUOTE).append(""String_Node_Str"").append(getAbsoluteAgentJarPath()).append(StringConstants.QUOTE);
    if (locale != null) {
      sb.append(StringConstants.SPACE).append(JAVA_COUNTRY_PROPERTY).append(locale.getCountry());
      sb.append(StringConstants.SPACE).append(JAVA_LANGUAGE_PROPERTY).append(locale.getLanguage());
    }
  }
 else {
    if (shouldAndCanRunWithMonitoring(parameters)) {
      sb.append(JAVA_OPTIONS_INTRO).append(getMonitoringAgent(parameters));
    }
  }
  return sb.toString();
}","/** 
 * Sets -javaagent and JRE arguments as SUN environment variable.
 * @param parameters The parameters for starting the AUT
 * @return the _JAVA_OPTIONS environment variable including -javaagentand jre arguments
 */
protected String setJavaOptions(Map parameters){
  StringBuffer sb=new StringBuffer();
  if (isRunningFromExecutable(parameters)) {
    Locale locale=(Locale)parameters.get(IStartAut.LOCALE);
    sb.append(JAVA_OPTIONS_INTRO);
    if (org.eclipse.jubula.tools.utils.MonitoringUtil.shouldAndCanRunWithMonitoring(parameters)) {
      String monAgent=getMonitoringAgent(parameters);
      if (monAgent != null) {
        sb.append(monAgent).append(StringConstants.SPACE);
      }
    }
    sb.append(StringConstants.QUOTE).append(""String_Node_Str"").append(getAbsoluteAgentJarPath()).append(StringConstants.QUOTE);
    if (locale != null) {
      sb.append(StringConstants.SPACE).append(JAVA_COUNTRY_PROPERTY).append(locale.getCountry());
      sb.append(StringConstants.SPACE).append(JAVA_LANGUAGE_PROPERTY).append(locale.getLanguage());
    }
  }
 else {
    if (org.eclipse.jubula.tools.utils.MonitoringUtil.shouldAndCanRunWithMonitoring(parameters)) {
      String monAgent=getMonitoringAgent(parameters);
      if (monAgent != null) {
        sb.append(JAVA_OPTIONS_INTRO).append(monAgent);
      }
    }
  }
  return sb.toString();
}",0.8561034761519806
96105,"/** 
 * {@inheritDoc}
 */
protected String[] createEnvArray(Map parameters,boolean isAgentSet){
  String[] envArray=super.createEnvArray(parameters,isAgentSet);
  if (envArray == null) {
    envArray=EnvironmentUtils.propToStrArray(EnvironmentUtils.getProcessEnvironment(),IStartAut.PROPERTY_DELIMITER);
  }
  Vector<String> envList=new Vector<String>(Arrays.asList(envArray));
  envList.addAll(getConnectionProperties(parameters,StartSwtAutServerCommand.ENV_VAR_PREFIX,StartSwtAutServerCommand.ENV_VALUE_SEP));
  if (shouldAndCanRunWithMonitoring(parameters)) {
    StringBuffer sb=new StringBuffer();
    sb.append(JAVA_OPTIONS_INTRO);
    sb.append(this.getMonitoringAgent(parameters));
    envList.add(sb.toString());
    envArray=super.createEnvArray(parameters,true);
  }
  envArray=envList.toArray(new String[envList.size()]);
  return envArray;
}","/** 
 * {@inheritDoc}
 */
protected String[] createEnvArray(Map parameters,boolean isAgentSet){
  String[] envArray=super.createEnvArray(parameters,isAgentSet);
  if (envArray == null) {
    envArray=EnvironmentUtils.propToStrArray(EnvironmentUtils.getProcessEnvironment(),IStartAut.PROPERTY_DELIMITER);
  }
  Vector<String> envList=new Vector<String>(Arrays.asList(envArray));
  envList.addAll(getConnectionProperties(parameters,StartSwtAutServerCommand.ENV_VAR_PREFIX,StartSwtAutServerCommand.ENV_VALUE_SEP));
  if (MonitoringUtil.shouldAndCanRunWithMonitoring(parameters)) {
    String monAgent=this.getMonitoringAgent(parameters);
    if (monAgent != null) {
      StringBuffer sb=new StringBuffer();
      sb.append(JAVA_OPTIONS_INTRO);
      sb.append(monAgent);
      envList.add(sb.toString());
      envArray=super.createEnvArray(parameters,true);
    }
  }
  envArray=envList.toArray(new String[envList.size()]);
  return envArray;
}",0.9081803005008348
96106,"/** 
 * {@inheritDoc}
 */
protected String[] createEnvArray(Map parameters,boolean isAgentSet){
  if (isRunningFromExecutable(parameters) || shouldAndCanRunWithMonitoring(parameters)) {
    setEnv(parameters);
    boolean agentActive=true;
    return super.createEnvArray(parameters,agentActive);
  }
  return super.createEnvArray(parameters,isAgentSet);
}","/** 
 * {@inheritDoc}
 */
protected String[] createEnvArray(Map parameters,boolean isAgentSet){
  if (isRunningFromExecutable(parameters) || MonitoringUtil.shouldAndCanRunWithMonitoring(parameters)) {
    setEnv(parameters);
    boolean agentActive=true;
    return super.createEnvArray(parameters,agentActive);
  }
  return super.createEnvArray(parameters,isAgentSet);
}",0.9793672627235214
96107,"/** 
 * Creates the Map with the autConfig which will be send to the server.
 * @param autConfig the {@link IAUTConfigPO}
 * @return the Map which will be send to the server.
 */
private Map<String,String> createAutConfigMap(IAUTConfigPO autConfig){
  final Set<String> autConfigKeys=autConfig.getAutConfigKeys();
  final Map<String,String> mapToSend=new HashMap<String,String>(autConfigKeys.size());
  for (  String key : autConfigKeys) {
    String value=autConfig.getValue(key,null);
    mapToSend.put(key,value);
  }
  final String monitoringID=mapToSend.get(AutConfigConstants.MONITORING_AGENT_ID);
  if (!StringUtils.isEmpty(monitoringID)) {
    IConfigurationElement monitoringExtension=MonitoringUtils.getElement(monitoringID);
    if (monitoringExtension != null) {
      List<MonitoringAttribute> attributeList=MonitoringUtils.getAttributes(monitoringExtension);
      for (      MonitoringAttribute monitoringAttribute : attributeList) {
        if (!monitoringAttribute.isRender()) {
          mapToSend.put(monitoringAttribute.getId(),monitoringAttribute.getDefaultValue());
        }
      }
    }
  }
  try {
    mapToSend.put(AutConfigConstants.AUT_AGENT_PORT,String.valueOf(AutAgentConnection.getInstance().getCommunicator().getPort()));
    mapToSend.put(AutConfigConstants.AUT_AGENT_HOST,AutAgentConnection.getInstance().getCommunicator().getHostName());
    mapToSend.put(AutConfigConstants.AUT_NAME,mapToSend.get(AutConfigConstants.AUT_ID));
  }
 catch (  ConnectionException e) {
    log.error(Messages.UnableToAppendAUTAgent);
  }
  return mapToSend;
}","/** 
 * Creates the Map with the autConfig which will be send to the server.
 * @param autConfig the {@link IAUTConfigPO}
 * @return the Map which will be send to the server.
 */
private Map<String,String> createAutConfigMap(IAUTConfigPO autConfig){
  final Set<String> autConfigKeys=autConfig.getAutConfigKeys();
  final Map<String,String> mapToSend=new HashMap<String,String>(autConfigKeys.size());
  for (  String key : autConfigKeys) {
    String value=autConfig.getValue(key,null);
    mapToSend.put(key,value);
  }
  final String monitoringID=mapToSend.get(AutConfigConstants.MONITORING_AGENT_ID);
  if (!StringUtils.isEmpty(monitoringID)) {
    IConfigurationElement monitoringExtension=MonitoringRegistry.getElement(monitoringID);
    if (monitoringExtension != null) {
      List<MonitoringAttribute> attributeList=MonitoringRegistry.getAttributes(monitoringExtension);
      for (      MonitoringAttribute monitoringAttribute : attributeList) {
        if (!monitoringAttribute.isRender()) {
          mapToSend.put(monitoringAttribute.getId(),monitoringAttribute.getDefaultValue());
        }
      }
    }
  }
  try {
    mapToSend.put(AutConfigConstants.AUT_AGENT_PORT,String.valueOf(AutAgentConnection.getInstance().getCommunicator().getPort()));
    mapToSend.put(AutConfigConstants.AUT_AGENT_HOST,AutAgentConnection.getInstance().getCommunicator().getHostName());
    mapToSend.put(AutConfigConstants.AUT_NAME,mapToSend.get(AutConfigConstants.AUT_ID));
  }
 catch (  ConnectionException e) {
    log.error(Messages.UnableToAppendAUTAgent);
  }
  return mapToSend;
}",0.9917617237008872
96108,"/** 
 * checks if last connected AUT was running with monitoring agent.
 * @return true if last connected AUT was running with monitoring else false
 */
private boolean isRunningWithMonitoring(){
  AutIdentifier autID=TestExecution.getInstance().getConnectedAutId();
  if (autID != null) {
    Map<String,String> m=requestAutConfigMapFromAgent(autID.getExecutableName());
    if (m != null) {
      String monitoringID=m.get(AutConfigConstants.MONITORING_AGENT_ID);
      if (!StringUtils.isEmpty(monitoringID)) {
        return true;
      }
    }
  }
  return false;
}","/** 
 * checks if last connected AUT was running with monitoring agent.
 * @return true if last connected AUT was running with monitoring else false
 */
private boolean isRunningWithMonitoring(){
  AutIdentifier autID=TestExecution.getInstance().getConnectedAutId();
  if (autID != null) {
    Map<String,String> m=requestAutConfigMapFromAgent(autID.getExecutableName());
    if (m != null) {
      if (MonitoringUtil.shouldAndCanRunWithMonitoring(m)) {
        return true;
      }
    }
  }
  return false;
}",0.7666666666666667
96109,"/** 
 * Create this dialog's expert area component.
 * @param expertAreaComposite Composite representing the expert area.
 */
protected void createExpertArea(Composite expertAreaComposite){
  ControlDecorator.decorateInfo(UIComponentHelper.createLabel(expertAreaComposite,""String_Node_Str""),""String_Node_Str"",false);
  m_autJreParamTextField=UIComponentHelper.createTextField(expertAreaComposite,2);
  initGuiEnvironmentEditor(expertAreaComposite);
  UIComponentHelper.createLabel(expertAreaComposite,""String_Node_Str"");
  m_activationMethodCombo=UIComponentHelper.createEnumCombo(expertAreaComposite,2,""String_Node_Str"",ActivationMethod.class);
  UIComponentHelper.createSeparator(expertAreaComposite,3);
  ControlDecorator.decorateInfo(UIComponentHelper.createLabel(expertAreaComposite,""String_Node_Str""),""String_Node_Str"",false);
  m_monitoringCombo=UIComponentHelper.createCombo(expertAreaComposite,2,MonitoringUtils.getAllRegisteredMonitoringIds(),MonitoringUtils.getAllRegisteredMonitoringNames(),true);
  super.createExpertArea(expertAreaComposite);
}","/** 
 * Create this dialog's expert area component.
 * @param expertAreaComposite Composite representing the expert area.
 */
protected void createExpertArea(Composite expertAreaComposite){
  ControlDecorator.decorateInfo(UIComponentHelper.createLabel(expertAreaComposite,""String_Node_Str""),""String_Node_Str"",false);
  m_autJreParamTextField=UIComponentHelper.createTextField(expertAreaComposite,2);
  initGuiEnvironmentEditor(expertAreaComposite);
  UIComponentHelper.createLabel(expertAreaComposite,""String_Node_Str"");
  m_activationMethodCombo=UIComponentHelper.createEnumCombo(expertAreaComposite,2,""String_Node_Str"",ActivationMethod.class);
  UIComponentHelper.createSeparator(expertAreaComposite,3);
  ControlDecorator.decorateInfo(UIComponentHelper.createLabel(expertAreaComposite,""String_Node_Str""),""String_Node_Str"",false);
  m_monitoringCombo=UIComponentHelper.createCombo(expertAreaComposite,2,MonitoringRegistry.getAllRegisteredMonitoringIds(),MonitoringRegistry.getAllRegisteredMonitoringNames(),true);
  super.createExpertArea(expertAreaComposite);
}",0.9745523091423186
96110,"/** 
 * {@inheritDoc}
 */
protected void createMonitoringArea(Composite monitoringComposite){
  GridLayout result=(GridLayout)monitoringComposite.getLayout();
  result.horizontalSpacing=40;
  result.numColumns=2;
  monitoringComposite.setLayout(result);
  final String monitoringID=super.getConfigValue(AutConfigConstants.MONITORING_AGENT_ID);
  if (!StringUtils.isEmpty(monitoringID)) {
    IConfigurationElement monitoringExtension=MonitoringUtils.getElement(monitoringID);
    if (monitoringExtension != null) {
      createMonitoringUIComponents(monitoringComposite,MonitoringUtils.getAttributes(monitoringExtension));
    }
 else {
      StyledText missingExtensionLabel=new StyledText(monitoringComposite,SWT.WRAP);
      missingExtensionLabel.setText(Messages.MissingMonitoringExtension);
      missingExtensionLabel.setEditable(false);
      missingExtensionLabel.setEnabled(false);
      missingExtensionLabel.setStyleRange(new StyleRange(0,missingExtensionLabel.getText().length(),null,null,SWT.ITALIC));
      ControlDecorator.decorateWarning(missingExtensionLabel,SWT.LEAD,""String_Node_Str"");
    }
  }
  resize();
  getShell().pack();
  super.createMonitoringArea(monitoringComposite);
}","/** 
 * {@inheritDoc}
 */
protected void createMonitoringArea(Composite monitoringComposite){
  GridLayout result=(GridLayout)monitoringComposite.getLayout();
  result.horizontalSpacing=40;
  result.numColumns=2;
  monitoringComposite.setLayout(result);
  final String monitoringID=super.getConfigValue(AutConfigConstants.MONITORING_AGENT_ID);
  if (!StringUtils.isEmpty(monitoringID)) {
    IConfigurationElement monitoringExtension=MonitoringRegistry.getElement(monitoringID);
    if (monitoringExtension != null) {
      createMonitoringUIComponents(monitoringComposite,MonitoringRegistry.getAttributes(monitoringExtension));
    }
 else {
      StyledText missingExtensionLabel=new StyledText(monitoringComposite,SWT.WRAP);
      missingExtensionLabel.setText(Messages.MissingMonitoringExtension);
      missingExtensionLabel.setEditable(false);
      missingExtensionLabel.setEnabled(false);
      missingExtensionLabel.setStyleRange(new StyleRange(0,missingExtensionLabel.getText().length(),null,null,SWT.ITALIC));
      ControlDecorator.decorateWarning(missingExtensionLabel,SWT.LEAD,""String_Node_Str"");
    }
  }
  resize();
  getShell().pack();
  super.createMonitoringArea(monitoringComposite);
}",0.9891936824605154
96111,"/** 
 * This method will load the class which implements the   {@link IMonitoring} interface, and will invoke the ""getAgent"" method. 
 * @param parameters The AutConfigMap
 * @return agentString The agent String like -javaagent:myagent.jaror null if the monitoring agent String could't be generated
 */
protected String getMonitoringAgent(Map parameters){
  String monitoringImplClass=(String)parameters.get(MonitoringConstants.AGENT_CLASS);
  String autId=(String)parameters.get(AutConfigConstants.AUT_ID);
  String bundleId=(String)parameters.get(MonitoringConstants.BUNDLE_ID);
  MonitoringDataStore mds=MonitoringDataStore.getInstance();
  boolean duplicate=MonitoringUtil.checkForDuplicateAutID(autId);
  if (!duplicate) {
    mds.putConfigMap(autId,parameters);
  }
  String agentString=null;
  if (isRunningWithMonitoring(parameters)) {
    try {
      Bundle bundle=Platform.getBundle(bundleId);
      if (bundle == null) {
        LOG.error(""String_Node_Str"");
        return null;
      }
      Class<?> monitoringClass=bundle.loadClass(monitoringImplClass);
      Constructor<?> constructor=monitoringClass.getConstructor();
      IMonitoring agentInstance=(IMonitoring)constructor.newInstance();
      agentInstance.setAutId(autId);
      agentInstance.setInstallDir(FileLocator.getBundleFile(bundle));
      agentString=agentInstance.createAgent();
      if (!duplicate) {
        mds.putMonitoringAgent(autId,agentInstance);
      }
    }
 catch (    InstantiationException e) {
      LOG.error(""String_Node_Str"",e);
    }
catch (    IllegalAccessException e) {
      LOG.error(""String_Node_Str"",e);
    }
catch (    SecurityException e) {
      LOG.error(""String_Node_Str"",e);
    }
catch (    NoSuchMethodException e) {
      LOG.error(""String_Node_Str"",e);
    }
catch (    IllegalArgumentException e) {
      LOG.error(""String_Node_Str"",e);
    }
catch (    InvocationTargetException e) {
      LOG.error(""String_Node_Str"",e);
    }
catch (    ClassNotFoundException e) {
      LOG.error(""String_Node_Str"",e);
    }
catch (    IOException e) {
      LOG.error(""String_Node_Str"",e);
    }
  }
  return agentString;
}","/** 
 * This method will load the class which implements the   {@link IMonitoring} interface, and will invoke the ""getAgent"" method. 
 * @param parameters The AutConfigMap
 * @return agentString The agent String like -javaagent:myagent.jaror null if the monitoring agent String could't be generated
 */
protected String getMonitoringAgent(Map parameters){
  String autId=(String)parameters.get(AutConfigConstants.AUT_ID);
  MonitoringDataStore mds=MonitoringDataStore.getInstance();
  boolean duplicate=MonitoringUtil.checkForDuplicateAutID(autId);
  if (!duplicate) {
    mds.putConfigMap(autId,parameters);
  }
  String agentString=null;
  if (shouldAndCanRunWithMonitoring(parameters)) {
    String monitoringImplClass=(String)parameters.get(MonitoringConstants.AGENT_CLASS);
    String bundleId=(String)parameters.get(MonitoringConstants.BUNDLE_ID);
    try {
      Bundle bundle=Platform.getBundle(bundleId);
      if (bundle == null) {
        LOG.error(""String_Node_Str"");
        return null;
      }
      Class<?> monitoringClass=bundle.loadClass(monitoringImplClass);
      Constructor<?> constructor=monitoringClass.getConstructor();
      IMonitoring agentInstance=(IMonitoring)constructor.newInstance();
      agentInstance.setAutId(autId);
      agentInstance.setInstallDir(FileLocator.getBundleFile(bundle));
      agentString=agentInstance.createAgent();
      if (!duplicate) {
        mds.putMonitoringAgent(autId,agentInstance);
      }
    }
 catch (    InstantiationException e) {
      LOG.error(""String_Node_Str"",e);
    }
catch (    IllegalAccessException e) {
      LOG.error(""String_Node_Str"",e);
    }
catch (    SecurityException e) {
      LOG.error(""String_Node_Str"",e);
    }
catch (    NoSuchMethodException e) {
      LOG.error(""String_Node_Str"",e);
    }
catch (    IllegalArgumentException e) {
      LOG.error(""String_Node_Str"",e);
    }
catch (    InvocationTargetException e) {
      LOG.error(""String_Node_Str"",e);
    }
catch (    ClassNotFoundException e) {
      LOG.error(""String_Node_Str"",e);
    }
catch (    IOException e) {
      LOG.error(""String_Node_Str"",e);
    }
  }
  return agentString;
}",0.8447146866230122
96112,"/** 
 * Sets -javaagent and JRE arguments as SUN environment variable.
 * @param parameters The parameters for starting the AUT
 * @return the _JAVA_OPTIONS environment variable including -javaagentand jre arguments
 */
protected String setJavaOptions(Map parameters){
  StringBuffer sb=new StringBuffer();
  if (isRunningFromExecutable(parameters)) {
    Locale locale=(Locale)parameters.get(IStartAut.LOCALE);
    sb.append(JAVA_OPTIONS_INTRO);
    if (isRunningWithMonitoring(parameters)) {
      sb.append(getMonitoringAgent(parameters)).append(StringConstants.SPACE);
    }
    sb.append(StringConstants.QUOTE).append(""String_Node_Str"").append(getAbsoluteAgentJarPath()).append(StringConstants.QUOTE);
    if (locale != null) {
      sb.append(StringConstants.SPACE).append(JAVA_COUNTRY_PROPERTY).append(locale.getCountry());
      sb.append(StringConstants.SPACE).append(JAVA_LANGUAGE_PROPERTY).append(locale.getLanguage());
    }
  }
 else {
    if (isRunningWithMonitoring(parameters)) {
      sb.append(JAVA_OPTIONS_INTRO).append(getMonitoringAgent(parameters));
    }
  }
  return sb.toString();
}","/** 
 * Sets -javaagent and JRE arguments as SUN environment variable.
 * @param parameters The parameters for starting the AUT
 * @return the _JAVA_OPTIONS environment variable including -javaagentand jre arguments
 */
protected String setJavaOptions(Map parameters){
  StringBuffer sb=new StringBuffer();
  if (isRunningFromExecutable(parameters)) {
    Locale locale=(Locale)parameters.get(IStartAut.LOCALE);
    sb.append(JAVA_OPTIONS_INTRO);
    if (shouldAndCanRunWithMonitoring(parameters)) {
      sb.append(getMonitoringAgent(parameters)).append(StringConstants.SPACE);
    }
    sb.append(StringConstants.QUOTE).append(""String_Node_Str"").append(getAbsoluteAgentJarPath()).append(StringConstants.QUOTE);
    if (locale != null) {
      sb.append(StringConstants.SPACE).append(JAVA_COUNTRY_PROPERTY).append(locale.getCountry());
      sb.append(StringConstants.SPACE).append(JAVA_LANGUAGE_PROPERTY).append(locale.getLanguage());
    }
  }
 else {
    if (shouldAndCanRunWithMonitoring(parameters)) {
      sb.append(JAVA_OPTIONS_INTRO).append(getMonitoringAgent(parameters));
    }
  }
  return sb.toString();
}",0.9838274932614556
96113,"/** 
 * {@inheritDoc}
 */
protected String[] createEnvArray(Map parameters,boolean isAgentSet){
  String[] envArray=super.createEnvArray(parameters,isAgentSet);
  if (envArray == null) {
    envArray=EnvironmentUtils.propToStrArray(EnvironmentUtils.getProcessEnvironment(),IStartAut.PROPERTY_DELIMITER);
  }
  Vector<String> envList=new Vector<String>(Arrays.asList(envArray));
  envList.addAll(getConnectionProperties(parameters,StartSwtAutServerCommand.ENV_VAR_PREFIX,StartSwtAutServerCommand.ENV_VALUE_SEP));
  if (isRunningWithMonitoring(parameters)) {
    StringBuffer sb=new StringBuffer();
    sb.append(JAVA_OPTIONS_INTRO);
    sb.append(this.getMonitoringAgent(parameters));
    envList.add(sb.toString());
    envArray=super.createEnvArray(parameters,true);
  }
  envArray=envList.toArray(new String[envList.size()]);
  return envArray;
}","/** 
 * {@inheritDoc}
 */
protected String[] createEnvArray(Map parameters,boolean isAgentSet){
  String[] envArray=super.createEnvArray(parameters,isAgentSet);
  if (envArray == null) {
    envArray=EnvironmentUtils.propToStrArray(EnvironmentUtils.getProcessEnvironment(),IStartAut.PROPERTY_DELIMITER);
  }
  Vector<String> envList=new Vector<String>(Arrays.asList(envArray));
  envList.addAll(getConnectionProperties(parameters,StartSwtAutServerCommand.ENV_VAR_PREFIX,StartSwtAutServerCommand.ENV_VALUE_SEP));
  if (shouldAndCanRunWithMonitoring(parameters)) {
    StringBuffer sb=new StringBuffer();
    sb.append(JAVA_OPTIONS_INTRO);
    sb.append(this.getMonitoringAgent(parameters));
    envList.add(sb.toString());
    envArray=super.createEnvArray(parameters,true);
  }
  envArray=envList.toArray(new String[envList.size()]);
  return envArray;
}",0.9894242068155112
96114,"/** 
 * {@inheritDoc}
 */
protected String[] createEnvArray(Map parameters,boolean isAgentSet){
  if (isRunningFromExecutable(parameters) || isRunningWithMonitoring(parameters)) {
    setEnv(parameters);
    boolean agentActive=true;
    return super.createEnvArray(parameters,agentActive);
  }
  return super.createEnvArray(parameters,isAgentSet);
}","/** 
 * {@inheritDoc}
 */
protected String[] createEnvArray(Map parameters,boolean isAgentSet){
  if (isRunningFromExecutable(parameters) || shouldAndCanRunWithMonitoring(parameters)) {
    setEnv(parameters);
    boolean agentActive=true;
    return super.createEnvArray(parameters,agentActive);
  }
  return super.createEnvArray(parameters,isAgentSet);
}",0.9745042492917848
96115,"/** 
 * Checks, if an execTC has compNames without compTypes
 */
@SuppressWarnings(""String_Node_Str"") private void checkCompNamesPairs(){
  IProjectPO project=GeneralStorage.getInstance().getProject();
  if (project == null) {
    return;
  }
  final ITreeNodeOperation<INodePO> op=new CheckProblemsOperation();
  TreeTraverser traverser=new TreeTraverser(project,op,true,true);
  traverser.addOperation(new ActionCheckOperation());
  traverser.traverse();
}","/** 
 * Checks, if an execTC has compNames without compTypes
 */
@SuppressWarnings(""String_Node_Str"") private void checkCompNamesPairs(){
  IProjectPO project=GeneralStorage.getInstance().getProject();
  if (project == null) {
    return;
  }
  final ITreeNodeOperation<INodePO> op=new CheckProblemsOperation();
  TreeTraverser traverser=new TreeTraverser(project,op,false,true);
  CheckForDeprecatedModulesOperation operation=new CheckForDeprecatedModulesOperation();
  traverser.addOperation(operation);
  traverser.traverse();
  TreeTraverser specTreeTraverser=new SpecTreeTraverser(project,op);
  specTreeTraverser.addOperation(operation);
  specTreeTraverser.traverse();
}",0.7118942731277533
96116,"/** 
 * Adds the parameters from the given cap to the given result node.
 * @param paramNode The node from which to copy the parameter info.
 * @param resultNode The result node to which the parameter info willbe copied.
 */
private void addParameters(IParamNodePO paramNode,TestResultNode resultNode){
  List<IParamDescriptionPO> parameterList=paramNode.getParameterList();
  String value=null;
  for (  IParamDescriptionPO desc : parameterList) {
    ITDManager tdManager=null;
    try {
      tdManager=m_externalTestDataBP.getExternalCheckedTDManager(paramNode);
    }
 catch (    JBException e) {
      log.error(Messages.TestDataNotAvailable + StringConstants.DOT,e);
    }
    TestExecution te=TestExecution.getInstance();
    List<ExecObject> stackList=new ArrayList<ExecObject>(te.getTrav().getExecStackAsList());
    int dataSetIndex=te.getTrav().getDataSetNumber();
    if (tdManager.getDataSetCount() <= 1) {
      dataSetIndex=0;
    }
    if (paramNode instanceof ICapPO) {
      dataSetIndex=0;
    }
    ITestDataPO date=tdManager.getCell(dataSetIndex,desc);
    ParamValueConverter conv=new ModelParamValueConverter(date.getValue(te.getLocale()),paramNode,te.getLocale(),desc);
    try {
      value=conv.getExecutionString(stackList,te.getLocale());
    }
 catch (    InvalidDataException e) {
      log.error(e.getMessage());
      value=MessageIDs.getMessageObject(e.getErrorId()).getMessage(new Object[]{});
    }
    if (value != null) {
      if (value.length() == 0) {
        value=TestDataConstants.EMPTY_SYMBOL;
      }
    }
 else {
      value=StringConstants.EMPTY;
    }
    resultNode.addParameter(new TestResultParameter(desc.getName(),CompSystemI18n.getString(desc.getType()),value));
  }
}","/** 
 * Adds the parameters from the given cap to the given result node.
 * @param paramNode The node from which to copy the parameter info.
 * @param resultNode The result node to which the parameter info willbe copied.
 */
private void addParameters(IParamNodePO paramNode,TestResultNode resultNode){
  List<IParamDescriptionPO> parameterList=paramNode.getParameterList();
  String value=null;
  for (  IParamDescriptionPO desc : parameterList) {
    ITDManager tdManager=null;
    try {
      tdManager=m_externalTestDataBP.getExternalCheckedTDManager(paramNode);
    }
 catch (    JBException e) {
      log.error(Messages.TestDataNotAvailable + StringConstants.DOT,e);
    }
    TestExecution te=TestExecution.getInstance();
    List<ExecObject> stackList=new ArrayList<ExecObject>(te.getTrav().getExecStackAsList());
    int dataSetIndex=te.getTrav().getDataSetNumber();
    if (tdManager.getDataSetCount() <= 1) {
      dataSetIndex=0;
    }
    if (paramNode instanceof ICapPO) {
      dataSetIndex=0;
    }
    if (tdManager.findColumnForParam(desc.getUniqueId()) == -1) {
      IParameterInterfacePO referencedDataCube=paramNode.getReferencedDataCube();
      if (referencedDataCube != null) {
        desc=referencedDataCube.getParameterForName(desc.getName());
      }
    }
    ITestDataPO date=tdManager.getCell(dataSetIndex,desc);
    ParamValueConverter conv=new ModelParamValueConverter(date.getValue(te.getLocale()),paramNode,te.getLocale(),desc);
    try {
      value=conv.getExecutionString(stackList,te.getLocale());
    }
 catch (    InvalidDataException e) {
      log.error(e.getMessage());
      value=MessageIDs.getMessageObject(e.getErrorId()).getMessage(new Object[]{});
    }
    if (value != null) {
      if (value.length() == 0) {
        value=TestDataConstants.EMPTY_SYMBOL;
      }
    }
 else {
      value=StringConstants.EMPTY;
    }
    resultNode.addParameter(new TestResultParameter(desc.getName(),CompSystemI18n.getString(desc.getType()),value));
  }
}",0.927130949179887
96117,"/** 
 * wait for the CLC service to receive a shutdown from the client
 */
private void doClcService() throws ToolkitPluginException {
  IProjectPO project=m_job.getProject();
  String autConfigName=m_job.getAutConfigName();
  ITestSuitePO workUnit=null;
  IAUTConfigPO autConfig=null;
  for (  ITestSuitePO ts : TestSuiteBP.getListOfTestSuites(project)) {
    for (    IAUTConfigPO cfg : ts.getAut().getAutConfigSet()) {
      if (autConfigName.equals(cfg.getName())) {
        workUnit=ts;
        autConfig=cfg;
        break;
      }
    }
  }
  if (workUnit != null && autConfig != null) {
    ensureAutIsStarted(workUnit,autConfig);
  }
  m_clientActive=true;
  do {
synchronized (m_rmiBase) {
      try {
        m_rmiBase.wait();
      }
 catch (      InterruptedException e) {
      }
    }
  }
 while (m_clientActive);
  if (autConfig != null) {
    try {
      AutIdentifier startedAutId=new AutIdentifier(autConfig.getConfigMap().get(AutConfigConstants.AUT_ID));
      if (ServerConnection.getInstance().isConnected()) {
        ClientTestFactory.getClientTest().stopAut(startedAutId);
      }
    }
 catch (    ConnectionException e) {
      LOG.info(Messages.ErrorWhileStoppingAUT,e);
    }
  }
}","/** 
 * wait for the CLC service to receive a shutdown from the client
 */
private void doClcService() throws ToolkitPluginException {
  IProjectPO project=m_job.getProject();
  String autConfigName=m_job.getAutConfigName();
  ITestSuitePO workUnit=null;
  IAUTConfigPO autConfig=null;
  for (  ITestSuitePO ts : TestSuiteBP.getListOfTestSuites(project)) {
    for (    IAUTConfigPO cfg : ts.getAut().getAutConfigSet()) {
      if (autConfigName.equals(cfg.getName())) {
        workUnit=ts;
        autConfig=cfg;
        break;
      }
    }
  }
  if (workUnit != null && autConfig != null) {
    ensureAutIsStarted(workUnit,autConfig);
  }
  m_clientActive=true;
  do {
synchronized (m_rmiBase) {
      try {
        m_rmiBase.wait();
      }
 catch (      InterruptedException e) {
      }
    }
  }
 while (m_clientActive);
  if (autConfig != null) {
    try {
      AutIdentifier startedAutId=new AutIdentifier(autConfig.getConfigMap().get(AutConfigConstants.AUT_ID));
      if (AutAgentConnection.getInstance().isConnected()) {
        ClientTestFactory.getClientTest().stopAut(startedAutId);
      }
    }
 catch (    ConnectionException e) {
      LOG.info(Messages.ErrorWhileStoppingAUT,e);
    }
  }
}",0.9942196531791908
96118,"/** 
 * private constructor 
 */
private ExecutionController(){
  IClientTest clientTest=ClientTestFactory.getClientTest();
  clientTest.addAUTServerEventListener(this);
  clientTest.addAutStarterEventListener(this);
  clientTest.addTestEventListener(this);
  clientTest.addTestExecutionEventListener(this);
  AutAgentRegistration.getInstance().addListener(this);
}","/** 
 * private constructor 
 */
private ExecutionController(){
  IClientTest clientTest=ClientTestFactory.getClientTest();
  clientTest.addAUTServerEventListener(this);
  clientTest.addAutAgentEventListener(this);
  clientTest.addTestEventListener(this);
  clientTest.addTestExecutionEventListener(this);
  AutAgentRegistration.getInstance().addListener(this);
}",0.9835164835164836
96119,"/** 
 * executes the complete test
 * @throws CommunicationException Error
 * @return boolean true if all testsuites completed successfully
 */
public boolean executeJob() throws CommunicationException {
  WatchdogTimer timer=null;
  if (m_job.getTimeout() > 0) {
    timer=new WatchdogTimer(m_job.getTimeout());
    timer.start();
  }
  AbstractCmdlineClient.printConsoleLn(NLS.bind(Messages.ConnectingToAUTAgent,new Object[]{m_job.getServer(),m_job.getPort()}),true);
  IClientTest clientTest=ClientTestFactory.getClientTest();
  clientTest.connectToServer(m_job.getServer(),m_job.getPort());
  if (!ServerConnection.getInstance().isConnected()) {
    throw new CommunicationException(Messages.ConnectionToAUTAgentFailed,MessageIDs.E_COMMUNICATOR_CONNECTION);
  }
  clientTest.setRelevantFlag(m_job.isRelevant());
  prepareExecution();
  m_idle=true;
  if (m_shutdown) {
    AbstractCmdlineClient.printConsoleLn(Messages.ReceivedShutdownCommand,true);
    endTestExecution();
  }
  try {
    if (m_rmiBase != null) {
      doClcService();
    }
 else     if (m_job.getTestJob() != null) {
      ensureAutIsStarted(m_job.getActualTestSuite(),m_job.getAutConfig());
      doTestJob();
    }
 else {
      ensureAutIsStarted(m_job.getActualTestSuite(),m_job.getAutConfig());
      doTestSuite();
    }
  }
 catch (  ToolkitPluginException e1) {
    AbstractCmdlineClient.printlnConsoleError(NLS.bind(Messages.ExecutionControllerAUT,Messages.ErrorMessageAUT_TOOLKIT_NOT_AVAILABLE));
  }
  if (timer != null) {
    timer.abort();
  }
  return isNoErrorWhileExecution();
}","/** 
 * executes the complete test
 * @throws CommunicationException Error
 * @return boolean true if all testsuites completed successfully
 */
public boolean executeJob() throws CommunicationException {
  WatchdogTimer timer=null;
  if (m_job.getTimeout() > 0) {
    timer=new WatchdogTimer(m_job.getTimeout());
    timer.start();
  }
  AbstractCmdlineClient.printConsoleLn(NLS.bind(Messages.ConnectingToAUTAgent,new Object[]{m_job.getServer(),m_job.getPort()}),true);
  IClientTest clientTest=ClientTestFactory.getClientTest();
  clientTest.connectToAutAgent(m_job.getServer(),m_job.getPort());
  if (!AutAgentConnection.getInstance().isConnected()) {
    throw new CommunicationException(Messages.ConnectionToAUTAgentFailed,MessageIDs.E_COMMUNICATOR_CONNECTION);
  }
  clientTest.setRelevantFlag(m_job.isRelevant());
  prepareExecution();
  m_idle=true;
  if (m_shutdown) {
    AbstractCmdlineClient.printConsoleLn(Messages.ReceivedShutdownCommand,true);
    endTestExecution();
  }
  try {
    if (m_rmiBase != null) {
      doClcService();
    }
 else     if (m_job.getTestJob() != null) {
      ensureAutIsStarted(m_job.getActualTestSuite(),m_job.getAutConfig());
      doTestJob();
    }
 else {
      ensureAutIsStarted(m_job.getActualTestSuite(),m_job.getAutConfig());
      doTestSuite();
    }
  }
 catch (  ToolkitPluginException e1) {
    AbstractCmdlineClient.printlnConsoleError(NLS.bind(Messages.ExecutionControllerAUT,Messages.ErrorMessageAUT_TOOLKIT_NOT_AVAILABLE));
  }
  if (timer != null) {
    timer.abort();
  }
  return isNoErrorWhileExecution();
}",0.98343949044586
96120,"/** 
 * @param aut AUT where the object mapping is incomplete
 * @return A problem which represents incomplete object mapping of thisAUT.
 */
public static IProblem createIncompleteObjectMappingProblem(IAUTMainPO aut){
  return new Problem(NLS.bind(Messages.ProblemIncompleteObjectMappingMarkerText,aut.getName()),new Status(IStatus.ERROR,Activator.PLUGIN_ID,Messages.ProblemIncompleteObjectMappingTooltip),aut.getName(),ProblemType.REASON_OM_INCOMPLETE);
}","/** 
 * @param aut AUT where the object mapping is incomplete
 * @return A problem which represents incomplete object mapping of thisAUT.
 */
public static IProblem createIncompleteObjectMappingProblem(IAUTMainPO aut){
  String autName=aut.getName();
  return new Problem(NLS.bind(Messages.ProblemIncompleteObjectMappingMarkerText,autName),new Status(IStatus.ERROR,Activator.PLUGIN_ID,NLS.bind(Messages.ProblemIncompleteObjectMappingTooltip,autName)),autName,ProblemType.REASON_OM_INCOMPLETE);
}",0.907563025210084
96121,"public void run(){
  Image img=provider.getImage(m_scrollComposite.getDisplay());
  m_image.setImage(img);
  if (img != null) {
    m_image.setSize(img.getBounds().width,img.getBounds().height);
  }
  m_scrollComposite.setMinSize(m_child.computeSize(SWT.DEFAULT,SWT.DEFAULT));
}","public void run(){
  clearImage();
  m_img=provider.getImage(m_scrollComposite.getDisplay());
  m_imgWidget.setImage(m_img);
  if (m_img != null) {
    m_imgWidget.setSize(m_img.getBounds().width,m_img.getBounds().height);
  }
  m_scrollComposite.setMinSize(m_child.computeSize(SWT.DEFAULT,SWT.DEFAULT));
}",0.928082191780822
96122,"/** 
 * {@inheritDoc}
 */
public void setFocus(){
  m_image.setFocus();
}","/** 
 * {@inheritDoc}
 */
public void setFocus(){
  m_imgWidget.setFocus();
}",0.96
96123,"/** 
 * {@inheritDoc}
 */
public void dispose(){
  getSelectionService().removeSelectionListener(m_selectionListener);
  super.dispose();
}","/** 
 * {@inheritDoc}
 */
public void dispose(){
  getSelectionService().removeSelectionListener(m_selectionListener);
  if (!m_img.isDisposed()) {
    m_img.dispose();
  }
  super.dispose();
}",0.8373493975903614
96124,"/** 
 * {@inheritDoc}
 */
public void createPartControl(Composite parent){
  parent.setLayout(new FillLayout());
  m_scrollComposite=new ScrolledComposite(parent,SWT.V_SCROLL | SWT.H_SCROLL);
  m_child=new Composite(m_scrollComposite,SWT.NONE);
  m_child.setLayout(new FillLayout());
  m_image=new Label(m_child,SWT.NONE);
  m_scrollComposite.setExpandHorizontal(true);
  m_scrollComposite.setExpandVertical(true);
  m_scrollComposite.setMinSize(m_child.computeSize(SWT.DEFAULT,SWT.DEFAULT));
  m_scrollComposite.setContent(m_child);
  getSelectionService().addSelectionListener(m_selectionListener);
  handleSelection(getSelectionService().getSelection());
  getSite().setSelectionProvider(this);
}","/** 
 * {@inheritDoc}
 */
public void createPartControl(Composite parent){
  parent.setLayout(new FillLayout());
  m_scrollComposite=new ScrolledComposite(parent,SWT.V_SCROLL | SWT.H_SCROLL);
  m_child=new Composite(m_scrollComposite,SWT.NONE);
  m_child.setLayout(new FillLayout());
  m_imgWidget=new Label(m_child,SWT.NONE);
  m_scrollComposite.setExpandHorizontal(true);
  m_scrollComposite.setExpandVertical(true);
  m_scrollComposite.setMinSize(m_child.computeSize(SWT.DEFAULT,SWT.DEFAULT));
  m_scrollComposite.setContent(m_child);
  getSelectionService().addSelectionListener(m_selectionListener);
  handleSelection(getSelectionService().getSelection());
  getSite().setSelectionProvider(this);
}",0.9942938659058488
96125,"/** 
 * @param provider the provider
 */
protected void setImage(final ImageProvider provider){
  m_scrollComposite.getDisplay().syncExec(new Runnable(){
    public void run(){
      Image img=provider.getImage(m_scrollComposite.getDisplay());
      m_image.setImage(img);
      if (img != null) {
        m_image.setSize(img.getBounds().width,img.getBounds().height);
      }
      m_scrollComposite.setMinSize(m_child.computeSize(SWT.DEFAULT,SWT.DEFAULT));
    }
  }
);
}","/** 
 * @param provider the provider
 */
protected void setImage(final ImageProvider provider){
  m_scrollComposite.getDisplay().syncExec(new Runnable(){
    public void run(){
      clearImage();
      m_img=provider.getImage(m_scrollComposite.getDisplay());
      m_imgWidget.setImage(m_img);
      if (m_img != null) {
        m_imgWidget.setSize(m_img.getBounds().width,m_img.getBounds().height);
      }
      m_scrollComposite.setMinSize(m_child.computeSize(SWT.DEFAULT,SWT.DEFAULT));
    }
  }
);
}",0.952965235173824
96126,"/** 
 * inserts a new Technical Name into GUIModel
 * @param component IComponentIdentifier
 */
private void createNewTechnicalName(final IComponentIdentifier component){
  if (getEditorHelper().requestEditableState() != EditableState.OK) {
    return;
  }
  IObjectMappingAssoziationPO techNameAssoc=getAut().getObjMap().addTechnicalName(component,getAut());
  if (techNameAssoc != null) {
    getEditorHelper().setDirty(true);
    if (m_omEditorBP.getCategoryToCreateIn() != null) {
      m_omEditorBP.getCategoryToCreateIn().addAssociation(techNameAssoc);
    }
 else {
      getAut().getObjMap().getUnmappedTechnicalCategory().addAssociation(techNameAssoc);
    }
    DataEventDispatcher.getInstance().fireDataChangedListener(techNameAssoc.getCategory(),DataState.StructureModified,UpdateState.onlyInEditor);
    m_tableViewer.refresh();
  }
  if (techNameAssoc == null) {
    for (    IObjectMappingAssoziationPO assoc : getAut().getObjMap().getMappings()) {
      IComponentIdentifier techName=assoc.getTechnicalName();
      if (techName != null && techName.equals(component)) {
        techNameAssoc=assoc;
        techNameAssoc.setCompIdentifier(component);
        break;
      }
    }
  }
  if (techNameAssoc != null) {
    IStructuredSelection techNameSelection=new StructuredSelection(techNameAssoc);
    m_treeViewer.setSelection(techNameSelection);
    m_uiElementTreeViewer.setSelection(techNameSelection);
    m_mappedComponentTreeViewer.setSelection(techNameSelection);
    refreshAllViewer();
  }
}","/** 
 * inserts a new Technical Name into GUIModel
 * @param component IComponentIdentifier
 */
private void createNewTechnicalName(final IComponentIdentifier component){
  if (getEditorHelper().requestEditableState() != EditableState.OK) {
    return;
  }
  IObjectMappingAssoziationPO techNameAssoc=getAut().getObjMap().addTechnicalName(component,getAut());
  if (techNameAssoc != null) {
    getEditorHelper().setDirty(true);
    if (m_omEditorBP.getCategoryToCreateIn() != null) {
      m_omEditorBP.getCategoryToCreateIn().addAssociation(techNameAssoc);
    }
 else {
      getAut().getObjMap().getUnmappedTechnicalCategory().addAssociation(techNameAssoc);
    }
    DataEventDispatcher.getInstance().fireDataChangedListener(techNameAssoc.getCategory(),DataState.StructureModified,UpdateState.onlyInEditor);
    m_tableViewer.refresh();
  }
 else {
    for (    IObjectMappingAssoziationPO assoc : getAut().getObjMap().getMappings()) {
      IComponentIdentifier techName=assoc.getTechnicalName();
      if (techName != null && techName.equals(component)) {
        techNameAssoc=assoc;
        techNameAssoc.setCompIdentifier(component);
        break;
      }
    }
  }
  if (techNameAssoc != null) {
    IStructuredSelection techNameSelection=new StructuredSelection(techNameAssoc);
    m_treeViewer.setSelection(techNameSelection);
    m_uiElementTreeViewer.setSelection(techNameSelection);
    m_mappedComponentTreeViewer.setSelection(techNameSelection);
    refreshAllViewer();
  }
}",0.9897044171371636
96127,"/** 
 * {@inheritDoc}
 */
public int hashCode(){
  return new HashCodeBuilder().append(getHierarchyNames()).append(getNeighbours()).toHashCode();
}","/** 
 * {@inheritDoc}
 */
public int hashCode(){
  List neighbours=new ArrayList(getNeighbours());
  Collections.sort(neighbours);
  return new HashCodeBuilder().append(getHierarchyNames()).append(neighbours).toHashCode();
}",0.7115902964959568
96128,"/** 
 * {@inheritDoc}
 */
public boolean equals(Object obj){
  if (obj instanceof IComponentIdentifier) {
    IComponentIdentifier compId=(IComponentIdentifier)obj;
    return new EqualsBuilder().append(getHierarchyNames(),compId.getHierarchyNames()).append(getNeighbours(),compId.getNeighbours()).isEquals();
  }
  return super.equals(obj);
}","/** 
 * {@inheritDoc}
 */
public boolean equals(Object obj){
  if (obj instanceof IComponentIdentifier) {
    IComponentIdentifier compId=(IComponentIdentifier)obj;
    List neighbours1=new ArrayList(getNeighbours());
    List neighbours2=new ArrayList(compId.getNeighbours());
    Collections.sort(neighbours1);
    Collections.sort(neighbours2);
    return new EqualsBuilder().append(getHierarchyNames(),compId.getHierarchyNames()).append(neighbours1,neighbours2).isEquals();
  }
  return super.equals(obj);
}",0.7166276346604216
96129,"/** 
 * @param arguments
 * @param numParamsExpected
 * @throws InvalidDataException
 */
protected void validateParamCount(String[] arguments,int numParamsExpected) throws InvalidDataException {
  if (arguments.length != 2) {
    throw new InvalidDataException(""String_Node_Str"" + numParamsExpected + ""String_Node_Str""+ arguments.length,MessageIDs.E_WRONG_NUM_FUNCTION_ARGS);
  }
}","/** 
 * @param arguments evaluate() parameter
 * @param numParamsExpected how many parameters does the Evaluator expect
 * @throws InvalidDataException if the are not exactly numParamsExpectedparameters in arguments
 */
protected void validateParamCount(String[] arguments,int numParamsExpected) throws InvalidDataException {
  if (arguments.length != 2) {
    throw new InvalidDataException(""String_Node_Str"" + numParamsExpected + ""String_Node_Str""+ arguments.length,MessageIDs.E_WRONG_NUM_FUNCTION_ARGS);
  }
}",0.8533034714445689
96130,"public String evaluate(String[] arguments) throws InvalidDataException {
  validateParamCount(arguments,2);
  try {
    Long dateTime=Long.valueOf(arguments[0]);
    if (dateTime < 0) {
      throw new InvalidDataException(""String_Node_Str"" + dateTime,MessageIDs.E_TOO_SMALL_VALUE);
    }
    Date date=new Date(dateTime);
    return DateFormatUtils.format(date,arguments[1]);
  }
 catch (  NumberFormatException e) {
    throw new InvalidDataException(""String_Node_Str"" + arguments[0],MessageIDs.E_BAD_INT);
  }
}","/** 
 * {@inheritDoc}
 */
public String evaluate(String[] arguments) throws InvalidDataException {
  validateParamCount(arguments,2);
  try {
    Long dateTime=Long.valueOf(arguments[0]);
    if (dateTime < 0) {
      throw new InvalidDataException(""String_Node_Str"" + dateTime,MessageIDs.E_TOO_SMALL_VALUE);
    }
    Date date=new Date(dateTime);
    return DateFormatUtils.format(date,arguments[1]);
  }
 catch (  NumberFormatException e) {
    throw new InvalidDataException(""String_Node_Str"" + arguments[0],MessageIDs.E_BAD_INT);
  }
}",0.9753320683111956
96131,"public String evaluate(String[] arguments) throws InvalidDataException {
  validateParamCount(arguments,2);
  try {
    long dateTime=Long.parseLong(arguments[0]);
    if (dateTime < 0) {
      throw new InvalidDataException(""String_Node_Str"" + dateTime,MessageIDs.E_TOO_SMALL_VALUE);
    }
    String opString=arguments[1];
    int opStringLength=opString.length();
    if (opStringLength < 2) {
      throw new InvalidDataException(""String_Node_Str"" + opString,MessageIDs.E_WRONG_PARAMETER_VALUE);
    }
    String op=opString.substring(opStringLength - 1,opStringLength);
    String offsetString=op.substring(0,opStringLength - 1);
    try {
      int offset=Integer.parseInt(offsetString);
      Date date=new Date(dateTime);
      Date result=null;
      if (op.equalsIgnoreCase(""String_Node_Str"")) {
        result=DateUtils.addDays(date,offset);
      }
 else       if (op.equalsIgnoreCase(""String_Node_Str"")) {
        result=DateUtils.addMonths(date,offset);
      }
 else       if (op.equalsIgnoreCase(""String_Node_Str"")) {
        result=DateUtils.addYears(date,offset);
      }
 else {
        throw new InvalidDataException(""String_Node_Str"" + arguments[1],MessageIDs.E_WRONG_PARAMETER_VALUE);
      }
      return String.valueOf(result.getTime());
    }
 catch (    NumberFormatException e) {
      throw new InvalidDataException(""String_Node_Str"" + arguments[1],MessageIDs.E_WRONG_PARAMETER_VALUE);
    }
  }
 catch (  NumberFormatException e) {
    throw new InvalidDataException(""String_Node_Str"" + arguments[0],MessageIDs.E_BAD_INT);
  }
}","/** 
 * {@inheritDoc}
 */
public String evaluate(String[] arguments) throws InvalidDataException {
  validateParamCount(arguments,2);
  try {
    long dateTime=Long.parseLong(arguments[0]);
    if (dateTime < 0) {
      throw new InvalidDataException(""String_Node_Str"" + dateTime,MessageIDs.E_TOO_SMALL_VALUE);
    }
    String opString=arguments[1];
    int opStringLength=opString.length();
    if (opStringLength < 2) {
      throw new InvalidDataException(""String_Node_Str"" + opString,MessageIDs.E_WRONG_PARAMETER_VALUE);
    }
    String op=opString.substring(opStringLength - 1,opStringLength);
    String offsetString=opString.substring(0,opStringLength - 1);
    try {
      int offset=Integer.parseInt(offsetString);
      Date date=new Date(dateTime);
      Date result=null;
      if (op.equalsIgnoreCase(""String_Node_Str"")) {
        result=DateUtils.addDays(date,offset);
      }
 else       if (op.equalsIgnoreCase(""String_Node_Str"")) {
        result=DateUtils.addMonths(date,offset);
      }
 else       if (op.equalsIgnoreCase(""String_Node_Str"")) {
        result=DateUtils.addYears(date,offset);
      }
 else {
        throw new InvalidDataException(""String_Node_Str"" + arguments[1],MessageIDs.E_WRONG_PARAMETER_VALUE);
      }
      return String.valueOf(result.getTime());
    }
 catch (    NumberFormatException e) {
      throw new InvalidDataException(""String_Node_Str"" + arguments[1],MessageIDs.E_WRONG_PARAMETER_VALUE);
    }
  }
 catch (  NumberFormatException e) {
    throw new InvalidDataException(""String_Node_Str"" + arguments[0],MessageIDs.E_BAD_INT);
  }
}",0.9898283534647172
96132,"public String evaluate(String[] arguments) throws InvalidDataException {
  Date now=new Date();
  return String.valueOf(now.getTime());
}","/** 
 * {@inheritDoc}
 */
public String evaluate(String[] arguments){
  Date now=new Date();
  return String.valueOf(now.getTime());
}",0.7970479704797048
96133,"public String evaluate(String[] arguments) throws InvalidDataException {
  validateParamCount(arguments,2);
  try {
    Date result=DateUtils.parseDate(arguments[0],new String[]{arguments[1]});
    return String.valueOf(result.getTime());
  }
 catch (  ParseException e) {
    throw new InvalidDataException(""String_Node_Str"" + e.getMessage(),MessageIDs.E_WRONG_PARAMETER_VALUE);
  }
}","/** 
 * {@inheritDoc}
 */
public String evaluate(String[] arguments) throws InvalidDataException {
  validateParamCount(arguments,2);
  try {
    Date result=DateUtils.parseDate(arguments[0],new String[]{arguments[1]});
    return String.valueOf(result.getTime());
  }
 catch (  ParseException e) {
    throw new InvalidDataException(""String_Node_Str"" + e.getMessage(),MessageIDs.E_WRONG_PARAMETER_VALUE);
  }
}",0.9673366834170856
96134,"/** 
 * inserts a new Technical Name into GUIModel
 * @param component IComponentIdentifier
 */
private void createNewTechnicalName(final IComponentIdentifier component){
  if (getEditorHelper().requestEditableState() != EditableState.OK) {
    return;
  }
  IObjectMappingAssoziationPO techNameAssoc=getAut().getObjMap().addTechnicalName(component,getAut());
  if (techNameAssoc != null) {
    getEditorHelper().setDirty(true);
    if (m_omEditorBP.getCategoryToCreateIn() != null) {
      m_omEditorBP.getCategoryToCreateIn().addAssociation(techNameAssoc);
    }
 else {
      getAut().getObjMap().getUnmappedTechnicalCategory().addAssociation(techNameAssoc);
    }
    DataEventDispatcher.getInstance().fireDataChangedListener(techNameAssoc.getCategory(),DataState.StructureModified,UpdateState.onlyInEditor);
    m_tableViewer.refresh();
  }
  if (techNameAssoc == null) {
    for (    IObjectMappingAssoziationPO assoc : getAut().getObjMap().getMappings()) {
      IComponentIdentifier techName=assoc.getTechnicalName();
      if (techName != null && techName.equals(component)) {
        techNameAssoc=assoc;
        techNameAssoc.setCompIdentifier(component);
        break;
      }
    }
  }
  if (techNameAssoc != null) {
    IStructuredSelection techNameSelection=new StructuredSelection(techNameAssoc);
    m_treeViewer.setSelection(techNameSelection);
    m_uiElementTreeViewer.setSelection(techNameSelection);
    m_mappedComponentTreeViewer.setSelection(techNameSelection);
    refreshAllViewer();
  }
}","/** 
 * inserts a new Technical Name into GUIModel
 * @param component IComponentIdentifier
 */
private void createNewTechnicalName(final IComponentIdentifier component){
  if (getEditorHelper().requestEditableState() != EditableState.OK) {
    return;
  }
  IObjectMappingAssoziationPO techNameAssoc=getAut().getObjMap().addTechnicalName(component,getAut());
  if (techNameAssoc != null) {
    getEditorHelper().setDirty(true);
    if (m_omEditorBP.getCategoryToCreateIn() != null) {
      m_omEditorBP.getCategoryToCreateIn().addAssociation(techNameAssoc);
    }
 else {
      getAut().getObjMap().getUnmappedTechnicalCategory().addAssociation(techNameAssoc);
    }
    DataEventDispatcher.getInstance().fireDataChangedListener(techNameAssoc.getCategory(),DataState.StructureModified,UpdateState.onlyInEditor);
    m_tableViewer.refresh();
  }
 else {
    for (    IObjectMappingAssoziationPO assoc : getAut().getObjMap().getMappings()) {
      IComponentIdentifier techName=assoc.getTechnicalName();
      if (techName != null && techName.equals(component)) {
        techNameAssoc=assoc;
        techNameAssoc.setCompIdentifier(component);
        break;
      }
    }
  }
  if (techNameAssoc != null) {
    IStructuredSelection techNameSelection=new StructuredSelection(techNameAssoc);
    m_treeViewer.setSelection(techNameSelection);
    m_uiElementTreeViewer.setSelection(techNameSelection);
    m_mappedComponentTreeViewer.setSelection(techNameSelection);
    refreshAllViewer();
  }
}",0.9897044171371636
96135,"/** 
 * {@inheritDoc}
 */
public int hashCode(){
  return new HashCodeBuilder().append(getHierarchyNames()).append(getNeighbours()).toHashCode();
}","/** 
 * {@inheritDoc}
 */
public int hashCode(){
  List neighbours=new ArrayList(getNeighbours());
  Collections.sort(neighbours);
  return new HashCodeBuilder().append(getHierarchyNames()).append(neighbours).toHashCode();
}",0.7115902964959568
96136,"/** 
 * {@inheritDoc}
 */
public boolean equals(Object obj){
  if (obj instanceof IComponentIdentifier) {
    IComponentIdentifier compId=(IComponentIdentifier)obj;
    return new EqualsBuilder().append(getHierarchyNames(),compId.getHierarchyNames()).append(getNeighbours(),compId.getNeighbours()).isEquals();
  }
  return super.equals(obj);
}","/** 
 * {@inheritDoc}
 */
public boolean equals(Object obj){
  if (obj instanceof IComponentIdentifier) {
    IComponentIdentifier compId=(IComponentIdentifier)obj;
    List neighbours1=new ArrayList(getNeighbours());
    List neighbours2=new ArrayList(compId.getNeighbours());
    Collections.sort(neighbours1);
    Collections.sort(neighbours2);
    return new EqualsBuilder().append(getHierarchyNames(),compId.getHierarchyNames()).append(neighbours1,neighbours2).isEquals();
  }
  return super.equals(obj);
}",0.7166276346604216
96137,"/** 
 * {@inheritDoc}
 */
protected DropTargetListener getViewerDropAdapter(){
  return new TCEditorDropTargetListener(this);
}","/** 
 * {@inheritDoc} 
 */
protected DropTargetListener getViewerDropAdapter(){
  return new TCEditorDropTargetListener(this);
}",0.996078431372549
96138,"/** 
 * Creates the EventHandler part of the editor
 * @param parent Composite
 */
private void createEventHandlerPart(Composite parent){
  Composite headLineComposite=new Composite(parent,SWT.NONE);
  GridLayout layout=new GridLayout(1,true);
  layout.marginWidth=0;
  layout.marginHeight=0;
  layout.marginBottom=0;
  layout.marginTop=0;
  headLineComposite.setLayout(layout);
  Label headLine=new Label(headLineComposite,SWT.NONE);
  headLine.setText(Messages.TestCaseEditorEHAreaHeadline);
  ControlDecorator.decorateInfo(headLine,""String_Node_Str"",false);
  GridData ehTvGridData=new GridData();
  ehTvGridData.grabExcessHorizontalSpace=true;
  ehTvGridData.grabExcessVerticalSpace=true;
  ehTvGridData.horizontalAlignment=SWT.FILL;
  ehTvGridData.verticalAlignment=SWT.FILL;
  ehTvGridData.verticalSpan=100;
  GridLayout ehTvLayout=new GridLayout(1,true);
  ehTvLayout.marginWidth=0;
  ehTvLayout.marginHeight=0;
  ehTvLayout.marginBottom=0;
  ehTvLayout.marginTop=0;
  m_eventHandlerTreeViewer=new TreeViewer(headLineComposite);
  m_eventHandlerTreeViewer.getTree().setLayout(ehTvLayout);
  m_eventHandlerTreeViewer.getTree().setLayoutData(ehTvGridData);
  DecoratingLabelProvider lp=new DecoratingLabelProvider(new GeneralLabelProvider(),Plugin.getDefault().getWorkbench().getDecoratorManager().getLabelDecorator());
  m_eventHandlerTreeViewer.setLabelProvider(lp);
  m_eventHandlerTreeViewer.setComparer(new UIIdentitiyElementComparer());
  m_eventHandlerTreeViewer.setUseHashlookup(true);
  m_eventHandlerTreeViewer.getTree().addListener(SWT.MouseDown,new MouseDownListener());
  firePropertyChange(IWorkbenchPartConstants.PROP_INPUT);
}","/** 
 * Creates the EventHandler part of the editor
 * @param parent Composite
 */
private void createEventHandlerPart(Composite parent){
  Composite headLineComposite=new Composite(parent,SWT.NONE);
  GridLayout layout=new GridLayout(1,true);
  layout.marginWidth=0;
  layout.marginHeight=0;
  layout.marginBottom=0;
  layout.marginTop=0;
  headLineComposite.setLayout(layout);
  Label headLine=new Label(headLineComposite,SWT.NONE);
  headLine.setText(Messages.TestCaseEditorEHAreaHeadline);
  ControlDecorator.decorateInfo(headLine,""String_Node_Str"",false);
  GridData ehTvGridData=new GridData();
  ehTvGridData.grabExcessHorizontalSpace=true;
  ehTvGridData.grabExcessVerticalSpace=true;
  ehTvGridData.horizontalAlignment=SWT.FILL;
  ehTvGridData.verticalAlignment=SWT.FILL;
  ehTvGridData.verticalSpan=100;
  GridLayout ehTvLayout=new GridLayout(1,true);
  ehTvLayout.marginWidth=0;
  ehTvLayout.marginHeight=0;
  ehTvLayout.marginBottom=0;
  ehTvLayout.marginTop=0;
  m_eventHandlerTreeViewer=new TreeViewer(headLineComposite);
  m_eventHandlerTreeViewer.getTree().setLayout(ehTvLayout);
  m_eventHandlerTreeViewer.getTree().setLayoutData(ehTvGridData);
  ColumnViewerToolTipSupport.enableFor(m_eventHandlerTreeViewer);
  DecoratingCellLabelProvider lp=new DecoratingCellLabelProvider(new TooltipLabelProvider(),Plugin.getDefault().getWorkbench().getDecoratorManager().getLabelDecorator());
  m_eventHandlerTreeViewer.setLabelProvider(lp);
  m_eventHandlerTreeViewer.setComparer(new UIIdentitiyElementComparer());
  m_eventHandlerTreeViewer.setUseHashlookup(true);
  m_eventHandlerTreeViewer.getTree().addListener(SWT.MouseDown,new MouseDownListener());
  firePropertyChange(IWorkbenchPartConstants.PROP_INPUT);
}",0.973871733966746
96139,"/** 
 * clear all test data related problems for the given node
 * @param node the node
 */
private static void resetTestDataCompleteness(INodePO node){
  IProjectPO proj=GeneralStorage.getInstance().getProject();
  for (  Locale locale : proj.getLangHelper().getLanguageList()) {
    setCompletenessTestData(node,locale,true);
  }
}","/** 
 * clear all test data related problems for the given node
 * @param node the node
 */
private static void resetTestDataCompleteness(INodePO node){
  Set<IProblem> toRemove=new HashSet<IProblem>();
  for (  IProblem problem : node.getProblems()) {
    if (problem.getProblemType().equals(ProblemType.REASON_TD_INCOMPLETE)) {
      toRemove.add(problem);
    }
  }
  for (  IProblem problem : toRemove) {
    node.removeProblem(problem);
  }
}",0.4794871794871795
96140,"/** 
 * {@inheritDoc}
 */
public Object executeImpl(ExecutionEvent event){
  TestCaseBrowser testSpecTreeView=(TestCaseBrowser)Plugin.getView(Constants.TC_BROWSER_ID);
  if (testSpecTreeView == null) {
    return null;
  }
  if (!(testSpecTreeView.getTreeViewer().getSelection() instanceof IStructuredSelection)) {
    return null;
  }
  IStructuredSelection selection=(IStructuredSelection)testSpecTreeView.getTreeViewer().getSelection();
  Iterator iter=selection.iterator();
  while (iter.hasNext()) {
    INodePO selectedNode=(INodePO)iter.next();
    INodePO editableNode=findEditableNode(selectedNode);
    if (editableNode == null) {
      return null;
    }
    openEditor(editableNode);
  }
  return null;
}","/** 
 * {@inheritDoc}
 */
public Object executeImpl(ExecutionEvent event){
  TestCaseBrowser testSpecTreeView=(TestCaseBrowser)Plugin.getView(Constants.TC_BROWSER_ID);
  if (testSpecTreeView == null) {
    return null;
  }
  if (!(testSpecTreeView.getTreeViewer().getSelection() instanceof IStructuredSelection)) {
    return null;
  }
  IStructuredSelection selection=(IStructuredSelection)testSpecTreeView.getTreeViewer().getSelection();
  Iterator iter=selection.iterator();
  while (iter.hasNext()) {
    Object obj=iter.next();
    if (obj instanceof INodePO) {
      INodePO selectedNode=(INodePO)obj;
      INodePO editableNode=findEditableNode(selectedNode);
      if (editableNode == null) {
        return null;
      }
      openEditor(editableNode);
    }
  }
  return null;
}",0.8736702127659575
96141,"@Override public void caseAFunction(AFunction function){
  if (function.getFunctionName() == null || StringUtils.isEmpty(function.getFunctionName().getText())) {
    throw new SemanticParsingException(I18n.getString(MessageIDs.getMessage(MessageIDs.E_MISSING_FUNCTION_NAME)),MessageIDs.E_MISSING_FUNCTION_NAME,function.getFunctionToken().getPos());
  }
  ParsedParameter argumentParser=new ParsedParameter(m_isGuiSource,m_paramNode,m_paramDesc);
  PFunctionArgList functionArgList=function.getFunctionArgList();
  if (functionArgList != null) {
    functionArgList.apply(argumentParser);
  }
  IParamValueToken[] argumentTokens=argumentParser.getTokens().toArray(new IParamValueToken[argumentParser.getTokens().size()]);
  StringBuilder functionTextBuilder=new StringBuilder();
  functionTextBuilder.append(function.getFunctionToken().getText()).append(function.getFunctionName().getText()).append(function.getBeginFunctionArgsToken().getText());
  String functionPrefix=functionTextBuilder.toString();
  for (  IParamValueToken token : argumentTokens) {
    functionTextBuilder.append(token.getGuiString());
  }
  String functionSuffix=function.getEndFunctionArgsToken().getText();
  functionTextBuilder.append(functionSuffix);
  m_paramValueTokens.add(new FunctionToken(functionTextBuilder.toString(),functionPrefix,functionSuffix,function.getFunctionToken().getPos(),m_paramDesc,argumentTokens));
}","@Override public void caseAFunction(AFunction function){
  if (function.getFunctionName() == null || StringUtils.isEmpty(function.getFunctionName().getText())) {
    throw new SemanticParsingException(I18n.getString(MessageIDs.getMessage(MessageIDs.E_MISSING_FUNCTION_NAME)),MessageIDs.E_MISSING_FUNCTION_NAME,function.getFunctionToken().getPos());
  }
  ParsedParameter argumentParser=new ParsedParameter(m_isGuiSource,m_paramNode,m_paramDesc);
  PFunctionArgList functionArgList=function.getFunctionArgList();
  if (functionArgList != null) {
    functionArgList.apply(argumentParser);
  }
  IParamValueToken[] argumentTokens=argumentParser.getTokens().toArray(new IParamValueToken[argumentParser.getTokens().size()]);
  StringBuilder functionTextBuilder=new StringBuilder();
  functionTextBuilder.append(function.getFunctionToken().getText()).append(function.getFunctionName().getText()).append(function.getBeginFunctionArgsToken().getText());
  String functionPrefix=functionTextBuilder.toString();
  for (  IParamValueToken token : argumentTokens) {
    if (m_isGuiSource) {
      functionTextBuilder.append(token.getGuiString());
    }
 else {
      functionTextBuilder.append(token.getModelString());
    }
  }
  String functionSuffix=function.getEndFunctionArgsToken().getText();
  functionTextBuilder.append(functionSuffix);
  m_paramValueTokens.add(new FunctionToken(functionTextBuilder.toString(),functionPrefix,functionSuffix,function.getFunctionToken().getPos(),m_paramDesc,argumentTokens));
}",0.9638802889576884
96142,"@Override public String evaluate(String[] arguments) throws InvalidDataException {
  validateParamCount(arguments,2);
  try {
    Long dateTime=Long.valueOf(arguments[0]);
    if (dateTime < 0) {
      throw new InvalidDataException(""String_Node_Str"" + dateTime,MessageIDs.E_TOO_SMALL_VALUE);
    }
    Date date=new Date(dateTime);
    return DateFormatUtils.format(date,arguments[1]);
  }
 catch (  NumberFormatException e) {
    throw new InvalidDataException(""String_Node_Str"" + arguments[0],MessageIDs.E_BAD_INT);
  }
}","public String evaluate(String[] arguments) throws InvalidDataException {
  validateParamCount(arguments,2);
  try {
    Long dateTime=Long.valueOf(arguments[0]);
    if (dateTime < 0) {
      throw new InvalidDataException(""String_Node_Str"" + dateTime,MessageIDs.E_TOO_SMALL_VALUE);
    }
    Date date=new Date(dateTime);
    return DateFormatUtils.format(date,arguments[1]);
  }
 catch (  NumberFormatException e) {
    throw new InvalidDataException(""String_Node_Str"" + arguments[0],MessageIDs.E_BAD_INT);
  }
}",0.9903660886319846
96143,"@Override public String evaluate(String[] arguments) throws InvalidDataException {
  validateParamCount(arguments,2);
  try {
    long dateTime=Long.parseLong(arguments[0]);
    if (dateTime < 0) {
      throw new InvalidDataException(""String_Node_Str"" + dateTime,MessageIDs.E_TOO_SMALL_VALUE);
    }
    String opString=arguments[1];
    int opStringLength=opString.length();
    if (opStringLength < 2) {
      throw new InvalidDataException(""String_Node_Str"" + opString,MessageIDs.E_WRONG_PARAMETER_VALUE);
    }
    String op=opString.substring(opStringLength - 1,opStringLength);
    String offsetString=op.substring(0,opStringLength - 1);
    try {
      int offset=Integer.parseInt(offsetString);
      Date date=new Date(dateTime);
      Date result=null;
      if (op.equalsIgnoreCase(""String_Node_Str"")) {
        result=DateUtils.addDays(date,offset);
      }
 else       if (op.equalsIgnoreCase(""String_Node_Str"")) {
        result=DateUtils.addMonths(date,offset);
      }
 else       if (op.equalsIgnoreCase(""String_Node_Str"")) {
        result=DateUtils.addYears(date,offset);
      }
 else {
        throw new InvalidDataException(""String_Node_Str"" + arguments[1],MessageIDs.E_WRONG_PARAMETER_VALUE);
      }
      return String.valueOf(result.getTime());
    }
 catch (    NumberFormatException e) {
      throw new InvalidDataException(""String_Node_Str"" + arguments[1],MessageIDs.E_WRONG_PARAMETER_VALUE);
    }
  }
 catch (  NumberFormatException e) {
    throw new InvalidDataException(""String_Node_Str"" + arguments[0],MessageIDs.E_BAD_INT);
  }
}","public String evaluate(String[] arguments) throws InvalidDataException {
  validateParamCount(arguments,2);
  try {
    long dateTime=Long.parseLong(arguments[0]);
    if (dateTime < 0) {
      throw new InvalidDataException(""String_Node_Str"" + dateTime,MessageIDs.E_TOO_SMALL_VALUE);
    }
    String opString=arguments[1];
    int opStringLength=opString.length();
    if (opStringLength < 2) {
      throw new InvalidDataException(""String_Node_Str"" + opString,MessageIDs.E_WRONG_PARAMETER_VALUE);
    }
    String op=opString.substring(opStringLength - 1,opStringLength);
    String offsetString=op.substring(0,opStringLength - 1);
    try {
      int offset=Integer.parseInt(offsetString);
      Date date=new Date(dateTime);
      Date result=null;
      if (op.equalsIgnoreCase(""String_Node_Str"")) {
        result=DateUtils.addDays(date,offset);
      }
 else       if (op.equalsIgnoreCase(""String_Node_Str"")) {
        result=DateUtils.addMonths(date,offset);
      }
 else       if (op.equalsIgnoreCase(""String_Node_Str"")) {
        result=DateUtils.addYears(date,offset);
      }
 else {
        throw new InvalidDataException(""String_Node_Str"" + arguments[1],MessageIDs.E_WRONG_PARAMETER_VALUE);
      }
      return String.valueOf(result.getTime());
    }
 catch (    NumberFormatException e) {
      throw new InvalidDataException(""String_Node_Str"" + arguments[1],MessageIDs.E_WRONG_PARAMETER_VALUE);
    }
  }
 catch (  NumberFormatException e) {
    throw new InvalidDataException(""String_Node_Str"" + arguments[0],MessageIDs.E_BAD_INT);
  }
}",0.9967989756722152
96144,"@Override public String evaluate(String[] arguments) throws InvalidDataException {
  Date now=new Date();
  return String.valueOf(now.getTime());
}","public String evaluate(String[] arguments) throws InvalidDataException {
  Date now=new Date();
  return String.valueOf(now.getTime());
}",0.9647887323943662
96145,"@Override public String evaluate(String[] arguments) throws InvalidDataException {
  validateParamCount(arguments,2);
  try {
    Date result=DateUtils.parseDate(arguments[0],new String[]{arguments[1]});
    return String.valueOf(result.getTime());
  }
 catch (  ParseException e) {
    throw new InvalidDataException(""String_Node_Str"" + e.getMessage(),MessageIDs.E_WRONG_PARAMETER_VALUE);
  }
}","public String evaluate(String[] arguments) throws InvalidDataException {
  validateParamCount(arguments,2);
  try {
    Date result=DateUtils.parseDate(arguments[0],new String[]{arguments[1]});
    return String.valueOf(result.getTime());
  }
 catch (  ParseException e) {
    throw new InvalidDataException(""String_Node_Str"" + e.getMessage(),MessageIDs.E_WRONG_PARAMETER_VALUE);
  }
}",0.9871794871794872
96146,"public void run(){
  getTreeViewer().refresh();
}","public void run(){
  getTreeViewer().setInput(null);
  getTreeViewer().refresh();
}",0.7424242424242424
96147,"/** 
 * {@inheritDoc} 
 */
public void dispose(){
  try {
    DataEventDispatcher ded=DataEventDispatcher.getInstance();
    ded.removeDataChangedListener(this);
    ded.removeProblemPropagationListener(this);
    getViewSite().getWorkbenchWindow().getSelectionService().removeSelectionListener(m_actionListener);
    getTreeViewer().removeDoubleClickListener(m_doubleClickListener);
    Plugin.getDefault().getTreeViewerContainer().remove(this);
  }
  finally {
    super.dispose();
  }
}","/** 
 * {@inheritDoc} 
 */
public void dispose(){
  try {
    DataEventDispatcher ded=DataEventDispatcher.getInstance();
    ded.removeDataChangedListener(this);
    getViewSite().getWorkbenchWindow().getSelectionService().removeSelectionListener(m_actionListener);
    getTreeViewer().removeDoubleClickListener(m_doubleClickListener);
    Plugin.getDefault().getTreeViewerContainer().remove(this);
  }
  finally {
    super.dispose();
  }
}",0.9483870967741936
96148,"/** 
 * {@inheritDoc}
 */
public void createPartControl(Composite parent){
  m_cutTreeItemAction=new CutTreeItemActionTCBrowser();
  m_pasteTreeItemAction=new PasteTreeItemActionTCBrowser();
  m_moveTestCaseAction=new MoveTestCaseAction();
  super.createPartControl(parent);
  ColumnViewerToolTipSupport.enableFor(getTreeViewer());
  getTreeViewer().setContentProvider(new TestCaseBrowserContentProvider());
  DecoratingCellLabelProvider lp=new DecoratingCellLabelProvider(new TestCaseBrowserLabelProvider(),Plugin.getDefault().getWorkbench().getDecoratorManager().getLabelDecorator());
  getTreeViewer().setLabelProvider(lp);
  int ops=DND.DROP_MOVE;
  Transfer[] transfers=new Transfer[]{LocalSelectionTransfer.getInstance()};
  getTreeViewer().addDragSupport(ops,transfers,new TreeViewerContainerDragSourceListener(getTreeViewer()));
  getTreeViewer().addDropSupport(ops,transfers,new TestSpecDropTargetListener(this));
  registerContextMenu();
  Plugin.getHelpSystem().setHelp(getTreeViewer().getControl(),ContextHelpIds.TEST_SPEC_VIEW);
  configureActionBars();
  if (GeneralStorage.getInstance().getProject() != null) {
    handleProjectLoaded();
  }
  DataEventDispatcher.getInstance().addProblemPropagationListener(this);
  Plugin.getDefault().getTreeViewerContainer().add(this);
}","/** 
 * {@inheritDoc}
 */
public void createPartControl(Composite parent){
  m_cutTreeItemAction=new CutTreeItemActionTCBrowser();
  m_pasteTreeItemAction=new PasteTreeItemActionTCBrowser();
  m_moveTestCaseAction=new MoveTestCaseAction();
  super.createPartControl(parent);
  ColumnViewerToolTipSupport.enableFor(getTreeViewer());
  getTreeViewer().setContentProvider(new TestCaseBrowserContentProvider());
  DecoratingCellLabelProvider lp=new DecoratingCellLabelProvider(new TestCaseBrowserLabelProvider(),Plugin.getDefault().getWorkbench().getDecoratorManager().getLabelDecorator());
  getTreeViewer().setLabelProvider(lp);
  int ops=DND.DROP_MOVE;
  Transfer[] transfers=new Transfer[]{LocalSelectionTransfer.getInstance()};
  getTreeViewer().addDragSupport(ops,transfers,new TreeViewerContainerDragSourceListener(getTreeViewer()));
  getTreeViewer().addDropSupport(ops,transfers,new TestSpecDropTargetListener(this));
  registerContextMenu();
  Plugin.getHelpSystem().setHelp(getTreeViewer().getControl(),ContextHelpIds.TEST_SPEC_VIEW);
  configureActionBars();
  if (GeneralStorage.getInstance().getProject() != null) {
    handleProjectLoaded();
  }
  Plugin.getDefault().getTreeViewerContainer().add(this);
}",0.930938123752495
96149,"/** 
 * deleting monitoring reports by age (days of existence)  or deleting all, if the summaryId is null.
 * @param session The current session (EntityManager)
 * @param summaryId The summaryToDelete. This value can be null, if all test results were deleted. if summaryId is null, all monitoring reports will also be deleted.  
 */
private static void deleteMonitoringReports(EntityManager session,Long summaryId){
  ITestResultSummaryPO summaryPo=null;
  if (summaryId != null) {
    summaryPo=session.find(PoMaker.getTestResultSummaryClass(),summaryId);
    if (summaryPo != null) {
      summaryPo.setMonitoringReport(null);
      summaryPo.setReportWritten(false);
    }
  }
 else {
    StringBuilder queryBuilder=new StringBuilder();
    queryBuilder.append(""String_Node_Str"").append(PoMaker.getTestResultSummaryClass().getSimpleName()).append(""String_Node_Str"");
    Query q=session.createQuery(queryBuilder.toString());
    q.setParameter(""String_Node_Str"",true);
    @SuppressWarnings(""String_Node_Str"") List<ITestResultSummaryPO> reportList=q.getResultList();
    for (    ITestResultSummaryPO summary : reportList) {
      summary.setMonitoringReport(null);
      summary.setReportWritten(false);
    }
  }
}","/** 
 * deleting monitoring reports by age (days of existence)  or deleting all, if the summaryId is null.
 * @param session The current session (EntityManager)
 * @param summaryId The summaryToDelete. This value can be null, if all test results were deleted. if summaryId is null, all monitoring reports will also be deleted.  
 */
private static void deleteMonitoringReports(EntityManager session,Long summaryId){
  ITestResultSummaryPO summaryPo=null;
  if (summaryId != null) {
    summaryPo=session.find(PoMaker.getTestResultSummaryClass(),summaryId);
    if (summaryPo != null) {
      summaryPo.setMonitoringReport(null);
      summaryPo.setReportWritten(false);
    }
  }
 else {
    Query deleteMonitoringReportsQuery=session.createQuery(""String_Node_Str"" + PoMaker.getMonitoringReportClass().getSimpleName());
    deleteMonitoringReportsQuery.executeUpdate();
    session.flush();
    StringBuilder queryBuilder=new StringBuilder();
    queryBuilder.append(""String_Node_Str"").append(PoMaker.getTestResultSummaryClass().getSimpleName()).append(""String_Node_Str"");
    Query q=session.createQuery(queryBuilder.toString());
    q.setParameter(""String_Node_Str"",true);
    @SuppressWarnings(""String_Node_Str"") List<ITestResultSummaryPO> reportList=q.getResultList();
    for (    ITestResultSummaryPO summary : reportList) {
      summary.setMonitoringReport(null);
      summary.setReportWritten(false);
    }
  }
}",0.9231351760696704
96150,"/** 
 * delete test result elements of selected summary
 * @param resultId id of test result
 */
private static final void deleteTestresultOfSummary(Long resultId){
  Persistor persistor=Persistor.instance();
  if (persistor == null) {
    return;
  }
  final EntityManager session=persistor.openSession();
  try {
    final EntityTransaction tx=persistor.getTransaction(session);
    persistor.lockDB();
    executeDeleteTestresultOfSummary(session,resultId);
    deleteMonitoringReports(session,resultId);
    persistor.commitTransaction(session,tx);
  }
 catch (  PMException e) {
    throw new JBFatalException(Messages.DeleteTestresultElementFailed,e,MessageIDs.E_DATABASE_GENERAL);
  }
catch (  ProjectDeletedException e) {
    throw new JBFatalException(Messages.DeleteTestresultElementFailed,e,MessageIDs.E_PROJECT_NOT_FOUND);
  }
 finally {
    persistor.dropSession(session);
    persistor.unlockDB();
  }
}","/** 
 * delete test result elements of selected summary
 * @param resultId id of test result
 */
private static final void deleteTestresultOfSummary(Long resultId){
  Persistor persistor=Persistor.instance();
  if (persistor == null) {
    return;
  }
  final EntityManager session=persistor.openSession();
  try {
    final EntityTransaction tx=persistor.getTransaction(session);
    persistor.lockDB();
    executeDeleteTestresultOfSummary(session,resultId);
    deleteMonitoringReports(session,resultId);
    persistor.commitTransaction(session,tx);
  }
 catch (  PMException e) {
    throw new JBFatalException(Messages.DeleteTestresultElementFailed,e,MessageIDs.E_DATABASE_GENERAL);
  }
catch (  ProjectDeletedException e) {
    throw new JBFatalException(Messages.DeleteTestresultElementFailed,e,MessageIDs.E_PROJECT_NOT_FOUND);
  }
 finally {
    persistor.dropSessionWithoutLockRelease(session);
    persistor.unlockDB();
  }
}",0.990280777537797
96151,"/** 
 * {@inheritDoc}
 */
public Map<String,String> requestAutConfigMapFromAgent(String autId){
  Map<String,String> autConfigMap=null;
  GetAutConfigMapMessage message=new GetAutConfigMapMessage(autId);
  GetAutConfigMapResponseCommand response=new GetAutConfigMapResponseCommand();
  try {
    ServerConnection.getInstance().request(message,response,REQUEST_CONFIG_MAP_TIMEOUT);
    final AtomicBoolean timeoutFlag=new AtomicBoolean(true);
    final Timer timerTimeout=new Timer();
    timerTimeout.schedule(new TimerTask(){
      public void run(){
        timeoutFlag.set(false);
        timerTimeout.cancel();
      }
    }
,REQUEST_CONFIG_MAP_TIMEOUT);
    while (response.getAutConfigMap() == null && timeoutFlag.get()) {
      TimeUtil.delay(200);
      log.info(Messages.WaitingForAutConfigMapFromAgent);
    }
    autConfigMap=response.getAutConfigMap();
  }
 catch (  NotConnectedException nce) {
    log.error(DebugConstants.ERROR,nce);
  }
catch (  CommunicationException ce) {
    log.error(DebugConstants.ERROR,ce);
  }
  return autConfigMap;
}","/** 
 * {@inheritDoc} 
 */
public Map<String,String> requestAutConfigMapFromAgent(String autId){
  Map<String,String> autConfigMap=null;
  GetAutConfigMapMessage message=new GetAutConfigMapMessage(autId);
  GetAutConfigMapResponseCommand response=new GetAutConfigMapResponseCommand();
  try {
    ServerConnection.getInstance().request(message,response,REQUEST_CONFIG_MAP_TIMEOUT);
    final AtomicBoolean timeoutFlag=new AtomicBoolean(true);
    final Timer timerTimeout=new Timer();
    timerTimeout.schedule(new TimerTask(){
      public void run(){
        timeoutFlag.set(false);
        timerTimeout.cancel();
      }
    }
,REQUEST_CONFIG_MAP_TIMEOUT);
    while (!response.hasReceivedResponse() && timeoutFlag.get()) {
      TimeUtil.delay(200);
      log.info(Messages.WaitingForAutConfigMapFromAgent);
    }
    autConfigMap=response.getAutConfigMap();
  }
 catch (  NotConnectedException nce) {
    log.error(DebugConstants.ERROR,nce);
  }
catch (  CommunicationException ce) {
    log.error(DebugConstants.ERROR,ce);
  }
  return autConfigMap;
}",0.9688090737240076
96152,"/** 
 * {@inheritDoc}
 */
public Message execute(){
  setAutConfigMap(m_message.getAutConfigMap());
  return null;
}","/** 
 * {@inheritDoc}
 */
public Message execute(){
  setReceivedResponse(true);
  setAutConfigMap(m_message.getAutConfigMap());
  return null;
}",0.8888888888888888
96153,"/** 
 * this method delays the test execution start during AUT startup
 */
private void waitExternalTime(){
  int timeToWait=AUT_STARTUP_DELAY_DEFAULT;
  try {
    String value=EnvironmentUtils.getProcessEnvironment().getProperty(AUT_STARTUP_DELAY_VAR);
    if (value == null) {
      value=System.getProperty(AUT_STARTUP_DELAY_VAR);
    }
    timeToWait=Integer.valueOf(value).intValue();
  }
 catch (  NumberFormatException e) {
  }
  try {
    Thread.sleep(timeToWait);
  }
 catch (  InterruptedException e) {
  }
}","/** 
 * this method delays the test execution start during AUT startup
 */
private void waitExternalTime(){
  int timeToWait=AUT_STARTUP_DELAY_DEFAULT;
  try {
    String value=EnvironmentUtils.getProcessEnvironment().getProperty(AUT_STARTUP_DELAY_VAR);
    if (value == null) {
      value=System.getProperty(AUT_STARTUP_DELAY_VAR);
    }
    timeToWait=Integer.valueOf(value).intValue();
  }
 catch (  NumberFormatException e) {
  }
  TimeUtil.delay(timeToWait);
}",0.9207317073170732
96154,"/** 
 * @param areaComposite The composite for which to create and set a layout.
 */
private void createLayout(Composite areaComposite){
  areaComposite.setLayout(LayoutUtil.createDefaultGridLayout(NUM_COLUMNS));
  GridData gridData=new GridData(GridData.BEGINNING);
  gridData.horizontalSpan=NUM_COLUMNS;
  areaComposite.setLayoutData(gridData);
}","/** 
 * @param areaComposite The composite for which to create and set a layout.
 */
private void createLayout(Composite areaComposite){
  areaComposite.setLayout(createDefaultGridLayout(NUM_COLUMNS));
  GridData gridData=new GridData(GridData.BEGINNING);
  gridData.horizontalSpan=NUM_COLUMNS;
  areaComposite.setLayoutData(gridData);
}",0.983941605839416
96155,"/** 
 * Creates three buttons for the class path editor.
 * @param parent The parent composite.
 */
private void initGuiClasspathEditor(Composite parent){
  UIComponentHelper.createLabel(parent,""String_Node_Str"");
  m_classPathListField=new List(parent,LayoutUtil.MULTI_TEXT_STYLE | SWT.SINGLE);
  GridData textGridData=new GridData();
  textGridData.horizontalAlignment=GridData.FILL;
  textGridData.grabExcessHorizontalSpace=true;
  textGridData.heightHint=Dialog.convertHeightInCharsToPixels(LayoutUtil.getFontMetrics(m_classPathListField),8);
  LayoutUtil.addToolTipAndMaxWidth(textGridData,m_classPathListField);
  m_classPathListField.setLayoutData(textGridData);
  m_classPathButtonComposite=UIComponentHelper.createLayoutComposite(parent);
  m_addElementButton=new Button(m_classPathButtonComposite,SWT.PUSH);
  m_addElementButton.setText(Messages.AUTConfigComponentElement);
  m_addElementButton.setLayoutData(BUTTON_LAYOUT);
  m_moveElementUpButton=new Button(m_classPathButtonComposite,SWT.PUSH);
  m_moveElementUpButton.setImage(IconConstants.UP_ARROW_DIS_IMAGE);
  m_moveElementUpButton.setToolTipText(Messages.AutConfigDialogMoveCpUpToolTip);
  m_moveElementUpButton.setLayoutData(BUTTON_LAYOUT);
  m_moveElementDownButton=new Button(m_classPathButtonComposite,SWT.PUSH);
  m_moveElementDownButton.setImage(IconConstants.DOWN_ARROW_DIS_IMAGE);
  m_moveElementDownButton.setToolTipText(Messages.AutConfigDialogMoveCpDownToolTip);
  m_moveElementDownButton.setLayoutData(BUTTON_LAYOUT);
  m_editElementButton=new Button(m_classPathButtonComposite,SWT.PUSH);
  m_editElementButton.setText(Messages.AUTConfigComponentEdit);
  m_editElementButton.setLayoutData(BUTTON_LAYOUT);
  m_removeElementButton=new Button(m_classPathButtonComposite,SWT.PUSH);
  m_removeElementButton.setText(Messages.AUTConfigComponentRemove);
  m_removeElementButton.setLayoutData(BUTTON_LAYOUT);
  checkClasspathButtons();
}","/** 
 * Creates three buttons for the class path editor.
 * @param parent The parent composite.
 */
private void initGuiClasspathEditor(Composite parent){
  UIComponentHelper.createLabel(parent,""String_Node_Str"");
  Composite classpathComposite=UIComponentHelper.createLayoutComposite(parent);
  m_classPathListField=new List(classpathComposite,LayoutUtil.MULTI_TEXT_STYLE | SWT.SINGLE);
  GridData textGridData=new GridData();
  textGridData.horizontalAlignment=GridData.FILL;
  textGridData.grabExcessHorizontalSpace=true;
  textGridData.heightHint=Dialog.convertHeightInCharsToPixels(LayoutUtil.getFontMetrics(m_classPathListField),2);
  LayoutUtil.addToolTipAndMaxWidth(textGridData,m_classPathListField);
  m_classPathListField.setLayoutData(textGridData);
  Composite moveComposite=UIComponentHelper.createLayoutComposite(parent);
  m_moveElementUpButton=new Button(moveComposite,SWT.PUSH);
  m_moveElementUpButton.setImage(IconConstants.UP_ARROW_DIS_IMAGE);
  m_moveElementUpButton.setToolTipText(Messages.AutConfigDialogMoveCpUpToolTip);
  m_moveElementUpButton.setLayoutData(BUTTON_LAYOUT);
  m_moveElementDownButton=new Button(moveComposite,SWT.PUSH);
  m_moveElementDownButton.setImage(IconConstants.DOWN_ARROW_DIS_IMAGE);
  m_moveElementDownButton.setToolTipText(Messages.AutConfigDialogMoveCpDownToolTip);
  m_moveElementDownButton.setLayoutData(BUTTON_LAYOUT);
  m_classPathButtonComposite=UIComponentHelper.createLayoutComposite(classpathComposite,3);
  m_addElementButton=new Button(m_classPathButtonComposite,SWT.PUSH);
  m_addElementButton.setText(Messages.AUTConfigComponentElement);
  m_addElementButton.setLayoutData(BUTTON_LAYOUT);
  m_editElementButton=new Button(m_classPathButtonComposite,SWT.PUSH);
  m_editElementButton.setText(Messages.AUTConfigComponentEdit);
  m_editElementButton.setLayoutData(BUTTON_LAYOUT);
  m_removeElementButton=new Button(m_classPathButtonComposite,SWT.PUSH);
  m_removeElementButton.setText(Messages.AUTConfigComponentRemove);
  m_removeElementButton.setLayoutData(BUTTON_LAYOUT);
  checkClasspathButtons();
}",0.8069468915177448
96156,"/** 
 * @param parent The parent Composite.
 */
private void initGuiEnvironmentEditor(Composite parent){
  UIComponentHelper.createLabel(parent,""String_Node_Str"");
  m_envTextArea=new JBText(parent,LayoutUtil.MULTI_TEXT_STYLE);
  LayoutUtil.setMaxChar(m_envTextArea,4000);
  GridData textGridData=new GridData();
  textGridData.horizontalAlignment=GridData.FILL;
  textGridData.horizontalSpan=2;
  textGridData.grabExcessHorizontalSpace=false;
  textGridData.widthHint=COMPOSITE_WIDTH;
  textGridData.heightHint=Dialog.convertHeightInCharsToPixels(LayoutUtil.getFontMetrics(m_envTextArea),5);
  m_envTextArea.setLayoutData(textGridData);
}","/** 
 * @param parent The parent Composite.
 */
private void initGuiEnvironmentEditor(Composite parent){
  UIComponentHelper.createLabel(parent,""String_Node_Str"");
  m_envTextArea=new JBText(parent,LayoutUtil.MULTI_TEXT | SWT.V_SCROLL);
  LayoutUtil.setMaxChar(m_envTextArea,4000);
  GridData textGridData=new GridData();
  textGridData.horizontalAlignment=GridData.FILL;
  textGridData.horizontalSpan=2;
  textGridData.grabExcessHorizontalSpace=false;
  textGridData.widthHint=COMPOSITE_WIDTH;
  textGridData.heightHint=Dialog.convertHeightInCharsToPixels(LayoutUtil.getFontMetrics(m_envTextArea),2);
  m_envTextArea.setLayoutData(textGridData);
}",0.9836829836829836
96157,"/** 
 * Inits the browser path area.
 * @param parent The parent Composite.
 */
protected void createBrowserPathEditor(Composite parent){
  m_browserPathLabel=UIComponentHelper.createLabel(parent,""String_Node_Str"");
  m_browserPathLabel.setData(SwtAUTHierarchyConstants.WIDGET_NAME,""String_Node_Str"");
  ControlDecorator.decorateInfo(m_browserPathLabel,""String_Node_Str"",false);
  m_browserTextField=UIComponentHelper.createTextField(parent,1);
  m_browserTextField.setData(SwtAUTHierarchyConstants.WIDGET_NAME,""String_Node_Str"");
  m_browserPathButton=new Button(UIComponentHelper.createLayoutComposite(parent),SWT.PUSH);
  m_browserPathButton.setText(I18n.getString(""String_Node_Str""));
  m_browserPathButton.setLayoutData(BUTTON_LAYOUT);
  m_browserPathButton.setData(SwtAUTHierarchyConstants.WIDGET_NAME,""String_Node_Str"");
}","/** 
 * Inits the browser path area.
 * @param parent The parent Composite.
 */
protected void createBrowserPathEditor(Composite parent){
  Label browserPathLabel=UIComponentHelper.createLabel(parent,""String_Node_Str"");
  browserPathLabel.setData(SwtAUTHierarchyConstants.WIDGET_NAME,""String_Node_Str"");
  ControlDecorator.decorateInfo(browserPathLabel,""String_Node_Str"",false);
  m_browserTextField=UIComponentHelper.createTextField(parent,1);
  m_browserTextField.setData(SwtAUTHierarchyConstants.WIDGET_NAME,""String_Node_Str"");
  m_browserPathButton=new Button(UIComponentHelper.createLayoutComposite(parent),SWT.PUSH);
  m_browserPathButton.setText(I18n.getString(""String_Node_Str""));
  m_browserPathButton.setLayoutData(BUTTON_LAYOUT);
  m_browserPathButton.setData(SwtAUTHierarchyConstants.WIDGET_NAME,""String_Node_Str"");
}",0.9927623642943304
96158,"/** 
 * @param basicAreaComposite The composite that represents the basic area.
 */
protected void createBasicArea(Composite basicAreaComposite){
  super.createBasicArea(basicAreaComposite);
  m_urlLabel=UIComponentHelper.createLabel(basicAreaComposite,""String_Node_Str"");
  m_urlLabel.setData(SwtAUTHierarchyConstants.WIDGET_NAME,""String_Node_Str"");
  m_autUrlTextField=UIComponentHelper.createTextField(basicAreaComposite,2);
  m_autUrlTextField.setData(SwtAUTHierarchyConstants.WIDGET_NAME,""String_Node_Str"");
  m_browserLabel=UIComponentHelper.createLabel(basicAreaComposite,""String_Node_Str"");
  m_browserLabel.setData(SwtAUTHierarchyConstants.WIDGET_NAME,""String_Node_Str"");
  m_browserCombo=UIComponentHelper.createEnumCombo(basicAreaComposite,2,""String_Node_Str"",Browser.class);
  m_browserCombo.setData(SwtAUTHierarchyConstants.WIDGET_NAME,""String_Node_Str"");
}","/** 
 * @param basicAreaComposite The composite that represents the basic area.
 */
protected void createBasicArea(Composite basicAreaComposite){
  super.createBasicArea(basicAreaComposite);
  Label urlLabel=UIComponentHelper.createLabel(basicAreaComposite,""String_Node_Str"");
  urlLabel.setData(SwtAUTHierarchyConstants.WIDGET_NAME,""String_Node_Str"");
  m_autUrlTextField=UIComponentHelper.createTextField(basicAreaComposite,2);
  m_autUrlTextField.setData(SwtAUTHierarchyConstants.WIDGET_NAME,""String_Node_Str"");
  Label browserLabel=UIComponentHelper.createLabel(basicAreaComposite,""String_Node_Str"");
  browserLabel.setData(SwtAUTHierarchyConstants.WIDGET_NAME,""String_Node_Str"");
  m_browserCombo=UIComponentHelper.createEnumCombo(basicAreaComposite,2,""String_Node_Str"",Browser.class);
  m_browserCombo.setData(SwtAUTHierarchyConstants.WIDGET_NAME,""String_Node_Str"");
}",0.9885321100917432
96159,"/** 
 * Create this dialog's expert area component.
 * @param expertAreaComposite Composite representing the expert area.
 */
protected void createExpertArea(Composite expertAreaComposite){
  super.createExpertArea(expertAreaComposite);
  m_activationMethodLabel=UIComponentHelper.createLabel(expertAreaComposite,""String_Node_Str"");
  m_activationMethodLabel.setData(SwtAUTHierarchyConstants.WIDGET_NAME,""String_Node_Str"");
  m_activationMethodCombo=UIComponentHelper.createEnumCombo(expertAreaComposite,2,""String_Node_Str"",ActivationMethod.class);
  m_activationMethodCombo.setData(SwtAUTHierarchyConstants.WIDGET_NAME,""String_Node_Str"");
  Label autIdAttibuteLabel=UIComponentHelper.createLabel(expertAreaComposite,""String_Node_Str"");
  autIdAttibuteLabel.setData(SwtAUTHierarchyConstants.WIDGET_NAME,""String_Node_Str"");
  m_autIdAttibuteTextField=UIComponentHelper.createTextField(expertAreaComposite,2);
  m_autIdAttibuteTextField.setData(SwtAUTHierarchyConstants.WIDGET_NAME,""String_Node_Str"");
}","/** 
 * Create this dialog's expert area component.
 * @param expertAreaComposite Composite representing the expert area.
 */
protected void createExpertArea(Composite expertAreaComposite){
  super.createExpertArea(expertAreaComposite);
  Label activationMethodLabel=UIComponentHelper.createLabel(expertAreaComposite,""String_Node_Str"");
  activationMethodLabel.setData(SwtAUTHierarchyConstants.WIDGET_NAME,""String_Node_Str"");
  m_activationMethodCombo=UIComponentHelper.createEnumCombo(expertAreaComposite,2,""String_Node_Str"",ActivationMethod.class);
  m_activationMethodCombo.setData(SwtAUTHierarchyConstants.WIDGET_NAME,""String_Node_Str"");
  Label autIdAttibuteLabel=UIComponentHelper.createLabel(expertAreaComposite,""String_Node_Str"");
  autIdAttibuteLabel.setData(SwtAUTHierarchyConstants.WIDGET_NAME,""String_Node_Str"");
  m_autIdAttibuteTextField=UIComponentHelper.createTextField(expertAreaComposite,2);
  m_autIdAttibuteTextField.setData(SwtAUTHierarchyConstants.WIDGET_NAME,""String_Node_Str"");
}",0.99500998003992
96160,"/** 
 * {@inheritDoc}
 */
public void startTestSuite(final ITestSuitePO execTestSuite,final Locale locale,final AutIdentifier autId,final boolean autoScreenshot,final Map<String,String> externalVars){
  Job runningTestSuite=new Job(Messages.ExecutingTestSuite){
    protected IStatus run(    IProgressMonitor monitor){
      monitor.beginTask(Messages.ExecutingTestSuite,TEST_SUITE_EXECUTION_RELATIVE_WORK_AMOUNT);
      TestExecution.getInstance().setStartedTestSuite(execTestSuite);
      execTestSuite.setStarted(true);
      m_testsuiteStartTime=new Date();
      setTestresultSummary(PoMaker.createTestResultSummaryPO());
      TestExecution.getInstance().executeTestSuite(execTestSuite,locale,autId,autoScreenshot,externalVars,getTestresultSummary(),monitor);
      return Status.OK_STATUS;
    }
    /** 
 * {@inheritDoc}
 */
    protected void canceling(){
      stopTestExecution();
    }
  }
;
  runningTestSuite.schedule();
}","/** 
 * {@inheritDoc}
 */
public void startTestSuite(final ITestSuitePO execTestSuite,final Locale locale,final AutIdentifier autId,final boolean autoScreenshot,final Map<String,String> externalVars){
  Job runningTestSuite=new Job(Messages.ExecutingTestSuite){
    protected IStatus run(    IProgressMonitor monitor){
      monitor.beginTask(Messages.ExecutingTestSuite,TEST_SUITE_EXECUTION_RELATIVE_WORK_AMOUNT);
      TestExecution.getInstance().setStartedTestSuite(execTestSuite);
      execTestSuite.setStarted(true);
      m_testsuiteStartTime=new Date();
      setTestresultSummary(PoMaker.createTestResultSummaryPO());
      TestExecution.getInstance().executeTestSuite(execTestSuite,locale,autId,autoScreenshot,externalVars,getTestresultSummary(),monitor);
      if (monitor.isCanceled()) {
        return Status.CANCEL_STATUS;
      }
      return Status.OK_STATUS;
    }
  }
;
  runningTestSuite.addJobChangeListener(new JobChangeAdapter(){
    public void done(    IJobChangeEvent event){
      if (event.getResult().matches(IStatus.CANCEL)) {
        stopTestExecution();
      }
    }
  }
);
  runningTestSuite.schedule();
}",0.7868852459016393
96161,"/** 
 * {@inheritDoc} 
 */
public void startTestJob(ITestJobPO testJob,Locale locale,boolean autoScreenshot){
  TestExecution.getInstance().setStartedTestJob(testJob);
  m_testjobStartTime=new Date();
  try {
    final AtomicBoolean isTestExecutionFailed=new AtomicBoolean(false);
    final AtomicInteger testExecutionMessageId=new AtomicInteger(0);
    final AtomicInteger testExecutionState=new AtomicInteger(0);
    final AtomicBoolean isTestExecutionFinished=new AtomicBoolean(false);
    ITestExecutionEventListener executionListener=new ITestExecutionEventListener(){
      /** 
 * {@inheritDoc} 
 */
      public void stateChanged(      TestExecutionEvent event){
        testExecutionState.set(event.getState());
        if (event.getState() == TestExecutionEvent.TEST_EXEC_FAILED) {
          if (event.getException() instanceof JBException) {
            JBException e=(JBException)event.getException();
            testExecutionMessageId.set(e.getErrorId());
          }
          isTestExecutionFailed.set(true);
          testExecutionFinished();
        }
      }
      /** 
 * {@inheritDoc} 
 */
      public void endTestExecution(){
        testExecutionFinished();
      }
      private void testExecutionFinished(){
        isTestExecutionFinished.set(true);
        removeTestExecutionEventListener(this);
      }
    }
;
    List<INodePO> refTestSuiteList=testJob.getUnmodifiableNodeList();
    for (    INodePO node : refTestSuiteList) {
      IRefTestSuitePO refTestSuite=(IRefTestSuitePO)node;
      isTestExecutionFailed.set(false);
      isTestExecutionFinished.set(false);
      addTestExecutionEventListener(executionListener);
      AutIdentifier autId=new AutIdentifier(refTestSuite.getTestSuiteAutID());
      String testSuiteGuid=refTestSuite.getTestSuiteGuid();
      ITestSuitePO testSuite=NodePM.getTestSuite(testSuiteGuid);
      startTestSuite(testSuite,locale,autId,autoScreenshot);
      while (!isTestExecutionFinished.get()) {
        try {
          Thread.sleep(500);
        }
 catch (        InterruptedException e) {
        }
      }
      if (!continueTestJobExecution(testExecutionState,testExecutionMessageId)) {
        break;
      }
    }
  }
  finally {
    TestExecution.getInstance().setStartedTestJob(null);
  }
}","/** 
 * {@inheritDoc} 
 */
public void startTestJob(ITestJobPO testJob,Locale locale,boolean autoScreenshot){
  TestExecution.getInstance().setStartedTestJob(testJob);
  m_testjobStartTime=new Date();
  try {
    final AtomicBoolean isTestExecutionFailed=new AtomicBoolean(false);
    final AtomicInteger testExecutionMessageId=new AtomicInteger(0);
    final AtomicInteger testExecutionState=new AtomicInteger(0);
    final AtomicBoolean isTestExecutionFinished=new AtomicBoolean(false);
    ITestExecutionEventListener executionListener=new ITestExecutionEventListener(){
      /** 
 * {@inheritDoc} 
 */
      public void stateChanged(      TestExecutionEvent event){
        testExecutionState.set(event.getState());
        if (event.getState() == TestExecutionEvent.TEST_EXEC_FAILED) {
          if (event.getException() instanceof JBException) {
            JBException e=(JBException)event.getException();
            testExecutionMessageId.set(e.getErrorId());
          }
          isTestExecutionFailed.set(true);
          testExecutionFinished();
        }
      }
      /** 
 * {@inheritDoc} 
 */
      public void endTestExecution(){
        testExecutionFinished();
      }
      private void testExecutionFinished(){
        isTestExecutionFinished.set(true);
        removeTestExecutionEventListener(this);
      }
    }
;
    List<INodePO> refTestSuiteList=testJob.getUnmodifiableNodeList();
    for (    INodePO node : refTestSuiteList) {
      IRefTestSuitePO refTestSuite=(IRefTestSuitePO)node;
      isTestExecutionFailed.set(false);
      isTestExecutionFinished.set(false);
      addTestExecutionEventListener(executionListener);
      AutIdentifier autId=new AutIdentifier(refTestSuite.getTestSuiteAutID());
      String testSuiteGuid=refTestSuite.getTestSuiteGuid();
      ITestSuitePO testSuite=NodePM.getTestSuite(testSuiteGuid);
      startTestSuite(testSuite,locale,autId,autoScreenshot);
      while (!isTestExecutionFinished.get()) {
        TimeUtil.delay(500);
      }
      if (!continueTestJobExecution(testExecutionState,testExecutionMessageId)) {
        break;
      }
    }
  }
  finally {
    TestExecution.getInstance().setStartedTestJob(null);
  }
}",0.9771402958314656
96162,"/** 
 * register business processes and service that should be available while complete Jubula live cycle - ProgressController - ComponentNamesListBP
 */
private void registerPermanentServices(){
  ProblemsBP.getInstance();
  TestExecutionContributor.getInstance();
  propagateDataDir();
  Plugin.getDefault().getPreferenceStore().addPropertyChangeListener(new IPropertyChangeListener(){
    public void propertyChange(    PropertyChangeEvent event){
      propagateDataDir();
    }
  }
);
  registerSearchResultListener();
  ImportFileBP.getInstance();
  CompletenessBP.getInstance();
  CompletenessPropagator.getInstance();
  ComponentNameReuseBP.getInstance();
  ToolkitBP.getInstance();
}","/** 
 * register business processes and service that should be available while complete Jubula live cycle - ProgressController - ComponentNamesListBP
 */
private void registerPermanentServices(){
  ProblemsBP.getInstance();
  TestExecutionContributor.getInstance();
  propagateDataDir();
  Plugin.getDefault().getPreferenceStore().addPropertyChangeListener(new IPropertyChangeListener(){
    public void propertyChange(    PropertyChangeEvent event){
      propagateDataDir();
    }
  }
);
  registerSearchResultListener();
  ImportFileBP.getInstance();
  CompletenessBP.getInstance();
  ProblemPropagator.getInstance();
  ComponentNameReuseBP.getInstance();
  ToolkitBP.getInstance();
}",0.9862218999274835
96163,"/** 
 * Collect all problems
 * @param checkCompNamesPair boolean, also used to determine whether missing project problems will be reused or rechecked.
 * @param state ServerState
 */
private void doProblemsCheck(boolean checkCompNamesPair,ServerState state){
  clearOldProblems();
  IProjectPO project=GeneralStorage.getInstance().getProject();
  if (project == null) {
    problemNoProjectExists();
  }
 else {
    if (TestSuiteBP.getListOfTestSuites().isEmpty()) {
      problemNoTestSuiteExists();
    }
    checkAllTestSuites();
    checkAllAutConfigs();
    checkAllTestJobs();
    if (project.getIsProtected()) {
      problemProtectedProjectLoaded();
    }
  }
  if (checkCompNamesPair) {
    checkCompNamesPairs();
  }
 else {
    copyCompNamesProblems();
  }
  if (checkCompNamesPair) {
    checkMissingProjects();
  }
 else {
    copyMissingProjectProblems();
  }
  checkReusedProjectLanguages();
  checkServerState(state);
  collectAdditionalProblemsWhichShouldBeMarked();
  createMarkers();
  cleanupProblems();
  CompletenessPropagator.getInstance().propagate();
}","/** 
 * Collect all problems
 * @param checkCompNamesPair boolean, also used to determine whether missing project problems will be reused or rechecked.
 * @param state ServerState
 */
private void doProblemsCheck(boolean checkCompNamesPair,ServerState state){
  clearOldProblems();
  IProjectPO project=GeneralStorage.getInstance().getProject();
  if (project == null) {
    problemNoProjectExists();
  }
 else {
    if (TestSuiteBP.getListOfTestSuites().isEmpty()) {
      problemNoTestSuiteExists();
    }
    checkAllTestSuites();
    checkAllAutConfigs();
    checkAllTestJobs();
    if (project.getIsProtected()) {
      problemProtectedProjectLoaded();
    }
  }
  if (checkCompNamesPair) {
    checkCompNamesPairs();
  }
 else {
    copyCompNamesProblems();
  }
  if (checkCompNamesPair) {
    checkMissingProjects();
  }
 else {
    copyMissingProjectProblems();
  }
  checkReusedProjectLanguages();
  checkServerState(state);
  collectAdditionalProblemsWhichShouldBeMarked();
  createMarkers();
  cleanupProblems();
  ProblemPropagator.getInstance().propagate();
}",0.99116689911669
96164,"/** 
 * {@inheritDoc} 
 */
public Image getImage(Object element){
  Image image=getGDImage(element);
  if (element instanceof INodePO && ((INodePO)element).isGenerated()) {
    image=IconConstants.getGeneratedImage(image);
  }
  Object cbContents=clipboard.getContents(LocalSelectionClipboardTransfer.getInstance());
  if (cbContents instanceof IStructuredSelection) {
    IStructuredSelection sel=(IStructuredSelection)cbContents;
    if (sel.toList().contains(element)) {
      image=RcpIconConstants.getCutImage(image);
    }
  }
  return image;
}","/** 
 * {@inheritDoc} 
 */
public Image getImage(Object element){
  Image image=getImageImpl(element);
  if (element instanceof INodePO && ((INodePO)element).isGenerated()) {
    image=IconConstants.getGeneratedImage(image);
  }
  Object cbContents=clipboard.getContents(LocalSelectionClipboardTransfer.getInstance());
  if (cbContents instanceof IStructuredSelection) {
    IStructuredSelection sel=(IStructuredSelection)cbContents;
    if (sel.toList().contains(element)) {
      image=RcpIconConstants.getCutImage(image);
    }
  }
  return image;
}",0.985480943738657
96165,"public void run(){
  if (po instanceof ITestSuitePO || po instanceof ITestJobPO || po instanceof ICategoryPO) {
    getTreeViewer().refresh();
  }
 else   if (po instanceof IProjectPO) {
    setViewerInput();
    getTreeViewer().refresh();
  }
}","public void run(){
  getTreeViewer().refresh();
  IDecoratorManager dm=Plugin.getDefault().getWorkbench().getDecoratorManager();
  dm.update(Constants.CC_DECORATOR_ID);
}",0.3469879518072289
96166,"/** 
 * {@inheritDoc}
 */
public void dispose(){
  DataEventDispatcher ded=DataEventDispatcher.getInstance();
  ded.removeDataChangedListener(this);
  ded.removeLanguageChangedListener(this);
  super.dispose();
}","/** 
 * {@inheritDoc}
 */
public void dispose(){
  DataEventDispatcher ded=DataEventDispatcher.getInstance();
  ded.removeDataChangedListener(this);
  ded.removeLanguageChangedListener(this);
  ded.removeProblemPropagationListener(this);
  super.dispose();
}",0.902127659574468
96167,"/** 
 * Creates the SWT controls for this workbench part.
 * @param parent Composite
 */
public void createPartControl(Composite parent){
  super.createPartControl(parent);
  ColumnViewerToolTipSupport.enableFor(getTreeViewer());
  getTreeViewer().setContentProvider(new TestSuiteBrowserContentProvider());
  DecoratingCellLabelProvider lp=new DecoratingCellLabelProvider(new TestSuiteBrowserLabelProvider(),Plugin.getDefault().getWorkbench().getDecoratorManager().getLabelDecorator());
  getTreeViewer().setLabelProvider(lp);
  getTreeViewer().setAutoExpandLevel(DEFAULT_EXPANSION);
  setViewerInput();
  Plugin.getHelpSystem().setHelp(getTreeViewer().getControl(),ContextHelpIds.TEST_SUITE_VIEW);
  int ops=DND.DROP_MOVE;
  Transfer[] transfers=new Transfer[]{LocalSelectionTransfer.getInstance()};
  getTreeViewer().addDragSupport(ops,transfers,new TreeViewerContainerDragSourceListener(getTreeViewer()));
  getTreeViewer().addDropSupport(ops,transfers,new TestExecDropTargetListener(this));
  DataEventDispatcher ded=DataEventDispatcher.getInstance();
  ded.addLanguageChangedListener(this,true);
  if (GeneralStorage.getInstance().getProject() != null) {
    handleProjectLoaded();
  }
}","/** 
 * Creates the SWT controls for this workbench part.
 * @param parent Composite
 */
public void createPartControl(Composite parent){
  super.createPartControl(parent);
  ColumnViewerToolTipSupport.enableFor(getTreeViewer());
  getTreeViewer().setContentProvider(new TestSuiteBrowserContentProvider());
  DecoratingCellLabelProvider lp=new DecoratingCellLabelProvider(new TestSuiteBrowserLabelProvider(),Plugin.getDefault().getWorkbench().getDecoratorManager().getLabelDecorator());
  getTreeViewer().setLabelProvider(lp);
  getTreeViewer().setAutoExpandLevel(DEFAULT_EXPANSION);
  setViewerInput();
  Plugin.getHelpSystem().setHelp(getTreeViewer().getControl(),ContextHelpIds.TEST_SUITE_VIEW);
  int ops=DND.DROP_MOVE;
  Transfer[] transfers=new Transfer[]{LocalSelectionTransfer.getInstance()};
  getTreeViewer().addDragSupport(ops,transfers,new TreeViewerContainerDragSourceListener(getTreeViewer()));
  getTreeViewer().addDropSupport(ops,transfers,new TestExecDropTargetListener(this));
  DataEventDispatcher ded=DataEventDispatcher.getInstance();
  ded.addLanguageChangedListener(this,true);
  ded.addProblemPropagationListener(this);
  if (GeneralStorage.getInstance().getProject() != null) {
    handleProjectLoaded();
  }
}",0.9822826534816648
96168,"/** 
 * @return a confirm Dialog, if monitoring job is still running.
 */
private MessageDialog getConfirmDialog(){
  MessageDialog dialog=new MessageDialog(Plugin.getShell(),Messages.ClientDisconnectFromAutAgentTitle,null,Messages.ClientDisconnectFromAutAgentMessage,MessageDialog.QUESTION,new String[]{Messages.DialogMessageButton_YES,Messages.DialogMessageButton_NO},0);
  dialog.create();
  DialogUtils.setWidgetNameForModalDialog(dialog);
  dialog.open();
  return dialog;
}","/** 
 * @return a confirm Dialog, if monitoring job is still running.
 */
private MessageDialog getConfirmDialog(){
  MessageDialog dialog=new MessageDialog(getActiveShell(),Messages.ClientDisconnectFromAutAgentTitle,null,Messages.ClientDisconnectFromAutAgentMessage,MessageDialog.QUESTION,new String[]{Messages.DialogMessageButton_YES,Messages.DialogMessageButton_NO},0);
  dialog.create();
  DialogUtils.setWidgetNameForModalDialog(dialog);
  dialog.open();
  return dialog;
}",0.980146290491118
96169,"/** 
 * @param compNames The Component Names to merge.
 * @return the Merge Component Names dialog.
 */
protected DirectComboBoxDialog<IComponentNamePO> createDialog(Set<IComponentNamePO> compNames){
  List<IComponentNamePO> compNamesList=new ArrayList<IComponentNamePO>(compNames);
  Collections.sort(compNamesList,new Comparator<IComponentNamePO>(){
    public int compare(    IComponentNamePO compName1,    IComponentNamePO compName2){
      return compName1.getName().compareTo(compName2.getName());
    }
  }
);
  List<String> displayNameList=new ArrayList<String>();
  for (  IComponentNamePO compName : compNamesList) {
    displayNameList.add(compName.getName());
  }
  DirectComboBoxDialog<IComponentNamePO> dialog=new DirectComboBoxDialog<IComponentNamePO>(Plugin.getActiveWorkbenchWindowShell(),compNamesList,displayNameList,Messages.MergeComponentNamesMessage,Messages.MergeComponentNamesShellTitle,IconConstants.MERGE_COMPONENT_NAME_DIALOG_IMAGE,Messages.MergeComponentNamesShellTitle,Messages.MergeComponentNamesLabel);
  return dialog;
}","/** 
 * @param compNames The Component Names to merge.
 * @return the Merge Component Names dialog.
 */
protected DirectComboBoxDialog<IComponentNamePO> createDialog(Set<IComponentNamePO> compNames){
  List<IComponentNamePO> compNamesList=new ArrayList<IComponentNamePO>(compNames);
  Collections.sort(compNamesList,new Comparator<IComponentNamePO>(){
    public int compare(    IComponentNamePO compName1,    IComponentNamePO compName2){
      return compName1.getName().compareTo(compName2.getName());
    }
  }
);
  List<String> displayNameList=new ArrayList<String>();
  for (  IComponentNamePO compName : compNamesList) {
    displayNameList.add(compName.getName());
  }
  DirectComboBoxDialog<IComponentNamePO> dialog=new DirectComboBoxDialog<IComponentNamePO>(getActiveShell(),compNamesList,displayNameList,Messages.MergeComponentNamesMessage,Messages.MergeComponentNamesShellTitle,IconConstants.MERGE_COMPONENT_NAME_DIALOG_IMAGE,Messages.MergeComponentNamesShellTitle,Messages.MergeComponentNamesLabel);
  return dialog;
}",0.989433237271854
96170,"/** 
 * Opens the ""New Component Name..."" dialog.
 * @param compNameMapper The mapper to use for finding Component Names.
 * @param parentShell The parent Shell for the dialog.
 * @return the name typed into the dialog, or <code>null</code> if the dialog was cancelled.
 */
protected String openDialog(IComponentNameMapper compNameMapper,Shell parentShell){
  EnterLogicalCompNameDialog newNameDialog=new NewLogicalCompNameDialog(compNameMapper,parentShell);
  newNameDialog.setHelpAvailable(true);
  newNameDialog.create();
  DialogUtils.setWidgetNameForModalDialog(newNameDialog);
  Plugin.getHelpSystem().setHelp(newNameDialog.getShell(),ContextHelpIds.NEW_COMPONENT_NAME);
  if (newNameDialog.open() == Window.OK) {
    return newNameDialog.getName();
  }
  return null;
}","/** 
 * Opens the ""New Component Name..."" dialog.
 * @param compNameMapper The mapper to use for finding Component Names.
 * @return the name typed into the dialog, or <code>null</code> if the dialog was cancelled.
 */
protected String openDialog(IComponentNameMapper compNameMapper){
  EnterLogicalCompNameDialog newNameDialog=new NewLogicalCompNameDialog(compNameMapper,getActiveShell());
  newNameDialog.setHelpAvailable(true);
  newNameDialog.create();
  DialogUtils.setWidgetNameForModalDialog(newNameDialog);
  Plugin.getHelpSystem().setHelp(newNameDialog.getShell(),ContextHelpIds.NEW_COMPONENT_NAME);
  if (newNameDialog.open() == Window.OK) {
    return newNameDialog.getName();
  }
  return null;
}",0.6078167115902965
96171,"/** 
 * @param event the execution event
 * @return the new name for the test case or <code>null</code> to indicatethat this action has been canceled
 */
protected String getNewTestCaseName(ExecutionEvent event){
  String newTcName=null;
  IWorkbenchPart activePart=HandlerUtil.getActivePart(event);
  if (activePart instanceof AbstractTestCaseEditor) {
    final AbstractTestCaseEditor editor=(AbstractTestCaseEditor)activePart;
    if (editor.isDirty()) {
      Dialog editorDirtyDlg=ErrorHandlingUtil.createMessageDialog(MessageIDs.Q_SAVE_AND_EXTRACT);
      if (editorDirtyDlg.getReturnCode() != Window.OK) {
        return null;
      }
      editor.doSave(new NullProgressMonitor());
    }
    String extractedTCName=getNewName(editor);
    InputDialog dialog=new InputDialog(Plugin.getShell(),Messages.NewTestCaseActionTCTitle,extractedTCName,Messages.NewTestCaseActionTCMessage,Messages.RenameActionTCLabel,Messages.RenameActionTCError,Messages.NewTestCaseActionDoubleTCName,IconConstants.NEW_TC_DIALOG_STRING,Messages.NewTestCaseActionTCShell,false);
    dialog.setHelpAvailable(true);
    dialog.create();
    DialogUtils.setWidgetNameForModalDialog(dialog);
    Plugin.getHelpSystem().setHelp(dialog.getShell(),ContextHelpIds.DIALOG_TESTCASE_EXTRACT);
    dialog.open();
    int retCode=dialog.getReturnCode();
    dialog.close();
    if (retCode == Window.OK) {
      newTcName=dialog.getName();
    }
  }
  return newTcName;
}","/** 
 * @param event the execution event
 * @return the new name for the test case or <code>null</code> to indicatethat this action has been canceled
 */
protected String getNewTestCaseName(ExecutionEvent event){
  String newTcName=null;
  IWorkbenchPart activePart=HandlerUtil.getActivePart(event);
  if (activePart instanceof AbstractTestCaseEditor) {
    final AbstractTestCaseEditor editor=(AbstractTestCaseEditor)activePart;
    if (editor.isDirty()) {
      Dialog editorDirtyDlg=ErrorHandlingUtil.createMessageDialog(MessageIDs.Q_SAVE_AND_EXTRACT);
      if (editorDirtyDlg.getReturnCode() != Window.OK) {
        return null;
      }
      editor.doSave(new NullProgressMonitor());
    }
    String extractedTCName=getNewName(editor);
    InputDialog dialog=new InputDialog(getActiveShell(),Messages.NewTestCaseActionTCTitle,extractedTCName,Messages.NewTestCaseActionTCMessage,Messages.RenameActionTCLabel,Messages.RenameActionTCError,Messages.NewTestCaseActionDoubleTCName,IconConstants.NEW_TC_DIALOG_STRING,Messages.NewTestCaseActionTCShell,false);
    dialog.setHelpAvailable(true);
    dialog.create();
    DialogUtils.setWidgetNameForModalDialog(dialog);
    Plugin.getHelpSystem().setHelp(dialog.getShell(),ContextHelpIds.DIALOG_TESTCASE_EXTRACT);
    dialog.open();
    int retCode=dialog.getReturnCode();
    dialog.close();
    if (retCode == Window.OK) {
      newTcName=dialog.getName();
    }
  }
  return newTcName;
}",0.9933958985053876
96172,"/** 
 * @return true if flag has been successfully determined
 */
private boolean initTestExecutionRelevantFlag(){
  int value=Plugin.getDefault().getPreferenceStore().getInt(Constants.TEST_EXEC_RELEVANT);
  if (value == Constants.TEST_EXECUTION_RELEVANT_YES) {
    ClientTestFactory.getClientTest().setRelevantFlag(true);
    return true;
  }
 else   if (value == Constants.TEST_EXECUTION_RELEVANT_NO) {
    ClientTestFactory.getClientTest().setRelevantFlag(false);
    return true;
  }
  final int returnCodeYES=256;
  final int returnCodeNO=257;
  final int returnCodeCANCEL=-1;
  MessageDialogWithToggle dialog=new MessageDialogWithToggle(Plugin.getShell(),Messages.TestExecRelevantDialogTitle,null,Messages.TestExecRelevantDialogQuestion,MessageDialog.QUESTION,new String[]{Messages.UtilsYes,Messages.UtilsNo},0,Messages.UtilsRemember,false){
    /** 
 * {@inheritDoc}
 */
    protected void buttonPressed(    int buttonId){
      super.buttonPressed(buttonId);
      Plugin.getDefault().getPreferenceStore().setValue(Constants.TEST_EXECUTION_RELEVANT_REMEMBER_KEY,getToggleState());
      int val=Constants.TEST_EXECUTION_RELEVANT_PROMPT;
      if (getToggleState() && getReturnCode() == returnCodeNO) {
        val=Constants.TEST_EXECUTION_RELEVANT_NO;
      }
 else       if (getToggleState() && getReturnCode() == returnCodeYES) {
        val=Constants.TEST_EXECUTION_RELEVANT_YES;
      }
      Plugin.getDefault().getPreferenceStore().setValue(Constants.TEST_EXEC_RELEVANT,val);
    }
  }
;
  dialog.create();
  DialogUtils.setWidgetNameForModalDialog(dialog);
  dialog.open();
  ClientTestFactory.getClientTest().setRelevantFlag(true);
  if (dialog.getReturnCode() == returnCodeNO) {
    ClientTestFactory.getClientTest().setRelevantFlag(false);
  }
 else   if (dialog.getReturnCode() == returnCodeCANCEL) {
    ClientTestFactory.getClientTest().setRelevantFlag(false);
    return false;
  }
  return true;
}","/** 
 * @return true if flag has been successfully determined
 */
private boolean initTestExecutionRelevantFlag(){
  int value=Plugin.getDefault().getPreferenceStore().getInt(Constants.TEST_EXEC_RELEVANT);
  if (value == Constants.TEST_EXECUTION_RELEVANT_YES) {
    ClientTestFactory.getClientTest().setRelevantFlag(true);
    return true;
  }
 else   if (value == Constants.TEST_EXECUTION_RELEVANT_NO) {
    ClientTestFactory.getClientTest().setRelevantFlag(false);
    return true;
  }
  final int returnCodeYES=256;
  final int returnCodeNO=257;
  final int returnCodeCANCEL=-1;
  MessageDialogWithToggle dialog=new MessageDialogWithToggle(getActiveShell(),Messages.TestExecRelevantDialogTitle,null,Messages.TestExecRelevantDialogQuestion,MessageDialog.QUESTION,new String[]{Messages.UtilsYes,Messages.UtilsNo},0,Messages.UtilsRemember,false){
    /** 
 * {@inheritDoc}
 */
    protected void buttonPressed(    int buttonId){
      super.buttonPressed(buttonId);
      Plugin.getDefault().getPreferenceStore().setValue(Constants.TEST_EXECUTION_RELEVANT_REMEMBER_KEY,getToggleState());
      int val=Constants.TEST_EXECUTION_RELEVANT_PROMPT;
      if (getToggleState() && getReturnCode() == returnCodeNO) {
        val=Constants.TEST_EXECUTION_RELEVANT_NO;
      }
 else       if (getToggleState() && getReturnCode() == returnCodeYES) {
        val=Constants.TEST_EXECUTION_RELEVANT_YES;
      }
      Plugin.getDefault().getPreferenceStore().setValue(Constants.TEST_EXEC_RELEVANT,val);
    }
  }
;
  dialog.create();
  DialogUtils.setWidgetNameForModalDialog(dialog);
  dialog.open();
  ClientTestFactory.getClientTest().setRelevantFlag(true);
  if (dialog.getReturnCode() == returnCodeNO) {
    ClientTestFactory.getClientTest().setRelevantFlag(false);
  }
 else   if (dialog.getReturnCode() == returnCodeCANCEL) {
    ClientTestFactory.getClientTest().setRelevantFlag(false);
    return false;
  }
  return true;
}",0.9950507944777286
96173,"/** 
 * Opens the PopUp with the TestCaseTree.
 * @param editor The test case editor.
 */
private void openTestCasePopUp(final TestCaseEditor editor){
  final ISpecTestCasePO parentNode=(ISpecTestCasePO)editor.getTreeViewer().getTree().getItem(0).getData();
  if (hasTestCaseAllEventHandler(parentNode)) {
    return;
  }
  String title=Messages.AddEventHandlerActionAddEventHandler;
  TestCaseTreeDialog dialog=new TestCaseTreeDialog(Plugin.getShell(),title,StringConstants.EMPTY,parentNode,title,SWT.SINGLE,IconConstants.ADD_EH_IMAGE);
  final SelectionTransfer selTransferObj=new SelectionTransfer();
  ISelectionListener selListener=new ISelectionListener(){
    public void selectionChanged(    IWorkbenchPart part,    ISelection selection){
      selTransferObj.setSelection(selection);
    }
  }
;
  dialog.addSelectionListener(selListener);
  dialog.setHelpAvailable(true);
  dialog.create();
  DialogUtils.setWidgetNameForModalDialog(dialog);
  Plugin.getHelpSystem().setHelp(dialog.getShell(),ContextHelpIds.EVENT_HANDLER_ADD);
  int returnCode=dialog.open();
  if (returnCode == TestCaseTreeDialog.ADD) {
    addEventHandler(selTransferObj.getSelection(),parentNode,editor);
  }
  dialog.removeSelectionListener(selListener);
}","/** 
 * Opens the PopUp with the TestCaseTree.
 * @param editor The test case editor.
 */
private void openTestCasePopUp(final TestCaseEditor editor){
  final ISpecTestCasePO parentNode=(ISpecTestCasePO)editor.getTreeViewer().getTree().getItem(0).getData();
  if (hasTestCaseAllEventHandler(parentNode)) {
    return;
  }
  String title=Messages.AddEventHandlerActionAddEventHandler;
  TestCaseTreeDialog dialog=new TestCaseTreeDialog(getActiveShell(),title,StringConstants.EMPTY,parentNode,title,SWT.SINGLE,IconConstants.ADD_EH_IMAGE);
  final SelectionTransfer selTransferObj=new SelectionTransfer();
  ISelectionListener selListener=new ISelectionListener(){
    public void selectionChanged(    IWorkbenchPart part,    ISelection selection){
      selTransferObj.setSelection(selection);
    }
  }
;
  dialog.addSelectionListener(selListener);
  dialog.setHelpAvailable(true);
  dialog.create();
  DialogUtils.setWidgetNameForModalDialog(dialog);
  Plugin.getHelpSystem().setHelp(dialog.getShell(),ContextHelpIds.EVENT_HANDLER_ADD);
  int returnCode=dialog.open();
  if (returnCode == TestCaseTreeDialog.ADD) {
    addEventHandler(selTransferObj.getSelection(),parentNode,editor);
  }
  dialog.removeSelectionListener(selListener);
}",0.9923232323232324
96174,"/** 
 * @param pair the current compNamesPairPO
 * @param node the node to search comp type in
 * @return true, if comp type was found
 */
public static boolean searchCompType(final ICompNamesPairPO pair,Object node){
  if (node instanceof IExecTestCasePO && ((IExecTestCasePO)node).getSpecTestCase() != null) {
    for (    Object childNode : ((IExecTestCasePO)node).getSpecTestCase().getUnmodifiableNodeList()) {
      if (childNode instanceof IExecTestCasePO) {
        IExecTestCasePO exec=(IExecTestCasePO)childNode;
        for (        ICompNamesPairPO cnp : exec.getCompNamesPairs()) {
          if (cnp.getSecondName().equals(pair.getFirstName()) && cnp.isPropagated()) {
            pair.setType(cnp.getType());
            if (!StringUtils.isEmpty(pair.getType())) {
              return true;
            }
            boolean retVal=searchCompType(cnp,exec);
            pair.setType(cnp.getType());
            return retVal;
          }
        }
      }
 else       if (childNode instanceof ICapPO) {
        ICapPO cap=(ICapPO)childNode;
        if (cap.getComponentName().equals(pair.getFirstName())) {
          pair.setType(cap.getComponentType());
          return true;
        }
      }
    }
  }
  return false;
}","/** 
 * @param pair the current compNamesPairPO
 * @param node the node to search comp type in
 * @return true, if comp type was found
 */
public static boolean searchCompType(final ICompNamesPairPO pair,Object node){
  if (node instanceof IExecTestCasePO) {
    ISpecTestCasePO specTc=((IExecTestCasePO)node).getSpecTestCase();
    if (specTc == null) {
      return false;
    }
    for (    Object childNode : specTc.getUnmodifiableNodeList()) {
      if (childNode instanceof IExecTestCasePO) {
        IExecTestCasePO exec=(IExecTestCasePO)childNode;
        for (        ICompNamesPairPO cnp : exec.getCompNamesPairs()) {
          if (cnp.getSecondName().equals(pair.getFirstName()) && cnp.isPropagated()) {
            pair.setType(cnp.getType());
            if (isValidCompNamePair(pair)) {
              return true;
            }
            boolean retVal=searchCompType(cnp,exec);
            pair.setType(cnp.getType());
            return retVal;
          }
        }
      }
 else       if (childNode instanceof ICapPO) {
        ICapPO cap=(ICapPO)childNode;
        if (cap.getComponentName().equals(pair.getFirstName())) {
          pair.setType(cap.getComponentType());
          return true;
        }
      }
    }
  }
  return false;
}",0.527032438926712
96175,"/** 
 * Removes incorrect CompNamePairs from children of the given node.
 * @param node CompNamePairs for children of this node will be analyzed.
 */
public static void removeIncorrectCompNamePairs(INodePO node){
  for (  Object o : node.getUnmodifiableNodeList()) {
    if (o instanceof IExecTestCasePO) {
      IExecTestCasePO exec=(IExecTestCasePO)o;
      for (      ICompNamesPairPO pair : new LinkedList<ICompNamesPairPO>(exec.getCompNamesPairs())) {
        searchCompType(pair,exec);
        if (pair.getType().length() == 0) {
          exec.removeCompNamesPair(pair.getFirstName());
        }
      }
    }
  }
}","/** 
 * Removes incorrect CompNamePairs from children of the given node.
 * @param node CompNamePairs for children of this node will be analyzed.
 */
public static void removeIncorrectCompNamePairs(INodePO node){
  for (  Object o : node.getUnmodifiableNodeList()) {
    if (o instanceof IExecTestCasePO) {
      IExecTestCasePO exec=(IExecTestCasePO)o;
      for (      ICompNamesPairPO pair : new LinkedList<ICompNamesPairPO>(exec.getCompNamesPairs())) {
        searchCompType(pair,exec);
        if (!isValidCompNamePair(pair)) {
          exec.removeCompNamesPair(pair.getFirstName());
        }
      }
    }
  }
}",0.893719806763285
96176,"/** 
 * @param pair the current compNamesPairPO
 */
private void searchAndSetComponentType(final ICompNamesPairPO pair){
  if (pair.getType() != null && !StringConstants.EMPTY.equals(pair.getType())) {
    return;
  }
  final IPersistentObject orig=getEditorHelper().getEditSupport().getOriginal();
  if (orig instanceof ISpecTestCasePO || orig instanceof ITestSuitePO) {
    INodePO origNode=(INodePO)orig;
    for (    Object node : origNode.getUnmodifiableNodeList()) {
      if (searchCompType(pair,node)) {
        return;
      }
    }
  }
  if (getStructuredSelection().getFirstElement() != null && (pair.getType() == null || StringConstants.EMPTY.equals(pair.getType()))) {
    searchCompType(pair,getStructuredSelection().getFirstElement());
  }
}","/** 
 * @param pair the current compNamesPairPO
 */
private void searchAndSetComponentType(final ICompNamesPairPO pair){
  if (pair.getType() != null && CompNamesBP.isValidCompNamePair(pair)) {
    return;
  }
  final IPersistentObject orig=getEditorHelper().getEditSupport().getOriginal();
  if (orig instanceof ISpecTestCasePO || orig instanceof ITestSuitePO) {
    INodePO origNode=(INodePO)orig;
    for (    Object node : origNode.getUnmodifiableNodeList()) {
      if (CompNamesBP.searchCompType(pair,node)) {
        return;
      }
    }
  }
  Object selectedElement=getStructuredSelection().getFirstElement();
  if (selectedElement != null && (pair.getType() == null || !CompNamesBP.isValidCompNamePair(pair))) {
    CompNamesBP.searchCompType(pair,selectedElement);
  }
}",0.3070917371502927
96177,"/** 
 * Removes incorrect CompNamePair from ExecTC during saving.
 */
private void removeIncorrectCompNamePairs(){
  INodePO node=(INodePO)getEditorHelper().getEditSupport().getWorkVersion();
  if (node instanceof ISpecTestCasePO || node instanceof ITestSuitePO) {
    for (    Object o : node.getUnmodifiableNodeList()) {
      if (o instanceof IExecTestCasePO) {
        IExecTestCasePO exec=(IExecTestCasePO)o;
        ICompNamesPairPO[] pairArray=exec.getCompNamesPairs().toArray(new ICompNamesPairPO[exec.getCompNamesPairs().size()]);
        for (        ICompNamesPairPO pair : pairArray) {
          searchAndSetComponentType(pair);
          if (pair.getType().equals(StringConstants.EMPTY)) {
            exec.removeCompNamesPair(pair.getFirstName());
          }
        }
      }
    }
  }
 else {
    LOG.error(Messages.WrongEditSupportInTestCaseEditor + StringConstants.COLON + StringConstants.SPACE+ node);
  }
}","/** 
 * Removes incorrect CompNamePair from ExecTC during saving.
 */
private void removeIncorrectCompNamePairs(){
  INodePO node=(INodePO)getEditorHelper().getEditSupport().getWorkVersion();
  if (node instanceof ISpecTestCasePO || node instanceof ITestSuitePO) {
    for (    Object o : node.getUnmodifiableNodeList()) {
      if (o instanceof IExecTestCasePO) {
        IExecTestCasePO exec=(IExecTestCasePO)o;
        ICompNamesPairPO[] pairArray=exec.getCompNamesPairs().toArray(new ICompNamesPairPO[exec.getCompNamesPairs().size()]);
        for (        ICompNamesPairPO pair : pairArray) {
          searchAndSetComponentType(pair);
          if (!CompNamesBP.isValidCompNamePair(pair)) {
            exec.removeCompNamesPair(pair.getFirstName());
          }
        }
      }
    }
  }
 else {
    LOG.error(Messages.WrongEditSupportInTestCaseEditor + StringConstants.COLON + StringConstants.SPACE+ node);
  }
}",0.9588744588744588
96178,"/** 
 * {@inheritDoc}
 */
public boolean canModify(Object element,String property){
  boolean editable=false;
  if (getSelectedExecNodeOwner() instanceof AbstractTestCaseEditor && ((AbstractTestCaseEditor)getSelectedExecNodeOwner()).getEditorHelper().requestEditableState() == EditableState.OK) {
    editable=true;
  }
  if (editable && element instanceof ICompNamesPairPO) {
    final ICompNamesPairPO compNamesPair=(ICompNamesPairPO)element;
    return COLUMN_NEW_NAME.equals(property) && isModifiable() && compNamesPair.getType().length() != 0;
  }
  return false;
}","/** 
 * {@inheritDoc}
 */
public boolean canModify(Object element,String property){
  boolean editable=false;
  if (getSelectedExecNodeOwner() instanceof AbstractTestCaseEditor && ((AbstractTestCaseEditor)getSelectedExecNodeOwner()).getEditorHelper().requestEditableState() == EditableState.OK) {
    editable=true;
  }
  if (editable && element instanceof ICompNamesPairPO) {
    final ICompNamesPairPO compNamesPair=(ICompNamesPairPO)element;
    return COLUMN_NEW_NAME.equals(property) && isModifiable() && CompNamesBP.isValidCompNamePair(compNamesPair);
  }
  return false;
}",0.929503916449086
96179,"/** 
 * {@inheritDoc} 
 */
public Object getParent(Object element){
  if (element instanceof INodePO) {
    INodePO parent=((INodePO)element).getParentNode();
    IProjectPO activeProject=GeneralStorage.getInstance().getProject();
    if (parent instanceof IProjectPO && !parent.equals(activeProject)) {
      String parentGuid=parent.getGuid();
      if (activeProject != null && parentGuid != null) {
        for (        IReusedProjectPO reusedProject : activeProject.getUsedProjects()) {
          if (parentGuid.equals(reusedProject.getProjectGuid())) {
            return reusedProject;
          }
        }
      }
    }
    return parent;
  }
  if (element instanceof IReusedProjectPO || element instanceof ISpecObjContPO || element instanceof IExecObjContPO) {
    return GeneralStorage.getInstance().getProject();
  }
  if (element instanceof ITestDataCategoryPO) {
    return ((ITestDataCategoryPO)element).getParent();
  }
  if (element instanceof ITestDataCubePO) {
    return ((ITestDataCubePO)element).getParent();
  }
  if (element instanceof SearchResultElement) {
    return null;
  }
  Assert.notReached(Messages.WrongTypeOfElement + StringConstants.EXCLAMATION_MARK);
  return null;
}","/** 
 * {@inheritDoc} 
 */
public Object getParent(Object element){
  if (element instanceof INodePO) {
    INodePO node=((INodePO)element);
    INodePO parent=node.getParentNode();
    Long nodeProjId=node.getParentProjectId();
    IProjectPO activeProject=GeneralStorage.getInstance().getProject();
    if (nodeProjId != null && !nodeProjId.equals(activeProject.getId()) && parent == ISpecObjContPO.TCB_ROOT_NODE) {
      if (activeProject != null && nodeProjId != null) {
        try {
          System.out.println(""String_Node_Str"");
          String nodeProjGUID=ProjectPM.getGuidOfProjectId(nodeProjId);
          for (          IReusedProjectPO reusedProject : activeProject.getUsedProjects()) {
            if (nodeProjGUID.equals(reusedProject.getProjectGuid())) {
              return reusedProject;
            }
          }
        }
 catch (        JBException e) {
          LOG.warn(""String_Node_Str"",e);
        }
      }
    }
    return parent;
  }
  if (element instanceof IReusedProjectPO || element instanceof ISpecObjContPO || element instanceof IExecObjContPO) {
    return GeneralStorage.getInstance().getProject();
  }
  if (element instanceof ITestDataCategoryPO) {
    return ((ITestDataCategoryPO)element).getParent();
  }
  if (element instanceof ITestDataCubePO) {
    return ((ITestDataCubePO)element).getParent();
  }
  if (element instanceof SearchResultElement) {
    return null;
  }
  Assert.notReached(Messages.WrongTypeOfElement + StringConstants.EXCLAMATION_MARK);
  return null;
}",0.713394495412844
96180,"/** 
 * @param po the PO
 * @param dataState the data state
 * @param updateState the update state
 */
private void handleDataChangedImpl(final IPersistentObject po,final DataState dataState,final UpdateState updateState){
  if (po instanceof IAUTMainPO) {
    getTreeViewer().refresh();
    return;
  }
  if (updateState == UpdateState.onlyInEditor) {
    return;
  }
switch (dataState) {
case Added:
    handleDataAdded(po);
  break;
case Deleted:
handleDataDeleted(po);
break;
case Renamed:
if (po instanceof IProjectPO || po instanceof ITestSuitePO || po instanceof ITestJobPO|| po instanceof ITestCasePO) {
getTreeViewer().refresh();
}
break;
case StructureModified:
if (po instanceof IProjectPO) {
handleProjectLoaded();
}
if ((po instanceof ISpecTestCasePO) || (po instanceof ITestSuitePO) || (po instanceof ITestJobPO)) {
Object[] expandedElements=getTreeViewer().getExpandedElements();
ISelection selection=getTreeViewer().getSelection();
getTreeViewer().refresh();
getTreeViewer().setExpandedElements(expandedElements);
getTreeViewer().setSelection(selection);
}
if (po instanceof IObjectMappingPO) {
getTreeViewer().refresh();
}
break;
default :
break;
}
}","/** 
 * @param po the PO
 * @param dataState the data state
 * @param updateState the update state
 */
private void handleDataChangedImpl(final IPersistentObject po,final DataState dataState,final UpdateState updateState){
  if (po instanceof IAUTMainPO) {
    getTreeViewer().refresh();
    return;
  }
  if (updateState == UpdateState.onlyInEditor) {
    return;
  }
switch (dataState) {
case Added:
    handleDataAdded(po);
  break;
case Deleted:
handleDataDeleted(po);
break;
case Renamed:
if (po instanceof IProjectPO || po instanceof ITestSuitePO || po instanceof ITestJobPO|| po instanceof ITestCasePO|| po instanceof ICategoryPO) {
getTreeViewer().refresh();
}
break;
case StructureModified:
if (po instanceof IProjectPO) {
handleProjectLoaded();
}
if ((po instanceof ISpecTestCasePO) || (po instanceof ITestSuitePO) || (po instanceof ITestJobPO)) {
Object[] expandedElements=getTreeViewer().getExpandedElements();
ISelection selection=getTreeViewer().getSelection();
getTreeViewer().refresh();
getTreeViewer().setExpandedElements(expandedElements);
getTreeViewer().setSelection(selection);
}
if (po instanceof IObjectMappingPO) {
getTreeViewer().refresh();
}
break;
default :
break;
}
}",0.8357324301439458
96181,"/** 
 * Clicks at the current mouse position.
 * @param graphicsComponent The component used for confirming the click.
 * @param clickOptions Configuration for the click.
 */
private void clickImpl(Object graphicsComponent,ClickOptions clickOptions){
  int buttonMask=getButtonMask(clickOptions.getMouseButton());
  int clickCount=clickOptions.getClickCount();
  int[] modifierMask=getModifierMask(clickOptions.getClickModifier());
  if (clickCount > 0) {
    InterceptorOptions options=new InterceptorOptions(new long[]{AWTEvent.MOUSE_EVENT_MASK});
    IRobotEventConfirmer confirmer=m_interceptor.intercept(options);
    try {
      RobotTiming.sleepPreClickDelay();
      pressModifier(modifierMask);
      for (int i=0; i < clickCount; i++) {
        m_robot.mousePress(buttonMask);
        RobotTiming.sleepPostMouseDownDelay();
        m_robot.mouseRelease(buttonMask);
        RobotTiming.sleepPostMouseUpDelay();
      }
      if (clickOptions.isConfirmClick()) {
        confirmer.waitToConfirm(graphicsComponent,new ClickAwtEventMatcher(clickOptions));
      }
    }
  finally {
      releaseModifier(modifierMask);
    }
  }
}","/** 
 * Clicks at the current mouse position.
 * @param graphicsComponent The component used for confirming the click.
 * @param clickOptions Configuration for the click.
 */
private void clickImpl(Object graphicsComponent,ClickOptions clickOptions){
  int buttonMask=getButtonMask(clickOptions.getMouseButton());
  int clickCount=clickOptions.getClickCount();
  int[] modifierMask=getModifierMask(clickOptions.getClickModifier());
  if (clickCount > 0) {
    InterceptorOptions options=new InterceptorOptions(new long[]{AWTEvent.MOUSE_EVENT_MASK});
    IRobotEventConfirmer confirmer=m_interceptor.intercept(options);
    try {
      pressModifier(modifierMask);
      RobotTiming.sleepPreClickDelay();
      for (int i=0; i < clickCount; i++) {
        m_robot.mousePress(buttonMask);
        RobotTiming.sleepPostMouseDownDelay();
        m_robot.mouseRelease(buttonMask);
        RobotTiming.sleepPostMouseUpDelay();
      }
      if (clickOptions.isConfirmClick()) {
        confirmer.waitToConfirm(graphicsComponent,new ClickAwtEventMatcher(clickOptions));
      }
    }
  finally {
      releaseModifier(modifierMask);
    }
  }
}",0.969217238346526
96182,"/** 
 * Clicks at the current mouse position.
 * @param graphicsComponent The component used for confirming the click.
 * @param clickOptions Configuration for the click.
 */
private void clickImpl(Object graphicsComponent,ClickOptions clickOptions){
  int buttonMask=getButtonMask(clickOptions.getMouseButton());
  int clickCount=clickOptions.getClickCount();
  int[] modifierMask=getModifierMask(clickOptions.getClickModifier());
  if (clickCount > 0) {
    final InterceptorOptions options=new InterceptorOptions(new long[]{SWT.MouseUp,SWT.MouseDown});
    final IEventMatcher matcher=new ClickSwtEventMatcher(clickOptions);
    final IRobotEventConfirmer confirmer=m_interceptor.intercept(options);
    try {
      RobotTiming.sleepPreClickDelay();
      pressModifier(modifierMask);
      for (int i=0; i < clickCount; i++) {
        m_robot.mousePress(buttonMask);
        RobotTiming.sleepPostMouseDownDelay();
        m_robot.mouseRelease(buttonMask);
        RobotTiming.sleepPostMouseUpDelay();
      }
      if (clickOptions.isConfirmClick()) {
        try {
          confirmer.waitToConfirm(graphicsComponent,matcher);
        }
 catch (        RobotException re) {
          StringBuffer sb=new StringBuffer(""String_Node_Str"");
          logRobotException(graphicsComponent,re,sb);
          throw re;
        }
      }
    }
  finally {
      releaseModifier(modifierMask);
    }
  }
}","/** 
 * Clicks at the current mouse position.
 * @param graphicsComponent The component used for confirming the click.
 * @param clickOptions Configuration for the click.
 */
private void clickImpl(Object graphicsComponent,ClickOptions clickOptions){
  int buttonMask=getButtonMask(clickOptions.getMouseButton());
  int clickCount=clickOptions.getClickCount();
  int[] modifierMask=getModifierMask(clickOptions.getClickModifier());
  if (clickCount > 0) {
    final InterceptorOptions options=new InterceptorOptions(new long[]{SWT.MouseUp,SWT.MouseDown});
    final IEventMatcher matcher=new ClickSwtEventMatcher(clickOptions);
    final IRobotEventConfirmer confirmer=m_interceptor.intercept(options);
    try {
      pressModifier(modifierMask);
      RobotTiming.sleepPreClickDelay();
      for (int i=0; i < clickCount; i++) {
        m_robot.mousePress(buttonMask);
        RobotTiming.sleepPostMouseDownDelay();
        m_robot.mouseRelease(buttonMask);
        RobotTiming.sleepPostMouseUpDelay();
      }
      if (clickOptions.isConfirmClick()) {
        try {
          confirmer.waitToConfirm(graphicsComponent,matcher);
        }
 catch (        RobotException re) {
          StringBuffer sb=new StringBuffer(""String_Node_Str"");
          logRobotException(graphicsComponent,re,sb);
          throw re;
        }
      }
    }
  finally {
      releaseModifier(modifierMask);
    }
  }
}",0.975
96183,"/** 
 * Verifies, if value exists in column.
 * @param col The column of the cell.
 * @param colOperator The column header operator
 * @param value The cell text to verify.
 * @param operator The operation used to verify
 * @param searchType Determines where the search begins (""relative"" or ""absolute"")
 * @param exists true if value exists, false otherwise
 * @throws StepExecutionException If the row or the column is invalid, or if the rendered text cannot be extracted.
 */
public void gdVerifyValueInColumn(final String col,final String colOperator,final String value,final String operator,final String searchType,boolean exists) throws StepExecutionException {
  final int implCol=getColumnFromString(col,colOperator);
  Boolean valueExists=new Boolean(true);
  valueExists=(Boolean)getEventThreadQueuer().invokeAndWait(""String_Node_Str"",new IRunnable(){
    public Object run() throws StepExecutionException {
      final int itemCount=m_table.getItemCount();
      for (int i=getStartingRowIndex(searchType); i < itemCount; ++i) {
        if (MatchUtil.getInstance().match(m_table.getItem(i).getText(implCol),value,operator)) {
          return new Boolean(true);
        }
      }
      String header=m_table.getColumn(implCol).getText();
      if (MatchUtil.getInstance().match(header,value,operator)) {
        return new Boolean(true);
      }
      return new Boolean(false);
    }
  }
);
  Verifier.equals(exists,valueExists.booleanValue());
}","/** 
 * Verifies, if value exists in column.
 * @param col The column of the cell.
 * @param colOperator The column header operator
 * @param value The cell text to verify.
 * @param operator The operation used to verify
 * @param searchType Determines where the search begins (""relative"" or ""absolute"")
 * @param exists true if value exists, false otherwise
 * @throws StepExecutionException If the row or the column is invalid, or if the rendered text cannot be extracted.
 */
public void gdVerifyValueInColumn(final String col,final String colOperator,final String value,final String operator,final String searchType,boolean exists) throws StepExecutionException {
  final int implCol=getColumnFromString(col,colOperator);
  Boolean valueExists=new Boolean(true);
  valueExists=(Boolean)getEventThreadQueuer().invokeAndWait(""String_Node_Str"",new IRunnable(){
    public Object run() throws StepExecutionException {
      final int itemCount=m_table.getItemCount();
      for (int i=getStartingRowIndex(searchType); i < itemCount; ++i) {
        if (MatchUtil.getInstance().match(m_table.getItem(i).getText(implCol),value,operator)) {
          return new Boolean(true);
        }
      }
      if (m_table.getHeaderVisible()) {
        String header=m_table.getColumn(implCol).getText();
        if (MatchUtil.getInstance().match(header,value,operator)) {
          return new Boolean(true);
        }
      }
      return new Boolean(false);
    }
  }
);
  Verifier.equals(exists,valueExists.booleanValue());
}",0.981157469717362
96184,"/** 
 * @return the String from the Cell Renderer
 */
public String getText(){
  final JComboBox comboBox=((JComboBox)m_implClass.getComponent());
  final int selIndex=comboBox.getSelectedIndex();
  if (selIndex == -1) {
    return null;
  }
  final JList jlist=new JList(comboBox.getModel());
  Object o=m_eventThreadQueuer.invokeAndWait(""String_Node_Str"",new IRunnable(){
    public Object run(){
      Component disp=comboBox.getRenderer().getListCellRendererComponent(jlist,jlist.getModel().getElementAt(selIndex),selIndex,true,comboBox.hasFocus());
      return m_implClass.getRenderedText(disp,false);
    }
  }
);
  return o.toString();
}","/** 
 * @return the String from the Cell Renderer
 */
public String getText(){
  JComboBox comboBox=((JComboBox)m_implClass.getComponent());
  return m_implClass.getRenderedText(getComboBoxEditorComponent(comboBox),true);
}",0.216589861751152
96185,"public Object run(){
  Component disp=comboBox.getRenderer().getListCellRendererComponent(jlist,jlist.getModel().getElementAt(selIndex),selIndex,true,comboBox.hasFocus());
  return m_implClass.getRenderedText(disp,false);
}","public Object run(){
  JComboBox comboBox=(JComboBox)m_implClass.getComponent();
  return comboBox.isEditable() ? Boolean.TRUE : Boolean.FALSE;
}",0.375
96186,"/** 
 * @param component the combobox
 * @return the editor component
 * @throws StepExecutionException if the editor comonent could not be found
 */
private Component getComboBoxEditorComponent(JComboBox component) throws StepExecutionException {
  ComboBoxEditor cbe=component.getEditor();
  if (cbe == null) {
    throw new StepExecutionException(""String_Node_Str"",EventFactory.createActionError(TestErrorEvent.COMP_NOT_FOUND));
  }
  Component c=cbe.getEditorComponent();
  if (c == null) {
    throw new StepExecutionException(""String_Node_Str"",EventFactory.createActionError(TestErrorEvent.COMP_NOT_FOUND));
  }
  return c;
}","/** 
 * @param component the combobox
 * @return the editor used to render and edit the selected item in theJComboBox field.
 * @throws StepExecutionException if the editor comonent could not be found
 */
private Component getComboBoxEditorComponent(JComboBox component) throws StepExecutionException {
  ComboBoxEditor cbe=component.getEditor();
  if (cbe == null) {
    throw new StepExecutionException(""String_Node_Str"",EventFactory.createActionError(TestErrorEvent.COMP_NOT_FOUND));
  }
  Component c=cbe.getEditorComponent();
  if (c == null) {
    throw new StepExecutionException(""String_Node_Str"",EventFactory.createActionError(TestErrorEvent.COMP_NOT_FOUND));
  }
  return c;
}",0.94457099468489
96187,"/** 
 * Action to read the value of a JComboBox to store it in a variable in the Client
 * @param variable the name of the variable
 * @return the text value.
 */
public String gdReadValue(String variable){
  final String selectedValue=getComboBoxHelper().getSelectedValue();
  return selectedValue != null ? selectedValue : StringConstants.EMPTY;
}","/** 
 * Action to read the value of a JComboBox to store it in a variable in the Client
 * @param variable the name of the variable
 * @return the text value.
 */
public String gdReadValue(String variable){
  return getComboBoxHelper().getText();
}",0.7939698492462312
96188,"/** 
 * Notifies that the check is finished.
 */
private void fireCompletenessCheckFinished(){
  DataEventDispatcher.getInstance().fireCompletenessCheckFinished();
}","/** 
 * Notifies that the check is finished.
 */
private static void fireCompletenessCheckFinished(){
  DataEventDispatcher.getInstance().fireCompletenessCheckFinished();
}",0.9792284866468842
96189,"@SuppressWarnings(""String_Node_Str"") public IStatus run(IProgressMonitor monitor){
  IStatus result=Status.OK_STATUS;
  monitor.beginTask(jobName,IProgressMonitor.UNKNOWN);
  try {
    CompletenessGuard.checkAll(wl,root);
    fireCompletenessCheckFinished();
    monitor.done();
  }
 catch (  ConcurrentModificationException e) {
    result=Status.CANCEL_STATUS;
    monitor.setCanceled(true);
    runCheck(true,root,wl);
  }
  monitor.done();
  return result;
}","/** 
 * {@inheritDoc} 
 */
public void run(IProgressMonitor monitor){
  monitor.beginTask(Messages.CompletenessCheckRunningOperation,IProgressMonitor.UNKNOWN);
  ProgressMonitorTracker.getInstance().setProgressMonitor(monitor);
  try {
    final INodePO root=GeneralStorage.getInstance().getProject();
    final Locale wl=WorkingLanguageBP.getInstance().getWorkingLanguage();
    CompletenessGuard.checkAll(wl,root);
  }
  finally {
    ProgressMonitorTracker.getInstance().setProgressMonitor(null);
    fireCompletenessCheckFinished();
    monitor.done();
  }
}",0.279296875
96190,"/** 
 * private constructor
 */
private CompletenessBP(){
  DataEventDispatcher ded=DataEventDispatcher.getInstance();
  ded.addDataChangedListener(this,false);
  ded.addLanguageChangedListener(this,false);
  ded.addProjectLoadedListener(this,false);
}","/** 
 * private constructor
 */
private CompletenessBP(){
  DataEventDispatcher ded=DataEventDispatcher.getInstance();
  ded.addLanguageChangedListener(this,false);
  ded.addProjectLoadedListener(this,false);
  ICommandService commandService=(ICommandService)PlatformUI.getWorkbench().getService(ICommandService.class);
  IExecutionListener saveListener=new IExecutionListener(){
    /** 
 * {@inheritDoc} 
 */
    public void preExecute(    String commandId,    ExecutionEvent event){
    }
    /** 
 * {@inheritDoc} 
 */
    public void postExecuteSuccess(    String commandId,    Object returnValue){
      completeProjectCheck();
    }
    /** 
 * {@inheritDoc} 
 */
    public void postExecuteFailure(    String commandId,    ExecutionException exception){
      completeProjectCheck();
    }
    /** 
 * {@inheritDoc} 
 */
    public void notHandled(    String commandId,    NotHandledException exception){
    }
  }
;
  commandService.getCommand(IWorkbenchCommandConstants.FILE_SAVE).addExecutionListener(saveListener);
  commandService.getCommand(IWorkbenchCommandConstants.FILE_SAVE_ALL).addExecutionListener(saveListener);
}",0.2958152958152958
96191,"/** 
 * {@inheritDoc}
 */
public void handleProjectLoaded(){
  checkProject(false);
}","/** 
 * {@inheritDoc}
 */
public void handleProjectLoaded(){
  completeProjectCheck();
}",0.8901734104046243
96192,"/** 
 * Extracts a given List of nodes from a node to a new TestCase and inserts the new created/extracted TestCase into the owner node as an ExecTestCase.
 * @param newTcName The name of the new SpecTestCase
 * @param ownerNode the edited node from which to extract
 * @param modNodes the node to be extracted
 * @param s the database session
 * @param mapper mapper to resolve param names
 * @return an ExecTestCasePO, the location of use of the extracted TestCase
 * @throws TreeOpFailedException if the operation failed
 */
public static IExecTestCasePO extractTestCase(String newTcName,INodePO ownerNode,List<IParamNodePO> modNodes,EntityManager s,ParamNameBPDecorator mapper) throws TreeOpFailedException {
  final boolean isOwnerSpecTestCase=ownerNode instanceof ISpecTestCasePO;
  ISpecTestCasePO newTc=NodeMaker.createSpecTestCasePO(newTcName);
  s.persist(newTc);
  IProjectPO project=GeneralStorage.getInstance().getProject();
  AbstractCmdHandleChild handler=NodePM.getCmdHandleChild(project,newTc);
  handler.add(project,newTc,null);
  int pos=-1;
  Map<String,String> oldToNewParamGuids=new HashMap<String,String>();
  for (  IParamNodePO selectecNode : modNodes) {
    INodePO moveNode=findNode(ownerNode,selectecNode);
    if (moveNode == null) {
      throw new TreeOpFailedException(Messages.NodeMismatch,MessageIDs.E_PO_NOT_FOUND);
    }
    if (isOwnerSpecTestCase) {
      addParamsToParent(newTc,selectecNode,mapper,(ISpecTestCasePO)ownerNode,oldToNewParamGuids);
    }
    pos=ownerNode.indexOf(moveNode);
    AbstractCmdHandleChild childHandler=NodePM.getCmdHandleChild(ownerNode,moveNode);
    childHandler.remove(ownerNode,moveNode);
    childHandler.add(newTc,moveNode,null);
  }
  IExecTestCasePO newExec=NodeMaker.createExecTestCasePO(newTc);
  if (isOwnerSpecTestCase) {
    propagateParams(newExec,(IParamNodePO)ownerNode);
  }
  propagateCompNames(modNodes,newExec);
  ownerNode.addNode(pos,newExec);
  return newExec;
}","/** 
 * Extracts a given List of nodes from a node to a new TestCase and inserts the new created/extracted TestCase into the owner node as an ExecTestCase.
 * @param newTcName The name of the new SpecTestCase
 * @param ownerNode the edited node from which to extract
 * @param modNodes the node to be extracted
 * @param s the database session
 * @param mapper mapper to resolve param names
 * @return an ExecTestCasePO, the location of use of the extracted TestCase
 * @throws TreeOpFailedException if the operation failed
 */
public static IExecTestCasePO extractTestCase(String newTcName,INodePO ownerNode,List<IParamNodePO> modNodes,EntityManager s,ParamNameBPDecorator mapper) throws TreeOpFailedException {
  final boolean isOwnerSpecTestCase=ownerNode instanceof ISpecTestCasePO;
  ISpecTestCasePO newTc=NodeMaker.createSpecTestCasePO(newTcName);
  s.persist(newTc);
  INodePO parent=ISpecObjContPO.TCB_ROOT_NODE;
  AbstractCmdHandleChild handler=NodePM.getCmdHandleChild(parent,newTc);
  handler.add(parent,newTc,null);
  int pos=-1;
  Map<String,String> oldToNewParamGuids=new HashMap<String,String>();
  for (  IParamNodePO selectecNode : modNodes) {
    INodePO moveNode=findNode(ownerNode,selectecNode);
    if (moveNode == null) {
      throw new TreeOpFailedException(Messages.NodeMismatch,MessageIDs.E_PO_NOT_FOUND);
    }
    if (isOwnerSpecTestCase) {
      addParamsToParent(newTc,selectecNode,mapper,(ISpecTestCasePO)ownerNode,oldToNewParamGuids);
    }
    pos=ownerNode.indexOf(moveNode);
    AbstractCmdHandleChild childHandler=NodePM.getCmdHandleChild(ownerNode,moveNode);
    childHandler.remove(ownerNode,moveNode);
    childHandler.add(newTc,moveNode,null);
  }
  IExecTestCasePO newExec=NodeMaker.createExecTestCasePO(newTc);
  if (isOwnerSpecTestCase) {
    propagateParams(newExec,(IParamNodePO)ownerNode);
  }
  propagateCompNames(modNodes,newExec);
  ownerNode.addNode(pos,newExec);
  return newExec;
}",0.9703989703989704
96193,"/** 
 * ask for a TC Name and returns a new TC Editor
 * @return SpecTestCaseEditor
 */
private TestCaseEditor askForNewTC(){
  TestCaseEditor editor=null;
  String standardName=InitialValueConstants.DEFAULT_TEST_CASE_NAME_OBSERVED;
  int index=1;
  String newName=standardName + index;
  final Set<String> usedNames=new HashSet<String>();
  for (  Object node : GeneralStorage.getInstance().getProject().getSpecObjCont().getSpecObjList()) {
    if (Persistor.isPoSubclass((INodePO)node,ITestCasePO.class) && ((INodePO)node).getName().startsWith(standardName)) {
      usedNames.add(((INodePO)node).getName());
    }
  }
  while (usedNames.contains(newName)) {
    index++;
    newName=standardName + index;
  }
  InputDialog dialog=createDialog(newName,usedNames);
  dialog.setHelpAvailable(true);
  dialog.create();
  DialogUtils.setWidgetNameForModalDialog(dialog);
  Plugin.getHelpSystem().setHelp(dialog.getShell(),ContextHelpIds.DIALOG_OBS_TC_SAVE);
  dialog.open();
  if (Window.OK == dialog.getReturnCode()) {
    String tcName=dialog.getName();
    final INodePO parentPO=GeneralStorage.getInstance().getProject();
    ISpecTestCasePO recSpecTestCase=NodeMaker.createSpecTestCasePO(tcName);
    try {
      NodePM.addAndPersistChildNode(parentPO,recSpecTestCase,null,NodePM.getCmdHandleChild(parentPO,recSpecTestCase));
      DataEventDispatcher.getInstance().fireDataChangedListener(recSpecTestCase,DataState.Added,UpdateState.all);
      editor=(TestCaseEditor)AbstractOpenHandler.openEditor(recSpecTestCase);
    }
 catch (    PMException e) {
      PMExceptionHandler.handlePMExceptionForMasterSession(e);
    }
catch (    ProjectDeletedException e) {
      PMExceptionHandler.handleGDProjectDeletedException();
    }
  }
  dialog.close();
  return editor;
}","/** 
 * ask for a TC Name and returns a new TC Editor
 * @return SpecTestCaseEditor
 */
private TestCaseEditor askForNewTC(){
  TestCaseEditor editor=null;
  String standardName=InitialValueConstants.DEFAULT_TEST_CASE_NAME_OBSERVED;
  int index=1;
  String newName=standardName + index;
  final Set<String> usedNames=new HashSet<String>();
  for (  Object node : GeneralStorage.getInstance().getProject().getSpecObjCont().getSpecObjList()) {
    if (Persistor.isPoSubclass((INodePO)node,ITestCasePO.class) && ((INodePO)node).getName().startsWith(standardName)) {
      usedNames.add(((INodePO)node).getName());
    }
  }
  while (usedNames.contains(newName)) {
    index++;
    newName=standardName + index;
  }
  InputDialog dialog=createDialog(newName,usedNames);
  dialog.setHelpAvailable(true);
  dialog.create();
  DialogUtils.setWidgetNameForModalDialog(dialog);
  Plugin.getHelpSystem().setHelp(dialog.getShell(),ContextHelpIds.DIALOG_OBS_TC_SAVE);
  dialog.open();
  if (Window.OK == dialog.getReturnCode()) {
    String tcName=dialog.getName();
    final INodePO parentPO=ISpecObjContPO.TCB_ROOT_NODE;
    ISpecTestCasePO recSpecTestCase=NodeMaker.createSpecTestCasePO(tcName);
    try {
      NodePM.addAndPersistChildNode(parentPO,recSpecTestCase,null,NodePM.getCmdHandleChild(parentPO,recSpecTestCase));
      DataEventDispatcher.getInstance().fireDataChangedListener(recSpecTestCase,DataState.Added,UpdateState.all);
      editor=(TestCaseEditor)AbstractOpenHandler.openEditor(recSpecTestCase);
    }
 catch (    PMException e) {
      PMExceptionHandler.handlePMExceptionForMasterSession(e);
    }
catch (    ProjectDeletedException e) {
      PMExceptionHandler.handleGDProjectDeletedException();
    }
  }
  dialog.close();
  return editor;
}",0.9815811844715217
96194,"/** 
 * @param summaryID The current selected summaryID
 * @return The monitored values
 */
public static final Map<String,IMonitoringValue> loadMonitoringValues(Object summaryID){
  if (Persistor.instance() == null) {
    return Collections.emptyMap();
  }
  EntityManager session=Persistor.instance().openSession();
  ITestResultSummaryPO summary;
  try {
    Persistor.instance().getTransaction(session);
    summary=session.find(PoMaker.getTestResultSummaryClass(),summaryID);
  }
  finally {
    Persistor.instance().dropSession(session);
  }
  return summary.getMonitoringValues();
}","/** 
 * @param summaryID The current selected summaryID
 * @return The monitored values
 */
public static final Map<String,IMonitoringValue> loadMonitoringValues(Object summaryID){
  if (Persistor.instance() == null) {
    return Collections.emptyMap();
  }
  EntityManager session=Persistor.instance().openSession();
  ITestResultSummaryPO summary;
  try {
    Persistor.instance().getTransaction(session);
    summary=session.find(PoMaker.getTestResultSummaryClass(),summaryID);
    if (summary == null) {
      return Collections.emptyMap();
    }
  }
  finally {
    Persistor.instance().dropSession(session);
  }
  return summary.getMonitoringValues();
}",0.9439102564102564
96195,"/** 
 * {@inheritDoc} 
 */
public boolean operate(ITreeTraverserContext<INodePO> ctx,INodePO parent,INodePO node,boolean alreadyVisited){
  node.removeProblem(ERROR_IN_CHILD);
  node.removeProblem(WARNING_IN_CHILD);
  return true;
}","/** 
 * {@inheritDoc} 
 */
public boolean operate(ITreeTraverserContext<INodePO> ctx,INodePO parent,INodePO node,boolean alreadyVisited){
  node.removeProblem(ERROR_IN_CHILD);
  node.removeProblem(WARNING_IN_CHILD);
  if (!node.isActive()) {
    return false;
  }
  return true;
}",0.85546875
96196,"/** 
 * {@inheritDoc}
 */
protected void extendValidate(JobConfiguration job,StringBuilder errorMsgs){
  if (job.getProjectName() == null) {
    appendError(errorMsgs,ClientTestStrings.PROJECT,ClientTestStrings.PROJECT_NAME);
  }
  if (job.getProjectMajor() == null || job.getProjectMinor() == null) {
    appendError(errorMsgs,ClientTestStrings.PROJECT_VERSION,ClientTestStrings.PROJECT_VERSION_EX);
  }
  if (job.getServer() == null) {
    appendError(errorMsgs,ClientTestStrings.SERVER,ClientTestStrings.HOSTNAME);
  }
  if (job.getPort() == null) {
    appendError(errorMsgs,ClientTestStrings.PORT,ClientTestStrings.PORT_NUMBER);
  }
  if (job.getAutConfigName() == null && job.getAutId() == null && job.getTestJobName() == null) {
    appendError(errorMsgs,ClientTestStrings.AUT_CONFIG,ClientTestStrings.AUT_CONFIG);
    appendError(errorMsgs,ClientTestStrings.AUT_ID,ClientTestStrings.AUT_ID);
  }
  if (job.getLanguage() == null) {
    appendError(errorMsgs,ClientTestStrings.LANGUAGE,ClientTestStrings.LANGUAGE);
  }
  if (job.getResultDir() == null) {
    appendError(errorMsgs,ClientTestStrings.RESULTDIR,ClientTestStrings.RESULTDIR);
  }
  if (job.getDataDir() == null) {
    appendError(errorMsgs,ClientTestStrings.DATA_DIR,ClientTestStrings.DATA_DIR_EX);
  }
  if (job.getTestSuiteName() == null && job.getTestJobName() == null && job.getServerPort() == null) {
    appendError(errorMsgs,ClientTestStrings.TESTSUITE,ClientTestStrings.TESTSUITE);
    appendError(errorMsgs,ClientTestStrings.TESTJOB,ClientTestStrings.TESTJOB);
  }
  if (job.getTimeout() < 0) {
    appendError(errorMsgs,ClientTestStrings.TIMEOUT,ClientTestStrings.TIMEOUT);
  }
}","/** 
 * {@inheritDoc}
 */
protected void extendValidate(JobConfiguration job,StringBuilder errorMsgs){
  if (job.getProjectName() == null) {
    appendError(errorMsgs,ClientTestStrings.PROJECT,ClientTestStrings.PROJECT_NAME);
  }
  if (job.getProjectMajor() == null || job.getProjectMinor() == null) {
    appendError(errorMsgs,ClientTestStrings.PROJECT_VERSION,ClientTestStrings.PROJECT_VERSION_EX);
  }
  if (job.getServer() == null) {
    appendError(errorMsgs,ClientTestStrings.SERVER,ClientTestStrings.HOSTNAME);
  }
  if (job.getPort() == null) {
    appendError(errorMsgs,ClientTestStrings.PORT,ClientTestStrings.PORT_NUMBER);
  }
  if (job.getAutConfigName() == null && job.getAutId() == null && job.getTestJobName() == null) {
    appendError(errorMsgs,ClientTestStrings.AUT_CONFIG,ClientTestStrings.AUT_CONFIG);
    appendError(errorMsgs,ClientTestStrings.AUT_ID,ClientTestStrings.AUT_ID);
  }
  if (job.getLanguage() == null) {
    appendError(errorMsgs,ClientTestStrings.LANGUAGE,ClientTestStrings.LANGUAGE);
  }
  if (job.getResultDir() == null) {
    appendError(errorMsgs,ClientTestStrings.RESULTDIR,ClientTestStrings.RESULTDIR);
  }
  if (job.getDataDir() == null) {
    appendError(errorMsgs,ClientTestStrings.DATA_DIR,ClientTestStrings.DATA_DIR_EX);
  }
  if (job.getTestSuiteNames().isEmpty() && job.getTestJobName() == null && job.getServerPort() == null) {
    appendError(errorMsgs,ClientTestStrings.TESTSUITE,ClientTestStrings.TESTSUITE);
    appendError(errorMsgs,ClientTestStrings.TESTJOB,ClientTestStrings.TESTJOB);
  }
  if (job.getTimeout() < 0) {
    appendError(errorMsgs,ClientTestStrings.TIMEOUT,ClientTestStrings.TIMEOUT);
  }
}",0.9930702018680324
96197,"/** 
 * executing batch of test suites
 */
private void doTestSuite(){
  while (m_job.getTestSuite() != null && !m_stopProcessing) {
    while (m_idle && !m_stopProcessing) {
      try {
        Thread.sleep(50);
      }
 catch (      InterruptedException e) {
      }
    }
    if (m_job.getTestSuite() != null && !m_stopProcessing && !m_idle && !m_isFirstAutStart) {
      m_idle=true;
      AbstractCmdlineClient.printConsoleLn(StringConstants.TAB + NLS.bind(Messages.ExecutionControllerTestSuiteBegin,m_job.getTestSuite().getName()),true);
      ClientTestFactory.getClientTest().startTestSuite(m_job.getTestSuite(),m_job.getLanguage(),m_startedAutId != null ? m_startedAutId : m_job.getAutId(),m_job.isAutoScreenshot());
    }
  }
}","/** 
 * execute a test suite
 */
private void doTestSuite(){
  while (m_job.getActualTestSuite() != null && !m_stopProcessing) {
    while (m_idle && !m_stopProcessing) {
      try {
        Thread.sleep(50);
      }
 catch (      InterruptedException e) {
      }
    }
    if (m_job.getActualTestSuite() != null && !m_stopProcessing && !m_idle && !m_isFirstAutStart) {
      m_idle=true;
      AbstractCmdlineClient.printConsoleLn(StringConstants.TAB + NLS.bind(Messages.ExecutionControllerTestSuiteBegin,m_job.getActualTestSuite().getName()),true);
      ClientTestFactory.getClientTest().startTestSuite(m_job.getActualTestSuite(),m_job.getLanguage(),m_startedAutId != null ? m_startedAutId : m_job.getAutId(),m_job.isAutoScreenshot());
    }
  }
}",0.9583333333333334
96198,"/** 
 * loads a project
 */
private void loadProject(){
  AbstractCmdlineClient.printConsoleLn(Messages.ExecutionControllerDatabase + NLS.bind(Messages.ExecutionControllerLoadingProject,m_job.getProjectName()),true);
  try {
    IProjectPO actualProject=ProjectPM.loadProjectByNameAndVersion(m_job.getProjectName(),m_job.getProjectMajor(),m_job.getProjectMinor());
    if (actualProject != null) {
      ProjectPM.loadProjectInROSession(actualProject);
      final IProjectPO currentProject=GeneralStorage.getInstance().getProject();
      m_job.setProject(currentProject);
      AbstractCmdlineClient.printConsoleLn(Messages.ExecutionControllerDatabase + NLS.bind(Messages.ExecutionControllerProjectLoaded,m_job.getProjectName()),true);
    }
  }
 catch (  JBException e1) {
  }
  m_job.initAndValidate();
  AbstractCmdlineClient.printConsoleLn(Messages.ExecutionControllerProjectCompleteness,true);
  CompletenessGuard.checkAll(m_job.getLanguage(),m_job.getProject());
  List<String> suitesWithIncompleteOM=new LinkedList<String>();
  List<String> suitesWithIncompleteTD=new LinkedList<String>();
  List<String> suitesWithMissingSpecTc=new LinkedList<String>();
  ITestSuitePO ts=m_job.getTestSuite();
  final String tsName=ts.getName();
  if (!ts.getSumSpecTcFlag()) {
    suitesWithMissingSpecTc.add(NLS.bind(Messages.ExecutionControllerCheckSpecTc,tsName));
    AbstractCmdlineClient.printConsoleLn(NLS.bind(Messages.ExecutionControllerCheckSpecTc,tsName),true);
  }
  if (!ts.getSumOMFlag(ts.getAut())) {
    suitesWithIncompleteOM.add(NLS.bind(Messages.ExecutionControllerCheckOM,tsName));
    AbstractCmdlineClient.printConsoleLn(NLS.bind(Messages.ExecutionControllerCheckOM,tsName),true);
  }
  if (!ts.getSumTdFlag(m_job.getLanguage())) {
    suitesWithIncompleteTD.add(NLS.bind(Messages.ExecutionControllerCheckTD,tsName));
    AbstractCmdlineClient.printConsoleLn(NLS.bind(Messages.ExecutionControllerCheckTD,tsName),true);
  }
  StringBuilder sb=new StringBuilder(Messages.ExecutionControllerCheckError);
  sb.append(StringConstants.COLON);
  for (  String suiteName : suitesWithIncompleteOM) {
    sb.append(StringConstants.NEWLINE + StringConstants.TAB);
    sb.append(suiteName);
    sb.append(StringConstants.DOT + StringConstants.SPACE);
  }
  for (  String suiteName : suitesWithIncompleteTD) {
    sb.append(StringConstants.NEWLINE + StringConstants.TAB);
    sb.append(suiteName);
    sb.append(StringConstants.DOT + StringConstants.SPACE);
  }
  Validate.isTrue(suitesWithIncompleteOM.isEmpty() && suitesWithIncompleteTD.isEmpty(),sb.toString());
}","/** 
 * loads a project
 */
private void loadProject(){
  AbstractCmdlineClient.printConsoleLn(Messages.ExecutionControllerDatabase + NLS.bind(Messages.ExecutionControllerLoadingProject,m_job.getProjectName()),true);
  try {
    IProjectPO actualProject=ProjectPM.loadProjectByNameAndVersion(m_job.getProjectName(),m_job.getProjectMajor(),m_job.getProjectMinor());
    if (actualProject != null) {
      ProjectPM.loadProjectInROSession(actualProject);
      final IProjectPO currentProject=GeneralStorage.getInstance().getProject();
      m_job.setProject(currentProject);
      AbstractCmdlineClient.printConsoleLn(Messages.ExecutionControllerDatabase + NLS.bind(Messages.ExecutionControllerProjectLoaded,m_job.getProjectName()),true);
    }
  }
 catch (  JBException e1) {
  }
  m_job.initAndValidate();
  AbstractCmdlineClient.printConsoleLn(Messages.ExecutionControllerProjectCompleteness,true);
  CompletenessGuard.checkAll(m_job.getLanguage(),m_job.getProject());
  List<String> suitesWithIncompleteOM=new LinkedList<String>();
  List<String> suitesWithIncompleteTD=new LinkedList<String>();
  List<String> suitesWithMissingSpecTc=new LinkedList<String>();
  for (  ITestSuitePO ts : m_job.getTestSuites()) {
    final String tsName=ts.getName();
    if (!ts.getSumSpecTcFlag()) {
      suitesWithMissingSpecTc.add(NLS.bind(Messages.ExecutionControllerCheckSpecTc,tsName));
      AbstractCmdlineClient.printConsoleLn(NLS.bind(Messages.ExecutionControllerCheckSpecTc,tsName),true);
    }
    if (!ts.getSumOMFlag(ts.getAut())) {
      suitesWithIncompleteOM.add(NLS.bind(Messages.ExecutionControllerCheckOM,tsName));
      AbstractCmdlineClient.printConsoleLn(NLS.bind(Messages.ExecutionControllerCheckOM,tsName),true);
    }
    if (!ts.getSumTdFlag(m_job.getLanguage())) {
      suitesWithIncompleteTD.add(NLS.bind(Messages.ExecutionControllerCheckTD,tsName));
      AbstractCmdlineClient.printConsoleLn(NLS.bind(Messages.ExecutionControllerCheckTD,tsName),true);
    }
  }
  StringBuilder sb=new StringBuilder(Messages.ExecutionControllerCheckError);
  sb.append(StringConstants.COLON);
  for (  String suiteName : suitesWithIncompleteOM) {
    sb.append(StringConstants.NEWLINE + StringConstants.TAB);
    sb.append(suiteName);
    sb.append(StringConstants.DOT + StringConstants.SPACE);
  }
  for (  String suiteName : suitesWithIncompleteTD) {
    sb.append(StringConstants.NEWLINE + StringConstants.TAB);
    sb.append(suiteName);
    sb.append(StringConstants.DOT + StringConstants.SPACE);
  }
  Validate.isTrue(suitesWithIncompleteOM.isEmpty() && suitesWithIncompleteTD.isEmpty(),sb.toString());
}",0.961790814357391
96199,"/** 
 * executes the complete test
 * @throws CommunicationException Error
 * @return boolean true if all testsuites completed successfully
 */
public boolean executeJob() throws CommunicationException {
  WatchdogTimer timer=null;
  if (m_job.getTimeout() > 0) {
    timer=new WatchdogTimer(m_job.getTimeout());
    timer.start();
  }
  IClientTest clientTest=ClientTestFactory.getClientTest();
  clientTest.connectToServer(m_job.getServer(),m_job.getPort());
  if (!ServerConnection.getInstance().isConnected()) {
    throw new CommunicationException(Messages.ConnectionToAUT_Agent,MessageIDs.E_COMMUNICATOR_CONNECTION);
  }
  clientTest.setRelevantFlag(m_job.isRelevant());
  prepareExecution();
  m_idle=true;
  if (m_shutdown) {
    AbstractCmdlineClient.printConsoleLn(Messages.ReceivedShutdownCommand,true);
    endTestExecution();
  }
  try {
    if (m_rmiBase != null) {
      doClcService();
    }
 else     if (m_job.getTestJob() != null) {
      ensureAutIsStarted(m_job.getTestSuite(),m_job.getAutConfig());
      doTestJob();
    }
 else {
      ensureAutIsStarted(m_job.getTestSuite(),m_job.getAutConfig());
      doTestSuite();
    }
  }
 catch (  ToolkitPluginException e1) {
    AbstractCmdlineClient.printlnConsoleError(Messages.ExecutionControllerAUT + Messages.ErrorMessageAUT_TOOLKIT_NOT_AVAILABLE);
  }
  if (timer != null) {
    timer.abort();
  }
  return isNoErrorWhileExecution();
}","/** 
 * executes the complete test
 * @throws CommunicationException Error
 * @return boolean true if all testsuites completed successfully
 */
public boolean executeJob() throws CommunicationException {
  WatchdogTimer timer=null;
  if (m_job.getTimeout() > 0) {
    timer=new WatchdogTimer(m_job.getTimeout());
    timer.start();
  }
  IClientTest clientTest=ClientTestFactory.getClientTest();
  clientTest.connectToServer(m_job.getServer(),m_job.getPort());
  if (!ServerConnection.getInstance().isConnected()) {
    throw new CommunicationException(Messages.ConnectionToAUT_Agent,MessageIDs.E_COMMUNICATOR_CONNECTION);
  }
  clientTest.setRelevantFlag(m_job.isRelevant());
  prepareExecution();
  m_idle=true;
  if (m_shutdown) {
    AbstractCmdlineClient.printConsoleLn(Messages.ReceivedShutdownCommand,true);
    endTestExecution();
  }
  try {
    if (m_rmiBase != null) {
      doClcService();
    }
 else     if (m_job.getTestJob() != null) {
      ensureAutIsStarted(m_job.getActualTestSuite(),m_job.getAutConfig());
      doTestJob();
    }
 else {
      ensureAutIsStarted(m_job.getActualTestSuite(),m_job.getAutConfig());
      doTestSuite();
    }
  }
 catch (  ToolkitPluginException e1) {
    AbstractCmdlineClient.printlnConsoleError(Messages.ExecutionControllerAUT + Messages.ErrorMessageAUT_TOOLKIT_NOT_AVAILABLE);
  }
  if (timer != null) {
    timer.abort();
  }
  return isNoErrorWhileExecution();
}",0.9957597173144876
96200,"/** 
 * {@inheritDoc}
 */
public void stateChanged(TestExecutionEvent event){
  if (event.getException() != null && event.getException() instanceof JBException) {
    String errorMsg=I18n.getString(event.getException().getMessage(),true);
    AbstractCmdlineClient.printlnConsoleError(errorMsg);
  }
switch (event.getState()) {
case TestExecutionEvent.TEST_EXEC_RESULT_TREE_READY:
    TestExecution.getInstance().getTrav().addExecStackModificationListener(m_progress);
  break;
case TestExecutionEvent.TEST_EXEC_START:
case TestExecutionEvent.TEST_EXEC_RESTART:
break;
case TestExecutionEvent.TEST_EXEC_FINISHED:
AbstractCmdlineClient.printConsoleLn(Messages.ExecutionControllerTestSuiteEnd,true);
m_clcServiceImpl.tsDone(isNoErrorWhileExecution() ? 0 : 1);
break;
case TestExecutionEvent.TEST_EXEC_PAUSED:
TestExecution.getInstance().pauseExecution(PauseMode.UNPAUSE);
break;
case TestExecutionEvent.TEST_EXEC_ERROR:
case TestExecutionEvent.TEST_EXEC_FAILED:
case TestExecutionEvent.TEST_EXEC_STOP:
break;
default :
break;
}
}","/** 
 * {@inheritDoc}
 */
public void stateChanged(TestExecutionEvent event){
  if (event.getException() != null && event.getException() instanceof JBException) {
    String errorMsg=I18n.getString(event.getException().getMessage(),true);
    AbstractCmdlineClient.printlnConsoleError(errorMsg);
  }
switch (event.getState()) {
case TestExecutionEvent.TEST_EXEC_RESULT_TREE_READY:
    TestExecution.getInstance().getTrav().addExecStackModificationListener(m_progress);
  break;
case TestExecutionEvent.TEST_EXEC_START:
case TestExecutionEvent.TEST_EXEC_RESTART:
break;
case TestExecutionEvent.TEST_EXEC_FINISHED:
AbstractCmdlineClient.printConsoleLn(Messages.ExecutionControllerTestSuiteEnd,true);
m_job.getNextTestSuite();
m_clcServiceImpl.tsDone(isNoErrorWhileExecution() ? 0 : 1);
break;
case TestExecutionEvent.TEST_EXEC_PAUSED:
TestExecution.getInstance().pauseExecution(PauseMode.UNPAUSE);
break;
case TestExecutionEvent.TEST_EXEC_ERROR:
case TestExecutionEvent.TEST_EXEC_FAILED:
case TestExecutionEvent.TEST_EXEC_STOP:
m_job.getNextTestSuite();
break;
default :
break;
}
}",0.9753086419753086
96201,"/** 
 * @param testSuiteName the test suite to execute
 */
private void setTestSuiteName(String testSuiteName){
  m_testSuiteName=testSuiteName;
}","/** 
 * @param testSuiteName   The name of the Test Suite to execute. 
 */
private void setTestSuiteName(String testSuiteName){
  List<String> tsNames=new ArrayList<String>(1);
  tsNames.add(testSuiteName);
  setTestSuiteNames(tsNames);
}",0.546875
96202,"/** 
 * initializes the job configuration object after loading project validates if choosen configuration is valid
 */
public void initAndValidate(){
  Validate.notNull(m_project,NLS.bind(Messages.JobConfigurationValidateProjectExist,new Object[]{String.valueOf(m_projectName),String.valueOf(m_projectMajor),String.valueOf(m_projectMinor)}));
  for (  ITestSuitePO ts : TestSuiteBP.getListOfTestSuites(getProject())) {
    if (ts.getName().equals(m_testSuiteName)) {
      setTestSuite(ts);
      break;
    }
  }
  Validate.isTrue((getTestSuite() != null),Messages.JobConfigurationValidateTestSuiteExist);
  for (  ITestJobPO tj : TestJobBP.getListOfTestJobs(getProject())) {
    if (tj.getName().equals(m_testJobName)) {
      m_testJob=tj;
    }
  }
  if (getTestSuite() != null) {
    Validate.notNull(getTestSuite().getAut(),Messages.JobConfigurationValidateAnyAut);
    IAUTMainPO aut=getTestSuite().getAut();
    if (m_autConfigName != null) {
      for (      IAUTConfigPO config : aut.getAutConfigSet()) {
        if (m_autConfigName.equals(config.getName())) {
          m_autConfig=config;
        }
      }
      Validate.notNull(m_autConfig,Messages.JobConfigurationValidateAutConf);
    }
    List<Locale> autLocales=aut.getLangHelper().getLanguageList();
    Validate.isTrue(autLocales.size() != 0,Messages.NoLanguageConfiguredInChoosenAUT);
    if (getLanguage() == null) {
      if (autLocales.size() == 1) {
        setLanguage(autLocales.get(0));
      }
 else {
        setLanguage(getProject().getDefaultLanguage());
      }
    }
    Validate.isTrue(autLocales.contains(getLanguage()),Messages.SpecifiedLanguageNotSupported);
  }
}","/** 
 * initializes the job configuration object after loading project validates if choosen configuration is valid
 */
public void initAndValidate(){
  Validate.notNull(m_project,NLS.bind(Messages.JobConfigurationValidateProjectExist,new Object[]{String.valueOf(m_projectName),String.valueOf(m_projectMajor),String.valueOf(m_projectMinor)}));
  for (  String name : m_testSuiteNames) {
    for (    ITestSuitePO ts : TestSuiteBP.getListOfTestSuites()) {
      if (ts.getName().equals(name)) {
        m_testSuites.add(ts);
        break;
      }
    }
  }
  Validate.isTrue((m_testSuiteNames.size() == m_testSuites.size()),Messages.JobConfigurationValidateTestSuiteExist);
  for (  ITestJobPO tj : TestJobBP.getListOfTestJobs()) {
    if (tj.getName().equals(m_testJobName)) {
      m_testJob=tj;
    }
  }
  if (!m_testSuites.isEmpty()) {
    for (    ITestSuitePO ts : m_testSuites) {
      Validate.notNull(ts.getAut(),Messages.JobConfigurationValidateAnyAut);
    }
    IAUTMainPO aut=getActualTestSuite().getAut();
    if (m_autConfigName != null) {
      for (      IAUTConfigPO config : aut.getAutConfigSet()) {
        if (m_autConfigName.equals(config.getName())) {
          m_autConfig=config;
        }
      }
      Validate.notNull(m_autConfig,Messages.JobConfigurationValidateAutConf);
    }
    List<Locale> autLocales=aut.getLangHelper().getLanguageList();
    Validate.isTrue(autLocales.size() != 0,Messages.NoLanguageConfiguredInChoosenAUT);
    if (getLanguage() == null) {
      if (autLocales.size() == 1) {
        setLanguage(autLocales.get(0));
      }
 else {
        setLanguage(getProject().getDefaultLanguage());
      }
    }
    Validate.isTrue(autLocales.contains(getLanguage()),Messages.SpecifiedLanguageNotSupported);
  }
}",0.9114369501466276
96203,"/** 
 * {@inheritDoc}
 * @throws IllegalArgumentException if no suitable Database Connection can be found.
 */
public Object unmarshal(HierarchicalStreamReader arg0,UnmarshallingContext arg1) throws IllegalArgumentException {
  JobConfiguration job=new JobConfiguration();
  while (arg0.hasMoreChildren()) {
    arg0.moveDown();
    if (arg0.getNodeName().equals(ClientTestStrings.PROJECT)) {
      job.setProjectName(arg0.getValue());
    }
 else     if (arg0.getNodeName().equals(ClientTestStrings.PROJECT_VERSION)) {
      job.setProjectVersion(arg0.getValue());
    }
 else     if (arg0.getNodeName().equals(ClientTestStrings.SERVER)) {
      job.setServer(arg0.getValue());
    }
 else     if (arg0.getNodeName().equals(ClientTestStrings.PORT)) {
      job.setPort(arg0.getValue());
    }
 else     if (arg0.getNodeName().equals(ClientTestStrings.RESULTDIR)) {
      job.setResultDir(arg0.getValue());
    }
 else     if (arg0.getNodeName().equals(ClientTestStrings.DBURL)) {
      job.setDb(arg0.getValue());
    }
 else     if (arg0.getNodeName().equals(ClientTestStrings.DB_SCHEME)) {
      job.setDbConnectionName(arg0.getValue());
    }
 else     if (arg0.getNodeName().equals(ClientTestStrings.DB_USER)) {
      job.setDbuser(arg0.getValue());
    }
 else     if (arg0.getNodeName().equals(ClientTestStrings.DB_PW)) {
      job.setDbpw(arg0.getValue());
    }
 else     if (arg0.getNodeName().equals(ClientTestStrings.LANGUAGE)) {
      job.setLanguage(LocaleUtil.convertStrToLocale(arg0.getValue()));
    }
 else     if (arg0.getNodeName().equals(ClientTestStrings.AUT_CONFIG)) {
      job.setAutConfigName(arg0.getValue());
    }
 else     if (arg0.getNodeName().equals(ClientTestStrings.DATA_DIR)) {
      job.setDataDir(arg0.getValue());
    }
 else     if (arg0.getNodeName().equals(ClientTestStrings.TESTSUITE)) {
      job.setTestSuiteName(arg0.getValue());
    }
 else     if (arg0.getNodeName().equals(ClientTestStrings.TESTJOB)) {
      job.setTestJobName(arg0.getValue());
    }
    arg0.moveUp();
  }
  return job;
}","/** 
 * {@inheritDoc}
 * @throws IllegalArgumentException if no suitable Database Connection can be found.
 */
public Object unmarshal(HierarchicalStreamReader arg0,UnmarshallingContext arg1) throws IllegalArgumentException {
  JobConfiguration job=new JobConfiguration();
  while (arg0.hasMoreChildren()) {
    arg0.moveDown();
    if (arg0.getNodeName().equals(ClientTestStrings.PROJECT)) {
      job.setProjectName(arg0.getValue());
    }
 else     if (arg0.getNodeName().equals(ClientTestStrings.PROJECT_VERSION)) {
      job.setProjectVersion(arg0.getValue());
    }
 else     if (arg0.getNodeName().equals(ClientTestStrings.SERVER)) {
      job.setServer(arg0.getValue());
    }
 else     if (arg0.getNodeName().equals(ClientTestStrings.PORT)) {
      job.setPort(arg0.getValue());
    }
 else     if (arg0.getNodeName().equals(ClientTestStrings.RESULTDIR)) {
      job.setResultDir(arg0.getValue());
    }
 else     if (arg0.getNodeName().equals(ClientTestStrings.DBURL)) {
      job.setDb(arg0.getValue());
    }
 else     if (arg0.getNodeName().equals(ClientTestStrings.DB_SCHEME)) {
      job.setDbConnectionName(arg0.getValue());
    }
 else     if (arg0.getNodeName().equals(ClientTestStrings.DB_USER)) {
      job.setDbuser(arg0.getValue());
    }
 else     if (arg0.getNodeName().equals(ClientTestStrings.DB_PW)) {
      job.setDbpw(arg0.getValue());
    }
 else     if (arg0.getNodeName().equals(ClientTestStrings.LANGUAGE)) {
      job.setLanguage(LocaleUtil.convertStrToLocale(arg0.getValue()));
    }
 else     if (arg0.getNodeName().equals(ClientTestStrings.AUT_CONFIG)) {
      job.setAutConfigName(arg0.getValue());
    }
 else     if (arg0.getNodeName().equals(ClientTestStrings.AUT_ID)) {
      job.setAutId(new AutIdentifier(arg0.getValue()));
    }
 else     if (arg0.getNodeName().equals(ClientTestStrings.DATA_DIR)) {
      job.setDataDir(arg0.getValue());
    }
 else     if (arg0.getNodeName().equals(ClientTestStrings.TESTSUITE)) {
      job.setTestSuiteName(arg0.getValue());
    }
 else     if (arg0.getNodeName().equals(ClientTestStrings.TESTJOB)) {
      job.setTestJobName(arg0.getValue());
    }
    arg0.moveUp();
  }
  return job;
}",0.9688762176288904
96204,"/** 
 * parses command line parameter and set them into job object
 * @param cmd CommandLine
 */
public void parseJobOptions(CommandLine cmd){
  if (cmd.hasOption(ClientTestStrings.PROJECT)) {
    setProjectName(cmd.getOptionValue(ClientTestStrings.PROJECT));
  }
  if (cmd.hasOption(ClientTestStrings.PROJECT_VERSION)) {
    String[] numbers=cmd.getOptionValue(ClientTestStrings.PROJECT_VERSION).split(""String_Node_Str"");
    if (numbers.length == 2) {
      try {
        setProjectMajor(Integer.parseInt(numbers[0]));
        setProjectMinor(Integer.parseInt(numbers[1]));
      }
 catch (      NumberFormatException nfe) {
      }
    }
  }
  if (cmd.hasOption(ClientTestStrings.SERVER)) {
    setServer(cmd.getOptionValue(ClientTestStrings.SERVER));
  }
  if (cmd.hasOption(ClientTestStrings.PORT)) {
    setPort(cmd.getOptionValue(ClientTestStrings.PORT));
  }
  parseDBOptions(cmd);
  if (cmd.hasOption(ClientTestStrings.RESULTDIR)) {
    setResultDir(cmd.getOptionValue(ClientTestStrings.RESULTDIR));
  }
  if (cmd.hasOption(ClientTestStrings.AUT_CONFIG)) {
    setAutConfigName(cmd.getOptionValue(ClientTestStrings.AUT_CONFIG));
  }
  if (cmd.hasOption(ClientTestStrings.AUT_ID)) {
    String autIdString=cmd.getOptionValue(ClientTestStrings.AUT_ID);
    if (autIdString != null) {
      setAutId(new AutIdentifier(autIdString));
    }
  }
  if (cmd.hasOption(ClientTestStrings.DATA_DIR)) {
    setDataDir(cmd.getOptionValue(ClientTestStrings.DATA_DIR));
  }
  if (cmd.hasOption(ClientTestStrings.LANGUAGE)) {
    setLanguage(LocaleUtil.convertStrToLocale(cmd.getOptionValue(ClientTestStrings.LANGUAGE)));
  }
  if (cmd.hasOption(ClientTestStrings.TESTSUITE)) {
    setTestSuiteName(cmd.getOptionValue(ClientTestStrings.TESTSUITE));
  }
  if (cmd.hasOption(ClientTestStrings.TESTJOB)) {
    setTestJobName(cmd.getOptionValue(ClientTestStrings.TESTJOB));
  }
  if (cmd.hasOption(ClientTestStrings.AUTO_SCREENSHOT)) {
    setAutoScreenshot(false);
  }
  if (cmd.hasOption(ClientTestStrings.TEST_EXECUTION_RELEVANT)) {
    setRelevant(false);
  }
  if (cmd.hasOption(ClientTestStrings.TIMEOUT)) {
    try {
      setTimeout(Integer.parseInt(cmd.getOptionValue(ClientTestStrings.TIMEOUT)));
    }
 catch (    NumberFormatException e) {
      setTimeout(-1);
    }
  }
}","/** 
 * parses command line parameter and set them into job object
 * @param cmd CommandLine
 */
public void parseJobOptions(CommandLine cmd){
  if (cmd.hasOption(ClientTestStrings.PROJECT)) {
    setProjectName(cmd.getOptionValue(ClientTestStrings.PROJECT));
  }
  if (cmd.hasOption(ClientTestStrings.PROJECT_VERSION)) {
    String[] numbers=cmd.getOptionValue(ClientTestStrings.PROJECT_VERSION).split(""String_Node_Str"");
    if (numbers.length == 2) {
      try {
        setProjectMajor(Integer.parseInt(numbers[0]));
        setProjectMinor(Integer.parseInt(numbers[1]));
      }
 catch (      NumberFormatException nfe) {
      }
    }
  }
  if (cmd.hasOption(ClientTestStrings.SERVER)) {
    setServer(cmd.getOptionValue(ClientTestStrings.SERVER));
  }
  if (cmd.hasOption(ClientTestStrings.PORT)) {
    setPort(cmd.getOptionValue(ClientTestStrings.PORT));
  }
  parseDBOptions(cmd);
  if (cmd.hasOption(ClientTestStrings.RESULTDIR)) {
    setResultDir(cmd.getOptionValue(ClientTestStrings.RESULTDIR));
  }
  if (cmd.hasOption(ClientTestStrings.AUT_CONFIG)) {
    setAutConfigName(cmd.getOptionValue(ClientTestStrings.AUT_CONFIG));
  }
  if (cmd.hasOption(ClientTestStrings.AUT_ID)) {
    String autIdString=cmd.getOptionValue(ClientTestStrings.AUT_ID);
    if (autIdString != null) {
      setAutId(new AutIdentifier(autIdString));
    }
  }
  if (cmd.hasOption(ClientTestStrings.DATA_DIR)) {
    setDataDir(cmd.getOptionValue(ClientTestStrings.DATA_DIR));
  }
  if (cmd.hasOption(ClientTestStrings.LANGUAGE)) {
    setLanguage(LocaleUtil.convertStrToLocale(cmd.getOptionValue(ClientTestStrings.LANGUAGE)));
  }
  if (cmd.hasOption(ClientTestStrings.TESTSUITE)) {
    String tsName=cmd.getOptionValue(ClientTestStrings.TESTSUITE);
    List<String> tsNamesList=new ArrayList<String>();
    tsNamesList.add(tsName);
    setTestSuiteNames(tsNamesList);
  }
  if (cmd.hasOption(ClientTestStrings.TESTJOB)) {
    setTestJobName(cmd.getOptionValue(ClientTestStrings.TESTJOB));
  }
  if (cmd.hasOption(ClientTestStrings.AUTO_SCREENSHOT)) {
    setAutoScreenshot(false);
  }
  if (cmd.hasOption(ClientTestStrings.TEST_EXECUTION_RELEVANT)) {
    setRelevant(false);
  }
  if (cmd.hasOption(ClientTestStrings.TIMEOUT)) {
    try {
      setTimeout(Integer.parseInt(cmd.getOptionValue(ClientTestStrings.TIMEOUT)));
    }
 catch (    NumberFormatException e) {
      setTimeout(-1);
    }
  }
}",0.969761955822432
96205,"/** 
 * @return the test suite name to execute
 */
public String getTestSuiteName(){
  return m_testSuiteName;
}","/** 
 * @return the name of the Test suite to execute, or <code>null</code> if noTest suite should be executed.
 */
private String getTestSuiteName(){
  return getTestSuiteNames().get(m_actualTestSuite);
}",0.4858044164037854
96206,"/** 
 * Fills the server combo box.
 */
private void fillServerCombo(){
  boolean checkListeners=m_selectionListener != null;
  if (checkListeners) {
    deinstallListeners();
  }
  m_serverCombo.removeAll();
  String currentlySelectedServer=getConfigValue(AutConfigConstants.SERVER);
  if (currentlySelectedServer != null && currentlySelectedServer.trim().length() != 0 && !m_listOfServers.getServerNames().contains(currentlySelectedServer)) {
    String defaultServerInfo=Plugin.getDefault().getPreferenceStore().getDefaultString(Constants.SERVER_SETTINGS_KEY);
    String defaultServerPort=defaultServerInfo.substring(defaultServerInfo.indexOf(StringConstants.COLON) + 1);
    m_listOfServers.addServer(new ServerManager.Server(currentlySelectedServer,Integer.valueOf(defaultServerPort)));
    ErrorHandlingUtil.createMessageDialog(MessageIDs.I_SERVER_NAME_ADDED,null,new String[]{Messages.ServerName + StringConstants.COLON + StringConstants.SPACE+ currentlySelectedServer+ StringConstants.NEWLINE+ Messages.ServerPortDefault+ defaultServerPort});
  }
  for (  String serverName : m_listOfServers.getServerNames()) {
    m_serverCombo.add(serverName);
  }
  if (checkListeners) {
    installListeners();
  }
}","/** 
 * Fills the server combo box.
 */
private void fillServerCombo(){
  boolean checkListeners=m_selectionListener != null;
  if (checkListeners) {
    deinstallListeners();
  }
  m_serverCombo.removeAll();
  String currentlySelectedServer=getConfigValue(AutConfigConstants.SERVER);
  if (currentlySelectedServer != null && currentlySelectedServer.trim().length() != 0 && !m_listOfServers.getServerNames().contains(currentlySelectedServer)) {
    int defaultServerPort=ConfigurationConstants.AUT_AGENT_DEFAULT_PORT;
    m_listOfServers.addServer(new ServerManager.Server(currentlySelectedServer,defaultServerPort));
    ErrorHandlingUtil.createMessageDialog(MessageIDs.I_SERVER_NAME_ADDED,null,new String[]{Messages.ServerName + StringConstants.COLON + StringConstants.SPACE+ currentlySelectedServer+ StringConstants.NEWLINE+ Messages.ServerPortDefault+ defaultServerPort});
  }
  for (  String serverName : m_listOfServers.getServerNames()) {
    m_serverCombo.add(serverName);
  }
  if (checkListeners) {
    installListeners();
  }
}",0.6805864060417592
96207,"/** 
 * @param node The node for which to check the editabilty.
 * @return the results of <code>guiNode.isEditable()</code>.
 */
private boolean testIsEditable(IPersistentObject node){
  return NodeBP.isEditable(node);
}","/** 
 * @param node The node for which to check the editabilty.
 * @return the results of <code>guiNode.isEditable()</code>.
 */
private boolean testIsEditable(IPersistentObject node){
  if (node instanceof IObjectMappingCategoryPO) {
    return true;
  }
  return NodeBP.isEditable(node);
}",0.8610567514677103
96208,"/** 
 * {@inheritDoc}
 */
public void keyPress(Object graphicsComponent,int keycode) throws RobotException {
  keyPressReleaseImpl(graphicsComponent,keycode,true);
}","/** 
 * {@inheritDoc}
 */
public void keyPress(Object graphicsComponent,int keycode) throws RobotException {
  if (!post(new KeyCodeTyper(keycode).createKeyDownEvent())) {
    final String msg=""String_Node_Str"" + keycode + ""String_Node_Str"";
    log.warn(msg);
    throw new RobotException(msg,EventFactory.createActionError(TestErrorEvent.INVALID_INPUT));
  }
}",0.4516129032258064
96209,"/** 
 * @param parent to set
 */
public abstract void setParentNode(INodePO parent);","/** 
 * @param parent the model parent to set
 */
public abstract void setParentNode(INodePO parent);",0.9081081081081082
96210,"/** 
 * @return the current value of the m_parentNode property
 */
public INodePO getParentNode();","/** 
 * @return the model parent node of this node
 */
public INodePO getParentNode();",0.7934782608695652
96211,"/** 
 * @param specTc the spec to open the editor for
 */
protected void openEditorForSpecTC(ISpecTestCasePO specTc){
  boolean isNodeEditable=TestCaseBP.belongsToCurrentProject(specTc);
  if (isNodeEditable) {
    openEditor(specTc);
  }
 else {
    Utils.createMessageDialog(MessageIDs.I_NON_EDITABLE_NODE);
  }
}","/** 
 * @param specTc the spec to open the editor for
 */
protected void openEditorForSpecTC(ISpecTestCasePO specTc){
  boolean isNodeEditable=TestCaseBP.belongsToCurrentProject(specTc);
  if (isNodeEditable) {
    openEditor(specTc);
    InteractionEventDispatcher.getDefault().fireProgammableSelectionEvent(new StructuredSelection(specTc));
  }
 else {
    Utils.createMessageDialog(MessageIDs.I_NON_EDITABLE_NODE);
  }
}",0.8536585365853658
96212,"/** 
 * Search for the SpecTC of an ExecTC and opens the corresponding editor if possible.
 * @param structuredSel the current selection
 */
private void openSpecNode(IStructuredSelection structuredSel){
  ISpecTestCasePO specTc=UINodeBP.getSpecTC(structuredSel);
  openEditorForSpecTC(specTc);
  InteractionEventDispatcher.getDefault().fireProgammableSelectionEvent(new StructuredSelection(specTc));
}","/** 
 * Search for the SpecTC of an ExecTC and opens the corresponding editor if possible.
 * @param structuredSel the current selection
 */
private void openSpecNode(IStructuredSelection structuredSel){
  ISpecTestCasePO specTc=UINodeBP.getSpecTC(structuredSel);
  openEditorForSpecTC(specTc);
}",0.8481375358166189
96213,"/** 
 * @return Returns the completeOmMap.
 */
@Transient private Map getCompleteOmMap(){
  if (m_completeOmMap == null) {
    m_completeOmMap=new HashMap();
  }
  return m_completeOmMap;
}","/** 
 * @return Returns the completeOmMap.
 */
@Transient private Map<IAUTMainPO,Boolean> getCompleteOmMap(){
  if (m_completeOmMap == null) {
    m_completeOmMap=new HashMap<IAUTMainPO,Boolean>();
  }
  return m_completeOmMap;
}",0.9043062200956936
96214,"/** 
 * @param aut aut, for which the completeOMFlag is valid
 * @return Returns the completeOMFlag for given AUT
 */
public boolean getCompleteOMFlag(IAUTMainPO aut){
  if (aut != null) {
    Boolean value=(Boolean)getCompleteOmMap().get(aut);
    return value != null ? value.booleanValue() : false;
  }
  return true;
}","/** 
 * @param aut aut, for which the completeOMFlag is valid
 * @return Returns the completeOMFlag for given AUT
 */
public boolean getCompleteOMFlag(IAUTMainPO aut){
  if (aut != null) {
    Boolean value=getCompleteOmMap().get(aut);
    return value != null ? value.booleanValue() : false;
  }
  return true;
}",0.9858267716535432
96215,"/** 
 * {@inheritDoc} 
 */
public void decorate(Object element,IDecoration decoration){
  decoration.setForegroundColor(Layout.DEFAULT_OS_COLOR);
  final INodePO node=(INodePO)element;
  final ITestSuitePO owningTestsuite=UINodeBP.getOwningTestSuite(node);
  if (shouldNotDecorate(node,decoration,owningTestsuite)) {
    return;
  }
  boolean flag=false;
  if (TestSuiteBrowserLabelProvider.isNodeActive(node)) {
    if (owningTestsuite != null) {
      final WorkingLanguageBP workLangBP=WorkingLanguageBP.getInstance();
      Locale locale=workLangBP.getWorkingLanguage();
      IAUTMainPO aut=owningTestsuite.getAut();
      if (element instanceof ITestSuitePO) {
        ITestSuitePO execTs=(ITestSuitePO)element;
        if (aut != null && !workLangBP.isTestSuiteLanguage(locale,owningTestsuite)) {
          decoration.setForegroundColor(Layout.GRAY_COLOR);
        }
 else {
          decoration.setForegroundColor(Layout.DEFAULT_OS_COLOR);
          flag=node.getSumTdFlag(locale) && node.getSumOMFlag(aut) && node.getSumSpecTcFlag();
        }
        if (execTs.getNodeListSize() == 0) {
          flag=true;
        }
        if (aut == null) {
          flag=false;
        }
      }
 else       if (node instanceof IExecTestCasePO) {
        flag=node.getSumTdFlag(locale) && node.getSumOMFlag(aut) && node.getSumSpecTcFlag();
      }
 else       if (node instanceof ICapPO) {
        ICapPO cap=(ICapPO)node;
        INodePO grandParent=node.getParentNode().getParentNode();
        boolean overWrittenName=false;
        if (grandParent instanceof IExecTestCasePO) {
          IExecTestCasePO execTC=(IExecTestCasePO)grandParent;
          for (          ICompNamesPairPO pair : execTC.getCompNamesPairs()) {
            if (pair.getFirstName().equals(cap.getComponentName()) && pair.getSecondName() != null && !pair.getSecondName().equals(cap.getComponentName())) {
              overWrittenName=true;
              break;
            }
          }
          flag=cap.getCompleteTdFlag(locale);
          if (!overWrittenName) {
            flag=flag && cap.getCompleteOMFlag(aut);
          }
        }
      }
    }
 else {
      if (element instanceof ITestJobPO) {
        flag=TestSuiteBrowserLabelProvider.isTestJobGuiValid((ITestJobPO)element);
      }
 else       if (element instanceof IRefTestSuitePO) {
        flag=TestSuiteBrowserLabelProvider.isRefTestSuiteGuiValid((IRefTestSuitePO)element);
      }
 else {
        flag=true;
      }
    }
  }
 else {
    flag=true;
  }
  setIcon(decoration,getStatus(node,flag));
}","/** 
 * {@inheritDoc} 
 */
public void decorate(Object element,IDecoration decoration){
  decoration.setForegroundColor(Layout.DEFAULT_OS_COLOR);
  final INodePO node=(INodePO)element;
  final ITestSuitePO owningTestsuite=UINodeBP.getOwningTestSuite(node);
  if (shouldNotDecorate(node,decoration,owningTestsuite)) {
    return;
  }
  boolean flag=false;
  if (TestSuiteBrowserLabelProvider.isNodeActive(node)) {
    if (owningTestsuite != null) {
      final WorkingLanguageBP workLangBP=WorkingLanguageBP.getInstance();
      Locale locale=workLangBP.getWorkingLanguage();
      IAUTMainPO aut=owningTestsuite.getAut();
      if (element instanceof ITestSuitePO) {
        ITestSuitePO execTs=(ITestSuitePO)element;
        if (aut != null && !workLangBP.isTestSuiteLanguage(locale,owningTestsuite)) {
          decoration.setForegroundColor(Layout.GRAY_COLOR);
        }
 else {
          decoration.setForegroundColor(Layout.DEFAULT_OS_COLOR);
          flag=node.getSumTdFlag(locale) && node.getSumOMFlag(aut) && node.getSumSpecTcFlag();
        }
        if (execTs.getNodeListSize() == 0) {
          flag=true;
        }
        if (aut == null) {
          flag=false;
        }
      }
 else       if (node instanceof IExecTestCasePO) {
        flag=node.getSumTdFlag(locale) && node.getSumOMFlag(aut) && node.getSumSpecTcFlag();
      }
 else       if (node instanceof ICapPO) {
        ICapPO cap=(ICapPO)node;
        INodePO grandParent=node.getParentNode().getParentNode();
        boolean overWrittenName=false;
        if (grandParent instanceof IExecTestCasePO) {
          IExecTestCasePO execTC=(IExecTestCasePO)grandParent;
          for (          ICompNamesPairPO pair : execTC.getCompNamesPairs()) {
            if (pair.getFirstName().equals(cap.getComponentName()) && pair.getSecondName() != null && !pair.getSecondName().equals(cap.getComponentName())) {
              overWrittenName=true;
              break;
            }
          }
          flag=cap.getCompleteTdFlag(locale);
          if (!overWrittenName) {
            flag=flag && cap.getCompleteOMFlag(aut);
          }
        }
 else {
          flag=true;
        }
      }
    }
 else {
      if (element instanceof ITestJobPO) {
        flag=TestSuiteBrowserLabelProvider.isTestJobGuiValid((ITestJobPO)element);
      }
 else       if (element instanceof IRefTestSuitePO) {
        flag=TestSuiteBrowserLabelProvider.isRefTestSuiteGuiValid((IRefTestSuitePO)element);
      }
 else {
        flag=true;
      }
    }
  }
 else {
    flag=true;
  }
  setIcon(decoration,getStatus(node,flag));
}",0.9924050632911392
96216,"/** 
 * {@inheritDoc}
 */
public void handleDataChanged(IPersistentObject po,DataState dataState){
  if (po instanceof INodePO) {
    INodePO changedNode=(INodePO)po;
    INodePO editorNode=(INodePO)getEditorHelper().getEditSupport().getWorkVersion();
    boolean isVisibleInEditor=editorNode.indexOf(changedNode) > -1;
switch (dataState) {
case Added:
      if (isVisibleInEditor || (editorNode instanceof ISpecTestCasePO && ((ISpecTestCasePO)editorNode).getAllEventEventExecTC().contains(po))) {
        handleNodeAdded(changedNode);
      }
    break;
case Deleted:
  if (!(po instanceof IProjectPO)) {
    refresh();
  }
break;
case Renamed:
renameGUINode(po);
break;
case StructureModified:
if (isVisibleInEditor) {
getEditorHelper().setDirty(true);
}
if (!handleStructureModified(po)) {
return;
}
break;
case ReuseChanged:
break;
default :
Assert.notReached();
}
getEditorHelper().handleDataChanged(po,dataState);
}
}","/** 
 * {@inheritDoc}
 */
public void handleDataChanged(IPersistentObject po,DataState dataState){
  if (po instanceof INodePO) {
    INodePO changedNode=(INodePO)po;
    INodePO editorNode=(INodePO)getEditorHelper().getEditSupport().getWorkVersion();
    boolean isVisibleInEditor=editorNode.indexOf(changedNode) > -1;
    if (editorNode instanceof ISpecTestCasePO) {
      isVisibleInEditor|=((ISpecTestCasePO)editorNode).getAllEventEventExecTC().contains(po);
    }
switch (dataState) {
case Added:
      if (isVisibleInEditor) {
        handleNodeAdded(changedNode);
      }
    break;
case Deleted:
  if (!(po instanceof IProjectPO)) {
    refresh();
  }
break;
case Renamed:
renameGUINode(po);
break;
case StructureModified:
if (isVisibleInEditor) {
getEditorHelper().setDirty(true);
}
if (!handleStructureModified(po)) {
return;
}
break;
case ReuseChanged:
break;
default :
Assert.notReached();
}
getEditorHelper().handleDataChanged(po,dataState);
}
}",0.9090909090909092
96217,"/** 
 * Shows information dialog that savin on observation mode is not allowed
 * @return returnCode of Dialog
 */
private int showSaveInObservModeDialog(){
  MessageDialog dialog=new MessageDialog(Plugin.getShell(),Messages.SaveInObservationModeDialogTitle,null,Messages.SaveInObservationModeDialogQuestion,MessageDialog.QUESTION,new String[]{Messages.NewProjectDialogMessageButton0,Messages.NewProjectDialogMessageButton0},0);
  dialog.create();
  DialogUtils.setWidgetNameForModalDialog(dialog);
  dialog.open();
  return dialog.getReturnCode();
}","/** 
 * Shows information dialog that savin on observation mode is not allowed
 * @return returnCode of Dialog
 */
private int showSaveInObservModeDialog(){
  MessageDialog dialog=new MessageDialog(Plugin.getShell(),Messages.SaveInObservationModeDialogTitle,null,Messages.SaveInObservationModeDialogQuestion,MessageDialog.QUESTION,new String[]{Messages.DialogMessageButton_YES,Messages.DialogMessageButton_NO},0);
  dialog.create();
  DialogUtils.setWidgetNameForModalDialog(dialog);
  dialog.open();
  return dialog.getReturnCode();
}",0.6580645161290323
96218,"/** 
 * @return a confirm Dialog, if monitoring job is still running.
 */
private MessageDialog getConfirmDialog(){
  MessageDialog dialog=new MessageDialog(Plugin.getShell(),Messages.ClientDisconnectFromAutAgentTitle,null,Messages.ClientDisconnectFromAutAgentMessage,MessageDialog.QUESTION,new String[]{Messages.NewProjectDialogMessageButton0,Messages.NewProjectDialogMessageButton1},0);
  dialog.create();
  DialogUtils.setWidgetNameForModalDialog(dialog);
  dialog.open();
  return dialog;
}","/** 
 * @return a confirm Dialog, if monitoring job is still running.
 */
private MessageDialog getConfirmDialog(){
  MessageDialog dialog=new MessageDialog(Plugin.getShell(),Messages.ClientDisconnectFromAutAgentTitle,null,Messages.ClientDisconnectFromAutAgentMessage,MessageDialog.QUESTION,new String[]{Messages.DialogMessageButton_YES,Messages.DialogMessageButton_NO},0);
  dialog.create();
  DialogUtils.setWidgetNameForModalDialog(dialog);
  dialog.open();
  return dialog;
}",0.6515930113052415
96219,"/** 
 * Shows information dialog, that selected testresults will be deleted
 * @return returnCode of Dialog
 */
private int showDeleteTestresultsDialog(){
  MessageDialog dialog=new MessageDialog(Plugin.getShell(),Messages.TestresultSummaryDeleteTestrunDialogTitle,null,Messages.TestresultSummaryDeleteTestrunDialogMessage,MessageDialog.QUESTION,new String[]{Messages.NewProjectDialogMessageButton0,Messages.NewProjectDialogMessageButton1},0);
  dialog.create();
  DialogUtils.setWidgetNameForModalDialog(dialog);
  dialog.open();
  return dialog.getReturnCode();
}","/** 
 * Shows information dialog, that selected testresults will be deleted
 * @return returnCode of Dialog
 */
private int showDeleteTestresultsDialog(){
  MessageDialog dialog=new MessageDialog(Plugin.getShell(),Messages.TestresultSummaryDeleteTestrunDialogTitle,null,Messages.TestresultSummaryDeleteTestrunDialogMessage,MessageDialog.QUESTION,new String[]{Messages.DialogMessageButton_YES,Messages.DialogMessageButton_NO},0);
  dialog.create();
  DialogUtils.setWidgetNameForModalDialog(dialog);
  dialog.open();
  return dialog.getReturnCode();
}",0.6672645739910313
96220,"/** 
 * Shows confirm dialog for this action and returns the dialog object
 * @return confirm dialog for this action
 */
private MessageDialog showConfirmDialog(){
  MessageDialog dialog=new MessageDialog(Plugin.getShell(),Messages.RevertEditorChangesActionShellTitle,null,Messages.RevertEditorChangesActionQuestionText,MessageDialog.QUESTION,new String[]{Messages.NewProjectDialogMessageButton0,Messages.NewProjectDialogMessageButton1},0);
  dialog.create();
  DialogUtils.setWidgetNameForModalDialog(dialog);
  dialog.open();
  return dialog;
}","/** 
 * Shows confirm dialog for this action and returns the dialog object
 * @return confirm dialog for this action
 */
private MessageDialog showConfirmDialog(){
  MessageDialog dialog=new MessageDialog(Plugin.getShell(),Messages.RevertEditorChangesActionShellTitle,null,Messages.RevertEditorChangesActionQuestionText,MessageDialog.QUESTION,new String[]{Messages.DialogMessageButton_YES,Messages.DialogMessageButton_NO},0);
  dialog.create();
  DialogUtils.setWidgetNameForModalDialog(dialog);
  dialog.open();
  return dialog;
}",0.8857938718662952
96221,"/** 
 * @return a confirm Dialog
 */
private MessageDialog getConfirmDialog(){
  String questionText;
  if (isJobRunning()) {
    questionText=Messages.StopAUTActionQuestionTextIfcollecting;
  }
 else {
    questionText=Messages.StopAUTActionQuestionText;
  }
  MessageDialog dialog=new MessageDialog(Plugin.getShell(),Messages.StopAUTActionShellTitle,null,questionText,MessageDialog.QUESTION,new String[]{Messages.NewProjectDialogMessageButton0,Messages.NewProjectDialogMessageButton1},0);
  dialog.create();
  DialogUtils.setWidgetNameForModalDialog(dialog);
  dialog.open();
  return dialog;
}","/** 
 * @return a confirm Dialog
 */
private MessageDialog getConfirmDialog(){
  String questionText;
  if (isJobRunning()) {
    questionText=Messages.StopAUTActionQuestionTextIfcollecting;
  }
 else {
    questionText=Messages.StopAUTActionQuestionText;
  }
  MessageDialog dialog=new MessageDialog(Plugin.getShell(),Messages.StopAUTActionShellTitle,null,questionText,MessageDialog.QUESTION,new String[]{Messages.DialogMessageButton_YES,Messages.DialogMessageButton_NO},0);
  dialog.create();
  DialogUtils.setWidgetNameForModalDialog(dialog);
  dialog.open();
  return dialog;
}",0.7119796091758709
96222,"/** 
 * Pops up a ""confirmDelete"" dialog.
 * @param itemNames The names of the items to be deleted.
 * @return <code>true</code>, if ""yes"" was clicked, <code>false</code> otherwise.
 */
public static boolean confirmDelete(Collection<String> itemNames){
  String label=StringConstants.EMPTY;
  if (itemNames.size() == 1) {
    label=NLS.bind(Messages.DeleteTreeItemActionDeleteOneItem,itemNames.iterator().next());
  }
 else   if (itemNames.size() == 0) {
    return false;
  }
 else {
    label=NLS.bind(Messages.DeleteTreeItemActionDeleteMultipleItems,itemNames.size());
  }
  MessageDialog dialog=new MessageDialog(Plugin.getShell(),Messages.DeleteTreeItemActionShellTitle,null,label,MessageDialog.QUESTION,new String[]{Messages.NewProjectDialogMessageButton0,Messages.NewProjectDialogMessageButton1},0);
  dialog.create();
  DialogUtils.setWidgetNameForModalDialog(dialog);
  dialog.open();
  if (dialog.getReturnCode() != 0) {
    return false;
  }
  return true;
}","/** 
 * Pops up a ""confirmDelete"" dialog.
 * @param itemNames The names of the items to be deleted.
 * @return <code>true</code>, if ""yes"" was clicked, <code>false</code> otherwise.
 */
public static boolean confirmDelete(Collection<String> itemNames){
  String label=StringConstants.EMPTY;
  if (itemNames.size() == 1) {
    label=NLS.bind(Messages.DeleteTreeItemActionDeleteOneItem,itemNames.iterator().next());
  }
 else   if (itemNames.size() == 0) {
    return false;
  }
 else {
    label=NLS.bind(Messages.DeleteTreeItemActionDeleteMultipleItems,itemNames.size());
  }
  MessageDialog dialog=new MessageDialog(Plugin.getShell(),Messages.DeleteTreeItemActionShellTitle,null,label,MessageDialog.QUESTION,new String[]{Messages.DialogMessageButton_YES,Messages.DialogMessageButton_NO},0);
  dialog.create();
  DialogUtils.setWidgetNameForModalDialog(dialog);
  dialog.open();
  if (dialog.getReturnCode() != 0) {
    return false;
  }
  return true;
}",0.9745189807592304
96223,"/** 
 * {@inheritDoc}
 */
public boolean canModify(Object element,String property){
  if (element instanceof ICompNamesPairPO) {
    final ICompNamesPairPO compNamesPair=(ICompNamesPairPO)element;
    return COLUMN_NEW_NAME.equals(property) && isModifiable() && compNamesPair.getType().length() != 0;
  }
  return false;
}","/** 
 * {@inheritDoc}
 */
public boolean canModify(Object element,String property){
  boolean editable=false;
  if (getSelectedExecNodeOwner() instanceof AbstractTestCaseEditor && ((AbstractTestCaseEditor)getSelectedExecNodeOwner()).getEditorHelper().requestEditableState() == EditableState.OK) {
    editable=true;
  }
  if (editable && element instanceof ICompNamesPairPO) {
    final ICompNamesPairPO compNamesPair=(ICompNamesPairPO)element;
    return COLUMN_NEW_NAME.equals(property) && isModifiable() && compNamesPair.getType().length() != 0;
  }
  return false;
}",0.7130044843049327
96224,"/** 
 * {@inheritDoc}
 */
@SuppressWarnings(""String_Node_Str"") public void changeReuse(IComponentNameReuser user,String oldGuid,String newGuid) throws IncompatibleTypeException, PMException {
  if (user == null) {
    return;
  }
  if (newGuid != null) {
    CompSystem compSystem=ComponentBuilder.getInstance().getCompSystem();
    List<Component> availableComponents=getFilterToolkitId() != null ? compSystem.getComponents(getFilterToolkitId(),true) : compSystem.getComponents();
    boolean isValidType=updateComponentType(newGuid,user.getComponentType(getCompNameCache(),availableComponents));
    if (!isValidType) {
      String currType=getCompNameCache().getCompNamePo(newGuid).getComponentType();
      String userType=user.getComponentType(getCompNameCache(),availableComponents);
      IComponentNamePO compNamePo=getCompNameCache().getCompNamePo(newGuid);
      StringBuilder msgBuid=new StringBuilder();
      msgBuid.append(Messages.ErrorSavingChangedComponentName);
      msgBuid.append(StringConstants.DOT);
      msgBuid.append(StringConstants.NEWLINE);
      msgBuid.append(StringConstants.APOSTROPHE);
      msgBuid.append(currType);
      msgBuid.append(StringConstants.APOSTROPHE);
      msgBuid.append(StringConstants.SPACE);
      msgBuid.append(StringConstants.MINUS);
      msgBuid.append(StringConstants.RIGHT_INEQUALITY_SING);
      msgBuid.append(StringConstants.SPACE);
      msgBuid.append(StringConstants.APOSTROPHE);
      msgBuid.append(userType);
      msgBuid.append(StringConstants.APOSTROPHE);
      msgBuid.append(StringConstants.EXCLAMATION_MARK);
      String msg=msgBuid.toString();
      throw new IncompatibleTypeException(compNamePo,msg,MessageIDs.E_COMP_TYPE_INCOMPATIBLE,new String[]{compNamePo.getName(),CompSystemI18n.getString(currType),CompSystemI18n.getString(userType)});
    }
    getCompNameCache().addReuse(newGuid);
  }
  user.changeCompName(oldGuid,newGuid);
  if (oldGuid != null) {
    updateComponentType(oldGuid,null);
    getCompNameCache().removeReuse(oldGuid);
  }
}","/** 
 * {@inheritDoc}
 */
@SuppressWarnings(""String_Node_Str"") public void changeReuse(IComponentNameReuser user,String oldGuid,String newGuid) throws IncompatibleTypeException, PMException {
  if (user == null) {
    return;
  }
  if (newGuid != null) {
    CompSystem compSystem=ComponentBuilder.getInstance().getCompSystem();
    List<Component> availableComponents=getFilterToolkitId() != null ? compSystem.getComponents(getFilterToolkitId(),true) : compSystem.getComponents();
    boolean isValidType=updateComponentType(newGuid,user.getComponentType(getCompNameCache(),availableComponents));
    if (!isValidType) {
      String currType=getCompNameCache().getCompNamePo(newGuid).getComponentType();
      String userType=user.getComponentType(getCompNameCache(),availableComponents);
      IComponentNamePO compNamePo=getCompNameCache().getCompNamePo(newGuid);
      StringBuilder msgBuid=new StringBuilder();
      msgBuid.append(Messages.ErrorSavingChangedComponentName);
      msgBuid.append(StringConstants.DOT);
      msgBuid.append(StringConstants.NEWLINE);
      msgBuid.append(StringConstants.APOSTROPHE);
      msgBuid.append(currType);
      msgBuid.append(StringConstants.APOSTROPHE);
      msgBuid.append(StringConstants.SPACE);
      msgBuid.append(StringConstants.MINUS);
      msgBuid.append(StringConstants.RIGHT_INEQUALITY_SING);
      msgBuid.append(StringConstants.SPACE);
      msgBuid.append(StringConstants.APOSTROPHE);
      msgBuid.append(userType);
      msgBuid.append(StringConstants.APOSTROPHE);
      msgBuid.append(StringConstants.EXCLAMATION_MARK);
      String msg=msgBuid.toString();
      throw new IncompatibleTypeException(compNamePo,msg,MessageIDs.E_COMP_TYPE_INCOMPATIBLE,new String[]{compNamePo.getName(),CompSystemI18n.getString(currType,true),CompSystemI18n.getString(userType,true)});
    }
    getCompNameCache().addReuse(newGuid);
  }
  user.changeCompName(oldGuid,newGuid);
  if (oldGuid != null) {
    updateComponentType(oldGuid,null);
    getCompNameCache().removeReuse(oldGuid);
  }
}",0.9975429975429976
96225,"/** 
 * Implementation of the mouse move. The mouse is moved into the graphics component.
 * @param graphicsComponent The component into which the mouse will be moved.
 * @param constraints The rectangle to move to, relative to the location ofthe given component. May be <code>null</code>. If <code>null</code>, the mouse will be moved to the center of the given component.
 * @param xPos xPos in component           
 * @param yPos yPos in component
 * @param xAbsolute true if x-position should be absolute  
 * @param yAbsolute true if y-position should be absolute  
 * @param clickOptions Contains mouse movement strategy information.
 * @throws StepExecutionException If the click delay is interupted or the event confirmation receives a timeout.
 */
private void moveImpl(final Widget graphicsComponent,final Rectangle constraints,final int xPos,final boolean xAbsolute,final int yPos,final boolean yAbsolute,ClickOptions clickOptions) throws StepExecutionException {
  if (clickOptions.isScrollToVisible() && graphicsComponent instanceof Control) {
    ensureComponentVisible((Control)graphicsComponent,constraints);
  }
  Rectangle bounds=getBounds(graphicsComponent);
  if (constraints != null) {
    if (graphicsComponent instanceof Control) {
      Point convertedLocation=(Point)m_queuer.invokeAndWait(""String_Node_Str"",new IRunnable(){
        public Object run() throws StepExecutionException {
          return ((Control)graphicsComponent).toDisplay(constraints.x,constraints.y);
        }
      }
);
      bounds.x=convertedLocation.x;
      bounds.y=convertedLocation.y;
    }
 else {
      bounds.x+=constraints.x;
      bounds.y+=constraints.y;
    }
    bounds.height=constraints.height;
    bounds.width=constraints.width;
  }
  Point pointToGo=SwtPointUtil.calculatePointToGo(xPos,xAbsolute,yPos,yAbsolute,bounds);
  if (isMouseMoveRequired(pointToGo)) {
    if (log.isDebugEnabled()) {
      log.debug(""String_Node_Str"" + pointToGo);
    }
    Point initialPoint=(Point)m_queuer.invokeAndWait(""String_Node_Str"",new IRunnable(){
      public Object run() throws StepExecutionException {
        Display d=m_autServer.getAutDisplay();
        return d.getCursorLocation();
      }
    }
);
    if (pointToGo != null && (pointToGo.x < 0 || pointToGo.y < 0)) {
      throw new RobotException(""String_Node_Str"",EventFactory.createActionError(TestErrorEvent.CLICKPOINT_OFFSCREEN,new String[]{String.valueOf(pointToGo.x),String.valueOf(pointToGo.y)}));
    }
    java.awt.Point[] path=MouseMovementStrategy.getMovementPath(new java.awt.Point(initialPoint.x,initialPoint.y),new java.awt.Point(pointToGo.x,pointToGo.y),clickOptions.getStepMovement());
    for (int i=0; i < path.length; i++) {
      m_robot.mouseMove(path[i].x,path[i].y);
    }
    logAndCorrectMousePosition(pointToGo);
  }
}","/** 
 * Implementation of the mouse move. The mouse is moved into the graphics component.
 * @param graphicsComponent The component into which the mouse will be moved.
 * @param constraints The rectangle to move to, relative to the location ofthe given component. May be <code>null</code>. If <code>null</code>, the mouse will be moved to the center of the given component.
 * @param xPos xPos in component           
 * @param yPos yPos in component
 * @param xAbsolute true if x-position should be absolute  
 * @param yAbsolute true if y-position should be absolute  
 * @param clickOptions Contains mouse movement strategy information.
 * @throws StepExecutionException If the click delay is interupted or the event confirmation receives a timeout.
 */
private void moveImpl(final Widget graphicsComponent,final Rectangle constraints,final int xPos,final boolean xAbsolute,final int yPos,final boolean yAbsolute,ClickOptions clickOptions) throws StepExecutionException {
  if (clickOptions.isScrollToVisible() && graphicsComponent instanceof Control) {
    ensureComponentVisible((Control)graphicsComponent,constraints);
  }
  Rectangle bounds=getBounds(graphicsComponent);
  if (constraints != null) {
    if (graphicsComponent instanceof Control) {
      Point convertedLocation=convertLocation(constraints,(Control)graphicsComponent);
      bounds.x=convertedLocation.x;
      bounds.y=convertedLocation.y;
    }
 else {
      bounds.x+=constraints.x;
      bounds.y+=constraints.y;
    }
    bounds.height=constraints.height;
    bounds.width=constraints.width;
  }
  Point pointToGo=SwtPointUtil.calculatePointToGo(xPos,xAbsolute,yPos,yAbsolute,bounds);
  if (isMouseMoveRequired(pointToGo)) {
    if (log.isDebugEnabled()) {
      log.debug(""String_Node_Str"" + pointToGo);
    }
    Point initialPoint=(Point)m_queuer.invokeAndWait(""String_Node_Str"",new IRunnable(){
      public Object run() throws StepExecutionException {
        Display d=m_autServer.getAutDisplay();
        return d.getCursorLocation();
      }
    }
);
    if (pointToGo != null && (pointToGo.x < 0 || pointToGo.y < 0)) {
      throw new RobotException(""String_Node_Str"",EventFactory.createActionError(TestErrorEvent.CLICKPOINT_OFFSCREEN,new String[]{String.valueOf(pointToGo.x),String.valueOf(pointToGo.y)}));
    }
    java.awt.Point[] path=MouseMovementStrategy.getMovementPath(new java.awt.Point(initialPoint.x,initialPoint.y),new java.awt.Point(pointToGo.x,pointToGo.y),clickOptions.getStepMovement());
    for (int i=0; i < path.length; i++) {
      m_robot.mouseMove(path[i].x,path[i].y);
    }
    logAndCorrectMousePosition(pointToGo);
  }
}",0.957927613448466
96226,"/** 
 * @param changedObj notify listener about data modification of this object
 * @param dataState kind of object modification
 * @param updateState notification only relevant for editors
 */
public void fireDataChangedListener(final IPersistentObject changedObj,final DataState dataState,final UpdateState updateState){
  final Set<IDataChangedListener> stableListeners=new HashSet<IDataChangedListener>(m_dataChangedListeners);
  for (  final IDataChangedListener l : stableListeners) {
    try {
      l.handleDataChanged(changedObj,dataState,updateState);
    }
 catch (    Throwable t) {
      if (t instanceof EntityNotFoundException) {
        String msg=Messages.DataEventDispatcherReopenProject;
        ErrorMessagePresenter.getPresenter().showErrorMessage(MessageIDs.E_PERSISTENCE_LOAD_FAILED,null,new String[]{msg});
      }
      LOG.error(Messages.UnhandledExceptionWhileCallListeners,t);
    }
  }
  final Set<IDataChangedListener> stableListenersPost=new HashSet<IDataChangedListener>(m_dataChangedListenersPost);
  for (  IDataChangedListener l : stableListenersPost) {
    try {
      l.handleDataChanged(changedObj,dataState,updateState);
    }
 catch (    Throwable t) {
      LOG.error(Messages.UnhandledExceptionWhileCallListeners,t);
    }
  }
}","/** 
 * @param events data changed events
 */
public void fireDataChangedListener(final DataChangedEvent... events){
  final Set<IDataChangedListener> stableListeners=new HashSet<IDataChangedListener>(m_dataChangedListeners);
  for (  final IDataChangedListener l : stableListeners) {
    try {
      l.handleDataChanged(events);
    }
 catch (    Throwable t) {
      if (t instanceof EntityNotFoundException) {
        String msg=Messages.DataEventDispatcherReopenProject;
        ErrorMessagePresenter.getPresenter().showErrorMessage(MessageIDs.E_PERSISTENCE_LOAD_FAILED,null,new String[]{msg});
      }
      LOG.error(Messages.UnhandledExceptionWhileCallListeners,t);
    }
  }
  final Set<IDataChangedListener> stableListenersPost=new HashSet<IDataChangedListener>(m_dataChangedListenersPost);
  for (  IDataChangedListener l : stableListenersPost) {
    try {
      l.handleDataChanged(events);
    }
 catch (    Throwable t) {
      LOG.error(Messages.UnhandledExceptionWhileCallListeners,t);
    }
  }
}",0.8334794040315513
96227,"/** 
 * @param po changed persistent object
 * @param dataState kind of modification
 * @param updateState determines the parts to update
 */
public void handleDataChanged(IPersistentObject po,DataState dataState,UpdateState updateState);","/** 
 * @param events an array of data changed events
 */
public void handleDataChanged(DataChangedEvent... events);",0.4124293785310734
96228,"/** 
 * {@inheritDoc}
 */
public void dataModified(IPersistentObject po){
  fireDataChangedListener(po,DataState.StructureModified,UpdateState.all);
}","/** 
 * {@inheritDoc}
 */
public void dataModified(IPersistentObject po){
  fireDataChangedListener(new DataChangedEvent(po,DataState.StructureModified,UpdateState.all));
}",0.9316770186335404
96229,"/** 
 * {@inheritDoc}
 */
public void handleDataChanged(IPersistentObject po,DataState dataState,UpdateState updateState){
  if (dataState == DataState.Added) {
    fireProgammableSelectionEvent(new StructuredSelection(po));
  }
}","/** 
 * {@inheritDoc} 
 */
public void handleDataChanged(IPersistentObject po,DataState dataState,UpdateState updateState){
  if (dataState == DataState.Added) {
    fireProgammableSelectionEvent(new StructuredSelection(po));
  }
}",0.9978308026030368
96230,"/** 
 * Deletes the given Component Name from the object map.
 * @param toDelete The Component Name to delete.
 * @return the category to which the Component Name belonged before it wasdeleted.
 */
public IObjectMappingCategoryPO deleteCompName(IComponentNamePO toDelete){
  IObjectMappingCategoryPO originalCategory=null;
  IWritableComponentNameMapper compNameMapper=getEditor().getEditorHelper().getEditSupport().getCompMapper();
  IObjectMappingAssoziationPO parent=getAssociation(toDelete.getGuid());
  try {
    compNameMapper.changeReuse(parent,toDelete.getGuid(),null);
    IObjectMappingCategoryPO category=parent.getCategory();
    originalCategory=category;
    if (parent.getLogicalNames().isEmpty()) {
      originalCategory.removeAssociation(parent);
      if (parent.getTechnicalName() != null) {
        Stack<String> catPath=new Stack<String>();
        while (category.getParent() != null) {
          catPath.push(category.getName());
          category=category.getParent();
        }
        IObjectMappingCategoryPO newCategory=getEditor().getAut().getObjMap().getUnmappedTechnicalCategory();
        while (!catPath.isEmpty()) {
          String catName=catPath.pop();
          IObjectMappingCategoryPO subcategory=findSubcategory(newCategory,catName);
          if (subcategory == null) {
            subcategory=PoMaker.createObjectMappingCategoryPO(catName);
            newCategory.addCategory(subcategory);
          }
          newCategory=subcategory;
        }
        newCategory.addAssociation(parent);
        DataEventDispatcher.getInstance().fireDataChangedListener(getEditor().getAut().getObjMap().getUnmappedTechnicalCategory(),DataState.StructureModified,UpdateState.onlyInEditor);
      }
 else {
        getEditor().getEditorHelper().getEditSupport().getSession().remove(parent);
      }
    }
    DataEventDispatcher.getInstance().fireDataChangedListener(originalCategory,DataState.StructureModified,UpdateState.onlyInEditor);
  }
 catch (  IncompatibleTypeException ite) {
    Utils.createMessageDialog(ite,ite.getErrorMessageParams(),null);
  }
catch (  PMException pme) {
    PMExceptionHandler.handlePMExceptionForEditor(pme,getEditor());
  }
  return originalCategory;
}","/** 
 * Deletes the given Component Name from the object map.
 * @param toDelete The Component Name to delete.
 * @return the category to which the Component Name belonged before it wasdeleted.
 */
public IObjectMappingCategoryPO deleteCompName(IComponentNamePO toDelete){
  IObjectMappingCategoryPO originalCategory=null;
  IWritableComponentNameMapper compNameMapper=getEditor().getEditorHelper().getEditSupport().getCompMapper();
  IObjectMappingAssoziationPO parent=getAssociation(toDelete.getGuid());
  try {
    compNameMapper.changeReuse(parent,toDelete.getGuid(),null);
    IObjectMappingCategoryPO category=parent.getCategory();
    originalCategory=category;
    if (parent.getLogicalNames().isEmpty()) {
      originalCategory.removeAssociation(parent);
      if (parent.getTechnicalName() != null) {
        Stack<String> catPath=new Stack<String>();
        while (category.getParent() != null) {
          catPath.push(category.getName());
          category=category.getParent();
        }
        IObjectMappingCategoryPO newCategory=getEditor().getAut().getObjMap().getUnmappedTechnicalCategory();
        while (!catPath.isEmpty()) {
          String catName=catPath.pop();
          IObjectMappingCategoryPO subcategory=findSubcategory(newCategory,catName);
          if (subcategory == null) {
            subcategory=PoMaker.createObjectMappingCategoryPO(catName);
            newCategory.addCategory(subcategory);
          }
          newCategory=subcategory;
        }
        newCategory.addAssociation(parent);
      }
 else {
        getEditor().getEditorHelper().getEditSupport().getSession().remove(parent);
      }
    }
    DataEventDispatcher.getInstance().fireDataChangedListener(getEditor().getAut().getObjMap(),DataState.StructureModified,UpdateState.onlyInEditor);
  }
 catch (  IncompatibleTypeException ite) {
    Utils.createMessageDialog(ite,ite.getErrorMessageParams(),null);
  }
catch (  PMException pme) {
    PMExceptionHandler.handlePMExceptionForEditor(pme,getEditor());
  }
  return originalCategory;
}",0.9088352472463088
96231,"/** 
 * collect new logical component names / refresh object mapping editor
 */
public void collectNewLogicalComponentNames(){
  getEditor().cleanupNames();
  DataEventDispatcher.getInstance().fireDataChangedListener(getEditor().getAut().getObjMap().getUnmappedLogicalCategory(),DataState.StructureModified,UpdateState.onlyInEditor);
}","/** 
 * collect new logical component names / refresh object mapping editor
 */
public void collectNewLogicalComponentNames(){
  getEditor().cleanupNames();
  DataEventDispatcher.getInstance().fireDataChangedListener(getEditor().getAut().getObjMap(),DataState.StructureModified,UpdateState.onlyInEditor);
}",0.9547581903276132
96232,"/** 
 * {@inheritDoc}
 */
public void setMessage(Message message){
  m_message=(GetKeyboardLayoutNameMessage)m_message;
}","/** 
 * {@inheritDoc}
 */
public void setMessage(Message message){
  m_message=(GetKeyboardLayoutNameMessage)message;
}",0.9916666666666668
96233,"/** 
 * @return a flag indicating whether the selection is valid (e.g. nocategory or a node which would cause recursive loops)
 */
public boolean hasValidSelection(){
  IStructuredSelection selection=(IStructuredSelection)getTreeViewer().getSelection();
  for (  Object selectedObj : selection.toArray()) {
    if (m_circDependList.contains(selectedObj) || selectedObj instanceof ICategoryPO) {
      return false;
    }
  }
  return true;
}","/** 
 * @return a flag indicating whether the selection is valid (e.g. nocategory or a node which would cause recursive loops)
 */
public boolean hasValidSelection(){
  IStructuredSelection selection=(IStructuredSelection)getTreeViewer().getSelection();
  for (  Object selectedObj : selection.toArray()) {
    if (m_circDependList.contains(selectedObj) || selectedObj instanceof ICategoryPO || selectedObj instanceof IReusedProjectPO) {
      return false;
    }
  }
  return true;
}",0.9535135135135137
96234,"/** 
 * Select a menu item
 * @param robot The robot to use for the click operations.
 * @param popup popup menu
 * @param path path to the menu item
 * @param operator operator used for matching
 */
public static void selectMenuItem(final IRobot robot,Menu popup,String[] path,String operator){
  if (path.length == 0) {
    throw new StepExecutionException(""String_Node_Str"",EventFactory.createActionError());
  }
  MenuItem item=MenuUtil.navigateToMenuItem(robot,popup,path,operator);
  if (item == null) {
    throw new StepExecutionException(""String_Node_Str"",EventFactory.createActionError(TestErrorEvent.NOT_FOUND));
  }
  if (SWT.MOD1 == SWT.COMMAND) {
    MenuUtil.selectProgramatically(item);
  }
 else {
    MenuUtil.clickMenuItem(robot,item,1);
  }
}","/** 
 * Select a menu item
 * @param robot The robot to use for the click operations.
 * @param popup popup menu
 * @param path path to the menu item
 * @param operator operator used for matching
 */
public static void selectMenuItem(final IRobot robot,Menu popup,String[] path,String operator){
  if (path.length == 0) {
    throw new StepExecutionException(""String_Node_Str"",EventFactory.createActionError());
  }
  MenuItem item=MenuUtil.navigateToMenuItem(robot,popup,path,operator);
  selectItem(item,robot);
}",0.7815191855912295
96235,"/** 
 * Refreshes the aut.
 */
public void cleanUp(){
  final Display d=((SwtAUTServer)AUTServer.getInstance()).getAutDisplay();
  if (d != null) {
    d.syncExec(new Runnable(){
      public void run(){
        if (m_borderShell != null) {
          m_borderShell.close();
          m_borderShell.dispose();
          m_borderShell=null;
        }
      }
    }
);
  }
}","/** 
 * Refreshes the aut.
 */
public void cleanUp(){
  final Display d=((SwtAUTServer)AUTServer.getInstance()).getAutDisplay();
  if (d != null) {
    d.syncExec(new Runnable(){
      public void run(){
        if (m_borderShell != null) {
          m_borderShell.getRegion().dispose();
          m_borderShell.close();
          m_borderShell.dispose();
          m_borderShell=null;
        }
      }
    }
);
  }
}",0.9252217997465144
96236,"/** 
 * closes the m_borderShell.
 */
private void closeBorderShell(){
  if (m_borderShell != null) {
    m_borderShell.close();
    m_borderShell.dispose();
    m_borderShell=null;
    setCurrentComponent(null);
    m_oldWidget=null;
  }
}","/** 
 * closes the m_borderShell.
 */
private void closeBorderShell(){
  if (m_borderShell != null) {
    m_borderShell.getRegion().dispose();
    m_borderShell.close();
    m_borderShell.dispose();
    m_borderShell=null;
    setCurrentComponent(null);
    m_oldWidget=null;
  }
}",0.9213051823416508
96237,"/** 
 * {@inheritDoc}
 */
public void resetToTesting(){
  log.info(""String_Node_Str"");
  try {
    ChangeAUTModeMessage message=new ChangeAUTModeMessage();
    message.setMode(ChangeAUTModeMessage.TESTING);
    CAPRecordedCommand.setRecordListener(null);
    AUTConnection.getInstance().send(message);
  }
 catch (  UnknownMessageException ume) {
    fireAUTServerStateChanged(new AUTServerEvent(ume.getErrorId()));
  }
catch (  NotConnectedException nce) {
    log.error(nce);
  }
catch (  CommunicationException ce) {
    log.error(ce);
  }
  try {
    AUTConnection.getInstance().close();
  }
 catch (  ConnectionException e) {
    log.error(""String_Node_Str"",e);
  }
}","/** 
 * {@inheritDoc}
 */
public void resetToTesting(){
  log.info(""String_Node_Str"");
  CAPRecordedCommand.setRecordListener(null);
  try {
    if (AUTConnection.getInstance().isConnected()) {
      try {
        ChangeAUTModeMessage message=new ChangeAUTModeMessage();
        message.setMode(ChangeAUTModeMessage.TESTING);
        AUTConnection.getInstance().send(message);
      }
 catch (      UnknownMessageException ume) {
        fireAUTServerStateChanged(new AUTServerEvent(ume.getErrorId()));
      }
catch (      NotConnectedException nce) {
        log.error(nce);
      }
catch (      CommunicationException ce) {
        log.error(ce);
      }
      AUTConnection.getInstance().close();
    }
  }
 catch (  ConnectionException e) {
    log.error(""String_Node_Str"",e);
  }
}",0.8087731322823852
96238,"/** 
 * @param element the element to get the text for 
 * @return a descriptive text for the given element
 */
public static String getGDText(Object element){
  if (element instanceof INodePO) {
    INodePO node=(INodePO)element;
    if (node.getName() == null) {
      return UNNAMED_NODE;
    }
    if (node instanceof ICapPO) {
      return getText((ICapPO)node);
    }
    if (node instanceof IExecTestCasePO) {
      return getText((IExecTestCasePO)node);
    }
    if (node instanceof ISpecTestCasePO) {
      return getText((ISpecTestCasePO)node);
    }
    return node.getName();
  }
  if (element instanceof ITestSuiteContPO) {
    return Messages.TSBCategoryTS;
  }
  if (element instanceof ITestJobContPO) {
    return Messages.TSBCategoryTJ;
  }
  if (element instanceof IReusedProjectPO) {
    IReusedProjectPO reusedProject=(IReusedProjectPO)element;
    return reusedProject.getProjectName() + reusedProject.getVersionString();
  }
  return element == null ? StringConstants.EMPTY : element.toString();
}","/** 
 * @param element the element to get the text for 
 * @return a descriptive text for the given element
 */
public static String getGDText(Object element){
  if (element instanceof INodePO) {
    INodePO node=(INodePO)element;
    if (node.getName() == null) {
      return UNNAMED_NODE;
    }
    if (node instanceof ICapPO) {
      return getText((ICapPO)node);
    }
    if (node instanceof IExecTestCasePO) {
      return getText((IExecTestCasePO)node);
    }
    if (node instanceof ISpecTestCasePO) {
      return getText((ISpecTestCasePO)node);
    }
    return node.getName();
  }
  if (element instanceof ITestSuiteContPO) {
    return Messages.TSBCategoryTS;
  }
  if (element instanceof ITestJobContPO) {
    return Messages.TSBCategoryTJ;
  }
  if (element instanceof IReusedProjectPO) {
    IReusedProjectPO reusedProject=(IReusedProjectPO)element;
    String projectName=reusedProject.getProjectName();
    if (projectName == null) {
      projectName=reusedProject.getProjectGuid();
    }
    return projectName + reusedProject.getVersionString();
  }
  return element == null ? StringConstants.EMPTY : element.toString();
}",0.93666204345816
96239,"/** 
 * creates the ToolTip Text
 * @param node GuiNode
 * @return String
 */
private String createToolTipText(INodePO node){
  StringBuilder toolTip=new StringBuilder();
  final WorkingLanguageBP workLangBP=WorkingLanguageBP.getInstance();
  Locale locale=workLangBP.getWorkingLanguage();
  ITestSuitePO testSuite=UINodeBP.getTestSuiteOfNode(node);
  if (node != null && isNodeActive(node)) {
    if (testSuite != null) {
      IAUTMainPO aut=testSuite.getAut();
      if (node instanceof IExecTestCasePO) {
        checkNode((IExecTestCasePO)node,aut,locale,toolTip);
      }
 else       if (node instanceof ICapPO) {
        ICapPO cap=(ICapPO)node;
        IExecTestCasePO execTC=(IExecTestCasePO)node.getParentNode().getParentNode();
        boolean overWrittenName=false;
        for (        ICompNamesPairPO pair : execTC.getCompNamesPairs()) {
          if (pair.getFirstName().equals(cap.getComponentName()) && pair.getSecondName() != null && !pair.getSecondName().equals(cap.getComponentName())) {
            overWrittenName=true;
            break;
          }
        }
        checkNode(aut,locale,cap,toolTip,overWrittenName);
      }
    }
    if (node instanceof ITestJobPO) {
      if (!isTestJobGuiValid((ITestJobPO)node)) {
        addMessage(toolTip,Messages.TestDataDecoratorTestJobIncompl);
      }
    }
 else     if (node instanceof IRefTestSuitePO) {
      if (!isRefTestSuiteGuiValid((IRefTestSuitePO)node)) {
        addMessage(toolTip,Messages.TestDataDecoratorRefTsIncompl);
      }
    }
    if (toolTip.length() == 0) {
      return super.getToolTipText(node);
    }
  }
  return toolTip.length() > 0 ? toolTip.toString() : null;
}","/** 
 * creates the ToolTip Text
 * @param node GuiNode
 * @return String
 */
private String createToolTipText(INodePO node){
  StringBuilder toolTip=new StringBuilder();
  final WorkingLanguageBP workLangBP=WorkingLanguageBP.getInstance();
  Locale locale=workLangBP.getWorkingLanguage();
  ITestSuitePO testSuite=UINodeBP.getTestSuiteOfNode(node);
  if (node != null && isNodeActive(node)) {
    if (testSuite != null) {
      IAUTMainPO aut=testSuite.getAut();
      if (node instanceof ITestSuitePO) {
        if (testSuite.getAut() != null && !workLangBP.isTestSuiteLanguage(locale,testSuite)) {
          toolTip.append(Constants.BULLET).append(Messages.TestDataDecoratorUnsupportedAUTLanguage);
        }
 else {
          checkNode(testSuite,aut,locale,toolTip);
        }
      }
 else       if (node instanceof IExecTestCasePO) {
        checkNode((IExecTestCasePO)node,aut,locale,toolTip);
      }
 else       if (node instanceof ICapPO) {
        ICapPO cap=(ICapPO)node;
        IExecTestCasePO execTC=(IExecTestCasePO)node.getParentNode().getParentNode();
        boolean overWrittenName=false;
        for (        ICompNamesPairPO pair : execTC.getCompNamesPairs()) {
          if (pair.getFirstName().equals(cap.getComponentName()) && pair.getSecondName() != null && !pair.getSecondName().equals(cap.getComponentName())) {
            overWrittenName=true;
            break;
          }
        }
        checkNode(aut,locale,cap,toolTip,overWrittenName);
      }
    }
    if (node instanceof ITestJobPO) {
      if (!isTestJobGuiValid((ITestJobPO)node)) {
        addMessage(toolTip,Messages.TestDataDecoratorTestJobIncompl);
      }
    }
 else     if (node instanceof IRefTestSuitePO) {
      if (!isRefTestSuiteGuiValid((IRefTestSuitePO)node)) {
        addMessage(toolTip,Messages.TestDataDecoratorRefTsIncompl);
      }
    }
    if (toolTip.length() == 0) {
      return super.getToolTipText(node);
    }
  }
  return toolTip.length() > 0 ? toolTip.toString() : null;
}",0.8401202514348183
96240,"/** 
 * {@inheritDoc} 
 */
public String getToolTipText(Object element){
  if (element instanceof INodePO) {
    return createToolTipText((INodePO)element);
  }
  if (element instanceof ITestSuitePO) {
    StringBuilder toolTip=new StringBuilder();
    ITestSuitePO testSuite=(ITestSuitePO)element;
    final WorkingLanguageBP workLangBP=WorkingLanguageBP.getInstance();
    Locale locale=workLangBP.getWorkingLanguage();
    IAUTMainPO aut=testSuite.getAut();
    if (testSuite.getAut() != null && !workLangBP.isTestSuiteLanguage(locale,testSuite)) {
      toolTip.append(Constants.BULLET).append(Messages.TestDataDecoratorUnsupportedAUTLanguage);
    }
 else {
      checkNode(testSuite,aut,locale,toolTip);
    }
    return toolTip.toString();
  }
  return super.getToolTipText(element);
}","/** 
 * {@inheritDoc} 
 */
public String getToolTipText(Object element){
  if (element instanceof INodePO) {
    return createToolTipText((INodePO)element);
  }
  return super.getToolTipText(element);
}",0.3460764587525151
96241,"/** 
 * Opens the server preference page
 */
protected void openServerPrefPage(){
  PreferenceDialog dialog=PreferencesUtil.createPreferenceDialogOn(null,Constants.JB_PREF_PAGE_AUTAGENT,null,null);
  DialogUtils.setWidgetNameForModalDialog(dialog);
  dialog.open();
  m_listOfServers=ServerManager.getInstance();
  String oldServer=m_serverCombo.getText();
  fillServerCombo();
  m_serverCombo.setText(oldServer);
}","/** 
 * Opens the server preference page
 */
protected void openServerPrefPage(){
  PreferenceDialog dialog=PreferencesUtil.createPreferenceDialogOn(getShell(),Constants.JB_PREF_PAGE_AUTAGENT,null,null);
  DialogUtils.setWidgetNameForModalDialog(dialog);
  dialog.open();
  m_listOfServers=ServerManager.getInstance();
  String oldServer=m_serverCombo.getText();
  fillServerCombo();
  m_serverCombo.setText(oldServer);
}",0.9832535885167464
96242,"/** 
 * Tries to select the given node in the given TreeViewer.
 * @param po The po to select
 * @param tv the TreeViewer
 */
public static void selectNodeInTree(IPersistentObject po,TreeViewer tv){
  ISelection oldSelection=tv.getSelection();
  if (po != null) {
    tv.refresh();
    tv.expandToLevel(po,0);
    tv.reveal(po);
    StructuredSelection newSelection=new StructuredSelection(po);
    tv.setSelection(newSelection);
    InteractionEventDispatcher.getDefault().fireProgammableSelectionEvent(newSelection);
  }
 else {
    tv.setSelection(oldSelection);
  }
}","/** 
 * Tries to select the given node in the given TreeViewer.
 * @param o The Object to select
 * @param tv the TreeViewer
 */
public static void selectNodeInTree(Object o,AbstractTreeViewer tv){
  ISelection oldSelection=tv.getSelection();
  if (o != null) {
    tv.refresh();
    tv.expandToLevel(o,0);
    tv.reveal(o);
    StructuredSelection newSelection=new StructuredSelection(o);
    tv.setSelection(newSelection);
    InteractionEventDispatcher.getDefault().fireProgammableSelectionEvent(newSelection);
  }
 else {
    tv.setSelection(oldSelection);
  }
}",0.8337730870712401
96243,"public void run(){
  TreeViewer tv=getActiveTreeViewer();
  tv.expandToLevel(node,0);
  tv.expandToLevel(node,0);
  StructuredSelection newSel=new StructuredSelection(node);
  tv.setSelection(newSel,true);
}","public void run(){
  UINodeBP.selectNodeInTree(node,getActiveTreeViewer());
}",0.3591549295774648
96244,"/** 
 * @param queryString queryString
 * @param caseSensitive caseSensitive
 * @param useRegex useRegex
 * @param wrapSearch wrapSearch
 * @param forward forward
 * @param nodeToStart the node to start the search; may be null --> root is used as search start point
 * @param monitor the progress monitor to use to communicate progress
 * @return boolean
 */
private boolean find(String queryString,boolean caseSensitive,boolean useRegex,boolean wrapSearch,boolean forward,Object nodeToStart,IProgressMonitor monitor){
  final Object node=findGuiNode(queryString,caseSensitive,useRegex,wrapSearch,forward,nodeToStart,monitor);
  if (node != null) {
    Plugin.getDisplay().syncExec(new Runnable(){
      public void run(){
        TreeViewer tv=getActiveTreeViewer();
        tv.expandToLevel(node,0);
        tv.expandToLevel(node,0);
        StructuredSelection newSel=new StructuredSelection(node);
        tv.setSelection(newSel,true);
      }
    }
);
    return true;
  }
  return false;
}","/** 
 * @param queryString queryString
 * @param caseSensitive caseSensitive
 * @param useRegex useRegex
 * @param wrapSearch wrapSearch
 * @param forward forward
 * @param nodeToStart the node to start the search; may be null --> root is used as search start point
 * @param monitor the progress monitor to use to communicate progress
 * @return boolean
 */
private boolean find(String queryString,boolean caseSensitive,boolean useRegex,boolean wrapSearch,boolean forward,Object nodeToStart,IProgressMonitor monitor){
  final Object node=findGuiNode(queryString,caseSensitive,useRegex,wrapSearch,forward,nodeToStart,monitor);
  if (node != null) {
    Plugin.getDisplay().syncExec(new Runnable(){
      public void run(){
        UINodeBP.selectNodeInTree(node,getActiveTreeViewer());
      }
    }
);
    return true;
  }
  return false;
}",0.8485838779956427
96245,"/** 
 * {@inheritDoc}
 * @param parentElement Object
 * @return object array
 */
public Object[] getChildren(Object parentElement){
  if (parentElement instanceof IExecTestCasePO) {
    ISpecTestCasePO referencedTestCase=((IExecTestCasePO)parentElement).getSpecTestCase();
    if (referencedTestCase != null) {
      return ArrayUtils.addAll(Collections.unmodifiableCollection(referencedTestCase.getAllEventEventExecTC()).toArray(),referencedTestCase.getUnmodifiableNodeList().toArray());
    }
    return ArrayUtils.EMPTY_OBJECT_ARRAY;
  }
  if (parentElement instanceof IProjectPO) {
    IProjectPO project=(IProjectPO)parentElement;
    List<Object> elements=new ArrayList<Object>();
    elements.addAll(project.getSpecObjCont().getSpecObjList());
    elements.addAll(project.getUsedProjects());
    return elements.toArray();
  }
  if (parentElement instanceof INodePO) {
    INodePO parentNode=((INodePO)parentElement);
    Object[] children=parentNode.getUnmodifiableNodeList().toArray();
    if (parentElement instanceof ISpecTestCasePO) {
      children=ArrayUtils.addAll(Collections.unmodifiableCollection(((ISpecTestCasePO)parentElement).getAllEventEventExecTC()).toArray(),children);
    }
    return children;
  }
  if (parentElement instanceof IReusedProjectPO) {
    try {
      IProjectPO reusedProject=ProjectPM.loadReusedProjectInMasterSession((IReusedProjectPO)parentElement);
      if (reusedProject != null) {
        return reusedProject.getSpecObjCont().getSpecObjList().toArray();
      }
      return ArrayUtils.EMPTY_OBJECT_ARRAY;
    }
 catch (    JBException e) {
      Utils.createMessageDialog(e,null,null);
      return ArrayUtils.EMPTY_OBJECT_ARRAY;
    }
  }
  return ArrayUtils.EMPTY_OBJECT_ARRAY;
}","/** 
 * {@inheritDoc}
 * @param parentElement Object
 * @return object array
 */
public Object[] getChildren(Object parentElement){
  if (parentElement instanceof IProjectPO[]) {
    return new Object[]{((IProjectPO[])parentElement)[0]};
  }
  if (parentElement instanceof IProjectPO) {
    IProjectPO project=(IProjectPO)parentElement;
    List<Object> elements=new ArrayList<Object>();
    elements.addAll(project.getSpecObjCont().getSpecObjList());
    elements.addAll(project.getUsedProjects());
    return elements.toArray();
  }
  if (parentElement instanceof IExecTestCasePO) {
    ISpecTestCasePO referencedTestCase=((IExecTestCasePO)parentElement).getSpecTestCase();
    if (referencedTestCase != null) {
      return ArrayUtils.addAll(Collections.unmodifiableCollection(referencedTestCase.getAllEventEventExecTC()).toArray(),referencedTestCase.getUnmodifiableNodeList().toArray());
    }
    return ArrayUtils.EMPTY_OBJECT_ARRAY;
  }
  if (parentElement instanceof INodePO) {
    INodePO parentNode=((INodePO)parentElement);
    Object[] children=parentNode.getUnmodifiableNodeList().toArray();
    if (parentElement instanceof ISpecTestCasePO) {
      children=ArrayUtils.addAll(Collections.unmodifiableCollection(((ISpecTestCasePO)parentElement).getAllEventEventExecTC()).toArray(),children);
    }
    return children;
  }
  if (parentElement instanceof IReusedProjectPO) {
    try {
      IProjectPO reusedProject=ProjectPM.loadReusedProjectInMasterSession((IReusedProjectPO)parentElement);
      if (reusedProject != null) {
        return reusedProject.getSpecObjCont().getSpecObjList().toArray();
      }
      return ArrayUtils.EMPTY_OBJECT_ARRAY;
    }
 catch (    JBException e) {
      Utils.createMessageDialog(e,null,null);
      return ArrayUtils.EMPTY_OBJECT_ARRAY;
    }
  }
  return ArrayUtils.EMPTY_OBJECT_ARRAY;
}",0.7951874650251819
96246,"/** 
 * {@inheritDoc}
 */
public Object[] getChildren(Object parentElement){
  if (parentElement instanceof ICategoryPO) {
    return ((ICategoryPO)parentElement).getUnmodifiableNodeList().toArray();
  }
  if (parentElement instanceof IReusedProjectPO) {
    try {
      IProjectPO reusedProject=ProjectPM.loadReusedProjectInMasterSession((IReusedProjectPO)parentElement);
      if (reusedProject != null) {
        return reusedProject.getSpecObjCont().getSpecObjList().toArray();
      }
      return ArrayUtils.EMPTY_OBJECT_ARRAY;
    }
 catch (    JBException e) {
      Utils.createMessageDialog(e,null,null);
      return ArrayUtils.EMPTY_OBJECT_ARRAY;
    }
  }
  return ArrayUtils.EMPTY_OBJECT_ARRAY;
}","/** 
 * {@inheritDoc}
 */
public Object[] getChildren(Object parentElement){
  if (parentElement instanceof IProjectPO) {
    IProjectPO project=(IProjectPO)parentElement;
    List<Object> elements=new ArrayList<Object>();
    elements.addAll(project.getSpecObjCont().getSpecObjList());
    elements.addAll(project.getUsedProjects());
    return elements.toArray();
  }
  if (parentElement instanceof ICategoryPO) {
    return ((ICategoryPO)parentElement).getUnmodifiableNodeList().toArray();
  }
  if (parentElement instanceof IReusedProjectPO) {
    try {
      IProjectPO reusedProject=ProjectPM.loadReusedProjectInMasterSession((IReusedProjectPO)parentElement);
      if (reusedProject != null) {
        return reusedProject.getSpecObjCont().getSpecObjList().toArray();
      }
      return ArrayUtils.EMPTY_OBJECT_ARRAY;
    }
 catch (    JBException e) {
      Utils.createMessageDialog(e,null,null);
      return ArrayUtils.EMPTY_OBJECT_ARRAY;
    }
  }
  return ArrayUtils.EMPTY_OBJECT_ARRAY;
}",0.8289550496205488
96247,"/** 
 * Renames a guiNode.
 * @param po The corresponding NodePO.
 */
protected void renameGUINode(IPersistentObject po){
  getMainTreeViewer().update(po,null);
  createPartName();
}","/** 
 * Renames a guiNode.
 * @param po The corresponding NodePO.
 */
protected void renameGUINode(IPersistentObject po){
  getMainTreeViewer().refresh(true);
  createPartName();
}",0.9392265193370166
96248,"@Override protected void renameGUINode(IPersistentObject po){
  super.renameGUINode(po);
  m_eventHandlerTreeViewer.update(po,null);
}","@Override protected void renameGUINode(IPersistentObject po){
  super.renameGUINode(po);
  m_eventHandlerTreeViewer.refresh(true);
}",0.9172932330827068
96249,"/** 
 * @param po The persistent object that was renamed
 */
private void handleDataRenamed(final IPersistentObject po){
  if ((po instanceof ISpecTestCasePO || po instanceof ICategoryPO || po instanceof IExecTestCasePO)) {
    getTreeViewer().update(po,null);
  }
}","/** 
 * @param po The persistent object that was renamed
 */
private void handleDataRenamed(final IPersistentObject po){
  if ((po instanceof ISpecTestCasePO || po instanceof ICategoryPO || po instanceof IExecTestCasePO)) {
    getTreeViewer().refresh(true);
  }
}",0.9547169811320756
96250,"/** 
 * @param po the PO
 * @param dataState the data state
 * @param updateState the update state
 */
private void handleDataChangedImpl(final IPersistentObject po,final DataState dataState,final UpdateState updateState){
  if (po instanceof IAUTMainPO) {
    getTreeViewer().refresh();
    return;
  }
  if (updateState == UpdateState.onlyInEditor) {
    return;
  }
switch (dataState) {
case Added:
    handleDataAdded(po);
  break;
case Deleted:
handleDataDeleted(po);
break;
case Renamed:
if (po instanceof IProjectPO || po instanceof ITestSuitePO || po instanceof ITestJobPO|| po instanceof ITestCasePO) {
getTreeViewer().update(po,null);
}
break;
case StructureModified:
if (po instanceof IProjectPO) {
handleProjectLoaded();
}
if ((po instanceof ISpecTestCasePO) || (po instanceof ITestSuitePO) || (po instanceof ITestJobPO)) {
Object[] expandedElements=getTreeViewer().getExpandedElements();
ISelection selection=getTreeViewer().getSelection();
getTreeViewer().refresh();
getTreeViewer().setExpandedElements(expandedElements);
getTreeViewer().setSelection(selection);
}
if (po instanceof IObjectMappingPO) {
getTreeViewer().refresh();
}
break;
default :
break;
}
}","/** 
 * @param po the PO
 * @param dataState the data state
 * @param updateState the update state
 */
private void handleDataChangedImpl(final IPersistentObject po,final DataState dataState,final UpdateState updateState){
  if (po instanceof IAUTMainPO) {
    getTreeViewer().refresh();
    return;
  }
  if (updateState == UpdateState.onlyInEditor) {
    return;
  }
switch (dataState) {
case Added:
    handleDataAdded(po);
  break;
case Deleted:
handleDataDeleted(po);
break;
case Renamed:
if (po instanceof IProjectPO || po instanceof ITestSuitePO || po instanceof ITestJobPO|| po instanceof ITestCasePO) {
getTreeViewer().refresh();
}
break;
case StructureModified:
if (po instanceof IProjectPO) {
handleProjectLoaded();
}
if ((po instanceof ISpecTestCasePO) || (po instanceof ITestSuitePO) || (po instanceof ITestJobPO)) {
Object[] expandedElements=getTreeViewer().getExpandedElements();
ISelection selection=getTreeViewer().getSelection();
getTreeViewer().refresh();
getTreeViewer().setExpandedElements(expandedElements);
getTreeViewer().setSelection(selection);
}
if (po instanceof IObjectMappingPO) {
getTreeViewer().refresh();
}
break;
default :
break;
}
}",0.9905982905982906
96251,"/** 
 * {@inheritDoc}
 * @param adapter the adapter to get
 * @return this TestCaseEditor instance if the adaper matches.
 */
public Object getAdapter(Class adapter){
  if (adapter == DisplayableLanguages.class) {
    return new DisplayableLanguages(GeneralStorage.getInstance().getProject().getLangHelper().getLanguageList());
  }
 else   if (adapter == this.getClass()) {
    return this;
  }
 else   if (adapter == NodeEditorInput.class) {
    return getEditorInput();
  }
  Object superAdapter=super.getAdapter(adapter);
  if (superAdapter != null) {
    return superAdapter;
  }
  return getEditorHelper().getAdapter(adapter);
}","/** 
 * {@inheritDoc}
 * @param adapter the adapter to get
 * @return this TestCaseEditor instance if the adaper matches.
 */
public Object getAdapter(Class adapter){
  if (adapter == this.getClass()) {
    return this;
  }
 else   if (adapter == NodeEditorInput.class) {
    return getEditorInput();
  }
  Object superAdapter=super.getAdapter(adapter);
  if (superAdapter != null) {
    return superAdapter;
  }
  return getEditorHelper().getAdapter(adapter);
}",0.8438356164383561
96252,"/** 
 * creates the TableColumns with languages
 * @param dataSetNumbers if true, the data set column is created, otherwisethe parameter column.
 */
private void initTableViewerLanguageColumns(boolean dataSetNumbers){
  if (getParamInterfaceObj() == null) {
    return;
  }
  DisplayableLanguages langs=(DisplayableLanguages)m_currentPart.getAdapter(DisplayableLanguages.class);
  if (langs == null) {
    setParamInterfaceObj(null);
    updateView();
    return;
  }
  List<Locale> locales=langs.getLocales();
  String[] columnProperties=new String[locales.size() + 1];
  final Table table=getTable();
  if (dataSetNumbers) {
    columnProperties[0]=initDataSetColumn();
  }
 else {
    columnProperties[0]=initParameterColumn();
  }
  int i=1;
  List<String> dispList=new ArrayList<String>();
  for (  Locale locale : locales) {
    dispList.add(locale.getDisplayName());
  }
  String[] dispNames=dispList.toArray(new String[dispList.size()]);
  Arrays.sort(dispNames);
  for (  String lang : dispNames) {
    TableColumn column=new TableColumn(table,SWT.NONE);
    column.setText(lang);
    column.setWidth(COLUMN_WIDTH);
    column.setData(Languages.getInstance().getLocale(lang));
    columnProperties[i++]=column.getText();
  }
  getTableViewer().setColumnProperties(columnProperties);
}","/** 
 * creates the TableColumns with languages
 * @param dataSetNumbers if true, the data set column is created, otherwisethe parameter column.
 */
private void initTableViewerLanguageColumns(boolean dataSetNumbers){
  if (getParamInterfaceObj() == null) {
    return;
  }
  List<Locale> locales=WorkingLanguageBP.getInstance().getDisplayableLanguages();
  String[] columnProperties=new String[locales.size() + 1];
  final Table table=getTable();
  if (dataSetNumbers) {
    columnProperties[0]=initDataSetColumn();
  }
 else {
    columnProperties[0]=initParameterColumn();
  }
  int i=1;
  List<String> dispList=new ArrayList<String>();
  for (  Locale locale : locales) {
    dispList.add(locale.getDisplayName());
  }
  String[] dispNames=dispList.toArray(new String[dispList.size()]);
  Arrays.sort(dispNames);
  for (  String lang : dispNames) {
    TableColumn column=new TableColumn(table,SWT.NONE);
    column.setText(lang);
    column.setWidth(COLUMN_WIDTH);
    column.setData(Languages.getInstance().getLocale(lang));
    columnProperties[i++]=column.getText();
  }
  getTableViewer().setColumnProperties(columnProperties);
}",0.8901686548745372
96253,"/** 
 * Fills the Language-Combo with its values displayed.
 */
private void fillLanguageCombo(){
  List<Locale> langList=new ArrayList<Locale>(0);
  if (getParamInterfaceObj() != null && m_currentPart != null) {
    DisplayableLanguages languages=(DisplayableLanguages)m_currentPart.getAdapter(DisplayableLanguages.class);
    if (languages != null) {
      langList=languages.getLocales();
    }
  }
  List<String> dispList=new ArrayList<String>();
  for (  Locale locale : langList) {
    dispList.add(locale.getDisplayName());
  }
  String[] dispNames=dispList.toArray(new String[dispList.size()]);
  Arrays.sort(dispNames);
  final int listSize=langList.size();
  List<String> keys=new ArrayList<String>(listSize);
  List<Locale> values=new ArrayList<Locale>(listSize);
  for (  String lang : dispNames) {
    values.add(Languages.getInstance().getLocale(lang));
    keys.add(lang);
  }
  getLanguageCombo().setItems(values,keys);
}","/** 
 * Fills the Language-Combo with its values displayed.
 */
private void fillLanguageCombo(){
  List<Locale> langList=WorkingLanguageBP.getInstance().getDisplayableLanguages();
  List<String> dispList=new ArrayList<String>();
  for (  Locale locale : langList) {
    dispList.add(locale.getDisplayName());
  }
  String[] dispNames=dispList.toArray(new String[dispList.size()]);
  Arrays.sort(dispNames);
  final int listSize=langList.size();
  List<String> keys=new ArrayList<String>(listSize);
  List<Locale> values=new ArrayList<Locale>(listSize);
  for (  String lang : dispNames) {
    values.add(Languages.getInstance().getLocale(lang));
    keys.add(lang);
  }
  getLanguageCombo().setItems(values,keys);
}",0.8009679370840895
96254,"/** 
 * @param root the root of the TreeViewer.
 */
protected void initTopTreeViewer(INodePO root){
  try {
    getMainTreeViewer().getTree().setRedraw(false);
    getMainTreeViewer().setInput(null);
    getMainTreeViewer().setInput(new INodePO[]{root});
  }
  finally {
    getMainTreeViewer().getTree().setRedraw(true);
    getMainTreeViewer().expandAll();
  }
}","/** 
 * @param root the root of the TreeViewer.
 */
protected void initTopTreeViewer(INodePO root){
  try {
    getMainTreeViewer().getTree().setRedraw(false);
    getMainTreeViewer().setInput(null);
    getMainTreeViewer().setInput(new INodePO[]{root});
  }
  finally {
    getMainTreeViewer().getTree().setRedraw(true);
    getMainTreeViewer().expandAll();
    getMainTreeViewer().setSelection(new StructuredSelection(root));
  }
}",0.9134253450439148
96255,"/** 
 * Sets the input of the tree viewer for specificaion.
 */
public void setInitialInput(){
  getMainTreeViewer().setContentProvider(new TestSuiteEditorContentProvider());
  ITestSuitePO rootPO=(ITestSuitePO)getEditorHelper().getEditSupport().getWorkVersion();
  try {
    getTreeViewer().getTree().setRedraw(false);
    getTreeViewer().setInput(new ITestSuitePO[]{rootPO});
  }
  finally {
    getTreeViewer().getTree().setRedraw(true);
    getMainTreeViewer().expandAll();
  }
}","/** 
 * Sets the input of the tree viewer for specificaion.
 */
public void setInitialInput(){
  getMainTreeViewer().setContentProvider(new TestSuiteEditorContentProvider());
  ITestSuitePO rootPO=(ITestSuitePO)getEditorHelper().getEditSupport().getWorkVersion();
  try {
    getTreeViewer().getTree().setRedraw(false);
    getTreeViewer().setInput(new ITestSuitePO[]{rootPO});
  }
  finally {
    getTreeViewer().getTree().setRedraw(true);
    getMainTreeViewer().expandAll();
    getMainTreeViewer().setSelection(new StructuredSelection(rootPO));
  }
}",0.9315332690453232
96256,"/** 
 * {@inheritDoc}
 */
public Object execute(ExecutionEvent event){
  TestCaseBrowser testSpecTreeView=(TestCaseBrowser)Plugin.getView(Constants.TC_BROWSER_ID);
  if (testSpecTreeView == null) {
    return null;
  }
  if (!(testSpecTreeView.getTreeViewer().getSelection() instanceof IStructuredSelection)) {
    return null;
  }
  IStructuredSelection selection=(IStructuredSelection)testSpecTreeView.getTreeViewer().getSelection();
  Iterator iter=selection.iterator();
  while (iter.hasNext()) {
    INodePO selectedNode=(INodePO)iter.next();
    INodePO editableNode=findEditableNode(selectedNode);
    if (editableNode == null) {
      return null;
    }
    TestCaseEditor editor=(TestCaseEditor)openEditor(editableNode);
    if (editor != null) {
      editor.setOpeningSelection(selectedNode);
    }
  }
  return null;
}","/** 
 * {@inheritDoc}
 */
public Object execute(ExecutionEvent event){
  TestCaseBrowser testSpecTreeView=(TestCaseBrowser)Plugin.getView(Constants.TC_BROWSER_ID);
  if (testSpecTreeView == null) {
    return null;
  }
  if (!(testSpecTreeView.getTreeViewer().getSelection() instanceof IStructuredSelection)) {
    return null;
  }
  IStructuredSelection selection=(IStructuredSelection)testSpecTreeView.getTreeViewer().getSelection();
  Iterator iter=selection.iterator();
  while (iter.hasNext()) {
    INodePO selectedNode=(INodePO)iter.next();
    INodePO editableNode=findEditableNode(selectedNode);
    if (editableNode == null) {
      return null;
    }
    openEditor(editableNode);
  }
  return null;
}",0.9014267185473412
96257,"/** 
 * {@inheritDoc}
 */
public Object execute(ExecutionEvent event){
  TestSuiteBrowser testExecTreeView=(TestSuiteBrowser)Plugin.getView(Constants.TS_BROWSER_ID);
  if (testExecTreeView == null) {
    return null;
  }
  if (!(testExecTreeView.getTreeViewer().getSelection() instanceof IStructuredSelection)) {
    return null;
  }
  IStructuredSelection selection=(IStructuredSelection)testExecTreeView.getTreeViewer().getSelection();
  Iterator iter=selection.iterator();
  while (iter.hasNext()) {
    INodePO selectedNode=(INodePO)iter.next();
    INodePO editableNode=findEditableNode(selectedNode);
    if (editableNode == null) {
      return null;
    }
    TestSuiteEditor editor=(TestSuiteEditor)openEditor(editableNode);
    if (editor != null) {
      editor.setOpeningSelection(selectedNode);
    }
  }
  return null;
}","/** 
 * {@inheritDoc}
 */
public Object execute(ExecutionEvent event){
  TestSuiteBrowser testExecTreeView=(TestSuiteBrowser)Plugin.getView(Constants.TS_BROWSER_ID);
  if (testExecTreeView == null) {
    return null;
  }
  if (!(testExecTreeView.getTreeViewer().getSelection() instanceof IStructuredSelection)) {
    return null;
  }
  IStructuredSelection selection=(IStructuredSelection)testExecTreeView.getTreeViewer().getSelection();
  Iterator iter=selection.iterator();
  while (iter.hasNext()) {
    INodePO selectedNode=(INodePO)iter.next();
    INodePO editableNode=findEditableNode(selectedNode);
    if (editableNode == null) {
      return null;
    }
    openEditor(editableNode);
  }
  return null;
}",0.9056847545219638
96258,"/** 
 * @param gdObject the SpecTestCAsePO
 * @return resolutions for use of a deprecated component or action.
 */
private IMarkerResolution[] getDeprecatedActionOrComponentResolutions(final Object gdObject){
  return new IMarkerResolution[]{new IMarkerResolution(){
    public String getLabel(){
      return Messages.GDProblemViewOpenTestCaseEditor;
    }
    public void run(    IMarker marker){
      final ITreeNodeOperation<INodePO> op=new ITreeNodeOperation<INodePO>(){
        public boolean operate(        ITreeTraverserContext<INodePO> ctx,        INodePO parent,        INodePO node,        boolean alreadyVisited){
          if (node.toString().equals(gdObject.toString())) {
            ctx.setContinued(false);
            INodePO selectedNode=node;
            INodePO editableNode=node.getParentNode();
            if (editableNode == null) {
              return true;
            }
            TestCaseEditor editor=(TestCaseEditor)AbstractOpenHandler.openEditor(editableNode);
            if (editor != null) {
              editor.setOpeningSelection(selectedNode);
            }
          }
          return true;
        }
        public void postOperate(        ITreeTraverserContext<INodePO> ctx,        INodePO parent,        INodePO node,        boolean alreadyVisited){
        }
      }
;
      TreeTraverser traverser=new SpecTreeTraverser(GeneralStorage.getInstance().getProject(),op);
      traverser.traverse();
    }
  }
};
}","/** 
 * @param gdObject the SpecTestCAsePO
 * @return resolutions for use of a deprecated component or action.
 */
private IMarkerResolution[] getDeprecatedActionOrComponentResolutions(final Object gdObject){
  return new IMarkerResolution[]{new IMarkerResolution(){
    public String getLabel(){
      return Messages.GDProblemViewOpenTestCaseEditor;
    }
    public void run(    IMarker marker){
      final ITreeNodeOperation<INodePO> op=new ITreeNodeOperation<INodePO>(){
        public boolean operate(        ITreeTraverserContext<INodePO> ctx,        INodePO parent,        INodePO node,        boolean alreadyVisited){
          if (node.toString().equals(gdObject.toString())) {
            ctx.setContinued(false);
            INodePO selectedNode=node;
            INodePO editableNode=node.getParentNode();
            if (editableNode == null) {
              return true;
            }
            AbstractOpenHandler.openEditor(editableNode);
          }
          return true;
        }
        public void postOperate(        ITreeTraverserContext<INodePO> ctx,        INodePO parent,        INodePO node,        boolean alreadyVisited){
        }
      }
;
      TreeTraverser traverser=new SpecTreeTraverser(GeneralStorage.getInstance().getProject(),op);
      traverser.traverse();
    }
  }
};
}",0.9315561959654178
96259,"public boolean operate(ITreeTraverserContext<INodePO> ctx,INodePO parent,INodePO node,boolean alreadyVisited){
  if (node.toString().equals(gdObject.toString())) {
    ctx.setContinued(false);
    INodePO selectedNode=node;
    INodePO editableNode=node.getParentNode();
    if (editableNode == null) {
      return true;
    }
    TestCaseEditor editor=(TestCaseEditor)AbstractOpenHandler.openEditor(editableNode);
    if (editor != null) {
      editor.setOpeningSelection(selectedNode);
    }
  }
  return true;
}","public boolean operate(ITreeTraverserContext<INodePO> ctx,INodePO parent,INodePO node,boolean alreadyVisited){
  if (node.toString().equals(gdObject.toString())) {
    ctx.setContinued(false);
    INodePO selectedNode=node;
    INodePO editableNode=node.getParentNode();
    if (editableNode == null) {
      return true;
    }
    AbstractOpenHandler.openEditor(editableNode);
  }
  return true;
}",0.7549234135667396
96260,"/** 
 * {@inheritDoc}
 * @param parentElement Object
 * @return object array
 */
public Object[] getChildren(Object parentElement){
  if (parentElement instanceof IExecTestCasePO) {
    ISpecTestCasePO referencedTestCase=((IExecTestCasePO)parentElement).getSpecTestCase();
    if (referencedTestCase != null) {
      return referencedTestCase.getUnmodifiableNodeList().toArray();
    }
    return ArrayUtils.EMPTY_OBJECT_ARRAY;
  }
  if (parentElement instanceof IProjectPO) {
    IProjectPO project=(IProjectPO)parentElement;
    List<Object> elements=new ArrayList<Object>();
    elements.addAll(project.getSpecObjCont().getSpecObjList());
    elements.addAll(project.getUsedProjects());
    return elements.toArray();
  }
  if (parentElement instanceof INodePO) {
    return ((INodePO)parentElement).getUnmodifiableNodeList().toArray();
  }
  if (parentElement instanceof IReusedProjectPO) {
    try {
      IProjectPO reusedProject=ProjectPM.loadReusedProjectInMasterSession((IReusedProjectPO)parentElement);
      if (reusedProject != null) {
        return reusedProject.getSpecObjCont().getSpecObjList().toArray();
      }
      return ArrayUtils.EMPTY_OBJECT_ARRAY;
    }
 catch (    JBException e) {
      Utils.createMessageDialog(e,null,null);
      return ArrayUtils.EMPTY_OBJECT_ARRAY;
    }
  }
  return ArrayUtils.EMPTY_OBJECT_ARRAY;
}","/** 
 * {@inheritDoc}
 * @param parentElement Object
 * @return object array
 */
public Object[] getChildren(Object parentElement){
  if (parentElement instanceof IExecTestCasePO) {
    ISpecTestCasePO referencedTestCase=((IExecTestCasePO)parentElement).getSpecTestCase();
    if (referencedTestCase != null) {
      return ArrayUtils.addAll(Collections.unmodifiableCollection(referencedTestCase.getAllEventEventExecTC()).toArray(),referencedTestCase.getUnmodifiableNodeList().toArray());
    }
    return ArrayUtils.EMPTY_OBJECT_ARRAY;
  }
  if (parentElement instanceof IProjectPO) {
    IProjectPO project=(IProjectPO)parentElement;
    List<Object> elements=new ArrayList<Object>();
    elements.addAll(project.getSpecObjCont().getSpecObjList());
    elements.addAll(project.getUsedProjects());
    return elements.toArray();
  }
  if (parentElement instanceof INodePO) {
    INodePO parentNode=((INodePO)parentElement);
    Object[] children=parentNode.getUnmodifiableNodeList().toArray();
    if (parentElement instanceof ISpecTestCasePO) {
      children=ArrayUtils.addAll(Collections.unmodifiableCollection(((ISpecTestCasePO)parentElement).getAllEventEventExecTC()).toArray(),children);
    }
    return children;
  }
  if (parentElement instanceof IReusedProjectPO) {
    try {
      IProjectPO reusedProject=ProjectPM.loadReusedProjectInMasterSession((IReusedProjectPO)parentElement);
      if (reusedProject != null) {
        return reusedProject.getSpecObjCont().getSpecObjList().toArray();
      }
      return ArrayUtils.EMPTY_OBJECT_ARRAY;
    }
 catch (    JBException e) {
      Utils.createMessageDialog(e,null,null);
      return ArrayUtils.EMPTY_OBJECT_ARRAY;
    }
  }
  return ArrayUtils.EMPTY_OBJECT_ARRAY;
}",0.8131083711875405
96261,"/** 
 * @param parentElement Object
 * @return object array
 */
public Object[] getChildren(Object parentElement){
  if (parentElement instanceof IProjectPO) {
    IProjectPO project=(IProjectPO)parentElement;
    return new Object[]{project.getTestJobCont(),project.getTestSuiteCont()};
  }
  if (parentElement instanceof IExecTestCasePO) {
    ISpecTestCasePO referencedTestCase=((IExecTestCasePO)parentElement).getSpecTestCase();
    if (referencedTestCase != null) {
      return referencedTestCase.getUnmodifiableNodeList().toArray();
    }
    return ArrayUtils.EMPTY_OBJECT_ARRAY;
  }
  if (parentElement instanceof ITestSuitePO) {
    ITestSuitePO testSuite=(ITestSuitePO)parentElement;
    Locale workLang=WorkingLanguageBP.getInstance().getWorkingLanguage();
    if (testSuite.getAut() != null && !WorkingLanguageBP.getInstance().isTestSuiteLanguage(workLang,testSuite)) {
      return new Object[0];
    }
  }
  if (parentElement instanceof INodePO) {
    return ((INodePO)parentElement).getUnmodifiableNodeList().toArray();
  }
  if (parentElement instanceof ITestSuiteContPO) {
    return ((ITestSuiteContPO)parentElement).getTestSuiteList().toArray();
  }
  if (parentElement instanceof ITestJobContPO) {
    return ((ITestJobContPO)parentElement).getTestJobList().toArray();
  }
  LOG.error(""String_Node_Str"" + parentElement);
  return ArrayUtils.EMPTY_OBJECT_ARRAY;
}","/** 
 * @param parentElement Object
 * @return object array
 */
public Object[] getChildren(Object parentElement){
  if (parentElement instanceof IProjectPO) {
    IProjectPO project=(IProjectPO)parentElement;
    return new Object[]{project.getTestJobCont(),project.getTestSuiteCont()};
  }
  if (parentElement instanceof IExecTestCasePO) {
    ISpecTestCasePO referencedTestCase=((IExecTestCasePO)parentElement).getSpecTestCase();
    if (referencedTestCase != null) {
      return ArrayUtils.addAll(Collections.unmodifiableCollection(referencedTestCase.getAllEventEventExecTC()).toArray(),referencedTestCase.getUnmodifiableNodeList().toArray());
    }
    return ArrayUtils.EMPTY_OBJECT_ARRAY;
  }
  if (parentElement instanceof ITestSuitePO) {
    ITestSuitePO testSuite=(ITestSuitePO)parentElement;
    Locale workLang=WorkingLanguageBP.getInstance().getWorkingLanguage();
    if (testSuite.getAut() != null && !WorkingLanguageBP.getInstance().isTestSuiteLanguage(workLang,testSuite)) {
      return new Object[0];
    }
  }
  if (parentElement instanceof INodePO) {
    return ((INodePO)parentElement).getUnmodifiableNodeList().toArray();
  }
  if (parentElement instanceof ITestSuiteContPO) {
    return ((ITestSuiteContPO)parentElement).getTestSuiteList().toArray();
  }
  if (parentElement instanceof ITestJobContPO) {
    return ((ITestJobContPO)parentElement).getTestJobList().toArray();
  }
  LOG.error(""String_Node_Str"" + parentElement);
  return ArrayUtils.EMPTY_OBJECT_ARRAY;
}",0.9558260869565216
96262,"/** 
 * Creates a KeyStroke of the given keyStrokeSpec
 * @param keyStrokeSpec see {@link KeyStroke#getKeyStroke(String)}
 * @return a KeyStroke.
 * @throws RobotException if no KeyStroke can be created.
 */
private KeyStroke getKeyStroke(String keyStrokeSpec) throws RobotException {
  KeyStroke keyStroke;
  if (keyStrokeSpec.length() == 1) {
    keyStroke=KeyStroke.getKeyStroke(keyStrokeSpec.charAt(0));
  }
 else {
    keyStroke=KeyStroke.getKeyStroke(keyStrokeSpec);
  }
  if (keyStroke == null) {
    final String msg=""String_Node_Str"" + keyStrokeSpec + ""String_Node_Str"";
    if (log.isWarnEnabled()) {
      log.warn(msg);
    }
    throw new RobotException(msg,EventFactory.createActionError(TestErrorEvent.INVALID_PARAM_VALUE));
  }
  return keyStroke;
}","/** 
 * Creates a KeyStroke of the given keyStrokeSpec
 * @param keyStrokeSpec see  {@link KeyStroke#getKeyStroke(String)} and{@link KeyStroke#getKeyStroke(Char)}
 * @return a KeyStroke.
 * @throws RobotException if no KeyStroke can be created.
 */
private KeyStroke getKeyStroke(String keyStrokeSpec) throws RobotException {
  KeyStroke keyStroke;
  if (keyStrokeSpec.length() == 1) {
    char singeKeyStrokeSpecChar=keyStrokeSpec.charAt(0);
    singeKeyStrokeSpecChar=getOSSspecificSpecBaseCharacter(singeKeyStrokeSpecChar);
    keyStroke=KeyStroke.getKeyStroke(singeKeyStrokeSpecChar);
  }
 else {
    int keyStrokeSpecSize=keyStrokeSpec.length();
    char keySpec=keyStrokeSpec.charAt(keyStrokeSpecSize - 1);
    if ('�' != keySpec) {
      keySpec=Character.toUpperCase(keySpec);
    }
    String modifiedKeyStrokeSpec=keyStrokeSpec.substring(0,keyStrokeSpecSize - 1) + keySpec;
    keyStroke=KeyStroke.getKeyStroke(modifiedKeyStrokeSpec);
  }
  if (keyStroke == null) {
    final String msg=""String_Node_Str"" + keyStrokeSpec + ""String_Node_Str"";
    if (log.isWarnEnabled()) {
      log.warn(msg);
    }
    throw new RobotException(msg,EventFactory.createActionError(TestErrorEvent.INVALID_PARAM_VALUE));
  }
  return keyStroke;
}",0.6963036963036963
96263,"/** 
 * @param keyStrokeSpec String representing the key for which a key typer should be returned. 
 * @return a key typer capable of generating the necessaryevent to simulate the base key of the given key stroke spec.
 */
private static AbstractKeyTyper getBaseKeyTyper(String keyStrokeSpec){
  String[] specElements=keyStrokeSpec.split(""String_Node_Str"");
  String baseKey=specElements[specElements.length - 1];
  int code=SwtKeyCodeConverter.getKeyCode(baseKey);
  if (code == -1) {
    return new KeyCharTyper(SwtKeyCodeConverter.getKeyChar(baseKey).charValue());
  }
  return new KeyCodeTyper(code);
}","/** 
 * @param keyStrokeSpec String representing the key for which a key typer should be returned. 
 * @return a key typer capable of generating the necessaryevent to simulate the base key of the given key stroke spec.
 */
private static AbstractKeyTyper getBaseKeyTyper(String keyStrokeSpec){
  String[] specElements=keyStrokeSpec.split(""String_Node_Str"");
  String baseKey=specElements[specElements.length - 1];
  int code=SwtKeyCodeConverter.getKeyCode(baseKey);
  if (code == -1) {
    return new KeyCharTyper(getOSSspecificSpecBaseCharacter(SwtKeyCodeConverter.getKeyChar(baseKey).charValue()));
  }
  return new KeyCodeTyper(code);
}",0.9734939759036144
96264,"/** 
 * perform a keystroke
 * @param modifierSpec the string representation of the modifiers
 * @param keySpec the string representation of the key
 */
public void gdKeyStroke(String modifierSpec,String keySpec){
  if (keySpec == null || keySpec.trim().length() == 0) {
    throw new StepExecutionException(""String_Node_Str"",EventFactory.createActionError(TestErrorEvent.INVALID_PARAM_VALUE));
  }
  String key=StringConstants.EMPTY;
  if (""String_Node_Str"".equals(keySpec)) {
    key=keySpec;
  }
 else {
    key=keySpec.trim().toUpperCase();
  }
  String keyStrokeSpec=key;
  String mod=KeyStrokeUtil.getModifierString(modifierSpec);
  if (mod.length() > 0) {
    keyStrokeSpec=mod + ""String_Node_Str"" + keyStrokeSpec;
  }
  getRobot().keyStroke(keyStrokeSpec);
}","/** 
 * perform a keystroke
 * @param modifierSpec the string representation of the modifiers
 * @param keySpec the string representation of the key
 */
public void gdKeyStroke(String modifierSpec,String keySpec){
  if (keySpec == null || keySpec.trim().length() == 0) {
    throw new StepExecutionException(""String_Node_Str"",EventFactory.createActionError(TestErrorEvent.INVALID_PARAM_VALUE));
  }
  String keyStrokeSpec=keySpec.trim();
  String mod=KeyStrokeUtil.getModifierString(modifierSpec);
  if (mod.length() > 0) {
    keyStrokeSpec=mod + ""String_Node_Str"" + keyStrokeSpec;
  }
  getRobot().keyStroke(keyStrokeSpec);
}",0.6503948312993539
96265,"/** 
 * @param provider the provider
 */
protected void setImageProvider(ImageProvider provider){
  if (provider == null) {
    return;
  }
  final Image image=provider.getImage(m_viewer.getDisplay());
  Plugin.getDisplay().syncExec(new Runnable(){
    public void run(){
      if (image != null) {
        m_viewer.setImage(image);
      }
      disposeImage();
    }
  }
);
  this.m_provider=provider;
  this.m_image=image;
}","/** 
 * @param provider the provider
 */
protected void setImageProvider(ImageProvider provider){
  final Image image=provider.getImage(m_viewer.getDisplay());
  Plugin.getDisplay().syncExec(new Runnable(){
    public void run(){
      if (image != null) {
        m_viewer.setImage(image);
      }
 else {
        clear();
      }
    }
  }
);
  this.m_provider=provider;
  this.m_image=image;
}",0.8869987849331713
96266,"public void selectionChanged(IWorkbenchPart part,ISelection selection){
  disposeImage();
  m_viewer.redraw();
  handleSelection(selection);
}","public void selectionChanged(IWorkbenchPart part,ISelection selection){
  handleSelection(selection);
}",0.8408163265306122
96267,"/** 
 * @param provider the provider
 */
private void handleSelection(final ImageProvider provider){
  if (provider == null) {
    return;
  }
  final String jobName=Messages.UIJobLoadingImage;
  Job job=new Job(jobName){
    public IStatus run(    IProgressMonitor monitor){
      monitor.beginTask(jobName,IProgressMonitor.UNKNOWN);
      setImageProvider(provider);
      monitor.done();
      return Status.OK_STATUS;
    }
  }
;
  JobUtils.executeJob(job,null);
}","/** 
 * @param provider the provider
 */
private void handleSelection(final ImageProvider provider){
  final String jobName=Messages.UIJobLoadingImage;
  Job job=new Job(jobName){
    public IStatus run(    IProgressMonitor monitor){
      monitor.beginTask(jobName,IProgressMonitor.UNKNOWN);
      setImageProvider(provider);
      monitor.done();
      return Status.OK_STATUS;
    }
  }
;
  JobUtils.executeJob(job,null);
}",0.953020134228188
96268,"public void run(){
  if (image != null) {
    m_viewer.setImage(image);
  }
  disposeImage();
}","public void run(){
  if (image != null) {
    m_viewer.setImage(image);
  }
 else {
    clear();
  }
}",0.8629441624365483
96269,"/** 
 * {@inheritDoc}
 */
public void createPartControl(Composite parent){
  parent.setLayout(new FillLayout());
  m_viewer=new ImageViewer(parent,SWT.NONE);
  getSelectionService().addSelectionListener(m_selectionListener);
  handleSelection(getSelectionService().getSelection());
}","/** 
 * {@inheritDoc}
 */
public void createPartControl(Composite parent){
  parent.setLayout(new FillLayout());
  m_viewer=new ImageViewer(parent,SWT.NONE);
  getSelectionService().addSelectionListener(m_selectionListener);
  handleSelection(getSelectionService().getSelection());
  getSite().setSelectionProvider(this);
}",0.933993399339934
96270,"@Override protected void handleNodeAdded(INodePO addedNode){
  super.handleNodeAdded(addedNode);
  if (addedNode instanceof IEventExecTestCasePO) {
    GuiNodeBP.setSelectionAndFocusToNode(addedNode,m_eventHandlerTreeViewer);
  }
}","@Override protected void handleNodeAdded(INodePO addedNode){
  super.handleNodeAdded(addedNode);
  if (addedNode instanceof IEventExecTestCasePO) {
    UINodeBP.setSelectionAndFocusToNode(addedNode,m_eventHandlerTreeViewer);
  }
}",0.9891540130151844
96271,"/** 
 * {@inheritDoc}
 */
public void handleDataChanged(IPersistentObject po,DataState dataState,UpdateState updateState){
  if (po instanceof INodePO) {
    TreeViewer tv=getTreeViewer();
switch (dataState) {
case Added:
      INodePO addedNode=(INodePO)po;
    INodePO editorNode=(INodePO)getEditorHelper().getEditSupport().getWorkVersion();
  if (editorNode.indexOf(addedNode) > -1) {
    getTreeViewer().refresh();
    getTreeViewer().expandAll();
    GuiNodeBP.setSelectionAndFocusToNode(addedNode,tv);
  }
break;
case Deleted:
if (!(po instanceof IProjectPO)) {
getTreeViewer().refresh();
setFocus();
}
break;
case Renamed:
renameGUINode(po);
break;
case StructureModified:
if (!handleStructureModified(po)) {
return;
}
break;
case ReuseChanged:
break;
default :
Assert.notReached();
}
getEditorHelper().handleDataChanged(po,dataState,updateState);
}
}","/** 
 * {@inheritDoc}
 */
public void handleDataChanged(IPersistentObject po,DataState dataState,UpdateState updateState){
  if (po instanceof INodePO) {
    TreeViewer tv=getTreeViewer();
switch (dataState) {
case Added:
      INodePO addedNode=(INodePO)po;
    INodePO editorNode=(INodePO)getEditorHelper().getEditSupport().getWorkVersion();
  if (editorNode.indexOf(addedNode) > -1) {
    getTreeViewer().refresh();
    getTreeViewer().expandAll();
    UINodeBP.setSelectionAndFocusToNode(addedNode,tv);
  }
break;
case Deleted:
if (!(po instanceof IProjectPO)) {
getTreeViewer().refresh();
setFocus();
}
break;
case Renamed:
renameGUINode(po);
break;
case StructureModified:
if (!handleStructureModified(po)) {
return;
}
break;
case ReuseChanged:
break;
default :
Assert.notReached();
}
getEditorHelper().handleDataChanged(po,dataState,updateState);
}
}",0.9970845481049564
96272,"/** 
 * Creates a new TestSuite.
 */
public void newTestSuite(){
  InputDialog dialog=newTestSuitePopUp();
  if (dialog.getReturnCode() == Window.CANCEL) {
    return;
  }
  IProjectPO project=GeneralStorage.getInstance().getProject();
  try {
    ITestSuitePO testSuite=NodeMaker.createTestSuitePO(dialog.getName());
    setDefaultValuesToTestSuite(testSuite,project);
    AbstractCmdHandleChild cmd=NodePM.getCmdHandleChild(project,testSuite);
    NodePM.addAndPersistChildNode(project,testSuite,null,cmd);
    DataEventDispatcher.getInstance().fireDataChangedListener(testSuite,DataState.Added,UpdateState.all);
    InteractionEventDispatcher.getDefault().fireProgammableSelectionEvent(new StructuredSelection(testSuite));
  }
 catch (  PMException e) {
    PMExceptionHandler.handlePMExceptionForMasterSession(e);
  }
catch (  ProjectDeletedException e) {
    PMExceptionHandler.handleGDProjectDeletedException();
  }
}","/** 
 * Creates a new TestSuite.
 */
public void newTestSuite(){
  InputDialog dialog=newTestSuitePopUp();
  if (dialog.getReturnCode() == Window.CANCEL) {
    return;
  }
  IProjectPO project=GeneralStorage.getInstance().getProject();
  try {
    ITestSuitePO testSuite=NodeMaker.createTestSuitePO(dialog.getName());
    setDefaultValuesToTestSuite(testSuite,project);
    AbstractCmdHandleChild cmd=NodePM.getCmdHandleChild(project,testSuite);
    NodePM.addAndPersistChildNode(project,testSuite,null,cmd);
    DataEventDispatcher.getInstance().fireDataChangedListener(testSuite,DataState.Added,UpdateState.all);
  }
 catch (  PMException e) {
    PMExceptionHandler.handlePMExceptionForMasterSession(e);
  }
catch (  ProjectDeletedException e) {
    PMExceptionHandler.handleGDProjectDeletedException();
  }
}",0.9360230547550432
96273,"/** 
 * {@inheritDoc}
 */
public Object execute(ExecutionEvent event){
  ISelection sel=HandlerUtil.getCurrentSelection(event);
  if (sel instanceof IStructuredSelection) {
    ISpecTestCasePO specTc=GuiNodeBP.getSpecTC((IStructuredSelection)sel);
    if (specTc != null) {
      showSpecGUINode(specTc,Constants.TC_BROWSER_ID);
    }
  }
  return null;
}","/** 
 * {@inheritDoc}
 */
public Object execute(ExecutionEvent event){
  ISelection sel=HandlerUtil.getCurrentSelection(event);
  if (sel instanceof IStructuredSelection) {
    ISpecTestCasePO specTc=UINodeBP.getSpecTC((IStructuredSelection)sel);
    if (specTc != null) {
      showSpecUINode(specTc,Constants.TC_BROWSER_ID);
    }
  }
  return null;
}",0.9915254237288136
96274,"/** 
 * {@inheritDoc}
 */
public Object execute(ExecutionEvent event){
  ISelection sel=HandlerUtil.getCurrentSelection(event);
  if (sel instanceof IStructuredSelection) {
    IStructuredSelection iss=(IStructuredSelection)sel;
    Object firstElement=iss.getFirstElement();
    if (firstElement instanceof IRefTestSuitePO) {
      IRefTestSuitePO refTS=(IRefTestSuitePO)firstElement;
      String tsGUID=refTS.getTestSuiteGuid();
      ITestSuitePO testSuite=NodePM.getTestSuite(tsGUID);
      IViewPart activatedView=Plugin.showView(Constants.TS_BROWSER_ID);
      if (activatedView instanceof TestSuiteBrowser) {
        ((TestSuiteBrowser)activatedView).setSelection(testSuite);
      }
    }
  }
  return null;
}","/** 
 * {@inheritDoc}
 */
public Object execute(ExecutionEvent event){
  ISelection sel=HandlerUtil.getCurrentSelection(event);
  if (sel instanceof IStructuredSelection) {
    IStructuredSelection iss=(IStructuredSelection)sel;
    Object firstElement=iss.getFirstElement();
    if (firstElement instanceof IRefTestSuitePO) {
      IRefTestSuitePO refTS=(IRefTestSuitePO)firstElement;
      String tsGUID=refTS.getTestSuiteGuid();
      ITestSuitePO testSuite=NodePM.getTestSuite(tsGUID);
      IViewPart activatedView=Plugin.showView(Constants.TS_BROWSER_ID);
      if (activatedView instanceof TestSuiteBrowser) {
        AbstractJBTreeView jbtv=(TestSuiteBrowser)activatedView;
        UINodeBP.selectNodeInTree(testSuite.getId(),jbtv.getTreeViewer(),jbtv.getEntityManager());
      }
    }
  }
  return null;
}",0.8767123287671232
96275,"/** 
 * Search for the SpecTC of an ExecTC and opens the corresponding editor if possible.
 * @param structuredSel the current selection
 */
private void openSpecNode(IStructuredSelection structuredSel){
  ISpecTestCasePO specTc=GuiNodeBP.getSpecTC(structuredSel);
  openEditorForSpecTC(specTc);
  InteractionEventDispatcher.getDefault().fireProgammableSelectionEvent(new StructuredSelection(specTc));
}","/** 
 * Search for the SpecTC of an ExecTC and opens the corresponding editor if possible.
 * @param structuredSel the current selection
 */
private void openSpecNode(IStructuredSelection structuredSel){
  ISpecTestCasePO specTc=UINodeBP.getSpecTC(structuredSel);
  openEditorForSpecTC(specTc);
  InteractionEventDispatcher.getDefault().fireProgammableSelectionEvent(new StructuredSelection(specTc));
}",0.9937888198757764
96276,"/** 
 * {@inheritDoc} 
 */
public Object getParent(Object element){
  if (element instanceof INodePO) {
    INodePO parent=((INodePO)element).getParentNode();
    IProjectPO activeProject=GeneralStorage.getInstance().getProject();
    if (parent instanceof IProjectPO && !parent.equals(activeProject)) {
      String parentGuid=parent.getGuid();
      if (activeProject != null && parentGuid != null) {
        for (        IReusedProjectPO reusedProject : activeProject.getUsedProjects()) {
          if (parentGuid.equals(reusedProject.getProjectGuid())) {
            return reusedProject;
          }
        }
      }
    }
    return parent;
  }
  if (element instanceof ITestSuiteContPO || element instanceof ITestJobContPO || element instanceof IReusedProjectPO) {
    return GeneralStorage.getInstance().getProject();
  }
  if (element instanceof ITestDataCubeContPO || element instanceof ITestDataCubePO || element instanceof SearchResultElement) {
    return null;
  }
  Assert.notReached(Messages.WrongTypeOfElement + StringConstants.EXCLAMATION_MARK);
  return null;
}","/** 
 * {@inheritDoc} 
 */
public Object getParent(Object element){
  if (element instanceof INodePO) {
    return ((INodePO)element).getParentNode();
  }
  if (element instanceof ITestSuiteContPO || element instanceof ITestJobContPO || element instanceof IReusedProjectPO) {
    return GeneralStorage.getInstance().getProject();
  }
  if (element instanceof ITestDataCubeContPO || element instanceof ITestDataCubePO || element instanceof SearchResultElement) {
    return null;
  }
  Assert.notReached(Messages.WrongTypeOfElement + StringConstants.EXCLAMATION_MARK);
  return null;
}",0.6654654654654655
96277,"/** 
 * creates the ToolTip Text
 * @param node GuiNode
 * @return String
 */
private String createToolTipText(INodePO node){
  StringBuilder toolTip=new StringBuilder();
  final WorkingLanguageBP workLangBP=WorkingLanguageBP.getInstance();
  Locale locale=workLangBP.getWorkingLanguage();
  ITestSuitePO testSuite=GuiNodeBP.getTestSuiteOfNode(node);
  if (node != null && isNodeActive(node)) {
    if (testSuite != null) {
      IAUTMainPO aut=testSuite.getAut();
      if (node instanceof IExecTestCasePO) {
        checkNode((IExecTestCasePO)node,aut,locale,toolTip);
      }
 else       if (node instanceof ICapPO) {
        ICapPO cap=(ICapPO)node;
        IExecTestCasePO execTC=(IExecTestCasePO)node.getParentNode().getParentNode();
        boolean overWrittenName=false;
        for (        ICompNamesPairPO pair : execTC.getCompNamesPairs()) {
          if (pair.getFirstName().equals(cap.getComponentName()) && pair.getSecondName() != null && !pair.getSecondName().equals(cap.getComponentName())) {
            overWrittenName=true;
            break;
          }
        }
        checkNode(aut,locale,cap,toolTip,overWrittenName);
      }
    }
    if (node instanceof ITestJobPO) {
      if (!isTestJobGuiValid((ITestJobPO)node)) {
        addMessage(toolTip,Messages.TestDataDecoratorTestJobIncompl);
      }
    }
 else     if (node instanceof IRefTestSuitePO) {
      if (!isRefTestSuiteGuiValid((IRefTestSuitePO)node)) {
        addMessage(toolTip,Messages.TestDataDecoratorRefTsIncompl);
      }
    }
    if (toolTip.length() == 0) {
      return super.getToolTipText(node);
    }
  }
  return toolTip.length() > 0 ? toolTip.toString() : null;
}","/** 
 * creates the ToolTip Text
 * @param node GuiNode
 * @return String
 */
private String createToolTipText(INodePO node){
  StringBuilder toolTip=new StringBuilder();
  final WorkingLanguageBP workLangBP=WorkingLanguageBP.getInstance();
  Locale locale=workLangBP.getWorkingLanguage();
  ITestSuitePO testSuite=UINodeBP.getTestSuiteOfNode(node);
  if (node != null && isNodeActive(node)) {
    if (testSuite != null) {
      IAUTMainPO aut=testSuite.getAut();
      if (node instanceof IExecTestCasePO) {
        checkNode((IExecTestCasePO)node,aut,locale,toolTip);
      }
 else       if (node instanceof ICapPO) {
        ICapPO cap=(ICapPO)node;
        IExecTestCasePO execTC=(IExecTestCasePO)node.getParentNode().getParentNode();
        boolean overWrittenName=false;
        for (        ICompNamesPairPO pair : execTC.getCompNamesPairs()) {
          if (pair.getFirstName().equals(cap.getComponentName()) && pair.getSecondName() != null && !pair.getSecondName().equals(cap.getComponentName())) {
            overWrittenName=true;
            break;
          }
        }
        checkNode(aut,locale,cap,toolTip,overWrittenName);
      }
    }
    if (node instanceof ITestJobPO) {
      if (!isTestJobGuiValid((ITestJobPO)node)) {
        addMessage(toolTip,Messages.TestDataDecoratorTestJobIncompl);
      }
    }
 else     if (node instanceof IRefTestSuitePO) {
      if (!isRefTestSuiteGuiValid((IRefTestSuitePO)node)) {
        addMessage(toolTip,Messages.TestDataDecoratorRefTsIncompl);
      }
    }
    if (toolTip.length() == 0) {
      return super.getToolTipText(node);
    }
  }
  return toolTip.length() > 0 ? toolTip.toString() : null;
}",0.9984980474617002
96278,"/** 
 * @param gnode the gui node
 * @param decoration the decoration
 * @return wheter decoration should continue for this element or not
 */
private boolean shouldNotDecorate(INodePO gnode,IDecoration decoration){
  return gnode == null || gnode.getParentNode() == null || GuiNodeBP.getTestSuiteOfNode(gnode) == null || decoration.getDecorationContext() instanceof JBEditorDecorationContext || gnode instanceof IProjectPO;
}","/** 
 * @param gnode the gui node
 * @param decoration the decoration
 * @return wheter decoration should continue for this element or not
 */
private boolean shouldNotDecorate(INodePO gnode,IDecoration decoration){
  return gnode == null || gnode.getParentNode() == null || UINodeBP.getTestSuiteOfNode(gnode) == null || decoration.getDecorationContext() instanceof JBEditorDecorationContext || gnode instanceof IProjectPO;
}",0.9941245593419508
96279,"/** 
 * @param po The persistent object that was added
 */
private void handleDataAdded(IPersistentObject po){
  if ((po instanceof ISpecTestCasePO) || (po instanceof ICategoryPO)) {
    return;
  }
  getTreeViewer().refresh();
  getTreeViewer().setSelection(new StructuredSelection(po),true);
}","/** 
 * @param po The persistent object that was added
 */
private void handleDataAdded(IPersistentObject po){
  if ((po instanceof ISpecTestCasePO) || (po instanceof ICategoryPO)) {
    return;
  }
  getTreeViewer().refresh();
  getTreeViewer().expandToLevel(getTreeViewer().getAutoExpandLevel() + 1);
  getTreeViewer().setSelection(new StructuredSelection(po),true);
}",0.8872180451127819
96280,"/** 
 * Creates the specification part of the editor
 * @param parent Composite.
 */
protected void createMainPart(Composite parent){
  setMainTreeViewer(new TreeViewer(parent));
  m_labelDecorator=new SessionBasedLabelDecorator(this,Plugin.getDefault().getWorkbench().getDecoratorManager().getLabelDecorator());
  DecoratingLabelProvider lp=new DecoratingLabelProvider(new GeneralLabelProvider(),m_labelDecorator);
  lp.setDecorationContext(new JBEditorDecorationContext());
  getMainTreeViewer().setLabelProvider(lp);
  getMainTreeViewer().setUseHashlookup(true);
  JubulaStateController.getInstance().addSelectionListenerToSelectionService();
  getSite().setSelectionProvider(this);
  firePropertyChange(IWorkbenchPartConstants.PROP_INPUT);
}","/** 
 * Creates the specification part of the editor
 * @param parent Composite.
 */
protected void createMainPart(Composite parent){
  setMainTreeViewer(new TreeViewer(parent));
  DecoratingLabelProvider lp=new DecoratingLabelProvider(new GeneralLabelProvider(),Plugin.getDefault().getWorkbench().getDecoratorManager().getLabelDecorator());
  lp.setDecorationContext(new JBEditorDecorationContext());
  getMainTreeViewer().setLabelProvider(lp);
  getMainTreeViewer().setUseHashlookup(true);
  getMainTreeViewer().setComparer(new UIIdentitiyElementComparer());
  JubulaStateController.getInstance().addSelectionListenerToSelectionService();
  getSite().setSelectionProvider(this);
  firePropertyChange(IWorkbenchPartConstants.PROP_INPUT);
}",0.8161616161616162
96281,"/** 
 * {@inheritDoc}
 */
public void dispose(){
  try {
    if (m_labelDecorator != null) {
      m_labelDecorator.dispose();
    }
    DataEventDispatcher ded=DataEventDispatcher.getInstance();
    ded.removePropertyChangedListener(this);
    if (getEditorSite() != null && getEditorSite().getPage() != null) {
      GuiEventDispatcher.getInstance().removeEditorDirtyStateListener(this);
    }
    if (getSite() != null) {
      getSite().setSelectionProvider(null);
    }
    if (getEditorSite() != null && getEditorSite().getPage() != null) {
      getEditorSite().getPage().removePartListener(m_partListener);
    }
    if (getEditorHelper() != null) {
      getEditorHelper().dispose();
    }
  }
  finally {
    super.dispose();
  }
}","/** 
 * {@inheritDoc}
 */
public void dispose(){
  try {
    DataEventDispatcher ded=DataEventDispatcher.getInstance();
    ded.removePropertyChangedListener(this);
    if (getEditorSite() != null && getEditorSite().getPage() != null) {
      GuiEventDispatcher.getInstance().removeEditorDirtyStateListener(this);
    }
    if (getSite() != null) {
      getSite().setSelectionProvider(null);
    }
    if (getEditorSite() != null && getEditorSite().getPage() != null) {
      getEditorSite().getPage().removePartListener(m_partListener);
    }
    if (getEditorHelper() != null) {
      getEditorHelper().dispose();
    }
  }
  finally {
    super.dispose();
  }
}",0.945945945945946
96282,"/** 
 * {@inheritDoc} 
 */
protected void createPartControlImpl(Composite parent){
  createMainPart(parent);
  GridData gridData=new GridData(GridData.FILL_BOTH);
  getMainTreeViewer().getControl().setLayoutData(gridData);
  setControl(getMainTreeViewer().getControl());
  getMainTreeViewer().setContentProvider(new CentralTestDataContentProvider());
  m_labelDecorator=new SessionBasedLabelDecorator(this,Plugin.getDefault().getWorkbench().getDecoratorManager().getLabelDecorator());
  DecoratingLabelProvider lp=new DecoratingLabelProvider(new CentralTestDataLabelProvider(),m_labelDecorator);
  lp.setDecorationContext(new JBEditorDecorationContext());
  getMainTreeViewer().setLabelProvider(lp);
  getMainTreeViewer().setSorter(new ViewerSorter());
  getMainTreeViewer().setComparer(new PersistentObjectComparer());
  addTreeDoubleClickListener(CommandIDs.NEW_TESTDATACUBE_COMMAND_ID);
  addFocusListener(getMainTreeViewer());
  getEditorHelper().addListeners();
  setActionHandlers();
  setInitialInput();
  DataEventDispatcher ded=DataEventDispatcher.getInstance();
  ded.addPropertyChangedListener(this,true);
  ded.addParamChangedListener(this,true);
  GuiEventDispatcher.getInstance().addEditorDirtyStateListener(this,true);
}","/** 
 * {@inheritDoc} 
 */
protected void createPartControlImpl(Composite parent){
  createMainPart(parent);
  GridData gridData=new GridData(GridData.FILL_BOTH);
  getMainTreeViewer().getControl().setLayoutData(gridData);
  setControl(getMainTreeViewer().getControl());
  getMainTreeViewer().setContentProvider(new CentralTestDataContentProvider());
  DecoratingLabelProvider lp=new DecoratingLabelProvider(new CentralTestDataLabelProvider(),Plugin.getDefault().getWorkbench().getDecoratorManager().getLabelDecorator());
  lp.setDecorationContext(new JBEditorDecorationContext());
  getMainTreeViewer().setLabelProvider(lp);
  getMainTreeViewer().setSorter(new ViewerSorter());
  getMainTreeViewer().setComparer(new PersistentObjectComparer());
  addTreeDoubleClickListener(CommandIDs.NEW_TESTDATACUBE_COMMAND_ID);
  addFocusListener(getMainTreeViewer());
  getEditorHelper().addListeners();
  setActionHandlers();
  setInitialInput();
  DataEventDispatcher ded=DataEventDispatcher.getInstance();
  ded.addPropertyChangedListener(this,true);
  ded.addParamChangedListener(this,true);
  GuiEventDispatcher.getInstance().addEditorDirtyStateListener(this,true);
}",0.9065108514190318
96283,"/** 
 * {@inheritDoc} 
 */
public void dispose(){
  m_labelDecorator.dispose();
  DataEventDispatcher ded=DataEventDispatcher.getInstance();
  ded.removeParamChangedListener(this);
  getElementsToRefresh().clear();
  super.dispose();
}","/** 
 * {@inheritDoc} 
 */
public void dispose(){
  DataEventDispatcher ded=DataEventDispatcher.getInstance();
  ded.removeParamChangedListener(this);
  getElementsToRefresh().clear();
  super.dispose();
}",0.9318181818181818
96284,"/** 
 * {@inheritDoc}
 * @param parent
 */
public void createPartControlImpl(Composite parent){
  super.createPartControlImpl(parent);
  m_eventHandlerTreeViewer.setContentProvider(new EventHandlerContentProvider());
  m_eventHandlerTreeViewer.getControl().setMenu(createContextMenu());
  ActionListener actionListener=new ActionListener();
  getTreeViewer().addSelectionChangedListener(actionListener);
  m_labelDecorator=new SessionBasedLabelDecorator(this,Plugin.getDefault().getWorkbench().getDecoratorManager().getLabelDecorator());
  DecoratingLabelProvider ld=new DecoratingLabelProvider(new GeneralLabelProvider(),m_labelDecorator);
  ld.setDecorationContext(new JBEditorDecorationContext());
  getTreeViewer().setLabelProvider(ld);
  getEventHandlerTreeViewer().addSelectionChangedListener(actionListener);
  if (!Plugin.getDefault().anyDirtyStar()) {
    checkAndRemoveUnusedTestData();
  }
}","/** 
 * {@inheritDoc}
 * @param parent
 */
public void createPartControlImpl(Composite parent){
  super.createPartControlImpl(parent);
  m_eventHandlerTreeViewer.setContentProvider(new EventHandlerContentProvider());
  m_eventHandlerTreeViewer.getControl().setMenu(createContextMenu());
  ActionListener actionListener=new ActionListener();
  getTreeViewer().addSelectionChangedListener(actionListener);
  DecoratingLabelProvider ld=new DecoratingLabelProvider(new GeneralLabelProvider(),Plugin.getDefault().getWorkbench().getDecoratorManager().getLabelDecorator());
  ld.setDecorationContext(new JBEditorDecorationContext());
  getTreeViewer().setLabelProvider(ld);
  getEventHandlerTreeViewer().addSelectionChangedListener(actionListener);
  if (!Plugin.getDefault().anyDirtyStar()) {
    checkAndRemoveUnusedTestData();
  }
}",0.8797687861271676
96285,"/** 
 * Creates the EventHandler part of the editor
 * @param parent Composite
 */
private void createEventHandlerPart(Composite parent){
  Composite headLineComposite=new Composite(parent,SWT.NONE);
  GridLayout layout=new GridLayout(1,true);
  layout.marginWidth=0;
  layout.marginHeight=0;
  layout.marginBottom=0;
  layout.marginTop=0;
  headLineComposite.setLayout(layout);
  Label headLine=new Label(headLineComposite,SWT.NONE);
  headLine.setText(Messages.TestCaseEditorEHAreaHeadline);
  ControlDecorator.decorateInfo(headLine,""String_Node_Str"",false);
  GridData ehTvGridData=new GridData();
  ehTvGridData.grabExcessHorizontalSpace=true;
  ehTvGridData.grabExcessVerticalSpace=true;
  ehTvGridData.horizontalAlignment=SWT.FILL;
  ehTvGridData.verticalAlignment=SWT.FILL;
  ehTvGridData.verticalSpan=100;
  GridLayout ehTvLayout=new GridLayout(1,true);
  ehTvLayout.marginWidth=0;
  ehTvLayout.marginHeight=0;
  ehTvLayout.marginBottom=0;
  ehTvLayout.marginTop=0;
  m_eventHandlerTreeViewer=new TreeViewer(headLineComposite);
  m_eventHandlerTreeViewer.getTree().setLayout(ehTvLayout);
  m_eventHandlerTreeViewer.getTree().setLayoutData(ehTvGridData);
  m_eventHandlerLabelDecorator=new SessionBasedLabelDecorator(this,Plugin.getDefault().getWorkbench().getDecoratorManager().getLabelDecorator());
  m_eventHandlerTreeViewer.setLabelProvider(new DecoratingCellLabelProvider(new GeneralLabelProvider(),m_eventHandlerLabelDecorator));
  m_eventHandlerTreeViewer.setUseHashlookup(true);
  m_eventHandlerTreeViewer.getTree().addListener(SWT.MouseDown,new MouseDownListener());
  JubulaStateController.getInstance().addSelectionListenerToSelectionService();
  firePropertyChange(IWorkbenchPartConstants.PROP_INPUT);
}","/** 
 * Creates the EventHandler part of the editor
 * @param parent Composite
 */
private void createEventHandlerPart(Composite parent){
  Composite headLineComposite=new Composite(parent,SWT.NONE);
  GridLayout layout=new GridLayout(1,true);
  layout.marginWidth=0;
  layout.marginHeight=0;
  layout.marginBottom=0;
  layout.marginTop=0;
  headLineComposite.setLayout(layout);
  Label headLine=new Label(headLineComposite,SWT.NONE);
  headLine.setText(Messages.TestCaseEditorEHAreaHeadline);
  ControlDecorator.decorateInfo(headLine,""String_Node_Str"",false);
  GridData ehTvGridData=new GridData();
  ehTvGridData.grabExcessHorizontalSpace=true;
  ehTvGridData.grabExcessVerticalSpace=true;
  ehTvGridData.horizontalAlignment=SWT.FILL;
  ehTvGridData.verticalAlignment=SWT.FILL;
  ehTvGridData.verticalSpan=100;
  GridLayout ehTvLayout=new GridLayout(1,true);
  ehTvLayout.marginWidth=0;
  ehTvLayout.marginHeight=0;
  ehTvLayout.marginBottom=0;
  ehTvLayout.marginTop=0;
  m_eventHandlerTreeViewer=new TreeViewer(headLineComposite);
  m_eventHandlerTreeViewer.getTree().setLayout(ehTvLayout);
  m_eventHandlerTreeViewer.getTree().setLayoutData(ehTvGridData);
  DecoratingLabelProvider lp=new DecoratingLabelProvider(new GeneralLabelProvider(),Plugin.getDefault().getWorkbench().getDecoratorManager().getLabelDecorator());
  m_eventHandlerTreeViewer.setLabelProvider(lp);
  m_eventHandlerTreeViewer.setComparer(new UIIdentitiyElementComparer());
  m_eventHandlerTreeViewer.setUseHashlookup(true);
  m_eventHandlerTreeViewer.getTree().addListener(SWT.MouseDown,new MouseDownListener());
  JubulaStateController.getInstance().addSelectionListenerToSelectionService();
  firePropertyChange(IWorkbenchPartConstants.PROP_INPUT);
}",0.9214265004349088
96286,"/** 
 * {@inheritDoc} 
 */
public void createControl(Composite parent){
  Composite topLevelComposite=new Composite(parent,SWT.NONE);
  setControl(topLevelComposite);
  GridLayout layout=new GridLayout();
  layout.numColumns=1;
  layout.verticalSpacing=2;
  layout.marginWidth=Layout.MARGIN_WIDTH;
  layout.marginHeight=Layout.MARGIN_HEIGHT;
  topLevelComposite.setLayout(layout);
  GridData layoutData=new GridData(GridData.FILL_BOTH);
  layoutData.grabExcessHorizontalSpace=true;
  topLevelComposite.setLayoutData(layoutData);
  final FilteredTree ft=new JBFilteredTree(topLevelComposite,SWT.MULTI | SWT.H_SCROLL | SWT.V_SCROLL| SWT.BORDER,new JBPatternFilter(),true);
  setTreeViewer(ft.getViewer());
  ColumnViewerToolTipSupport.enableFor(getTreeViewer());
  getTreeViewer().addDoubleClickListener(m_doubleClickListener);
  getTreeViewer().setContentProvider(new SearchResultContentProvider());
  getTreeViewer().setLabelProvider(new DecoratingCellLabelProvider(new LabelProvider(),Plugin.getDefault().getWorkbench().getDecoratorManager().getLabelDecorator()));
  getTreeViewer().setSorter(new ViewerSorter());
  getSite().setSelectionProvider(getTreeViewer());
  DataEventDispatcher.getInstance().addProjectLoadedListener(this,true);
  Plugin.getHelpSystem().setHelp(parent,ContextHelpIds.JB_SEARCH_RESULT_VIEW);
}","/** 
 * {@inheritDoc} 
 */
public void createControl(Composite parent){
  Composite topLevelComposite=new Composite(parent,SWT.NONE);
  setControl(topLevelComposite);
  GridLayout layout=new GridLayout();
  layout.numColumns=1;
  layout.verticalSpacing=2;
  layout.marginWidth=Layout.MARGIN_WIDTH;
  layout.marginHeight=Layout.MARGIN_HEIGHT;
  topLevelComposite.setLayout(layout);
  GridData layoutData=new GridData(GridData.FILL_BOTH);
  layoutData.grabExcessHorizontalSpace=true;
  topLevelComposite.setLayoutData(layoutData);
  final FilteredTree ft=new JBFilteredTree(topLevelComposite,SWT.MULTI | SWT.H_SCROLL | SWT.V_SCROLL| SWT.BORDER,new JBPatternFilter(),true);
  setTreeViewer(ft.getViewer());
  ColumnViewerToolTipSupport.enableFor(getTreeViewer());
  getTreeViewer().addDoubleClickListener(m_doubleClickListener);
  getTreeViewer().setContentProvider(new SearchResultContentProvider());
  getTreeViewer().setLabelProvider(new DecoratingLabelProvider(new LabelProvider(),Plugin.getDefault().getWorkbench().getDecoratorManager().getLabelDecorator()));
  getTreeViewer().setSorter(new ViewerSorter());
  getSite().setSelectionProvider(getTreeViewer());
  DataEventDispatcher.getInstance().addProjectLoadedListener(this,true);
  Plugin.getHelpSystem().setHelp(parent,ContextHelpIds.JB_SEARCH_RESULT_VIEW);
}",0.9984813971146546
96287,"/** 
 * Selects all text in the component.
 */
protected void selectAll(){
  final String totalText=getText();
  getRobot().keyStroke(getRobot().getSystemModifierSpec() + ""String_Node_Str"");
  if (!totalText.equals(getSelectionText())) {
    getEventThreadQueuer().invokeAndWait(""String_Node_Str"",new IRunnable(){
      public Object run(){
        getTextComponent().selectAll();
        return null;
      }
    }
);
  }
  String selectionText=getSelectionText();
  if (!totalText.equals(selectionText)) {
    log.warn(""String_Node_Str"" + ""String_Node_Str"" + totalText + ""String_Node_Str""+ ""String_Node_Str""+ selectionText+ ""String_Node_Str"");
  }
}","/** 
 * Selects all text in the component.
 */
protected void selectAll(){
  final String totalText=getText();
  try {
    getRobot().keyStroke(getRobot().getSystemModifierSpec() + ""String_Node_Str"");
  }
 catch (  StepExecutionException see) {
    log.warn(see);
  }
  if (!totalText.equals(getSelectionText())) {
    getEventThreadQueuer().invokeAndWait(""String_Node_Str"",new IRunnable(){
      public Object run(){
        getTextComponent().selectAll();
        return null;
      }
    }
);
  }
  String selectionText=getSelectionText();
  if (!totalText.equals(selectionText)) {
    log.warn(""String_Node_Str"" + ""String_Node_Str"" + totalText + ""String_Node_Str""+ ""String_Node_Str""+ selectionText+ ""String_Node_Str"");
  }
}",0.9441624365482234
96288,"/** 
 * @param selectedNode the currently selected guiNode
 * @param workTC the workversion of the current specTC
 * @return the position to add
 */
private Integer getPositionToInsert(ISpecTestCasePO workTC,IExecTestCasePO selectedNode){
  int positionToAdd=workTC.indexOf(selectedNode) + 1;
  if (Plugin.getDefault().getPreferenceStore().getBoolean(Constants.NODE_INSERT_KEY)) {
    positionToAdd=workTC.getUnmodifiableNodeList().size() + 1;
  }
  return positionToAdd;
}","/** 
 * @param workNode the workversion of the current specTC
 * @param selectedNode the currently selected node
 * @return the position to add
 */
public static Integer getPositionToInsert(INodePO workNode,IExecTestCasePO selectedNode){
  int positionToAdd=workNode.indexOf(selectedNode) + 1;
  if (Plugin.getDefault().getPreferenceStore().getBoolean(Constants.NODE_INSERT_KEY)) {
    positionToAdd=workNode.getUnmodifiableNodeList().size() + 1;
  }
  return positionToAdd;
}",0.8177028451001054
96289,"public void selectionChanged(IWorkbenchPart part,ISelection selection){
  if (!(selection instanceof IStructuredSelection)) {
    return;
  }
  List<Object> selectedElements=((IStructuredSelection)selection).toList();
  Collections.reverse(selectedElements);
  Iterator iter=selectedElements.iterator();
  List<IExecTestCasePO> addedElements=new ArrayList<IExecTestCasePO>();
  try {
    while (iter.hasNext()) {
      ISpecTestCasePO specTcToInsert=(ISpecTestCasePO)iter.next();
      try {
        addedElements.add(TestCaseBP.addReferencedTestCase(tce.getEditorHelper().getEditSupport(),editorNode,specTcToInsert,index));
      }
 catch (      PMException e) {
        NodeEditorInput inp=(NodeEditorInput)tce.getAdapter(NodeEditorInput.class);
        INodePO inpNode=inp.getNode();
        PMExceptionHandler.handlePMExceptionForMasterSession(e);
        tce.reOpenEditor(inpNode);
      }
    }
    tce.getEditorHelper().getEditSupport().lockWorkVersion();
    tce.getEditorHelper().setDirty(true);
    tce.setSelection(new StructuredSelection(addedElements));
  }
 catch (  PMException e1) {
    PMExceptionHandler.handlePMExceptionForEditor(e1,tce);
  }
}","public void selectionChanged(IWorkbenchPart part,ISelection selection){
  if (!(selection instanceof IStructuredSelection)) {
    return;
  }
  List<Object> selectedElements=((IStructuredSelection)selection).toList();
  Collections.reverse(selectedElements);
  Iterator iter=selectedElements.iterator();
  List<IExecTestCasePO> addedElements=new ArrayList<IExecTestCasePO>();
  try {
    while (iter.hasNext()) {
      ISpecTestCasePO specTcToInsert=(ISpecTestCasePO)iter.next();
      try {
        Integer index=null;
        if (node instanceof IExecTestCasePO) {
          index=AbstractNewTestCaseAction.getPositionToInsert(editorNode,(IExecTestCasePO)node);
        }
        addedElements.add(TestCaseBP.addReferencedTestCase(tce.getEditorHelper().getEditSupport(),editorNode,specTcToInsert,index));
      }
 catch (      PMException e) {
        NodeEditorInput inp=(NodeEditorInput)tce.getAdapter(NodeEditorInput.class);
        INodePO inpNode=inp.getNode();
        PMExceptionHandler.handlePMExceptionForMasterSession(e);
        tce.reOpenEditor(inpNode);
      }
    }
    tce.getEditorHelper().getEditSupport().lockWorkVersion();
    tce.getEditorHelper().setDirty(true);
    tce.setSelection(new StructuredSelection(addedElements));
  }
 catch (  PMException e1) {
    PMExceptionHandler.handlePMExceptionForEditor(e1,tce);
  }
}",0.9274322169059012
96290,"/** 
 * {@inheritDoc}
 */
public Object execute(ExecutionEvent event){
  final AbstractTestCaseEditor tce=(AbstractTestCaseEditor)Plugin.getActiveEditor();
  if (tce.getEditorHelper().requestEditableState() == JBEditorHelper.EditableState.OK) {
    final INodePO editorNode=(INodePO)tce.getEditorHelper().getEditSupport().getWorkVersion();
    if (!(tce.getTreeViewer().getSelection() instanceof IStructuredSelection)) {
      return null;
    }
    INodePO guiNode=(INodePO)((IStructuredSelection)tce.getTreeViewer().getSelection()).getFirstElement();
    if (guiNode == null) {
      return null;
    }
    final Integer index=editorNode.indexOf(guiNode);
    ISelectionListener listener=new ISelectionListener(){
      public void selectionChanged(      IWorkbenchPart part,      ISelection selection){
        if (!(selection instanceof IStructuredSelection)) {
          return;
        }
        List<Object> selectedElements=((IStructuredSelection)selection).toList();
        Collections.reverse(selectedElements);
        Iterator iter=selectedElements.iterator();
        List<IExecTestCasePO> addedElements=new ArrayList<IExecTestCasePO>();
        try {
          while (iter.hasNext()) {
            ISpecTestCasePO specTcToInsert=(ISpecTestCasePO)iter.next();
            try {
              addedElements.add(TestCaseBP.addReferencedTestCase(tce.getEditorHelper().getEditSupport(),editorNode,specTcToInsert,index));
            }
 catch (            PMException e) {
              NodeEditorInput inp=(NodeEditorInput)tce.getAdapter(NodeEditorInput.class);
              INodePO inpNode=inp.getNode();
              PMExceptionHandler.handlePMExceptionForMasterSession(e);
              tce.reOpenEditor(inpNode);
            }
          }
          tce.getEditorHelper().getEditSupport().lockWorkVersion();
          tce.getEditorHelper().setDirty(true);
          tce.setSelection(new StructuredSelection(addedElements));
        }
 catch (        PMException e1) {
          PMExceptionHandler.handlePMExceptionForEditor(e1,tce);
        }
      }
    }
;
    ISpecTestCasePO specTC=null;
    if (editorNode instanceof ISpecTestCasePO) {
      specTC=(ISpecTestCasePO)editorNode;
    }
    TestCaseTreeDialog dialog=new TestCaseTreeDialog(Plugin.getShell(),specTC,SWT.MULTI,TestCaseTreeDialog.TESTCASE);
    dialog.addSelectionListener(listener);
    dialog.setHelpAvailable(true);
    dialog.create();
    DialogUtils.setWidgetNameForModalDialog(dialog);
    Plugin.getHelpSystem().setHelp(dialog.getShell(),ContextHelpIds.TESTCASE_ADD_EXISTING);
    dialog.open();
    dialog.removeSelectionListener(listener);
  }
  return null;
}","/** 
 * {@inheritDoc}
 */
public Object execute(ExecutionEvent event){
  final AbstractTestCaseEditor tce=(AbstractTestCaseEditor)Plugin.getActiveEditor();
  if (tce.getEditorHelper().requestEditableState() == JBEditorHelper.EditableState.OK) {
    final INodePO editorNode=(INodePO)tce.getEditorHelper().getEditSupport().getWorkVersion();
    if (!(tce.getTreeViewer().getSelection() instanceof IStructuredSelection)) {
      return null;
    }
    final INodePO node=(INodePO)((IStructuredSelection)tce.getTreeViewer().getSelection()).getFirstElement();
    if (node == null) {
      return null;
    }
    ISelectionListener listener=getSelectionListener(tce,editorNode,node);
    ISpecTestCasePO specTC=null;
    if (editorNode instanceof ISpecTestCasePO) {
      specTC=(ISpecTestCasePO)editorNode;
    }
    TestCaseTreeDialog dialog=new TestCaseTreeDialog(Plugin.getShell(),specTC,SWT.MULTI,TestCaseTreeDialog.TESTCASE);
    dialog.addSelectionListener(listener);
    dialog.setHelpAvailable(true);
    dialog.create();
    DialogUtils.setWidgetNameForModalDialog(dialog);
    Plugin.getHelpSystem().setHelp(dialog.getShell(),ContextHelpIds.TESTCASE_ADD_EXISTING);
    dialog.open();
    dialog.removeSelectionListener(listener);
  }
  return null;
}",0.6100307062436029
96291,"/** 
 * Verifies, if value exists in row.
 * @param row The row of the cell.
 * @param rowOperator the row header operator
 * @param value The cell text to verify.
 * @param operator The operation used to verify
 * @param searchType Determines where the search begins (""relative"" or ""absolute"")
 * @param exists true if value exists, false otherwise
 * @throws StepExecutionException If the row or the column is invalid, or if the rendered text cannot be extracted.
 */
public void gdVerifyValueInRow(final String row,final String rowOperator,final String value,final String operator,final String searchType,boolean exists) throws StepExecutionException {
  final int implRow=getRowFromString(row,rowOperator);
  Boolean valueExists=new Boolean(true);
  if (implRow == -1) {
    valueExists=(Boolean)getEventThreadQueuer().invokeAndWait(""String_Node_Str"",new IRunnable(){
      public Object run() throws StepExecutionException {
        for (int k=getStartingColIndex(searchType); k < m_table.getColumnCount(); ++k) {
          String header=m_table.getColumnName(k);
          if (MatchUtil.getInstance().match(header,value,operator)) {
            return new Boolean(true);
          }
        }
        return new Boolean(false);
      }
    }
);
  }
 else {
    valueExists=(Boolean)getEventThreadQueuer().invokeAndWait(""String_Node_Str"",new IRunnable(){
      public Object run() throws StepExecutionException {
        for (int i=getStartingColIndex(searchType); i < m_table.getColumnCount(); ++i) {
          if (MatchUtil.getInstance().match(m_table.getValueAt(implRow,i).toString(),value,operator)) {
            return new Boolean(true);
          }
        }
        return new Boolean(false);
      }
    }
);
  }
  Verifier.equals(exists,valueExists.booleanValue());
}","/** 
 * Verifies, if value exists in row.
 * @param row The row of the cell.
 * @param rowOperator the row header operator
 * @param value The cell text to verify.
 * @param operator The operation used to verify
 * @param searchType Determines where the search begins (""relative"" or ""absolute"")
 * @param exists true if value exists, false otherwise
 * @throws StepExecutionException If the row or the column is invalid, or if the rendered text cannot be extracted.
 */
public void gdVerifyValueInRow(final String row,final String rowOperator,final String value,final String operator,final String searchType,boolean exists) throws StepExecutionException {
  final int implRow=getRowFromString(row,rowOperator);
  Boolean valueExists=Boolean.TRUE;
  if (implRow == -1) {
    valueExists=(Boolean)getEventThreadQueuer().invokeAndWait(""String_Node_Str"",new IRunnable(){
      public Object run() throws StepExecutionException {
        for (int k=getStartingColIndex(searchType); k < m_table.getColumnCount(); ++k) {
          String header=m_table.getColumnName(k);
          if (MatchUtil.getInstance().match(header,value,operator)) {
            return Boolean.TRUE;
          }
        }
        return Boolean.FALSE;
      }
    }
);
  }
 else {
    valueExists=(Boolean)getEventThreadQueuer().invokeAndWait(""String_Node_Str"",new IRunnable(){
      public Object run() throws StepExecutionException {
        for (int i=getStartingColIndex(searchType); i < m_table.getColumnCount(); ++i) {
          if (MatchUtil.getInstance().match(getCellText(implRow,i),value,operator)) {
            return Boolean.TRUE;
          }
        }
        return Boolean.FALSE;
      }
    }
);
  }
  Verifier.equals(exists,valueExists.booleanValue());
}",0.8690712865663164
96292,"/** 
 * Verifies, if value exists in column.
 * @param col The column of the cell.
 * @param colOperator the column header operator
 * @param value The cell text to verify.
 * @param operator The operation used to verify
 * @param searchType Determines where the search begins (""relative"" or ""absolute"")
 * @param exists true if value exists, false otherwise
 * @throws StepExecutionException If the row or the column is invalid, or if the rendered text cannot be extracted.
 */
public void gdVerifyValueInColumn(final String col,final String colOperator,final String value,final String operator,final String searchType,boolean exists) throws StepExecutionException {
  final int implCol=getColumnFromString(col,colOperator);
  Boolean valueExists=(Boolean)getEventThreadQueuer().invokeAndWait(""String_Node_Str"",new IRunnable(){
    public Object run() throws StepExecutionException {
      final int rowCount=m_table.getRowCount();
      for (int i=getStartingRowIndex(searchType); i < rowCount; ++i) {
        if (MatchUtil.getInstance().match(getCellText(i,implCol),value,operator)) {
          return new Boolean(true);
        }
      }
      String header=m_table.getColumnName(implCol);
      if (MatchUtil.getInstance().match(header,value,operator)) {
        return new Boolean(true);
      }
      return new Boolean(false);
    }
  }
);
  Verifier.equals(exists,valueExists.booleanValue());
}","/** 
 * Verifies, if value exists in column.
 * @param col The column of the cell.
 * @param colOperator the column header operator
 * @param value The cell text to verify.
 * @param operator The operation used to verify
 * @param searchType Determines where the search begins (""relative"" or ""absolute"")
 * @param exists true if value exists, false otherwise
 * @throws StepExecutionException If the row or the column is invalid, or if the rendered text cannot be extracted.
 */
public void gdVerifyValueInColumn(final String col,final String colOperator,final String value,final String operator,final String searchType,boolean exists) throws StepExecutionException {
  final int implCol=getColumnFromString(col,colOperator);
  Boolean valueExists=(Boolean)getEventThreadQueuer().invokeAndWait(""String_Node_Str"",new IRunnable(){
    public Object run() throws StepExecutionException {
      final int rowCount=m_table.getRowCount();
      for (int i=getStartingRowIndex(searchType); i < rowCount; ++i) {
        if (MatchUtil.getInstance().match(getCellText(i,implCol),value,operator)) {
          return Boolean.TRUE;
        }
      }
      String header=m_table.getColumnName(implCol);
      if (MatchUtil.getInstance().match(header,value,operator)) {
        return Boolean.TRUE;
      }
      return Boolean.FALSE;
    }
  }
);
  Verifier.equals(exists,valueExists.booleanValue());
}",0.983160157649588
96293,"/** 
 * Finds the first row which contains the value <code>value</code> in the given column and selects the cell.
 * @param col the column
 * @param value the value
 * @param regex search using regex
 * @deprecated the same as gdSelectRowByValueWill be removed!
 */
public void gdSelectCellByRowValue(int col,final String value,boolean regex){
  final int implCol=IndexConverter.toImplementationIndex(col);
  Integer implRow;
  if (regex) {
    implRow=(Integer)getEventThreadQueuer().invokeAndWait(""String_Node_Str"",new IRunnable(){
      public Object run() throws StepExecutionException {
        for (int i=0; i < m_table.getRowCount(); ++i) {
          if (MatchUtil.getInstance().match(m_table.getValueAt(i,implCol).toString(),value,MatchUtil.MATCHES_REGEXP)) {
            return new Integer(i);
          }
        }
        return null;
      }
    }
);
  }
 else {
    implRow=(Integer)getEventThreadQueuer().invokeAndWait(""String_Node_Str"",new IRunnable(){
      public Object run() throws StepExecutionException {
        for (int i=0; i < m_table.getRowCount(); ++i) {
          if (m_table.getValueAt(i,implCol).toString().equals(value)) {
            return new Integer(i);
          }
        }
        return null;
      }
    }
);
  }
  if (implRow == null) {
    throw new StepExecutionException(""String_Node_Str"",EventFactory.createActionError(TestErrorEvent.NOT_FOUND));
  }
  gdSelectCell(IndexConverter.toUserIndex(implRow.intValue()),col,1,CompSystemConstants.EXTEND_SELECTION_NO);
}","/** 
 * Finds the first row which contains the value <code>value</code> in the given column and selects the cell.
 * @param col the column
 * @param value the value
 * @param regex search using regex
 * @deprecated the same as gdSelectRowByValueWill be removed!
 */
public void gdSelectCellByRowValue(int col,final String value,boolean regex){
  final int implCol=IndexConverter.toImplementationIndex(col);
  Integer implRow;
  if (regex) {
    implRow=(Integer)getEventThreadQueuer().invokeAndWait(""String_Node_Str"",new IRunnable(){
      public Object run() throws StepExecutionException {
        for (int i=0; i < m_table.getRowCount(); ++i) {
          if (MatchUtil.getInstance().match(getCellText(i,implCol),value,MatchUtil.MATCHES_REGEXP)) {
            return new Integer(i);
          }
        }
        return null;
      }
    }
);
  }
 else {
    implRow=(Integer)getEventThreadQueuer().invokeAndWait(""String_Node_Str"",new IRunnable(){
      public Object run() throws StepExecutionException {
        for (int i=0; i < m_table.getRowCount(); ++i) {
          if (MatchUtil.getInstance().match(getCellText(i,implCol),value,MatchUtil.MATCHES_REGEXP)) {
            return new Integer(i);
          }
        }
        return null;
      }
    }
);
  }
  if (implRow == null) {
    throw new StepExecutionException(""String_Node_Str"",EventFactory.createActionError(TestErrorEvent.NOT_FOUND));
  }
  gdSelectCell(IndexConverter.toUserIndex(implRow.intValue()),col,1,CompSystemConstants.EXTEND_SELECTION_NO);
}",0.9431592861863848
96294,"/** 
 * Finds the first column which contains the value <code>value</code> in the given row and selects the cell.
 * @param row the row
 * @param value the value
 * @param regex search using regex
 * @param extendSelection Should this selection be part of a multiple selection
 * @param searchType Determines where the search begins (""relative"" or ""absolute"")
 * @param clickCount the number of clicks
 * @deprecated Will be removed with gdSelectCellByColValue with String parameterfor Row/Column
 */
protected void gdSelectCellByColValue(int row,final String value,final String regex,final String extendSelection,final String searchType,int clickCount){
  final int implRow=IndexConverter.toImplementationIndex(row);
  Integer implCol;
  implCol=(Integer)getEventThreadQueuer().invokeAndWait(""String_Node_Str"",new IRunnable(){
    public Object run() throws StepExecutionException {
      for (int i=getStartingColIndex(searchType); i < m_table.getColumnCount(); ++i) {
        if (MatchUtil.getInstance().match(m_table.getValueAt(implRow,i).toString(),value,regex)) {
          return new Integer(i);
        }
      }
      return null;
    }
  }
);
  if (implCol == null) {
    throw new StepExecutionException(""String_Node_Str"",EventFactory.createActionError(TestErrorEvent.NOT_FOUND));
  }
  gdSelectCell(row,IndexConverter.toUserIndex(implCol.intValue()),clickCount,extendSelection);
}","/** 
 * Finds the first column which contains the value <code>value</code> in the given row and selects the cell.
 * @param row the row
 * @param value the value
 * @param regex search using regex
 * @param extendSelection Should this selection be part of a multiple selection
 * @param searchType Determines where the search begins (""relative"" or ""absolute"")
 * @param clickCount the number of clicks
 * @deprecated Will be removed with gdSelectCellByColValue with String parameterfor Row/Column
 */
protected void gdSelectCellByColValue(int row,final String value,final String regex,final String extendSelection,final String searchType,int clickCount){
  final int implRow=IndexConverter.toImplementationIndex(row);
  Integer implCol;
  implCol=(Integer)getEventThreadQueuer().invokeAndWait(""String_Node_Str"",new IRunnable(){
    public Object run() throws StepExecutionException {
      for (int i=getStartingColIndex(searchType); i < m_table.getColumnCount(); ++i) {
        if (MatchUtil.getInstance().match(getCellText(implRow,i),value,regex)) {
          return new Integer(i);
        }
      }
      return null;
    }
  }
);
  if (implCol == null) {
    throw new StepExecutionException(""String_Node_Str"",EventFactory.createActionError(TestErrorEvent.NOT_FOUND));
  }
  gdSelectCell(row,IndexConverter.toUserIndex(implCol.intValue()),clickCount,extendSelection);
}",0.9862617498192336
96295,"/** 
 * {@inheritDoc}
 */
public void dispose(){
  ClientTestFactory.getClientTest().removeTestresultSummaryEventListener(this);
  DataEventDispatcher.getInstance().removeTestresultListener(this);
  super.dispose();
}","/** 
 * {@inheritDoc}
 */
public void dispose(){
  ClientTestFactory.getClientTest().removeTestresultSummaryEventListener(this);
  DataEventDispatcher.getInstance().removeTestresultListener(this);
  DatabaseStateDispatcher.removeDatabaseStateListener(this);
  super.dispose();
}",0.8767676767676768
96296,"/** 
 * {@inheritDoc}
 */
public void createPartControl(Composite parent){
  m_headerMenu=new Menu(parent);
  GridLayout layout=new GridLayout(4,false);
  parent.setLayout(layout);
  m_filter=new TestresultSummaryFilter();
  createSearchFilter(parent);
  m_tableViewer=new TableViewer(parent,SWT.H_SCROLL | SWT.V_SCROLL | SWT.BORDER| SWT.FULL_SELECTION| SWT.MULTI| SWT.VIRTUAL);
  addDetailsColumn(m_tableViewer);
  addDateColumn(m_tableViewer);
  addCommentTitleColumn(m_tableViewer);
  addTestrunIdColumn(m_tableViewer);
  addTestRelevantColumn(m_tableViewer);
  addTestJobStartTimeColumn(m_tableViewer);
  addTestJobColumn(m_tableViewer);
  addStatusDecoratorColumn(m_tableViewer);
  addTsStatusColumn(m_tableViewer);
  addTestsuiteColumn(m_tableViewer);
  addProjectNameColumn(m_tableViewer);
  addAutIdColumn(m_tableViewer);
  addAutNameColumn(m_tableViewer);
  addAutConfColumn(m_tableViewer);
  addLanguageColumn(m_tableViewer);
  addCmdParamColumn(m_tableViewer);
  addAutOSColumn(m_tableViewer);
  addAutHostnameColumn(m_tableViewer);
  addAutAgentHostnameColumn(m_tableViewer);
  addToolkitColumn(m_tableViewer);
  addStartTimeColumn(m_tableViewer);
  addEndTimeColumn(m_tableViewer);
  addDurationColumn(m_tableViewer);
  addExpecCapsColumn(m_tableViewer);
  addExecCapsColumn(m_tableViewer);
  addEventhandlerCapsColumn(m_tableViewer);
  addFailedCapsColumn(m_tableViewer);
  addMonitoringIdColumn(m_tableViewer);
  addMonitoringValueColumn(m_tableViewer);
  addMonitoringReportColumn(m_tableViewer);
  getSite().setSelectionProvider(m_tableViewer);
  m_tableViewer.setContentProvider(new TestresultSummaryContentProvider());
  m_tableViewer.getTable().setLinesVisible(true);
  m_tableViewer.getTable().setHeaderVisible(true);
  TableColumn sortColumn=m_tableViewer.getTable().getColumn(0);
  m_tableViewer.getTable().setSortColumn(sortColumn);
  m_tableViewer.getTable().setSortDirection(SWT.DOWN);
  ColumnSortListener sortListener=new ColumnSortListener(m_tableViewer,sortColumn);
  for (  TableColumn col : m_tableViewer.getTable().getColumns()) {
    col.addSelectionListener(sortListener);
  }
  ClientTestFactory.getClientTest().addTestresultSummaryEventListener(this);
  m_tableViewer.setUseHashlookup(true);
  addContextMenu(m_tableViewer,m_headerMenu);
  refreshView();
  m_tableViewer.addFilter(m_filter);
  Plugin.getHelpSystem().setHelp(m_tableViewer.getControl(),ContextHelpIds.TESTRESULT_SUMMARY_VIEW);
  setTableViewerLayout();
  restoreViewStatus();
  m_tableViewer.refresh();
  DataEventDispatcher.getInstance().addTestresultListener(this,true);
  addDoubleClickListener(m_tableViewer);
}","/** 
 * {@inheritDoc}
 */
public void createPartControl(Composite parent){
  m_headerMenu=new Menu(parent);
  GridLayout layout=new GridLayout(4,false);
  parent.setLayout(layout);
  m_filter=new TestresultSummaryFilter();
  createSearchFilter(parent);
  m_tableViewer=new TableViewer(parent,SWT.H_SCROLL | SWT.V_SCROLL | SWT.BORDER| SWT.FULL_SELECTION| SWT.MULTI| SWT.VIRTUAL);
  addDetailsColumn(m_tableViewer);
  addDateColumn(m_tableViewer);
  addCommentTitleColumn(m_tableViewer);
  addTestrunIdColumn(m_tableViewer);
  addTestRelevantColumn(m_tableViewer);
  addTestJobStartTimeColumn(m_tableViewer);
  addTestJobColumn(m_tableViewer);
  addStatusDecoratorColumn(m_tableViewer);
  addTsStatusColumn(m_tableViewer);
  addTestsuiteColumn(m_tableViewer);
  addProjectNameColumn(m_tableViewer);
  addAutIdColumn(m_tableViewer);
  addAutNameColumn(m_tableViewer);
  addAutConfColumn(m_tableViewer);
  addLanguageColumn(m_tableViewer);
  addCmdParamColumn(m_tableViewer);
  addAutOSColumn(m_tableViewer);
  addAutHostnameColumn(m_tableViewer);
  addAutAgentHostnameColumn(m_tableViewer);
  addToolkitColumn(m_tableViewer);
  addStartTimeColumn(m_tableViewer);
  addEndTimeColumn(m_tableViewer);
  addDurationColumn(m_tableViewer);
  addExpecCapsColumn(m_tableViewer);
  addExecCapsColumn(m_tableViewer);
  addEventhandlerCapsColumn(m_tableViewer);
  addFailedCapsColumn(m_tableViewer);
  addMonitoringIdColumn(m_tableViewer);
  addMonitoringValueColumn(m_tableViewer);
  addMonitoringReportColumn(m_tableViewer);
  getSite().setSelectionProvider(m_tableViewer);
  m_tableViewer.setContentProvider(new TestresultSummaryContentProvider());
  m_tableViewer.getTable().setLinesVisible(true);
  m_tableViewer.getTable().setHeaderVisible(true);
  TableColumn sortColumn=m_tableViewer.getTable().getColumn(0);
  m_tableViewer.getTable().setSortColumn(sortColumn);
  m_tableViewer.getTable().setSortDirection(SWT.DOWN);
  ColumnSortListener sortListener=new ColumnSortListener(m_tableViewer,sortColumn);
  for (  TableColumn col : m_tableViewer.getTable().getColumns()) {
    col.addSelectionListener(sortListener);
  }
  ClientTestFactory.getClientTest().addTestresultSummaryEventListener(this);
  m_tableViewer.setUseHashlookup(true);
  addContextMenu(m_tableViewer,m_headerMenu);
  refreshView();
  m_tableViewer.addFilter(m_filter);
  Plugin.getHelpSystem().setHelp(m_tableViewer.getControl(),ContextHelpIds.TESTRESULT_SUMMARY_VIEW);
  setTableViewerLayout();
  restoreViewStatus();
  m_tableViewer.refresh();
  DataEventDispatcher.getInstance().addTestresultListener(this,true);
  DatabaseStateDispatcher.addDatabaseStateListener(this);
  addDoubleClickListener(m_tableViewer);
}",0.989044200982244
96297,"/** 
 * @return the displayable Languages
 */
private DisplayableLanguages getDisplayableLanguages(){
  if (getTreeViewer().getSelection() instanceof IStructuredSelection) {
    Object firstSelectedElement=((IStructuredSelection)getTreeViewer().getSelection()).getFirstElement();
    if (firstSelectedElement instanceof INodePO) {
      ITestSuitePO testSuite=GuiNodeBP.getTestSuiteOfNode((INodePO)firstSelectedElement);
      List<Locale> langList=WorkingLanguageBP.getInstance().getLanguages(testSuite.getAut());
      if (langList.size() > 0) {
        return new DisplayableLanguages(langList);
      }
      langList=new ArrayList<Locale>(1);
      langList.add(GeneralStorage.getInstance().getProject().getDefaultLanguage());
      return new DisplayableLanguages(langList);
    }
  }
  return new DisplayableLanguages(new ArrayList<Locale>());
}","/** 
 * @return the displayable Languages
 */
private DisplayableLanguages getDisplayableLanguages(){
  ISelection selection=getTreeViewer().getSelection();
  if (selection instanceof IStructuredSelection) {
    Object firstSelectedElement=((IStructuredSelection)selection).getFirstElement();
    if (firstSelectedElement instanceof INodePO) {
      ITestSuitePO testSuite=GuiNodeBP.getTestSuiteOfNode((INodePO)firstSelectedElement);
      if (testSuite != null) {
        List<Locale> langList=WorkingLanguageBP.getInstance().getLanguages(testSuite.getAut());
        if (langList.size() > 0) {
          return new DisplayableLanguages(langList);
        }
        langList=new ArrayList<Locale>(1);
        langList.add(GeneralStorage.getInstance().getProject().getDefaultLanguage());
        return new DisplayableLanguages(langList);
      }
    }
  }
  return new DisplayableLanguages(new ArrayList<Locale>());
}",0.9242937853107344
96298,"/** 
 * {@inheritDoc}
 */
public boolean performDrop(Object data){
  LocalSelectionTransfer transfer=LocalSelectionTransfer.getInstance();
  IStructuredSelection selection=transfer.getSelection();
  Object target=getCurrentTarget();
  if (selection instanceof StructuredSelection) {
    int location=getCurrentLocation();
    if (target == null) {
      target=m_editor.getEditorHelper().getEditSupport().getWorkVersion();
      location=ViewerDropAdapter.LOCATION_ON;
    }
    if (target instanceof INodePO) {
      return TCEditorDndSupport.performDrop(m_editor,selection,(INodePO)target,location);
    }
  }
  return false;
}","/** 
 * {@inheritDoc}
 */
public boolean performDrop(Object data){
  LocalSelectionTransfer transfer=LocalSelectionTransfer.getInstance();
  IStructuredSelection selection=transfer.getSelection();
  Object target=getCurrentTarget();
  if (selection instanceof StructuredSelection) {
    int location=getCurrentLocation();
    if (target == null) {
      target=getFallbackTarget(getViewer());
      location=ViewerDropAdapter.LOCATION_AFTER;
    }
    if (target instanceof INodePO) {
      return TCEditorDndSupport.performDrop(m_editor,selection,(INodePO)target,location);
    }
  }
  return false;
}",0.926076360682372
96299,"/** 
 * {@inheritDoc}
 */
public boolean performDrop(Object data){
  LocalSelectionTransfer transfer=LocalSelectionTransfer.getInstance();
  IStructuredSelection selection=transfer.getSelection();
  Object target=getCurrentTarget();
  int location=getCurrentLocation();
  if (target == null) {
    target=m_editor.getEditorHelper().getEditSupport().getWorkVersion();
    location=ViewerDropAdapter.LOCATION_AFTER;
  }
  if (selection instanceof StructuredSelection && target instanceof INodePO) {
    return TJEditorDndSupport.performDrop(m_editor,selection,(INodePO)target,location);
  }
  return false;
}","/** 
 * {@inheritDoc}
 */
public boolean performDrop(Object data){
  LocalSelectionTransfer transfer=LocalSelectionTransfer.getInstance();
  IStructuredSelection selection=transfer.getSelection();
  Object target=getCurrentTarget();
  int location=getCurrentLocation();
  if (target == null) {
    target=getFallbackTarget(getViewer());
    location=ViewerDropAdapter.LOCATION_AFTER;
  }
  if (selection instanceof StructuredSelection && target instanceof INodePO) {
    return TJEditorDndSupport.performDrop(m_editor,selection,(INodePO)target,location);
  }
  return false;
}",0.9289340101522844
96300,"/** 
 * {@inheritDoc}
 */
public boolean performDrop(Object data){
  LocalSelectionTransfer transfer=LocalSelectionTransfer.getInstance();
  Object target=getCurrentTarget();
  int location=getCurrentLocation();
  if (target == null) {
    target=m_editor.getEditorHelper().getEditSupport().getWorkVersion();
    location=ViewerDropAdapter.LOCATION_AFTER;
  }
  if (target instanceof INodePO) {
    INodePO targetGuiNode=(INodePO)target;
    IStructuredSelection toDrop=transfer.getSelection();
    return TSEditorDndSupport.performDrop(m_editor,toDrop,targetGuiNode,location);
  }
  return false;
}","/** 
 * {@inheritDoc}
 */
public boolean performDrop(Object data){
  LocalSelectionTransfer transfer=LocalSelectionTransfer.getInstance();
  Object target=getCurrentTarget();
  int location=getCurrentLocation();
  if (target == null) {
    target=getFallbackTarget(getViewer());
    location=ViewerDropAdapter.LOCATION_AFTER;
  }
  if (target instanceof INodePO) {
    INodePO targetGuiNode=(INodePO)target;
    IStructuredSelection toDrop=transfer.getSelection();
    return TSEditorDndSupport.performDrop(m_editor,toDrop,targetGuiNode,location);
  }
  return false;
}",0.928082191780822
96301,"/** 
 * Creates the specification part of the editor
 * @param parent Composite.
 */
protected void createMainPart(Composite parent){
  setMainTreeViewer(new TreeViewer(parent));
  m_labelDecorator=new SessionBasedLabelDecorator(this,Plugin.getDefault().getWorkbench().getDecoratorManager().getLabelDecorator());
  DecoratingLabelProvider lp=new DecoratingLabelProvider(new GeneralLabelProvider(),m_labelDecorator);
  lp.setDecorationContext(new JBEditorDecorationContext());
  getMainTreeViewer().setLabelProvider(lp);
  getMainTreeViewer().setUseHashlookup(true);
  JubulaStateController.getInstance().addSelectionListenerToSelectionService();
  getSite().setSelectionProvider(this);
  firePropertyChange(IWorkbenchPartConstants.PROP_INPUT);
}","/** 
 * Creates the specification part of the editor
 * @param parent Composite.
 */
protected void createMainPart(Composite parent){
  setMainTreeViewer(new TreeViewer(parent));
  DecoratingLabelProvider lp=new DecoratingLabelProvider(new GeneralLabelProvider(),Plugin.getDefault().getWorkbench().getDecoratorManager().getLabelDecorator());
  lp.setDecorationContext(new JBEditorDecorationContext());
  m_labelDecorator=new SessionBasedLabelProviderDecoratorWrapper(this,lp.getLabelDecorator(),lp);
  getMainTreeViewer().setLabelProvider(m_labelDecorator);
  getMainTreeViewer().setUseHashlookup(true);
  JubulaStateController.getInstance().addSelectionListenerToSelectionService();
  getSite().setSelectionProvider(this);
  firePropertyChange(IWorkbenchPartConstants.PROP_INPUT);
}",0.7408376963350786
96302,"/** 
 * {@inheritDoc} 
 */
protected void createPartControlImpl(Composite parent){
  createMainPart(parent);
  GridData gridData=new GridData(GridData.FILL_BOTH);
  getMainTreeViewer().getControl().setLayoutData(gridData);
  setControl(getMainTreeViewer().getControl());
  getMainTreeViewer().setContentProvider(new CentralTestDataContentProvider());
  m_labelDecorator=new SessionBasedLabelDecorator(this,Plugin.getDefault().getWorkbench().getDecoratorManager().getLabelDecorator());
  DecoratingLabelProvider lp=new DecoratingLabelProvider(new CentralTestDataLabelProvider(),m_labelDecorator);
  lp.setDecorationContext(new JBEditorDecorationContext());
  getMainTreeViewer().setLabelProvider(lp);
  getMainTreeViewer().setSorter(new ViewerSorter());
  getMainTreeViewer().setComparer(new PersistentObjectComparer());
  addTreeDoubleClickListener(CommandIDs.NEW_TESTDATACUBE_COMMAND_ID);
  addFocusListener(getMainTreeViewer());
  getEditorHelper().addListeners();
  setActionHandlers();
  setInitialInput();
  DataEventDispatcher ded=DataEventDispatcher.getInstance();
  ded.addPropertyChangedListener(this,true);
  ded.addParamChangedListener(this,true);
  GuiEventDispatcher.getInstance().addEditorDirtyStateListener(this,true);
}","/** 
 * {@inheritDoc} 
 */
protected void createPartControlImpl(Composite parent){
  createMainPart(parent);
  GridData gridData=new GridData(GridData.FILL_BOTH);
  getMainTreeViewer().getControl().setLayoutData(gridData);
  setControl(getMainTreeViewer().getControl());
  getMainTreeViewer().setContentProvider(new CentralTestDataContentProvider());
  DecoratingLabelProvider lp=new DecoratingLabelProvider(new CentralTestDataLabelProvider(),Plugin.getDefault().getWorkbench().getDecoratorManager().getLabelDecorator());
  lp.setDecorationContext(new JBEditorDecorationContext());
  m_labelDecorator=new SessionBasedLabelProviderDecoratorWrapper(this,lp.getLabelDecorator(),lp);
  getMainTreeViewer().setLabelProvider(lp);
  getMainTreeViewer().setSorter(new ViewerSorter());
  getMainTreeViewer().setComparer(new PersistentObjectComparer());
  addTreeDoubleClickListener(CommandIDs.NEW_TESTDATACUBE_COMMAND_ID);
  addFocusListener(getMainTreeViewer());
  getEditorHelper().addListeners();
  setActionHandlers();
  setInitialInput();
  DataEventDispatcher ded=DataEventDispatcher.getInstance();
  ded.addPropertyChangedListener(this,true);
  ded.addParamChangedListener(this,true);
  GuiEventDispatcher.getInstance().addEditorDirtyStateListener(this,true);
}",0.8708901363271853
96303,"/** 
 * {@inheritDoc}
 * @param parent
 */
public void createPartControlImpl(Composite parent){
  super.createPartControlImpl(parent);
  m_eventHandlerTreeViewer.setContentProvider(new EventHandlerContentProvider());
  m_eventHandlerTreeViewer.getControl().setMenu(createContextMenu());
  ActionListener actionListener=new ActionListener();
  getTreeViewer().addSelectionChangedListener(actionListener);
  m_labelDecorator=new SessionBasedLabelDecorator(this,Plugin.getDefault().getWorkbench().getDecoratorManager().getLabelDecorator());
  DecoratingLabelProvider ld=new DecoratingLabelProvider(new GeneralLabelProvider(),m_labelDecorator);
  ld.setDecorationContext(new JBEditorDecorationContext());
  getTreeViewer().setLabelProvider(ld);
  getEventHandlerTreeViewer().addSelectionChangedListener(actionListener);
  if (!Plugin.getDefault().anyDirtyStar()) {
    checkAndRemoveUnusedTestData();
  }
}","/** 
 * {@inheritDoc}
 * @param parent
 */
public void createPartControlImpl(Composite parent){
  super.createPartControlImpl(parent);
  m_eventHandlerTreeViewer.setContentProvider(new EventHandlerContentProvider());
  m_eventHandlerTreeViewer.getControl().setMenu(createContextMenu());
  ActionListener actionListener=new ActionListener();
  getTreeViewer().addSelectionChangedListener(actionListener);
  DecoratingLabelProvider ld=new DecoratingLabelProvider(new GeneralLabelProvider(),Plugin.getDefault().getWorkbench().getDecoratorManager().getLabelDecorator());
  ld.setDecorationContext(new JBEditorDecorationContext());
  m_labelDecorator=new SessionBasedLabelProviderDecoratorWrapper(this,ld.getLabelDecorator(),ld);
  getTreeViewer().setLabelProvider(ld);
  getEventHandlerTreeViewer().addSelectionChangedListener(actionListener);
  if (!Plugin.getDefault().anyDirtyStar()) {
    checkAndRemoveUnusedTestData();
  }
}",0.8326039387308534
96304,"/** 
 * Creates the EventHandler part of the editor
 * @param parent Composite
 */
private void createEventHandlerPart(Composite parent){
  Composite headLineComposite=new Composite(parent,SWT.NONE);
  GridLayout layout=new GridLayout(1,true);
  layout.marginWidth=0;
  layout.marginHeight=0;
  layout.marginBottom=0;
  layout.marginTop=0;
  headLineComposite.setLayout(layout);
  Label headLine=new Label(headLineComposite,SWT.NONE);
  headLine.setText(Messages.TestCaseEditorEHAreaHeadline);
  ControlDecorator.decorateInfo(headLine,""String_Node_Str"",false);
  GridData ehTvGridData=new GridData();
  ehTvGridData.grabExcessHorizontalSpace=true;
  ehTvGridData.grabExcessVerticalSpace=true;
  ehTvGridData.horizontalAlignment=SWT.FILL;
  ehTvGridData.verticalAlignment=SWT.FILL;
  ehTvGridData.verticalSpan=100;
  GridLayout ehTvLayout=new GridLayout(1,true);
  ehTvLayout.marginWidth=0;
  ehTvLayout.marginHeight=0;
  ehTvLayout.marginBottom=0;
  ehTvLayout.marginTop=0;
  m_eventHandlerTreeViewer=new TreeViewer(headLineComposite);
  m_eventHandlerTreeViewer.getTree().setLayout(ehTvLayout);
  m_eventHandlerTreeViewer.getTree().setLayoutData(ehTvGridData);
  m_eventHandlerLabelDecorator=new SessionBasedLabelDecorator(this,Plugin.getDefault().getWorkbench().getDecoratorManager().getLabelDecorator());
  m_eventHandlerTreeViewer.setLabelProvider(new DecoratingCellLabelProvider(new GeneralLabelProvider(),m_eventHandlerLabelDecorator));
  m_eventHandlerTreeViewer.setUseHashlookup(true);
  m_eventHandlerTreeViewer.getTree().addListener(SWT.MouseDown,new MouseDownListener());
  JubulaStateController.getInstance().addSelectionListenerToSelectionService();
  firePropertyChange(IWorkbenchPartConstants.PROP_INPUT);
}","/** 
 * Creates the EventHandler part of the editor
 * @param parent Composite
 */
private void createEventHandlerPart(Composite parent){
  Composite headLineComposite=new Composite(parent,SWT.NONE);
  GridLayout layout=new GridLayout(1,true);
  layout.marginWidth=0;
  layout.marginHeight=0;
  layout.marginBottom=0;
  layout.marginTop=0;
  headLineComposite.setLayout(layout);
  Label headLine=new Label(headLineComposite,SWT.NONE);
  headLine.setText(Messages.TestCaseEditorEHAreaHeadline);
  ControlDecorator.decorateInfo(headLine,""String_Node_Str"",false);
  GridData ehTvGridData=new GridData();
  ehTvGridData.grabExcessHorizontalSpace=true;
  ehTvGridData.grabExcessVerticalSpace=true;
  ehTvGridData.horizontalAlignment=SWT.FILL;
  ehTvGridData.verticalAlignment=SWT.FILL;
  ehTvGridData.verticalSpan=100;
  GridLayout ehTvLayout=new GridLayout(1,true);
  ehTvLayout.marginWidth=0;
  ehTvLayout.marginHeight=0;
  ehTvLayout.marginBottom=0;
  ehTvLayout.marginTop=0;
  m_eventHandlerTreeViewer=new TreeViewer(headLineComposite);
  m_eventHandlerTreeViewer.getTree().setLayout(ehTvLayout);
  m_eventHandlerTreeViewer.getTree().setLayoutData(ehTvGridData);
  DecoratingCellLabelProvider lp=new DecoratingCellLabelProvider(new GeneralLabelProvider(),Plugin.getDefault().getWorkbench().getDecoratorManager().getLabelDecorator());
  m_eventHandlerLabelDecorator=new SessionBasedLabelProviderDecoratorWrapper(this,lp.getLabelDecorator(),lp);
  m_eventHandlerTreeViewer.setLabelProvider(m_eventHandlerLabelDecorator);
  m_eventHandlerTreeViewer.setUseHashlookup(true);
  m_eventHandlerTreeViewer.getTree().addListener(SWT.MouseDown,new MouseDownListener());
  JubulaStateController.getInstance().addSelectionListenerToSelectionService();
  firePropertyChange(IWorkbenchPartConstants.PROP_INPUT);
}",0.900824097755044
96305,"/** 
 * {@inheritDoc}
 * @param parent
 */
public void createPartControlImpl(Composite parent){
  super.createPartControlImpl(parent);
  ActionListener actionListener=new ActionListener();
  getTreeViewer().addSelectionChangedListener(actionListener);
  addTreeListener();
  if (!Plugin.getDefault().anyDirtyStar()) {
    checkAndRemoveUnusedTestData();
  }
}","/** 
 * {@inheritDoc}
 * @param parent
 */
public void createPartControlImpl(Composite parent){
  super.createPartControlImpl(parent);
  ActionListener actionListener=new ActionListener();
  getTreeViewer().addSelectionChangedListener(actionListener);
  if (!Plugin.getDefault().anyDirtyStar()) {
    checkAndRemoveUnusedTestData();
  }
}",0.96987087517934
96306,"/** 
 * @return Returns the autGuid.
 */
@Basic @Column(name=""String_Node_Str"",length=4000) public String getInternalAutGuid(){
  return m_autGuid;
}","/** 
 * @return Returns the autGuid.
 */
@Basic @Column(name=""String_Node_Str"",length=32) public String getInternalAutGuid(){
  return m_autGuid;
}",0.9797297297297296
96307,"/** 
 * @return the projectGuid
 */
@Basic @Column(name=""String_Node_Str"",length=4000) public String getInternalProjectGuid(){
  return m_projectGuid;
}","/** 
 * @return the projectGuid
 */
@Basic @Column(name=""String_Node_Str"",length=32) public String getInternalProjectGuid(){
  return m_projectGuid;
}",0.9801324503311258
96308,"/** 
 * @return the tsGuid
 */
@Basic @Column(name=""String_Node_Str"",length=4000) public String getInternalTestsuiteGuid(){
  return m_testsuiteGuid;
}","/** 
 * @return the tsGuid
 */
@Basic @Column(name=""String_Node_Str"",length=32) public String getInternalTestsuiteGuid(){
  return m_testsuiteGuid;
}",0.98
96309,"/** 
 * @return the testJobGuid
 */
@Basic @Column(name=""String_Node_Str"",length=4000) public String getInternalTestJobGuid(){
  return m_testJobGuid;
}","/** 
 * @return the testJobGuid
 */
@Basic @Column(name=""String_Node_Str"",length=32) public String getInternalTestJobGuid(){
  return m_testJobGuid;
}",0.9801324503311258
96310,"/** 
 * @return the autConfGuid
 */
@Basic @Column(name=""String_Node_Str"",length=4000) public String getInternalAutConfigGuid(){
  return m_autConfigGuid;
}","/** 
 * @return the autConfGuid
 */
@Basic @Column(name=""String_Node_Str"",length=32) public String getInternalAutConfigGuid(){
  return m_autConfigGuid;
}",0.9806451612903224
96311,"/** 
 * @return the value
 */
@Basic public String getValue(){
  return super.getValue();
}","/** 
 * @return the value
 */
@Basic @Column(name=""String_Node_Str"") public String getValue(){
  return super.getValue();
}",0.8504672897196262
96312,"/** 
 * @return the type
 */
@Basic public String getType(){
  return super.getType();
}","/** 
 * @return the type
 */
@Basic @Column(name=""String_Node_Str"") public String getType(){
  return super.getType();
}",0.8461538461538461
96313,"/** 
 * {@inheritDoc}
 */
@Basic public String getCategory(){
  return super.getCategory();
}","/** 
 * {@inheritDoc}
 */
@Basic @Column(name=""String_Node_Str"") public String getCategory(){
  return super.getCategory();
}",0.8532110091743119
96314,"/** 
 * Updates the used projects of the model.
 * @param usedProjects The projects that should be used.
 */
void updateProjects(String[] usedProjects) throws PMException {
  Set<IReusedProjectPO> toAdd=new HashSet<IReusedProjectPO>();
  Set<IReusedProjectPO> toRemove=new HashSet<IReusedProjectPO>();
  for (  String displayableProjectId : usedProjects) {
    toAdd.add(m_projectMap.get(displayableProjectId));
  }
  toRemove.addAll(getEditSupport().getWorkProject().getUsedProjects());
  toRemove.removeAll(toAdd);
  toAdd.removeAll(getEditSupport().getWorkProject().getUsedProjects());
  for (  IReusedProjectPO remove : toRemove) {
    getEditSupport().getWorkProject().removeUsedProject(remove);
  }
  boolean isDirty=getEditSupport().getSession().unwrap(JpaEntityManager.class).getUnitOfWork().hasChanges();
  Hibernator.instance().flushSession(getEditSupport().getSession());
  if (isDirty) {
    TimestampBP.refreshTimestamp(getEditSupport().getWorkProject());
  }
  for (  IReusedProjectPO reuse : toAdd) {
    getEditSupport().getWorkProject().addUsedProject(reuse);
  }
}","/** 
 * Updates the used projects of the model.
 * @param usedProjects The projects that should be used.
 */
void updateProjects(String[] usedProjects) throws PMException {
  Set<IReusedProjectPO> toAdd=new HashSet<IReusedProjectPO>();
  Set<IReusedProjectPO> toRemove=new HashSet<IReusedProjectPO>();
  for (  String displayableProjectId : usedProjects) {
    toAdd.add(m_projectMap.get(displayableProjectId));
  }
  toRemove.addAll(getEditSupport().getWorkProject().getUsedProjects());
  toRemove.removeAll(toAdd);
  toAdd.removeAll(getEditSupport().getWorkProject().getUsedProjects());
  for (  IReusedProjectPO remove : toRemove) {
    getEditSupport().getWorkProject().removeUsedProject(remove);
  }
  boolean isDirty=getEditSupport().getSession().unwrap(JpaEntityManager.class).getUnitOfWork().hasChanges();
  Hibernator.instance().flushSession(getEditSupport().getSession());
  if (isDirty) {
    TimestampBP.refreshTimestamp(getEditSupport().getWorkProject());
  }
  for (  IReusedProjectPO reuse : toAdd) {
    getEditSupport().getWorkProject().addUsedProject(reuse);
    reuse.setParentProjectId(getProject().getId());
  }
}",0.9765342960288808
96315,"/** 
 * {@inheritDoc}
 * @throws ExceptionInInitializerError
 * @throws InvocationTargetException
 * @throws NoSuchMethodException
 */
protected void startTasks() throws ExceptionInInitializerError, InvocationTargetException, NoSuchMethodException {
  startToolkitThread();
  addToolKitEventListenerToAUT();
  AUTServer.getInstance().invokeAUT();
}","/** 
 * {@inheritDoc}
 * @throws ExceptionInInitializerError
 * @throws InvocationTargetException
 * @throws NoSuchMethodException
 */
protected void startTasks() throws ExceptionInInitializerError, InvocationTargetException, NoSuchMethodException {
  String edtNameRegEx=EnvironmentUtils.getProcessEnvironment().getProperty(EDT_NAME_REGEX_KEY);
  if (edtNameRegEx == null) {
    edtNameRegEx=System.getProperty(EDT_NAME_REGEX_KEY);
  }
  if (edtNameRegEx != null) {
    try {
      Pattern.compile(edtNameRegEx);
    }
 catch (    PatternSyntaxException pse) {
      throw new InvocationTargetException(pse,""String_Node_Str"" + EDT_NAME_REGEX_KEY + ""String_Node_Str"");
    }
    final String accessibleEdtNameRegEx=edtNameRegEx;
    Thread addListenersThread=new Thread(""String_Node_Str""){
      public void run(){
        boolean isThreadFound=false;
        ThreadGroup rootThreadGroup=Thread.currentThread().getThreadGroup();
        while (rootThreadGroup.getParent() != null) {
          rootThreadGroup=rootThreadGroup.getParent();
        }
        while (!isThreadFound) {
          Thread[] activeThreads=getActiveThreads();
          for (int i=0; i < activeThreads.length; i++) {
            if (activeThreads[i].getName().matches(accessibleEdtNameRegEx)) {
              isThreadFound=true;
              break;
            }
          }
          try {
            Thread.sleep(1000);
          }
 catch (          InterruptedException e) {
          }
        }
        addToolKitEventListenerToAUT();
      }
    }
;
    addListenersThread.setDaemon(true);
    addListenersThread.start();
  }
 else {
    startToolkitThread();
    addToolKitEventListenerToAUT();
  }
  AUTServer.getInstance().invokeAUT();
}",0.2898550724637681
96316,"/** 
 * {@inheritDoc} 
 */
public Object getParent(Object element){
  if (element instanceof INodePO) {
    return ((INodePO)element).getParentNode();
  }
  if (element instanceof ITestSuiteContPO || element instanceof ITestJobContPO || element instanceof IReusedProjectPO) {
    return GeneralStorage.getInstance().getProject();
  }
  if (element instanceof ITestDataCubeContPO || element instanceof ITestDataCubePO || element instanceof SearchResultElement) {
    return null;
  }
  Assert.notReached(Messages.WrongTypeOfElement + StringConstants.EXCLAMATION_MARK);
  return null;
}","/** 
 * {@inheritDoc} 
 */
public Object getParent(Object element){
  if (element instanceof INodePO) {
    INodePO parent=((INodePO)element).getParentNode();
    IProjectPO activeProject=GeneralStorage.getInstance().getProject();
    if (parent instanceof IProjectPO && !parent.equals(activeProject)) {
      String parentGuid=parent.getGuid();
      if (activeProject != null && parentGuid != null) {
        for (        IReusedProjectPO reusedProject : activeProject.getUsedProjects()) {
          if (parentGuid.equals(reusedProject.getProjectGuid())) {
            return reusedProject;
          }
        }
      }
    }
    return parent;
  }
  if (element instanceof ITestSuiteContPO || element instanceof ITestJobContPO || element instanceof IReusedProjectPO) {
    return GeneralStorage.getInstance().getProject();
  }
  if (element instanceof ITestDataCubeContPO || element instanceof ITestDataCubePO || element instanceof SearchResultElement) {
    return null;
  }
  Assert.notReached(Messages.WrongTypeOfElement + StringConstants.EXCLAMATION_MARK);
  return null;
}",0.6906906906906907
96317,"/** 
 * {@inheritDoc}
 */
protected Control createDialogArea(Composite parent){
  setTitle(m_title);
  setMessage(m_message);
  getShell().setText(m_shellTitle);
  setTitleImage(m_image);
  final GridLayout gridLayoutParent=new GridLayout();
  gridLayoutParent.numColumns=NUM_COLUMNS_1;
  gridLayoutParent.verticalSpacing=VERTICAL_SPACING;
  gridLayoutParent.marginWidth=MARGIN_WIDTH;
  gridLayoutParent.marginHeight=MARGIN_HEIGHT;
  parent.setLayout(gridLayoutParent);
  Plugin.createSeparator(parent);
  final Composite area=new Composite(parent,SWT.NULL);
  final GridLayout gridLayout=new GridLayout();
  area.setLayout(gridLayout);
  GridData gridData=new GridData();
  gridData.grabExcessHorizontalSpace=true;
  gridData.grabExcessVerticalSpace=true;
  gridData.horizontalAlignment=GridData.FILL;
  gridData.verticalAlignment=GridData.FILL;
  area.setLayoutData(gridData);
  final FilteredTree ft=new JBFilteredTree(area,m_treeStyle,new JBPatternFilter(),true);
  m_treeViewer=ft.getViewer();
  GridData layoutData=new GridData();
  layoutData.grabExcessHorizontalSpace=true;
  layoutData.grabExcessVerticalSpace=true;
  layoutData.horizontalAlignment=GridData.FILL;
  layoutData.verticalAlignment=GridData.FILL;
  layoutData.heightHint=WIDTH_HINT;
  Layout.addToolTipAndMaxWidth(layoutData,m_treeViewer.getControl());
  m_treeViewer.getControl().setLayoutData(layoutData);
  m_treeViewer.setUseHashlookup(true);
  getInitialInput();
  m_treeViewer.setLabelProvider(new LabelProvider());
  m_treeViewer.setContentProvider(new TestCaseDialogContentProvider());
  m_treeViewer.setInput(GeneralStorage.getInstance().getProject());
  m_treeViewer.setSorter(new GuiNodeNameViewerSorter());
  Plugin.createSeparator(parent);
  return area;
}","/** 
 * {@inheritDoc}
 */
protected Control createDialogArea(Composite parent){
  setTitle(m_title);
  setMessage(m_message);
  getShell().setText(m_shellTitle);
  setTitleImage(m_image);
  final GridLayout gridLayoutParent=new GridLayout();
  gridLayoutParent.numColumns=NUM_COLUMNS_1;
  gridLayoutParent.verticalSpacing=VERTICAL_SPACING;
  gridLayoutParent.marginWidth=MARGIN_WIDTH;
  gridLayoutParent.marginHeight=MARGIN_HEIGHT;
  parent.setLayout(gridLayoutParent);
  Plugin.createSeparator(parent);
  final Composite area=new Composite(parent,SWT.NULL);
  final GridLayout gridLayout=new GridLayout();
  area.setLayout(gridLayout);
  GridData gridData=new GridData();
  gridData.grabExcessHorizontalSpace=true;
  gridData.grabExcessVerticalSpace=true;
  gridData.horizontalAlignment=GridData.FILL;
  gridData.verticalAlignment=GridData.FILL;
  area.setLayoutData(gridData);
  final FilteredTree ft=new JBFilteredTree(area,m_treeStyle,new JBPatternFilter(),true);
  m_treeViewer=ft.getViewer();
  GridData layoutData=new GridData();
  layoutData.grabExcessHorizontalSpace=true;
  layoutData.grabExcessVerticalSpace=true;
  layoutData.horizontalAlignment=GridData.FILL;
  layoutData.verticalAlignment=GridData.FILL;
  layoutData.heightHint=WIDTH_HINT;
  Layout.addToolTipAndMaxWidth(layoutData,m_treeViewer.getControl());
  m_treeViewer.getControl().setLayoutData(layoutData);
  m_treeViewer.setUseHashlookup(true);
  getInitialInput();
  m_treeViewer.setLabelProvider(new LabelProvider());
  m_treeViewer.setContentProvider(new TestCaseDialogContentProvider());
  m_treeViewer.setInput(GeneralStorage.getInstance().getProject());
  m_treeViewer.setSorter(new NodeNameViewerSorter());
  Plugin.createSeparator(parent);
  return area;
}",0.999137683242311
96318,"/** 
 * {@inheritDoc}
 */
public void createPartControl(Composite parent){
  m_parentComposite=parent;
  m_clipboard=new Clipboard(parent.getDisplay());
  GridLayout layout=new GridLayout();
  layout.numColumns=NUM_COLUMNS_1;
  layout.verticalSpacing=VERTICAL_SPACING;
  layout.marginWidth=Layout.MARGIN_WIDTH;
  layout.marginHeight=Layout.MARGIN_HEIGHT;
  parent.setLayout(layout);
  Composite composite=new Composite(parent,SWT.NONE);
  composite.setLayout(layout);
  GridData gridData=new GridData(GridData.HORIZONTAL_ALIGN_FILL | GridData.FILL_BOTH);
  composite.setLayoutData(gridData);
  final FilteredTree ft=new JBFilteredTree(composite,SWT.MULTI | SWT.H_SCROLL | SWT.V_SCROLL| SWT.BORDER,new JBBrowserPatternFilter(),true);
  setTreeViewer(ft.getViewer());
  setTreeFilterText(ft.getFilterControl());
  addTreeListener();
  getTreeViewer().setUseHashlookup(true);
  getTreeViewer().setSorter(new GuiNodeNameViewerSorter());
  GridData layoutData=new GridData();
  layoutData.grabExcessHorizontalSpace=true;
  layoutData.horizontalAlignment=GridData.FILL;
  layoutData=new GridData();
  layoutData.grabExcessHorizontalSpace=true;
  layoutData.grabExcessVerticalSpace=true;
  layoutData.horizontalAlignment=GridData.FILL;
  layoutData.verticalAlignment=GridData.FILL;
  getTreeViewer().getControl().setLayoutData(layoutData);
  getSite().setSelectionProvider(getTreeViewer());
  getTreeViewer().setAutoExpandLevel(DEFAULT_EXPANSION);
  final DataEventDispatcher dispatcher=DataEventDispatcher.getInstance();
  dispatcher.addProjectLoadedListener(this,false);
  dispatcher.addDataChangedListener(this,true);
  getViewSite().getActionBars().getToolBarManager().add(new ToggleLinkingAction());
  getViewSite().getWorkbenchWindow().getPartService().addPartListener(m_partListener);
  setFocus();
}","/** 
 * {@inheritDoc}
 */
public void createPartControl(Composite parent){
  m_parentComposite=parent;
  m_clipboard=new Clipboard(parent.getDisplay());
  GridLayout layout=new GridLayout();
  layout.numColumns=NUM_COLUMNS_1;
  layout.verticalSpacing=VERTICAL_SPACING;
  layout.marginWidth=Layout.MARGIN_WIDTH;
  layout.marginHeight=Layout.MARGIN_HEIGHT;
  parent.setLayout(layout);
  Composite composite=new Composite(parent,SWT.NONE);
  composite.setLayout(layout);
  GridData gridData=new GridData(GridData.HORIZONTAL_ALIGN_FILL | GridData.FILL_BOTH);
  composite.setLayoutData(gridData);
  final FilteredTree ft=new JBFilteredTree(composite,SWT.MULTI | SWT.H_SCROLL | SWT.V_SCROLL| SWT.BORDER,new JBBrowserPatternFilter(),true);
  setTreeViewer(ft.getViewer());
  setTreeFilterText(ft.getFilterControl());
  addTreeListener();
  getTreeViewer().setUseHashlookup(true);
  getTreeViewer().setSorter(new NodeNameViewerSorter());
  GridData layoutData=new GridData();
  layoutData.grabExcessHorizontalSpace=true;
  layoutData.horizontalAlignment=GridData.FILL;
  layoutData=new GridData();
  layoutData.grabExcessHorizontalSpace=true;
  layoutData.grabExcessVerticalSpace=true;
  layoutData.horizontalAlignment=GridData.FILL;
  layoutData.verticalAlignment=GridData.FILL;
  getTreeViewer().getControl().setLayoutData(layoutData);
  getSite().setSelectionProvider(getTreeViewer());
  getTreeViewer().setAutoExpandLevel(DEFAULT_EXPANSION);
  final DataEventDispatcher dispatcher=DataEventDispatcher.getInstance();
  dispatcher.addProjectLoadedListener(this,false);
  dispatcher.addDataChangedListener(this,true);
  getViewSite().getActionBars().getToolBarManager().add(new ToggleLinkingAction());
  getViewSite().getWorkbenchWindow().getPartService().addPartListener(m_partListener);
  setFocus();
}",0.999165971643036
96319,"/** 
 * adds Drag and Drop support for the trees.
 * @param operations The DnD operation types to support.
 * @param transfers The DnD transfer types to support.
 */
protected void addDragAndDropSupport(int operations,Transfer[] transfers){
  getMainTreeViewer().addDragSupport(operations,transfers,new TreeViewerContainerDragSourceListener(getTreeViewer()));
  getMainTreeViewer().addDropSupport(operations,transfers,new TCEditorDropTargetListener(this));
}","/** 
 * adds Drag and Drop support for the trees.
 * @param operations The DnD operation types to support.
 * @param transfers The DnD transfer types to support.
 */
protected void addDragAndDropSupport(int operations,Transfer[] transfers){
  getMainTreeViewer().addDragSupport(operations,transfers,new TreeViewerContainerDragSourceListener(getTreeViewer()));
  getMainTreeViewer().addDropSupport(operations,transfers,getViewerDropAdapter());
}",0.9379157427937916
96320,"/** 
 * {@inheritDoc}
 */
public String getRenderedText(final Object node) throws StepExecutionException {
  return (String)getQueuer().invokeAndWait(""String_Node_Str"",new IRunnable(){
    public Object run(){
      int row=getRowForTreeNode(node);
      JTree tree=(JTree)getTree();
      Component cellRendererComponent=tree.getCellRenderer().getTreeCellRendererComponent(tree,node,false,tree.isExpanded(row),m_model.isLeaf(node),row,false);
      return AbstractSwingImplClass.getRenderedText(cellRendererComponent);
    }
  }
);
}","/** 
 * {@inheritDoc}
 */
public String getRenderedText(final Object node) throws StepExecutionException {
  return (String)getQueuer().invokeAndWait(""String_Node_Str"",new IRunnable(){
    public Object run(){
      int row=getRowForTreeNode(node);
      JTree tree=(JTree)getTree();
      Component cellRendererComponent=tree.getCellRenderer().getTreeCellRendererComponent(tree,node,false,tree.isExpanded(row),m_model.isLeaf(node),row,false);
      return AbstractSwingImplClass.resolveRenderedText(cellRendererComponent);
    }
  }
);
}",0.9906716417910448
96321,"/** 
 * {@inheritDoc}
 */
public void postWindowOpen(){
  super.postWindowOpen();
  for (  IWorkbenchWindow window : PlatformUI.getWorkbench().getWorkbenchWindows()) {
    IWorkbenchPage page=window.getActivePage();
    if (page != null) {
      for (      String actionSetToHide : ACTION_SETS_TO_HIDE) {
        page.hideActionSet(actionSetToHide);
      }
    }
  }
  AbstractUIPlugin plugin=Activator.getDefault();
  ImageRegistry imageRegistry=plugin.getImageRegistry();
  getWindowConfigurer().getWindow().getShell().setImages(new Image[]{imageRegistry.get(Activator.IMAGE_GIF_JB_16_16_ID),imageRegistry.get(Activator.IMAGE_GIF_JB_32_32_ID),imageRegistry.get(Activator.IMAGE_GIF_JB_48_48_ID),imageRegistry.get(Activator.IMAGE_GIF_JB_64_64_ID),imageRegistry.get(Activator.IMAGE_GIF_JB_128_128_ID),imageRegistry.get(Activator.IMAGE_PNG_JB_16_16_ID),imageRegistry.get(Activator.IMAGE_PNG_JB_32_32_ID),imageRegistry.get(Activator.IMAGE_PNG_JB_48_48_ID),imageRegistry.get(Activator.IMAGE_PNG_JB_64_64_ID),imageRegistry.get(Activator.IMAGE_PNG_JB_128_128_ID)});
  Plugin.createStatusLineItems();
  Plugin.showStatusLine((IWorkbenchPart)null);
}","/** 
 * {@inheritDoc}
 */
public void postWindowOpen(){
  super.postWindowOpen();
  for (  IWorkbenchWindow window : PlatformUI.getWorkbench().getWorkbenchWindows()) {
    IWorkbenchPage page=window.getActivePage();
    if (page != null) {
      for (      String actionSetToHide : ACTION_SETS_TO_HIDE) {
        page.hideActionSet(actionSetToHide);
      }
    }
  }
  AbstractUIPlugin plugin=Activator.getDefault();
  ImageRegistry imageRegistry=plugin.getImageRegistry();
  getWindowConfigurer().getWindow().getShell().setImages(new Image[]{imageRegistry.get(Activator.IMAGE_GIF_JB_16_16_ID),imageRegistry.get(Activator.IMAGE_GIF_JB_32_32_ID),imageRegistry.get(Activator.IMAGE_GIF_JB_48_48_ID),imageRegistry.get(Activator.IMAGE_GIF_JB_64_64_ID),imageRegistry.get(Activator.IMAGE_GIF_JB_128_128_ID),imageRegistry.get(Activator.IMAGE_PNG_JB_16_16_ID),imageRegistry.get(Activator.IMAGE_PNG_JB_32_32_ID),imageRegistry.get(Activator.IMAGE_PNG_JB_48_48_ID),imageRegistry.get(Activator.IMAGE_PNG_JB_64_64_ID),imageRegistry.get(Activator.IMAGE_PNG_JB_128_128_ID)});
  Plugin.createStatusLineItems();
  Plugin.showStatusLine((IWorkbenchPart)null);
  ApplicationWindowTitleUpdater updater=new ApplicationWindowTitleUpdater();
  DataEventDispatcher ded=DataEventDispatcher.getInstance();
  ded.addProjectLoadedListener(updater,true);
  ded.addDataChangedListener(updater,true);
  DatabaseStateDispatcher.addDatabaseStateListener(updater);
}",0.8877669902912622
96322,"/** 
 */
public void dispose(){
  if (m_sf != null) {
    try {
      for (      EntityManager sess : m_sessions) {
        if (sess.isOpen()) {
          sess.close();
        }
      }
      m_sessions.clear();
      m_sf.close();
    }
 catch (    Throwable e) {
      log.error(Messages.DisposeOfHibernatorFailed,e);
    }
  }
  instance=null;
}","/** 
 */
public void dispose(){
  if (m_sf != null) {
    try {
      for (      EntityManager sess : m_sessions) {
        if (sess.isOpen()) {
          sess.close();
        }
      }
      m_sessions.clear();
      m_sf.close();
      DatabaseStateDispatcher.notifyListener(new DatabaseStateEvent(DatabaseState.DB_LOGOUT_SUCCEEDED));
    }
 catch (    Throwable e) {
      log.error(Messages.DisposeOfHibernatorFailed,e);
    }
  }
  instance=null;
}",0.8692403486924035
96323,"/** 
 * Notifies all progressListeners of the progress listener list and calls <code>progressListener.reactOnProgressEvent(ProgressEvent e)</code>
 * @param e the progressEvent
 */
public static void notifyListener(DatabaseStateEvent e){
  Iterator iter=getListeners().iterator();
  while (iter.hasNext()) {
    IDatabaseStateListener progressListener=(IDatabaseStateListener)iter.next();
    if (progressListener != null) {
      progressListener.reactOnProgressEvent(e);
    }
 else {
      if (listener != null) {
        listener.remove(progressListener);
      }
    }
  }
}","/** 
 * Notifies all progressListeners of the progress listener list and calls <code>progressListener.reactOnProgressEvent(ProgressEvent e)</code>
 * @param e the progressEvent
 */
public static void notifyListener(DatabaseStateEvent e){
  Iterator iter=getListeners().iterator();
  while (iter.hasNext()) {
    IDatabaseStateListener progressListener=(IDatabaseStateListener)iter.next();
    if (progressListener != null) {
      progressListener.reactOnDatabaseEvent(e);
    }
 else {
      if (listener != null) {
        listener.remove(progressListener);
      }
    }
  }
}",0.9861830742659758
96324,"/** 
 * Imports a choosed project from a file.
 * @param elements What to import ? 0 = all >0 = elements
 * @param fileNames The names of the files to import.
 * @param openProject Flag indicating whether the imported project should be  immediately opened after import.
 */
public void importProject(final int elements,final String[] fileNames,final boolean openProject){
  try {
    if (fileNames == null) {
      return;
    }
    AbstractRunnableWithProgress<IProjectPO> importProjectRunnable=new AbstractRunnableWithProgress<IProjectPO>(){
      public void run(      IProgressMonitor monitor) throws InterruptedException {
        monitor.setTaskName(Messages.ImportFileBPWaitWhileImporting);
        try {
          setResult(FileStorageBP.importProject(elements,fileNames,monitor,Plugin.getDefault(),openProject));
        }
 catch (        PMException pme) {
          PMExceptionHandler.handlePMExceptionForMasterSession(pme);
        }
catch (        ProjectDeletedException gdpde) {
          PMExceptionHandler.handleGDProjectDeletedException();
        }
      }
    }
;
    PlatformUI.getWorkbench().getProgressService().busyCursorWhile(importProjectRunnable);
    final IProjectPO projectToOpen=importProjectRunnable.getResult();
    if (projectToOpen != null) {
      OpenProjectOperation openOp=new OpenProjectHandler.OpenProjectOperation(projectToOpen);
      try {
        PlatformUI.getWorkbench().getProgressService().busyCursorWhile(openOp);
        Plugin.getDisplay().syncExec(new Runnable(){
          public void run(){
            Plugin.setProjectNameInTitlebar(projectToOpen.getName(),projectToOpen.getMajorProjectVersion(),projectToOpen.getMinorProjectVersion());
          }
        }
);
      }
 catch (      InvocationTargetException ite) {
        log.error(org.eclipse.jubula.client.ui.i18n.Messages.ErrorOccurredDuringImport,ite.getCause());
        openOp.handleOperationException();
      }
catch (      InterruptedException e) {
        openOp.handleOperationException();
      }
    }
  }
 catch (  InvocationTargetException ite) {
    log.error(org.eclipse.jubula.client.ui.i18n.Messages.ErrorOccurredDuringImport,ite.getCause());
  }
catch (  InterruptedException e) {
    showCancelImport(Plugin.getDefault());
  }
 finally {
    Plugin.stopLongRunning();
  }
}","/** 
 * Imports a choosed project from a file.
 * @param elements What to import ? 0 = all >0 = elements
 * @param fileNames The names of the files to import.
 * @param openProject Flag indicating whether the imported project should be  immediately opened after import.
 */
public void importProject(final int elements,final String[] fileNames,final boolean openProject){
  try {
    if (fileNames == null) {
      return;
    }
    AbstractRunnableWithProgress<IProjectPO> importProjectRunnable=new AbstractRunnableWithProgress<IProjectPO>(){
      public void run(      IProgressMonitor monitor) throws InterruptedException {
        monitor.setTaskName(Messages.ImportFileBPWaitWhileImporting);
        try {
          setResult(FileStorageBP.importProject(elements,fileNames,monitor,Plugin.getDefault(),openProject));
        }
 catch (        PMException pme) {
          PMExceptionHandler.handlePMExceptionForMasterSession(pme);
        }
catch (        ProjectDeletedException gdpde) {
          PMExceptionHandler.handleGDProjectDeletedException();
        }
      }
    }
;
    PlatformUI.getWorkbench().getProgressService().busyCursorWhile(importProjectRunnable);
    final IProjectPO projectToOpen=importProjectRunnable.getResult();
    if (projectToOpen != null) {
      OpenProjectOperation openOp=new OpenProjectHandler.OpenProjectOperation(projectToOpen);
      try {
        PlatformUI.getWorkbench().getProgressService().busyCursorWhile(openOp);
      }
 catch (      InvocationTargetException ite) {
        log.error(org.eclipse.jubula.client.ui.i18n.Messages.ErrorOccurredDuringImport,ite.getCause());
        openOp.handleOperationException();
      }
catch (      InterruptedException e) {
        openOp.handleOperationException();
      }
    }
  }
 catch (  InvocationTargetException ite) {
    log.error(org.eclipse.jubula.client.ui.i18n.Messages.ErrorOccurredDuringImport,ite.getCause());
  }
catch (  InterruptedException e) {
    showCancelImport(Plugin.getDefault());
  }
 finally {
    Plugin.stopLongRunning();
  }
}",0.7842866988283942
96325,"/** 
 * call this if the ""save as"" has ended to update the GUI.
 */
private void fireReady(){
  DataEventDispatcher dispatcher=DataEventDispatcher.getInstance();
  dispatcher.fireProjectLoadedListener(new NullProgressMonitor());
  IProjectPO project=GeneralStorage.getInstance().getProject();
  if (project != null) {
    Plugin.setProjectNameInTitlebar(project.getName(),project.getMajorProjectVersion(),project.getMinorProjectVersion());
  }
  dispatcher.fireProjectOpenedListener();
}","/** 
 * call this if the ""save as"" has ended to update the GUI.
 */
private void fireReady(){
  DataEventDispatcher dispatcher=DataEventDispatcher.getInstance();
  dispatcher.fireProjectLoadedListener(new NullProgressMonitor());
  dispatcher.fireProjectOpenedListener();
}",0.6429512516469038
96326,"/** 
 * Opens the ""New Project Wizard"".
 */
private void openNewProjectWizard(){
  Display.getDefault().asyncExec(new Runnable(){
    public void run(){
      final ProjectWizard projectWizard=new ProjectWizard();
      projectWizard.init(null,null);
      WizardDialog dialog=new WizardDialog(Plugin.getShell(),projectWizard){
        /** 
 * {@inheritDoc}
 */
        protected void finishPressed(){
          String selectedToolkit=projectWizard.getAutSettingWizardPage().getToolkitComboBox().getSelectedObject();
          if (selectedToolkit == null) {
            selectedToolkit=projectWizard.getProjectSettingWizardPage().getToolkitComboBox().getSelectedObject();
          }
          createWizardNagDialog(selectedToolkit);
          super.finishPressed();
        }
        /** 
 * {@inheritDoc}
 */
        protected void nextPressed(){
          if (projectWizard.getPage(projectWizard.getAutConfigSettingWpID()).equals(super.getCurrentPage())) {
            String selectedToolkit=projectWizard.getAutSettingWizardPage().getToolkitComboBox().getSelectedObject();
            if (selectedToolkit == null) {
              selectedToolkit=projectWizard.getProjectSettingWizardPage().getToolkitComboBox().getSelectedObject();
            }
            createWizardNagDialog(selectedToolkit);
          }
          super.nextPressed();
        }
      }
;
      dialog.open();
      if (dialog.getReturnCode() == Window.OK) {
        final IProjectPO project=GeneralStorage.getInstance().getProject();
        IRunnableWithProgress op=new OpenProjectHandler.OpenProjectOperation(project);
        try {
          PlatformUI.getWorkbench().getProgressService().busyCursorWhile(op);
          Plugin.getDisplay().syncExec(new Runnable(){
            public void run(){
              Plugin.setProjectNameInTitlebar(project.getName(),project.getMajorProjectVersion(),project.getMinorProjectVersion());
            }
          }
);
        }
 catch (        InvocationTargetException e) {
        }
catch (        InterruptedException e) {
        }
      }
    }
  }
);
}","/** 
 * Opens the ""New Project Wizard"".
 */
private void openNewProjectWizard(){
  Display.getDefault().asyncExec(new Runnable(){
    public void run(){
      final ProjectWizard projectWizard=new ProjectWizard();
      projectWizard.init(null,null);
      WizardDialog dialog=new WizardDialog(Plugin.getShell(),projectWizard){
        /** 
 * {@inheritDoc}
 */
        protected void finishPressed(){
          String selectedToolkit=projectWizard.getAutSettingWizardPage().getToolkitComboBox().getSelectedObject();
          if (selectedToolkit == null) {
            selectedToolkit=projectWizard.getProjectSettingWizardPage().getToolkitComboBox().getSelectedObject();
          }
          createWizardNagDialog(selectedToolkit);
          super.finishPressed();
        }
        /** 
 * {@inheritDoc}
 */
        protected void nextPressed(){
          if (projectWizard.getPage(projectWizard.getAutConfigSettingWpID()).equals(super.getCurrentPage())) {
            String selectedToolkit=projectWizard.getAutSettingWizardPage().getToolkitComboBox().getSelectedObject();
            if (selectedToolkit == null) {
              selectedToolkit=projectWizard.getProjectSettingWizardPage().getToolkitComboBox().getSelectedObject();
            }
            createWizardNagDialog(selectedToolkit);
          }
          super.nextPressed();
        }
      }
;
      dialog.open();
      if (dialog.getReturnCode() == Window.OK) {
        final IProjectPO project=GeneralStorage.getInstance().getProject();
        IRunnableWithProgress op=new OpenProjectHandler.OpenProjectOperation(project);
        try {
          PlatformUI.getWorkbench().getProgressService().busyCursorWhile(op);
        }
 catch (        InvocationTargetException e) {
        }
catch (        InterruptedException e) {
        }
      }
    }
  }
);
}",0.8988994113130279
96327,"public void run(){
  Plugin.setProjectNameInTitlebar(project.getName(),project.getMajorProjectVersion(),project.getMinorProjectVersion());
}","public void run(){
  final ProjectWizard projectWizard=new ProjectWizard();
  projectWizard.init(null,null);
  WizardDialog dialog=new WizardDialog(Plugin.getShell(),projectWizard){
    /** 
 * {@inheritDoc}
 */
    protected void finishPressed(){
      String selectedToolkit=projectWizard.getAutSettingWizardPage().getToolkitComboBox().getSelectedObject();
      if (selectedToolkit == null) {
        selectedToolkit=projectWizard.getProjectSettingWizardPage().getToolkitComboBox().getSelectedObject();
      }
      createWizardNagDialog(selectedToolkit);
      super.finishPressed();
    }
    /** 
 * {@inheritDoc}
 */
    protected void nextPressed(){
      if (projectWizard.getPage(projectWizard.getAutConfigSettingWpID()).equals(super.getCurrentPage())) {
        String selectedToolkit=projectWizard.getAutSettingWizardPage().getToolkitComboBox().getSelectedObject();
        if (selectedToolkit == null) {
          selectedToolkit=projectWizard.getProjectSettingWizardPage().getToolkitComboBox().getSelectedObject();
        }
        createWizardNagDialog(selectedToolkit);
      }
      super.nextPressed();
    }
  }
;
  dialog.open();
  if (dialog.getReturnCode() == Window.OK) {
    final IProjectPO project=GeneralStorage.getInstance().getProject();
    IRunnableWithProgress op=new OpenProjectHandler.OpenProjectOperation(project);
    try {
      PlatformUI.getWorkbench().getProgressService().busyCursorWhile(op);
    }
 catch (    InvocationTargetException e) {
    }
catch (    InterruptedException e) {
    }
  }
}",0.0333531864204883
96328,"/** 
 * Opens a dialog to select a project to open.
 */
void selectProjects(){
  if (GeneralStorage.getInstance().getProject() != null && Plugin.getDefault().anyDirtyStar() && !Plugin.getDefault().showSaveEditorDialog()) {
    Plugin.stopLongRunning();
    return;
  }
  List<IProjectPO> projList=null;
  try {
    projList=ProjectPM.findAllProjects();
    if (projList.isEmpty()) {
      Display.getDefault().asyncExec(new Runnable(){
        public void run(){
          Utils.createMessageDialog(MessageIDs.I_NO_PROJECT_IN_DB);
        }
      }
);
      Plugin.stopLongRunning();
      return;
    }
    SortedMap<String,List<String>> projNameToVersionMap=new TreeMap<String,List<String>>();
    for (    IProjectPO proj : projList) {
      String projName=proj.getName();
      String projVersion=proj.getVersionString();
      if (!projNameToVersionMap.containsKey(projName)) {
        projNameToVersionMap.put(projName,new ArrayList<String>());
      }
      projNameToVersionMap.get(projName).add(projVersion);
    }
    ProjectDialog dialog=openProjectSelectionDialog(projList);
    if (dialog.getReturnCode() == Window.CANCEL) {
      Plugin.stopLongRunning();
      return;
    }
    final IProjectPO selectedProject=dialog.getSelection();
    OpenProjectOperation openOperation=new OpenProjectOperation(selectedProject);
    try {
      PlatformUI.getWorkbench().getProgressService().busyCursorWhile(openOperation);
      Plugin.getDisplay().syncExec(new Runnable(){
        public void run(){
          Plugin.setProjectNameInTitlebar(selectedProject.getName(),selectedProject.getMajorProjectVersion(),selectedProject.getMinorProjectVersion());
        }
      }
);
      checkAndNagForMissingProjects();
    }
 catch (    InvocationTargetException ite) {
      openOperation.handleOperationException();
    }
catch (    InterruptedException ie) {
      openOperation.handleOperationException();
    }
  }
 catch (  final JBException e) {
    Display.getDefault().asyncExec(new Runnable(){
      public void run(){
        Utils.createMessageDialog(e,null,null);
      }
    }
);
    return;
  }
}","/** 
 * Opens a dialog to select a project to open.
 */
void selectProjects(){
  if (GeneralStorage.getInstance().getProject() != null && Plugin.getDefault().anyDirtyStar() && !Plugin.getDefault().showSaveEditorDialog()) {
    Plugin.stopLongRunning();
    return;
  }
  List<IProjectPO> projList=null;
  try {
    projList=ProjectPM.findAllProjects();
    if (projList.isEmpty()) {
      Display.getDefault().asyncExec(new Runnable(){
        public void run(){
          Utils.createMessageDialog(MessageIDs.I_NO_PROJECT_IN_DB);
        }
      }
);
      Plugin.stopLongRunning();
      return;
    }
    SortedMap<String,List<String>> projNameToVersionMap=new TreeMap<String,List<String>>();
    for (    IProjectPO proj : projList) {
      String projName=proj.getName();
      String projVersion=proj.getVersionString();
      if (!projNameToVersionMap.containsKey(projName)) {
        projNameToVersionMap.put(projName,new ArrayList<String>());
      }
      projNameToVersionMap.get(projName).add(projVersion);
    }
    ProjectDialog dialog=openProjectSelectionDialog(projList);
    if (dialog.getReturnCode() == Window.CANCEL) {
      Plugin.stopLongRunning();
      return;
    }
    final IProjectPO selectedProject=dialog.getSelection();
    OpenProjectOperation openOperation=new OpenProjectOperation(selectedProject);
    try {
      PlatformUI.getWorkbench().getProgressService().busyCursorWhile(openOperation);
      checkAndNagForMissingProjects();
    }
 catch (    InvocationTargetException ite) {
      openOperation.handleOperationException();
    }
catch (    InterruptedException ie) {
      openOperation.handleOperationException();
    }
  }
 catch (  final JBException e) {
    Display.getDefault().asyncExec(new Runnable(){
      public void run(){
        Utils.createMessageDialog(e,null,null);
      }
    }
);
    return;
  }
}",0.9367598891408416
96329,"/** 
 * call this if the ""save as"" has ended to update the GUI.
 */
private void fireReady(){
  DataEventDispatcher dispatcher=DataEventDispatcher.getInstance();
  dispatcher.fireProjectLoadedListener(new NullProgressMonitor());
  IProjectPO project=GeneralStorage.getInstance().getProject();
  Plugin.setProjectNameInTitlebar(project.getName(),project.getMajorProjectVersion(),project.getMinorProjectVersion());
  dispatcher.fireProjectOpenedListener();
}","/** 
 * call this if the ""save as"" has ended to update the GUI.
 */
private void fireReady(){
  DataEventDispatcher dispatcher=DataEventDispatcher.getInstance();
  dispatcher.fireProjectLoadedListener(new NullProgressMonitor());
  dispatcher.fireProjectOpenedListener();
}",0.6703296703296703
96330,"/** 
 * {@inheritDoc}
 */
public boolean performOk(){
  try {
    if (!m_oldProjectName.equals(m_newProjectName)) {
      if (ProjectPM.doesProjectNameExist(m_newProjectName)) {
        Utils.createMessageDialog(MessageIDs.E_PROJECTNAME_ALREADY_EXISTS,new Object[]{m_newProjectName},null);
        return false;
      }
    }
    if (m_isReusableCheckbox != null) {
      getProject().setIsReusable(m_isReusableCheckbox.getSelection());
    }
    if (m_isProtectedCheckbox != null) {
      getProject().setIsProtected(m_isProtectedCheckbox.getSelection());
    }
    storeAutoTestResultCleanup();
    if (!m_oldProjectName.equals(m_newProjectName)) {
      ProjectNameBP.getInstance().setName(getEditSupport().getSession(),getProject().getGuid(),m_newProjectName);
    }
    fireOkPressed();
    Set<IReusedProjectPO> origReused=((IProjectPropertiesPO)getEditSupport().getOriginal()).getUsedProjects();
    Set<IReusedProjectPO> newReused=new HashSet<IReusedProjectPO>(((IProjectPropertiesPO)getEditSupport().getWorkVersion()).getUsedProjects());
    newReused.removeAll(origReused);
    getEditSupport().saveWorkVersion();
    refreshAutMainList();
    DataEventDispatcher.getInstance().fireProjectPropertiesModified();
    for (    IReusedProjectPO reused : newReused) {
      try {
        IProjectPO reusedProject=ProjectPM.loadReusedProject(reused);
        ComponentNamesBP.getInstance().refreshNames(reusedProject.getId());
      }
 catch (      JBException e) {
        log.error(Messages.ErrorWhileRetrievingReusedProjectInformation,e);
      }
    }
    DataEventDispatcher.getInstance().fireDataChangedListener(PoMaker.createReusedProjectPO(""String_Node_Str"",1,1),DataState.ReuseChanged,UpdateState.notInEditor);
    DataEventDispatcher.getInstance().fireDataChangedListener(GeneralStorage.getInstance().getProject(),DataState.Renamed,UpdateState.notInEditor);
    IProjectPO project=getProject();
    Plugin.setProjectNameInTitlebar(project.getName(),project.getMajorProjectVersion(),project.getMinorProjectVersion());
  }
 catch (  PMException e) {
    Utils.createMessageDialog(e,null,null);
  }
catch (  ProjectDeletedException e) {
    PMExceptionHandler.handleGDProjectDeletedException();
  }
catch (  IncompatibleTypeException ite) {
    Utils.createMessageDialog(ite,ite.getErrorMessageParams(),null);
  }
  return true;
}","/** 
 * {@inheritDoc}
 */
public boolean performOk(){
  try {
    if (!m_oldProjectName.equals(m_newProjectName)) {
      if (ProjectPM.doesProjectNameExist(m_newProjectName)) {
        Utils.createMessageDialog(MessageIDs.E_PROJECTNAME_ALREADY_EXISTS,new Object[]{m_newProjectName},null);
        return false;
      }
    }
    if (m_isReusableCheckbox != null) {
      getProject().setIsReusable(m_isReusableCheckbox.getSelection());
    }
    if (m_isProtectedCheckbox != null) {
      getProject().setIsProtected(m_isProtectedCheckbox.getSelection());
    }
    storeAutoTestResultCleanup();
    if (!m_oldProjectName.equals(m_newProjectName)) {
      ProjectNameBP.getInstance().setName(getEditSupport().getSession(),getProject().getGuid(),m_newProjectName);
    }
    fireOkPressed();
    Set<IReusedProjectPO> origReused=((IProjectPropertiesPO)getEditSupport().getOriginal()).getUsedProjects();
    Set<IReusedProjectPO> newReused=new HashSet<IReusedProjectPO>(((IProjectPropertiesPO)getEditSupport().getWorkVersion()).getUsedProjects());
    newReused.removeAll(origReused);
    getEditSupport().saveWorkVersion();
    refreshAutMainList();
    DataEventDispatcher.getInstance().fireProjectPropertiesModified();
    for (    IReusedProjectPO reused : newReused) {
      try {
        IProjectPO reusedProject=ProjectPM.loadReusedProject(reused);
        ComponentNamesBP.getInstance().refreshNames(reusedProject.getId());
      }
 catch (      JBException e) {
        log.error(Messages.ErrorWhileRetrievingReusedProjectInformation,e);
      }
    }
    DataEventDispatcher.getInstance().fireDataChangedListener(PoMaker.createReusedProjectPO(""String_Node_Str"",1,1),DataState.ReuseChanged,UpdateState.notInEditor);
    DataEventDispatcher.getInstance().fireDataChangedListener(GeneralStorage.getInstance().getProject(),DataState.Renamed,UpdateState.notInEditor);
  }
 catch (  PMException e) {
    Utils.createMessageDialog(e,null,null);
  }
catch (  ProjectDeletedException e) {
    PMExceptionHandler.handleGDProjectDeletedException();
  }
catch (  IncompatibleTypeException ite) {
    Utils.createMessageDialog(ite,ite.getErrorMessageParams(),null);
  }
  return true;
}",0.9648463409241652
96331,"/** 
 * clears the content of client
 */
public static void clearClient(){
  final DataEventDispatcher ded=DataEventDispatcher.getInstance();
  TestExecution.getInstance().stopExecution();
  GeneralStorage gs=GeneralStorage.getInstance();
  if (gs != null && Hibernator.instance() != null) {
    IProjectPO currProj=gs.getProject();
    if (currProj != null) {
      gs.setProject(null);
      ded.fireDataChangedListener(currProj,DataState.Deleted,UpdateState.all);
    }
    gs.reset();
  }
  Plugin.getDisplay().syncExec(new Runnable(){
    public void run(){
      TestExecutionContributor.getInstance().getClientTest().resetToTesting();
      ded.fireRecordModeStateChanged(RecordModeState.notRunning);
      ded.fireOMStateChanged(OMState.notRunning);
      Plugin.setProjectNameInTitlebar(null,null,null);
      Plugin.closeAllOpenedJubulaEditors();
      ded.fireTestresultChanged(TestresultState.Refresh);
      setTreeViewerInputNull(Constants.TESTRE_ID);
      setTreeViewerInputNull(Constants.TC_BROWSER_ID);
      setTreeViewerInputNull(Constants.TS_BROWSER_ID);
      setTreeViewerInputNull(Constants.COMPNAMEBROWSER_ID);
    }
  }
);
  ded.fireProjectLoadedListener(new NullProgressMonitor());
}","/** 
 * clears the content of client
 */
public static void clearClient(){
  final DataEventDispatcher ded=DataEventDispatcher.getInstance();
  TestExecution.getInstance().stopExecution();
  GeneralStorage gs=GeneralStorage.getInstance();
  if (gs != null && Hibernator.instance() != null) {
    IProjectPO currProj=gs.getProject();
    if (currProj != null) {
      gs.setProject(null);
      ded.fireDataChangedListener(currProj,DataState.Deleted,UpdateState.all);
    }
    gs.reset();
  }
  Plugin.getDisplay().syncExec(new Runnable(){
    public void run(){
      TestExecutionContributor.getInstance().getClientTest().resetToTesting();
      ded.fireRecordModeStateChanged(RecordModeState.notRunning);
      ded.fireOMStateChanged(OMState.notRunning);
      Plugin.closeAllOpenedJubulaEditors();
      ded.fireTestresultChanged(TestresultState.Refresh);
      setTreeViewerInputNull(Constants.TESTRE_ID);
      setTreeViewerInputNull(Constants.TC_BROWSER_ID);
      setTreeViewerInputNull(Constants.TS_BROWSER_ID);
      setTreeViewerInputNull(Constants.COMPNAMEBROWSER_ID);
    }
  }
);
  ded.fireProjectLoadedListener(new NullProgressMonitor());
}",0.9767441860465116
96332,"/** 
 * Creates a new project, stops a started AUT, closes all opened editors.
 * @param newProjectName the name for this project
 * @param monitor The progress monitor for this potentially long-running operation.
 * @throws InterruptedException if the operation is canceled.
 */
private void createNewProject(final String newProjectName,IProgressMonitor monitor) throws InterruptedException {
  Plugin.closeAllOpenedJubulaEditors();
  Plugin.getDisplay().syncExec(new Runnable(){
    public void run(){
      Plugin.setProjectNameInTitlebar(newProjectName,m_newProject.getMajorProjectVersion(),m_newProject.getMinorProjectVersion());
    }
  }
);
  m_newProject.setIsReusable(m_projectSettingWizardPage.isProjectReusable());
  m_newProject.setIsProtected(m_projectSettingWizardPage.isProjectProtected());
  if (m_autMain.getName() == null || StringConstants.EMPTY.equals(m_autMain.getName())) {
    m_newProject.removeAUTMain(m_autMain);
  }
  if (m_autConfig.getName() == null || StringConstants.EMPTY.equals(m_autConfig.getName())) {
    m_autMain.removeAutConfig(m_autConfig);
  }
  ParamNameBPDecorator paramNameMapper=new ParamNameBPDecorator(ParamNameBP.getInstance());
  final IWritableComponentNameMapper compNamesMapper=new ProjectComponentNameMapper(new ComponentNamesDecorator(null),m_newProject);
  List<INameMapper> mapperList=new ArrayList<INameMapper>();
  List<IWritableComponentNameMapper> compNameCacheList=new ArrayList<IWritableComponentNameMapper>();
  addUnboundModules(m_newProject);
  mapperList.add(paramNameMapper);
  compNameCacheList.add(compNamesMapper);
  try {
    GeneralStorage.getInstance().reset();
    ProjectPM.attachProjectToROSession(m_newProject,newProjectName,mapperList,compNameCacheList,monitor);
  }
 catch (  PMSaveException e) {
    PMExceptionHandler.handlePMExceptionForMasterSession(new PMSaveException(e.getMessage(),MessageIDs.E_CREATE_NEW_PROJECT_FAILED));
  }
catch (  PMException e) {
    PMExceptionHandler.handlePMExceptionForMasterSession(e);
  }
catch (  ProjectDeletedException e) {
    PMExceptionHandler.handleGDProjectDeletedException();
  }
catch (  InterruptedException ie) {
    throw ie;
  }
}","/** 
 * Creates a new project, stops a started AUT, closes all opened editors.
 * @param newProjectName the name for this project
 * @param monitor The progress monitor for this potentially long-running operation.
 * @throws InterruptedException if the operation is canceled.
 */
private void createNewProject(final String newProjectName,IProgressMonitor monitor) throws InterruptedException {
  Plugin.closeAllOpenedJubulaEditors();
  m_newProject.setIsReusable(m_projectSettingWizardPage.isProjectReusable());
  m_newProject.setIsProtected(m_projectSettingWizardPage.isProjectProtected());
  if (m_autMain.getName() == null || StringConstants.EMPTY.equals(m_autMain.getName())) {
    m_newProject.removeAUTMain(m_autMain);
  }
  if (m_autConfig.getName() == null || StringConstants.EMPTY.equals(m_autConfig.getName())) {
    m_autMain.removeAutConfig(m_autConfig);
  }
  ParamNameBPDecorator paramNameMapper=new ParamNameBPDecorator(ParamNameBP.getInstance());
  final IWritableComponentNameMapper compNamesMapper=new ProjectComponentNameMapper(new ComponentNamesDecorator(null),m_newProject);
  List<INameMapper> mapperList=new ArrayList<INameMapper>();
  List<IWritableComponentNameMapper> compNameCacheList=new ArrayList<IWritableComponentNameMapper>();
  addUnboundModules(m_newProject);
  mapperList.add(paramNameMapper);
  compNameCacheList.add(compNamesMapper);
  try {
    GeneralStorage.getInstance().reset();
    ProjectPM.attachProjectToROSession(m_newProject,newProjectName,mapperList,compNameCacheList,monitor);
  }
 catch (  PMSaveException e) {
    PMExceptionHandler.handlePMExceptionForMasterSession(new PMSaveException(e.getMessage(),MessageIDs.E_CREATE_NEW_PROJECT_FAILED));
  }
catch (  PMException e) {
    PMExceptionHandler.handlePMExceptionForMasterSession(e);
  }
catch (  ProjectDeletedException e) {
    PMExceptionHandler.handleGDProjectDeletedException();
  }
catch (  InterruptedException ie) {
    throw ie;
  }
}",0.9478811495372624
96333,"public void run(){
  Plugin.setProjectNameInTitlebar(newProjectName,m_newProject.getMajorProjectVersion(),m_newProject.getMinorProjectVersion());
}","public void run(IProgressMonitor monitor) throws InterruptedException {
  monitor.beginTask(NLS.bind(Messages.ProjectWizardCreatingProject,new Object[]{name}),IProgressMonitor.UNKNOWN);
  try {
    createNewProject(name,monitor);
    m_newProject=null;
  }
  finally {
    monitor.done();
  }
}",0.1451247165532879
96334,"/** 
 * Add an existing SpecTC to another SpecTC by reference. Lock the TC if this is the first usage to prevent accidental deletion before the editor is saved.
 * @param editSupport holds the DB session for locking purposes
 * @param targetTC TC where the reference shall be added.
 * @param referencedTC TC to be used as a reference.
 * @param position Index position for the ExecTC, null means append.
 * @throws PMAlreadyLockedException if the referenced TC was neverreferenced before and is edited by another user.
 * @throws PMDirtyVersionException if the referenced TC was modified
 * @throws PMObjectDeletedException if the po as deleted by another concurrently working user
 * @return The ExecTC used to reference the SpecTC
 */
public static IExecTestCasePO addReferencedTestCase(EditSupport editSupport,INodePO targetTC,ISpecTestCasePO referencedTC,Integer position) throws PMAlreadyLockedException, PMDirtyVersionException, PMObjectDeletedException {
  handleFirstReference(editSupport,referencedTC,false);
  IExecTestCasePO newExecTC=NodeMaker.createExecTestCasePO(referencedTC);
  if (position != null) {
    targetTC.addNode(position.intValue(),newExecTC);
  }
 else {
    targetTC.addNode(newExecTC);
  }
  return newExecTC;
}","/** 
 * Add an existing SpecTC to another SpecTC by reference. Lock the TC if this is the first usage to prevent accidental deletion before the editor is saved.
 * @param editSupport holds the DB session for locking purposes
 * @param targetTC TC where the reference shall be added.
 * @param referencedTC TC to be used as a reference.
 * @param position Index position for the ExecTC, null means append.
 * @throws PMAlreadyLockedException if the referenced TC was neverreferenced before and is edited by another user.
 * @throws PMDirtyVersionException if the referenced TC was modified
 * @throws PMObjectDeletedException if the po as deleted by another concurrently working user
 * @return The ExecTC used to reference the SpecTC
 */
public static IExecTestCasePO addReferencedTestCase(EditSupport editSupport,INodePO targetTC,ISpecTestCasePO referencedTC,Integer position) throws PMAlreadyLockedException, PMDirtyVersionException, PMObjectDeletedException {
  handleFirstReference(editSupport,referencedTC,false);
  IExecTestCasePO newExecTC=NodeMaker.createExecTestCasePO(referencedTC);
  if (position != null) {
    targetTC.addNode(position.intValue(),newExecTC);
  }
 else {
    targetTC.addNode(newExecTC);
  }
  DataEventDispatcher.getInstance().fireDataChangedListener(newExecTC,DataState.Added,UpdateState.onlyInEditor);
  return newExecTC;
}",0.9510974201001156
96335,"/** 
 * sets the selection in the given TreeViewer to the given node and also gives the given tree viewer focus
 * @param node the node to select
 * @param tv the TreeViewer
 */
public static void setSelectionAndFocusToNode(INodePO node,TreeViewer tv){
  TreeIterator it=new TreeIterator((INodePO)tv.getInput());
  List<INodePO> guiNodeList=it.getGuiNodeOfNodePO(node);
  tv.getTree().setFocus();
  tv.setSelection(new StructuredSelection(guiNodeList),true);
}","/** 
 * sets the selection in the given TreeViewer to the given node and also gives the given tree viewer focus
 * @param node the node to select
 * @param tv the TreeViewer
 */
public static void setSelectionAndFocusToNode(INodePO node,TreeViewer tv){
  tv.getTree().setFocus();
  tv.setSelection(new StructuredSelection(node),true);
}",0.6834170854271356
96336,"/** 
 * Drops the given TestCase on the given TestSuite. The TestCase will be inserted at the end.
 * @param testSuite the TestSuite to drop on
 * @param testcaseGUI the TestCAse to drop
 * @throws PMReadException in case of persistence error
 * @throws PMAlreadyLockedException in case of persistence error
 * @throws PMDirtyVersionException in case of persistence error
 * @throws PMException in case of persistence error
 */
private static void dropOnTestsuite(ITestSuitePO testSuite,ISpecTestCasePO testcaseGUI) throws PMReadException, PMAlreadyLockedException, PMDirtyVersionException, PMException {
  if (getTCBrowser() != null) {
    getTCBrowser().addReferencedTestCase(testcaseGUI,testSuite,0);
  }
}","/** 
 * Drops the given TestCase on the given TestSuite. The TestCase will be inserted at the end.
 * @param editSupport The EditSupport in which to perform the action.
 * @param testSuite the TestSuite to drop on
 * @param testcase the TestCAse to drop
 * @throws PMReadException in case of persistence error
 * @throws PMAlreadyLockedException in case of persistence error
 * @throws PMDirtyVersionException in case of persistence error
 * @throws PMException in case of persistence error
 */
private static void dropOnTestsuite(EditSupport editSupport,ITestSuitePO testSuite,ISpecTestCasePO testcase) throws PMReadException, PMAlreadyLockedException, PMDirtyVersionException, PMException {
  TestCaseBP.addReferencedTestCase(editSupport,testSuite,testcase,0);
}",0.7589952477936185
96337,"/** 
 * @param node the node to be dropped.
 * @param target the target node.
 * @throws PMReadException in case of db read error
 * @throws PMDirtyVersionException in case of version conflict (dirty read)
 * @throws PMAlreadyLockedException if the origSpecTc is already locked by another user
 * @throws PMException in case of unspecified db error
 */
private static void dropOnSpecTc(INodePO node,INodePO target) throws PMReadException, PMAlreadyLockedException, PMDirtyVersionException, PMException {
  getTCBrowser().addReferencedTestCase((ISpecTestCasePO)node,target,0);
}","/** 
 * @param editSupport The EditSupport in which to perform the action.
 * @param node the node to be dropped.
 * @param target the target node.
 * @throws PMReadException in case of db read error
 * @throws PMDirtyVersionException in case of version conflict (dirty read)
 * @throws PMAlreadyLockedException if the origSpecTc is already locked by another user
 * @throws PMException in case of unspecified db error
 */
private static void dropOnSpecTc(EditSupport editSupport,INodePO node,INodePO target) throws PMReadException, PMAlreadyLockedException, PMDirtyVersionException, PMException {
  TestCaseBP.addReferencedTestCase(editSupport,target,(ISpecTestCasePO)node,0);
}",0.8535031847133758
96338,"/** 
 * @param node the node to be dropped
 * @param target the target node.
 * @param location One of the values defined in ViewerDropAdapter to indicate the drop position relative to the drop target.
 * @throws PMReadException in case of db read error
 * @throws PMDirtyVersionException in case of version conflict (dirty read)
 * @throws PMAlreadyLockedException if the origSpecTc is already locked by another user
 * @throws PMException in case of unspecified db error
 */
private static void dropOnCAPorExecTc(INodePO node,INodePO target,int location) throws PMReadException, PMAlreadyLockedException, PMDirtyVersionException, PMException {
  ISpecTestCasePO specTcGUItoDrop=(ISpecTestCasePO)node;
  INodePO parentGUI=target.getParentNode();
  int position=parentGUI.indexOf(target);
  if (location != ViewerDropAdapter.LOCATION_BEFORE) {
    position++;
  }
  getTCBrowser().addReferencedTestCase(specTcGUItoDrop,parentGUI,position);
}","/** 
 * @param editSupport The EditSupport in which to perform the action.
 * @param node the node to be dropped
 * @param target the target node.
 * @param location One of the values defined in ViewerDropAdapter to indicate the drop position relative to the drop target.
 * @throws PMReadException in case of db read error
 * @throws PMDirtyVersionException in case of version conflict (dirty read)
 * @throws PMAlreadyLockedException if the origSpecTc is already locked by another user
 * @throws PMException in case of unspecified db error
 */
private static void dropOnCAPorExecTc(EditSupport editSupport,INodePO node,INodePO target,int location) throws PMReadException, PMAlreadyLockedException, PMDirtyVersionException, PMException {
  ISpecTestCasePO specTcGUItoDrop=(ISpecTestCasePO)node;
  INodePO parentGUI=target.getParentNode();
  int position=parentGUI.indexOf(target);
  if (location != ViewerDropAdapter.LOCATION_BEFORE) {
    position++;
  }
  TestCaseBP.addReferencedTestCase(editSupport,parentGUI,specTcGUItoDrop,position);
}",0.9002016129032258
96339,"/** 
 * @param targetEditor The editor to which the item is to be dropped/pasted.
 * @param toDrop The items that were dragged/cut.
 * @param dropTarget The drop/paste target.
 * @param dropPosition One of the values defined in ViewerDropAdapter to indicate the drop position relative to the drop target.
 * @return <code>true</code> if the drop/paste was successful. Otherwise <code>false</code>.
 */
public static boolean performDrop(AbstractTestCaseEditor targetEditor,IStructuredSelection toDrop,INodePO dropTarget,int dropPosition){
  if (targetEditor.getEditorHelper().requestEditableState() != JBEditorHelper.EditableState.OK) {
    return false;
  }
  List<Object> selectedElements=toDrop.toList();
  Collections.reverse(selectedElements);
  Iterator iter=selectedElements.iterator();
  while (iter.hasNext()) {
    INodePO droppedNode=null;
    Object obj=iter.next();
    if (!(obj instanceof INodePO)) {
      return false;
    }
    INodePO node=(INodePO)obj;
    if (node instanceof ICapPO || node instanceof IExecTestCasePO) {
      INodePO target=dropTarget;
      if (target != node && (target instanceof ICapPO || target instanceof IExecTestCasePO)) {
        droppedNode=moveNode(node,target);
      }
    }
    if (node instanceof ISpecTestCasePO) {
      INodePO target=dropTarget;
      if (target != node) {
        try {
          if (target instanceof ICapPO || target instanceof IExecTestCasePO) {
            dropOnCAPorExecTc(node,target,dropPosition);
          }
 else           if (target instanceof ISpecTestCasePO) {
            dropOnSpecTc(node,target);
          }
 else           if (node instanceof ISpecTestCasePO && target instanceof ITestSuitePO) {
            dropOnTestsuite((ITestSuitePO)target,(ISpecTestCasePO)node);
          }
        }
 catch (        PMException e) {
          NodeEditorInput inp=(NodeEditorInput)targetEditor.getAdapter(NodeEditorInput.class);
          INodePO inpNode=inp.getNode();
          PMExceptionHandler.handlePMExceptionForMasterSession(e);
          if (!(e instanceof PMAlreadyLockedException && ((PMAlreadyLockedException)e).getLockedObject() != null && !((PMAlreadyLockedException)e).getLockedObject().equals(inpNode)) || !targetEditor.isDirty()) {
            try {
              targetEditor.reOpenEditor(inpNode);
            }
 catch (            PMException e1) {
              PMExceptionHandler.handlePMExceptionForEditor(e,targetEditor);
            }
          }
          return false;
        }
      }
    }
    postDropAction(droppedNode,targetEditor);
  }
  return true;
}","/** 
 * @param targetEditor The editor to which the item is to be dropped/pasted.
 * @param toDrop The item that was dragged/cut.
 * @param dropTarget The drop/paste target.
 * @param dropPosition One of the values defined in ViewerDropAdapter to indicate the drop position relative to the drop target.
 * @return <code>true</code> if the drop/paste was successful. Otherwise <code>false</code>.
 */
private static boolean performDrop(AbstractTestCaseEditor targetEditor,INodePO dropTarget,int dropPosition,ISpecTestCasePO toDrop){
  INodePO target=dropTarget;
  if (target != toDrop) {
    EditSupport editSupport=targetEditor.getEditorHelper().getEditSupport();
    try {
      if (target instanceof ICapPO || target instanceof IExecTestCasePO) {
        dropOnCAPorExecTc(editSupport,toDrop,target,dropPosition);
      }
 else       if (target instanceof ISpecTestCasePO) {
        dropOnSpecTc(editSupport,toDrop,target);
      }
 else       if (target instanceof ITestSuitePO) {
        dropOnTestsuite(editSupport,(ITestSuitePO)target,(ISpecTestCasePO)toDrop);
      }
    }
 catch (    PMException e) {
      NodeEditorInput inp=(NodeEditorInput)targetEditor.getAdapter(NodeEditorInput.class);
      INodePO inpNode=inp.getNode();
      PMExceptionHandler.handlePMExceptionForMasterSession(e);
      if (!(e instanceof PMAlreadyLockedException && ((PMAlreadyLockedException)e).getLockedObject() != null && !((PMAlreadyLockedException)e).getLockedObject().equals(inpNode)) || !targetEditor.isDirty()) {
        try {
          targetEditor.reOpenEditor(inpNode);
        }
 catch (        PMException e1) {
          PMExceptionHandler.handlePMExceptionForEditor(e,targetEditor);
        }
      }
      return false;
    }
  }
  return true;
}",0.2908080574206992
96340,"public void selectionChanged(IWorkbenchPart part,ISelection selection){
  if (!(selection instanceof IStructuredSelection)) {
    return;
  }
  List<Object> selectedElements=((IStructuredSelection)selection).toList();
  Collections.reverse(selectedElements);
  Iterator iter=selectedElements.iterator();
  try {
    while (iter.hasNext()) {
      ISpecTestCasePO specTcToInsert=(ISpecTestCasePO)iter.next();
      try {
        tce.getTCBrowser().addReferencedTestCase(specTcToInsert,editorNode,index);
      }
 catch (      PMException e) {
        NodeEditorInput inp=(NodeEditorInput)tce.getAdapter(NodeEditorInput.class);
        INodePO inpNode=inp.getNode();
        PMExceptionHandler.handlePMExceptionForMasterSession(e);
        tce.reOpenEditor(inpNode);
      }
    }
    tce.getEditorHelper().getEditSupport().lockWorkVersion();
    tce.getEditorHelper().setDirty(true);
  }
 catch (  PMException e1) {
    PMExceptionHandler.handlePMExceptionForEditor(e1,tce);
  }
}","public void selectionChanged(IWorkbenchPart part,ISelection selection){
  if (!(selection instanceof IStructuredSelection)) {
    return;
  }
  List<Object> selectedElements=((IStructuredSelection)selection).toList();
  Collections.reverse(selectedElements);
  Iterator iter=selectedElements.iterator();
  List<IExecTestCasePO> addedElements=new ArrayList<IExecTestCasePO>();
  try {
    while (iter.hasNext()) {
      ISpecTestCasePO specTcToInsert=(ISpecTestCasePO)iter.next();
      try {
        addedElements.add(TestCaseBP.addReferencedTestCase(tce.getEditorHelper().getEditSupport(),editorNode,specTcToInsert,index));
      }
 catch (      PMException e) {
        NodeEditorInput inp=(NodeEditorInput)tce.getAdapter(NodeEditorInput.class);
        INodePO inpNode=inp.getNode();
        PMExceptionHandler.handlePMExceptionForMasterSession(e);
        tce.reOpenEditor(inpNode);
      }
    }
    tce.getEditorHelper().getEditSupport().lockWorkVersion();
    tce.getEditorHelper().setDirty(true);
    tce.setSelection(new StructuredSelection(addedElements));
  }
 catch (  PMException e1) {
    PMExceptionHandler.handlePMExceptionForEditor(e1,tce);
  }
}",0.8674136321195145
96341,"/** 
 * {@inheritDoc}
 */
public Object execute(ExecutionEvent event){
  final AbstractTestCaseEditor tce=(AbstractTestCaseEditor)Plugin.getActiveEditor();
  if (tce.getEditorHelper().requestEditableState() == JBEditorHelper.EditableState.OK) {
    final INodePO editorNode=(INodePO)tce.getEditorHelper().getEditSupport().getWorkVersion();
    if (!(tce.getTreeViewer().getSelection() instanceof IStructuredSelection)) {
      return null;
    }
    INodePO guiNode=(INodePO)((IStructuredSelection)tce.getTreeViewer().getSelection()).getFirstElement();
    if (guiNode == null) {
      return null;
    }
    final Integer index=editorNode.indexOf(guiNode);
    ISelectionListener listener=new ISelectionListener(){
      public void selectionChanged(      IWorkbenchPart part,      ISelection selection){
        if (!(selection instanceof IStructuredSelection)) {
          return;
        }
        List<Object> selectedElements=((IStructuredSelection)selection).toList();
        Collections.reverse(selectedElements);
        Iterator iter=selectedElements.iterator();
        try {
          while (iter.hasNext()) {
            ISpecTestCasePO specTcToInsert=(ISpecTestCasePO)iter.next();
            try {
              tce.getTCBrowser().addReferencedTestCase(specTcToInsert,editorNode,index);
            }
 catch (            PMException e) {
              NodeEditorInput inp=(NodeEditorInput)tce.getAdapter(NodeEditorInput.class);
              INodePO inpNode=inp.getNode();
              PMExceptionHandler.handlePMExceptionForMasterSession(e);
              tce.reOpenEditor(inpNode);
            }
          }
          tce.getEditorHelper().getEditSupport().lockWorkVersion();
          tce.getEditorHelper().setDirty(true);
        }
 catch (        PMException e1) {
          PMExceptionHandler.handlePMExceptionForEditor(e1,tce);
        }
      }
    }
;
    ISpecTestCasePO specTC=null;
    if (editorNode instanceof ISpecTestCasePO) {
      specTC=(ISpecTestCasePO)editorNode;
    }
    TestCaseTreeDialog dialog=new TestCaseTreeDialog(Plugin.getShell(),specTC,SWT.MULTI,TestCaseTreeDialog.TESTCASE);
    dialog.addSelectionListener(listener);
    dialog.setHelpAvailable(true);
    dialog.create();
    DialogUtils.setWidgetNameForModalDialog(dialog);
    Plugin.getHelpSystem().setHelp(dialog.getShell(),ContextHelpIds.TESTCASE_ADD_EXISTING);
    dialog.open();
    dialog.removeSelectionListener(listener);
  }
  return null;
}","/** 
 * {@inheritDoc}
 */
public Object execute(ExecutionEvent event){
  final AbstractTestCaseEditor tce=(AbstractTestCaseEditor)Plugin.getActiveEditor();
  if (tce.getEditorHelper().requestEditableState() == JBEditorHelper.EditableState.OK) {
    final INodePO editorNode=(INodePO)tce.getEditorHelper().getEditSupport().getWorkVersion();
    if (!(tce.getTreeViewer().getSelection() instanceof IStructuredSelection)) {
      return null;
    }
    INodePO guiNode=(INodePO)((IStructuredSelection)tce.getTreeViewer().getSelection()).getFirstElement();
    if (guiNode == null) {
      return null;
    }
    final Integer index=editorNode.indexOf(guiNode);
    ISelectionListener listener=new ISelectionListener(){
      public void selectionChanged(      IWorkbenchPart part,      ISelection selection){
        if (!(selection instanceof IStructuredSelection)) {
          return;
        }
        List<Object> selectedElements=((IStructuredSelection)selection).toList();
        Collections.reverse(selectedElements);
        Iterator iter=selectedElements.iterator();
        List<IExecTestCasePO> addedElements=new ArrayList<IExecTestCasePO>();
        try {
          while (iter.hasNext()) {
            ISpecTestCasePO specTcToInsert=(ISpecTestCasePO)iter.next();
            try {
              addedElements.add(TestCaseBP.addReferencedTestCase(tce.getEditorHelper().getEditSupport(),editorNode,specTcToInsert,index));
            }
 catch (            PMException e) {
              NodeEditorInput inp=(NodeEditorInput)tce.getAdapter(NodeEditorInput.class);
              INodePO inpNode=inp.getNode();
              PMExceptionHandler.handlePMExceptionForMasterSession(e);
              tce.reOpenEditor(inpNode);
            }
          }
          tce.getEditorHelper().getEditSupport().lockWorkVersion();
          tce.getEditorHelper().setDirty(true);
          tce.setSelection(new StructuredSelection(addedElements));
        }
 catch (        PMException e1) {
          PMExceptionHandler.handlePMExceptionForEditor(e1,tce);
        }
      }
    }
;
    ISpecTestCasePO specTC=null;
    if (editorNode instanceof ISpecTestCasePO) {
      specTC=(ISpecTestCasePO)editorNode;
    }
    TestCaseTreeDialog dialog=new TestCaseTreeDialog(Plugin.getShell(),specTC,SWT.MULTI,TestCaseTreeDialog.TESTCASE);
    dialog.addSelectionListener(listener);
    dialog.setHelpAvailable(true);
    dialog.create();
    DialogUtils.setWidgetNameForModalDialog(dialog);
    Plugin.getHelpSystem().setHelp(dialog.getShell(),ContextHelpIds.TESTCASE_ADD_EXISTING);
    dialog.open();
    dialog.removeSelectionListener(listener);
  }
  return null;
}",0.9498629063846457
96342,"/** 
 * Refreshes the viewer and updates the expansion state and selection based on the added node.
 * @param addedNode The node that has been added.
 */
protected void handleNodeAdded(INodePO addedNode){
  getTreeViewer().refresh();
  getTreeViewer().expandAll();
  getTreeViewer().setSelection(new StructuredSelection(addedNode));
}","/** 
 * Refreshes the viewer and updates the expansion state and selection based on the added node.
 * @param addedNode The node that has been added.
 */
protected void handleNodeAdded(INodePO addedNode){
  getTreeViewer().refresh();
  getTreeViewer().setSelection(new StructuredSelection(addedNode));
}",0.8100470957613815
96343,"/** 
 * {@inheritDoc}
 */
public void handleDataChanged(IPersistentObject po,DataState dataState,UpdateState updateState){
  if (po instanceof INodePO) {
switch (dataState) {
case Added:
      INodePO addedNode=(INodePO)po;
    INodePO editorNode=(INodePO)getEditorHelper().getEditSupport().getWorkVersion();
  if (editorNode.indexOf(addedNode) > -1 || (editorNode instanceof ISpecTestCasePO && ((ISpecTestCasePO)editorNode).getEventExecTcMap().containsValue(po))) {
    handleNodeAdded(addedNode);
  }
break;
case Deleted:
if (!(po instanceof IProjectPO)) {
INodePO guiNode=((INodePO[])getTreeViewer().getInput())[0];
GuiNodeBP.setSelectionAndFocusToNode(guiNode,getTreeViewer());
}
break;
case Renamed:
renameGUINode(po);
break;
case StructureModified:
if (!handleStructureModified(po)) {
return;
}
break;
case ReuseChanged:
break;
default :
Assert.notReached();
}
getEditorHelper().handleDataChanged(po,dataState,updateState);
}
}","/** 
 * {@inheritDoc}
 */
public void handleDataChanged(IPersistentObject po,DataState dataState,UpdateState updateState){
  if (po instanceof INodePO) {
switch (dataState) {
case Added:
      INodePO addedNode=(INodePO)po;
    INodePO editorNode=(INodePO)getEditorHelper().getEditSupport().getWorkVersion();
  if (editorNode.indexOf(addedNode) > -1 || (editorNode instanceof ISpecTestCasePO && ((ISpecTestCasePO)editorNode).getEventExecTcMap().containsValue(po))) {
    handleNodeAdded(addedNode);
  }
break;
case Deleted:
if (!(po instanceof IProjectPO)) {
refresh();
}
break;
case Renamed:
renameGUINode(po);
break;
case StructureModified:
if (!handleStructureModified(po)) {
return;
}
break;
case ReuseChanged:
break;
default :
Assert.notReached();
}
getEditorHelper().handleDataChanged(po,dataState,updateState);
}
}",0.927023945267959
96344,"/** 
 * checks if the exception is caused by a known RCP problem
 * @param t the Throwable which was caught in the error handler
 * @return true if the exception was cause by an RCP bug
 */
public static boolean isRCPException(Throwable t){
  Throwable work=t;
  do {
    StackTraceElement[] stack=work.getStackTrace();
    for (    StackTraceElement el : stack) {
      if (el.getClassName().indexOf(""String_Node_Str"") != -1) {
        return true;
      }
      if (el.getClassName().indexOf(""String_Node_Str"") != -1) {
        return true;
      }
      if (el.getClassName().indexOf(""String_Node_Str"") != -1) {
        return true;
      }
    }
    work=work.getCause();
  }
 while (work != null);
  return false;
}","/** 
 * checks if the exception is caused by a known RCP problem
 * @param t the Throwable which was caught in the error handler
 * @return true if the exception was cause by an RCP bug
 */
public static boolean isRCPException(Throwable t){
  Throwable work=t;
  do {
    StackTraceElement[] stack=work.getStackTrace();
    for (    StackTraceElement el : stack) {
      if (el.getClassName().indexOf(""String_Node_Str"") != -1) {
        return true;
      }
      if (el.getClassName().indexOf(""String_Node_Str"") != -1) {
        return true;
      }
      if (el.getClassName().indexOf(""String_Node_Str"") != -1) {
        return true;
      }
    }
    String detailMessage=work.getMessage();
    if (detailMessage != null && detailMessage.indexOf(""String_Node_Str"") != -1) {
      return true;
    }
    work=work.getCause();
  }
 while (work != null);
  return false;
}",0.9045226130653268
96345,"/** 
 * Prompts the user if they really want to delete the given items.  If the user consents, the items are deleted. Otherwise, no action is taken.
 * @param toDelete The items to delete.
 * @param editor The editor in which the delete is taking place.
 * @return the parent of one of the given elements before its deletion, or <code>null</code> if no elements are deleted.
 */
private Object deleteMultipleElements(Object[] toDelete,ObjectMappingMultiPageEditor editor){
  boolean delete=false;
  IObjectMappingCategoryPO lastParent=null;
  delete=MessageDialog.openConfirm(Plugin.getShell(),Messages.DeleteTreeItemActionOMEditorOMTitle,Messages.DeleteTreeItemActionOMEditorOMText3);
  if (delete) {
    for (    Object node : toDelete) {
      if (node instanceof IComponentNamePO) {
        lastParent=editor.getOmEditorBP().deleteCompName((IComponentNamePO)node);
      }
 else       if (node instanceof IObjectMappingAssoziationPO) {
        lastParent=editor.getOmEditorBP().deleteAssociation((IObjectMappingAssoziationPO)node);
      }
 else       if (node instanceof IObjectMappingCategoryPO) {
        lastParent=editor.getOmEditorBP().deleteCategory((IObjectMappingCategoryPO)node);
      }
      editor.getEditorHelper().setDirty(true);
    }
  }
  return lastParent;
}","/** 
 * Prompts the user if they really want to delete the given items.  If the user consents, the items are deleted. Otherwise, no action is taken.
 * @param toDelete The items to delete.
 * @param editor The editor in which the delete is taking place.
 * @return the parent of one of the given elements before its deletion, or <code>null</code> if no elements are deleted.
 */
private Object deleteMultipleElements(Object[] toDelete,ObjectMappingMultiPageEditor editor){
  boolean delete=false;
  IObjectMappingCategoryPO lastParent=null;
  delete=MessageDialog.openConfirm(Plugin.getShell(),Messages.DeleteTreeItemActionOMEditorOMTitle,Messages.DeleteTreeItemActionOMEditorOMText3);
  if (delete) {
    for (    Object node : toDelete) {
      if (node instanceof IComponentNamePO) {
        lastParent=editor.getOmEditorBP().deleteCompName((IComponentNamePO)node);
      }
 else       if (node instanceof IObjectMappingAssoziationPO) {
        lastParent=editor.getOmEditorBP().deleteAssociation((IObjectMappingAssoziationPO)node);
      }
 else       if (node instanceof IObjectMappingCategoryPO) {
        if (!willAncestorBeDeleted((IObjectMappingCategoryPO)node,toDelete)) {
          lastParent=editor.getOmEditorBP().deleteCategory((IObjectMappingCategoryPO)node);
        }
      }
      editor.getEditorHelper().setDirty(true);
    }
  }
  return lastParent;
}",0.9325292122125896
96346,"/** 
 * Sets -javaagent and JRE arguments as SUN environment variable.
 * @param parameters The parameters for starting the AUT
 * @return the _JAVA_OPTIONS environment variable including -javaagentand jre arguments
 */
protected String setJavaOptions(Map parameters){
  StringBuffer sb=new StringBuffer();
  if (isRunningFromExecutable(parameters)) {
    Locale locale=(Locale)parameters.get(IStartAut.LOCALE);
    sb.append(JAVA_OPTIONS_INTRO).append(StringConstants.QUOTE).append(""String_Node_Str"").append(getAbsoluteAgentJarPath()).append(StringConstants.QUOTE);
    if (isRunningWithMonitoring(parameters)) {
      sb.append(StringConstants.SPACE).append(getMonitoringAgent(parameters));
    }
    if (locale != null) {
      sb.append(StringConstants.SPACE).append(JAVA_COUNTRY_PROPERTY).append(locale.getCountry());
      sb.append(StringConstants.SPACE).append(JAVA_LANGUAGE_PROPERTY).append(locale.getLanguage());
    }
    sb.append(StringConstants.SPACE).append(JAVA_UTIL_LOGGING_CONFIG_FILE_PROPERTY).append(StringConstants.QUOTE).append(getAbsoluteLoggingConfPath()).append(StringConstants.QUOTE);
  }
 else {
    if (isRunningWithMonitoring(parameters)) {
      sb.append(JAVA_OPTIONS_INTRO).append(getMonitoringAgent(parameters)).append(StringConstants.SPACE).append(JAVA_UTIL_LOGGING_CONFIG_FILE_PROPERTY).append(StringConstants.QUOTE).append(getAbsoluteLoggingConfPath()).append(StringConstants.QUOTE);
    }
  }
  return sb.toString();
}","/** 
 * Sets -javaagent and JRE arguments as SUN environment variable.
 * @param parameters The parameters for starting the AUT
 * @return the _JAVA_OPTIONS environment variable including -javaagentand jre arguments
 */
protected String setJavaOptions(Map parameters){
  StringBuffer sb=new StringBuffer();
  if (isRunningFromExecutable(parameters)) {
    Locale locale=(Locale)parameters.get(IStartAut.LOCALE);
    sb.append(JAVA_OPTIONS_INTRO);
    if (isRunningWithMonitoring(parameters)) {
      sb.append(getMonitoringAgent(parameters)).append(StringConstants.SPACE);
    }
    sb.append(StringConstants.QUOTE).append(""String_Node_Str"").append(getAbsoluteAgentJarPath()).append(StringConstants.QUOTE);
    if (locale != null) {
      sb.append(StringConstants.SPACE).append(JAVA_COUNTRY_PROPERTY).append(locale.getCountry());
      sb.append(StringConstants.SPACE).append(JAVA_LANGUAGE_PROPERTY).append(locale.getLanguage());
    }
    sb.append(StringConstants.SPACE).append(JAVA_UTIL_LOGGING_CONFIG_FILE_PROPERTY).append(StringConstants.QUOTE).append(getAbsoluteLoggingConfPath()).append(StringConstants.QUOTE);
  }
 else {
    if (isRunningWithMonitoring(parameters)) {
      sb.append(JAVA_OPTIONS_INTRO).append(getMonitoringAgent(parameters)).append(StringConstants.SPACE).append(JAVA_UTIL_LOGGING_CONFIG_FILE_PROPERTY).append(StringConstants.QUOTE).append(getAbsoluteLoggingConfPath()).append(StringConstants.QUOTE);
    }
  }
  return sb.toString();
}",0.9067854694996572
96347,"/** 
 * Creates the initial Context of this Editor.<br> Subclasses may override this method. 
 * @param parent Composite
 */
public void createPartControlImpl(Composite parent){
  createSashForm(parent);
  setParentComposite(parent);
  getMainTreeViewer().setContentProvider(new TestCaseEditorContentProvider());
  m_eventHandlerTreeViewer.setContentProvider(new TestCaseEditorContentProvider());
  m_eventHandlerTreeViewer.getControl().setMenu(createContextMenu());
  setInitialInput();
  final DataEventDispatcher dispatcher=DataEventDispatcher.getInstance();
  dispatcher.addPropertyChangedListener(this,true);
  addDragAndDropSupport();
  getEditorHelper().addListeners();
  setActionHandlers();
  addTreeDoubleClickListener(CommandIDs.REFERENCE_TC_COMMAND_ID);
  getTreeViewer().setSelection(new StructuredSelection(getTopGuiNode()));
  GuiEventDispatcher.getInstance().addEditorDirtyStateListener(this,true);
}","/** 
 * Creates the initial Context of this Editor.<br> Subclasses may override this method. 
 * @param parent Composite
 */
public void createPartControlImpl(Composite parent){
  createSashForm(parent);
  setParentComposite(parent);
  getMainTreeViewer().setContentProvider(new TestCaseEditorContentProvider());
  m_eventHandlerTreeViewer.setContentProvider(new TestCaseEditorContentProvider());
  m_eventHandlerTreeViewer.getControl().setMenu(createContextMenu());
  setInitialInput();
  final DataEventDispatcher dispatcher=DataEventDispatcher.getInstance();
  dispatcher.addPropertyChangedListener(this,true);
  addDragAndDropSupport();
  getEditorHelper().addListeners();
  setActionHandlers();
  addTreeDoubleClickListener(CommandIDs.REFERENCE_TC_COMMAND_ID);
  getTreeViewer().setSelection(new StructuredSelection(getTopGuiNode()));
  GuiEventDispatcher.getInstance().addEditorDirtyStateListener(this,true);
  DataEventDispatcher.getInstance().addDataChangedListener(new CentralTestDataUpdateListener(),false);
}",0.9467700258397932
96348,"/** 
 * {@inheritDoc} 
 */
public void handleDataChanged(IPersistentObject po,DataState dataState,UpdateState updateState){
  if (dataState == DataState.Deleted && po.equals(getParamInterfaceObj())) {
    setParamInterfaceObj(null);
    updateView();
  }
  Plugin.getDisplay().syncExec(new Runnable(){
    public void run(){
      getControlEnabler().selectionChanged(m_currentPart,m_currentSelection);
    }
  }
);
}","/** 
 * {@inheritDoc} 
 */
public void handleDataChanged(IPersistentObject po,DataState dataState,UpdateState updateState){
  if (dataState == DataState.Deleted && po.equals(getParamInterfaceObj())) {
    setParamInterfaceObj(null);
    updateView();
  }
  if (dataState == DataState.StructureModified && po instanceof ITestDataCubeContPO) {
    updateView();
  }
  Plugin.getDisplay().syncExec(new Runnable(){
    public void run(){
      getControlEnabler().selectionChanged(m_currentPart,m_currentSelection);
    }
  }
);
}",0.8844114528101803
96349,"/** 
 * {@inheritDoc}
 */
public void init(IViewSite site) throws PartInitException {
  site.getPage().addSelectionListener(this);
  DataEventDispatcher dispatcher=DataEventDispatcher.getInstance();
  dispatcher.addParamChangedListener(this,true);
  dispatcher.addLanguageChangedListener(this,true);
  dispatcher.addDataChangedListener(this,true);
  dispatcher.addProjectLoadedListener(this,true);
  super.init(site);
}","/** 
 * {@inheritDoc}
 */
public void init(IViewSite site) throws PartInitException {
  site.getPage().addSelectionListener(this);
  DataEventDispatcher dispatcher=DataEventDispatcher.getInstance();
  dispatcher.addParamChangedListener(this,true);
  dispatcher.addLanguageChangedListener(this,true);
  dispatcher.addProjectLoadedListener(this,true);
  super.init(site);
}",0.9113924050632912
96350,"/** 
 * {@inheritDoc}
 */
protected PageRec doCreatePage(IWorkbenchPart part){
  if (part instanceof AbstractJBTreeView || part.getAdapter(IJBEditor.class) != null) {
    AbstractDataSetPage page;
    if (part instanceof CentralTestDataEditor) {
      page=new TestDataCubeDataSetPage();
    }
 else {
      page=new ParamNodeDataSetPage();
    }
    initPage(page);
    page.createControl(getPageBook());
    return new PageRec(part,page);
  }
 else   if (part instanceof IJBPart) {
    return new PageRec(part,createDefaultPage(getPageBook()));
  }
  return null;
}","/** 
 * {@inheritDoc}
 */
protected PageRec doCreatePage(IWorkbenchPart part){
  if (part instanceof AbstractJBTreeView || part.getAdapter(IJBEditor.class) != null) {
    AbstractDataSetPage page;
    if (part instanceof CentralTestDataEditor) {
      page=new TestDataCubeDataSetPage();
    }
 else {
      page=new ParamNodeDataSetPage();
    }
    initPage(page);
    page.createControl(getPageBook());
    DataEventDispatcher.getInstance().addDataChangedListener(page,true);
    return new PageRec(part,page);
  }
 else   if (part instanceof IJBPart) {
    return new PageRec(part,createDefaultPage(getPageBook()));
  }
  return null;
}",0.9395194697597348
96351,"/** 
 * {@inheritDoc}
 */
protected void doDestroyPage(IWorkbenchPart part,PageRec pageRecord){
  pageRecord.page.dispose();
  pageRecord.dispose();
}","/** 
 * {@inheritDoc}
 */
protected void doDestroyPage(IWorkbenchPart part,PageRec pageRecord){
  if (pageRecord.page instanceof IDataChangedListener) {
    DataEventDispatcher.getInstance().removeDataChangedListener((IDataChangedListener)pageRecord.page);
  }
  pageRecord.page.dispose();
  pageRecord.dispose();
}",0.4989247311827957
96352,"/** 
 * {@inheritDoc}
 */
public void dispose(){
  final DataEventDispatcher dispatcher=DataEventDispatcher.getInstance();
  dispatcher.removeParamChangedListener(this);
  dispatcher.removeLanguageChangedListener(this);
  dispatcher.removeDataChangedListener(this);
  dispatcher.removeProjectLoadedListener(this);
  dispatcher.removeParamChangedListener(this);
  super.dispose();
}","/** 
 * {@inheritDoc}
 */
public void dispose(){
  final DataEventDispatcher dispatcher=DataEventDispatcher.getInstance();
  dispatcher.removeParamChangedListener(this);
  dispatcher.removeLanguageChangedListener(this);
  dispatcher.removeProjectLoadedListener(this);
  dispatcher.removeParamChangedListener(this);
  super.dispose();
}",0.7877094972067039
96353,"/** 
 * check if the exception is caused by a failed lock attempt
 * @param e hibernate exception
 * @return true if e is caused by a failed lock attempt
 */
private static boolean isLockException(PersistenceException e){
  Throwable rootCause=ExceptionUtils.getRootCause(e);
  if (e instanceof PessimisticLockException) {
    return true;
  }
 else   if (e instanceof LockTimeoutException) {
    return true;
  }
 else   if (rootCause instanceof SQLException) {
    if (((SQLException)rootCause).getSQLState() != null && ((SQLException)rootCause).getSQLState().startsWith(""String_Node_Str"")) {
      return true;
    }
  }
  return false;
}","/** 
 * check if the exception is caused by a failed lock attempt
 * @param e hibernate exception
 * @return true if e is caused by a failed lock attempt
 */
private static boolean isLockException(PersistenceException e){
  for (  Throwable cause : ExceptionUtils.getThrowables(e)) {
    if (cause instanceof PessimisticLockException || cause instanceof OptimisticLockException || cause instanceof LockTimeoutException) {
      return true;
    }
 else     if (cause instanceof SQLException) {
      if (((SQLException)cause).getSQLState() != null && ((SQLException)cause).getSQLState().startsWith(""String_Node_Str"")) {
        return true;
      }
    }
  }
  return false;
}",0.8428246013667426
96354,"/** 
 * Creates three buttons.
 * @param parent The parent composite.
 */
private void createAutConfigButtons(Composite parent){
  JBText invisibleText=new JBText(parent,SWT.BORDER);
  invisibleText.setVisible(false);
  GridData invisibleGrid=new GridData();
  invisibleGrid.widthHint=10;
  invisibleText.setLayoutData(invisibleGrid);
  JBText invisibleText2=new JBText(parent,SWT.BORDER);
  invisibleText2.setVisible(false);
  invisibleText2.setLayoutData(invisibleGrid);
  m_addButton=new Button(parent,SWT.PUSH);
  m_addButton.setText(Messages.AUTPropertyPageAdd);
  m_addButton.setLayoutData(buttonGrid());
  String selectedObject=m_autToolKitComboBox.getSelectedObject();
  m_addButton.setEnabled(selectedObject != null && selectedObject.trim().length() > 0);
  m_duplicateButton=new Button(parent,SWT.PUSH);
  m_duplicateButton.setText(Messages.AUTPropertyPageDuplicate);
  m_duplicateButton.setData(""String_Node_Str"",""String_Node_Str"");
  m_duplicateButton.setLayoutData(buttonGrid());
  m_duplicateButton.setEnabled(false);
  m_editButton=new Button(parent,SWT.PUSH);
  m_editButton.setText(Messages.AUTPropertyPageEdit);
  m_editButton.setLayoutData(buttonGrid());
  m_editButton.setEnabled(false);
  m_removeButton=new Button(parent,SWT.PUSH);
  m_removeButton.setText(Messages.AUTPropertyPageRemove);
  m_removeButton.setLayoutData(buttonGrid());
  m_removeButton.setEnabled(false);
}","/** 
 * Creates three buttons.
 * @param parent The parent composite.
 */
private void createAutConfigButtons(Composite parent){
  JBText invisibleText=new JBText(parent,SWT.BORDER);
  invisibleText.setVisible(false);
  GridData invisibleGrid=new GridData();
  invisibleGrid.widthHint=10;
  invisibleText.setLayoutData(invisibleGrid);
  JBText invisibleText2=new JBText(parent,SWT.BORDER);
  invisibleText2.setVisible(false);
  invisibleText2.setLayoutData(invisibleGrid);
  m_addButton=new Button(parent,SWT.PUSH);
  m_addButton.setText(Messages.AUTPropertyPageAdd);
  m_addButton.setLayoutData(buttonGrid());
  String selectedObject=m_autToolKitComboBox.getSelectedObject();
  m_addButton.setEnabled(selectedObject != null && selectedObject.trim().length() > 0);
  m_duplicateButton=new Button(parent,SWT.PUSH);
  m_duplicateButton.setText(Messages.AUTPropertyPageDuplicate);
  m_duplicateButton.setData(SwtAUTHierarchyConstants.WIDGET_NAME,""String_Node_Str"");
  m_duplicateButton.setLayoutData(buttonGrid());
  m_duplicateButton.setEnabled(false);
  m_editButton=new Button(parent,SWT.PUSH);
  m_editButton.setText(Messages.AUTPropertyPageEdit);
  m_editButton.setLayoutData(buttonGrid());
  m_editButton.setEnabled(false);
  m_removeButton=new Button(parent,SWT.PUSH);
  m_removeButton.setText(Messages.AUTPropertyPageRemove);
  m_removeButton.setLayoutData(buttonGrid());
  m_removeButton.setEnabled(false);
}",0.9832680669277324
96355,"/** 
 * creates the Combos
 * @param parent the parent of the combos
 */
@SuppressWarnings(""String_Node_Str"") private void createCombos(Composite parent){
  m_propertyCombos=new ArrayList<DirectCombo>();
  List<IParamDescriptionPO> a1=new ArrayList<IParamDescriptionPO>(0);
  List<String> a2=new ArrayList<String>(0);
  m_paramCombo=new DirectCombo<IParamDescriptionPO>(parent,SWT.NONE,a1,a2,true,false);
  m_paramCombo.setData(WIDGET_NAME_KEY,""String_Node_Str"");
  m_paramCombo.addSelectionListener(new ParameterComboListener());
  GridData paramComboLayoutData=new GridData();
  paramComboLayoutData.horizontalAlignment=GridData.FILL;
  paramComboLayoutData.grabExcessHorizontalSpace=true;
  m_paramCombo.setLayoutData(paramComboLayoutData);
  m_propertyCombos.add(m_paramCombo);
  List<Integer> b1=new ArrayList<Integer>(0);
  List<String> b2=new ArrayList<String>(0);
  setDataSetCombo(new DirectCombo<Integer>(parent,SWT.NONE,b1,b2,true,false));
  getDataSetCombo().setData(WIDGET_NAME_KEY,""String_Node_Str"");
  getDataSetCombo().addSelectionListener(new DataSetComboListener());
  getDataSetCombo().setSize(100,getDataSetCombo().getItemHeight());
  GridData dataSetComboLayoutData=new GridData();
  dataSetComboLayoutData.horizontalAlignment=GridData.FILL;
  dataSetComboLayoutData.grabExcessHorizontalSpace=true;
  getDataSetCombo().setLayoutData(dataSetComboLayoutData);
  m_propertyCombos.add(getDataSetCombo());
  List<Locale> c1=new ArrayList<Locale>(0);
  List<String> c2=new ArrayList<String>(0);
  setLanguageCombo(new DirectCombo<Locale>(parent,SWT.NONE,c1,c2,true,false));
  getLanguageCombo().setData(WIDGET_NAME_KEY,""String_Node_Str"");
  getLanguageCombo().addSelectionListener(new LanguageComboListener());
  getLanguageCombo().setSize(100,getLanguageCombo().getItemHeight());
  GridData languageComboLayoutData=new GridData();
  languageComboLayoutData.horizontalAlignment=GridData.FILL;
  languageComboLayoutData.grabExcessHorizontalSpace=true;
  getLanguageCombo().setLayoutData(languageComboLayoutData);
  m_propertyCombos.add(getLanguageCombo());
  SelectionListener comboSelListener=new ComboSingleSelectionListener();
  m_paramCombo.addSelectionListener(comboSelListener);
  getDataSetCombo().addSelectionListener(comboSelListener);
  getLanguageCombo().addSelectionListener(comboSelListener);
}","/** 
 * creates the Combos
 * @param parent the parent of the combos
 */
@SuppressWarnings(""String_Node_Str"") private void createCombos(Composite parent){
  m_propertyCombos=new ArrayList<DirectCombo>();
  List<IParamDescriptionPO> a1=new ArrayList<IParamDescriptionPO>(0);
  List<String> a2=new ArrayList<String>(0);
  m_paramCombo=new DirectCombo<IParamDescriptionPO>(parent,SWT.NONE,a1,a2,true,false);
  m_paramCombo.setData(SwtAUTHierarchyConstants.WIDGET_NAME,""String_Node_Str"");
  m_paramCombo.addSelectionListener(new ParameterComboListener());
  GridData paramComboLayoutData=new GridData();
  paramComboLayoutData.horizontalAlignment=GridData.FILL;
  paramComboLayoutData.grabExcessHorizontalSpace=true;
  m_paramCombo.setLayoutData(paramComboLayoutData);
  m_propertyCombos.add(m_paramCombo);
  List<Integer> b1=new ArrayList<Integer>(0);
  List<String> b2=new ArrayList<String>(0);
  setDataSetCombo(new DirectCombo<Integer>(parent,SWT.NONE,b1,b2,true,false));
  getDataSetCombo().setData(SwtAUTHierarchyConstants.WIDGET_NAME,""String_Node_Str"");
  getDataSetCombo().addSelectionListener(new DataSetComboListener());
  getDataSetCombo().setSize(100,getDataSetCombo().getItemHeight());
  GridData dataSetComboLayoutData=new GridData();
  dataSetComboLayoutData.horizontalAlignment=GridData.FILL;
  dataSetComboLayoutData.grabExcessHorizontalSpace=true;
  getDataSetCombo().setLayoutData(dataSetComboLayoutData);
  m_propertyCombos.add(getDataSetCombo());
  List<Locale> c1=new ArrayList<Locale>(0);
  List<String> c2=new ArrayList<String>(0);
  setLanguageCombo(new DirectCombo<Locale>(parent,SWT.NONE,c1,c2,true,false));
  getLanguageCombo().setData(SwtAUTHierarchyConstants.WIDGET_NAME,""String_Node_Str"");
  getLanguageCombo().addSelectionListener(new LanguageComboListener());
  getLanguageCombo().setSize(100,getLanguageCombo().getItemHeight());
  GridData languageComboLayoutData=new GridData();
  languageComboLayoutData.horizontalAlignment=GridData.FILL;
  languageComboLayoutData.grabExcessHorizontalSpace=true;
  getLanguageCombo().setLayoutData(languageComboLayoutData);
  m_propertyCombos.add(getLanguageCombo());
  SelectionListener comboSelListener=new ComboSingleSelectionListener();
  m_paramCombo.addSelectionListener(comboSelListener);
  getDataSetCombo().addSelectionListener(comboSelListener);
  getLanguageCombo().addSelectionListener(comboSelListener);
}",0.981509032943677
96356,"/** 
 * Create the labels of the Combos
 * @param parent the parent of the labels
 */
private void createComboLabels(Composite parent){
  Label paramLabel=new Label(parent,SWT.NONE);
  paramLabel.setText(Messages.GDDataSetViewParameter);
  paramLabel.setData(WIDGET_NAME_KEY,""String_Node_Str"");
  Label dataSetLabel=new Label(parent,SWT.NONE);
  dataSetLabel.setText(Messages.GDDataSetViewDataSet);
  dataSetLabel.setData(WIDGET_NAME_KEY,""String_Node_Str"");
  Label languageLabel=new Label(parent,SWT.NONE);
  languageLabel.setText(Messages.GDDataSetViewLanguage);
  languageLabel.setData(WIDGET_NAME_KEY,""String_Node_Str"");
}","/** 
 * Create the labels of the Combos
 * @param parent the parent of the labels
 */
private void createComboLabels(Composite parent){
  Label paramLabel=new Label(parent,SWT.NONE);
  paramLabel.setText(Messages.GDDataSetViewParameter);
  paramLabel.setData(SwtAUTHierarchyConstants.WIDGET_NAME,""String_Node_Str"");
  Label dataSetLabel=new Label(parent,SWT.NONE);
  dataSetLabel.setText(Messages.GDDataSetViewDataSet);
  dataSetLabel.setData(SwtAUTHierarchyConstants.WIDGET_NAME,""String_Node_Str"");
  Label languageLabel=new Label(parent,SWT.NONE);
  languageLabel.setText(Messages.GDDataSetViewLanguage);
  languageLabel.setData(SwtAUTHierarchyConstants.WIDGET_NAME,""String_Node_Str"");
}",0.9338403041825096
96357,"/** 
 * {@inheritDoc}
 */
public void createControl(Composite parent){
  Composite topLevelComposite=new Composite(parent,SWT.NONE);
  topLevelComposite.setData(WIDGET_NAME_KEY,""String_Node_Str"");
  GridLayout layout=new GridLayout();
  layout.numColumns=1;
  layout.verticalSpacing=2;
  layout.marginWidth=Layout.MARGIN_WIDTH;
  layout.marginHeight=Layout.MARGIN_HEIGHT;
  topLevelComposite.setLayout(layout);
  GridData layoutData=new GridData(GridData.FILL_BOTH);
  layoutData.grabExcessHorizontalSpace=true;
  topLevelComposite.setLayoutData(layoutData);
  m_control=topLevelComposite;
  Composite buttonComp=new Composite(topLevelComposite,SWT.BORDER);
  layout=new GridLayout(3,false);
  layout.marginWidth=3;
  layout.marginHeight=3;
  buttonComp.setLayout(layout);
  GridData gridData=new GridData(SWT.FILL,SWT.FILL,true,true);
  buttonComp.setLayoutData(gridData);
  createComboLabels(buttonComp);
  createCombos(buttonComp);
  initTableViewer(buttonComp);
  createButtons(buttonComp);
  Plugin.getHelpSystem().setHelp(getTable(),ContextHelpIds.JB_DATASET_VIEW);
}","/** 
 * {@inheritDoc}
 */
public void createControl(Composite parent){
  Composite topLevelComposite=new Composite(parent,SWT.NONE);
  topLevelComposite.setData(SwtAUTHierarchyConstants.WIDGET_NAME,""String_Node_Str"");
  GridLayout layout=new GridLayout();
  layout.numColumns=1;
  layout.verticalSpacing=2;
  layout.marginWidth=Layout.MARGIN_WIDTH;
  layout.marginHeight=Layout.MARGIN_HEIGHT;
  topLevelComposite.setLayout(layout);
  GridData layoutData=new GridData(GridData.FILL_BOTH);
  layoutData.grabExcessHorizontalSpace=true;
  topLevelComposite.setLayoutData(layoutData);
  m_control=topLevelComposite;
  Composite buttonComp=new Composite(topLevelComposite,SWT.BORDER);
  layout=new GridLayout(3,false);
  layout.marginWidth=3;
  layout.marginHeight=3;
  buttonComp.setLayout(layout);
  GridData gridData=new GridData(SWT.FILL,SWT.FILL,true,true);
  buttonComp.setLayoutData(gridData);
  createComboLabels(buttonComp);
  createCombos(buttonComp);
  initTableViewer(buttonComp);
  createButtons(buttonComp);
  Plugin.getHelpSystem().setHelp(getTable(),ContextHelpIds.JB_DATASET_VIEW);
}",0.9866174434702354
96358,"/** 
 * inits the m_tableViewer
 * @param parent the parent of the m_tableViewer
 */
private void initTableViewer(Composite parent){
  setTableViewer(new TableViewer(parent,SWT.SINGLE | SWT.FULL_SELECTION));
  Table table=getTable();
  table.setData(WIDGET_NAME_KEY,""String_Node_Str"");
  table.setLinesVisible(true);
  table.setHeaderVisible(true);
  GridData gridData=new GridData(GridData.FILL_BOTH);
  gridData.grabExcessVerticalSpace=true;
  gridData.horizontalSpan=3;
  table.setLayoutData(gridData);
  getTableViewer().setUseHashlookup(true);
  getTableViewer().setContentProvider(new LanguageContentProvider());
  getTableViewer().setLabelProvider(new LanguageLabelProvider());
  setTableCursor(new DSVTableCursor(getTable(),SWT.NONE));
}","/** 
 * inits the m_tableViewer
 * @param parent the parent of the m_tableViewer
 */
private void initTableViewer(Composite parent){
  setTableViewer(new TableViewer(parent,SWT.SINGLE | SWT.FULL_SELECTION));
  Table table=getTable();
  table.setData(SwtAUTHierarchyConstants.WIDGET_NAME,""String_Node_Str"");
  table.setLinesVisible(true);
  table.setHeaderVisible(true);
  GridData gridData=new GridData(GridData.FILL_BOTH);
  gridData.grabExcessVerticalSpace=true;
  gridData.horizontalSpan=3;
  table.setLayoutData(gridData);
  getTableViewer().setUseHashlookup(true);
  getTableViewer().setContentProvider(new LanguageContentProvider());
  getTableViewer().setLabelProvider(new LanguageLabelProvider());
  setTableCursor(new DSVTableCursor(getTable(),SWT.NONE));
}",0.9808074123097288
96359,"/** 
 * Add the ""Add"", ""Delete"" and ""Insert"" buttons
 * @param parent the parent composite
 */
private void createButtons(Composite parent){
  setAddButton(new Button(parent,SWT.PUSH | SWT.CENTER));
  getAddButton().setData(WIDGET_NAME_KEY,""String_Node_Str"");
  getAddButton().setText(Messages.JubulaDataSetViewAppend);
  GridData gridData=new GridData(GridData.HORIZONTAL_ALIGN_BEGINNING);
  gridData.widthHint=80;
  getAddButton().setLayoutData(gridData);
  getAddButton().setEnabled(false);
  getControlEnabler().addControl(getAddButton());
  setInsertButton(new Button(parent,SWT.PUSH | SWT.CENTER));
  getInsertButton().setData(WIDGET_NAME_KEY,""String_Node_Str"");
  getInsertButton().setText(Messages.GDDataSetViewInsert);
  gridData=new GridData(GridData.HORIZONTAL_ALIGN_BEGINNING);
  gridData.widthHint=80;
  getInsertButton().setLayoutData(gridData);
  getInsertButton().setEnabled(false);
  getControlEnabler().addControl(getInsertButton());
  setDeleteButton(new Button(parent,SWT.PUSH | SWT.CENTER));
  getDeleteButton().setData(WIDGET_NAME_KEY,""String_Node_Str"");
  getDeleteButton().setText(Messages.JubulaDataSetViewDelete);
  gridData=new GridData(GridData.HORIZONTAL_ALIGN_BEGINNING);
  gridData.widthHint=80;
  getDeleteButton().setLayoutData(gridData);
  getDeleteButton().setEnabled(false);
  getControlEnabler().addControl(getDeleteButton());
  addListenerToButtons();
}","/** 
 * Add the ""Add"", ""Delete"" and ""Insert"" buttons
 * @param parent the parent composite
 */
private void createButtons(Composite parent){
  setAddButton(new Button(parent,SWT.PUSH | SWT.CENTER));
  getAddButton().setData(SwtAUTHierarchyConstants.WIDGET_NAME,""String_Node_Str"");
  getAddButton().setText(Messages.JubulaDataSetViewAppend);
  GridData gridData=new GridData(GridData.HORIZONTAL_ALIGN_BEGINNING);
  gridData.widthHint=80;
  getAddButton().setLayoutData(gridData);
  getAddButton().setEnabled(false);
  getControlEnabler().addControl(getAddButton());
  setInsertButton(new Button(parent,SWT.PUSH | SWT.CENTER));
  getInsertButton().setData(SwtAUTHierarchyConstants.WIDGET_NAME,""String_Node_Str"");
  getInsertButton().setText(Messages.GDDataSetViewInsert);
  gridData=new GridData(GridData.HORIZONTAL_ALIGN_BEGINNING);
  gridData.widthHint=80;
  getInsertButton().setLayoutData(gridData);
  getInsertButton().setEnabled(false);
  getControlEnabler().addControl(getInsertButton());
  setDeleteButton(new Button(parent,SWT.PUSH | SWT.CENTER));
  getDeleteButton().setData(SwtAUTHierarchyConstants.WIDGET_NAME,""String_Node_Str"");
  getDeleteButton().setText(Messages.JubulaDataSetViewDelete);
  gridData=new GridData(GridData.HORIZONTAL_ALIGN_BEGINNING);
  gridData.widthHint=80;
  getDeleteButton().setLayoutData(gridData);
  getDeleteButton().setEnabled(false);
  getControlEnabler().addControl(getDeleteButton());
  addListenerToButtons();
}",0.9694200351493848
96360,"/** 
 * Inits the layout.
 */
private void initControls(){
  GridLayout shellLayout=new GridLayout();
  setLayout(shellLayout);
  Composite composite=new Composite(this,SWT.NONE);
  composite.setData(NAME,""String_Node_Str"");
  GridLayout compositeLayout=new GridLayout(2,false);
  composite.setLayout(compositeLayout);
  GridData data=new GridData();
  data.horizontalAlignment=GridData.FILL;
  data.verticalAlignment=GridData.FILL;
  data.grabExcessHorizontalSpace=true;
  data.grabExcessVerticalSpace=true;
  composite.setLayoutData(data);
  new Label(composite,SWT.NONE);
  m_value1Field=new Text(composite,SWT.BORDER | SWT.RIGHT);
  GridData value1FieldData=new GridData();
  value1FieldData.horizontalAlignment=GridData.FILL;
  value1FieldData.verticalAlignment=GridData.BEGINNING;
  value1FieldData.grabExcessHorizontalSpace=true;
  m_value1Field.setLayoutData(value1FieldData);
  m_operator=new Label(composite,SWT.NONE);
  m_operator.setData(NAME,""String_Node_Str"");
  PlusOperator plus=new PlusOperator();
  m_operator.setText(plus.toString());
  m_operator.setData(""String_Node_Str"",plus);
  GridData operatorData=new GridData();
  operatorData.horizontalAlignment=GridData.END;
  m_operator.setLayoutData(operatorData);
  m_value2Field=new Text(composite,SWT.BORDER | SWT.RIGHT);
  GridData value2FieldData=new GridData();
  value2FieldData.horizontalAlignment=GridData.FILL;
  value2FieldData.verticalAlignment=GridData.BEGINNING;
  value2FieldData.grabExcessHorizontalSpace=true;
  m_value2Field.setLayoutData(value2FieldData);
  m_equalsButton=new Button(composite,SWT.PUSH);
  m_equalsButton.setText(""String_Node_Str"");
  m_equalsButton.setData(NAME,""String_Node_Str"");
  GridData equalsButtonData=new GridData();
  equalsButtonData.horizontalAlignment=GridData.END;
  m_equalsButton.setLayoutData(equalsButtonData);
  m_sumField=new Text(composite,SWT.BORDER | SWT.RIGHT);
  m_sumField.setData(NAME,""String_Node_Str"");
  m_sumField.setEditable(false);
  GridData sumFieldData=new GridData();
  sumFieldData.horizontalAlignment=GridData.FILL;
  sumFieldData.verticalAlignment=GridData.BEGINNING;
  sumFieldData.grabExcessHorizontalSpace=true;
  m_sumField.setLayoutData(sumFieldData);
}","/** 
 * Inits the layout.
 */
private void initControls(){
  GridLayout shellLayout=new GridLayout();
  setLayout(shellLayout);
  Composite composite=new Composite(this,SWT.NONE);
  composite.setData(WIDGET_NAME,""String_Node_Str"");
  GridLayout compositeLayout=new GridLayout(2,false);
  composite.setLayout(compositeLayout);
  GridData data=new GridData();
  data.horizontalAlignment=GridData.FILL;
  data.verticalAlignment=GridData.FILL;
  data.grabExcessHorizontalSpace=true;
  data.grabExcessVerticalSpace=true;
  composite.setLayoutData(data);
  new Label(composite,SWT.NONE);
  m_value1Field=new Text(composite,SWT.BORDER | SWT.RIGHT);
  GridData value1FieldData=new GridData();
  value1FieldData.horizontalAlignment=GridData.FILL;
  value1FieldData.verticalAlignment=GridData.BEGINNING;
  value1FieldData.grabExcessHorizontalSpace=true;
  m_value1Field.setLayoutData(value1FieldData);
  m_operator=new Label(composite,SWT.NONE);
  m_operator.setData(WIDGET_NAME,""String_Node_Str"");
  PlusOperator plus=new PlusOperator();
  m_operator.setText(plus.toString());
  m_operator.setData(""String_Node_Str"",plus);
  GridData operatorData=new GridData();
  operatorData.horizontalAlignment=GridData.END;
  m_operator.setLayoutData(operatorData);
  m_value2Field=new Text(composite,SWT.BORDER | SWT.RIGHT);
  GridData value2FieldData=new GridData();
  value2FieldData.horizontalAlignment=GridData.FILL;
  value2FieldData.verticalAlignment=GridData.BEGINNING;
  value2FieldData.grabExcessHorizontalSpace=true;
  m_value2Field.setLayoutData(value2FieldData);
  m_equalsButton=new Button(composite,SWT.PUSH);
  m_equalsButton.setText(""String_Node_Str"");
  m_equalsButton.setData(WIDGET_NAME,""String_Node_Str"");
  GridData equalsButtonData=new GridData();
  equalsButtonData.horizontalAlignment=GridData.END;
  m_equalsButton.setLayoutData(equalsButtonData);
  m_sumField=new Text(composite,SWT.BORDER | SWT.RIGHT);
  m_sumField.setData(WIDGET_NAME,""String_Node_Str"");
  m_sumField.setEditable(false);
  GridData sumFieldData=new GridData();
  sumFieldData.horizontalAlignment=GridData.FILL;
  sumFieldData.verticalAlignment=GridData.BEGINNING;
  sumFieldData.grabExcessHorizontalSpace=true;
  m_sumField.setLayoutData(sumFieldData);
}",0.9936794582392776
96361,"/** 
 * Adds name information to the given widget, if necessary.
 * @param widget The widget to name.
 */
private void addNameData(Widget widget){
  if (widget != null && !widget.isDisposed()) {
    if (widget.getData(Startup.GD_RCP_DATA_KEY) != null) {
      return;
    }
    Object data=getWidgetData(widget);
    if (data instanceof IContributionItem) {
      String actionId=((IContributionItem)data).getId();
      if (actionId != null && actionId.trim().length() > 0) {
        widget.setData(Startup.GD_RCP_DATA_KEY,actionId);
        Control parent=null;
        try {
          if (widget instanceof ToolItem) {
            parent=((ToolItem)widget).getParent();
          }
 else           if (widget instanceof CoolItem) {
            parent=((CoolItem)widget).getParent();
          }
 else           if (widget instanceof Control) {
            parent=((Control)widget).getParent();
          }
        }
 catch (        NoClassDefFoundError e) {
        }
        if (parent != null && !parent.isDisposed()) {
          parent.update();
          parent.redraw();
          parent.update();
        }
      }
    }
 else     if (data instanceof PreferenceDialog) {
      PreferenceDialog prefDialog=(PreferenceDialog)data;
      prefDialog.addPageChangedListener(new IPageChangedListener(){
        public void pageChanged(        PageChangedEvent event){
          addNameDataToPrefPage(event.getSelectedPage());
        }
      }
);
      addNameDataToPrefPage(prefDialog.getSelectedPage());
    }
    if (generateNames && data instanceof Dialog) {
      Dialog dialog=(Dialog)data;
      setNameForDialogButtonBarButtons(dialog);
    }
  }
}","/** 
 * Adds name information to the given widget, if necessary.
 * @param widget The widget to name.
 */
private void addNameData(Widget widget){
  if (widget != null && !widget.isDisposed()) {
    if (widget.getData(Startup.TEST_RCP_DATA_KEY) != null) {
      return;
    }
    Object data=getWidgetData(widget);
    if (data instanceof IContributionItem) {
      String actionId=((IContributionItem)data).getId();
      if (actionId != null && actionId.trim().length() > 0) {
        widget.setData(Startup.TEST_RCP_DATA_KEY,actionId);
        Control parent=null;
        try {
          if (widget instanceof ToolItem) {
            parent=((ToolItem)widget).getParent();
          }
 else           if (widget instanceof CoolItem) {
            parent=((CoolItem)widget).getParent();
          }
 else           if (widget instanceof Control) {
            parent=((Control)widget).getParent();
          }
        }
 catch (        NoClassDefFoundError e) {
        }
        if (parent != null && !parent.isDisposed()) {
          parent.update();
          parent.redraw();
          parent.update();
        }
      }
    }
 else     if (data instanceof PreferenceDialog) {
      PreferenceDialog prefDialog=(PreferenceDialog)data;
      prefDialog.addPageChangedListener(new IPageChangedListener(){
        public void pageChanged(        PageChangedEvent event){
          addNameDataToPrefPage(event.getSelectedPage());
        }
      }
);
      addNameDataToPrefPage(prefDialog.getSelectedPage());
    }
    if (generateNames && data instanceof Dialog) {
      Dialog dialog=(Dialog)data;
      setNameForDialogButtonBarButtons(dialog);
    }
  }
}",0.9963877182420228
96362,"/** 
 * Attaches name data to the given page appropriate.
 * @param selectedPage The page to which we will try to attach the name data.
 */
private void addNameDataToPrefPage(Object selectedPage){
  if (selectedPage == null) {
    return;
  }
  PreferenceManager prefMan=PlatformUI.getWorkbench().getPreferenceManager();
  Iterator iter=prefMan.getElements(PreferenceManager.PRE_ORDER).iterator();
  while (iter.hasNext()) {
    IPreferenceNode prefNode=(IPreferenceNode)iter.next();
    if (selectedPage.equals(prefNode.getPage())) {
      Control pageControl=prefNode.getPage().getControl();
      String prefNodeId=prefNode.getId();
      if (pageControl != null && !pageControl.isDisposed() && pageControl.getData(Startup.GD_RCP_DATA_KEY) == null && prefNodeId != null && prefNodeId.trim().length() > 0) {
        pageControl.setData(Startup.GD_RCP_DATA_KEY,prefNodeId);
        Shell prefShell=pageControl.getDisplay().getActiveShell();
        Event activateEvent=new Event();
        activateEvent.time=(int)System.currentTimeMillis();
        activateEvent.type=SWT.Activate;
        activateEvent.widget=prefShell;
        prefShell.notifyListeners(SWT.Activate,activateEvent);
      }
      break;
    }
  }
}","/** 
 * Attaches name data to the given page appropriate.
 * @param selectedPage The page to which we will try to attach the name data.
 */
private void addNameDataToPrefPage(Object selectedPage){
  if (selectedPage == null) {
    return;
  }
  PreferenceManager prefMan=PlatformUI.getWorkbench().getPreferenceManager();
  Iterator iter=prefMan.getElements(PreferenceManager.PRE_ORDER).iterator();
  while (iter.hasNext()) {
    IPreferenceNode prefNode=(IPreferenceNode)iter.next();
    if (selectedPage.equals(prefNode.getPage())) {
      Control pageControl=prefNode.getPage().getControl();
      String prefNodeId=prefNode.getId();
      if (pageControl != null && !pageControl.isDisposed() && pageControl.getData(Startup.TEST_RCP_DATA_KEY) == null && prefNodeId != null && prefNodeId.trim().length() > 0) {
        pageControl.setData(Startup.TEST_RCP_DATA_KEY,prefNodeId);
        Shell prefShell=pageControl.getDisplay().getActiveShell();
        Event activateEvent=new Event();
        activateEvent.time=(int)System.currentTimeMillis();
        activateEvent.type=SWT.Activate;
        activateEvent.widget=prefShell;
        prefShell.notifyListeners(SWT.Activate,activateEvent);
      }
      break;
    }
  }
}",0.995085995085995
96363,"/** 
 * {@inheritDoc}
 */
public void partOpened(IWorkbenchPartReference partRef){
  if (partRef instanceof WorkbenchPartReference) {
    WorkbenchPartReference workbenchPartRef=(WorkbenchPartReference)partRef;
    Control partContent=workbenchPartRef.getPane().getControl();
    if (partContent != null && !partContent.isDisposed() && partContent.getData(GD_RCP_DATA_KEY) == null) {
      String partId=workbenchPartRef.getId();
      if (partRef instanceof IViewReference) {
        String secondaryId=((IViewReference)partRef).getSecondaryId();
        if (secondaryId != null) {
          partId+=""String_Node_Str"" + secondaryId;
        }
      }
      if (partId == null || partId.trim().length() == 0) {
        return;
      }
      partContent.setData(GD_RCP_DATA_KEY,partId);
      Control partToolbar=workbenchPartRef.getPane().getToolBar();
      if (partToolbar != null) {
        partToolbar.setData(GD_RCP_DATA_KEY,partId + TOOLBAR_ID_SUFFIX);
      }
      Shell shell=PlatformUI.getWorkbench().getActiveWorkbenchWindow().getShell();
      Event activateEvent=new Event();
      activateEvent.time=(int)System.currentTimeMillis();
      activateEvent.type=SWT.Activate;
      activateEvent.widget=shell;
      shell.notifyListeners(SWT.Activate,activateEvent);
    }
  }
}","/** 
 * {@inheritDoc}
 */
public void partOpened(IWorkbenchPartReference partRef){
  if (partRef instanceof WorkbenchPartReference) {
    WorkbenchPartReference workbenchPartRef=(WorkbenchPartReference)partRef;
    Control partContent=workbenchPartRef.getPane().getControl();
    if (partContent != null && !partContent.isDisposed() && partContent.getData(TEST_RCP_DATA_KEY) == null) {
      String partId=workbenchPartRef.getId();
      if (partRef instanceof IViewReference) {
        String secondaryId=((IViewReference)partRef).getSecondaryId();
        if (secondaryId != null) {
          partId+=""String_Node_Str"" + secondaryId;
        }
      }
      if (partId == null || partId.trim().length() == 0) {
        return;
      }
      partContent.setData(TEST_RCP_DATA_KEY,partId);
      Control partToolbar=workbenchPartRef.getPane().getToolBar();
      if (partToolbar != null) {
        partToolbar.setData(TEST_RCP_DATA_KEY,partId + TOOLBAR_ID_SUFFIX);
      }
      Shell shell=PlatformUI.getWorkbench().getActiveWorkbenchWindow().getShell();
      Event activateEvent=new Event();
      activateEvent.time=(int)System.currentTimeMillis();
      activateEvent.type=SWT.Activate;
      activateEvent.widget=shell;
      shell.notifyListeners(SWT.Activate,activateEvent);
    }
  }
}",0.9930286599535244
96364,"/** 
 * use this method to set a name on the given object
 * @param useObject the object
 * @param methodToInvoke the method to invoke
 * @param buttonID the button id
 * @param buttonName the button name
 */
private void invokeNameSetting(Object useObject,Method methodToInvoke,Integer buttonID,Object buttonName){
  Object ret=null;
  try {
    ret=methodToInvoke.invoke(useObject,new Object[]{buttonID});
  }
 catch (  IllegalArgumentException e) {
  }
catch (  IllegalAccessException e) {
  }
catch (  InvocationTargetException e) {
  }
  if (ret instanceof Button) {
    Button button=(Button)ret;
    if (button.getData(GD_RCP_DATA_KEY) == null) {
      button.setData(GD_RCP_DATA_KEY,buttonName);
    }
  }
}","/** 
 * use this method to set a name on the given object
 * @param useObject the object
 * @param methodToInvoke the method to invoke
 * @param buttonID the button id
 * @param buttonName the button name
 */
private void invokeNameSetting(Object useObject,Method methodToInvoke,Integer buttonID,Object buttonName){
  Object ret=null;
  try {
    ret=methodToInvoke.invoke(useObject,new Object[]{buttonID});
  }
 catch (  IllegalArgumentException e) {
  }
catch (  IllegalAccessException e) {
  }
catch (  InvocationTargetException e) {
  }
  if (ret instanceof Button) {
    Button button=(Button)ret;
    if (button.getData(TEST_RCP_DATA_KEY) == null) {
      button.setData(TEST_RCP_DATA_KEY,buttonName);
    }
  }
}",0.99163179916318
96365,"/** 
 * {@inheritDoc}
 */
public void setComponent(final Object graphicsComponent){
  getEventThreadQueuer().invokeAndWait(getClass().getName() + ""String_Node_Str"",new IRunnable(){
    public Object run() throws StepExecutionException {
      FigureCanvas figureCanvas=(FigureCanvas)graphicsComponent;
      Composite parent=figureCanvas;
      while (parent != null && !(parent.getData(Startup.GD_GEF_VIEWER_DATA_KEY) instanceof GraphicalViewer)) {
        parent=parent.getParent();
      }
      if (parent != null) {
        m_composite=parent;
        m_viewer=(GraphicalViewer)parent.getData(Startup.GD_GEF_VIEWER_DATA_KEY);
      }
      return null;
    }
  }
);
}","/** 
 * {@inheritDoc}
 */
public void setComponent(final Object graphicsComponent){
  getEventThreadQueuer().invokeAndWait(getClass().getName() + ""String_Node_Str"",new IRunnable(){
    public Object run() throws StepExecutionException {
      FigureCanvas figureCanvas=(FigureCanvas)graphicsComponent;
      Composite parent=figureCanvas;
      while (parent != null && !(parent.getData(Startup.TEST_GEF_VIEWER_DATA_KEY) instanceof GraphicalViewer)) {
        parent=parent.getParent();
      }
      if (parent != null) {
        m_composite=parent;
        m_viewer=(GraphicalViewer)parent.getData(Startup.TEST_GEF_VIEWER_DATA_KEY);
      }
      return null;
    }
  }
);
}",0.9910979228486648
96366,"/** 
 * {@inheritDoc}
 */
public void handleEvent(Event event){
  Display display=event.display;
  display.removeFilter(SWT.MouseDown,this);
  display.removeFilter(SWT.MouseEnter,m_highlightAppender);
  m_highlightAppender.removeAddedListeners();
  event.doit=false;
  event.type=SWT.None;
  Widget selectedWidget=event.widget;
  IComponentIdentifier compId=null;
  if (!(selectedWidget instanceof FigureCanvas)) {
    sendIdInfo(compId);
    return;
  }
  FigureCanvas figureCanvas=(FigureCanvas)selectedWidget;
  Composite parent=figureCanvas;
  while (parent != null && !(parent.getData(Startup.GD_GEF_VIEWER_DATA_KEY) instanceof GraphicalViewer)) {
    parent=parent.getParent();
  }
  if (parent == null) {
    sendIdInfo(compId);
    return;
  }
  Object gefData=parent.getData(Startup.GD_GEF_VIEWER_DATA_KEY);
  if (gefData instanceof EditPartViewer) {
    EditPartViewer viewer=(EditPartViewer)gefData;
    Point cursorLocation=new Point(display.map(null,viewer.getControl(),display.getCursorLocation()));
    EditPart editPart=viewer.findObjectAt(cursorLocation);
    EditPart primaryEditPart=FigureCanvasUtil.getPrimaryEditPart(editPart,viewer.getRootEditPart());
    List idStringList=Collections.EMPTY_LIST;
    if (primaryEditPart != null) {
      idStringList=getPathToRoot(viewer.getRootEditPart(),cursorLocation,primaryEditPart);
    }
 else {
      EditDomain editDomain=viewer.getEditDomain();
      if (editDomain != null) {
        PaletteViewer paletteViewer=editDomain.getPaletteViewer();
        if (paletteViewer != null) {
          EditPart paletteEditPart=paletteViewer.findObjectAt(new Point(display.map(viewer.getControl(),paletteViewer.getControl(),cursorLocation.getSWTPoint())));
          if (paletteEditPart != null) {
            idStringList=getToolPathToRoot(paletteViewer.getRootEditPart(),paletteEditPart);
          }
        }
      }
    }
    compId=createCompId(idStringList);
  }
  sendIdInfo(compId);
}","/** 
 * {@inheritDoc}
 */
public void handleEvent(Event event){
  Display display=event.display;
  display.removeFilter(SWT.MouseDown,this);
  display.removeFilter(SWT.MouseEnter,m_highlightAppender);
  m_highlightAppender.removeAddedListeners();
  event.doit=false;
  event.type=SWT.None;
  Widget selectedWidget=event.widget;
  IComponentIdentifier compId=null;
  if (!(selectedWidget instanceof FigureCanvas)) {
    sendIdInfo(compId);
    return;
  }
  FigureCanvas figureCanvas=(FigureCanvas)selectedWidget;
  Composite parent=figureCanvas;
  while (parent != null && !(parent.getData(Startup.TEST_GEF_VIEWER_DATA_KEY) instanceof GraphicalViewer)) {
    parent=parent.getParent();
  }
  if (parent == null) {
    sendIdInfo(compId);
    return;
  }
  Object gefData=parent.getData(Startup.TEST_GEF_VIEWER_DATA_KEY);
  if (gefData instanceof EditPartViewer) {
    EditPartViewer viewer=(EditPartViewer)gefData;
    Point cursorLocation=new Point(display.map(null,viewer.getControl(),display.getCursorLocation()));
    EditPart editPart=viewer.findObjectAt(cursorLocation);
    EditPart primaryEditPart=FigureCanvasUtil.getPrimaryEditPart(editPart,viewer.getRootEditPart());
    List idStringList=Collections.EMPTY_LIST;
    if (primaryEditPart != null) {
      idStringList=getPathToRoot(viewer.getRootEditPart(),cursorLocation,primaryEditPart);
    }
 else {
      EditDomain editDomain=viewer.getEditDomain();
      if (editDomain != null) {
        PaletteViewer paletteViewer=editDomain.getPaletteViewer();
        if (paletteViewer != null) {
          EditPart paletteEditPart=paletteViewer.findObjectAt(new Point(display.map(viewer.getControl(),paletteViewer.getControl(),cursorLocation.getSWTPoint())));
          if (paletteEditPart != null) {
            idStringList=getToolPathToRoot(paletteViewer.getRootEditPart(),paletteEditPart);
          }
        }
      }
    }
    compId=createCompId(idStringList);
  }
  sendIdInfo(compId);
}",0.9969230769230768
96367,"/** 
 * Registers a   {@link GraphicalViewer} with the given {@link IWorkbenchPartReference}.
 * @param viewer The viewer to register.
 * @param partRef The reference to the part that (indirectly) contains theviewer.
 */
private void registerGraphicalViewer(GraphicalViewer viewer,IWorkbenchPartReference partRef){
  IWorkbenchPart part=partRef.getPart(false);
  if (part != null && partRef instanceof WorkbenchPartReference) {
    if (viewer != null) {
      Control partContent=((WorkbenchPartReference)partRef).getPane().getControl();
      if (partContent != null && !partContent.isDisposed()) {
        partContent.setData(Startup.GD_GEF_VIEWER_DATA_KEY,viewer);
      }
    }
  }
}","/** 
 * Registers a   {@link GraphicalViewer} with the given {@link IWorkbenchPartReference}.
 * @param viewer The viewer to register.
 * @param partRef The reference to the part that (indirectly) contains theviewer.
 */
private void registerGraphicalViewer(GraphicalViewer viewer,IWorkbenchPartReference partRef){
  IWorkbenchPart part=partRef.getPart(false);
  if (part != null && partRef instanceof WorkbenchPartReference) {
    if (viewer != null) {
      Control partContent=((WorkbenchPartReference)partRef).getPane().getControl();
      if (partContent != null && !partContent.isDisposed()) {
        partContent.setData(Startup.TEST_GEF_VIEWER_DATA_KEY,viewer);
      }
    }
  }
}",0.9956395348837208
96368,"/** 
 * @param figureCanvas The canvas for which to find the viewer.
 * @return the graphical viewer associated with the given canvas, or<code>null</code> if no such viewer could be found.
 */
public static GraphicalViewer getViewer(FigureCanvas figureCanvas){
  Composite parent=figureCanvas;
  while (parent != null && !(parent.getData(Startup.GD_GEF_VIEWER_DATA_KEY) instanceof GraphicalViewer)) {
    parent=parent.getParent();
  }
  if (parent != null) {
    return (GraphicalViewer)parent.getData(Startup.GD_GEF_VIEWER_DATA_KEY);
  }
  return null;
}","/** 
 * @param figureCanvas The canvas for which to find the viewer.
 * @return the graphical viewer associated with the given canvas, or<code>null</code> if no such viewer could be found.
 */
public static GraphicalViewer getViewer(FigureCanvas figureCanvas){
  Composite parent=figureCanvas;
  while (parent != null && !(parent.getData(Startup.TEST_GEF_VIEWER_DATA_KEY) instanceof GraphicalViewer)) {
    parent=parent.getParent();
  }
  if (parent != null) {
    return (GraphicalViewer)parent.getData(Startup.TEST_GEF_VIEWER_DATA_KEY);
  }
  return null;
}",0.989247311827957
96369,"/** 
 * {@inheritDoc}
 */
protected String getCompName(Object currentComponent){
  return (String)((Widget)currentComponent).getData(SwtAUTHierarchyConstants.WIDGET_NAME);
}","/** 
 * {@inheritDoc}
 */
protected String getCompName(Object currentComponent){
  return getComponentName((Widget)currentComponent);
}",0.7857142857142857
96370,"/** 
 * Names the given hierarchy container. <br>  If the managed component has a unique name, this name is used. Otherwise a name (unique for the hierachy level) is created. 
 * @param hierarchyContainer the hierarchyContainer to name, if hierarchyContainer is null,no action is performed and no exception is thrown.
 */
private synchronized void name(SwtHierarchyContainer hierarchyContainer){
  if (hierarchyContainer != null) {
    Widget component=hierarchyContainer.getComponentID().getRealComponent();
    Object compName=component.getData(SwtAUTHierarchyConstants.WIDGET_NAME);
    SwtHierarchyContainer hierarchyParent=null;
    Widget parent=SwtUtils.getWidgetParent(component);
    if (parent != null) {
      hierarchyParent=getHierarchyContainer(parent);
      hierarchyContainer.setParent(hierarchyParent);
    }
    if (hierarchyContainer.getName() != null && hierarchyContainer.getName().length() != 0) {
      return;
    }
    int count=1;
    String originalName=null;
    String newName=null;
    Object rcpCompId=component.getData(SwtAUTHierarchyConstants.RCP_NAME);
    boolean newNameGenerated=false;
    if (compName != null) {
      newName=compName.toString();
      originalName=compName.toString();
    }
 else     if (rcpCompId != null) {
      newName=rcpCompId.toString();
      originalName=rcpCompId.toString();
    }
    if (newName == null) {
      newNameGenerated=true;
      while (!isUniqueName(hierarchyParent,component,newName)) {
        newName=createName(component,count);
        count++;
      }
    }
 else {
      while (!isUniqueName(hierarchyParent,component,newName)) {
        newName=createName(originalName,count);
        count++;
      }
    }
    hierarchyContainer.setName(newName,newNameGenerated);
  }
}","/** 
 * Names the given hierarchy container. <br>  If the managed component has a unique name, this name is used. Otherwise a name (unique for the hierachy level) is created. 
 * @param hierarchyContainer the hierarchyContainer to name, if hierarchyContainer is null,no action is performed and no exception is thrown.
 */
private synchronized void name(SwtHierarchyContainer hierarchyContainer){
  if (hierarchyContainer != null) {
    Widget component=hierarchyContainer.getComponentID().getRealComponent();
    String compName=FindSWTComponentBP.getComponentName(component);
    SwtHierarchyContainer hierarchyParent=null;
    Widget parent=SwtUtils.getWidgetParent(component);
    if (parent != null) {
      hierarchyParent=getHierarchyContainer(parent);
      hierarchyContainer.setParent(hierarchyParent);
    }
    if (hierarchyContainer.getName() != null && hierarchyContainer.getName().length() != 0) {
      return;
    }
    int count=1;
    String originalName=null;
    String newName=null;
    Object rcpCompId=component.getData(SwtAUTHierarchyConstants.RCP_NAME);
    boolean newNameGenerated=false;
    if (compName != null) {
      newName=compName.toString();
      originalName=compName.toString();
    }
 else     if (rcpCompId != null) {
      newName=rcpCompId.toString();
      originalName=rcpCompId.toString();
    }
    if (newName == null) {
      newNameGenerated=true;
      while (!isUniqueName(hierarchyParent,component,newName)) {
        newName=createName(component,count);
        count++;
      }
    }
 else {
      while (!isUniqueName(hierarchyParent,component,newName)) {
        newName=createName(originalName,count);
        count++;
      }
    }
    hierarchyContainer.setName(newName,newNameGenerated);
  }
}",0.6113164628945124
96371,"/** 
 * Checks for uniqueness of <code>name</code> for the components in <code>parent</code>.<br> If parent is null every name is unique, a null name is NEVER unique. If both parameters are null, false is returned. <br>
 * @param parent the hierarchy container containing the components which are checked.
 * @param widget the widget that might receive the checked name
 * @param name the name to check
 * @return true if the name is treated as unique, false otherwise.
 */
private boolean isUniqueName(SwtHierarchyContainer parent,Widget widget,String name){
  if (name == null) {
    return false;
  }
  if (parent == null) {
    return true;
  }
  SwtHierarchyContainer[] compIDs=parent.getComponents();
  final int length=compIDs.length;
  for (int index=0; index < length; index++) {
    Widget childWidget=compIDs[index].getComponentID().getRealComponent();
    if (childWidget != null && !childWidget.isDisposed()) {
      Object childWidgetName=childWidget.getData(SwtAUTHierarchyConstants.WIDGET_NAME);
      if ((childWidget != widget) && name.equals(childWidgetName)) {
        return false;
      }
    }
  }
  for (int index=0; index < length; index++) {
    if (name.equals(compIDs[index].getName())) {
      return false;
    }
  }
  return true;
}","/** 
 * Checks for uniqueness of <code>name</code> for the components in <code>parent</code>.<br> If parent is null every name is unique, a null name is NEVER unique. If both parameters are null, false is returned. <br>
 * @param parent the hierarchy container containing the components which are checked.
 * @param widget the widget that might receive the checked name
 * @param name the name to check
 * @return true if the name is treated as unique, false otherwise.
 */
private boolean isUniqueName(SwtHierarchyContainer parent,Widget widget,String name){
  if (name == null) {
    return false;
  }
  if (parent == null) {
    return true;
  }
  SwtHierarchyContainer[] compIDs=parent.getComponents();
  final int length=compIDs.length;
  for (int index=0; index < length; index++) {
    Widget childWidget=compIDs[index].getComponentID().getRealComponent();
    if (childWidget != null && !childWidget.isDisposed()) {
      String childWidgetName=FindSWTComponentBP.getComponentName(childWidget);
      if ((childWidget != widget) && name.equals(childWidgetName)) {
        return false;
      }
    }
  }
  for (int index=0; index < length; index++) {
    if (name.equals(compIDs[index].getName())) {
      return false;
    }
  }
  return true;
}",0.9582836710369488
96372,"/** 
 * creates logical name for CAP
 * @param w Widget
 * @param id IComponentIdentifier
 * @return logical Name
 */
protected String generateLogicalName(Widget w,IComponentIdentifier id){
  String logName=null;
  String logicalName=null;
  if (w.getData(SwtAUTHierarchyConstants.WIDGET_NAME) == null) {
    if (!(w instanceof TabFolder) && !(w instanceof CTabFolder)) {
      logName=getTextOfComponent(w);
    }
    if (logName == null || logName.equals(StringConstants.EMPTY)) {
      logName=minimizeCapName(id.getComponentName());
    }
  }
 else {
    logName=w.getData(SwtAUTHierarchyConstants.WIDGET_NAME).toString();
  }
  logicalName=logName + getAbbreviations(w);
  Widget parent=getWidgetParent(w);
  while (parent != null) {
    logName=getTextOfComponent(parent);
    if (logName == null) {
      logName=minimizeCapName(parent.getClass().getName());
    }
    if ((parent instanceof Shell || parent instanceof TabFolder || parent instanceof CTabFolder|| parent instanceof Group) && !(logName.equals(StringConstants.EMPTY))) {
      logicalName=logName + ""String_Node_Str"" + logicalName;
    }
    parent=getWidgetParent(parent);
  }
  return NameValidator.convertToValidLogicalName(logicalName);
}","/** 
 * creates logical name for CAP
 * @param w Widget
 * @param id IComponentIdentifier
 * @return logical Name
 */
protected String generateLogicalName(Widget w,IComponentIdentifier id){
  String logName=null;
  String logicalName=null;
  String compName=FindSWTComponentBP.getComponentName(w);
  if (compName == null) {
    if (!(w instanceof TabFolder) && !(w instanceof CTabFolder)) {
      logName=getTextOfComponent(w);
    }
    if (logName == null || logName.equals(StringConstants.EMPTY)) {
      logName=minimizeCapName(id.getComponentName());
    }
  }
 else {
    logName=compName;
  }
  logicalName=logName + getAbbreviations(w);
  Widget parent=getWidgetParent(w);
  while (parent != null) {
    logName=getTextOfComponent(parent);
    if (logName == null) {
      logName=minimizeCapName(parent.getClass().getName());
    }
    if ((parent instanceof Shell || parent instanceof TabFolder || parent instanceof CTabFolder|| parent instanceof Group) && !(logName.equals(StringConstants.EMPTY))) {
      logicalName=logName + ""String_Node_Str"" + logicalName;
    }
    parent=getWidgetParent(parent);
  }
  return NameValidator.convertToValidLogicalName(logicalName);
}",0.923590814196242
96373,"/** 
 * Initializes all pre-defined variables for execution of the given  test suite.
 * @param varStore The place to store the variables.
 * @param testSuite The test suite that will be executed. Some variableshave values based on this test suite.
 */
private void storePredefinedVariables(TDVariableStore varStore,ITestSuitePO testSuite){
  varStore.store(TDVariableStore.VAR_LANG,m_executionLanguage.toString());
  varStore.store(TDVariableStore.VAR_TS,testSuite.getName());
  varStore.store(TDVariableStore.VAR_USERNAME,System.getProperty(""String_Node_Str""));
  varStore.store(TDVariableStore.VAR_DBUSERNAME,Hibernator.instance().getCurrentDBUser());
  try {
    ServerConnection serverConn=ServerConnection.getInstance();
    varStore.store(TDVariableStore.VAR_AUTSTARTER,serverConn.getCommunicator().getHostName());
    varStore.store(TDVariableStore.VAR_PORT,String.valueOf(serverConn.getCommunicator().getPort()));
  }
 catch (  ConnectionException ce) {
  }
  varStore.store(TDVariableStore.VAR_AUT,testSuite.getAut().getName());
  if (m_autConfig != null) {
    varStore.store(TDVariableStore.VAR_AUTCONFIG,m_autConfig.getName());
  }
 else {
    varStore.store(TDVariableStore.VAR_AUTCONFIG,TestresultSummaryBP.AUTRUN);
  }
  varStore.store(TDVariableStore.VAR_CLIENTVERSION,(String)Platform.getBundle(CLIENT_TEST_PLUGIN_ID).getHeaders().get(Constants.BUNDLE_VERSION));
}","/** 
 * Initializes all pre-defined variables for execution of the given  test suite.
 * @param varStore The place to store the variables.
 * @param testSuite The test suite that will be executed. Some variableshave values based on this test suite.
 */
private void storePredefinedVariables(TDVariableStore varStore,ITestSuitePO testSuite){
  varStore.store(TDVariableStore.VAR_LANG,m_executionLanguage.toString());
  varStore.store(TDVariableStore.VAR_TS,testSuite.getName());
  varStore.store(TDVariableStore.VAR_USERNAME,System.getProperty(""String_Node_Str""));
  varStore.store(TDVariableStore.VAR_DBUSERNAME,Hibernator.instance().getCurrentDBUser());
  try {
    ServerConnection serverConn=ServerConnection.getInstance();
    varStore.store(TDVariableStore.VAR_AUTAGENT,serverConn.getCommunicator().getHostName());
    varStore.store(TDVariableStore.VAR_PORT,String.valueOf(serverConn.getCommunicator().getPort()));
  }
 catch (  ConnectionException ce) {
  }
  varStore.store(TDVariableStore.VAR_AUT,testSuite.getAut().getName());
  if (m_autConfig != null) {
    varStore.store(TDVariableStore.VAR_AUTCONFIG,m_autConfig.getName());
  }
 else {
    varStore.store(TDVariableStore.VAR_AUTCONFIG,TestresultSummaryBP.AUTRUN);
  }
  varStore.store(TDVariableStore.VAR_CLIENTVERSION,(String)Platform.getBundle(CLIENT_TEST_PLUGIN_ID).getHeaders().get(Constants.BUNDLE_VERSION));
}",0.99637943519189
96374,"/** 
 * {@inheritDoc}
 */
protected void createPages(){
  if (m_editorHelper == null) {
    m_editorHelper=new JBEditorHelper(this);
  }
  m_omEditorBP=new OMEditorBP(this);
  IObjectMappingPO objMap=getAut().getObjMap();
  if (objMap == null) {
    objMap=PoMaker.createObjectMappingPO();
    getAut().setObjMap(objMap);
  }
  checkMasterSessionUpToDate();
  createActions();
  MenuManager menuMgr=new MenuManager();
  menuMgr.setRemoveAllWhenShown(true);
  menuMgr.addMenuListener(new IMenuListener(){
    public void menuAboutToShow(    IMenuManager mgr){
      fillTreeContextMenu(mgr);
    }
  }
);
  GuiEventDispatcher.getInstance().addEditorDirtyStateListener(this,true);
  getEditorHelper().addListeners();
  checkAndFixInconsistentData();
  getOmEditorBP().collectNewLogicalComponentNames();
  int splitPaneViewIndex=addPage(createSplitPanePageControl(getContainer(),menuMgr));
  int treeViewIndex=addPage(createTreePageControl(getContainer(),menuMgr));
  int tableViewIndex=addPage(createTablePageControl(getContainer()));
  int configViewIndex=addPage(createConfigPageControl(getContainer()));
  setPageText(splitPaneViewIndex,Messages.ObjectMappingEditorSplitPaneView);
  setPageText(treeViewIndex,Messages.ObjectMappingEditorTreeView);
  setPageText(tableViewIndex,Messages.ObjectMappingEditorTableView);
  setPageText(configViewIndex,Messages.ObjectMappingEditorConfigView);
  m_pageToSelectionProvider.put(splitPaneViewIndex,m_splitPaneSelectionProvider);
  m_pageToSelectionProvider.put(treeViewIndex,m_treeViewer);
  m_pageToSelectionProvider.put(tableViewIndex,m_tableViewer);
  m_pageToSelectionProvider.put(configViewIndex,new NullSelectionProvider());
  m_selectionProvider=new SelectionProviderIntermediate();
  m_selectionProvider.setSelectionProviderDelegate(m_pageToSelectionProvider.get(getActivePage()));
  getSite().setSelectionProvider(m_selectionProvider);
  m_selectionProvider.addSelectionChangedListener(m_actionListener);
  m_selectionProvider.addSelectionChangedListener(m_editorSelectionChangedListener);
  ObjectMappingEventDispatcher.addObserver(this);
  m_treeViewerUpdater=new ComponentNameTreeViewerUpdater(m_treeViewer,getEditorHelper().getEditSupport().getCompMapper().getCompNameCache());
  m_treeViewer.expandToLevel(2);
}","/** 
 * {@inheritDoc}
 */
protected void createPages(){
  if (m_editorHelper == null) {
    m_editorHelper=new JBEditorHelper(this);
  }
  m_omEditorBP=new OMEditorBP(this);
  IObjectMappingPO objMap=getAut().getObjMap();
  if (objMap == null) {
    objMap=PoMaker.createObjectMappingPO();
    getAut().setObjMap(objMap);
  }
  checkMasterSessionUpToDate();
  createActions();
  MenuManager menuMgr=new MenuManager();
  menuMgr.setRemoveAllWhenShown(true);
  menuMgr.addMenuListener(new IMenuListener(){
    public void menuAboutToShow(    IMenuManager mgr){
      fillTreeContextMenu(mgr);
    }
  }
);
  GuiEventDispatcher.getInstance().addEditorDirtyStateListener(this,true);
  getEditorHelper().addListeners();
  getOmEditorBP().collectNewLogicalComponentNames();
  int splitPaneViewIndex=addPage(createSplitPanePageControl(getContainer(),menuMgr));
  int treeViewIndex=addPage(createTreePageControl(getContainer(),menuMgr));
  int tableViewIndex=addPage(createTablePageControl(getContainer()));
  int configViewIndex=addPage(createConfigPageControl(getContainer()));
  setPageText(splitPaneViewIndex,Messages.ObjectMappingEditorSplitPaneView);
  setPageText(treeViewIndex,Messages.ObjectMappingEditorTreeView);
  setPageText(tableViewIndex,Messages.ObjectMappingEditorTableView);
  setPageText(configViewIndex,Messages.ObjectMappingEditorConfigView);
  m_pageToSelectionProvider.put(splitPaneViewIndex,m_splitPaneSelectionProvider);
  m_pageToSelectionProvider.put(treeViewIndex,m_treeViewer);
  m_pageToSelectionProvider.put(tableViewIndex,m_tableViewer);
  m_pageToSelectionProvider.put(configViewIndex,new NullSelectionProvider());
  m_selectionProvider=new SelectionProviderIntermediate();
  m_selectionProvider.setSelectionProviderDelegate(m_pageToSelectionProvider.get(getActivePage()));
  getSite().setSelectionProvider(m_selectionProvider);
  m_selectionProvider.addSelectionChangedListener(m_actionListener);
  m_selectionProvider.addSelectionChangedListener(m_editorSelectionChangedListener);
  ObjectMappingEventDispatcher.addObserver(this);
  m_treeViewerUpdater=new ComponentNameTreeViewerUpdater(m_treeViewer,getEditorHelper().getEditSupport().getCompMapper().getCompNameCache());
  checkAndFixInconsistentData();
  m_treeViewer.expandToLevel(2);
}",0.9854433171592412
96375,"/** 
 * {@inheritDoc}
 */
public Object[] getChildren(Object parentElement){
  if (parentElement instanceof IObjectMappingPO) {
    IObjectMappingPO mapping=(IObjectMappingPO)parentElement;
    List<IObjectMappingCategoryPO> categoryList=new ArrayList<IObjectMappingCategoryPO>();
    categoryList.add(mapping.getMappedCategory());
    categoryList.add(mapping.getUnmappedLogicalCategory());
    categoryList.add(mapping.getUnmappedTechnicalCategory());
    Validate.noNullElements(categoryList);
    return categoryList.toArray();
  }
  if (parentElement instanceof IObjectMappingAssoziationPO) {
    IObjectMappingAssoziationPO assoc=(IObjectMappingAssoziationPO)parentElement;
    List<String> componentNameGuidList=assoc.getLogicalNames();
    List<Object> componentNamePoList=new ArrayList<Object>();
    for (    String compNameGuid : componentNameGuidList) {
      IComponentNamePO compNamePo=m_compNameMapper.getCompNameCache().getCompNamePo(compNameGuid);
      if (compNamePo != null) {
        componentNamePoList.add(compNamePo);
        m_childToParentMap.put(compNamePo,parentElement);
      }
 else {
        componentNamePoList.add(compNameGuid);
        m_childToParentMap.put(compNamePo,parentElement);
      }
    }
    Validate.noNullElements(componentNamePoList);
    return componentNamePoList.toArray();
  }
  if (parentElement instanceof IComponentNamePO) {
    return new Object[0];
  }
  if (parentElement instanceof IObjectMappingCategoryPO) {
    List<Object> childList=new ArrayList<Object>();
    IObjectMappingCategoryPO category=(IObjectMappingCategoryPO)parentElement;
    childList.addAll(category.getUnmodifiableCategoryList());
    for (    IObjectMappingAssoziationPO assoc : category.getUnmodifiableAssociationList()) {
      if (assoc.getTechnicalName() != null) {
        childList.add(assoc);
      }
 else {
        for (        String compNameGuid : assoc.getLogicalNames()) {
          IComponentNamePO compName=m_compNameMapper.getCompNameCache().getCompNamePo(compNameGuid);
          if (compName != null) {
            childList.add(compName);
          }
 else {
            childList.add(compNameGuid);
          }
        }
      }
    }
    for (    Object child : childList) {
      m_childToParentMap.put(child,parentElement);
    }
    Validate.noNullElements(childList);
    return childList.toArray();
  }
 else   if (parentElement instanceof String) {
    return new Object[0];
  }
  Assert.notReached(Messages.WrongTypeOfElement + StringConstants.EXCLAMATION_MARK);
  return new Object[0];
}","/** 
 * {@inheritDoc}
 */
public Object[] getChildren(Object parentElement){
  if (parentElement instanceof IObjectMappingPO) {
    IObjectMappingPO mapping=(IObjectMappingPO)parentElement;
    List<IObjectMappingCategoryPO> categoryList=new ArrayList<IObjectMappingCategoryPO>();
    categoryList.add(mapping.getMappedCategory());
    categoryList.add(mapping.getUnmappedLogicalCategory());
    categoryList.add(mapping.getUnmappedTechnicalCategory());
    Validate.noNullElements(categoryList);
    return categoryList.toArray();
  }
  if (parentElement instanceof IObjectMappingAssoziationPO) {
    IObjectMappingAssoziationPO assoc=(IObjectMappingAssoziationPO)parentElement;
    List<String> componentNameGuidList=assoc.getLogicalNames();
    List<Object> componentNamePoList=new ArrayList<Object>();
    for (    String compNameGuid : componentNameGuidList) {
      IComponentNamePO compNamePo=m_compNameMapper.getCompNameCache().getCompNamePo(compNameGuid);
      if (compNamePo != null) {
        componentNamePoList.add(compNamePo);
        m_childToParentMap.put(compNamePo,parentElement);
      }
 else {
        componentNamePoList.add(compNameGuid);
        m_childToParentMap.put(compNamePo,parentElement);
      }
    }
    Validate.noNullElements(componentNamePoList);
    return componentNamePoList.toArray();
  }
  if (parentElement instanceof IComponentNamePO) {
    return new Object[0];
  }
  if (parentElement instanceof IObjectMappingCategoryPO) {
    List<Object> childList=new ArrayList<Object>();
    IObjectMappingCategoryPO category=(IObjectMappingCategoryPO)parentElement;
    childList.addAll(category.getUnmodifiableCategoryList());
    for (    IObjectMappingAssoziationPO assoc : category.getUnmodifiableAssociationList()) {
      if (assoc.getTechnicalName() != null) {
        childList.add(assoc);
      }
 else {
        for (        String compNameGuid : assoc.getLogicalNames()) {
          IComponentNamePO compName=m_compNameMapper.getCompNameCache().getCompNamePo(compNameGuid);
          if (compName != null) {
            childList.add(compName);
          }
        }
      }
    }
    for (    Object child : childList) {
      m_childToParentMap.put(child,parentElement);
    }
    Validate.noNullElements(childList);
    return childList.toArray();
  }
 else   if (parentElement instanceof String) {
    return new Object[0];
  }
  Assert.notReached(Messages.WrongTypeOfElement + StringConstants.EXCLAMATION_MARK);
  return new Object[0];
}",0.9878944234967256
96376,"/** 
 * @return The waiting time between mouse press and mouse release.
 */
private static final int getPostMouseDownDelay(){
  if (postMouseDown >= 0) {
    return postMouseDown;
  }
  int externalWait=getExternalWait(EXTERNAL_PROPERTY_NAME_POST_MOUSE_DOWN_DELAY);
  if (externalWait != NO_EXTERNAL_WAIT) {
    postMouseDown=externalWait;
    return postMouseDown;
  }
  postMouseDown=DEFAULT_DELAY_POST_MOUSE_DOWN;
  return postMouseDown;
}","/** 
 * @return The waiting time between mouse press and mouse release.
 */
private static final int getPostMouseDownDelay(){
  if (postMouseDown >= 0) {
    return postMouseDown;
  }
  int externalWait=getExternalWait(EXTERNAL_PROPERTY_NAME_PRE_MOUSE_UP_DELAY);
  if (externalWait != NO_EXTERNAL_WAIT) {
    postMouseDown=externalWait;
    return postMouseDown;
  }
  postMouseDown=DEFAULT_DELAY_POST_MOUSE_DOWN;
  return postMouseDown;
}",0.9875141884222476
96377,"/** 
 * Initializes the Hibernator using the given connection information. If the information contains a username <em>and</em> password, then  these are used for initialization. If not, then a login dialog is  presented.
 * @param connectionInfo The information to use to initialize the Hibernator.
 */
private void connectWithoutLoginDialog(final DatabaseConnectionInfo connectionInfo){
  Display.getDefault().syncExec(new Runnable(){
    public void run(){
      String predefinedUsername=connectionInfo.getProperty(HIBERNATE_CONNECTION_USERNAME);
      String predefinedPassword=connectionInfo.getProperty(HIBERNATE_CONNECTION_PASSWORD);
      if (predefinedUsername != null && predefinedPassword != null) {
        Hibernator.setUser(predefinedUsername);
        Hibernator.setPw(predefinedPassword);
        Hibernator.setDbConnectionName(connectionInfo);
        if (Hibernator.instance() != null) {
          CompNamePM.dispose();
          GeneralStorage.getInstance().dispose();
          if (LockManager.isRunning()) {
            LockManager.instance().dispose();
          }
          Hibernator.instance().dispose();
          DataEventDispatcher.getInstance().fireTestresultChanged(TestresultState.Clear);
        }
        ConnectDbOperation connDbOp=new ConnectDbOperation();
        try {
          PlatformUI.getWorkbench().getProgressService().run(true,false,connDbOp);
        }
 catch (        InvocationTargetException e) {
          hibernateInit=false;
        }
catch (        InterruptedException e) {
          hibernateInit=false;
        }
        if (hibernateInit) {
          Utils.clearClient();
          LockManager.instance();
          Plugin.getDefault().writeLineToConsole(Messages.SelectDatabaseActionInfoConnectSuccessful,true);
        }
 else {
          Utils.clearClient(true);
          Plugin.getDefault().writeLineToConsole(Messages.SelectDatabaseActionInfoConnectFailed,true);
        }
        Plugin.stopLongRunning();
      }
 else {
        ProgressEventDispatcher.notifyListener(new ProgressEvent(ProgressEvent.LOGIN,null,null));
      }
    }
  }
);
}","/** 
 * Initializes the Hibernator using the given connection information. If the information contains a username <em>and</em> password, then  these are used for initialization. If not, then a login dialog is  presented.
 * @param connectionInfo The information to use to initialize the Hibernator.
 */
private void connectWithoutLoginDialog(final DatabaseConnectionInfo connectionInfo){
  Display.getDefault().syncExec(new Runnable(){
    public void run(){
      Utils.clearClient();
      String predefinedUsername=connectionInfo.getProperty(HIBERNATE_CONNECTION_USERNAME);
      String predefinedPassword=connectionInfo.getProperty(HIBERNATE_CONNECTION_PASSWORD);
      if (predefinedUsername != null && predefinedPassword != null) {
        Hibernator.setUser(predefinedUsername);
        Hibernator.setPw(predefinedPassword);
        Hibernator.setDbConnectionName(connectionInfo);
        if (Hibernator.instance() != null) {
          CompNamePM.dispose();
          GeneralStorage.getInstance().dispose();
          if (LockManager.isRunning()) {
            LockManager.instance().dispose();
          }
          Hibernator.instance().dispose();
        }
        ConnectDbOperation connDbOp=new ConnectDbOperation();
        try {
          PlatformUI.getWorkbench().getProgressService().run(true,false,connDbOp);
        }
 catch (        InvocationTargetException e) {
          hibernateInit=false;
        }
catch (        InterruptedException e) {
          hibernateInit=false;
        }
        if (hibernateInit) {
          LockManager.instance();
          Plugin.getDefault().writeLineToConsole(Messages.SelectDatabaseActionInfoConnectSuccessful,true);
        }
 else {
          Plugin.getDefault().writeLineToConsole(Messages.SelectDatabaseActionInfoConnectFailed,true);
        }
        Plugin.stopLongRunning();
      }
 else {
        ProgressEventDispatcher.notifyListener(new ProgressEvent(ProgressEvent.LOGIN,null,null));
      }
    }
  }
);
}",0.9551800146950772
96378,"/** 
 * Shows the db login dialog.
 */
private void showLoginDataDialog(){
  Display.getDefault().syncExec(new Runnable(){
    public void run(){
      DBLoginDialog dialog=new DBLoginDialog(Plugin.getShell());
      dialog.create();
      DialogUtils.setWidgetNameForModalDialog(dialog);
      dialog.open();
      if (dialog.getReturnCode() == Window.OK) {
        if (!(dialog.isEmbeddedDb())) {
          Hibernator.setUser(dialog.getUser());
          Hibernator.setPw(dialog.getPwd());
        }
        Hibernator.setDbConnectionName(dialog.getDatabaseConnection().getConnectionInfo());
        if (Hibernator.getSelectDBAction()) {
          if (Hibernator.instance() != null) {
            CompNamePM.dispose();
            GeneralStorage.getInstance().dispose();
            if (LockManager.isRunning()) {
              LockManager.instance().dispose();
            }
            Hibernator.instance().dispose();
            DataEventDispatcher.getInstance().fireTestresultChanged(TestresultState.Clear);
          }
          ConnectDbOperation connDbOp=new ConnectDbOperation();
          try {
            PlatformUI.getWorkbench().getProgressService().run(true,false,connDbOp);
          }
 catch (          InvocationTargetException e) {
            hibernateInit=false;
          }
catch (          InterruptedException e) {
            hibernateInit=false;
          }
          if (hibernateInit) {
            Utils.clearClient();
            LockManager.instance();
            Plugin.getDefault().writeLineToConsole(Messages.SelectDatabaseActionInfoConnectSuccessful,true);
          }
 else {
            Utils.clearClient(true);
            Plugin.getDefault().writeLineToConsole(Messages.SelectDatabaseActionInfoConnectFailed,true);
          }
          Plugin.stopLongRunning();
        }
      }
 else {
        Hibernator.setUser(null);
      }
    }
  }
);
}","/** 
 * Shows the db login dialog.
 */
private void showLoginDataDialog(){
  Display.getDefault().syncExec(new Runnable(){
    public void run(){
      DBLoginDialog dialog=new DBLoginDialog(Plugin.getShell());
      dialog.create();
      DialogUtils.setWidgetNameForModalDialog(dialog);
      dialog.open();
      if (dialog.getReturnCode() == Window.OK) {
        Utils.clearClient();
        if (!(dialog.isEmbeddedDb())) {
          Hibernator.setUser(dialog.getUser());
          Hibernator.setPw(dialog.getPwd());
        }
        Hibernator.setDbConnectionName(dialog.getDatabaseConnection().getConnectionInfo());
        if (Hibernator.getSelectDBAction()) {
          if (Hibernator.instance() != null) {
            CompNamePM.dispose();
            GeneralStorage.getInstance().dispose();
            if (LockManager.isRunning()) {
              LockManager.instance().dispose();
            }
            Hibernator.instance().dispose();
          }
          ConnectDbOperation connDbOp=new ConnectDbOperation();
          try {
            PlatformUI.getWorkbench().getProgressService().run(true,false,connDbOp);
          }
 catch (          InvocationTargetException e) {
            hibernateInit=false;
          }
catch (          InterruptedException e) {
            hibernateInit=false;
          }
          if (hibernateInit) {
            LockManager.instance();
            Plugin.getDefault().writeLineToConsole(Messages.SelectDatabaseActionInfoConnectSuccessful,true);
          }
 else {
            Plugin.getDefault().writeLineToConsole(Messages.SelectDatabaseActionInfoConnectFailed,true);
          }
          Plugin.stopLongRunning();
        }
      }
 else {
        Hibernator.setUser(null);
      }
    }
  }
);
}",0.9475418840977752
96379,"/** 
 * clears the content of client
 * @param onlyUI true to clear the client UI part only
 */
public static void clearClient(boolean onlyUI){
  if (!onlyUI) {
    TestExecution.getInstance().stopExecution();
    GeneralStorage.getInstance().reset();
  }
  Plugin.getDisplay().syncExec(new Runnable(){
    public void run(){
      Plugin.setProjectNameInTitlebar(null,null,null);
      Plugin.closeAllOpenedJubulaEditors();
      if (Plugin.getView(Constants.TESTRE_ID) != null) {
        ((TestResultTreeView)Plugin.getView(Constants.TESTRE_ID)).clear();
      }
      if (Plugin.getView(Constants.TC_BROWSER_ID) != null) {
        ((TestCaseBrowser)Plugin.getView(Constants.TC_BROWSER_ID)).getTreeViewer().setInput(null);
      }
      if (Plugin.getView(Constants.TS_BROWSER_ID) != null) {
        ((TestSuiteBrowser)Plugin.getView(Constants.TS_BROWSER_ID)).getTreeViewer().setInput(null);
      }
      if (Plugin.getView(Constants.COMPNAMEBROWSER_ID) != null) {
        ((ComponentNameBrowser)Plugin.getView(Constants.COMPNAMEBROWSER_ID)).getTreeViewer().setInput(null);
      }
    }
  }
);
  DataEventDispatcher.getInstance().fireProjectLoadedListener(new NullProgressMonitor());
}","/** 
 * clears the content of client
 */
public static void clearClient(){
  final DataEventDispatcher ded=DataEventDispatcher.getInstance();
  TestExecution.getInstance().stopExecution();
  GeneralStorage gs=GeneralStorage.getInstance();
  if (gs != null && Hibernator.instance() != null) {
    IProjectPO currProj=gs.getProject();
    if (currProj != null) {
      gs.setProject(null);
      ded.fireDataChangedListener(currProj,DataState.Deleted,UpdateState.all);
    }
    gs.reset();
  }
  Plugin.getDisplay().syncExec(new Runnable(){
    public void run(){
      Plugin.setProjectNameInTitlebar(null,null,null);
      Plugin.closeAllOpenedJubulaEditors();
      ded.fireTestresultChanged(TestresultState.Refresh);
      setTreeViewerInputNull(Constants.TESTRE_ID);
      setTreeViewerInputNull(Constants.TC_BROWSER_ID);
      setTreeViewerInputNull(Constants.TS_BROWSER_ID);
      setTreeViewerInputNull(Constants.COMPNAMEBROWSER_ID);
    }
  }
);
  ded.fireProjectLoadedListener(new NullProgressMonitor());
}",0.1415607985480943
96380,"/** 
 * @param treeViewer the treeViewer to set
 */
public void setTreeViewer(TreeViewer treeViewer){
  m_treeViewer=treeViewer;
}","/** 
 * @param treeViewer the treeViewer to set
 */
private void setTreeViewer(TreeViewer treeViewer){
  m_treeViewer=treeViewer;
}",0.9655172413793104
96381,"/** 
 * refresh view
 */
public void refreshView(){
  m_tableViewer.getControl().getDisplay().syncExec(new Runnable(){
    public void run(){
      List<ITestResultSummaryPO> metaList;
      try {
        int maxNoOfDays=Plugin.getDefault().getPreferenceStore().getInt(Constants.MAX_NUMBER_OF_DAYS_KEY);
        Date startTime=DateUtils.addDays(new Date(),maxNoOfDays * -1);
        metaList=TestResultSummaryPM.findAllTestResultSummaries(startTime);
        if (Hibernator.instance() != null) {
          m_detailedSummaryIds=TestResultPM.computeTestresultIdsWithDetails(GeneralStorage.getInstance().getMasterSession());
        }
        if (metaList != null) {
          m_tableViewer.setInput(metaList.toArray());
        }
      }
 catch (      JBException e) {
        String msg=Messages.CantLoadMetadataFromDatabase;
        log.error(msg,e);
        showErrorDialog(msg);
      }
    }
  }
);
  ISelection s=m_tableViewer.getSelection();
  m_tableViewer.setSelection(null);
  m_tableViewer.setSelection(s);
}","/** 
 * refresh view
 */
public void refreshView(){
  m_tableViewer.getControl().getDisplay().syncExec(new Runnable(){
    public void run(){
      List<ITestResultSummaryPO> metaList;
      try {
        int maxNoOfDays=Plugin.getDefault().getPreferenceStore().getInt(Constants.MAX_NUMBER_OF_DAYS_KEY);
        Date startTime=DateUtils.addDays(new Date(),maxNoOfDays * -1);
        metaList=TestResultSummaryPM.findAllTestResultSummaries(startTime);
        if (Hibernator.instance() != null) {
          m_detailedSummaryIds=TestResultPM.computeTestresultIdsWithDetails(GeneralStorage.getInstance().getMasterSession());
        }
        if (metaList != null) {
          m_tableViewer.setInput(metaList.toArray());
        }
      }
 catch (      JBException e) {
        String msg=Messages.CantLoadMetadataFromDatabase;
        log.error(msg,e);
        showErrorDialog(msg);
      }
      ISelection s=m_tableViewer.getSelection();
      m_tableViewer.setSelection(null);
      m_tableViewer.setSelection(s);
    }
  }
);
}",0.8826979472140762
96382,"/** 
 * refresh view
 */
public void refreshView(){
  m_tableViewer.getControl().getDisplay().syncExec(new Runnable(){
    public void run(){
      List<ITestResultSummaryPO> metaList;
      try {
        int maxNoOfDays=Plugin.getDefault().getPreferenceStore().getInt(Constants.MAX_NUMBER_OF_DAYS_KEY);
        Date startTime=DateUtils.addDays(new Date(),maxNoOfDays * -1);
        metaList=TestResultSummaryPM.findAllTestResultSummaries(startTime);
        if (Hibernator.instance() != null) {
          m_detailedSummaryIds=TestResultPM.computeTestresultIdsWithDetails(GeneralStorage.getInstance().getMasterSession());
        }
        if (metaList != null) {
          m_tableViewer.setInput(metaList.toArray());
        }
      }
 catch (      JBException e) {
        String msg=Messages.CantLoadMetadataFromDatabase;
        log.error(msg,e);
        showErrorDialog(msg);
      }
    }
  }
);
}","/** 
 * refresh view
 */
public void refreshView(){
  m_tableViewer.getControl().getDisplay().syncExec(new Runnable(){
    public void run(){
      List<ITestResultSummaryPO> metaList;
      try {
        int maxNoOfDays=Plugin.getDefault().getPreferenceStore().getInt(Constants.MAX_NUMBER_OF_DAYS_KEY);
        Date startTime=DateUtils.addDays(new Date(),maxNoOfDays * -1);
        metaList=TestResultSummaryPM.findAllTestResultSummaries(startTime);
        if (Hibernator.instance() != null) {
          m_detailedSummaryIds=TestResultPM.computeTestresultIdsWithDetails(GeneralStorage.getInstance().getMasterSession());
        }
        if (metaList != null) {
          m_tableViewer.setInput(metaList.toArray());
        }
      }
 catch (      JBException e) {
        String msg=Messages.CantLoadMetadataFromDatabase;
        log.error(msg,e);
        showErrorDialog(msg);
      }
    }
  }
);
  ISelection s=m_tableViewer.getSelection();
  m_tableViewer.setSelection(null);
  m_tableViewer.setSelection(s);
}",0.940625
96383,"/** 
 * execute delete-test-result of summary without commit
 * @param session Session
 * @param resultId id of testresult-summary-entry, or <code>null</code> if all test results should be deleted.
 */
@SuppressWarnings(""String_Node_Str"") public static final void executeDeleteTestresultOfSummary(EntityManager session,Long resultId){
  boolean isDeleteAll=resultId == null;
  List<Number> paramIdList=null;
  if (!isDeleteAll) {
    Query paramIdQuery=session.createNativeQuery(""String_Node_Str"" + ""String_Node_Str"");
    paramIdQuery.setParameter(""String_Node_Str"",resultId);
    paramIdList=paramIdQuery.getResultList();
  }
  StringBuilder paramListQueryBuilder=new StringBuilder();
  paramListQueryBuilder.append(""String_Node_Str"");
  if (!isDeleteAll) {
    paramListQueryBuilder.append(""String_Node_Str"" + ""String_Node_Str"");
  }
  Query paramListQuery=session.createNativeQuery(paramListQueryBuilder.toString());
  if (!isDeleteAll) {
    paramListQuery.setParameter(""String_Node_Str"",resultId);
  }
  paramListQuery.executeUpdate();
  StringBuilder resultQueryBuilder=new StringBuilder();
  resultQueryBuilder.append(""String_Node_Str"");
  if (!isDeleteAll) {
    resultQueryBuilder.append(""String_Node_Str"");
  }
  Query resultQuery=session.createQuery(resultQueryBuilder.toString());
  if (!isDeleteAll) {
    resultQuery.setParameter(""String_Node_Str"",resultId);
  }
  resultQuery.executeUpdate();
  String paramQueryBaseString=""String_Node_Str"";
  if (isDeleteAll) {
    session.createQuery(paramQueryBaseString).executeUpdate();
  }
 else {
    if (paramIdList != null) {
      for (      Number paramId : paramIdList) {
        Query paramQuery=session.createQuery(paramQueryBaseString + ""String_Node_Str"");
        paramQuery.setParameter(""String_Node_Str"",paramId.longValue());
        paramQuery.executeUpdate();
      }
    }
  }
}","/** 
 * execute delete-test-result of summary without commit
 * @param session Session
 * @param resultId id of testresult-summary-entry, or <code>null</code> if all test results should be deleted.
 */
public static final void executeDeleteTestresultOfSummary(EntityManager session,Long resultId){
  boolean isDeleteAll=resultId == null;
  String paramQueryBaseString=""String_Node_Str"";
  if (isDeleteAll) {
    session.createNativeQuery(paramQueryBaseString).executeUpdate();
  }
 else {
    Query paramQuery=session.createNativeQuery(paramQueryBaseString + ""String_Node_Str"");
    paramQuery.setParameter(""String_Node_Str"",resultId);
    paramQuery.executeUpdate();
  }
  StringBuilder resultQueryBuilder=new StringBuilder();
  resultQueryBuilder.append(""String_Node_Str"");
  if (!isDeleteAll) {
    resultQueryBuilder.append(""String_Node_Str"");
  }
  Query resultQuery=session.createQuery(resultQueryBuilder.toString());
  if (!isDeleteAll) {
    resultQuery.setParameter(""String_Node_Str"",resultId);
  }
  resultQuery.executeUpdate();
}",0.2665282104534441
96384,"public void run(){
  NagDialog.runNagDialog(null,""String_Node_Str"",ContextHelpIds.DATABASE_MIGRATION_ASSISTANT);
}","public void run(){
  NagDialog.runNagDialog(null,Messages.DatabaseMigrationAssistantFinalInfo,ContextHelpIds.DATABASE_MIGRATION_ASSISTANT);
}",0.8
96385,"/** 
 * {@inheritDoc}
 */
public boolean performFinish(){
  try {
    getContainer().run(true,false,new IRunnableWithProgress(){
      @SuppressWarnings(""String_Node_Str"") public void run(      IProgressMonitor monitor) throws InterruptedException {
        monitor.beginTask(""String_Node_Str"",IProgressMonitor.UNKNOWN);
        try {
          Hibernator.migrateDatabaseStructure();
          m_wasMigrationSuccessful=true;
          ImportFileBP.getInstance().importProjects(m_importProjectsPage,monitor);
          Plugin.getDisplay().asyncExec(new Runnable(){
            public void run(){
              NagDialog.runNagDialog(null,""String_Node_Str"",ContextHelpIds.DATABASE_MIGRATION_ASSISTANT);
            }
          }
);
        }
 catch (        JBFatalException e) {
          LOG.error(Messages.AnErrorOccurredDuringMigration + StringConstants.DOT,e);
        }
catch (        JBException e) {
          LOG.error(Messages.AnErrorOccurredDuringMigration + StringConstants.DOT,e);
        }
 finally {
          monitor.done();
        }
      }
    }
);
  }
 catch (  InvocationTargetException e) {
    LOG.error(Messages.AnErrorOccurredDuringMigration + StringConstants.DOT,e);
  }
catch (  InterruptedException e) {
    LOG.error(Messages.AnErrorOccurredDuringMigration + StringConstants.DOT,e);
  }
  return true;
}","/** 
 * {@inheritDoc}
 */
public boolean performFinish(){
  try {
    getContainer().run(true,false,new IRunnableWithProgress(){
      @SuppressWarnings(""String_Node_Str"") public void run(      IProgressMonitor monitor) throws InterruptedException {
        monitor.beginTask(""String_Node_Str"",IProgressMonitor.UNKNOWN);
        try {
          Hibernator.migrateDatabaseStructure();
          m_wasMigrationSuccessful=true;
          ImportFileBP.getInstance().importProjects(m_importProjectsPage,monitor);
          Plugin.getDisplay().asyncExec(new Runnable(){
            public void run(){
              NagDialog.runNagDialog(null,Messages.DatabaseMigrationAssistantFinalInfo,ContextHelpIds.DATABASE_MIGRATION_ASSISTANT);
            }
          }
);
        }
 catch (        JBFatalException e) {
          LOG.error(Messages.AnErrorOccurredDuringMigration + StringConstants.DOT,e);
        }
catch (        JBException e) {
          LOG.error(Messages.AnErrorOccurredDuringMigration + StringConstants.DOT,e);
        }
 finally {
          monitor.done();
        }
      }
    }
);
  }
 catch (  InvocationTargetException e) {
    LOG.error(Messages.AnErrorOccurredDuringMigration + StringConstants.DOT,e);
  }
catch (  InterruptedException e) {
    LOG.error(Messages.AnErrorOccurredDuringMigration + StringConstants.DOT,e);
  }
  return true;
}",0.97729810197246
96386,"/** 
 * delete all database objects which not associated with project
 * @param s session to use for delete operation
 * @param p project, whose independent objects to be deleted
 * @throws PMException in case of failed delete operation
 * @throws ProjectDeletedException in case of already deleted exception
 */
private static void deleteProjectIndependentDBObjects(EntityManager s,IProjectPO p) throws PMException, ProjectDeletedException {
  UsedToolkitBP.getInstance().deleteToolkitsFromDB(s,p.getId(),false);
  ParamNamePM.deleteParamNames(s,p.getId(),false);
  for (  IAUTMainPO aut : p.getAutMainList()) {
    if (aut.getObjMap() != null) {
      for (      IObjectMappingAssoziationPO assoc : aut.getObjMap().getMappings()) {
        s.remove(assoc);
      }
    }
  }
}","/** 
 * delete all database objects which not associated with project
 * @param s session to use for delete operation
 * @param p project, whose independent objects to be deleted
 * @throws PMException in case of failed delete operation
 * @throws ProjectDeletedException in case of already deleted exception
 */
private static void deleteProjectIndependentDBObjects(EntityManager s,IProjectPO p) throws PMException, ProjectDeletedException {
  UsedToolkitBP.getInstance().deleteToolkitsFromDB(s,p.getId(),false);
  ParamNamePM.deleteParamNames(s,p.getId(),false);
}",0.8422619047619048
96387,"/** 
 * initializes the client
 * @return intExit Code
 */
public int doRun(){
  int exitCode=0;
  try {
    ExecutionController controller=ExecutionController.getInstance();
    if (isNoRun()) {
      controller.simulateJob();
    }
 else {
      if (!controller.executeJob()) {
        exitCode=1;
      }
    }
  }
 catch (  CommunicationException e) {
    log.error(e.getLocalizedMessage(),e);
    printConsoleError(e.getMessage());
  }
catch (  IllegalArgumentException e) {
    log.error(e);
    printConsoleError(e.getMessage());
  }
catch (  JBFatalException e) {
    log.error(e);
    printConsoleError(e.getMessage());
  }
catch (  Throwable t) {
    log.error(ClientStrings.ERR_UNEXPECTED,t);
    printConsoleError(t.getMessage());
  }
  shutdown();
  if (isErrorOccured()) {
    exitCode=1;
  }
  printConsoleLn(Messages.ClientExitCode + exitCode,true);
  return exitCode;
}","/** 
 * initializes the client
 * @return intExit Code
 */
public int doRun(){
  int exitCode=EXIT_CODE_OK;
  try {
    ExecutionController controller=ExecutionController.getInstance();
    if (isNoRun()) {
      controller.simulateJob();
    }
 else {
      if (!controller.executeJob()) {
        exitCode=EXIT_CODE_ERROR;
      }
    }
  }
 catch (  CommunicationException e) {
    log.error(e.getLocalizedMessage(),e);
    printlnConsoleError(e.getMessage());
  }
catch (  IllegalArgumentException e) {
    log.error(e);
    printlnConsoleError(e.getMessage());
  }
catch (  JBFatalException e) {
    log.error(e);
    printlnConsoleError(e.getMessage());
  }
catch (  Throwable t) {
    log.error(ClientStrings.ERR_UNEXPECTED,t);
    printlnConsoleError(t.getMessage());
  }
  shutdown();
  return exitCode;
}",0.8976470588235295
96388,"/** 
 * {@inheritDoc}
 */
public void start(BundleContext context) throws Exception {
  try {
    super.start(context);
  }
 catch (  IllegalArgumentException iae) {
    AbstractCmdlineClient.printConsoleError(iae.getMessage());
    throw iae;
  }
}","/** 
 * {@inheritDoc}
 */
public void start(BundleContext context) throws Exception {
  try {
    super.start(context);
  }
 catch (  IllegalArgumentException iae) {
    AbstractCmdlineClient.printlnConsoleError(iae.getMessage());
    throw iae;
  }
}",0.996
96389,"/** 
 * executes the complete test
 * @throws CommunicationException Error
 * @return boolean true if all testsuites completed successfully
 */
public boolean executeJob() throws CommunicationException {
  WatchdogTimer timer=null;
  if (m_job.getTimeout() > 0) {
    timer=new WatchdogTimer(m_job.getTimeout());
    timer.start();
  }
  IClientTest clientTest=ClientTestFactory.getClientTest();
  clientTest.connectToServer(m_job.getServer(),m_job.getPort());
  if (!ServerConnection.getInstance().isConnected()) {
    throw new CommunicationException(Messages.ConnectionToAUT_Agent,MessageIDs.E_COMMUNICATOR_CONNECTION);
  }
  clientTest.setRelevantFlag(m_job.isRelevant());
  prepareExecution();
  m_idle=true;
  if (m_shutdown) {
    AbstractCmdlineClient.printConsoleLn(Messages.ReceivedShutdownCommand,true);
    endTestExecution();
  }
  try {
    if (m_rmiBase != null) {
      doClcService();
    }
 else     if (m_job.getTestJob() != null) {
      ensureAutIsStarted(m_job.getActualTestSuite(),m_job.getAutConfig());
      doSingleJob();
    }
 else {
      ensureAutIsStarted(m_job.getActualTestSuite(),m_job.getAutConfig());
      doTestSuites();
    }
  }
 catch (  ToolkitPluginException e1) {
    AbstractCmdlineClient.printConsoleError(Messages.ExecutionControllerAUT + Messages.ErrorMessageAUT_TOOLKIT_NOT_AVAILABLE);
  }
  if (timer != null) {
    timer.abort();
  }
  return isNoErrorWhileExecution();
}","/** 
 * executes the complete test
 * @throws CommunicationException Error
 * @return boolean true if all testsuites completed successfully
 */
public boolean executeJob() throws CommunicationException {
  WatchdogTimer timer=null;
  if (m_job.getTimeout() > 0) {
    timer=new WatchdogTimer(m_job.getTimeout());
    timer.start();
  }
  IClientTest clientTest=ClientTestFactory.getClientTest();
  clientTest.connectToServer(m_job.getServer(),m_job.getPort());
  if (!ServerConnection.getInstance().isConnected()) {
    throw new CommunicationException(Messages.ConnectionToAUT_Agent,MessageIDs.E_COMMUNICATOR_CONNECTION);
  }
  clientTest.setRelevantFlag(m_job.isRelevant());
  prepareExecution();
  m_idle=true;
  if (m_shutdown) {
    AbstractCmdlineClient.printConsoleLn(Messages.ReceivedShutdownCommand,true);
    endTestExecution();
  }
  try {
    if (m_rmiBase != null) {
      doClcService();
    }
 else     if (m_job.getTestJob() != null) {
      ensureAutIsStarted(m_job.getActualTestSuite(),m_job.getAutConfig());
      doSingleJob();
    }
 else {
      ensureAutIsStarted(m_job.getActualTestSuite(),m_job.getAutConfig());
      doTestSuites();
    }
  }
 catch (  ToolkitPluginException e1) {
    AbstractCmdlineClient.printlnConsoleError(Messages.ExecutionControllerAUT + Messages.ErrorMessageAUT_TOOLKIT_NOT_AVAILABLE);
  }
  if (timer != null) {
    timer.abort();
  }
  return isNoErrorWhileExecution();
}",0.999297259311314
96390,"/** 
 * {@inheritDoc}
 */
public void stateChanged(TestExecutionEvent event){
  if (event.getException() != null && event.getException() instanceof JBException) {
    String errorMsg=I18n.getString(event.getException().getMessage(),true);
    AbstractCmdlineClient.printConsoleError(errorMsg);
  }
switch (event.getState()) {
case TestExecutionEvent.TEST_EXEC_RESULT_TREE_READY:
    TestExecution.getInstance().getTrav().addExecStackModificationListener(m_progress);
  break;
case TestExecutionEvent.TEST_EXEC_START:
case TestExecutionEvent.TEST_EXEC_RESTART:
break;
case TestExecutionEvent.TEST_EXEC_FINISHED:
AbstractCmdlineClient.printConsoleLn(Messages.ExecutionControllerTestSuiteEnd,true);
m_job.getNextTestSuite();
m_clcServiceImpl.tsDone(isNoErrorWhileExecution() ? 0 : 1);
break;
case TestExecutionEvent.TEST_EXEC_PAUSED:
TestExecution.getInstance().pauseExecution(false);
break;
case TestExecutionEvent.TEST_EXEC_ERROR:
case TestExecutionEvent.TEST_EXEC_FAILED:
case TestExecutionEvent.TEST_EXEC_STOP:
m_job.getNextTestSuite();
break;
default :
break;
}
}","/** 
 * {@inheritDoc}
 */
public void stateChanged(TestExecutionEvent event){
  if (event.getException() != null && event.getException() instanceof JBException) {
    String errorMsg=I18n.getString(event.getException().getMessage(),true);
    AbstractCmdlineClient.printlnConsoleError(errorMsg);
  }
switch (event.getState()) {
case TestExecutionEvent.TEST_EXEC_RESULT_TREE_READY:
    TestExecution.getInstance().getTrav().addExecStackModificationListener(m_progress);
  break;
case TestExecutionEvent.TEST_EXEC_START:
case TestExecutionEvent.TEST_EXEC_RESTART:
break;
case TestExecutionEvent.TEST_EXEC_FINISHED:
AbstractCmdlineClient.printConsoleLn(Messages.ExecutionControllerTestSuiteEnd,true);
m_job.getNextTestSuite();
m_clcServiceImpl.tsDone(isNoErrorWhileExecution() ? 0 : 1);
break;
case TestExecutionEvent.TEST_EXEC_PAUSED:
TestExecution.getInstance().pauseExecution(false);
break;
case TestExecutionEvent.TEST_EXEC_ERROR:
case TestExecutionEvent.TEST_EXEC_FAILED:
case TestExecutionEvent.TEST_EXEC_STOP:
m_job.getNextTestSuite();
break;
default :
break;
}
}",0.99906191369606
96391,"/** 
 * {@inheritDoc}
 */
public void start(BundleContext context) throws Exception {
  plugin=this;
  try {
    super.start(context);
  }
 catch (  IllegalArgumentException iae) {
    AbstractCmdlineClient.printConsoleError(iae.getMessage());
    throw iae;
  }
}","/** 
 * {@inheritDoc}
 */
public void start(BundleContext context) throws Exception {
  plugin=this;
  try {
    super.start(context);
  }
 catch (  IllegalArgumentException iae) {
    AbstractCmdlineClient.printlnConsoleError(iae.getMessage());
    throw iae;
  }
}",0.9962264150943396
96392,"/** 
 * Import a project from an export file
 * @param fileName export file name
 * @param exportDir directory to use
 */
private void importProject(String fileName,String exportDir){
  File impFile=new File(fileName);
  if (!impFile.isAbsolute()) {
    impFile=new File(new File(exportDir),fileName);
  }
  try {
    FileStorageBP.importFiles(new String[]{impFile.getAbsolutePath()},new NullProgressMonitor(),this,false);
  }
 catch (  PMException pme) {
    System.err.println(pme.getLocalizedMessage());
  }
catch (  ProjectDeletedException gdpde) {
    System.err.println(gdpde.getLocalizedMessage());
  }
}","/** 
 * Import a project from an export file
 * @param fileName export file name
 * @param exportDir directory to use
 */
private void importProject(String fileName,String exportDir){
  File impFile=new File(fileName);
  if (!impFile.isAbsolute()) {
    impFile=new File(new File(exportDir),fileName);
  }
  try {
    FileStorageBP.importFiles(new String[]{impFile.getAbsolutePath()},new NullProgressMonitor(),this,false);
  }
 catch (  PMException pme) {
    writeErrorLine(pme.getLocalizedMessage());
  }
catch (  ProjectDeletedException gdpde) {
    writeErrorLine(gdpde.getLocalizedMessage());
  }
}",0.9373970345963756
96393,"/** 
 * Report a missing project
 * @param name project name
 * @param version illegal project version
 */
private void reportMissingProject(String name,String version){
  StringBuilder msg=new StringBuilder(Messages.DBToolMissingProject);
  msg.append(StringConstants.SPACE);
  msg.append(name);
  msg.append(StringConstants.SPACE + StringConstants.LEFT_BRACKET);
  msg.append(version);
  msg.append(StringConstants.RIGHT_BRACKET);
  printConsoleError(msg.toString());
}","/** 
 * Report a missing project
 * @param name project name
 * @param version illegal project version
 */
private void reportMissingProject(String name,String version){
  StringBuilder msg=new StringBuilder(Messages.DBToolMissingProject);
  msg.append(StringConstants.SPACE);
  msg.append(name);
  msg.append(StringConstants.SPACE + StringConstants.LEFT_BRACKET);
  msg.append(version);
  msg.append(StringConstants.RIGHT_BRACKET);
  printlnConsoleError(msg.toString());
}",0.9978813559322034
96394,"/** 
 * The deletion of the projct failed
 * @param name project name
 * @param version project version
 * @param e error condition
 */
private void reportDeleteFailed(String name,String version,Exception e){
  StringBuilder msg=new StringBuilder(Messages.DBToolDeleteFailed);
  msg.append(StringConstants.SPACE);
  msg.append(name);
  msg.append(StringConstants.SPACE + StringConstants.LEFT_BRACKET);
  msg.append(version);
  msg.append(StringConstants.RIGHT_BRACKET);
  msg.append(StringConstants.NEWLINE);
  msg.append(e.getLocalizedMessage());
  printConsoleError(msg.toString());
}","/** 
 * The deletion of the projct failed
 * @param name project name
 * @param version project version
 * @param e error condition
 */
private void reportDeleteFailed(String name,String version,Exception e){
  StringBuilder msg=new StringBuilder(Messages.DBToolDeleteFailed);
  msg.append(StringConstants.SPACE);
  msg.append(name);
  msg.append(StringConstants.SPACE + StringConstants.LEFT_BRACKET);
  msg.append(version);
  msg.append(StringConstants.RIGHT_BRACKET);
  msg.append(StringConstants.NEWLINE);
  msg.append(e.getLocalizedMessage());
  printlnConsoleError(msg.toString());
}",0.9982964224872232
96395,"/** 
 * {@inheritDoc}
 */
public int doRun(){
  int exitCode=0;
  boolean keepSummariesOnDelete=false;
  setupDB();
  final CommandLine cmdLine=getCmdLine();
  if (cmdLine.hasOption(OPTION_KEEPSUMMARY_ON_DELETE)) {
    keepSummariesOnDelete=true;
  }
  if (cmdLine.hasOption(OPTION_DELETE)) {
    final String[] projValues=cmdLine.getOptionValues(OPTION_DELETE);
    if ((projValues != null) && (projValues.length == 2)) {
      deleteProject(projValues[0],projValues[1],keepSummariesOnDelete);
    }
  }
  if (cmdLine.hasOption(OPTION_DELETE_ALL)) {
    deleteAllProjects(keepSummariesOnDelete);
  }
  String exportDir=cmdLine.getOptionValue(OPTION_DIR,StringConstants.DOT);
  if (cmdLine.hasOption(OPTION_EXPORT)) {
    final String[] projValues=cmdLine.getOptionValues(OPTION_EXPORT);
    if ((projValues != null) && (projValues.length == 2)) {
      exportProject(projValues[0],projValues[1],exportDir);
    }
  }
  if (cmdLine.hasOption(OPTION_EXPORT_ALL)) {
    exportAll(exportDir);
  }
  if (cmdLine.hasOption(OPTION_IMPORT)) {
    importProject(cmdLine.getOptionValue(OPTION_IMPORT),exportDir);
  }
  return exitCode;
}","/** 
 * {@inheritDoc}
 */
public int doRun(){
  boolean keepSummariesOnDelete=false;
  setupDB();
  final CommandLine cmdLine=getCmdLine();
  if (cmdLine.hasOption(OPTION_KEEPSUMMARY_ON_DELETE)) {
    keepSummariesOnDelete=true;
  }
  if (cmdLine.hasOption(OPTION_DELETE)) {
    final String[] projValues=cmdLine.getOptionValues(OPTION_DELETE);
    if ((projValues != null) && (projValues.length == 2)) {
      deleteProject(projValues[0],projValues[1],keepSummariesOnDelete);
    }
  }
  if (cmdLine.hasOption(OPTION_DELETE_ALL)) {
    deleteAllProjects(keepSummariesOnDelete);
  }
  String exportDir=cmdLine.getOptionValue(OPTION_DIR,StringConstants.DOT);
  if (cmdLine.hasOption(OPTION_EXPORT)) {
    final String[] projValues=cmdLine.getOptionValues(OPTION_EXPORT);
    if ((projValues != null) && (projValues.length == 2)) {
      exportProject(projValues[0],projValues[1],exportDir);
    }
  }
  if (cmdLine.hasOption(OPTION_EXPORT_ALL)) {
    exportAll(exportDir);
  }
  if (cmdLine.hasOption(OPTION_IMPORT)) {
    importProject(cmdLine.getOptionValue(OPTION_IMPORT),exportDir);
  }
  return EXIT_CODE_OK;
}",0.983942908117752
96396,"/** 
 * Report a bad version
 * @param dirName directory name
 */
private void reportBadDirectory(String dirName){
  StringBuilder msg=new StringBuilder(Messages.DBToolInvalidExportDirectory);
  msg.append(StringConstants.SPACE);
  msg.append(dirName);
  printConsoleError(msg.toString());
}","/** 
 * Report a bad version
 * @param dirName directory name
 */
private void reportBadDirectory(String dirName){
  StringBuilder msg=new StringBuilder(Messages.DBToolInvalidExportDirectory);
  msg.append(StringConstants.SPACE);
  msg.append(dirName);
  printlnConsoleError(msg.toString());
}",0.9965753424657534
96397,"/** 
 * @param exportDir directory name
 * @param e error condition
 */
private void reportExportAllFailed(String exportDir,JBException e){
  StringBuilder msg=new StringBuilder(Messages.DBToolExportAllFailed);
  msg.append(StringConstants.SPACE);
  msg.append(exportDir);
  msg.append(StringConstants.NEWLINE);
  msg.append(e.getLocalizedMessage());
  printConsoleError(msg.toString());
}","/** 
 * @param exportDir directory name
 * @param e error condition
 */
private void reportExportAllFailed(String exportDir,JBException e){
  StringBuilder msg=new StringBuilder(Messages.DBToolExportAllFailed);
  msg.append(StringConstants.SPACE);
  msg.append(exportDir);
  msg.append(StringConstants.NEWLINE);
  msg.append(e.getLocalizedMessage());
  printlnConsoleError(msg.toString());
}",0.9974358974358974
96398,"/** 
 * Report a bad version
 * @param dirName directory name
 */
private void reportNonEmptyDirectory(String dirName){
  StringBuilder msg=new StringBuilder(Messages.DBToolNonEmptyExportDirectory);
  msg.append(StringConstants.SPACE);
  msg.append(dirName);
  printConsoleError(msg.toString());
}","/** 
 * Report a bad version
 * @param dirName directory name
 */
private void reportNonEmptyDirectory(String dirName){
  StringBuilder msg=new StringBuilder(Messages.DBToolNonEmptyExportDirectory);
  msg.append(StringConstants.SPACE);
  msg.append(dirName);
  printlnConsoleError(msg.toString());
}",0.9966442953020134
96399,"/** 
 * Delete All projects from the database including testresults
 * @param keepSummaryOnDelete summary will not be deleted, when true
 */
private void deleteAllProjects(boolean keepSummaryOnDelete){
  List<IProjectPO> projects;
  try {
    projects=ProjectPM.findAllProjects();
    for (    IProjectPO proj : projects) {
      ProjectPM.deleteProject(proj,false);
    }
    if (keepSummaryOnDelete) {
      TestResultPM.deleteAllTestresultDetails();
    }
 else {
      TestResultSummaryPM.deleteAllTestresultSummaries();
      TestResultPM.deleteAllTestresultDetails();
    }
  }
 catch (  JBException e) {
    printConsoleError(e.getMessage());
  }
catch (  InterruptedException e) {
  }
}","/** 
 * Delete All projects from the database including testresults
 * @param keepSummaryOnDelete summary will not be deleted, when true
 */
private void deleteAllProjects(boolean keepSummaryOnDelete){
  List<IProjectPO> projects;
  try {
    projects=ProjectPM.findAllProjects();
    for (    IProjectPO proj : projects) {
      ProjectPM.deleteProject(proj,false);
    }
    if (keepSummaryOnDelete) {
      TestResultPM.deleteAllTestresultDetails();
    }
 else {
      TestResultSummaryPM.deleteAllTestresultSummaries();
      TestResultPM.deleteAllTestresultDetails();
    }
  }
 catch (  JBException e) {
    printlnConsoleError(e.getMessage());
  }
catch (  InterruptedException e) {
  }
}",0.9985611510791368
96400,"/** 
 * Report a bad version
 * @param name project name
 * @param version illegal project version
 */
private void reportBadVersion(String name,String version){
  StringBuilder msg=new StringBuilder(Messages.DBToolInvalidVersion);
  msg.append(StringConstants.SPACE);
  msg.append(name);
  msg.append(StringConstants.SPACE + StringConstants.LEFT_BRACKET);
  msg.append(version);
  msg.append(StringConstants.RIGHT_BRACKET);
  printConsoleError(msg.toString());
}","/** 
 * Report a bad version
 * @param name project name
 * @param version illegal project version
 */
private void reportBadVersion(String name,String version){
  StringBuilder msg=new StringBuilder(Messages.DBToolInvalidVersion);
  msg.append(StringConstants.SPACE);
  msg.append(name);
  msg.append(StringConstants.SPACE + StringConstants.LEFT_BRACKET);
  msg.append(version);
  msg.append(StringConstants.RIGHT_BRACKET);
  printlnConsoleError(msg.toString());
}",0.9978448275862069
96401,"@Override protected ISourceViewer createSourceViewer(Composite parent,IVerticalRuler ruler,int styles){
  sourceViewerConfiguration.initializeDefaultFonts();
  tabFolder=new CTabFolder(parent,SWT.BOTTOM);
{
    sourceTab=new CTabItem(tabFolder,SWT.NONE);
    updateSourceTabLabel();
    viewer=new MarkupProjectionViewer(tabFolder,ruler,getOverviewRuler(),isOverviewRulerVisible(),styles | SWT.WRAP);
    sourceTab.setControl(((Viewer)viewer).getControl());
  }
  try {
    previewTab=new CTabItem(tabFolder,SWT.NONE);
    previewTab.setText(Messages.MarkupEditor_preview);
    previewTab.setToolTipText(Messages.MarkupEditor_preview_tooltip);
    browser=new Browser(tabFolder,SWT.NONE);
    browser.addLocationListener(new LocationListener(){
      public void changed(      LocationEvent event){
        event.doit=false;
      }
      private boolean tryToOpenAsWorkspaceFile(      String location){
        if (getEditorInput() instanceof IURIEditorInput) {
          try {
            IURIEditorInput uriInput=(IURIEditorInput)getEditorInput();
            URI locationURI=uriInput.getURI().resolve(location);
            if (locationURI != null) {
              IFile[] files=ResourcesPlugin.getWorkspace().getRoot().findFilesForLocationURI(locationURI);
              if (files.length > 0) {
                IEditorPart editor=IDE.openEditor(getEditorSite().getPage(),files[0]);
                if (editor instanceof MarkupEditor) {
                  MarkupEditor markupEditor=(MarkupEditor)editor;
                  markupEditor.showPreview(null);
                }
                return true;
              }
            }
          }
 catch (          Exception e) {
            logErrorOpeningAsWorkspaceFile(e);
          }
        }
        return false;
      }
      public void changing(      LocationEvent event){
        if (event.location.matches(""String_Node_Str"")) {
          int idxOfSlashHash=event.location.indexOf(""String_Node_Str"");
          if (idxOfSlashHash != -1) {
            if (!event.location.startsWith(""String_Node_Str"")) {
              event.doit=false;
            }
            return;
          }
          event.doit=false;
          if (tryToOpenAsWorkspaceFile(event.location)) {
            return;
          }
          try {
            PlatformUI.getWorkbench().getBrowserSupport().createBrowser(""String_Node_Str"").openURL(new URL(event.location));
          }
 catch (          Exception e) {
            new URLHyperlink(new Region(0,1),event.location).open();
          }
        }
 else {
          tryToOpenAsWorkspaceFile(event.location);
        }
      }
    }
);
    previewTab.setControl(browser);
  }
 catch (  SWTError e) {
    if (previewTab != null) {
      previewTab.dispose();
      previewTab=null;
    }
    logPreviewTabUnavailable(e);
  }
  IEditorInput ei=getEditorInput();
  if (previewTab != null && ei instanceof IURIEditorInput) {
    String previewFileNamePattern=WikiTextUiPlugin.getDefault().getPreferences().getPreviewFileNamePattern();
    IURIEditorInput editorInput=(IURIEditorInput)ei;
    File file=new File(editorInput.getURI());
    if (previewFileNamePattern != null && file.getName().matches(previewFileNamePattern)) {
      tabFolder.setSelection(previewTab);
    }
 else {
      tabFolder.setSelection(sourceTab);
    }
  }
 else {
    tabFolder.setSelection(sourceTab);
  }
  tabFolder.addSelectionListener(new SelectionListener(){
    public void widgetDefaultSelected(    SelectionEvent selectionevent){
      widgetSelected(selectionevent);
    }
    public void widgetSelected(    SelectionEvent selectionevent){
      if (isShowingPreview()) {
        updatePreview();
      }
    }
  }
);
  viewer.getTextWidget().addSelectionListener(new SelectionListener(){
    public void widgetDefaultSelected(    SelectionEvent e){
    }
    public void widgetSelected(    SelectionEvent e){
      updateOutlineSelection();
    }
  }
);
  viewer.getTextWidget().addKeyListener(new KeyAdapter(){
    @Override public void keyReleased(    KeyEvent e){
      if (isRelevantKeyCode(e.keyCode)) {
        updateOutlineSelection();
      }
    }
    private boolean isRelevantKeyCode(    int keyCode){
switch (keyCode) {
case SWT.ARROW_DOWN:
case SWT.ARROW_LEFT:
case SWT.ARROW_RIGHT:
case SWT.ARROW_UP:
case SWT.PAGE_DOWN:
case SWT.PAGE_UP:
        return true;
    }
    return false;
  }
}
);
viewer.getTextWidget().addMouseListener(new MouseAdapter(){
  @Override public void mouseUp(  MouseEvent e){
    updateOutlineSelection();
  }
}
);
IFocusService focusService=PlatformUI.getWorkbench().getService(IFocusService.class);
if (focusService != null) {
  focusService.addFocusTracker(viewer.getTextWidget(),MarkupEditor.EDITOR_SOURCE_VIEWER);
}
viewer.getTextWidget().setData(MarkupLanguage.class.getName(),getMarkupLanguage());
viewer.getTextWidget().setData(ISourceViewer.class.getName(),viewer);
getSourceViewerDecorationSupport(viewer);
updateDocument();
if (preferencesListener == null) {
  preferencesListener=new IPropertyChangeListener(){
    public void propertyChange(    PropertyChangeEvent event){
      if (viewer.getTextWidget() == null || viewer.getTextWidget().isDisposed()) {
        return;
      }
      if (isFontPreferenceChange(event)) {
        viewer.getTextWidget().getDisplay().asyncExec(new Runnable(){
          public void run(){
            reloadPreferences();
          }
        }
);
      }
    }
  }
;
  WikiTextUiPlugin.getDefault().getPreferenceStore().addPropertyChangeListener(preferencesListener);
}
if (isShowingPreview()) {
  updatePreview();
}
return viewer;
}","@Override protected ISourceViewer createSourceViewer(Composite parent,IVerticalRuler ruler,int styles){
  sourceViewerConfiguration.initializeDefaultFonts();
  tabFolder=new CTabFolder(parent,SWT.BOTTOM);
{
    sourceTab=new CTabItem(tabFolder,SWT.NONE);
    updateSourceTabLabel();
    viewer=new MarkupProjectionViewer(tabFolder,ruler,getOverviewRuler(),isOverviewRulerVisible(),styles | SWT.WRAP);
    sourceTab.setControl(((Viewer)viewer).getControl());
  }
  try {
    previewTab=new CTabItem(tabFolder,SWT.NONE);
    previewTab.setText(Messages.MarkupEditor_preview);
    previewTab.setToolTipText(Messages.MarkupEditor_preview_tooltip);
    browser=new Browser(tabFolder,SWT.NONE);
    browser.addLocationListener(new LocationListener(){
      public void changed(      LocationEvent event){
        event.doit=false;
      }
      private boolean tryToOpenAsWorkspaceFile(      String location){
        if (getEditorInput() instanceof IURIEditorInput) {
          try {
            IURIEditorInput uriInput=(IURIEditorInput)getEditorInput();
            URI locationURI=uriInput.getURI().resolve(location);
            if (locationURI != null && ""String_Node_Str"".equals(locationURI.getScheme())) {
              IFile[] files=ResourcesPlugin.getWorkspace().getRoot().findFilesForLocationURI(locationURI);
              if (files.length > 0) {
                IEditorPart editor=IDE.openEditor(getEditorSite().getPage(),files[0]);
                if (editor instanceof MarkupEditor) {
                  MarkupEditor markupEditor=(MarkupEditor)editor;
                  markupEditor.showPreview(null);
                }
                return true;
              }
            }
          }
 catch (          Exception e) {
            logErrorOpeningAsWorkspaceFile(e);
          }
        }
        return false;
      }
      public void changing(      LocationEvent event){
        if (event.location.matches(""String_Node_Str"")) {
          int idxOfSlashHash=event.location.indexOf(""String_Node_Str"");
          if (idxOfSlashHash != -1) {
            if (!event.location.startsWith(""String_Node_Str"")) {
              event.doit=false;
            }
            return;
          }
          event.doit=false;
          if (tryToOpenAsWorkspaceFile(event.location)) {
            return;
          }
          try {
            PlatformUI.getWorkbench().getBrowserSupport().createBrowser(""String_Node_Str"").openURL(new URL(event.location));
          }
 catch (          Exception e) {
            new URLHyperlink(new Region(0,1),event.location).open();
          }
        }
 else {
          tryToOpenAsWorkspaceFile(event.location);
        }
      }
    }
);
    previewTab.setControl(browser);
  }
 catch (  SWTError e) {
    if (previewTab != null) {
      previewTab.dispose();
      previewTab=null;
    }
    logPreviewTabUnavailable(e);
  }
  IEditorInput ei=getEditorInput();
  if (previewTab != null && ei instanceof IURIEditorInput) {
    String previewFileNamePattern=WikiTextUiPlugin.getDefault().getPreferences().getPreviewFileNamePattern();
    IURIEditorInput editorInput=(IURIEditorInput)ei;
    File file=new File(editorInput.getURI());
    if (previewFileNamePattern != null && file.getName().matches(previewFileNamePattern)) {
      tabFolder.setSelection(previewTab);
    }
 else {
      tabFolder.setSelection(sourceTab);
    }
  }
 else {
    tabFolder.setSelection(sourceTab);
  }
  tabFolder.addSelectionListener(new SelectionListener(){
    public void widgetDefaultSelected(    SelectionEvent selectionevent){
      widgetSelected(selectionevent);
    }
    public void widgetSelected(    SelectionEvent selectionevent){
      if (isShowingPreview()) {
        updatePreview();
      }
    }
  }
);
  viewer.getTextWidget().addSelectionListener(new SelectionListener(){
    public void widgetDefaultSelected(    SelectionEvent e){
    }
    public void widgetSelected(    SelectionEvent e){
      updateOutlineSelection();
    }
  }
);
  viewer.getTextWidget().addKeyListener(new KeyAdapter(){
    @Override public void keyReleased(    KeyEvent e){
      if (isRelevantKeyCode(e.keyCode)) {
        updateOutlineSelection();
      }
    }
    private boolean isRelevantKeyCode(    int keyCode){
switch (keyCode) {
case SWT.ARROW_DOWN:
case SWT.ARROW_LEFT:
case SWT.ARROW_RIGHT:
case SWT.ARROW_UP:
case SWT.PAGE_DOWN:
case SWT.PAGE_UP:
        return true;
    }
    return false;
  }
}
);
viewer.getTextWidget().addMouseListener(new MouseAdapter(){
  @Override public void mouseUp(  MouseEvent e){
    updateOutlineSelection();
  }
}
);
IFocusService focusService=PlatformUI.getWorkbench().getService(IFocusService.class);
if (focusService != null) {
  focusService.addFocusTracker(viewer.getTextWidget(),MarkupEditor.EDITOR_SOURCE_VIEWER);
}
viewer.getTextWidget().setData(MarkupLanguage.class.getName(),getMarkupLanguage());
viewer.getTextWidget().setData(ISourceViewer.class.getName(),viewer);
getSourceViewerDecorationSupport(viewer);
updateDocument();
if (preferencesListener == null) {
  preferencesListener=new IPropertyChangeListener(){
    public void propertyChange(    PropertyChangeEvent event){
      if (viewer.getTextWidget() == null || viewer.getTextWidget().isDisposed()) {
        return;
      }
      if (isFontPreferenceChange(event)) {
        viewer.getTextWidget().getDisplay().asyncExec(new Runnable(){
          public void run(){
            reloadPreferences();
          }
        }
);
      }
    }
  }
;
  WikiTextUiPlugin.getDefault().getPreferenceStore().addPropertyChangeListener(preferencesListener);
}
if (isShowingPreview()) {
  updatePreview();
}
return viewer;
}",0.9952834386402064
96402,"private boolean tryToOpenAsWorkspaceFile(String location){
  if (getEditorInput() instanceof IURIEditorInput) {
    try {
      IURIEditorInput uriInput=(IURIEditorInput)getEditorInput();
      URI locationURI=uriInput.getURI().resolve(location);
      if (locationURI != null) {
        IFile[] files=ResourcesPlugin.getWorkspace().getRoot().findFilesForLocationURI(locationURI);
        if (files.length > 0) {
          IEditorPart editor=IDE.openEditor(getEditorSite().getPage(),files[0]);
          if (editor instanceof MarkupEditor) {
            MarkupEditor markupEditor=(MarkupEditor)editor;
            markupEditor.showPreview(null);
          }
          return true;
        }
      }
    }
 catch (    Exception e) {
      logErrorOpeningAsWorkspaceFile(e);
    }
  }
  return false;
}","private boolean tryToOpenAsWorkspaceFile(String location){
  if (getEditorInput() instanceof IURIEditorInput) {
    try {
      IURIEditorInput uriInput=(IURIEditorInput)getEditorInput();
      URI locationURI=uriInput.getURI().resolve(location);
      if (locationURI != null && ""String_Node_Str"".equals(locationURI.getScheme())) {
        IFile[] files=ResourcesPlugin.getWorkspace().getRoot().findFilesForLocationURI(locationURI);
        if (files.length > 0) {
          IEditorPart editor=IDE.openEditor(getEditorSite().getPage(),files[0]);
          if (editor instanceof MarkupEditor) {
            MarkupEditor markupEditor=(MarkupEditor)editor;
            markupEditor.showPreview(null);
          }
          return true;
        }
      }
    }
 catch (    Exception e) {
      logErrorOpeningAsWorkspaceFile(e);
    }
  }
  return false;
}",0.9679370840895342
96403,"protected PatternBasedSyntax getPhraseModifierSyntax(){
  return phraseModifierSyntax;
}","/** 
 * @since 2.0
 */
protected PatternBasedSyntax getPhraseModifierSyntax(){
  return phraseModifierSyntax;
}",0.8844221105527639
96404,"/** 
 * subclasses may override this method to add tokens to the language. Overriding classes should call <code>super.addTokenExtensions(tokenSyntax)</code> if the default language extensions are desired.
 * @param tokenSyntax the token syntax
 */
protected void addTokenExtensions(PatternBasedSyntax tokenSyntax){
}","/** 
 * subclasses may override this method to add tokens to the language. Overriding classes should call <code>super.addTokenExtensions(tokenSyntax)</code> if the default language extensions are desired.
 * @param tokenSyntax the token syntax
 * @since 2.0
 */
protected void addTokenExtensions(PatternBasedSyntax tokenSyntax){
}",0.978328173374613
96405,protected abstract void addStandardTokens(PatternBasedSyntax tokenSyntax);,"/** 
 * @since 2.0
 */
protected abstract void addStandardTokens(PatternBasedSyntax tokenSyntax);",0.8654970760233918
96406,"protected PatternBasedSyntax getReplacementTokenSyntax(){
  return tokenSyntax;
}","/** 
 * @since 2.0
 */
protected PatternBasedSyntax getReplacementTokenSyntax(){
  return tokenSyntax;
}",0.8756756756756757
96407,"/** 
 * subclasses may override this method to add phrases to the language. Overriding classes should call <code>super.addPhraseModifierExtensions(phraseModifierSyntax)</code> if the default language extensions are desired.
 * @param phraseModifierSyntax the phrase modifier syntax
 */
protected void addPhraseModifierExtensions(PatternBasedSyntax phraseModifierSyntax){
}","/** 
 * subclasses may override this method to add phrases to the language. Overriding classes should call <code>super.addPhraseModifierExtensions(phraseModifierSyntax)</code> if the default language extensions are desired.
 * @param phraseModifierSyntax the phrase modifier syntax
 * @since 2.0
 */
protected void addPhraseModifierExtensions(PatternBasedSyntax phraseModifierSyntax){
}",0.9815303430079156
96408,protected abstract void addStandardPhraseModifiers(PatternBasedSyntax phraseModifierSyntax);,"/** 
 * @since 2.0
 */
protected abstract void addStandardPhraseModifiers(PatternBasedSyntax phraseModifierSyntax);",0.8888888888888888
96409,"/** 
 * Sets the normal file extensions of this markup language.
 * @return the file extensions
 * @see #getFileExtensions()
 */
public void setFileExtensions(Set<String> fileExtensions){
  checkNotNull(fileExtensions,""String_Node_Str"");
  checkArgument(!fileExtensions.isEmpty(),""String_Node_Str"");
  this.fileExtensions=ImmutableSet.copyOf(fileExtensions);
}","/** 
 * Sets the normal file extensions of this markup language.
 * @return the file extensions
 * @see #getFileExtensions()
 * @since 2.0
 */
public void setFileExtensions(Set<String> fileExtensions){
  checkNotNull(fileExtensions,""String_Node_Str"");
  checkArgument(!fileExtensions.isEmpty(),""String_Node_Str"");
  this.fileExtensions=ImmutableSet.copyOf(fileExtensions);
}",0.9809264305177112
96410,"/** 
 * Provides the normal file extensions of this markup language. The default implementation returns a set of  {@link #getName()}.
 * @return the file extensions
 */
public Set<String> getFileExtensions(){
  if (fileExtensions == null) {
    return Collections.singleton(getName());
  }
  return fileExtensions;
}","/** 
 * Provides the normal file extensions of this markup language. The default implementation returns a set of  {@link #getName()}.
 * @return the file extensions
 * @since 2.0
 */
public Set<String> getFileExtensions(){
  if (fileExtensions == null) {
    return Collections.singleton(getName());
  }
  return fileExtensions;
}",0.978328173374613
96411,"/** 
 * Adds a new item to the manifest. If an identifier is not specified it will automatically be assigned. <p> The <i>spine</i> defines the reading order, so the order items are added and whether or not <i>spine</i> is <code>true</code> does matter. Unless a table of contents file has been specified it will be generated. All files that have been added to the spine will be examined unless the <i>noToc</i> attribute has been set to <code>true</code>. </p>
 * @param file the file to add
 * @param dest the destination sub-folder or <code>null</code>
 * @param id identifier or <code>null</code>
 * @param type MIME file type
 * @param spine whether or not to add the item to the spine
 * @param linear whether or not the item is part of the reading order
 * @param noToc whether or not to include in TOC when automatically generated
 * @return the new item
 */
public Item addItem(String id,Locale lang,File file,String dest,String type,boolean spine,boolean linear,boolean noToc){
  if (file == null || !file.exists()) {
    throw new IllegalArgumentException(""String_Node_Str"" + file.getAbsolutePath() + ""String_Node_Str"");
  }
  if (file.isDirectory()) {
    throw new IllegalArgumentException(""String_Node_Str"" + file.getAbsolutePath() + ""String_Node_Str"");
  }
  Item item=OPFFactory.eINSTANCE.createItem();
  if (type == null) {
    type=EPUBFileUtil.getMimeType(file);
    if (type == null) {
      throw new IllegalArgumentException(""String_Node_Str"" + file + ""String_Node_Str"");
    }
  }
  if (id == null) {
    String prefix=""String_Node_Str"";
    if (!type.equals(MIMETYPE_XHTML)) {
      prefix=(type.indexOf('/')) == -1 ? type : type.substring(0,type.indexOf('/')) + ""String_Node_Str"";
    }
    id=prefix + file.getName().substring(0,file.getName().lastIndexOf('.'));
  }
  item.setId(id);
  if (dest == null) {
    item.setHref(file.getName());
  }
 else {
    item.setHref(dest + '/' + file.getName());
  }
  item.setNoToc(noToc);
  item.setMedia_type(type);
  item.setFile(file.getAbsolutePath());
  opfPackage.getManifest().getItems().add(item);
  if (spine) {
    Itemref ref=OPFFactory.eINSTANCE.createItemref();
    if (!linear) {
      ref.setLinear(""String_Node_Str"");
    }
    ref.setIdref(id);
    getSpine().getSpineItems().add(ref);
  }
  return item;
}","/** 
 * Adds a new item to the manifest. If an identifier is not specified it will automatically be assigned. <p> The <i>spine</i> defines the reading order, so the order items are added and whether or not <i>spine</i> is <code>true</code> does matter. Unless a table of contents file has been specified it will be generated. All files that have been added to the spine will be examined unless the <i>noToc</i> attribute has been set to <code>true</code>. </p>
 * @param file the file to add
 * @param dest the destination sub-folder or <code>null</code>
 * @param id identifier or <code>null</code>
 * @param type MIME file type
 * @param spine whether or not to add the item to the spine
 * @param linear whether or not the item is part of the reading order
 * @param noToc whether or not to include in TOC when automatically generated
 * @return the new item
 */
public Item addItem(String id,Locale lang,File file,String dest,String type,boolean spine,boolean linear,boolean noToc){
  if (file == null) {
    throw new IllegalArgumentException(""String_Node_Str"");
  }
  if (!file.exists()) {
    throw new IllegalArgumentException(""String_Node_Str"" + file.getAbsolutePath() + ""String_Node_Str"");
  }
  if (file.isDirectory()) {
    throw new IllegalArgumentException(""String_Node_Str"" + file.getAbsolutePath() + ""String_Node_Str"");
  }
  Item item=OPFFactory.eINSTANCE.createItem();
  if (type == null) {
    type=EPUBFileUtil.getMimeType(file);
    if (type == null) {
      throw new IllegalArgumentException(""String_Node_Str"" + file + ""String_Node_Str"");
    }
  }
  if (id == null) {
    String prefix=""String_Node_Str"";
    if (!type.equals(MIMETYPE_XHTML)) {
      prefix=(type.indexOf('/')) == -1 ? type : type.substring(0,type.indexOf('/')) + ""String_Node_Str"";
    }
    id=prefix + file.getName().substring(0,file.getName().lastIndexOf('.'));
  }
  item.setId(id);
  if (dest == null) {
    item.setHref(file.getName());
  }
 else {
    item.setHref(dest + '/' + file.getName());
  }
  item.setNoToc(noToc);
  item.setMedia_type(type);
  item.setFile(file.getAbsolutePath());
  opfPackage.getManifest().getItems().add(item);
  if (spine) {
    Itemref ref=OPFFactory.eINSTANCE.createItemref();
    if (!linear) {
      ref.setLinear(""String_Node_Str"");
    }
    ref.setIdref(id);
    getSpine().getSpineItems().add(ref);
  }
  return item;
}",0.9834158948955416
96412,"/** 
 * Unpacks the given <i>epubfile</i> to the <i>destination</i> directory. This method will also validate the first item contained in the EPUB (see  {@link #writeEPUBHeader(ZipOutputStream)}). <p> If the destination folder does not already exist it will be created. Additionally the modification timestamp of this folder will be set to the same as the originating EPUB file. </p>
 * @param epubfile the EPUB file
 * @param destination the destination folder
 * @throws IOException if the operation was unsuccessful
 */
public static void unzip(File epubfile,File destination) throws IOException {
  if (!destination.exists()) {
    if (!destination.mkdirs()) {
      throw new IOException(""String_Node_Str"");
    }
  }
  ZipInputStream in=new ZipInputStream(new FileInputStream(epubfile));
  byte[] buf=new byte[BUFFERSIZE];
  ZipEntry entry=null;
  boolean checkFirstItem=true;
  while ((entry=in.getNextEntry()) != null) {
    String entryName=entry.getName();
    File newFile=new File(destination.getAbsolutePath() + File.separator + entryName);
    if (entry.isDirectory()) {
      newFile.mkdirs();
      if (entry.getTime() > 0) {
        newFile.setLastModified(entry.getTime());
      }
      continue;
    }
 else {
      newFile.getParentFile().mkdirs();
    }
    int n;
    FileOutputStream fileoutputstream=new FileOutputStream(newFile);
    while ((n=in.read(buf,0,BUFFERSIZE)) > -1) {
      fileoutputstream.write(buf,0,n);
    }
    fileoutputstream.close();
    in.closeEntry();
    if (entry.getTime() > 0) {
      newFile.setLastModified(entry.getTime());
    }
    if (checkFirstItem) {
      if (!entryName.equals(""String_Node_Str"")) {
        throw new IOException(""String_Node_Str"");
      }
      String type=new String(buf);
      if (!type.trim().equals(OPSPublication.MIMETYPE_EPUB)) {
        throw new IOException(""String_Node_Str"" + OPSPublication.MIMETYPE_EPUB + ""String_Node_Str"");
      }
      checkFirstItem=false;
    }
  }
  destination.setLastModified(epubfile.lastModified());
}","/** 
 * Unpacks the given <i>epubfile</i> to the <i>destination</i> directory. This method will also validate the first item contained in the EPUB (see  {@link #writeEPUBHeader(ZipOutputStream)}). <p> If the destination folder does not already exist it will be created. Additionally the modification timestamp of this folder will be set to the same as the originating EPUB file. </p>
 * @param epubfile the EPUB file
 * @param destination the destination folder
 * @throws FileNotFoundException when EPUB file does not exist
 * @throws IOException if the operation was unsuccessful
 */
public static void unzip(File epubfile,File destination) throws IOException {
  if (!destination.exists()) {
    if (!destination.mkdirs()) {
      throw new IOException(""String_Node_Str"");
    }
  }
  ZipInputStream in=new ZipInputStream(new FileInputStream(epubfile));
  byte[] buf=new byte[BUFFERSIZE];
  ZipEntry entry=null;
  boolean checkFirstItem=true;
  while ((entry=in.getNextEntry()) != null) {
    String entryName=entry.getName();
    File newFile=new File(destination.getAbsolutePath() + File.separator + entryName);
    if (entry.isDirectory()) {
      newFile.mkdirs();
      if (entry.getTime() > 0) {
        newFile.setLastModified(entry.getTime());
      }
      continue;
    }
 else {
      newFile.getParentFile().mkdirs();
    }
    int n;
    FileOutputStream fileoutputstream=new FileOutputStream(newFile);
    while ((n=in.read(buf,0,BUFFERSIZE)) > -1) {
      fileoutputstream.write(buf,0,n);
    }
    fileoutputstream.close();
    in.closeEntry();
    if (entry.getTime() > 0) {
      newFile.setLastModified(entry.getTime());
    }
    if (checkFirstItem) {
      if (!entryName.equals(""String_Node_Str"")) {
        throw new IOException(""String_Node_Str"");
      }
      String type=new String(buf);
      if (!type.trim().equals(OPSPublication.MIMETYPE_EPUB)) {
        throw new IOException(""String_Node_Str"" + OPSPublication.MIMETYPE_EPUB + ""String_Node_Str"");
      }
      checkFirstItem=false;
    }
  }
  in.close();
  destination.setLastModified(epubfile.lastModified());
}",0.9813152147537004
96413,"/** 
 * Executes a given command
 * @param command the command to execute
 */
public void execute(Command command){
  if (initialized) {
    if (pendingListeners.get(command) != null) {
      String nanoTime=String.valueOf(System.nanoTime());
      pendingListenerCallBackMap.put(nanoTime,pendingListeners.get(command));
      execute(""String_Node_Str"" + nanoTime + ""String_Node_Str"");
      execute(command.getCommand());
      pendingListeners.remove(command);
    }
  }
 else {
    pendingListeners.put(command,new ArrayList<ModifyListener>(modifyListenerList));
    pendingCommands.add(command);
  }
}","/** 
 * Executes a given command
 * @param command the command to execute
 */
public void execute(Command command){
  if (initialized) {
    if (pendingListeners.get(command) != null) {
      String nanoTime=String.valueOf(System.nanoTime());
      pendingListenerCallBackMap.put(nanoTime,pendingListeners.get(command));
      execute(""String_Node_Str"" + nanoTime + ""String_Node_Str"");
      execute(command.getCommand());
      pendingListeners.remove(command);
    }
 else {
      execute(""String_Node_Str"");
      execute(command.getCommand());
    }
  }
 else {
    pendingListeners.put(command,new ArrayList<ModifyListener>(modifyListenerList));
    pendingCommands.add(command);
  }
}",0.9343629343629344
96414,"private Template resolveTemplate(String templateName){
  templateName=templateName.toLowerCase();
  if (!excludePatterns.isEmpty()) {
    for (    Pattern p : excludePatterns) {
      if (p.matcher(templateName).matches()) {
        return null;
      }
    }
  }
  Template template=templateByName.get(templateName);
  if (template == null) {
    for (    TemplateResolver resolver : mediaWikiLanguage.getTemplateProviders()) {
      template=resolver.resolveTemplate(templateName);
      if (template != null) {
        template=normalize(template);
        break;
      }
    }
    if (template == null) {
      template=new Template();
      template.setName(templateName);
      template.setTemplateMarkup(""String_Node_Str"");
    }
    templateByName.put(template.getName().toLowerCase(),template);
  }
  return template;
}","private Template resolveTemplate(String templateName){
  if (!excludePatterns.isEmpty()) {
    for (    Pattern p : excludePatterns) {
      if (p.matcher(templateName).matches()) {
        return null;
      }
    }
  }
  Template template=templateByName.get(templateName);
  if (template == null) {
    for (    TemplateResolver resolver : mediaWikiLanguage.getTemplateProviders()) {
      template=resolver.resolveTemplate(templateName);
      if (template != null) {
        template=normalize(template);
        break;
      }
    }
    if (template == null) {
      template=new Template();
      template.setName(templateName);
      template.setTemplateMarkup(""String_Node_Str"");
    }
    templateByName.put(template.getName(),template);
  }
  return template;
}",0.9643527204502814
96415,"public TemplateProcessor(AbstractMediaWikiLanguage abstractMediaWikiLanguage){
  this.mediaWikiLanguage=abstractMediaWikiLanguage;
  for (  Template template : mediaWikiLanguage.getTemplates()) {
    templateByName.put(template.getName().toLowerCase(),normalize(template));
  }
  String templateExcludes=abstractMediaWikiLanguage.getTemplateExcludes();
  if (templateExcludes != null) {
    String[] split=templateExcludes.split(""String_Node_Str"");
    for (    String exclude : split) {
      String pattern=exclude.toLowerCase().replaceAll(""String_Node_Str"",""String_Node_Str"").replaceAll(""String_Node_Str"",""String_Node_Str"");
      excludePatterns.add(Pattern.compile(pattern,Pattern.CASE_INSENSITIVE));
    }
  }
}","public TemplateProcessor(AbstractMediaWikiLanguage abstractMediaWikiLanguage){
  this.mediaWikiLanguage=abstractMediaWikiLanguage;
  for (  Template template : mediaWikiLanguage.getTemplates()) {
    templateByName.put(template.getName(),normalize(template));
  }
  String templateExcludes=abstractMediaWikiLanguage.getTemplateExcludes();
  if (templateExcludes != null) {
    String[] split=templateExcludes.split(""String_Node_Str"");
    for (    String exclude : split) {
      String pattern=exclude.replaceAll(""String_Node_Str"",""String_Node_Str"").replaceAll(""String_Node_Str"",""String_Node_Str"");
      excludePatterns.add(Pattern.compile(pattern,Pattern.CASE_INSENSITIVE));
    }
  }
}",0.9800853485064012
96416,"@Override public Template resolveTemplate(String templateName){
  if (wikiBaseUrl != null) {
    int indexOf=templateName.indexOf(':');
    if (indexOf == 0) {
      templateName=""String_Node_Str"" + templateName;
    }
 else     if (indexOf == -1) {
      templateName=""String_Node_Str"" + templateName;
    }
    URL url=computeRawUrl(templateName);
    if (url != null) {
      Reader input;
      try {
        input=new InputStreamReader(new BufferedInputStream(url.openStream()),""String_Node_Str"");
        try {
          String content=readFully(input);
          Template template=new Template();
          String basicName=templateName.toLowerCase().startsWith(""String_Node_Str"") ? templateName.substring(templateName.lastIndexOf(':')) : templateName;
          template.setName(basicName);
          template.setTemplateMarkup(content);
          return template;
        }
  finally {
          input.close();
        }
      }
 catch (      final IOException e) {
        final String message=MessageFormat.format(""String_Node_Str"",url,e.getMessage());
        Logger.getLogger(WikiTemplateResolver.class.getName()).log(Level.WARNING,message,e);
      }
    }
  }
  return null;
}","@Override public Template resolveTemplate(String templateName){
  if (wikiBaseUrl != null) {
    int indexOf=templateName.indexOf(':');
    if (indexOf == 0) {
      templateName=""String_Node_Str"" + templateName;
    }
 else     if (indexOf == -1) {
      templateName=""String_Node_Str"" + templateName;
    }
    URL url=computeRawUrl(templateName);
    if (url != null) {
      Reader input;
      try {
        input=new InputStreamReader(new BufferedInputStream(url.openStream()),""String_Node_Str"");
        try {
          String content=readFully(input);
          Template template=new Template();
          String basicName=templateName.toLowerCase().startsWith(""String_Node_Str"") ? templateName.substring(templateName.lastIndexOf(':') + 1) : templateName;
          template.setName(basicName);
          template.setTemplateMarkup(content);
          return template;
        }
  finally {
          input.close();
        }
      }
 catch (      final IOException e) {
        final String message=MessageFormat.format(""String_Node_Str"",url,e.getMessage());
        Logger.getLogger(WikiTemplateResolver.class.getName()).log(Level.WARNING,message,e);
      }
    }
  }
  return null;
}",0.9983235540653814
96417,"@SuppressWarnings(""String_Node_Str"") @Override public Object getAdapter(Class adapter){
  if (adapter == IContentOutlinePage.class) {
    if (outlinePage == null || outlinePage.getControl() == null || outlinePage.getControl().isDisposed()) {
      outlinePage=createContentOutline();
      outlinePage.setEditor(this);
      return outlinePage;
    }
    return outlinePage;
  }
  if (adapter == OutlineItem.class) {
    return getOutlineModel();
  }
 else   if (adapter == IShowInSource.class) {
    return this;
  }
 else   if (adapter == IShowInTarget.class) {
    return this;
  }
  return super.getAdapter(adapter);
}","@SuppressWarnings({""String_Node_Str""}) @Override public Object getAdapter(Class adapter){
  if (adapter == IContentOutlinePage.class) {
    if (outlinePage == null || outlinePage.getControl() == null || outlinePage.getControl().isDisposed()) {
      outlinePage=createContentOutline();
      outlinePage.setEditor(this);
      return outlinePage;
    }
    return outlinePage;
  }
  if (adapter == OutlineItem.class) {
    return getOutlineModel();
  }
 else   if (adapter == IShowInSource.class) {
    return this;
  }
 else   if (adapter == IShowInTarget.class) {
    return this;
  }
  return super.getAdapter(adapter);
}",0.9983948635634028
96418,"@SuppressWarnings(""String_Node_Str"") private static void addRepositoryHyperlinkDetectorTargets(final TaskRepository taskRepository,Map hyperlinkDetectorTargets){
  IAdaptable context=new IAdaptable(){
    public Object getAdapter(    Class adapter){
      if (adapter == TaskRepository.class) {
        return taskRepository;
      }
      return null;
    }
  }
;
  hyperlinkDetectorTargets.put(ID_CONTEXT_EDITOR_TEXT,context);
  hyperlinkDetectorTargets.put(ID_CONTEXT_EDITOR_TASK,context);
}","@SuppressWarnings({""String_Node_Str"",""String_Node_Str""}) private static void addRepositoryHyperlinkDetectorTargets(final TaskRepository taskRepository,Map hyperlinkDetectorTargets){
  IAdaptable context=new IAdaptable(){
    public Object getAdapter(    Class adapter){
      if (adapter == TaskRepository.class) {
        return taskRepository;
      }
      return null;
    }
  }
;
  hyperlinkDetectorTargets.put(ID_CONTEXT_EDITOR_TEXT,context);
  hyperlinkDetectorTargets.put(ID_CONTEXT_EDITOR_TASK,context);
}",0.98015873015873
96419,"@SuppressWarnings(""String_Node_Str"") @Override protected List getBackgroundColorExclusions(){
  List exclusions=super.getBackgroundColorExclusions();
  if (filteredTree != null) {
    Text filterControl=filteredTree.getFilterControl();
    exclusions.add(filterControl.getParent());
    exclusions.addAll(Arrays.asList(filterControl.getParent().getChildren()));
  }
  return exclusions;
}","@SuppressWarnings({""String_Node_Str"",""String_Node_Str""}) @Override protected List getBackgroundColorExclusions(){
  List exclusions=super.getBackgroundColorExclusions();
  if (filteredTree != null) {
    Text filterControl=filteredTree.getFilterControl();
    exclusions.add(filterControl.getParent());
    exclusions.addAll(Arrays.asList(filterControl.getParent().getChildren()));
  }
  return exclusions;
}",0.9748743718592964
96420,"@SuppressWarnings(""String_Node_Str"") public void add(T t){
  if (list == null) {
    list=new ArrayList<T>();
  }
 else   if (list.size() > 0) {
    Segment previousSegment=list.get(list.size() - 1);
    final int tOffset=t.getOffset();
    if (previousSegment.getOffset() > tOffset) {
      throw new IllegalArgumentException();
    }
    if (previousSegment.getEndOffset() > tOffset) {
      int newLength=tOffset - previousSegment.getOffset();
      previousSegment.setLength(newLength);
    }
  }
  list.add(t);
}","public void add(T t){
  if (list == null) {
    list=new ArrayList<T>();
  }
 else   if (list.size() > 0) {
    Segment<?> previousSegment=list.get(list.size() - 1);
    final int tOffset=t.getOffset();
    if (previousSegment.getOffset() > tOffset) {
      throw new IllegalArgumentException();
    }
    if (previousSegment.getEndOffset() > tOffset) {
      int newLength=tOffset - previousSegment.getOffset();
      previousSegment.setLength(newLength);
    }
  }
  list.add(t);
}",0.96
96421,"@SuppressWarnings({""String_Node_Str"",""String_Node_Str""}) @Override public String getHoverInfo(ITextViewer textViewer,IRegion hoverRegion){
  IAnnotationModel model=getAnnotationModel(sourceViewer);
  if (model == null) {
    return null;
  }
  Iterator e=model.getAnnotationIterator();
  while (e.hasNext()) {
    Annotation a=(Annotation)e.next();
    if (isIncluded(a)) {
      Position p=model.getPosition(a);
      if (p != null && p.overlapsWith(hoverRegion.getOffset(),hoverRegion.getLength())) {
        String msg=a.getText();
        if (msg != null && msg.trim().length() > 0) {
          if (a.getType().equals(AnchorHrefAnnotation.TYPE)) {
            if (msg.startsWith(""String_Node_Str"")) {
              return null;
            }
 else {
              return NLS.bind(Messages.TextHover_hyperlinkHover,msg);
            }
          }
          return msg;
        }
      }
    }
  }
  return null;
}","@SuppressWarnings({""String_Node_Str""}) @Override public String getHoverInfo(ITextViewer textViewer,IRegion hoverRegion){
  IAnnotationModel model=getAnnotationModel(sourceViewer);
  if (model == null) {
    return null;
  }
  Iterator<?> e=model.getAnnotationIterator();
  while (e.hasNext()) {
    Annotation a=(Annotation)e.next();
    if (isIncluded(a)) {
      Position p=model.getPosition(a);
      if (p != null && p.overlapsWith(hoverRegion.getOffset(),hoverRegion.getLength())) {
        String msg=a.getText();
        if (msg != null && msg.trim().length() > 0) {
          if (a.getType().equals(AnchorHrefAnnotation.TYPE)) {
            if (msg.startsWith(""String_Node_Str"")) {
              return null;
            }
 else {
              return NLS.bind(Messages.TextHover_hyperlinkHover,msg);
            }
          }
          return msg;
        }
      }
    }
  }
  return null;
}",0.988442487616951
96422,"@Override protected Control createDialogArea(Composite parent){
  patternFilter=new PatternFilter();
  try {
    Constructor<FilteredTree> constructor=FilteredTree.class.getConstructor(Composite.class,int.class,PatternFilter.class,boolean.class);
    filteredTree=constructor.newInstance(parent,SWT.MULTI | SWT.H_SCROLL | SWT.V_SCROLL| SWT.BORDER,patternFilter,true);
  }
 catch (  SecurityException e1) {
    throw new IllegalStateException(e1);
  }
catch (  NoSuchMethodException e1) {
    filteredTree=new FilteredTree(parent,SWT.MULTI | SWT.H_SCROLL | SWT.V_SCROLL| SWT.BORDER,patternFilter);
  }
catch (  Exception e) {
    throw new IllegalStateException(e);
  }
  int heightHint=(filteredTree.getViewer().getTree().getItemHeight() * 12) + Math.max(filteredTree.getFilterControl().getSize().y,12);
  GridDataFactory.fillDefaults().grab(true,true).hint(SWT.DEFAULT,heightHint).applyTo(filteredTree);
  filteredTree.getViewer().setUseHashlookup(true);
  filteredTree.getViewer().setContentProvider(new BaseWorkbenchContentProvider());
  filteredTree.getViewer().setLabelProvider(WorkbenchLabelProvider.getDecoratingWorkbenchLabelProvider());
  filteredTree.getViewer().setAutoExpandLevel(AbstractTreeViewer.ALL_LEVELS);
  filteredTree.getViewer().getTree().addSelectionListener(new SelectionListener(){
    public void widgetDefaultSelected(    SelectionEvent e){
      handleSelection();
    }
    public void widgetSelected(    SelectionEvent e){
    }
  }
);
  filteredTree.getViewer().getTree().addKeyListener(new KeyListener(){
    public void keyPressed(    KeyEvent e){
      if (e.character == 0x1B) {
        dispose();
      }
    }
    public void keyReleased(    KeyEvent e){
    }
  }
);
  filteredTree.getViewer().getTree().addMouseListener(new MouseAdapter(){
    @Override public void mouseUp(    MouseEvent e){
      Tree tree=filteredTree.getViewer().getTree();
      if ((tree.getSelectionCount() < 1) || (e.button != 1)) {
        return;
      }
      Object object=tree.getItem(new Point(e.x,e.y));
      TreeItem selection=tree.getSelection()[0];
      if (selection.equals(object)) {
        handleSelection();
      }
    }
  }
);
  return filteredTree;
}","@SuppressWarnings(""String_Node_Str"") @Override protected Control createDialogArea(Composite parent){
  patternFilter=new PatternFilter();
  try {
    Constructor<FilteredTree> constructor=FilteredTree.class.getConstructor(Composite.class,int.class,PatternFilter.class,boolean.class);
    filteredTree=constructor.newInstance(parent,SWT.MULTI | SWT.H_SCROLL | SWT.V_SCROLL| SWT.BORDER,patternFilter,true);
  }
 catch (  SecurityException e1) {
    throw new IllegalStateException(e1);
  }
catch (  NoSuchMethodException e1) {
    filteredTree=new FilteredTree(parent,SWT.MULTI | SWT.H_SCROLL | SWT.V_SCROLL| SWT.BORDER,patternFilter);
  }
catch (  Exception e) {
    throw new IllegalStateException(e);
  }
  int heightHint=(filteredTree.getViewer().getTree().getItemHeight() * 12) + Math.max(filteredTree.getFilterControl().getSize().y,12);
  GridDataFactory.fillDefaults().grab(true,true).hint(SWT.DEFAULT,heightHint).applyTo(filteredTree);
  filteredTree.getViewer().setUseHashlookup(true);
  filteredTree.getViewer().setContentProvider(new BaseWorkbenchContentProvider());
  filteredTree.getViewer().setLabelProvider(WorkbenchLabelProvider.getDecoratingWorkbenchLabelProvider());
  filteredTree.getViewer().setAutoExpandLevel(AbstractTreeViewer.ALL_LEVELS);
  filteredTree.getViewer().getTree().addSelectionListener(new SelectionListener(){
    public void widgetDefaultSelected(    SelectionEvent e){
      handleSelection();
    }
    public void widgetSelected(    SelectionEvent e){
    }
  }
);
  filteredTree.getViewer().getTree().addKeyListener(new KeyListener(){
    public void keyPressed(    KeyEvent e){
      if (e.character == 0x1B) {
        dispose();
      }
    }
    public void keyReleased(    KeyEvent e){
    }
  }
);
  filteredTree.getViewer().getTree().addMouseListener(new MouseAdapter(){
    @Override public void mouseUp(    MouseEvent e){
      Tree tree=filteredTree.getViewer().getTree();
      if ((tree.getSelectionCount() < 1) || (e.button != 1)) {
        return;
      }
      Object object=tree.getItem(new Point(e.x,e.y));
      TreeItem selection=tree.getSelection()[0];
      if (selection.equals(object)) {
        handleSelection();
      }
    }
  }
);
  return filteredTree;
}",0.991600454029512
96423,"@Override public void writeCharacters(String text){
  if (text == null) {
    return;
  }
  writeCharacters(text.toCharArray(),0,text.length());
}","@Override public void writeCharacters(String text){
  if (text == null) {
    return;
  }
  char[] chars=text.toCharArray();
  writeCharacters(chars,0,chars.length);
}",0.8306709265175719
96424,"/** 
 * validate the input
 */
@Override protected boolean doCheckState(){
  String value=getStringValue();
  if (value != null && value.trim().length() > 0) {
    int offset=0;
    Iterator<CssRule> ruleIterator=cssStyleManager.createRuleIterator(value);
    while (ruleIterator.hasNext()) {
      CssRule rule=ruleIterator.next();
      if (rule.offset > offset) {
        String gap=value.substring(offset,rule.offset);
        if (gap.trim().length() != 0) {
          setErrorMessage(MessageFormat.format(Messages.getString(""String_Node_Str""),gap.trim(),offset));
          return false;
        }
      }
      offset=rule.offset + rule.length;
      if (!rule.knownRule) {
        StringBuilder recognizedNames=new StringBuilder();
        for (        String recognizedName : cssStyleManager.getRecognizedRuleNames()) {
          if (recognizedNames.length() > 0) {
            recognizedNames.append(Messages.getString(""String_Node_Str""));
          }
          recognizedNames.append(recognizedName);
        }
        setErrorMessage(MessageFormat.format(Messages.getString(""String_Node_Str""),rule.name,recognizedNames));
        return false;
      }
      if (CssStyleManager.RULE_COLOR.equals(rule.name) || CssStyleManager.RULE_BACKGROUND_COLOR.equals(rule.name)) {
        Integer rgb=CssStyleManager.cssColorRgb(rule.value);
        if (rgb == null) {
          setErrorMessage(MessageFormat.format(""String_Node_Str"",rule.value));
          return false;
        }
      }
    }
    if (offset < value.length() - 1) {
      String gap=value.substring(offset,value.length());
      if (gap.trim().length() != 0) {
        setErrorMessage(MessageFormat.format(Messages.getString(""String_Node_Str""),gap.trim(),offset));
        return false;
      }
    }
  }
  return super.doCheckState();
}","/** 
 * validate the input
 */
@Override protected boolean doCheckState(){
  String value=getStringValue();
  if (value != null && value.trim().length() > 0) {
    int offset=0;
    Iterator<CssRule> ruleIterator=cssStyleManager.createRuleIterator(value);
    while (ruleIterator.hasNext()) {
      CssRule rule=ruleIterator.next();
      if (rule.offset > offset) {
        String gap=value.substring(offset,rule.offset);
        if (gap.trim().length() != 0) {
          setErrorMessage(MessageFormat.format(Messages.getString(""String_Node_Str""),gap.trim(),offset));
          return false;
        }
      }
      offset=rule.offset + rule.length;
      if (!rule.knownRule) {
        StringBuilder recognizedNames=new StringBuilder();
        for (        String recognizedName : cssStyleManager.getRecognizedRuleNames()) {
          if (recognizedNames.length() > 0) {
            recognizedNames.append(Messages.getString(""String_Node_Str""));
          }
          recognizedNames.append(recognizedName);
        }
        setErrorMessage(MessageFormat.format(Messages.getString(""String_Node_Str""),rule.name,recognizedNames));
        return false;
      }
      if (CssStyleManager.RULE_COLOR.equals(rule.name) || CssStyleManager.RULE_BACKGROUND_COLOR.equals(rule.name)) {
        Integer rgb=CssStyleManager.cssColorRgb(rule.value);
        if (rgb == null) {
          setErrorMessage(MessageFormat.format(Messages.getString(""String_Node_Str""),rule.value));
          return false;
        }
      }
    }
    if (offset < value.length() - 1) {
      String gap=value.substring(offset,value.length());
      if (gap.trim().length() != 0) {
        setErrorMessage(MessageFormat.format(Messages.getString(""String_Node_Str""),gap.trim(),offset));
        return false;
      }
    }
  }
  return super.doCheckState();
}",0.9944903581267218
96425,"private String computeLanguageName(){
  if (ResourcesPlugin.getPlugin() == null) {
    return TextileLanguage.class.getName();
  }
  return ""String_Node_Str"";
}","private String computeLanguageName(){
  if (WikiTextPlugin.getDefault() == null) {
    return TextileLanguage.class.getName();
  }
  return ""String_Node_Str"";
}",0.91875
96426,"@Override protected void onDestroy(){
  tracker.trackEvent(app.getExperiment().getParticipant().getCode(),""String_Node_Str"",""String_Node_Str"" + System.currentTimeMillis() + ""String_Node_Str"",(int)System.currentTimeMillis());
  tracker.stop();
  super.onDestroy();
}","@Override protected void onDestroy(){
  try {
    tracker.trackEvent(app.getExperiment().getParticipant().getCode(),""String_Node_Str"",""String_Node_Str"" + System.currentTimeMillis() + ""String_Node_Str"",(int)System.currentTimeMillis());
    tracker.stop();
  }
 catch (  Exception e) {
    Log.e(TAG,""String_Node_Str"" + ""String_Node_Str"" + ""String_Node_Str"");
  }
  super.onDestroy();
}",0.8166409861325116
96427,"private boolean isDisabled(){
  return environment.supports(""String_Node_Str"");
}","private boolean isDisabled(){
  return !environment.supports(""String_Node_Str"");
}",0.9938650306748468
96428,"public FrameworkUIPlugin(){
  super();
}","public FrameworkUIPlugin(){
  super();
  singleton=this;
}",0.8163265306122449
96429,"private void createBuildPropertiesFile(final String featureLocation,final String[][] configurations) throws IOException {
  File file=new File(featureLocation);
  if (!file.exists() || !file.isDirectory()) {
    if (!file.mkdirs()) {
      throw new IOException(Messages.creatorCouldntCopy + ""String_Node_Str"" + file);
    }
  }
  Properties properties=new Properties();
  handleRootFiles(configurations,properties);
  handleJREInfo(configurations,properties);
  handleExportSource(properties);
  File fileToSave=new File(file,ICoreConstants.BUILD_FILENAME_DESCRIPTOR);
  save(fileToSave,properties,""String_Node_Str"");
}","private void createBuildPropertiesFile(final String featureLocation,final String[][] configurations) throws IOException {
  File file=new File(featureLocation);
  if (!file.exists() || !file.isDirectory()) {
    if (!file.mkdirs()) {
      throw new IOException(Messages.creatorCouldntCopy + ""String_Node_Str"" + file);
    }
  }
  Properties properties=new Properties();
  handleRootFiles(configurations,properties,featureLocation);
  handleJREInfo(configurations,properties);
  handleExportSource(properties);
  File fileToSave=new File(file,ICoreConstants.BUILD_FILENAME_DESCRIPTOR);
  save(fileToSave,properties,""String_Node_Str"");
}",0.9872611464968152
96430,"protected IStatus run(final IProgressMonitor monitor){
  IStatus result=null;
  String[][] configurations=fInfo.targets;
  if (configurations == null) {
    configurations=new String[][]{{TargetPlatform.getOS(),TargetPlatform.getWS(),TargetPlatform.getOSArch(),TargetPlatform.getNL()}};
  }
  cleanupBuildRepo();
  errorMessage=null;
  try {
    monitor.beginTask(""String_Node_Str"",10);
    try {
      String featureID=""String_Node_Str"";
      featureLocation=fBuildTempLocation + File.separator + featureID;
      createFeature(featureID,featureLocation,configurations,product.includeLaunchers());
      createBuildPropertiesFile(featureLocation,configurations);
      doExport(featureID,null,featureLocation,configurations,new SubProgressMonitor(monitor,8));
    }
 catch (    final IOException e) {
      PDECore.log(e);
    }
catch (    final InvocationTargetException e) {
      String problemMessage=Messages.FeatureBasedExportOperation_ProblemDuringExport;
      result=new Status(IStatus.ERROR,PDECore.PLUGIN_ID,problemMessage,e.getTargetException());
    }
catch (    final CoreException e) {
      if (errorMessage != null) {
        result=parseErrorMessage(e);
      }
 else {
        result=e.getStatus();
      }
    }
 finally {
      for (int j=0; j < fInfo.items.length; j++) {
        try {
          deleteBuildFiles(fInfo.items[j]);
        }
 catch (        CoreException e) {
          PDECore.log(e);
        }
      }
      cleanup(null,new SubProgressMonitor(monitor,1));
    }
    if (hasAntErrors()) {
      String compilationErrors=Messages.FeatureExportOperation_CompilationErrors;
      String bind=NLS.bind(compilationErrors,fInfo.destinationDirectory);
      result=new Status(IStatus.WARNING,PDECore.PLUGIN_ID,bind);
    }
  }
  finally {
    monitor.done();
    errorMessage=null;
  }
  if (result == null) {
    result=Status.OK_STATUS;
  }
  return result;
}","protected IStatus run(final IProgressMonitor monitor){
  IStatus result=null;
  String[][] configurations=fInfo.targets;
  if (configurations == null) {
    configurations=new String[][]{{TargetPlatform.getOS(),TargetPlatform.getWS(),TargetPlatform.getOSArch(),TargetPlatform.getNL()}};
  }
  cleanupBuildRepo();
  errorMessage=null;
  try {
    monitor.beginTask(""String_Node_Str"",10);
    try {
      String featureID=""String_Node_Str"";
      String featureLocation=fBuildTempLocation + File.separator + featureID;
      createFeature(featureID,featureLocation,configurations,product.includeLaunchers());
      createBuildPropertiesFile(featureLocation,configurations);
      doExport(featureID,null,featureLocation,configurations,new SubProgressMonitor(monitor,8));
    }
 catch (    final IOException e) {
      PDECore.log(e);
    }
catch (    final InvocationTargetException e) {
      String problemMessage=Messages.FeatureBasedExportOperation_ProblemDuringExport;
      result=new Status(IStatus.ERROR,PDECore.PLUGIN_ID,problemMessage,e.getTargetException());
    }
catch (    final CoreException e) {
      if (errorMessage != null) {
        result=parseErrorMessage(e);
      }
 else {
        result=e.getStatus();
      }
    }
 finally {
      for (int j=0; j < fInfo.items.length; j++) {
        try {
          deleteBuildFiles(fInfo.items[j]);
        }
 catch (        CoreException e) {
          PDECore.log(e);
        }
      }
      cleanup(null,new SubProgressMonitor(monitor,1));
    }
    if (hasAntErrors()) {
      String compilationErrors=Messages.FeatureExportOperation_CompilationErrors;
      String bind=NLS.bind(compilationErrors,fInfo.destinationDirectory);
      result=new Status(IStatus.WARNING,PDECore.PLUGIN_ID,bind);
    }
  }
  finally {
    monitor.done();
    errorMessage=null;
  }
  if (result == null) {
    result=Status.OK_STATUS;
  }
  return result;
}",0.9981564392941796
96431,"private void prepareWARFile(final Properties properties,final String rootPrefix) throws IOException {
  if (product instanceof IWARProduct) {
    IWARProduct warProduct=(IWARProduct)product;
    IWorkspaceRoot wsRoot=ResourcesPlugin.getWorkspace().getRoot();
    IFile launchIni=wsRoot.getFile(warProduct.getLaunchIni());
    String launchIniPath=createWarContent(launchIni.getLocation(),""String_Node_Str"");
    IFile webXml=wsRoot.getFile(warProduct.getWebXml());
    String webXmlPath=createWarContent(webXml.getLocation(),""String_Node_Str"");
    properties.put(rootPrefix,""String_Node_Str"" + webXmlPath + ""String_Node_Str""+ launchIniPath);
    String libDir=createLibDir();
    copyLibraries(libDir);
    properties.put(rootPrefix + ""String_Node_Str"" + ""String_Node_Str"",""String_Node_Str"" + libDir);
  }
}","private void prepareWARFile(final Properties properties,final String rootPrefix,final String featureLocation) throws IOException {
  if (product instanceof IWARProduct) {
    IWARProduct warProduct=(IWARProduct)product;
    IWorkspaceRoot wsRoot=ResourcesPlugin.getWorkspace().getRoot();
    IFile launchIni=wsRoot.getFile(warProduct.getLaunchIni());
    String launchIniPath=createWarContent(launchIni.getLocation(),""String_Node_Str"",featureLocation);
    IFile webXml=wsRoot.getFile(warProduct.getWebXml());
    String webXmlPath=createWarContent(webXml.getLocation(),""String_Node_Str"",featureLocation);
    properties.put(rootPrefix,""String_Node_Str"" + webXmlPath + ""String_Node_Str""+ launchIniPath);
    String libDir=createLibDir(featureLocation);
    copyLibraries(libDir);
    properties.put(rootPrefix + ""String_Node_Str"" + ""String_Node_Str"",""String_Node_Str"" + libDir);
  }
}",0.9550827423167848
96432,"protected String[] getPaths(){
  String[] paths=super.getPaths();
  String[] all=new String[paths.length + 1];
  all[0]=featureLocation + File.separator + ICoreConstants.FEATURE_FILENAME_DESCRIPTOR;
  System.arraycopy(paths,0,all,1,paths.length);
  return all;
}","protected String[] getPaths(final String featureLocation){
  String[] paths=super.getPaths();
  String[] all=new String[paths.length + 1];
  all[0]=featureLocation + File.separator + ICoreConstants.FEATURE_FILENAME_DESCRIPTOR;
  System.arraycopy(paths,0,all,1,paths.length);
  return all;
}",0.9492753623188406
96433,"private String createLibDir() throws IOException {
  String location=featureLocation;
  File dir=new File(location,""String_Node_Str"");
  if (!dir.mkdirs()) {
    throw new IOException(Messages.creatorCouldntCopy + ""String_Node_Str"" + dir);
  }
  return dir.getAbsolutePath();
}","private static String createLibDir(final String featureLocation) throws IOException {
  String location=featureLocation;
  File dir=new File(location,""String_Node_Str"");
  if (!dir.mkdirs()) {
    throw new IOException(Messages.creatorCouldntCopy + ""String_Node_Str"" + dir);
  }
  return dir.getAbsolutePath();
}",0.9405772495755518
96434,"private String createWarContent(final IPath pathToContent,final String fileName) throws IOException {
  File destinationFile=new File(featureLocation,fileName);
  File template=new File(pathToContent.toOSString());
  CoreUtility.readFile(new FileInputStream(template),destinationFile);
  return destinationFile.getAbsolutePath();
}","private static String createWarContent(final IPath pathToContent,final String fileName,final String featureLocation) throws IOException {
  File destinationFile=new File(featureLocation,fileName);
  File template=new File(pathToContent.toOSString());
  CoreUtility.readFile(new FileInputStream(template),destinationFile);
  return destinationFile.getAbsolutePath();
}",0.9484240687679084
96435,"private void handleRootFiles(final String[][] configurations,final Properties properties) throws IOException {
  if (configurations.length > 0) {
    String rootPrefix=IBuildPropertiesConstants.ROOT_PREFIX + configurations[0][0] + ""String_Node_Str""+ configurations[0][1]+ ""String_Node_Str""+ configurations[0][2];
    properties.put(rootPrefix,getRootFileLocations(false));
    prepareWARFile(properties,rootPrefix);
  }
}","private void handleRootFiles(final String[][] configurations,final Properties properties,final String featureLocation) throws IOException {
  if (configurations.length > 0) {
    String rootPrefix=IBuildPropertiesConstants.ROOT_PREFIX + configurations[0][0] + ""String_Node_Str""+ configurations[0][1]+ ""String_Node_Str""+ configurations[0][2];
    properties.put(rootPrefix,getRootFileLocations(false));
    prepareWARFile(properties,rootPrefix,featureLocation);
  }
}",0.9492671927846674
96436,"@Override public void stop(BundleContext context) throws Exception {
  plugin=null;
  super.stop(context);
}","@Override public void stop(BundleContext context) throws Exception {
  super.stop(context);
}",0.9253731343283582
96437,"@Override public void start(BundleContext context) throws Exception {
  super.start(context);
  plugin=this;
}","@Override public void start(BundleContext context) throws Exception {
  super.start(context);
}",0.926829268292683
96438,"/** 
 * The constructor
 */
public FrameworkCorePlugin(){
  super();
  plugin=this;
}","/** 
 * The constructor
 */
public FrameworkCorePlugin(){
  super();
}",0.9032258064516128
96439,"/** 
 * Trace the given message and exception.
 * @param level a trace level
 * @param s a message
 * @param t a throwable
 */
private static void trace(String pluginId,int level,String s,Throwable t){
  if (pluginId == null || s == null)   return;
  if (!FrameworkCorePlugin.getDefault().isDebugging())   return;
  StringBuffer sb=new StringBuffer(pluginId);
  if (pluginId.length() > pluginLength)   pluginLength=pluginId.length();
 else   if (pluginId.length() < pluginLength)   sb.append(spacer.substring(0,pluginLength - pluginId.length()));
  sb.append(""String_Node_Str"");
  sb.append(levelNames[level]);
  sb.append(""String_Node_Str"");
  sb.append(sdf.format(new Date()));
  sb.append(""String_Node_Str"");
  sb.append(s);
  System.out.println(sb.toString());
  if (t != null)   t.printStackTrace();
}","/** 
 * Trace the given message and exception.
 * @param level a trace level
 * @param s a message
 * @param t a throwable
 */
private static void trace(String pluginId,int level,String s,Throwable t){
  if (pluginId == null || s == null)   return;
  if (!isTraceEnabled())   return;
  SimpleDateFormat sdf=new SimpleDateFormat(""String_Node_Str"");
  StringBuffer sb=new StringBuffer(pluginId);
  if (pluginId.length() > pluginLength)   pluginLength=pluginId.length();
 else   if (pluginId.length() < pluginLength)   sb.append(spacer.substring(0,pluginLength - pluginId.length()));
  sb.append(""String_Node_Str"");
  sb.append(levelNames[level]);
  sb.append(""String_Node_Str"");
  sb.append(sdf.format(new Date()));
  sb.append(""String_Node_Str"");
  sb.append(s);
  System.out.println(sb.toString());
  if (t != null)   t.printStackTrace();
}",0.9161603888213852
96440,"/** 
 * Gets state of debug flag for the plug-in.
 * @return true if tracing is enabled
 */
public static boolean isTraceEnabled(){
  return FrameworkCorePlugin.getDefault().isDebugging();
}","/** 
 * Gets state of debug flag for the plug-in.
 * @return true if tracing is enabled
 */
public static boolean isTraceEnabled(){
  return FrameworkCorePlugin.isTraceEnabled();
}",0.918918918918919
96441,"public EditorUIPlugin(){
  super();
  plugin=this;
}","public EditorUIPlugin(){
  super();
}",0.8314606741573034
96442,"/** 
 * Convenience method for logging.
 * @param status org.eclipse.core.runtime.IStatus
 */
public static void log(IStatus status){
  getInstance().getLog().log(status);
}","/** 
 * Convenience method for logging.
 * @param status org.eclipse.core.runtime.IStatus
 */
public static void log(IStatus status){
  Bundle bdl=FrameworkUtil.getBundle(EquinoxUIPlugin.class);
  ILog log=bdl == null ? null : Platform.getLog(bdl);
  if (log != null)   log.log(status);
}",0.6203904555314533
96443,"public EquinoxUIPlugin(){
  super();
  singleton=this;
}","public EquinoxUIPlugin(){
  super();
}",0.8085106382978723
96444,"@Override public void stop(BundleContext context) throws Exception {
  plugin=null;
  super.stop(context);
}","@Override public void stop(BundleContext context) throws Exception {
  super.stop(context);
}",0.9253731343283582
96445,"/** 
 * The constructor
 */
public EquinoxPlugin(){
  super();
  plugin=this;
}","/** 
 * The constructor
 */
public EquinoxPlugin(){
  super();
}",0.8951048951048951
96446,"@Override public void start(BundleContext context) throws Exception {
  super.start(context);
  plugin=this;
}","@Override public void start(BundleContext context) throws Exception {
  super.start(context);
}",0.926829268292683
96447,"public FelixUIPlugin(){
  super();
  singleton=this;
}","public FelixUIPlugin(){
  super();
}",0.8
96448,"/** 
 * Convenience method for logging.
 * @param status org.eclipse.core.runtime.IStatus
 */
public static void log(IStatus status){
  getInstance().getLog().log(status);
}","/** 
 * Convenience method for logging.
 * @param status org.eclipse.core.runtime.IStatus
 */
public static void log(IStatus status){
  Bundle bdl=FrameworkUtil.getBundle(FelixUIPlugin.class);
  ILog log=bdl == null ? null : Platform.getLog(bdl);
  if (log != null)   log.log(status);
}",0.6230936819172114
96449,"@Override public void stop(BundleContext context) throws Exception {
  plugin=null;
  super.stop(context);
}","@Override public void stop(BundleContext context) throws Exception {
  super.stop(context);
}",0.9253731343283582
96450,"@Override public void start(BundleContext context) throws Exception {
  super.start(context);
  plugin=this;
}","@Override public void start(BundleContext context) throws Exception {
  super.start(context);
}",0.926829268292683
96451,"/** 
 * The constructor
 */
public FelixPlugin(){
  super();
  plugin=this;
}","/** 
 * The constructor
 */
public FelixPlugin(){
  super();
}",0.8920863309352518
96452,"/** 
 * Create a new PingThread.
 * @param server
 * @param url
 * @param maxPings the maximum number of times to try pinging, or -1 to continue forever
 * @param behaviour
 */
public PingThread(ILaunch launch,IServer server,String url,int maxPings,OSGIFrameworkInstanceBehaviorDelegate behaviour){
  super();
  this.server=server;
  this.url=url;
  this.maxPings=maxPings;
  this.behaviour=behaviour;
  this.launch=launch;
  Thread t=new Thread(""String_Node_Str""){
    public void run(){
      ping();
    }
  }
;
  t.setDaemon(true);
  t.start();
}","/** 
 * Create a new PingThread.
 * @param server
 * @param url
 * @param maxPings the maximum number of times to try pinging, or -1 to continue forever
 * @param behaviour
 */
public PingThread(ILaunch launch,IServer server,String url,int maxPings,OSGIFrameworkInstanceBehaviorDelegate behaviour){
  super();
  this.server=server;
  this.maxPings=maxPings;
  this.behaviour=behaviour;
  this.launch=launch;
  Thread t=new Thread(""String_Node_Str""){
    public void run(){
      ping();
    }
  }
;
  t.setDaemon(true);
  t.start();
}",0.985239852398524
96453,"/** 
 * Ping the server until it is started. Then set the server state to STATE_STARTED.
 */
protected void ping(){
  int count=0;
  try {
    Thread.sleep(PING_DELAY);
  }
 catch (  Exception e) {
  }
  while (!stop) {
    try {
      if (count == maxPings) {
        try {
          server.stop(false);
        }
 catch (        Exception e) {
          Trace.trace(Trace.FINEST,""String_Node_Str"");
        }
        stop();
        break;
      }
      count++;
      if (launch.isTerminated()) {
        behaviour.stop(true);
        server.stop(true);
        stop=true;
        break;
      }
 else {
        Trace.trace(Trace.FINEST,""String_Node_Str"" + count);
        IProcess[] procs=launch.getProcesses();
        if (procs != null && procs.length > 0) {
          if (!procs[0].isTerminated()) {
            behaviour.setServerStarted();
            stop();
            break;
          }
        }
      }
    }
 catch (    Exception e) {
      Trace.trace(Trace.FINEST,""String_Node_Str"");
      if (!stop) {
        try {
          Thread.sleep(PING_INTERVAL);
        }
 catch (        InterruptedException e2) {
        }
      }
    }
  }
  stop=true;
}","/** 
 * Ping the server until it is started. Then set the server state to STATE_STARTED.
 */
protected void ping(){
  int count=0;
  try {
    Thread.sleep(PING_DELAY);
  }
 catch (  Exception e) {
  }
  while (!stop) {
    try {
      if (count == maxPings) {
        try {
          server.stop(false);
        }
 catch (        Exception e) {
          Trace.trace(Trace.FINEST,""String_Node_Str"");
        }
        stop();
        break;
      }
      count++;
      if (launch.isTerminated()) {
        behaviour.stop(true);
        server.stop(true);
        stop=true;
        break;
      }
      Trace.trace(Trace.FINEST,""String_Node_Str"" + count);
      IProcess[] procs=launch.getProcesses();
      if (procs != null && procs.length > 0) {
        if (!procs[0].isTerminated()) {
          behaviour.setServerStarted();
          stop();
          break;
        }
      }
    }
 catch (    Exception e) {
      Trace.trace(Trace.FINEST,""String_Node_Str"");
      if (!stop) {
        try {
          Thread.sleep(PING_INTERVAL);
        }
 catch (        InterruptedException e2) {
        }
      }
    }
  }
  stop=true;
}",0.9782986111111112
96454,"public void launch(ILaunchConfiguration configuration,String mode,ILaunch launch,IProgressMonitor monitor) throws CoreException {
  IServer server=ServerUtil.getServer(configuration);
  if (server == null) {
    Trace.trace(Trace.FINEST,""String_Node_Str"");
  }
  OSGIFrameworkInstanceBehaviorDelegate oribd=(OSGIFrameworkInstanceBehaviorDelegate)server.loadAdapter(OSGIFrameworkInstanceBehaviorDelegate.class,null);
  String mainTypeName=oribd.getFrameworkClass();
  IVMInstall vm=verifyVMInstall(configuration);
  IVMRunner runner=vm.getVMRunner(mode);
  if (runner == null)   runner=vm.getVMRunner(ILaunchManager.RUN_MODE);
  File workingDir=verifyWorkingDirectory(configuration);
  String workingDirName=null;
  if (workingDir != null)   workingDirName=workingDir.getAbsolutePath();
  String pgmArgs=getProgramArguments(configuration);
  String vmArgs=getVMArguments(configuration);
  String[] envp=getEnvironment(configuration);
  ExecutionArguments execArgs=new ExecutionArguments(vmArgs,pgmArgs);
  Map vmAttributesMap=getVMSpecificAttributesMap(configuration);
  String[] classpath=getClasspath(configuration);
  VMRunnerConfiguration runConfig=new VMRunnerConfiguration(mainTypeName,classpath);
  runConfig.setProgramArguments(execArgs.getProgramArgumentsArray());
  runConfig.setVMArguments(execArgs.getVMArgumentsArray());
  runConfig.setWorkingDirectory(workingDirName);
  runConfig.setEnvironment(envp);
  runConfig.setVMSpecificAttributesMap(vmAttributesMap);
  String[] bootpath=getBootpath(configuration);
  if (bootpath != null && bootpath.length > 0)   runConfig.setBootClassPath(bootpath);
  setDefaultSourceLocator(launch,configuration);
  if (ILaunchManager.PROFILE_MODE.equals(mode)) {
    try {
      ServerProfilerDelegate.configureProfiling(launch,vm,runConfig,monitor);
    }
 catch (    CoreException ce) {
      oribd.stopImpl();
      throw ce;
    }
  }
  oribd.setupLaunch(launch,mode,monitor);
  try {
    runner.run(runConfig,launch,monitor);
    oribd.addProcessListener(launch.getProcesses()[0]);
  }
 catch (  Exception e) {
    oribd.stopImpl();
  }
}","public void launch(ILaunchConfiguration configuration,String mode,ILaunch launch,IProgressMonitor monitor) throws CoreException {
  IServer server=ServerUtil.getServer(configuration);
  if (server == null) {
    Trace.trace(Trace.FINEST,""String_Node_Str"");
    return;
  }
  OSGIFrameworkInstanceBehaviorDelegate oribd=(OSGIFrameworkInstanceBehaviorDelegate)server.loadAdapter(OSGIFrameworkInstanceBehaviorDelegate.class,null);
  String mainTypeName=oribd.getFrameworkClass();
  IVMInstall vm=verifyVMInstall(configuration);
  IVMRunner runner=vm.getVMRunner(mode);
  if (runner == null)   runner=vm.getVMRunner(ILaunchManager.RUN_MODE);
  File workingDir=verifyWorkingDirectory(configuration);
  String workingDirName=null;
  if (workingDir != null)   workingDirName=workingDir.getAbsolutePath();
  String pgmArgs=getProgramArguments(configuration);
  String vmArgs=getVMArguments(configuration);
  String[] envp=getEnvironment(configuration);
  ExecutionArguments execArgs=new ExecutionArguments(vmArgs,pgmArgs);
  Map vmAttributesMap=getVMSpecificAttributesMap(configuration);
  String[] classpath=getClasspath(configuration);
  VMRunnerConfiguration runConfig=new VMRunnerConfiguration(mainTypeName,classpath);
  runConfig.setProgramArguments(execArgs.getProgramArgumentsArray());
  runConfig.setVMArguments(execArgs.getVMArgumentsArray());
  runConfig.setWorkingDirectory(workingDirName);
  runConfig.setEnvironment(envp);
  runConfig.setVMSpecificAttributesMap(vmAttributesMap);
  String[] bootpath=getBootpath(configuration);
  if (bootpath != null && bootpath.length > 0)   runConfig.setBootClassPath(bootpath);
  setDefaultSourceLocator(launch,configuration);
  if (ILaunchManager.PROFILE_MODE.equals(mode)) {
    try {
      ServerProfilerDelegate.configureProfiling(launch,vm,runConfig,monitor);
    }
 catch (    CoreException ce) {
      oribd.stopImpl();
      throw ce;
    }
  }
  oribd.setupLaunch(launch,mode,monitor);
  try {
    runner.run(runConfig,launch,monitor);
    oribd.addProcessListener(launch.getProcesses()[0]);
  }
 catch (  Exception e) {
    oribd.stopImpl();
  }
}",0.9971333014811276
96455,"@Override protected IModule[] createModules(IProject project){
  IVirtualComponent component=ComponentCore.createComponent(project);
  if (component == null) {
    component=new VirtualComponent(project,new Path(""String_Node_Str""));
  }
  if (component != null) {
    return createModuleDelegates(component);
  }
  return null;
}","@Override protected IModule[] createModules(IProject project){
  IVirtualComponent component=ComponentCore.createComponent(project);
  if (component == null) {
    component=new VirtualComponent(project,new Path(""String_Node_Str""));
  }
  return createModuleDelegates(component);
}",0.921311475409836
96456,"public TargetBundle[] getTargetBundles(FrameworkInstanceConfiguration config){
  List<String> all=new ArrayList<String>();
  ITargetDefinition targetDefinition=config.getTargetDefinition();
  targetDefinition.resolve(new NullProgressMonitor());
  TargetBundle[] targetBundles=targetDefinition.getBundles();
  return targetBundles;
}","public TargetBundle[] getTargetBundles(FrameworkInstanceConfiguration config){
  ITargetDefinition targetDefinition=config.getTargetDefinition();
  targetDefinition.resolve(new NullProgressMonitor());
  TargetBundle[] targetBundles=targetDefinition.getBundles();
  return targetBundles;
}",0.9290322580645162
96457,"public void exportBundles(List modules,FrameworkInstanceConfiguration config,final IPath location,final IPath tmpLocation){
  final FeatureExportInfo info=new FeatureExportInfo();
  info.toDirectory=true;
  info.useJarFormat=true;
  info.exportSource=true;
  info.exportSourceBundle=false;
  info.allowBinaryCycles=true;
  info.useWorkspaceCompiledClasses=true;
  info.destinationDirectory=tmpLocation == null ? location.makeAbsolute().toOSString() : tmpLocation.makeAbsolute().toOSString();
  List<Object> allWsBundles=new ArrayList<Object>();
  List<IProject> allBinBundles=new ArrayList<IProject>();
  for (  Object module : modules) {
    try {
      IModule[] moduleArr=(IModule[])module;
      for (      IModule iModule : moduleArr) {
        IProject project=iModule.getProject();
        IPluginModelBase pmb=PluginRegistry.findModel(project);
        ModelEntry entry=null;
        if (pmb != null)         entry=PluginRegistry.findEntry(pmb.getBundleDescription().getSymbolicName());
        if (!WorkspaceModelManager.isBinaryProject(project) && WorkspaceModelManager.isPluginProject(project)) {
          if (entry.getModel() != null && isValidModel(entry.getModel()) && hasBuildProperties((IPluginModelBase)entry.getModel())) {
            allWsBundles.add(entry.getModel());
          }
 else {
            allBinBundles.add(project);
          }
        }
 else         if (WorkspaceModelManager.isBinaryProject(project) && WorkspaceModelManager.isPluginProject(project)) {
          allBinBundles.add(project);
        }
      }
    }
 catch (    SecurityException e) {
      e.printStackTrace();
    }
catch (    IllegalArgumentException e) {
      e.printStackTrace();
    }
  }
  copyBinaryJars(allBinBundles,(tmpLocation == null ? location : tmpLocation));
  info.items=allWsBundles.toArray();
  info.signingInfo=null;
  info.qualifier=""String_Node_Str"";
  final PluginExportOperation job=new PluginExportOperation(info,PDEUIMessages.PluginExportJob_name);
  job.setUser(true);
  job.setRule(ResourcesPlugin.getWorkspace().getRoot());
  job.setProperty(IProgressConstants.ICON_PROPERTY,PDEPluginImages.DESC_PLUGIN_OBJ);
  job.addJobChangeListener(new JobChangeAdapter(){
    @Override public void done(    IJobChangeEvent event){
      if (event.getResult().isOK()) {
        try {
          if (tmpLocation != null) {
            File sourceFiles=tmpLocation.append(""String_Node_Str"").toFile();
            for (            File jars : sourceFiles.listFiles()) {
              File destFile=location.append(jars.getName()).toFile();
              if (!destFile.exists()) {
                destFile.createNewFile();
              }
              FileChannel source=null;
              FileChannel destination=null;
              try {
                source=new FileInputStream(jars).getChannel();
                destination=new FileOutputStream(destFile).getChannel();
                destination.transferFrom(source,0,source.size());
              }
  finally {
                if (source != null) {
                  source.close();
                }
                if (destination != null) {
                  destination.close();
                }
              }
            }
          }
 else {
          }
        }
 catch (        Exception e) {
        }
      }
    }
  }
);
  job.schedule();
}","public void exportBundles(List modules,FrameworkInstanceConfiguration config,final IPath location,final IPath tmpLocation){
  final FeatureExportInfo info=new FeatureExportInfo();
  info.toDirectory=true;
  info.useJarFormat=true;
  info.exportSource=true;
  info.exportSourceBundle=false;
  info.allowBinaryCycles=true;
  info.useWorkspaceCompiledClasses=true;
  info.destinationDirectory=tmpLocation == null ? location.makeAbsolute().toOSString() : tmpLocation.makeAbsolute().toOSString();
  List<Object> allWsBundles=new ArrayList<Object>();
  List<IProject> allBinBundles=new ArrayList<IProject>();
  for (  Object module : modules) {
    try {
      IModule[] moduleArr=(IModule[])module;
      for (      IModule iModule : moduleArr) {
        IProject project=iModule.getProject();
        IPluginModelBase pmb=PluginRegistry.findModel(project);
        ModelEntry entry=null;
        if (pmb != null)         entry=PluginRegistry.findEntry(pmb.getBundleDescription().getSymbolicName());
        if (!WorkspaceModelManager.isBinaryProject(project) && WorkspaceModelManager.isPluginProject(project)) {
          if (entry.getModel() != null && isValidModel(entry.getModel()) && hasBuildProperties((IPluginModelBase)entry.getModel())) {
            allWsBundles.add(entry.getModel());
          }
 else {
            allBinBundles.add(project);
          }
        }
 else         if (WorkspaceModelManager.isBinaryProject(project) && WorkspaceModelManager.isPluginProject(project)) {
          allBinBundles.add(project);
        }
      }
    }
 catch (    SecurityException e) {
      e.printStackTrace();
    }
catch (    IllegalArgumentException e) {
      e.printStackTrace();
    }
  }
  copyBinaryJars(allBinBundles,(tmpLocation == null ? location : tmpLocation));
  info.items=allWsBundles.toArray();
  info.signingInfo=null;
  info.qualifier=""String_Node_Str"";
  final PluginExportOperation job=new PluginExportOperation(info,PDEUIMessages.PluginExportJob_name);
  job.setUser(true);
  job.setRule(ResourcesPlugin.getWorkspace().getRoot());
  job.setProperty(IProgressConstants.ICON_PROPERTY,PDEPluginImages.DESC_PLUGIN_OBJ);
  job.addJobChangeListener(new JobChangeAdapter(){
    @Override public void done(    IJobChangeEvent event){
      if (event.getResult().isOK()) {
        try {
          if (tmpLocation != null) {
            File sourceFiles=tmpLocation.append(""String_Node_Str"").toFile();
            for (            File jars : sourceFiles.listFiles()) {
              File destFile=location.append(jars.getName()).toFile();
              if (!destFile.exists()) {
                destFile.createNewFile();
              }
              FileChannel source=null;
              FileChannel destination=null;
              try {
                source=new FileInputStream(jars).getChannel();
                destination=new FileOutputStream(destFile).getChannel();
                destination.transferFrom(source,0,source.size());
              }
  finally {
                if (source != null) {
                  source.close();
                }
                if (destination != null) {
                  destination.close();
                }
              }
            }
          }
        }
 catch (        Exception e) {
          e.printStackTrace();
        }
      }
    }
  }
);
  job.schedule();
}",0.9923526765632028
96458,"@Override public void done(IJobChangeEvent event){
  if (event.getResult().isOK()) {
    try {
      if (tmpLocation != null) {
        File sourceFiles=tmpLocation.append(""String_Node_Str"").toFile();
        for (        File jars : sourceFiles.listFiles()) {
          File destFile=location.append(jars.getName()).toFile();
          if (!destFile.exists()) {
            destFile.createNewFile();
          }
          FileChannel source=null;
          FileChannel destination=null;
          try {
            source=new FileInputStream(jars).getChannel();
            destination=new FileOutputStream(destFile).getChannel();
            destination.transferFrom(source,0,source.size());
          }
  finally {
            if (source != null) {
              source.close();
            }
            if (destination != null) {
              destination.close();
            }
          }
        }
      }
 else {
      }
    }
 catch (    Exception e) {
    }
  }
}","@Override public void done(IJobChangeEvent event){
  if (event.getResult().isOK()) {
    try {
      if (tmpLocation != null) {
        File sourceFiles=tmpLocation.append(""String_Node_Str"").toFile();
        for (        File jars : sourceFiles.listFiles()) {
          File destFile=location.append(jars.getName()).toFile();
          if (!destFile.exists()) {
            destFile.createNewFile();
          }
          FileChannel source=null;
          FileChannel destination=null;
          try {
            source=new FileInputStream(jars).getChannel();
            destination=new FileOutputStream(destFile).getChannel();
            destination.transferFrom(source,0,source.size());
          }
  finally {
            if (source != null) {
              source.close();
            }
            if (destination != null) {
              destination.close();
            }
          }
        }
      }
    }
 catch (    Exception e) {
      e.printStackTrace();
    }
  }
}",0.9709035222052068
96459,"protected void createBundleContent(Composite parent){
  mform=new ManagedForm(parent);
  setManagedForm(mform);
  sform=mform.getForm();
  FormToolkit toolkit=mform.getToolkit();
  sform.setText(""String_Node_Str"");
  sform.setImage(ServerUICore.getLabelProvider().getImage(getServer()));
  sform.setExpandHorizontal(true);
  sform.setExpandVertical(true);
  toolkit.decorateFormHeading(sform.getForm());
  Composite body=sform.getBody();
  GridLayout layout=new GridLayout(2,false);
  layout.marginHeight=0;
  layout.marginWidth=0;
  body.setLayout(layout);
  Composite configComposite=toolkit.createComposite(body);
  layout.marginLeft=6;
  layout.marginTop=6;
  layout.numColumns=2;
  configComposite.setLayoutData(new GridData(GridData.FILL_VERTICAL));
  configComposite.setLayout(layout);
  Section expandableComposite=toolkit.createSection(configComposite,ExpandableComposite.TITLE_BAR | ExpandableComposite.FOCUS_TITLE);
  layout=new GridLayout();
  expandableComposite.setLayout(layout);
  expandableComposite.setLayoutData(new GridData(GridData.VERTICAL_ALIGN_BEGINNING));
  expandableComposite.setFont(body.getFont());
  expandableComposite.setBackground(body.getBackground());
  expandableComposite.setText(""String_Node_Str"");
  Composite composite=toolkit.createComposite(expandableComposite,SWT.NONE);
  layout=new GridLayout();
  layout.numColumns=1;
  layout.marginHeight=0;
  layout.marginRight=0;
  composite.setLayout(layout);
  expandableComposite.setClient(composite);
  final Button servicesButton=toolkit.createButton(composite,""String_Node_Str"",SWT.RADIO);
  servicesButton.addSelectionListener(new SelectionAdapter(){
    @Override public void widgetSelected(    SelectionEvent e){
      contentProvider.setShowServices(servicesButton.getSelection());
      new BundleDependencyUpdateJob(false).schedule(200);
    }
  }
);
  final Button packagesButton=toolkit.createButton(composite,""String_Node_Str"",SWT.RADIO);
  packagesButton.addSelectionListener(new SelectionAdapter(){
    @Override public void widgetSelected(    SelectionEvent e){
      contentProvider.setShowPackage(packagesButton.getSelection());
      new BundleDependencyUpdateJob(false).schedule(200);
    }
  }
);
  packagesButton.setSelection(true);
  new Label(composite,SWT.NONE);
  Label dependenciesLabel=toolkit.createLabel(composite,""String_Node_Str"");
  dependenciesLabel.setForeground(toolkit.getColors().getColor(IFormColors.TITLE));
  toolkit.createLabel(composite,""String_Node_Str"");
  final Spinner incomingSpinner=new Spinner(composite,SWT.NONE);
  incomingSpinner.setMinimum(0);
  incomingSpinner.setIncrement(1);
  incomingSpinner.setMaximum(20);
  incomingSpinner.setSelection(1);
  GridData data=new GridData(GridData.HORIZONTAL_ALIGN_END);
  incomingSpinner.setLayoutData(data);
  incomingSpinner.addModifyListener(new ModifyListener(){
    public void modifyText(    ModifyEvent e){
      contentProvider.setIncomingDependencyDegree(incomingSpinner.getSelection());
      new BundleDependencyUpdateJob(false).schedule(200);
    }
  }
);
  toolkit.createLabel(composite,""String_Node_Str"");
  final Spinner outgoingSpinner=new Spinner(composite,SWT.NONE);
  outgoingSpinner.setMinimum(0);
  outgoingSpinner.setIncrement(1);
  outgoingSpinner.setMaximum(20);
  outgoingSpinner.setSelection(1);
  data=new GridData(GridData.HORIZONTAL_ALIGN_END);
  outgoingSpinner.setLayoutData(data);
  outgoingSpinner.addModifyListener(new ModifyListener(){
    public void modifyText(    ModifyEvent e){
      contentProvider.setOutgoingDependencyDegree(outgoingSpinner.getSelection());
      new BundleDependencyUpdateJob(false).schedule(200);
    }
  }
);
  Label separator=new Label(configComposite,SWT.NONE);
  separator.setForeground(toolkit.getColors().getColor(IFormColors.H_BOTTOM_KEYLINE1));
  data=new GridData(GridData.HORIZONTAL_ALIGN_END | GridData.FILL_VERTICAL);
  data.widthHint=1;
  separator.setLayoutData(data);
  toolkit.paintBordersFor(expandableComposite);
  layout=new GridLayout(2,false);
  layout.marginHeight=0;
  layout.marginWidth=0;
  body.setLayout(layout);
  viewer=new GraphViewer(body,SWT.NONE);
  viewer.getControl().setLayoutData(new GridData(SWT.FILL,SWT.FILL,true,true));
  viewer.setConnectionStyle(ZestStyles.CONNECTIONS_DIRECTED);
  CompositeLayoutAlgorithm layoutAlgorithm=new CompositeLayoutAlgorithm(LayoutStyles.NO_LAYOUT_NODE_RESIZING | LayoutStyles.ENFORCE_BOUNDS,new LayoutAlgorithm[]{new RadialLayoutAlgorithm(LayoutStyles.NO_LAYOUT_NODE_RESIZING | LayoutStyles.ENFORCE_BOUNDS),new HorizontalShift(LayoutStyles.NO_LAYOUT_NODE_RESIZING | LayoutStyles.ENFORCE_BOUNDS)});
  searchControl=new SearchControl(""String_Node_Str"",getManagedForm());
  contentProvider=new BundleDependencyContentProvider(viewer,searchControl);
  FocusedBundleDependencyLayoutAlgorithm la=new FocusedBundleDependencyLayoutAlgorithm(LayoutStyles.NO_LAYOUT_NODE_RESIZING | LayoutStyles.ENFORCE_BOUNDS,layoutAlgorithm,contentProvider);
  viewer.setLayoutAlgorithm(la);
  viewer.setContentProvider(contentProvider);
  viewer.addSelectionChangedListener(contentProvider);
  viewer.setFilters(new ViewerFilter[]{});
  labelProvider=new BundleDependencyLabelProvider(contentProvider,toolkit);
  viewer.setLabelProvider(labelProvider);
  viewer.addDoubleClickListener(new IDoubleClickListener(){
    public void doubleClick(    DoubleClickEvent event){
      Object selection=((IStructuredSelection)event.getSelection()).getFirstElement();
      if (selection instanceof IBundle) {
        IBundle bundle=(IBundle)selection;
        setSelection(bundle);
      }
    }
  }
);
  toolBarManager=sform.getToolBarManager();
  toolBarManager.add(searchControl);
  backAction=new Action(""String_Node_Str""){
    @Override public void run(){
      searchControl.getSearchText().setText(history.back());
      setEnabled(history.canBack());
      forwardAction.setEnabled(history.canForward());
      toolBarManager.update(true);
      new BundleDependencyUpdateJob(true).schedule();
    }
  }
;
  backAction.setImageDescriptor(ImageResource.getImageDescriptor(org.eclipse.ui.internal.browser.ImageResource.IMG_ELCL_NAV_BACKWARD));
  backAction.setHoverImageDescriptor(ImageResource.getImageDescriptor(ImageResource.IMG_CLCL_NAV_BACKWARD));
  backAction.setDisabledImageDescriptor(ImageResource.getImageDescriptor(ImageResource.IMG_DLCL_NAV_BACKWARD));
  backAction.setEnabled(false);
  toolBarManager.add(backAction);
  forwardAction=new Action(""String_Node_Str""){
    @Override public void run(){
      searchControl.getSearchText().setText(history.forward());
      setEnabled(history.canForward());
      backAction.setEnabled(history.canBack());
      toolBarManager.update(true);
      new BundleDependencyUpdateJob(true).schedule();
    }
  }
;
  forwardAction.setImageDescriptor(ImageResource.getImageDescriptor(ImageResource.IMG_ELCL_NAV_FORWARD));
  forwardAction.setHoverImageDescriptor(ImageResource.getImageDescriptor(ImageResource.IMG_CLCL_NAV_FORWARD));
  forwardAction.setDisabledImageDescriptor(ImageResource.getImageDescriptor(ImageResource.IMG_DLCL_NAV_FORWARD));
  forwardAction.setEnabled(false);
  toolBarManager.add(forwardAction);
  refreshAction=new Action(""String_Node_Str"",ImageResource.getImageDescriptor(ImageResource.IMG_ELCL_NAV_REFRESH)){
    @Override public void run(){
      IRunnableWithProgress runnable=new IRunnableWithProgress(){
        public void run(        final IProgressMonitor monitor) throws InvocationTargetException, InterruptedException {
          monitor.beginTask(""String_Node_Str"",1);
          Display.getDefault().asyncExec(new Runnable(){
            public void run(){
              clearStatus();
              IOSGiFrameworkAdmin admin=(IOSGiFrameworkAdmin)getServer().getOriginal().loadAdapter(IOSGiFrameworkAdmin.class,monitor);
              if (admin == null) {
                IStatus status=EditorUIPlugin.newErrorStatus(""String_Node_Str"");
                EditorUIPlugin.log(status);
                setStatus(status);
              }
              try {
                Map<Long,IBundle> allBundles=admin.getBundles(monitor);
                refresh(allBundles);
              }
 catch (              CoreException e) {
                EditorUIPlugin.log(e);
                setStatus(e.getStatus());
              }
            }
          }
);
          monitor.worked(1);
        }
      }
;
      try {
        IRunnableContext context=new ProgressMonitorDialog(Display.getCurrent().getActiveShell());
        context.run(true,true,runnable);
      }
 catch (      InvocationTargetException e1) {
      }
catch (      InterruptedException e2) {
      }
    }
  }
;
  toolBarManager.add(refreshAction);
  sform.updateToolBar();
  initPopupMenu();
  searchControl.getSearchText().addKeyListener(new KeyListener(){
    public void keyPressed(    KeyEvent e){
      if (e.character == SWT.CR || e.character == SWT.LF) {
        if (!""String_Node_Str"".equals(searchControl.getSearchText().getText())) {
          history.add(searchControl.getSearchText().getText());
          forwardAction.setEnabled(history.canForward());
          backAction.setEnabled(history.canBack());
          toolBarManager.update(true);
          new BundleDependencyUpdateJob(true).schedule();
        }
      }
    }
    public void keyReleased(    KeyEvent e){
    }
  }
);
  searchControl.getSearchText().addModifyListener(new ModifyListener(){
    public void modifyText(    ModifyEvent e){
      if (""String_Node_Str"".equals(searchControl.getSearchText().getText())) {
        new BundleDependencyUpdateJob(true).schedule();
      }
    }
  }
);
}","protected void createBundleContent(Composite parent){
  mform=new ManagedForm(parent);
  setManagedForm(mform);
  sform=mform.getForm();
  FormToolkit toolkit=mform.getToolkit();
  sform.setText(""String_Node_Str"");
  sform.setImage(ServerUICore.getLabelProvider().getImage(getServer()));
  sform.setExpandHorizontal(true);
  sform.setExpandVertical(true);
  toolkit.decorateFormHeading(sform.getForm());
  Composite body=sform.getBody();
  GridLayout layout=new GridLayout(2,false);
  layout.marginHeight=0;
  layout.marginWidth=0;
  body.setLayout(layout);
  Composite configComposite=toolkit.createComposite(body);
  layout.marginLeft=6;
  layout.marginTop=6;
  layout.numColumns=2;
  configComposite.setLayoutData(new GridData(GridData.FILL_VERTICAL));
  configComposite.setLayout(layout);
  Section expandableComposite=toolkit.createSection(configComposite,ExpandableComposite.TITLE_BAR | ExpandableComposite.FOCUS_TITLE);
  layout=new GridLayout();
  expandableComposite.setLayout(layout);
  expandableComposite.setLayoutData(new GridData(GridData.VERTICAL_ALIGN_BEGINNING));
  expandableComposite.setFont(body.getFont());
  expandableComposite.setBackground(body.getBackground());
  expandableComposite.setText(""String_Node_Str"");
  Composite composite=toolkit.createComposite(expandableComposite,SWT.NONE);
  layout=new GridLayout();
  layout.numColumns=1;
  layout.marginHeight=0;
  layout.marginRight=0;
  composite.setLayout(layout);
  expandableComposite.setClient(composite);
  final Button servicesButton=toolkit.createButton(composite,""String_Node_Str"",SWT.RADIO);
  servicesButton.addSelectionListener(new SelectionAdapter(){
    @Override public void widgetSelected(    SelectionEvent e){
      contentProvider.setShowServices(servicesButton.getSelection());
      new BundleDependencyUpdateJob(false).schedule(200);
    }
  }
);
  final Button packagesButton=toolkit.createButton(composite,""String_Node_Str"",SWT.RADIO);
  packagesButton.addSelectionListener(new SelectionAdapter(){
    @Override public void widgetSelected(    SelectionEvent e){
      contentProvider.setShowPackage(packagesButton.getSelection());
      new BundleDependencyUpdateJob(false).schedule(200);
    }
  }
);
  packagesButton.setSelection(true);
  new Label(composite,SWT.NONE);
  Label dependenciesLabel=toolkit.createLabel(composite,""String_Node_Str"");
  dependenciesLabel.setForeground(toolkit.getColors().getColor(IFormColors.TITLE));
  toolkit.createLabel(composite,""String_Node_Str"");
  final Spinner incomingSpinner=new Spinner(composite,SWT.NONE);
  incomingSpinner.setMinimum(0);
  incomingSpinner.setIncrement(1);
  incomingSpinner.setMaximum(20);
  incomingSpinner.setSelection(1);
  GridData data=new GridData(GridData.HORIZONTAL_ALIGN_END);
  incomingSpinner.setLayoutData(data);
  incomingSpinner.addModifyListener(new ModifyListener(){
    public void modifyText(    ModifyEvent e){
      contentProvider.setIncomingDependencyDegree(incomingSpinner.getSelection());
      new BundleDependencyUpdateJob(false).schedule(200);
    }
  }
);
  toolkit.createLabel(composite,""String_Node_Str"");
  final Spinner outgoingSpinner=new Spinner(composite,SWT.NONE);
  outgoingSpinner.setMinimum(0);
  outgoingSpinner.setIncrement(1);
  outgoingSpinner.setMaximum(20);
  outgoingSpinner.setSelection(1);
  data=new GridData(GridData.HORIZONTAL_ALIGN_END);
  outgoingSpinner.setLayoutData(data);
  outgoingSpinner.addModifyListener(new ModifyListener(){
    public void modifyText(    ModifyEvent e){
      contentProvider.setOutgoingDependencyDegree(outgoingSpinner.getSelection());
      new BundleDependencyUpdateJob(false).schedule(200);
    }
  }
);
  Label separator=new Label(configComposite,SWT.NONE);
  separator.setForeground(toolkit.getColors().getColor(IFormColors.H_BOTTOM_KEYLINE1));
  data=new GridData(GridData.HORIZONTAL_ALIGN_END | GridData.FILL_VERTICAL);
  data.widthHint=1;
  separator.setLayoutData(data);
  toolkit.paintBordersFor(expandableComposite);
  layout=new GridLayout(2,false);
  layout.marginHeight=0;
  layout.marginWidth=0;
  body.setLayout(layout);
  viewer=new GraphViewer(body,SWT.NONE);
  viewer.getControl().setLayoutData(new GridData(SWT.FILL,SWT.FILL,true,true));
  viewer.setConnectionStyle(ZestStyles.CONNECTIONS_DIRECTED);
  CompositeLayoutAlgorithm layoutAlgorithm=new CompositeLayoutAlgorithm(LayoutStyles.NO_LAYOUT_NODE_RESIZING | LayoutStyles.ENFORCE_BOUNDS,new LayoutAlgorithm[]{new RadialLayoutAlgorithm(LayoutStyles.NO_LAYOUT_NODE_RESIZING | LayoutStyles.ENFORCE_BOUNDS),new HorizontalShift(LayoutStyles.NO_LAYOUT_NODE_RESIZING | LayoutStyles.ENFORCE_BOUNDS)});
  searchControl=new SearchControl(""String_Node_Str"",getManagedForm());
  contentProvider=new BundleDependencyContentProvider(viewer,searchControl);
  FocusedBundleDependencyLayoutAlgorithm la=new FocusedBundleDependencyLayoutAlgorithm(LayoutStyles.NO_LAYOUT_NODE_RESIZING | LayoutStyles.ENFORCE_BOUNDS,layoutAlgorithm,contentProvider);
  viewer.setLayoutAlgorithm(la);
  viewer.setContentProvider(contentProvider);
  viewer.addSelectionChangedListener(contentProvider);
  viewer.setFilters(new ViewerFilter[]{});
  labelProvider=new BundleDependencyLabelProvider(contentProvider,toolkit);
  viewer.setLabelProvider(labelProvider);
  viewer.addDoubleClickListener(new IDoubleClickListener(){
    public void doubleClick(    DoubleClickEvent event){
      Object selection=((IStructuredSelection)event.getSelection()).getFirstElement();
      if (selection instanceof IBundle) {
        IBundle bundle=(IBundle)selection;
        setSelection(bundle);
      }
    }
  }
);
  toolBarManager=sform.getToolBarManager();
  toolBarManager.add(searchControl);
  backAction=new Action(""String_Node_Str""){
    @Override public void run(){
      searchControl.getSearchText().setText(history.back());
      setEnabled(history.canBack());
      forwardAction.setEnabled(history.canForward());
      toolBarManager.update(true);
      new BundleDependencyUpdateJob(true).schedule();
    }
  }
;
  backAction.setImageDescriptor(ImageResource.getImageDescriptor(org.eclipse.ui.internal.browser.ImageResource.IMG_ELCL_NAV_BACKWARD));
  backAction.setHoverImageDescriptor(ImageResource.getImageDescriptor(ImageResource.IMG_CLCL_NAV_BACKWARD));
  backAction.setDisabledImageDescriptor(ImageResource.getImageDescriptor(ImageResource.IMG_DLCL_NAV_BACKWARD));
  backAction.setEnabled(false);
  toolBarManager.add(backAction);
  forwardAction=new Action(""String_Node_Str""){
    @Override public void run(){
      searchControl.getSearchText().setText(history.forward());
      setEnabled(history.canForward());
      backAction.setEnabled(history.canBack());
      toolBarManager.update(true);
      new BundleDependencyUpdateJob(true).schedule();
    }
  }
;
  forwardAction.setImageDescriptor(ImageResource.getImageDescriptor(ImageResource.IMG_ELCL_NAV_FORWARD));
  forwardAction.setHoverImageDescriptor(ImageResource.getImageDescriptor(ImageResource.IMG_CLCL_NAV_FORWARD));
  forwardAction.setDisabledImageDescriptor(ImageResource.getImageDescriptor(ImageResource.IMG_DLCL_NAV_FORWARD));
  forwardAction.setEnabled(false);
  toolBarManager.add(forwardAction);
  refreshAction=new Action(""String_Node_Str"",ImageResource.getImageDescriptor(ImageResource.IMG_ELCL_NAV_REFRESH)){
    @Override public void run(){
      IRunnableWithProgress runnable=new IRunnableWithProgress(){
        public void run(        final IProgressMonitor monitor) throws InvocationTargetException, InterruptedException {
          monitor.beginTask(""String_Node_Str"",1);
          Display.getDefault().asyncExec(new Runnable(){
            public void run(){
              clearStatus();
              IOSGiFrameworkAdmin admin=(IOSGiFrameworkAdmin)getServer().getOriginal().loadAdapter(IOSGiFrameworkAdmin.class,monitor);
              if (admin == null) {
                IStatus status=EditorUIPlugin.newErrorStatus(""String_Node_Str"");
                EditorUIPlugin.log(status);
                setStatus(status);
                return;
              }
              try {
                Map<Long,IBundle> allBundles=admin.getBundles(monitor);
                refresh(allBundles);
              }
 catch (              CoreException e) {
                EditorUIPlugin.log(e);
                setStatus(e.getStatus());
              }
            }
          }
);
          monitor.worked(1);
        }
      }
;
      try {
        IRunnableContext context=new ProgressMonitorDialog(Display.getCurrent().getActiveShell());
        context.run(true,true,runnable);
      }
 catch (      InvocationTargetException e1) {
      }
catch (      InterruptedException e2) {
      }
    }
  }
;
  toolBarManager.add(refreshAction);
  sform.updateToolBar();
  initPopupMenu();
  searchControl.getSearchText().addKeyListener(new KeyListener(){
    public void keyPressed(    KeyEvent e){
      if (e.character == SWT.CR || e.character == SWT.LF) {
        if (!""String_Node_Str"".equals(searchControl.getSearchText().getText())) {
          history.add(searchControl.getSearchText().getText());
          forwardAction.setEnabled(history.canForward());
          backAction.setEnabled(history.canBack());
          toolBarManager.update(true);
          new BundleDependencyUpdateJob(true).schedule();
        }
      }
    }
    public void keyReleased(    KeyEvent e){
    }
  }
);
  searchControl.getSearchText().addModifyListener(new ModifyListener(){
    public void modifyText(    ModifyEvent e){
      if (""String_Node_Str"".equals(searchControl.getSearchText().getText())) {
        new BundleDependencyUpdateJob(true).schedule();
      }
    }
  }
);
}",0.998751040799334
96460,"/** 
 * Converts an IStatus message type to Form message type. 
 */
private int getMessageType(IStatus status){
switch (status.getSeverity()) {
case IStatus.ERROR:
    return IMessageProvider.ERROR;
case IStatus.WARNING:
  return IMessageProvider.WARNING;
case IStatus.INFO:
return IMessageProvider.INFORMATION;
default :
return IMessageProvider.NONE;
}
}","/** 
 * Converts an IStatus message type to Form message type. 
 */
private static int getMessageType(IStatus status){
switch (status.getSeverity()) {
case IStatus.ERROR:
    return IMessageProvider.ERROR;
case IStatus.WARNING:
  return IMessageProvider.WARNING;
case IStatus.INFO:
return IMessageProvider.INFORMATION;
default :
return IMessageProvider.NONE;
}
}",0.99023709902371
96461,"public StartServerAction(String launchMode){
  this.launchMode=launchMode;
  if (launchMode == ILaunchManager.RUN_MODE) {
    setToolTipText(Messages.actionStartToolTip);
    setText(Messages.actionStart);
    setImageDescriptor(ImageResource.getImageDescriptor(ImageResource.IMG_ELCL_START));
    setHoverImageDescriptor(ImageResource.getImageDescriptor(ImageResource.IMG_CLCL_START));
    setDisabledImageDescriptor(ImageResource.getImageDescriptor(ImageResource.IMG_DLCL_START));
  }
 else   if (launchMode == ILaunchManager.DEBUG_MODE) {
    setToolTipText(Messages.actionDebugToolTip);
    setText(Messages.actionDebug);
    setImageDescriptor(ImageResource.getImageDescriptor(ImageResource.IMG_ELCL_START_DEBUG));
    setHoverImageDescriptor(ImageResource.getImageDescriptor(ImageResource.IMG_CLCL_START_DEBUG));
    setDisabledImageDescriptor(ImageResource.getImageDescriptor(ImageResource.IMG_DLCL_START_DEBUG));
  }
}","public StartServerAction(String launchMode){
  this.launchMode=launchMode;
  if (ILaunchManager.RUN_MODE.equals(launchMode)) {
    setToolTipText(Messages.actionStartToolTip);
    setText(Messages.actionStart);
    setImageDescriptor(ImageResource.getImageDescriptor(ImageResource.IMG_ELCL_START));
    setHoverImageDescriptor(ImageResource.getImageDescriptor(ImageResource.IMG_CLCL_START));
    setDisabledImageDescriptor(ImageResource.getImageDescriptor(ImageResource.IMG_DLCL_START));
  }
 else   if (ILaunchManager.DEBUG_MODE.equals(launchMode)) {
    setToolTipText(Messages.actionDebugToolTip);
    setText(Messages.actionDebug);
    setImageDescriptor(ImageResource.getImageDescriptor(ImageResource.IMG_ELCL_START_DEBUG));
    setHoverImageDescriptor(ImageResource.getImageDescriptor(ImageResource.IMG_CLCL_START_DEBUG));
    setDisabledImageDescriptor(ImageResource.getImageDescriptor(ImageResource.IMG_DLCL_START_DEBUG));
  }
}",0.9645542427497314
96462,"private Set<IBundle> addOutgoingPackageDependencies(Set<BundleDependency> dependencies,IBundle bundle,int degree,Set<IBundle> processedBundles){
  if (processedBundles.contains(bundle)) {
    return Collections.emptySet();
  }
  processedBundles.add(bundle);
  Set<IBundle> dependentBundles=new HashSet<IBundle>();
  if (outgoingDependencyDegree >= degree) {
    for (    IPackageImport pe : bundle.getPackageImports()) {
      IBundle dependantBundle=this.bundles.get(Long.valueOf(pe.getSupplierId()));
      if (dependantBundle == null) {
        continue;
      }
      Set<BundleDependency> bundleDependencies=null;
      if (dependenciesByBundle.containsKey(bundle)) {
        bundleDependencies=dependenciesByBundle.get(bundle);
      }
 else {
        bundleDependencies=new HashSet<BundleDependency>();
        dependenciesByBundle.put(bundle,bundleDependencies);
      }
      PackageBundleDependency bundleDependency=null;
      for (      BundleDependency dep : bundleDependencies) {
        if (dep.getExportingBundle().equals(dependantBundle) && dep instanceof PackageBundleDependency) {
          bundleDependency=(PackageBundleDependency)dep;
          break;
        }
      }
      if (bundleDependency == null) {
        bundleDependency=new PackageBundleDependency(dependantBundle,bundle);
        bundleDependencies.add(bundleDependency);
        dependencies.add(bundleDependency);
      }
      contentResult.addOutgoingDependency(degree,dependantBundle);
      bundleDependency.addPackageImport(pe);
      dependentBundles.add(dependantBundle);
    }
  }
  if (outgoingDependencyDegree > degree) {
    return dependentBundles;
  }
  return Collections.emptySet();
}","private Set<IBundle> addOutgoingPackageDependencies(Set<BundleDependency> dependencies,IBundle bundle,int degree,Set<IBundle> processedBundles){
  if (processedBundles.contains(bundle)) {
    return Collections.emptySet();
  }
  processedBundles.add(bundle);
  Set<IBundle> dependentBundles=new HashSet<IBundle>();
  if (outgoingDependencyDegree >= degree) {
    for (    IPackageImport pe : bundle.getPackageImports()) {
      IBundle dependantBundle=this.bundles.get(Long.valueOf(pe.getSupplierId()));
      if (dependantBundle == null) {
        continue;
      }
      Set<BundleDependency> bundleDependencies=null;
      if (dependenciesByBundle.containsKey(bundle)) {
        bundleDependencies=dependenciesByBundle.get(bundle);
      }
 else {
        bundleDependencies=new HashSet<BundleDependency>();
        dependenciesByBundle.put(bundle,bundleDependencies);
      }
      PackageBundleDependency bundleDependency=null;
      for (      BundleDependency dep : bundleDependencies) {
        if (dep.getExportingBundle().equals(dependantBundle) && dep instanceof PackageBundleDependency) {
          bundleDependency=(PackageBundleDependency)dep;
          break;
        }
      }
      if (bundleDependency == null) {
        bundleDependency=new PackageBundleDependency(dependantBundle,bundle);
        bundleDependencies.add(bundleDependency);
        dependencies.add(bundleDependency);
      }
      contentResult.addOutgoingDependency(Integer.valueOf(degree),dependantBundle);
      bundleDependency.addPackageImport(pe);
      dependentBundles.add(dependantBundle);
    }
  }
  if (outgoingDependencyDegree > degree) {
    return dependentBundles;
  }
  return Collections.emptySet();
}",0.9914529914529916
96463,"private Set<IBundle> addIncomingPackageDependencies(Set<BundleDependency> dependencies,IBundle bundle,int degree,Set<IBundle> processedBundles){
  if (processedBundles.contains(bundle)) {
    return Collections.emptySet();
  }
  processedBundles.add(bundle);
  Set<IBundle> dependentBundles=new HashSet<IBundle>();
  if (incomingDependencyDegree >= degree) {
    String id=bundle.getId();
    for (    IBundle dependantBundle : this.bundles.values()) {
      for (      IPackageImport packageImport : dependantBundle.getPackageImports()) {
        if (packageImport.getSupplierId().equals(id)) {
          Set<BundleDependency> bundleDependencies=null;
          if (dependenciesByBundle.containsKey(dependantBundle)) {
            bundleDependencies=dependenciesByBundle.get(dependantBundle);
          }
 else {
            bundleDependencies=new HashSet<BundleDependency>();
            dependenciesByBundle.put(dependantBundle,bundleDependencies);
          }
          PackageBundleDependency bundleDependency=null;
          for (          BundleDependency dep : bundleDependencies) {
            if (dep.getExportingBundle().equals(bundle) && dep instanceof PackageBundleDependency) {
              bundleDependency=(PackageBundleDependency)dep;
              break;
            }
          }
          if (bundleDependency == null) {
            bundleDependency=new PackageBundleDependency(bundle,dependantBundle);
            bundleDependencies.add(bundleDependency);
            dependencies.add(bundleDependency);
          }
          contentResult.addIncomingDependency(degree,dependantBundle);
          bundleDependency.addPackageImport(packageImport);
          dependentBundles.add(dependantBundle);
        }
      }
    }
  }
  if (incomingDependencyDegree > degree) {
    return dependentBundles;
  }
  return Collections.emptySet();
}","private Set<IBundle> addIncomingPackageDependencies(Set<BundleDependency> dependencies,IBundle bundle,int degree,Set<IBundle> processedBundles){
  if (processedBundles.contains(bundle)) {
    return Collections.emptySet();
  }
  processedBundles.add(bundle);
  Set<IBundle> dependentBundles=new HashSet<IBundle>();
  if (incomingDependencyDegree >= degree) {
    String id=bundle.getId();
    for (    IBundle dependantBundle : this.bundles.values()) {
      for (      IPackageImport packageImport : dependantBundle.getPackageImports()) {
        if (packageImport.getSupplierId().equals(id)) {
          Set<BundleDependency> bundleDependencies=null;
          if (dependenciesByBundle.containsKey(dependantBundle)) {
            bundleDependencies=dependenciesByBundle.get(dependantBundle);
          }
 else {
            bundleDependencies=new HashSet<BundleDependency>();
            dependenciesByBundle.put(dependantBundle,bundleDependencies);
          }
          PackageBundleDependency bundleDependency=null;
          for (          BundleDependency dep : bundleDependencies) {
            if (dep.getExportingBundle().equals(bundle) && dep instanceof PackageBundleDependency) {
              bundleDependency=(PackageBundleDependency)dep;
              break;
            }
          }
          if (bundleDependency == null) {
            bundleDependency=new PackageBundleDependency(bundle,dependantBundle);
            bundleDependencies.add(bundleDependency);
            dependencies.add(bundleDependency);
          }
          contentResult.addIncomingDependency(Integer.valueOf(degree),dependantBundle);
          bundleDependency.addPackageImport(packageImport);
          dependentBundles.add(dependantBundle);
        }
      }
    }
  }
  if (incomingDependencyDegree > degree) {
    return dependentBundles;
  }
  return Collections.emptySet();
}",0.9922231161169214
96464,"private Set<IBundle> addIncomingServiceDependencies(Set<BundleDependency> dependencies,IBundle bundle,int degree,Set<IBundle> processedBundles){
  if (processedBundles.contains(bundle)) {
    return Collections.emptySet();
  }
  processedBundles.add(bundle);
  Set<IBundle> dependentBundles=new HashSet<IBundle>();
  if (incomingDependencyDegree >= degree) {
    for (    IServiceReference pe : bundle.getRegisteredServices()) {
      for (      Long id : pe.getUsingBundleIds()) {
        IBundle dependantBundle=this.bundles.get(id);
        Set<BundleDependency> bundleDependencies=null;
        if (dependenciesByBundle.containsKey(bundle)) {
          bundleDependencies=dependenciesByBundle.get(bundle);
        }
 else {
          bundleDependencies=new HashSet<BundleDependency>();
          dependenciesByBundle.put(bundle,bundleDependencies);
        }
        ServiceReferenceBundleDependency bundleDependency=null;
        for (        BundleDependency dep : bundleDependencies) {
          if (dep.getExportingBundle().equals(dependantBundle) && dep instanceof ServiceReferenceBundleDependency) {
            bundleDependency=(ServiceReferenceBundleDependency)dep;
            break;
          }
        }
        if (bundleDependency == null) {
          bundleDependency=new ServiceReferenceBundleDependency(bundle,dependantBundle);
          bundleDependencies.add(bundleDependency);
          dependencies.add(bundleDependency);
        }
        contentResult.addIncomingDependency(degree,dependantBundle);
        bundleDependency.addServiceReferece(pe);
        dependentBundles.add(dependantBundle);
      }
    }
  }
  if (incomingDependencyDegree > degree) {
    return dependentBundles;
  }
  return Collections.emptySet();
}","private Set<IBundle> addIncomingServiceDependencies(Set<BundleDependency> dependencies,IBundle bundle,int degree,Set<IBundle> processedBundles){
  if (processedBundles.contains(bundle)) {
    return Collections.emptySet();
  }
  processedBundles.add(bundle);
  Set<IBundle> dependentBundles=new HashSet<IBundle>();
  if (incomingDependencyDegree >= degree) {
    for (    IServiceReference pe : bundle.getRegisteredServices()) {
      for (      Long id : pe.getUsingBundleIds()) {
        IBundle dependantBundle=this.bundles.get(id);
        Set<BundleDependency> bundleDependencies=null;
        if (dependenciesByBundle.containsKey(bundle)) {
          bundleDependencies=dependenciesByBundle.get(bundle);
        }
 else {
          bundleDependencies=new HashSet<BundleDependency>();
          dependenciesByBundle.put(bundle,bundleDependencies);
        }
        ServiceReferenceBundleDependency bundleDependency=null;
        for (        BundleDependency dep : bundleDependencies) {
          if (dep.getExportingBundle().equals(dependantBundle) && dep instanceof ServiceReferenceBundleDependency) {
            bundleDependency=(ServiceReferenceBundleDependency)dep;
            break;
          }
        }
        if (bundleDependency == null) {
          bundleDependency=new ServiceReferenceBundleDependency(bundle,dependantBundle);
          bundleDependencies.add(bundleDependency);
          dependencies.add(bundleDependency);
        }
        contentResult.addIncomingDependency(Integer.valueOf(degree),dependantBundle);
        bundleDependency.addServiceReferece(pe);
        dependentBundles.add(dependantBundle);
      }
    }
  }
  if (incomingDependencyDegree > degree) {
    return dependentBundles;
  }
  return Collections.emptySet();
}",0.9917496443812234
96465,"@SuppressWarnings(""String_Node_Str"") public void selectionChanged(SelectionChangedEvent event){
  for (  BundleDependency dep : selectedDependencies) {
    viewer.unReveal(dep);
  }
  selectedDependencies=new HashSet<BundleDependency>();
  Set<Object> newSelection=new HashSet<Object>();
  Iterator<Object> iterator=((IStructuredSelection)event.getSelection()).iterator();
  while (iterator.hasNext()) {
    Object selectedObject=iterator.next();
    if (selectedObject instanceof IBundle) {
      newSelection.add(selectedObject);
      if (dependenciesByBundle.containsKey(selectedObject)) {
        for (        BundleDependency dep : dependenciesByBundle.get(selectedObject)) {
          selectedDependencies.add(dep);
          newSelection.add(dep.getExportingBundle());
        }
      }
    }
 else     if (selectedObject instanceof BundleDependency) {
      BundleDependency dep=(BundleDependency)selectedObject;
      selectedDependencies.add(dep);
      newSelection.add(dep.getExportingBundle());
      newSelection.add(dep.getImportingBundle());
    }
  }
  for (  Object node : viewer.getNodeElements()) {
    viewer.update(node,null);
  }
  for (  Object connection : viewer.getConnectionElements()) {
    viewer.update(connection,null);
  }
  for (  BundleDependency dep : selectedDependencies) {
    viewer.reveal(dep);
  }
}","@SuppressWarnings(""String_Node_Str"") public void selectionChanged(SelectionChangedEvent event){
  for (  BundleDependency dep : selectedDependencies) {
    viewer.unReveal(dep);
  }
  selectedDependencies=new HashSet<BundleDependency>();
  Iterator<Object> iterator=((IStructuredSelection)event.getSelection()).iterator();
  while (iterator.hasNext()) {
    Object selectedObject=iterator.next();
    if (selectedObject instanceof IBundle) {
      if (dependenciesByBundle.containsKey(selectedObject)) {
        for (        BundleDependency dep : dependenciesByBundle.get(selectedObject)) {
          selectedDependencies.add(dep);
        }
      }
    }
 else     if (selectedObject instanceof BundleDependency) {
      BundleDependency dep=(BundleDependency)selectedObject;
      selectedDependencies.add(dep);
    }
  }
  for (  Object node : viewer.getNodeElements()) {
    viewer.update(node,null);
  }
  for (  Object connection : viewer.getConnectionElements()) {
    viewer.update(connection,null);
  }
  for (  BundleDependency dep : selectedDependencies) {
    viewer.reveal(dep);
  }
}",0.340983606557377
96466,"@SuppressWarnings({""String_Node_Str""}) public Object[] getElements(Object input){
  if (input instanceof Collection) {
    dependenciesByBundle=new HashMap<IBundle,Set<BundleDependency>>();
    Set<IBundle> bundles=new HashSet<IBundle>((Collection<IBundle>)input);
    if (!""String_Node_Str"".equals(searchControl.getSearchText().getText()) && searchControl.getSearchText().getText().trim().length() > 0) {
      String searchText=searchControl.getSearchText().getText().trim() + ""String_Node_Str"";
      StringMatcher matcher=new StringMatcher(searchText,true,false);
      for (      IBundle dep : new HashSet<IBundle>(bundles)) {
        boolean filter=true;
        if (matcher.match(dep.getSymbolicName())) {
          filter=false;
        }
        if (matcher.match(dep.getSymbolicName() + ""String_Node_Str"" + dep.getVersion()+ ""String_Node_Str"")) {
          filter=false;
        }
        if (filter) {
          bundles.remove(dep);
        }
      }
    }
    this.contentResult=new BundleDependencyContentResult(bundles);
    Set<BundleDependency> dependencies=new HashSet<BundleDependency>();
    if (showPackage) {
      Set<IBundle> bundlesToProcess=new HashSet<IBundle>(bundles);
      Set<IBundle> alreadyProcessedBundles=new HashSet<IBundle>();
      int degree=0;
      do {
        degree++;
        Set<IBundle> copy=new HashSet<IBundle>(bundlesToProcess);
        bundlesToProcess=new HashSet<IBundle>();
        for (        IBundle b : copy) {
          bundlesToProcess.addAll(addOutgoingPackageDependencies(dependencies,b,degree,alreadyProcessedBundles));
        }
      }
 while (bundlesToProcess.size() > 0);
      bundlesToProcess=new HashSet<IBundle>(bundles);
      alreadyProcessedBundles=new HashSet<IBundle>();
      degree=0;
      do {
        degree++;
        Set<IBundle> copy=new HashSet<IBundle>(bundlesToProcess);
        bundlesToProcess=new HashSet<IBundle>();
        for (        IBundle b : copy) {
          bundlesToProcess.addAll(addIncomingPackageDependencies(dependencies,b,degree,alreadyProcessedBundles));
        }
      }
 while (bundlesToProcess.size() > 0);
    }
 else     if (showServices) {
      Set<IBundle> bundlesToProcess=new HashSet<IBundle>(bundles);
      Set<IBundle> alreadyProcessedBundles=new HashSet<IBundle>();
      int degree=0;
      do {
        degree++;
        Set<IBundle> copy=new HashSet<IBundle>(bundlesToProcess);
        bundlesToProcess=new HashSet<IBundle>();
        for (        IBundle b : copy) {
          bundlesToProcess.addAll(addOutgoingServiceDependencies(dependencies,b,degree,alreadyProcessedBundles));
        }
      }
 while (bundlesToProcess.size() > 0);
      bundlesToProcess=new HashSet<IBundle>(bundles);
      alreadyProcessedBundles=new HashSet<IBundle>();
      degree=0;
      do {
        degree++;
        Set<IBundle> copy=new HashSet<IBundle>(bundlesToProcess);
        bundlesToProcess=new HashSet<IBundle>();
        for (        IBundle b : copy) {
          bundlesToProcess.addAll(addIncomingServiceDependencies(dependencies,b,degree,alreadyProcessedBundles));
        }
      }
 while (bundlesToProcess.size() > 0);
    }
    if (""String_Node_Str"".equals(searchControl.getSearchText().getText()) || searchControl.getSearchText().getText().trim().length() == 0) {
      this.contentResult=null;
    }
    return dependencies.toArray(new BundleDependency[dependencies.size()]);
  }
  return NO_ELEMENTS;
}","@SuppressWarnings({""String_Node_Str""}) public Object[] getElements(Object input){
  if (input instanceof Collection) {
    dependenciesByBundle=new HashMap<IBundle,Set<BundleDependency>>();
    Set<IBundle> bundleset=new HashSet<IBundle>((Collection<IBundle>)input);
    if (!""String_Node_Str"".equals(searchControl.getSearchText().getText()) && searchControl.getSearchText().getText().trim().length() > 0) {
      String searchText=searchControl.getSearchText().getText().trim() + ""String_Node_Str"";
      StringMatcher matcher=new StringMatcher(searchText,true,false);
      for (      IBundle dep : new HashSet<IBundle>(bundleset)) {
        boolean filter=true;
        if (matcher.match(dep.getSymbolicName())) {
          filter=false;
        }
        if (matcher.match(dep.getSymbolicName() + ""String_Node_Str"" + dep.getVersion()+ ""String_Node_Str"")) {
          filter=false;
        }
        if (filter) {
          bundleset.remove(dep);
        }
      }
    }
    this.contentResult=new BundleDependencyContentResult(bundleset);
    Set<BundleDependency> dependencies=new HashSet<BundleDependency>();
    if (showPackage) {
      Set<IBundle> bundlesToProcess=new HashSet<IBundle>(bundleset);
      Set<IBundle> alreadyProcessedBundles=new HashSet<IBundle>();
      int degree=0;
      do {
        degree++;
        Set<IBundle> copy=new HashSet<IBundle>(bundlesToProcess);
        bundlesToProcess=new HashSet<IBundle>();
        for (        IBundle b : copy) {
          bundlesToProcess.addAll(addOutgoingPackageDependencies(dependencies,b,degree,alreadyProcessedBundles));
        }
      }
 while (bundlesToProcess.size() > 0);
      bundlesToProcess=new HashSet<IBundle>(bundleset);
      alreadyProcessedBundles=new HashSet<IBundle>();
      degree=0;
      do {
        degree++;
        Set<IBundle> copy=new HashSet<IBundle>(bundlesToProcess);
        bundlesToProcess=new HashSet<IBundle>();
        for (        IBundle b : copy) {
          bundlesToProcess.addAll(addIncomingPackageDependencies(dependencies,b,degree,alreadyProcessedBundles));
        }
      }
 while (bundlesToProcess.size() > 0);
    }
 else     if (showServices) {
      Set<IBundle> bundlesToProcess=new HashSet<IBundle>(bundleset);
      Set<IBundle> alreadyProcessedBundles=new HashSet<IBundle>();
      int degree=0;
      do {
        degree++;
        Set<IBundle> copy=new HashSet<IBundle>(bundlesToProcess);
        bundlesToProcess=new HashSet<IBundle>();
        for (        IBundle b : copy) {
          bundlesToProcess.addAll(addOutgoingServiceDependencies(dependencies,b,degree,alreadyProcessedBundles));
        }
      }
 while (bundlesToProcess.size() > 0);
      bundlesToProcess=new HashSet<IBundle>(bundleset);
      alreadyProcessedBundles=new HashSet<IBundle>();
      degree=0;
      do {
        degree++;
        Set<IBundle> copy=new HashSet<IBundle>(bundlesToProcess);
        bundlesToProcess=new HashSet<IBundle>();
        for (        IBundle b : copy) {
          bundlesToProcess.addAll(addIncomingServiceDependencies(dependencies,b,degree,alreadyProcessedBundles));
        }
      }
 while (bundlesToProcess.size() > 0);
    }
    if (""String_Node_Str"".equals(searchControl.getSearchText().getText()) || searchControl.getSearchText().getText().trim().length() == 0) {
      this.contentResult=null;
    }
    return dependencies.toArray(new BundleDependency[dependencies.size()]);
  }
  return NO_ELEMENTS;
}",0.9976723887110852
96467,"private Set<IBundle> addOutgoingServiceDependencies(Set<BundleDependency> dependencies,IBundle bundle,int degree,Set<IBundle> processedBundles){
  if (processedBundles.contains(bundle)) {
    return Collections.emptySet();
  }
  processedBundles.add(bundle);
  Set<IBundle> dependentBundles=new HashSet<IBundle>();
  if (outgoingDependencyDegree >= degree) {
    for (    IServiceReference pe : bundle.getServicesInUse()) {
      IBundle dependantBundle=this.bundles.get(pe.getBundleId());
      Set<BundleDependency> bundleDependencies=null;
      if (dependenciesByBundle.containsKey(bundle)) {
        bundleDependencies=dependenciesByBundle.get(bundle);
      }
 else {
        bundleDependencies=new HashSet<BundleDependency>();
        dependenciesByBundle.put(bundle,bundleDependencies);
      }
      ServiceReferenceBundleDependency bundleDependency=null;
      for (      BundleDependency dep : bundleDependencies) {
        if (dep.getExportingBundle().equals(dependantBundle) && dep instanceof ServiceReferenceBundleDependency) {
          bundleDependency=(ServiceReferenceBundleDependency)dep;
          break;
        }
      }
      if (bundleDependency == null) {
        bundleDependency=new ServiceReferenceBundleDependency(dependantBundle,bundle);
        bundleDependencies.add(bundleDependency);
        dependencies.add(bundleDependency);
      }
      contentResult.addOutgoingDependency(degree,dependantBundle);
      bundleDependency.addServiceReferece(pe);
      dependentBundles.add(dependantBundle);
    }
  }
  if (outgoingDependencyDegree > degree) {
    return dependentBundles;
  }
  return Collections.emptySet();
}","private Set<IBundle> addOutgoingServiceDependencies(Set<BundleDependency> dependencies,IBundle bundle,int degree,Set<IBundle> processedBundles){
  if (processedBundles.contains(bundle)) {
    return Collections.emptySet();
  }
  processedBundles.add(bundle);
  Set<IBundle> dependentBundles=new HashSet<IBundle>();
  if (outgoingDependencyDegree >= degree) {
    for (    IServiceReference pe : bundle.getServicesInUse()) {
      IBundle dependantBundle=this.bundles.get(pe.getBundleId());
      Set<BundleDependency> bundleDependencies=null;
      if (dependenciesByBundle.containsKey(bundle)) {
        bundleDependencies=dependenciesByBundle.get(bundle);
      }
 else {
        bundleDependencies=new HashSet<BundleDependency>();
        dependenciesByBundle.put(bundle,bundleDependencies);
      }
      ServiceReferenceBundleDependency bundleDependency=null;
      for (      BundleDependency dep : bundleDependencies) {
        if (dep.getExportingBundle().equals(dependantBundle) && dep instanceof ServiceReferenceBundleDependency) {
          bundleDependency=(ServiceReferenceBundleDependency)dep;
          break;
        }
      }
      if (bundleDependency == null) {
        bundleDependency=new ServiceReferenceBundleDependency(dependantBundle,bundle);
        bundleDependencies.add(bundleDependency);
        dependencies.add(bundleDependency);
      }
      contentResult.addOutgoingDependency(Integer.valueOf(degree),dependantBundle);
      bundleDependency.addServiceReferece(pe);
      dependentBundles.add(dependantBundle);
    }
  }
  if (outgoingDependencyDegree > degree) {
    return dependentBundles;
  }
  return Collections.emptySet();
}",0.9912518853695323
96468,"public void inputChanged(Viewer viewer,Object oldInput,Object newInput){
}","public void inputChanged(Viewer theViewer,Object oldInput,Object newInput){
}",0.9668874172185432
96469,"@Override protected void applyLayoutInternal(InternalNode[] entitiesToLayout,InternalRelationship[] relationshipsToConsider,double boundsX,double boundsY,double boundsWidth,double boundsHeight){
  BundleDependencyContentResult contentResult=this.contentProvider.getContentResult();
  Set<IBundle> rootBundles=contentResult.getBundles();
  Set<IBundle> bundlesProcessed=new HashSet<IBundle>();
  if (contentResult != null) {
    Set<ColumnHolder> columnNodes=new HashSet<ColumnHolder>();
    double columnWith=0;
    double currentX=boundsX + 0;
    double currentY=boundsY + 10;
    double maxY=boundsHeight;
    int columns=0;
    int degree=contentResult.getIncomingDegree();
    while (degree > 0) {
      Set<InternalNode> degreeNodes=new HashSet<InternalNode>();
      Set<IBundle> deps=contentResult.getIncomingDependencies().get(degree);
      for (      IBundle bundle : deps) {
        if (!bundlesProcessed.contains(bundle) && !rootBundles.contains(bundle) && lowestRanking(bundle,contentResult.getIncomingDegree(),contentResult.getIncomingDependencies()) == degree) {
          for (          InternalNode node : entitiesToLayout) {
            LayoutEntity obj=node.getLayoutEntity();
            IBundle graphBundle=(IBundle)((GraphNode)obj.getGraphData()).getData();
            if (graphBundle.equals(bundle)) {
              columnWith=Math.max(columnWith,node.getWidthInLayout());
              node.setLocation(currentX,currentY);
              bundlesProcessed.add(bundle);
              currentY=currentY + node.getHeightInLayout() + 15;
              degreeNodes.add(node);
              maxY=Math.max(currentY,maxY);
              break;
            }
          }
        }
      }
      for (      InternalNode node : degreeNodes) {
        if (node.getWidthInLayout() < columnWith) {
          double x=(columnWith - node.getWidthInLayout()) / 2;
          node.setLocation(node.getLayoutEntity().getXInLayout() + x,node.getLayoutEntity().getYInLayout());
        }
      }
      ColumnHolder holder=new ColumnHolder();
      holder.index=columns;
      holder.y=currentY;
      holder.nodes=degreeNodes;
      columnNodes.add(holder);
      columns++;
      currentY=boundsY + 10;
      if (degreeNodes.size() > 0) {
        currentX=currentX + columnWith + 30;
      }
      degree--;
      columnWith=0;
    }
    Set<InternalNode> rootNodes=new HashSet<InternalNode>();
    for (    IBundle bundle : rootBundles) {
      for (      InternalNode node : entitiesToLayout) {
        LayoutEntity obj=node.getLayoutEntity();
        IBundle graphBundle=(IBundle)((GraphNode)obj.getGraphData()).getData();
        if (graphBundle.equals(bundle)) {
          columnWith=Math.max(columnWith,node.getWidthInLayout());
          node.setLocation(currentX,currentY);
          bundlesProcessed.add(bundle);
          currentY=currentY + node.getHeightInLayout() + 15;
          maxY=Math.max(currentY,maxY);
          rootNodes.add(node);
          break;
        }
      }
    }
    for (    InternalNode node : rootNodes) {
      if (node.getWidthInLayout() < columnWith) {
        double x=(columnWith - node.getWidthInLayout()) / 2;
        node.setLocation(node.getLayoutEntity().getXInLayout() + x,node.getLayoutEntity().getYInLayout());
      }
    }
    ColumnHolder holder=new ColumnHolder();
    holder.index=columns;
    holder.y=currentY;
    holder.nodes=rootNodes;
    columnNodes.add(holder);
    currentY=boundsY + 10;
    currentX=currentX + columnWith + 30;
    int maxDegree=contentResult.getOutgoingDegree();
    degree=1;
    while (degree <= maxDegree) {
      Set<InternalNode> degreeNodes=new HashSet<InternalNode>();
      Set<IBundle> deps=contentResult.getOutgoingDependencies().get(degree);
      for (      IBundle bundle : deps) {
        if (!bundlesProcessed.contains(bundle) && !rootBundles.contains(bundle) && lowestRanking(bundle,contentResult.getOutgoingDegree(),contentResult.getOutgoingDependencies()) == degree) {
          for (          InternalNode node : entitiesToLayout) {
            LayoutEntity obj=node.getLayoutEntity();
            IBundle graphBundle=(IBundle)((GraphNode)obj.getGraphData()).getData();
            if (graphBundle.equals(bundle)) {
              columnWith=Math.max(columnWith,node.getWidthInLayout());
              node.setLocation(currentX,currentY);
              bundlesProcessed.add(bundle);
              currentY=currentY + node.getHeightInLayout() + 15;
              maxY=Math.max(currentY,maxY);
              degreeNodes.add(node);
              break;
            }
          }
        }
      }
      for (      InternalNode node : degreeNodes) {
        if (node.getWidthInLayout() < columnWith) {
          double x=(columnWith - node.getWidthInLayout()) / 2;
          node.setLocation(node.getLayoutEntity().getXInLayout() + x,node.getLayoutEntity().getYInLayout());
        }
      }
      holder=new ColumnHolder();
      holder.index=columns;
      holder.y=currentY;
      holder.nodes=degreeNodes;
      columnNodes.add(holder);
      currentY=boundsY + 10;
      currentX=currentX + columnWith + 30;
      degree++;
      columnWith=0;
    }
    for (    ColumnHolder column : columnNodes) {
      if (column.y <= maxY) {
        double y=(maxY - column.y) / 2;
        for (        InternalNode node : column.nodes) {
          node.setLocation(node.getLayoutEntity().getXInLayout(),node.getLayoutEntity().getYInLayout() + y);
        }
      }
    }
  }
}","@Override protected void applyLayoutInternal(InternalNode[] entitiesToLayout,InternalRelationship[] relationshipsToConsider,double boundsX,double boundsY,double boundsWidth,double boundsHeight){
  BundleDependencyContentResult contentResult=this.contentProvider.getContentResult();
  if (contentResult != null) {
    Set<IBundle> rootBundles=contentResult.getBundles();
    Set<IBundle> bundlesProcessed=new HashSet<IBundle>();
    Set<ColumnHolder> columnNodes=new HashSet<ColumnHolder>();
    double columnWith=0;
    double currentX=boundsX + 0;
    double currentY=boundsY + 10;
    double maxY=boundsHeight;
    int degree=contentResult.getIncomingDegree().intValue();
    while (degree > 0) {
      Set<InternalNode> degreeNodes=new HashSet<InternalNode>();
      Set<IBundle> deps=contentResult.getIncomingDependencies().get(Integer.valueOf(degree));
      for (      IBundle bundle : deps) {
        if (!bundlesProcessed.contains(bundle) && !rootBundles.contains(bundle) && lowestRanking(bundle,degree,contentResult.getIncomingDependencies()) == degree) {
          for (          InternalNode node : entitiesToLayout) {
            LayoutEntity obj=node.getLayoutEntity();
            IBundle graphBundle=(IBundle)((GraphNode)obj.getGraphData()).getData();
            if (graphBundle.equals(bundle)) {
              columnWith=Math.max(columnWith,node.getWidthInLayout());
              node.setLocation(currentX,currentY);
              bundlesProcessed.add(bundle);
              currentY=currentY + node.getHeightInLayout() + 15;
              degreeNodes.add(node);
              maxY=Math.max(currentY,maxY);
              break;
            }
          }
        }
      }
      for (      InternalNode node : degreeNodes) {
        if (node.getWidthInLayout() < columnWith) {
          double x=(columnWith - node.getWidthInLayout()) / 2;
          node.setLocation(node.getLayoutEntity().getXInLayout() + x,node.getLayoutEntity().getYInLayout());
        }
      }
      ColumnHolder holder=new ColumnHolder();
      holder.y=currentY;
      holder.nodes=degreeNodes;
      columnNodes.add(holder);
      currentY=boundsY + 10;
      if (degreeNodes.size() > 0) {
        currentX=currentX + columnWith + 30;
      }
      degree--;
      columnWith=0;
    }
    Set<InternalNode> rootNodes=new HashSet<InternalNode>();
    for (    IBundle bundle : rootBundles) {
      for (      InternalNode node : entitiesToLayout) {
        LayoutEntity obj=node.getLayoutEntity();
        IBundle graphBundle=(IBundle)((GraphNode)obj.getGraphData()).getData();
        if (graphBundle.equals(bundle)) {
          columnWith=Math.max(columnWith,node.getWidthInLayout());
          node.setLocation(currentX,currentY);
          bundlesProcessed.add(bundle);
          currentY=currentY + node.getHeightInLayout() + 15;
          maxY=Math.max(currentY,maxY);
          rootNodes.add(node);
          break;
        }
      }
    }
    for (    InternalNode node : rootNodes) {
      if (node.getWidthInLayout() < columnWith) {
        double x=(columnWith - node.getWidthInLayout()) / 2;
        node.setLocation(node.getLayoutEntity().getXInLayout() + x,node.getLayoutEntity().getYInLayout());
      }
    }
    ColumnHolder holder=new ColumnHolder();
    holder.y=currentY;
    holder.nodes=rootNodes;
    columnNodes.add(holder);
    currentY=boundsY + 10;
    currentX=currentX + columnWith + 30;
    int maxDegree=contentResult.getOutgoingDegree();
    degree=1;
    while (degree <= maxDegree) {
      Set<InternalNode> degreeNodes=new HashSet<InternalNode>();
      Set<IBundle> deps=contentResult.getOutgoingDependencies().get(degree);
      for (      IBundle bundle : deps) {
        if (!bundlesProcessed.contains(bundle) && !rootBundles.contains(bundle) && lowestRanking(bundle,contentResult.getOutgoingDegree(),contentResult.getOutgoingDependencies()) == degree) {
          for (          InternalNode node : entitiesToLayout) {
            LayoutEntity obj=node.getLayoutEntity();
            IBundle graphBundle=(IBundle)((GraphNode)obj.getGraphData()).getData();
            if (graphBundle.equals(bundle)) {
              columnWith=Math.max(columnWith,node.getWidthInLayout());
              node.setLocation(currentX,currentY);
              bundlesProcessed.add(bundle);
              currentY=currentY + node.getHeightInLayout() + 15;
              maxY=Math.max(currentY,maxY);
              degreeNodes.add(node);
              break;
            }
          }
        }
      }
      for (      InternalNode node : degreeNodes) {
        if (node.getWidthInLayout() < columnWith) {
          double x=(columnWith - node.getWidthInLayout()) / 2;
          node.setLocation(node.getLayoutEntity().getXInLayout() + x,node.getLayoutEntity().getYInLayout());
        }
      }
      holder=new ColumnHolder();
      holder.y=currentY;
      holder.nodes=degreeNodes;
      columnNodes.add(holder);
      currentY=boundsY + 10;
      currentX=currentX + columnWith + 30;
      degree++;
      columnWith=0;
    }
    for (    ColumnHolder column : columnNodes) {
      if (column.y <= maxY) {
        double y=(maxY - column.y) / 2;
        for (        InternalNode node : column.nodes) {
          node.setLocation(node.getLayoutEntity().getXInLayout(),node.getLayoutEntity().getYInLayout() + y);
        }
      }
    }
  }
}",0.975699898364594
96470,"protected void scheduleExportJob(){
  FeatureExportInfo info=new FeatureExportInfo();
  info.toDirectory=exportPage.doExportToDirectory();
  info.exportSource=false;
  info.exportSourceBundle=false;
  info.allowBinaryCycles=false;
  info.exportMetadata=false;
  info.destinationDirectory=exportPage.getDestination();
  info.zipFileName=exportPage.getFileName();
  info.items=getPluginModels();
  String rootDirectory=""String_Node_Str"";
  WARProductExportOperation job=new WARProductExportOperation(info,PDEUIMessages.ProductExportJob_name,product,rootDirectory);
  job.setUser(true);
  job.setRule(ResourcesPlugin.getWorkspace().getRoot());
  job.schedule();
  job.setProperty(IProgressConstants.ICON_PROPERTY,PDEPluginImages.DESC_FEATURE_OBJ);
}","protected void scheduleExportJob(){
  FeatureExportInfo info=new FeatureExportInfo();
  info.toDirectory=exportPage.doExportToDirectory();
  info.exportSource=false;
  info.exportSourceBundle=false;
  info.allowBinaryCycles=false;
  info.exportMetadata=false;
  info.destinationDirectory=exportPage.getDestination();
  info.zipFileName=exportPage.getFileName();
  info.items=getPluginModels();
  String rootDirectory=""String_Node_Str"";
  WARProductExportOperation job=new WARProductExportOperation(info,PDEUIMessages.ProductExportJob_name,product,rootDirectory);
  job.setUser(true);
  job.setRule(ResourcesPlugin.getWorkspace().getRoot());
  job.schedule();
  job.setProperty(IProgressConstants.ICON_PROPERTY,PDEPluginImages.DESC_FEATURE_OBJ);
  final Display d=getShell().getDisplay();
  job.addJobChangeListener(new JobChangeAdapter(){
    public void done(    IJobChangeEvent event){
      final IStatus result=event.getResult();
      if (result.isOK())       return;
      d.asyncExec(new Runnable(){
        public void run(){
          MessageDialog.openError(getShell(),PDEUIMessages.ProductExportWizard_error,PDEUIMessages.ProductExportWizard_corrupt + ""String_Node_Str"" + result.getMessage());
        }
      }
);
    }
  }
);
}",0.7512588116817724
96471,"private ResolverError[] validateErrors(final ResolverError[] errors){
  List validErrors=new ArrayList();
  for (int i=0; i < errors.length; i++) {
    ResolverError error=errors[i];
    VersionConstraint constraint=error.getUnsatisfiedConstraint();
    if (constraint != null) {
      String unresolvedBundleId=constraint.getName();
      if (!isBanned(unresolvedBundleId) && !unresolvedBundleId.equals(Validator.SERVLET_BRIDGE_ID)) {
        validErrors.add(error);
      }
    }
  }
  ResolverError[] result=new ResolverError[validErrors.size()];
  validErrors.toArray(result);
  return result;
}","private ResolverError[] validateErrors(final ResolverError[] errors){
  List validErrors=new ArrayList();
  for (int i=0; i < errors.length; i++) {
    ResolverError error=errors[i];
    VersionConstraint constraint=error.getUnsatisfiedConstraint();
    if (constraint != null) {
      String unresolvedBundleId=constraint.getName();
      if (unresolvedBundleId == null) {
        continue;
      }
      if (!isBanned(unresolvedBundleId) && !unresolvedBundleId.equals(Validator.SERVLET_BRIDGE_ID)) {
        validErrors.add(error);
      }
    }
  }
  ResolverError[] result=new ResolverError[validErrors.size()];
  validErrors.toArray(result);
  return result;
}",0.9477848101265824
96472,"public String getVersion(){
  IFacetedProject facetedProject=null;
  try {
    facetedProject=ProjectFacetsManager.create(component.getProject());
    if (facetedProject != null && ProjectFacetsManager.isProjectFacetDefined(""String_Node_Str"")) {
      IProjectFacet projectFacet=ProjectFacetsManager.getProjectFacet(""String_Node_Str"");
      return facetedProject.getInstalledVersion(projectFacet).getVersionString();
    }
  }
 catch (  Exception e) {
  }
  return ""String_Node_Str"";
}","public String getVersion(){
  IFacetedProject facetedProject=null;
  try {
    facetedProject=ProjectFacetsManager.create(virtualComponent.getProject());
    if (facetedProject != null && ProjectFacetsManager.isProjectFacetDefined(""String_Node_Str"")) {
      IProjectFacet projectFacet=ProjectFacetsManager.getProjectFacet(""String_Node_Str"");
      return facetedProject.getInstalledVersion(projectFacet).getVersionString();
    }
  }
 catch (  Exception e) {
  }
  return ""String_Node_Str"";
}",0.9908069458631256
96473,"public OsgiModuleDeployable(IProject project,IVirtualComponent component){
  super(project);
  this.component=component;
}","public OsgiModuleDeployable(IProject project,IVirtualComponent component){
  super(project);
  this.virtualComponent=component;
}",0.9641434262948207
96474,"public void exportBundles(List modules,FrameworkInstanceConfiguration config,final IPath location,final IPath tmpLocation){
  final FeatureExportInfo info=new FeatureExportInfo();
  info.toDirectory=true;
  info.useJarFormat=true;
  info.exportSource=true;
  info.exportSourceBundle=false;
  info.allowBinaryCycles=true;
  info.useWorkspaceCompiledClasses=true;
  info.destinationDirectory=tmpLocation == null ? location.makeAbsolute().toOSString() : tmpLocation.makeAbsolute().toOSString();
  List<Object> allWsBundles=new ArrayList<Object>();
  List<IProject> allBinBundles=new ArrayList<IProject>();
  for (  Object module : modules) {
    try {
      IModule[] moduleArr=(IModule[])module;
      for (      IModule iModule : moduleArr) {
        IProject project=iModule.getProject();
        IPluginModelBase pmb=PluginRegistry.findModel(project);
        ModelEntry entry=null;
        if (pmb != null)         entry=PluginRegistry.findEntry(pmb.getBundleDescription().getSymbolicName());
        if (!WorkspaceModelManager.isBinaryProject(project) && WorkspaceModelManager.isPluginProject(project)) {
          if (entry.getModel() != null && isValidModel(entry.getModel()) && hasBuildProperties((IPluginModelBase)entry.getModel())) {
            allWsBundles.add(entry.getModel());
          }
 else {
            allBinBundles.add(project);
          }
        }
 else         if (WorkspaceModelManager.isBinaryProject(project) && WorkspaceModelManager.isPluginProject(project)) {
          allBinBundles.add(project);
        }
      }
    }
 catch (    SecurityException e) {
      e.printStackTrace();
    }
catch (    IllegalArgumentException e) {
      e.printStackTrace();
    }
  }
  copyBinaryJars(allBinBundles,(tmpLocation == null ? location : tmpLocation));
  info.items=allWsBundles.toArray();
  info.signingInfo=null;
  info.qualifier=""String_Node_Str"";
  final PluginExportOperation job=new PluginExportOperation(info,PDEUIMessages.PluginExportJob_name);
  job.setUser(true);
  job.setRule(ResourcesPlugin.getWorkspace().getRoot());
  job.setProperty(IProgressConstants.ICON_PROPERTY,PDEPluginImages.DESC_PLUGIN_OBJ);
  job.addJobChangeListener(new JobChangeAdapter(){
    @Override public void done(    IJobChangeEvent event){
      if (event.getResult().isOK()) {
        try {
          if (tmpLocation != null) {
            File sourceFiles=tmpLocation.append(""String_Node_Str"").toFile();
            for (            File jars : sourceFiles.listFiles()) {
              File destFile=location.append(jars.getName()).toFile();
              if (!destFile.exists()) {
                destFile.createNewFile();
              }
              FileChannel source=null;
              FileChannel destination=null;
              try {
                source=new FileInputStream(jars).getChannel();
                destination=new FileOutputStream(destFile).getChannel();
                destination.transferFrom(source,0,source.size());
              }
  finally {
                if (source != null) {
                  source.close();
                }
                if (destination != null) {
                  destination.close();
                }
              }
            }
          }
        }
 catch (        Exception e) {
          e.printStackTrace();
        }
      }
    }
  }
);
  job.schedule();
}","/** 
 * @param modules
 * @param config not really used
 * @param location
 * @param tmpLocation
 */
public void exportBundles(List<IModule[]> modules,FrameworkInstanceConfiguration config,final IPath location,final IPath tmpLocation){
  final FeatureExportInfo info=new FeatureExportInfo();
  info.toDirectory=true;
  info.useJarFormat=true;
  info.exportSource=true;
  info.exportSourceBundle=false;
  info.allowBinaryCycles=true;
  info.useWorkspaceCompiledClasses=true;
  info.destinationDirectory=tmpLocation == null ? location.makeAbsolute().toOSString() : tmpLocation.makeAbsolute().toOSString();
  List<Object> allWsBundles=new ArrayList<Object>();
  List<IProject> allBinBundles=new ArrayList<IProject>();
  for (  IModule[] moduleArr : modules) {
    try {
      for (      IModule iModule : moduleArr) {
        IProject project=iModule.getProject();
        IPluginModelBase pmb=PluginRegistry.findModel(project);
        ModelEntry entry=null;
        if (pmb != null)         entry=PluginRegistry.findEntry(pmb.getBundleDescription().getSymbolicName());
        if (!WorkspaceModelManager.isBinaryProject(project) && WorkspaceModelManager.isPluginProject(project)) {
          if (entry != null && entry.getModel() != null && isValidModel(entry.getModel()) && hasBuildProperties(entry.getModel())) {
            allWsBundles.add(entry.getModel());
          }
 else {
            allBinBundles.add(project);
          }
        }
 else         if (WorkspaceModelManager.isBinaryProject(project) && WorkspaceModelManager.isPluginProject(project)) {
          allBinBundles.add(project);
        }
      }
    }
 catch (    SecurityException e) {
      e.printStackTrace();
    }
catch (    IllegalArgumentException e) {
      e.printStackTrace();
    }
  }
  copyBinaryJars(allBinBundles,(tmpLocation == null ? location : tmpLocation));
  info.items=allWsBundles.toArray();
  info.signingInfo=null;
  info.qualifier=""String_Node_Str"";
  final PluginExportOperation job=new PluginExportOperation(info,PDEUIMessages.PluginExportJob_name);
  job.setUser(true);
  job.setRule(ResourcesPlugin.getWorkspace().getRoot());
  job.setProperty(IProgressConstants.ICON_PROPERTY,PDEPluginImages.DESC_PLUGIN_OBJ);
  job.addJobChangeListener(new JobChangeAdapter(){
    @Override public void done(    IJobChangeEvent event){
      if (event.getResult().isOK()) {
        try {
          if (tmpLocation != null) {
            File sourceFiles=tmpLocation.append(""String_Node_Str"").toFile();
            File[] fileList=sourceFiles.listFiles();
            if (fileList != null)             for (            File jars : fileList) {
              File destFile=location.append(jars.getName()).toFile();
              if (!destFile.exists()) {
                if (!destFile.createNewFile()) {
                  throw new IOException(""String_Node_Str"" + destFile);
                }
              }
              FileInputStream fIn=null;
              FileOutputStream fOut=null;
              FileChannel source=null;
              FileChannel destination=null;
              try {
                source=(fIn=new FileInputStream(jars)).getChannel();
                destination=(fOut=new FileOutputStream(destFile)).getChannel();
                destination.transferFrom(source,0,source.size());
              }
  finally {
                if (fIn != null) {
                  try {
                    fIn.close();
                  }
 catch (                  IOException x) {
                    x.printStackTrace();
                  }
                }
                if (fOut != null) {
                  try {
                    fOut.close();
                  }
 catch (                  IOException x) {
                    x.printStackTrace();
                  }
                }
              }
            }
          }
        }
 catch (        Exception e) {
          e.printStackTrace();
        }
      }
    }
  }
);
  job.schedule();
}",0.8142563399588759
96475,"public String getServerModules(List modules,String prefix,String spacer){
  StringBuilder builder=new StringBuilder();
  for (  Object object : modules) {
    IModule[] moduleArr=(IModule[])object;
    for (    IModule module : moduleArr) {
      if (builder.length() > 0)       builder.append(spacer);
      IPluginModelBase[] models=PluginRegistry.getActiveModels();
      IPath publishFolder=getPublishFolder();
      for (      IPluginModelBase iPluginModelBase : models) {
        if (iPluginModelBase.getBundleDescription().getName().equalsIgnoreCase(module.getName())) {
          if (builder.indexOf(iPluginModelBase.getPluginBase().getId() + ""String_Node_Str"" + iPluginModelBase.getPluginBase().getVersion()+ ""String_Node_Str"") < 0) {
            builder.append(prefix + publishFolder.append(iPluginModelBase.getPluginBase().getId() + ""String_Node_Str"" + iPluginModelBase.getPluginBase().getVersion()+ ""String_Node_Str"").toOSString());
            break;
          }
        }
      }
    }
  }
  return builder.toString();
}","public String getServerModules(List<IModule[]> modules,String prefix,String spacer){
  StringBuilder builder=new StringBuilder();
  for (  IModule[] moduleArr : modules) {
    for (    IModule module : moduleArr) {
      if (builder.length() > 0)       builder.append(spacer);
      IPluginModelBase[] models=PluginRegistry.getActiveModels();
      IPath publishFolder=getPublishFolder();
      for (      IPluginModelBase iPluginModelBase : models) {
        if (iPluginModelBase.getBundleDescription().getName().equalsIgnoreCase(module.getName())) {
          if (builder.indexOf(iPluginModelBase.getPluginBase().getId() + ""String_Node_Str"" + iPluginModelBase.getPluginBase().getVersion()+ ""String_Node_Str"") < 0) {
            builder.append(prefix + publishFolder.append(iPluginModelBase.getPluginBase().getId() + ""String_Node_Str"" + iPluginModelBase.getPluginBase().getVersion()+ ""String_Node_Str"").toOSString());
            break;
          }
        }
      }
    }
  }
  return builder.toString();
}",0.9637610186092068
96476,"private void copyBinaryJars(List<IProject> list,IPath location){
  FileChannel inChannel=null;
  FileChannel outChannel=null;
  try {
    for (    IProject project : list) {
      for (      IResource resource : project.members(true)) {
        if ((""String_Node_Str"".equalsIgnoreCase(resource.getFileExtension()))) {
          String jarId=""String_Node_Str"";
          IPluginModelBase[] models=PluginRegistry.getWorkspaceModels();
          for (          IPluginModelBase iPluginModelBase : models) {
            if (iPluginModelBase.getPluginBase().getId().equalsIgnoreCase(resource.getProject().getName())) {
              iPluginModelBase.getPluginBase().getId();
              jarId=iPluginModelBase.getPluginBase().getId() + ""String_Node_Str"" + iPluginModelBase.getPluginBase().getVersion()+ ""String_Node_Str"";
            }
          }
          inChannel=new FileInputStream(new File(resource.getLocationURI())).getChannel();
          outChannel=new FileOutputStream(new File(location.append(jarId).makeAbsolute().toPortableString())).getChannel();
          inChannel.transferTo(0,inChannel.size(),outChannel);
          break;
        }
      }
    }
  }
 catch (  IOException e) {
    e.printStackTrace();
  }
catch (  CoreException e) {
    e.printStackTrace();
  }
 finally {
    if (inChannel != null)     try {
      inChannel.close();
    }
 catch (    IOException e) {
      e.printStackTrace();
    }
    if (outChannel != null)     try {
      outChannel.close();
    }
 catch (    IOException e) {
      e.printStackTrace();
    }
  }
}","private static void copyBinaryJars(List<IProject> list,IPath location){
  FileInputStream fIn=null;
  FileOutputStream fOut=null;
  FileChannel inChannel=null;
  FileChannel outChannel=null;
  try {
    for (    IProject project : list) {
      for (      IResource resource : project.members(true)) {
        if ((""String_Node_Str"".equalsIgnoreCase(resource.getFileExtension()))) {
          String jarId=""String_Node_Str"";
          IPluginModelBase[] models=PluginRegistry.getWorkspaceModels();
          for (          IPluginModelBase iPluginModelBase : models) {
            if (iPluginModelBase.getPluginBase().getId().equalsIgnoreCase(resource.getProject().getName())) {
              iPluginModelBase.getPluginBase().getId();
              jarId=iPluginModelBase.getPluginBase().getId() + ""String_Node_Str"" + iPluginModelBase.getPluginBase().getVersion()+ ""String_Node_Str"";
            }
          }
          fIn=new FileInputStream(new File(resource.getLocationURI()));
          fOut=new FileOutputStream(new File(location.append(jarId).makeAbsolute().toPortableString()));
          inChannel=fIn.getChannel();
          outChannel=fOut.getChannel();
          inChannel.transferTo(0,inChannel.size(),outChannel);
          break;
        }
      }
    }
  }
 catch (  IOException e) {
    e.printStackTrace();
  }
catch (  CoreException e) {
    e.printStackTrace();
  }
 finally {
    if (fIn != null)     try {
      fIn.close();
    }
 catch (    IOException e) {
      e.printStackTrace();
    }
    if (fOut != null)     try {
      fOut.close();
    }
 catch (    IOException e) {
      e.printStackTrace();
    }
  }
}",0.8627696155048452
96477,"@Override public void done(IJobChangeEvent event){
  if (event.getResult().isOK()) {
    try {
      if (tmpLocation != null) {
        File sourceFiles=tmpLocation.append(""String_Node_Str"").toFile();
        for (        File jars : sourceFiles.listFiles()) {
          File destFile=location.append(jars.getName()).toFile();
          if (!destFile.exists()) {
            destFile.createNewFile();
          }
          FileChannel source=null;
          FileChannel destination=null;
          try {
            source=new FileInputStream(jars).getChannel();
            destination=new FileOutputStream(destFile).getChannel();
            destination.transferFrom(source,0,source.size());
          }
  finally {
            if (source != null) {
              source.close();
            }
            if (destination != null) {
              destination.close();
            }
          }
        }
      }
    }
 catch (    Exception e) {
      e.printStackTrace();
    }
  }
}","@Override public void done(IJobChangeEvent event){
  if (event.getResult().isOK()) {
    try {
      if (tmpLocation != null) {
        File sourceFiles=tmpLocation.append(""String_Node_Str"").toFile();
        File[] fileList=sourceFiles.listFiles();
        if (fileList != null)         for (        File jars : fileList) {
          File destFile=location.append(jars.getName()).toFile();
          if (!destFile.exists()) {
            if (!destFile.createNewFile()) {
              throw new IOException(""String_Node_Str"" + destFile);
            }
          }
          FileInputStream fIn=null;
          FileOutputStream fOut=null;
          FileChannel source=null;
          FileChannel destination=null;
          try {
            source=(fIn=new FileInputStream(jars)).getChannel();
            destination=(fOut=new FileOutputStream(destFile)).getChannel();
            destination.transferFrom(source,0,source.size());
          }
  finally {
            if (fIn != null) {
              try {
                fIn.close();
              }
 catch (              IOException x) {
                x.printStackTrace();
              }
            }
            if (fOut != null) {
              try {
                fOut.close();
              }
 catch (              IOException x) {
                x.printStackTrace();
              }
            }
          }
        }
      }
    }
 catch (    Exception e) {
      e.printStackTrace();
    }
  }
}",0.6549612086565946
96478,"private boolean hasBuildProperties(IPluginModelBase model){
  File file=new File(model.getInstallLocation(),""String_Node_Str"");
  return file.exists();
}","private static boolean hasBuildProperties(IPluginModelBase model){
  File file=new File(model.getInstallLocation(),""String_Node_Str"");
  return file.exists();
}",0.977635782747604
96479,"@Override public int hashCode(){
  int hashCode=17;
  hashCode=31 * hashCode + clazzes.hashCode();
  hashCode=31 * hashCode + type.hashCode();
  return hashCode;
}","@Override public int hashCode(){
  int hashCode=17;
  hashCode=31 * hashCode + Arrays.hashCode(clazzes);
  hashCode=31 * hashCode + type.hashCode();
  return hashCode;
}",0.9518072289156626
96480,"@Override protected void createBundleContent(Composite parent){
  mform=new ManagedForm(parent);
  setManagedForm(mform);
  sform=mform.getForm();
  FormToolkit toolkit=mform.getToolkit();
  sform.setText(""String_Node_Str"");
  sform.setImage(ServerUICore.getLabelProvider().getImage(getServer()));
  sform.setExpandHorizontal(true);
  sform.setExpandVertical(true);
  toolkit.decorateFormHeading(sform.getForm());
  Composite body=sform.getBody();
  GridLayout layout=new GridLayout(1,false);
  layout.marginLeft=6;
  layout.marginTop=6;
  layout.marginRight=6;
  body.setLayout(layout);
  Section manifestSection=toolkit.createSection(sform.getBody(),ExpandableComposite.TITLE_BAR | Section.DESCRIPTION);
  manifestSection.setText(""String_Node_Str"");
  manifestSection.setDescription(""String_Node_Str"");
  layout=new GridLayout();
  manifestSection.setLayout(layout);
  manifestSection.setLayoutData(new GridData(GridData.FILL_BOTH));
  Composite manifestComposite=toolkit.createComposite(manifestSection);
  layout=new GridLayout();
  layout.marginLeft=6;
  layout.marginTop=6;
  layout.numColumns=3;
  manifestComposite.setLayoutData(new GridData(GridData.FILL_BOTH));
  manifestComposite.setLayout(layout);
  manifestSection.setClient(manifestComposite);
  Label commandLabel=toolkit.createLabel(manifestComposite,""String_Node_Str"");
  commandLabel.setForeground(toolkit.getColors().getColor(IFormColors.TITLE));
  GridDataFactory.fillDefaults().grab(true,false).span(3,1).applyTo(commandLabel);
  commandText=toolkit.createText(manifestComposite,""String_Node_Str"",SWT.CANCEL | SWT.SEARCH);
  GridDataFactory.fillDefaults().grab(true,false).applyTo(commandText);
  commandText.addKeyListener(new KeyListener(){
    public void keyPressed(    KeyEvent e){
      if (e.character == SWT.CR || e.character == SWT.LF) {
        history.add(commandText.getText());
        String cmdLine=commandText.getText();
        executeCommand(cmdLine);
      }
 else       if (e.keyCode == SWT.ARROW_UP) {
        String command=history.back();
        commandText.setText(command);
        commandText.setSelection(command.length());
        e.doit=false;
      }
 else       if (e.keyCode == SWT.ARROW_DOWN) {
        String command=history.forward();
        commandText.setText(command);
        commandText.setSelection(command.length());
        e.doit=false;
      }
    }
    public void keyReleased(    KeyEvent e){
    }
  }
);
  Button commandButton=toolkit.createButton(manifestComposite,""String_Node_Str"",SWT.PUSH);
  commandButton.addSelectionListener(new SelectionAdapter(){
    @Override public void widgetSelected(    SelectionEvent e){
      history.add(commandText.getText());
      String cmdLine=commandText.getText();
      executeCommand(cmdLine);
    }
  }
);
  Button clearButton=toolkit.createButton(manifestComposite,""String_Node_Str"",SWT.PUSH);
  clearButton.addSelectionListener(new SelectionAdapter(){
    @Override public void widgetSelected(    SelectionEvent e){
      manifestText.setText(""String_Node_Str"");
    }
  }
);
  manifestText=new StyledText(manifestComposite,SWT.BORDER | SWT.MULTI | SWT.H_SCROLL| SWT.V_SCROLL);
  manifestText.setWordWrap(false);
  manifestText.setFont(JFaceResources.getTextFont());
  GridData data=new GridData(GridData.FILL_BOTH);
  data.horizontalSpan=3;
  manifestText.setLayoutData(data);
  Label helpLabel=toolkit.createLabel(manifestComposite,""String_Node_Str"");
  GridDataFactory.fillDefaults().grab(true,false).span(3,1).applyTo(helpLabel);
  toolBarManager=sform.getToolBarManager();
  backAction=new Action(""String_Node_Str""){
    @Override public void run(){
      commandText.setText(history.back());
      String cmdLine=commandText.getText();
      executeCommand(cmdLine);
    }
  }
;
  backAction.setImageDescriptor(ImageResource.getImageDescriptor(org.eclipse.ui.internal.browser.ImageResource.IMG_ELCL_NAV_BACKWARD));
  backAction.setHoverImageDescriptor(ImageResource.getImageDescriptor(ImageResource.IMG_CLCL_NAV_BACKWARD));
  backAction.setDisabledImageDescriptor(ImageResource.getImageDescriptor(ImageResource.IMG_DLCL_NAV_BACKWARD));
  backAction.setEnabled(false);
  toolBarManager.add(backAction);
  forwardAction=new Action(""String_Node_Str""){
    @Override public void run(){
      commandText.setText(history.forward());
      String cmdLine=commandText.getText();
      executeCommand(cmdLine);
    }
  }
;
  forwardAction.setImageDescriptor(ImageResource.getImageDescriptor(ImageResource.IMG_ELCL_NAV_FORWARD));
  forwardAction.setHoverImageDescriptor(ImageResource.getImageDescriptor(ImageResource.IMG_CLCL_NAV_FORWARD));
  forwardAction.setDisabledImageDescriptor(ImageResource.getImageDescriptor(ImageResource.IMG_DLCL_NAV_FORWARD));
  forwardAction.setEnabled(false);
  toolBarManager.add(forwardAction);
  refreshAction=new Action(""String_Node_Str"",ImageResource.getImageDescriptor(ImageResource.IMG_ELCL_NAV_REFRESH)){
    @Override public void run(){
      String cmdLine=history.current();
      if (cmdLine != null) {
        executeCommand(cmdLine);
      }
    }
  }
;
  toolBarManager.add(refreshAction);
  sform.updateToolBar();
}","@Override protected void createBundleContent(Composite parent){
  mform=new ManagedForm(parent);
  setManagedForm(mform);
  sform=mform.getForm();
  FormToolkit toolkit=mform.getToolkit();
  sform.setText(""String_Node_Str"");
  sform.setImage(ServerUICore.getLabelProvider().getImage(getServer()));
  sform.setExpandHorizontal(true);
  sform.setExpandVertical(true);
  toolkit.decorateFormHeading(sform.getForm());
  Composite body=sform.getBody();
  GridLayout layout=new GridLayout(1,false);
  layout.marginLeft=6;
  layout.marginTop=6;
  layout.marginRight=6;
  body.setLayout(layout);
  Section manifestSection=toolkit.createSection(sform.getBody(),ExpandableComposite.TITLE_BAR | Section.DESCRIPTION);
  manifestSection.setText(""String_Node_Str"");
  manifestSection.setDescription(""String_Node_Str"");
  layout=new GridLayout();
  manifestSection.setLayout(layout);
  manifestSection.setLayoutData(new GridData(GridData.FILL_BOTH));
  Composite manifestComposite=toolkit.createComposite(manifestSection);
  layout=new GridLayout();
  layout.marginLeft=6;
  layout.marginTop=6;
  layout.numColumns=3;
  manifestComposite.setLayoutData(new GridData(GridData.FILL_BOTH));
  manifestComposite.setLayout(layout);
  manifestSection.setClient(manifestComposite);
  Label commandLabel=toolkit.createLabel(manifestComposite,""String_Node_Str"");
  commandLabel.setForeground(toolkit.getColors().getColor(IFormColors.TITLE));
  GridDataFactory.fillDefaults().grab(true,false).span(3,1).applyTo(commandLabel);
  commandText=toolkit.createText(manifestComposite,""String_Node_Str"",SWT.CANCEL | SWT.SEARCH);
  GridDataFactory.fillDefaults().grab(true,false).applyTo(commandText);
  commandText.addKeyListener(new KeyAdapter(){
    public void keyPressed(    KeyEvent e){
      if (e.character == SWT.CR || e.character == SWT.LF) {
        history.add(commandText.getText());
        String cmdLine=commandText.getText();
        executeCommand(cmdLine);
      }
 else       if (e.keyCode == SWT.ARROW_UP) {
        String command=history.back();
        commandText.setText(command);
        commandText.setSelection(command.length());
        e.doit=false;
      }
 else       if (e.keyCode == SWT.ARROW_DOWN) {
        String command=history.forward();
        commandText.setText(command);
        commandText.setSelection(command.length());
        e.doit=false;
      }
    }
  }
);
  Button commandButton=toolkit.createButton(manifestComposite,""String_Node_Str"",SWT.PUSH);
  commandButton.addSelectionListener(new SelectionAdapter(){
    @Override public void widgetSelected(    SelectionEvent e){
      history.add(commandText.getText());
      String cmdLine=commandText.getText();
      executeCommand(cmdLine);
    }
  }
);
  Button clearButton=toolkit.createButton(manifestComposite,""String_Node_Str"",SWT.PUSH);
  clearButton.addSelectionListener(new SelectionAdapter(){
    @Override public void widgetSelected(    SelectionEvent e){
      manifestText.setText(""String_Node_Str"");
    }
  }
);
  manifestText=new StyledText(manifestComposite,SWT.BORDER | SWT.MULTI | SWT.H_SCROLL| SWT.V_SCROLL);
  manifestText.setWordWrap(false);
  manifestText.setFont(JFaceResources.getTextFont());
  GridData data=new GridData(GridData.FILL_BOTH);
  data.horizontalSpan=3;
  manifestText.setLayoutData(data);
  Label helpLabel=toolkit.createLabel(manifestComposite,""String_Node_Str"");
  GridDataFactory.fillDefaults().grab(true,false).span(3,1).applyTo(helpLabel);
  toolBarManager=sform.getToolBarManager();
  backAction=new Action(""String_Node_Str""){
    @Override public void run(){
      commandText.setText(history.back());
      String cmdLine=commandText.getText();
      executeCommand(cmdLine);
    }
  }
;
  backAction.setImageDescriptor(ImageResource.getImageDescriptor(org.eclipse.ui.internal.browser.ImageResource.IMG_ELCL_NAV_BACKWARD));
  backAction.setHoverImageDescriptor(ImageResource.getImageDescriptor(ImageResource.IMG_CLCL_NAV_BACKWARD));
  backAction.setDisabledImageDescriptor(ImageResource.getImageDescriptor(ImageResource.IMG_DLCL_NAV_BACKWARD));
  backAction.setEnabled(false);
  toolBarManager.add(backAction);
  forwardAction=new Action(""String_Node_Str""){
    @Override public void run(){
      commandText.setText(history.forward());
      String cmdLine=commandText.getText();
      executeCommand(cmdLine);
    }
  }
;
  forwardAction.setImageDescriptor(ImageResource.getImageDescriptor(ImageResource.IMG_ELCL_NAV_FORWARD));
  forwardAction.setHoverImageDescriptor(ImageResource.getImageDescriptor(ImageResource.IMG_CLCL_NAV_FORWARD));
  forwardAction.setDisabledImageDescriptor(ImageResource.getImageDescriptor(ImageResource.IMG_DLCL_NAV_FORWARD));
  forwardAction.setEnabled(false);
  toolBarManager.add(forwardAction);
  refreshAction=new Action(""String_Node_Str"",ImageResource.getImageDescriptor(ImageResource.IMG_ELCL_NAV_REFRESH)){
    @Override public void run(){
      String cmdLine=history.current();
      if (cmdLine != null) {
        executeCommand(cmdLine);
      }
    }
  }
;
  toolBarManager.add(refreshAction);
  sform.updateToolBar();
}",0.9939227602430896
96481,"private void executeCommand(String cmdLine){
  clearStatus();
  IOSGiFrameworkConsole console=(IOSGiFrameworkConsole)getServer().getOriginal().loadAdapter(IOSGiFrameworkConsole.class,null);
  if (console == null) {
    IStatus status=EditorUIPlugin.newErrorStatus(""String_Node_Str"");
    EditorUIPlugin.log(status);
    setStatus(status);
  }
  try {
    String result=console.executeCommand(cmdLine);
    manifestText.append(""String_Node_Str"" + cmdLine + ""String_Node_Str"");
    manifestText.append(result + ""String_Node_Str"");
    forwardAction.setEnabled(history.canForward());
    backAction.setEnabled(history.canBack());
    toolBarManager.update(true);
    manifestText.setTopIndex(manifestText.getLineCount() - 1);
  }
 catch (  CoreException e) {
    EditorUIPlugin.log(e);
    setStatus(EditorUIPlugin.newErrorStatus(""String_Node_Str""));
  }
  commandText.setText(""String_Node_Str"");
}","void executeCommand(String cmdLine){
  clearStatus();
  IOSGiFrameworkConsole console=(IOSGiFrameworkConsole)getServer().getOriginal().loadAdapter(IOSGiFrameworkConsole.class,null);
  if (console == null) {
    IStatus status=EditorUIPlugin.newErrorStatus(""String_Node_Str"");
    EditorUIPlugin.log(status);
    setStatus(status);
    return;
  }
  try {
    String result=console.executeCommand(cmdLine);
    manifestText.append(""String_Node_Str"" + cmdLine + ""String_Node_Str"");
    manifestText.append(result + ""String_Node_Str"");
    forwardAction.setEnabled(history.canForward());
    backAction.setEnabled(history.canBack());
    toolBarManager.update(true);
    manifestText.setTopIndex(manifestText.getLineCount() - 1);
  }
 catch (  CoreException e) {
    EditorUIPlugin.log(e);
    setStatus(EditorUIPlugin.newErrorStatus(""String_Node_Str""));
  }
  commandText.setText(""String_Node_Str"");
}",0.9888517279821628
96482,"public IDetailsPage getPage(Object key){
  if (key.equals(IBundle.class)) {
    return BundleInformationMasterDetailsBlock.this.detailsPart;
  }
  return null;
}","public IDetailsPage getPage(Object key){
  if (key.equals(IBundle.class)) {
    return BundleInformationMasterDetailsBlock.this.bundleDetailsPart;
  }
  return null;
}",0.9817073170731708
96483,"public void clear(){
  masterPart.clear();
}","public void clear(){
  bundleMasterPart.clear();
}",0.9148936170212766
96484,"public void refresh(){
  masterPart.updateButtonState();
}","public void refresh(){
  bundleMasterPart.updateButtonState();
}",0.9344262295081968
96485,"@Override protected void registerPages(DetailsPart detailsPart){
  this.detailsPart=new BundleInformationDetailsPart(this);
  detailsPart.setPageProvider(new IDetailsPageProvider(){
    public Object getPageKey(    Object object){
      if (object instanceof IBundle) {
        return IBundle.class;
      }
      return object.getClass();
    }
    public IDetailsPage getPage(    Object key){
      if (key.equals(IBundle.class)) {
        return BundleInformationMasterDetailsBlock.this.detailsPart;
      }
      return null;
    }
  }
);
}","@Override protected void registerPages(DetailsPart targetDetailsPart){
  this.bundleDetailsPart=new BundleInformationDetailsPart(this);
  targetDetailsPart.setPageProvider(new IDetailsPageProvider(){
    public Object getPageKey(    Object object){
      if (object instanceof IBundle) {
        return IBundle.class;
      }
      return object.getClass();
    }
    public IDetailsPage getPage(    Object key){
      if (key.equals(IBundle.class)) {
        return BundleInformationMasterDetailsBlock.this.bundleDetailsPart;
      }
      return null;
    }
  }
);
}",0.9712230215827338
96486,"private void onSashPaint(Event e){
  Sash sash=(Sash)e.widget;
  IManagedForm form=(IManagedForm)sash.getParent().getData(""String_Node_Str"");
  FormColors colors=form.getToolkit().getColors();
  boolean vertical=(sash.getStyle() & SWT.VERTICAL) != 0;
  GC gc=e.gc;
  Boolean hover=(Boolean)sash.getData(""String_Node_Str"");
  gc.setBackground(colors.getColor(IFormColors.TB_BG));
  gc.setForeground(colors.getColor(IFormColors.TB_BORDER));
  Point size=sash.getSize();
  if (vertical) {
    if (hover != null) {
      gc.fillRectangle(0,0,size.x,size.y);
    }
  }
 else {
    if (hover != null) {
      gc.fillRectangle(0,0,size.x,size.y);
    }
  }
}","void onSashPaint(Event e){
  Sash sash=(Sash)e.widget;
  IManagedForm form=(IManagedForm)sash.getParent().getData(""String_Node_Str"");
  FormColors colors=form.getToolkit().getColors();
  boolean vertical=(sash.getStyle() & SWT.VERTICAL) != 0;
  GC gc=e.gc;
  Boolean hover=(Boolean)sash.getData(""String_Node_Str"");
  gc.setBackground(colors.getColor(IFormColors.TB_BG));
  gc.setForeground(colors.getColor(IFormColors.TB_BORDER));
  Point size=sash.getSize();
  if (vertical) {
    if (hover != null) {
      gc.fillRectangle(0,0,size.x,size.y);
    }
  }
 else {
    if (hover != null) {
      gc.fillRectangle(0,0,size.x,size.y);
    }
  }
}",0.9938176197836168
96487,"@Override protected void createMasterPart(final IManagedForm managedForm,Composite parent){
  masterPart=new BundleInformationMasterPart(parent,managedForm.getToolkit(),ExpandableComposite.TWISTIE | ExpandableComposite.EXPANDED | ExpandableComposite.TITLE_BAR| Section.DESCRIPTION| ExpandableComposite.FOCUS_TITLE,this);
  managedForm.addPart(masterPart);
  masterPart.createContents();
}","@Override protected void createMasterPart(final IManagedForm managedForm,Composite parent){
  bundleMasterPart=new BundleInformationMasterPart(parent,managedForm.getToolkit(),ExpandableComposite.TWISTIE | ExpandableComposite.EXPANDED | ExpandableComposite.TITLE_BAR| Section.DESCRIPTION| ExpandableComposite.FOCUS_TITLE,this);
  managedForm.addPart(bundleMasterPart);
  bundleMasterPart.createContents();
}",0.9697732997481108
96488,"private void hookSashListeners(){
  purgeSashes();
  Control[] children=getChildren();
  for (  Control element : children) {
    if (element instanceof Sash) {
      Sash sash=(Sash)element;
      if (sashes.contains(sash)) {
        continue;
      }
      sash.addListener(SWT.Paint,listener);
      sash.addListener(SWT.MouseEnter,listener);
      sash.addListener(SWT.MouseExit,listener);
      sashes.add(sash);
    }
  }
}","void hookSashListeners(){
  purgeSashes();
  Control[] children=getChildren();
  for (  Control element : children) {
    if (element instanceof Sash) {
      Sash sash=(Sash)element;
      if (sashes.contains(sash)) {
        continue;
      }
      sash.addListener(SWT.Paint,listener);
      sash.addListener(SWT.MouseEnter,listener);
      sash.addListener(SWT.MouseExit,listener);
      sashes.add(sash);
    }
  }
}",0.9905882352941175
96489,"public void setSelectedBundle(IBundle bundle){
  masterPart.setSelectedBundle(bundle);
}","public void setSelectedBundle(IBundle bundle){
  bundleMasterPart.setSelectedBundle(bundle);
}",0.956043956043956
96490,"public OSGiBundleFacetUninstallConfig(){
  Realm realm=OSGiBundleFacetRealm.getRealm();
  strategyValue=new SelectObservableValue<OSGiBundleFacetUninstallStrategy>(realm,OSGiBundleFacetUninstallStrategy.class);
  final OSGiBundleFacetUninstallStrategy[] values=OSGiBundleFacetUninstallStrategy.values();
  optionValues=new ArrayList<WritableValue<Boolean>>(values.length);
  for (int i=0; i < values.length; i++) {
    final WritableValue<Boolean> wv=new WritableValue<Boolean>(realm,null,Boolean.class);
    optionValues.set(i,wv);
    strategyValue.addOption(OSGiBundleFacetUninstallStrategy.values()[i],wv);
  }
  strategyValue.setValue(OSGiBundleFacetUninstallStrategy.defaultStrategy());
}","public OSGiBundleFacetUninstallConfig(){
  Realm realm=OSGiBundleFacetRealm.getRealm();
  strategyValue=new SelectObservableValue<OSGiBundleFacetUninstallStrategy>(realm,OSGiBundleFacetUninstallStrategy.class);
  final OSGiBundleFacetUninstallStrategy[] values=OSGiBundleFacetUninstallStrategy.values();
  optionValues=new ArrayList<WritableValue<Boolean>>(values == null ? 0 : values.length);
  if (values != null)   for (  final OSGiBundleFacetUninstallStrategy val : values) {
    final WritableValue<Boolean> wv=new WritableValue<Boolean>(realm,null,Boolean.class);
    optionValues.add(wv);
    strategyValue.addOption(val,wv);
  }
  strategyValue.setValue(OSGiBundleFacetUninstallStrategy.defaultStrategy());
}",0.7574468085106383
96491,"private void createBuildPropertiesFile(final String featureLocation,final String[][] configurations) throws IOException {
  File file=new File(featureLocation);
  if (!file.exists() || !file.isDirectory()) {
    file.mkdirs();
  }
  Properties properties=new Properties();
  handleRootFiles(configurations,properties);
  handleJREInfo(configurations,properties);
  handleExportSource(properties);
  File fileToSave=new File(file,ICoreConstants.BUILD_FILENAME_DESCRIPTOR);
  save(fileToSave,properties,""String_Node_Str"");
}","private void createBuildPropertiesFile(final String featureLocation,final String[][] configurations) throws IOException {
  File file=new File(featureLocation);
  if (!file.exists() || !file.isDirectory()) {
    if (!file.mkdirs()) {
      throw new IOException(Messages.creatorCouldntCopy + ""String_Node_Str"" + file);
    }
  }
  Properties properties=new Properties();
  handleRootFiles(configurations,properties);
  handleJREInfo(configurations,properties);
  handleExportSource(properties);
  File fileToSave=new File(file,ICoreConstants.BUILD_FILENAME_DESCRIPTOR);
  save(fileToSave,properties,""String_Node_Str"");
}",0.9124343257443084
96492,"private void addExtensionbundleToConfigIni(String configIni){
  try {
    File file=new File(configIni);
    if (file.exists()) {
      BufferedReader reader=new BufferedReader(new FileReader(file));
      String line=""String_Node_Str"";
      String oldtext=""String_Node_Str"";
      while ((line=reader.readLine()) != null) {
        oldtext+=line + ""String_Node_Str"";
      }
      reader.close();
      String newtext=oldtext.replaceAll(""String_Node_Str"",""String_Node_Str"" + ""String_Node_Str"");
      FileWriter writer=new FileWriter(configIni);
      writer.write(newtext);
      writer.close();
    }
  }
 catch (  IOException e) {
    throw new IllegalStateException(e);
  }
}","private void addExtensionbundleToConfigIni(String configIni){
  try {
    File file=new File(configIni);
    if (file.exists()) {
      BufferedReader reader=new BufferedReader(new FileReader(file));
      String line=""String_Node_Str"";
      StringBuilder oldtext=new StringBuilder();
      while ((line=reader.readLine()) != null) {
        oldtext.append(line);
        oldtext.append(""String_Node_Str"");
      }
      reader.close();
      String newtext=oldtext.toString().replaceAll(""String_Node_Str"",""String_Node_Str"" + ""String_Node_Str"");
      FileWriter writer=new FileWriter(configIni);
      writer.write(newtext);
      writer.close();
    }
  }
 catch (  IOException e) {
    throw new IllegalStateException(e);
  }
}",0.8201133144475921
96493,"private String createLibDir(){
  String location=featureLocation;
  File dir=new File(location,""String_Node_Str"");
  dir.mkdirs();
  return dir.getAbsolutePath();
}","private String createLibDir() throws IOException {
  String location=featureLocation;
  File dir=new File(location,""String_Node_Str"");
  if (!dir.mkdirs()) {
    throw new IOException(Messages.creatorCouldntCopy + ""String_Node_Str"" + dir);
  }
  return dir.getAbsolutePath();
}",0.7392290249433107
96494,"protected IBaseModel createModel(final IEditorInput input) throws CoreException {
  IProductModel model=null;
  if (input instanceof IStorageEditorInput) {
    try {
      if (input instanceof IFileEditorInput) {
        IFile file=((IFileEditorInput)input).getFile();
        model=new WARWorkspaceProductModel(file,true);
        model.load();
      }
 else       if (input instanceof IStorageEditorInput) {
        IStorageEditorInput storageInput=(IStorageEditorInput)input;
        InputStream contents=storageInput.getStorage().getContents();
        InputStream is=new BufferedInputStream(contents);
        model=new WARProductModel();
        model.load(is,false);
      }
    }
 catch (    final CoreException e) {
      PDEPlugin.logException(e);
      model=null;
    }
  }
 else   if (input instanceof IURIEditorInput) {
    IFileStore store=EFS.getStore(((IURIEditorInput)input).getURI());
    InputStream is=store.openInputStream(EFS.CACHE,new NullProgressMonitor());
    model=new WARProductModel();
    model.load(is,false);
  }
  return model;
}","protected IBaseModel createModel(final IEditorInput input) throws CoreException {
  IProductModel model=null;
  if (input instanceof IStorageEditorInput) {
    try {
      if (input instanceof IFileEditorInput) {
        IFile file=((IFileEditorInput)input).getFile();
        model=new WARWorkspaceProductModel(file,true);
        model.load();
      }
 else {
        IStorageEditorInput storageInput=(IStorageEditorInput)input;
        InputStream contents=storageInput.getStorage().getContents();
        InputStream is=new BufferedInputStream(contents);
        model=new WARProductModel();
        model.load(is,false);
      }
    }
 catch (    final CoreException e) {
      PDEPlugin.logException(e);
      model=null;
    }
  }
 else   if (input instanceof IURIEditorInput) {
    IFileStore store=EFS.getStore(((IURIEditorInput)input).getURI());
    InputStream is=store.openInputStream(EFS.CACHE,new NullProgressMonitor());
    model=new WARProductModel();
    model.load(is,false);
  }
  return model;
}",0.9769008662175168
96495,"protected boolean confirmDelete(){
  boolean result=true;
  if (!exportPage.doExportToDirectory()) {
    File zipFile=new File(exportPage.getDestination(),exportPage.getFileName());
    if (zipFile.exists()) {
      String bind=NLS.bind(PDEUIMessages.BaseExportWizard_confirmReplace_desc,zipFile.getAbsolutePath());
      String confirmReplaceTitle=PDEUIMessages.BaseExportWizard_confirmReplace_title;
      boolean openQuestion=MessageDialog.openQuestion(getContainer().getShell(),confirmReplaceTitle,bind);
      if (!openQuestion) {
        result=false;
      }
 else {
        zipFile.delete();
      }
    }
  }
  return result;
}","protected boolean confirmDelete(){
  boolean result=true;
  if (!exportPage.doExportToDirectory()) {
    File zipFile=new File(exportPage.getDestination(),exportPage.getFileName());
    if (zipFile.exists()) {
      String bind=NLS.bind(PDEUIMessages.BaseExportWizard_confirmReplace_desc,zipFile.getAbsolutePath());
      String confirmReplaceTitle=PDEUIMessages.BaseExportWizard_confirmReplace_title;
      boolean openQuestion=MessageDialog.openQuestion(getContainer().getShell(),confirmReplaceTitle,bind);
      if (!openQuestion) {
        result=false;
      }
 else {
        if (!zipFile.delete()) {
          MessageDialog.openError(getContainer().getShell(),Messages.NewWARDeleteFailed_title,Messages.NewWARDeleteFailed_desc + ""String_Node_Str"" + zipFile);
          result=false;
        }
      }
    }
  }
  return result;
}",0.8641304347826086
96496,"private void hookSelectionListener(final TreeViewer viewer){
  viewer.addSelectionChangedListener(new ISelectionChangedListener(){
    public void selectionChanged(    final SelectionChangedEvent event){
      TreeSelection selection=(TreeSelection)event.getSelection();
      Object firstElement=selection.getFirstElement();
      ExportWARProductWizard wizard=(ExportWARProductWizard)getWizard();
      if (firstElement != null && firstElement instanceof IFile) {
        IFile file=(IFile)firstElement;
        String fileExtension=file.getFileExtension();
        if (fileExtension.equals(WARProductConstants.FILE_EXTENSION)) {
          warProductFile=file;
          wizard.loadProductFromFile(file);
        }
      }
 else {
        warProductFile=null;
        wizard.resetProduct();
      }
      wizard.getContainer().updateButtons();
    }
  }
);
}","private void hookSelectionListener(final TreeViewer viewer){
  viewer.addSelectionChangedListener(new ISelectionChangedListener(){
    public void selectionChanged(    final SelectionChangedEvent event){
      TreeSelection selection=(TreeSelection)event.getSelection();
      Object firstElement=selection.getFirstElement();
      ExportWARProductWizard wizard=(ExportWARProductWizard)getWizard();
      if (firstElement != null && firstElement instanceof IFile) {
        IFile file=(IFile)firstElement;
        String fileExtension=file.getFileExtension();
        if (WARProductConstants.FILE_EXTENSION.equals(fileExtension)) {
          warProductFile=file;
          wizard.loadProductFromFile(file);
        }
      }
 else {
        warProductFile=null;
        wizard.resetProduct();
      }
      wizard.getContainer().updateButtons();
    }
  }
);
}",0.9755813953488373
96497,"public void selectionChanged(final SelectionChangedEvent event){
  TreeSelection selection=(TreeSelection)event.getSelection();
  Object firstElement=selection.getFirstElement();
  ExportWARProductWizard wizard=(ExportWARProductWizard)getWizard();
  if (firstElement != null && firstElement instanceof IFile) {
    IFile file=(IFile)firstElement;
    String fileExtension=file.getFileExtension();
    if (fileExtension.equals(WARProductConstants.FILE_EXTENSION)) {
      warProductFile=file;
      wizard.loadProductFromFile(file);
    }
  }
 else {
    warProductFile=null;
    wizard.resetProduct();
  }
  wizard.getContainer().updateButtons();
}","public void selectionChanged(final SelectionChangedEvent event){
  TreeSelection selection=(TreeSelection)event.getSelection();
  Object firstElement=selection.getFirstElement();
  ExportWARProductWizard wizard=(ExportWARProductWizard)getWizard();
  if (firstElement != null && firstElement instanceof IFile) {
    IFile file=(IFile)firstElement;
    String fileExtension=file.getFileExtension();
    if (WARProductConstants.FILE_EXTENSION.equals(fileExtension)) {
      warProductFile=file;
      wizard.loadProductFromFile(file);
    }
  }
 else {
    warProductFile=null;
    wizard.resetProduct();
  }
  wizard.getContainer().updateButtons();
}",0.9675925925925926
96498,"private void updateHeaders(){
  try {
    IFile manifest=null;
    IProject project=getProject();
    if (project != null) {
      manifest=getManifestFile(project);
    }
    if (manifest != null && manifest.exists()) {
      Map<String,String> manifestHeaders=ManifestElement.parseBundleManifest(manifest.getContents(),null);
      for (      String key : manifestHeaders.keySet()) {
        headers.put(key,manifestHeaders.get(key));
      }
    }
  }
 catch (  Exception e) {
    LibraFacetPlugin.logError(e);
  }
}","private void updateHeaders(){
  try {
    IFile manifest=null;
    IProject project=getProject();
    if (project != null) {
      manifest=getManifestFile(project);
    }
    if (manifest != null && manifest.exists()) {
      Map<String,String> manifestHeaders=ManifestElement.parseBundleManifest(manifest.getContents(),null);
      for (      Map.Entry<String,String> entry : manifestHeaders.entrySet()) {
        headers.put(entry.getKey(),entry.getValue());
      }
    }
  }
 catch (  Exception e) {
    LibraFacetPlugin.logError(e);
  }
}",0.9181561618062088
96499,"public String[] getFrameworkProgramArguments(IPath configPath,boolean debug,boolean starting){
  return new String[]{""String_Node_Str"" + configPath.append(""String_Node_Str"").makeAbsolute().toOSString()};
}","public String[] getFrameworkProgramArguments(IPath configPath,boolean debug,boolean starting){
  return new String[]{configPath.append(""String_Node_Str"").makeAbsolute().toPortableString()};
}",0.9242424242424242
96500,"public String[] getFrameworkVMArguments(IPath installPath,IPath configPath,IPath deployPath,boolean isTestEnv){
  String configPathStr=deployPath.makeAbsolute().toOSString();
  String vmArgs=""String_Node_Str"" + configPathStr + ""String_Node_Str"";
  return new String[]{vmArgs};
}","public String[] getFrameworkVMArguments(IPath installPath,IPath configPath,IPath deployPath,boolean isTestEnv){
  String configPathStr=deployPath.makeAbsolute().append(""String_Node_Str"").toPortableString();
  String vmArgs=""String_Node_Str"" + configPathStr;
  return new String[]{vmArgs};
}",0.8943661971830986
96501,"private IBundleClasspathEntry[] getBundleClasspath(IBundleProjectDescription bundleProjectDescription) throws CoreException {
  IProject project=bundleProjectDescription.getProject();
  IBundleClasspathEntry[] bundleClasspath=bundleProjectDescription.getBundleClasspath();
  IJavaProject javaProject=JavaCore.create(project);
  if (bundleClasspath == null) {
    IBundleProjectService bundleProjectService=LibraFacetPlugin.getDefault().getBundleProjectService();
    IPath source=getRelativePath(project,getJavaSourceFolderPaths(javaProject)[0]);
    IPath binary=getRelativePath(project,javaProject.getOutputLocation());
    IPath library=(isWebProject(project)) ? new Path(WEB_INF_CLASSES) : null;
    IBundleClasspathEntry classpath=bundleProjectService.newBundleClasspathEntry(source,binary,library);
    bundleClasspath=new IBundleClasspathEntry[]{classpath};
  }
 else {
  }
  return bundleClasspath;
}","private IBundleClasspathEntry[] getBundleClasspath(IBundleProjectDescription bundleProjectDescription) throws CoreException {
  IProject project=bundleProjectDescription.getProject();
  IBundleClasspathEntry[] bundleClasspath=bundleProjectDescription.getBundleClasspath();
  IJavaProject javaProject=JavaCore.create(project);
  if (bundleClasspath == null) {
    IPath[] javaSourceFolderPaths=getJavaSourceFolderPaths(javaProject);
    if (javaSourceFolderPaths != null && javaSourceFolderPaths.length > 0) {
      IBundleProjectService bundleProjectService=LibraFacetPlugin.getDefault().getBundleProjectService();
      List<IBundleClasspathEntry> bundleClasspathList=new ArrayList<IBundleClasspathEntry>();
      IPath binary=getRelativePath(project,javaProject.getOutputLocation());
      IPath library=(isWebProject(project)) ? new Path(WEB_INF_CLASSES) : null;
      for (      IPath iPath : javaSourceFolderPaths) {
        bundleClasspathList.add(bundleProjectService.newBundleClasspathEntry(getRelativePath(project,iPath),binary,library));
      }
      bundleClasspath=bundleClasspathList.toArray(new IBundleClasspathEntry[]{});
      ;
    }
  }
 else {
  }
  return bundleClasspath;
}",0.7465525439847837
96502,"public ConvertProjectsToBundlesOperation(IProject[] projects){
  this.fProjects=projects;
}","public ConvertProjectsToBundlesOperation(IProject[] projects){
  this.fProjects=projects.clone();
}",0.9578947368421052
96503,"public ConvertProjectsToBundlesWizard(IProject[] unconverted,IProject[] selected){
  this.fUnconverted=unconverted;
  this.fSelected=selected;
  setWindowTitle(Messages.ConvertProjectsToBundlesWizard_Title);
  setNeedsProgressMonitor(true);
}","public ConvertProjectsToBundlesWizard(IProject[] unconverted,IProject[] selected){
  this.fUnconverted=unconverted.clone();
  this.fSelected=selected.clone();
  setWindowTitle(Messages.ConvertProjectsToBundlesWizard_Title);
  setNeedsProgressMonitor(true);
}",0.968
96504,"private void createBundleProjectDescription(IProject project,OSGiBundleFacetInstallConfig config,IProgressMonitor monitor) throws CoreException {
  IBundleProjectService bundleProjectService=Activator.getDefault().getBundleProjectService();
  IBundleProjectDescription bundleProjectDescription=bundleProjectService.getDescription(project);
  bundleProjectDescription.setSymbolicName(config.getSymbolicName());
  bundleProjectDescription.setBundleVersion(config.getVersion());
  String bundleName=config.getName();
  if (bundleName != null && bundleName.trim().length() > 0) {
    bundleProjectDescription.setBundleName(bundleName);
  }
  String bundleVendor=config.getVendor();
  if (bundleVendor != null && bundleVendor.trim().length() > 0) {
    bundleProjectDescription.setBundleVendor(bundleVendor);
  }
  bundleProjectDescription.setEquinox(true);
  bundleProjectDescription.setExtensionRegistry(false);
  bundleProjectDescription.setNatureIds(getNatureIds(bundleProjectDescription));
  bundleProjectDescription.setLaunchShortcuts(getLaunchShortcuts(project));
  Map<String,String> headers=getAdditionalHeaders(project);
  for (  String header : headers.keySet()) {
    bundleProjectDescription.setHeader(header,headers.get(header));
  }
  bundleProjectDescription.setPackageExports(getPackageExports(project));
  bundleProjectDescription.setPackageImports(getPackageImports(bundleProjectDescription));
  bundleProjectDescription.setBinIncludes(getBinIncludes(bundleProjectDescription));
  bundleProjectDescription.setBundleClassath(getBundleClasspath(bundleProjectDescription));
  bundleProjectDescription.apply(monitor);
}","private void createBundleProjectDescription(IProject project,OSGiBundleFacetInstallConfig config,IProgressMonitor monitor) throws CoreException {
  IBundleProjectService bundleProjectService=Activator.getDefault().getBundleProjectService();
  IBundleProjectDescription bundleProjectDescription=bundleProjectService.getDescription(project);
  bundleProjectDescription.setSymbolicName(config.getSymbolicName());
  bundleProjectDescription.setBundleVersion(config.getVersion());
  String bundleName=config.getName();
  if (bundleName != null && bundleName.trim().length() > 0) {
    bundleProjectDescription.setBundleName(bundleName);
  }
  String bundleVendor=config.getVendor();
  if (bundleVendor != null && bundleVendor.trim().length() > 0) {
    bundleProjectDescription.setBundleVendor(bundleVendor);
  }
  bundleProjectDescription.setEquinox(true);
  bundleProjectDescription.setExtensionRegistry(false);
  bundleProjectDescription.setNatureIds(getNatureIds(bundleProjectDescription));
  bundleProjectDescription.setLaunchShortcuts(getLaunchShortcuts(project));
  Map<String,String> headers=getAdditionalHeaders(project);
  for (  Map.Entry<String,String> entry : headers.entrySet()) {
    bundleProjectDescription.setHeader(entry.getKey(),entry.getValue());
  }
  bundleProjectDescription.setPackageExports(getPackageExports(project));
  bundleProjectDescription.setPackageImports(getPackageImports(bundleProjectDescription));
  bundleProjectDescription.setBinIncludes(getBinIncludes(bundleProjectDescription));
  bundleProjectDescription.setBundleClassath(getBundleClasspath(bundleProjectDescription));
  bundleProjectDescription.apply(monitor);
}",0.9701401584399756
96505,"public WritableValue[] getOptionValues(){
  return optionValues;
}","public WritableValue[] getOptionValues(){
  return optionValues.clone();
}",0.9428571428571428
96506,"public List<Label> createLabel(SubmitRecord record,HashMap<String,AccountInfo> value,String status){
  List<Label> list=new ArrayList<Label>();
  for (  Map.Entry<String,AccountInfo> info : value.entrySet()) {
    Label label=new Label();
    label.setLabel(info.getKey());
    label.setStatus(status);
    label.setAppliedBy(info.getValue().getId());
    list.add(label);
  }
  return list;
}","public List<Label> createLabel(SubmitRecord record,HashMap<String,AccountInfo> value,String status){
  List<Label> list=new ArrayList<Label>();
  if (value != null) {
    for (    Map.Entry<String,AccountInfo> info : value.entrySet()) {
      Label label=new Label();
      label.setLabel(info.getKey());
      label.setStatus(status);
      if (info.getValue().getId() != null) {
        label.setAppliedBy(info.getValue().getId());
      }
      list.add(label);
    }
  }
  return list;
}",0.753393665158371
96507,"public void init(String refSpec,PrivilegeLevel privilegeLevel) throws Exception {
  provider.open();
  assertThat(getRepository().getReviews().size(),is(0));
  pushFileToReview(testIdent,refSpec,privilegeLevel);
  listener=new TestRemoteObserver<IRepository,IReview,String,Date>(provider.getReviewFactory());
  consumer=provider.getReviewFactory().getConsumerForRemoteKey(getRepository(),shortId);
  consumer.addObserver(listener);
  consumer.retrieve(false);
  listener.waitForResponse();
  assertThat(getRepository().getReviews().size(),is(1));
  IReview review=getRepository().getReviews().get(0);
  IReview reviewDirect=provider.open(shortId);
  assertThat(review,sameInstance(reviewDirect));
  assertThat(review,notNullValue());
  assertThat(review.getId(),is(shortId));
  assertThat(review.getKey(),is(changeId));
  assertThat(review.getSubject(),is(""String_Node_Str"" + testIdent));
  assertThat(review.getMessage(),allOf(startsWith(""String_Node_Str""),endsWith(""String_Node_Str"")));
  assertThat(review.getOwner().getDisplayName(),is(""String_Node_Str""));
  assertIsRecent(review.getCreationDate());
}","public void init(String refSpec,PrivilegeLevel privilegeLevel) throws Exception {
  provider.open();
  assertThat(getRepository().getReviews().size(),is(0));
  pushFileToReview(testIdent,refSpec,privilegeLevel);
  listener=new TestRemoteObserver<IRepository,IReview,String,Date>(provider.getReviewFactory());
  consumer=provider.getReviewFactory().getConsumerForRemoteKey(getRepository(),shortId);
  consumer.setAsynchronous(false);
  consumer.addObserver(listener);
  consumer.retrieve(false);
  listener.waitForResponse();
  assertThat(getRepository().getReviews().size(),is(1));
  IReview review=getRepository().getReviews().get(0);
  IReview reviewDirect=provider.open(shortId);
  assertThat(review,sameInstance(reviewDirect));
  assertThat(review,notNullValue());
  assertThat(review.getId(),is(shortId));
  assertThat(review.getKey(),is(changeId));
  assertThat(review.getSubject(),is(""String_Node_Str"" + testIdent));
  assertThat(review.getMessage(),allOf(startsWith(""String_Node_Str""),endsWith(""String_Node_Str"")));
  assertThat(review.getOwner().getDisplayName(),is(""String_Node_Str""));
  assertIsRecent(review.getCreationDate());
}",0.9844236760124612
96508,"private void makeActions(){
  doubleClickAction=new Action(){
    @Override public void run(){
      ISelection selection=fViewer.getSelection();
      if (!(selection instanceof IStructuredSelection)) {
        return;
      }
      IStructuredSelection structuredSelection=(IStructuredSelection)selection;
      if (structuredSelection.size() != 1) {
        return;
      }
      Object element=structuredSelection.getFirstElement();
      if (!(element instanceof AbstractTask)) {
        return;
      }
      AbstractTask task=(AbstractTask)element;
      AbstractRepositoryConnectorUi connectorUi=TasksUiPlugin.getConnectorUi(GerritConnector.CONNECTOR_KIND);
      IEditorInput editorInput=connectorUi.getTaskEditorInput(getTaskRepository(),task);
      if (editorInput == null) {
        editorInput=new TaskEditorInput(fTaskRepository,task);
      }
      String editorId=connectorUi.getTaskEditorId(task);
      IEditorPart editorPart=TasksUiUtil.openEditor(editorInput,editorId,null);
      if (editorPart instanceof TaskEditor) {
        TaskEditor taskEditor=(TaskEditor)editorPart;
        SynchronizeEditorAction synchAction=new SynchronizeEditorAction();
        synchAction.selectionChanged(new StructuredSelection(taskEditor));
        synchAction.run();
        if (task instanceof GerritTask) {
          fReviewTable.updateReviewItem((GerritTask)task);
          refresh();
        }
      }
    }
  }
;
}","private void makeActions(){
  doubleClickAction=new Action(){
    @Override public void run(){
      ISelection selection=fViewer.getSelection();
      if (!(selection instanceof IStructuredSelection)) {
        return;
      }
      IStructuredSelection structuredSelection=(IStructuredSelection)selection;
      if (structuredSelection.size() != 1) {
        return;
      }
      Object element=structuredSelection.getFirstElement();
      if (element instanceof ITask) {
        TasksUiUtil.openTask(fTaskRepository,((ITask)element).getTaskId());
      }
      if (element instanceof GerritTask) {
        fReviewTable.updateReviewItem((GerritTask)element);
        refresh();
      }
    }
  }
;
}",0.556390977443609
96509,"public List<IProject> getProjectsForTaskRepository(String connectorKind,String repositoryUrl){
  List<IProject> projects=new ArrayList<IProject>();
  for (  IProject project : ResourcesPlugin.getWorkspace().getRoot().getProjects()) {
    TaskRepository repo=TasksUiPlugin.getDefault().getRepositoryForResource(project);
    if (connectorKind.equals(repo.getConnectorKind()) && repositoryUrl.equals(repo.getRepositoryUrl())) {
      projects.add(project);
    }
  }
  return projects;
}","public List<IProject> getProjectsForTaskRepository(String connectorKind,String repositoryUrl){
  List<IProject> projects=new ArrayList<IProject>();
  for (  IProject project : ResourcesPlugin.getWorkspace().getRoot().getProjects()) {
    TaskRepository repo=TasksUiPlugin.getDefault().getRepositoryForResource(project);
    if (repo != null && connectorKind.equals(repo.getConnectorKind()) && repositoryUrl.equals(repo.getRepositoryUrl())) {
      projects.add(project);
    }
  }
  return projects;
}",0.8924949290060852
96510,"private List<ScmRepository> getRepositoriesFor(ITask task) throws CoreException {
  List<ScmRepository> repos=new ArrayList<ScmRepository>();
  List<IProject> projects=configuration.getProjectsForTaskRepository(task.getConnectorKind(),task.getRepositoryUrl());
  for (  IProject p : projects) {
    ScmRepository repository=getRepositoryForProject(p);
    repos.add(repository);
  }
  return repos;
}","private List<ScmRepository> getRepositoriesFor(ITask task) throws CoreException {
  Set<ScmRepository> repos=new HashSet<ScmRepository>();
  List<IProject> projects=configuration.getProjectsForTaskRepository(task.getConnectorKind(),task.getRepositoryUrl());
  for (  IProject p : projects) {
    ScmRepository repository=getRepositoryForProject(p);
    repos.add(repository);
  }
  return new ArrayList<ScmRepository>(repos);
}",0.928657799274486
96511,"@Override public void createControl(Composite parent,FormToolkit toolkit){
  Section createSection=createSection(parent,toolkit,true);
  createSection.setText(""String_Node_Str"");
  setSection(toolkit,createSection);
  GridLayout gl=new GridLayout(1,false);
  gl.marginBottom=16;
  GridData gd=new GridData(SWT.FILL,SWT.FILL,true,true);
  gd.horizontalSpan=4;
  createSection.setLayout(gl);
  createSection.setLayoutData(gd);
  Composite composite=toolkit.createComposite(createSection);
  createSection.setClient(composite);
  composite.setLayout(new FillLayout());
  TableViewer table=new TableViewer(composite);
  table.getTable().setLinesVisible(true);
  table.getTable().setHeaderVisible(true);
  TableViewerColumn tableViewerColumn=new TableViewerColumn(table,SWT.LEFT);
  tableViewerColumn.getColumn().setText(""String_Node_Str"");
  tableViewerColumn.getColumn().setWidth(100);
  tableViewerColumn=new TableViewerColumn(table,SWT.LEFT);
  tableViewerColumn.getColumn().setText(""String_Node_Str"");
  tableViewerColumn.getColumn().setWidth(100);
  tableViewerColumn=new TableViewerColumn(table,SWT.LEFT);
  tableViewerColumn.getColumn().setText(""String_Node_Str"");
  tableViewerColumn.getColumn().setWidth(100);
  tableViewerColumn=new TableViewerColumn(table,SWT.LEFT);
  tableViewerColumn.getColumn().setText(""String_Node_Str"");
  tableViewerColumn.getColumn().setWidth(100);
  table.setContentProvider(ArrayContentProvider.getInstance());
  table.setLabelProvider(new ITableLabelProvider(){
    public void addListener(    ILabelProviderListener listener){
    }
    public void dispose(){
    }
    public boolean isLabelProperty(    Object element,    String property){
      return false;
    }
    public void removeListener(    ILabelProviderListener listener){
    }
    public Image getColumnImage(    Object element,    int columnIndex){
      return null;
    }
    public String getColumnText(    Object element,    int columnIndex){
      TaskChangeSet cs=((TaskChangeSet)element);
switch (columnIndex) {
case 0:
        return cs.getChangeset().getId();
case 1:
      return cs.getChangeset().getMessage();
case 2:
    return cs.getChangeset().getAuthor().getEmail();
case 3:
  return cs.getChangeset().getDate().toString();
}
return element.toString() + ""String_Node_Str"" + columnIndex;
}
}
);
table.setInput(getInput());
MenuManager menuManager=new MenuManager();
menuManager.setRemoveAllWhenShown(true);
getTaskEditorPage().getEditorSite().registerContextMenu(""String_Node_Str"",menuManager,table,true);
org.eclipse.swt.widgets.Menu menu=menuManager.createContextMenu(table.getControl());
table.getTable().setMenu(menu);
}","@Override public void createControl(Composite parent,FormToolkit toolkit){
  Section createSection=createSection(parent,toolkit);
  Composite composite=createContentComposite(toolkit,createSection);
  createTable(composite);
}",0.100418410041841
96512,"private ReviewDslScope mapScope(ReviewScope scope){
  ReviewDslScope scope2=new ReviewDslScope();
  for (  IReviewScopeItem item : scope.getItems()) {
    scope2.getItems().add(mapScopeItem(item));
  }
  return scope2;
}","private ReviewDslScope mapScope(ReviewScope scope){
  ReviewDslScope scope2=new ReviewDslScope();
  for (  IReviewScopeItem item : scope.getItems()) {
    scope2.addItem(mapScopeItem(item));
  }
  return scope2;
}",0.9653579676674364
96513,"public PatchSetDetail getPatchSetDetail(final PatchSet.Id id,IProgressMonitor monitor) throws GerritException {
  PatchSetDetail result=null;
  try {
    result=execute(monitor,new Operation<PatchSetDetail>(){
      @Override public void execute(      IProgressMonitor monitor) throws GerritException {
        getChangeDetailService().patchSetDetail(id,null,null,this);
      }
    }
);
  }
 catch (  GerritException e) {
    if (e.getMessage().contains(""String_Node_Str"")) {
      result=execute(monitor,new Operation<PatchSetDetail>(){
        @Override public void execute(        IProgressMonitor monitor) throws GerritException {
          getChangeDetailService().patchSetDetail(id,this);
        }
      }
);
    }
 else {
      throw e;
    }
  }
  return result;
}","public PatchSetDetail getPatchSetDetail(final PatchSet.Id id,IProgressMonitor monitor) throws GerritException {
  PatchSetDetail result=null;
  try {
    result=execute(monitor,new Operation<PatchSetDetail>(){
      @Override public void execute(      IProgressMonitor monitor) throws GerritException {
        getChangeDetailService().patchSetDetail(id,null,null,this);
      }
    }
);
  }
 catch (  GerritException e) {
    String message=e.getMessage();
    if (message != null && message.contains(""String_Node_Str"")) {
      result=execute(monitor,new Operation<PatchSetDetail>(){
        @Override public void execute(        IProgressMonitor monitor) throws GerritException {
          getChangeDetailService().patchSetDetail(id,this);
        }
      }
);
    }
 else {
      throw e;
    }
  }
  return result;
}",0.9529780564263324
96514,"public void setDate(Date date){
  Date old=this.date;
  this.date=date;
  changeSupport.firePropertyChange(""String_Node_Str"",old,date);
}","public void setDate(Date date){
  Date old=this.date;
  this.date=date != null ? new Date(date.getTime()) : null;
  changeSupport.firePropertyChange(""String_Node_Str"",old,date);
}",0.8670886075949367
96515,"public Date getDate(){
  return date;
}","public Date getDate(){
  return date != null ? new Date(date.getTime()) : null;
}",0.65
96516,"public void setDate(Date date){
  this.date=date;
}","public void setDate(Date date){
  this.date=date != null ? new Date(date.getTime()) : null;
}",0.7083333333333334
96517,"public Date getDate(){
  return date;
}","public Date getDate(){
  return date != null ? new Date(date.getTime()) : null;
}",0.65
96518,"private String convertScopeToDescription(){
  StringBuilder sb=new StringBuilder();
  Map<String,Counter> counts=new TreeMap<String,Counter>();
  for (  IReviewScopeItem item : scope.getItems()) {
    String key=item.getType(1);
    if (!counts.containsKey(key)) {
      counts.put(key,new Counter(item));
    }
    counts.get(key).counter++;
  }
  boolean isFirstElement=true;
  for (  String type : counts.keySet()) {
    if (isFirstElement) {
      isFirstElement=false;
    }
 else {
      sb.append(""String_Node_Str"");
    }
    int count=counts.get(type).counter;
    sb.append(count);
    sb.append(""String_Node_Str"");
    sb.append(counts.get(type).item.getType(count));
  }
  return sb.toString();
}","private String convertScopeToDescription(){
  StringBuilder sb=new StringBuilder();
  Map<String,Counter> counts=new TreeMap<String,Counter>();
  for (  IReviewScopeItem item : scope.getItems()) {
    String key=item.getType(1);
    if (!counts.containsKey(key)) {
      counts.put(key,new Counter(item));
    }
    counts.get(key).counter++;
  }
  boolean isFirstElement=true;
  for (  Entry<String,Counter> type : counts.entrySet()) {
    if (isFirstElement) {
      isFirstElement=false;
    }
 else {
      sb.append(""String_Node_Str"");
    }
    int count=counts.get(type).counter;
    sb.append(count);
    sb.append(""String_Node_Str"");
    sb.append(counts.get(type).item.getType(count));
  }
  return sb.toString();
}",0.9769713886950454
96519,"public String[] getTokenNames(){
  return tokenNames;
}","public String[] getTokenNames(){
  return tokenNames.clone();
}",0.9322033898305084
96520,"public ColumnLabelProvider(IColumnSpec<T>[] specs){
  this.specs=specs;
}","public ColumnLabelProvider(IColumnSpec<T>[] specs){
  this.specs=specs.clone();
}",0.948051948051948
96521,"public List<IReviewFile> getReviewFiles(NullProgressMonitor monitor) throws CoreException {
  for (  ScmConnector connector : ScmCore.getAllRegisteredConnectors()) {
    for (    ScmRepository repository : connector.getRepositories(new NullProgressMonitor())) {
      if (repositoryUrl.equals(repository.getUrl())) {
        ChangeSet changeset=connector.getChangeSet(repository,new IFileRevision(){
          public IStorage getStorage(          IProgressMonitor monitor) throws CoreException {
            return null;
          }
          public String getName(){
            return null;
          }
          public URI getURI(){
            return null;
          }
          public long getTimestamp(){
            return 0;
          }
          public boolean exists(){
            return false;
          }
          public String getContentIdentifier(){
            return revisionId;
          }
          public String getAuthor(){
            return null;
          }
          public String getComment(){
            return null;
          }
          public ITag[] getTags(){
            return null;
          }
          public boolean isPropertyMissing(){
            return false;
          }
          public IFileRevision withAllProperties(          IProgressMonitor monitor) throws CoreException {
            return null;
          }
        }
,monitor);
        List<IReviewFile> list=new ArrayList<IReviewFile>();
        for (        Change change : changeset.getChanges()) {
          list.add(new ChangeSetReviewFile(change));
        }
        return list;
      }
    }
  }
  return new ArrayList<IReviewFile>();
}","public List<IReviewFile> getReviewFiles(NullProgressMonitor monitor) throws CoreException {
  for (  ScmConnector connector : ScmCore.getAllRegisteredConnectors()) {
    for (    ScmRepository repository : connector.getRepositories(new NullProgressMonitor())) {
      if (repositoryUrl.equals(repository.getUrl())) {
        ChangeSet changeset=connector.getChangeSet(repository,new FileRevision(){
          public IStorage getStorage(          IProgressMonitor monitor) throws CoreException {
            return null;
          }
          public String getName(){
            return null;
          }
          public URI getURI(){
            return null;
          }
          public long getTimestamp(){
            return 0;
          }
          public boolean exists(){
            return false;
          }
          public String getContentIdentifier(){
            return revisionId;
          }
          public String getAuthor(){
            return null;
          }
          public String getComment(){
            return null;
          }
          public ITag[] getTags(){
            return null;
          }
          public boolean isPropertyMissing(){
            return false;
          }
          public IFileRevision withAllProperties(          IProgressMonitor monitor) throws CoreException {
            return null;
          }
        }
,monitor);
        List<IReviewFile> list=new ArrayList<IReviewFile>();
        for (        Change change : changeset.getChanges()) {
          list.add(new ChangeSetReviewFile(change));
        }
        return list;
      }
    }
  }
  return new ArrayList<IReviewFile>();
}",0.9996961409905804
96522,"public org.eclipse.mylyn.reviews.tasks.core.ReviewResult mapCurrentReviewResult(ITaskProperties taskProperties){
  Assert.isNotNull(taskProperties);
  if (taskProperties.getNewCommentText() == null || taskProperties.getNewCommentText().isEmpty())   return null;
  ReviewResult result=null;
  try {
    ReviewDslResult res=parser.parseReviewResult(taskProperties.getNewCommentText());
    if (res == null)     return null;
    result=new ReviewResult();
    result.setComment(res.getComment());
    result.setRating(mapRating(res.getRating()));
  }
 catch (  ParseException ex) {
  }
  return result;
}","public org.eclipse.mylyn.reviews.tasks.core.ReviewResult mapCurrentReviewResult(ITaskProperties taskProperties){
  Assert.isNotNull(taskProperties);
  if (taskProperties.getNewCommentText() == null || ""String_Node_Str"".equals(taskProperties.getNewCommentText()))   return null;
  ReviewResult result=null;
  try {
    ReviewDslResult res=parser.parseReviewResult(taskProperties.getNewCommentText());
    if (res == null)     return null;
    result=new ReviewResult();
    result.setComment(res.getComment());
    result.setRating(mapRating(res.getRating()));
  }
 catch (  ParseException ex) {
  }
  return result;
}",0.9720853858784894
96523,"private boolean needsReauthentication(int code,IProgressMonitor monitor) throws IOException, GerritLoginException {
  final AuthenticationType authenticationType;
  if (code == HttpStatus.SC_UNAUTHORIZED || code == HttpStatus.SC_FORBIDDEN) {
    authenticationType=AuthenticationType.REPOSITORY;
  }
 else   if (code == HttpStatus.SC_PROXY_AUTHENTICATION_REQUIRED) {
    authenticationType=AuthenticationType.PROXY;
  }
 else {
    return false;
  }
  try {
    location.requestCredentials(authenticationType,null,monitor);
  }
 catch (  UnsupportedRequestException e) {
    throw new GerritLoginException();
  }
  hostConfiguration=WebUtil.createHostConfiguration(httpClient,location,monitor);
  return true;
}","private boolean needsReauthentication(int code,IProgressMonitor monitor) throws IOException, GerritLoginException {
  final AuthenticationType authenticationType;
  if (code == HttpStatus.SC_UNAUTHORIZED || code == HttpStatus.SC_FORBIDDEN) {
    authenticationType=AuthenticationType.REPOSITORY;
  }
 else   if (code == HttpStatus.SC_PROXY_AUTHENTICATION_REQUIRED) {
    authenticationType=AuthenticationType.PROXY;
  }
 else {
    return false;
  }
  requestCredentials(monitor,authenticationType);
  return true;
}",0.7530562347188264
96524,"private int authenticateService(AuthenticationCredentials credentials,IProgressMonitor monitor) throws IOException, GerritException {
  JSonSupport json=new JSonSupport();
  List<Object> args=new ArrayList<Object>(2);
  args.add(credentials.getUserName());
  args.add(credentials.getPassword());
  final String request=json.createRequest(getId(),null,""String_Node_Str"",args);
  JsonEntity entity=new JsonEntity(){
    @Override public String getContent(){
      return request;
    }
  }
;
  PostMethod method=postJsonRequestInternal(""String_Node_Str"",entity,monitor);
  try {
    int code=method.getStatusCode();
    if (code == HttpURLConnection.HTTP_OK) {
      LoginResult result=json.parseResponse(method.getResponseBodyAsString(),LoginResult.class);
      if (result.success) {
        return HttpStatus.SC_TEMPORARY_REDIRECT;
      }
 else {
        return -1;
      }
    }
    return code;
  }
  finally {
    method.releaseConnection();
  }
}","private int authenticateService(AuthenticationCredentials credentials,IProgressMonitor monitor) throws IOException, GerritException {
  JSonSupport json=new JSonSupport();
  List<Object> args=new ArrayList<Object>(2);
  args.add(credentials.getUserName());
  args.add(credentials.getPassword());
  final String request=json.createRequest(getId(),null,""String_Node_Str"",args);
  JsonEntity entity=new JsonEntity(){
    @Override public String getContent(){
      return request;
    }
  }
;
  PostMethod method=postJsonRequestInternal(""String_Node_Str"",entity,monitor);
  try {
    int code=method.getStatusCode();
    if (needsReauthentication(code,monitor)) {
      return -1;
    }
    if (code == HttpURLConnection.HTTP_OK) {
      LoginResult result=json.parseResponse(method.getResponseBodyAsString(),LoginResult.class);
      if (result.success) {
        return HttpStatus.SC_TEMPORARY_REDIRECT;
      }
 else {
        requestCredentials(monitor,AuthenticationType.REPOSITORY);
        return -1;
      }
    }
    return code;
  }
  finally {
    method.releaseConnection();
  }
}",0.932876041156296
96525,"public GerritSystemInfo getInfo(IProgressMonitor monitor) throws GerritException {
  Account account=execute(monitor,new GerritOperation<Account>(){
    @Override public void execute(    IProgressMonitor monitor) throws GerritException {
      getAccountService().myAccount(this);
    }
  }
);
  return new GerritSystemInfo(account);
}","public GerritSystemInfo getInfo(IProgressMonitor monitor) throws GerritException {
  List<ContributorAgreement> contributorAgreements=null;
  Account account=null;
  if (!isAnonymous()) {
    account=execute(monitor,new GerritOperation<Account>(){
      @Override public void execute(      IProgressMonitor monitor) throws GerritException {
        getAccountService().myAccount(this);
      }
    }
);
  }
 else {
    executeQuery(monitor,""String_Node_Str"");
  }
  return new GerritSystemInfo(contributorAgreements,account);
}",0.7610208816705336
96526,"public GerritSystemInfo(Account account){
  this.account=account;
}","public GerritSystemInfo(List<ContributorAgreement> contributorAgreements,Account account){
  this.contributorAgreements=contributorAgreements;
  this.account=account;
}",0.5702127659574469
96527,"public Object invoke(Object proxy,final Method method,Object[] args) throws Throwable {
  final JSonSupport json=new JSonSupport();
  final List<Object> parameters=new ArrayList<Object>(args.length - 1);
  for (int i=0; i < args.length - 1; i++) {
    parameters.add(args[i]);
  }
  @SuppressWarnings(""String_Node_Str"") AsyncCallback<Object> callback=(AsyncCallback<Object>)args[args.length - 1];
  try {
    GerritRequest request=GerritRequest.getCurrentRequest();
    IProgressMonitor monitor=(request != null) ? request.getMonitor() : null;
    String responseMessage=client.postJsonRequest(getServiceUri(),new JsonEntity(){
      @Override public String getContent(){
        return json.createRequest(client.getId(),client.getXsrfKey(),method.getName(),parameters);
      }
    }
,monitor);
    Type[] types=method.getGenericParameterTypes();
    final Type resultType=((ParameterizedType)types[types.length - 1]).getActualTypeArguments()[0];
    Object result=json.parseResponse(responseMessage,resultType);
    callback.onSuccess(result);
  }
 catch (  GerritException e) {
    callback.onFailure(e);
  }
  return null;
}","public Object invoke(Object proxy,final Method method,Object[] args){
  final JSonSupport json=new JSonSupport();
  final List<Object> parameters=new ArrayList<Object>(args.length - 1);
  for (int i=0; i < args.length - 1; i++) {
    parameters.add(args[i]);
  }
  @SuppressWarnings(""String_Node_Str"") AsyncCallback<Object> callback=(AsyncCallback<Object>)args[args.length - 1];
  try {
    GerritRequest request=GerritRequest.getCurrentRequest();
    IProgressMonitor monitor=(request != null) ? request.getMonitor() : null;
    String responseMessage=client.postJsonRequest(getServiceUri(),new JsonEntity(){
      @Override public String getContent(){
        return json.createRequest(client.getId(),client.getXsrfKey(),method.getName(),parameters);
      }
    }
,monitor);
    Type[] types=method.getGenericParameterTypes();
    final Type resultType=((ParameterizedType)types[types.length - 1]).getActualTypeArguments()[0];
    Object result=json.parseResponse(responseMessage,resultType);
    callback.onSuccess(result);
  }
 catch (  Throwable e) {
    callback.onFailure(e);
  }
  return null;
}",0.9811827956989247
96528,"public static List<ReviewSubTask> getReviewSubTasksFor(ITaskContainer taskContainer,ITaskDataManager taskDataManager,IRepositoryModel repositoryModel,IProgressMonitor monitor){
  List<ReviewSubTask> resultList=new ArrayList<ReviewSubTask>();
  try {
    for (    ITask subTask : taskContainer.getChildren()) {
      if (subTask.getSummary().startsWith(""String_Node_Str"")) {
        for (        Review review : getReviewAttachmentFromTask(taskDataManager,repositoryModel,subTask)) {
          if (review.getResult() != null)           resultList.add(new ReviewSubTask(getPatchFile(review.getScope()),getPatchCreationDate(review.getScope()),getAuthorString(review.getScope()),subTask.getOwner(),review.getResult().getRating(),review.getResult().getText(),subTask));
        }
      }
    }
  }
 catch (  Exception e) {
    e.printStackTrace();
  }
  return resultList;
}","public static List<ReviewSubTask> getReviewSubTasksFor(ITaskContainer taskContainer,ITaskDataManager taskDataManager,IRepositoryModel repositoryModel,IProgressMonitor monitor){
  List<ReviewSubTask> resultList=new ArrayList<ReviewSubTask>();
  try {
    for (    ITask subTask : taskContainer.getChildren()) {
      if (ReviewsUtil.isMarkedAsReview(subTask)) {
        for (        Review review : getReviewAttachmentFromTask(taskDataManager,repositoryModel,subTask)) {
          if (review.getResult() != null)           resultList.add(new ReviewSubTask(getPatchFile(review.getScope()),getPatchCreationDate(review.getScope()),getAuthorString(review.getScope()),subTask.getOwner(),review.getResult().getRating(),review.getResult().getText(),subTask));
        }
      }
    }
  }
 catch (  Exception e) {
    e.printStackTrace();
  }
  return resultList;
}",0.9518840579710144
96529,"public boolean performFinish(TaskDataModel model,ScopeItem scope){
  String reviewer=model.getTaskRepository().getUserName();
  try {
    Review review=ReviewFactory.eINSTANCE.createReview();
    review.getScope().add(scope);
    TaskRepository taskRepository=model.getTaskRepository();
    ITask newTask=TasksUiUtil.createOutgoingNewTask(taskRepository.getConnectorKind(),taskRepository.getRepositoryUrl());
    newTask.setAttribute(ReviewConstants.ATTR_REVIEW_FLAG,Boolean.TRUE.toString());
    TaskMapper initializationData=new TaskMapper(model.getTaskData());
    TaskData taskData=TasksUiInternal.createTaskData(taskRepository,initializationData,null,new NullProgressMonitor());
    AbstractRepositoryConnector connector=TasksUiPlugin.getConnector(taskRepository.getConnectorKind());
    connector.getTaskDataHandler().initializeSubTaskData(taskRepository,taskData,model.getTaskData(),new NullProgressMonitor());
    taskData.getRoot().getMappedAttribute(TaskAttribute.SUMMARY).setValue(""String_Node_Str"" + model.getTask().getSummary());
    taskData.getRoot().getMappedAttribute(TaskAttribute.USER_ASSIGNED).setValue(reviewer);
    taskData.getRoot().getMappedAttribute(TaskAttribute.DESCRIPTION).setValue(""String_Node_Str"" + model.getTask().getSummary());
    ReviewsUiPlugin.getDataManager().storeOutgoingTask(newTask,review);
    TasksUiInternal.createAndOpenNewTask(newTask,taskData);
  }
 catch (  CoreException e1) {
    throw new RuntimeException(e1);
  }
  return true;
}","public boolean performFinish(TaskDataModel model,ScopeItem scope){
  String reviewer=model.getTaskRepository().getUserName();
  try {
    Review review=ReviewFactory.eINSTANCE.createReview();
    review.getScope().add(scope);
    TaskRepository taskRepository=model.getTaskRepository();
    ITask newTask=TasksUiUtil.createOutgoingNewTask(taskRepository.getConnectorKind(),taskRepository.getRepositoryUrl());
    ReviewsUtil.markAsReview(newTask);
    TaskMapper initializationData=new TaskMapper(model.getTaskData());
    TaskData taskData=TasksUiInternal.createTaskData(taskRepository,initializationData,null,new NullProgressMonitor());
    AbstractRepositoryConnector connector=TasksUiPlugin.getConnector(taskRepository.getConnectorKind());
    connector.getTaskDataHandler().initializeSubTaskData(taskRepository,taskData,model.getTaskData(),new NullProgressMonitor());
    taskData.getRoot().getMappedAttribute(TaskAttribute.SUMMARY).setValue(""String_Node_Str"" + model.getTask().getSummary());
    taskData.getRoot().getMappedAttribute(TaskAttribute.USER_ASSIGNED).setValue(reviewer);
    taskData.getRoot().getMappedAttribute(TaskAttribute.DESCRIPTION).setValue(""String_Node_Str"" + model.getTask().getSummary());
    ReviewsUiPlugin.getDataManager().storeOutgoingTask(newTask,review);
    TasksUiInternal.createAndOpenNewTask(newTask,taskData);
  }
 catch (  CoreException e1) {
    throw new RuntimeException(e1);
  }
  return true;
}",0.9675213675213676
96530,"private void createResultFields(Composite composite,FormToolkit toolkit){
  final Review review;
  ReviewData rd=ReviewsUiPlugin.getDataManager().getReviewData(getModel().getTask());
  if (rd != null) {
    review=rd.getReview();
  }
 else {
    review=parseFromAttachments();
    if (review != null) {
      ReviewsUiPlugin.getDataManager().storeTask(getModel().getTask(),review);
    }
  }
  Composite resultComposite=toolkit.createComposite(composite);
  resultComposite.setLayoutData(new GridData(SWT.FILL,SWT.DEFAULT,true,false));
  resultComposite.setLayout(new GridLayout(2,false));
  final ComboViewer ratingList=new ComboViewer(resultComposite,SWT.READ_ONLY | SWT.BORDER | SWT.FLAT);
  ratingList.setContentProvider(ArrayContentProvider.getInstance());
  ratingList.setLabelProvider(new LabelProvider(){
    @Override public String getText(    Object element){
      return ((Rating)element).getName();
    }
    @Override public Image getImage(    Object element){
      Rating rating=((Rating)element);
switch (rating) {
case FAILED:
        return Images.REVIEW_RESULT_FAILED.createImage();
case NONE:
      return Images.REVIEW_RESULT_NONE.createImage();
case PASSED:
    return Images.REVIEW_RESULT_PASSED.createImage();
case WARNING:
  return Images.REVIEW_RESULT_WARNING.createImage();
}
return super.getImage(element);
}
}
);
ratingList.setInput(Rating.VALUES);
ratingList.getControl().setLayoutData(new GridData(SWT.LEFT,SWT.TOP,false,false));
final Text commentText=toolkit.createText(resultComposite,""String_Node_Str"",SWT.BORDER | SWT.MULTI);
GridData gd=new GridData(SWT.FILL,SWT.DEFAULT,true,false);
gd.heightHint=30;
commentText.setLayoutData(gd);
if (review.getResult() != null) {
Rating rating=review.getResult().getRating();
ratingList.setSelection(new StructuredSelection(rating));
commentText.setText(review.getResult().getText());
}
commentText.addModifyListener(new ModifyListener(){
public void modifyText(ModifyEvent e){
if (review.getResult() == null) {
review.setResult(ReviewFactory.eINSTANCE.createReviewResult());
}
review.getResult().setText(commentText.getText());
}
}
);
ratingList.addSelectionChangedListener(new ISelectionChangedListener(){
public void selectionChanged(SelectionChangedEvent event){
Rating rating=(Rating)((IStructuredSelection)event.getSelection()).getFirstElement();
if (review.getResult() == null) {
review.setResult(ReviewFactory.eINSTANCE.createReviewResult());
}
review.getResult().setRating(rating);
}
}
);
}","private void createResultFields(Composite composite,FormToolkit toolkit){
  final Review review;
  ReviewData rd=ReviewsUiPlugin.getDataManager().getReviewData(getModel().getTask());
  if (rd != null) {
    review=rd.getReview();
  }
 else {
    review=parseFromAttachments();
    if (review != null) {
      ReviewsUiPlugin.getDataManager().storeTask(getModel().getTask(),review);
    }
  }
  Composite resultComposite=toolkit.createComposite(composite);
  resultComposite.setLayoutData(new GridData(SWT.FILL,SWT.DEFAULT,true,false));
  resultComposite.setLayout(new GridLayout(2,false));
  final ComboViewer ratingList=new ComboViewer(resultComposite,SWT.READ_ONLY | SWT.BORDER | SWT.FLAT);
  ratingList.setContentProvider(ArrayContentProvider.getInstance());
  ratingList.setLabelProvider(new LabelProvider(){
    @Override public String getText(    Object element){
      return ((Rating)element).getName();
    }
    @Override public Image getImage(    Object element){
      Rating rating=((Rating)element);
switch (rating) {
case FAILED:
        return Images.REVIEW_RESULT_FAILED.createImage();
case NONE:
      return Images.REVIEW_RESULT_NONE.createImage();
case PASSED:
    return Images.REVIEW_RESULT_PASSED.createImage();
case WARNING:
  return Images.REVIEW_RESULT_WARNING.createImage();
}
return super.getImage(element);
}
}
);
ratingList.setInput(Rating.VALUES);
ratingList.getControl().setLayoutData(new GridData(SWT.LEFT,SWT.TOP,false,false));
final Text commentText=toolkit.createText(resultComposite,""String_Node_Str"",SWT.BORDER | SWT.MULTI);
GridData gd=new GridData(SWT.FILL,SWT.DEFAULT,true,false);
gd.heightHint=30;
commentText.setLayoutData(gd);
if (review.getResult() != null) {
Rating rating=review.getResult().getRating();
ratingList.setSelection(new StructuredSelection(rating));
String comment=review.getResult().getText();
commentText.setText(comment != null ? comment : ""String_Node_Str"");
}
commentText.addModifyListener(new ModifyListener(){
public void modifyText(ModifyEvent e){
if (review.getResult() == null) {
review.setResult(ReviewFactory.eINSTANCE.createReviewResult());
}
review.getResult().setText(commentText.getText());
}
}
);
ratingList.addSelectionChangedListener(new ISelectionChangedListener(){
public void selectionChanged(SelectionChangedEvent event){
Rating rating=(Rating)((IStructuredSelection)event.getSelection()).getFirstElement();
if (review.getResult() == null) {
review.setResult(ReviewFactory.eINSTANCE.createReviewResult());
}
review.getResult().setRating(rating);
}
}
);
}",0.975249500998004
96531,"public boolean canCustomize(ITask task){
  boolean isReview=Boolean.parseBoolean(task.getAttribute(ReviewConstants.ATTR_REVIEW_FLAG));
  return isReview;
}","public boolean canCustomize(ITask task){
  boolean isReview=ReviewsUtil.isMarkedAsReview(task);
  return isReview;
}",0.6863468634686347
96532,"public void taskMigration(ITask oldTask,ITask newTask){
  ReviewDataManager dataManager=ReviewsUiPlugin.getDataManager();
  Review review=dataManager.getReviewData(oldTask).getReview();
  dataManager.storeTask(newTask,review);
}","public void taskMigration(ITask oldTask,ITask newTask){
  ReviewDataManager dataManager=ReviewsUiPlugin.getDataManager();
  Review review=dataManager.getReviewData(oldTask).getReview();
  dataManager.storeOutgoingTask(newTask,review);
  ReviewsUtil.markAsReview(newTask);
}",0.9101796407185628
96533,"public void afterSubmit(ITask task){
  try {
    Review review=ReviewsUiPlugin.getDataManager().getReviewData(task).getReview();
    TaskRepository taskRepository=TasksUiPlugin.getRepositoryManager().getRepository(task.getRepositoryUrl());
    TaskData taskData=TasksUiPlugin.getTaskDataManager().getTaskData(task);
    TaskAttribute attachmentAttribute=taskData.getAttributeMapper().createTaskAttachment(taskData);
    byte[] attachmentBytes=createAttachment(review);
    ReviewCommentTaskAttachmentSource attachment=new ReviewCommentTaskAttachmentSource(attachmentBytes);
    AbstractRepositoryConnector connector=TasksUi.getRepositoryConnector(taskRepository.getConnectorKind());
    connector.getTaskAttachmentHandler().postContent(taskRepository,task,attachment,""String_Node_Str"",attachmentAttribute,new NullProgressMonitor());
  }
 catch (  CoreException e) {
    e.printStackTrace();
  }
}","public void afterSubmit(ITask task){
  try {
    ReviewData reviewData=ReviewsUiPlugin.getDataManager().getReviewData(task);
    Review review=reviewData.getReview();
    if (reviewData.isOutgoing() || reviewData.isDirty()) {
      TaskRepository taskRepository=TasksUiPlugin.getRepositoryManager().getRepository(task.getRepositoryUrl());
      TaskData taskData=TasksUiPlugin.getTaskDataManager().getTaskData(task);
      TaskAttribute attachmentAttribute=taskData.getAttributeMapper().createTaskAttachment(taskData);
      byte[] attachmentBytes=createAttachment(review);
      ReviewCommentTaskAttachmentSource attachment=new ReviewCommentTaskAttachmentSource(attachmentBytes);
      AbstractRepositoryConnector connector=TasksUi.getRepositoryConnector(taskRepository.getConnectorKind());
      connector.getTaskAttachmentHandler().postContent(taskRepository,task,attachment,""String_Node_Str"",attachmentAttribute,new NullProgressMonitor());
    }
  }
 catch (  CoreException e) {
    e.printStackTrace();
  }
}",0.9188056574122576
96534,"/** 
 * Downloads the content of the message with the specified id and writes it  to the specified   {@link OutputStream}.
 * @param session the session.
 * @param message the {@link Message} to download the content for.
 * @param out the stream to write the message content to.
 * @throws SessionExpiredException if the session has expired and couldn't be renewed.
 * @throws DeltaSyncException on errors returned by the server.
 * @throws IOException on communication errors.
 * @throws IllegalStateException if not logged in.
 */
public void downloadMessageContent(Message message,OutputStream out) throws DeltaSyncException, IOException {
  checkLoggedIn();
  try {
    client.downloadMessageContent(session,message.getId(),out);
  }
 catch (  SessionExpiredException e) {
    session=client.renew(session);
    client.downloadMessageContent(session,message.getId(),out);
  }
}","/** 
 * Downloads the content of the specified   {@link Message} and writes it to the specified  {@link OutputStream}.
 * @param message the {@link Message} to download the content for.
 * @param out the stream to write the message content to.
 * @throws SessionExpiredException if the session has expired and couldn't be renewed.
 * @throws DeltaSyncException on errors returned by the server.
 * @throws IOException on communication errors.
 * @throws IllegalStateException if not logged in.
 */
public void downloadMessageContent(Message message,OutputStream out) throws DeltaSyncException, IOException {
  checkLoggedIn();
  try {
    client.downloadMessageContent(session,message.getId(),out);
  }
 catch (  SessionExpiredException e) {
    session=client.renew(session);
    client.downloadMessageContent(session,message.getId(),out);
  }
}",0.924145917776491
96535,"private int block() throws HU01Exception {
  ByteBuffer b=buffer.slice();
  b.order(buffer.order());
  if (b.remaining() < 20) {
    return 0;
  }
  int magic=b.getInt(0);
  if (magic != SCBH_MAGIC) {
    char[] chars=new char[]{(char)(magic & 0xff),(char)((magic >> 8) & 0xff),(char)((magic >> 16) & 0xff),(char)((magic >> 24) & 0xff)};
    throw new HU01Exception(""String_Node_Str"" + new String(chars) + ""String_Node_Str"");
  }
  int headerSize=b.getInt(4);
  int decompressedBlockSize=b.getInt(8);
  long crc=b.getInt(12) & 0xffffffffL;
  int compressedBlockSize=b.getInt(16);
  if (b.remaining() < headerSize + compressedBlockSize) {
    return 0;
  }
  if (decoded == null || decoded.capacity() < decompressedBlockSize) {
    decoded=allocateBuffer(decompressedBlockSize);
  }
  decoded.clear();
  if (compressedBlockSize == decompressedBlockSize && decompressedBlockSize < TABLE_SIZE) {
    b.position(headerSize);
    b.limit(headerSize + compressedBlockSize);
    decoded.put(b);
  }
 else {
    b.position(headerSize);
    b.limit(b.position() + TABLE_SIZE);
    if (!HU01.build_decompression_table(b.slice(),table)) {
      throw new HU01Exception(""String_Node_Str"");
    }
    b.position(headerSize + TABLE_SIZE);
    b.limit(headerSize + compressedBlockSize);
    HU01.decompress_hu01_block(b.slice(),table,decoded);
  }
  decoded.position(0);
  decoded.limit(decompressedBlockSize);
  buffer.position(buffer.position() + headerSize + compressedBlockSize);
  CRC32 crc32=new CRC32();
  crc32.update(decoded.array(),decoded.position(),decoded.limit());
  if (crc32.getValue() != crc) {
    throw new HU01Exception(""String_Node_Str"" + Long.toHexString(crc) + ""String_Node_Str""+ Long.toHexString(crc32.getValue())+ ""String_Node_Str"");
  }
  return decompressedBlockSize;
}","private int block() throws HU01Exception {
  ByteBuffer b=buffer.slice();
  b.order(buffer.order());
  if (b.remaining() < 20) {
    return 0;
  }
  int magic=b.getInt(0);
  if (magic != SCBH_MAGIC) {
    char[] chars=new char[]{(char)(magic & 0xff),(char)((magic >> 8) & 0xff),(char)((magic >> 16) & 0xff),(char)((magic >> 24) & 0xff)};
    throw new HU01Exception(""String_Node_Str"" + new String(chars) + ""String_Node_Str"");
  }
  int headerSize=b.getInt(4);
  int decompressedBlockSize=b.getInt(8);
  long crc=b.getInt(12) & 0xffffffffL;
  int compressedBlockSize=b.getInt(16);
  if (b.remaining() < headerSize + compressedBlockSize) {
    return 0;
  }
  if (decoded == null || decoded.capacity() < decompressedBlockSize) {
    decoded=allocateBuffer(decompressedBlockSize);
  }
  decoded.clear();
  if (compressedBlockSize == decompressedBlockSize && decompressedBlockSize < 2048) {
    b.position(headerSize);
    b.limit(headerSize + compressedBlockSize);
    decoded.put(b);
  }
 else {
    b.position(headerSize);
    b.limit(b.position() + TABLE_SIZE);
    if (!HU01.build_decompression_table(b.slice(),table)) {
      throw new HU01Exception(""String_Node_Str"");
    }
    b.position(headerSize + TABLE_SIZE);
    b.limit(headerSize + compressedBlockSize);
    HU01.decompress_hu01_block(b.slice(),table,decoded);
  }
  decoded.position(0);
  decoded.limit(decompressedBlockSize);
  buffer.position(buffer.position() + headerSize + compressedBlockSize);
  CRC32 crc32=new CRC32();
  crc32.update(decoded.array(),decoded.position(),decoded.limit());
  if (crc32.getValue() != crc) {
    throw new HU01Exception(""String_Node_Str"" + Long.toHexString(crc) + ""String_Node_Str""+ Long.toHexString(crc32.getValue())+ ""String_Node_Str"");
  }
  return decompressedBlockSize;
}",0.9960629921259844
96536,"public boolean spawnWolf(Player p,WolfAggro aggro){
  Wolf w=(Wolf)p.getWorld().spawnCreature(p.getLocation(),CreatureType.WOLF);
  w.setHealth(20);
  if (aggro != null && aggro == WolfAggro.FRIEND) {
    EntityTameEvent event=new EntityTameEvent(w,p);
    this.getServer().getPluginManager().callEvent(event);
    if (event.isCancelled()) {
      w.damage(200,w);
      w.remove();
      p.sendMessage(chatPrefix + ""String_Node_Str"");
      return false;
    }
 else {
      w.setOwner(p);
      w.setSitting(false);
      p.sendMessage(chatPrefix + ""String_Node_Str"");
    }
  }
 else   if (aggro != null && aggro == WolfAggro.ANGRY) {
    w.setAngry(true);
    p.sendMessage(chatPrefixError + ""String_Node_Str"");
  }
 else {
    p.sendMessage(chatPrefix + ""String_Node_Str"");
  }
  return true;
}","public boolean spawnWolf(Player p,WolfAggro aggro){
  Wolf w=(Wolf)p.getWorld().spawnCreature(p.getLocation(),CreatureType.WOLF);
  w.setHealth(8);
  if (aggro != null && aggro == WolfAggro.FRIEND) {
    EntityTameEvent event=new EntityTameEvent(w,p);
    this.getServer().getPluginManager().callEvent(event);
    if (event.isCancelled()) {
      w.damage(200,w);
      w.remove();
      p.sendMessage(chatPrefix + ""String_Node_Str"");
      return false;
    }
 else {
      w.setOwner(p);
      w.setSitting(false);
      p.sendMessage(chatPrefix + ""String_Node_Str"");
    }
  }
 else   if (aggro != null && aggro == WolfAggro.ANGRY) {
    w.setAngry(true);
    p.sendMessage(chatPrefixError + ""String_Node_Str"");
  }
 else {
    p.sendMessage(chatPrefix + ""String_Node_Str"");
  }
  return true;
}",0.9981214777708204
96537,"public WPWorld getWolfPoundWorld(String world){
  if (this.worlds.containsKey(world)) {
    return this.worlds.get(world);
  }
  return this.globalWorld;
}","/** 
 * Returns the existing wolfPound world that exists, or creates one if the world is a loaded world, but not created, or the global world.
 * @param world The worldname to get.
 * @return A WolfPound World
 */
public WPWorld getWolfPoundWorld(String world){
  if (this.worlds.containsKey(world)) {
    return this.worlds.get(world);
  }
 else   if (this.getServer().getWorld(world) != null) {
    WPWorld w=new WPWorld(world,configWP);
    this.worlds.put(world,w);
    return this.worlds.get(world);
  }
  return this.globalWorld;
}",0.4479768786127168
96538,"@Override public void runCommand(CommandSender sender,List<String> args){
  WPWorld world=this.plugin.getGlobalWorld();
  if (args.size() == 3 && !args.get(2).equalsIgnoreCase(""String_Node_Str"")) {
    world=this.plugin.getWolfPoundWorld(args.get(2));
  }
  if (validateCommand(args.get(0),args.get(1),world)) {
    if (args.size() < 3 && !(sender instanceof Player)) {
      sender.sendMessage(""String_Node_Str"");
      return;
    }
    String worldName=args.get(2);
    if (world.equals(this.plugin.getGlobalWorld())) {
      worldName=""String_Node_Str"";
    }
    sender.sendMessage(ChatColor.GREEN + ""String_Node_Str"" + ChatColor.WHITE+ args.get(0)+ ""String_Node_Str""+ args.get(1)+ ""String_Node_Str""+ worldName+ ""String_Node_Str"");
  }
 else {
    sender.sendMessage(""String_Node_Str"" + args.get(0) + ""String_Node_Str""+ args.get(1));
  }
}","@Override public void runCommand(CommandSender sender,List<String> args){
  WPWorld world=this.plugin.getGlobalWorld();
  if (args.size() == 3 && !args.get(2).equalsIgnoreCase(""String_Node_Str"")) {
    world=this.plugin.getWolfPoundWorld(args.get(2));
  }
  if (validateCommand(args.get(0),args.get(1),world)) {
    if (args.size() < 3 && !(sender instanceof Player)) {
      sender.sendMessage(""String_Node_Str"");
      return;
    }
    String worldName=args.get(2);
    world=this.plugin.getWolfPoundWorld(worldName);
    if (world.equals(this.plugin.getGlobalWorld())) {
      worldName=""String_Node_Str"";
    }
    sender.sendMessage(ChatColor.GREEN + ""String_Node_Str"" + ChatColor.WHITE+ args.get(0)+ ""String_Node_Str""+ args.get(1)+ ""String_Node_Str""+ worldName+ ""String_Node_Str"");
  }
 else {
    sender.sendMessage(""String_Node_Str"" + args.get(0) + ""String_Node_Str""+ args.get(1));
  }
}",0.9701149425287356
96539,"@Override public void runCommand(CommandSender sender,List<String> args){
  if (sender instanceof Player) {
    sender.sendMessage(""String_Node_Str"");
  }
  logAndAddToPasteBinBuffer(""String_Node_Str"" + this.plugin.getDescription().getVersion());
  logAndAddToPasteBinBuffer(""String_Node_Str"" + this.plugin.getServer().getVersion());
  logAndAddToPasteBinBuffer(""String_Node_Str"" + this.plugin.getBanker().getEconPlugin().getEconUsed());
  logAndAddToPasteBinBuffer(""String_Node_Str"" + this.plugin.getPermissions().getType());
  logAndAddToPasteBinBuffer(""String_Node_Str"");
  logAndAddToPasteBinBuffer(""String_Node_Str"" + this.plugin.getConfig().getString(""String_Node_Str"",""String_Node_Str""));
  logAndAddToPasteBinBuffer(""String_Node_Str"" + this.plugin.getConfig().getString(""String_Node_Str"",""String_Node_Str""));
  logAndAddToPasteBinBuffer(""String_Node_Str"" + this.plugin.getConfig().getString(""String_Node_Str"",""String_Node_Str""));
  logAndAddToPasteBinBuffer(""String_Node_Str"" + this.plugin.getConfig().getString(""String_Node_Str"",""String_Node_Str""));
  logAndAddToPasteBinBuffer(""String_Node_Str"" + this.plugin.getConfig().getString(""String_Node_Str"",""String_Node_Str""));
  logAndAddToPasteBinBuffer(""String_Node_Str"" + this.plugin.getConfig().getString(""String_Node_Str"",""String_Node_Str""));
  List<String> keys=this.plugin.getConfig().getKeys(""String_Node_Str"");
  if (keys != null && keys.size() > 0) {
    for (    String key : keys) {
      logAndAddToPasteBinBuffer(""String_Node_Str"" + key);
      logAndAddToPasteBinBuffer(""String_Node_Str"" + this.plugin.getConfig().getString(""String_Node_Str"" + key,""String_Node_Str""));
      logAndAddToPasteBinBuffer(""String_Node_Str"" + this.plugin.getConfig().getString(""String_Node_Str"" + key,""String_Node_Str""));
      logAndAddToPasteBinBuffer(""String_Node_Str"" + this.plugin.getConfig().getString(""String_Node_Str"" + key,""String_Node_Str""));
      logAndAddToPasteBinBuffer(""String_Node_Str"" + this.plugin.getConfig().getString(""String_Node_Str"" + key,""String_Node_Str""));
    }
  }
  logAndAddToPasteBinBuffer(""String_Node_Str"");
  if (args.size() == 1 && args.get(0).equalsIgnoreCase(""String_Node_Str"")) {
    String pasteBinUrl=postToPasteBin();
    sender.sendMessage(""String_Node_Str"" + ChatColor.GREEN + pasteBinUrl);
    this.plugin.log(Level.INFO,""String_Node_Str"" + pasteBinUrl);
  }
}","@Override public void runCommand(CommandSender sender,List<String> args){
  if (sender instanceof Player) {
    sender.sendMessage(""String_Node_Str"");
  }
  logAndAddToPasteBinBuffer(""String_Node_Str"" + this.plugin.getDescription().getVersion());
  logAndAddToPasteBinBuffer(""String_Node_Str"" + this.plugin.getServer().getVersion());
  logAndAddToPasteBinBuffer(""String_Node_Str"" + this.plugin.getBanker().getEconPlugin().getEconUsed());
  logAndAddToPasteBinBuffer(""String_Node_Str"" + this.plugin.getPermissions().getType());
  logAndAddToPasteBinBuffer(""String_Node_Str"" + this.plugin.getConfig().getString(""String_Node_Str"",""String_Node_Str""));
  logAndAddToPasteBinBuffer(""String_Node_Str"");
  logAndAddToPasteBinBuffer(""String_Node_Str"");
  logAndAddToPasteBinBuffer(""String_Node_Str"" + this.plugin.getConfig().getString(""String_Node_Str"",""String_Node_Str""));
  logAndAddToPasteBinBuffer(""String_Node_Str"" + this.plugin.getConfig().getString(""String_Node_Str"",""String_Node_Str""));
  logAndAddToPasteBinBuffer(""String_Node_Str"" + this.plugin.getConfig().getString(""String_Node_Str"",""String_Node_Str""));
  logAndAddToPasteBinBuffer(""String_Node_Str"" + this.plugin.getConfig().getString(""String_Node_Str"",""String_Node_Str""));
  logAndAddToPasteBinBuffer(""String_Node_Str"");
  List<String> keys=this.plugin.getConfig().getKeys(""String_Node_Str"");
  if (keys != null && keys.size() > 0) {
    for (    String key : keys) {
      logAndAddToPasteBinBuffer(""String_Node_Str"" + key);
      logAndAddToPasteBinBuffer(""String_Node_Str"" + this.plugin.getConfig().getString(""String_Node_Str"" + key + ""String_Node_Str"",""String_Node_Str""));
      logAndAddToPasteBinBuffer(""String_Node_Str"" + this.plugin.getConfig().getString(""String_Node_Str"" + key + ""String_Node_Str"",""String_Node_Str""));
      logAndAddToPasteBinBuffer(""String_Node_Str"" + this.plugin.getConfig().getString(""String_Node_Str"" + key + ""String_Node_Str"",""String_Node_Str""));
      logAndAddToPasteBinBuffer(""String_Node_Str"" + this.plugin.getConfig().getString(""String_Node_Str"" + key + ""String_Node_Str"",""String_Node_Str""));
      logAndAddToPasteBinBuffer(""String_Node_Str"");
    }
  }
  logAndAddToPasteBinBuffer(""String_Node_Str"");
  if (args.size() == 1 && args.get(0).equalsIgnoreCase(""String_Node_Str"")) {
    String pasteBinUrl=postToPasteBin();
    sender.sendMessage(""String_Node_Str"" + ChatColor.GREEN + pasteBinUrl);
    this.plugin.log(Level.INFO,""String_Node_Str"" + pasteBinUrl);
  }
}",0.8970679975046787
96540,"public void removeWorld(String string){
  configWP.removeProperty(ADOPT_KEY + ""String_Node_Str"" + MULTI_WORLD_KEY+ ""String_Node_Str""+ string);
  configWP.save();
}","public void removeWorld(String string,Player p){
  if (configWP.getProperty(ADOPT_KEY + ""String_Node_Str"" + MULTI_WORLD_KEY+ ""String_Node_Str""+ string) != null) {
    p.sendMessage(chatPrefix + ""String_Node_Str"" + ChatColor.GREEN+ string+ ChatColor.WHITE+ ""String_Node_Str"");
    configWP.removeProperty(ADOPT_KEY + ""String_Node_Str"" + MULTI_WORLD_KEY+ ""String_Node_Str""+ string);
    configWP.save();
    this.adoptAggroWorlds.remove(string);
    this.adoptLimitWorlds.remove(string);
    this.adoptPriceWorlds.remove(string);
    this.adoptTypeWorlds.remove(string);
  }
}",0.3772048846675712
96541,"public void sendWolfPrice(Player p,String world){
  p.sendMessage(world);
  if (hasPermission(p,PERM_ADOPT)) {
    if (world.equalsIgnoreCase(""String_Node_Str"")) {
      String everywhere=""String_Node_Str"";
      for (      String s : this.adoptPriceWorlds.keySet()) {
        getHumanReadablePriceMessage(p,this.adoptPriceWorlds.get(s),this.adoptTypeWorlds.get(s),""String_Node_Str"" + ChatColor.AQUA + s+ ChatColor.WHITE+ ""String_Node_Str"");
        everywhere=""String_Node_Str"";
      }
      getHumanReadablePriceMessage(p,this.adoptPrice,this.adoptType,ChatColor.AQUA + everywhere + ChatColor.WHITE+ ""String_Node_Str"");
    }
 else     if (adoptPriceWorlds.containsKey(world) && adoptTypeWorlds.containsKey(world)) {
      getHumanReadablePriceMessage(p,this.adoptPriceWorlds.get(world),this.adoptTypeWorlds.get(world),""String_Node_Str"" + ChatColor.AQUA + world+ ChatColor.WHITE+ ""String_Node_Str"");
    }
 else {
      getHumanReadablePriceMessage(p,this.adoptPrice,this.adoptType,""String_Node_Str"" + ChatColor.AQUA + world+ ChatColor.WHITE+ ""String_Node_Str"");
    }
  }
}","public void sendWolfPrice(Player p,String world){
  if (hasPermission(p,PERM_ADOPT)) {
    if (world.equalsIgnoreCase(""String_Node_Str"")) {
      String everywhere=""String_Node_Str"";
      for (      String s : this.adoptPriceWorlds.keySet()) {
        getHumanReadablePriceMessage(p,this.adoptPriceWorlds.get(s),this.adoptTypeWorlds.get(s),""String_Node_Str"" + ChatColor.AQUA + s+ ChatColor.WHITE+ ""String_Node_Str"");
        everywhere=""String_Node_Str"";
      }
      getHumanReadablePriceMessage(p,this.adoptPrice,this.adoptType,ChatColor.AQUA + everywhere + ChatColor.WHITE+ ""String_Node_Str"");
    }
 else     if (adoptPriceWorlds.containsKey(world) && adoptTypeWorlds.containsKey(world)) {
      getHumanReadablePriceMessage(p,this.adoptPriceWorlds.get(world),this.adoptTypeWorlds.get(world),""String_Node_Str"" + ChatColor.AQUA + world+ ChatColor.WHITE+ ""String_Node_Str"");
    }
 else {
      getHumanReadablePriceMessage(p,this.adoptPrice,this.adoptType,""String_Node_Str"" + ChatColor.AQUA + world+ ChatColor.WHITE+ ""String_Node_Str"");
    }
  }
}",0.9887323943661972
96542,"@Override public boolean onCommand(CommandSender sender,Command command,String label,String[] args){
  return false;
}","@Override public boolean onCommand(CommandSender sender,Command command,String label,String[] args){
  Player p=null;
  if (sender instanceof Player) {
    p=(Player)sender;
  }
  if (args.length == 1) {
    if (p != null) {
      this.plugin.changeSetting(""String_Node_Str"",args[0],p.getWorld().getName(),p);
      return true;
    }
  }
 else   if (args.length == 2) {
    if (p != null) {
      if (isAKeyword(args[1],LIMIT_KEYWORDS)) {
        this.plugin.changeSetting(""String_Node_Str"",args[0],""String_Node_Str"",p);
      }
 else       if (isValidWorld(args[1])) {
        this.plugin.changeSetting(""String_Node_Str"",args[0],getWorldName(args[1]),p);
      }
 else {
        return false;
      }
      return true;
    }
  }
  return false;
}",0.2376009227220299
96543,"@Override public boolean onCommand(CommandSender sender,Command command,String label,String[] args){
  Player p=null;
  if (sender instanceof Player) {
    p=(Player)sender;
  }
  if (args.length == 0) {
    if (p != null) {
      plugin.sendWolfPrice(p,p.getWorld().getName());
      return true;
    }
 else {
      WolfPound.log.info(""String_Node_Str"");
      return true;
    }
  }
 else   if (args.length == 1) {
    if (isAKeyword(args[0],PRICE_KEYWORDS)) {
      if (p != null) {
        this.plugin.sendWolfPrice((Player)sender,""String_Node_Str"");
      }
 else {
        WolfPound.log.info(""String_Node_Str"");
      }
    }
 else     if (isValidWorld(args[0])) {
      if (p != null) {
        this.plugin.sendWolfPrice((Player)sender,getWorldName(args[0]));
      }
 else {
        WolfPound.log.info(""String_Node_Str"");
      }
    }
 else     if (!(sender instanceof Player)) {
      WolfPound.log.info(""String_Node_Str"");
    }
    return true;
  }
  return false;
}","@Override public boolean onCommand(CommandSender sender,Command command,String label,String[] args){
  Player p=null;
  if (sender instanceof Player) {
    p=(Player)sender;
  }
  if (args.length == 0) {
    if (p != null) {
      plugin.sendWolfPrice(p,p.getWorld().getName());
      return true;
    }
 else {
      WolfPound.log.info(""String_Node_Str"");
      return true;
    }
  }
 else   if (args.length == 1) {
    if (isAKeyword(args[0],PRICE_KEYWORDS)) {
      if (p != null) {
        this.plugin.sendWolfPrice((Player)sender,""String_Node_Str"");
      }
 else {
        WolfPound.log.info(""String_Node_Str"");
      }
    }
 else     if (isValidWorld(args[0])) {
      if (p != null) {
        this.plugin.sendWolfPrice((Player)sender,getWorldName(args[0]));
      }
 else {
        WolfPound.log.info(""String_Node_Str"");
      }
    }
 else     if (p == null) {
      WolfPound.log.info(""String_Node_Str"");
    }
 else {
      return false;
    }
    return true;
  }
  return false;
}",0.9270516717325228
96544,"@Override public boolean onCommand(CommandSender sender,Command command,String label,String[] args){
  if (sender instanceof Player) {
    Player player=(Player)sender;
    if (plugin.hasPermission(player,WolfPound.PERM_ADMIN) && args.length == 1) {
      if (isValidWorld(args[0])) {
        this.plugin.removeWorld(getWorldName(args[0]));
      }
 else       if (isAKeyword(args[0],RESET_KEYWORDS)) {
        for (        World w : this.plugin.getServer().getWorlds()) {
          this.plugin.removeWorld(w.getName());
        }
      }
 else {
        return false;
      }
      return true;
    }
  }
  return false;
}","@Override public boolean onCommand(CommandSender sender,Command command,String label,String[] args){
  if (sender instanceof Player) {
    Player player=(Player)sender;
    if (plugin.hasPermission(player,WolfPound.PERM_ADMIN) && args.length == 1) {
      if (isValidWorld(args[0])) {
        this.plugin.removeWorld(getWorldName(args[0]),player);
      }
 else       if (isAKeyword(args[0],RESET_KEYWORDS)) {
        for (        World w : this.plugin.getServer().getWorlds()) {
          this.plugin.removeWorld(w.getName(),player);
        }
      }
 else {
        return false;
      }
      return true;
    }
  }
  return false;
}",0.9888888888888888
96545,"@Override public boolean onCommand(CommandSender sender,Command command,String label,String[] args){
  return false;
}","@Override public boolean onCommand(CommandSender sender,Command command,String label,String[] args){
  Player p=null;
  if (sender instanceof Player) {
    p=(Player)sender;
  }
  if (args.length == 1) {
    if (p != null) {
      this.plugin.changeSetting(""String_Node_Str"",args[0],p.getWorld().getName(),p);
      return true;
    }
  }
 else   if (args.length == 2) {
    if (p != null) {
      if (checkKeyword(args[1],AGGRO_KEYWORDS) == ""String_Node_Str"") {
        this.plugin.changeSetting(""String_Node_Str"",args[0],""String_Node_Str"",p);
      }
 else       if (isValidWorld(args[1])) {
        this.plugin.changeSetting(""String_Node_Str"",args[0],getWorldName(args[1]),p);
      }
 else {
        return false;
      }
      return true;
    }
  }
  return false;
}",0.2314606741573033
96546,"@Override public boolean onCommand(CommandSender sender,Command command,String label,String[] args){
  Player p=null;
  if (sender instanceof Player) {
    p=(Player)sender;
  }
  if (args.length == 1) {
    if (p != null) {
      this.plugin.changeSetting(""String_Node_Str"",args[0],p.getWorld().getName(),p);
      return true;
    }
  }
 else   if (args.length == 2) {
    if (p != null) {
      if (isAKeyword(args[1],PRICE_KEYWORDS)) {
        this.plugin.changeSetting(""String_Node_Str"",args[0],""String_Node_Str"",p);
      }
 else       if (isValidWorld(args[1])) {
        this.plugin.changeSetting(""String_Node_Str"",args[0],getWorldName(args[1]),p);
      }
 else {
        return false;
      }
      return true;
    }
  }
  return false;
}","@Override public boolean onCommand(CommandSender sender,Command command,String label,String[] args){
  Player p=null;
  if (sender instanceof Player) {
    p=(Player)sender;
  }
  if (args.length == 1) {
    if (p != null) {
      if (args[0].equalsIgnoreCase(""String_Node_Str"")) {
        args[0]=""String_Node_Str"";
      }
      this.plugin.changeSetting(""String_Node_Str"",args[0],p.getWorld().getName(),p);
      return true;
    }
  }
 else   if (args.length == 2) {
    if (p != null) {
      if (isAKeyword(args[1],PRICE_KEYWORDS)) {
        this.plugin.changeSetting(""String_Node_Str"",args[0],""String_Node_Str"",p);
      }
 else       if (isValidWorld(args[1])) {
        this.plugin.changeSetting(""String_Node_Str"",args[0],getWorldName(args[1]),p);
      }
 else {
        return false;
      }
      return true;
    }
  }
  return false;
}",0.9374217772215268
96547,"@Override public boolean onCommand(CommandSender sender,Command command,String label,String[] args){
  return false;
}","@Override public boolean onCommand(CommandSender sender,Command command,String label,String[] args){
  Player p=null;
  if (sender instanceof Player) {
    p=(Player)sender;
  }
  if (args.length == 1) {
    if (p != null) {
      this.plugin.changeSetting(""String_Node_Str"",args[0],p.getWorld().getName(),p);
      return true;
    }
  }
 else   if (args.length == 2) {
    if (p != null) {
      if (isAKeyword(args[1],TYPE_KEYWORDS)) {
        this.plugin.changeSetting(""String_Node_Str"",args[0],""String_Node_Str"",p);
      }
 else       if (isValidWorld(args[1])) {
        this.plugin.changeSetting(""String_Node_Str"",args[0],getWorldName(args[1]),p);
      }
 else {
        return false;
      }
      return true;
    }
  }
  return false;
}",0.2378752886836027
96548,"public GenericBank loadEconPlugin(){
  loadiConomy();
  loadBOSEconomy();
  loadRealShopEconomy();
  loadEssentialsEconomoy();
  loadDefaultItemEconomy();
  return this.bank;
}","/** 
 * Load an econ plugin. Plugins are loaded in this order: iConomy, BOSEconomy, RealShop, Essentials and simple items
 * @return The GenericBank object to process payments.
 */
public GenericBank loadEconPlugin(){
  loadiConomy();
  loadBOSEconomy();
  loadRealShopEconomy();
  loadEssentialsEconomoy();
  loadDefaultItemEconomy();
  return this.bank;
}",0.4840525328330206
96549,"private void loadiConomy(){
  iConomy iConomyPlugin=(iConomy)plugin.getServer().getPluginManager().getPlugin(""String_Node_Str"");
  if (iConomyPlugin != null && this.bank == null) {
    this.bank=new iConomyBank(iConomyPlugin);
    log.info(logPrefix + ""String_Node_Str"" + plugin.getDescription().getFullName());
  }
}","private void loadiConomy(){
  if (this.bank == null) {
    Plugin iConomyTest=plugin.getServer().getPluginManager().getPlugin(""String_Node_Str"");
    try {
      if (iConomyTest != null && iConomyTest instanceof com.iConomy.iConomy) {
        this.bank=new iConomyBank((iConomy)iConomyTest);
        log.info(logPrefix + ""String_Node_Str"" + plugin.getDescription().getFullName());
      }
    }
 catch (    NoClassDefFoundError e) {
      if (iConomyTest != null) {
        loadiConomy4X();
      }
    }
  }
}",0.5973397823458283
96550,"public GenericBank getEconPlugin(){
  return this.bank;
}","/** 
 * Returns the AllPay GenericBank object that you can issue calls to and from
 * @return The GenericBank object to process payments.
 */
public GenericBank getEconPlugin(){
  return this.bank;
}",0.4453125
96551,"/** 
 * Simply prints the economy being used, this is shown to help users debug issues with other plugin interfacing.
 * @return The economy plugin used
 */
public String getEconUsed(){
  return ""String_Node_Str"";
}","/** 
 * Simply prints the economy being used, this is shown to help users debug issues with other plugin interfacing.
 * @return The economy plugin used
 */
public abstract String getEconUsed();",0.904645476772616
96552,"public boolean payForWolf(Player p,double cost,int type){
  if (cost == 0 || (isUsing(Bank.None) && type == -1))   return true;
 else   if (type != -1) {
    ItemStack item=p.getItemInHand();
    int finalamount=item.getAmount() - (int)cost;
    if (finalamount > 0) {
      p.getItemInHand().setAmount(finalamount);
    }
 else {
      p.getInventory().remove(item);
    }
  }
 else   if (isUsing(Bank.iConomy)) {
    iConomy.getBank().getAccount(p.getName()).subtract(cost);
    return true;
  }
 else   if (isUsing(Bank.BOSEconomy)) {
    int intPrice=(int)(-1 * cost);
    return BOSEcon.addPlayerMoney(p.getName(),intPrice,true);
  }
 else   if (isUsing(Bank.RealShop)) {
    double totalmoney=RealEcon.getBalance(p.getName());
    return RealEcon.setBalance(p.getName(),totalmoney - cost);
  }
 else   if (isUsing(Bank.Essentials)) {
    User user=User.get(p);
    user.takeMoney(cost);
    return true;
  }
  return false;
}","public boolean payForWolf(Player p,double cost,int type){
  if (cost <= 0 || (isUsing(Bank.None) && type == -1))   return true;
 else   if (type != -1) {
    ItemStack item=p.getItemInHand();
    int finalamount=item.getAmount() - (int)cost;
    if (finalamount > 0) {
      p.getItemInHand().setAmount(finalamount);
    }
 else {
      p.getInventory().remove(item);
    }
  }
 else   if (isUsing(Bank.iConomy)) {
    iConomy.getBank().getAccount(p.getName()).subtract(cost);
    return true;
  }
 else   if (isUsing(Bank.BOSEconomy)) {
    int intPrice=(int)(-1 * cost);
    return BOSEcon.addPlayerMoney(p.getName(),intPrice,true);
  }
 else   if (isUsing(Bank.RealShop)) {
    double totalmoney=RealEcon.getBalance(p.getName());
    return RealEcon.setBalance(p.getName(),totalmoney - cost);
  }
 else   if (isUsing(Bank.Essentials)) {
    User user=User.get(p);
    user.takeMoney(cost);
    return true;
  }
  return false;
}",0.9989258861439312
96553,"public void spawnWolf(Player p,String aggro){
  Wolf w=(Wolf)p.getWorld().spawnCreature(p.getLocation(),CreatureType.WOLF);
  if (aggro != null && aggro.equals(ADOPT_FRIEND)) {
    EntityWolf newMcwolf=((CraftWolf)w).getHandle();
    newMcwolf.a(p.getName());
    newMcwolf.d(true);
    newMcwolf.b(false);
    p.sendMessage(chatPrefix + ""String_Node_Str"");
  }
 else   if (aggro != null && aggro.equals(ADOPT_ANGRY)) {
    w.setAngry(true);
    p.sendMessage(chatPrefixError + ""String_Node_Str"");
  }
 else {
    p.sendMessage(chatPrefix + ""String_Node_Str"");
  }
}","public void spawnWolf(Player p,String aggro){
  Wolf w=(Wolf)p.getWorld().spawnCreature(p.getLocation(),CreatureType.WOLF);
  if (aggro != null && aggro.equals(ADOPT_FRIEND)) {
    EntityWolf newMcwolf=((CraftWolf)w).getHandle();
    newMcwolf.a(p.getName());
    newMcwolf.d(true);
    newMcwolf.setSitting(false);
    p.sendMessage(chatPrefix + ""String_Node_Str"");
  }
 else   if (aggro != null && aggro.equals(ADOPT_ANGRY)) {
    w.setAngry(true);
    p.sendMessage(chatPrefixError + ""String_Node_Str"");
  }
 else {
    p.sendMessage(chatPrefix + ""String_Node_Str"");
  }
}",0.990359333917616
96554,"/** 
 * Does the user have the amount of money specified?
 * @param p The Player
 * @param m The amount of money to check if the player has
 * @return true if the player has at least m money, false if not
 */
public boolean hasMoney(Player p,double m,int type){
  boolean playerHasEnough=false;
  if (m == 0 || (isUsing(Bank.None) && type == -1)) {
    playerHasEnough=true;
  }
 else   if (type != -1) {
    ItemStack item=p.getItemInHand();
    playerHasEnough=(item.getTypeId() == type && item.getAmount() >= m);
  }
 else   if (isUsing(Bank.iConomy)) {
    playerHasEnough=iConomy.getBank().getAccount(p.getName()).hasEnough(m);
  }
 else   if (isUsing(Bank.BOSEconomy)) {
    playerHasEnough=BOSEcon.getPlayerMoney(p.getName()) >= m;
  }
 else   if (isUsing(Bank.RealShop)) {
    playerHasEnough=RealEcon.getBalance(p.getName()) >= m;
  }
 else   if (isUsing(Bank.Essentials)) {
    User user=User.get(p);
    playerHasEnough=(user.getMoney() >= m);
  }
  if (!playerHasEnough) {
    userIsTooPoor(p,type);
  }
  return playerHasEnough;
}","/** 
 * Does the user have the amount of money specified?
 * @param p The Player
 * @param m The amount of money to check if the player has
 * @return true if the player has at least m money, false if not
 */
public boolean hasMoney(Player p,double m,int type){
  boolean playerHasEnough=false;
  if (m == 0 || (isUsing(Bank.None) && type == -1)) {
    playerHasEnough=true;
  }
 else   if (type != -1) {
    ItemStack item=p.getItemInHand();
    playerHasEnough=(item.getTypeId() == type && item.getAmount() >= m);
  }
 else   if (isUsing(Bank.iConomy)) {
    playerHasEnough=iConomy.getBank().getAccount(p.getName()).hasEnough(m);
  }
 else   if (isUsing(Bank.BOSEconomy)) {
    playerHasEnough=BOSEcon.getPlayerMoney(p.getName()) >= m;
  }
 else   if (isUsing(Bank.RealShop)) {
    playerHasEnough=RealEcon.getBalance(p.getName()) >= m;
    WolfPound.log.info(""String_Node_Str"" + RealEcon.getBalance(p.getName()));
  }
 else   if (isUsing(Bank.Essentials)) {
    User user=User.get(p);
    playerHasEnough=(user.getMoney() >= m);
  }
  if (!playerHasEnough) {
    userIsTooPoor(p,type);
  }
  return playerHasEnough;
}",0.9639556377079482
96555,"private boolean changeSetting(String command,String value,String world,Player p){
  String worldString=world;
  world=MULTI_WORLD_KEY + ""String_Node_Str"" + world+ ""String_Node_Str"";
  if (command.matches(""String_Node_Str"")) {
    world=""String_Node_Str"";
  }
  if (command.toLowerCase().matches(""String_Node_Str"")) {
    try {
      double newprice=Double.parseDouble(value);
      configWP.setProperty(ADOPT_KEY + ""String_Node_Str"" + world+ PRICE_KEY,newprice);
      configWP.save();
      if (world.equalsIgnoreCase(""String_Node_Str"")) {
        adoptPrice=newprice;
        p.sendMessage(chatPrefix + ""String_Node_Str"");
      }
 else {
        checkLimitProperty(worldString);
        checkTypeProperty(worldString);
        checkAgroProperty(worldString);
        adoptPriceWorlds.put(worldString,newprice);
        p.sendMessage(chatPrefix + ""String_Node_Str"" + worldString+ ""String_Node_Str"");
      }
      return true;
    }
 catch (    NumberFormatException e) {
      if (adoptPriceWorlds.containsKey(value)) {
        sendWolfPrice(p,value);
        return true;
      }
 else {
        p.sendMessage(chatPrefixError + ""String_Node_Str"" + value+ ""String_Node_Str"");
        return false;
      }
    }
  }
 else   if (command.toLowerCase().matches(""String_Node_Str"")) {
    int type=WPBlockListener.getRightSide(value);
    if (value.equalsIgnoreCase(""String_Node_Str"")) {
      type=DEFAULT_ADOPT_TYPE;
    }
 else     if (type == NO_ITEM_FOUND) {
      p.sendMessage(chatPrefixError + ""String_Node_Str"" + value);
      return false;
    }
 else     if (type == MULTIPLE_ITEMS_FOUND) {
      p.sendMessage(chatPrefixError + ""String_Node_Str"" + value);
      return false;
    }
    configWP.setProperty(ADOPT_KEY + ""String_Node_Str"" + world+ TYPE_KEY,type);
    configWP.save();
    if (world.equalsIgnoreCase(""String_Node_Str"")) {
      adoptType=type;
      p.sendMessage(chatPrefix + ""String_Node_Str"");
    }
 else {
      checkLimitProperty(worldString);
      checkPriceProperty(worldString);
      checkAgroProperty(worldString);
      adoptTypeWorlds.put(worldString,type);
      p.sendMessage(chatPrefix + ""String_Node_Str"" + worldString+ ""String_Node_Str"");
    }
    return true;
  }
 else   if (command.toLowerCase().matches(""String_Node_Str"")) {
    int limit=DEFAULT_ADOPT_LIMIT;
    try {
      limit=Integer.parseInt(value);
      if (limit < -1) {
        limit=-1;
      }
      configWP.setProperty(ADOPT_KEY + ""String_Node_Str"" + world+ LIMIT_KEY,limit);
      configWP.save();
      if (world.equalsIgnoreCase(""String_Node_Str"")) {
        adoptLimit=limit;
        p.sendMessage(chatPrefix + ""String_Node_Str"");
      }
 else {
        checkPriceProperty(worldString);
        checkTypeProperty(worldString);
        checkAgroProperty(worldString);
        adoptLimitWorlds.put(worldString,limit);
        p.sendMessage(chatPrefix + ""String_Node_Str"" + worldString+ ""String_Node_Str"");
      }
      return true;
    }
 catch (    NumberFormatException e) {
      if (adoptLimitWorlds.containsKey(value)) {
        sendWolfLimit(p,value);
        return true;
      }
 else {
        p.sendMessage(chatPrefixError + ""String_Node_Str"" + value+ ""String_Node_Str"");
        return false;
      }
    }
  }
 else   if (command.toLowerCase().matches(""String_Node_Str"")) {
    String agro=DEFAULT_ADOPT_AGRO;
    if (agroValueCheck(value)) {
      if (world.equalsIgnoreCase(""String_Node_Str"")) {
        adoptAgro=agro;
        p.sendMessage(chatPrefix + ""String_Node_Str"");
      }
 else {
        checkPriceProperty(worldString);
        checkTypeProperty(worldString);
        checkLimitProperty(worldString);
        adoptAgroWorlds.put(worldString,agro);
        p.sendMessage(chatPrefix + ""String_Node_Str"" + worldString+ ""String_Node_Str"");
      }
      configWP.setProperty(ADOPT_KEY + ""String_Node_Str"" + world+ AGRO_KEY,agro);
      configWP.save();
      return true;
    }
 else {
      p.sendMessage(chatPrefixError + ""String_Node_Str"" + value+ ""String_Node_Str"");
      return false;
    }
  }
  return false;
}","private boolean changeSetting(String command,String value,String world,Player p){
  String worldString=world;
  world=MULTI_WORLD_KEY + ""String_Node_Str"" + world+ ""String_Node_Str"";
  if (command.matches(""String_Node_Str"")) {
    world=""String_Node_Str"";
  }
  if (command.toLowerCase().matches(""String_Node_Str"")) {
    try {
      double newprice=Double.parseDouble(value);
      configWP.setProperty(ADOPT_KEY + ""String_Node_Str"" + world+ PRICE_KEY,newprice);
      configWP.save();
      checkLimitProperty(worldString);
      checkTypeProperty(worldString);
      checkAgroProperty(worldString);
      if (world.equalsIgnoreCase(""String_Node_Str"")) {
        adoptPrice=newprice;
        p.sendMessage(chatPrefix + ""String_Node_Str"");
      }
 else {
        adoptPriceWorlds.put(worldString,newprice);
        p.sendMessage(chatPrefix + ""String_Node_Str"" + worldString+ ""String_Node_Str"");
      }
      return true;
    }
 catch (    NumberFormatException e) {
      if (adoptPriceWorlds.containsKey(value)) {
        sendWolfPrice(p,value);
        return true;
      }
 else {
        p.sendMessage(chatPrefixError + ""String_Node_Str"" + value+ ""String_Node_Str"");
        return false;
      }
    }
  }
 else   if (command.toLowerCase().matches(""String_Node_Str"")) {
    int type=WPBlockListener.getRightSide(value);
    if (value.equalsIgnoreCase(""String_Node_Str"")) {
      type=DEFAULT_ADOPT_TYPE;
    }
 else     if (type == NO_ITEM_FOUND) {
      p.sendMessage(chatPrefixError + ""String_Node_Str"" + value);
      return false;
    }
 else     if (type == MULTIPLE_ITEMS_FOUND) {
      p.sendMessage(chatPrefixError + ""String_Node_Str"" + value);
      return false;
    }
    configWP.setProperty(ADOPT_KEY + ""String_Node_Str"" + world+ TYPE_KEY,type);
    configWP.save();
    checkLimitProperty(worldString);
    checkPriceProperty(worldString);
    checkAgroProperty(worldString);
    if (world.equalsIgnoreCase(""String_Node_Str"")) {
      adoptType=type;
      p.sendMessage(chatPrefix + ""String_Node_Str"");
    }
 else {
      adoptTypeWorlds.put(worldString,type);
      p.sendMessage(chatPrefix + ""String_Node_Str"" + worldString+ ""String_Node_Str"");
    }
    return true;
  }
 else   if (command.toLowerCase().matches(""String_Node_Str"")) {
    int limit=DEFAULT_ADOPT_LIMIT;
    try {
      limit=Integer.parseInt(value);
      if (limit < -1) {
        limit=-1;
      }
      configWP.setProperty(ADOPT_KEY + ""String_Node_Str"" + world+ LIMIT_KEY,limit);
      configWP.save();
      checkPriceProperty(worldString);
      checkTypeProperty(worldString);
      checkAgroProperty(worldString);
      if (world.equalsIgnoreCase(""String_Node_Str"")) {
        adoptLimit=limit;
        p.sendMessage(chatPrefix + ""String_Node_Str"");
      }
 else {
        adoptLimitWorlds.put(worldString,limit);
        p.sendMessage(chatPrefix + ""String_Node_Str"" + worldString+ ""String_Node_Str"");
      }
      return true;
    }
 catch (    NumberFormatException e) {
      if (adoptLimitWorlds.containsKey(value)) {
        sendWolfLimit(p,value);
        return true;
      }
 else {
        p.sendMessage(chatPrefixError + ""String_Node_Str"" + value+ ""String_Node_Str"");
        return false;
      }
    }
  }
 else   if (command.toLowerCase().matches(""String_Node_Str"")) {
    String agro=DEFAULT_ADOPT_AGRO;
    if (agroValueCheck(value)) {
      checkPriceProperty(worldString);
      checkTypeProperty(worldString);
      checkLimitProperty(worldString);
      if (world.equalsIgnoreCase(""String_Node_Str"")) {
        adoptAgro=agro;
        p.sendMessage(chatPrefix + ""String_Node_Str"");
      }
 else {
        adoptAgroWorlds.put(worldString,agro);
        p.sendMessage(chatPrefix + ""String_Node_Str"" + worldString+ ""String_Node_Str"");
      }
      configWP.setProperty(ADOPT_KEY + ""String_Node_Str"" + world+ AGRO_KEY,agro);
      configWP.save();
      return true;
    }
 else {
      p.sendMessage(chatPrefixError + ""String_Node_Str"" + value+ ""String_Node_Str"");
      return false;
    }
  }
  return false;
}",0.8568603213844252
96556,"private void checkTypeProperty(String world){
  String worldString=world;
  if (!world.equalsIgnoreCase(""String_Node_Str"")) {
    world=MULTI_WORLD_KEY + ""String_Node_Str"" + world+ ""String_Node_Str"";
  }
  if (configWP.getProperty(ADOPT_KEY + ""String_Node_Str"" + world+ TYPE_KEY) == null) {
    configWP.setProperty(ADOPT_KEY + ""String_Node_Str"" + world+ TYPE_KEY,DEFAULT_ADOPT_TYPE);
    configWP.save();
    if (worldString.equalsIgnoreCase(""String_Node_Str"")) {
      this.adoptPrice=DEFAULT_ADOPT_PRICE;
    }
 else {
      this.adoptPriceWorlds.put(worldString,DEFAULT_ADOPT_PRICE);
    }
  }
 else   if (!WPBlockListener.checkItem(configWP.getInt(ADOPT_KEY + ""String_Node_Str"" + world+ TYPE_KEY,DEFAULT_ADOPT_TYPE) + ""String_Node_Str"")) {
    configWP.setProperty(ADOPT_KEY + ""String_Node_Str"" + world+ TYPE_KEY,DEFAULT_ADOPT_TYPE);
    configWP.save();
    if (worldString.equalsIgnoreCase(""String_Node_Str"")) {
      this.adoptType=DEFAULT_ADOPT_TYPE;
    }
 else {
      this.adoptTypeWorlds.put(worldString,DEFAULT_ADOPT_TYPE);
    }
  }
}","private void checkTypeProperty(String world){
  String worldString=world;
  if (!world.equalsIgnoreCase(""String_Node_Str"")) {
    world=MULTI_WORLD_KEY + ""String_Node_Str"" + world+ ""String_Node_Str"";
  }
  if (configWP.getProperty(ADOPT_KEY + ""String_Node_Str"" + world+ TYPE_KEY) == null) {
    configWP.setProperty(ADOPT_KEY + ""String_Node_Str"" + world+ TYPE_KEY,DEFAULT_ADOPT_TYPE);
    configWP.save();
    if (worldString.equalsIgnoreCase(""String_Node_Str"")) {
      this.adoptType=DEFAULT_ADOPT_TYPE;
    }
 else {
      this.adoptTypeWorlds.put(worldString,DEFAULT_ADOPT_TYPE);
    }
  }
 else   if (!WPBlockListener.checkItem(configWP.getInt(ADOPT_KEY + ""String_Node_Str"" + world+ TYPE_KEY,DEFAULT_ADOPT_TYPE) + ""String_Node_Str"")) {
    configWP.setProperty(ADOPT_KEY + ""String_Node_Str"" + world+ TYPE_KEY,DEFAULT_ADOPT_TYPE);
    configWP.save();
    if (worldString.equalsIgnoreCase(""String_Node_Str"")) {
      this.adoptType=DEFAULT_ADOPT_TYPE;
    }
 else {
      this.adoptTypeWorlds.put(worldString,DEFAULT_ADOPT_TYPE);
    }
  }
}",0.9866284622731614
96557,"private void sendWolfPrice(Player p,String world){
  if (hasPermission(p,PERM_ADOPT)) {
    if (world.equalsIgnoreCase(""String_Node_Str"")) {
      String everywhere=""String_Node_Str"";
      log.info(this.adoptPriceWorlds.keySet().toString());
      for (      String s : this.adoptPriceWorlds.keySet()) {
        getHumanReadablePriceMessage(p,this.adoptPriceWorlds.get(s),this.adoptTypeWorlds.get(s),""String_Node_Str"" + ChatColor.AQUA + s+ ChatColor.WHITE+ ""String_Node_Str"");
        everywhere=""String_Node_Str"";
      }
      getHumanReadablePriceMessage(p,this.adoptPrice,this.adoptType,ChatColor.AQUA + everywhere + ChatColor.WHITE+ ""String_Node_Str"");
    }
 else     if (adoptPriceWorlds.containsKey(world) && adoptTypeWorlds.containsKey(world)) {
      getHumanReadablePriceMessage(p,this.adoptPriceWorlds.get(world),this.adoptTypeWorlds.get(world),""String_Node_Str"" + ChatColor.AQUA + world+ ChatColor.WHITE+ ""String_Node_Str"");
    }
 else {
      getHumanReadablePriceMessage(p,this.adoptPrice,this.adoptType,""String_Node_Str"" + ChatColor.AQUA + world+ ChatColor.WHITE+ ""String_Node_Str"");
    }
  }
}","private void sendWolfPrice(Player p,String world){
  if (hasPermission(p,PERM_ADOPT)) {
    if (world.equalsIgnoreCase(""String_Node_Str"")) {
      String everywhere=""String_Node_Str"";
      log.info(this.adoptPriceWorlds.keySet().toString());
      log.info(""String_Node_Str"" + this.adoptPriceWorlds.size());
      log.info(""String_Node_Str"" + this.adoptTypeWorlds.size());
      log.info(""String_Node_Str"" + this.adoptLimitWorlds.size());
      log.info(""String_Node_Str"" + this.adoptAgroWorlds.size());
      log.info(this.adoptPriceWorlds.keySet().toString());
      log.info(this.adoptPriceWorlds.keySet().toString());
      for (      String s : this.adoptPriceWorlds.keySet()) {
        getHumanReadablePriceMessage(p,this.adoptPriceWorlds.get(s),this.adoptTypeWorlds.get(s),""String_Node_Str"" + ChatColor.AQUA + s+ ChatColor.WHITE+ ""String_Node_Str"");
        everywhere=""String_Node_Str"";
      }
      getHumanReadablePriceMessage(p,this.adoptPrice,this.adoptType,ChatColor.AQUA + everywhere + ChatColor.WHITE+ ""String_Node_Str"");
    }
 else     if (adoptPriceWorlds.containsKey(world) && adoptTypeWorlds.containsKey(world)) {
      getHumanReadablePriceMessage(p,this.adoptPriceWorlds.get(world),this.adoptTypeWorlds.get(world),""String_Node_Str"" + ChatColor.AQUA + world+ ChatColor.WHITE+ ""String_Node_Str"");
    }
 else {
      getHumanReadablePriceMessage(p,this.adoptPrice,this.adoptType,""String_Node_Str"" + ChatColor.AQUA + world+ ChatColor.WHITE+ ""String_Node_Str"");
    }
  }
}",0.8541826554105909
96558,"public void spawnWolf(Player p,String aggro){
  p.sendMessage(""String_Node_Str"");
  Wolf w=(Wolf)p.getWorld().spawnCreature(p.getLocation(),CreatureType.WOLF);
  if (aggro != null && aggro.equals(ADOPT_FRIEND)) {
    EntityWolf newMcwolf=((CraftWolf)w).getHandle();
    newMcwolf.a(p.getName());
    newMcwolf.d(true);
    newMcwolf.b(false);
  }
 else   if (aggro != null && aggro.equals(ADOPT_ANGRY)) {
    w.setAngry(true);
  }
}","public void spawnWolf(Player p,String aggro){
  Wolf w=(Wolf)p.getWorld().spawnCreature(p.getLocation(),CreatureType.WOLF);
  if (aggro != null && aggro.equals(ADOPT_FRIEND)) {
    EntityWolf newMcwolf=((CraftWolf)w).getHandle();
    newMcwolf.a(p.getName());
    newMcwolf.d(true);
    newMcwolf.b(false);
    p.sendMessage(chatPrefix + ""String_Node_Str"");
  }
 else   if (aggro != null && aggro.equals(ADOPT_ANGRY)) {
    w.setAngry(true);
    p.sendMessage(chatPrefixError + ""String_Node_Str"");
  }
 else {
    p.sendMessage(chatPrefix + ""String_Node_Str"");
  }
}",0.7935871743486974
96559,"private void loadConfiguration(){
  configWP=new Configuration(new File(this.getDataFolder(),WOLF_POUND_CONFIG));
  configWP.load();
  checkPriceProperty(""String_Node_Str"");
  checkAggroProperty(""String_Node_Str"");
  checkTypeProperty(""String_Node_Str"");
  checkLimitProperty(""String_Node_Str"");
  Map<String,ConfigurationNode> nodes=configWP.getNodes(ADOPT_KEY + ""String_Node_Str"" + MULTI_WORLD_KEY);
  if (nodes != null && nodes.size() > 0) {
    for (    String s : nodes.keySet()) {
      checkPriceProperty(s);
      checkTypeProperty(s);
      checkLimitProperty(s);
      checkAggroProperty(s);
      String world=MULTI_WORLD_KEY + ""String_Node_Str"" + s+ ""String_Node_Str"";
      this.adoptAggro=configWP.getString(ADOPT_KEY + ""String_Node_Str"" + PRICE_KEY,DEFAULT_ADOPT_AGGRO);
      this.adoptPriceWorlds.put(s,configWP.getDouble(ADOPT_KEY + ""String_Node_Str"" + world+ PRICE_KEY,DEFAULT_ADOPT_PRICE));
      this.adoptTypeWorlds.put(s,configWP.getInt(ADOPT_KEY + ""String_Node_Str"" + world+ TYPE_KEY,DEFAULT_ADOPT_TYPE));
      this.adoptLimitWorlds.put(s,configWP.getInt(ADOPT_KEY + ""String_Node_Str"" + world+ LIMIT_KEY,DEFAULT_ADOPT_LIMIT));
    }
  }
  this.adoptAggro=configWP.getString(ADOPT_KEY + ""String_Node_Str"" + PRICE_KEY,DEFAULT_ADOPT_AGGRO);
  this.adoptPrice=configWP.getDouble(ADOPT_KEY + ""String_Node_Str"" + PRICE_KEY,DEFAULT_ADOPT_PRICE);
  this.adoptType=configWP.getInt(ADOPT_KEY + ""String_Node_Str"" + TYPE_KEY,DEFAULT_ADOPT_TYPE);
  this.adoptLimit=configWP.getInt(ADOPT_KEY + ""String_Node_Str"" + LIMIT_KEY,DEFAULT_ADOPT_LIMIT);
}","private void loadConfiguration(){
  configWP=new Configuration(new File(this.getDataFolder(),WOLF_POUND_CONFIG));
  configWP.load();
  checkPriceProperty(""String_Node_Str"");
  checkAggroProperty(""String_Node_Str"");
  checkTypeProperty(""String_Node_Str"");
  checkLimitProperty(""String_Node_Str"");
  Map<String,ConfigurationNode> nodes=configWP.getNodes(ADOPT_KEY + ""String_Node_Str"" + MULTI_WORLD_KEY);
  if (nodes != null && nodes.size() > 0) {
    for (    String s : nodes.keySet()) {
      checkPriceProperty(s);
      checkTypeProperty(s);
      checkLimitProperty(s);
      checkAggroProperty(s);
      String world=MULTI_WORLD_KEY + ""String_Node_Str"" + s+ ""String_Node_Str"";
      this.adoptAggro=configWP.getString(ADOPT_KEY + ""String_Node_Str"" + PRICE_KEY,DEFAULT_ADOPT_AGGRO);
      this.adoptPriceWorlds.put(s,configWP.getDouble(ADOPT_KEY + ""String_Node_Str"" + world+ PRICE_KEY,DEFAULT_ADOPT_PRICE));
      this.adoptTypeWorlds.put(s,configWP.getInt(ADOPT_KEY + ""String_Node_Str"" + world+ TYPE_KEY,DEFAULT_ADOPT_TYPE));
      this.adoptLimitWorlds.put(s,configWP.getInt(ADOPT_KEY + ""String_Node_Str"" + world+ LIMIT_KEY,DEFAULT_ADOPT_LIMIT));
    }
  }
  this.adoptAggro=configWP.getString(ADOPT_KEY + ""String_Node_Str"" + AGGRO_KEY,DEFAULT_ADOPT_AGGRO);
  this.adoptPrice=configWP.getDouble(ADOPT_KEY + ""String_Node_Str"" + PRICE_KEY,DEFAULT_ADOPT_PRICE);
  this.adoptType=configWP.getInt(ADOPT_KEY + ""String_Node_Str"" + TYPE_KEY,DEFAULT_ADOPT_TYPE);
  this.adoptLimit=configWP.getInt(ADOPT_KEY + ""String_Node_Str"" + LIMIT_KEY,DEFAULT_ADOPT_LIMIT);
}",0.9845956354300384
96560,"@Override public void onPlayerInteract(PlayerInteractEvent event){
  Player p=event.getPlayer();
  if (event.hasBlock() && event.getClickedBlock().getState() instanceof Sign && event.getAction() == Action.RIGHT_CLICK_BLOCK) {
    if (plugin.blockIsValidWolfSign(event.getClickedBlock()) && plugin.hasPermission(p,WolfPound.PERM_USE)) {
      if (checkSignParams(event.getClickedBlock(),1,p)) {
        double price=getPrice(event.getClickedBlock(),1,p);
        int item=getType(event.getClickedBlock(),1,p);
        String agro=getAgro(event.getClickedBlock(),2,p);
        if (plugin.bank.isUsingEcon(item) && plugin.bank.hasMoney(p,price,item)) {
          plugin.bank.payForWolf(p,price,item);
          if (price > 0) {
            plugin.bank.showRecipt(p,price,item);
          }
          plugin.spawnWolf(p,agro);
        }
 else         if (!plugin.bank.isUsingEcon(item)) {
          plugin.spawnWolf(p,agro);
        }
      }
    }
  }
}","@Override public void onPlayerInteract(PlayerInteractEvent event){
  Player p=event.getPlayer();
  if (event.hasBlock() && event.getClickedBlock().getState() instanceof Sign && event.getAction() == Action.RIGHT_CLICK_BLOCK) {
    if (plugin.blockIsValidWolfSign(event.getClickedBlock()) && plugin.hasPermission(p,WolfPound.PERM_USE)) {
      if (checkSignParams(event.getClickedBlock(),1,p)) {
        double price=getPrice(event.getClickedBlock(),1,p);
        int item=getType(event.getClickedBlock(),1,p);
        String aggro=getAggro(event.getClickedBlock(),2,p);
        if (plugin.bank.isUsingEcon(item) && plugin.bank.hasMoney(p,price,item)) {
          plugin.bank.payForWolf(p,price,item);
          if (price > 0) {
            plugin.bank.showRecipt(p,price,item);
          }
          plugin.spawnWolf(p,aggro);
        }
 else         if (!plugin.bank.isUsingEcon(item)) {
          plugin.spawnWolf(p,aggro);
        }
      }
    }
  }
}",0.9978991596638656
96561,"/** 
 * Allows the user to adopt a wolf
 * @param p The player
 * @param wolves How many wolves
 */
private void adoptWolf(Player p,int wolves){
  String world=p.getWorld().getName();
  double price=this.adoptPrice;
  int type=this.adoptType;
  int limit=this.adoptLimit;
  String agro=this.adoptAgro;
  if (this.adoptPriceWorlds.containsKey(world)) {
    price=this.adoptPriceWorlds.get(world);
    limit=this.adoptLimitWorlds.get(world);
    type=this.adoptTypeWorlds.get(world);
    agro=this.adoptAgroWorlds.get(world);
  }
  if (limit >= 0) {
    wolves=(wolves > limit) ? limit : wolves;
  }
  if (hasPermission(p,PERM_ADOPT) && bank.hasMoney(p,price * wolves,type)) {
    bank.payForWolf(p,price * wolves,type);
    if (price > 0) {
      bank.showRecipt(p,price * wolves,type);
    }
    for (int i=0; i < wolves; i++) {
      spawnWolf(p,agro);
    }
  }
}","/** 
 * Allows the user to adopt a wolf
 * @param p The player
 * @param wolves How many wolves
 */
private void adoptWolf(Player p,int wolves){
  String world=p.getWorld().getName();
  double price=this.adoptPrice;
  int type=this.adoptType;
  int limit=this.adoptLimit;
  String aggro=this.adoptAggro;
  if (this.adoptPriceWorlds.containsKey(world)) {
    price=this.adoptPriceWorlds.get(world);
    limit=this.adoptLimitWorlds.get(world);
    type=this.adoptTypeWorlds.get(world);
    aggro=this.adoptAggroWorlds.get(world);
  }
  if (limit >= 0) {
    wolves=(wolves > limit) ? limit : wolves;
  }
  if (hasPermission(p,PERM_ADOPT) && bank.hasMoney(p,price * wolves,type)) {
    bank.payForWolf(p,price * wolves,type);
    if (price > 0) {
      bank.showRecipt(p,price * wolves,type);
    }
    for (int i=0; i < wolves; i++) {
      spawnWolf(p,aggro);
    }
  }
}",0.9971181556195964
96562,"private boolean changeSetting(String command,String value,String world,Player p){
  String worldString=world;
  world=MULTI_WORLD_KEY + ""String_Node_Str"" + world+ ""String_Node_Str"";
  if (command.matches(""String_Node_Str"")) {
    world=""String_Node_Str"";
  }
  if (command.toLowerCase().matches(""String_Node_Str"")) {
    try {
      double newprice=Double.parseDouble(value);
      configWP.setProperty(ADOPT_KEY + ""String_Node_Str"" + world+ PRICE_KEY,newprice);
      configWP.save();
      checkLimitProperty(worldString);
      checkTypeProperty(worldString);
      checkAgroProperty(worldString);
      if (world.equalsIgnoreCase(""String_Node_Str"")) {
        adoptPrice=newprice;
        p.sendMessage(chatPrefix + ""String_Node_Str"");
      }
 else {
        adoptPriceWorlds.put(worldString,newprice);
        p.sendMessage(chatPrefix + ""String_Node_Str"" + worldString+ ""String_Node_Str"");
      }
      return true;
    }
 catch (    NumberFormatException e) {
      if (adoptPriceWorlds.containsKey(value)) {
        sendWolfPrice(p,value);
        return true;
      }
 else {
        p.sendMessage(chatPrefixError + ""String_Node_Str"" + value+ ""String_Node_Str"");
        return false;
      }
    }
  }
 else   if (command.toLowerCase().matches(""String_Node_Str"")) {
    int type=WPBlockListener.getRightSide(value);
    if (value.equalsIgnoreCase(""String_Node_Str"")) {
      type=DEFAULT_ADOPT_TYPE;
    }
 else     if (type == NO_ITEM_FOUND) {
      p.sendMessage(chatPrefixError + ""String_Node_Str"" + value);
      return false;
    }
 else     if (type == MULTIPLE_ITEMS_FOUND) {
      p.sendMessage(chatPrefixError + ""String_Node_Str"" + value);
      return false;
    }
    configWP.setProperty(ADOPT_KEY + ""String_Node_Str"" + world+ TYPE_KEY,type);
    configWP.save();
    checkLimitProperty(worldString);
    checkPriceProperty(worldString);
    checkAgroProperty(worldString);
    if (world.equalsIgnoreCase(""String_Node_Str"")) {
      adoptType=type;
      p.sendMessage(chatPrefix + ""String_Node_Str"");
    }
 else {
      adoptTypeWorlds.put(worldString,type);
      p.sendMessage(chatPrefix + ""String_Node_Str"" + worldString+ ""String_Node_Str"");
    }
    return true;
  }
 else   if (command.toLowerCase().matches(""String_Node_Str"")) {
    int limit=DEFAULT_ADOPT_LIMIT;
    try {
      limit=Integer.parseInt(value);
      if (limit < -1) {
        limit=-1;
      }
      configWP.setProperty(ADOPT_KEY + ""String_Node_Str"" + world+ LIMIT_KEY,limit);
      configWP.save();
      checkPriceProperty(worldString);
      checkTypeProperty(worldString);
      checkAgroProperty(worldString);
      if (world.equalsIgnoreCase(""String_Node_Str"")) {
        adoptLimit=limit;
        p.sendMessage(chatPrefix + ""String_Node_Str"");
      }
 else {
        adoptLimitWorlds.put(worldString,limit);
        p.sendMessage(chatPrefix + ""String_Node_Str"" + worldString+ ""String_Node_Str"");
      }
      return true;
    }
 catch (    NumberFormatException e) {
      if (adoptLimitWorlds.containsKey(value)) {
        sendWolfLimit(p,value);
        return true;
      }
 else {
        p.sendMessage(chatPrefixError + ""String_Node_Str"" + value+ ""String_Node_Str"");
        return false;
      }
    }
  }
 else   if (command.toLowerCase().matches(""String_Node_Str"")) {
    String agro=DEFAULT_ADOPT_AGRO;
    if (agroValueCheck(value)) {
      checkPriceProperty(worldString);
      checkTypeProperty(worldString);
      checkLimitProperty(worldString);
      if (world.equalsIgnoreCase(""String_Node_Str"")) {
        adoptAgro=agro;
        p.sendMessage(chatPrefix + ""String_Node_Str"");
      }
 else {
        adoptAgroWorlds.put(worldString,agro);
        p.sendMessage(chatPrefix + ""String_Node_Str"" + worldString+ ""String_Node_Str"");
      }
      configWP.setProperty(ADOPT_KEY + ""String_Node_Str"" + world+ AGRO_KEY,agro);
      configWP.save();
      return true;
    }
 else {
      p.sendMessage(chatPrefixError + ""String_Node_Str"" + value+ ""String_Node_Str"");
      return false;
    }
  }
  return false;
}","private boolean changeSetting(String command,String value,String world,Player p){
  String worldString=world;
  world=MULTI_WORLD_KEY + ""String_Node_Str"" + world+ ""String_Node_Str"";
  if (command.matches(""String_Node_Str"")) {
    world=""String_Node_Str"";
  }
  if (command.toLowerCase().matches(""String_Node_Str"")) {
    try {
      double newprice=Double.parseDouble(value);
      configWP.setProperty(ADOPT_KEY + ""String_Node_Str"" + world+ PRICE_KEY,newprice);
      configWP.save();
      checkLimitProperty(worldString);
      checkTypeProperty(worldString);
      checkAggroProperty(worldString);
      if (world.equalsIgnoreCase(""String_Node_Str"")) {
        adoptPrice=newprice;
        p.sendMessage(chatPrefix + ""String_Node_Str"");
      }
 else {
        adoptPriceWorlds.put(worldString,newprice);
        p.sendMessage(chatPrefix + ""String_Node_Str"" + worldString+ ""String_Node_Str"");
      }
      return true;
    }
 catch (    NumberFormatException e) {
      if (adoptPriceWorlds.containsKey(value)) {
        sendWolfPrice(p,value);
        return true;
      }
 else {
        p.sendMessage(chatPrefixError + ""String_Node_Str"" + value+ ""String_Node_Str"");
        return false;
      }
    }
  }
 else   if (command.toLowerCase().matches(""String_Node_Str"")) {
    int type=WPBlockListener.getRightSide(value);
    if (value.equalsIgnoreCase(""String_Node_Str"")) {
      type=DEFAULT_ADOPT_TYPE;
    }
 else     if (type == NO_ITEM_FOUND) {
      p.sendMessage(chatPrefixError + ""String_Node_Str"" + value);
      return false;
    }
 else     if (type == MULTIPLE_ITEMS_FOUND) {
      p.sendMessage(chatPrefixError + ""String_Node_Str"" + value);
      return false;
    }
    configWP.setProperty(ADOPT_KEY + ""String_Node_Str"" + world+ TYPE_KEY,type);
    configWP.save();
    checkLimitProperty(worldString);
    checkPriceProperty(worldString);
    checkAggroProperty(worldString);
    if (world.equalsIgnoreCase(""String_Node_Str"")) {
      adoptType=type;
      p.sendMessage(chatPrefix + ""String_Node_Str"");
    }
 else {
      adoptTypeWorlds.put(worldString,type);
      p.sendMessage(chatPrefix + ""String_Node_Str"" + worldString+ ""String_Node_Str"");
    }
    return true;
  }
 else   if (command.toLowerCase().matches(""String_Node_Str"")) {
    int limit=DEFAULT_ADOPT_LIMIT;
    try {
      limit=Integer.parseInt(value);
      if (limit < -1) {
        limit=-1;
      }
      configWP.setProperty(ADOPT_KEY + ""String_Node_Str"" + world+ LIMIT_KEY,limit);
      configWP.save();
      checkPriceProperty(worldString);
      checkTypeProperty(worldString);
      checkAggroProperty(worldString);
      if (world.equalsIgnoreCase(""String_Node_Str"")) {
        adoptLimit=limit;
        p.sendMessage(chatPrefix + ""String_Node_Str"");
      }
 else {
        adoptLimitWorlds.put(worldString,limit);
        p.sendMessage(chatPrefix + ""String_Node_Str"" + worldString+ ""String_Node_Str"");
      }
      return true;
    }
 catch (    NumberFormatException e) {
      if (adoptLimitWorlds.containsKey(value)) {
        sendWolfLimit(p,value);
        return true;
      }
 else {
        p.sendMessage(chatPrefixError + ""String_Node_Str"" + value+ ""String_Node_Str"");
        return false;
      }
    }
  }
 else   if (command.toLowerCase().matches(""String_Node_Str"")) {
    if (aggroValueCheck(value)) {
      checkPriceProperty(worldString);
      checkTypeProperty(worldString);
      checkLimitProperty(worldString);
      if (world.equalsIgnoreCase(""String_Node_Str"")) {
        adoptAggro=value;
        p.sendMessage(chatPrefix + ""String_Node_Str"");
      }
 else {
        adoptAggroWorlds.put(worldString,value);
        p.sendMessage(chatPrefix + ""String_Node_Str"" + worldString+ ""String_Node_Str"");
      }
      configWP.setProperty(ADOPT_KEY + ""String_Node_Str"" + world+ AGGRO_KEY,value);
      configWP.save();
      return true;
    }
 else {
      p.sendMessage(chatPrefixError + ""String_Node_Str"" + ChatColor.AQUA+ ""String_Node_Str""+ ChatColor.WHITE+ ""String_Node_Str""+ ChatColor.GREEN+ ""String_Node_Str""+ ChatColor.WHITE+ ""String_Node_Str""+ ChatColor.RED+ ""String_Node_Str"");
      return false;
    }
  }
  return false;
}",0.86143328042974
96563,"public void spawnWolf(Player p,String agro){
  p.sendMessage(""String_Node_Str"");
  Wolf w=(Wolf)p.getWorld().spawnCreature(p.getLocation(),CreatureType.WOLF);
  if (agro != null && agro.equals(ADOPT_FRIEND)) {
    EntityWolf newMcwolf=((CraftWolf)w).getHandle();
    newMcwolf.a(p.getName());
    newMcwolf.d(true);
    newMcwolf.b(false);
  }
 else   if (agro != null && agro.equals(ADOPT_ANGRY)) {
    w.setAngry(true);
  }
}","public void spawnWolf(Player p,String aggro){
  p.sendMessage(""String_Node_Str"");
  Wolf w=(Wolf)p.getWorld().spawnCreature(p.getLocation(),CreatureType.WOLF);
  if (aggro != null && aggro.equals(ADOPT_FRIEND)) {
    EntityWolf newMcwolf=((CraftWolf)w).getHandle();
    newMcwolf.a(p.getName());
    newMcwolf.d(true);
    newMcwolf.b(false);
  }
 else   if (aggro != null && aggro.equals(ADOPT_ANGRY)) {
    w.setAngry(true);
  }
}",0.9941792782305006
96564,"private void loadConfiguration(){
  configWP=new Configuration(new File(this.getDataFolder(),WOLF_POUND_CONFIG));
  configWP.load();
  checkPriceProperty(""String_Node_Str"");
  checkAgroProperty(""String_Node_Str"");
  checkTypeProperty(""String_Node_Str"");
  checkLimitProperty(""String_Node_Str"");
  Map<String,ConfigurationNode> nodes=configWP.getNodes(ADOPT_KEY + ""String_Node_Str"" + MULTI_WORLD_KEY);
  if (nodes != null && nodes.size() > 0) {
    for (    String s : nodes.keySet()) {
      checkPriceProperty(s);
      checkTypeProperty(s);
      checkLimitProperty(s);
      checkAgroProperty(s);
      String world=MULTI_WORLD_KEY + ""String_Node_Str"" + s+ ""String_Node_Str"";
      this.adoptAgro=configWP.getString(ADOPT_KEY + ""String_Node_Str"" + PRICE_KEY,DEFAULT_ADOPT_AGRO);
      this.adoptPriceWorlds.put(s,configWP.getDouble(ADOPT_KEY + ""String_Node_Str"" + world+ PRICE_KEY,DEFAULT_ADOPT_PRICE));
      this.adoptTypeWorlds.put(s,configWP.getInt(ADOPT_KEY + ""String_Node_Str"" + world+ TYPE_KEY,DEFAULT_ADOPT_TYPE));
      this.adoptLimitWorlds.put(s,configWP.getInt(ADOPT_KEY + ""String_Node_Str"" + world+ LIMIT_KEY,DEFAULT_ADOPT_LIMIT));
    }
  }
  this.adoptAgro=configWP.getString(ADOPT_KEY + ""String_Node_Str"" + PRICE_KEY,DEFAULT_ADOPT_AGRO);
  this.adoptPrice=configWP.getDouble(ADOPT_KEY + ""String_Node_Str"" + PRICE_KEY,DEFAULT_ADOPT_PRICE);
  this.adoptType=configWP.getInt(ADOPT_KEY + ""String_Node_Str"" + TYPE_KEY,DEFAULT_ADOPT_TYPE);
  this.adoptLimit=configWP.getInt(ADOPT_KEY + ""String_Node_Str"" + LIMIT_KEY,DEFAULT_ADOPT_LIMIT);
}","private void loadConfiguration(){
  configWP=new Configuration(new File(this.getDataFolder(),WOLF_POUND_CONFIG));
  configWP.load();
  checkPriceProperty(""String_Node_Str"");
  checkAggroProperty(""String_Node_Str"");
  checkTypeProperty(""String_Node_Str"");
  checkLimitProperty(""String_Node_Str"");
  Map<String,ConfigurationNode> nodes=configWP.getNodes(ADOPT_KEY + ""String_Node_Str"" + MULTI_WORLD_KEY);
  if (nodes != null && nodes.size() > 0) {
    for (    String s : nodes.keySet()) {
      checkPriceProperty(s);
      checkTypeProperty(s);
      checkLimitProperty(s);
      checkAggroProperty(s);
      String world=MULTI_WORLD_KEY + ""String_Node_Str"" + s+ ""String_Node_Str"";
      this.adoptAggro=configWP.getString(ADOPT_KEY + ""String_Node_Str"" + PRICE_KEY,DEFAULT_ADOPT_AGGRO);
      this.adoptPriceWorlds.put(s,configWP.getDouble(ADOPT_KEY + ""String_Node_Str"" + world+ PRICE_KEY,DEFAULT_ADOPT_PRICE));
      this.adoptTypeWorlds.put(s,configWP.getInt(ADOPT_KEY + ""String_Node_Str"" + world+ TYPE_KEY,DEFAULT_ADOPT_TYPE));
      this.adoptLimitWorlds.put(s,configWP.getInt(ADOPT_KEY + ""String_Node_Str"" + world+ LIMIT_KEY,DEFAULT_ADOPT_LIMIT));
    }
  }
  this.adoptAggro=configWP.getString(ADOPT_KEY + ""String_Node_Str"" + PRICE_KEY,DEFAULT_ADOPT_AGGRO);
  this.adoptPrice=configWP.getDouble(ADOPT_KEY + ""String_Node_Str"" + PRICE_KEY,DEFAULT_ADOPT_PRICE);
  this.adoptType=configWP.getInt(ADOPT_KEY + ""String_Node_Str"" + TYPE_KEY,DEFAULT_ADOPT_TYPE);
  this.adoptLimit=configWP.getInt(ADOPT_KEY + ""String_Node_Str"" + LIMIT_KEY,DEFAULT_ADOPT_LIMIT);
}",0.9980707395498392
96565,"private void sendWolfPrice(Player p,String world){
  if (hasPermission(p,PERM_ADOPT)) {
    if (world.equalsIgnoreCase(""String_Node_Str"")) {
      String everywhere=""String_Node_Str"";
      log.info(this.adoptPriceWorlds.keySet().toString());
      log.info(""String_Node_Str"" + this.adoptPriceWorlds.size());
      log.info(""String_Node_Str"" + this.adoptTypeWorlds.size());
      log.info(""String_Node_Str"" + this.adoptLimitWorlds.size());
      log.info(""String_Node_Str"" + this.adoptAgroWorlds.size());
      log.info(this.adoptPriceWorlds.keySet().toString());
      log.info(this.adoptPriceWorlds.keySet().toString());
      for (      String s : this.adoptPriceWorlds.keySet()) {
        getHumanReadablePriceMessage(p,this.adoptPriceWorlds.get(s),this.adoptTypeWorlds.get(s),""String_Node_Str"" + ChatColor.AQUA + s+ ChatColor.WHITE+ ""String_Node_Str"");
        everywhere=""String_Node_Str"";
      }
      getHumanReadablePriceMessage(p,this.adoptPrice,this.adoptType,ChatColor.AQUA + everywhere + ChatColor.WHITE+ ""String_Node_Str"");
    }
 else     if (adoptPriceWorlds.containsKey(world) && adoptTypeWorlds.containsKey(world)) {
      getHumanReadablePriceMessage(p,this.adoptPriceWorlds.get(world),this.adoptTypeWorlds.get(world),""String_Node_Str"" + ChatColor.AQUA + world+ ChatColor.WHITE+ ""String_Node_Str"");
    }
 else {
      getHumanReadablePriceMessage(p,this.adoptPrice,this.adoptType,""String_Node_Str"" + ChatColor.AQUA + world+ ChatColor.WHITE+ ""String_Node_Str"");
    }
  }
}","private void sendWolfPrice(Player p,String world){
  if (hasPermission(p,PERM_ADOPT)) {
    if (world.equalsIgnoreCase(""String_Node_Str"")) {
      String everywhere=""String_Node_Str"";
      for (      String s : this.adoptPriceWorlds.keySet()) {
        getHumanReadablePriceMessage(p,this.adoptPriceWorlds.get(s),this.adoptTypeWorlds.get(s),""String_Node_Str"" + ChatColor.AQUA + s+ ChatColor.WHITE+ ""String_Node_Str"");
        everywhere=""String_Node_Str"";
      }
      getHumanReadablePriceMessage(p,this.adoptPrice,this.adoptType,ChatColor.AQUA + everywhere + ChatColor.WHITE+ ""String_Node_Str"");
    }
 else     if (adoptPriceWorlds.containsKey(world) && adoptTypeWorlds.containsKey(world)) {
      getHumanReadablePriceMessage(p,this.adoptPriceWorlds.get(world),this.adoptTypeWorlds.get(world),""String_Node_Str"" + ChatColor.AQUA + world+ ChatColor.WHITE+ ""String_Node_Str"");
    }
 else {
      getHumanReadablePriceMessage(p,this.adoptPrice,this.adoptType,""String_Node_Str"" + ChatColor.AQUA + world+ ChatColor.WHITE+ ""String_Node_Str"");
    }
  }
}",0.8276403612092658
96566,"/** 
 * Does the user have the amount of money specified?
 * @param p The Player
 * @param m The amount of money to check if the player has
 * @return true if the player has at least m money, false if not
 */
public boolean hasMoney(Player p,double m,int type){
  boolean playerHasEnough=false;
  if (m == 0 || (isUsing(Bank.None) && type == -1)) {
    playerHasEnough=true;
  }
 else   if (type != -1) {
    ItemStack item=p.getItemInHand();
    playerHasEnough=(item.getTypeId() == type && item.getAmount() >= m);
  }
 else   if (isUsing(Bank.iConomy)) {
    playerHasEnough=iConomy.getBank().getAccount(p.getName()).hasEnough(m);
  }
 else   if (isUsing(Bank.BOSEconomy)) {
    playerHasEnough=BOSEcon.getPlayerMoney(p.getName()) >= m;
  }
 else   if (isUsing(Bank.Essentials)) {
    User user=User.get(p);
    playerHasEnough=(user.getMoney() >= m);
  }
  if (!playerHasEnough) {
    userIsTooPoor(p,type);
  }
  return playerHasEnough;
}","/** 
 * Does the user have the amount of money specified?
 * @param p The Player
 * @param m The amount of money to check if the player has
 * @return true if the player has at least m money, false if not
 */
public boolean hasMoney(Player p,double m,int type){
  boolean playerHasEnough=false;
  if (m == 0 || (isUsing(Bank.None) && type == -1)) {
    playerHasEnough=true;
  }
 else   if (type != -1) {
    ItemStack item=p.getItemInHand();
    playerHasEnough=(item.getTypeId() == type && item.getAmount() >= m);
    plugin.log.info(""String_Node_Str"");
    plugin.log.info(""String_Node_Str"" + item.getAmount());
    plugin.log.info(""String_Node_Str"" + m);
  }
 else   if (isUsing(Bank.iConomy)) {
    playerHasEnough=iConomy.getBank().getAccount(p.getName()).hasEnough(m);
  }
 else   if (isUsing(Bank.BOSEconomy)) {
    playerHasEnough=BOSEcon.getPlayerMoney(p.getName()) >= m;
  }
 else   if (isUsing(Bank.Essentials)) {
    User user=User.get(p);
    playerHasEnough=(user.getMoney() >= m);
  }
  if (!playerHasEnough) {
    userIsTooPoor(p,type);
  }
  return playerHasEnough;
}",0.9294523926985692
96567,"public void showRecipt(Player p,double price,int item){
  String moneyName=""String_Node_Str"";
  if (item != -1) {
    ItemStack is=new ItemStack(item);
    moneyName=is.getType().toString();
  }
  if (isUsing(Bank.Essentials) || isUsing(Bank.None)) {
    return;
  }
 else   if (isUsing(Bank.iConomy)) {
    moneyName=iConomy.getBank().getCurrency();
  }
 else   if (isUsing(Bank.BOSEconomy)) {
  }
  p.sendMessage(ChatColor.WHITE + ""String_Node_Str"" + ChatColor.RED+ ""String_Node_Str""+ price+ ""String_Node_Str""+ moneyName);
}","public void showRecipt(Player p,double price,int item){
  String moneyName=""String_Node_Str"";
  if (item != -1) {
    ItemStack is=new ItemStack(item);
    moneyName=is.getType().toString();
  }
 else   if (isUsing(Bank.Essentials) || isUsing(Bank.None)) {
    return;
  }
 else   if (isUsing(Bank.iConomy)) {
    moneyName=iConomy.getBank().getCurrency();
  }
 else   if (isUsing(Bank.BOSEconomy)) {
    if (price == 1) {
      moneyName=BOSEcon.getMoneyName();
    }
 else {
      moneyName=BOSEcon.getMoneyNamePlural();
    }
  }
  p.sendMessage(ChatColor.WHITE + ""String_Node_Str"" + ChatColor.DARK_RED+ ""String_Node_Str""+ price+ ""String_Node_Str""+ moneyName);
}",0.8832913518052057
96568,"public WPBankAdapter(Bank bank,BOSEconomy econ){
  this.bankType=bank;
  BOSEcon=econ;
}","public WPBankAdapter(Bank bank,final WolfPound plugin,BOSEconomy econ){
  this.bankType=bank;
  this.BOSEcon=econ;
  this.plugin=plugin;
}",0.7787610619469026
96569,"public boolean payForWolf(Player p,double cost,int type){
  if (cost == 0 || (isUsing(Bank.None) && type == -1))   return true;
 else   if (type != -1) {
    ItemStack item=p.getItemInHand();
    int finalamount=item.getAmount() - (int)cost;
    p.getItemInHand().setAmount(finalamount);
  }
 else   if (isUsing(Bank.iConomy)) {
    iConomy.getBank().getAccount(p.getName()).subtract(cost);
    return true;
  }
 else   if (isUsing(Bank.BOSEconomy)) {
    int intPrice=(int)(-1 * cost);
    return BOSEcon.addPlayerMoney(p.getName(),intPrice,true);
  }
 else   if (isUsing(Bank.Essentials)) {
    User user=User.get(p);
    user.takeMoney(cost);
    return true;
  }
  return false;
}","public boolean payForWolf(Player p,double cost,int type){
  if (cost == 0 || (isUsing(Bank.None) && type == -1))   return true;
 else   if (type != -1) {
    ItemStack item=p.getItemInHand();
    int finalamount=item.getAmount() - (int)cost;
    plugin.log.info(""String_Node_Str"");
    plugin.log.info(""String_Node_Str"" + item.getAmount());
    plugin.log.info(""String_Node_Str"" + finalamount);
    p.getItemInHand().setAmount(0);
  }
 else   if (isUsing(Bank.iConomy)) {
    iConomy.getBank().getAccount(p.getName()).subtract(cost);
    return true;
  }
 else   if (isUsing(Bank.BOSEconomy)) {
    int intPrice=(int)(-1 * cost);
    return BOSEcon.addPlayerMoney(p.getName(),intPrice,true);
  }
 else   if (isUsing(Bank.Essentials)) {
    User user=User.get(p);
    user.takeMoney(cost);
    return true;
  }
  return false;
}",0.8908007941760424
96570,"/** 
 * Grab the iConomy plugin from the Plugin Manager.
 */
public boolean setEconPlugin(){
  Plugin testiConomy=this.getServer().getPluginManager().getPlugin(""String_Node_Str"");
  Plugin testBOSE=this.getServer().getPluginManager().getPlugin(""String_Node_Str"");
  Plugin testEssentials=this.getServer().getPluginManager().getPlugin(""String_Node_Str"");
  if (testiConomy != null) {
    bank=new WPBankAdapter(WPBankAdapter.Bank.iConomy);
    return true;
  }
 else   if (testBOSE != null) {
    bank=new WPBankAdapter(WPBankAdapter.Bank.BOSEconomy,(BOSEconomy)testBOSE);
    return true;
  }
 else   if (testEssentials != null) {
    bank=new WPBankAdapter(WPBankAdapter.Bank.Essentials);
    return true;
  }
 else {
    bank=new WPBankAdapter(WPBankAdapter.Bank.None);
    return false;
  }
}","/** 
 * Grab the iConomy plugin from the Plugin Manager.
 */
public boolean setEconPlugin(){
  Plugin testiConomy=this.getServer().getPluginManager().getPlugin(""String_Node_Str"");
  Plugin testBOSE=this.getServer().getPluginManager().getPlugin(""String_Node_Str"");
  Plugin testEssentials=this.getServer().getPluginManager().getPlugin(""String_Node_Str"");
  if (testiConomy != null) {
    bank=new WPBankAdapter(WPBankAdapter.Bank.iConomy,this);
    return true;
  }
 else   if (testBOSE != null) {
    bank=new WPBankAdapter(WPBankAdapter.Bank.BOSEconomy,this,(BOSEconomy)testBOSE);
    return true;
  }
 else   if (testEssentials != null) {
    bank=new WPBankAdapter(WPBankAdapter.Bank.Essentials,this);
    return true;
  }
 else {
    bank=new WPBankAdapter(WPBankAdapter.Bank.None,this);
    return false;
  }
}",0.9875776397515528
96571,"/** 
 * Does the user have the amount of money specified?
 * @param p The Player
 * @param m The amount of money to check if the player has
 * @return true if the player has at least m money, false if not
 */
public boolean hasMoney(Player p,double m,int type){
  boolean playerHasEnough=false;
  if (m == 0 || isUsing(Bank.None))   playerHasEnough=true;
  if (type != -1) {
    ItemStack item=p.getItemInHand();
    playerHasEnough=(item.getTypeId() == type && item.getAmount() >= m);
  }
 else   if (isUsing(Bank.iConomy)) {
    playerHasEnough=iConomy.getBank().getAccount(p.getName()).hasEnough(m);
  }
 else   if (isUsing(Bank.BOSEconomy)) {
    playerHasEnough=BOSEcon.getPlayerMoney(p.getName()) >= m;
  }
 else   if (isUsing(Bank.Essentials)) {
    User user=User.get(p);
    playerHasEnough=(user.getMoney() >= m);
  }
  if (!playerHasEnough) {
    userIsTooPoor(p,type);
  }
  return playerHasEnough;
}","/** 
 * Does the user have the amount of money specified?
 * @param p The Player
 * @param m The amount of money to check if the player has
 * @return true if the player has at least m money, false if not
 */
public boolean hasMoney(Player p,double m,int type){
  boolean playerHasEnough=false;
  if (m == 0 || (isUsing(Bank.None) && type == -1)) {
    playerHasEnough=true;
  }
 else   if (type != -1) {
    ItemStack item=p.getItemInHand();
    playerHasEnough=(item.getTypeId() == type && item.getAmount() >= m);
  }
 else   if (isUsing(Bank.iConomy)) {
    playerHasEnough=iConomy.getBank().getAccount(p.getName()).hasEnough(m);
  }
 else   if (isUsing(Bank.BOSEconomy)) {
    playerHasEnough=BOSEcon.getPlayerMoney(p.getName()) >= m;
  }
 else   if (isUsing(Bank.Essentials)) {
    User user=User.get(p);
    playerHasEnough=(user.getMoney() >= m);
  }
  if (!playerHasEnough) {
    userIsTooPoor(p,type);
  }
  return playerHasEnough;
}",0.982740021574973
96572,"public boolean payForWolf(Player p,double cost,int type){
  if (cost == 0 || isUsing(Bank.None))   return true;
  if (type != -1) {
    ItemStack item=p.getItemInHand();
    int finalamount=item.getAmount() - (int)cost;
    p.getItemInHand().setAmount(finalamount);
  }
 else   if (isUsing(Bank.iConomy)) {
    iConomy.getBank().getAccount(p.getName()).subtract(cost);
    return true;
  }
 else   if (isUsing(Bank.BOSEconomy)) {
    int intPrice=(int)(-1 * cost);
    return BOSEcon.addPlayerMoney(p.getName(),intPrice,true);
  }
 else   if (isUsing(Bank.Essentials)) {
    User user=User.get(p);
    user.takeMoney(cost);
    return true;
  }
  return false;
}","public boolean payForWolf(Player p,double cost,int type){
  if (cost == 0 || (isUsing(Bank.None) && type == -1))   return true;
 else   if (type != -1) {
    ItemStack item=p.getItemInHand();
    int finalamount=item.getAmount() - (int)cost;
    p.getItemInHand().setAmount(finalamount);
  }
 else   if (isUsing(Bank.iConomy)) {
    iConomy.getBank().getAccount(p.getName()).subtract(cost);
    return true;
  }
 else   if (isUsing(Bank.BOSEconomy)) {
    int intPrice=(int)(-1 * cost);
    return BOSEcon.addPlayerMoney(p.getName(),intPrice,true);
  }
 else   if (isUsing(Bank.Essentials)) {
    User user=User.get(p);
    user.takeMoney(cost);
    return true;
  }
  return false;
}",0.9583952451708768
96573,"@Override public void onPlayerInteract(PlayerInteractEvent event){
  Player p=event.getPlayer();
  if (event.hasBlock() && event.getClickedBlock().getState() instanceof Sign && event.getAction() == Action.RIGHT_CLICK_BLOCK) {
    if (plugin.blockIsValidWolfSign(event.getClickedBlock()) && plugin.hasPermission(p,WolfPound.PERM_USE)) {
      double price=0;
      int item=-1;
      if (checkSignParms(event.getClickedBlock(),1) > 0) {
        price=getPriceFromBlock(event.getClickedBlock(),1);
      }
      if (checkSignParms(event.getClickedBlock(),1) > 1) {
        item=getItemFromBlock(event.getClickedBlock(),1);
      }
      if (plugin.bank.hasMoney(p,price,item)) {
        plugin.bank.payForWolf(p,price,item);
        plugin.bank.showRecipt(p,price,item);
        plugin.spawnWolf(p);
      }
    }
  }
}","@Override public void onPlayerInteract(PlayerInteractEvent event){
  Player p=event.getPlayer();
  if (event.hasBlock() && event.getClickedBlock().getState() instanceof Sign && event.getAction() == Action.RIGHT_CLICK_BLOCK) {
    if (plugin.blockIsValidWolfSign(event.getClickedBlock()) && plugin.hasPermission(p,WolfPound.PERM_USE)) {
      double price=0;
      int item=-1;
      if (checkSignParms(event.getClickedBlock(),1) > 0) {
        price=getPriceFromBlock(event.getClickedBlock(),1);
      }
      if (checkSignParms(event.getClickedBlock(),1) > 1) {
        item=getItemFromBlock(event.getClickedBlock(),1);
      }
      if (plugin.bank.isUsingEcon(item) && plugin.bank.hasMoney(p,price,item)) {
        plugin.bank.payForWolf(p,price,item);
        if (price > 0) {
          plugin.bank.showRecipt(p,price,item);
        }
        plugin.spawnWolf(p);
      }
 else       if (!plugin.bank.isUsingEcon(item)) {
        plugin.spawnWolf(p);
      }
    }
  }
}",0.9123394751535456
96574,"/** 
 * Grab the iConomy plugin from the Plugin Manager.
 */
public boolean setEconPlugin(){
  Plugin testiConomy=this.getServer().getPluginManager().getPlugin(""String_Node_Str"");
  Plugin testBOSE=this.getServer().getPluginManager().getPlugin(""String_Node_Str"");
  Plugin testEssentials=this.getServer().getPluginManager().getPlugin(""String_Node_Str"");
  if (testiConomy != null) {
    bank=new WPBankAdapter(WPBankAdapter.Bank.iConomy);
    return true;
  }
 else   if (testBOSE != null) {
    bank=new WPBankAdapter(WPBankAdapter.Bank.BOSEconomy,(BOSEconomy)testBOSE);
    return true;
  }
 else   if (testEssentials != null) {
    bank=new WPBankAdapter(WPBankAdapter.Bank.Essentials);
    return true;
  }
  return false;
}","/** 
 * Grab the iConomy plugin from the Plugin Manager.
 */
public boolean setEconPlugin(){
  Plugin testiConomy=this.getServer().getPluginManager().getPlugin(""String_Node_Str"");
  Plugin testBOSE=this.getServer().getPluginManager().getPlugin(""String_Node_Str"");
  Plugin testEssentials=this.getServer().getPluginManager().getPlugin(""String_Node_Str"");
  if (testiConomy != null) {
    bank=new WPBankAdapter(WPBankAdapter.Bank.iConomy);
    return true;
  }
 else   if (testBOSE != null) {
    bank=new WPBankAdapter(WPBankAdapter.Bank.BOSEconomy,(BOSEconomy)testBOSE);
    return true;
  }
 else   if (testEssentials != null) {
    bank=new WPBankAdapter(WPBankAdapter.Bank.Essentials);
    return true;
  }
 else {
    bank=new WPBankAdapter(WPBankAdapter.Bank.None);
    return false;
  }
}",0.9560078791858174
96575,"private boolean changeSetting(String command,String value){
  if (command.equals(""String_Node_Str"")) {
    try {
      double newprice=Double.parseDouble(value);
      configWP.setProperty(ADOPT_PRICE_KEY,newprice);
      configWP.save();
      adoptPrice=newprice;
      return true;
    }
 catch (    NumberFormatException e) {
    }
  }
  return false;
}","private boolean changeSetting(String command,String value){
  if (command.equals(""String_Node_Str"") || command.equals(""String_Node_Str"")) {
    try {
      double newprice=Double.parseDouble(value);
      configWP.setProperty(ADOPT_PRICE_KEY,newprice);
      configWP.save();
      adoptPrice=newprice;
      return true;
    }
 catch (    NumberFormatException e) {
    }
  }
 else   if (command.equals(""String_Node_Str"") || command.equals(""String_Node_Str"")) {
    int type=getItemInt(value);
    if (value.equalsIgnoreCase(""String_Node_Str"")) {
      type=-1;
    }
 else     if (type == -2) {
      return false;
    }
    configWP.setProperty(ADOPT_TYPE_KEY,type);
    configWP.save();
    this.adoptType=type;
    return true;
  }
  return false;
}",0.6156615661566157
96576,"@Override public boolean onCommand(CommandSender sender,Command command,String label,String[] args){
  String commandName=command.getName().toLowerCase();
  if (commandName.equalsIgnoreCase(""String_Node_Str"")) {
    Player player=(Player)sender;
switch (args.length) {
case 0:
      adoptWolf(player,1);
    return true;
case 1:
  if (args[0].equals(""String_Node_Str"")) {
    sendWolfPrice(player);
    return true;
  }
adoptWolf(player,getWolfInt(args[0],player,""String_Node_Str""));
return true;
case 2:
if (changeSetting(args[0],args[1])) {
player.sendMessage(""String_Node_Str"");
}
 else {
player.sendMessage(""String_Node_Str"");
}
return true;
default :
player.sendMessage(""String_Node_Str"");
player.sendMessage(""String_Node_Str"");
player.sendMessage(""String_Node_Str"");
return false;
}
}
return false;
}","@Override public boolean onCommand(CommandSender sender,Command command,String label,String[] args){
  String commandName=command.getName().toLowerCase();
  if (commandName.equalsIgnoreCase(""String_Node_Str"")) {
    Player player=(Player)sender;
switch (args.length) {
case 0:
      adoptWolf(player,1);
    return true;
case 1:
  if (args[0].equals(""String_Node_Str"")) {
    sendWolfPrice(player);
    return true;
  }
adoptWolf(player,getWolfInt(args[0],player,""String_Node_Str""));
return true;
case 2:
if (!hasPermission(player,PERM_CREATE)) {
return false;
}
if (changeSetting(args[0],args[1])) {
player.sendMessage(""String_Node_Str"");
}
 else {
player.sendMessage(""String_Node_Str"");
}
return true;
default :
player.sendMessage(""String_Node_Str"");
player.sendMessage(""String_Node_Str"");
player.sendMessage(""String_Node_Str"");
return false;
}
}
return false;
}",0.9652694610778444
96577,"/** 
 * Determines if the specified player has the permission. If no  permissions plugin is used or player is an op, always true
 * @param p Player
 * @param permission String permission
 * @return True if they do, false if not, also displays you dont have permission
 */
public boolean hasPermission(Player p,String permission){
  if (!usePermissions || p.isOp()) {
    return true;
  }
  if (!WolfPound.Permissions.has(p,permission)) {
    p.sendMessage(""String_Node_Str"" + permission + ""String_Node_Str"");
    return false;
  }
  return true;
}","/** 
 * Determines if the specified player has the permission. If no permissions plugin is used or player is an op, always true
 * @param p Player
 * @param permission String permission
 * @return True if they do, false if not, also displays you dont have permission
 */
public boolean hasPermission(Player p,String permission){
  if (!usePermissions || p.isOp()) {
    return true;
  }
  if (!WolfPound.Permissions.has(p,permission)) {
    p.sendMessage(""String_Node_Str"" + permission + ""String_Node_Str"");
    return false;
  }
  return true;
}",0.9990850869167428
96578,"private void sendWolfPrice(Player p){
  if (hasPermission(p,PERM_ADOPT))   p.sendMessage(""String_Node_Str"" + adoptPrice + ""String_Node_Str"");
}","private void sendWolfPrice(Player p){
  if (hasPermission(p,PERM_ADOPT))   if (this.adoptPrice == 0) {
    p.sendMessage(""String_Node_Str"");
  }
 else   if (this.adoptType == -1) {
    p.sendMessage(""String_Node_Str"" + adoptPrice + ""String_Node_Str"");
  }
 else {
    Material m=Material.getMaterial(adoptType);
    if (m != null) {
      p.sendMessage(""String_Node_Str"" + adoptPrice + ""String_Node_Str""+ m.toString()+ ""String_Node_Str"");
    }
 else {
      p.sendMessage(""String_Node_Str"" + adoptPrice + ""String_Node_Str"");
    }
  }
}",0.3147058823529411
96579,"public boolean payForWolf(Player p,double cost,int type){
  if (cost == 0 || (isUsing(Bank.None) && type == -1))   return true;
 else   if (type != -1) {
    ItemStack item=p.getItemInHand();
    int finalamount=item.getAmount() - (int)cost;
    plugin.log.info(""String_Node_Str"");
    plugin.log.info(""String_Node_Str"" + item.getAmount());
    plugin.log.info(""String_Node_Str"" + finalamount);
    p.getItemInHand().setAmount(0);
  }
 else   if (isUsing(Bank.iConomy)) {
    iConomy.getBank().getAccount(p.getName()).subtract(cost);
    return true;
  }
 else   if (isUsing(Bank.BOSEconomy)) {
    int intPrice=(int)(-1 * cost);
    return BOSEcon.addPlayerMoney(p.getName(),intPrice,true);
  }
 else   if (isUsing(Bank.Essentials)) {
    User user=User.get(p);
    user.takeMoney(cost);
    return true;
  }
  return false;
}","public boolean payForWolf(Player p,double cost,int type){
  if (cost == 0 || (isUsing(Bank.None) && type == -1))   return true;
 else   if (type != -1) {
    ItemStack item=p.getItemInHand();
    int finalamount=item.getAmount() - (int)cost;
    plugin.log.info(""String_Node_Str"");
    plugin.log.info(""String_Node_Str"" + item.getAmount());
    plugin.log.info(""String_Node_Str"" + finalamount);
    if (finalamount > 0) {
      p.getItemInHand().setAmount(finalamount);
    }
 else {
      p.getInventory().remove(item);
    }
  }
 else   if (isUsing(Bank.iConomy)) {
    iConomy.getBank().getAccount(p.getName()).subtract(cost);
    return true;
  }
 else   if (isUsing(Bank.BOSEconomy)) {
    int intPrice=(int)(-1 * cost);
    return BOSEcon.addPlayerMoney(p.getName(),intPrice,true);
  }
 else   if (isUsing(Bank.Essentials)) {
    User user=User.get(p);
    user.takeMoney(cost);
    return true;
  }
  return false;
}",0.9417142857142856
96580,"public static void userIsTooPoor(Player p){
  p.sendMessage(""String_Node_Str"");
}","public void userIsTooPoor(Player p){
  p.sendMessage(""String_Node_Str"");
}",0.9548387096774194
96581,"/** 
 * Does the user have the amount of money specified?
 * @param p The Player
 * @param m The amount of money to check if the player has
 * @return true if the player has at least m money, false if not
 */
public static boolean hasMoney(Player p,double m){
  if (m == 0 || isUsing(Bank.None))   return true;
  if (isUsing(Bank.iConomy)) {
    return iConomy.getBank().getAccount(p.getName()).hasEnough(m);
  }
 else   if (isUsing(Bank.BOSEconomy)) {
    return BOSEcon.getPlayerMoney(p.getName()) >= m;
  }
 else   if (isUsing(Bank.Essentials)) {
    User user=User.get(p);
    return (user.getMoney() >= m);
  }
  return false;
}","/** 
 * Does the user have the amount of money specified?
 * @param p The Player
 * @param m The amount of money to check if the player has
 * @return true if the player has at least m money, false if not
 */
public boolean hasMoney(Player p,double m){
  boolean playerHasEnough=false;
  if (m == 0 || isUsing(Bank.None))   playerHasEnough=true;
  if (isUsing(Bank.iConomy)) {
    playerHasEnough=iConomy.getBank().getAccount(p.getName()).hasEnough(m);
  }
 else   if (isUsing(Bank.BOSEconomy)) {
    playerHasEnough=BOSEcon.getPlayerMoney(p.getName()) >= m;
  }
 else   if (isUsing(Bank.Essentials)) {
    User user=User.get(p);
    playerHasEnough=(user.getMoney() >= m);
  }
  if (!playerHasEnough) {
    userIsTooPoor(p);
  }
  return playerHasEnough;
}",0.8431654676258993
96582,"public static void showRecipt(Player p,double price){
  String moneyName=""String_Node_Str"";
  if (isUsing(Bank.Essentials) || isUsing(Bank.None)) {
    return;
  }
 else   if (isUsing(Bank.iConomy)) {
    moneyName=iConomy.getBank().getCurrency();
  }
 else   if (isUsing(Bank.BOSEconomy)) {
  }
  p.sendMessage(ChatColor.WHITE + ""String_Node_Str"" + ChatColor.RED+ ""String_Node_Str""+ price+ ""String_Node_Str""+ moneyName);
}","public void showRecipt(Player p,double price){
  String moneyName=""String_Node_Str"";
  if (isUsing(Bank.Essentials) || isUsing(Bank.None)) {
    return;
  }
 else   if (isUsing(Bank.iConomy)) {
    moneyName=iConomy.getBank().getCurrency();
  }
 else   if (isUsing(Bank.BOSEconomy)) {
  }
  p.sendMessage(ChatColor.WHITE + ""String_Node_Str"" + ChatColor.RED+ ""String_Node_Str""+ price+ ""String_Node_Str""+ moneyName);
}",0.9916567342073898
96583,"private static boolean isUsing(Bank banktype){
  return bankType == banktype;
}","private boolean isUsing(Bank banktype){
  return bankType == banktype;
}",0.9536423841059604
96584,"public static boolean payForWolf(Player p,double cost){
  if (cost == 0 || isUsing(Bank.None))   return true;
  if (isUsing(Bank.iConomy)) {
    iConomy.getBank().getAccount(p.getName()).subtract(cost);
    return true;
  }
 else   if (isUsing(Bank.BOSEconomy)) {
    int intPrice=(int)(-1 * cost);
    return BOSEcon.addPlayerMoney(p.getName(),intPrice,true);
  }
 else   if (isUsing(Bank.Essentials)) {
    User user=User.get(p);
    user.takeMoney(cost);
    return true;
  }
  return false;
}","public boolean payForWolf(Player p,double cost){
  if (cost == 0 || isUsing(Bank.None))   return true;
  if (isUsing(Bank.iConomy)) {
    iConomy.getBank().getAccount(p.getName()).subtract(cost);
    return true;
  }
 else   if (isUsing(Bank.BOSEconomy)) {
    int intPrice=(int)(-1 * cost);
    return BOSEcon.addPlayerMoney(p.getName(),intPrice,true);
  }
 else   if (isUsing(Bank.Essentials)) {
    User user=User.get(p);
    user.takeMoney(cost);
    return true;
  }
  return false;
}",0.9928934010152284
96585,"public static String getEconUsed(){
  if (isUsing(Bank.iConomy)) {
    return ""String_Node_Str"";
  }
 else   if (isUsing(Bank.BOSEconomy)) {
    return ""String_Node_Str"";
  }
 else   if (isUsing(Bank.Essentials)) {
    return ""String_Node_Str"";
  }
 else {
    return ""String_Node_Str"";
  }
}","public String getEconUsed(){
  if (isUsing(Bank.iConomy)) {
    return ""String_Node_Str"";
  }
 else   if (isUsing(Bank.BOSEconomy)) {
    return ""String_Node_Str"";
  }
 else   if (isUsing(Bank.Essentials)) {
    return ""String_Node_Str"";
  }
 else {
    return ""String_Node_Str"";
  }
}",0.9878682842287696
96586,"public static void setEconType(Bank banktype){
  bankType=banktype;
}","public void setEconType(Bank banktype){
  bankType=banktype;
}",0.9465648854961832
96587,"@Override public void onPlayerInteract(PlayerInteractEvent event){
  Player p=event.getPlayer();
  if (event.hasBlock() && event.getClickedBlock().getState() instanceof Sign && event.getAction() == Action.RIGHT_CLICK_BLOCK) {
    if (plugin.blockIsValidWolfSign(event.getClickedBlock()) && plugin.hasPermission(p,WolfPound.PERM_USE)) {
      double price=getPriceFromBlock(event.getClickedBlock(),1);
      if (WPBankAdapter.hasMoney(p,price)) {
        WPBankAdapter.payForWolf(p,price);
        WPBankAdapter.showRecipt(p,price);
      }
 else {
        WPBankAdapter.userIsTooPoor(p);
      }
    }
  }
}","@Override public void onPlayerInteract(PlayerInteractEvent event){
  Player p=event.getPlayer();
  if (event.hasBlock() && event.getClickedBlock().getState() instanceof Sign && event.getAction() == Action.RIGHT_CLICK_BLOCK) {
    if (plugin.blockIsValidWolfSign(event.getClickedBlock()) && plugin.hasPermission(p,WolfPound.PERM_USE)) {
      double price=getPriceFromBlock(event.getClickedBlock(),1);
      if (plugin.bank.hasMoney(p,price)) {
        plugin.bank.payForWolf(p,price);
        plugin.bank.showRecipt(p,price);
        plugin.spawnWolf(p);
      }
    }
  }
}",0.8670618120237087
96588,"/** 
 * Allows the user to adopt a wolf
 * @param p The player
 * @param wolves How many wolves
 */
private void adoptWolf(Player p,int wolves){
  if (hasPermission(p,PERM_ADOPT) && WPBankAdapter.hasMoney(p,adoptPrice * wolves)) {
    WPBankAdapter.payForWolf(p,adoptPrice * wolves);
    for (int i=0; i < wolves; i++) {
      spawnWolf(p);
    }
  }
}","/** 
 * Allows the user to adopt a wolf
 * @param p The player
 * @param wolves How many wolves
 */
private void adoptWolf(Player p,int wolves){
  if (hasPermission(p,PERM_ADOPT) && bank.hasMoney(p,adoptPrice * wolves)) {
    bank.payForWolf(p,adoptPrice * wolves);
    for (int i=0; i < wolves; i++) {
      spawnWolf(p);
    }
  }
}",0.967930029154519
96589,"/** 
 * Grab the iConomy plugin from the Plugin Manager.
 */
public boolean setEconPlugin(){
  Plugin testiConomy=this.getServer().getPluginManager().getPlugin(""String_Node_Str"");
  Plugin testBOSE=this.getServer().getPluginManager().getPlugin(""String_Node_Str"");
  Plugin testEssentials=this.getServer().getPluginManager().getPlugin(""String_Node_Str"");
  if (testiConomy != null) {
    WPBankAdapter.setEconType(WPBankAdapter.Bank.iConomy);
    return true;
  }
 else   if (testBOSE != null) {
    WPBankAdapter.BOSEcon=(BOSEconomy)testBOSE;
    WPBankAdapter.setEconType(WPBankAdapter.Bank.BOSEconomy);
    return true;
  }
 else   if (testEssentials != null) {
    WPBankAdapter.setEconType(WPBankAdapter.Bank.iConomy);
    return true;
  }
  return false;
}","/** 
 * Grab the iConomy plugin from the Plugin Manager.
 */
public boolean setEconPlugin(){
  Plugin testiConomy=this.getServer().getPluginManager().getPlugin(""String_Node_Str"");
  Plugin testBOSE=this.getServer().getPluginManager().getPlugin(""String_Node_Str"");
  Plugin testEssentials=this.getServer().getPluginManager().getPlugin(""String_Node_Str"");
  if (testiConomy != null) {
    bank=new WPBankAdapter(WPBankAdapter.Bank.iConomy);
    return true;
  }
 else   if (testBOSE != null) {
    bank=new WPBankAdapter(WPBankAdapter.Bank.BOSEconomy,(BOSEconomy)testBOSE);
    return true;
  }
 else   if (testEssentials != null) {
    bank=new WPBankAdapter(WPBankAdapter.Bank.Essentials);
    return true;
  }
  return false;
}",0.8609805238415044
96590,"@Override public void onEnable(){
  getDataFolder().mkdirs();
  loadConfiguration();
  playerListener=new WPPlayerListener(this);
  blockListener=new WPBlockListener(this);
  log.info(logPrefix + ""String_Node_Str"" + this.getDescription().getVersion()+ ""String_Node_Str"");
  if (setEconPlugin()) {
    log.info(logPrefix + WPBankAdapter.getEconUsed());
  }
  checkPermissions();
  PluginManager pm=getServer().getPluginManager();
  pm.registerEvent(Event.Type.SIGN_CHANGE,blockListener,Priority.Normal,this);
  pm.registerEvent(Event.Type.PLAYER_INTERACT,playerListener,Priority.Normal,this);
  pm.registerEvent(Event.Type.BLOCK_BREAK,blockListener,Priority.Normal,this);
  pm.registerEvent(Event.Type.BLOCK_PLACE,blockListener,Priority.Normal,this);
}","@Override public void onEnable(){
  getDataFolder().mkdirs();
  loadConfiguration();
  playerListener=new WPPlayerListener(this);
  blockListener=new WPBlockListener(this);
  log.info(logPrefix + ""String_Node_Str"" + this.getDescription().getVersion()+ ""String_Node_Str"");
  if (setEconPlugin()) {
    log.info(logPrefix + bank.getEconUsed());
  }
  checkPermissions();
  PluginManager pm=getServer().getPluginManager();
  pm.registerEvent(Event.Type.SIGN_CHANGE,blockListener,Priority.Normal,this);
  pm.registerEvent(Event.Type.PLAYER_INTERACT,playerListener,Priority.Normal,this);
  pm.registerEvent(Event.Type.BLOCK_BREAK,blockListener,Priority.Normal,this);
  pm.registerEvent(Event.Type.BLOCK_PLACE,blockListener,Priority.Normal,this);
}",0.9926322839919623
96591,"public boolean hasPermission(Player p,String permission){
  if (!usePermissions) {
    return true;
  }
  if (!WolfPound.Permissions.has(p,permission)) {
    p.sendMessage(""String_Node_Str"" + permission + ""String_Node_Str"");
    return false;
  }
  return true;
}","public boolean hasPermission(Player p,String permission){
  if (!usePermissions || p.isOp()) {
    return true;
  }
  if (!WolfPound.Permissions.has(p,permission)) {
    p.sendMessage(""String_Node_Str"" + permission + ""String_Node_Str"");
    return false;
  }
  return true;
}",0.9776951672862454
96592,"public long getNextInvocationTime(Calendar currentTime,Crontab crontab){
  int second=CalendarUtil.getSecond(currentTime);
  int minute=CalendarUtil.getMinute(currentTime);
  if (second > 0) {
    minute++;
  }
  if (crontab.minuteElement.isFixedValue()) {
    minute=getFixedNextInvocationValue(minute,59,crontab.minuteElement);
  }
 else {
    minute=getFixedSameOrNextInvocationValue(minute,crontab.minuteFixedInvocations);
  }
  int hour=CalendarUtil.get24Hour(currentTime);
  if (crontab.hourElement.isFixedValue()) {
    int newHour=crontab.hourElement.toInt();
    if (newHour > hour) {
      if (crontab.minuteElement.isFixedValue()) {
        minute=getFixedNextInvocationValue(minute,59,crontab.minuteElement);
      }
 else {
        minute=getFixedMinimumInvocationValue(crontab.minuteFixedInvocations);
      }
    }
    hour=newHour;
  }
  crontab=replaceWildcardsOfMinuteOrHourValue(crontab);
  int day=CalendarUtil.getDay(currentTime);
  if (crontab.dayElement.isFixedValue()) {
    day=crontab.dayElement.toInt();
  }
  int dayOfWeek=getCrontabDayOfWeekNumber(currentTime);
  if (dayOfWeek >= 7) {
    dayOfWeek=dayOfWeek - 7;
  }
  int month=CalendarUtil.getMonth(currentTime);
  if (crontab.monthElement.isFixedValue()) {
    month=crontab.monthElement.toInt();
  }
  int year=CalendarUtil.getYear(currentTime);
  Calendar nextInvocationTime=CalendarUtil.getCalendar(year,month,day,hour,minute,0);
  boolean isMinuteModified=false;
  boolean isHourModified=false;
  boolean isDayModified=false;
  boolean isMonthModified=false;
  boolean isDayOfWeekPrior=true;
  int loopCounter=0;
  if (crontab.dayOfWeekElement.isNotWildcard()) {
    while (nextInvocationTime.getTimeInMillis() <= currentTime.getTimeInMillis() || (isDayOfWeekPrior && isDayOfWeekNotCameAt(crontab,nextInvocationTime,dayOfWeek))) {
      if (loopCounter >= 100) {
        throw new IllegalStateException(""String_Node_Str"");
      }
      if (isMinuteModified || crontab.minuteElement.isWildcard()) {
        if (isHourModified || crontab.hourElement.isNotWildcard()) {
          if (isHourModified || crontab.hourElement.isFixedValue()) {
            if (isDayModified) {
              if (isMonthModified || crontab.monthElement.isNotWildcard()) {
                if (isMonthModified || crontab.monthElement.isFixedValue()) {
                  nextInvocationTime.add(Calendar.YEAR,1);
                }
 else {
                  nextInvocationTime.set(Calendar.MONTH,getFixedNextInvocationValue(month,12,crontab.monthElement));
                  isMonthModified=true;
                }
              }
 else {
                nextInvocationTime.add(Calendar.MONTH,1);
                isMonthModified=true;
              }
            }
 else {
              boolean isDayOfWeekNotContainedInCrontab=!isInvocationValueContainedInCrontabValue(dayOfWeek,6,crontab.dayOfWeekElement);
              boolean isNextInvocationNotInThisDate=currentTime.getTimeInMillis() > nextInvocationTime.getTimeInMillis();
              if (isDayOfWeekNotContainedInCrontab || isNextInvocationNotInThisDate) {
                int addDays=0;
                int nextDayOfWeek=getFixedNextInvocationValue(dayOfWeek,6,crontab.dayOfWeekElement);
                if (nextDayOfWeek > dayOfWeek) {
                  addDays=nextDayOfWeek - dayOfWeek;
                }
 else {
                  addDays=nextDayOfWeek - dayOfWeek + 7;
                }
                int addDaysByDayElement=getFixedNextInvocationValue(day,crontab.dayFixedInvocations) - day;
                if (addDaysByDayElement > 0 && addDaysByDayElement < addDays) {
                  addDays=addDaysByDayElement;
                  isDayOfWeekPrior=false;
                }
                nextInvocationTime.add(Calendar.DATE,addDays);
              }
              isDayModified=true;
            }
          }
 else {
            nextInvocationTime.set(Calendar.HOUR_OF_DAY,getFixedNextInvocationValue(hour,23,crontab.hourElement));
            isHourModified=true;
          }
        }
 else {
          nextInvocationTime.add(Calendar.HOUR_OF_DAY,1);
          isHourModified=true;
        }
      }
 else {
        if (!isDayModified && hour >= CalendarUtil.get24Hour(currentTime)) {
          nextInvocationTime.set(Calendar.MINUTE,getFixedSameOrNextInvocationValue(minute,crontab.minuteFixedInvocations));
        }
 else {
          nextInvocationTime.set(Calendar.MINUTE,getFixedMinimumInvocationValue(crontab.minuteFixedInvocations));
        }
        isMinuteModified=true;
      }
      loopCounter++;
    }
  }
 else {
    while ((isMonthModified && (!isDayModified || !isHourModified)) || nextInvocationTime.getTimeInMillis() < currentTime.getTimeInMillis()) {
      if (loopCounter >= 100) {
        throw new IllegalStateException(""String_Node_Str"");
      }
      if (isHourModified || crontab.hourElement.isNotWildcard()) {
        if (isHourModified || crontab.hourElement.isFixedValue()) {
          if (isDayModified || crontab.dayElement.isNotWildcard()) {
            if (isDayModified || crontab.dayElement.isFixedValue()) {
              if (isMonthModified || crontab.monthElement.isNotWildcard()) {
                if (isMonthModified || crontab.monthElement.isFixedValue()) {
                  nextInvocationTime.add(Calendar.YEAR,1);
                }
 else {
                  nextInvocationTime.set(Calendar.MONTH,getFixedNextInvocationValue(month,12,crontab.monthElement));
                  isHourModified=true;
                  isDayModified=true;
                  isMonthModified=true;
                }
              }
 else {
                nextInvocationTime.add(Calendar.MONTH,1);
                isHourModified=false;
                isDayModified=crontab.dayElement.isFixedValue();
                isMonthModified=true;
                hour=0;
                if (isInvocationValueContainedInCrontabValue(0,23,crontab.hourElement)) {
                  nextInvocationTime.set(Calendar.HOUR_OF_DAY,0);
                  isHourModified=true;
                }
                minute=0;
                int newMinuteValue=0;
                if (crontab.minuteElement.isFixedValue()) {
                  newMinuteValue=getFixedNextInvocationValue(minute,59,crontab.minuteElement);
                }
 else {
                  newMinuteValue=getFixedNextInvocationValue(minute,crontab.minuteFixedInvocations);
                }
                nextInvocationTime.set(Calendar.MINUTE,newMinuteValue);
                nextInvocationTime.set(Calendar.SECOND,0);
              }
            }
 else {
              nextInvocationTime.set(Calendar.DATE,getFixedNextInvocationValue(day,31,crontab.dayElement));
              isHourModified=true;
              isDayModified=true;
            }
          }
 else {
            nextInvocationTime.add(Calendar.DATE,1);
            isHourModified=true;
            isDayModified=true;
          }
        }
 else {
          nextInvocationTime.set(Calendar.HOUR_OF_DAY,getFixedNextInvocationValue(hour,23,crontab.hourElement));
          isHourModified=true;
        }
      }
 else {
        nextInvocationTime.add(Calendar.HOUR_OF_DAY,1);
        isHourModified=true;
      }
      loopCounter++;
    }
  }
  return nextInvocationTime.getTimeInMillis();
}","public long getNextInvocationTime(Calendar currentTime,Crontab crontab){
  int millisecond=CalendarUtil.getMillisecond(currentTime);
  if (millisecond > 0) {
    currentTime.set(Calendar.MILLISECOND,0);
    currentTime.add(Calendar.SECOND,1);
  }
  int second=CalendarUtil.getSecond(currentTime);
  int minute=CalendarUtil.getMinute(currentTime);
  if (second > 0) {
    minute++;
  }
  if (crontab.minuteElement.isFixedValue()) {
    minute=getFixedNextInvocationValue(minute,59,crontab.minuteElement);
  }
 else {
    minute=getFixedSameOrNextInvocationValue(minute,crontab.minuteFixedInvocations);
  }
  int hour=CalendarUtil.get24Hour(currentTime);
  if (crontab.hourElement.isFixedValue()) {
    int newHour=crontab.hourElement.toInt();
    if (newHour > hour) {
      if (crontab.minuteElement.isFixedValue()) {
        minute=getFixedNextInvocationValue(minute,59,crontab.minuteElement);
      }
 else {
        minute=getFixedMinimumInvocationValue(crontab.minuteFixedInvocations);
      }
    }
    hour=newHour;
  }
  crontab=replaceWildcardsOfMinuteOrHourValue(crontab);
  int day=CalendarUtil.getDay(currentTime);
  if (crontab.dayElement.isFixedValue()) {
    day=crontab.dayElement.toInt();
  }
  int dayOfWeek=getCrontabDayOfWeekNumber(currentTime);
  if (dayOfWeek >= 7) {
    dayOfWeek=dayOfWeek - 7;
  }
  int month=CalendarUtil.getMonth(currentTime);
  if (crontab.monthElement.isFixedValue()) {
    month=crontab.monthElement.toInt();
  }
  int year=CalendarUtil.getYear(currentTime);
  Calendar nextInvocationTime=CalendarUtil.getCalendar(year,month,day,hour,minute,0);
  boolean isMinuteModified=false;
  boolean isHourModified=false;
  boolean isDayModified=false;
  boolean isMonthModified=false;
  boolean isDayOfWeekPrior=true;
  int loopCounter=0;
  if (crontab.dayOfWeekElement.isNotWildcard()) {
    while (nextInvocationTime.getTimeInMillis() <= currentTime.getTimeInMillis() || (isDayOfWeekPrior && isDayOfWeekNotCameAt(crontab,nextInvocationTime,dayOfWeek))) {
      if (loopCounter >= 100) {
        throw new IllegalStateException(""String_Node_Str"");
      }
      if (isMinuteModified || crontab.minuteElement.isWildcard()) {
        if (isHourModified || crontab.hourElement.isNotWildcard()) {
          if (isHourModified || crontab.hourElement.isFixedValue()) {
            if (isDayModified) {
              if (isMonthModified || crontab.monthElement.isNotWildcard()) {
                if (isMonthModified || crontab.monthElement.isFixedValue()) {
                  nextInvocationTime.add(Calendar.YEAR,1);
                }
 else {
                  nextInvocationTime.set(Calendar.MONTH,getFixedNextInvocationValue(month,12,crontab.monthElement));
                  isMonthModified=true;
                }
              }
 else {
                nextInvocationTime.add(Calendar.MONTH,1);
                isMonthModified=true;
              }
            }
 else {
              boolean isDayOfWeekNotContainedInCrontab=!isInvocationValueContainedInCrontabValue(dayOfWeek,6,crontab.dayOfWeekElement);
              boolean isNextInvocationNotInThisDate=currentTime.getTimeInMillis() > nextInvocationTime.getTimeInMillis();
              if (isDayOfWeekNotContainedInCrontab || isNextInvocationNotInThisDate) {
                int addDays=0;
                int nextDayOfWeek=getFixedNextInvocationValue(dayOfWeek,6,crontab.dayOfWeekElement);
                if (nextDayOfWeek > dayOfWeek) {
                  addDays=nextDayOfWeek - dayOfWeek;
                }
 else {
                  addDays=nextDayOfWeek - dayOfWeek + 7;
                }
                int addDaysByDayElement=getFixedNextInvocationValue(day,crontab.dayFixedInvocations) - day;
                if (addDaysByDayElement > 0 && addDaysByDayElement < addDays) {
                  addDays=addDaysByDayElement;
                  isDayOfWeekPrior=false;
                }
                nextInvocationTime.add(Calendar.DATE,addDays);
              }
              isDayModified=true;
            }
          }
 else {
            nextInvocationTime.set(Calendar.HOUR_OF_DAY,getFixedNextInvocationValue(hour,23,crontab.hourElement));
            isHourModified=true;
          }
        }
 else {
          nextInvocationTime.add(Calendar.HOUR_OF_DAY,1);
          isHourModified=true;
        }
      }
 else {
        if (!isDayModified && hour >= CalendarUtil.get24Hour(currentTime)) {
          nextInvocationTime.set(Calendar.MINUTE,getFixedSameOrNextInvocationValue(minute,crontab.minuteFixedInvocations));
        }
 else {
          nextInvocationTime.set(Calendar.MINUTE,getFixedMinimumInvocationValue(crontab.minuteFixedInvocations));
        }
        isMinuteModified=true;
      }
      loopCounter++;
    }
  }
 else {
    while ((isMonthModified && (!isDayModified || !isHourModified)) || nextInvocationTime.getTimeInMillis() < currentTime.getTimeInMillis()) {
      if (loopCounter >= 100) {
        throw new IllegalStateException(""String_Node_Str"");
      }
      if (isHourModified || crontab.hourElement.isNotWildcard()) {
        if (isHourModified || crontab.hourElement.isFixedValue()) {
          if (isDayModified || crontab.dayElement.isNotWildcard()) {
            if (isDayModified || crontab.dayElement.isFixedValue()) {
              if (isMonthModified || crontab.monthElement.isNotWildcard()) {
                if (isMonthModified || crontab.monthElement.isFixedValue()) {
                  nextInvocationTime.add(Calendar.YEAR,1);
                }
 else {
                  nextInvocationTime.set(Calendar.MONTH,getFixedNextInvocationValue(month,12,crontab.monthElement));
                  isHourModified=true;
                  isDayModified=true;
                  isMonthModified=true;
                }
              }
 else {
                nextInvocationTime.add(Calendar.MONTH,1);
                isHourModified=false;
                isDayModified=crontab.dayElement.isFixedValue();
                isMonthModified=true;
                hour=0;
                if (isInvocationValueContainedInCrontabValue(0,23,crontab.hourElement)) {
                  nextInvocationTime.set(Calendar.HOUR_OF_DAY,0);
                  isHourModified=true;
                }
                minute=0;
                int newMinuteValue=0;
                if (crontab.minuteElement.isFixedValue()) {
                  newMinuteValue=getFixedNextInvocationValue(minute,59,crontab.minuteElement);
                }
 else {
                  newMinuteValue=getFixedNextInvocationValue(minute,crontab.minuteFixedInvocations);
                }
                nextInvocationTime.set(Calendar.MINUTE,newMinuteValue);
                nextInvocationTime.set(Calendar.SECOND,0);
              }
            }
 else {
              nextInvocationTime.set(Calendar.DATE,getFixedNextInvocationValue(day,31,crontab.dayElement));
              isHourModified=true;
              isDayModified=true;
            }
          }
 else {
            nextInvocationTime.add(Calendar.DATE,1);
            isHourModified=true;
            isDayModified=true;
          }
        }
 else {
          nextInvocationTime.set(Calendar.HOUR_OF_DAY,getFixedNextInvocationValue(hour,23,crontab.hourElement));
          isHourModified=true;
        }
      }
 else {
        nextInvocationTime.add(Calendar.HOUR_OF_DAY,1);
        isHourModified=true;
      }
      loopCounter++;
    }
  }
  return nextInvocationTime.getTimeInMillis();
}",0.9881761348192444
96593,"public Crontab parseLine(RawCrontabLine line){
  Crontab crontab=new Crontab();
  String lineString=line.toString();
  if (lineString.equals(""String_Node_Str"") || lineString.startsWith(""String_Node_Str"")) {
    return null;
  }
  crontab.rawLine=new RawCrontabLine(lineString);
  try {
    String[] elements=lineString.split(""String_Node_Str"");
    if (elements[0].matches(""String_Node_Str"")) {
      return getIntervalInvocationCrontab(crontab,elements);
    }
 else {
      return getBasicCrontab(crontab,elements);
    }
  }
 catch (  ArrayIndexOutOfBoundsException e) {
    taskunLog.error(""String_Node_Str"");
    throw new IllegalArgumentException(""String_Node_Str"");
  }
}","public Crontab parseLine(RawCrontabLine line){
  Crontab crontab=new Crontab();
  String lineString=line.toString();
  if (lineString.equals(""String_Node_Str"") || lineString.startsWith(""String_Node_Str"")) {
    return crontab;
  }
  crontab.rawLine=new RawCrontabLine(lineString);
  try {
    String[] elements=lineString.split(""String_Node_Str"");
    if (elements[0].matches(""String_Node_Str"")) {
      return getIntervalInvocationCrontab(crontab,elements);
    }
 else {
      return getBasicCrontab(crontab,elements);
    }
  }
 catch (  ArrayIndexOutOfBoundsException e) {
    taskunLog.error(""String_Node_Str"");
    throw new IllegalArgumentException(""String_Node_Str"");
  }
}",0.991905813097866
96594,"public void add(Crontab crontab){
  RawCrontabLine line=crontab.rawLine;
  if (!line.toString().startsWith(""String_Node_Str"") && !line.toString().equals(""String_Node_Str"") && !isAlreadyRegistered(crontab)) {
    crontabLines.add(crontab);
  }
}","public void add(Crontab crontab){
  if (crontab != null) {
    RawCrontabLine line=crontab.rawLine;
    if (line != null && !line.toString().startsWith(""String_Node_Str"") && !line.toString().equals(""String_Node_Str"") && !isAlreadyRegistered(crontab)) {
      crontabLines.add(crontab);
    }
  }
}",0.9020332717190388
96595,"@Override public void init() throws ServletException {
  super.init();
  prepareToInit();
  if (injector == null) {
    throw new IllegalStateException(""String_Node_Str"");
  }
  schedulerConfig=injector.getSchedulerConfig();
  StringBuilder sb=new StringBuilder();
  if (schedulerConfig.enableInvokingScheduler) {
    scheduler=injector.getScheduler();
    scheduler.initialize(injector);
    scheduler.start();
    sb.append(""String_Node_Str"");
    if (schedulerConfig.namedServers != null) {
      sb.append(""String_Node_Str"");
      for (      String key : schedulerConfig.namedServers.keySet()) {
        sb.append(key);
        sb.append(""String_Node_Str"");
        sb.append(schedulerConfig.namedServers.get(key));
        sb.append(""String_Node_Str"");
      }
      sb.append(""String_Node_Str"");
    }
  }
 else {
    sb.append(""String_Node_Str"");
  }
  log.logp(Level.INFO,this.getClass().getCanonicalName(),""String_Node_Str"",sb.toString());
}","@Override public void init() throws ServletException {
  super.init();
  prepareToInit();
  if (injector == null) {
    throw new IllegalStateException(""String_Node_Str"");
  }
  schedulerConfig=injector.getSchedulerConfig();
  StringBuilder sb=new StringBuilder();
  if (schedulerConfig.enableInvokingScheduler) {
    scheduler=injector.getScheduler();
    scheduler.initialize(injector);
    scheduler.start();
    sb.append(""String_Node_Str"");
    if (schedulerConfig.namedServers != null) {
      sb.append(""String_Node_Str"");
      for (      String key : schedulerConfig.namedServers.keySet()) {
        sb.append(key);
        sb.append(""String_Node_Str"");
        sb.append(schedulerConfig.namedServers.get(key));
        sb.append(""String_Node_Str"");
      }
      sb.append(""String_Node_Str"");
    }
  }
 else {
    sb.append(""String_Node_Str"");
  }
  log.info(sb.toString());
}",0.9597388465723612
96596,"@Override protected void prepareToInit(){
  ServletInjector injector=new ServletInjector(){
    @Override public SchedulerConfig getSchedulerConfig(){
      Properties props=new Properties();
      try {
        props.load(DefaultSchedulerServlet.class.getClassLoader().getResourceAsStream(""String_Node_Str""));
      }
 catch (      IOException e) {
        throw new IllegalStateException(""String_Node_Str"");
      }
      SchedulerConfig config=new SchedulerConfig();
      config.enableInvokingScheduler=Boolean.valueOf((String)props.get(""String_Node_Str""));
      config.enableLoggingForEachCrondInvocation=Boolean.valueOf((String)props.get(""String_Node_Str""));
      for (int i=0; i < 10; i++) {
        String namedServerN=(String)props.get(""String_Node_Str"" + i);
        if (!StringUtil.isEmpty(namedServerN))         config.namedServers.put(""String_Node_Str"" + i,namedServerN);
      }
      return config;
    }
    @Override public Scheduler getScheduler(){
      return new TaskunScheduler();
    }
    @Override @SuppressWarnings(""String_Node_Str"") public <T>T inject(    Class<?> clazz){
      try {
        return (T)clazz.newInstance();
      }
 catch (      Exception e) {
        throw new RuntimeException(e);
      }
    }
  }
;
  super.setInjector(injector);
}","@Override protected void prepareToInit(){
  ServletInjector injector=new ServletInjector(){
    @Override public SchedulerConfig getSchedulerConfig(){
      Properties props=new Properties();
      try {
        ClassLoader classLoader=DefaultSchedulerServlet.class.getClassLoader();
        props.load(classLoader.getResourceAsStream(""String_Node_Str""));
      }
 catch (      IOException e) {
        throw new IllegalStateException(""String_Node_Str"");
      }
      SchedulerConfig config=new SchedulerConfig();
      config.enableInvokingScheduler=Boolean.valueOf((String)props.get(""String_Node_Str""));
      config.enableLoggingForEachCrondInvocation=Boolean.valueOf((String)props.get(""String_Node_Str""));
      for (int i=0; i < 10; i++) {
        String namedServerN=(String)props.get(""String_Node_Str"" + i);
        if (!StringUtil.isEmpty(namedServerN))         config.namedServers.put(""String_Node_Str"" + i,namedServerN);
      }
      return config;
    }
    @Override public Scheduler getScheduler(){
      return new TaskunScheduler();
    }
    @Override @SuppressWarnings(""String_Node_Str"") public <T>T inject(    Class<?> clazz){
      try {
        return (T)clazz.newInstance();
      }
 catch (      Exception e) {
        throw new RuntimeException(e);
      }
    }
  }
;
  super.setInjector(injector);
}",0.9742999616417338
96597,"@Override public SchedulerConfig getSchedulerConfig(){
  Properties props=new Properties();
  try {
    props.load(DefaultSchedulerServlet.class.getClassLoader().getResourceAsStream(""String_Node_Str""));
  }
 catch (  IOException e) {
    throw new IllegalStateException(""String_Node_Str"");
  }
  SchedulerConfig config=new SchedulerConfig();
  config.enableInvokingScheduler=Boolean.valueOf((String)props.get(""String_Node_Str""));
  config.enableLoggingForEachCrondInvocation=Boolean.valueOf((String)props.get(""String_Node_Str""));
  for (int i=0; i < 10; i++) {
    String namedServerN=(String)props.get(""String_Node_Str"" + i);
    if (!StringUtil.isEmpty(namedServerN))     config.namedServers.put(""String_Node_Str"" + i,namedServerN);
  }
  return config;
}","@Override public SchedulerConfig getSchedulerConfig(){
  Properties props=new Properties();
  try {
    ClassLoader classLoader=DefaultSchedulerServlet.class.getClassLoader();
    props.load(classLoader.getResourceAsStream(""String_Node_Str""));
  }
 catch (  IOException e) {
    throw new IllegalStateException(""String_Node_Str"");
  }
  SchedulerConfig config=new SchedulerConfig();
  config.enableInvokingScheduler=Boolean.valueOf((String)props.get(""String_Node_Str""));
  config.enableLoggingForEachCrondInvocation=Boolean.valueOf((String)props.get(""String_Node_Str""));
  for (int i=0; i < 10; i++) {
    String namedServerN=(String)props.get(""String_Node_Str"" + i);
    if (!StringUtil.isEmpty(namedServerN))     config.namedServers.put(""String_Node_Str"" + i,namedServerN);
  }
  return config;
}",0.9594855305466238
96598,"Log getLog(String name){
  try {
    return logImplClass.getConstructor(StringUtil.class).newInstance();
  }
 catch (  Throwable t) {
    return new UtilLoggerImpl(name);
  }
}","Log getLog(String name){
  try {
    return logImplClass.getConstructor(String.class).newInstance(name);
  }
 catch (  Throwable t) {
    return new UtilLoggerImpl(name);
  }
}",0.9772727272727272
96599,"Log getLog(String name){
  try {
    return logImplClass.getConstructor(StringUtil.class).newInstance();
  }
 catch (  Throwable t) {
    return new UtilLoggerImpl(name);
  }
}","Log getLog(String name){
  try {
    return logImplClass.getConstructor(String.class).newInstance(name);
  }
 catch (  Throwable t) {
    return new UtilLoggerImpl(name);
  }
}",0.9772727272727272
96600,"public HudsonFixture(String url,String version,Type type,String info){
  super(HudsonCorePlugin.CONNECTOR_KIND,url);
  this.version=version;
  this.type=type;
  setInfo(type.toString(),version,info);
  setUseShortUsernames(""String_Node_Str"".compareTo(version) < 0);
  setUseCertificateAuthentication(info.contains(""String_Node_Str""));
}","public HudsonFixture(String url,String version,Type type,String info){
  super(HudsonCorePlugin.CONNECTOR_KIND,url);
  this.version=version;
  this.type=type;
  setInfo(type.toString(),version,info);
  setUseCertificateAuthentication(info.contains(""String_Node_Str""));
}",0.7722772277227723
96601,"public boolean canAuthenticate(){
  return this != HUDSON_2_1_SECURE && this != HUDSON_3_0;
}","public boolean canAuthenticate(){
  return this != HUDSON_3_0;
}",0.8152866242038217
96602,"public static Test suite(boolean defaultOnly){
  ManagedTestSuite suite=new ManagedTestSuite(AllBuildsTests.class.getName());
  suite.addTestSuite(BuildModelManagerTest.class);
  suite.addTestSuite(JUnitResultGeneratorTest.class);
  suite.addTestSuite(RefreshOperationTest.class);
  suite.addTestSuite(BuildsUrlHandlerTest.class);
  return suite;
}","public static Test suite(boolean defaultOnly){
  TestSuite suite=new TestSuite(AllBuildsTests.class.getName());
  suite.addTestSuite(BuildModelManagerTest.class);
  suite.addTestSuite(JUnitResultGeneratorTest.class);
  suite.addTestSuite(RefreshOperationTest.class);
  suite.addTestSuite(BuildsUrlHandlerTest.class);
  return suite;
}",0.9794721407624634
96603,"@Override protected void authenticate(IOperationMonitor monitor) throws IOException {
  UserCredentials credentials=getClient().getLocation().getCredentials(AuthenticationType.REPOSITORY);
  if (credentials == null) {
    throw new IllegalStateException(""String_Node_Str"");
  }
  HttpPost request=createPostRequest(getClient().getLocation().getUrl() + ""String_Node_Str"");
  HudsonLoginForm form=new HudsonLoginForm();
  form.j_username=credentials.getUserName();
  form.j_password=credentials.getPassword();
  form.from=""String_Node_Str"";
  request.setEntity(form.createEntity());
  HttpResponse response=getClient().execute(request,monitor);
  try {
    validate(response,monitor);
    int statusCode=response.getStatusLine().getStatusCode();
    if (statusCode != HttpStatus.SC_MOVED_TEMPORARILY) {
      getClient().setAuthenticated(false);
      throw new IOException(NLS.bind(""String_Node_Str"",HttpUtil.getStatusText(statusCode)));
    }
    Header header=response.getFirstHeader(""String_Node_Str"");
    if (header != null && header.getValue().endsWith(""String_Node_Str"")) {
      getClient().setAuthenticated(false);
      throw new AuthenticationException(""String_Node_Str"",new AuthenticationRequest<AuthenticationType<UserCredentials>>(getClient().getLocation(),AuthenticationType.REPOSITORY));
    }
    getClient().setAuthenticated(hasValidatAuthenticationState());
  }
  finally {
    HttpUtil.release(request,response,monitor);
  }
  updateCrumb(monitor);
}","@Override protected void authenticate(IOperationMonitor monitor) throws IOException {
  UserCredentials credentials=getClient().getLocation().getCredentials(AuthenticationType.REPOSITORY);
  if (credentials == null) {
    throw new IllegalStateException(""String_Node_Str"");
  }
  HttpPost request=createPostRequest(getClient().getLocation().getUrl() + ""String_Node_Str"");
  HttpResponse response=executeAuthenticationRequest(monitor,credentials,request);
  try {
    if (response.getStatusLine().getStatusCode() == HttpStatus.SC_NOT_FOUND) {
      HttpUtil.release(request,response,monitor);
      request=createPostRequest(getClient().getLocation().getUrl() + ""String_Node_Str"");
      response=executeAuthenticationRequest(monitor,credentials,request);
    }
    validate(response,monitor);
    int statusCode=response.getStatusLine().getStatusCode();
    if (statusCode != HttpStatus.SC_MOVED_TEMPORARILY) {
      getClient().setAuthenticated(false);
      throw new IOException(NLS.bind(""String_Node_Str"",HttpUtil.getStatusText(statusCode)));
    }
    Header header=response.getFirstHeader(""String_Node_Str"");
    if (header != null && header.getValue().endsWith(""String_Node_Str"")) {
      getClient().setAuthenticated(false);
      throw new AuthenticationException(""String_Node_Str"",new AuthenticationRequest<AuthenticationType<UserCredentials>>(getClient().getLocation(),AuthenticationType.REPOSITORY));
    }
    getClient().setAuthenticated(hasValidatAuthenticationState());
  }
  finally {
    HttpUtil.release(request,response,monitor);
  }
  updateCrumb(monitor);
}",0.7998687664041995
96604,"public boolean canAuthenticate(){
  return this != HUDSON_3_0;
}","public boolean canAuthenticate(){
  return true;
}",0.8245614035087719
96605,"@Override protected Control createAdditionalContents(final Composite parent){
  ExpandableComposite section=new ExpandableComposite(parent,SWT.NONE,ExpandableComposite.TWISTIE | ExpandableComposite.CLIENT_INDENT | ExpandableComposite.COMPACT| ExpandableComposite.EXPANDED);
  section.clientVerticalSpacing=0;
  section.setBackground(parent.getBackground());
  section.setFont(JFaceResources.getFontRegistry().getBold(JFaceResources.DIALOG_FONT));
  section.addExpansionListener(new ExpansionAdapter(){
    @Override public void expansionStateChanged(    ExpansionEvent e){
      parent.layout(true);
    }
  }
);
  section.setText(""String_Node_Str"");
  Composite composite=new Composite(section,SWT.NONE);
  section.setClient(composite);
  GridLayoutFactory.fillDefaults().numColumns(2).margins(0,5).applyTo(composite);
  CheckboxFilteredTree filteredTree=new CheckboxFilteredTree(composite,SWT.FULL_SELECTION | SWT.BORDER,new SubstringPatternFilter());
  GridDataFactory.fillDefaults().grab(true,true).hint(SWT.DEFAULT,200).applyTo(filteredTree);
  planViewer=filteredTree.getCheckboxTreeViewer();
  planViewer.addCheckStateListener(new ICheckStateListener(){
    public void checkStateChanged(    CheckStateChangedEvent event){
      BuildPlan plan=(BuildPlan)event.getElement();
      plan.setSelected(event.getChecked());
    }
  }
);
  planViewer.setCheckStateProvider(new ICheckStateProvider(){
    public boolean isChecked(    Object element){
      return ((IBuildPlan)element).isSelected();
    }
    public boolean isGrayed(    Object element){
      for (      IBuildPlan child : ((IBuildPlan)element).getChildren()) {
        if (!child.isSelected()) {
          return true;
        }
      }
      return false;
    }
  }
);
  planViewer.setLabelProvider(new LabelProvider(){
    @Override public String getText(    Object element){
      return ((IBuildPlan)element).getName();
    }
  }
);
  planViewer.setContentProvider(new ITreeContentProvider(){
    private BuildServerConfiguration configuration;
    private final Object[] EMPTY_ARRAY=new Object[0];
    public void dispose(){
    }
    public Object[] getChildren(    Object parentElement){
      return EMPTY_ARRAY;
    }
    public Object[] getElements(    Object inputElement){
      return configuration.getPlans().toArray();
    }
    public Object getParent(    Object element){
      return null;
    }
    public boolean hasChildren(    Object element){
      return false;
    }
    public void inputChanged(    Viewer viewer,    Object oldInput,    Object newInput){
      configuration=(BuildServerConfiguration)newInput;
    }
  }
);
  planViewer.setSorter(new ViewerSorter());
  Composite buttonComposite=new Composite(composite,SWT.NONE);
  GridDataFactory.fillDefaults().align(SWT.BEGINNING,SWT.TOP).applyTo(buttonComposite);
  GridLayoutFactory.fillDefaults().numColumns(1).margins(0,0).extendedMargins(0,0,0,0).applyTo(buttonComposite);
  createButtons(buttonComposite);
  return section;
}","@Override protected Control createAdditionalContents(final Composite parent){
  final ExpandableComposite section=new ExpandableComposite(parent,SWT.NONE,ExpandableComposite.TWISTIE | ExpandableComposite.CLIENT_INDENT | ExpandableComposite.COMPACT| ExpandableComposite.EXPANDED);
  section.clientVerticalSpacing=0;
  section.setBackground(parent.getBackground());
  section.setFont(JFaceResources.getFontRegistry().getBold(JFaceResources.DIALOG_FONT));
  section.addExpansionListener(new ExpansionAdapter(){
    @Override public void expansionStateChanged(    ExpansionEvent e){
      if (section.getLayoutData() instanceof GridData) {
        ((GridData)section.getLayoutData()).grabExcessVerticalSpace=e.getState();
      }
      parent.layout(true);
    }
  }
);
  section.setText(""String_Node_Str"");
  Composite composite=new Composite(section,SWT.NONE);
  section.setClient(composite);
  GridLayoutFactory.fillDefaults().numColumns(2).margins(0,5).applyTo(composite);
  CheckboxFilteredTree filteredTree=new CheckboxFilteredTree(composite,SWT.FULL_SELECTION | SWT.BORDER,new SubstringPatternFilter());
  GridDataFactory.fillDefaults().grab(true,true).hint(SWT.DEFAULT,200).applyTo(filteredTree);
  planViewer=filteredTree.getCheckboxTreeViewer();
  planViewer.addCheckStateListener(new ICheckStateListener(){
    public void checkStateChanged(    CheckStateChangedEvent event){
      BuildPlan plan=(BuildPlan)event.getElement();
      plan.setSelected(event.getChecked());
    }
  }
);
  planViewer.setCheckStateProvider(new ICheckStateProvider(){
    public boolean isChecked(    Object element){
      return ((IBuildPlan)element).isSelected();
    }
    public boolean isGrayed(    Object element){
      for (      IBuildPlan child : ((IBuildPlan)element).getChildren()) {
        if (!child.isSelected()) {
          return true;
        }
      }
      return false;
    }
  }
);
  planViewer.setLabelProvider(new LabelProvider(){
    @Override public String getText(    Object element){
      return ((IBuildPlan)element).getName();
    }
  }
);
  planViewer.setContentProvider(new ITreeContentProvider(){
    private BuildServerConfiguration configuration;
    private final Object[] EMPTY_ARRAY=new Object[0];
    public void dispose(){
    }
    public Object[] getChildren(    Object parentElement){
      return EMPTY_ARRAY;
    }
    public Object[] getElements(    Object inputElement){
      return configuration.getPlans().toArray();
    }
    public Object getParent(    Object element){
      return null;
    }
    public boolean hasChildren(    Object element){
      return false;
    }
    public void inputChanged(    Viewer viewer,    Object oldInput,    Object newInput){
      configuration=(BuildServerConfiguration)newInput;
    }
  }
);
  planViewer.setSorter(new ViewerSorter());
  Composite buttonComposite=new Composite(composite,SWT.NONE);
  GridDataFactory.fillDefaults().align(SWT.BEGINNING,SWT.TOP).applyTo(buttonComposite);
  GridLayoutFactory.fillDefaults().numColumns(1).margins(0,0).extendedMargins(0,0,0,0).applyTo(buttonComposite);
  createButtons(buttonComposite);
  return section;
}",0.9749713724848684
96606,"@Override public void expansionStateChanged(ExpansionEvent e){
  parent.layout(true);
}","@Override public void expansionStateChanged(ExpansionEvent e){
  if (section.getLayoutData() instanceof GridData) {
    ((GridData)section.getLayoutData()).grabExcessVerticalSpace=e.getState();
  }
  parent.layout(true);
}",0.517799352750809
96607,"private static void addTests(boolean defaultOnly,TestSuite suite){
  suite.addTestSuite(HudsonConnectorTest.class);
  suite.addTestSuite(HudsonServerBehaviourTest.class);
  suite.addTestSuite(HudsonValidationTest.class);
  for (  HudsonFixture fixture : HudsonFixture.ALL) {
    fixture.createSuite(suite);
    fixture.add(HudsonClientTest.class);
    fixture.add(HudsonIntegrationTest.class);
    fixture.done();
  }
  for (  HudsonFixture fixture : HudsonFixture.MISC) {
    fixture.createSuite(suite);
    fixture.add(HudsonClientTest.class);
    fixture.done();
  }
}","private static void addTests(boolean defaultOnly,TestSuite suite){
  suite.addTestSuite(HudsonConnectorTest.class);
  suite.addTestSuite(HudsonServerBehaviourTest.class);
  suite.addTestSuite(HudsonValidationTest.class);
  for (  HudsonFixture fixture : HudsonFixture.ALL) {
    fixture.createSuite(suite);
    fixture.add(HudsonClientTest.class);
    fixture.add(HudsonIntegrationTest.class);
    fixture.done();
  }
  for (  HudsonFixture fixture : HudsonFixture.MISC) {
    if (fixture == HudsonFixture.HUDSON_2_1_SECURE && CommonTestUtil.isCertificateAuthBroken()) {
      return;
    }
    fixture.createSuite(suite);
    fixture.add(HudsonClientTest.class);
    fixture.done();
  }
}",0.7666666666666667
96608,"public void testGetJobs() throws Exception {
  RestfulHudsonClient client=harness.connect();
  List<HudsonModelJob> jobs=client.getJobs(null,null);
  HudsonTestUtil.assertContains(jobs,harness.getPlanFailing());
  HudsonTestUtil.assertContains(jobs,harness.getPlanSucceeding());
  HudsonTestUtil.assertHealthReport(jobs);
}","public void testGetJobs() throws Exception {
  RestfulHudsonClient client=harness.connect(PrivilegeLevel.ANONYMOUS);
  List<HudsonModelJob> jobs=client.getJobs(null,null);
  HudsonTestUtil.assertContains(jobs,harness.getPlanFailing());
  HudsonTestUtil.assertContains(jobs,harness.getPlanSucceeding());
  HudsonTestUtil.assertHealthReport(jobs);
}",0.9492537313432836
96609,"public void testValidateValidUrl() throws Exception {
  RestfulHudsonClient client=harness.getFixture().connect();
  HudsonServerInfo info=client.validate(null);
  assertEquals(harness.getFixture().getType(),info.getType());
  assertEquals(harness.getFixture().getVersion(),info.getVersion());
}","public void testValidateValidUrl() throws Exception {
  RestfulHudsonClient client=harness.connect(PrivilegeLevel.ANONYMOUS);
  HudsonServerInfo info=client.validate(null);
  assertEquals(harness.getFixture().getType(),info.getType());
  assertEquals(harness.getFixture().getVersion(),info.getVersion());
}",0.9118136439267888
96610,"public void testGetJobsWithWhitespaces() throws Exception {
  RestfulHudsonClient client=harness.connect();
  List<HudsonModelJob> jobs=client.getJobs(Collections.singletonList(harness.getPlanWhitespace()),null);
  assertEquals(1,jobs.size());
  HudsonModelJob job=jobs.get(0);
  assertEquals(HudsonModelBallColor.BLUE,job.getColor());
  HudsonModelBuild build=client.getBuild(job,job.getLastBuild(),null);
  assertNotNull(build);
}","public void testGetJobsWithWhitespaces() throws Exception {
  RestfulHudsonClient client=harness.connect(PrivilegeLevel.ANONYMOUS);
  List<HudsonModelJob> jobs=client.getJobs(Collections.singletonList(harness.getPlanWhitespace()),null);
  assertEquals(1,jobs.size());
  HudsonModelJob job=jobs.get(0);
  assertEquals(HudsonModelBallColor.BLUE,job.getColor());
  HudsonModelBuild build=client.getBuild(job,job.getLastBuild(),null);
  assertNotNull(build);
}",0.972972972972973
96611,"public void testGetJobDisabled() throws Exception {
  RestfulHudsonClient client=harness.connect();
  List<HudsonModelJob> jobs=client.getJobs(Collections.singletonList(harness.getPlanDisabled()),null);
  assertEquals(1,jobs.size());
  HudsonModelJob job=jobs.get(0);
  assertEquals(HudsonModelBallColor.DISABLED,job.getColor());
  try {
    HudsonModelBuild build=client.getBuild(job,BuildId.LAST.getBuild(),null);
    fail(""String_Node_Str"" + harness.getPlanDisabled() + ""String_Node_Str""+ build);
  }
 catch (  HudsonResourceNotFoundException e) {
  }
}","public void testGetJobDisabled() throws Exception {
  RestfulHudsonClient client=harness.connect(PrivilegeLevel.ANONYMOUS);
  List<HudsonModelJob> jobs=client.getJobs(Collections.singletonList(harness.getPlanDisabled()),null);
  assertEquals(1,jobs.size());
  HudsonModelJob job=jobs.get(0);
  assertEquals(HudsonModelBallColor.DISABLED,job.getColor());
  try {
    HudsonModelBuild build=client.getBuild(job,BuildId.LAST.getBuild(),null);
    fail(""String_Node_Str"" + harness.getPlanDisabled() + ""String_Node_Str""+ build);
  }
 catch (  HudsonResourceNotFoundException e) {
  }
}",0.9788732394366196
96612,"public HudsonFixture(String url,String version,Type type,String info){
  super(HudsonCorePlugin.CONNECTOR_KIND,url);
  this.version=version;
  this.type=type;
  setInfo(type.toString(),version,info);
  setUseShortUsernames(""String_Node_Str"".compareTo(version) < 0);
}","public HudsonFixture(String url,String version,Type type,String info){
  super(HudsonCorePlugin.CONNECTOR_KIND,url);
  this.version=version;
  this.type=type;
  setInfo(type.toString(),version,info);
  setUseShortUsernames(""String_Node_Str"".compareTo(version) < 0);
  setUseCertificateAuthentication(info.contains(""String_Node_Str""));
}",0.8855721393034826
96613,"public boolean canAuthenticate(){
  return this != HUDSON_2_1_SECURE;
}","public boolean canAuthenticate(){
  return this != HUDSON_2_1_SECURE && this != HUDSON_3_0;
}",0.8658536585365854
96614,"@Override protected HudsonFixture getDefault(){
  return HUDSON_2_1;
}","@Override protected HudsonFixture getDefault(){
  return DEFAULT;
}",0.8905109489051095
96615,"@Override public void lazyStartup(){
  try {
    final IContainer container=getContainer();
    final IDiscoveryLocator adapter=(IDiscoveryLocator)getContainer().getAdapter(IDiscoveryLocator.class);
    adapter.addServiceListener(new IServiceListener(){
      public void serviceDiscovered(      IServiceEvent anEvent){
        IServiceInfo serviceInfo=anEvent.getServiceInfo();
        IServiceID serviceId=serviceInfo.getServiceID();
        IServiceTypeID serviceTypeId=serviceId.getServiceTypeID();
        if (serviceTypeId.getName().equals(HUDSON_MDNS_ID)) {
          IServiceProperties properties=serviceInfo.getServiceProperties();
          try {
            if (properties.getProperty(HUDSON_URL_PROPERTY_ID) == null) {
              notifyMessage(Messages.HudsonDiscovery_MessageTitle,NLS.bind(Messages.HudsonDiscovery_MissingURL,new Object[]{serviceInfo.getLocation().getHost()}));
            }
 else {
              String id=(String)properties.getProperty(JENKINS_SERVER_PROPERTY_ID);
              if (id == null) {
                id=UUID.randomUUID().toString();
              }
              URI uri=new URI(properties.getProperty(HUDSON_URL_PROPERTY_ID).toString());
              if (isNew(uri,id)) {
                notifyMessage(Messages.HudsonDiscovery_MessageTitle,NLS.bind(Messages.HudsonDiscovery_MessageText,new Object[]{uri,Messages.HudsonDiscovery_ServerName,uri.toString(),id}));
              }
            }
          }
 catch (          URISyntaxException e) {
            StatusHandler.log(new Status(IStatus.ERROR,HudsonConnectorUi.ID_PLUGIN,NLS.bind(Messages.HudsonDiscovery_IncorrectURI,new Object[]{properties.getProperty(HUDSON_URL_PROPERTY_ID).toString()}),e));
          }
        }
      }
      public void serviceUndiscovered(      IServiceEvent anEvent){
      }
    }
);
    container.connect(null,null);
  }
 catch (  ContainerCreateException e) {
    StatusHandler.log(new Status(IStatus.WARNING,HudsonConnectorUi.ID_PLUGIN,Messages.HudsonDiscovery_CouldNotStartService,e));
  }
catch (  ContainerConnectException e) {
    StatusHandler.log(new Status(IStatus.WARNING,HudsonConnectorUi.ID_PLUGIN,Messages.HudsonDiscovery_CouldNotStartService,e));
  }
}","@Override public void lazyStartup(){
  try {
    final IContainer container=getContainer();
    final IDiscoveryLocator adapter=(IDiscoveryLocator)getContainer().getAdapter(IDiscoveryLocator.class);
    adapter.addServiceListener(new IServiceListener(){
      public void serviceDiscovered(      IServiceEvent anEvent){
        IServiceInfo serviceInfo=anEvent.getServiceInfo();
        IServiceID serviceId=serviceInfo.getServiceID();
        IServiceTypeID serviceTypeId=serviceId.getServiceTypeID();
        if (serviceTypeId.getName().equals(JENKINS_MDNS_ID)) {
          IServiceProperties properties=serviceInfo.getServiceProperties();
          try {
            if (properties.getProperty(URL_PROPERTY) == null) {
              notifyMessage(Messages.JenkinsDiscovery_MessageTitle,NLS.bind(Messages.JenkinsDiscovery_MissingURL,new Object[]{serviceInfo.getLocation().getHost()}));
            }
 else {
              issueJenkinsNotification(properties);
            }
          }
 catch (          URISyntaxException e) {
            StatusHandler.log(new Status(IStatus.ERROR,HudsonConnectorUi.ID_PLUGIN,NLS.bind(Messages.Discovery_IncorrectURI,new Object[]{properties.getProperty(URL_PROPERTY).toString()}),e));
          }
        }
        if (serviceTypeId.getName().equals(HUDSON_MDNS_ID)) {
          IServiceProperties properties=serviceInfo.getServiceProperties();
          try {
            if (properties.getProperty(URL_PROPERTY) == null) {
              notifyMessage(Messages.HudsonDiscovery_MessageTitle,NLS.bind(Messages.HudsonDiscovery_MissingURL,new Object[]{serviceInfo.getLocation().getHost()}));
            }
 else {
              issueHudsonNotification(properties);
            }
          }
 catch (          URISyntaxException e) {
            StatusHandler.log(new Status(IStatus.ERROR,HudsonConnectorUi.ID_PLUGIN,NLS.bind(Messages.Discovery_IncorrectURI,new Object[]{properties.getProperty(URL_PROPERTY).toString()}),e));
          }
        }
      }
      public void serviceUndiscovered(      IServiceEvent anEvent){
      }
    }
);
    container.connect(null,null);
  }
 catch (  ContainerCreateException e) {
    StatusHandler.log(new Status(IStatus.WARNING,HudsonConnectorUi.ID_PLUGIN,Messages.Discovery_CouldNotStartService,e));
  }
catch (  ContainerConnectException e) {
    StatusHandler.log(new Status(IStatus.WARNING,HudsonConnectorUi.ID_PLUGIN,Messages.Discovery_CouldNotStartService,e));
  }
}",0.7191736604260813
96616,"/** 
 * Determines whether or not the detected server is a new server or not.
 * @param uri the server URI
 * @param id the server identifier
 * @return <code>true</code> if the detected server is new.
 */
private boolean isNew(URI uri,String id){
  List<IBuildServer> servers=BuildsUi.getModel().getServers();
  for (  IBuildServer server : servers) {
    try {
      if (server.getUrl().equalsIgnoreCase(uri.toURL().toExternalForm())) {
        return false;
      }
      if (server.getLocation().getId().equals(id)) {
        return false;
      }
    }
 catch (    MalformedURLException e) {
      StatusHandler.log(new Status(IStatus.ERROR,HudsonConnectorUi.ID_PLUGIN,Messages.HudsonDiscovery_CannotConvertURI,e));
    }
  }
  return true;
}","/** 
 * Determines whether or not the detected server is a new server or not.
 * @param uri the server URI
 * @param id the server identifier
 * @return <code>true</code> if the detected server is new.
 */
private boolean isNew(URI uri,String id){
  List<IBuildServer> servers=BuildsUi.getModel().getServers();
  for (  IBuildServer server : servers) {
    try {
      if (server.getUrl().equalsIgnoreCase(uri.toURL().toExternalForm())) {
        return false;
      }
      if (server.getLocation().getId().equals(id)) {
        return false;
      }
    }
 catch (    MalformedURLException e) {
      StatusHandler.log(new Status(IStatus.ERROR,HudsonConnectorUi.ID_PLUGIN,Messages.Discovery_CannotConvertURI,e));
    }
  }
  return true;
}",0.995967741935484
96617,"public void serviceDiscovered(IServiceEvent anEvent){
  IServiceInfo serviceInfo=anEvent.getServiceInfo();
  IServiceID serviceId=serviceInfo.getServiceID();
  IServiceTypeID serviceTypeId=serviceId.getServiceTypeID();
  if (serviceTypeId.getName().equals(HUDSON_MDNS_ID)) {
    IServiceProperties properties=serviceInfo.getServiceProperties();
    try {
      if (properties.getProperty(HUDSON_URL_PROPERTY_ID) == null) {
        notifyMessage(Messages.HudsonDiscovery_MessageTitle,NLS.bind(Messages.HudsonDiscovery_MissingURL,new Object[]{serviceInfo.getLocation().getHost()}));
      }
 else {
        String id=(String)properties.getProperty(JENKINS_SERVER_PROPERTY_ID);
        if (id == null) {
          id=UUID.randomUUID().toString();
        }
        URI uri=new URI(properties.getProperty(HUDSON_URL_PROPERTY_ID).toString());
        if (isNew(uri,id)) {
          notifyMessage(Messages.HudsonDiscovery_MessageTitle,NLS.bind(Messages.HudsonDiscovery_MessageText,new Object[]{uri,Messages.HudsonDiscovery_ServerName,uri.toString(),id}));
        }
      }
    }
 catch (    URISyntaxException e) {
      StatusHandler.log(new Status(IStatus.ERROR,HudsonConnectorUi.ID_PLUGIN,NLS.bind(Messages.HudsonDiscovery_IncorrectURI,new Object[]{properties.getProperty(HUDSON_URL_PROPERTY_ID).toString()}),e));
    }
  }
}","public void serviceDiscovered(IServiceEvent anEvent){
  IServiceInfo serviceInfo=anEvent.getServiceInfo();
  IServiceID serviceId=serviceInfo.getServiceID();
  IServiceTypeID serviceTypeId=serviceId.getServiceTypeID();
  if (serviceTypeId.getName().equals(JENKINS_MDNS_ID)) {
    IServiceProperties properties=serviceInfo.getServiceProperties();
    try {
      if (properties.getProperty(URL_PROPERTY) == null) {
        notifyMessage(Messages.JenkinsDiscovery_MessageTitle,NLS.bind(Messages.JenkinsDiscovery_MissingURL,new Object[]{serviceInfo.getLocation().getHost()}));
      }
 else {
        issueJenkinsNotification(properties);
      }
    }
 catch (    URISyntaxException e) {
      StatusHandler.log(new Status(IStatus.ERROR,HudsonConnectorUi.ID_PLUGIN,NLS.bind(Messages.Discovery_IncorrectURI,new Object[]{properties.getProperty(URL_PROPERTY).toString()}),e));
    }
  }
  if (serviceTypeId.getName().equals(HUDSON_MDNS_ID)) {
    IServiceProperties properties=serviceInfo.getServiceProperties();
    try {
      if (properties.getProperty(URL_PROPERTY) == null) {
        notifyMessage(Messages.HudsonDiscovery_MessageTitle,NLS.bind(Messages.HudsonDiscovery_MissingURL,new Object[]{serviceInfo.getLocation().getHost()}));
      }
 else {
        issueHudsonNotification(properties);
      }
    }
 catch (    URISyntaxException e) {
      StatusHandler.log(new Status(IStatus.ERROR,HudsonConnectorUi.ID_PLUGIN,NLS.bind(Messages.Discovery_IncorrectURI,new Object[]{properties.getProperty(URL_PROPERTY).toString()}),e));
    }
  }
}",0.5905759162303665
96618,"@Override protected void initPage(BuildServerWizardPage page){
  page.setTitle(Messages.NewHudsonServerWizard_Title);
  page.setMessage(Messages.NewHudsonServerWizard_Message);
}","@Override protected void initPage(BuildServerWizardPage page){
  page.setTitle(Messages.NewServerWizard_Title);
  page.setMessage(Messages.NewServerWizard_Message);
}",0.9651162790697676
96619,"public HudsonServerInfo(String version){
  this.version=version;
}","public HudsonServerInfo(Type type,String version){
  this.type=type;
  this.version=version;
}",0.825
96620,"@Override public HudsonServerInfo execute() throws IOException, HudsonException {
  CommonHttpMethod method=createHeadMethod(client.getLocation().getUrl());
  try {
    execute(method,monitor);
    checkResponse(method);
    Header header=method.getResponseHeader(""String_Node_Str"");
    if (header == null) {
      throw new HudsonException(NLS.bind(""String_Node_Str"",client.getLocation().getUrl()));
    }
    HudsonServerInfo info=new HudsonServerInfo(header.getValue());
    return info;
  }
  finally {
    method.releaseConnection(monitor);
  }
}","@Override public HudsonServerInfo execute() throws IOException, HudsonException {
  CommonHttpMethod method=createHeadMethod(client.getLocation().getUrl());
  try {
    execute(method,monitor);
    checkResponse(method);
    Header header=method.getResponseHeader(""String_Node_Str"");
    Type type;
    if (header == null) {
      type=Type.HUDSON;
      header=method.getResponseHeader(""String_Node_Str"");
      if (header == null) {
        throw new HudsonException(NLS.bind(""String_Node_Str"",client.getLocation().getUrl()));
      }
    }
 else {
      type=Type.JENKINS;
    }
    HudsonServerInfo info=new HudsonServerInfo(type,header.getValue());
    return info;
  }
  finally {
    method.releaseConnection(monitor);
  }
}",0.8604832424006236
96621,"public HudsonServerInfo validate(final IOperationMonitor monitor) throws HudsonException {
  return new HudsonOperation<HudsonServerInfo>(client){
    @Override public HudsonServerInfo execute() throws IOException, HudsonException {
      CommonHttpMethod method=createHeadMethod(client.getLocation().getUrl());
      try {
        execute(method,monitor);
        checkResponse(method);
        Header header=method.getResponseHeader(""String_Node_Str"");
        if (header == null) {
          throw new HudsonException(NLS.bind(""String_Node_Str"",client.getLocation().getUrl()));
        }
        HudsonServerInfo info=new HudsonServerInfo(header.getValue());
        return info;
      }
  finally {
        method.releaseConnection(monitor);
      }
    }
  }
.run();
}","public HudsonServerInfo validate(final IOperationMonitor monitor) throws HudsonException {
  return new HudsonOperation<HudsonServerInfo>(client){
    @Override public HudsonServerInfo execute() throws IOException, HudsonException {
      CommonHttpMethod method=createHeadMethod(client.getLocation().getUrl());
      try {
        execute(method,monitor);
        checkResponse(method);
        Header header=method.getResponseHeader(""String_Node_Str"");
        Type type;
        if (header == null) {
          type=Type.HUDSON;
          header=method.getResponseHeader(""String_Node_Str"");
          if (header == null) {
            throw new HudsonException(NLS.bind(""String_Node_Str"",client.getLocation().getUrl()));
          }
        }
 else {
          type=Type.JENKINS;
        }
        HudsonServerInfo info=new HudsonServerInfo(type,header.getValue());
        return info;
      }
  finally {
        method.releaseConnection(monitor);
      }
    }
  }
.run();
}",0.845407872219053
96622,"public void testGetJobs() throws Exception {
  client=fixture.connect();
  List<HudsonModelJob> jobs=client.getJobs(null,null);
  assertContains(jobs,PLAN_FAILING);
  assertContains(jobs,PLAN_SUCCEEDING);
  assertHealthReport(jobs);
}","public void testGetJobs() throws Exception {
  RestfulHudsonClient client=harness.connect();
  List<HudsonModelJob> jobs=client.getJobs(null,null);
  HudsonTestUtil.assertContains(jobs,harness.getPlanFailing());
  HudsonTestUtil.assertContains(jobs,harness.getPlanSucceeding());
  HudsonTestUtil.assertHealthReport(jobs);
}",0.7001795332136446
96623,"public Object call() throws Exception {
  assertEquals(HudsonModelBallColor.BLUE_ANIME,getJob(PLAN_SUCCEEDING).getColor());
  return null;
}","public Object call() throws Exception {
  assertEquals(HudsonModelBallColor.BLUE_ANIME,harness.getJob(jobName).getColor());
  return null;
}",0.9
96624,"@Override protected void setUp() throws Exception {
  fixture=HudsonFixture.current();
}","@Override protected void setUp() throws Exception {
  harness=HudsonFixture.current().createHarness();
}",0.8645833333333334
96625,"public HudsonFixture(String url,String version,String info){
  super(HudsonCorePlugin.CONNECTOR_KIND,url);
  this.version=version;
  setInfo(""String_Node_Str"",version,info);
}","public HudsonFixture(String url,String version,Type type,String info){
  super(HudsonCorePlugin.CONNECTOR_KIND,url);
  this.version=version;
  this.type=type;
  setInfo(type.toString(),version,info);
}",0.8404255319148937
96626,"@Override protected HudsonFixture getDefault(){
  return DEFAULT;
}","@Override protected HudsonFixture getDefault(){
  return HUDSON_2_1;
}",0.8905109489051095
96627,"/** 
 * Packs all columns so that they are able to display all content. If there is any space left, the second column (summary) will be resized so that the entire width of the control is used.
 * @param tree the tree to resize
 */
private void doResize(final Tree tree){
  Rectangle area=tree.getClientArea();
  ScrollBar vBar=tree.getVerticalBar();
  int ac=0;
  for (  TreeColumn tc : tree.getColumns()) {
    tc.pack();
    ac+=tc.getWidth();
  }
  int width=area.width - tree.computeTrim(0,0,0,0).width + vBar.getSize().x;
  if (width > ac) {
    int nw=tree.getColumn(1).getWidth() + width - ac;
    tree.getColumn(1).setWidth(nw);
  }
}","/** 
 * Packs all columns so that they are able to display all content. If there is any space left, the second column (summary) will be resized so that the entire width of the control is used.
 * @param tree the tree to resize
 */
private void doResize(final Tree tree){
  Rectangle area=tree.getClientArea();
  ScrollBar vBar=tree.getVerticalBar();
  int ac=0;
  for (  TreeColumn tc : tree.getColumns()) {
    if (tc.getResizable()) {
      tc.pack();
      ac+=tc.getWidth();
    }
 else {
      ac+=1;
    }
  }
  int width=area.width - tree.computeTrim(0,0,0,0).width + vBar.getSize().x;
  if (width > ac) {
    if (tree.getColumn(1).getResizable()) {
      int nw=tree.getColumn(1).getWidth() + width - ac;
      tree.getColumn(1).setWidth(nw);
    }
 else {
      int nw=tree.getColumn(0).getWidth() + width - ac;
      tree.getColumn(0).setWidth(nw);
    }
  }
}",0.8492063492063492
96628,"@Override public void createPartControl(Composite parent){
  Composite body=new Composite(parent,SWT.NONE);
  GridLayout layout=new GridLayout(1,false);
  layout.marginHeight=0;
  layout.marginWidth=0;
  layout.horizontalSpacing=0;
  layout.verticalSpacing=0;
  layout.numColumns=1;
  body.setLayout(layout);
  Composite composite=new Composite(body,SWT.NONE);
  composite.setLayoutData(new GridData(SWT.FILL,SWT.FILL,true,true));
  stackLayout=new StackLayout();
  composite.setLayout(stackLayout);
  composite.setBackground(parent.getDisplay().getSystemColor(SWT.COLOR_LIST_BACKGROUND));
  createMessage(composite);
  createViewer(composite);
  initActions();
  createPopupMenu(body);
  contributeToActionBars();
  toolTip=new BuildToolTip(getViewer().getControl());
  toolTip.setViewer(viewer);
  IWorkbenchSiteProgressService progress=(IWorkbenchSiteProgressService)getSite().getAdapter(IWorkbenchSiteProgressService.class);
  if (progress != null) {
    progress.showBusyForFamily(BuildsConstants.JOB_FAMILY);
  }
  model=BuildsUiInternal.getModel();
  modelListener=new BuildModelContentAdapter(){
    @Override public void doNotifyChanged(    Notification msg){
      if (!viewer.getControl().isDisposed()) {
        lastRefresh=new Date();
        updateContents(Status.OK_STATUS);
      }
    }
  }
;
  model.eAdapters().add(modelListener);
  if (stateMemento != null) {
    restoreState(stateMemento);
    stateMemento=null;
  }
  serviceMessageControl=new BuildsServiceMessageControl(body);
  viewer.setInput(model);
  viewer.setSorter(new BuildTreeSorter());
  viewer.expandAll();
  installAutomaticResize(viewer.getTree());
  getSite().setSelectionProvider(viewer);
  getSite().getSelectionProvider().addSelectionChangedListener(propertiesAction);
  propertiesAction.selectionChanged((IStructuredSelection)getSite().getSelectionProvider().getSelection());
  updateContents(Status.OK_STATUS);
  new TreeViewerSupport(viewer,getStateFile());
  NotificationSinkProxy.setControl(serviceMessageControl);
}","@Override public void createPartControl(Composite parent){
  Composite body=new Composite(parent,SWT.NONE);
  GridLayout layout=new GridLayout(1,false);
  layout.marginHeight=0;
  layout.marginWidth=0;
  layout.horizontalSpacing=0;
  layout.verticalSpacing=0;
  layout.numColumns=1;
  body.setLayout(layout);
  Composite composite=new Composite(body,SWT.NONE);
  composite.setLayoutData(new GridData(SWT.FILL,SWT.FILL,true,true));
  stackLayout=new StackLayout();
  composite.setLayout(stackLayout);
  composite.setBackground(parent.getDisplay().getSystemColor(SWT.COLOR_LIST_BACKGROUND));
  createMessage(composite);
  createViewer(composite);
  initActions();
  createPopupMenu(body);
  contributeToActionBars();
  toolTip=new BuildToolTip(getViewer().getControl());
  toolTip.setViewer(viewer);
  IWorkbenchSiteProgressService progress=(IWorkbenchSiteProgressService)getSite().getAdapter(IWorkbenchSiteProgressService.class);
  if (progress != null) {
    progress.showBusyForFamily(BuildsConstants.JOB_FAMILY);
  }
  model=BuildsUiInternal.getModel();
  modelListener=new BuildModelContentAdapter(){
    @Override public void doNotifyChanged(    Notification msg){
      if (!viewer.getControl().isDisposed()) {
        lastRefresh=new Date();
        updateContents(Status.OK_STATUS);
      }
    }
  }
;
  model.eAdapters().add(modelListener);
  if (stateMemento != null) {
    restoreState(stateMemento);
    stateMemento=null;
  }
  serviceMessageControl=new BuildsServiceMessageControl(body);
  viewer.setInput(model);
  viewer.setSorter(new BuildTreeSorter());
  viewer.expandAll();
  installAutomaticResize(viewer.getTree());
  getSite().setSelectionProvider(viewer);
  getSite().getSelectionProvider().addSelectionChangedListener(propertiesAction);
  propertiesAction.selectionChanged((IStructuredSelection)getSite().getSelectionProvider().getSelection());
  updateContents(Status.OK_STATUS);
  treeViewerSupport=new TreeViewerSupport(viewer,getStateFile());
  NotificationSinkProxy.setControl(serviceMessageControl);
}",0.9955489614243324
96629,"static JUnitModel getJUnitModel(){
  if (junitModel == null) {
    Exception cause=null;
    try {
      Class<?> clazz;
      try {
        clazz=Class.forName(""String_Node_Str"");
      }
 catch (      ClassNotFoundException e) {
        clazz=Class.forName(""String_Node_Str"");
      }
      Method method=clazz.getDeclaredMethod(""String_Node_Str"");
      junitModel=(JUnitModel)method.invoke(null);
    }
 catch (    Exception e) {
      NoClassDefFoundError error=new NoClassDefFoundError(""String_Node_Str"");
      error.initCause(cause);
      throw error;
    }
  }
  return junitModel;
}","static JUnitModel getJUnitModel(){
  if (junitModel == null) {
    try {
      Class<?> clazz;
      try {
        clazz=Class.forName(""String_Node_Str"");
      }
 catch (      ClassNotFoundException e) {
        clazz=Class.forName(""String_Node_Str"");
      }
      Method method=clazz.getDeclaredMethod(""String_Node_Str"");
      junitModel=(JUnitModel)method.invoke(null);
    }
 catch (    Exception e) {
      NoClassDefFoundError error=new NoClassDefFoundError(""String_Node_Str"");
      error.initCause(e);
      throw error;
    }
  }
  return junitModel;
}",0.9740484429065744
96630,"@Override public String getText(Object element){
  if (element instanceof IBuildPlan) {
    IBuildPlan plan=(IBuildPlan)element;
    if (plan.getLastBuild() != null) {
      long timestamp=plan.getLastBuild().getTimestamp();
      if (timestamp != 0) {
        return DateUtil.getRelative(timestamp);
      }
    }
  }
  return ""String_Node_Str"";
}","@Override public String getText(Object element){
  if (element instanceof IBuildPlan) {
    IBuildPlan plan=(IBuildPlan)element;
    if (plan.getLastBuild() != null) {
      long timestamp=plan.getLastBuild().getTimestamp();
      if (timestamp != 0) {
        if (System.currentTimeMillis() - timestamp < 60 * 1000) {
          return ""String_Node_Str"";
        }
 else {
          return DateUtil.getRelative(timestamp);
        }
      }
    }
  }
  return ""String_Node_Str"";
}",0.7004830917874396
96631,"public void save() throws IOException {
  Map<Object,Object> options=new HashMap<Object,Object>();
  resource.save(options);
}","public void save() throws IOException {
  Map<Object,Object> options=new HashMap<Object,Object>();
  options.put(XMLResource.OPTION_ENCODING,""String_Node_Str"");
  resource.save(options);
}",0.802547770700637
96632,"protected void createPopupMenu(Composite parent){
  MenuManager menuManager=new MenuManager();
  OpenInBrowserAction openInBrowserAction=new OpenInBrowserAction();
  menuManager.add(openInBrowserAction);
  viewer.addSelectionChangedListener(openInBrowserAction);
  RunBuildAction runBuildAction=new RunBuildAction();
  menuManager.add(runBuildAction);
  viewer.addSelectionChangedListener(runBuildAction);
  menuManager.add(new Separator(IWorkbenchActionConstants.MB_ADDITIONS));
  menuManager.add(new Separator(""String_Node_Str""));
  menuManager.add(propertiesAction);
  Menu contextMenu=menuManager.createContextMenu(parent);
  viewer.getTree().setMenu(contextMenu);
  getSite().registerContextMenu(menuManager,viewer);
}","protected void createPopupMenu(Composite parent){
  MenuManager menuManager=new MenuManager();
  OpenInBrowserAction openInBrowserAction=new OpenInBrowserAction();
  menuManager.add(openInBrowserAction);
  viewer.addSelectionChangedListener(openInBrowserAction);
  openInBrowserAction.selectionChanged((IStructuredSelection)viewer.getSelection());
  RunBuildAction runBuildAction=new RunBuildAction();
  menuManager.add(runBuildAction);
  viewer.addSelectionChangedListener(runBuildAction);
  runBuildAction.selectionChanged((IStructuredSelection)viewer.getSelection());
  menuManager.add(new Separator(IWorkbenchActionConstants.MB_ADDITIONS));
  menuManager.add(new Separator(""String_Node_Str""));
  menuManager.add(propertiesAction);
  Menu contextMenu=menuManager.createContextMenu(parent);
  viewer.getTree().setMenu(contextMenu);
  getSite().registerContextMenu(menuManager,viewer);
}",0.7734326505276226
96633,"@Override public void createPartControl(Composite parent){
  createViewer(parent);
  initActions();
  createPopupMenu(parent);
  contributeToActionBars();
  IWorkbenchSiteProgressService progress=(IWorkbenchSiteProgressService)getSite().getAdapter(IWorkbenchSiteProgressService.class);
  if (progress != null) {
    progress.showBusyForFamily(BuildsConstants.JOB_FAMILY);
  }
  model=BuildsUiInternal.getModel();
  modelListener=new EContentAdapter(){
    @Override public void notifyChanged(    Notification msg){
      super.notifyChanged(msg);
      if (!viewer.getControl().isDisposed()) {
        lastRefresh=new Date();
        updateDecoration(Status.OK_STATUS);
      }
    }
  }
;
  model.eAdapters().add(modelListener);
  viewer.setInput(model);
  viewer.expandAll();
  getSite().setSelectionProvider(viewer);
  getSite().getSelectionProvider().addSelectionChangedListener(propertiesAction);
  updateDecoration(Status.OK_STATUS);
}","@Override public void createPartControl(Composite parent){
  createViewer(parent);
  initActions();
  createPopupMenu(parent);
  contributeToActionBars();
  IWorkbenchSiteProgressService progress=(IWorkbenchSiteProgressService)getSite().getAdapter(IWorkbenchSiteProgressService.class);
  if (progress != null) {
    progress.showBusyForFamily(BuildsConstants.JOB_FAMILY);
  }
  model=BuildsUiInternal.getModel();
  modelListener=new EContentAdapter(){
    @Override public void notifyChanged(    Notification msg){
      super.notifyChanged(msg);
      if (!viewer.getControl().isDisposed()) {
        lastRefresh=new Date();
        updateDecoration(Status.OK_STATUS);
      }
    }
  }
;
  model.eAdapters().add(modelListener);
  viewer.setInput(model);
  viewer.expandAll();
  getSite().setSelectionProvider(viewer);
  getSite().getSelectionProvider().addSelectionChangedListener(propertiesAction);
  propertiesAction.selectionChanged((IStructuredSelection)getSite().getSelectionProvider().getSelection());
  updateDecoration(Status.OK_STATUS);
}",0.9457286432160804
96634,"@Override public Image getImage(Object element){
  return null;
}","@Override public Image getImage(Object element){
  if (element instanceof IBuildPlan) {
    ImageDescriptor descriptor=getImageDescriptor((IBuildPlan)element);
    if (descriptor != null) {
      return CommonImages.getImage(descriptor);
    }
  }
  return null;
}",0.3282674772036474
96635,"protected void createViewer(Composite parent){
  viewer=new TreeViewer(parent,SWT.FULL_SELECTION);
  Tree tree=viewer.getTree();
  tree.setHeaderVisible(true);
  TreeViewerColumn buildViewerColumn=new TreeViewerColumn(viewer,SWT.LEFT);
  buildViewerColumn.setLabelProvider(new DecoratingStyledCellLabelProvider(new BuildLabelProvider(),PlatformUI.getWorkbench().getDecoratorManager().getLabelDecorator(),null));
  TreeColumn buildColumn=buildViewerColumn.getColumn();
  buildColumn.setText(""String_Node_Str"");
  buildColumn.setWidth(220);
  TreeViewerColumn summaryViewerColumn=new TreeViewerColumn(viewer,SWT.LEFT);
  summaryViewerColumn.setLabelProvider(new BuildSummaryLabelProvider());
  TreeColumn summaryColumn=summaryViewerColumn.getColumn();
  summaryColumn.setText(""String_Node_Str"");
  summaryColumn.setWidth(220);
  TreeViewerColumn statusViewerColumn=new TreeViewerColumn(viewer,SWT.LEFT);
  statusViewerColumn.setLabelProvider(new BuildStatusLabelProvider());
  TreeColumn statusColumn=statusViewerColumn.getColumn();
  statusColumn.setText(""String_Node_Str"");
  statusColumn.setWidth(50);
  contentProvider=new BuildContentProvider();
  contentProvider.setSelectedOnly(true);
  viewer.setContentProvider(contentProvider);
  viewer.addDoubleClickListener(new IDoubleClickListener(){
    public void doubleClick(    DoubleClickEvent event){
      OpenInBrowserAction action=new OpenInBrowserAction();
      action.selectionChanged((IStructuredSelection)event.getSelection());
      action.run();
    }
  }
);
}","protected void createViewer(Composite parent){
  viewer=new TreeViewer(parent,SWT.FULL_SELECTION);
  Tree tree=viewer.getTree();
  tree.setHeaderVisible(true);
  TreeViewerColumn buildViewerColumn=new TreeViewerColumn(viewer,SWT.LEFT);
  buildViewerColumn.setLabelProvider(new DecoratingStyledCellLabelProvider(new BuildLabelProvider(),PlatformUI.getWorkbench().getDecoratorManager().getLabelDecorator(),null));
  TreeColumn buildColumn=buildViewerColumn.getColumn();
  buildColumn.setText(""String_Node_Str"");
  buildColumn.setWidth(220);
  TreeViewerColumn summaryViewerColumn=new TreeViewerColumn(viewer,SWT.LEFT);
  summaryViewerColumn.setLabelProvider(new BuildSummaryLabelProvider());
  TreeColumn summaryColumn=summaryViewerColumn.getColumn();
  summaryColumn.setText(""String_Node_Str"");
  summaryColumn.setWidth(220);
  TreeViewerColumn statusViewerColumn=new TreeViewerColumn(viewer,SWT.LEFT);
  statusViewerColumn.setLabelProvider(new BuildTimeLabelProvider());
  TreeColumn statusColumn=statusViewerColumn.getColumn();
  statusColumn.setText(""String_Node_Str"");
  statusColumn.setWidth(50);
  contentProvider=new BuildContentProvider();
  contentProvider.setSelectedOnly(true);
  viewer.setContentProvider(contentProvider);
  viewer.addDoubleClickListener(new IDoubleClickListener(){
    public void doubleClick(    DoubleClickEvent event){
      OpenInBrowserAction action=new OpenInBrowserAction();
      action.selectionChanged((IStructuredSelection)event.getSelection());
      action.run();
    }
  }
);
}",0.9967126890203812
96636,"@Override public boolean performFinish(){
  ((BuildServer)getModel()).applyToOriginal();
  original.getLocation().apply(getModel().getLocation());
  if (isNew()) {
    BuildsUiInternal.getModel().getServers().add(original);
  }
  List<IBuildPlan> oldPlans=BuildsUiInternal.getModel().getPlans(original);
  oldPlans=BuildsUiInternal.getModel().getPlans(original);
  BuildsUiInternal.getModel().getPlans().removeAll(oldPlans);
  List<IBuildPlan> selectedPlans=((BuildServerWizardPage)getPages()[0]).getSelectedPlans();
  for (  IBuildPlan plan : selectedPlans) {
    ((BuildPlan)plan).setServer(original);
  }
  BuildsUiInternal.getModel().getPlans().addAll(selectedPlans);
  return true;
}","@Override public boolean performFinish(){
  ((BuildServer)getModel()).applyToOriginal();
  original.getLocation().apply(getModel().getLocation());
  if (isNew()) {
    BuildsUiInternal.getModel().getServers().add(original);
  }
  List<IBuildPlan> oldPlans=BuildsUiInternal.getModel().getPlans(original);
  oldPlans=BuildsUiInternal.getModel().getPlans(original);
  BuildsUiInternal.getModel().getPlans().removeAll(oldPlans);
  List<IBuildPlan> selectedPlans=((BuildServerWizardPage)getPages()[0]).getSelectedPlans();
  for (  IBuildPlan plan : selectedPlans) {
    ((BuildPlan)plan).setServer(original);
  }
  BuildsUiInternal.getModel().getPlans().addAll(selectedPlans);
  BuildsView.openInActivePerspective();
  return true;
}",0.9717514124293786
96637,"private void createButtons(Composite section){
  Button button=new Button(section,SWT.PUSH);
  button.setText(""String_Node_Str"");
  button.addSelectionListener(new SelectionAdapter(){
    @Override public void widgetSelected(    SelectionEvent event){
      validateSettings();
    }
  }
);
}","private void createButtons(Composite section){
  Button refreshButton=new Button(section,SWT.PUSH);
  GridDataFactory.fillDefaults().grab(true,false).applyTo(refreshButton);
  refreshButton.setText(""String_Node_Str"");
  refreshButton.addSelectionListener(new SelectionAdapter(){
    @Override public void widgetSelected(    SelectionEvent event){
      validateSettings();
    }
  }
);
  Button selectAllButton=new Button(section,SWT.PUSH);
  GridDataFactory.fillDefaults().grab(true,false).applyTo(selectAllButton);
  selectAllButton.setText(""String_Node_Str"");
  selectAllButton.addSelectionListener(new SelectionAdapter(){
    @Override public void widgetSelected(    SelectionEvent event){
      List<IBuildPlan> plans=getWorkingCopy().getPlans();
      for (      IBuildPlan plan : plans) {
        ((BuildPlan)plan).setSelected(true);
      }
      planViewer.setCheckedElements(plans.toArray());
    }
  }
);
  Button deselectAllButton=new Button(section,SWT.PUSH);
  GridDataFactory.fillDefaults().grab(true,false).applyTo(deselectAllButton);
  deselectAllButton.setText(""String_Node_Str"");
  deselectAllButton.addSelectionListener(new SelectionAdapter(){
    @Override public void widgetSelected(    SelectionEvent event){
      List<IBuildPlan> plans=getWorkingCopy().getPlans();
      for (      IBuildPlan plan : plans) {
        ((BuildPlan)plan).setSelected(false);
      }
      planViewer.setCheckedElements(new Object[]{});
    }
  }
);
}",0.3319977103606182
96638,"@Override public BuildServerBehaviour getBehaviour(IBuildServer server) throws CoreException {
  return new HudsonServerBehaviour(server);
}","@Override public BuildServerBehaviour getBehaviour(IBuildServer server) throws CoreException {
  return new HudsonServerBehaviour(server,createLocation(server));
}",0.924092409240924
96639,"public HudsonServerBehaviour(IBuildServer server){
  super(server);
  this.client=new RestfulHudsonClient(new WebLocation(server.getRepositoryUrl()));
}","public HudsonServerBehaviour(IBuildServer server,AbstractWebLocation location){
  super(server);
  this.client=new RestfulHudsonClient(location);
}",0.782608695652174
96640,"public BuildConnectorDelegate(BuildConnectorDescriptor descriptor){
  this.descriptor=descriptor;
  init(descriptor.connectorKind,descriptor.label);
}","public BuildConnectorDelegate(BuildConnectorDescriptor descriptor){
  this.descriptor=descriptor;
  init(descriptor.connectorKind,descriptor.label);
  setLocationFactory(locationFactory);
}",0.8849557522123894
96641,"public synchronized BuildConnector getCore() throws CoreException {
  if (core != null) {
    return core;
  }
  if (status != null) {
    throw new CoreException(status);
  }
  IStatus result=descriptor.createConnector();
  if (result.isOK()) {
    core=descriptor.core;
  }
 else {
    status=result;
  }
  if (status != null) {
    throw new CoreException(status);
  }
  return core;
}","public synchronized BuildConnector getCore() throws CoreException {
  if (core != null) {
    return core;
  }
  if (status != null) {
    throw new CoreException(status);
  }
  IStatus result=descriptor.createConnector();
  if (result.isOK()) {
    descriptor.core.setLocationFactory(locationFactory);
    core=descriptor.core;
  }
 else {
    status=result;
  }
  if (status != null) {
    throw new CoreException(status);
  }
  return core;
}",0.9315726290516206
96642,"@Override public void applyTo(TaskRepository repository){
  super.applyTo(repository);
  repository.setProperty(IRepositoryConstants.PROPERTY_CATEGORY,IRepositoryConstants.CATEGORY_BUILD);
  BuildConnector buildConnector=getBuildConnector();
  if (buildConnector != null) {
    repository.setProperty(BuildTaskConnector.TASK_REPOSITORY_KEY_BUILD_CONNECTOR_KIND,buildConnector.getConnectorKind());
  }
 else {
    repository.setProperty(BuildTaskConnector.TASK_REPOSITORY_KEY_BUILD_CONNECTOR_KIND,null);
  }
  BuildServer server=getWorkingCopy();
  server.setConnectorKind(repository.getProperty(BuildTaskConnector.TASK_REPOSITORY_KEY_BUILD_CONNECTOR_KIND));
  server.setName(repository.getRepositoryLabel());
  server.setRepository(repository);
  server.setRepositoryUrl(repository.getRepositoryUrl());
  server.setUrl(repository.getRepositoryUrl());
}","@Override public void applyTo(TaskRepository repository){
  super.applyTo(repository);
  repository.setProperty(IRepositoryConstants.PROPERTY_CATEGORY,IRepositoryConstants.CATEGORY_BUILD);
  repository.setProperty(ITasksCoreConstants.PROPERTY_USE_SECURE_STORAGE,Boolean.TRUE.toString());
  BuildConnector buildConnector=getBuildConnector();
  if (buildConnector != null) {
    repository.setProperty(BuildTaskConnector.TASK_REPOSITORY_KEY_BUILD_CONNECTOR_KIND,buildConnector.getConnectorKind());
  }
 else {
    repository.setProperty(BuildTaskConnector.TASK_REPOSITORY_KEY_BUILD_CONNECTOR_KIND,null);
  }
  BuildServer server=getWorkingCopy();
  server.setConnectorKind(repository.getProperty(BuildTaskConnector.TASK_REPOSITORY_KEY_BUILD_CONNECTOR_KIND));
  server.setName(repository.getRepositoryLabel());
  server.setRepository(repository);
  server.setRepositoryUrl(repository.getRepositoryUrl());
  server.setUrl(repository.getRepositoryUrl());
}",0.9450915141430948
96643,"private void validateStatement(Statement statement,List<String> parameters){
  try {
    statement.validate(statements,parameters);
  }
 catch (  IllegalArgumentException e) {
    validator.add(new ValidationMessage(""String_Node_Str"",""String_Node_Str"",e.getCause().getMessage()));
    validator.onErrorUse(Results.logic()).forwardTo(getClass()).index(null);
  }
}","private void validateStatement(Statement statement,List<String> parameters){
  try {
    statement.validate(statements,parameters);
  }
 catch (  IllegalArgumentException e) {
    validator.add(new ValidationMessage(""String_Node_Str"",""String_Node_Str"",e.getCause().getMessage()));
    validator.onErrorUse(Results.logic()).redirectTo(getClass()).index(null);
  }
}",0.9793672627235214
96644,"@Path(""String_Node_Str"") @Get public void show(Statement statement,String password,Integer maxResults){
  statement=statements.load(statement.getId());
  boolean canView=currentUser.canCreateStatements() || statement.canBeAccessedWithKey(password);
  if (canView) {
    List<Object[]> results=executeStatement(statement,maxResults);
    List<String> columns=statement.getColumns();
    renderResponse(statement,results,columns,maxResults);
  }
 else {
    result.use(HttpResult.class).sendError(401);
  }
}","@Path(""String_Node_Str"") @Get public void show(Statement statement,String password,Integer maxResults){
  statement=statements.load(statement.getId());
  maxResults=(maxResults == null ? 100 : maxResults);
  boolean canView=currentUser.canCreateStatements() || statement.canBeAccessedWithKey(password);
  if (canView) {
    List<Object[]> results=executeStatement(statement,maxResults);
    List<String> columns=statement.getColumns();
    renderResponse(statement,results,columns,maxResults);
  }
 else {
    result.use(HttpResult.class).sendError(401);
  }
}",0.949343339587242
96645,"public FreemarkerRoute(Route route,MutableRequest request){
  this.route=route;
  this.request=request;
}","public FreemarkerRoute(Route route){
  this.route=route;
}",0.7116564417177914
96646,"public String getControllerAndMethodName(){
  ResourceMethod resourceMethod=route.resourceMethod(this.request,this.route.getOriginalUri());
  String controllerName=resourceMethod.getResource().getType().getSimpleName();
  String methodName=resourceMethod.getMethod().getName();
  return controllerName + ""String_Node_Str"" + methodName;
}","public String getControllerAndMethodName(){
  Field resourceMethodField=new Mirror().on(FixedMethodStrategy.class).reflect().field(""String_Node_Str"");
  resourceMethodField.setAccessible(true);
  try {
    ResourceMethod resourceMethod=(ResourceMethod)resourceMethodField.get(route);
    return resourceMethod.getMethod().toString();
  }
 catch (  Exception e) {
    return ""String_Node_Str"" + e.getMessage();
  }
}",0.1968085106382978
96647,"private List<FreemarkerRoute> createRoutesForFreeMarker(List<Route> routes){
  List<FreemarkerRoute> freemakerRoutes=new ArrayList<FreemarkerRoute>();
  for (  Route route : routes) {
    freemakerRoutes.add(new FreemarkerRoute(route,this.request));
  }
  return freemakerRoutes;
}","private List<FreemarkerRoute> createRoutesForFreeMarker(List<Route> routes){
  List<FreemarkerRoute> freemakerRoutes=new ArrayList<FreemarkerRoute>();
  for (  Route route : routes) {
    freemakerRoutes.add(new FreemarkerRoute(route));
  }
  return freemakerRoutes;
}",0.97632058287796
96648,"public RoutesController(Router router,MutableRequest request,Freemarker marker,Environment environment){
  this.router=router;
  this.request=request;
  this.marker=marker;
  this.environment=environment;
}","public RoutesController(Router router,Freemarker marker,Environment environment){
  this.router=router;
  this.marker=marker;
  this.environment=environment;
}",0.8712328767123287
96649,"@Before public void setUp() throws Exception {
  this.controller=new RoutesController(router,request,marker,environment);
  when(marker.use(""String_Node_Str"")).thenReturn(indexTemplate);
  when(indexTemplate.with(anyString(),any())).thenReturn(indexTemplate);
}","@Before public void setUp() throws Exception {
  this.controller=new RoutesController(router,marker,environment);
  when(marker.use(""String_Node_Str"")).thenReturn(indexTemplate);
  when(indexTemplate.with(anyString(),any())).thenReturn(indexTemplate);
}",0.9844357976653696
96650,"private void validateStatement(Statement statement,List<String> parameters){
  try {
    statement.validate(statements,parameters);
  }
 catch (  IllegalArgumentException e) {
    validator.add(new ValidationMessage(""String_Node_Str"",""String_Node_Str"",e.getCause().getMessage()));
    validator.onErrorUse(Results.logic()).redirectTo(getClass()).index(null);
  }
}","private void validateStatement(Statement statement,List<String> parameters){
  try {
    statement.validate(statements,parameters);
  }
 catch (  IllegalArgumentException e) {
    validator.add(new I18nMessage(""String_Node_Str"",""String_Node_Str"",e.getCause().getMessage()));
    validator.onErrorRedirectTo(this).index(null);
  }
}",0.8805755395683453
96651,"@Override public boolean accepts(ResourceMethod method){
  return true;
}","@Override public boolean accepts(ResourceMethod method){
  return method.getResource().getType().getPackage().getName().startsWith(""String_Node_Str"");
}",0.64
96652,"public FreemarkerRoute(Route route,MutableRequest request){
  this.route=route;
  this.request=request;
}","public FreemarkerRoute(Route route){
  this.route=route;
}",0.7116564417177914
96653,"public String getControllerAndMethodName(){
  ResourceMethod resourceMethod=route.resourceMethod(this.request,this.route.getOriginalUri());
  String controllerName=resourceMethod.getResource().getType().getSimpleName();
  String methodName=resourceMethod.getMethod().getName();
  return controllerName + ""String_Node_Str"" + methodName;
}","public String getControllerAndMethodName(){
  Field resourceMethodField=new Mirror().on(FixedMethodStrategy.class).reflect().field(""String_Node_Str"");
  resourceMethodField.setAccessible(true);
  try {
    ResourceMethod resourceMethod=(ResourceMethod)resourceMethodField.get(route);
    return resourceMethod.getMethod().toString();
  }
 catch (  Exception e) {
    return ""String_Node_Str"" + e.getMessage();
  }
}",0.1968085106382978
96654,"private List<FreemarkerRoute> createRoutesForFreeMarker(List<Route> routes){
  List<FreemarkerRoute> freemakerRoutes=new ArrayList<FreemarkerRoute>();
  for (  Route route : routes) {
    freemakerRoutes.add(new FreemarkerRoute(route,this.request));
  }
  return freemakerRoutes;
}","private List<FreemarkerRoute> createRoutesForFreeMarker(List<Route> routes){
  List<FreemarkerRoute> freemakerRoutes=new ArrayList<FreemarkerRoute>();
  for (  Route route : routes) {
    freemakerRoutes.add(new FreemarkerRoute(route));
  }
  return freemakerRoutes;
}",0.97632058287796
96655,"public RoutesController(Router router,MutableRequest request,Freemarker marker,Environment environment){
  this.router=router;
  this.request=request;
  this.marker=marker;
  this.environment=environment;
}","public RoutesController(Router router,Freemarker marker,Environment environment){
  this.router=router;
  this.marker=marker;
  this.environment=environment;
}",0.8712328767123287
96656,"@Before public void setUp() throws Exception {
  this.controller=new RoutesController(router,request,marker,environment);
  when(marker.use(""String_Node_Str"")).thenReturn(indexTemplate);
  when(indexTemplate.with(anyString(),any())).thenReturn(indexTemplate);
}","@Before public void setUp() throws Exception {
  this.controller=new RoutesController(router,marker,environment);
  when(marker.use(""String_Node_Str"")).thenReturn(indexTemplate);
  when(indexTemplate.with(anyString(),any())).thenReturn(indexTemplate);
}",0.9844357976653696
96657,"@Override public boolean accepts(ResourceMethod method){
  return true;
}","@Override public boolean accepts(ResourceMethod method){
  return method.getResource().getType().getPackage().getName().startsWith(""String_Node_Str"");
}",0.64
96658,"private void checkPortAvailability(Connector connector){
  String hostName=(String)connector.getProperty(""String_Node_Str"");
  if (hostName == null) {
    if (!NetUtils.isPortAvailable(connector.getPort())) {
      this.eventLogger.log(TomcatLogEvents.PORT_IN_USE,connector.getPort());
      System.exit(-1);
    }
  }
 else {
    if (!NetUtils.isPortAvailable(hostName,connector.getPort())) {
      this.eventLogger.log(TomcatLogEvents.PORT_IN_USE,connector.getPort(),hostName);
      System.exit(-1);
    }
  }
}","private void checkPortAvailability(Connector connector){
  Object address=connector.getProperty(""String_Node_Str"");
  String hostName=(address != null) ? ((InetAddress)address).getHostAddress() : null;
  if (hostName == null) {
    if (!NetUtils.isPortAvailable(connector.getPort())) {
      this.eventLogger.log(TomcatLogEvents.PORT_IN_USE,connector.getPort());
      System.exit(-1);
    }
  }
 else {
    if (!NetUtils.isPortAvailable(hostName,connector.getPort())) {
      this.eventLogger.log(TomcatLogEvents.PORT_IN_USE,connector.getPort(),hostName);
      System.exit(-1);
    }
  }
}",0.8886877828054298
96659,"private void parse(InputStream in,PrintWriter out){
  Scanner scanner=new Scanner(in);
  String parsedLine;
  while (scanner.hasNextLine()) {
    parsedLine=parseLine(scanner.nextLine());
    if (parsedLine != null && !parsedLine.trim().isEmpty()) {
      out.append(parsedLine);
      out.append('\n');
    }
  }
}","private void parse(InputStream in,PrintWriter out){
  try (Scanner scanner=new Scanner(in,StandardCharsets.UTF_8.name())){
    String parsedLine;
    while (scanner.hasNextLine()) {
      parsedLine=parseLine(scanner.nextLine());
      if (parsedLine != null && !parsedLine.trim().isEmpty()) {
        out.append(parsedLine);
        out.append('\n');
      }
    }
  }
 }",0.858806404657933
96660,"private void handelReqTrace(String path,TraceMark traceMark,File sourceFile) throws OseeCoreException, IOException {
  Artifact reqArtifact=null;
  String foundStr;
  String subSystem=null;
  String textContent=null;
  boolean traceMatch=false;
  subSystem=(isGitBased) ? getSubsystem(sourceFile.getPath(),gitSubsystemMatcher) : getSubsystem(sourceFile.getPath(),subsystemMatcher);
  if (traceMark.getTraceType().equals(""String_Node_Str"")) {
    foundStr=""String_Node_Str"";
  }
 else {
    reqArtifact=requirementData.getRequirementFromTraceMark(traceMark.getRawTraceMark());
    if (reqArtifact == null) {
      Pair<String,String> structuredRequirement=getStructuredRequirement(traceMark.getRawTraceMark());
      if (structuredRequirement != null) {
        reqArtifact=requirementData.getRequirementFromTraceMark(structuredRequirement.getFirst());
        if (reqArtifact == null) {
          foundStr=""String_Node_Str"";
        }
 else {
          if (reqArtifact.getAttributeCount(CoreAttributeTypes.WordTemplateContent) > 0) {
            textContent=WordUtil.textOnly(reqArtifact.getSoleAttributeValue(CoreAttributeTypes.WordTemplateContent,""String_Node_Str"")).toUpperCase();
          }
 else {
            List<Attribute<?>> attributes=reqArtifact.getAttributes();
            for (            Attribute<?> attribute : attributes) {
              textContent=textContent + attribute.toString();
            }
          }
          if (textContent != null && (textContent.contains(structuredRequirement.getSecond()) || textContent.contains(getCanonicalRequirementName(structuredRequirement.getSecond())))) {
            foundStr=""String_Node_Str"";
          }
 else {
            foundStr=""String_Node_Str"";
          }
        }
      }
 else {
        foundStr=""String_Node_Str"";
      }
    }
 else {
      foundStr=fullMatch(reqArtifact);
      List<String> partitions=reqArtifact.getAttributesToStringList(CoreAttributeTypes.Partition);
      if (partitions.contains(subSystem)) {
        traceMatch=true;
      }
    }
  }
  String name=null;
  if (reqArtifact != null) {
    name=reqArtifact.getName();
    String inspection=getInspectionQual(reqArtifact);
    if (Strings.isValid(inspection)) {
      requirementToCodeUnitsMap.put(reqArtifact,inspection);
    }
    requirementToCodeUnitsMap.put(reqArtifact,path);
  }
  if (writeOutResults) {
    excelWriter.writeRow(foundStr,subSystem,path,name,traceMark,traceMatch);
  }
}","private void handelReqTrace(String path,TraceMark traceMark,File sourceFile) throws OseeCoreException, IOException {
  Artifact reqArtifact=null;
  String foundStr;
  String subSystem=null;
  String textContent=null;
  boolean traceMatch=false;
  subSystem=(isGitBased) ? getSubsystem(sourceFile.getPath(),gitSubsystemMatcher) : getSubsystem(sourceFile.getPath(),subsystemMatcher);
  if (traceMark.getTraceType().equals(""String_Node_Str"")) {
    foundStr=""String_Node_Str"";
  }
 else {
    reqArtifact=requirementData.getRequirementFromTraceMark(traceMark.getRawTraceMark());
    if (reqArtifact == null) {
      Pair<String,String> structuredRequirement=getStructuredRequirement(traceMark.getRawTraceMark());
      if (structuredRequirement != null) {
        reqArtifact=requirementData.getRequirementFromTraceMark(structuredRequirement.getFirst());
        if (reqArtifact == null) {
          foundStr=""String_Node_Str"";
        }
 else {
          if (reqArtifact.getAttributeCount(CoreAttributeTypes.WordTemplateContent) > 0) {
            textContent=WordUtil.textOnly(reqArtifact.getSoleAttributeValue(CoreAttributeTypes.WordTemplateContent,""String_Node_Str"")).toUpperCase();
          }
 else {
            List<Attribute<?>> attributes=reqArtifact.getAttributes();
            for (            Attribute<?> attribute : attributes) {
              textContent=textContent + attribute.toString();
            }
          }
          if (textContent != null && (textContent.contains(structuredRequirement.getSecond()) || textContent.contains(getCanonicalRequirementName(structuredRequirement.getSecond())))) {
            foundStr=""String_Node_Str"";
          }
 else {
            foundStr=""String_Node_Str"";
          }
        }
      }
 else {
        foundStr=""String_Node_Str"";
      }
    }
 else {
      foundStr=fullMatch(reqArtifact);
      List<String> partitions=reqArtifact.getAttributesToStringList(CoreAttributeTypes.Partition);
      if (partitions.contains(subSystem)) {
        traceMatch=true;
      }
    }
  }
  String name=null;
  if (reqArtifact != null) {
    name=reqArtifact.getName();
    String inspection=getInspectionQual(reqArtifact);
    if (Strings.isValid(inspection)) {
      requirementToCodeUnitsMap.put(reqArtifact,inspection);
    }
 else {
      requirementToCodeUnitsMap.put(reqArtifact,path);
    }
  }
  if (writeOutResults) {
    excelWriter.writeRow(foundStr,subSystem,path,name,traceMark,traceMatch);
  }
}",0.9967360261117912
96661,"@Override public void generateBody(ExcelXmlWriter sheetWriter) throws Exception {
  Collection<Artifact> directRequirements=source.getAllSwRequirements();
  HashCollection<String,Artifact> partitionMap=ArtifactOperations.sortByPartition(directRequirements);
  HashCollection<Artifact,String> requirementsToQualificationMethod=getQualificationMethods(source);
  HashCollection<String,String> partitionToQualificationMethod=new HashCollection<String,String>(false,TreeSet.class);
  HashCollection<String,Artifact> qualificationMethodToRequirements=new HashCollection<String,Artifact>(false,TreeSet.class);
  for (  String partition : partitionMap.keySet()) {
    for (    Artifact artifact : partitionMap.getValues(partition)) {
      Collection<String> values=requirementsToQualificationMethod.getValues(artifact);
      if (values != null) {
        for (        String codeUnit : values) {
          if (Strings.isValid(codeUnit)) {
            int index=codeUnit.lastIndexOf(File.separator);
            codeUnit=codeUnit.substring(index + 1,codeUnit.length());
          }
          partitionToQualificationMethod.put(partition,codeUnit);
          qualificationMethodToRequirements.put(codeUnit,artifact);
        }
      }
    }
  }
  for (  String partition : new TreeSet<String>(partitionToQualificationMethod.keySet())) {
    List<String> units=new ArrayList<>(partitionToQualificationMethod.getValues(partition));
    Collections.sort(units);
    for (    String codeUnit : units) {
      List<Artifact> artifacts=ArtifactOperations.sortByParagraphNumbers(qualificationMethodToRequirements.getValues(codeUnit));
      processRow(sheetWriter,partition,codeUnit,artifacts);
    }
  }
}","@Override public void generateBody(ExcelXmlWriter sheetWriter) throws Exception {
  Collection<Artifact> directRequirements=source.getAllSwRequirements();
  HashCollection<String,Artifact> partitionMap=ArtifactOperations.sortByPartition(directRequirements);
  HashCollection<Artifact,String> requirementsToQualificationMethod=getQualificationMethods(source);
  HashCollection<String,String> partitionToQualificationMethod=new HashCollection<String,String>(false,TreeSet.class);
  HashCollection<String,Artifact> qualificationMethodToRequirements=new HashCollection<String,Artifact>(false,TreeSet.class);
  for (  String partition : partitionMap.keySet()) {
    for (    Artifact artifact : partitionMap.getValues(partition)) {
      Collection<String> values=requirementsToQualificationMethod.getValues(artifact);
      if (values != null) {
        for (        String codeUnit : values) {
          if (Strings.isValid(codeUnit)) {
            int index=codeUnit.lastIndexOf(File.separator);
            codeUnit=codeUnit.substring(index + 1,codeUnit.length());
          }
          partitionToQualificationMethod.put(partition,codeUnit);
          qualificationMethodToRequirements.put(codeUnit,artifact);
        }
      }
    }
  }
  for (  String partition : new TreeSet<String>(partitionToQualificationMethod.keySet())) {
    List<String> units=new ArrayList<>(partitionToQualificationMethod.getValues(partition));
    Collections.sort(units);
    for (    String codeUnit : units) {
      Set<Artifact> artifacts=new HashSet<>();
      for (      Artifact req : qualificationMethodToRequirements.getValues(codeUnit)) {
        List<String> attributeValues=req.getAttributeValues(CoreAttributeTypes.Partition);
        if (attributeValues.contains(partition)) {
          artifacts.add(req);
        }
      }
      processRow(sheetWriter,partition,codeUnit,ArtifactOperations.sortByParagraphNumbers(artifacts));
    }
  }
}",0.8703090507726269
96662,IAgileTeam getAgileTeam(IAgileItem item);,"/** 
 * @return agile team from team definition relation, then sprint relation, then backlog relation. Else null.
 */
IAgileTeam getAgileTeam(IAtsWorkItem workItem);",0.3495145631067961
96663,"@Override public IAgileTeam getAgileTeam(IAgileItem item){
  ArtifactId itemArt=services.getArtifact(item);
  ArtifactId backlogArt=services.getRelationResolver().getRelatedOrNull(itemArt,AtsRelationTypes.Goal_Member);
  if (backlogArt != null) {
    ArtifactId teamArt=services.getRelationResolver().getRelatedOrNull(backlogArt,AtsRelationTypes.AgileTeamToBacklog_AgileTeam);
    if (teamArt != null) {
      return services.getConfigItemFactory().getAgileTeam(teamArt);
    }
  }
  ArtifactId sprintArt=services.getRelationResolver().getRelatedOrNull(itemArt,AtsRelationTypes.AgileSprintToItem_Sprint);
  if (sprintArt != null) {
    ArtifactId teamArt=services.getRelationResolver().getRelatedOrNull(sprintArt,AtsRelationTypes.AgileTeamToSprint_AgileTeam);
    if (teamArt != null) {
      return services.getConfigItemFactory().getAgileTeam(teamArt);
    }
  }
  return null;
}","@Override public IAgileTeam getAgileTeam(IAtsWorkItem workItem){
  IAgileTeam agileTeam=null;
  IAtsTeamWorkflow teamWf=workItem.getParentTeamWorkflow();
  if (teamWf != null) {
    IAtsTeamDefinition teamDef=teamWf.getTeamDefinition();
    if (teamDef != null) {
      ArtifactId agileTeamArt=services.getRelationResolver().getRelatedOrNull(teamDef,AtsRelationTypes.AgileTeamToAtsTeam_AgileTeam);
      if (agileTeamArt != null) {
        agileTeam=services.getAgileService().getAgileTeam(agileTeamArt);
      }
    }
    if (agileTeam == null) {
      ArtifactId sprintArt=services.getRelationResolver().getRelatedOrNull(workItem,AtsRelationTypes.AgileSprintToItem_Sprint);
      if (sprintArt != null) {
        IAgileSprint sprint=getAgileSprint(sprintArt);
        if (sprint != null) {
          agileTeam=services.getAgileService().getAgileTeamFromSprint(sprint);
        }
      }
    }
    if (agileTeam == null) {
      ArtifactId backlogArt=services.getRelationResolver().getRelatedOrNull(workItem,AtsRelationTypes.Goal_Goal);
      if (backlogArt != null) {
        IAgileBacklog backlog=getAgileBacklog(backlogArt);
        if (backlog != null) {
          agileTeam=services.getAgileService().getAgileTeamFromBacklog(backlog);
        }
      }
    }
  }
  return agileTeam;
}",0.2865039152464302
96664,"@Override public String getText(IAtsObject atsObject) throws Exception {
  String result=""String_Node_Str"";
  if (atsObject instanceof IAtsWorkItem) {
    ArtifactToken sprintArt=services.getRelationResolver().getRelatedOrNull(atsObject,AtsRelationTypes.AgileSprintToItem_Sprint);
    Conditions.assertNotNull(sprintArt,""String_Node_Str"",atsObject.toStringWithId());
    if (sprintArt != null) {
      ArtifactToken agileTeamArt=services.getRelationResolver().getRelatedOrNull(sprintArt,AtsRelationTypes.AgileTeamToSprint_AgileTeam);
      Conditions.assertNotNull(agileTeamArt,""String_Node_Str"",sprintArt.toStringWithId());
      AttributeTypeId pointsAttrType=AtsAttributeTypes.Points;
      String pointsAttrTypeName=services.getAttributeResolver().getSoleAttributeValue(agileTeamArt,AtsAttributeTypes.PointsAttributeType,""String_Node_Str"");
      if (Strings.isValid(pointsAttrTypeName)) {
        AttributeTypeId type=services.getStoreService().getAttributeType(pointsAttrTypeName);
        if (type.isValid()) {
          pointsAttrType=type;
        }
      }
      result=services.getAttributeResolver().getSoleAttributeValue(atsObject,pointsAttrType,""String_Node_Str"");
    }
  }
  return result;
}","@Override public String getText(IAtsObject atsObject) throws Exception {
  String result=""String_Node_Str"";
  if (atsObject instanceof IAtsWorkItem) {
    result=services.getAgileService().getAgileTeamPointsStr((IAtsWorkItem)atsObject);
  }
  return result;
}",0.2319236016371077
96665,"public BacklogXViewerFactory(GoalArtifact soleBacklogArtifact,IOseeTreeReportProvider reportProvider){
  super(""String_Node_Str"",reportProvider);
  List<XViewerAtsAttributeValueColumn> configCols=WorldXViewerUtil.getConfigurationColumns();
  List<XViewerColumn> backlogCols=new LinkedList<>();
  WorldXViewerUtil.addColumn(this,BacklogOrderColumn.getInstance(),AbstractMembersOrderColumn.DEFAULT_WIDTH,backlogCols);
  WorldXViewerUtil.addColumn(this,PointsColumn.getInstance(),20,backlogCols);
  WorldXViewerUtil.addColumn(this,new XViewerAtsAttributeValueColumn(AtsColumnToken.TitleColumn),300,backlogCols);
  WorldXViewerUtil.addColumn(this,WorldXViewerFactory.getColumnServiceColumn(AtsColumnToken.StateColumn),74,backlogCols);
  WorldXViewerUtil.addColumn(this,PriorityColumnUI.getInstance(),20,backlogCols);
  WorldXViewerUtil.addColumn(this,ChangeTypeColumnUI.getInstance(),20,backlogCols);
  WorldXViewerUtil.addColumn(this,AssigneeColumnUI.getInstance(),113,backlogCols);
  WorldXViewerUtil.addColumn(this,TargetedVersionColumnUI.getInstance(),50,backlogCols);
  WorldXViewerUtil.addColumn(this,SprintColumn.getInstance(),100,backlogCols);
  XViewerColumn unPlannedWorkColumn=WorldXViewerUtil.getConfigColumn(""String_Node_Str"",configCols);
  if (unPlannedWorkColumn != null) {
    WorldXViewerUtil.addColumn(this,unPlannedWorkColumn,20,backlogCols);
    configCols.remove(unPlannedWorkColumn);
  }
  WorldXViewerUtil.addColumn(this,AgileFeatureGroupColumn.getInstance(),91,backlogCols);
  WorldXViewerUtil.addColumn(this,WorldXViewerFactory.getColumnServiceColumn(AtsColumnToken.StateColumn),116,backlogCols);
  WorldXViewerUtil.addColumn(this,CreatedDateColumnUI.getInstance(),82,backlogCols);
  WorldXViewerUtil.addColumn(this,WorldXViewerFactory.getColumnServiceColumn(AtsColumnToken.AtsIdColumnShow),50,backlogCols);
  for (  XViewerColumn worldCol : WorldXViewerFactory.getWorldViewColumns()) {
    if (!backlogCols.contains(worldCol)) {
      XViewerColumn newCol=worldCol.copy();
      newCol.setShow(false);
      registerColumns(newCol);
    }
  }
  WorldXViewerUtil.registerAtsAttributeColumns(this);
  WorldXViewerUtil.registerPluginColumns(this);
  WorldXViewerUtil.registerStateColumns(this);
  for (  XViewerAtsAttributeValueColumn col : configCols) {
    registerColumns(col);
  }
}","public BacklogXViewerFactory(GoalArtifact soleBacklogArtifact,IOseeTreeReportProvider reportProvider){
  super(""String_Node_Str"",reportProvider);
  List<XViewerAtsAttributeValueColumn> configCols=WorldXViewerUtil.getConfigurationColumns();
  List<XViewerColumn> backlogCols=new LinkedList<>();
  WorldXViewerUtil.addColumn(this,BacklogOrderColumn.getInstance(),AbstractMembersOrderColumn.DEFAULT_WIDTH,backlogCols);
  WorldXViewerUtil.addColumn(this,new XViewerAtsAttributeValueColumn(AtsColumnToken.TitleColumn),300,backlogCols);
  WorldXViewerUtil.addColumn(this,AgileTeamPointsColumnUI.getInstance(),AtsColumnToken.AgileTeamPointsColumn.getWidth(),backlogCols);
  WorldXViewerUtil.addColumn(this,WorldXViewerFactory.getColumnServiceColumn(AtsColumnToken.StateColumn),116,backlogCols);
  WorldXViewerUtil.addColumn(this,PriorityColumnUI.getInstance(),20,backlogCols);
  WorldXViewerUtil.addColumn(this,ChangeTypeColumnUI.getInstance(),20,backlogCols);
  WorldXViewerUtil.addColumn(this,AssigneeColumnUI.getInstance(),113,backlogCols);
  WorldXViewerUtil.addColumn(this,TargetedVersionColumnUI.getInstance(),50,backlogCols);
  WorldXViewerUtil.addColumn(this,SprintColumn.getInstance(),100,backlogCols);
  XViewerColumn unPlannedWorkColumn=WorldXViewerUtil.getConfigColumn(""String_Node_Str"",configCols);
  if (unPlannedWorkColumn != null) {
    WorldXViewerUtil.addColumn(this,unPlannedWorkColumn,20,backlogCols);
    configCols.remove(unPlannedWorkColumn);
  }
  WorldXViewerUtil.addColumn(this,AgileFeatureGroupColumn.getInstance(),91,backlogCols);
  WorldXViewerUtil.addColumn(this,CreatedDateColumnUI.getInstance(),82,backlogCols);
  WorldXViewerUtil.addColumn(this,WorldXViewerFactory.getColumnServiceColumn(AtsColumnToken.AtsIdColumnShow),50,backlogCols);
  for (  XViewerColumn worldCol : WorldXViewerFactory.getWorldViewColumns()) {
    if (!backlogCols.contains(worldCol)) {
      XViewerColumn newCol=worldCol.copy();
      newCol.setShow(false);
      registerColumns(newCol);
    }
  }
  WorldXViewerUtil.registerAtsAttributeColumns(this);
  WorldXViewerUtil.registerPluginColumns(this);
  WorldXViewerUtil.registerStateColumns(this);
  for (  XViewerAtsAttributeValueColumn col : configCols) {
    registerColumns(col);
  }
}",0.925176056338028
96666,"public SprintXViewerFactory(SprintArtifact soleSprintArtifact,IOseeTreeReportProvider reportProvider){
  super(""String_Node_Str"",reportProvider);
  this.soleSprintArtifact=soleSprintArtifact;
  List<XViewerAtsAttributeValueColumn> configCols=WorldXViewerUtil.getConfigurationColumns();
  List<XViewerColumn> sprintCols=new LinkedList<>();
  WorldXViewerUtil.addColumn(this,SprintOrderColumn.getInstance(),45,sprintCols);
  WorldXViewerUtil.addColumn(this,new XViewerAtsAttributeValueColumn(AtsColumnToken.TitleColumn),339,sprintCols);
  WorldXViewerUtil.addColumn(this,WorldXViewerFactory.getColumnServiceColumn(AtsColumnToken.AgileTeamPointsColumn),15,sprintCols);
  WorldXViewerUtil.addColumn(this,WorldXViewerFactory.getColumnServiceColumn(AtsColumnToken.StateColumn),74,sprintCols);
  WorldXViewerUtil.addColumn(this,PriorityColumnUI.getInstance(),20,sprintCols);
  WorldXViewerUtil.addColumn(this,ChangeTypeColumnUI.getInstance(),20,sprintCols);
  WorldXViewerUtil.addColumn(this,AssigneeColumnUI.getInstance(),113,sprintCols);
  XViewerColumn unPlannedWorkColumn=WorldXViewerUtil.getConfigColumn(""String_Node_Str"",configCols);
  if (unPlannedWorkColumn != null) {
    WorldXViewerUtil.addColumn(this,unPlannedWorkColumn,40,sprintCols);
  }
 else {
    WorldXViewerUtil.addColumn(this,new XViewerAtsAttributeValueColumn(AtsColumnToken.UnPlannedWorkColumn),40,sprintCols);
  }
  WorldXViewerUtil.addColumn(this,TargetedVersionColumnUI.getInstance(),50,sprintCols);
  WorldXViewerUtil.addColumn(this,AgileFeatureGroupColumn.getInstance(),91,sprintCols);
  WorldXViewerUtil.addColumn(this,CreatedDateColumnUI.getInstance(),82,sprintCols);
  WorldXViewerUtil.addColumn(this,WorldXViewerFactory.getColumnServiceColumn(AtsColumnToken.AtsIdColumnShow),50,sprintCols);
  for (  XViewerColumn worldCol : WorldXViewerFactory.getWorldViewColumns()) {
    if (!sprintCols.contains(worldCol)) {
      XViewerColumn newCol=worldCol.copy();
      newCol.setShow(false);
      registerColumns(newCol);
    }
  }
  WorldXViewerUtil.registerAtsAttributeColumns(this);
  WorldXViewerUtil.registerPluginColumns(this);
  WorldXViewerUtil.registerStateColumns(this);
  for (  XViewerAtsAttributeValueColumn col : configCols) {
    registerColumns(col);
  }
}","public SprintXViewerFactory(SprintArtifact soleSprintArtifact,IOseeTreeReportProvider reportProvider){
  super(""String_Node_Str"",reportProvider);
  this.soleSprintArtifact=soleSprintArtifact;
  List<XViewerAtsAttributeValueColumn> configCols=WorldXViewerUtil.getConfigurationColumns();
  List<XViewerColumn> sprintCols=new LinkedList<>();
  WorldXViewerUtil.addColumn(this,SprintOrderColumn.getInstance(),45,sprintCols);
  WorldXViewerUtil.addColumn(this,new XViewerAtsAttributeValueColumn(AtsColumnToken.TitleColumn),339,sprintCols);
  WorldXViewerUtil.addColumn(this,AgileTeamPointsColumnUI.getInstance(),AtsColumnToken.AgileTeamPointsColumn.getWidth(),sprintCols);
  WorldXViewerUtil.addColumn(this,WorldXViewerFactory.getColumnServiceColumn(AtsColumnToken.StateColumn),74,sprintCols);
  WorldXViewerUtil.addColumn(this,PriorityColumnUI.getInstance(),20,sprintCols);
  WorldXViewerUtil.addColumn(this,ChangeTypeColumnUI.getInstance(),20,sprintCols);
  WorldXViewerUtil.addColumn(this,AssigneeColumnUI.getInstance(),113,sprintCols);
  XViewerColumn unPlannedWorkColumn=WorldXViewerUtil.getConfigColumn(""String_Node_Str"",configCols);
  if (unPlannedWorkColumn != null) {
    WorldXViewerUtil.addColumn(this,unPlannedWorkColumn,40,sprintCols);
  }
 else {
    WorldXViewerUtil.addColumn(this,new XViewerAtsAttributeValueColumn(AtsColumnToken.UnPlannedWorkColumn),40,sprintCols);
  }
  WorldXViewerUtil.addColumn(this,TargetedVersionColumnUI.getInstance(),50,sprintCols);
  WorldXViewerUtil.addColumn(this,AgileFeatureGroupColumn.getInstance(),91,sprintCols);
  WorldXViewerUtil.addColumn(this,CreatedDateColumnUI.getInstance(),82,sprintCols);
  WorldXViewerUtil.addColumn(this,WorldXViewerFactory.getColumnServiceColumn(AtsColumnToken.AtsIdColumnShow),50,sprintCols);
  for (  XViewerColumn worldCol : WorldXViewerFactory.getWorldViewColumns()) {
    if (!sprintCols.contains(worldCol)) {
      XViewerColumn newCol=worldCol.copy();
      newCol.setShow(false);
      registerColumns(newCol);
    }
  }
  WorldXViewerUtil.registerAtsAttributeColumns(this);
  WorldXViewerUtil.registerPluginColumns(this);
  WorldXViewerUtil.registerStateColumns(this);
  for (  XViewerAtsAttributeValueColumn col : configCols) {
    registerColumns(col);
  }
}",0.9745762711864406
96667,"/** 
 * Parse through template to find xml defining artifact sets and replace it with the result of publishing those artifacts. Only used by Publish SRS
 * @param artifacts = null if the template defines the artifacts to be used in the publishing
 * @param folder = null when not using an extension template
 * @param outlineNumber if null will find based on first artifact
 */
public InputStream applyTemplate(List<Artifact> artifacts,String templateContent,String templateOptions,String templateStyles,IContainer folder,String outlineNumber,String outlineType,PresentationType presentationType) throws OseeCoreException {
  excludeFolders=renderer.getBooleanOption(""String_Node_Str"");
  ArtifactId view=(ArtifactId)renderer.getOption(IRenderer.VIEW_ID);
  artifactsToExclude=getNonApplicableArtifacts(artifacts,view == null ? ArtifactId.SENTINEL : view);
  if (!artifacts.isEmpty()) {
    ApplicabilityEndpoint applEndpoint=ServiceUtil.getOseeClient().getApplicabilityEndpoint(artifacts.get(0).getBranch());
    applicabilityTokens=new HashMap<>();
    Collection<ApplicabilityToken> appTokens=applEndpoint.getApplicabilityTokenMap();
    for (    ApplicabilityToken token : appTokens) {
      applicabilityTokens.put(token,token);
    }
  }
  WordMLProducer wordMl=null;
  CharBackedInputStream charBak=null;
  try {
    charBak=new CharBackedInputStream();
    wordMl=new WordMLProducer(charBak);
    templateContent=templateContent.replaceAll(PGNUMTYPE_START_1,""String_Node_Str"");
    if (!templateStyles.isEmpty()) {
      templateContent=templateContent.replaceAll(STYLES,templateStyles);
    }
    this.outlineNumber=outlineNumber == null ? peekAtFirstArtifactToGetParagraphNumber(templateContent,null,artifacts) : outlineNumber;
    templateContent=wordMl.setHeadingNumbers(this.outlineNumber,templateContent,outlineType);
    Matcher matcher=headElementsPattern.matcher(templateContent);
    int lastEndIndex=0;
    while (matcher.find()) {
      wordMl.addWordMl(templateContent.substring(lastEndIndex,matcher.start()));
      lastEndIndex=matcher.end();
      JSONObject jsonObject=new JSONObject(templateOptions);
      elementType=jsonObject.getString(""String_Node_Str"");
      if (elementType.equals(ARTIFACT)) {
        parseOutliningOptions(templateOptions);
        if (artifacts == null) {
          artifacts=renderer.getArtifactsOption(artifactName);
        }
        if (presentationType == PresentationType.SPECIALIZED_EDIT && artifacts.size() == 1) {
          outlining=false;
        }
        processArtifactSet(templateOptions,artifacts,wordMl,outlineType,presentationType,(ArtifactId)renderer.getOption(IRenderer.VIEW_ID));
      }
 else       if (elementType.equals(NESTED_TEMPLATE)) {
        parseNestedTemplateOptions(templateOptions,folder,wordMl,presentationType);
      }
 else {
        throw new OseeArgumentException(""String_Node_Str"",""String_Node_Str"");
      }
    }
    String endOfTemplate=templateContent.substring(lastEndIndex);
    wordMl.addWordMl(updateFooter(endOfTemplate));
    displayNonTemplateArtifacts(nonTemplateArtifacts,""String_Node_Str"");
  }
 catch (  CharacterCodingException ex) {
    OseeCoreException.wrapAndThrow(ex);
  }
catch (  JSONException ex) {
    OseeCoreException.wrapAndThrow(ex);
  }
  return charBak;
}","/** 
 * Parse through template to find xml defining artifact sets and replace it with the result of publishing those artifacts. Only used by Publish SRS
 * @param artifacts = null if the template defines the artifacts to be used in the publishing
 * @param folder = null when not using an extension template
 * @param outlineNumber if null will find based on first artifact
 */
public InputStream applyTemplate(List<Artifact> artifacts,String templateContent,String templateOptions,String templateStyles,IContainer folder,String outlineNumber,String outlineType,PresentationType presentationType) throws OseeCoreException {
  excludeFolders=renderer.getBooleanOption(""String_Node_Str"");
  ArtifactId view=(ArtifactId)renderer.getOption(IRenderer.VIEW_ID);
  artifactsToExclude=getNonApplicableArtifacts(artifacts,view == null ? ArtifactId.SENTINEL : view);
  if (!artifacts.isEmpty()) {
    BranchId branchId=artifacts.get(0).getBranch();
    Branch branch=BranchManager.getBranch(branchId);
    if (branch.getBranchType().equals(BranchType.MERGE)) {
      branch=branch.getParentBranch();
    }
    ApplicabilityEndpoint applEndpoint=ServiceUtil.getOseeClient().getApplicabilityEndpoint(branch.getParentBranch());
    applicabilityTokens=new HashMap<>();
    Collection<ApplicabilityToken> appTokens=applEndpoint.getApplicabilityTokenMap();
    for (    ApplicabilityToken token : appTokens) {
      applicabilityTokens.put(token,token);
    }
  }
  WordMLProducer wordMl=null;
  CharBackedInputStream charBak=null;
  try {
    charBak=new CharBackedInputStream();
    wordMl=new WordMLProducer(charBak);
    templateContent=templateContent.replaceAll(PGNUMTYPE_START_1,""String_Node_Str"");
    if (!templateStyles.isEmpty()) {
      templateContent=templateContent.replaceAll(STYLES,templateStyles);
    }
    this.outlineNumber=outlineNumber == null ? peekAtFirstArtifactToGetParagraphNumber(templateContent,null,artifacts) : outlineNumber;
    templateContent=wordMl.setHeadingNumbers(this.outlineNumber,templateContent,outlineType);
    Matcher matcher=headElementsPattern.matcher(templateContent);
    int lastEndIndex=0;
    while (matcher.find()) {
      wordMl.addWordMl(templateContent.substring(lastEndIndex,matcher.start()));
      lastEndIndex=matcher.end();
      JSONObject jsonObject=new JSONObject(templateOptions);
      elementType=jsonObject.getString(""String_Node_Str"");
      if (elementType.equals(ARTIFACT)) {
        parseOutliningOptions(templateOptions);
        if (artifacts == null) {
          artifacts=renderer.getArtifactsOption(artifactName);
        }
        if (presentationType == PresentationType.SPECIALIZED_EDIT && artifacts.size() == 1) {
          outlining=false;
        }
        processArtifactSet(templateOptions,artifacts,wordMl,outlineType,presentationType,(ArtifactId)renderer.getOption(IRenderer.VIEW_ID));
      }
 else       if (elementType.equals(NESTED_TEMPLATE)) {
        parseNestedTemplateOptions(templateOptions,folder,wordMl,presentationType);
      }
 else {
        throw new OseeArgumentException(""String_Node_Str"",""String_Node_Str"");
      }
    }
    String endOfTemplate=templateContent.substring(lastEndIndex);
    wordMl.addWordMl(updateFooter(endOfTemplate));
    displayNonTemplateArtifacts(nonTemplateArtifacts,""String_Node_Str"");
  }
 catch (  CharacterCodingException ex) {
    OseeCoreException.wrapAndThrow(ex);
  }
catch (  JSONException ex) {
    OseeCoreException.wrapAndThrow(ex);
  }
  return charBak;
}",0.964079822616408
96668,"@Override public boolean editDispoItem(BranchId branch,String itemId,DispoItemData newDispoItem){
  boolean wasUpdated=false;
  DispoItem dispoItemToEdit=getQuery().findDispoItemById(branch,itemId);
  if (dispoItemToEdit != null && newDispoItem.getAnnotationsList() == null && newDispoItem.getDiscrepanciesList() == null) {
    ArtifactReadable author=getQuery().findUser();
    DispoStorageMetadata metadata=new DispoStorageMetadata();
    getWriter().updateDispoItem(author,branch,dispoItemToEdit.getGuid(),newDispoItem,metadata);
    if (!metadata.getIdsOfUpdatedItems().isEmpty()) {
      updateBroadcaster.broadcastUpdateItems(metadata.getIdsOfUpdatedItems(),singleton(newDispoItem),getDispoItemParentSet(branch,itemId));
    }
    wasUpdated=true;
  }
  return wasUpdated;
}","@Override public boolean editDispoItem(BranchId branch,String itemId,DispoItemData newDispoItem){
  boolean wasUpdated=false;
  DispoItem dispoItemToEdit=getQuery().findDispoItemById(branch,itemId);
  if (dispoItemToEdit != null && newDispoItem.getAnnotationsList() == null && newDispoItem.getDiscrepanciesList() == null) {
    ArtifactReadable author=getQuery().findUser();
    DispoStorageMetadata metadata=new DispoStorageMetadata();
    try {
      Date date=DispoUtil.getTimestampOfFile(getFullFilePathFromDispoItemId(branch,itemId,dispoItemToEdit));
      newDispoItem.setLastUpdate(date);
    }
 catch (    Throwable ex) {
      throw new OseeCoreException(ex);
    }
    getWriter().updateDispoItem(author,branch,dispoItemToEdit.getGuid(),newDispoItem,metadata);
    if (!metadata.getIdsOfUpdatedItems().isEmpty()) {
      updateBroadcaster.broadcastUpdateItems(metadata.getIdsOfUpdatedItems(),singleton(newDispoItem),getDispoItemParentSet(branch,itemId));
    }
    wasUpdated=true;
  }
  return wasUpdated;
}",0.8676307007786429
96669,"@Override public boolean editDispoAnnotation(BranchId branch,String itemId,String annotationId,DispoAnnotationData newAnnotation,String userName){
  boolean wasUpdated=false;
  DispoItem dispoItem=getQuery().findDispoItemById(branch,itemId);
  if (dispoItem != null && dispoItem.getAssignee().equalsIgnoreCase(userName)) {
    List<DispoAnnotationData> annotationsList=dispoItem.getAnnotationsList();
    Map<String,Discrepancy> discrepanciesList=dispoItem.getDiscrepanciesList();
    DispoAnnotationData origAnnotation=DispoUtil.getById(annotationsList,annotationId);
    int indexOfAnnotation=origAnnotation.getIndex();
    boolean needToReconnect=false;
    String newLocationRefs=newAnnotation.getLocationRefs();
    String newResolution=newAnnotation.getResolution();
    String newResolutionType=newAnnotation.getResolutionType();
    if (!origAnnotation.getResolutionType().equals(newResolutionType) || !origAnnotation.getResolution().equals(newResolution)) {
      newAnnotation.setIsResolutionValid(validateResolution(newAnnotation));
      needToReconnect=true;
    }
    if (!origAnnotation.getLocationRefs().equals(newLocationRefs)) {
      needToReconnect=true;
    }
    if (needToReconnect == true) {
      newAnnotation.disconnect();
      dispoConnector.connectAnnotation(newAnnotation,discrepanciesList);
    }
    annotationsList.set(indexOfAnnotation,newAnnotation);
    dispoItem.getAnnotationsList().get(0);
    ArtifactReadable author=getQuery().findUser();
    DispoItemData modifiedDispoItem=DispoUtil.itemArtToItemData(getDispoItemById(branch,itemId),true);
    modifiedDispoItem.setAnnotationsList(annotationsList);
    modifiedDispoItem.setStatus(dispoConnector.getItemStatus(modifiedDispoItem));
    DispoStorageMetadata metadata=new DispoStorageMetadata();
    getWriter().updateDispoItem(author,branch,dispoItem.getGuid(),modifiedDispoItem,metadata);
    if (!metadata.getIdsOfUpdatedItems().isEmpty()) {
      updateBroadcaster.broadcastUpdateItems(metadata.getIdsOfUpdatedItems(),singleton(modifiedDispoItem),getDispoItemParentSet(branch,itemId));
    }
    wasUpdated=true;
  }
  return wasUpdated;
}","@Override public boolean editDispoAnnotation(BranchId branch,String itemId,String annotationId,DispoAnnotationData newAnnotation,String userName){
  boolean wasUpdated=false;
  DispoItem dispoItem=getQuery().findDispoItemById(branch,itemId);
  if (dispoItem != null && dispoItem.getAssignee().equalsIgnoreCase(userName)) {
    List<DispoAnnotationData> annotationsList=dispoItem.getAnnotationsList();
    Map<String,Discrepancy> discrepanciesList=dispoItem.getDiscrepanciesList();
    DispoAnnotationData origAnnotation=DispoUtil.getById(annotationsList,annotationId);
    int indexOfAnnotation=origAnnotation.getIndex();
    boolean needToReconnect=false;
    String newLocationRefs=newAnnotation.getLocationRefs();
    String newResolution=newAnnotation.getResolution();
    String newResolutionType=newAnnotation.getResolutionType();
    if (!origAnnotation.getResolutionType().equals(newResolutionType) || !origAnnotation.getResolution().equals(newResolution)) {
      newAnnotation.setIsResolutionValid(validateResolution(newAnnotation));
      needToReconnect=true;
    }
    if (!origAnnotation.getLocationRefs().equals(newLocationRefs)) {
      needToReconnect=true;
    }
    if (needToReconnect == true) {
      newAnnotation.disconnect();
      dispoConnector.connectAnnotation(newAnnotation,discrepanciesList);
    }
    annotationsList.set(indexOfAnnotation,newAnnotation);
    dispoItem.getAnnotationsList().get(0);
    ArtifactReadable author=getQuery().findUser();
    DispoItemData modifiedDispoItem=DispoUtil.itemArtToItemData(getDispoItemById(branch,itemId),true);
    modifiedDispoItem.setAnnotationsList(annotationsList);
    modifiedDispoItem.setStatus(dispoConnector.getItemStatus(modifiedDispoItem));
    DispoStorageMetadata metadata=new DispoStorageMetadata();
    try {
      Date date=DispoUtil.getTimestampOfFile(getFullFilePathFromDispoItemId(branch,itemId,dispoItem));
      modifiedDispoItem.setLastUpdate(date);
    }
 catch (    Throwable ex) {
      throw new OseeCoreException(ex);
    }
    getWriter().updateDispoItem(author,branch,dispoItem.getGuid(),modifiedDispoItem,metadata);
    if (!metadata.getIdsOfUpdatedItems().isEmpty()) {
      updateBroadcaster.broadcastUpdateItems(metadata.getIdsOfUpdatedItems(),singleton(modifiedDispoItem),getDispoItemParentSet(branch,itemId));
    }
    wasUpdated=true;
  }
  return wasUpdated;
}",0.9473917869034406
96670,"private void processFunction(VCastInstrumentedFile lisFile,VCastLisFileParser lisFileParser,int fileNum,VCastDataStore dataStore,VCastInstrumentedFile instrumentedFile,VCastFunction function,boolean isMCDCFile,OperationReport report){
  int functionNum=function.getFindex();
  DispoItemData newItem=new DispoItemData();
  newItem.setAnnotationsList(new ArrayList<DispoAnnotationData>());
  VCastSourceFileJoin sourceFileJoin=dataStore.getSourceFileJoin(lisFile);
  newItem.setName(sourceFileJoin.getDisplayName() + ""String_Node_Str"" + function.getName());
  newItem.setFileNumber(Integer.toString(fileNum));
  newItem.setMethodNumber(Integer.toString(functionNum));
  String datId=generateDatId(fileNum,functionNum);
  datIdToItem.put(datId,newItem);
  Collection<VCastStatementCoverage> statementCoverageItems=Collections.emptyList();
  try {
    statementCoverageItems=dataStore.getStatementCoverageLines(function);
  }
 catch (  OseeCoreException ex) {
    report.addEntry(""String_Node_Str"",String.format(""String_Node_Str"",instrumentedFile.getId(),function.getId(),ex.getMessage()),ERROR);
  }
  Map<String,Discrepancy> discrepancies=new HashMap<>();
  for (  VCastStatementCoverage statementCoverageItem : statementCoverageItems) {
    processStatement(lisFile,lisFileParser,fileNum,functionNum,function,statementCoverageItem,isMCDCFile,discrepancies,report);
  }
  newItem.setDiscrepanciesList(discrepancies);
}","private void processFunction(VCastInstrumentedFile lisFile,VCastLisFileParser lisFileParser,int fileNum,VCastDataStore dataStore,VCastInstrumentedFile instrumentedFile,VCastFunction function,boolean isMCDCFile,OperationReport report){
  int functionNum=function.getFindex();
  DispoItemData newItem=new DispoItemData();
  newItem.setAnnotationsList(new ArrayList<DispoAnnotationData>());
  VCastSourceFileJoin sourceFileJoin=dataStore.getSourceFileJoin(lisFile);
  newItem.setName(sourceFileJoin.getDisplayName() + ""String_Node_Str"" + function.getName());
  newItem.setFileNumber(Integer.toString(fileNum));
  newItem.setMethodNumber(Integer.toString(functionNum));
  try {
    Date lastModified=DispoUtil.getTimestampOfFile(lisFile.getLISFile());
    newItem.setLastUpdate(lastModified);
  }
 catch (  Throwable ex) {
    report.addEntry(""String_Node_Str"",String.format(""String_Node_Str"",instrumentedFile.getId(),ex.getMessage()),ERROR);
  }
  String datId=generateDatId(fileNum,functionNum);
  datIdToItem.put(datId,newItem);
  Collection<VCastStatementCoverage> statementCoverageItems=Collections.emptyList();
  try {
    statementCoverageItems=dataStore.getStatementCoverageLines(function);
  }
 catch (  OseeCoreException ex) {
    report.addEntry(""String_Node_Str"",String.format(""String_Node_Str"",instrumentedFile.getId(),function.getId(),ex.getMessage()),ERROR);
  }
  Map<String,Discrepancy> discrepancies=new HashMap<>();
  for (  VCastStatementCoverage statementCoverageItem : statementCoverageItems) {
    processStatement(lisFile,lisFileParser,fileNum,functionNum,function,statementCoverageItem,isMCDCFile,discrepancies,report);
  }
  newItem.setDiscrepanciesList(discrepancies);
}",0.710196204567385
96671,"public List<Artifact> getOppositeArtifacts(){
  List<Artifact> oppositeArtifacts=new ArrayList<>();
  for (  RelationLink link : artifact.getRelationsAll(DeletionFlag.EXCLUDE_DELETED)) {
    if (link.getRelationType().getName().equals(relationTypeName)) {
      if (link.getAArtifactId() == artifactId) {
        oppositeArtifacts.add(link.getArtifactB());
      }
 else {
        oppositeArtifacts.add(link.getArtifactA());
      }
    }
  }
  return oppositeArtifacts;
}","public List<Artifact> getOppositeArtifacts(){
  List<Artifact> oppositeArtifacts=new ArrayList<>();
  RelationTypeSide relationSide=new RelationTypeSide(relationType,parentIsOnSideA ? RelationSide.SIDE_B : RelationSide.SIDE_A);
  oppositeArtifacts.addAll(artifact.getRelatedArtifacts(relationSide,DeletionFlag.EXCLUDE_DELETED));
  return oppositeArtifacts;
}",0.3759036144578313
96672,"@Before public void setUp(){
  MockitoAnnotations.initMocks(this);
  branch=BranchId.valueOf(23L);
  when(setId.getGuid()).thenReturn(""String_Node_Str"");
  when(itemId.getGuid()).thenReturn(""String_Node_Str"");
  when(mockBranch.getName()).thenReturn(""String_Node_Str"");
  when(storage.findUser()).thenReturn(author);
  when(storageProvider.get()).thenReturn(storage);
  dispoApi.setStorageProvider(storageProvider);
  dispoApi.setDataFactory(dataFactory);
  dispoApi.setDispoConnector(dispoConnector);
  dispoApi.setResolutionValidator(validator);
  dispoApi.setLogger(logger);
  dispoApi.start();
}","@Before public void setUp(){
  MockitoAnnotations.initMocks(this);
  branch=BranchId.valueOf(23L);
  when(setId.getGuid()).thenReturn(""String_Node_Str"");
  when(itemId.getGuid()).thenReturn(""String_Node_Str"");
  when(mockBranch.getName()).thenReturn(""String_Node_Str"");
  when(storage.findUser()).thenReturn(author);
  when(storageProvider.get()).thenReturn(storage);
  dispoApi.setStorageProvider(storageProvider);
  dispoApi.setDataFactory(dataFactory);
  dispoApi.setDispoConnector(dispoConnector);
  dispoApi.setResolutionValidator(validator);
  dispoApi.setLogger(logger);
  dispoApi.start(mockConfigProperties);
}",0.9835796387520526
96673,"public void start(){
  logger.trace(""String_Node_Str"");
  importerFactory=new DispoImporterFactory(dataFactory,executor,logger);
}","public void start(Map<String,Object> props){
  logger.trace(""String_Node_Str"");
  importerFactory=new DispoImporterFactory(dataFactory,executor,logger);
  update(props);
}",0.8637873754152824
96674,"/** 
 * Get a specific Source File given a file name
 * @param fileName The name of the Source File to search for
 * @return The found Source File if successful. Error Code otherwise
 * @throws FileNotFoundException
 * @response.representation.200.doc OK, Found Source File
 * @response.representation.404.doc Not Found, Could not the Source File
 */
@Path(""String_Node_Str"") @GET @Produces(MediaType.APPLICATION_OCTET_STREAM) public Response getDispoItemsById(@PathParam(""String_Node_Str"") String fileName){
  String origFileName=fileName;
  if (!fileName.endsWith(""String_Node_Str"")) {
    fileName=fileName.replaceAll(""String_Node_Str"",""String_Node_Str"");
  }
  DispoSet set=dispoApi.getDispoSetById(branch,setId);
  String fullPath=set.getImportPath() + File.separator + ""String_Node_Str""+ File.separator+ fileName;
  final File result=new File(fullPath);
  StreamingOutput streamingOutput=new StreamingOutput(){
    @Override public void write(    OutputStream outputStream) throws WebApplicationException {
      FileInputStream inputStream=null;
      Writer writer=null;
      try {
        inputStream=new FileInputStream(result);
        writer=new OutputStreamWriter(outputStream,""String_Node_Str"");
        int c;
        while ((c=inputStream.read()) != -1) {
          writer.write(c);
        }
        outputStream.flush();
      }
 catch (      IOException ex) {
        throw new OseeCoreException(ex);
      }
 finally {
        Lib.close(inputStream);
        Lib.close(writer);
      }
    }
  }
;
  String contentDisposition=String.format(""String_Node_Str"",fileName,new Date());
  return Response.ok(streamingOutput).header(""String_Node_Str"",contentDisposition).type(""String_Node_Str"").build();
}","/** 
 * Get a specific Source File given a file name
 * @param fileName The name of the Source File to search for
 * @return The found Source File if successful. Error Code otherwise
 * @throws FileNotFoundException
 * @response.representation.200.doc OK, Found Source File
 * @response.representation.404.doc Not Found, Could not the Source File
 */
@Path(""String_Node_Str"") @GET @Produces(MediaType.APPLICATION_OCTET_STREAM) public Response getDispoItemsById(@PathParam(""String_Node_Str"") String fileName){
  if (!fileName.endsWith(""String_Node_Str"")) {
    fileName=fileName.replaceAll(dispoApi.getConfig().getFileExtRegex(),""String_Node_Str"");
  }
  DispoSet set=dispoApi.getDispoSetById(branch,setId);
  String fullPath=set.getImportPath() + File.separator + ""String_Node_Str""+ File.separator+ fileName;
  final File result=new File(fullPath);
  StreamingOutput streamingOutput=new StreamingOutput(){
    @Override public void write(    OutputStream outputStream) throws WebApplicationException {
      FileInputStream inputStream=null;
      Writer writer=null;
      try {
        inputStream=new FileInputStream(result);
        writer=new OutputStreamWriter(outputStream,""String_Node_Str"");
        int c;
        while ((c=inputStream.read()) != -1) {
          writer.write(c);
        }
        outputStream.flush();
      }
 catch (      IOException ex) {
        throw new OseeCoreException(ex);
      }
 finally {
        Lib.close(inputStream);
        Lib.close(writer);
      }
    }
  }
;
  String contentDisposition=String.format(""String_Node_Str"",fileName,new Date());
  return Response.ok(streamingOutput).header(""String_Node_Str"",contentDisposition).type(""String_Node_Str"").build();
}",0.9313868613138686
96675,"private void processObjectArtifact(Artifact artifact,WordMLProducer wordMl,String outlineType,PresentationType presentationType,DataRightResult data) throws OseeCoreException {
  if (!artifact.isAttributeTypeValid(CoreAttributeTypes.WholeWordContent) && !artifact.isAttributeTypeValid(CoreAttributeTypes.NativeContent)) {
    if (!processedArtifacts.contains(artifact)) {
      boolean ignoreArtifact=excludeFolders && artifact.isOfType(CoreArtifactTypes.Folder) && !artifactsToExclude.containsKey(artifact.getId());
      boolean ignoreArtType=excludeArtifactTypes != null && artifact.isOfType(excludeArtifactTypes);
      boolean publishInline=artifact.getSoleAttributeValue(CoreAttributeTypes.PublishInline,false);
      boolean startedSection=false;
      boolean templateOnly=renderer.getBooleanOption(""String_Node_Str"");
      boolean includeUUIDs=renderer.getBooleanOption(""String_Node_Str"");
      if (!ignoreArtifact && !ignoreArtType) {
        if (outlining && !templateOnly) {
          String headingText=artifact.getSoleAttributeValue(headingAttributeType,""String_Node_Str"");
          if (includeUUIDs) {
            String UUIDtext=String.format(""String_Node_Str"",artifact.getArtId());
            headingText=headingText.concat(UUIDtext);
          }
          Boolean mergeTag=(Boolean)renderer.getOption(ITemplateRenderer.ADD_MERGE_TAG);
          if (mergeTag != null && mergeTag) {
            headingText=headingText.concat(""String_Node_Str"");
          }
          if (!publishInline && !templateOnly) {
            paragraphNumber=wordMl.startOutlineSubSection(""String_Node_Str"",headingText,outlineType);
            startedSection=true;
          }
          if (paragraphNumber == null) {
            paragraphNumber=wordMl.startOutlineSubSection();
            startedSection=true;
          }
          if (renderer.getBooleanOption(WordTemplateRenderer.UPDATE_PARAGRAPH_NUMBER_OPTION) && !publishInline) {
            if (artifact.isAttributeTypeValid(CoreAttributeTypes.ParagraphNumber)) {
              artifact.setSoleAttributeValue(CoreAttributeTypes.ParagraphNumber,paragraphNumber.toString());
              SkynetTransaction transaction=(SkynetTransaction)renderer.getOption(ITemplateRenderer.TRANSACTION_OPTION);
              if (transaction != null) {
                artifact.persist(transaction);
              }
 else {
                artifact.persist(getClass().getSimpleName());
              }
            }
          }
        }
        PageOrientation orientation=WordRendererUtil.getPageOrientation(artifact);
        String footer=data.getContent(artifact.getGuid(),orientation);
        processMetadata(artifact,wordMl);
        processAttributes(artifact,wordMl,presentationType,publishInline,footer);
      }
      if (recurseChildren && !renderer.getBooleanOption(RECURSE_ON_LOAD) || renderer.getBooleanOption(RECURSE_ON_LOAD) && !renderer.getBooleanOption(""String_Node_Str"")) {
        for (        Artifact childArtifact : artifact.getChildren()) {
          processObjectArtifact(childArtifact,wordMl,outlineType,presentationType,data);
        }
      }
      if (startedSection) {
        wordMl.endOutlineSubSection();
      }
      processedArtifacts.add(artifact);
    }
  }
 else {
    nonTemplateArtifacts.add(artifact);
  }
}","private void processObjectArtifact(Artifact artifact,WordMLProducer wordMl,String outlineType,PresentationType presentationType,DataRightResult data) throws OseeCoreException {
  if (!artifact.isAttributeTypeValid(CoreAttributeTypes.WholeWordContent) && !artifact.isAttributeTypeValid(CoreAttributeTypes.NativeContent)) {
    if (!processedArtifacts.contains(artifact)) {
      boolean ignoreArtifact=(excludeFolders && artifact.isOfType(CoreArtifactTypes.Folder)) || artifactsToExclude.containsKey(ArtifactId.valueOf(artifact.getId()));
      boolean ignoreArtType=excludeArtifactTypes != null && artifact.isOfType(excludeArtifactTypes);
      boolean publishInline=artifact.getSoleAttributeValue(CoreAttributeTypes.PublishInline,false);
      boolean startedSection=false;
      boolean templateOnly=renderer.getBooleanOption(""String_Node_Str"");
      boolean includeUUIDs=renderer.getBooleanOption(""String_Node_Str"");
      if (!ignoreArtifact && !ignoreArtType) {
        if (outlining && !templateOnly) {
          String headingText=artifact.getSoleAttributeValue(headingAttributeType,""String_Node_Str"");
          if (includeUUIDs) {
            String UUIDtext=String.format(""String_Node_Str"",artifact.getArtId());
            headingText=headingText.concat(UUIDtext);
          }
          Boolean mergeTag=(Boolean)renderer.getOption(ITemplateRenderer.ADD_MERGE_TAG);
          if (mergeTag != null && mergeTag) {
            headingText=headingText.concat(""String_Node_Str"");
          }
          if (!publishInline && !templateOnly) {
            paragraphNumber=wordMl.startOutlineSubSection(""String_Node_Str"",headingText,outlineType);
            startedSection=true;
          }
          if (paragraphNumber == null) {
            paragraphNumber=wordMl.startOutlineSubSection();
            startedSection=true;
          }
          if (renderer.getBooleanOption(WordTemplateRenderer.UPDATE_PARAGRAPH_NUMBER_OPTION) && !publishInline) {
            if (artifact.isAttributeTypeValid(CoreAttributeTypes.ParagraphNumber)) {
              artifact.setSoleAttributeValue(CoreAttributeTypes.ParagraphNumber,paragraphNumber.toString());
              SkynetTransaction transaction=(SkynetTransaction)renderer.getOption(ITemplateRenderer.TRANSACTION_OPTION);
              if (transaction != null) {
                artifact.persist(transaction);
              }
 else {
                artifact.persist(getClass().getSimpleName());
              }
            }
          }
        }
        PageOrientation orientation=WordRendererUtil.getPageOrientation(artifact);
        String footer=data.getContent(artifact.getGuid(),orientation);
        processMetadata(artifact,wordMl);
        processAttributes(artifact,wordMl,presentationType,publishInline,footer);
      }
      if (recurseChildren && !renderer.getBooleanOption(RECURSE_ON_LOAD) || renderer.getBooleanOption(RECURSE_ON_LOAD) && !renderer.getBooleanOption(""String_Node_Str"")) {
        for (        Artifact childArtifact : artifact.getChildren()) {
          processObjectArtifact(childArtifact,wordMl,outlineType,presentationType,data);
        }
      }
      if (startedSection) {
        wordMl.endOutlineSubSection();
      }
      processedArtifacts.add(artifact);
    }
  }
 else {
    nonTemplateArtifacts.add(artifact);
  }
}",0.9916679291016512
96676,"public JaxAgileItem write(){
  IAtsChangeSet changes=services.getStoreService().createAtsChangeSet(""String_Node_Str"",AtsCoreUsers.SYSTEM_USER);
  if (newItem.isSetFeatures()) {
    Collection<IAgileFeatureGroup> features=agileService.getAgileFeatureGroups(newItem.getFeatures());
    List<ArtifactToken> featureArts=new LinkedList<>();
    for (    IAgileFeatureGroup feature : features) {
      featureArts.add(feature.getStoreObject());
    }
    for (    ArtifactToken awa : services.getArtifacts(newItem.getUuids())) {
      for (      IAgileFeatureGroup feature : features) {
        ArtifactToken featureArt=feature.getStoreObject();
        if (!services.getRelationResolver().areRelated(featureArt,AtsRelationTypes.AgileFeatureToItem_FeatureGroup,awa)) {
          changes.relate(feature,AtsRelationTypes.AgileFeatureToItem_AtsItem,awa);
        }
      }
      for (      ArtifactToken featureArt : services.getRelationResolver().getRelated(awa,AtsRelationTypes.AgileFeatureToItem_FeatureGroup)) {
        if (!featureArts.contains(featureArt)) {
          changes.unrelate(featureArt,AtsRelationTypes.AgileFeatureToItem_AtsItem,awa);
        }
      }
    }
  }
 else   if (newItem.isRemoveFeatures()) {
    for (    ArtifactToken awa : services.getArtifacts(newItem.getUuids())) {
      for (      ArtifactToken feature : services.getRelationResolver().getRelated(awa,AtsRelationTypes.AgileFeatureToItem_FeatureGroup)) {
        changes.unrelate(feature,AtsRelationTypes.AgileFeatureToItem_FeatureGroup,awa);
      }
    }
  }
  if (newItem.isSetSprint()) {
    ArtifactToken sprintArt=services.getArtifact(newItem.getSprintUuid());
    IAgileSprint sprint=services.getAgileService().getAgileSprint(sprintArt);
    for (    ArtifactToken awa : services.getArtifacts(newItem.getUuids())) {
      if (sprint != null) {
        changes.setRelation(sprint,AtsRelationTypes.AgileSprintToItem_AtsItem,awa);
      }
 else {
        changes.unrelateAll(awa,AtsRelationTypes.AgileSprintToItem_AtsItem);
      }
      changes.add(sprint);
    }
  }
  if (newItem.isSetBacklog()) {
    ArtifactToken backlogArt=services.getArtifact(newItem.getBacklogUuid());
    IAgileSprint backlog=services.getAgileService().getAgileSprint(backlogArt);
    for (    ArtifactToken awa : services.getArtifacts(newItem.getUuids())) {
      if (backlog != null) {
        changes.setRelation(backlog,AtsRelationTypes.Goal_Member,awa);
      }
 else {
        changes.unrelateAll(awa,AtsRelationTypes.Goal_Member);
      }
      changes.add(backlog);
    }
  }
  if (!changes.isEmpty()) {
    changes.execute();
  }
  return newItem;
}","public JaxAgileItem write(){
  IAtsChangeSet changes=services.getStoreService().createAtsChangeSet(""String_Node_Str"",AtsCoreUsers.SYSTEM_USER);
  if (newItem.isSetFeatures()) {
    Collection<IAgileFeatureGroup> features=agileService.getAgileFeatureGroups(newItem.getFeatures());
    List<ArtifactToken> featureArts=new LinkedList<>();
    for (    IAgileFeatureGroup feature : features) {
      featureArts.add(feature.getStoreObject());
    }
    for (    ArtifactToken awa : services.getArtifacts(newItem.getUuids())) {
      for (      IAgileFeatureGroup feature : features) {
        ArtifactToken featureArt=feature.getStoreObject();
        if (!services.getRelationResolver().areRelated(featureArt,AtsRelationTypes.AgileFeatureToItem_FeatureGroup,awa)) {
          changes.relate(feature,AtsRelationTypes.AgileFeatureToItem_AtsItem,awa);
        }
      }
      for (      ArtifactToken featureArt : services.getRelationResolver().getRelated(awa,AtsRelationTypes.AgileFeatureToItem_FeatureGroup)) {
        if (!featureArts.contains(featureArt)) {
          changes.unrelate(featureArt,AtsRelationTypes.AgileFeatureToItem_AtsItem,awa);
        }
      }
    }
  }
 else   if (newItem.isRemoveFeatures()) {
    for (    ArtifactToken awa : services.getArtifacts(newItem.getUuids())) {
      for (      ArtifactToken feature : services.getRelationResolver().getRelated(awa,AtsRelationTypes.AgileFeatureToItem_FeatureGroup)) {
        changes.unrelate(feature,AtsRelationTypes.AgileFeatureToItem_AtsItem,awa);
      }
    }
  }
  if (newItem.isSetSprint()) {
    ArtifactToken sprintArt=services.getArtifact(newItem.getSprintUuid());
    IAgileSprint sprint=services.getAgileService().getAgileSprint(sprintArt);
    for (    ArtifactToken awa : services.getArtifacts(newItem.getUuids())) {
      if (sprint != null) {
        changes.setRelation(sprint,AtsRelationTypes.AgileSprintToItem_AtsItem,awa);
      }
 else {
        changes.unrelateAll(awa,AtsRelationTypes.AgileSprintToItem_AtsItem);
      }
      changes.add(sprint);
    }
  }
  if (newItem.isSetBacklog()) {
    ArtifactToken backlogArt=services.getArtifact(newItem.getBacklogUuid());
    IAgileSprint backlog=services.getAgileService().getAgileSprint(backlogArt);
    for (    ArtifactToken awa : services.getArtifacts(newItem.getUuids())) {
      if (backlog != null) {
        changes.setRelation(backlog,AtsRelationTypes.Goal_Member,awa);
      }
 else {
        changes.unrelateAll(awa,AtsRelationTypes.Goal_Member);
      }
      changes.add(backlog);
    }
  }
  if (!changes.isEmpty()) {
    changes.execute();
  }
  return newItem;
}",0.9963650277405778
96677,"public static boolean promptChangeFeatureGroup(final Collection<? extends AbstractWorkflowArtifact> awas) throws OseeCoreException {
  SprintItems items=new SprintItems(awas);
  if (items.isNoBacklogDetected()) {
    AWorkbench.popup(""String_Node_Str"");
    return false;
  }
  if (items.isMultipleBacklogsDetected()) {
    AWorkbench.popup(""String_Node_Str"");
    return false;
  }
  AgileEndpointApi agileEp=AtsClientService.getAgileEndpoint();
  List<JaxAgileFeatureGroup> activeFeatureGroups=new ArrayList<>();
  long teamUuid=items.getCommonBacklog().getTeamUuid();
  try {
    for (    JaxAgileFeatureGroup feature : agileEp.getFeatureGroups(items.getCommonBacklog().getTeamUuid())) {
      if (feature.isActive()) {
        activeFeatureGroups.add(feature);
      }
    }
  }
 catch (  Exception ex) {
    OseeLog.log(Activator.class,OseeLevel.SEVERE_POPUP,ex);
    return false;
  }
  FilteredCheckboxTreeDialog dialog=new FilteredCheckboxTreeDialog(""String_Node_Str"",""String_Node_Str"",new ArrayTreeContentProvider(),new StringLabelProvider(),new StringNameComparator());
  dialog.setInput(activeFeatureGroups);
  Collection<IAgileFeatureGroup> selectedFeatureGroups=getSelectedFeatureGroups(awas);
  if (!selectedFeatureGroups.isEmpty()) {
    dialog.setInitialSelections(selectedFeatureGroups);
  }
  dialog.setShowSelectButtons(true);
  int result=dialog.open();
  if (result != 0) {
    return false;
  }
  JaxAgileItem updateItem=new JaxAgileItem();
  if (dialog.getResult().length == 0) {
    updateItem.setRemoveFeatures(true);
  }
 else {
    updateItem.setSetFeatures(true);
    for (    Object obj : dialog.getResult()) {
      updateItem.getFeatures().add(((JaxAgileFeatureGroup)obj).getUuid());
    }
  }
  for (  AbstractWorkflowArtifact awa : awas) {
    updateItem.getUuids().add(Long.valueOf(awa.getArtId()));
  }
  try {
    agileEp.updateItem(teamUuid,updateItem);
    ArtifactQuery.reloadArtifacts(awas);
  }
 catch (  Exception ex) {
    OseeLog.log(Activator.class,OseeLevel.SEVERE_POPUP,ex);
  }
  return true;
}","public static boolean promptChangeFeatureGroup(final Collection<? extends AbstractWorkflowArtifact> awas) throws OseeCoreException {
  SprintItems items=new SprintItems(awas);
  if (items.isNoBacklogDetected()) {
    AWorkbench.popup(""String_Node_Str"");
    return false;
  }
  if (items.isMultipleBacklogsDetected()) {
    AWorkbench.popup(""String_Node_Str"");
    return false;
  }
  AgileEndpointApi agileEp=AtsClientService.getAgileEndpoint();
  List<JaxAgileFeatureGroup> activeFeatureGroups=new ArrayList<>();
  long teamUuid=items.getCommonBacklog().getTeamUuid();
  try {
    for (    JaxAgileFeatureGroup feature : agileEp.getFeatureGroups(items.getCommonBacklog().getTeamUuid())) {
      if (feature.isActive()) {
        activeFeatureGroups.add(feature);
      }
    }
  }
 catch (  Exception ex) {
    OseeLog.log(Activator.class,OseeLevel.SEVERE_POPUP,ex);
    return false;
  }
  FilteredCheckboxTreeDialog dialog=new FilteredCheckboxTreeDialog(""String_Node_Str"",""String_Node_Str"",new ArrayTreeContentProvider(),new StringLabelProvider(),new StringNameComparator());
  dialog.setInput(activeFeatureGroups);
  Collection<JaxAgileFeatureGroup> selectedFeatureGroups=getSelectedFeatureGroups(awas);
  if (!selectedFeatureGroups.isEmpty()) {
    dialog.setInitialSelections(selectedFeatureGroups);
  }
  dialog.setShowSelectButtons(true);
  int result=dialog.open();
  if (result != 0) {
    return false;
  }
  JaxAgileItem updateItem=new JaxAgileItem();
  if (dialog.getResult().length == 0) {
    updateItem.setRemoveFeatures(true);
  }
 else {
    updateItem.setSetFeatures(true);
    for (    Object obj : dialog.getResult()) {
      updateItem.getFeatures().add(((JaxAgileFeatureGroup)obj).getUuid());
    }
  }
  for (  AbstractWorkflowArtifact awa : awas) {
    updateItem.getUuids().add(Long.valueOf(awa.getArtId()));
  }
  try {
    agileEp.updateItem(teamUuid,updateItem);
    ArtifactQuery.reloadArtifacts(awas);
  }
 catch (  Exception ex) {
    OseeLog.log(Activator.class,OseeLevel.SEVERE_POPUP,ex);
  }
  return true;
}",0.9990210474791972
96678,"private static Collection<IAgileFeatureGroup> getSelectedFeatureGroups(Collection<? extends AbstractWorkflowArtifact> awas){
  List<IAgileFeatureGroup> selected=new LinkedList<>();
  if (awas.size() == 1) {
    for (    Artifact featureArt : awas.iterator().next().getRelatedArtifacts(AtsRelationTypes.AgileFeatureToItem_FeatureGroup)) {
      IAgileFeatureGroup featureGroup=AtsClientService.get().getConfigItemFactory().getAgileFeatureGroup(featureArt);
      if (featureGroup.isActive()) {
        selected.add(featureGroup);
      }
    }
  }
  return selected;
}","private static Collection<JaxAgileFeatureGroup> getSelectedFeatureGroups(Collection<? extends AbstractWorkflowArtifact> awas){
  List<JaxAgileFeatureGroup> selected=new LinkedList<>();
  if (awas.size() == 1) {
    for (    Artifact featureArt : awas.iterator().next().getRelatedArtifacts(AtsRelationTypes.AgileFeatureToItem_FeatureGroup)) {
      IAgileFeatureGroup featureGroup=AtsClientService.get().getConfigItemFactory().getAgileFeatureGroup(featureArt);
      if (featureGroup.isActive()) {
        selected.add(createJaxAgileFeatureGroupFromAgileFeatureGroup(featureGroup));
      }
    }
  }
  return selected;
}",0.9317607413647851
96679,"private String removeExtraParagraphs(String fullWordMl,String toInsert,ApplicabilityBlock applicabilityBlock){
  int startInsertIndex=applicabilityBlock.getStartInsertIndex();
  if (!applicabilityBlock.isInTable() && (toInsert.isEmpty() || toInsert.startsWith(WordCoreUtil.WHOLE_END_PARAGRAPH))) {
    String findParagraphStart=fullWordMl.substring(0,startInsertIndex);
    int paragraphStartIndex=findParagraphStart.lastIndexOf(WordCoreUtil.START_PARAGRAPH);
    String beginningText=fullWordMl.substring(paragraphStartIndex,startInsertIndex);
    if (toInsert.isEmpty() && paragraphStartIndex >= 0 && !beginningText.matches(""String_Node_Str"" + WordCoreUtil.BEGINFEATURE + ""String_Node_Str""+ WordCoreUtil.BEGINCONFIG+ ""String_Node_Str""+ WordCoreUtil.ENDCONFIG+ ""String_Node_Str""+ WordCoreUtil.ENDFEATURE+ ""String_Node_Str"")) {
      int endInsertIndex=applicabilityBlock.getEndInsertIndex();
      String findParagraphEnd=fullWordMl.substring(endInsertIndex);
      int paragraphEndIndex=findParagraphEnd.indexOf(WordCoreUtil.END_PARAGRAPH) + endInsertIndex + 6;
      if (paragraphEndIndex >= 0) {
        String endText=fullWordMl.substring(endInsertIndex,paragraphEndIndex);
        if (paragraphEndIndex >= 0 && WordCoreUtil.textOnly(endText).isEmpty() && !endText.matches(""String_Node_Str"" + WordCoreUtil.BEGINFEATURE + ""String_Node_Str""+ WordCoreUtil.BEGINCONFIG+ ""String_Node_Str""+ WordCoreUtil.ENDCONFIG+ ""String_Node_Str""+ WordCoreUtil.ENDFEATURE+ ""String_Node_Str"")) {
          applicabilityBlock.setStartInsertIndex(paragraphStartIndex);
          applicabilityBlock.setStartTextIndex(paragraphStartIndex);
          applicabilityBlock.setEndInsertIndex(paragraphEndIndex);
          applicabilityBlock.setEndTextIndex(paragraphEndIndex);
        }
      }
    }
 else {
      String findParagraphEnd=fullWordMl.substring(startInsertIndex);
      int paragraphEndIndex=findParagraphEnd.indexOf(WordCoreUtil.END_PARAGRAPH) + startInsertIndex + 6;
      if (paragraphStartIndex >= 0 && paragraphEndIndex >= 0 && paragraphEndIndex > paragraphStartIndex) {
        String fullParagraph=fullWordMl.substring(paragraphStartIndex,paragraphEndIndex);
        fullParagraph=fullParagraph.replaceFirst(""String_Node_Str"" + WordCoreUtil.BEGINFEATURE + ""String_Node_Str""+ WordCoreUtil.BEGINCONFIG,""String_Node_Str"");
        if (WordCoreUtil.textOnly(fullParagraph).isEmpty()) {
          toInsert=toInsert.replaceFirst(WordCoreUtil.WHOLE_END_PARAGRAPH,""String_Node_Str"");
          applicabilityBlock.setStartInsertIndex(paragraphStartIndex);
          applicabilityBlock.setStartTextIndex(paragraphEndIndex);
        }
      }
    }
  }
  if (!applicabilityBlock.isInTable() && toInsert.matches(""String_Node_Str"")) {
    int origLength=toInsert.length();
    int lastParaIndex=toInsert.lastIndexOf(WordCoreUtil.START_PARAGRAPH);
    if (lastParaIndex >= 0) {
      toInsert=toInsert.substring(0,lastParaIndex);
      applicabilityBlock.setEndTextIndex(applicabilityBlock.getEndTextIndex() - (origLength - lastParaIndex));
      applicabilityBlock.setEndInsertIndex(applicabilityBlock.getEndInsertIndex() + WordCoreUtil.WHOLE_END_PARAGRAPH.length());
    }
  }
  return toInsert;
}","private String removeExtraParagraphs(String fullWordMl,String toInsert,ApplicabilityBlock applicabilityBlock){
  int startInsertIndex=applicabilityBlock.getStartInsertIndex();
  if (!applicabilityBlock.isInTable() && (toInsert.isEmpty() || toInsert.startsWith(WordCoreUtil.WHOLE_END_PARAGRAPH))) {
    String findParagraphStart=fullWordMl.substring(0,startInsertIndex);
    int paragraphStartIndex=findParagraphStart.lastIndexOf(WordCoreUtil.START_PARAGRAPH);
    String beginningText=fullWordMl.substring(paragraphStartIndex,startInsertIndex);
    if (toInsert.isEmpty() && paragraphStartIndex > 0 && !beginningText.matches(""String_Node_Str"" + WordCoreUtil.BEGINFEATURE + ""String_Node_Str""+ WordCoreUtil.BEGINCONFIG+ ""String_Node_Str""+ WordCoreUtil.ENDCONFIG+ ""String_Node_Str""+ WordCoreUtil.ENDFEATURE+ ""String_Node_Str"")) {
      int endInsertIndex=applicabilityBlock.getEndInsertIndex();
      String findParagraphEnd=fullWordMl.substring(endInsertIndex);
      int paragraphEndIndex=findParagraphEnd.indexOf(WordCoreUtil.END_PARAGRAPH) + endInsertIndex + 6;
      if (paragraphEndIndex >= 0) {
        String endText=fullWordMl.substring(endInsertIndex,paragraphEndIndex);
        if (paragraphEndIndex >= 0 && WordCoreUtil.textOnly(endText).isEmpty() && !endText.matches(""String_Node_Str"" + WordCoreUtil.BEGINFEATURE + ""String_Node_Str""+ WordCoreUtil.BEGINCONFIG+ ""String_Node_Str""+ WordCoreUtil.ENDCONFIG+ ""String_Node_Str""+ WordCoreUtil.ENDFEATURE+ ""String_Node_Str"")) {
          applicabilityBlock.setStartInsertIndex(paragraphStartIndex);
          applicabilityBlock.setStartTextIndex(paragraphStartIndex);
          applicabilityBlock.setEndInsertIndex(paragraphEndIndex);
          applicabilityBlock.setEndTextIndex(paragraphEndIndex);
        }
      }
    }
 else {
      String findParagraphEnd=fullWordMl.substring(startInsertIndex);
      int paragraphEndIndex=findParagraphEnd.indexOf(WordCoreUtil.END_PARAGRAPH) + startInsertIndex + 6;
      if (paragraphStartIndex >= 0 && paragraphEndIndex >= 0 && paragraphEndIndex > paragraphStartIndex) {
        String fullParagraph=fullWordMl.substring(paragraphStartIndex,paragraphEndIndex);
        fullParagraph=fullParagraph.replaceFirst(""String_Node_Str"" + WordCoreUtil.BEGINFEATURE + ""String_Node_Str""+ WordCoreUtil.BEGINCONFIG,""String_Node_Str"");
        if (WordCoreUtil.textOnly(fullParagraph).isEmpty()) {
          toInsert=toInsert.replaceFirst(WordCoreUtil.WHOLE_END_PARAGRAPH,""String_Node_Str"");
          applicabilityBlock.setStartInsertIndex(paragraphStartIndex);
          applicabilityBlock.setStartTextIndex(paragraphEndIndex);
        }
      }
    }
  }
  if (!applicabilityBlock.isInTable() && toInsert.matches(""String_Node_Str"")) {
    int origLength=toInsert.length();
    int lastParaIndex=toInsert.lastIndexOf(WordCoreUtil.START_PARAGRAPH);
    if (lastParaIndex >= 0) {
      toInsert=toInsert.substring(0,lastParaIndex);
      applicabilityBlock.setEndTextIndex(applicabilityBlock.getEndTextIndex() - (origLength - lastParaIndex));
      applicabilityBlock.setEndInsertIndex(applicabilityBlock.getEndInsertIndex() + WordCoreUtil.WHOLE_END_PARAGRAPH.length());
    }
  }
  return toInsert;
}",0.999842841427
96680,"private ApplicabilityBlock getFullApplicabilityBlock(Matcher matcher,String toReturn){
  if (applicBlocks.isEmpty()) {
    logger.error(""String_Node_Str"");
    return null;
  }
  ApplicabilityBlock applic=applicBlocks.pop();
  String optionalEndBracket=null;
  boolean isValidBracket=false;
  if (applic.getType().equals(ApplicabilityType.Configuration)) {
    int endBracketGroup=60;
    optionalEndBracket=matcher.group(endBracketGroup);
    isValidBracket=optionalEndBracket == null ? false : isValidConfigurationBracket(optionalEndBracket);
  }
 else {
    int endBracketGroup=23;
    optionalEndBracket=matcher.group(endBracketGroup);
    isValidBracket=optionalEndBracket == null ? false : isValidFeatureBracket(optionalEndBracket);
  }
  if (optionalEndBracket != null && !isValidBracket) {
    int newEndInsertIndex=matcher.end() - optionalEndBracket.length();
    applic.setEndInsertIndex(newEndInsertIndex);
  }
 else {
    applic.setEndInsertIndex(matcher.end());
  }
  applic.setEndTextIndex(matcher.start());
  String insideText=toReturn.substring(applic.getStartTextIndex(),applic.getEndTextIndex());
  applic.setFullText(insideText);
  if (!applic.getFullText().contains(WordCoreUtil.TABLE) && applic.getFullText().contains(WordCoreUtil.TABLE_CELL)) {
    String findStartOfRow=toReturn.substring(0,applic.getStartInsertIndex());
    int startRowIndex=findStartOfRow.lastIndexOf(WordCoreUtil.START_TABLE_ROW);
    if (startRowIndex != -1) {
      String findEndOfRow=toReturn.substring(matcher.end());
      int endRowIndex=findEndOfRow.indexOf(WordCoreUtil.END_TABLE_ROW);
      if (endRowIndex != -1) {
        endRowIndex=endRowIndex + matcher.end() + 7;
        String fullText=toReturn.substring(startRowIndex,endRowIndex);
        applic.setIsInTable(true);
        applic.setStartInsertIndex(startRowIndex);
        applic.setEndInsertIndex(startRowIndex + fullText.length());
        fullText=fullText.replaceFirst(""String_Node_Str"" + WordCoreUtil.ENDFEATURE + ""String_Node_Str""+ WordCoreUtil.ENDCONFIG+ ""String_Node_Str"",""String_Node_Str"");
        fullText=fullText.replaceFirst(""String_Node_Str"" + WordCoreUtil.BEGINFEATURE + ""String_Node_Str""+ WordCoreUtil.BEGINCONFIG+ ""String_Node_Str"",""String_Node_Str"");
        applic.setFullText(fullText);
      }
    }
  }
  return applic;
}","private ApplicabilityBlock getFullApplicabilityBlock(Matcher matcher,String toReturn){
  if (applicBlocks.isEmpty()) {
    logger.error(""String_Node_Str"");
    return null;
  }
  ApplicabilityBlock applic=applicBlocks.pop();
  String optionalEndBracket=null;
  boolean isValidBracket=false;
  if (applic.getType().equals(ApplicabilityType.Configuration)) {
    int endBracketGroup=65;
    optionalEndBracket=matcher.group(endBracketGroup);
    isValidBracket=optionalEndBracket == null ? false : isValidConfigurationBracket(optionalEndBracket);
  }
 else {
    int endBracketGroup=23;
    optionalEndBracket=matcher.group(endBracketGroup);
    isValidBracket=optionalEndBracket == null ? false : isValidFeatureBracket(optionalEndBracket);
  }
  if (optionalEndBracket != null && !isValidBracket) {
    int newEndInsertIndex=matcher.end() - optionalEndBracket.length();
    applic.setEndInsertIndex(newEndInsertIndex);
  }
 else {
    applic.setEndInsertIndex(matcher.end());
  }
  applic.setEndTextIndex(matcher.start());
  String insideText=toReturn.substring(applic.getStartTextIndex(),applic.getEndTextIndex());
  applic.setFullText(insideText);
  if (!applic.getFullText().contains(WordCoreUtil.TABLE) && applic.getFullText().contains(WordCoreUtil.TABLE_CELL)) {
    String findStartOfRow=toReturn.substring(0,applic.getStartInsertIndex());
    int startRowIndex=findStartOfRow.lastIndexOf(WordCoreUtil.START_TABLE_ROW);
    if (startRowIndex != -1) {
      String findEndOfRow=toReturn.substring(matcher.end());
      int endRowIndex=findEndOfRow.indexOf(WordCoreUtil.END_TABLE_ROW);
      if (endRowIndex != -1) {
        endRowIndex=endRowIndex + matcher.end() + 7;
        String fullText=toReturn.substring(startRowIndex,endRowIndex);
        applic.setIsInTable(true);
        applic.setStartInsertIndex(startRowIndex);
        applic.setEndInsertIndex(startRowIndex + fullText.length());
        fullText=fullText.replaceFirst(""String_Node_Str"" + WordCoreUtil.ENDFEATURE + ""String_Node_Str""+ WordCoreUtil.ENDCONFIG+ ""String_Node_Str"",""String_Node_Str"");
        fullText=fullText.replaceFirst(""String_Node_Str"" + WordCoreUtil.BEGINFEATURE + ""String_Node_Str""+ WordCoreUtil.BEGINCONFIG+ ""String_Node_Str"",""String_Node_Str"");
        applic.setFullText(fullText);
      }
    }
  }
  return applic;
}",0.9995669120831528
96681,"@Override public void runOperation(VariableMap variableMap,IProgressMonitor monitor) throws Exception {
  populateTemplateList();
  boolean useArtifactNameInLinks=variableMap.getBoolean(USE_ARTIFACT_NAMES);
  boolean useParagraphNumbersInLinks=variableMap.getBoolean(USE_PARAGRAPH_NUMBERS);
  variableMap.getBoolean(INCLUDE_ARTIFACT_UUIDS);
  if (!useParagraphNumbersInLinks && !useArtifactNameInLinks) {
    throw new OseeArgumentException(""String_Node_Str"");
  }
  LinkType linkType;
  if (useArtifactNameInLinks && useParagraphNumbersInLinks) {
    linkType=LinkType.INTERNAL_DOC_REFERENCE_USE_PARAGRAPH_NUMBER_AND_NAME;
  }
 else   if (useParagraphNumbersInLinks) {
    linkType=LinkType.INTERNAL_DOC_REFERENCE_USE_PARAGRAPH_NUMBER;
  }
 else {
    linkType=LinkType.INTERNAL_DOC_REFERENCE_USE_NAME;
  }
  Artifact master=getTemplate(variableMap.getString(MASTER_TEMPLATE));
  if (master == null) {
    throw new OseeArgumentException(""String_Node_Str"");
  }
  Artifact slave=getTemplate(variableMap.getString(SLAVE_TEMPLATE));
  List<Artifact> artifacts=null;
  try {
    if (orcsQueryWidget.getText().isEmpty()) {
      artifacts=variableMap.getArtifacts(IS_ARTIFACTS);
    }
 else {
      artifacts=getArtifactsFromOrcsQuery();
    }
  }
 catch (  NullPointerException e) {
    throw new OseeArgumentException(""String_Node_Str"");
  }
  if (artifacts != null && !artifacts.isEmpty()) {
    branch=artifacts.get(0).getBranch();
  }
 else {
    throw new OseeArgumentException(""String_Node_Str"");
  }
  if (branch == null) {
    throw new OseeArgumentException(""String_Node_Str"");
  }
  Object view=variableMap.getValue(VIEW);
  ArtifactId viewId=ArtifactId.SENTINEL;
  for (  Entry<Long,String> entry : branchViews.entrySet()) {
    if (entry.getValue().equals(view)) {
      viewId=ArtifactId.valueOf(entry.getKey());
    }
  }
  WordTemplateRenderer renderer=new WordTemplateRenderer();
  SkynetTransaction transaction=TransactionManager.createTransaction(branch,""String_Node_Str"");
  Object[] options=new Object[]{""String_Node_Str"",branch,""String_Node_Str"",variableMap.getBranch(WAS_BRANCH),""String_Node_Str"",variableMap.getValue(PUBLISH_AS_DIFF),""String_Node_Str"",variableMap.getValue(INCLUDE_ARTIFACT_UUIDS),""String_Node_Str"",linkType,WordTemplateRenderer.UPDATE_PARAGRAPH_NUMBER_OPTION,variableMap.getBoolean(UPDATE_PARAGRAPH_NUMBERS),""String_Node_Str"",variableMap.getArtifactTypes(EXCLUDE_ARTIFACT_TYPES),ITemplateRenderer.TRANSACTION_OPTION,transaction,IRenderer.SKIP_ERRORS,true,""String_Node_Str"",true,""String_Node_Str"",true,""String_Node_Str"",true,""String_Node_Str"",monitor,ITemplateRenderer.USE_TEMPLATE_ONCE,true,WordTemplateRenderer.FIRST_TIME,true,""String_Node_Str"",viewId};
  Boolean isDiff=(Boolean)variableMap.getValue(PUBLISH_AS_DIFF);
  int toProcessSize=0;
  if (isDiff) {
    for (    Artifact art : artifacts) {
      toProcessSize+=art.getDescendants().size();
    }
  }
  final int totalSize=toProcessSize;
  final AtomicReference<Boolean> result=new AtomicReference<>();
  final int maxArtsForQuickDiff=900;
  Display.getDefault().syncExec(new Runnable(){
    @Override public void run(){
      double secPerArt=2;
      double minutes=(totalSize * secPerArt) / 60;
      if (isDiff && totalSize > maxArtsForQuickDiff && !MessageDialog.openConfirm(Display.getDefault().getActiveShell(),""String_Node_Str"",""String_Node_Str"" + totalSize + ""String_Node_Str""+ ""String_Node_Str""+ minutes+ ""String_Node_Str"")) {
        result.set(false);
      }
 else {
        result.set(true);
      }
    }
  }
);
  if (result.get()) {
    renderer.publish(master,slave,artifacts,options);
    transaction.execute();
    monitor.done();
  }
}","@Override public void runOperation(VariableMap variableMap,IProgressMonitor monitor) throws Exception {
  populateTemplateList();
  boolean useArtifactNameInLinks=variableMap.getBoolean(USE_ARTIFACT_NAMES);
  boolean useParagraphNumbersInLinks=variableMap.getBoolean(USE_PARAGRAPH_NUMBERS);
  variableMap.getBoolean(INCLUDE_ARTIFACT_UUIDS);
  if (!useParagraphNumbersInLinks && !useArtifactNameInLinks) {
    throw new OseeArgumentException(""String_Node_Str"");
  }
  LinkType linkType;
  if (useArtifactNameInLinks && useParagraphNumbersInLinks) {
    linkType=LinkType.INTERNAL_DOC_REFERENCE_USE_PARAGRAPH_NUMBER_AND_NAME;
  }
 else   if (useParagraphNumbersInLinks) {
    linkType=LinkType.INTERNAL_DOC_REFERENCE_USE_PARAGRAPH_NUMBER;
  }
 else {
    linkType=LinkType.INTERNAL_DOC_REFERENCE_USE_NAME;
  }
  Artifact master=getTemplate(variableMap.getString(MASTER_TEMPLATE));
  if (master == null) {
    throw new OseeArgumentException(""String_Node_Str"");
  }
  Artifact slave=getTemplate(variableMap.getString(SLAVE_TEMPLATE));
  List<Artifact> artifacts=null;
  try {
    if (orcsQueryWidget.getText().isEmpty()) {
      artifacts=variableMap.getArtifacts(IS_ARTIFACTS);
    }
 else {
      artifacts=getArtifactsFromOrcsQuery();
    }
  }
 catch (  NullPointerException e) {
    throw new OseeArgumentException(""String_Node_Str"");
  }
  if (artifacts != null && !artifacts.isEmpty()) {
    branch=artifacts.get(0).getBranch();
  }
 else {
    throw new OseeArgumentException(""String_Node_Str"");
  }
  if (branch == null) {
    throw new OseeArgumentException(""String_Node_Str"");
  }
  Object view=variableMap.getValue(VIEW);
  ArtifactId viewId=ArtifactId.SENTINEL;
  if (branchViews != null && !branchViews.isEmpty()) {
    for (    Entry<Long,String> entry : branchViews.entrySet()) {
      if (entry.getValue().equals(view)) {
        viewId=ArtifactId.valueOf(entry.getKey());
      }
    }
  }
  WordTemplateRenderer renderer=new WordTemplateRenderer();
  SkynetTransaction transaction=TransactionManager.createTransaction(branch,""String_Node_Str"");
  Object[] options=new Object[]{""String_Node_Str"",branch,""String_Node_Str"",variableMap.getBranch(WAS_BRANCH),""String_Node_Str"",variableMap.getValue(PUBLISH_AS_DIFF),""String_Node_Str"",variableMap.getValue(INCLUDE_ARTIFACT_UUIDS),""String_Node_Str"",linkType,WordTemplateRenderer.UPDATE_PARAGRAPH_NUMBER_OPTION,variableMap.getBoolean(UPDATE_PARAGRAPH_NUMBERS),""String_Node_Str"",variableMap.getArtifactTypes(EXCLUDE_ARTIFACT_TYPES),ITemplateRenderer.TRANSACTION_OPTION,transaction,IRenderer.SKIP_ERRORS,true,""String_Node_Str"",true,""String_Node_Str"",true,""String_Node_Str"",true,""String_Node_Str"",monitor,ITemplateRenderer.USE_TEMPLATE_ONCE,true,WordTemplateRenderer.FIRST_TIME,true,""String_Node_Str"",viewId};
  Boolean isDiff=(Boolean)variableMap.getValue(PUBLISH_AS_DIFF);
  int toProcessSize=0;
  if (isDiff) {
    for (    Artifact art : artifacts) {
      toProcessSize+=art.getDescendants().size();
    }
  }
  final int totalSize=toProcessSize;
  final AtomicReference<Boolean> result=new AtomicReference<>();
  final int maxArtsForQuickDiff=900;
  Display.getDefault().syncExec(new Runnable(){
    @Override public void run(){
      double secPerArt=2;
      double minutes=(totalSize * secPerArt) / 60;
      if (isDiff && totalSize > maxArtsForQuickDiff && !MessageDialog.openConfirm(Display.getDefault().getActiveShell(),""String_Node_Str"",""String_Node_Str"" + totalSize + ""String_Node_Str""+ ""String_Node_Str""+ minutes+ ""String_Node_Str"")) {
        result.set(false);
      }
 else {
        result.set(true);
      }
    }
  }
);
  if (result.get()) {
    renderer.publish(master,slave,artifacts,options);
    transaction.execute();
    monitor.done();
  }
}",0.9890169491525423
96682,"/** 
 * Return current date or null if not set
 * @return date or null if not set
 */
@Override public Date getValue() throws OseeCoreException {
  Object value=getAttributeDataProvider().getValue();
  return new Date((Long)value);
}","@Override public Date getValue() throws OseeCoreException {
  Object value=getAttributeDataProvider().getValue();
  return new Date((Long)value);
}",0.7736842105263158
96683,"/** 
 * Return date in format given by pattern or """" if not set
 * @param pattern DateAttribute.MMDDYY, etc...
 * @return formated date
 */
public String getAsFormattedString(DateFormat dateFormat) throws OseeCoreException {
  Date date=getValue();
  return date != null ? dateFormat.format(date) : ""String_Node_Str"";
}","/** 
 * Return date in format given by pattern or """" if not set
 * @param pattern DateAttribute.MMDDYY, etc...
 * @return formated date
 */
public String getAsFormattedString(DateFormat dateFormat) throws OseeCoreException {
  return dateFormat.format(getValue());
}",0.8205128205128205
96684,"/** 
 * Sets date
 * @param value value or null to clear
 */
@Override public boolean subClassSetValue(Date value) throws OseeCoreException {
  return getAttributeDataProvider().setValue(value != null ? value.getTime() : ""String_Node_Str"");
}","@Override public boolean subClassSetValue(Date value) throws OseeCoreException {
  if (value == null) {
    OseeLog.log(this.getClass(),Level.SEVERE,String.format(""String_Node_Str"",getAttributeType(),getGammaId()));
    return false;
  }
  return getAttributeDataProvider().setValue(value.getTime());
}",0.3897058823529412
96685,"@Override protected void doWork(IProgressMonitor monitor) throws OseeCoreException {
  logf(""String_Node_Str"",getClass().getSimpleName(),workflows.size());
  sortWorkflows();
  Set<String> skippedTypes=new HashSet<String>();
  CompareDataCollector collector=new CompareDataCollector(){
    @Override public void onCompare(    CompareData data) throws OseeCoreException {
      String filePath=data.getOutputPath();
      String modifiedPath=filePath.substring(0,filePath.lastIndexOf(File.separator));
      try {
        if (resultFolder.toString().isEmpty()) {
          resultFolder.append(modifiedPath);
        }
      }
 catch (      IOException ex) {
        OseeCoreException.wrapAndThrow(ex);
      }
    }
  }
;
  for (  TeamWorkFlowArtifact workflow : workflows) {
    Set<ArtifactId> artIds=new HashSet<>();
    Collection<Change> changes=computeChanges(workflow,monitor,artIds);
    if (!changes.isEmpty() && changes.size() < 4000) {
      logf(""String_Node_Str"",workflow.toString(),workflow.getAtsId());
      String id=workflow.getSoleAttributeValueAsString(AtsAttributeTypes.LegacyPcrId,workflow.getAtsId());
      String prefix=""String_Node_Str"" + id;
      if (writeChangeReports) {
        Collection<ArtifactDelta> artifactDeltas=ChangeManager.getCompareArtifacts(changes);
        Iterator<ArtifactDelta> it=artifactDeltas.iterator();
        while (it.hasNext()) {
          ArtifactDelta next=it.next();
          Artifact endArtifact=next.getEndArtifact();
          ArtifactType artifactType=endArtifact.getArtifactType();
          if (artifactType.inheritsFrom(DISALLOW_TYPES) || !artifactType.inheritsFrom(ALLOW_TYPES)) {
            it.remove();
            artIds.remove(endArtifact.getArtId());
            logf(""String_Node_Str"" + endArtifact.getName() + ""String_Node_Str""+ endArtifact.getArtifactTypeName()+ ""String_Node_Str""+ endArtifact.getBranch().getIdString()+ ""String_Node_Str""+ endArtifact.getArtId()+ ""String_Node_Str"");
            skippedTypes.add(endArtifact.getArtifactTypeName());
          }
        }
        if (artifactDeltas.isEmpty()) {
          logf(""String_Node_Str"",id);
          continue;
        }
        RendererManager.diff(collector,artifactDeltas,prefix,NO_DISPLAY,true,SKIP_DIALOGS,true,OVERRIDE_DATA_RIGHTS_OPTION,overrideDataRightsClassification);
      }
      String artIdsAsString=org.eclipse.osee.framework.jdk.core.util.Collections.toString(""String_Node_Str"",artIds);
      try {
        if (resultFolder.toString().isEmpty()) {
          IFolder folder=OseeData.getFolder(""String_Node_Str"");
          File idsFolder=new File(folder.getLocationURI());
          resultFolder.append(idsFolder.getAbsolutePath());
        }
        Lib.writeStringToFile(artIdsAsString,new File(resultFolder + prefix + ""String_Node_Str""));
      }
 catch (      IOException ex) {
        OseeCoreException.wrapAndThrow(ex);
      }
    }
    monitor.worked(calculateWork(0.50));
  }
  logf(""String_Node_Str"");
  for (  String skipped : skippedTypes) {
    logf(skipped);
  }
}","@Override protected void doWork(IProgressMonitor monitor) throws OseeCoreException {
  logf(""String_Node_Str"",getClass().getSimpleName(),workflows.size());
  sortWorkflows();
  Set<String> skippedTypes=new HashSet<String>();
  CompareDataCollector collector=new CompareDataCollector(){
    @Override public void onCompare(    CompareData data) throws OseeCoreException {
      String filePath=data.getOutputPath();
      String modifiedPath=filePath.substring(0,filePath.lastIndexOf(File.separator));
      try {
        if (resultFolder.toString().isEmpty()) {
          resultFolder.append(modifiedPath);
        }
      }
 catch (      IOException ex) {
        OseeCoreException.wrapAndThrow(ex);
      }
    }
  }
;
  for (  TeamWorkFlowArtifact workflow : workflows) {
    Set<ArtifactId> artIds=new HashSet<>();
    Collection<Change> changes=computeChanges(workflow,monitor,artIds);
    if (!changes.isEmpty() && changes.size() < 4000) {
      logf(""String_Node_Str"",workflow.toString(),workflow.getAtsId());
      String id=workflow.getSoleAttributeValueAsString(AtsAttributeTypes.LegacyPcrId,workflow.getAtsId());
      String prefix=""String_Node_Str"" + id;
      if (writeChangeReports) {
        Collection<ArtifactDelta> artifactDeltas=ChangeManager.getCompareArtifacts(changes);
        Iterator<ArtifactDelta> it=artifactDeltas.iterator();
        while (it.hasNext()) {
          ArtifactDelta next=it.next();
          Artifact endArtifact=next.getEndArtifact();
          ArtifactType artifactType=endArtifact.getArtifactType();
          if (artifactType.inheritsFrom(DISALLOW_TYPES) || !artifactType.inheritsFrom(ALLOW_TYPES)) {
            it.remove();
            artIds.remove(endArtifact.getArtId());
            logf(""String_Node_Str"" + endArtifact.getName().replaceAll(""String_Node_Str"",""String_Node_Str"") + ""String_Node_Str""+ endArtifact.getArtifactTypeName()+ ""String_Node_Str""+ endArtifact.getBranch().getIdString()+ ""String_Node_Str""+ endArtifact.getArtId()+ ""String_Node_Str"");
            skippedTypes.add(endArtifact.getArtifactTypeName());
          }
        }
        if (artifactDeltas.isEmpty()) {
          logf(""String_Node_Str"",id);
          continue;
        }
        RendererManager.diff(collector,artifactDeltas,prefix,NO_DISPLAY,true,SKIP_DIALOGS,true,OVERRIDE_DATA_RIGHTS_OPTION,overrideDataRightsClassification);
      }
      String artIdsAsString=org.eclipse.osee.framework.jdk.core.util.Collections.toString(""String_Node_Str"",artIds);
      try {
        if (resultFolder.toString().isEmpty()) {
          IFolder folder=OseeData.getFolder(""String_Node_Str"");
          File idsFolder=new File(folder.getLocationURI());
          resultFolder.append(idsFolder.getAbsolutePath());
        }
        Lib.writeStringToFile(artIdsAsString,new File(resultFolder + prefix + ""String_Node_Str""));
      }
 catch (      IOException ex) {
        OseeCoreException.wrapAndThrow(ex);
      }
    }
    monitor.worked(calculateWork(0.50));
  }
  logf(""String_Node_Str"");
  for (  String skipped : skippedTypes) {
    logf(skipped);
  }
}",0.99213887979037
96686,"private String getLinkId(LinkType destLinkType,ArtifactReadable artifact,TransactionId tx,String sessionId,String oseeLink) throws OseeCoreException {
  String toReturn;
  if (destLinkType == LinkType.OSEE_SERVER_LINK) {
    toReturn=escapeXml(oseeLink);
  }
 else {
    toReturn=artifact.getGuid();
  }
  return toReturn;
}","private String getLinkId(LinkType destLinkType,ArtifactReadable artifact,TransactionId tx,String sessionId,String oseeLink) throws OseeCoreException {
  String toReturn;
  if (destLinkType == LinkType.OSEE_SERVER_LINK) {
    toReturn=escapeXml(oseeLink);
    toReturn=toReturn.replaceAll(""String_Node_Str"",artifact.getGuid());
  }
 else {
    toReturn=artifact.getGuid();
  }
  return toReturn;
}",0.9
96687,"@Override public Map<String,List<String>> getBranchViewFeatureValues(BranchId branch,ArtifactId viewId){
  Map<String,List<String>> toReturn=new TreeMap<>(String.CASE_INSENSITIVE_ORDER);
  List<ApplicabilityToken> result=getViewApplicabilityTokens(viewId,branch);
  for (  ApplicabilityToken app : result) {
    if (!app.getName().equalsIgnoreCase(""String_Node_Str"")) {
      String[] values=app.getName().split(""String_Node_Str"");
      if (values.length <= 2) {
        String name=values[0].trim();
        String value=values[1].trim();
        if (toReturn.containsKey(name)) {
          List<String> list=new ArrayList<>();
          list.addAll(toReturn.get(name));
          list.add(value);
          toReturn.put(name,list);
        }
 else {
          toReturn.put(name,Arrays.asList(value));
        }
      }
    }
  }
  return toReturn;
}","@Override public Map<String,List<String>> getBranchViewFeatureValues(BranchId branch,ArtifactId viewId){
  Map<String,List<String>> toReturn=new TreeMap<>(String.CASE_INSENSITIVE_ORDER);
  List<ApplicabilityToken> result=getViewApplicabilityTokens(viewId,branch);
  for (  ApplicabilityToken app : result) {
    if (!app.getName().equalsIgnoreCase(""String_Node_Str"") && !app.getName().contains(""String_Node_Str"") && !app.getName().contains(""String_Node_Str"")) {
      String[] values=app.getName().split(""String_Node_Str"");
      if (values.length <= 2) {
        String name=values[0].trim();
        String value=values[1].trim();
        if (toReturn.containsKey(name)) {
          List<String> list=new ArrayList<>();
          list.addAll(toReturn.get(name));
          list.add(value);
          toReturn.put(name,list);
        }
 else {
          toReturn.put(name,Arrays.asList(value));
        }
      }
    }
  }
  return toReturn;
}",0.9487750556792872
96688,"private DispoItemData buildNewItem(DispoItemData destItem,DispoItem sourceItem,boolean isCoverageCopy,OperationReport report,boolean isSameDiscrepancies){
  boolean isChangesMade=false;
  DispoItemData newItem=initNewItem(destItem,sourceItem);
  List<DispoAnnotationData> newAnnotations=newItem.getAnnotationsList();
  List<DispoAnnotationData> sourceAnnotations=sourceItem.getAnnotationsList();
  Set<String> destDefaultAnntationLocations=getDefaultAnnotations(newItem);
  Map<String,Integer> placeHolderAnnotationLocations=getPlaceHolderAnnotations(newItem);
  List<String> destDiscrepanciesTextOnly=discrepanciesTextOnly(destItem.getDiscrepanciesList());
  for (  DispoAnnotationData sourceAnnotation : sourceAnnotations) {
    String sourceLocation=sourceAnnotation.getLocationRefs();
    if (DispoUtil.isDefaultAnotation(sourceAnnotation) || !Strings.isValid(sourceAnnotation.getResolutionType())) {
      if (!destDefaultAnntationLocations.contains(sourceLocation)) {
        report.addEntry(destItem.getName(),String.format(""String_Node_Str"",sourceAnnotation.getLocationRefs()),IGNORE);
      }
    }
 else     if (destDefaultAnntationLocations.contains(sourceLocation)) {
      report.addEntry(destItem.getName(),String.format(""String_Node_Str"",sourceAnnotation.getLocationRefs()),IGNORE);
    }
 else     if (newAnnotations.toString().contains(sourceAnnotation.getGuid())) {
      report.addEntry(destItem.getName(),String.format(""String_Node_Str"",sourceAnnotation.getLocationRefs(),sourceAnnotation.getGuid()),IGNORE);
    }
 else {
      if (isSameDiscrepancies && isCoveredDiscrepanciesExistInDest(destDiscrepanciesTextOnly,sourceItem,sourceAnnotation,report)) {
        DispoAnnotationData newAnnotation=sourceAnnotation;
        if (destDefaultAnntationLocations.contains(sourceLocation)) {
          String locationRefs=sourceAnnotation.getLocationRefs();
          Integer locationRefAsInt=Integer.valueOf(locationRefs);
          if (locationRefAsInt > 0) {
            newAnnotation.setLocationRefs(String.valueOf(locationRefAsInt * -1));
          }
          report.addEntry(destItem.getName(),String.format(""String_Node_Str"",locationRefs),WARNING);
        }
        connector.connectAnnotation(newAnnotation,newItem.getDiscrepanciesList());
        isChangesMade=true;
        int nextIndex;
        if (placeHolderAnnotationLocations.containsKey(sourceLocation)) {
          nextIndex=placeHolderAnnotationLocations.get(sourceLocation);
          newAnnotation.setIndex(nextIndex);
          newAnnotations.set(nextIndex,newAnnotation);
        }
 else {
          nextIndex=newAnnotations.size();
          newAnnotation.setIndex(nextIndex);
          newAnnotations.add(nextIndex,newAnnotation);
        }
      }
    }
  }
  if (isChangesMade) {
    newItem.setAnnotationsList(newAnnotations);
    String newStatus=connector.getItemStatus(newItem);
    newItem.setStatus(newStatus);
  }
 else   if (!isCoverageCopy) {
    newItem=destItem;
    newItem.setGuid(sourceItem.getGuid());
  }
 else {
    report.addEntry(destItem.getName(),""String_Node_Str"",IGNORE);
    newItem=null;
  }
  return newItem;
}","private DispoItemData buildNewItem(DispoItemData destItem,DispoItem sourceItem,boolean isCoverageCopy,OperationReport report,boolean isSameDiscrepancies){
  boolean isChangesMade=false;
  DispoItemData newItem=initNewItem(destItem,sourceItem);
  List<DispoAnnotationData> newAnnotations=newItem.getAnnotationsList();
  List<DispoAnnotationData> sourceAnnotations=sourceItem.getAnnotationsList();
  Set<String> destDefaultAnntationLocations=getDefaultAnnotations(newItem);
  Map<String,Integer> nonDefaultAnnotationLocations=getNonDefaultAnnotations(newItem);
  List<String> destDiscrepanciesTextOnly=discrepanciesTextOnly(destItem.getDiscrepanciesList());
  for (  DispoAnnotationData sourceAnnotation : sourceAnnotations) {
    String sourceLocation=sourceAnnotation.getLocationRefs();
    if (DispoUtil.isDefaultAnotation(sourceAnnotation) || !Strings.isValid(sourceAnnotation.getResolutionType())) {
      if (!destDefaultAnntationLocations.contains(sourceLocation)) {
        report.addEntry(destItem.getName(),String.format(""String_Node_Str"",sourceAnnotation.getLocationRefs()),IGNORE);
      }
    }
 else     if (destDefaultAnntationLocations.contains(sourceLocation)) {
      report.addEntry(destItem.getName(),String.format(""String_Node_Str"",sourceAnnotation.getLocationRefs()),IGNORE);
    }
 else     if (newAnnotations.toString().contains(sourceAnnotation.getGuid())) {
      report.addEntry(destItem.getName(),String.format(""String_Node_Str"",sourceAnnotation.getLocationRefs(),sourceAnnotation.getGuid()),IGNORE);
    }
 else {
      if (isSameDiscrepancies && isCoveredDiscrepanciesExistInDest(destDiscrepanciesTextOnly,sourceItem,sourceAnnotation,report)) {
        DispoAnnotationData newAnnotation=sourceAnnotation;
        if (destDefaultAnntationLocations.contains(sourceLocation)) {
          String locationRefs=sourceAnnotation.getLocationRefs();
          Integer locationRefAsInt=Integer.valueOf(locationRefs);
          if (locationRefAsInt > 0) {
            newAnnotation.setLocationRefs(String.valueOf(locationRefAsInt * -1));
          }
          report.addEntry(destItem.getName(),String.format(""String_Node_Str"",locationRefs),WARNING);
        }
        connector.connectAnnotation(newAnnotation,newItem.getDiscrepanciesList());
        isChangesMade=true;
        int nextIndex;
        if (nonDefaultAnnotationLocations.containsKey(sourceLocation)) {
          nextIndex=nonDefaultAnnotationLocations.get(sourceLocation);
          newAnnotation.setIndex(nextIndex);
          newAnnotations.set(nextIndex,newAnnotation);
        }
 else {
          nextIndex=newAnnotations.size();
          newAnnotation.setIndex(nextIndex);
          newAnnotations.add(nextIndex,newAnnotation);
        }
      }
    }
  }
  if (isChangesMade) {
    newItem.setAnnotationsList(newAnnotations);
    String newStatus=connector.getItemStatus(newItem);
    newItem.setStatus(newStatus);
  }
 else   if (!isCoverageCopy) {
    newItem=destItem;
    newItem.setGuid(sourceItem.getGuid());
  }
 else {
    report.addEntry(destItem.getName(),""String_Node_Str"",IGNORE);
    newItem=null;
  }
  return newItem;
}",0.9865642994241842
96689,"private String removeExtraParagraphs(String fullWordMl,String toInsert,ApplicabilityBlock applicabilityBlock){
  int startInsertIndex=applicabilityBlock.getStartInsertIndex();
  if (!applicabilityBlock.isInTable() && (toInsert.isEmpty() || toInsert.startsWith(WordCoreUtil.WHOLE_END_PARAGRAPH))) {
    String findParagraphStart=fullWordMl.substring(0,startInsertIndex);
    int paragraphStartIndex=findParagraphStart.lastIndexOf(WordCoreUtil.START_PARAGRAPH);
    String beginningText=fullWordMl.substring(paragraphStartIndex,startInsertIndex);
    if (toInsert.isEmpty() && paragraphStartIndex >= 0 && !beginningText.matches(""String_Node_Str"" + WordCoreUtil.BEGINFEATURE + ""String_Node_Str""+ WordCoreUtil.BEGINCONFIG+ ""String_Node_Str""+ WordCoreUtil.ENDCONFIG+ ""String_Node_Str""+ WordCoreUtil.ENDFEATURE+ ""String_Node_Str"")) {
      int endInsertIndex=applicabilityBlock.getEndInsertIndex();
      String findParagraphEnd=fullWordMl.substring(endInsertIndex);
      int paragraphEndIndex=findParagraphEnd.indexOf(WordCoreUtil.END_PARAGRAPH) + endInsertIndex + 6;
      if (paragraphEndIndex >= 0) {
        applicabilityBlock.setStartInsertIndex(paragraphStartIndex);
        applicabilityBlock.setStartTextIndex(paragraphStartIndex);
        applicabilityBlock.setEndInsertIndex(paragraphEndIndex);
        applicabilityBlock.setEndTextIndex(paragraphEndIndex);
      }
      String endText=fullWordMl.substring(endInsertIndex,paragraphEndIndex);
      if (paragraphEndIndex >= 0 && !endText.matches(""String_Node_Str"" + WordCoreUtil.BEGINFEATURE + ""String_Node_Str""+ WordCoreUtil.BEGINCONFIG+ ""String_Node_Str""+ WordCoreUtil.ENDCONFIG+ ""String_Node_Str""+ WordCoreUtil.ENDFEATURE+ ""String_Node_Str"")) {
        applicabilityBlock.setStartInsertIndex(paragraphStartIndex);
        applicabilityBlock.setStartTextIndex(paragraphStartIndex);
        applicabilityBlock.setEndInsertIndex(paragraphEndIndex);
        applicabilityBlock.setEndTextIndex(paragraphEndIndex);
      }
    }
 else {
      String findParagraphEnd=fullWordMl.substring(startInsertIndex);
      int paragraphEndIndex=findParagraphEnd.indexOf(WordCoreUtil.END_PARAGRAPH) + startInsertIndex + 6;
      if (paragraphStartIndex >= 0 && paragraphEndIndex >= 0 && paragraphEndIndex > paragraphStartIndex) {
        String fullParagraph=fullWordMl.substring(paragraphStartIndex,paragraphEndIndex);
        fullParagraph=fullParagraph.replaceFirst(""String_Node_Str"" + WordCoreUtil.BEGINFEATURE + ""String_Node_Str""+ WordCoreUtil.BEGINCONFIG,""String_Node_Str"");
        if (WordCoreUtil.textOnly(fullParagraph).isEmpty()) {
          toInsert=toInsert.replaceFirst(WordCoreUtil.WHOLE_END_PARAGRAPH,""String_Node_Str"");
          applicabilityBlock.setStartInsertIndex(paragraphStartIndex);
          applicabilityBlock.setStartTextIndex(paragraphEndIndex);
        }
      }
    }
  }
  if (!applicabilityBlock.isInTable() && toInsert.matches(""String_Node_Str"")) {
    int origLength=toInsert.length();
    int lastParaIndex=toInsert.lastIndexOf(WordCoreUtil.START_PARAGRAPH);
    if (lastParaIndex >= 0) {
      toInsert=toInsert.substring(0,lastParaIndex);
      applicabilityBlock.setEndTextIndex(applicabilityBlock.getEndTextIndex() - (origLength - lastParaIndex));
      applicabilityBlock.setEndInsertIndex(applicabilityBlock.getEndInsertIndex() + WordCoreUtil.WHOLE_END_PARAGRAPH.length());
    }
  }
  return toInsert;
}","private String removeExtraParagraphs(String fullWordMl,String toInsert,ApplicabilityBlock applicabilityBlock){
  int startInsertIndex=applicabilityBlock.getStartInsertIndex();
  if (!applicabilityBlock.isInTable() && (toInsert.isEmpty() || toInsert.startsWith(WordCoreUtil.WHOLE_END_PARAGRAPH))) {
    String findParagraphStart=fullWordMl.substring(0,startInsertIndex);
    int paragraphStartIndex=findParagraphStart.lastIndexOf(WordCoreUtil.START_PARAGRAPH);
    String beginningText=fullWordMl.substring(paragraphStartIndex,startInsertIndex);
    if (toInsert.isEmpty() && paragraphStartIndex >= 0 && !beginningText.matches(""String_Node_Str"" + WordCoreUtil.BEGINFEATURE + ""String_Node_Str""+ WordCoreUtil.BEGINCONFIG+ ""String_Node_Str""+ WordCoreUtil.ENDCONFIG+ ""String_Node_Str""+ WordCoreUtil.ENDFEATURE+ ""String_Node_Str"")) {
      int endInsertIndex=applicabilityBlock.getEndInsertIndex();
      String findParagraphEnd=fullWordMl.substring(endInsertIndex);
      int paragraphEndIndex=findParagraphEnd.indexOf(WordCoreUtil.END_PARAGRAPH) + endInsertIndex + 6;
      if (paragraphEndIndex >= 0) {
        String endText=fullWordMl.substring(endInsertIndex,paragraphEndIndex);
        if (paragraphEndIndex >= 0 && WordCoreUtil.textOnly(endText).isEmpty() && !endText.matches(""String_Node_Str"" + WordCoreUtil.BEGINFEATURE + ""String_Node_Str""+ WordCoreUtil.BEGINCONFIG+ ""String_Node_Str""+ WordCoreUtil.ENDCONFIG+ ""String_Node_Str""+ WordCoreUtil.ENDFEATURE+ ""String_Node_Str"")) {
          applicabilityBlock.setStartInsertIndex(paragraphStartIndex);
          applicabilityBlock.setStartTextIndex(paragraphStartIndex);
          applicabilityBlock.setEndInsertIndex(paragraphEndIndex);
          applicabilityBlock.setEndTextIndex(paragraphEndIndex);
        }
      }
    }
 else {
      String findParagraphEnd=fullWordMl.substring(startInsertIndex);
      int paragraphEndIndex=findParagraphEnd.indexOf(WordCoreUtil.END_PARAGRAPH) + startInsertIndex + 6;
      if (paragraphStartIndex >= 0 && paragraphEndIndex >= 0 && paragraphEndIndex > paragraphStartIndex) {
        String fullParagraph=fullWordMl.substring(paragraphStartIndex,paragraphEndIndex);
        fullParagraph=fullParagraph.replaceFirst(""String_Node_Str"" + WordCoreUtil.BEGINFEATURE + ""String_Node_Str""+ WordCoreUtil.BEGINCONFIG,""String_Node_Str"");
        if (WordCoreUtil.textOnly(fullParagraph).isEmpty()) {
          toInsert=toInsert.replaceFirst(WordCoreUtil.WHOLE_END_PARAGRAPH,""String_Node_Str"");
          applicabilityBlock.setStartInsertIndex(paragraphStartIndex);
          applicabilityBlock.setStartTextIndex(paragraphEndIndex);
        }
      }
    }
  }
  if (!applicabilityBlock.isInTable() && toInsert.matches(""String_Node_Str"")) {
    int origLength=toInsert.length();
    int lastParaIndex=toInsert.lastIndexOf(WordCoreUtil.START_PARAGRAPH);
    if (lastParaIndex >= 0) {
      toInsert=toInsert.substring(0,lastParaIndex);
      applicabilityBlock.setEndTextIndex(applicabilityBlock.getEndTextIndex() - (origLength - lastParaIndex));
      applicabilityBlock.setEndInsertIndex(applicabilityBlock.getEndInsertIndex() + WordCoreUtil.WHOLE_END_PARAGRAPH.length());
    }
  }
  return toInsert;
}",0.9491628614916288
96690,"private void processStatement(VCastInstrumentedFile lisFile,VCastLisFileParser lisFileParser,int fileNum,int functionNum,VCastFunction function,VCastStatementCoverage statementCoverageItem,boolean isMCDCFile,Map<String,Discrepancy> discrepancies,OperationReport report){
  Integer functionNumber=function.getFindex();
  Integer lineNumber=statementCoverageItem.getLine();
  Pair<String,Boolean> lineData=null;
  try {
    lineData=lisFileParser.getSourceCodeForLine(functionNumber,lineNumber);
  }
 catch (  Exception ex) {
    report.addEntry(""String_Node_Str"",ex.getMessage(),ERROR);
  }
  String location;
  if (lineData != null) {
    boolean isMCDCPair=statementCoverageItem.getIsMCDCPair();
    String text;
    if (isMCDCPair) {
      location=String.format(""String_Node_Str"",lineNumber,statementCoverageItem.getAbbrevCondition(),""String_Node_Str"");
      String location2=String.format(""String_Node_Str"",lineNumber,statementCoverageItem.getAbbrevCondition(),""String_Node_Str"");
      if (!lineData.getFirst().matches(""String_Node_Str"")) {
        text=statementCoverageItem.getFullCondition();
        addDiscrepancy(discrepancies,location,text);
        addDiscrepancy(discrepancies,location2,text);
      }
 else {
        text=lineData.getFirst().trim();
        addDiscrepancy(discrepancies,location,text);
      }
    }
 else {
      text=lineData.getFirst().trim();
      if (statementCoverageItem.getNumConditions() == 2) {
        location=String.format(""String_Node_Str"",lineNumber,""String_Node_Str"");
        addDiscrepancy(discrepancies,location,text);
        location=String.format(""String_Node_Str"",lineNumber,""String_Node_Str"");
        addDiscrepancy(discrepancies,location,text);
      }
 else {
        location=String.valueOf(lineNumber);
        addDiscrepancy(discrepancies,location,text);
      }
    }
    if (lineData.getSecond()) {
      String datId=generateDatId(fileNum,functionNum,location);
      datIdsCoveredByException.add(datId);
    }
  }
}","private void processStatement(VCastInstrumentedFile lisFile,VCastLisFileParser lisFileParser,int fileNum,int functionNum,VCastFunction function,VCastStatementCoverage statementCoverageItem,boolean isMCDCFile,Map<String,Discrepancy> discrepancies,OperationReport report){
  Integer functionNumber=function.getFindex();
  Integer lineNumber=statementCoverageItem.getLine();
  Pair<String,Boolean> lineData=null;
  try {
    lineData=lisFileParser.getSourceCodeForLine(functionNumber,lineNumber);
  }
 catch (  Exception ex) {
    report.addEntry(""String_Node_Str"",ex.getMessage(),ERROR);
  }
  String location=""String_Node_Str"";
  if (lineData != null) {
    boolean isMCDCPair=statementCoverageItem.getIsMCDCPair();
    String text;
    if (isMCDCPair) {
      location=String.format(""String_Node_Str"",lineNumber,statementCoverageItem.getAbbrevCondition(),""String_Node_Str"");
      String location2=String.format(""String_Node_Str"",lineNumber,statementCoverageItem.getAbbrevCondition(),""String_Node_Str"");
      if (!lineData.getFirst().matches(WHEN_FOR)) {
        text=statementCoverageItem.getFullCondition();
        addDiscrepancy(discrepancies,location,text);
        addDiscrepancy(discrepancies,location2,text);
      }
 else {
        text=lineData.getFirst().trim();
        addDiscrepancy(discrepancies,location,text);
      }
    }
 else {
      text=lineData.getFirst().trim();
      if (statementCoverageItem.getNumConditions() == 2) {
        location=String.format(""String_Node_Str"",lineNumber,""String_Node_Str"");
        String locationF=String.format(""String_Node_Str"",lineNumber,""String_Node_Str"");
        if (!lineData.getFirst().matches(WHEN_FOR) && !lineData.getFirst().matches(EXIT_WHEN) && !lineData.getFirst().matches(LOG)) {
          addDiscrepancy(discrepancies,location,text);
          addDiscrepancy(discrepancies,locationF,text);
        }
 else {
          addDiscrepancy(discrepancies,location,text);
        }
      }
 else {
        location=String.valueOf(lineNumber);
        addDiscrepancy(discrepancies,location,text);
      }
    }
    if (lineData.getSecond()) {
      String datId=generateDatId(fileNum,functionNum,location);
      datIdsCoveredByException.add(datId);
    }
  }
}",0.8970273483947682
96691,"private Collection<VCastStatementCoverage> getStatementCoverageLinesWithBranch(VCastFunction function){
  Collection<VCastStatementCoverage> toReturn=new ArrayList<>();
  JdbcStatement stmt=getStatement();
  try {
    String query=""String_Node_Str"" + ""String_Node_Str"" + ""String_Node_Str"";
    stmt.runPreparedQuery(query,function.getId());
    while (stmt.next()) {
      Integer id=stmt.getInt(""String_Node_Str"");
      Integer line=stmt.getInt(""String_Node_Str"");
      Integer hit_count=stmt.getInt(""String_Node_Str"");
      Integer max_hit_count=stmt.getInt(""String_Node_Str"");
      Integer num_conditions=stmt.getInt(""String_Node_Str"");
      toReturn.add(new VCastStatementCoverage(id,function.getId(),line,hit_count,max_hit_count,false,""String_Node_Str"",""String_Node_Str"",num_conditions));
    }
  }
 catch (  Exception ex) {
    System.out.println(ex);
  }
 finally {
    stmt.close();
  }
  return toReturn;
}","private Collection<VCastStatementCoverage> getStatementCoverageLinesWithBranch(VCastFunction function){
  Collection<VCastStatementCoverage> toReturn=new ArrayList<>();
  JdbcStatement stmt=getStatement();
  try {
    String query=""String_Node_Str"" + ""String_Node_Str"" + ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str"";
    stmt.runPreparedQuery(query,function.getId(),function.getId());
    while (stmt.next()) {
      Integer id=stmt.getInt(""String_Node_Str"");
      Integer line=stmt.getInt(""String_Node_Str"");
      Integer hit_count=stmt.getInt(""String_Node_Str"");
      Integer max_hit_count=stmt.getInt(""String_Node_Str"");
      Integer num_conditions=stmt.getInt(""String_Node_Str"");
      toReturn.add(new VCastStatementCoverage(id,function.getId(),line,hit_count,max_hit_count,false,""String_Node_Str"",""String_Node_Str"",num_conditions));
    }
  }
 catch (  Exception ex) {
    System.out.println(ex);
  }
 finally {
    stmt.close();
  }
  return toReturn;
}",0.9613375130616508
96692,"private BranchId getBranch(){
  Conditions.assertNotNull(editor,""String_Node_Str"");
  ChangeReportEditorInput editorInput=editor.getEditorInput();
  if (editorInput != null) {
    BranchId branch=editorInput.getBranch();
    if (branch == null) {
      button.setEnabled(false);
    }
    return branch;
  }
  return null;
}","private BranchId getBranch(){
  Conditions.assertNotNull(editor,""String_Node_Str"");
  ChangeReportEditorInput editorInput=editor.getEditorInput();
  if (editorInput != null) {
    BranchId branch=editorInput.getBranch();
    if (branch == null && button != null && !button.isDisposed()) {
      button.setEnabled(false);
    }
    return branch;
  }
  return null;
}",0.9391304347826088
96693,"public Pair<String,Set<String>> renderWordML(WordTemplateContentData wtcData) throws OseeCoreException {
  TransactionId txId=wtcData.getTxId();
  if (txId == null) {
    txId=TransactionId.SENTINEL;
  }
  ArtifactReadable artifact=null;
  if (txId.equals(TransactionId.SENTINEL)) {
    artifact=orcsApi.getQueryFactory().fromBranch(wtcData.getBranch()).andUuid(wtcData.getArtId()).includeDeletedArtifacts().includeDeletedAttributes().getResults().getAtMostOneOrNull();
  }
 else {
    artifact=orcsApi.getQueryFactory().fromBranch(wtcData.getBranch()).fromTransaction(txId).andUuid(wtcData.getArtId()).includeDeletedArtifacts().includeDeletedAttributes().getResults().getAtMostOneOrNull();
  }
  if (artifact != null) {
    Set<String> unknownGuids=new HashSet<>();
    String data=artifact.getSoleAttributeValue(CoreAttributeTypes.WordTemplateContent,DeletionFlag.INCLUDE_DELETED,null);
    if (data == null && wtcData.getIsEdit()) {
      data=orcsApi.getOrcsTypes().getAttributeTypes().getDefaultValue(CoreAttributeTypes.WordTemplateContent);
    }
    if (data != null) {
      data=WordUtilities.reassignBinDataID(data);
      LinkType link=wtcData.getLinkType() != null ? LinkType.valueOf(wtcData.getLinkType()) : null;
      data=WordMlLinkHandler.link(orcsApi.getQueryFactory(),link,artifact,data,wtcData.getTxId(),wtcData.getSessionId(),wtcData.getSessionId(),unknownGuids);
      data=WordUtilities.reassignBookMarkID(data);
      if (wtcData.getIsEdit()) {
        data=data.replaceAll(ReportConstants.ENTIRE_FTR_EXTRA_PARA,""String_Node_Str"");
      }
      data=data.replaceAll(ReportConstants.ENTIRE_FTR,""String_Node_Str"");
      data=data.replaceAll(ReportConstants.NO_DATA_RIGHTS,""String_Node_Str"");
      if (wtcData.getIsEdit() && !data.contains(""String_Node_Str"")) {
        int lastIndex=data.lastIndexOf(""String_Node_Str"");
        if (lastIndex != -1) {
          String temp=data.substring(lastIndex);
          temp=temp.replaceAll(""String_Node_Str"",""String_Node_Str"");
          data=data.substring(0,lastIndex) + temp;
        }
      }
      if (!wtcData.getIsEdit() && (wtcData.getBranch().getViewId().notEqual(ArtifactId.SENTINEL) || isWtcViewIdValid(wtcData))) {
        if (applicHandler == null) {
          this.applicHandler=new WordMLApplicabilityHandler(orcsApi,logger,wtcData.getBranch(),wtcData.getViewId());
        }
        data=data.replaceAll(PL_STYLE_WITH_RETURN,""String_Node_Str"");
        data=data.replaceAll(PL_STYLE,""String_Node_Str"");
        data=data.replaceAll(PL_HIGHLIGHT,""String_Node_Str"");
        data=applicHandler.previewValidApplicabilityContent(data);
        data=data.replaceAll(EMPTY_PARAGRAPHS,""String_Node_Str"");
      }
      data=data.concat(wtcData.getFooter());
      if (!wtcData.getIsEdit()) {
        data=data.replaceAll(PGNUMTYPE_START_1,""String_Node_Str"");
      }
      return new Pair<String,Set<String>>(data,unknownGuids);
    }
  }
  return null;
}","public Pair<String,Set<String>> renderWordML(WordTemplateContentData wtcData) throws OseeCoreException {
  TransactionId txId=wtcData.getTxId();
  if (txId == null) {
    txId=TransactionId.SENTINEL;
  }
  ArtifactReadable artifact=null;
  if (txId.equals(TransactionId.SENTINEL)) {
    artifact=orcsApi.getQueryFactory().fromBranch(wtcData.getBranch()).andUuid(wtcData.getArtId()).includeDeletedArtifacts().includeDeletedAttributes().getResults().getAtMostOneOrNull();
  }
 else {
    artifact=orcsApi.getQueryFactory().fromBranch(wtcData.getBranch()).fromTransaction(txId).andUuid(wtcData.getArtId()).includeDeletedArtifacts().includeDeletedAttributes().getResults().getAtMostOneOrNull();
  }
  if (artifact != null) {
    Set<String> unknownGuids=new HashSet<>();
    String data=artifact.getSoleAttributeValue(CoreAttributeTypes.WordTemplateContent,DeletionFlag.INCLUDE_DELETED,null);
    if (data == null && wtcData.getIsEdit()) {
      data=orcsApi.getOrcsTypes().getAttributeTypes().getDefaultValue(CoreAttributeTypes.WordTemplateContent);
    }
    if (data != null) {
      data=WordUtilities.reassignBinDataID(data);
      LinkType link=wtcData.getLinkType() != null ? LinkType.valueOf(wtcData.getLinkType()) : null;
      data=WordMlLinkHandler.link(orcsApi.getQueryFactory(),link,artifact,data,wtcData.getTxId(),wtcData.getSessionId(),wtcData.getOseeLink(),unknownGuids);
      data=WordUtilities.reassignBookMarkID(data);
      if (wtcData.getIsEdit()) {
        data=data.replaceAll(ReportConstants.ENTIRE_FTR_EXTRA_PARA,""String_Node_Str"");
      }
      data=data.replaceAll(ReportConstants.ENTIRE_FTR,""String_Node_Str"");
      data=data.replaceAll(ReportConstants.NO_DATA_RIGHTS,""String_Node_Str"");
      if (wtcData.getIsEdit() && !data.contains(""String_Node_Str"")) {
        int lastIndex=data.lastIndexOf(""String_Node_Str"");
        if (lastIndex != -1) {
          String temp=data.substring(lastIndex);
          temp=temp.replaceAll(""String_Node_Str"",""String_Node_Str"");
          data=data.substring(0,lastIndex) + temp;
        }
      }
      if (!wtcData.getIsEdit() && (wtcData.getBranch().getViewId().notEqual(ArtifactId.SENTINEL) || isWtcViewIdValid(wtcData))) {
        if (applicHandler == null) {
          this.applicHandler=new WordMLApplicabilityHandler(orcsApi,logger,wtcData.getBranch(),wtcData.getViewId());
        }
        data=data.replaceAll(PL_STYLE_WITH_RETURN,""String_Node_Str"");
        data=data.replaceAll(PL_STYLE,""String_Node_Str"");
        data=data.replaceAll(PL_HIGHLIGHT,""String_Node_Str"");
        data=applicHandler.previewValidApplicabilityContent(data);
        data=data.replaceAll(EMPTY_PARAGRAPHS,""String_Node_Str"");
      }
      data=data.concat(wtcData.getFooter());
      if (!wtcData.getIsEdit()) {
        data=data.replaceAll(PGNUMTYPE_START_1,""String_Node_Str"");
      }
      return new Pair<String,Set<String>>(data,unknownGuids);
    }
  }
  return null;
}",0.9970984809694488
96694,"@Override public void writeRow(Object... row) throws IOException {
  if (row[0] instanceof Collection<?>) {
    int rowLength=((Collection<?>)row[0]).size();
    Collection<?> values=(Collection<?>)row[0];
    for (    Object obj : values) {
      writeCell(obj,implicitCellIndex,rowLength);
    }
  }
  for (int i=0; i < row.length; i++) {
    writeCell(row[i],implicitCellIndex,row.length);
  }
  endRow();
}","@Override public void writeRow(Object... row) throws IOException {
  for (int i=0; i < row.length; i++) {
    writeCell(row[i],implicitCellIndex,row.length);
  }
  endRow();
}",0.5982905982905983
96695,public void writeRow(Collection<Object> row) throws IOException ;,public void writeRow(Collection<?> row) throws IOException ;,0.944
96696,"public static boolean areApplicabilityTagsInvalid(String wordml,BranchId branch,HashCollection<String,String> validFeatureValues){
  Matcher matcher=FULL_PATTERN.matcher(wordml);
  Stack<ApplicabilityBlock> applicabilityBlocks=new Stack<>();
  int applicBlockCount=0;
  while (matcher.find()) {
    String beginFeature=matcher.group(1) != null ? WordCoreUtil.textOnly(matcher.group(1)) : null;
    String beginConfiguration=matcher.group(26) != null ? WordCoreUtil.textOnly(matcher.group(26)) : null;
    String endFeature=matcher.group(12) != null ? WordCoreUtil.textOnly(matcher.group(12)) : null;
    String endConfiguration=matcher.group(43) != null ? WordCoreUtil.textOnly(matcher.group(43)) : null;
    if (beginFeature != null && beginFeature.toLowerCase().contains(FEATUREAPP)) {
      applicBlockCount+=1;
      applicabilityBlocks.add(createApplicabilityBlock(ApplicabilityType.Feature,beginFeature));
    }
 else     if (beginConfiguration != null && beginConfiguration.toLowerCase().contains(CONFIGAPP)) {
      applicBlockCount+=1;
      applicabilityBlocks.add(createApplicabilityBlock(ApplicabilityType.Configuration,beginConfiguration));
    }
 else     if ((endFeature != null && endFeature.toLowerCase().contains(FEATUREAPP))) {
      applicBlockCount-=1;
      if (isInvalidFeatureBlock(applicabilityBlocks.pop(),matcher,branch,validFeatureValues)) {
        return true;
      }
    }
 else     if ((endConfiguration != null && endConfiguration.toLowerCase().contains(CONFIGAPP))) {
      applicBlockCount-=1;
      if (isInvalidConfigurationBlock(applicabilityBlocks.pop(),matcher)) {
        return true;
      }
    }
  }
  if (applicBlockCount != 0) {
    return true;
  }
  return false;
}","public static boolean areApplicabilityTagsInvalid(String wordml,BranchId branch,HashCollection<String,String> validFeatureValues){
  Matcher matcher=FULL_PATTERN.matcher(wordml);
  Stack<ApplicabilityBlock> applicabilityBlocks=new Stack<>();
  int applicBlockCount=0;
  while (matcher.find()) {
    String beginFeature=matcher.group(1) != null ? WordCoreUtil.textOnly(matcher.group(1)) : null;
    String beginConfiguration=matcher.group(26) != null ? WordCoreUtil.textOnly(matcher.group(26)) : null;
    String endFeature=matcher.group(12) != null ? WordCoreUtil.textOnly(matcher.group(12)) : null;
    String endConfiguration=matcher.group(43) != null ? WordCoreUtil.textOnly(matcher.group(43)) : null;
    if (beginFeature != null && beginFeature.toLowerCase().contains(FEATUREAPP)) {
      applicBlockCount+=1;
      applicabilityBlocks.add(createApplicabilityBlock(ApplicabilityType.Feature,beginFeature));
    }
 else     if (beginConfiguration != null && beginConfiguration.toLowerCase().contains(CONFIGAPP)) {
      applicBlockCount+=1;
      applicabilityBlocks.add(createApplicabilityBlock(ApplicabilityType.Configuration,beginConfiguration));
    }
 else     if ((endFeature != null && endFeature.toLowerCase().contains(FEATUREAPP))) {
      applicBlockCount-=1;
      if (applicabilityBlocks.isEmpty()) {
        return true;
      }
      if (isInvalidFeatureBlock(applicabilityBlocks.pop(),matcher,branch,validFeatureValues)) {
        return true;
      }
    }
 else     if ((endConfiguration != null && endConfiguration.toLowerCase().contains(CONFIGAPP))) {
      applicBlockCount-=1;
      if (applicabilityBlocks.isEmpty()) {
        return true;
      }
      if (isInvalidConfigurationBlock(applicabilityBlocks.pop(),matcher)) {
        return true;
      }
    }
  }
  if (applicBlockCount != 0) {
    return true;
  }
  return false;
}",0.9596864501679732
96697,"private boolean isFeatureValuePairValid(String feature,String value){
  if (viewApplicabilitiesMap.containsKey(feature)) {
    Collection<String> validValues=viewApplicabilitiesMap.get(feature);
    value=value.equalsIgnoreCase(""String_Node_Str"") ? getDefaultValue(feature) : value;
    if (containsIgnoreCase(validValues,value)) {
      return true;
    }
  }
  return false;
}","private boolean isFeatureValuePairValid(String feature,String value){
  if (viewApplicabilitiesMap.containsKey(feature)) {
    Collection<String> validValues=viewApplicabilitiesMap.get(feature);
    value=value.equalsIgnoreCase(""String_Node_Str"") ? getDefaultValue(feature) : value.trim();
    if (containsIgnoreCase(validValues,value)) {
      return true;
    }
  }
  return false;
}",0.9908256880733946
96698,"private boolean isValidConfigurationBracket(String beginConfig){
  beginConfig=WordCoreUtil.textOnly(beginConfig);
  int start=beginConfig.indexOf(""String_Node_Str"") + 1;
  int end=beginConfig.indexOf(""String_Node_Str"");
  String applicExpText=beginConfig.substring(start,end);
  String[] configs=applicExpText.split(""String_Node_Str"");
  for (int i=0; i < configs.length; i++) {
    configs[i]=configs[i].split(""String_Node_Str"")[0];
    if (!containsIgnoreCase(validConfigurations,configs[i])) {
      return false;
    }
  }
  return true;
}","private boolean isValidConfigurationBracket(String beginConfig){
  beginConfig=WordCoreUtil.textOnly(beginConfig);
  int start=beginConfig.indexOf(""String_Node_Str"") + 1;
  int end=beginConfig.indexOf(""String_Node_Str"");
  String applicExpText=beginConfig.substring(start,end);
  String[] configs=applicExpText.split(""String_Node_Str"");
  for (int i=0; i < configs.length; i++) {
    configs[i]=configs[i].split(""String_Node_Str"")[0].trim();
    if (!containsIgnoreCase(validConfigurations,configs[i])) {
      return false;
    }
  }
  return true;
}",0.993607305936073
96699,"private static boolean isValidConfigurationBracket(String beginConfig,Set<String> allValidConfigurations){
  beginConfig=WordCoreUtil.textOnly(beginConfig);
  int start=beginConfig.indexOf(""String_Node_Str"") + 1;
  int end=beginConfig.indexOf(""String_Node_Str"");
  String applicExpText=beginConfig.substring(start,end);
  String[] configs=applicExpText.split(""String_Node_Str"");
  for (int i=0; i < configs.length; i++) {
    configs[i]=configs[i].split(""String_Node_Str"")[0];
    if (!containsIgnoreCase(allValidConfigurations,configs[i])) {
      return false;
    }
  }
  return true;
}","private static boolean isValidConfigurationBracket(String beginConfig,Set<String> allValidConfigurations){
  beginConfig=WordCoreUtil.textOnly(beginConfig);
  int start=beginConfig.indexOf(""String_Node_Str"") + 1;
  int end=beginConfig.indexOf(""String_Node_Str"");
  String applicExpText=beginConfig.substring(start,end);
  String[] configs=applicExpText.split(""String_Node_Str"");
  for (int i=0; i < configs.length; i++) {
    configs[i]=configs[i].split(""String_Node_Str"")[0].trim();
    if (!containsIgnoreCase(allValidConfigurations,configs[i])) {
      return false;
    }
  }
  return true;
}",0.9940928270042194
96700,"public static boolean isExpressionInvalid(String expression,BranchId branch,HashCollection<String,String> validFeatureValues){
  ApplicabilityGrammarLexer lex=new ApplicabilityGrammarLexer(new ANTLRStringStream(expression.toUpperCase()));
  ApplicabilityGrammarParser parser=new ApplicabilityGrammarParser(new CommonTokenStream(lex));
  try {
    parser.start();
  }
 catch (  RecognitionException ex) {
    return true;
  }
  HashMap<String,List<String>> featureIdValuesMap=parser.getIdValuesMap();
  for (  String featureId : featureIdValuesMap.keySet()) {
    if (validFeatureValues.containsKey(featureId.toUpperCase())) {
      List<String> values=featureIdValuesMap.get(featureId);
      if (values.contains(""String_Node_Str"")) {
        continue;
      }
      Collection<String> validValues=validFeatureValues.getValues(featureId.toUpperCase());
      for (      String val : values) {
        if (val.equals(""String_Node_Str"") || val.equals(""String_Node_Str"") || val.equals(""String_Node_Str"")|| val.equals(""String_Node_Str"")) {
          continue;
        }
        if (!containsIgnoreCase(validValues,val)) {
          return true;
        }
      }
    }
 else {
      return true;
    }
  }
  return false;
}","public static boolean isExpressionInvalid(String expression,BranchId branch,HashCollection<String,String> validFeatureValues){
  ApplicabilityGrammarLexer lex=new ApplicabilityGrammarLexer(new ANTLRStringStream(expression.toUpperCase()));
  ApplicabilityGrammarParser parser=new ApplicabilityGrammarParser(new CommonTokenStream(lex));
  try {
    parser.start();
  }
 catch (  RecognitionException ex) {
    return true;
  }
  HashMap<String,List<String>> featureIdValuesMap=parser.getIdValuesMap();
  for (  String featureId : featureIdValuesMap.keySet()) {
    featureId=featureId.trim();
    if (validFeatureValues.containsKey(featureId.toUpperCase())) {
      List<String> values=featureIdValuesMap.get(featureId);
      if (values.contains(""String_Node_Str"")) {
        continue;
      }
      Collection<String> validValues=validFeatureValues.getValues(featureId.toUpperCase());
      for (      String val : values) {
        val=val.trim();
        if (val.equals(""String_Node_Str"") || val.equals(""String_Node_Str"") || val.equals(""String_Node_Str"")|| val.equals(""String_Node_Str"")) {
          continue;
        }
        if (!containsIgnoreCase(validValues,val)) {
          return true;
        }
      }
    }
 else {
      return true;
    }
  }
  return false;
}",0.9775461106655974
96701,"public String getValidConfigurationContent(String fullText,HashMap<String,List<String>> id_value_map){
  Matcher match=WordCoreUtil.ELSE_PATTERN.matcher(fullText);
  String beginningText=fullText;
  String elseText=""String_Node_Str"";
  if (match.find()) {
    beginningText=fullText.substring(0,match.start());
    elseText=fullText.substring(match.end());
    elseText=elseText.replaceAll(WordCoreUtil.ENDCONFIG,""String_Node_Str"");
    elseText=elseText.replaceAll(WordCoreUtil.BEGINCONFIG,""String_Node_Str"");
  }
  String toReturn=""String_Node_Str"";
  List<String> values=id_value_map.get(configurationsAllowed.iterator().next().toUpperCase());
  if (values != null) {
    String value=values.get(0);
    if (!value.toLowerCase().equals(""String_Node_Str"")) {
      toReturn=beginningText;
    }
  }
  return toReturn;
}","public String getValidConfigurationContent(String fullText,HashMap<String,List<String>> id_value_map){
  Matcher match=WordCoreUtil.ELSE_PATTERN.matcher(fullText);
  String beginningText=fullText;
  String elseText=""String_Node_Str"";
  if (match.find()) {
    beginningText=fullText.substring(0,match.start());
    elseText=fullText.substring(match.end());
    elseText=elseText.replaceAll(WordCoreUtil.ENDCONFIG,""String_Node_Str"");
    elseText=elseText.replaceAll(WordCoreUtil.BEGINCONFIG,""String_Node_Str"");
  }
  String toReturn=""String_Node_Str"";
  List<String> values=id_value_map.get(configurationsAllowed.iterator().next().toUpperCase());
  if (values != null) {
    String value=values.get(0);
    if (!value.toLowerCase().equals(""String_Node_Str"")) {
      toReturn=beginningText;
    }
  }
 else {
    boolean isExcluded=false;
    for (    Entry<String,List<String>> entry : id_value_map.entrySet()) {
      List<String> value=entry.getValue();
      isExcluded=value.get(0).toLowerCase().equals(""String_Node_Str"") ? true : false;
      if (!isExcluded) {
        break;
      }
    }
    toReturn=isExcluded ? beginningText : ""String_Node_Str"";
  }
  return toReturn;
}",0.8107838242636046
96702,"public static void setLastBranch(IOseeBranch branch){
  lastBranch=branch;
}","public static void setLastBranch(BranchId branch){
  lastBranch=branch;
}",0.953020134228188
96703,"public static IOseeBranch getLastBranch(){
  if (lastBranch == null) {
    try {
      Long branchUuid=Long.valueOf(UserManager.getSetting(LAST_DEFAULT_BRANCH));
      lastBranch=getBranch(branchUuid);
    }
 catch (    Exception ex) {
      try {
        lastBranch=getBranchToken(getDefaultInitialBranch());
        UserManager.setSetting(LAST_DEFAULT_BRANCH,lastBranch.getUuid());
      }
 catch (      OseeCoreException ex1) {
        OseeLog.log(Activator.class,Level.SEVERE,ex1);
      }
    }
  }
  return lastBranch;
}","public static BranchId getLastBranch(){
  if (lastBranch == null) {
    try {
      Long branchUuid=Long.valueOf(UserManager.getSetting(LAST_DEFAULT_BRANCH));
      lastBranch=getBranch(branchUuid);
    }
 catch (    Exception ex) {
      try {
        lastBranch=getBranchToken(getDefaultInitialBranch());
        UserManager.setSetting(LAST_DEFAULT_BRANCH,lastBranch.getUuid());
      }
 catch (      OseeCoreException ex1) {
        OseeLog.log(Activator.class,Level.SEVERE,ex1);
      }
    }
  }
  return lastBranch;
}",0.9837940896091516
96704,"private void handleSelectedBranch(Event event){
  if (event.widget == branchSelectButton || event.widget == branchSelectTextWidget && branchSelectTextWidget.getDoubleClickEnabled()) {
    if (areOnlyWorkingBranchesAllowed()) {
      IOseeBranch newBranch=BranchSelectionDialog.getWorkingBranchFromUser();
      if (newBranch != null) {
        setSelected(newBranch);
      }
    }
 else {
      IOseeBranch newBranch=BranchSelectionDialog.getBranchFromUser();
      if (newBranch != null) {
        setSelected(newBranch);
      }
    }
  }
}","private void handleSelectedBranch(Event event){
  if (event.widget == branchSelectButton || event.widget == branchSelectTextWidget && branchSelectTextWidget.getDoubleClickEnabled()) {
    if (areOnlyWorkingBranchesAllowed()) {
      BranchId newBranch=BranchSelectionDialog.getWorkingBranchFromUser();
      if (newBranch != null) {
        setSelected(newBranch);
      }
    }
 else {
      BranchId newBranch=BranchSelectionDialog.getBranchFromUser();
      if (newBranch != null) {
        setSelected(newBranch);
      }
    }
  }
}",0.9685185185185186
96705,"private void storeSelectedBranch(){
  List<IOseeBranch> branches=branchWidget.getSelectedBranches();
  if (!branches.isEmpty()) {
    selected=branches.iterator().next();
    BranchManager.setLastBranch(selected);
    lastSelectedBranch=selected;
  }
}","private void storeSelectedBranch(){
  List<BranchId> branches=branchWidget.getSelectedBranches();
  if (!branches.isEmpty()) {
    selected=branches.iterator().next();
    BranchManager.setLastBranch(selected);
    lastSelectedBranch=selected;
  }
}",0.9660678642714572
96706,"public static IOseeBranch getBranchFromUser(){
  return createDialog(false);
}","public static BranchId getBranchFromUser(){
  return createDialog(false);
}",0.954248366013072
96707,"private static IOseeBranch createDialog(boolean allowOnlyWorkingBranches){
  IOseeBranch toReturn=null;
  BranchSelectionDialog branchSelection=new BranchSelectionDialog(""String_Node_Str"",allowOnlyWorkingBranches);
  if (lastSelectedBranch != null) {
    try {
      if (!BranchManager.isArchived(lastSelectedBranch)) {
        branchSelection.setDefaultSelection(lastSelectedBranch);
      }
    }
 catch (    OseeCoreException ex) {
    }
  }
  int result=branchSelection.open();
  if (result == Window.OK) {
    toReturn=branchSelection.getSelection();
  }
  return toReturn;
}","private static BranchId createDialog(boolean allowOnlyWorkingBranches){
  BranchId toReturn=null;
  BranchSelectionDialog branchSelection=new BranchSelectionDialog(""String_Node_Str"",allowOnlyWorkingBranches);
  if (lastSelectedBranch != null) {
    try {
      if (!BranchManager.isArchived(lastSelectedBranch)) {
        branchSelection.setDefaultSelection(lastSelectedBranch);
      }
    }
 catch (    OseeCoreException ex) {
    }
  }
  int result=branchSelection.open();
  if (result == Window.OK) {
    toReturn=branchSelection.getSelection();
  }
  return toReturn;
}",0.9705372616984402
96708,"public IOseeBranch getSelection(){
  return selected;
}","public BranchId getSelection(){
  return selected;
}",0.9345794392523364
96709,"public static IOseeBranch getWorkingBranchFromUser(){
  return createDialog(true);
}","public static BranchId getWorkingBranchFromUser(){
  return createDialog(true);
}",0.9575757575757576
96710,"private void setBranchName(IOseeBranch branch){
  if (branch != null) {
    String branchName=branch.getName();
    String[] currentItems=this.branchSelectCombo.getItems();
    int selectionIndex=-1;
    for (int i=0; i < currentItems.length; i++) {
      if (currentItems[i].equals(branchName)) {
        selectionIndex=i;
      }
    }
    if (selectionIndex < 0) {
      int oldLength=currentItems.length;
      String[] newItems=new String[oldLength + 1];
      System.arraycopy(currentItems,0,newItems,0,oldLength);
      newItems[oldLength]=branchName;
      this.branchSelectCombo.setItems(newItems);
      selectionIndex=oldLength;
      branchSelectCombo.setData(branch.getName(),branch);
      branchSelectCombo.setData(branch.getIdString(),branch);
    }
    this.branchSelectCombo.select(selectionIndex);
  }
}","private void setBranchName(BranchId branch){
  if (branch != null) {
    String branchName=BranchManager.getBranchName(branch);
    String[] currentItems=this.branchSelectCombo.getItems();
    int selectionIndex=-1;
    for (int i=0; i < currentItems.length; i++) {
      if (currentItems[i].equals(branchName)) {
        selectionIndex=i;
      }
    }
    if (selectionIndex < 0) {
      int oldLength=currentItems.length;
      String[] newItems=new String[oldLength + 1];
      System.arraycopy(currentItems,0,newItems,0,oldLength);
      newItems[oldLength]=branchName;
      this.branchSelectCombo.setItems(newItems);
      selectionIndex=oldLength;
      branchSelectCombo.setData(branchName,branch);
      branchSelectCombo.setData(branch.getIdString(),branch);
    }
    this.branchSelectCombo.select(selectionIndex);
  }
}",0.9685610640870616
96711,"@Override public void handleDoubleClick(){
  ArrayList<IOseeBranch> branches=xBranchViewer.getSelectedBranches();
  if (branches != null && !branches.isEmpty()) {
    for (    IOseeBranch branch : branches) {
      if (!branch.equals(CoreBranches.SYSTEM_ROOT)) {
        if (!BranchManager.getType(branch).isMergeBranch()) {
          ArtifactExplorer.exploreBranch(branch);
          BranchManager.setLastBranch(branch);
        }
 else {
          if (branch instanceof MergeBranch) {
            MergeBranch mergeBranch=(MergeBranch)branch;
            IOseeBranch source=mergeBranch.getSourceBranch();
            IOseeBranch destination=mergeBranch.getDestinationBranch();
            MergeView.openView(source,destination,BranchManager.getBaseTransaction(source));
          }
        }
      }
    }
  }
}","@Override public void handleDoubleClick(){
  ArrayList<BranchId> branches=xBranchViewer.getSelectedBranches();
  if (branches != null && !branches.isEmpty()) {
    for (    BranchId branch : branches) {
      if (!branch.equals(CoreBranches.SYSTEM_ROOT)) {
        if (!BranchManager.getType(branch).isMergeBranch()) {
          ArtifactExplorer.exploreBranch(branch);
          BranchManager.setLastBranch(branch);
        }
 else {
          if (branch instanceof MergeBranch) {
            MergeBranch mergeBranch=(MergeBranch)branch;
            IOseeBranch source=mergeBranch.getSourceBranch();
            IOseeBranch destination=mergeBranch.getDestinationBranch();
            MergeView.openView(source,destination,BranchManager.getBaseTransaction(source));
          }
        }
      }
    }
  }
}",0.9789864029666254
96712,"public ArrayList<IOseeBranch> getSelectedBranches(){
  ArrayList<IOseeBranch> items=new ArrayList<>();
  if (branchXViewer == null || branchXViewer.getSelection().isEmpty()) {
    return items;
  }
  Iterator<?> i=((IStructuredSelection)branchXViewer.getSelection()).iterator();
  while (i.hasNext()) {
    Object obj=i.next();
    if (obj instanceof IOseeBranch) {
      items.add((IOseeBranch)obj);
    }
  }
  return items;
}","public ArrayList<BranchId> getSelectedBranches(){
  ArrayList<BranchId> items=new ArrayList<>();
  if (branchXViewer == null || branchXViewer.getSelection().isEmpty()) {
    return items;
  }
  Iterator<?> i=((IStructuredSelection)branchXViewer.getSelection()).iterator();
  while (i.hasNext()) {
    Object obj=i.next();
    if (obj instanceof BranchId) {
      items.add((BranchId)obj);
    }
  }
  return items;
}",0.966824644549763
96713,"@Override public void run(){
  User user;
  try {
    user=UserManager.getUser();
    if (user.isSystemUser()) {
      AWorkbench.popup(""String_Node_Str"");
      return;
    }
    List<IOseeBranch> branches=xBranchViewer.getSelectedBranches();
    if (branches.isEmpty()) {
      AWorkbench.popup(""String_Node_Str"");
      return;
    }
    if (MessageDialog.openConfirm(Display.getCurrent().getActiveShell(),""String_Node_Str"",""String_Node_Str"" + branches.size() + ""String_Node_Str"")) {
      for (      BranchId branch : branches) {
        user.toggleFavoriteBranch(branch);
      }
      user.persist(""String_Node_Str"");
      xBranchViewer.refresh();
    }
  }
 catch (  OseeCoreException ex) {
    OseeLog.log(Activator.class,Level.SEVERE,ex.toString(),ex);
  }
}","@Override public void run(){
  User user;
  try {
    user=UserManager.getUser();
    if (user.isSystemUser()) {
      AWorkbench.popup(""String_Node_Str"");
      return;
    }
    List<BranchId> branches=xBranchViewer.getSelectedBranches();
    if (branches.isEmpty()) {
      AWorkbench.popup(""String_Node_Str"");
      return;
    }
    if (MessageDialog.openConfirm(Display.getCurrent().getActiveShell(),""String_Node_Str"",""String_Node_Str"" + branches.size() + ""String_Node_Str"")) {
      for (      BranchId branch : branches) {
        user.toggleFavoriteBranch(branch);
      }
      user.persist(""String_Node_Str"");
      xBranchViewer.refresh();
    }
  }
 catch (  OseeCoreException ex) {
    OseeLog.log(Activator.class,Level.SEVERE,ex.toString(),ex);
  }
}",0.9889106327462492
96714,"@Override public void add(Object obj) throws OseeCoreException {
  Conditions.checkNotNull(obj,""String_Node_Str"");
  if (obj instanceof Collection) {
    for (    Object object : (Collection<?>)obj) {
      add(object);
    }
  }
 else   if (obj instanceof IAtsObject) {
    atsObjects.add((IAtsObject)obj);
  }
 else   if (obj instanceof ArtifactId) {
    artifacts.add((ArtifactId)obj);
  }
 else {
    throw new OseeArgumentException(""String_Node_Str"" + obj);
  }
}","@Override public void add(Object obj) throws OseeCoreException {
  Conditions.checkNotNull(obj,""String_Node_Str"");
  if (obj instanceof Collection) {
    for (    Object object : (Collection<?>)obj) {
      add(object);
    }
  }
 else   if (obj instanceof IAtsObject) {
    atsObjects.add((IAtsObject)obj);
  }
 else   if (obj instanceof ArtifactId) {
    artifacts.add((ArtifactId)obj);
  }
 else   if (obj instanceof AtsRelationChange) {
    relations.add((AtsRelationChange)obj);
  }
 else {
    throw new OseeArgumentException(""String_Node_Str"" + obj);
  }
}",0.9078564500484966
96715,"@Override public void clear(){
  atsObjects.clear();
  artifacts.clear();
  deleteArtifacts.clear();
  deleteAtsObjects.clear();
  listeners.clear();
}","@Override public void clear(){
  relations.clear();
  atsObjects.clear();
  artifacts.clear();
  deleteArtifacts.clear();
  deleteAtsObjects.clear();
  listeners.clear();
}",0.934984520123839
96716,"@Override public boolean isEmpty(){
  return artifacts.isEmpty() && deleteArtifacts.isEmpty() && atsObjects.isEmpty()&& deleteAtsObjects.isEmpty();
}","@Override public boolean isEmpty(){
  return artifacts.isEmpty() && deleteArtifacts.isEmpty() && atsObjects.isEmpty()&& deleteAtsObjects.isEmpty()&& relations.isEmpty();
}",0.93125
96717,"/** 
 * Returns the backing data object for operations like sorting
 */
public Object getBackingData(Object element,XViewerColumn xCol,int columnIndex) throws Exception {
  XViewerAtsColumn xViewerAtsColumn;
  if (xCol.equals(AtsColumnId.CreatedDate.getId())) {
    xViewerAtsColumn=CreatedDateColumnUI.getInstance();
  }
 else   if (xCol.equals(AtsColumnId.ReleaseDate.getId())) {
    xViewerAtsColumn=ReleaseDateColumn.getInstance();
  }
 else   if (xCol.equals(AtsColumnId.CompletedDate.getId())) {
    xViewerAtsColumn=CompletedDateColumnUI.getInstance();
  }
 else   if (xCol.equals(AtsColumnId.CancelledDate.getId())) {
    xViewerAtsColumn=CancelledDateColumnUI.getInstance();
  }
 else {
    return null;
  }
  return xViewerAtsColumn.getBackingData(element,xCol,columnIndex);
}","/** 
 * Returns the backing data object for operations like sorting
 */
public Object getBackingData(Object element,XViewerColumn xCol,int columnIndex) throws Exception {
  XViewerAtsColumn xViewerAtsColumn;
  if (xCol.getId().equals(AtsColumnId.CreatedDate.getId())) {
    xViewerAtsColumn=CreatedDateColumnUI.getInstance();
  }
 else   if (xCol.getId().equals(AtsColumnId.ReleaseDate.getId())) {
    xViewerAtsColumn=ReleaseDateColumn.getInstance();
  }
 else   if (xCol.getId().equals(AtsColumnId.CompletedDate.getId())) {
    xViewerAtsColumn=CompletedDateColumnUI.getInstance();
  }
 else   if (xCol.getId().equals(AtsColumnId.CancelledDate.getId())) {
    xViewerAtsColumn=CancelledDateColumnUI.getInstance();
  }
 else {
    return null;
  }
  return xViewerAtsColumn.getBackingData(element,xCol,columnIndex);
}",0.9800498753117208
96718,"private void processSingleResult(String resultPath,Matcher m){
  DispoItemData item=datIdToItem.get(generateDatId(m.group(1),m.group(2)));
  if (item != null) {
    String location=m.group(3);
    String text=""String_Node_Str"";
    Discrepancy matchingDiscrepancy=matchDiscrepancy(location,item.getDiscrepanciesList());
    if (matchingDiscrepancy != null) {
      text=matchingDiscrepancy.getText();
      Map<String,Discrepancy> discrepancies=item.getDiscrepanciesList();
      discrepancies.remove(matchingDiscrepancy.getId());
      item.setDiscrepanciesList(discrepancies);
      addAnnotationForForCoveredLine(item,location,Test_Unit_Resolution,text,resultPath);
    }
  }
}","private void processSingleResult(String resultPath,Matcher m){
  DispoItemData item=datIdToItem.get(generateDatId(m.group(1),m.group(2)));
  if (item != null) {
    String location=m.group(3);
    String text=""String_Node_Str"";
    Discrepancy matchingDiscrepancy=matchDiscrepancy(location,item.getDiscrepanciesList());
    if (matchingDiscrepancy != null) {
      text=matchingDiscrepancy.getText();
      Map<String,Discrepancy> discrepancies=item.getDiscrepanciesList();
      discrepancies.remove(matchingDiscrepancy.getId());
      item.setDiscrepanciesList(discrepancies);
      addAnnotationForForCoveredLine(item,location,Test_Unit_Resolution,resultPath,text);
    }
  }
}",0.9838235294117648
96719,"private void processStatement(VCastInstrumentedFile lisFile,VCastLisFileParser lisFileParser,int fileNum,int functionNum,VCastFunction function,VCastStatementCoverage statementCoverageItem,boolean isMCDCFile,Map<String,Discrepancy> discrepancies,OperationReport report){
  Integer functionNumber=function.getFindex();
  Integer lineNumber=statementCoverageItem.getLine();
  Pair<String,Boolean> lineData=null;
  try {
    lineData=lisFileParser.getSourceCodeForLine(functionNumber,lineNumber);
  }
 catch (  Exception ex) {
    report.addEntry(""String_Node_Str"",String.format(""String_Node_Str"",lisFile.getLISFile(),function.getName()),ERROR);
  }
  if (fileNum == 41 && functionNum == 1) {
    System.out.println();
  }
  String location;
  if (lineData != null) {
    boolean isMCDCPair=statementCoverageItem.getIsMCDCPair();
    String text;
    if (isMCDCPair) {
      location=String.format(""String_Node_Str"",lineNumber,statementCoverageItem.getAbbrevCondition(),""String_Node_Str"");
      String location2=String.format(""String_Node_Str"",lineNumber,statementCoverageItem.getAbbrevCondition(),""String_Node_Str"");
      if (!lineData.getFirst().matches(""String_Node_Str"")) {
        text=statementCoverageItem.getFullCondition();
        addDiscrepancy(discrepancies,location,text);
        addDiscrepancy(discrepancies,location2,text);
      }
 else {
        text=lineData.getFirst().trim();
        addDiscrepancy(discrepancies,location,text);
      }
    }
 else {
      location=String.valueOf(lineNumber);
      text=lineData.getFirst().trim();
      addDiscrepancy(discrepancies,location,text);
    }
    if (lineData.getSecond()) {
      String datId=generateDatId(fileNum,functionNum,location);
      datIdsCoveredByException.add(datId);
    }
  }
}","private void processStatement(VCastInstrumentedFile lisFile,VCastLisFileParser lisFileParser,int fileNum,int functionNum,VCastFunction function,VCastStatementCoverage statementCoverageItem,boolean isMCDCFile,Map<String,Discrepancy> discrepancies,OperationReport report){
  Integer functionNumber=function.getFindex();
  Integer lineNumber=statementCoverageItem.getLine();
  Pair<String,Boolean> lineData=null;
  try {
    lineData=lisFileParser.getSourceCodeForLine(functionNumber,lineNumber);
  }
 catch (  Exception ex) {
    report.addEntry(""String_Node_Str"",String.format(""String_Node_Str"",lisFile.getLISFile(),function.getName()),ERROR);
  }
  String location;
  if (lineData != null) {
    boolean isMCDCPair=statementCoverageItem.getIsMCDCPair();
    String text;
    if (isMCDCPair) {
      location=String.format(""String_Node_Str"",lineNumber,statementCoverageItem.getAbbrevCondition(),""String_Node_Str"");
      String location2=String.format(""String_Node_Str"",lineNumber,statementCoverageItem.getAbbrevCondition(),""String_Node_Str"");
      if (!lineData.getFirst().matches(""String_Node_Str"")) {
        text=statementCoverageItem.getFullCondition();
        addDiscrepancy(discrepancies,location,text);
        addDiscrepancy(discrepancies,location2,text);
      }
 else {
        text=lineData.getFirst().trim();
        addDiscrepancy(discrepancies,location,text);
      }
    }
 else {
      location=String.valueOf(lineNumber);
      text=lineData.getFirst().trim();
      addDiscrepancy(discrepancies,location,text);
    }
    if (lineData.getSecond()) {
      String datId=generateDatId(fileNum,functionNum,location);
      datIdsCoveredByException.add(datId);
    }
  }
}",0.9788221642007544
96720,"private void processExceptionHandled(OperationReport report){
  for (  String datId : datIdsCoveredByException) {
    if (datId.contains(""String_Node_Str"") || datId.contains(""String_Node_Str"")) {
      System.out.println();
    }
    Matcher matcher=Pattern.compile(""String_Node_Str"").matcher(datId);
    matcher.find();
    String itemDatId=matcher.group();
    DispoItemData item=datIdToItem.get(itemDatId);
    String line=datId.replaceAll(""String_Node_Str"",""String_Node_Str"");
    line=line.replaceAll(""String_Node_Str"",""String_Node_Str"");
    String text=""String_Node_Str"";
    Discrepancy matchingDiscrepancy=matchDiscrepancy(line,item.getDiscrepanciesList());
    if (matchingDiscrepancy != null) {
      text=matchingDiscrepancy.getText();
      Map<String,Discrepancy> discrepancies=item.getDiscrepanciesList();
      discrepancies.remove(matchingDiscrepancy.getId());
      addAnnotationForForCoveredLine(item,line,Exception_Handling_Resolution,text,""String_Node_Str"");
    }
  }
}","private void processExceptionHandled(OperationReport report){
  for (  String datId : datIdsCoveredByException) {
    Matcher matcher=Pattern.compile(""String_Node_Str"").matcher(datId);
    matcher.find();
    String itemDatId=matcher.group();
    DispoItemData item=datIdToItem.get(itemDatId);
    String line=datId.replaceAll(""String_Node_Str"",""String_Node_Str"");
    line=line.replaceAll(""String_Node_Str"",""String_Node_Str"");
    String text=""String_Node_Str"";
    Discrepancy matchingDiscrepancy=matchDiscrepancy(line,item.getDiscrepanciesList());
    if (matchingDiscrepancy != null) {
      text=matchingDiscrepancy.getText();
      Map<String,Discrepancy> discrepancies=item.getDiscrepanciesList();
      discrepancies.remove(matchingDiscrepancy.getId());
      addAnnotationForForCoveredLine(item,line,Exception_Handling_Resolution,""String_Node_Str"",text);
    }
  }
}",0.9185423365487674
96721,"private Collection<Change> getChanges(BranchId branch,boolean isHistorical,List<ChangeBuilder> changeBuilders) throws OseeCoreException {
  CompositeKeyHashMap<TransactionToken,Integer,Artifact> loadedMap=getBulkLoadedArtifacts(branch,isHistorical,changeBuilders);
  Collection<Change> changes=new ArrayList<>();
  for (  ChangeBuilder builder : changeBuilders) {
    Change toReturn=null;
    Artifact changeArtifact=loadedMap.get(builder.getTxDelta().getEndTx(),builder.getArtId());
    if (changeArtifact != null) {
      ArtifactDelta delta=new ArtifactDelta(builder.getTxDelta(),changeArtifact,null);
      if (builder instanceof ArtifactChangeBuilder) {
        toReturn=new ArtifactChange(branch,GammaId.valueOf(builder.getSourceGamma()),ArtifactId.valueOf(builder.getArtId()),builder.getTxDelta(),builder.getModType(),""String_Node_Str"",""String_Node_Str"",isHistorical,changeArtifact,delta);
      }
 else       if (builder instanceof AttributeChangeBuilder) {
        AttributeChangeBuilder attrBuilder=(AttributeChangeBuilder)builder;
        toReturn=new AttributeChange(branch,GammaId.valueOf(attrBuilder.getSourceGamma()),ArtifactId.valueOf(attrBuilder.getArtId()),attrBuilder.getTxDelta(),attrBuilder.getModType(),attrBuilder.getIsValue(),attrBuilder.getWasValue(),AttributeId.valueOf(attrBuilder.getAttrId()),attrBuilder.getAttributeType(),attrBuilder.getArtModType(),isHistorical,changeArtifact,delta);
      }
 else       if (builder instanceof RelationChangeBuilder) {
        RelationChangeBuilder relBuilder=(RelationChangeBuilder)builder;
        Artifact bArtifact=loadedMap.get(builder.getTxDelta().getEndTx(),relBuilder.getbArtId());
        toReturn=new RelationChange(branch,GammaId.valueOf(builder.getSourceGamma()),ArtifactId.valueOf(builder.getArtId()),builder.getTxDelta(),builder.getModType(),ArtifactId.valueOf(relBuilder.getbArtId()),RelationId.valueOf(relBuilder.getRelLinkId()),relBuilder.getRationale(),""String_Node_Str"",relBuilder.getRelationType(),isHistorical,changeArtifact,delta,bArtifact);
      }
    }
 else {
      toReturn=new ArtifactChange(branch,GammaId.valueOf(builder.getSourceGamma()),ArtifactId.valueOf(builder.getArtId()),builder.getTxDelta(),builder.getModType(),""String_Node_Str"",""String_Node_Str"",isHistorical,null,null);
    }
    changes.add(toReturn);
  }
  return changes;
}","private Collection<Change> getChanges(BranchId branch,boolean isHistorical,List<ChangeBuilder> changeBuilders) throws OseeCoreException {
  CompositeKeyHashMap<TransactionToken,Integer,Artifact> loadedMap=getBulkLoadedArtifacts(branch,isHistorical,changeBuilders);
  Collection<Change> changes=new ArrayList<>();
  for (  ChangeBuilder builder : changeBuilders) {
    Change toReturn=null;
    Artifact changeArtifact=loadedMap.get(builder.getTxDelta().getEndTx(),builder.getArtId());
    if (changeArtifact != null) {
      ArtifactDelta delta=new ArtifactDelta(builder.getTxDelta(),changeArtifact,null);
      if (builder instanceof ArtifactChangeBuilder) {
        toReturn=new ArtifactChange(branch,GammaId.valueOf(builder.getSourceGamma()),ArtifactId.valueOf(builder.getArtId()),builder.getTxDelta(),builder.getModType(),""String_Node_Str"",""String_Node_Str"",isHistorical,changeArtifact,delta);
      }
 else       if (builder instanceof AttributeChangeBuilder) {
        AttributeChangeBuilder attrBuilder=(AttributeChangeBuilder)builder;
        toReturn=new AttributeChange(branch,GammaId.valueOf(attrBuilder.getSourceGamma()),ArtifactId.valueOf(attrBuilder.getArtId()),attrBuilder.getTxDelta(),attrBuilder.getModType(),attrBuilder.getIsValue(),attrBuilder.getWasValue(),AttributeId.valueOf(attrBuilder.getAttrId()),attrBuilder.getAttributeType(),attrBuilder.getArtModType(),isHistorical,changeArtifact,delta);
      }
 else       if (builder instanceof RelationChangeBuilder) {
        RelationChangeBuilder relBuilder=(RelationChangeBuilder)builder;
        Artifact bArtifact=loadedMap.get(builder.getTxDelta().getEndTx(),relBuilder.getbArtId());
        toReturn=new RelationChange(branch,GammaId.valueOf(builder.getSourceGamma()),ArtifactId.valueOf(builder.getArtId()),builder.getTxDelta(),builder.getModType(),ArtifactId.valueOf(relBuilder.getbArtId()),RelationId.valueOf(Long.valueOf(relBuilder.getRelLinkId())),relBuilder.getRationale(),""String_Node_Str"",relBuilder.getRelationType(),isHistorical,changeArtifact,delta,bArtifact);
      }
    }
 else {
      toReturn=new ArtifactChange(branch,GammaId.valueOf(builder.getSourceGamma()),ArtifactId.valueOf(builder.getArtId()),builder.getTxDelta(),builder.getModType(),""String_Node_Str"",""String_Node_Str"",isHistorical,null,null);
    }
    changes.add(toReturn);
  }
  return changes;
}",0.997008547008547
96722,"@Ignore @Test public void test(){
  ChangeItem item;
  if (itemType == ItemType.artifact) {
    item=ChangeItemUtil.newArtifactChange(ArtifactId.valueOf(0),ArtifactTypeId.valueOf(0),GAMMA,ModificationType.MODIFIED,ApplicabilityToken.BASE);
  }
 else {
    item=ChangeItemUtil.newAttributeChange(AttributeId.valueOf(0),AttributeTypeId.valueOf(0),ArtifactId.valueOf(0),GAMMA,ModificationType.MODIFIED,""String_Node_Str"",ApplicabilityToken.BASE);
  }
  buildTestCase(GAMMA,item);
  Assert.assertNotNull(testMessage,null);
}","@Ignore @Test public void test(){
  ChangeItem item;
  if (itemType == ItemType.artifact) {
    item=ChangeItemUtil.newArtifactChange(ArtifactId.SENTINEL,ArtifactTypeId.SENTINEL,GAMMA,ModificationType.MODIFIED,ApplicabilityToken.BASE);
  }
 else {
    item=ChangeItemUtil.newAttributeChange(AttributeId.SENTINEL,AttributeTypeId.SENTINEL,ArtifactId.SENTINEL,GAMMA,ModificationType.MODIFIED,""String_Node_Str"",ApplicabilityToken.BASE);
  }
  buildTestCase(GAMMA,item);
  Assert.assertNotNull(testMessage,null);
}",0.8249027237354085
96723,"/** 
 * create an artifact_deleted attribute who's artifact needs to be introduced deleted
 */
private static Object[] testCase_artifactDeletedAttribute(){
  List<ChangeItem> changes=new LinkedList<>();
  final ArtifactId artId=ArtifactId.valueOf(3);
  HashMap<Long,ApplicabilityToken> applicMap=new HashMap<>();
  applicMap.put(1L,ApplicabilityToken.BASE);
  ChangeItem ci1=ChangeItemUtil.newAttributeChange(AttributeId.valueOf(22),AttributeTypeId.valueOf(2),artId,GammaId.valueOf(4L),ModificationType.ARTIFACT_DELETED,Strings.EMPTY_STRING,ApplicabilityToken.BASE);
  changes.add(ci1);
  List<AttributeData> attrDatas=new LinkedList<>();
  AttributeData attrData1=createAttributeData(artId.getId().intValue(),33,1L,ModificationType.ARTIFACT_DELETED);
  AttributeData attrData2=createAttributeData(artId.getId().intValue(),44 + 1,67L,ModificationType.ARTIFACT_DELETED);
  attrDatas.add(attrData1);
  attrDatas.add(attrData2);
  List<ArtifactData> artData=new LinkedList<>();
  ArtifactData artData1=createArtifactData(artId.getId().intValue(),89L,ModificationType.DELETED);
  artData.add(artData1);
  List<ChangeItem> expected=new LinkedList<>();
  expected.add(createExpected(attrData1));
  expected.add(createExpected(attrData2));
  expected.add(createExpected(artData1));
  return new Object[]{changes,expected,attrDatas,artData,null,null,applicMap};
}","/** 
 * create an artifact_deleted attribute who's artifact needs to be introduced deleted
 */
private static Object[] testCase_artifactDeletedAttribute(){
  List<ChangeItem> changes=new LinkedList<>();
  final ArtifactId artId=ArtifactId.valueOf(3);
  HashMap<Long,ApplicabilityToken> applicMap=new HashMap<>();
  applicMap.put(1L,ApplicabilityToken.BASE);
  ChangeItem ci1=ChangeItemUtil.newAttributeChange(AttributeId.valueOf(22),AttributeTypeId.valueOf(2L),artId,GammaId.valueOf(4L),ModificationType.ARTIFACT_DELETED,Strings.EMPTY_STRING,ApplicabilityToken.BASE);
  changes.add(ci1);
  List<AttributeData> attrDatas=new LinkedList<>();
  AttributeData attrData1=createAttributeData(artId.getId().intValue(),33,1L,ModificationType.ARTIFACT_DELETED);
  AttributeData attrData2=createAttributeData(artId.getId().intValue(),44 + 1,67L,ModificationType.ARTIFACT_DELETED);
  attrDatas.add(attrData1);
  attrDatas.add(attrData2);
  List<ArtifactData> artData=new LinkedList<>();
  ArtifactData artData1=createArtifactData(artId.getId().intValue(),89L,ModificationType.DELETED);
  artData.add(artData1);
  List<ChangeItem> expected=new LinkedList<>();
  expected.add(createExpected(attrData1));
  expected.add(createExpected(attrData2));
  expected.add(createExpected(artData1));
  return new Object[]{changes,expected,attrDatas,artData,null,null,applicMap};
}",0.99963113242346
96724,"/** 
 * create a relation change item who's artifact and other attributes and relations need to be introduced
 */
private static Object[] testCase_missingRelation(){
  List<ChangeItem> changes=new LinkedList<>();
  final int ci1AttrId=22;
  final long missingGamma=9L;
  long artGamma=7L;
  RelationId relId=RelationId.valueOf(6);
  int artA=65;
  int artB=2;
  GammaId srcGamma=GammaId.valueOf(7L);
  HashMap<Long,ApplicabilityToken> applicMap=new HashMap<>();
  applicMap.put(1L,ApplicabilityToken.BASE);
  ChangeItem ci1=ChangeItemUtil.newRelationChange(relId,RelationTypeId.valueOf(0),srcGamma,ModificationType.NEW,ArtifactId.valueOf(artA),ArtifactId.valueOf(artB),""String_Node_Str"",ApplicabilityToken.BASE);
  changes.add(ci1);
  List<AttributeData> attrDatas=new LinkedList<>();
  AttributeData attrData1=createAttributeData(artA,ci1AttrId,1L,ModificationType.MODIFIED);
  AttributeData attrData2=createAttributeData(artA,ci1AttrId + 1,missingGamma,ModificationType.INTRODUCED);
  attrDatas.add(attrData1);
  attrDatas.add(attrData2);
  List<ArtifactData> artData=new LinkedList<>();
  ArtifactData artData1=createArtifactData(artA,artGamma,ModificationType.NEW);
  artData.add(artData1);
  List<RelationData> relDatas=new LinkedList<>();
  RelationData relData1=createRelationData(11,artA,artB + 1,88,ModificationType.NEW);
  relDatas.add(relData1);
  List<ArtifactData> destArtData=new LinkedList<>();
  ArtifactData destArt=createArtifactData(artB + 1,99,ModificationType.NEW);
  destArtData.add(destArt);
  List<ChangeItem> expected=new LinkedList<>();
  expected.add(createExpected(attrData1));
  expected.add(createExpected(attrData2));
  expected.add(createExpected(artData1));
  expected.add(createExpected(relData1));
  return new Object[]{changes,expected,attrDatas,artData,relDatas,destArtData,applicMap};
}","/** 
 * create a relation change item who's artifact and other attributes and relations need to be introduced
 */
private static Object[] testCase_missingRelation(){
  List<ChangeItem> changes=new LinkedList<>();
  final int ci1AttrId=22;
  final long missingGamma=9L;
  long artGamma=7L;
  RelationId relId=RelationId.valueOf(6L);
  int artA=65;
  int artB=2;
  GammaId srcGamma=GammaId.valueOf(7L);
  HashMap<Long,ApplicabilityToken> applicMap=new HashMap<>();
  applicMap.put(1L,ApplicabilityToken.BASE);
  ChangeItem ci1=ChangeItemUtil.newRelationChange(relId,RelationTypeId.SENTINEL,srcGamma,ModificationType.NEW,ArtifactId.valueOf(artA),ArtifactId.valueOf(artB),""String_Node_Str"",ApplicabilityToken.BASE);
  changes.add(ci1);
  List<AttributeData> attrDatas=new LinkedList<>();
  AttributeData attrData1=createAttributeData(artA,ci1AttrId,1L,ModificationType.MODIFIED);
  AttributeData attrData2=createAttributeData(artA,ci1AttrId + 1,missingGamma,ModificationType.INTRODUCED);
  attrDatas.add(attrData1);
  attrDatas.add(attrData2);
  List<ArtifactData> artData=new LinkedList<>();
  ArtifactData artData1=createArtifactData(artA,artGamma,ModificationType.NEW);
  artData.add(artData1);
  List<RelationData> relDatas=new LinkedList<>();
  RelationData relData1=createRelationData(11,artA,artB + 1,88,ModificationType.NEW);
  relDatas.add(relData1);
  List<ArtifactData> destArtData=new LinkedList<>();
  ArtifactData destArt=createArtifactData(artB + 1,99,ModificationType.NEW);
  destArtData.add(destArt);
  List<ChangeItem> expected=new LinkedList<>();
  expected.add(createExpected(attrData1));
  expected.add(createExpected(attrData2));
  expected.add(createExpected(artData1));
  expected.add(createExpected(relData1));
  return new Object[]{changes,expected,attrDatas,artData,relDatas,destArtData,applicMap};
}",0.9947902385522348
96725,"private static ChangeItem createExpected(ArtifactData data){
  return ChangeItemUtil.newArtifactChange(ArtifactId.valueOf(data.getLocalId()),ArtifactTypeId.valueOf(0),GammaId.valueOf(data.getVersion().getGammaId()),determineModType(data),ApplicabilityToken.BASE);
}","private static ChangeItem createExpected(ArtifactData data){
  return ChangeItemUtil.newArtifactChange(ArtifactId.valueOf(data.getLocalId()),ArtifactTypeId.SENTINEL,GammaId.valueOf(data.getVersion().getGammaId()),determineModType(data),ApplicabilityToken.BASE);
}",0.9659090909090908
96726,"/** 
 * create a deleted attribute who's artifact needs to be introduced
 */
private static Object[] testCase_deletedAttribute(){
  List<ChangeItem> changes=new LinkedList<>();
  final int artId=3;
  HashMap<Long,ApplicabilityToken> applicMap=new HashMap<>();
  applicMap.put(1L,ApplicabilityToken.BASE);
  ChangeItem ci1=ChangeItemUtil.newAttributeChange(AttributeId.valueOf(22),AttributeTypeId.valueOf(2),ArtifactId.valueOf(artId),GammaId.valueOf(4L),ModificationType.DELETED,Strings.EMPTY_STRING,ApplicabilityToken.BASE);
  changes.add(ci1);
  List<AttributeData> attrDatas=new LinkedList<>();
  AttributeData attrData1=createAttributeData(artId,33,1L,ModificationType.MODIFIED);
  AttributeData attrData2=createAttributeData(artId,44 + 1,67L,ModificationType.NEW);
  attrDatas.add(attrData1);
  attrDatas.add(attrData2);
  List<ArtifactData> artData=new LinkedList<>();
  ArtifactData artData1=createArtifactData(artId,89L,ModificationType.NEW);
  artData.add(artData1);
  List<ChangeItem> expected=new LinkedList<>();
  expected.add(createExpected(attrData1));
  expected.add(createExpected(attrData2));
  expected.add(createExpected(artData1));
  return new Object[]{changes,expected,attrDatas,artData,null,null,applicMap};
}","/** 
 * create a deleted attribute who's artifact needs to be introduced
 */
private static Object[] testCase_deletedAttribute(){
  List<ChangeItem> changes=new LinkedList<>();
  final int artId=3;
  HashMap<Long,ApplicabilityToken> applicMap=new HashMap<>();
  applicMap.put(1L,ApplicabilityToken.BASE);
  ChangeItem ci1=ChangeItemUtil.newAttributeChange(AttributeId.valueOf(22),AttributeTypeId.valueOf(2L),ArtifactId.valueOf(artId),GammaId.valueOf(4L),ModificationType.DELETED,Strings.EMPTY_STRING,ApplicabilityToken.BASE);
  changes.add(ci1);
  List<AttributeData> attrDatas=new LinkedList<>();
  AttributeData attrData1=createAttributeData(artId,33,1L,ModificationType.MODIFIED);
  AttributeData attrData2=createAttributeData(artId,44 + 1,67L,ModificationType.NEW);
  attrDatas.add(attrData1);
  attrDatas.add(attrData2);
  List<ArtifactData> artData=new LinkedList<>();
  ArtifactData artData1=createArtifactData(artId,89L,ModificationType.NEW);
  artData.add(artData1);
  List<ChangeItem> expected=new LinkedList<>();
  expected.add(createExpected(attrData1));
  expected.add(createExpected(attrData2));
  expected.add(createExpected(artData1));
  return new Object[]{changes,expected,attrDatas,artData,null,null,applicMap};
}",0.9995939910678034
96727,"/** 
 * This tests when a modified attribute causes its artifact and non-modified attribute to be introduced
 */
private static Object[] testCase_missingAttribute(){
  List<ChangeItem> changes=new LinkedList<>();
  final int ci1AttrId=1;
  final int artId=3;
  final long missingGamma=9L;
  long artGamma=7L;
  HashMap<Long,ApplicabilityToken> applicMap=new HashMap<>();
  applicMap.put(1L,ApplicabilityToken.BASE);
  ChangeItem ci1=ChangeItemUtil.newAttributeChange(AttributeId.valueOf(ci1AttrId),AttributeTypeId.valueOf(2),ArtifactId.valueOf(artId),GammaId.valueOf(4L),ModificationType.MODIFIED,Strings.EMPTY_STRING,ApplicabilityToken.BASE);
  changes.add(ci1);
  List<AttributeData> attrDatas=new LinkedList<>();
  AttributeData attrData1=createAttributeData(artId,ci1AttrId,1L,ModificationType.MODIFIED);
  AttributeData attrData2=createAttributeData(artId,ci1AttrId + 1,missingGamma,ModificationType.INTRODUCED);
  attrDatas.add(attrData1);
  attrDatas.add(attrData2);
  List<ArtifactData> artData=new LinkedList<>();
  ArtifactData artData1=createArtifactData(artId,artGamma,ModificationType.NEW);
  artData.add(artData1);
  List<ChangeItem> expected=new LinkedList<>();
  expected.add(createExpected(attrData2));
  expected.add(createExpected(artData1));
  return new Object[]{changes,expected,attrDatas,artData,null,null,applicMap};
}","/** 
 * This tests when a modified attribute causes its artifact and non-modified attribute to be introduced
 */
private static Object[] testCase_missingAttribute(){
  List<ChangeItem> changes=new LinkedList<>();
  final int ci1AttrId=1;
  final int artId=3;
  final long missingGamma=9L;
  long artGamma=7L;
  HashMap<Long,ApplicabilityToken> applicMap=new HashMap<>();
  applicMap.put(1L,ApplicabilityToken.BASE);
  ChangeItem ci1=ChangeItemUtil.newAttributeChange(AttributeId.valueOf(ci1AttrId),AttributeTypeId.valueOf(2L),ArtifactId.valueOf(artId),GammaId.valueOf(4L),ModificationType.MODIFIED,Strings.EMPTY_STRING,ApplicabilityToken.BASE);
  changes.add(ci1);
  List<AttributeData> attrDatas=new LinkedList<>();
  AttributeData attrData1=createAttributeData(artId,ci1AttrId,1L,ModificationType.MODIFIED);
  AttributeData attrData2=createAttributeData(artId,ci1AttrId + 1,missingGamma,ModificationType.INTRODUCED);
  attrDatas.add(attrData1);
  attrDatas.add(attrData2);
  List<ArtifactData> artData=new LinkedList<>();
  ArtifactData artData1=createArtifactData(artId,artGamma,ModificationType.NEW);
  artData.add(artData1);
  List<ChangeItem> expected=new LinkedList<>();
  expected.add(createExpected(attrData2));
  expected.add(createExpected(artData1));
  return new Object[]{changes,expected,attrDatas,artData,null,null,applicMap};
}",0.9996275605214152
96728,"public List<ChangeItem> doWork() throws Exception {
  Map<ArtifactId,ChangeItem> artifactChanges=new HashMap<>();
  for (  ChangeItem item : changeItems) {
    if (item.getChangeType().isArtifactChange()) {
      artifactChanges.put(item.getArtId(),item);
    }
  }
  List<ChangeItem> attrItems=new ArrayList<>();
  Map<ArtifactId,ChangeItem> syntheticArtifactChanges=new HashMap<>();
  for (  ChangeItem item : changeItems) {
    if (item.getChangeType().isAttributeChange()) {
      ChangeItem attributeChange=item;
      ArtifactId artIdToCheck=attributeChange.getArtId();
      ChangeItem artifactChange=artifactChanges.get(artIdToCheck);
      if (artifactChange == null) {
        artifactChange=syntheticArtifactChanges.get(artIdToCheck);
        if (artifactChange == null) {
          artifactChange=ChangeItemUtil.newArtifactChange(artIdToCheck,ArtifactTypeId.valueOf(-1),GammaId.valueOf(-1),null,null);
          syntheticArtifactChanges.put(artIdToCheck,artifactChange);
          artifactChange.setSynthetic(true);
        }
        attrItems.add(attributeChange);
        updateArtifactChangeItem(artifactChange,attributeChange);
      }
    }
  }
  for (  ChangeItem change : syntheticArtifactChanges.values()) {
    if (isAllowableChange(change.getIgnoreType())) {
      changeItems.add(change);
    }
  }
  return changeItems;
}","public List<ChangeItem> doWork() throws Exception {
  Map<ArtifactId,ChangeItem> artifactChanges=new HashMap<>();
  for (  ChangeItem item : changeItems) {
    if (item.getChangeType().isArtifactChange()) {
      artifactChanges.put(item.getArtId(),item);
    }
  }
  List<ChangeItem> attrItems=new ArrayList<>();
  Map<ArtifactId,ChangeItem> syntheticArtifactChanges=new HashMap<>();
  for (  ChangeItem item : changeItems) {
    if (item.getChangeType().isAttributeChange()) {
      ChangeItem attributeChange=item;
      ArtifactId artIdToCheck=attributeChange.getArtId();
      ChangeItem artifactChange=artifactChanges.get(artIdToCheck);
      if (artifactChange == null) {
        artifactChange=syntheticArtifactChanges.get(artIdToCheck);
        if (artifactChange == null) {
          artifactChange=ChangeItemUtil.newArtifactChange(artIdToCheck,ArtifactTypeId.SENTINEL,GammaId.valueOf(-1),null,null);
          syntheticArtifactChanges.put(artIdToCheck,artifactChange);
          artifactChange.setSynthetic(true);
        }
        attrItems.add(attributeChange);
        updateArtifactChangeItem(artifactChange,attributeChange);
      }
    }
  }
  for (  ChangeItem change : syntheticArtifactChanges.values()) {
    if (isAllowableChange(change.getIgnoreType())) {
      changeItems.add(change);
    }
  }
  return changeItems;
}",0.9929289170078154
96729,"private ChangeItem createRelationChangeItem(RelationData data) throws OseeCoreException {
  ApplicabilityId appId=data.getApplicabilityId();
  return ChangeItemUtil.newRelationChange(RelationId.valueOf(data.getLocalId()),RelationTypeId.valueOf(data.getTypeUuid()),GammaId.valueOf(data.getVersion().getGammaId()),determineModType(data),ArtifactId.valueOf(data.getArtIdA()),ArtifactId.valueOf(data.getArtIdB()),data.getRationale(),getApplicabilityToken(appId));
}","private ChangeItem createRelationChangeItem(RelationData data) throws OseeCoreException {
  ApplicabilityId appId=data.getApplicabilityId();
  return ChangeItemUtil.newRelationChange(RelationId.valueOf(Long.valueOf(data.getLocalId())),RelationTypeId.valueOf(data.getTypeUuid()),GammaId.valueOf(data.getVersion().getGammaId()),determineModType(data),ArtifactId.valueOf(data.getArtIdA()),ArtifactId.valueOf(data.getArtIdB()),data.getRationale(),getApplicabilityToken(appId));
}",0.9551282051282052
96730,"public void initDispoItem(DispoItemData itemToInit){
  if (itemToInit.getAnnotationsList() == null) {
    itemToInit.setAnnotationsList(new ArrayList<DispoAnnotationData>());
  }
  if (itemToInit.getDiscrepanciesList() == null) {
    itemToInit.setDiscrepanciesList(new HashMap<String,Discrepancy>());
  }
  if (itemToInit.getDiscrepanciesList().size() == 0) {
    itemToInit.setStatus(DispoStrings.Item_Pass);
  }
 else {
    itemToInit.setStatus(dispoConnector.getItemStatus(itemToInit));
  }
  if (!Strings.isValid(itemToInit.getAssignee())) {
    itemToInit.setAssignee(""String_Node_Str"");
  }
  itemToInit.setAborted(false);
  itemToInit.setNeedsRerun(false);
  itemToInit.setNeedsReview(false);
}","public void initDispoItem(DispoItemData itemToInit){
  if (itemToInit.getAnnotationsList() == null) {
    itemToInit.setAnnotationsList(new ArrayList<DispoAnnotationData>());
  }
  if (itemToInit.getDiscrepanciesList() == null) {
    itemToInit.setDiscrepanciesList(new HashMap<String,Discrepancy>());
  }
  if (itemToInit.getDiscrepanciesList().size() == 0) {
    itemToInit.setStatus(DispoStrings.Item_Pass);
  }
 else {
    itemToInit.setStatus(dispoConnector.getItemStatus(itemToInit));
  }
  if (!Strings.isValid(itemToInit.getAssignee())) {
    itemToInit.setAssignee(""String_Node_Str"");
  }
  itemToInit.setNeedsRerun(false);
  itemToInit.setNeedsReview(false);
}",0.9591836734693876
96731,"@Override protected Composite createFilterControls(Composite parent){
  ImageDescriptor descriptor=AbstractUIPlugin.imageDescriptorFromPlugin(PlatformUI.PLUGIN_ID,""String_Node_Str"");
  if (descriptor == null) {
    descriptor=ImageManager.getImageDescriptor(FrameworkImage.CLEAR_CO);
  }
  if (descriptor != null) {
    JFaceResources.getImageRegistry().put(CLEAR_ICON,descriptor);
  }
  ImageDescriptor descriptor2=AbstractUIPlugin.imageDescriptorFromPlugin(PlatformUI.PLUGIN_ID,""String_Node_Str"");
  if (descriptor == null) {
    descriptor2=descriptor;
  }
  if (descriptor2 != null) {
    JFaceResources.getImageRegistry().put(DISABLED_CLEAR_ICON,descriptor2);
  }
  return super.createFilterControls(parent);
}","@Override protected Composite createFilterControls(Composite parent){
  ImageDescriptor descriptor=AbstractUIPlugin.imageDescriptorFromPlugin(PlatformUI.PLUGIN_ID,""String_Node_Str"");
  if (descriptor == null) {
    descriptor=ImageManager.getImageDescriptor(FrameworkImage.CLEAR_CO);
  }
  if (descriptor != null) {
    JFaceResources.getImageRegistry().put(CLEAR_ICON,descriptor);
  }
  ImageDescriptor descriptor2=AbstractUIPlugin.imageDescriptorFromPlugin(PlatformUI.PLUGIN_ID,""String_Node_Str"");
  if (descriptor2 == null) {
    descriptor2=descriptor;
  }
  if (descriptor2 != null) {
    JFaceResources.getImageRegistry().put(DISABLED_CLEAR_ICON,descriptor2);
  }
  return super.createFilterControls(parent);
}",0.9993011879804332
96732,"/** 
 * Performs the deletion functionality
 */
private void performDeleteRelation(IStructuredSelection selection){
  Object[] objects=selection.toArray();
  for (  Object object : objects) {
    if (hasWriteRelationTypePermission(artifact,object)) {
      if (object instanceof WrapperForRelationLink) {
        WrapperForRelationLink wrapper=(WrapperForRelationLink)object;
        try {
          RelationManager.deleteRelation(wrapper.getRelationType(),wrapper.getArtifactA(),wrapper.getArtifactB());
          Object parent=((ITreeContentProvider)treeViewer.getContentProvider()).getParent(object);
          if (parent != null) {
            treeViewer.refresh(parent);
          }
 else {
            treeViewer.refresh();
          }
        }
 catch (        OseeCoreException ex) {
          OseeLog.log(Activator.class,Level.SEVERE,ex);
        }
      }
 else       if (object instanceof RelationTypeSideSorter) {
        RelationTypeSideSorter group=(RelationTypeSideSorter)object;
        try {
          RelationManager.deleteRelations(artifact,group.getRelationType(),group.getSide());
          treeViewer.refresh(group);
        }
 catch (        OseeCoreException ex) {
          OseeLog.log(Activator.class,Level.SEVERE,ex);
        }
      }
    }
  }
  editor.onDirtied();
}","/** 
 * Performs the deletion functionality
 */
private void performDeleteRelation(IStructuredSelection selection){
  Object[] objects=selection.toArray();
  for (  Object object : objects) {
    if (hasWriteRelationTypePermission(artifact,object)) {
      if (object instanceof WrapperForRelationLink) {
        WrapperForRelationLink wrapper=(WrapperForRelationLink)object;
        try {
          RelationManager.deleteRelation(wrapper.getRelationType(),wrapper.getArtifactA(),wrapper.getArtifactB());
          Object parent=((ITreeContentProvider)treeViewer.getContentProvider()).getParent(wrapper);
          refreshParent(parent);
        }
 catch (        OseeCoreException ex) {
          OseeLog.log(Activator.class,Level.SEVERE,ex);
        }
      }
 else       if (object instanceof RelationTypeSideSorter) {
        RelationTypeSideSorter group=(RelationTypeSideSorter)object;
        try {
          RelationManager.deleteRelations(artifact,group.getRelationType(),group.getSide());
          refreshParent(group);
        }
 catch (        OseeCoreException ex) {
          OseeLog.log(Activator.class,Level.SEVERE,ex);
        }
      }
    }
  }
  editor.onDirtied();
}",0.9407974224728152
96733,"private void refreshLockImage(){
  boolean noBranch=false, someAccessControlSet=false;
  BranchId branch=null;
  try {
    branch=teamArt.getWorkingBranch();
  }
 catch (  OseeCoreException ex) {
    OseeLog.log(Activator.class,Level.SEVERE,ex);
  }
  if (branch.isInvalid()) {
    noBranch=true;
  }
 else {
    someAccessControlSet=!AccessControlManager.getAccessControlList(branch).isEmpty();
  }
  lockBranchButton.setImage(ImageManager.getImage(noBranch || someAccessControlSet ? FrameworkImage.LOCK_LOCKED : FrameworkImage.LOCK_UNLOCKED));
  lockBranchButton.redraw();
  lockBranchButton.getParent().redraw();
}","private void refreshLockImage(){
  boolean noBranch=false, someAccessControlSet=false;
  BranchId branch=BranchId.SENTINEL;
  try {
    branch=teamArt.getWorkingBranch();
  }
 catch (  OseeCoreException ex) {
    OseeLog.log(Activator.class,Level.SEVERE,ex);
  }
  if (branch.isInvalid()) {
    noBranch=true;
  }
 else {
    someAccessControlSet=!AccessControlManager.getAccessControlList(branch).isEmpty();
  }
  lockBranchButton.setImage(ImageManager.getImage(noBranch || someAccessControlSet ? FrameworkImage.LOCK_LOCKED : FrameworkImage.LOCK_UNLOCKED));
  lockBranchButton.redraw();
  lockBranchButton.getParent().redraw();
}",0.983159582999198
96734,"private void refreshLockImage(Button button){
  boolean noBranch=false, someAccessControlSet=false;
  BranchId branch=null;
  try {
    branch=getTeamArt().getWorkingBranch();
  }
 catch (  OseeCoreException ex) {
    OseeLog.log(Activator.class,Level.SEVERE,ex);
  }
  if (branch.isInvalid()) {
    noBranch=true;
  }
 else {
    someAccessControlSet=!AccessControlManager.getAccessControlList(branch).isEmpty();
  }
  button.setImage(ImageManager.getImage(noBranch || someAccessControlSet ? FrameworkImage.LOCK_LOCKED : FrameworkImage.LOCK_UNLOCKED));
  button.redraw();
  button.getParent().redraw();
}","private void refreshLockImage(Button button){
  boolean noBranch=false, someAccessControlSet=false;
  BranchId branch=BranchId.SENTINEL;
  try {
    branch=getTeamArt().getWorkingBranch();
  }
 catch (  OseeCoreException ex) {
    OseeLog.log(Activator.class,Level.SEVERE,ex);
  }
  if (branch.isInvalid()) {
    noBranch=true;
  }
 else {
    someAccessControlSet=!AccessControlManager.getAccessControlList(branch).isEmpty();
  }
  button.setImage(ImageManager.getImage(noBranch || someAccessControlSet ? FrameworkImage.LOCK_LOCKED : FrameworkImage.LOCK_UNLOCKED));
  button.redraw();
  button.getParent().redraw();
}",0.982829108748978
96735,"public final ApplicabilityGrammarParser.compound_value_return compound_value() throws RecognitionException {
  ApplicabilityGrammarParser.compound_value_return retval=new ApplicabilityGrammarParser.compound_value_return();
  retval.start=input.LT(1);
  CommonTree root_0=null;
  ApplicabilityGrammarParser.value_return value22=null;
  ApplicabilityGrammarParser.multiple_compounds_return multiple_compounds23=null;
  try {
    int alt9=2;
    int LA9_0=input.LA(1);
    if (((LA9_0 >= OR && LA9_0 <= AND))) {
      alt9=1;
    }
 else     if ((LA9_0 == 12)) {
      alt9=2;
    }
 else {
      NoViableAltException nvae=new NoViableAltException(""String_Node_Str"",9,0,input);
      throw nvae;
    }
switch (alt9) {
case 1:
{
        root_0=(CommonTree)adaptor.nil();
        int cnt8=0;
        loop8:         do {
          int alt8=2;
          int LA8_0=input.LA(1);
          if (((LA8_0 >= OR && LA8_0 <= AND))) {
            alt8=1;
          }
switch (alt8) {
case 1:
{
              pushFollow(FOLLOW_value_in_compound_value292);
              value22=value();
              state._fsp--;
              adaptor.addChild(root_0,value22.getTree());
            }
          break;
default :
        if (cnt8 >= 1)         break loop8;
      EarlyExitException eee=new EarlyExitException(8,input);
    throw eee;
}
cnt8++;
}
 while (true);
}
break;
case 2:
{
root_0=(CommonTree)adaptor.nil();
pushFollow(FOLLOW_multiple_compounds_in_compound_value297);
multiple_compounds23=multiple_compounds();
state._fsp--;
adaptor.addChild(root_0,multiple_compounds23.getTree());
}
break;
}
retval.stop=input.LT(-1);
retval.tree=(CommonTree)adaptor.rulePostProcessing(root_0);
adaptor.setTokenBoundaries(retval.tree,retval.start,retval.stop);
}
 catch (RecognitionException re) {
reportError(re);
recover(input,re);
retval.tree=(CommonTree)adaptor.errorNode(input,retval.start,input.LT(-1),re);
}
 finally {
}
return retval;
}","public final ApplicabilityGrammarParser.compound_value_return compound_value() throws RecognitionException {
  ApplicabilityGrammarParser.compound_value_return retval=new ApplicabilityGrammarParser.compound_value_return();
  retval.start=input.LT(1);
  CommonTree root_0=null;
  ApplicabilityGrammarParser.value_return value22=null;
  ApplicabilityGrammarParser.multiple_compounds_return multiple_compounds23=null;
  try {
    int alt9=2;
    int LA9_0=input.LA(1);
    if (((LA9_0 >= OR && LA9_0 <= AND))) {
      alt9=1;
    }
 else     if ((LA9_0 == 12)) {
      alt9=2;
    }
 else {
      NoViableAltException nvae=new NoViableAltException(""String_Node_Str"",9,0,input);
      throw nvae;
    }
switch (alt9) {
case 1:
{
        root_0=(CommonTree)adaptor.nil();
        int cnt8=0;
        loop8:         do {
          int alt8=2;
          int LA8_0=input.LA(1);
          if (((LA8_0 >= OR && LA8_0 <= AND))) {
            alt8=1;
          }
switch (alt8) {
case 1:
{
              pushFollow(FOLLOW_value_in_compound_value292);
              value22=value();
              state._fsp--;
              adaptor.addChild(root_0,value22.getTree());
            }
          break;
default :
        if (cnt8 >= 1) {
          break loop8;
        }
      EarlyExitException eee=new EarlyExitException(8,input);
    throw eee;
}
cnt8++;
}
 while (true);
}
break;
case 2:
{
root_0=(CommonTree)adaptor.nil();
pushFollow(FOLLOW_multiple_compounds_in_compound_value297);
multiple_compounds23=multiple_compounds();
state._fsp--;
adaptor.addChild(root_0,multiple_compounds23.getTree());
}
break;
}
retval.stop=input.LT(-1);
retval.tree=(CommonTree)adaptor.rulePostProcessing(root_0);
adaptor.setTokenBoundaries(retval.tree,retval.start,retval.stop);
}
 catch (RecognitionException re) {
reportError(re);
recover(input,re);
retval.tree=(CommonTree)adaptor.errorNode(input,retval.start,input.LT(-1),re);
}
 finally {
}
return retval;
}",0.9963617463617463
96736,"public final ApplicabilityGrammarParser.multiple_compounds_return multiple_compounds() throws RecognitionException {
  ApplicabilityGrammarParser.multiple_compounds_return retval=new ApplicabilityGrammarParser.multiple_compounds_return();
  retval.start=input.LT(1);
  CommonTree root_0=null;
  ApplicabilityGrammarParser.start_compound_return start_compound24=null;
  ApplicabilityGrammarParser.operator_return operator25=null;
  ApplicabilityGrammarParser.compound_value_return compound_value26=null;
  try {
{
      root_0=(CommonTree)adaptor.nil();
      pushFollow(FOLLOW_start_compound_in_multiple_compounds314);
      start_compound24=start_compound();
      state._fsp--;
      adaptor.addChild(root_0,start_compound24.getTree());
      pushFollow(FOLLOW_operator_in_multiple_compounds326);
      operator25=operator();
      state._fsp--;
      adaptor.addChild(root_0,operator25.getTree());
      featureId_values_map.get(featureId).add((operator25 != null ? input.toString(operator25.start,operator25.stop) : null));
      pushFollow(FOLLOW_compound_value_in_multiple_compounds340);
      compound_value26=compound_value();
      state._fsp--;
      adaptor.addChild(root_0,compound_value26.getTree());
    }
    retval.stop=input.LT(-1);
    retval.tree=(CommonTree)adaptor.rulePostProcessing(root_0);
    adaptor.setTokenBoundaries(retval.tree,retval.start,retval.stop);
  }
 catch (  RecognitionException re) {
    reportError(re);
    recover(input,re);
    retval.tree=(CommonTree)adaptor.errorNode(input,retval.start,input.LT(-1),re);
  }
 finally {
  }
  return retval;
}","public final ApplicabilityGrammarParser.multiple_compounds_return multiple_compounds() throws RecognitionException {
  ApplicabilityGrammarParser.multiple_compounds_return retval=new ApplicabilityGrammarParser.multiple_compounds_return();
  retval.start=input.LT(1);
  CommonTree root_0=null;
  ApplicabilityGrammarParser.start_compound_return start_compound24=null;
  ApplicabilityGrammarParser.operator_return operator25=null;
  ApplicabilityGrammarParser.compound_value_return compound_value26=null;
  try {
{
      root_0=(CommonTree)adaptor.nil();
      pushFollow(FOLLOW_start_compound_in_multiple_compounds314);
      start_compound24=start_compound();
      state._fsp--;
      adaptor.addChild(root_0,start_compound24.getTree());
      pushFollow(FOLLOW_operator_in_multiple_compounds326);
      operator25=operator();
      state._fsp--;
      adaptor.addChild(root_0,operator25.getTree());
      featureId_values_map.get(featureId).add((input.toString(operator25.start,operator25.stop)));
      pushFollow(FOLLOW_compound_value_in_multiple_compounds340);
      compound_value26=compound_value();
      state._fsp--;
      adaptor.addChild(root_0,compound_value26.getTree());
    }
    retval.stop=input.LT(-1);
    retval.tree=(CommonTree)adaptor.rulePostProcessing(root_0);
    adaptor.setTokenBoundaries(retval.tree,retval.start,retval.stop);
  }
 catch (  RecognitionException re) {
    reportError(re);
    recover(input,re);
    retval.tree=(CommonTree)adaptor.errorNode(input,retval.start,input.LT(-1),re);
  }
 finally {
  }
  return retval;
}",0.9752380952380952
96737,"public final ApplicabilityGrammarParser.operator_return operator() throws RecognitionException {
  ApplicabilityGrammarParser.operator_return retval=new ApplicabilityGrammarParser.operator_return();
  retval.start=input.LT(1);
  CommonTree root_0=null;
  Token set28=null;
  CommonTree set28_tree=null;
  try {
{
      root_0=(CommonTree)adaptor.nil();
      set28=(Token)input.LT(1);
      if (input.LA(1) == OR || input.LA(1) == AND) {
        input.consume();
        adaptor.addChild(root_0,(CommonTree)adaptor.create(set28));
        state.errorRecovery=false;
      }
 else {
        MismatchedSetException mse=new MismatchedSetException(null,input);
        throw mse;
      }
    }
    retval.stop=input.LT(-1);
    retval.tree=(CommonTree)adaptor.rulePostProcessing(root_0);
    adaptor.setTokenBoundaries(retval.tree,retval.start,retval.stop);
  }
 catch (  RecognitionException re) {
    reportError(re);
    recover(input,re);
    retval.tree=(CommonTree)adaptor.errorNode(input,retval.start,input.LT(-1),re);
  }
 finally {
  }
  return retval;
}","public final ApplicabilityGrammarParser.operator_return operator() throws RecognitionException {
  ApplicabilityGrammarParser.operator_return retval=new ApplicabilityGrammarParser.operator_return();
  retval.start=input.LT(1);
  CommonTree root_0=null;
  Token set28=null;
  CommonTree set28_tree=null;
  try {
{
      root_0=(CommonTree)adaptor.nil();
      set28=input.LT(1);
      if (input.LA(1) == OR || input.LA(1) == AND) {
        input.consume();
        adaptor.addChild(root_0,adaptor.create(set28));
        state.errorRecovery=false;
      }
 else {
        MismatchedSetException mse=new MismatchedSetException(null,input);
        throw mse;
      }
    }
    retval.stop=input.LT(-1);
    retval.tree=(CommonTree)adaptor.rulePostProcessing(root_0);
    adaptor.setTokenBoundaries(retval.tree,retval.start,retval.stop);
  }
 catch (  RecognitionException re) {
    reportError(re);
    recover(input,re);
    retval.tree=(CommonTree)adaptor.errorNode(input,retval.start,input.LT(-1),re);
  }
 finally {
  }
  return retval;
}",0.9909480705097664
96738,"public String[] getTokenNames(){
  return ApplicabilityGrammarParser.tokenNames;
}","@Override public String[] getTokenNames(){
  return ApplicabilityGrammarParser.tokenNames;
}",0.942528735632184
96739,"public Object getTree(){
  return tree;
}","@Override public Object getTree(){
  return tree;
}",0.8913043478260869
96740,"public final ApplicabilityGrammarParser.config_applicability_return config_applicability() throws RecognitionException {
  ApplicabilityGrammarParser.config_applicability_return retval=new ApplicabilityGrammarParser.config_applicability_return();
  retval.start=input.LT(1);
  CommonTree root_0=null;
  Token string_literal5=null;
  Token char_literal7=null;
  ApplicabilityGrammarParser.config_expressions_return config_expressions6=null;
  CommonTree string_literal5_tree=null;
  CommonTree char_literal7_tree=null;
  try {
{
      root_0=(CommonTree)adaptor.nil();
      string_literal5=(Token)match(input,8,FOLLOW_8_in_config_applicability118);
      string_literal5_tree=(CommonTree)adaptor.create(string_literal5);
      adaptor.addChild(root_0,string_literal5_tree);
      int cnt2=0;
      loop2:       do {
        int alt2=2;
        int LA2_0=input.LA(1);
        if (((LA2_0 >= OR && LA2_0 <= ID))) {
          alt2=1;
        }
switch (alt2) {
case 1:
{
            pushFollow(FOLLOW_config_expressions_in_config_applicability120);
            config_expressions6=config_expressions();
            state._fsp--;
            adaptor.addChild(root_0,config_expressions6.getTree());
          }
        break;
default :
      if (cnt2 >= 1)       break loop2;
    EarlyExitException eee=new EarlyExitException(2,input);
  throw eee;
}
cnt2++;
}
 while (true);
char_literal7=(Token)match(input,9,FOLLOW_9_in_config_applicability123);
char_literal7_tree=(CommonTree)adaptor.create(char_literal7);
adaptor.addChild(root_0,char_literal7_tree);
}
retval.stop=input.LT(-1);
retval.tree=(CommonTree)adaptor.rulePostProcessing(root_0);
adaptor.setTokenBoundaries(retval.tree,retval.start,retval.stop);
}
 catch (RecognitionException re) {
reportError(re);
recover(input,re);
retval.tree=(CommonTree)adaptor.errorNode(input,retval.start,input.LT(-1),re);
}
 finally {
}
return retval;
}","public final ApplicabilityGrammarParser.config_applicability_return config_applicability() throws RecognitionException {
  ApplicabilityGrammarParser.config_applicability_return retval=new ApplicabilityGrammarParser.config_applicability_return();
  retval.start=input.LT(1);
  CommonTree root_0=null;
  Token string_literal5=null;
  Token char_literal7=null;
  ApplicabilityGrammarParser.config_expressions_return config_expressions6=null;
  CommonTree string_literal5_tree=null;
  CommonTree char_literal7_tree=null;
  try {
{
      root_0=(CommonTree)adaptor.nil();
      string_literal5=(Token)match(input,8,FOLLOW_8_in_config_applicability118);
      string_literal5_tree=(CommonTree)adaptor.create(string_literal5);
      adaptor.addChild(root_0,string_literal5_tree);
      int cnt2=0;
      loop2:       do {
        int alt2=2;
        int LA2_0=input.LA(1);
        if (((LA2_0 >= OR && LA2_0 <= ID))) {
          alt2=1;
        }
switch (alt2) {
case 1:
{
            pushFollow(FOLLOW_config_expressions_in_config_applicability120);
            config_expressions6=config_expressions();
            state._fsp--;
            adaptor.addChild(root_0,config_expressions6.getTree());
          }
        break;
default :
      if (cnt2 >= 1) {
        break loop2;
      }
    EarlyExitException eee=new EarlyExitException(2,input);
  throw eee;
}
cnt2++;
}
 while (true);
char_literal7=(Token)match(input,9,FOLLOW_9_in_config_applicability123);
char_literal7_tree=(CommonTree)adaptor.create(char_literal7);
adaptor.addChild(root_0,char_literal7_tree);
}
retval.stop=input.LT(-1);
retval.tree=(CommonTree)adaptor.rulePostProcessing(root_0);
adaptor.setTokenBoundaries(retval.tree,retval.start,retval.stop);
}
 catch (RecognitionException re) {
reportError(re);
recover(input,re);
retval.tree=(CommonTree)adaptor.errorNode(input,retval.start,input.LT(-1),re);
}
 finally {
}
return retval;
}",0.9968304278922344
96741,"public final ApplicabilityGrammarParser.feature_applicability_return feature_applicability() throws RecognitionException {
  ApplicabilityGrammarParser.feature_applicability_return retval=new ApplicabilityGrammarParser.feature_applicability_return();
  retval.start=input.LT(1);
  CommonTree root_0=null;
  Token string_literal10=null;
  Token char_literal12=null;
  ApplicabilityGrammarParser.feature_expressions_return feature_expressions11=null;
  CommonTree string_literal10_tree=null;
  CommonTree char_literal12_tree=null;
  try {
{
      root_0=(CommonTree)adaptor.nil();
      string_literal10=(Token)match(input,10,FOLLOW_10_in_feature_applicability148);
      string_literal10_tree=(CommonTree)adaptor.create(string_literal10);
      adaptor.addChild(root_0,string_literal10_tree);
      int cnt4=0;
      loop4:       do {
        int alt4=2;
        int LA4_0=input.LA(1);
        if (((LA4_0 >= OR && LA4_0 <= AND))) {
          alt4=1;
        }
switch (alt4) {
case 1:
{
            pushFollow(FOLLOW_feature_expressions_in_feature_applicability150);
            feature_expressions11=feature_expressions();
            state._fsp--;
            adaptor.addChild(root_0,feature_expressions11.getTree());
          }
        break;
default :
      if (cnt4 >= 1)       break loop4;
    EarlyExitException eee=new EarlyExitException(4,input);
  throw eee;
}
cnt4++;
}
 while (true);
char_literal12=(Token)match(input,9,FOLLOW_9_in_feature_applicability153);
char_literal12_tree=(CommonTree)adaptor.create(char_literal12);
adaptor.addChild(root_0,char_literal12_tree);
}
retval.stop=input.LT(-1);
retval.tree=(CommonTree)adaptor.rulePostProcessing(root_0);
adaptor.setTokenBoundaries(retval.tree,retval.start,retval.stop);
}
 catch (RecognitionException re) {
reportError(re);
recover(input,re);
retval.tree=(CommonTree)adaptor.errorNode(input,retval.start,input.LT(-1),re);
}
 finally {
}
return retval;
}","public final ApplicabilityGrammarParser.feature_applicability_return feature_applicability() throws RecognitionException {
  ApplicabilityGrammarParser.feature_applicability_return retval=new ApplicabilityGrammarParser.feature_applicability_return();
  retval.start=input.LT(1);
  CommonTree root_0=null;
  Token string_literal10=null;
  Token char_literal12=null;
  ApplicabilityGrammarParser.feature_expressions_return feature_expressions11=null;
  CommonTree string_literal10_tree=null;
  CommonTree char_literal12_tree=null;
  try {
{
      root_0=(CommonTree)adaptor.nil();
      string_literal10=(Token)match(input,10,FOLLOW_10_in_feature_applicability148);
      string_literal10_tree=(CommonTree)adaptor.create(string_literal10);
      adaptor.addChild(root_0,string_literal10_tree);
      int cnt4=0;
      loop4:       do {
        int alt4=2;
        int LA4_0=input.LA(1);
        if (((LA4_0 >= OR && LA4_0 <= AND))) {
          alt4=1;
        }
switch (alt4) {
case 1:
{
            pushFollow(FOLLOW_feature_expressions_in_feature_applicability150);
            feature_expressions11=feature_expressions();
            state._fsp--;
            adaptor.addChild(root_0,feature_expressions11.getTree());
          }
        break;
default :
      if (cnt4 >= 1) {
        break loop4;
      }
    EarlyExitException eee=new EarlyExitException(4,input);
  throw eee;
}
cnt4++;
}
 while (true);
char_literal12=(Token)match(input,9,FOLLOW_9_in_feature_applicability153);
char_literal12_tree=(CommonTree)adaptor.create(char_literal12);
adaptor.addChild(root_0,char_literal12_tree);
}
retval.stop=input.LT(-1);
retval.tree=(CommonTree)adaptor.rulePostProcessing(root_0);
adaptor.setTokenBoundaries(retval.tree,retval.start,retval.stop);
}
 catch (RecognitionException re) {
reportError(re);
recover(input,re);
retval.tree=(CommonTree)adaptor.errorNode(input,retval.start,input.LT(-1),re);
}
 finally {
}
return retval;
}",0.9968814968814969
96742,"public String getGrammarFileName(){
  return ""String_Node_Str"";
}","@Override public String getGrammarFileName(){
  return ""String_Node_Str"";
}",0.9285714285714286
96743,"public final ApplicabilityGrammarParser.value_return value() throws RecognitionException {
  ApplicabilityGrammarParser.value_return retval=new ApplicabilityGrammarParser.value_return();
  retval.start=input.LT(1);
  CommonTree root_0=null;
  Token ID27=null;
  ApplicabilityGrammarParser.operator_return temp=null;
  CommonTree ID27_tree=null;
  try {
{
      root_0=(CommonTree)adaptor.nil();
      int alt10=2;
      int LA10_0=input.LA(1);
      if ((LA10_0 == OR || LA10_0 == AND)) {
        alt10=1;
      }
switch (alt10) {
case 1:
{
          pushFollow(FOLLOW_operator_in_value359);
          temp=operator();
          state._fsp--;
          adaptor.addChild(root_0,temp.getTree());
        }
      break;
  }
  ID27=(Token)match(input,ID,FOLLOW_ID_in_value362);
  ID27_tree=(CommonTree)adaptor.create(ID27);
  adaptor.addChild(root_0,ID27_tree);
  if ((temp != null ? input.toString(temp.start,temp.stop) : null) != null)   featureId_values_map.get(featureId).add((temp != null ? input.toString(temp.start,temp.stop) : null));
  featureId_values_map.get(featureId).add((ID27 != null ? ID27.getText() : null));
}
retval.stop=input.LT(-1);
retval.tree=(CommonTree)adaptor.rulePostProcessing(root_0);
adaptor.setTokenBoundaries(retval.tree,retval.start,retval.stop);
}
 catch (RecognitionException re) {
reportError(re);
recover(input,re);
retval.tree=(CommonTree)adaptor.errorNode(input,retval.start,input.LT(-1),re);
}
 finally {
}
return retval;
}","public final ApplicabilityGrammarParser.value_return value() throws RecognitionException {
  ApplicabilityGrammarParser.value_return retval=new ApplicabilityGrammarParser.value_return();
  retval.start=input.LT(1);
  CommonTree root_0=null;
  Token ID27=null;
  ApplicabilityGrammarParser.operator_return temp=null;
  CommonTree ID27_tree=null;
  try {
{
      root_0=(CommonTree)adaptor.nil();
      int alt10=2;
      int LA10_0=input.LA(1);
      if ((LA10_0 == OR || LA10_0 == AND)) {
        alt10=1;
      }
switch (alt10) {
case 1:
{
          pushFollow(FOLLOW_operator_in_value359);
          temp=operator();
          state._fsp--;
          adaptor.addChild(root_0,temp.getTree());
        }
      break;
  }
  ID27=(Token)match(input,ID,FOLLOW_ID_in_value362);
  ID27_tree=(CommonTree)adaptor.create(ID27);
  adaptor.addChild(root_0,ID27_tree);
  if ((temp != null ? input.toString(temp.start,temp.stop) : null) != null) {
    featureId_values_map.get(featureId).add((temp != null ? input.toString(temp.start,temp.stop) : null));
  }
  featureId_values_map.get(featureId).add((ID27 != null ? ID27.getText() : null));
}
retval.stop=input.LT(-1);
retval.tree=(CommonTree)adaptor.rulePostProcessing(root_0);
adaptor.setTokenBoundaries(retval.tree,retval.start,retval.stop);
}
 catch (RecognitionException re) {
reportError(re);
recover(input,re);
retval.tree=(CommonTree)adaptor.errorNode(input,retval.start,input.LT(-1),re);
}
 finally {
}
return retval;
}",0.997265892002734
96744,"/** 
 * Adds all of the items in the Collection values to the collection for the specified key.
 * @param key The key to add the values to
 * @param values The values to be added. Null or empty values will insert empty list in map
 * @return The collection for the key, containing all values.
 */
public Collection<V> put(K key,Collection<V> values){
  Collection<V> items=null;
  if (values == null || values.isEmpty()) {
    Collection<V> values2=this.getValues(key);
    if (values2 == null) {
      map.put(key,new LinkedList<>());
    }
  }
  for (  V value : values) {
    if (items == null) {
      items=this.put(key,value);
    }
 else {
      items.add(value);
    }
  }
  return items;
}","/** 
 * Adds all of the items in the Collection values to the collection for the specified key.
 * @param key The key to add the values to
 * @param values The values to be added. Null or empty values will insert empty list in map
 * @return The collection for the key, containing all values.
 */
public Collection<V> put(K key,Collection<V> values){
  Collection<V> items=null;
  if (values == null || values.isEmpty()) {
    if (!map.containsKey(key)) {
      map.put(key,new LinkedList<>());
    }
  }
 else {
    for (    V value : values) {
      if (items == null) {
        items=this.put(key,value);
      }
 else {
        items.add(value);
      }
    }
  }
  return items;
}",0.6854663774403471
96745,"public static String getValue(JdbcClient jdbcClient,String key,Long maxStaleness){
  Pair<Long,String> pair=cache.get(key);
  String value;
  if (pair == null || pair.getFirst() + maxStaleness < System.currentTimeMillis()) {
    value=jdbcClient.fetch(""String_Node_Str"",GET_VALUE_SQL,key);
    cacheValue(key,value);
  }
 else {
    value=pair.getSecond();
  }
  return value;
}","public static String getValue(JdbcClient jdbcClient,String key,String defaultValue,Long maxStaleness){
  Pair<Long,String> pair=cache.get(key);
  String value;
  if (pair == null || pair.getFirst() + maxStaleness < System.currentTimeMillis()) {
    value=jdbcClient.fetch(defaultValue,GET_VALUE_SQL,key);
    cacheValue(key,value);
  }
 else {
    value=pair.getSecond();
  }
  return value;
}",0.9364461738002594
96746,"private void addComparison(IProgressMonitor monitor,Appendable appendable,CompareData compareData,boolean merge) throws IOException {
  boolean first=true;
  double workAmount=0.20 / compareData.entrySet().size();
  monitor.setTaskName(""String_Node_Str"");
  for (  Entry<String,String> entry : compareData.entrySet()) {
    if (monitor.isCanceled()) {
      throw new OperationCanceledException();
    }
    String propertyWordDiffSleepMs=null;
    try {
      propertyWordDiffSleepMs=OseeInfo.getValue(OSEE_WORD_DIFF_SLEEP_MS);
    }
 catch (    Exception ex) {
      OseeLog.log(Activator.class,Level.INFO,String.format(""String_Node_Str"",this.getClass().getSimpleName(),propertyWordDiffSleepMs));
    }
    if (!Strings.isValid(propertyWordDiffSleepMs)) {
      propertyWordDiffSleepMs=""String_Node_Str"";
    }
    if (!propertyWordDiffSleepMs.equals(""String_Node_Str"")) {
      appendable.append(""String_Node_Str"" + propertyWordDiffSleepMs + ""String_Node_Str"");
    }
    appendable.append(""String_Node_Str"");
    appendable.append(entry.getKey());
    appendable.append(""String_Node_Str"");
    appendable.append(entry.getValue());
    appendable.append(""String_Node_Str"");
    appendable.append(""String_Node_Str"");
    appendable.append(""String_Node_Str"");
    appendable.append(""String_Node_Str"");
    appendable.append(""String_Node_Str"");
    appendable.append(""String_Node_Str"");
    appendable.append(""String_Node_Str"");
    boolean mergeFromCompare=compareData.isMerge(entry.getKey());
    if (merge || mergeFromCompare) {
      if (mergeFromCompare) {
        if (first) {
          appendable.append(comparisonCommand);
        }
 else {
          appendable.append(altMergeCommand);
        }
      }
 else {
        appendable.append(String.format(mergeCommand,""String_Node_Str"" + compareData.getOutputPath() + ""String_Node_Str""));
      }
    }
 else {
      appendable.append(comparisonCommand);
    }
    if (first) {
      appendable.append(comparisonCommandFirst);
      first=false;
    }
 else {
      if (mergeFromCompare) {
        appendable.append(altComparisonCommandOthers);
      }
 else {
        appendable.append(comparisonCommandOthers);
      }
    }
    monitor.worked(Operations.calculateWork(Operations.TASK_WORK_RESOLUTION,workAmount));
  }
}","private void addComparison(IProgressMonitor monitor,Appendable appendable,CompareData compareData,boolean merge) throws IOException {
  boolean first=true;
  double workAmount=0.20 / compareData.entrySet().size();
  monitor.setTaskName(""String_Node_Str"");
  for (  Entry<String,String> entry : compareData.entrySet()) {
    if (monitor.isCanceled()) {
      throw new OperationCanceledException();
    }
    String propertyWordDiffSleepMs=""String_Node_Str"";
    try {
      propertyWordDiffSleepMs=OseeInfo.getValue(OSEE_WORD_DIFF_SLEEP_MS,""String_Node_Str"");
    }
 catch (    Exception ex) {
      OseeLog.log(Activator.class,Level.INFO,String.format(""String_Node_Str"",this.getClass().getSimpleName(),propertyWordDiffSleepMs));
    }
    if (!propertyWordDiffSleepMs.equals(""String_Node_Str"")) {
      appendable.append(""String_Node_Str"" + propertyWordDiffSleepMs + ""String_Node_Str"");
    }
    appendable.append(""String_Node_Str"");
    appendable.append(entry.getKey());
    appendable.append(""String_Node_Str"");
    appendable.append(entry.getValue());
    appendable.append(""String_Node_Str"");
    appendable.append(""String_Node_Str"");
    appendable.append(""String_Node_Str"");
    appendable.append(""String_Node_Str"");
    appendable.append(""String_Node_Str"");
    appendable.append(""String_Node_Str"");
    appendable.append(""String_Node_Str"");
    boolean mergeFromCompare=compareData.isMerge(entry.getKey());
    if (merge || mergeFromCompare) {
      if (mergeFromCompare) {
        if (first) {
          appendable.append(comparisonCommand);
        }
 else {
          appendable.append(altMergeCommand);
        }
      }
 else {
        appendable.append(String.format(mergeCommand,""String_Node_Str"" + compareData.getOutputPath() + ""String_Node_Str""));
      }
    }
 else {
      appendable.append(comparisonCommand);
    }
    if (first) {
      appendable.append(comparisonCommandFirst);
      first=false;
    }
 else {
      if (mergeFromCompare) {
        appendable.append(altComparisonCommandOthers);
      }
 else {
        appendable.append(comparisonCommandOthers);
      }
    }
    monitor.worked(Operations.calculateWork(Operations.TASK_WORK_RESOLUTION,workAmount));
  }
}",0.9671801741460148
96747,"/** 
 * Delete attribute if exactly one exists. Does nothing if attribute does not exist and throw MultipleAttributesExist is more than one instance of the attribute type exsits for this artifact
 */
public final void deleteSoleAttribute(AttributeTypeId attributeType) throws OseeCoreException {
  Attribute<?> attribute=getSoleAttribute(attributeType);
  if (attribute != null) {
    deleteAttribute(attribute);
  }
}","/** 
 * Delete attribute if exactly one exists. Does nothing if attribute does not exist and throw MultipleAttributesExist is more than one instance of the attribute type exists for this artifact
 */
public final void deleteSoleAttribute(AttributeTypeId attributeType) throws OseeCoreException {
  Attribute<?> attribute=getSoleAttribute(attributeType);
  if (attribute != null) {
    deleteAttribute(attribute);
  }
}",0.9952153110047848
96748,"/** 
 * Either return a single commit transaction or user must choose from a list of valid commit transactions
 */
public static TransactionToken getTransactionIdOrPopupChoose(TeamWorkFlowArtifact teamArt,String title,boolean showMergeManager) throws OseeCoreException {
  Collection<TransactionToken> transactionIds=new HashSet<>();
  Collection<TransactionRecord> transactions=AtsClientService.get().getBranchService().getTransactionIds(teamArt,showMergeManager);
  final Map<IOseeBranch,TransactionId> branchToTx=new LinkedHashMap<>();
  if (transactionIds.size() == 1) {
    return transactionIds.iterator().next();
  }
  for (  TransactionRecord id : transactions) {
    boolean workingBranch=BranchManager.getType(id).isWorkingBranch();
    BranchState state=BranchManager.getState(id.getBranch());
    if (!workingBranch || !(state.isRebaselined() && state.isCommitted())) {
      IOseeBranch branch=BranchManager.getBranchToken(id.getBranch());
      branchToTx.put(branch,id);
    }
  }
  ViewerSorter sorter=new ViewerSorter(){
    @Override public int compare(    Viewer viewer,    Object e1,    Object e2){
      if (e1 == null || e2 == null) {
        return 0;
      }
      Long b1=((IOseeBranch)e1).getId();
      Long b2=((IOseeBranch)e1).getId();
      if (b1 > b2) {
        return -1;
      }
      if (b2 > b1) {
        return 1;
      }
      return 0;
    }
  }
;
  FilteredTreeDialog dialog=new FilteredTreeDialog(title,""String_Node_Str"",new ArrayTreeContentProvider(),new NameLabelProvider(),sorter);
  dialog.setInput(branchToTx.keySet());
  if (dialog.open() == 0) {
    IOseeBranch branch=dialog.getSelectedFirst();
    if (branch != null) {
      TransactionId id=branchToTx.get(branch);
      return TransactionToken.valueOf(id,branch);
    }
  }
  return TransactionToken.SENTINEL;
}","/** 
 * Either return a single commit transaction or user must choose from a list of valid commit transactions
 */
public static TransactionToken getTransactionIdOrPopupChoose(TeamWorkFlowArtifact teamArt,String title,boolean showMergeManager) throws OseeCoreException {
  Collection<TransactionRecord> transactions=AtsClientService.get().getBranchService().getTransactionIds(teamArt,showMergeManager);
  final Map<IOseeBranch,TransactionId> branchToTx=new LinkedHashMap<>();
  if (transactions.size() == 1) {
    return transactions.iterator().next();
  }
  for (  TransactionRecord id : transactions) {
    boolean workingBranch=BranchManager.getType(id).isWorkingBranch();
    BranchState state=BranchManager.getState(id.getBranch());
    if (!workingBranch || !(state.isRebaselined() && state.isCommitted())) {
      IOseeBranch branch=BranchManager.getBranchToken(id.getBranch());
      branchToTx.put(branch,id);
    }
  }
  ViewerSorter sorter=new ViewerSorter(){
    @Override public int compare(    Viewer viewer,    Object e1,    Object e2){
      if (e1 == null || e2 == null) {
        return 0;
      }
      Long b1=((IOseeBranch)e1).getId();
      Long b2=((IOseeBranch)e1).getId();
      if (b1 > b2) {
        return -1;
      }
      if (b2 > b1) {
        return 1;
      }
      return 0;
    }
  }
;
  FilteredTreeDialog dialog=new FilteredTreeDialog(title,""String_Node_Str"",new ArrayTreeContentProvider(),new NameLabelProvider(),sorter);
  dialog.setInput(branchToTx.keySet());
  if (dialog.open() == 0) {
    IOseeBranch branch=dialog.getSelectedFirst();
    if (branch != null) {
      TransactionId id=branchToTx.get(branch);
      return TransactionToken.valueOf(id,branch);
    }
  }
  return TransactionToken.SENTINEL;
}",0.9811956216671344
96749,"private ReleaseDateColumn(){
  super(WorldXViewerFactory.COLUMN_NAMESPACE + ""String_Node_Str"",AtsAttributeTypes.ReleaseDate);
}","private ReleaseDateColumn(){
  super(AtsColumnId.ReleaseDate.getId(),AtsAttributeTypes.ReleaseDate);
}",0.7074235807860262
96750,"/** 
 * Returns the backing data object for operations like sorting
 */
public Object getBackingData(Object element,XViewerColumn xCol,int columnIndex) throws Exception {
  if (xCol.getId().equals(AtsColumnId.CreatedDate.getId())) {
    return CreatedDateColumnUI.getInstance().getBackingData(element,xCol,columnIndex);
  }
 else   if (xCol.getId().equals(ReleaseDateColumn.getInstance().getId())) {
    return ReleaseDateColumn.getInstance().getBackingData(element,xCol,columnIndex);
  }
  return null;
}","/** 
 * Returns the backing data object for operations like sorting
 */
public Object getBackingData(Object element,XViewerColumn xCol,int columnIndex) throws Exception {
  XViewerAtsColumn xViewerAtsColumn;
  if (xCol.equals(AtsColumnId.CreatedDate.getId())) {
    xViewerAtsColumn=CreatedDateColumnUI.getInstance();
  }
 else   if (xCol.equals(AtsColumnId.ReleaseDate.getId())) {
    xViewerAtsColumn=ReleaseDateColumn.getInstance();
  }
 else   if (xCol.equals(AtsColumnId.CompletedDate.getId())) {
    xViewerAtsColumn=CompletedDateColumnUI.getInstance();
  }
 else   if (xCol.equals(AtsColumnId.CancelledDate.getId())) {
    xViewerAtsColumn=CancelledDateColumnUI.getInstance();
  }
 else {
    return null;
  }
  return xViewerAtsColumn.getBackingData(element,xCol,columnIndex);
}",0.4740511231603408
96751,"@Override public boolean isOfType(IAtsObject atsObject,IArtifactType artifactType){
  return isOfType(atsObject.getStoreObject());
}","@Override public boolean isOfType(IAtsObject atsObject,IArtifactType artifactType){
  return isOfType(atsObject.getStoreObject(),artifactType);
}",0.9530685920577616
96752,"@Override public boolean isOfType(IAtsObject atsObject,IArtifactType artifactType){
  return isOfType(atsObject.getStoreObject());
}","@Override public boolean isOfType(IAtsObject atsObject,IArtifactType artifactType){
  return isOfType(atsObject.getStoreObject(),artifactType);
}",0.9530685920577616
96753,"public void updateTransitionToAssignees() throws OseeCoreException {
  Collection<IAtsUser> assignees=null;
  for (  IAtsStateItem item : AtsStateItemManager.getStateItems()) {
    String decisionValueIfApplicable=null;
    if (awa.isOfType(AtsArtifactTypes.DecisionReview) && workflowSection.getPage().getLayoutData(AtsAttributeTypes.Decision.getName()) != null) {
      XComboDam xWidget=(XComboDam)workflowSection.getPage().getLayoutData(AtsAttributeTypes.Decision.getName()).getXWidget();
      if (xWidget != null) {
        decisionValueIfApplicable=xWidget.get();
      }
    }
    assignees=item.getOverrideTransitionToAssignees(workflowSection.getSma(),decisionValueIfApplicable);
    if (assignees != null) {
      break;
    }
  }
  if (assignees != null && !awa.getTransitionAssignees().equals(assignees)) {
    awa.setTransitionAssignees(assignees);
    editor.onDirtied();
  }
  refresh();
}","public void updateTransitionToAssignees() throws OseeCoreException {
  Collection<IAtsUser> assignees=null;
  for (  IAtsStateItem item : AtsStateItemManager.getStateItems()) {
    String decisionValueIfApplicable=""String_Node_Str"";
    if (awa.isOfType(AtsArtifactTypes.DecisionReview) && workflowSection.getPage().getLayoutData(AtsAttributeTypes.Decision.getName()) != null) {
      XComboDam xWidget=(XComboDam)workflowSection.getPage().getLayoutData(AtsAttributeTypes.Decision.getName()).getXWidget();
      if (xWidget != null) {
        decisionValueIfApplicable=xWidget.get();
      }
    }
    assignees=item.getOverrideTransitionToAssignees(workflowSection.getSma(),decisionValueIfApplicable);
    if (assignees != null) {
      break;
    }
  }
  if (assignees != null && !awa.getTransitionAssignees().equals(assignees)) {
    awa.setTransitionAssignees(assignees);
    editor.onDirtied();
  }
  refresh();
}",0.988480526604498
96754,"/** 
 * Get a specific Source File given a file name
 * @param fileName The name of the Source File to search for
 * @return The found Source File if successful. Error Code otherwise
 * @throws FileNotFoundException
 * @response.representation.200.doc OK, Found Source File
 * @response.representation.404.doc Not Found, Could not the Source File
 */
@Path(""String_Node_Str"") @GET @Produces(MediaType.APPLICATION_OCTET_STREAM) public Response getDispoItemsById(@PathParam(""String_Node_Str"") String fileName){
  if (!fileName.endsWith(""String_Node_Str"")) {
    fileName=fileName.replaceAll(""String_Node_Str"",""String_Node_Str"");
  }
  DispoSet set=dispoApi.getDispoSetById(branch,setId);
  String fullPath=set.getImportPath() + File.separator + ""String_Node_Str""+ File.separator+ fileName;
  final File result=new File(fullPath);
  StreamingOutput streamingOutput=new StreamingOutput(){
    @Override public void write(    OutputStream outputStream) throws WebApplicationException {
      FileInputStream inputStream=null;
      Writer writer=null;
      try {
        inputStream=new FileInputStream(result);
        writer=new OutputStreamWriter(outputStream,""String_Node_Str"");
        int c;
        while ((c=inputStream.read()) != -1) {
          writer.write(c);
        }
        outputStream.flush();
      }
 catch (      IOException ex) {
        throw new OseeCoreException(ex);
      }
 finally {
        Lib.close(inputStream);
        Lib.close(writer);
      }
    }
  }
;
  String contentDisposition=String.format(""String_Node_Str"",fileName,new Date());
  return Response.ok(streamingOutput).header(""String_Node_Str"",contentDisposition).type(""String_Node_Str"").build();
}","/** 
 * Get a specific Source File given a file name
 * @param fileName The name of the Source File to search for
 * @return The found Source File if successful. Error Code otherwise
 * @throws FileNotFoundException
 * @response.representation.200.doc OK, Found Source File
 * @response.representation.404.doc Not Found, Could not the Source File
 */
@Path(""String_Node_Str"") @GET @Produces(MediaType.APPLICATION_OCTET_STREAM) public Response getDispoItemsById(@PathParam(""String_Node_Str"") String fileName){
  String origFileName=fileName;
  if (!fileName.endsWith(""String_Node_Str"")) {
    fileName=fileName.replaceAll(""String_Node_Str"",""String_Node_Str"");
  }
  DispoSet set=dispoApi.getDispoSetById(branch,setId);
  String fullPath=set.getImportPath() + File.separator + ""String_Node_Str""+ File.separator+ fileName;
  final File result=new File(fullPath);
  StreamingOutput streamingOutput=new StreamingOutput(){
    @Override public void write(    OutputStream outputStream) throws WebApplicationException {
      FileInputStream inputStream=null;
      Writer writer=null;
      try {
        inputStream=new FileInputStream(result);
        writer=new OutputStreamWriter(outputStream,""String_Node_Str"");
        int c;
        while ((c=inputStream.read()) != -1) {
          writer.write(c);
        }
        outputStream.flush();
      }
 catch (      IOException ex) {
        throw new OseeCoreException(ex);
      }
 finally {
        Lib.close(inputStream);
        Lib.close(writer);
      }
    }
  }
;
  String contentDisposition=String.format(""String_Node_Str"",fileName,new Date());
  return Response.ok(streamingOutput).header(""String_Node_Str"",contentDisposition).type(""String_Node_Str"").build();
}",0.9905992949471212
96755,"private void handleCachesForDeletedPurged(EventBasicGuidArtifact guidArt) throws OseeCoreException {
  if (guidArt.is(AtsArtifactTypes.Task) && guidArt.is(EventModType.Deleted)) {
    Artifact artifact=ArtifactCache.getActive(guidArt);
    if (artifact != null && !artifact.isDeleted()) {
      AtsTaskCache.decache(((TaskArtifact)artifact).getParentAWA());
    }
  }
  if (guidArt.is(AtsArtifactTypes.ReviewArtifact) && guidArt.is(EventModType.Deleted)) {
    Artifact artifact=ArtifactCache.getActive(guidArt);
    if (artifact != null && !artifact.isDeleted()) {
      AtsReviewCache.decache(((AbstractReviewArtifact)artifact).getParentAWA());
    }
  }
  Artifact artifact=ArtifactCache.getActive(guidArt);
  if (artifact instanceof TeamWorkFlowArtifact) {
    AtsTaskCache.decache(artifact);
  }
  if (artifact instanceof AbstractReviewArtifact) {
    AtsReviewCache.decache(artifact);
  }
}","private void handleCachesForDeletedPurged(EventBasicGuidArtifact guidArt) throws OseeCoreException {
  if (guidArt.is(AtsArtifactTypes.Task) && guidArt.is(EventModType.Deleted,EventModType.Purged)) {
    Artifact artifact=ArtifactCache.getActive(guidArt);
    if (artifact != null && !artifact.isDeleted()) {
      AtsTaskCache.decache(((TaskArtifact)artifact).getParentAWA());
    }
  }
  if (guidArt.is(AtsArtifactTypes.ReviewArtifact) && guidArt.is(EventModType.Deleted,EventModType.Purged)) {
    Artifact artifact=ArtifactCache.getActive(guidArt);
    if (artifact != null && !artifact.isDeleted()) {
      AtsReviewCache.decache(((AbstractReviewArtifact)artifact).getParentAWA());
    }
  }
  Artifact artifact=ArtifactCache.getActive(guidArt);
  if (artifact instanceof TeamWorkFlowArtifact) {
    AtsTaskCache.decache(artifact);
  }
  if (artifact instanceof AbstractReviewArtifact) {
    AtsReviewCache.decache(artifact);
  }
}",0.9781659388646288
96756,"@Override public void reloadWorkDefinitionCache(boolean pend) throws OseeCoreException {
  Runnable reload=new Runnable(){
    @Override public void run(){
      workDefCache.invalidate();
      workDefCache.getAllWorkDefinitions();
    }
  }
;
  if (pend) {
    reload.run();
  }
 else {
    new Thread(reload).start();
  }
}","@Override public void reloadWorkDefinitionCache(boolean pend) throws OseeCoreException {
  Runnable reload=new Runnable(){
    @Override public void run(){
      workDefCache.invalidate();
      XResultData resultData=new XResultData();
      try {
        for (        IAtsWorkDefinition workDef : workDefService.getAllWorkDefinitions(resultData)) {
          workDefCache.cache(workDef.getId(),workDef);
        }
      }
 catch (      Exception ex) {
      }
    }
  }
;
  if (pend) {
    reload.run();
  }
 else {
    new Thread(reload).start();
  }
}",0.7150964812712827
96757,"private void processForEvents(NewTaskData newTaskData,Response response,List<IAtsTask> tasks){
  Artifact teamWf=atsClient.getArtifact(newTaskData.getTeamWfUuid());
  JaxAtsTasks jaxTasks=response.readEntity(JaxAtsTasks.class);
  ArtifactEvent artifactEvent=new ArtifactEvent(AtsClientService.get().getAtsBranch());
  List<Long> artUuids=new LinkedList<>();
  teamWf.reloadAttributesAndRelations();
  AtsTaskCache.decache((TeamWorkFlowArtifact)teamWf);
  for (  JaxAtsTask task : jaxTasks.getTasks()) {
    String guid=ArtifactQuery.getGuidFromUuid(task.getUuid(),AtsClientService.get().getAtsBranch());
    artifactEvent.getArtifacts().add(new EventBasicGuidArtifact(EventModType.Added,AtsClientService.get().getAtsBranch(),AtsArtifactTypes.Task,guid));
    artUuids.add(task.getUuid());
    RelationLink relation=getRelation(teamWf,task);
    relation=getRelation(teamWf,task);
    if (relation != null) {
      Artifact taskArt=atsClient.getArtifact(task.getUuid());
      DefaultBasicUuidRelation guidRelation=new DefaultBasicUuidRelation(AtsClientService.get().getAtsBranch(),AtsRelationTypes.TeamWfToTask_Task.getGuid(),relation.getId(),relation.getGammaId(),teamWf.getBasicGuidArtifact(),taskArt.getBasicGuidArtifact());
      artifactEvent.getRelations().add(new EventBasicGuidRelation(RelationEventType.Added,newTaskData.getTeamWfUuid().intValue(),new Long(task.getUuid()).intValue(),guidRelation));
    }
  }
  for (  Long uuid : artUuids) {
    tasks.add(AtsClientService.get().getWorkItemFactory().getTask(AtsClientService.get().getArtifact(uuid)));
  }
}","private void processForEvents(NewTaskData newTaskData,Response response,List<IAtsTask> tasks,ArtifactEvent artifactEvent){
  Artifact teamWf=atsClient.getArtifact(newTaskData.getTeamWfUuid());
  JaxAtsTasks jaxTasks=response.readEntity(JaxAtsTasks.class);
  List<Long> artUuids=new LinkedList<>();
  teamWf.reloadAttributesAndRelations();
  AtsTaskCache.decache((TeamWorkFlowArtifact)teamWf);
  for (  JaxAtsTask task : jaxTasks.getTasks()) {
    String guid=ArtifactQuery.getGuidFromUuid(task.getUuid(),AtsClientService.get().getAtsBranch());
    artifactEvent.getArtifacts().add(new EventBasicGuidArtifact(EventModType.Added,AtsClientService.get().getAtsBranch(),AtsArtifactTypes.Task,guid));
    artUuids.add(task.getUuid());
    RelationLink relation=getRelation(teamWf,task);
    if (relation != null) {
      Artifact taskArt=atsClient.getArtifact(task.getUuid());
      DefaultBasicUuidRelation guidRelation=new DefaultBasicUuidRelation(AtsClientService.get().getAtsBranch(),AtsRelationTypes.TeamWfToTask_Task.getGuid(),relation.getId(),relation.getGammaId(),teamWf.getBasicGuidArtifact(),taskArt.getBasicGuidArtifact());
      artifactEvent.getRelations().add(new EventBasicGuidRelation(RelationEventType.Added,newTaskData.getTeamWfUuid().intValue(),new Long(task.getUuid()).intValue(),guidRelation));
    }
  }
  for (  Long uuid : artUuids) {
    tasks.add(AtsClientService.get().getWorkItemFactory().getTask(AtsClientService.get().getArtifact(uuid)));
  }
}",0.685996705107084
96758,"@Override public void addWorkDefinition(IAtsWorkDefinition workDef) throws OseeCoreException {
  WorkDefinitionMatch match=new WorkDefinitionMatch(workDef.getId(),""String_Node_Str"");
  match.setWorkDefinition(workDef);
  getCache().cache(workDef,match);
}","@Override public void addWorkDefinition(IAtsWorkDefinition workDef) throws OseeCoreException {
  WorkDefinitionMatch match=new WorkDefinitionMatch(workDef.getId(),""String_Node_Str"" + getClass() + ""String_Node_Str"");
  match.setWorkDefinition(workDef);
  getCache().cache(workDef,match);
}",0.9392265193370166
96759,"@Override public void removedFromCollector(Collection<? extends Artifact> removed){
  worldComposite.removeItems(removed);
  worldComposite.getXViewer().remove(removed);
  worldComposite.getXViewer().refresh(provider.getArtifact());
}","@Override public void removedFromCollector(Collection<? extends Artifact> removed){
  worldComposite.getXViewer().setInput(provider.getMembers());
}",0.7172774869109948
96760,"private void createActions(){
  setCollectorOrderAction=new SetCollectorOrderAction(provider,(CollectorArtifact)editor.getAwa(),this);
  RemovedFromCollectorHandler handler=new RemovedFromCollectorHandler(){
    @Override public void removedFromCollector(    Collection<? extends Artifact> removed){
      worldComposite.removeItems(removed);
      worldComposite.getXViewer().remove(removed);
      worldComposite.getXViewer().refresh(provider.getArtifact());
    }
  }
;
  removeFromCollectorAction=new RemoveFromCollectorAction(provider,(CollectorArtifact)editor.getAwa(),this,handler);
  newActionToGoalAction=new NewActionToGoalAction(provider,(CollectorArtifact)editor.getAwa(),this);
}","private void createActions(){
  setCollectorOrderAction=new SetCollectorOrderAction(provider,(CollectorArtifact)editor.getAwa(),this);
  RemovedFromCollectorHandler handler=new RemovedFromCollectorHandler(){
    @Override public void removedFromCollector(    Collection<? extends Artifact> removed){
      worldComposite.getXViewer().setInput(provider.getMembers());
    }
  }
;
  removeFromCollectorAction=new RemoveFromCollectorAction(provider,(CollectorArtifact)editor.getAwa(),this,handler);
  newActionToGoalAction=new NewActionToGoalAction(provider,(CollectorArtifact)editor.getAwa(),this);
}",0.5395348837209303
96761,"public void refresh(){
  Displays.ensureInDisplayThread(new Runnable(){
    @Override public void run(){
      if (Widgets.isAccessible(worldComposite)) {
        updateShown();
        worldComposite.update();
        worldComposite.getXViewer().refresh();
      }
    }
  }
);
}","public void refresh(){
  Displays.ensureInDisplayThread(new Runnable(){
    @Override public void run(){
      if (Widgets.isAccessible(worldComposite)) {
        worldComposite.getXViewer().setInput(provider.getMembers());
      }
    }
  }
);
}",0.8212927756653993
96762,"public void refresh(){
  Displays.ensureInDisplayThread(new Runnable(){
    @Override public void run(){
      if (Widgets.isAccessible(taskComposite)) {
        updateShown();
        taskComposite.update();
        taskComposite.getXViewer().refresh();
      }
    }
  }
);
}","public void refresh(){
  Displays.ensureInDisplayThread(new Runnable(){
    @Override public void run(){
      if (Widgets.isAccessible(taskComposite)) {
        taskComposite.getXViewer().setInput(getTaskArtifacts());
      }
    }
  }
);
}",0.8301158301158301
96763,"@Override protected void doTxWork(IProgressMonitor monitor,JdbcConnection connection) throws OseeCoreException {
  if (artifactsToPurge == null || artifactsToPurge.isEmpty()) {
    return;
  }
  checkPurgeValid(connection);
  Set<Artifact> childreArtifactsToPurge=new HashSet<>();
  for (  Artifact art : artifactsToPurge) {
    childreArtifactsToPurge.addAll(art.getDescendants(DeletionFlag.INCLUDE_DELETED));
  }
  artifactsToPurge.addAll(childreArtifactsToPurge);
  Id4JoinQuery artJoin2=JoinUtility.createId4JoinQuery(getJdbcClient());
  try {
    for (    Artifact art : artifactsToPurge) {
      artJoin2.add(art.getBranch(),art,TransactionId.SENTINEL,art.getBranch().getViewId());
    }
    artJoin2.store(connection);
    int queryId=artJoin2.getQueryId();
    TransactionJoinQuery txJoin=JoinUtility.createTransactionJoinQuery(getJdbcClient());
    insertSelectItems(txJoin,connection,""String_Node_Str"",""String_Node_Str"",queryId);
    insertSelectItems(txJoin,connection,""String_Node_Str"",""String_Node_Str"",queryId);
    insertSelectItems(txJoin,connection,""String_Node_Str"",""String_Node_Str"",queryId);
    try {
      txJoin.store(connection);
      getJdbcClient().runPreparedUpdate(connection,DELETE_FROM_TXS_USING_JOIN_TRANSACTION,txJoin.getQueryId());
      getJdbcClient().runPreparedUpdate(connection,DELETE_FROM_TX_DETAILS_USING_JOIN_TRANSACTION,txJoin.getQueryId());
    }
  finally {
      txJoin.delete(connection);
    }
    for (    Artifact artifact : artifactsToPurge) {
      ArtifactCache.deCache(artifact);
      RelationManager.deCache(artifact);
      artifact.internalSetDeleted();
      for (      RelationLink rel : artifact.getRelationsAll(DeletionFlag.EXCLUDE_DELETED)) {
        rel.markAsPurged();
      }
      for (      Attribute<?> attr : artifact.internalGetAttributes()) {
        attr.markAsPurged();
      }
    }
    success=true;
  }
  finally {
    artJoin2.delete(connection);
  }
}","@Override protected void doTxWork(IProgressMonitor monitor,JdbcConnection connection) throws OseeCoreException {
  if (artifactsToPurge == null || artifactsToPurge.isEmpty()) {
    return;
  }
  checkPurgeValid(connection);
  Set<Artifact> childreArtifactsToPurge=new HashSet<>();
  for (  Artifact art : artifactsToPurge) {
    childreArtifactsToPurge.addAll(art.getDescendants(DeletionFlag.INCLUDE_DELETED));
  }
  artifactsToPurge.addAll(childreArtifactsToPurge);
  Id4JoinQuery artJoin2=JoinUtility.createId4JoinQuery(getJdbcClient());
  try {
    for (    Artifact art : artifactsToPurge) {
      artJoin2.add(art.getBranch(),art,TransactionId.SENTINEL,art.getBranch().getViewId());
    }
    artJoin2.store(connection);
    int queryId=artJoin2.getQueryId();
    TransactionJoinQuery txJoin=JoinUtility.createTransactionJoinQuery(getJdbcClient());
    insertSelectItems(txJoin,connection,""String_Node_Str"",""String_Node_Str"",queryId);
    insertSelectItems(txJoin,connection,""String_Node_Str"",""String_Node_Str"",queryId);
    insertSelectItems(txJoin,connection,""String_Node_Str"",""String_Node_Str"",queryId);
    try {
      txJoin.store(connection);
      getJdbcClient().runPreparedUpdate(connection,DELETE_FROM_TXS_USING_JOIN_TRANSACTION,txJoin.getQueryId());
      getJdbcClient().runPreparedUpdate(connection,DELETE_FROM_TX_DETAILS_USING_JOIN_TRANSACTION,txJoin.getQueryId());
    }
  finally {
      txJoin.delete(connection);
    }
    BranchId branch=artifactsToPurge.iterator().next().getBranch();
    artifactEvent=new ArtifactEvent(branch);
    for (    Artifact artifact : artifactsToPurge) {
      EventBasicGuidArtifact guidArt=new EventBasicGuidArtifact(EventModType.Purged,artifact);
      artifactEvent.addArtifact(guidArt);
      for (      RelationLink rel : artifact.getRelationsAll(DeletionFlag.EXCLUDE_DELETED)) {
        DefaultBasicUuidRelation guidRelation=new DefaultBasicUuidRelation(branch,rel.getRelationType().getId(),rel.getId(),rel.getGammaId(),new DefaultBasicGuidArtifact(branch,rel.getArtifactA().getArtifactTypeId(),rel.getArtifactA()),new DefaultBasicGuidArtifact(branch,rel.getArtifactB().getArtifactTypeId(),rel.getArtifactB()));
        artifactEvent.addRelation(new EventBasicGuidRelation(RelationEventType.Purged,rel.getAArtifactId(),rel.getBArtifactId(),guidRelation));
        rel.markAsPurged();
      }
      for (      Attribute<?> attr : artifact.internalGetAttributes()) {
        attr.markAsPurged();
      }
      ArtifactCache.deCache(artifact);
      RelationManager.deCache(artifact);
      artifact.internalSetDeleted();
    }
    success=true;
  }
  finally {
    artJoin2.delete(connection);
  }
}",0.7948550250708524
96764,"@Override protected void handleTxFinally(IProgressMonitor monitor) throws OseeCoreException {
  if (success) {
    Set<EventBasicGuidArtifact> artifactChanges=new HashSet<>();
    for (    Artifact artifact : artifactsToPurge) {
      artifactChanges.add(new EventBasicGuidArtifact(EventModType.Purged,artifact));
    }
    ArtifactEvent artifactEvent=new ArtifactEvent(artifactsToPurge.iterator().next().getBranch());
    for (    EventBasicGuidArtifact guidArt : artifactChanges) {
      artifactEvent.getArtifacts().add(guidArt);
    }
    OseeEventManager.kickPersistEvent(PurgeArtifacts.class,artifactEvent);
  }
}","@Override protected void handleTxFinally(IProgressMonitor monitor) throws OseeCoreException {
  if (success) {
    OseeEventManager.kickPersistEvent(PurgeArtifacts.class,artifactEvent);
  }
}",0.4716049382716049
96765,"@Override public int compare(Viewer viewer,Object e1,Object e2){
  if (e1 == null || e2 == null) {
    return 0;
  }
  TransactionId tx1=(TransactionId)e1;
  TransactionId tx2=(TransactionId)e2;
  return (int)(tx1.getId() - tx2.getId());
}","@Override public int compare(Viewer viewer,Object e1,Object e2){
  if (e1 == null || e2 == null) {
    return 0;
  }
  Long b1=((IOseeBranch)e1).getId();
  Long b2=((IOseeBranch)e1).getId();
  if (b1 > b2) {
    return -1;
  }
  if (b2 > b1) {
    return 1;
  }
  return 0;
}",0.4980544747081712
96766,"/** 
 * Either return a single commit transaction or user must choose from a list of valid commit transactions
 */
public static TransactionToken getTransactionIdOrPopupChoose(TeamWorkFlowArtifact teamArt,String title,boolean showMergeManager) throws OseeCoreException {
  Collection<TransactionToken> transactionIds=new HashSet<>();
  Collection<TransactionRecord> transactions=AtsClientService.get().getBranchService().getTransactionIds(teamArt,showMergeManager);
  for (  TransactionRecord id : transactions) {
    boolean workingBranch=BranchManager.getType(id).isWorkingBranch();
    BranchState state=BranchManager.getState(id.getBranch());
    if (!workingBranch || !(state.isRebaselined() && state.isCommitted())) {
      transactionIds.add(id);
    }
  }
  if (transactionIds.size() == 1) {
    return transactionIds.iterator().next();
  }
  ViewerSorter sorter=new ViewerSorter(){
    @Override public int compare(    Viewer viewer,    Object e1,    Object e2){
      if (e1 == null || e2 == null) {
        return 0;
      }
      TransactionId tx1=(TransactionId)e1;
      TransactionId tx2=(TransactionId)e2;
      return (int)(tx1.getId() - tx2.getId());
    }
  }
;
  FilteredTreeDialog dialog=new FilteredTreeDialog(title,""String_Node_Str"",new ArrayTreeContentProvider(),new TransactionIdLabelProvider(),sorter);
  dialog.setInput(transactionIds);
  if (dialog.open() == 0) {
    return dialog.getSelectedFirst();
  }
  return TransactionToken.SENTINEL;
}","/** 
 * Either return a single commit transaction or user must choose from a list of valid commit transactions
 */
public static TransactionToken getTransactionIdOrPopupChoose(TeamWorkFlowArtifact teamArt,String title,boolean showMergeManager) throws OseeCoreException {
  Collection<TransactionToken> transactionIds=new HashSet<>();
  Collection<TransactionRecord> transactions=AtsClientService.get().getBranchService().getTransactionIds(teamArt,showMergeManager);
  final Map<IOseeBranch,TransactionId> branchToTx=new LinkedHashMap<>();
  if (transactionIds.size() == 1) {
    return transactionIds.iterator().next();
  }
  for (  TransactionRecord id : transactions) {
    boolean workingBranch=BranchManager.getType(id).isWorkingBranch();
    BranchState state=BranchManager.getState(id.getBranch());
    if (!workingBranch || !(state.isRebaselined() && state.isCommitted())) {
      IOseeBranch branch=BranchManager.getBranchToken(id.getBranch());
      branchToTx.put(branch,id);
    }
  }
  ViewerSorter sorter=new ViewerSorter(){
    @Override public int compare(    Viewer viewer,    Object e1,    Object e2){
      if (e1 == null || e2 == null) {
        return 0;
      }
      Long b1=((IOseeBranch)e1).getId();
      Long b2=((IOseeBranch)e1).getId();
      if (b1 > b2) {
        return -1;
      }
      if (b2 > b1) {
        return 1;
      }
      return 0;
    }
  }
;
  FilteredTreeDialog dialog=new FilteredTreeDialog(title,""String_Node_Str"",new ArrayTreeContentProvider(),new NameLabelProvider(),sorter);
  dialog.setInput(branchToTx.keySet());
  if (dialog.open() == 0) {
    IOseeBranch branch=dialog.getSelectedFirst();
    if (branch != null) {
      TransactionId id=branchToTx.get(branch);
      return TransactionToken.valueOf(id,branch);
    }
  }
  return TransactionToken.SENTINEL;
}",0.7273280584297017
96767,"/** 
 * Display change report associated with the branch, if exists, or transaction, if branch has been committed.
 */
public static void showChangeReport(TeamWorkFlowArtifact teamArt){
  try {
    if (AtsClientService.get().getBranchService().isWorkingBranchInWork(teamArt)) {
      BranchId parentBranch=AtsClientService.get().getBranchService().getConfiguredBranchForWorkflow(teamArt);
      Conditions.assertNotNull(parentBranch,""String_Node_Str"");
      IOseeBranch workingBranch=AtsClientService.get().getBranchService().getWorkingBranch(teamArt);
      ChangeReportEditorInput input=ChangeUiUtil.createInput(workingBranch,parentBranch,true);
      ChangeUiUtil.open(input);
    }
 else     if (AtsClientService.get().getBranchService().isCommittedBranchExists(teamArt)) {
      TransactionToken transactionId=getTransactionIdOrPopupChoose(teamArt,""String_Node_Str"",false);
      if (transactionId == null) {
        return;
      }
      ChangeUiUtil.open(transactionId);
    }
 else {
      AWorkbench.popup(""String_Node_Str"",""String_Node_Str"");
    }
  }
 catch (  Exception ex) {
    OseeLog.log(Activator.class,OseeLevel.SEVERE_POPUP,""String_Node_Str"",ex);
  }
}","/** 
 * Display change report associated with the branch, if exists, or transaction, if branch has been committed.
 */
public static void showChangeReport(TeamWorkFlowArtifact teamArt){
  try {
    if (AtsClientService.get().getBranchService().isWorkingBranchInWork(teamArt)) {
      BranchId parentBranch=AtsClientService.get().getBranchService().getConfiguredBranchForWorkflow(teamArt);
      Conditions.assertNotNull(parentBranch,""String_Node_Str"");
      IOseeBranch workingBranch=AtsClientService.get().getBranchService().getWorkingBranch(teamArt);
      ChangeReportEditorInput input=ChangeUiUtil.createInput(workingBranch,parentBranch,true);
      ChangeUiUtil.open(input);
    }
 else     if (AtsClientService.get().getBranchService().isCommittedBranchExists(teamArt)) {
      TransactionToken transactionId=getTransactionIdOrPopupChoose(teamArt,""String_Node_Str"",false);
      if (TransactionToken.SENTINEL.equals(transactionId)) {
        return;
      }
      ChangeUiUtil.open(transactionId);
    }
 else {
      AWorkbench.popup(""String_Node_Str"",""String_Node_Str"");
    }
  }
 catch (  Exception ex) {
    OseeLog.log(Activator.class,OseeLevel.SEVERE_POPUP,""String_Node_Str"",ex);
  }
}",0.9730185497470488
96768,"@Override public BranchId getBranch(IAtsVersion version){
  return services.getAttributeResolver().getSoleAttributeValue(version,AtsAttributeTypes.BaselineBranchUuid,BranchId.SENTINEL);
}","@Override public BranchId getBranch(IAtsVersion version){
  String branchId=services.getAttributeResolver().getSoleAttributeValue(version,AtsAttributeTypes.BaselineBranchUuid,""String_Node_Str"");
  if (branchId == null || branchId.isEmpty()) {
    return BranchId.SENTINEL;
  }
  return BranchId.valueOf(branchId);
}",0.7131474103585658
96769,"@SuppressWarnings(""String_Node_Str"") @Override public Result isDirty() throws OseeCoreException {
  if (isEditable()) {
    for (    XStackedWidgetPage page : stackedControl.getPages()) {
      if (page.getObjectId() == null) {
        return new Result(true,String.format(""String_Node_Str"" + getAttributeType() + ""String_Node_Str""));
      }
 else       if (page instanceof XStackedWidgetAttrPage) {
        XStackedWidgetAttrPage attrPage=(XStackedWidgetAttrPage)page;
        if (attrPage.getAttribute().isDirty()) {
          return new Result(true,String.format(""String_Node_Str"" + getAttributeType() + ""String_Node_Str""));
        }
      }
 else       if (artifact.isDirty()) {
        for (        Attribute<?> attr : artifact.getAttributes(attributeType)) {
          if (attr.isDeleted()) {
            return new Result(true,String.format(""String_Node_Str"" + getAttributeType() + ""String_Node_Str""));
          }
        }
      }
    }
  }
  return Result.FalseResult;
}","@SuppressWarnings(""String_Node_Str"") @Override public Result isDirty() throws OseeCoreException {
  if (isEditable()) {
    for (    XStackedWidgetPage page : stackedControl.getPages()) {
      if (page.getObjectId() == null) {
        return new Result(true,String.format(""String_Node_Str"" + getAttributeType() + ""String_Node_Str""));
      }
 else       if (page instanceof XStackedWidgetAttrPage) {
        XStackedWidgetAttrPage attrPage=(XStackedWidgetAttrPage)page;
        Object enteredValue=attrPage.getWidget().getData();
        Object storedValue=attrPage.getValue();
        if (!enteredValue.equals(storedValue)) {
          return new Result(true,String.format(""String_Node_Str"" + getAttributeType() + ""String_Node_Str""));
        }
      }
 else       if (artifact.isDirty()) {
        for (        Attribute<?> attr : artifact.getAttributes(attributeType)) {
          if (attr.isDeleted()) {
            return new Result(true,String.format(""String_Node_Str"" + getAttributeType() + ""String_Node_Str""));
          }
        }
      }
    }
  }
  return Result.FalseResult;
}",0.9256756756756755
96770,"@Override @Nullable public <T extends IAtsConfigObject>T getOneOrNull(Class<T> clazz){
  Collection<T> items=getItems(clazz);
  if (!items.isEmpty()) {
    return items.iterator().next();
  }
  return null;
}","@Override public <T extends IAtsConfigObject>T getOneOrNull(Class<T> clazz){
  Collection<T> items=getItems(clazz);
  if (!items.isEmpty()) {
    return items.iterator().next();
  }
  return null;
}",0.9753694581280788
96771,"@Override public int getApplicabilityRating(PresentationType presentationType,Artifact artifact,Object... objects) throws OseeCoreException {
  if (artifact.isOfType(AtsArtifactTypes.WorkDefinition) && presentationType != GENERALIZED_EDIT) {
    return ARTIFACT_TYPE_MATCH;
  }
  return NO_MATCH;
}","@Override public int getApplicabilityRating(PresentationType presentationType,Artifact artifact,Object... objects) throws OseeCoreException {
  if (artifact.isOfType(AtsArtifactTypes.WorkDefinition) && !presentationType.matches(GENERALIZED_EDIT,GENERAL_REQUESTED)) {
    return SUBTYPE_TYPE_MATCH;
  }
  return NO_MATCH;
}",0.8741935483870967
96772,"public static boolean promptChangeVersion(final Collection<? extends TeamWorkFlowArtifact> awas,VersionReleaseType versionReleaseType,VersionLockedType versionLockType) throws OseeCoreException {
  IAtsTeamDefinition teamDefHoldingVersions=null;
  for (  TeamWorkFlowArtifact teamArt : awas) {
    if (!teamArt.getTeamDefinition().isTeamUsesVersions()) {
      AWorkbench.popup(""String_Node_Str"",""String_Node_Str"" + teamArt.getTeamDefinition().getName() + ""String_Node_Str"");
      return false;
    }
    if (AtsClientService.get().getVersionService().isReleased(teamArt) || AtsClientService.get().getVersionService().isVersionLocked(teamArt)) {
      String error=""String_Node_Str"" + teamArt.getName() + ""String_Node_Str"";
      if (AtsUtilClient.isAtsAdmin() && !MessageDialog.openConfirm(Displays.getActiveShell(),""String_Node_Str"",error + ""String_Node_Str"")) {
        return false;
      }
 else       if (!AtsUtilClient.isAtsAdmin()) {
        AWorkbench.popup(""String_Node_Str"",error);
        continue;
      }
    }
    if (teamDefHoldingVersions != null && teamDefHoldingVersions != teamArt.getTeamDefinition().getTeamDefinitionHoldingVersions()) {
      AWorkbench.popup(""String_Node_Str"",""String_Node_Str"");
      return false;
    }
    if (teamDefHoldingVersions == null) {
      teamDefHoldingVersions=teamArt.getTeamDefinition().getTeamDefinitionHoldingVersions();
    }
  }
  if (teamDefHoldingVersions == null) {
    AWorkbench.popup(""String_Node_Str"",""String_Node_Str"");
    return false;
  }
  TeamWorkFlowArtifact teamArt=awas.iterator().next();
  final VersionListDialog dialog=new VersionListDialog(""String_Node_Str"",""String_Node_Str"",teamDefHoldingVersions.getVersions(versionReleaseType,versionLockType));
  if (awas.size() == 1 && AtsClientService.get().getVersionService().hasTargetedVersion(teamArt)) {
    dialog.setInitialSelections(Arrays.asList(AtsClientService.get().getVersionService().getTargetedVersion(teamArt)));
  }
  int result=dialog.open();
  if (result != 0) {
    return false;
  }
  Object obj=dialog.getSelectedFirst();
  IAtsVersion newVersion=(IAtsVersion)obj;
  if (newVersion != null && newVersion.isVersionLocked()) {
    String error=""String_Node_Str"" + newVersion.getCommitFullDisplayName() + ""String_Node_Str"";
    if (AtsUtilClient.isAtsAdmin() && !MessageDialog.openConfirm(Displays.getActiveShell(),""String_Node_Str"",error + ""String_Node_Str"")) {
      return false;
    }
 else     if (!AtsUtilClient.isAtsAdmin()) {
      AWorkbench.popup(""String_Node_Str"",error);
    }
  }
  IAtsChangeSet changes=AtsClientService.get().createChangeSet(""String_Node_Str"");
  for (  TeamWorkFlowArtifact teamArt1 : awas) {
    AtsClientService.get().getVersionService().setTargetedVersion(teamArt1,newVersion,changes);
  }
  changes.execute();
  ArtifactQuery.reloadArtifacts(awas);
  return true;
}","public static boolean promptChangeVersion(final Collection<? extends TeamWorkFlowArtifact> awas,VersionReleaseType versionReleaseType,VersionLockedType versionLockType) throws OseeCoreException {
  IAtsTeamDefinition teamDefHoldingVersions=null;
  for (  TeamWorkFlowArtifact teamArt : awas) {
    if (!teamArt.getTeamDefinition().isTeamUsesVersions()) {
      AWorkbench.popup(""String_Node_Str"",""String_Node_Str"" + teamArt.getTeamDefinition().getName() + ""String_Node_Str"");
      return false;
    }
    if (AtsClientService.get().getVersionService().isReleased(teamArt) || AtsClientService.get().getVersionService().isVersionLocked(teamArt)) {
      String error=""String_Node_Str"" + teamArt.getName() + ""String_Node_Str"";
      if (AtsUtilClient.isAtsAdmin() && !MessageDialog.openConfirm(Displays.getActiveShell(),""String_Node_Str"",error + ""String_Node_Str"")) {
        return false;
      }
 else       if (!AtsUtilClient.isAtsAdmin()) {
        AWorkbench.popup(""String_Node_Str"",error);
        continue;
      }
    }
    if (teamDefHoldingVersions != null && !teamDefHoldingVersions.equals(teamArt.getTeamDefinition().getTeamDefinitionHoldingVersions())) {
      AWorkbench.popup(""String_Node_Str"",""String_Node_Str"");
      return false;
    }
    if (teamDefHoldingVersions == null) {
      teamDefHoldingVersions=teamArt.getTeamDefinition().getTeamDefinitionHoldingVersions();
    }
  }
  if (teamDefHoldingVersions == null) {
    AWorkbench.popup(""String_Node_Str"",""String_Node_Str"");
    return false;
  }
  TeamWorkFlowArtifact teamArt=awas.iterator().next();
  final VersionListDialog dialog=new VersionListDialog(""String_Node_Str"",""String_Node_Str"",teamDefHoldingVersions.getVersions(versionReleaseType,versionLockType));
  if (awas.size() == 1 && AtsClientService.get().getVersionService().hasTargetedVersion(teamArt)) {
    dialog.setInitialSelections(Arrays.asList(AtsClientService.get().getVersionService().getTargetedVersion(teamArt)));
  }
  int result=dialog.open();
  if (result != 0) {
    return false;
  }
  Object obj=dialog.getSelectedFirst();
  IAtsVersion newVersion=(IAtsVersion)obj;
  if (newVersion != null && newVersion.isVersionLocked()) {
    String error=""String_Node_Str"" + newVersion.getCommitFullDisplayName() + ""String_Node_Str"";
    if (AtsUtilClient.isAtsAdmin() && !MessageDialog.openConfirm(Displays.getActiveShell(),""String_Node_Str"",error + ""String_Node_Str"")) {
      return false;
    }
 else     if (!AtsUtilClient.isAtsAdmin()) {
      AWorkbench.popup(""String_Node_Str"",error);
    }
  }
  IAtsChangeSet changes=AtsClientService.get().createChangeSet(""String_Node_Str"");
  for (  TeamWorkFlowArtifact teamArt1 : awas) {
    AtsClientService.get().getVersionService().setTargetedVersion(teamArt1,newVersion,changes);
  }
  changes.execute();
  ArtifactQuery.reloadArtifacts(awas);
  return true;
}",0.9975404075895994
96773,"@Override public List<ApplicabilityToken> getViewApplicabilityTokens(ArtifactId artId,BranchId branch){
  List<ApplicabilityToken> result=new ArrayList<>();
  BiConsumer<Long,String> consumer=(id,name) -> result.add(new ApplicabilityToken(id,name));
  tupleQuery.getTuple2KeyValuePair(CoreTupleTypes.ViewApplicability,branch,consumer);
  return result;
}","@Override public List<ApplicabilityToken> getViewApplicabilityTokens(ArtifactId artId,BranchId branch){
  List<ApplicabilityToken> result=new ArrayList<>();
  BiConsumer<Long,String> consumer=(id,name) -> result.add(new ApplicabilityToken(id,name));
  tupleQuery.getTuple2KeyValuePair(CoreTupleTypes.ViewApplicability,artId,branch,consumer);
  return result;
}",0.9915966386554622
96774,"@Override public HashCollection<String,String> getBranchViewFeatureValues(BranchId branch){
  HashCollection<String,String> toReturn=new HashCollection<>();
  List<ApplicabilityToken> result=new ArrayList<>();
  BiConsumer<Long,String> consumer=(id,name) -> result.add(new ApplicabilityToken(id,name));
  tupleQuery.getTuple2KeyValuePair(CoreTupleTypes.ViewApplicability,branch,consumer);
  for (  ApplicabilityToken app : result) {
    if (!app.getName().equals(""String_Node_Str"")) {
      String[] nameValue=app.getName().split(""String_Node_Str"");
      toReturn.put(nameValue[0].trim(),nameValue[1].trim());
    }
  }
  return toReturn;
}","@Override public HashCollection<String,String> getBranchViewFeatureValues(BranchId branch,ArtifactId viewId){
  HashCollection<String,String> toReturn=new HashCollection<>();
  List<ApplicabilityToken> result=getViewApplicabilityTokens(viewId,branch);
  for (  ApplicabilityToken app : result) {
    if (!app.getName().equals(""String_Node_Str"")) {
      String[] nameValue=app.getName().split(""String_Node_Str"");
      toReturn.put(nameValue[0].trim(),nameValue[1].trim());
    }
  }
  return toReturn;
}",0.8314410480349345
96775,"@Override public <E1,E2>void getTuple2KeyValuePair(Tuple2Type<E1,E2> tupleType,BranchId branch,BiConsumer<Long,String> consumer){
  runQuery(consumer,SELECT_KEY_VALUE_FROM_BRANCH_VIEW,""String_Node_Str"",branch.getViewId(),tupleType,branch);
}","@Override public <E1,E2>void getTuple2KeyValuePair(Tuple2Type<E1,E2> tupleType,E1 e1,BranchId branch,BiConsumer<Long,String> consumer){
  runQuery(consumer,SELECT_KEY_VALUE_FROM_BRANCH_VIEW,""String_Node_Str"",e1,tupleType,branch);
}",0.9449152542372882
96776,"@Test public void testGetTupleType2() throws OseeCoreException {
  ResultSet<ArtifactReadable> branchViewArts=orcsApi.getQueryFactory().fromBranch(DemoBranches.SAW_Bld_1).andTypeEquals(CoreArtifactTypes.BranchView).getResults();
  List<ApplicabilityToken> result=new ArrayList<>();
  BiConsumer<Long,String> consumer=(id,name) -> result.add(new ApplicabilityToken(id,name));
  orcsApi.getQueryFactory().tupleQuery().getTuple2KeyValuePair(CoreTupleTypes.ViewApplicability,DemoBranches.SAW_Bld_1,consumer);
  Assert.assertEquals(5,result.size());
}","@Test public void testGetTupleType2() throws OseeCoreException {
  ResultSet<ArtifactReadable> branchViewArts=orcsApi.getQueryFactory().fromBranch(DemoBranches.SAW_Bld_1).andTypeEquals(CoreArtifactTypes.BranchView).getResults();
  List<ApplicabilityToken> result=new ArrayList<>();
  BiConsumer<Long,String> consumer=(id,name) -> result.add(new ApplicabilityToken(id,name));
  orcsApi.getQueryFactory().tupleQuery().getTuple2KeyValuePair(CoreTupleTypes.ViewApplicability,branchViewArts.getList().get(0),DemoBranches.SAW_Bld_1,consumer);
  Assert.assertEquals(5,result.size());
}",0.9715302491103204
96777,"HashCollection<String,String> getBranchViewFeatureValues(BranchId branch);","HashCollection<String,String> getBranchViewFeatureValues(BranchId branch,ArtifactId viewId);",0.891566265060241
96778,"<E1,E2>void getTuple2KeyValuePair(Tuple2Type<E1,E2> tupleType,BranchId branch,BiConsumer<Long,String> consumer);","<E1,E2>void getTuple2KeyValuePair(Tuple2Type<E1,E2> tupleType,E1 e1,BranchId branch,BiConsumer<Long,String> consumer);",0.9739130434782608
96779,"protected abstract void writeCellText(Object data,int cellIndex) throws IOException ;","protected abstract void writeCellText(Object data,int cellIndex,int rowLength) throws IOException ;",0.9239130434782608
96780,"@Override public void writeCellText(Object cellData,int cellIndex) throws IOException {
  if (cellIndex >= numColumns) {
    throw new OseeCoreException(""String_Node_Str"",numColumns,cellIndex);
  }
 else   if (cellData == null) {
    rowBuffer[cellIndex]=null;
  }
 else {
    StringBuilder sb=new StringBuilder();
    sb.append(""String_Node_Str"");
    if (cellData instanceof Date) {
      sb.append(""String_Node_Str"");
    }
 else     if (applyStyle) {
      applyStyleToCell(sb,cellIndex);
    }
    if (previouslyWrittenCellIndex + 1 != cellIndex) {
      sb.append(""String_Node_Str"" + (cellIndex + 1) + ""String_Node_Str"");
    }
    previouslyWrittenCellIndex=cellIndex;
    if (cellData instanceof String) {
      String cellDataStr=(String)cellData;
      if (!cellDataStr.equals(""String_Node_Str"") && cellDataStr.charAt(0) == '=') {
        String value=cellDataStr.replaceAll(""String_Node_Str"",""String_Node_Str"");
        sb.append(""String_Node_Str"" + value + ""String_Node_Str"");
      }
 else {
        boolean isRichText=richTextCell == cellIndex;
        if (isRichText) {
          sb.append(""String_Node_Str"");
        }
 else {
          sb.append(""String_Node_Str"");
        }
        if (cellDataStr.equals(""String_Node_Str"")) {
          sb.append(emptyStringRepresentation);
        }
 else {
          if (cellDataStr.length() > 32767) {
            sb.append(blobMessage);
          }
 else           if (isRichText) {
            Xml.writeData(sb,cellDataStr);
          }
 else {
            Xml.writeWhileHandlingCdata(sb,cellDataStr);
          }
        }
        if (isRichText) {
          richTextCell=-1;
          sb.append(""String_Node_Str"");
        }
 else {
          sb.append(""String_Node_Str"");
        }
        if (cellDataStr.length() > 32767) {
          sb.append(""String_Node_Str"");
          Xml.writeWhileHandlingCdata(sb,cellDataStr);
          sb.append(""String_Node_Str"");
        }
      }
    }
 else     if (cellData instanceof Number) {
      Number cellDataNum=(Number)cellData;
      sb.append(""String_Node_Str"");
      Xml.writeWhileHandlingCdata(sb,cellDataNum.toString());
      sb.append(""String_Node_Str"");
    }
 else     if (cellData instanceof Date) {
      Date cellDataDate=(Date)cellData;
      sb.append(""String_Node_Str"");
      String dateString=DateUtil.get(cellDataDate,""String_Node_Str"") + ""String_Node_Str"";
      Xml.writeWhileHandlingCdata(sb,dateString);
      sb.append(""String_Node_Str"");
    }
 else {
      sb.append(""String_Node_Str"");
      Xml.writeWhileHandlingCdata(sb,cellData.toString());
      sb.append(""String_Node_Str"");
    }
    sb.append(""String_Node_Str"");
    rowBuffer[cellIndex]=sb.toString();
  }
}","@Override protected void writeCellText(Object data,int cellIndex,int rowLength) throws IOException {
  writeCellText(data,cellIndex);
}",0.0727401129943502
96781,"@Override protected void writeCellText(Object data,int cellIndex) throws IOException {
  if (data instanceof String) {
    String dataStr=(String)data;
    if (Strings.isValid(dataStr)) {
      currentStream.append(dataStr);
    }
    currentStream.append(""String_Node_Str"");
    wasDataAdded=true;
  }
}","@Override protected void writeCellText(Object data,int cellIndex,int rowLength) throws IOException {
  if (data instanceof String) {
    String dataStr=(String)data;
    if (Strings.isValid(dataStr)) {
      currentStream.append(dataStr);
    }
    if (cellIndex < rowLength) {
      currentStream.append(""String_Node_Str"");
    }
    wasDataAdded=true;
  }
}",0.9170437405731524
96782,"@Override public void writeCellText(Object cellData,int cellIndex) throws IOException {
  if (cellData instanceof String) {
    String cellDataStr=(String)cellData;
    str.append(CELL_STRART);
    str.append(cellDataStr);
    str.append(CELL_END);
  }
}","@Override protected void writeCellText(Object data,int cellIndex,int rowLength) throws IOException {
  writeCellText(data,cellIndex);
}",0.4781491002570694
96783,"@Override public boolean setValue(Object value) throws OseeCoreException {
  boolean response=false;
  Object currentValue=getValue();
  if (currentValue == value || currentValue != null && currentValue.equals(value)) {
    response=false;
  }
 else {
    storeValue(value);
    response=true;
  }
  return response;
}","@Override public boolean setValue(Object value) throws OseeCoreException {
  boolean response=false;
  Object currentValue;
  if (value instanceof String) {
    currentValue=getValueAsString();
  }
 else {
    currentValue=getValue();
  }
  if (currentValue == value || currentValue != null && currentValue.equals(value)) {
    response=false;
  }
 else {
    storeValue(value);
    response=true;
  }
  return response;
}",0.8297297297297297
96784,"@Override public void createDispoItems(ArtifactReadable author,BranchId branch,DispoSet parentSet,List<DispoItem> data){
  ArtifactReadable parentSetArt=findDispoArtifact(branch,parentSet.getGuid(),DispoConstants.DispoSet);
  TransactionBuilder tx=getTxFactory().createTransaction(branch,author,""String_Node_Str"");
  for (  DispoItem item : data) {
    ArtifactId createdItem=tx.createArtifact(DispoConstants.DispoItem,item.getName());
    tx.setSoleAttributeValue(createdItem,DispoConstants.DispoDateCreated,item.getCreationDate());
    tx.setSoleAttributeValue(createdItem,DispoConstants.DispoLastUpdated,item.getLastUpdate());
    tx.setSoleAttributeValue(createdItem,DispoConstants.DispoItemStatus,item.getStatus());
    tx.setSoleAttributeValue(createdItem,DispoConstants.DispoItemTotalPoints,item.getTotalPoints());
    tx.setSoleAttributeValue(createdItem,DispoConstants.DispoItemNeedsRerun,item.getNeedsRerun());
    tx.setSoleAttributeValue(createdItem,DispoConstants.DispoItemAborted,item.getAborted());
    tx.setSoleAttributeValue(createdItem,DispoConstants.DispoItemNeedsReview,item.getAborted());
    String discrepanciesAsJsonString=DispoUtil.disrepanciesMapToJson(item.getDiscrepanciesList()).toString();
    tx.setSoleAttributeFromString(createdItem,DispoConstants.DispoDiscrepanciesJson,discrepanciesAsJsonString);
    String annotationsAsJsonString=DispoUtil.annotationsListToJson(item.getAnnotationsList()).toString();
    tx.setSoleAttributeFromString(createdItem,DispoConstants.DispoAnnotationsJson,annotationsAsJsonString);
    tx.setSoleAttributeFromString(createdItem,DispoConstants.DispoItemVersion,item.getVersion());
    tx.setSoleAttributeFromString(createdItem,DispoConstants.DispoItemAssignee,item.getAssignee());
    tx.setSoleAttributeFromString(createdItem,DispoConstants.DispoItemMachine,item.getMachine());
    tx.setSoleAttributeFromString(createdItem,DispoConstants.DispoItemCategory,item.getCategory());
    tx.setSoleAttributeFromString(createdItem,DispoConstants.DispoItemElapsedTime,item.getElapsedTime());
    if (Strings.isValid(item.getFileNumber())) {
      tx.setSoleAttributeFromString(createdItem,DispoConstants.DispoItemFileNumber,item.getFileNumber());
    }
    if (Strings.isValid(item.getMethodNumber())) {
      tx.setSoleAttributeFromString(createdItem,DispoConstants.DispoItemMethodNumber,item.getMethodNumber());
    }
    tx.relate(parentSetArt,CoreRelationTypes.Default_Hierarchical__Child,createdItem);
  }
  tx.commit();
}","@Override public void createDispoItems(ArtifactReadable author,BranchId branch,DispoSet parentSet,List<DispoItem> data){
  ArtifactReadable parentSetArt=findDispoArtifact(branch,parentSet.getGuid(),DispoConstants.DispoSet);
  TransactionBuilder tx=getTxFactory().createTransaction(branch,author,""String_Node_Str"");
  for (  DispoItem item : data) {
    ArtifactId createdItem=tx.createArtifact(DispoConstants.DispoItem,item.getName());
    tx.setSoleAttributeValue(createdItem,DispoConstants.DispoDateCreated,item.getCreationDate());
    tx.setSoleAttributeValue(createdItem,DispoConstants.DispoLastUpdated,item.getLastUpdate());
    tx.setSoleAttributeValue(createdItem,DispoConstants.DispoItemStatus,item.getStatus());
    tx.setSoleAttributeValue(createdItem,DispoConstants.DispoItemTotalPoints,item.getTotalPoints());
    tx.setSoleAttributeValue(createdItem,DispoConstants.DispoItemNeedsRerun,item.getNeedsRerun());
    tx.setSoleAttributeValue(createdItem,DispoConstants.DispoItemAborted,item.getAborted());
    String discrepanciesAsJsonString=DispoUtil.disrepanciesMapToJson(item.getDiscrepanciesList()).toString();
    tx.setSoleAttributeFromString(createdItem,DispoConstants.DispoDiscrepanciesJson,discrepanciesAsJsonString);
    String annotationsAsJsonString=DispoUtil.annotationsListToJson(item.getAnnotationsList()).toString();
    tx.setSoleAttributeFromString(createdItem,DispoConstants.DispoAnnotationsJson,annotationsAsJsonString);
    tx.setSoleAttributeFromString(createdItem,DispoConstants.DispoItemVersion,item.getVersion());
    tx.setSoleAttributeFromString(createdItem,DispoConstants.DispoItemAssignee,item.getAssignee());
    tx.setSoleAttributeFromString(createdItem,DispoConstants.DispoItemMachine,item.getMachine());
    tx.setSoleAttributeFromString(createdItem,DispoConstants.DispoItemCategory,item.getCategory());
    tx.setSoleAttributeFromString(createdItem,DispoConstants.DispoItemElapsedTime,item.getElapsedTime());
    if (Strings.isValid(item.getFileNumber())) {
      tx.setSoleAttributeFromString(createdItem,DispoConstants.DispoItemFileNumber,item.getFileNumber());
    }
    if (Strings.isValid(item.getMethodNumber())) {
      tx.setSoleAttributeFromString(createdItem,DispoConstants.DispoItemMethodNumber,item.getMethodNumber());
    }
    tx.relate(parentSetArt,CoreRelationTypes.Default_Hierarchical__Child,createdItem);
  }
  tx.commit();
}",0.9800862245945392
96785,"@Override public void createDispoItems(ArtifactReadable author,BranchId branch,DispoSet parentSet,List<DispoItem> data){
  ArtifactReadable parentSetArt=findDispoArtifact(branch,parentSet.getGuid(),DispoConstants.DispoSet);
  TransactionBuilder tx=getTxFactory().createTransaction(branch,author,""String_Node_Str"");
  for (  DispoItem item : data) {
    ArtifactId createdItem=tx.createArtifact(DispoConstants.DispoItem,item.getName());
    tx.setSoleAttributeValue(createdItem,DispoConstants.DispoDateCreated,item.getCreationDate());
    tx.setSoleAttributeValue(createdItem,DispoConstants.DispoLastUpdated,item.getLastUpdate());
    tx.setSoleAttributeValue(createdItem,DispoConstants.DispoItemStatus,item.getStatus());
    tx.setSoleAttributeValue(createdItem,DispoConstants.DispoItemTotalPoints,item.getTotalPoints());
    tx.setSoleAttributeValue(createdItem,DispoConstants.DispoItemNeedsRerun,item.getNeedsRerun());
    tx.setSoleAttributeValue(createdItem,DispoConstants.DispoItemAborted,item.getAborted());
    String discrepanciesAsJsonString=DispoUtil.disrepanciesMapToJson(item.getDiscrepanciesList()).toString();
    tx.setSoleAttributeFromString(createdItem,DispoConstants.DispoDiscrepanciesJson,discrepanciesAsJsonString);
    String annotationsAsJsonString=DispoUtil.annotationsListToJson(item.getAnnotationsList()).toString();
    tx.setSoleAttributeFromString(createdItem,DispoConstants.DispoAnnotationsJson,annotationsAsJsonString);
    tx.setSoleAttributeFromString(createdItem,DispoConstants.DispoItemVersion,item.getVersion());
    tx.setSoleAttributeFromString(createdItem,DispoConstants.DispoItemAssignee,item.getAssignee());
    tx.setSoleAttributeFromString(createdItem,DispoConstants.DispoItemMachine,item.getMachine());
    tx.setSoleAttributeFromString(createdItem,DispoConstants.DispoItemCategory,item.getCategory());
    tx.setSoleAttributeFromString(createdItem,DispoConstants.DispoItemElapsedTime,item.getElapsedTime());
    if (Strings.isValid(item.getFileNumber())) {
      tx.setSoleAttributeFromString(createdItem,DispoConstants.DispoItemFileNumber,item.getFileNumber());
    }
    if (Strings.isValid(item.getMethodNumber())) {
      tx.setSoleAttributeFromString(createdItem,DispoConstants.DispoItemMethodNumber,item.getMethodNumber());
    }
    tx.relate(parentSetArt,CoreRelationTypes.Default_Hierarchical__Child,createdItem);
  }
  tx.commit();
}","@Override public void createDispoItems(ArtifactReadable author,BranchId branch,DispoSet parentSet,List<DispoItem> data){
  ArtifactReadable parentSetArt=findDispoArtifact(branch,parentSet.getGuid(),DispoConstants.DispoSet);
  TransactionBuilder tx=getTxFactory().createTransaction(branch,author,""String_Node_Str"");
  for (  DispoItem item : data) {
    ArtifactId createdItem=tx.createArtifact(DispoConstants.DispoItem,item.getName());
    tx.setSoleAttributeValue(createdItem,DispoConstants.DispoDateCreated,item.getCreationDate());
    tx.setSoleAttributeValue(createdItem,DispoConstants.DispoLastUpdated,item.getLastUpdate());
    tx.setSoleAttributeValue(createdItem,DispoConstants.DispoItemStatus,item.getStatus());
    tx.setSoleAttributeValue(createdItem,DispoConstants.DispoItemTotalPoints,item.getTotalPoints());
    tx.setSoleAttributeValue(createdItem,DispoConstants.DispoItemNeedsRerun,item.getNeedsRerun());
    tx.setSoleAttributeValue(createdItem,DispoConstants.DispoItemAborted,item.getAborted());
    tx.setSoleAttributeValue(createdItem,DispoConstants.DispoItemNeedsReview,item.getAborted());
    String discrepanciesAsJsonString=DispoUtil.disrepanciesMapToJson(item.getDiscrepanciesList()).toString();
    tx.setSoleAttributeFromString(createdItem,DispoConstants.DispoDiscrepanciesJson,discrepanciesAsJsonString);
    String annotationsAsJsonString=DispoUtil.annotationsListToJson(item.getAnnotationsList()).toString();
    tx.setSoleAttributeFromString(createdItem,DispoConstants.DispoAnnotationsJson,annotationsAsJsonString);
    tx.setSoleAttributeFromString(createdItem,DispoConstants.DispoItemVersion,item.getVersion());
    tx.setSoleAttributeFromString(createdItem,DispoConstants.DispoItemAssignee,item.getAssignee());
    tx.setSoleAttributeFromString(createdItem,DispoConstants.DispoItemMachine,item.getMachine());
    tx.setSoleAttributeFromString(createdItem,DispoConstants.DispoItemCategory,item.getCategory());
    tx.setSoleAttributeFromString(createdItem,DispoConstants.DispoItemElapsedTime,item.getElapsedTime());
    if (Strings.isValid(item.getFileNumber())) {
      tx.setSoleAttributeFromString(createdItem,DispoConstants.DispoItemFileNumber,item.getFileNumber());
    }
    if (Strings.isValid(item.getMethodNumber())) {
      tx.setSoleAttributeFromString(createdItem,DispoConstants.DispoItemMethodNumber,item.getMethodNumber());
    }
    tx.relate(parentSetArt,CoreRelationTypes.Default_Hierarchical__Child,createdItem);
  }
  tx.commit();
}",0.9800862245945392
96786,"private void outputCommonCells(ArtifactReadable systemRequirement,ISheetWriter writer) throws IOException {
  writer.writeCell(systemRequirement.getSoleAttributeAsString(CoreAttributeTypes.LegacyId));
  writer.writeCell(systemRequirement.getSoleAttributeAsString(CoreAttributeTypes.ParagraphNumber));
  writer.writeCell(systemRequirement.getName());
}","private void outputCommonCells(ArtifactReadable systemRequirement,ISheetWriter writer) throws IOException {
  writer.writeCell(systemRequirement.getIdString());
  writer.writeCell(systemRequirement.getSoleAttributeAsString(CoreAttributeTypes.ParagraphNumber));
  writer.writeCell(systemRequirement.getName());
}",0.918429003021148
96787,"public static Options createOptions(){
  Options options=new Options();
  setIncludeCache(options,false);
  setIncludeDeletedArtifacts(options,false);
  setIncludeDeletedAttributes(options,false);
  setIncludeDeletedRelations(options,false);
  setHeadTransaction(options);
  setLoadLevel(options,LoadLevel.ALL);
  return options;
}","public static Options createOptions(){
  Options options=new Options();
  setIncludeCache(options,false);
  setIncludeDeletedArtifacts(options,false);
  setIncludeDeletedAttributes(options,false);
  setIncludeDeletedRelations(options,false);
  setHeadTransaction(options);
  setLoadLevel(options,LoadLevel.ALL);
  setFromBranchView(options,ArtifactId.SENTINEL);
  return options;
}",0.9297752808988764
96788,"@Override public <T extends RelationNode>Iterable<T> loadNodes(OrcsSession session,final GraphData graph,Collection<Integer> ids,LoadLevel level) throws OseeCoreException {
  GraphBuilder builder=graphBuilderFactory.createBuilderForGraph(graph);
  DataLoader loader=dataLoaderFactory.newDataLoaderFromIds(session,graph.getBranch(),ids);
  loader.withLoadLevel(level);
  loader.fromTransaction(graph.getTransaction());
  loader.includeDeletedArtifacts();
  loader.load(null,builder);
  return getResults(builder);
}","@Override public <T extends RelationNode>Iterable<T> loadNodes(OrcsSession session,final GraphData graph,Collection<Integer> ids,LoadLevel level) throws OseeCoreException {
  GraphBuilder builder=graphBuilderFactory.createBuilderForGraph(graph);
  DataLoader loader=dataLoaderFactory.newDataLoaderFromIds(session,graph.getBranch(),ids);
  loader.withLoadLevel(level);
  loader.fromTransaction(graph.getTransaction());
  loader.fromBranchView(graph.getBranch().getViewId());
  loader.includeDeletedArtifacts();
  loader.load(null,builder);
  return getResults(builder);
}",0.948339483394834
96789,"@Override public ResultSet<Artifact> loadArtifacts(OrcsSession session,GraphData graph,Collection<ArtifactId> artifactIds) throws OseeCoreException {
  DataLoader loader=createLoader(session,graph.getBranch(),artifactIds);
  loader.fromTransaction(graph.getTransaction());
  GraphBuilder handler=graphBuilderFactory.createBuilderForGraph(graph);
  loader.load(null,handler);
  return ResultSets.newResultSet(handler.getArtifacts());
}","@Override public ResultSet<Artifact> loadArtifacts(OrcsSession session,GraphData graph,Collection<ArtifactId> artifactIds) throws OseeCoreException {
  DataLoader loader=createLoader(session,graph.getBranch(),artifactIds);
  loader.fromTransaction(graph.getTransaction());
  loader.fromBranchView(graph.getBranch().getViewId());
  GraphBuilder handler=graphBuilderFactory.createBuilderForGraph(graph);
  loader.load(null,handler);
  return ResultSets.newResultSet(handler.getArtifacts());
}",0.9393939393939394
96790,@Nullable <T extends IAtsConfigObject>T getOneOrNull(Class<T> clazz);,<T extends IAtsConfigObject>T getOneOrNull(Class<T> clazz);,0.921875
96791,"private ArtifactDelta asArtifactDelta(Object selectionA,Object selectionB) throws OseeCoreException {
  ArtifactDelta toReturn=null;
  if (selectionA instanceof Change && selectionB instanceof Change) {
    Change changeA=(Change)selectionA;
    Change changeB=(Change)selectionB;
    Conditions.checkExpressionFailOnTrue(changeA.getArtId() != changeB.getArtId(),""String_Node_Str"",changeA.getArtId(),changeB.getArtId());
    int artId=changeA.getArtId().getId().intValue();
    TransactionDelta txDelta=asTxDelta(changeA,changeB);
    Artifact startArtifact=ArtifactQuery.getHistoricalArtifactFromId(artId,txDelta.getStartTx(),DeletionFlag.INCLUDE_DELETED);
    Artifact endArtifact=ArtifactQuery.getHistoricalArtifactFromId(artId,txDelta.getEndTx(),DeletionFlag.INCLUDE_DELETED);
    toReturn=new ArtifactDelta(txDelta,startArtifact,endArtifact);
  }
  return toReturn;
}","private ArtifactDelta asArtifactDelta(Object selectionA,Object selectionB) throws OseeCoreException {
  ArtifactDelta toReturn=null;
  if (selectionA instanceof Change && selectionB instanceof Change) {
    Change changeA=(Change)selectionA;
    Change changeB=(Change)selectionB;
    Conditions.checkExpressionFailOnTrue(!changeA.getArtId().equals(changeB.getArtId()),""String_Node_Str"",changeA.getArtId(),changeB.getArtId());
    int artId=changeA.getArtId().getId().intValue();
    TransactionDelta txDelta=asTxDelta(changeA,changeB);
    Artifact startArtifact=ArtifactQuery.getHistoricalArtifactFromId(artId,txDelta.getStartTx(),DeletionFlag.INCLUDE_DELETED);
    Artifact endArtifact=ArtifactQuery.getHistoricalArtifactFromId(artId,txDelta.getEndTx(),DeletionFlag.INCLUDE_DELETED);
    toReturn=new ArtifactDelta(txDelta,startArtifact,endArtifact);
  }
  return toReturn;
}",0.9725714285714284
96792,"@Override public String getDisplayableString() throws OseeCoreException {
  String toReturn=null;
  InputStream inputStream=null;
  try {
    inputStream=new XmlTextInputStream(getValue());
    toReturn=Lib.inputStreamToString(inputStream);
  }
 catch (  Exception ex) {
    OseeCoreException.wrapAndThrow(ex);
  }
 finally {
    Lib.close(inputStream);
  }
  return toReturn;
}","@Override public String getDisplayableString() throws OseeCoreException {
  String toReturn=null;
  InputStream inputStream=null;
  try {
    if (getAttributeType().equals(CoreAttributeTypes.WordTemplateContent)) {
      inputStream=new XmlTextInputStream(getValue());
      toReturn=Lib.inputStreamToString(inputStream);
    }
 else {
      toReturn=getValue();
    }
  }
 catch (  Exception ex) {
    OseeCoreException.wrapAndThrow(ex);
  }
 finally {
    Lib.close(inputStream);
  }
  return toReturn;
}",0.8552036199095022
96793,"@Override public IOperation createOperation(VariableMap variableMap,OperationLogger logger) throws Exception {
  IOseeBranch branch=variableMap.getBranch(SELECT_BRANCH_LABEL);
  boolean commitChangesBool=variableMap.getBoolean(COMMIT_CHANGES_LABEL);
  Display display=new FixAttributesUIReport();
  return new FixAttributeOperation(logger,display,branch,commitChangesBool);
}","@Override public IOperation createOperation(VariableMap variableMap,OperationLogger logger) throws Exception {
  BranchId branch=variableMap.getBranch(SELECT_BRANCH_LABEL);
  boolean commitChangesBool=variableMap.getBoolean(COMMIT_CHANGES_LABEL);
  Display display=new FixAttributesUIReport();
  return new FixAttributeOperation(logger,display,BranchManager.getBranchToken(branch),commitChangesBool);
}",0.924066924066924
96794,"@Override public void runOperation(VariableMap variableMap,IProgressMonitor monitor) throws Exception {
  IOseeBranch branch=variableMap.getBranch(BRANCH);
  QueryBuilderArtifact queryBuilder=ArtifactQuery.createQueryBuilder(branch);
  queryBuilder.andExists(CoreAttributeTypes.WholeWordContent);
  SkynetTransaction tx=TransactionManager.createTransaction(branch,""String_Node_Str"");
  LinkType linkType=LinkType.OSEE_SERVER_LINK;
  for (  Artifact artifact : queryBuilder.getResults()) {
    if (artifact.isAttributeTypeValid(CoreAttributeTypes.WholeWordContent)) {
      String content=artifact.getSoleAttributeValueAsString(CoreAttributeTypes.WholeWordContent,""String_Node_Str"");
      if (Strings.isValid(content)) {
        Set<String> unknownGuids=new HashSet<>();
        content=WordMlLinkHandler.link(linkType,artifact,content,unknownGuids);
        artifact.setSoleAttributeFromString(CoreAttributeTypes.WholeWordContent,content);
        artifact.persist(tx);
        if (!unknownGuids.isEmpty()) {
          log(String.format(""String_Node_Str"",artifact,org.eclipse.osee.framework.jdk.core.util.Collections.toString(""String_Node_Str"",unknownGuids)));
        }
      }
    }
  }
  tx.execute();
}","@Override public void runOperation(VariableMap variableMap,IProgressMonitor monitor) throws Exception {
  BranchId branch=variableMap.getBranch(BRANCH);
  QueryBuilderArtifact queryBuilder=ArtifactQuery.createQueryBuilder(branch);
  queryBuilder.andExists(CoreAttributeTypes.WholeWordContent);
  SkynetTransaction tx=TransactionManager.createTransaction(branch,""String_Node_Str"");
  LinkType linkType=LinkType.OSEE_SERVER_LINK;
  for (  Artifact artifact : queryBuilder.getResults()) {
    if (artifact.isAttributeTypeValid(CoreAttributeTypes.WholeWordContent)) {
      String content=artifact.getSoleAttributeValueAsString(CoreAttributeTypes.WholeWordContent,""String_Node_Str"");
      if (Strings.isValid(content)) {
        Set<String> unknownGuids=new HashSet<>();
        content=WordMlLinkHandler.link(linkType,artifact,content,unknownGuids);
        artifact.setSoleAttributeFromString(CoreAttributeTypes.WholeWordContent,content);
        artifact.persist(tx);
        if (!unknownGuids.isEmpty()) {
          log(String.format(""String_Node_Str"",artifact,org.eclipse.osee.framework.jdk.core.util.Collections.toString(""String_Node_Str"",unknownGuids)));
        }
      }
    }
  }
  tx.execute();
}",0.9929489838241392
96795,"@Override public void runOperation(VariableMap variableMap,IProgressMonitor monitor) throws Exception {
  monitor.beginTask(""String_Node_Str"",100);
  IOseeBranch branch=variableMap.getBranch(""String_Node_Str"");
  init();
  monitor.subTask(""String_Node_Str"");
  ArtifactQuery.getArtifactListFromType(CoreArtifactTypes.Component,branch);
  monitor.subTask(""String_Node_Str"");
  ArtifactQuery.getArtifactListFromType(CoreArtifactTypes.SystemRequirementMSWord,branch);
  monitor.subTask(""String_Node_Str"");
  ArtifactQuery.getArtifactListFromType(CoreArtifactTypes.SubsystemRequirementMSWord,branch);
  Artifact root=OseeSystemArtifacts.getDefaultHierarchyRootArtifact(branch);
  Artifact subsysTopFolder=root.getChild(Requirements.SUBSYSTEM_REQUIREMENTS);
  sysReqs=root.getChild(Requirements.SYSTEM_REQUIREMENTS).getDescendants();
  monitor.subTask(""String_Node_Str"");
  generateMetrics(getProductComponent(root),subsysTopFolder);
  monitor.subTask(""String_Node_Str"");
  generatePerSubsystemTables();
  excelWriter.endWorkbook();
  IFile iFile=OseeData.getIFile(""String_Node_Str"" + Lib.getDateTimeString() + ""String_Node_Str"");
  AIFile.writeToFile(iFile,charBak);
  Program.launch(iFile.getLocation().toOSString());
}","@Override public void runOperation(VariableMap variableMap,IProgressMonitor monitor) throws Exception {
  monitor.beginTask(""String_Node_Str"",100);
  BranchId branch=variableMap.getBranch(""String_Node_Str"");
  init();
  monitor.subTask(""String_Node_Str"");
  ArtifactQuery.getArtifactListFromType(CoreArtifactTypes.Component,branch);
  monitor.subTask(""String_Node_Str"");
  ArtifactQuery.getArtifactListFromType(CoreArtifactTypes.SystemRequirementMSWord,branch);
  monitor.subTask(""String_Node_Str"");
  ArtifactQuery.getArtifactListFromType(CoreArtifactTypes.SubsystemRequirementMSWord,branch);
  Artifact root=OseeSystemArtifacts.getDefaultHierarchyRootArtifact(branch);
  Artifact subsysTopFolder=root.getChild(Requirements.SUBSYSTEM_REQUIREMENTS);
  sysReqs=root.getChild(Requirements.SYSTEM_REQUIREMENTS).getDescendants();
  monitor.subTask(""String_Node_Str"");
  generateMetrics(getProductComponent(root),subsysTopFolder);
  monitor.subTask(""String_Node_Str"");
  generatePerSubsystemTables();
  excelWriter.endWorkbook();
  IFile iFile=OseeData.getIFile(""String_Node_Str"" + Lib.getDateTimeString() + ""String_Node_Str"");
  AIFile.writeToFile(iFile,charBak);
  Program.launch(iFile.getLocation().toOSString());
}",0.993001235076163
96796,"@Override public void runOperation(VariableMap variableMap,IProgressMonitor monitor) throws Exception {
  IOseeBranch branch=variableMap.getBranch(""String_Node_Str"");
  if (branch == null) {
    throw new OseeArgumentException(""String_Node_Str"");
  }
  List<TraceTypeEnum> traceTypes=getCheckedTraceItems(variableMap);
  if (traceTypes.isEmpty()) {
    throw new OseeArgumentException(""String_Node_Str"");
  }
  boolean isExcelOutput=variableMap.getBoolean(""String_Node_Str"");
  boolean isResultEditorOutput=variableMap.getBoolean(""String_Node_Str"");
  OutputType output=OutputType.asType(isExcelOutput,isResultEditorOutput);
  if (output == null) {
    throw new OseeArgumentException(""String_Node_Str"");
  }
  ISheetWriter writer=null;
  CharBackedInputStream excelInputStream=null;
  Map<String,AbstractArtifactRelationReport> reports=new LinkedHashMap<>();
  List<BaseTraceDataCache> traceCache=new ArrayList<>();
  RequirementData reqData=new RequirementData(branch);
  CodeUnitData codeUnit=null;
  TestUnitData testUnit=null;
  try {
    int TOTAL_WORK=Integer.MAX_VALUE;
    int TASK_WORK=TOTAL_WORK / 5;
    monitor.beginTask(""String_Node_Str"",TOTAL_WORK);
    SubProgressMonitor subMonitor=new SubProgressMonitor(monitor,TASK_WORK);
    reqData.initialize(subMonitor);
    traceCache.add(reqData);
    subMonitor=new SubProgressMonitor(monitor,TASK_WORK);
    if (TraceTypeEnum.Code_Unit_Trace.isIn(traceTypes)) {
      codeUnit=new CodeUnitData(branch);
      codeUnit.initialize(subMonitor);
      traceCache.add(codeUnit);
    }
 else {
      subMonitor.done();
    }
    subMonitor=new SubProgressMonitor(monitor,TASK_WORK);
    if (TraceTypeEnum.containsTestEnum(traceTypes)) {
      testUnit=new TestUnitData(branch);
      testUnit.initialize(subMonitor);
      traceCache.add(testUnit);
    }
 else {
      subMonitor.done();
    }
    if (!monitor.isCanceled()) {
      if (isExcelOutput(output)) {
        excelInputStream=new CharBackedInputStream();
        writer=new ExcelXmlWriter(excelInputStream.getWriter());
      }
      buildReport(reports,""String_Node_Str"",output,writer,getTraceUnitToReqReport(codeUnit,testUnit,traceTypes));
      buildReport(reports,""String_Node_Str"",output,writer,getDisconnectedTraceUnitReport(codeUnit,testUnit,traceTypes));
      buildReport(reports,""String_Node_Str"",output,writer,getTraceCountReport(reqData,traceTypes));
      subMonitor=new SubProgressMonitor(monitor,TASK_WORK);
      executeReports(subMonitor,reports);
    }
    subMonitor=new SubProgressMonitor(monitor,TASK_WORK);
    displayReports(subMonitor,writer,excelInputStream,output);
  }
  finally {
    try {
      for (      AbstractArtifactRelationReport report : reports.values()) {
        report.clear();
      }
      for (      BaseTraceDataCache cache : traceCache) {
        cache.reset();
      }
      reports.clear();
      traceCache.clear();
      resultsTabs.clear();
    }
  finally {
      monitor.done();
    }
  }
}","@Override public void runOperation(VariableMap variableMap,IProgressMonitor monitor) throws Exception {
  BranchId branch=variableMap.getBranch(""String_Node_Str"");
  if (branch == null) {
    throw new OseeArgumentException(""String_Node_Str"");
  }
  List<TraceTypeEnum> traceTypes=getCheckedTraceItems(variableMap);
  if (traceTypes.isEmpty()) {
    throw new OseeArgumentException(""String_Node_Str"");
  }
  boolean isExcelOutput=variableMap.getBoolean(""String_Node_Str"");
  boolean isResultEditorOutput=variableMap.getBoolean(""String_Node_Str"");
  OutputType output=OutputType.asType(isExcelOutput,isResultEditorOutput);
  if (output == null) {
    throw new OseeArgumentException(""String_Node_Str"");
  }
  ISheetWriter writer=null;
  CharBackedInputStream excelInputStream=null;
  Map<String,AbstractArtifactRelationReport> reports=new LinkedHashMap<>();
  List<BaseTraceDataCache> traceCache=new ArrayList<>();
  RequirementData reqData=new RequirementData(branch);
  CodeUnitData codeUnit=null;
  TestUnitData testUnit=null;
  try {
    int TOTAL_WORK=Integer.MAX_VALUE;
    int TASK_WORK=TOTAL_WORK / 5;
    monitor.beginTask(""String_Node_Str"",TOTAL_WORK);
    SubProgressMonitor subMonitor=new SubProgressMonitor(monitor,TASK_WORK);
    reqData.initialize(subMonitor);
    traceCache.add(reqData);
    subMonitor=new SubProgressMonitor(monitor,TASK_WORK);
    if (TraceTypeEnum.Code_Unit_Trace.isIn(traceTypes)) {
      codeUnit=new CodeUnitData(branch);
      codeUnit.initialize(subMonitor);
      traceCache.add(codeUnit);
    }
 else {
      subMonitor.done();
    }
    subMonitor=new SubProgressMonitor(monitor,TASK_WORK);
    if (TraceTypeEnum.containsTestEnum(traceTypes)) {
      testUnit=new TestUnitData(branch);
      testUnit.initialize(subMonitor);
      traceCache.add(testUnit);
    }
 else {
      subMonitor.done();
    }
    if (!monitor.isCanceled()) {
      if (isExcelOutput(output)) {
        excelInputStream=new CharBackedInputStream();
        writer=new ExcelXmlWriter(excelInputStream.getWriter());
      }
      buildReport(reports,""String_Node_Str"",output,writer,getTraceUnitToReqReport(codeUnit,testUnit,traceTypes));
      buildReport(reports,""String_Node_Str"",output,writer,getDisconnectedTraceUnitReport(codeUnit,testUnit,traceTypes));
      buildReport(reports,""String_Node_Str"",output,writer,getTraceCountReport(reqData,traceTypes));
      subMonitor=new SubProgressMonitor(monitor,TASK_WORK);
      executeReports(subMonitor,reports);
    }
    subMonitor=new SubProgressMonitor(monitor,TASK_WORK);
    displayReports(subMonitor,writer,excelInputStream,output);
  }
  finally {
    try {
      for (      AbstractArtifactRelationReport report : reports.values()) {
        report.clear();
      }
      for (      BaseTraceDataCache cache : traceCache) {
        cache.reset();
      }
      reports.clear();
      traceCache.clear();
      resultsTabs.clear();
    }
  finally {
      monitor.done();
    }
  }
}",0.9971259509721048
96797,"@Override public void runOperation(VariableMap variableMap,IProgressMonitor monitor) throws Exception {
  IOseeBranch requirementsBranch=variableMap.getBranch(""String_Node_Str"");
  Collection<? extends IArtifactType> types=variableMap.getCollection(ArtifactType.class,""String_Node_Str"");
  boolean searchInherited=variableMap.getBoolean(""String_Node_Str"");
  File scriptDir=new File(variableMap.getString(""String_Node_Str""));
  List<TraceabilityStyle> selectedReports=getStyles(variableMap);
  Collection<TraceHandler> traceHandlers=new LinkedList<>();
  for (  String handler : availableTraceHandlers) {
    if (variableMap.getBoolean(handler)) {
      TraceHandler traceHandler=TraceUnitExtensionManager.getInstance().getTraceHandlerByName(handler);
      traceHandlers.add(traceHandler);
    }
  }
  int totalWork=selectedReports.size() * 2 + 1;
  monitor.beginTask(""String_Node_Str"",totalWork);
  if (selectedReports.size() > 0) {
    TraceabilityProviderOperation provider;
    if (traceHandlers.isEmpty()) {
      provider=new BranchTraceabilityOperation(requirementsBranch,types,searchInherited);
    }
 else {
      boolean isGitBased=variableMap.getBoolean(""String_Node_Str"");
      provider=new ScriptTraceabilityOperation(scriptDir,requirementsBranch,false,types,searchInherited,traceHandlers,isGitBased);
    }
    RequirementTraceabilityData traceabilityData=new RequirementTraceabilityData(requirementsBranch,provider);
    IStatus status=traceabilityData.initialize(monitor);
    if (status.getSeverity() == IStatus.CANCEL) {
      monitor.setCanceled(true);
    }
 else     if (status.getSeverity() == IStatus.OK) {
      monitor.worked(1);
      int count=0;
      List<IFile> files=new ArrayList<>();
      for (      TraceabilityStyle style : selectedReports) {
        monitor.subTask(String.format(""String_Node_Str"",style.asLabel(),++count,selectedReports.size()));
        TraceabilityTable table=TraceabilityFactory.getTraceabilityTable(style,traceabilityData);
        if (table != null) {
          table.run(monitor);
        }
        monitor.worked(1);
        if (table != null) {
          monitor.subTask(String.format(""String_Node_Str"",style.asLabel(),count,selectedReports.size()));
          String fileName=style.toString() + ""String_Node_Str"" + Lib.getDateTimeString()+ ""String_Node_Str"";
          IFile iFile=OseeData.getIFile(fileName);
          AIFile.writeToFile(iFile,table.toString());
          files.add(iFile);
        }
        monitor.worked(1);
      }
      for (      IFile iFile : files) {
        Program.launch(iFile.getLocation().toOSString());
      }
    }
 else {
      throw new Exception(status.getMessage(),status.getException());
    }
  }
  monitor.subTask(""String_Node_Str"");
}","@Override public void runOperation(VariableMap variableMap,IProgressMonitor monitor) throws Exception {
  BranchId requirementsBranch=variableMap.getBranch(""String_Node_Str"");
  Collection<? extends IArtifactType> types=variableMap.getCollection(ArtifactType.class,""String_Node_Str"");
  boolean searchInherited=variableMap.getBoolean(""String_Node_Str"");
  File scriptDir=new File(variableMap.getString(""String_Node_Str""));
  List<TraceabilityStyle> selectedReports=getStyles(variableMap);
  Collection<TraceHandler> traceHandlers=new LinkedList<>();
  for (  String handler : availableTraceHandlers) {
    if (variableMap.getBoolean(handler)) {
      TraceHandler traceHandler=TraceUnitExtensionManager.getInstance().getTraceHandlerByName(handler);
      traceHandlers.add(traceHandler);
    }
  }
  int totalWork=selectedReports.size() * 2 + 1;
  monitor.beginTask(""String_Node_Str"",totalWork);
  if (selectedReports.size() > 0) {
    TraceabilityProviderOperation provider;
    if (traceHandlers.isEmpty()) {
      provider=new BranchTraceabilityOperation(requirementsBranch,types,searchInherited);
    }
 else {
      boolean isGitBased=variableMap.getBoolean(""String_Node_Str"");
      provider=new ScriptTraceabilityOperation(scriptDir,requirementsBranch,false,types,searchInherited,traceHandlers,isGitBased);
    }
    RequirementTraceabilityData traceabilityData=new RequirementTraceabilityData(requirementsBranch,provider);
    IStatus status=traceabilityData.initialize(monitor);
    if (status.getSeverity() == IStatus.CANCEL) {
      monitor.setCanceled(true);
    }
 else     if (status.getSeverity() == IStatus.OK) {
      monitor.worked(1);
      int count=0;
      List<IFile> files=new ArrayList<>();
      for (      TraceabilityStyle style : selectedReports) {
        monitor.subTask(String.format(""String_Node_Str"",style.asLabel(),++count,selectedReports.size()));
        TraceabilityTable table=TraceabilityFactory.getTraceabilityTable(style,traceabilityData);
        if (table != null) {
          table.run(monitor);
        }
        monitor.worked(1);
        if (table != null) {
          monitor.subTask(String.format(""String_Node_Str"",style.asLabel(),count,selectedReports.size()));
          String fileName=style.toString() + ""String_Node_Str"" + Lib.getDateTimeString()+ ""String_Node_Str"";
          IFile iFile=OseeData.getIFile(fileName);
          AIFile.writeToFile(iFile,table.toString());
          files.add(iFile);
        }
        monitor.worked(1);
      }
      for (      IFile iFile : files) {
        Program.launch(iFile.getLocation().toOSString());
      }
    }
 else {
      throw new Exception(status.getMessage(),status.getException());
    }
  }
  monitor.subTask(""String_Node_Str"");
}",0.996898376208721
96798,"public IOseeBranch getBranch(String parameterName) throws OseeArgumentException {
  return getValue(IOseeBranch.class,parameterName);
}","public BranchId getBranch(String parameterName) throws OseeArgumentException {
  return getValue(BranchId.class,parameterName);
}",0.946969696969697
96799,"@Override public void runOperation(VariableMap variableMap,IProgressMonitor monitor) throws Exception {
  IArtifactType ofArtifactType=variableMap.getArtifactType(""String_Node_Str"");
  IOseeBranch branch=variableMap.getBranch(""String_Node_Str"");
  if (branch == null) {
    AWorkbench.popup(""String_Node_Str"");
    return;
  }
  String keywordgroups=variableMap.getString(""String_Node_Str"");
  if (!Strings.isValid(keywordgroups)) {
    AWorkbench.popup(""String_Node_Str"");
    return;
  }
  Collection<AttributeType> attrTypes=variableMap.getAttributeTypes(""String_Node_Str"");
  HashCollection<Artifact,String> artifactToMatch=new HashCollection<>(100);
  for (  String keywords : keywordgroups.split(System.getProperty(""String_Node_Str""))) {
    for (    Artifact art : ArtifactQuery.getArtifactListFromAttributeKeywords(branch,keywords,true,EXCLUDE_DELETED,false)) {
      if (ofArtifactType == null || art.isOfType(ofArtifactType)) {
        artifactToMatch.put(art,keywords);
      }
    }
  }
  XResultData resultData=new XResultData(false);
  resultData.log(String.format(""String_Node_Str"",getName(),branch));
  resultData.addRaw(AHTML.beginMultiColumnTable(100,1));
  List<String> headerList=new ArrayList<>();
  headerList.addAll(Arrays.asList(""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str""));
  for (  AttributeType attrType : attrTypes) {
    headerList.add(attrType.getName());
  }
  resultData.addRaw(AHTML.addHeaderRowMultiColumnTable(headerList));
  for (  Entry<Artifact,Collection<String>> entry : artifactToMatch.entrySet()) {
    List<String> valueList=new ArrayList<>();
    valueList.addAll(Arrays.asList(entry.getKey().getName(),Collections.toString(""String_Node_Str"",entry.getValue()),entry.getKey().getGuid(),XResultDataUI.getHyperlink(""String_Node_Str"",entry.getKey()),entry.getKey().getArtifactTypeName()));
    for (    AttributeType attrType : attrTypes) {
      valueList.add(entry.getKey().getAttributesToString(attrType));
    }
    resultData.addRaw(AHTML.addRowMultiColumnTable(valueList.toArray(new String[valueList.size()]),null));
  }
  resultData.addRaw(AHTML.endMultiColumnTable());
  resultData.log(""String_Node_Str"" + keywordgroups);
  XResultDataUI.report(resultData,String.format(""String_Node_Str"",getName(),branch));
}","@Override public void runOperation(VariableMap variableMap,IProgressMonitor monitor) throws Exception {
  IArtifactType ofArtifactType=variableMap.getArtifactType(""String_Node_Str"");
  BranchId branch=variableMap.getBranch(""String_Node_Str"");
  if (branch == null) {
    AWorkbench.popup(""String_Node_Str"");
    return;
  }
  String keywordgroups=variableMap.getString(""String_Node_Str"");
  if (!Strings.isValid(keywordgroups)) {
    AWorkbench.popup(""String_Node_Str"");
    return;
  }
  Collection<AttributeType> attrTypes=variableMap.getAttributeTypes(""String_Node_Str"");
  HashCollection<Artifact,String> artifactToMatch=new HashCollection<>(100);
  for (  String keywords : keywordgroups.split(System.getProperty(""String_Node_Str""))) {
    for (    Artifact art : ArtifactQuery.getArtifactListFromAttributeKeywords(branch,keywords,true,EXCLUDE_DELETED,false)) {
      if (ofArtifactType == null || art.isOfType(ofArtifactType)) {
        artifactToMatch.put(art,keywords);
      }
    }
  }
  XResultData resultData=new XResultData(false);
  resultData.log(String.format(""String_Node_Str"",getName(),branch));
  resultData.addRaw(AHTML.beginMultiColumnTable(100,1));
  List<String> headerList=new ArrayList<>();
  headerList.addAll(Arrays.asList(""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str""));
  for (  AttributeType attrType : attrTypes) {
    headerList.add(attrType.getName());
  }
  resultData.addRaw(AHTML.addHeaderRowMultiColumnTable(headerList));
  for (  Entry<Artifact,Collection<String>> entry : artifactToMatch.entrySet()) {
    List<String> valueList=new ArrayList<>();
    valueList.addAll(Arrays.asList(entry.getKey().getName(),Collections.toString(""String_Node_Str"",entry.getValue()),entry.getKey().getGuid(),XResultDataUI.getHyperlink(""String_Node_Str"",entry.getKey()),entry.getKey().getArtifactTypeName()));
    for (    AttributeType attrType : attrTypes) {
      valueList.add(entry.getKey().getAttributesToString(attrType));
    }
    resultData.addRaw(AHTML.addRowMultiColumnTable(valueList.toArray(new String[valueList.size()]),null));
  }
  resultData.addRaw(AHTML.endMultiColumnTable());
  resultData.log(""String_Node_Str"" + keywordgroups);
  XResultDataUI.report(resultData,String.format(""String_Node_Str"",getName(),branch));
}",0.9963083604777416
96800,"@Override public void runOperation(VariableMap variableMap,IProgressMonitor monitor) throws Exception {
  IOseeBranch branch=variableMap.getBranch(""String_Node_Str"");
  IArtifactType artifactType=variableMap.getArtifactType(""String_Node_Str"");
  List<Artifact> artifacts=ArtifactQuery.getArtifactListFromType(artifactType,branch,EXCLUDE_DELETED);
  for (  Artifact artifact : artifacts) {
    try {
      if (!artifact.hasParent()) {
        logf(""String_Node_Str"" + artifact.getGuid() + ""String_Node_Str"");
      }
    }
 catch (    MultipleArtifactsExist ex) {
      logf(""String_Node_Str"" + ex.getLocalizedMessage());
    }
  }
}","@Override public void runOperation(VariableMap variableMap,IProgressMonitor monitor) throws Exception {
  BranchId branch=variableMap.getBranch(""String_Node_Str"");
  IArtifactType artifactType=variableMap.getArtifactType(""String_Node_Str"");
  List<Artifact> artifacts=ArtifactQuery.getArtifactListFromType(artifactType,branch,EXCLUDE_DELETED);
  for (  Artifact artifact : artifacts) {
    try {
      if (!artifact.hasParent()) {
        logf(""String_Node_Str"" + artifact.getGuid() + ""String_Node_Str"");
      }
    }
 catch (    MultipleArtifactsExist ex) {
      logf(""String_Node_Str"" + ex.getLocalizedMessage());
    }
  }
}",0.986518636003172
96801,"@Override public void runOperation(VariableMap variableMap,IProgressMonitor monitor) throws OseeCoreException {
  IOseeBranch branch=variableMap.getBranch(""String_Node_Str"");
  List<AttributeType> attributeTypes=variableMap.getAttributeTypes(""String_Node_Str"");
  String input=variableMap.getString(ARTIFACT_IDS_WIDGET_NAME);
  Conditions.checkNotNullOrEmpty(input,ARTIFACT_IDS_WIDGET_NAME);
  List<String> inputGuids=Arrays.asList(input.split(""String_Node_Str""));
  List<Artifact> arts=ArtifactQuery.getArtifactListFromIds(inputGuids,branch);
  if (arts != null && !arts.isEmpty()) {
    SkynetTransaction transaction=TransactionManager.createTransaction(branch,""String_Node_Str"");
    for (    AttributeType attrType : attributeTypes) {
      deleteInvalidAttributeType(arts,attrType,transaction);
    }
    transaction.execute();
  }
}","@Override public void runOperation(VariableMap variableMap,IProgressMonitor monitor) throws OseeCoreException {
  BranchId branch=variableMap.getBranch(""String_Node_Str"");
  List<AttributeType> attributeTypes=variableMap.getAttributeTypes(""String_Node_Str"");
  String input=variableMap.getString(ARTIFACT_IDS_WIDGET_NAME);
  Conditions.checkNotNullOrEmpty(input,ARTIFACT_IDS_WIDGET_NAME);
  List<String> inputGuids=Arrays.asList(input.split(""String_Node_Str""));
  List<Artifact> arts=ArtifactQuery.getArtifactListFromIds(inputGuids,branch);
  if (arts != null && !arts.isEmpty()) {
    SkynetTransaction transaction=TransactionManager.createTransaction(branch,""String_Node_Str"");
    for (    AttributeType attrType : attributeTypes) {
      deleteInvalidAttributeType(arts,attrType,transaction);
    }
    transaction.execute();
  }
}",0.99581589958159
96802,"@Override public void runOperation(VariableMap variableMap,IProgressMonitor monitor) throws Exception {
  IOseeBranch branch=variableMap.getBranch(""String_Node_Str"");
  AttributeType attributeType=variableMap.getAttributeType(""String_Node_Str"");
  List<Artifact> artifacts=ArtifactQuery.getArtifactListFromAttribute(attributeType,AttributeId.UNSPECIFIED,branch);
  SkynetTransaction transaction=TransactionManager.createTransaction(branch,""String_Node_Str"");
  for (  Artifact artifact : artifacts) {
    Collection<Attribute<String>> attributes=artifact.getAttributes(attributeType);
    for (    Attribute<String> attribute1 : attributes) {
      if (!attribute1.getValue().equals(AttributeId.UNSPECIFIED)) {
        for (        Attribute<String> attribute : attributes) {
          if (attribute.getValue().equals(AttributeId.UNSPECIFIED)) {
            attribute.delete();
          }
        }
        artifact.persist(transaction);
        break;
      }
    }
  }
  transaction.execute();
}","@Override public void runOperation(VariableMap variableMap,IProgressMonitor monitor) throws Exception {
  BranchId branch=variableMap.getBranch(""String_Node_Str"");
  AttributeType attributeType=variableMap.getAttributeType(""String_Node_Str"");
  List<Artifact> artifacts=ArtifactQuery.getArtifactListFromAttribute(attributeType,AttributeId.UNSPECIFIED,branch);
  SkynetTransaction transaction=TransactionManager.createTransaction(branch,""String_Node_Str"");
  for (  Artifact artifact : artifacts) {
    Collection<Attribute<String>> attributes=artifact.getAttributes(attributeType);
    for (    Attribute<String> attribute1 : attributes) {
      if (!attribute1.getValue().equals(AttributeId.UNSPECIFIED)) {
        for (        Attribute<String> attribute : attributes) {
          if (attribute.getValue().equals(AttributeId.UNSPECIFIED)) {
            attribute.delete();
          }
        }
        artifact.persist(transaction);
        break;
      }
    }
  }
  transaction.execute();
}",0.9964877069744104
96803,"@Override public void runOperation(VariableMap variableMap,IProgressMonitor monitor) throws Exception {
  IOseeBranch branch=variableMap.getBranch(""String_Node_Str"");
  ArtifactQuery.getArtifactListFromBranch(branch,EXCLUDE_DELETED);
}","@Override public void runOperation(VariableMap variableMap,IProgressMonitor monitor) throws Exception {
  BranchId branch=variableMap.getBranch(""String_Node_Str"");
  ArtifactQuery.getArtifactListFromBranch(branch,EXCLUDE_DELETED);
}",0.9635974304068522
96804,"@Override public void runOperation(VariableMap variableMap,IProgressMonitor monitor) throws Exception {
  monitor.beginTask(""String_Node_Str"",IProgressMonitor.UNKNOWN);
  XResultData xResultData=new XResultData();
  IOseeBranch branch=variableMap.getBranch(""String_Node_Str"");
  xResultData.log(getName() + ""String_Node_Str"" + branch.getName());
  xResultData.addRaw(AHTML.beginMultiColumnTable(100,1));
  xResultData.addRaw(AHTML.addHeaderRowMultiColumnTable(new String[]{""String_Node_Str"",""String_Node_Str""}));
  for (  AttributeType attributeType : AttributeTypeManager.getAllTypes()) {
    Collection<Artifact> arts=ArtifactQuery.getArtifactListFromAttributeType(attributeType,branch);
    xResultData.addRaw(AHTML.addRowMultiColumnTable(attributeType.getName(),String.valueOf(arts.size())));
  }
  xResultData.addRaw(AHTML.endMultiColumnTable());
  XResultDataUI.report(xResultData,getName() + ""String_Node_Str"" + branch.getName());
}","@Override public void runOperation(VariableMap variableMap,IProgressMonitor monitor) throws Exception {
  monitor.beginTask(""String_Node_Str"",IProgressMonitor.UNKNOWN);
  XResultData xResultData=new XResultData();
  BranchId branch=variableMap.getBranch(""String_Node_Str"");
  xResultData.log(getName() + ""String_Node_Str"" + BranchManager.getBranchName(branch));
  xResultData.addRaw(AHTML.beginMultiColumnTable(100,1));
  xResultData.addRaw(AHTML.addHeaderRowMultiColumnTable(new String[]{""String_Node_Str"",""String_Node_Str""}));
  for (  AttributeType attributeType : AttributeTypeManager.getAllTypes()) {
    Collection<Artifact> arts=ArtifactQuery.getArtifactListFromAttributeType(attributeType,branch);
    xResultData.addRaw(AHTML.addRowMultiColumnTable(attributeType.getName(),String.valueOf(arts.size())));
  }
  xResultData.addRaw(AHTML.endMultiColumnTable());
  XResultDataUI.report(xResultData,getName() + ""String_Node_Str"" + BranchManager.getBranchName(branch));
}",0.9398849973863044
96805,"@Override public void runOperation(VariableMap variableMap,IProgressMonitor monitor) throws Exception {
  IOseeBranch branch=variableMap.getBranch(""String_Node_Str"");
  ConnectionHandler.runPreparedUpdate(UPDATE_PARENT_BRANCHES + variableMap.getString(""String_Node_Str"") + ""String_Node_Str"",branch.getUuid());
}","@Override public void runOperation(VariableMap variableMap,IProgressMonitor monitor) throws Exception {
  BranchId branch=variableMap.getBranch(""String_Node_Str"");
  ConnectionHandler.runPreparedUpdate(UPDATE_PARENT_BRANCHES + variableMap.getString(""String_Node_Str"") + ""String_Node_Str"",branch.getUuid());
}",0.9725363489499192
96806,"@Override public IOseeBranch getBranchOption(String key) throws OseeArgumentException {
  return options.getBranch(key);
}","@Override public BranchId getBranchOption(String key) throws OseeArgumentException {
  return options.getBranch(key);
}",0.970954356846473
96807,public IOseeBranch getBranchOption(String key) throws OseeArgumentException ;,public BranchId getBranchOption(String key) throws OseeArgumentException ;,0.9536423841059604
96808,"public void generateFileDifferences(List<Artifact> endArtifacts,String diffPrefix,String nextParagraphNumber,String outlineType,boolean recurseChildren) throws OseeArgumentException, OseeCoreException {
  renderer.setOption(""String_Node_Str"",endArtifacts);
  renderer.setOption(""String_Node_Str"",nextParagraphNumber);
  renderer.setOption(""String_Node_Str"",outlineType);
  renderer.setOption(""String_Node_Str"",true);
  renderer.setOption(""String_Node_Str"",true);
  renderer.setOption(""String_Node_Str"",true);
  renderer.setOption(""String_Node_Str"",renderer.getBooleanOption(WordTemplateProcessor.PUBLISH_AS_DIFF));
  renderer.setOption(WordTemplateProcessor.PUBLISH_AS_DIFF,false);
  renderer.setOption(""String_Node_Str"",recurseChildren);
  IOseeBranch endBranch=renderer.getBranchOption(""String_Node_Str"");
  renderer.setOption(""String_Node_Str"",endBranch);
  IOseeBranch compareBranch=renderer.getBranchOption(""String_Node_Str"");
  TransactionToken startTransaction;
  if (compareBranch == null) {
    startTransaction=BranchManager.getBaseTransaction(endBranch);
    compareBranch=endBranch;
  }
 else {
    startTransaction=TransactionManager.getHeadTransaction(compareBranch);
  }
  TransactionToken endTransaction=TransactionManager.getHeadTransaction(endBranch);
  TransactionDelta txDelta;
  boolean maintainOrder=renderer.getBooleanOption(""String_Node_Str"");
  if (startTransaction.getId() < endTransaction.getId() || maintainOrder) {
    if (compareBranch.equals(endBranch)) {
      txDelta=new TransactionDelta(startTransaction,endTransaction);
    }
 else {
      txDelta=new TransactionDelta(endTransaction,startTransaction);
    }
  }
 else {
    txDelta=new TransactionDelta(startTransaction,endTransaction);
  }
  boolean recurseOnLoad=renderer.getBooleanOption(WordTemplateProcessor.RECURSE_ON_LOAD);
  Collection<Artifact> toProcess=recurseChildren || recurseOnLoad ? getAllArtifacts(endArtifacts) : endArtifacts;
  List<Change> changes=new LinkedList<>();
  ChangeDataLoader changeLoader=new ChangeDataLoader(changes,txDelta);
  IProgressMonitor monitor=(IProgressMonitor)renderer.getOption(""String_Node_Str"");
  if (monitor == null) {
    monitor=new NullProgressMonitor();
  }
  changeLoader.determineChanges(monitor);
  try {
    monitor.setTaskName(""String_Node_Str"");
    diff(changes,toProcess,diffPrefix,txDelta);
  }
 catch (  Exception ex) {
    OseeLog.log(Activator.class,Level.SEVERE,ex);
  }
}","public void generateFileDifferences(List<Artifact> endArtifacts,String diffPrefix,String nextParagraphNumber,String outlineType,boolean recurseChildren) throws OseeArgumentException, OseeCoreException {
  renderer.setOption(""String_Node_Str"",endArtifacts);
  renderer.setOption(""String_Node_Str"",nextParagraphNumber);
  renderer.setOption(""String_Node_Str"",outlineType);
  renderer.setOption(""String_Node_Str"",true);
  renderer.setOption(""String_Node_Str"",true);
  renderer.setOption(""String_Node_Str"",true);
  renderer.setOption(""String_Node_Str"",renderer.getBooleanOption(WordTemplateProcessor.PUBLISH_AS_DIFF));
  renderer.setOption(WordTemplateProcessor.PUBLISH_AS_DIFF,false);
  renderer.setOption(""String_Node_Str"",recurseChildren);
  BranchId endBranch=renderer.getBranchOption(""String_Node_Str"");
  renderer.setOption(""String_Node_Str"",endBranch);
  BranchId compareBranch=renderer.getBranchOption(""String_Node_Str"");
  TransactionToken startTransaction;
  if (compareBranch == null) {
    startTransaction=BranchManager.getBaseTransaction(endBranch);
    compareBranch=endBranch;
  }
 else {
    startTransaction=TransactionManager.getHeadTransaction(compareBranch);
  }
  TransactionToken endTransaction=TransactionManager.getHeadTransaction(endBranch);
  TransactionDelta txDelta;
  boolean maintainOrder=renderer.getBooleanOption(""String_Node_Str"");
  if (startTransaction.getId() < endTransaction.getId() || maintainOrder) {
    if (compareBranch.equals(endBranch)) {
      txDelta=new TransactionDelta(startTransaction,endTransaction);
    }
 else {
      txDelta=new TransactionDelta(endTransaction,startTransaction);
    }
  }
 else {
    txDelta=new TransactionDelta(startTransaction,endTransaction);
  }
  boolean recurseOnLoad=renderer.getBooleanOption(WordTemplateProcessor.RECURSE_ON_LOAD);
  Collection<Artifact> toProcess=recurseChildren || recurseOnLoad ? getAllArtifacts(endArtifacts) : endArtifacts;
  List<Change> changes=new LinkedList<>();
  ChangeDataLoader changeLoader=new ChangeDataLoader(changes,txDelta);
  IProgressMonitor monitor=(IProgressMonitor)renderer.getOption(""String_Node_Str"");
  if (monitor == null) {
    monitor=new NullProgressMonitor();
  }
  changeLoader.determineChanges(monitor);
  try {
    monitor.setTaskName(""String_Node_Str"");
    diff(changes,toProcess,diffPrefix,txDelta);
  }
 catch (  Exception ex) {
    OseeLog.log(Activator.class,Level.SEVERE,ex);
  }
}",0.953344343517754
96809,"/** 
 * Verify that if relation validity is many to one, setRelation/setRelations will successfully remove one and add another
 */
@Test public void testSetRelationAndRelations_OneToMany(){
  String className=getClass().getSimpleName();
  IAtsChangeSet changes=createAtsChangeSet();
  ArtifactId ver1=changes.createArtifact(AtsArtifactTypes.Version,""String_Node_Str"" + className);
  ArtifactId ver2=changes.createArtifact(AtsArtifactTypes.Version,""String_Node_Str"" + className);
  ArtifactId teamWf=changes.createArtifact(AtsArtifactTypes.TeamWorkflow,""String_Node_Str"" + className);
  changes.execute();
  changes=createAtsChangeSet();
  changes.setRelation(teamWf,AtsRelationTypes.TeamWorkflowTargetedForVersion_Version,ver1);
  changes.execute();
  ver1=atsServer.getArtifact(ver1.getId());
  ver2=atsServer.getArtifact(ver2.getId());
  teamWf=atsServer.getArtifact(teamWf.getId());
  Assert.assertEquals(ver1.getId(),atsServer.getVersionService().getTargetedVersion(atsServer.getWorkItemFactory().getTeamWf(teamWf)));
  changes=createAtsChangeSet();
  changes.setRelation(teamWf,AtsRelationTypes.TeamWorkflowTargetedForVersion_Version,ver2);
  changes.execute();
  ver1=atsServer.getArtifact(ver1.getId());
  ver2=atsServer.getArtifact(ver2.getId());
  teamWf=atsServer.getArtifact(teamWf.getId());
  Assert.assertEquals(ver2.getId(),atsServer.getVersionService().getTargetedVersion(atsServer.getWorkItemFactory().getTeamWf(teamWf)));
  Assert.assertEquals(0,((ArtifactReadable)ver1).getRelated(AtsRelationTypes.TeamWorkflowTargetedForVersion_Workflow).size());
}","/** 
 * Verify that if relation validity is many to one, setRelation/setRelations will successfully remove one and add another
 */
@Test public void testSetRelationAndRelations_OneToMany(){
  String className=getClass().getSimpleName();
  IAtsChangeSet changes=createAtsChangeSet();
  ArtifactId ver1=changes.createArtifact(AtsArtifactTypes.Version,""String_Node_Str"" + className);
  ArtifactId ver2=changes.createArtifact(AtsArtifactTypes.Version,""String_Node_Str"" + className);
  ArtifactId teamWf=changes.createArtifact(AtsArtifactTypes.TeamWorkflow,""String_Node_Str"" + className);
  changes.execute();
  changes=createAtsChangeSet();
  changes.setRelation(teamWf,AtsRelationTypes.TeamWorkflowTargetedForVersion_Version,ver1);
  changes.execute();
  ver1=atsServer.getArtifact(ver1.getId());
  ver2=atsServer.getArtifact(ver2.getId());
  teamWf=atsServer.getArtifact(teamWf.getId());
  Assert.assertEquals(ver1.getId(),atsServer.getVersionService().getTargetedVersion(atsServer.getWorkItemFactory().getTeamWf(teamWf)).getId());
  changes=createAtsChangeSet();
  changes.setRelation(teamWf,AtsRelationTypes.TeamWorkflowTargetedForVersion_Version,ver2);
  changes.execute();
  ver1=atsServer.getArtifact(ver1.getId());
  ver2=atsServer.getArtifact(ver2.getId());
  teamWf=atsServer.getArtifact(teamWf.getId());
  Assert.assertEquals(ver2.getId(),atsServer.getVersionService().getTargetedVersion(atsServer.getWorkItemFactory().getTeamWf(teamWf)).getId());
  Assert.assertEquals(0,((ArtifactReadable)ver1).getRelated(AtsRelationTypes.TeamWorkflowTargetedForVersion_Workflow).size());
}",0.9949206349206348
96810,"private static ISelectionProvider getSelectionProvider(){
  ISelectionProvider selectionProvider=null;
  IWorkbench workbench=PlatformUI.getWorkbench();
  if (!workbench.isStarting() && !workbench.isClosing()) {
    IWorkbenchPage page=AWorkbench.getActivePage();
    if (page != null) {
      IWorkbenchPart part=page.getActivePart();
      if (part != null) {
        IWorkbenchSite site=part.getSite();
        if (site != null) {
          selectionProvider=site.getSelectionProvider();
        }
      }
    }
  }
  return selectionProvider;
}","protected static ISelectionProvider getSelectionProvider(){
  ISelectionProvider selectionProvider=null;
  IWorkbench workbench=PlatformUI.getWorkbench();
  if (!workbench.isStarting() && !workbench.isClosing()) {
    IWorkbenchPage page=AWorkbench.getActivePage();
    if (page != null) {
      IWorkbenchPart part=page.getActivePart();
      if (part != null) {
        IWorkbenchSite site=part.getSite();
        if (site != null) {
          selectionProvider=site.getSelectionProvider();
        }
      }
    }
  }
  return selectionProvider;
}",0.989071038251366
96811,"public static boolean isEnabledStatic(){
  if (PlatformUI.getWorkbench().isClosing()) {
    return false;
  }
  boolean isEnabled=false;
  ISelectionProvider selectionProvider=getSelectionProvider();
  if (selectionProvider != null) {
    ISelection selection=selectionProvider.getSelection();
    if (selection instanceof IStructuredSelection) {
      isEnabled=((IStructuredSelection)selection).size() == 1;
    }
  }
  return isEnabled;
}","public static boolean isEnabledStatic(){
  if (PlatformUI.getWorkbench().isClosing()) {
    return false;
  }
  boolean isEnabled=false;
  ISelectionProvider selectionProvider=getSelectionProvider();
  if (selectionProvider != null) {
    ISelection selection=selectionProvider.getSelection();
    if (selection instanceof IStructuredSelection) {
      IStructuredSelection structuredSelection=(IStructuredSelection)selection;
      isEnabled=structuredSelection.size() == 1;
      if (isEnabled) {
        List<Change> localChanges=Handlers.getArtifactChangesFromStructuredSelection(structuredSelection);
        if (localChanges.isEmpty() || localChanges.size() > 1) {
          isEnabled=false;
        }
 else {
          Change change=localChanges.iterator().next();
          if (change instanceof AttributeChange) {
            isEnabled=true;
          }
 else {
            isEnabled=false;
          }
        }
      }
    }
  }
  return isEnabled;
}",0.5691868758915835
96812,"@Override public void run(){
  try {
    ISelection selection=PlatformUI.getWorkbench().getActiveWorkbenchWindow().getSelectionService().getSelection();
    if (selection instanceof IStructuredSelection) {
      IStructuredSelection structuredSelection=(IStructuredSelection)selection;
      List<Change> localChanges=Handlers.getArtifactChangesFromStructuredSelection(structuredSelection);
      if (localChanges.isEmpty() || localChanges.size() > 1) {
        AWorkbench.popup(""String_Node_Str"");
        return;
      }
      Change change=localChanges.iterator().next();
      List<TransactionToken> transactionsFromStructuredSelection=Handlers.getTransactionsFromStructuredSelection(structuredSelection);
      TransactionId transactionId=transactionsFromStructuredSelection.iterator().next();
      List<Artifact> artifactsFromStructuredSelection=Handlers.getArtifactsFromStructuredSelection(structuredSelection);
      Artifact artifact=artifactsFromStructuredSelection.iterator().next();
      String was=change.getWasValue();
      int attrId=((AttributeChange)change).getAttrId().getId().intValue();
      TransactionId previousTransaction=getPreviousTransaction(artifact.getBranchId(),attrId,transactionId);
      if (!Strings.isValid(was) && change instanceof AttributeChange) {
        if (previousTransaction.isValid()) {
          was=loadAttributeValue(attrId,previousTransaction,artifact);
        }
      }
      String is=change.getIsValue();
      if (!Strings.isValid(is) && change instanceof AttributeChange) {
        is=loadAttributeValue(attrId,transactionId,artifact);
      }
      CompareHandler compareHandler=new CompareHandler(String.format(""String_Node_Str"",change),new CompareItem(String.format(""String_Node_Str"",previousTransaction),was,System.currentTimeMillis()),new CompareItem(String.format(""String_Node_Str"",transactionId),is,System.currentTimeMillis()),null);
      compareHandler.compare();
    }
  }
 catch (  Exception ex) {
    OseeLog.log(getClass(),OseeLevel.SEVERE_POPUP,ex);
  }
}","@Override public void run(){
  try {
    ISelection selection=PlatformUI.getWorkbench().getActiveWorkbenchWindow().getSelectionService().getSelection();
    if (selection instanceof IStructuredSelection) {
      IStructuredSelection structuredSelection=(IStructuredSelection)selection;
      List<Change> localChanges=Handlers.getArtifactChangesFromStructuredSelection(structuredSelection);
      if (localChanges.isEmpty() || localChanges.size() > 1) {
        AWorkbench.popup(""String_Node_Str"");
        return;
      }
      Change change=localChanges.iterator().next();
      if (change.getModificationType() != ModificationType.MODIFIED) {
        AWorkbench.popup(String.format(""String_Node_Str"",change.getModificationType().toString()));
        return;
      }
      TransactionId transactionId=change.getTxDelta().getEndTx();
      List<Artifact> artifactsFromStructuredSelection=Handlers.getArtifactsFromStructuredSelection(structuredSelection);
      Artifact artifact=artifactsFromStructuredSelection.iterator().next();
      String was=change.getWasValue();
      int attrId=((AttributeChange)change).getAttrId().getId().intValue();
      TransactionId previousTransaction=getPreviousTransaction(artifact.getBranchId(),attrId,transactionId);
      if (!Strings.isValid(was) && change instanceof AttributeChange) {
        if (previousTransaction.isValid()) {
          was=loadAttributeValue(attrId,previousTransaction,artifact);
        }
      }
      String is=change.getIsValue();
      if (!Strings.isValid(is) && change instanceof AttributeChange) {
        is=loadAttributeValue(attrId,transactionId,artifact);
      }
      CompareHandler compareHandler=new CompareHandler(String.format(""String_Node_Str"",change),new CompareItem(String.format(""String_Node_Str"",previousTransaction),was,System.currentTimeMillis()),new CompareItem(String.format(""String_Node_Str"",transactionId),is,System.currentTimeMillis()),null);
      compareHandler.compare();
    }
  }
 catch (  Exception ex) {
    OseeLog.log(getClass(),OseeLevel.SEVERE_POPUP,ex);
  }
}",0.8937209870510628
96813,"private String loadAttributeValue(int attrId,TransactionId transactionId,Artifact artifact){
  String appServer=OseeClientProperties.getOseeApplicationServer();
  URI uri=UriBuilder.fromUri(appServer).path(""String_Node_Str"").path(""String_Node_Str"").path(String.valueOf(artifact.getBranchId())).path(""String_Node_Str"").path(artifact.getUuid().toString()).path(""String_Node_Str"").path(String.valueOf(attrId)).path(""String_Node_Str"").path(String.valueOf(transactionId)).build();
  try {
    return JaxRsClient.newClient().target(uri).request(MediaType.TEXT_PLAIN).get(String.class);
  }
 catch (  Exception ex) {
    throw JaxRsExceptions.asOseeException(ex);
  }
}","protected String loadAttributeValue(int attrId,TransactionId transactionId,Artifact artifact){
  String appServer=OseeClientProperties.getOseeApplicationServer();
  URI uri=UriBuilder.fromUri(appServer).path(""String_Node_Str"").path(""String_Node_Str"").path(String.valueOf(artifact.getBranchId())).path(""String_Node_Str"").path(artifact.getUuid().toString()).path(""String_Node_Str"").path(String.valueOf(attrId)).path(String.valueOf(transactionId)).build();
  try {
    return JaxRsClient.newClient().target(uri).request(MediaType.TEXT_PLAIN).get(String.class);
  }
 catch (  Exception ex) {
    throw JaxRsExceptions.asOseeException(ex);
  }
}",0.9723502304147466
96814,"@Override public Object execute(ExecutionEvent event){
  new WasIsCompareEditorAction().run();
  return null;
}","@Override public Object execute(ExecutionEvent event){
  new WasIsCompareEditorChangeAction().run();
  return null;
}",0.9736842105263158
96815,"private void setupMenus(){
  Menu popupMenu=new Menu(xHistoryWidget.getXViewer().getTree().getParent());
  OpenOnShowListener openListener=new OpenOnShowListener();
  popupMenu.addMenuListener(openListener);
  OpenContributionItem contributionItem=new OpenContributionItem(getClass().getSimpleName() + ""String_Node_Str"");
  contributionItem.fill(popupMenu,-1);
  openListener.add(popupMenu.getItem(0));
  new MenuItem(popupMenu,SWT.SEPARATOR);
  createChangeReportMenuItem(popupMenu);
  new MenuItem(popupMenu,SWT.SEPARATOR);
  createReplaceAttributeWithVersionMenuItem(popupMenu);
  IAction action=new CompareArtifactAction(""String_Node_Str"",xHistoryWidget.getXViewer());
  new ActionContributionItem(action).fill(popupMenu,3);
  new ActionContributionItem(new EditTransactionComment(this)).fill(popupMenu,3);
  new ActionContributionItem(new WasIsCompareEditorAction()).fill(popupMenu,3);
  XViewerCustomMenu xMenu=new XViewerCustomMenu(xHistoryWidget.getXViewer());
  new MenuItem(popupMenu,SWT.SEPARATOR);
  xMenu.createTableCustomizationMenuItem(popupMenu);
  xMenu.createViewTableReportMenuItem(popupMenu);
  new MenuItem(popupMenu,SWT.SEPARATOR);
  xMenu.addCopyViewMenuBlock(popupMenu);
  new MenuItem(popupMenu,SWT.SEPARATOR);
  xMenu.addFilterMenuBlock(popupMenu);
  new MenuItem(popupMenu,SWT.SEPARATOR);
  xHistoryWidget.getXViewer().getTree().setMenu(popupMenu);
}","private void setupMenus(){
  Menu popupMenu=new Menu(xHistoryWidget.getXViewer().getTree().getParent());
  OpenOnShowListener openListener=new OpenOnShowListener();
  popupMenu.addMenuListener(openListener);
  OpenContributionItem contributionItem=new OpenContributionItem(getClass().getSimpleName() + ""String_Node_Str"");
  contributionItem.fill(popupMenu,-1);
  openListener.add(popupMenu.getItem(0));
  new MenuItem(popupMenu,SWT.SEPARATOR);
  createChangeReportMenuItem(popupMenu);
  new MenuItem(popupMenu,SWT.SEPARATOR);
  createReplaceAttributeWithVersionMenuItem(popupMenu);
  IAction action=new CompareArtifactAction(""String_Node_Str"",xHistoryWidget.getXViewer());
  new ActionContributionItem(action).fill(popupMenu,3);
  new ActionContributionItem(new EditTransactionComment(this)).fill(popupMenu,3);
  new ActionContributionItem(new WasIsCompareEditorAction()).fill(popupMenu,3);
  openListener.add(popupMenu.getItem(3));
  XViewerCustomMenu xMenu=new XViewerCustomMenu(xHistoryWidget.getXViewer());
  new MenuItem(popupMenu,SWT.SEPARATOR);
  xMenu.createTableCustomizationMenuItem(popupMenu);
  xMenu.createViewTableReportMenuItem(popupMenu);
  new MenuItem(popupMenu,SWT.SEPARATOR);
  xMenu.addCopyViewMenuBlock(popupMenu);
  new MenuItem(popupMenu,SWT.SEPARATOR);
  xMenu.addFilterMenuBlock(popupMenu);
  new MenuItem(popupMenu,SWT.SEPARATOR);
  xHistoryWidget.getXViewer().getTree().setMenu(popupMenu);
}",0.9849785407725322
96816,"@GET public Response getResponse(){
  ResponseBuilder builder=Response.noContent();
  try {
    QueryFactory factory=OrcsApplication.getOrcsApi().getQueryFactory();
    QueryBuilder queryBuilder=factory.fromBranch(branchUuid).andUuid(artifactUuid);
    if (transactionId.isValid()) {
      queryBuilder.fromTransaction(transactionId);
    }
    ArtifactReadable exactlyOne=queryBuilder.getResults().getExactlyOne();
    Optional<? extends AttributeReadable<Object>> item=Iterables.tryFind(exactlyOne.getAttributes(),new Predicate<AttributeReadable<Object>>(){
      @Override public boolean apply(      AttributeReadable<Object> attribute){
        return attribute.getLocalId() == attrId;
      }
    }
);
    if (item.isPresent()) {
      Object value=item.get();
      if (value instanceof AttributeReadable<?>) {
        builder=Response.ok();
        AttributeReadable<?> attribute=(AttributeReadable<?>)value;
        String mediaType=OrcsApplication.getOrcsApi().getOrcsTypes().getAttributeTypes().getMediaType(attribute.getAttributeType());
        String fileExtension=OrcsApplication.getOrcsApi().getOrcsTypes().getAttributeTypes().getFileTypeExtension(attribute.getAttributeType());
        if (mediaType.isEmpty() || mediaType.startsWith(""String_Node_Str"")) {
          builder.entity(attribute.getDisplayableString());
        }
 else {
          ResultSet<? extends AttributeReadable<Object>> results=exactlyOne.getAttributes(CoreAttributeTypes.Extension);
          AttributeReadable<Object> extension=results.getOneOrNull();
          if (extension != null) {
            fileExtension=extension.getDisplayableString();
          }
          Object content=attribute.getValue();
          builder.entity(content);
          builder.header(""String_Node_Str"",mediaType);
          String filename=URLEncoder.encode(exactlyOne.getName() + ""String_Node_Str"" + fileExtension,""String_Node_Str"");
          builder.header(""String_Node_Str"",""String_Node_Str"" + filename);
        }
      }
    }
 else {
      builder=Response.status(Status.NOT_FOUND);
    }
  }
 catch (  Exception ex) {
    throw new WebApplicationException(ex);
  }
  return builder.build();
}","@GET public Response getResponse(){
  ResponseBuilder builder=Response.noContent();
  try {
    QueryFactory factory=OrcsApplication.getOrcsApi().getQueryFactory();
    QueryBuilder queryBuilder=factory.fromBranch(branchUuid).andUuid(artifactUuid);
    if (transactionId.isValid()) {
      queryBuilder.fromTransaction(transactionId);
    }
    ArtifactReadable exactlyOne=queryBuilder.getResults().getExactlyOne();
    Optional<? extends AttributeReadable<Object>> item=Iterables.tryFind(exactlyOne.getAttributes(),new Predicate<AttributeReadable<Object>>(){
      @Override public boolean apply(      AttributeReadable<Object> attribute){
        return attribute.getLocalId() == attrId;
      }
    }
);
    if (item.isPresent()) {
      Object value=item.get();
      if (value instanceof AttributeReadable<?>) {
        builder=Response.ok();
        AttributeReadable<?> attribute=(AttributeReadable<?>)value;
        String mediaType=OrcsApplication.getOrcsApi().getOrcsTypes().getAttributeTypes().getMediaType(attribute.getAttributeType());
        String fileExtension=OrcsApplication.getOrcsApi().getOrcsTypes().getAttributeTypes().getFileTypeExtension(attribute.getAttributeType());
        if (mediaType.isEmpty() || mediaType.startsWith(""String_Node_Str"") || textOut) {
          builder.entity(attribute.getDisplayableString());
          builder.header(""String_Node_Str"",MediaType.PLAIN_TEXT_UTF_8);
        }
 else {
          ResultSet<? extends AttributeReadable<Object>> results=exactlyOne.getAttributes(CoreAttributeTypes.Extension);
          AttributeReadable<Object> extension=results.getOneOrNull();
          if (extension != null) {
            fileExtension=extension.getDisplayableString();
          }
          Object content=attribute.getValue();
          builder.entity(content);
          builder.header(""String_Node_Str"",mediaType);
          String filename=URLEncoder.encode(exactlyOne.getName() + ""String_Node_Str"" + fileExtension,""String_Node_Str"");
          builder.header(""String_Node_Str"",""String_Node_Str"" + filename);
        }
      }
    }
 else {
      builder=Response.status(Status.NOT_FOUND);
    }
  }
 catch (  Exception ex) {
    throw new WebApplicationException(ex);
  }
  return builder.build();
}",0.9812429378531072
96817,"@GET @Produces(MediaType.TEXT_HTML) @Path(""String_Node_Str"") public AttributeResource getAttributeWithGamma(@PathParam(""String_Node_Str"") int attributeId,@PathParam(""String_Node_Str"") TransactionId transactionId){
  return new AttributeResource(uriInfo,request,branchUuid,artifactUuid,attributeId,transactionId);
}","@Path(""String_Node_Str"") public AttributeResource getAttributeWithGamma(@PathParam(""String_Node_Str"") int attributeId,@PathParam(""String_Node_Str"") TransactionId transactionId){
  return new AttributeResource(uriInfo,request,branchUuid,artifactUuid,attributeId,transactionId);
}",0.9391891891891893
96818,"@Override public ApplicabilityToken getApplicabilityToken(ArtifactId artId,BranchId branch){
  List<ApplicabilityToken> result=new ArrayList<>();
  BiConsumer<Long,String> consumer=(id,name) -> result.add(new ApplicabilityToken(id,name));
  tupleQuery.getTupleType2ForArtifactId(artId,branch,consumer);
  return result.get(0);
}","@Override public ApplicabilityToken getApplicabilityToken(ArtifactId artId,BranchId branch){
  List<ApplicabilityToken> result=new ArrayList<>();
  BiConsumer<Long,String> consumer=(id,name) -> result.add(new ApplicabilityToken(id,name));
  tupleQuery.getTupleType2ForArtifactId(artId,branch,consumer);
  if (result.size() == 0) {
    result.add(ApplicabilityToken.BASE);
  }
  return result.get(0);
}",0.8998628257887518
96819,"private void addExtensionPointItems(XNavigateItem parentItem,List<XNavigateItem> items){
  IExtensionPoint point=Platform.getExtensionRegistry().getExtensionPoint(""String_Node_Str"");
  if (point == null) {
    OseeLog.log(Activator.class,OseeLevel.SEVERE_POPUP,""String_Node_Str"");
    return;
  }
  IExtension[] extensions=point.getExtensions();
  Map<String,XNavigateItem> nameToNavItem=new TreeMap<>();
  for (  IExtension extension : extensions) {
    IConfigurationElement[] elements=extension.getConfigurationElements();
    String classname=null;
    String bundleName=null;
    for (    IConfigurationElement el : elements) {
      if (el.getName().equals(""String_Node_Str"")) {
        classname=el.getAttribute(""String_Node_Str"");
        bundleName=el.getContributor().getName();
      }
    }
    if (classname != null && bundleName != null) {
      Bundle bundle=Platform.getBundle(bundleName);
      try {
        Object obj=bundle.loadClass(classname).newInstance();
        IAtsNavigateItem task=(IAtsNavigateItem)obj;
        for (        XNavigateItem navItem : task.getNavigateItems(parentItem)) {
          nameToNavItem.put(navItem.getName(),navItem);
        }
      }
 catch (      Exception ex) {
        OseeLog.log(Activator.class,Level.SEVERE,""String_Node_Str"",ex);
      }
    }
  }
  items.addAll(nameToNavItem.values());
}","private void addExtensionPointItems(XNavigateItem parentItem,List<XNavigateItem> items){
  IExtensionPoint point=Platform.getExtensionRegistry().getExtensionPoint(""String_Node_Str"");
  if (point == null) {
    OseeLog.log(Activator.class,OseeLevel.SEVERE_POPUP,""String_Node_Str"");
    return;
  }
  IExtension[] extensions=point.getExtensions();
  Map<String,XNavigateItem> nameToNavItem=new TreeMap<>();
  for (  IExtension extension : extensions) {
    IConfigurationElement[] elements=extension.getConfigurationElements();
    String classname=null;
    String bundleName=null;
    for (    IConfigurationElement el : elements) {
      if (el.getName().equals(""String_Node_Str"")) {
        classname=el.getAttribute(""String_Node_Str"");
        bundleName=el.getContributor().getName();
      }
    }
    if (classname != null && bundleName != null) {
      Bundle bundle=Platform.getBundle(bundleName);
      try {
        Object obj=bundle.loadClass(classname).newInstance();
        IAtsNavigateItem task=(IAtsNavigateItem)obj;
        if (task != null) {
          for (          XNavigateItem navItem : task.getNavigateItems(parentItem)) {
            nameToNavItem.put(navItem.getName(),navItem);
          }
        }
      }
 catch (      Exception ex) {
        OseeLog.log(Activator.class,Level.SEVERE,""String_Node_Str"",ex);
      }
    }
  }
  items.addAll(nameToNavItem.values());
}",0.9803350327749454
96820,"@Override public boolean canExecute(){
  if (source.equals(target)) {
    return false;
  }
  for (Iterator<?> iter=source.getSourceConnections().iterator(); iter.hasNext(); ) {
    Connection conn=(Connection)iter.next();
    if (conn.getTarget().equals(target)) {
      return false;
    }
  }
  return true;
}","@Override public boolean canExecute(){
  if (source.equals(target)) {
    return false;
  }
  for (Iterator<?> iter=source.getSourceConnections().iterator(); iter.hasNext(); ) {
    Connection conn=(Connection)iter.next();
    if (conn != null && conn.getTarget().equals(target)) {
      return false;
    }
  }
  return true;
}",0.975
96821,"/** 
 * Return true, if reconnecting the connection-instance to newSource is allowed.
 */
private boolean checkSourceReconnection(){
  if (newSource.equals(oldTarget)) {
    return false;
  }
  for (Iterator<?> iter=newSource.getSourceConnections().iterator(); iter.hasNext(); ) {
    Connection conn=(Connection)iter.next();
    if (conn.getTarget().equals(oldTarget) && !conn.equals(connection)) {
      return false;
    }
  }
  return true;
}","/** 
 * Return true, if reconnecting the connection-instance to newSource is allowed.
 */
private boolean checkSourceReconnection(){
  if (newSource.equals(oldTarget)) {
    return false;
  }
  for (Iterator<?> iter=newSource.getSourceConnections().iterator(); iter.hasNext(); ) {
    Connection conn=(Connection)iter.next();
    if (conn != null && conn.getTarget().equals(oldTarget) && !conn.equals(connection)) {
      return false;
    }
  }
  return true;
}",0.9823788546255506
96822,"/** 
 * Return true, if reconnecting the connection-instance to newTarget is allowed.
 */
private boolean checkTargetReconnection(){
  if (newTarget.equals(oldSource)) {
    return false;
  }
  for (Iterator<?> iter=newTarget.getTargetConnections().iterator(); iter.hasNext(); ) {
    Connection conn=(Connection)iter.next();
    if (conn.getSource().equals(oldSource) && !conn.equals(connection)) {
      return false;
    }
  }
  return true;
}","/** 
 * Return true, if reconnecting the connection-instance to newTarget is allowed.
 */
private boolean checkTargetReconnection(){
  if (newTarget.equals(oldSource)) {
    return false;
  }
  for (Iterator<?> iter=newTarget.getTargetConnections().iterator(); iter.hasNext(); ) {
    Connection conn=(Connection)iter.next();
    if (conn != null && conn.getSource().equals(oldSource) && !conn.equals(connection)) {
      return false;
    }
  }
  return true;
}",0.9823788546255506
96823,"@Test public void testLocalIdOnSide() throws OseeCoreException {
  when(relation.isDeleted()).thenReturn(false);
  when(relation.getLocalIdForSide(RelationSide.SIDE_A)).thenReturn(11);
  when(relation.getLocalIdForSide(RelationSide.SIDE_B)).thenReturn(22);
  collection.add(TYPE_1.getGuid(),relation);
  when(localId.getLocalId()).thenReturn(22);
  Relation actual=collection.getResultSet(TYPE_1,DeletionFlag.EXCLUDE_DELETED,localId,RelationSide.SIDE_A).getOneOrNull();
  assertNull(actual);
  actual=collection.getResultSet(TYPE_1,DeletionFlag.EXCLUDE_DELETED,localId,RelationSide.SIDE_B).getOneOrNull();
  assertEquals(relation,actual);
  when(localId.getLocalId()).thenReturn(11);
  actual=collection.getResultSet(TYPE_1,DeletionFlag.EXCLUDE_DELETED,localId,RelationSide.SIDE_A).getOneOrNull();
  assertEquals(relation,actual);
  actual=collection.getResultSet(TYPE_1,DeletionFlag.EXCLUDE_DELETED,localId,RelationSide.SIDE_B).getOneOrNull();
  assertNull(actual);
}","@Test public void testLocalIdOnSide() throws OseeCoreException {
  when(relation.isDeleted()).thenReturn(false);
  when(relation.getLocalIdForSide(RelationSide.SIDE_A)).thenReturn(11);
  when(relation.getLocalIdForSide(RelationSide.SIDE_B)).thenReturn(22);
  collection.add(TYPE_1.getGuid(),relation);
  when(localId.getLocalId()).thenReturn(22);
  Relation actual=(Relation)collection.getResultSet(TYPE_1,DeletionFlag.EXCLUDE_DELETED,localId,RelationSide.SIDE_A).getOneOrNull();
  assertNull(actual);
  actual=(Relation)collection.getResultSet(TYPE_1,DeletionFlag.EXCLUDE_DELETED,localId,RelationSide.SIDE_B).getOneOrNull();
  assertEquals(relation,actual);
  when(localId.getLocalId()).thenReturn(11);
  actual=(Relation)collection.getResultSet(TYPE_1,DeletionFlag.EXCLUDE_DELETED,localId,RelationSide.SIDE_A).getOneOrNull();
  assertEquals(relation,actual);
  actual=(Relation)collection.getResultSet(TYPE_1,DeletionFlag.EXCLUDE_DELETED,localId,RelationSide.SIDE_B).getOneOrNull();
  assertNull(actual);
}",0.979757085020243
96824,"/** 
 * Adds all of the items in the Collection values to the collection for the specified key.
 * @param key The key to add the values to
 * @param values The values to be added
 * @return The collection for the key, containing all values.
 */
public Collection<V> put(K key,Collection<V> values){
  Collection<V> items=null;
  for (  V value : values) {
    if (items == null) {
      items=this.put(key,value);
    }
 else {
      items.add(value);
    }
  }
  return items;
}","/** 
 * Adds all of the items in the Collection values to the collection for the specified key.
 * @param key The key to add the values to
 * @param values The values to be added. Null or empty values will insert empty list in map
 * @return The collection for the key, containing all values.
 */
public Collection<V> put(K key,Collection<V> values){
  Collection<V> items=null;
  if (values == null || values.isEmpty()) {
    Collection<V> values2=this.getValues(key);
    if (values2 == null) {
      map.put(key,new LinkedList<>());
    }
  }
  for (  V value : values) {
    if (items == null) {
      items=this.put(key,value);
    }
 else {
      items.add(value);
    }
  }
  return items;
}",0.8020390824129142
96825,"public synchronized static Collection<TransactionRecord> getCommittedArtifactTransactionIds(ArtifactId artifact) throws OseeCoreException {
  if (!commitArtifactIdMap.containsKey(artifact)) {
    ConnectionHandler.getJdbcClient().runQuery(stmt -> commitArtifactIdMap.put(artifact,loadTransaction(stmt)),SELECT_COMMIT_TRANSACTIONS,artifact);
  }
  Collection<TransactionRecord> transactions=commitArtifactIdMap.getValues(artifact);
  return transactions == null ? Collections.emptyList() : transactions;
}","public synchronized static Collection<TransactionRecord> getCommittedArtifactTransactionIds(ArtifactId artifact) throws OseeCoreException {
  if (!commitArtifactIdMap.containsKey(artifact)) {
    ConnectionHandler.getJdbcClient().runQuery(stmt -> commitArtifactIdMap.put(artifact,loadTransaction(stmt)),SELECT_COMMIT_TRANSACTIONS,artifact);
  }
  Collection<TransactionRecord> transactions=commitArtifactIdMap.getValues(artifact);
  if (transactions == null) {
    transactions=Collections.emptyList();
    commitArtifactIdMap.put(artifact,transactions);
  }
  return transactions;
}",0.8813247470101196
96826,"@Test public void testDeCache() throws OseeCoreException {
  RelationCache relCache=new RelationCache();
  Branch testBranch=TestUtil.createBranch(777,777);
  IArtifact artifactA=createArtifact(54,testBranch);
  IArtifact artifactB=createArtifact(55,testBranch);
  RelationType type=new RelationType(0x00L,""String_Node_Str"",artifactA.getName(),artifactB.getName(),CoreArtifactTypes.Artifact,CoreArtifactTypes.Artifact,RelationTypeMultiplicity.MANY_TO_MANY,""String_Node_Str"");
  RelationLink link=new RelationLink(new MockLinker(""String_Node_Str""),artifactA.getArtId(),artifactB.getArtId(),testBranch,type,77,88,""String_Node_Str"",ModificationType.MODIFIED);
  relCache.cache(artifactA,link);
  relCache.cache(artifactB,link);
  List<RelationLink> artARels=relCache.getAll(artifactA);
  Assert.assertEquals(1,artARels.size());
  relCache.deCache(artifactA);
  artARels=relCache.getAll(artifactA);
  Assert.assertEquals(0,artARels.size());
  List<RelationLink> artBRels=relCache.getAll(artifactB);
  Assert.assertEquals(0,artBRels.size());
}","@Test public void testDeCache() throws OseeCoreException {
  RelationCache relCache=new RelationCache();
  Branch testBranch=TestUtil.createBranch(777,777);
  IArtifact artifactA=createArtifact(54,testBranch);
  IArtifact artifactB=createArtifact(55,testBranch);
  RelationType type=new RelationType(0x00L,""String_Node_Str"",artifactA.getName(),artifactB.getName(),CoreArtifactTypes.Artifact,CoreArtifactTypes.Artifact,RelationTypeMultiplicity.MANY_TO_MANY,""String_Node_Str"");
  RelationLink link=new RelationLink(new MockLinker(""String_Node_Str""),artifactA.getArtId(),artifactB.getArtId(),testBranch,type,77,88,""String_Node_Str"",ModificationType.MODIFIED,ApplicabilityId.BASE);
  relCache.cache(artifactA,link);
  relCache.cache(artifactB,link);
  List<RelationLink> artARels=relCache.getAll(artifactA);
  Assert.assertEquals(1,artARels.size());
  relCache.deCache(artifactA);
  artARels=relCache.getAll(artifactA);
  Assert.assertEquals(0,artARels.size());
  List<RelationLink> artBRels=relCache.getAll(artifactB);
  Assert.assertEquals(0,artBRels.size());
}",0.9899856938483548
96827,"public static RelationLink createRelationLink(int relationId,int artA,int artB,Branch branch,RelationType relationType){
  return new RelationLink(new MockLinker(""String_Node_Str""),artA,artB,branch,relationType,relationId,0,""String_Node_Str"" + relationId,ModificationType.MODIFIED);
}","public static RelationLink createRelationLink(int relationId,int artA,int artB,Branch branch,RelationType relationType){
  return new RelationLink(new MockLinker(""String_Node_Str""),artA,artB,branch,relationType,relationId,0,""String_Node_Str"" + relationId,ModificationType.MODIFIED,ApplicabilityId.BASE);
}",0.9643463497453312
96828,"private <T>Attribute<T> initializeAttribute(IAttributeType attributeType,ModificationType modificationType,boolean markDirty,boolean setDefaultValue) throws OseeCoreException {
  Attribute<T> attribute=createAttribute(attributeType);
  attribute.internalInitialize(attributeType,this,modificationType,markDirty,setDefaultValue);
  return attribute;
}","private <T>Attribute<T> initializeAttribute(IAttributeType attributeType,ModificationType modificationType,boolean markDirty,boolean setDefaultValue) throws OseeCoreException {
  Attribute<T> attribute=createAttribute(attributeType);
  attribute.internalInitialize(attributeType,this,modificationType,ApplicabilityId.BASE,markDirty,setDefaultValue);
  return attribute;
}",0.970873786407767
96829,"public final <T>Attribute<T> internalInitializeAttribute(IAttributeType attributeType,int attributeId,int gammaId,ModificationType modificationType,boolean markDirty,Object... data) throws OseeCoreException {
  Attribute<T> attribute=createAttribute(attributeType);
  attribute.internalInitialize(attributeType,this,modificationType,attributeId,gammaId,markDirty,false);
  attribute.getAttributeDataProvider().loadData(data);
  return attribute;
}","public final <T>Attribute<T> internalInitializeAttribute(IAttributeType attributeType,int attributeId,int gammaId,ModificationType modificationType,ApplicabilityId applicabilityId,boolean markDirty,Object... data) throws OseeCoreException {
  Attribute<T> attribute=createAttribute(attributeType);
  attribute.internalInitialize(attributeType,this,modificationType,applicabilityId,attributeId,gammaId,markDirty,false);
  attribute.getAttributeDataProvider().loadData(data);
  return attribute;
}",0.9490445859872612
96830,"public void internalInitialize(IAttributeType attributeType,Artifact artifact,ModificationType modificationType,int attributeId,int gammaId,boolean markDirty,boolean setDefaultValue) throws OseeCoreException {
  internalInitialize(attributeType,artifact,modificationType,markDirty,setDefaultValue);
  this.attrId=attributeId;
  this.gammaId=gammaId;
}","public void internalInitialize(IAttributeType attributeType,Artifact artifact,ModificationType modificationType,ApplicabilityId applicabilityId,int attributeId,int gammaId,boolean markDirty,boolean setDefaultValue) throws OseeCoreException {
  internalInitialize(attributeType,artifact,modificationType,applicabilityId,markDirty,setDefaultValue);
  this.attrId=attributeId;
  this.gammaId=gammaId;
}",0.936
96831,"public AttrData(JdbcStatement chStmt,boolean historical) throws OseeCoreException {
  artifactId=chStmt.getInt(""String_Node_Str"");
  branchUuid=chStmt.getLong(""String_Node_Str"");
  attrId=chStmt.getInt(""String_Node_Str"");
  gammaId=chStmt.getInt(""String_Node_Str"");
  modType=chStmt.getInt(""String_Node_Str"");
  transactionId=chStmt.getLong(""String_Node_Str"");
  attrTypeId=chStmt.getLong(""String_Node_Str"");
  value=chStmt.getString(""String_Node_Str"");
  if (historical) {
    stripeId=chStmt.getInt(""String_Node_Str"");
  }
  uri=chStmt.getString(""String_Node_Str"");
}","public AttrData(JdbcStatement chStmt,boolean historical) throws OseeCoreException {
  artifactId=chStmt.getInt(""String_Node_Str"");
  branchUuid=chStmt.getLong(""String_Node_Str"");
  attrId=chStmt.getInt(""String_Node_Str"");
  gammaId=chStmt.getInt(""String_Node_Str"");
  modType=chStmt.getInt(""String_Node_Str"");
  transactionId=chStmt.getLong(""String_Node_Str"");
  attrTypeId=chStmt.getLong(""String_Node_Str"");
  value=chStmt.getString(""String_Node_Str"");
  if (historical) {
    stripeId=chStmt.getInt(""String_Node_Str"");
  }
  uri=chStmt.getString(""String_Node_Str"");
  applicabilityId=ApplicabilityId.valueOf(chStmt.getLong(""String_Node_Str""));
}",0.9358552631578948
96832,"private static void loadAttribute(Artifact artifact,AttrData current,AttrData previous) throws OseeCoreException {
  IAttributeType attributeType=AttributeTypeManager.getTypeByGuid(current.attrTypeId);
  String value=current.value;
  if (isEnumOrBoolean(attributeType)) {
    value=Strings.intern(value);
  }
  boolean markDirty=false;
  artifact.internalInitializeAttribute(attributeType,current.attrId,current.gammaId,ModificationType.getMod(current.modType),markDirty,value,current.uri);
}","private static void loadAttribute(Artifact artifact,AttrData current,AttrData previous) throws OseeCoreException {
  IAttributeType attributeType=AttributeTypeManager.getTypeByGuid(current.attrTypeId);
  String value=current.value;
  if (isEnumOrBoolean(attributeType)) {
    value=Strings.intern(value);
  }
  boolean markDirty=false;
  artifact.internalInitializeAttribute(attributeType,current.attrId,current.gammaId,ModificationType.getMod(current.modType),current.applicabilityId,markDirty,value,current.uri);
}",0.9761904761904762
96833,"private void introduceAttribute(Attribute<?> sourceAttribute,Artifact destinationArtifact) throws OseeDataStoreException, OseeCoreException {
  if (sourceAttribute.isDirty()) {
    throw new OseeArgumentException(""String_Node_Str"",sourceAttribute);
  }
 else   if (sourceAttribute.isInDb()) {
    Attribute<?> destinationAttribute=destinationArtifact.getAttributeById(sourceAttribute.getId(),true);
    if (destinationAttribute == null) {
      destinationArtifact.internalInitializeAttribute(sourceAttribute.getAttributeType(),sourceAttribute.getId(),sourceAttribute.getGammaId(),sourceAttribute.getModificationType(),true,sourceAttribute.getAttributeDataProvider().getData()).internalSetModType(sourceAttribute.getModificationType(),true,true);
    }
 else {
      destinationAttribute.introduce(sourceAttribute);
    }
  }
}","private void introduceAttribute(Attribute<?> sourceAttribute,Artifact destinationArtifact) throws OseeDataStoreException, OseeCoreException {
  if (sourceAttribute.isDirty()) {
    throw new OseeArgumentException(""String_Node_Str"",sourceAttribute);
  }
 else   if (sourceAttribute.isInDb()) {
    Attribute<?> destinationAttribute=destinationArtifact.getAttributeById(sourceAttribute.getId(),true);
    if (destinationAttribute == null) {
      destinationArtifact.internalInitializeAttribute(sourceAttribute.getAttributeType(),sourceAttribute.getId(),sourceAttribute.getGammaId(),sourceAttribute.getModificationType(),sourceAttribute.getApplicabilityId(),true,sourceAttribute.getAttributeDataProvider().getData()).internalSetModType(sourceAttribute.getModificationType(),true,true);
    }
 else {
      destinationAttribute.introduce(sourceAttribute);
    }
  }
}",0.9781194559432288
96834,"private void introduceRelation(RelationLink sourceRelation,Artifact destinationArtifact) throws OseeDataStoreException, OseeCoreException {
  if (sourceRelation.isDirty()) {
    throw new OseeArgumentException(""String_Node_Str"",sourceRelation);
  }
 else   if (sourceRelation.isInDb()) {
    RelationLink destinationRelation=RelationManager.getLoadedRelationById(sourceRelation.getId(),sourceRelation.getAArtifactId(),sourceRelation.getBArtifactId(),destinationBranch);
    if (destinationRelation == null) {
      int aArtifactId=sourceRelation.getAArtifactId();
      int bArtifactId=sourceRelation.getBArtifactId();
      if (doesRelatedArtifactExist(destinationArtifact,aArtifactId,bArtifactId)) {
        ModificationType modType=sourceRelation.getModificationType();
        destinationRelation=RelationManager.getOrCreate(aArtifactId,bArtifactId,destinationBranch,sourceRelation.getRelationType(),sourceRelation.getId(),sourceRelation.getGammaId(),sourceRelation.getRationale(),modType);
        destinationRelation.internalSetModType(modType,true,true);
      }
    }
 else {
      destinationRelation.introduce(sourceRelation.getGammaId(),sourceRelation.getModificationType());
    }
  }
}","private void introduceRelation(RelationLink sourceRelation,Artifact destinationArtifact) throws OseeDataStoreException, OseeCoreException {
  if (sourceRelation.isDirty()) {
    throw new OseeArgumentException(""String_Node_Str"",sourceRelation);
  }
 else   if (sourceRelation.isInDb()) {
    RelationLink destinationRelation=RelationManager.getLoadedRelationById(sourceRelation.getId(),sourceRelation.getAArtifactId(),sourceRelation.getBArtifactId(),destinationBranch);
    if (destinationRelation == null) {
      int aArtifactId=sourceRelation.getAArtifactId();
      int bArtifactId=sourceRelation.getBArtifactId();
      if (doesRelatedArtifactExist(destinationArtifact,aArtifactId,bArtifactId)) {
        ModificationType modType=sourceRelation.getModificationType();
        destinationRelation=RelationManager.getOrCreate(aArtifactId,bArtifactId,destinationBranch,sourceRelation.getRelationType(),sourceRelation.getId(),sourceRelation.getGammaId(),sourceRelation.getRationale(),modType,sourceRelation.getApplicabilityId());
        destinationRelation.internalSetModType(modType,true,true);
      }
    }
 else {
      destinationRelation.introduce(sourceRelation.getGammaId(),sourceRelation.getModificationType());
    }
  }
}",0.9851973684210528
96835,"public static void loadRelationData(int joinQueryId,Collection<Artifact> artifacts,boolean historical,LoadLevel loadLevel) throws OseeCoreException {
  if (loadLevel == ARTIFACT_DATA || loadLevel == ARTIFACT_AND_ATTRIBUTE_DATA) {
    return;
  }
  if (historical) {
    return;
  }
  JdbcStatement chStmt=ConnectionHandler.getStatement();
  try {
    String sqlQuery=ServiceUtil.getSql(OseeSql.LOAD_RELATIONS);
    chStmt.runPreparedQuery(artifacts.size() * 8,sqlQuery,joinQueryId);
    while (chStmt.next()) {
      int relationId=chStmt.getInt(""String_Node_Str"");
      int aArtifactId=chStmt.getInt(""String_Node_Str"");
      int bArtifactId=chStmt.getInt(""String_Node_Str"");
      BranchId branch=TokenFactory.createBranch(chStmt.getLong(""String_Node_Str""));
      RelationType relationType=RelationTypeManager.getTypeByGuid(chStmt.getLong(""String_Node_Str""));
      int gammaId=chStmt.getInt(""String_Node_Str"");
      String rationale=chStmt.getString(""String_Node_Str"");
      ModificationType modificationType=ModificationType.getMod(chStmt.getInt(""String_Node_Str""));
      RelationManager.getOrCreate(aArtifactId,bArtifactId,branch,relationType,relationId,gammaId,rationale,modificationType);
    }
  }
  finally {
    chStmt.close();
  }
  for (  Artifact artifact : artifacts) {
    artifact.setLinksLoaded(true);
  }
}","public static void loadRelationData(int joinQueryId,Collection<Artifact> artifacts,boolean historical,LoadLevel loadLevel) throws OseeCoreException {
  if (loadLevel == ARTIFACT_DATA || loadLevel == ARTIFACT_AND_ATTRIBUTE_DATA) {
    return;
  }
  if (historical) {
    return;
  }
  JdbcStatement chStmt=ConnectionHandler.getStatement();
  try {
    String sqlQuery=ServiceUtil.getSql(OseeSql.LOAD_RELATIONS);
    chStmt.runPreparedQuery(artifacts.size() * 8,sqlQuery,joinQueryId);
    while (chStmt.next()) {
      int relationId=chStmt.getInt(""String_Node_Str"");
      int aArtifactId=chStmt.getInt(""String_Node_Str"");
      int bArtifactId=chStmt.getInt(""String_Node_Str"");
      BranchId branch=TokenFactory.createBranch(chStmt.getLong(""String_Node_Str""));
      RelationType relationType=RelationTypeManager.getTypeByGuid(chStmt.getLong(""String_Node_Str""));
      int gammaId=chStmt.getInt(""String_Node_Str"");
      String rationale=chStmt.getString(""String_Node_Str"");
      ModificationType modificationType=ModificationType.getMod(chStmt.getInt(""String_Node_Str""));
      ApplicabilityId applicabilityId=ApplicabilityId.valueOf(chStmt.getLong(""String_Node_Str""));
      RelationManager.getOrCreate(aArtifactId,bArtifactId,branch,relationType,relationId,gammaId,rationale,modificationType,applicabilityId);
    }
  }
  finally {
    chStmt.close();
  }
  for (  Artifact artifact : artifacts) {
    artifact.setLinksLoaded(true);
  }
}",0.9588744588744588
96836,"@Override protected ApplicabilityId getApplicabilityId(){
  return ApplicabilityId.BASE;
}","@Override protected ApplicabilityId getApplicabilityId() throws OseeCoreException {
  return attribute.getApplicabilityId();
}",0.7870370370370371
96837,"private void createDispoItems(DispoProgram program,String setId,List<DispoItem> dispoItems){
  DispoSet parentSet=getQuery().findDispoSetsById(program,setId);
  if (parentSet != null) {
    ArtifactReadable author=getQuery().findUser();
    getWriter().createDispoItems(author,program,parentSet,dispoItems,""String_Node_Str"");
  }
}","private void createDispoItems(DispoProgram program,String setId,List<DispoItem> dispoItems){
  DispoSet parentSet=getQuery().findDispoSetsById(program,setId);
  if (parentSet != null) {
    ArtifactReadable author=getQuery().findUser();
    getWriter().createDispoItems(author,program,parentSet,dispoItems);
  }
}",0.9720496894409938
96838,"public void initDispoItem(DispoItemData itemToInit){
  if (itemToInit.getAnnotationsList() == null) {
    itemToInit.setAnnotationsList(new ArrayList<DispoAnnotationData>());
  }
  if (itemToInit.getDiscrepanciesList() == null) {
    itemToInit.setDiscrepanciesList(new HashMap<String,Discrepancy>());
  }
  if (itemToInit.getDiscrepanciesList().size() == 0) {
    itemToInit.setStatus(DispoStrings.Item_Pass);
  }
 else {
    itemToInit.setStatus(DispoStrings.Item_InComplete);
  }
}","public void initDispoItem(DispoItemData itemToInit){
  if (itemToInit.getAnnotationsList() == null) {
    itemToInit.setAnnotationsList(new ArrayList<DispoAnnotationData>());
  }
  if (itemToInit.getDiscrepanciesList() == null) {
    itemToInit.setDiscrepanciesList(new HashMap<String,Discrepancy>());
  }
  if (itemToInit.getDiscrepanciesList().size() == 0) {
    itemToInit.setStatus(DispoStrings.Item_Pass);
  }
 else {
    itemToInit.setStatus(DispoStrings.Item_InComplete);
  }
  if (!Strings.isValid(itemToInit.getAssignee())) {
    itemToInit.setAssignee(""String_Node_Str"");
  }
  itemToInit.setAborted(false);
  itemToInit.setNeedsRerun(false);
  itemToInit.setNeedsReview(false);
}",0.8245315161839863
96839,"void createDispoItems(ArtifactReadable author,DispoProgram program,DispoSet parentSet,List<DispoItem> data,String assignee);","void createDispoItems(ArtifactReadable author,DispoProgram program,DispoSet parentSet,List<DispoItem> data);",0.9310344827586208
96840,"@Override public void createDispoItems(ArtifactReadable author,DispoProgram program,DispoSet parentSet,List<DispoItem> data,String assignee){
  ArtifactReadable parentSetArt=findDispoArtifact(program,parentSet.getGuid(),DispoConstants.DispoSet);
  TransactionBuilder tx=getTxFactory().createTransaction(program.getUuid(),author,""String_Node_Str"");
  for (  DispoItem item : data) {
    ArtifactId createdItem=tx.createArtifact(DispoConstants.DispoItem,item.getName());
    tx.setSoleAttributeValue(createdItem,DispoConstants.DispoDateCreated,item.getCreationDate());
    tx.setSoleAttributeValue(createdItem,DispoConstants.DispoLastUpdated,item.getLastUpdate());
    tx.setSoleAttributeValue(createdItem,DispoConstants.DispoItemStatus,item.getStatus());
    tx.setSoleAttributeValue(createdItem,DispoConstants.DispoItemTotalPoints,item.getTotalPoints());
    tx.setSoleAttributeValue(createdItem,DispoConstants.DispoItemNeedsRerun,item.getNeedsRerun());
    String discrepanciesAsJsonString=DispoUtil.disrepanciesMapToJson(item.getDiscrepanciesList()).toString();
    tx.setSoleAttributeFromString(createdItem,DispoConstants.DispoDiscrepanciesJson,discrepanciesAsJsonString);
    String annotationsAsJsonString=DispoUtil.annotationsListToJson(item.getAnnotationsList()).toString();
    tx.setSoleAttributeFromString(createdItem,DispoConstants.DispoAnnotationsJson,annotationsAsJsonString);
    tx.setSoleAttributeFromString(createdItem,DispoConstants.DispoItemVersion,item.getVersion());
    tx.setSoleAttributeFromString(createdItem,DispoConstants.DispoItemAssignee,assignee);
    tx.setSoleAttributeFromString(createdItem,DispoConstants.DispoItemMachine,item.getMachine());
    tx.setSoleAttributeFromString(createdItem,DispoConstants.DispoItemCategory,item.getCategory());
    tx.setSoleAttributeFromString(createdItem,DispoConstants.DispoItemElapsedTime,item.getElapsedTime());
    tx.setSoleAttributeValue(createdItem,DispoConstants.DispoItemAborted,item.getAborted());
    if (Strings.isValid(item.getFileNumber())) {
      tx.setSoleAttributeFromString(createdItem,DispoConstants.DispoItemFileNumber,item.getFileNumber());
    }
    if (Strings.isValid(item.getMethodNumber())) {
      tx.setSoleAttributeFromString(createdItem,DispoConstants.DispoItemMethodNumber,item.getMethodNumber());
    }
    tx.relate(parentSetArt,CoreRelationTypes.Default_Hierarchical__Child,createdItem);
  }
  tx.commit();
}","@Override public void createDispoItems(ArtifactReadable author,DispoProgram program,DispoSet parentSet,List<DispoItem> data){
  ArtifactReadable parentSetArt=findDispoArtifact(program,parentSet.getGuid(),DispoConstants.DispoSet);
  TransactionBuilder tx=getTxFactory().createTransaction(program.getUuid(),author,""String_Node_Str"");
  for (  DispoItem item : data) {
    ArtifactId createdItem=tx.createArtifact(DispoConstants.DispoItem,item.getName());
    tx.setSoleAttributeValue(createdItem,DispoConstants.DispoDateCreated,item.getCreationDate());
    tx.setSoleAttributeValue(createdItem,DispoConstants.DispoLastUpdated,item.getLastUpdate());
    tx.setSoleAttributeValue(createdItem,DispoConstants.DispoItemStatus,item.getStatus());
    tx.setSoleAttributeValue(createdItem,DispoConstants.DispoItemTotalPoints,item.getTotalPoints());
    tx.setSoleAttributeValue(createdItem,DispoConstants.DispoItemNeedsRerun,item.getNeedsRerun());
    tx.setSoleAttributeValue(createdItem,DispoConstants.DispoItemAborted,item.getAborted());
    tx.setSoleAttributeValue(createdItem,DispoConstants.DispoItemNeedsReview,item.getAborted());
    String discrepanciesAsJsonString=DispoUtil.disrepanciesMapToJson(item.getDiscrepanciesList()).toString();
    tx.setSoleAttributeFromString(createdItem,DispoConstants.DispoDiscrepanciesJson,discrepanciesAsJsonString);
    String annotationsAsJsonString=DispoUtil.annotationsListToJson(item.getAnnotationsList()).toString();
    tx.setSoleAttributeFromString(createdItem,DispoConstants.DispoAnnotationsJson,annotationsAsJsonString);
    tx.setSoleAttributeFromString(createdItem,DispoConstants.DispoItemVersion,item.getVersion());
    tx.setSoleAttributeFromString(createdItem,DispoConstants.DispoItemAssignee,item.getAssignee());
    tx.setSoleAttributeFromString(createdItem,DispoConstants.DispoItemMachine,item.getMachine());
    tx.setSoleAttributeFromString(createdItem,DispoConstants.DispoItemCategory,item.getCategory());
    tx.setSoleAttributeFromString(createdItem,DispoConstants.DispoItemElapsedTime,item.getElapsedTime());
    if (Strings.isValid(item.getFileNumber())) {
      tx.setSoleAttributeFromString(createdItem,DispoConstants.DispoItemFileNumber,item.getFileNumber());
    }
    if (Strings.isValid(item.getMethodNumber())) {
      tx.setSoleAttributeFromString(createdItem,DispoConstants.DispoItemMethodNumber,item.getMethodNumber());
    }
    tx.relate(parentSetArt,CoreRelationTypes.Default_Hierarchical__Child,createdItem);
  }
  tx.commit();
}",0.9338220321726736
96841,"Artifact introduceShallowArtifact(BranchId destinationBranch) throws OseeCoreException {
  Artifact shallowArt=ArtifactTypeManager.getFactory(getArtifactType()).reflectExisitingArtifact(artId,getGuid(),getArtifactType(),gammaId,destinationBranch,modType);
  return shallowArt;
}","Artifact introduceShallowArtifact(BranchId destinationBranch) throws OseeCoreException {
  Artifact shallowArt=ArtifactTypeManager.getFactory(getArtifactType()).reflectExisitingArtifact(artId,getGuid(),getArtifactType(),gammaId,destinationBranch,modType,applicabilityId);
  return shallowArt;
}",0.972027972027972
96842,"public Artifact(String guid,BranchId branch,IArtifactType artifactType) throws OseeCoreException {
  super(GUID.checkOrCreate(guid),""String_Node_Str"");
  this.artifactTypeToken=artifactType;
  objectEditState=EditState.NO_CHANGE;
  internalSetModType(ModificationType.NEW,false);
  this.branch=branch;
}","public Artifact(String guid,BranchId branch,IArtifactType artifactType) throws OseeCoreException {
  super(GUID.checkOrCreate(guid),""String_Node_Str"");
  this.artifactTypeToken=artifactType;
  objectEditState=EditState.NO_CHANGE;
  internalSetModType(ModificationType.NEW,false);
  internalSetApplicablityId(ApplicabilityId.BASE);
  this.branch=branch;
}",0.9223744292237442
96843,"/** 
 * This method should never be called from outside the OSEE Application Framework
 */
void internalSetPersistenceData(int gammaId,TransactionToken transactionId,ModificationType modType,boolean historical,boolean useBackingData){
  this.gammaId=gammaId;
  this.transaction=transactionId;
  this.historical=historical;
  internalSetModType(modType,useBackingData);
  this.objectEditState=EditState.NO_CHANGE;
}","/** 
 * This method should never be called from outside the OSEE Application Framework
 */
void internalSetPersistenceData(int gammaId,TransactionToken transactionId,ModificationType modType,ApplicabilityId applicabilityId,boolean historical,boolean useBackingData){
  this.gammaId=gammaId;
  this.transaction=transactionId;
  this.historical=historical;
  internalSetApplicablityId(applicabilityId);
  internalSetModType(modType,useBackingData);
  this.objectEditState=EditState.NO_CHANGE;
}",0.913907284768212
96844,"/** 
 * @return Returns the gammaId.
 */
public final int getGammaId(){
  return gammaId;
}","public final int getGammaId(){
  return gammaId;
}",0.7092198581560284
96845,"/** 
 * This method does not cache the artifact, ArtifactLoader will cache existing artifacts
 */
private Artifact internalExistingArtifact(int artId,String guid,IArtifactType artifactType,int gammaId,BranchId branch,ModificationType modType,boolean historical,TransactionToken transactionId,boolean useBackingData) throws OseeCoreException {
  Artifact artifact=getArtifactInstance(guid,branch,artifactType,true);
  artifact.setArtId(artId);
  artifact.internalSetPersistenceData(gammaId,transactionId,modType,historical,useBackingData);
  return artifact;
}","/** 
 * This method does not cache the artifact, ArtifactLoader will cache existing artifacts
 */
private Artifact internalExistingArtifact(int artId,String guid,IArtifactType artifactType,int gammaId,BranchId branch,ModificationType modType,ApplicabilityId applicabilityId,boolean historical,TransactionToken transactionId,boolean useBackingData) throws OseeCoreException {
  Artifact artifact=getArtifactInstance(guid,branch,artifactType,true);
  artifact.setArtId(artId);
  artifact.internalSetPersistenceData(gammaId,transactionId,modType,applicabilityId,historical,useBackingData);
  return artifact;
}",0.9588336192109777
96846,"/** 
 * This method does not cache the artifact, ArtifactLoader will cache existing artifacts
 */
public synchronized Artifact loadExisitingArtifact(int artId,String guid,IArtifactType artifactType,int gammaId,BranchId branch,TransactionToken transactionId,ModificationType modType,boolean historical) throws OseeCoreException {
  return internalExistingArtifact(artId,guid,artifactType,gammaId,branch,modType,historical,transactionId,false);
}","/** 
 * This method does not cache the artifact, ArtifactLoader will cache existing artifacts
 */
public synchronized Artifact loadExisitingArtifact(int artId,String guid,IArtifactType artifactType,int gammaId,BranchId branch,TransactionToken transactionId,ModificationType modType,ApplicabilityId applicabilityId,boolean historical) throws OseeCoreException {
  return internalExistingArtifact(artId,guid,artifactType,gammaId,branch,modType,applicabilityId,historical,transactionId,false);
}",0.9487179487179488
96847,"public synchronized Artifact reflectExisitingArtifact(int artId,String guid,IArtifactType artifactType,int gammaId,BranchId branch,ModificationType modificationType) throws OseeCoreException {
  Artifact toReturn=internalExistingArtifact(artId,guid,artifactType,gammaId,branch,modificationType,false,TransactionToken.SENTINEL,true);
  ArtifactCache.cache(toReturn);
  return toReturn;
}","public synchronized Artifact reflectExisitingArtifact(int artId,String guid,IArtifactType artifactType,int gammaId,BranchId branch,ModificationType modificationType,ApplicabilityId applicabilityId) throws OseeCoreException {
  Artifact toReturn=internalExistingArtifact(artId,guid,artifactType,gammaId,branch,modificationType,applicabilityId,false,TransactionToken.SENTINEL,true);
  ArtifactCache.cache(toReturn);
  return toReturn;
}",0.9414634146341464
96848,"void copyDispoSetCoverage(long sourceBranch,String sourceCoverageGuid,DispoProgram destDispProgram,DispoSet destination,CopySetParams params);","void copyDispoSetCoverage(long sourceBranch,Long sourceCoverageUuid,DispoProgram destDispProgram,DispoSet destination,CopySetParams params);",0.9716312056737588
96849,"@Override public void copyDispoSet(DispoProgram program,DispoSet destination,DispoProgram sourceProgram,DispoSet sourceSet,CopySetParams params){
  List<DispoItem> sourceItems=getDispoItems(sourceProgram,sourceSet.getGuid());
  Map<String,Set<DispoItemData>> namesToDestItems=new HashMap<>();
  for (  DispoItem itemArt : getDispoItems(program,destination.getGuid())) {
    DispoItemData itemData=DispoUtil.itemArtToItemData(itemArt,true,true);
    String name=itemData.getName();
    Set<DispoItemData> itemsWithSameName=namesToDestItems.get(name);
    if (itemsWithSameName == null) {
      Set<DispoItemData> set=new HashSet<>();
      set.add(itemData);
      namesToDestItems.put(name,set);
    }
 else {
      itemsWithSameName.add(itemData);
      namesToDestItems.put(name,itemsWithSameName);
    }
  }
  Map<String,DispoItem> namesToToEditItems=new HashMap<>();
  OperationReport report=new OperationReport();
  DispoSetCopier copier=new DispoSetCopier(dispoConnector);
  if (!params.getAnnotationParam().isNone()) {
    List<DispoItem> copyResults=copier.copyAllDispositions(namesToDestItems,sourceItems,true,report);
    for (    DispoItem item : copyResults) {
      namesToToEditItems.put(item.getName(),item);
    }
  }
  copier.copyCategories(namesToDestItems,sourceItems,namesToToEditItems,params.getCategoryParam());
  copier.copyAssignee(namesToDestItems,sourceItems,namesToToEditItems,params.getAssigneeParam());
  copier.copyNotes(namesToDestItems,sourceItems,namesToToEditItems,params.getNoteParam());
  String operation=String.format(""String_Node_Str"",sourceProgram.getUuid(),sourceSet.getGuid());
  if (!namesToToEditItems.isEmpty() && !report.getStatus().isFailed()) {
    editDispoItems(program,namesToToEditItems.values(),false,operation);
  }
  storageProvider.get().updateOperationSummary(getQuery().findUser(),program,destination,report);
}","@Override public void copyDispoSet(DispoProgram program,DispoSet destination,DispoProgram sourceProgram,DispoSet sourceSet,CopySetParams params){
  List<DispoItem> sourceItems=getDispoItems(sourceProgram,sourceSet.getGuid());
  Map<String,Set<DispoItemData>> namesToDestItems=new HashMap<>();
  for (  DispoItem itemArt : getDispoItems(program,destination.getGuid())) {
    DispoItemData itemData=DispoUtil.itemArtToItemData(itemArt,true,true);
    String name=itemData.getName();
    Set<DispoItemData> itemsWithSameName=namesToDestItems.get(name);
    if (itemsWithSameName == null) {
      Set<DispoItemData> set=new HashSet<>();
      set.add(itemData);
      namesToDestItems.put(name,set);
    }
 else {
      itemsWithSameName.add(itemData);
      namesToDestItems.put(name,itemsWithSameName);
    }
  }
  Map<String,DispoItem> namesToToEditItems=new HashMap<>();
  OperationReport report=new OperationReport();
  DispoSetCopier copier=new DispoSetCopier(dispoConnector);
  if (!params.getAnnotationParam().isNone()) {
    List<DispoItem> copyResults=copier.copyAllDispositions(namesToDestItems,sourceItems,true,report);
    for (    DispoItem item : copyResults) {
      namesToToEditItems.put(item.getName(),item);
    }
  }
  copier.copyCategories(namesToDestItems,sourceItems,namesToToEditItems,params.getCategoryParam());
  copier.copyAssignee(namesToDestItems,sourceItems,namesToToEditItems,params.getAssigneeParam());
  copier.copyNotes(namesToDestItems,sourceItems,namesToToEditItems,params.getNoteParam());
  String operation=String.format(""String_Node_Str"",sourceProgram.getUuid(),sourceSet.getGuid());
  if (!namesToToEditItems.isEmpty() && !report.getStatus().isFailed()) {
    editDispoItems(program,namesToToEditItems.values(),false,operation);
    storageProvider.get().updateOperationSummary(getQuery().findUser(),program,destination,report);
  }
}",0.9470588235294116
96850,"private void runOperation(DispoProgram program,DispoSet setToEdit,DispoSetData newSet){
  OperationReport report=new OperationReport();
  String operation=newSet.getOperation();
  ArtifactReadable author=getQuery().findUser();
  if (operation.equals(DispoStrings.Operation_Import)) {
    try {
      HashMap<String,DispoItem> nameToItemMap=getItemsMap(program,setToEdit);
      DispoImporterApi importer;
      if (setToEdit.getDispoType().equalsIgnoreCase(""String_Node_Str"")) {
        importer=importerFactory.createImporter(ImportFormat.LIS);
      }
 else {
        importer=importerFactory.createImporter(ImportFormat.TMO);
      }
      List<DispoItem> itemsFromParse=importer.importDirectory(nameToItemMap,new File(setToEdit.getImportPath()),report);
      List<DispoItem> itemsToCreate=new ArrayList<>();
      List<DispoItem> itemsToEdit=new ArrayList<>();
      for (      DispoItem item : itemsFromParse) {
        if (item.getGuid() == null) {
          itemsToCreate.add(item);
          report.addEntry(item.getName(),""String_Node_Str"",DispoSummarySeverity.NEW);
        }
 else {
          itemsToEdit.add(item);
        }
      }
      if (itemsToCreate.size() > 0) {
        createDispoItems(program,setToEdit.getGuid(),itemsToCreate);
      }
      if (itemsToEdit.size() > 0) {
        editDispoItems(program,itemsToEdit,true,""String_Node_Str"");
      }
    }
 catch (    Exception ex) {
      throw new OseeCoreException(ex);
    }
  }
  List<Note> notesList=setToEdit.getNotesList();
  notesList.add(generateOperationNotes(operation));
  newSet.setNotesList(notesList);
  getWriter().updateOperationSummary(author,program,setToEdit,report);
}","private void runOperation(DispoProgram program,DispoSet setToEdit,DispoSetData newSet){
  OperationReport report=new OperationReport();
  String operation=newSet.getOperation();
  ArtifactReadable author=getQuery().findUser();
  if (operation.equals(DispoStrings.Operation_Import)) {
    try {
      HashMap<String,DispoItem> nameToItemMap=getItemsMap(program,setToEdit);
      DispoImporterApi importer;
      if (setToEdit.getDispoType().equalsIgnoreCase(""String_Node_Str"")) {
        importer=importerFactory.createImporter(ImportFormat.LIS);
      }
 else {
        importer=importerFactory.createImporter(ImportFormat.TMO);
      }
      List<DispoItem> itemsFromParse=importer.importDirectory(nameToItemMap,new File(setToEdit.getImportPath()),report);
      List<DispoItem> itemsToCreate=new ArrayList<>();
      List<DispoItem> itemsToEdit=new ArrayList<>();
      for (      DispoItem item : itemsFromParse) {
        if (item.getGuid() == null) {
          itemsToCreate.add(item);
          report.addEntry(item.getName(),""String_Node_Str"",DispoSummarySeverity.NEW);
        }
 else {
          itemsToEdit.add(item);
        }
      }
      if (!report.getStatus().isFailed()) {
        if (itemsToCreate.size() > 0) {
          createDispoItems(program,setToEdit.getGuid(),itemsToCreate);
        }
        if (itemsToEdit.size() > 0) {
          editDispoItems(program,itemsToEdit,true,""String_Node_Str"");
        }
      }
    }
 catch (    Exception ex) {
      throw new OseeCoreException(ex);
    }
  }
  List<Note> notesList=setToEdit.getNotesList();
  notesList.add(generateOperationNotes(operation));
  newSet.setNotesList(notesList);
  getWriter().updateOperationSummary(author,program,setToEdit,report);
}",0.9811209439528024
96851,"@Override public void copyDispoSetCoverage(long sourceBranch,String sourceCoverageGuid,DispoProgram destDispProgram,DispoSet destination,CopySetParams params){
  Map<String,ArtifactReadable> coverageUnits=getQuery().getCoverageUnits(sourceBranch,sourceCoverageGuid);
  List<DispoItem> destItems=getDispoItems(destDispProgram,destination.getGuid());
  OperationReport report=new OperationReport();
  CoverageAdapter coverageAdapter=new CoverageAdapter(dispoConnector);
  List<DispoItem> copyData=coverageAdapter.copyData(coverageUnits,destItems,report);
  String operation=String.format(""String_Node_Str"",sourceBranch,sourceCoverageGuid);
  if (!copyData.isEmpty()) {
    editDispoItems(destDispProgram,copyData,false,operation);
  }
  storageProvider.get().updateOperationSummary(null,destDispProgram,destination,report);
}","@Override public void copyDispoSetCoverage(long sourceBranch,Long sourceCoverageUuid,DispoProgram destDispProgram,DispoSet destination,CopySetParams params){
  Map<String,ArtifactReadable> coverageUnits=getQuery().getCoverageUnits(sourceBranch,sourceCoverageUuid);
  List<DispoItem> destItems=getDispoItems(destDispProgram,destination.getGuid());
  OperationReport report=new OperationReport();
  CoverageAdapter coverageAdapter=new CoverageAdapter(dispoConnector);
  List<DispoItem> copyData=coverageAdapter.copyData(coverageUnits,destItems,report);
  String operation=String.format(""String_Node_Str"",sourceBranch,sourceCoverageUuid);
  if (!copyData.isEmpty()) {
    editDispoItems(destDispProgram,copyData,false,operation);
    storageProvider.get().updateOperationSummary(getQuery().findUser(),destDispProgram,destination,report);
  }
}",0.8743235117257967
96852,"Map<String,ArtifactReadable> getCoverageUnits(long branchUuid,String artifactUuid);","Map<String,ArtifactReadable> getCoverageUnits(long branchUuid,Long artifactUuid);",0.9634146341463414
96853,"@Override public Map<String,ArtifactReadable> getCoverageUnits(long branchUuid,String artifactUuid){
  ArtifactReadable coveragePackage=getQuery().fromBranch(branchUuid).andGuid(artifactUuid).getResults().getOneOrNull();
  List<ArtifactReadable> descendants=coveragePackage.getDescendants();
  return getChildrenRecurse(descendants);
}","@Override public Map<String,ArtifactReadable> getCoverageUnits(long branchUuid,Long artifactUuid){
  ArtifactReadable coveragePackage=getQuery().fromBranch(branchUuid).andUuid(artifactUuid).getResults().getOneOrNull();
  List<ArtifactReadable> descendants=coveragePackage.getDescendants();
  return getChildrenRecurse(descendants);
}",0.9880239520958084
96854,"@Override public void updateOperationSummary(ArtifactReadable author,DispoProgram program,DispoSet set,OperationReport summary){
  ArtifactReadable dispoSet=findDispoArtifact(program,set.getGuid(),DispoConstants.DispoSet);
  TransactionBuilder tx=getTxFactory().createTransaction(program.getUuid(),author,""String_Node_Str"");
  tx.setSoleAttributeFromString(dispoSet,DispoConstants.ImportState,summary.getStatus().getName());
  tx.setSoleAttributeFromString(dispoSet,DispoConstants.OperationSummary,DispoUtil.operationReportToString(summary));
  tx.commit();
}","@Override public void updateOperationSummary(ArtifactReadable author,DispoProgram program,DispoSet set,OperationReport summary){
  OperationReport newReport=DispoUtil.cleanOperationReport(summary);
  ArtifactReadable dispoSet=findDispoArtifact(program,set.getGuid(),DispoConstants.DispoSet);
  TransactionBuilder tx=getTxFactory().createTransaction(program.getUuid(),author,""String_Node_Str"");
  tx.setSoleAttributeFromString(dispoSet,DispoConstants.ImportState,newReport.getStatus().getName());
  tx.setSoleAttributeFromString(dispoSet,DispoConstants.OperationSummary,DispoUtil.operationReportToString(newReport));
  tx.commit();
}",0.9151973131822
96855,"private DispoItemData buildNewItem(DispoItemData destItem,DispoItem sourceItem,boolean isCoverageCopy,OperationReport report,boolean isSameDiscrepancies){
  boolean isChangesMade=false;
  DispoItemData newItem=initNewItem(destItem,sourceItem);
  List<DispoAnnotationData> newAnnotations=newItem.getAnnotationsList();
  List<DispoAnnotationData> sourceAnnotations=sourceItem.getAnnotationsList();
  Set<String> destDefaultAnntationLocations=getDefaultAnnotations(newItem);
  Map<String,Integer> placeHolderAnnotationLocations=getPlaceHolderAnnotations(newItem);
  List<String> destDiscrepanciesTextOnly=discrepanciesTextOnly(destItem.getDiscrepanciesList());
  for (  DispoAnnotationData sourceAnnotation : sourceAnnotations) {
    String sourceLocation=sourceAnnotation.getLocationRefs();
    if (DispoUtil.isDefaultAnotation(sourceAnnotation) || !Strings.isValid(sourceAnnotation.getResolutionType())) {
      if (!destDefaultAnntationLocations.contains(sourceLocation)) {
        report.addEntry(destItem.getName(),String.format(""String_Node_Str"",sourceAnnotation.getLocationRefs()),IGNORE);
      }
    }
 else     if (destDefaultAnntationLocations.contains(sourceLocation)) {
      report.addEntry(destItem.getName(),String.format(""String_Node_Str"",sourceAnnotation.getLocationRefs()),IGNORE);
    }
 else     if (newAnnotations.toString().contains(sourceAnnotation.getGuid())) {
      report.addEntry(destItem.getName(),String.format(""String_Node_Str"",sourceAnnotation.getLocationRefs(),sourceAnnotation.getGuid()),IGNORE);
    }
 else {
      if (isSameDiscrepancies && isCoveredDiscrepanciesExistInDest(destDiscrepanciesTextOnly,sourceItem,sourceAnnotation,report)) {
        DispoAnnotationData newAnnotation=sourceAnnotation;
        if (destDefaultAnntationLocations.contains(sourceLocation)) {
          String locationRefs=sourceAnnotation.getLocationRefs();
          Integer locationRefAsInt=Integer.valueOf(locationRefs);
          if (locationRefAsInt > 0) {
            newAnnotation.setLocationRefs(String.valueOf(locationRefAsInt * -1));
          }
          report.addEntry(destItem.getName(),String.format(""String_Node_Str"",locationRefs),WARNING);
        }
        connector.connectAnnotation(newAnnotation,newItem.getDiscrepanciesList());
        isChangesMade=true;
        int nextIndex;
        if (placeHolderAnnotationLocations.containsKey(sourceLocation)) {
          nextIndex=placeHolderAnnotationLocations.get(sourceLocation);
        }
 else {
          nextIndex=newAnnotations.size();
        }
        newAnnotation.setIndex(nextIndex);
        newAnnotations.add(nextIndex,newAnnotation);
      }
    }
  }
  if (isChangesMade) {
    newItem.setAnnotationsList(newAnnotations);
    String newStatus=connector.getItemStatus(newItem);
    newItem.setStatus(newStatus);
  }
 else   if (!isCoverageCopy) {
    newItem=destItem;
    newItem.setGuid(sourceItem.getGuid());
  }
 else {
    report.addEntry(destItem.getName(),""String_Node_Str"",IGNORE);
    newItem=null;
  }
  return newItem;
}","private DispoItemData buildNewItem(DispoItemData destItem,DispoItem sourceItem,boolean isCoverageCopy,OperationReport report,boolean isSameDiscrepancies){
  boolean isChangesMade=false;
  DispoItemData newItem=initNewItem(destItem,sourceItem);
  List<DispoAnnotationData> newAnnotations=newItem.getAnnotationsList();
  List<DispoAnnotationData> sourceAnnotations=sourceItem.getAnnotationsList();
  Set<String> destDefaultAnntationLocations=getDefaultAnnotations(newItem);
  Map<String,Integer> placeHolderAnnotationLocations=getPlaceHolderAnnotations(newItem);
  List<String> destDiscrepanciesTextOnly=discrepanciesTextOnly(destItem.getDiscrepanciesList());
  for (  DispoAnnotationData sourceAnnotation : sourceAnnotations) {
    String sourceLocation=sourceAnnotation.getLocationRefs();
    if (DispoUtil.isDefaultAnotation(sourceAnnotation) || !Strings.isValid(sourceAnnotation.getResolutionType())) {
      if (!destDefaultAnntationLocations.contains(sourceLocation)) {
        report.addEntry(destItem.getName(),String.format(""String_Node_Str"",sourceAnnotation.getLocationRefs()),IGNORE);
      }
    }
 else     if (destDefaultAnntationLocations.contains(sourceLocation)) {
      report.addEntry(destItem.getName(),String.format(""String_Node_Str"",sourceAnnotation.getLocationRefs()),IGNORE);
    }
 else     if (newAnnotations.toString().contains(sourceAnnotation.getGuid())) {
      report.addEntry(destItem.getName(),String.format(""String_Node_Str"",sourceAnnotation.getLocationRefs(),sourceAnnotation.getGuid()),IGNORE);
    }
 else {
      if (isSameDiscrepancies && isCoveredDiscrepanciesExistInDest(destDiscrepanciesTextOnly,sourceItem,sourceAnnotation,report)) {
        DispoAnnotationData newAnnotation=sourceAnnotation;
        if (destDefaultAnntationLocations.contains(sourceLocation)) {
          String locationRefs=sourceAnnotation.getLocationRefs();
          Integer locationRefAsInt=Integer.valueOf(locationRefs);
          if (locationRefAsInt > 0) {
            newAnnotation.setLocationRefs(String.valueOf(locationRefAsInt * -1));
          }
          report.addEntry(destItem.getName(),String.format(""String_Node_Str"",locationRefs),WARNING);
        }
        connector.connectAnnotation(newAnnotation,newItem.getDiscrepanciesList());
        isChangesMade=true;
        int nextIndex;
        if (placeHolderAnnotationLocations.containsKey(sourceLocation)) {
          nextIndex=placeHolderAnnotationLocations.get(sourceLocation);
          newAnnotation.setIndex(nextIndex);
          newAnnotations.set(nextIndex,newAnnotation);
        }
 else {
          nextIndex=newAnnotations.size();
          newAnnotation.setIndex(nextIndex);
          newAnnotations.add(nextIndex,newAnnotation);
        }
      }
    }
  }
  if (isChangesMade) {
    newItem.setAnnotationsList(newAnnotations);
    String newStatus=connector.getItemStatus(newItem);
    newItem.setStatus(newStatus);
  }
 else   if (!isCoverageCopy) {
    newItem=destItem;
    newItem.setGuid(sourceItem.getGuid());
  }
 else {
    report.addEntry(destItem.getName(),""String_Node_Str"",IGNORE);
    newItem=null;
  }
  return newItem;
}",0.9804941482444732
96856,"@Override public List<DispoItem> importDirectory(Map<String,DispoItem> exisitingItems,File tmoDirectory,OperationReport report){
  List<DispoItem> toReturn=new LinkedList<>();
  if (tmoDirectory.isDirectory()) {
    List<File> listOfFiles=Lib.recursivelyListFiles(tmoDirectory,Pattern.compile(""String_Node_Str""));
    int numThreads=8;
    int partitionSize=listOfFiles.size() / numThreads;
    int remainder=listOfFiles.size() % numThreads;
    int startIndex=0;
    int endIndex=0;
    List<Future<List<DispoItem>>> futures=new LinkedList<>();
    for (int i=0; i < numThreads; i++) {
      startIndex=endIndex;
      endIndex=startIndex + partitionSize;
      if (i == 0) {
        endIndex+=remainder;
      }
      List<File> sublist=listOfFiles.subList(startIndex,endIndex);
      Worker worker=new Worker(sublist,dataFactory,exisitingItems,report);
      Future<List<DispoItem>> future;
      try {
        future=executor.schedule(worker);
        futures.add(future);
      }
 catch (      Exception ex) {
        logger.error(ex,""String_Node_Str"");
      }
    }
    for (    Future<List<DispoItem>> future : futures) {
      try {
        toReturn.addAll(future.get());
      }
 catch (      Exception ex) {
        logger.error(ex,""String_Node_Str"");
      }
    }
  }
  return toReturn;
}","@Override public List<DispoItem> importDirectory(Map<String,DispoItem> exisitingItems,File tmoDirectory,OperationReport report){
  List<DispoItem> toReturn=new LinkedList<>();
  if (tmoDirectory.isDirectory()) {
    List<File> listOfFiles=Lib.recursivelyListFiles(tmoDirectory,Pattern.compile(""String_Node_Str""));
    int numThreads=8;
    int partitionSize=listOfFiles.size() / numThreads;
    int remainder=listOfFiles.size() % numThreads;
    int startIndex=0;
    int endIndex=0;
    List<Future<List<DispoItem>>> futures=new LinkedList<>();
    for (int i=0; i < numThreads; i++) {
      startIndex=endIndex;
      endIndex=startIndex + partitionSize;
      if (i == 0) {
        endIndex+=remainder;
      }
      List<File> sublist=listOfFiles.subList(startIndex,endIndex);
      Worker worker=new Worker(sublist,dataFactory,exisitingItems,report);
      Future<List<DispoItem>> future;
      try {
        future=executor.schedule(worker);
        futures.add(future);
      }
 catch (      Exception ex) {
        report.addEntry(""String_Node_Str"",ex.getLocalizedMessage(),DispoSummarySeverity.ERROR);
      }
    }
    for (    Future<List<DispoItem>> future : futures) {
      try {
        toReturn.addAll(future.get());
      }
 catch (      Exception ex) {
        report.addEntry(""String_Node_Str"",ex.getLocalizedMessage(),DispoSummarySeverity.ERROR);
      }
    }
  }
  return toReturn;
}",0.9379157427937916
96857,"@Override public List<DispoItem> call() throws Exception {
  List<DispoItem> fromThread=new LinkedList<>();
  for (  File file : sublist) {
    InputStream inputStream=null;
    try {
      inputStream=new FileInputStream(file);
      String sanitizedFileName=file.getName().replaceAll(""String_Node_Str"",""String_Node_Str"");
      DispoItemData itemToBuild=new DispoItemData();
      MutableString message=new MutableString();
      MutableBoolean isSameFile=new MutableBoolean(false);
      MutableBoolean isExeptioned=new MutableBoolean(false);
      if (exisitingItems.containsKey(sanitizedFileName)) {
        DispoItem oldItem=exisitingItems.get(sanitizedFileName);
        Date lastUpdate=oldItem.getLastUpdate();
        DiscrepancyParser.buildItemFromFile(itemToBuild,sanitizedFileName,inputStream,false,lastUpdate,isSameFile,isExeptioned,message);
        if (isExeptioned.getValue()) {
          operationReport.addEntry(sanitizedFileName,message.getValue(),DispoSummarySeverity.ERROR);
        }
 else         if (!isSameFile.getValue()) {
          itemToBuild.setGuid(oldItem.getGuid());
          itemToBuild.setAnnotationsList(new ArrayList<DispoAnnotationData>());
          if (itemToBuild.getDiscrepanciesList().size() > 0) {
            DispoItemDataCopier.copyOldItemData(oldItem,itemToBuild,operationReport);
          }
          dataFactory.setStatus(itemToBuild);
          fromThread.add(itemToBuild);
        }
      }
 else {
        DiscrepancyParser.buildItemFromFile(itemToBuild,sanitizedFileName,inputStream,true,new Date(),isSameFile,isExeptioned,message);
        if (isExeptioned.getValue()) {
          operationReport.addEntry(sanitizedFileName,message.getValue(),DispoSummarySeverity.ERROR);
        }
 else {
          dataFactory.initDispoItem(itemToBuild);
          fromThread.add(itemToBuild);
        }
      }
    }
  finally {
      Lib.close(inputStream);
    }
  }
  return fromThread;
}","@Override public List<DispoItem> call() throws Exception {
  List<DispoItem> fromThread=new LinkedList<>();
  for (  File file : sublist) {
    InputStream inputStream=null;
    try {
      inputStream=new FileInputStream(file);
      String sanitizedFileName=file.getName().replaceAll(""String_Node_Str"",""String_Node_Str"");
      DispoItemData itemToBuild=new DispoItemData();
      MutableString message=new MutableString();
      MutableBoolean isSameFile=new MutableBoolean(false);
      MutableBoolean isExeptioned=new MutableBoolean(false);
      if (exisitingItems.containsKey(sanitizedFileName)) {
        DispoItem oldItem=exisitingItems.get(sanitizedFileName);
        Date lastUpdate=oldItem.getLastUpdate();
        DiscrepancyParser.buildItemFromFile(itemToBuild,sanitizedFileName,inputStream,false,lastUpdate,isSameFile,isExeptioned,message);
        if (isExeptioned.getValue()) {
          operationReport.addEntry(sanitizedFileName,message.getValue(),DispoSummarySeverity.ERROR);
        }
 else         if (!isSameFile.getValue()) {
          itemToBuild.setGuid(oldItem.getGuid());
          itemToBuild.setAnnotationsList(new ArrayList<DispoAnnotationData>());
          if (itemToBuild.getDiscrepanciesList().size() > 0) {
            DispoItemDataCopier.copyOldItemData(oldItem,itemToBuild,operationReport);
          }
          dataFactory.setStatus(itemToBuild);
          fromThread.add(itemToBuild);
        }
      }
 else {
        DiscrepancyParser.buildItemFromFile(itemToBuild,sanitizedFileName,inputStream,true,new Date(),isSameFile,isExeptioned,message);
        if (isExeptioned.getValue()) {
          operationReport.addEntry(sanitizedFileName,message.getValue(),DispoSummarySeverity.ERROR);
        }
 else {
          dataFactory.initDispoItem(itemToBuild);
          fromThread.add(itemToBuild);
        }
      }
    }
 catch (    Exception ex) {
      operationReport.addEntry(""String_Node_Str"",ex.getMessage(),DispoSummarySeverity.ERROR);
    }
 finally {
      Lib.close(inputStream);
    }
  }
  return fromThread;
}",0.9681943400951666
96858,"private List<DispoAnnotationData> copyCoverageData(ArtifactReadable source,DispoItem dest,OperationReport report){
  boolean madeChange=false;
  List<String> covearageItems=source.getAttributeValues(CoverageUtil.Item);
  Map<String,Discrepancy> textToDiscrepancyMap=getTextToDiscrepancyMap(dest);
  List<DispoAnnotationData> annotations=dest.getAnnotationsList();
  PropertyStore store=new PropertyStore();
  for (  String covearageItem : covearageItems) {
    try {
      store.load(covearageItem);
    }
 catch (    Exception ex) {
      throw new OseeCoreException(ex);
    }
    if (!store.getId().equals(PROPERTY_STORE_ID)) {
      report.addEntry(""String_Node_Str"",String.format(""String_Node_Str"",store.getId()),ERROR);
    }
    String textFromCoverage=store.get(""String_Node_Str"").trim();
    String lineNumberFromCoverage=store.get(""String_Node_Str"");
    String resolutionFromCoverage=store.get(""String_Node_Str"").trim();
    Discrepancy matchedDiscrepancy=textToDiscrepancyMap.get(textFromCoverage);
    if (!resolutionFromCoverage.equalsIgnoreCase(""String_Node_Str"") && !resolutionFromCoverage.equalsIgnoreCase(""String_Node_Str"") && matchedDiscrepancy != null) {
      madeChange=true;
      DispoAnnotationData newAnnotation=new DispoAnnotationData();
      newAnnotation.setId(GUID.create());
      newAnnotation.setIsDefault(false);
      newAnnotation.setResolutionType(resolutionFromCoverage);
      newAnnotation.setIsResolutionValid(true);
      newAnnotation.setIndex(annotations.size());
      newAnnotation.setLocationRefs(lineNumberFromCoverage);
      newAnnotation.setCustomerNotes(textFromCoverage);
      newAnnotation.setResolution(""String_Node_Str"");
      newAnnotation.setDeveloperNotes(""String_Node_Str"");
      dispoConnector.connectAnnotation(newAnnotation,dest.getDiscrepanciesList());
      annotations.add(newAnnotation.getIndex(),newAnnotation);
    }
 else     if (matchedDiscrepancy == null) {
      report.addEntry(source.getName(),String.format(""String_Node_Str"",covearageItem),WARNING);
    }
  }
  if (madeChange) {
    return annotations;
  }
 else {
    return Collections.emptyList();
  }
}","private List<DispoAnnotationData> copyCoverageData(ArtifactReadable source,DispoItem dest,OperationReport report){
  boolean madeChange=false;
  List<String> covearageItems=source.getAttributeValues(CoverageUtil.Item);
  Map<String,Discrepancy> textToDiscrepancyMap=getTextToDiscrepancyMap(dest);
  List<DispoAnnotationData> annotations=dest.getAnnotationsList();
  PropertyStore store=new PropertyStore();
  for (  String covearageItem : covearageItems) {
    try {
      store.load(covearageItem);
    }
 catch (    Exception ex) {
      throw new OseeCoreException(ex);
    }
    if (!store.getId().equals(PROPERTY_STORE_ID)) {
      report.addEntry(""String_Node_Str"",String.format(""String_Node_Str"",store.getId()),ERROR);
    }
    String textFromCoverage=store.get(""String_Node_Str"").trim();
    String lineNumberFromCoverage=store.get(""String_Node_Str"");
    String resolutionFromCoverage=store.get(""String_Node_Str"").trim();
    String rationale=store.get(""String_Node_Str"").trim();
    if (!Strings.isValid(rationale)) {
      rationale=""String_Node_Str"";
    }
    Discrepancy matchedDiscrepancy=textToDiscrepancyMap.get(textFromCoverage);
    if (!resolutionFromCoverage.equalsIgnoreCase(""String_Node_Str"") && !resolutionFromCoverage.equalsIgnoreCase(""String_Node_Str"") && matchedDiscrepancy != null) {
      madeChange=true;
      boolean isReplace=false;
      DispoAnnotationData annotationToUpdate=findAnnotation(matchedDiscrepancy.getText(),annotations);
      if (annotationToUpdate == null) {
        annotationToUpdate=new DispoAnnotationData();
        annotationToUpdate.setId(GUID.create());
        annotationToUpdate.setIndex(annotations.size());
        annotationToUpdate.setLocationRefs(lineNumberFromCoverage);
        annotationToUpdate.setCustomerNotes(textFromCoverage);
      }
      if (!annotationToUpdate.getResolutionType().equals(DispoStrings.Test_Unit_Resolution) && !annotationToUpdate.getResolutionType().equals(DispoStrings.Exception_Handling_Resolution)) {
        annotationToUpdate.setIsDefault(false);
        annotationToUpdate.setResolutionType(resolutionFromCoverage);
        annotationToUpdate.setIsResolutionValid(true);
        annotationToUpdate.setResolution(rationale);
        annotationToUpdate.setDeveloperNotes(""String_Node_Str"");
        dispoConnector.connectAnnotation(annotationToUpdate,dest.getDiscrepanciesList());
        if (isReplace) {
          annotations.set(annotationToUpdate.getIndex(),annotationToUpdate);
        }
 else {
          annotations.add(annotationToUpdate.getIndex(),annotationToUpdate);
        }
      }
    }
 else     if (matchedDiscrepancy == null) {
      report.addEntry(source.getName(),String.format(""String_Node_Str"",covearageItem),WARNING);
    }
  }
  if (madeChange) {
    return annotations;
  }
 else {
    return Collections.emptyList();
  }
}",0.67776886035313
96859,"private void processResult(VCastResult result,OperationReport report) throws Exception {
  String resultPath=result.getPath();
  String resultPathAbs=vCastDir + File.separator + resultPath;
  File resultsFile=new File(resultPathAbs);
  if (!resultsFile.exists()) {
    report.addEntry(""String_Node_Str"",String.format(""String_Node_Str"",resultPathAbs),ERROR);
  }
 else {
    BufferedReader br=null;
    try {
      br=new BufferedReader(new FileReader(resultsFile));
      String resultsLine;
      while ((resultsLine=br.readLine()) != null) {
        if (Strings.isValid(resultsLine)) {
          Result datFileSyntaxResult=VCastValidateDatFileSyntax.validateDatFileSyntax(resultsLine);
          if (!datFileSyntaxResult.isTrue()) {
            report.addEntry(""String_Node_Str"",String.format(""String_Node_Str"",resultsFile.getName()),ERROR);
          }
 else {
            Matcher m=fileMethodLineNumberPattern.matcher(resultsLine);
            if (m.find()) {
              if (!alreadyUsedDatIds.contains(resultsLine)) {
                DispoItemData item=datIdToItem.get(generateDatId(m.group(1),m.group(2)));
                String location=m.group(3);
                String text=""String_Node_Str"";
                Discrepancy matchingDiscrepancy=matchDiscrepancy(location,item.getDiscrepanciesList());
                if (matchingDiscrepancy != null) {
                  text=matchingDiscrepancy.getText();
                  Map<String,Discrepancy> discrepancies=item.getDiscrepanciesList();
                  discrepancies.remove(matchingDiscrepancy.getId());
                  addAnnotationForForCoveredLine(item,location,Test_Unit_Resolution,resultPath,text);
                }
                alreadyUsedDatIds.add(resultsLine);
              }
            }
          }
        }
      }
    }
  finally {
      Lib.close(br);
    }
  }
}","private void processResult(VCastResult result,OperationReport report) throws Exception {
  String resultPath=result.getPath();
  String resultPathAbs=vCastDir + File.separator + resultPath;
  File resultsFile=new File(resultPathAbs);
  if (!resultsFile.exists()) {
    report.addEntry(""String_Node_Str"",String.format(""String_Node_Str"",resultPathAbs),ERROR);
  }
 else {
    BufferedReader br=null;
    try {
      br=new BufferedReader(new FileReader(resultsFile));
      String resultsLine;
      while ((resultsLine=br.readLine()) != null) {
        if (Strings.isValid(resultsLine)) {
          Result datFileSyntaxResult=VCastValidateDatFileSyntax.validateDatFileSyntax(resultsLine);
          if (!datFileSyntaxResult.isTrue()) {
            report.addEntry(""String_Node_Str"",String.format(""String_Node_Str"",resultsFile.getName()),ERROR);
          }
 else {
            Matcher m=fileMethodLineNumberPattern.matcher(resultsLine);
            if (m.find()) {
              if (!alreadyUsedDatIds.contains(resultsLine)) {
                DispoItemData item=datIdToItem.get(generateDatId(m.group(1),m.group(2)));
                if (item != null) {
                  String location=m.group(3);
                  String text=""String_Node_Str"";
                  Discrepancy matchingDiscrepancy=matchDiscrepancy(location,item.getDiscrepanciesList());
                  if (matchingDiscrepancy != null) {
                    text=matchingDiscrepancy.getText();
                    Map<String,Discrepancy> discrepancies=item.getDiscrepanciesList();
                    discrepancies.remove(matchingDiscrepancy.getId());
                    addAnnotationForForCoveredLine(item,location,Test_Unit_Resolution,text,resultPath);
                  }
                  alreadyUsedDatIds.add(resultsLine);
                }
              }
            }
          }
        }
      }
    }
  finally {
      Lib.close(br);
    }
  }
}",0.9698253043938592
96860,"private void processExceptionHandled(OperationReport report){
  for (  String datId : datIdsCoveredByException) {
    Matcher matcher=Pattern.compile(""String_Node_Str"").matcher(datId);
    matcher.find();
    String itemDatId=matcher.group();
    DispoItemData item=datIdToItem.get(itemDatId);
    String line=datId.replaceAll(""String_Node_Str"",""String_Node_Str"");
    line=line.replaceAll(""String_Node_Str"",""String_Node_Str"");
    String text=""String_Node_Str"";
    Discrepancy matchingDiscrepancy=matchDiscrepancy(line,item.getDiscrepanciesList());
    if (matchingDiscrepancy != null) {
      text=matchingDiscrepancy.getText();
      Map<String,Discrepancy> discrepancies=item.getDiscrepanciesList();
      discrepancies.remove(matchingDiscrepancy.getId());
      addAnnotationForForCoveredLine(item,line,Exception_Handling_Resolution,""String_Node_Str"",text);
    }
  }
}","private void processExceptionHandled(OperationReport report){
  for (  String datId : datIdsCoveredByException) {
    Matcher matcher=Pattern.compile(""String_Node_Str"").matcher(datId);
    matcher.find();
    String itemDatId=matcher.group();
    DispoItemData item=datIdToItem.get(itemDatId);
    String line=datId.replaceAll(""String_Node_Str"",""String_Node_Str"");
    line=line.replaceAll(""String_Node_Str"",""String_Node_Str"");
    String text=""String_Node_Str"";
    Discrepancy matchingDiscrepancy=matchDiscrepancy(line,item.getDiscrepanciesList());
    if (matchingDiscrepancy != null) {
      text=matchingDiscrepancy.getText();
      Map<String,Discrepancy> discrepancies=item.getDiscrepanciesList();
      discrepancies.remove(matchingDiscrepancy.getId());
      addAnnotationForForCoveredLine(item,line,Exception_Handling_Resolution,text,""String_Node_Str"");
    }
  }
}",0.9942857142857144
96861,"private int getTotalLocationOfAnnotation(DispoAnnotationData annotation){
  String locationRefs=annotation.getLocationRefs();
  String[] locationsRefsArray=locationRefs.split(""String_Node_Str"");
  int toReturn=0;
  for (int i=0; i < locationsRefsArray.length; i++) {
    String singleRef=locationsRefsArray[i];
    if (singleRef.contains(""String_Node_Str"")) {
      String[] split=singleRef.split(""String_Node_Str"");
      int gap=Integer.valueOf(split[1]) - Integer.valueOf(split[0]);
      toReturn+=gap + 1;
    }
 else {
      toReturn++;
    }
  }
  return toReturn;
}","private int getTotalLocationOfAnnotation(DispoAnnotationData annotation){
  String locationRefs=annotation.getLocationRefs();
  String[] locationsRefsArray=locationRefs.split(""String_Node_Str"");
  int toReturn=0;
  for (int i=0; i < locationsRefsArray.length; i++) {
    String singleRef=locationsRefsArray[i].trim();
    if (singleRef.contains(""String_Node_Str"")) {
      String[] split=singleRef.split(""String_Node_Str"");
      int gap=Integer.valueOf(split[1]) - Integer.valueOf(split[0]);
      toReturn+=gap + 1;
    }
 else {
      toReturn++;
    }
  }
  return toReturn;
}",0.9939288811795316
96862,"@Path(""String_Node_Str"") @POST @RolesAllowed(DispoRoles.ROLES_ADMINISTRATOR) @Consumes(MediaType.APPLICATION_JSON) @Produces(MediaType.APPLICATION_JSON) public Response getDispoSetCopyCoverage(@QueryParam(""String_Node_Str"") String destinationSet,@QueryParam(""String_Node_Str"") Long sourceBranch,@QueryParam(""String_Node_Str"") String sourcePackage,CopySetParams params){
  Response.Status status;
  final DispoSet destination=dispoApi.getDispoSetById(program,destinationSet);
  dispoApi.copyDispoSetCoverage(sourceBranch,sourcePackage,program,destination,params);
  status=Status.OK;
  return Response.status(status).build();
}","@Path(""String_Node_Str"") @POST @RolesAllowed(DispoRoles.ROLES_ADMINISTRATOR) @Consumes(MediaType.APPLICATION_JSON) @Produces(MediaType.APPLICATION_JSON) public Response getDispoSetCopyCoverage(@QueryParam(""String_Node_Str"") String destinationSet,@QueryParam(""String_Node_Str"") Long sourceBranch,@QueryParam(""String_Node_Str"") Long sourcePackage,CopySetParams params){
  Response.Status status;
  final DispoSet destination=dispoApi.getDispoSetById(program,destinationSet);
  dispoApi.copyDispoSetCoverage(sourceBranch,sourcePackage,program,destination,params);
  status=Status.OK;
  return Response.status(status).build();
}",0.9952
96863,"public static OperationReport jsonObjToOperationSummary(JSONObject jObj){
  OperationReport summary=new OperationReport();
  List<OperationSummaryEntry> entries=new ArrayList<>();
  try {
    JSONArray entriesJson=jObj.getJSONArray(""String_Node_Str"");
    if (jObj.has(""String_Node_Str"")) {
      for (int i=0; i < entriesJson.length(); i++) {
        JSONObject entryAsJson=entriesJson.getJSONObject(i);
        OperationSummaryEntry entry=jsonObjToOperationSummaryEntry(entryAsJson);
        entries.add(entry);
      }
      summary.setEntries(entries);
    }
  }
 catch (  JSONException ex) {
  }
  return summary;
}","public static OperationReport jsonObjToOperationSummary(JSONObject jObj){
  OperationReport summary=new OperationReport();
  List<OperationSummaryEntry> entries=new ArrayList<>();
  try {
    if (jObj.has(""String_Node_Str"")) {
      JSONArray entriesJson=jObj.getJSONArray(""String_Node_Str"");
      for (int i=0; i < entriesJson.length(); i++) {
        JSONObject entryAsJson=entriesJson.getJSONObject(i);
        OperationSummaryEntry entry=jsonObjToOperationSummaryEntry(entryAsJson);
        entries.add(entry);
      }
      summary.setEntries(entries);
    }
  }
 catch (  JSONException ex) {
  }
  return summary;
}",0.9355877616747182
96864,"public static boolean isNumericLocations(String str){
  Matcher matcher=pattern.matcher(str);
  return matcher.matches();
}","public static boolean isNumericLocations(String str){
  Matcher matcher=pattern.matcher(str.trim());
  return matcher.matches();
}",0.9723320158102768
96865,"public static JdbcDbType getDbType(DatabaseMetaData metaData){
  try {
    String dbName=metaData.getDatabaseProductName();
    JdbcDbType dbType;
    String lowerCaseName=dbName.toLowerCase();
    if (lowerCaseName.contains(""String_Node_Str"")) {
      dbType=h2;
    }
 else     if (lowerCaseName.contains(""String_Node_Str"")) {
      dbType=oracle;
    }
 else     if (lowerCaseName.contains(""String_Node_Str"")) {
      dbType=foxpro;
    }
 else     if (lowerCaseName.contains(""String_Node_Str"")) {
      dbType=mysql;
    }
 else     if (lowerCaseName.contains(""String_Node_Str"")) {
      dbType=postgresql;
    }
 else     if (lowerCaseName.contains(""String_Node_Str"")) {
      dbType=hsql;
    }
 else {
      throw newJdbcException(""String_Node_Str"",dbName);
    }
    boolean hintsSupported=dbType.equals(oracle) && metaData.getDatabaseMajorVersion() > 10;
    return new JdbcDbType(dbType.getId(),hintsSupported);
  }
 catch (  SQLException ex) {
    throw newJdbcException(ex);
  }
}","public static JdbcDbType getDbType(DatabaseMetaData metaData){
  try {
    String dbName=metaData.getDatabaseProductName();
    JdbcDbType dbType;
    String lowerCaseName=dbName.toLowerCase();
    if (lowerCaseName.contains(""String_Node_Str"")) {
      dbType=h2;
    }
 else     if (lowerCaseName.contains(""String_Node_Str"")) {
      dbType=oracle;
    }
 else     if (lowerCaseName.contains(""String_Node_Str"")) {
      dbType=foxpro;
    }
 else     if (lowerCaseName.contains(""String_Node_Str"")) {
      dbType=mysql;
    }
 else     if (lowerCaseName.contains(""String_Node_Str"")) {
      dbType=postgresql;
    }
 else     if (lowerCaseName.contains(""String_Node_Str"")) {
      dbType=hsql;
    }
 else     if (lowerCaseName.contains(""String_Node_Str"")) {
      dbType=sqlite;
    }
 else {
      throw newJdbcException(""String_Node_Str"",dbName);
    }
    boolean hintsSupported=dbType.equals(oracle) && metaData.getDatabaseMajorVersion() > 10;
    return new JdbcDbType(dbType.getId(),hintsSupported);
  }
 catch (  SQLException ex) {
    throw newJdbcException(ex);
  }
}",0.9584541062801932
96866,"@Override public void createDispoItems(ArtifactReadable author,DispoProgram program,DispoSet parentSet,List<DispoItem> data){
  ArtifactReadable parentSetArt=findDispoArtifact(program,parentSet.getGuid(),DispoConstants.DispoSet);
  TransactionBuilder tx=getTxFactory().createTransaction(program.getUuid(),author,""String_Node_Str"");
  for (  DispoItem item : data) {
    ArtifactId createdItem=tx.createArtifact(DispoConstants.DispoItem,item.getName());
    tx.setSoleAttributeValue(createdItem,DispoConstants.DispoDateCreated,item.getCreationDate());
    tx.setSoleAttributeValue(createdItem,DispoConstants.DispoLastUpdated,item.getLastUpdate());
    tx.setSoleAttributeValue(createdItem,DispoConstants.DispoItemStatus,item.getStatus());
    tx.setSoleAttributeValue(createdItem,DispoConstants.DispoItemTotalPoints,item.getTotalPoints());
    tx.setSoleAttributeValue(createdItem,DispoConstants.DispoItemNeedsRerun,item.getNeedsRerun());
    tx.setSoleAttributeValue(createdItem,DispoConstants.DispoItemAborted,item.getAborted());
    tx.setSoleAttributeValue(createdItem,DispoConstants.DispoItemNeedsReview,item.getAborted());
    String discrepanciesAsJsonString=DispoUtil.disrepanciesMapToJson(item.getDiscrepanciesList()).toString();
    tx.setSoleAttributeFromString(createdItem,DispoConstants.DispoDiscrepanciesJson,discrepanciesAsJsonString);
    String annotationsAsJsonString=DispoUtil.annotationsListToJson(item.getAnnotationsList()).toString();
    tx.setSoleAttributeFromString(createdItem,DispoConstants.DispoAnnotationsJson,annotationsAsJsonString);
    tx.setSoleAttributeFromString(createdItem,DispoConstants.DispoItemVersion,item.getVersion());
    tx.setSoleAttributeFromString(createdItem,DispoConstants.DispoItemAssignee,item.getAssignee());
    tx.setSoleAttributeFromString(createdItem,DispoConstants.DispoItemMachine,item.getMachine());
    tx.setSoleAttributeFromString(createdItem,DispoConstants.DispoItemCategory,item.getCategory());
    tx.setSoleAttributeFromString(createdItem,DispoConstants.DispoItemElapsedTime,item.getElapsedTime());
    if (Strings.isValid(item.getFileNumber())) {
      tx.setSoleAttributeFromString(createdItem,DispoConstants.DispoItemFileNumber,item.getFileNumber());
    }
    if (Strings.isValid(item.getMethodNumber())) {
      tx.setSoleAttributeFromString(createdItem,DispoConstants.DispoItemMethodNumber,item.getMethodNumber());
    }
    tx.relate(parentSetArt,CoreRelationTypes.Default_Hierarchical__Child,createdItem);
  }
  tx.commit();
}","@Override public void createDispoItems(ArtifactReadable author,DispoProgram program,DispoSet parentSet,List<DispoItem> data){
  ArtifactReadable parentSetArt=findDispoArtifact(program,parentSet.getGuid(),DispoConstants.DispoSet);
  TransactionBuilder tx=getTxFactory().createTransaction(program.getUuid(),author,""String_Node_Str"");
  for (  DispoItem item : data) {
    ArtifactId createdItem=tx.createArtifact(DispoConstants.DispoItem,item.getName());
    tx.setSoleAttributeValue(createdItem,DispoConstants.DispoDateCreated,item.getCreationDate());
    tx.setSoleAttributeValue(createdItem,DispoConstants.DispoLastUpdated,item.getLastUpdate());
    tx.setSoleAttributeValue(createdItem,DispoConstants.DispoItemStatus,item.getStatus());
    tx.setSoleAttributeValue(createdItem,DispoConstants.DispoItemTotalPoints,item.getTotalPoints());
    tx.setSoleAttributeValue(createdItem,DispoConstants.DispoItemNeedsRerun,item.getNeedsRerun());
    tx.setSoleAttributeValue(createdItem,DispoConstants.DispoItemAborted,item.getAborted());
    String discrepanciesAsJsonString=DispoUtil.disrepanciesMapToJson(item.getDiscrepanciesList()).toString();
    tx.setSoleAttributeFromString(createdItem,DispoConstants.DispoDiscrepanciesJson,discrepanciesAsJsonString);
    String annotationsAsJsonString=DispoUtil.annotationsListToJson(item.getAnnotationsList()).toString();
    tx.setSoleAttributeFromString(createdItem,DispoConstants.DispoAnnotationsJson,annotationsAsJsonString);
    tx.setSoleAttributeFromString(createdItem,DispoConstants.DispoItemVersion,item.getVersion());
    tx.setSoleAttributeFromString(createdItem,DispoConstants.DispoItemAssignee,item.getAssignee());
    tx.setSoleAttributeFromString(createdItem,DispoConstants.DispoItemMachine,item.getMachine());
    tx.setSoleAttributeFromString(createdItem,DispoConstants.DispoItemCategory,item.getCategory());
    tx.setSoleAttributeFromString(createdItem,DispoConstants.DispoItemElapsedTime,item.getElapsedTime());
    if (Strings.isValid(item.getFileNumber())) {
      tx.setSoleAttributeFromString(createdItem,DispoConstants.DispoItemFileNumber,item.getFileNumber());
    }
    if (Strings.isValid(item.getMethodNumber())) {
      tx.setSoleAttributeFromString(createdItem,DispoConstants.DispoItemMethodNumber,item.getMethodNumber());
    }
    tx.relate(parentSetArt,CoreRelationTypes.Default_Hierarchical__Child,createdItem);
  }
  tx.commit();
}",0.980224260958206
96867,"/** 
 * Called before a resource method is executed
 */
@Override public void filter(ContainerRequestContext context){
  if (activityLog.isEnabled()) {
    try {
      String message=String.format(""String_Node_Str"",context.getMethod(),context.getUriInfo().getRequestUri());
      Long serverId=getServerId(context);
      Long clientId=ActivityConstants.DEFAULT_CLIENT_ID;
      if (Strings.isNumeric(context.getHeaders().getFirst(""String_Node_Str""))) {
        clientId=Long.valueOf(context.getHeaders().getFirst(""String_Node_Str""));
      }
      Long accountId=ActivityConstants.DEFAULT_ACCOUNT_ID;
      if (Strings.isNumeric(context.getHeaders().getFirst(""String_Node_Str""))) {
        accountId=Long.valueOf(context.getHeaders().getFirst(""String_Node_Str""));
      }
      Long entryId=activityLog.createActivityThread(Activity.JAXRS_METHOD_CALL,accountId,serverId,clientId,message);
      context.setProperty(ActivityConstants.HTTP_HEADER__ACTIVITY_ENTRY_ID,entryId);
    }
 catch (    Throwable th) {
      logger.error(th,""String_Node_Str"");
    }
  }
}","/** 
 * Called before a resource method is executed
 */
@Override public void filter(ContainerRequestContext context){
  if (activityLog.isEnabled()) {
    try {
      String message=String.format(""String_Node_Str"",context.getMethod(),context.getUriInfo().getPath());
      Long serverId=getServerId(context);
      Long clientId=ActivityConstants.DEFAULT_CLIENT_ID;
      if (Strings.isNumeric(context.getHeaders().getFirst(""String_Node_Str""))) {
        clientId=Long.valueOf(context.getHeaders().getFirst(""String_Node_Str""));
      }
      Long accountId=ActivityConstants.DEFAULT_ACCOUNT_ID;
      if (Strings.isNumeric(context.getHeaders().getFirst(""String_Node_Str""))) {
        accountId=Long.valueOf(context.getHeaders().getFirst(""String_Node_Str""));
      }
      Long entryId=activityLog.createActivityThread(Activity.JAXRS_METHOD_CALL,accountId,serverId,clientId,message);
      context.setProperty(ActivityConstants.HTTP_HEADER__ACTIVITY_ENTRY_ID,entryId);
    }
 catch (    Throwable th) {
      logger.error(th,""String_Node_Str"");
    }
  }
}",0.9933899905571294
96868,"public Resource findResource(ContainerRequestContext requestContext){
  UriInfo uriInfo=requestContext.getUriInfo();
  String path=uriInfo.getAbsolutePath().getPath();
  Resource resource=getResource(path);
  if (resource == null) {
    if (!hasExtension(path)) {
      List<MediaType> mediaTypes=getMediaTypesToSearch(requestContext);
      for (      MediaType mediaType : mediaTypes) {
        String resourcePath=addExtension(path,mediaType);
        if (Strings.isValid(resourcePath)) {
          resource=getResource(resourcePath);
          if (resource != null) {
            break;
          }
        }
      }
    }
  }
  return resource;
}","public Resource findResource(ContainerRequestContext requestContext){
  UriInfo uriInfo=requestContext.getUriInfo();
  String path=uriInfo.getPath(false);
  Resource resource=getResource(path);
  if (resource == null) {
    if (!hasExtension(path)) {
      List<MediaType> mediaTypes=getMediaTypesToSearch(requestContext);
      for (      MediaType mediaType : mediaTypes) {
        String resourcePath=addExtension(path,mediaType);
        if (Strings.isValid(resourcePath)) {
          resource=getResource(resourcePath);
          if (resource != null) {
            break;
          }
        }
      }
    }
  }
  return resource;
}",0.9759503491078356
96869,"@Override public void filter(ContainerRequestContext context){
  boolean isSecurePath=isPathSecure(context);
  UriInfo uriInfo=context.getUriInfo();
  String path=uriInfo.getAbsolutePath().getPath();
  if (isSecurePath && path.contains(""String_Node_Str"") || path.contains(""String_Node_Str"")) {
    if (isResourceOwnerRequest(context)) {
      handleResourceOwnerRequest(context);
    }
 else {
      super.filter(context);
    }
  }
}","@Override public void filter(ContainerRequestContext context){
  boolean isSecurePath=isPathSecure(context);
  UriInfo uriInfo=context.getUriInfo();
  String path=uriInfo.getPath();
  if (isSecurePath && path.contains(""String_Node_Str"") || path.contains(""String_Node_Str"")) {
    if (isResourceOwnerRequest(context)) {
      handleResourceOwnerRequest(context);
    }
 else {
      super.filter(context);
    }
  }
}",0.9788235294117648
96870,"public static DispoItemData jsonObjToDispoItem(JSONObject jsonObject){
  DispoItemData dispoItem=new DispoItemData();
  try {
    if (jsonObject.has(""String_Node_Str"")) {
      dispoItem.setName(jsonObject.getString(""String_Node_Str""));
    }
    if (jsonObject.has(""String_Node_Str"")) {
      dispoItem.setGuid(jsonObject.getString(""String_Node_Str""));
    }
    if (jsonObject.has(""String_Node_Str"")) {
      dispoItem.setStatus(jsonObject.getString(""String_Node_Str""));
    }
    if (jsonObject.has(""String_Node_Str"")) {
      dispoItem.setTotalPoints(jsonObject.getString(""String_Node_Str""));
    }
    if (jsonObject.has(""String_Node_Str"")) {
      dispoItem.setNeedsRerun(jsonObject.getBoolean(""String_Node_Str""));
    }
    if (jsonObject.has(""String_Node_Str"")) {
      dispoItem.setVersion(jsonObject.getString(""String_Node_Str""));
    }
    if (jsonObject.has(""String_Node_Str"")) {
      dispoItem.setAssignee(jsonObject.getString(""String_Node_Str""));
    }
    if (jsonObject.has(""String_Node_Str"")) {
      dispoItem.setCategory(jsonObject.getString(""String_Node_Str""));
    }
    if (jsonObject.has(""String_Node_Str"")) {
      dispoItem.setMachine(jsonObject.getString(""String_Node_Str""));
    }
    if (jsonObject.has(""String_Node_Str"")) {
      dispoItem.setElapsedTime(jsonObject.getString(""String_Node_Str""));
    }
    if (jsonObject.has(""String_Node_Str"")) {
      dispoItem.setAborted(jsonObject.getBoolean(""String_Node_Str""));
    }
    if (jsonObject.has(""String_Node_Str"")) {
      dispoItem.setItemNotes(jsonObject.getString(""String_Node_Str""));
    }
    if (jsonObject.has(""String_Node_Str"")) {
      dispoItem.setItemNotes(jsonObject.getString(""String_Node_Str""));
    }
    if (jsonObject.has(""String_Node_Str"")) {
      dispoItem.setItemNotes(jsonObject.getString(""String_Node_Str""));
    }
  }
 catch (  JSONException ex) {
    throw new OseeCoreException(""String_Node_Str"",ex);
  }
  return dispoItem;
}","public static DispoItemData jsonObjToDispoItem(JSONObject jsonObject){
  DispoItemData dispoItem=new DispoItemData();
  try {
    if (jsonObject.has(""String_Node_Str"")) {
      dispoItem.setName(jsonObject.getString(""String_Node_Str""));
    }
    if (jsonObject.has(""String_Node_Str"")) {
      dispoItem.setGuid(jsonObject.getString(""String_Node_Str""));
    }
    if (jsonObject.has(""String_Node_Str"")) {
      dispoItem.setStatus(jsonObject.getString(""String_Node_Str""));
    }
    if (jsonObject.has(""String_Node_Str"")) {
      dispoItem.setTotalPoints(jsonObject.getString(""String_Node_Str""));
    }
    if (jsonObject.has(""String_Node_Str"")) {
      dispoItem.setNeedsRerun(jsonObject.getBoolean(""String_Node_Str""));
    }
    if (jsonObject.has(""String_Node_Str"")) {
      dispoItem.setVersion(jsonObject.getString(""String_Node_Str""));
    }
    if (jsonObject.has(""String_Node_Str"")) {
      dispoItem.setAssignee(jsonObject.getString(""String_Node_Str""));
    }
    if (jsonObject.has(""String_Node_Str"")) {
      dispoItem.setCategory(jsonObject.getString(""String_Node_Str""));
    }
    if (jsonObject.has(""String_Node_Str"")) {
      dispoItem.setMachine(jsonObject.getString(""String_Node_Str""));
    }
    if (jsonObject.has(""String_Node_Str"")) {
      dispoItem.setElapsedTime(jsonObject.getString(""String_Node_Str""));
    }
    if (jsonObject.has(""String_Node_Str"")) {
      dispoItem.setAborted(jsonObject.getBoolean(""String_Node_Str""));
    }
    if (jsonObject.has(""String_Node_Str"")) {
      dispoItem.setItemNotes(jsonObject.getString(""String_Node_Str""));
    }
    if (jsonObject.has(""String_Node_Str"")) {
      dispoItem.setFileNumber(jsonObject.getString(""String_Node_Str""));
    }
    if (jsonObject.has(""String_Node_Str"")) {
      dispoItem.setMethodNumber(jsonObject.getString(""String_Node_Str""));
    }
  }
 catch (  JSONException ex) {
    throw new OseeCoreException(""String_Node_Str"",ex);
  }
  return dispoItem;
}",0.9896694214876032
96871,"@Test public void testPublishDiffWithFieldCodes() throws OseeCoreException {
  modifyOption(""String_Node_Str"",updateBranch);
  modifyOption(""String_Node_Str"",true);
  List<Artifact> artifacts=new ArrayList<>();
  setupFieldCodeChange();
  Artifact updateDoc=ArtifactQuery.getArtifactFromId(docFolder.getArtId(),updateBranch);
  artifacts.add(updateDoc);
  renderer.publish(singleTemplate,null,artifacts,options);
  String resultPath=renderer.getStringOption(IRenderer.RESULT_PATH_RETURN);
  Assert.assertNotEquals(String.format(""String_Node_Str"",method.getQualifiedTestName()),resultPath,null);
  try {
    String contents=getFileAsString(resultPath);
    basicDocumentCheck(contents,""String_Node_Str"",false,true);
    Assert.assertTrue(""String_Node_Str"",contents.contains(""String_Node_Str""));
    Assert.assertTrue(""String_Node_Str"",contents.contains(""String_Node_Str""));
  }
 catch (  IOException ex) {
  }
}","@Test public void testPublishDiffWithFieldCodes() throws OseeCoreException {
  modifyOption(""String_Node_Str"",updateBranch);
  modifyOption(""String_Node_Str"",true);
  List<Artifact> artifacts=new ArrayList<>();
  setupFieldCodeChange();
  Artifact updateDoc=ArtifactQuery.getArtifactFromId(docFolder.getArtId(),updateBranch);
  artifacts.add(updateDoc);
  renderer.publish(singleTemplate,null,artifacts,options);
  String resultPath=renderer.getStringOption(IRenderer.RESULT_PATH_RETURN);
  Assert.assertNotEquals(String.format(""String_Node_Str"",method.getQualifiedTestName()),resultPath,null);
  try {
    String contents=getFileAsString(resultPath);
    basicDocumentCheck(contents,""String_Node_Str"",false,true);
    Assert.assertTrue(""String_Node_Str"",contents.contains(""String_Node_Str""));
  }
 catch (  IOException ex) {
  }
}",0.9546237794371052
96872,"private WordUpdateChange wordArtifactUpdate(WordUpdateData data,Collection<WordExtractorData> extractorDatas,Element oleDataElement){
  List<String> deletedArtifacts=Lists.newArrayList();
  WordUpdateChange updateChange=new WordUpdateChange();
  try {
    TransactionFactory txFactory=orcsApi.getTransactionFactory();
    boolean singleArtifact=extractorDatas.size() == 1;
    boolean containsOleData=false;
    boolean containsWordData=false;
    ArtifactReadable userArtifact=getArtifact(COMMON_ID,data.getUserArtId());
    TransactionBuilder txBuilder=txFactory.createTransaction(data.getBranch(),userArtifact,data.getComment());
    for (    WordExtractorData extractorData : extractorDatas) {
      ArtifactReadable artifact=getArtifact(data.getBranch(),extractorData.getGuid());
      WordArtifactChange artChange=new WordArtifactChange();
      artChange.setArtId(artifact.getLocalId());
      if (artifact.isDeleted()) {
        deletedArtifacts.add(artifact.getName());
      }
 else {
        containsOleData=artifact.getAttributeCount(CoreAttributeTypes.WordOleData) > 0;
        containsWordData=artifact.getAttributeCount(CoreAttributeTypes.WordTemplateContent) > 0;
        if (oleDataElement == null && containsOleData) {
          txBuilder.setSoleAttributeFromString(artifact,CoreAttributeTypes.WordOleData,""String_Node_Str"");
          artChange.setChanged(true);
          artChange.addChangedAttrType(CoreAttributeTypes.WordOleData.getGuid());
        }
 else         if (oleDataElement != null && singleArtifact) {
          txBuilder.setSoleAttributeFromStream(artifact,CoreAttributeTypes.WordOleData,new ByteArrayInputStream(WordUtilities.getFormattedContent(oleDataElement)));
          artChange.setChanged(true);
          if (!containsOleData) {
            artChange.setCreated(true);
          }
          artChange.addChangedAttrType(CoreAttributeTypes.WordOleData.getGuid());
        }
        String content=Lib.inputStreamToString(new ByteArrayInputStream(WordUtilities.getFormattedContent(extractorData.getParentEelement())));
        boolean hasTrackedChanges=WordCoreUtil.containsWordAnnotations(content);
        boolean multiSave=data.isMultiEdit() || hasChangedContent(artifact,content);
        if (!hasTrackedChanges && (singleArtifact || multiSave)) {
          if (extractorData.getParentEelement().getNodeName().endsWith(""String_Node_Str"")) {
            content=content.replace(WordUtilities.LISTNUM_FIELD_HEAD,""String_Node_Str"");
          }
          LinkType linkType=LinkType.OSEE_SERVER_LINK;
          content=WordMlLinkHandler.unlink(queryFactory,linkType,artifact,content);
          txBuilder.setSoleAttributeValue(artifact,CoreAttributeTypes.WordTemplateContent,content);
          artChange.setChanged(true);
          if (!containsWordData) {
            artChange.setCreated(true);
          }
          artChange.addChangedAttrType(CoreAttributeTypes.WordTemplateContent.getGuid());
        }
 else {
          updateChange.setTrackedChangeArts(artifact.getId(),artifact.getName());
        }
        if (artChange.isChanged()) {
          artChange.setSafetyRelated(checkIfSafetyRelated(artifact,CoreAttributeTypes.LegacyDAL) || checkIfSafetyRelated(artifact,CoreAttributeTypes.ItemDAL));
          updateChange.addChangedArt(artChange);
          artChange.addChangedAttrType(CoreAttributeTypes.WordTemplateContent.getGuid());
        }
      }
    }
    TransactionReadable tx=txBuilder.commit();
    if (tx != null) {
      postProcessChange(tx,updateChange,userArtifact);
    }
  }
 catch (  Exception ex) {
    throw OseeCoreException.wrap(ex);
  }
 finally {
    if (!deletedArtifacts.isEmpty()) {
      throw new OseeStateException(""String_Node_Str"",Collections.toString(""String_Node_Str"",deletedArtifacts));
    }
  }
  return updateChange;
}","private WordUpdateChange wordArtifactUpdate(WordUpdateData data,Collection<WordExtractorData> extractorDatas,Element oleDataElement){
  List<String> deletedArtifacts=Lists.newArrayList();
  WordUpdateChange updateChange=new WordUpdateChange();
  try {
    TransactionFactory txFactory=orcsApi.getTransactionFactory();
    boolean singleArtifact=extractorDatas.size() == 1;
    boolean containsOleData=false;
    boolean containsWordData=false;
    ArtifactReadable userArtifact=getArtifact(COMMON_ID,data.getUserArtId());
    TransactionBuilder txBuilder=txFactory.createTransaction(data.getBranch(),userArtifact,data.getComment());
    for (    WordExtractorData extractorData : extractorDatas) {
      ArtifactReadable artifact=getArtifact(data.getBranch(),extractorData.getGuid());
      WordArtifactChange artChange=new WordArtifactChange();
      artChange.setArtId(artifact.getLocalId());
      if (artifact.isDeleted()) {
        deletedArtifacts.add(artifact.getName());
      }
 else {
        containsOleData=artifact.getAttributeCount(CoreAttributeTypes.WordOleData) > 0;
        containsWordData=artifact.getAttributeCount(CoreAttributeTypes.WordTemplateContent) > 0;
        if (oleDataElement == null && containsOleData) {
          txBuilder.setSoleAttributeFromString(artifact,CoreAttributeTypes.WordOleData,""String_Node_Str"");
          artChange.setChanged(true);
          artChange.addChangedAttrType(CoreAttributeTypes.WordOleData.getGuid());
        }
 else         if (oleDataElement != null && singleArtifact) {
          txBuilder.setSoleAttributeFromStream(artifact,CoreAttributeTypes.WordOleData,new ByteArrayInputStream(WordUtilities.getFormattedContent(oleDataElement)));
          artChange.setChanged(true);
          if (!containsOleData) {
            artChange.setCreated(true);
          }
          artChange.addChangedAttrType(CoreAttributeTypes.WordOleData.getGuid());
        }
        String content=Lib.inputStreamToString(new ByteArrayInputStream(WordUtilities.getFormattedContent(extractorData.getParentEelement())));
        boolean hasTrackedChanges=WordCoreUtil.containsWordAnnotations(content);
        boolean multiSave=data.isMultiEdit() || hasChangedContent(artifact,content);
        if (singleArtifact || multiSave) {
          if (!hasTrackedChanges) {
            if (extractorData.getParentEelement().getNodeName().endsWith(""String_Node_Str"")) {
              content=content.replace(WordUtilities.LISTNUM_FIELD_HEAD,""String_Node_Str"");
            }
            LinkType linkType=LinkType.OSEE_SERVER_LINK;
            content=WordMlLinkHandler.unlink(queryFactory,linkType,artifact,content);
            txBuilder.setSoleAttributeValue(artifact,CoreAttributeTypes.WordTemplateContent,content);
            artChange.setChanged(true);
            if (!containsWordData) {
              artChange.setCreated(true);
            }
            artChange.addChangedAttrType(CoreAttributeTypes.WordTemplateContent.getGuid());
          }
 else {
            updateChange.setTrackedChangeArts(artifact.getId(),artifact.getName());
          }
        }
        if (artChange.isChanged()) {
          artChange.setSafetyRelated(checkIfSafetyRelated(artifact,CoreAttributeTypes.LegacyDAL) || checkIfSafetyRelated(artifact,CoreAttributeTypes.ItemDAL));
          updateChange.addChangedArt(artChange);
          artChange.addChangedAttrType(CoreAttributeTypes.WordTemplateContent.getGuid());
        }
      }
    }
    TransactionReadable tx=txBuilder.commit();
    if (tx != null) {
      postProcessChange(tx,updateChange,userArtifact);
    }
  }
 catch (  Exception ex) {
    throw OseeCoreException.wrap(ex);
  }
 finally {
    if (!deletedArtifacts.isEmpty()) {
      throw new OseeStateException(""String_Node_Str"",Collections.toString(""String_Node_Str"",deletedArtifacts));
    }
  }
  return updateChange;
}",0.9726205997392438
96873,"public AtsProgramService(IAtsServices services){
  this.services=services;
}","public AtsProgramService(IAtsServices services){
  AtsProgramService.services=services;
}",0.896969696969697
96874,"@Override public IAtsProgram getProgram(IAtsTeamDefinition teamDef){
  IAtsProgram program=null;
  Object object=services.getAttributeResolver().getSoleAttributeValue(teamDef,AtsAttributeTypes.ProgramUuid,null);
  if (object instanceof ArtifactId) {
    program=services.getConfigItemFactory().getProgram((ArtifactId)object);
  }
 else   if (object instanceof String && Strings.isNumeric((String)object)) {
    program=services.getProgramService().getProgram(Long.parseLong((String)object));
  }
  if (program == null) {
    IAtsTeamDefinition topTeamDef=teamDef.getTeamDefinitionHoldingVersions();
    if (topTeamDef != null && !teamDef.equals(topTeamDef)) {
      program=getProgram(teamDef.getParentTeamDef());
    }
  }
  if (program == null) {
    program=(IAtsProgram)services.getQueryService().createQuery(AtsArtifactTypes.Program).andAttr(AtsAttributeTypes.TeamDefinition,services.getStoreService().getGuid(teamDef)).getResults().getOneOrNull();
  }
  return program;
}","@Override public IAtsProgram getProgram(IAtsTeamDefinition teamDef){
  try {
    return teamDefToAtsProgramCache.get(teamDef);
  }
 catch (  Exception ex) {
  }
  return null;
}",0.1975736568457539
96875,"@Test public void testAddChildren() throws OseeCoreException {
  when(container1.getRelation(node1,TYPE_1,node2,INCLUDE_DELETED)).thenReturn(null);
  when(container2.getRelation(node1,TYPE_1,node2,INCLUDE_DELETED)).thenReturn(null);
  when(relationFactory.createRelation(node1,DEFAULT_HIERARCHY,node2)).thenReturn(relation1);
  when(orderFactory.createOrderManager(node1)).thenReturn(orderManager1);
  when(orderManager1.getSorterId(Default_Hierarchical__Child)).thenReturn(UNORDERED);
  when(node1.getArtifactType()).thenReturn(artifactType1);
  when(node2.getArtifactType()).thenReturn(artifactType2);
  when(validity.getMaximumRelationsAllowed(Default_Hierarchical__Child,artifactType1,SIDE_A)).thenReturn(10);
  when(validity.getMaximumRelationsAllowed(Default_Hierarchical__Child,artifactType2,SIDE_B)).thenReturn(10);
  List<? extends RelationNode> children=Arrays.asList(node2);
  manager.addChildren(session,node1,children);
  verify(container1).getRelation(node1,DEFAULT_HIERARCHY,node2,INCLUDE_DELETED);
  verify(container2).getRelation(node1,DEFAULT_HIERARCHY,node2,INCLUDE_DELETED);
  verify(orderManager1).getSorterId(Default_Hierarchical__Child);
  verify(orderManager1).setOrder(eq(Default_Hierarchical__Child),eq(UNORDERED),sortedListCaptor.capture());
  verify(container1).add(DEFAULT_HIERARCHY.getGuid(),relation1);
  verify(container2).add(DEFAULT_HIERARCHY.getGuid(),relation1);
}","@Test public void testAddChildren() throws OseeCoreException {
  when(container1.getRelation(node1,TYPE_1,node2,INCLUDE_DELETED)).thenReturn(null);
  when(container2.getRelation(node1,TYPE_1,node2,INCLUDE_DELETED)).thenReturn(null);
  when(relationFactory.createRelation(eq(node1),eq(DEFAULT_HIERARCHY),eq(node2),Matchers.anyString())).thenReturn(relation1);
  when(orderFactory.createOrderManager(node1)).thenReturn(orderManager1);
  when(orderManager1.getSorterId(Default_Hierarchical__Child)).thenReturn(UNORDERED);
  when(node1.getArtifactType()).thenReturn(artifactType1);
  when(node2.getArtifactType()).thenReturn(artifactType2);
  when(validity.getMaximumRelationsAllowed(Default_Hierarchical__Child,artifactType1,SIDE_A)).thenReturn(10);
  when(validity.getMaximumRelationsAllowed(Default_Hierarchical__Child,artifactType2,SIDE_B)).thenReturn(10);
  List<? extends RelationNode> children=Arrays.asList(node2);
  manager.addChildren(session,node1,children);
  verify(container1).getRelation(node1,DEFAULT_HIERARCHY,node2,INCLUDE_DELETED);
  verify(container2).getRelation(node1,DEFAULT_HIERARCHY,node2,INCLUDE_DELETED);
  verify(orderManager1).getSorterId(Default_Hierarchical__Child);
  verify(orderManager1).setOrder(eq(Default_Hierarchical__Child),eq(UNORDERED),sortedListCaptor.capture());
  verify(container1).add(DEFAULT_HIERARCHY.getGuid(),relation1);
  verify(container2).add(DEFAULT_HIERARCHY.getGuid(),relation1);
}",0.983409812919167
96876,"@Test public void testRelateNoSorting() throws OseeCoreException {
  when(container1.getRelation(node1,TYPE_1,node2,INCLUDE_DELETED)).thenReturn(null);
  when(container2.getRelation(node1,TYPE_1,node2,INCLUDE_DELETED)).thenReturn(null);
  when(relationFactory.createRelation(node1,TYPE_1,node2)).thenReturn(relation1);
  when(orderFactory.createOrderManager(node1)).thenReturn(orderManager1);
  IRelationTypeSide typeSide=RelationUtil.asTypeSide(TYPE_1,SIDE_B);
  when(orderManager1.getSorterId(typeSide)).thenReturn(UNORDERED);
  when(node1.getArtifactType()).thenReturn(artifactType1);
  when(node2.getArtifactType()).thenReturn(artifactType2);
  when(validity.getMaximumRelationsAllowed(TYPE_1,artifactType1,SIDE_A)).thenReturn(10);
  when(validity.getMaximumRelationsAllowed(TYPE_1,artifactType2,SIDE_B)).thenReturn(10);
  manager.relate(session,node1,TYPE_1,node2);
  verify(container1).getRelation(node1,TYPE_1,node2,INCLUDE_DELETED);
  verify(container2).getRelation(node1,TYPE_1,node2,INCLUDE_DELETED);
  verify(relationFactory).createRelation(node1,TYPE_1,node2);
  verify(orderManager1).getSorterId(typeSide);
  verify(orderManager1).setOrder(eq(typeSide),eq(UNORDERED),sortedListCaptor.capture());
  verify(container1).add(TYPE_1.getGuid(),relation1);
  verify(container2).add(TYPE_1.getGuid(),relation1);
}","@Test public void testRelateNoSorting() throws OseeCoreException {
  when(container1.getRelation(node1,TYPE_1,node2,INCLUDE_DELETED)).thenReturn(null);
  when(container2.getRelation(node1,TYPE_1,node2,INCLUDE_DELETED)).thenReturn(null);
  when(relationFactory.createRelation(eq(node1),eq(TYPE_1),eq(node2),Matchers.anyString())).thenReturn(relation1);
  when(orderFactory.createOrderManager(node1)).thenReturn(orderManager1);
  IRelationTypeSide typeSide=RelationUtil.asTypeSide(TYPE_1,SIDE_B);
  when(orderManager1.getSorterId(typeSide)).thenReturn(UNORDERED);
  when(node1.getArtifactType()).thenReturn(artifactType1);
  when(node2.getArtifactType()).thenReturn(artifactType2);
  when(validity.getMaximumRelationsAllowed(TYPE_1,artifactType1,SIDE_A)).thenReturn(10);
  when(validity.getMaximumRelationsAllowed(TYPE_1,artifactType2,SIDE_B)).thenReturn(10);
  manager.relate(session,node1,TYPE_1,node2);
  verify(container1).getRelation(node1,TYPE_1,node2,INCLUDE_DELETED);
  verify(container2).getRelation(node1,TYPE_1,node2,INCLUDE_DELETED);
  verify(orderManager1).getSorterId(typeSide);
  verify(orderManager1).setOrder(eq(typeSide),eq(UNORDERED),sortedListCaptor.capture());
  verify(container1).add(TYPE_1.getGuid(),relation1);
  verify(container2).add(TYPE_1.getGuid(),relation1);
}",0.9581894898350596
96877,"@Test public void testRelateWithSortingUserDefined() throws OseeCoreException {
  when(container1.getRelation(node1,TYPE_1,node2,INCLUDE_DELETED)).thenReturn(null);
  when(container2.getRelation(node1,TYPE_1,node2,INCLUDE_DELETED)).thenReturn(null);
  when(relationFactory.createRelation(node1,TYPE_1,node2)).thenReturn(relation1);
  when(orderFactory.createOrderManager(node1)).thenReturn(orderManager1);
  List<Relation> toOrder=Arrays.asList(relation3,relation4);
  when(container1.getList(TYPE_1,EXCLUDE_DELETED,node1,SIDE_A)).thenReturn(toOrder);
  List<RelationNode> nodesToOrder=Arrays.asList(node3,node4,node5,node6);
  when(resolver.resolve(session,graph,toOrder,SIDE_B)).thenReturn(nodesToOrder);
  when(node1.getArtifactType()).thenReturn(artifactType1);
  when(node2.getArtifactType()).thenReturn(artifactType2);
  when(validity.getMaximumRelationsAllowed(TYPE_1,artifactType1,SIDE_A)).thenReturn(10);
  when(validity.getMaximumRelationsAllowed(TYPE_1,artifactType2,SIDE_B)).thenReturn(10);
  manager.relate(session,node1,TYPE_1,node2,USER_DEFINED);
  verify(container1).getRelation(node1,TYPE_1,node2,INCLUDE_DELETED);
  verify(container2).getRelation(node1,TYPE_1,node2,INCLUDE_DELETED);
  verify(container1).add(TYPE_1.getGuid(),relation1);
  verify(container2).add(TYPE_1.getGuid(),relation1);
  verify(resolver).resolve(session,graph,toOrder,SIDE_B);
  IRelationTypeSide typeSide=RelationUtil.asTypeSide(TYPE_1,SIDE_B);
  verify(orderManager1).sort(typeSide,nodesToOrder);
  verify(orderManager1).setOrder(eq(typeSide),eq(USER_DEFINED),sortedListCaptor.capture());
  Iterator<? extends Identifiable<String>> iterator=sortedListCaptor.getValue().iterator();
  assertEquals(node3,iterator.next());
  assertEquals(node4,iterator.next());
  assertEquals(node5,iterator.next());
  assertEquals(node6,iterator.next());
  assertEquals(node2,iterator.next());
}","@Test public void testRelateWithSortingUserDefined() throws OseeCoreException {
  when(container1.getRelation(node1,TYPE_1,node2,INCLUDE_DELETED)).thenReturn(null);
  when(container2.getRelation(node1,TYPE_1,node2,INCLUDE_DELETED)).thenReturn(null);
  when(relationFactory.createRelation(eq(node1),eq(TYPE_1),eq(node2),Matchers.anyString())).thenReturn(relation1);
  when(orderFactory.createOrderManager(node1)).thenReturn(orderManager1);
  List<Relation> toOrder=Arrays.asList(relation3,relation4);
  when(container1.getList(TYPE_1,EXCLUDE_DELETED,node1,SIDE_A)).thenReturn(toOrder);
  List<RelationNode> nodesToOrder=Arrays.asList(node3,node4,node5,node6);
  when(resolver.resolve(session,graph,toOrder,SIDE_B)).thenReturn(nodesToOrder);
  when(node1.getArtifactType()).thenReturn(artifactType1);
  when(node2.getArtifactType()).thenReturn(artifactType2);
  when(validity.getMaximumRelationsAllowed(TYPE_1,artifactType1,SIDE_A)).thenReturn(10);
  when(validity.getMaximumRelationsAllowed(TYPE_1,artifactType2,SIDE_B)).thenReturn(10);
  manager.relate(session,node1,TYPE_1,node2,USER_DEFINED);
  verify(container1).getRelation(node1,TYPE_1,node2,INCLUDE_DELETED);
  verify(container2).getRelation(node1,TYPE_1,node2,INCLUDE_DELETED);
  verify(container1).add(TYPE_1.getGuid(),relation1);
  verify(container2).add(TYPE_1.getGuid(),relation1);
  verify(resolver).resolve(session,graph,toOrder,SIDE_B);
  IRelationTypeSide typeSide=RelationUtil.asTypeSide(TYPE_1,SIDE_B);
  verify(orderManager1).sort(typeSide,nodesToOrder);
  verify(orderManager1).setOrder(eq(typeSide),eq(USER_DEFINED),sortedListCaptor.capture());
  Iterator<? extends Identifiable<String>> iterator=sortedListCaptor.getValue().iterator();
  assertEquals(node3,iterator.next());
  assertEquals(node4,iterator.next());
  assertEquals(node5,iterator.next());
  assertEquals(node6,iterator.next());
  assertEquals(node2,iterator.next());
}",0.9875430691757222
96878,"@Test public void testRelateWithSorting() throws OseeCoreException {
  when(container1.getRelation(node1,TYPE_1,node2,INCLUDE_DELETED)).thenReturn(null);
  when(container2.getRelation(node1,TYPE_1,node2,INCLUDE_DELETED)).thenReturn(null);
  when(relationFactory.createRelation(node1,TYPE_1,node2)).thenReturn(relation1);
  when(orderFactory.createOrderManager(node1)).thenReturn(orderManager1);
  when(node1.getArtifactType()).thenReturn(artifactType1);
  when(node2.getArtifactType()).thenReturn(artifactType2);
  when(validity.getMaximumRelationsAllowed(TYPE_1,artifactType1,SIDE_A)).thenReturn(10);
  when(validity.getMaximumRelationsAllowed(TYPE_1,artifactType2,SIDE_B)).thenReturn(10);
  manager.relate(session,node1,TYPE_1,node2,LEXICOGRAPHICAL_ASC);
  IRelationTypeSide typeSide=RelationUtil.asTypeSide(TYPE_1,SIDE_B);
  verify(container1).getRelation(node1,TYPE_1,node2,INCLUDE_DELETED);
  verify(container2).getRelation(node1,TYPE_1,node2,INCLUDE_DELETED);
  verify(relationFactory).createRelation(node1,TYPE_1,node2);
  verify(orderManager1).setOrder(eq(typeSide),eq(LEXICOGRAPHICAL_ASC),sortedListCaptor.capture());
  verify(container1).add(TYPE_1.getGuid(),relation1);
  verify(container2).add(TYPE_1.getGuid(),relation1);
}","@Test public void testRelateWithSorting() throws OseeCoreException {
  when(container1.getRelation(node1,TYPE_1,node2,INCLUDE_DELETED)).thenReturn(null);
  when(container2.getRelation(node1,TYPE_1,node2,INCLUDE_DELETED)).thenReturn(null);
  when(relationFactory.createRelation(eq(node1),eq(TYPE_1),eq(node2),Matchers.anyString())).thenReturn(relation1);
  when(orderFactory.createOrderManager(node1)).thenReturn(orderManager1);
  when(node1.getArtifactType()).thenReturn(artifactType1);
  when(node2.getArtifactType()).thenReturn(artifactType2);
  when(validity.getMaximumRelationsAllowed(TYPE_1,artifactType1,SIDE_A)).thenReturn(10);
  when(validity.getMaximumRelationsAllowed(TYPE_1,artifactType2,SIDE_B)).thenReturn(10);
  manager.relate(session,node1,TYPE_1,node2,LEXICOGRAPHICAL_ASC);
  IRelationTypeSide typeSide=RelationUtil.asTypeSide(TYPE_1,SIDE_B);
  verify(container1).getRelation(node1,TYPE_1,node2,INCLUDE_DELETED);
  verify(container2).getRelation(node1,TYPE_1,node2,INCLUDE_DELETED);
  verify(orderManager1).setOrder(eq(typeSide),eq(LEXICOGRAPHICAL_ASC),sortedListCaptor.capture());
  verify(container1).add(TYPE_1.getGuid(),relation1);
  verify(container2).add(TYPE_1.getGuid(),relation1);
}",0.9553827261563652
96879,"@Test public void testAddChild() throws OseeCoreException {
  when(container1.getRelation(node1,DEFAULT_HIERARCHY,node2,INCLUDE_DELETED)).thenReturn(null);
  when(container2.getRelation(node1,DEFAULT_HIERARCHY,node2,INCLUDE_DELETED)).thenReturn(null);
  when(relationFactory.createRelation(node1,DEFAULT_HIERARCHY,node2)).thenReturn(relation1);
  when(orderFactory.createOrderManager(node1)).thenReturn(orderManager1);
  when(orderFactory.createOrderManager(node1)).thenReturn(orderManager1);
  when(orderManager1.getSorterId(Default_Hierarchical__Child)).thenReturn(UNORDERED);
  when(node1.getArtifactType()).thenReturn(artifactType1);
  when(node2.getArtifactType()).thenReturn(artifactType2);
  when(validity.getMaximumRelationsAllowed(Default_Hierarchical__Child,artifactType1,SIDE_A)).thenReturn(10);
  when(validity.getMaximumRelationsAllowed(Default_Hierarchical__Child,artifactType2,SIDE_B)).thenReturn(10);
  manager.addChild(session,node1,node2);
  verify(container1).getRelation(node1,DEFAULT_HIERARCHY,node2,INCLUDE_DELETED);
  verify(container2).getRelation(node1,DEFAULT_HIERARCHY,node2,INCLUDE_DELETED);
  verify(orderManager1).getSorterId(Default_Hierarchical__Child);
  verify(orderManager1).setOrder(eq(Default_Hierarchical__Child),eq(UNORDERED),sortedListCaptor.capture());
  verify(container1).add(DEFAULT_HIERARCHY.getGuid(),relation1);
  verify(container2).add(DEFAULT_HIERARCHY.getGuid(),relation1);
}","@Test public void testAddChild() throws OseeCoreException {
  when(container1.getRelation(node1,DEFAULT_HIERARCHY,node2,INCLUDE_DELETED)).thenReturn(null);
  when(container2.getRelation(node1,DEFAULT_HIERARCHY,node2,INCLUDE_DELETED)).thenReturn(null);
  when(relationFactory.createRelation(eq(node1),eq(DEFAULT_HIERARCHY),eq(node2),Matchers.anyString())).thenReturn(relation1);
  when(orderFactory.createOrderManager(node1)).thenReturn(orderManager1);
  when(orderFactory.createOrderManager(node1)).thenReturn(orderManager1);
  when(orderManager1.getSorterId(Default_Hierarchical__Child)).thenReturn(UNORDERED);
  when(node1.getArtifactType()).thenReturn(artifactType1);
  when(node2.getArtifactType()).thenReturn(artifactType2);
  when(validity.getMaximumRelationsAllowed(Default_Hierarchical__Child,artifactType1,SIDE_A)).thenReturn(10);
  when(validity.getMaximumRelationsAllowed(Default_Hierarchical__Child,artifactType2,SIDE_B)).thenReturn(10);
  manager.addChild(session,node1,node2);
  verify(container1).getRelation(node1,DEFAULT_HIERARCHY,node2,INCLUDE_DELETED);
  verify(container2).getRelation(node1,DEFAULT_HIERARCHY,node2,INCLUDE_DELETED);
  verify(orderManager1).getSorterId(Default_Hierarchical__Child);
  verify(orderManager1).setOrder(eq(Default_Hierarchical__Child),eq(UNORDERED),sortedListCaptor.capture());
  verify(container1).add(DEFAULT_HIERARCHY.getGuid(),relation1);
  verify(container2).add(DEFAULT_HIERARCHY.getGuid(),relation1);
}",0.9836975372875476
96880,"public Relation createRelation(RelationNode aNode,IRelationType type,RelationNode bNode) throws OseeCoreException {
  OrcsConditions.checkBranch(aNode,bNode);
  OrcsConditions.checkRelateSelf(aNode,bNode);
  RelationData data=relationDataFactory.createRelationData(type,aNode.getBranchId(),aNode,bNode,""String_Node_Str"");
  return createRelation(data);
}","public Relation createRelation(RelationNode aNode,IRelationType type,RelationNode bNode,String rationale) throws OseeCoreException {
  OrcsConditions.checkBranch(aNode,bNode);
  OrcsConditions.checkRelateSelf(aNode,bNode);
  RelationData data=relationDataFactory.createRelationData(type,aNode.getBranchId(),aNode,bNode,rationale);
  return createRelation(data);
}",0.9400278940027894
96881,"@Override public void relate(OrcsSession session,RelationNode aNode,IRelationType type,RelationNode bNode,String rationale,IRelationSorterId sortType) throws OseeCoreException {
  checkBranch(aNode,bNode);
  checkRelateSelf(aNode,bNode);
  GraphData graph=getGraph(aNode,bNode);
  validity.checkRelationTypeValid(type,aNode,SIDE_A);
  validity.checkRelationTypeValid(type,bNode,SIDE_B);
  checkMultiplicityCanAdd(session,type,aNode,bNode);
  Relation relation=getRelation(session,aNode,type,bNode,INCLUDE_DELETED).getOneOrNull();
  boolean updated=false;
  if (relation == null) {
    relation=relationFactory.createRelation(aNode,type,bNode);
    graph.<RelationNodeAdjacencies>getAdjacencies(aNode).add(type.getGuid(),relation);
    graph.<RelationNodeAdjacencies>getAdjacencies(bNode).add(type.getGuid(),relation);
    updated=true;
  }
  if (relation.isDeleted()) {
    relation.unDelete();
    updated=true;
  }
  if (updated) {
    relation.setDirty();
    order(session,type,aNode,SIDE_A,sortType,OrderOp.ADD_TO_ORDER,Collections.singleton(bNode));
  }
}","@Override public void relate(OrcsSession session,RelationNode aNode,IRelationType type,RelationNode bNode,String rationale,IRelationSorterId sortType) throws OseeCoreException {
  checkBranch(aNode,bNode);
  checkRelateSelf(aNode,bNode);
  GraphData graph=getGraph(aNode,bNode);
  validity.checkRelationTypeValid(type,aNode,SIDE_A);
  validity.checkRelationTypeValid(type,bNode,SIDE_B);
  checkMultiplicityCanAdd(session,type,aNode,bNode);
  Relation relation=getRelation(session,aNode,type,bNode,INCLUDE_DELETED).getOneOrNull();
  boolean updated=false;
  if (relation == null) {
    relation=relationFactory.createRelation(aNode,type,bNode,rationale);
    graph.<RelationNodeAdjacencies>getAdjacencies(aNode).add(type.getGuid(),relation);
    graph.<RelationNodeAdjacencies>getAdjacencies(bNode).add(type.getGuid(),relation);
    updated=true;
  }
  if (relation.isDeleted()) {
    relation.unDelete();
    updated=true;
  }
  if (updated) {
    relation.setDirty();
    order(session,type,aNode,SIDE_A,sortType,OrderOp.ADD_TO_ORDER,Collections.singleton(bNode));
  }
}",0.9953095684803002
96882,"private RelationData createRelationData(VersionData version,int localId,long localTypeID,ModificationType modType,long baseLocalTypeID,ModificationType baseModType,int aArtId,int bArtId,String rationale,ApplicabilityId applicId){
  RelationData data=new RelationDataImpl(version);
  data.setLocalId(localId);
  data.setTypeUuid(localTypeID);
  data.setBaseTypeUuid(baseLocalTypeID);
  data.setModType(modType);
  data.setBaseModType(baseModType);
  data.setArtIdA(aArtId);
  data.setArtIdB(bArtId);
  data.setRationale(rationale);
  data.setApplicabilityId(applicId);
  return data;
}","private RelationData createRelationData(VersionData version,int localId,long localTypeID,ModificationType modType,long baseLocalTypeID,ModificationType baseModType,int aArtId,int bArtId,String rationale,ApplicabilityId applicId){
  RelationData data=new RelationDataImpl(version);
  data.setLocalId(localId);
  data.setTypeUuid(localTypeID);
  data.setBaseTypeUuid(baseLocalTypeID);
  data.setModType(modType);
  data.setBaseModType(baseModType);
  data.setArtIdA(aArtId);
  data.setArtIdB(bArtId);
  Conditions.assertNotNull(rationale,""String_Node_Str"",localId,localTypeID,aArtId,bArtId);
  data.setRationale(rationale);
  data.setApplicabilityId(applicId);
  return data;
}",0.9277204130262112
96883,"@Override protected RelationData createData(Object conditions,RelationObjectFactory factory,JdbcStatement chStmt,Options options) throws OseeCoreException {
  RelationData toReturn=null;
  long branchUuid=chStmt.getLong(""String_Node_Str"");
  int aArtId=chStmt.getInt(""String_Node_Str"");
  int bArtId=chStmt.getInt(""String_Node_Str"");
  long typeId=chStmt.getLong(""String_Node_Str"");
  long gammaId=chStmt.getInt(""String_Node_Str"");
  ApplicabilityId applicId=ApplicabilityId.valueOf(chStmt.getLong(""String_Node_Str""));
  boolean historical=OptionsUtil.isHistorical(options);
  CreateConditions condition=asConditions(conditions);
  if (!condition.isSame(branchUuid,aArtId,bArtId,typeId)) {
    condition.saveConditions(branchUuid,aArtId,bArtId,typeId,gammaId);
    TransactionId txId=TransactionId.valueOf(chStmt.getLong(""String_Node_Str""));
    VersionData version=factory.createVersion(branchUuid,txId,gammaId,historical);
    if (historical) {
      version.setStripeId(TransactionId.valueOf(chStmt.getLong(""String_Node_Str"")));
    }
    int localId=chStmt.getInt(""String_Node_Str"");
    ModificationType modType=ModificationType.getMod(chStmt.getInt(""String_Node_Str""));
    String rationale=chStmt.getString(""String_Node_Str"");
    toReturn=factory.createRelationData(version,localId,typeId,modType,aArtId,bArtId,rationale,applicId);
  }
 else {
    if (!historical) {
      logger.warn(""String_Node_Str"",branchUuid,typeId,aArtId,bArtId,condition.previousGammaId,gammaId);
    }
  }
  return toReturn;
}","@Override protected RelationData createData(Object conditions,RelationObjectFactory factory,JdbcStatement chStmt,Options options) throws OseeCoreException {
  RelationData toReturn=null;
  long branchUuid=chStmt.getLong(""String_Node_Str"");
  int aArtId=chStmt.getInt(""String_Node_Str"");
  int bArtId=chStmt.getInt(""String_Node_Str"");
  long typeId=chStmt.getLong(""String_Node_Str"");
  long gammaId=chStmt.getInt(""String_Node_Str"");
  ApplicabilityId applicId=ApplicabilityId.valueOf(chStmt.getLong(""String_Node_Str""));
  boolean historical=OptionsUtil.isHistorical(options);
  CreateConditions condition=asConditions(conditions);
  if (!condition.isSame(branchUuid,aArtId,bArtId,typeId)) {
    condition.saveConditions(branchUuid,aArtId,bArtId,typeId,gammaId);
    TransactionId txId=TransactionId.valueOf(chStmt.getLong(""String_Node_Str""));
    VersionData version=factory.createVersion(branchUuid,txId,gammaId,historical);
    if (historical) {
      version.setStripeId(TransactionId.valueOf(chStmt.getLong(""String_Node_Str"")));
    }
    int localId=chStmt.getInt(""String_Node_Str"");
    ModificationType modType=ModificationType.getMod(chStmt.getInt(""String_Node_Str""));
    String rationale=chStmt.getString(""String_Node_Str"");
    if (rationale == null) {
      rationale=""String_Node_Str"";
    }
    toReturn=factory.createRelationData(version,localId,typeId,modType,aArtId,bArtId,rationale,applicId);
  }
 else {
    if (!historical) {
      logger.warn(""String_Node_Str"",branchUuid,typeId,aArtId,bArtId,condition.previousGammaId,gammaId);
    }
  }
  return toReturn;
}",0.9773316062176166
96884,"@Override protected ValidationResult validate(Artifact artToValidate,IProgressMonitor monitor) throws OseeCoreException {
  Collection<String> errorMessages=new ArrayList<>();
  boolean validationPassed=true;
  if (hasArtifactType(artToValidate.getArtifactType())) {
    List<Artifact> arts=ArtifactQuery.getArtifactListFromTypeWithInheritence(artifactType,artToValidate.getBranch(),DeletionFlag.EXCLUDE_DELETED);
    for (    Artifact art : arts) {
      if (art.getName().equalsIgnoreCase(artToValidate.getName()) && art.getGuid() != artToValidate.getGuid() && !hasGuidPairAlreadyBeenEvaluated(art.getGuid(),artToValidate.getGuid())) {
        if (Strings.isNumeric(artToValidate.getName()) && !artToValidate.getArtifactType().equals(art.getArtifactType())) {
          continue;
        }
        if (isImplementationDetailsChild(artToValidate,art) || isImplementationDetailsChild(art,artToValidate)) {
          continue;
        }
        errorMessages.add(ValidationReportOperation.getRequirementHyperlink(artToValidate) + ""String_Node_Str"" + ValidationReportOperation.getRequirementHyperlink(art)+ ""String_Node_Str""+ artToValidate.getName()+ ""String_Node_Str"");
        validationPassed=false;
        addGuidPair(art.getGuid(),artToValidate.getGuid());
      }
    }
  }
  return new ValidationResult(errorMessages,validationPassed);
}","@Override protected ValidationResult validate(Artifact artToValidate,IProgressMonitor monitor) throws OseeCoreException {
  Collection<String> errorMessages=new ArrayList<>();
  boolean validationPassed=true;
  if (hasArtifactType(artToValidate.getArtifactType())) {
    List<Artifact> arts=ArtifactQuery.getArtifactListFromTypeWithInheritence(artifactType,artToValidate.getBranch(),DeletionFlag.EXCLUDE_DELETED);
    for (    Artifact art : arts) {
      if (art.getName().equalsIgnoreCase(artToValidate.getName()) && !art.getUuid().equals(artToValidate.getUuid()) && !hasUuidPairAlreadyBeenEvaluated(art.getUuid(),artToValidate.getUuid())) {
        if (Strings.isNumeric(artToValidate.getName()) && !artToValidate.getArtifactType().equals(art.getArtifactType())) {
          continue;
        }
        if (isImplementationDetailsChild(artToValidate,art) || isImplementationDetailsChild(art,artToValidate)) {
          continue;
        }
        errorMessages.add(ValidationReportOperation.getRequirementHyperlink(artToValidate) + ""String_Node_Str"" + ValidationReportOperation.getRequirementHyperlink(art)+ ""String_Node_Str""+ artToValidate.getName()+ ""String_Node_Str"");
        validationPassed=false;
        addUuidPair(art.getUuid(),artToValidate.getUuid());
      }
    }
  }
  return new ValidationResult(errorMessages,validationPassed);
}",0.9650817236255572
96885,"@Override protected void doWork(IProgressMonitor monitor) throws Exception {
  logf(""String_Node_Str"",teamArt.getName());
  List<AbstractValidationRule> rulesSorted=new ArrayList<>(rules);
  Collections.sort(rulesSorted,new ValidationRuleComparator());
  for (  AbstractValidationRule rule : rulesSorted) {
    log(rule.getRuleDescription());
  }
  log(""String_Node_Str"");
  try {
    ChangeData changeData=AtsBranchManager.getChangeDataFromEarliestTransactionId(teamArt);
    Collection<Artifact> changedArtifacts=changeData.getArtifacts(KindType.ArtifactOrRelation,ModificationType.NEW,ModificationType.MODIFIED);
    checkForCancelledStatus(monitor);
    double total=changedArtifacts.size() + rules.size();
    if (total > 0) {
      Collection<String> warnings=new ArrayList<>();
      int workAmount=calculateWork(1 / total);
      String lastTitle=""String_Node_Str"";
      int ruleIndex=1;
      for (      AbstractValidationRule rule : rulesSorted) {
        checkForCancelledStatus(monitor);
        String currentTitle=rule.getRuleTitle();
        if (!lastTitle.equals(currentTitle)) {
          logf(""String_Node_Str"",currentTitle);
          lastTitle=currentTitle;
        }
        int artIndex=1;
        for (        Artifact art : changedArtifacts) {
          monitor.setTaskName(String.format(""String_Node_Str"",ruleIndex,rules.size(),artIndex,changedArtifacts.size()));
          checkForCancelledStatus(monitor);
          ValidationResult result=rule.validate(art,monitor);
          if (!result.didValidationPass()) {
            for (            String errorMsg : result.getErrorMessages()) {
              if (art.isOfType(CoreArtifactTypes.DirectSoftwareRequirement)) {
                logf(""String_Node_Str"",errorMsg);
              }
 else {
                warnings.add(String.format(""String_Node_Str"",errorMsg));
              }
            }
          }
          monitor.worked(workAmount);
          artIndex++;
        }
        ruleIndex++;
      }
      for (      String warning : warnings) {
        log(warning);
      }
    }
    log(""String_Node_Str"");
  }
 catch (  Exception ex) {
    OseeLog.log(Activator.class,Level.SEVERE,ex);
    logf(""String_Node_Str"",ex.getLocalizedMessage());
  }
}","@Override protected void doWork(IProgressMonitor monitor) throws Exception {
  logf(""String_Node_Str"",teamArt.getName());
  List<AbstractValidationRule> rulesSorted=new ArrayList<>(rules);
  Collections.sort(rulesSorted,new ValidationRuleComparator());
  for (  AbstractValidationRule rule : rulesSorted) {
    log(rule.getRuleDescription());
  }
  log(""String_Node_Str"");
  try {
    ChangeData changeData=AtsBranchManager.getChangeDataFromEarliestTransactionId(teamArt);
    Collection<Artifact> changedArtifacts=changeData.getArtifacts(KindType.ArtifactOrRelation,ModificationType.NEW,ModificationType.MODIFIED);
    checkForCancelledStatus(monitor);
    double total=changedArtifacts.size() + rules.size();
    if (total > 0) {
      Collection<String> warnings=new ArrayList<>();
      int workAmount=calculateWork(1 / total);
      String lastTitle=""String_Node_Str"";
      int ruleIndex=1;
      for (      AbstractValidationRule rule : rulesSorted) {
        checkForCancelledStatus(monitor);
        String currentTitle=rule.getRuleTitle();
        if (!lastTitle.equals(currentTitle)) {
          logf(""String_Node_Str"",currentTitle);
          lastTitle=currentTitle;
        }
        if (isSkipRelationCheck(rule.getRuleTitle())) {
          logf(""String_Node_Str"");
        }
 else {
          int artIndex=1;
          for (          Artifact art : changedArtifacts) {
            monitor.setTaskName(String.format(""String_Node_Str"",ruleIndex,rules.size(),artIndex,changedArtifacts.size()));
            checkForCancelledStatus(monitor);
            ValidationResult result=rule.validate(art,monitor);
            if (!result.didValidationPass()) {
              for (              String errorMsg : result.getErrorMessages()) {
                if (art.isOfType(CoreArtifactTypes.DirectSoftwareRequirement)) {
                  logf(""String_Node_Str"",errorMsg);
                }
 else {
                  warnings.add(String.format(""String_Node_Str"",errorMsg));
                }
              }
            }
            monitor.worked(workAmount);
            artIndex++;
          }
        }
        ruleIndex++;
      }
      for (      String warning : warnings) {
        log(warning);
      }
    }
    log(""String_Node_Str"");
  }
 catch (  Exception ex) {
    OseeLog.log(Activator.class,Level.SEVERE,ex);
    logf(""String_Node_Str"",ex.getLocalizedMessage());
  }
}",0.9617131732641142
96886,"private void executeScript(File vbDiffScript) throws OseeCoreException {
  Process process=null;
  try {
    String target=vbDiffScript.getName();
    String cmd[]={""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"" + target + ""String_Node_Str""};
    ProcessBuilder builder=new ProcessBuilder(cmd);
    File parentDir=vbDiffScript.getParentFile();
    if (parentDir != null) {
      builder.directory(parentDir);
    }
    process=builder.start();
    Thread errorCatcher=new StreamLogger(process.getErrorStream()){
      @Override protected void log(      String message){
        OseeLog.log(Activator.class,OseeLevel.SEVERE_POPUP,message);
      }
    }
;
    Thread outputCatcher=new StreamLogger(process.getInputStream()){
      @Override protected void log(      String message){
        OseeLog.log(Activator.class,Level.INFO,message);
      }
    }
;
    errorCatcher.start();
    outputCatcher.start();
    Long timeoutMs=Long.MAX_VALUE;
    String timeout=OseeInfo.getValue(""String_Node_Str"");
    if (Strings.isValid(timeout)) {
      timeoutMs=Long.parseLong(timeout);
    }
    if (!process.waitFor(timeoutMs,TimeUnit.MILLISECONDS)) {
      throw new OperationTimedoutException(""String_Node_Str"");
    }
  }
 catch (  Exception ex) {
    OseeCoreException.wrapAndThrow(ex);
  }
 finally {
    if (process != null) {
      process.destroy();
    }
  }
}","private void executeScript(File vbDiffScript) throws OseeCoreException {
  Process process=null;
  try {
    String target=vbDiffScript.getName();
    String cmd[]={""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"" + target + ""String_Node_Str""};
    ProcessBuilder builder=new ProcessBuilder(cmd);
    File parentDir=vbDiffScript.getParentFile();
    if (parentDir != null) {
      builder.directory(parentDir);
    }
    process=builder.start();
    Thread errorCatcher=new StreamLogger(process.getErrorStream()){
      @Override protected void log(      String message){
        OseeLog.log(Activator.class,OseeLevel.SEVERE_POPUP,message);
      }
    }
;
    Thread outputCatcher=new StreamLogger(process.getInputStream()){
      @Override protected void log(      String message){
        OseeLog.log(Activator.class,Level.INFO,message);
      }
    }
;
    errorCatcher.start();
    outputCatcher.start();
    Long timeoutMs=Long.MAX_VALUE;
    String timeout=null;
    try {
      timeout=OseeInfo.getValue(""String_Node_Str"");
    }
 catch (    Exception ex) {
      OseeLog.log(Activator.class,Level.INFO,String.format(""String_Node_Str"",this.getClass().getSimpleName(),timeout));
    }
    if (Strings.isValid(timeout)) {
      timeoutMs=Long.parseLong(timeout);
    }
    if (!process.waitFor(timeoutMs,TimeUnit.MILLISECONDS)) {
      throw new OperationTimedoutException(""String_Node_Str"");
    }
  }
 catch (  Exception ex) {
    OseeCoreException.wrapAndThrow(ex);
  }
 finally {
    if (process != null) {
      process.destroy();
    }
  }
}",0.9358541525995948
96887,"/** 
 * Returns the backing data object for operations like sorting
 */
public Object getBackingData(Object element,XViewerColumn xCol,int columnIndex) throws Exception {
  return null;
}","/** 
 * Returns the backing data object for operations like sorting
 */
public Object getBackingData(Object element,XViewerColumn xCol,int columnIndex) throws Exception {
  if (xCol.getId().equals(AtsColumnId.CreatedDate.getId())) {
    return CreatedDateColumnUI.getInstance().getBackingData(element,xCol,columnIndex);
  }
 else   if (xCol.getId().equals(ReleaseDateColumn.getInstance().getId())) {
    return ReleaseDateColumn.getInstance().getBackingData(element,xCol,columnIndex);
  }
  return null;
}",0.5086705202312138
96888,"/** 
 * Provides the XViewerSorter the actual Date object to sort instead of having to convert the text back to Date (and loose the precision)
 */
@Override public Object getBackingData(Object element,XViewerColumn xCol,int columnIndex) throws Exception {
  if (!(element instanceof Change)) {
    return ""String_Node_Str"";
  }
  Change data=(Change)element;
  if (xCol.getId().equals(HistoryTransactionDateColumn.ID)) {
    Date date=((HistoryXViewerFactory)((HistoryXViewer)xCol.getXViewer()).getXViewerFactory()).getHistoryTransactionDateColumn().getTransactionDate(data.getTxDelta().getEndTx().getId());
    return date;
  }
  return super.getBackingData(element,xCol,columnIndex);
}","/** 
 * Provides the XViewerSorter the actual Date object to sort instead of having to convert the text back to Date (and loose the precision)
 */
@Override public Object getBackingData(Object element,XViewerColumn xCol,int columnIndex) throws Exception {
  if (!(element instanceof Change)) {
    return ""String_Node_Str"";
  }
  Change data=(Change)element;
  if (xCol.getId().equals(HistoryTransactionDateColumn.ID)) {
    HistoryTransactionDateColumn column=((HistoryXViewerFactory)((HistoryXViewer)xCol.getXViewer()).getXViewerFactory()).getHistoryTransactionDateColumn();
    Date date=column.getTransactionDate(data.getTxDelta().getEndTx().getId());
    if (date == null) {
      column.populateCachedValues(Collections.singleton(element),column.getPreComputedValueMap());
      date=column.getTransactionDate(data.getTxDelta().getEndTx().getId());
    }
    return date;
  }
  return super.getBackingData(element,xCol,columnIndex);
}",0.8199139520590043
96889,"@Override public void handleEvent(Event event){
  try {
    Object branchId=event.getProperty(SAFETY_EVENT_BRANCH_ID);
    Object userArt=event.getProperty(SAFETY_EVENT_USER_ART);
    checkEventObjects(branchId,userArt);
    ArtifactReadable assocArt=getAssociatedWorkflowArt((BranchId)branchId);
    IAtsTeamWorkflow safetyWf=getSafetyWorkflow(assocArt);
    if (safetyWf == null) {
      IAtsTeamWorkflow teamWf=atsServer.getWorkItemFactory().getTeamWf(assocArt);
      safetyWf=createSafetyAction(teamWf,(ArtifactReadable)userArt);
    }
  }
 catch (  Exception ex) {
    logger.error(ex,""String_Node_Str"");
  }
}","@Override public void handleEvent(Event event){
  try {
    Object branchId=event.getProperty(SAFETY_EVENT_BRANCH_ID);
    Object userArt=event.getProperty(SAFETY_EVENT_USER_ART);
    checkEventObjects(branchId,userArt);
    ArtifactReadable assocArt=getAssociatedWorkflowArt((BranchId)branchId);
    if (assocArt != null) {
      IAtsTeamWorkflow safetyWf=getSafetyWorkflow(assocArt);
      if (safetyWf == null) {
        IAtsTeamWorkflow teamWf=atsServer.getWorkItemFactory().getTeamWf(assocArt);
        safetyWf=createSafetyAction(teamWf,(ArtifactReadable)userArt);
      }
    }
  }
 catch (  Exception ex) {
    logger.error(ex,""String_Node_Str"");
  }
}",0.9655172413793104
96890,"private ArtifactReadable getAssociatedWorkflowArt(BranchId branchId){
  ArtifactReadable toReturn=null;
  BranchReadable branch=queryFactory.branchQuery().andIds(branchId).getResults().getExactlyOne();
  long workflowUuid=branch.getAssociatedArtifactId();
  try {
    toReturn=atsServer.getQuery().andUuid(workflowUuid).andIsOfType(AtsArtifactTypes.TeamWorkflow).getResults().getExactlyOne();
  }
 catch (  Exception ex) {
    throw new OseeCoreException(ex,""String_Node_Str"",workflowUuid);
  }
  return toReturn;
}","private ArtifactReadable getAssociatedWorkflowArt(BranchId branchId){
  ArtifactReadable toReturn=null;
  try {
    BranchReadable branch=queryFactory.branchQuery().andIds(branchId).getResults().getOneOrNull();
    if (branch != null) {
      long workflowUuid=branch.getAssociatedArtifactId();
      toReturn=atsServer.getQuery().andUuid(workflowUuid).andIsOfType(AtsArtifactTypes.TeamWorkflow).getResults().getOneOrNull();
    }
  }
 catch (  Exception ex) {
  }
  return toReturn;
}",0.386
96891,"@Override public void run(TableLoadOption... tableLoadOptions) throws OseeCoreException {
  if (AtsUtil.isProductionDb()) {
    AWorkbench.popup(""String_Node_Str"");
    return;
  }
  if (!MessageDialog.openConfirm(Displays.getActiveShell(),getName(),getName())) {
    return;
  }
  createdDate=new Date();
  AtsChangeSet changes=new AtsChangeSet(getName());
  createdBy=AtsClientService.get().getUserService().getCurrentUser();
  GoalArtifact sawCodeGoal=GoalManager.createGoal(""String_Node_Str"",changes);
  GoalArtifact sawTestGoal=GoalManager.createGoal(""String_Node_Str"",changes);
  GoalArtifact toolsTeamGoal=GoalManager.createGoal(""String_Node_Str"",changes);
  GoalArtifact facilitiesGoal=GoalManager.createGoal(""String_Node_Str"",changes);
  GoalArtifact cisReqGoal=GoalManager.createGoal(""String_Node_Str"",changes);
  TeamWorkFlowArtifact teamArt=createAction1(changes,sawCodeGoal);
  createAction2(changes,sawCodeGoal,cisReqGoal);
  createAction3(changes,sawTestGoal,cisReqGoal);
  createAction7(changes,facilitiesGoal);
  changes.execute();
  teamArt=createAction456(sawCodeGoal,facilitiesGoal,teamArt);
  NewTaskData newTaskData=NewTaskDataFactory.get(getName(),createdBy,teamArt);
  for (  String name : Arrays.asList(""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"")) {
    JaxAtsTaskFactory.get(newTaskData,""String_Node_Str"" + name,createdBy,createdDate);
  }
  Collection<IAtsTask> createTasks=AtsClientService.get().getTaskService().createTasks(new NewTaskDatas(newTaskData));
  changes=new AtsChangeSet(getName());
  for (  IAtsTask task : createTasks) {
    Artifact taskArt=AtsClientService.get().getArtifact(task);
    toolsTeamGoal.addMember(taskArt);
    changes.setRelation(toolsTeamGoal,AtsRelationTypes.Goal_Member,taskArt);
  }
  changes.execute();
  WorldEditor.open(new WorldEditorSimpleProvider(""String_Node_Str"",Arrays.asList(sawCodeGoal,sawTestGoal,toolsTeamGoal,facilitiesGoal,cisReqGoal)));
}","@Override public void run(TableLoadOption... tableLoadOptions) throws OseeCoreException {
  if (AtsUtil.isProductionDb()) {
    AWorkbench.popup(""String_Node_Str"");
    return;
  }
  if (!MessageDialog.openConfirm(Displays.getActiveShell(),getName(),getName())) {
    return;
  }
  createdDate=new Date();
  AtsChangeSet changes=new AtsChangeSet(getName());
  createdBy=AtsClientService.get().getUserService().getCurrentUser();
  GoalArtifact sawCodeGoal=GoalManager.createGoal(""String_Node_Str"",changes);
  GoalArtifact sawTestGoal=GoalManager.createGoal(""String_Node_Str"",changes);
  GoalArtifact toolsTeamGoal=GoalManager.createGoal(""String_Node_Str"",changes);
  GoalArtifact facilitiesGoal=GoalManager.createGoal(""String_Node_Str"",changes);
  GoalArtifact cisReqGoal=GoalManager.createGoal(""String_Node_Str"",changes);
  TeamWorkFlowArtifact teamArt=createAction1(changes,sawCodeGoal);
  createAction2(changes,sawCodeGoal,cisReqGoal);
  createAction3(changes,sawTestGoal,cisReqGoal);
  createAction7(changes,facilitiesGoal);
  changes.execute();
  teamArt=createAction456(sawCodeGoal,facilitiesGoal,teamArt);
  NewTaskData newTaskData=NewTaskDataFactory.get(getName(),createdBy,teamArt);
  for (  String name : Arrays.asList(""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"")) {
    JaxAtsTaskFactory.get(newTaskData,""String_Node_Str"" + name,createdBy,createdDate);
  }
  Collection<IAtsTask> createTasks=AtsClientService.get().getTaskService().createTasks(new NewTaskDatas(newTaskData));
  changes=new AtsChangeSet(getName());
  for (  IAtsTask task : createTasks) {
    Artifact taskArt=AtsClientService.get().getArtifact(task);
    toolsTeamGoal.addMember(taskArt);
    changes.relate(toolsTeamGoal,AtsRelationTypes.Goal_Member,taskArt);
  }
  changes.execute();
  WorldEditor.open(new WorldEditorSimpleProvider(""String_Node_Str"",Arrays.asList(sawCodeGoal,sawTestGoal,toolsTeamGoal,facilitiesGoal,cisReqGoal)));
}",0.9968087103435328
96892,"@Test public void testGetClientsForUser(){
  String appServer=OseeClientProperties.getOseeApplicationServer();
  URI uri=UriBuilder.fromUri(appServer).path(""String_Node_Str"").path(""String_Node_Str"").path(""String_Node_Str"").build();
  String results=callAndGetResults(uri);
  getExpected(""String_Node_Str"",results);
}","@Test public void testGetClientsForUser(){
  String appServer=OseeClientProperties.getOseeApplicationServer();
  URI uri=UriBuilder.fromUri(appServer).path(""String_Node_Str"").path(""String_Node_Str"").path(DemoUsers.Joe_Smith.getUserId()).build();
  String results=callAndGetResults(uri);
  getExpected(""String_Node_Str"" + DemoUsers.Joe_Smith.getUserId() + ""String_Node_Str"",results);
  uri=UriBuilder.fromUri(appServer + ""String_Node_Str"").build();
  results=callAndGetResults(uri);
  getExpected(""String_Node_Str"" + DemoUsers.Joe_Smith.getUserId() + ""String_Node_Str"",results);
}",0.6681564245810055
96893,"@GET @Path(""String_Node_Str"") @Produces({MediaType.APPLICATION_JSON}) public Response getClientsForUser(@PathParam(""String_Node_Str"") String userId){
  Sessions sessions=new Sessions();
  Map<String,Boolean> portToAlive=new HashMap<>();
  String uId=getUserId(userId);
  if (!Strings.isValid(uId)) {
    throw new OseeArgumentException(""String_Node_Str"",userId);
  }
  Consumer<JdbcStatement> consumer=stmt -> {
    ClientSession session=createSession(stmt,uriInfo);
    String key=session.getClientAddress() + session.getClientPort();
    Boolean alive=portToAlive.get(key);
    if (alive == null) {
      alive=alive(session);
      portToAlive.put(key,alive);
      if (alive) {
        sessions.add(session);
      }
    }
  }
;
  jdbcService.getClient().runQueryWithLimit(consumer,10,NEWEST_SESSIONS_BY_USER,userId);
  return Response.ok(sessions).build();
}","/** 
 * @param idOrName as userId or name; underscores can be used instead of spaces if calling from browser;
 * @return all client sessions matching idOrName; multiple users sessions can be returned depending
 */
@GET @Path(""String_Node_Str"") @Produces({MediaType.APPLICATION_JSON}) public Response getClientsForUser(@PathParam(""String_Node_Str"") String idOrName){
  Sessions sessions=new Sessions();
  Map<String,Boolean> portToAlive=new HashMap<>();
  List<String> resolvedUserIds=getUserIds(idOrName);
  if (resolvedUserIds.isEmpty()) {
    throw new OseeArgumentException(""String_Node_Str"",idOrName);
  }
  Consumer<JdbcStatement> consumer=stmt -> {
    ClientSession session=createSession(stmt,uriInfo);
    String key=session.getClientAddress() + session.getClientPort();
    Boolean alive=portToAlive.get(key);
    if (alive == null) {
      alive=alive(session);
      portToAlive.put(key,alive);
      if (alive) {
        sessions.add(session);
      }
    }
  }
;
  for (  String userId : resolvedUserIds) {
    jdbcService.getClient().runQueryWithLimit(consumer,10,NEWEST_SESSIONS_BY_USER,userId);
  }
  return Response.ok(sessions).build();
}",0.8083209509658247
96894,"private void findMatchForAll(Iterator<DataRightEntry> iterator,Collection<DataRightAnchor> anchors,Map<String,DataRight> classificationsToDataRight){
  DataRightEntry previousArtifact=null;
  while (iterator.hasNext()) {
    DataRightEntry currentArtifact=iterator.next();
    String classification=currentArtifact.getClassification();
    boolean isSetDataRightFooter=false;
    if (previousArtifact == null) {
      isSetDataRightFooter=true;
    }
 else {
      String previousArtClassification=previousArtifact.getClassification();
      if (!classification.equals(previousArtClassification)) {
        isSetDataRightFooter=true;
      }
 else {
        DataRightAnchor previousArtAnchor=getAnchor(previousArtifact.getGuid(),anchors);
        if (previousArtAnchor != null) {
          previousArtAnchor.setContinuous(true);
        }
      }
    }
    if (!Strings.isValid(classification)) {
      classification=""String_Node_Str"";
    }
    DataRight dataRight=classificationsToDataRight.get(classification);
    if (dataRight == null) {
      classification=""String_Node_Str"";
      dataRight=classificationsToDataRight.get(classification);
    }
    DataRightAnchor anchor=new DataRightAnchor();
    anchor.setSetDataRightFooter(isSetDataRightFooter);
    anchor.setId(currentArtifact.getGuid());
    anchor.setDataRightId(dataRight.getId());
    anchors.add(anchor);
    previousArtifact=currentArtifact;
  }
}","private void findMatchForAll(Iterator<DataRightEntry> iterator,Collection<DataRightAnchor> anchors,Map<String,DataRight> classificationsToDataRight){
  DataRightEntry previousArtifact=null;
  while (iterator.hasNext()) {
    DataRightEntry currentArtifact=iterator.next();
    String classification=currentArtifact.getClassification();
    PageOrientation orientation=currentArtifact.getOrientation();
    boolean isSetDataRightFooter=false;
    if (previousArtifact == null) {
      isSetDataRightFooter=true;
    }
 else {
      String previousArtClassification=previousArtifact.getClassification();
      if (!classification.equals(previousArtClassification)) {
        isSetDataRightFooter=true;
      }
 else {
        DataRightAnchor previousArtAnchor=getAnchor(previousArtifact.getGuid(),anchors);
        PageOrientation prevOrientation=previousArtifact.getOrientation();
        if (previousArtAnchor != null && orientation.equals(prevOrientation)) {
          previousArtAnchor.setContinuous(true);
        }
      }
    }
    if (!Strings.isValid(classification)) {
      classification=""String_Node_Str"";
    }
    DataRight dataRight=classificationsToDataRight.get(classification);
    if (dataRight == null) {
      classification=""String_Node_Str"";
      dataRight=classificationsToDataRight.get(classification);
    }
    DataRightAnchor anchor=new DataRightAnchor();
    anchor.setSetDataRightFooter(isSetDataRightFooter);
    anchor.setId(currentArtifact.getGuid());
    anchor.setDataRightId(dataRight.getId());
    anchors.add(anchor);
    previousArtifact=currentArtifact;
  }
}",0.9377070907886016
96895,"default boolean isValid(){
  return !isInvalid();
}","default boolean isValid(){
  return getId().longValue() > 0;
}",0.7610619469026548
96896,"default boolean isInvalid(){
  return getId().equals(SENTINEL);
}","default boolean isInvalid(){
  return !isValid();
}",0.7586206896551724
96897,"private void populateRequest(List<Artifact> artifacts,DataRightInput request){
  if (request.isEmpty()) {
    List<Artifact> allArtifacts=new ArrayList<>();
    if (recurseChildren) {
      for (      Artifact art : artifacts) {
        allArtifacts.add(art);
        if (!art.isHistorical()) {
          allArtifacts.addAll(art.getDescendants());
        }
      }
    }
 else {
      allArtifacts.addAll(artifacts);
    }
    int index=0;
    String overrideClassification=(String)renderer.getOption(ITemplateRenderer.OVERRIDE_DATA_RIGHTS_OPTION);
    for (    Artifact artifact : allArtifacts) {
      String classification=null;
      if (overrideClassification != null && ITemplateRenderer.DataRightsClassification.isValid(overrideClassification)) {
        classification=overrideClassification;
      }
 else {
        classification=artifact.getSoleAttributeValueAsString(CoreAttributeTypes.DataRightsClassification,""String_Node_Str"");
      }
      PageOrientation orientation=WordRendererUtil.getPageOrientation(artifact);
      request.addData(artifact.getGuid(),classification,orientation,index);
      index++;
    }
  }
}","private void populateRequest(List<Artifact> artifacts,DataRightInput request){
  if (request.isEmpty()) {
    List<Artifact> allArtifacts=new ArrayList<>();
    if (recurseChildren || (renderer.getBooleanOption(RECURSE_ON_LOAD) && !renderer.getBooleanOption(""String_Node_Str""))) {
      for (      Artifact art : artifacts) {
        allArtifacts.add(art);
        if (!art.isHistorical()) {
          allArtifacts.addAll(art.getDescendants());
        }
      }
    }
 else {
      allArtifacts.addAll(artifacts);
    }
    int index=0;
    String overrideClassification=(String)renderer.getOption(ITemplateRenderer.OVERRIDE_DATA_RIGHTS_OPTION);
    for (    Artifact artifact : allArtifacts) {
      String classification=null;
      if (overrideClassification != null && ITemplateRenderer.DataRightsClassification.isValid(overrideClassification)) {
        classification=overrideClassification;
      }
 else {
        classification=artifact.getSoleAttributeValueAsString(CoreAttributeTypes.DataRightsClassification,""String_Node_Str"");
      }
      PageOrientation orientation=WordRendererUtil.getPageOrientation(artifact);
      request.addData(artifact.getGuid(),classification,orientation,index);
      index++;
    }
  }
}",0.9590198563582594
96898,"public static Set<Artifact> bulkLoadArtifacts(Collection<? extends Artifact> artifacts) throws OseeCoreException {
  List<Artifact> actions=new ArrayList<>();
  List<Artifact> teams=new ArrayList<>();
  List<Artifact> tasks=new ArrayList<>();
  for (  Artifact art : artifacts) {
    if (IAtsAction.isOfType(art)) {
      actions.add(art);
    }
 else     if (IAtsTeamWorkflow.isOfType(art)) {
      teams.add(art);
    }
 else     if (IAtsTask.isOfType(art)) {
      tasks.add(art);
    }
  }
  Set<Artifact> arts=new HashSet<Artifact>();
  if (!actions.isEmpty()) {
    arts.addAll(RelationManager.getRelatedArtifacts(actions,3,AtsRelationTypes.TeamWfToTask_Task,AtsRelationTypes.TeamWorkflowToReview_Review,AtsRelationTypes.ActionToWorkflow_Action));
  }
  if (!teams.isEmpty()) {
    arts.addAll(RelationManager.getRelatedArtifacts(teams,4,AtsRelationTypes.TeamWfToTask_Task,AtsRelationTypes.ActionToWorkflow_WorkFlow,AtsRelationTypes.TeamWorkflowToReview_Review));
  }
  if (!tasks.isEmpty()) {
    arts.addAll(RelationManager.getRelatedArtifacts(tasks,2,AtsRelationTypes.TeamWfToTask_TeamWf,AtsRelationTypes.ActionToWorkflow_WorkFlow));
  }
  arts.addAll(artifacts);
  System.err.println(""String_Node_Str"" + arts.size());
  return arts;
}","public static Set<Artifact> bulkLoadArtifacts(Collection<? extends Artifact> artifacts) throws OseeCoreException {
  List<Artifact> actions=new ArrayList<>();
  List<Artifact> teams=new ArrayList<>();
  List<Artifact> tasks=new ArrayList<>();
  for (  Artifact art : artifacts) {
    if (IAtsAction.isOfType(art)) {
      actions.add(art);
    }
 else     if (IAtsTeamWorkflow.isOfType(art)) {
      teams.add(art);
    }
 else     if (IAtsTask.isOfType(art)) {
      tasks.add(art);
    }
  }
  Set<Artifact> arts=new HashSet<Artifact>();
  if (!actions.isEmpty()) {
    arts.addAll(RelationManager.getRelatedArtifacts(actions,3,AtsRelationTypes.TeamWfToTask_Task,AtsRelationTypes.TeamWorkflowToReview_Review,AtsRelationTypes.ActionToWorkflow_Action));
  }
  if (!teams.isEmpty()) {
    arts.addAll(RelationManager.getRelatedArtifacts(teams,4,AtsRelationTypes.TeamWfToTask_Task,AtsRelationTypes.ActionToWorkflow_WorkFlow,AtsRelationTypes.TeamWorkflowToReview_Review));
  }
  if (!tasks.isEmpty()) {
    arts.addAll(RelationManager.getRelatedArtifacts(tasks,2,AtsRelationTypes.TeamWfToTask_TeamWf,AtsRelationTypes.ActionToWorkflow_WorkFlow));
  }
  arts.addAll(artifacts);
  return arts;
}",0.9683518290176736
96899,"@Override public Collection<IAtsInsertionActivity> getInput(){
  if (insertionWidget == null || insertionWidget.get() == null) {
    return selectOthers;
  }
  return Collections.castAll(AtsClientService.get().getProgramService().getInsertionActivities(insertionWidget.get()));
}","@Override public Collection<IAtsInsertionActivity> getInput(){
  if (insertionWidget != null && insertionWidget.get() != null) {
    Object obj=insertionWidget.getWidget().getSelected();
    if (obj != null && obj instanceof IAtsInsertion) {
      return Collections.castAll(AtsClientService.get().getProgramService().getInsertionActivities(insertionWidget.get()));
    }
  }
  return java.util.Collections.emptyList();
}",0.6885714285714286
96900,"@Override public Collection<IAtsInsertion> getInput(){
  if (programWidget == null || programWidget.get() == null) {
    return selectOthers;
  }
  return Collections.castAll(AtsClientService.get().getProgramService().getInsertions(programWidget.get()));
}","@Override public Collection<IAtsInsertion> getInput(){
  if (programWidget != null && programWidget.get() != null) {
    Object obj=programWidget.getWidget().getSelected();
    if (obj != null && obj instanceof IAtsProgram) {
      return Collections.castAll(AtsClientService.get().getProgramService().getInsertions(programWidget.get()));
    }
  }
  return java.util.Collections.emptyList();
}",0.3723076923076923
96901,"private int getPosition(Artifact artifact) throws OseeCoreException {
  Artifact parent=artifact.getParent();
  List<Artifact> children=parent.getChildren();
  strongArtifactRefs.addAll(children);
  for (int index=0; index < children.size(); index++) {
    Artifact child=children.get(index);
    if (artifact.equals(child)) {
      return index + 1;
    }
  }
  throw new OseeStateException(""String_Node_Str"",artifact,parent);
}","private int getPosition(Artifact artifact) throws OseeCoreException {
  Artifact parent=artifact.getParent();
  List<Artifact> children=parentToChildrenCache.get(parent.getId());
  if (children == null) {
    children=parent.getChildren();
    parentToChildrenCache.put(parent.getId(),children);
  }
  int index=1 + children.indexOf(artifact);
  if (index > 0) {
    return index;
  }
  throw new OseeStateException(""String_Node_Str"",artifact,parent);
}",0.5102040816326531
96902,"public static TransactionToken getTransactionAtDate(BranchId branch,Date maxDateExclusive) throws OseeCoreException {
  Conditions.checkNotNull(branch,""String_Node_Str"");
  Conditions.checkNotNull(maxDateExclusive,""String_Node_Str"");
  TransactionRecord txRecord=null;
  JdbcStatement chStmt=ConnectionHandler.getStatement();
  try {
    chStmt.runPreparedQuery(SELECT_BRANCH_TRANSACTION_BY_DATE,branch,new Timestamp(maxDateExclusive.getTime()));
    if (chStmt.next()) {
      if (chStmt.wasNull()) {
        DateFormat dateFormat=DateFormat.getDateTimeInstance(DateFormat.LONG,DateFormat.LONG);
        throw new TransactionDoesNotExist(""String_Node_Str"",dateFormat.format(maxDateExclusive));
      }
      txRecord=loadTransaction(chStmt);
    }
  }
  finally {
    chStmt.close();
  }
  return txRecord;
}","public static TransactionToken getTransactionAtDate(BranchId branch,Date maxDateExclusive) throws OseeCoreException {
  Conditions.checkNotNull(branch,""String_Node_Str"");
  Conditions.checkNotNull(maxDateExclusive,""String_Node_Str"");
  TransactionRecord txRecord=null;
  JdbcStatement chStmt=ConnectionHandler.getStatement();
  try {
    chStmt.runPreparedQuery(SELECT_BRANCH_TRANSACTION_BY_DATE,branch,new Timestamp(maxDateExclusive.getTime()));
    if (chStmt.next()) {
      txRecord=loadTransaction(chStmt);
    }
  }
  finally {
    chStmt.close();
  }
  return txRecord;
}",0.7238644556596971
96903,"@Override public boolean equals(Object obj){
  if (this == obj) {
    return true;
  }
  if (obj == null) {
    return false;
  }
  if (obj instanceof JaxAtsObject) {
    JaxAtsObject other=(JaxAtsObject)obj;
    if (other.getUuid() == uuid) {
      return true;
    }
  }
  if (obj instanceof IAtsObject) {
    IAtsObject other=(IAtsObject)obj;
    if (other.getUuid().equals(uuid)) {
      return true;
    }
  }
  if (obj instanceof ArtifactId) {
    ArtifactId other=(ArtifactId)obj;
    if (other.getUuid().equals(uuid)) {
      return true;
    }
  }
  return false;
}","@Override public boolean equals(Object obj){
  if (this == obj) {
    return true;
  }
  if (obj == null) {
    return false;
  }
  if (obj instanceof JaxAtsObject) {
    JaxAtsObject other=(JaxAtsObject)obj;
    if (other.getUuid().equals(uuid)) {
      return true;
    }
  }
  if (obj instanceof IAtsObject) {
    IAtsObject other=(IAtsObject)obj;
    if (other.getUuid().equals(uuid)) {
      return true;
    }
  }
  if (obj instanceof ArtifactId) {
    ArtifactId other=(ArtifactId)obj;
    if (other.getUuid().equals(uuid)) {
      return true;
    }
  }
  return false;
}",0.981786643538595
96904,"public static Artifact getAssociatedArtifact(TransactionDelta txDelta) throws OseeCoreException {
  Artifact associatedArtifact=null;
  if (txDelta.areOnTheSameBranch()) {
    Long commitArtId=TransactionManager.getCommitArtId(txDelta.getEndTx());
    if (!commitArtId.equals(0)) {
      associatedArtifact=ArtifactQuery.getArtifactFromId(commitArtId,COMMON);
    }
  }
 else {
    BranchId sourceBranch=txDelta.getStartTx().getBranch();
    associatedArtifact=BranchManager.getAssociatedArtifact(sourceBranch);
  }
  return associatedArtifact;
}","public static Artifact getAssociatedArtifact(TransactionDelta txDelta) throws OseeCoreException {
  Artifact associatedArtifact=null;
  if (txDelta.areOnTheSameBranch()) {
    Long commitArtId=TransactionManager.getCommitArtId(txDelta.getEndTx());
    if (!commitArtId.equals(0L)) {
      associatedArtifact=ArtifactQuery.getArtifactFromId(commitArtId,COMMON);
    }
  }
 else {
    BranchId sourceBranch=txDelta.getStartTx().getBranch();
    associatedArtifact=BranchManager.getAssociatedArtifact(sourceBranch);
  }
  return associatedArtifact;
}",0.9990850869167428
96905,"@Override protected void doWork(IProgressMonitor monitor) throws Exception {
  Artifact associatedArtifact=null;
  TransactionDelta txDelta=changeData.getTxDelta();
  if (changeData.getCompareType().areSpecificTxs()) {
    Long commitId=TransactionManager.getCommitArtId(txDelta.getEndTx());
    if (!commitId.equals(0)) {
      associatedArtifact=ArtifactQuery.getArtifactFromId(commitId,COMMON);
    }
  }
 else {
    BranchId sourceBranch=txDelta.getStartTx().getBranch();
    if (!BranchManager.getState(sourceBranch).isDeleted()) {
      associatedArtifact=BranchManager.getAssociatedArtifact(sourceBranch);
    }
  }
  monitor.worked(calculateWork(0.80));
  changeData.setAssociatedArtifact(associatedArtifact);
  monitor.worked(calculateWork(0.20));
}","@Override protected void doWork(IProgressMonitor monitor) throws Exception {
  Artifact associatedArtifact=null;
  TransactionDelta txDelta=changeData.getTxDelta();
  if (changeData.getCompareType().areSpecificTxs()) {
    Long commitId=TransactionManager.getCommitArtId(txDelta.getEndTx());
    if (!commitId.equals(0L)) {
      associatedArtifact=ArtifactQuery.getArtifactFromId(commitId,COMMON);
    }
  }
 else {
    BranchId sourceBranch=txDelta.getStartTx().getBranch();
    if (!BranchManager.getState(sourceBranch).isDeleted()) {
      associatedArtifact=BranchManager.getAssociatedArtifact(sourceBranch);
    }
  }
  monitor.worked(calculateWork(0.80));
  changeData.setAssociatedArtifact(associatedArtifact);
  monitor.worked(calculateWork(0.20));
}",0.999340804218853
96906,"private void handleCreateNewWorkflow(Collection<TeamWorkFlowArtifact> teamArts,String title) throws OseeCoreException {
  IAtsUser user=AtsClientService.get().getUserService().getCurrentUser();
  List<IAtsTeamWorkflow> teamWfs=new LinkedList<>();
  for (  TeamWorkFlowArtifact teamArt : getDefaultTeamWorkflows()) {
    teamWfs.add(teamArt);
  }
  DuplicateWorkflowAtStartStateOperation op=new DuplicateWorkflowAtStartStateOperation(teamWfs,title,user,AtsClientService.get());
  IValidatingOperation operation=op;
  XResultData results=validateAndRun(operation);
  if (!results.isErrors()) {
    for (    IAtsTeamWorkflow newTeamArt : op.getResults().values()) {
      WorkflowEditor.editArtifact(newTeamArt);
    }
  }
}","private void handleCreateNewWorkflow(Collection<TeamWorkFlowArtifact> teamArts,String title) throws OseeCoreException {
  IAtsUser user=AtsClientService.get().getUserService().getCurrentUser();
  List<IAtsTeamWorkflow> teamWfs=new LinkedList<>();
  for (  TeamWorkFlowArtifact teamArt : getDefaultTeamWorkflows()) {
    teamWfs.add(teamArt);
  }
  DuplicateWorkflowAtStartStateOperation op=new DuplicateWorkflowAtStartStateOperation(teamWfs,title,user,AtsClientService.get());
  IValidatingOperation operation=op;
  XResultData results=validateAndRun(operation);
  if (!results.isErrors()) {
    for (    IAtsTeamWorkflow newTeamArt : op.getResults().values()) {
      WorkflowEditor.editArtifact((Artifact)newTeamArt);
    }
  }
}",0.9931129476584022
96907,"private void handleCreateDuplicate(Collection<TeamWorkFlowArtifact> teamArts,boolean duplicateTasks,String title) throws OseeCoreException {
  IAtsUser user=AtsClientService.get().getUserService().getCurrentUser();
  List<IAtsTeamWorkflow> teamWfs=new LinkedList<>();
  for (  TeamWorkFlowArtifact teamArt : getDefaultTeamWorkflows()) {
    teamWfs.add(teamArt);
  }
  DuplicateWorkflowAsIsOperation op=new DuplicateWorkflowAsIsOperation(teamWfs,duplicateTasks,title,user,AtsClientService.get());
  IValidatingOperation operation=op;
  XResultData results=validateAndRun(operation);
  if (!results.isErrors()) {
    for (    IAtsTeamWorkflow newTeamArt : op.getResults().values()) {
      SMAEditor.editArtifact((Artifact)newTeamArt);
    }
  }
}","private void handleCreateDuplicate(Collection<TeamWorkFlowArtifact> teamArts,boolean duplicateTasks,String title) throws OseeCoreException {
  IAtsUser user=AtsClientService.get().getUserService().getCurrentUser();
  List<IAtsTeamWorkflow> teamWfs=new LinkedList<>();
  for (  TeamWorkFlowArtifact teamArt : getDefaultTeamWorkflows()) {
    teamWfs.add(teamArt);
  }
  DuplicateWorkflowAsIsOperation op=new DuplicateWorkflowAsIsOperation(teamWfs,duplicateTasks,title,user,AtsClientService.get());
  IValidatingOperation operation=op;
  XResultData results=validateAndRun(operation);
  if (!results.isErrors()) {
    for (    IAtsTeamWorkflow newTeamArt : op.getResults().values()) {
      WorkflowEditor.editArtifact((Artifact)newTeamArt);
    }
  }
}",0.9926519706078824
96908,"@Override public void run(){
  flatControl.addPage((T)null);
}","@SuppressWarnings(""String_Node_Str"") @Override public void run(){
  Object obj=null;
  T object=(T)obj;
  flatControl.addPage(object);
}",0.5555555555555556
96909,"public static ArrayList<File> getJavaProjectProjectDependancies(IJavaProject javaProject){
  ArrayList<File> urls=new ArrayList<>();
  try {
    IClasspathEntry[] paths=localGetResolvedClasspath(javaProject);
    for (int i=0; i < paths.length; i++) {
      if (paths[i].getEntryKind() == IClasspathEntry.CPE_LIBRARY) {
        if (paths[i].getPath().toFile().exists()) {
        }
 else {
          File file=null;
          file=new File(AWorkspace.getWorkspacePath().concat(paths[i].getPath().toOSString()));
          if (file.exists()) {
            urls.add(file);
          }
        }
      }
 else       if (paths[i].getEntryKind() == IClasspathEntry.CPE_PROJECT) {
        urls.add(new File(AWorkspace.getWorkspacePath().concat(paths[i].getPath().toFile().getPath().concat(File.separator + ""String_Node_Str"" + File.separator))));
      }
 else       if (paths[i].getEntryKind() == IClasspathEntry.CPE_SOURCE) {
        File projectlocation=javaProject.getProject().getLocation().toFile();
        File projecttricky=javaProject.getProject().getFullPath().toFile();
        IPath output=paths[i].getOutputLocation();
        File fileLocation;
        if (output == null) {
          fileLocation=new File(paths[i].getPath().toFile().getPath().replace(""String_Node_Str"",""String_Node_Str""));
        }
 else {
          fileLocation=paths[i].getOutputLocation().toFile();
        }
        String realLocation=fileLocation.toString().replace(projecttricky.toString(),projectlocation.toString());
        urls.add(new File(realLocation));
      }
    }
  }
 catch (  JavaModelException ex) {
    ex.printStackTrace();
  }
  return urls;
}","public static ArrayList<File> getJavaProjectProjectDependancies(IJavaProject javaProject){
  ArrayList<File> urls=new ArrayList<>();
  try {
    IClasspathEntry[] paths=localGetResolvedClasspath(javaProject);
    for (int i=0; i < paths.length; i++) {
      if (paths[i].getEntryKind() == IClasspathEntry.CPE_LIBRARY) {
        if (paths[i].getPath().toFile().exists()) {
        }
 else {
          File file=null;
          file=new File(AWorkspace.getWorkspacePath().concat(paths[i].getPath().toOSString()));
          if (file.exists()) {
            urls.add(file);
          }
        }
      }
 else       if (paths[i].getEntryKind() == IClasspathEntry.CPE_PROJECT) {
        urls.add(new File(AWorkspace.getWorkspacePath().concat(paths[i].getPath().toFile().getPath().concat(File.separator + ""String_Node_Str"" + File.separator))));
      }
 else       if (paths[i].getEntryKind() == IClasspathEntry.CPE_SOURCE) {
        File projectlocation=javaProject.getProject().getLocation().toFile();
        File projecttricky=javaProject.getProject().getFullPath().toFile();
        IPath output=paths[i].getOutputLocation();
        File fileLocation;
        if (output == null) {
          fileLocation=javaProject.getOutputLocation().toFile();
        }
 else {
          fileLocation=paths[i].getOutputLocation().toFile();
        }
        String realLocation=fileLocation.toString().replace(projecttricky.toString(),projectlocation.toString());
        urls.add(new File(realLocation));
      }
    }
  }
 catch (  JavaModelException ex) {
    ex.printStackTrace();
  }
  return urls;
}",0.9598517603458924
96910,"/** 
 * @param artifact the artifact to set
 */
public void setArtifact(Artifact artifact){
  if (this.artifact.equals(artifact)) {
    return;
  }
  this.artifact=artifact;
  loadArtTypes();
  loadRelTypes();
  loadAttributeTypes();
  notifyListeners(ModType.Artifact);
}","/** 
 * @param artifact the artifact to set
 */
public void setArtifact(Artifact artifact){
  if (artifact.equals(this.artifact)) {
    return;
  }
  this.artifact=artifact;
  loadArtTypes();
  loadRelTypes();
  loadAttributeTypes();
  notifyListeners(ModType.Artifact);
}",0.9411764705882352
96911,"@GET @Produces(MediaType.APPLICATION_JSON) public Response getRoot(){
  URI uri=UriBuilder.fromUri(""String_Node_Str"").build();
  return Response.seeOther(uri).build();
}","@GET @Produces(MediaType.APPLICATION_JSON) public Response getRoot(){
  String forwardedServer=OAuthUtil.getForwarderServer();
  String basePath;
  URI location=uriInfo.getRequestUri();
  if (Strings.isValid(forwardedServer)) {
    basePath=forwardedServer;
  }
 else {
    basePath=location.toString();
  }
  String scheme=location.getScheme();
  URI finalUri=UriBuilder.fromPath(basePath).scheme(scheme).path(""String_Node_Str"").fragment(location.getRawFragment()).buildFromEncoded();
  return Response.seeOther(finalUri).build();
}",0.4501424501424501
96912,"@Before public void setUp(){
  MockitoAnnotations.initMocks(this);
  factory=new AttributeDataProxyFactory(proxyProvider,attributeTypeCache);
}","@Before public void setUp(){
  MockitoAnnotations.initMocks(this);
  factory=new AttributeDataProxyFactory(proxyProvider,null,attributeTypeCache);
}",0.9828178694158076
96913,"public AttributeDataProxyFactory(DataProxyFactoryProvider proxyProvider,AttributeTypes attributeTypes){
  super();
  this.proxyProvider=proxyProvider;
  this.attributeTypeCache=attributeTypes;
}","public AttributeDataProxyFactory(DataProxyFactoryProvider proxyProvider,JdbcClient jdbcClient,AttributeTypes attributeTypes){
  super();
  this.proxyProvider=proxyProvider;
  this.attributeTypeCache=attributeTypes;
  this.jdbcClient=jdbcClient;
}",0.8818181818181818
96914,"public ProxyDataFactory createProxyDataFactory(AttributeTypes attributeTypes){
  return new AttributeDataProxyFactory(proxyProvider,attributeTypes);
}","public ProxyDataFactory createProxyDataFactory(AttributeTypes attributeTypes){
  return new AttributeDataProxyFactory(proxyProvider,jdbcClient,attributeTypes);
}",0.964630225080386
96915,"private int loadData(OrcsDataHandler<IndexedResource> handler,int tagQueueQueryId) throws OseeCoreException {
  Consumer<JdbcStatement> consumer=stmt -> {
    int itemId=stmt.getInt(""String_Node_Str"");
    long typeUuid=stmt.getLong(""String_Node_Str"");
    long gammaId=stmt.getLong(""String_Node_Str"");
    String uri=stmt.getString(""String_Node_Str"");
    String value=stmt.getString(""String_Node_Str"");
    IndexedResource data=createData(itemId,typeUuid,gammaId,value,uri);
    handler.onData(data);
  }
;
  return jdbcClient.runQuery(consumer,LOAD_ATTRIBUTE,tagQueueQueryId);
}","private int loadData(OrcsDataHandler<IndexedResource> handler,int tagQueueQueryId) throws OseeCoreException {
  Collection<AttributeData> attrData=new HashSet<>();
  Consumer<JdbcStatement> consumer=stmt -> {
    int itemId=stmt.getInt(""String_Node_Str"");
    long typeUuid=stmt.getLong(""String_Node_Str"");
    long gammaId=stmt.getLong(""String_Node_Str"");
    String uri=stmt.getString(""String_Node_Str"");
    String value=stmt.getString(""String_Node_Str"");
    attrData.add(new AttributeData(itemId,typeUuid,gammaId,uri,value));
  }
;
  int loaded=jdbcClient.runQuery(consumer,LOAD_ATTRIBUTE,tagQueueQueryId);
  for (  AttributeData attributeData : attrData) {
    StringBuffer sb=new StringBuffer();
    sb=sb.append(attributeData.getValue());
    sb=sb.append(AttributeDataUtil.getNameByGuid(attributeData.getValue(),jdbcClient));
    IndexedResource data=createData(attributeData.getItemId(),attributeData.getTypeUuid(),attributeData.getGammaId(),sb.toString(),attributeData.getUri());
    handler.onData(data);
  }
  return loaded;
}",0.6407407407407407
96916,"public boolean isSimilar(Address other){
  return other != null && other.itemId == itemId && other.branchId == branchId;
}","public boolean isSimilar(Address other){
  return other != null && other.itemId == itemId && other.branchId.equals(branchId);
}",0.9477911646586346
96917,"public boolean hasSameApplicability(Address other){
  return appId.equals(other.getBranchId());
}","public boolean hasSameApplicability(Address other){
  return appId.equals(other.getApplicabilityId());
}",0.9154228855721394
96918,"public void create(){
  Composite applicabilityComp=toolkit.createComposite(form.getForm().getBody(),SWT.WRAP);
  applicabilityComp.setLayout(ALayout.getZeroMarginLayout(2,false));
  applicabilityComp.setLayoutData(new GridData(SWT.BEGINNING,SWT.FILL,true,false));
  text=toolkit.createFormText(applicabilityComp,false);
  text.setText(getArtifactViewApplicabiltyText(),true,false);
  text.setForeground(Displays.getSystemColor(SWT.COLOR_DARK_GRAY));
  button=toolkit.createButton(applicabilityComp,""String_Node_Str"",SWT.PUSH);
  refreshButton();
}","public void create(){
  Composite applicabilityComp=toolkit.createComposite(form.getForm().getBody(),SWT.WRAP);
  applicabilityComp.setLayout(ALayout.getZeroMarginLayout(2,false));
  applicabilityComp.setLayoutData(new GridData(SWT.BEGINNING,SWT.FILL,true,false));
  text=toolkit.createFormText(applicabilityComp,false);
  text.setText(getArtifactViewApplicabiltyText(),true,false);
  text.setForeground(Displays.getSystemColor(SWT.COLOR_DARK_GRAY));
  button=toolkit.createButton(applicabilityComp,""String_Node_Str"",SWT.PUSH);
  setButtonChangeable();
}",0.9727767695099818
96919,"public void refresh(){
  text.setText(getArtifactViewApplicabiltyText(),true,false);
  refreshButton();
}","public void refresh(){
  text.setText(getArtifactViewApplicabiltyText(),true,false);
}",0.900523560209424
96920,"@Override public void renderAttribute(IAttributeType attributeType,Artifact artifact,PresentationType presentationType,Producer producer,AttributeElement attributeElement,String footer) throws OseeCoreException {
  WordMLProducer wordMl=(WordMLProducer)producer;
  if (attributeType.equals(CoreAttributeTypes.WordTemplateContent)) {
    Attribute<?> wordTempConAttr=artifact.getSoleAttribute(attributeType);
    String data=null;
    if (wordTempConAttr != null) {
      data=(String)wordTempConAttr.getValue();
    }
    if (attributeElement.getLabel().length() > 0) {
      wordMl.addParagraph(attributeElement.getLabel());
    }
    if (data != null) {
      data=WordUtil.reassignBinDataID(data);
      LinkType linkType=(LinkType)getOption(""String_Node_Str"");
      Set<String> unknownGuids=new HashSet<>();
      data=WordMlLinkHandler.link(linkType,artifact,data,unknownGuids);
      WordUiUtil.displayUnknownGuids(artifact,unknownGuids);
      data=WordUtil.reassignBookMarkID(data);
      data=data.replaceAll(ReportConstants.ENTIRE_FTR_EXTRA_PARA,""String_Node_Str"");
      data=data.replaceAll(ReportConstants.ENTIRE_FTR,""String_Node_Str"");
      data=data.replaceAll(ReportConstants.NO_DATA_RIGHTS,""String_Node_Str"");
      int lastIndex=data.lastIndexOf(""String_Node_Str"");
      if (lastIndex != -1) {
        String temp=data.substring(lastIndex);
        temp=temp.replaceAll(""String_Node_Str"",""String_Node_Str"");
        data=data.substring(0,lastIndex) + temp;
      }
      data=data.concat(footer);
    }
    if (presentationType == PresentationType.SPECIALIZED_EDIT) {
      OseeLinkBuilder linkBuilder=new OseeLinkBuilder();
      wordMl.addEditParagraphNoEscape(linkBuilder.getStartEditImage(artifact.getGuid()));
      wordMl.addWordMl(data);
      wordMl.addEditParagraphNoEscape(linkBuilder.getEndEditImage(artifact.getGuid()));
    }
 else     if (data != null) {
      data=data.replaceAll(WordTemplateProcessor.PGNUMTYPE_START_1,""String_Node_Str"");
      wordMl.addWordMl(data);
    }
    wordMl.resetListValue();
  }
 else {
    super.renderAttribute(attributeType,artifact,PresentationType.SPECIALIZED_EDIT,wordMl,attributeElement,footer);
  }
}","@Override public void renderAttribute(IAttributeType attributeType,Artifact artifact,PresentationType presentationType,Producer producer,AttributeElement attributeElement,String footer) throws OseeCoreException {
  WordMLProducer wordMl=(WordMLProducer)producer;
  if (attributeType.equals(CoreAttributeTypes.WordTemplateContent)) {
    Attribute<?> wordTempConAttr=artifact.getSoleAttribute(attributeType);
    String data=null;
    if (wordTempConAttr != null) {
      data=(String)wordTempConAttr.getValue();
    }
    if (attributeElement.getLabel().length() > 0) {
      wordMl.addParagraph(attributeElement.getLabel());
    }
    if (data != null) {
      data=WordUtil.reassignBinDataID(data);
      LinkType linkType=(LinkType)getOption(""String_Node_Str"");
      Set<String> unknownGuids=new HashSet<>();
      data=WordMlLinkHandler.link(linkType,artifact,data,unknownGuids);
      WordUiUtil.displayUnknownGuids(artifact,unknownGuids);
      data=WordUtil.reassignBookMarkID(data);
      if (presentationType == PresentationType.SPECIALIZED_EDIT) {
        data=data.replaceAll(ReportConstants.ENTIRE_FTR_EXTRA_PARA,""String_Node_Str"");
      }
      data=data.replaceAll(ReportConstants.ENTIRE_FTR,""String_Node_Str"");
      data=data.replaceAll(ReportConstants.NO_DATA_RIGHTS,""String_Node_Str"");
      if (presentationType == PresentationType.SPECIALIZED_EDIT && !data.contains(""String_Node_Str"")) {
        int lastIndex=data.lastIndexOf(""String_Node_Str"");
        if (lastIndex != -1) {
          String temp=data.substring(lastIndex);
          temp=temp.replaceAll(""String_Node_Str"",""String_Node_Str"");
          data=data.substring(0,lastIndex) + temp;
        }
      }
      data=data.concat(footer);
    }
    if (presentationType == PresentationType.SPECIALIZED_EDIT) {
      OseeLinkBuilder linkBuilder=new OseeLinkBuilder();
      wordMl.addEditParagraphNoEscape(linkBuilder.getStartEditImage(artifact.getGuid()));
      wordMl.addWordMl(data);
      wordMl.addEditParagraphNoEscape(linkBuilder.getEndEditImage(artifact.getGuid()));
    }
 else     if (data != null) {
      data=data.replaceAll(WordTemplateProcessor.PGNUMTYPE_START_1,""String_Node_Str"");
      wordMl.addWordMl(data);
    }
    wordMl.resetListValue();
  }
 else {
    super.renderAttribute(attributeType,artifact,PresentationType.SPECIALIZED_EDIT,wordMl,attributeElement,footer);
  }
}",0.955833882663151
96921,"@Override public int getApplicabilityRating(PresentationType presentationType,IArtifact artifact,Object... objects) throws OseeCoreException {
  Artifact aArtifact=artifact.getFullArtifact();
  if (aArtifact.isOfType(AtsArtifactTypes.WorkDefinition) && presentationType != GENERALIZED_EDIT) {
    return PRESENTATION_SUBTYPE_MATCH;
  }
  return NO_MATCH;
}","@Override public int getApplicabilityRating(PresentationType presentationType,IArtifact artifact,Object... objects) throws OseeCoreException {
  Artifact aArtifact=artifact.getFullArtifact();
  if (aArtifact.isOfType(AtsArtifactTypes.WorkDefinition) && presentationType != GENERALIZED_EDIT) {
    return ARTIFACT_TYPE_MATCH;
  }
  return NO_MATCH;
}",0.975886524822695
96922,"@Override public int getApplicabilityRating(PresentationType presentationType,IArtifact artifact,Object... objects) throws OseeCoreException {
  Artifact aArtifact=artifact.getFullArtifact();
  if (aArtifact.isOfType(AtsArtifactTypes.WorkDefinition) && presentationType != GENERALIZED_EDIT) {
    return PRESENTATION_SUBTYPE_MATCH;
  }
  return NO_MATCH;
}","@Override public int getApplicabilityRating(PresentationType presentationType,IArtifact artifact,Object... objects) throws OseeCoreException {
  Artifact aArtifact=artifact.getFullArtifact();
  if (aArtifact.isOfType(AtsArtifactTypes.WorkDefinition) && presentationType != GENERALIZED_EDIT) {
    return ARTIFACT_TYPE_MATCH;
  }
  return NO_MATCH;
}",0.975886524822695
96923,"private WorkPackageIdColumnUI(){
  super(AtsColumnId.WorkPackageId,AtsColumnId.WorkPackageName.getId(),""String_Node_Str"",80,XViewerAlign.Left,false,SortDataType.String,true,""String_Node_Str"");
}","private WorkPackageIdColumnUI(){
  super(AtsColumnId.WorkPackageId,AtsColumnId.WorkPackageId.getId(),""String_Node_Str"",80,XViewerAlign.Left,false,SortDataType.String,true,""String_Node_Str"");
}",0.9844559585492229
96924,"@Override public void introduce(OrcsSession session,Long branch,RelationNode source,RelationNode destination) throws OseeCoreException {
  ensureRelationsInitialized(session,source.getGraph(),source);
  Collection<? extends IRelationType> validRelationTypes=getValidRelationTypes(session,destination);
  RelationNodeAdjacencies sourceAdjacencies=source.getGraph().getAdjacencies(source);
  RelationNodeAdjacencies destinationAdjacencies=destination.getGraph().getAdjacencies(destination);
  if (sourceAdjacencies != null) {
    for (    Relation sourceRel : sourceAdjacencies.getAll()) {
      if (validRelationTypes.contains(sourceRel.getRelationType())) {
        Relation destinationRel=findRelationByLocalId(destinationAdjacencies,sourceRel.getOrcsData().getLocalId());
        Relation introduceRelation=relationFactory.introduce(branch,sourceRel.getOrcsData());
        if (destinationRel == null) {
          ArtifactReadable readable=doesRelatedArtifactExist(session,introduceRelation,destination,branch);
          if (readable != null) {
            RelationNode node=proxy.getInternalArtifact(readable);
            relate(session,destination,sourceRel.getRelationType(),node);
          }
        }
 else {
          destinationRel.setOrcsData(introduceRelation.getOrcsData());
          destinationRel.setDirty();
        }
      }
    }
  }
  String orderData=source.getOrderData();
  if (!orderData.isEmpty()) {
    destination.storeOrderData(OrderChange.Forced,source.getOrderData());
  }
}","@Override public void introduce(OrcsSession session,Long branch,RelationNode source,RelationNode destination) throws OseeCoreException {
  ensureRelationsInitialized(session,source.getGraph(),source);
  Collection<? extends IRelationType> validRelationTypes=getValidRelationTypes(session,destination);
  RelationNodeAdjacencies sourceAdjacencies=source.getGraph().getAdjacencies(source);
  RelationNodeAdjacencies destinationAdjacencies=destination.getGraph().getAdjacencies(destination);
  if (sourceAdjacencies != null) {
    for (    Relation sourceRel : sourceAdjacencies.getAll()) {
      if (validRelationTypes.contains(sourceRel.getRelationType())) {
        Relation destinationRel=findRelationByLocalId(destinationAdjacencies,sourceRel.getOrcsData().getLocalId());
        Relation introduceRelation=relationFactory.introduce(branch,sourceRel.getOrcsData());
        if (destinationRel != null) {
          destinationRel.setOrcsData(introduceRelation.getOrcsData());
          destinationRel.setDirty();
        }
      }
    }
  }
  String orderData=source.getOrderData();
  if (!orderData.isEmpty()) {
    destination.storeOrderData(OrderChange.Forced,source.getOrderData());
  }
}",0.8840311226380141
96925,"@Override public void setFocus(){
  if (focusWidget != null && !focusWidget.isDisposed()) {
    focusWidget.setFocus();
  }
}","@Override public void setFocus(){
  try {
    String limit=OseeInfo.getCachedValue(VIEW_PART_WAIT_LIMIT);
    int waitLimit=Strings.isNumeric(limit) ? Integer.valueOf(limit) : DEFAULT_WAIT;
    Thread.sleep(waitLimit);
    if (focusWidget != null && !focusWidget.isDisposed()) {
      focusWidget.setFocus();
    }
  }
 catch (  InterruptedException ex) {
  }
}",0.51440329218107
96926,"@Override public void widgetSelected(SelectionEvent e){
  if (selectOthers.contains(combo.getSelected())) {
    FilteredTreeDialog dialog=new FilteredTreeDialog(""String_Node_Str"",""String_Node_Str"",new ArrayTreeContentProvider(),new WorkPacakgeLabelProvider(),new StringNameSorter());
    dialog.setMultiSelect(false);
    if (combo.getSelected().equals(selectOtherActive)) {
      dialog.setInput(AtsClientService.get().getQueryService().createQuery(AtsArtifactTypes.WorkPackage).andActive(true).getItems());
    }
 else     if (combo.getSelected().equals(selectOther)) {
      dialog.setInput(AtsClientService.get().getQueryService().createQuery(AtsArtifactTypes.WorkPackage).getItems());
    }
    if (dialog.open() == 0) {
      IAtsWorkPackage selectedWorkPackage=dialog.getSelectedFirst();
      IAtsInsertionActivity insertionActivity=AtsClientService.get().getProgramService().getInsertionActivity(selectedWorkPackage);
      IAtsInsertion insertion=AtsClientService.get().getProgramService().getInsertion(insertionActivity);
      IAtsProgram program=AtsClientService.get().getProgramService().getProgram(insertion);
      programWidget.getWidget().setInput(Arrays.asList(AbstractXComboViewerSearchWidget.CLEAR,program));
      programWidget.getWidget().setSelected(Arrays.asList(program));
      insertionWidget.getWidget().setInput(Arrays.asList(AbstractXComboViewerSearchWidget.CLEAR,insertion));
      insertionWidget.getWidget().setSelected(Arrays.asList(insertion));
      insertionActivityWidget.getWidget().setInput(Arrays.asList(AbstractXComboViewerSearchWidget.CLEAR,insertionActivity));
      insertionActivityWidget.getWidget().setSelected(Arrays.asList(insertionActivity));
      combo.setSelected(Arrays.asList(selectedWorkPackage));
    }
  }
}","@Override public void widgetSelected(SelectionEvent e){
  if (selectOthers.contains(combo.getSelected())) {
    FilteredTreeDialog dialog=new FilteredTreeDialog(""String_Node_Str"",""String_Node_Str"",new ArrayTreeContentProvider(),new WorkPackageLabelProvider(),new StringNameSorter());
    dialog.setMultiSelect(false);
    if (combo.getSelected().equals(selectOtherActive)) {
      dialog.setInput(AtsClientService.get().getQueryService().createQuery(AtsArtifactTypes.WorkPackage).andActive(true).getItems());
    }
 else     if (combo.getSelected().equals(selectOther)) {
      dialog.setInput(AtsClientService.get().getQueryService().createQuery(AtsArtifactTypes.WorkPackage).getItems());
    }
    if (dialog.open() == 0) {
      IAtsWorkPackage selectedWorkPackage=dialog.getSelectedFirst();
      IAtsInsertionActivity insertionActivity=AtsClientService.get().getProgramService().getInsertionActivity(selectedWorkPackage);
      IAtsInsertion insertion=AtsClientService.get().getProgramService().getInsertion(insertionActivity);
      IAtsProgram program=AtsClientService.get().getProgramService().getProgram(insertion);
      programWidget.getWidget().setInput(Arrays.asList(AbstractXComboViewerSearchWidget.CLEAR,program));
      programWidget.getWidget().setSelected(Arrays.asList(program));
      insertionWidget.getWidget().setInput(Arrays.asList(AbstractXComboViewerSearchWidget.CLEAR,insertion));
      insertionWidget.getWidget().setSelected(Arrays.asList(insertion));
      insertionActivityWidget.getWidget().setInput(Arrays.asList(AbstractXComboViewerSearchWidget.CLEAR,insertionActivity));
      insertionActivityWidget.getWidget().setSelected(Arrays.asList(insertionActivity));
      combo.setSelected(Arrays.asList(selectedWorkPackage));
    }
  }
}",0.9994340690435768
96927,"@Override public void setup(XWidget widget){
  super.setup(widget);
  XComboViewer combo=getWidget();
  combo.addSelectionListener(new SelectionAdapter(){
    @Override public void widgetSelected(    SelectionEvent e){
      if (selectOthers.contains(combo.getSelected())) {
        FilteredTreeDialog dialog=new FilteredTreeDialog(""String_Node_Str"",""String_Node_Str"",new ArrayTreeContentProvider(),new WorkPacakgeLabelProvider(),new StringNameSorter());
        dialog.setMultiSelect(false);
        if (combo.getSelected().equals(selectOtherActive)) {
          dialog.setInput(AtsClientService.get().getQueryService().createQuery(AtsArtifactTypes.WorkPackage).andActive(true).getItems());
        }
 else         if (combo.getSelected().equals(selectOther)) {
          dialog.setInput(AtsClientService.get().getQueryService().createQuery(AtsArtifactTypes.WorkPackage).getItems());
        }
        if (dialog.open() == 0) {
          IAtsWorkPackage selectedWorkPackage=dialog.getSelectedFirst();
          IAtsInsertionActivity insertionActivity=AtsClientService.get().getProgramService().getInsertionActivity(selectedWorkPackage);
          IAtsInsertion insertion=AtsClientService.get().getProgramService().getInsertion(insertionActivity);
          IAtsProgram program=AtsClientService.get().getProgramService().getProgram(insertion);
          programWidget.getWidget().setInput(Arrays.asList(AbstractXComboViewerSearchWidget.CLEAR,program));
          programWidget.getWidget().setSelected(Arrays.asList(program));
          insertionWidget.getWidget().setInput(Arrays.asList(AbstractXComboViewerSearchWidget.CLEAR,insertion));
          insertionWidget.getWidget().setSelected(Arrays.asList(insertion));
          insertionActivityWidget.getWidget().setInput(Arrays.asList(AbstractXComboViewerSearchWidget.CLEAR,insertionActivity));
          insertionActivityWidget.getWidget().setSelected(Arrays.asList(insertionActivity));
          combo.setSelected(Arrays.asList(selectedWorkPackage));
        }
      }
    }
  }
);
}","@Override public void setup(XWidget widget){
  super.setup(widget);
  XComboViewer combo=getWidget();
  combo.addSelectionListener(new SelectionAdapter(){
    @Override public void widgetSelected(    SelectionEvent e){
      if (selectOthers.contains(combo.getSelected())) {
        FilteredTreeDialog dialog=new FilteredTreeDialog(""String_Node_Str"",""String_Node_Str"",new ArrayTreeContentProvider(),new WorkPackageLabelProvider(),new StringNameSorter());
        dialog.setMultiSelect(false);
        if (combo.getSelected().equals(selectOtherActive)) {
          dialog.setInput(AtsClientService.get().getQueryService().createQuery(AtsArtifactTypes.WorkPackage).andActive(true).getItems());
        }
 else         if (combo.getSelected().equals(selectOther)) {
          dialog.setInput(AtsClientService.get().getQueryService().createQuery(AtsArtifactTypes.WorkPackage).getItems());
        }
        if (dialog.open() == 0) {
          IAtsWorkPackage selectedWorkPackage=dialog.getSelectedFirst();
          IAtsInsertionActivity insertionActivity=AtsClientService.get().getProgramService().getInsertionActivity(selectedWorkPackage);
          IAtsInsertion insertion=AtsClientService.get().getProgramService().getInsertion(insertionActivity);
          IAtsProgram program=AtsClientService.get().getProgramService().getProgram(insertion);
          programWidget.getWidget().setInput(Arrays.asList(AbstractXComboViewerSearchWidget.CLEAR,program));
          programWidget.getWidget().setSelected(Arrays.asList(program));
          insertionWidget.getWidget().setInput(Arrays.asList(AbstractXComboViewerSearchWidget.CLEAR,insertion));
          insertionWidget.getWidget().setSelected(Arrays.asList(insertion));
          insertionActivityWidget.getWidget().setInput(Arrays.asList(AbstractXComboViewerSearchWidget.CLEAR,insertionActivity));
          insertionActivityWidget.getWidget().setSelected(Arrays.asList(insertionActivity));
          combo.setSelected(Arrays.asList(selectedWorkPackage));
        }
      }
    }
  }
);
}",0.9995085995085996
96928,"@Override public void run(){
  String useTitle=Strings.truncate(title,WorldEditor.TITLE_MAX_LENGTH);
  iWorldEditor.setTableTitle(useTitle,warning);
  worldXViewer.setReportingTitle(useTitle + ""String_Node_Str"" + DateUtil.getDateNow());
}","@Override public void run(){
  iWorldEditor.reSearch();
}",0.3593220338983051
96929,"@Override public void refreshActionHandler(){
  try {
    iWorldEditor.reSearch();
  }
 catch (  Exception ex) {
    OseeLog.log(Activator.class,OseeLevel.SEVERE_POPUP,ex);
  }
}","@Override public void refreshActionHandler(){
  try {
    Displays.ensureInDisplayThread(new Runnable(){
      @Override public void run(){
        iWorldEditor.reSearch();
      }
    }
);
  }
 catch (  Exception ex) {
    OseeLog.log(Activator.class,OseeLevel.SEVERE_POPUP,ex);
  }
}",0.7688984881209503
96930,"@Override public void renderAttribute(IAttributeType attributeType,Artifact artifact,PresentationType presentationType,Producer producer,AttributeElement attributeElement,String footer) throws OseeCoreException {
  WordMLProducer wordMl=(WordMLProducer)producer;
  if (attributeType.equals(CoreAttributeTypes.WordTemplateContent)) {
    Attribute<?> wordTempConAttr=artifact.getSoleAttribute(attributeType);
    String data=null;
    if (wordTempConAttr != null) {
      data=(String)wordTempConAttr.getValue();
    }
    if (attributeElement.getLabel().length() > 0) {
      wordMl.addParagraph(attributeElement.getLabel());
    }
    if (data != null) {
      data=WordUtil.reassignBinDataID(data);
      LinkType linkType=(LinkType)getOption(""String_Node_Str"");
      Set<String> unknownGuids=new HashSet<>();
      data=WordMlLinkHandler.link(linkType,artifact,data,unknownGuids);
      WordUiUtil.displayUnknownGuids(artifact,unknownGuids);
      data=WordUtil.reassignBookMarkID(data);
      if (presentationType == PresentationType.SPECIALIZED_EDIT) {
        data=removeSectionBreakParagraph(data);
        data=data.replaceAll(ReportConstants.ENTIRE_FTR + ReportConstants.FULL_PARA_END,""String_Node_Str"");
      }
      data=data.replaceAll(ReportConstants.ENTIRE_FTR,""String_Node_Str"");
      data=data.replaceAll(ReportConstants.NO_DATA_RIGHTS,""String_Node_Str"");
      data=data.concat(footer);
    }
    if (presentationType == PresentationType.SPECIALIZED_EDIT) {
      OseeLinkBuilder linkBuilder=new OseeLinkBuilder();
      wordMl.addEditParagraphNoEscape(linkBuilder.getStartEditImage(artifact.getGuid()));
      wordMl.addWordMl(data);
      wordMl.addEditParagraphNoEscape(linkBuilder.getEndEditImage(artifact.getGuid()));
    }
 else     if (data != null) {
      data=data.replaceAll(WordTemplateProcessor.PGNUMTYPE_START_1,""String_Node_Str"");
      wordMl.addWordMl(data);
    }
    wordMl.resetListValue();
  }
 else {
    super.renderAttribute(attributeType,artifact,PresentationType.SPECIALIZED_EDIT,wordMl,attributeElement,footer);
  }
}","@Override public void renderAttribute(IAttributeType attributeType,Artifact artifact,PresentationType presentationType,Producer producer,AttributeElement attributeElement,String footer) throws OseeCoreException {
  WordMLProducer wordMl=(WordMLProducer)producer;
  if (attributeType.equals(CoreAttributeTypes.WordTemplateContent)) {
    Attribute<?> wordTempConAttr=artifact.getSoleAttribute(attributeType);
    String data=null;
    if (wordTempConAttr != null) {
      data=(String)wordTempConAttr.getValue();
    }
    if (attributeElement.getLabel().length() > 0) {
      wordMl.addParagraph(attributeElement.getLabel());
    }
    if (data != null) {
      data=WordUtil.reassignBinDataID(data);
      LinkType linkType=(LinkType)getOption(""String_Node_Str"");
      Set<String> unknownGuids=new HashSet<>();
      data=WordMlLinkHandler.link(linkType,artifact,data,unknownGuids);
      WordUiUtil.displayUnknownGuids(artifact,unknownGuids);
      data=WordUtil.reassignBookMarkID(data);
      data=data.replaceAll(ReportConstants.ENTIRE_FTR,""String_Node_Str"");
      data=data.replaceAll(ReportConstants.NO_DATA_RIGHTS,""String_Node_Str"");
      int lastIndex=data.lastIndexOf(""String_Node_Str"");
      if (lastIndex != -1) {
        String temp=data.substring(lastIndex);
        temp=temp.replaceAll(""String_Node_Str"",""String_Node_Str"");
        data=data.substring(0,lastIndex) + temp;
      }
      data=data.concat(footer);
    }
    if (presentationType == PresentationType.SPECIALIZED_EDIT) {
      OseeLinkBuilder linkBuilder=new OseeLinkBuilder();
      wordMl.addEditParagraphNoEscape(linkBuilder.getStartEditImage(artifact.getGuid()));
      wordMl.addWordMl(data);
      wordMl.addEditParagraphNoEscape(linkBuilder.getEndEditImage(artifact.getGuid()));
    }
 else     if (data != null) {
      data=data.replaceAll(WordTemplateProcessor.PGNUMTYPE_START_1,""String_Node_Str"");
      wordMl.addWordMl(data);
    }
    wordMl.resetListValue();
  }
 else {
    super.renderAttribute(attributeType,artifact,PresentationType.SPECIALIZED_EDIT,wordMl,attributeElement,footer);
  }
}",0.5690900337024555
96931,"public ShowOpenWorkflowsByReviewType(ShowOpenWorkflowsByReviewType showOpenWorkflowsByArtifactType){
  super(showOpenWorkflowsByArtifactType);
  this.showFinished=showOpenWorkflowsByArtifactType.showFinished;
  this.showWorkflow=showOpenWorkflowsByArtifactType.showWorkflow;
}","public ShowOpenWorkflowsByReviewType(ShowOpenWorkflowsByReviewType showOpenWorkflowsByArtifactType){
  super(showOpenWorkflowsByArtifactType);
  this.showFinished=showOpenWorkflowsByArtifactType.showFinished;
  this.showWorkflow=showOpenWorkflowsByArtifactType.showWorkflow;
  this.workItemType=showOpenWorkflowsByArtifactType.workItemType;
}",0.8932038834951457
96932,"@Override public void renderAttribute(IAttributeType attributeType,Artifact artifact,PresentationType presentationType,Producer producer,AttributeElement attributeElement,String footer) throws OseeCoreException {
  WordMLProducer wordMl=(WordMLProducer)producer;
  if (attributeType.equals(CoreAttributeTypes.WordTemplateContent)) {
    Attribute<?> wordTempConAttr=artifact.getSoleAttribute(attributeType);
    String data=null;
    if (wordTempConAttr != null) {
      data=(String)wordTempConAttr.getValue();
    }
    if (attributeElement.getLabel().length() > 0) {
      wordMl.addParagraph(attributeElement.getLabel());
    }
    if (data != null) {
      data=WordUtil.reassignBinDataID(data);
      LinkType linkType=(LinkType)getOption(""String_Node_Str"");
      Set<String> unknownGuids=new HashSet<>();
      data=WordMlLinkHandler.link(linkType,artifact,data,unknownGuids);
      WordUiUtil.displayUnknownGuids(artifact,unknownGuids);
      data=WordUtil.reassignBookMarkID(data);
      data=data.replaceAll(ReportConstants.ENTIRE_FTR,""String_Node_Str"");
      data=data.replaceAll(ReportConstants.NO_DATA_RIGHTS,""String_Node_Str"");
      int lastIndex=data.lastIndexOf(""String_Node_Str"");
      if (lastIndex != -1) {
        String temp=data.substring(lastIndex);
        temp=temp.replaceAll(""String_Node_Str"",""String_Node_Str"");
        data=data.substring(0,lastIndex) + temp;
      }
      data=data.concat(footer);
    }
    if (presentationType == PresentationType.SPECIALIZED_EDIT) {
      OseeLinkBuilder linkBuilder=new OseeLinkBuilder();
      wordMl.addEditParagraphNoEscape(linkBuilder.getStartEditImage(artifact.getGuid()));
      wordMl.addWordMl(data);
      wordMl.addEditParagraphNoEscape(linkBuilder.getEndEditImage(artifact.getGuid()));
    }
 else     if (data != null) {
      data=data.replaceAll(WordTemplateProcessor.PGNUMTYPE_START_1,""String_Node_Str"");
      wordMl.addWordMl(data);
    }
    wordMl.resetListValue();
  }
 else {
    super.renderAttribute(attributeType,artifact,PresentationType.SPECIALIZED_EDIT,wordMl,attributeElement,footer);
  }
}","@Override public void renderAttribute(IAttributeType attributeType,Artifact artifact,PresentationType presentationType,Producer producer,AttributeElement attributeElement,String footer) throws OseeCoreException {
  WordMLProducer wordMl=(WordMLProducer)producer;
  if (attributeType.equals(CoreAttributeTypes.WordTemplateContent)) {
    Attribute<?> wordTempConAttr=artifact.getSoleAttribute(attributeType);
    String data=null;
    if (wordTempConAttr != null) {
      data=(String)wordTempConAttr.getValue();
    }
    if (attributeElement.getLabel().length() > 0) {
      wordMl.addParagraph(attributeElement.getLabel());
    }
    if (data != null) {
      data=WordUtil.reassignBinDataID(data);
      LinkType linkType=(LinkType)getOption(""String_Node_Str"");
      Set<String> unknownGuids=new HashSet<>();
      data=WordMlLinkHandler.link(linkType,artifact,data,unknownGuids);
      WordUiUtil.displayUnknownGuids(artifact,unknownGuids);
      data=WordUtil.reassignBookMarkID(data);
      data=data.replaceAll(ReportConstants.ENTIRE_FTR_EXTRA_PARA,""String_Node_Str"");
      data=data.replaceAll(ReportConstants.ENTIRE_FTR,""String_Node_Str"");
      data=data.replaceAll(ReportConstants.NO_DATA_RIGHTS,""String_Node_Str"");
      int lastIndex=data.lastIndexOf(""String_Node_Str"");
      if (lastIndex != -1) {
        String temp=data.substring(lastIndex);
        temp=temp.replaceAll(""String_Node_Str"",""String_Node_Str"");
        data=data.substring(0,lastIndex) + temp;
      }
      data=data.concat(footer);
    }
    if (presentationType == PresentationType.SPECIALIZED_EDIT) {
      OseeLinkBuilder linkBuilder=new OseeLinkBuilder();
      wordMl.addEditParagraphNoEscape(linkBuilder.getStartEditImage(artifact.getGuid()));
      wordMl.addWordMl(data);
      wordMl.addEditParagraphNoEscape(linkBuilder.getEndEditImage(artifact.getGuid()));
    }
 else     if (data != null) {
      data=data.replaceAll(WordTemplateProcessor.PGNUMTYPE_START_1,""String_Node_Str"");
      wordMl.addWordMl(data);
    }
    wordMl.resetListValue();
  }
 else {
    super.renderAttribute(attributeType,artifact,PresentationType.SPECIALIZED_EDIT,wordMl,attributeElement,footer);
  }
}",0.9800703399765534
96933,"public void explore(Artifact artifact) throws OseeCoreException {
  if (artifact == null) {
    throw new IllegalArgumentException(""String_Node_Str"");
  }
  setPartName(""String_Node_Str"" + artifact.getBranchToken().getShortName());
  if (branch != null && artifact.getBranch().equals(branch)) {
    explore(Arrays.asList(artifact));
    return;
  }
  explorerRoot=artifact;
  branch=artifact.getBranchToken();
  if (dragAndDropWorker != null) {
    dragAndDropWorker.updateBranch(branch);
  }
  refreshBranchWarning();
  initializeSelectionBox();
  if (treeViewer != null) {
    Object objects[]=treeViewer.getExpandedElements();
    treeViewer.setInput(explorerRoot);
    artifactExplorerMenu.setupPopupMenu();
    artifactExplorerToolbar.updateEnablement();
    treeViewer.setExpandedElements(objects);
  }
}","public void explore(Artifact artifact) throws OseeCoreException {
  if (artifact == null) {
    throw new IllegalArgumentException(""String_Node_Str"");
  }
  setPartName(""String_Node_Str"" + artifact.getBranchToken().getShortName());
  if (branch != null && !artifact.getBranch().equals(branch)) {
    explore(Arrays.asList(artifact));
    return;
  }
  explorerRoot=artifact;
  branch=artifact.getBranchToken();
  if (dragAndDropWorker != null) {
    dragAndDropWorker.updateBranch(branch);
  }
  refreshBranchWarning();
  initializeSelectionBox();
  if (treeViewer != null) {
    Object objects[]=treeViewer.getExpandedElements();
    treeViewer.setInput(explorerRoot);
    artifactExplorerMenu.setupPopupMenu();
    artifactExplorerToolbar.updateEnablement();
    treeViewer.setExpandedElements(objects);
  }
}",0.999383096853794
96934,"public AtsSearchData createSearchData(String namespace,String searchName);","AtsSearchData createSearchData(String namespace,String searchName);",0.950354609929078
96935,"public AtsSearchData fromJson(String namespace,String json);","AtsSearchData fromJson(String namespace,String json);",0.9380530973451328
96936,"@Override public IAtsQueryService getQueryService(){
  if (atsQueryService == null) {
    atsQueryService=new AtsQueryServiceIimpl(this);
  }
  return atsQueryService;
}","@Override public IAtsQueryService getQueryService(){
  if (atsQueryService == null) {
    atsQueryService=new AtsQueryServiceImpl(this);
  }
  return atsQueryService;
}",0.9970326409495548
96937,"private List<String> getSupportedNamespaces(){
  return AtsSearchUtil.ATS_DEFAULT_SEARCH_NAMESPACES;
}","@Override public List<String> getSupportedNamespaces(){
  return AtsSearchUtil.ATS_DEFAULT_SEARCH_NAMESPACES;
}",0.92018779342723
96938,"@Override public AtsSearchData fromJson(String namespace,String jsonValue){
  if (getSupportedNamespaces().contains(namespace)) {
    try {
      return AtsJsonFactory.getMapper().readValue(jsonValue,AtsSearchData.class);
    }
 catch (    Exception ex) {
      throw new OseeArgumentException(ex,""String_Node_Str"",jsonValue);
    }
  }
  return null;
}","@Override public AtsSearchData fromJson(String namespace,String jsonValue){
  try {
    return AtsJsonFactory.getMapper().readValue(jsonValue,AtsSearchData.class);
  }
 catch (  Exception ex) {
    throw new OseeArgumentException(ex,""String_Node_Str"",jsonValue);
  }
}",0.8534621578099839
96939,"public static void refreshTopAtsSearchItem(){
  XNavigateItem searchesItem=NavigateView.getNavigateView().getItem(ATS_SEARCH_NAVIGATE_VIEW_ITEM,true);
  searchesItem.getChildren().clear();
  populateSavedSearchesItem(searchesItem);
  NavigateView.getNavigateView().refresh(searchesItem);
}","public static void refreshTopAtsSearchItem(){
  XNavigateItem searchesItem=NavigateView.getNavigateView().getItem(ATS_SEARCH_NAVIGATE_VIEW_ITEM,true);
  if (searchesItem != null) {
    searchesItem.getChildren().clear();
    populateSavedSearchesItem(searchesItem);
    NavigateView.getNavigateView().refresh(searchesItem);
  }
}",0.9352750809061487
96940,"protected void createToolBar(){
  IToolBarManager toolbarManager=getViewSite().getActionBars().getToolBarManager();
  toolbarManager.add(new MyWorldAction());
  toolbarManager.add(new MyFavoritesAction());
  toolbarManager.add(new CollapseAllAction(xNavComp.getFilteredTree().getViewer()));
  toolbarManager.add(new ExpandAllAction(xNavComp.getFilteredTree().getViewer()));
  toolbarManager.add(new OpenChangeReportByIdAction());
  toolbarManager.add(new OpenWorldByIdAction());
  toolbarManager.add(new OpenWorkflowByIdAction());
  toolbarManager.add(new NewAction());
  getViewSite().getActionBars().updateActionBars();
  IActionBars bars=getViewSite().getActionBars();
  IMenuManager mm=bars.getMenuManager();
  mm.add(new NewAction());
  mm.add(new NewGoal());
  toolbarManager.update(true);
}","protected void createToolBar(){
  IToolBarManager toolbarManager=getViewSite().getActionBars().getToolBarManager();
  toolbarManager.add(new RefreshAction(this));
  toolbarManager.add(new MyWorldAction());
  toolbarManager.add(new MyFavoritesAction());
  toolbarManager.add(new CollapseAllAction(xNavComp.getFilteredTree().getViewer()));
  toolbarManager.add(new ExpandAllAction(xNavComp.getFilteredTree().getViewer()));
  toolbarManager.add(new OpenChangeReportByIdAction());
  toolbarManager.add(new OpenWorldByIdAction());
  toolbarManager.add(new OpenWorkflowByIdAction());
  toolbarManager.add(new NewAction());
  getViewSite().getActionBars().updateActionBars();
  IActionBars bars=getViewSite().getActionBars();
  IMenuManager mm=bars.getMenuManager();
  mm.add(new NewAction());
  mm.add(new NewGoal());
  toolbarManager.update(true);
}",0.971358927483242
96941,"@Override public IAtsProgram getProgram(IAtsTeamDefinition teamDef){
  IAtsProgram program=null;
  Object object=services.getAttributeResolver().getSoleAttributeValue(teamDef,AtsAttributeTypes.ProgramUuid,null);
  if (object instanceof ArtifactId) {
    program=services.getConfigItemFactory().getProgram((ArtifactId)object);
  }
 else   if (object instanceof String && Strings.isNumeric((String)object)) {
    program=services.getProgramService().getProgram(Long.parseLong((String)object));
  }
  if (program == null) {
    IAtsTeamDefinition topTeamDef=teamDef.getTeamDefinitionHoldingVersions();
    if (!teamDef.equals(topTeamDef)) {
      program=getProgram(teamDef.getParentTeamDef());
    }
  }
  if (program == null) {
    program=(IAtsProgram)services.getQueryService().createQuery(AtsArtifactTypes.Program).andAttr(AtsAttributeTypes.TeamDefinition,services.getStoreService().getGuid(teamDef)).getResults().getOneOrNull();
  }
  return program;
}","@Override public IAtsProgram getProgram(IAtsTeamDefinition teamDef){
  IAtsProgram program=null;
  Object object=services.getAttributeResolver().getSoleAttributeValue(teamDef,AtsAttributeTypes.ProgramUuid,null);
  if (object instanceof ArtifactId) {
    program=services.getConfigItemFactory().getProgram((ArtifactId)object);
  }
 else   if (object instanceof String && Strings.isNumeric((String)object)) {
    program=services.getProgramService().getProgram(Long.parseLong((String)object));
  }
  if (program == null) {
    IAtsTeamDefinition topTeamDef=teamDef.getTeamDefinitionHoldingVersions();
    if (topTeamDef != null && !teamDef.equals(topTeamDef)) {
      program=getProgram(teamDef.getParentTeamDef());
    }
  }
  if (program == null) {
    program=(IAtsProgram)services.getQueryService().createQuery(AtsArtifactTypes.Program).andAttr(AtsAttributeTypes.TeamDefinition,services.getStoreService().getGuid(teamDef)).getResults().getOneOrNull();
  }
  return program;
}",0.9886128364389234
96942,"@DELETE @Path(""String_Node_Str"") @Consumes({MediaType.APPLICATION_JSON}) Response deleteWorkPackageItems(@PathParam(""String_Node_Str"") long workPackageId,JaxWorkPackageData workPackageData);","@DELETE @Path(""String_Node_Str"") @Consumes({MediaType.APPLICATION_JSON}) Response deleteWorkPackageItems(JaxWorkPackageData workPackageData);",0.851963746223565
96943,"@Test public void testSetRemoveWorkPackageItems(){
  Collection<IAtsWorkItem> workItems=workPackageEp.getWorkItems(DemoArtifactToken.SAW_Code_Team_WorkPackage_01.getUuid());
  assertEquals(2,workItems.size());
  IAtsWorkItem workItem=workItems.iterator().next();
  JaxWorkPackageData data=new JaxWorkPackageData();
  data.setAsUserId(AtsClientService.get().getUserService().getCurrentUserId());
  data.getWorkItemUuids().add(workItem.getUuid());
  workPackageEp.deleteWorkPackageItems(DemoArtifactToken.SAW_Code_Team_WorkPackage_01.getUuid(),data);
  assertEquals(1,workPackageEp.getWorkItems(DemoArtifactToken.SAW_Code_Team_WorkPackage_01.getUuid()).size());
  workPackageEp.setWorkPackage(DemoArtifactToken.SAW_Code_Team_WorkPackage_01.getUuid(),data);
  assertEquals(2,workPackageEp.getWorkItems(DemoArtifactToken.SAW_Code_Team_WorkPackage_01.getUuid()).size());
}","@Test public void testSetRemoveWorkPackageItems(){
  Collection<IAtsWorkItem> workItems=workPackageEp.getWorkItems(DemoArtifactToken.SAW_Code_Team_WorkPackage_01.getUuid());
  assertEquals(2,workItems.size());
  IAtsWorkItem workItem=workItems.iterator().next();
  JaxWorkPackageData data=new JaxWorkPackageData();
  data.setAsUserId(AtsClientService.get().getUserService().getCurrentUserId());
  data.getWorkItemUuids().add(workItem.getUuid());
  workPackageEp.deleteWorkPackageItems(data);
  assertEquals(1,workPackageEp.getWorkItems(DemoArtifactToken.SAW_Code_Team_WorkPackage_01.getUuid()).size());
  workPackageEp.setWorkPackage(DemoArtifactToken.SAW_Code_Team_WorkPackage_01.getUuid(),data);
  assertEquals(2,workPackageEp.getWorkItems(DemoArtifactToken.SAW_Code_Team_WorkPackage_01.getUuid()).size());
}",0.7871198568872988
96944,"private void changeWorkPackage(IAtsWorkPackage workPackage,Collection<IAtsWorkItem> workItems,boolean remove){
  JaxWorkPackageData data=new JaxWorkPackageData();
  data.setAsUserId(services.getUserService().getCurrentUserId());
  for (  IAtsWorkItem workItem : workItems) {
    data.getWorkItemUuids().add(workItem.getUuid());
  }
  AtsWorkPackageEndpointApi workPackageEp=AtsClientService.getWorkPackageEndpoint();
  if (remove) {
    workPackageEp.deleteWorkPackageItems(workPackage.getUuid(),data);
  }
 else {
    workPackageEp.setWorkPackage(workPackage.getUuid(),data);
  }
  TopicEvent event=new TopicEvent(AtsTopicEvent.WORK_ITEM_MODIFIED,AtsTopicEvent.WORK_ITEM_UUDS_KEY,AtsObjects.toUuidsString(""String_Node_Str"",workItems));
  OseeEventManager.kickTopicEvent(getClass(),event);
  services.getStoreService().reload(workItems);
}","private void changeWorkPackage(IAtsWorkPackage workPackage,Collection<IAtsWorkItem> workItems,boolean remove){
  JaxWorkPackageData data=new JaxWorkPackageData();
  data.setAsUserId(services.getUserService().getCurrentUserId());
  for (  IAtsWorkItem workItem : workItems) {
    data.getWorkItemUuids().add(workItem.getUuid());
  }
  AtsWorkPackageEndpointApi workPackageEp=AtsClientService.getWorkPackageEndpoint();
  if (remove) {
    workPackageEp.deleteWorkPackageItems(data);
  }
 else {
    workPackageEp.setWorkPackage(workPackage.getUuid(),data);
  }
  TopicEvent event=new TopicEvent(AtsTopicEvent.WORK_ITEM_MODIFIED,AtsTopicEvent.WORK_ITEM_UUDS_KEY,AtsObjects.toUuidsString(""String_Node_Str"",workItems));
  OseeEventManager.kickTopicEvent(getClass(),event);
  services.getStoreService().reload(workItems);
}",0.9867149758454108
96945,"public void start(){
  IResourceRegistry registry=new ResourceRegistry();
  OseeTemplateTokens.register(registry);
  ConvertCreateUpdateAtsConfig conversion=new ConvertCreateUpdateAtsConfig(atsServer);
  atsServer.addAtsDatabaseConversion(conversion);
  singletons.add(new VersionResource(atsServer));
  singletons.add(new TeamResource(atsServer));
  singletons.add(new ActionableItemResource(atsServer));
  singletons.add(new CountryResource(atsServer));
  singletons.add(new ProgramResource(atsServer));
  singletons.add(new InsertionResource(atsServer));
  singletons.add(new InsertionActivityResource(atsServer));
  singletons.add(new AtsActionEndpointImpl(atsServer,orcsApi));
  singletons.add(new AtsRuleEndpointImpl(atsServer));
  singletons.add(new StateResource(atsServer));
  singletons.add(new ConvertResource(atsServer));
  singletons.add(new CpaResource(orcsApi,atsServer,cpaRegistry));
  singletons.add(new UserResource(atsServer.getUserService()));
  singletons.add(new WorldResource(atsServer));
  singletons.add(new AgileEndpointImpl(atsServer,registry));
  singletons.add(new CountryEndpointImpl(atsServer));
  singletons.add(new ProgramEndpointImpl(atsServer));
  singletons.add(new InsertionEndpointImpl(atsServer));
  singletons.add(new InsertionActivityEndpointImpl(atsServer));
  singletons.add(new AtsConfigEndpointImpl(atsServer,orcsApi,logger));
  singletons.add(new AtsTaskEndpointImpl(atsServer));
  singletons.add(new AtsNotifyEndpointImpl(atsServer));
  singletons.add(new AtsWorkPackageEndpointImpl(atsServer));
  singletons.add(new ActionUiResource(atsServer,logger));
  singletons.add(new ReportResource(orcsApi,atsServer));
  logger.warn(""String_Node_Str"",System.getProperty(""String_Node_Str""));
}","public void start(){
  IResourceRegistry registry=new ResourceRegistry();
  OseeTemplateTokens.register(registry);
  ConvertCreateUpdateAtsConfig conversion=new ConvertCreateUpdateAtsConfig(atsServer);
  atsServer.addAtsDatabaseConversion(conversion);
  singletons.add(new VersionResource(atsServer));
  singletons.add(new TeamResource(atsServer));
  singletons.add(new ActionableItemResource(atsServer));
  singletons.add(new CountryResource(atsServer));
  singletons.add(new ProgramResource(atsServer));
  singletons.add(new InsertionResource(atsServer));
  singletons.add(new InsertionActivityResource(atsServer));
  singletons.add(new AtsActionEndpointImpl(atsServer,orcsApi));
  singletons.add(new AtsRuleEndpointImpl(atsServer));
  singletons.add(new StateResource(atsServer));
  singletons.add(new ConvertResource(atsServer));
  singletons.add(new CpaResource(orcsApi,atsServer,cpaRegistry));
  singletons.add(new UserResource(atsServer.getUserService()));
  singletons.add(new WorldResource(atsServer));
  singletons.add(new AgileEndpointImpl(atsServer,registry));
  singletons.add(new CountryEndpointImpl(atsServer));
  singletons.add(new ProgramEndpointImpl(atsServer));
  singletons.add(new InsertionEndpointImpl(atsServer));
  singletons.add(new InsertionActivityEndpointImpl(atsServer));
  singletons.add(new AtsConfigEndpointImpl(atsServer,orcsApi,logger));
  singletons.add(new AtsTaskEndpointImpl(atsServer));
  singletons.add(new AtsNotifyEndpointImpl(atsServer));
  singletons.add(new AtsWorkPackageEndpointImpl(atsServer,logger));
  singletons.add(new ActionUiResource(atsServer,logger));
  singletons.add(new ReportResource(orcsApi,atsServer));
  logger.warn(""String_Node_Str"",System.getProperty(""String_Node_Str""));
}",0.9979821274142404
96946,"@DELETE @Path(""String_Node_Str"") @Consumes({MediaType.APPLICATION_JSON}) @Override public Response deleteWorkPackageItems(@PathParam(""String_Node_Str"") long workPackageId,JaxWorkPackageData workPackageData){
  IAtsUser asUser=atsServer.getUserService().getUserById(workPackageData.getAsUserId());
  if (asUser == null) {
    throw new OseeArgumentException(""String_Node_Str"",workPackageData.getAsUserId());
  }
  IAtsChangeSet changes=atsServer.getStoreService().createAtsChangeSet(""String_Node_Str"",asUser);
  for (  Long workItemUuid : workPackageData.getWorkItemUuids()) {
    IAtsWorkItem workItem=atsServer.getQueryService().createQuery(WorkItemType.WorkItem).andUuids(workItemUuid).getResults().getAtMostOneOrNull();
    if (workItem == null) {
      throw new OseeArgumentException(""String_Node_Str"",workItemUuid);
    }
    if (atsServer.getAttributeResolver().getSoleAttributeValue(workItem,AtsAttributeTypes.WorkPackageGuid,null) != null) {
      changes.deleteAttributes(workItem,AtsAttributeTypes.WorkPackageGuid);
    }
  }
  if (!changes.isEmpty()) {
    changes.execute();
  }
  return Response.ok().build();
}","@DELETE @Path(""String_Node_Str"") @Consumes({MediaType.APPLICATION_JSON}) @Override public Response deleteWorkPackageItems(JaxWorkPackageData workPackageData){
  IAtsUser asUser=atsServer.getUserService().getUserById(workPackageData.getAsUserId());
  if (asUser == null) {
    throw new OseeArgumentException(""String_Node_Str"",workPackageData.getAsUserId());
  }
  IAtsChangeSet changes=atsServer.getStoreService().createAtsChangeSet(""String_Node_Str"",asUser);
  for (  Long workItemUuid : workPackageData.getWorkItemUuids()) {
    IAtsWorkItem workItem=atsServer.getQueryService().createQuery(WorkItemType.WorkItem).andUuids(workItemUuid).getResults().getAtMostOneOrNull();
    if (workItem == null) {
      throw new OseeArgumentException(""String_Node_Str"",workItemUuid);
    }
    if (atsServer.getAttributeResolver().getSoleAttributeValue(workItem,AtsAttributeTypes.WorkPackageGuid,null) != null) {
      changes.deleteAttributes(workItem,AtsAttributeTypes.WorkPackageGuid);
    }
  }
  if (!changes.isEmpty()) {
    changes.execute();
  }
  return Response.ok().build();
}",0.9777373920945024
96947,"public AtsWorkPackageEndpointImpl(IAtsServer atsServer){
  this.atsServer=atsServer;
  gson=new GsonBuilder().create();
}","public AtsWorkPackageEndpointImpl(IAtsServer atsServer,Log logger){
  this.atsServer=atsServer;
  this.logger=logger;
  gson=new GsonBuilder().create();
}",0.88
96948,"@PUT @Path(""String_Node_Str"") @Consumes({MediaType.APPLICATION_JSON}) @Override public Response setWorkPackage(@PathParam(""String_Node_Str"") long workPackageId,JaxWorkPackageData workPackageData){
  ArtifactReadable workPackageArt=atsServer.getArtifact(workPackageId);
  if (workPackageArt == null) {
    throw new OseeArgumentException(""String_Node_Str"",workPackageId);
  }
  IAtsUser asUser=atsServer.getUserService().getUserById(workPackageData.getAsUserId());
  if (asUser == null) {
    throw new OseeArgumentException(""String_Node_Str"",workPackageData.getAsUserId());
  }
  IAtsChangeSet changes=atsServer.getStoreService().createAtsChangeSet(""String_Node_Str"",asUser);
  for (  Long workItemUuid : workPackageData.getWorkItemUuids()) {
    IAtsWorkItem workItem=atsServer.getQueryService().createQuery(WorkItemType.WorkItem).andUuids(workItemUuid).getResults().getAtMostOneOrNull();
    if (workItem == null) {
      throw new OseeArgumentException(""String_Node_Str"",workItemUuid);
    }
    if (!workItem.isTask() && !workItem.isTeamWorkflow()) {
      throw new OseeArgumentException(""String_Node_Str"",workItem.getArtifactTypeName());
    }
    changes.setSoleAttributeValue(workItem,AtsAttributeTypes.WorkPackageGuid,workPackageArt.getGuid());
    autoAddWorkItemToGoalColorTeamGoals(getColorTeams(),workPackageArt,workPackageId,workItem,changes);
  }
  if (!changes.isEmpty()) {
    changes.execute();
  }
  return Response.ok().build();
}","@PUT @Path(""String_Node_Str"") @Consumes({MediaType.APPLICATION_JSON}) @Override public Response setWorkPackage(@PathParam(""String_Node_Str"") long workPackageId,JaxWorkPackageData workPackageData){
  ArtifactReadable workPackageArt=atsServer.getArtifact(workPackageId);
  if (workPackageArt == null) {
    throw new OseeArgumentException(""String_Node_Str"",workPackageId);
  }
  IAtsUser asUser=atsServer.getUserService().getUserById(workPackageData.getAsUserId());
  if (asUser == null) {
    throw new OseeArgumentException(""String_Node_Str"",workPackageData.getAsUserId());
  }
  IAtsChangeSet changes=atsServer.getStoreService().createAtsChangeSet(""String_Node_Str"",asUser);
  for (  Long workItemUuid : workPackageData.getWorkItemUuids()) {
    IAtsWorkItem workItem=atsServer.getQueryService().createQuery(WorkItemType.WorkItem).andUuids(workItemUuid).getResults().getAtMostOneOrNull();
    if (workItem == null) {
      throw new OseeArgumentException(""String_Node_Str"",workItemUuid);
    }
    if (!workItem.isTask() && !workItem.isTeamWorkflow()) {
      throw new OseeArgumentException(""String_Node_Str"",workItem.getArtifactTypeName());
    }
    changes.setSoleAttributeValue(workItem,AtsAttributeTypes.WorkPackageGuid,workPackageArt.getGuid());
    autoAddWorkItemToColorTeamGoals(getColorTeams(),workPackageArt,workPackageId,workItem,changes);
  }
  if (!changes.isEmpty()) {
    changes.execute();
  }
  return Response.ok().build();
}",0.988950276243094
96949,"private ColorTeams getColorTeams(){
  String colorTeamStr=atsServer.getConfigValue(COLOR_TEAM_KEY);
  ColorTeams teams=null;
  if (Strings.isValid(colorTeamStr)) {
    teams=gson.fromJson(colorTeamStr,ColorTeams.class);
  }
 else {
    teams=new ColorTeams();
  }
  return teams;
}","@Override @GET @Path(""String_Node_Str"") @Produces({MediaType.APPLICATION_JSON}) public ColorTeams getColorTeams(){
  String colorTeamStr=atsServer.getConfigValue(COLOR_TEAM_KEY);
  ColorTeams teams=null;
  if (Strings.isValid(colorTeamStr)) {
    teams=gson.fromJson(colorTeamStr,ColorTeams.class);
  }
 else {
    teams=new ColorTeams();
  }
  return teams;
}",0.858034321372855
96950,"private void validateActionAtEnd(Artifact actionArt) throws OseeCoreException {
  resultData.log(""String_Node_Str"");
  if (!OseeEventManager.isEventManagerConnected()) {
    resultData.error(""String_Node_Str"");
    return;
  }
  resultData.log(""String_Node_Str"");
  TeamWorkFlowArtifact teamArt=ActionManager.getFirstTeam(actionArt);
  testEquals(""String_Node_Str"",""String_Node_Str"",teamArt.getSoleAttributeValue(AtsAttributeTypes.Description,null));
  testEquals(""String_Node_Str"",ChangeType.Support,ChangeTypeUtil.getChangeType(teamArt));
  testEquals(""String_Node_Str"",""String_Node_Str"",teamArt.getSoleAttributeValue(AtsAttributeTypes.PriorityType,null));
  testEquals(""String_Node_Str"",""String_Node_Str"",String.valueOf(teamArt.getSoleAttributeValue(AtsAttributeTypes.ValidationRequired,null)));
  IAtsVersion verArt=AtsClientService.get().getVersionService().getTargetedVersion(teamArt);
  String expectedTargetedVersion;
  if (verArt != null) {
    expectedTargetedVersion=verArt.toString();
  }
 else {
    expectedTargetedVersion=""String_Node_Str"";
  }
  testEquals(""String_Node_Str"",expectedTargetedVersion,""String_Node_Str"");
  testEquals(""String_Node_Str"",TeamState.Analyze.getName(),teamArt.getStateMgr().getCurrentStateName());
}","private void validateActionAtEnd(Artifact actionArt) throws OseeCoreException {
  resultData.log(""String_Node_Str"");
  if (!OseeEventManager.isEventManagerConnected()) {
    resultData.error(""String_Node_Str"");
    return;
  }
  resultData.log(""String_Node_Str"");
  TeamWorkFlowArtifact teamArt=ActionManager.getFirstTeam(actionArt);
  testEquals(""String_Node_Str"",""String_Node_Str"",teamArt.getSoleAttributeValue(AtsAttributeTypes.Description,null));
  testEquals(""String_Node_Str"",ChangeType.Support,ChangeTypeUtil.getChangeType(teamArt));
  testEquals(""String_Node_Str"",""String_Node_Str"",teamArt.getSoleAttributeValue(AtsAttributeTypes.PriorityType,null));
  testEquals(""String_Node_Str"",false,teamArt.getSoleAttributeValue(AtsAttributeTypes.ValidationRequired,null));
  IAtsVersion verArt=AtsClientService.get().getVersionService().getTargetedVersion(teamArt);
  String expectedTargetedVersion;
  if (verArt != null) {
    expectedTargetedVersion=verArt.toString();
  }
 else {
    expectedTargetedVersion=""String_Node_Str"";
  }
  testEquals(""String_Node_Str"",expectedTargetedVersion,""String_Node_Str"");
  testEquals(""String_Node_Str"",TeamState.Analyze.getName(),teamArt.getStateMgr().getCurrentStateName());
}",0.9845150774246128
96951,"public void explore(Artifact artifact) throws OseeCoreException {
  if (artifact == null) {
    throw new IllegalArgumentException(""String_Node_Str"");
  }
  setPartName(""String_Node_Str"" + artifact.getBranchToken().getShortName());
  if (branch != null && branch != artifact.getBranch()) {
    explore(Arrays.asList(artifact));
    return;
  }
  explorerRoot=artifact;
  branch=artifact.getBranchToken();
  if (dragAndDropWorker != null) {
    dragAndDropWorker.updateBranch(branch);
  }
  refreshBranchWarning();
  initializeSelectionBox();
  if (treeViewer != null) {
    Object objects[]=treeViewer.getExpandedElements();
    treeViewer.setInput(explorerRoot);
    artifactExplorerMenu.setupPopupMenu();
    artifactExplorerToolbar.updateEnablement();
    treeViewer.setExpandedElements(objects);
  }
}","public void explore(Artifact artifact) throws OseeCoreException {
  if (artifact == null) {
    throw new IllegalArgumentException(""String_Node_Str"");
  }
  setPartName(""String_Node_Str"" + artifact.getBranchToken().getShortName());
  if (branch != null && artifact.getBranch().equals(branch)) {
    explore(Arrays.asList(artifact));
    return;
  }
  explorerRoot=artifact;
  branch=artifact.getBranchToken();
  if (dragAndDropWorker != null) {
    dragAndDropWorker.updateBranch(branch);
  }
  refreshBranchWarning();
  initializeSelectionBox();
  if (treeViewer != null) {
    Object objects[]=treeViewer.getExpandedElements();
    treeViewer.setInput(explorerRoot);
    artifactExplorerMenu.setupPopupMenu();
    artifactExplorerToolbar.updateEnablement();
    treeViewer.setExpandedElements(objects);
  }
}",0.9845201238390092
96952,"public Artifact getStored() throws OseeCoreException {
  Artifact stored=null;
  Integer uuid=artifact.getSoleAttributeValue(attributeType,0);
  if (uuid > 0) {
    stored=ArtifactQuery.getArtifactFromId(uuid,artifact.getBranch());
  }
  return stored;
}","public Artifact getStored() throws OseeCoreException {
  Artifact stored=null;
  if (artifact != null) {
    Integer uuid=artifact.getSoleAttributeValue(attributeType,0);
    if (uuid > 0) {
      stored=ArtifactQuery.getArtifactFromId(uuid,artifact.getBranch());
    }
  }
  return stored;
}",0.8754578754578755
96953,"@Override public Result isDirty(){
  if (isEditable()) {
    try {
      Artifact storedArt=getStored();
      Artifact widgetArt=getSelection();
      if (!storedArt.equals(widgetArt)) {
        return new Result(true,getAttributeType() + ""String_Node_Str"");
      }
    }
 catch (    OseeCoreException ex) {
    }
  }
  return Result.FalseResult;
}","@Override public Result isDirty(){
  if (isEditable()) {
    try {
      Artifact storedArt=getStored();
      Artifact widgetArt=getSelection();
      if (storedArt == null && widgetArt == null) {
        return Result.FalseResult;
      }
 else       if (storedArt != null && widgetArt == null) {
        return new Result(true,getAttributeType() + ""String_Node_Str"");
      }
 else       if (storedArt == null && widgetArt != null) {
        return new Result(true,getAttributeType() + ""String_Node_Str"");
      }
 else       if (!storedArt.equals(widgetArt)) {
        return new Result(true,getAttributeType() + ""String_Node_Str"");
      }
    }
 catch (    OseeCoreException ex) {
    }
  }
  return Result.FalseResult;
}",0.61652739090065
96954,"@Override public void renderAttribute(IAttributeType attributeType,Artifact artifact,PresentationType presentationType,Producer producer,AttributeElement attributeElement,String footer) throws OseeCoreException {
  WordMLProducer wordMl=(WordMLProducer)producer;
  if (attributeType.equals(CoreAttributeTypes.WordTemplateContent)) {
    Attribute<?> wordTempConAttr=artifact.getSoleAttribute(attributeType);
    String data=null;
    if (wordTempConAttr != null) {
      data=(String)wordTempConAttr.getValue();
    }
    if (attributeElement.getLabel().length() > 0) {
      wordMl.addParagraph(attributeElement.getLabel());
    }
    if (data != null) {
      data=WordUtil.reassignBinDataID(data);
      LinkType linkType=(LinkType)getOption(""String_Node_Str"");
      Set<String> unknownGuids=new HashSet<>();
      data=WordMlLinkHandler.link(linkType,artifact,data,unknownGuids);
      WordUiUtil.displayUnknownGuids(artifact,unknownGuids);
      data=WordUtil.reassignBookMarkID(data);
      data=data.replaceAll(ReportConstants.ENTIRE_FTR,""String_Node_Str"");
      data=data.replaceAll(ReportConstants.NO_DATA_RIGHTS,""String_Node_Str"");
      data=data.concat(footer);
    }
    if (presentationType == PresentationType.SPECIALIZED_EDIT) {
      OseeLinkBuilder linkBuilder=new OseeLinkBuilder();
      wordMl.addEditParagraphNoEscape(linkBuilder.getStartEditImage(artifact.getGuid()));
      wordMl.addWordMl(data);
      wordMl.addEditParagraphNoEscape(linkBuilder.getEndEditImage(artifact.getGuid()));
    }
 else     if (data != null) {
      data=data.replaceAll(WordTemplateProcessor.PGNUMTYPE_START_1,""String_Node_Str"");
      wordMl.addWordMl(data);
    }
    wordMl.resetListValue();
  }
 else {
    super.renderAttribute(attributeType,artifact,PresentationType.SPECIALIZED_EDIT,wordMl,attributeElement,footer);
  }
}","@Override public void renderAttribute(IAttributeType attributeType,Artifact artifact,PresentationType presentationType,Producer producer,AttributeElement attributeElement,String footer) throws OseeCoreException {
  WordMLProducer wordMl=(WordMLProducer)producer;
  if (attributeType.equals(CoreAttributeTypes.WordTemplateContent)) {
    Attribute<?> wordTempConAttr=artifact.getSoleAttribute(attributeType);
    String data=null;
    if (wordTempConAttr != null) {
      data=(String)wordTempConAttr.getValue();
    }
    if (attributeElement.getLabel().length() > 0) {
      wordMl.addParagraph(attributeElement.getLabel());
    }
    if (data != null) {
      data=WordUtil.reassignBinDataID(data);
      LinkType linkType=(LinkType)getOption(""String_Node_Str"");
      Set<String> unknownGuids=new HashSet<>();
      data=WordMlLinkHandler.link(linkType,artifact,data,unknownGuids);
      WordUiUtil.displayUnknownGuids(artifact,unknownGuids);
      data=WordUtil.reassignBookMarkID(data);
      data=removeSectionBreakParagraph(data);
      data=data.replaceAll(ReportConstants.ENTIRE_FTR + ReportConstants.FULL_PARA_END,""String_Node_Str"");
      data=data.replaceAll(ReportConstants.NO_DATA_RIGHTS,""String_Node_Str"");
      data=data.concat(footer);
    }
    if (presentationType == PresentationType.SPECIALIZED_EDIT) {
      OseeLinkBuilder linkBuilder=new OseeLinkBuilder();
      wordMl.addEditParagraphNoEscape(linkBuilder.getStartEditImage(artifact.getGuid()));
      wordMl.addWordMl(data);
      wordMl.addEditParagraphNoEscape(linkBuilder.getEndEditImage(artifact.getGuid()));
    }
 else     if (data != null) {
      data=data.replaceAll(WordTemplateProcessor.PGNUMTYPE_START_1,""String_Node_Str"");
      wordMl.addWordMl(data);
    }
    wordMl.resetListValue();
  }
 else {
    super.renderAttribute(attributeType,artifact,PresentationType.SPECIALIZED_EDIT,wordMl,attributeElement,footer);
  }
}",0.9791666666666666
96955,"private void updateCheckWidget(){
  validate();
}","protected void updateCheckWidget(){
  validate();
}",0.92
96956,"private void updateCheckWidget(){
  if (checkButton != null && !checkButton.isDisposed()) {
    checkButton.setSelection(selected);
  }
  validate();
}","@Override protected void updateCheckWidget(){
  if (checkButton != null && !checkButton.isDisposed()) {
    checkButton.setSelection(selected);
  }
  validate();
}",0.9426751592356688
96957,"private void createWordPreviewMenuItem(Menu parentMenu){
  wordPreviewItem=new MenuItem(parentMenu,SWT.PUSH);
  wordPreviewItem.setText(""String_Node_Str"");
  needSelectedArtifactListener.add(wordPreviewItem);
  wordPreviewItem.addSelectionListener(new SelectionAdapter(){
    @Override public void widgetSelected(    SelectionEvent event){
      openWordViewer((IStructuredSelection)treeViewer.getSelection());
    }
  }
);
}","private void createWordPreviewMenuItem(Menu parentMenu){
  wordPreviewItem=new MenuItem(parentMenu,SWT.PUSH);
  wordPreviewItem.setText(""String_Node_Str"");
  needSelectedArtifactListener.addArtifactEnabled(wordPreviewItem);
  wordPreviewItem.addSelectionListener(new SelectionAdapter(){
    @Override public void widgetSelected(    SelectionEvent event){
      openWordViewer((IStructuredSelection)treeViewer.getSelection());
    }
  }
);
}",0.9826589595375722
96958,"private void createOpenMenuItem(Menu parentMenu){
  openMenuItem=new MenuItem(parentMenu,SWT.PUSH);
  openMenuItem.setText(""String_Node_Str"");
  needSelectedArtifactListener.add(openMenuItem);
  openMenuItem.addSelectionListener(new SelectionAdapter(){
    @Override public void widgetSelected(    SelectionEvent event){
      openViewer((IStructuredSelection)treeViewer.getSelection());
    }
  }
);
}","private void createOpenMenuItem(Menu parentMenu){
  openMenuItem=new MenuItem(parentMenu,SWT.PUSH);
  openMenuItem.setText(""String_Node_Str"");
  needSelectedArtifactListener.addArtifactEnabled(openMenuItem);
  openMenuItem.addSelectionListener(new SelectionAdapter(){
    @Override public void widgetSelected(    SelectionEvent event){
      openViewer((IStructuredSelection)treeViewer.getSelection());
    }
  }
);
}",0.9816849816849816
96959,"private void createRevealInArtifactExplorerMenuItem(final Menu parentMenu){
  revealInArtifactExporerMenuItem=new MenuItem(parentMenu,SWT.CASCADE);
  revealInArtifactExporerMenuItem.setText(""String_Node_Str"");
  revealInArtifactExporerMenuItem.setImage(ImageManager.getImage(FrameworkImage.MAGNIFY));
  needSelectedArtifactListener.add(revealInArtifactExporerMenuItem);
  final RelationsComposite fRelComp=this;
  revealInArtifactExporerMenuItem.addSelectionListener(new SelectionAdapter(){
    @Override public void widgetSelected(    SelectionEvent e){
      new RevealInExplorerAction(fRelComp).run();
    }
  }
);
  revealInArtifactExporerMenuItem.setEnabled(true);
}","private void createRevealInArtifactExplorerMenuItem(final Menu parentMenu){
  revealInArtifactExporerMenuItem=new MenuItem(parentMenu,SWT.CASCADE);
  revealInArtifactExporerMenuItem.setText(""String_Node_Str"");
  revealInArtifactExporerMenuItem.setImage(ImageManager.getImage(FrameworkImage.MAGNIFY));
  needSelectedArtifactListener.addArtifactEnabled(revealInArtifactExporerMenuItem);
  final RelationsComposite fRelComp=this;
  revealInArtifactExporerMenuItem.addSelectionListener(new SelectionAdapter(){
    @Override public void widgetSelected(    SelectionEvent e){
      new RevealInExplorerAction(fRelComp).run();
    }
  }
);
  revealInArtifactExporerMenuItem.setEnabled(true);
}",0.98894620486367
96960,"@Override public void menuShown(MenuEvent e){
  IStructuredSelection selection=(IStructuredSelection)treeViewer.getSelection();
  boolean valid=selection.getFirstElement() instanceof WrapperForRelationLink;
  if (selection.getFirstElement() instanceof WrapperForRelationLink) {
    WrapperForRelationLink data=(WrapperForRelationLink)selection.getFirstElement();
    AccessPolicy policyHandlerService;
    try {
      policyHandlerService=ServiceUtil.getAccessPolicy();
      RelationTypeSide rts=new RelationTypeSide(data.getRelationType(),data.getRelationSide());
      valid=policyHandlerService.canRelationBeModified(artifact,java.util.Collections.singleton(data.getArtifactA().equals(artifact) ? data.getArtifactB() : data.getArtifactA()),rts,Level.INFO).matched();
    }
 catch (    OseeCoreException ex) {
      OseeLog.log(Activator.class,OseeLevel.SEVERE_POPUP,ex);
    }
  }
  for (  MenuItem item : accessControlitems) {
    item.setEnabled(valid);
  }
  for (  MenuItem item : artEnabledOnlyitems) {
    item.setEnabled(true);
  }
}","@Override public void menuShown(MenuEvent e){
  IStructuredSelection selection=(IStructuredSelection)treeViewer.getSelection();
  boolean isRelationType=false;
  if (selection.getFirstElement() instanceof RelationTypeSide || selection.getFirstElement() instanceof RelationType) {
    isRelationType=true;
  }
  boolean valid=selection.getFirstElement() instanceof WrapperForRelationLink;
  if (selection.getFirstElement() instanceof WrapperForRelationLink) {
    WrapperForRelationLink data=(WrapperForRelationLink)selection.getFirstElement();
    AccessPolicy policyHandlerService;
    try {
      policyHandlerService=ServiceUtil.getAccessPolicy();
      RelationTypeSide rts=new RelationTypeSide(data.getRelationType(),data.getRelationSide());
      valid=policyHandlerService.canRelationBeModified(artifact,java.util.Collections.singleton(data.getArtifactA().equals(artifact) ? data.getArtifactB() : data.getArtifactA()),rts,Level.INFO).matched();
    }
 catch (    OseeCoreException ex) {
      OseeLog.log(Activator.class,OseeLevel.SEVERE_POPUP,ex);
    }
  }
  for (  MenuItem item : accessControlitems) {
    item.setEnabled(valid);
  }
  for (  MenuItem item : artEnabledOnlyitems) {
    item.setEnabled(!isRelationType);
  }
}",0.913157894736842
96961,"@Override public Collection<IAtsVersion> getVersions(IAtsProgram program){
  return services.getProgramService().getTeamDefHoldingVersions(program).getVersions();
}","@Override public Collection<IAtsVersion> getVersions(IAtsProgram program){
  IAtsTeamDefinition teamDefHoldingVersions=services.getProgramService().getTeamDefHoldingVersions(program);
  if (teamDefHoldingVersions != null) {
    return teamDefHoldingVersions.getVersions();
  }
  return java.util.Collections.emptyList();
}",0.588477366255144
96962,"private String getText(IAtsWorkPackage workPackage){
  String result;
  result=String.format(""String_Node_Str"",workPackage.getActivityId(),workPackage.getActivityName());
  return result;
}","private String getText(IAtsWorkPackage workPackage){
  String result=""String_Node_Str"";
  if (workPackage != null) {
    String activityId=Strings.isValid(workPackage.getActivityId()) ? workPackage.getActivityId() : ""String_Node_Str"";
    String activityName=Strings.isValid(workPackage.getActivityName()) ? workPackage.getActivityName() : ""String_Node_Str"";
    result=String.format(""String_Node_Str"",activityId,activityName);
  }
  return result;
}",0.4663536776212832
96963,"public DSLTYPE getDslTypeByToken(TOKEN key){
  return tokenToType.get(key);
}","public DSLTYPE getDslTypeByToken(TOKEN key){
  DSLTYPE type=tokenToType.get(key);
  if (type == null) {
    TOKEN tokenByUuid=getTokenByUuid(key.getGuid());
    if (tokenByUuid != null) {
      type=tokenToType.get(tokenByUuid);
    }
  }
  return type;
}",0.3493975903614458
96964,"private IRelationType getRelationType(IAtsServer atsServer,String relationTypeName){
  for (  IRelationType relation : atsServer.getOrcsApi().getOrcsTypes().getRelationTypes().getAll()) {
    if (relation.getName().equals(relation.getName())) {
      return relation;
    }
  }
  return null;
}","private IRelationType getRelationType(IAtsServer atsServer,String relationTypeName){
  for (  IRelationType relation : atsServer.getOrcsApi().getOrcsTypes().getRelationTypes().getAll()) {
    if (relation.getName().equals(relationTypeName)) {
      return relation;
    }
  }
  return null;
}",0.9829351535836176
96965,"@Override public void runOperation(VariableMap variableMap,IProgressMonitor monitor) throws Exception {
  populateTemplateList();
  boolean useArtifactNameInLinks=variableMap.getBoolean(USE_ARTIFACT_NAMES);
  boolean useParagraphNumbersInLinks=variableMap.getBoolean(USE_PARAGRAPH_NUMBERS);
  variableMap.getBoolean(INCLUDE_ARTIFACT_UUIDS);
  if (!useParagraphNumbersInLinks && !useArtifactNameInLinks) {
    throw new OseeArgumentException(""String_Node_Str"");
  }
  LinkType linkType;
  if (useArtifactNameInLinks && useParagraphNumbersInLinks) {
    linkType=LinkType.INTERNAL_DOC_REFERENCE_USE_PARAGRAPH_NUMBER_AND_NAME;
  }
 else   if (useParagraphNumbersInLinks) {
    linkType=LinkType.INTERNAL_DOC_REFERENCE_USE_PARAGRAPH_NUMBER;
  }
 else {
    linkType=LinkType.INTERNAL_DOC_REFERENCE_USE_NAME;
  }
  Artifact master=getTemplate(variableMap.getString(MASTER_TEMPLATE));
  if (master == null) {
    throw new OseeArgumentException(""String_Node_Str"");
  }
  Artifact slave=getTemplate(variableMap.getString(SLAVE_TEMPLATE));
  List<Artifact> artifacts=null;
  try {
    if (!isSRSPublishing) {
      if (orcsQueryWidget.getText().isEmpty()) {
        artifacts=variableMap.getArtifacts(IS_ARTIFACTS);
      }
 else {
        artifacts=getArtifactsFromOrcsQuery();
      }
    }
  }
 catch (  NullPointerException e) {
    throw new OseeArgumentException(""String_Node_Str"");
  }
  if (artifacts != null && !artifacts.isEmpty()) {
    branch=artifacts.get(0).getBranch();
  }
 else   if (!isSRSPublishing) {
    throw new OseeArgumentException(""String_Node_Str"");
  }
  if (branch == null) {
    throw new OseeArgumentException(""String_Node_Str"");
  }
  WordTemplateRenderer renderer=new WordTemplateRenderer();
  SkynetTransaction transaction=TransactionManager.createTransaction(branch,""String_Node_Str"");
  Object[] options=new Object[]{""String_Node_Str"",branch,""String_Node_Str"",variableMap.getBranch(WAS_BRANCH),""String_Node_Str"",variableMap.getValue(PUBLISH_AS_DIFF),""String_Node_Str"",variableMap.getValue(INCLUDE_ARTIFACT_UUIDS),""String_Node_Str"",linkType,WordTemplateRenderer.UPDATE_PARAGRAPH_NUMBER_OPTION,variableMap.getBoolean(UPDATE_PARAGRAPH_NUMBERS),""String_Node_Str"",variableMap.getArtifactTypes(EXCLUDE_ARTIFACT_TYPES),ITemplateRenderer.TRANSACTION_OPTION,transaction,IRenderer.SKIP_ERRORS,true,""String_Node_Str"",true,""String_Node_Str"",true,""String_Node_Str"",true,""String_Node_Str"",monitor,ITemplateRenderer.USE_TEMPLATE_ONCE,true,WordTemplateRenderer.FIRST_TIME,true};
  renderer.publish(master,slave,artifacts,options);
  transaction.execute();
}","@Override public void runOperation(VariableMap variableMap,IProgressMonitor monitor) throws Exception {
  populateTemplateList();
  boolean useArtifactNameInLinks=variableMap.getBoolean(USE_ARTIFACT_NAMES);
  boolean useParagraphNumbersInLinks=variableMap.getBoolean(USE_PARAGRAPH_NUMBERS);
  variableMap.getBoolean(INCLUDE_ARTIFACT_UUIDS);
  if (!useParagraphNumbersInLinks && !useArtifactNameInLinks) {
    throw new OseeArgumentException(""String_Node_Str"");
  }
  LinkType linkType;
  if (useArtifactNameInLinks && useParagraphNumbersInLinks) {
    linkType=LinkType.INTERNAL_DOC_REFERENCE_USE_PARAGRAPH_NUMBER_AND_NAME;
  }
 else   if (useParagraphNumbersInLinks) {
    linkType=LinkType.INTERNAL_DOC_REFERENCE_USE_PARAGRAPH_NUMBER;
  }
 else {
    linkType=LinkType.INTERNAL_DOC_REFERENCE_USE_NAME;
  }
  Artifact master=getTemplate(variableMap.getString(MASTER_TEMPLATE));
  if (master == null) {
    throw new OseeArgumentException(""String_Node_Str"");
  }
  Artifact slave=getTemplate(variableMap.getString(SLAVE_TEMPLATE));
  List<Artifact> artifacts=null;
  try {
    if (orcsQueryWidget.getText().isEmpty()) {
      artifacts=variableMap.getArtifacts(IS_ARTIFACTS);
    }
 else {
      artifacts=getArtifactsFromOrcsQuery();
    }
  }
 catch (  NullPointerException e) {
    throw new OseeArgumentException(""String_Node_Str"");
  }
  if (artifacts != null && !artifacts.isEmpty()) {
    branch=artifacts.get(0).getBranch();
  }
 else {
    throw new OseeArgumentException(""String_Node_Str"");
  }
  if (branch == null) {
    throw new OseeArgumentException(""String_Node_Str"");
  }
  WordTemplateRenderer renderer=new WordTemplateRenderer();
  SkynetTransaction transaction=TransactionManager.createTransaction(branch,""String_Node_Str"");
  Object[] options=new Object[]{""String_Node_Str"",branch,""String_Node_Str"",variableMap.getBranch(WAS_BRANCH),""String_Node_Str"",variableMap.getValue(PUBLISH_AS_DIFF),""String_Node_Str"",variableMap.getValue(INCLUDE_ARTIFACT_UUIDS),""String_Node_Str"",linkType,WordTemplateRenderer.UPDATE_PARAGRAPH_NUMBER_OPTION,variableMap.getBoolean(UPDATE_PARAGRAPH_NUMBERS),""String_Node_Str"",variableMap.getArtifactTypes(EXCLUDE_ARTIFACT_TYPES),ITemplateRenderer.TRANSACTION_OPTION,transaction,IRenderer.SKIP_ERRORS,true,""String_Node_Str"",true,""String_Node_Str"",true,""String_Node_Str"",true,""String_Node_Str"",monitor,ITemplateRenderer.USE_TEMPLATE_ONCE,true,WordTemplateRenderer.FIRST_TIME,true};
  renderer.publish(master,slave,artifacts,options);
  transaction.execute();
}",0.9865877712031558
96966,"@Override public void widgetCreated(XWidget xWidget,FormToolkit toolkit,Artifact art,SwtXWidgetRenderer dynamicXWidgetLayout,XModifiedListener modListener,boolean isEditable) throws OseeCoreException {
  super.widgetCreated(xWidget,toolkit,art,dynamicXWidgetLayout,modListener,isEditable);
  if (xWidget.getLabel().equals(WAS_BRANCH)) {
    branchWidget=(XBranchSelectWidget)xWidget;
    branchWidget.setEditable(false);
  }
 else   if (xWidget.getLabel().equals(PUBLISH_AS_DIFF)) {
    final XCheckBox checkBox=(XCheckBox)xWidget;
    checkBox.addSelectionListener(new SelectionAdapter(){
      @Override public void widgetSelected(      SelectionEvent e){
        super.widgetSelected(e);
        branchWidget.setEditable(checkBox.isChecked());
        if (!checkBox.isChecked()) {
          branchWidget.setSelection(null);
        }
      }
    }
);
  }
 else   if (xWidget.getLabel().equals(MASTER_TEMPLATE)) {
    final XCombo masterCombo=(XCombo)xWidget;
    masterCombo.addModifyListener(new ModifyListener(){
      @Override public void modifyText(      ModifyEvent e){
        if (masterCombo.get().contains(""String_Node_Str"")) {
          slaveWidget.setEnabled(true);
          orcsQueryWidget.setEditable(false);
          orcsQueryWidget.set(""String_Node_Str"");
          artifactsWidget.setEditable(false);
          isSRSPublishing=true;
        }
 else {
          slaveWidget.setEnabled(false);
          slaveWidget.set(""String_Node_Str"");
          orcsQueryWidget.setEditable(true);
          artifactsWidget.setEditable(true);
          isSRSPublishing=false;
        }
      }
    }
);
  }
 else   if (xWidget.getLabel().equals(SLAVE_TEMPLATE)) {
    slaveWidget=(XCombo)xWidget;
    slaveWidget.setEnabled(false);
  }
 else   if (xWidget.getLabel().equals(IS_ARTIFACTS)) {
    artifactsWidget=(XListDropViewer)xWidget;
    artifactsWidget.setEditable(true);
  }
 else   if (xWidget.getLabel().equals(ORCS_QUERY)) {
    orcsQueryWidget=(XDslEditorWidget)xWidget;
    orcsQueryWidget.setEditable(true);
  }
}","@Override public void widgetCreated(XWidget xWidget,FormToolkit toolkit,Artifact art,SwtXWidgetRenderer dynamicXWidgetLayout,XModifiedListener modListener,boolean isEditable) throws OseeCoreException {
  super.widgetCreated(xWidget,toolkit,art,dynamicXWidgetLayout,modListener,isEditable);
  if (xWidget.getLabel().equals(WAS_BRANCH)) {
    branchWidget=(XBranchSelectWidget)xWidget;
    branchWidget.setEditable(false);
  }
 else   if (xWidget.getLabel().equals(PUBLISH_AS_DIFF)) {
    final XCheckBox checkBox=(XCheckBox)xWidget;
    checkBox.addSelectionListener(new SelectionAdapter(){
      @Override public void widgetSelected(      SelectionEvent e){
        super.widgetSelected(e);
        branchWidget.setEditable(checkBox.isChecked());
        if (!checkBox.isChecked()) {
          branchWidget.setSelection(null);
        }
      }
    }
);
  }
 else   if (xWidget.getLabel().equals(MASTER_TEMPLATE)) {
    final XCombo masterCombo=(XCombo)xWidget;
    masterCombo.addModifyListener(new ModifyListener(){
      @Override public void modifyText(      ModifyEvent e){
        if (masterCombo.get().contains(""String_Node_Str"")) {
          slaveWidget.setEnabled(true);
          orcsQueryWidget.setEditable(false);
          orcsQueryWidget.set(""String_Node_Str"");
          artifactsWidget.setEditable(false);
        }
 else {
          slaveWidget.setEnabled(false);
          slaveWidget.set(""String_Node_Str"");
          orcsQueryWidget.setEditable(true);
          artifactsWidget.setEditable(true);
        }
      }
    }
);
  }
 else   if (xWidget.getLabel().equals(SLAVE_TEMPLATE)) {
    slaveWidget=(XCombo)xWidget;
    slaveWidget.setEnabled(false);
  }
 else   if (xWidget.getLabel().equals(IS_ARTIFACTS)) {
    artifactsWidget=(XListDropViewer)xWidget;
    artifactsWidget.setEditable(true);
  }
 else   if (xWidget.getLabel().equals(ORCS_QUERY)) {
    orcsQueryWidget=(XDslEditorWidget)xWidget;
    orcsQueryWidget.setEditable(true);
  }
}",0.983729662077597
96967,"@Override public void modifyText(ModifyEvent e){
  if (masterCombo.get().contains(""String_Node_Str"")) {
    slaveWidget.setEnabled(true);
    orcsQueryWidget.setEditable(false);
    orcsQueryWidget.set(""String_Node_Str"");
    artifactsWidget.setEditable(false);
    isSRSPublishing=true;
  }
 else {
    slaveWidget.setEnabled(false);
    slaveWidget.set(""String_Node_Str"");
    orcsQueryWidget.setEditable(true);
    artifactsWidget.setEditable(true);
    isSRSPublishing=false;
  }
}","@Override public void modifyText(ModifyEvent e){
  if (masterCombo.get().contains(""String_Node_Str"")) {
    slaveWidget.setEnabled(true);
    orcsQueryWidget.setEditable(false);
    orcsQueryWidget.set(""String_Node_Str"");
    artifactsWidget.setEditable(false);
  }
 else {
    slaveWidget.setEnabled(false);
    slaveWidget.set(""String_Node_Str"");
    orcsQueryWidget.setEditable(true);
    artifactsWidget.setEditable(true);
  }
}",0.9422028353326064
96968,"@Override public String getDescriptionUsage(){
  StringBuilder sb=new StringBuilder();
  sb.append(""String_Node_Str"");
  sb.append(""String_Node_Str"");
  sb.append(""String_Node_Str"");
  sb.append(""String_Node_Str"");
  sb.append(""String_Node_Str"");
  sb.append(""String_Node_Str"");
  sb.append(""String_Node_Str"");
  sb.append(""String_Node_Str"");
  sb.append(""String_Node_Str"");
  sb.append(""String_Node_Str"");
  sb.append(""String_Node_Str"");
  return sb.toString();
}","@Override public String getDescriptionUsage(){
  StringBuilder sb=new StringBuilder();
  sb.append(""String_Node_Str"");
  sb.append(""String_Node_Str"");
  sb.append(""String_Node_Str"");
  sb.append(""String_Node_Str"");
  sb.append(""String_Node_Str"");
  sb.append(""String_Node_Str"");
  sb.append(""String_Node_Str"");
  sb.append(""String_Node_Str"");
  sb.append(""String_Node_Str"");
  sb.append(""String_Node_Str"");
  return sb.toString();
}",0.9642857142857144
96969,"@Override public void renderAttribute(IAttributeType attributeType,Artifact artifact,PresentationType presentationType,Producer producer,AttributeElement attributeElement,String footer) throws OseeCoreException {
  WordMLProducer wordMl=(WordMLProducer)producer;
  String format=attributeElement.getFormat();
  boolean allAttrs=getBooleanOption(""String_Node_Str"");
  wordMl.startParagraph();
  if (allAttrs) {
    if (!attributeType.matches(CoreAttributeTypes.PlainTextContent)) {
      wordMl.addWordMl(""String_Node_Str"" + Xml.escape(attributeType.getName()) + ""String_Node_Str"");
    }
 else {
      wordMl.addWordMl(""String_Node_Str"");
    }
  }
 else {
    wordMl.addWordMl(attributeElement.getLabel());
  }
  if (attributeType.equals(CoreAttributeTypes.RelationOrder)) {
    wordMl.endParagraph();
    String data=renderRelationOrder(artifact);
    wordMl.addWordMl(data);
  }
 else {
    String valueList=artifact.getAttributesToString(attributeType);
    if (attributeElement.getFormat().contains(""String_Node_Str"")) {
      wordMl.addWordMl(format.replace(""String_Node_Str"",""String_Node_Str"" + Xml.escape(valueList).toString() + ""String_Node_Str""));
    }
 else {
      wordMl.addTextInsideParagraph(valueList);
    }
    wordMl.endParagraph();
  }
}","@Override public void renderAttribute(IAttributeType attributeType,Artifact artifact,PresentationType presentationType,Producer producer,AttributeElement attributeElement,String footer) throws OseeCoreException {
  WordMLProducer wordMl=(WordMLProducer)producer;
  String format=attributeElement.getFormatPre();
  boolean allAttrs=getBooleanOption(""String_Node_Str"");
  wordMl.startParagraph();
  if (allAttrs) {
    if (!attributeType.matches(CoreAttributeTypes.PlainTextContent)) {
      wordMl.addWordMl(""String_Node_Str"" + Xml.escape(attributeType.getName()) + ""String_Node_Str"");
    }
 else {
      wordMl.addWordMl(""String_Node_Str"");
    }
  }
 else {
    wordMl.addWordMl(attributeElement.getLabel());
  }
  if (attributeType.equals(CoreAttributeTypes.RelationOrder)) {
    wordMl.endParagraph();
    String data=renderRelationOrder(artifact);
    wordMl.addWordMl(data);
  }
 else {
    String valueList=artifact.getAttributesToString(attributeType);
    if (attributeElement.getFormatPre().contains(""String_Node_Str"")) {
      wordMl.addWordMl(format.replace(""String_Node_Str"",""String_Node_Str"" + Xml.escape(valueList).toString() + ""String_Node_Str""));
    }
 else {
      wordMl.addTextInsideParagraph(valueList);
    }
    wordMl.endParagraph();
  }
}",0.9976209357652656
96970,"private void parseNestedTemplateOptions(String templateOptions,IContainer folder,WordMLProducer wordMl,PresentationType presentationType){
  try {
    JSONObject jsonObject=new JSONObject(templateOptions);
    JSONArray nestedTemplateOptions=jsonObject.getJSONArray(""String_Node_Str"");
    JSONObject options=null;
    if (nestedCount < nestedTemplateOptions.length()) {
      options=nestedTemplateOptions.getJSONObject(nestedCount);
      nestedCount++;
      outlineType=options.getString(""String_Node_Str"");
      sectionNumber=options.getString(""String_Node_Str"");
      subDocName=options.getString(""String_Node_Str"");
      key=options.getString(""String_Node_Str"");
      value=options.getString(""String_Node_Str"");
      renderer.setOption(key,value);
      String artifactName=renderer.getStringOption(""String_Node_Str"");
      String artifactId=renderer.getStringOption(""String_Node_Str"");
      String orcsQuery=renderer.getStringOption(""String_Node_Str"");
      Branch branch=renderer.getBranchOption(""String_Node_Str"");
      List<Artifact> artifacts=null;
      if (Strings.isValid(artifactId)) {
        artifacts=ArtifactQuery.getArtifactListFromIds(Arrays.asList(Integer.valueOf(artifactId)),branch,EXCLUDE_DELETED);
      }
 else       if (Strings.isValid(artifactName)) {
        artifacts=ArtifactQuery.getArtifactListFromName(artifactName,branch,EXCLUDE_DELETED);
      }
 else       if (Strings.isValid(orcsQuery)) {
        Writer writer=new StringWriter();
        OseeClient oseeClient=ServiceUtil.getOseeClient();
        oseeClient.executeScript(orcsQuery,null,false,MediaType.APPLICATION_JSON_TYPE,writer);
        artifacts=parseOrcsQueryResult(writer.toString(),branch);
      }
      String subDocFileName=subDocName + ""String_Node_Str"";
      if (isDiff) {
        WordTemplateFileDiffer templateFileDiffer=new WordTemplateFileDiffer(renderer);
        templateFileDiffer.generateFileDifferences(artifacts,""String_Node_Str"" + subDocFileName,sectionNumber,outlineType,recurseChildren);
      }
 else {
        IFile file=folder.getFile(new Path(subDocFileName));
        AIFile.writeToFile(file,applyTemplate(artifacts,slaveTemplate,slaveTemplateOptions,folder,sectionNumber,outlineType,presentationType));
      }
      wordMl.createHyperLinkDoc(subDocFileName);
    }
  }
 catch (  JSONException ex) {
    OseeCoreException.wrapAndThrow(ex);
  }
}","private void parseNestedTemplateOptions(String templateOptions,IContainer folder,WordMLProducer wordMl,PresentationType presentationType){
  try {
    JSONObject jsonObject=new JSONObject(templateOptions);
    JSONArray nestedTemplateOptions=jsonObject.getJSONArray(""String_Node_Str"");
    JSONObject options=null;
    if (nestedCount < nestedTemplateOptions.length()) {
      options=nestedTemplateOptions.getJSONObject(nestedCount);
      nestedCount++;
      outlineType=options.getString(""String_Node_Str"");
      if (outlineType.isEmpty()) {
        outlineType=null;
      }
      sectionNumber=options.getString(""String_Node_Str"");
      subDocName=options.getString(""String_Node_Str"");
      key=options.getString(""String_Node_Str"");
      value=options.getString(""String_Node_Str"");
      renderer.setOption(key,value);
      String artifactName=renderer.getStringOption(""String_Node_Str"");
      String artifactId=renderer.getStringOption(""String_Node_Str"");
      String orcsQuery=renderer.getStringOption(""String_Node_Str"");
      Branch branch=renderer.getBranchOption(""String_Node_Str"");
      List<Artifact> artifacts=null;
      if (Strings.isValid(artifactId)) {
        artifacts=ArtifactQuery.getArtifactListFromIds(Arrays.asList(Integer.valueOf(artifactId)),branch,EXCLUDE_DELETED);
      }
 else       if (Strings.isValid(artifactName)) {
        artifacts=ArtifactQuery.getArtifactListFromName(artifactName,branch,EXCLUDE_DELETED);
      }
 else       if (Strings.isValid(orcsQuery)) {
        Writer writer=new StringWriter();
        OseeClient oseeClient=ServiceUtil.getOseeClient();
        oseeClient.executeScript(orcsQuery,null,false,MediaType.APPLICATION_JSON_TYPE,writer);
        artifacts=parseOrcsQueryResult(writer.toString(),branch);
      }
      String subDocFileName=subDocName + ""String_Node_Str"";
      if (isDiff) {
        WordTemplateFileDiffer templateFileDiffer=new WordTemplateFileDiffer(renderer);
        templateFileDiffer.generateFileDifferences(artifacts,""String_Node_Str"" + subDocFileName,sectionNumber,outlineType,recurseChildren);
      }
 else {
        IFile file=folder.getFile(new Path(subDocFileName));
        AIFile.writeToFile(file,applyTemplate(artifacts,slaveTemplate,slaveTemplateOptions,folder,sectionNumber,outlineType,presentationType));
      }
      wordMl.createHyperLinkDoc(subDocFileName);
    }
  }
 catch (  JSONException ex) {
    OseeCoreException.wrapAndThrow(ex);
  }
}",0.9857113273969766
96971,"private void parseOutliningOptions(String templateOptions){
  try {
    JSONObject jsonObject=new JSONObject(templateOptions);
    JSONArray optionsArray=jsonObject.getJSONArray(""String_Node_Str"");
    JSONObject options=optionsArray.getJSONObject(0);
    outlining=options.getBoolean(""String_Node_Str"");
    recurseChildren=options.getBoolean(""String_Node_Str"");
    String headingAttrType=options.getString(""String_Node_Str"");
    headingAttributeType=AttributeTypeManager.getType(headingAttrType);
    outlineNumber=options.getString(""String_Node_Str"");
    artifactName=options.getString(""String_Node_Str"");
  }
 catch (  JSONException ex) {
    OseeCoreException.wrapAndThrow(ex);
  }
}","private void parseOutliningOptions(String templateOptions){
  try {
    JSONObject jsonObject=new JSONObject(templateOptions);
    JSONArray optionsArray=jsonObject.getJSONArray(""String_Node_Str"");
    JSONObject options=optionsArray.getJSONObject(0);
    outlining=options.getBoolean(""String_Node_Str"");
    recurseChildren=options.getBoolean(""String_Node_Str"");
    String headingAttrType=options.getString(""String_Node_Str"");
    headingAttributeType=AttributeTypeManager.getType(headingAttrType);
    artifactName=options.getString(""String_Node_Str"");
  }
 catch (  JSONException ex) {
    OseeCoreException.wrapAndThrow(ex);
  }
}",0.9577677224736048
96972,"public String getAssigneeStr(IAtsObject atsObject) throws OseeCoreException {
  if (atsObject instanceof HasActions) {
    HasActions hasActions=(HasActions)atsObject;
    List<IAtsUser> pocs=new ArrayList<>();
    List<IAtsUser> implementers=new ArrayList<>();
    for (    IAtsWorkItem action : hasActions.getActions()) {
      if (action.getStateMgr().getStateType().isCompletedOrCancelled()) {
        for (        IAtsUser user : action.getImplementers()) {
          if (!implementers.contains(user)) {
            implementers.add(user);
          }
        }
      }
 else {
        for (        IAtsUser user : action.getAssignees()) {
          if (!pocs.contains(user)) {
            pocs.add(user);
          }
        }
      }
    }
    Collections.sort(pocs);
    Collections.sort(implementers);
    return AtsObjects.toString(""String_Node_Str"",pocs) + (implementers.isEmpty() ? ""String_Node_Str"" : ""String_Node_Str"" + AtsObjects.toString(""String_Node_Str"",implementers) + ""String_Node_Str"");
  }
 else   if (atsObject instanceof IAtsWorkItem) {
    IAtsWorkItem workItem=(IAtsWorkItem)atsObject;
    if (workItem.getStateMgr().getStateType().isCompletedOrCancelled()) {
      String implementers=implementStrProvider.getImplementersStr(workItem);
      if (Strings.isValid(implementers)) {
        return ""String_Node_Str"" + implementers + ""String_Node_Str"";
      }
    }
    if (atsObject instanceof HasAssignees) {
      return AtsObjects.toString(""String_Node_Str"",((HasAssignees)atsObject).getAssignees());
    }
  }
  return ""String_Node_Str"";
}","public String getAssigneeStr(IAtsObject atsObject) throws OseeCoreException {
  if (atsObject instanceof HasActions) {
    HasActions hasActions=(HasActions)atsObject;
    List<IAtsUser> pocs=new ArrayList<>();
    List<IAtsUser> implementers=new ArrayList<>();
    for (    IAtsWorkItem action : hasActions.getActions()) {
      StateType stateType=action.getStateMgr().getStateType();
      if (stateType != null) {
        if (stateType.isCompletedOrCancelled()) {
          for (          IAtsUser user : action.getImplementers()) {
            if (!implementers.contains(user)) {
              implementers.add(user);
            }
          }
        }
 else {
          for (          IAtsUser user : action.getAssignees()) {
            if (!pocs.contains(user)) {
              pocs.add(user);
            }
          }
        }
      }
    }
    Collections.sort(pocs);
    Collections.sort(implementers);
    return AtsObjects.toString(""String_Node_Str"",pocs) + (implementers.isEmpty() ? ""String_Node_Str"" : ""String_Node_Str"" + AtsObjects.toString(""String_Node_Str"",implementers) + ""String_Node_Str"");
  }
 else   if (atsObject instanceof IAtsWorkItem) {
    IAtsWorkItem workItem=(IAtsWorkItem)atsObject;
    StateType stateType=workItem.getStateMgr().getStateType();
    if (stateType != null) {
      if (stateType.isCompletedOrCancelled()) {
        String implementers=implementStrProvider.getImplementersStr(workItem);
        if (Strings.isValid(implementers)) {
          return ""String_Node_Str"" + implementers + ""String_Node_Str"";
        }
      }
    }
    if (atsObject instanceof HasAssignees) {
      return AtsObjects.toString(""String_Node_Str"",((HasAssignees)atsObject).getAssignees());
    }
  }
  return ""String_Node_Str"";
}",0.9229379891631548
96973,"@Override public StateType getStateType() throws OseeCoreException {
  return workItem.getStateDefinition().getStateType();
}","@Override public StateType getStateType() throws OseeCoreException {
  IAtsStateDefinition stateDefinition=workItem.getStateDefinition();
  if (stateDefinition == null) {
    return null;
  }
  return stateDefinition.getStateType();
}",0.6573816155988857
96974,"@Override public IAtsProgram getProgram(IAtsTeamDefinition teamDef){
  IAtsProgram program=null;
  String programUuid=services.getAttributeResolver().getSoleAttributeValueAsString(teamDef,AtsAttributeTypes.ProgramUuid,null);
  if (Strings.isValid(programUuid)) {
    program=services.getProgramService().getProgram(Long.parseLong(programUuid));
  }
  if (program == null) {
    IAtsTeamDefinition topTeamDef=teamDef.getTeamDefinitionHoldingVersions();
    if (!teamDef.equals(topTeamDef)) {
      program=getProgram(teamDef.getParentTeamDef());
    }
  }
  if (program == null) {
    program=(IAtsProgram)services.getQueryService().createQuery(AtsArtifactTypes.Program).andAttr(AtsAttributeTypes.TeamDefinition,services.getStoreService().getGuid(teamDef)).getResults().getOneOrNull();
  }
  return program;
}","@Override public IAtsProgram getProgram(IAtsTeamDefinition teamDef){
  IAtsProgram program=null;
  Object object=services.getAttributeResolver().getSoleAttributeValue(teamDef,AtsAttributeTypes.ProgramUuid,null);
  if (object instanceof ArtifactId) {
    program=services.getConfigItemFactory().getProgram((ArtifactId)object);
  }
 else   if (object instanceof String && Strings.isNumeric((String)object)) {
    program=services.getProgramService().getProgram(Long.parseLong((String)object));
  }
  if (program == null) {
    IAtsTeamDefinition topTeamDef=teamDef.getTeamDefinitionHoldingVersions();
    if (!teamDef.equals(topTeamDef)) {
      program=getProgram(teamDef.getParentTeamDef());
    }
  }
  if (program == null) {
    program=(IAtsProgram)services.getQueryService().createQuery(AtsArtifactTypes.Program).andAttr(AtsAttributeTypes.TeamDefinition,services.getStoreService().getGuid(teamDef)).getResults().getOneOrNull();
  }
  return program;
}",0.8099829835507657
96975,"@Override public IAtsProgram getProgram(IAtsTeamDefinition teamDef){
  IAtsProgram program=null;
  Long programUuid=services.getAttributeResolver().getSoleAttributeValue(teamDef,AtsAttributeTypes.ProgramUuid,null);
  if (programUuid != null) {
    program=services.getProgramService().getProgram(programUuid);
  }
  if (program == null) {
    IAtsTeamDefinition topTeamDef=teamDef.getTeamDefinitionHoldingVersions();
    if (!teamDef.equals(topTeamDef)) {
      program=getProgram(teamDef);
    }
  }
  if (program == null) {
    program=(IAtsProgram)services.getQueryService().createQuery(AtsArtifactTypes.Program).andAttr(AtsAttributeTypes.TeamDefinition,services.getStoreService().getGuid(teamDef)).getResults().getOneOrNull();
  }
  return program;
}","@Override public IAtsProgram getProgram(IAtsTeamDefinition teamDef){
  IAtsProgram program=null;
  String programUuid=services.getAttributeResolver().getSoleAttributeValueAsString(teamDef,AtsAttributeTypes.ProgramUuid,null);
  if (Strings.isValid(programUuid)) {
    program=services.getProgramService().getProgram(Long.parseLong(programUuid));
  }
  if (program == null) {
    IAtsTeamDefinition topTeamDef=teamDef.getTeamDefinitionHoldingVersions();
    if (!teamDef.equals(topTeamDef)) {
      program=getProgram(teamDef);
    }
  }
  if (program == null) {
    program=(IAtsProgram)services.getQueryService().createQuery(AtsArtifactTypes.Program).andAttr(AtsAttributeTypes.TeamDefinition,services.getStoreService().getGuid(teamDef)).getResults().getOneOrNull();
  }
  return program;
}",0.7271548930654569
96976,"private void addSawWorkTypes(){
  SkynetTransaction transaction=TransactionManager.createTransaction(AtsUtilCore.getAtsBranch(),""String_Node_Str"");
  Artifact sawProgram=AtsClientService.get().getArtifact(DemoArtifactToken.SAW_Program);
  for (  DemoCsci csci : DemoCsci.values()) {
    sawProgram.addAttribute(AtsAttributeTypes.CSCI,csci.name());
  }
  sawProgram.persist(transaction);
  Artifact sawTeamDef=AtsClientService.get().getArtifact(DemoArtifactToken.SAW_SW);
  for (  Artifact child : sawTeamDef.getChildren()) {
    child.setSoleAttributeValue(AtsAttributeTypes.ProgramUuid,sawProgram.getUuid().intValue());
    if (child.getName().contains(""String_Node_Str"")) {
      child.setSoleAttributeValue(AtsAttributeTypes.WorkType,WorkType.Code.name());
      child.addAttribute(AtsAttributeTypes.CSCI,DemoCsci.DP.name());
      child.addAttribute(AtsAttributeTypes.CSCI,DemoCsci.SP.name());
    }
 else     if (child.getName().contains(""String_Node_Str"")) {
      child.setSoleAttributeValue(AtsAttributeTypes.WorkType,WorkType.Test.name());
      child.addAttribute(AtsAttributeTypes.CSCI,DemoCsci.DP.name());
    }
 else     if (child.getName().contains(""String_Node_Str"")) {
      child.setSoleAttributeValue(AtsAttributeTypes.WorkType,WorkType.Requirements.name());
      child.addAttribute(AtsAttributeTypes.CSCI,DemoCsci.SP.name());
    }
 else     if (child.getName().contains(""String_Node_Str"")) {
      child.setSoleAttributeValue(AtsAttributeTypes.WorkType,WorkType.SW_Design.name());
      child.addAttribute(AtsAttributeTypes.CSCI,DemoCsci.SP.name());
    }
 else     if (child.getName().contains(""String_Node_Str"")) {
      child.setSoleAttributeValue(AtsAttributeTypes.WorkType,WorkType.Hardware.name());
      child.addAttribute(AtsAttributeTypes.CSCI,DemoCsci.SP.name());
    }
    child.persist(transaction);
  }
  Artifact sawTestAi=AtsClientService.get().getArtifact(DemoArtifactToken.SAW_Test_AI);
  sawTestAi.setSoleAttributeValue(AtsAttributeTypes.ProgramUuid,sawProgram.getUuid().intValue());
  sawTestAi.setSoleAttributeValue(AtsAttributeTypes.WorkType,WorkType.Test.name());
  sawTestAi.addAttribute(AtsAttributeTypes.CSCI,DemoCsci.DP.name());
  sawTestAi.persist(transaction);
  Artifact sawCodeAi=AtsClientService.get().getArtifact(DemoArtifactToken.SAW_Code_AI);
  sawCodeAi.setSoleAttributeValue(AtsAttributeTypes.ProgramUuid,sawProgram.getUuid().intValue());
  sawCodeAi.setSoleAttributeValue(AtsAttributeTypes.WorkType,WorkType.Code.name());
  sawCodeAi.addAttribute(AtsAttributeTypes.CSCI,DemoCsci.SP.name());
  sawCodeAi.persist(transaction);
  transaction.execute();
}","private void addSawWorkTypes(){
  SkynetTransaction transaction=TransactionManager.createTransaction(AtsUtilCore.getAtsBranch(),""String_Node_Str"");
  Artifact sawProgram=AtsClientService.get().getArtifact(DemoArtifactToken.SAW_Program);
  for (  DemoCsci csci : DemoCsci.values()) {
    sawProgram.addAttribute(AtsAttributeTypes.CSCI,csci.name());
  }
  sawProgram.persist(transaction);
  Artifact sawTeamDef=AtsClientService.get().getArtifact(DemoArtifactToken.SAW_SW);
  for (  Artifact child : sawTeamDef.getChildren()) {
    child.setSoleAttributeValue(AtsAttributeTypes.ProgramUuid,sawProgram);
    if (child.getName().contains(""String_Node_Str"")) {
      child.setSoleAttributeValue(AtsAttributeTypes.WorkType,WorkType.Code.name());
      child.addAttribute(AtsAttributeTypes.CSCI,DemoCsci.DP.name());
      child.addAttribute(AtsAttributeTypes.CSCI,DemoCsci.SP.name());
    }
 else     if (child.getName().contains(""String_Node_Str"")) {
      child.setSoleAttributeValue(AtsAttributeTypes.WorkType,WorkType.Test.name());
      child.addAttribute(AtsAttributeTypes.CSCI,DemoCsci.DP.name());
    }
 else     if (child.getName().contains(""String_Node_Str"")) {
      child.setSoleAttributeValue(AtsAttributeTypes.WorkType,WorkType.Requirements.name());
      child.addAttribute(AtsAttributeTypes.CSCI,DemoCsci.SP.name());
    }
 else     if (child.getName().contains(""String_Node_Str"")) {
      child.setSoleAttributeValue(AtsAttributeTypes.WorkType,WorkType.SW_Design.name());
      child.addAttribute(AtsAttributeTypes.CSCI,DemoCsci.SP.name());
    }
 else     if (child.getName().contains(""String_Node_Str"")) {
      child.setSoleAttributeValue(AtsAttributeTypes.WorkType,WorkType.Hardware.name());
      child.addAttribute(AtsAttributeTypes.CSCI,DemoCsci.SP.name());
    }
    child.persist(transaction);
  }
  Artifact sawTestAi=AtsClientService.get().getArtifact(DemoArtifactToken.SAW_Test_AI);
  sawTestAi.setSoleAttributeValue(AtsAttributeTypes.ProgramUuid,sawProgram);
  sawTestAi.setSoleAttributeValue(AtsAttributeTypes.WorkType,WorkType.Test.name());
  sawTestAi.addAttribute(AtsAttributeTypes.CSCI,DemoCsci.DP.name());
  sawTestAi.persist(transaction);
  Artifact sawCodeAi=AtsClientService.get().getArtifact(DemoArtifactToken.SAW_Code_AI);
  sawCodeAi.setSoleAttributeValue(AtsAttributeTypes.ProgramUuid,sawProgram);
  sawCodeAi.setSoleAttributeValue(AtsAttributeTypes.WorkType,WorkType.Code.name());
  sawCodeAi.addAttribute(AtsAttributeTypes.CSCI,DemoCsci.SP.name());
  sawCodeAi.persist(transaction);
  transaction.execute();
}",0.9877788554801163
96977,"@Test public void testSetAttributeById_ArtifactId(){
  Attribute<?> staticIdAttr=null;
  for (  Attribute<?> attr : folderArt.getAttributes()) {
    if (attr.getAttributeType().getId() == CoreAttributeTypes.StaticId.getGuid()) {
      staticIdAttr=attr;
      break;
    }
  }
  IAtsChangeSet changes=AtsClientService.get().getStoreService().createAtsChangeSet(getClass().getSimpleName());
  changes.setAttribute(folderArt,staticIdAttr.getId(),""String_Node_Str"");
  changes.execute();
  folderArt.reloadAttributesAndRelations();
  Assert.assertEquals(""String_Node_Str"",folderArt.getSoleAttributeValue(CoreAttributeTypes.StaticId,null));
}","@Test public void testSetAttributeById_ArtifactId(){
  Attribute<?> staticIdAttr=null;
  for (  Attribute<?> attr : folderArt.getAttributes()) {
    if (attr.getAttributeType().getId().equals(CoreAttributeTypes.StaticId.getGuid())) {
      staticIdAttr=attr;
      break;
    }
  }
  IAtsChangeSet changes=AtsClientService.get().getStoreService().createAtsChangeSet(getClass().getSimpleName());
  changes.setAttribute(folderArt,staticIdAttr.getId(),""String_Node_Str"");
  changes.execute();
  folderArt.reloadAttributesAndRelations();
  Assert.assertEquals(""String_Node_Str"",folderArt.getSoleAttributeValue(CoreAttributeTypes.StaticId,null));
}",0.9898516783762684
96978,"@Override public IAtsProgram getProgram(IAtsTeamDefinition teamDef){
  IAtsProgram program=null;
  String programUuid=services.getAttributeResolver().getSoleAttributeValueAsString(teamDef,AtsAttributeTypes.ProgramUuid,null);
  if (Strings.isValid(programUuid)) {
    program=services.getProgramService().getProgram(Long.parseLong(programUuid));
  }
  if (program == null) {
    IAtsTeamDefinition topTeamDef=teamDef.getTeamDefinitionHoldingVersions();
    if (!teamDef.equals(topTeamDef)) {
      program=getProgram(teamDef);
    }
  }
  if (program == null) {
    program=(IAtsProgram)services.getQueryService().createQuery(AtsArtifactTypes.Program).andAttr(AtsAttributeTypes.TeamDefinition,services.getStoreService().getGuid(teamDef)).getResults().getOneOrNull();
  }
  return program;
}","@Override public IAtsProgram getProgram(IAtsTeamDefinition teamDef){
  IAtsProgram program=null;
  String programUuid=services.getAttributeResolver().getSoleAttributeValueAsString(teamDef,AtsAttributeTypes.ProgramUuid,null);
  if (Strings.isValid(programUuid)) {
    program=services.getProgramService().getProgram(Long.parseLong(programUuid));
  }
  if (program == null) {
    IAtsTeamDefinition topTeamDef=teamDef.getTeamDefinitionHoldingVersions();
    if (!teamDef.equals(topTeamDef)) {
      program=getProgram(teamDef.getParentTeamDef());
    }
  }
  if (program == null) {
    program=(IAtsProgram)services.getQueryService().createQuery(AtsArtifactTypes.Program).andAttr(AtsAttributeTypes.TeamDefinition,services.getStoreService().getGuid(teamDef)).getResults().getOneOrNull();
  }
  return program;
}",0.9881026925485284
96979,"@PUT @Path(""String_Node_Str"") @PermitAll @Produces({MediaType.APPLICATION_JSON,MediaType.APPLICATION_XML}) public Response editPreferences(@PathParam(""String_Node_Str"") String userGuid,@QueryParam(""String_Node_Str"") String key,@QueryParam(""String_Node_Str"") String itemId,String newValue){
  return Response.ok().entity(accountOps.editAccountWebPreferencesData(userGuid,key,itemId,newValue)).build();
}","@PUT @Path(""String_Node_Str"") @PermitAll @Produces({MediaType.APPLICATION_JSON,MediaType.APPLICATION_XML}) public Response editPreferences(@PathParam(""String_Node_Str"") String userUuid,@QueryParam(""String_Node_Str"") String key,@QueryParam(""String_Node_Str"") String itemId,String newValue){
  return Response.ok().entity(accountOps.editAccountWebPreferencesData(userUuid,key,itemId,newValue)).build();
}",0.9950248756218906
96980,"@Override public ServerAccessToken getPreauthorizedToken(Client client,List<String> requestedScopes,UserSubject subject,String grantType){
  long clientId=getClientId(client);
  long subjectId=getSubjectId(subject);
  OAuthToken accessToken=storage.getPreauthorizedToken(clientId,subjectId,grantType);
  ServerAccessToken token=null;
  if (accessToken != null) {
switch (accessToken.getType()) {
case BEARER_TOKEN:
case HAWK_TOKEN:
      token=serializer.decryptAccessToken(this,accessToken.getTokenKey(),getSecretKey());
    break;
case REFRESH_TOKEN:
  Iterable<OAuthToken> accessTokens=storage.getAccessTokensByRefreshToken(accessToken.getTokenKey());
for (OAuthToken entry : accessTokens) {
  boolean isExpired=OAuthUtils.isExpired(entry.getIssuedAt(),entry.getExpiresIn());
  if (!isExpired && entry.getGrantType().equals(grantType)) {
    token=serializer.decryptAccessToken(this,entry.getTokenKey(),getSecretKey());
  }
 else   if (isExpired) {
    revokeToken(client,entry.getTokenKey(),entry.getTokenType());
  }
  break;
}
break;
default :
break;
}
}
if (token != null) {
boolean isRolesOutdated=isRolesOutdated(subject,token);
if (isRolesOutdated) {
revokeAllTokens(client,subjectId,grantType);
token=null;
}
}
return token;
}","@Override public ServerAccessToken getPreauthorizedToken(Client client,List<String> requestedScopes,UserSubject subject,String grantType){
  long clientId=getClientId(client);
  long subjectId=getSubjectId(subject);
  OAuthToken accessToken=storage.getPreauthorizedToken(clientId,subjectId,grantType);
  ServerAccessToken token=null;
  boolean isExpired=false;
  if (accessToken != null) {
    isExpired=OAuthUtils.isExpired(accessToken.getIssuedAt(),accessToken.getExpiresIn());
    if (isExpired) {
      revokeToken(client,accessToken.getTokenKey(),accessToken.getTokenType());
    }
 else {
      token=getTokenHelper(client,grantType,accessToken,token);
    }
  }
  if (token != null) {
    boolean isRolesOutdated=isRolesOutdated(subject,token);
    if (isRolesOutdated) {
      revokeAllTokens(client,subjectId,grantType);
      token=null;
    }
  }
  return token;
}",0.3863636363636363
96981,"@Override public String getGuid(IAtsObject atsObject){
  return ((Artifact)atsObject).getGuid();
}","@Override public String getGuid(IAtsObject atsObject){
  return ((Artifact)atsObject.getStoreObject()).getGuid();
}",0.92018779342723
96982,"public void explore(final Branch sourceBranch,final Branch destBranch,final TransactionRecord transactionId,final TransactionRecord commitTrans,boolean showConflicts){
  this.sourceBranch=sourceBranch;
  this.destBranch=destBranch;
  this.transactionId=transactionId;
  this.commitTrans=commitTrans;
  try {
    mergeBranch=BranchManager.getMergeBranch(sourceBranch,destBranch);
    if (mergeBranch == null) {
      close();
    }
    mergeXWidget.setInputData(sourceBranch,destBranch,transactionId,this,commitTrans,showConflicts);
    if (sourceBranch != null) {
      setPartName(""String_Node_Str"" + sourceBranch.getShortName() + ""String_Node_Str""+ destBranch.getShortName());
    }
 else     if (commitTrans != null) {
      setPartName(""String_Node_Str"" + commitTrans.getId());
    }
 else {
      setPartName(""String_Node_Str"");
    }
  }
 catch (  Exception ex) {
    OseeLog.log(Activator.class,OseeLevel.SEVERE_POPUP,ex);
  }
}","public void explore(final Branch sourceBranch,final Branch destBranch,final TransactionRecord transactionId,final TransactionRecord commitTrans,boolean showConflicts){
  this.sourceBranch=sourceBranch;
  this.destBranch=destBranch;
  this.transactionId=transactionId;
  this.commitTrans=commitTrans;
  try {
    mergeBranch=BranchManager.getMergeBranch(sourceBranch,destBranch);
    if (mergeBranch == null) {
      close();
    }
 else {
      mergeXWidget.setInputData(sourceBranch,destBranch,transactionId,this,commitTrans,showConflicts);
      if (sourceBranch != null) {
        setPartName(""String_Node_Str"" + sourceBranch.getShortName() + ""String_Node_Str""+ destBranch.getShortName());
      }
 else       if (commitTrans != null) {
        setPartName(""String_Node_Str"" + commitTrans.getId());
      }
 else {
        setPartName(""String_Node_Str"");
      }
    }
  }
 catch (  Exception ex) {
    OseeLog.log(Activator.class,OseeLevel.SEVERE_POPUP,ex);
  }
}",0.9831756046267088
96983,"public boolean isSortByTransaction(){
  return xHistoryViewer.getXViewer().getCustomizeMgr().getCurrentCustomizeData().getSortingData().getSortingIds().contains(HistoryXViewerFactory.transaction.getId());
}","public boolean isSortByTransaction(){
  CustomizeData generateCustDataFromTable=xHistoryViewer.getXViewer().getCustomizeMgr().generateCustDataFromTable();
  return generateCustDataFromTable.getSortingData().getSortingIds().contains(HistoryXViewerFactory.transaction.getId());
}",0.7287784679089027
96984,"private DispoItemData buildNewItem(DispoItemData destItem,DispoItem sourceItem,boolean isCoverageCopy,OperationReport report,boolean isSameDiscrepancies) throws JSONException {
  boolean isChangesMade=false;
  DispoItemData newItem=initNewItem(destItem,sourceItem);
  JSONArray newAnnotations=newItem.getAnnotationsList();
  JSONArray sourceAnnotations=sourceItem.getAnnotationsList();
  Set<String> destDefaultAnntationLocations=getDefaultAnnotations(newItem);
  for (int i=0; i < sourceAnnotations.length(); i++) {
    JSONObject annotationJson=sourceAnnotations.getJSONObject(i);
    DispoAnnotationData sourceAnnotation=DispoUtil.jsonObjToDispoAnnotationData(annotationJson);
    String sourceLocation=sourceAnnotation.getLocationRefs();
    if (DispoUtil.isDefaultAnntoation(sourceAnnotation)) {
      if (!destDefaultAnntationLocations.contains(sourceLocation)) {
        report.addMessageForItem(destItem.getName(),""String_Node_Str"",sourceAnnotation.getLocationRefs());
      }
    }
 else     if (isCoverageCopy && destDefaultAnntationLocations.contains(sourceLocation)) {
      report.addMessageForItem(destItem.getName(),""String_Node_Str"",sourceAnnotation.getLocationRefs());
    }
 else     if (newAnnotations.toString().contains(sourceAnnotation.getGuid())) {
      report.addMessageForItem(destItem.getName(),""String_Node_Str"",sourceAnnotation.getLocationRefs(),sourceAnnotation.getGuid());
    }
 else {
      if (isSameDiscrepancies || isCoverageCopy && isCoveredDiscrepanciesExistInDest(destItem,sourceItem,sourceAnnotation,report)) {
        DispoAnnotationData newAnnotation=sourceAnnotation;
        if (destDefaultAnntationLocations.contains(sourceLocation)) {
          String locationRefs=sourceAnnotation.getLocationRefs();
          Integer locationRefAsInt=Integer.valueOf(locationRefs);
          if (locationRefAsInt > 0) {
            newAnnotation.setLocationRefs(String.valueOf(locationRefAsInt * -1));
          }
          report.addMessageForItem(destItem.getName(),""String_Node_Str"",locationRefs);
        }
        connector.connectAnnotation(newAnnotation,newItem.getDiscrepanciesList());
        isChangesMade=true;
        int nextIndex=newAnnotations.length();
        newAnnotation.setIndex(nextIndex);
        newAnnotations.put(nextIndex,DispoUtil.annotationToJsonObj(newAnnotation));
      }
    }
  }
  if (isChangesMade) {
    newItem.setAnnotationsList(newAnnotations);
    String newStatus=connector.getItemStatus(newItem);
    newItem.setStatus(newStatus);
  }
 else   if (isCoverageCopy) {
    newItem=destItem;
    newItem.setGuid(sourceItem.getGuid());
  }
 else {
    report.addMessageForItem(destItem.getName(),""String_Node_Str"");
    newItem=null;
  }
  return newItem;
}","private DispoItemData buildNewItem(DispoItemData destItem,DispoItem sourceItem,boolean isCoverageCopy,OperationReport report,boolean isSameDiscrepancies) throws JSONException {
  boolean isChangesMade=false;
  DispoItemData newItem=initNewItem(destItem,sourceItem);
  JSONArray newAnnotations=newItem.getAnnotationsList();
  JSONArray sourceAnnotations=sourceItem.getAnnotationsList();
  Set<String> destDefaultAnntationLocations=getDefaultAnnotations(newItem);
  Map<String,Integer> placeHolderAnnotationLocations=getPlaceHolderAnnotations(newItem);
  for (int i=0; i < sourceAnnotations.length(); i++) {
    JSONObject annotationJson=sourceAnnotations.getJSONObject(i);
    DispoAnnotationData sourceAnnotation=DispoUtil.jsonObjToDispoAnnotationData(annotationJson);
    String sourceLocation=sourceAnnotation.getLocationRefs();
    if (DispoUtil.isDefaultAnntoation(sourceAnnotation) || !Strings.isValid(sourceAnnotation.getResolutionType())) {
      if (!destDefaultAnntationLocations.contains(sourceLocation)) {
        report.addMessageForItem(destItem.getName(),""String_Node_Str"",sourceAnnotation.getLocationRefs());
      }
    }
 else     if (destDefaultAnntationLocations.contains(sourceLocation)) {
      report.addMessageForItem(destItem.getName(),""String_Node_Str"",sourceAnnotation.getLocationRefs());
    }
 else     if (newAnnotations.toString().contains(sourceAnnotation.getGuid())) {
      report.addMessageForItem(destItem.getName(),""String_Node_Str"",sourceAnnotation.getLocationRefs(),sourceAnnotation.getGuid());
    }
 else {
      if (isSameDiscrepancies && isCoveredDiscrepanciesExistInDest(destItem,sourceItem,sourceAnnotation,report)) {
        DispoAnnotationData newAnnotation=sourceAnnotation;
        if (destDefaultAnntationLocations.contains(sourceLocation)) {
          String locationRefs=sourceAnnotation.getLocationRefs();
          Integer locationRefAsInt=Integer.valueOf(locationRefs);
          if (locationRefAsInt > 0) {
            newAnnotation.setLocationRefs(String.valueOf(locationRefAsInt * -1));
          }
          report.addMessageForItem(destItem.getName(),""String_Node_Str"",locationRefs);
        }
        connector.connectAnnotation(newAnnotation,newItem.getDiscrepanciesList());
        isChangesMade=true;
        int nextIndex;
        if (placeHolderAnnotationLocations.containsKey(sourceLocation)) {
          nextIndex=placeHolderAnnotationLocations.get(sourceLocation);
        }
 else {
          nextIndex=newAnnotations.length();
        }
        newAnnotation.setIndex(nextIndex);
        newAnnotations.put(nextIndex,DispoUtil.annotationToJsonObj(newAnnotation));
      }
    }
  }
  if (isChangesMade) {
    newItem.setAnnotationsList(newAnnotations);
    String newStatus=connector.getItemStatus(newItem);
    newItem.setStatus(newStatus);
  }
 else   if (!isCoverageCopy) {
    newItem=destItem;
    newItem.setGuid(sourceItem.getGuid());
  }
 else {
    report.addMessageForItem(destItem.getName(),""String_Node_Str"");
    newItem=null;
  }
  return newItem;
}",0.9341671009206184
96985,"private DispoItemData createNewItemWithCopiedAnnotations(DispoItemData destItem,DispoItem sourceItem,boolean isCoverageCopy,OperationReport report){
  DispoItemData toReturn=null;
  try {
    boolean isSameDiscrepancies=matchAllDiscrepancies(destItem,sourceItem);
    if (isSameDiscrepancies || isCoverageCopy) {
      toReturn=buildNewItem(destItem,sourceItem,isCoverageCopy,report,isSameDiscrepancies);
    }
 else {
      report.addMessageForItem(destItem.getName(),""String_Node_Str"",sourceItem.getGuid());
    }
  }
 catch (  JSONException ex) {
    report.addOtherMessage(""String_Node_Str"",sourceItem.getName(),ex.getMessage());
  }
  return toReturn;
}","private DispoItemData createNewItemWithCopiedAnnotations(DispoItemData destItem,DispoItem sourceItem,boolean isCoverageCopy,OperationReport report){
  DispoItemData toReturn=null;
  try {
    boolean isSameDiscrepancies=matchAllDiscrepancies(destItem,sourceItem);
    if (!isSameDiscrepancies) {
      report.addMessageForItem(destItem.getName(),""String_Node_Str"",sourceItem.getGuid());
    }
    toReturn=buildNewItem(destItem,sourceItem,isCoverageCopy,report,isSameDiscrepancies);
  }
 catch (  JSONException ex) {
    report.addOtherMessage(""String_Node_Str"",sourceItem.getName(),ex.getMessage());
  }
  return toReturn;
}",0.7950116913484022
96986,"private List<DispoItem> createItems(Map<String,DispoItem> exisitingItems,OperationReport report){
  List<DispoItem> toReturn;
  Collection<DispoItemData> values=datIdToItem.values();
  for (  DispoItemData item : values) {
    dataFactory.initDispoItem(item);
    item.setTotalPoints(String.valueOf(item.getAnnotationsList().length() + item.getDiscrepanciesList().length()));
  }
  if (!exisitingItems.isEmpty()) {
    DispoSetCopier copier=new DispoSetCopier(dispoConnector);
    List<DispoItemData> itemsFromImport=new ArrayList<>();
    itemsFromImport.addAll(values);
    Map<String,DispoItemData> nameToItem=new HashMap<>();
    for (    DispoItemData item : itemsFromImport) {
      nameToItem.put(item.getName(),item);
    }
    toReturn=copier.copyAllDispositions(nameToItem,exisitingItems.values(),true,report);
  }
 else {
    toReturn=new ArrayList<>();
    toReturn.addAll(values);
  }
  for (  DispoItem item : toReturn) {
    if (item.getStatus().equalsIgnoreCase(""String_Node_Str"")) {
      createPlaceHolderAnnotations((DispoItemData)item,report);
    }
  }
  return toReturn;
}","private List<DispoItem> createItems(Map<String,DispoItem> exisitingItems,OperationReport report){
  List<DispoItem> toReturn;
  Collection<DispoItemData> values=datIdToItem.values();
  for (  DispoItemData item : values) {
    dataFactory.initDispoItem(item);
    item.setTotalPoints(String.valueOf(item.getAnnotationsList().length() + item.getDiscrepanciesList().length()));
  }
  if (!exisitingItems.isEmpty()) {
    DispoSetCopier copier=new DispoSetCopier(dispoConnector);
    List<DispoItemData> itemsFromImport=new ArrayList<>();
    itemsFromImport.addAll(values);
    Map<String,DispoItemData> nameToItem=new HashMap<>();
    for (    DispoItemData item : itemsFromImport) {
      nameToItem.put(item.getName(),item);
    }
    toReturn=copier.copyAllDispositions(nameToItem,exisitingItems.values(),false,report);
  }
 else {
    toReturn=new ArrayList<>();
    toReturn.addAll(values);
  }
  for (  DispoItem item : toReturn) {
    if (item.getStatus().equalsIgnoreCase(""String_Node_Str"")) {
      createPlaceHolderAnnotations((DispoItemData)item,report);
    }
  }
  return toReturn;
}",0.9968021927820924
96987,"@Path(""String_Node_Str"") @POST @RolesAllowed(DispoRoles.ROLES_ADMINISTRATOR) @Produces(MediaType.APPLICATION_JSON) public Response getDispoSetCopy(@QueryParam(""String_Node_Str"") String destinationSet,@QueryParam(""String_Node_Str"") String sourceSet,CopySetParams params){
  Response.Status status;
  final DispoSet destination=dispoApi.getDispoSetById(program,destinationSet);
  final DispoSet source=dispoApi.getDispoSetById(program,sourceSet);
  String reportUrl=""String_Node_Str"";
  DispoSetData responseSet=new DispoSetData();
  responseSet.setOperationStatus(reportUrl);
  if (Strings.isValid(reportUrl)) {
    status=Status.OK;
  }
 else {
    status=Status.NOT_FOUND;
  }
  return Response.status(status).entity(responseSet).build();
}","@Path(""String_Node_Str"") @POST @RolesAllowed(DispoRoles.ROLES_ADMINISTRATOR) @Produces(MediaType.APPLICATION_JSON) public Response getDispoSetCopy(@QueryParam(""String_Node_Str"") String destinationSet,@QueryParam(""String_Node_Str"") String sourceSet,CopySetParams params){
  Response.Status status;
  final DispoSet destination=dispoApi.getDispoSetById(program,destinationSet);
  final DispoSet source=dispoApi.getDispoSetById(program,sourceSet);
  String reportUrl=dispoApi.copyDispoSet(program,destination,source,params);
  DispoSetData responseSet=new DispoSetData();
  responseSet.setOperationStatus(reportUrl);
  if (Strings.isValid(reportUrl)) {
    status=Status.OK;
  }
 else {
    status=Status.NOT_FOUND;
  }
  return Response.status(status).entity(responseSet).build();
}",0.9520052596975674
96988,"@SuppressWarnings(""String_Node_Str"") public <T>Collection<T> getCollection(Class<T> clazz,String parameterName) throws OseeArgumentException {
  List<T> results=new ArrayList<>();
  for (  Object obj : getValue(Collection.class,parameterName)) {
    if (clazz.isInstance(obj)) {
      results.add((T)obj);
    }
  }
  return results;
}","@SuppressWarnings(""String_Node_Str"") public <T>Collection<T> getCollection(Class<T> clazz,String parameterName) throws OseeArgumentException {
  List<T> results=new ArrayList<>();
  Collection<T> collection=getValue(Collection.class,parameterName);
  if (collection != null) {
    for (    Object obj : collection) {
      if (clazz.isInstance(obj)) {
        results.add((T)obj);
      }
    }
  }
  return results;
}",0.7729083665338645
96989,"private void moveOutputToNextAvailableSpot(ScriptTask task){
  OutputModel outputModel=task.getScriptModel().getOutputModel();
  File oldFile=outputModel.getFile();
  if (oldFile != null && oldFile.exists() && oldFile.isFile() && oldFile.canRead()) {
    String outputExtension=""String_Node_Str"" + outputModel.getFileExtension();
    int fileNum=1;
    File destFile=new File(oldFile.getAbsoluteFile().toString().replaceFirst(outputExtension,""String_Node_Str"" + fileNum + outputExtension));
    if (destFile.exists()) {
      while (destFile.exists()) {
        fileNum++;
        destFile=new File(oldFile.getAbsoluteFile().toString().replaceFirst(outputExtension,""String_Node_Str"" + fileNum + outputExtension));
      }
    }
    try {
      Lib.copyFile(oldFile,destFile);
    }
 catch (    IOException e2) {
      OseeLog.log(TestManagerPlugin.class,Level.SEVERE,""String_Node_Str"",e2);
    }
  }
}","private void moveOutputToNextAvailableSpot(ScriptTask task){
  OutputModel outputModel=task.getScriptModel().getOutputModel();
  File oldFile=outputModel.getFile();
  if (oldFile != null && oldFile.exists() && oldFile.isFile() && oldFile.canRead()) {
    String outputExtension=""String_Node_Str"" + outputModel.getFileExtension();
    String extensionRegex=""String_Node_Str"" + outputExtension + ""String_Node_Str"";
    int fileNum=1;
    File destFile=new File(oldFile.getAbsoluteFile().toString().replaceFirst(extensionRegex,""String_Node_Str"" + fileNum + outputExtension));
    if (destFile.exists()) {
      while (destFile.exists()) {
        fileNum++;
        destFile=new File(oldFile.getAbsoluteFile().toString().replaceFirst(extensionRegex,""String_Node_Str"" + fileNum + outputExtension));
      }
    }
    try {
      Lib.copyFile(oldFile,destFile);
    }
 catch (    IOException e2) {
      OseeLog.log(TestManagerPlugin.class,Level.SEVERE,""String_Node_Str"",e2);
    }
  }
}",0.9251194901752524
96990,"protected void updateListWidget(){
  if (listViewer != null) {
    listViewer.refresh();
    validate();
  }
}","protected void updateListWidget(){
  if (listViewer == null || listViewer.getTable().isDisposed()) {
    return;
  }
  listViewer.getTable().deselectAll();
  validate();
}",0.7046263345195729
96991,"protected void updateListWidget(){
  if (listViewer == null || listViewer.getTable().isDisposed()) {
    return;
  }
  listViewer.getTable().deselectAll();
  validate();
}","protected void updateListWidget(){
  if (listViewer == null || listViewer.getTable().isDisposed()) {
    return;
  }
  validate();
}",0.8712871287128713
96992,"private void readXmlData(){
  TestManagerPlugin.log(Level.INFO,""String_Node_Str"");
  IEditorInput coreinput=getEditorInput();
  String xmlText=""String_Node_Str"";
  if (coreinput instanceof IFileEditorInput) {
    IFileEditorInput input=(IFileEditorInput)getEditorInput();
    thisIFile=input.getFile();
    String name=thisIFile.getName();
    this.setPartName(name);
    if (thisIFile != null) {
      try {
        xmlText=Lib.inputStreamToString(thisIFile.getContents());
      }
 catch (      Exception ex) {
        ex.printStackTrace();
      }
    }
 else {
      TestManagerPlugin.log(Level.SEVERE,""String_Node_Str"");
    }
  }
 else   if (coreinput instanceof TestManagerInput) {
    TestManagerInput input=(TestManagerInput)getEditorInput();
    String name=""String_Node_Str"";
    this.setPartName(name);
    xmlText=input.getDefaultXML();
  }
  model.setFromXml(xmlText);
}","private void readXmlData(){
  TestManagerPlugin.log(Level.INFO,""String_Node_Str"");
  IEditorInput coreinput=getEditorInput();
  String xmlText=""String_Node_Str"";
  if (coreinput instanceof IFileEditorInput) {
    IFileEditorInput input=(IFileEditorInput)getEditorInput();
    thisIFile=input.getFile();
    try {
      thisIFile.refreshLocal(IResource.DEPTH_ZERO,null);
    }
 catch (    CoreException e) {
      e.printStackTrace();
    }
    String name=thisIFile.getName();
    this.setPartName(name);
    if (thisIFile != null) {
      try {
        xmlText=Lib.inputStreamToString(thisIFile.getContents());
      }
 catch (      Exception ex) {
        ex.printStackTrace();
      }
    }
 else {
      TestManagerPlugin.log(Level.SEVERE,""String_Node_Str"");
    }
  }
 else   if (coreinput instanceof TestManagerInput) {
    TestManagerInput input=(TestManagerInput)getEditorInput();
    String name=""String_Node_Str"";
    this.setPartName(name);
    xmlText=input.getDefaultXML();
  }
  model.setFromXml(xmlText);
}",0.9280839895013124
96993,"@Path(""String_Node_Str"") @POST @RolesAllowed(DispoRoles.ROLES_ADMINISTRATOR) @Consumes(MediaType.APPLICATION_JSON) @Produces(MediaType.APPLICATION_JSON) public Response getDispoSetCopy(@Encoded @QueryParam(""String_Node_Str"") String destinationSet,@Encoded @QueryParam(""String_Node_Str"") String sourceSet,CopySetParams params){
  Response.Status status;
  final DispoSet destination=dispoApi.getDispoSetById(program,destinationSet);
  final DispoSet source=dispoApi.getDispoSetById(program,sourceSet);
  String reportUrl=dispoApi.copyDispoSet(program,destination,source,params);
  DispoSetData responseSet=new DispoSetData();
  responseSet.setOperationStatus(reportUrl);
  if (Strings.isValid(reportUrl)) {
    status=Status.OK;
  }
 else {
    status=Status.NOT_FOUND;
  }
  return Response.status(status).entity(responseSet).build();
}","@Path(""String_Node_Str"") @POST @RolesAllowed(DispoRoles.ROLES_ADMINISTRATOR) @Produces(MediaType.APPLICATION_JSON) public Response getDispoSetCopy(@QueryParam(""String_Node_Str"") String destinationSet,@QueryParam(""String_Node_Str"") String sourceSet,CopySetParams params){
  Response.Status status;
  final DispoSet destination=dispoApi.getDispoSetById(program,destinationSet);
  final DispoSet source=dispoApi.getDispoSetById(program,sourceSet);
  String reportUrl=""String_Node_Str"";
  DispoSetData responseSet=new DispoSetData();
  responseSet.setOperationStatus(reportUrl);
  if (Strings.isValid(reportUrl)) {
    status=Status.OK;
  }
 else {
    status=Status.NOT_FOUND;
  }
  return Response.status(status).entity(responseSet).build();
}",0.5453392517438174
96994,"public AccountWebPreferences getAccountWebPreferencesData(String value){
  ResultSet<Account> result=accountAdmin.getAccountByGuid(value);
  Account account=result.getExactlyOne();
  AccountWebPreferences preferences=account.getWebPreferences();
  return preferences;
}","public AccountWebPreferences getAccountWebPreferencesData(Long id){
  ResultSet<Account> result=accountAdmin.getAccountById(id);
  Account account=result.getExactlyOne();
  AccountWebPreferences preferences=account.getWebPreferences();
  return preferences;
}",0.9356060606060606
96995,"@GET @Path(""String_Node_Str"") @PermitAll @Produces({MediaType.APPLICATION_JSON,MediaType.APPLICATION_XML}) public Response getPreferences(@PathParam(""String_Node_Str"") String id){
  return Response.ok().entity(accountOps.getAccountWebPreferencesData(id)).build();
}","@GET @Path(""String_Node_Str"") @PermitAll @Produces({MediaType.APPLICATION_JSON,MediaType.APPLICATION_XML}) public Response getPreferences(@PathParam(""String_Node_Str"") Long id){
  return Response.ok().entity(accountOps.getAccountWebPreferencesData(id)).build();
}",0.9886363636363636
96996,"@Override public ArtifactProxy asCastedObject(Object object) throws OseeCoreException {
  XArtifactProxy proxy=null;
  if (object instanceof Artifact) {
    final Artifact artifact=(Artifact)object;
    proxy=new XArtifactProxy(artifact);
  }
 else   if (object instanceof IOseeBranch) {
    IOseeBranch branch=(Branch)object;
    final Artifact artifact=OseeSystemArtifacts.getDefaultHierarchyRootArtifact(branch);
    proxy=new XArtifactProxy(artifact);
  }
  return proxy;
}","@Override public ArtifactProxy asCastedObject(Object object) throws OseeCoreException {
  XArtifactProxy proxy=null;
  if (object instanceof Artifact) {
    final Artifact artifact=(Artifact)object;
    proxy=new XArtifactProxy(artifact);
  }
 else   if (object instanceof IOseeBranch) {
    IOseeBranch branch=(IOseeBranch)object;
    final Artifact artifact=OseeSystemArtifacts.getDefaultHierarchyRootArtifact(branch);
    proxy=new XArtifactProxy(artifact);
  }
  return proxy;
}",0.994786235662148
96997,"public static void computeXTextSize(XText xText){
  if (Widgets.isAccessible(xText.getStyledText())) {
    int height=xText.getStyledText().getLineCount() * xText.getStyledText().getLineHeight();
    GridData formTextGd=new GridData(SWT.FILL,SWT.FILL,true,true);
    if (xText.isFillVertically() && height < 60) {
      formTextGd.heightHint=60;
    }
 else {
      formTextGd.heightHint=height;
    }
    formTextGd.widthHint=200;
    xText.getStyledText().setLayoutData(formTextGd);
  }
}","public static void computeXTextSize(XText xText){
  if (Widgets.isAccessible(xText.getStyledText())) {
    int lineCount=xText.getStyledText().getLineCount();
    int lineLimit=Integer.valueOf(OseeInfo.getCachedValue(ATTR_FORM_PART_LINE_LIMIT));
    lineCount=lineCount > lineLimit ? lineLimit : lineCount;
    int height=lineCount * xText.getStyledText().getLineHeight();
    GridData formTextGd=new GridData(SWT.FILL,SWT.FILL,true,true);
    if (xText.isFillVertically() && height < 60) {
      formTextGd.heightHint=60;
    }
 else {
      formTextGd.heightHint=height;
    }
    formTextGd.widthHint=200;
    xText.getStyledText().setLayoutData(formTextGd);
  }
}",0.8383751080380294
96998,"public static URI computeRedirectUri(URI redirectURI,boolean ignoreBasePath,Message m,ContainerRequestContext context){
  URI finalRedirectURI=null;
  if (redirectURI != null) {
    if (!redirectURI.isAbsolute()) {
      String endpointAddress=HttpUtils.getEndpointAddress(m);
      Object basePathProperty=m.get(Message.BASE_PATH);
      if (ignoreBasePath && basePathProperty != null && !""String_Node_Str"".equals(basePathProperty)) {
        int index=endpointAddress.lastIndexOf(basePathProperty.toString());
        if (index != -1) {
          endpointAddress=endpointAddress.substring(0,index);
        }
      }
      UriInfo uriInfo=context.getUriInfo();
      URI requestUrl=uriInfo.getRequestUri();
      String continueURL=requestUrl.toASCIIString();
      finalRedirectURI=UriBuilder.fromUri(endpointAddress).path(redirectURI.toString()).queryParam(""String_Node_Str"",continueURL).build();
    }
 else {
      finalRedirectURI=redirectURI;
    }
  }
  return finalRedirectURI;
}","public static URI computeRedirectUri(URI redirectURI,boolean ignoreBasePath,Message m,ContainerRequestContext context){
  URI finalRedirectURI=null;
  if (redirectURI != null) {
    if (!redirectURI.isAbsolute()) {
      String endpointAddress=HttpUtils.getEndpointAddress(m);
      Object basePathProperty=m.get(Message.BASE_PATH);
      if (ignoreBasePath && basePathProperty != null && !""String_Node_Str"".equals(basePathProperty)) {
        int index=endpointAddress.lastIndexOf(basePathProperty.toString());
        if (index != -1) {
          endpointAddress=endpointAddress.substring(0,index);
        }
      }
      UriInfo uriInfo=context.getUriInfo();
      URI requestUrl=uriInfo.getRequestUri();
      String scheme=requestUrl.getScheme();
      String forwardedServer=getForwarderServer();
      String server;
      if (Strings.isValid(forwardedServer)) {
        server=forwardedServer;
      }
 else {
        int port=requestUrl.getPort();
        server=String.format(""String_Node_Str"",requestUrl.getHost(),port);
      }
      URI requestUrlWithServer=UriBuilder.fromPath(server).path(requestUrl.getPath()).replaceQuery(requestUrl.getRawQuery()).scheme(scheme).build();
      String continueURL=requestUrlWithServer.toASCIIString();
      finalRedirectURI=UriBuilder.fromPath(server).scheme(scheme).path(redirectURI.toString()).queryParam(""String_Node_Str"",continueURL).build();
    }
 else {
      finalRedirectURI=redirectURI;
    }
  }
  return finalRedirectURI;
}",0.7011308562197092
96999,"@Before public void setUp(){
  extractor=new DoorsArtifactExtractor();
  collector=new RoughArtifactCollector(null);
}","@Before public void setUp() throws UnsupportedEncodingException {
  extractor=new DoorsArtifactExtractor();
  collector=new RoughArtifactCollector(null);
  theArtifact=ArtifactTypeManager.addArtifact(DemoTypes.DemoTestRequirement,DemoBranches.SAW_Bld_1);
  String image=new String(""String_Node_Str"");
  imageList.add(Lib.stringToInputStream(image));
  theArtifact.setAttributeFromValues(CoreAttributeTypes.ImageContent,imageList);
  theArtifact.setAttributeValues(CoreAttributeTypes.HTMLContent,content);
}",0.2243589743589743
97000,"@Test public void testHtmlSourceExtractor() throws Exception {
  extractor.extractFromSource(NullOperationLogger.getSingleton(),doorHtmlExport.toURI(),collector);
  List<RoughArtifact> theOutput=collector.getRoughArtifacts();
  assertEquals(""String_Node_Str"",ARTIFACT_NAMES.length,theOutput.size());
  for (int index=0; index < ARTIFACT_NAMES.length; index++) {
    String expectedName=ARTIFACT_NAMES[index];
    RoughArtifact artifact=theOutput.get(index);
    String actualName=artifact.getName();
    assertEquals(""String_Node_Str"",expectedName,actualName);
    RoughArtifactKind expectedType=ARTIFACT_TYPES[index];
    RoughArtifactKind actualType=artifact.getRoughArtifactKind();
    assertEquals(""String_Node_Str"",expectedType,actualType);
    if (PRIME_ITEM_DIAGRAM.equals(actualName)) {
      checkPrimeItemDiagram(artifact);
    }
 else     if (VOICE_STATUS.equals(actualName)) {
      checkList(artifact);
    }
  }
}","@Test public void testHtmlSourceExtractor() throws Exception {
  extractor.extractFromSource(NullOperationLogger.getSingleton(),doorHtmlExport.toURI(),collector);
  List<RoughArtifact> theOutput=collector.getRoughArtifacts();
  assertEquals(""String_Node_Str"",ARTIFACT_NAMES.length,theOutput.size());
  for (int index=0; index < ARTIFACT_NAMES.length; index++) {
    String expectedName=ARTIFACT_NAMES[index];
    RoughArtifact artifact=theOutput.get(index);
    String actualName=artifact.getName();
    assertEquals(""String_Node_Str"",expectedName,actualName);
    RoughArtifactKind expectedType=ARTIFACT_TYPES[index];
    RoughArtifactKind actualType=artifact.getRoughArtifactKind();
    assertEquals(""String_Node_Str"",expectedType,actualType);
    if (PRIME_ITEM_DIAGRAM.equals(actualName)) {
      checkPrimeItemDiagram(artifact);
      assertTrue(extractor.artifactCreated(theArtifact,artifact));
    }
 else     if (VOICE_STATUS.equals(actualName)) {
      checkList(artifact);
    }
  }
}",0.965122332118688
